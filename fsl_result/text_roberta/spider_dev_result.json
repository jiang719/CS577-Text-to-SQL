{
  "concert_singer": [
    {
      "question": "How many singers do we have?",
      "query": "SELECT count(*) FROM singer"
    },
    {
      "question": "What is the total number of singers?",
      "query": "SELECT count(*) FROM singer"
    },
    {
      "question": "Show name, country, age for all singers ordered by age from the oldest to the youngest.",
      "query": "SELECT Name, Country, Age FROM singer ORDER BY Age DESC"
    },
    {
      "question": "What are the names, countries, and ages for every singer in descending order of age?",
      "query": "SELECT Name, Country, Age FROM singer ORDER BY Age DESC"
    },
    {
      "question": "What is the average, minimum, and maximum age of all singers from France?",
      "query": "SELECT AVG(age), MIN(age), MAX(age) FROM singer WHERE country = 'France'"
    },
    {
      "question": "What is the average, minimum, and maximum age for all French singers?",
      "query": "SELECT AVG(Age), MIN(Age), MAX(Age) FROM singer WHERE Country = 'France'"
    },
    {
      "question": "Show the name and the release year of the song by the youngest singer.",
      "query": "SELECT Name, Song_release_year FROM singer ORDER BY Age ASC LIMIT 1"
    },
    {
      "question": "What are the names and release years for all the songs of the youngest singer?",
      "query": "SELECT Name, Song_release_year FROM singer WHERE Age = (SELECT MIN(Age) FROM singer)"
    },
    {
      "question": "What are all distinct countries where singers above age 20 are from?",
      "query": "SELECT DISTINCT Country FROM singer WHERE Age > 20"
    },
    {
      "question": "What are  the different countries with singers above age 20?",
      "query": "SELECT DISTINCT country FROM singer WHERE age > 20"
    },
    {
      "question": "Show all countries and the number of singers in each country.",
      "query": "SELECT country, COUNT(*) FROM singer GROUP BY country"
    },
    {
      "question": "How many singers are from each country?",
      "query": "SELECT country, COUNT(*) FROM singer GROUP BY country"
    },
    {
      "question": "List all song names by singers above the average age.",
      "query": "SELECT Song_Name FROM singer WHERE Age > (SELECT AVG(Age) FROM singer)"
    },
    {
      "question": "What are all the song names by singers who are older than average?",
      "query": "SELECT Song_Name FROM singer WHERE Age > (SELECT AVG(Age) FROM singer)"
    },
    {
      "question": "Show location and name for all stadiums with a capacity between 5000 and 10000.",
      "query": "SELECT Location, Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000"
    },
    {
      "question": "What are the locations and names of all stations with capacity between 5000 and 10000?",
      "query": "SELECT Location, Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000"
    },
    {
      "question": "What is the maximum capacity and the average of all stadiums?",
      "query": "SELECT MAX(Capacity), AVG(Capacity) FROM stadium"
    },
    {
      "question": "What is the average and maximum capacities for all stadiums?",
      "query": "SELECT avg(Capacity), max(Capacity) FROM stadium"
    },
    {
      "question": "What is the name and capacity for the stadium with highest average attendance?",
      "query": "SELECT Name, Capacity FROM stadium WHERE Average = (SELECT MAX(Average) FROM stadium)"
    },
    {
      "question": "What is the name and capacity for the stadium with the highest average attendance?",
      "query": "SELECT Name, Capacity FROM stadium WHERE Average = (SELECT MAX(Average) FROM stadium)"
    },
    {
      "question": "How many concerts are there in year 2014 or 2015?",
      "query": "SELECT COUNT(*) FROM concert WHERE Year IN (2014, 2015)"
    },
    {
      "question": "How many concerts occurred in 2014 or 2015?",
      "query": "SELECT count(*) FROM concert WHERE Year IN (2014, 2015)"
    },
    {
      "question": "Show the stadium name and the number of concerts in each stadium.",
      "query": "SELECT T1.Name, COUNT(*) FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID GROUP BY T1.Stadium_ID"
    },
    {
      "question": "For each stadium, how many concerts play there?",
      "query": "SELECT T1.Name, COUNT(*) FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID GROUP BY T1.Stadium_ID"
    },
    {
      "question": "Show the stadium name and capacity with most number of concerts in year 2014 or after.",
      "query": "SELECT stadium.name, stadium.capacity, COUNT(*) as num_concerts FROM concert JOIN stadium ON concert.stadium_id = stadium.stadium_id WHERE concert.year >= 2014 GROUP BY concert.stadium_id ORDER BY num_concerts DESC LIMIT 1"
    },
    {
      "question": "What is the name and capacity of the stadium with the most concerts after 2013?",
      "query": "SELECT Name, Capacity FROM stadium WHERE Stadium_ID IN (SELECT Stadium_ID FROM concert WHERE Year > 2013) ORDER BY (SELECT COUNT(*) FROM concert WHERE Year > 2013 AND concert.Stadium_ID = stadium.Stadium_ID) DESC LIMIT 1"
    },
    {
      "question": "Which year has most number of concerts?",
      "query": "SELECT Year, COUNT(*) FROM concert GROUP BY Year ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
      "question": "What is the year that had the most concerts?",
      "query": "SELECT Year FROM concert GROUP BY Year ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
      "question": "Show the stadium names without any concert.",
      "query": "SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert)"
    },
    {
      "question": "What are the names of the stadiums without any concerts?",
      "query": "SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert)"
    },
    {
      "question": "Show countries where a singer above age 40 and a singer below 30 are from.",
      "query": "SELECT DISTINCT T1.country FROM singer AS T1 JOIN singer_in_concert AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T2.concert_id  =  T3.concert_id WHERE T1.age  >  40 INTERSECT SELECT DISTINCT T1.country FROM singer AS T1 JOIN singer_in_concert AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T2.concert_id  =  T3.concert_id WHERE T1.age  <  30"
    },
    {
      "question": "Show names for all stadiums except for stadiums having a concert in year 2014.",
      "query": "SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert WHERE Year = 2014)"
    },
    {
      "question": "What are the names of all stadiums that did not have a concert in 2014?",
      "query": "SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert WHERE Year = 2014)"
    },
    {
      "question": "Show the name and theme for all concerts and the number of singers in each concert.",
      "query": "SELECT T1.concert_Name, T1.Theme, COUNT(T2.Singer_ID) FROM concert AS T1 LEFT JOIN singer_in_concert AS T2 ON T1.concert_ID = T2.concert_ID GROUP BY T1.concert_ID"
    },
    {
      "question": "What are the names , themes , and number of singers for every concert?",
      "query": "SELECT concert_Name ,  Theme ,  COUNT(*) AS number_of_singers FROM concert AS T1 JOIN singer_in_concert AS T2 ON T1.concert_ID  =  T2.concert_ID GROUP BY T1.concert_ID"
    },
    {
      "question": "List singer names and number of concerts for each singer.",
      "query": "SELECT T2.Name ,  COUNT(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Singer_ID"
    },
    {
      "question": "What are the names of the singers and number of concerts for each person?",
      "query": "SELECT T2.Name ,  COUNT(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Singer_ID"
    },
    {
      "question": "List all singer names in concerts in year 2014.",
      "query": "SELECT t2.Name FROM concert AS t1 JOIN singer_in_concert AS t3 ON t1.concert_ID  =  t3.concert_ID JOIN singer AS t2 ON t3.Singer_ID  =  t2.Singer_ID WHERE t1.Year  =  2014"
    },
    {
      "question": "What are the names of the singers who performed in a concert in 2014?",
      "query": "SELECT Name FROM singer WHERE Singer_ID IN (SELECT Singer_ID FROM singer_in_concert WHERE concert_ID IN (SELECT concert_ID FROM concert WHERE Year = 2014))"
    },
    {
      "question": "what is the name and nation of the singer who have a song having 'Hey' in its name?",
      "query": "SELECT Name, Country FROM singer WHERE Song_Name LIKE '%Hey%'"
    },
    {
      "question": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?",
      "query": "SELECT Name, Country FROM singer WHERE Song_Name LIKE '%Hey%'"
    },
    {
      "question": "Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015.",
      "query": "SELECT name, location FROM stadium WHERE stadium_id IN (SELECT stadium_id FROM concert WHERE year = 2014) AND stadium_id IN (SELECT stadium_id FROM concert WHERE year = 2015)"
    },
    {
      "question": "What are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015?",
      "query": "SELECT Name, Location FROM stadium WHERE Stadium_ID IN (SELECT Stadium_ID FROM concert WHERE Year = 2014) AND Stadium_ID IN (SELECT Stadium_ID FROM concert WHERE Year = 2015)"
    },
    {
      "question": "Find the number of concerts happened in the stadium with the highest capacity.",
      "query": "SELECT count(*) FROM concert WHERE Stadium_ID = (SELECT Stadium_ID FROM stadium ORDER BY Capacity DESC LIMIT 1)"
    },
    {
      "question": "What are the number of concerts that occurred in the stadium with the largest capacity?",
      "query": "SELECT COUNT(*) FROM concert WHERE Stadium_ID = (SELECT Stadium_ID FROM stadium ORDER BY Capacity DESC LIMIT 1)"
    }
  ],
  "pets_1": [
    {
      "question": "Find the number of pets whose weight is heavier than 10.",
      "query": "SELECT count(*) FROM Pets WHERE weight  >  10"
    },
    {
      "question": "How many pets have a greater weight than 10?",
      "query": "SELECT count(*) FROM Pets WHERE weight > 10"
    },
    {
      "question": "Find the weight of the youngest dog.",
      "query": "SELECT weight FROM Pets WHERE PetType  =  \"Dog\" AND pet_age  =  (SELECT min(pet_age) FROM Pets WHERE PetType  =  \"Dog\")"
    },
    {
      "question": "How much does the youngest dog weigh?",
      "query": "SELECT MIN(weight) FROM Pets WHERE pettype = \"Dog\""
    },
    {
      "question": "Find the maximum weight for each type of pet. List the maximum weight and pet type.",
      "query": "SELECT MAX(weight) ,  pettype FROM Pets GROUP BY pettype"
    },
    {
      "question": "List the maximum weight and type for each type of pet.",
      "query": "SELECT PetType, MAX(weight) FROM Pets GROUP BY PetType"
    },
    {
      "question": "Find number of pets owned by students who are older than 20.",
      "query": "SELECT count(*) FROM Has_pet AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID JOIN Pets AS T3 ON T1.PetID  =  T3.PetID WHERE T2.age  >  20"
    },
    {
      "question": "How many pets are owned by students that have an age greater than 20?",
      "query": "SELECT count(*) FROM Has_pet AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID JOIN Pets AS T3 ON T1.PetID  =  T3.PetID WHERE T2.age  >  20"
    },
    {
      "question": "Find the number of dog pets that are raised by female students (with sex F).",
      "query": "SELECT count(*) FROM Student AS T1 JOIN Has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN Pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'Dog'"
    },
    {
      "question": "How many dog pets are raised by female students?",
      "query": "SELECT count(*) FROM Has_pet AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID JOIN Pets AS T3 ON T1.PetID  =  T3.PetID WHERE T2.sex  =  'F' AND T3.pettype  =  'Dog'"
    },
    {
      "question": "Find the number of distinct type of pets.",
      "query": "SELECT count(DISTINCT pettype) FROM Pets"
    },
    {
      "question": "How many different types of pet are there?",
      "query": "SELECT count(DISTINCT pettype) FROM pets"
    },
    {
      "question": "Find the first name of students who have cat or dog pet.",
      "query": "SELECT DISTINCT T1.fname FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.stuid  =  T2.stuid JOIN Pets AS T3 ON T2.petid  =  T3.petid WHERE T3.pettype  =  'Cat' OR T3.pettype  =  'Dog'"
    },
    {
      "question": "What are the first names of every student who has a cat or dog as a pet?",
      "query": "SELECT DISTINCT T1.fname FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.stuid  =  T2.stuid JOIN Pets AS T3 ON T2.petid  =  T3.petid WHERE T3.pettype  =  \"Cat\" OR T3.pettype  =  \"Dog\""
    },
    {
      "question": "Find the first name of students who have both cat and dog pets.",
      "query": "SELECT fname FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'Cat') INTERSECT SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'Dog'))"
    },
    {
      "question": "What are the students' first names who have both cats and dogs as pets?",
      "query": "SELECT T1.fname FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.stuid  =  T2.stuid JOIN Pets AS T3 ON T2.petid  =  T3.petid WHERE T3.pettype  =  \"Cat\" AND T1.stuid IN (SELECT stuid FROM Has_Pet WHERE petid IN (SELECT petid FROM Pets WHERE pettype  =  \"Dog\"))"
    },
    {
      "question": "Find the major and age of students who do not have a cat pet.",
      "query": "SELECT major, age FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE PetType = 'Cat')"
    },
    {
      "question": "What major is every student who does not own a cat as a pet, and also how old are they?",
      "query": "SELECT major, age FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE PetType = 'Cat')"
    },
    {
      "question": "Find the id of students who do not have a cat pet.",
      "query": "SELECT StuID FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE PetType = 'Cat')"
    },
    {
      "question": "What are the ids of the students who do not own cats as pets?",
      "query": "SELECT StuID FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE PetType = 'Cat')"
    },
    {
      "question": "Find the first name and age of students who have a dog but do not have a cat as a pet.",
      "query": "SELECT fname ,  age FROM Student WHERE StuID IN (SELECT StuID FROM Has_pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType  =  'Dog') EXCEPT SELECT StuID FROM Has_pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType  =  'Cat'))"
    },
    {
      "question": "What is the first name of every student who has a dog but does not have a cat?",
      "query": "SELECT fname FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'Dog') EXCEPT SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'Cat'))"
    },
    {
      "question": "Find the type and weight of the youngest pet.",
      "query": "SELECT pettype, weight FROM pets WHERE pet_age = (SELECT MIN(pet_age) FROM pets)"
    },
    {
      "question": "What type of pet is the youngest animal, and how much does it weigh?",
      "query": "SELECT pettype, weight FROM pets WHERE pet_age = (SELECT min(pet_age) FROM pets)"
    },
    {
      "question": "Find the id and weight of all pets whose age is older than 1.",
      "query": "SELECT PetID, weight FROM Pets WHERE pet_age > 1"
    },
    {
      "question": "What is the id and weight of every pet who is older than 1?",
      "query": "SELECT PetID ,  weight FROM Pets WHERE pet_age  >  1"
    },
    {
      "question": "Find the average and maximum age for each type of pet.",
      "query": "SELECT PetType, AVG(pet_age), MAX(pet_age) FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID GROUP BY PetType"
    },
    {
      "question": "What is the average and maximum age for each pet type?",
      "query": "SELECT avg(pet_age), max(pet_age), pettype FROM pets GROUP BY pettype"
    },
    {
      "question": "Find the average weight for each pet type.",
      "query": "SELECT PetType, AVG(weight) FROM Pets GROUP BY PetType"
    },
    {
      "question": "What is the average weight for each type of pet?",
      "query": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype"
    },
    {
      "question": "Find the first name and age of students who have a pet.",
      "query": "SELECT fname, age FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet)"
    },
    {
      "question": "What are the different first names and ages of the students who do have pets?",
      "query": "SELECT DISTINCT Fname, Age FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID"
    },
    {
      "question": "Find the id of the pet owned by student whose last name is \u2018Smith\u2019.",
      "query": "SELECT T2.PetID FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID  =  T2.StuID WHERE T1.LName  =  'Smith'"
    },
    {
      "question": "What is the id of the pet owned by the student whose last name is 'Smith'?",
      "query": "SELECT PetID FROM Has_Pet WHERE StuID  =  (SELECT StuID FROM Student WHERE LName  =  'Smith')"
    },
    {
      "question": "Find the number of pets for each student who has any pet and student id.",
      "query": "SELECT T1.StuID, COUNT(T2.PetID) FROM Student AS T1 JOIN Has_Pet AS T3 ON T1.StuID = T3.StuID JOIN Pets AS T2 ON T3.PetID = T2.PetID GROUP BY T1.StuID"
    },
    {
      "question": "For students who have pets , how many pets does each student have ? list their ids instead of names.",
      "query": "SELECT StuID, COUNT(*) FROM Has_Pet GROUP BY StuID"
    },
    {
      "question": "Find the first name and gender of student who have more than one pet.",
      "query": "SELECT T1.fname ,  T1.sex FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING COUNT(*) > 1"
    },
    {
      "question": "What is the first name and gender of the all the students who have more than one pet?",
      "query": "SELECT Fname ,  Sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet GROUP BY StuID HAVING count(*) > 1)"
    },
    {
      "question": "Find the last name of the student who has a cat that is age 3.",
      "query": "SELECT lname FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE PetType = 'Cat' AND pet_age = 3)"
    },
    {
      "question": "What is the last name of the student who has a cat that is 3 years old?",
      "query": "SELECT LName FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType  =  'Cat' AND pet_age  =  3))"
    },
    {
      "question": "Find the average age of students who do not have any pet.",
      "query": "SELECT avg(age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet)"
    },
    {
      "question": "What is the average age for all students who do not own any pets?",
      "query": "SELECT avg(age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet)"
    }
  ],
  "car_1": [
    {
      "question": "How many continents are there?",
      "query": "SELECT count(*) FROM continents"
    },
    {
      "question": "What is the number of continents?",
      "query": "SELECT count(*) FROM continents"
    },
    {
      "question": "How many countries does each continent have? List the continent id, continent name and the number of countries.",
      "query": "SELECT continents.ContId, continents.Continent, COUNT(countries.CountryId) FROM continents JOIN countries ON continents.ContId = countries.Continent GROUP BY continents.ContId, continents.Continent"
    },
    {
      "question": "For each continent, list its id, name, and how many countries it has?",
      "query": "SELECT continents.ContId, continents.Continent, COUNT(countries.CountryId) AS num_countries FROM continents JOIN countries ON continents.ContId = countries.Continent GROUP BY continents.ContId, continents.Continent"
    },
    {
      "question": "How many countries are listed?",
      "query": "SELECT count(*) FROM countries"
    },
    {
      "question": "How many countries exist?",
      "query": "SELECT count(*) FROM countries"
    },
    {
      "question": "How many models does each car maker produce? List maker full name, id and the number.",
      "query": "SELECT FullName, Id, COUNT(*) FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY FullName, Id"
    },
    {
      "question": "What is the full name of each car maker, along with its id and how many models it produces?",
      "query": "SELECT T1.Id, T1.FullName, COUNT(T2.ModelId) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id, T1.FullName"
    },
    {
      "question": "Which model of the car has the minimum horsepower?",
      "query": "SELECT Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.ModelId  =  T2.Model JOIN cars_data AS T3 ON T2.MakeId  =  T3.Id ORDER BY Horsepower ASC LIMIT 1"
    },
    {
      "question": "What is the model of the car with the smallest amount of horsepower?",
      "query": "SELECT T2.Model FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id  =  T2.MakeId ORDER BY T1.Horsepower ASC LIMIT 1"
    },
    {
      "question": "Find the model of the car whose weight is below the average weight.",
      "query": "SELECT Model FROM model_list WHERE ModelId IN (SELECT MakeId FROM car_names WHERE MakeId IN (SELECT Id FROM car_makers WHERE Country IN (SELECT CountryId FROM countries WHERE Continent = 'North America'))) AND ModelId IN (SELECT Id FROM cars_data WHERE Weight < (SELECT AVG(Weight) FROM cars_data))"
    },
    {
      "question": "What is the model for the car with a weight smaller than the average?",
      "query": "SELECT Model FROM car_names WHERE MakeId IN (SELECT Id FROM cars_data WHERE Weight < (SELECT AVG(Weight) FROM cars_data))"
    },
    {
      "question": "Find the name of the makers that produced some cars in the year of 1970?",
      "query": "SELECT DISTINCT Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.ModelId = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE Year = 1970"
    },
    {
      "question": "What is the name of the different car makers who produced a car in 1970?",
      "query": "SELECT DISTINCT T2.Maker FROM cars_data AS T1 JOIN model_list AS T2 ON T1.Id = T2.ModelId JOIN car_makers AS T3 ON T2.Maker = T3.Maker WHERE T1.Year = 1970"
    },
    {
      "question": "Find the make and production time of the cars that were produced in the earliest year?",
      "query": "SELECT T2.Maker ,  MIN(T1.Year) FROM cars_data AS T1 JOIN model_list AS T2 ON T1.Id  =  T2.ModelId JOIN car_makers AS T3 ON T2.Maker  =  T3.Maker JOIN countries AS T4 ON T3.Country  =  T4.CountryId JOIN continents AS T5 ON T4.Continent  =  T5.ContId GROUP BY T2.Maker"
    },
    {
      "question": "What is the maker of the carr produced in the earliest year and what year was it?",
      "query": "SELECT T2.Maker, T1.Year FROM cars_data AS T1 JOIN model_list AS T2 ON T1.Id = T2.ModelId JOIN car_makers AS T3 ON T2.Maker = T3.Maker ORDER BY T1.Year ASC LIMIT 1"
    },
    {
      "question": "Which distinct car models are the produced after 1980?",
      "query": "SELECT DISTINCT Model FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker = T2.Id JOIN countries AS T3 ON T2.Country = T3.CountryId WHERE T3.Continent = 'North America' AND T1.ModelId IN (SELECT Model FROM car_names) AND T1.ModelId IN (SELECT Model FROM cars_data WHERE Year > 1980)"
    },
    {
      "question": "What are the different models for the cards produced after 1980?",
      "query": "SELECT DISTINCT Model FROM model_list JOIN cars_data ON model_list.ModelId = cars_data.Id WHERE Year > 1980"
    },
    {
      "question": "How many car makers are there in each continents? List the continent name and the count.",
      "query": "SELECT c.Continent, COUNT(DISTINCT cm.Maker) FROM continents c JOIN countries co ON c.ContId = co.Continent JOIN car_makers cm ON co.CountryId = cm.Country JOIN model_list ml ON cm.Id = ml.Maker JOIN car_names cn ON ml.ModelId = cn.Model JOIN cars_data cd ON cn.MakeId = cd.Id GROUP BY c.Continent"
    },
    {
      "question": "What is the name of each continent and how many car makers are there in each one?",
      "query": "SELECT continents.Continent, COUNT(DISTINCT car_makers.Id) FROM continents JOIN countries ON continents.ContId = countries.Continent JOIN car_makers ON countries.CountryId = car_makers.Country JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.ModelId = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id GROUP BY continents.Continent"
    },
    {
      "question": "Which of the countries has the most car makers? List the country name.",
      "query": "SELECT T2.CountryName FROM car_makers AS T1 JOIN countries AS T2 ON T1.Country  =  T2.CountryId GROUP BY T2.CountryName ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
      "question": "What is the name of the country with the most car makers?",
      "query": "SELECT T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country GROUP BY T1.CountryId ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
      "question": "How many car models are produced by each maker ? Only list the count and the maker full name.",
      "query": "SELECT T2.FullName, COUNT(*) FROM car_makers AS T2 JOIN model_list AS T1 ON T2.Id = T1.Maker GROUP BY T2.FullName"
    },
    {
      "question": "What is the number of car models that are produced by each maker and what is the id and full name of each maker?",
      "query": "SELECT T2.Id, T2.FullName, COUNT(*) FROM car_makers AS T2 JOIN model_list AS T1 ON T2.Id = T1.Maker GROUP BY T2.Id, T2.FullName"
    },
    {
      "question": "What is the accelerate of the car make amc hornet sportabout (sw)?",
      "query": "SELECT Accelerate FROM cars_data WHERE Id = (SELECT Id FROM car_names WHERE Model = 'hornet sportabout (sw)' AND Make = 'amc')"
    },
    {
      "question": "How much does the car accelerate that makes amc hornet sportabout (sw)?",
      "query": "SELECT Accelerate FROM cars_data WHERE Id = (SELECT Id FROM car_names JOIN model_list ON car_names.Model = model_list.ModelId JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker = 'amc' AND model_list.Model = 'hornet sportabout (sw)')"
    },
    {
      "question": "How many car makers are there in france?",
      "query": "SELECT count(*) FROM car_makers WHERE Country = (SELECT CountryId FROM countries WHERE CountryName = 'France')"
    },
    {
      "question": "What is the number of makers of care in France?",
      "query": "SELECT count(DISTINCT Maker) FROM car_makers WHERE Country = (SELECT CountryId FROM countries WHERE CountryName = 'France')"
    },
    {
      "question": "How many car models are produced in the usa?",
      "query": "SELECT count(*) FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker = T2.Id JOIN countries AS T3 ON T2.Country = T3.CountryId WHERE T3.CountryName = 'USA'"
    },
    {
      "question": "What is the count of the car models produced in the United States?",
      "query": "SELECT COUNT(*) FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker = T2.Id JOIN countries AS T3 ON T2.Country = T3.CountryId WHERE T3.CountryName = 'United States'"
    },
    {
      "question": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?",
      "query": "SELECT avg(MPG) FROM cars_data WHERE Cylinders  =  4"
    },
    {
      "question": "What is the average miles per gallon of all the cards with 4 cylinders?",
      "query": "SELECT avg(MPG) FROM cars_data WHERE Cylinders = 4"
    },
    {
      "question": "What is the smallest weight of the car produced with 8 cylinders on 1974?",
      "query": "SELECT MIN(Weight) FROM cars_data WHERE Cylinders = 8 AND Year = 1974"
    },
    {
      "question": "What is the minimum weight of the car with 8 cylinders produced in 1974?",
      "query": "SELECT MIN(Weight) FROM cars_data WHERE Cylinders = 8 AND Year = 1974"
    },
    {
      "question": "What are all the makers and models?",
      "query": "SELECT Maker, Model FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.ModelId = car_names.Model"
    },
    {
      "question": "What are the makers and models?",
      "query": "SELECT Maker, Model FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker ORDER BY Maker, Model"
    },
    {
      "question": "What are the countries having at least one car maker? List name and id.",
      "query": "SELECT CountryId, CountryName FROM countries WHERE CountryId IN (SELECT Country FROM car_makers)"
    },
    {
      "question": "What are the names and ids of all countries with at least one car maker?",
      "query": "SELECT CountryId, CountryName FROM countries WHERE CountryId IN (SELECT Country FROM car_makers)"
    },
    {
      "question": "What is the number of the cars with horsepower more than 150?",
      "query": "SELECT count(*) FROM cars_data WHERE Horsepower  >  150"
    },
    {
      "question": "What is the number of cars with a horsepower greater than 150?",
      "query": "SELECT count(*) FROM cars_data WHERE Horsepower  >  150"
    },
    {
      "question": "What is the average weight of cars each year?",
      "query": "SELECT Year, AVG(Weight) FROM cars_data GROUP BY Year"
    },
    {
      "question": "What is the average weight and year for each year?",
      "query": "SELECT Year, AVG(Weight), AVG(Year) FROM cars_data GROUP BY Year"
    },
    {
      "question": "Which countries in europe have at least 3 car manufacturers?",
      "query": "SELECT T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country JOIN continents AS T3 ON T1.Continent = T3.Continent WHERE T3.Continent = 'Europe' GROUP BY T1.CountryName HAVING COUNT(DISTINCT T2.Maker) >= 3"
    },
    {
      "question": "What are the names of all European countries with at least 3 manufacturers?",
      "query": "SELECT CountryName FROM countries WHERE Continent = 'Europe' AND CountryId IN (SELECT Country FROM car_makers GROUP BY Country HAVING COUNT(DISTINCT Maker) >= 3)"
    },
    {
      "question": "What is the maximum horsepower and the make of the car models with 3 cylinders?",
      "query": "SELECT MAX(Horsepower), Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.ModelId = T3.Model JOIN cars_data AS T4 ON T3.MakeId = T4.Id WHERE Cylinders = 3"
    },
    {
      "question": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?",
      "query": "SELECT T2.Maker ,  max(T1.Horsepower) FROM cars_data AS T1 JOIN model_list AS T2 ON T1.Id  =  T2.ModelId JOIN car_makers AS T3 ON T2.Maker  =  T3.Maker WHERE T1.Cylinders  =  3"
    },
    {
      "question": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.",
      "query": "SELECT T2.Model FROM cars_data AS T1 JOIN model_list AS T2 ON T1.Id  =  T2.ModelId ORDER BY T1.MPG DESC LIMIT 1"
    },
    {
      "question": "What is the car model with the highest mpg?",
      "query": "SELECT T2.Model FROM cars_data AS T1 JOIN model_list AS T2 ON T1.Id  =  T2.ModelId ORDER BY T1.MPG DESC LIMIT 1"
    },
    {
      "question": "What is the average horsepower of the cars before 1980?",
      "query": "SELECT avg(Horsepower) FROM cars_data WHERE Year < 1980"
    },
    {
      "question": "What is the average horsepower for all cars produced before 1980?",
      "query": "SELECT avg(Horsepower) FROM cars_data WHERE Year < 1980"
    },
    {
      "question": "What is the average edispl of the cars of model volvo?",
      "query": "SELECT avg(Edispl) FROM cars_data WHERE Id IN (SELECT Id FROM car_names WHERE Model IN (SELECT Model FROM model_list WHERE Maker IN (SELECT Id FROM car_makers WHERE Maker = 'volvo')))"
    },
    {
      "question": "What is the average edispl for all volvos?",
      "query": "SELECT avg(Edispl) FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId JOIN model_list AS T3 ON T2.Model = T3.ModelId JOIN car_makers AS T4 ON T3.Maker = T4.Id JOIN countries AS T5 ON T4.Country = T5.CountryId WHERE T5.CountryName = 'Sweden' AND T4.Maker = 'Volvo'"
    },
    {
      "question": "What is the maximum accelerate for different number of cylinders?",
      "query": "SELECT Cylinders, MAX(Accelerate) FROM cars_data GROUP BY Cylinders"
    },
    {
      "question": "What is the maximum accelerate for all the different cylinders?",
      "query": "SELECT Cylinders, MAX(Accelerate) FROM cars_data GROUP BY Cylinders"
    },
    {
      "question": "Which model has the most version(make) of cars?",
      "query": "SELECT T1.Model, COUNT(DISTINCT T2.Make) AS Num_Makes FROM model_list AS T1 JOIN car_names AS T2 ON T1.ModelId = T2.Model GROUP BY T1.Model ORDER BY Num_Makes DESC LIMIT 1"
    },
    {
      "question": "What model has the most different versions?",
      "query": "SELECT T1.Model, COUNT(DISTINCT T2.Make) AS num_versions FROM model_list AS T1 JOIN car_names AS T2 ON T1.ModelId = T2.Model GROUP BY T1.Model ORDER BY num_versions DESC LIMIT 1"
    },
    {
      "question": "How many cars have more than 4 cylinders?",
      "query": "SELECT count(*) FROM cars_data WHERE Cylinders  >  4"
    },
    {
      "question": "What is the number of cars with more than 4 cylinders?",
      "query": "SELECT count(*) FROM cars_data WHERE Cylinders  >  4"
    },
    {
      "question": "how many cars were produced in 1980?",
      "query": "SELECT count(*) FROM cars_data WHERE Year = 1980"
    },
    {
      "question": "In 1980, how many cars were made?",
      "query": "SELECT count(*) FROM cars_data WHERE Year  =  1980"
    },
    {
      "question": "How many car models were produced by the maker with full name American Motor Company?",
      "query": "SELECT count(*) FROM model_list WHERE Maker IN (SELECT Id FROM car_makers WHERE FullName = 'American Motor Company')"
    },
    {
      "question": "What is the number of car models created by the car maker American Motor Company?",
      "query": "SELECT count(*) FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker = T2.Maker WHERE T2.Country = 'USA'"
    },
    {
      "question": "Which makers designed more than 3 car models? List full name and the id.",
      "query": "SELECT FullName ,  Id FROM car_makers WHERE Id IN (SELECT Maker FROM model_list GROUP BY Maker HAVING COUNT(*)  >  3)"
    },
    {
      "question": "What are the names and ids of all makers with more than 3 models?",
      "query": "SELECT T1.Id ,  T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING COUNT(*)  >  3"
    },
    {
      "question": "Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?",
      "query": "SELECT DISTINCT T3.Model FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id  =  T2.Maker JOIN car_names AS T3 ON T2.ModelId  =  T3.Model JOIN cars_data AS T4 ON T3.MakeId  =  T4.Id WHERE (T1.FullName  =  'General Motors' OR T4.Weight  >  3500)"
    },
    {
      "question": "What are the different models created by either the car maker General Motors or weighed more than 3500?",
      "query": "SELECT Model FROM model_list WHERE Maker = 'General Motors' OR ModelId IN (SELECT ModelId FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE Weight > 3500)"
    },
    {
      "question": "In which years cars were produced weighing no less than 3000 and no more than 4000?",
      "query": "SELECT DISTINCT Year FROM cars_data WHERE Weight BETWEEN 3000 AND 4000 ORDER BY Year ASC"
    },
    {
      "question": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000?",
      "query": "SELECT DISTINCT Year FROM cars_data WHERE Weight  <  4000 INTERSECT SELECT DISTINCT Year FROM cars_data WHERE Weight  >  3000"
    },
    {
      "question": "What is the horsepower of the car with the largest accelerate?",
      "query": "SELECT Horsepower FROM cars_data ORDER BY Accelerate DESC LIMIT 1"
    },
    {
      "question": "What is the horsepower of the car with the greatest accelerate?",
      "query": "SELECT Horsepower FROM cars_data ORDER BY Accelerate DESC LIMIT 1"
    },
    {
      "question": "For model volvo, how many cylinders does the car with the least accelerate have?",
      "query": "SELECT MIN(Cylinders) FROM cars_data WHERE Id IN (SELECT Id FROM car_names JOIN model_list ON car_names.ModelId = model_list.ModelId JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker = 'volvo') AND Id IN (SELECT Id FROM car_names JOIN model_list ON car_names.ModelId = model_list.ModelId WHERE model_list.Model = 'volvo') AND Accelerate = (SELECT MIN(Accelerate) FROM cars_data WHERE Id IN (SELECT Id FROM car_names JOIN model_list ON car_names.ModelId = model_list.ModelId JOIN car"
    },
    {
      "question": "For a volvo model, how many cylinders does the version with least accelerate have?",
      "query": "SELECT MIN(cylinders) FROM cars_data WHERE Id IN (SELECT Id FROM car_names WHERE Model IN (SELECT Model FROM model_list WHERE Maker  =  'Volvo')) AND Accelerate  =  (SELECT MIN(Accelerate) FROM cars_data WHERE Id IN (SELECT Id FROM car_names WHERE Model IN (SELECT Model FROM model_list WHERE Maker  =  'Volvo')))"
    },
    {
      "question": "How many cars have a larger accelerate than the car with the largest horsepower?",
      "query": "SELECT count(*) FROM cars_data WHERE Accelerate  >  (SELECT MAX(Accelerate) FROM cars_data WHERE Horsepower  =  (SELECT MAX(Horsepower) FROM cars_data))"
    },
    {
      "question": "What is the number of cars with a greater accelerate than the one with the most horsepower?",
      "query": "SELECT count(*) FROM cars_data WHERE Accelerate  >  (SELECT MAX(Accelerate) FROM cars_data WHERE Horsepower  =  (SELECT MAX(Horsepower) FROM cars_data))"
    },
    {
      "question": "How many countries has more than 2 car makers?",
      "query": "SELECT COUNT(DISTINCT CountryId) FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId GROUP BY CountryId HAVING COUNT(DISTINCT Maker) > 2"
    },
    {
      "question": "What is the number of countries with more than 2 car makers?",
      "query": "SELECT COUNT(DISTINCT CountryId) FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId GROUP BY CountryId HAVING COUNT(DISTINCT Maker) > 2"
    },
    {
      "question": "How many cars has over 6 cylinders?",
      "query": "SELECT count(*) FROM cars_data WHERE Cylinders  >  6"
    },
    {
      "question": "What is the number of carsw ith over 6 cylinders?",
      "query": "SELECT count(*) FROM cars_data WHERE Cylinders > 6"
    },
    {
      "question": "For the cars with 4 cylinders, which model has the largest horsepower?",
      "query": "SELECT T3.Model FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id  =  T2.MakeId JOIN model_list AS T3 ON T2.Model  =  T3.ModelId WHERE T1.Cylinders  =  4 ORDER BY T1.Horsepower DESC LIMIT 1"
    },
    {
      "question": "For all of the 4 cylinder cars, which model has the most horsepower?",
      "query": "SELECT T3.Model FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id  =  T2.MakeId JOIN model_list AS T3 ON T2.Model  =  T3.ModelId WHERE T1.Cylinders  =  4 ORDER BY T1.Horsepower DESC LIMIT 1"
    },
    {
      "question": "Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name.",
      "query": "SELECT T3.MakeId, T2.Maker FROM cars_data AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.ModelId = T3.Model WHERE T1.Horsepower > (SELECT MIN(Horsepower) FROM cars_data) AND T1.Cylinders <= 3"
    },
    {
      "question": "Among the cars that do not have the minimum horsepower , what are the make ids and names of all those with less than 4 cylinders?",
      "query": "SELECT T3.MakeId ,  T2.Maker FROM cars_data AS T1 JOIN model_list AS T2 ON T1.Id  =  T2.ModelId JOIN car_makers AS T3 ON T2.Maker  =  T3.FullName WHERE T1.Horsepower < (SELECT MIN(Horsepower) FROM cars_data) AND T1.Cylinders < 4"
    },
    {
      "question": "What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980?",
      "query": "SELECT MAX(MPG) FROM cars_data WHERE Cylinders = 8 AND Year < 1980"
    },
    {
      "question": "What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980?",
      "query": "SELECT max(MPG) FROM cars_data WHERE Cylinders  =  8 OR Year < 1980"
    },
    {
      "question": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?",
      "query": "SELECT model FROM model_list WHERE ModelId IN (SELECT Model FROM car_names WHERE MakeId IN (SELECT Id FROM car_makers WHERE Maker != 'Ford Motor Company')) AND ModelId IN (SELECT Id FROM cars_data WHERE Weight < 3500)"
    },
    {
      "question": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?",
      "query": "SELECT DISTINCT T3.Model FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId JOIN model_list AS T3 ON T2.Model = T3.ModelId JOIN car_makers AS T4 ON T3.Maker = T4.Id JOIN countries AS T5 ON T4.Country = T5.CountryId WHERE T1.Weight < 3500 AND T5.Continent != 'North America' AND T4.Maker != 'Ford Motor Company'"
    },
    {
      "question": "What are the name of the countries where there is not a single car maker?",
      "query": "SELECT CountryName FROM countries WHERE CountryId NOT IN (SELECT Country FROM car_makers)"
    },
    {
      "question": "What are the names of the countries with no car makers?",
      "query": "SELECT CountryName FROM countries WHERE CountryId NOT IN (SELECT Country FROM car_makers)"
    },
    {
      "question": "Which are the car makers which produce at least 2 models and more than 3 car makers ? List the id and the maker.",
      "query": "SELECT Id, Maker FROM car_makers WHERE Id IN (SELECT Maker FROM model_list GROUP BY Maker HAVING COUNT(*) >= 2) AND Id IN (SELECT DISTINCT Country FROM car_makers GROUP BY Country HAVING COUNT(*) > 3)"
    },
    {
      "question": "What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars?",
      "query": "SELECT T1.Id ,  T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id  =  T2.Maker JOIN car_names AS T3 ON T2.ModelId  =  T3.ModelId JOIN cars_data AS T4 ON T3.MakeId  =  T4.Id GROUP BY T1.Id HAVING COUNT(DISTINCT T2.Model)  >=  2 AND COUNT(DISTINCT T3.Make)  >  3"
    },
    {
      "question": "What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?",
      "query": "SELECT T2.CountryId, T2.CountryName FROM car_makers AS T1 JOIN countries AS T2 ON T1.Country = T2.CountryId WHERE T2.CountryId IN (SELECT Country FROM car_makers GROUP BY Country HAVING COUNT(DISTINCT Maker) > 3) OR T1.Maker = 'fiat' GROUP BY T2.CountryId, T2.CountryName"
    },
    {
      "question": "What are the ids and names of all countries that either have more than 3 car makers or produce fiat model?",
      "query": "SELECT T1.CountryId, T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country JOIN model_list AS T3 ON T2.Id = T3.Maker WHERE T1.CountryId IN (SELECT Country FROM car_makers GROUP BY Country HAVING COUNT(DISTINCT Maker) > 3) OR T3.Model = 'Fiat'"
    }
  ],
  "flight_2": [
    {
      "question": "Which country does Airline \"JetBlue Airways\" belong to?",
      "query": "SELECT Country FROM airlines WHERE Airline = 'JetBlue Airways'"
    },
    {
      "question": "What country is Jetblue Airways affiliated with?",
      "query": "SELECT Country FROM airlines WHERE Airline = 'Jetblue Airways'"
    },
    {
      "question": "What is the abbreviation of Airline \"JetBlue Airways\"?",
      "query": "SELECT Abbreviation FROM airlines WHERE Airline = 'JetBlue Airways'"
    },
    {
      "question": "Which abbreviation corresponds to Jetblue Airways?",
      "query": "SELECT Abbreviation FROM airlines WHERE Airline = 'Jetblue Airways'"
    },
    {
      "question": "List all airline names and their abbreviations in \"USA\".",
      "query": "SELECT Airline, Abbreviation FROM airlines WHERE Country = 'USA'"
    },
    {
      "question": "What are the airline names and abbreviations for airlines in the USA?",
      "query": "SELECT Airline ,  Abbreviation FROM airlines WHERE Country  =  'USA'"
    },
    {
      "question": "List the airport code and name in the city of Anthony.",
      "query": "SELECT AirportCode ,  AirportName FROM airports WHERE City  =  'Anthony'"
    },
    {
      "question": "Give the airport code and airport name corresonding to the city Anthony.",
      "query": "SELECT AirportCode ,  AirportName FROM airports WHERE City  =  'Anthony'"
    },
    {
      "question": "How many airlines do we have?",
      "query": "SELECT count(*) FROM airlines"
    },
    {
      "question": "What is the total number of airlines?",
      "query": "SELECT count(*) FROM airlines"
    },
    {
      "question": "How many airports do we have?",
      "query": "SELECT count(*) FROM airports"
    },
    {
      "question": "Return the number of  airports.",
      "query": "SELECT count(*) FROM airports"
    },
    {
      "question": "How many flights do we have?",
      "query": "SELECT count(*) FROM flights"
    },
    {
      "question": "Return the number of flights.",
      "query": "SELECT count(*) FROM flights"
    },
    {
      "question": "Which airline has abbreviation 'UAL'?",
      "query": "SELECT Airline FROM airlines WHERE Abbreviation = 'UAL'"
    },
    {
      "question": "Give the airline with abbreviation 'UAL'.",
      "query": "SELECT Airline FROM airlines WHERE Abbreviation = 'UAL'"
    },
    {
      "question": "How many airlines are from USA?",
      "query": "SELECT count(*) FROM airlines WHERE Country = 'USA'"
    },
    {
      "question": "Return the number of airlines in the USA.",
      "query": "SELECT count(*) FROM airlines WHERE Country = 'USA'"
    },
    {
      "question": "Which city and country is the Alton airport at?",
      "query": "SELECT City, Country FROM airports WHERE AirportName = 'Alton'"
    },
    {
      "question": "Give the city and country for the Alton airport.",
      "query": "SELECT City, Country FROM airports WHERE AirportName = 'Alton'"
    },
    {
      "question": "What is the airport name for airport 'AKO'?",
      "query": "SELECT AirportName FROM airports WHERE AirportCode = 'AKO'"
    },
    {
      "question": "Return the name of the airport with code 'AKO'.",
      "query": "SELECT AirportName FROM airports WHERE AirportCode = 'AKO'"
    },
    {
      "question": "What are airport names at City 'Aberdeen'?",
      "query": "SELECT AirportName FROM airports WHERE City = 'Aberdeen'"
    },
    {
      "question": "What are the names of airports in Aberdeen?",
      "query": "SELECT AirportName FROM airports WHERE City = 'Aberdeen'"
    },
    {
      "question": "How many flights depart from 'APG'?",
      "query": "SELECT count(*) FROM flights WHERE SourceAirport = 'APG'"
    },
    {
      "question": "Count the number of flights departing from 'APG'.",
      "query": "SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG'"
    },
    {
      "question": "How many flights have destination ATO?",
      "query": "SELECT count(*) FROM flights WHERE DestAirport = 'ATO'"
    },
    {
      "question": "Count the number of flights into ATO.",
      "query": "SELECT count(*) FROM flights WHERE DestAirport = 'ATO'"
    },
    {
      "question": "How many flights depart from City Aberdeen?",
      "query": "SELECT count(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Aberdeen'"
    },
    {
      "question": "Return the number of flights departing from Aberdeen.",
      "query": "SELECT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Aberdeen'"
    },
    {
      "question": "How many flights arriving in Aberdeen city?",
      "query": "SELECT count(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen'"
    },
    {
      "question": "Return the number of flights arriving in Aberdeen.",
      "query": "SELECT COUNT(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen'"
    },
    {
      "question": "How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?",
      "query": "SELECT count(*) FROM flights AS T1 JOIN airports AS T2 ON T1.SourceAirport  =  T2.AirportCode JOIN airports AS T3 ON T1.DestAirport  =  T3.AirportCode WHERE T2.City  =  'Aberdeen' AND T3.City  =  'Ashley'"
    },
    {
      "question": "How many flights fly from Aberdeen to Ashley?",
      "query": "SELECT count(*) FROM flights WHERE SourceAirport = 'ABZ' AND DestAirport = 'ASY'"
    },
    {
      "question": "How many flights does airline 'JetBlue Airways' have?",
      "query": "SELECT count(*) FROM flights WHERE Airline = 'JetBlue Airways'"
    },
    {
      "question": "Give the number of Jetblue Airways flights.",
      "query": "SELECT count(*) FROM flights WHERE Airline = 'Jetblue Airways'"
    },
    {
      "question": "How many 'United Airlines' flights go to Airport 'ASY'?",
      "query": "SELECT count(*) FROM flights WHERE Airline = 'United Airlines' AND DestAirport = 'ASY'"
    },
    {
      "question": "Count the number of United Airlines flights arriving in ASY Airport.",
      "query": "SELECT COUNT(*) FROM flights WHERE Airline = 'United Airlines' AND DestAirport = 'ASY'"
    },
    {
      "question": "How many 'United Airlines' flights depart from Airport 'AHD'?",
      "query": "SELECT count(*) FROM flights WHERE Airline = 'United Airlines' AND SourceAirport = 'AHD'"
    },
    {
      "question": "Return the number of United Airlines flights leaving from AHD Airport.",
      "query": "SELECT COUNT(*) FROM flights WHERE Airline = 'United Airlines' AND SourceAirport = 'AHD'"
    },
    {
      "question": "How many United Airlines flights go to City 'Aberdeen'?",
      "query": "SELECT count(*) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T1.Airline  =  'United Airlines' AND T2.City  =  'Aberdeen'"
    },
    {
      "question": "Count the number of United Airlines flights that arrive in Aberdeen.",
      "query": "SELECT count(*) FROM flights WHERE Airline = 'United Airlines' AND DestAirport = 'ABR'"
    },
    {
      "question": "Which city has most number of arriving flights?",
      "query": "SELECT City FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport GROUP BY City ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
      "question": "Which city has the most frequent destination airport?",
      "query": "SELECT DestAirport FROM flights GROUP BY DestAirport ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
      "question": "Which city has most number of departing flights?",
      "query": "SELECT SourceAirport FROM flights GROUP BY SourceAirport ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
      "question": "Which city is the most frequent source airport?",
      "query": "SELECT City FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport GROUP BY City ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
      "question": "What is the code of airport that has the highest number of flights?",
      "query": "SELECT SourceAirport, COUNT(*) AS num_flights FROM flights GROUP BY SourceAirport ORDER BY num_flights DESC LIMIT 1"
    },
    {
      "question": "What is the airport code of the airport with the most flights?",
      "query": "SELECT AirportCode FROM airports WHERE AirportCode IN (SELECT SourceAirport FROM flights UNION ALL SELECT DestAirport FROM flights) GROUP BY AirportCode ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
      "question": "What is the code of airport that has fewest number of flights?",
      "query": "SELECT AirportCode FROM airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM flights UNION SELECT DestAirport FROM flights) ORDER BY AirportCode LIMIT 1"
    },
    {
      "question": "Give the code of the airport with the least flights.",
      "query": "SELECT SourceAirport FROM flights GROUP BY SourceAirport ORDER BY COUNT(*) LIMIT 1"
    },
    {
      "question": "Which airline has most number of flights?",
      "query": "SELECT Airline FROM flights GROUP BY Airline ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
      "question": "What airline serves the most flights?",
      "query": "SELECT Airline FROM flights GROUP BY Airline ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
      "question": "Find the abbreviation and country of the airline that has fewest number of flights?",
      "query": "SELECT Abbreviation, Country FROM airlines WHERE uid IN (SELECT Airline FROM flights GROUP BY Airline ORDER BY COUNT(*) ASC LIMIT 1)"
    },
    {
      "question": "What is the abbreviation of the airilne has the fewest flights and what country is it in?",
      "query": "SELECT T1.Abbreviation, T1.Country FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline GROUP BY T2.Airline ORDER BY COUNT(*) LIMIT 1"
    },
    {
      "question": "What are airlines that have some flight departing from airport 'AHD'?",
      "query": "SELECT DISTINCT Airline FROM flights WHERE SourceAirport = 'AHD'"
    },
    {
      "question": "Which airlines have a flight with source airport AHD?",
      "query": "SELECT Airline FROM flights WHERE SourceAirport = 'AHD'"
    },
    {
      "question": "What are airlines that have flights arriving at airport 'AHD'?",
      "query": "SELECT DISTINCT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline WHERE flights.DestAirport = 'AHD'"
    },
    {
      "question": "Which airlines have a flight with destination airport AHD?",
      "query": "SELECT Airline FROM flights WHERE DestAirport  =  'AHD'"
    },
    {
      "question": "Find all airlines that have flights from both airports 'APG' and 'CVO'.",
      "query": "SELECT DISTINCT T1.Airline FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = 'APG' AND T2.DestAirport = 'CVO' INTERSECT SELECT DISTINCT T1.Airline FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = 'CVO' AND T2.DestAirport = 'APG'"
    },
    {
      "question": "Which airlines have departing flights from both APG and CVO airports?",
      "query": "SELECT Airline FROM flights WHERE SourceAirport IN ('APG', 'CVO') AND DestAirport IN ('APG', 'CVO') GROUP BY Airline HAVING COUNT(DISTINCT SourceAirport) = 2"
    },
    {
      "question": "Find all airlines that have flights from airport 'CVO' but not from 'APG'.",
      "query": "SELECT DISTINCT T1.Airline FROM airlines AS T1 JOIN flights AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  'CVO' AND T1.Airline NOT IN (SELECT DISTINCT T1.Airline FROM airlines AS T1 JOIN flights AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  'APG')"
    },
    {
      "question": "Which airlines have departures from CVO but not from APG airports?",
      "query": "SELECT DISTINCT T1.Airline FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = 'CVO' AND T1.Airline NOT IN (SELECT DISTINCT T1.Airline FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = 'APG')"
    },
    {
      "question": "Find all airlines that have at least 10 flights.",
      "query": "SELECT Airline FROM flights GROUP BY Airline HAVING COUNT(*) >= 10"
    },
    {
      "question": "Which airlines have at least 10 flights?",
      "query": "SELECT Airline FROM flights GROUP BY Airline HAVING COUNT(*) >= 10"
    },
    {
      "question": "Find all airlines that have fewer than 200 flights.",
      "query": "SELECT Airline FROM flights GROUP BY Airline HAVING COUNT(*) < 200"
    },
    {
      "question": "Which airlines have less than 200 flights?",
      "query": "SELECT Airline FROM flights GROUP BY Airline HAVING COUNT(*) < 200"
    },
    {
      "question": "What are flight numbers of Airline \"United Airlines\"?",
      "query": "SELECT FlightNo FROM flights WHERE Airline = 'United Airlines'"
    },
    {
      "question": "Which flight numbers correspond to United Airlines flights?",
      "query": "SELECT FlightNo FROM flights WHERE Airline  =  'United Airlines'"
    },
    {
      "question": "What are flight numbers of flights departing from Airport \"APG\"?",
      "query": "SELECT FlightNo FROM flights WHERE SourceAirport  =  \"APG\""
    },
    {
      "question": "Give the flight numbers of flights leaving from APG.",
      "query": "SELECT FlightNo FROM flights WHERE SourceAirport = 'APG'"
    },
    {
      "question": "What are flight numbers of flights arriving at Airport \"APG\"?",
      "query": "SELECT FlightNo FROM flights WHERE DestAirport = 'APG'"
    },
    {
      "question": "Give the flight numbers of flights landing at APG.",
      "query": "SELECT FlightNo FROM flights WHERE DestAirport = 'APG'"
    },
    {
      "question": "What are flight numbers of flights departing from City \"Aberdeen \"?",
      "query": "SELECT FlightNo FROM flights WHERE SourceAirport IN (SELECT AirportCode FROM airports WHERE City = \"Aberdeen\")"
    },
    {
      "question": "Give the flight numbers of flights leaving from Aberdeen.",
      "query": "SELECT FlightNo FROM flights WHERE SourceAirport = 'ABZ'"
    },
    {
      "question": "What are flight numbers of flights arriving at City \"Aberdeen\"?",
      "query": "SELECT FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = \"Aberdeen\""
    },
    {
      "question": "Give the flight numbers of flights arriving in Aberdeen.",
      "query": "SELECT FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen'"
    },
    {
      "question": "Find the number of flights landing in the city of Aberdeen or Abilene.",
      "query": "SELECT COUNT(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen' OR airports.City = 'Abilene'"
    },
    {
      "question": "How many flights land in Aberdeen or Abilene?",
      "query": "SELECT count(*) FROM flights WHERE DestAirport IN ('ABZ', 'ABI')"
    },
    {
      "question": "Find the name of airports which do not have any flight in and out.",
      "query": "SELECT AirportName FROM airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM flights UNION SELECT DestAirport FROM flights)"
    },
    {
      "question": "Which airports do not have departing or arriving flights?",
      "query": "SELECT AirportName FROM airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM flights UNION SELECT DestAirport FROM flights)"
    }
  ],
  "employee_hire_evaluation": [
    {
      "question": "How many employees are there?",
      "query": "SELECT count(*) FROM employee"
    },
    {
      "question": "Count the number of employees",
      "query": "SELECT COUNT(*) FROM employee"
    },
    {
      "question": "Sort employee names by their age in ascending order.",
      "query": "SELECT Name FROM employee ORDER BY Age ASC"
    },
    {
      "question": "List the names of employees and sort in ascending order of age.",
      "query": "SELECT Name FROM employee ORDER BY Age ASC"
    },
    {
      "question": "What is the number of employees from each city?",
      "query": "SELECT City ,  COUNT(*) FROM employee GROUP BY City"
    },
    {
      "question": "Count the number of employees for each city.",
      "query": "SELECT city, COUNT(*) FROM employee GROUP BY city"
    },
    {
      "question": "Which cities do more than one employee under age 30 come from?",
      "query": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING COUNT(*)  >  1"
    },
    {
      "question": "Find the cities that have more than one employee under age 30.",
      "query": "SELECT city FROM employee WHERE age < 30 GROUP BY city HAVING COUNT(*) > 1"
    },
    {
      "question": "Find the number of shops in each location.",
      "query": "SELECT location ,  COUNT(*) FROM shop GROUP BY location"
    },
    {
      "question": "How many shops are there in each location?",
      "query": "SELECT location, COUNT(*) FROM shop GROUP BY location"
    },
    {
      "question": "Find the manager name and district of the shop whose number of products is the largest.",
      "query": "SELECT manager_name ,  district FROM shop ORDER BY Number_products DESC LIMIT 1"
    },
    {
      "question": "What are the manager name and district of the shop that sells the largest number of products?",
      "query": "SELECT T1.manager_name, T1.district FROM shop AS T1 WHERE T1.number_products = (SELECT MAX(number_products) FROM shop)"
    },
    {
      "question": "find the minimum and maximum number of products of all stores.",
      "query": "SELECT MIN(Number_products) ,  MAX(Number_products) FROM shop"
    },
    {
      "question": "What are the minimum and maximum number of products across all the shops?",
      "query": "SELECT min(Number_products) ,  max(Number_products) FROM shop"
    },
    {
      "question": "Return the name, location and district of all shops in descending order of number of products.",
      "query": "SELECT Name ,  Location ,  District FROM shop ORDER BY Number_products DESC"
    },
    {
      "question": "Sort all the shops by number products in descending order, and return the name, location and district of each shop.",
      "query": "SELECT Name ,  Location ,  District FROM shop ORDER BY Number_products DESC"
    },
    {
      "question": "Find the names of stores whose number products is more than the average number of products.",
      "query": "SELECT Name FROM shop WHERE Number_products > (SELECT AVG(Number_products) FROM shop)"
    },
    {
      "question": "Which shops' number products is above the average? Give me the shop names.",
      "query": "SELECT Name FROM shop WHERE Number_products > (SELECT AVG(Number_products) FROM shop)"
    },
    {
      "question": "find the name of employee who was awarded the most times in the evaluation.",
      "query": "SELECT Name FROM employee WHERE Employee_ID IN (SELECT Employee_ID FROM evaluation GROUP BY Employee_ID ORDER BY COUNT(*) DESC LIMIT 1)"
    },
    {
      "question": "Which employee received the most awards in evaluations? Give me the employee name.",
      "query": "SELECT Name FROM employee WHERE Employee_ID IN (SELECT Employee_ID FROM evaluation GROUP BY Employee_ID ORDER BY COUNT(*) DESC LIMIT 1)"
    },
    {
      "question": "Find the name of the employee who got the highest one time bonus.",
      "query": "SELECT Name FROM employee WHERE Employee_ID = (SELECT Employee_ID FROM evaluation ORDER BY Bonus DESC LIMIT 1)"
    },
    {
      "question": "Which employee received the biggest bonus? Give me the employee name.",
      "query": "SELECT Name FROM employee WHERE Employee_ID IN (SELECT Employee_ID FROM evaluation WHERE Bonus = (SELECT MAX(Bonus) FROM evaluation))"
    },
    {
      "question": "Find the names of employees who never won any award in the evaluation.",
      "query": "SELECT Name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)"
    },
    {
      "question": "What are the names of the employees who never received any evaluation?",
      "query": "SELECT Name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)"
    },
    {
      "question": "What is the name of the shop that is hiring the largest number of employees?",
      "query": "SELECT T2.Name FROM hiring AS T1 JOIN shop AS T2 ON T1.Shop_ID  =  T2.Shop_ID GROUP BY T1.Shop_ID ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
      "question": "Which shop has the most employees? Give me the shop name.",
      "query": "SELECT T2.Name FROM (SELECT Shop_ID, COUNT(*) AS num_employees FROM hiring GROUP BY Shop_ID) AS T1 JOIN shop AS T2 ON T1.Shop_ID = T2.Shop_ID ORDER BY num_employees DESC LIMIT 1"
    },
    {
      "question": "Find the name of the shops that do not hire any employee.",
      "query": "SELECT Name FROM shop WHERE Shop_ID NOT IN (SELECT Shop_ID FROM hiring)"
    },
    {
      "question": "Which shops run with no employees? Find the shop names",
      "query": "SELECT Name FROM shop WHERE Shop_ID NOT IN (SELECT Shop_ID FROM hiring)"
    },
    {
      "question": "Find the number of employees hired in each shop; show the shop name as well.",
      "query": "SELECT T2.Name ,  COUNT(*) FROM hiring AS T1 JOIN shop AS T2 ON T1.Shop_ID  =  T2.Shop_ID GROUP BY T2.Name"
    },
    {
      "question": "For each shop, return the number of employees working there and the name of the shop.",
      "query": "SELECT T2.Name ,  COUNT(*) FROM hiring AS T1 JOIN shop AS T2 ON T1.Shop_ID  =  T2.Shop_ID GROUP BY T2.Name"
    },
    {
      "question": "What is total bonus given in all evaluations?",
      "query": "SELECT SUM(Bonus) FROM evaluation"
    },
    {
      "question": "Find the total amount of bonus given in all the evaluations.",
      "query": "SELECT SUM(Bonus) FROM evaluation"
    },
    {
      "question": "Give me all the information about hiring.",
      "query": "SELECT * FROM hiring"
    },
    {
      "question": "What is all the information about hiring?",
      "query": "SELECT * FROM hiring"
    },
    {
      "question": "Which district has both stores with less than 3000 products and stores with more than 10000 products?",
      "query": "SELECT district FROM shop WHERE number_products  <  3000 INTERSECT SELECT district FROM shop WHERE number_products  >  10000"
    },
    {
      "question": "Find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products.",
      "query": "SELECT district FROM shop WHERE Number_products < 3000 INTERSECT SELECT district FROM shop WHERE Number_products > 10000"
    },
    {
      "question": "How many different store locations are there?",
      "query": "SELECT COUNT(DISTINCT Location) FROM shop"
    },
    {
      "question": "Count the number of distinct store locations.",
      "query": "SELECT COUNT(DISTINCT Location) FROM shop"
    }
  ],
  "cre_Doc_Template_Mgt": [
    {
      "question": "How many documents do we have?",
      "query": "SELECT count(*) FROM Documents"
    },
    {
      "question": "Count the number of documents.",
      "query": "SELECT count(*) FROM Documents"
    },
    {
      "question": "List document IDs, document names, and document descriptions for all documents.",
      "query": "SELECT document_id ,  document_name ,  document_description FROM Documents"
    },
    {
      "question": "What are the ids, names, and descriptions for all documents?",
      "query": "SELECT document_id, document_name, document_description FROM Documents"
    },
    {
      "question": "What is the document name and template id for document with description with the letter 'w' in it?",
      "query": "SELECT document_name, template_id FROM Documents WHERE document_description LIKE '%w%'"
    },
    {
      "question": "Return the names and template ids for documents that contain the letter w in their description.",
      "query": "SELECT T2.Document_Name, T2.Template_ID FROM Documents AS T2 WHERE T2.Document_Description LIKE '%w%'"
    },
    {
      "question": "What is the document id, template id and description for document named \"Robbin CV\"?",
      "query": "SELECT T1.document_id, T2.template_id, T2.template_details FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id = T2.template_id WHERE T1.document_name = \"Robbin CV\""
    },
    {
      "question": "Return the document id, template id, and description for the document with the name Robbin CV.",
      "query": "SELECT Documents.document_id, Templates.template_id, Templates.template_details FROM Documents JOIN Templates ON Documents.template_id = Templates.template_id WHERE Documents.document_name = \"Robbin CV\";"
    },
    {
      "question": "How many different templates do all document use?",
      "query": "SELECT count(DISTINCT Template_ID) FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID;"
    },
    {
      "question": "Count the number of different templates used for documents.",
      "query": "SELECT COUNT(DISTINCT template_id) FROM documents JOIN templates ON documents.template_id = templates.template_id"
    },
    {
      "question": "How many documents are using the template with type code 'PPT'?",
      "query": "SELECT count(*) FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Templates.Template_Type_Code = 'PPT'"
    },
    {
      "question": "Count the number of documents that use the PPT template type.",
      "query": "SELECT count(*) FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = \"PPT\";"
    },
    {
      "question": "Show all template ids and number of documents using each template.",
      "query": "SELECT T1.Template_ID ,  COUNT(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID  =  T2.Template_ID GROUP BY T1.Template_ID"
    },
    {
      "question": "What are all different template ids used for documents, and how many times were each of them used?",
      "query": "SELECT Template_ID, COUNT(*) FROM Documents GROUP BY Template_ID"
    },
    {
      "question": "What is the id and type code for the template used by the most documents?",
      "query": "SELECT Templates.Template_ID, Templates.Template_Type_Code FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_ID ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
      "question": "Return the id and type code of the template that is used for the greatest number of documents.",
      "query": "SELECT T1.template_id, T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_id ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
      "question": "Show ids for all templates that are used by more than one document.",
      "query": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1"
    },
    {
      "question": "What are the template ids of any templates used in more than a single document?",
      "query": "SELECT template_id FROM Documents GROUP BY template_id HAVING COUNT(DISTINCT document_id) > 1"
    },
    {
      "question": "Show ids for all templates not used by any document.",
      "query": "SELECT template_id FROM Templates WHERE template_id NOT IN (SELECT template_id FROM Documents)"
    },
    {
      "question": "What are the ids for templates that are not used in any documents?",
      "query": "SELECT Templates.Template_ID FROM Templates WHERE Templates.Template_ID NOT IN (SELECT Template_ID FROM Documents)"
    },
    {
      "question": "How many templates do we have?",
      "query": "SELECT count(*) FROM Templates"
    },
    {
      "question": "Count the number of templates.",
      "query": "SELECT count(*) FROM Templates"
    },
    {
      "question": "Show template ids, version numbers, and template type codes for all templates.",
      "query": "SELECT template_id ,  version_number ,  template_type_code FROM Templates"
    },
    {
      "question": "What are the ids, version numbers, and type codes for each template?",
      "query": "SELECT Template_ID, Version_Number, Template_Type_Code FROM Templates;"
    },
    {
      "question": "Show all distinct template type codes for all templates.",
      "query": "SELECT DISTINCT template_type_code FROM Templates"
    },
    {
      "question": "What are the different template type codes?",
      "query": "SELECT Template_Type_Code FROM Ref_Template_Types"
    },
    {
      "question": "What are the ids of templates with template type code PP or PPT?",
      "query": "SELECT Template_ID FROM Templates WHERE Template_Type_Code  =  'PP' OR Template_Type_Code  =  'PPT'"
    },
    {
      "question": "Return the ids of templates that have the code PP or PPT.",
      "query": "SELECT Template_ID FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Code = \"PP\" OR Ref_Template_Types.Template_Type_Code = \"PPT\";"
    },
    {
      "question": "How many templates have template type code CV?",
      "query": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\""
    },
    {
      "question": "Count the number of templates of the type CV.",
      "query": "SELECT count(*) FROM Templates WHERE template_type_code = \"CV\";"
    },
    {
      "question": "What is the version number and template type code for the template with version number later than 5?",
      "query": "SELECT version_number, template_type_code FROM Templates WHERE version_number > 5;"
    },
    {
      "question": "Return the version numbers and template type codes of templates with a version number greater than 5.",
      "query": "SELECT version_number, template_type_code FROM Templates WHERE version_number > 5;"
    },
    {
      "question": "Show all template type codes and number of templates for each.",
      "query": "SELECT template_type_code, COUNT(*) FROM Templates GROUP BY template_type_code"
    },
    {
      "question": "What are the different template type codes, and how many templates correspond to each?",
      "query": "SELECT Ref_Template_Types.template_type_code, COUNT(*) FROM Templates JOIN Ref_Template_Types ON Templates.template_type_code = Ref_Template_Types.template_type_code GROUP BY Ref_Template_Types.template_type_code"
    },
    {
      "question": "Which template type code has most number of templates?",
      "query": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1"
    },
    {
      "question": "Return the type code of the template type that the most templates belong to.",
      "query": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1"
    },
    {
      "question": "Show all template type codes with less than three templates.",
      "query": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*) < 3"
    },
    {
      "question": "What are the codes of template types that have fewer than 3 templates?",
      "query": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*) < 3"
    },
    {
      "question": "What the smallest version number and its template type code?",
      "query": "SELECT version_number, template_type_code FROM Templates ORDER BY version_number ASC LIMIT 1;"
    },
    {
      "question": "Return the lowest version number, along with its corresponding template type code.",
      "query": "SELECT template_type_code, MIN(version_number) FROM templates GROUP BY template_type_code"
    },
    {
      "question": "What is the template type code of the template used by document with the name \"Data base\"?",
      "query": "SELECT T2.template_type_code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id = T2.template_id WHERE T1.document_name = \"Data base\""
    },
    {
      "question": "Return the template type code of the template that is used by a document named Data base.",
      "query": "SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Documents.Document_Name = \"Data base\";"
    },
    {
      "question": "Show all document names using templates with template type code BK.",
      "query": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id JOIN Ref_template_types AS T3 ON T1.template_type_code  =  T3.template_type_code WHERE T3.template_type_code  =  \"BK\""
    },
    {
      "question": "What are the names of documents that use templates with the code BK?",
      "query": "SELECT Document_Name FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Templates.Template_Type_Code = \"BK\""
    },
    {
      "question": "Show all template type codes and the number of documents using each type.",
      "query": "SELECT T1.Template_Type_Code, COUNT(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY T1.Template_Type_Code"
    },
    {
      "question": "What are the different template type codes, and how many documents use each type?",
      "query": "SELECT Ref_Template_Types.template_type_code, COUNT(Documents.document_id) FROM Ref_Template_Types LEFT JOIN Templates ON Ref_Template_Types.template_type_code = Templates.template_type_code LEFT JOIN Documents ON Templates.template_id = Documents.template_id GROUP BY Ref_Template_Types.template_type_code"
    },
    {
      "question": "Which template type code is used by most number of documents?",
      "query": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1"
    },
    {
      "question": "Return the code of the template type that is most commonly used in documents.",
      "query": "SELECT template_type_code FROM templates GROUP BY template_type_code ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
      "question": "Show all template type codes that are not used by any document.",
      "query": "SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code NOT IN (SELECT Template_Type_Code FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID)"
    },
    {
      "question": "What are the codes of template types that are not used for any document?",
      "query": "SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code NOT IN (SELECT Template_Type_Code FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID)"
    },
    {
      "question": "Show all template type codes and descriptions.",
      "query": "SELECT template_type_code, template_type_description FROM Ref_Template_Types;"
    },
    {
      "question": "What are the type codes and descriptions for all template types?",
      "query": "SELECT template_type_code, template_type_description FROM Ref_Template_Types;"
    },
    {
      "question": "What is the template type descriptions for template type code \"AD\".",
      "query": "SELECT template_type_description FROM Ref_Template_Types WHERE template_type_code = \"AD\""
    },
    {
      "question": "Return the template type description of the template type with the code AD.",
      "query": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\""
    },
    {
      "question": "What is the template type code for template type description \"Book\".",
      "query": "SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = \"Book\""
    },
    {
      "question": "Return the type code of the template type with the description \"Book\".",
      "query": "SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = \"Book\";"
    },
    {
      "question": "What are the distinct template type descriptions for the templates ever used by any document?",
      "query": "SELECT DISTINCT Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Template_ID"
    },
    {
      "question": "Return the different descriptions for templates that have been used in a document.",
      "query": "SELECT DISTINCT Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Template_ID"
    },
    {
      "question": "What are the template ids with template type description \"Presentation\".",
      "query": "SELECT Templates.Template_ID FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = \"Presentation\";"
    },
    {
      "question": "Return the ids corresponding to templates with the description 'Presentation'.",
      "query": "SELECT Template_ID FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = 'Presentation'"
    },
    {
      "question": "How many paragraphs in total?",
      "query": "SELECT count(*) FROM Paragraphs"
    },
    {
      "question": "Count the number of paragraphs.",
      "query": "SELECT count(*) FROM Paragraphs"
    },
    {
      "question": "How many paragraphs for the document with name 'Summer Show'?",
      "query": "SELECT count(*) FROM Paragraphs WHERE document_id = (SELECT document_id FROM Documents WHERE document_name = 'Summer Show');"
    },
    {
      "question": "Count the number of paragraphs in the document named 'Summer Show'.",
      "query": "SELECT count(*) FROM Paragraphs WHERE Document_ID = (SELECT Document_ID FROM Documents WHERE Document_Name = 'Summer Show')"
    },
    {
      "question": "Show paragraph details for paragraph with text 'Korea '.",
      "query": "SELECT * FROM Paragraphs WHERE Paragraph_Text LIKE '%Korea%'"
    },
    {
      "question": "What are the details for the paragraph that includes the text 'Korea '?",
      "query": "SELECT * FROM Paragraphs WHERE Paragraph_Text LIKE '%Korea%'"
    },
    {
      "question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.",
      "query": "SELECT paragraph_id, paragraph_text FROM Paragraphs WHERE document_id = (SELECT document_id FROM Documents WHERE document_name = 'Welcome to NY');"
    },
    {
      "question": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?",
      "query": "SELECT paragraph_id, paragraph_text FROM Paragraphs WHERE document_id = (SELECT document_id FROM Documents WHERE document_name = 'Welcome to NY');"
    },
    {
      "question": "Show all paragraph texts for the document \"Customer reviews\".",
      "query": "SELECT paragraph_text FROM Paragraphs WHERE document_id = (SELECT document_id FROM Documents WHERE document_name = \"Customer reviews\");"
    },
    {
      "question": "What are the paragraph texts for the document with the name 'Customer reviews'?",
      "query": "SELECT paragraph_text FROM Paragraphs JOIN Documents ON Paragraphs.document_id = Documents.document_id WHERE Documents.document_name = 'Customer reviews';"
    },
    {
      "question": "Show all document ids and the number of paragraphs in each document. Order by document id.",
      "query": "SELECT document_id, COUNT(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id ASC"
    },
    {
      "question": "Return the different document ids along with the number of paragraphs corresponding to each, ordered by id.",
      "query": "SELECT Document_ID, COUNT(*) FROM Paragraphs GROUP BY Document_ID ORDER BY Document_ID ASC"
    },
    {
      "question": "Show all document ids, names and the number of paragraphs in each document.",
      "query": "SELECT T1.document_id ,  T1.document_name ,  COUNT(*) FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id"
    },
    {
      "question": "What are the ids and names of each document, as well as the number of paragraphs in each?",
      "query": "SELECT T1.document_id ,  T1.document_name ,  COUNT(*) FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id"
    },
    {
      "question": "List all document ids with at least two paragraphs.",
      "query": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) >= 2"
    },
    {
      "question": "What are the ids of documents that have 2 or more paragraphs?",
      "query": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) >= 2"
    },
    {
      "question": "What is the document id and name with greatest number of paragraphs?",
      "query": "SELECT T1.document_id, T1.document_name FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.document_id = T2.document_id GROUP BY T1.document_id ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
      "question": "Return the id and name of the document with the most paragraphs.",
      "query": "SELECT Documents.Document_ID, Documents.Document_Name FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID ORDER BY COUNT(*) DESC LIMIT 1;"
    },
    {
      "question": "What is the document id with least number of paragraphs?",
      "query": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1"
    },
    {
      "question": "Return the id of the document with the fewest paragraphs.",
      "query": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1"
    },
    {
      "question": "What is the document id with 1 to 2 paragraphs?",
      "query": "SELECT T1.document_id FROM Documents AS T1 JOIN (SELECT document_id, COUNT(*) AS num_paragraphs FROM Paragraphs GROUP BY document_id) AS T2 ON T1.document_id = T2.document_id WHERE T2.num_paragraphs BETWEEN 1 AND 2;"
    },
    {
      "question": "Give the ids of documents that have between one and two paragraphs.",
      "query": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2;"
    },
    {
      "question": "Show the document id with paragraph text 'Brazil' and 'Ireland'.",
      "query": "SELECT T1.document_id FROM Paragraphs AS T1 JOIN Paragraphs AS T2 ON T1.document_id = T2.document_id WHERE T1.paragraph_text = 'Brazil' AND T2.paragraph_text = 'Ireland'"
    },
    {
      "question": "What are the ids of documents that contain the paragraph text 'Brazil' and 'Ireland'?",
      "query": "SELECT T1.document_id FROM Paragraphs AS T1 JOIN Paragraphs AS T2 ON T1.document_id = T2.document_id WHERE T1.paragraph_text = 'Brazil' AND T2.paragraph_text = 'Ireland'"
    }
  ],
  "course_teach": [
    {
      "question": "How many teachers are there?",
      "query": "SELECT count(*) FROM teacher"
    },
    {
      "question": "What is the total count of teachers?",
      "query": "SELECT count(*) FROM teacher"
    },
    {
      "question": "List the names of teachers in ascending order of age.",
      "query": "SELECT Name FROM teacher ORDER BY Age ASC"
    },
    {
      "question": "What are the names of the teachers ordered by ascending age?",
      "query": "SELECT Name FROM teacher ORDER BY Age ASC"
    },
    {
      "question": "What are the age and hometown of teachers?",
      "query": "SELECT age, hometown FROM teacher"
    },
    {
      "question": "What is the age and hometown of every teacher?",
      "query": "SELECT age ,  hometown FROM teacher"
    },
    {
      "question": "List the name of teachers whose hometown is not `` Little Lever Urban District ''.",
      "query": "SELECT Name FROM teacher WHERE Hometown <> 'Little Lever Urban District'"
    },
    {
      "question": "What are the names of the teachers whose hometown is not `` Little Lever Urban District ''?",
      "query": "SELECT Name FROM teacher WHERE Hometown != 'Little Lever Urban District'"
    },
    {
      "question": "Show the name of teachers aged either 32 or 33?",
      "query": "SELECT Name FROM teacher WHERE Age IN (32, 33)"
    },
    {
      "question": "What are the names of the teachers who are aged either 32 or 33?",
      "query": "SELECT Name FROM teacher WHERE Age IN (32, 33)"
    },
    {
      "question": "What is the hometown of the youngest teacher?",
      "query": "SELECT Hometown FROM teacher WHERE age  =  (SELECT min(age) FROM teacher)"
    },
    {
      "question": "Where is the youngest teacher from?",
      "query": "SELECT Hometown FROM teacher WHERE Age  =  (SELECT min(Age) FROM teacher)"
    },
    {
      "question": "Show different hometown of teachers and the number of teachers from each hometown.",
      "query": "SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown"
    },
    {
      "question": "For each hometown, how many teachers are there?",
      "query": "SELECT Hometown, COUNT(*) FROM teacher GROUP BY Hometown"
    },
    {
      "question": "List the most common hometown of teachers.",
      "query": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
      "question": "What is the most commmon hometowns for teachers?",
      "query": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
      "question": "Show the hometowns shared by at least two teachers.",
      "query": "SELECT hometown FROM teacher GROUP BY hometown HAVING COUNT(DISTINCT teacher_id) >= 2"
    },
    {
      "question": "What are the towns from which at least two teachers come from?",
      "query": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*) >= 2"
    },
    {
      "question": "Show names of teachers and the courses they are arranged to teach.",
      "query": "SELECT t2.name, t1.course FROM course_arrange AS t1 JOIN teacher AS t2 ON t1.teacher_id = t2.teacher_id"
    },
    {
      "question": "What is the name of each teacher and what course they teach?",
      "query": "SELECT t2.Name, t1.Course FROM course AS t1 JOIN course_arrange AS t3 ON t1.Course_ID = t3.Course_ID JOIN teacher AS t2 ON t3.Teacher_ID = t2.Teacher_ID"
    },
    {
      "question": "Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name.",
      "query": "SELECT T2.Name ,  T1.Course FROM course AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID ORDER BY T2.Name ASC"
    },
    {
      "question": "What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher?",
      "query": "SELECT T2.Name ,  T1.Course FROM course AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID ORDER BY T2.Name ASC"
    },
    {
      "question": "Show the name of the teacher for the math course.",
      "query": "SELECT t2.Name FROM course AS t1 JOIN teacher AS t2 ON t1.Course_ID = t3.Course_ID WHERE t1.Course = \"math\""
    },
    {
      "question": "What are the names of the people who teach math courses?",
      "query": "SELECT t2.Name FROM course AS t1 JOIN course_arrange AS t3 ON t1.Course_ID  =  t3.Course_ID JOIN teacher AS t2 ON t3.Teacher_ID  =  t2.Teacher_ID WHERE t1.Course  =  \"Math\""
    },
    {
      "question": "Show names of teachers and the number of courses they teach.",
      "query": "SELECT t2.name, COUNT(*) FROM course_arrange AS t1 JOIN teacher AS t2 ON t1.teacher_id = t2.teacher_id GROUP BY t2.name"
    },
    {
      "question": "What are the names of the teachers and how many courses do they teach?",
      "query": "SELECT t2.name, COUNT(*) FROM course_arrange AS t1 JOIN teacher AS t2 ON t1.teacher_id = t2.teacher_id GROUP BY t2.name"
    },
    {
      "question": "Show names of teachers that teach at least two courses.",
      "query": "SELECT t2.name FROM teacher AS t2 JOIN course_arrange AS t3 ON t2.teacher_id = t3.teacher_id GROUP BY t2.teacher_id HAVING COUNT(*) >= 2"
    },
    {
      "question": "What are the names of the teachers who teach at least two courses?",
      "query": "SELECT t2.Name FROM teacher AS t2 JOIN course_arrange AS t1 ON t1.Teacher_ID = t2.Teacher_ID GROUP BY t2.Teacher_ID HAVING COUNT(DISTINCT t1.Course_ID) >= 2"
    },
    {
      "question": "List the names of teachers who have not been arranged to teach courses.",
      "query": "SELECT Name FROM teacher WHERE Teacher_ID NOT IN (SELECT Teacher_ID FROM course_arrange)"
    },
    {
      "question": "What are the names of the teachers whose courses have not been arranged?",
      "query": "SELECT Name FROM teacher WHERE Teacher_ID NOT IN (SELECT Teacher_ID FROM course_arrange)"
    }
  ],
  "museum_visit": [
    {
      "question": "How many visitors below age 30 are there?",
      "query": "SELECT count(*) FROM visitor WHERE Age  <  30"
    },
    {
      "question": "Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low.",
      "query": "SELECT Name FROM visitor WHERE Level_of_membership  >  4 ORDER BY Level_of_membership DESC"
    },
    {
      "question": "What is the average age of the visitors whose membership level is not higher than 4?",
      "query": "SELECT avg(age) FROM visitor WHERE Level_of_membership <= 4"
    },
    {
      "question": "Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young.",
      "query": "SELECT Name ,  Level_of_membership FROM visitor WHERE Level_of_membership  >  4 ORDER BY Age DESC"
    },
    {
      "question": "Find the id and name of the museum that has the most staff members?",
      "query": "SELECT Museum_ID, Name FROM museum WHERE Num_of_Staff = (SELECT MAX(Num_of_Staff) FROM museum)"
    },
    {
      "question": "Find the average number of staff working for the museums that were open before 2009.",
      "query": "SELECT avg(Num_of_Staff) FROM museum WHERE Open_Year < 2009"
    },
    {
      "question": "What are the opening year and staff number of the museum named Plaza Museum?",
      "query": "SELECT Open_Year, Num_of_Staff FROM museum WHERE Name = 'Plaza Museum'"
    },
    {
      "question": "find the names of museums which have more staff than the minimum staff number of all museums opened after 2010.",
      "query": "SELECT Name FROM museum WHERE Num_of_Staff > (SELECT MIN(Num_of_Staff) FROM museum WHERE Open_Year > 2010)"
    },
    {
      "question": "find the id, name and age for visitors who visited some museums more than once.",
      "query": "SELECT visitor.ID, visitor.Name, visitor.Age FROM visitor JOIN visit ON visitor.ID = visit.visitor_ID GROUP BY visitor.ID HAVING COUNT(DISTINCT visit.Museum_ID) > 1"
    },
    {
      "question": "What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets?",
      "query": "SELECT visitor.ID, visitor.Name, visitor.Level_of_membership FROM visitor JOIN visit ON visitor.ID = visit.visitor_ID GROUP BY visitor.ID ORDER BY SUM(visit.Total_spent) DESC LIMIT 1;"
    },
    {
      "question": "What are the id and name of the museum visited most times?",
      "query": "SELECT museum.museum_id, museum.name FROM museum JOIN visit ON museum.museum_id = visit.museum_id GROUP BY museum.museum_id ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
      "question": "What is the name of the museum that had no visitor yet?",
      "query": "SELECT Name FROM museum WHERE Museum_ID NOT IN (SELECT Museum_ID FROM visit)"
    },
    {
      "question": "Find the name and age of the visitor who bought the most tickets at once.",
      "query": "SELECT visitor.Name, visitor.Age FROM visitor JOIN visit ON visitor.ID = visit.visitor_ID ORDER BY visit.Num_of_Ticket DESC LIMIT 1"
    },
    {
      "question": "What are the average and maximum number of tickets bought in all visits?",
      "query": "SELECT avg(Num_of_Ticket) ,  max(Num_of_Ticket) FROM visit"
    },
    {
      "question": "What is the total ticket expense of the visitors whose membership level is 1?",
      "query": "SELECT sum(Total_spent) FROM visit JOIN visitor ON visit.visitor_ID = visitor.ID WHERE visitor.Level_of_membership = 1"
    },
    {
      "question": "What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011?",
      "query": "SELECT T1.Name FROM visitor AS T1 JOIN visit AS T2 ON T1.ID  =  T2.visitor_ID JOIN museum AS T3 ON T2.Museum_ID  =  T3.Museum_ID WHERE T3.Open_Year  <  2009 INTERSECT SELECT T1.Name FROM visitor AS T1 JOIN visit AS T2 ON T1.ID  =  T2.visitor_ID JOIN museum AS T3 ON T2.Museum_ID  =  T3.Museum_ID WHERE T3.Open_Year  >  2011"
    },
    {
      "question": "Find the number of visitors who did not visit any museum opened after 2010.",
      "query": "SELECT count(*) FROM visitor WHERE ID NOT IN (SELECT visitor_ID FROM visit JOIN museum ON visit.Museum_ID = museum.Museum_ID WHERE museum.Open_Year > 2010)"
    },
    {
      "question": "How many museums were opened after 2013 or before 2008?",
      "query": "SELECT count(*) FROM museum WHERE Open_Year > 2013 OR Open_Year < 2008"
    }
  ],
  "wta_1": [
    {
      "question": "Find the total number of players.",
      "query": "SELECT COUNT(*) FROM players"
    },
    {
      "question": "How many players are there?",
      "query": "SELECT count(*) FROM players"
    },
    {
      "question": "Find the total number of matches.",
      "query": "SELECT count(*) FROM matches"
    },
    {
      "question": "Count the number of matches.",
      "query": "SELECT count(*) FROM matches"
    },
    {
      "question": "List the first name and birth date of all players from the country with code USA.",
      "query": "SELECT first_name, birth_date FROM players WHERE country_code = 'USA'"
    },
    {
      "question": "What are the first names and birth dates of players from the USA?",
      "query": "SELECT first_name, birth_date FROM players WHERE country_code = 'USA'"
    },
    {
      "question": "Find the average age of losers and winners of all matches.",
      "query": "SELECT AVG(loser_age), AVG(winner_age) FROM matches"
    },
    {
      "question": "What are the average ages of losers and winners across matches?",
      "query": "SELECT AVG(loser_age), AVG(winner_age) FROM matches"
    },
    {
      "question": "Find the average rank of winners in all matches.",
      "query": "SELECT AVG(winner_rank) FROM matches"
    },
    {
      "question": "What is the average rank for winners in all matches?",
      "query": "SELECT AVG(winner_rank) FROM matches"
    },
    {
      "question": "Find the highest rank of losers in all matches.",
      "query": "SELECT MAX(loser_rank) FROM matches"
    },
    {
      "question": "What is the best rank of losers across all matches?",
      "query": "SELECT MIN(loser_rank) FROM matches WHERE loser_rank IS NOT NULL"
    },
    {
      "question": "find the number of distinct country codes of all players.",
      "query": "SELECT COUNT(DISTINCT country_code) FROM players"
    },
    {
      "question": "How many distinct countries do players come from?",
      "query": "SELECT COUNT(DISTINCT country_code) FROM players"
    },
    {
      "question": "Find the number of distinct name of losers.",
      "query": "SELECT COUNT(DISTINCT loser_name) FROM matches"
    },
    {
      "question": "How many different loser names are there?",
      "query": "SELECT COUNT(DISTINCT loser_name) FROM matches"
    },
    {
      "question": "Find the name of tourney that has more than 10 matches.",
      "query": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*) > 10"
    },
    {
      "question": "What are the names of tournaments that have more than 10 matches?",
      "query": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10"
    },
    {
      "question": "List the names of all winners who played in both 2013 and 2016.",
      "query": "SELECT DISTINCT T1.winner_name FROM matches AS T1 JOIN matches AS T2 ON T1.winner_id = T2.winner_id WHERE T1.year = 2013 AND T2.year = 2016"
    },
    {
      "question": "What are the names of players who won in both 2013 and 2016?",
      "query": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.year  =  2013 INTERSECT SELECT DISTINCT T1.first_name ,  T1.last_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.year  =  2016"
    },
    {
      "question": "List the number of all matches who played in years of 2013 or 2016.",
      "query": "SELECT count(*) FROM matches WHERE year IN (2013, 2016)"
    },
    {
      "question": "How many matches were played in 2013 or 2016?",
      "query": "SELECT count(*) FROM matches WHERE year IN (2013, 2016)"
    },
    {
      "question": "What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?",
      "query": "SELECT T1.country_code, T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'WTA Championships' INTERSECT SELECT T1.country_code, T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'Australian Open'"
    },
    {
      "question": "What are the first names and country codes for players who won both the WTA Championships and the Australian Open?",
      "query": "SELECT T1.first_name, T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'WTA Championships' INTERSECT SELECT T1.first_name, T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'Australian Open'"
    },
    {
      "question": "Find the first name and country code of the oldest player.",
      "query": "SELECT first_name, country_code FROM players WHERE birth_date = (SELECT MIN(birth_date) FROM players)"
    },
    {
      "question": "What is the first name and country code of the oldest player?",
      "query": "SELECT first_name, country_code FROM players ORDER BY birth_date ASC LIMIT 1"
    },
    {
      "question": "List the first and last name of all players in the order of birth date.",
      "query": "SELECT first_name, last_name FROM players ORDER BY birth_date ASC"
    },
    {
      "question": "What are the full names of all players, sorted by birth date?",
      "query": "SELECT CONCAT(first_name, ' ', last_name) AS full_name FROM players ORDER BY birth_date ASC"
    },
    {
      "question": "List the first and last name of all players who are left / L hand in the order of birth date.",
      "query": "SELECT first_name, last_name FROM players WHERE hand = 'L' ORDER BY birth_date ASC"
    },
    {
      "question": "What are the full names of all left handed players, in order of birth date?",
      "query": "SELECT first_name || ' ' || last_name AS full_name FROM players WHERE hand = 'L' ORDER BY birth_date ASC"
    },
    {
      "question": "Find the first name and country code of the player who did the most number of tours.",
      "query": "SELECT first_name, country_code FROM players WHERE player_id = (SELECT player_id FROM rankings GROUP BY player_id ORDER BY SUM(tours) DESC LIMIT 1)"
    },
    {
      "question": "What is the first name and country code of the player with the most tours?",
      "query": "SELECT first_name, country_code FROM players WHERE player_id IN (SELECT player_id FROM rankings GROUP BY player_id ORDER BY COUNT(*) DESC LIMIT 1)"
    },
    {
      "question": "Find the year that has the most number of matches.",
      "query": "SELECT year FROM matches GROUP BY year ORDER BY count(*) DESC LIMIT 1"
    },
    {
      "question": "Which year had the most matches?",
      "query": "SELECT year, COUNT(*) AS num_matches FROM matches GROUP BY year ORDER BY num_matches DESC LIMIT 1"
    },
    {
      "question": "Find the name and rank points of the winner who won the most times.",
      "query": "SELECT T1.winner_name, SUM(T1.winner_rank_points) AS total_rank_points FROM matches AS T1 GROUP BY T1.winner_name ORDER BY total_rank_points DESC LIMIT 1"
    },
    {
      "question": "What is the name of the winner who has won the most matches, and how many rank points does this player have?",
      "query": "SELECT winner_name, MAX(total_wins.ranking_points) FROM (SELECT winner_id, SUM(ranking_points) AS ranking_points FROM matches JOIN rankings ON matches.winner_id = rankings.player_id GROUP BY winner_id) AS total_wins JOIN players ON total_wins.winner_id = players.player_id"
    },
    {
      "question": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.",
      "query": "SELECT winner_name FROM matches AS T1 JOIN rankings AS T2 ON T1.winner_id = T2.player_id WHERE T1.tourney_name = 'Australian Open' ORDER BY T2.ranking_points DESC LIMIT 1"
    },
    {
      "question": "What is the name of the winner with the most rank points who participated in the Australian Open tournament?",
      "query": "SELECT winner_name FROM matches AS T1 JOIN rankings AS T2 ON T1.winner_id = T2.player_id WHERE tourney_name = \"Australian Open\" ORDER BY ranking_points DESC LIMIT 1"
    },
    {
      "question": "find the names of loser and winner who played in the match with greatest number of minutes.",
      "query": "SELECT loser_name, winner_name FROM matches WHERE minutes = (SELECT MAX(minutes) FROM matches)"
    },
    {
      "question": "What are the names of the winner and loser who played in the longest match?",
      "query": "SELECT T1.winner_name, T1.loser_name FROM matches AS T1 WHERE T1.minutes = (SELECT MAX(minutes) FROM matches)"
    },
    {
      "question": "Find the average ranking for each player and their first name.",
      "query": "SELECT first_name, AVG(ranking) FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id"
    },
    {
      "question": "What are the first names of all players, and their average rankings?",
      "query": "SELECT first_name, AVG(ranking) FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY first_name"
    },
    {
      "question": "Find the total ranking points for each player and their first name.",
      "query": "SELECT players.first_name, SUM(ranking_points) AS total_points FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id ORDER BY total_points DESC"
    },
    {
      "question": "What are the first names of all players, and their total ranking points?",
      "query": "SELECT first_name, SUM(ranking_points) AS total_points FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id ORDER BY total_points DESC"
    },
    {
      "question": "find the number of players for each country.",
      "query": "SELECT country_code, COUNT(*) FROM players GROUP BY country_code"
    },
    {
      "question": "How many players are from each country?",
      "query": "SELECT country_code, COUNT(*) FROM players GROUP BY country_code"
    },
    {
      "question": "find the code of the country where has the greatest number of players.",
      "query": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1"
    },
    {
      "question": "What is the code of the country with the most players?",
      "query": "SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
      "question": "Find the codes of countries that have more than 50 players.",
      "query": "SELECT country_code FROM players GROUP BY country_code HAVING COUNT(*) > 50"
    },
    {
      "question": "What are the codes of countries with more than 50 players?",
      "query": "SELECT country_code FROM players GROUP BY country_code HAVING COUNT(*) > 50"
    },
    {
      "question": "Find the total number of tours for each ranking date.",
      "query": "SELECT ranking_date, SUM(tours) FROM rankings GROUP BY ranking_date"
    },
    {
      "question": "How many total tours were there for each ranking date?",
      "query": "SELECT ranking_date, SUM(tours) FROM rankings GROUP BY ranking_date"
    },
    {
      "question": "Find the number of matches happened in each year.",
      "query": "SELECT year, COUNT(*) FROM matches GROUP BY year"
    },
    {
      "question": "How many matches were played in each year?",
      "query": "SELECT year, COUNT(*) FROM matches GROUP BY year"
    },
    {
      "question": "Find the name and rank of the 3 youngest winners across all matches.",
      "query": "SELECT winner_name, winner_rank FROM matches ORDER BY winner_age ASC LIMIT 3"
    },
    {
      "question": "What are the names and ranks of the three youngest winners across all matches?",
      "query": "SELECT winner_name, winner_rank FROM matches ORDER BY winner_age ASC LIMIT 3"
    },
    {
      "question": "How many different winners both participated in the WTA Championships and were left handed?",
      "query": "SELECT COUNT(DISTINCT T1.winner_id) FROM matches AS T1 JOIN players AS T2 ON T1.winner_id = T2.player_id WHERE T1.tourney_name = 'WTA Championships' AND T2.hand = 'L'"
    },
    {
      "question": "Find the number of left handed winners who participated in the WTA Championships.",
      "query": "SELECT COUNT(DISTINCT winner_id) FROM matches WHERE tourney_name = 'WTA Championships' AND winner_hand = 'L'"
    },
    {
      "question": "Find the first name, country code and birth date of the winner who has the highest rank points in all matches.",
      "query": "SELECT T1.first_name, T1.country_code, T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id JOIN rankings AS T3 ON T1.player_id = T3.player_id WHERE T3.ranking_points = (SELECT MAX(ranking_points) FROM rankings)"
    },
    {
      "question": "What is the first name, country code, and birth date of the player with the most winner rank points across all matches?",
      "query": "SELECT T1.first_name, T1.country_code, T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1"
    },
    {
      "question": "Find the number of players for each hand type.",
      "query": "SELECT hand, COUNT(*) FROM players GROUP BY hand"
    },
    {
      "question": "How many players are there for each hand type?",
      "query": "SELECT hand, COUNT(*) FROM players GROUP BY hand"
    }
  ],
  "battle_death": [
    {
      "question": "How many ships ended up being 'Captured'?",
      "query": "SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'"
    },
    {
      "question": "List the name and tonnage ordered by in descending alphaetical order for the names.",
      "query": "SELECT name ,  tonnage FROM ship ORDER BY name DESC"
    },
    {
      "question": "List the name, date and result of each battle.",
      "query": "SELECT name, date, result FROM battle"
    },
    {
      "question": "What is maximum and minimum death toll caused each time?",
      "query": "SELECT MAX(killed), MIN(killed) FROM death"
    },
    {
      "question": "What is the average number of injuries caused each time?",
      "query": "SELECT avg(injured) FROM death"
    },
    {
      "question": "What are the death and injury situations caused by the ship with tonnage 't'?",
      "query": "SELECT note, killed, injured FROM death WHERE caused_by_ship_id IN (SELECT id FROM ship WHERE tonnage = 't')"
    },
    {
      "question": "What are the name and results of the battles when the bulgarian commander is not 'Boril'",
      "query": "SELECT name ,  result FROM battle WHERE bulgarian_commander != 'Boril'"
    },
    {
      "question": "What are the different ids and names of the battles that lost any 'Brig' type shipes?",
      "query": "SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'"
    },
    {
      "question": "What are the ids and names of the battles that led to more than 10 people killed in total.",
      "query": "SELECT T1.id ,  T1.name FROM battle AS T1 JOIN death AS T2 ON T1.id  =  T2.caused_by_ship_id GROUP BY T1.id HAVING SUM(T2.killed)  >  10"
    },
    {
      "question": "What is the ship id and name that caused most total injuries?",
      "query": "SELECT T1.id, T1.name FROM ship AS T1 JOIN death AS T2 ON T1.id = T2.caused_by_ship_id GROUP BY T1.id ORDER BY SUM(T2.injured) DESC LIMIT 1"
    },
    {
      "question": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?",
      "query": "SELECT DISTINCT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'"
    },
    {
      "question": "How many different results are there for the battles?",
      "query": "SELECT count(DISTINCT result) FROM battle"
    },
    {
      "question": "How many battles did not lose any ship with tonnage '225'?",
      "query": "SELECT count(*) FROM battle WHERE id NOT IN (SELECT lost_in_battle FROM ship WHERE tonnage = 225)"
    },
    {
      "question": "List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta'",
      "query": "SELECT T1.name, T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.name IN ('Lettice', 'HMS Atalanta') GROUP BY T1.name, T1.date HAVING COUNT(DISTINCT T2.name) = 2"
    },
    {
      "question": "Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'.",
      "query": "SELECT name, result, bulgarian_commander FROM battle WHERE id NOT IN (SELECT lost_in_battle FROM ship WHERE location = 'English Channel') AND lost_in_battle IS NULL"
    },
    {
      "question": "What are the notes of the death events which has substring 'East'?",
      "query": "SELECT note FROM death WHERE note LIKE '%East%'"
    }
  ],
  "student_transcripts_tracking": [
    {
      "question": "what are all the addresses including line 1 and line 2?",
      "query": "SELECT line_1, line_2 FROM Addresses"
    },
    {
      "question": "What is the first and second line for all addresses?",
      "query": "SELECT line_1, line_2 FROM Addresses"
    },
    {
      "question": "How many courses in total are listed?",
      "query": "SELECT count(*) FROM COURSES"
    },
    {
      "question": "How many courses are there?",
      "query": "SELECT count(*) FROM COURSES"
    },
    {
      "question": "How is the math course described?",
      "query": "SELECT course_description FROM Courses WHERE course_name = \"Math\""
    },
    {
      "question": "What are the descriptions for all the math courses?",
      "query": "SELECT course_description FROM Courses WHERE course_name LIKE \"%math%\""
    },
    {
      "question": "What is the zip code of the address in the city Port Chelsea?",
      "query": "SELECT zip_postcode FROM Addresses WHERE city = \"Port Chelsea\""
    },
    {
      "question": "What is the zip code for Port Chelsea?",
      "query": "SELECT zip_postcode FROM Addresses WHERE city = \"Port Chelsea\""
    },
    {
      "question": "Which department offers the most number of degrees? List department name and id.",
      "query": "SELECT T1.department_name, T1.department_id FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id GROUP BY T1.department_id ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
      "question": "What is the name and id of the department with the most number of degrees?",
      "query": "SELECT department_id, department_name FROM Departments WHERE department_id IN (SELECT department_id FROM Degree_Programs GROUP BY department_id ORDER BY COUNT(*) DESC LIMIT 1)"
    },
    {
      "question": "How many departments offer any degree?",
      "query": "SELECT count(DISTINCT department_id) FROM degree_programs"
    },
    {
      "question": "How many different departments offer degrees?",
      "query": "SELECT count(DISTINCT department_id) FROM degree_programs"
    },
    {
      "question": "How many different degree names are offered?",
      "query": "SELECT count(DISTINCT degree_summary_name) FROM degree_programs"
    },
    {
      "question": "How many different degrees are offered?",
      "query": "SELECT count(*) FROM DEGREE_PROGRAMS"
    },
    {
      "question": "How many degrees does the engineering department offer?",
      "query": "SELECT count(*) FROM DEGREE_PROGRAMS WHERE department_id = (SELECT department_id FROM DEPARTMENTS WHERE department_name = \"engineering\")"
    },
    {
      "question": "How many degrees does the engineering department have?",
      "query": "SELECT count(*) FROM DEGREE_PROGRAMS WHERE department_id = (SELECT department_id FROM DEPARTMENTS WHERE department_name = \"engineering\")"
    },
    {
      "question": "What are the names and descriptions of all the sections?",
      "query": "SELECT section_name, section_description FROM Sections"
    },
    {
      "question": "What are the names and descriptions for all the sections?",
      "query": "SELECT section_name, section_description FROM Sections"
    },
    {
      "question": "What are the names and id of courses having at most 2 sections?",
      "query": "SELECT course_id, course_name FROM Courses WHERE course_id IN (SELECT course_id FROM Sections GROUP BY course_id HAVING COUNT(*) <= 2)"
    },
    {
      "question": "What are the names and ids of every course with less than 2 sections?",
      "query": "SELECT course_id, course_name FROM Courses WHERE course_id NOT IN (SELECT course_id FROM Sections GROUP BY course_id HAVING COUNT(*) >= 2)"
    },
    {
      "question": "List the section_name in reversed lexicographical order.",
      "query": "SELECT section_name FROM Sections ORDER BY section_name DESC"
    },
    {
      "question": "What are the names of the sections in reverse alphabetical order?",
      "query": "SELECT section_name FROM Sections ORDER BY section_name DESC"
    },
    {
      "question": "What is the semester which most student registered in? Show both the name and the id.",
      "query": "SELECT T1.semester_id, T2.semester_name FROM Student_Enrolment AS T1 JOIN Semesters AS T2 ON T1.semester_id = T2.semester_id GROUP BY T1.semester_id ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
      "question": "For each semester, what is the name and id of the one with the most students registered?",
      "query": "SELECT T1.semester_id, T2.semester_name FROM Student_Enrolment AS T1 JOIN Semesters AS T2 ON T1.semester_id = T2.semester_id GROUP BY T1.semester_id ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
      "question": "What is the description of the department whose name has the substring the computer?",
      "query": "SELECT department_description FROM Departments WHERE department_name LIKE \"%computer%\""
    },
    {
      "question": "What is the department description for the one whose name has the word computer?",
      "query": "SELECT department_description FROM Departments WHERE department_name LIKE \"%computer%\""
    },
    {
      "question": "Who are enrolled in 2 degree programs in one semester? List the first name, middle name and last name and the id.",
      "query": "SELECT T1.student_id, T2.first_name, T2.middle_name, T2.last_name FROM Student_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T1.semester_id IN (SELECT semester_id FROM Student_Enrolment GROUP BY semester_id HAVING COUNT(DISTINCT degree_program_id) = 2) GROUP BY T1.student_id, T2.first_name, T2.middle_name, T2.last_name HAVING COUNT(DISTINCT degree_program_id) = 2"
    },
    {
      "question": "What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester?",
      "query": "SELECT T1.student_id, T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id WHERE T2.semester_id IN (SELECT semester_id FROM Student_Enrolment GROUP BY semester_id HAVING COUNT(DISTINCT degree_program_id) = 2) GROUP BY T1.student_id, T1.first_name, T1.middle_name, T1.last_name HAVING COUNT(DISTINCT T2.degree_program_id) = 2"
    },
    {
      "question": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.",
      "query": "SELECT first_name, middle_name, last_name FROM Students WHERE student_id IN (SELECT student_id FROM Student_Enrolment WHERE degree_program_id IN (SELECT degree_program_id FROM Degree_Programs WHERE degree_summary_name LIKE '%Bachelor%'))"
    },
    {
      "question": "What are the first, middle, and last names for everybody enrolled in a Bachelors program?",
      "query": "SELECT T2.first_name, T2.middle_name, T2.last_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id JOIN Students AS T3 ON T2.student_id = T3.student_id WHERE T1.degree_summary_name LIKE '%Bachelor%'"
    },
    {
      "question": "Find the kind of program which most number of students are enrolled in?",
      "query": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
      "question": "What is the degree summary name that has the most number of students enrolled?",
      "query": "SELECT T3.degree_summary_name FROM Student_Enrolment AS T1 JOIN Degree_Programs AS T2 ON T1.degree_program_id = T2.degree_program_id JOIN Degree_Programs AS T3 ON T2.degree_program_id = T3.degree_program_id GROUP BY T3.degree_program_id ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
      "question": "Find the program which most number of students are enrolled in. List both the id and the summary.",
      "query": "SELECT T1.degree_program_id, T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
      "question": "What is the program id and the summary of the degree that has the most students enrolled?",
      "query": "SELECT T1.degree_program_id, T1.degree_summary_name FROM degree_programs AS T1 JOIN student_enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
      "question": "Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id.",
      "query": "SELECT T1.student_id, T1.first_name, T1.middle_name, T1.last_name, COUNT(*) AS num_enrollments FROM Student_Enrolment AS T2 JOIN Students AS T1 ON T2.student_id = T1.student_id GROUP BY T2.student_id ORDER BY num_enrollments DESC LIMIT 1"
    },
    {
      "question": "What is the first, middle, and last name, along with the id and number of enrollments, for the student who enrolled the most in any program?",
      "query": "SELECT T1.student_id, T1.first_name, T1.middle_name, T1.last_name, COUNT(*) AS num_enrollments FROM Student_Enrolment AS T2 JOIN Students AS T1 ON T2.student_id = T1.student_id GROUP BY T2.student_id ORDER BY num_enrollments DESC LIMIT 1"
    },
    {
      "question": "Which semesters do not have any student enrolled? List the semester name.",
      "query": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN (SELECT semester_id FROM Student_Enrolment)"
    },
    {
      "question": "What is the name of the semester with no students enrolled?",
      "query": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN (SELECT semester_id FROM Student_Enrolment)"
    },
    {
      "question": "What are all the course names of the courses which ever have students enrolled in?",
      "query": "SELECT DISTINCT course_name FROM Courses JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id"
    },
    {
      "question": "What are the names of all courses that have some students enrolled?",
      "query": "SELECT DISTINCT course_name FROM Courses JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id"
    },
    {
      "question": "What's the name of the course with most number of enrollments?",
      "query": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_id ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
      "question": "What is the name of the course with the most students enrolled?",
      "query": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_id ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
      "question": "Find the last name of the students who currently live in the state of North Carolina but have not registered in any degree program.",
      "query": "SELECT last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id = T2.address_id WHERE T2.state_province_county = \"North Carolina\" AND T1.student_id NOT IN (SELECT student_id FROM Student_Enrolment)"
    },
    {
      "question": "What are the last name of the students who live in North Carolina but have not registered in any degree programs?",
      "query": "SELECT last_name FROM Students WHERE current_address_id IN (SELECT address_id FROM Addresses WHERE state_province_county = \"North Carolina\") AND student_id NOT IN (SELECT student_id FROM Student_Enrolment)"
    },
    {
      "question": "Show the date and id of the transcript with at least 2 course results.",
      "query": "SELECT T1.transcript_date, T1.transcript_id FROM Transcripts AS T1 JOIN Transcript_Contents AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id HAVING COUNT(DISTINCT T2.student_course_id) >= 2"
    },
    {
      "question": "What is the date and id of the transcript with at least 2 courses listed?",
      "query": "SELECT T1.transcript_id, T1.transcript_date FROM Transcripts AS T1 JOIN Transcript_Contents AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id HAVING COUNT(DISTINCT T2.student_course_id) >= 2"
    },
    {
      "question": "What is the phone number of the man with the first name Timmothy and the last name Ward?",
      "query": "SELECT cell_mobile_number FROM Students WHERE first_name = \"Timmothy\" AND last_name = \"Ward\""
    },
    {
      "question": "What is the mobile phone number of the student named Timmothy Ward?",
      "query": "SELECT cell_mobile_number FROM Students WHERE first_name = \"Timmothy\" AND last_name = \"Ward\""
    },
    {
      "question": "Who is the first student to register? List the first name, middle name and last name.",
      "query": "SELECT first_name, middle_name, last_name FROM Students ORDER BY date_first_registered LIMIT 1"
    },
    {
      "question": "What is the first, middle, and last name of the first student to register?",
      "query": "SELECT first_name, middle_name, last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1"
    },
    {
      "question": "Who is the earliest graduate of the school? List the first name, middle name and last name.",
      "query": "SELECT first_name, middle_name, last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id JOIN Transcript_Contents AS T3 ON T2.student_enrolment_id = T3.student_course_id JOIN Transcripts AS T4 ON T3.transcript_id = T4.transcript_id ORDER BY T4.transcript_date ASC LIMIT 1"
    },
    {
      "question": "What is the first, middle, and last name of the earliest school graduate?",
      "query": "SELECT first_name, middle_name, last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id JOIN Transcripts AS T3 ON T2.student_enrolment_id = T3.transcript_id ORDER BY T3.transcript_date ASC LIMIT 1"
    },
    {
      "question": "Whose permanent address is different from his or her current address? List his or her first name.",
      "query": "SELECT first_name FROM Students WHERE current_address_id <> permanent_address_id"
    },
    {
      "question": "What is the first name of the student whose permanent address is different from his or her current one?",
      "query": "SELECT first_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id = T2.address_id JOIN Addresses AS T3 ON T1.permanent_address_id = T3.address_id WHERE T2.line_1 != T3.line_1"
    },
    {
      "question": "Which address holds the most number of students currently? List the address id and all lines.",
      "query": "SELECT T1.address_id, T1.line_1, T1.line_2, T1.line_3 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id GROUP BY T2.current_address_id ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
      "question": "What is the id, line 1, and line 2 of the address with the most students?",
      "query": "SELECT T1.address_id, T1.line_1, T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id GROUP BY T1.address_id ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
      "question": "On average, when were the transcripts printed?",
      "query": "SELECT AVG(transcript_date) FROM Transcripts"
    },
    {
      "question": "What is the average transcript date?",
      "query": "SELECT AVG(transcript_date) FROM Transcripts"
    },
    {
      "question": "When is the first transcript released? List the date and details.",
      "query": "SELECT transcript_date, other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1"
    },
    {
      "question": "What is the earliest date of a transcript release, and what details can you tell me?",
      "query": "SELECT MIN(transcript_date), other_details FROM Transcripts"
    },
    {
      "question": "How many transcripts are released?",
      "query": "SELECT count(*) FROM Transcripts"
    },
    {
      "question": "How many transcripts are listed?",
      "query": "SELECT count(*) FROM Transcripts"
    },
    {
      "question": "What is the last transcript release date?",
      "query": "SELECT MAX(transcript_date) FROM Transcripts"
    },
    {
      "question": "When was the last transcript released?",
      "query": "SELECT MAX(transcript_date) FROM Transcripts"
    },
    {
      "question": "How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id.",
      "query": "SELECT T1.student_course_id, COUNT(*) AS count FROM Transcript_Contents AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.student_course_id = T2.student_course_id GROUP BY T1.student_course_id ORDER BY count DESC LIMIT 1"
    },
    {
      "question": "What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id?",
      "query": "SELECT T2.student_enrolment_id, COUNT(*) AS num_transcripts FROM Transcript_Contents AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.student_course_id = T2.student_course_id GROUP BY T2.course_id ORDER BY num_transcripts DESC LIMIT 1"
    },
    {
      "question": "Show the date of the transcript which shows the least number of results, also list the id.",
      "query": "SELECT T1.transcript_id, T1.transcript_date FROM Transcripts AS T1 JOIN Transcript_Contents AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id ORDER BY COUNT(*) ASC LIMIT 1"
    },
    {
      "question": "What is the date and id of the transcript with the least number of results?",
      "query": "SELECT transcript_id, transcript_date FROM Transcripts AS T1 JOIN Transcript_Contents AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id ORDER BY COUNT(*) ASC LIMIT 1"
    },
    {
      "question": "Find the semester when both Master students and Bachelor students got enrolled in.",
      "query": "SELECT T1.semester_name FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id JOIN Degree_Programs AS T3 ON T2.degree_program_id = T3.degree_program_id WHERE T3.degree_summary_name IN ('Master', 'Bachelor') GROUP BY T1.semester_name HAVING COUNT(DISTINCT T3.degree_summary_name) = 2"
    },
    {
      "question": "What is the id of the semester that had both Masters and Bachelors students enrolled?",
      "query": "SELECT T1.semester_id FROM Student_Enrolment AS T1 JOIN Degree_Programs AS T2 ON T1.degree_program_id = T2.degree_program_id WHERE T2.degree_summary_name IN ('Masters', 'Bachelors') GROUP BY T1.semester_id HAVING COUNT(DISTINCT T2.degree_summary_name) = 2"
    },
    {
      "question": "How many different addresses do the students currently live?",
      "query": "SELECT COUNT(DISTINCT current_address_id) FROM Students"
    },
    {
      "question": "What are the different addresses that have students living there?",
      "query": "SELECT DISTINCT T1.line_1, T1.line_2, T1.city, T1.zip_postcode, T1.state_province_county, T1.country FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id OR T1.address_id = T2.permanent_address_id"
    },
    {
      "question": "List all the student details in reversed lexicographical order.",
      "query": "SELECT * FROM Students ORDER BY last_name DESC, first_name DESC"
    },
    {
      "question": "What other details can you tell me about students in reverse alphabetical order?",
      "query": "SELECT * FROM Students ORDER BY last_name DESC"
    },
    {
      "question": "Describe the section h.",
      "query": "SELECT section_description FROM Sections WHERE section_name = \"h\""
    },
    {
      "question": "What is the description for the section named h?",
      "query": "SELECT section_description FROM Sections WHERE section_name = \"h\""
    },
    {
      "question": "Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582.",
      "query": "SELECT first_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.permanent_address_id = T2.address_id WHERE T2.country = \"Haiti\" OR T1.cell_mobile_number = \"09700166582\""
    },
    {
      "question": "What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582?",
      "query": "SELECT first_name FROM Students WHERE permanent_address_id IN (SELECT address_id FROM Addresses WHERE country = 'Haiti') OR cell_mobile_number = '09700166582'"
    }
  ],
  "tvshow": [
    {
      "question": "List the title of all cartoons in alphabetical order.",
      "query": "SELECT Title FROM Cartoon ORDER BY Title ASC"
    },
    {
      "question": "What are the titles of the cartoons sorted alphabetically?",
      "query": "SELECT Title FROM Cartoon ORDER BY Title ASC"
    },
    {
      "question": "List all cartoon directed by \"Ben Jones\".",
      "query": "SELECT Title FROM Cartoon WHERE Directed_by  =  \"Ben Jones\""
    },
    {
      "question": "What are the names of all cartoons directed by Ben Jones?",
      "query": "SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones'"
    },
    {
      "question": "How many cartoons were written by \"Joseph Kuhr\"?",
      "query": "SELECT COUNT(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\""
    },
    {
      "question": "What is the number of cartoones written by Joseph Kuhr?",
      "query": "SELECT count(*) FROM Cartoon WHERE Written_by  =  'Joseph Kuhr'"
    },
    {
      "question": "list all cartoon titles and their directors ordered by their air date",
      "query": "SELECT Title ,  Directed_by FROM Cartoon ORDER BY Original_air_date"
    },
    {
      "question": "What is the name and directors of all the cartoons that are ordered by air date?",
      "query": "SELECT Title, Directed_by FROM Cartoon ORDER BY Original_air_date ASC"
    },
    {
      "question": "List the title of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\".",
      "query": "SELECT Title FROM Cartoon WHERE Directed_by  =  'Ben Jones' OR Directed_by  =  'Brandon Vietti'"
    },
    {
      "question": "What are the titles of all cartoons directed by Ben Jones or Brandon Vietti?",
      "query": "SELECT Title FROM Cartoon WHERE Directed_by  =  'Ben Jones' OR Directed_by  =  'Brandon Vietti'"
    },
    {
      "question": "Which country has the most of TV Channels? List the country and number of TV Channels it has.",
      "query": "SELECT Country, COUNT(*) FROM TV_Channel GROUP BY Country ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
      "question": "What is the country with the most number of TV Channels and how many does it have?",
      "query": "SELECT Country, COUNT(*) FROM TV_Channel GROUP BY Country ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
      "question": "List the number of different series names and contents in the TV Channel table.",
      "query": "SELECT COUNT(DISTINCT series_name), COUNT(DISTINCT content) FROM TV_Channel"
    },
    {
      "question": "How many different series and contents are listed in the TV Channel table?",
      "query": "SELECT COUNT(DISTINCT series_name), COUNT(DISTINCT Content) FROM TV_Channel"
    },
    {
      "question": "What is the content of TV Channel with serial name \"Sky Radio\"?",
      "query": "SELECT Content FROM TV_Channel WHERE series_name  =  'Sky Radio'"
    },
    {
      "question": "What is the content of the series Sky Radio?",
      "query": "SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio'"
    },
    {
      "question": "What is the Package Option of TV Channel with serial name \"Sky Radio\"?",
      "query": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\""
    },
    {
      "question": "What are the Package Options of the TV Channels whose series names are Sky Radio?",
      "query": "SELECT Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio'"
    },
    {
      "question": "How many TV Channel using language English?",
      "query": "SELECT COUNT(*) FROM TV_Channel WHERE Language = 'English'"
    },
    {
      "question": "How many TV Channels use the English language?",
      "query": "SELECT COUNT(*) FROM TV_Channel WHERE Language = 'English'"
    },
    {
      "question": "List the language used least number of TV Channel. List language and number of TV Channel.",
      "query": "SELECT Language, COUNT(*) FROM TV_Channel GROUP BY Language ORDER BY COUNT(*) ASC LIMIT 1"
    },
    {
      "question": "What are the languages used by the least number of TV Channels and how many channels use it?",
      "query": "SELECT Language, COUNT(*) FROM TV_Channel GROUP BY Language ORDER BY COUNT(*) ASC LIMIT 1"
    },
    {
      "question": "List each language and the number of TV Channels using it.",
      "query": "SELECT Language, COUNT(*) FROM TV_Channel GROUP BY Language"
    },
    {
      "question": "For each language, list the number of TV Channels that use it.",
      "query": "SELECT Language, COUNT(*) FROM TV_Channel GROUP BY Language"
    },
    {
      "question": "What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.",
      "query": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id  =  T2.Channel WHERE T2.Title  =  'The Rise of the Blue Beetle!'"
    },
    {
      "question": "What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?",
      "query": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id  =  T2.Channel WHERE T2.Title  =  'The Rise of the Blue Beetle'"
    },
    {
      "question": "List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".",
      "query": "SELECT T1.Title FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.Channel  =  T2.id WHERE T2.series_name  =  'Sky Radio'"
    },
    {
      "question": "What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?",
      "query": "SELECT Title FROM Cartoon WHERE Channel IN (SELECT id FROM TV_Channel WHERE series_name = 'Sky Radio')"
    },
    {
      "question": "List the Episode of all TV series sorted by rating.",
      "query": "SELECT Episode FROM TV_series ORDER BY Rating DESC"
    },
    {
      "question": "What are all of the episodes ordered by ratings?",
      "query": "SELECT Episode FROM TV_series ORDER BY Rating DESC"
    },
    {
      "question": "List top 3 highest Rating  TV series. List the TV series's Episode and Rating.",
      "query": "SELECT Episode, Rating FROM TV_series ORDER BY Rating DESC LIMIT 3"
    },
    {
      "question": "What are 3 most highly rated episodes in the TV series table and what were those ratings?",
      "query": "SELECT episode, rating FROM TV_series ORDER BY rating DESC LIMIT 3"
    },
    {
      "question": "What is minimum and maximum share of TV series?",
      "query": "SELECT MIN(Share), MAX(Share) FROM TV_series"
    },
    {
      "question": "What is the maximum and minimum share for the TV series?",
      "query": "SELECT max(Share) ,  min(Share) FROM TV_series"
    },
    {
      "question": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?",
      "query": "SELECT Air_Date FROM TV_series WHERE Episode  =  \"A Love of a Lifetime\""
    },
    {
      "question": "When did the episode \"A Love of a Lifetime\" air?",
      "query": "SELECT Air_Date FROM TV_series WHERE series_name  =  \"A Love of a Lifetime\""
    },
    {
      "question": "What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?",
      "query": "SELECT Weekly_Rank FROM TV_series WHERE series_name = \"A Love of a Lifetime\""
    },
    {
      "question": "What is the weekly rank for the episode \"A Love of a Lifetime\"?",
      "query": "SELECT Weekly_Rank FROM TV_series WHERE series_name = \"A Love of a Lifetime\""
    },
    {
      "question": "What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.",
      "query": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id  =  T2.Channel WHERE T2.Episode  =  'A Love of a Lifetime'"
    },
    {
      "question": "What is the name of the series that has the episode \"A Love of a Lifetime\"?",
      "query": "SELECT series_name FROM TV_series WHERE Episode  =  \"A Love of a Lifetime\""
    },
    {
      "question": "List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".",
      "query": "SELECT episode FROM TV_series AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.series_name = \"Sky Radio\""
    },
    {
      "question": "What is the episode for the TV series named \"Sky Radio\"?",
      "query": "SELECT Episode FROM TV_series WHERE series_name = 'Sky Radio'"
    },
    {
      "question": "Find the number of cartoons directed by each of the listed directors.",
      "query": "SELECT Directed_by, COUNT(*) FROM Cartoon GROUP BY Directed_by"
    },
    {
      "question": "How many cartoons did each director create?",
      "query": "SELECT Directed_by, COUNT(*) FROM Cartoon GROUP BY Directed_by"
    },
    {
      "question": "Find the production code and channel of the most recently aired cartoon.",
      "query": "SELECT production_code, channel FROM cartoon WHERE original_air_date = (SELECT MAX(original_air_date) FROM cartoon)"
    },
    {
      "question": "What is the produdction code and channel of the most recent cartoon?",
      "query": "SELECT Production_code, Channel FROM Cartoon ORDER BY Original_air_date DESC LIMIT 1"
    },
    {
      "question": "Find the package choice and series name of the TV channel that has high definition TV.",
      "query": "SELECT Package_Option, series_name FROM TV_Channel WHERE Hight_definition_TV = 'Yes'"
    },
    {
      "question": "What are the package options and the name of the series for the TV Channel that supports high definition TV?",
      "query": "SELECT T1.Package_Option, T2.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id  =  T2.Channel WHERE T1.Hight_definition_TV  =  'Yes'"
    },
    {
      "question": "which countries' tv channels are playing some cartoon written by Todd Casey?",
      "query": "SELECT DISTINCT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = 'Todd Casey'"
    },
    {
      "question": "What are the countries that have cartoons on TV that were written by Todd Casey?",
      "query": "SELECT DISTINCT Country FROM Cartoon WHERE Written_by  =  'Todd Casey'"
    },
    {
      "question": "which countries' tv channels are not playing any cartoon written by Todd Casey?",
      "query": "SELECT DISTINCT Country FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Written_by = 'Todd Casey')"
    },
    {
      "question": "What are the countries that are not playing cartoons written by Todd Casey?",
      "query": "SELECT DISTINCT Country FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Written_by = 'Todd Casey')"
    },
    {
      "question": "Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?",
      "query": "SELECT T1.series_name, T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by IN ('Ben Jones', 'Michael Chang')"
    },
    {
      "question": "What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?",
      "query": "SELECT T1.series_name ,  T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id  =  T2.Channel WHERE T2.Directed_by  =  'Ben Jones' INTERSECT SELECT T1.series_name ,  T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id  =  T2.Channel WHERE T2.Directed_by  =  'Michael Chang'"
    },
    {
      "question": "find the pixel aspect ratio and nation of the tv channels that do not use English.",
      "query": "SELECT Pixel_aspect_ratio_PAR ,  Country FROM TV_Channel WHERE Language  <>  'English'"
    },
    {
      "question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?",
      "query": "SELECT Pixel_aspect_ratio_PAR ,  Country FROM TV_Channel WHERE Language  <>  'English'"
    },
    {
      "question": "find id of the tv channels that from the countries where have more than two tv channels.",
      "query": "SELECT T1.id FROM TV_Channel AS T1 JOIN (SELECT Country, COUNT(*) AS num_channels FROM TV_Channel GROUP BY Country HAVING num_channels > 2) AS T2 ON T1.Country = T2.Country"
    },
    {
      "question": "What are the ids of all tv channels that have more than 2 TV channels?",
      "query": "SELECT id FROM TV_Channel WHERE Package_Option > 2"
    },
    {
      "question": "find the id of tv channels that do not play any cartoon directed by Ben Jones.",
      "query": "SELECT id FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones')"
    },
    {
      "question": "What are the ids of the TV channels that do not have any cartoons directed by Ben Jones?",
      "query": "SELECT id FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones')"
    },
    {
      "question": "find the package option of the tv channel that do not have any cartoon directed by Ben Jones.",
      "query": "SELECT Package_Option FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Directed_by  =  'Ben Jones')"
    },
    {
      "question": "What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones?",
      "query": "SELECT DISTINCT T1.Package_Option FROM TV_Channel AS T1 LEFT JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by != 'Ben Jones' OR T2.Directed_by IS NULL"
    }
  ],
  "poker_player": [
    {
      "question": "How many poker players are there?",
      "query": "SELECT count(*) FROM poker_player"
    },
    {
      "question": "Count the number of poker players.",
      "query": "SELECT count(*) FROM poker_player"
    },
    {
      "question": "List the earnings of poker players in descending order.",
      "query": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC"
    },
    {
      "question": "What are the earnings of poker players, ordered descending by value?",
      "query": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC"
    },
    {
      "question": "List the final tables made and the best finishes of poker players.",
      "query": "SELECT Final_Table_Made, Best_Finish FROM poker_player"
    },
    {
      "question": "What are the final tables made and best finishes for all poker players?",
      "query": "SELECT Final_Table_Made, Best_Finish FROM poker_player"
    },
    {
      "question": "What is the average earnings of poker players?",
      "query": "SELECT avg(Earnings) FROM poker_player"
    },
    {
      "question": "Return the average earnings across all poker players.",
      "query": "SELECT avg(Earnings) FROM poker_player"
    },
    {
      "question": "What is the money rank of the poker player with the highest earnings?",
      "query": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1"
    },
    {
      "question": "Return the money rank of the player with the greatest earnings.",
      "query": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1"
    },
    {
      "question": "What is the maximum number of final tables made among poker players with earnings less than 200000?",
      "query": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000"
    },
    {
      "question": "Return the maximum final tables made across all poker players who have earnings below 200000.",
      "query": "SELECT MAX(Final_Table_Made) FROM poker_player WHERE Earnings < 200000"
    },
    {
      "question": "What are the names of poker players?",
      "query": "SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID"
    },
    {
      "question": "Return the names of all the poker players.",
      "query": "SELECT Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID"
    },
    {
      "question": "What are the names of poker players whose earnings is higher than 300000?",
      "query": "SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Earnings  >  300000"
    },
    {
      "question": "Give the names of poker players who have earnings above 300000.",
      "query": "SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Earnings  >  300000"
    },
    {
      "question": "List the names of poker players ordered by the final tables made in ascending order.",
      "query": "SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Final_Table_Made ASC"
    },
    {
      "question": "What are the names of poker players, ordered ascending by the number of final tables they have made?",
      "query": "SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Final_Table_Made ASC"
    },
    {
      "question": "What is the birth date of the poker player with the lowest earnings?",
      "query": "SELECT T2.Birth_Date FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Earnings LIMIT 1"
    },
    {
      "question": "Return the birth date of the poker player with the lowest earnings.",
      "query": "SELECT T2.Birth_Date FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Earnings LIMIT 1"
    },
    {
      "question": "What is the money rank of the tallest poker player?",
      "query": "SELECT Money_Rank FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Height DESC LIMIT 1"
    },
    {
      "question": "Return the money rank of the poker player with the greatest height.",
      "query": "SELECT Money_Rank FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Height DESC LIMIT 1"
    },
    {
      "question": "What is the average earnings of poker players with height higher than 200?",
      "query": "SELECT avg(T1.Earnings) FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Height  >  200"
    },
    {
      "question": "Give average earnings of poker players who are taller than 200.",
      "query": "SELECT avg(T1.Earnings) FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Height  >  200"
    },
    {
      "question": "What are the names of poker players in descending order of earnings?",
      "query": "SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Earnings DESC"
    },
    {
      "question": "Return the names of poker players sorted by their earnings descending.",
      "query": "SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Earnings DESC"
    },
    {
      "question": "What are different nationalities of people and the corresponding number of people from each nation?",
      "query": "SELECT Nationality, COUNT(*) FROM people GROUP BY Nationality"
    },
    {
      "question": "How many people are there of each nationality?",
      "query": "SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality"
    },
    {
      "question": "What is the most common nationality of people?",
      "query": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
      "question": "Give the nationality that is most common across all people.",
      "query": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
      "question": "What are the nationalities that are shared by at least two people?",
      "query": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*) >= 2"
    },
    {
      "question": "Return the nationalities for which there are two or more people.",
      "query": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*) >= 2"
    },
    {
      "question": "List the names and birth dates of people in ascending alphabetical order of name.",
      "query": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC"
    },
    {
      "question": "What are the names and birth dates of people, ordered by their names in alphabetical order?",
      "query": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC"
    },
    {
      "question": "Show names of people whose nationality is not \"Russia\".",
      "query": "SELECT Name FROM people WHERE Nationality != \"Russia\""
    },
    {
      "question": "What are the names of people who are not from Russia?",
      "query": "SELECT Name FROM people WHERE Nationality != 'Russia'"
    },
    {
      "question": "List the names of people that are not poker players.",
      "query": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)"
    },
    {
      "question": "What are the names of people who do not play poker?",
      "query": "SELECT Name FROM people WHERE people_id NOT IN (SELECT People_ID FROM poker_player)"
    },
    {
      "question": "How many distinct nationalities are there?",
      "query": "SELECT count(DISTINCT Nationality) FROM people"
    },
    {
      "question": "Count the number of different nationalities.",
      "query": "SELECT count(DISTINCT Nationality) FROM people"
    }
  ],
  "voter_1": [
    {
      "question": "How many states are there?",
      "query": "SELECT count(DISTINCT state) FROM AREA_CODE_STATE"
    },
    {
      "question": "List the contestant numbers and names, ordered by contestant name descending.",
      "query": "SELECT contestant_number, contestant_name FROM CONTESTANTS ORDER BY contestant_name DESC"
    },
    {
      "question": "List the vote ids, phone numbers and states of all votes.",
      "query": "SELECT vote_id, phone_number, state FROM votes"
    },
    {
      "question": "What are the maximum and minimum values of area codes?",
      "query": "SELECT max(area_code) ,  min(area_code) FROM AREA_CODE_STATE"
    },
    {
      "question": "What is last date created of votes from the state 'CA'?",
      "query": "SELECT MAX(created) FROM votes WHERE state = 'CA'"
    },
    {
      "question": "What are the names of the contestants whose names are not 'Jessie Alloway'",
      "query": "SELECT contestant_name FROM CONTESTANTS WHERE contestant_name != 'Jessie Alloway'"
    },
    {
      "question": "What are the distinct states and create time of all votes?",
      "query": "SELECT DISTINCT state, created FROM votes"
    },
    {
      "question": "What are the contestant numbers and names of the contestants who had at least two votes?",
      "query": "SELECT contestant_number, contestant_name FROM contestants WHERE contestant_number IN (SELECT contestant_number FROM votes GROUP BY contestant_number HAVING COUNT(*) >= 2)"
    },
    {
      "question": "Of all the contestants who got voted, what is the contestant number and name of the contestant who got least votes?",
      "query": "SELECT T2.contestant_number, T2.contestant_name FROM VOTES AS T1 JOIN CONTESTANTS AS T2 ON T1.contestant_number = T2.contestant_number GROUP BY T1.contestant_number, T2.contestant_name ORDER BY COUNT(*) ASC LIMIT 1"
    },
    {
      "question": "What are the number of votes from state 'NY' or 'CA'?",
      "query": "SELECT count(*) FROM votes WHERE state  =  'NY' OR state  =  'CA'"
    },
    {
      "question": "How many contestants did not get voted?",
      "query": "SELECT COUNT(*) FROM CONTESTANTS WHERE contestant_number NOT IN (SELECT contestant_number FROM VOTES)"
    },
    {
      "question": "What is the area code in which the most voters voted?",
      "query": "SELECT state FROM AREA_CODE_STATE WHERE area_code IN (SELECT LEFT(phone_number, 3) FROM VOTES GROUP BY LEFT(phone_number, 3) ORDER BY COUNT(*) DESC LIMIT 1)"
    },
    {
      "question": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?",
      "query": "SELECT created, state, phone_number FROM votes JOIN contestants ON votes.contestant_number = contestants.contestant_number WHERE contestants.contestant_name = 'Tabatha Gehling'"
    },
    {
      "question": "List the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'.",
      "query": "SELECT area_code FROM votes WHERE contestant_number = (SELECT contestant_number FROM contestants WHERE contestant_name = 'Tabatha Gehling') AND area_code IN (SELECT area_code FROM votes WHERE contestant_number = (SELECT contestant_number FROM contestants WHERE contestant_name = 'Kelly Clauss')) GROUP BY area_code"
    },
    {
      "question": "Return the names of the contestants whose names contain the substring 'Al'.",
      "query": "SELECT contestant_name FROM contestants WHERE contestant_name LIKE '%Al%'"
    }
  ],
  "world_1": [
    {
      "question": "What are the names of all the countries that became independent after 1950?",
      "query": "SELECT Name FROM country WHERE IndepYear > 1950"
    },
    {
      "question": "Give the names of the nations that were founded after 1950.",
      "query": "SELECT Name FROM country WHERE IndepYear > 1950"
    },
    {
      "question": "How many countries have a republic as their form of government?",
      "query": "SELECT COUNT(*) FROM country WHERE GovernmentForm LIKE '%Republic%'"
    },
    {
      "question": "How many countries have governments that are republics?",
      "query": "SELECT COUNT(*) FROM country WHERE GovernmentForm LIKE '%Republic%'"
    },
    {
      "question": "What is the total surface area of the countries in the Caribbean region?",
      "query": "SELECT SUM(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\""
    },
    {
      "question": "How much surface area do the countires in the Carribean cover together?",
      "query": "SELECT SUM(SurfaceArea) FROM country WHERE Continent  =  \"Caribbean\""
    },
    {
      "question": "Which continent is Anguilla in?",
      "query": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\""
    },
    {
      "question": "What is the continent name which Anguilla belongs to?",
      "query": "SELECT continent FROM country WHERE code  =  \"AIA\""
    },
    {
      "question": "Which region is the city Kabul located in?",
      "query": "SELECT Region FROM country WHERE Code  =  (SELECT CountryCode FROM city WHERE Name  =  \"Kabul\")"
    },
    {
      "question": "What region is Kabul in?",
      "query": "SELECT Region FROM country WHERE Code  =  \"AFG\""
    },
    {
      "question": "Which language is the most popular in Aruba?",
      "query": "SELECT Language FROM countrylanguage WHERE CountryCode  =  \"ABW\" ORDER BY Percentage DESC LIMIT 1"
    },
    {
      "question": "What language is predominantly spoken in Aruba?",
      "query": "SELECT Language FROM countrylanguage WHERE CountryCode  =  \"ABW\" AND IsOfficial  =  \"T\" ORDER BY Percentage DESC LIMIT 1"
    },
    {
      "question": "What are the population and life expectancies in Brazil?",
      "query": "SELECT Population, LifeExpectancy FROM country WHERE Name  =  \"Brazil\""
    },
    {
      "question": "Give me Brazil\u2019s population and life expectancies.",
      "query": "SELECT Population, LifeExpectancy FROM country WHERE Name = \"Brazil\""
    },
    {
      "question": "What are the region and population of Angola?",
      "query": "SELECT Region, Population FROM country WHERE Name  =  \"Angola\""
    },
    {
      "question": "What region does Angola belong to and what is its population?",
      "query": "SELECT Region, Population FROM country WHERE Name  =  \"Angola\""
    },
    {
      "question": "What is the average expected life expectancy for countries in the region of Central Africa?",
      "query": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  'Central Africa'"
    },
    {
      "question": "How long is the people\u2019s average life expectancy in Central Africa?",
      "query": "SELECT AVG(LifeExpectancy) FROM country WHERE Region = 'Central Africa'"
    },
    {
      "question": "What is the name of country that has the shortest life expectancy in Asia?",
      "query": "SELECT Name FROM country WHERE Continent  =  'Asia' ORDER BY LifeExpectancy ASC LIMIT 1"
    },
    {
      "question": "Give the name of the country in Asia with the lowest life expectancy.",
      "query": "SELECT Name FROM country WHERE Continent = 'Asia' ORDER BY LifeExpectancy ASC LIMIT 1"
    },
    {
      "question": "What is the total population and maximum GNP in Asia?",
      "query": "SELECT SUM(Population), MAX(GNP) FROM country WHERE Continent = 'Asia'"
    },
    {
      "question": "How many people live in Asia, and what is the largest GNP among them?",
      "query": "SELECT SUM(Population) AS Total_Population, MAX(GNP) AS Largest_GNP FROM country WHERE Continent = \"Asia\""
    },
    {
      "question": "What is the average life expectancy in African countries that are republics?",
      "query": "SELECT AVG(LifeExpectancy) FROM country WHERE Continent  =  'Africa' AND GovernmentForm  LIKE  '%Republic%'"
    },
    {
      "question": "Give the average life expectancy for countries in Africa which are republics?",
      "query": "SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND GovernmentForm LIKE '%Republic%'"
    },
    {
      "question": "What is the total surface area of the continents Asia and Europe?",
      "query": "SELECT SUM(SurfaceArea) FROM country WHERE Continent IN ('Asia', 'Europe')"
    },
    {
      "question": "Give the total surface area covered by countries in Asia or Europe.",
      "query": "SELECT SUM(SurfaceArea) FROM country WHERE Continent  IN  ('Asia', 'Europe')"
    },
    {
      "question": "How many people live in Gelderland district?",
      "query": "SELECT SUM(Population) FROM city WHERE District  =  \"Gelderland\""
    },
    {
      "question": "What is the total population of Gelderland district?",
      "query": "SELECT SUM(Population) FROM city WHERE District = 'Gelderland'"
    },
    {
      "question": "What is the average GNP and total population in all nations whose government is US territory?",
      "query": "SELECT avg(GNP), sum(Population) FROM country WHERE GovernmentForm LIKE '%US territory%'"
    },
    {
      "question": "Give the mean GNP and total population of nations which are considered US territory.",
      "query": "SELECT avg(GNP), sum(Population) FROM country WHERE Code2 = 'US'"
    },
    {
      "question": "How many unique languages are spoken in the world?",
      "query": "SELECT count(DISTINCT Language) FROM countrylanguage"
    },
    {
      "question": "What is the number of distinct languages used around the world?",
      "query": "SELECT count(DISTINCT Language) FROM countrylanguage"
    },
    {
      "question": "How many type of governments are in Africa?",
      "query": "SELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa'"
    },
    {
      "question": "How many different forms of governments are there in Africa?",
      "query": "SELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa'"
    },
    {
      "question": "What is the total number of languages used in Aruba?",
      "query": "SELECT COUNT(*) FROM (SELECT DISTINCT Language FROM countrylanguage WHERE CountryCode = 'ABW')"
    },
    {
      "question": "How many languages are spoken in Aruba?",
      "query": "SELECT COUNT(*) FROM countrylanguage WHERE CountryCode = 'ABW'"
    },
    {
      "question": "How many official languages does Afghanistan have?",
      "query": "SELECT COUNT(*) FROM countrylanguage WHERE CountryCode = \"AFG\" AND IsOfficial = \"T\""
    },
    {
      "question": "How many official languages are spoken in Afghanistan?",
      "query": "SELECT COUNT(*) FROM countrylanguage WHERE CountryCode = \"AFG\" AND IsOfficial = \"T\""
    },
    {
      "question": "What is name of the country that speaks the largest number of languages?",
      "query": "SELECT T1.Name FROM country AS T1 JOIN (SELECT CountryCode, COUNT(*) AS num_languages FROM countrylanguage GROUP BY CountryCode ORDER BY num_languages DESC LIMIT 1) AS T2 ON T1.Code = T2.CountryCode"
    },
    {
      "question": "Give the name of the nation that uses the greatest amount of languages.",
      "query": "SELECT T1.Name FROM country AS T1 JOIN (SELECT CountryCode, COUNT(*) AS num_languages FROM countrylanguage GROUP BY CountryCode ORDER BY num_languages DESC LIMIT 1) AS T2 ON T1.Code = T2.CountryCode"
    },
    {
      "question": "Which continent has the most diverse languages?",
      "query": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(DISTINCT T2.Language) DESC LIMIT 1"
    },
    {
      "question": "Which continent speaks the most languages?",
      "query": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(DISTINCT T2.Language) DESC LIMIT 1"
    },
    {
      "question": "How many countries speak both English and Dutch?",
      "query": "SELECT COUNT(*) FROM (SELECT CountryCode FROM countrylanguage WHERE Language IN ('English', 'Dutch') GROUP BY CountryCode HAVING COUNT(*) = 2) AS T1"
    },
    {
      "question": "What is the number of nations that use English and Dutch?",
      "query": "SELECT COUNT(DISTINCT CountryCode) FROM countrylanguage WHERE Language IN ('English', 'Dutch') GROUP BY CountryCode HAVING COUNT(DISTINCT Language) = 2"
    },
    {
      "question": "What are the names of nations speak both English and French?",
      "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T1.Code IN (SELECT CountryCode FROM countrylanguage WHERE Language  =  \"French\" AND IsOfficial  =  \"T\")"
    },
    {
      "question": "Give the names of nations that speak both English and French.",
      "query": "SELECT Name FROM country WHERE Code IN (SELECT CountryCode FROM countrylanguage WHERE Language = \"English\") AND Code IN (SELECT CountryCode FROM countrylanguage WHERE Language = \"French\")"
    },
    {
      "question": "What are the names of nations where both English and French are official languages?",
      "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\" AND T2.IsOfficial  =  \"T\""
    },
    {
      "question": "Give the names of countries with English and French as official languages.",
      "query": "SELECT DISTINCT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN countrylanguage AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.Language  =  'English' AND T2.IsOfficial  =  'T' AND T3.Language  =  'French' AND T3.IsOfficial  =  'T'"
    },
    {
      "question": "What is the number of distinct continents where Chinese is spoken?",
      "query": "SELECT COUNT(DISTINCT Continent) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE Language = 'Chinese'"
    },
    {
      "question": "How many continents speak Chinese?",
      "query": "SELECT COUNT(DISTINCT country.Continent) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = \"Chinese\""
    },
    {
      "question": "What are the regions that use English or Dutch?",
      "query": "SELECT DISTINCT Region FROM country WHERE Code IN (SELECT CountryCode FROM countrylanguage WHERE Language IN ('English', 'Dutch'))"
    },
    {
      "question": "Which regions speak Dutch or English?",
      "query": "SELECT DISTINCT Region FROM country WHERE Code IN (SELECT CountryCode FROM countrylanguage WHERE Language IN ('Dutch', 'English'))"
    },
    {
      "question": "What are the countries where either English or Dutch is the official language?",
      "query": "SELECT DISTINCT Name FROM country WHERE Code IN (SELECT CountryCode FROM countrylanguage WHERE Language = \"English\" AND IsOfficial = \"T\") OR Code IN (SELECT CountryCode FROM countrylanguage WHERE Language = \"Dutch\" AND IsOfficial = \"T\")"
    },
    {
      "question": "Which countries have either English or Dutch as an official language?",
      "query": "SELECT DISTINCT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.IsOfficial  =  \"T\" AND T2.Language IN (\"English\", \"Dutch\")"
    },
    {
      "question": "Which language is the most popular on the Asian continent?",
      "query": "SELECT Language FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode  =  T2.Code WHERE T2.Continent  =  \"Asia\" ORDER BY Percentage DESC LIMIT 1"
    },
    {
      "question": "What is the language that is used by the largest number of Asian nations?",
      "query": "SELECT Language FROM countrylanguage WHERE CountryCode IN (SELECT Code FROM country WHERE Continent = 'Asia') GROUP BY Language ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
      "question": "Which languages are spoken by only one country in republic governments?",
      "query": "SELECT DISTINCT cl.Language FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE c.GovernmentForm LIKE '%Republic%' AND cl.Language NOT IN (SELECT cl2.Language FROM country c2 JOIN countrylanguage cl2 ON c2.Code = cl2.CountryCode WHERE c2.GovernmentForm LIKE '%Republic%' AND c2.Code != c.Code) GROUP BY cl.Language HAVING COUNT(*) = 1"
    },
    {
      "question": "What languages are only used by a single country with a republic government?",
      "query": "SELECT DISTINCT cl.Language FROM countrylanguage AS cl JOIN country AS c ON cl.CountryCode = c.Code WHERE c.GovernmentForm = 'Republic' AND cl.Language NOT IN (SELECT cl2.Language FROM countrylanguage AS cl2 JOIN country AS c2 ON cl2.CountryCode = c2.Code WHERE c2.GovernmentForm = 'Republic' GROUP BY cl2.Language HAVING COUNT(DISTINCT c2.Code) > 1)"
    },
    {
      "question": "Find the city with the largest population that uses English.",
      "query": "SELECT T1.Name FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.Language = \"English\" ORDER BY T1.Population DESC LIMIT 1"
    },
    {
      "question": "What is the most populace city that speaks English?",
      "query": "SELECT T1.Name FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1"
    },
    {
      "question": "Find the name, population and expected life length of asian country with the largest area?",
      "query": "SELECT c.Name, c.Population, c.LifeExpectancy FROM country c WHERE c.Continent = 'Asia' ORDER BY c.SurfaceArea DESC LIMIT 1"
    },
    {
      "question": "What are the name, population, and life expectancy of the largest Asian country by land?",
      "query": "SELECT c.Name, c.Population, c.LifeExpectancy FROM country c WHERE c.Continent = 'Asia' ORDER BY c.SurfaceArea DESC LIMIT 1"
    },
    {
      "question": "What is average life expectancy in the countries where English is not the official language?",
      "query": "SELECT AVG(LifeExpectancy) FROM country WHERE Code IN (SELECT CountryCode FROM countrylanguage WHERE Language != 'English' AND IsOfficial = 'F')"
    },
    {
      "question": "Give the mean life expectancy of countries in which English is not the official language.",
      "query": "SELECT AVG(LifeExpectancy) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T')"
    },
    {
      "question": "What is the total number of people living in the nations that do not use English?",
      "query": "SELECT SUM(Population) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T')"
    },
    {
      "question": "How many people live in countries that do not speak English?",
      "query": "SELECT SUM(Population) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T')"
    },
    {
      "question": "What is the official language spoken in the country whose head of state is Beatrix?",
      "query": "SELECT Language FROM countrylanguage WHERE CountryCode = (SELECT Code FROM country WHERE HeadOfState = 'Beatrix' AND IsOfficial = 'T')"
    },
    {
      "question": "What is the official language used in the country the name of whose head of state is Beatrix.",
      "query": "SELECT cl.Language FROM countrylanguage AS cl JOIN country AS c ON cl.CountryCode = c.Code WHERE c.HeadOfState = 'Beatrix' AND cl.IsOfficial = 'T'"
    },
    {
      "question": "What is the total number of unique official languages spoken in the countries that are founded before 1930?",
      "query": "SELECT COUNT(DISTINCT Language) FROM countrylanguage WHERE CountryCode IN (SELECT Code FROM country WHERE IndepYear < 1930) AND IsOfficial = \"T\""
    },
    {
      "question": "For the countries founded before 1930, what is the total number of distinct official languages?",
      "query": "SELECT COUNT(DISTINCT Language) FROM countrylanguage WHERE CountryCode IN (SELECT Code FROM country WHERE IndepYear < 1930) AND IsOfficial = \"T\""
    },
    {
      "question": "What are the countries that have greater surface area than any country in Europe?",
      "query": "SELECT Name FROM country WHERE SurfaceArea > (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Europe')"
    },
    {
      "question": "Which countries have greater area than that of any country in Europe?",
      "query": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT MAX(SurfaceArea) FROM country WHERE Continent  =  \"Europe\")"
    },
    {
      "question": "What are the African countries that have a  population less than any country in Asia?",
      "query": "SELECT Name FROM country WHERE Continent = 'Africa' AND Population < (SELECT MIN(Population) FROM country WHERE Continent = 'Asia')"
    },
    {
      "question": "Which African countries have a smaller population than that of any country in Asia?",
      "query": "SELECT T1.Name FROM country AS T1 WHERE T1.Continent  =  'Africa' AND T1.Population  <  (SELECT MIN(Population) FROM country WHERE Continent  =  'Asia')"
    },
    {
      "question": "Which Asian countries have a population that is larger than any country in Africa?",
      "query": "SELECT c1.Name FROM country c1 WHERE c1.Continent = 'Asia' AND c1.Population > (SELECT MAX(c2.Population) FROM country c2 WHERE c2.Continent = 'Africa')"
    },
    {
      "question": "What are the Asian countries which have a population larger than that of any country in Africa?",
      "query": "SELECT Name FROM country WHERE Continent = \"Asia\" AND Population > (SELECT MAX(Population) FROM country WHERE Continent = \"Africa\")"
    },
    {
      "question": "What are the country codes for countries that do not speak English?",
      "query": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE Language != \"English\""
    },
    {
      "question": "Return the country codes for countries that do not speak English.",
      "query": "SELECT Code FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = \"English\" AND IsOfficial = \"T\")"
    },
    {
      "question": "What are the country codes of countries where people use languages other than English?",
      "query": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE Language != \"English\""
    },
    {
      "question": "Give the country codes for countries in which people speak langauges that are not English.",
      "query": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE Language != \"English\""
    },
    {
      "question": "What are the codes of the countries that do not speak English and whose government forms are not Republic?",
      "query": "SELECT Code FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language  =  \"English\" AND IsOfficial  =  \"T\") AND GovernmentForm NOT LIKE \"%Republic%\""
    },
    {
      "question": "Return the codes of countries that do not speak English and do not have Republics for governments.",
      "query": "SELECT Code FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English') AND GovernmentForm NOT LIKE '%Republic%'"
    },
    {
      "question": "Which cities are in European countries where English is not the official language?",
      "query": "SELECT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode  =  T2.Code JOIN countrylanguage AS T3 ON T2.Code  =  T3.CountryCode WHERE T2.Continent  =  \"Europe\" AND T3.Language  =  \"English\" AND T3.IsOfficial  =  \"F\""
    },
    {
      "question": "What are the names of cities in Europe for which English is not the official language?",
      "query": "SELECT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode  =  T2.Code JOIN countrylanguage AS T3 ON T2.Code  =  T3.CountryCode WHERE T2.Continent  =  \"Europe\" AND T3.Language  !=  \"English\" AND T3.IsOfficial  =  \"T\""
    },
    {
      "question": "Which unique cities are in Asian countries where Chinese is the official language?",
      "query": "SELECT DISTINCT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = 'Asia' AND countrylanguage.Language = 'Chinese' AND countrylanguage.IsOfficial = 'T'"
    },
    {
      "question": "Return the different names of cities that are in Asia and for which Chinese is the official language.",
      "query": "SELECT DISTINCT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = 'Asia' AND countrylanguage.Language = 'Chinese' AND countrylanguage.IsOfficial = 'T'"
    },
    {
      "question": "What are the name, independence year, and surface area of the country with the smallest population?",
      "query": "SELECT Name, IndepYear, SurfaceArea FROM country ORDER BY Population ASC LIMIT 1"
    },
    {
      "question": "Give the name, year of independence, and surface area of the country that has the lowest population.",
      "query": "SELECT Name, IndepYear, SurfaceArea FROM country ORDER BY Population ASC LIMIT 1"
    },
    {
      "question": "What are the population, name and leader of the country with the largest area?",
      "query": "SELECT T1.Population, T1.Name, T1.HeadOfState FROM country AS T1 WHERE T1.SurfaceArea = (SELECT MAX(SurfaceArea) FROM country)"
    },
    {
      "question": "Give the name, population, and head of state for the country that has the largest area.",
      "query": "SELECT Name, Population, HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1"
    },
    {
      "question": "Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages.",
      "query": "SELECT T1.Name, COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Name HAVING COUNT(T2.Language) >= 3"
    },
    {
      "question": "What are the names of countries that speak more than 2 languages, as well as how many languages they speak?",
      "query": "SELECT T1.Name , COUNT(*) AS num_languages FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Name HAVING num_languages > 2"
    },
    {
      "question": "Find the number of cities in each district whose population is greater than the average population of cities?",
      "query": "SELECT district, COUNT(*) FROM city WHERE population > (SELECT AVG(population) FROM city) GROUP BY district"
    },
    {
      "question": "How many cities in each district have a population that is above the average population across all cities?",
      "query": "SELECT district, COUNT(*) FROM city WHERE population > (SELECT AVG(population) FROM city) GROUP BY district"
    },
    {
      "question": "Find the government form name and total population for each government form whose average life expectancy is longer than 72.",
      "query": "SELECT governmentform, SUM(population) FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE isofficial = 'T' GROUP BY countrycode HAVING AVG(lifeexpectancy) > 72) GROUP BY governmentform"
    },
    {
      "question": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?",
      "query": "SELECT governmentform, SUM(population) FROM country WHERE governmentform IN (SELECT governmentform FROM country GROUP BY governmentform HAVING AVG(lifeexpectancy) > 72) GROUP BY governmentform"
    },
    {
      "question": "Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?",
      "query": "SELECT continent, AVG(lifeexpectancy), SUM(population) FROM country WHERE continent IN (SELECT continent FROM country GROUP BY continent HAVING AVG(lifeexpectancy) < 72) GROUP BY continent"
    },
    {
      "question": "What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72?",
      "query": "SELECT c.Continent, SUM(c.Population), AVG(c.LifeExpectancy) FROM country c WHERE c.Continent IN (SELECT c2.Continent FROM country c2 GROUP BY c2.Continent HAVING AVG(c2.LifeExpectancy) < 72) GROUP BY c.Continent"
    },
    {
      "question": "What are the names and areas of countries with the top 5 largest area?",
      "query": "SELECT Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5"
    },
    {
      "question": "Return the names and surface areas of the 5 largest countries.",
      "query": "SELECT Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5"
    },
    {
      "question": "What are names of countries with the top 3 largest population?",
      "query": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3"
    },
    {
      "question": "Return the names of the 3 most populated countries.",
      "query": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3"
    },
    {
      "question": "What are the names of the nations with the 3 lowest populations?",
      "query": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3"
    },
    {
      "question": "Return the names of the 3 countries with the fewest people.",
      "query": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3"
    },
    {
      "question": "how many countries are in Asia?",
      "query": "SELECT count(*) FROM country WHERE Continent = 'Asia'"
    },
    {
      "question": "Count the number of countries in Asia.",
      "query": "SELECT count(*) FROM country WHERE Continent = \"Asia\""
    },
    {
      "question": "What are the names of the countries that are in the continent of Europe and have a population of 80000?",
      "query": "SELECT Name FROM country WHERE Continent  =  \"Europe\" AND Population  =  80000"
    },
    {
      "question": "Give the names of countries that are in Europe and have a population equal to 80000.",
      "query": "SELECT Name FROM country WHERE Continent  =  \"Europe\" AND Population  =  80000"
    },
    {
      "question": "What is the total population and average area of countries in the continent of North America whose area is bigger than 3000?",
      "query": "SELECT SUM(Population), AVG(SurfaceArea) FROM country WHERE Continent = 'North America' AND SurfaceArea > 3000"
    },
    {
      "question": "Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000.",
      "query": "SELECT SUM(Population), AVG(SurfaceArea) FROM country WHERE Continent = \"North America\" AND SurfaceArea > 3000"
    },
    {
      "question": "What are the cities whose population is between 160000 and 900000?",
      "query": "SELECT Name FROM city WHERE Population BETWEEN 160000 AND 900000"
    },
    {
      "question": "Return the names of cities that have a population between 160000 and 900000.",
      "query": "SELECT Name FROM city WHERE Population BETWEEN 160000 AND 900000"
    },
    {
      "question": "Which language is spoken by the largest number of countries?",
      "query": "SELECT Language FROM countrylanguage GROUP BY Language ORDER BY COUNT(DISTINCT CountryCode) DESC LIMIT 1"
    },
    {
      "question": "Give the language that is spoken in the most countries.",
      "query": "SELECT Language FROM countrylanguage GROUP BY Language ORDER BY COUNT(DISTINCT CountryCode) DESC LIMIT 1"
    },
    {
      "question": "What is the language spoken by the largest percentage of people in each country?",
      "query": "SELECT c.Name, cl.Language FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Percentage = (SELECT MAX(Percentage) FROM countrylanguage WHERE CountryCode = c.Code) GROUP BY c.Name"
    },
    {
      "question": "What are the country codes of the different countries, and what are the languages spoken by the greatest percentage of people for each?",
      "query": "SELECT T1.Code, T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Percentage = (SELECT MAX(Percentage) FROM countrylanguage WHERE CountryCode = T1.Code) GROUP BY T1.Code"
    },
    {
      "question": "What is the total number of countries where Spanish is spoken by the largest percentage of people?",
      "query": "SELECT COUNT(*) FROM (SELECT CountryCode FROM countrylanguage WHERE Language = 'Spanish' AND Percentage = (SELECT MAX(Percentage) FROM countrylanguage WHERE Language = 'Spanish') GROUP BY CountryCode) AS T1"
    },
    {
      "question": "Count the number of countries for which Spanish is the predominantly spoken language.",
      "query": "SELECT count(*) FROM countrylanguage WHERE Language = \"Spanish\" AND IsOfficial = \"T\""
    },
    {
      "question": "What are the codes of countries where Spanish is spoken by the largest percentage of people?",
      "query": "SELECT CountryCode FROM countrylanguage WHERE Language  =  \"Spanish\" ORDER BY Percentage DESC LIMIT 1"
    },
    {
      "question": "Return the codes of countries for which Spanish is the predominantly spoken language.",
      "query": "SELECT CountryCode FROM countrylanguage WHERE Language = 'Spanish' AND IsOfficial = 'T' AND Percentage > 50"
    }
  ],
  "orchestra": [
    {
      "question": "How many conductors are there?",
      "query": "SELECT count(*) FROM conductor"
    },
    {
      "question": "Count the number of conductors.",
      "query": "SELECT count(*) FROM conductor"
    },
    {
      "question": "List the names of conductors in ascending order of age.",
      "query": "SELECT Name FROM conductor ORDER BY Age ASC"
    },
    {
      "question": "What are the names of conductors, ordered by age?",
      "query": "SELECT Name FROM conductor ORDER BY Age ASC"
    },
    {
      "question": "What are the names of conductors whose nationalities are not \"USA\"?",
      "query": "SELECT Name FROM conductor WHERE Nationality != 'USA'"
    },
    {
      "question": "Return the names of conductors that do not have the nationality \"USA\".",
      "query": "SELECT Name FROM conductor WHERE Nationality != 'USA'"
    },
    {
      "question": "What are the record companies of orchestras in descending order of years in which they were founded?",
      "query": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC"
    },
    {
      "question": "Return the record companies of orchestras, sorted descending by the years in which they were founded.",
      "query": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC"
    },
    {
      "question": "What is the average attendance of shows?",
      "query": "SELECT avg(Attendance) FROM show"
    },
    {
      "question": "Return the average attendance across all shows.",
      "query": "SELECT avg(Attendance) FROM show"
    },
    {
      "question": "What are the maximum and minimum share of performances whose type is not \"Live final\".",
      "query": "SELECT max(Share) ,  min(Share) FROM performance WHERE Type <> \"Live final\""
    },
    {
      "question": "Return the maximum and minimum shares for performances that do not have the type \"Live final\".",
      "query": "SELECT MAX(Share), MIN(Share) FROM performance WHERE Type <> \"Live final\""
    },
    {
      "question": "How many different nationalities do conductors have?",
      "query": "SELECT count(DISTINCT Nationality) FROM conductor"
    },
    {
      "question": "Count the number of different nationalities of conductors.",
      "query": "SELECT count(DISTINCT Nationality) FROM conductor"
    },
    {
      "question": "List names of conductors in descending order of years of work.",
      "query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC"
    },
    {
      "question": "What are the names of conductors, sorted descending by the number of years they have worked?",
      "query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC"
    },
    {
      "question": "List the name of the conductor with the most years of work.",
      "query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1"
    },
    {
      "question": "What is the name of the conductor who has worked the greatest number of years?",
      "query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1"
    },
    {
      "question": "Show the names of conductors and the orchestras they have conducted.",
      "query": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID"
    },
    {
      "question": "What are the names of conductors as well as the corresonding orchestras that they have conducted?",
      "query": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID"
    },
    {
      "question": "Show the names of conductors that have conducted more than one orchestras.",
      "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1"
    },
    {
      "question": "What are the names of conductors who have conducted at more than one orchestra?",
      "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1"
    },
    {
      "question": "Show the name of the conductor that has conducted the most number of orchestras.",
      "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
      "question": "What is the name of the conductor who has conducted the most orchestras?",
      "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
      "question": "Please show the name of the conductor that has conducted orchestras founded after 2008.",
      "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE T2.Year_of_Founded  >  2008"
    },
    {
      "question": "What are the names of conductors who have conducted orchestras founded after the year 2008?",
      "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE T2.Year_of_Founded  >  2008"
    },
    {
      "question": "Please show the different record companies and the corresponding number of orchestras.",
      "query": "SELECT Record_Company, COUNT(DISTINCT Orchestra_ID) FROM orchestra GROUP BY Record_Company"
    },
    {
      "question": "How many orchestras does each record company manage?",
      "query": "SELECT T2.Record_Company, COUNT(DISTINCT T1.Orchestra_ID) FROM orchestra AS T1 JOIN conductor AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T2.Record_Company"
    },
    {
      "question": "Please show the record formats of orchestras in ascending order of count.",
      "query": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC"
    },
    {
      "question": "What are the major record formats of orchestras, sorted by their frequency?",
      "query": "SELECT Major_Record_Format, COUNT(*) FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) DESC"
    },
    {
      "question": "List the record company shared by the most number of orchestras.",
      "query": "SELECT T2.Record_Company FROM orchestra AS T1 JOIN orchestra AS T2 ON T1.Record_Company  =  T2.Record_Company GROUP BY T2.Record_Company ORDER BY COUNT(DISTINCT T1.Orchestra_ID) DESC LIMIT 1"
    },
    {
      "question": "What is the record company used by the greatest number of orchestras?",
      "query": "SELECT T1.Record_Company FROM orchestra AS T1 GROUP BY T1.Record_Company ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
      "question": "List the names of orchestras that have no performance.",
      "query": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)"
    },
    {
      "question": "What are the orchestras that do not have any performances?",
      "query": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)"
    },
    {
      "question": "Show the record companies shared by orchestras founded before 2003 and after 2003.",
      "query": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003"
    },
    {
      "question": "What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003?",
      "query": "SELECT T1.Record_Company FROM orchestra AS T1 JOIN orchestra AS T2 ON T1.Record_Company  =  T2.Record_Company WHERE T1.Year_of_Founded < 2003 AND T2.Year_of_Founded > 2003"
    },
    {
      "question": "Find the number of orchestras whose record format is \"CD\" or \"DVD\".",
      "query": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\""
    },
    {
      "question": "Count the number of orchestras that have CD or DVD as their record format.",
      "query": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format IN ('CD', 'DVD')"
    },
    {
      "question": "Show the years in which orchestras that have given more than one performance are founded.",
      "query": "SELECT T1.Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T1.Orchestra_ID HAVING COUNT(*)  >  1"
    },
    {
      "question": "What are years of founding for orchestras that have had more than a single performance?",
      "query": "SELECT T2.Year_of_Founded FROM orchestra AS T2 JOIN performance AS T1 ON T1.Orchestra_ID = T2.Orchestra_ID GROUP BY T1.Orchestra_ID HAVING COUNT(*) > 1"
    }
  ],
  "network_1": [
    {
      "question": "How many high schoolers are there?",
      "query": "SELECT count(*) FROM Highschooler"
    },
    {
      "question": "Count the number of high schoolers.",
      "query": "SELECT count(*) FROM Highschooler"
    },
    {
      "question": "Show the names and grades of each high schooler.",
      "query": "SELECT name, grade FROM Highschooler"
    },
    {
      "question": "What are the names and grades for each high schooler?",
      "query": "SELECT name, grade FROM Highschooler"
    },
    {
      "question": "Show all the grades of the high schoolers.",
      "query": "SELECT grade FROM Highschooler"
    },
    {
      "question": "What is the grade of each high schooler?",
      "query": "SELECT name, grade FROM Highschooler"
    },
    {
      "question": "What grade is Kyle in?",
      "query": "SELECT grade FROM Highschooler WHERE name  =  'Kyle'"
    },
    {
      "question": "Return the grade for the high schooler named Kyle.",
      "query": "SELECT grade FROM Highschooler WHERE name  =  \"Kyle\""
    },
    {
      "question": "Show the names of all high schoolers in grade 10.",
      "query": "SELECT name FROM Highschooler WHERE grade  =  10"
    },
    {
      "question": "What are the names of all high schoolers in grade 10?",
      "query": "SELECT name FROM Highschooler WHERE grade  =  10"
    },
    {
      "question": "Show the ID of the high schooler named Kyle.",
      "query": "SELECT ID FROM Highschooler WHERE name  =  \"Kyle\""
    },
    {
      "question": "What is Kyle's id?",
      "query": "SELECT ID FROM Highschooler WHERE name  =  'Kyle'"
    },
    {
      "question": "How many high schoolers are there in grade 9 or 10?",
      "query": "SELECT count(*) FROM Highschooler WHERE grade  IN (9, 10)"
    },
    {
      "question": "Count the number of high schoolers in grades 9 or 10.",
      "query": "SELECT count(*) FROM Highschooler WHERE grade  <=  10"
    },
    {
      "question": "Show the number of high schoolers for each grade.",
      "query": "SELECT grade, count(*) FROM Highschooler GROUP BY grade"
    },
    {
      "question": "How many high schoolers are in each grade?",
      "query": "SELECT grade, count(*) FROM Highschooler GROUP BY grade"
    },
    {
      "question": "Which grade has the most high schoolers?",
      "query": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1"
    },
    {
      "question": "Return the grade that has the greatest number of high schoolers.",
      "query": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1"
    },
    {
      "question": "Show me all grades that have at least 4 students.",
      "query": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*) >= 4"
    },
    {
      "question": "Which grades have 4 or more high schoolers?",
      "query": "SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(*) >= 4"
    },
    {
      "question": "Show the student IDs and numbers of friends corresponding to each.",
      "query": "SELECT student_id, COUNT(friend_id) FROM Friend GROUP BY student_id"
    },
    {
      "question": "How many friends does each student have?",
      "query": "SELECT student_id, COUNT(friend_id) FROM Friend GROUP BY student_id"
    },
    {
      "question": "Show the names of high school students and their corresponding number of friends.",
      "query": "SELECT Highschooler.name, COUNT(Friend.friend_id) AS num_friends FROM Highschooler LEFT JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.ID ORDER BY Highschooler.name ASC"
    },
    {
      "question": "What are the names of the high schoolers and how many friends does each have?",
      "query": "SELECT Highschooler.name, COUNT(Friend.friend_id) FROM Highschooler LEFT JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.ID"
    },
    {
      "question": "What is the name of the high schooler who has the greatest number of friends?",
      "query": "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID  =  T2.student_id GROUP BY T1.ID ORDER BY count(*) DESC LIMIT 1"
    },
    {
      "question": "Return the name of the high school student with the most friends.",
      "query": "SELECT name FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend GROUP BY student_id ORDER BY COUNT(*) DESC LIMIT 1)"
    },
    {
      "question": "Show the names of high schoolers who have at least 3 friends.",
      "query": "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID  =  T2.student_id GROUP BY T1.ID HAVING count(*) >= 3"
    },
    {
      "question": "What are the names of high schoolers who have 3 or more friends?",
      "query": "SELECT name FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend GROUP BY student_id HAVING count(*) >= 3)"
    },
    {
      "question": "Show the names of all of the high schooler Kyle's friends.",
      "query": "SELECT T2.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID  =  T2.student_id WHERE T1.name  =  \"Kyle\""
    },
    {
      "question": "Return the names of friends of the high school student Kyle.",
      "query": "SELECT T2.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID  =  T2.student_id WHERE T1.name  =  'Kyle'"
    },
    {
      "question": "How many friends does the high school student Kyle have?",
      "query": "SELECT count(friend_id) FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle')"
    },
    {
      "question": "Count the number of friends Kyle has.",
      "query": "SELECT count(*) FROM Friend WHERE student_id  =  (SELECT ID FROM Highschooler WHERE name  =  \"Kyle\")"
    },
    {
      "question": "Show ids of all students who do not have any friends.",
      "query": "SELECT ID FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend UNION SELECT friend_id FROM Friend)"
    },
    {
      "question": "What are the ids of high school students who do not have friends?",
      "query": "SELECT ID FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend) AND ID NOT IN (SELECT friend_id FROM Friend)"
    },
    {
      "question": "Show names of all high school students who do not have any friends.",
      "query": "SELECT name FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)"
    },
    {
      "question": "What are the names of students who have no friends?",
      "query": "SELECT name FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend) AND ID NOT IN (SELECT friend_id FROM Friend)"
    },
    {
      "question": "Show the ids of high schoolers who have friends and are also liked by someone else.",
      "query": "SELECT DISTINCT student_id FROM Friend WHERE student_id IN (SELECT student_id FROM Likes)"
    },
    {
      "question": "What are the ids of students who both have friends and are liked?",
      "query": "SELECT student_id FROM Friend INTERSECT SELECT student_id FROM Likes"
    },
    {
      "question": "Show name of all students who have some friends and also are liked by someone else.",
      "query": "SELECT DISTINCT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID  =  T2.student_id JOIN Likes AS T3 ON T1.ID  =  T3.student_id WHERE T1.ID IN (SELECT friend_id FROM Friend) AND T1.ID IN (SELECT liked_id FROM Likes WHERE liked_id <> student_id)"
    },
    {
      "question": "What are the names of high schoolers who both have friends and are liked?",
      "query": "SELECT DISTINCT h.name FROM Highschooler h JOIN Friend f ON h.ID = f.student_id JOIN Likes l ON h.ID = l.student_id"
    },
    {
      "question": "Count the number of likes for each student id.",
      "query": "SELECT student_id, count(*) FROM likes GROUP BY student_id"
    },
    {
      "question": "How many likes correspond to each student id?",
      "query": "SELECT student_id, count(*) FROM Likes GROUP BY student_id"
    },
    {
      "question": "Show the names of high schoolers who have likes, and numbers of likes for each.",
      "query": "SELECT T1.name, COUNT(T2.liked_id) FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.student_id GROUP BY T1.ID HAVING COUNT(T2.liked_id) > 0"
    },
    {
      "question": "What are the names of high schoolers who have likes, and how many likes does each have?",
      "query": "SELECT Highschooler.name, COUNT(Likes.liked_id) FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Highschooler.ID HAVING COUNT(Likes.liked_id) > 0"
    },
    {
      "question": "What is the name of the high schooler who has the greatest number of likes?",
      "query": "SELECT name FROM Highschooler WHERE ID IN (SELECT student_id FROM Likes GROUP BY student_id ORDER BY count(*) DESC LIMIT 1)"
    },
    {
      "question": "Give the name of the student with the most likes.",
      "query": "SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID  =  T2.student_id GROUP BY T1.ID ORDER BY count(*) DESC LIMIT 1"
    },
    {
      "question": "Show the names of students who have at least 2 likes.",
      "query": "SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID  =  T2.student_id GROUP BY T1.ID HAVING count(*)  >=  2"
    },
    {
      "question": "What are the names of students who have 2 or more likes?",
      "query": "SELECT name FROM Highschooler WHERE ID IN (SELECT student_id FROM Likes GROUP BY student_id HAVING count(*) >= 2)"
    },
    {
      "question": "Show the names of students who have a grade higher than 5 and have at least 2 friends.",
      "query": "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID  =  T2.student_id WHERE T1.grade  >  5 GROUP BY T1.ID HAVING count(*)  >=  2"
    },
    {
      "question": "What are the names of high schoolers who have a grade of over 5 and have 2 or more friends?",
      "query": "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID  =  T2.student_id WHERE T1.grade > 5 GROUP BY T1.ID HAVING count(*) >= 2"
    },
    {
      "question": "How many likes does Kyle have?",
      "query": "SELECT count(*) FROM Likes WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle')"
    },
    {
      "question": "Return the number of likes that the high schooler named Kyle has.",
      "query": "SELECT count(*) FROM Likes WHERE student_id IN (SELECT ID FROM Highschooler WHERE name  =  \"Kyle\")"
    },
    {
      "question": "Find the average grade of all students who have some friends.",
      "query": "SELECT AVG(grade) FROM Highschooler WHERE ID IN (SELECT DISTINCT student_id FROM Friend)"
    },
    {
      "question": "What is the average grade of students who have friends?",
      "query": "SELECT avg(grade) FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend)"
    },
    {
      "question": "Find the minimum grade of students who have no friends.",
      "query": "SELECT MIN(grade) FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend UNION SELECT friend_id FROM Friend)"
    },
    {
      "question": "What is the lowest grade of students who do not have any friends?",
      "query": "SELECT MIN(grade) FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)"
    }
  ],
  "dog_kennels": [
    {
      "question": "Which states have both owners and professionals living there?",
      "query": "SELECT state FROM (SELECT DISTINCT state FROM owners) AS T1 INNER JOIN (SELECT DISTINCT state FROM professionals) AS T2 ON T1.state = T2.state"
    },
    {
      "question": "Find the states where both owners and professionals live.",
      "query": "SELECT state FROM Owners WHERE state IN (SELECT state FROM Professionals) GROUP BY state HAVING count(*) > 0;"
    },
    {
      "question": "What is the average age of the dogs who have gone through any treatments?",
      "query": "SELECT AVG(age) FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments)"
    },
    {
      "question": "Find the average age of the dogs who went through treatments.",
      "query": "SELECT avg(age) FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments)"
    },
    {
      "question": "Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone.",
      "query": "SELECT professional_id, last_name, cell_number FROM Professionals WHERE state = 'Indiana' OR professional_id IN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(*) > 2)"
    },
    {
      "question": "Find the id, last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments.",
      "query": "SELECT professional_id, last_name, cell_number FROM Professionals WHERE state = 'Indiana' OR professional_id IN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(*) > 2)"
    },
    {
      "question": "Which dogs have not cost their owner more than 1000 for treatment ? List the dog names.",
      "query": "SELECT name FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments GROUP BY dog_id HAVING SUM(cost_of_treatment) > 1000)"
    },
    {
      "question": "What are the names of the dogs for which the owner has not spend more than 1000 for treatment?",
      "query": "SELECT T1.name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  = T2.owner_id JOIN Treatments AS T3 ON T1.dog_id  = T3.dog_id WHERE T2.owner_id NOT IN (SELECT T2.owner_id FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  = T2.owner_id JOIN Treatments AS T3 ON T1.dog_id  = T3.dog_id GROUP BY T2.owner_id HAVING SUM(cost_of_treatment) > 1000)"
    },
    {
      "question": "Which first names are used for professionals or owners but are not used as dog names?",
      "query": "SELECT DISTINCT T1.first_name FROM (SELECT first_name FROM owners UNION SELECT first_name FROM professionals) AS T1 LEFT JOIN dogs AS T2 ON T1.first_name = T2.name WHERE T2.name IS NULL"
    },
    {
      "question": "Find the first names that are used for professionals or owners but are not used as dog names.",
      "query": "SELECT DISTINCT T1.first_name FROM (SELECT first_name FROM owners UNION SELECT first_name FROM professionals) AS T1 LEFT JOIN dogs AS T2 ON T1.first_name = T2.name WHERE T2.name IS NULL"
    },
    {
      "question": "Which professional did not operate any treatment on dogs? List the professional's id, role and email.",
      "query": "SELECT professional_id, role_code, email_address FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments)"
    },
    {
      "question": "Give me the id, role and email of the professionals who did not perform any treatment on dogs.",
      "query": "SELECT professional_id, role_code, email_address FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments)"
    },
    {
      "question": "Which owner owns the most dogs? List the owner id, first name and last name.",
      "query": "SELECT T1.owner_id, T1.first_name, T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY T1.owner_id ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
      "question": "Return the owner id, first name and last name of the owner who has the most dogs.",
      "query": "SELECT T1.owner_id, T1.first_name, T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
      "question": "Which professionals have done at least two treatments? List the professional's id, role, and first name.",
      "query": "SELECT professional_id, role_code, first_name FROM Professionals WHERE professional_id IN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(*) >= 2)"
    },
    {
      "question": "What are the id, role, and first name of the professionals who have performed two or more treatments?",
      "query": "SELECT professional_id, role_code, first_name FROM Professionals WHERE professional_id IN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(*) >= 2)"
    },
    {
      "question": "What is the name of the breed with the most dogs?",
      "query": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1;"
    },
    {
      "question": "Which breed do the most dogs have? Give me the breed name.",
      "query": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1;"
    },
    {
      "question": "Which owner has paid for the most treatments on his or her dogs? List the owner id and last name.",
      "query": "SELECT T1.owner_id, T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id ORDER BY SUM(T3.cost_of_treatment) DESC LIMIT 1"
    },
    {
      "question": "Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs.",
      "query": "SELECT T1.owner_id, T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id ORDER BY SUM(T3.cost_of_treatment) DESC LIMIT 1"
    },
    {
      "question": "What is the description of the treatment type that costs the least money in total?",
      "query": "SELECT T1.treatment_type_description FROM Treatment_Types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1"
    },
    {
      "question": "Give me the description of the treatment type whose total cost is the lowest.",
      "query": "SELECT treatment_type_description FROM Treatment_Types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1"
    },
    {
      "question": "Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code.",
      "query": "SELECT T1.owner_id, T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id ORDER BY SUM(T3.cost_of_treatment) DESC LIMIT 1"
    },
    {
      "question": "Find the owner id and zip code of the owner who spent the most money in total for his or her dogs.",
      "query": "SELECT T1.owner_id, T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id ORDER BY SUM(T3.cost_of_treatment) DESC LIMIT 1"
    },
    {
      "question": "Which professionals have done at least two types of treatments? List the professional id and cell phone.",
      "query": "SELECT T1.professional_id ,  T1.cell_number FROM professionals AS T1 JOIN treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(DISTINCT T2.treatment_type_code)  >=  2"
    },
    {
      "question": "Find the id and cell phone of the professionals who operate two or more types of treatments.",
      "query": "SELECT professional_id, cell_number FROM Professionals WHERE professional_id IN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(DISTINCT treatment_type_code) >= 2)"
    },
    {
      "question": "What are the first name and last name of the professionals who have done treatment with cost below average?",
      "query": "SELECT first_name, last_name FROM Professionals WHERE professional_id IN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING AVG(cost_of_treatment) < (SELECT AVG(cost_of_treatment) FROM Treatments))"
    },
    {
      "question": "Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names.",
      "query": "SELECT first_name, last_name FROM Professionals WHERE professional_id IN (SELECT professional_id FROM Treatments WHERE cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments))"
    },
    {
      "question": "List the date of each treatment, together with the first name of the professional who operated it.",
      "query": "SELECT T1.date_of_treatment, T2.first_name FROM treatments AS T1 JOIN professionals AS T2 ON T1.professional_id = T2.professional_id"
    },
    {
      "question": "What are the date and the operating professional's first name of each treatment?",
      "query": "SELECT date_of_treatment, first_name FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id"
    },
    {
      "question": "List the cost of each treatment and the corresponding treatment type description.",
      "query": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code"
    },
    {
      "question": "What are the cost and treatment type description of each treatment?",
      "query": "SELECT T1.cost_of_treatment, T2.treatment_type_description FROM Treatments AS T1 JOIN Treatment_Types AS T2 ON T1.treatment_type_code = T2.treatment_type_code"
    },
    {
      "question": "List each owner's first name, last name, and the size of his for her dog.",
      "query": "SELECT T1.first_name ,  T1.last_name ,  T3.size_description FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Sizes AS T3 ON T2.size_code  =  T3.size_code"
    },
    {
      "question": "What are each owner's first name, last name, and the size of their dog?",
      "query": "SELECT T1.first_name ,  T1.last_name ,  T3.size_description FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Sizes AS T3 ON T2.size_code  =  T3.size_code"
    },
    {
      "question": "List pairs of the owner's first name and the dogs's name.",
      "query": "SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id"
    },
    {
      "question": "What are each owner's first name and their dogs's name?",
      "query": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id ORDER BY T1.first_name"
    },
    {
      "question": "List the names of the dogs of the rarest breed and the treatment dates of them.",
      "query": "SELECT T1.name, T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = (SELECT breed_code FROM Breeds GROUP BY breed_code ORDER BY COUNT(*) ASC LIMIT 1)"
    },
    {
      "question": "Which dogs are of the rarest breed? Show their names and treatment dates.",
      "query": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code IN (SELECT breed_code FROM Breeds GROUP BY breed_code HAVING count(*) = 1) ORDER BY T2.date_of_treatment ASC"
    },
    {
      "question": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.",
      "query": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'"
    },
    {
      "question": "Find the first names of owners living in Virginia and the names of dogs they own.",
      "query": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state = \"Virginia\";"
    },
    {
      "question": "What are the arriving date and the departing date of the dogs who have gone through a treatment?",
      "query": "SELECT T1.date_arrived ,  T1.date_departed FROM dogs AS T1 JOIN treatments AS T2 ON T1.dog_id  =  T2.dog_id"
    },
    {
      "question": "Find the arriving date and the departing date of the dogs that received a treatment.",
      "query": "SELECT T1.date_arrived ,  T1.date_departed FROM dogs AS T1 JOIN treatments AS T2 ON T1.dog_id  =  T2.dog_id"
    },
    {
      "question": "List the last name of the owner owning the youngest dog.",
      "query": "SELECT last_name FROM Owners WHERE owner_id = (SELECT owner_id FROM Dogs ORDER BY date_of_birth DESC LIMIT 1)"
    },
    {
      "question": "Who owns the youngest dog? Give me his or her last name.",
      "query": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T2.date_adopted IS NULL ORDER BY T2.date_of_birth ASC LIMIT 1"
    },
    {
      "question": "List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin.",
      "query": "SELECT email_address FROM Professionals WHERE state = 'Hawaii' OR state = 'Wisconsin'"
    },
    {
      "question": "What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin?",
      "query": "SELECT email_address FROM Professionals WHERE state = 'Hawaii' OR state = 'Wisconsin'"
    },
    {
      "question": "What are the arriving date and the departing date of all the dogs?",
      "query": "SELECT date_arrived, date_departed FROM Dogs"
    },
    {
      "question": "List the arrival date and the departure date for all the dogs.",
      "query": "SELECT date_arrived, date_departed FROM Dogs"
    },
    {
      "question": "How many dogs went through any treatments?",
      "query": "SELECT count(DISTINCT dog_id) FROM treatments"
    },
    {
      "question": "Count the number of dogs that went through a treatment.",
      "query": "SELECT count(DISTINCT dog_id) FROM treatments"
    },
    {
      "question": "How many professionals have performed any treatment to dogs?",
      "query": "SELECT count(DISTINCT professional_id) FROM treatments"
    },
    {
      "question": "Find the number of professionals who have ever treated dogs.",
      "query": "SELECT count(DISTINCT professional_id) FROM treatments"
    },
    {
      "question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.",
      "query": "SELECT role_code, street, city, state FROM Professionals WHERE city LIKE '%West%'"
    },
    {
      "question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.",
      "query": "SELECT role_code, street, city, state FROM Professionals WHERE city LIKE '%West%'"
    },
    {
      "question": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.",
      "query": "SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%'"
    },
    {
      "question": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.",
      "query": "SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%'"
    },
    {
      "question": "How many dogs have an age below the average?",
      "query": "SELECT count(*) FROM Dogs WHERE age < (SELECT avg(age) FROM Dogs)"
    },
    {
      "question": "Count the number of dogs of an age below the average.",
      "query": "SELECT count(*) FROM Dogs WHERE age  <  (SELECT avg(age) FROM Dogs)"
    },
    {
      "question": "How much does the most recent treatment cost?",
      "query": "SELECT cost_of_treatment FROM treatments ORDER BY date_of_treatment DESC LIMIT 1"
    },
    {
      "question": "Show me the cost of the most recently performed treatment.",
      "query": "SELECT cost_of_treatment FROM treatments ORDER BY date_of_treatment DESC LIMIT 1"
    },
    {
      "question": "How many dogs have not gone through any treatment?",
      "query": "SELECT count(*) FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments)"
    },
    {
      "question": "Tell me the number of dogs that have not received any treatment.",
      "query": "SELECT count(*) FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments)"
    },
    {
      "question": "How many owners temporarily do not have any dogs?",
      "query": "SELECT count(*) FROM Owners WHERE owner_id NOT IN (SELECT owner_id FROM Dogs WHERE date_departed IS NULL)"
    },
    {
      "question": "Find the number of owners who do not own any dogs at this moment.",
      "query": "SELECT count(*) FROM Owners WHERE owner_id NOT IN (SELECT owner_id FROM Dogs WHERE date_departed IS NULL)"
    },
    {
      "question": "How many professionals did not operate any treatment on dogs?",
      "query": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments)"
    },
    {
      "question": "Find the number of professionals who have not treated any dogs.",
      "query": "SELECT count(*) FROM professionals WHERE professional_id NOT IN (SELECT professional_id FROM treatments)"
    },
    {
      "question": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.",
      "query": "SELECT name, age, weight FROM Dogs WHERE abandoned_yn = 1"
    },
    {
      "question": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.",
      "query": "SELECT name, age, weight FROM Dogs WHERE abandoned_yn = 1"
    },
    {
      "question": "What is the average age of all the dogs?",
      "query": "SELECT avg(age) FROM Dogs"
    },
    {
      "question": "Compute the average age of all the dogs.",
      "query": "SELECT AVG(age) FROM Dogs"
    },
    {
      "question": "What is the age of the oldest dog?",
      "query": "SELECT MAX(age) FROM Dogs"
    },
    {
      "question": "Tell me the age of the oldest dog.",
      "query": "SELECT MAX(age) FROM Dogs"
    },
    {
      "question": "How much does each charge type costs? List both charge type and amount.",
      "query": "SELECT charge_type, charge_amount FROM Charges"
    },
    {
      "question": "List each charge type and its amount.",
      "query": "SELECT charge_type, charge_amount FROM Charges"
    },
    {
      "question": "How much does the most expensive charge type costs?",
      "query": "SELECT charge_amount FROM charges ORDER BY charge_amount DESC LIMIT 1"
    },
    {
      "question": "What is the charge amount of the most expensive charge type?",
      "query": "SELECT charge_amount FROM charges ORDER BY charge_amount DESC LIMIT 1"
    },
    {
      "question": "List the email, cell phone and home phone of all the professionals.",
      "query": "SELECT email_address, cell_number, home_phone FROM Professionals"
    },
    {
      "question": "What are the email, cell phone and home phone of each professional?",
      "query": "SELECT email_address, cell_number, home_phone FROM Professionals"
    },
    {
      "question": "What are all the possible breed type and size type combinations?",
      "query": "SELECT breed_name, size_description FROM Breeds, Sizes"
    },
    {
      "question": "Find the distinct breed type and size type combinations for dogs.",
      "query": "SELECT DISTINCT breed_code, size_code FROM Dogs;"
    },
    {
      "question": "List the first name of all the professionals along with the description of the treatment they have done.",
      "query": "SELECT T1.first_name ,  T2.treatment_type_description FROM professionals AS T1 JOIN treatments AS T2 ON T1.professional_id  =  T2.professional_id"
    },
    {
      "question": "What are each professional's first name and description of the treatment they have performed?",
      "query": "SELECT T1.first_name ,  T2.treatment_type_description FROM professionals AS T1 JOIN treatments AS T2 ON T1.professional_id  =  T2.professional_id"
    }
  ],
  "singer": [
    {
      "question": "How many singers are there?",
      "query": "SELECT count(*) FROM singer"
    },
    {
      "question": "What is the count of singers?",
      "query": "SELECT count(*) FROM singer"
    },
    {
      "question": "List the name of singers in ascending order of net worth.",
      "query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC"
    },
    {
      "question": "What are the names of singers ordered by ascending net worth?",
      "query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC"
    },
    {
      "question": "What are the birth year and citizenship of singers?",
      "query": "SELECT Birth_Year, Citizenship FROM singer"
    },
    {
      "question": "What are the birth years and citizenships of the singers?",
      "query": "SELECT Birth_Year, Citizenship FROM singer"
    },
    {
      "question": "List the name of singers whose citizenship is not \"France\".",
      "query": "SELECT Name FROM singer WHERE Citizenship != \"France\""
    },
    {
      "question": "What are the names of the singers who are not French citizens?",
      "query": "SELECT Name FROM singer WHERE Citizenship != \"French\""
    },
    {
      "question": "Show the name of singers whose birth year is either 1948 or 1949?",
      "query": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949"
    },
    {
      "question": "What are the names of the singers whose birth years are either 1948 or 1949?",
      "query": "SELECT Name FROM singer WHERE Birth_Year IN (1948, 1949)"
    },
    {
      "question": "What is the name of the singer with the largest net worth?",
      "query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1"
    },
    {
      "question": "What is the name of the singer who is worth the most?",
      "query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1"
    },
    {
      "question": "Show different citizenship of singers and the number of singers of each citizenship.",
      "query": "SELECT Citizenship, COUNT(*) FROM singer GROUP BY Citizenship"
    },
    {
      "question": "For each citizenship, how many singers are from that country?",
      "query": "SELECT Citizenship, COUNT(*) FROM singer GROUP BY Citizenship"
    },
    {
      "question": "Please show the most common citizenship of singers.",
      "query": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
      "question": "What is the most common singer citizenship?",
      "query": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
      "question": "Show different citizenships and the maximum net worth of singers of each citizenship.",
      "query": "SELECT Citizenship, MAX(Net_Worth_Millions) FROM singer GROUP BY Citizenship"
    },
    {
      "question": "For each citizenship, what is the maximum net worth?",
      "query": "SELECT Citizenship, MAX(Net_Worth_Millions) FROM singer GROUP BY Citizenship"
    },
    {
      "question": "Show titles of songs and names of singers.",
      "query": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID"
    },
    {
      "question": "What are the song titles and singer names?",
      "query": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID"
    },
    {
      "question": "Show distinct names of singers that have songs with sales more than 300000.",
      "query": "SELECT DISTINCT Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE Sales > 300000"
    },
    {
      "question": "what are the different names of the singers that have sales more than 300000?",
      "query": "SELECT DISTINCT Name FROM singer WHERE Singer_ID IN (SELECT Singer_ID FROM song WHERE Sales > 300000)"
    },
    {
      "question": "Show the names of singers that have more than one song.",
      "query": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T2.Singer_ID HAVING COUNT(*)  >  1"
    },
    {
      "question": "What are the names of the singers that have more than one songs?",
      "query": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T2.Singer_ID HAVING COUNT(*) > 1"
    },
    {
      "question": "Show the names of singers and the total sales of their songs.",
      "query": "SELECT T1.Name ,  SUM(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Singer_ID"
    },
    {
      "question": "For each singer name, what is the total sales for their songs?",
      "query": "SELECT singer.Name, SUM(song.Sales) FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Name"
    },
    {
      "question": "List the name of singers that do not have any song.",
      "query": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)"
    },
    {
      "question": "What is the sname of every sing that does not have any song?",
      "query": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)"
    },
    {
      "question": "Show the citizenship shared by singers with birth year before 1945 and after 1955.",
      "query": "SELECT Citizenship FROM singer WHERE Birth_Year < 1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year > 1955"
    },
    {
      "question": "What are the citizenships that are shared by singers with a birth year before 1945 and after 1955?",
      "query": "SELECT Citizenship FROM singer WHERE Birth_Year < 1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year > 1955"
    }
  ],
  "real_estate_properties": [
    {
      "question": "How many available features are there in total?",
      "query": "SELECT count(*) FROM Other_Available_Features"
    },
    {
      "question": "What is the feature type name of feature AirCon?",
      "query": "SELECT feature_type_name FROM Ref_Feature_Types WHERE feature_type_code IN (SELECT feature_type_code FROM Other_Available_Features WHERE feature_name = 'AirCon')"
    },
    {
      "question": "Show the property type descriptions of properties belonging to that code.",
      "query": "SELECT property_type_description FROM Ref_Property_Types WHERE property_type_code = [code]"
    },
    {
      "question": "What are the names of properties that are either houses or apartments with more than 1 room?",
      "query": "SELECT property_name FROM Properties WHERE (property_type_code = (SELECT property_type_code FROM Ref_Property_Types WHERE property_type_description = 'house') OR property_type_code = (SELECT property_type_code FROM Ref_Property_Types WHERE property_type_description = 'apartment')) AND room_count > 1"
    }
  ]
}