{
  "hospital_1": [
    [
      {
        "question": "What is the number of employees in each department?",
        "query": "SELECT count(departmentid) FROM department GROUP BY departmentid",
        "schema": "CREATE TABLE Room (RoomNumber NUMBER); CREATE TABLE Department (Name TEXT, DepartmentID NUMBER, Head NUMBER); CREATE TABLE Affiliated_With (Department NUMBER, Physician NUMBER); CREATE TABLE Appointment (Physician NUMBER, AppointmentID NUMBER); CREATE TABLE Nurse (EmployeeID NUMBER); CREATE TABLE Stay (StayID NUMBER, StayEnd TIME, StayStart TIME); CREATE TABLE Physician (SSN NUMBER, EmployeeID NUMBER); CREATE TABLE Patient (SSN NUMBER);"
      },
      {
        "question": "Which department has the most employees? Give me the department name.",
        "query": "SELECT name FROM department GROUP BY departmentid ORDER BY count(departmentid) DESC LIMIT 1;",
        "schema": "CREATE TABLE Affiliated_With (Physician NUMBER, Department NUMBER); CREATE TABLE Room (RoomNumber NUMBER); CREATE TABLE Patient (SSN NUMBER); CREATE TABLE Physician (Name TEXT, EmployeeID NUMBER, SSN NUMBER); CREATE TABLE Stay (StayStart TIME, StayEnd TIME, StayID NUMBER); CREATE TABLE Appointment (AppointmentID NUMBER, Physician NUMBER); CREATE TABLE Nurse (EmployeeID NUMBER); CREATE TABLE Department (Head NUMBER, DepartmentID NUMBER, Name TEXT);"
      }
    ],
    [
      {
        "question": "How many employees does each department have?",
        "query": "SELECT count(departmentid) FROM department GROUP BY departmentid",
        "schema": "CREATE TABLE Department (Name TEXT, DepartmentID NUMBER, Head NUMBER); CREATE TABLE Trained_In (Physician NUMBER); CREATE TABLE Physician (EmployeeID NUMBER, SSN NUMBER); CREATE TABLE Nurse (EmployeeID NUMBER); CREATE TABLE Block (BlockFloor NUMBER, BlockCode NUMBER); CREATE TABLE Room (RoomNumber NUMBER); CREATE TABLE Patient (SSN NUMBER); CREATE TABLE Procedures (Code NUMBER); CREATE TABLE Stay (StayStart TIME, StayID NUMBER); CREATE TABLE Affiliated_With (Department NUMBER, Physician NUMBER, PrimaryAffiliation BOOLEAN);"
      },
      {
        "question": "Which department has the least employees?",
        "query": "SELECT * FROM department GROUP BY departmentid ORDER BY count(departmentid) LIMIT 1;",
        "schema": "CREATE TABLE Patient (SSN NUMBER); CREATE TABLE Department (Head NUMBER, DepartmentID NUMBER, Name TEXT); CREATE TABLE Affiliated_With (Department NUMBER, Physician NUMBER, PrimaryAffiliation BOOLEAN); CREATE TABLE Room (RoomNumber NUMBER); CREATE TABLE Block (BlockFloor NUMBER, BlockCode NUMBER); CREATE TABLE Stay (StayStart TIME, StayID NUMBER); CREATE TABLE Physician (SSN NUMBER, EmployeeID NUMBER); CREATE TABLE Nurse (EmployeeID NUMBER); CREATE TABLE Trained_In (Physician NUMBER); CREATE TABLE Procedures (Code NUMBER);"
      },
      {
        "question": "Who is the head of this department? Find the employee id.",
        "query": "SELECT head FROM department GROUP BY departmentid ORDER BY count(departmentid) LIMIT 1;",
        "schema": "CREATE TABLE Stay (StayID NUMBER, StayStart TIME); CREATE TABLE Trained_In (Physician NUMBER); CREATE TABLE Room (RoomNumber NUMBER); CREATE TABLE Procedures (Code NUMBER); CREATE TABLE Affiliated_With (PrimaryAffiliation BOOLEAN, Department NUMBER, Physician NUMBER); CREATE TABLE Block (BlockFloor NUMBER, BlockCode NUMBER); CREATE TABLE Nurse (EmployeeID NUMBER); CREATE TABLE Patient (SSN NUMBER); CREATE TABLE Physician (SSN NUMBER, EmployeeID NUMBER); CREATE TABLE Appointment (AppointmentID NUMBER); CREATE TABLE Department (DepartmentID NUMBER, Head NUMBER, Name TEXT);"
      }
    ],
    [
      {
        "question": "How many employees does each department have?",
        "query": "SELECT count(departmentid) FROM department GROUP BY departmentid",
        "schema": "CREATE TABLE Department (DepartmentID NUMBER, Name TEXT, Head NUMBER); CREATE TABLE Block (BlockFloor NUMBER, BlockCode NUMBER); CREATE TABLE Affiliated_With (Physician NUMBER, Department NUMBER); CREATE TABLE Room (RoomNumber NUMBER); CREATE TABLE Procedures (Code NUMBER); CREATE TABLE Trained_In (Physician NUMBER); CREATE TABLE Patient (SSN NUMBER); CREATE TABLE Stay (StayStart TIME, StayID NUMBER); CREATE TABLE Appointment (AppointmentID NUMBER); CREATE TABLE Physician (EmployeeID NUMBER, SSN NUMBER); CREATE TABLE Nurse (EmployeeID NUMBER);"
      },
      {
        "question": "Which department has the smallest number of employees?",
        "query": "SELECT * FROM department GROUP BY departmentid ORDER BY count(departmentid) LIMIT 1;",
        "schema": "CREATE TABLE Room (RoomNumber NUMBER); CREATE TABLE Nurse (EmployeeID NUMBER); CREATE TABLE Procedures (Code NUMBER); CREATE TABLE Patient (SSN NUMBER); CREATE TABLE Appointment (AppointmentID NUMBER); CREATE TABLE Stay (StayStart TIME, StayID NUMBER); CREATE TABLE Affiliated_With (Physician NUMBER, Department NUMBER); CREATE TABLE Physician (EmployeeID NUMBER, SSN NUMBER); CREATE TABLE Trained_In (Physician NUMBER); CREATE TABLE Block (BlockCode NUMBER, BlockFloor NUMBER); CREATE TABLE Department (Name TEXT, Head NUMBER, DepartmentID NUMBER);"
      },
      {
        "question": "Tell me the name and position of the head of this department.",
        "query": "SELECT t2.name , t2.position FROM department AS t1 JOIN physician AS t2 ON t1.head = t2.employeeid GROUP BY departmentid ORDER BY count(departmentid) LIMIT 1;",
        "schema": "CREATE TABLE Trained_In (Physician NUMBER); CREATE TABLE Stay (StayStart TIME, StayID NUMBER); CREATE TABLE Nurse (EmployeeID NUMBER, Position TEXT); CREATE TABLE Room (RoomNumber NUMBER); CREATE TABLE Affiliated_With (Physician NUMBER, Department NUMBER); CREATE TABLE Appointment (AppointmentID NUMBER); CREATE TABLE Patient (SSN NUMBER); CREATE TABLE Department (DepartmentID NUMBER, Head NUMBER, Name TEXT); CREATE TABLE Procedures (Code NUMBER); CREATE TABLE Physician (SSN NUMBER, Name TEXT, EmployeeID NUMBER, Position TEXT); CREATE TABLE Block (BlockCode NUMBER, BlockFloor NUMBER);"
      }
    ],
    [
      {
        "question": "List the patient id for all the appointments.",
        "query": "SELECT patient FROM appointment",
        "schema": "CREATE TABLE Stay (Patient NUMBER); CREATE TABLE Nurse (EmployeeID NUMBER); CREATE TABLE Patient (PCP NUMBER, SSN NUMBER); CREATE TABLE Prescribes (Appointment NUMBER, Patient NUMBER); CREATE TABLE Appointment (PrepNurse NUMBER, AppointmentID NUMBER, Patient NUMBER, Physician NUMBER); CREATE TABLE Procedures (Code NUMBER); CREATE TABLE Physician (EmployeeID NUMBER);"
      },
      {
        "question": "What are the names of patients who have made appointments?",
        "query": "SELECT name FROM appointment AS t1 JOIN patient AS t2 ON t1.patient = t2.ssn",
        "schema": "CREATE TABLE Appointment (Start TIME, Physician NUMBER, Patient NUMBER, AppointmentID NUMBER, PrepNurse NUMBER); CREATE TABLE Procedures (Code NUMBER); CREATE TABLE Patient (SSN NUMBER, Name TEXT, PCP NUMBER); CREATE TABLE Physician (EmployeeID NUMBER); CREATE TABLE Stay (StayID NUMBER, Patient NUMBER); CREATE TABLE Prescribes (Patient NUMBER, Appointment NUMBER); CREATE TABLE Nurse (EmployeeID NUMBER);"
      }
    ],
    [
      {
        "question": "Find the number of appointments each patient has made.",
        "query": "SELECT count(*) FROM appointment GROUP BY patient",
        "schema": "CREATE TABLE Patient (Name TEXT, PCP NUMBER, SSN NUMBER); CREATE TABLE Prescribes (Patient NUMBER, Appointment NUMBER); CREATE TABLE Physician (EmployeeID NUMBER); CREATE TABLE Appointment (PrepNurse NUMBER, AppointmentID NUMBER, Start TIME, Patient NUMBER); CREATE TABLE Undergoes (Patient NUMBER); CREATE TABLE Stay (Patient NUMBER, StayID NUMBER); CREATE TABLE Nurse (EmployeeID NUMBER);"
      },
      {
        "question": "Which patients made more than one appointment?",
        "query": "SELECT * FROM appointment GROUP BY patient HAVING count(*) > 1",
        "schema": "CREATE TABLE Undergoes (Patient NUMBER); CREATE TABLE Appointment (AppointmentID NUMBER, Patient NUMBER, Start TIME, PrepNurse NUMBER); CREATE TABLE Prescribes (Appointment NUMBER, Patient NUMBER); CREATE TABLE Stay (Patient NUMBER, StayID NUMBER); CREATE TABLE Patient (Name TEXT, PCP NUMBER, SSN NUMBER); CREATE TABLE Nurse (EmployeeID NUMBER); CREATE TABLE Physician (EmployeeID NUMBER);"
      },
      {
        "question": "Tell me the name and phone number of these patients",
        "query": "SELECT name , phone FROM appointment AS t1 JOIN patient AS t2 ON t1.patient = t2.ssn GROUP BY t1.patient HAVING count(*) > 1",
        "schema": "CREATE TABLE Nurse (EmployeeID NUMBER); CREATE TABLE Undergoes (Patient NUMBER); CREATE TABLE Prescribes (Appointment NUMBER, Patient NUMBER); CREATE TABLE Patient (Name TEXT, SSN NUMBER, PCP NUMBER, Phone TEXT); CREATE TABLE Stay (Patient NUMBER, StayID NUMBER); CREATE TABLE Physician (EmployeeID NUMBER); CREATE TABLE Appointment (PrepNurse NUMBER, AppointmentID NUMBER, Patient NUMBER, Start TIME);"
      }
    ],
    [
      {
        "question": "What is the start date of each appointment?",
        "query": "SELECT START FROM appointment",
        "schema": "CREATE TABLE Patient (SSN NUMBER); CREATE TABLE Prescribes (Date TIME, Appointment NUMBER); CREATE TABLE Undergoes (DateUndergoes TIME); CREATE TABLE Appointment (PrepNurse NUMBER, AppointmentID NUMBER, Start TIME, Physician NUMBER); CREATE TABLE Physician (EmployeeID NUMBER);"
      },
      {
        "question": "Sort the appointments by the starting date in descending order.",
        "query": "SELECT * FROM appointment ORDER BY START DESC",
        "schema": "CREATE TABLE Prescribes (Appointment NUMBER, Date TIME); CREATE TABLE Appointment (Start TIME, AppointmentID NUMBER, Physician NUMBER, PrepNurse NUMBER); CREATE TABLE Undergoes (DateUndergoes TIME); CREATE TABLE Patient (SSN NUMBER); CREATE TABLE Physician (EmployeeID NUMBER);"
      },
      {
        "question": "Which appointment has the most recent starting date? Give me the appointment id.",
        "query": "SELECT appointmentid FROM appointment ORDER BY START DESC LIMIT 1",
        "schema": "CREATE TABLE Undergoes (DateUndergoes TIME); CREATE TABLE Appointment (PrepNurse NUMBER, Physician NUMBER, AppointmentID NUMBER, Start TIME); CREATE TABLE Prescribes (Date TIME, Appointment NUMBER); CREATE TABLE Patient (SSN NUMBER); CREATE TABLE Physician (EmployeeID NUMBER);"
      }
    ],
    [
      {
        "question": "What are the ids of the physicians who took appointments?",
        "query": "SELECT physician FROM appointment",
        "schema": "CREATE TABLE Patient (SSN NUMBER); CREATE TABLE Physician (Position TEXT, EmployeeID NUMBER, Name TEXT, SSN NUMBER); CREATE TABLE Undergoes (Physician NUMBER); CREATE TABLE Trained_In (Physician NUMBER); CREATE TABLE Procedures (Code NUMBER); CREATE TABLE Nurse (EmployeeID NUMBER); CREATE TABLE Stay (StayID NUMBER); CREATE TABLE Prescribes (Appointment NUMBER, Physician NUMBER); CREATE TABLE Appointment (Physician NUMBER, AppointmentID NUMBER, Start TIME, PrepNurse NUMBER);"
      },
      {
        "question": "Also tell me their names.",
        "query": "SELECT t2.name FROM appointment AS t1 JOIN physician AS t2 ON t1.physician = t2.employeeid",
        "schema": "CREATE TABLE Procedures (Code NUMBER); CREATE TABLE Prescribes (Physician NUMBER, Appointment NUMBER); CREATE TABLE Trained_In (Physician NUMBER); CREATE TABLE Patient (SSN NUMBER, Name TEXT); CREATE TABLE Physician (Name TEXT, EmployeeID NUMBER, SSN NUMBER, Position TEXT); CREATE TABLE Undergoes (Physician NUMBER); CREATE TABLE Appointment (PrepNurse NUMBER, Physician NUMBER, AppointmentID NUMBER, Start TIME); CREATE TABLE Stay (StayID NUMBER); CREATE TABLE Nurse (EmployeeID NUMBER);"
      }
    ],
    [
      {
        "question": "List all the physician names.",
        "query": "SELECT name FROM physician",
        "schema": "CREATE TABLE Undergoes (Physician NUMBER); CREATE TABLE Patient (SSN NUMBER, Name TEXT, PCP NUMBER); CREATE TABLE Nurse (EmployeeID NUMBER); CREATE TABLE Prescribes (Physician NUMBER); CREATE TABLE Physician (EmployeeID NUMBER, Name TEXT, SSN NUMBER, Position TEXT); CREATE TABLE Appointment (Physician NUMBER); CREATE TABLE Trained_In (Physician NUMBER);"
      },
      {
        "question": "Find the names of the physicians who took appointments.",
        "query": "SELECT t2.name FROM appointment AS t1 JOIN physician AS t2 ON t1.physician = t2.employeeid",
        "schema": "CREATE TABLE Nurse (EmployeeID NUMBER); CREATE TABLE Appointment (Start TIME, AppointmentID NUMBER, PrepNurse NUMBER, Physician NUMBER); CREATE TABLE Patient (Name TEXT, PCP NUMBER, SSN NUMBER); CREATE TABLE Trained_In (Physician NUMBER); CREATE TABLE Prescribes (Appointment NUMBER, Physician NUMBER); CREATE TABLE Physician (EmployeeID NUMBER, Position TEXT, SSN NUMBER, Name TEXT); CREATE TABLE Undergoes (Physician NUMBER);"
      },
      {
        "question": "Then what are the names of physicians who never took any appointment?",
        "query": "SELECT name FROM physician EXCEPT SELECT t2.name FROM appointment AS t1 JOIN physician AS t2 ON t1.physician = t2.employeeid",
        "schema": "CREATE TABLE Appointment (Physician NUMBER, AppointmentID NUMBER, PrepNurse NUMBER, Start TIME); CREATE TABLE Trained_In (Physician NUMBER); CREATE TABLE Physician (Name TEXT, EmployeeID NUMBER, SSN NUMBER, Position TEXT); CREATE TABLE Undergoes (Physician NUMBER); CREATE TABLE Prescribes (Appointment NUMBER, Physician NUMBER); CREATE TABLE Nurse (EmployeeID NUMBER); CREATE TABLE Patient (Name TEXT, PCP NUMBER, SSN NUMBER);"
      }
    ],
    [
      {
        "question": "List the name of each physician.",
        "query": "SELECT name FROM physician",
        "schema": "CREATE TABLE Undergoes (Physician NUMBER); CREATE TABLE Patient (Name TEXT, SSN NUMBER, PCP NUMBER); CREATE TABLE Physician (Name TEXT, EmployeeID NUMBER, SSN NUMBER, Position TEXT); CREATE TABLE Nurse (EmployeeID NUMBER, Name TEXT); CREATE TABLE Appointment (Physician NUMBER); CREATE TABLE Trained_In (Physician NUMBER); CREATE TABLE Prescribes (Physician NUMBER);"
      },
      {
        "question": "Find the name of the primarily affiliated department for each physician.",
        "query": "SELECT t3.name FROM physician AS t1 JOIN affiliated_with AS t2 ON t1.employeeid = t2.physician JOIN department AS t3 ON t2.department = t3.departmentid WHERE t2.primaryaffiliation = 1",
        "schema": "CREATE TABLE Undergoes (Physician NUMBER); CREATE TABLE Department (Name TEXT, DepartmentID NUMBER, Head NUMBER); CREATE TABLE Patient (SSN NUMBER, PCP NUMBER, Name TEXT); CREATE TABLE Physician (Position TEXT, Name TEXT, EmployeeID NUMBER, SSN NUMBER); CREATE TABLE Prescribes (Physician NUMBER); CREATE TABLE Affiliated_With (PrimaryAffiliation BOOLEAN, Physician NUMBER, Department NUMBER); CREATE TABLE Nurse (Name TEXT, EmployeeID NUMBER); CREATE TABLE Trained_In (Physician NUMBER); CREATE TABLE Appointment (Physician NUMBER);"
      },
      {
        "question": "Return both information together.",
        "query": "SELECT t1.name , t3.name FROM physician AS t1 JOIN affiliated_with AS t2 ON t1.employeeid = t2.physician JOIN department AS t3 ON t2.department = t3.departmentid WHERE t2.primaryaffiliation = 1",
        "schema": "CREATE TABLE Appointment (Physician NUMBER); CREATE TABLE Physician (Name TEXT, SSN NUMBER, EmployeeID NUMBER, Position TEXT); CREATE TABLE Prescribes (Physician NUMBER); CREATE TABLE Undergoes (Physician NUMBER); CREATE TABLE Trained_In (Physician NUMBER); CREATE TABLE Department (Name TEXT, DepartmentID NUMBER, Head NUMBER); CREATE TABLE Affiliated_With (Physician NUMBER, PrimaryAffiliation BOOLEAN, Department NUMBER); CREATE TABLE Nurse (EmployeeID NUMBER, Name TEXT); CREATE TABLE Patient (Name TEXT, SSN NUMBER, PCP NUMBER);"
      }
    ],
    [
      {
        "question": "Sort all the appointments by the start date from recent to past.",
        "query": "SELECT * FROM appointment ORDER BY START DESC",
        "schema": "CREATE TABLE Appointment (PrepNurse NUMBER, Start TIME, AppointmentID NUMBER, Physician NUMBER); CREATE TABLE Physician (EmployeeID NUMBER); CREATE TABLE Prescribes (Appointment NUMBER, Date TIME); CREATE TABLE Undergoes (DateUndergoes TIME);"
      },
      {
        "question": "Which appointment has the most recent start date?",
        "query": "SELECT * FROM appointment ORDER BY START DESC LIMIT 1",
        "schema": "CREATE TABLE Physician (EmployeeID NUMBER); CREATE TABLE Prescribes (Appointment NUMBER, Date TIME); CREATE TABLE Undergoes (DateUndergoes TIME); CREATE TABLE Appointment (PrepNurse NUMBER, AppointmentID NUMBER, Physician NUMBER, Start TIME);"
      },
      {
        "question": "Find the name of the patient who made that appointment.",
        "query": "SELECT t1.name FROM patient AS t1 JOIN appointment AS t2 WHERE t1.ssn = t2.patient ORDER BY t2.start DESC LIMIT 1",
        "schema": "CREATE TABLE Stay (Patient NUMBER); CREATE TABLE Undergoes (DateUndergoes TIME); CREATE TABLE Appointment (PrepNurse NUMBER, Start TIME, AppointmentID NUMBER, Patient NUMBER, Physician NUMBER); CREATE TABLE Patient (Name TEXT, PCP NUMBER, SSN NUMBER); CREATE TABLE Prescribes (Appointment NUMBER, Date TIME); CREATE TABLE Physician (EmployeeID NUMBER);"
      }
    ],
    [
      {
        "question": "Find all the stays in room 112.",
        "query": "SELECT * FROM stay WHERE room = 112",
        "schema": "CREATE TABLE Patient (SSN NUMBER, PCP NUMBER); CREATE TABLE Undergoes (Stay NUMBER); CREATE TABLE Room (RoomType TEXT, RoomNumber NUMBER); CREATE TABLE Nurse (EmployeeID NUMBER); CREATE TABLE Stay (Room NUMBER, Patient NUMBER, StayEnd TIME, StayStart TIME, StayID NUMBER); CREATE TABLE Physician (EmployeeID NUMBER);"
      },
      {
        "question": "How many patients stayed in room 112?",
        "query": "SELECT count(patient) FROM stay WHERE room = 112",
        "schema": "CREATE TABLE Physician (EmployeeID NUMBER); CREATE TABLE Room (RoomType TEXT, RoomNumber NUMBER); CREATE TABLE Nurse (EmployeeID NUMBER); CREATE TABLE Stay (StayEnd TIME, StayID NUMBER, StayStart TIME, Patient NUMBER, Room NUMBER); CREATE TABLE Patient (SSN NUMBER, PCP NUMBER); CREATE TABLE Undergoes (Stay NUMBER);"
      }
    ],
    [
      {
        "question": "What is the employee id of physician John Dorian?",
        "query": "SELECT employeeid FROM physician WHERE name = \"John Dorian\"",
        "schema": "CREATE TABLE Nurse (Name TEXT, EmployeeID NUMBER); CREATE TABLE Prescribes (Physician NUMBER); CREATE TABLE Undergoes (Physician NUMBER); CREATE TABLE Trained_In (Physician NUMBER, Treatment NUMBER); CREATE TABLE Stay (StayID NUMBER); CREATE TABLE Physician (SSN NUMBER, Name TEXT, EmployeeID NUMBER, Position TEXT); CREATE TABLE Appointment (Physician NUMBER); CREATE TABLE Patient (PCP NUMBER, SSN NUMBER, Name TEXT); CREATE TABLE Affiliated_With (Physician NUMBER);"
      },
      {
        "question": "Find all the prescriptions made by him.",
        "query": "SELECT * FROM prescribes AS t1 JOIN physician AS t2 ON t1.physician = t2.employeeid WHERE t2.name = \"John Dorian\"",
        "schema": "CREATE TABLE Medication (Code NUMBER, Name TEXT); CREATE TABLE Appointment (Physician NUMBER); CREATE TABLE Prescribes (Patient NUMBER, Dose TEXT, Physician NUMBER, Appointment NUMBER, Medication NUMBER); CREATE TABLE Undergoes (Physician NUMBER); CREATE TABLE Physician (SSN NUMBER, EmployeeID NUMBER, Name TEXT, Position TEXT); CREATE TABLE Nurse (Name TEXT, EmployeeID NUMBER); CREATE TABLE Stay (StayID NUMBER); CREATE TABLE Patient (SSN NUMBER, Name TEXT, PCP NUMBER); CREATE TABLE Trained_In (Physician NUMBER, Treatment NUMBER); CREATE TABLE Affiliated_With (Physician NUMBER);"
      },
      {
        "question": "How many patients' prescriptions are made by him?",
        "query": "SELECT count(t1.ssn) FROM patient AS t1 JOIN prescribes AS t2 ON t1.ssn = t2.patient JOIN physician AS t3 ON t2.physician = t3.employeeid WHERE t3.name = \"John Dorian\"",
        "schema": "CREATE TABLE Medication (Name TEXT, Code NUMBER); CREATE TABLE Prescribes (Dose TEXT, Physician NUMBER, Appointment NUMBER, Patient NUMBER, Medication NUMBER); CREATE TABLE Patient (SSN NUMBER, Name TEXT, PCP NUMBER); CREATE TABLE Trained_In (Treatment NUMBER, Physician NUMBER); CREATE TABLE Undergoes (Physician NUMBER); CREATE TABLE Appointment (Physician NUMBER); CREATE TABLE Affiliated_With (Physician NUMBER); CREATE TABLE Stay (StayID NUMBER, Patient NUMBER); CREATE TABLE Physician (EmployeeID NUMBER, SSN NUMBER, Name TEXT, Position TEXT); CREATE TABLE Nurse (EmployeeID NUMBER, Name TEXT);"
      }
    ],
    [
      {
        "question": "Which patient is staying in room 111? Tell me the patient id.",
        "query": "SELECT patient FROM stay WHERE room = 111",
        "schema": "CREATE TABLE Physician (EmployeeID NUMBER); CREATE TABLE Undergoes (Stay NUMBER); CREATE TABLE Room (RoomNumber NUMBER, RoomType TEXT); CREATE TABLE Patient (SSN NUMBER, Address TEXT, Name TEXT, PCP NUMBER); CREATE TABLE Appointment (Patient NUMBER); CREATE TABLE Stay (Room NUMBER, StayStart TIME, Patient NUMBER, StayID NUMBER, StayEnd TIME);"
      },
      {
        "question": "What is the id of the medication used for this patient?",
        "query": "SELECT t3.medication FROM stay AS t1 JOIN patient AS t2 ON t1.patient = t2.ssn JOIN prescribes AS t3 ON t3.patient = t2.ssn WHERE room = 111",
        "schema": "CREATE TABLE Stay (StayID NUMBER, Patient NUMBER, StayEnd TIME, Room NUMBER, StayStart TIME); CREATE TABLE Physician (EmployeeID NUMBER); CREATE TABLE Undergoes (Stay NUMBER); CREATE TABLE Medication (Name TEXT, Code NUMBER); CREATE TABLE Room (RoomNumber NUMBER, RoomType TEXT); CREATE TABLE Appointment (Patient NUMBER); CREATE TABLE Patient (Address TEXT, Name TEXT, PCP NUMBER, SSN NUMBER); CREATE TABLE Prescribes (Patient NUMBER, Dose TEXT, Medication NUMBER);"
      },
      {
        "question": "What is the name of the medication?",
        "query": "SELECT t4.name FROM stay AS t1 JOIN patient AS t2 ON t1.patient = t2.ssn JOIN prescribes AS t3 ON t3.patient = t2.ssn JOIN medication AS t4 ON t3.medication = t4.code WHERE room = 111",
        "schema": "CREATE TABLE Undergoes (Stay NUMBER); CREATE TABLE Stay (Patient NUMBER, Room NUMBER, StayEnd TIME, StayStart TIME, StayID NUMBER); CREATE TABLE Appointment (Patient NUMBER); CREATE TABLE Prescribes (Patient NUMBER, Medication NUMBER, Dose TEXT); CREATE TABLE Medication (Code NUMBER, Name TEXT); CREATE TABLE Room (RoomType TEXT, RoomNumber NUMBER); CREATE TABLE Physician (EmployeeID NUMBER); CREATE TABLE Patient (PCP NUMBER, SSN NUMBER, Name TEXT, Address TEXT);"
      }
    ],
    [
      {
        "question": "Find the patients who stayed in room 111.",
        "query": "SELECT patient FROM stay WHERE room = 111",
        "schema": "CREATE TABLE Undergoes (Patient NUMBER, Stay NUMBER); CREATE TABLE Appointment (Patient NUMBER); CREATE TABLE Physician (EmployeeID NUMBER); CREATE TABLE Patient (Name TEXT, SSN NUMBER, Address TEXT, PCP NUMBER); CREATE TABLE Room (RoomNumber NUMBER); CREATE TABLE Stay (StayStart TIME, StayID NUMBER, StayEnd TIME, Room NUMBER, Patient NUMBER);"
      },
      {
        "question": "Sort the patients by the stay start date, from recent to past.",
        "query": "SELECT patient FROM stay WHERE room = 111 ORDER BY staystart DESC",
        "schema": "CREATE TABLE Patient (Address TEXT, SSN NUMBER, Name TEXT, PCP NUMBER); CREATE TABLE Appointment (Patient NUMBER); CREATE TABLE Physician (EmployeeID NUMBER); CREATE TABLE Undergoes (Patient NUMBER, Stay NUMBER); CREATE TABLE Stay (Room NUMBER, StayID NUMBER, StayStart TIME, StayEnd TIME, Patient NUMBER); CREATE TABLE Room (RoomNumber NUMBER);"
      },
      {
        "question": "Which patient stayed there most recently?",
        "query": "SELECT patient FROM stay WHERE room = 111 ORDER BY staystart DESC LIMIT 1",
        "schema": "CREATE TABLE Patient (Address TEXT, Name TEXT, SSN NUMBER, PCP NUMBER); CREATE TABLE Physician (EmployeeID NUMBER); CREATE TABLE Undergoes (Patient NUMBER, Stay NUMBER); CREATE TABLE Appointment (Patient NUMBER); CREATE TABLE Room (RoomNumber NUMBER); CREATE TABLE Stay (StayID NUMBER, Room NUMBER, StayEnd TIME, StayStart TIME, Patient NUMBER);"
      }
    ],
    [
      {
        "question": "How many appointments does each nurse have?",
        "query": "SELECT count(*) FROM nurse AS t1 JOIN appointment AS t2 ON t1.employeeid = t2.prepnurse GROUP BY t1.employeeid",
        "schema": "CREATE TABLE Prescribes (Appointment NUMBER); CREATE TABLE Nurse (Registered BOOLEAN, SSN NUMBER, Name TEXT, EmployeeID NUMBER); CREATE TABLE Appointment (Patient NUMBER, Physician NUMBER, AppointmentID NUMBER, PrepNurse NUMBER); CREATE TABLE Patient (SSN NUMBER); CREATE TABLE On_Call (Nurse NUMBER); CREATE TABLE Undergoes (AssistingNurse NUMBER); CREATE TABLE Stay (Patient NUMBER); CREATE TABLE Physician (EmployeeID NUMBER);"
      },
      {
        "question": "Find the nurse with the most appointments. What is the nurse's name?",
        "query": "SELECT t1.name FROM nurse AS t1 JOIN appointment AS t2 ON t1.employeeid = t2.prepnurse GROUP BY t1.employeeid ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Stay (Patient NUMBER); CREATE TABLE On_Call (Nurse NUMBER); CREATE TABLE Physician (Name TEXT, EmployeeID NUMBER); CREATE TABLE Undergoes (AssistingNurse NUMBER); CREATE TABLE Prescribes (Appointment NUMBER); CREATE TABLE Patient (SSN NUMBER); CREATE TABLE Appointment (AppointmentID NUMBER, Start TIME, Physician NUMBER, PrepNurse NUMBER, Patient NUMBER); CREATE TABLE Nurse (EmployeeID NUMBER, Registered BOOLEAN, Name TEXT, SSN NUMBER);"
      }
    ],
    [
      {
        "question": "Group the patients by the physician treating them.",
        "query": "SELECT * FROM physician AS t1 JOIN patient AS t2 ON t1.employeeid = t2.pcp GROUP BY t1.employeeid",
        "schema": "CREATE TABLE Prescribes (Physician NUMBER, Patient NUMBER); CREATE TABLE Appointment (Patient NUMBER, Physician NUMBER); CREATE TABLE Undergoes (Patient NUMBER, Physician NUMBER); CREATE TABLE Patient (PCP NUMBER, Name TEXT, SSN NUMBER); CREATE TABLE Nurse (EmployeeID NUMBER); CREATE TABLE Physician (Name TEXT, Position TEXT, SSN NUMBER, EmployeeID NUMBER); CREATE TABLE Stay (StayID NUMBER, Patient NUMBER);"
      },
      {
        "question": "How many patients is each physician taking care of?",
        "query": "SELECT count(*) FROM physician AS t1 JOIN patient AS t2 ON t1.employeeid = t2.pcp GROUP BY t1.employeeid",
        "schema": "CREATE TABLE Patient (Name TEXT, PCP NUMBER, SSN NUMBER); CREATE TABLE Appointment (Physician NUMBER, Patient NUMBER); CREATE TABLE Prescribes (Physician NUMBER, Patient NUMBER); CREATE TABLE Nurse (EmployeeID NUMBER); CREATE TABLE Stay (StayID NUMBER, Patient NUMBER); CREATE TABLE Undergoes (Physician NUMBER, Patient NUMBER); CREATE TABLE Physician (Position TEXT, SSN NUMBER, Name TEXT, EmployeeID NUMBER);"
      },
      {
        "question": "For each physician, return his or her name and the number of patients.",
        "query": "SELECT t1.name , count(*) FROM physician AS t1 JOIN patient AS t2 ON t1.employeeid = t2.pcp GROUP BY t1.employeeid",
        "schema": "CREATE TABLE Stay (Patient NUMBER, StayID NUMBER); CREATE TABLE Patient (SSN NUMBER, PCP NUMBER, Name TEXT); CREATE TABLE Physician (SSN NUMBER, Name TEXT, EmployeeID NUMBER, Position TEXT); CREATE TABLE Undergoes (Physician NUMBER, Patient NUMBER); CREATE TABLE Appointment (Physician NUMBER, Patient NUMBER); CREATE TABLE Prescribes (Physician NUMBER, Patient NUMBER); CREATE TABLE Nurse (EmployeeID NUMBER);"
      }
    ],
    [
      {
        "question": "How many patients is each physician in change of?",
        "query": "SELECT count(*) FROM physician AS t1 JOIN patient AS t2 ON t1.employeeid = t2.pcp GROUP BY t1.employeeid",
        "schema": "CREATE TABLE Trained_In (Physician NUMBER); CREATE TABLE Patient (SSN NUMBER, PCP NUMBER); CREATE TABLE Nurse (EmployeeID NUMBER); CREATE TABLE Undergoes (Patient NUMBER, Physician NUMBER); CREATE TABLE Appointment (Patient NUMBER, Physician NUMBER); CREATE TABLE Stay (StayID NUMBER, Patient NUMBER); CREATE TABLE Prescribes (Patient NUMBER, Physician NUMBER); CREATE TABLE Physician (Name TEXT, SSN NUMBER, Position TEXT, EmployeeID NUMBER);"
      },
      {
        "question": "Which physicians are in charge of more than one?",
        "query": "SELECT * FROM physician AS t1 JOIN patient AS t2 ON t1.employeeid = t2.pcp GROUP BY t1.employeeid HAVING count(*) > 1",
        "schema": "CREATE TABLE Undergoes (Physician NUMBER, Patient NUMBER); CREATE TABLE Stay (Patient NUMBER, StayID NUMBER); CREATE TABLE Patient (PCP NUMBER, SSN NUMBER); CREATE TABLE Trained_In (Physician NUMBER); CREATE TABLE Physician (Name TEXT, EmployeeID NUMBER, SSN NUMBER, Position TEXT); CREATE TABLE Nurse (EmployeeID NUMBER); CREATE TABLE Prescribes (Physician NUMBER, Patient NUMBER); CREATE TABLE Appointment (Physician NUMBER, Patient NUMBER);"
      },
      {
        "question": "What are the name of these physicians?",
        "query": "SELECT t1.name FROM physician AS t1 JOIN patient AS t2 ON t1.employeeid = t2.pcp GROUP BY t1.employeeid HAVING count(*) > 1",
        "schema": "CREATE TABLE Prescribes (Physician NUMBER, Patient NUMBER); CREATE TABLE Undergoes (Physician NUMBER, Patient NUMBER); CREATE TABLE Stay (StayID NUMBER, Patient NUMBER); CREATE TABLE Patient (Name TEXT, SSN NUMBER, PCP NUMBER); CREATE TABLE Nurse (EmployeeID NUMBER); CREATE TABLE Appointment (Patient NUMBER, Physician NUMBER); CREATE TABLE Physician (EmployeeID NUMBER, SSN NUMBER, Position TEXT, Name TEXT); CREATE TABLE Trained_In (Physician NUMBER);"
      }
    ],
    [
      {
        "question": "What is the block floor each room is located on?",
        "query": "SELECT t1.blockfloor FROM BLOCK AS t1 JOIN room AS t2 ON t1.blockfloor = t2.blockfloor AND t1.blockcode = t2.blockcode",
        "schema": "CREATE TABLE Room (RoomType TEXT, BlockFloor NUMBER, BlockCode NUMBER, RoomNumber NUMBER); CREATE TABLE Physician (EmployeeID NUMBER); CREATE TABLE On_Call (BlockFloor NUMBER); CREATE TABLE Department (DepartmentID NUMBER); CREATE TABLE Stay (Room NUMBER); CREATE TABLE Block (BlockFloor NUMBER, BlockCode NUMBER); CREATE TABLE Appointment (ExaminationRoom TEXT);"
      },
      {
        "question": "How many rooms does each block floor have?",
        "query": "SELECT count(*) , t1.blockfloor FROM BLOCK AS t1 JOIN room AS t2 ON t1.blockfloor = t2.blockfloor AND t1.blockcode = t2.blockcode GROUP BY t1.blockfloor",
        "schema": "CREATE TABLE On_Call (BlockFloor NUMBER); CREATE TABLE Department (DepartmentID NUMBER); CREATE TABLE Appointment (ExaminationRoom TEXT); CREATE TABLE Stay (Room NUMBER); CREATE TABLE Block (BlockFloor NUMBER, BlockCode NUMBER); CREATE TABLE Room (BlockFloor NUMBER, RoomNumber NUMBER, BlockCode NUMBER, RoomType TEXT); CREATE TABLE Physician (EmployeeID NUMBER);"
      }
    ],
    [
      {
        "question": "What is each room's block code?",
        "query": "SELECT t1.blockcode FROM BLOCK AS t1 JOIN room AS t2 ON t1.blockfloor = t2.blockfloor AND t1.blockcode = t2.blockcode",
        "schema": "CREATE TABLE Physician (EmployeeID NUMBER); CREATE TABLE Stay (Room NUMBER); CREATE TABLE Block (BlockCode NUMBER, BlockFloor NUMBER); CREATE TABLE Department (DepartmentID NUMBER); CREATE TABLE Appointment (ExaminationRoom TEXT); CREATE TABLE Medication (Code NUMBER); CREATE TABLE Room (RoomNumber NUMBER, BlockCode NUMBER, RoomType TEXT, BlockFloor NUMBER);"
      },
      {
        "question": "How many rooms does each block code have?",
        "query": "SELECT count(*) , t1.blockcode FROM BLOCK AS t1 JOIN room AS t2 ON t1.blockfloor = t2.blockfloor AND t1.blockcode = t2.blockcode GROUP BY t1.blockcode",
        "schema": "CREATE TABLE Stay (Room NUMBER); CREATE TABLE Block (BlockCode NUMBER, BlockFloor NUMBER); CREATE TABLE Appointment (ExaminationRoom TEXT); CREATE TABLE Department (DepartmentID NUMBER); CREATE TABLE Medication (Code NUMBER); CREATE TABLE Physician (EmployeeID NUMBER); CREATE TABLE Room (RoomType TEXT, BlockCode NUMBER, BlockFloor NUMBER, RoomNumber NUMBER);"
      }
    ],
    [
      {
        "question": "List all the rooms that are available.",
        "query": "SELECT * FROM room WHERE unavailable = 0",
        "schema": "CREATE TABLE Block (BlockCode NUMBER, BlockFloor NUMBER); CREATE TABLE Nurse (EmployeeID NUMBER); CREATE TABLE Physician (EmployeeID NUMBER); CREATE TABLE Stay (Patient NUMBER, Room NUMBER); CREATE TABLE Appointment (ExaminationRoom TEXT); CREATE TABLE Patient (PCP NUMBER, SSN NUMBER); CREATE TABLE Medication (Code NUMBER); CREATE TABLE Room (RoomType TEXT, RoomNumber NUMBER, Unavailable BOOLEAN);"
      },
      {
        "question": "What are the distinct block codes that have rooms available?",
        "query": "SELECT DISTINCT blockcode FROM room WHERE unavailable = 0",
        "schema": "CREATE TABLE Nurse (EmployeeID NUMBER); CREATE TABLE Stay (Room NUMBER, Patient NUMBER); CREATE TABLE Patient (PCP NUMBER, SSN NUMBER); CREATE TABLE Appointment (ExaminationRoom TEXT); CREATE TABLE Medication (Code NUMBER); CREATE TABLE Physician (EmployeeID NUMBER); CREATE TABLE Room (BlockCode NUMBER, RoomNumber NUMBER, RoomType TEXT, BlockFloor NUMBER, Unavailable BOOLEAN); CREATE TABLE Block (BlockFloor NUMBER, BlockCode NUMBER);"
      }
    ],
    [
      {
        "question": "List all the room types.",
        "query": "SELECT roomtype FROM room",
        "schema": "CREATE TABLE Patient (SSN NUMBER); CREATE TABLE Nurse (SSN NUMBER, EmployeeID NUMBER); CREATE TABLE Physician (EmployeeID NUMBER); CREATE TABLE Stay (Room NUMBER); CREATE TABLE Room (RoomType TEXT, RoomNumber NUMBER);"
      },
      {
        "question": "How many distinct room types are there?",
        "query": "SELECT count(DISTINCT roomtype) FROM room",
        "schema": "CREATE TABLE Room (RoomNumber NUMBER, RoomType TEXT); CREATE TABLE Nurse (SSN NUMBER, EmployeeID NUMBER); CREATE TABLE Physician (EmployeeID NUMBER); CREATE TABLE Patient (PCP NUMBER, SSN NUMBER); CREATE TABLE Stay (Room NUMBER);"
      }
    ],
    [
      {
        "question": "What is the code of the medication called Thesisin?",
        "query": "SELECT code FROM medication WHERE name = \"Thesisin\"",
        "schema": "CREATE TABLE Patient (PCP NUMBER, SSN NUMBER); CREATE TABLE Medication (Brand TEXT, Code NUMBER, Name TEXT); CREATE TABLE Physician (EmployeeID NUMBER); CREATE TABLE Prescribes (Medication NUMBER); CREATE TABLE Nurse (EmployeeID NUMBER); CREATE TABLE Stay (StayID NUMBER, Patient NUMBER);"
      },
      {
        "question": "Which physicians prescribe this medication? Tell me the distinct ids.",
        "query": "SELECT DISTINCT t1.physician FROM prescribes AS t1 JOIN medication AS t2 ON t2.code = t1.medication WHERE t2.name = \"Thesisin\"",
        "schema": "CREATE TABLE Medication (Name TEXT, Brand TEXT, Code NUMBER); CREATE TABLE Patient (SSN NUMBER, PCP NUMBER); CREATE TABLE Stay (StayID NUMBER, Patient NUMBER); CREATE TABLE Physician (Position TEXT, SSN NUMBER, Name TEXT, EmployeeID NUMBER); CREATE TABLE Prescribes (Physician NUMBER, Medication NUMBER); CREATE TABLE Nurse (EmployeeID NUMBER);"
      },
      {
        "question": "What are the names of the physicians?",
        "query": "SELECT DISTINCT t1.name FROM physician AS t1 JOIN prescribes AS t2 ON t1.employeeid = t2.physician JOIN medication AS t3 ON t3.code = t2.medication WHERE t3.name = \"Thesisin\"",
        "schema": "CREATE TABLE Patient (SSN NUMBER, PCP NUMBER); CREATE TABLE Physician (Name TEXT, SSN NUMBER, EmployeeID NUMBER, Position TEXT); CREATE TABLE Prescribes (Medication NUMBER, Physician NUMBER); CREATE TABLE Stay (Patient NUMBER, StayID NUMBER); CREATE TABLE Medication (Name TEXT, Code NUMBER, Brand TEXT); CREATE TABLE Nurse (EmployeeID NUMBER);"
      }
    ],
    [
      {
        "question": "Which medication has brand X?",
        "query": "SELECT * FROM medication WHERE brand = \"X\"",
        "schema": "CREATE TABLE Stay (Patient NUMBER); CREATE TABLE Medication (Brand TEXT, Code NUMBER, Name TEXT); CREATE TABLE Patient (SSN NUMBER, PCP NUMBER); CREATE TABLE Nurse (EmployeeID NUMBER); CREATE TABLE Prescribes (Medication NUMBER, Physician NUMBER, Patient NUMBER); CREATE TABLE Physician (EmployeeID NUMBER, SSN NUMBER);"
      },
      {
        "question": "Find the physicians who prescribe this medication.",
        "query": "SELECT DISTINCT t1.physician FROM prescribes AS t1 JOIN medication AS t2 ON t2.code = t1.medication WHERE t2.brand = \"X\"",
        "schema": "CREATE TABLE Nurse (EmployeeID NUMBER); CREATE TABLE Prescribes (Dose TEXT, Medication NUMBER, Physician NUMBER, Patient NUMBER); CREATE TABLE Physician (SSN NUMBER, EmployeeID NUMBER, Position TEXT, Name TEXT); CREATE TABLE Medication (Code NUMBER, Brand TEXT, Name TEXT); CREATE TABLE Appointment (Physician NUMBER); CREATE TABLE Stay (Patient NUMBER); CREATE TABLE Patient (SSN NUMBER, PCP NUMBER);"
      },
      {
        "question": "What are their name and position?",
        "query": "SELECT DISTINCT t1.name , t1.position FROM physician AS t1 JOIN prescribes AS t2 ON t1.employeeid = t2.physician JOIN medication AS t3 ON t3.code = t2.medication WHERE t3.brand = \"X\"",
        "schema": "CREATE TABLE Appointment (Physician NUMBER); CREATE TABLE Prescribes (Physician NUMBER, Patient NUMBER, Medication NUMBER, Dose TEXT); CREATE TABLE Medication (Code NUMBER, Name TEXT, Brand TEXT); CREATE TABLE Nurse (EmployeeID NUMBER, Position TEXT); CREATE TABLE Patient (Name TEXT, SSN NUMBER, PCP NUMBER); CREATE TABLE Stay (Patient NUMBER); CREATE TABLE Physician (SSN NUMBER, EmployeeID NUMBER, Position TEXT, Name TEXT);"
      }
    ],
    [
      {
        "question": "Group all the medications by the brand.",
        "query": "SELECT * FROM medication GROUP BY brand",
        "schema": "CREATE TABLE Prescribes (Physician NUMBER, Medication NUMBER); CREATE TABLE Medication (Code NUMBER, Name TEXT, Brand TEXT); CREATE TABLE Physician (EmployeeID NUMBER); CREATE TABLE Patient (PCP NUMBER, SSN NUMBER); CREATE TABLE Nurse (EmployeeID NUMBER);"
      },
      {
        "question": "How many medications are prescribed for each brand?",
        "query": "SELECT count(*) , t1.name FROM medication AS t1 JOIN prescribes AS t2 ON t1.code = t2.medication GROUP BY t1.brand",
        "schema": "CREATE TABLE Patient (SSN NUMBER, PCP NUMBER); CREATE TABLE Prescribes (Dose TEXT, Medication NUMBER, Physician NUMBER, Patient NUMBER); CREATE TABLE Nurse (EmployeeID NUMBER); CREATE TABLE Medication (Name TEXT, Brand TEXT, Code NUMBER); CREATE TABLE Physician (EmployeeID NUMBER);"
      }
    ],
    [
      {
        "question": "Find the position title of each physician.",
        "query": "SELECT POSITION FROM physician",
        "schema": "CREATE TABLE Physician (Name TEXT, SSN NUMBER, Position TEXT, EmployeeID NUMBER); CREATE TABLE Patient (PCP NUMBER, SSN NUMBER); CREATE TABLE Appointment (Physician NUMBER); CREATE TABLE Prescribes (Physician NUMBER); CREATE TABLE Trained_In (Physician NUMBER); CREATE TABLE Nurse (Position TEXT);"
      },
      {
        "question": "Which physicians have 'senior' in their titles?",
        "query": "SELECT * FROM physician WHERE POSITION LIKE '%senior%'",
        "schema": "CREATE TABLE Prescribes (Physician NUMBER); CREATE TABLE Physician (Position TEXT, SSN NUMBER, EmployeeID NUMBER, Name TEXT); CREATE TABLE Trained_In (Physician NUMBER); CREATE TABLE Appointment (Physician NUMBER); CREATE TABLE Nurse (Position TEXT); CREATE TABLE Patient (PCP NUMBER, SSN NUMBER);"
      },
      {
        "question": "Give me their names",
        "query": "SELECT name FROM physician WHERE POSITION LIKE '%senior%'",
        "schema": "CREATE TABLE Patient (SSN NUMBER, PCP NUMBER); CREATE TABLE Nurse (Position TEXT); CREATE TABLE Trained_In (Physician NUMBER); CREATE TABLE Prescribes (Physician NUMBER); CREATE TABLE Appointment (Physician NUMBER); CREATE TABLE Physician (EmployeeID NUMBER, SSN NUMBER, Name TEXT, Position TEXT);"
      }
    ],
    [
      {
        "question": "List the dates of treatment undergoing.",
        "query": "SELECT dateundergoes FROM undergoes",
        "schema": "CREATE TABLE Stay (StayID NUMBER); CREATE TABLE Medication (Code NUMBER); CREATE TABLE Nurse (EmployeeID NUMBER); CREATE TABLE Prescribes (Date TIME); CREATE TABLE Physician (EmployeeID NUMBER); CREATE TABLE Patient (SSN NUMBER); CREATE TABLE Undergoes (DateUndergoes TIME, AssistingNurse NUMBER, Patient NUMBER, Physician NUMBER, Stay NUMBER, Procedures NUMBER);"
      },
      {
        "question": "What is the most recent undergoing treatment?",
        "query": "SELECT * FROM undergoes ORDER BY dateundergoes LIMIT 1",
        "schema": "CREATE TABLE Patient (SSN NUMBER); CREATE TABLE Nurse (EmployeeID NUMBER); CREATE TABLE Physician (EmployeeID NUMBER); CREATE TABLE Stay (StayID NUMBER); CREATE TABLE Undergoes (DateUndergoes TIME, Procedures NUMBER, Physician NUMBER, Stay NUMBER, AssistingNurse NUMBER, Patient NUMBER); CREATE TABLE Prescribes (Date TIME); CREATE TABLE Medication (Code NUMBER);"
      },
      {
        "question": "What is the patient of this treatment?",
        "query": "SELECT patient FROM undergoes ORDER BY dateundergoes LIMIT 1",
        "schema": "CREATE TABLE Stay (Patient NUMBER, StayID NUMBER); CREATE TABLE Prescribes (Date TIME); CREATE TABLE Patient (SSN NUMBER, Name TEXT, PCP NUMBER); CREATE TABLE Medication (Code NUMBER); CREATE TABLE Physician (EmployeeID NUMBER); CREATE TABLE Nurse (EmployeeID NUMBER); CREATE TABLE Undergoes (Patient NUMBER, Procedures NUMBER, DateUndergoes TIME, AssistingNurse NUMBER, Stay NUMBER, Physician NUMBER);"
      }
    ],
    [
      {
        "question": "List all the patients who have an undergoing treatment.",
        "query": "SELECT DISTINCT patient FROM undergoes AS t1 JOIN patient AS t2 ON t1.patient = t2.ssn",
        "schema": "CREATE TABLE Physician (EmployeeID NUMBER); CREATE TABLE Prescribes (Patient NUMBER); CREATE TABLE Nurse (EmployeeID NUMBER); CREATE TABLE Undergoes (Stay NUMBER, Patient NUMBER, AssistingNurse NUMBER, DateUndergoes TIME); CREATE TABLE Appointment (Patient NUMBER); CREATE TABLE Patient (SSN NUMBER, Name TEXT, PCP NUMBER); CREATE TABLE Stay (Patient NUMBER, StayID NUMBER);"
      },
      {
        "question": "Among them, who are staying in room 111?",
        "query": "SELECT * FROM undergoes AS t1 JOIN patient AS t2 ON t1.patient = t2.ssn JOIN stay AS t3 ON t1.stay = t3.stayid WHERE t3.room = 111",
        "schema": "CREATE TABLE Room (RoomNumber NUMBER); CREATE TABLE Undergoes (AssistingNurse NUMBER, Stay NUMBER, Patient NUMBER, DateUndergoes TIME); CREATE TABLE Physician (EmployeeID NUMBER); CREATE TABLE Patient (PCP NUMBER, SSN NUMBER, Name TEXT, Address TEXT); CREATE TABLE Appointment (Patient NUMBER); CREATE TABLE Nurse (EmployeeID NUMBER); CREATE TABLE Stay (Room NUMBER, StayEnd TIME, Patient NUMBER, StayID NUMBER, StayStart TIME); CREATE TABLE Prescribes (Patient NUMBER);"
      },
      {
        "question": "What are their names?",
        "query": "SELECT DISTINCT t2.name FROM undergoes AS t1 JOIN patient AS t2 ON t1.patient = t2.ssn JOIN stay AS t3 ON t1.stay = t3.stayid WHERE t3.room = 111",
        "schema": "CREATE TABLE Prescribes (Patient NUMBER); CREATE TABLE Stay (StayEnd TIME, Patient NUMBER, Room NUMBER, StayID NUMBER, StayStart TIME); CREATE TABLE Nurse (EmployeeID NUMBER); CREATE TABLE Department (Name TEXT); CREATE TABLE Patient (Name TEXT, SSN NUMBER, Address TEXT, PCP NUMBER); CREATE TABLE Appointment (Patient NUMBER); CREATE TABLE Undergoes (Stay NUMBER, Patient NUMBER, DateUndergoes TIME, AssistingNurse NUMBER); CREATE TABLE Room (RoomNumber NUMBER); CREATE TABLE Physician (EmployeeID NUMBER);"
      }
    ],
    [
      {
        "question": "List the distinct names of all the nurses",
        "query": "SELECT DISTINCT name FROM nurse",
        "schema": "CREATE TABLE Patient (Name TEXT, SSN NUMBER, PCP NUMBER); CREATE TABLE Nurse (SSN NUMBER, EmployeeID NUMBER, Name TEXT); CREATE TABLE Department (Name TEXT, Head NUMBER); CREATE TABLE Physician (Name TEXT, EmployeeID NUMBER);"
      },
      {
        "question": "Order them in the alphabetical order.",
        "query": "SELECT DISTINCT name FROM nurse ORDER BY name",
        "schema": "CREATE TABLE Department (Name TEXT, Head NUMBER); CREATE TABLE Physician (EmployeeID NUMBER, Name TEXT); CREATE TABLE Nurse (Name TEXT, EmployeeID NUMBER, SSN NUMBER); CREATE TABLE Patient (PCP NUMBER, Name TEXT, SSN NUMBER);"
      }
    ],
    [
      {
        "question": "Find the nurses in charge of undergoing treatments.",
        "query": "SELECT assistingnurse FROM undergoes",
        "schema": "CREATE TABLE Patient (PCP NUMBER, SSN NUMBER); CREATE TABLE Physician (Name TEXT, EmployeeID NUMBER, SSN NUMBER); CREATE TABLE Undergoes (Patient NUMBER, Stay NUMBER, Procedures NUMBER, Physician NUMBER, DateUndergoes TIME, AssistingNurse NUMBER); CREATE TABLE Nurse (Name TEXT, SSN NUMBER, Position TEXT, EmployeeID NUMBER); CREATE TABLE Stay (StayID NUMBER); CREATE TABLE On_Call (Nurse NUMBER); CREATE TABLE Trained_In (Treatment NUMBER); CREATE TABLE Appointment (PrepNurse NUMBER); CREATE TABLE Procedures (Code NUMBER);"
      },
      {
        "question": "What are the distinct names of the nurses?",
        "query": "SELECT DISTINCT t2.name FROM undergoes AS t1 JOIN nurse AS t2 ON t1.assistingnurse = t2.employeeid",
        "schema": "CREATE TABLE Procedures (Code NUMBER); CREATE TABLE Undergoes (Procedures NUMBER, Physician NUMBER, Patient NUMBER, AssistingNurse NUMBER, DateUndergoes TIME, Stay NUMBER); CREATE TABLE Patient (PCP NUMBER, Name TEXT, SSN NUMBER); CREATE TABLE Nurse (Name TEXT, EmployeeID NUMBER, Position TEXT, SSN NUMBER); CREATE TABLE On_Call (Nurse NUMBER); CREATE TABLE Stay (StayID NUMBER); CREATE TABLE Appointment (PrepNurse NUMBER); CREATE TABLE Physician (SSN NUMBER, EmployeeID NUMBER, Name TEXT); CREATE TABLE Trained_In (Treatment NUMBER);"
      }
    ],
    [
      {
        "question": "What are the distinct names of medications?",
        "query": "SELECT DISTINCT name FROM medication",
        "schema": "CREATE TABLE Physician (EmployeeID NUMBER, Name TEXT); CREATE TABLE Prescribes (Medication NUMBER); CREATE TABLE Stay (Patient NUMBER); CREATE TABLE Nurse (EmployeeID NUMBER); CREATE TABLE Medication (Code NUMBER, Description TEXT, Brand TEXT, Name TEXT); CREATE TABLE Patient (Name TEXT, SSN NUMBER, PCP NUMBER);"
      },
      {
        "question": "Sort them in an alphabetical order",
        "query": "SELECT DISTINCT name FROM medication ORDER BY name",
        "schema": "CREATE TABLE Medication (Code NUMBER, Description TEXT, Name TEXT, Brand TEXT); CREATE TABLE Patient (SSN NUMBER, Name TEXT, PCP NUMBER); CREATE TABLE Nurse (EmployeeID NUMBER); CREATE TABLE Prescribes (Medication NUMBER); CREATE TABLE Physician (Name TEXT, EmployeeID NUMBER); CREATE TABLE Stay (Patient NUMBER);"
      }
    ],
    [
      {
        "question": "What is the list of the dose each physician prescribes?",
        "query": "SELECT * FROM physician AS t1 JOIN prescribes AS t2 ON t1.employeeid = t2.physician",
        "schema": "CREATE TABLE Patient (PCP NUMBER, SSN NUMBER); CREATE TABLE Medication (Name TEXT, Brand TEXT, Code NUMBER); CREATE TABLE Appointment (Physician NUMBER); CREATE TABLE Physician (EmployeeID NUMBER, Position TEXT, Name TEXT, SSN NUMBER); CREATE TABLE Prescribes (Patient NUMBER, Physician NUMBER, Appointment NUMBER, Dose TEXT, Medication NUMBER);"
      },
      {
        "question": "Sort in the descending order of dose.",
        "query": "SELECT * FROM physician AS t1 JOIN prescribes AS t2 ON t1.employeeid = t2.physician ORDER BY t2.dose DESC",
        "schema": "CREATE TABLE Appointment (Physician NUMBER); CREATE TABLE Prescribes (Medication NUMBER, Appointment NUMBER, Physician NUMBER, Dose TEXT, Patient NUMBER); CREATE TABLE Patient (PCP NUMBER, SSN NUMBER); CREATE TABLE Medication (Brand TEXT, Code NUMBER, Name TEXT); CREATE TABLE Physician (Position TEXT, EmployeeID NUMBER, SSN NUMBER, Name TEXT);"
      },
      {
        "question": "What are the names of the physician who prescribed the highest dose?",
        "query": "SELECT t1.name FROM physician AS t1 JOIN prescribes AS t2 ON t1.employeeid = t2.physician ORDER BY t2.dose DESC LIMIT 1",
        "schema": "CREATE TABLE Patient (PCP NUMBER, SSN NUMBER); CREATE TABLE Appointment (Physician NUMBER); CREATE TABLE Physician (SSN NUMBER, EmployeeID NUMBER, Name TEXT, Position TEXT); CREATE TABLE Prescribes (Appointment NUMBER, Patient NUMBER, Dose TEXT, Physician NUMBER, Medication NUMBER); CREATE TABLE Medication (Brand TEXT, Code NUMBER, Name TEXT);"
      }
    ],
    [
      {
        "question": "Which departments have some physicians primarily affiliated.",
        "query": "SELECT * FROM affiliated_with WHERE primaryaffiliation = 1",
        "schema": "CREATE TABLE Affiliated_With (PrimaryAffiliation BOOLEAN, Department NUMBER, Physician NUMBER); CREATE TABLE Stay (StayID NUMBER); CREATE TABLE Appointment (Physician NUMBER); CREATE TABLE Physician (Name TEXT, EmployeeID NUMBER, SSN NUMBER); CREATE TABLE Department (Head NUMBER, Name TEXT, DepartmentID NUMBER); CREATE TABLE Patient (PCP NUMBER, SSN NUMBER); CREATE TABLE Nurse (EmployeeID NUMBER); CREATE TABLE Trained_In (Physician NUMBER);"
      },
      {
        "question": "What are the distinct names of the departments?",
        "query": "SELECT DISTINCT t2.name FROM affiliated_with AS t1 JOIN department AS t2 ON t1.department = t2.departmentid WHERE primaryaffiliation = 1",
        "schema": "CREATE TABLE Trained_In (Physician NUMBER); CREATE TABLE Nurse (EmployeeID NUMBER); CREATE TABLE Stay (StayID NUMBER); CREATE TABLE Affiliated_With (Physician NUMBER, PrimaryAffiliation BOOLEAN, Department NUMBER); CREATE TABLE Appointment (Physician NUMBER); CREATE TABLE Physician (SSN NUMBER, Name TEXT, EmployeeID NUMBER); CREATE TABLE Department (Head NUMBER, Name TEXT, DepartmentID NUMBER); CREATE TABLE Patient (PCP NUMBER, SSN NUMBER);"
      }
    ]
  ],
  "game_1": [
    [
      {
        "question": "What information do you have on video games?",
        "query": "SELECT * FROM video_games",
        "schema": "CREATE TABLE Video_Games (GameID NUMBER, GType TEXT, GName TEXT); CREATE TABLE Student (StuID NUMBER);"
      },
      {
        "question": "How many of them are there?",
        "query": "SELECT count(*) FROM video_games",
        "schema": "CREATE TABLE Student (StuID NUMBER); CREATE TABLE Video_Games (GName TEXT, GameID NUMBER, GType TEXT);"
      }
    ],
    [
      {
        "question": "What are the game types for each video game?",
        "query": "SELECT gtype FROM video_games",
        "schema": "CREATE TABLE Video_Games (GName TEXT, GType TEXT, GameID NUMBER);"
      },
      {
        "question": "Give me a list of the different game types?",
        "query": "SELECT DISTINCT gtype FROM video_games",
        "schema": "CREATE TABLE Video_Games (GType TEXT, GName TEXT, GameID NUMBER);"
      },
      {
        "question": "How long is that list?",
        "query": "SELECT count(DISTINCT gtype) FROM video_games",
        "schema": "CREATE TABLE Video_Games (GName TEXT, GType TEXT, GameID NUMBER);"
      }
    ],
    [
      {
        "question": "What is the type of each game?",
        "query": "SELECT gtype FROM video_games",
        "schema": "CREATE TABLE Video_Games (GName TEXT, GType TEXT, GameID NUMBER); CREATE TABLE Plays_Games (GameID NUMBER);"
      },
      {
        "question": "What is a list of the different types?",
        "query": "SELECT DISTINCT gtype FROM video_games",
        "schema": "CREATE TABLE Plays_Games (GameID NUMBER); CREATE TABLE Video_Games (GameID NUMBER, GName TEXT, GType TEXT);"
      }
    ],
    [
      {
        "question": "What is the type of each video game?",
        "query": "SELECT gtype FROM video_games",
        "schema": "CREATE TABLE Video_Games (GameID NUMBER, GName TEXT, GType TEXT);"
      },
      {
        "question": "Also, what are their names?",
        "query": "SELECT gname , gtype FROM video_games",
        "schema": "CREATE TABLE Video_Games (GType TEXT, GameID NUMBER, GName TEXT);"
      },
      {
        "question": "Order the above information by the game name alphabetically.",
        "query": "SELECT gname , gtype FROM video_games ORDER BY gname",
        "schema": "CREATE TABLE Video_Games (GName TEXT, GType TEXT, GameID NUMBER);"
      }
    ],
    [
      {
        "question": "What information is there on video games?",
        "query": "SELECT * FROM video_games",
        "schema": "CREATE TABLE Video_Games (GName TEXT, GameID NUMBER, GType TEXT);"
      },
      {
        "question": "What information do you have on video games that are of type collectible card game?",
        "query": "SELECT * FROM video_games WHERE gtype = \"collectible card game\"",
        "schema": "CREATE TABLE Video_Games (GameID NUMBER, GType TEXT, GName TEXT);"
      },
      {
        "question": "What are their names?",
        "query": "SELECT gname FROM video_games WHERE gtype = \"collectible card game\"",
        "schema": "CREATE TABLE Video_Games (GameID NUMBER, GType TEXT, GName TEXT);"
      }
    ],
    [
      {
        "question": "What is the name of each game?",
        "query": "SELECT gname FROM video_games",
        "schema": "CREATE TABLE Student (StuID NUMBER); CREATE TABLE Video_Games (GName TEXT, GType TEXT, GameID NUMBER); CREATE TABLE Plays_Games (GameID NUMBER, StuID NUMBER);"
      },
      {
        "question": "What information do you have on the game called Call of Destiny?",
        "query": "SELECT * FROM video_games WHERE gname = \"Call of Destiny\"",
        "schema": "CREATE TABLE Student (StuID NUMBER); CREATE TABLE Plays_Games (GameID NUMBER, StuID NUMBER); CREATE TABLE Video_Games (GameID NUMBER, GType TEXT, GName TEXT);"
      },
      {
        "question": "What type is it?",
        "query": "SELECT gtype FROM video_games WHERE gname = \"Call of Destiny\"",
        "schema": "CREATE TABLE Video_Games (GName TEXT, GType TEXT, GameID NUMBER); CREATE TABLE Student (StuID NUMBER); CREATE TABLE Plays_Games (StuID NUMBER, GameID NUMBER);"
      }
    ],
    [
      {
        "question": "What are the different types of video games?",
        "query": "SELECT gtype FROM video_games",
        "schema": "CREATE TABLE Video_Games (GType TEXT, GameID NUMBER, GName TEXT);"
      },
      {
        "question": "For each type, what information is there on the games?",
        "query": "SELECT * FROM video_games GROUP BY gtype",
        "schema": "CREATE TABLE Video_Games (GName TEXT, GType TEXT, GameID NUMBER);"
      },
      {
        "question": "How many games are there for each type?",
        "query": "SELECT gtype , count(*) FROM video_games GROUP BY gtype",
        "schema": "CREATE TABLE Video_Games (GName TEXT, GType TEXT, GameID NUMBER);"
      }
    ],
    [
      {
        "question": "What are the game types?",
        "query": "SELECT gtype FROM video_games",
        "schema": "CREATE TABLE Plays_Games (GameID NUMBER, StuID NUMBER); CREATE TABLE Video_Games (GameID NUMBER, GType TEXT, GName TEXT); CREATE TABLE Student (StuID NUMBER);"
      },
      {
        "question": "Order the list of game types by number of games in descending order.",
        "query": "SELECT gtype FROM video_games GROUP BY gtype ORDER BY count(*) DESC",
        "schema": "CREATE TABLE Plays_Games (StuID NUMBER, GameID NUMBER); CREATE TABLE Video_Games (GameID NUMBER, GType TEXT, GName TEXT); CREATE TABLE Student (StuID NUMBER);"
      },
      {
        "question": "Which type has the most?",
        "query": "SELECT gtype FROM video_games GROUP BY gtype ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Student (StuID NUMBER); CREATE TABLE Plays_Games (GameID NUMBER, StuID NUMBER); CREATE TABLE Video_Games (GType TEXT, GameID NUMBER, GName TEXT);"
      }
    ],
    [
      {
        "question": "What are the different game types?",
        "query": "SELECT gtype FROM video_games",
        "schema": "CREATE TABLE Student (StuID NUMBER); CREATE TABLE Plays_Games (StuID NUMBER, GameID NUMBER); CREATE TABLE Video_Games (GType TEXT, GName TEXT, GameID NUMBER);"
      },
      {
        "question": "Order the list of game types by number of games in ascending order.",
        "query": "SELECT gtype FROM video_games GROUP BY gtype ORDER BY count(*)",
        "schema": "CREATE TABLE Student (StuID NUMBER); CREATE TABLE Video_Games (GameID NUMBER, GType TEXT, GName TEXT); CREATE TABLE Plays_Games (StuID NUMBER, GameID NUMBER);"
      },
      {
        "question": "Which type has the most?",
        "query": "SELECT gtype FROM video_games GROUP BY gtype ORDER BY count(*) LIMIT 1",
        "schema": "CREATE TABLE Video_Games (GType TEXT, GName TEXT, GameID NUMBER); CREATE TABLE Plays_Games (GameID NUMBER, StuID NUMBER); CREATE TABLE Student (StuID NUMBER);"
      }
    ],
    [
      {
        "question": "What are the student ids?",
        "query": "SELECT stuid FROM student",
        "schema": "CREATE TABLE Video_Games (GameID NUMBER); CREATE TABLE SportsInfo (StuID NUMBER); CREATE TABLE Student (StuID NUMBER, LName TEXT); CREATE TABLE Plays_Games (StuID NUMBER, GameID NUMBER);"
      },
      {
        "question": "Which of those are for students who live in the city with the code CHI?",
        "query": "SELECT stuid FROM student WHERE city_code = \"CHI\"",
        "schema": "CREATE TABLE Plays_Games (GameID NUMBER, StuID NUMBER); CREATE TABLE Video_Games (GameID NUMBER); CREATE TABLE Student (StuID NUMBER, LName TEXT, city_code TEXT); CREATE TABLE SportsInfo (StuID NUMBER);"
      }
    ],
    [
      {
        "question": "What information do you have on the students?",
        "query": "SELECT * FROM student",
        "schema": "CREATE TABLE Student (Fname TEXT, StuID NUMBER, Sex TEXT, LName TEXT); CREATE TABLE SportsInfo (StuID NUMBER); CREATE TABLE Plays_Games (StuID NUMBER); CREATE TABLE Video_Games (GameID NUMBER);"
      },
      {
        "question": "What are their ids?",
        "query": "SELECT stuid FROM student",
        "schema": "CREATE TABLE Plays_Games (StuID NUMBER); CREATE TABLE SportsInfo (StuID NUMBER); CREATE TABLE Student (Fname TEXT, Sex TEXT, StuID NUMBER, LName TEXT); CREATE TABLE Video_Games (GameID NUMBER);"
      },
      {
        "question": "Which of those are for students who have advisor 1121?",
        "query": "SELECT stuid FROM student WHERE advisor = 1121",
        "schema": "CREATE TABLE Student (LName TEXT, Sex TEXT, StuID NUMBER, Advisor NUMBER, Fname TEXT); CREATE TABLE Video_Games (GameID NUMBER); CREATE TABLE SportsInfo (StuID NUMBER); CREATE TABLE Plays_Games (StuID NUMBER);"
      }
    ],
    [
      {
        "question": "List all student information",
        "query": "SELECT * FROM student",
        "schema": "CREATE TABLE Video_Games (GameID NUMBER); CREATE TABLE Plays_Games (StuID NUMBER); CREATE TABLE Student (Fname TEXT, StuID NUMBER, Age NUMBER, city_code TEXT, LName TEXT, Major NUMBER, Advisor NUMBER); CREATE TABLE SportsInfo (StuID NUMBER);"
      },
      {
        "question": "Which of that information is for students in the major numbered 600?",
        "query": "SELECT * FROM student WHERE major = 600",
        "schema": "CREATE TABLE SportsInfo (StuID NUMBER); CREATE TABLE Video_Games (GameID NUMBER); CREATE TABLE Student (Age NUMBER, LName TEXT, StuID NUMBER, city_code TEXT, Fname TEXT, Advisor NUMBER, Major NUMBER); CREATE TABLE Plays_Games (StuID NUMBER);"
      },
      {
        "question": "What are their first names?",
        "query": "SELECT fname FROM student WHERE major = 600",
        "schema": "CREATE TABLE Video_Games (GameID NUMBER); CREATE TABLE SportsInfo (StuID NUMBER); CREATE TABLE Student (Fname TEXT, Age NUMBER, LName TEXT, Major NUMBER, StuID NUMBER, city_code TEXT, Advisor NUMBER); CREATE TABLE Plays_Games (StuID NUMBER);"
      }
    ],
    [
      {
        "question": "What are the different majors?",
        "query": "SELECT major FROM student",
        "schema": "CREATE TABLE SportsInfo (StuID NUMBER); CREATE TABLE Video_Games (GameID NUMBER); CREATE TABLE Student (Major NUMBER, StuID NUMBER); CREATE TABLE Plays_Games (StuID NUMBER);"
      },
      {
        "question": "For each of those, what is the average age?",
        "query": "SELECT avg(age) FROM student GROUP BY major",
        "schema": "CREATE TABLE Plays_Games (StuID NUMBER); CREATE TABLE Video_Games (GameID NUMBER); CREATE TABLE Student (Major NUMBER, Age NUMBER, StuID NUMBER); CREATE TABLE SportsInfo (StuID NUMBER);"
      },
      {
        "question": "Also, what is the minimum and maximum for each of those?",
        "query": "SELECT major , avg(age) , min(age) , max(age) FROM student GROUP BY major",
        "schema": "CREATE TABLE SportsInfo (StuID NUMBER); CREATE TABLE Plays_Games (StuID NUMBER); CREATE TABLE Video_Games (GameID NUMBER); CREATE TABLE Student (Age NUMBER, StuID NUMBER, Major NUMBER);"
      }
    ],
    [
      {
        "question": "What information do you have on each advisor?",
        "query": "SELECT * FROM student GROUP BY advisor",
        "schema": "CREATE TABLE Student (StuID NUMBER, Advisor NUMBER); CREATE TABLE Plays_Games (GameID NUMBER, StuID NUMBER); CREATE TABLE SportsInfo (StuID NUMBER); CREATE TABLE Video_Games (GameID NUMBER, GType TEXT, GName TEXT);"
      },
      {
        "question": "What is the name for each advisor?",
        "query": "SELECT advisor FROM student GROUP BY advisor",
        "schema": "CREATE TABLE SportsInfo (StuID NUMBER); CREATE TABLE Plays_Games (GameID NUMBER, StuID NUMBER); CREATE TABLE Video_Games (GType TEXT, GameID NUMBER, GName TEXT); CREATE TABLE Student (Advisor NUMBER, StuID NUMBER, LName TEXT, Fname TEXT);"
      },
      {
        "question": "Which of those are for advisors who have more than 1 students?",
        "query": "SELECT advisor FROM student GROUP BY advisor HAVING count(*) >= 2",
        "schema": "CREATE TABLE Video_Games (GameID NUMBER, GName TEXT, GType TEXT); CREATE TABLE SportsInfo (StuID NUMBER); CREATE TABLE Student (Advisor NUMBER, LName TEXT, StuID NUMBER, Fname TEXT); CREATE TABLE Plays_Games (StuID NUMBER, GameID NUMBER);"
      }
    ],
    [
      {
        "question": "What sport does every student play?",
        "query": "SELECT sportname FROM sportsinfo",
        "schema": "CREATE TABLE SportsInfo (StuID NUMBER, GamesPlayed NUMBER, SportName TEXT); CREATE TABLE Student (StuID NUMBER);"
      },
      {
        "question": "What is a list of the different types of sports?",
        "query": "SELECT DISTINCT sportname FROM sportsinfo",
        "schema": "CREATE TABLE SportsInfo (StuID NUMBER, SportName TEXT, GamesPlayed NUMBER); CREATE TABLE Student (StuID NUMBER);"
      },
      {
        "question": "How long is that list?",
        "query": "SELECT count(DISTINCT sportname) FROM sportsinfo",
        "schema": "CREATE TABLE Student (StuID NUMBER); CREATE TABLE SportsInfo (SportName TEXT, GamesPlayed NUMBER, StuID NUMBER, HoursPerWeek NUMBER);"
      }
    ],
    [
      {
        "question": "What is the student id of every student involved in sports?",
        "query": "SELECT stuid FROM sportsinfo",
        "schema": "CREATE TABLE Student (LName TEXT, StuID NUMBER); CREATE TABLE SportsInfo (StuID NUMBER, SportName TEXT);"
      },
      {
        "question": "Delete any repeats.",
        "query": "SELECT DISTINCT stuid FROM sportsinfo",
        "schema": "CREATE TABLE Student (LName TEXT, StuID NUMBER); CREATE TABLE SportsInfo (GamesPlayed NUMBER, SportName TEXT, StuID NUMBER);"
      },
      {
        "question": "How many different student ids are there?",
        "query": "SELECT count(DISTINCT stuid) FROM sportsinfo",
        "schema": "CREATE TABLE Student (LName TEXT, StuID NUMBER); CREATE TABLE SportsInfo (SportName TEXT, GamesPlayed NUMBER, StuID NUMBER);"
      }
    ],
    [
      {
        "question": "What information is there on all sport players?",
        "query": "SELECT * FROM sportsinfo",
        "schema": "CREATE TABLE Student (StuID NUMBER); CREATE TABLE SportsInfo (GamesPlayed NUMBER, StuID NUMBER, SportName TEXT);"
      },
      {
        "question": "Which of those are on scholarship?",
        "query": "SELECT * FROM sportsinfo WHERE onscholarship = 'Y'",
        "schema": "CREATE TABLE Student (StuID NUMBER); CREATE TABLE SportsInfo (GamesPlayed NUMBER, OnScholarship TEXT, SportName TEXT, StuID NUMBER);"
      },
      {
        "question": "What are their student ids?",
        "query": "SELECT stuid FROM sportsinfo WHERE onscholarship = 'Y'",
        "schema": "CREATE TABLE SportsInfo (GamesPlayed NUMBER, SportName TEXT, StuID NUMBER, OnScholarship TEXT); CREATE TABLE Student (StuID NUMBER);"
      }
    ],
    [
      {
        "question": "What information is there on all students who play sports?",
        "query": "SELECT * FROM sportsinfo",
        "schema": "CREATE TABLE Student (Sex TEXT, LName TEXT, StuID NUMBER, Major NUMBER, Age NUMBER); CREATE TABLE SportsInfo (StuID NUMBER, SportName TEXT, GamesPlayed NUMBER);"
      },
      {
        "question": "Which subset of this information is for students on scholarships?",
        "query": "SELECT * FROM sportsinfo WHERE onscholarship = 'Y'",
        "schema": "CREATE TABLE SportsInfo (SportName TEXT, StuID NUMBER, GamesPlayed NUMBER, OnScholarship TEXT); CREATE TABLE Student (Major NUMBER, LName TEXT, StuID NUMBER, Age NUMBER, Sex TEXT);"
      },
      {
        "question": "What are their last names?",
        "query": "SELECT t2.lname FROM sportsinfo AS t1 JOIN student AS t2 ON t1.stuid = t2.stuid WHERE t1.onscholarship = 'Y'",
        "schema": "CREATE TABLE Student (StuID NUMBER, Sex TEXT, Age NUMBER, Fname TEXT, LName TEXT, Major NUMBER); CREATE TABLE SportsInfo (SportName TEXT, StuID NUMBER, GamesPlayed NUMBER, OnScholarship TEXT);"
      }
    ],
    [
      {
        "question": "What sports information do you have?",
        "query": "SELECT * FROM sportsinfo",
        "schema": "CREATE TABLE SportsInfo (StuID NUMBER, GamesPlayed NUMBER, SportName TEXT); CREATE TABLE Student (LName TEXT, StuID NUMBER); CREATE TABLE Video_Games (GameID NUMBER);"
      },
      {
        "question": "How many games did each student play?",
        "query": "SELECT gamesplayed FROM sportsinfo",
        "schema": "CREATE TABLE Student (LName TEXT, StuID NUMBER); CREATE TABLE SportsInfo (GamesPlayed NUMBER, SportName TEXT, StuID NUMBER); CREATE TABLE Video_Games (GameID NUMBER); CREATE TABLE Plays_Games (StuID NUMBER, GameID NUMBER, Hours_Played NUMBER);"
      },
      {
        "question": "What is the total number played?",
        "query": "SELECT sum(gamesplayed) FROM sportsinfo",
        "schema": "CREATE TABLE Student (StuID NUMBER, LName TEXT); CREATE TABLE SportsInfo (GamesPlayed NUMBER, SportName TEXT, StuID NUMBER); CREATE TABLE Plays_Games (GameID NUMBER, Hours_Played NUMBER, StuID NUMBER); CREATE TABLE Video_Games (GameID NUMBER);"
      }
    ],
    [
      {
        "question": "How many games has each student played?",
        "query": "SELECT gamesplayed FROM sportsinfo",
        "schema": "CREATE TABLE Plays_Games (GameID NUMBER, StuID NUMBER, Hours_Played NUMBER); CREATE TABLE SportsInfo (StuID NUMBER, GamesPlayed NUMBER); CREATE TABLE Video_Games (GameID NUMBER); CREATE TABLE Student (Sex TEXT, Fname TEXT, LName TEXT, StuID NUMBER);"
      },
      {
        "question": "Which of those refer to football games played by scholarship students?",
        "query": "SELECT gamesplayed FROM sportsinfo WHERE sportname = \"Football\" AND onscholarship = 'Y'",
        "schema": "CREATE TABLE Student (Fname TEXT, StuID NUMBER, LName TEXT, Sex TEXT); CREATE TABLE Video_Games (GameID NUMBER); CREATE TABLE Plays_Games (GameID NUMBER, StuID NUMBER, Hours_Played NUMBER); CREATE TABLE SportsInfo (StuID NUMBER, OnScholarship TEXT, GamesPlayed NUMBER, SportName TEXT);"
      },
      {
        "question": "What is the total number of those games played?",
        "query": "SELECT sum(gamesplayed) FROM sportsinfo WHERE sportname = \"Football\" AND onscholarship = 'Y'",
        "schema": "CREATE TABLE SportsInfo (StuID NUMBER, OnScholarship TEXT, GamesPlayed NUMBER, SportName TEXT); CREATE TABLE Video_Games (GameID NUMBER); CREATE TABLE Plays_Games (GameID NUMBER, Hours_Played NUMBER, StuID NUMBER); CREATE TABLE Student (StuID NUMBER, Sex TEXT, Fname TEXT, LName TEXT);"
      }
    ],
    [
      {
        "question": "What information do you have on each sport?",
        "query": "SELECT * FROM sportsinfo GROUP BY sportname",
        "schema": "CREATE TABLE Student (StuID NUMBER); CREATE TABLE SportsInfo (StuID NUMBER, SportName TEXT, GamesPlayed NUMBER);"
      },
      {
        "question": "How many students play each one?",
        "query": "SELECT count(*) FROM sportsinfo GROUP BY sportname",
        "schema": "CREATE TABLE SportsInfo (StuID NUMBER, SportName TEXT, GamesPlayed NUMBER); CREATE TABLE Student (StuID NUMBER);"
      },
      {
        "question": "Also, what are the names of each sport?",
        "query": "SELECT sportname , count(*) FROM sportsinfo GROUP BY sportname",
        "schema": "CREATE TABLE SportsInfo (SportName TEXT, StuID NUMBER, GamesPlayed NUMBER); CREATE TABLE Student (StuID NUMBER);"
      }
    ],
    [
      {
        "question": "How many sports does each student play?",
        "query": "SELECT count(*) FROM sportsinfo GROUP BY stuid",
        "schema": "CREATE TABLE Student (Sex TEXT, StuID NUMBER, Age NUMBER); CREATE TABLE SportsInfo (GamesPlayed NUMBER, StuID NUMBER, SportName TEXT);"
      },
      {
        "question": "Also, how many games has each student played?",
        "query": "SELECT count(*) , sum(gamesplayed) FROM sportsinfo GROUP BY stuid",
        "schema": "CREATE TABLE Student (Age NUMBER, StuID NUMBER, Sex TEXT); CREATE TABLE Plays_Games (GameID NUMBER, StuID NUMBER, Hours_Played NUMBER); CREATE TABLE SportsInfo (GamesPlayed NUMBER, SportName TEXT, StuID NUMBER);"
      },
      {
        "question": "Also, what are their different student ids?",
        "query": "SELECT stuid , count(*) , sum(gamesplayed) FROM sportsinfo GROUP BY stuid",
        "schema": "CREATE TABLE SportsInfo (StuID NUMBER, GamesPlayed NUMBER, SportName TEXT); CREATE TABLE Student (Sex TEXT, Age NUMBER, StuID NUMBER); CREATE TABLE Plays_Games (GameID NUMBER, Hours_Played NUMBER, StuID NUMBER);"
      }
    ],
    [
      {
        "question": "What are the student IDs for every student?",
        "query": "SELECT stuid FROM sportsinfo GROUP BY stuid",
        "schema": "CREATE TABLE SportsInfo (StuID NUMBER); CREATE TABLE Student (Age NUMBER, StuID NUMBER, Advisor NUMBER, LName TEXT);"
      },
      {
        "question": "Which of those are for students who played more than 10 hours of a week for all sports?",
        "query": "SELECT stuid FROM sportsinfo GROUP BY stuid HAVING sum(hoursperweek) > 10",
        "schema": "CREATE TABLE Student (LName TEXT, Age NUMBER, Advisor NUMBER, StuID NUMBER); CREATE TABLE Plays_Games (StuID NUMBER, Hours_Played NUMBER); CREATE TABLE SportsInfo (StuID NUMBER, HoursPerWeek NUMBER, SportName TEXT);"
      }
    ],
    [
      {
        "question": "For each student, how many sports do they play?",
        "query": "SELECT count(*) FROM sportsinfo GROUP BY stuid",
        "schema": "CREATE TABLE Student (Sex TEXT, StuID NUMBER, LName TEXT, Age NUMBER); CREATE TABLE SportsInfo (GamesPlayed NUMBER, SportName TEXT, StuID NUMBER);"
      },
      {
        "question": "Order the information in descending order by number of sports played.",
        "query": "SELECT count(*) FROM sportsinfo AS t1 JOIN student AS t2 ON t1.stuid = t2.stuid GROUP BY t1.stuid",
        "schema": "CREATE TABLE Student (Sex TEXT, StuID NUMBER, Age NUMBER, LName TEXT); CREATE TABLE SportsInfo (StuID NUMBER, GamesPlayed NUMBER, SportName TEXT);"
      },
      {
        "question": "What is the first and last name of student who played the most?",
        "query": "SELECT t2.fname , t2.lname FROM sportsinfo AS t1 JOIN student AS t2 ON t1.stuid = t2.stuid GROUP BY t1.stuid ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Student (Fname TEXT, LName TEXT, Sex TEXT, Age NUMBER, StuID NUMBER); CREATE TABLE SportsInfo (SportName TEXT, GamesPlayed NUMBER, StuID NUMBER);"
      }
    ],
    [
      {
        "question": "What is the name of every sport?",
        "query": "SELECT sportname FROM sportsinfo GROUP BY sportname",
        "schema": "CREATE TABLE SportsInfo (SportName TEXT, StuID NUMBER); CREATE TABLE Student (StuID NUMBER);"
      },
      {
        "question": "Of those, which had students on scholarship?",
        "query": "SELECT sportname FROM sportsinfo WHERE onscholarship = 'Y' GROUP BY sportname",
        "schema": "CREATE TABLE SportsInfo (SportName TEXT, StuID NUMBER, OnScholarship TEXT); CREATE TABLE Student (StuID NUMBER);"
      },
      {
        "question": "Which sport has the most of those students?",
        "query": "SELECT sportname FROM sportsinfo WHERE onscholarship = 'Y' GROUP BY sportname ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE SportsInfo (StuID NUMBER, OnScholarship TEXT, SportName TEXT); CREATE TABLE Student (StuID NUMBER);"
      }
    ],
    [
      {
        "question": "What are the student ids of all those who play sports?",
        "query": "SELECT stuid FROM sportsinfo",
        "schema": "CREATE TABLE Student (Sex TEXT, StuID NUMBER); CREATE TABLE SportsInfo (StuID NUMBER, SportName TEXT);"
      },
      {
        "question": "What are the ids of all students?",
        "query": "SELECT stuid FROM student",
        "schema": "CREATE TABLE Student (Sex TEXT, StuID NUMBER); CREATE TABLE SportsInfo (SportName TEXT, StuID NUMBER);"
      },
      {
        "question": "Which ids are in the latter list but not the former?",
        "query": "SELECT stuid FROM student EXCEPT SELECT stuid FROM sportsinfo",
        "schema": "CREATE TABLE Student (LName TEXT, Sex TEXT, StuID NUMBER); CREATE TABLE SportsInfo (StuID NUMBER, SportName TEXT);"
      }
    ],
    [
      {
        "question": "What are the ids of all students who are in major 600?",
        "query": "SELECT stuid FROM student WHERE major = 600",
        "schema": "CREATE TABLE SportsInfo (StuID NUMBER); CREATE TABLE Plays_Games (StuID NUMBER); CREATE TABLE Student (StuID NUMBER, LName TEXT, Sex TEXT, Age NUMBER, Major NUMBER);"
      },
      {
        "question": "What are the student ids for all those on scholarship?",
        "query": "SELECT stuid FROM sportsinfo WHERE onscholarship = 'Y'",
        "schema": "CREATE TABLE Student (LName TEXT, StuID NUMBER, Age NUMBER, Sex TEXT, Major NUMBER); CREATE TABLE SportsInfo (OnScholarship TEXT, StuID NUMBER); CREATE TABLE Plays_Games (StuID NUMBER);"
      },
      {
        "question": "What ids are in both categories?",
        "query": "SELECT stuid FROM student WHERE major = 600 INTERSECT SELECT stuid FROM sportsinfo WHERE onscholarship = 'Y'",
        "schema": "CREATE TABLE Student (Sex TEXT, StuID NUMBER, Major NUMBER, LName TEXT, Age NUMBER); CREATE TABLE Plays_Games (StuID NUMBER); CREATE TABLE SportsInfo (StuID NUMBER, SportName TEXT, OnScholarship TEXT);"
      }
    ],
    [
      {
        "question": "What are the ids of all female students?",
        "query": "SELECT stuid FROM student WHERE sex = 'F'",
        "schema": "CREATE TABLE SportsInfo (StuID NUMBER); CREATE TABLE Student (LName TEXT, Sex TEXT, StuID NUMBER);"
      },
      {
        "question": "What are the student ids of all those who play football?",
        "query": "SELECT stuid FROM sportsinfo WHERE sportname = \"Football\"",
        "schema": "CREATE TABLE Student (LName TEXT, Sex TEXT, StuID NUMBER); CREATE TABLE SportsInfo (SportName TEXT, StuID NUMBER);"
      },
      {
        "question": "What ids are for both?",
        "query": "SELECT stuid FROM student WHERE sex = 'F' INTERSECT SELECT stuid FROM sportsinfo WHERE sportname = \"Football\"",
        "schema": "CREATE TABLE SportsInfo (SportName TEXT, StuID NUMBER); CREATE TABLE Student (LName TEXT, StuID NUMBER, Sex TEXT);"
      }
    ],
    [
      {
        "question": "What are the ids of all the students?",
        "query": "SELECT stuid FROM student WHERE sex = 'M'",
        "schema": "CREATE TABLE Video_Games (GameID NUMBER); CREATE TABLE Student (LName TEXT, StuID NUMBER, Sex TEXT); CREATE TABLE Plays_Games (StuID NUMBER); CREATE TABLE SportsInfo (StuID NUMBER);"
      },
      {
        "question": "What are the ids of all those who play football?",
        "query": "SELECT stuid FROM sportsinfo WHERE sportname = \"Football\"",
        "schema": "CREATE TABLE Video_Games (GameID NUMBER); CREATE TABLE Plays_Games (StuID NUMBER); CREATE TABLE SportsInfo (StuID NUMBER, SportName TEXT); CREATE TABLE Student (Sex TEXT, LName TEXT, StuID NUMBER);"
      },
      {
        "question": "What are the ids of those who don't play football?",
        "query": "SELECT stuid FROM student WHERE sex = 'M' EXCEPT SELECT stuid FROM sportsinfo WHERE sportname = \"Football\"",
        "schema": "CREATE TABLE Plays_Games (StuID NUMBER); CREATE TABLE Student (LName TEXT, StuID NUMBER, Sex TEXT); CREATE TABLE SportsInfo (StuID NUMBER, SportName TEXT); CREATE TABLE Video_Games (GameID NUMBER);"
      }
    ],
    [
      {
        "question": "What information on sports do you have for the student named David Shieber?",
        "query": "SELECT * FROM sportsinfo AS t1 JOIN student AS t2 ON t1.stuid = t2.stuid WHERE t2.fname = \"David\" AND t2.lname = \"Shieber\"",
        "schema": "CREATE TABLE Student (LName TEXT, Fname TEXT, StuID NUMBER); CREATE TABLE SportsInfo (GamesPlayed NUMBER, SportName TEXT, StuID NUMBER, OnScholarship TEXT);"
      },
      {
        "question": "How many hours per week does he practice in total?",
        "query": "SELECT sum(hoursperweek) FROM sportsinfo AS t1 JOIN student AS t2 ON t1.stuid = t2.stuid WHERE t2.fname = \"David\" AND t2.lname = \"Shieber\"",
        "schema": "CREATE TABLE Student (LName TEXT, StuID NUMBER, Fname TEXT); CREATE TABLE SportsInfo (HoursPerWeek NUMBER, OnScholarship TEXT, StuID NUMBER, SportName TEXT, GamesPlayed NUMBER);"
      },
      {
        "question": "Also, how many games does he play overall?",
        "query": "SELECT sum(hoursperweek) , sum(gamesplayed) FROM sportsinfo AS t1 JOIN student AS t2 ON t1.stuid = t2.stuid WHERE t2.fname = \"David\" AND t2.lname = \"Shieber\"",
        "schema": "CREATE TABLE SportsInfo (StuID NUMBER, HoursPerWeek NUMBER, SportName TEXT, OnScholarship TEXT, GamesPlayed NUMBER); CREATE TABLE Plays_Games (Hours_Played NUMBER, GameID NUMBER, StuID NUMBER); CREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT);"
      }
    ],
    [
      {
        "question": "What sports information is there on students under the age of 20?",
        "query": "SELECT * FROM sportsinfo AS t1 JOIN student AS t2 ON t1.stuid = t2.stuid WHERE t2.age < 20",
        "schema": "CREATE TABLE Student (Sex TEXT, StuID NUMBER, Age NUMBER); CREATE TABLE SportsInfo (SportName TEXT, StuID NUMBER, OnScholarship TEXT);"
      },
      {
        "question": "How many hours per week do they practice in total?",
        "query": "SELECT sum(hoursperweek) FROM sportsinfo AS t1 JOIN student AS t2 ON t1.stuid = t2.stuid WHERE t2.age < 20",
        "schema": "CREATE TABLE SportsInfo (StuID NUMBER, HoursPerWeek NUMBER, OnScholarship TEXT, SportName TEXT); CREATE TABLE Student (StuID NUMBER, Sex TEXT, Age NUMBER);"
      },
      {
        "question": "Also, how many games do they play overall?",
        "query": "SELECT sum(hoursperweek) , sum(gamesplayed) FROM sportsinfo AS t1 JOIN student AS t2 ON t1.stuid = t2.stuid WHERE t2.age < 20",
        "schema": "CREATE TABLE SportsInfo (SportName TEXT, HoursPerWeek NUMBER, GamesPlayed NUMBER, OnScholarship TEXT, StuID NUMBER); CREATE TABLE Student (Sex TEXT, Age NUMBER, StuID NUMBER); CREATE TABLE Plays_Games (Hours_Played NUMBER, StuID NUMBER);"
      }
    ],
    [
      {
        "question": "What are the student ids of those who play games?",
        "query": "SELECT stuid FROM plays_games",
        "schema": "CREATE TABLE Video_Games (GameID NUMBER, GType TEXT); CREATE TABLE Student (Sex TEXT, LName TEXT, StuID NUMBER); CREATE TABLE Plays_Games (StuID NUMBER, Hours_Played NUMBER, GameID NUMBER); CREATE TABLE SportsInfo (StuID NUMBER, GamesPlayed NUMBER);"
      },
      {
        "question": "Give me a list of unique ids.",
        "query": "SELECT DISTINCT stuid FROM plays_games",
        "schema": "CREATE TABLE Video_Games (GType TEXT, GameID NUMBER); CREATE TABLE Student (StuID NUMBER, LName TEXT, Sex TEXT); CREATE TABLE Plays_Games (GameID NUMBER, Hours_Played NUMBER, StuID NUMBER); CREATE TABLE SportsInfo (StuID NUMBER, GamesPlayed NUMBER);"
      },
      {
        "question": "How long is it?",
        "query": "SELECT count(DISTINCT stuid) FROM plays_games",
        "schema": "CREATE TABLE SportsInfo (GamesPlayed NUMBER, StuID NUMBER); CREATE TABLE Student (Sex TEXT, StuID NUMBER, LName TEXT); CREATE TABLE Plays_Games (StuID NUMBER, Hours_Played NUMBER, GameID NUMBER); CREATE TABLE Video_Games (GameID NUMBER, GType TEXT);"
      }
    ],
    [
      {
        "question": "What are all the student ids?",
        "query": "SELECT stuid FROM student",
        "schema": "CREATE TABLE Student (Advisor NUMBER, StuID NUMBER); CREATE TABLE SportsInfo (StuID NUMBER); CREATE TABLE Plays_Games (GameID NUMBER, StuID NUMBER); CREATE TABLE Video_Games (GameID NUMBER);"
      },
      {
        "question": "What are the student ids of all who play games?",
        "query": "SELECT stuid FROM plays_games",
        "schema": "CREATE TABLE Student (LName TEXT, Advisor NUMBER, StuID NUMBER); CREATE TABLE Video_Games (GameID NUMBER); CREATE TABLE Plays_Games (StuID NUMBER, GameID NUMBER); CREATE TABLE SportsInfo (GamesPlayed NUMBER, StuID NUMBER);"
      },
      {
        "question": "What are the ids of all those in the first category but not the second?",
        "query": "SELECT stuid FROM student EXCEPT SELECT stuid FROM plays_games",
        "schema": "CREATE TABLE Plays_Games (StuID NUMBER, GameID NUMBER); CREATE TABLE SportsInfo (GamesPlayed NUMBER, StuID NUMBER); CREATE TABLE Student (Advisor NUMBER, StuID NUMBER, LName TEXT); CREATE TABLE Video_Games (GameID NUMBER);"
      }
    ],
    [
      {
        "question": "What are the ids of all students who play sports?",
        "query": "SELECT stuid FROM sportsinfo",
        "schema": "CREATE TABLE Student (LName TEXT, StuID NUMBER, Sex TEXT); CREATE TABLE SportsInfo (SportName TEXT, StuID NUMBER);"
      },
      {
        "question": "What are the student ids of all those who play games?",
        "query": "SELECT stuid FROM plays_games",
        "schema": "CREATE TABLE SportsInfo (GamesPlayed NUMBER, StuID NUMBER, SportName TEXT); CREATE TABLE Plays_Games (Hours_Played NUMBER, StuID NUMBER, GameID NUMBER); CREATE TABLE Student (Sex TEXT, StuID NUMBER, LName TEXT);"
      },
      {
        "question": "What are the ids of those who play sports but don't play games?",
        "query": "SELECT stuid FROM sportsinfo INTERSECT SELECT stuid FROM plays_games",
        "schema": "CREATE TABLE Plays_Games (StuID NUMBER, GameID NUMBER, Hours_Played NUMBER); CREATE TABLE SportsInfo (StuID NUMBER, SportName TEXT, GamesPlayed NUMBER); CREATE TABLE Student (LName TEXT, StuID NUMBER, Sex TEXT);"
      }
    ],
    [
      {
        "question": "How many hours did each student play for each game?",
        "query": "SELECT hours_played FROM plays_games GROUP BY gameid",
        "schema": "CREATE TABLE SportsInfo (StuID NUMBER, GamesPlayed NUMBER); CREATE TABLE Video_Games (GameID NUMBER, GName TEXT, GType TEXT); CREATE TABLE Student (StuID NUMBER, LName TEXT); CREATE TABLE Plays_Games (Hours_Played NUMBER, GameID NUMBER, StuID NUMBER);"
      },
      {
        "question": "What is the toal number of hours played for each game?",
        "query": "SELECT sum(hours_played) FROM plays_games GROUP BY gameid",
        "schema": "CREATE TABLE Video_Games (GType TEXT, GName TEXT, GameID NUMBER); CREATE TABLE SportsInfo (StuID NUMBER, GamesPlayed NUMBER); CREATE TABLE Plays_Games (GameID NUMBER, StuID NUMBER, Hours_Played NUMBER); CREATE TABLE Student (StuID NUMBER, LName TEXT);"
      },
      {
        "question": "And what is the id of each game?",
        "query": "SELECT gameid , sum(hours_played) FROM plays_games GROUP BY gameid",
        "schema": "CREATE TABLE Plays_Games (GameID NUMBER, Hours_Played NUMBER, StuID NUMBER); CREATE TABLE SportsInfo (GamesPlayed NUMBER, StuID NUMBER); CREATE TABLE Video_Games (GameID NUMBER, GType TEXT, GName TEXT); CREATE TABLE Student (StuID NUMBER, LName TEXT);"
      }
    ],
    [
      {
        "question": "For each student id, how many hours did each student play?",
        "query": "SELECT hours_played FROM plays_games GROUP BY stuid",
        "schema": "CREATE TABLE SportsInfo (StuID NUMBER); CREATE TABLE Student (LName TEXT, StuID NUMBER, Sex TEXT); CREATE TABLE Plays_Games (StuID NUMBER, Hours_Played NUMBER);"
      },
      {
        "question": "How much did they play in total?",
        "query": "SELECT sum(hours_played) FROM plays_games GROUP BY stuid",
        "schema": "CREATE TABLE Plays_Games (GameID NUMBER, Hours_Played NUMBER, StuID NUMBER); CREATE TABLE Student (StuID NUMBER, Sex TEXT, LName TEXT); CREATE TABLE SportsInfo (StuID NUMBER);"
      },
      {
        "question": "Also, what are their student ids?",
        "query": "SELECT stuid , sum(hours_played) FROM plays_games GROUP BY stuid",
        "schema": "CREATE TABLE SportsInfo (StuID NUMBER); CREATE TABLE Plays_Games (StuID NUMBER, GameID NUMBER, Hours_Played NUMBER); CREATE TABLE Student (LName TEXT, Sex TEXT, StuID NUMBER);"
      }
    ],
    [
      {
        "question": "What is the name of each game from its id?",
        "query": "SELECT gname FROM plays_games AS t1 JOIN video_games AS t2 ON t1.gameid = t2.gameid GROUP BY t1.gameid",
        "schema": "CREATE TABLE Video_Games (GameID NUMBER, GType TEXT, GName TEXT); CREATE TABLE Plays_Games (GameID NUMBER);"
      },
      {
        "question": "Order the names by total hours played.",
        "query": "SELECT gname FROM plays_games AS t1 JOIN video_games AS t2 ON t1.gameid = t2.gameid GROUP BY t1.gameid ORDER BY sum(hours_played) DESC",
        "schema": "CREATE TABLE Plays_Games (GameID NUMBER, StuID NUMBER, Hours_Played NUMBER); CREATE TABLE Video_Games (GameID NUMBER, GName TEXT, GType TEXT);"
      },
      {
        "question": "which one is first?",
        "query": "SELECT gname FROM plays_games AS t1 JOIN video_games AS t2 ON t1.gameid = t2.gameid GROUP BY t1.gameid ORDER BY sum(hours_played) DESC LIMIT 1",
        "schema": "CREATE TABLE Video_Games (GType TEXT, GName TEXT, GameID NUMBER); CREATE TABLE Plays_Games (Hours_Played NUMBER, StuID NUMBER, GameID NUMBER);"
      }
    ],
    [
      {
        "question": "What are the ids of all students who played football or Lacrosse?",
        "query": "SELECT stuid FROM sportsinfo WHERE sportname = \"Football\" OR sportname = \"Lacrosse\"",
        "schema": "CREATE TABLE Student (Sex TEXT, StuID NUMBER); CREATE TABLE SportsInfo (SportName TEXT, GamesPlayed NUMBER, StuID NUMBER);"
      },
      {
        "question": "What are the first names that correspond to those ids?",
        "query": "SELECT t2.fname FROM sportsinfo AS t1 JOIN student AS t2 ON t1.stuid = t2.stuid WHERE t1.sportname = \"Football\" OR t1.sportname = \"Lacrosse\"",
        "schema": "CREATE TABLE Student (Sex TEXT, Fname TEXT, StuID NUMBER, LName TEXT); CREATE TABLE SportsInfo (StuID NUMBER, GamesPlayed NUMBER, SportName TEXT);"
      },
      {
        "question": "Also, what are their last names?",
        "query": "SELECT t2.lname , t2.fname FROM sportsinfo AS t1 JOIN student AS t2 ON t1.stuid = t2.stuid WHERE t1.sportname = \"Football\" OR t1.sportname = \"Lacrosse\"",
        "schema": "CREATE TABLE Student (Fname TEXT, LName TEXT, Sex TEXT, StuID NUMBER); CREATE TABLE SportsInfo (SportName TEXT, GamesPlayed NUMBER, StuID NUMBER);"
      }
    ],
    [
      {
        "question": "What are the student ids of all who played Football?",
        "query": "SELECT stuid FROM sportsinfo WHERE sportname = \"Football\"",
        "schema": "CREATE TABLE SportsInfo (SportName TEXT, StuID NUMBER); CREATE TABLE Student (StuID NUMBER, LName TEXT);"
      },
      {
        "question": "Which of those ids are also marked as having played Lacrosse?",
        "query": "SELECT stuid FROM sportsinfo WHERE sportname = \"Football\" INTERSECT SELECT stuid FROM sportsinfo WHERE sportname = \"Lacrosse\"",
        "schema": "CREATE TABLE SportsInfo (SportName TEXT, StuID NUMBER); CREATE TABLE Student (StuID NUMBER, LName TEXT);"
      },
      {
        "question": "What are the first names and ages that correspond to those student ids?",
        "query": "SELECT fname , age FROM student WHERE stuid IN (SELECT stuid FROM sportsinfo WHERE sportname = \"Football\" INTERSECT SELECT stuid FROM sportsinfo WHERE sportname = \"Lacrosse\")",
        "schema": "CREATE TABLE Student (LName TEXT, Fname TEXT, Age NUMBER, StuID NUMBER); CREATE TABLE SportsInfo (SportName TEXT, StuID NUMBER);"
      }
    ]
  ],
  "college_2": [
    [
      {
        "question": "What are the distinct classroom buildings?",
        "query": "SELECT DISTINCT building FROM classroom",
        "schema": "CREATE TABLE classroom (room_number TEXT, building TEXT); CREATE TABLE department (building TEXT, dept_name TEXT); CREATE TABLE instructor (ID TEXT); CREATE TABLE section (building TEXT);"
      },
      {
        "question": "Of those, which have capacity of over 50?",
        "query": "SELECT DISTINCT building FROM classroom WHERE capacity > 50",
        "schema": "CREATE TABLE section (building TEXT); CREATE TABLE instructor (ID TEXT); CREATE TABLE classroom (capacity NUMBER, building TEXT, room_number TEXT); CREATE TABLE department (dept_name TEXT, building TEXT);"
      }
    ],
    [
      {
        "question": "Which classrooms are not in Lamberton?",
        "query": "SELECT * FROM classroom WHERE building ! = 'Lamberton'",
        "schema": "CREATE TABLE course (dept_name TEXT); CREATE TABLE teaches (ID TEXT); CREATE TABLE department (dept_name TEXT, building TEXT); CREATE TABLE classroom (building TEXT, capacity NUMBER, room_number TEXT); CREATE TABLE section (building TEXT, room_number TEXT);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT count(*) FROM classroom WHERE building ! = 'Lamberton'",
        "schema": "CREATE TABLE department (dept_name TEXT, building TEXT); CREATE TABLE course (dept_name TEXT); CREATE TABLE student (ID TEXT); CREATE TABLE classroom (capacity NUMBER, room_number TEXT, building TEXT); CREATE TABLE section (room_number TEXT, building TEXT); CREATE TABLE teaches (ID TEXT);"
      }
    ],
    [
      {
        "question": "What is the average department budget?",
        "query": "SELECT avg(budget) FROM department",
        "schema": "CREATE TABLE department (dept_name TEXT, budget NUMBER); CREATE TABLE course (dept_name TEXT); CREATE TABLE instructor (salary NUMBER, dept_name TEXT); CREATE TABLE student (ID TEXT, dept_name TEXT);"
      },
      {
        "question": "Which departments have a budget higher than average?",
        "query": "SELECT * FROM department WHERE budget > (SELECT avg(budget) FROM department)",
        "schema": "CREATE TABLE course (dept_name TEXT); CREATE TABLE student (dept_name TEXT, ID TEXT); CREATE TABLE instructor (dept_name TEXT, salary NUMBER); CREATE TABLE department (dept_name TEXT, budget NUMBER);"
      },
      {
        "question": "What are their names and buildings?",
        "query": "SELECT dept_name , building FROM department WHERE budget > (SELECT avg(budget) FROM department)",
        "schema": "CREATE TABLE student (dept_name TEXT, ID TEXT); CREATE TABLE department (dept_name TEXT, building TEXT, budget NUMBER); CREATE TABLE course (dept_name TEXT); CREATE TABLE instructor (dept_name TEXT, salary NUMBER); CREATE TABLE section (building TEXT); CREATE TABLE classroom (building TEXT);"
      }
    ],
    [
      {
        "question": "Which classrooms have capacity between 50 and 100?",
        "query": "SELECT * FROM classroom WHERE capacity BETWEEN 50 AND 100",
        "schema": "CREATE TABLE department (dept_name TEXT); CREATE TABLE classroom (capacity NUMBER, room_number TEXT, building TEXT);"
      },
      {
        "question": "What are their buildings and room numbers?",
        "query": "SELECT building , room_number FROM classroom WHERE capacity BETWEEN 50 AND 100",
        "schema": "CREATE TABLE section (building TEXT, room_number TEXT); CREATE TABLE department (dept_name TEXT, building TEXT); CREATE TABLE classroom (building TEXT, capacity NUMBER, room_number TEXT);"
      }
    ],
    [
      {
        "question": "Order the departments by budget in decreasing order.",
        "query": "SELECT * FROM department ORDER BY budget DESC",
        "schema": "CREATE TABLE student (dept_name TEXT); CREATE TABLE course (dept_name TEXT); CREATE TABLE instructor (dept_name TEXT); CREATE TABLE department (dept_name TEXT, budget NUMBER, building TEXT);"
      },
      {
        "question": "Which is has the highest budget?",
        "query": "SELECT * FROM department ORDER BY budget DESC LIMIT 1",
        "schema": "CREATE TABLE instructor (dept_name TEXT); CREATE TABLE department (dept_name TEXT, building TEXT, budget NUMBER); CREATE TABLE course (dept_name TEXT); CREATE TABLE student (dept_name TEXT);"
      },
      {
        "question": "What is its name and building?",
        "query": "SELECT dept_name , building FROM department ORDER BY budget DESC LIMIT 1",
        "schema": "CREATE TABLE course (dept_name TEXT); CREATE TABLE student (dept_name TEXT); CREATE TABLE section (building TEXT); CREATE TABLE classroom (building TEXT); CREATE TABLE department (dept_name TEXT, building TEXT, budget NUMBER); CREATE TABLE instructor (dept_name TEXT);"
      }
    ],
    [
      {
        "question": "What are the names of students in the History department?",
        "query": "SELECT name FROM student WHERE dept_name = 'History'",
        "schema": "CREATE TABLE student (ID TEXT, name TEXT, tot_cred NUMBER, dept_name TEXT); CREATE TABLE teaches (ID TEXT); CREATE TABLE instructor (name TEXT, dept_name TEXT, ID TEXT); CREATE TABLE course (dept_name TEXT, course_id TEXT); CREATE TABLE department (dept_name TEXT); CREATE TABLE section (course_id TEXT);"
      },
      {
        "question": "Which one has the most credits?",
        "query": "SELECT name FROM student WHERE dept_name = 'History' ORDER BY tot_cred DESC LIMIT 1",
        "schema": "CREATE TABLE section (course_id TEXT); CREATE TABLE teaches (ID TEXT); CREATE TABLE student (name TEXT, ID TEXT, dept_name TEXT, tot_cred NUMBER); CREATE TABLE department (dept_name TEXT); CREATE TABLE course (credits NUMBER, course_id TEXT, dept_name TEXT); CREATE TABLE instructor (name TEXT, dept_name TEXT, ID TEXT);"
      }
    ],
    [
      {
        "question": "What are all the classrooms in Lamberton?",
        "query": "SELECT * FROM classroom WHERE building = 'Lamberton'",
        "schema": "CREATE TABLE section (room_number TEXT, building TEXT); CREATE TABLE classroom (room_number TEXT, building TEXT, capacity NUMBER); CREATE TABLE department (dept_name TEXT, building TEXT);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT count(*) FROM classroom WHERE building = 'Lamberton'",
        "schema": "CREATE TABLE department (dept_name TEXT, building TEXT); CREATE TABLE section (room_number TEXT, building TEXT); CREATE TABLE student (ID TEXT); CREATE TABLE classroom (room_number TEXT, building TEXT, capacity NUMBER);"
      }
    ],
    [
      {
        "question": "What are the student ids of students with advisors?",
        "query": "SELECT DISTINCT s_id FROM advisor",
        "schema": "CREATE TABLE takes (ID TEXT); CREATE TABLE teaches (ID TEXT); CREATE TABLE section (sec_id TEXT, course_id TEXT); CREATE TABLE advisor (s_ID TEXT, i_ID TEXT); CREATE TABLE instructor (ID TEXT, name TEXT); CREATE TABLE department (dept_name TEXT); CREATE TABLE course (course_id TEXT); CREATE TABLE student (name TEXT, dept_name TEXT, ID TEXT, tot_cred NUMBER);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT count(DISTINCT s_id) FROM advisor",
        "schema": "CREATE TABLE student (name TEXT, dept_name TEXT, tot_cred NUMBER, ID TEXT); CREATE TABLE advisor (s_ID TEXT, i_ID TEXT); CREATE TABLE takes (ID TEXT); CREATE TABLE department (dept_name TEXT); CREATE TABLE instructor (name TEXT, ID TEXT); CREATE TABLE course (course_id TEXT); CREATE TABLE section (sec_id TEXT, course_id TEXT); CREATE TABLE teaches (ID TEXT);"
      }
    ],
    [
      {
        "question": "What are all the department names of departments that offer courses?",
        "query": "SELECT DISTINCT dept_name FROM course",
        "schema": "CREATE TABLE course (dept_name TEXT, title TEXT, course_id TEXT); CREATE TABLE section (course_id TEXT); CREATE TABLE instructor (dept_name TEXT, ID TEXT, name TEXT); CREATE TABLE department (dept_name TEXT); CREATE TABLE student (dept_name TEXT, ID TEXT);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT count(DISTINCT dept_name) FROM course",
        "schema": "CREATE TABLE student (ID TEXT, dept_name TEXT); CREATE TABLE instructor (name TEXT, ID TEXT, dept_name TEXT); CREATE TABLE teaches (course_id TEXT); CREATE TABLE course (dept_name TEXT, course_id TEXT, title TEXT); CREATE TABLE department (dept_name TEXT); CREATE TABLE section (course_id TEXT);"
      }
    ],
    [
      {
        "question": "What are all the courses in the Physics department?",
        "query": "SELECT * FROM course WHERE dept_name = 'Physics'",
        "schema": "CREATE TABLE instructor (dept_name TEXT, ID TEXT); CREATE TABLE student (dept_name TEXT, ID TEXT); CREATE TABLE course (course_id TEXT, dept_name TEXT, title TEXT); CREATE TABLE section (course_id TEXT); CREATE TABLE department (dept_name TEXT);"
      },
      {
        "question": "What are their course ids?",
        "query": "SELECT DISTINCT course_id FROM course WHERE dept_name = 'Physics'",
        "schema": "CREATE TABLE course (title TEXT, course_id TEXT, dept_name TEXT); CREATE TABLE prereq (course_id TEXT); CREATE TABLE student (dept_name TEXT, ID TEXT); CREATE TABLE department (dept_name TEXT); CREATE TABLE instructor (dept_name TEXT, ID TEXT); CREATE TABLE section (course_id TEXT);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT count(DISTINCT course_id) FROM course WHERE dept_name = 'Physics'",
        "schema": "CREATE TABLE department (dept_name TEXT); CREATE TABLE section (course_id TEXT); CREATE TABLE course (course_id TEXT, title TEXT, dept_name TEXT); CREATE TABLE instructor (ID TEXT, dept_name TEXT); CREATE TABLE student (ID TEXT, dept_name TEXT); CREATE TABLE prereq (course_id TEXT);"
      }
    ],
    [
      {
        "question": "Which courses have some prerequisite?",
        "query": "SELECT * FROM course AS t1 JOIN prereq AS t2 ON t1.course_id = t2.course_id",
        "schema": "CREATE TABLE instructor (ID TEXT); CREATE TABLE section (course_id TEXT); CREATE TABLE student (tot_cred NUMBER, ID TEXT); CREATE TABLE prereq (prereq_id TEXT, course_id TEXT); CREATE TABLE department (dept_name TEXT); CREATE TABLE teaches (ID TEXT); CREATE TABLE takes (ID TEXT); CREATE TABLE course (dept_name TEXT, title TEXT, course_id TEXT);"
      },
      {
        "question": "Which ones have two prerequisites among them?",
        "query": "SELECT * FROM course AS t1 JOIN prereq AS t2 ON t1.course_id = t2.course_id GROUP BY t2.course_id HAVING count(*) = 2",
        "schema": "CREATE TABLE instructor (ID TEXT); CREATE TABLE course (dept_name TEXT, course_id TEXT, title TEXT); CREATE TABLE teaches (ID TEXT); CREATE TABLE section (course_id TEXT); CREATE TABLE takes (ID TEXT); CREATE TABLE prereq (course_id TEXT, prereq_id TEXT); CREATE TABLE department (dept_name TEXT); CREATE TABLE student (ID TEXT, tot_cred NUMBER);"
      },
      {
        "question": "What are their titles?",
        "query": "SELECT t1.title FROM course AS t1 JOIN prereq AS t2 ON t1.course_id = t2.course_id GROUP BY t2.course_id HAVING count(*) = 2",
        "schema": "CREATE TABLE teaches (ID TEXT); CREATE TABLE instructor (ID TEXT); CREATE TABLE course (title TEXT, dept_name TEXT, course_id TEXT); CREATE TABLE student (ID TEXT, tot_cred NUMBER); CREATE TABLE section (course_id TEXT); CREATE TABLE department (dept_name TEXT); CREATE TABLE prereq (course_id TEXT, prereq_id TEXT); CREATE TABLE takes (ID TEXT);"
      }
    ],
    [
      {
        "question": "Which courses have more than 1 prerequisite?",
        "query": "SELECT * FROM course AS t1 JOIN prereq AS t2 ON t1.course_id = t2.course_id GROUP BY t2.course_id HAVING count(*) > 1",
        "schema": "CREATE TABLE instructor (ID TEXT); CREATE TABLE prereq (prereq_id TEXT, course_id TEXT); CREATE TABLE department (dept_name TEXT); CREATE TABLE teaches (ID TEXT); CREATE TABLE section (course_id TEXT); CREATE TABLE takes (ID TEXT); CREATE TABLE student (ID TEXT, tot_cred NUMBER); CREATE TABLE course (dept_name TEXT, title TEXT, course_id TEXT);"
      },
      {
        "question": "What title, credit, and department name correspond to these?",
        "query": "SELECT t1.title , t1.credits , t1.dept_name FROM course AS t1 JOIN prereq AS t2 ON t1.course_id = t2.course_id GROUP BY t2.course_id HAVING count(*) > 1",
        "schema": "CREATE TABLE teaches (ID TEXT); CREATE TABLE instructor (ID TEXT, dept_name TEXT); CREATE TABLE department (dept_name TEXT); CREATE TABLE prereq (prereq_id TEXT, course_id TEXT); CREATE TABLE course (course_id TEXT, credits NUMBER, title TEXT, dept_name TEXT); CREATE TABLE section (course_id TEXT); CREATE TABLE student (tot_cred NUMBER, ID TEXT, dept_name TEXT); CREATE TABLE takes (ID TEXT);"
      }
    ],
    [
      {
        "question": "What are the ids for courses that have some prerequisites?",
        "query": "SELECT course_id FROM prereq",
        "schema": "CREATE TABLE takes (course_id TEXT); CREATE TABLE student (ID TEXT); CREATE TABLE prereq (course_id TEXT, prereq_id TEXT); CREATE TABLE instructor (ID TEXT); CREATE TABLE course (course_id TEXT, title TEXT, dept_name TEXT); CREATE TABLE section (course_id TEXT); CREATE TABLE teaches (course_id TEXT);"
      },
      {
        "question": "How many courses do not in the resulting list?",
        "query": "SELECT count(*) FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)",
        "schema": "CREATE TABLE student (ID TEXT); CREATE TABLE instructor (ID TEXT); CREATE TABLE section (course_id TEXT); CREATE TABLE teaches (course_id TEXT); CREATE TABLE takes (course_id TEXT); CREATE TABLE course (title TEXT, dept_name TEXT, course_id TEXT); CREATE TABLE prereq (course_id TEXT, prereq_id TEXT);"
      }
    ],
    [
      {
        "question": "What are the ids for prerequisites?",
        "query": "SELECT course_id FROM prereq",
        "schema": "CREATE TABLE advisor (s_ID TEXT); CREATE TABLE teaches (ID TEXT, course_id TEXT); CREATE TABLE course (course_id TEXT, title TEXT); CREATE TABLE student (ID TEXT, tot_cred NUMBER); CREATE TABLE instructor (ID TEXT); CREATE TABLE prereq (prereq_id TEXT, course_id TEXT); CREATE TABLE takes (ID TEXT, course_id TEXT); CREATE TABLE section (sec_id TEXT, course_id TEXT);"
      },
      {
        "question": "Which courses do not have prerequisites?",
        "query": "SELECT * FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)",
        "schema": "CREATE TABLE instructor (ID TEXT); CREATE TABLE prereq (course_id TEXT, prereq_id TEXT); CREATE TABLE advisor (s_ID TEXT); CREATE TABLE section (course_id TEXT, sec_id TEXT); CREATE TABLE student (tot_cred NUMBER, ID TEXT); CREATE TABLE takes (course_id TEXT, ID TEXT); CREATE TABLE teaches (course_id TEXT, ID TEXT); CREATE TABLE course (dept_name TEXT, course_id TEXT, title TEXT);"
      },
      {
        "question": "What are their titles?",
        "query": "SELECT title FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)",
        "schema": "CREATE TABLE instructor (ID TEXT); CREATE TABLE advisor (s_ID TEXT); CREATE TABLE takes (course_id TEXT, ID TEXT); CREATE TABLE section (sec_id TEXT, course_id TEXT); CREATE TABLE teaches (ID TEXT, course_id TEXT); CREATE TABLE course (title TEXT, dept_name TEXT, course_id TEXT); CREATE TABLE student (ID TEXT, tot_cred NUMBER); CREATE TABLE prereq (prereq_id TEXT, course_id TEXT);"
      }
    ],
    [
      {
        "question": "What are the ids of instructors who have taught a course?",
        "query": "SELECT DISTINCT id FROM teaches",
        "schema": "CREATE TABLE student (ID TEXT); CREATE TABLE section (course_id TEXT); CREATE TABLE advisor (s_ID TEXT, i_ID TEXT); CREATE TABLE teaches (course_id TEXT, ID TEXT); CREATE TABLE instructor (ID TEXT, dept_name TEXT, name TEXT); CREATE TABLE course (dept_name TEXT, course_id TEXT, title TEXT);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT COUNT (DISTINCT id) FROM teaches",
        "schema": "CREATE TABLE teaches (ID TEXT, course_id TEXT, sec_id TEXT); CREATE TABLE advisor (s_ID TEXT, i_ID TEXT); CREATE TABLE section (course_id TEXT); CREATE TABLE course (dept_name TEXT, course_id TEXT, title TEXT); CREATE TABLE instructor (name TEXT, dept_name TEXT, ID TEXT); CREATE TABLE student (ID TEXT);"
      }
    ],
    [
      {
        "question": "What are the budgets of the Marketing department?",
        "query": "SELECT budget FROM department WHERE dept_name = 'Marketing'",
        "schema": "CREATE TABLE course (course_id TEXT, title TEXT, dept_name TEXT); CREATE TABLE department (dept_name TEXT, budget NUMBER); CREATE TABLE instructor (ID TEXT, dept_name TEXT); CREATE TABLE student (ID TEXT, dept_name TEXT);"
      },
      {
        "question": "How about that for the Finance department?",
        "query": "SELECT budget FROM department WHERE dept_name = 'Finance'",
        "schema": "CREATE TABLE department (budget NUMBER, dept_name TEXT); CREATE TABLE student (ID TEXT, dept_name TEXT); CREATE TABLE instructor (dept_name TEXT, ID TEXT); CREATE TABLE course (dept_name TEXT, course_id TEXT, title TEXT);"
      },
      {
        "question": "What is their total budget?",
        "query": "SELECT sum(budget) FROM department WHERE dept_name = 'Marketing' OR dept_name = 'Finance'",
        "schema": "CREATE TABLE instructor (dept_name TEXT, ID TEXT); CREATE TABLE student (ID TEXT, dept_name TEXT); CREATE TABLE department (budget NUMBER, dept_name TEXT); CREATE TABLE course (dept_name TEXT, course_id TEXT, title TEXT);"
      }
    ],
    [
      {
        "question": "What is all the information about an instructor whose name contains 'Soisalon'?",
        "query": "SELECT * FROM instructor WHERE name LIKE '%Soisalon%'",
        "schema": "CREATE TABLE instructor (ID TEXT, dept_name TEXT, name TEXT); CREATE TABLE student (ID TEXT); CREATE TABLE teaches (ID TEXT); CREATE TABLE advisor (s_ID TEXT, i_ID TEXT);"
      },
      {
        "question": "What is their department name?",
        "query": "SELECT dept_name FROM instructor WHERE name LIKE '%Soisalon%'",
        "schema": "CREATE TABLE instructor (name TEXT, ID TEXT, dept_name TEXT); CREATE TABLE student (ID TEXT, dept_name TEXT); CREATE TABLE department (dept_name TEXT); CREATE TABLE teaches (ID TEXT); CREATE TABLE course (dept_name TEXT); CREATE TABLE advisor (s_ID TEXT, i_ID TEXT);"
      }
    ],
    [
      {
        "question": "How many rooms are there in Lamberton?",
        "query": "SELECT count(*) FROM classroom WHERE building = 'Lamberton'",
        "schema": "CREATE TABLE section (room_number TEXT, building TEXT); CREATE TABLE department (building TEXT, dept_name TEXT); CREATE TABLE classroom (room_number TEXT, building TEXT); CREATE TABLE course (dept_name TEXT);"
      },
      {
        "question": "Of those, how many have capacity less than 50?",
        "query": "SELECT count(*) FROM classroom WHERE building = 'Lamberton' AND capacity < 50",
        "schema": "CREATE TABLE section (building TEXT, room_number TEXT); CREATE TABLE classroom (room_number TEXT, building TEXT, capacity NUMBER); CREATE TABLE course (dept_name TEXT); CREATE TABLE department (building TEXT, dept_name TEXT);"
      }
    ],
    [
      {
        "question": "What is the average department budget?",
        "query": "SELECT avg(budget) FROM department",
        "schema": "CREATE TABLE department (budget NUMBER, dept_name TEXT); CREATE TABLE student (ID TEXT, dept_name TEXT); CREATE TABLE instructor (dept_name TEXT, salary NUMBER);"
      },
      {
        "question": "Which departments have a budget higher than that?",
        "query": "SELECT * FROM department WHERE budget > (SELECT avg(budget) FROM department)",
        "schema": "CREATE TABLE student (ID TEXT, dept_name TEXT); CREATE TABLE instructor (dept_name TEXT, salary NUMBER); CREATE TABLE department (budget NUMBER, dept_name TEXT);"
      },
      {
        "question": "What are their names and budgets?",
        "query": "SELECT dept_name , budget FROM department WHERE budget > (SELECT avg(budget) FROM department)",
        "schema": "CREATE TABLE department (budget NUMBER, dept_name TEXT); CREATE TABLE student (ID TEXT, dept_name TEXT); CREATE TABLE instructor (name TEXT, salary NUMBER, dept_name TEXT);"
      }
    ],
    [
      {
        "question": "What are the names of the professors in the Statistics department?",
        "query": "SELECT name FROM instructor WHERE dept_name = 'Statistics'",
        "schema": "CREATE TABLE instructor (name TEXT, ID TEXT, dept_name TEXT); CREATE TABLE course (dept_name TEXT); CREATE TABLE teaches (ID TEXT); CREATE TABLE student (ID TEXT); CREATE TABLE department (dept_name TEXT); CREATE TABLE advisor (i_ID TEXT, s_ID TEXT);"
      },
      {
        "question": "Which one earns the least?",
        "query": "SELECT name FROM instructor WHERE dept_name = 'Statistics' ORDER BY salary LIMIT 1",
        "schema": "CREATE TABLE student (ID TEXT); CREATE TABLE course (dept_name TEXT, credits NUMBER); CREATE TABLE instructor (dept_name TEXT, salary NUMBER, ID TEXT, name TEXT); CREATE TABLE advisor (i_ID TEXT, s_ID TEXT); CREATE TABLE teaches (ID TEXT); CREATE TABLE department (dept_name TEXT);"
      }
    ],
    [
      {
        "question": "What are the titles of Statistics courses?",
        "query": "SELECT title FROM course WHERE dept_name = 'Statistics'",
        "schema": "CREATE TABLE course (course_id TEXT, title TEXT, dept_name TEXT); CREATE TABLE department (dept_name TEXT); CREATE TABLE section (course_id TEXT);"
      },
      {
        "question": "Of these, which are also listed as Psychology courses?",
        "query": "SELECT title FROM course WHERE dept_name = 'Statistics' INTERSECT SELECT title FROM course WHERE dept_name = 'Psychology'",
        "schema": "CREATE TABLE course (dept_name TEXT, title TEXT, course_id TEXT); CREATE TABLE section (course_id TEXT); CREATE TABLE department (dept_name TEXT);"
      }
    ],
    [
      {
        "question": "What are the titles of Statistics courses?",
        "query": "SELECT title FROM course WHERE dept_name = 'Statistics'",
        "schema": "CREATE TABLE section (course_id TEXT); CREATE TABLE course (course_id TEXT, dept_name TEXT, title TEXT); CREATE TABLE department (dept_name TEXT);"
      },
      {
        "question": "Of these, which are not provided by the Psychology department?",
        "query": "SELECT title FROM course WHERE dept_name = 'Statistics' EXCEPT SELECT title FROM course WHERE dept_name = 'Psychology'",
        "schema": "CREATE TABLE course (course_id TEXT, dept_name TEXT, title TEXT); CREATE TABLE section (course_id TEXT); CREATE TABLE department (dept_name TEXT);"
      }
    ],
    [
      {
        "question": "What are the ids of instructors who taught in the Fall of 2009?",
        "query": "SELECT id FROM teaches WHERE semester = 'Fall' AND YEAR = 2009",
        "schema": "CREATE TABLE student (ID TEXT); CREATE TABLE instructor (ID TEXT, dept_name TEXT, name TEXT); CREATE TABLE teaches (semester TEXT, course_id TEXT, ID TEXT, year NUMBER, sec_id TEXT); CREATE TABLE course (course_id TEXT); CREATE TABLE advisor (i_ID TEXT, s_ID TEXT); CREATE TABLE section (semester TEXT, year NUMBER);"
      },
      {
        "question": "Of those, which did not teach in the Spring of 2010?",
        "query": "SELECT id FROM teaches WHERE semester = 'Fall' AND YEAR = 2009 EXCEPT SELECT id FROM teaches WHERE semester = 'Spring' AND YEAR = 2010",
        "schema": "CREATE TABLE advisor (i_ID TEXT, s_ID TEXT); CREATE TABLE teaches (semester TEXT, ID TEXT, course_id TEXT, year NUMBER, sec_id TEXT); CREATE TABLE section (semester TEXT, year NUMBER); CREATE TABLE instructor (dept_name TEXT, name TEXT, ID TEXT); CREATE TABLE student (ID TEXT); CREATE TABLE course (course_id TEXT);"
      }
    ],
    [
      {
        "question": "What are the distinct names of all the students?",
        "query": "SELECT DISTINCT name FROM student",
        "schema": "CREATE TABLE instructor (name TEXT); CREATE TABLE student (name TEXT, ID TEXT, dept_name TEXT, tot_cred NUMBER);"
      },
      {
        "question": "Of these, which took classes in 2009 or 2010?",
        "query": "SELECT DISTINCT t1.name FROM student AS t1 JOIN takes AS t2 ON t1.id = t2.id WHERE YEAR = 2009 OR YEAR = 2010",
        "schema": "CREATE TABLE instructor (name TEXT); CREATE TABLE takes (course_id TEXT, year NUMBER, semester TEXT, ID TEXT); CREATE TABLE section (semester TEXT, course_id TEXT, year NUMBER); CREATE TABLE student (dept_name TEXT, ID TEXT, tot_cred NUMBER, name TEXT); CREATE TABLE course (course_id TEXT);"
      }
    ],
    [
      {
        "question": "How many courses does each department have?",
        "query": "SELECT dept_name , count(*) FROM course GROUP BY dept_name",
        "schema": "CREATE TABLE course (dept_name TEXT, course_id TEXT, title TEXT); CREATE TABLE department (dept_name TEXT); CREATE TABLE section (course_id TEXT); CREATE TABLE student (ID TEXT, tot_cred NUMBER, dept_name TEXT); CREATE TABLE instructor (ID TEXT, dept_name TEXT); CREATE TABLE teaches (ID TEXT);"
      },
      {
        "question": "Order their names from greatest to least.",
        "query": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY count(*) DESC",
        "schema": "CREATE TABLE course (course_id TEXT, title TEXT, dept_name TEXT); CREATE TABLE teaches (ID TEXT); CREATE TABLE student (dept_name TEXT, tot_cred NUMBER, ID TEXT); CREATE TABLE department (dept_name TEXT); CREATE TABLE section (course_id TEXT); CREATE TABLE instructor (ID TEXT, dept_name TEXT);"
      },
      {
        "question": "What are the top 3?",
        "query": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY count(*) DESC LIMIT 3",
        "schema": "CREATE TABLE department (dept_name TEXT); CREATE TABLE student (tot_cred NUMBER, ID TEXT, dept_name TEXT); CREATE TABLE teaches (ID TEXT); CREATE TABLE instructor (dept_name TEXT, ID TEXT); CREATE TABLE section (course_id TEXT); CREATE TABLE course (dept_name TEXT, title TEXT, course_id TEXT);"
      }
    ],
    [
      {
        "question": "How many credits does each department offer?",
        "query": "SELECT dept_name , sum(credits) FROM course GROUP BY dept_name",
        "schema": "CREATE TABLE student (ID TEXT, tot_cred NUMBER, dept_name TEXT); CREATE TABLE advisor (i_ID TEXT, s_ID TEXT); CREATE TABLE instructor (dept_name TEXT, ID TEXT); CREATE TABLE prereq (course_id TEXT, prereq_id TEXT); CREATE TABLE department (dept_name TEXT, budget NUMBER); CREATE TABLE classroom (building TEXT, room_number TEXT); CREATE TABLE section (year NUMBER, course_id TEXT, sec_id TEXT); CREATE TABLE takes (ID TEXT); CREATE TABLE course (credits NUMBER, title TEXT, course_id TEXT, dept_name TEXT);"
      },
      {
        "question": "What is the name of the department which offers the most?",
        "query": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY sum(credits) DESC LIMIT 1",
        "schema": "CREATE TABLE instructor (ID TEXT, dept_name TEXT); CREATE TABLE section (course_id TEXT, sec_id TEXT, year NUMBER); CREATE TABLE advisor (i_ID TEXT, s_ID TEXT); CREATE TABLE student (dept_name TEXT, tot_cred NUMBER, ID TEXT); CREATE TABLE department (dept_name TEXT, budget NUMBER); CREATE TABLE prereq (prereq_id TEXT, course_id TEXT); CREATE TABLE course (dept_name TEXT, credits NUMBER, course_id TEXT, title TEXT); CREATE TABLE classroom (building TEXT, room_number TEXT); CREATE TABLE teaches (course_id TEXT); CREATE TABLE takes (ID TEXT);"
      }
    ],
    [
      {
        "question": "What are the titles of all courses?",
        "query": "SELECT title FROM course",
        "schema": "CREATE TABLE course (dept_name TEXT, title TEXT, course_id TEXT); CREATE TABLE section (course_id TEXT);"
      },
      {
        "question": "Order them by titles and credits.",
        "query": "SELECT title FROM course ORDER BY title , credits",
        "schema": "CREATE TABLE course (credits NUMBER, title TEXT, course_id TEXT, dept_name TEXT); CREATE TABLE section (course_id TEXT);"
      }
    ],
    [
      {
        "question": "Order the department names by increasing budget.",
        "query": "SELECT dept_name FROM department ORDER BY budget",
        "schema": "CREATE TABLE department (dept_name TEXT, budget NUMBER); CREATE TABLE student (dept_name TEXT); CREATE TABLE course (course_id TEXT, dept_name TEXT); CREATE TABLE instructor (ID TEXT, dept_name TEXT);"
      },
      {
        "question": "Which has the lowest?",
        "query": "SELECT dept_name FROM department ORDER BY budget LIMIT 1",
        "schema": "CREATE TABLE student (dept_name TEXT); CREATE TABLE instructor (dept_name TEXT, ID TEXT); CREATE TABLE department (budget NUMBER, dept_name TEXT); CREATE TABLE course (dept_name TEXT, course_id TEXT);"
      }
    ],
    [
      {
        "question": "Order the departments by decreasing budget.",
        "query": "SELECT * FROM department ORDER BY budget DESC",
        "schema": "CREATE TABLE department (dept_name TEXT, budget NUMBER); CREATE TABLE instructor (ID TEXT, dept_name TEXT); CREATE TABLE course (course_id TEXT, dept_name TEXT); CREATE TABLE student (ID TEXT, dept_name TEXT);"
      },
      {
        "question": "In the same order, what are their names and buildings?",
        "query": "SELECT dept_name , building FROM department ORDER BY budget DESC",
        "schema": "CREATE TABLE course (course_id TEXT, dept_name TEXT); CREATE TABLE classroom (building TEXT); CREATE TABLE department (budget NUMBER, dept_name TEXT, building TEXT); CREATE TABLE student (dept_name TEXT, ID TEXT); CREATE TABLE instructor (dept_name TEXT, ID TEXT); CREATE TABLE section (building TEXT);"
      }
    ],
    [
      {
        "question": "Order the instructor names by salary from greatest to least.",
        "query": "SELECT name FROM instructor ORDER BY salary DESC",
        "schema": "CREATE TABLE advisor (s_ID TEXT, i_ID TEXT); CREATE TABLE instructor (ID TEXT, salary NUMBER, dept_name TEXT, name TEXT); CREATE TABLE teaches (ID TEXT);"
      },
      {
        "question": "Who is paid the most?",
        "query": "SELECT name FROM instructor ORDER BY salary DESC LIMIT 1",
        "schema": "CREATE TABLE teaches (ID TEXT); CREATE TABLE instructor (salary NUMBER, name TEXT, ID TEXT, dept_name TEXT); CREATE TABLE advisor (i_ID TEXT, s_ID TEXT);"
      }
    ],
    [
      {
        "question": "What is all the information about instructors?",
        "query": "SELECT * FROM instructor",
        "schema": "CREATE TABLE teaches (ID TEXT); CREATE TABLE student (ID TEXT); CREATE TABLE department (dept_name TEXT); CREATE TABLE advisor (s_ID TEXT, i_ID TEXT); CREATE TABLE instructor (name TEXT, ID TEXT, dept_name TEXT);"
      },
      {
        "question": "Order this by increasing salary.",
        "query": "SELECT * FROM instructor ORDER BY salary",
        "schema": "CREATE TABLE teaches (ID TEXT); CREATE TABLE student (ID TEXT); CREATE TABLE department (dept_name TEXT); CREATE TABLE instructor (ID TEXT, salary NUMBER, dept_name TEXT, name TEXT); CREATE TABLE advisor (s_ID TEXT, i_ID TEXT);"
      }
    ],
    [
      {
        "question": "What are the names and department names for each student?",
        "query": "SELECT name , dept_name FROM student",
        "schema": "CREATE TABLE department (dept_name TEXT); CREATE TABLE section (course_id TEXT); CREATE TABLE course (course_id TEXT, dept_name TEXT); CREATE TABLE student (dept_name TEXT, name TEXT, ID TEXT, tot_cred NUMBER); CREATE TABLE instructor (dept_name TEXT, ID TEXT, name TEXT);"
      },
      {
        "question": "Order this by total credits ascending.",
        "query": "SELECT name , dept_name FROM student ORDER BY tot_cred",
        "schema": "CREATE TABLE department (dept_name TEXT); CREATE TABLE student (tot_cred NUMBER, dept_name TEXT, name TEXT, ID TEXT); CREATE TABLE course (course_id TEXT, dept_name TEXT, credits NUMBER); CREATE TABLE section (course_id TEXT); CREATE TABLE instructor (name TEXT, dept_name TEXT, ID TEXT);"
      }
    ],
    [
      {
        "question": "What were all the course titles in 2008?",
        "query": "SELECT t1.title FROM course AS t1 JOIN teaches AS t2 ON t1.course_id = t2.course_id WHERE YEAR = 2008",
        "schema": "CREATE TABLE teaches (course_id TEXT, semester TEXT, year NUMBER); CREATE TABLE instructor (ID TEXT); CREATE TABLE section (semester TEXT, course_id TEXT, year NUMBER); CREATE TABLE course (dept_name TEXT, title TEXT, course_id TEXT);"
      },
      {
        "question": "Also, what were the instructors' names?",
        "query": "SELECT t1.title , t3.name FROM course AS t1 JOIN teaches AS t2 ON t1.course_id = t2.course_id JOIN instructor AS t3 ON t2.id = t3.id WHERE YEAR = 2008",
        "schema": "CREATE TABLE course (title TEXT, dept_name TEXT, course_id TEXT); CREATE TABLE teaches (course_id TEXT, ID TEXT, year NUMBER, semester TEXT); CREATE TABLE section (course_id TEXT, semester TEXT, year NUMBER); CREATE TABLE instructor (dept_name TEXT, name TEXT, ID TEXT); CREATE TABLE advisor (i_ID TEXT, s_ID TEXT);"
      },
      {
        "question": "Order this by title.",
        "query": "SELECT t1.title , t3.name FROM course AS t1 JOIN teaches AS t2 ON t1.course_id = t2.course_id JOIN instructor AS t3 ON t2.id = t3.id WHERE YEAR = 2008 ORDER BY t1.title",
        "schema": "CREATE TABLE instructor (dept_name TEXT, name TEXT, ID TEXT); CREATE TABLE advisor (i_ID TEXT, s_ID TEXT); CREATE TABLE section (semester TEXT, year NUMBER, course_id TEXT); CREATE TABLE course (dept_name TEXT, course_id TEXT, title TEXT); CREATE TABLE teaches (course_id TEXT, ID TEXT, year NUMBER, semester TEXT);"
      }
    ],
    [
      {
        "question": "What are the names of all instructors who advise students?",
        "query": "SELECT t1.name FROM instructor AS t1 JOIN advisor AS t2 ON t1.id = t2.i_id",
        "schema": "CREATE TABLE teaches (ID TEXT); CREATE TABLE advisor (s_ID TEXT, i_ID TEXT); CREATE TABLE student (ID TEXT, name TEXT, tot_cred NUMBER); CREATE TABLE instructor (dept_name TEXT, ID TEXT, name TEXT);"
      },
      {
        "question": "Of those, which advise more than one student?",
        "query": "SELECT t1.name FROM instructor AS t1 JOIN advisor AS t2 ON t1.id = t2.i_id GROUP BY t2.i_id HAVING count(*) > 1",
        "schema": "CREATE TABLE advisor (i_ID TEXT, s_ID TEXT); CREATE TABLE teaches (ID TEXT); CREATE TABLE instructor (dept_name TEXT, ID TEXT, name TEXT); CREATE TABLE student (ID TEXT, tot_cred NUMBER, name TEXT);"
      }
    ],
    [
      {
        "question": "What are the names of students with advisors?",
        "query": "SELECT t1.name FROM student AS t1 JOIN advisor AS t2 ON t1.id = t2.s_id",
        "schema": "CREATE TABLE takes (ID TEXT); CREATE TABLE instructor (ID TEXT, name TEXT); CREATE TABLE student (tot_cred NUMBER, ID TEXT, name TEXT); CREATE TABLE teaches (ID TEXT); CREATE TABLE advisor (i_ID TEXT, s_ID TEXT);"
      },
      {
        "question": "Which ones have more than one advisor?",
        "query": "SELECT t1.name FROM student AS t1 JOIN advisor AS t2 ON t1.id = t2.s_id GROUP BY t2.s_id HAVING count(*) > 1",
        "schema": "CREATE TABLE advisor (i_ID TEXT, s_ID TEXT); CREATE TABLE teaches (ID TEXT); CREATE TABLE student (name TEXT, ID TEXT, tot_cred NUMBER); CREATE TABLE takes (ID TEXT); CREATE TABLE instructor (ID TEXT, name TEXT);"
      }
    ],
    [
      {
        "question": "How many classrooms have capacity greater than 50?",
        "query": "SELECT count(*) FROM classroom WHERE capacity > 50",
        "schema": "CREATE TABLE teaches (ID TEXT); CREATE TABLE instructor (ID TEXT); CREATE TABLE department (dept_name TEXT); CREATE TABLE classroom (room_number TEXT, capacity NUMBER, building TEXT);"
      },
      {
        "question": "Count these by building.",
        "query": "SELECT count(*) , building FROM classroom WHERE capacity > 50 GROUP BY building",
        "schema": "CREATE TABLE classroom (capacity NUMBER, building TEXT, room_number TEXT); CREATE TABLE department (building TEXT, dept_name TEXT); CREATE TABLE teaches (ID TEXT); CREATE TABLE instructor (ID TEXT); CREATE TABLE section (building TEXT);"
      }
    ],
    [
      {
        "question": "What are the maximum and average capacities across all classrooms?",
        "query": "SELECT max(capacity) , avg(capacity) FROM classroom",
        "schema": "CREATE TABLE teaches (ID TEXT); CREATE TABLE instructor (ID TEXT); CREATE TABLE department (dept_name TEXT); CREATE TABLE classroom (capacity NUMBER, room_number TEXT, building TEXT); CREATE TABLE student (ID TEXT);"
      },
      {
        "question": "Find these for each building.",
        "query": "SELECT max(capacity) , avg(capacity) , building FROM classroom GROUP BY building",
        "schema": "CREATE TABLE department (building TEXT, dept_name TEXT); CREATE TABLE instructor (ID TEXT); CREATE TABLE student (ID TEXT); CREATE TABLE classroom (room_number TEXT, capacity NUMBER, building TEXT); CREATE TABLE teaches (ID TEXT); CREATE TABLE section (room_number TEXT, building TEXT);"
      }
    ],
    [
      {
        "question": "What are all the different course titles?",
        "query": "SELECT title FROM course",
        "schema": "CREATE TABLE section (course_id TEXT); CREATE TABLE student (ID TEXT); CREATE TABLE course (title TEXT, dept_name TEXT, course_id TEXT); CREATE TABLE instructor (ID TEXT);"
      },
      {
        "question": "Of those, which are offered in more than one department?",
        "query": "SELECT title FROM course GROUP BY title HAVING count(*) > 1",
        "schema": "CREATE TABLE section (course_id TEXT); CREATE TABLE department (dept_name TEXT); CREATE TABLE student (ID TEXT); CREATE TABLE instructor (ID TEXT); CREATE TABLE course (title TEXT, course_id TEXT, dept_name TEXT);"
      }
    ],
    [
      {
        "question": "How many total credits are offered?",
        "query": "SELECT sum(credits) FROM course",
        "schema": "CREATE TABLE course (dept_name TEXT, title TEXT, course_id TEXT, credits NUMBER); CREATE TABLE instructor (ID TEXT); CREATE TABLE department (dept_name TEXT); CREATE TABLE section (year NUMBER, course_id TEXT, semester TEXT, sec_id TEXT); CREATE TABLE student (ID TEXT, tot_cred NUMBER, dept_name TEXT); CREATE TABLE prereq (prereq_id TEXT, course_id TEXT); CREATE TABLE advisor (s_ID TEXT, i_ID TEXT);"
      },
      {
        "question": "Find the totals by department name.",
        "query": "SELECT sum(credits) , dept_name FROM course GROUP BY dept_name",
        "schema": "CREATE TABLE student (dept_name TEXT, ID TEXT, tot_cred NUMBER); CREATE TABLE instructor (ID TEXT, dept_name TEXT); CREATE TABLE section (semester TEXT, year NUMBER, course_id TEXT, sec_id TEXT); CREATE TABLE advisor (s_ID TEXT, i_ID TEXT); CREATE TABLE course (title TEXT, credits NUMBER, course_id TEXT, dept_name TEXT); CREATE TABLE department (dept_name TEXT); CREATE TABLE prereq (prereq_id TEXT, course_id TEXT);"
      }
    ],
    [
      {
        "question": "What is the average salary of an instructor?",
        "query": "SELECT avg(salary) FROM instructor",
        "schema": "CREATE TABLE teaches (ID TEXT); CREATE TABLE advisor (i_ID TEXT, s_ID TEXT); CREATE TABLE instructor (name TEXT, ID TEXT, salary NUMBER, dept_name TEXT);"
      },
      {
        "question": "What are the departments with average salary greater than that?",
        "query": "SELECT dept_name FROM instructor GROUP BY dept_name HAVING avg(salary) > (SELECT avg(salary) FROM instructor)",
        "schema": "CREATE TABLE department (dept_name TEXT); CREATE TABLE teaches (ID TEXT); CREATE TABLE advisor (s_ID TEXT, i_ID TEXT); CREATE TABLE instructor (salary NUMBER, dept_name TEXT, name TEXT, ID TEXT);"
      },
      {
        "question": "Also, what are their lowest salaries?",
        "query": "SELECT min(salary) , dept_name FROM instructor GROUP BY dept_name HAVING avg(salary) > (SELECT avg(salary) FROM instructor)",
        "schema": "CREATE TABLE teaches (ID TEXT); CREATE TABLE department (dept_name TEXT); CREATE TABLE instructor (dept_name TEXT, name TEXT, salary NUMBER, ID TEXT); CREATE TABLE advisor (i_ID TEXT, s_ID TEXT);"
      }
    ],
    [
      {
        "question": "How many courses are offered in each year?",
        "query": "SELECT count(*) , YEAR FROM SECTION GROUP BY YEAR",
        "schema": "CREATE TABLE course (title TEXT, dept_name TEXT, course_id TEXT); CREATE TABLE teaches (year NUMBER, semester TEXT); CREATE TABLE section (course_id TEXT, semester TEXT, year NUMBER); CREATE TABLE takes (year NUMBER, semester TEXT);"
      },
      {
        "question": "Split these by semester as well.",
        "query": "SELECT count(*) , semester , YEAR FROM SECTION GROUP BY semester , YEAR",
        "schema": "CREATE TABLE takes (semester TEXT, year NUMBER); CREATE TABLE teaches (year NUMBER, semester TEXT); CREATE TABLE section (course_id TEXT, semester TEXT, sec_id TEXT, year NUMBER); CREATE TABLE course (title TEXT, course_id TEXT, dept_name TEXT);"
      }
    ],
    [
      {
        "question": "How many courses are offered in each year?",
        "query": "SELECT YEAR , count(*) FROM SECTION GROUP BY YEAR",
        "schema": "CREATE TABLE course (course_id TEXT, title TEXT, dept_name TEXT); CREATE TABLE section (semester TEXT, year NUMBER, course_id TEXT); CREATE TABLE teaches (year NUMBER, semester TEXT); CREATE TABLE takes (semester TEXT, year NUMBER);"
      },
      {
        "question": "Which year had the most?",
        "query": "SELECT YEAR FROM SECTION GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE section (course_id TEXT, semester TEXT, year NUMBER); CREATE TABLE course (course_id TEXT, dept_name TEXT, title TEXT); CREATE TABLE takes (year NUMBER, semester TEXT); CREATE TABLE teaches (year NUMBER, semester TEXT);"
      }
    ],
    [
      {
        "question": "Find the number of courses in each semester and year.",
        "query": "SELECT semester , YEAR , count(*) FROM SECTION GROUP BY semester , YEAR",
        "schema": "CREATE TABLE course (course_id TEXT); CREATE TABLE takes (year NUMBER, semester TEXT); CREATE TABLE section (course_id TEXT, semester TEXT, year NUMBER, sec_id TEXT); CREATE TABLE teaches (semester TEXT, year NUMBER);"
      },
      {
        "question": "Which had the most?",
        "query": "SELECT semester , YEAR FROM SECTION GROUP BY semester , YEAR ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE section (course_id TEXT, semester TEXT, year NUMBER, sec_id TEXT); CREATE TABLE teaches (semester TEXT, year NUMBER); CREATE TABLE takes (semester TEXT, year NUMBER); CREATE TABLE course (course_id TEXT);"
      }
    ],
    [
      {
        "question": "How many students are in each department?",
        "query": "SELECT dept_name , count(*) FROM student GROUP BY dept_name",
        "schema": "CREATE TABLE instructor (ID TEXT, dept_name TEXT); CREATE TABLE course (dept_name TEXT, course_id TEXT); CREATE TABLE department (dept_name TEXT); CREATE TABLE student (tot_cred NUMBER, dept_name TEXT, ID TEXT, name TEXT); CREATE TABLE advisor (s_ID TEXT); CREATE TABLE section (course_id TEXT); CREATE TABLE classroom (room_number TEXT, building TEXT);"
      },
      {
        "question": "What is the name of the department with the most?",
        "query": "SELECT dept_name FROM student GROUP BY dept_name ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE classroom (room_number TEXT, building TEXT); CREATE TABLE department (dept_name TEXT); CREATE TABLE student (dept_name TEXT, name TEXT, tot_cred NUMBER, ID TEXT); CREATE TABLE section (course_id TEXT); CREATE TABLE advisor (s_ID TEXT); CREATE TABLE course (dept_name TEXT, course_id TEXT); CREATE TABLE instructor (dept_name TEXT, ID TEXT);"
      }
    ],
    [
      {
        "question": "How many students are there?",
        "query": "SELECT count(*) FROM student",
        "schema": "CREATE TABLE instructor (ID TEXT); CREATE TABLE takes (course_id TEXT, ID TEXT); CREATE TABLE department (dept_name TEXT); CREATE TABLE classroom (room_number TEXT, capacity NUMBER); CREATE TABLE section (semester TEXT, course_id TEXT, sec_id TEXT); CREATE TABLE course (course_id TEXT, dept_name TEXT); CREATE TABLE student (tot_cred NUMBER, dept_name TEXT, name TEXT, ID TEXT); CREATE TABLE advisor (i_ID TEXT, s_ID TEXT);"
      },
      {
        "question": "Count this by department.",
        "query": "SELECT count(*) , dept_name FROM student GROUP BY dept_name",
        "schema": "CREATE TABLE student (tot_cred NUMBER, name TEXT, dept_name TEXT, ID TEXT); CREATE TABLE takes (course_id TEXT, ID TEXT); CREATE TABLE classroom (capacity NUMBER, room_number TEXT); CREATE TABLE section (course_id TEXT, semester TEXT, sec_id TEXT); CREATE TABLE department (dept_name TEXT); CREATE TABLE course (dept_name TEXT, course_id TEXT); CREATE TABLE instructor (dept_name TEXT, ID TEXT); CREATE TABLE advisor (i_ID TEXT, s_ID TEXT);"
      }
    ],
    [
      {
        "question": "How many students were taking classes in each semester and year?",
        "query": "SELECT semester , YEAR , count(*) FROM takes GROUP BY semester , YEAR",
        "schema": "CREATE TABLE course (dept_name TEXT, course_id TEXT); CREATE TABLE department (dept_name TEXT); CREATE TABLE teaches (semester TEXT, year NUMBER); CREATE TABLE takes (course_id TEXT, year NUMBER, semester TEXT, ID TEXT); CREATE TABLE instructor (ID TEXT); CREATE TABLE student (tot_cred NUMBER, ID TEXT); CREATE TABLE section (semester TEXT, year NUMBER, course_id TEXT);"
      },
      {
        "question": "Which one had the fewest?",
        "query": "SELECT semester , YEAR FROM takes GROUP BY semester , YEAR ORDER BY count(*) LIMIT 1",
        "schema": "CREATE TABLE takes (course_id TEXT, ID TEXT, semester TEXT, year NUMBER); CREATE TABLE instructor (ID TEXT); CREATE TABLE course (course_id TEXT, dept_name TEXT); CREATE TABLE student (tot_cred NUMBER, ID TEXT); CREATE TABLE teaches (semester TEXT, year NUMBER); CREATE TABLE department (dept_name TEXT); CREATE TABLE section (semester TEXT, course_id TEXT, year NUMBER);"
      }
    ],
    [
      {
        "question": "What are the ids of all instructors who are advisors?",
        "query": "SELECT i_id FROM advisor AS t1 JOIN student AS t2 ON t1.s_id = t2.id",
        "schema": "CREATE TABLE student (ID TEXT); CREATE TABLE course (course_id TEXT); CREATE TABLE instructor (dept_name TEXT, ID TEXT, name TEXT); CREATE TABLE teaches (ID TEXT); CREATE TABLE advisor (s_ID TEXT, i_ID TEXT);"
      },
      {
        "question": "Of these, which advise students in the History department?",
        "query": "SELECT i_id FROM advisor AS t1 JOIN student AS t2 ON t1.s_id = t2.id WHERE t2.dept_name = 'History'",
        "schema": "CREATE TABLE student (tot_cred NUMBER, dept_name TEXT, ID TEXT); CREATE TABLE advisor (i_ID TEXT, s_ID TEXT); CREATE TABLE instructor (dept_name TEXT, ID TEXT, name TEXT); CREATE TABLE teaches (ID TEXT); CREATE TABLE course (course_id TEXT); CREATE TABLE department (dept_name TEXT);"
      }
    ],
    [
      {
        "question": "What are the ids of all instructors who are advisors?",
        "query": "SELECT i_id FROM advisor AS t1 JOIN student AS t2 ON t1.s_id = t2.id",
        "schema": "CREATE TABLE advisor (i_ID TEXT, s_ID TEXT); CREATE TABLE teaches (ID TEXT); CREATE TABLE instructor (name TEXT, ID TEXT, dept_name TEXT); CREATE TABLE course (course_id TEXT); CREATE TABLE student (ID TEXT);"
      },
      {
        "question": "Of these, which advise students in the History department?",
        "query": "SELECT i_id FROM advisor AS t1 JOIN student AS t2 ON t1.s_id = t2.id WHERE t2.dept_name = 'History'",
        "schema": "CREATE TABLE course (course_id TEXT); CREATE TABLE instructor (ID TEXT, name TEXT, dept_name TEXT); CREATE TABLE advisor (i_ID TEXT, s_ID TEXT); CREATE TABLE teaches (ID TEXT); CREATE TABLE department (dept_name TEXT); CREATE TABLE student (ID TEXT, dept_name TEXT, tot_cred NUMBER);"
      },
      {
        "question": "What are their names and salaries?",
        "query": "SELECT t2.name , t2.salary FROM advisor AS t1 JOIN instructor AS t2 ON t1.i_id = t2.id JOIN student AS t3 ON t1.s_id = t3.id WHERE t3.dept_name = 'History'",
        "schema": "CREATE TABLE course (course_id TEXT); CREATE TABLE teaches (ID TEXT); CREATE TABLE department (dept_name TEXT); CREATE TABLE instructor (name TEXT, ID TEXT, dept_name TEXT, salary NUMBER); CREATE TABLE student (ID TEXT, tot_cred NUMBER, name TEXT, dept_name TEXT); CREATE TABLE advisor (i_ID TEXT, s_ID TEXT);"
      }
    ],
    [
      {
        "question": "What are the ids of courses with prerequisites?",
        "query": "SELECT course_id FROM prereq",
        "schema": "CREATE TABLE takes (course_id TEXT); CREATE TABLE prereq (course_id TEXT, prereq_id TEXT); CREATE TABLE student (ID TEXT); CREATE TABLE course (title TEXT, dept_name TEXT, course_id TEXT); CREATE TABLE instructor (ID TEXT); CREATE TABLE teaches (course_id TEXT); CREATE TABLE section (course_id TEXT);"
      },
      {
        "question": "What are the ids of all other courses?",
        "query": "SELECT course_id FROM course EXCEPT SELECT course_id FROM prereq",
        "schema": "CREATE TABLE section (course_id TEXT); CREATE TABLE course (course_id TEXT, dept_name TEXT, title TEXT); CREATE TABLE instructor (ID TEXT); CREATE TABLE prereq (prereq_id TEXT, course_id TEXT); CREATE TABLE teaches (course_id TEXT); CREATE TABLE takes (course_id TEXT); CREATE TABLE student (ID TEXT);"
      }
    ],
    [
      {
        "question": "What are the ids of courses with prerequisites?",
        "query": "SELECT course_id FROM prereq",
        "schema": "CREATE TABLE course (dept_name TEXT, title TEXT, course_id TEXT); CREATE TABLE takes (course_id TEXT); CREATE TABLE teaches (course_id TEXT, ID TEXT); CREATE TABLE prereq (prereq_id TEXT, course_id TEXT); CREATE TABLE instructor (ID TEXT); CREATE TABLE section (course_id TEXT); CREATE TABLE student (ID TEXT);"
      },
      {
        "question": "What are the titles of all other courses?",
        "query": "SELECT title FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)",
        "schema": "CREATE TABLE instructor (ID TEXT); CREATE TABLE prereq (prereq_id TEXT, course_id TEXT); CREATE TABLE section (course_id TEXT); CREATE TABLE student (ID TEXT); CREATE TABLE course (title TEXT, dept_name TEXT, course_id TEXT); CREATE TABLE teaches (ID TEXT, course_id TEXT); CREATE TABLE takes (course_id TEXT);"
      }
    ],
    [
      {
        "question": "What are the ids of all prerequisites?",
        "query": "SELECT prereq_id FROM prereq",
        "schema": "CREATE TABLE takes (ID TEXT); CREATE TABLE course (course_id TEXT, title TEXT); CREATE TABLE advisor (s_ID TEXT); CREATE TABLE prereq (prereq_id TEXT, course_id TEXT); CREATE TABLE teaches (course_id TEXT, ID TEXT); CREATE TABLE student (ID TEXT); CREATE TABLE instructor (ID TEXT); CREATE TABLE section (sec_id TEXT, course_id TEXT);"
      },
      {
        "question": "What is the id of the prerequisite for International Finance?",
        "query": "SELECT t1.prereq_id FROM prereq AS t1 JOIN course AS t2 ON t1.course_id = t2.course_id WHERE t2.title = 'International Finance'",
        "schema": "CREATE TABLE prereq (prereq_id TEXT, course_id TEXT); CREATE TABLE instructor (ID TEXT); CREATE TABLE course (dept_name TEXT, title TEXT, course_id TEXT); CREATE TABLE advisor (s_ID TEXT); CREATE TABLE takes (ID TEXT); CREATE TABLE teaches (ID TEXT, course_id TEXT); CREATE TABLE department (dept_name TEXT); CREATE TABLE section (sec_id TEXT, course_id TEXT); CREATE TABLE student (ID TEXT);"
      },
      {
        "question": "What is its title?",
        "query": "SELECT title FROM course WHERE course_id IN (SELECT t1.prereq_id FROM prereq AS t1 JOIN course AS t2 ON t1.course_id = t2.course_id WHERE t2.title = 'International Finance')",
        "schema": "CREATE TABLE section (course_id TEXT, sec_id TEXT); CREATE TABLE takes (ID TEXT); CREATE TABLE advisor (s_ID TEXT); CREATE TABLE prereq (course_id TEXT, prereq_id TEXT); CREATE TABLE department (dept_name TEXT); CREATE TABLE student (ID TEXT); CREATE TABLE teaches (course_id TEXT, ID TEXT); CREATE TABLE instructor (ID TEXT); CREATE TABLE course (course_id TEXT, title TEXT, dept_name TEXT);"
      }
    ],
    [
      {
        "question": "What are the ids of all the prerequisites?",
        "query": "SELECT course_id FROM prereq",
        "schema": "CREATE TABLE course (title TEXT, course_id TEXT); CREATE TABLE advisor (s_ID TEXT); CREATE TABLE prereq (prereq_id TEXT, course_id TEXT); CREATE TABLE takes (ID TEXT); CREATE TABLE teaches (course_id TEXT, ID TEXT); CREATE TABLE student (ID TEXT, tot_cred NUMBER); CREATE TABLE section (sec_id TEXT, course_id TEXT); CREATE TABLE department (dept_name TEXT); CREATE TABLE instructor (ID TEXT);"
      },
      {
        "question": "What is the id of the course for which Differential Geometry is a prerequisite?",
        "query": "SELECT t1.course_id FROM prereq AS t1 JOIN course AS t2 ON t1.prereq_id = t2.course_id WHERE t2.title = 'Differential Geometry'",
        "schema": "CREATE TABLE prereq (course_id TEXT, prereq_id TEXT); CREATE TABLE teaches (ID TEXT, course_id TEXT); CREATE TABLE section (course_id TEXT, sec_id TEXT); CREATE TABLE takes (ID TEXT); CREATE TABLE course (dept_name TEXT, course_id TEXT, title TEXT); CREATE TABLE student (ID TEXT, tot_cred NUMBER); CREATE TABLE department (dept_name TEXT); CREATE TABLE advisor (s_ID TEXT); CREATE TABLE instructor (ID TEXT);"
      },
      {
        "question": "What is its title?",
        "query": "SELECT title FROM course WHERE course_id IN (SELECT t1.course_id FROM prereq AS t1 JOIN course AS t2 ON t1.prereq_id = t2.course_id WHERE t2.title = 'Differential Geometry')",
        "schema": "CREATE TABLE prereq (course_id TEXT, prereq_id TEXT); CREATE TABLE teaches (ID TEXT, course_id TEXT); CREATE TABLE department (dept_name TEXT); CREATE TABLE student (tot_cred NUMBER, ID TEXT); CREATE TABLE takes (ID TEXT); CREATE TABLE advisor (s_ID TEXT); CREATE TABLE section (sec_id TEXT, course_id TEXT); CREATE TABLE instructor (ID TEXT); CREATE TABLE course (title TEXT, course_id TEXT, dept_name TEXT);"
      }
    ],
    [
      {
        "question": "What are the ids of students who took courses in the Fall of 2003?",
        "query": "SELECT id FROM takes WHERE semester = 'Fall' AND YEAR = 2003",
        "schema": "CREATE TABLE takes (ID TEXT, sec_id TEXT, year NUMBER, course_id TEXT, semester TEXT); CREATE TABLE instructor (ID TEXT); CREATE TABLE section (year NUMBER, sec_id TEXT, semester TEXT, course_id TEXT); CREATE TABLE course (course_id TEXT); CREATE TABLE student (tot_cred NUMBER, ID TEXT);"
      },
      {
        "question": "What are their names?",
        "query": "SELECT name FROM student WHERE id IN (SELECT id FROM takes WHERE semester = 'Fall' AND YEAR = 2003)",
        "schema": "CREATE TABLE instructor (ID TEXT, name TEXT, dept_name TEXT); CREATE TABLE takes (course_id TEXT, year NUMBER, ID TEXT, sec_id TEXT, semester TEXT); CREATE TABLE student (tot_cred NUMBER, name TEXT, dept_name TEXT, ID TEXT); CREATE TABLE section (sec_id TEXT, course_id TEXT, year NUMBER, semester TEXT); CREATE TABLE course (dept_name TEXT, course_id TEXT, title TEXT); CREATE TABLE department (dept_name TEXT);"
      }
    ],
    [
      {
        "question": "What are the titles of courses offered in the Fall of 2010?",
        "query": "SELECT t1.title FROM course AS t1 JOIN SECTION AS t2 ON t1.course_id = t2.course_id WHERE semester = 'Fall' AND YEAR = 2010",
        "schema": "CREATE TABLE course (title TEXT, dept_name TEXT, course_id TEXT); CREATE TABLE section (semester TEXT, course_id TEXT, sec_id TEXT, year NUMBER);"
      },
      {
        "question": "Of these, which were offered in Chandler building?",
        "query": "SELECT t1.title FROM course AS t1 JOIN SECTION AS t2 ON t1.course_id = t2.course_id WHERE building = 'Chandler' AND semester = 'Fall' AND YEAR = 2010",
        "schema": "CREATE TABLE course (dept_name TEXT, title TEXT, course_id TEXT); CREATE TABLE section (building TEXT, course_id TEXT, year NUMBER, semester TEXT, sec_id TEXT); CREATE TABLE department (building TEXT, dept_name TEXT); CREATE TABLE classroom (building TEXT, room_number TEXT);"
      }
    ],
    [
      {
        "question": "What are the names of all instructors?",
        "query": "SELECT name FROM instructor",
        "schema": "CREATE TABLE teaches (ID TEXT); CREATE TABLE advisor (s_ID TEXT, i_ID TEXT); CREATE TABLE student (ID TEXT); CREATE TABLE instructor (name TEXT, ID TEXT, dept_name TEXT);"
      },
      {
        "question": "Of those, which have taught a C Programming course?",
        "query": "SELECT t1.name FROM instructor AS t1 JOIN teaches AS t2 ON t1.id = t2.id JOIN course AS t3 ON t2.course_id = t3.course_id WHERE t3.title = 'C Programming'",
        "schema": "CREATE TABLE advisor (s_ID TEXT, i_ID TEXT); CREATE TABLE instructor (name TEXT, dept_name TEXT, ID TEXT); CREATE TABLE student (ID TEXT); CREATE TABLE course (dept_name TEXT, title TEXT, course_id TEXT); CREATE TABLE teaches (ID TEXT, course_id TEXT); CREATE TABLE section (course_id TEXT);"
      }
    ],
    [
      {
        "question": "What are the ids of all advisors?",
        "query": "SELECT i_id FROM advisor",
        "schema": "CREATE TABLE teaches (ID TEXT); CREATE TABLE advisor (i_ID TEXT, s_ID TEXT); CREATE TABLE course (course_id TEXT); CREATE TABLE instructor (ID TEXT, dept_name TEXT); CREATE TABLE student (ID TEXT); CREATE TABLE section (sec_id TEXT, course_id TEXT);"
      },
      {
        "question": "What are the ids of advisors who advise students in the Math department?",
        "query": "SELECT t1.i_id FROM advisor AS t1 JOIN student AS t2 ON t1.s_id = t2.id WHERE t2.dept_name = 'Math'",
        "schema": "CREATE TABLE teaches (ID TEXT); CREATE TABLE section (course_id TEXT, sec_id TEXT); CREATE TABLE course (course_id TEXT, dept_name TEXT); CREATE TABLE student (ID TEXT, tot_cred NUMBER, dept_name TEXT); CREATE TABLE instructor (dept_name TEXT, name TEXT, ID TEXT); CREATE TABLE department (dept_name TEXT); CREATE TABLE advisor (i_ID TEXT, s_ID TEXT);"
      },
      {
        "question": "What are their names and salaries?",
        "query": "SELECT t2.name , t2.salary FROM advisor AS t1 JOIN instructor AS t2 ON t1.i_id = t2.id JOIN student AS t3 ON t1.s_id = t3.id WHERE t3.dept_name = 'Math'",
        "schema": "CREATE TABLE instructor (dept_name TEXT, name TEXT, ID TEXT, salary NUMBER); CREATE TABLE student (ID TEXT, tot_cred NUMBER, dept_name TEXT, name TEXT); CREATE TABLE teaches (ID TEXT); CREATE TABLE section (course_id TEXT, sec_id TEXT); CREATE TABLE course (dept_name TEXT, course_id TEXT); CREATE TABLE advisor (s_ID TEXT, i_ID TEXT); CREATE TABLE department (dept_name TEXT);"
      }
    ],
    [
      {
        "question": "What are the ids of advisors who advise students in the Math department?",
        "query": "SELECT t1.i_id FROM advisor AS t1 JOIN student AS t2 ON t1.s_id = t2.id WHERE t2.dept_name = 'Math'",
        "schema": "CREATE TABLE course (dept_name TEXT, course_id TEXT); CREATE TABLE advisor (s_ID TEXT, i_ID TEXT); CREATE TABLE instructor (dept_name TEXT, name TEXT, ID TEXT); CREATE TABLE student (dept_name TEXT, ID TEXT, tot_cred NUMBER); CREATE TABLE takes (ID TEXT); CREATE TABLE department (dept_name TEXT); CREATE TABLE section (course_id TEXT); CREATE TABLE teaches (ID TEXT, course_id TEXT);"
      },
      {
        "question": "What are their names?",
        "query": "SELECT t2.name , t2.salary FROM advisor AS t1 JOIN instructor AS t2 ON t1.i_id = t2.id JOIN student AS t3 ON t1.s_id = t3.id WHERE t3.dept_name = 'Math'",
        "schema": "CREATE TABLE department (dept_name TEXT); CREATE TABLE advisor (i_ID TEXT, s_ID TEXT); CREATE TABLE course (course_id TEXT, dept_name TEXT); CREATE TABLE teaches (course_id TEXT, ID TEXT); CREATE TABLE instructor (salary NUMBER, ID TEXT, name TEXT, dept_name TEXT); CREATE TABLE takes (ID TEXT); CREATE TABLE student (dept_name TEXT, tot_cred NUMBER, name TEXT, ID TEXT); CREATE TABLE section (course_id TEXT);"
      },
      {
        "question": "Order this by the students' total credits.",
        "query": "SELECT t2.name FROM advisor AS t1 JOIN instructor AS t2 ON t1.i_id = t2.id JOIN student AS t3 ON t1.s_id = t3.id WHERE t3.dept_name = 'Math' ORDER BY t3.tot_cred",
        "schema": "CREATE TABLE instructor (ID TEXT, name TEXT, salary NUMBER, dept_name TEXT); CREATE TABLE course (dept_name TEXT, course_id TEXT, credits NUMBER); CREATE TABLE takes (ID TEXT); CREATE TABLE department (dept_name TEXT); CREATE TABLE section (course_id TEXT); CREATE TABLE advisor (s_ID TEXT, i_ID TEXT); CREATE TABLE student (ID TEXT, name TEXT, tot_cred NUMBER, dept_name TEXT); CREATE TABLE teaches (course_id TEXT, ID TEXT);"
      }
    ],
    [
      {
        "question": "What are all the ids of the prerequisite classes?",
        "query": "SELECT prereq_id FROM prereq",
        "schema": "CREATE TABLE instructor (ID TEXT); CREATE TABLE student (dept_name TEXT, tot_cred NUMBER, ID TEXT); CREATE TABLE advisor (i_ID TEXT, s_ID TEXT); CREATE TABLE course (course_id TEXT, title TEXT, dept_name TEXT); CREATE TABLE teaches (course_id TEXT, ID TEXT); CREATE TABLE department (dept_name TEXT); CREATE TABLE prereq (prereq_id TEXT, course_id TEXT); CREATE TABLE section (course_id TEXT, sec_id TEXT); CREATE TABLE takes (ID TEXT);"
      },
      {
        "question": "Of these, which is the prerequisite for Mobile Computing?",
        "query": "SELECT t1.prereq_id FROM prereq AS t1 JOIN course AS t2 ON t1.course_id = t2.course_id WHERE t2.title = 'Mobile Computing'",
        "schema": "CREATE TABLE student (ID TEXT, tot_cred NUMBER, dept_name TEXT); CREATE TABLE takes (ID TEXT); CREATE TABLE section (course_id TEXT, sec_id TEXT); CREATE TABLE prereq (prereq_id TEXT, course_id TEXT); CREATE TABLE advisor (s_ID TEXT, i_ID TEXT); CREATE TABLE instructor (ID TEXT); CREATE TABLE course (title TEXT, dept_name TEXT, course_id TEXT); CREATE TABLE teaches (course_id TEXT, ID TEXT); CREATE TABLE department (dept_name TEXT);"
      },
      {
        "question": "What is its title?",
        "query": "SELECT title FROM course WHERE course_id IN (SELECT t1.prereq_id FROM prereq AS t1 JOIN course AS t2 ON t1.course_id = t2.course_id WHERE t2.title = 'Mobile Computing')",
        "schema": "CREATE TABLE section (sec_id TEXT, course_id TEXT); CREATE TABLE instructor (ID TEXT); CREATE TABLE takes (ID TEXT); CREATE TABLE course (title TEXT, dept_name TEXT, course_id TEXT); CREATE TABLE department (dept_name TEXT); CREATE TABLE advisor (s_ID TEXT, i_ID TEXT); CREATE TABLE prereq (course_id TEXT, prereq_id TEXT); CREATE TABLE teaches (ID TEXT, course_id TEXT); CREATE TABLE student (ID TEXT, tot_cred NUMBER, dept_name TEXT);"
      }
    ],
    [
      {
        "question": "What are names of instructors who advise students?",
        "query": "SELECT t2.name FROM advisor AS t1 JOIN instructor AS t2 ON t1.i_id = t2.id",
        "schema": "CREATE TABLE student (name TEXT, ID TEXT, tot_cred NUMBER); CREATE TABLE teaches (ID TEXT); CREATE TABLE advisor (s_ID TEXT, i_ID TEXT); CREATE TABLE instructor (name TEXT, dept_name TEXT, ID TEXT);"
      },
      {
        "question": "Of these, which one instructs the students with the most total credits?",
        "query": "SELECT t2.name FROM advisor AS t1 JOIN instructor AS t2 ON t1.i_id = t2.id JOIN student AS t3 ON t1.s_id = t3.id ORDER BY t3.tot_cred DESC LIMIT 1",
        "schema": "CREATE TABLE teaches (ID TEXT); CREATE TABLE course (course_id TEXT, credits NUMBER); CREATE TABLE advisor (s_ID TEXT, i_ID TEXT); CREATE TABLE instructor (dept_name TEXT, name TEXT, ID TEXT); CREATE TABLE student (tot_cred NUMBER, ID TEXT, name TEXT, dept_name TEXT);"
      }
    ],
    [
      {
        "question": "What are the ids of instructors who taught courses?",
        "query": "SELECT id FROM teaches",
        "schema": "CREATE TABLE section (course_id TEXT); CREATE TABLE teaches (course_id TEXT, ID TEXT); CREATE TABLE course (dept_name TEXT, course_id TEXT, title TEXT); CREATE TABLE instructor (ID TEXT, name TEXT, dept_name TEXT); CREATE TABLE advisor (s_ID TEXT, i_ID TEXT); CREATE TABLE student (ID TEXT);"
      },
      {
        "question": "What are the ids of all other instructors?",
        "query": "SELECT id FROM instructor WHERE id NOT IN (SELECT id FROM teaches)",
        "schema": "CREATE TABLE instructor (dept_name TEXT, name TEXT, ID TEXT); CREATE TABLE course (course_id TEXT, title TEXT, dept_name TEXT); CREATE TABLE teaches (ID TEXT, course_id TEXT); CREATE TABLE student (ID TEXT); CREATE TABLE advisor (s_ID TEXT, i_ID TEXT); CREATE TABLE section (course_id TEXT);"
      },
      {
        "question": "What are their names?",
        "query": "SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches)",
        "schema": "CREATE TABLE course (title TEXT, course_id TEXT, dept_name TEXT); CREATE TABLE student (ID TEXT); CREATE TABLE section (course_id TEXT); CREATE TABLE advisor (i_ID TEXT, s_ID TEXT); CREATE TABLE instructor (dept_name TEXT, name TEXT, ID TEXT); CREATE TABLE teaches (ID TEXT, course_id TEXT);"
      }
    ],
    [
      {
        "question": "What are the ids of instructors who taught courses?",
        "query": "SELECT id FROM teaches",
        "schema": "CREATE TABLE instructor (dept_name TEXT, ID TEXT, name TEXT); CREATE TABLE section (course_id TEXT); CREATE TABLE advisor (i_ID TEXT, s_ID TEXT); CREATE TABLE teaches (ID TEXT, course_id TEXT); CREATE TABLE student (ID TEXT); CREATE TABLE course (title TEXT, dept_name TEXT, course_id TEXT);"
      },
      {
        "question": "What are the ids of all other instructors?",
        "query": "SELECT id FROM instructor EXCEPT SELECT id FROM teaches",
        "schema": "CREATE TABLE course (course_id TEXT, dept_name TEXT, title TEXT); CREATE TABLE teaches (course_id TEXT, ID TEXT); CREATE TABLE advisor (s_ID TEXT, i_ID TEXT); CREATE TABLE instructor (name TEXT, ID TEXT, dept_name TEXT); CREATE TABLE section (course_id TEXT); CREATE TABLE student (ID TEXT);"
      }
    ],
    [
      {
        "question": "What are the ids of teachers who taught in the Spring?",
        "query": "SELECT id FROM teaches WHERE semester = 'Spring'",
        "schema": "CREATE TABLE student (ID TEXT); CREATE TABLE instructor (dept_name TEXT, name TEXT, ID TEXT); CREATE TABLE teaches (ID TEXT, course_id TEXT, year NUMBER, semester TEXT, sec_id TEXT); CREATE TABLE advisor (s_ID TEXT, i_ID TEXT);"
      },
      {
        "question": "What are the ids of all other instructors?",
        "query": "SELECT id FROM instructor WHERE id NOT IN (SELECT id FROM teaches WHERE semester = 'Spring')",
        "schema": "CREATE TABLE advisor (i_ID TEXT, s_ID TEXT); CREATE TABLE teaches (semester TEXT, course_id TEXT, sec_id TEXT, ID TEXT, year NUMBER); CREATE TABLE student (ID TEXT); CREATE TABLE section (semester TEXT); CREATE TABLE instructor (dept_name TEXT, ID TEXT, name TEXT);"
      },
      {
        "question": "What are the corresponding instructor names?",
        "query": "SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches WHERE semester = 'Spring')",
        "schema": "CREATE TABLE student (ID TEXT); CREATE TABLE section (semester TEXT); CREATE TABLE teaches (ID TEXT, sec_id TEXT, semester TEXT, year NUMBER, course_id TEXT); CREATE TABLE instructor (ID TEXT, dept_name TEXT, name TEXT); CREATE TABLE advisor (s_ID TEXT, i_ID TEXT);"
      }
    ],
    [
      {
        "question": "What are the average instructor salaries for each department?",
        "query": "SELECT dept_name , avg(salary) FROM instructor GROUP BY dept_name",
        "schema": "CREATE TABLE instructor (ID TEXT, salary NUMBER, dept_name TEXT); CREATE TABLE teaches (ID TEXT); CREATE TABLE advisor (i_ID TEXT, s_ID TEXT); CREATE TABLE department (dept_name TEXT); CREATE TABLE course (dept_name TEXT);"
      },
      {
        "question": "Which department has the highest?",
        "query": "SELECT dept_name FROM instructor GROUP BY dept_name ORDER BY avg(salary) DESC LIMIT 1",
        "schema": "CREATE TABLE department (dept_name TEXT); CREATE TABLE teaches (ID TEXT); CREATE TABLE advisor (i_ID TEXT, s_ID TEXT); CREATE TABLE instructor (name TEXT, ID TEXT, dept_name TEXT, salary NUMBER); CREATE TABLE course (dept_name TEXT);"
      }
    ],
    [
      {
        "question": "Order the departments by decreasing budget.",
        "query": "SELECT dept_name FROM department ORDER BY budget DESC",
        "schema": "CREATE TABLE student (ID TEXT, dept_name TEXT); CREATE TABLE department (budget NUMBER, dept_name TEXT); CREATE TABLE course (dept_name TEXT, course_id TEXT); CREATE TABLE instructor (ID TEXT, dept_name TEXT);"
      },
      {
        "question": "How many instructors are in the department with the highest budget?",
        "query": "SELECT count(*) FROM instructor AS t1 JOIN department AS t2 ON t1.dept_name = t2.dept_name ORDER BY t2.budget DESC LIMIT 1",
        "schema": "CREATE TABLE teaches (ID TEXT); CREATE TABLE advisor (s_ID TEXT, i_ID TEXT); CREATE TABLE instructor (ID TEXT, dept_name TEXT, salary NUMBER, name TEXT); CREATE TABLE student (dept_name TEXT, ID TEXT); CREATE TABLE department (budget NUMBER, dept_name TEXT); CREATE TABLE course (course_id TEXT, dept_name TEXT);"
      },
      {
        "question": "Also, what is the average salary of those instructors?",
        "query": "SELECT avg(t1.salary) , count(*) FROM instructor AS t1 JOIN department AS t2 ON t1.dept_name = t2.dept_name ORDER BY t2.budget DESC LIMIT 1",
        "schema": "CREATE TABLE department (budget NUMBER, dept_name TEXT); CREATE TABLE course (dept_name TEXT, course_id TEXT); CREATE TABLE teaches (ID TEXT); CREATE TABLE student (ID TEXT, dept_name TEXT); CREATE TABLE advisor (i_ID TEXT, s_ID TEXT); CREATE TABLE instructor (ID TEXT, dept_name TEXT, salary NUMBER, name TEXT);"
      }
    ],
    [
      {
        "question": "What is the maximum capacity of any classroom?",
        "query": "SELECT max(capacity) FROM classroom",
        "schema": "CREATE TABLE classroom (building TEXT, room_number TEXT, capacity NUMBER); CREATE TABLE teaches (ID TEXT); CREATE TABLE instructor (ID TEXT); CREATE TABLE course (course_id TEXT); CREATE TABLE department (dept_name TEXT);"
      },
      {
        "question": "What is the title of the course which is taught there?",
        "query": "SELECT t3.title FROM classroom AS t1 JOIN SECTION AS t2 ON t1.building = t2.building AND t1.room_number = t2.room_number JOIN course AS t3 ON t2.course_id = t3.course_id WHERE t1.capacity = (SELECT max(capacity) FROM classroom)",
        "schema": "CREATE TABLE classroom (capacity NUMBER, building TEXT, room_number TEXT); CREATE TABLE section (semester TEXT, course_id TEXT, room_number TEXT, building TEXT); CREATE TABLE department (dept_name TEXT); CREATE TABLE instructor (ID TEXT); CREATE TABLE course (title TEXT, dept_name TEXT, course_id TEXT); CREATE TABLE teaches (ID TEXT, sec_id TEXT, course_id TEXT, year NUMBER, semester TEXT);"
      },
      {
        "question": "Also, what credits value does that course have?",
        "query": "SELECT t3.title , t3.credits FROM classroom AS t1 JOIN SECTION AS t2 ON t1.building = t2.building AND t1.room_number = t2.room_number JOIN course AS t3 ON t2.course_id = t3.course_id WHERE t1.capacity = (SELECT max(capacity) FROM classroom)",
        "schema": "CREATE TABLE department (dept_name TEXT); CREATE TABLE section (room_number TEXT, semester TEXT, course_id TEXT, building TEXT, year NUMBER); CREATE TABLE course (title TEXT, course_id TEXT, credits NUMBER, dept_name TEXT); CREATE TABLE instructor (ID TEXT); CREATE TABLE teaches (sec_id TEXT, ID TEXT, semester TEXT, year NUMBER, course_id TEXT); CREATE TABLE classroom (capacity NUMBER, building TEXT, room_number TEXT);"
      }
    ],
    [
      {
        "question": "Which students have taken Biology courses?",
        "query": "SELECT * FROM takes AS t1 JOIN course AS t2 ON t1.course_id = t2.course_id WHERE t2.dept_name = 'Biology'",
        "schema": "CREATE TABLE course (dept_name TEXT, title TEXT, course_id TEXT); CREATE TABLE takes (course_id TEXT, ID TEXT); CREATE TABLE department (dept_name TEXT); CREATE TABLE section (course_id TEXT); CREATE TABLE student (dept_name TEXT, name TEXT, ID TEXT, tot_cred NUMBER);"
      },
      {
        "question": "What are the names of all students who did not take that class?",
        "query": "SELECT name FROM student WHERE id NOT IN (SELECT t1.id FROM takes AS t1 JOIN course AS t2 ON t1.course_id = t2.course_id WHERE t2.dept_name = 'Biology')",
        "schema": "CREATE TABLE department (dept_name TEXT); CREATE TABLE takes (ID TEXT, course_id TEXT); CREATE TABLE course (title TEXT, course_id TEXT, dept_name TEXT); CREATE TABLE section (course_id TEXT); CREATE TABLE student (ID TEXT, dept_name TEXT, tot_cred NUMBER, name TEXT);"
      }
    ],
    [
      {
        "question": "Find the total number of students.",
        "query": "SELECT count(DISTINCT id) FROM student",
        "schema": "CREATE TABLE takes (ID TEXT); CREATE TABLE section (room_number TEXT, course_id TEXT); CREATE TABLE department (dept_name TEXT); CREATE TABLE student (dept_name TEXT, ID TEXT, tot_cred NUMBER, name TEXT); CREATE TABLE instructor (ID TEXT); CREATE TABLE course (course_id TEXT);"
      },
      {
        "question": "Now, find the number by department.",
        "query": "SELECT count(DISTINCT t2.id) , t1.dept_name FROM department AS t1 JOIN student AS t2 ON t1.dept_name = t2.dept_name GROUP BY t1.dept_name",
        "schema": "CREATE TABLE section (room_number TEXT, course_id TEXT); CREATE TABLE takes (ID TEXT); CREATE TABLE classroom (room_number TEXT); CREATE TABLE course (dept_name TEXT, course_id TEXT); CREATE TABLE instructor (dept_name TEXT, ID TEXT); CREATE TABLE student (ID TEXT, name TEXT, dept_name TEXT, tot_cred NUMBER); CREATE TABLE department (dept_name TEXT);"
      },
      {
        "question": "Also, find the number of instructors in each department.",
        "query": "SELECT count(DISTINCT t2.id) , count(DISTINCT t3.id) , t3.dept_name FROM department AS t1 JOIN student AS t2 ON t1.dept_name = t2.dept_name JOIN instructor AS t3 ON t1.dept_name = t3.dept_name GROUP BY t3.dept_name",
        "schema": "CREATE TABLE instructor (ID TEXT, dept_name TEXT, name TEXT); CREATE TABLE takes (ID TEXT); CREATE TABLE section (room_number TEXT, course_id TEXT); CREATE TABLE student (dept_name TEXT, name TEXT, tot_cred NUMBER, ID TEXT); CREATE TABLE advisor (i_ID TEXT, s_ID TEXT); CREATE TABLE classroom (room_number TEXT); CREATE TABLE teaches (ID TEXT); CREATE TABLE department (dept_name TEXT); CREATE TABLE course (course_id TEXT, dept_name TEXT);"
      }
    ],
    [
      {
        "question": "What is the id of the prerequisite of International Finance?",
        "query": "SELECT t2.prereq_id FROM course AS t1 JOIN prereq AS t2 ON t1.course_id = t2.course_id WHERE t1.title = 'International Finance'",
        "schema": "CREATE TABLE takes (course_id TEXT); CREATE TABLE instructor (ID TEXT); CREATE TABLE course (title TEXT, course_id TEXT, dept_name TEXT); CREATE TABLE teaches (course_id TEXT, ID TEXT); CREATE TABLE department (dept_name TEXT); CREATE TABLE prereq (prereq_id TEXT, course_id TEXT); CREATE TABLE section (course_id TEXT, sec_id TEXT); CREATE TABLE student (ID TEXT, dept_name TEXT);"
      },
      {
        "question": "What are the ids of students who have taken this course?",
        "query": "SELECT t1.id FROM student AS t1 JOIN takes AS t2 ON t1.id = t2.id WHERE t2.course_id IN (SELECT t4.prereq_id FROM course AS t3 JOIN prereq AS t4 ON t3.course_id = t4.course_id WHERE t3.title = 'International Finance')",
        "schema": "CREATE TABLE course (dept_name TEXT, title TEXT, course_id TEXT); CREATE TABLE instructor (ID TEXT); CREATE TABLE prereq (prereq_id TEXT, course_id TEXT); CREATE TABLE takes (ID TEXT, course_id TEXT); CREATE TABLE department (dept_name TEXT); CREATE TABLE student (tot_cred NUMBER, dept_name TEXT, ID TEXT); CREATE TABLE teaches (course_id TEXT, ID TEXT); CREATE TABLE section (sec_id TEXT, course_id TEXT);"
      },
      {
        "question": "What are their names?",
        "query": "SELECT t1.name FROM student AS t1 JOIN takes AS t2 ON t1.id = t2.id WHERE t2.course_id IN (SELECT t4.prereq_id FROM course AS t3 JOIN prereq AS t4 ON t3.course_id = t4.course_id WHERE t3.title = 'International Finance')",
        "schema": "CREATE TABLE course (dept_name TEXT, title TEXT, course_id TEXT); CREATE TABLE instructor (name TEXT, ID TEXT); CREATE TABLE prereq (course_id TEXT, prereq_id TEXT); CREATE TABLE department (dept_name TEXT); CREATE TABLE takes (ID TEXT, course_id TEXT); CREATE TABLE teaches (course_id TEXT, ID TEXT); CREATE TABLE student (dept_name TEXT, tot_cred NUMBER, ID TEXT, name TEXT); CREATE TABLE section (sec_id TEXT, course_id TEXT);"
      }
    ],
    [
      {
        "question": "What is the average salary of instructors in the Physics department?",
        "query": "SELECT avg(salary) FROM instructor WHERE dept_name = 'Physics'",
        "schema": "CREATE TABLE teaches (ID TEXT); CREATE TABLE instructor (salary NUMBER, ID TEXT, dept_name TEXT); CREATE TABLE course (dept_name TEXT); CREATE TABLE advisor (s_ID TEXT, i_ID TEXT); CREATE TABLE department (dept_name TEXT);"
      },
      {
        "question": "What are the names of the instructors who earn more than that?",
        "query": "SELECT name FROM instructor WHERE salary < (SELECT avg(salary) FROM instructor WHERE dept_name = 'Physics')",
        "schema": "CREATE TABLE department (dept_name TEXT); CREATE TABLE course (dept_name TEXT); CREATE TABLE advisor (s_ID TEXT, i_ID TEXT); CREATE TABLE teaches (ID TEXT); CREATE TABLE instructor (name TEXT, dept_name TEXT, salary NUMBER, ID TEXT);"
      },
      {
        "question": "Also, what are their salaries?",
        "query": "SELECT name , salary FROM instructor WHERE salary < (SELECT avg(salary) FROM instructor WHERE dept_name = 'Physics')",
        "schema": "CREATE TABLE instructor (salary NUMBER, ID TEXT, name TEXT, dept_name TEXT); CREATE TABLE teaches (ID TEXT); CREATE TABLE department (dept_name TEXT); CREATE TABLE course (dept_name TEXT); CREATE TABLE advisor (s_ID TEXT, i_ID TEXT);"
      }
    ],
    [
      {
        "question": "What is all the information about the Statistics courses?",
        "query": "SELECT * FROM course WHERE dept_name = 'Statistics'",
        "schema": "CREATE TABLE department (dept_name TEXT); CREATE TABLE section (course_id TEXT); CREATE TABLE course (course_id TEXT, dept_name TEXT, title TEXT);"
      },
      {
        "question": "What are the names of students who have taken courses in the Statistics department?",
        "query": "SELECT t3.name FROM course AS t1 JOIN takes AS t2 ON t1.course_id = t2.course_id JOIN student AS t3 ON t2.id = t3.id WHERE t1.dept_name = 'Statistics'",
        "schema": "CREATE TABLE takes (course_id TEXT, ID TEXT); CREATE TABLE department (dept_name TEXT); CREATE TABLE course (course_id TEXT, dept_name TEXT, title TEXT); CREATE TABLE instructor (dept_name TEXT); CREATE TABLE student (dept_name TEXT, tot_cred NUMBER, ID TEXT, name TEXT); CREATE TABLE section (course_id TEXT);"
      }
    ],
    [
      {
        "question": "What is all the information about the courses in the Psychology department, ordered by title?",
        "query": "SELECT * FROM course WHERE dept_name = 'Psychology' ORDER BY title",
        "schema": "CREATE TABLE course (dept_name TEXT, course_id TEXT, title TEXT); CREATE TABLE department (dept_name TEXT); CREATE TABLE instructor (ID TEXT, dept_name TEXT); CREATE TABLE student (dept_name TEXT); CREATE TABLE section (course_id TEXT);"
      },
      {
        "question": "What are the building, room number, semester and year corresponding to these courses?",
        "query": "SELECT t2.building , t2.room_number , t2.semester , t2.year FROM course AS t1 JOIN SECTION AS t2 ON t1.course_id = t2.course_id WHERE t1.dept_name = 'Psychology' ORDER BY t1.title",
        "schema": "CREATE TABLE instructor (ID TEXT, dept_name TEXT); CREATE TABLE department (dept_name TEXT, building TEXT); CREATE TABLE student (dept_name TEXT); CREATE TABLE course (dept_name TEXT, course_id TEXT, title TEXT); CREATE TABLE section (building TEXT, room_number TEXT, course_id TEXT, semester TEXT, year NUMBER); CREATE TABLE classroom (building TEXT, room_number TEXT);"
      }
    ],
    [
      {
        "question": "What are the names of all the instructors?",
        "query": "SELECT name FROM instructor",
        "schema": "CREATE TABLE student (ID TEXT); CREATE TABLE teaches (ID TEXT); CREATE TABLE instructor (name TEXT, ID TEXT, dept_name TEXT); CREATE TABLE advisor (s_ID TEXT, i_ID TEXT);"
      },
      {
        "question": "Of those, which are in the Comp. Sci. department?",
        "query": "SELECT name FROM instructor WHERE dept_name = 'Comp. Sci.'",
        "schema": "CREATE TABLE student (ID TEXT); CREATE TABLE department (dept_name TEXT); CREATE TABLE instructor (name TEXT, dept_name TEXT, ID TEXT); CREATE TABLE advisor (s_ID TEXT, i_ID TEXT); CREATE TABLE course (dept_name TEXT); CREATE TABLE teaches (ID TEXT);"
      }
    ],
    [
      {
        "question": "What are the names of all instructors who earn more than 80000?",
        "query": "SELECT name FROM instructor WHERE salary > 80000",
        "schema": "CREATE TABLE course (credits NUMBER); CREATE TABLE advisor (s_ID TEXT, i_ID TEXT); CREATE TABLE teaches (ID TEXT); CREATE TABLE student (ID TEXT); CREATE TABLE instructor (dept_name TEXT, name TEXT, ID TEXT, salary NUMBER);"
      },
      {
        "question": "Of those, which are in the Comp. Sci. department?",
        "query": "SELECT name FROM instructor WHERE dept_name = 'Comp. Sci.' AND salary > 80000",
        "schema": "CREATE TABLE teaches (ID TEXT); CREATE TABLE department (dept_name TEXT); CREATE TABLE student (ID TEXT); CREATE TABLE course (dept_name TEXT, credits NUMBER); CREATE TABLE advisor (i_ID TEXT, s_ID TEXT); CREATE TABLE instructor (dept_name TEXT, salary NUMBER, ID TEXT, name TEXT);"
      }
    ],
    [
      {
        "question": "What are all the names of teachers who have taught a course?",
        "query": "SELECT name FROM instructor AS t1 JOIN teaches AS t2 ON t1.id = t2.id",
        "schema": "CREATE TABLE teaches (course_id TEXT, ID TEXT); CREATE TABLE advisor (i_ID TEXT, s_ID TEXT); CREATE TABLE course (course_id TEXT, dept_name TEXT, title TEXT); CREATE TABLE instructor (dept_name TEXT, name TEXT, ID TEXT); CREATE TABLE student (ID TEXT); CREATE TABLE section (course_id TEXT);"
      },
      {
        "question": "Also, what were the course ids?",
        "query": "SELECT name , course_id FROM instructor AS t1 JOIN teaches AS t2 ON t1.id = t2.id",
        "schema": "CREATE TABLE course (title TEXT, course_id TEXT, dept_name TEXT); CREATE TABLE section (course_id TEXT); CREATE TABLE instructor (name TEXT, ID TEXT, dept_name TEXT); CREATE TABLE advisor (s_ID TEXT, i_ID TEXT); CREATE TABLE student (ID TEXT); CREATE TABLE teaches (course_id TEXT, ID TEXT);"
      }
    ],
    [
      {
        "question": "What are all the names of teachers who have taught a course, and what were the course ids?",
        "query": "SELECT name , course_id FROM instructor AS t1 JOIN teaches AS t2 ON t1.id = t2.id",
        "schema": "CREATE TABLE prereq (course_id TEXT); CREATE TABLE takes (course_id TEXT, ID TEXT); CREATE TABLE instructor (dept_name TEXT, ID TEXT, name TEXT); CREATE TABLE department (dept_name TEXT); CREATE TABLE section (course_id TEXT); CREATE TABLE teaches (ID TEXT, course_id TEXT); CREATE TABLE course (title TEXT, course_id TEXT, dept_name TEXT); CREATE TABLE student (ID TEXT); CREATE TABLE advisor (i_ID TEXT, s_ID TEXT);"
      },
      {
        "question": "Of these, which were in the Art department?",
        "query": "SELECT name , course_id FROM instructor AS t1 JOIN teaches AS t2 ON t1.id = t2.id WHERE t1.dept_name = 'Art'",
        "schema": "CREATE TABLE instructor (ID TEXT, dept_name TEXT, name TEXT); CREATE TABLE student (ID TEXT); CREATE TABLE course (dept_name TEXT, title TEXT, course_id TEXT); CREATE TABLE section (course_id TEXT); CREATE TABLE department (dept_name TEXT); CREATE TABLE advisor (s_ID TEXT, i_ID TEXT); CREATE TABLE prereq (course_id TEXT); CREATE TABLE teaches (course_id TEXT, ID TEXT); CREATE TABLE takes (ID TEXT, course_id TEXT);"
      }
    ],
    [
      {
        "question": "What are the names of all instructors?",
        "query": "SELECT name FROM instructor",
        "schema": "CREATE TABLE advisor (i_ID TEXT, s_ID TEXT); CREATE TABLE instructor (name TEXT, ID TEXT, dept_name TEXT); CREATE TABLE student (ID TEXT); CREATE TABLE teaches (ID TEXT);"
      },
      {
        "question": "Of these, which include the substring \"dar\"?",
        "query": "SELECT name FROM instructor WHERE name LIKE '%dar%'",
        "schema": "CREATE TABLE student (ID TEXT); CREATE TABLE advisor (i_ID TEXT, s_ID TEXT); CREATE TABLE instructor (dept_name TEXT, ID TEXT, name TEXT); CREATE TABLE teaches (ID TEXT);"
      }
    ],
    [
      {
        "question": "What are the distinct names of all instructors?",
        "query": "SELECT DISTINCT name FROM instructor",
        "schema": "CREATE TABLE advisor (i_ID TEXT); CREATE TABLE instructor (dept_name TEXT, ID TEXT, name TEXT); CREATE TABLE teaches (ID TEXT);"
      },
      {
        "question": "Sort this in alphabetical order.",
        "query": "SELECT DISTINCT name FROM instructor ORDER BY name",
        "schema": "CREATE TABLE advisor (i_ID TEXT); CREATE TABLE teaches (ID TEXT); CREATE TABLE instructor (ID TEXT, dept_name TEXT, name TEXT);"
      }
    ],
    [
      {
        "question": "What are the ids for courses offered in the Fall of 2009?",
        "query": "SELECT course_id FROM SECTION WHERE semester = 'Fall' AND YEAR = 2009",
        "schema": "CREATE TABLE section (year NUMBER, semester TEXT, sec_id TEXT, course_id TEXT); CREATE TABLE course (dept_name TEXT, course_id TEXT, title TEXT); CREATE TABLE takes (semester TEXT);"
      },
      {
        "question": "Also include the ids for courses offered in the Spring of 2010.",
        "query": "SELECT course_id FROM SECTION WHERE semester = 'Fall' AND YEAR = 2009 UNION SELECT course_id FROM SECTION WHERE semester = 'Spring' AND YEAR = 2010",
        "schema": "CREATE TABLE takes (semester TEXT); CREATE TABLE course (title TEXT, dept_name TEXT, course_id TEXT); CREATE TABLE section (course_id TEXT, sec_id TEXT, year NUMBER, semester TEXT);"
      }
    ],
    [
      {
        "question": "What are the ids for courses offered in the Fall of 2009?",
        "query": "SELECT course_id FROM SECTION WHERE semester = 'Fall' AND YEAR = 2009",
        "schema": "CREATE TABLE course (dept_name TEXT, title TEXT, course_id TEXT); CREATE TABLE section (year NUMBER, course_id TEXT, semester TEXT, sec_id TEXT); CREATE TABLE takes (semester TEXT);"
      },
      {
        "question": "Of these, which were also offered in the Spring of 2010?",
        "query": "SELECT course_id FROM SECTION WHERE semester = 'Fall' AND YEAR = 2009 INTERSECT SELECT course_id FROM SECTION WHERE semester = 'Spring' AND YEAR = 2010",
        "schema": "CREATE TABLE course (course_id TEXT, title TEXT, dept_name TEXT); CREATE TABLE takes (semester TEXT); CREATE TABLE section (year NUMBER, course_id TEXT, sec_id TEXT, semester TEXT);"
      }
    ],
    [
      {
        "question": "What are the ids of courses offered in the Fall of 2009?",
        "query": "SELECT course_id FROM SECTION WHERE semester = 'Fall' AND YEAR = 2009",
        "schema": "CREATE TABLE section (semester TEXT, year NUMBER, sec_id TEXT, course_id TEXT); CREATE TABLE course (course_id TEXT, dept_name TEXT, title TEXT); CREATE TABLE takes (semester TEXT);"
      },
      {
        "question": "Of these, which were not offered in the Spring of 2010?",
        "query": "SELECT course_id FROM SECTION WHERE semester = 'Fall' AND YEAR = 2009 EXCEPT SELECT course_id FROM SECTION WHERE semester = 'Spring' AND YEAR = 2010",
        "schema": "CREATE TABLE course (course_id TEXT, title TEXT, dept_name TEXT); CREATE TABLE section (year NUMBER, semester TEXT, sec_id TEXT, building TEXT, course_id TEXT); CREATE TABLE takes (semester TEXT);"
      }
    ],
    [
      {
        "question": "What was the largest salary across instructors?",
        "query": "SELECT max(salary) FROM instructor",
        "schema": "CREATE TABLE teaches (ID TEXT); CREATE TABLE department (dept_name TEXT); CREATE TABLE instructor (salary NUMBER, ID TEXT, name TEXT, dept_name TEXT); CREATE TABLE advisor (s_ID TEXT, i_ID TEXT);"
      },
      {
        "question": "What were all the other distinct salaries?",
        "query": "SELECT DISTINCT salary FROM instructor WHERE salary < (SELECT max(salary) FROM instructor)",
        "schema": "CREATE TABLE advisor (i_ID TEXT, s_ID TEXT); CREATE TABLE teaches (ID TEXT); CREATE TABLE department (dept_name TEXT); CREATE TABLE instructor (ID TEXT, name TEXT, dept_name TEXT, salary NUMBER);"
      }
    ],
    [
      {
        "question": "What are the distinct ids of instructors teaching in the Spring of 2010?",
        "query": "SELECT DISTINCT id FROM teaches WHERE semester = 'Spring' AND YEAR = 2010",
        "schema": "CREATE TABLE advisor (i_ID TEXT, s_ID TEXT); CREATE TABLE instructor (ID TEXT, dept_name TEXT); CREATE TABLE department (dept_name TEXT); CREATE TABLE teaches (semester TEXT, ID TEXT, year NUMBER, course_id TEXT); CREATE TABLE section (year NUMBER, semester TEXT);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT COUNT (DISTINCT id) FROM teaches WHERE semester = 'Spring' AND YEAR = 2010",
        "schema": "CREATE TABLE teaches (course_id TEXT, semester TEXT, ID TEXT, year NUMBER); CREATE TABLE department (dept_name TEXT); CREATE TABLE advisor (s_ID TEXT, i_ID TEXT); CREATE TABLE section (semester TEXT, year NUMBER); CREATE TABLE instructor (ID TEXT, dept_name TEXT);"
      }
    ],
    [
      {
        "question": "What are the names of departments that have average salaries higher than 42000?",
        "query": "SELECT dept_name FROM instructor GROUP BY dept_name HAVING AVG (salary) > 42000",
        "schema": "CREATE TABLE course (dept_name TEXT, course_id TEXT); CREATE TABLE advisor (s_ID TEXT); CREATE TABLE student (ID TEXT, dept_name TEXT); CREATE TABLE department (budget NUMBER, dept_name TEXT); CREATE TABLE instructor (salary NUMBER, name TEXT, ID TEXT, dept_name TEXT); CREATE TABLE section (course_id TEXT);"
      },
      {
        "question": "Also, what are their average salaries?",
        "query": "SELECT dept_name , AVG (salary) FROM instructor GROUP BY dept_name HAVING AVG (salary) > 42000",
        "schema": "CREATE TABLE course (course_id TEXT, dept_name TEXT); CREATE TABLE department (budget NUMBER, dept_name TEXT); CREATE TABLE instructor (ID TEXT, dept_name TEXT, salary NUMBER, name TEXT); CREATE TABLE advisor (s_ID TEXT, i_ID TEXT); CREATE TABLE teaches (ID TEXT); CREATE TABLE section (course_id TEXT); CREATE TABLE student (ID TEXT, dept_name TEXT);"
      }
    ],
    [
      {
        "question": "What is the lowest salary of instructors in the Biology department?",
        "query": "SELECT min(salary) FROM instructor WHERE dept_name = 'Biology'",
        "schema": "CREATE TABLE course (dept_name TEXT); CREATE TABLE advisor (s_ID TEXT, i_ID TEXT); CREATE TABLE department (dept_name TEXT); CREATE TABLE instructor (salary NUMBER, name TEXT, ID TEXT, dept_name TEXT); CREATE TABLE teaches (ID TEXT);"
      },
      {
        "question": "What are the ids of instructors who earn more than that?",
        "query": "SELECT id FROM instructor WHERE salary > (SELECT min(salary) FROM instructor WHERE dept_name = 'Biology')",
        "schema": "CREATE TABLE department (dept_name TEXT); CREATE TABLE advisor (i_ID TEXT, s_ID TEXT); CREATE TABLE instructor (name TEXT, salary NUMBER, ID TEXT, dept_name TEXT); CREATE TABLE course (dept_name TEXT); CREATE TABLE teaches (ID TEXT);"
      },
      {
        "question": "What are their names?",
        "query": "SELECT name FROM instructor WHERE salary > (SELECT min(salary) FROM instructor WHERE dept_name = 'Biology')",
        "schema": "CREATE TABLE teaches (ID TEXT); CREATE TABLE instructor (ID TEXT, salary NUMBER, dept_name TEXT, name TEXT); CREATE TABLE department (dept_name TEXT); CREATE TABLE course (dept_name TEXT); CREATE TABLE advisor (i_ID TEXT, s_ID TEXT);"
      }
    ],
    [
      {
        "question": "What is the highest salary of instructors in the Biology department?",
        "query": "SELECT max(salary) FROM instructor WHERE dept_name = 'Biology'",
        "schema": "CREATE TABLE course (dept_name TEXT); CREATE TABLE instructor (dept_name TEXT, ID TEXT, salary NUMBER, name TEXT); CREATE TABLE teaches (ID TEXT); CREATE TABLE department (dept_name TEXT); CREATE TABLE advisor (s_ID TEXT, i_ID TEXT);"
      },
      {
        "question": "What are the names of instructors who earn more than this?",
        "query": "SELECT name FROM instructor WHERE salary > (SELECT max(salary) FROM instructor WHERE dept_name = 'Biology')",
        "schema": "CREATE TABLE teaches (ID TEXT); CREATE TABLE advisor (i_ID TEXT, s_ID TEXT); CREATE TABLE instructor (name TEXT, dept_name TEXT, ID TEXT, salary NUMBER); CREATE TABLE course (dept_name TEXT); CREATE TABLE department (dept_name TEXT);"
      }
    ]
  ],
  "college_1": [
    [
      {
        "question": "What are the codes of the accounting department?",
        "query": "SELECT dept_code FROM department WHERE dept_name = \"Accounting\"",
        "schema": "CREATE TABLE DEPARTMENT (DEPT_CODE TEXT, SCHOOL_CODE TEXT, DEPT_NAME TEXT, EMP_NUM NUMBER); CREATE TABLE STUDENT (DEPT_CODE TEXT); CREATE TABLE COURSE (CRS_CODE TEXT, DEPT_CODE TEXT); CREATE TABLE CLASS (CRS_CODE TEXT, CLASS_CODE TEXT); CREATE TABLE PROFESSOR (DEPT_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER);"
      },
      {
        "question": "Which professors are in that department?",
        "query": "SELECT * FROM professor AS t1 JOIN department AS t2 ON t1.dept_code = t2.dept_code WHERE dept_name = \"Accounting\"",
        "schema": "CREATE TABLE CLASS (CLASS_CODE TEXT, CRS_CODE TEXT, PROF_NUM NUMBER); CREATE TABLE DEPARTMENT (DEPT_NAME TEXT, EMP_NUM NUMBER, SCHOOL_CODE TEXT, DEPT_CODE TEXT); CREATE TABLE COURSE (CRS_CODE TEXT, DEPT_CODE TEXT); CREATE TABLE PROFESSOR (PROF_OFFICE TEXT, PROF_HIGH_DEGREE TEXT, DEPT_CODE TEXT, EMP_NUM NUMBER); CREATE TABLE EMPLOYEE (EMP_INITIAL TEXT, EMP_JOBCODE TEXT, EMP_NUM NUMBER, EMP_LNAME TEXT, EMP_FNAME TEXT, EMP_HIREDATE TIME, EMP_DOB TIME); CREATE TABLE STUDENT (DEPT_CODE TEXT);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT count(*) FROM professor AS t1 JOIN department AS t2 ON t1.dept_code = t2.dept_code WHERE dept_name = \"Accounting\"",
        "schema": "CREATE TABLE DEPARTMENT (DEPT_NAME TEXT, SCHOOL_CODE TEXT, EMP_NUM NUMBER, DEPT_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER, EMP_LNAME TEXT, EMP_DOB TIME, EMP_INITIAL TEXT, EMP_JOBCODE TEXT, EMP_HIREDATE TIME, EMP_FNAME TEXT); CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_CODE TEXT); CREATE TABLE CLASS (CLASS_CODE TEXT, CRS_CODE TEXT, PROF_NUM NUMBER); CREATE TABLE PROFESSOR (PROF_HIGH_DEGREE TEXT, PROF_OFFICE TEXT, EMP_NUM NUMBER, DEPT_CODE TEXT); CREATE TABLE STUDENT (DEPT_CODE TEXT);"
      }
    ],
    [
      {
        "question": "What can you tell me about the class with code \"ACCT-211\"?",
        "query": "SELECT * FROM CLASS WHERE crs_code = \"ACCT-211\"",
        "schema": "CREATE TABLE CLASS (CRS_CODE TEXT, PROF_NUM NUMBER, CLASS_SECTION TEXT, CLASS_CODE TEXT); CREATE TABLE DEPARTMENT (SCHOOL_CODE TEXT, EMP_NUM NUMBER, DEPT_CODE TEXT); CREATE TABLE PROFESSOR (EMP_NUM NUMBER, DEPT_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE STUDENT (STU_INIT TEXT, DEPT_CODE TEXT, STU_NUM NUMBER, STU_CLASS TEXT, STU_DOB TIME, PROF_NUM NUMBER); CREATE TABLE ENROLL (CLASS_CODE TEXT); CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_CODE TEXT);"
      },
      {
        "question": "How many different professors teach that class?",
        "query": "SELECT count(DISTINCT prof_num) FROM CLASS WHERE crs_code = \"ACCT-211\"",
        "schema": "CREATE TABLE EMPLOYEE (EMP_HIREDATE TIME, EMP_JOBCODE TEXT, EMP_NUM NUMBER, EMP_LNAME TEXT, EMP_DOB TIME, EMP_FNAME TEXT); CREATE TABLE CLASS (CLASS_SECTION TEXT, PROF_NUM NUMBER, CRS_CODE TEXT, CLASS_CODE TEXT); CREATE TABLE PROFESSOR (DEPT_CODE TEXT, PROF_HIGH_DEGREE TEXT, EMP_NUM NUMBER, PROF_OFFICE TEXT); CREATE TABLE STUDENT (PROF_NUM NUMBER, STU_DOB TIME, STU_INIT TEXT, DEPT_CODE TEXT, STU_NUM NUMBER, STU_CLASS TEXT); CREATE TABLE ENROLL (CLASS_CODE TEXT); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT, EMP_NUM NUMBER, SCHOOL_CODE TEXT); CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_CODE TEXT);"
      }
    ],
    [
      {
        "question": "What can you tell me about the biology department?",
        "query": "SELECT * FROM department WHERE dept_name = \"Biology\"",
        "schema": "CREATE TABLE STUDENT (DEPT_CODE TEXT); CREATE TABLE CLASS (PROF_NUM NUMBER, CRS_CODE TEXT); CREATE TABLE DEPARTMENT (DEPT_NAME TEXT, SCHOOL_CODE TEXT, DEPT_CODE TEXT, EMP_NUM NUMBER); CREATE TABLE PROFESSOR (EMP_NUM NUMBER, DEPT_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_CODE TEXT);"
      },
      {
        "question": "What are the first name of all professors in the department?",
        "query": "SELECT t3.emp_fname FROM professor AS t1 JOIN department AS t2 ON t1.dept_code = t2.dept_code JOIN employee AS t3 ON t1.emp_num = t3.emp_num WHERE dept_name = \"Biology\"",
        "schema": "CREATE TABLE EMPLOYEE (EMP_DOB TIME, EMP_HIREDATE TIME, EMP_FNAME TEXT, EMP_NUM NUMBER, EMP_JOBCODE TEXT, EMP_LNAME TEXT); CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_CODE TEXT); CREATE TABLE STUDENT (DEPT_CODE TEXT); CREATE TABLE PROFESSOR (PROF_OFFICE TEXT, DEPT_CODE TEXT, EMP_NUM NUMBER); CREATE TABLE CLASS (PROF_NUM NUMBER, CRS_CODE TEXT); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT, DEPT_NAME TEXT, EMP_NUM NUMBER, SCHOOL_CODE TEXT);"
      },
      {
        "question": "What are their last names as well?",
        "query": "SELECT t3.emp_fname , t3.emp_lname FROM professor AS t1 JOIN department AS t2 ON t1.dept_code = t2.dept_code JOIN employee AS t3 ON t1.emp_num = t3.emp_num WHERE dept_name = \"Biology\"",
        "schema": "CREATE TABLE CLASS (CRS_CODE TEXT, PROF_NUM NUMBER); CREATE TABLE PROFESSOR (EMP_NUM NUMBER, PROF_OFFICE TEXT, DEPT_CODE TEXT); CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_HIREDATE TIME, EMP_NUM NUMBER, EMP_FNAME TEXT, EMP_DOB TIME, EMP_JOBCODE TEXT, EMP_LNAME TEXT); CREATE TABLE STUDENT (DEPT_CODE TEXT); CREATE TABLE DEPARTMENT (DEPT_NAME TEXT, EMP_NUM NUMBER, DEPT_CODE TEXT, SCHOOL_CODE TEXT);"
      }
    ],
    [
      {
        "question": "Which professors are in charge of ACCT-211?",
        "query": "SELECT DISTINCT * FROM employee AS t1 JOIN CLASS AS t2 ON t1.emp_num = t2.prof_num WHERE crs_code = \"ACCT-211\"",
        "schema": "CREATE TABLE COURSE (CRS_CODE TEXT, DEPT_CODE TEXT); CREATE TABLE STUDENT (PROF_NUM NUMBER, DEPT_CODE TEXT); CREATE TABLE PROFESSOR (PROF_HIGH_DEGREE TEXT, DEPT_CODE TEXT, PROF_EXTENSION TEXT, EMP_NUM NUMBER, PROF_OFFICE TEXT); CREATE TABLE DEPARTMENT (DEPT_NAME TEXT, EMP_NUM NUMBER, SCHOOL_CODE TEXT, DEPT_CODE TEXT); CREATE TABLE CLASS (CRS_CODE TEXT, CLASS_CODE TEXT, PROF_NUM NUMBER); CREATE TABLE EMPLOYEE (EMP_JOBCODE TEXT, EMP_LNAME TEXT, EMP_FNAME TEXT, EMP_HIREDATE TIME, EMP_DOB TIME, EMP_NUM NUMBER);"
      },
      {
        "question": "What are their first names?",
        "query": "SELECT DISTINCT t1.emp_fname FROM employee AS t1 JOIN CLASS AS t2 ON t1.emp_num = t2.prof_num WHERE crs_code = \"ACCT-211\"",
        "schema": "CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_FNAME TEXT, EMP_JOBCODE TEXT, EMP_LNAME TEXT, EMP_HIREDATE TIME, EMP_DOB TIME, EMP_NUM NUMBER); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT, EMP_NUM NUMBER, SCHOOL_CODE TEXT, DEPT_NAME TEXT); CREATE TABLE PROFESSOR (EMP_NUM NUMBER, PROF_EXTENSION TEXT, PROF_HIGH_DEGREE TEXT, DEPT_CODE TEXT, PROF_OFFICE TEXT); CREATE TABLE CLASS (CRS_CODE TEXT, PROF_NUM NUMBER, CLASS_CODE TEXT); CREATE TABLE STUDENT (STU_FNAME TEXT, DEPT_CODE TEXT, STU_LNAME TEXT, PROF_NUM NUMBER);"
      },
      {
        "question": "Also, what are their date of births?",
        "query": "SELECT DISTINCT t1.emp_fname , t1.emp_dob FROM employee AS t1 JOIN CLASS AS t2 ON t1.emp_num = t2.prof_num WHERE crs_code = \"ACCT-211\"",
        "schema": "CREATE TABLE CLASS (CRS_CODE TEXT, CLASS_CODE TEXT, PROF_NUM NUMBER); CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_CODE TEXT); CREATE TABLE STUDENT (STU_FNAME TEXT, PROF_NUM NUMBER, STU_LNAME TEXT, DEPT_CODE TEXT); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT, EMP_NUM NUMBER, DEPT_NAME TEXT, SCHOOL_CODE TEXT); CREATE TABLE PROFESSOR (PROF_OFFICE TEXT, DEPT_CODE TEXT, PROF_EXTENSION TEXT, EMP_NUM NUMBER, PROF_HIGH_DEGREE TEXT); CREATE TABLE EMPLOYEE (EMP_JOBCODE TEXT, EMP_LNAME TEXT, EMP_FNAME TEXT, EMP_HIREDATE TIME, EMP_NUM NUMBER, EMP_DOB TIME);"
      }
    ],
    [
      {
        "question": "Give all details about the professor with the last name Graztevski?",
        "query": "SELECT * FROM employee WHERE emp_lname = 'Graztevski'",
        "schema": "CREATE TABLE EMPLOYEE (EMP_DOB TIME, EMP_NUM NUMBER, EMP_LNAME TEXT, EMP_HIREDATE TIME, EMP_FNAME TEXT); CREATE TABLE CLASS (PROF_NUM NUMBER); CREATE TABLE PROFESSOR (DEPT_CODE TEXT, PROF_OFFICE TEXT, EMP_NUM NUMBER); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT, EMP_NUM NUMBER);"
      },
      {
        "question": "Which classes does he teach? Return the class code.",
        "query": "SELECT t2.crs_code FROM employee AS t1 JOIN CLASS AS t2 ON t1.emp_num = t2.prof_num WHERE t1.emp_lname = 'Graztevski'",
        "schema": "CREATE TABLE CLASS (PROF_NUM NUMBER, CLASS_CODE TEXT, CRS_CODE TEXT); CREATE TABLE PROFESSOR (PROF_OFFICE TEXT, DEPT_CODE TEXT, EMP_NUM NUMBER); CREATE TABLE EMPLOYEE (EMP_DOB TIME, EMP_NUM NUMBER, EMP_FNAME TEXT, EMP_LNAME TEXT, EMP_HIREDATE TIME, EMP_JOBCODE TEXT); CREATE TABLE COURSE (CRS_CODE TEXT, DEPT_CODE TEXT); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT, EMP_NUM NUMBER);"
      },
      {
        "question": "How many classes does he teach?",
        "query": "SELECT count(*) FROM employee AS t1 JOIN CLASS AS t2 ON t1.emp_num = t2.prof_num WHERE t1.emp_lname = 'Graztevski'",
        "schema": "CREATE TABLE DEPARTMENT (DEPT_CODE TEXT, EMP_NUM NUMBER); CREATE TABLE COURSE (CRS_CODE TEXT, DEPT_CODE TEXT); CREATE TABLE PROFESSOR (PROF_OFFICE TEXT, DEPT_CODE TEXT, EMP_NUM NUMBER); CREATE TABLE EMPLOYEE (EMP_FNAME TEXT, EMP_DOB TIME, EMP_NUM NUMBER, EMP_LNAME TEXT, EMP_JOBCODE TEXT, EMP_HIREDATE TIME); CREATE TABLE CLASS (PROF_NUM NUMBER, CRS_CODE TEXT, CLASS_CODE TEXT);"
      }
    ],
    [
      {
        "question": "Find all info about the accounting department?",
        "query": "SELECT * FROM department WHERE dept_name = \"Accounting\"",
        "schema": "CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE PROFESSOR (DEPT_CODE TEXT, EMP_NUM NUMBER); CREATE TABLE DEPARTMENT (SCHOOL_CODE TEXT, DEPT_NAME TEXT, DEPT_EXTENSION TEXT, EMP_NUM NUMBER, DEPT_CODE TEXT); CREATE TABLE CLASS (CRS_CODE TEXT, PROF_NUM NUMBER); CREATE TABLE STUDENT (DEPT_CODE TEXT); CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_CODE TEXT);"
      },
      {
        "question": "What is its school code?",
        "query": "SELECT school_code FROM department WHERE dept_name = \"Accounting\"",
        "schema": "CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_CODE TEXT); CREATE TABLE CLASS (CRS_CODE TEXT, PROF_NUM NUMBER); CREATE TABLE PROFESSOR (DEPT_CODE TEXT, EMP_NUM NUMBER); CREATE TABLE DEPARTMENT (DEPT_NAME TEXT, DEPT_EXTENSION TEXT, SCHOOL_CODE TEXT, DEPT_CODE TEXT, EMP_NUM NUMBER); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE STUDENT (DEPT_CODE TEXT);"
      }
    ],
    [
      {
        "question": "How many credits does each course have?",
        "query": "SELECT crs_credit , crs_code FROM course GROUP BY crs_code",
        "schema": "CREATE TABLE COURSE (CRS_CODE TEXT, DEPT_CODE TEXT, CRS_CREDIT NUMBER); CREATE TABLE CLASS (CRS_CODE TEXT); CREATE TABLE STUDENT (DEPT_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT);"
      },
      {
        "question": "How many does CIS-220 have?",
        "query": "SELECT crs_credit FROM course WHERE crs_code = 'CIS-220'",
        "schema": "CREATE TABLE COURSE (CRS_CREDIT NUMBER, CRS_CODE TEXT, DEPT_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE STUDENT (DEPT_CODE TEXT); CREATE TABLE CLASS (CRS_CODE TEXT); CREATE TABLE DEPARTMENT (EMP_NUM NUMBER, DEPT_CODE TEXT);"
      },
      {
        "question": "What is its description?",
        "query": "SELECT crs_description FROM course WHERE crs_code = 'CIS-220'",
        "schema": "CREATE TABLE CLASS (CRS_CODE TEXT); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT, EMP_NUM NUMBER); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE COURSE (CRS_DESCRIPTION TEXT, CRS_CREDIT NUMBER, DEPT_CODE TEXT, CRS_CODE TEXT); CREATE TABLE STUDENT (DEPT_CODE TEXT);"
      }
    ],
    [
      {
        "question": "List addresses of all departments.",
        "query": "SELECT dept_address FROM department",
        "schema": "CREATE TABLE DEPARTMENT (DEPT_NAME TEXT, DEPT_CODE TEXT, DEPT_ADDRESS TEXT, EMP_NUM NUMBER);"
      },
      {
        "question": "What is one for the history department?",
        "query": "SELECT dept_address FROM department WHERE dept_name = 'History'",
        "schema": "CREATE TABLE DEPARTMENT (EMP_NUM NUMBER, SCHOOL_CODE TEXT, DEPT_NAME TEXT, DEPT_ADDRESS TEXT, DEPT_CODE TEXT);"
      }
    ],
    [
      {
        "question": "What are the names of departments in the school with the code BUS?",
        "query": "SELECT dept_name FROM department WHERE school_code = 'BUS'",
        "schema": "CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_CODE TEXT); CREATE TABLE CLASS (CRS_CODE TEXT, CLASS_CODE TEXT, PROF_NUM NUMBER); CREATE TABLE STUDENT (DEPT_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE PROFESSOR (DEPT_CODE TEXT); CREATE TABLE DEPARTMENT (DEPT_EXTENSION TEXT, DEPT_ADDRESS TEXT, DEPT_NAME TEXT, SCHOOL_CODE TEXT, DEPT_CODE TEXT, EMP_NUM NUMBER);"
      },
      {
        "question": "What are different addresses of the school?",
        "query": "SELECT DISTINCT dept_address FROM department WHERE school_code = 'BUS'",
        "schema": "CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_CODE TEXT); CREATE TABLE DEPARTMENT (EMP_NUM NUMBER, SCHOOL_CODE TEXT, DEPT_CODE TEXT, DEPT_NAME TEXT, DEPT_EXTENSION TEXT, DEPT_ADDRESS TEXT); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE PROFESSOR (DEPT_CODE TEXT); CREATE TABLE STUDENT (DEPT_CODE TEXT); CREATE TABLE CLASS (CRS_CODE TEXT, PROF_NUM NUMBER, CLASS_CODE TEXT);"
      },
      {
        "question": "How many of them are there?",
        "query": "SELECT count(DISTINCT dept_address) FROM department WHERE school_code = 'BUS'",
        "schema": "CREATE TABLE PROFESSOR (DEPT_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_CODE TEXT); CREATE TABLE DEPARTMENT (DEPT_NAME TEXT, DEPT_ADDRESS TEXT, EMP_NUM NUMBER, DEPT_EXTENSION TEXT, SCHOOL_CODE TEXT, DEPT_CODE TEXT); CREATE TABLE CLASS (CLASS_CODE TEXT, CRS_CODE TEXT, PROF_NUM NUMBER); CREATE TABLE STUDENT (DEPT_CODE TEXT);"
      }
    ],
    [
      {
        "question": "How many different shools are there?",
        "query": "SELECT count(DISTINCT school_code) FROM department",
        "schema": "CREATE TABLE PROFESSOR (EMP_NUM NUMBER, DEPT_CODE TEXT); CREATE TABLE COURSE (CRS_CODE TEXT, DEPT_CODE TEXT); CREATE TABLE CLASS (CLASS_CODE TEXT, CRS_CODE TEXT, PROF_NUM NUMBER); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE STUDENT (STU_CLASS TEXT, DEPT_CODE TEXT, STU_NUM NUMBER, STU_DOB TIME, STU_INIT TEXT); CREATE TABLE DEPARTMENT (EMP_NUM NUMBER, SCHOOL_CODE TEXT, DEPT_ADDRESS TEXT, DEPT_NAME TEXT, DEPT_CODE TEXT);"
      },
      {
        "question": "How many different addresses does each one have?",
        "query": "SELECT count(DISTINCT dept_address) , school_code FROM department GROUP BY school_code",
        "schema": "CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE DEPARTMENT (DEPT_ADDRESS TEXT, SCHOOL_CODE TEXT, DEPT_NAME TEXT, EMP_NUM NUMBER, DEPT_CODE TEXT); CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_CODE TEXT); CREATE TABLE CLASS (CLASS_CODE TEXT, CRS_CODE TEXT, PROF_NUM NUMBER); CREATE TABLE PROFESSOR (EMP_NUM NUMBER, DEPT_CODE TEXT); CREATE TABLE STUDENT (STU_NUM NUMBER, STU_CLASS TEXT, DEPT_CODE TEXT, STU_DOB TIME, STU_INIT TEXT);"
      }
    ],
    [
      {
        "question": "Return all info about all courses.",
        "query": "SELECT * FROM course",
        "schema": "CREATE TABLE CLASS (CRS_CODE TEXT); CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_CODE TEXT); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE PROFESSOR (DEPT_CODE TEXT); CREATE TABLE STUDENT (STU_DOB TIME, DEPT_CODE TEXT);"
      },
      {
        "question": "How many credits is the course QM-261 worth?",
        "query": "SELECT crs_credit FROM course WHERE crs_code = 'QM-261'",
        "schema": "CREATE TABLE STUDENT (DEPT_CODE TEXT, STU_DOB TIME); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE PROFESSOR (DEPT_CODE TEXT); CREATE TABLE COURSE (CRS_CODE TEXT, CRS_CREDIT NUMBER, DEPT_CODE TEXT); CREATE TABLE CLASS (CRS_CODE TEXT); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT);"
      },
      {
        "question": "WHat is its description?",
        "query": "SELECT crs_credit , crs_description FROM course WHERE crs_code = 'QM-261'",
        "schema": "CREATE TABLE STUDENT (STU_DOB TIME, DEPT_CODE TEXT); CREATE TABLE CLASS (CRS_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE PROFESSOR (DEPT_CODE TEXT); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT); CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_DESCRIPTION TEXT, CRS_CREDIT NUMBER, CRS_CODE TEXT);"
      }
    ],
    [
      {
        "question": "What are the different school codes?",
        "query": "SELECT DISTINCT school_code FROM department",
        "schema": "CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_CODE TEXT); CREATE TABLE DEPARTMENT (DEPT_NAME TEXT, DEPT_CODE TEXT, SCHOOL_CODE TEXT); CREATE TABLE CLASS (CRS_CODE TEXT, CLASS_CODE TEXT); CREATE TABLE STUDENT (DEPT_CODE TEXT);"
      },
      {
        "question": "For each one, how many different departments does it have?",
        "query": "SELECT count(DISTINCT dept_name) , school_code FROM department GROUP BY school_code",
        "schema": "CREATE TABLE STUDENT (DEPT_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_CODE TEXT); CREATE TABLE CLASS (CLASS_CODE TEXT, CRS_CODE TEXT); CREATE TABLE DEPARTMENT (DEPT_NAME TEXT, SCHOOL_CODE TEXT, EMP_NUM NUMBER, DEPT_CODE TEXT); CREATE TABLE PROFESSOR (DEPT_CODE TEXT);"
      }
    ],
    [
      {
        "question": "What are the different schools?",
        "query": "SELECT DISTINCT school_code FROM department",
        "schema": "CREATE TABLE PROFESSOR (DEPT_CODE TEXT); CREATE TABLE STUDENT (DEPT_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE DEPARTMENT (EMP_NUM NUMBER, DEPT_NAME TEXT, SCHOOL_CODE TEXT, DEPT_CODE TEXT); CREATE TABLE CLASS (CRS_CODE TEXT, CLASS_CODE TEXT); CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_CODE TEXT);"
      },
      {
        "question": "How many departments does each one of them have?",
        "query": "SELECT count(DISTINCT dept_name) , school_code FROM department GROUP BY school_code",
        "schema": "CREATE TABLE CLASS (CLASS_CODE TEXT, CRS_CODE TEXT); CREATE TABLE STUDENT (DEPT_CODE TEXT); CREATE TABLE PROFESSOR (DEPT_CODE TEXT); CREATE TABLE COURSE (CRS_CODE TEXT, DEPT_CODE TEXT); CREATE TABLE DEPARTMENT (EMP_NUM NUMBER, SCHOOL_CODE TEXT, DEPT_CODE TEXT, DEPT_NAME TEXT); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER);"
      },
      {
        "question": "Find the ones which have less than 5 deparments.",
        "query": "SELECT count(DISTINCT dept_name) , school_code FROM department GROUP BY school_code HAVING count(DISTINCT dept_name) < 5",
        "schema": "CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE COURSE (CRS_CODE TEXT, DEPT_CODE TEXT); CREATE TABLE PROFESSOR (DEPT_CODE TEXT); CREATE TABLE DEPARTMENT (DEPT_NAME TEXT, DEPT_CODE TEXT, SCHOOL_CODE TEXT, EMP_NUM NUMBER); CREATE TABLE STUDENT (DEPT_CODE TEXT); CREATE TABLE CLASS (CLASS_CODE TEXT, CRS_CODE TEXT);"
      }
    ],
    [
      {
        "question": "What are the different course codes?",
        "query": "SELECT DISTINCT crs_code FROM CLASS",
        "schema": "CREATE TABLE CLASS (CLASS_CODE TEXT, CRS_CODE TEXT); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT); CREATE TABLE COURSE (CRS_CODE TEXT, DEPT_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE STUDENT (DEPT_CODE TEXT, STU_DOB TIME);"
      },
      {
        "question": "How many sections exist for each one?",
        "query": "SELECT count(*) , crs_code FROM CLASS GROUP BY crs_code",
        "schema": "CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE COURSE (CRS_CODE TEXT, DEPT_CODE TEXT); CREATE TABLE CLASS (CLASS_SECTION TEXT, CLASS_CODE TEXT, CRS_CODE TEXT); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT); CREATE TABLE STUDENT (DEPT_CODE TEXT, STU_DOB TIME, STU_CLASS TEXT);"
      }
    ],
    [
      {
        "question": "What is the total credits of all courses?",
        "query": "SELECT sum(crs_credit) FROM course",
        "schema": "CREATE TABLE CLASS (CRS_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT); CREATE TABLE PROFESSOR (DEPT_CODE TEXT); CREATE TABLE STUDENT (STU_NUM NUMBER, DEPT_CODE TEXT); CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_CREDIT NUMBER, CRS_CODE TEXT);"
      },
      {
        "question": "Give the number for each department.",
        "query": "SELECT sum(crs_credit) , dept_code FROM course GROUP BY dept_code",
        "schema": "CREATE TABLE PROFESSOR (DEPT_CODE TEXT); CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_CODE TEXT, CRS_CREDIT NUMBER); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE CLASS (CRS_CODE TEXT); CREATE TABLE DEPARTMENT (SCHOOL_CODE TEXT, DEPT_NAME TEXT, EMP_NUM NUMBER, DEPT_CODE TEXT, DEPT_EXTENSION TEXT); CREATE TABLE STUDENT (DEPT_CODE TEXT, STU_NUM NUMBER);"
      }
    ],
    [
      {
        "question": "For each classroom, how many the classes held there?",
        "query": "SELECT count(*) , class_room FROM CLASS GROUP BY class_room",
        "schema": "CREATE TABLE CLASS (CRS_CODE TEXT, CLASS_TIME TEXT, CLASS_CODE TEXT, CLASS_SECTION TEXT, CLASS_ROOM TEXT); CREATE TABLE STUDENT (STU_CLASS TEXT, DEPT_CODE TEXT); CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_CODE TEXT); CREATE TABLE DEPARTMENT (DEPT_NAME TEXT, DEPT_CODE TEXT, SCHOOL_CODE TEXT);"
      },
      {
        "question": "How many are there for each classroom with at least 2 classes?",
        "query": "SELECT count(*) , class_room FROM CLASS GROUP BY class_room HAVING count(*) >= 2",
        "schema": "CREATE TABLE CLASS (CLASS_SECTION TEXT, PROF_NUM NUMBER, CLASS_ROOM TEXT, CLASS_TIME TEXT, CLASS_CODE TEXT, CRS_CODE TEXT); CREATE TABLE COURSE (CRS_CODE TEXT, DEPT_CODE TEXT); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT, SCHOOL_CODE TEXT, DEPT_NAME TEXT); CREATE TABLE STUDENT (STU_CLASS TEXT, DEPT_CODE TEXT);"
      }
    ],
    [
      {
        "question": "How many classes are offered?",
        "query": "SELECT count(*) FROM CLASS",
        "schema": "CREATE TABLE STUDENT (STU_CLASS TEXT, STU_DOB TIME, STU_NUM NUMBER, DEPT_CODE TEXT, STU_INIT TEXT); CREATE TABLE CLASS (CLASS_ROOM TEXT, PROF_NUM NUMBER, CRS_CODE TEXT, CLASS_CODE TEXT, CLASS_SECTION TEXT); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER, EMP_DOB TIME); CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_CODE TEXT); CREATE TABLE ENROLL (CLASS_CODE TEXT); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT, DEPT_NAME TEXT, SCHOOL_CODE TEXT, EMP_NUM NUMBER); CREATE TABLE PROFESSOR (DEPT_CODE TEXT, EMP_NUM NUMBER);"
      },
      {
        "question": "return the number for each department.",
        "query": "SELECT count(*) , dept_code FROM CLASS AS t1 JOIN course AS t2 ON t1.crs_code = t2.crs_code GROUP BY dept_code",
        "schema": "CREATE TABLE STUDENT (STU_NUM NUMBER, STU_INIT TEXT, STU_CLASS TEXT, STU_DOB TIME, DEPT_CODE TEXT); CREATE TABLE PROFESSOR (EMP_NUM NUMBER, DEPT_CODE TEXT); CREATE TABLE DEPARTMENT (DEPT_EXTENSION TEXT, DEPT_NAME TEXT, DEPT_CODE TEXT, EMP_NUM NUMBER, SCHOOL_CODE TEXT); CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_CODE TEXT); CREATE TABLE CLASS (PROF_NUM NUMBER, CRS_CODE TEXT, CLASS_ROOM TEXT, CLASS_SECTION TEXT, CLASS_CODE TEXT); CREATE TABLE ENROLL (CLASS_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER, EMP_DOB TIME);"
      }
    ],
    [
      {
        "question": "What are the different school codes?",
        "query": "SELECT DISTINCT school_code FROM department",
        "schema": "CREATE TABLE DEPARTMENT (SCHOOL_CODE TEXT, DEPT_CODE TEXT, DEPT_NAME TEXT); CREATE TABLE CLASS (CLASS_CODE TEXT, CRS_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_CODE TEXT); CREATE TABLE STUDENT (DEPT_CODE TEXT);"
      },
      {
        "question": "How many classes are there for each of them?",
        "query": "SELECT count(*) , t3.school_code FROM CLASS AS t1 JOIN course AS t2 ON t1.crs_code = t2.crs_code JOIN department AS t3 ON t2.dept_code = t3.dept_code GROUP BY t3.school_code",
        "schema": "CREATE TABLE PROFESSOR (DEPT_CODE TEXT); CREATE TABLE COURSE (CRS_CODE TEXT, DEPT_CODE TEXT); CREATE TABLE DEPARTMENT (SCHOOL_CODE TEXT, EMP_NUM NUMBER, DEPT_CODE TEXT, DEPT_NAME TEXT); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE CLASS (CLASS_ROOM TEXT, PROF_NUM NUMBER, CLASS_CODE TEXT, CRS_CODE TEXT, CLASS_SECTION TEXT); CREATE TABLE ENROLL (CLASS_CODE TEXT); CREATE TABLE STUDENT (STU_CLASS TEXT, DEPT_CODE TEXT);"
      }
    ],
    [
      {
        "question": "How many professors are there?",
        "query": "SELECT count(*) FROM professor",
        "schema": "CREATE TABLE CLASS (PROF_NUM NUMBER); CREATE TABLE DEPARTMENT (EMP_NUM NUMBER, DEPT_CODE TEXT, DEPT_NAME TEXT); CREATE TABLE COURSE (DEPT_CODE TEXT); CREATE TABLE STUDENT (PROF_NUM NUMBER); CREATE TABLE EMPLOYEE (EMP_HIREDATE TIME, EMP_INITIAL TEXT, EMP_NUM NUMBER, EMP_JOBCODE TEXT, EMP_FNAME TEXT, EMP_DOB TIME, EMP_LNAME TEXT); CREATE TABLE PROFESSOR (PROF_OFFICE TEXT, PROF_EXTENSION TEXT, DEPT_CODE TEXT, EMP_NUM NUMBER, PROF_HIGH_DEGREE TEXT);"
      },
      {
        "question": "How many of them are there for each school?",
        "query": "SELECT count(*) , t1.school_code FROM department AS t1 JOIN professor AS t2 ON t1.dept_code = t2.dept_code GROUP BY t1.school_code",
        "schema": "CREATE TABLE STUDENT (PROF_NUM NUMBER, DEPT_CODE TEXT); CREATE TABLE DEPARTMENT (SCHOOL_CODE TEXT, EMP_NUM NUMBER, DEPT_CODE TEXT, DEPT_EXTENSION TEXT, DEPT_NAME TEXT); CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_CODE TEXT); CREATE TABLE CLASS (CRS_CODE TEXT, PROF_NUM NUMBER, CLASS_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_JOBCODE TEXT, EMP_LNAME TEXT, EMP_INITIAL TEXT, EMP_HIREDATE TIME, EMP_FNAME TEXT, EMP_NUM NUMBER, EMP_DOB TIME); CREATE TABLE PROFESSOR (PROF_OFFICE TEXT, EMP_NUM NUMBER, DEPT_CODE TEXT, PROF_EXTENSION TEXT, PROF_HIGH_DEGREE TEXT);"
      }
    ],
    [
      {
        "question": "For each job code, how many employees are there?",
        "query": "SELECT emp_jobcode , count(*) FROM employee GROUP BY emp_jobcode",
        "schema": "CREATE TABLE PROFESSOR (DEPT_CODE TEXT, EMP_NUM NUMBER); CREATE TABLE CLASS (PROF_NUM NUMBER, CRS_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_INITIAL TEXT, EMP_JOBCODE TEXT, EMP_DOB TIME, EMP_FNAME TEXT, EMP_HIREDATE TIME, EMP_NUM NUMBER, EMP_LNAME TEXT); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT, DEPT_NAME TEXT, EMP_NUM NUMBER); CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_CODE TEXT);"
      },
      {
        "question": "Which one has the most?",
        "query": "SELECT emp_jobcode , count(*) FROM employee GROUP BY emp_jobcode ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_CODE TEXT); CREATE TABLE PROFESSOR (EMP_NUM NUMBER, DEPT_CODE TEXT); CREATE TABLE CLASS (CRS_CODE TEXT, PROF_NUM NUMBER); CREATE TABLE EMPLOYEE (EMP_INITIAL TEXT, EMP_DOB TIME, EMP_FNAME TEXT, EMP_LNAME TEXT, EMP_NUM NUMBER, EMP_JOBCODE TEXT, EMP_HIREDATE TIME); CREATE TABLE DEPARTMENT (EMP_NUM NUMBER, DEPT_NAME TEXT, DEPT_CODE TEXT);"
      }
    ],
    [
      {
        "question": "What are the different school codes?",
        "query": "SELECT DISTINCT school_code FROM department",
        "schema": "CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE STUDENT (DEPT_CODE TEXT); CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_CODE TEXT); CREATE TABLE DEPARTMENT (SCHOOL_CODE TEXT, DEPT_CODE TEXT, DEPT_NAME TEXT); CREATE TABLE CLASS (CLASS_CODE TEXT, CRS_CODE TEXT);"
      },
      {
        "question": "For each one, how many professors does it have?",
        "query": "SELECT t1.school_code , count(*) FROM department AS t1 JOIN professor AS t2 ON t1.dept_code = t2.dept_code GROUP BY t1.school_code",
        "schema": "CREATE TABLE EMPLOYEE (EMP_DOB TIME, EMP_JOBCODE TEXT, EMP_NUM NUMBER); CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_CODE TEXT); CREATE TABLE STUDENT (DEPT_CODE TEXT); CREATE TABLE CLASS (PROF_NUM NUMBER, CRS_CODE TEXT, CLASS_CODE TEXT); CREATE TABLE PROFESSOR (DEPT_CODE TEXT, PROF_OFFICE TEXT, EMP_NUM NUMBER); CREATE TABLE DEPARTMENT (DEPT_NAME TEXT, SCHOOL_CODE TEXT, DEPT_CODE TEXT, EMP_NUM NUMBER);"
      },
      {
        "question": "Which one has the most?",
        "query": "SELECT t1.school_code FROM department AS t1 JOIN professor AS t2 ON t1.dept_code = t2.dept_code GROUP BY t1.school_code ORDER BY count(*) LIMIT 1",
        "schema": "CREATE TABLE STUDENT (DEPT_CODE TEXT); CREATE TABLE PROFESSOR (EMP_NUM NUMBER, PROF_OFFICE TEXT, DEPT_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_DOB TIME, EMP_JOBCODE TEXT, EMP_NUM NUMBER); CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_CODE TEXT); CREATE TABLE DEPARTMENT (EMP_NUM NUMBER, SCHOOL_CODE TEXT, DEPT_NAME TEXT, DEPT_CODE TEXT); CREATE TABLE CLASS (PROF_NUM NUMBER, CRS_CODE TEXT, CLASS_CODE TEXT);"
      }
    ],
    [
      {
        "question": "How many professors do have a Ph.D.?",
        "query": "SELECT count(*) FROM professor WHERE prof_high_degree = 'Ph.D.'",
        "schema": "CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_CODE TEXT); CREATE TABLE CLASS (CRS_CODE TEXT, PROF_NUM NUMBER); CREATE TABLE DEPARTMENT (DEPT_NAME TEXT, DEPT_CODE TEXT, EMP_NUM NUMBER); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER, EMP_LNAME TEXT, EMP_HIREDATE TIME, EMP_DOB TIME, EMP_JOBCODE TEXT, EMP_INITIAL TEXT, EMP_FNAME TEXT); CREATE TABLE PROFESSOR (PROF_EXTENSION TEXT, EMP_NUM NUMBER, DEPT_CODE TEXT, PROF_HIGH_DEGREE TEXT, PROF_OFFICE TEXT);"
      },
      {
        "question": "Count the number of these professors for each department.",
        "query": "SELECT count(*) , dept_code FROM professor WHERE prof_high_degree = 'Ph.D.' GROUP BY dept_code",
        "schema": "CREATE TABLE DEPARTMENT (EMP_NUM NUMBER, DEPT_CODE TEXT, DEPT_NAME TEXT); CREATE TABLE EMPLOYEE (EMP_JOBCODE TEXT, EMP_FNAME TEXT, EMP_HIREDATE TIME, EMP_NUM NUMBER, EMP_LNAME TEXT, EMP_DOB TIME, EMP_INITIAL TEXT); CREATE TABLE CLASS (PROF_NUM NUMBER, CRS_CODE TEXT); CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_CODE TEXT); CREATE TABLE PROFESSOR (DEPT_CODE TEXT, EMP_NUM NUMBER, PROF_OFFICE TEXT, PROF_HIGH_DEGREE TEXT, PROF_EXTENSION TEXT);"
      }
    ],
    [
      {
        "question": "What are all students?",
        "query": "SELECT * FROM student",
        "schema": "CREATE TABLE ENROLL (STU_NUM NUMBER, CLASS_CODE TEXT); CREATE TABLE CLASS (CRS_CODE TEXT, CLASS_CODE TEXT, PROF_NUM NUMBER); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT); CREATE TABLE PROFESSOR (DEPT_CODE TEXT); CREATE TABLE STUDENT (STU_DOB TIME, STU_NUM NUMBER, STU_FNAME TEXT, STU_HRS NUMBER, DEPT_CODE TEXT, PROF_NUM NUMBER, STU_LNAME TEXT, STU_INIT TEXT, STU_GPA NUMBER, STU_CLASS TEXT); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE COURSE (CRS_CODE TEXT, DEPT_CODE TEXT);"
      },
      {
        "question": "How many of them?",
        "query": "SELECT count(*) FROM student",
        "schema": "CREATE TABLE ENROLL (STU_NUM NUMBER, CLASS_CODE TEXT); CREATE TABLE STUDENT (PROF_NUM NUMBER, STU_FNAME TEXT, STU_LNAME TEXT, DEPT_CODE TEXT, STU_HRS NUMBER, STU_DOB TIME, STU_NUM NUMBER, STU_GPA NUMBER, STU_INIT TEXT, STU_CLASS TEXT); CREATE TABLE CLASS (CRS_CODE TEXT, CLASS_CODE TEXT, PROF_NUM NUMBER); CREATE TABLE PROFESSOR (DEPT_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT); CREATE TABLE COURSE (CRS_CODE TEXT, DEPT_CODE TEXT);"
      },
      {
        "question": "How many are there in each department?",
        "query": "SELECT count(*) , dept_code FROM student GROUP BY dept_code",
        "schema": "CREATE TABLE PROFESSOR (DEPT_CODE TEXT); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT, SCHOOL_CODE TEXT, DEPT_NAME TEXT, DEPT_EXTENSION TEXT, EMP_NUM NUMBER, DEPT_ADDRESS TEXT); CREATE TABLE ENROLL (CLASS_CODE TEXT, STU_NUM NUMBER); CREATE TABLE STUDENT (STU_GPA NUMBER, PROF_NUM NUMBER, STU_FNAME TEXT, STU_NUM NUMBER, DEPT_CODE TEXT, STU_CLASS TEXT, STU_INIT TEXT, STU_DOB TIME, STU_HRS NUMBER, STU_LNAME TEXT); CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE CLASS (CLASS_CODE TEXT, PROF_NUM NUMBER, CRS_CODE TEXT);"
      }
    ],
    [
      {
        "question": "For each department, how many students does it have?",
        "query": "SELECT count(*) , dept_code FROM student GROUP BY dept_code",
        "schema": "CREATE TABLE STUDENT (STU_INIT TEXT, DEPT_CODE TEXT, STU_DOB TIME, STU_GPA NUMBER, STU_CLASS TEXT, PROF_NUM NUMBER, STU_NUM NUMBER); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE DEPARTMENT (EMP_NUM NUMBER, DEPT_CODE TEXT, DEPT_NAME TEXT, SCHOOL_CODE TEXT, DEPT_EXTENSION TEXT, DEPT_ADDRESS TEXT); CREATE TABLE ENROLL (CLASS_CODE TEXT, STU_NUM NUMBER); CREATE TABLE CLASS (PROF_NUM NUMBER, CLASS_CODE TEXT, CRS_CODE TEXT); CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_CODE TEXT); CREATE TABLE PROFESSOR (DEPT_CODE TEXT);"
      },
      {
        "question": "For each department, what is the total hours worked by those students?",
        "query": "SELECT sum(stu_hrs) , dept_code FROM student GROUP BY dept_code",
        "schema": "CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_CODE TEXT); CREATE TABLE ENROLL (CLASS_CODE TEXT, STU_NUM NUMBER); CREATE TABLE STUDENT (STU_HRS NUMBER, STU_NUM NUMBER, STU_GPA NUMBER, PROF_NUM NUMBER, STU_DOB TIME, STU_INIT TEXT, STU_CLASS TEXT, DEPT_CODE TEXT); CREATE TABLE PROFESSOR (DEPT_CODE TEXT); CREATE TABLE CLASS (CLASS_CODE TEXT, PROF_NUM NUMBER, CRS_CODE TEXT); CREATE TABLE DEPARTMENT (EMP_NUM NUMBER, SCHOOL_CODE TEXT, DEPT_ADDRESS TEXT, DEPT_NAME TEXT, DEPT_EXTENSION TEXT, DEPT_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER);"
      }
    ],
    [
      {
        "question": "what are the student GPAs?",
        "query": "SELECT stu_gpa FROM student",
        "schema": "CREATE TABLE COURSE (CRS_CODE TEXT, DEPT_CODE TEXT); CREATE TABLE ENROLL (CLASS_CODE TEXT, STU_NUM NUMBER); CREATE TABLE DEPARTMENT (EMP_NUM NUMBER, DEPT_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE PROFESSOR (DEPT_CODE TEXT, EMP_NUM NUMBER); CREATE TABLE CLASS (CRS_CODE TEXT, PROF_NUM NUMBER, CLASS_CODE TEXT); CREATE TABLE STUDENT (STU_NUM NUMBER, STU_DOB TIME, DEPT_CODE TEXT, STU_FNAME TEXT, PROF_NUM NUMBER, STU_LNAME TEXT, STU_INIT TEXT, STU_GPA NUMBER);"
      },
      {
        "question": "What is average for each department?",
        "query": "SELECT avg(stu_gpa) , dept_code FROM student GROUP BY dept_code",
        "schema": "CREATE TABLE PROFESSOR (DEPT_CODE TEXT, EMP_NUM NUMBER); CREATE TABLE COURSE (CRS_CODE TEXT, DEPT_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE CLASS (CLASS_CODE TEXT, CRS_CODE TEXT, PROF_NUM NUMBER); CREATE TABLE STUDENT (STU_LNAME TEXT, STU_GPA NUMBER, STU_CLASS TEXT, STU_DOB TIME, STU_INIT TEXT, STU_FNAME TEXT, STU_NUM NUMBER, DEPT_CODE TEXT, PROF_NUM NUMBER); CREATE TABLE ENROLL (STU_NUM NUMBER, CLASS_CODE TEXT); CREATE TABLE DEPARTMENT (DEPT_NAME TEXT, DEPT_ADDRESS TEXT, EMP_NUM NUMBER, DEPT_CODE TEXT, DEPT_EXTENSION TEXT, SCHOOL_CODE TEXT);"
      },
      {
        "question": "Also, find the highest and lowest pga?",
        "query": "SELECT max(stu_gpa) , avg(stu_gpa) , min(stu_gpa) , dept_code FROM student GROUP BY dept_code",
        "schema": "CREATE TABLE ENROLL (STU_NUM NUMBER, CLASS_CODE TEXT); CREATE TABLE STUDENT (STU_NUM NUMBER, STU_LNAME TEXT, STU_CLASS TEXT, STU_FNAME TEXT, DEPT_CODE TEXT, STU_INIT TEXT, STU_DOB TIME, PROF_NUM NUMBER, STU_GPA NUMBER); CREATE TABLE COURSE (CRS_CODE TEXT, DEPT_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE CLASS (CLASS_CODE TEXT, PROF_NUM NUMBER, CRS_CODE TEXT); CREATE TABLE DEPARTMENT (DEPT_EXTENSION TEXT, SCHOOL_CODE TEXT, DEPT_CODE TEXT, DEPT_ADDRESS TEXT, EMP_NUM NUMBER, DEPT_NAME TEXT); CREATE TABLE PROFESSOR (PROF_HIGH_DEGREE TEXT, DEPT_CODE TEXT, EMP_NUM NUMBER);"
      }
    ],
    [
      {
        "question": "What is the average GPA of all students?",
        "query": "SELECT avg(stu_gpa) FROM student",
        "schema": "CREATE TABLE CLASS (CRS_CODE TEXT, CLASS_CODE TEXT); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT, SCHOOL_CODE TEXT); CREATE TABLE STUDENT (STU_DOB TIME, STU_INIT TEXT, STU_NUM NUMBER, PROF_NUM NUMBER, STU_GPA NUMBER, DEPT_CODE TEXT, STU_CLASS TEXT); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE COURSE (CRS_CODE TEXT, DEPT_CODE TEXT);"
      },
      {
        "question": "How about the average GPA of students in each department?",
        "query": "SELECT dept_code , avg(stu_gpa) FROM student GROUP BY dept_code",
        "schema": "CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE PROFESSOR (DEPT_CODE TEXT); CREATE TABLE DEPARTMENT (EMP_NUM NUMBER, DEPT_CODE TEXT, SCHOOL_CODE TEXT, DEPT_EXTENSION TEXT, DEPT_NAME TEXT); CREATE TABLE STUDENT (DEPT_CODE TEXT, PROF_NUM NUMBER, STU_GPA NUMBER, STU_INIT TEXT, STU_DOB TIME, STU_NUM NUMBER, STU_CLASS TEXT); CREATE TABLE CLASS (CLASS_CODE TEXT, PROF_NUM NUMBER, CRS_CODE TEXT); CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_CODE TEXT);"
      },
      {
        "question": "Also, find the corresponding name of each department?",
        "query": "SELECT t2.dept_name , avg(t1.stu_gpa) FROM student AS t1 JOIN department AS t2 ON t1.dept_code = t2.dept_code GROUP BY t1.dept_code",
        "schema": "CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE PROFESSOR (DEPT_CODE TEXT); CREATE TABLE COURSE (CRS_CODE TEXT, DEPT_CODE TEXT); CREATE TABLE CLASS (CRS_CODE TEXT, CLASS_CODE TEXT, PROF_NUM NUMBER); CREATE TABLE STUDENT (STU_GPA NUMBER, STU_INIT TEXT, STU_NUM NUMBER, STU_FNAME TEXT, STU_LNAME TEXT, DEPT_CODE TEXT, STU_DOB TIME, PROF_NUM NUMBER, STU_CLASS TEXT); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT, SCHOOL_CODE TEXT, EMP_NUM NUMBER, DEPT_NAME TEXT, DEPT_EXTENSION TEXT);"
      },
      {
        "question": "Which one has the highest average GPA?",
        "query": "SELECT t2.dept_name , avg(t1.stu_gpa) FROM student AS t1 JOIN department AS t2 ON t1.dept_code = t2.dept_code GROUP BY t1.dept_code ORDER BY avg(t1.stu_gpa) DESC LIMIT 1",
        "schema": "CREATE TABLE CLASS (CRS_CODE TEXT, CLASS_CODE TEXT, PROF_NUM NUMBER); CREATE TABLE STUDENT (DEPT_CODE TEXT, STU_NUM NUMBER, STU_GPA NUMBER, STU_LNAME TEXT, STU_CLASS TEXT, STU_FNAME TEXT, STU_DOB TIME, STU_INIT TEXT, PROF_NUM NUMBER); CREATE TABLE DEPARTMENT (EMP_NUM NUMBER, DEPT_CODE TEXT, DEPT_NAME TEXT, DEPT_EXTENSION TEXT, SCHOOL_CODE TEXT); CREATE TABLE COURSE (CRS_CODE TEXT, DEPT_CODE TEXT); CREATE TABLE PROFESSOR (DEPT_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER);"
      }
    ],
    [
      {
        "question": "What are the school codes?",
        "query": "SELECT school_code FROM department",
        "schema": "CREATE TABLE DEPARTMENT (EMP_NUM NUMBER, DEPT_CODE TEXT, SCHOOL_CODE TEXT, DEPT_NAME TEXT); CREATE TABLE STUDENT (DEPT_CODE TEXT); CREATE TABLE CLASS (CLASS_CODE TEXT, CRS_CODE TEXT); CREATE TABLE PROFESSOR (DEPT_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE COURSE (CRS_CODE TEXT, DEPT_CODE TEXT);"
      },
      {
        "question": "Remove any repeating ones.",
        "query": "SELECT DISTINCT school_code FROM department",
        "schema": "CREATE TABLE STUDENT (DEPT_CODE TEXT); CREATE TABLE PROFESSOR (DEPT_CODE TEXT); CREATE TABLE CLASS (CLASS_CODE TEXT, CRS_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE DEPARTMENT (DEPT_NAME TEXT, DEPT_CODE TEXT, SCHOOL_CODE TEXT, EMP_NUM NUMBER); CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_CODE TEXT);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT count(DISTINCT school_code) FROM department",
        "schema": "CREATE TABLE CLASS (CLASS_CODE TEXT, CRS_CODE TEXT); CREATE TABLE DEPARTMENT (DEPT_NAME TEXT, DEPT_CODE TEXT, SCHOOL_CODE TEXT, EMP_NUM NUMBER, DEPT_ADDRESS TEXT); CREATE TABLE STUDENT (DEPT_CODE TEXT); CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_CODE TEXT); CREATE TABLE PROFESSOR (DEPT_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER);"
      }
    ],
    [
      {
        "question": "What are the different class codes?",
        "query": "SELECT DISTINCT class_code FROM CLASS",
        "schema": "CREATE TABLE STUDENT (DEPT_CODE TEXT, STU_NUM NUMBER, STU_CLASS TEXT); CREATE TABLE ENROLL (CLASS_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE COURSE (CRS_CODE TEXT); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT); CREATE TABLE CLASS (PROF_NUM NUMBER, CRS_CODE TEXT, CLASS_CODE TEXT); CREATE TABLE PROFESSOR (EMP_NUM NUMBER, DEPT_CODE TEXT);"
      },
      {
        "question": "How many of them are there?",
        "query": "SELECT count(DISTINCT class_code) FROM CLASS",
        "schema": "CREATE TABLE STUDENT (STU_CLASS TEXT, STU_NUM NUMBER, STU_INIT TEXT, STU_DOB TIME, DEPT_CODE TEXT); CREATE TABLE ENROLL (CLASS_CODE TEXT); CREATE TABLE CLASS (CLASS_CODE TEXT, CRS_CODE TEXT, CLASS_ROOM TEXT, PROF_NUM NUMBER); CREATE TABLE DEPARTMENT (EMP_NUM NUMBER, DEPT_CODE TEXT, SCHOOL_CODE TEXT); CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE PROFESSOR (DEPT_CODE TEXT, EMP_NUM NUMBER);"
      }
    ],
    [
      {
        "question": "What are the course codes?",
        "query": "SELECT crs_code FROM CLASS",
        "schema": "CREATE TABLE STUDENT (DEPT_CODE TEXT, STU_DOB TIME, STU_NUM NUMBER, STU_INIT TEXT); CREATE TABLE PROFESSOR (DEPT_CODE TEXT, EMP_NUM NUMBER); CREATE TABLE CLASS (CLASS_SECTION TEXT, CLASS_CODE TEXT, CRS_CODE TEXT); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT); CREATE TABLE COURSE (CRS_CODE TEXT, DEPT_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER);"
      },
      {
        "question": "What are the unique ones?",
        "query": "SELECT DISTINCT crs_code FROM CLASS",
        "schema": "CREATE TABLE PROFESSOR (EMP_NUM NUMBER, DEPT_CODE TEXT); CREATE TABLE STUDENT (STU_INIT TEXT, STU_DOB TIME, STU_NUM NUMBER, STU_CLASS TEXT, DEPT_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT, SCHOOL_CODE TEXT); CREATE TABLE COURSE (CRS_CODE TEXT, DEPT_CODE TEXT); CREATE TABLE CLASS (CRS_CODE TEXT, CLASS_SECTION TEXT, PROF_NUM NUMBER, CLASS_CODE TEXT);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT count(DISTINCT crs_code) FROM CLASS",
        "schema": "CREATE TABLE CLASS (CLASS_ROOM TEXT, CLASS_SECTION TEXT, CRS_CODE TEXT, CLASS_CODE TEXT, PROF_NUM NUMBER); CREATE TABLE PROFESSOR (DEPT_CODE TEXT, EMP_NUM NUMBER); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE STUDENT (STU_DOB TIME, STU_CLASS TEXT, STU_INIT TEXT, STU_NUM NUMBER, DEPT_CODE TEXT); CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_CODE TEXT); CREATE TABLE DEPARTMENT (SCHOOL_CODE TEXT, DEPT_CODE TEXT);"
      }
    ],
    [
      {
        "question": "What are the different department names?",
        "query": "SELECT DISTINCT dept_name FROM department",
        "schema": "CREATE TABLE CLASS (PROF_NUM NUMBER); CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT, SCHOOL_CODE TEXT, DEPT_NAME TEXT, EMP_NUM NUMBER); CREATE TABLE STUDENT (STU_FNAME TEXT, DEPT_CODE TEXT); CREATE TABLE PROFESSOR (DEPT_CODE TEXT);"
      },
      {
        "question": "How many does it offer?",
        "query": "SELECT count(DISTINCT dept_name) FROM department",
        "schema": "CREATE TABLE COURSE (CRS_CODE TEXT, DEPT_CODE TEXT); CREATE TABLE STUDENT (DEPT_CODE TEXT, STU_FNAME TEXT); CREATE TABLE PROFESSOR (DEPT_CODE TEXT); CREATE TABLE DEPARTMENT (DEPT_NAME TEXT, EMP_NUM NUMBER, DEPT_CODE TEXT, SCHOOL_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE CLASS (CLASS_CODE TEXT, PROF_NUM NUMBER, CRS_CODE TEXT);"
      }
    ],
    [
      {
        "question": "What can you tell me about the Computer Info. Systems department?",
        "query": "SELECT * FROM department WHERE dept_name = \"Computer Info. Systems\"",
        "schema": "CREATE TABLE EMPLOYEE (EMP_INITIAL TEXT, EMP_DOB TIME, EMP_NUM NUMBER); CREATE TABLE STUDENT (DEPT_CODE TEXT); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT, SCHOOL_CODE TEXT, EMP_NUM NUMBER, DEPT_NAME TEXT); CREATE TABLE CLASS (CLASS_CODE TEXT, PROF_NUM NUMBER, CRS_CODE TEXT); CREATE TABLE PROFESSOR (EMP_NUM NUMBER, DEPT_CODE TEXT); CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_CODE TEXT);"
      },
      {
        "question": "What courses does it offer?",
        "query": "SELECT * FROM department AS t1 JOIN course AS t2 ON t1.dept_code = t2.dept_code WHERE dept_name = \"Computer Info. Systems\"",
        "schema": "CREATE TABLE COURSE (CRS_CODE TEXT, DEPT_CODE TEXT); CREATE TABLE CLASS (CLASS_SECTION TEXT, PROF_NUM NUMBER, CRS_CODE TEXT, CLASS_CODE TEXT); CREATE TABLE PROFESSOR (DEPT_CODE TEXT, EMP_NUM NUMBER); CREATE TABLE STUDENT (DEPT_CODE TEXT); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT, SCHOOL_CODE TEXT, DEPT_NAME TEXT, EMP_NUM NUMBER); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER, EMP_DOB TIME, EMP_INITIAL TEXT);"
      },
      {
        "question": "How many courses is that?",
        "query": "SELECT count(*) FROM department AS t1 JOIN course AS t2 ON t1.dept_code = t2.dept_code WHERE dept_name = \"Computer Info. Systems\"",
        "schema": "CREATE TABLE DEPARTMENT (DEPT_NAME TEXT, DEPT_CODE TEXT, SCHOOL_CODE TEXT, EMP_NUM NUMBER); CREATE TABLE STUDENT (DEPT_CODE TEXT); CREATE TABLE PROFESSOR (DEPT_CODE TEXT, EMP_NUM NUMBER); CREATE TABLE COURSE (CRS_CODE TEXT, DEPT_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_DOB TIME, EMP_NUM NUMBER, EMP_INITIAL TEXT); CREATE TABLE CLASS (PROF_NUM NUMBER, CLASS_SECTION TEXT, CLASS_CODE TEXT, CRS_CODE TEXT);"
      }
    ],
    [
      {
        "question": "What are the different class sections?",
        "query": "SELECT DISTINCT class_section FROM CLASS",
        "schema": "CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_CODE TEXT); CREATE TABLE STUDENT (STU_INIT TEXT, DEPT_CODE TEXT, STU_CLASS TEXT, STU_DOB TIME, STU_NUM NUMBER); CREATE TABLE CLASS (PROF_NUM NUMBER, CLASS_SECTION TEXT, CRS_CODE TEXT, CLASS_CODE TEXT); CREATE TABLE DEPARTMENT (EMP_NUM NUMBER, DEPT_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE PROFESSOR (DEPT_CODE TEXT, EMP_NUM NUMBER);"
      },
      {
        "question": "What about for the course ACCT-211?",
        "query": "SELECT DISTINCT class_section FROM CLASS WHERE crs_code = 'ACCT-211'",
        "schema": "CREATE TABLE CLASS (CRS_CODE TEXT, CLASS_CODE TEXT, CLASS_SECTION TEXT, PROF_NUM NUMBER); CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_CODE TEXT); CREATE TABLE DEPARTMENT (EMP_NUM NUMBER, DEPT_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE PROFESSOR (DEPT_CODE TEXT, EMP_NUM NUMBER); CREATE TABLE STUDENT (STU_NUM NUMBER, STU_INIT TEXT, STU_CLASS TEXT, STU_DOB TIME, DEPT_CODE TEXT);"
      },
      {
        "question": "How many different ones does it offer?",
        "query": "SELECT count(DISTINCT class_section) FROM CLASS WHERE crs_code = 'ACCT-211'",
        "schema": "CREATE TABLE CLASS (CLASS_SECTION TEXT, CRS_CODE TEXT, CLASS_CODE TEXT, PROF_NUM NUMBER); CREATE TABLE PROFESSOR (DEPT_CODE TEXT, EMP_NUM NUMBER); CREATE TABLE COURSE (CRS_CODE TEXT, DEPT_CODE TEXT); CREATE TABLE STUDENT (STU_CLASS TEXT, STU_INIT TEXT, STU_DOB TIME, STU_NUM NUMBER, DEPT_CODE TEXT); CREATE TABLE DEPARTMENT (EMP_NUM NUMBER, DEPT_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER);"
      }
    ],
    [
      {
        "question": "List codes of all courses and their credits.",
        "query": "SELECT crs_credit , crs_code FROM course",
        "schema": "CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_CODE TEXT, CRS_CREDIT NUMBER); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT); CREATE TABLE CLASS (CRS_CODE TEXT, CLASS_CODE TEXT);"
      },
      {
        "question": "What is the total number of credits for each department?",
        "query": "SELECT sum(t1.crs_credit) , t1.dept_code FROM course AS t1 JOIN CLASS AS t2 ON t1.crs_code = t2.crs_code GROUP BY t1.dept_code",
        "schema": "CREATE TABLE DEPARTMENT (DEPT_EXTENSION TEXT, DEPT_NAME TEXT, EMP_NUM NUMBER, SCHOOL_CODE TEXT, DEPT_CODE TEXT); CREATE TABLE COURSE (CRS_CREDIT NUMBER, DEPT_CODE TEXT, CRS_CODE TEXT); CREATE TABLE CLASS (CRS_CODE TEXT, CLASS_CODE TEXT); CREATE TABLE STUDENT (DEPT_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE PROFESSOR (DEPT_CODE TEXT);"
      }
    ],
    [
      {
        "question": "how many total course credits does each department offer?",
        "query": "SELECT sum(t1.crs_credit) , t1.dept_code FROM course AS t1 JOIN CLASS AS t2 ON t1.crs_code = t2.crs_code GROUP BY t1.dept_code",
        "schema": "CREATE TABLE CLASS (CRS_CODE TEXT, CLASS_CODE TEXT, PROF_NUM NUMBER); CREATE TABLE PROFESSOR (EMP_NUM NUMBER, DEPT_CODE TEXT); CREATE TABLE STUDENT (STU_DOB TIME, STU_NUM NUMBER, DEPT_CODE TEXT); CREATE TABLE DEPARTMENT (DEPT_NAME TEXT, DEPT_CODE TEXT, SCHOOL_CODE TEXT, DEPT_ADDRESS TEXT, DEPT_EXTENSION TEXT, EMP_NUM NUMBER); CREATE TABLE COURSE (CRS_CREDIT NUMBER, DEPT_CODE TEXT, CRS_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER);"
      },
      {
        "question": "Find the department that offers the most number of credits of classes?",
        "query": "SELECT * FROM course AS t1 JOIN CLASS AS t2 ON t1.crs_code = t2.crs_code GROUP BY t1.dept_code ORDER BY sum(t1.crs_credit) DESC LIMIT 1",
        "schema": "CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE CLASS (PROF_NUM NUMBER, CLASS_CODE TEXT, CRS_CODE TEXT); CREATE TABLE PROFESSOR (DEPT_CODE TEXT, EMP_NUM NUMBER); CREATE TABLE COURSE (CRS_CREDIT NUMBER, DEPT_CODE TEXT, CRS_CODE TEXT); CREATE TABLE DEPARTMENT (DEPT_ADDRESS TEXT, SCHOOL_CODE TEXT, DEPT_NAME TEXT, DEPT_CODE TEXT, DEPT_EXTENSION TEXT, EMP_NUM NUMBER); CREATE TABLE STUDENT (STU_NUM NUMBER, STU_DOB TIME, STU_CLASS TEXT, DEPT_CODE TEXT);"
      },
      {
        "question": "What is the name of that department?",
        "query": "SELECT t3.dept_name FROM course AS t1 JOIN CLASS AS t2 ON t1.crs_code = t2.crs_code JOIN department AS t3 ON t1.dept_code = t3.dept_code GROUP BY t1.dept_code ORDER BY sum(t1.crs_credit) DESC LIMIT 1",
        "schema": "CREATE TABLE DEPARTMENT (EMP_NUM NUMBER, DEPT_CODE TEXT, SCHOOL_CODE TEXT, DEPT_EXTENSION TEXT, DEPT_ADDRESS TEXT, DEPT_NAME TEXT); CREATE TABLE PROFESSOR (EMP_NUM NUMBER, DEPT_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE STUDENT (STU_CLASS TEXT, STU_NUM NUMBER, DEPT_CODE TEXT, STU_DOB TIME); CREATE TABLE CLASS (CRS_CODE TEXT, PROF_NUM NUMBER, CLASS_CODE TEXT); CREATE TABLE COURSE (CRS_CREDIT NUMBER, DEPT_CODE TEXT, CRS_CODE TEXT);"
      }
    ],
    [
      {
        "question": "Can you tell me about course ACCT-211?",
        "query": "SELECT * FROM CLASS WHERE crs_code = 'ACCT-211'",
        "schema": "CREATE TABLE CLASS (CRS_CODE TEXT, CLASS_CODE TEXT, PROF_NUM NUMBER); CREATE TABLE COURSE (CRS_CODE TEXT, DEPT_CODE TEXT, CRS_DESCRIPTION TEXT); CREATE TABLE STUDENT (DEPT_CODE TEXT, STU_NUM NUMBER, PROF_NUM NUMBER, STU_DOB TIME, STU_INIT TEXT, STU_CLASS TEXT); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT, EMP_NUM NUMBER); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE PROFESSOR (DEPT_CODE TEXT, EMP_NUM NUMBER);"
      },
      {
        "question": "How many students are enrolled in this class?",
        "query": "SELECT count(*) FROM CLASS AS t1 JOIN enroll AS t2 ON t1.class_code = t2.class_code WHERE t1.crs_code = 'ACCT-211'",
        "schema": "CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE PROFESSOR (EMP_NUM NUMBER, DEPT_CODE TEXT); CREATE TABLE CLASS (CRS_CODE TEXT, CLASS_CODE TEXT, PROF_NUM NUMBER); CREATE TABLE ENROLL (CLASS_CODE TEXT, STU_NUM NUMBER); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT, EMP_NUM NUMBER, SCHOOL_CODE TEXT); CREATE TABLE COURSE (CRS_DESCRIPTION TEXT, CRS_CODE TEXT, DEPT_CODE TEXT); CREATE TABLE STUDENT (DEPT_CODE TEXT, PROF_NUM NUMBER, STU_CLASS TEXT, STU_DOB TIME, STU_INIT TEXT, STU_NUM NUMBER, STU_FNAME TEXT);"
      }
    ],
    [
      {
        "question": "Can you tell me about course ACCT-211?",
        "query": "SELECT * FROM CLASS WHERE crs_code = 'ACCT-211'",
        "schema": "CREATE TABLE COURSE (CRS_CODE TEXT, DEPT_CODE TEXT, CRS_DESCRIPTION TEXT); CREATE TABLE CLASS (CRS_CODE TEXT, PROF_NUM NUMBER, CLASS_CODE TEXT); CREATE TABLE STUDENT (PROF_NUM NUMBER, DEPT_CODE TEXT, STU_NUM NUMBER, STU_INIT TEXT, STU_DOB TIME, STU_CLASS TEXT); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE DEPARTMENT (EMP_NUM NUMBER, DEPT_CODE TEXT); CREATE TABLE PROFESSOR (EMP_NUM NUMBER, DEPT_CODE TEXT);"
      },
      {
        "question": "How many students are enrolled in this class?",
        "query": "SELECT count(*) FROM CLASS AS t1 JOIN enroll AS t2 ON t1.class_code = t2.class_code WHERE t1.crs_code = 'ACCT-211'",
        "schema": "CREATE TABLE CLASS (PROF_NUM NUMBER, CRS_CODE TEXT, CLASS_CODE TEXT); CREATE TABLE ENROLL (STU_NUM NUMBER, CLASS_CODE TEXT); CREATE TABLE STUDENT (STU_INIT TEXT, STU_FNAME TEXT, PROF_NUM NUMBER, STU_DOB TIME, DEPT_CODE TEXT, STU_NUM NUMBER, STU_CLASS TEXT); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT, EMP_NUM NUMBER, SCHOOL_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_DESCRIPTION TEXT, CRS_CODE TEXT); CREATE TABLE PROFESSOR (EMP_NUM NUMBER, DEPT_CODE TEXT);"
      },
      {
        "question": "What are their corresponding first names?",
        "query": "SELECT t3.stu_fname FROM CLASS AS t1 JOIN enroll AS t2 ON t1.class_code = t2.class_code JOIN student AS t3 ON t2.stu_num = t3.stu_num WHERE t1.crs_code = 'ACCT-211'",
        "schema": "CREATE TABLE ENROLL (STU_NUM NUMBER, CLASS_CODE TEXT); CREATE TABLE CLASS (CRS_CODE TEXT, PROF_NUM NUMBER, CLASS_CODE TEXT); CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_DESCRIPTION TEXT, CRS_CODE TEXT); CREATE TABLE STUDENT (STU_LNAME TEXT, STU_CLASS TEXT, DEPT_CODE TEXT, STU_FNAME TEXT, STU_NUM NUMBER, STU_INIT TEXT, PROF_NUM NUMBER, STU_DOB TIME); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE PROFESSOR (DEPT_CODE TEXT, EMP_NUM NUMBER); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT, SCHOOL_CODE TEXT, EMP_NUM NUMBER);"
      }
    ],
    [
      {
        "question": "Which students were enrollment in the course ACCT-211?",
        "query": "SELECT * FROM CLASS AS t1 JOIN enroll AS t2 ON t1.class_code = t2.class_code JOIN student AS t3 ON t2.stu_num = t3.stu_num WHERE t1.crs_code = 'ACCT-211'",
        "schema": "CREATE TABLE STUDENT (DEPT_CODE TEXT, STU_CLASS TEXT, STU_DOB TIME, STU_FNAME TEXT, STU_INIT TEXT, STU_NUM NUMBER, STU_LNAME TEXT); CREATE TABLE CLASS (CRS_CODE TEXT, CLASS_CODE TEXT); CREATE TABLE COURSE (CRS_DESCRIPTION TEXT, DEPT_CODE TEXT, CRS_CODE TEXT); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT); CREATE TABLE ENROLL (ENROLL_GRADE TEXT, STU_NUM NUMBER, CLASS_CODE TEXT);"
      },
      {
        "question": "Which of those received C's as grades?",
        "query": "SELECT * FROM CLASS AS t1 JOIN enroll AS t2 ON t1.class_code = t2.class_code JOIN student AS t3 ON t2.stu_num = t3.stu_num WHERE t1.crs_code = 'ACCT-211' AND t2.enroll_grade = 'C'",
        "schema": "CREATE TABLE STUDENT (DEPT_CODE TEXT, STU_LNAME TEXT, STU_DOB TIME, PROF_NUM NUMBER, STU_INIT TEXT, STU_GPA NUMBER, STU_FNAME TEXT, STU_CLASS TEXT, STU_NUM NUMBER); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT); CREATE TABLE COURSE (CRS_DESCRIPTION TEXT, CRS_CODE TEXT, DEPT_CODE TEXT, CRS_CREDIT NUMBER); CREATE TABLE ENROLL (STU_NUM NUMBER, ENROLL_GRADE TEXT, CLASS_CODE TEXT); CREATE TABLE CLASS (CRS_CODE TEXT, CLASS_CODE TEXT);"
      },
      {
        "question": "What are their first names?",
        "query": "SELECT t3.stu_fname FROM CLASS AS t1 JOIN enroll AS t2 ON t1.class_code = t2.class_code JOIN student AS t3 ON t2.stu_num = t3.stu_num WHERE t1.crs_code = 'ACCT-211' AND t2.enroll_grade = 'C'",
        "schema": "CREATE TABLE COURSE (CRS_CODE TEXT, DEPT_CODE TEXT, CRS_DESCRIPTION TEXT, CRS_CREDIT NUMBER); CREATE TABLE ENROLL (STU_NUM NUMBER, CLASS_CODE TEXT, ENROLL_GRADE TEXT); CREATE TABLE CLASS (CRS_CODE TEXT, PROF_NUM NUMBER, CLASS_CODE TEXT); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT); CREATE TABLE STUDENT (STU_LNAME TEXT, STU_CLASS TEXT, STU_INIT TEXT, PROF_NUM NUMBER, STU_FNAME TEXT, STU_GPA NUMBER, DEPT_CODE TEXT, STU_NUM NUMBER, STU_DOB TIME);"
      }
    ],
    [
      {
        "question": "Tell me everything about the employees.",
        "query": "SELECT * FROM employee",
        "schema": "CREATE TABLE DEPARTMENT (EMP_NUM NUMBER, DEPT_NAME TEXT, DEPT_CODE TEXT); CREATE TABLE CLASS (PROF_NUM NUMBER, CLASS_CODE TEXT); CREATE TABLE PROFESSOR (DEPT_CODE TEXT, EMP_NUM NUMBER, PROF_OFFICE TEXT); CREATE TABLE EMPLOYEE (EMP_LNAME TEXT, EMP_FNAME TEXT, EMP_HIREDATE TIME, EMP_NUM NUMBER, EMP_INITIAL TEXT, EMP_DOB TIME, EMP_JOBCODE TEXT);"
      },
      {
        "question": "How many of them are there?",
        "query": "SELECT count(*) FROM employee",
        "schema": "CREATE TABLE DEPARTMENT (EMP_NUM NUMBER, DEPT_NAME TEXT, DEPT_CODE TEXT); CREATE TABLE PROFESSOR (EMP_NUM NUMBER, DEPT_CODE TEXT, PROF_OFFICE TEXT); CREATE TABLE EMPLOYEE (EMP_JOBCODE TEXT, EMP_NUM NUMBER, EMP_LNAME TEXT, EMP_DOB TIME, EMP_INITIAL TEXT, EMP_FNAME TEXT, EMP_HIREDATE TIME); CREATE TABLE CLASS (CLASS_CODE TEXT, PROF_NUM NUMBER);"
      }
    ],
    [
      {
        "question": "Who are all professors?",
        "query": "SELECT * FROM professor",
        "schema": "CREATE TABLE CLASS (PROF_NUM NUMBER); CREATE TABLE EMPLOYEE (EMP_HIREDATE TIME, EMP_LNAME TEXT, EMP_INITIAL TEXT, EMP_NUM NUMBER, EMP_JOBCODE TEXT, EMP_FNAME TEXT, EMP_DOB TIME); CREATE TABLE PROFESSOR (EMP_NUM NUMBER, PROF_HIGH_DEGREE TEXT, PROF_OFFICE TEXT, DEPT_CODE TEXT); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT, EMP_NUM NUMBER);"
      },
      {
        "question": "What about those who have a Ph.D. degree.",
        "query": "SELECT * FROM professor WHERE prof_high_degree = 'Ph.D.'",
        "schema": "CREATE TABLE CLASS (PROF_NUM NUMBER); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT, EMP_NUM NUMBER); CREATE TABLE PROFESSOR (DEPT_CODE TEXT, PROF_HIGH_DEGREE TEXT, PROF_OFFICE TEXT, EMP_NUM NUMBER); CREATE TABLE EMPLOYEE (EMP_FNAME TEXT, EMP_INITIAL TEXT, EMP_HIREDATE TIME, EMP_LNAME TEXT, EMP_JOBCODE TEXT, EMP_NUM NUMBER, EMP_DOB TIME);"
      },
      {
        "question": "How many of them are there?",
        "query": "SELECT count(*) FROM professor WHERE prof_high_degree = 'Ph.D.'",
        "schema": "CREATE TABLE PROFESSOR (PROF_HIGH_DEGREE TEXT, PROF_OFFICE TEXT, DEPT_CODE TEXT, EMP_NUM NUMBER); CREATE TABLE EMPLOYEE (EMP_INITIAL TEXT, EMP_JOBCODE TEXT, EMP_NUM NUMBER, EMP_DOB TIME, EMP_HIREDATE TIME, EMP_FNAME TEXT, EMP_LNAME TEXT); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT, EMP_NUM NUMBER); CREATE TABLE CLASS (PROF_NUM NUMBER);"
      }
    ],
    [
      {
        "question": "Find the all info about the accounting department.",
        "query": "SELECT * FROM department WHERE dept_name = 'Accounting'",
        "schema": "CREATE TABLE CLASS (CRS_CODE TEXT); CREATE TABLE STUDENT (DEPT_CODE TEXT); CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_CODE TEXT); CREATE TABLE DEPARTMENT (DEPT_NAME TEXT, SCHOOL_CODE TEXT, EMP_NUM NUMBER, DEPT_EXTENSION TEXT, DEPT_CODE TEXT); CREATE TABLE PROFESSOR (DEPT_CODE TEXT, EMP_NUM NUMBER); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER);"
      },
      {
        "question": "Which classes are taught the department?",
        "query": "SELECT * FROM CLASS AS t1 JOIN course AS t2 ON t1.crs_code = t2.crs_code JOIN department AS t3 ON t3.dept_code = t2.dept_code WHERE t3.dept_name = 'Accounting'",
        "schema": "CREATE TABLE PROFESSOR (EMP_NUM NUMBER, DEPT_CODE TEXT); CREATE TABLE CLASS (CLASS_ROOM TEXT, PROF_NUM NUMBER, CLASS_SECTION TEXT, CLASS_CODE TEXT, CRS_CODE TEXT); CREATE TABLE COURSE (CRS_CODE TEXT, DEPT_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE STUDENT (DEPT_CODE TEXT); CREATE TABLE DEPARTMENT (DEPT_NAME TEXT, DEPT_EXTENSION TEXT, SCHOOL_CODE TEXT, EMP_NUM NUMBER, DEPT_CODE TEXT);"
      },
      {
        "question": "How many students are enrolled in those classes?",
        "query": "SELECT count(*) FROM CLASS AS t1 JOIN enroll AS t2 ON t1.class_code = t2.class_code JOIN course AS t3 ON t1.crs_code = t3.crs_code JOIN department AS t4 ON t3.dept_code = t4.dept_code WHERE t4.dept_name = 'Accounting'",
        "schema": "CREATE TABLE STUDENT (DEPT_CODE TEXT, PROF_NUM NUMBER, STU_NUM NUMBER, STU_INIT TEXT, STU_DOB TIME, STU_CLASS TEXT); CREATE TABLE ENROLL (STU_NUM NUMBER, CLASS_CODE TEXT); CREATE TABLE PROFESSOR (EMP_NUM NUMBER, DEPT_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE COURSE (CRS_CODE TEXT, DEPT_CODE TEXT); CREATE TABLE CLASS (CLASS_CODE TEXT, CLASS_ROOM TEXT, CRS_CODE TEXT, CLASS_SECTION TEXT, PROF_NUM NUMBER); CREATE TABLE DEPARTMENT (EMP_NUM NUMBER, SCHOOL_CODE TEXT, DEPT_EXTENSION TEXT, DEPT_NAME TEXT, DEPT_CODE TEXT);"
      }
    ],
    [
      {
        "question": "Find number of students enrolled in some classes offered by each department.",
        "query": "SELECT count(*) , t3.dept_code FROM CLASS AS t1 JOIN enroll AS t2 ON t1.class_code = t2.class_code JOIN course AS t3 ON t1.crs_code = t3.crs_code GROUP BY t3.dept_code",
        "schema": "CREATE TABLE ENROLL (ENROLL_GRADE TEXT, CLASS_CODE TEXT, STU_NUM NUMBER); CREATE TABLE STUDENT (STU_CLASS TEXT, STU_NUM NUMBER, STU_INIT TEXT, STU_DOB TIME, PROF_NUM NUMBER, DEPT_CODE TEXT); CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_CODE TEXT); CREATE TABLE DEPARTMENT (SCHOOL_CODE TEXT, DEPT_CODE TEXT, EMP_NUM NUMBER, DEPT_NAME TEXT); CREATE TABLE CLASS (CLASS_CODE TEXT, CRS_CODE TEXT, CLASS_ROOM TEXT);"
      },
      {
        "question": "Which department has the most number of students enrolled?",
        "query": "SELECT * FROM CLASS AS t1 JOIN enroll AS t2 ON t1.class_code = t2.class_code JOIN course AS t3 ON t1.crs_code = t3.crs_code GROUP BY t3.dept_code ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE DEPARTMENT (DEPT_CODE TEXT, DEPT_NAME TEXT, SCHOOL_CODE TEXT, EMP_NUM NUMBER); CREATE TABLE COURSE (CRS_CODE TEXT, DEPT_CODE TEXT); CREATE TABLE STUDENT (DEPT_CODE TEXT, PROF_NUM NUMBER, STU_DOB TIME, STU_INIT TEXT, STU_CLASS TEXT, STU_NUM NUMBER); CREATE TABLE ENROLL (CLASS_CODE TEXT, STU_NUM NUMBER, ENROLL_GRADE TEXT); CREATE TABLE CLASS (CLASS_CODE TEXT, CRS_CODE TEXT, CLASS_ROOM TEXT);"
      },
      {
        "question": "What is the corresponding department name?",
        "query": "SELECT t4.dept_name FROM CLASS AS t1 JOIN enroll AS t2 ON t1.class_code = t2.class_code JOIN course AS t3 ON t1.crs_code = t3.crs_code JOIN department AS t4 ON t3.dept_code = t4.dept_code GROUP BY t3.dept_code ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE DEPARTMENT (EMP_NUM NUMBER, SCHOOL_CODE TEXT, DEPT_NAME TEXT, DEPT_CODE TEXT); CREATE TABLE ENROLL (ENROLL_GRADE TEXT, STU_NUM NUMBER, CLASS_CODE TEXT); CREATE TABLE CLASS (CLASS_ROOM TEXT, CLASS_CODE TEXT, CRS_CODE TEXT); CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_CODE TEXT); CREATE TABLE STUDENT (PROF_NUM NUMBER, STU_DOB TIME, DEPT_CODE TEXT, STU_NUM NUMBER, STU_INIT TEXT, STU_CLASS TEXT);"
      }
    ],
    [
      {
        "question": "What are the names of each department?",
        "query": "SELECT dept_name FROM department",
        "schema": "CREATE TABLE CLASS (PROF_NUM NUMBER, CRS_CODE TEXT); CREATE TABLE STUDENT (STU_FNAME TEXT, DEPT_CODE TEXT, STU_LNAME TEXT); CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_CODE TEXT); CREATE TABLE PROFESSOR (EMP_NUM NUMBER, DEPT_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE DEPARTMENT (DEPT_NAME TEXT, DEPT_CODE TEXT, EMP_NUM NUMBER, SCHOOL_CODE TEXT);"
      },
      {
        "question": "Order them alphabetically.",
        "query": "SELECT dept_name FROM department ORDER BY dept_name",
        "schema": "CREATE TABLE PROFESSOR (DEPT_CODE TEXT, EMP_NUM NUMBER); CREATE TABLE STUDENT (STU_LNAME TEXT, DEPT_CODE TEXT, STU_FNAME TEXT); CREATE TABLE CLASS (PROF_NUM NUMBER, CRS_CODE TEXT); CREATE TABLE COURSE (CRS_CODE TEXT, DEPT_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE DEPARTMENT (DEPT_NAME TEXT, SCHOOL_CODE TEXT, EMP_NUM NUMBER, DEPT_CODE TEXT);"
      }
    ],
    [
      {
        "question": "Tell me about all classes.",
        "query": "SELECT * FROM CLASS",
        "schema": "CREATE TABLE ENROLL (STU_NUM NUMBER, CLASS_CODE TEXT); CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_CODE TEXT); CREATE TABLE DEPARTMENT (EMP_NUM NUMBER, DEPT_CODE TEXT); CREATE TABLE PROFESSOR (EMP_NUM NUMBER, DEPT_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE STUDENT (DEPT_CODE TEXT, STU_DOB TIME, STU_NUM NUMBER, STU_INIT TEXT, STU_CLASS TEXT, PROF_NUM NUMBER); CREATE TABLE CLASS (CLASS_ROOM TEXT, CLASS_CODE TEXT, CRS_CODE TEXT, CLASS_SECTION TEXT, PROF_NUM NUMBER);"
      },
      {
        "question": "Which of those take place in room KLR209?",
        "query": "SELECT * FROM CLASS WHERE class_room = 'KLR209'",
        "schema": "CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE STUDENT (STU_CLASS TEXT, STU_DOB TIME, PROF_NUM NUMBER, STU_INIT TEXT, DEPT_CODE TEXT, STU_NUM NUMBER); CREATE TABLE PROFESSOR (EMP_NUM NUMBER, DEPT_CODE TEXT); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT, EMP_NUM NUMBER); CREATE TABLE ENROLL (STU_NUM NUMBER, CLASS_CODE TEXT); CREATE TABLE COURSE (CRS_CODE TEXT, DEPT_CODE TEXT); CREATE TABLE CLASS (CLASS_TIME TEXT, CLASS_ROOM TEXT, CLASS_CODE TEXT, PROF_NUM NUMBER, CRS_CODE TEXT, CLASS_SECTION TEXT);"
      },
      {
        "question": "What are their codes?",
        "query": "SELECT class_code FROM CLASS WHERE class_room = 'KLR209'",
        "schema": "CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE COURSE (CRS_CODE TEXT, DEPT_CODE TEXT); CREATE TABLE ENROLL (CLASS_CODE TEXT, STU_NUM NUMBER); CREATE TABLE CLASS (CLASS_ROOM TEXT, CLASS_CODE TEXT, CRS_CODE TEXT, PROF_NUM NUMBER, CLASS_SECTION TEXT, CLASS_TIME TEXT); CREATE TABLE STUDENT (STU_CLASS TEXT, STU_NUM NUMBER, STU_INIT TEXT, PROF_NUM NUMBER, DEPT_CODE TEXT, STU_DOB TIME); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT, EMP_NUM NUMBER, SCHOOL_CODE TEXT); CREATE TABLE PROFESSOR (DEPT_CODE TEXT, EMP_NUM NUMBER);"
      }
    ],
    [
      {
        "question": "Order the employee information by date of birth.",
        "query": "SELECT * FROM employee ORDER BY emp_dob",
        "schema": "CREATE TABLE EMPLOYEE (EMP_DOB TIME, EMP_NUM NUMBER, EMP_FNAME TEXT, EMP_LNAME TEXT, EMP_HIREDATE TIME, EMP_INITIAL TEXT);"
      },
      {
        "question": "Which of these employees have jobs as professors?",
        "query": "SELECT * FROM employee WHERE emp_jobcode = 'PROF' ORDER BY emp_dob",
        "schema": "CREATE TABLE EMPLOYEE (EMP_DOB TIME, EMP_INITIAL TEXT, EMP_HIREDATE TIME, EMP_LNAME TEXT, EMP_JOBCODE TEXT, EMP_NUM NUMBER, EMP_FNAME TEXT); CREATE TABLE DEPARTMENT (EMP_NUM NUMBER, DEPT_CODE TEXT); CREATE TABLE PROFESSOR (EMP_NUM NUMBER, PROF_OFFICE TEXT, DEPT_CODE TEXT); CREATE TABLE CLASS (PROF_NUM NUMBER);"
      },
      {
        "question": "What are their first names?",
        "query": "SELECT emp_fname FROM employee WHERE emp_jobcode = 'PROF' ORDER BY emp_dob",
        "schema": "CREATE TABLE PROFESSOR (PROF_OFFICE TEXT, DEPT_CODE TEXT, EMP_NUM NUMBER); CREATE TABLE EMPLOYEE (EMP_DOB TIME, EMP_LNAME TEXT, EMP_INITIAL TEXT, EMP_FNAME TEXT, EMP_JOBCODE TEXT, EMP_NUM NUMBER, EMP_HIREDATE TIME); CREATE TABLE CLASS (PROF_NUM NUMBER); CREATE TABLE DEPARTMENT (EMP_NUM NUMBER, DEPT_CODE TEXT);"
      }
    ],
    [
      {
        "question": "Order the employees alphabetically by first name",
        "query": "SELECT * FROM employee ORDER BY emp_fname",
        "schema": "CREATE TABLE CLASS (PROF_NUM NUMBER); CREATE TABLE DEPARTMENT (EMP_NUM NUMBER, DEPT_CODE TEXT); CREATE TABLE PROFESSOR (EMP_NUM NUMBER, DEPT_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_DOB TIME, EMP_FNAME TEXT, EMP_NUM NUMBER, EMP_HIREDATE TIME, EMP_LNAME TEXT);"
      },
      {
        "question": "Which of those are professors?",
        "query": "SELECT * FROM professor AS t1 JOIN employee AS t2 ON t1.emp_num = t2.emp_num ORDER BY t2.emp_fname",
        "schema": "CREATE TABLE PROFESSOR (PROF_HIGH_DEGREE TEXT, PROF_OFFICE TEXT, EMP_NUM NUMBER, DEPT_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_DOB TIME, EMP_HIREDATE TIME, EMP_FNAME TEXT, EMP_JOBCODE TEXT, EMP_LNAME TEXT, EMP_NUM NUMBER); CREATE TABLE CLASS (PROF_NUM NUMBER); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT, EMP_NUM NUMBER);"
      },
      {
        "question": "What are their first names and office locations?",
        "query": "SELECT t2.emp_fname , t1.prof_office FROM professor AS t1 JOIN employee AS t2 ON t1.emp_num = t2.emp_num ORDER BY t2.emp_fname",
        "schema": "CREATE TABLE EMPLOYEE (EMP_DOB TIME, EMP_NUM NUMBER, EMP_HIREDATE TIME, EMP_FNAME TEXT, EMP_LNAME TEXT, EMP_JOBCODE TEXT); CREATE TABLE DEPARTMENT (EMP_NUM NUMBER, DEPT_CODE TEXT, DEPT_ADDRESS TEXT); CREATE TABLE PROFESSOR (PROF_OFFICE TEXT, PROF_HIGH_DEGREE TEXT, EMP_NUM NUMBER, DEPT_CODE TEXT); CREATE TABLE CLASS (PROF_NUM NUMBER);"
      }
    ],
    [
      {
        "question": "What are the employees' first names?",
        "query": "SELECT emp_fname FROM employee",
        "schema": "CREATE TABLE DEPARTMENT (DEPT_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_LNAME TEXT, EMP_DOB TIME, EMP_FNAME TEXT, EMP_INITIAL TEXT, EMP_NUM NUMBER); CREATE TABLE PROFESSOR (EMP_NUM NUMBER, DEPT_CODE TEXT); CREATE TABLE CLASS (PROF_NUM NUMBER);"
      },
      {
        "question": "Also, what are their last names?",
        "query": "SELECT emp_fname , emp_lname FROM employee",
        "schema": "CREATE TABLE PROFESSOR (EMP_NUM NUMBER, DEPT_CODE TEXT); CREATE TABLE CLASS (PROF_NUM NUMBER); CREATE TABLE EMPLOYEE (EMP_DOB TIME, EMP_LNAME TEXT, EMP_HIREDATE TIME, EMP_FNAME TEXT, EMP_NUM NUMBER, EMP_INITIAL TEXT); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT, EMP_NUM NUMBER);"
      },
      {
        "question": "Which of those refer to the oldest employee?",
        "query": "SELECT emp_fname , emp_lname FROM employee ORDER BY emp_dob LIMIT 1",
        "schema": "CREATE TABLE EMPLOYEE (EMP_INITIAL TEXT, EMP_LNAME TEXT, EMP_FNAME TEXT, EMP_HIREDATE TIME, EMP_DOB TIME, EMP_NUM NUMBER); CREATE TABLE CLASS (PROF_NUM NUMBER); CREATE TABLE PROFESSOR (EMP_NUM NUMBER, DEPT_CODE TEXT); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT, EMP_NUM NUMBER);"
      }
    ],
    [
      {
        "question": "List all information on students with a higher GPA than 3",
        "query": "SELECT * FROM student WHERE stu_gpa > 3",
        "schema": "CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_CODE TEXT); CREATE TABLE CLASS (CLASS_CODE TEXT, CRS_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT); CREATE TABLE ENROLL (STU_NUM NUMBER, CLASS_CODE TEXT); CREATE TABLE STUDENT (STU_FNAME TEXT, STU_GPA NUMBER, STU_CLASS TEXT, STU_LNAME TEXT, DEPT_CODE TEXT, PROF_NUM NUMBER, STU_NUM NUMBER, STU_INIT TEXT, STU_DOB TIME);"
      },
      {
        "question": "What information is for the youngest student?",
        "query": "SELECT * FROM student WHERE stu_gpa > 3 ORDER BY stu_dob DESC LIMIT 1",
        "schema": "CREATE TABLE STUDENT (STU_FNAME TEXT, STU_HRS NUMBER, STU_DOB TIME, STU_NUM NUMBER, DEPT_CODE TEXT, STU_INIT TEXT, PROF_NUM NUMBER, STU_GPA NUMBER, STU_CLASS TEXT, STU_LNAME TEXT); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT); CREATE TABLE CLASS (CLASS_CODE TEXT, CRS_CODE TEXT); CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE ENROLL (STU_NUM NUMBER, CLASS_CODE TEXT);"
      },
      {
        "question": "What are their first name, last name, and GPA?",
        "query": "SELECT stu_fname , stu_lname , stu_gpa FROM student WHERE stu_gpa > 3 ORDER BY stu_dob DESC LIMIT 1",
        "schema": "CREATE TABLE CLASS (CRS_CODE TEXT, CLASS_CODE TEXT); CREATE TABLE STUDENT (STU_FNAME TEXT, STU_CLASS TEXT, STU_HRS NUMBER, STU_NUM NUMBER, STU_GPA NUMBER, STU_LNAME TEXT, PROF_NUM NUMBER, STU_INIT TEXT, STU_DOB TIME, DEPT_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE ENROLL (CLASS_CODE TEXT, STU_NUM NUMBER); CREATE TABLE COURSE (CRS_CODE TEXT, DEPT_CODE TEXT); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT);"
      }
    ],
    [
      {
        "question": "What are the student ids of all students who received an enrollment grade of C?",
        "query": "SELECT stu_num FROM enroll WHERE enroll_grade = 'C'",
        "schema": "CREATE TABLE CLASS (CLASS_CODE TEXT, CRS_CODE TEXT); CREATE TABLE STUDENT (STU_NUM NUMBER, DEPT_CODE TEXT, STU_CLASS TEXT, STU_INIT TEXT, STU_LNAME TEXT, PROF_NUM NUMBER, STU_DOB TIME, STU_GPA NUMBER); CREATE TABLE ENROLL (ENROLL_GRADE TEXT, CLASS_CODE TEXT, STU_NUM NUMBER); CREATE TABLE COURSE (CRS_CODE TEXT, DEPT_CODE TEXT); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT);"
      },
      {
        "question": "What are the first names that correspond to each student id?",
        "query": "SELECT stu_fname FROM student AS t1 JOIN enroll AS t2 ON t1.stu_num = t2.stu_num WHERE enroll_grade = 'C'",
        "schema": "CREATE TABLE DEPARTMENT (DEPT_CODE TEXT); CREATE TABLE ENROLL (STU_NUM NUMBER, CLASS_CODE TEXT, ENROLL_GRADE TEXT); CREATE TABLE CLASS (CRS_CODE TEXT, CLASS_CODE TEXT); CREATE TABLE STUDENT (STU_FNAME TEXT, STU_NUM NUMBER, STU_INIT TEXT, PROF_NUM NUMBER, STU_LNAME TEXT, DEPT_CODE TEXT, STU_DOB TIME, STU_CLASS TEXT, STU_GPA NUMBER); CREATE TABLE COURSE (CRS_CODE TEXT, DEPT_CODE TEXT);"
      },
      {
        "question": "What is a list of distinct first names?",
        "query": "SELECT DISTINCT stu_fname FROM student AS t1 JOIN enroll AS t2 ON t1.stu_num = t2.stu_num WHERE enroll_grade = 'C'",
        "schema": "CREATE TABLE DEPARTMENT (DEPT_CODE TEXT); CREATE TABLE ENROLL (STU_NUM NUMBER, CLASS_CODE TEXT, ENROLL_GRADE TEXT); CREATE TABLE STUDENT (STU_LNAME TEXT, STU_FNAME TEXT, DEPT_CODE TEXT, STU_INIT TEXT, STU_DOB TIME, STU_NUM NUMBER, STU_GPA NUMBER, STU_CLASS TEXT, PROF_NUM NUMBER); CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_CODE TEXT); CREATE TABLE CLASS (CLASS_CODE TEXT, CRS_CODE TEXT);"
      }
    ],
    [
      {
        "question": "For each department, what is the corresponding number of professors?",
        "query": "SELECT count(*) , t1.dept_code FROM professor AS t1 JOIN department AS t2 ON t1.dept_code = t2.dept_code GROUP BY t1.dept_code",
        "schema": "CREATE TABLE STUDENT (DEPT_CODE TEXT); CREATE TABLE CLASS (PROF_NUM NUMBER); CREATE TABLE DEPARTMENT (EMP_NUM NUMBER, DEPT_CODE TEXT, SCHOOL_CODE TEXT, DEPT_NAME TEXT, DEPT_EXTENSION TEXT); CREATE TABLE PROFESSOR (EMP_NUM NUMBER, PROF_HIGH_DEGREE TEXT, PROF_OFFICE TEXT, DEPT_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER, EMP_JOBCODE TEXT, EMP_LNAME TEXT, EMP_HIREDATE TIME, EMP_DOB TIME); CREATE TABLE COURSE (DEPT_CODE TEXT);"
      },
      {
        "question": "For the department with the fewest professors, what is its name and code?",
        "query": "SELECT t2.dept_name , t1.dept_code FROM professor AS t1 JOIN department AS t2 ON t1.dept_code = t2.dept_code GROUP BY t1.dept_code ORDER BY count(*) LIMIT 1",
        "schema": "CREATE TABLE COURSE (DEPT_CODE TEXT); CREATE TABLE STUDENT (DEPT_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_FNAME TEXT, EMP_JOBCODE TEXT, EMP_LNAME TEXT, EMP_NUM NUMBER, EMP_DOB TIME, EMP_HIREDATE TIME); CREATE TABLE CLASS (PROF_NUM NUMBER); CREATE TABLE PROFESSOR (EMP_NUM NUMBER, PROF_OFFICE TEXT, PROF_HIGH_DEGREE TEXT, DEPT_CODE TEXT); CREATE TABLE DEPARTMENT (SCHOOL_CODE TEXT, EMP_NUM NUMBER, DEPT_CODE TEXT, DEPT_EXTENSION TEXT, DEPT_NAME TEXT);"
      }
    ],
    [
      {
        "question": "Which professors do have a Ph.D. degree?",
        "query": "SELECT * FROM professor WHERE prof_high_degree = 'Ph.D.'",
        "schema": "CREATE TABLE PROFESSOR (PROF_OFFICE TEXT, PROF_HIGH_DEGREE TEXT, DEPT_CODE TEXT, EMP_NUM NUMBER, PROF_EXTENSION TEXT); CREATE TABLE CLASS (CRS_CODE TEXT, PROF_NUM NUMBER); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER, EMP_LNAME TEXT, EMP_DOB TIME, EMP_HIREDATE TIME, EMP_FNAME TEXT, EMP_JOBCODE TEXT); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT, EMP_NUM NUMBER); CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_CODE TEXT);"
      },
      {
        "question": "How many of those professors are in each department?",
        "query": "SELECT count(*) , dept_code FROM professor WHERE prof_high_degree = 'Ph.D.' GROUP BY dept_code",
        "schema": "CREATE TABLE COURSE (CRS_CODE TEXT, DEPT_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_JOBCODE TEXT, EMP_LNAME TEXT, EMP_DOB TIME, EMP_FNAME TEXT, EMP_NUM NUMBER, EMP_HIREDATE TIME); CREATE TABLE PROFESSOR (PROF_OFFICE TEXT, PROF_HIGH_DEGREE TEXT, PROF_EXTENSION TEXT, DEPT_CODE TEXT, EMP_NUM NUMBER); CREATE TABLE DEPARTMENT (EMP_NUM NUMBER, DEPT_CODE TEXT, DEPT_NAME TEXT); CREATE TABLE CLASS (PROF_NUM NUMBER, CRS_CODE TEXT);"
      },
      {
        "question": "Find the code of the department that has the most of them.",
        "query": "SELECT dept_code FROM professor WHERE prof_high_degree = 'Ph.D.' GROUP BY dept_code ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE EMPLOYEE (EMP_JOBCODE TEXT, EMP_LNAME TEXT, EMP_NUM NUMBER, EMP_DOB TIME, EMP_FNAME TEXT, EMP_HIREDATE TIME); CREATE TABLE CLASS (PROF_NUM NUMBER, CRS_CODE TEXT); CREATE TABLE PROFESSOR (EMP_NUM NUMBER, PROF_OFFICE TEXT, PROF_EXTENSION TEXT, PROF_HIGH_DEGREE TEXT, DEPT_CODE TEXT); CREATE TABLE DEPARTMENT (DEPT_NAME TEXT, EMP_NUM NUMBER, DEPT_CODE TEXT); CREATE TABLE COURSE (CRS_CODE TEXT, DEPT_CODE TEXT);"
      },
      {
        "question": "What is the name of that department?",
        "query": "SELECT t2.dept_name FROM professor AS t1 JOIN department AS t2 ON t1.dept_code = t2.dept_code WHERE t1.prof_high_degree = 'Ph.D.' GROUP BY t1.dept_code ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE COURSE (CRS_CODE TEXT, DEPT_CODE TEXT); CREATE TABLE DEPARTMENT (DEPT_NAME TEXT, EMP_NUM NUMBER, DEPT_CODE TEXT); CREATE TABLE CLASS (PROF_NUM NUMBER, CRS_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_FNAME TEXT, EMP_NUM NUMBER, EMP_HIREDATE TIME, EMP_LNAME TEXT, EMP_DOB TIME, EMP_JOBCODE TEXT); CREATE TABLE PROFESSOR (PROF_HIGH_DEGREE TEXT, PROF_OFFICE TEXT, DEPT_CODE TEXT, PROF_EXTENSION TEXT, EMP_NUM NUMBER);"
      }
    ],
    [
      {
        "question": "What is the first names of employees whose job code is PROF?",
        "query": "SELECT emp_fname FROM employee WHERE emp_jobcode = 'PROF'",
        "schema": "CREATE TABLE DEPARTMENT (DEPT_CODE TEXT, EMP_NUM NUMBER); CREATE TABLE EMPLOYEE (EMP_DOB TIME, EMP_NUM NUMBER, EMP_JOBCODE TEXT, EMP_FNAME TEXT, EMP_LNAME TEXT, EMP_HIREDATE TIME); CREATE TABLE CLASS (PROF_NUM NUMBER); CREATE TABLE PROFESSOR (DEPT_CODE TEXT, EMP_NUM NUMBER);"
      },
      {
        "question": "Which of them are not teaching any class?",
        "query": "SELECT emp_fname FROM employee WHERE emp_jobcode = 'PROF' EXCEPT SELECT t1.emp_fname FROM employee AS t1 JOIN CLASS AS t2 ON t1.emp_num = t2.prof_num",
        "schema": "CREATE TABLE CLASS (CRS_CODE TEXT, PROF_NUM NUMBER, CLASS_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_FNAME TEXT, EMP_DOB TIME, EMP_LNAME TEXT, EMP_HIREDATE TIME, EMP_JOBCODE TEXT, EMP_NUM NUMBER); CREATE TABLE DEPARTMENT (EMP_NUM NUMBER, DEPT_CODE TEXT); CREATE TABLE PROFESSOR (DEPT_CODE TEXT, PROF_OFFICE TEXT, EMP_NUM NUMBER);"
      }
    ],
    [
      {
        "question": "What are the first names of all employees who are teaching classes?",
        "query": "SELECT t1.emp_fname FROM employee AS t1 JOIN CLASS AS t2 ON t1.emp_num = t2.prof_num",
        "schema": "CREATE TABLE EMPLOYEE (EMP_LNAME TEXT, EMP_NUM NUMBER, EMP_JOBCODE TEXT, EMP_DOB TIME, EMP_INITIAL TEXT, EMP_FNAME TEXT); CREATE TABLE DEPARTMENT (EMP_NUM NUMBER, DEPT_CODE TEXT); CREATE TABLE CLASS (PROF_NUM NUMBER, CLASS_CODE TEXT, CRS_CODE TEXT); CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_CODE TEXT); CREATE TABLE PROFESSOR (EMP_NUM NUMBER, PROF_OFFICE TEXT, DEPT_CODE TEXT);"
      },
      {
        "question": "Please list the first names of all other professors.",
        "query": "SELECT t1.emp_fname FROM employee AS t1 JOIN professor AS t2 ON t1.emp_num = t2.emp_num JOIN department AS t3 ON t2.dept_code = t3.dept_code EXCEPT SELECT t4.emp_fname FROM employee AS t4 JOIN CLASS AS t5 ON t4.emp_num = t5.prof_num",
        "schema": "CREATE TABLE CLASS (CRS_CODE TEXT, CLASS_CODE TEXT, PROF_NUM NUMBER); CREATE TABLE COURSE (CRS_CODE TEXT, DEPT_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_LNAME TEXT, EMP_NUM NUMBER, EMP_HIREDATE TIME, EMP_INITIAL TEXT, EMP_DOB TIME, EMP_FNAME TEXT, EMP_JOBCODE TEXT); CREATE TABLE PROFESSOR (EMP_NUM NUMBER, PROF_OFFICE TEXT, DEPT_CODE TEXT); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT, EMP_NUM NUMBER);"
      },
      {
        "question": "Which of these refer to teachers in the history department?",
        "query": "SELECT t1.emp_fname FROM employee AS t1 JOIN professor AS t2 ON t1.emp_num = t2.emp_num JOIN department AS t3 ON t2.dept_code = t3.dept_code WHERE t3.dept_name = 'History' EXCEPT SELECT t4.emp_fname FROM employee AS t4 JOIN CLASS AS t5 ON t4.emp_num = t5.prof_num",
        "schema": "CREATE TABLE CLASS (CLASS_CODE TEXT, PROF_NUM NUMBER, CRS_CODE TEXT); CREATE TABLE PROFESSOR (EMP_NUM NUMBER, DEPT_CODE TEXT, PROF_OFFICE TEXT); CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_CODE TEXT); CREATE TABLE DEPARTMENT (DEPT_NAME TEXT, EMP_NUM NUMBER, DEPT_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_DOB TIME, EMP_INITIAL TEXT, EMP_JOBCODE TEXT, EMP_LNAME TEXT, EMP_HIREDATE TIME, EMP_FNAME TEXT, EMP_NUM NUMBER);"
      }
    ],
    [
      {
        "question": "What is all the information about the history department?",
        "query": "SELECT * FROM department WHERE dept_name = 'History'",
        "schema": "CREATE TABLE CLASS (CRS_CODE TEXT); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT, DEPT_NAME TEXT, DEPT_EXTENSION TEXT, DEPT_ADDRESS TEXT, SCHOOL_CODE TEXT, EMP_NUM NUMBER); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE COURSE (CRS_CODE TEXT, DEPT_CODE TEXT); CREATE TABLE STUDENT (DEPT_CODE TEXT); CREATE TABLE PROFESSOR (DEPT_CODE TEXT, EMP_NUM NUMBER);"
      },
      {
        "question": "What are the names of professors in this department?",
        "query": "SELECT t1.emp_lname FROM employee AS t1 JOIN professor AS t2 ON t1.emp_num = t2.emp_num JOIN department AS t3 ON t2.dept_code = t3.dept_code WHERE t3.dept_name = 'History'",
        "schema": "CREATE TABLE DEPARTMENT (DEPT_ADDRESS TEXT, DEPT_CODE TEXT, DEPT_NAME TEXT, EMP_NUM NUMBER, SCHOOL_CODE TEXT, DEPT_EXTENSION TEXT); CREATE TABLE CLASS (PROF_NUM NUMBER, CRS_CODE TEXT); CREATE TABLE COURSE (CRS_CODE TEXT, DEPT_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_FNAME TEXT, EMP_LNAME TEXT, EMP_NUM NUMBER, EMP_HIREDATE TIME, EMP_DOB TIME); CREATE TABLE PROFESSOR (PROF_OFFICE TEXT, DEPT_CODE TEXT, EMP_NUM NUMBER); CREATE TABLE STUDENT (DEPT_CODE TEXT);"
      },
      {
        "question": "Also, where are their offices located?",
        "query": "SELECT t1.emp_lname , t2.prof_office FROM employee AS t1 JOIN professor AS t2 ON t1.emp_num = t2.emp_num JOIN department AS t3 ON t2.dept_code = t3.dept_code WHERE t3.dept_name = 'History'",
        "schema": "CREATE TABLE EMPLOYEE (EMP_LNAME TEXT, EMP_FNAME TEXT, EMP_NUM NUMBER, EMP_DOB TIME, EMP_HIREDATE TIME); CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_CODE TEXT); CREATE TABLE PROFESSOR (EMP_NUM NUMBER, DEPT_CODE TEXT, PROF_OFFICE TEXT); CREATE TABLE DEPARTMENT (DEPT_NAME TEXT, DEPT_EXTENSION TEXT, EMP_NUM NUMBER, DEPT_ADDRESS TEXT, SCHOOL_CODE TEXT, DEPT_CODE TEXT); CREATE TABLE STUDENT (DEPT_CODE TEXT); CREATE TABLE CLASS (CRS_CODE TEXT, PROF_NUM NUMBER);"
      }
    ],
    [
      {
        "question": "Find me all employees with the last name 'Heffington'?",
        "query": "SELECT * FROM employee WHERE emp_lname = 'Heffington'",
        "schema": "CREATE TABLE CLASS (PROF_NUM NUMBER); CREATE TABLE EMPLOYEE (EMP_FNAME TEXT, EMP_LNAME TEXT, EMP_DOB TIME, EMP_NUM NUMBER, EMP_HIREDATE TIME, EMP_JOBCODE TEXT); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT, EMP_NUM NUMBER, DEPT_NAME TEXT); CREATE TABLE PROFESSOR (EMP_NUM NUMBER, DEPT_CODE TEXT, PROF_OFFICE TEXT);"
      },
      {
        "question": "What are the names of their departments?",
        "query": "SELECT t3.dept_name FROM employee AS t1 JOIN professor AS t2 ON t1.emp_num = t2.emp_num JOIN department AS t3 ON t2.dept_code = t3.dept_code WHERE t1.emp_lname = 'Heffington'",
        "schema": "CREATE TABLE CLASS (PROF_NUM NUMBER); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT, DEPT_NAME TEXT, EMP_NUM NUMBER); CREATE TABLE EMPLOYEE (EMP_LNAME TEXT, EMP_HIREDATE TIME, EMP_JOBCODE TEXT, EMP_NUM NUMBER, EMP_DOB TIME, EMP_FNAME TEXT); CREATE TABLE PROFESSOR (EMP_NUM NUMBER, DEPT_CODE TEXT, PROF_OFFICE TEXT);"
      },
      {
        "question": "Also, where are their offices located?",
        "query": "SELECT t3.dept_name , t2.prof_office FROM employee AS t1 JOIN professor AS t2 ON t1.emp_num = t2.emp_num JOIN department AS t3 ON t2.dept_code = t3.dept_code WHERE t1.emp_lname = 'Heffington'",
        "schema": "CREATE TABLE PROFESSOR (PROF_OFFICE TEXT, EMP_NUM NUMBER, DEPT_CODE TEXT); CREATE TABLE DEPARTMENT (EMP_NUM NUMBER, DEPT_CODE TEXT, DEPT_ADDRESS TEXT, DEPT_NAME TEXT); CREATE TABLE EMPLOYEE (EMP_HIREDATE TIME, EMP_NUM NUMBER, EMP_LNAME TEXT, EMP_JOBCODE TEXT, EMP_DOB TIME, EMP_FNAME TEXT); CREATE TABLE CLASS (PROF_NUM NUMBER);"
      }
    ],
    [
      {
        "question": "Find the professors whose office is located in room DRE 102?",
        "query": "SELECT * FROM professor WHERE prof_office = 'DRE 102'",
        "schema": "CREATE TABLE PROFESSOR (PROF_OFFICE TEXT, DEPT_CODE TEXT, EMP_NUM NUMBER); CREATE TABLE DEPARTMENT (EMP_NUM NUMBER, DEPT_CODE TEXT); CREATE TABLE CLASS (CLASS_ROOM TEXT, PROF_NUM NUMBER); CREATE TABLE EMPLOYEE (EMP_JOBCODE TEXT, EMP_NUM NUMBER, EMP_DOB TIME, EMP_HIREDATE TIME, EMP_LNAME TEXT, EMP_FNAME TEXT);"
      },
      {
        "question": "What are their last names?",
        "query": "SELECT t1.emp_lname FROM employee AS t1 JOIN professor AS t2 ON t1.emp_num = t2.emp_num WHERE t2.prof_office = 'DRE 102'",
        "schema": "CREATE TABLE CLASS (PROF_NUM NUMBER, CLASS_ROOM TEXT); CREATE TABLE PROFESSOR (EMP_NUM NUMBER, PROF_OFFICE TEXT, DEPT_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_JOBCODE TEXT, EMP_HIREDATE TIME, EMP_FNAME TEXT, EMP_NUM NUMBER, EMP_DOB TIME, EMP_LNAME TEXT); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT, EMP_NUM NUMBER);"
      },
      {
        "question": "When were they hired?",
        "query": "SELECT t1.emp_hiredate FROM employee AS t1 JOIN professor AS t2 ON t1.emp_num = t2.emp_num WHERE t2.prof_office = 'DRE 102'",
        "schema": "CREATE TABLE DEPARTMENT (EMP_NUM NUMBER, DEPT_CODE TEXT); CREATE TABLE CLASS (PROF_NUM NUMBER, CLASS_ROOM TEXT); CREATE TABLE PROFESSOR (EMP_NUM NUMBER, DEPT_CODE TEXT, PROF_OFFICE TEXT); CREATE TABLE EMPLOYEE (EMP_DOB TIME, EMP_NUM NUMBER, EMP_HIREDATE TIME, EMP_JOBCODE TEXT, EMP_LNAME TEXT, EMP_FNAME TEXT);"
      }
    ],
    [
      {
        "question": "Find all information on students.",
        "query": "SELECT * FROM student",
        "schema": "CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE CLASS (CLASS_CODE TEXT, CRS_CODE TEXT); CREATE TABLE STUDENT (DEPT_CODE TEXT, PROF_NUM NUMBER, STU_DOB TIME, STU_INIT TEXT, STU_NUM NUMBER, STU_FNAME TEXT, STU_LNAME TEXT, STU_CLASS TEXT); CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_CODE TEXT); CREATE TABLE ENROLL (CLASS_CODE TEXT, STU_NUM NUMBER); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT, EMP_NUM NUMBER, DEPT_NAME TEXT);"
      },
      {
        "question": "Which of that information refers to people with the last name Smithson?",
        "query": "SELECT * FROM student WHERE stu_lname = 'Smithson'",
        "schema": "CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE STUDENT (STU_LNAME TEXT, PROF_NUM NUMBER, STU_INIT TEXT, STU_CLASS TEXT, DEPT_CODE TEXT, STU_NUM NUMBER, STU_DOB TIME, STU_FNAME TEXT); CREATE TABLE CLASS (CLASS_CODE TEXT, CRS_CODE TEXT); CREATE TABLE DEPARTMENT (EMP_NUM NUMBER, DEPT_CODE TEXT, DEPT_NAME TEXT); CREATE TABLE ENROLL (STU_NUM NUMBER, CLASS_CODE TEXT);"
      },
      {
        "question": "What are the codes of the courses they took?",
        "query": "SELECT t1.crs_code FROM CLASS AS t1 JOIN enroll AS t2 ON t1.class_code = t2.class_code JOIN student AS t3 ON t3.stu_num = t2.stu_num WHERE t3.stu_lname = 'Smithson'",
        "schema": "CREATE TABLE CLASS (CRS_CODE TEXT, CLASS_CODE TEXT); CREATE TABLE DEPARTMENT (DEPT_NAME TEXT, DEPT_CODE TEXT, EMP_NUM NUMBER); CREATE TABLE ENROLL (STU_NUM NUMBER, CLASS_CODE TEXT); CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE STUDENT (STU_FNAME TEXT, DEPT_CODE TEXT, STU_LNAME TEXT, STU_CLASS TEXT, STU_DOB TIME, STU_NUM NUMBER, PROF_NUM NUMBER, STU_INIT TEXT);"
      }
    ],
    [
      {
        "question": "What are the course descriptions?",
        "query": "SELECT crs_description FROM course",
        "schema": "CREATE TABLE DEPARTMENT (DEPT_CODE TEXT); CREATE TABLE CLASS (CRS_CODE TEXT); CREATE TABLE COURSE (CRS_DESCRIPTION TEXT, DEPT_CODE TEXT, CRS_CODE TEXT);"
      },
      {
        "question": "Also, show credits.",
        "query": "SELECT crs_description , crs_credit FROM course",
        "schema": "CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_CREDIT NUMBER, CRS_DESCRIPTION TEXT, CRS_CODE TEXT); CREATE TABLE CLASS (CRS_CODE TEXT); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT);"
      },
      {
        "question": "Which of the above refer to courses that a student with the last name 'Smithson' took?",
        "query": "SELECT t4.crs_description , t4.crs_credit FROM CLASS AS t1 JOIN enroll AS t2 ON t1.class_code = t2.class_code JOIN student AS t3 ON t3.stu_num = t2.stu_num JOIN course AS t4 ON t4.crs_code = t1.crs_code WHERE t3.stu_lname = 'Smithson'",
        "schema": "CREATE TABLE ENROLL (STU_NUM NUMBER, ENROLL_GRADE TEXT, CLASS_CODE TEXT); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT); CREATE TABLE STUDENT (STU_FNAME TEXT, STU_DOB TIME, STU_NUM NUMBER, STU_CLASS TEXT, STU_LNAME TEXT, STU_INIT TEXT, DEPT_CODE TEXT, PROF_NUM NUMBER); CREATE TABLE COURSE (CRS_CODE TEXT, CRS_DESCRIPTION TEXT, CRS_CREDIT NUMBER, DEPT_CODE TEXT); CREATE TABLE CLASS (CRS_CODE TEXT, CLASS_CODE TEXT);"
      }
    ],
    [
      {
        "question": "What information do you have on professors who got a Ph.D.?",
        "query": "SELECT * FROM professor WHERE prof_high_degree = 'Ph.D.'",
        "schema": "CREATE TABLE ENROLL (STU_NUM NUMBER); CREATE TABLE EMPLOYEE (EMP_JOBCODE TEXT, EMP_INITIAL TEXT, EMP_FNAME TEXT, EMP_NUM NUMBER, EMP_HIREDATE TIME, EMP_DOB TIME, EMP_LNAME TEXT); CREATE TABLE CLASS (PROF_NUM NUMBER, CLASS_CODE TEXT); CREATE TABLE PROFESSOR (PROF_HIGH_DEGREE TEXT, PROF_EXTENSION TEXT, EMP_NUM NUMBER, DEPT_CODE TEXT, PROF_OFFICE TEXT); CREATE TABLE DEPARTMENT (EMP_NUM NUMBER, DEPT_CODE TEXT);"
      },
      {
        "question": "Also, combine that with information you have on professors with a Masters?",
        "query": "SELECT * FROM professor WHERE prof_high_degree = 'Ph.D.' OR prof_high_degree = 'MA'",
        "schema": "CREATE TABLE PROFESSOR (EMP_NUM NUMBER, PROF_EXTENSION TEXT, DEPT_CODE TEXT, PROF_OFFICE TEXT, PROF_HIGH_DEGREE TEXT); CREATE TABLE ENROLL (STU_NUM NUMBER); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT, EMP_NUM NUMBER); CREATE TABLE CLASS (PROF_NUM NUMBER, CLASS_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_HIREDATE TIME, EMP_FNAME TEXT, EMP_INITIAL TEXT, EMP_LNAME TEXT, EMP_DOB TIME, EMP_NUM NUMBER, EMP_JOBCODE TEXT);"
      },
      {
        "question": "How many are there in total?",
        "query": "SELECT count(*) FROM professor WHERE prof_high_degree = 'Ph.D.' OR prof_high_degree = 'MA'",
        "schema": "CREATE TABLE DEPARTMENT (EMP_NUM NUMBER, DEPT_CODE TEXT); CREATE TABLE PROFESSOR (PROF_EXTENSION TEXT, EMP_NUM NUMBER, PROF_HIGH_DEGREE TEXT, DEPT_CODE TEXT, PROF_OFFICE TEXT); CREATE TABLE CLASS (CLASS_CODE TEXT, PROF_NUM NUMBER); CREATE TABLE EMPLOYEE (EMP_HIREDATE TIME, EMP_DOB TIME, EMP_JOBCODE TEXT, EMP_INITIAL TEXT, EMP_LNAME TEXT, EMP_NUM NUMBER, EMP_FNAME TEXT); CREATE TABLE ENROLL (STU_NUM NUMBER);"
      }
    ],
    [
      {
        "question": "What information do you have on professors in the Accounting department?",
        "query": "SELECT * FROM professor AS t1 JOIN department AS t2 ON t1.dept_code = t2.dept_code WHERE t2.dept_name = 'Accounting'",
        "schema": "CREATE TABLE PROFESSOR (PROF_OFFICE TEXT, DEPT_CODE TEXT, EMP_NUM NUMBER, PROF_HIGH_DEGREE TEXT); CREATE TABLE CLASS (PROF_NUM NUMBER); CREATE TABLE COURSE (DEPT_CODE TEXT); CREATE TABLE DEPARTMENT (DEPT_NAME TEXT, DEPT_ADDRESS TEXT, DEPT_CODE TEXT, EMP_NUM NUMBER, SCHOOL_CODE TEXT); CREATE TABLE STUDENT (DEPT_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_HIREDATE TIME, EMP_NUM NUMBER, EMP_FNAME TEXT, EMP_DOB TIME, EMP_LNAME TEXT, EMP_JOBCODE TEXT);"
      },
      {
        "question": "Also, what do you have on professors in the Biology department?",
        "query": "SELECT * FROM professor AS t1 JOIN department AS t2 ON t1.dept_code = t2.dept_code WHERE t2.dept_name = 'Accounting' OR t2.dept_name = 'Biology'",
        "schema": "CREATE TABLE DEPARTMENT (DEPT_ADDRESS TEXT, DEPT_NAME TEXT, EMP_NUM NUMBER, DEPT_CODE TEXT, SCHOOL_CODE TEXT); CREATE TABLE COURSE (DEPT_CODE TEXT); CREATE TABLE PROFESSOR (PROF_HIGH_DEGREE TEXT, PROF_OFFICE TEXT, EMP_NUM NUMBER, DEPT_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_FNAME TEXT, EMP_DOB TIME, EMP_JOBCODE TEXT, EMP_LNAME TEXT, EMP_NUM NUMBER, EMP_HIREDATE TIME); CREATE TABLE STUDENT (DEPT_CODE TEXT); CREATE TABLE CLASS (PROF_NUM NUMBER);"
      },
      {
        "question": "How many of them are there?",
        "query": "SELECT count(*) FROM professor AS t1 JOIN department AS t2 ON t1.dept_code = t2.dept_code WHERE t2.dept_name = 'Accounting' OR t2.dept_name = 'Biology'",
        "schema": "CREATE TABLE CLASS (PROF_NUM NUMBER); CREATE TABLE COURSE (DEPT_CODE TEXT); CREATE TABLE DEPARTMENT (EMP_NUM NUMBER, SCHOOL_CODE TEXT, DEPT_CODE TEXT, DEPT_NAME TEXT, DEPT_ADDRESS TEXT); CREATE TABLE PROFESSOR (EMP_NUM NUMBER, PROF_OFFICE TEXT, PROF_HIGH_DEGREE TEXT, DEPT_CODE TEXT); CREATE TABLE STUDENT (DEPT_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_DOB TIME, EMP_JOBCODE TEXT, EMP_HIREDATE TIME, EMP_LNAME TEXT, EMP_FNAME TEXT, EMP_NUM NUMBER);"
      }
    ],
    [
      {
        "question": "What are the first names of all professors teaching CIS-220?",
        "query": "SELECT t1.emp_fname FROM employee AS t1 JOIN CLASS AS t2 ON t1.emp_num = t2.prof_num WHERE crs_code = 'CIS-220'",
        "schema": "CREATE TABLE EMPLOYEE (EMP_FNAME TEXT, EMP_DOB TIME, EMP_LNAME TEXT, EMP_HIREDATE TIME, EMP_NUM NUMBER, EMP_JOBCODE TEXT); CREATE TABLE CLASS (PROF_NUM NUMBER, CLASS_CODE TEXT, CRS_CODE TEXT); CREATE TABLE COURSE (CRS_CODE TEXT); CREATE TABLE DEPARTMENT (EMP_NUM NUMBER, DEPT_CODE TEXT, DEPT_NAME TEXT); CREATE TABLE PROFESSOR (DEPT_CODE TEXT, EMP_NUM NUMBER, PROF_OFFICE TEXT);"
      },
      {
        "question": "What are the first names of all professors teaching QM-261?",
        "query": "SELECT t1.emp_fname FROM employee AS t1 JOIN CLASS AS t2 ON t1.emp_num = t2.prof_num WHERE crs_code = 'QM-261'",
        "schema": "CREATE TABLE EMPLOYEE (EMP_HIREDATE TIME, EMP_JOBCODE TEXT, EMP_LNAME TEXT, EMP_DOB TIME, EMP_NUM NUMBER, EMP_FNAME TEXT); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT, DEPT_NAME TEXT, EMP_NUM NUMBER); CREATE TABLE CLASS (PROF_NUM NUMBER, CLASS_CODE TEXT, CRS_CODE TEXT); CREATE TABLE PROFESSOR (DEPT_CODE TEXT, PROF_OFFICE TEXT, EMP_NUM NUMBER); CREATE TABLE COURSE (CRS_CODE TEXT);"
      },
      {
        "question": "Who is teaching both?",
        "query": "SELECT t1.emp_fname FROM employee AS t1 JOIN CLASS AS t2 ON t1.emp_num = t2.prof_num WHERE crs_code = 'CIS-220' INTERSECT SELECT t1.emp_fname FROM employee AS t1 JOIN CLASS AS t2 ON t1.emp_num = t2.prof_num WHERE crs_code = 'QM-261'",
        "schema": "CREATE TABLE PROFESSOR (EMP_NUM NUMBER, DEPT_CODE TEXT, PROF_OFFICE TEXT); CREATE TABLE EMPLOYEE (EMP_FNAME TEXT, EMP_JOBCODE TEXT, EMP_DOB TIME, EMP_HIREDATE TIME, EMP_NUM NUMBER, EMP_LNAME TEXT); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT, EMP_NUM NUMBER, DEPT_NAME TEXT); CREATE TABLE CLASS (PROF_NUM NUMBER, CRS_CODE TEXT, CLASS_CODE TEXT); CREATE TABLE COURSE (CRS_CODE TEXT);"
      }
    ],
    [
      {
        "question": "What are the first names of all students taking some classes from the Accounting department?",
        "query": "SELECT t1.stu_fname FROM student AS t1 JOIN enroll AS t2 ON t1.stu_num = t2.stu_num JOIN CLASS AS t3 ON t2.class_code = t3.class_code JOIN course AS t4 ON t3.crs_code = t4.crs_code JOIN department AS t5 ON t5.dept_code = t4.dept_code WHERE t5.dept_name = 'Accounting'",
        "schema": "CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_CODE TEXT); CREATE TABLE ENROLL (CLASS_CODE TEXT, STU_NUM NUMBER); CREATE TABLE CLASS (CRS_CODE TEXT, CLASS_CODE TEXT); CREATE TABLE PROFESSOR (DEPT_CODE TEXT); CREATE TABLE DEPARTMENT (SCHOOL_CODE TEXT, DEPT_NAME TEXT, EMP_NUM NUMBER, DEPT_CODE TEXT); CREATE TABLE STUDENT (STU_FNAME TEXT, PROF_NUM NUMBER, STU_NUM NUMBER, DEPT_CODE TEXT, STU_CLASS TEXT, STU_INIT TEXT, STU_DOB TIME, STU_LNAME TEXT);"
      },
      {
        "question": "Of those, who also took some classes from the Computer Information Systems department?",
        "query": "SELECT t1.stu_fname FROM student AS t1 JOIN enroll AS t2 ON t1.stu_num = t2.stu_num JOIN CLASS AS t3 ON t2.class_code = t3.class_code JOIN course AS t4 ON t3.crs_code = t4.crs_code JOIN department AS t5 ON t5.dept_code = t4.dept_code WHERE t5.dept_name = 'Accounting' INTERSECT SELECT t1.stu_fname FROM student AS t1 JOIN enroll AS t2 ON t1.stu_num = t2.stu_num JOIN CLASS AS t3 ON t2.class_code = t3.class_code JOIN course AS t4 ON t3.crs_code = t4.crs_code JOIN department AS t5 ON t5.dept_code = t4.dept_code WHERE t5.dept_name = 'Computer Info. Systems'",
        "schema": "CREATE TABLE ENROLL (STU_NUM NUMBER, CLASS_CODE TEXT); CREATE TABLE COURSE (CRS_CODE TEXT, DEPT_CODE TEXT); CREATE TABLE PROFESSOR (DEPT_CODE TEXT); CREATE TABLE STUDENT (STU_CLASS TEXT, STU_INIT TEXT, STU_DOB TIME, PROF_NUM NUMBER, STU_LNAME TEXT, STU_FNAME TEXT, DEPT_CODE TEXT, STU_NUM NUMBER); CREATE TABLE CLASS (CRS_CODE TEXT, CLASS_CODE TEXT); CREATE TABLE DEPARTMENT (SCHOOL_CODE TEXT, DEPT_NAME TEXT, EMP_NUM NUMBER, DEPT_CODE TEXT);"
      }
    ],
    [
      {
        "question": "What are all the student GPAs?",
        "query": "SELECT stu_gpa FROM student",
        "schema": "CREATE TABLE STUDENT (STU_CLASS TEXT, DEPT_CODE TEXT, STU_DOB TIME, STU_NUM NUMBER, STU_HRS NUMBER, STU_LNAME TEXT, STU_GPA NUMBER, PROF_NUM NUMBER, STU_INIT TEXT); CREATE TABLE ENROLL (STU_NUM NUMBER, CLASS_CODE TEXT); CREATE TABLE CLASS (CLASS_CODE TEXT, CRS_CODE TEXT); CREATE TABLE COURSE (CRS_CODE TEXT, DEPT_CODE TEXT); CREATE TABLE PROFESSOR (DEPT_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT, EMP_NUM NUMBER);"
      },
      {
        "question": "Which of those are for students taking course ACCT-211?",
        "query": "SELECT t2.stu_gpa FROM enroll AS t1 JOIN student AS t2 ON t1.stu_num = t2.stu_num JOIN CLASS AS t3 ON t1.class_code = t3.class_code WHERE t3.crs_code = 'ACCT-211'",
        "schema": "CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE PROFESSOR (DEPT_CODE TEXT); CREATE TABLE ENROLL (CLASS_CODE TEXT, STU_NUM NUMBER); CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_CODE TEXT); CREATE TABLE STUDENT (STU_HRS NUMBER, PROF_NUM NUMBER, STU_CLASS TEXT, STU_INIT TEXT, STU_LNAME TEXT, STU_DOB TIME, STU_GPA NUMBER, STU_NUM NUMBER, DEPT_CODE TEXT); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT, EMP_NUM NUMBER); CREATE TABLE CLASS (CRS_CODE TEXT, CLASS_CODE TEXT);"
      },
      {
        "question": "What is their average GPA?",
        "query": "SELECT avg(t2.stu_gpa) FROM enroll AS t1 JOIN student AS t2 ON t1.stu_num = t2.stu_num JOIN CLASS AS t3 ON t1.class_code = t3.class_code WHERE t3.crs_code = 'ACCT-211'",
        "schema": "CREATE TABLE CLASS (PROF_NUM NUMBER, CLASS_CODE TEXT, CRS_CODE TEXT); CREATE TABLE ENROLL (CLASS_CODE TEXT, STU_NUM NUMBER); CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_CODE TEXT); CREATE TABLE PROFESSOR (DEPT_CODE TEXT); CREATE TABLE STUDENT (STU_NUM NUMBER, STU_CLASS TEXT, STU_DOB TIME, STU_GPA NUMBER, STU_HRS NUMBER, PROF_NUM NUMBER, STU_INIT TEXT, STU_LNAME TEXT, DEPT_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT, EMP_NUM NUMBER);"
      }
    ],
    [
      {
        "question": "What is the GPA, phone number, and first name for all students?",
        "query": "SELECT stu_gpa , stu_phone , stu_fname FROM student",
        "schema": "CREATE TABLE STUDENT (STU_FNAME TEXT, STU_LNAME TEXT, PROF_NUM NUMBER, STU_DOB TIME, STU_NUM NUMBER, STU_PHONE TEXT, STU_GPA NUMBER); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT);"
      },
      {
        "question": "Order this information from highest GPA to lowest.",
        "query": "SELECT stu_gpa , stu_phone , stu_fname FROM student ORDER BY stu_gpa DESC",
        "schema": "CREATE TABLE DEPARTMENT (DEPT_CODE TEXT); CREATE TABLE STUDENT (STU_GPA NUMBER, PROF_NUM NUMBER, STU_LNAME TEXT, STU_PHONE TEXT, STU_NUM NUMBER, STU_FNAME TEXT, STU_DOB TIME, STU_INIT TEXT);"
      },
      {
        "question": "What is the information for the top 5 GPAs?",
        "query": "SELECT stu_gpa , stu_phone , stu_fname FROM student ORDER BY stu_gpa DESC LIMIT 5",
        "schema": "CREATE TABLE STUDENT (STU_PHONE TEXT, STU_INIT TEXT, PROF_NUM NUMBER, STU_NUM NUMBER, STU_LNAME TEXT, STU_GPA NUMBER, STU_DOB TIME, STU_FNAME TEXT); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT);"
      }
    ],
    [
      {
        "question": "Who is the student with lowest gpa?",
        "query": "SELECT * FROM student ORDER BY stu_gpa LIMIT 1",
        "schema": "CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE CLASS (CLASS_CODE TEXT, PROF_NUM NUMBER); CREATE TABLE ENROLL (STU_NUM NUMBER); CREATE TABLE STUDENT (STU_GPA NUMBER, STU_LNAME TEXT, DEPT_CODE TEXT, STU_CLASS TEXT, STU_FNAME TEXT, STU_DOB TIME, STU_INIT TEXT, PROF_NUM NUMBER, STU_NUM NUMBER); CREATE TABLE PROFESSOR (EMP_NUM NUMBER); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT, EMP_NUM NUMBER);"
      },
      {
        "question": "What is the department name for the student?",
        "query": "SELECT t2.dept_name FROM student AS t1 JOIN department AS t2 ON t1.dept_code = t2.dept_code ORDER BY stu_gpa LIMIT 1",
        "schema": "CREATE TABLE ENROLL (STU_NUM NUMBER); CREATE TABLE CLASS (PROF_NUM NUMBER, CLASS_CODE TEXT, CRS_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT, DEPT_EXTENSION TEXT, EMP_NUM NUMBER, DEPT_NAME TEXT, SCHOOL_CODE TEXT); CREATE TABLE COURSE (CRS_CODE TEXT, DEPT_CODE TEXT); CREATE TABLE PROFESSOR (EMP_NUM NUMBER, DEPT_CODE TEXT); CREATE TABLE STUDENT (STU_GPA NUMBER, STU_INIT TEXT, STU_LNAME TEXT, STU_FNAME TEXT, PROF_NUM NUMBER, STU_DOB TIME, STU_NUM NUMBER, STU_CLASS TEXT, DEPT_CODE TEXT);"
      }
    ],
    [
      {
        "question": "What is the average student GPA?",
        "query": "SELECT avg(stu_gpa) FROM student",
        "schema": "CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE STUDENT (DEPT_CODE TEXT, STU_CLASS TEXT, STU_INIT TEXT, STU_GPA NUMBER, STU_NUM NUMBER, STU_DOB TIME); CREATE TABLE CLASS (CLASS_CODE TEXT, CRS_CODE TEXT); CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_CODE TEXT); CREATE TABLE DEPARTMENT (EMP_NUM NUMBER, DEPT_CODE TEXT);"
      },
      {
        "question": "Find students with a GPA less than that?",
        "query": "SELECT * FROM student WHERE stu_gpa < (SELECT avg(stu_gpa) FROM student)",
        "schema": "CREATE TABLE STUDENT (STU_FNAME TEXT, STU_LNAME TEXT, PROF_NUM NUMBER, STU_NUM NUMBER, STU_GPA NUMBER, DEPT_CODE TEXT, STU_CLASS TEXT, STU_INIT TEXT, STU_DOB TIME); CREATE TABLE CLASS (CLASS_CODE TEXT, CRS_CODE TEXT); CREATE TABLE ENROLL (CLASS_CODE TEXT, STU_NUM NUMBER); CREATE TABLE COURSE (CRS_CODE TEXT, DEPT_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE DEPARTMENT (EMP_NUM NUMBER, DEPT_CODE TEXT);"
      },
      {
        "question": "What are their first names and GPAs?",
        "query": "SELECT stu_fname , stu_gpa FROM student WHERE stu_gpa < (SELECT avg(stu_gpa) FROM student)",
        "schema": "CREATE TABLE CLASS (CRS_CODE TEXT, CLASS_CODE TEXT); CREATE TABLE ENROLL (CLASS_CODE TEXT, STU_NUM NUMBER); CREATE TABLE COURSE (CRS_CODE TEXT, DEPT_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE DEPARTMENT (EMP_NUM NUMBER, DEPT_CODE TEXT); CREATE TABLE STUDENT (STU_INIT TEXT, PROF_NUM NUMBER, DEPT_CODE TEXT, STU_FNAME TEXT, STU_NUM NUMBER, STU_CLASS TEXT, STU_GPA NUMBER, STU_LNAME TEXT, STU_DOB TIME);"
      }
    ],
    [
      {
        "question": "What is the number of students in each department?",
        "query": "SELECT count(*) , dept_code FROM student GROUP BY dept_code",
        "schema": "CREATE TABLE CLASS (PROF_NUM NUMBER, CRS_CODE TEXT, CLASS_CODE TEXT); CREATE TABLE DEPARTMENT (DEPT_ADDRESS TEXT, SCHOOL_CODE TEXT, DEPT_CODE TEXT, DEPT_NAME TEXT, DEPT_EXTENSION TEXT, EMP_NUM NUMBER); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_CODE TEXT); CREATE TABLE STUDENT (STU_CLASS TEXT, STU_DOB TIME, STU_NUM NUMBER, STU_LNAME TEXT, DEPT_CODE TEXT, PROF_NUM NUMBER, STU_INIT TEXT); CREATE TABLE ENROLL (CLASS_CODE TEXT, STU_NUM NUMBER); CREATE TABLE PROFESSOR (DEPT_CODE TEXT);"
      },
      {
        "question": "Which one has the most students?",
        "query": "SELECT * FROM student GROUP BY dept_code ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_CODE TEXT); CREATE TABLE DEPARTMENT (DEPT_ADDRESS TEXT, SCHOOL_CODE TEXT, DEPT_NAME TEXT, EMP_NUM NUMBER, DEPT_CODE TEXT, DEPT_EXTENSION TEXT); CREATE TABLE STUDENT (STU_NUM NUMBER, STU_LNAME TEXT, STU_CLASS TEXT, STU_INIT TEXT, DEPT_CODE TEXT, PROF_NUM NUMBER, STU_DOB TIME); CREATE TABLE ENROLL (STU_NUM NUMBER, CLASS_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE PROFESSOR (DEPT_CODE TEXT); CREATE TABLE CLASS (CRS_CODE TEXT, PROF_NUM NUMBER, CLASS_CODE TEXT);"
      },
      {
        "question": "What is that department's name and address?",
        "query": "SELECT t2.dept_name , t2.dept_address FROM student AS t1 JOIN department AS t2 ON t1.dept_code = t2.dept_code GROUP BY t1.dept_code ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE PROFESSOR (DEPT_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE STUDENT (STU_LNAME TEXT, STU_NUM NUMBER, PROF_NUM NUMBER, STU_DOB TIME, STU_INIT TEXT, DEPT_CODE TEXT, STU_CLASS TEXT); CREATE TABLE COURSE (CRS_CODE TEXT, DEPT_CODE TEXT); CREATE TABLE CLASS (CLASS_CODE TEXT, PROF_NUM NUMBER, CRS_CODE TEXT); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT, DEPT_ADDRESS TEXT, DEPT_NAME TEXT, SCHOOL_CODE TEXT, DEPT_EXTENSION TEXT, EMP_NUM NUMBER); CREATE TABLE ENROLL (STU_NUM NUMBER, CLASS_CODE TEXT);"
      }
    ],
    [
      {
        "question": "What are the names and address for each department?",
        "query": "SELECT dept_name , dept_address FROM department",
        "schema": "CREATE TABLE CLASS (CRS_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER, EMP_FNAME TEXT); CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_CODE TEXT); CREATE TABLE STUDENT (DEPT_CODE TEXT); CREATE TABLE PROFESSOR (DEPT_CODE TEXT); CREATE TABLE DEPARTMENT (DEPT_ADDRESS TEXT, DEPT_CODE TEXT, EMP_NUM NUMBER, SCHOOL_CODE TEXT, DEPT_NAME TEXT);"
      },
      {
        "question": "Also, how many students are in each department?",
        "query": "SELECT t2.dept_name , t2.dept_address , count(*) FROM student AS t1 JOIN department AS t2 ON t1.dept_code = t2.dept_code GROUP BY t1.dept_code",
        "schema": "CREATE TABLE CLASS (CRS_CODE TEXT, CLASS_CODE TEXT, PROF_NUM NUMBER); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER, EMP_FNAME TEXT); CREATE TABLE STUDENT (STU_INIT TEXT, STU_DOB TIME, STU_LNAME TEXT, STU_FNAME TEXT, STU_CLASS TEXT, PROF_NUM NUMBER, DEPT_CODE TEXT, STU_NUM NUMBER, STU_GPA NUMBER); CREATE TABLE ENROLL (CLASS_CODE TEXT); CREATE TABLE PROFESSOR (DEPT_CODE TEXT); CREATE TABLE COURSE (CRS_CODE TEXT, DEPT_CODE TEXT); CREATE TABLE DEPARTMENT (EMP_NUM NUMBER, SCHOOL_CODE TEXT, DEPT_NAME TEXT, DEPT_ADDRESS TEXT, DEPT_CODE TEXT);"
      },
      {
        "question": "Which of that information refers to the top 3 departments ordered by number of students?",
        "query": "SELECT t2.dept_name , t2.dept_address , count(*) FROM student AS t1 JOIN department AS t2 ON t1.dept_code = t2.dept_code GROUP BY t1.dept_code ORDER BY count(*) DESC LIMIT 3",
        "schema": "CREATE TABLE DEPARTMENT (DEPT_NAME TEXT, SCHOOL_CODE TEXT, DEPT_ADDRESS TEXT, DEPT_CODE TEXT, EMP_NUM NUMBER); CREATE TABLE COURSE (CRS_CODE TEXT, DEPT_CODE TEXT); CREATE TABLE STUDENT (STU_NUM NUMBER, PROF_NUM NUMBER, STU_INIT TEXT, STU_DOB TIME, DEPT_CODE TEXT, STU_GPA NUMBER, STU_FNAME TEXT, STU_LNAME TEXT, STU_CLASS TEXT); CREATE TABLE PROFESSOR (DEPT_CODE TEXT); CREATE TABLE CLASS (CLASS_CODE TEXT, CRS_CODE TEXT, PROF_NUM NUMBER); CREATE TABLE ENROLL (CLASS_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_FNAME TEXT, EMP_NUM NUMBER);"
      }
    ],
    [
      {
        "question": "Which professors do have a Ph.D.?",
        "query": "SELECT * FROM professor WHERE prof_high_degree = 'Ph.D.'",
        "schema": "CREATE TABLE CLASS (PROF_NUM NUMBER, CRS_CODE TEXT); CREATE TABLE DEPARTMENT (EMP_NUM NUMBER, DEPT_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_DOB TIME, EMP_INITIAL TEXT, EMP_FNAME TEXT, EMP_JOBCODE TEXT, EMP_HIREDATE TIME, EMP_NUM NUMBER, EMP_LNAME TEXT); CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_CODE TEXT); CREATE TABLE PROFESSOR (PROF_EXTENSION TEXT, PROF_OFFICE TEXT, EMP_NUM NUMBER, DEPT_CODE TEXT, PROF_HIGH_DEGREE TEXT);"
      },
      {
        "question": "Also, which of these are in the history department?",
        "query": "SELECT * FROM professor AS t1 JOIN department AS t2 ON t1.dept_code = t2.dept_code WHERE t2.dept_name = 'History' AND t1.prof_high_degree = 'Ph.D.'",
        "schema": "CREATE TABLE CLASS (CRS_CODE TEXT, PROF_NUM NUMBER, CLASS_CODE TEXT); CREATE TABLE DEPARTMENT (EMP_NUM NUMBER, DEPT_CODE TEXT, DEPT_NAME TEXT, DEPT_ADDRESS TEXT, SCHOOL_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_JOBCODE TEXT, EMP_INITIAL TEXT, EMP_FNAME TEXT, EMP_HIREDATE TIME, EMP_LNAME TEXT, EMP_DOB TIME, EMP_NUM NUMBER); CREATE TABLE PROFESSOR (PROF_OFFICE TEXT, PROF_HIGH_DEGREE TEXT, PROF_EXTENSION TEXT, EMP_NUM NUMBER, DEPT_CODE TEXT); CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_CODE TEXT);"
      },
      {
        "question": "What are their first names and location of their offices?",
        "query": "SELECT t1.emp_fname , t2.prof_office FROM employee AS t1 JOIN professor AS t2 ON t1.emp_num = t2.emp_num JOIN department AS t3 ON t3.dept_code = t2.dept_code WHERE t3.dept_name = 'History' AND t2.prof_high_degree = 'Ph.D.'",
        "schema": "CREATE TABLE EMPLOYEE (EMP_FNAME TEXT, EMP_HIREDATE TIME, EMP_NUM NUMBER, EMP_LNAME TEXT, EMP_JOBCODE TEXT, EMP_INITIAL TEXT, EMP_DOB TIME); CREATE TABLE CLASS (PROF_NUM NUMBER, CRS_CODE TEXT, CLASS_CODE TEXT); CREATE TABLE PROFESSOR (PROF_OFFICE TEXT, DEPT_CODE TEXT, PROF_EXTENSION TEXT, PROF_HIGH_DEGREE TEXT, EMP_NUM NUMBER); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT, DEPT_ADDRESS TEXT, SCHOOL_CODE TEXT, DEPT_NAME TEXT, EMP_NUM NUMBER); CREATE TABLE COURSE (CRS_CODE TEXT, DEPT_CODE TEXT);"
      }
    ],
    [
      {
        "question": "What are the first names of all employees?",
        "query": "SELECT emp_fname FROM employee",
        "schema": "CREATE TABLE CLASS (PROF_NUM NUMBER); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT); CREATE TABLE PROFESSOR (EMP_NUM NUMBER); CREATE TABLE EMPLOYEE (EMP_LNAME TEXT, EMP_FNAME TEXT, EMP_NUM NUMBER, EMP_DOB TIME);"
      },
      {
        "question": "who are teaching some courses?",
        "query": "SELECT t2.emp_fname FROM CLASS AS t1 JOIN employee AS t2 ON t1.prof_num = t2.emp_num",
        "schema": "CREATE TABLE PROFESSOR (DEPT_CODE TEXT, EMP_NUM NUMBER); CREATE TABLE CLASS (PROF_NUM NUMBER, CRS_CODE TEXT); CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER, EMP_DOB TIME, EMP_FNAME TEXT, EMP_HIREDATE TIME, EMP_JOBCODE TEXT, EMP_LNAME TEXT); CREATE TABLE DEPARTMENT (EMP_NUM NUMBER, DEPT_CODE TEXT);"
      },
      {
        "question": "Also, what courses do they teach?",
        "query": "SELECT t2.emp_fname , t1.crs_code FROM CLASS AS t1 JOIN employee AS t2 ON t1.prof_num = t2.emp_num",
        "schema": "CREATE TABLE COURSE (CRS_CODE TEXT, DEPT_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_DOB TIME, EMP_FNAME TEXT, EMP_NUM NUMBER, EMP_LNAME TEXT, EMP_HIREDATE TIME, EMP_JOBCODE TEXT); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT, EMP_NUM NUMBER); CREATE TABLE CLASS (CLASS_CODE TEXT, CRS_CODE TEXT, PROF_NUM NUMBER); CREATE TABLE PROFESSOR (EMP_NUM NUMBER, DEPT_CODE TEXT);"
      }
    ],
    [
      {
        "question": "Find all employees who taught a course?",
        "query": "SELECT * FROM CLASS AS t1 JOIN employee AS t2 ON t1.prof_num = t2.emp_num",
        "schema": "CREATE TABLE PROFESSOR (PROF_HIGH_DEGREE TEXT, EMP_NUM NUMBER, PROF_OFFICE TEXT, DEPT_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_HIREDATE TIME, EMP_INITIAL TEXT, EMP_DOB TIME, EMP_LNAME TEXT, EMP_FNAME TEXT, EMP_JOBCODE TEXT, EMP_NUM NUMBER); CREATE TABLE DEPARTMENT (EMP_NUM NUMBER, DEPT_CODE TEXT); CREATE TABLE CLASS (CLASS_CODE TEXT, CRS_CODE TEXT, PROF_NUM NUMBER); CREATE TABLE COURSE (CRS_CODE TEXT, DEPT_CODE TEXT);"
      },
      {
        "question": "What are their first names?",
        "query": "SELECT t2.emp_fname FROM CLASS AS t1 JOIN employee AS t2 ON t1.prof_num = t2.emp_num",
        "schema": "CREATE TABLE DEPARTMENT (EMP_NUM NUMBER, DEPT_CODE TEXT); CREATE TABLE COURSE (CRS_CODE TEXT, DEPT_CODE TEXT); CREATE TABLE PROFESSOR (PROF_HIGH_DEGREE TEXT, EMP_NUM NUMBER, PROF_OFFICE TEXT, DEPT_CODE TEXT); CREATE TABLE CLASS (CRS_CODE TEXT, CLASS_CODE TEXT, PROF_NUM NUMBER); CREATE TABLE EMPLOYEE (EMP_HIREDATE TIME, EMP_NUM NUMBER, EMP_INITIAL TEXT, EMP_LNAME TEXT, EMP_FNAME TEXT, EMP_DOB TIME, EMP_JOBCODE TEXT);"
      },
      {
        "question": "Also, what are the course descriptions of their classes?",
        "query": "SELECT t2.emp_fname , t3.crs_description FROM CLASS AS t1 JOIN employee AS t2 ON t1.prof_num = t2.emp_num JOIN course AS t3 ON t1.crs_code = t3.crs_code",
        "schema": "CREATE TABLE CLASS (CRS_CODE TEXT, PROF_NUM NUMBER, CLASS_CODE TEXT); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT, EMP_NUM NUMBER); CREATE TABLE EMPLOYEE (EMP_INITIAL TEXT, EMP_HIREDATE TIME, EMP_FNAME TEXT, EMP_JOBCODE TEXT, EMP_DOB TIME, EMP_LNAME TEXT, EMP_NUM NUMBER); CREATE TABLE COURSE (CRS_CODE TEXT, DEPT_CODE TEXT, CRS_DESCRIPTION TEXT); CREATE TABLE PROFESSOR (DEPT_CODE TEXT, PROF_HIGH_DEGREE TEXT, PROF_OFFICE TEXT, EMP_NUM NUMBER);"
      }
    ],
    [
      {
        "question": "Which employees have taught some course?",
        "query": "SELECT * FROM CLASS AS t1 JOIN employee AS t2 ON t1.prof_num = t2.emp_num",
        "schema": "CREATE TABLE EMPLOYEE (EMP_FNAME TEXT, EMP_INITIAL TEXT, EMP_JOBCODE TEXT, EMP_HIREDATE TIME, EMP_DOB TIME, EMP_LNAME TEXT, EMP_NUM NUMBER); CREATE TABLE COURSE (CRS_CODE TEXT, DEPT_CODE TEXT); CREATE TABLE CLASS (PROF_NUM NUMBER, CRS_CODE TEXT, CLASS_CODE TEXT); CREATE TABLE PROFESSOR (EMP_NUM NUMBER, PROF_OFFICE TEXT, DEPT_CODE TEXT); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT, EMP_NUM NUMBER);"
      },
      {
        "question": "What are these courses' descriptions?",
        "query": "SELECT t3.crs_description FROM CLASS AS t1 JOIN employee AS t2 ON t1.prof_num = t2.emp_num JOIN course AS t3 ON t1.crs_code = t3.crs_code",
        "schema": "CREATE TABLE COURSE (CRS_DESCRIPTION TEXT, DEPT_CODE TEXT, CRS_CODE TEXT); CREATE TABLE CLASS (CRS_CODE TEXT, PROF_NUM NUMBER, CLASS_CODE TEXT); CREATE TABLE PROFESSOR (DEPT_CODE TEXT, EMP_NUM NUMBER, PROF_OFFICE TEXT); CREATE TABLE EMPLOYEE (EMP_FNAME TEXT, EMP_DOB TIME, EMP_JOBCODE TEXT, EMP_LNAME TEXT, EMP_INITIAL TEXT, EMP_HIREDATE TIME, EMP_NUM NUMBER); CREATE TABLE DEPARTMENT (EMP_NUM NUMBER, DEPT_CODE TEXT);"
      },
      {
        "question": "Also, what are their office locations and the professors' first names?",
        "query": "SELECT t2.emp_fname , t4.prof_office , t3.crs_description FROM CLASS AS t1 JOIN employee AS t2 ON t1.prof_num = t2.emp_num JOIN course AS t3 ON t1.crs_code = t3.crs_code JOIN professor AS t4 ON t2.emp_num = t4.emp_num",
        "schema": "CREATE TABLE PROFESSOR (PROF_OFFICE TEXT, DEPT_CODE TEXT, EMP_NUM NUMBER); CREATE TABLE COURSE (CRS_DESCRIPTION TEXT, CRS_CODE TEXT, DEPT_CODE TEXT); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT, EMP_NUM NUMBER, DEPT_ADDRESS TEXT); CREATE TABLE EMPLOYEE (EMP_HIREDATE TIME, EMP_DOB TIME, EMP_NUM NUMBER, EMP_FNAME TEXT, EMP_LNAME TEXT, EMP_INITIAL TEXT, EMP_JOBCODE TEXT); CREATE TABLE CLASS (CLASS_CODE TEXT, CRS_CODE TEXT, PROF_NUM NUMBER);"
      }
    ],
    [
      {
        "question": "Tell me all information on lecturers who have taught a course.",
        "query": "SELECT * FROM CLASS AS t1 JOIN employee AS t2 ON t1.prof_num = t2.emp_num",
        "schema": "CREATE TABLE EMPLOYEE (EMP_DOB TIME, EMP_JOBCODE TEXT, EMP_FNAME TEXT, EMP_LNAME TEXT, EMP_INITIAL TEXT, EMP_HIREDATE TIME, EMP_NUM NUMBER); CREATE TABLE CLASS (CLASS_CODE TEXT, PROF_NUM NUMBER, CRS_CODE TEXT); CREATE TABLE DEPARTMENT (EMP_NUM NUMBER, DEPT_CODE TEXT); CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_CODE TEXT); CREATE TABLE PROFESSOR (DEPT_CODE TEXT, EMP_NUM NUMBER, PROF_HIGH_DEGREE TEXT);"
      },
      {
        "question": "What are the corresponding course descriptions?",
        "query": "SELECT t3.crs_description FROM CLASS AS t1 JOIN employee AS t2 ON t1.prof_num = t2.emp_num JOIN course AS t3 ON t1.crs_code = t3.crs_code",
        "schema": "CREATE TABLE PROFESSOR (PROF_OFFICE TEXT, DEPT_CODE TEXT, EMP_NUM NUMBER, PROF_HIGH_DEGREE TEXT); CREATE TABLE CLASS (PROF_NUM NUMBER, CLASS_CODE TEXT, CRS_CODE TEXT); CREATE TABLE DEPARTMENT (EMP_NUM NUMBER, DEPT_CODE TEXT); CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_DESCRIPTION TEXT, CRS_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_HIREDATE TIME, EMP_INITIAL TEXT, EMP_LNAME TEXT, EMP_DOB TIME, EMP_JOBCODE TEXT, EMP_FNAME TEXT, EMP_NUM NUMBER);"
      },
      {
        "question": "Also, what are those professors' first names, office locations, and department name?",
        "query": "SELECT t2.emp_fname , t4.prof_office , t3.crs_description , t5.dept_name FROM CLASS AS t1 JOIN employee AS t2 ON t1.prof_num = t2.emp_num JOIN course AS t3 ON t1.crs_code = t3.crs_code JOIN professor AS t4 ON t2.emp_num = t4.emp_num JOIN department AS t5 ON t4.dept_code = t5.dept_code",
        "schema": "CREATE TABLE CLASS (PROF_NUM NUMBER, CLASS_CODE TEXT, CRS_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_INITIAL TEXT, EMP_JOBCODE TEXT, EMP_DOB TIME, EMP_LNAME TEXT, EMP_FNAME TEXT, EMP_NUM NUMBER, EMP_HIREDATE TIME); CREATE TABLE COURSE (CRS_DESCRIPTION TEXT, CRS_CODE TEXT, DEPT_CODE TEXT); CREATE TABLE PROFESSOR (EMP_NUM NUMBER, DEPT_CODE TEXT, PROF_HIGH_DEGREE TEXT, PROF_OFFICE TEXT); CREATE TABLE DEPARTMENT (DEPT_ADDRESS TEXT, EMP_NUM NUMBER, DEPT_CODE TEXT, DEPT_NAME TEXT);"
      }
    ],
    [
      {
        "question": "What information is there on students who are taking a class?",
        "query": "SELECT * FROM student AS t1 JOIN enroll AS t2 ON t1.stu_num = t2.stu_num",
        "schema": "CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_CODE TEXT); CREATE TABLE ENROLL (STU_NUM NUMBER, CLASS_CODE TEXT); CREATE TABLE STUDENT (DEPT_CODE TEXT, STU_CLASS TEXT, STU_INIT TEXT, PROF_NUM NUMBER, STU_DOB TIME, STU_LNAME TEXT, STU_NUM NUMBER); CREATE TABLE CLASS (CLASS_CODE TEXT, PROF_NUM NUMBER, CRS_CODE TEXT); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT);"
      },
      {
        "question": "What are their first and last names?",
        "query": "SELECT t1.stu_fname , t1.stu_lname FROM student AS t1 JOIN enroll AS t2 ON t1.stu_num = t2.stu_num",
        "schema": "CREATE TABLE DEPARTMENT (DEPT_CODE TEXT); CREATE TABLE STUDENT (DEPT_CODE TEXT, STU_CLASS TEXT, STU_DOB TIME, STU_LNAME TEXT, STU_INIT TEXT, PROF_NUM NUMBER, STU_NUM NUMBER, STU_FNAME TEXT); CREATE TABLE ENROLL (CLASS_CODE TEXT, STU_NUM NUMBER); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE COURSE (CRS_CODE TEXT, DEPT_CODE TEXT); CREATE TABLE CLASS (CRS_CODE TEXT, CLASS_CODE TEXT, PROF_NUM NUMBER);"
      },
      {
        "question": "Also, what are the descriptions for the courses they are taking?",
        "query": "SELECT t1.stu_fname , t1.stu_lname , t4.crs_description FROM student AS t1 JOIN enroll AS t2 ON t1.stu_num = t2.stu_num JOIN CLASS AS t3 ON t2.class_code = t3.class_code JOIN course AS t4 ON t3.crs_code = t4.crs_code",
        "schema": "CREATE TABLE STUDENT (STU_INIT TEXT, PROF_NUM NUMBER, STU_FNAME TEXT, DEPT_CODE TEXT, STU_CLASS TEXT, STU_NUM NUMBER, STU_LNAME TEXT, STU_DOB TIME); CREATE TABLE ENROLL (CLASS_CODE TEXT, STU_NUM NUMBER); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT); CREATE TABLE CLASS (PROF_NUM NUMBER, CLASS_CODE TEXT, CRS_CODE TEXT); CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_DESCRIPTION TEXT, CRS_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER);"
      }
    ],
    [
      {
        "question": "Which students did receive an A in any courses?",
        "query": "SELECT * FROM student AS t1 JOIN enroll AS t2 ON t1.stu_num = t2.stu_num WHERE t2.enroll_grade = 'A'",
        "schema": "CREATE TABLE ENROLL (CLASS_CODE TEXT, STU_NUM NUMBER, ENROLL_GRADE TEXT); CREATE TABLE STUDENT (STU_INIT TEXT, STU_LNAME TEXT, STU_FNAME TEXT, STU_DOB TIME, STU_CLASS TEXT, DEPT_CODE TEXT, STU_GPA NUMBER, STU_NUM NUMBER, PROF_NUM NUMBER); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT); CREATE TABLE COURSE (CRS_CREDIT NUMBER, DEPT_CODE TEXT, CRS_CODE TEXT); CREATE TABLE CLASS (CRS_CODE TEXT, CLASS_CODE TEXT);"
      },
      {
        "question": "Who of them also received a C in any courses?",
        "query": "SELECT * FROM student AS t1 JOIN enroll AS t2 ON t1.stu_num = t2.stu_num WHERE t2.enroll_grade = 'C' OR t2.enroll_grade = 'A'",
        "schema": "CREATE TABLE COURSE (CRS_CREDIT NUMBER, CRS_CODE TEXT, DEPT_CODE TEXT); CREATE TABLE CLASS (CLASS_CODE TEXT, CRS_CODE TEXT); CREATE TABLE STUDENT (STU_NUM NUMBER, STU_INIT TEXT, STU_LNAME TEXT, STU_DOB TIME, STU_GPA NUMBER, STU_FNAME TEXT, DEPT_CODE TEXT, STU_CLASS TEXT, PROF_NUM NUMBER); CREATE TABLE ENROLL (STU_NUM NUMBER, CLASS_CODE TEXT, ENROLL_GRADE TEXT); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT);"
      },
      {
        "question": "What are their' first names and last names?",
        "query": "SELECT t1.stu_fname , t1.stu_lname FROM student AS t1 JOIN enroll AS t2 ON t1.stu_num = t2.stu_num WHERE t2.enroll_grade = 'C' OR t2.enroll_grade = 'A'",
        "schema": "CREATE TABLE DEPARTMENT (DEPT_CODE TEXT); CREATE TABLE CLASS (CLASS_CODE TEXT, CRS_CODE TEXT); CREATE TABLE STUDENT (DEPT_CODE TEXT, STU_LNAME TEXT, STU_GPA NUMBER, STU_NUM NUMBER, STU_DOB TIME, PROF_NUM NUMBER, STU_INIT TEXT, STU_FNAME TEXT, STU_CLASS TEXT); CREATE TABLE ENROLL (ENROLL_GRADE TEXT, STU_NUM NUMBER, CLASS_CODE TEXT); CREATE TABLE COURSE (CRS_CODE TEXT, DEPT_CODE TEXT, CRS_CREDIT NUMBER);"
      }
    ],
    [
      {
        "question": "What are the first names of all professors who are teaching any classes?",
        "query": "SELECT t2.emp_fname FROM CLASS AS t1 JOIN employee AS t2 ON t1.prof_num = t2.emp_num JOIN professor AS t3 ON t2.emp_num = t3.emp_num",
        "schema": "CREATE TABLE PROFESSOR (EMP_NUM NUMBER, DEPT_CODE TEXT, PROF_OFFICE TEXT); CREATE TABLE EMPLOYEE (EMP_DOB TIME, EMP_NUM NUMBER, EMP_INITIAL TEXT, EMP_LNAME TEXT, EMP_JOBCODE TEXT, EMP_HIREDATE TIME, EMP_FNAME TEXT); CREATE TABLE CLASS (CLASS_CODE TEXT, CRS_CODE TEXT, PROF_NUM NUMBER); CREATE TABLE DEPARTMENT (EMP_NUM NUMBER, DEPT_CODE TEXT);"
      },
      {
        "question": "Which of them are from the Accounting department?",
        "query": "SELECT t2.emp_fname FROM CLASS AS t1 JOIN employee AS t2 ON t1.prof_num = t2.emp_num JOIN professor AS t3 ON t2.emp_num = t3.emp_num JOIN department AS t4 ON t4.dept_code = t3.dept_code WHERE t4.dept_name = 'Accounting'",
        "schema": "CREATE TABLE EMPLOYEE (EMP_LNAME TEXT, EMP_HIREDATE TIME, EMP_NUM NUMBER, EMP_JOBCODE TEXT, EMP_INITIAL TEXT, EMP_FNAME TEXT, EMP_DOB TIME); CREATE TABLE DEPARTMENT (DEPT_NAME TEXT, EMP_NUM NUMBER, DEPT_CODE TEXT); CREATE TABLE PROFESSOR (EMP_NUM NUMBER, DEPT_CODE TEXT, PROF_OFFICE TEXT); CREATE TABLE CLASS (CRS_CODE TEXT, CLASS_CODE TEXT, PROF_NUM NUMBER);"
      },
      {
        "question": "Also, what classrooms do they teach in?",
        "query": "SELECT t2.emp_fname , t1.class_room FROM CLASS AS t1 JOIN employee AS t2 ON t1.prof_num = t2.emp_num JOIN professor AS t3 ON t2.emp_num = t3.emp_num JOIN department AS t4 ON t4.dept_code = t3.dept_code WHERE t4.dept_name = 'Accounting'",
        "schema": "CREATE TABLE EMPLOYEE (EMP_JOBCODE TEXT, EMP_DOB TIME, EMP_LNAME TEXT, EMP_NUM NUMBER, EMP_FNAME TEXT, EMP_HIREDATE TIME, EMP_INITIAL TEXT); CREATE TABLE DEPARTMENT (DEPT_NAME TEXT, EMP_NUM NUMBER, DEPT_CODE TEXT); CREATE TABLE CLASS (CLASS_ROOM TEXT, CRS_CODE TEXT, CLASS_TIME TEXT, PROF_NUM NUMBER, CLASS_CODE TEXT); CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_CODE TEXT); CREATE TABLE PROFESSOR (DEPT_CODE TEXT, PROF_OFFICE TEXT, EMP_NUM NUMBER);"
      }
    ],
    [
      {
        "question": "Which professors are teaching some classes?",
        "query": "SELECT * FROM CLASS AS t1 JOIN employee AS t2 ON t1.prof_num = t2.emp_num JOIN professor AS t3 ON t2.emp_num = t3.emp_num",
        "schema": "CREATE TABLE PROFESSOR (PROF_OFFICE TEXT, DEPT_CODE TEXT, PROF_HIGH_DEGREE TEXT, PROF_EXTENSION TEXT, EMP_NUM NUMBER); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT, EMP_NUM NUMBER); CREATE TABLE STUDENT (STU_CLASS TEXT); CREATE TABLE EMPLOYEE (EMP_FNAME TEXT, EMP_HIREDATE TIME, EMP_NUM NUMBER, EMP_LNAME TEXT, EMP_DOB TIME, EMP_JOBCODE TEXT); CREATE TABLE COURSE (CRS_CODE TEXT); CREATE TABLE CLASS (PROF_NUM NUMBER, CRS_CODE TEXT, CLASS_CODE TEXT);"
      },
      {
        "question": "Which of them are from the Computer Information Systems department?",
        "query": "SELECT * FROM CLASS AS t1 JOIN employee AS t2 ON t1.prof_num = t2.emp_num JOIN professor AS t3 ON t2.emp_num = t3.emp_num JOIN department AS t4 ON t4.dept_code = t3.dept_code WHERE t4.dept_name = 'Computer Info. Systems'",
        "schema": "CREATE TABLE COURSE (CRS_CODE TEXT); CREATE TABLE STUDENT (STU_CLASS TEXT); CREATE TABLE DEPARTMENT (DEPT_NAME TEXT, DEPT_CODE TEXT, EMP_NUM NUMBER); CREATE TABLE EMPLOYEE (EMP_HIREDATE TIME, EMP_JOBCODE TEXT, EMP_FNAME TEXT, EMP_LNAME TEXT, EMP_DOB TIME, EMP_NUM NUMBER); CREATE TABLE CLASS (CLASS_CODE TEXT, PROF_NUM NUMBER, CRS_CODE TEXT); CREATE TABLE PROFESSOR (PROF_HIGH_DEGREE TEXT, DEPT_CODE TEXT, EMP_NUM NUMBER, PROF_OFFICE TEXT, PROF_EXTENSION TEXT);"
      },
      {
        "question": "What are their first names and highest degrees?",
        "query": "SELECT DISTINCT t2.emp_fname , t3.prof_high_degree FROM CLASS AS t1 JOIN employee AS t2 ON t1.prof_num = t2.emp_num JOIN professor AS t3 ON t2.emp_num = t3.emp_num JOIN department AS t4 ON t4.dept_code = t3.dept_code WHERE t4.dept_name = 'Computer Info. Systems'",
        "schema": "CREATE TABLE COURSE (CRS_CODE TEXT); CREATE TABLE DEPARTMENT (EMP_NUM NUMBER, DEPT_NAME TEXT, DEPT_CODE TEXT); CREATE TABLE STUDENT (DEPT_CODE TEXT, STU_CLASS TEXT, STU_GPA NUMBER); CREATE TABLE EMPLOYEE (EMP_HIREDATE TIME, EMP_INITIAL TEXT, EMP_FNAME TEXT, EMP_DOB TIME, EMP_LNAME TEXT, EMP_NUM NUMBER, EMP_JOBCODE TEXT); CREATE TABLE CLASS (PROF_NUM NUMBER, CLASS_CODE TEXT, CRS_CODE TEXT); CREATE TABLE PROFESSOR (PROF_EXTENSION TEXT, EMP_NUM NUMBER, DEPT_CODE TEXT, PROF_OFFICE TEXT, PROF_HIGH_DEGREE TEXT);"
      }
    ],
    [
      {
        "question": "What are the last names of all students?",
        "query": "SELECT stu_lname FROM student",
        "schema": "CREATE TABLE STUDENT (STU_FNAME TEXT, STU_DOB TIME, STU_NUM NUMBER, STU_LNAME TEXT); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT);"
      },
      {
        "question": "Which of those refer to students who received a grade of A in some classes?",
        "query": "SELECT t1.stu_lname FROM student AS t1 JOIN enroll AS t2 ON t1.stu_num = t2.stu_num WHERE t2.enroll_grade = 'A'",
        "schema": "CREATE TABLE CLASS (PROF_NUM NUMBER, CLASS_CODE TEXT, CRS_CODE TEXT); CREATE TABLE STUDENT (STU_CLASS TEXT, STU_NUM NUMBER, STU_FNAME TEXT, STU_LNAME TEXT, PROF_NUM NUMBER, STU_INIT TEXT, STU_GPA NUMBER, STU_DOB TIME); CREATE TABLE ENROLL (CLASS_CODE TEXT, ENROLL_GRADE TEXT, STU_NUM NUMBER); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT); CREATE TABLE COURSE (CRS_CODE TEXT);"
      },
      {
        "question": "Of those, who is enrolled in 10018?",
        "query": "SELECT t1.stu_lname FROM student AS t1 JOIN enroll AS t2 ON t1.stu_num = t2.stu_num WHERE t2.enroll_grade = 'A' AND t2.class_code = 10018",
        "schema": "CREATE TABLE CLASS (CLASS_CODE TEXT, CRS_CODE TEXT, PROF_NUM NUMBER); CREATE TABLE STUDENT (STU_GPA NUMBER, STU_LNAME TEXT, STU_FNAME TEXT, STU_INIT TEXT, STU_DOB TIME, STU_CLASS TEXT, PROF_NUM NUMBER, STU_NUM NUMBER); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT); CREATE TABLE ENROLL (CLASS_CODE TEXT, ENROLL_GRADE TEXT, STU_NUM NUMBER); CREATE TABLE COURSE (CRS_CODE TEXT);"
      }
    ],
    [
      {
        "question": "What are the first names of all professors?",
        "query": "SELECT emp_fname FROM professor AS t1 JOIN employee AS t2 ON t1.emp_num = t2.emp_num",
        "schema": "CREATE TABLE PROFESSOR (EMP_NUM NUMBER, DEPT_CODE TEXT); CREATE TABLE CLASS (PROF_NUM NUMBER); CREATE TABLE EMPLOYEE (EMP_DOB TIME, EMP_FNAME TEXT, EMP_NUM NUMBER, EMP_LNAME TEXT); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT);"
      },
      {
        "question": "Which of those are in the History department?",
        "query": "SELECT t2.emp_fname , t1.prof_office FROM professor AS t1 JOIN employee AS t2 ON t1.emp_num = t2.emp_num JOIN department AS t3 ON t1.dept_code = t3.dept_code WHERE t3.dept_name = 'History'",
        "schema": "CREATE TABLE EMPLOYEE (EMP_LNAME TEXT, EMP_NUM NUMBER, EMP_HIREDATE TIME, EMP_DOB TIME, EMP_FNAME TEXT); CREATE TABLE PROFESSOR (EMP_NUM NUMBER, DEPT_CODE TEXT, PROF_OFFICE TEXT); CREATE TABLE DEPARTMENT (DEPT_NAME TEXT, DEPT_ADDRESS TEXT, EMP_NUM NUMBER, DEPT_CODE TEXT); CREATE TABLE CLASS (PROF_NUM NUMBER);"
      },
      {
        "question": "Of those, who does not have a Ph.D.?",
        "query": "SELECT t2.emp_fname , t1.prof_office FROM professor AS t1 JOIN employee AS t2 ON t1.emp_num = t2.emp_num JOIN department AS t3 ON t1.dept_code = t3.dept_code WHERE t3.dept_name = 'History' AND t1.prof_high_degree ! = 'Ph.D.'",
        "schema": "CREATE TABLE DEPARTMENT (EMP_NUM NUMBER, DEPT_ADDRESS TEXT, DEPT_CODE TEXT, DEPT_NAME TEXT); CREATE TABLE PROFESSOR (DEPT_CODE TEXT, EMP_NUM NUMBER, PROF_HIGH_DEGREE TEXT, PROF_OFFICE TEXT); CREATE TABLE CLASS (PROF_NUM NUMBER); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER, EMP_FNAME TEXT, EMP_HIREDATE TIME, EMP_LNAME TEXT, EMP_DOB TIME);"
      }
    ],
    [
      {
        "question": "Find the first names of all professors?",
        "query": "SELECT emp_fname FROM professor AS t1 JOIN employee AS t2 ON t1.emp_num = t2.emp_num",
        "schema": "CREATE TABLE CLASS (PROF_NUM NUMBER); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT); CREATE TABLE PROFESSOR (DEPT_CODE TEXT, EMP_NUM NUMBER); CREATE TABLE EMPLOYEE (EMP_FNAME TEXT, EMP_NUM NUMBER, EMP_DOB TIME, EMP_LNAME TEXT);"
      },
      {
        "question": "Which of those teach more than one class?",
        "query": "SELECT t2.emp_fname FROM CLASS AS t1 JOIN employee AS t2 ON t1.prof_num = t2.emp_num GROUP BY t1.prof_num HAVING count(*) > 1",
        "schema": "CREATE TABLE CLASS (CLASS_CODE TEXT, PROF_NUM NUMBER, CRS_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_FNAME TEXT, EMP_NUM NUMBER, EMP_LNAME TEXT, EMP_HIREDATE TIME, EMP_JOBCODE TEXT, EMP_DOB TIME); CREATE TABLE PROFESSOR (PROF_OFFICE TEXT, EMP_NUM NUMBER, DEPT_CODE TEXT); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT, EMP_NUM NUMBER);"
      }
    ],
    [
      {
        "question": "How many courses is each student enrolled in?",
        "query": "SELECT count(*) , t1.stu_num FROM student AS t1 JOIN enroll AS t2 ON t1.stu_num = t2.stu_num GROUP BY t1.stu_num",
        "schema": "CREATE TABLE CLASS (CRS_CODE TEXT, CLASS_CODE TEXT); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT); CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_CODE TEXT); CREATE TABLE ENROLL (STU_NUM NUMBER, CLASS_CODE TEXT, ENROLL_GRADE TEXT); CREATE TABLE STUDENT (STU_NUM NUMBER, STU_INIT TEXT, STU_DOB TIME, STU_LNAME TEXT, STU_CLASS TEXT, DEPT_CODE TEXT);"
      },
      {
        "question": "Which students are enrolled in only one?",
        "query": "SELECT * FROM student AS t1 JOIN enroll AS t2 ON t1.stu_num = t2.stu_num GROUP BY t2.stu_num HAVING count(*) = 1",
        "schema": "CREATE TABLE CLASS (CRS_CODE TEXT, CLASS_CODE TEXT); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT); CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_CODE TEXT); CREATE TABLE ENROLL (CLASS_CODE TEXT, ENROLL_GRADE TEXT, STU_NUM NUMBER); CREATE TABLE STUDENT (PROF_NUM NUMBER, STU_LNAME TEXT, STU_CLASS TEXT, STU_NUM NUMBER, DEPT_CODE TEXT, STU_FNAME TEXT, STU_INIT TEXT, STU_DOB TIME);"
      },
      {
        "question": "What are their first names?",
        "query": "SELECT t1.stu_fname FROM student AS t1 JOIN enroll AS t2 ON t1.stu_num = t2.stu_num GROUP BY t2.stu_num HAVING count(*) = 1",
        "schema": "CREATE TABLE ENROLL (ENROLL_GRADE TEXT, STU_NUM NUMBER, CLASS_CODE TEXT); CREATE TABLE CLASS (CLASS_CODE TEXT, CRS_CODE TEXT); CREATE TABLE STUDENT (STU_LNAME TEXT, STU_INIT TEXT, PROF_NUM NUMBER, DEPT_CODE TEXT, STU_FNAME TEXT, STU_CLASS TEXT, STU_DOB TIME, STU_NUM NUMBER); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT); CREATE TABLE COURSE (CRS_CODE TEXT, DEPT_CODE TEXT);"
      }
    ],
    [
      {
        "question": "Which courses have a description including the word \"Statistics\"?",
        "query": "SELECT * FROM course WHERE crs_description LIKE '%Statistics%'",
        "schema": "CREATE TABLE COURSE (CRS_DESCRIPTION TEXT, DEPT_CODE TEXT, CRS_CODE TEXT); CREATE TABLE DEPARTMENT (DEPT_NAME TEXT, SCHOOL_CODE TEXT, DEPT_CODE TEXT); CREATE TABLE CLASS (CRS_CODE TEXT);"
      },
      {
        "question": "What is the name of the departments those courses are in?",
        "query": "SELECT t2.dept_name FROM course AS t1 JOIN department AS t2 ON t1.dept_code = t2.dept_code WHERE t1.crs_description LIKE '%Statistics%'",
        "schema": "CREATE TABLE COURSE (CRS_DESCRIPTION TEXT, DEPT_CODE TEXT, CRS_CODE TEXT); CREATE TABLE DEPARTMENT (SCHOOL_CODE TEXT, EMP_NUM NUMBER, DEPT_NAME TEXT, DEPT_ADDRESS TEXT, DEPT_CODE TEXT); CREATE TABLE CLASS (CRS_CODE TEXT);"
      }
    ],
    [
      {
        "question": "What information is on students whose name starts with 'S'?",
        "query": "SELECT * FROM student WHERE stu_lname LIKE 'S%'",
        "schema": "CREATE TABLE DEPARTMENT (DEPT_CODE TEXT, DEPT_NAME TEXT); CREATE TABLE STUDENT (PROF_NUM NUMBER, STU_FNAME TEXT, STU_DOB TIME, STU_LNAME TEXT, STU_NUM NUMBER, STU_INIT TEXT);"
      },
      {
        "question": "Which of them took course ACCT-211?",
        "query": "SELECT * FROM student AS t1 JOIN enroll AS t2 ON t1.stu_num = t2.stu_num JOIN CLASS AS t3 ON t2.class_code = t3.class_code WHERE t3.crs_code = 'ACCT-211' AND t1.stu_lname LIKE 'S%'",
        "schema": "CREATE TABLE COURSE (CRS_CODE TEXT, DEPT_CODE TEXT); CREATE TABLE ENROLL (STU_NUM NUMBER, CLASS_CODE TEXT); CREATE TABLE CLASS (CRS_CODE TEXT, CLASS_CODE TEXT); CREATE TABLE DEPARTMENT (DEPT_NAME TEXT, DEPT_CODE TEXT); CREATE TABLE STUDENT (STU_NUM NUMBER, PROF_NUM NUMBER, STU_FNAME TEXT, STU_LNAME TEXT, STU_DOB TIME, STU_CLASS TEXT, DEPT_CODE TEXT, STU_INIT TEXT);"
      },
      {
        "question": "What are their first names?",
        "query": "SELECT t1.stu_fname FROM student AS t1 JOIN enroll AS t2 ON t1.stu_num = t2.stu_num JOIN CLASS AS t3 ON t2.class_code = t3.class_code WHERE t3.crs_code = 'ACCT-211' AND t1.stu_lname LIKE 'S%'",
        "schema": "CREATE TABLE ENROLL (STU_NUM NUMBER, CLASS_CODE TEXT); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT, DEPT_NAME TEXT); CREATE TABLE COURSE (CRS_CODE TEXT, DEPT_CODE TEXT); CREATE TABLE CLASS (CLASS_CODE TEXT, CRS_CODE TEXT); CREATE TABLE STUDENT (STU_FNAME TEXT, STU_INIT TEXT, STU_CLASS TEXT, STU_LNAME TEXT, DEPT_CODE TEXT, STU_DOB TIME, STU_NUM NUMBER, PROF_NUM NUMBER);"
      }
    ]
  ],
  "inn_1": [
    [
      {
        "question": "Find all the modern rooms.",
        "query": "SELECT * FROM rooms WHERE decor = 'modern'",
        "schema": "CREATE TABLE Rooms (decor TEXT, maxOccupancy NUMBER, roomName TEXT, RoomId TEXT); CREATE TABLE Reservations (Room TEXT);"
      },
      {
        "question": "Of those, which have a base price lower than $160 and two beds? Return the room names.",
        "query": "SELECT roomname FROM rooms WHERE baseprice < 160 AND beds = 2 AND decor = 'modern';",
        "schema": "CREATE TABLE Reservations (Room TEXT); CREATE TABLE Rooms (maxOccupancy NUMBER, basePrice NUMBER, decor TEXT, beds NUMBER, roomName TEXT, RoomId TEXT, bedType TEXT);"
      }
    ],
    [
      {
        "question": "Find all the rooms whose price is above 160.",
        "query": "SELECT * FROM rooms WHERE baseprice > 160",
        "schema": "CREATE TABLE Rooms (roomName TEXT, RoomId TEXT, basePrice NUMBER); CREATE TABLE Reservations (Room TEXT);"
      },
      {
        "question": "Of those, which rooms can accommodate more than two people?",
        "query": "SELECT * FROM rooms WHERE baseprice > 160 AND maxoccupancy > 2;",
        "schema": "CREATE TABLE Rooms (RoomId TEXT, basePrice NUMBER, maxOccupancy NUMBER, roomName TEXT); CREATE TABLE Reservations (Room TEXT);"
      },
      {
        "question": "Give me the name and id of those rooms.",
        "query": "SELECT roomname , roomid FROM rooms WHERE baseprice > 160 AND maxoccupancy > 2;",
        "schema": "CREATE TABLE Rooms (RoomId TEXT, roomName TEXT, maxOccupancy NUMBER, basePrice NUMBER); CREATE TABLE Reservations (Room TEXT);"
      }
    ],
    [
      {
        "question": "How many reservations were made for each room?",
        "query": "SELECT count(*) FROM reservations GROUP BY room",
        "schema": "CREATE TABLE Rooms (roomName TEXT, RoomId TEXT); CREATE TABLE Reservations (FirstName TEXT, LastName TEXT, Room TEXT, Code NUMBER, CheckOut TEXT);"
      },
      {
        "question": "Which room has the largest number of reservations?",
        "query": "SELECT * FROM reservations GROUP BY room ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Reservations (LastName TEXT, FirstName TEXT, Code NUMBER, Room TEXT, CheckOut TEXT); CREATE TABLE Rooms (RoomId TEXT, roomName TEXT);"
      },
      {
        "question": "Tell me the name of that room.",
        "query": "SELECT t2.roomname FROM reservations AS t1 JOIN rooms AS t2 ON t1.room = t2.roomid GROUP BY t1.room ORDER BY count(*) DESC LIMIT 1;",
        "schema": "CREATE TABLE Reservations (FirstName TEXT, Room TEXT, CheckOut TEXT, LastName TEXT, Code NUMBER); CREATE TABLE Rooms (roomName TEXT, RoomId TEXT);"
      }
    ],
    [
      {
        "question": "Find the reservations made by a person called ROY SWEAZ",
        "query": "SELECT * FROM reservations WHERE firstname = \"ROY\" AND lastname = \"SWEAZY\";",
        "schema": "CREATE TABLE Reservations (FirstName TEXT, LastName TEXT, Code NUMBER);"
      },
      {
        "question": "How many kids stay in the rooms reserved by this person?",
        "query": "SELECT kids FROM reservations WHERE firstname = \"ROY\" AND lastname = \"SWEAZY\";",
        "schema": "CREATE TABLE Reservations (LastName TEXT, Kids NUMBER, Adults NUMBER, Room TEXT, FirstName TEXT, Code NUMBER); CREATE TABLE Rooms (roomName TEXT, RoomId TEXT);"
      }
    ],
    [
      {
        "question": "Find the reservations made by a person called ROY SWEAZ",
        "query": "SELECT * FROM reservations WHERE firstname = \"ROY\" AND lastname = \"SWEAZY\";",
        "schema": "CREATE TABLE Reservations (Code NUMBER, LastName TEXT, FirstName TEXT);"
      },
      {
        "question": "Count the number of times ROY SWEAZY has made reservations.",
        "query": "SELECT count(*) FROM reservations WHERE firstname = \"ROY\" AND lastname = \"SWEAZY\";",
        "schema": "CREATE TABLE Reservations (LastName TEXT, Code NUMBER, FirstName TEXT);"
      }
    ],
    [
      {
        "question": "Find the room with the highest rate.",
        "query": "SELECT * FROM reservations GROUP BY room ORDER BY rate DESC LIMIT 1;",
        "schema": "CREATE TABLE Rooms (basePrice NUMBER, roomName TEXT, RoomId TEXT, maxOccupancy NUMBER); CREATE TABLE Reservations (Rate NUMBER, Room TEXT);"
      },
      {
        "question": "What are the name, rate, check in and check out date of this room?",
        "query": "SELECT t2.roomname , t1.rate , t1.checkin , t1.checkout FROM reservations AS t1 JOIN rooms AS t2 ON t1.room = t2.roomid GROUP BY t1.room ORDER BY t1.rate DESC LIMIT 1;",
        "schema": "CREATE TABLE Rooms (basePrice NUMBER, RoomId TEXT, maxOccupancy NUMBER, roomName TEXT); CREATE TABLE Reservations (CheckIn TEXT, LastName TEXT, CheckOut TEXT, Room TEXT, Rate NUMBER);"
      }
    ],
    [
      {
        "question": "Which reservations were made by CONRAD SELBIG?",
        "query": "SELECT * FROM reservations WHERE firstname = \"CONRAD\" AND lastname = \"SELBIG\";",
        "schema": "CREATE TABLE Reservations (FirstName TEXT, LastName TEXT, Code NUMBER);"
      },
      {
        "question": "Which one has check in date Oct 23, 2010?",
        "query": "SELECT * FROM reservations WHERE checkin = \"2010-10-23\" AND firstname = \"CONRAD\" AND lastname = \"SELBIG\";",
        "schema": "CREATE TABLE Reservations (CheckIn TEXT, FirstName TEXT, LastName TEXT, CheckOut TEXT, Code NUMBER);"
      },
      {
        "question": "Find the number of adults for this reservation.",
        "query": "SELECT adults FROM reservations WHERE checkin = \"2010-10-23\" AND firstname = \"CONRAD\" AND lastname = \"SELBIG\";",
        "schema": "CREATE TABLE Reservations (CheckIn TEXT, LastName TEXT, Kids NUMBER, Code NUMBER, Adults NUMBER, FirstName TEXT, CheckOut TEXT);"
      }
    ],
    [
      {
        "question": "Which reservations were made by DAMIEN TRACHSEL?",
        "query": "SELECT * FROM reservations WHERE firstname = \"DAMIEN\" AND lastname = \"TRACHSEL\";",
        "schema": "CREATE TABLE Reservations (Code NUMBER, FirstName TEXT, LastName TEXT); CREATE TABLE Rooms (RoomId TEXT);"
      },
      {
        "question": "Which one has check in date Sep 21, 2010?",
        "query": "SELECT * FROM reservations WHERE checkin = \"2010-09-21\" AND firstname = \"DAMIEN\" AND lastname = \"TRACHSEL\";",
        "schema": "CREATE TABLE Reservations (LastName TEXT, CheckIn TEXT, FirstName TEXT, CheckOut TEXT, Code NUMBER); CREATE TABLE Rooms (RoomId TEXT);"
      },
      {
        "question": "Find the number of kids for this reservation.",
        "query": "SELECT kids FROM reservations WHERE checkin = \"2010-09-21\" AND firstname = \"DAMIEN\" AND lastname = \"TRACHSEL\";",
        "schema": "CREATE TABLE Rooms (RoomId TEXT); CREATE TABLE Reservations (Adults NUMBER, Code NUMBER, Kids NUMBER, FirstName TEXT, LastName TEXT, CheckIn TEXT, CheckOut TEXT);"
      }
    ],
    [
      {
        "question": "Return all the rooms with king beds.",
        "query": "SELECT * FROM rooms WHERE bedtype = 'King';",
        "schema": "CREATE TABLE Rooms (maxOccupancy NUMBER, RoomId TEXT, bedType TEXT, decor TEXT, beds NUMBER);"
      },
      {
        "question": "What is the total number of king beds?",
        "query": "SELECT sum(beds) FROM rooms WHERE bedtype = 'King';",
        "schema": "CREATE TABLE Rooms (bedType TEXT, maxOccupancy NUMBER, decor TEXT, RoomId TEXT, beds NUMBER);"
      }
    ],
    [
      {
        "question": "Return all the rooms with king beds.",
        "query": "SELECT * FROM rooms WHERE bedtype = 'King'",
        "schema": "CREATE TABLE Rooms (beds NUMBER, decor TEXT, RoomId TEXT, bedType TEXT);"
      },
      {
        "question": "What are the names and decor of these rooms?",
        "query": "SELECT roomname , decor FROM rooms WHERE bedtype = 'King'",
        "schema": "CREATE TABLE Rooms (bedType TEXT, decor TEXT, RoomId TEXT, roomName TEXT, beds NUMBER);"
      },
      {
        "question": "Sort the list by the room base price.",
        "query": "SELECT roomname , decor FROM rooms WHERE bedtype = 'King' ORDER BY baseprice;",
        "schema": "CREATE TABLE Rooms (roomName TEXT, beds NUMBER, RoomId TEXT, bedType TEXT, decor TEXT, basePrice NUMBER);"
      }
    ],
    [
      {
        "question": "What is the base price of each room?",
        "query": "SELECT baseprice FROM rooms",
        "schema": "CREATE TABLE Rooms (roomName TEXT, basePrice NUMBER, decor TEXT, maxOccupancy NUMBER, RoomId TEXT); CREATE TABLE Reservations (Room TEXT, Code NUMBER);"
      },
      {
        "question": "Order the rooms by their base price.",
        "query": "SELECT * FROM rooms ORDER BY baseprice ASC",
        "schema": "CREATE TABLE Rooms (roomName TEXT, maxOccupancy NUMBER, basePrice NUMBER, decor TEXT, RoomId TEXT); CREATE TABLE Reservations (Code NUMBER, Room TEXT);"
      },
      {
        "question": "Report the room name and base price of the cheapest room.",
        "query": "SELECT roomname , baseprice FROM rooms ORDER BY baseprice ASC LIMIT 1;",
        "schema": "CREATE TABLE Rooms (decor TEXT, RoomId TEXT, roomName TEXT, maxOccupancy NUMBER, basePrice NUMBER); CREATE TABLE Reservations (Code NUMBER, Room TEXT);"
      }
    ],
    [
      {
        "question": "Find the room with name \"Recluse and defiance\".",
        "query": "SELECT * FROM rooms WHERE roomname = \"Recluse and defiance\";",
        "schema": "CREATE TABLE Reservations (Room TEXT); CREATE TABLE Rooms (RoomId TEXT, roomName TEXT, maxOccupancy NUMBER, decor TEXT);"
      },
      {
        "question": "What is its decor?",
        "query": "SELECT decor FROM rooms WHERE roomname = \"Recluse and defiance\";",
        "schema": "CREATE TABLE Reservations (Room TEXT); CREATE TABLE Rooms (maxOccupancy NUMBER, RoomId TEXT, decor TEXT, roomName TEXT);"
      }
    ],
    [
      {
        "question": "Group all the rooms by the bed type.",
        "query": "SELECT * FROM rooms GROUP BY bedtype;",
        "schema": "CREATE TABLE Rooms (beds NUMBER, bedType TEXT, RoomId TEXT, maxOccupancy NUMBER);"
      },
      {
        "question": "For each bed type, find the average base price of different bed type.",
        "query": "SELECT bedtype , avg(baseprice) FROM rooms GROUP BY bedtype;",
        "schema": "CREATE TABLE Rooms (bedType TEXT, beds NUMBER, RoomId TEXT, maxOccupancy NUMBER, basePrice NUMBER);"
      }
    ],
    [
      {
        "question": "For each modern room, find the maximum number of people who can stay in.",
        "query": "SELECT maxoccupancy FROM rooms WHERE decor = 'modern';",
        "schema": "CREATE TABLE Reservations (Room TEXT); CREATE TABLE Rooms (RoomId TEXT, bedType TEXT, decor TEXT, maxOccupancy NUMBER, basePrice NUMBER, roomName TEXT, beds NUMBER);"
      },
      {
        "question": "What is the total number of people who can stay in the modern rooms of this inn?",
        "query": "SELECT sum(maxoccupancy) FROM rooms WHERE decor = 'modern';",
        "schema": "CREATE TABLE Rooms (RoomId TEXT, decor TEXT, roomName TEXT, maxOccupancy NUMBER, basePrice NUMBER, beds NUMBER, bedType TEXT); CREATE TABLE Reservations (Room TEXT);"
      }
    ],
    [
      {
        "question": "Find the decor of each room",
        "query": "SELECT decor FROM rooms",
        "schema": "CREATE TABLE Rooms (RoomId TEXT, roomName TEXT, decor TEXT, beds NUMBER); CREATE TABLE Reservations (Room TEXT);"
      },
      {
        "question": "For each type of decor, how many reservations were made?",
        "query": "SELECT count(t2.decor) FROM reservations AS t1 JOIN rooms AS t2 ON t1.room = t2.roomid GROUP BY t2.decor",
        "schema": "CREATE TABLE Reservations (Room TEXT, Code NUMBER); CREATE TABLE Rooms (decor TEXT, beds NUMBER, roomName TEXT, RoomId TEXT);"
      },
      {
        "question": "Which decor is the least popular?",
        "query": "SELECT t2.decor FROM reservations AS t1 JOIN rooms AS t2 ON t1.room = t2.roomid GROUP BY t2.decor ORDER BY count(t2.decor) ASC LIMIT 1;",
        "schema": "CREATE TABLE Rooms (decor TEXT, beds NUMBER, RoomId TEXT, roomName TEXT); CREATE TABLE Reservations (Code NUMBER, Room TEXT);"
      }
    ],
    [
      {
        "question": "What is the maximum capacity of each room?",
        "query": "SELECT maxoccupancy FROM rooms",
        "schema": "CREATE TABLE Reservations (Room TEXT); CREATE TABLE Rooms (roomName TEXT, maxOccupancy NUMBER, RoomId TEXT);"
      },
      {
        "question": "What is the number of people who actually stayed for each room reservation? The number of people include adults and kids.",
        "query": "SELECT t1.adults + t1.kids FROM reservations AS t1",
        "schema": "CREATE TABLE Rooms (RoomId TEXT, roomName TEXT, maxOccupancy NUMBER); CREATE TABLE Reservations (Adults NUMBER, Room TEXT, LastName TEXT, Code NUMBER, Kids NUMBER);"
      },
      {
        "question": "How many times the number reached the maximum capacity?",
        "query": "SELECT count(*) FROM reservations AS t1 JOIN rooms AS t2 ON t1.room = t2.roomid WHERE t2.maxoccupancy = t1.adults + t1.kids;",
        "schema": "CREATE TABLE Rooms (maxOccupancy NUMBER, RoomId TEXT, roomName TEXT); CREATE TABLE Reservations (Kids NUMBER, Code NUMBER, Adults NUMBER, LastName TEXT, Room TEXT);"
      }
    ],
    [
      {
        "question": "For each reservation, find the base price and the actual rate payed.",
        "query": "SELECT t1.rate , t2.baseprice FROM reservations AS t1 JOIN rooms AS t2 ON t1.room = t2.roomid",
        "schema": "CREATE TABLE Reservations (LastName TEXT, Room TEXT, Rate NUMBER, Code NUMBER); CREATE TABLE Rooms (RoomId TEXT, basePrice NUMBER);"
      },
      {
        "question": "How many times did the actual price exceeded the base price?",
        "query": "SELECT count(*) FROM reservations AS t1 JOIN rooms AS t2 ON t1.room = t2.roomid WHERE t1.rate - t2.baseprice > 0",
        "schema": "CREATE TABLE Reservations (Rate NUMBER, Room TEXT, Code NUMBER, LastName TEXT); CREATE TABLE Rooms (RoomId TEXT, basePrice NUMBER);"
      },
      {
        "question": "What are the first and last names of people who payed more than the rooms' base prices?",
        "query": "SELECT t1.firstname , t1.lastname FROM reservations AS t1 JOIN rooms AS t2 ON t1.room = t2.roomid WHERE t1.rate - t2.baseprice > 0",
        "schema": "CREATE TABLE Reservations (Room TEXT, Rate NUMBER, Code NUMBER, FirstName TEXT, LastName TEXT); CREATE TABLE Rooms (roomName TEXT, RoomId TEXT, basePrice NUMBER);"
      }
    ],
    [
      {
        "question": "List all the rooms.",
        "query": "SELECT * FROM rooms;",
        "schema": "CREATE TABLE Reservations (Room TEXT); CREATE TABLE Rooms (decor TEXT, RoomId TEXT, roomName TEXT, bedType TEXT, beds NUMBER, maxOccupancy NUMBER);"
      },
      {
        "question": "Count the number of rooms.",
        "query": "SELECT count(*) FROM rooms;",
        "schema": "CREATE TABLE Rooms (roomName TEXT, beds NUMBER, maxOccupancy NUMBER, RoomId TEXT, decor TEXT, bedType TEXT); CREATE TABLE Reservations (Room TEXT);"
      }
    ],
    [
      {
        "question": "Return all the rooms with king beds.",
        "query": "SELECT * FROM rooms WHERE bedtype = 'King';",
        "schema": "CREATE TABLE Rooms (maxOccupancy NUMBER, beds NUMBER, RoomId TEXT, decor TEXT, bedType TEXT);"
      },
      {
        "question": "What is the total number such rooms?",
        "query": "SELECT count(*) FROM rooms WHERE bedtype = 'King';",
        "schema": "CREATE TABLE Rooms (beds NUMBER, roomName TEXT, decor TEXT, RoomId TEXT, maxOccupancy NUMBER, bedType TEXT);"
      }
    ],
    [
      {
        "question": "Group all the rooms by the bed type",
        "query": "SELECT * FROM rooms GROUP BY bedtype;",
        "schema": "CREATE TABLE Rooms (beds NUMBER, bedType TEXT, RoomId TEXT);"
      },
      {
        "question": "For each bed type, count the number of rooms.",
        "query": "SELECT bedtype , count(*) FROM rooms GROUP BY bedtype;",
        "schema": "CREATE TABLE Rooms (bedType TEXT, RoomId TEXT, beds NUMBER);"
      }
    ],
    [
      {
        "question": "Sort all the rooms by the maximum occupancy.",
        "query": "SELECT * FROM rooms ORDER BY maxoccupancy DESC",
        "schema": "CREATE TABLE Rooms (maxOccupancy NUMBER, roomName TEXT, RoomId TEXT);"
      },
      {
        "question": "Which room has the largest capacity?",
        "query": "SELECT * FROM rooms ORDER BY maxoccupancy DESC LIMIT 1;",
        "schema": "CREATE TABLE Rooms (RoomId TEXT, maxOccupancy NUMBER, roomName TEXT);"
      },
      {
        "question": "Tell me the name of that room.",
        "query": "SELECT roomname FROM rooms ORDER BY maxoccupancy DESC LIMIT 1;",
        "schema": "CREATE TABLE Rooms (maxOccupancy NUMBER, RoomId TEXT, roomName TEXT);"
      }
    ],
    [
      {
        "question": "List all the rooms in the descending order of the base price.",
        "query": "SELECT * FROM rooms ORDER BY baseprice DESC",
        "schema": "CREATE TABLE Reservations (Room TEXT); CREATE TABLE Rooms (roomName TEXT, RoomId TEXT, basePrice NUMBER);"
      },
      {
        "question": "Which room has the highest base price?",
        "query": "SELECT * FROM rooms ORDER BY baseprice DESC LIMIT 1;",
        "schema": "CREATE TABLE Rooms (RoomId TEXT, basePrice NUMBER, roomName TEXT); CREATE TABLE Reservations (Room TEXT);"
      },
      {
        "question": "Give me the id and name of this room.",
        "query": "SELECT roomid , roomname FROM rooms ORDER BY baseprice DESC LIMIT 1;",
        "schema": "CREATE TABLE Reservations (Room TEXT); CREATE TABLE Rooms (RoomId TEXT, basePrice NUMBER, roomName TEXT);"
      }
    ],
    [
      {
        "question": "Which rooms have traditional decor?",
        "query": "SELECT * FROM rooms WHERE decor = \"traditional\";",
        "schema": "CREATE TABLE Rooms (roomName TEXT, RoomId TEXT, decor TEXT); CREATE TABLE Reservations (Room TEXT);"
      },
      {
        "question": "What are the name and bed type of those rooms?",
        "query": "SELECT roomname , bedtype FROM rooms WHERE decor = \"traditional\";",
        "schema": "CREATE TABLE Rooms (RoomId TEXT, decor TEXT, beds NUMBER, roomName TEXT, bedType TEXT); CREATE TABLE Reservations (Room TEXT);"
      }
    ],
    [
      {
        "question": "Which rooms have king beds?",
        "query": "SELECT * FROM rooms WHERE bedtype = \"King\"",
        "schema": "CREATE TABLE Reservations (Room TEXT); CREATE TABLE Rooms (decor TEXT, RoomId TEXT, roomName TEXT, bedType TEXT, beds NUMBER);"
      },
      {
        "question": "Group all the rooms with king beds according to the decor type.",
        "query": "SELECT * FROM rooms WHERE bedtype = \"King\" GROUP BY decor;",
        "schema": "CREATE TABLE Reservations (Room TEXT); CREATE TABLE Rooms (RoomId TEXT, roomName TEXT, beds NUMBER, bedType TEXT, decor TEXT);"
      },
      {
        "question": "Count the number of rooms for each decor type.",
        "query": "SELECT decor , count(*) FROM rooms WHERE bedtype = \"King\" GROUP BY decor;",
        "schema": "CREATE TABLE Reservations (Room TEXT); CREATE TABLE Rooms (roomName TEXT, RoomId TEXT, beds NUMBER, decor TEXT, bedType TEXT);"
      }
    ],
    [
      {
        "question": "What is the average price of all the rooms?",
        "query": "SELECT avg(baseprice) FROM rooms",
        "schema": "CREATE TABLE Reservations (Room TEXT); CREATE TABLE Rooms (basePrice NUMBER, RoomId TEXT);"
      },
      {
        "question": "What about the minimum price?",
        "query": "SELECT min(baseprice) FROM rooms",
        "schema": "CREATE TABLE Reservations (Room TEXT); CREATE TABLE Rooms (basePrice NUMBER, RoomId TEXT);"
      },
      {
        "question": "Tell me the average and minimum price of the rooms for each different decor.",
        "query": "SELECT decor , avg(baseprice) , min(baseprice) FROM rooms GROUP BY decor;",
        "schema": "CREATE TABLE Rooms (RoomId TEXT, decor TEXT, basePrice NUMBER); CREATE TABLE Reservations (Room TEXT);"
      }
    ],
    [
      {
        "question": "Sort all the rooms according to the price",
        "query": "SELECT * FROM rooms ORDER BY baseprice;",
        "schema": "CREATE TABLE Rooms (basePrice NUMBER, maxOccupancy NUMBER, RoomId TEXT, roomName TEXT); CREATE TABLE Reservations (Room TEXT);"
      },
      {
        "question": "Just show the room names",
        "query": "SELECT roomname FROM rooms ORDER BY baseprice;",
        "schema": "CREATE TABLE Rooms (roomName TEXT, maxOccupancy NUMBER, RoomId TEXT, basePrice NUMBER); CREATE TABLE Reservations (Room TEXT);"
      }
    ],
    [
      {
        "question": "Show me all the rooms that cost more than 120.",
        "query": "SELECT * FROM rooms WHERE baseprice > 120",
        "schema": "CREATE TABLE Rooms (decor TEXT, roomName TEXT, RoomId TEXT, basePrice NUMBER); CREATE TABLE Reservations (Room TEXT);"
      },
      {
        "question": "How many rooms?",
        "query": "SELECT count(*) FROM rooms WHERE baseprice > 120",
        "schema": "CREATE TABLE Reservations (Room TEXT); CREATE TABLE Rooms (decor TEXT, basePrice NUMBER, roomName TEXT, RoomId TEXT);"
      },
      {
        "question": "Tell me how many rooms cost more than 120, for each different decor.",
        "query": "SELECT decor , count(*) FROM rooms WHERE baseprice > 120 GROUP BY decor;",
        "schema": "CREATE TABLE Reservations (Room TEXT); CREATE TABLE Rooms (RoomId TEXT, basePrice NUMBER, roomName TEXT, decor TEXT);"
      }
    ],
    [
      {
        "question": "Tell me the average price of rooms.",
        "query": "SELECT avg(baseprice) FROM rooms",
        "schema": "CREATE TABLE Rooms (basePrice NUMBER, RoomId TEXT); CREATE TABLE Reservations (Room TEXT);"
      },
      {
        "question": "Report the average room price for each bed type.",
        "query": "SELECT bedtype , avg(baseprice) FROM rooms GROUP BY bedtype;",
        "schema": "CREATE TABLE Rooms (basePrice NUMBER, beds NUMBER, RoomId TEXT, bedType TEXT); CREATE TABLE Reservations (Room TEXT);"
      }
    ],
    [
      {
        "question": "Find all the rooms with a king bed.",
        "query": "SELECT * FROM rooms WHERE bedtype = \"King\"",
        "schema": "CREATE TABLE Reservations (Room TEXT); CREATE TABLE Rooms (roomName TEXT, bedType TEXT, decor TEXT, beds NUMBER, RoomId TEXT);"
      },
      {
        "question": "How about queen bed?",
        "query": "SELECT * FROM rooms WHERE bedtype = \"Queen\";",
        "schema": "CREATE TABLE Rooms (roomName TEXT, beds NUMBER, RoomId TEXT, decor TEXT, bedType TEXT); CREATE TABLE Reservations (Room TEXT);"
      },
      {
        "question": "Return the names of rooms that have either of them.",
        "query": "SELECT roomname FROM rooms WHERE bedtype = \"King\" OR bedtype = \"Queen\";",
        "schema": "CREATE TABLE Reservations (Room TEXT); CREATE TABLE Rooms (RoomId TEXT, bedType TEXT, decor TEXT, beds NUMBER, roomName TEXT);"
      }
    ],
    [
      {
        "question": "Tell me the bed type for each room.",
        "query": "SELECT bedtype FROM rooms;",
        "schema": "CREATE TABLE Rooms (decor TEXT, RoomId TEXT, beds NUMBER, bedType TEXT, roomName TEXT); CREATE TABLE Reservations (Room TEXT);"
      },
      {
        "question": "How many distinct types of beds are there?",
        "query": "SELECT count(DISTINCT bedtype) FROM rooms;",
        "schema": "CREATE TABLE Rooms (maxOccupancy NUMBER, bedType TEXT, roomName TEXT, decor TEXT, beds NUMBER, RoomId TEXT); CREATE TABLE Reservations (Room TEXT);"
      }
    ],
    [
      {
        "question": "Return a list of all the rooms sorted in the descending order of base prices.",
        "query": "SELECT * FROM rooms ORDER BY baseprice DESC",
        "schema": "CREATE TABLE Rooms (RoomId TEXT, basePrice NUMBER, roomName TEXT); CREATE TABLE Reservations (Room TEXT);"
      },
      {
        "question": "Return the top three.",
        "query": "SELECT * FROM rooms ORDER BY baseprice DESC LIMIT 3;",
        "schema": "CREATE TABLE Rooms (RoomId TEXT, basePrice NUMBER, roomName TEXT); CREATE TABLE Reservations (Room TEXT);"
      },
      {
        "question": "Just tell me the room id and name for these rooms.",
        "query": "SELECT roomid , roomname FROM rooms ORDER BY baseprice DESC LIMIT 3;",
        "schema": "CREATE TABLE Reservations (Room TEXT); CREATE TABLE Rooms (roomName TEXT, basePrice NUMBER, RoomId TEXT);"
      }
    ],
    [
      {
        "question": "What is the average room price in this inn?",
        "query": "SELECT avg(baseprice) FROM rooms",
        "schema": "CREATE TABLE Reservations (Room TEXT); CREATE TABLE Rooms (basePrice NUMBER, maxOccupancy NUMBER, RoomId TEXT);"
      },
      {
        "question": "Find all the rooms that cost more than that.",
        "query": "SELECT * FROM rooms WHERE baseprice > ( SELECT avg(baseprice) FROM rooms );",
        "schema": "CREATE TABLE Reservations (Room TEXT); CREATE TABLE Rooms (roomName TEXT, RoomId TEXT, basePrice NUMBER, maxOccupancy NUMBER);"
      },
      {
        "question": "What are their room names?",
        "query": "SELECT roomname FROM rooms WHERE baseprice > ( SELECT avg(baseprice) FROM rooms );",
        "schema": "CREATE TABLE Reservations (Room TEXT); CREATE TABLE Rooms (RoomId TEXT, basePrice NUMBER, maxOccupancy NUMBER, roomName TEXT);"
      }
    ],
    [
      {
        "question": "Find the ids of all the rooms that have been reserved before.",
        "query": "SELECT DISTINCT room FROM reservations",
        "schema": "CREATE TABLE Reservations (LastName TEXT, FirstName TEXT, Code NUMBER, Room TEXT); CREATE TABLE Rooms (RoomId TEXT, roomName TEXT);"
      },
      {
        "question": "Which rooms have not had any reservation yet?",
        "query": "SELECT * FROM rooms WHERE roomid NOT IN (SELECT DISTINCT room FROM reservations)",
        "schema": "CREATE TABLE Reservations (Code NUMBER, LastName TEXT, FirstName TEXT, Room TEXT); CREATE TABLE Rooms (roomName TEXT, RoomId TEXT);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT count(*) FROM rooms WHERE roomid NOT IN (SELECT DISTINCT room FROM reservations)",
        "schema": "CREATE TABLE Rooms (roomName TEXT, RoomId TEXT); CREATE TABLE Reservations (FirstName TEXT, Code NUMBER, Room TEXT, LastName TEXT);"
      }
    ],
    [
      {
        "question": "Group all the reservation record by the rooms.",
        "query": "SELECT * FROM reservations GROUP BY room",
        "schema": "CREATE TABLE Rooms (maxOccupancy NUMBER, RoomId TEXT); CREATE TABLE Reservations (FirstName TEXT, LastName TEXT, Room TEXT, Kids NUMBER, Code NUMBER);"
      },
      {
        "question": "For each room, count how many times it was booked.",
        "query": "SELECT count(*) FROM reservations GROUP BY room",
        "schema": "CREATE TABLE Rooms (maxOccupancy NUMBER, RoomId TEXT, roomName TEXT); CREATE TABLE Reservations (LastName TEXT, Room TEXT, Code NUMBER, FirstName TEXT, Kids NUMBER);"
      },
      {
        "question": "Also report the name of each room.",
        "query": "SELECT t2.roomname , count(*) FROM reservations AS t1 JOIN rooms AS t2 ON t1.room = t2.roomid GROUP BY t1.room",
        "schema": "CREATE TABLE Rooms (maxOccupancy NUMBER, roomName TEXT, RoomId TEXT); CREATE TABLE Reservations (Room TEXT, LastName TEXT, FirstName TEXT, Code NUMBER, Kids NUMBER);"
      }
    ],
    [
      {
        "question": "For each room, count how many times it was booked.",
        "query": "SELECT count(*) FROM reservations GROUP BY room",
        "schema": "CREATE TABLE Rooms (maxOccupancy NUMBER, RoomId TEXT, roomName TEXT, decor TEXT); CREATE TABLE Reservations (Room TEXT, Code NUMBER);"
      },
      {
        "question": "Which rooms have been booked more than 60 times?",
        "query": "SELECT * FROM reservations AS t1 JOIN rooms AS t2 ON t1.room = t2.roomid GROUP BY t1.room HAVING count(*) > 60",
        "schema": "CREATE TABLE Rooms (maxOccupancy NUMBER, roomName TEXT, decor TEXT, RoomId TEXT); CREATE TABLE Reservations (Room TEXT, Code NUMBER);"
      },
      {
        "question": "Give me the names of the rooms.",
        "query": "SELECT t2.roomname FROM reservations AS t1 JOIN rooms AS t2 ON t1.room = t2.roomid GROUP BY t1.room HAVING count(*) > 60",
        "schema": "CREATE TABLE Reservations (Code NUMBER, Room TEXT); CREATE TABLE Rooms (maxOccupancy NUMBER, roomName TEXT, decor TEXT, RoomId TEXT);"
      }
    ],
    [
      {
        "question": "Which rooms' base prices are between 120 and 150?",
        "query": "SELECT * FROM rooms WHERE baseprice BETWEEN 120 AND 150",
        "schema": "CREATE TABLE Rooms (roomName TEXT, RoomId TEXT, basePrice NUMBER); CREATE TABLE Reservations (Room TEXT);"
      },
      {
        "question": "Give me the names of these rooms.",
        "query": "SELECT roomname FROM rooms WHERE baseprice BETWEEN 120 AND 150",
        "schema": "CREATE TABLE Reservations (Room TEXT); CREATE TABLE Rooms (RoomId TEXT, roomName TEXT, basePrice NUMBER);"
      }
    ],
    [
      {
        "question": "Find the reservations made by customers whose first name has \"ROY\" in part.",
        "query": "SELECT * FROM reservations WHERE firstname LIKE '%ROY%'",
        "schema": "CREATE TABLE Reservations (LastName TEXT, Code NUMBER, CheckOut TEXT, FirstName TEXT);"
      },
      {
        "question": "What rooms were booked by these customers?",
        "query": "SELECT * FROM reservations AS t1 JOIN rooms AS t2 ON t1.room = t2.roomid WHERE firstname LIKE '%ROY%'",
        "schema": "CREATE TABLE Reservations (Code NUMBER, Room TEXT, LastName TEXT, FirstName TEXT, CheckOut TEXT, Kids NUMBER); CREATE TABLE Rooms (RoomId TEXT, roomName TEXT);"
      },
      {
        "question": "What are the names of these rooms?",
        "query": "SELECT t2.roomname FROM reservations AS t1 JOIN rooms AS t2 ON t1.room = t2.roomid WHERE firstname LIKE '%ROY%'",
        "schema": "CREATE TABLE Rooms (roomName TEXT, RoomId TEXT); CREATE TABLE Reservations (Code NUMBER, Kids NUMBER, CheckOut TEXT, LastName TEXT, FirstName TEXT, Room TEXT);"
      }
    ]
  ],
  "allergy_1": [
    [
      {
        "question": "What are the different allergies?",
        "query": "SELECT DISTINCT allergy FROM allergy_type",
        "schema": "CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT); CREATE TABLE Student (StuID NUMBER); CREATE TABLE Allergy_Type (Allergy TEXT, AllergyType TEXT);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT count(DISTINCT allergy) FROM allergy_type",
        "schema": "CREATE TABLE Student (StuID NUMBER); CREATE TABLE Allergy_Type (AllergyType TEXT, Allergy TEXT); CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT);"
      }
    ],
    [
      {
        "question": "What are the different types of allergies?",
        "query": "SELECT DISTINCT allergytype FROM allergy_type",
        "schema": "CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT); CREATE TABLE Student (StuID NUMBER); CREATE TABLE Allergy_Type (Allergy TEXT, AllergyType TEXT);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT count(DISTINCT allergytype) FROM allergy_type",
        "schema": "CREATE TABLE Has_Allergy (Allergy TEXT, StuID NUMBER); CREATE TABLE Allergy_Type (AllergyType TEXT, Allergy TEXT); CREATE TABLE Student (StuID NUMBER);"
      }
    ],
    [
      {
        "question": "Show all allergy information.",
        "query": "SELECT * FROM allergy_type",
        "schema": "CREATE TABLE Student (StuID NUMBER); CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT); CREATE TABLE Allergy_Type (AllergyType TEXT, Allergy TEXT);"
      },
      {
        "question": "What are the different allergy types?",
        "query": "SELECT DISTINCT allergytype FROM allergy_type",
        "schema": "CREATE TABLE Has_Allergy (Allergy TEXT, StuID NUMBER); CREATE TABLE Student (StuID NUMBER); CREATE TABLE Allergy_Type (AllergyType TEXT, Allergy TEXT);"
      }
    ],
    [
      {
        "question": "What are the allergies?",
        "query": "SELECT allergy FROM allergy_type",
        "schema": "CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT); CREATE TABLE Student (StuID NUMBER); CREATE TABLE Allergy_Type (AllergyType TEXT, Allergy TEXT);"
      },
      {
        "question": "What type is each one?",
        "query": "SELECT allergy , allergytype FROM allergy_type",
        "schema": "CREATE TABLE Student (StuID NUMBER); CREATE TABLE Has_Allergy (Allergy TEXT, StuID NUMBER); CREATE TABLE Allergy_Type (AllergyType TEXT, Allergy TEXT);"
      }
    ],
    [
      {
        "question": "What are all the different allergy names?",
        "query": "SELECT DISTINCT allergy FROM allergy_type",
        "schema": "CREATE TABLE Has_Allergy (Allergy TEXT, StuID NUMBER); CREATE TABLE Student (StuID NUMBER); CREATE TABLE Allergy_Type (Allergy TEXT, AllergyType TEXT);"
      },
      {
        "question": "Which of those are food-related?",
        "query": "SELECT DISTINCT allergy FROM allergy_type WHERE allergytype = \"food\"",
        "schema": "CREATE TABLE Allergy_Type (AllergyType TEXT, Allergy TEXT); CREATE TABLE Student (StuID NUMBER); CREATE TABLE Has_Allergy (Allergy TEXT, StuID NUMBER);"
      }
    ],
    [
      {
        "question": "What are the different types of allergies?",
        "query": "SELECT DISTINCT allergytype FROM allergy_type",
        "schema": "CREATE TABLE Has_Allergy (Allergy TEXT, StuID NUMBER); CREATE TABLE Student (StuID NUMBER); CREATE TABLE Allergy_Type (AllergyType TEXT, Allergy TEXT);"
      },
      {
        "question": "Which one is a cat allergy?",
        "query": "SELECT allergytype FROM allergy_type WHERE allergy = \"Cat\"",
        "schema": "CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT); CREATE TABLE Allergy_Type (Allergy TEXT, AllergyType TEXT); CREATE TABLE Student (StuID NUMBER);"
      }
    ],
    [
      {
        "question": "What are all the allergies?",
        "query": "SELECT allergy FROM allergy_type",
        "schema": "CREATE TABLE Has_Allergy (Allergy TEXT, StuID NUMBER); CREATE TABLE Allergy_Type (Allergy TEXT, AllergyType TEXT); CREATE TABLE Student (StuID NUMBER);"
      },
      {
        "question": "Which allergies are categorized as type animal?",
        "query": "SELECT allergy FROM allergy_type WHERE allergytype = \"animal\"",
        "schema": "CREATE TABLE Allergy_Type (Allergy TEXT, AllergyType TEXT); CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT); CREATE TABLE Student (StuID NUMBER);"
      },
      {
        "question": "How many are there in that category?",
        "query": "SELECT count(*) FROM allergy_type WHERE allergytype = \"animal\"",
        "schema": "CREATE TABLE Allergy_Type (Allergy TEXT, AllergyType TEXT); CREATE TABLE Has_Allergy (Allergy TEXT, StuID NUMBER); CREATE TABLE Student (StuID NUMBER);"
      }
    ],
    [
      {
        "question": "What are the different allergy types?",
        "query": "SELECT DISTINCT allergytype FROM allergy_type",
        "schema": "CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT); CREATE TABLE Student (StuID NUMBER); CREATE TABLE Allergy_Type (AllergyType TEXT, Allergy TEXT);"
      },
      {
        "question": "How many are in each category?",
        "query": "SELECT allergytype , count(*) FROM allergy_type GROUP BY allergytype",
        "schema": "CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT); CREATE TABLE Student (StuID NUMBER); CREATE TABLE Allergy_Type (AllergyType TEXT, Allergy TEXT);"
      }
    ],
    [
      {
        "question": "What are all the different allergy types?",
        "query": "SELECT DISTINCT allergytype FROM allergy_type",
        "schema": "CREATE TABLE Allergy_Type (AllergyType TEXT, Allergy TEXT); CREATE TABLE Has_Allergy (Allergy TEXT, StuID NUMBER); CREATE TABLE Student (StuID NUMBER);"
      },
      {
        "question": "Order them by number of allergies descendingly.",
        "query": "SELECT allergytype FROM allergy_type GROUP BY allergytype ORDER BY count(*) DESC",
        "schema": "CREATE TABLE Student (StuID NUMBER); CREATE TABLE Allergy_Type (Allergy TEXT, AllergyType TEXT); CREATE TABLE Has_Allergy (Allergy TEXT, StuID NUMBER);"
      },
      {
        "question": "Which one has the most?",
        "query": "SELECT allergytype FROM allergy_type GROUP BY allergytype ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Has_Allergy (Allergy TEXT, StuID NUMBER); CREATE TABLE Student (StuID NUMBER); CREATE TABLE Allergy_Type (AllergyType TEXT, Allergy TEXT);"
      }
    ],
    [
      {
        "question": "How many allergies exist for each allergy type?",
        "query": "SELECT count(*) , allergytype FROM allergy_type GROUP BY allergytype",
        "schema": "CREATE TABLE Allergy_Type (AllergyType TEXT, Allergy TEXT); CREATE TABLE Student (StuID NUMBER); CREATE TABLE Has_Allergy (Allergy TEXT, StuID NUMBER);"
      },
      {
        "question": "Which one has the fewest?",
        "query": "SELECT allergytype FROM allergy_type GROUP BY allergytype ORDER BY count(*) ASC LIMIT 1",
        "schema": "CREATE TABLE Student (StuID NUMBER); CREATE TABLE Allergy_Type (Allergy TEXT, AllergyType TEXT); CREATE TABLE Has_Allergy (Allergy TEXT, StuID NUMBER);"
      }
    ],
    [
      {
        "question": "Who are all the students?",
        "query": "SELECT * FROM student",
        "schema": "CREATE TABLE Student (StuID NUMBER, Fname TEXT, LName TEXT); CREATE TABLE Has_Allergy (StuID NUMBER);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT count(*) FROM student",
        "schema": "CREATE TABLE Student (Major NUMBER, Fname TEXT, LName TEXT, city_code TEXT, Advisor NUMBER, StuID NUMBER, Age NUMBER); CREATE TABLE Has_Allergy (Allergy TEXT, StuID NUMBER);"
      }
    ],
    [
      {
        "question": "Who are all the students?",
        "query": "SELECT * FROM student",
        "schema": "CREATE TABLE Student (LName TEXT, Fname TEXT, StuID NUMBER, Sex TEXT); CREATE TABLE Has_Allergy (StuID NUMBER);"
      },
      {
        "question": "What are their first names?",
        "query": "SELECT fname FROM student",
        "schema": "CREATE TABLE Has_Allergy (StuID NUMBER); CREATE TABLE Student (Sex TEXT, LName TEXT, Fname TEXT, StuID NUMBER);"
      },
      {
        "question": "And what about their last names?",
        "query": "SELECT lname FROM student",
        "schema": "CREATE TABLE Student (Fname TEXT, LName TEXT, StuID NUMBER, Sex TEXT); CREATE TABLE Has_Allergy (StuID NUMBER);"
      }
    ],
    [
      {
        "question": "Who are the students?",
        "query": "SELECT * FROM student",
        "schema": "CREATE TABLE Student (Advisor NUMBER, Sex TEXT, city_code TEXT, LName TEXT, StuID NUMBER, Fname TEXT);"
      },
      {
        "question": "Who are the distinct advisors?",
        "query": "SELECT DISTINCT advisor FROM student",
        "schema": "CREATE TABLE Student (city_code TEXT, LName TEXT, Advisor NUMBER, Fname TEXT, StuID NUMBER, Sex TEXT);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT count(DISTINCT advisor) FROM student",
        "schema": "CREATE TABLE Student (Fname TEXT, StuID NUMBER, city_code TEXT, LName TEXT, Advisor NUMBER, Sex TEXT);"
      }
    ],
    [
      {
        "question": "Who are the students?",
        "query": "SELECT * FROM student",
        "schema": "CREATE TABLE Student (Fname TEXT, LName TEXT, StuID NUMBER, Advisor NUMBER, Sex TEXT, city_code TEXT);"
      },
      {
        "question": "What are their distinct majors?",
        "query": "SELECT DISTINCT major FROM student",
        "schema": "CREATE TABLE Student (Major NUMBER, StuID NUMBER, Fname TEXT, Sex TEXT, LName TEXT, Advisor NUMBER, city_code TEXT);"
      }
    ],
    [
      {
        "question": "Who are the students?",
        "query": "SELECT * FROM student",
        "schema": "CREATE TABLE Student (Sex TEXT, LName TEXT, StuID NUMBER, Advisor NUMBER, city_code TEXT, Fname TEXT);"
      },
      {
        "question": "What distinct cities are they from?",
        "query": "SELECT DISTINCT city_code FROM student",
        "schema": "CREATE TABLE Student (Fname TEXT, LName TEXT, city_code TEXT, StuID NUMBER, Sex TEXT, Advisor NUMBER);"
      }
    ],
    [
      {
        "question": "Who are the female students?",
        "query": "SELECT * FROM student WHERE sex = 'F'",
        "schema": "CREATE TABLE Student (Fname TEXT, LName TEXT, StuID NUMBER, Sex TEXT);"
      },
      {
        "question": "What are their full names?",
        "query": "SELECT fname , lname FROM student WHERE sex = 'F'",
        "schema": "CREATE TABLE Student (Sex TEXT, StuID NUMBER, Fname TEXT, LName TEXT);"
      },
      {
        "question": "How old are they?",
        "query": "SELECT age FROM student WHERE sex = 'F'",
        "schema": "CREATE TABLE Student (Age NUMBER, StuID NUMBER, LName TEXT, Sex TEXT, Fname TEXT);"
      }
    ],
    [
      {
        "question": "Which students are male?",
        "query": "SELECT * FROM student WHERE sex = 'M'",
        "schema": "CREATE TABLE Student (StuID NUMBER, Age NUMBER, Sex TEXT, LName TEXT);"
      },
      {
        "question": "What are their student id numbers?",
        "query": "SELECT stuid FROM student WHERE sex = 'M'",
        "schema": "CREATE TABLE Student (Age NUMBER, LName TEXT, StuID NUMBER, Sex TEXT);"
      }
    ],
    [
      {
        "question": "Which students are 18?",
        "query": "SELECT * FROM student WHERE age = 18",
        "schema": "CREATE TABLE Student (Age NUMBER, LName TEXT, StuID NUMBER, Sex TEXT);"
      },
      {
        "question": "How many are there in total?",
        "query": "SELECT count(*) FROM student WHERE age = 18",
        "schema": "CREATE TABLE Has_Allergy (StuID NUMBER); CREATE TABLE Student (city_code TEXT, Sex TEXT, StuID NUMBER, LName TEXT, Age NUMBER);"
      }
    ],
    [
      {
        "question": "Who is older than 20?",
        "query": "SELECT * FROM student WHERE age > 20",
        "schema": "CREATE TABLE Student (Age NUMBER, LName TEXT, StuID NUMBER, Sex TEXT);"
      },
      {
        "question": "What are their student ids?",
        "query": "SELECT stuid FROM student WHERE age > 20",
        "schema": "CREATE TABLE Student (Age NUMBER, LName TEXT, Sex TEXT, StuID NUMBER);"
      }
    ],
    [
      {
        "question": "Which student has the last name Kim?",
        "query": "SELECT * FROM student WHERE lname = \"Kim\"",
        "schema": "CREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT);"
      },
      {
        "question": "Where does she or he live?",
        "query": "SELECT city_code FROM student WHERE lname = \"Kim\"",
        "schema": "CREATE TABLE Student (Fname TEXT, LName TEXT, city_code TEXT, StuID NUMBER);"
      }
    ],
    [
      {
        "question": "Who's student id is 1004?",
        "query": "SELECT * FROM student WHERE stuid = 1004",
        "schema": "CREATE TABLE Student (LName TEXT, StuID NUMBER, Age NUMBER);"
      },
      {
        "question": "Who is her advisor?",
        "query": "SELECT advisor FROM student WHERE stuid = 1004",
        "schema": "CREATE TABLE Student (LName TEXT, Advisor NUMBER, Age NUMBER, StuID NUMBER); CREATE TABLE Has_Allergy (StuID NUMBER);"
      }
    ],
    [
      {
        "question": "Who lives in HKG or CHI?",
        "query": "SELECT * FROM student WHERE city_code = \"HKG\" OR city_code = \"CHI\"",
        "schema": "CREATE TABLE Student (city_code TEXT, StuID NUMBER, LName TEXT);"
      },
      {
        "question": "How many is that?",
        "query": "SELECT count(*) FROM student WHERE city_code = \"HKG\" OR city_code = \"CHI\"",
        "schema": "CREATE TABLE Student (StuID NUMBER, city_code TEXT, LName TEXT, Fname TEXT);"
      }
    ],
    [
      {
        "question": "How old is the youngest student?",
        "query": "SELECT min(age) FROM student",
        "schema": "CREATE TABLE Student (StuID NUMBER, Age NUMBER, Sex TEXT, LName TEXT);"
      },
      {
        "question": "What about the eldest?",
        "query": "SELECT max(age) FROM student",
        "schema": "CREATE TABLE Student (Age NUMBER, LName TEXT, Sex TEXT, StuID NUMBER);"
      },
      {
        "question": "What is the average age?",
        "query": "SELECT avg(age) FROM student",
        "schema": "CREATE TABLE Student (Age NUMBER, StuID NUMBER, LName TEXT, Sex TEXT);"
      }
    ],
    [
      {
        "question": "What is the minimum age of the students?",
        "query": "SELECT min(age) FROM student",
        "schema": "CREATE TABLE Student (Sex TEXT, StuID NUMBER, Age NUMBER);"
      },
      {
        "question": "Who is the youngest student?",
        "query": "SELECT * FROM student WHERE age = (SELECT min(age) FROM student)",
        "schema": "CREATE TABLE Student (LName TEXT, Age NUMBER, Sex TEXT, StuID NUMBER, Fname TEXT);"
      },
      {
        "question": "What is his last name?",
        "query": "SELECT lname FROM student WHERE age = (SELECT min(age) FROM student)",
        "schema": "CREATE TABLE Student (Sex TEXT, Age NUMBER, StuID NUMBER, LName TEXT, Fname TEXT);"
      }
    ],
    [
      {
        "question": "Who is the oldest student?",
        "query": "SELECT * FROM student WHERE age = (SELECT max(age) FROM student)",
        "schema": "CREATE TABLE Student (LName TEXT, Age NUMBER, Fname TEXT, StuID NUMBER);"
      },
      {
        "question": "What is their id?",
        "query": "SELECT stuid FROM student WHERE age = (SELECT max(age) FROM student)",
        "schema": "CREATE TABLE Student (Fname TEXT, StuID NUMBER, Age NUMBER, LName TEXT);"
      }
    ],
    [
      {
        "question": "What are the different majors?",
        "query": "SELECT DISTINCT major FROM student",
        "schema": "CREATE TABLE Student (Major NUMBER, StuID NUMBER);"
      },
      {
        "question": "How many students are studying each subject?",
        "query": "SELECT major , count(*) FROM student GROUP BY major",
        "schema": "CREATE TABLE Student (StuID NUMBER, Major NUMBER, LName TEXT);"
      }
    ],
    [
      {
        "question": "What are the different majors?",
        "query": "SELECT DISTINCT major FROM student",
        "schema": "CREATE TABLE Student (Major NUMBER, StuID NUMBER);"
      },
      {
        "question": "How many students does each major has?",
        "query": "SELECT major , count(*) FROM student GROUP BY major",
        "schema": "CREATE TABLE Student (Major NUMBER, StuID NUMBER, LName TEXT);"
      },
      {
        "question": "Which one has the most students?",
        "query": "SELECT major FROM student GROUP BY major ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Student (StuID NUMBER, Major NUMBER, LName TEXT, Fname TEXT);"
      }
    ],
    [
      {
        "question": "What are the different student ages?",
        "query": "SELECT DISTINCT age FROM student",
        "schema": "CREATE TABLE Student (Sex TEXT, StuID NUMBER, Age NUMBER);"
      },
      {
        "question": "How many students are each age?",
        "query": "SELECT age , count(*) FROM student GROUP BY age",
        "schema": "CREATE TABLE Student (Age NUMBER, StuID NUMBER, Sex TEXT);"
      }
    ],
    [
      {
        "question": "What are the different sex categories for students?",
        "query": "SELECT DISTINCT sex FROM student",
        "schema": "CREATE TABLE Student (Sex TEXT, StuID NUMBER);"
      },
      {
        "question": "How many are there for each category?",
        "query": "SELECT count(*) , sex FROM student GROUP BY sex",
        "schema": "CREATE TABLE Student (StuID NUMBER, Sex TEXT);"
      },
      {
        "question": "What is the average age for each category?",
        "query": "SELECT avg(age) , sex FROM student GROUP BY sex",
        "schema": "CREATE TABLE Student (StuID NUMBER, Age NUMBER, Sex TEXT);"
      }
    ],
    [
      {
        "question": "What are the different cities that students live in?",
        "query": "SELECT DISTINCT city_code FROM student",
        "schema": "CREATE TABLE Student (StuID NUMBER, city_code TEXT);"
      },
      {
        "question": "How many students are from each one?",
        "query": "SELECT city_code , count(*) FROM student GROUP BY city_code",
        "schema": "CREATE TABLE Student (city_code TEXT, LName TEXT, StuID NUMBER);"
      }
    ],
    [
      {
        "question": "Who are the different advisors?",
        "query": "SELECT DISTINCT advisor FROM student",
        "schema": "CREATE TABLE Student (StuID NUMBER, Advisor NUMBER);"
      },
      {
        "question": "How many students does each one have?",
        "query": "SELECT advisor , count(*) FROM student GROUP BY advisor",
        "schema": "CREATE TABLE Has_Allergy (StuID NUMBER); CREATE TABLE Student (Advisor NUMBER, StuID NUMBER, LName TEXT);"
      }
    ],
    [
      {
        "question": "Who are the advisors of the students?",
        "query": "SELECT advisor FROM student",
        "schema": "CREATE TABLE Student (LName TEXT, StuID NUMBER, Advisor NUMBER);"
      },
      {
        "question": "Order the advisors by the number of students they have.",
        "query": "SELECT advisor FROM student GROUP BY advisor ORDER BY count(*)",
        "schema": "CREATE TABLE Student (StuID NUMBER, LName TEXT, Advisor NUMBER);"
      },
      {
        "question": "Who has the most?",
        "query": "SELECT advisor FROM student GROUP BY advisor ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Student (StuID NUMBER, LName TEXT, Advisor NUMBER);"
      }
    ],
    [
      {
        "question": "Who have allergies?",
        "query": "SELECT * FROM has_allergy",
        "schema": "CREATE TABLE Has_Allergy (Allergy TEXT, StuID NUMBER); CREATE TABLE Student (StuID NUMBER); CREATE TABLE Allergy_Type (Allergy TEXT, AllergyType TEXT);"
      },
      {
        "question": "Who has a cat allergy?",
        "query": "SELECT * FROM has_allergy WHERE allergy = \"Cat\"",
        "schema": "CREATE TABLE Student (StuID NUMBER, LName TEXT); CREATE TABLE Allergy_Type (Allergy TEXT, AllergyType TEXT); CREATE TABLE Has_Allergy (Allergy TEXT, StuID NUMBER);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT count(*) FROM has_allergy WHERE allergy = \"Cat\"",
        "schema": "CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT); CREATE TABLE Student (StuID NUMBER, LName TEXT); CREATE TABLE Allergy_Type (Allergy TEXT, AllergyType TEXT);"
      }
    ],
    [
      {
        "question": "Who has at least two allergies?",
        "query": "SELECT * FROM has_allergy GROUP BY stuid HAVING count(*) >= 2",
        "schema": "CREATE TABLE Has_Allergy (Allergy TEXT, StuID NUMBER); CREATE TABLE Student (StuID NUMBER, LName TEXT); CREATE TABLE Allergy_Type (AllergyType TEXT, Allergy TEXT);"
      },
      {
        "question": "What are their ids?",
        "query": "SELECT stuid FROM has_allergy GROUP BY stuid HAVING count(*) >= 2",
        "schema": "CREATE TABLE Has_Allergy (Allergy TEXT, StuID NUMBER); CREATE TABLE Allergy_Type (AllergyType TEXT, Allergy TEXT); CREATE TABLE Student (LName TEXT, StuID NUMBER);"
      }
    ],
    [
      {
        "question": "What are all the student ids?",
        "query": "SELECT stuid FROM student",
        "schema": "CREATE TABLE Student (Advisor NUMBER, Fname TEXT, StuID NUMBER, LName TEXT); CREATE TABLE Has_Allergy (StuID NUMBER);"
      },
      {
        "question": "Of these, which students ids correspond to students without allergies?",
        "query": "SELECT stuid FROM student EXCEPT SELECT stuid FROM has_allergy",
        "schema": "CREATE TABLE Allergy_Type (AllergyType TEXT, Allergy TEXT); CREATE TABLE Student (StuID NUMBER, Fname TEXT, Advisor NUMBER, LName TEXT); CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT);"
      }
    ],
    [
      {
        "question": "How many studnets are allergic to milk?",
        "query": "SELECT count(*) FROM has_allergy AS t1 JOIN student AS t2 ON t1.stuid = t2.stuid WHERE t1.allergy = \"Milk\"",
        "schema": "CREATE TABLE Has_Allergy (Allergy TEXT, StuID NUMBER); CREATE TABLE Allergy_Type (Allergy TEXT, AllergyType TEXT); CREATE TABLE Student (Fname TEXT, StuID NUMBER);"
      },
      {
        "question": "How many are allergic to that or to eggs?",
        "query": "SELECT count(*) FROM has_allergy AS t1 JOIN student AS t2 ON t1.stuid = t2.stuid WHERE t1.allergy = \"Milk\" OR t1.allergy = \"Eggs\"",
        "schema": "CREATE TABLE Allergy_Type (AllergyType TEXT, Allergy TEXT); CREATE TABLE Student (Fname TEXT, StuID NUMBER); CREATE TABLE Has_Allergy (Allergy TEXT, StuID NUMBER);"
      },
      {
        "question": "Of those, how many are female?",
        "query": "SELECT count(*) FROM has_allergy AS t1 JOIN student AS t2 ON t1.stuid = t2.stuid WHERE t2.sex = \"F\" AND t1.allergy = \"Milk\" OR t1.allergy = \"Eggs\"",
        "schema": "CREATE TABLE Student (Sex TEXT, StuID NUMBER, Fname TEXT); CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT); CREATE TABLE Allergy_Type (AllergyType TEXT, Allergy TEXT);"
      }
    ],
    [
      {
        "question": "How many allergy cases are there?",
        "query": "SELECT count(*) FROM has_allergy",
        "schema": "CREATE TABLE Student (StuID NUMBER); CREATE TABLE Allergy_Type (AllergyType TEXT, Allergy TEXT); CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT);"
      },
      {
        "question": "Of those, for how many is it a food allergy?",
        "query": "SELECT count(*) FROM has_allergy AS t1 JOIN allergy_type AS t2 ON t1.allergy = t2.allergy WHERE t2.allergytype = \"food\"",
        "schema": "CREATE TABLE Has_Allergy (Allergy TEXT, StuID NUMBER); CREATE TABLE Allergy_Type (AllergyType TEXT, Allergy TEXT); CREATE TABLE Student (StuID NUMBER);"
      }
    ],
    [
      {
        "question": "What are the different allergies?",
        "query": "SELECT DISTINCT allergy FROM has_allergy",
        "schema": "CREATE TABLE Student (StuID NUMBER); CREATE TABLE Allergy_Type (AllergyType TEXT, Allergy TEXT); CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT);"
      },
      {
        "question": "Which one has the most students affected?",
        "query": "SELECT allergy FROM has_allergy GROUP BY allergy ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT); CREATE TABLE Allergy_Type (Allergy TEXT, AllergyType TEXT); CREATE TABLE Student (StuID NUMBER);"
      }
    ],
    [
      {
        "question": "What are all the different allergies?",
        "query": "SELECT DISTINCT allergy FROM has_allergy",
        "schema": "CREATE TABLE Allergy_Type (AllergyType TEXT, Allergy TEXT); CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT); CREATE TABLE Student (StuID NUMBER);"
      },
      {
        "question": "How many students does each of them affect?",
        "query": "SELECT allergy , count(*) FROM has_allergy GROUP BY allergy",
        "schema": "CREATE TABLE Allergy_Type (Allergy TEXT, AllergyType TEXT); CREATE TABLE Has_Allergy (Allergy TEXT, StuID NUMBER); CREATE TABLE Student (StuID NUMBER);"
      }
    ],
    [
      {
        "question": "What are the different allergy types?",
        "query": "SELECT DISTINCT allergytype FROM allergy_type",
        "schema": "CREATE TABLE Student (StuID NUMBER); CREATE TABLE Allergy_Type (Allergy TEXT, AllergyType TEXT); CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT);"
      },
      {
        "question": "For each, how many students does it affect?",
        "query": "SELECT t2.allergytype , count(*) FROM has_allergy AS t1 JOIN allergy_type AS t2 ON t1.allergy = t2.allergy GROUP BY t2.allergytype",
        "schema": "CREATE TABLE Allergy_Type (AllergyType TEXT, Allergy TEXT); CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT); CREATE TABLE Student (StuID NUMBER);"
      }
    ],
    [
      {
        "question": "What are student ids who are allergic to milk?",
        "query": "SELECT stuid FROM has_allergy WHERE allergy = \"Milk\"",
        "schema": "CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT); CREATE TABLE Student (StuID NUMBER); CREATE TABLE Allergy_Type (Allergy TEXT, AllergyType TEXT);"
      },
      {
        "question": "Of these, who also have allergy to cat?",
        "query": "SELECT stuid FROM has_allergy WHERE allergy = \"Milk\" INTERSECT SELECT stuid FROM has_allergy WHERE allergy = \"Cat\"",
        "schema": "CREATE TABLE Student (StuID NUMBER); CREATE TABLE Allergy_Type (Allergy TEXT, AllergyType TEXT); CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT);"
      },
      {
        "question": "List their last name and age.",
        "query": "SELECT lname , age FROM student WHERE stuid IN (SELECT stuid FROM has_allergy WHERE allergy = \"Milk\" INTERSECT SELECT stuid FROM has_allergy WHERE allergy = \"Cat\")",
        "schema": "CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT); CREATE TABLE Student (StuID NUMBER, Fname TEXT, Age NUMBER, LName TEXT); CREATE TABLE Allergy_Type (AllergyType TEXT, Allergy TEXT);"
      }
    ],
    [
      {
        "question": "What is the girl with first name Lisa allergic to?",
        "query": "SELECT t1.allergy FROM allergy_type AS t1 JOIN has_allergy AS t2 ON t1.allergy = t2.allergy JOIN student AS t3 ON t3.stuid = t2.stuid WHERE t3.fname = \"Lisa\"",
        "schema": "CREATE TABLE Student (Fname TEXT, LName TEXT, StuID NUMBER); CREATE TABLE Allergy_Type (Allergy TEXT, AllergyType TEXT); CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT);"
      },
      {
        "question": "What type is each allergy?",
        "query": "SELECT t1.allergy , t1.allergytype FROM allergy_type AS t1 JOIN has_allergy AS t2 ON t1.allergy = t2.allergy JOIN student AS t3 ON t3.stuid = t2.stuid WHERE t3.fname = \"Lisa\"",
        "schema": "CREATE TABLE Allergy_Type (AllergyType TEXT, Allergy TEXT); CREATE TABLE Student (StuID NUMBER, Fname TEXT, LName TEXT); CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT);"
      },
      {
        "question": "Order them by the name of allergies.",
        "query": "SELECT t1.allergy , t1.allergytype FROM allergy_type AS t1 JOIN has_allergy AS t2 ON t1.allergy = t2.allergy JOIN student AS t3 ON t3.stuid = t2.stuid WHERE t3.fname = \"Lisa\" ORDER BY t1.allergy",
        "schema": "CREATE TABLE Has_Allergy (Allergy TEXT, StuID NUMBER); CREATE TABLE Allergy_Type (Allergy TEXT, AllergyType TEXT); CREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT);"
      }
    ],
    [
      {
        "question": "Which students are allergic to cats?",
        "query": "SELECT stuid FROM has_allergy WHERE allergy = \"Cat\"",
        "schema": "CREATE TABLE Allergy_Type (AllergyType TEXT, Allergy TEXT); CREATE TABLE Has_Allergy (Allergy TEXT, StuID NUMBER); CREATE TABLE Student (StuID NUMBER, Fname TEXT);"
      },
      {
        "question": "Which students are not?",
        "query": "SELECT stuid FROM student EXCEPT SELECT stuid FROM has_allergy WHERE allergy = \"Cat\"",
        "schema": "CREATE TABLE Has_Allergy (Allergy TEXT, StuID NUMBER); CREATE TABLE Allergy_Type (Allergy TEXT, AllergyType TEXT); CREATE TABLE Student (LName TEXT, StuID NUMBER, Fname TEXT);"
      },
      {
        "question": "Of these, list the first name and sex of students who are allergic to milk.",
        "query": "SELECT fname , sex FROM student WHERE stuid IN (SELECT stuid FROM has_allergy WHERE allergy = \"Milk\" EXCEPT SELECT stuid FROM has_allergy WHERE allergy = \"Cat\")",
        "schema": "CREATE TABLE Has_Allergy (Allergy TEXT, StuID NUMBER); CREATE TABLE Allergy_Type (AllergyType TEXT, Allergy TEXT); CREATE TABLE Student (LName TEXT, Fname TEXT, Sex TEXT, StuID NUMBER);"
      }
    ],
    [
      {
        "question": "Which students have allergies to food type?",
        "query": "SELECT t1.stuid FROM has_allergy AS t1 JOIN allergy_type AS t2 ON t1.allergy = t2.allergy WHERE t2.allergytype = \"food\"",
        "schema": "CREATE TABLE Allergy_Type (AllergyType TEXT, Allergy TEXT); CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT); CREATE TABLE Student (StuID NUMBER);"
      },
      {
        "question": "Which of them have also have allergies to animal type?",
        "query": "SELECT t1.stuid FROM has_allergy AS t1 JOIN allergy_type AS t2 ON t1.allergy = t2.allergy WHERE t2.allergytype = \"food\" INTERSECT SELECT t1.stuid FROM has_allergy AS t1 JOIN allergy_type AS t2 ON t1.allergy = t2.allergy WHERE t2.allergytype = \"animal\"",
        "schema": "CREATE TABLE Student (StuID NUMBER); CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT); CREATE TABLE Allergy_Type (AllergyType TEXT, Allergy TEXT);"
      },
      {
        "question": "Find the average age of them.",
        "query": "SELECT avg(age) FROM student WHERE stuid IN ( SELECT t1.stuid FROM has_allergy AS t1 JOIN allergy_type AS t2 ON t1.allergy = t2.allergy WHERE t2.allergytype = \"food\" INTERSECT SELECT t1.stuid FROM has_allergy AS t1 JOIN allergy_type AS t2 ON t1.allergy = t2.allergy WHERE t2.allergytype = \"animal\")",
        "schema": "CREATE TABLE Student (StuID NUMBER, Age NUMBER); CREATE TABLE Allergy_Type (AllergyType TEXT, Allergy TEXT); CREATE TABLE Has_Allergy (Allergy TEXT, StuID NUMBER);"
      }
    ],
    [
      {
        "question": "What are the first and last name of all the students?",
        "query": "SELECT fname , lname FROM student",
        "schema": "CREATE TABLE Student (StuID NUMBER, Fname TEXT, LName TEXT);"
      },
      {
        "question": "Of them, who are allergic to any type of food?",
        "query": "SELECT DISTINCT t3.fname , t3.lname FROM has_allergy AS t1 JOIN allergy_type AS t2 ON t1.allergy = t2.allergy JOIN student AS t3 ON t1.stuid = t3.stuid WHERE t2.allergytype = \"food\"",
        "schema": "CREATE TABLE Allergy_Type (Allergy TEXT, AllergyType TEXT); CREATE TABLE Has_Allergy (Allergy TEXT, StuID NUMBER); CREATE TABLE Student (Fname TEXT, LName TEXT, StuID NUMBER);"
      },
      {
        "question": "And who are not?",
        "query": "SELECT fname , lname FROM student WHERE stuid NOT IN (SELECT t1.stuid FROM has_allergy AS t1 JOIN allergy_type AS t2 ON t1.allergy = t2.allergy WHERE t2.allergytype = \"food\")",
        "schema": "CREATE TABLE Allergy_Type (AllergyType TEXT, Allergy TEXT); CREATE TABLE Has_Allergy (Allergy TEXT, StuID NUMBER); CREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT);"
      }
    ],
    [
      {
        "question": "Who are all the male students?",
        "query": "SELECT * FROM student WHERE sex = 'M'",
        "schema": "CREATE TABLE Has_Allergy (StuID NUMBER); CREATE TABLE Student (Sex TEXT, StuID NUMBER, Fname TEXT, LName TEXT);"
      },
      {
        "question": "Of these, who have allergies to food type?",
        "query": "SELECT * FROM student WHERE sex = \"M\" AND stuid IN (SELECT stuid FROM has_allergy AS t1 JOIN allergy_type AS t2 ON t1.allergy = t2.allergy WHERE t2.allergytype = \"food\")",
        "schema": "CREATE TABLE Has_Allergy (Allergy TEXT, StuID NUMBER); CREATE TABLE Allergy_Type (AllergyType TEXT, Allergy TEXT); CREATE TABLE Student (StuID NUMBER, Sex TEXT, Fname TEXT, LName TEXT);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT count(*) FROM student WHERE sex = \"M\" AND stuid IN (SELECT stuid FROM has_allergy AS t1 JOIN allergy_type AS t2 ON t1.allergy = t2.allergy WHERE t2.allergytype = \"food\")",
        "schema": "CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT); CREATE TABLE Allergy_Type (Allergy TEXT, AllergyType TEXT); CREATE TABLE Student (LName TEXT, StuID NUMBER, Sex TEXT, Fname TEXT);"
      }
    ],
    [
      {
        "question": "What are the ids of the students who have any allergy?",
        "query": "SELECT stuid FROM has_allergy",
        "schema": "CREATE TABLE Allergy_Type (AllergyType TEXT, Allergy TEXT); CREATE TABLE Student (Sex TEXT, StuID NUMBER); CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT);"
      },
      {
        "question": "Of these, who are allergy to milk or cat?",
        "query": "SELECT stuid FROM has_allergy WHERE allergy = \"Milk\" OR allergy = \"Cat\"",
        "schema": "CREATE TABLE Student (Sex TEXT, StuID NUMBER); CREATE TABLE Has_Allergy (Allergy TEXT, StuID NUMBER); CREATE TABLE Allergy_Type (Allergy TEXT, AllergyType TEXT);"
      },
      {
        "question": "What are the different first names and city codes of them?",
        "query": "SELECT DISTINCT t1.fname , t1.city_code FROM student AS t1 JOIN has_allergy AS t2 ON t1.stuid = t2.stuid WHERE t2.allergy = \"Milk\" OR t2.allergy = \"Cat\"",
        "schema": "CREATE TABLE Allergy_Type (Allergy TEXT, AllergyType TEXT); CREATE TABLE Student (Sex TEXT, LName TEXT, Fname TEXT, city_code TEXT, StuID NUMBER); CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT);"
      }
    ],
    [
      {
        "question": "Which students are over 18?",
        "query": "SELECT * FROM student WHERE age > 18",
        "schema": "CREATE TABLE Student (LName TEXT, Age NUMBER, Fname TEXT, Sex TEXT, StuID NUMBER);"
      },
      {
        "question": "Of them, who are not allergic to food or animal?",
        "query": "SELECT * FROM student WHERE age > 18 AND stuid NOT IN ( SELECT stuid FROM has_allergy AS t1 JOIN allergy_type AS t2 ON t1.allergy = t2.allergy WHERE t2.allergytype = \"food\" OR t2.allergytype = \"animal\")",
        "schema": "CREATE TABLE Has_Allergy (Allergy TEXT, StuID NUMBER); CREATE TABLE Allergy_Type (AllergyType TEXT, Allergy TEXT); CREATE TABLE Student (StuID NUMBER, Fname TEXT, LName TEXT, Age NUMBER, Sex TEXT);"
      },
      {
        "question": "How many?",
        "query": "SELECT count(*) FROM student WHERE age > 18 AND stuid NOT IN ( SELECT stuid FROM has_allergy AS t1 JOIN allergy_type AS t2 ON t1.allergy = t2.allergy WHERE t2.allergytype = \"food\" OR t2.allergytype = \"animal\")",
        "schema": "CREATE TABLE Student (LName TEXT, StuID NUMBER, Age NUMBER, Sex TEXT, Fname TEXT); CREATE TABLE Has_Allergy (Allergy TEXT, StuID NUMBER); CREATE TABLE Allergy_Type (AllergyType TEXT, Allergy TEXT);"
      }
    ],
    [
      {
        "question": "Who have allergy to soy?",
        "query": "SELECT * FROM has_allergy WHERE allergy = \"Soy\"",
        "schema": "CREATE TABLE Student (StuID NUMBER); CREATE TABLE Allergy_Type (Allergy TEXT, AllergyType TEXT); CREATE TABLE Has_Allergy (Allergy TEXT, StuID NUMBER);"
      },
      {
        "question": "Who have not?",
        "query": "SELECT * FROM student WHERE stuid NOT IN (SELECT stuid FROM has_allergy WHERE allergy = \"Soy\")",
        "schema": "CREATE TABLE Student (Fname TEXT, LName TEXT, StuID NUMBER); CREATE TABLE Allergy_Type (Allergy TEXT, AllergyType TEXT); CREATE TABLE Has_Allergy (Allergy TEXT, StuID NUMBER);"
      },
      {
        "question": "List their first name and major.",
        "query": "SELECT fname , major FROM student WHERE stuid NOT IN (SELECT stuid FROM has_allergy WHERE allergy = \"Soy\")",
        "schema": "CREATE TABLE Student (Fname TEXT, StuID NUMBER, Major NUMBER, LName TEXT); CREATE TABLE Allergy_Type (Allergy TEXT, AllergyType TEXT); CREATE TABLE Has_Allergy (Allergy TEXT, StuID NUMBER);"
      }
    ]
  ],
  "customers_and_addresses": [
    [
      {
        "question": "Return the information of all the customers.",
        "query": "SELECT * FROM customers",
        "schema": "CREATE TABLE Customers (other_customer_details TEXT, customer_id NUMBER, customer_name TEXT); CREATE TABLE Customer_Orders (customer_id NUMBER); CREATE TABLE Customer_Addresses (customer_id NUMBER); CREATE TABLE Customer_Contact_Channels (customer_id NUMBER);"
      },
      {
        "question": "What are the name of the customers?",
        "query": "SELECT customer_name FROM customers",
        "schema": "CREATE TABLE Customer_Orders (customer_id NUMBER); CREATE TABLE Customer_Addresses (customer_id NUMBER); CREATE TABLE Customer_Contact_Channels (customer_id NUMBER); CREATE TABLE Customers (customer_id NUMBER, customer_name TEXT, other_customer_details TEXT);"
      }
    ],
    [
      {
        "question": "List all the customers.",
        "query": "SELECT * FROM customers",
        "schema": "CREATE TABLE Customer_Addresses (customer_id NUMBER); CREATE TABLE Customer_Contact_Channels (customer_id NUMBER); CREATE TABLE Customer_Orders (customer_id NUMBER); CREATE TABLE Customers (customer_name TEXT, customer_id NUMBER, other_customer_details TEXT);"
      },
      {
        "question": "Count the number of the customers.",
        "query": "SELECT count(*) FROM customers",
        "schema": "CREATE TABLE Customer_Orders (customer_id NUMBER); CREATE TABLE Customers (customer_name TEXT, other_customer_details TEXT, customer_id NUMBER); CREATE TABLE Customer_Contact_Channels (customer_id NUMBER); CREATE TABLE Customer_Addresses (customer_id NUMBER);"
      }
    ],
    [
      {
        "question": "Find the order quantity for each order.",
        "query": "SELECT order_quantity FROM order_items",
        "schema": "CREATE TABLE Customer_Orders (order_id NUMBER); CREATE TABLE Order_Items (order_id NUMBER, product_id NUMBER, order_quantity TEXT); CREATE TABLE Customers (customer_id NUMBER);"
      },
      {
        "question": "What is the average order quantity?",
        "query": "SELECT avg(order_quantity) FROM order_items",
        "schema": "CREATE TABLE Customer_Orders (order_id NUMBER); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Order_Items (order_id NUMBER, product_id NUMBER, order_quantity TEXT);"
      }
    ],
    [
      {
        "question": "Which customers' payment method is \"Cash\"?",
        "query": "SELECT * FROM customers WHERE payment_method = \"Cash\"",
        "schema": "CREATE TABLE Customer_Orders (customer_id NUMBER); CREATE TABLE Customers (customer_id NUMBER, payment_method TEXT, customer_name TEXT);"
      },
      {
        "question": "What are the names of those customers?",
        "query": "SELECT customer_name FROM customers WHERE payment_method = \"Cash\"",
        "schema": "CREATE TABLE Customer_Orders (customer_id NUMBER); CREATE TABLE Customers (payment_method TEXT, customer_name TEXT, customer_id NUMBER);"
      }
    ],
    [
      {
        "question": "List all the customers.",
        "query": "SELECT * FROM customers",
        "schema": "CREATE TABLE Customers (customer_name TEXT, other_customer_details TEXT, customer_id NUMBER); CREATE TABLE Customer_Contact_Channels (customer_id NUMBER); CREATE TABLE Customer_Addresses (customer_id NUMBER); CREATE TABLE Customer_Orders (customer_id NUMBER);"
      },
      {
        "question": "What are the dates they became customers?",
        "query": "SELECT date_became_customer FROM customers",
        "schema": "CREATE TABLE Customers (customer_id NUMBER, other_customer_details TEXT, customer_name TEXT, date_became_customer TIME); CREATE TABLE Customer_Addresses (customer_id NUMBER); CREATE TABLE Customer_Orders (customer_id NUMBER, order_date TIME); CREATE TABLE Customer_Contact_Channels (customer_id NUMBER);"
      },
      {
        "question": "For customer id between 10 and 20, what are the dates they became customers?",
        "query": "SELECT date_became_customer FROM customers WHERE customer_id BETWEEN 10 AND 20",
        "schema": "CREATE TABLE Customer_Addresses (customer_id NUMBER); CREATE TABLE Customer_Contact_Channels (customer_id NUMBER); CREATE TABLE Customers (other_customer_details TEXT, customer_id NUMBER, customer_name TEXT, date_became_customer TIME); CREATE TABLE Customer_Orders (customer_id NUMBER, order_date TIME);"
      }
    ],
    [
      {
        "question": "What is the payment method each customer uses?",
        "query": "SELECT payment_method FROM customers",
        "schema": "CREATE TABLE Customers (other_customer_details TEXT, payment_method TEXT, customer_id NUMBER, customer_name TEXT); CREATE TABLE Customer_Orders (customer_id NUMBER);"
      },
      {
        "question": "Group by the payment method, and return the frequency the method is used.",
        "query": "SELECT count(*) FROM customers GROUP BY payment_method",
        "schema": "CREATE TABLE Customers (other_customer_details TEXT, customer_name TEXT, payment_method TEXT, customer_id NUMBER); CREATE TABLE Customer_Orders (customer_id NUMBER);"
      },
      {
        "question": "Return the payment method that is used most frequently.",
        "query": "SELECT payment_method FROM customers GROUP BY payment_method ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Customers (customer_id NUMBER, other_customer_details TEXT, payment_method TEXT, customer_name TEXT); CREATE TABLE Customer_Orders (customer_id NUMBER);"
      }
    ],
    [
      {
        "question": "For each payment method, count the number of customers who use it.",
        "query": "SELECT count(*) FROM customers GROUP BY payment_method",
        "schema": "CREATE TABLE Customers (customer_id NUMBER, payment_method TEXT, customer_name TEXT); CREATE TABLE Customer_Orders (customer_id NUMBER);"
      },
      {
        "question": "What is the most frequently used payment method?",
        "query": "SELECT payment_method FROM customers GROUP BY payment_method ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Customers (customer_name TEXT, payment_method TEXT, customer_id NUMBER); CREATE TABLE Customer_Orders (customer_id NUMBER);"
      },
      {
        "question": "Return the name of the customers who use this payment method.",
        "query": "SELECT customer_name FROM customers WHERE payment_method = (SELECT payment_method FROM customers GROUP BY payment_method ORDER BY count(*) DESC LIMIT 1)",
        "schema": "CREATE TABLE Customers (customer_name TEXT, customer_id NUMBER, payment_method TEXT); CREATE TABLE Customer_Orders (customer_id NUMBER);"
      }
    ],
    [
      {
        "question": "What payment method does each customer use?",
        "query": "SELECT payment_method FROM customers",
        "schema": "CREATE TABLE Customer_Orders (customer_id NUMBER); CREATE TABLE Customer_Contact_Channels (customer_id NUMBER); CREATE TABLE Customer_Addresses (customer_id NUMBER); CREATE TABLE Customers (customer_name TEXT, customer_id NUMBER, other_customer_details TEXT, payment_method TEXT);"
      },
      {
        "question": "Return all the distinct payment methods used.",
        "query": "SELECT DISTINCT payment_method FROM customers",
        "schema": "CREATE TABLE Customers (payment_method TEXT, customer_id NUMBER, other_customer_details TEXT, customer_name TEXT); CREATE TABLE Customer_Contact_Channels (customer_id NUMBER); CREATE TABLE Customer_Orders (customer_id NUMBER); CREATE TABLE Customer_Addresses (customer_id NUMBER);"
      }
    ],
    [
      {
        "question": "What is the detail of each product?",
        "query": "SELECT product_details FROM products",
        "schema": "CREATE TABLE Products (product_id NUMBER, product_details TEXT); CREATE TABLE Order_Items (product_id NUMBER);"
      },
      {
        "question": "What are the distinct product details?",
        "query": "SELECT DISTINCT product_details FROM products",
        "schema": "CREATE TABLE Products (product_id NUMBER, product_details TEXT); CREATE TABLE Order_Items (product_id NUMBER);"
      }
    ],
    [
      {
        "question": "Return customers whose name contains \"Alex\".",
        "query": "SELECT * FROM customers WHERE customer_name LIKE \"%Alex%\"",
        "schema": "CREATE TABLE Customer_Orders (customer_id NUMBER); CREATE TABLE Customers (customer_name TEXT, customer_id NUMBER, other_customer_details TEXT);"
      },
      {
        "question": "What are the full names of these customers?",
        "query": "SELECT * FROM customers WHERE customer_name LIKE \"%Alex%\"",
        "schema": "CREATE TABLE Customers (other_customer_details TEXT, customer_id NUMBER, customer_name TEXT); CREATE TABLE Customer_Orders (customer_id NUMBER);"
      }
    ],
    [
      {
        "question": "Return products whose details contain the word \"Latte\" or \"Americano\".",
        "query": "SELECT * FROM products WHERE product_details LIKE \"%Latte%\" OR product_details LIKE \"%Americano%\"",
        "schema": "CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Products (product_id NUMBER, product_details TEXT); CREATE TABLE Order_Items (product_id NUMBER); CREATE TABLE Customer_Orders (customer_id NUMBER, order_id NUMBER);"
      },
      {
        "question": "What are the full details for these products?",
        "query": "SELECT product_details FROM products WHERE product_details LIKE \"%Latte%\" OR product_details LIKE \"%Americano%\"",
        "schema": "CREATE TABLE Products (product_id NUMBER, product_details TEXT); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Order_Items (product_id NUMBER); CREATE TABLE Customer_Orders (order_id NUMBER, customer_id NUMBER);"
      }
    ],
    [
      {
        "question": "Find the customer who is named \"Maudie Kertzmann\".",
        "query": "SELECT * FROM customers WHERE customer_name = \"Maudie Kertzmann\"",
        "schema": "CREATE TABLE Customer_Addresses (customer_id NUMBER); CREATE TABLE Customer_Contact_Channels (customer_id NUMBER); CREATE TABLE Customer_Orders (customer_id NUMBER); CREATE TABLE Customers (customer_id NUMBER, customer_name TEXT, other_customer_details TEXT);"
      },
      {
        "question": "What is the address id of this customer?",
        "query": "SELECT t2.address_id FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id WHERE t1.customer_name = \"Maudie Kertzmann\"",
        "schema": "CREATE TABLE Customer_Contact_Channels (customer_id NUMBER); CREATE TABLE Customer_Orders (customer_id NUMBER); CREATE TABLE Customers (customer_id NUMBER, other_customer_details TEXT, customer_name TEXT); CREATE TABLE Customer_Addresses (customer_id NUMBER, address_type TEXT, address_id NUMBER); CREATE TABLE Addresses (city TEXT, address_content TEXT, address_id NUMBER);"
      },
      {
        "question": "What is the address content?",
        "query": "SELECT t3.address_content FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id WHERE t1.customer_name = \"Maudie Kertzmann\"",
        "schema": "CREATE TABLE Customer_Addresses (customer_id NUMBER, address_type TEXT, address_id NUMBER); CREATE TABLE Customer_Contact_Channels (customer_id NUMBER); CREATE TABLE Customer_Orders (customer_id NUMBER); CREATE TABLE Addresses (address_content TEXT, address_id NUMBER, city TEXT); CREATE TABLE Customers (customer_id NUMBER, customer_name TEXT, other_customer_details TEXT);"
      }
    ],
    [
      {
        "question": "Find all the address ids for the city called Lake Geovannyton.",
        "query": "SELECT address_id FROM addresses WHERE city = \"Lake Geovannyton\"",
        "schema": "CREATE TABLE Addresses (address_id NUMBER, address_content TEXT, city TEXT); CREATE TABLE Customer_Addresses (address_id NUMBER);"
      },
      {
        "question": "Find all the customers whose address is in this city.",
        "query": "SELECT * FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id WHERE t3.city = \"Lake Geovannyton\"",
        "schema": "CREATE TABLE Customer_Addresses (customer_id NUMBER, address_id NUMBER, address_type TEXT); CREATE TABLE Customers (customer_id NUMBER, customer_name TEXT); CREATE TABLE Addresses (city TEXT, address_id NUMBER, address_content TEXT);"
      },
      {
        "question": "How many customers are living there?",
        "query": "SELECT count(*) FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id WHERE t3.city = \"Lake Geovannyton\"",
        "schema": "CREATE TABLE Addresses (address_id NUMBER, city TEXT, address_content TEXT); CREATE TABLE Customers (customer_name TEXT, customer_id NUMBER); CREATE TABLE Customer_Addresses (address_type TEXT, customer_id NUMBER, address_id NUMBER);"
      }
    ],
    [
      {
        "question": "What are the ids of addresses in Colorado state?",
        "query": "SELECT address_id FROM addresses WHERE state_province_county = \"Colorado\"",
        "schema": "CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Customer_Addresses (address_id NUMBER); CREATE TABLE Addresses (state_province_county TEXT, address_content TEXT, country TEXT, address_id NUMBER);"
      },
      {
        "question": "Tell me the ids of customers who live there.",
        "query": "SELECT t2.customer_id FROM customer_addresses AS t2 JOIN addresses AS t3 ON t2.address_id = t3.address_id WHERE t3.state_province_county = \"Colorado\"",
        "schema": "CREATE TABLE Customers (customer_name TEXT, customer_id NUMBER); CREATE TABLE Customer_Addresses (customer_id NUMBER, address_id NUMBER, address_type TEXT); CREATE TABLE Addresses (address_id NUMBER, address_content TEXT, state_province_county TEXT, country TEXT);"
      },
      {
        "question": "What are the names of these customers?",
        "query": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id WHERE t3.state_province_county = \"Colorado\"",
        "schema": "CREATE TABLE Customer_Addresses (address_type TEXT, address_id NUMBER, customer_id NUMBER); CREATE TABLE Customers (customer_name TEXT, customer_id NUMBER, other_customer_details TEXT); CREATE TABLE Addresses (address_id NUMBER, address_content TEXT, country TEXT, state_province_county TEXT);"
      }
    ],
    [
      {
        "question": "For each customer, find the city he or she lives in.",
        "query": "SELECT t3.city FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id",
        "schema": "CREATE TABLE Addresses (address_id NUMBER, city TEXT, address_content TEXT); CREATE TABLE Customers (customer_id NUMBER, customer_name TEXT); CREATE TABLE Customer_Orders (customer_id NUMBER); CREATE TABLE Customer_Addresses (customer_id NUMBER, address_type TEXT, address_id NUMBER);"
      },
      {
        "question": "What are all the distinct cities customers live in?",
        "query": "SELECT DISTINCT t3.city FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id",
        "schema": "CREATE TABLE Addresses (city TEXT, address_id NUMBER, address_content TEXT); CREATE TABLE Customers (customer_name TEXT, customer_id NUMBER); CREATE TABLE Customer_Addresses (address_type TEXT, address_id NUMBER, customer_id NUMBER); CREATE TABLE Customer_Orders (customer_id NUMBER);"
      },
      {
        "question": "What are the cities no customers live in?",
        "query": "SELECT city FROM addresses WHERE city NOT IN ( SELECT DISTINCT t3.city FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id)",
        "schema": "CREATE TABLE Customers (customer_id NUMBER, customer_name TEXT); CREATE TABLE Customer_Orders (customer_id NUMBER); CREATE TABLE Addresses (address_content TEXT, address_id NUMBER, city TEXT); CREATE TABLE Customer_Addresses (address_id NUMBER, customer_id NUMBER, address_type TEXT);"
      }
    ],
    [
      {
        "question": "List all the cities customers live in.",
        "query": "SELECT t3.city FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id",
        "schema": "CREATE TABLE Addresses (address_id NUMBER, city TEXT); CREATE TABLE Customer_Addresses (address_type TEXT, address_id NUMBER, customer_id NUMBER); CREATE TABLE Customers (customer_id NUMBER);"
      },
      {
        "question": "Group by cities and count how many customers live there.",
        "query": "SELECT count(*) FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id GROUP BY t3.city",
        "schema": "CREATE TABLE Addresses (address_id NUMBER, city TEXT); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Customer_Addresses (customer_id NUMBER, address_type TEXT, address_id NUMBER);"
      },
      {
        "question": "Which city has the most customers?",
        "query": "SELECT t3.city FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id GROUP BY t3.city ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Customer_Addresses (address_id NUMBER, address_type TEXT, customer_id NUMBER); CREATE TABLE Addresses (address_id NUMBER, city TEXT); CREATE TABLE Customers (customer_id NUMBER);"
      }
    ],
    [
      {
        "question": "List all the addresses.",
        "query": "SELECT * FROM addresses",
        "schema": "CREATE TABLE Customer_Addresses (address_id NUMBER, address_type TEXT); CREATE TABLE Addresses (address_content TEXT, city TEXT, address_id NUMBER);"
      },
      {
        "question": "What is the list of distinct cities?",
        "query": "SELECT DISTINCT city FROM addresses",
        "schema": "CREATE TABLE Customer_Addresses (address_id NUMBER, address_type TEXT); CREATE TABLE Addresses (address_content TEXT, address_id NUMBER, city TEXT);"
      }
    ],
    [
      {
        "question": "Find the address with post code 255.",
        "query": "SELECT * FROM addresses WHERE zip_postcode = 255",
        "schema": "CREATE TABLE Addresses (address_id NUMBER, city TEXT, zip_postcode TEXT, state_province_county TEXT, address_content TEXT); CREATE TABLE Customer_Addresses (address_id NUMBER);"
      },
      {
        "question": "Which city is this address in?",
        "query": "SELECT city FROM addresses WHERE zip_postcode = 255",
        "schema": "CREATE TABLE Addresses (zip_postcode TEXT, address_content TEXT, state_province_county TEXT, city TEXT, address_id NUMBER); CREATE TABLE Customer_Addresses (address_id NUMBER);"
      }
    ],
    [
      {
        "question": "Find the address with post code starting with 4.",
        "query": "SELECT * FROM addresses WHERE zip_postcode LIKE \"4%\"",
        "schema": "CREATE TABLE Customer_Addresses (address_id NUMBER); CREATE TABLE Addresses (city TEXT, address_id NUMBER, address_content TEXT, zip_postcode TEXT);"
      },
      {
        "question": "What are the state and country of these addresses?",
        "query": "SELECT state_province_county , country FROM addresses WHERE zip_postcode LIKE \"4%\"",
        "schema": "CREATE TABLE Addresses (zip_postcode TEXT, address_id NUMBER, state_province_county TEXT, address_content TEXT, country TEXT, city TEXT); CREATE TABLE Customer_Addresses (address_id NUMBER);"
      }
    ],
    [
      {
        "question": "Group all the addresses by the country.",
        "query": "SELECT * FROM addresses GROUP BY country",
        "schema": "CREATE TABLE Customer_Addresses (address_id NUMBER); CREATE TABLE Addresses (state_province_county TEXT, address_content TEXT, country TEXT, address_id NUMBER);"
      },
      {
        "question": "Which countries have more than four addresses listed?",
        "query": "SELECT country FROM addresses GROUP BY country HAVING count(address_id) > 4",
        "schema": "CREATE TABLE Addresses (country TEXT, address_id NUMBER, state_province_county TEXT, address_content TEXT); CREATE TABLE Customer_Addresses (address_id NUMBER);"
      }
    ],
    [
      {
        "question": "List all the contact channel codes.",
        "query": "SELECT channel_code FROM customer_contact_channels",
        "schema": "CREATE TABLE Customer_Addresses (customer_id NUMBER); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Customer_Contact_Channels (active_from_date TIME, customer_id NUMBER, channel_code TEXT, active_to_date TIME, contact_number TEXT);"
      },
      {
        "question": "For each contact channel code, return how many times it was used.",
        "query": "SELECT count(customer_id) FROM customer_contact_channels GROUP BY channel_code",
        "schema": "CREATE TABLE Customer_Contact_Channels (contact_number TEXT, active_from_date TIME, channel_code TEXT, active_to_date TIME, customer_id NUMBER); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Customer_Addresses (customer_id NUMBER);"
      },
      {
        "question": "Which contact channel codes were used less than 5 times?",
        "query": "SELECT channel_code FROM customer_contact_channels GROUP BY channel_code HAVING count(customer_id) < 5",
        "schema": "CREATE TABLE Customer_Addresses (customer_id NUMBER); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Customer_Contact_Channels (active_from_date TIME, channel_code TEXT, contact_number TEXT, customer_id NUMBER, active_to_date TIME);"
      }
    ],
    [
      {
        "question": "Find the customer whose name is \"Tillman Ernser\".",
        "query": "SELECT * FROM customers WHERE customer_name = \"Tillman Ernser\"",
        "schema": "CREATE TABLE Customers (customer_name TEXT, other_customer_details TEXT, customer_id NUMBER); CREATE TABLE Customer_Addresses (customer_id NUMBER); CREATE TABLE Customer_Orders (customer_id NUMBER, order_details TEXT);"
      },
      {
        "question": "What are the channel codes used by this person?",
        "query": "SELECT DISTINCT channel_code FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id = t2.customer_id WHERE t1.customer_name = \"Tillman Ernser\"",
        "schema": "CREATE TABLE Customer_Addresses (customer_id NUMBER); CREATE TABLE Customers (other_customer_details TEXT, customer_name TEXT, customer_id NUMBER); CREATE TABLE Customer_Contact_Channels (channel_code TEXT, customer_id NUMBER, contact_number TEXT); CREATE TABLE Customer_Orders (order_details TEXT, customer_id NUMBER);"
      }
    ],
    [
      {
        "question": "What is the \"active to date\" for each customer?",
        "query": "SELECT active_to_date FROM customer_contact_channels",
        "schema": "CREATE TABLE Customer_Addresses (customer_id NUMBER); CREATE TABLE Customer_Orders (order_status TEXT, order_date TIME, customer_id NUMBER); CREATE TABLE Customers (customer_name TEXT, customer_id NUMBER, date_became_customer TIME); CREATE TABLE Customer_Contact_Channels (active_from_date TIME, customer_id NUMBER, active_to_date TIME);"
      },
      {
        "question": "What is the latest \"active to date\" for each customer?",
        "query": "SELECT max(active_to_date) FROM customer_contact_channels GROUP BY customer_id",
        "schema": "CREATE TABLE Customer_Contact_Channels (customer_id NUMBER, active_from_date TIME, contact_number TEXT, active_to_date TIME, channel_code TEXT); CREATE TABLE Customer_Orders (customer_id NUMBER, order_date TIME, order_status TEXT); CREATE TABLE Customer_Addresses (customer_id NUMBER); CREATE TABLE Customers (customer_name TEXT, date_became_customer TIME, customer_id NUMBER);"
      },
      {
        "question": "Find that information for the customer named \"Tillman Ernser\".",
        "query": "SELECT max(t2.active_to_date) FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id = t2.customer_id WHERE t1.customer_name = \"Tillman Ernser\"",
        "schema": "CREATE TABLE Customer_Orders (customer_id NUMBER, order_date TIME, order_status TEXT); CREATE TABLE Customers (customer_name TEXT, customer_id NUMBER, date_became_customer TIME); CREATE TABLE Customer_Contact_Channels (customer_id NUMBER, active_to_date TIME, active_from_date TIME, channel_code TEXT, contact_number TEXT); CREATE TABLE Customer_Addresses (customer_id NUMBER);"
      }
    ],
    [
      {
        "question": "For each contact channel, find when it started and ended being active.",
        "query": "SELECT active_to_date , active_from_date FROM customer_contact_channels",
        "schema": "CREATE TABLE Customer_Contact_Channels (active_to_date TIME, channel_code TEXT, customer_id NUMBER, active_from_date TIME, contact_number TEXT); CREATE TABLE Customers (customer_id NUMBER);"
      },
      {
        "question": "What is the time span between the starting date and ending date?",
        "query": "SELECT active_to_date - active_from_date FROM customer_contact_channels",
        "schema": "CREATE TABLE Customer_Contact_Channels (active_to_date TIME, contact_number TEXT, channel_code TEXT, active_from_date TIME, customer_id NUMBER); CREATE TABLE Customers (customer_id NUMBER);"
      },
      {
        "question": "What is the average across all the channels?",
        "query": "SELECT avg(active_to_date - active_from_date) FROM customer_contact_channels",
        "schema": "CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Customer_Contact_Channels (active_from_date TIME, channel_code TEXT, customer_id NUMBER, active_to_date TIME, contact_number TEXT);"
      }
    ],
    [
      {
        "question": "Tell me the active duration for each customer contact channel.",
        "query": "SELECT active_to_date - active_from_date FROM customer_contact_channels",
        "schema": "CREATE TABLE Customer_Addresses (customer_id NUMBER); CREATE TABLE Customer_Contact_Channels (customer_id NUMBER, contact_number TEXT, channel_code TEXT, active_to_date TIME, active_from_date TIME); CREATE TABLE Customers (customer_name TEXT, customer_id NUMBER);"
      },
      {
        "question": "Among them, what is the longest active duration?",
        "query": "SELECT active_to_date - active_from_date FROM customer_contact_channels ORDER BY (active_to_date - active_from_date) DESC LIMIT 1",
        "schema": "CREATE TABLE Customer_Contact_Channels (active_from_date TIME, contact_number TEXT, active_to_date TIME, customer_id NUMBER, channel_code TEXT); CREATE TABLE Customers (customer_name TEXT, customer_id NUMBER); CREATE TABLE Customer_Addresses (customer_id NUMBER);"
      },
      {
        "question": "What is the channel code and contact number of the customer contact channel whose active duration was the longest",
        "query": "SELECT channel_code , contact_number FROM customer_contact_channels WHERE active_to_date - active_from_date = (SELECT active_to_date - active_from_date FROM customer_contact_channels ORDER BY (active_to_date - active_from_date) DESC LIMIT 1)",
        "schema": "CREATE TABLE Customer_Addresses (customer_id NUMBER); CREATE TABLE Customer_Contact_Channels (active_from_date TIME, customer_id NUMBER, active_to_date TIME, contact_number TEXT, channel_code TEXT); CREATE TABLE Customers (customer_id NUMBER, customer_name TEXT);"
      }
    ],
    [
      {
        "question": "Which customers use email as the contact channel?",
        "query": "SELECT * FROM customer_contact_channels WHERE channel_code = 'Email'",
        "schema": "CREATE TABLE Customer_Addresses (customer_id NUMBER); CREATE TABLE Customer_Contact_Channels (contact_number TEXT, channel_code TEXT, customer_id NUMBER); CREATE TABLE Customers (customer_id NUMBER, customer_name TEXT);"
      },
      {
        "question": "What are the dates these customers became active?",
        "query": "SELECT active_from_date FROM customer_contact_channels WHERE channel_code = 'Email'",
        "schema": "CREATE TABLE Customers (customer_id NUMBER, date_became_customer TIME, customer_name TEXT); CREATE TABLE Customer_Addresses (customer_id NUMBER); CREATE TABLE Customer_Contact_Channels (channel_code TEXT, active_to_date TIME, active_from_date TIME, contact_number TEXT, customer_id NUMBER);"
      },
      {
        "question": "What are the name and active date of these customers?",
        "query": "SELECT t1.customer_name , t2.active_from_date FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id = t2.customer_id WHERE t2.channel_code = 'Email'",
        "schema": "CREATE TABLE Customer_Addresses (customer_id NUMBER); CREATE TABLE Customers (customer_id NUMBER, customer_name TEXT, date_became_customer TIME); CREATE TABLE Customer_Contact_Channels (channel_code TEXT, customer_id NUMBER, contact_number TEXT, active_from_date TIME, active_to_date TIME);"
      }
    ],
    [
      {
        "question": "What is the largest order quantity listed in the database?",
        "query": "SELECT max(order_quantity) FROM order_items",
        "schema": "CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Order_Items (order_quantity TEXT, product_id NUMBER, order_id NUMBER); CREATE TABLE Customer_Orders (order_id NUMBER);"
      },
      {
        "question": "What is the name of the customer who made that order?",
        "query": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id WHERE t3.order_quantity = ( SELECT max(order_quantity) FROM order_items)",
        "schema": "CREATE TABLE Order_Items (product_id NUMBER, order_id NUMBER, order_quantity TEXT); CREATE TABLE Customers (other_customer_details TEXT, customer_name TEXT, customer_id NUMBER); CREATE TABLE Customer_Orders (order_id NUMBER, order_details TEXT, customer_id NUMBER);"
      }
    ],
    [
      {
        "question": "Tell me the customer name for each order.",
        "query": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id",
        "schema": "CREATE TABLE Order_Items (order_quantity TEXT, order_id NUMBER); CREATE TABLE Customer_Addresses (customer_id NUMBER); CREATE TABLE Customers (customer_id NUMBER, customer_name TEXT, other_customer_details TEXT); CREATE TABLE Customer_Orders (order_details TEXT, order_id NUMBER, order_status TEXT, customer_id NUMBER);"
      },
      {
        "question": "What is the total quantity ordered by each customer?",
        "query": "SELECT sum(t3.order_quantity) FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id GROUP BY t1.customer_name",
        "schema": "CREATE TABLE Order_Items (order_id NUMBER, order_quantity TEXT); CREATE TABLE Customers (customer_id NUMBER, customer_name TEXT, other_customer_details TEXT); CREATE TABLE Customer_Addresses (customer_id NUMBER); CREATE TABLE Customer_Orders (order_details TEXT, customer_id NUMBER, order_id NUMBER, order_status TEXT);"
      },
      {
        "question": "Give me the name of the customer who ordered the largest quantity in total.",
        "query": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id GROUP BY t1.customer_name ORDER BY sum(t3.order_quantity) DESC LIMIT 1",
        "schema": "CREATE TABLE Customer_Orders (order_details TEXT, order_status TEXT, order_id NUMBER, customer_id NUMBER); CREATE TABLE Customer_Addresses (customer_id NUMBER); CREATE TABLE Customers (customer_id NUMBER, customer_name TEXT, other_customer_details TEXT); CREATE TABLE Order_Items (order_id NUMBER, order_quantity TEXT);"
      }
    ],
    [
      {
        "question": "What is the total quantity ordered by each customer?",
        "query": "SELECT sum(t3.order_quantity) FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id GROUP BY t1.customer_name",
        "schema": "CREATE TABLE Order_Items (order_quantity TEXT, order_id NUMBER); CREATE TABLE Customer_Orders (order_details TEXT, customer_id NUMBER, order_id NUMBER, order_status TEXT); CREATE TABLE Customer_Addresses (customer_id NUMBER); CREATE TABLE Customers (customer_id NUMBER, customer_name TEXT);"
      },
      {
        "question": "Return the customer who ordered the least quantity in total.",
        "query": "SELECT * FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id GROUP BY t1.customer_name ORDER BY sum(t3.order_quantity) LIMIT 1",
        "schema": "CREATE TABLE Order_Items (order_id NUMBER, order_quantity TEXT); CREATE TABLE Customer_Addresses (customer_id NUMBER); CREATE TABLE Customers (customer_id NUMBER, customer_name TEXT); CREATE TABLE Customer_Orders (order_id NUMBER, customer_id NUMBER, order_details TEXT, order_status TEXT);"
      },
      {
        "question": "What is that customer's payment method?",
        "query": "SELECT t1.payment_method FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id GROUP BY t1.customer_name ORDER BY sum(t3.order_quantity) LIMIT 1",
        "schema": "CREATE TABLE Customers (payment_method TEXT, customer_id NUMBER, customer_name TEXT); CREATE TABLE Customer_Orders (order_details TEXT, customer_id NUMBER, order_status TEXT, order_id NUMBER); CREATE TABLE Order_Items (order_id NUMBER, order_quantity TEXT); CREATE TABLE Customer_Addresses (customer_id NUMBER);"
      }
    ],
    [
      {
        "question": "Find the id of the product ordered in each order.",
        "query": "SELECT product_id FROM order_items",
        "schema": "CREATE TABLE Order_Items (order_id NUMBER, order_quantity TEXT, product_id NUMBER); CREATE TABLE Customer_Orders (order_id NUMBER); CREATE TABLE Products (product_id NUMBER, product_details TEXT);"
      },
      {
        "question": "What are the ids of products ordered by the customer named Rodrick Heaney?",
        "query": "SELECT product_id FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id WHERE t1.customer_name = \"Rodrick Heaney\"",
        "schema": "CREATE TABLE Customers (customer_id NUMBER, customer_name TEXT); CREATE TABLE Customer_Addresses (customer_id NUMBER); CREATE TABLE Customer_Orders (order_details TEXT, customer_id NUMBER, order_id NUMBER); CREATE TABLE Order_Items (order_quantity TEXT, order_id NUMBER, product_id NUMBER); CREATE TABLE Products (product_id NUMBER, product_details TEXT);"
      },
      {
        "question": "How many distinct products has he bought?",
        "query": "SELECT count(DISTINCT product_id) FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id WHERE t1.customer_name = \"Rodrick Heaney\"",
        "schema": "CREATE TABLE Customer_Addresses (customer_id NUMBER); CREATE TABLE Order_Items (order_id NUMBER, order_quantity TEXT, product_id NUMBER); CREATE TABLE Products (product_details TEXT, product_id NUMBER); CREATE TABLE Customers (customer_id NUMBER, customer_name TEXT); CREATE TABLE Customer_Orders (order_details TEXT, order_id NUMBER, customer_id NUMBER);"
      }
    ],
    [
      {
        "question": "Find the id of product ordered in each order.",
        "query": "SELECT product_id FROM order_items",
        "schema": "CREATE TABLE Products (product_id NUMBER); CREATE TABLE Order_Items (order_id NUMBER, order_quantity TEXT, product_id NUMBER); CREATE TABLE Customer_Orders (order_id NUMBER);"
      },
      {
        "question": "What are the ids of products ordered by the customer named Rodrick Heaney?",
        "query": "SELECT product_id FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id WHERE t1.customer_name = \"Rodrick Heaney\"",
        "schema": "CREATE TABLE Order_Items (product_id NUMBER, order_id NUMBER, order_quantity TEXT); CREATE TABLE Customers (customer_id NUMBER, customer_name TEXT); CREATE TABLE Products (product_id NUMBER, product_details TEXT); CREATE TABLE Customer_Orders (order_id NUMBER, order_details TEXT, customer_id NUMBER);"
      },
      {
        "question": "What is the total quantity of products bought by him?",
        "query": "SELECT sum(t3.order_quantity) FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id WHERE t1.customer_name = \"Rodrick Heaney\"",
        "schema": "CREATE TABLE Customers (customer_name TEXT, customer_id NUMBER); CREATE TABLE Order_Items (order_quantity TEXT, product_id NUMBER, order_id NUMBER); CREATE TABLE Products (product_details TEXT, product_id NUMBER); CREATE TABLE Customer_Orders (customer_id NUMBER, order_id NUMBER, order_details TEXT);"
      }
    ],
    [
      {
        "question": "Which customer order have cancelled status?",
        "query": "SELECT * FROM customer_orders WHERE order_status = \"Cancelled\"",
        "schema": "CREATE TABLE Customer_Orders (customer_id NUMBER, order_id NUMBER, order_status TEXT, order_details TEXT, order_date TIME); CREATE TABLE Order_Items (order_id NUMBER); CREATE TABLE Customers (customer_id NUMBER, customer_name TEXT, date_became_customer TIME);"
      },
      {
        "question": "How many customers have cancelled status?",
        "query": "SELECT count(DISTINCT customer_id) FROM customer_orders WHERE order_status = \"Cancelled\"",
        "schema": "CREATE TABLE Customers (customer_name TEXT, date_became_customer TIME, customer_id NUMBER); CREATE TABLE Order_Items (order_id NUMBER); CREATE TABLE Customer_Orders (customer_id NUMBER, order_details TEXT, order_id NUMBER, order_status TEXT, order_date TIME);"
      }
    ],
    [
      {
        "question": "Which customer orders have \"Second time\" as order detail?",
        "query": "SELECT * FROM customer_orders WHERE order_details = \"Second time\"",
        "schema": "CREATE TABLE Order_Items (order_id NUMBER); CREATE TABLE Customer_Orders (order_status TEXT, order_date TIME, customer_id NUMBER, order_details TEXT, order_id NUMBER); CREATE TABLE Customers (other_customer_details TEXT, date_became_customer TIME, customer_id NUMBER, customer_name TEXT);"
      },
      {
        "question": "How many?",
        "query": "SELECT count(*) FROM customer_orders WHERE order_details = \"Second time\"",
        "schema": "CREATE TABLE Customer_Orders (order_id NUMBER, order_date TIME, customer_id NUMBER, order_details TEXT, order_status TEXT); CREATE TABLE Order_Items (order_id NUMBER); CREATE TABLE Customers (other_customer_details TEXT, customer_id NUMBER, date_became_customer TIME, customer_name TEXT);"
      }
    ],
    [
      {
        "question": "Find all the customer orders whose status is \"Delivered\".",
        "query": "SELECT * FROM customer_orders WHERE order_status = \"Delivered\"",
        "schema": "CREATE TABLE Customers (customer_name TEXT, customer_id NUMBER); CREATE TABLE Customer_Orders (order_status TEXT, order_id NUMBER, customer_id NUMBER, order_details TEXT); CREATE TABLE Order_Items (order_id NUMBER);"
      },
      {
        "question": "What are the customer name and date for those orders?",
        "query": "SELECT t1.customer_name , t2.order_date FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id WHERE order_status = \"Delivered\"",
        "schema": "CREATE TABLE Customer_Orders (order_status TEXT, order_id NUMBER, order_date TIME, order_details TEXT, customer_id NUMBER); CREATE TABLE Customers (customer_name TEXT, date_became_customer TIME, customer_id NUMBER); CREATE TABLE Order_Items (order_id NUMBER);"
      }
    ],
    [
      {
        "question": "List all the customer orders in the \"Cancelled\" status.",
        "query": "SELECT * FROM customer_orders WHERE order_status = \"Cancelled\"",
        "schema": "CREATE TABLE Customer_Orders (order_id NUMBER, order_details TEXT, order_date TIME, customer_id NUMBER, order_status TEXT); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Order_Items (order_id NUMBER);"
      },
      {
        "question": "Find the order quantity for these orders.",
        "query": "SELECT t2.order_quantity FROM customer_orders AS t1 JOIN order_items AS t2 ON t1.order_id = t2.order_id WHERE t1.order_status = \"Cancelled\"",
        "schema": "CREATE TABLE Customer_Orders (order_date TIME, order_id NUMBER, customer_id NUMBER, order_details TEXT, order_status TEXT); CREATE TABLE Order_Items (order_quantity TEXT, order_id NUMBER, product_id NUMBER); CREATE TABLE Customers (customer_id NUMBER);"
      },
      {
        "question": "Find the total quantity of products associated with those orders.",
        "query": "SELECT sum(t2.order_quantity) FROM customer_orders AS t1 JOIN order_items AS t2 ON t1.order_id = t2.order_id WHERE t1.order_status = \"Cancelled\"",
        "schema": "CREATE TABLE Order_Items (order_quantity TEXT, product_id NUMBER, order_id NUMBER); CREATE TABLE Customer_Orders (order_status TEXT, customer_id NUMBER, order_date TIME, order_id NUMBER, order_details TEXT); CREATE TABLE Products (product_id NUMBER); CREATE TABLE Customers (customer_id NUMBER);"
      }
    ],
    [
      {
        "question": "Find all the customer orders that made before 2018-03-17 07:13:53.",
        "query": "SELECT * FROM customer_orders WHERE order_date < '2018-03-17 07:13:53'",
        "schema": "CREATE TABLE Customer_Orders (order_id NUMBER, customer_id NUMBER, order_status TEXT, order_details TEXT, order_date TIME); CREATE TABLE Customers (customer_name TEXT, date_became_customer TIME, customer_id NUMBER);"
      },
      {
        "question": "Compute the total quantity of items purchased in this order.",
        "query": "SELECT sum(t2.order_quantity) FROM customer_orders AS t1 JOIN order_items AS t2 ON t1.order_id = t2.order_id WHERE t1.order_date < '2018-03-17 07:13:53'",
        "schema": "CREATE TABLE Order_Items (order_quantity TEXT, product_id NUMBER, order_id NUMBER); CREATE TABLE Customer_Orders (order_date TIME, order_id NUMBER, customer_id NUMBER, order_details TEXT, order_status TEXT); CREATE TABLE Customers (date_became_customer TIME, customer_name TEXT, customer_id NUMBER);"
      }
    ],
    [
      {
        "question": "Order all the customer orders by the descending order date.",
        "query": "SELECT * FROM customer_orders ORDER BY order_date DESC",
        "schema": "CREATE TABLE Customer_Orders (order_status TEXT, order_details TEXT, order_id NUMBER, customer_id NUMBER, order_date TIME); CREATE TABLE Order_Items (order_id NUMBER); CREATE TABLE Customers (date_became_customer TIME, customer_id NUMBER);"
      },
      {
        "question": "What is the most recent order?",
        "query": "SELECT * FROM customer_orders ORDER BY order_date DESC LIMIT 1",
        "schema": "CREATE TABLE Customers (customer_id NUMBER, date_became_customer TIME); CREATE TABLE Order_Items (order_id NUMBER); CREATE TABLE Customer_Orders (order_details TEXT, customer_id NUMBER, order_date TIME, order_status TEXT, order_id NUMBER);"
      },
      {
        "question": "Who made that order?",
        "query": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id ORDER BY t2.order_date DESC LIMIT 1",
        "schema": "CREATE TABLE Customers (customer_name TEXT, date_became_customer TIME, customer_id NUMBER); CREATE TABLE Customer_Orders (order_date TIME, customer_id NUMBER, order_id NUMBER, order_details TEXT, order_status TEXT); CREATE TABLE Order_Items (order_id NUMBER);"
      }
    ],
    [
      {
        "question": "Count the number of times each product is ordered.",
        "query": "SELECT count(*) FROM order_items GROUP BY product_id",
        "schema": "CREATE TABLE Products (product_id NUMBER, product_details TEXT); CREATE TABLE Customer_Orders (order_date TIME, order_id NUMBER); CREATE TABLE Order_Items (product_id NUMBER, order_id NUMBER, order_quantity TEXT);"
      },
      {
        "question": "What is the most frequently ordered product?",
        "query": "SELECT * FROM order_items GROUP BY product_id ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Customer_Orders (order_date TIME, order_id NUMBER); CREATE TABLE Products (product_id NUMBER, product_details TEXT); CREATE TABLE Order_Items (product_id NUMBER, order_id NUMBER, order_quantity TEXT);"
      },
      {
        "question": "Tell me the detail of the product.",
        "query": "SELECT t2.product_details FROM order_items AS t1 JOIN products AS t2 ON t1.product_id = t2.product_id GROUP BY t1.product_id ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Customer_Orders (order_id NUMBER, order_date TIME, order_details TEXT); CREATE TABLE Order_Items (order_quantity TEXT, product_id NUMBER, order_id NUMBER); CREATE TABLE Products (product_details TEXT, product_id NUMBER);"
      }
    ],
    [
      {
        "question": "Find the total quantity order for each product.",
        "query": "SELECT sum(order_quantity) FROM order_items GROUP BY product_id",
        "schema": "CREATE TABLE Order_Items (order_quantity TEXT, order_id NUMBER, product_id NUMBER); CREATE TABLE Customer_Orders (order_id NUMBER); CREATE TABLE Products (product_id NUMBER, product_details TEXT);"
      },
      {
        "question": "What is the id of the product whose total order quantity is the largest?",
        "query": "SELECT product_id FROM order_items GROUP BY product_id ORDER BY sum(order_quantity) LIMIT 1",
        "schema": "CREATE TABLE Customer_Orders (order_id NUMBER); CREATE TABLE Products (product_details TEXT, product_id NUMBER); CREATE TABLE Order_Items (order_id NUMBER, product_id NUMBER, order_quantity TEXT);"
      },
      {
        "question": "What are the name and ID of that product?",
        "query": "SELECT t2.product_details , t2.product_id FROM order_items AS t1 JOIN products AS t2 ON t1.product_id = t2.product_id GROUP BY t1.product_id ORDER BY t1.order_quantity LIMIT 1",
        "schema": "CREATE TABLE Order_Items (order_quantity TEXT, product_id NUMBER, order_id NUMBER); CREATE TABLE Products (product_details TEXT, product_id NUMBER); CREATE TABLE Customer_Orders (order_id NUMBER);"
      }
    ],
    [
      {
        "question": "List all addresses in East Julianaside, Texas.",
        "query": "SELECT address_content FROM addresses WHERE city = \"East Julianaside\" AND state_province_county = \"Texas\"",
        "schema": "CREATE TABLE Customer_Addresses (address_id NUMBER); CREATE TABLE Addresses (city TEXT, state_province_county TEXT, address_id NUMBER, address_content TEXT, country TEXT);"
      },
      {
        "question": "List all addresses in Gleasonmouth, Arizona.",
        "query": "SELECT address_content FROM addresses WHERE city = \"Gleasonmouth\" AND state_province_county = \"Arizona\"",
        "schema": "CREATE TABLE Addresses (country TEXT, state_province_county TEXT, address_id NUMBER, address_content TEXT, city TEXT); CREATE TABLE Customer_Addresses (address_id NUMBER);"
      },
      {
        "question": "List all addresses in either of them.",
        "query": "SELECT address_content FROM addresses WHERE city = \"East Julianaside\" AND state_province_county = \"Texas\" UNION SELECT address_content FROM addresses WHERE city = \"Gleasonmouth\" AND state_province_county = \"Arizona\"",
        "schema": "CREATE TABLE Customer_Addresses (address_id NUMBER); CREATE TABLE Addresses (state_province_county TEXT, address_id NUMBER, country TEXT, address_content TEXT, city TEXT);"
      }
    ],
    [
      {
        "question": "List all the customers' payment method",
        "query": "SELECT payment_method FROM customers",
        "schema": "CREATE TABLE Customers (customer_name TEXT, customer_id NUMBER, payment_method TEXT); CREATE TABLE Customer_Orders (customer_id NUMBER);"
      },
      {
        "question": "Which customer does not use Cash?",
        "query": "SELECT * FROM customers WHERE payment_method ! = 'Cash'",
        "schema": "CREATE TABLE Customers (customer_id NUMBER, payment_method TEXT, customer_name TEXT); CREATE TABLE Customer_Addresses (customer_id NUMBER); CREATE TABLE Customer_Orders (customer_id NUMBER);"
      },
      {
        "question": "What is the name of the customer?",
        "query": "SELECT customer_name FROM customers WHERE payment_method ! = 'Cash'",
        "schema": "CREATE TABLE Customer_Addresses (customer_id NUMBER); CREATE TABLE Customers (customer_name TEXT, payment_method TEXT, customer_id NUMBER); CREATE TABLE Customer_Orders (customer_id NUMBER);"
      }
    ],
    [
      {
        "question": "Find the names of all the customers.",
        "query": "SELECT customer_name FROM customers",
        "schema": "CREATE TABLE Customer_Addresses (customer_id NUMBER); CREATE TABLE Customer_Orders (customer_id NUMBER); CREATE TABLE Customers (customer_id NUMBER, other_customer_details TEXT, customer_name TEXT);"
      },
      {
        "question": "What are the names of customers who bought the product \"Latte\" before?",
        "query": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id JOIN products AS t4 ON t3.product_id = t4.product_id WHERE product_details = 'Latte'",
        "schema": "CREATE TABLE Customer_Orders (order_id NUMBER, customer_id NUMBER, order_date TIME, order_details TEXT); CREATE TABLE Order_Items (order_id NUMBER, product_id NUMBER, order_quantity TEXT); CREATE TABLE Customer_Addresses (customer_id NUMBER); CREATE TABLE Customers (other_customer_details TEXT, customer_id NUMBER, customer_name TEXT); CREATE TABLE Products (product_details TEXT, product_id NUMBER);"
      },
      {
        "question": "Which customers never bought Latte\"?",
        "query": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id JOIN products AS t4 ON t3.product_id = t4.product_id WHERE product_details = 'Latte'",
        "schema": "CREATE TABLE Customer_Addresses (customer_id NUMBER); CREATE TABLE Order_Items (order_quantity TEXT, order_id NUMBER, product_id NUMBER); CREATE TABLE Customers (customer_name TEXT, other_customer_details TEXT, customer_id NUMBER); CREATE TABLE Customer_Orders (order_details TEXT, customer_id NUMBER, order_date TIME, order_id NUMBER); CREATE TABLE Products (product_details TEXT, product_id NUMBER);"
      }
    ],
    [
      {
        "question": "List the names of all the customers.",
        "query": "SELECT customer_name FROM customers",
        "schema": "CREATE TABLE Customer_Orders (customer_id NUMBER); CREATE TABLE Customers (customer_id NUMBER, other_customer_details TEXT, customer_name TEXT);"
      },
      {
        "question": "What are the names of customers who have made some orders before?",
        "query": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id",
        "schema": "CREATE TABLE Customers (other_customer_details TEXT, customer_id NUMBER, customer_name TEXT); CREATE TABLE Customer_Orders (order_details TEXT, order_id NUMBER, order_status TEXT, customer_id NUMBER, order_date TIME);"
      },
      {
        "question": "Which customers never made an order?",
        "query": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id",
        "schema": "CREATE TABLE Customers (other_customer_details TEXT, customer_id NUMBER, customer_name TEXT); CREATE TABLE Customer_Orders (order_date TIME, order_details TEXT, customer_id NUMBER, order_id NUMBER, order_status TEXT);"
      }
    ],
    [
      {
        "question": "List the names of customers who have purchased Latte.",
        "query": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id JOIN products AS t4 ON t3.product_id = t4.product_id WHERE product_details = 'Latte'",
        "schema": "CREATE TABLE Customer_Addresses (address_id NUMBER, customer_id NUMBER); CREATE TABLE Products (product_id NUMBER, product_details TEXT); CREATE TABLE Order_Items (order_quantity TEXT, product_id NUMBER, order_id NUMBER); CREATE TABLE Addresses (city TEXT, address_id NUMBER); CREATE TABLE Customer_Orders (customer_id NUMBER, order_id NUMBER, order_details TEXT, order_status TEXT); CREATE TABLE Customers (customer_name TEXT, customer_id NUMBER, payment_method TEXT);"
      },
      {
        "question": "Give me the names of customers who have purchased Americano.",
        "query": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id JOIN products AS t4 ON t3.product_id = t4.product_id WHERE product_details = 'Americano'",
        "schema": "CREATE TABLE Customers (customer_id NUMBER, customer_name TEXT, other_customer_details TEXT, payment_method TEXT); CREATE TABLE Addresses (address_id NUMBER, city TEXT); CREATE TABLE Customer_Orders (order_details TEXT, customer_id NUMBER, order_id NUMBER, order_status TEXT); CREATE TABLE Customer_Addresses (address_id NUMBER, customer_id NUMBER); CREATE TABLE Order_Items (order_quantity TEXT, order_id NUMBER, product_id NUMBER); CREATE TABLE Products (product_details TEXT, product_id NUMBER);"
      },
      {
        "question": "Which customers have ordered both?",
        "query": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id JOIN products AS t4 ON t3.product_id = t4.product_id WHERE product_details = 'Latte' INTERSECT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id JOIN products AS t4 ON t3.product_id = t4.product_id WHERE product_details = 'Americano'",
        "schema": "CREATE TABLE Products (product_id NUMBER, product_details TEXT); CREATE TABLE Customers (other_customer_details TEXT, customer_id NUMBER, customer_name TEXT, payment_method TEXT); CREATE TABLE Customer_Addresses (customer_id NUMBER, address_id NUMBER); CREATE TABLE Order_Items (order_id NUMBER, order_quantity TEXT, product_id NUMBER); CREATE TABLE Addresses (city TEXT, address_id NUMBER); CREATE TABLE Customer_Orders (order_id NUMBER, customer_id NUMBER, order_status TEXT, order_details TEXT);"
      }
    ]
  ],
  "hr_1": [
    [
      {
        "question": "What are the first names of all employees?",
        "query": "SELECT first_name FROM employees",
        "schema": "CREATE TABLE employees (LAST_NAME TEXT, FIRST_NAME TEXT, EMPLOYEE_ID NUMBER);"
      },
      {
        "question": "Also, what are their department names?",
        "query": "SELECT t1.first_name , t2.department_name FROM employees AS t1 JOIN departments AS t2 ON t1.department_id = t2.department_id",
        "schema": "CREATE TABLE employees (FIRST_NAME TEXT, LAST_NAME TEXT, DEPARTMENT_ID NUMBER, EMPLOYEE_ID NUMBER); CREATE TABLE departments (DEPARTMENT_ID NUMBER, DEPARTMENT_NAME TEXT);"
      }
    ],
    [
      {
        "question": "Which employees earn less than 6000?",
        "query": "SELECT * FROM employees WHERE salary < 6000",
        "schema": "CREATE TABLE jobs (MIN_SALARY NUMBER, MAX_SALARY NUMBER); CREATE TABLE job_history (EMPLOYEE_ID NUMBER); CREATE TABLE employees (EMPLOYEE_ID NUMBER, JOB_ID TEXT, FIRST_NAME TEXT, LAST_NAME TEXT, COMMISSION_PCT NUMBER, SALARY NUMBER, DEPARTMENT_ID NUMBER); CREATE TABLE departments (DEPARTMENT_ID NUMBER);"
      },
      {
        "question": "What are their full names and salaries?",
        "query": "SELECT first_name , last_name , salary FROM employees WHERE salary < 6000",
        "schema": "CREATE TABLE employees (EMPLOYEE_ID NUMBER, DEPARTMENT_ID NUMBER, SALARY NUMBER, JOB_ID TEXT, COMMISSION_PCT NUMBER, LAST_NAME TEXT, FIRST_NAME TEXT); CREATE TABLE jobs (MIN_SALARY NUMBER, MAX_SALARY NUMBER); CREATE TABLE departments (DEPARTMENT_ID NUMBER); CREATE TABLE job_history (EMPLOYEE_ID NUMBER);"
      }
    ],
    [
      {
        "question": "List the first name and department id for all employees?",
        "query": "SELECT first_name , department_id FROM employees",
        "schema": "CREATE TABLE departments (DEPARTMENT_NAME TEXT, MANAGER_ID NUMBER, DEPARTMENT_ID NUMBER); CREATE TABLE employees (DEPARTMENT_ID NUMBER, MANAGER_ID NUMBER, FIRST_NAME TEXT, LAST_NAME TEXT, EMPLOYEE_ID NUMBER); CREATE TABLE job_history (EMPLOYEE_ID NUMBER, DEPARTMENT_ID NUMBER);"
      },
      {
        "question": "Of these, include the ones for employees with last name McEwen.",
        "query": "SELECT first_name , department_id FROM employees WHERE last_name = 'McEwen'",
        "schema": "CREATE TABLE departments (MANAGER_ID NUMBER, DEPARTMENT_ID NUMBER, DEPARTMENT_NAME TEXT); CREATE TABLE employees (EMPLOYEE_ID NUMBER, DEPARTMENT_ID NUMBER, LAST_NAME TEXT, MANAGER_ID NUMBER, FIRST_NAME TEXT); CREATE TABLE job_history (DEPARTMENT_ID NUMBER, EMPLOYEE_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What is all the information about all the departments?",
        "query": "SELECT * FROM departments",
        "schema": "CREATE TABLE departments (DEPARTMENT_NAME TEXT, MANAGER_ID NUMBER, DEPARTMENT_ID NUMBER); CREATE TABLE job_history (DEPARTMENT_ID NUMBER); CREATE TABLE employees (LAST_NAME TEXT, EMPLOYEE_ID NUMBER, DEPARTMENT_ID NUMBER);"
      },
      {
        "question": "Of those, what is the information about the Marketing department?",
        "query": "SELECT * FROM departments WHERE department_name = 'Marketing'",
        "schema": "CREATE TABLE job_history (DEPARTMENT_ID NUMBER); CREATE TABLE employees (LAST_NAME TEXT, DEPARTMENT_ID NUMBER, EMPLOYEE_ID NUMBER); CREATE TABLE departments (DEPARTMENT_ID NUMBER, MANAGER_ID NUMBER, DEPARTMENT_NAME TEXT);"
      }
    ],
    [
      {
        "question": "What is all the information on employees?",
        "query": "SELECT * FROM employees",
        "schema": "CREATE TABLE jobs (JOB_ID TEXT); CREATE TABLE job_history (EMPLOYEE_ID NUMBER); CREATE TABLE employees (JOB_ID TEXT, LAST_NAME TEXT, FIRST_NAME TEXT, MANAGER_ID NUMBER, DEPARTMENT_ID NUMBER, EMPLOYEE_ID NUMBER, SALARY NUMBER); CREATE TABLE departments (DEPARTMENT_NAME TEXT, DEPARTMENT_ID NUMBER);"
      },
      {
        "question": "Of those, which do not have the letter M in their first names?",
        "query": "SELECT * FROM employees WHERE first_name NOT LIKE '%M%'",
        "schema": "CREATE TABLE employees (LAST_NAME TEXT, DEPARTMENT_ID NUMBER, EMPLOYEE_ID NUMBER, JOB_ID TEXT, MANAGER_ID NUMBER, FIRST_NAME TEXT, SALARY NUMBER); CREATE TABLE job_history (EMPLOYEE_ID NUMBER); CREATE TABLE jobs (JOB_ID TEXT); CREATE TABLE departments (DEPARTMENT_ID NUMBER, DEPARTMENT_NAME TEXT);"
      },
      {
        "question": "What were their hire dates?",
        "query": "SELECT hire_date FROM employees WHERE first_name NOT LIKE '%M%'",
        "schema": "CREATE TABLE departments (DEPARTMENT_NAME TEXT, DEPARTMENT_ID NUMBER); CREATE TABLE jobs (JOB_ID TEXT); CREATE TABLE employees (LAST_NAME TEXT, DEPARTMENT_ID NUMBER, JOB_ID TEXT, HIRE_DATE TIME, EMPLOYEE_ID NUMBER, FIRST_NAME TEXT, SALARY NUMBER, MANAGER_ID NUMBER); CREATE TABLE job_history (EMPLOYEE_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What is all the information on employees?",
        "query": "SELECT * FROM employees",
        "schema": "CREATE TABLE jobs (JOB_ID TEXT); CREATE TABLE departments (DEPARTMENT_ID NUMBER, DEPARTMENT_NAME TEXT); CREATE TABLE job_history (EMPLOYEE_ID NUMBER); CREATE TABLE employees (FIRST_NAME TEXT, COMMISSION_PCT NUMBER, MANAGER_ID NUMBER, DEPARTMENT_ID NUMBER, LAST_NAME TEXT, JOB_ID TEXT, EMPLOYEE_ID NUMBER);"
      },
      {
        "question": "Of those, which do not have the letter M in their first names?",
        "query": "SELECT * FROM employees WHERE first_name NOT LIKE '%M%'",
        "schema": "CREATE TABLE employees (MANAGER_ID NUMBER, JOB_ID TEXT, LAST_NAME TEXT, FIRST_NAME TEXT, COMMISSION_PCT NUMBER, EMPLOYEE_ID NUMBER, DEPARTMENT_ID NUMBER); CREATE TABLE departments (DEPARTMENT_NAME TEXT, DEPARTMENT_ID NUMBER); CREATE TABLE job_history (EMPLOYEE_ID NUMBER); CREATE TABLE jobs (JOB_ID TEXT);"
      },
      {
        "question": "What were their full names, hire dates, salaries, and department numbers?",
        "query": "SELECT first_name , last_name , hire_date , salary , department_id FROM employees WHERE first_name NOT LIKE '%M%'",
        "schema": "CREATE TABLE departments (DEPARTMENT_ID NUMBER, DEPARTMENT_NAME TEXT); CREATE TABLE jobs (JOB_ID TEXT); CREATE TABLE employees (SALARY NUMBER, MANAGER_ID NUMBER, JOB_ID TEXT, DEPARTMENT_ID NUMBER, LAST_NAME TEXT, EMPLOYEE_ID NUMBER, COMMISSION_PCT NUMBER, HIRE_DATE TIME, FIRST_NAME TEXT); CREATE TABLE job_history (EMPLOYEE_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Which employees do not have the letter M in their first names?",
        "query": "SELECT * FROM employees WHERE first_name NOT LIKE '%M%'",
        "schema": "CREATE TABLE departments (DEPARTMENT_ID NUMBER); CREATE TABLE employees (DEPARTMENT_ID NUMBER, LAST_NAME TEXT, FIRST_NAME TEXT, EMPLOYEE_ID NUMBER);"
      },
      {
        "question": "What were their full names, hire dates, salaries, and department numbers?",
        "query": "SELECT first_name , last_name , hire_date , salary , department_id FROM employees WHERE first_name NOT LIKE '%M%'",
        "schema": "CREATE TABLE employees (SALARY NUMBER, EMPLOYEE_ID NUMBER, FIRST_NAME TEXT, HIRE_DATE TIME, DEPARTMENT_ID NUMBER, LAST_NAME TEXT); CREATE TABLE departments (DEPARTMENT_NAME TEXT, DEPARTMENT_ID NUMBER);"
      },
      {
        "question": "Order these by ascending department number.",
        "query": "SELECT first_name , last_name , hire_date , salary , department_id FROM employees WHERE first_name NOT LIKE '%M%' ORDER BY department_id",
        "schema": "CREATE TABLE departments (DEPARTMENT_NAME TEXT, DEPARTMENT_ID NUMBER); CREATE TABLE employees (SALARY NUMBER, FIRST_NAME TEXT, HIRE_DATE TIME, DEPARTMENT_ID NUMBER, EMPLOYEE_ID NUMBER, LAST_NAME TEXT);"
      }
    ],
    [
      {
        "question": "What are all the employees' phone numbers?",
        "query": "SELECT phone_number FROM employees",
        "schema": "CREATE TABLE departments (DEPARTMENT_ID NUMBER); CREATE TABLE employees (MANAGER_ID NUMBER, FIRST_NAME TEXT, PHONE_NUMBER TEXT, LAST_NAME TEXT, DEPARTMENT_ID NUMBER, EMPLOYEE_ID NUMBER);"
      },
      {
        "question": "Return only those for employees with salaries between 8000 and 12000.",
        "query": "SELECT phone_number FROM employees WHERE salary BETWEEN 8000 AND 12000",
        "schema": "CREATE TABLE employees (FIRST_NAME TEXT, LAST_NAME TEXT, MANAGER_ID NUMBER, EMPLOYEE_ID NUMBER, DEPARTMENT_ID NUMBER, PHONE_NUMBER TEXT, SALARY NUMBER); CREATE TABLE departments (DEPARTMENT_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What are all the employees with first names that end with m?",
        "query": "SELECT * FROM employees WHERE first_name LIKE '%m'",
        "schema": "CREATE TABLE employees (LAST_NAME TEXT, FIRST_NAME TEXT, EMPLOYEE_ID NUMBER, DEPARTMENT_ID NUMBER);"
      },
      {
        "question": "What are their full names and salaries?",
        "query": "SELECT first_name , last_name , salary FROM employees WHERE first_name LIKE '%m'",
        "schema": "CREATE TABLE jobs (MAX_SALARY NUMBER, MIN_SALARY NUMBER); CREATE TABLE employees (LAST_NAME TEXT, EMPLOYEE_ID NUMBER, DEPARTMENT_ID NUMBER, SALARY NUMBER, FIRST_NAME TEXT);"
      }
    ],
    [
      {
        "question": "Which employees were hired between November 5th, 2007 and July 5th, 2009?",
        "query": "SELECT * FROM employees WHERE hire_date BETWEEN '2007-11-05' AND '2009-07-05'",
        "schema": "CREATE TABLE job_history (EMPLOYEE_ID NUMBER); CREATE TABLE locations (LOCATION_ID NUMBER); CREATE TABLE employees (DEPARTMENT_ID NUMBER, JOB_ID TEXT, MANAGER_ID NUMBER, FIRST_NAME TEXT, LAST_NAME TEXT, EMPLOYEE_ID NUMBER, HIRE_DATE TIME);"
      },
      {
        "question": "What are their job ids and hire dates?",
        "query": "SELECT job_id , hire_date FROM employees WHERE hire_date BETWEEN '2007-11-05' AND '2009-07-05'",
        "schema": "CREATE TABLE locations (LOCATION_ID NUMBER); CREATE TABLE employees (LAST_NAME TEXT, HIRE_DATE TIME, DEPARTMENT_ID NUMBER, FIRST_NAME TEXT, JOB_ID TEXT, EMPLOYEE_ID NUMBER, MANAGER_ID NUMBER); CREATE TABLE jobs (JOB_ID TEXT, JOB_TITLE TEXT); CREATE TABLE job_history (START_DATE TIME, JOB_ID TEXT, EMPLOYEE_ID NUMBER, END_DATE TIME);"
      }
    ],
    [
      {
        "question": "What are the names of all employees?",
        "query": "SELECT first_name , last_name FROM employees",
        "schema": "CREATE TABLE employees (FIRST_NAME TEXT, LAST_NAME TEXT, EMPLOYEE_ID NUMBER, DEPARTMENT_ID NUMBER); CREATE TABLE departments (DEPARTMENT_ID NUMBER);"
      },
      {
        "question": "Of those, who are in department 70 or 90?",
        "query": "SELECT first_name , last_name FROM employees WHERE department_id = 70 OR department_id = 90",
        "schema": "CREATE TABLE departments (DEPARTMENT_NAME TEXT, DEPARTMENT_ID NUMBER); CREATE TABLE employees (FIRST_NAME TEXT, LAST_NAME TEXT, DEPARTMENT_ID NUMBER, EMPLOYEE_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What is all the information about employees?",
        "query": "SELECT * FROM employees",
        "schema": "CREATE TABLE jobs (JOB_ID TEXT); CREATE TABLE employees (SALARY NUMBER, EMPLOYEE_ID NUMBER, MANAGER_ID NUMBER, LAST_NAME TEXT, FIRST_NAME TEXT, DEPARTMENT_ID NUMBER, JOB_ID TEXT); CREATE TABLE departments (DEPARTMENT_NAME TEXT, DEPARTMENT_ID NUMBER); CREATE TABLE job_history (EMPLOYEE_ID NUMBER);"
      },
      {
        "question": "Of those, which were hired before 2002-06-21?",
        "query": "SELECT * FROM employees WHERE hire_date < '2002-06-21'",
        "schema": "CREATE TABLE jobs (JOB_ID TEXT); CREATE TABLE job_history (EMPLOYEE_ID NUMBER); CREATE TABLE departments (DEPARTMENT_NAME TEXT, DEPARTMENT_ID NUMBER); CREATE TABLE employees (DEPARTMENT_ID NUMBER, EMPLOYEE_ID NUMBER, JOB_ID TEXT, SALARY NUMBER, LAST_NAME TEXT, MANAGER_ID NUMBER, HIRE_DATE TIME, FIRST_NAME TEXT);"
      }
    ],
    [
      {
        "question": "What is all the information about employees with a D, S or N in their first name?",
        "query": "SELECT * FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' OR first_name LIKE '%N%'",
        "schema": "CREATE TABLE employees (FIRST_NAME TEXT, LAST_NAME TEXT, EMPLOYEE_ID NUMBER, MANAGER_ID NUMBER, DEPARTMENT_ID NUMBER); CREATE TABLE departments (DEPARTMENT_ID NUMBER);"
      },
      {
        "question": "Order those by decreasing salary.",
        "query": "SELECT * FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' OR first_name LIKE '%N%' ORDER BY salary DESC",
        "schema": "CREATE TABLE employees (SALARY NUMBER, DEPARTMENT_ID NUMBER, FIRST_NAME TEXT, EMPLOYEE_ID NUMBER, MANAGER_ID NUMBER, LAST_NAME TEXT); CREATE TABLE departments (DEPARTMENT_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What is all the information about the employees?",
        "query": "SELECT * FROM employees",
        "schema": "CREATE TABLE job_history (EMPLOYEE_ID NUMBER); CREATE TABLE departments (DEPARTMENT_NAME TEXT, DEPARTMENT_ID NUMBER); CREATE TABLE jobs (JOB_ID TEXT); CREATE TABLE employees (MANAGER_ID NUMBER, JOB_ID TEXT, FIRST_NAME TEXT, DEPARTMENT_ID NUMBER, LAST_NAME TEXT, EMPLOYEE_ID NUMBER);"
      },
      {
        "question": "Of those, who was hired after September 7th, 1987?",
        "query": "SELECT * FROM employees WHERE hire_date > '1987-09-07'",
        "schema": "CREATE TABLE jobs (JOB_ID TEXT); CREATE TABLE job_history (EMPLOYEE_ID NUMBER); CREATE TABLE employees (MANAGER_ID NUMBER, HIRE_DATE TIME, FIRST_NAME TEXT, DEPARTMENT_ID NUMBER, JOB_ID TEXT, EMPLOYEE_ID NUMBER, LAST_NAME TEXT); CREATE TABLE departments (DEPARTMENT_ID NUMBER, DEPARTMENT_NAME TEXT);"
      }
    ],
    [
      {
        "question": "What are all the job titles?",
        "query": "SELECT job_title FROM jobs",
        "schema": "CREATE TABLE departments (DEPARTMENT_ID NUMBER); CREATE TABLE jobs (JOB_TITLE TEXT, JOB_ID TEXT); CREATE TABLE employees (LAST_NAME TEXT, JOB_ID TEXT, EMPLOYEE_ID NUMBER, DEPARTMENT_ID NUMBER); CREATE TABLE job_history (JOB_ID TEXT);"
      },
      {
        "question": "Of those, which correspond to jobs with salaries over 9000?",
        "query": "SELECT job_title FROM jobs WHERE min_salary > 9000",
        "schema": "CREATE TABLE jobs (MIN_SALARY NUMBER, MAX_SALARY NUMBER, JOB_TITLE TEXT, JOB_ID TEXT); CREATE TABLE departments (DEPARTMENT_ID NUMBER); CREATE TABLE job_history (JOB_ID TEXT); CREATE TABLE employees (DEPARTMENT_ID NUMBER, SALARY NUMBER, LAST_NAME TEXT, JOB_ID TEXT, EMPLOYEE_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What is all the information about jobs with max salary between 12000 and 18000?",
        "query": "SELECT * FROM jobs WHERE max_salary BETWEEN 12000 AND 18000",
        "schema": "CREATE TABLE departments (DEPARTMENT_ID NUMBER); CREATE TABLE employees (JOB_ID TEXT, EMPLOYEE_ID NUMBER, SALARY NUMBER); CREATE TABLE job_history (JOB_ID TEXT, EMPLOYEE_ID NUMBER); CREATE TABLE jobs (MIN_SALARY NUMBER, MAX_SALARY NUMBER, JOB_TITLE TEXT, JOB_ID TEXT);"
      },
      {
        "question": "What are the job titles and differences between max and min salaries for those jobs?",
        "query": "SELECT job_title , max_salary - min_salary FROM jobs WHERE max_salary BETWEEN 12000 AND 18000",
        "schema": "CREATE TABLE departments (DEPARTMENT_ID NUMBER); CREATE TABLE employees (EMPLOYEE_ID NUMBER, JOB_ID TEXT, SALARY NUMBER); CREATE TABLE jobs (MAX_SALARY NUMBER, JOB_ID TEXT, JOB_TITLE TEXT, MIN_SALARY NUMBER); CREATE TABLE job_history (JOB_ID TEXT, EMPLOYEE_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What is all the job history information?",
        "query": "SELECT * FROM job_history",
        "schema": "CREATE TABLE employees (JOB_ID TEXT, DEPARTMENT_ID NUMBER, EMPLOYEE_ID NUMBER); CREATE TABLE departments (DEPARTMENT_ID NUMBER); CREATE TABLE jobs (JOB_TITLE TEXT, JOB_ID TEXT); CREATE TABLE job_history (JOB_ID TEXT, END_DATE TIME, START_DATE TIME, EMPLOYEE_ID NUMBER, DEPARTMENT_ID NUMBER);"
      },
      {
        "question": "What are the unique employee ids?",
        "query": "SELECT employee_id FROM job_history GROUP BY employee_id",
        "schema": "CREATE TABLE departments (DEPARTMENT_ID NUMBER); CREATE TABLE job_history (START_DATE TIME, DEPARTMENT_ID NUMBER, END_DATE TIME, JOB_ID TEXT, EMPLOYEE_ID NUMBER); CREATE TABLE jobs (JOB_ID TEXT, JOB_TITLE TEXT); CREATE TABLE employees (JOB_ID TEXT, EMPLOYEE_ID NUMBER, LAST_NAME TEXT, MANAGER_ID NUMBER, DEPARTMENT_ID NUMBER);"
      },
      {
        "question": "What are the latest end dates corresponding to each one?",
        "query": "SELECT employee_id , max(end_date) FROM job_history GROUP BY employee_id",
        "schema": "CREATE TABLE job_history (START_DATE TIME, EMPLOYEE_ID NUMBER, JOB_ID TEXT, END_DATE TIME, DEPARTMENT_ID NUMBER); CREATE TABLE employees (JOB_ID TEXT, DEPARTMENT_ID NUMBER, HIRE_DATE TIME, LAST_NAME TEXT, MANAGER_ID NUMBER, EMPLOYEE_ID NUMBER); CREATE TABLE jobs (JOB_ID TEXT, JOB_TITLE TEXT); CREATE TABLE departments (DEPARTMENT_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What are the different department ids?",
        "query": "SELECT department_id FROM employees GROUP BY department_id",
        "schema": "CREATE TABLE job_history (EMPLOYEE_ID NUMBER, DEPARTMENT_ID NUMBER); CREATE TABLE departments (DEPARTMENT_ID NUMBER, DEPARTMENT_NAME TEXT, MANAGER_ID NUMBER); CREATE TABLE employees (EMPLOYEE_ID NUMBER, DEPARTMENT_ID NUMBER, LAST_NAME TEXT);"
      },
      {
        "question": "Of these, which had more than 10 employees with commissions?",
        "query": "SELECT department_id FROM employees GROUP BY department_id HAVING count(commission_pct) > 10",
        "schema": "CREATE TABLE job_history (DEPARTMENT_ID NUMBER, EMPLOYEE_ID NUMBER); CREATE TABLE employees (EMPLOYEE_ID NUMBER, DEPARTMENT_ID NUMBER, COMMISSION_PCT NUMBER, LAST_NAME TEXT); CREATE TABLE departments (DEPARTMENT_ID NUMBER, MANAGER_ID NUMBER, DEPARTMENT_NAME TEXT);"
      }
    ],
    [
      {
        "question": "What are the manager ids of managers who manage 4 or more employees?",
        "query": "SELECT manager_id FROM employees GROUP BY manager_id HAVING count(employee_id) >= 4",
        "schema": "CREATE TABLE departments (DEPARTMENT_ID NUMBER, MANAGER_ID NUMBER); CREATE TABLE employees (MANAGER_ID NUMBER, EMPLOYEE_ID NUMBER, LAST_NAME TEXT, DEPARTMENT_ID NUMBER, JOB_ID TEXT);"
      },
      {
        "question": "What are their department ids?",
        "query": "SELECT DISTINCT department_id FROM employees GROUP BY department_id , manager_id HAVING count(employee_id) >= 4",
        "schema": "CREATE TABLE departments (DEPARTMENT_NAME TEXT, MANAGER_ID NUMBER, DEPARTMENT_ID NUMBER); CREATE TABLE employees (EMPLOYEE_ID NUMBER, MANAGER_ID NUMBER, JOB_ID TEXT, DEPARTMENT_ID NUMBER, LAST_NAME TEXT);"
      }
    ],
    [
      {
        "question": "How many cities are there?",
        "query": "SELECT count(*) FROM locations",
        "schema": "CREATE TABLE locations (STREET_ADDRESS TEXT, CITY TEXT, LOCATION_ID NUMBER, COUNTRY_ID TEXT); CREATE TABLE employees (DEPARTMENT_ID NUMBER, EMPLOYEE_ID NUMBER); CREATE TABLE departments (DEPARTMENT_NAME TEXT, DEPARTMENT_ID NUMBER, LOCATION_ID NUMBER);"
      },
      {
        "question": "Count the cities by their country ids.",
        "query": "SELECT country_id , count(*) FROM locations GROUP BY country_id",
        "schema": "CREATE TABLE locations (LOCATION_ID NUMBER, STATE_PROVINCE TEXT, COUNTRY_ID TEXT, STREET_ADDRESS TEXT, CITY TEXT); CREATE TABLE employees (DEPARTMENT_ID NUMBER, EMPLOYEE_ID NUMBER); CREATE TABLE countries (COUNTRY_NAME TEXT, COUNTRY_ID TEXT, REGION_ID NUMBER); CREATE TABLE departments (DEPARTMENT_NAME TEXT, LOCATION_ID NUMBER, DEPARTMENT_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What are job ids for jobs that lasted more than 300 days?",
        "query": "SELECT job_id FROM job_history WHERE end_date - start_date > 300",
        "schema": "CREATE TABLE employees (JOB_ID TEXT, EMPLOYEE_ID NUMBER, DEPARTMENT_ID NUMBER, HIRE_DATE TIME); CREATE TABLE departments (DEPARTMENT_ID NUMBER); CREATE TABLE job_history (DEPARTMENT_ID NUMBER, JOB_ID TEXT, END_DATE TIME, EMPLOYEE_ID NUMBER, START_DATE TIME); CREATE TABLE jobs (JOB_ID TEXT, JOB_TITLE TEXT);"
      },
      {
        "question": "Of these, which have been done more than once?",
        "query": "SELECT job_id FROM job_history WHERE end_date - start_date > 300 GROUP BY job_id HAVING count(*) >= 2",
        "schema": "CREATE TABLE departments (DEPARTMENT_ID NUMBER); CREATE TABLE job_history (END_DATE TIME, JOB_ID TEXT, EMPLOYEE_ID NUMBER, START_DATE TIME, DEPARTMENT_ID NUMBER); CREATE TABLE jobs (JOB_TITLE TEXT, JOB_ID TEXT); CREATE TABLE employees (HIRE_DATE TIME, EMPLOYEE_ID NUMBER, DEPARTMENT_ID NUMBER, JOB_ID TEXT);"
      }
    ],
    [
      {
        "question": "What are all the different employee ids in the job history table?",
        "query": "SELECT employee_id FROM job_history",
        "schema": "CREATE TABLE employees (LAST_NAME TEXT, FIRST_NAME TEXT, EMPLOYEE_ID NUMBER, DEPARTMENT_ID NUMBER, MANAGER_ID NUMBER, JOB_ID TEXT); CREATE TABLE job_history (DEPARTMENT_ID NUMBER, START_DATE TIME, EMPLOYEE_ID NUMBER, JOB_ID TEXT); CREATE TABLE departments (DEPARTMENT_ID NUMBER); CREATE TABLE jobs (JOB_TITLE TEXT, JOB_ID TEXT);"
      },
      {
        "question": "Of these, which have had two or more jobs?",
        "query": "SELECT employee_id FROM job_history GROUP BY employee_id HAVING count(*) >= 2",
        "schema": "CREATE TABLE employees (DEPARTMENT_ID NUMBER, LAST_NAME TEXT, MANAGER_ID NUMBER, JOB_ID TEXT, EMPLOYEE_ID NUMBER, FIRST_NAME TEXT); CREATE TABLE jobs (JOB_ID TEXT, JOB_TITLE TEXT); CREATE TABLE departments (DEPARTMENT_ID NUMBER); CREATE TABLE job_history (END_DATE TIME, EMPLOYEE_ID NUMBER, START_DATE TIME, DEPARTMENT_ID NUMBER, JOB_ID TEXT);"
      }
    ],
    [
      {
        "question": "What are all the employee ids?",
        "query": "SELECT employee_id FROM employees",
        "schema": "CREATE TABLE employees (DEPARTMENT_ID NUMBER, JOB_ID TEXT, MANAGER_ID NUMBER, EMPLOYEE_ID NUMBER, FIRST_NAME TEXT, LAST_NAME TEXT); CREATE TABLE jobs (JOB_ID TEXT); CREATE TABLE job_history (EMPLOYEE_ID NUMBER); CREATE TABLE departments (DEPARTMENT_ID NUMBER, MANAGER_ID NUMBER);"
      },
      {
        "question": "Also, what are the names of the countries that they work in?",
        "query": "SELECT employee_id , country_name FROM employees AS t1 JOIN departments AS t2 ON t1.department_id = t2.department_id JOIN locations AS t3 ON t2.location_id = t3.location_id JOIN countries AS t4 ON t3.country_id = t4.country_id",
        "schema": "CREATE TABLE departments (DEPARTMENT_ID NUMBER, DEPARTMENT_NAME TEXT, LOCATION_ID NUMBER, MANAGER_ID NUMBER); CREATE TABLE employees (LAST_NAME TEXT, JOB_ID TEXT, FIRST_NAME TEXT, MANAGER_ID NUMBER, EMPLOYEE_ID NUMBER, DEPARTMENT_ID NUMBER); CREATE TABLE jobs (JOB_ID TEXT); CREATE TABLE job_history (EMPLOYEE_ID NUMBER); CREATE TABLE locations (LOCATION_ID NUMBER, STATE_PROVINCE TEXT, CITY TEXT, COUNTRY_ID TEXT); CREATE TABLE regions (REGION_ID NUMBER, REGION_NAME TEXT); CREATE TABLE countries (COUNTRY_NAME TEXT, REGION_ID NUMBER, COUNTRY_ID TEXT);"
      }
    ],
    [
      {
        "question": "How many employees are there?",
        "query": "SELECT count(*) FROM employees",
        "schema": "CREATE TABLE jobs (JOB_ID TEXT); CREATE TABLE employees (FIRST_NAME TEXT, JOB_ID TEXT, PHONE_NUMBER TEXT, DEPARTMENT_ID NUMBER, EMPLOYEE_ID NUMBER, MANAGER_ID NUMBER, SALARY NUMBER, LAST_NAME TEXT); CREATE TABLE departments (DEPARTMENT_NAME TEXT, DEPARTMENT_ID NUMBER); CREATE TABLE job_history (DEPARTMENT_ID NUMBER, EMPLOYEE_ID NUMBER);"
      },
      {
        "question": "Group these counts by department name.",
        "query": "SELECT t2.department_name , count(*) FROM employees AS t1 JOIN departments AS t2 ON t1.department_id = t2.department_id GROUP BY t2.department_name",
        "schema": "CREATE TABLE jobs (JOB_ID TEXT); CREATE TABLE departments (DEPARTMENT_ID NUMBER, DEPARTMENT_NAME TEXT); CREATE TABLE job_history (DEPARTMENT_ID NUMBER, EMPLOYEE_ID NUMBER); CREATE TABLE employees (JOB_ID TEXT, MANAGER_ID NUMBER, PHONE_NUMBER TEXT, EMPLOYEE_ID NUMBER, LAST_NAME TEXT, DEPARTMENT_ID NUMBER, FIRST_NAME TEXT, SALARY NUMBER);"
      }
    ],
    [
      {
        "question": "What is the average salary for all employees?",
        "query": "SELECT avg(salary) FROM employees",
        "schema": "CREATE TABLE jobs (MIN_SALARY NUMBER, MAX_SALARY NUMBER); CREATE TABLE employees (DEPARTMENT_ID NUMBER, EMPLOYEE_ID NUMBER, SALARY NUMBER, LAST_NAME TEXT);"
      },
      {
        "question": "What are the average salaries by job title?",
        "query": "SELECT job_title , avg(salary) FROM employees AS t1 JOIN jobs AS t2 ON t1.job_id = t2.job_id GROUP BY t2.job_title",
        "schema": "CREATE TABLE job_history (JOB_ID TEXT, EMPLOYEE_ID NUMBER); CREATE TABLE employees (SALARY NUMBER, EMPLOYEE_ID NUMBER, DEPARTMENT_ID NUMBER, LAST_NAME TEXT, JOB_ID TEXT); CREATE TABLE jobs (JOB_ID TEXT, MIN_SALARY NUMBER, JOB_TITLE TEXT, MAX_SALARY NUMBER);"
      }
    ],
    [
      {
        "question": "What is the salary of employee with id 163?",
        "query": "SELECT salary FROM employees WHERE employee_id = 163",
        "schema": "CREATE TABLE employees (SALARY NUMBER, DEPARTMENT_ID NUMBER, EMPLOYEE_ID NUMBER, JOB_ID TEXT, LAST_NAME TEXT); CREATE TABLE departments (DEPARTMENT_ID NUMBER); CREATE TABLE jobs (JOB_ID TEXT, MIN_SALARY NUMBER, MAX_SALARY NUMBER); CREATE TABLE job_history (EMPLOYEE_ID NUMBER);"
      },
      {
        "question": "What is all employee information for employees making more than employee 163?",
        "query": "SELECT * FROM employees WHERE salary > (SELECT salary FROM employees WHERE employee_id = 163 )",
        "schema": "CREATE TABLE jobs (MAX_SALARY NUMBER, JOB_ID TEXT, MIN_SALARY NUMBER); CREATE TABLE job_history (EMPLOYEE_ID NUMBER); CREATE TABLE employees (JOB_ID TEXT, DEPARTMENT_ID NUMBER, LAST_NAME TEXT, MANAGER_ID NUMBER, SALARY NUMBER, EMPLOYEE_ID NUMBER, FIRST_NAME TEXT); CREATE TABLE departments (DEPARTMENT_ID NUMBER);"
      },
      {
        "question": "What are the full names of these employees?",
        "query": "SELECT first_name , last_name FROM employees WHERE salary > (SELECT salary FROM employees WHERE employee_id = 163 )",
        "schema": "CREATE TABLE job_history (EMPLOYEE_ID NUMBER); CREATE TABLE departments (DEPARTMENT_ID NUMBER); CREATE TABLE employees (FIRST_NAME TEXT, JOB_ID TEXT, DEPARTMENT_ID NUMBER, EMPLOYEE_ID NUMBER, SALARY NUMBER, LAST_NAME TEXT, MANAGER_ID NUMBER); CREATE TABLE jobs (MIN_SALARY NUMBER, MAX_SALARY NUMBER, JOB_ID TEXT);"
      }
    ],
    [
      {
        "question": "What is the lowest salary across all employees?",
        "query": "SELECT min(salary) FROM employees",
        "schema": "CREATE TABLE employees (LAST_NAME TEXT, SALARY NUMBER, EMPLOYEE_ID NUMBER, DEPARTMENT_ID NUMBER); CREATE TABLE departments (DEPARTMENT_ID NUMBER); CREATE TABLE jobs (MIN_SALARY NUMBER, MAX_SALARY NUMBER);"
      },
      {
        "question": "What are these numbers by department id?",
        "query": "SELECT min(salary) , department_id FROM employees GROUP BY department_id",
        "schema": "CREATE TABLE departments (DEPARTMENT_ID NUMBER, DEPARTMENT_NAME TEXT, MANAGER_ID NUMBER); CREATE TABLE jobs (MAX_SALARY NUMBER, MIN_SALARY NUMBER); CREATE TABLE employees (EMPLOYEE_ID NUMBER, LAST_NAME TEXT, SALARY NUMBER, PHONE_NUMBER TEXT, DEPARTMENT_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What is the lowest salary across all departments?",
        "query": "SELECT min(salary) FROM employees GROUP BY department_id",
        "schema": "CREATE TABLE departments (DEPARTMENT_ID NUMBER, DEPARTMENT_NAME TEXT); CREATE TABLE employees (LAST_NAME TEXT, EMPLOYEE_ID NUMBER, DEPARTMENT_ID NUMBER, SALARY NUMBER, JOB_ID TEXT); CREATE TABLE jobs (JOB_ID TEXT, MIN_SALARY NUMBER, MAX_SALARY NUMBER); CREATE TABLE job_history (DEPARTMENT_ID NUMBER);"
      },
      {
        "question": "What information is available for employees who make that much?",
        "query": "SELECT * FROM employees WHERE salary IN (SELECT min(salary) FROM employees GROUP BY department_id)",
        "schema": "CREATE TABLE employees (FIRST_NAME TEXT, SALARY NUMBER, JOB_ID TEXT, COMMISSION_PCT NUMBER, LAST_NAME TEXT, EMPLOYEE_ID NUMBER, DEPARTMENT_ID NUMBER); CREATE TABLE job_history (DEPARTMENT_ID NUMBER); CREATE TABLE jobs (MIN_SALARY NUMBER, MAX_SALARY NUMBER, JOB_ID TEXT); CREATE TABLE departments (DEPARTMENT_ID NUMBER, DEPARTMENT_NAME TEXT);"
      },
      {
        "question": "What are their first and last names and department ids?",
        "query": "SELECT first_name , last_name , department_id FROM employees WHERE salary IN (SELECT min(salary) FROM employees GROUP BY department_id)",
        "schema": "CREATE TABLE job_history (DEPARTMENT_ID NUMBER); CREATE TABLE jobs (MAX_SALARY NUMBER, JOB_ID TEXT, MIN_SALARY NUMBER); CREATE TABLE employees (EMPLOYEE_ID NUMBER, FIRST_NAME TEXT, DEPARTMENT_ID NUMBER, SALARY NUMBER, COMMISSION_PCT NUMBER, LAST_NAME TEXT, JOB_ID TEXT); CREATE TABLE departments (DEPARTMENT_NAME TEXT, DEPARTMENT_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What is the average salary across all employees?",
        "query": "SELECT avg(salary) FROM employees",
        "schema": "CREATE TABLE employees (DEPARTMENT_ID NUMBER, EMPLOYEE_ID NUMBER, SALARY NUMBER, LAST_NAME TEXT); CREATE TABLE departments (DEPARTMENT_ID NUMBER); CREATE TABLE jobs (MAX_SALARY NUMBER, MIN_SALARY NUMBER);"
      },
      {
        "question": "Which employees make more than that?",
        "query": "SELECT * FROM employees WHERE salary > (SELECT avg(salary) FROM employees)",
        "schema": "CREATE TABLE employees (DEPARTMENT_ID NUMBER, EMPLOYEE_ID NUMBER, LAST_NAME TEXT, SALARY NUMBER, FIRST_NAME TEXT, JOB_ID TEXT); CREATE TABLE jobs (MAX_SALARY NUMBER, MIN_SALARY NUMBER); CREATE TABLE departments (DEPARTMENT_ID NUMBER);"
      },
      {
        "question": "What are their ids?",
        "query": "SELECT employee_id FROM employees WHERE salary > (SELECT avg(salary) FROM employees)",
        "schema": "CREATE TABLE jobs (MIN_SALARY NUMBER, MAX_SALARY NUMBER); CREATE TABLE departments (DEPARTMENT_ID NUMBER); CREATE TABLE employees (SALARY NUMBER, LAST_NAME TEXT, JOB_ID TEXT, DEPARTMENT_ID NUMBER, FIRST_NAME TEXT, EMPLOYEE_ID NUMBER, MANAGER_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What are the id for the employee whose first name is Payam?",
        "query": "SELECT employee_id FROM employees WHERE first_name = 'Payam'",
        "schema": "CREATE TABLE departments (DEPARTMENT_ID NUMBER); CREATE TABLE job_history (EMPLOYEE_ID NUMBER); CREATE TABLE jobs (MIN_SALARY NUMBER, MAX_SALARY NUMBER, JOB_ID TEXT); CREATE TABLE employees (SALARY NUMBER, JOB_ID TEXT, FIRST_NAME TEXT, DEPARTMENT_ID NUMBER, EMPLOYEE_ID NUMBER, LAST_NAME TEXT, MANAGER_ID NUMBER);"
      },
      {
        "question": "Which employees' manager is him?",
        "query": "SELECT * FROM employees WHERE manager_id = (SELECT employee_id FROM employees WHERE first_name = 'Payam' )",
        "schema": "CREATE TABLE employees (SALARY NUMBER, FIRST_NAME TEXT, EMPLOYEE_ID NUMBER, JOB_ID TEXT, MANAGER_ID NUMBER, DEPARTMENT_ID NUMBER, LAST_NAME TEXT); CREATE TABLE departments (MANAGER_ID NUMBER, DEPARTMENT_ID NUMBER); CREATE TABLE jobs (MIN_SALARY NUMBER, MAX_SALARY NUMBER, JOB_ID TEXT); CREATE TABLE job_history (EMPLOYEE_ID NUMBER);"
      },
      {
        "question": "What are their ids and salaries?",
        "query": "SELECT employee_id , salary FROM employees WHERE manager_id = (SELECT employee_id FROM employees WHERE first_name = 'Payam' )",
        "schema": "CREATE TABLE employees (DEPARTMENT_ID NUMBER, FIRST_NAME TEXT, EMPLOYEE_ID NUMBER, LAST_NAME TEXT, MANAGER_ID NUMBER, SALARY NUMBER, JOB_ID TEXT); CREATE TABLE departments (MANAGER_ID NUMBER, DEPARTMENT_ID NUMBER); CREATE TABLE job_history (EMPLOYEE_ID NUMBER); CREATE TABLE jobs (MIN_SALARY NUMBER, MAX_SALARY NUMBER, JOB_ID TEXT);"
      }
    ],
    [
      {
        "question": "Find the name of all departments.",
        "query": "SELECT DISTINCT department_name FROM departments",
        "schema": "CREATE TABLE departments (MANAGER_ID NUMBER, DEPARTMENT_ID NUMBER, DEPARTMENT_NAME TEXT); CREATE TABLE employees (DEPARTMENT_ID NUMBER, FIRST_NAME TEXT, LAST_NAME TEXT); CREATE TABLE job_history (DEPARTMENT_ID NUMBER); CREATE TABLE locations (LOCATION_ID NUMBER); CREATE TABLE countries (COUNTRY_NAME TEXT); CREATE TABLE regions (REGION_NAME TEXT, REGION_ID NUMBER);"
      },
      {
        "question": "What about those that have at least one employee.",
        "query": "SELECT DISTINCT department_name FROM employees AS t1 JOIN departments AS t2 ON t1.department_id = t2.department_id",
        "schema": "CREATE TABLE countries (COUNTRY_NAME TEXT); CREATE TABLE regions (REGION_ID NUMBER, REGION_NAME TEXT); CREATE TABLE job_history (DEPARTMENT_ID NUMBER); CREATE TABLE departments (DEPARTMENT_NAME TEXT, DEPARTMENT_ID NUMBER, MANAGER_ID NUMBER); CREATE TABLE employees (DEPARTMENT_ID NUMBER, LAST_NAME TEXT, FIRST_NAME TEXT, EMPLOYEE_ID NUMBER); CREATE TABLE locations (LOCATION_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What are all the manager ids of the different departments?",
        "query": "SELECT manager_id FROM departments",
        "schema": "CREATE TABLE employees (MANAGER_ID NUMBER, DEPARTMENT_ID NUMBER, EMPLOYEE_ID NUMBER); CREATE TABLE departments (DEPARTMENT_NAME TEXT, MANAGER_ID NUMBER, DEPARTMENT_ID NUMBER);"
      },
      {
        "question": "What is all the employee information regarding these managers?",
        "query": "SELECT DISTINCT * FROM employees AS t1 JOIN departments AS t2 ON t1.department_id = t2.department_id WHERE t1.employee_id = t2.manager_id",
        "schema": "CREATE TABLE employees (MANAGER_ID NUMBER, DEPARTMENT_ID NUMBER, EMPLOYEE_ID NUMBER); CREATE TABLE departments (DEPARTMENT_NAME TEXT, DEPARTMENT_ID NUMBER, MANAGER_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What is all the information about all the departments?",
        "query": "SELECT * FROM departments",
        "schema": "CREATE TABLE employees (EMPLOYEE_ID NUMBER, DEPARTMENT_ID NUMBER); CREATE TABLE departments (DEPARTMENT_NAME TEXT, MANAGER_ID NUMBER, DEPARTMENT_ID NUMBER, LOCATION_ID NUMBER); CREATE TABLE job_history (DEPARTMENT_ID NUMBER);"
      },
      {
        "question": "Of these, what information pertains to the Marketing department?",
        "query": "SELECT * FROM departments WHERE department_name = 'Marketing'",
        "schema": "CREATE TABLE job_history (DEPARTMENT_ID NUMBER); CREATE TABLE departments (DEPARTMENT_NAME TEXT, LOCATION_ID NUMBER, MANAGER_ID NUMBER, DEPARTMENT_ID NUMBER); CREATE TABLE employees (EMPLOYEE_ID NUMBER, DEPARTMENT_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What are the ids of employees who have job history available?",
        "query": "SELECT employee_id FROM job_history",
        "schema": "CREATE TABLE departments (DEPARTMENT_ID NUMBER); CREATE TABLE jobs (JOB_ID TEXT); CREATE TABLE employees (FIRST_NAME TEXT, MANAGER_ID NUMBER, DEPARTMENT_ID NUMBER, JOB_ID TEXT, EMPLOYEE_ID NUMBER, LAST_NAME TEXT); CREATE TABLE job_history (JOB_ID TEXT, EMPLOYEE_ID NUMBER, DEPARTMENT_ID NUMBER);"
      },
      {
        "question": "Which of them have held two or more jobs?",
        "query": "SELECT employee_id FROM job_history GROUP BY employee_id HAVING count(*) >= 2",
        "schema": "CREATE TABLE employees (EMPLOYEE_ID NUMBER, LAST_NAME TEXT, DEPARTMENT_ID NUMBER, JOB_ID TEXT, FIRST_NAME TEXT, MANAGER_ID NUMBER); CREATE TABLE job_history (START_DATE TIME, END_DATE TIME, JOB_ID TEXT, DEPARTMENT_ID NUMBER, EMPLOYEE_ID NUMBER); CREATE TABLE departments (DEPARTMENT_ID NUMBER); CREATE TABLE jobs (JOB_TITLE TEXT, JOB_ID TEXT);"
      }
    ],
    [
      {
        "question": "What are the manager ids for managers who are in charge of 4 or more employees?",
        "query": "SELECT manager_id FROM employees GROUP BY manager_id HAVING count(employee_id) >= 4",
        "schema": "CREATE TABLE employees (DEPARTMENT_ID NUMBER, LAST_NAME TEXT, MANAGER_ID NUMBER, EMPLOYEE_ID NUMBER, JOB_ID TEXT); CREATE TABLE departments (MANAGER_ID NUMBER, DEPARTMENT_ID NUMBER);"
      },
      {
        "question": "What are the distinct department ids for the departments they belong to?",
        "query": "SELECT DISTINCT department_id FROM employees GROUP BY department_id , manager_id HAVING count(employee_id) >= 4",
        "schema": "CREATE TABLE departments (MANAGER_ID NUMBER, DEPARTMENT_ID NUMBER, DEPARTMENT_NAME TEXT); CREATE TABLE employees (EMPLOYEE_ID NUMBER, LAST_NAME TEXT, DEPARTMENT_ID NUMBER, MANAGER_ID NUMBER, JOB_ID TEXT);"
      }
    ],
    [
      {
        "question": "What is the average salary for each job?",
        "query": "SELECT avg(salary) FROM employees GROUP BY job_id",
        "schema": "CREATE TABLE employees (SALARY NUMBER, EMPLOYEE_ID NUMBER, JOB_ID TEXT); CREATE TABLE jobs (JOB_TITLE TEXT, JOB_ID TEXT, MAX_SALARY NUMBER, MIN_SALARY NUMBER); CREATE TABLE job_history (JOB_ID TEXT, EMPLOYEE_ID NUMBER);"
      },
      {
        "question": "What are the job ids for jobs that average more than 8000?",
        "query": "SELECT job_id FROM employees GROUP BY job_id HAVING avg(salary) > 8000",
        "schema": "CREATE TABLE job_history (JOB_ID TEXT, EMPLOYEE_ID NUMBER); CREATE TABLE employees (SALARY NUMBER, EMPLOYEE_ID NUMBER, JOB_ID TEXT); CREATE TABLE jobs (MAX_SALARY NUMBER, JOB_TITLE TEXT, MIN_SALARY NUMBER, JOB_ID TEXT);"
      }
    ],
    [
      {
        "question": "What are the employee ids for employees in department 80?",
        "query": "SELECT employee_id FROM employees WHERE department_id = 80",
        "schema": "CREATE TABLE employees (FIRST_NAME TEXT, MANAGER_ID NUMBER, DEPARTMENT_ID NUMBER, LAST_NAME TEXT, EMPLOYEE_ID NUMBER, JOB_ID TEXT); CREATE TABLE job_history (DEPARTMENT_ID NUMBER, EMPLOYEE_ID NUMBER); CREATE TABLE jobs (JOB_ID TEXT); CREATE TABLE departments (DEPARTMENT_NAME TEXT, MANAGER_ID NUMBER, DEPARTMENT_ID NUMBER);"
      },
      {
        "question": "Also, what are their job titles?",
        "query": "SELECT t1.employee_id , t2.job_title FROM employees AS t1 JOIN jobs AS t2 ON t1.job_id = t2.job_id WHERE t1.department_id = 80",
        "schema": "CREATE TABLE job_history (EMPLOYEE_ID NUMBER, DEPARTMENT_ID NUMBER, JOB_ID TEXT); CREATE TABLE departments (DEPARTMENT_NAME TEXT, DEPARTMENT_ID NUMBER, MANAGER_ID NUMBER); CREATE TABLE employees (LAST_NAME TEXT, EMPLOYEE_ID NUMBER, DEPARTMENT_ID NUMBER, MANAGER_ID NUMBER, FIRST_NAME TEXT, JOB_ID TEXT); CREATE TABLE jobs (JOB_TITLE TEXT, JOB_ID TEXT);"
      }
    ],
    [
      {
        "question": "Who are the employees working in the Finance department?",
        "query": "SELECT * FROM employees AS t1 JOIN departments AS t2 ON t1.department_id = t2.department_id WHERE t2.department_name = 'Finance'",
        "schema": "CREATE TABLE jobs (JOB_ID TEXT); CREATE TABLE locations (CITY TEXT, LOCATION_ID NUMBER, STATE_PROVINCE TEXT); CREATE TABLE employees (LAST_NAME TEXT, COMMISSION_PCT NUMBER, DEPARTMENT_ID NUMBER, FIRST_NAME TEXT, EMPLOYEE_ID NUMBER, MANAGER_ID NUMBER, JOB_ID TEXT); CREATE TABLE job_history (EMPLOYEE_ID NUMBER, DEPARTMENT_ID NUMBER); CREATE TABLE departments (MANAGER_ID NUMBER, DEPARTMENT_NAME TEXT, LOCATION_ID NUMBER, DEPARTMENT_ID NUMBER);"
      },
      {
        "question": "What are their first names and job ids?",
        "query": "SELECT t1.first_name , t1.job_id FROM employees AS t1 JOIN departments AS t2 ON t1.department_id = t2.department_id WHERE t2.department_name = 'Finance'",
        "schema": "CREATE TABLE locations (STATE_PROVINCE TEXT, LOCATION_ID NUMBER, CITY TEXT); CREATE TABLE departments (MANAGER_ID NUMBER, DEPARTMENT_ID NUMBER, LOCATION_ID NUMBER, DEPARTMENT_NAME TEXT); CREATE TABLE employees (FIRST_NAME TEXT, DEPARTMENT_ID NUMBER, EMPLOYEE_ID NUMBER, COMMISSION_PCT NUMBER, MANAGER_ID NUMBER, JOB_ID TEXT, LAST_NAME TEXT); CREATE TABLE jobs (JOB_TITLE TEXT, JOB_ID TEXT); CREATE TABLE job_history (DEPARTMENT_ID NUMBER, EMPLOYEE_ID NUMBER, JOB_ID TEXT);"
      }
    ],
    [
      {
        "question": "What is the lowest salary across all employees?",
        "query": "SELECT min(salary) FROM employees",
        "schema": "CREATE TABLE employees (EMPLOYEE_ID NUMBER, LAST_NAME TEXT, SALARY NUMBER, DEPARTMENT_ID NUMBER); CREATE TABLE departments (DEPARTMENT_ID NUMBER); CREATE TABLE jobs (MIN_SALARY NUMBER, MAX_SALARY NUMBER);"
      },
      {
        "question": "Which employees make more than that?",
        "query": "SELECT * FROM employees WHERE salary > (SELECT min(salary) FROM employees)",
        "schema": "CREATE TABLE jobs (MAX_SALARY NUMBER, MIN_SALARY NUMBER); CREATE TABLE employees (FIRST_NAME TEXT, JOB_ID TEXT, EMPLOYEE_ID NUMBER, COMMISSION_PCT NUMBER, DEPARTMENT_ID NUMBER, LAST_NAME TEXT, SALARY NUMBER); CREATE TABLE departments (DEPARTMENT_ID NUMBER);"
      },
      {
        "question": "Of those, which make less than 2500?",
        "query": "SELECT * FROM employees WHERE salary BETWEEN (SELECT min(salary) FROM employees) AND 2500",
        "schema": "CREATE TABLE departments (DEPARTMENT_ID NUMBER); CREATE TABLE jobs (MIN_SALARY NUMBER, MAX_SALARY NUMBER); CREATE TABLE employees (JOB_ID TEXT, DEPARTMENT_ID NUMBER, COMMISSION_PCT NUMBER, EMPLOYEE_ID NUMBER, SALARY NUMBER, FIRST_NAME TEXT, LAST_NAME TEXT);"
      }
    ],
    [
      {
        "question": "What are the department ids with managers who have ids between 100 and 200?",
        "query": "SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200",
        "schema": "CREATE TABLE job_history (DEPARTMENT_ID NUMBER); CREATE TABLE departments (MANAGER_ID NUMBER, DEPARTMENT_NAME TEXT, DEPARTMENT_ID NUMBER); CREATE TABLE employees (LAST_NAME TEXT, EMPLOYEE_ID NUMBER, JOB_ID TEXT, DEPARTMENT_ID NUMBER, MANAGER_ID NUMBER);"
      },
      {
        "question": "What is all the information about employees who do not work in those departments?",
        "query": "SELECT * FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)",
        "schema": "CREATE TABLE departments (DEPARTMENT_ID NUMBER, MANAGER_ID NUMBER, DEPARTMENT_NAME TEXT); CREATE TABLE employees (FIRST_NAME TEXT, DEPARTMENT_ID NUMBER, MANAGER_ID NUMBER, JOB_ID TEXT, EMPLOYEE_ID NUMBER, LAST_NAME TEXT); CREATE TABLE job_history (DEPARTMENT_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What are the department ids for departments that have someone with the first name Clara?",
        "query": "SELECT department_id FROM employees WHERE first_name = \"Clara\"",
        "schema": "CREATE TABLE job_history (EMPLOYEE_ID NUMBER, DEPARTMENT_ID NUMBER); CREATE TABLE departments (MANAGER_ID NUMBER, DEPARTMENT_NAME TEXT, DEPARTMENT_ID NUMBER); CREATE TABLE jobs (JOB_ID TEXT); CREATE TABLE employees (JOB_ID TEXT, LAST_NAME TEXT, EMPLOYEE_ID NUMBER, DEPARTMENT_ID NUMBER, FIRST_NAME TEXT);"
      },
      {
        "question": "What is all the information about employees in those departments?",
        "query": "SELECT * FROM employees WHERE department_id = (SELECT department_id FROM employees WHERE first_name = \"Clara\")",
        "schema": "CREATE TABLE departments (MANAGER_ID NUMBER, DEPARTMENT_NAME TEXT, DEPARTMENT_ID NUMBER); CREATE TABLE employees (LAST_NAME TEXT, DEPARTMENT_ID NUMBER, FIRST_NAME TEXT, JOB_ID TEXT, EMPLOYEE_ID NUMBER); CREATE TABLE job_history (EMPLOYEE_ID NUMBER, DEPARTMENT_ID NUMBER); CREATE TABLE jobs (JOB_ID TEXT);"
      },
      {
        "question": "What are the full names and hire dates of those employees?",
        "query": "SELECT first_name , last_name , hire_date FROM employees WHERE department_id = (SELECT department_id FROM employees WHERE first_name = \"Clara\")",
        "schema": "CREATE TABLE employees (FIRST_NAME TEXT, EMPLOYEE_ID NUMBER, LAST_NAME TEXT, DEPARTMENT_ID NUMBER, JOB_ID TEXT, HIRE_DATE TIME); CREATE TABLE job_history (DEPARTMENT_ID NUMBER, EMPLOYEE_ID NUMBER); CREATE TABLE jobs (JOB_ID TEXT); CREATE TABLE departments (MANAGER_ID NUMBER, DEPARTMENT_NAME TEXT, DEPARTMENT_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What are the department ids for departments that have someone with the first name Clara?",
        "query": "SELECT department_id FROM employees WHERE first_name = \"Clara\"",
        "schema": "CREATE TABLE jobs (JOB_ID TEXT); CREATE TABLE employees (FIRST_NAME TEXT, DEPARTMENT_ID NUMBER, LAST_NAME TEXT, JOB_ID TEXT, EMPLOYEE_ID NUMBER); CREATE TABLE departments (DEPARTMENT_NAME TEXT, DEPARTMENT_ID NUMBER, MANAGER_ID NUMBER); CREATE TABLE job_history (EMPLOYEE_ID NUMBER, DEPARTMENT_ID NUMBER);"
      },
      {
        "question": "What is all the information about employees in those departments?",
        "query": "SELECT * FROM employees WHERE department_id = ( SELECT department_id FROM employees WHERE first_name = \"Clara\")",
        "schema": "CREATE TABLE employees (FIRST_NAME TEXT, JOB_ID TEXT, EMPLOYEE_ID NUMBER, DEPARTMENT_ID NUMBER, LAST_NAME TEXT); CREATE TABLE jobs (JOB_ID TEXT); CREATE TABLE job_history (DEPARTMENT_ID NUMBER, EMPLOYEE_ID NUMBER); CREATE TABLE departments (DEPARTMENT_NAME TEXT, DEPARTMENT_ID NUMBER, MANAGER_ID NUMBER);"
      },
      {
        "question": "What are the full names and hire dates of those employees?",
        "query": "SELECT first_name , last_name , hire_date FROM employees WHERE department_id = ( SELECT department_id FROM employees WHERE first_name = \"Clara\")",
        "schema": "CREATE TABLE jobs (JOB_ID TEXT); CREATE TABLE employees (DEPARTMENT_ID NUMBER, JOB_ID TEXT, EMPLOYEE_ID NUMBER, LAST_NAME TEXT, FIRST_NAME TEXT, HIRE_DATE TIME); CREATE TABLE departments (MANAGER_ID NUMBER, DEPARTMENT_ID NUMBER, DEPARTMENT_NAME TEXT); CREATE TABLE job_history (EMPLOYEE_ID NUMBER, DEPARTMENT_ID NUMBER);"
      },
      {
        "question": "Of those, who does not have the first name Clara?",
        "query": "SELECT first_name , last_name , hire_date FROM employees WHERE department_id = ( SELECT department_id FROM employees WHERE first_name = \"Clara\") AND first_name ! = \"Clara\"",
        "schema": "CREATE TABLE departments (MANAGER_ID NUMBER, DEPARTMENT_ID NUMBER, DEPARTMENT_NAME TEXT); CREATE TABLE job_history (EMPLOYEE_ID NUMBER, DEPARTMENT_ID NUMBER); CREATE TABLE employees (HIRE_DATE TIME, JOB_ID TEXT, EMPLOYEE_ID NUMBER, FIRST_NAME TEXT, LAST_NAME TEXT, DEPARTMENT_ID NUMBER); CREATE TABLE jobs (JOB_ID TEXT);"
      }
    ],
    [
      {
        "question": "What are the department ids for departments with employees who have the letter T in their first name?",
        "query": "SELECT department_id FROM employees WHERE first_name LIKE '%T%'",
        "schema": "CREATE TABLE job_history (DEPARTMENT_ID NUMBER, EMPLOYEE_ID NUMBER); CREATE TABLE employees (LAST_NAME TEXT, DEPARTMENT_ID NUMBER, FIRST_NAME TEXT, EMPLOYEE_ID NUMBER); CREATE TABLE departments (DEPARTMENT_ID NUMBER, DEPARTMENT_NAME TEXT);"
      },
      {
        "question": "Who are the employees in those departments?",
        "query": "SELECT * FROM employees WHERE department_id IN ( SELECT department_id FROM employees WHERE first_name LIKE '%T%' )",
        "schema": "CREATE TABLE job_history (DEPARTMENT_ID NUMBER, EMPLOYEE_ID NUMBER); CREATE TABLE employees (DEPARTMENT_ID NUMBER, LAST_NAME TEXT, FIRST_NAME TEXT, EMPLOYEE_ID NUMBER); CREATE TABLE departments (DEPARTMENT_NAME TEXT, DEPARTMENT_ID NUMBER);"
      },
      {
        "question": "What are their ids and full names?",
        "query": "SELECT employee_id , first_name , last_name FROM employees WHERE department_id IN ( SELECT department_id FROM employees WHERE first_name LIKE '%T%' )",
        "schema": "CREATE TABLE employees (DEPARTMENT_ID NUMBER, FIRST_NAME TEXT, LAST_NAME TEXT, EMPLOYEE_ID NUMBER); CREATE TABLE departments (DEPARTMENT_ID NUMBER, DEPARTMENT_NAME TEXT); CREATE TABLE job_history (EMPLOYEE_ID NUMBER, DEPARTMENT_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What is the average salary across all employees?",
        "query": "SELECT AVG (salary) FROM employees",
        "schema": "CREATE TABLE jobs (MAX_SALARY NUMBER, MIN_SALARY NUMBER); CREATE TABLE employees (LAST_NAME TEXT, SALARY NUMBER, DEPARTMENT_ID NUMBER, EMPLOYEE_ID NUMBER); CREATE TABLE departments (DEPARTMENT_ID NUMBER);"
      },
      {
        "question": "Which employees make more than that?",
        "query": "SELECT * FROM employees WHERE salary > ( SELECT AVG (salary) FROM employees )",
        "schema": "CREATE TABLE employees (JOB_ID TEXT, DEPARTMENT_ID NUMBER, EMPLOYEE_ID NUMBER, LAST_NAME TEXT, SALARY NUMBER); CREATE TABLE departments (DEPARTMENT_ID NUMBER); CREATE TABLE jobs (MIN_SALARY NUMBER, MAX_SALARY NUMBER);"
      },
      {
        "question": "Of those, which work in departments with employees who have the letter J in their first name?",
        "query": "SELECT * FROM employees WHERE salary > ( SELECT AVG (salary) FROM employees ) AND department_id IN ( SELECT department_id FROM employees WHERE first_name LIKE '%J%')",
        "schema": "CREATE TABLE employees (FIRST_NAME TEXT, EMPLOYEE_ID NUMBER, DEPARTMENT_ID NUMBER, LAST_NAME TEXT, JOB_ID TEXT, SALARY NUMBER); CREATE TABLE jobs (MIN_SALARY NUMBER, MAX_SALARY NUMBER); CREATE TABLE departments (DEPARTMENT_NAME TEXT, DEPARTMENT_ID NUMBER);"
      },
      {
        "question": "What are their ids, full names and salaries?",
        "query": "SELECT employee_id , first_name , last_name , salary FROM employees WHERE salary > ( SELECT AVG (salary) FROM employees ) AND department_id IN ( SELECT department_id FROM employees WHERE first_name LIKE '%J%')",
        "schema": "CREATE TABLE departments (DEPARTMENT_NAME TEXT, DEPARTMENT_ID NUMBER); CREATE TABLE jobs (MAX_SALARY NUMBER, MIN_SALARY NUMBER); CREATE TABLE employees (FIRST_NAME TEXT, JOB_ID TEXT, DEPARTMENT_ID NUMBER, LAST_NAME TEXT, EMPLOYEE_ID NUMBER, SALARY NUMBER);"
      }
    ],
    [
      {
        "question": "What is the lowest salary for someone with the title MK_MAN?",
        "query": "SELECT min(salary) FROM employees WHERE job_id = 'MK_MAN'",
        "schema": "CREATE TABLE employees (SALARY NUMBER, FIRST_NAME TEXT, EMPLOYEE_ID NUMBER, JOB_ID TEXT, LAST_NAME TEXT); CREATE TABLE jobs (MAX_SALARY NUMBER, JOB_TITLE TEXT, MIN_SALARY NUMBER, JOB_ID TEXT);"
      },
      {
        "question": "Which employees make less than that?",
        "query": "SELECT * FROM employees WHERE salary < ( SELECT min(salary) FROM employees WHERE job_id = 'MK_MAN' )",
        "schema": "CREATE TABLE employees (LAST_NAME TEXT, FIRST_NAME TEXT, EMPLOYEE_ID NUMBER, SALARY NUMBER, JOB_ID TEXT); CREATE TABLE jobs (MAX_SALARY NUMBER, MIN_SALARY NUMBER, JOB_TITLE TEXT, JOB_ID TEXT); CREATE TABLE job_history (EMPLOYEE_ID NUMBER, JOB_ID TEXT);"
      },
      {
        "question": "What are their employee ids and job ids?",
        "query": "SELECT employee_id , job_id FROM employees WHERE salary < ( SELECT min(salary) FROM employees WHERE job_id = 'MK_MAN' )",
        "schema": "CREATE TABLE jobs (MAX_SALARY NUMBER, JOB_ID TEXT, JOB_TITLE TEXT, MIN_SALARY NUMBER); CREATE TABLE employees (EMPLOYEE_ID NUMBER, JOB_ID TEXT, FIRST_NAME TEXT, LAST_NAME TEXT, MANAGER_ID NUMBER, DEPARTMENT_ID NUMBER, SALARY NUMBER); CREATE TABLE job_history (EMPLOYEE_ID NUMBER, JOB_ID TEXT);"
      }
    ],
    [
      {
        "question": "What is the highest salary for someone with the title PU_MAN?",
        "query": "SELECT max(salary) FROM employees WHERE job_id = 'PU_MAN'",
        "schema": "CREATE TABLE employees (FIRST_NAME TEXT, SALARY NUMBER, EMPLOYEE_ID NUMBER, JOB_ID TEXT, LAST_NAME TEXT); CREATE TABLE jobs (JOB_ID TEXT, MIN_SALARY NUMBER, JOB_TITLE TEXT, MAX_SALARY NUMBER);"
      },
      {
        "question": "Which employees make more than that?",
        "query": "SELECT * FROM employees WHERE salary > ( SELECT max(salary) FROM employees WHERE job_id = 'PU_MAN' )",
        "schema": "CREATE TABLE jobs (JOB_ID TEXT, MAX_SALARY NUMBER, JOB_TITLE TEXT, MIN_SALARY NUMBER); CREATE TABLE job_history (EMPLOYEE_ID NUMBER, JOB_ID TEXT); CREATE TABLE employees (EMPLOYEE_ID NUMBER, LAST_NAME TEXT, DEPARTMENT_ID NUMBER, JOB_ID TEXT, FIRST_NAME TEXT, SALARY NUMBER);"
      },
      {
        "question": "What are their employee ids, full names, and job ids?",
        "query": "SELECT employee_id , first_name , last_name , job_id FROM employees WHERE salary > ( SELECT max(salary) FROM employees WHERE job_id = 'PU_MAN' )",
        "schema": "CREATE TABLE employees (EMPLOYEE_ID NUMBER, FIRST_NAME TEXT, JOB_ID TEXT, LAST_NAME TEXT, SALARY NUMBER, DEPARTMENT_ID NUMBER); CREATE TABLE jobs (MIN_SALARY NUMBER, JOB_ID TEXT, MAX_SALARY NUMBER, JOB_TITLE TEXT); CREATE TABLE job_history (EMPLOYEE_ID NUMBER, JOB_ID TEXT);"
      }
    ],
    [
      {
        "question": "What are the department ids for departments which have more than 2 employees?",
        "query": "SELECT department_id FROM employees GROUP BY department_id HAVING count(*) >= 2",
        "schema": "CREATE TABLE employees (LAST_NAME TEXT, DEPARTMENT_ID NUMBER, EMPLOYEE_ID NUMBER); CREATE TABLE job_history (DEPARTMENT_ID NUMBER, EMPLOYEE_ID NUMBER); CREATE TABLE departments (DEPARTMENT_NAME TEXT, MANAGER_ID NUMBER, DEPARTMENT_ID NUMBER);"
      },
      {
        "question": "What is the sum of the salaries within each of those departments?",
        "query": "SELECT department_id , sum(salary) FROM employees GROUP BY department_id HAVING count(*) >= 2",
        "schema": "CREATE TABLE job_history (DEPARTMENT_ID NUMBER, EMPLOYEE_ID NUMBER); CREATE TABLE employees (LAST_NAME TEXT, EMPLOYEE_ID NUMBER, DEPARTMENT_ID NUMBER, SALARY NUMBER); CREATE TABLE departments (DEPARTMENT_ID NUMBER, DEPARTMENT_NAME TEXT, MANAGER_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What are all the employee ids for employees who have had a job in the past?",
        "query": "SELECT employee_id FROM job_history GROUP BY employee_id",
        "schema": "CREATE TABLE jobs (JOB_TITLE TEXT, JOB_ID TEXT); CREATE TABLE departments (DEPARTMENT_ID NUMBER); CREATE TABLE job_history (START_DATE TIME, DEPARTMENT_ID NUMBER, END_DATE TIME, EMPLOYEE_ID NUMBER, JOB_ID TEXT); CREATE TABLE employees (LAST_NAME TEXT, EMPLOYEE_ID NUMBER, DEPARTMENT_ID NUMBER, MANAGER_ID NUMBER, FIRST_NAME TEXT, JOB_ID TEXT);"
      },
      {
        "question": "What is all the information for employees who are not a part of those?",
        "query": "SELECT * FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)",
        "schema": "CREATE TABLE departments (DEPARTMENT_ID NUMBER); CREATE TABLE jobs (JOB_ID TEXT, JOB_TITLE TEXT); CREATE TABLE employees (DEPARTMENT_ID NUMBER, FIRST_NAME TEXT, EMPLOYEE_ID NUMBER, JOB_ID TEXT, MANAGER_ID NUMBER, LAST_NAME TEXT); CREATE TABLE job_history (START_DATE TIME, DEPARTMENT_ID NUMBER, JOB_ID TEXT, EMPLOYEE_ID NUMBER, END_DATE TIME);"
      }
    ],
    [
      {
        "question": "What are the first and last names for each employee?",
        "query": "SELECT first_name , last_name FROM employees",
        "schema": "CREATE TABLE employees (FIRST_NAME TEXT, DEPARTMENT_ID NUMBER, LAST_NAME TEXT, EMPLOYEE_ID NUMBER);"
      },
      {
        "question": "Also, what are their department names?",
        "query": "SELECT t1.first_name , t1.last_name , t2.department_name FROM employees AS t1 JOIN departments AS t2 ON t1.department_id = t2.department_id",
        "schema": "CREATE TABLE employees (DEPARTMENT_ID NUMBER, EMPLOYEE_ID NUMBER, LAST_NAME TEXT, FIRST_NAME TEXT); CREATE TABLE departments (DEPARTMENT_NAME TEXT, DEPARTMENT_ID NUMBER);"
      },
      {
        "question": "Also, what are their city and state provinces?",
        "query": "SELECT t1.first_name , t1.last_name , t2.department_name , t3.city , t3.state_province FROM employees AS t1 JOIN departments AS t2 ON t1.department_id = t2.department_id JOIN locations AS t3 ON t2.location_id = t3.location_id",
        "schema": "CREATE TABLE countries (COUNTRY_NAME TEXT, COUNTRY_ID TEXT); CREATE TABLE locations (CITY TEXT, COUNTRY_ID TEXT, STATE_PROVINCE TEXT, LOCATION_ID NUMBER); CREATE TABLE departments (DEPARTMENT_ID NUMBER, DEPARTMENT_NAME TEXT, LOCATION_ID NUMBER); CREATE TABLE employees (LAST_NAME TEXT, DEPARTMENT_ID NUMBER, FIRST_NAME TEXT, EMPLOYEE_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What are the full names of each employee?",
        "query": "SELECT first_name , last_name FROM employees",
        "schema": "CREATE TABLE employees (LAST_NAME TEXT, FIRST_NAME TEXT, EMPLOYEE_ID NUMBER);"
      },
      {
        "question": "Also, what cities are their departments in?",
        "query": "SELECT t1.first_name , t1.last_name , t3.city FROM employees AS t1 JOIN departments AS t2 ON t1.department_id = t2.department_id JOIN locations AS t3 ON t2.location_id = t3.location_id",
        "schema": "CREATE TABLE locations (STATE_PROVINCE TEXT, COUNTRY_ID TEXT, LOCATION_ID NUMBER, STREET_ADDRESS TEXT, CITY TEXT); CREATE TABLE employees (DEPARTMENT_ID NUMBER, EMPLOYEE_ID NUMBER, LAST_NAME TEXT, FIRST_NAME TEXT); CREATE TABLE departments (LOCATION_ID NUMBER, DEPARTMENT_ID NUMBER, DEPARTMENT_NAME TEXT); CREATE TABLE countries (COUNTRY_ID TEXT);"
      },
      {
        "question": "Of these, which have the letter Z in their first name?",
        "query": "SELECT t1.first_name , t1.last_name , t3.city FROM employees AS t1 JOIN departments AS t2 ON t1.department_id = t2.department_id JOIN locations AS t3 ON t2.location_id = t3.location_id WHERE t1.first_name LIKE '%z%'",
        "schema": "CREATE TABLE countries (COUNTRY_ID TEXT); CREATE TABLE locations (STREET_ADDRESS TEXT, COUNTRY_ID TEXT, LOCATION_ID NUMBER, STATE_PROVINCE TEXT, CITY TEXT); CREATE TABLE employees (LAST_NAME TEXT, FIRST_NAME TEXT, DEPARTMENT_ID NUMBER, EMPLOYEE_ID NUMBER); CREATE TABLE departments (LOCATION_ID NUMBER, DEPARTMENT_ID NUMBER, DEPARTMENT_NAME TEXT);"
      }
    ],
    [
      {
        "question": "What are the names of each department?",
        "query": "SELECT department_name FROM departments",
        "schema": "CREATE TABLE regions (REGION_NAME TEXT); CREATE TABLE locations (LOCATION_ID NUMBER); CREATE TABLE departments (DEPARTMENT_NAME TEXT, DEPARTMENT_ID NUMBER, MANAGER_ID NUMBER); CREATE TABLE employees (EMPLOYEE_ID NUMBER, LAST_NAME TEXT, FIRST_NAME TEXT, DEPARTMENT_ID NUMBER); CREATE TABLE job_history (DEPARTMENT_ID NUMBER);"
      },
      {
        "question": "Also, in what city and state province are they in?",
        "query": "SELECT t1.department_name , t2.city , t2.state_province FROM departments AS t1 JOIN locations AS t2 ON t2.location_id = t1.location_id",
        "schema": "CREATE TABLE job_history (DEPARTMENT_ID NUMBER); CREATE TABLE departments (MANAGER_ID NUMBER, DEPARTMENT_ID NUMBER, LOCATION_ID NUMBER, DEPARTMENT_NAME TEXT); CREATE TABLE countries (COUNTRY_ID TEXT, COUNTRY_NAME TEXT); CREATE TABLE locations (CITY TEXT, LOCATION_ID NUMBER, STATE_PROVINCE TEXT, COUNTRY_ID TEXT); CREATE TABLE employees (FIRST_NAME TEXT, EMPLOYEE_ID NUMBER, DEPARTMENT_ID NUMBER, LAST_NAME TEXT); CREATE TABLE regions (REGION_NAME TEXT);"
      }
    ],
    [
      {
        "question": "What are the full names and ids for all employees?",
        "query": "SELECT first_name , last_name , employee_id FROM employees",
        "schema": "CREATE TABLE employees (FIRST_NAME TEXT, EMPLOYEE_ID NUMBER, MANAGER_ID NUMBER, LAST_NAME TEXT, DEPARTMENT_ID NUMBER);"
      },
      {
        "question": "Also, what are the names of the countries that they work in?",
        "query": "SELECT first_name , last_name , employee_id , country_name FROM employees AS t1 JOIN departments AS t2 ON t1.department_id = t2.department_id JOIN locations AS t3 ON t2.location_id = t3.location_id JOIN countries AS t4 ON t3.country_id = t4.country_id",
        "schema": "CREATE TABLE departments (LOCATION_ID NUMBER, DEPARTMENT_ID NUMBER, DEPARTMENT_NAME TEXT); CREATE TABLE regions (REGION_ID NUMBER, REGION_NAME TEXT); CREATE TABLE locations (LOCATION_ID NUMBER, COUNTRY_ID TEXT, STATE_PROVINCE TEXT); CREATE TABLE countries (COUNTRY_ID TEXT, COUNTRY_NAME TEXT, REGION_ID NUMBER); CREATE TABLE employees (MANAGER_ID NUMBER, DEPARTMENT_ID NUMBER, LAST_NAME TEXT, EMPLOYEE_ID NUMBER, FIRST_NAME TEXT);"
      }
    ],
    [
      {
        "question": "What are the different department names?",
        "query": "SELECT department_name FROM departments",
        "schema": "CREATE TABLE job_history (DEPARTMENT_ID NUMBER); CREATE TABLE employees (LAST_NAME TEXT, FIRST_NAME TEXT, EMPLOYEE_ID NUMBER, DEPARTMENT_ID NUMBER); CREATE TABLE departments (DEPARTMENT_ID NUMBER, MANAGER_ID NUMBER, DEPARTMENT_NAME TEXT);"
      },
      {
        "question": "How many employees work in each one?",
        "query": "SELECT department_name , count(*) FROM employees AS t1 JOIN departments AS t2 ON t1.department_id = t2.department_id GROUP BY department_name",
        "schema": "CREATE TABLE employees (FIRST_NAME TEXT, LAST_NAME TEXT, MANAGER_ID NUMBER, DEPARTMENT_ID NUMBER, JOB_ID TEXT, EMPLOYEE_ID NUMBER); CREATE TABLE job_history (DEPARTMENT_ID NUMBER); CREATE TABLE locations (LOCATION_ID NUMBER); CREATE TABLE jobs (JOB_ID TEXT); CREATE TABLE departments (DEPARTMENT_NAME TEXT, MANAGER_ID NUMBER, DEPARTMENT_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Who are all the employees working in the city of London?",
        "query": "SELECT * FROM employees AS t1 JOIN departments AS t2 ON t1.department_id = t2.department_id JOIN locations AS t3 ON t2.location_id = t3.location_id WHERE t3.city = 'London'",
        "schema": "CREATE TABLE employees (FIRST_NAME TEXT, DEPARTMENT_ID NUMBER, MANAGER_ID NUMBER, LAST_NAME TEXT, EMPLOYEE_ID NUMBER, JOB_ID TEXT); CREATE TABLE regions (REGION_NAME TEXT, REGION_ID NUMBER); CREATE TABLE departments (DEPARTMENT_NAME TEXT, MANAGER_ID NUMBER, DEPARTMENT_ID NUMBER, LOCATION_ID NUMBER); CREATE TABLE locations (COUNTRY_ID TEXT, LOCATION_ID NUMBER, CITY TEXT, STATE_PROVINCE TEXT); CREATE TABLE countries (COUNTRY_ID TEXT, REGION_ID NUMBER, COUNTRY_NAME TEXT); CREATE TABLE job_history (EMPLOYEE_ID NUMBER);"
      },
      {
        "question": "What are their full names and salaries?",
        "query": "SELECT first_name , last_name , salary FROM employees AS t1 JOIN departments AS t2 ON t1.department_id = t2.department_id JOIN locations AS t3 ON t2.location_id = t3.location_id WHERE t3.city = 'London'",
        "schema": "CREATE TABLE countries (COUNTRY_NAME TEXT, COUNTRY_ID TEXT, REGION_ID NUMBER); CREATE TABLE regions (REGION_NAME TEXT, REGION_ID NUMBER); CREATE TABLE employees (LAST_NAME TEXT, EMPLOYEE_ID NUMBER, SALARY NUMBER, JOB_ID TEXT, FIRST_NAME TEXT, DEPARTMENT_ID NUMBER, MANAGER_ID NUMBER); CREATE TABLE locations (COUNTRY_ID TEXT, LOCATION_ID NUMBER, CITY TEXT, STATE_PROVINCE TEXT); CREATE TABLE departments (DEPARTMENT_NAME TEXT, MANAGER_ID NUMBER, DEPARTMENT_ID NUMBER, LOCATION_ID NUMBER); CREATE TABLE jobs (MAX_SALARY NUMBER, MIN_SALARY NUMBER); CREATE TABLE job_history (EMPLOYEE_ID NUMBER);"
      }
    ]
  ],
  "college_3": [
    [
      {
        "question": "What is all the course information?",
        "query": "SELECT * FROM course",
        "schema": "CREATE TABLE Department (DNO NUMBER, DName TEXT); CREATE TABLE Enrolled_in (CID TEXT); CREATE TABLE Course (DNO NUMBER, CName TEXT, CID TEXT); CREATE TABLE Faculty (FacID NUMBER); CREATE TABLE Student (StuID NUMBER);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT count(*) FROM course",
        "schema": "CREATE TABLE Enrolled_in (CID TEXT); CREATE TABLE Faculty (FacID NUMBER); CREATE TABLE Course (CName TEXT, Hours TEXT, CID TEXT, DNO NUMBER); CREATE TABLE Student (StuID NUMBER); CREATE TABLE Department (DName TEXT, DNO NUMBER);"
      }
    ],
    [
      {
        "question": "What is all the information for courses with more than 2 credits?",
        "query": "SELECT * FROM course WHERE credits > 2",
        "schema": "CREATE TABLE Student (StuID NUMBER); CREATE TABLE Department (DNO NUMBER, DName TEXT); CREATE TABLE Course (CID TEXT, Credits NUMBER, Hours TEXT, DNO NUMBER, CName TEXT);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT count(*) FROM course WHERE credits > 2",
        "schema": "CREATE TABLE Course (Hours TEXT, CName TEXT, Credits NUMBER, DNO NUMBER, CID TEXT); CREATE TABLE Department (DName TEXT, DNO NUMBER); CREATE TABLE Student (StuID NUMBER);"
      }
    ],
    [
      {
        "question": "What are all the course names?",
        "query": "SELECT cname FROM course",
        "schema": "CREATE TABLE Student (StuID NUMBER); CREATE TABLE Course (CName TEXT, CID TEXT, DNO NUMBER); CREATE TABLE Faculty (Fname TEXT, FacID NUMBER); CREATE TABLE Department (DNO NUMBER);"
      },
      {
        "question": "Of those, which are taught on the days MTW?",
        "query": "SELECT cname FROM course WHERE days = \"MTW\"",
        "schema": "CREATE TABLE Course (Days TEXT, CName TEXT, DNO NUMBER, CID TEXT, Hours TEXT); CREATE TABLE Faculty (Fname TEXT, FacID NUMBER); CREATE TABLE Student (StuID NUMBER); CREATE TABLE Department (DNO NUMBER, DName TEXT);"
      }
    ],
    [
      {
        "question": "How many departments are there?",
        "query": "SELECT count(*) FROM department",
        "schema": "CREATE TABLE Faculty (Rank TEXT, FacID NUMBER); CREATE TABLE Department (DNO NUMBER, DPhone NUMBER, Division TEXT, Room TEXT, DName TEXT); CREATE TABLE Member_of (DNO NUMBER, FacID NUMBER); CREATE TABLE Course (DNO NUMBER, Instructor NUMBER); CREATE TABLE Enrolled_in (StuID NUMBER); CREATE TABLE Student (LName TEXT, StuID NUMBER); CREATE TABLE Minor_in (StuID NUMBER, DNO NUMBER);"
      },
      {
        "question": "Of those, how many are in the \"AS\" division?",
        "query": "SELECT count(*) FROM department WHERE division = \"AS\"",
        "schema": "CREATE TABLE Student (StuID NUMBER, LName TEXT); CREATE TABLE Course (Instructor NUMBER, DNO NUMBER); CREATE TABLE Minor_in (StuID NUMBER, DNO NUMBER); CREATE TABLE Member_of (FacID NUMBER, DNO NUMBER); CREATE TABLE Enrolled_in (StuID NUMBER); CREATE TABLE Faculty (Rank TEXT, FacID NUMBER); CREATE TABLE Department (DName TEXT, Division TEXT, Room TEXT, DNO NUMBER, DPhone NUMBER);"
      }
    ],
    [
      {
        "question": "What is all the information about departments in room 268?",
        "query": "SELECT * FROM department WHERE room = 268",
        "schema": "CREATE TABLE Course (DNO NUMBER); CREATE TABLE Faculty (Room TEXT, Building TEXT); CREATE TABLE Department (DName TEXT, Room TEXT, Building TEXT, DNO NUMBER); CREATE TABLE Minor_in (StuID NUMBER, DNO NUMBER); CREATE TABLE Student (StuID NUMBER);"
      },
      {
        "question": "What are their phones?",
        "query": "SELECT dphone FROM department WHERE room = 268",
        "schema": "CREATE TABLE Course (DNO NUMBER); CREATE TABLE Department (DNO NUMBER, Room TEXT, DPhone NUMBER, DName TEXT, Building TEXT); CREATE TABLE Minor_in (StuID NUMBER, DNO NUMBER); CREATE TABLE Faculty (Building TEXT, Room TEXT, Phone NUMBER); CREATE TABLE Student (StuID NUMBER);"
      }
    ],
    [
      {
        "question": "What are the distinct student ids for students who have gotten a \"B\" grade?",
        "query": "SELECT DISTINCT stuid FROM enrolled_in WHERE grade = \"B\"",
        "schema": "CREATE TABLE Student (LName TEXT, StuID NUMBER); CREATE TABLE Gradeconversion (lettergrade TEXT, gradepoint NUMBER); CREATE TABLE Course (CName TEXT, DNO NUMBER); CREATE TABLE Enrolled_in (CID TEXT, StuID NUMBER, Grade TEXT); CREATE TABLE Department (DName TEXT, DNO NUMBER); CREATE TABLE Minor_in (StuID NUMBER);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT count(DISTINCT stuid) FROM enrolled_in WHERE grade = \"B\"",
        "schema": "CREATE TABLE Enrolled_in (CID TEXT, Grade TEXT, StuID NUMBER); CREATE TABLE Department (DNO NUMBER, DName TEXT); CREATE TABLE Student (StuID NUMBER, LName TEXT); CREATE TABLE Gradeconversion (gradepoint NUMBER, lettergrade TEXT); CREATE TABLE Course (CName TEXT, DNO NUMBER); CREATE TABLE Minor_in (StuID NUMBER);"
      }
    ],
    [
      {
        "question": "What is the maximum gradepoint?",
        "query": "SELECT max(gradepoint) FROM gradeconversion",
        "schema": "CREATE TABLE Student (StuID NUMBER, Age NUMBER); CREATE TABLE Course (Hours TEXT, CID TEXT, Credits NUMBER); CREATE TABLE Department (DName TEXT, DNO NUMBER); CREATE TABLE Gradeconversion (lettergrade TEXT, gradepoint NUMBER); CREATE TABLE Enrolled_in (StuID NUMBER, CID TEXT, Grade TEXT);"
      },
      {
        "question": "Also, what is the minimum gradepoint?",
        "query": "SELECT max(gradepoint) , min(gradepoint) FROM gradeconversion",
        "schema": "CREATE TABLE Course (Hours TEXT, CID TEXT, CName TEXT, Credits NUMBER); CREATE TABLE Student (StuID NUMBER, Age NUMBER); CREATE TABLE Gradeconversion (gradepoint NUMBER, lettergrade TEXT); CREATE TABLE Department (DNO NUMBER, DName TEXT); CREATE TABLE Enrolled_in (Grade TEXT, CID TEXT, StuID NUMBER);"
      }
    ],
    [
      {
        "question": "What are all the distinct student first names?",
        "query": "SELECT DISTINCT fname FROM student",
        "schema": "CREATE TABLE Faculty (Lname TEXT, Fname TEXT); CREATE TABLE Student (Fname TEXT, StuID NUMBER, LName TEXT);"
      },
      {
        "question": "Of those, which contain the letter \"a\"?",
        "query": "SELECT DISTINCT fname FROM student WHERE fname LIKE '%a%'",
        "schema": "CREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT); CREATE TABLE Faculty (Fname TEXT, Lname TEXT);"
      }
    ],
    [
      {
        "question": "What are the full names of all the faculty?",
        "query": "SELECT fname , lname FROM faculty",
        "schema": "CREATE TABLE Faculty (Lname TEXT, FacID NUMBER, Fname TEXT, Rank TEXT); CREATE TABLE Member_of (FacID NUMBER);"
      },
      {
        "question": "Of those, which have sex M?",
        "query": "SELECT fname , lname FROM faculty WHERE sex = \"M\"",
        "schema": "CREATE TABLE Member_of (FacID NUMBER); CREATE TABLE Student (Sex TEXT); CREATE TABLE Faculty (Sex TEXT, Rank TEXT, Fname TEXT, FacID NUMBER, Lname TEXT);"
      },
      {
        "question": "Of those, which are in building NEB?",
        "query": "SELECT fname , lname FROM faculty WHERE sex = \"M\" AND building = \"NEB\"",
        "schema": "CREATE TABLE Member_of (FacID NUMBER); CREATE TABLE Department (Building TEXT); CREATE TABLE Student (Sex TEXT); CREATE TABLE Faculty (Sex TEXT, Fname TEXT, Lname TEXT, FacID NUMBER, Rank TEXT, Building TEXT);"
      }
    ],
    [
      {
        "question": "What are the rooms for all faculty with rank professor?",
        "query": "SELECT room FROM faculty WHERE rank = \"Professor\"",
        "schema": "CREATE TABLE Faculty (Rank TEXT, Room TEXT, FacID NUMBER, Building TEXT); CREATE TABLE Department (DName TEXT, DNO NUMBER, Room TEXT);"
      },
      {
        "question": "Of those, which are for faculty who live in building NEB?",
        "query": "SELECT room FROM faculty WHERE rank = \"Professor\" AND building = \"NEB\"",
        "schema": "CREATE TABLE Department (DName TEXT, Room TEXT, DNO NUMBER, Building TEXT); CREATE TABLE Faculty (Room TEXT, FacID NUMBER, Lname TEXT, Building TEXT, Rank TEXT);"
      }
    ],
    [
      {
        "question": "What are the names of the departments?",
        "query": "SELECT dname FROM department",
        "schema": "CREATE TABLE Course (DNO NUMBER, CName TEXT); CREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT); CREATE TABLE Minor_in (DNO NUMBER); CREATE TABLE Faculty (Rank TEXT, FacID NUMBER); CREATE TABLE Department (DName TEXT, DNO NUMBER);"
      },
      {
        "question": "Which corresponds to the one in building Mergenthaler?",
        "query": "SELECT dname FROM department WHERE building = \"Mergenthaler\"",
        "schema": "CREATE TABLE Course (DNO NUMBER, CName TEXT); CREATE TABLE Department (DNO NUMBER, Building TEXT, DName TEXT); CREATE TABLE Faculty (FacID NUMBER, Building TEXT, Rank TEXT); CREATE TABLE Student (LName TEXT, Fname TEXT, StuID NUMBER); CREATE TABLE Minor_in (DNO NUMBER);"
      }
    ],
    [
      {
        "question": "What is all the information about credits?",
        "query": "SELECT * FROM course",
        "schema": "CREATE TABLE Course (CID TEXT, DNO NUMBER, Hours TEXT, CName TEXT, Instructor NUMBER, Credits NUMBER); CREATE TABLE Member_of (DNO NUMBER, FacID NUMBER); CREATE TABLE Student (LName TEXT, StuID NUMBER); CREATE TABLE Faculty (FacID NUMBER); CREATE TABLE Enrolled_in (StuID NUMBER); CREATE TABLE Department (DNO NUMBER);"
      },
      {
        "question": "Order this in ascending order.",
        "query": "SELECT * FROM course ORDER BY credits",
        "schema": "CREATE TABLE Faculty (FacID NUMBER); CREATE TABLE Student (LName TEXT, StuID NUMBER); CREATE TABLE Enrolled_in (StuID NUMBER); CREATE TABLE Member_of (FacID NUMBER, DNO NUMBER); CREATE TABLE Department (DNO NUMBER); CREATE TABLE Course (Credits NUMBER, DNO NUMBER, CName TEXT, CID TEXT, Instructor NUMBER, Hours TEXT);"
      }
    ],
    [
      {
        "question": "What are all the course names?",
        "query": "SELECT cname FROM course",
        "schema": "CREATE TABLE Course (CID TEXT, CName TEXT, DNO NUMBER); CREATE TABLE Faculty (Fname TEXT, FacID NUMBER); CREATE TABLE Student (LName TEXT, StuID NUMBER); CREATE TABLE Department (DNO NUMBER);"
      },
      {
        "question": "Order them by credits.",
        "query": "SELECT cname FROM course ORDER BY credits",
        "schema": "CREATE TABLE Department (DNO NUMBER); CREATE TABLE Course (CID TEXT, CName TEXT, Credits NUMBER, DNO NUMBER); CREATE TABLE Student (LName TEXT, StuID NUMBER); CREATE TABLE Faculty (FacID NUMBER, Fname TEXT);"
      }
    ],
    [
      {
        "question": "What is all the student information, ordered by age descending?",
        "query": "SELECT * FROM student ORDER BY age DESC",
        "schema": "CREATE TABLE Student (StuID NUMBER, LName TEXT, Age NUMBER); CREATE TABLE Department (DName TEXT, DNO NUMBER);"
      },
      {
        "question": "What are their first names?",
        "query": "SELECT fname FROM student ORDER BY age DESC",
        "schema": "CREATE TABLE Student (Age NUMBER, Fname TEXT, StuID NUMBER, LName TEXT); CREATE TABLE Department (DNO NUMBER, DName TEXT); CREATE TABLE Faculty (Lname TEXT, Fname TEXT);"
      }
    ],
    [
      {
        "question": "What are the last names of all the female students?",
        "query": "SELECT lname FROM student WHERE sex = \"F\"",
        "schema": "CREATE TABLE Faculty (Sex TEXT); CREATE TABLE Student (Fname TEXT, Sex TEXT, StuID NUMBER, LName TEXT); CREATE TABLE Member_of (FacID NUMBER);"
      },
      {
        "question": "Order this by age descending.",
        "query": "SELECT lname FROM student WHERE sex = \"F\" ORDER BY age DESC",
        "schema": "CREATE TABLE Student (StuID NUMBER, Fname TEXT, LName TEXT, Sex TEXT, Age NUMBER); CREATE TABLE Faculty (Sex TEXT); CREATE TABLE Member_of (FacID NUMBER);"
      }
    ],
    [
      {
        "question": "What are the last names of faculty in building Barton?",
        "query": "SELECT lname FROM faculty WHERE building = \"Barton\"",
        "schema": "CREATE TABLE Faculty (FacID NUMBER, Lname TEXT, Room TEXT, Building TEXT, Rank TEXT, Fname TEXT); CREATE TABLE Member_of (FacID NUMBER, DNO NUMBER); CREATE TABLE Department (Building TEXT, DNO NUMBER, DName TEXT);"
      },
      {
        "question": "Order this alphabetically.",
        "query": "SELECT lname FROM faculty WHERE building = \"Barton\" ORDER BY lname",
        "schema": "CREATE TABLE Department (DNO NUMBER, Building TEXT, DName TEXT); CREATE TABLE Member_of (DNO NUMBER, FacID NUMBER); CREATE TABLE Faculty (Lname TEXT, Rank TEXT, Building TEXT, FacID NUMBER, Fname TEXT, Room TEXT);"
      }
    ],
    [
      {
        "question": "What are the first names of all the faculty?",
        "query": "SELECT fname FROM faculty",
        "schema": "CREATE TABLE Member_of (FacID NUMBER); CREATE TABLE Faculty (FacID NUMBER, Rank TEXT, Lname TEXT, Fname TEXT);"
      },
      {
        "question": "Of those, which are professors?",
        "query": "SELECT fname FROM faculty WHERE rank = \"Professor\"",
        "schema": "CREATE TABLE Member_of (FacID NUMBER); CREATE TABLE Faculty (FacID NUMBER, Lname TEXT, Rank TEXT, Fname TEXT); CREATE TABLE Course (Instructor NUMBER);"
      },
      {
        "question": "Sort this in alphabetical order.",
        "query": "SELECT fname FROM faculty WHERE rank = \"Professor\" ORDER BY fname",
        "schema": "CREATE TABLE Faculty (Fname TEXT, FacID NUMBER, Rank TEXT, Lname TEXT); CREATE TABLE Course (Instructor NUMBER); CREATE TABLE Member_of (FacID NUMBER);"
      }
    ],
    [
      {
        "question": "What are all the department names?",
        "query": "SELECT dname FROM department",
        "schema": "CREATE TABLE Course (DNO NUMBER); CREATE TABLE Minor_in (DNO NUMBER); CREATE TABLE Department (DNO NUMBER, DName TEXT); CREATE TABLE Student (Fname TEXT, LName TEXT, StuID NUMBER); CREATE TABLE Faculty (Rank TEXT, Fname TEXT, FacID NUMBER);"
      },
      {
        "question": "Order these descending by the number of students minoring in them.",
        "query": "SELECT t1.dname FROM department AS t1 JOIN minor_in AS t2 ON t1.dno = t2.dno GROUP BY t2.dno ORDER BY count(*) DESC",
        "schema": "CREATE TABLE Faculty (Rank TEXT, Fname TEXT, FacID NUMBER); CREATE TABLE Course (CID TEXT, DNO NUMBER); CREATE TABLE Enrolled_in (StuID NUMBER, CID TEXT); CREATE TABLE Minor_in (StuID NUMBER, DNO NUMBER); CREATE TABLE Department (DNO NUMBER, DName TEXT); CREATE TABLE Student (StuID NUMBER, Fname TEXT, LName TEXT);"
      },
      {
        "question": "Which has the most?",
        "query": "SELECT t1.dname FROM department AS t1 JOIN minor_in AS t2 ON t1.dno = t2.dno GROUP BY t2.dno ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Enrolled_in (CID TEXT, StuID NUMBER); CREATE TABLE Course (Hours TEXT, DNO NUMBER, CID TEXT); CREATE TABLE Faculty (Fname TEXT, Rank TEXT, FacID NUMBER); CREATE TABLE Department (DName TEXT, DNO NUMBER); CREATE TABLE Minor_in (StuID NUMBER, DNO NUMBER); CREATE TABLE Student (LName TEXT, StuID NUMBER, Fname TEXT);"
      }
    ],
    [
      {
        "question": "What are the names of departments that have students minoring in them?",
        "query": "SELECT t1.dname FROM department AS t1 JOIN minor_in AS t2 ON t1.dno = t2.dno",
        "schema": "CREATE TABLE Faculty (FacID NUMBER, Rank TEXT); CREATE TABLE Student (StuID NUMBER); CREATE TABLE Course (DNO NUMBER, CName TEXT, CID TEXT); CREATE TABLE Minor_in (StuID NUMBER, DNO NUMBER); CREATE TABLE Enrolled_in (CID TEXT, StuID NUMBER); CREATE TABLE Department (DName TEXT, Room TEXT, DNO NUMBER);"
      },
      {
        "question": "What are all the other department names?",
        "query": "SELECT dname FROM department EXCEPT SELECT t1.dname FROM department AS t1 JOIN minor_in AS t2 ON t1.dno = t2.dno",
        "schema": "CREATE TABLE Student (StuID NUMBER); CREATE TABLE Department (DNO NUMBER, DName TEXT, Room TEXT); CREATE TABLE Minor_in (DNO NUMBER, StuID NUMBER); CREATE TABLE Enrolled_in (StuID NUMBER, CID TEXT); CREATE TABLE Course (DNO NUMBER, CName TEXT, CID TEXT); CREATE TABLE Faculty (Rank TEXT, FacID NUMBER);"
      }
    ],
    [
      {
        "question": "What are all the department names?",
        "query": "SELECT dname FROM department",
        "schema": "CREATE TABLE Course (DNO NUMBER); CREATE TABLE Faculty (Fname TEXT, Rank TEXT, FacID NUMBER); CREATE TABLE Department (DNO NUMBER, DName TEXT); CREATE TABLE Student (StuID NUMBER, Fname TEXT, LName TEXT);"
      },
      {
        "question": "Order them by the number of members in each.",
        "query": "SELECT t1.dname FROM department AS t1 JOIN member_of AS t2 ON t1.dno = t2.dno GROUP BY t2.dno ORDER BY count(*) ASC",
        "schema": "CREATE TABLE Faculty (Rank TEXT, Fname TEXT, FacID NUMBER); CREATE TABLE Member_of (FacID NUMBER, DNO NUMBER); CREATE TABLE Minor_in (StuID NUMBER, DNO NUMBER); CREATE TABLE Course (DNO NUMBER); CREATE TABLE Department (DNO NUMBER, DName TEXT); CREATE TABLE Student (StuID NUMBER, Fname TEXT, LName TEXT);"
      },
      {
        "question": "Which has the fewest?",
        "query": "SELECT t1.dname FROM department AS t1 JOIN member_of AS t2 ON t1.dno = t2.dno GROUP BY t2.dno ORDER BY count(*) ASC LIMIT 1",
        "schema": "CREATE TABLE Department (DName TEXT, DNO NUMBER); CREATE TABLE Minor_in (DNO NUMBER, StuID NUMBER); CREATE TABLE Student (Fname TEXT, LName TEXT, StuID NUMBER); CREATE TABLE Faculty (Rank TEXT, FacID NUMBER, Fname TEXT); CREATE TABLE Member_of (DNO NUMBER, FacID NUMBER); CREATE TABLE Course (DNO NUMBER);"
      }
    ],
    [
      {
        "question": "What are the different faculty ranks?",
        "query": "SELECT rank FROM faculty GROUP BY rank",
        "schema": "CREATE TABLE Faculty (Lname TEXT, FacID NUMBER, Rank TEXT);"
      },
      {
        "question": "Order them by the number of faculty in each rank.",
        "query": "SELECT rank FROM faculty GROUP BY rank ORDER BY count(*) ASC",
        "schema": "CREATE TABLE Faculty (Lname TEXT, Rank TEXT, FacID NUMBER);"
      },
      {
        "question": "Which has the fewest?",
        "query": "SELECT rank FROM faculty GROUP BY rank ORDER BY count(*) ASC LIMIT 1",
        "schema": "CREATE TABLE Faculty (FacID NUMBER, Rank TEXT, Lname TEXT);"
      }
    ],
    [
      {
        "question": "What are the full names of all the faculty?",
        "query": "SELECT fname , lname FROM faculty",
        "schema": "CREATE TABLE Faculty (FacID NUMBER, Fname TEXT, Lname TEXT, Rank TEXT); CREATE TABLE Member_of (FacID NUMBER);"
      },
      {
        "question": "Order them by the number of courses they teach, descending.",
        "query": "SELECT t2.fname , t2.lname FROM course AS t1 JOIN faculty AS t2 ON t1.instructor = t2.facid GROUP BY t1.instructor ORDER BY count(*) DESC",
        "schema": "CREATE TABLE Faculty (Rank TEXT, Lname TEXT, FacID NUMBER, Fname TEXT); CREATE TABLE Course (Hours TEXT, CID TEXT, CName TEXT, Instructor NUMBER); CREATE TABLE Member_of (FacID NUMBER);"
      },
      {
        "question": "Who are the top three?",
        "query": "SELECT t2.fname , t2.lname FROM course AS t1 JOIN faculty AS t2 ON t1.instructor = t2.facid GROUP BY t1.instructor ORDER BY count(*) DESC LIMIT 3",
        "schema": "CREATE TABLE Faculty (Fname TEXT, Lname TEXT, Rank TEXT, FacID NUMBER); CREATE TABLE Course (CName TEXT, CID TEXT, Hours TEXT, Instructor NUMBER); CREATE TABLE Member_of (FacID NUMBER);"
      }
    ],
    [
      {
        "question": "What is all the information about all the faculty?",
        "query": "SELECT * FROM faculty",
        "schema": "CREATE TABLE Member_of (FacID NUMBER); CREATE TABLE Course (Instructor NUMBER); CREATE TABLE Department (DName TEXT, DNO NUMBER); CREATE TABLE Faculty (FacID NUMBER, Lname TEXT, Sex TEXT, Room TEXT, Fname TEXT, Rank TEXT);"
      },
      {
        "question": "Order this by the number of courses each faculty teaches, descending.",
        "query": "SELECT * FROM course AS t1 JOIN faculty AS t2 ON t1.instructor = t2.facid GROUP BY t1.instructor ORDER BY count(*) DESC",
        "schema": "CREATE TABLE Course (Hours TEXT, Instructor NUMBER, CName TEXT); CREATE TABLE Faculty (Rank TEXT, Sex TEXT, Room TEXT, Fname TEXT, Lname TEXT, FacID NUMBER); CREATE TABLE Department (DNO NUMBER, DName TEXT); CREATE TABLE Member_of (FacID NUMBER);"
      },
      {
        "question": "What is the building that the one who teachest the most lives in?",
        "query": "SELECT t2.building FROM course AS t1 JOIN faculty AS t2 ON t1.instructor = t2.facid GROUP BY t1.instructor ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Member_of (FacID NUMBER); CREATE TABLE Faculty (Sex TEXT, Building TEXT, Rank TEXT, Fname TEXT, Lname TEXT, Room TEXT, FacID NUMBER); CREATE TABLE Course (CName TEXT, Instructor NUMBER, Hours TEXT); CREATE TABLE Department (Building TEXT, DName TEXT, DNO NUMBER);"
      }
    ],
    [
      {
        "question": "What are all the course names?",
        "query": "SELECT cname FROM course",
        "schema": "CREATE TABLE Department (DNO NUMBER); CREATE TABLE Course (DNO NUMBER, CID TEXT, CName TEXT); CREATE TABLE Student (StuID NUMBER); CREATE TABLE Faculty (Fname TEXT, FacID NUMBER);"
      },
      {
        "question": "Of those, which have at least five students enrolled?",
        "query": "SELECT t1.cname FROM course AS t1 JOIN enrolled_in AS t2 ON t1.cid = t2.cid GROUP BY t2.cid HAVING count(*) >= 5",
        "schema": "CREATE TABLE Student (StuID NUMBER); CREATE TABLE Enrolled_in (CID TEXT, StuID NUMBER); CREATE TABLE Faculty (Fname TEXT, FacID NUMBER); CREATE TABLE Course (CName TEXT, DNO NUMBER, CID TEXT); CREATE TABLE Department (DNO NUMBER, DName TEXT);"
      }
    ],
    [
      {
        "question": "What are the full names of all faculty?",
        "query": "SELECT fname , lname FROM faculty",
        "schema": "CREATE TABLE Member_of (FacID NUMBER); CREATE TABLE Faculty (Lname TEXT, Fname TEXT, Rank TEXT, FacID NUMBER);"
      },
      {
        "question": "Of those, which has a course named COMPUTER LITERACY?",
        "query": "SELECT t2.fname , t2.lname FROM course AS t1 JOIN faculty AS t2 ON t1.instructor = t2.facid WHERE t1.cname = \"COMPUTER LITERACY\"",
        "schema": "CREATE TABLE Department (DNO NUMBER); CREATE TABLE Member_of (FacID NUMBER); CREATE TABLE Faculty (FacID NUMBER, Lname TEXT, Fname TEXT, Rank TEXT); CREATE TABLE Course (DNO NUMBER, CID TEXT, Instructor NUMBER, CName TEXT);"
      }
    ],
    [
      {
        "question": "What is all the information about the course INTRODUCTION TO COMPUTER SCIENCE?",
        "query": "SELECT * FROM course WHERE cname = \"INTRODUCTION TO COMPUTER SCIENCE\"",
        "schema": "CREATE TABLE Course (DNO NUMBER, CID TEXT, CName TEXT); CREATE TABLE Department (DName TEXT, DNO NUMBER, Room TEXT);"
      },
      {
        "question": "What room is it held in?",
        "query": "SELECT t2.room FROM course AS t1 JOIN department AS t2 ON t1.dno = t2.dno WHERE t1.cname = \"INTRODUCTION TO COMPUTER SCIENCE\"",
        "schema": "CREATE TABLE Course (DNO NUMBER, CID TEXT, CName TEXT); CREATE TABLE Faculty (Room TEXT); CREATE TABLE Department (DNO NUMBER, Room TEXT, DName TEXT, Building TEXT);"
      },
      {
        "question": "Also, what is the department name for the department that offers it?",
        "query": "SELECT t2.dname , t2.room FROM course AS t1 JOIN department AS t2 ON t1.dno = t2.dno WHERE t1.cname = \"INTRODUCTION TO COMPUTER SCIENCE\"",
        "schema": "CREATE TABLE Department (DName TEXT, Building TEXT, Room TEXT, DNO NUMBER); CREATE TABLE Faculty (Room TEXT); CREATE TABLE Course (DNO NUMBER, CID TEXT, CName TEXT);"
      }
    ],
    [
      {
        "question": "What are the full names of all students?",
        "query": "SELECT fname , lname FROM student",
        "schema": "CREATE TABLE Faculty (Fname TEXT, Lname TEXT); CREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT);"
      },
      {
        "question": "Also, what are the gradepoints for any classes they are enrolled in?",
        "query": "SELECT t3.fname , t3.lname , t2.gradepoint FROM enrolled_in AS t1 JOIN gradeconversion AS t2 JOIN student AS t3 ON t1.grade = t2.lettergrade AND t1.stuid = t3.stuid",
        "schema": "CREATE TABLE Course (CID TEXT, CName TEXT, DNO NUMBER); CREATE TABLE Faculty (Fname TEXT, Lname TEXT); CREATE TABLE Student (LName TEXT, Fname TEXT, StuID NUMBER); CREATE TABLE Enrolled_in (StuID NUMBER, Grade TEXT, CID TEXT); CREATE TABLE Gradeconversion (lettergrade TEXT, gradepoint NUMBER);"
      }
    ],
    [
      {
        "question": "What are the distinct first names of students?",
        "query": "SELECT DISTINCT fname FROM student",
        "schema": "CREATE TABLE Student (LName TEXT, Fname TEXT, StuID NUMBER); CREATE TABLE Faculty (Lname TEXT, Fname TEXT);"
      },
      {
        "question": "Of those, which have a gradepoint of at least 3.8 in one course?",
        "query": "SELECT DISTINCT t3.fname FROM enrolled_in AS t1 JOIN gradeconversion AS t2 JOIN student AS t3 ON t1.grade = t2.lettergrade AND t1.stuid = t3.stuid WHERE t2.gradepoint >= 3.8",
        "schema": "CREATE TABLE Gradeconversion (gradepoint NUMBER, lettergrade TEXT); CREATE TABLE Course (CID TEXT, DNO NUMBER, CName TEXT); CREATE TABLE Faculty (Lname TEXT, Fname TEXT); CREATE TABLE Enrolled_in (CID TEXT, StuID NUMBER, Grade TEXT); CREATE TABLE Student (LName TEXT, Fname TEXT, StuID NUMBER);"
      }
    ],
    [
      {
        "question": "What are the full names of all the faculty?",
        "query": "SELECT fname , lname FROM faculty",
        "schema": "CREATE TABLE Faculty (Rank TEXT, Lname TEXT, Fname TEXT, FacID NUMBER); CREATE TABLE Member_of (FacID NUMBER);"
      },
      {
        "question": "Of those, which are a part of department 520?",
        "query": "SELECT t1.fname , t1.lname FROM faculty AS t1 JOIN member_of AS t2 ON t1.facid = t2.facid WHERE t2.dno = 520",
        "schema": "CREATE TABLE Department (DName TEXT, DNO NUMBER); CREATE TABLE Faculty (Rank TEXT, FacID NUMBER, Lname TEXT, Fname TEXT); CREATE TABLE Member_of (DNO NUMBER, FacID NUMBER); CREATE TABLE Course (Instructor NUMBER, DNO NUMBER, CName TEXT);"
      }
    ],
    [
      {
        "question": "What are the full names of all students?",
        "query": "SELECT fname , lname FROM student",
        "schema": "CREATE TABLE Student (LName TEXT, Fname TEXT, StuID NUMBER); CREATE TABLE Faculty (Lname TEXT, Fname TEXT);"
      },
      {
        "question": "Of those, which are minoring in the department with number 140?",
        "query": "SELECT t2.fname , t2.lname FROM minor_in AS t1 JOIN student AS t2 ON t1.stuid = t2.stuid WHERE t1.dno = 140",
        "schema": "CREATE TABLE Minor_in (StuID NUMBER, DNO NUMBER); CREATE TABLE Member_of (DNO NUMBER); CREATE TABLE Student (LName TEXT, Fname TEXT, StuID NUMBER); CREATE TABLE Department (DNO NUMBER, DName TEXT); CREATE TABLE Course (DNO NUMBER); CREATE TABLE Faculty (Fname TEXT, Lname TEXT); CREATE TABLE Enrolled_in (StuID NUMBER);"
      }
    ],
    [
      {
        "question": "What is all the information about faculty?",
        "query": "SELECT * FROM faculty",
        "schema": "CREATE TABLE Member_of (FacID NUMBER); CREATE TABLE Department (DNO NUMBER, DName TEXT); CREATE TABLE Course (Instructor NUMBER); CREATE TABLE Faculty (Room TEXT, Lname TEXT, Sex TEXT, Rank TEXT, FacID NUMBER, Fname TEXT);"
      },
      {
        "question": "Of those, which are in the computer science department?",
        "query": "SELECT * FROM department AS t1 JOIN faculty AS t2 ON t1.dno = t3.dno JOIN member_of AS t3 ON t2.facid = t3.facid WHERE t1.dname = \"Computer Science\"",
        "schema": "CREATE TABLE Member_of (DNO NUMBER, FacID NUMBER); CREATE TABLE Faculty (Rank TEXT, Sex TEXT, FacID NUMBER, Room TEXT, Building TEXT, Lname TEXT, Fname TEXT); CREATE TABLE Course (Instructor NUMBER); CREATE TABLE Department (DNO NUMBER, DName TEXT);"
      },
      {
        "question": "What are their last names?",
        "query": "SELECT t2.lname FROM department AS t1 JOIN faculty AS t2 ON t1.dno = t3.dno JOIN member_of AS t3 ON t2.facid = t3.facid WHERE t1.dname = \"Computer Science\"",
        "schema": "CREATE TABLE Faculty (Room TEXT, Building TEXT, FacID NUMBER, Lname TEXT, Fname TEXT, Sex TEXT, Rank TEXT); CREATE TABLE Course (Instructor NUMBER); CREATE TABLE Department (DName TEXT, DNO NUMBER); CREATE TABLE Member_of (DNO NUMBER, FacID NUMBER); CREATE TABLE Student (Fname TEXT);"
      }
    ],
    [
      {
        "question": "What is the average gradepoint for any students enrolled in courses?",
        "query": "SELECT avg(t2.gradepoint) FROM enrolled_in AS t1 JOIN gradeconversion AS t2 JOIN student AS t3 ON t1.grade = t2.lettergrade AND t1.stuid = t3.stuid",
        "schema": "CREATE TABLE Gradeconversion (gradepoint NUMBER, lettergrade TEXT); CREATE TABLE Course (CID TEXT, DNO NUMBER, CName TEXT); CREATE TABLE Enrolled_in (Grade TEXT, StuID NUMBER, CID TEXT); CREATE TABLE Department (DNO NUMBER, DName TEXT); CREATE TABLE Student (StuID NUMBER, Age NUMBER);"
      },
      {
        "question": "What is this for students with last name Smith?",
        "query": "SELECT avg(t2.gradepoint) FROM enrolled_in AS t1 JOIN gradeconversion AS t2 JOIN student AS t3 ON t1.grade = t2.lettergrade AND t1.stuid = t3.stuid WHERE t3.lname = \"Smith\"",
        "schema": "CREATE TABLE Gradeconversion (lettergrade TEXT, gradepoint NUMBER); CREATE TABLE Department (DName TEXT, DNO NUMBER); CREATE TABLE Enrolled_in (Grade TEXT, StuID NUMBER, CID TEXT); CREATE TABLE Course (CID TEXT, DNO NUMBER, CName TEXT); CREATE TABLE Student (Age NUMBER, StuID NUMBER, Fname TEXT, LName TEXT); CREATE TABLE Minor_in (StuID NUMBER);"
      }
    ],
    [
      {
        "question": "What is all the information about students living in NYC?",
        "query": "SELECT * FROM student WHERE city_code = \"NYC\"",
        "schema": "CREATE TABLE Student (city_code TEXT, LName TEXT, StuID NUMBER);"
      },
      {
        "question": "What are their gradepoints for the courses they are enrolled in?",
        "query": "SELECT t2.gradepoint FROM enrolled_in AS t1 JOIN gradeconversion AS t2 JOIN student AS t3 ON t1.grade = t2.lettergrade AND t1.stuid = t3.stuid WHERE t3.city_code = \"NYC\"",
        "schema": "CREATE TABLE Gradeconversion (lettergrade TEXT, gradepoint NUMBER); CREATE TABLE Student (city_code TEXT, LName TEXT, StuID NUMBER); CREATE TABLE Department (DNO NUMBER); CREATE TABLE Course (CName TEXT, CID TEXT, DNO NUMBER); CREATE TABLE Enrolled_in (StuID NUMBER, CID TEXT, Grade TEXT);"
      },
      {
        "question": "What are the maximum and minimum?",
        "query": "SELECT max(t2.gradepoint) , min(t2.gradepoint) FROM enrolled_in AS t1 JOIN gradeconversion AS t2 JOIN student AS t3 ON t1.grade = t2.lettergrade AND t1.stuid = t3.stuid WHERE t3.city_code = \"NYC\"",
        "schema": "CREATE TABLE Course (DNO NUMBER, CID TEXT, CName TEXT, Hours TEXT, Credits NUMBER); CREATE TABLE Department (DNO NUMBER); CREATE TABLE Gradeconversion (gradepoint NUMBER, lettergrade TEXT); CREATE TABLE Student (StuID NUMBER, Age NUMBER, city_code TEXT, LName TEXT); CREATE TABLE Enrolled_in (Grade TEXT, StuID NUMBER, CID TEXT); CREATE TABLE Minor_in (StuID NUMBER);"
      }
    ],
    [
      {
        "question": "What are the names of courses with 3 credits?",
        "query": "SELECT cname FROM course WHERE credits = 3",
        "schema": "CREATE TABLE Course (CID TEXT, Credits NUMBER, DNO NUMBER, CName TEXT, Hours TEXT); CREATE TABLE Student (StuID NUMBER); CREATE TABLE Department (DNO NUMBER);"
      },
      {
        "question": "What are the names of courses with 1 credit and 4 hours?",
        "query": "SELECT cname FROM course WHERE credits = 1 AND hours = 4",
        "schema": "CREATE TABLE Course (CName TEXT, DNO NUMBER, Days TEXT, CID TEXT, Credits NUMBER, Hours TEXT); CREATE TABLE Student (StuID NUMBER); CREATE TABLE Department (DNO NUMBER);"
      },
      {
        "question": "What are the names of courses in either group?",
        "query": "SELECT cname FROM course WHERE credits = 3 UNION SELECT cname FROM course WHERE credits = 1 AND hours = 4",
        "schema": "CREATE TABLE Student (StuID NUMBER); CREATE TABLE Course (CID TEXT, Credits NUMBER, Hours TEXT, Days TEXT, CName TEXT, DNO NUMBER); CREATE TABLE Department (DNO NUMBER);"
      }
    ],
    [
      {
        "question": "What are the department names for departments in division AS?",
        "query": "SELECT dname FROM department WHERE division = \"AS\"",
        "schema": "CREATE TABLE Minor_in (DNO NUMBER); CREATE TABLE Course (DNO NUMBER); CREATE TABLE Faculty (FacID NUMBER, Rank TEXT); CREATE TABLE Student (StuID NUMBER); CREATE TABLE Department (DName TEXT, DNO NUMBER, Division TEXT);"
      },
      {
        "question": "What are department names for departments in divison EN and building NEB?",
        "query": "SELECT dname FROM department WHERE division = \"EN\" AND building = \"NEB\"",
        "schema": "CREATE TABLE Faculty (Rank TEXT, FacID NUMBER, Building TEXT); CREATE TABLE Student (StuID NUMBER); CREATE TABLE Minor_in (DNO NUMBER); CREATE TABLE Course (DNO NUMBER); CREATE TABLE Department (DName TEXT, Division TEXT, Building TEXT, DNO NUMBER);"
      },
      {
        "question": "What are the names for departments in either group?",
        "query": "SELECT dname FROM department WHERE division = \"AS\" UNION SELECT dname FROM department WHERE division = \"EN\" AND building = \"NEB\"",
        "schema": "CREATE TABLE Faculty (Rank TEXT, FacID NUMBER, Building TEXT); CREATE TABLE Minor_in (DNO NUMBER); CREATE TABLE Student (StuID NUMBER); CREATE TABLE Course (DNO NUMBER); CREATE TABLE Department (DNO NUMBER, Building TEXT, DName TEXT, Division TEXT);"
      }
    ],
    [
      {
        "question": "What are the student ids for each student?",
        "query": "SELECT stuid FROM student",
        "schema": "CREATE TABLE Student (Sex TEXT, Age NUMBER, Fname TEXT, StuID NUMBER, LName TEXT); CREATE TABLE Enrolled_in (StuID NUMBER, CID TEXT); CREATE TABLE Department (DNO NUMBER); CREATE TABLE Minor_in (StuID NUMBER, DNO NUMBER); CREATE TABLE Course (CID TEXT, CName TEXT); CREATE TABLE Faculty (FacID NUMBER); CREATE TABLE Member_of (Appt_Type TEXT, FacID NUMBER, DNO NUMBER);"
      },
      {
        "question": "Of those, which are not enrolled in any courses?",
        "query": "SELECT stuid FROM student WHERE stuid NOT IN (SELECT stuid FROM enrolled_in)",
        "schema": "CREATE TABLE Course (CID TEXT, CName TEXT); CREATE TABLE Minor_in (StuID NUMBER, DNO NUMBER); CREATE TABLE Department (DNO NUMBER); CREATE TABLE Faculty (FacID NUMBER); CREATE TABLE Member_of (DNO NUMBER, FacID NUMBER, Appt_Type TEXT); CREATE TABLE Enrolled_in (CID TEXT, StuID NUMBER); CREATE TABLE Student (Fname TEXT, StuID NUMBER, LName TEXT, Age NUMBER, Sex TEXT);"
      },
      {
        "question": "What are their first names?",
        "query": "SELECT fname FROM student WHERE stuid NOT IN (SELECT stuid FROM enrolled_in)",
        "schema": "CREATE TABLE Faculty (FacID NUMBER, Lname TEXT, Fname TEXT); CREATE TABLE Student (Fname TEXT, LName TEXT, Age NUMBER, Sex TEXT, StuID NUMBER); CREATE TABLE Course (CID TEXT, CName TEXT); CREATE TABLE Minor_in (StuID NUMBER, DNO NUMBER); CREATE TABLE Department (DNO NUMBER); CREATE TABLE Enrolled_in (StuID NUMBER, CID TEXT); CREATE TABLE Member_of (DNO NUMBER, FacID NUMBER, Appt_Type TEXT);"
      }
    ]
  ],
  "soccer_2": [
    [
      {
        "question": "What can you tell me about college?",
        "query": "SELECT * FROM college",
        "schema": "CREATE TABLE Player (pID NUMBER); CREATE TABLE College (enr NUMBER, cName TEXT, state TEXT); CREATE TABLE Tryout (cName TEXT);"
      },
      {
        "question": "What are the enrollment numbers for each college?",
        "query": "SELECT enr FROM college",
        "schema": "CREATE TABLE Tryout (cName TEXT); CREATE TABLE College (cName TEXT, state TEXT, enr NUMBER); CREATE TABLE Player (pID NUMBER);"
      },
      {
        "question": "What is the total enrollment number for all of the colleges?",
        "query": "SELECT sum(enr) FROM college",
        "schema": "CREATE TABLE Player (pID NUMBER); CREATE TABLE Tryout (cName TEXT); CREATE TABLE College (enr NUMBER, cName TEXT, state TEXT);"
      }
    ],
    [
      {
        "question": "How many are enrolled for each college?",
        "query": "SELECT enr FROM college",
        "schema": "CREATE TABLE Player (pID NUMBER); CREATE TABLE College (cName TEXT, enr NUMBER); CREATE TABLE Tryout (cName TEXT);"
      },
      {
        "question": "What is the average number?",
        "query": "SELECT avg(enr) FROM college",
        "schema": "CREATE TABLE College (cName TEXT, enr NUMBER); CREATE TABLE Tryout (cName TEXT); CREATE TABLE Player (HS NUMBER, pID NUMBER);"
      }
    ],
    [
      {
        "question": "What is all the information on each college?",
        "query": "SELECT * FROM college",
        "schema": "CREATE TABLE Tryout (cName TEXT); CREATE TABLE College (state TEXT, cName TEXT, enr NUMBER);"
      },
      {
        "question": "How many different ones exist?",
        "query": "SELECT count(*) FROM college",
        "schema": "CREATE TABLE Tryout (cName TEXT); CREATE TABLE College (cName TEXT, enr NUMBER, state TEXT);"
      }
    ],
    [
      {
        "question": "What information do you have on players?",
        "query": "SELECT * FROM player",
        "schema": "CREATE TABLE Tryout (pPos TEXT, pID NUMBER); CREATE TABLE Player (pID NUMBER, HS NUMBER, pName TEXT);"
      },
      {
        "question": "Which of those refer to people who trained for more than 1000 hours?",
        "query": "SELECT pname FROM player WHERE hs > 1000",
        "schema": "CREATE TABLE Player (HS NUMBER, pName TEXT, pID NUMBER); CREATE TABLE Tryout (pID NUMBER, pPos TEXT);"
      },
      {
        "question": "How many of them are there?",
        "query": "SELECT count(*) FROM player WHERE hs > 1000",
        "schema": "CREATE TABLE Player (HS NUMBER, pID NUMBER, pName TEXT); CREATE TABLE Tryout (pID NUMBER, pPos TEXT);"
      }
    ],
    [
      {
        "question": "What is all the information on colleges?",
        "query": "SELECT * FROM college",
        "schema": "CREATE TABLE College (state TEXT, cName TEXT, enr NUMBER); CREATE TABLE Tryout (cName TEXT);"
      },
      {
        "question": "Which of those have a student population greater than 15000?",
        "query": "SELECT * FROM college WHERE enr > 15000",
        "schema": "CREATE TABLE Tryout (cName TEXT); CREATE TABLE College (state TEXT, cName TEXT, enr NUMBER);"
      },
      {
        "question": "How many of them exist?",
        "query": "SELECT count(*) FROM college WHERE enr > 15000",
        "schema": "CREATE TABLE Tryout (cName TEXT); CREATE TABLE College (cName TEXT, enr NUMBER, state TEXT);"
      }
    ],
    [
      {
        "question": "How many hours does each player train for?",
        "query": "SELECT pname , hs FROM player",
        "schema": "CREATE TABLE Player (pID NUMBER, pName TEXT, HS NUMBER); CREATE TABLE Tryout (pPos TEXT, pID NUMBER);"
      },
      {
        "question": "What is the average?",
        "query": "SELECT avg(hs) FROM player",
        "schema": "CREATE TABLE Tryout (pID NUMBER, pPos TEXT); CREATE TABLE Player (HS NUMBER, pID NUMBER, pName TEXT);"
      }
    ],
    [
      {
        "question": "What are the names of the players?",
        "query": "SELECT pname FROM player",
        "schema": "CREATE TABLE Tryout (pID NUMBER); CREATE TABLE Player (pID NUMBER, pName TEXT);"
      },
      {
        "question": "Which of those practice for less than 1500 hours?",
        "query": "SELECT pname FROM player WHERE hs < 1500",
        "schema": "CREATE TABLE Tryout (pID NUMBER); CREATE TABLE Player (pID NUMBER, HS NUMBER, pName TEXT);"
      },
      {
        "question": "Also, list the hours worked for each of them.",
        "query": "SELECT pname , hs FROM player WHERE hs < 1500",
        "schema": "CREATE TABLE Player (HS NUMBER, pName TEXT, pID NUMBER); CREATE TABLE Tryout (pID NUMBER);"
      }
    ],
    [
      {
        "question": "What is the name of the college each student trying out from?",
        "query": "SELECT cname FROM tryout",
        "schema": "CREATE TABLE Player (pID NUMBER); CREATE TABLE College (cName TEXT); CREATE TABLE Tryout (pPos TEXT, decision TEXT, cName TEXT, pID NUMBER);"
      },
      {
        "question": "What are the different college names?",
        "query": "SELECT DISTINCT cname FROM tryout",
        "schema": "CREATE TABLE Tryout (decision TEXT, pPos TEXT, cName TEXT, pID NUMBER); CREATE TABLE College (cName TEXT); CREATE TABLE Player (pID NUMBER);"
      },
      {
        "question": "How many different ones exist?",
        "query": "SELECT count(DISTINCT cname) FROM tryout",
        "schema": "CREATE TABLE College (cName TEXT); CREATE TABLE Player (pID NUMBER); CREATE TABLE Tryout (pID NUMBER, decision TEXT, cName TEXT, pPos TEXT);"
      }
    ],
    [
      {
        "question": "What are the different player positions?",
        "query": "SELECT DISTINCT ppos FROM tryout",
        "schema": "CREATE TABLE Tryout (pID NUMBER, pPos TEXT, cName TEXT); CREATE TABLE Player (pID NUMBER);"
      },
      {
        "question": "How many of them exist?",
        "query": "SELECT count(DISTINCT ppos) FROM tryout",
        "schema": "CREATE TABLE Tryout (cName TEXT, pID NUMBER, pPos TEXT); CREATE TABLE Player (pID NUMBER);"
      }
    ],
    [
      {
        "question": "What were the decisions for each player?",
        "query": "SELECT t2.pname , decision FROM tryout AS t1 JOIN player AS t2 ON t2.pid = t1.pid",
        "schema": "CREATE TABLE Tryout (decision TEXT, pID NUMBER, pPos TEXT); CREATE TABLE Player (HS NUMBER, pName TEXT, pID NUMBER);"
      },
      {
        "question": "Which of the players received a yes?",
        "query": "SELECT t2.pname FROM tryout AS t1 JOIN player AS t2 ON t2.pid = t1.pid WHERE decision = 'yes'",
        "schema": "CREATE TABLE Tryout (pID NUMBER, pPos TEXT, decision TEXT); CREATE TABLE Player (pID NUMBER, HS NUMBER, pName TEXT);"
      },
      {
        "question": "How many of them exist?",
        "query": "SELECT count(*) FROM tryout WHERE decision = 'yes'",
        "schema": "CREATE TABLE Tryout (pPos TEXT, decision TEXT, pID NUMBER); CREATE TABLE Player (pID NUMBER, pName TEXT, HS NUMBER);"
      }
    ],
    [
      {
        "question": "What information exists for players tried for the position of goalie?",
        "query": "SELECT * FROM tryout WHERE ppos = 'goalie'",
        "schema": "CREATE TABLE Player (pID NUMBER); CREATE TABLE Tryout (pID NUMBER, decision TEXT, cName TEXT, pPos TEXT);"
      },
      {
        "question": "How many of them tried out?",
        "query": "SELECT count(*) FROM tryout WHERE ppos = 'goalie'",
        "schema": "CREATE TABLE Player (pID NUMBER); CREATE TABLE Tryout (decision TEXT, cName TEXT, pID NUMBER, pPos TEXT);"
      }
    ],
    [
      {
        "question": "How many hours does each player spend training?",
        "query": "SELECT pname , hs FROM player",
        "schema": "CREATE TABLE Tryout (pID NUMBER, pPos TEXT); CREATE TABLE Player (HS NUMBER, pName TEXT, pID NUMBER);"
      },
      {
        "question": "What is the average?",
        "query": "SELECT avg(hs) FROM player",
        "schema": "CREATE TABLE Tryout (pPos TEXT, pID NUMBER); CREATE TABLE Player (pID NUMBER, pName TEXT, HS NUMBER);"
      },
      {
        "question": "Also, what is the maximum and minimum?",
        "query": "SELECT avg(hs) , max(hs) , min(hs) FROM player",
        "schema": "CREATE TABLE Tryout (pID NUMBER, pPos TEXT); CREATE TABLE Player (pID NUMBER, HS NUMBER, pName TEXT);"
      }
    ],
    [
      {
        "question": "What is the number of students enrolled in each college?",
        "query": "SELECT cname , enr FROM college",
        "schema": "CREATE TABLE College (cName TEXT, enr NUMBER); CREATE TABLE Tryout (cName TEXT);"
      },
      {
        "question": "Of those, which refer to students enrolled in places in Florida?",
        "query": "SELECT cname , enr FROM college WHERE state = 'FL'",
        "schema": "CREATE TABLE College (cName TEXT, state TEXT, enr NUMBER); CREATE TABLE Tryout (cName TEXT);"
      },
      {
        "question": "What is the average number enrolled for them?",
        "query": "SELECT avg(enr) FROM college WHERE state = 'FL'",
        "schema": "CREATE TABLE College (cName TEXT, state TEXT, enr NUMBER); CREATE TABLE Tryout (cName TEXT);"
      }
    ],
    [
      {
        "question": "Give me all information about players who train between 500 and 1500 hours.",
        "query": "SELECT * FROM player WHERE hs BETWEEN 500 AND 1500",
        "schema": "CREATE TABLE Tryout (pID NUMBER); CREATE TABLE Player (pID NUMBER, pName TEXT, HS NUMBER);"
      },
      {
        "question": "What are their names?",
        "query": "SELECT pname FROM player WHERE hs BETWEEN 500 AND 1500",
        "schema": "CREATE TABLE Tryout (pID NUMBER); CREATE TABLE Player (pName TEXT, pID NUMBER, HS NUMBER);"
      }
    ],
    [
      {
        "question": "What information is there on players whose name contains the letter a?",
        "query": "SELECT * FROM player WHERE pname LIKE '%a%'",
        "schema": "CREATE TABLE Tryout (pID NUMBER); CREATE TABLE Player (HS NUMBER, pID NUMBER, pName TEXT);"
      },
      {
        "question": "What are their names?",
        "query": "SELECT pname FROM player WHERE pname LIKE '%a%'",
        "schema": "CREATE TABLE Tryout (pID NUMBER); CREATE TABLE Player (pName TEXT, HS NUMBER, pID NUMBER);"
      },
      {
        "question": "What is a list of the unique names?",
        "query": "SELECT DISTINCT pname FROM player WHERE pname LIKE '%a%'",
        "schema": "CREATE TABLE Tryout (pID NUMBER); CREATE TABLE Player (pID NUMBER, HS NUMBER, pName TEXT);"
      }
    ],
    [
      {
        "question": "What information you have on colleges that have more than 10000 students enrolled?",
        "query": "SELECT * FROM college WHERE enr > 10000",
        "schema": "CREATE TABLE College (cName TEXT, enr NUMBER); CREATE TABLE Tryout (cName TEXT);"
      },
      {
        "question": "Of those, which refer to colleges in the state of LA?",
        "query": "SELECT * FROM college WHERE enr > 10000 AND state = \"LA\"",
        "schema": "CREATE TABLE Tryout (cName TEXT); CREATE TABLE College (state TEXT, cName TEXT, enr NUMBER);"
      },
      {
        "question": "What are these colleges' names and enrollment numbers?",
        "query": "SELECT cname , enr FROM college WHERE enr > 10000 AND state = \"LA\"",
        "schema": "CREATE TABLE College (enr NUMBER, state TEXT, cName TEXT); CREATE TABLE Tryout (cName TEXT);"
      }
    ],
    [
      {
        "question": "What information do you have on the colleges?",
        "query": "SELECT * FROM college",
        "schema": "CREATE TABLE Tryout (cName TEXT); CREATE TABLE College (cName TEXT, enr NUMBER, state TEXT);"
      },
      {
        "question": "Sort the information by enrollment numbers.",
        "query": "SELECT * FROM college ORDER BY enr",
        "schema": "CREATE TABLE Tryout (cName TEXT); CREATE TABLE College (cName TEXT, enr NUMBER, state TEXT);"
      }
    ],
    [
      {
        "question": "What are the college names?",
        "query": "SELECT cname FROM college",
        "schema": "CREATE TABLE Player (pID NUMBER); CREATE TABLE Tryout (cName TEXT); CREATE TABLE College (cName TEXT);"
      },
      {
        "question": "Which of those have more than 18000 students enrolled?",
        "query": "SELECT cname FROM college WHERE enr > 18000",
        "schema": "CREATE TABLE Tryout (cName TEXT); CREATE TABLE College (enr NUMBER, cName TEXT); CREATE TABLE Player (pID NUMBER);"
      },
      {
        "question": "Order them alphabetically.",
        "query": "SELECT cname FROM college WHERE enr > 18000 ORDER BY cname",
        "schema": "CREATE TABLE College (enr NUMBER, cName TEXT); CREATE TABLE Player (pID NUMBER); CREATE TABLE Tryout (cName TEXT);"
      }
    ],
    [
      {
        "question": "What are the names of all the players?",
        "query": "SELECT pname FROM player",
        "schema": "CREATE TABLE Player (pName TEXT, pID NUMBER); CREATE TABLE Tryout (pID NUMBER);"
      },
      {
        "question": "Which of those received a card?",
        "query": "SELECT pname FROM player WHERE ycard = 'yes'",
        "schema": "CREATE TABLE Player (pID NUMBER, yCard TEXT, pName TEXT); CREATE TABLE Tryout (pID NUMBER);"
      },
      {
        "question": "Set them in descending order of hours spent training.",
        "query": "SELECT pname FROM player WHERE ycard = 'yes' ORDER BY hs DESC",
        "schema": "CREATE TABLE Player (yCard TEXT, pID NUMBER, HS NUMBER, pName TEXT); CREATE TABLE Tryout (pID NUMBER);"
      }
    ],
    [
      {
        "question": "Order the information on tryouts by college name",
        "query": "SELECT * FROM tryout ORDER BY cname",
        "schema": "CREATE TABLE College (cName TEXT); CREATE TABLE Tryout (cName TEXT, decision TEXT, pID NUMBER, pPos TEXT); CREATE TABLE Player (pID NUMBER);"
      },
      {
        "question": "What are the names of the colleges?",
        "query": "SELECT cname FROM tryout ORDER BY cname",
        "schema": "CREATE TABLE Tryout (pPos TEXT, decision TEXT, pID NUMBER, cName TEXT); CREATE TABLE Player (pID NUMBER); CREATE TABLE College (cName TEXT);"
      },
      {
        "question": "Make sure they are all unique.",
        "query": "SELECT DISTINCT cname FROM tryout ORDER BY cname",
        "schema": "CREATE TABLE Player (pID NUMBER); CREATE TABLE Tryout (pPos TEXT, pID NUMBER, decision TEXT, cName TEXT); CREATE TABLE College (cName TEXT);"
      }
    ],
    [
      {
        "question": "What information do you have for each position?",
        "query": "SELECT * FROM tryout GROUP BY ppos",
        "schema": "CREATE TABLE Player (pID NUMBER); CREATE TABLE Tryout (pID NUMBER, pPos TEXT, decision TEXT, cName TEXT);"
      },
      {
        "question": "How many players tried out for each position?",
        "query": "SELECT ppos , count(*) FROM tryout GROUP BY ppos",
        "schema": "CREATE TABLE Player (pID NUMBER); CREATE TABLE Tryout (pPos TEXT, pID NUMBER, cName TEXT, decision TEXT);"
      },
      {
        "question": "What was the most popular one?",
        "query": "SELECT ppos FROM tryout GROUP BY ppos ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Player (pID NUMBER); CREATE TABLE Tryout (decision TEXT, pPos TEXT, pID NUMBER, cName TEXT);"
      }
    ],
    [
      {
        "question": "How many students participated in tryouts for each college?",
        "query": "SELECT count(*) , cname FROM tryout GROUP BY cname",
        "schema": "CREATE TABLE Player (pID NUMBER); CREATE TABLE College (cName TEXT); CREATE TABLE Tryout (decision TEXT, cName TEXT, pID NUMBER, pPos TEXT);"
      },
      {
        "question": "Order them by number of participants.",
        "query": "SELECT count(*) , cname FROM tryout GROUP BY cname ORDER BY count(*)",
        "schema": "CREATE TABLE Player (pID NUMBER); CREATE TABLE Tryout (pPos TEXT, pID NUMBER, cName TEXT, decision TEXT); CREATE TABLE College (cName TEXT);"
      },
      {
        "question": "Make sure it is in descending order.",
        "query": "SELECT count(*) , cname FROM tryout GROUP BY cname ORDER BY count(*) DESC",
        "schema": "CREATE TABLE Player (pID NUMBER); CREATE TABLE College (cName TEXT); CREATE TABLE Tryout (decision TEXT, pID NUMBER, pPos TEXT, cName TEXT);"
      }
    ],
    [
      {
        "question": "For each position, how much did each player practice?",
        "query": "SELECT t2.hs , t1.ppos FROM tryout AS t1 JOIN player AS t2 ON t1.pid = t2.pid GROUP BY t1.ppos",
        "schema": "CREATE TABLE Player (HS NUMBER, pName TEXT, pID NUMBER); CREATE TABLE Tryout (pPos TEXT, decision TEXT, cName TEXT, pID NUMBER);"
      },
      {
        "question": "What is the minimum for each position?",
        "query": "SELECT min(t2.hs) , t1.ppos FROM tryout AS t1 JOIN player AS t2 ON t1.pid = t2.pid GROUP BY t1.ppos",
        "schema": "CREATE TABLE Tryout (decision TEXT, pID NUMBER, cName TEXT, pPos TEXT); CREATE TABLE Player (pID NUMBER, pName TEXT, HS NUMBER);"
      }
    ],
    [
      {
        "question": "What are the names of each college?",
        "query": "SELECT cname FROM college",
        "schema": "CREATE TABLE Tryout (cName TEXT); CREATE TABLE College (cName TEXT, enr NUMBER);"
      },
      {
        "question": "List them in order of descending class size.",
        "query": "SELECT cname FROM college ORDER BY enr DESC",
        "schema": "CREATE TABLE College (enr NUMBER, cName TEXT); CREATE TABLE Tryout (cName TEXT);"
      },
      {
        "question": "What are the top 3?",
        "query": "SELECT cname FROM college ORDER BY enr DESC LIMIT 3",
        "schema": "CREATE TABLE Tryout (cName TEXT); CREATE TABLE College (enr NUMBER, cName TEXT); CREATE TABLE Player (pID NUMBER);"
      }
    ],
    [
      {
        "question": "Which colleges have students trying out?",
        "query": "SELECT t1.cname FROM college AS t1 JOIN tryout AS t2 ON t1.cname = t2.cname",
        "schema": "CREATE TABLE Player (pID NUMBER); CREATE TABLE Tryout (pID NUMBER, pPos TEXT, decision TEXT, cName TEXT); CREATE TABLE College (cName TEXT);"
      },
      {
        "question": "What are the different state they are located in?",
        "query": "SELECT DISTINCT state FROM college AS t1 JOIN tryout AS t2 ON t1.cname = t2.cname",
        "schema": "CREATE TABLE College (state TEXT, cName TEXT); CREATE TABLE Tryout (cName TEXT, pPos TEXT, pID NUMBER, decision TEXT); CREATE TABLE Player (pID NUMBER);"
      }
    ],
    [
      {
        "question": "What are the name of the colleges that had students participate in tryouts?",
        "query": "SELECT t1.cname FROM college AS t1 JOIN tryout AS t2 ON t1.cname = t2.cname",
        "schema": "CREATE TABLE College (cName TEXT); CREATE TABLE Tryout (decision TEXT, pPos TEXT, pID NUMBER, cName TEXT);"
      },
      {
        "question": "Of those colleges, which had students that received a yes?",
        "query": "SELECT t1.cname FROM college AS t1 JOIN tryout AS t2 ON t1.cname = t2.cname WHERE t2.decision = 'yes'",
        "schema": "CREATE TABLE Tryout (pPos TEXT, cName TEXT, decision TEXT, pID NUMBER); CREATE TABLE College (cName TEXT, enr NUMBER);"
      },
      {
        "question": "What are the different states those colleges are located in?",
        "query": "SELECT DISTINCT t1.state FROM college AS t1 JOIN tryout AS t2 ON t1.cname = t2.cname WHERE t2.decision = 'yes'",
        "schema": "CREATE TABLE Tryout (pID NUMBER, cName TEXT, decision TEXT, pPos TEXT); CREATE TABLE College (enr NUMBER, state TEXT, cName TEXT);"
      }
    ],
    [
      {
        "question": "What are all the players names?",
        "query": "SELECT pname FROM player",
        "schema": "CREATE TABLE Tryout (pID NUMBER); CREATE TABLE Player (pID NUMBER, HS NUMBER, pName TEXT);"
      },
      {
        "question": "Which of those players tried out and received a yes?",
        "query": "SELECT t1.pname FROM player AS t1 JOIN tryout AS t2 ON t1.pid = t2.pid WHERE t2.decision = 'yes'",
        "schema": "CREATE TABLE Player (pID NUMBER, HS NUMBER, pName TEXT); CREATE TABLE Tryout (pPos TEXT, decision TEXT, pID NUMBER);"
      },
      {
        "question": "Also, what colleges are they from?",
        "query": "SELECT t1.pname , t2.cname FROM player AS t1 JOIN tryout AS t2 ON t1.pid = t2.pid WHERE t2.decision = 'yes'",
        "schema": "CREATE TABLE Player (pID NUMBER, pName TEXT, HS NUMBER); CREATE TABLE College (cName TEXT); CREATE TABLE Tryout (cName TEXT, pPos TEXT, decision TEXT, pID NUMBER);"
      }
    ],
    [
      {
        "question": "What are the players' names?",
        "query": "SELECT pname FROM player",
        "schema": "CREATE TABLE Player (pID NUMBER, pName TEXT);"
      },
      {
        "question": "Which of them tried out?",
        "query": "SELECT t1.pname FROM player AS t1 JOIN tryout AS t2 ON t1.pid = t2.pid",
        "schema": "CREATE TABLE Player (pID NUMBER, pName TEXT); CREATE TABLE Tryout (cName TEXT, pPos TEXT, pID NUMBER, decision TEXT);"
      },
      {
        "question": "Sort the list alphabetically.",
        "query": "SELECT t1.pname FROM player AS t1 JOIN tryout AS t2 ON t1.pid = t2.pid ORDER BY t1.pname",
        "schema": "CREATE TABLE Player (pID NUMBER, pName TEXT); CREATE TABLE Tryout (pID NUMBER, decision TEXT, pPos TEXT, cName TEXT);"
      }
    ],
    [
      {
        "question": "What are the names of all players who participated in tryouts?",
        "query": "SELECT t1.pname FROM player AS t1 JOIN tryout AS t2 ON t1.pid = t2.pid",
        "schema": "CREATE TABLE Tryout (pPos TEXT, pID NUMBER, decision TEXT); CREATE TABLE Player (pName TEXT, pID NUMBER);"
      },
      {
        "question": "Which of those received a yes?",
        "query": "SELECT t1.pname FROM player AS t1 JOIN tryout AS t2 ON t1.pid = t2.pid WHERE t2.decision = 'yes'",
        "schema": "CREATE TABLE Player (pID NUMBER, pName TEXT); CREATE TABLE Tryout (pID NUMBER, pPos TEXT, decision TEXT);"
      },
      {
        "question": "How many hours did each of them practice for?",
        "query": "SELECT t1.pname , t1.hs FROM player AS t1 JOIN tryout AS t2 ON t1.pid = t2.pid WHERE t2.decision = 'yes'",
        "schema": "CREATE TABLE Player (HS NUMBER, pName TEXT, pID NUMBER); CREATE TABLE Tryout (decision TEXT, pID NUMBER, pPos TEXT);"
      }
    ],
    [
      {
        "question": "Which colleges did the students who tried out for the position of striker attend?",
        "query": "SELECT t1.cname FROM college AS t1 JOIN tryout AS t2 ON t1.cname = t2.cname WHERE t2.ppos = 'striker'",
        "schema": "CREATE TABLE College (cName TEXT, enr NUMBER); CREATE TABLE Player (pID NUMBER); CREATE TABLE Tryout (cName TEXT, pPos TEXT, pID NUMBER, decision TEXT);"
      },
      {
        "question": "What states are those colleges located in?",
        "query": "SELECT t1.state FROM college AS t1 JOIN tryout AS t2 ON t1.cname = t2.cname WHERE t2.ppos = 'striker'",
        "schema": "CREATE TABLE Tryout (pPos TEXT, pID NUMBER, cName TEXT, decision TEXT); CREATE TABLE Player (pID NUMBER); CREATE TABLE College (cName TEXT, state TEXT, enr NUMBER);"
      }
    ],
    [
      {
        "question": "What is every player's name?",
        "query": "SELECT pname FROM player",
        "schema": "CREATE TABLE Player (HS NUMBER, pName TEXT, pID NUMBER);"
      },
      {
        "question": "Which of those tried out for the position of striker?",
        "query": "SELECT t1.pname FROM player AS t1 JOIN tryout AS t2 ON t1.pid = t2.pid WHERE t2.ppos = 'striker'",
        "schema": "CREATE TABLE Player (pName TEXT, pID NUMBER, HS NUMBER); CREATE TABLE Tryout (pID NUMBER, cName TEXT, pPos TEXT);"
      },
      {
        "question": "Of those, who made the team?",
        "query": "SELECT t1.pname FROM player AS t1 JOIN tryout AS t2 ON t1.pid = t2.pid WHERE t2.decision = 'yes' AND t2.ppos = 'striker'",
        "schema": "CREATE TABLE Tryout (pPos TEXT, decision TEXT, pID NUMBER, cName TEXT); CREATE TABLE Player (pName TEXT, HS NUMBER, pID NUMBER);"
      }
    ],
    [
      {
        "question": "What information is there on the player named Charles?",
        "query": "SELECT * FROM player WHERE pname = 'Charles'",
        "schema": "CREATE TABLE Player (pName TEXT, pID NUMBER); CREATE TABLE Tryout (pID NUMBER);"
      },
      {
        "question": "What college is he attending?",
        "query": "SELECT t1.cname FROM college AS t1 JOIN tryout AS t2 ON t1.cname = t2.cname JOIN player AS t3 ON t2.pid = t3.pid WHERE t3.pname = 'Charles'",
        "schema": "CREATE TABLE Player (pID NUMBER, pName TEXT); CREATE TABLE Tryout (cName TEXT, pPos TEXT, pID NUMBER); CREATE TABLE College (cName TEXT);"
      },
      {
        "question": "What state is that college located in?",
        "query": "SELECT t1.state FROM college AS t1 JOIN tryout AS t2 ON t1.cname = t2.cname JOIN player AS t3 ON t2.pid = t3.pid WHERE t3.pname = 'Charles'",
        "schema": "CREATE TABLE Player (pName TEXT, pID NUMBER); CREATE TABLE College (state TEXT, cName TEXT); CREATE TABLE Tryout (pID NUMBER, pPos TEXT, cName TEXT);"
      }
    ],
    [
      {
        "question": "What are the player ids of all students who made the team?",
        "query": "SELECT t1.pid FROM player AS t1 JOIN tryout AS t2 ON t1.pid = t2.pid WHERE t2.decision = 'yes'",
        "schema": "CREATE TABLE Tryout (decision TEXT, pID NUMBER, cName TEXT, pPos TEXT); CREATE TABLE Player (pName TEXT, HS NUMBER, pID NUMBER);"
      },
      {
        "question": "What is the maximum number of hours they spent practicing?",
        "query": "SELECT max(t1.hs) FROM player AS t1 JOIN tryout AS t2 ON t1.pid = t2.pid WHERE t2.decision = 'yes'",
        "schema": "CREATE TABLE Player (pName TEXT, HS NUMBER, pID NUMBER); CREATE TABLE Tryout (decision TEXT, pPos TEXT, pID NUMBER, cName TEXT);"
      },
      {
        "question": "What was the average?",
        "query": "SELECT avg(t1.hs) , max(t1.hs) FROM player AS t1 JOIN tryout AS t2 ON t1.pid = t2.pid WHERE t2.decision = 'yes'",
        "schema": "CREATE TABLE Tryout (pPos TEXT, cName TEXT, pID NUMBER, decision TEXT); CREATE TABLE Player (HS NUMBER, pName TEXT, pID NUMBER);"
      }
    ],
    [
      {
        "question": "Which players received a decision of no from tryouts?",
        "query": "SELECT t1.pname FROM player AS t1 JOIN tryout AS t2 ON t1.pid = t2.pid WHERE t2.decision = 'no'",
        "schema": "CREATE TABLE Player (pID NUMBER, HS NUMBER, pName TEXT); CREATE TABLE Tryout (decision TEXT, pID NUMBER, pPos TEXT);"
      },
      {
        "question": "How many hours did they practice?",
        "query": "SELECT t1.pname , t1.hs FROM player AS t1 JOIN tryout AS t2 ON t1.pid = t2.pid WHERE t2.decision = 'no'",
        "schema": "CREATE TABLE Player (pName TEXT, HS NUMBER, pID NUMBER); CREATE TABLE Tryout (decision TEXT, pPos TEXT, pID NUMBER);"
      },
      {
        "question": "What was the average?",
        "query": "SELECT avg(t1.hs) FROM player AS t1 JOIN tryout AS t2 ON t1.pid = t2.pid WHERE t2.decision = 'no'",
        "schema": "CREATE TABLE Player (HS NUMBER, pName TEXT, pID NUMBER); CREATE TABLE Tryout (pPos TEXT, pID NUMBER, decision TEXT);"
      }
    ],
    [
      {
        "question": "What information is there on students who spent more than 1000 hours training?",
        "query": "SELECT * FROM player WHERE hs > 1000",
        "schema": "CREATE TABLE College (enr NUMBER, cName TEXT); CREATE TABLE Player (pName TEXT, pID NUMBER, HS NUMBER); CREATE TABLE Tryout (cName TEXT, pID NUMBER);"
      },
      {
        "question": "For each position, how many hours did each student spent training?",
        "query": "SELECT t1.hs , ppos FROM player AS t1 JOIN tryout AS t2 ON t1.pid = t2.pid GROUP BY t2.ppos",
        "schema": "CREATE TABLE Tryout (pID NUMBER, cName TEXT, pPos TEXT); CREATE TABLE Player (pName TEXT, pID NUMBER, HS NUMBER); CREATE TABLE College (enr NUMBER, cName TEXT);"
      },
      {
        "question": "What was the maximum time spent for each position?",
        "query": "SELECT max(t1.hs) , ppos FROM player AS t1 JOIN tryout AS t2 ON t1.pid = t2.pid WHERE t1.hs > 1000 GROUP BY t2.ppos",
        "schema": "CREATE TABLE College (enr NUMBER, cName TEXT); CREATE TABLE Player (pName TEXT, HS NUMBER, pID NUMBER); CREATE TABLE Tryout (pPos TEXT, pID NUMBER, cName TEXT);"
      }
    ],
    [
      {
        "question": "What are the player ids of every player whose name starts with D?",
        "query": "SELECT pid FROM player WHERE pname LIKE 'D%'",
        "schema": "CREATE TABLE Player (pName TEXT, pID NUMBER, HS NUMBER); CREATE TABLE Tryout (pID NUMBER);"
      },
      {
        "question": "Of those, who tried out?",
        "query": "SELECT t1.pid FROM tryout AS t1 JOIN player AS t2 ON t1.pid = t2.pid WHERE t2.pname LIKE 'D%'",
        "schema": "CREATE TABLE Player (pID NUMBER, pName TEXT, HS NUMBER); CREATE TABLE Tryout (pID NUMBER, pPos TEXT, decision TEXT);"
      },
      {
        "question": "What college did they go to?",
        "query": "SELECT t1.cname FROM tryout AS t1 JOIN player AS t2 ON t1.pid = t2.pid WHERE t2.pname LIKE 'D%'",
        "schema": "CREATE TABLE Tryout (pID NUMBER, pPos TEXT, cName TEXT, decision TEXT); CREATE TABLE College (cName TEXT); CREATE TABLE Player (pName TEXT, pID NUMBER, HS NUMBER);"
      }
    ],
    [
      {
        "question": "What can you tell me about the students who made the team?",
        "query": "SELECT * FROM tryout WHERE decision = 'yes'",
        "schema": "CREATE TABLE Tryout (pID NUMBER, cName TEXT, decision TEXT, pPos TEXT); CREATE TABLE Player (pName TEXT, pID NUMBER);"
      },
      {
        "question": "of those, who tried out for the position of goalie?",
        "query": "SELECT * FROM tryout WHERE decision = 'yes' AND ppos = 'goalie'",
        "schema": "CREATE TABLE Player (pName TEXT, pID NUMBER); CREATE TABLE Tryout (pPos TEXT, pID NUMBER, decision TEXT, cName TEXT);"
      },
      {
        "question": "What college do they attend?",
        "query": "SELECT cname FROM tryout WHERE decision = 'yes' AND ppos = 'goalie'",
        "schema": "CREATE TABLE Tryout (decision TEXT, cName TEXT, pPos TEXT, pID NUMBER); CREATE TABLE College (cName TEXT); CREATE TABLE Player (pName TEXT, pID NUMBER);"
      }
    ],
    [
      {
        "question": "What are the names of players are from that college?",
        "query": "SELECT t2.pname FROM tryout AS t1 JOIN player AS t2 ON t1.pid = t2.pid WHERE t1.cname = (SELECT cname FROM college ORDER BY enr DESC LIMIT 1)",
        "schema": "CREATE TABLE College (cName TEXT); CREATE TABLE Player (pName TEXT, pID NUMBER); CREATE TABLE Tryout (cName TEXT, pID NUMBER, pPos TEXT);"
      },
      {
        "question": "Of those, who tried out for the team?",
        "query": "SELECT t2.pname FROM tryout AS t1 JOIN player AS t2 ON t1.pid = t2.pid WHERE t1.cname = (SELECT cname FROM college ORDER BY enr DESC LIMIT 1)",
        "schema": "CREATE TABLE Player (pID NUMBER, pName TEXT); CREATE TABLE College (enr NUMBER, cName TEXT); CREATE TABLE Tryout (pPos TEXT, cName TEXT, decision TEXT, pID NUMBER);"
      }
    ],
    [
      {
        "question": "What are the names of colleges that have students who made the team?",
        "query": "SELECT t1.cname FROM college AS t1 JOIN tryout AS t2 ON t1.cname = t2.cname WHERE t2.decision = 'yes'",
        "schema": "CREATE TABLE Tryout (pPos TEXT, pID NUMBER, cName TEXT, decision TEXT); CREATE TABLE College (cName TEXT); CREATE TABLE Player (pID NUMBER);"
      },
      {
        "question": "How many students are enrolled in each of them?",
        "query": "SELECT t1.enr FROM college AS t1 JOIN tryout AS t2 ON t1.cname = t2.cname WHERE t2.decision = 'yes'",
        "schema": "CREATE TABLE Player (pID NUMBER); CREATE TABLE College (cName TEXT, enr NUMBER); CREATE TABLE Tryout (pID NUMBER, cName TEXT, decision TEXT, pPos TEXT);"
      },
      {
        "question": "Also, what are the different states in which those colleges reside?",
        "query": "SELECT DISTINCT t1.state , t1.enr FROM college AS t1 JOIN tryout AS t2 ON t1.cname = t2.cname WHERE t2.decision = 'yes'",
        "schema": "CREATE TABLE Tryout (decision TEXT, cName TEXT, pID NUMBER, pPos TEXT); CREATE TABLE College (cName TEXT, state TEXT, enr NUMBER); CREATE TABLE Player (pID NUMBER);"
      }
    ],
    [
      {
        "question": "What are the names of colleges with less than 13,000 students?",
        "query": "SELECT cname FROM college WHERE enr < 13000",
        "schema": "CREATE TABLE College (enr NUMBER, cName TEXT); CREATE TABLE Tryout (cName TEXT);"
      },
      {
        "question": "Which of those are in AZ?",
        "query": "SELECT cname FROM college WHERE enr < 13000 AND state = \"AZ\"",
        "schema": "CREATE TABLE Tryout (cName TEXT); CREATE TABLE College (state TEXT, cName TEXT, enr NUMBER);"
      },
      {
        "question": "Combine that with colleges in LA that have more than 15,000 students?",
        "query": "SELECT cname FROM college WHERE enr < 13000 AND state = \"AZ\" UNION SELECT cname FROM college WHERE enr > 15000 AND state = \"LA\"",
        "schema": "CREATE TABLE Tryout (cName TEXT); CREATE TABLE College (state TEXT, enr NUMBER, cName TEXT);"
      }
    ],
    [
      {
        "question": "What are the names of colleges that have students who tried out for the goalie?",
        "query": "SELECT cname FROM tryout WHERE ppos = 'goalie'",
        "schema": "CREATE TABLE College (cName TEXT); CREATE TABLE Tryout (pID NUMBER, pPos TEXT, cName TEXT, decision TEXT);"
      },
      {
        "question": "Of those, which also have students who tried out for the position of mid-field?",
        "query": "SELECT cname FROM tryout WHERE ppos = 'goalie' INTERSECT SELECT cname FROM tryout WHERE ppos = 'mid'",
        "schema": "CREATE TABLE Tryout (pPos TEXT, decision TEXT, cName TEXT, pID NUMBER); CREATE TABLE College (cName TEXT);"
      }
    ],
    [
      {
        "question": "What are the names of colleges that have students who tried out for the goalie?",
        "query": "SELECT t1.cname FROM college AS t1 JOIN tryout AS t2 ON t1.cname = t2.cname WHERE t2.ppos = 'goalie'",
        "schema": "CREATE TABLE Tryout (pID NUMBER, pPos TEXT, decision TEXT, cName TEXT); CREATE TABLE Player (pID NUMBER); CREATE TABLE College (cName TEXT);"
      },
      {
        "question": "What states are they located in?",
        "query": "SELECT t1.state FROM college AS t1 JOIN tryout AS t2 ON t1.cname = t2.cname WHERE t2.ppos = 'goalie'",
        "schema": "CREATE TABLE College (cName TEXT, state TEXT); CREATE TABLE Player (pID NUMBER); CREATE TABLE Tryout (decision TEXT, pID NUMBER, pPos TEXT, cName TEXT);"
      },
      {
        "question": "Of those states, which also have colleges where students tried out for mid-field?",
        "query": "SELECT t1.state FROM college AS t1 JOIN tryout AS t2 ON t1.cname = t2.cname WHERE t2.ppos = 'goalie' INTERSECT SELECT t1.state FROM college AS t1 JOIN tryout AS t2 ON t1.cname = t2.cname WHERE t2.ppos = 'mid'",
        "schema": "CREATE TABLE Player (pID NUMBER); CREATE TABLE College (state TEXT, cName TEXT); CREATE TABLE Tryout (pID NUMBER, decision TEXT, pPos TEXT, cName TEXT);"
      }
    ],
    [
      {
        "question": "What are the names of colleges where students tried for the goalie position?",
        "query": "SELECT cname FROM tryout WHERE ppos = 'goalie'",
        "schema": "CREATE TABLE College (cName TEXT); CREATE TABLE Tryout (pID NUMBER, decision TEXT, cName TEXT, pPos TEXT);"
      },
      {
        "question": "Of those, which also had students that tried out for the mid position?",
        "query": "SELECT cname FROM tryout WHERE ppos = 'goalie' INTERSECT SELECT cname FROM tryout WHERE ppos = 'mid'",
        "schema": "CREATE TABLE Tryout (pID NUMBER, pPos TEXT, decision TEXT, cName TEXT); CREATE TABLE College (cName TEXT);"
      },
      {
        "question": "How many of them are there?",
        "query": "SELECT count(*) FROM (SELECT cname FROM tryout WHERE ppos = 'goalie' INTERSECT SELECT cname FROM tryout WHERE ppos = 'mid')",
        "schema": "CREATE TABLE College (cName TEXT); CREATE TABLE Tryout (cName TEXT, decision TEXT, pPos TEXT, pID NUMBER);"
      }
    ],
    [
      {
        "question": "What schools have players that tried out for goalies?",
        "query": "SELECT cname FROM tryout WHERE ppos = 'goalie'",
        "schema": "CREATE TABLE College (cName TEXT); CREATE TABLE Player (pID NUMBER); CREATE TABLE Tryout (pPos TEXT, pID NUMBER, cName TEXT);"
      },
      {
        "question": "What schools have players that tried out for the mid position?",
        "query": "SELECT cname FROM tryout WHERE ppos = 'mid'",
        "schema": "CREATE TABLE Player (pID NUMBER); CREATE TABLE Tryout (pPos TEXT, pID NUMBER, cName TEXT); CREATE TABLE College (cName TEXT);"
      },
      {
        "question": "What are the names of schools that fit into the latter category but not the former?",
        "query": "SELECT cname FROM tryout WHERE ppos = 'mid' EXCEPT SELECT cname FROM tryout WHERE ppos = 'goalie'",
        "schema": "CREATE TABLE College (cName TEXT); CREATE TABLE Player (pID NUMBER); CREATE TABLE Tryout (pPos TEXT, cName TEXT, pID NUMBER);"
      }
    ],
    [
      {
        "question": "What schools have players that tried out for goalies?",
        "query": "SELECT cname FROM tryout WHERE ppos = 'goalie'",
        "schema": "CREATE TABLE College (cName TEXT); CREATE TABLE Player (pID NUMBER); CREATE TABLE Tryout (pPos TEXT, cName TEXT, pID NUMBER);"
      },
      {
        "question": "What schools have players that tried out for the mid position?",
        "query": "SELECT cname FROM tryout WHERE ppos = 'mid'",
        "schema": "CREATE TABLE Player (pID NUMBER); CREATE TABLE College (cName TEXT); CREATE TABLE Tryout (pPos TEXT, cName TEXT, pID NUMBER);"
      },
      {
        "question": "In which states are the schools that fit into the latter category but not the former?",
        "query": "SELECT t1.state FROM college AS t1 JOIN tryout AS t2 ON t1.cname = t2.cname WHERE t2.ppos = 'mid' EXCEPT SELECT t1.state FROM college AS t1 JOIN tryout AS t2 ON t1.cname = t2.cname WHERE t2.ppos = 'goalie'",
        "schema": "CREATE TABLE College (cName TEXT, state TEXT); CREATE TABLE Player (pID NUMBER); CREATE TABLE Tryout (pID NUMBER, pPos TEXT, cName TEXT);"
      }
    ],
    [
      {
        "question": "What schools have players that tried out for the mid position but not as goalies?",
        "query": "SELECT cname FROM tryout WHERE ppos = 'mid' EXCEPT SELECT cname FROM tryout WHERE ppos = 'goalie'",
        "schema": "CREATE TABLE College (cName TEXT); CREATE TABLE Tryout (pID NUMBER, cName TEXT, pPos TEXT); CREATE TABLE Player (pID NUMBER);"
      },
      {
        "question": "In which states do those schools reside?",
        "query": "SELECT t1.state FROM college AS t1 JOIN tryout AS t2 ON t1.cname = t2.cname WHERE t2.ppos = 'mid' EXCEPT SELECT t1.state FROM college AS t1 JOIN tryout AS t2 ON t1.cname = t2.cname WHERE t2.ppos = 'goalie'",
        "schema": "CREATE TABLE Tryout (pPos TEXT, cName TEXT, pID NUMBER); CREATE TABLE College (cName TEXT, state TEXT); CREATE TABLE Player (pID NUMBER);"
      },
      {
        "question": "How many of them exist?",
        "query": "SELECT count(*) FROM (SELECT t1.state FROM college AS t1 JOIN tryout AS t2 ON t1.cname = t2.cname WHERE t2.ppos = 'mid' EXCEPT SELECT t1.state FROM college AS t1 JOIN tryout AS t2 ON t1.cname = t2.cname WHERE t2.ppos = 'goalie')",
        "schema": "CREATE TABLE College (cName TEXT, state TEXT); CREATE TABLE Player (pID NUMBER); CREATE TABLE Tryout (cName TEXT, pPos TEXT, pID NUMBER);"
      }
    ],
    [
      {
        "question": "What information is there on colleges in Florida?",
        "query": "SELECT * FROM college WHERE state = 'FL'",
        "schema": "CREATE TABLE College (cName TEXT, enr NUMBER, state TEXT); CREATE TABLE Tryout (cName TEXT);"
      },
      {
        "question": "What is their maximum enrollment size?",
        "query": "SELECT max(enr) FROM college WHERE state = 'FL'",
        "schema": "CREATE TABLE College (enr NUMBER, state TEXT, cName TEXT); CREATE TABLE Player (HS NUMBER); CREATE TABLE Tryout (cName TEXT);"
      },
      {
        "question": "What is the name of every college that is larger than that?",
        "query": "SELECT cname FROM college WHERE enr > (SELECT max(enr) FROM college WHERE state = 'FL')",
        "schema": "CREATE TABLE College (cName TEXT, state TEXT, enr NUMBER); CREATE TABLE Player (HS NUMBER); CREATE TABLE Tryout (cName TEXT);"
      }
    ],
    [
      {
        "question": "What are the names of all colleges with students who tried out for the position of goalie?",
        "query": "SELECT cname FROM tryout WHERE ppos = \"goalie\"",
        "schema": "CREATE TABLE Player (pID NUMBER); CREATE TABLE College (cName TEXT); CREATE TABLE Tryout (decision TEXT, pPos TEXT, cName TEXT, pID NUMBER);"
      },
      {
        "question": "What is the number of people enrolled in all the other colleges?",
        "query": "SELECT cname , enr FROM college WHERE cname NOT IN (SELECT cname FROM tryout WHERE ppos = \"goalie\")",
        "schema": "CREATE TABLE Player (pID NUMBER); CREATE TABLE College (enr NUMBER, cName TEXT); CREATE TABLE Tryout (pID NUMBER, decision TEXT, cName TEXT, pPos TEXT);"
      },
      {
        "question": "How many is that in total?",
        "query": "SELECT sum(enr) FROM college WHERE cname NOT IN (SELECT cname FROM tryout WHERE ppos = \"goalie\")",
        "schema": "CREATE TABLE Tryout (pPos TEXT, pID NUMBER, cName TEXT, decision TEXT); CREATE TABLE Player (pID NUMBER); CREATE TABLE College (cName TEXT, enr NUMBER);"
      }
    ],
    [
      {
        "question": "What is the average number of students enrolled per college?",
        "query": "SELECT avg(enr) FROM college",
        "schema": "CREATE TABLE College (enr NUMBER, state TEXT, cName TEXT); CREATE TABLE Player (HS NUMBER);"
      },
      {
        "question": "What are the states that have larger colleges than that?",
        "query": "SELECT DISTINCT state FROM college WHERE enr > (SELECT avg(enr) FROM college)",
        "schema": "CREATE TABLE Player (HS NUMBER); CREATE TABLE College (enr NUMBER, cName TEXT, state TEXT);"
      },
      {
        "question": "How many of them are there?",
        "query": "SELECT count(DISTINCT state) FROM college WHERE enr > (SELECT avg(enr) FROM college)",
        "schema": "CREATE TABLE Player (HS NUMBER); CREATE TABLE College (state TEXT, cName TEXT, enr NUMBER);"
      }
    ],
    [
      {
        "question": "What is the average number of students per college?",
        "query": "SELECT avg(enr) FROM college",
        "schema": "CREATE TABLE College (cName TEXT, enr NUMBER); CREATE TABLE Player (HS NUMBER); CREATE TABLE Tryout (cName TEXT);"
      },
      {
        "question": "What states have colleges that are smaller than that?",
        "query": "SELECT DISTINCT state FROM college WHERE enr < (SELECT avg(enr) FROM college)",
        "schema": "CREATE TABLE College (enr NUMBER, cName TEXT, state TEXT); CREATE TABLE Player (HS NUMBER); CREATE TABLE Tryout (cName TEXT);"
      },
      {
        "question": "How many of them are there?",
        "query": "SELECT count(DISTINCT state) FROM college WHERE enr < (SELECT avg(enr) FROM college)",
        "schema": "CREATE TABLE Player (HS NUMBER); CREATE TABLE Tryout (cName TEXT); CREATE TABLE College (state TEXT, cName TEXT, enr NUMBER);"
      }
    ]
  ],
  "scientist_1": [
    [
      {
        "question": "show the name and hours for each project.",
        "query": "SELECT name, hours FROM projects",
        "schema": "CREATE TABLE Projects (Name TEXT, Hours NUMBER, Code TEXT); CREATE TABLE AssignedTo (Project TEXT);"
      },
      {
        "question": "how many projects are there?",
        "query": "SELECT count(*) FROM projects",
        "schema": "CREATE TABLE AssignedTo (Project TEXT); CREATE TABLE Projects (Name TEXT, Hours NUMBER, Code TEXT);"
      },
      {
        "question": "what is the average number of hours spent on each project?",
        "query": "SELECT avg(hours) FROM projects",
        "schema": "CREATE TABLE Projects (Code TEXT, Hours NUMBER, Name TEXT); CREATE TABLE AssignedTo (Project TEXT);"
      },
      {
        "question": "Find the name of project with the longest duration.",
        "query": "SELECT name FROM projects ORDER BY hours DESC LIMIT 1",
        "schema": "CREATE TABLE Projects (Code TEXT, Hours NUMBER, Name TEXT); CREATE TABLE AssignedTo (Project TEXT);"
      }
    ],
    [
      {
        "question": "what is average duration of all projects?",
        "query": "SELECT avg(hours) FROM projects",
        "schema": "CREATE TABLE Projects (Hours NUMBER, Code TEXT, Name TEXT);"
      },
      {
        "question": "what about the maximum and minimum duration?",
        "query": "SELECT max(hours), min(hours) FROM projects",
        "schema": "CREATE TABLE Projects (Hours NUMBER, Name TEXT, Code TEXT);"
      },
      {
        "question": "how many projects have operated longer than the average duration?",
        "query": "SELECT count(*) FROM projects WHERE hours > (SELECT avg(hours) FROM projects)",
        "schema": "CREATE TABLE Projects (Code TEXT, Hours NUMBER, Name TEXT);"
      },
      {
        "question": "what are their names?",
        "query": "SELECT name FROM projects WHERE hours > (SELECT avg(hours) FROM projects)",
        "schema": "CREATE TABLE Projects (Hours NUMBER, Name TEXT, Code TEXT);"
      }
    ],
    [
      {
        "question": "find the names of all projects.",
        "query": "SELECT name FROM projects",
        "schema": "CREATE TABLE Projects (Code TEXT, Name TEXT); CREATE TABLE AssignedTo (Project TEXT);"
      },
      {
        "question": "how many scientists were assigned to each of them?",
        "query": "SELECT t1.name , count(*) FROM projects AS t1 JOIN assignedto AS t2 ON t1.code = t2.project GROUP BY t2.project",
        "schema": "CREATE TABLE Scientists (SSN NUMBER, Name TEXT); CREATE TABLE Projects (Name TEXT, Code TEXT); CREATE TABLE AssignedTo (Scientist NUMBER, Project TEXT);"
      },
      {
        "question": "which one has the most scientists?",
        "query": "SELECT t1.name FROM projects AS t1 JOIN assignedto AS t2 ON t1.code = t2.project GROUP BY t2.project ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Projects (Name TEXT, Code TEXT); CREATE TABLE Scientists (Name TEXT, SSN NUMBER); CREATE TABLE AssignedTo (Scientist NUMBER, Project TEXT);"
      },
      {
        "question": "show how much time has already been spent on it as well.",
        "query": "SELECT t1.name , t1.hours FROM projects AS t1 JOIN assignedto AS t2 ON t1.code = t2.project GROUP BY t2.project ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Scientists (SSN NUMBER, Name TEXT); CREATE TABLE Projects (Code TEXT, Name TEXT, Hours NUMBER); CREATE TABLE AssignedTo (Scientist NUMBER, Project TEXT);"
      }
    ],
    [
      {
        "question": "show info of all scientists.",
        "query": "SELECT * FROM scientists",
        "schema": "CREATE TABLE Scientists (Name TEXT, SSN NUMBER); CREATE TABLE AssignedTo (Scientist NUMBER);"
      },
      {
        "question": "find those scientists whose name contains \u2018Smith\u2019.",
        "query": "SELECT * FROM scientists WHERE name LIKE '%Smith%'",
        "schema": "CREATE TABLE AssignedTo (Scientist NUMBER); CREATE TABLE Scientists (Name TEXT, SSN NUMBER);"
      },
      {
        "question": "Find the names of the projects that they are assigned to.",
        "query": "SELECT t2.name FROM assignedto AS t1 JOIN projects AS t2 ON t1.project = t2.code JOIN scientists AS t3 ON t1.scientist = t3.ssn WHERE t3.name LIKE '%Smith%'",
        "schema": "CREATE TABLE Projects (Name TEXT, Code TEXT); CREATE TABLE Scientists (SSN NUMBER, Name TEXT); CREATE TABLE AssignedTo (Project TEXT, Scientist NUMBER);"
      }
    ],
    [
      {
        "question": "show the names of all scientists.",
        "query": "SELECT name FROM scientists",
        "schema": "CREATE TABLE Scientists (SSN NUMBER, Name TEXT); CREATE TABLE AssignedTo (Scientist NUMBER);"
      },
      {
        "question": "find the ssn of scientists named Michael Rogers and Carol Smith.",
        "query": "SELECT ssn FROM scientists WHERE name = 'Michael Rogers' OR name = 'Carol Smith'",
        "schema": "CREATE TABLE AssignedTo (Scientist NUMBER); CREATE TABLE Scientists (SSN NUMBER, Name TEXT);"
      },
      {
        "question": "what are the names of projects that they are assigned to?",
        "query": "SELECT t2.name FROM assignedto AS t1 JOIN projects AS t2 ON t1.project = t2.code JOIN scientists AS t3 ON t1.scientist = t3.ssn WHERE t3.name = 'Michael Rogers' OR t3.name = 'Carol Smith'",
        "schema": "CREATE TABLE Projects (Name TEXT, Code TEXT); CREATE TABLE AssignedTo (Scientist NUMBER, Project TEXT); CREATE TABLE Scientists (SSN NUMBER, Name TEXT);"
      },
      {
        "question": "how many hours in total have been spent on these projects?",
        "query": "SELECT sum(t2.hours) FROM assignedto AS t1 JOIN projects AS t2 ON t1.project = t2.code JOIN scientists AS t3 ON t1.scientist = t3.ssn WHERE t3.name = 'Michael Rogers' OR t3.name = 'Carol Smith'",
        "schema": "CREATE TABLE AssignedTo (Scientist NUMBER, Project TEXT); CREATE TABLE Projects (Hours NUMBER, Code TEXT, Name TEXT); CREATE TABLE Scientists (SSN NUMBER, Name TEXT);"
      }
    ],
    [
      {
        "question": "what is the number of hours spent on the project named 'Matter of Time\u2019?",
        "query": "SELECT hours FROM projects WHERE name = 'A Matter of Time'",
        "schema": "CREATE TABLE Projects (Code TEXT, Name TEXT, Hours NUMBER); CREATE TABLE AssignedTo (Project TEXT);"
      },
      {
        "question": "Find the names of the scientists who worked on this project.",
        "query": "SELECT t3.name FROM assignedto AS t1 JOIN projects AS t2 ON t1.project = t2.code JOIN scientists AS t3 ON t1.scientist = t3.ssn WHERE t2.name = 'A Matter of Time'",
        "schema": "CREATE TABLE Projects (Name TEXT, Hours NUMBER, Code TEXT); CREATE TABLE AssignedTo (Project TEXT, Scientist NUMBER); CREATE TABLE Scientists (Name TEXT, SSN NUMBER);"
      },
      {
        "question": "which of those scientists were also involved in the project named 'A Puzzling Parallax'?",
        "query": "SELECT t3.name FROM assignedto AS t1 JOIN projects AS t2 ON t1.project = t2.code JOIN scientists AS t3 ON t1.scientist = t3.ssn WHERE t2.name = 'A Matter of Time' INTERSECT SELECT t3.name FROM assignedto AS t1 JOIN projects AS t2 ON t1.project = t2.code JOIN scientists AS t3 ON t1.scientist = t3.ssn WHERE t2.name = 'A Puzzling Parallax'",
        "schema": "CREATE TABLE Scientists (Name TEXT, SSN NUMBER); CREATE TABLE AssignedTo (Project TEXT, Scientist NUMBER); CREATE TABLE Projects (Name TEXT, Hours NUMBER, Code TEXT);"
      }
    ],
    [
      {
        "question": "how many scientists are in the table?",
        "query": "SELECT count(*) FROM scientists",
        "schema": "CREATE TABLE AssignedTo (Scientist NUMBER); CREATE TABLE Scientists (SSN NUMBER, Name TEXT);"
      },
      {
        "question": "how many projects are there\uff1f",
        "query": "SELECT count(*) FROM projects",
        "schema": "CREATE TABLE Projects (Code TEXT, Hours NUMBER, Name TEXT); CREATE TABLE AssignedTo (Project TEXT, Scientist NUMBER); CREATE TABLE Scientists (SSN NUMBER, Name TEXT);"
      },
      {
        "question": "list all of the project names.",
        "query": "SELECT name FROM projects",
        "schema": "CREATE TABLE Scientists (Name TEXT, SSN NUMBER); CREATE TABLE AssignedTo (Scientist NUMBER, Project TEXT); CREATE TABLE Projects (Code TEXT, Name TEXT, Hours NUMBER);"
      },
      {
        "question": "Find the number of scientists involved in each of them.",
        "query": "SELECT count(*) , t1.name FROM projects AS t1 JOIN assignedto AS t2 ON t1.code = t2.project GROUP BY t1.name",
        "schema": "CREATE TABLE Scientists (Name TEXT, SSN NUMBER); CREATE TABLE AssignedTo (Project TEXT, Scientist NUMBER); CREATE TABLE Projects (Name TEXT, Hours NUMBER, Code TEXT);"
      }
    ],
    [
      {
        "question": "how many scientists are in the table?",
        "query": "SELECT count(*) FROM scientists",
        "schema": "CREATE TABLE AssignedTo (Scientist NUMBER); CREATE TABLE Scientists (SSN NUMBER, Name TEXT);"
      },
      {
        "question": "how many of them are assigned to a project?",
        "query": "SELECT count(DISTINCT scientist) FROM assignedto",
        "schema": "CREATE TABLE AssignedTo (Project TEXT, Scientist NUMBER); CREATE TABLE Scientists (SSN NUMBER, Name TEXT);"
      },
      {
        "question": "among them, how many are involved for the projects that require less than 1000 hours. List project names.",
        "query": "SELECT count(*) , t1.name FROM projects AS t1 JOIN assignedto AS t2 ON t1.code = t2.project WHERE t1.hours < 1000 GROUP BY t1.name",
        "schema": "CREATE TABLE AssignedTo (Project TEXT, Scientist NUMBER); CREATE TABLE Scientists (SSN NUMBER, Name TEXT); CREATE TABLE Projects (Code TEXT, Name TEXT, Hours NUMBER);"
      },
      {
        "question": "how about for the projects that require more than 300 hours?",
        "query": "SELECT count(*) , t1.name FROM projects AS t1 JOIN assignedto AS t2 ON t1.code = t2.project WHERE t1.hours > 300 GROUP BY t1.name",
        "schema": "CREATE TABLE Scientists (SSN NUMBER, Name TEXT); CREATE TABLE AssignedTo (Scientist NUMBER, Project TEXT); CREATE TABLE Projects (Code TEXT, Hours NUMBER, Name TEXT);"
      }
    ],
    [
      {
        "question": "find the names of scientists who are assigned to any projects.",
        "query": "SELECT t1.name FROM scientists AS t1 JOIN assignedto AS t2 ON t1.ssn = t2.scientist",
        "schema": "CREATE TABLE Scientists (Name TEXT, SSN NUMBER); CREATE TABLE AssignedTo (Project TEXT, Scientist NUMBER); CREATE TABLE Projects (Code TEXT, Name TEXT);"
      },
      {
        "question": "Find the number of projects each of those scientists is working on.",
        "query": "SELECT count(*), t1.name FROM scientists AS t1 JOIN assignedto AS t2 ON t1.ssn = t2.scientist GROUP BY t1.name",
        "schema": "CREATE TABLE Projects (Code TEXT, Name TEXT); CREATE TABLE AssignedTo (Scientist NUMBER, Project TEXT); CREATE TABLE Scientists (SSN NUMBER, Name TEXT);"
      }
    ],
    [
      {
        "question": "find the hours spent on the project that has continued for the longest time.",
        "query": "SELECT max(hours) FROM projects",
        "schema": "CREATE TABLE Projects (Name TEXT, Code TEXT, Hours NUMBER); CREATE TABLE AssignedTo (Project TEXT);"
      },
      {
        "question": "what is the name of this project?",
        "query": "SELECT name FROM projects ORDER BY hours DESC LIMIT 1",
        "schema": "CREATE TABLE Projects (Hours NUMBER, Code TEXT, Name TEXT); CREATE TABLE AssignedTo (Project TEXT);"
      },
      {
        "question": "Find the SSN and name of scientists who are assigned to it.",
        "query": "SELECT t3.ssn , t3.name FROM assignedto AS t1 JOIN projects AS t2 ON t1.project = t2.code JOIN scientists AS t3 ON t1.scientist = t3.ssn WHERE t2.hours = (SELECT max(hours) FROM projects)",
        "schema": "CREATE TABLE AssignedTo (Project TEXT, Scientist NUMBER); CREATE TABLE Scientists (SSN NUMBER, Name TEXT); CREATE TABLE Projects (Name TEXT, Hours NUMBER, Code TEXT);"
      }
    ],
    [
      {
        "question": "how many projects are there?",
        "query": "SELECT count(*) FROM projects",
        "schema": "CREATE TABLE AssignedTo (Project TEXT, Scientist NUMBER); CREATE TABLE Projects (Code TEXT, Name TEXT, Hours NUMBER); CREATE TABLE Scientists (SSN NUMBER);"
      },
      {
        "question": "among them, how many are not assigned yet?",
        "query": "SELECT count(*) FROM projects WHERE code NOT IN (SELECT project FROM assignedto)",
        "schema": "CREATE TABLE Projects (Name TEXT, Code TEXT, Hours NUMBER); CREATE TABLE AssignedTo (Scientist NUMBER, Project TEXT); CREATE TABLE Scientists (SSN NUMBER);"
      },
      {
        "question": "what are the names of these projects?",
        "query": "SELECT name FROM projects WHERE code NOT IN (SELECT project FROM assignedto)",
        "schema": "CREATE TABLE AssignedTo (Scientist NUMBER, Project TEXT); CREATE TABLE Scientists (SSN NUMBER); CREATE TABLE Projects (Name TEXT, Code TEXT, Hours NUMBER);"
      }
    ],
    [
      {
        "question": "list the name of all scientists.",
        "query": "SELECT name FROM scientists",
        "schema": "CREATE TABLE AssignedTo (Scientist NUMBER); CREATE TABLE Scientists (Name TEXT, SSN NUMBER);"
      },
      {
        "question": "which of them are assigned to any project? List their names",
        "query": "SELECT name FROM scientists WHERE ssn IN (SELECT scientist FROM assignedto)",
        "schema": "CREATE TABLE Projects (Name TEXT, Code TEXT); CREATE TABLE Scientists (Name TEXT, SSN NUMBER); CREATE TABLE AssignedTo (Scientist NUMBER, Project TEXT);"
      },
      {
        "question": "how many of those scientists are there?",
        "query": "SELECT count(*) FROM scientists WHERE ssn IN (SELECT scientist FROM assignedto)",
        "schema": "CREATE TABLE Projects (Code TEXT, Name TEXT); CREATE TABLE AssignedTo (Scientist NUMBER, Project TEXT); CREATE TABLE Scientists (SSN NUMBER, Name TEXT);"
      },
      {
        "question": "Find the names of those who are not assigned to a project yet.",
        "query": "SELECT name FROM scientists WHERE ssn NOT IN (SELECT scientist FROM assignedto)",
        "schema": "CREATE TABLE Projects (Name TEXT, Code TEXT); CREATE TABLE Scientists (SSN NUMBER, Name TEXT); CREATE TABLE AssignedTo (Project TEXT, Scientist NUMBER);"
      }
    ],
    [
      {
        "question": "find the names of scientists who are assigned to any project.",
        "query": "SELECT name FROM scientists WHERE ssn IN (SELECT scientist FROM assignedto)",
        "schema": "CREATE TABLE AssignedTo (Scientist NUMBER, Project TEXT); CREATE TABLE Scientists (Name TEXT, SSN NUMBER);"
      },
      {
        "question": "how about those who are not involved in any project?",
        "query": "SELECT name FROM scientists WHERE ssn NOT IN (SELECT scientist FROM assignedto)",
        "schema": "CREATE TABLE Scientists (SSN NUMBER, Name TEXT); CREATE TABLE AssignedTo (Scientist NUMBER, Project TEXT);"
      },
      {
        "question": "count the number of those scientists.",
        "query": "SELECT count(*) FROM scientists WHERE ssn NOT IN (SELECT scientist FROM assignedto)",
        "schema": "CREATE TABLE Scientists (SSN NUMBER, Name TEXT); CREATE TABLE AssignedTo (Scientist NUMBER, Project TEXT);"
      }
    ],
    [
      {
        "question": "find the name of the project that has taken the most time.",
        "query": "SELECT name FROM projects ORDER BY hours DESC LIMIT 1",
        "schema": "CREATE TABLE Projects (Hours NUMBER, Name TEXT, Code TEXT);"
      },
      {
        "question": "how may hours have been spent on it?",
        "query": "SELECT hours FROM projects ORDER BY hours DESC LIMIT 1",
        "schema": "CREATE TABLE Projects (Code TEXT, Name TEXT, Hours NUMBER);"
      },
      {
        "question": "how many scientists are working on the project?",
        "query": "SELECT count(*) FROM assignedto AS t1 JOIN projects AS t2 ON t1.project = t2.code JOIN scientists AS t3 ON t1.scientist = t3.ssn WHERE t2.hours = (SELECT max(hours) FROM projects)",
        "schema": "CREATE TABLE Projects (Hours NUMBER, Name TEXT, Code TEXT); CREATE TABLE Scientists (Name TEXT, SSN NUMBER); CREATE TABLE AssignedTo (Project TEXT, Scientist NUMBER);"
      },
      {
        "question": "what are their names?",
        "query": "SELECT t3.name FROM assignedto AS t1 JOIN projects AS t2 ON t1.project = t2.code JOIN scientists AS t3 ON t1.scientist = t3.ssn WHERE t2.hours = (SELECT max(hours) FROM projects)",
        "schema": "CREATE TABLE AssignedTo (Project TEXT, Scientist NUMBER); CREATE TABLE Scientists (SSN NUMBER, Name TEXT); CREATE TABLE Projects (Hours NUMBER, Name TEXT, Code TEXT);"
      },
      {
        "question": "how about those who are not involved in it? List their names.",
        "query": "SELECT name FROM scientists EXCEPT SELECT t3.name FROM assignedto AS t1 JOIN projects AS t2 ON t1.project = t2.code JOIN scientists AS t3 ON t1.scientist = t3.ssn WHERE t2.hours = (SELECT max(hours) FROM projects)",
        "schema": "CREATE TABLE Projects (Name TEXT, Code TEXT, Hours NUMBER); CREATE TABLE AssignedTo (Scientist NUMBER, Project TEXT); CREATE TABLE Scientists (Name TEXT, SSN NUMBER);"
      }
    ],
    [
      {
        "question": "List all the scientists' names and their projects' names",
        "query": "SELECT t1.name , t3.name FROM scientists AS t1 JOIN assignedto AS t2 ON t1.ssn = t2.scientist JOIN projects AS t3 ON t2.project = t3.code",
        "schema": "CREATE TABLE Scientists (Name TEXT, SSN NUMBER); CREATE TABLE Projects (Code TEXT, Name TEXT); CREATE TABLE AssignedTo (Scientist NUMBER, Project TEXT);"
      },
      {
        "question": "show the hours worked by them on each project.",
        "query": "SELECT t1.name , t3.name , t3.hours FROM scientists AS t1 JOIN assignedto AS t2 ON t1.ssn = t2.scientist JOIN projects AS t3 ON t2.project = t3.code",
        "schema": "CREATE TABLE Projects (Hours NUMBER, Name TEXT, Code TEXT); CREATE TABLE Scientists (SSN NUMBER, Name TEXT); CREATE TABLE AssignedTo (Project TEXT, Scientist NUMBER);"
      },
      {
        "question": "list the results in alphabetical order of project name, and then scientist name.",
        "query": "SELECT t1.name , t3.name , t3.hours FROM scientists AS t1 JOIN assignedto AS t2 ON t1.ssn = t2.scientist JOIN projects AS t3 ON t2.project = t3.code ORDER BY t3.name, t1.name",
        "schema": "CREATE TABLE Projects (Code TEXT, Hours NUMBER, Name TEXT); CREATE TABLE AssignedTo (Scientist NUMBER, Project TEXT); CREATE TABLE Scientists (SSN NUMBER, Name TEXT);"
      }
    ]
  ],
  "products_gen_characteristics": [
    [
      {
        "question": "What categories of products are there?",
        "query": "SELECT product_category_code FROM products",
        "schema": "CREATE TABLE Products (product_category_code TEXT, product_name TEXT, product_id NUMBER); CREATE TABLE Ref_Product_Categories (unit_of_measure TEXT, product_category_description TEXT, product_category_code TEXT);"
      },
      {
        "question": "Show their typical buying and selling price as well.",
        "query": "SELECT product_category_code, typical_buying_price, typical_selling_price FROM products",
        "schema": "CREATE TABLE Products (product_category_code TEXT, product_id NUMBER, product_name TEXT, typical_buying_price TEXT, typical_selling_price TEXT); CREATE TABLE Ref_Product_Categories (product_category_code TEXT, product_category_description TEXT, unit_of_measure TEXT); CREATE TABLE Product_Characteristics (product_id NUMBER);"
      },
      {
        "question": "Show only for products with category \"Herbs\".",
        "query": "SELECT product_category_code, typical_buying_price, typical_selling_price FROM products WHERE product_category_code = \"Herbs\"",
        "schema": "CREATE TABLE Product_Characteristics (product_id NUMBER); CREATE TABLE Ref_Product_Categories (product_category_description TEXT, product_category_code TEXT, unit_of_measure TEXT); CREATE TABLE Products (product_name TEXT, product_category_code TEXT, typical_selling_price TEXT, product_id NUMBER, typical_buying_price TEXT);"
      },
      {
        "question": "Of these, just give the name and product description.",
        "query": "SELECT product_name, product_description FROM products WHERE product_category_code = \"Herbs\"",
        "schema": "CREATE TABLE Product_Characteristics (product_id NUMBER); CREATE TABLE Products (product_name TEXT, typical_buying_price TEXT, product_id NUMBER, product_description TEXT, product_category_code TEXT, typical_selling_price TEXT); CREATE TABLE Ref_Product_Categories (unit_of_measure TEXT, product_category_description TEXT, product_category_code TEXT);"
      },
      {
        "question": "Give the color descriptions as well.",
        "query": "SELECT t1.product_name , t2.color_description , t1.product_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code WHERE product_category_code = \"Herbs\"",
        "schema": "CREATE TABLE Ref_Product_Categories (product_category_description TEXT, unit_of_measure TEXT, product_category_code TEXT); CREATE TABLE Products (typical_selling_price TEXT, product_description TEXT, product_id NUMBER, color_code TEXT, product_category_code TEXT, product_name TEXT, typical_buying_price TEXT); CREATE TABLE Product_Characteristics (product_id NUMBER); CREATE TABLE Ref_Colors (color_code TEXT, color_description TEXT);"
      }
    ],
    [
      {
        "question": "Which products have category \"Herbs\"",
        "query": "SELECT * FROM products WHERE product_category_code = \"Herbs\"",
        "schema": "CREATE TABLE Products (product_id NUMBER, product_name TEXT, product_category_code TEXT, color_code TEXT); CREATE TABLE Ref_Product_Categories (product_category_code TEXT, product_category_description TEXT);"
      },
      {
        "question": "How about category \"Spices\" instead",
        "query": "SELECT * FROM products WHERE product_category_code = \"Spices\"",
        "schema": "CREATE TABLE Ref_Product_Categories (product_category_code TEXT, product_category_description TEXT); CREATE TABLE Products (color_code TEXT, product_category_code TEXT, product_id NUMBER, product_name TEXT);"
      },
      {
        "question": "How many are these?",
        "query": "SELECT count(*) FROM products WHERE product_category_code = \"Spices\"",
        "schema": "CREATE TABLE Ref_Product_Categories (product_category_description TEXT, product_category_code TEXT); CREATE TABLE Products (product_category_code TEXT, product_name TEXT, product_id NUMBER, color_code TEXT);"
      },
      {
        "question": "Restrict the count of those to the ones typically bought below 100.",
        "query": "SELECT count(*) FROM products WHERE product_category_code = \"Spices\" AND typical_buying_price < 100",
        "schema": "CREATE TABLE Ref_Product_Categories (product_category_description TEXT, product_category_code TEXT); CREATE TABLE Products (product_category_code TEXT, typical_buying_price TEXT, product_id NUMBER, product_name TEXT, typical_selling_price TEXT, color_code TEXT);"
      },
      {
        "question": "Restrict to the ones typically sold above 1000 instead.",
        "query": "SELECT count(*) FROM products WHERE product_category_code = \"Spices\" AND typical_selling_price > 1000",
        "schema": "CREATE TABLE Products (typical_selling_price TEXT, typical_buying_price TEXT, product_category_code TEXT, product_name TEXT, product_id NUMBER, color_code TEXT); CREATE TABLE Ref_Product_Categories (product_category_code TEXT, product_category_description TEXT);"
      }
    ],
    [
      {
        "question": "What are the product descriptions?",
        "query": "SELECT product_description FROM products",
        "schema": "CREATE TABLE Ref_Product_Categories (product_category_code TEXT, product_category_description TEXT); CREATE TABLE Products (product_category_code TEXT, product_id NUMBER, product_description TEXT, product_name TEXT);"
      },
      {
        "question": "What are the names of products with product description \"eius\"",
        "query": "SELECT product_name FROM products WHERE product_description = \"eius\"",
        "schema": "CREATE TABLE Products (product_category_code TEXT, product_description TEXT, product_name TEXT, product_id NUMBER); CREATE TABLE Ref_Product_Categories (product_category_code TEXT, product_category_description TEXT);"
      },
      {
        "question": "How about those with color description \"yellow\"",
        "query": "SELECT t1.product_name FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code WHERE t2.color_description = 'yellow'",
        "schema": "CREATE TABLE Ref_Colors (color_description TEXT, color_code TEXT); CREATE TABLE Products (product_id NUMBER, product_category_code TEXT, product_description TEXT, color_code TEXT, product_name TEXT); CREATE TABLE Ref_Product_Categories (product_category_description TEXT, product_category_code TEXT);"
      }
    ],
    [
      {
        "question": "Which color descriptions contain the letter 't'?",
        "query": "SELECT color_description FROM ref_colors WHERE color_description LIKE '%t%'",
        "schema": "CREATE TABLE Products (color_code TEXT, product_description TEXT); CREATE TABLE Ref_Colors (color_code TEXT, color_description TEXT);"
      },
      {
        "question": "Give for product descriptions instead?",
        "query": "SELECT product_description FROM products WHERE product_description LIKE '%t%'",
        "schema": "CREATE TABLE Ref_Colors (color_code TEXT, color_description TEXT); CREATE TABLE Products (product_id NUMBER, product_name TEXT, color_code TEXT, product_description TEXT);"
      },
      {
        "question": "What are the units of measure for these products?",
        "query": "SELECT t1.unit_of_measure FROM ref_product_categories AS t1 JOIN products AS t2 ON t1.product_category_code = t2.product_category_code WHERE t2.product_description LIKE '%t%'",
        "schema": "CREATE TABLE Ref_Colors (color_code TEXT, color_description TEXT); CREATE TABLE Ref_Product_Categories (unit_of_measure TEXT, product_category_code TEXT, product_category_description TEXT); CREATE TABLE Products (product_id NUMBER, product_description TEXT, product_name TEXT, product_category_code TEXT, color_code TEXT);"
      },
      {
        "question": "Give their category descriptions instead.",
        "query": "SELECT t1.product_category_description FROM ref_product_categories AS t1 JOIN products AS t2 ON t1.product_category_code = t2.product_category_code WHERE t2.product_description LIKE '%t%'",
        "schema": "CREATE TABLE Ref_Product_Categories (product_category_code TEXT, product_category_description TEXT, unit_of_measure TEXT); CREATE TABLE Ref_Colors (color_code TEXT, color_description TEXT); CREATE TABLE Products (product_category_code TEXT, product_name TEXT, product_id NUMBER, product_description TEXT, color_code TEXT);"
      }
    ],
    [
      {
        "question": "What are the typical buying prices of the products?",
        "query": "SELECT typical_buying_price FROM products",
        "schema": "CREATE TABLE Products (product_name TEXT, typical_selling_price TEXT, product_id NUMBER, typical_buying_price TEXT); CREATE TABLE Product_Characteristics (product_characteristic_value TEXT, product_id NUMBER);"
      },
      {
        "question": "Give this for the product with name \"cumin\"",
        "query": "SELECT typical_buying_price FROM products WHERE product_name = \"basil\"",
        "schema": "CREATE TABLE Products (product_name TEXT, typical_buying_price TEXT, typical_selling_price TEXT, product_id NUMBER); CREATE TABLE Product_Characteristics (product_characteristic_value TEXT, product_id NUMBER);"
      },
      {
        "question": "How about for the name \"catnip\" instead?",
        "query": "SELECT typical_buying_price FROM products WHERE product_name = \"catnip\"",
        "schema": "CREATE TABLE Product_Characteristics (product_id NUMBER, product_characteristic_value TEXT); CREATE TABLE Products (product_id NUMBER, typical_buying_price TEXT, typical_selling_price TEXT, product_name TEXT);"
      },
      {
        "question": "Give the color description instead.",
        "query": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code WHERE t1.product_name = \"catnip\"",
        "schema": "CREATE TABLE Product_Characteristics (product_characteristic_value TEXT, product_id NUMBER); CREATE TABLE Products (product_id NUMBER, product_description TEXT, product_name TEXT, color_code TEXT, typical_selling_price TEXT, typical_buying_price TEXT); CREATE TABLE Ref_Colors (color_code TEXT, color_description TEXT);"
      }
    ],
    [
      {
        "question": "What are the product descriptions?",
        "query": "SELECT product_description FROM products",
        "schema": "CREATE TABLE Products (product_description TEXT, product_name TEXT, product_category_code TEXT, product_id NUMBER); CREATE TABLE Ref_Product_Categories (product_category_code TEXT, product_category_description TEXT);"
      },
      {
        "question": "For the one with the name \"chervil\"?",
        "query": "SELECT product_description FROM products WHERE product_name = \"chervil\"",
        "schema": "CREATE TABLE Products (product_description TEXT, product_category_code TEXT, product_id NUMBER, product_name TEXT); CREATE TABLE Ref_Product_Categories (product_category_description TEXT, product_category_code TEXT);"
      },
      {
        "question": "Give the color description instead.",
        "query": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code WHERE t1.product_name = \"chervil\"",
        "schema": "CREATE TABLE Ref_Product_Categories (product_category_code TEXT, product_category_description TEXT); CREATE TABLE Products (product_id NUMBER, product_description TEXT, product_name TEXT, color_code TEXT, product_category_code TEXT); CREATE TABLE Ref_Colors (color_code TEXT, color_description TEXT);"
      },
      {
        "question": "Show the color code as well.",
        "query": "SELECT t1.color_code , t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code WHERE t1.product_name = \"chervil\"",
        "schema": "CREATE TABLE Products (product_description TEXT, product_name TEXT, product_id NUMBER, color_code TEXT, product_category_code TEXT); CREATE TABLE Ref_Colors (color_code TEXT, color_description TEXT); CREATE TABLE Ref_Product_Categories (product_category_description TEXT, product_category_code TEXT);"
      }
    ],
    [
      {
        "question": "What are the product characteristic?",
        "query": "SELECT * FROM product_characteristics",
        "schema": "CREATE TABLE Product_Characteristics (product_characteristic_value TEXT, characteristic_id NUMBER, product_id NUMBER); CREATE TABLE Products (product_name TEXT, product_id NUMBER); CREATE TABLE Characteristics (characteristic_name TEXT, characteristic_type_code TEXT, characteristic_id NUMBER); CREATE TABLE Ref_Characteristic_Types (characteristic_type_description TEXT, characteristic_type_code TEXT);"
      },
      {
        "question": "What are the names of the products that have only one product characteristic?",
        "query": "SELECT t1.product_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id GROUP BY t1.product_id HAVING count(*) = 1",
        "schema": "CREATE TABLE Characteristics (characteristic_name TEXT, characteristic_id NUMBER, characteristic_type_code TEXT); CREATE TABLE Ref_Characteristic_Types (characteristic_type_description TEXT, characteristic_type_code TEXT); CREATE TABLE Products (product_id NUMBER, product_name TEXT); CREATE TABLE Product_Characteristics (characteristic_id NUMBER, product_characteristic_value TEXT, product_id NUMBER);"
      },
      {
        "question": "Give their color descriptions and their product id instead.",
        "query": "SELECT t1.product_id , t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code JOIN product_characteristics AS t3 ON t1.product_id = t3.product_id GROUP BY t1.product_id HAVING count(*) = 1",
        "schema": "CREATE TABLE Ref_Characteristic_Types (characteristic_type_code TEXT, characteristic_type_description TEXT); CREATE TABLE Characteristics (characteristic_name TEXT, characteristic_id NUMBER, characteristic_type_code TEXT); CREATE TABLE Products (color_code TEXT, product_id NUMBER, product_name TEXT, product_description TEXT); CREATE TABLE Product_Characteristics (characteristic_id NUMBER, product_id NUMBER, product_characteristic_value TEXT); CREATE TABLE Ref_Colors (color_description TEXT, color_code TEXT);"
      },
      {
        "question": "How about for those that have least 2 product characteristics.",
        "query": "SELECT t1.product_id , t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code JOIN product_characteristics AS t3 ON t1.product_id = t3.product_id GROUP BY t1.product_id HAVING count(*) >= 2",
        "schema": "CREATE TABLE Ref_Characteristic_Types (characteristic_type_code TEXT, characteristic_type_description TEXT); CREATE TABLE Ref_Colors (color_description TEXT, color_code TEXT); CREATE TABLE Product_Characteristics (product_characteristic_value TEXT, product_id NUMBER, characteristic_id NUMBER); CREATE TABLE Products (color_code TEXT, product_description TEXT, product_id NUMBER, product_name TEXT); CREATE TABLE Characteristics (characteristic_type_code TEXT, characteristic_name TEXT, characteristic_id NUMBER);"
      }
    ],
    [
      {
        "question": "What are the color descriptions?",
        "query": "SELECT color_description FROM ref_colors",
        "schema": "CREATE TABLE Products (color_code TEXT, product_description TEXT); CREATE TABLE Ref_Colors (color_code TEXT, color_description TEXT);"
      },
      {
        "question": "Show the corresponding product names.",
        "query": "SELECT t1.product_name, t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code",
        "schema": "CREATE TABLE Products (product_name TEXT, product_description TEXT, product_id NUMBER, color_code TEXT); CREATE TABLE Ref_Colors (color_code TEXT, color_description TEXT);"
      },
      {
        "question": "Filter for only the ones with color \"black\"",
        "query": "SELECT t1.product_name, t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code WHERE t2.color_description = \"black\"",
        "schema": "CREATE TABLE Products (product_id NUMBER, product_name TEXT, color_code TEXT, product_description TEXT); CREATE TABLE Ref_Colors (color_description TEXT, color_code TEXT);"
      },
      {
        "question": "Now for color \"white\" instead.",
        "query": "SELECT t1.product_name, t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code WHERE t2.color_description = \"white\"",
        "schema": "CREATE TABLE Products (product_name TEXT, product_id NUMBER, color_code TEXT, product_description TEXT); CREATE TABLE Ref_Colors (color_code TEXT, color_description TEXT);"
      },
      {
        "question": "Show only the product names instead.",
        "query": "SELECT t1.product_name FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code WHERE t2.color_description = \"white\"",
        "schema": "CREATE TABLE Products (color_code TEXT, product_description TEXT, product_name TEXT, product_id NUMBER); CREATE TABLE Ref_Colors (color_description TEXT, color_code TEXT);"
      }
    ],
    [
      {
        "question": "What are the names of products and their corresponding colors?",
        "query": "SELECT t1.product_name, t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code",
        "schema": "CREATE TABLE Ref_Colors (color_description TEXT, color_code TEXT); CREATE TABLE Products (color_code TEXT, product_id NUMBER, product_name TEXT);"
      },
      {
        "question": "Filter to show only the ones with \"green\" color.",
        "query": "SELECT t1.product_name, t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code WHERE t2.color_description = \"green\"",
        "schema": "CREATE TABLE Ref_Colors (color_code TEXT, color_description TEXT); CREATE TABLE Products (product_id NUMBER, color_code TEXT, product_name TEXT, product_description TEXT);"
      },
      {
        "question": "Show the ones that have \"yellow\" color instead.",
        "query": "SELECT t1.product_name, t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code WHERE t2.color_description = \"yellow\"",
        "schema": "CREATE TABLE Ref_Colors (color_code TEXT, color_description TEXT); CREATE TABLE Products (product_name TEXT, color_code TEXT, product_id NUMBER, product_description TEXT);"
      },
      {
        "question": "Instead of showing the color description, show their typical buying and selling prices.",
        "query": "SELECT t1.product_name , t1.typical_buying_price , t1.typical_selling_price FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code WHERE t2.color_description = \"yellow\"",
        "schema": "CREATE TABLE Products (product_description TEXT, typical_buying_price TEXT, typical_selling_price TEXT, product_name TEXT, color_code TEXT, product_id NUMBER); CREATE TABLE Ref_Colors (color_code TEXT, color_description TEXT);"
      }
    ],
    [
      {
        "question": "What is the selling price of the product named \"sesame\"?",
        "query": "SELECT typical_selling_price FROM products WHERE product_name = \"sesame\"",
        "schema": "CREATE TABLE Products (typical_buying_price TEXT, product_name TEXT, product_id NUMBER, typical_selling_price TEXT);"
      },
      {
        "question": "What is its color?",
        "query": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code WHERE t1.product_name = \"sesame\"",
        "schema": "CREATE TABLE Ref_Colors (color_code TEXT, color_description TEXT); CREATE TABLE Products (product_id NUMBER, typical_buying_price TEXT, product_name TEXT, typical_selling_price TEXT, color_code TEXT);"
      },
      {
        "question": "What are its product characteristic values?",
        "query": "SELECT t2.product_characteristic_value FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id WHERE t1.product_name = \"sesame\"",
        "schema": "CREATE TABLE Product_Characteristics (product_id NUMBER, characteristic_id NUMBER, product_characteristic_value TEXT); CREATE TABLE Ref_Colors (color_description TEXT, color_code TEXT); CREATE TABLE Ref_Characteristic_Types (characteristic_type_description TEXT, characteristic_type_code TEXT); CREATE TABLE Characteristics (characteristic_type_code TEXT, characteristic_id NUMBER, characteristic_name TEXT); CREATE TABLE Products (typical_selling_price TEXT, color_code TEXT, product_name TEXT, product_description TEXT, product_id NUMBER, typical_buying_price TEXT);"
      },
      {
        "question": "Count how many there are.",
        "query": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id WHERE t1.product_name = \"sesame\"",
        "schema": "CREATE TABLE Product_Characteristics (product_characteristic_value TEXT, characteristic_id NUMBER, product_id NUMBER); CREATE TABLE Ref_Characteristic_Types (characteristic_type_code TEXT, characteristic_type_description TEXT); CREATE TABLE Characteristics (characteristic_type_code TEXT, characteristic_name TEXT, characteristic_id NUMBER); CREATE TABLE Ref_Colors (color_code TEXT, color_description TEXT); CREATE TABLE Products (typical_buying_price TEXT, typical_selling_price TEXT, product_name TEXT, product_id NUMBER, product_description TEXT, color_code TEXT);"
      }
    ],
    [
      {
        "question": "What is the buying price of the product named \"cumin\"?",
        "query": "SELECT typical_buying_price FROM products WHERE product_name = \"cumin\"",
        "schema": "CREATE TABLE Products (product_name TEXT, typical_buying_price TEXT, typical_selling_price TEXT, product_id NUMBER);"
      },
      {
        "question": "What are its product characteristic values?",
        "query": "SELECT t2.product_characteristic_value FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id WHERE t1.product_name = \"cumin\"",
        "schema": "CREATE TABLE Characteristics (characteristic_type_code TEXT, characteristic_name TEXT, characteristic_id NUMBER); CREATE TABLE Product_Characteristics (characteristic_id NUMBER, product_characteristic_value TEXT, product_id NUMBER); CREATE TABLE Products (product_name TEXT, typical_buying_price TEXT, typical_selling_price TEXT, product_id NUMBER);"
      },
      {
        "question": "Show its characteristic names.",
        "query": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE t1.product_name = \"cumin\"",
        "schema": "CREATE TABLE Characteristics (characteristic_name TEXT, characteristic_type_code TEXT, characteristic_id NUMBER); CREATE TABLE Product_Characteristics (product_id NUMBER, characteristic_id NUMBER, product_characteristic_value TEXT); CREATE TABLE Products (product_name TEXT, product_id NUMBER, typical_selling_price TEXT, typical_buying_price TEXT);"
      },
      {
        "question": "Count how many distinct ones there are.",
        "query": "SELECT count(DISTINCT t3.characteristic_name) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE t1.product_name = \"cumin\"",
        "schema": "CREATE TABLE Product_Characteristics (product_id NUMBER, characteristic_id NUMBER, product_characteristic_value TEXT); CREATE TABLE Characteristics (characteristic_name TEXT, characteristic_type_code TEXT, characteristic_id NUMBER); CREATE TABLE Products (product_id NUMBER, product_name TEXT, typical_selling_price TEXT, typical_buying_price TEXT);"
      }
    ],
    [
      {
        "question": "What is the product category code for the product named \"ginger\"?",
        "query": "SELECT product_category_code FROM products WHERE product_name = \"ginger\"",
        "schema": "CREATE TABLE Products (product_category_code TEXT, product_name TEXT, product_id NUMBER); CREATE TABLE Ref_Product_Categories (product_category_code TEXT);"
      },
      {
        "question": "Show the product characteristic value instead.",
        "query": "SELECT t2.product_characteristic_value FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id WHERE t1.product_name = \"ginger\"",
        "schema": "CREATE TABLE Product_Characteristics (characteristic_id NUMBER, product_characteristic_value TEXT, product_id NUMBER); CREATE TABLE Products (product_category_code TEXT, product_id NUMBER, product_name TEXT); CREATE TABLE Ref_Product_Categories (product_category_code TEXT); CREATE TABLE Characteristics (characteristic_id NUMBER, characteristic_name TEXT);"
      },
      {
        "question": "How about the one with product named \"sesame\"",
        "query": "SELECT t2.product_characteristic_value FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id WHERE t1.product_name = \"sesame\"",
        "schema": "CREATE TABLE Ref_Product_Categories (product_category_code TEXT); CREATE TABLE Characteristics (characteristic_id NUMBER, characteristic_name TEXT); CREATE TABLE Product_Characteristics (characteristic_id NUMBER, product_id NUMBER, product_characteristic_value TEXT); CREATE TABLE Products (product_category_code TEXT, product_name TEXT, product_id NUMBER);"
      },
      {
        "question": "Give its characteristic names.",
        "query": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE t1.product_name = \"sesame\"",
        "schema": "CREATE TABLE Product_Characteristics (characteristic_id NUMBER, product_id NUMBER, product_characteristic_value TEXT); CREATE TABLE Ref_Product_Categories (product_category_code TEXT); CREATE TABLE Products (product_id NUMBER, product_category_code TEXT, product_name TEXT); CREATE TABLE Characteristics (characteristic_name TEXT, characteristic_id NUMBER);"
      }
    ],
    [
      {
        "question": "What is the product description of the product named \"catnip\"?",
        "query": "SELECT product_description FROM products WHERE product_name = \"catnip\"",
        "schema": "CREATE TABLE Products (product_name TEXT, product_description TEXT, product_id NUMBER); CREATE TABLE Ref_Product_Categories (product_category_code TEXT, product_category_description TEXT);"
      },
      {
        "question": "Show the product characteristic value instead.",
        "query": "SELECT t2.product_characteristic_value FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id WHERE t1.product_name = \"catnip\"",
        "schema": "CREATE TABLE Product_Characteristics (characteristic_id NUMBER, product_id NUMBER, product_characteristic_value TEXT); CREATE TABLE Products (product_name TEXT, product_id NUMBER, product_description TEXT); CREATE TABLE Ref_Product_Categories (product_category_description TEXT, product_category_code TEXT); CREATE TABLE Characteristics (characteristic_id NUMBER, characteristic_name TEXT);"
      },
      {
        "question": "Now show its characteristic data type.",
        "query": "SELECT t3.characteristic_data_type FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE t1.product_name = \"catnip\"",
        "schema": "CREATE TABLE Ref_Product_Categories (product_category_code TEXT, product_category_description TEXT); CREATE TABLE Products (product_name TEXT, product_description TEXT, product_id NUMBER); CREATE TABLE Characteristics (characteristic_name TEXT, characteristic_id NUMBER, characteristic_data_type TEXT, characteristic_type_code TEXT); CREATE TABLE Product_Characteristics (product_characteristic_value TEXT, product_id NUMBER, characteristic_id NUMBER);"
      },
      {
        "question": "Show this for the product name \"cumin\" instead.",
        "query": "SELECT t3.characteristic_data_type FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE t1.product_name = \"cumin\"",
        "schema": "CREATE TABLE Product_Characteristics (characteristic_id NUMBER, product_id NUMBER, product_characteristic_value TEXT); CREATE TABLE Characteristics (characteristic_data_type TEXT, characteristic_id NUMBER, characteristic_name TEXT, characteristic_type_code TEXT); CREATE TABLE Products (product_name TEXT, product_description TEXT, product_id NUMBER); CREATE TABLE Ref_Product_Categories (product_category_description TEXT, product_category_code TEXT);"
      },
      {
        "question": "Give the characteristic name as well.",
        "query": "SELECT t3.characteristic_name , t3.characteristic_data_type FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE t1.product_name = \"cumin\"",
        "schema": "CREATE TABLE Products (product_description TEXT, product_name TEXT, product_id NUMBER); CREATE TABLE Ref_Product_Categories (product_category_description TEXT, product_category_code TEXT); CREATE TABLE Characteristics (characteristic_data_type TEXT, characteristic_type_code TEXT, characteristic_name TEXT, characteristic_id NUMBER); CREATE TABLE Product_Characteristics (product_id NUMBER, characteristic_id NUMBER, product_characteristic_value TEXT);"
      }
    ],
    [
      {
        "question": "What are the selling prices of the products?",
        "query": "SELECT typical_selling_price FROM products",
        "schema": "CREATE TABLE Products (product_id NUMBER, typical_buying_price TEXT, product_name TEXT, typical_selling_price TEXT); CREATE TABLE Product_Characteristics (product_id NUMBER);"
      },
      {
        "question": "What about for those that have product characteristic value \"high\"?",
        "query": "SELECT t1.typical_selling_price FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id WHERE t2.product_characteristic_value = \"high\"",
        "schema": "CREATE TABLE Product_Characteristics (product_id NUMBER, product_characteristic_value TEXT, characteristic_id NUMBER); CREATE TABLE Characteristics (characteristic_name TEXT, characteristic_id NUMBER, characteristic_type_code TEXT); CREATE TABLE Products (product_id NUMBER, typical_buying_price TEXT, typical_selling_price TEXT, product_name TEXT);"
      },
      {
        "question": "What about for those that have characteristic type code \"Grade\"?",
        "query": "SELECT t1.typical_selling_price FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE t3.characteristic_type_code = \"Grade\"",
        "schema": "CREATE TABLE Ref_Characteristic_Types (characteristic_type_code TEXT); CREATE TABLE Product_Characteristics (characteristic_id NUMBER, product_characteristic_value TEXT, product_id NUMBER); CREATE TABLE Products (typical_buying_price TEXT, product_name TEXT, typical_selling_price TEXT, product_id NUMBER); CREATE TABLE Characteristics (characteristic_name TEXT, characteristic_type_code TEXT, characteristic_id NUMBER, characteristic_data_type TEXT);"
      },
      {
        "question": "Of those, filter down to those that are product name \"sesame\" as well.",
        "query": "SELECT t1.typical_selling_price FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE t1.product_name = \"sesame\" AND t3.characteristic_type_code = \"Grade\"",
        "schema": "CREATE TABLE Ref_Characteristic_Types (characteristic_type_code TEXT); CREATE TABLE Products (typical_selling_price TEXT, product_name TEXT, product_id NUMBER, typical_buying_price TEXT); CREATE TABLE Characteristics (characteristic_data_type TEXT, characteristic_type_code TEXT, characteristic_name TEXT, characteristic_id NUMBER); CREATE TABLE Product_Characteristics (product_id NUMBER, product_characteristic_value TEXT, characteristic_id NUMBER);"
      },
      {
        "question": "Give the characteristic names instead.",
        "query": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE t1.product_name = \"sesame\" AND t3.characteristic_type_code = \"Grade\"",
        "schema": "CREATE TABLE Characteristics (characteristic_id NUMBER, characteristic_type_code TEXT, characteristic_name TEXT, characteristic_data_type TEXT); CREATE TABLE Products (product_name TEXT, typical_buying_price TEXT, product_id NUMBER, typical_selling_price TEXT); CREATE TABLE Ref_Characteristic_Types (characteristic_type_code TEXT); CREATE TABLE Product_Characteristics (product_characteristic_value TEXT, product_id NUMBER, characteristic_id NUMBER);"
      }
    ],
    [
      {
        "question": "What are the product characteristic values of the product named \"laurel\"?",
        "query": "SELECT t2.product_characteristic_value FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id WHERE t1.product_name = \"laurel\"",
        "schema": "CREATE TABLE Characteristics (characteristic_type_code TEXT, characteristic_id NUMBER, characteristic_name TEXT); CREATE TABLE Products (product_id NUMBER, product_name TEXT); CREATE TABLE Product_Characteristics (product_characteristic_value TEXT, product_id NUMBER, characteristic_id NUMBER);"
      },
      {
        "question": "Give the characteristic name instead.",
        "query": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE t1.product_name = \"laurel\"",
        "schema": "CREATE TABLE Product_Characteristics (product_characteristic_value TEXT, characteristic_id NUMBER, product_id NUMBER); CREATE TABLE Products (product_id NUMBER, product_name TEXT); CREATE TABLE Characteristics (characteristic_type_code TEXT, characteristic_id NUMBER, characteristic_name TEXT);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE t1.product_name = \"laurel\"",
        "schema": "CREATE TABLE Characteristics (characteristic_name TEXT, characteristic_id NUMBER, characteristic_type_code TEXT); CREATE TABLE Product_Characteristics (product_id NUMBER, product_characteristic_value TEXT, characteristic_id NUMBER); CREATE TABLE Products (product_id NUMBER, product_name TEXT);"
      }
    ],
    [
      {
        "question": "What is the typical selling price of the product \"catnip\"?",
        "query": "SELECT typical_selling_price FROM products WHERE product_name = \"catnip\"",
        "schema": "CREATE TABLE Products (typical_selling_price TEXT, typical_buying_price TEXT, product_id NUMBER, product_name TEXT); CREATE TABLE Product_Characteristics (product_characteristic_value TEXT, product_id NUMBER);"
      },
      {
        "question": "What about the product \"flax\"?",
        "query": "SELECT typical_selling_price FROM products WHERE product_name = \"flax\"",
        "schema": "CREATE TABLE Product_Characteristics (product_characteristic_value TEXT, product_id NUMBER); CREATE TABLE Products (product_name TEXT, product_id NUMBER, typical_buying_price TEXT, typical_selling_price TEXT);"
      },
      {
        "question": "What are its characteristics?",
        "query": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE t1.product_name = \"flax\"",
        "schema": "CREATE TABLE Product_Characteristics (product_characteristic_value TEXT, product_id NUMBER, characteristic_id NUMBER); CREATE TABLE Ref_Characteristic_Types (characteristic_type_code TEXT, characteristic_type_description TEXT); CREATE TABLE Characteristics (characteristic_id NUMBER, characteristic_name TEXT, characteristic_type_code TEXT); CREATE TABLE Products (product_name TEXT, typical_selling_price TEXT, typical_buying_price TEXT, product_id NUMBER);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE t1.product_name = \"flax\"",
        "schema": "CREATE TABLE Products (product_id NUMBER, typical_buying_price TEXT, typical_selling_price TEXT, product_name TEXT); CREATE TABLE Ref_Characteristic_Types (characteristic_type_code TEXT, characteristic_type_description TEXT); CREATE TABLE Characteristics (characteristic_type_code TEXT, characteristic_id NUMBER, characteristic_name TEXT); CREATE TABLE Product_Characteristics (product_id NUMBER, product_characteristic_value TEXT, characteristic_id NUMBER);"
      }
    ],
    [
      {
        "question": "What is the name of products with selling price > 1000",
        "query": "SELECT product_name FROM products WHERE typical_selling_price > 1000",
        "schema": "CREATE TABLE Products (typical_buying_price TEXT, product_id NUMBER, typical_selling_price TEXT, product_name TEXT); CREATE TABLE Product_Characteristics (product_id NUMBER);"
      },
      {
        "question": "What about for products with characteristic name \"slow\"",
        "query": "SELECT t1.product_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE t3.characteristic_name = \"slow\"",
        "schema": "CREATE TABLE Products (typical_selling_price TEXT, product_name TEXT, typical_buying_price TEXT, product_id NUMBER); CREATE TABLE Characteristics (characteristic_type_code TEXT, characteristic_name TEXT, characteristic_id NUMBER); CREATE TABLE Product_Characteristics (product_id NUMBER, product_characteristic_value TEXT, characteristic_id NUMBER);"
      },
      {
        "question": "For characteristic name \"fast\" instead?",
        "query": "SELECT t1.product_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE t3.characteristic_name = \"fast\"",
        "schema": "CREATE TABLE Products (product_id NUMBER, typical_buying_price TEXT, typical_selling_price TEXT, product_name TEXT); CREATE TABLE Product_Characteristics (product_id NUMBER, product_characteristic_value TEXT, characteristic_id NUMBER); CREATE TABLE Characteristics (characteristic_type_code TEXT, characteristic_name TEXT, characteristic_id NUMBER);"
      },
      {
        "question": "Show the ones that also have color description red.",
        "query": "SELECT product_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code = t4.color_code WHERE t4.color_description = \"red\" AND t3.characteristic_name = \"fast\"",
        "schema": "CREATE TABLE Ref_Colors (color_code TEXT, color_description TEXT); CREATE TABLE Characteristics (characteristic_id NUMBER, characteristic_type_code TEXT, characteristic_name TEXT); CREATE TABLE Product_Characteristics (product_characteristic_value TEXT, product_id NUMBER, characteristic_id NUMBER); CREATE TABLE Products (typical_selling_price TEXT, product_name TEXT, product_id NUMBER, typical_buying_price TEXT, color_code TEXT, product_description TEXT);"
      }
    ],
    [
      {
        "question": "What are the names of the products with color \"red\"?",
        "query": "SELECT product_name FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code WHERE t2.color_description = \"red\"",
        "schema": "CREATE TABLE Products (product_id NUMBER, product_name TEXT, color_code TEXT); CREATE TABLE Ref_Colors (color_description TEXT, color_code TEXT);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT count(*) FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code WHERE t2.color_description = \"red\"",
        "schema": "CREATE TABLE Ref_Colors (color_description TEXT, color_code TEXT); CREATE TABLE Products (color_code TEXT, product_name TEXT, product_id NUMBER, product_description TEXT);"
      },
      {
        "question": "What about for those with characteristic named \"hot\" instead?",
        "query": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE t3.characteristic_name = \"hot\"",
        "schema": "CREATE TABLE Products (color_code TEXT, product_description TEXT, product_name TEXT, product_id NUMBER); CREATE TABLE Characteristics (characteristic_name TEXT, characteristic_type_code TEXT, characteristic_id NUMBER); CREATE TABLE Ref_Colors (color_description TEXT, color_code TEXT); CREATE TABLE Ref_Characteristic_Types (characteristic_type_description TEXT, characteristic_type_code TEXT); CREATE TABLE Product_Characteristics (product_id NUMBER, characteristic_id NUMBER);"
      }
    ],
    [
      {
        "question": "What are the names of the products that have buying price < 100",
        "query": "SELECT product_name FROM products WHERE typical_buying_price < 100",
        "schema": "CREATE TABLE Products (product_name TEXT, typical_selling_price TEXT, typical_buying_price TEXT, product_id NUMBER); CREATE TABLE Product_Characteristics (product_id NUMBER);"
      },
      {
        "question": "Show their distinct names.",
        "query": "SELECT DISTINCT product_name FROM products WHERE typical_buying_price < 100",
        "schema": "CREATE TABLE Product_Characteristics (product_id NUMBER); CREATE TABLE Products (typical_selling_price TEXT, product_name TEXT, product_id NUMBER, typical_buying_price TEXT);"
      },
      {
        "question": "What about for those with color \"black\"?",
        "query": "SELECT DISTINCT t1.product_name FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code WHERE t2.color_description = \"red\"",
        "schema": "CREATE TABLE Product_Characteristics (product_id NUMBER); CREATE TABLE Ref_Colors (color_code TEXT, color_description TEXT); CREATE TABLE Products (color_code TEXT, product_id NUMBER, typical_selling_price TEXT, product_name TEXT, typical_buying_price TEXT);"
      },
      {
        "question": "For the characteristic name \"warm\" instead?",
        "query": "SELECT DISTINCT t1.product_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE t3.characteristic_name = \"warm\"",
        "schema": "CREATE TABLE Ref_Characteristic_Types (characteristic_type_code TEXT, characteristic_type_description TEXT); CREATE TABLE Product_Characteristics (product_characteristic_value TEXT, product_id NUMBER, characteristic_id NUMBER); CREATE TABLE Products (typical_buying_price TEXT, product_description TEXT, color_code TEXT, product_name TEXT, typical_selling_price TEXT, product_id NUMBER); CREATE TABLE Characteristics (characteristic_name TEXT, characteristic_id NUMBER, characteristic_type_code TEXT); CREATE TABLE Ref_Colors (color_code TEXT, color_description TEXT);"
      }
    ],
    [
      {
        "question": "What are the buying prices of the products with selling price < 500?",
        "query": "SELECT typical_buying_price FROM products WHERE typical_selling_price < 500",
        "schema": "CREATE TABLE Products (product_name TEXT, product_id NUMBER, typical_selling_price TEXT, typical_buying_price TEXT); CREATE TABLE Product_Characteristics (product_id NUMBER);"
      },
      {
        "question": "Show their names instead.",
        "query": "SELECT product_name FROM products WHERE typical_selling_price < 500",
        "schema": "CREATE TABLE Product_Characteristics (product_id NUMBER); CREATE TABLE Products (typical_buying_price TEXT, typical_selling_price TEXT, product_id NUMBER, product_name TEXT);"
      },
      {
        "question": "Of those, narrow down to ones with color \"red\" as well.",
        "query": "SELECT t1.product_name FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code WHERE t1.typical_selling_price < 500 AND t2.color_description = \"red\"",
        "schema": "CREATE TABLE Products (product_name TEXT, color_code TEXT, typical_selling_price TEXT, typical_buying_price TEXT, product_id NUMBER); CREATE TABLE Ref_Colors (color_description TEXT, color_code TEXT); CREATE TABLE Product_Characteristics (product_id NUMBER);"
      },
      {
        "question": "Remove the restriction of selling price.",
        "query": "SELECT t1.product_name FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code WHERE t2.color_description = \"red\"",
        "schema": "CREATE TABLE Products (color_code TEXT, product_description TEXT, typical_selling_price TEXT, typical_buying_price TEXT, product_name TEXT, product_id NUMBER); CREATE TABLE Product_Characteristics (product_id NUMBER); CREATE TABLE Ref_Colors (color_description TEXT, color_code TEXT);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT count(*) FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code WHERE t2.color_description = \"red\"",
        "schema": "CREATE TABLE Products (product_id NUMBER, typical_selling_price TEXT, product_description TEXT, product_name TEXT, typical_buying_price TEXT, color_code TEXT); CREATE TABLE Ref_Colors (color_description TEXT, color_code TEXT); CREATE TABLE Product_Characteristics (product_id NUMBER);"
      },
      {
        "question": "Restrict also to those with characteristic named \"slow\" as well.",
        "query": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code = t4.color_code WHERE t4.color_description = \"red\" AND t3.characteristic_name = \"slow\"",
        "schema": "CREATE TABLE Characteristics (other_characteristic_details TEXT, characteristic_id NUMBER, characteristic_name TEXT, characteristic_type_code TEXT); CREATE TABLE Products (product_id NUMBER, typical_buying_price TEXT, typical_selling_price TEXT, product_description TEXT, product_name TEXT, color_code TEXT); CREATE TABLE Ref_Colors (color_description TEXT, color_code TEXT); CREATE TABLE Ref_Characteristic_Types (characteristic_type_code TEXT, characteristic_type_description TEXT); CREATE TABLE Product_Characteristics (product_characteristic_value TEXT, characteristic_id NUMBER, product_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show the names of products that have buying price > 100",
        "query": "SELECT product_name FROM products WHERE typical_buying_price > 100",
        "schema": "CREATE TABLE Product_Characteristics (product_id NUMBER); CREATE TABLE Products (typical_buying_price TEXT, typical_selling_price TEXT, product_id NUMBER, product_name TEXT);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT count(*) FROM products WHERE typical_buying_price > 100",
        "schema": "CREATE TABLE Product_Characteristics (product_id NUMBER); CREATE TABLE Products (product_name TEXT, product_id NUMBER, typical_selling_price TEXT, typical_buying_price TEXT);"
      },
      {
        "question": "What about for those with color description \"red\"?",
        "query": "SELECT count(*) FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code WHERE t2.color_description = \"red\"",
        "schema": "CREATE TABLE Product_Characteristics (product_id NUMBER); CREATE TABLE Ref_Colors (color_description TEXT, color_code TEXT); CREATE TABLE Products (color_code TEXT, typical_selling_price TEXT, product_name TEXT, typical_buying_price TEXT, product_id NUMBER, product_description TEXT);"
      },
      {
        "question": "Show the ones with color description \"white\" instead.",
        "query": "SELECT count(*) FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code WHERE t2.color_description = \"white\"",
        "schema": "CREATE TABLE Products (product_name TEXT, typical_selling_price TEXT, product_id NUMBER, typical_buying_price TEXT, color_code TEXT, product_description TEXT); CREATE TABLE Product_Characteristics (product_id NUMBER); CREATE TABLE Ref_Colors (color_description TEXT, color_code TEXT);"
      },
      {
        "question": "They can also be having the characteristic name \"hot\".",
        "query": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code = t4.color_code WHERE t4.color_description = \"white\" OR t3.characteristic_name = \"hot\"",
        "schema": "CREATE TABLE Products (color_code TEXT, product_description TEXT, product_name TEXT, typical_buying_price TEXT, typical_selling_price TEXT, product_id NUMBER); CREATE TABLE Ref_Colors (color_description TEXT, color_code TEXT); CREATE TABLE Ref_Characteristic_Types (characteristic_type_description TEXT, characteristic_type_code TEXT); CREATE TABLE Product_Characteristics (characteristic_id NUMBER, product_characteristic_value TEXT, product_id NUMBER); CREATE TABLE Characteristics (characteristic_type_code TEXT, characteristic_id NUMBER, characteristic_name TEXT);"
      }
    ],
    [
      {
        "question": "What is the typical selling price of the product named \"catnip\"?",
        "query": "SELECT typical_selling_price FROM products WHERE product_name = \"catnip\"",
        "schema": "CREATE TABLE Product_Characteristics (product_characteristic_value TEXT, product_id NUMBER); CREATE TABLE Products (product_id NUMBER, typical_buying_price TEXT, product_name TEXT, typical_selling_price TEXT);"
      },
      {
        "question": "Show its color description instead.",
        "query": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code WHERE t1.product_name = \"catnip\"",
        "schema": "CREATE TABLE Product_Characteristics (product_characteristic_value TEXT, product_id NUMBER); CREATE TABLE Ref_Colors (color_code TEXT, color_description TEXT); CREATE TABLE Products (product_id NUMBER, product_name TEXT, typical_buying_price TEXT, product_description TEXT, typical_selling_price TEXT, color_code TEXT);"
      },
      {
        "question": "Give its unit of measurement instead.",
        "query": "SELECT t2.unit_of_measure FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code = t2.product_category_code WHERE t1.product_name = \"cumin\"",
        "schema": "CREATE TABLE Products (typical_selling_price TEXT, typical_buying_price TEXT, product_description TEXT, color_code TEXT, product_id NUMBER, product_name TEXT, product_category_code TEXT); CREATE TABLE Product_Characteristics (product_characteristic_value TEXT, product_id NUMBER); CREATE TABLE Ref_Product_Categories (product_category_code TEXT, unit_of_measure TEXT); CREATE TABLE Ref_Colors (color_code TEXT, color_description TEXT);"
      }
    ],
    [
      {
        "question": "What is the color of the product named \"ginger\"?",
        "query": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code WHERE t1.product_name = \"ginger\"",
        "schema": "CREATE TABLE Products (product_id NUMBER, color_code TEXT, product_name TEXT); CREATE TABLE Ref_Colors (color_description TEXT, color_code TEXT);"
      },
      {
        "question": "Show its unit of measurement instead.",
        "query": "SELECT t2.unit_of_measure FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code = t2.product_category_code WHERE t1.product_name = \"ginger\"",
        "schema": "CREATE TABLE Products (color_code TEXT, product_category_code TEXT, product_id NUMBER, product_name TEXT, product_description TEXT); CREATE TABLE Ref_Product_Categories (unit_of_measure TEXT, product_category_code TEXT); CREATE TABLE Ref_Colors (color_code TEXT, color_description TEXT);"
      },
      {
        "question": "Give the product category code as well.",
        "query": "SELECT t2.unit_of_measure , t2.product_category_code FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code = t2.product_category_code WHERE t1.product_name = \"ginger\"",
        "schema": "CREATE TABLE Ref_Product_Categories (unit_of_measure TEXT, product_category_code TEXT, product_category_description TEXT); CREATE TABLE Ref_Colors (color_description TEXT, color_code TEXT); CREATE TABLE Products (product_description TEXT, color_code TEXT, product_category_code TEXT, product_name TEXT, product_id NUMBER);"
      },
      {
        "question": "Do this for the product named \"chervil\" instead.",
        "query": "SELECT t2.unit_of_measure , t2.product_category_code FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code = t2.product_category_code WHERE t1.product_name = \"chervil\"",
        "schema": "CREATE TABLE Ref_Colors (color_description TEXT, color_code TEXT); CREATE TABLE Products (product_name TEXT, color_code TEXT, product_description TEXT, product_id NUMBER, product_category_code TEXT); CREATE TABLE Ref_Product_Categories (product_category_code TEXT, unit_of_measure TEXT, product_category_description TEXT);"
      }
    ],
    [
      {
        "question": "What are the product names that are not product category code \"Herbs\"?",
        "query": "SELECT product_name FROM products WHERE product_category_code != \"Herbs\"",
        "schema": "CREATE TABLE Ref_Product_Categories (product_category_code TEXT); CREATE TABLE Products (color_code TEXT, product_category_code TEXT, product_name TEXT, product_id NUMBER);"
      },
      {
        "question": "Show the same, but for those with unit of measurement \"Handful\" instead.",
        "query": "SELECT t1.product_name FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code = t2.product_category_code WHERE t2.unit_of_measure = \"Handul\"",
        "schema": "CREATE TABLE Products (product_name TEXT, product_category_code TEXT, product_id NUMBER, color_code TEXT); CREATE TABLE Ref_Product_Categories (product_category_code TEXT, unit_of_measure TEXT);"
      },
      {
        "question": "What about the opposite condition?",
        "query": "SELECT t1.product_name FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code = t2.product_category_code WHERE t2.unit_of_measure != \"Handul\"",
        "schema": "CREATE TABLE Ref_Product_Categories (product_category_code TEXT, unit_of_measure TEXT); CREATE TABLE Product_Characteristics (product_id NUMBER, characteristic_id NUMBER); CREATE TABLE Characteristics (characteristic_id NUMBER); CREATE TABLE Products (product_name TEXT, product_category_code TEXT, color_code TEXT, product_id NUMBER);"
      },
      {
        "question": "Of these, show for the ones that are colored \"white\" too.",
        "query": "SELECT t1.product_name FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code = t2.product_category_code JOIN ref_colors AS t3 ON t1.color_code = t3.color_code WHERE t3.color_description = \"white\" AND t2.unit_of_measure != \"Handful\"",
        "schema": "CREATE TABLE Characteristics (characteristic_id NUMBER); CREATE TABLE Ref_Colors (color_code TEXT, color_description TEXT); CREATE TABLE Ref_Product_Categories (unit_of_measure TEXT, product_category_description TEXT, product_category_code TEXT); CREATE TABLE Product_Characteristics (product_id NUMBER, characteristic_id NUMBER); CREATE TABLE Products (product_category_code TEXT, product_name TEXT, color_code TEXT, product_id NUMBER);"
      }
    ],
    [
      {
        "question": "What are the product names in decreasing order of typical selling price?",
        "query": "SELECT product_name FROM products ORDER BY typical_selling_price DESC",
        "schema": "CREATE TABLE Products (typical_buying_price TEXT, product_id NUMBER, product_name TEXT, typical_selling_price TEXT); CREATE TABLE Product_Characteristics (product_id NUMBER);"
      },
      {
        "question": "Order by decreasing order of color frequency instead.",
        "query": "SELECT t1.product_name FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code GROUP BY t2.color_description ORDER BY count(*) DESC",
        "schema": "CREATE TABLE Products (product_id NUMBER, typical_selling_price TEXT, product_name TEXT, color_code TEXT, typical_buying_price TEXT); CREATE TABLE Ref_Colors (color_description TEXT, color_code TEXT); CREATE TABLE Product_Characteristics (product_id NUMBER);"
      },
      {
        "question": "Show their respective color descriptions.",
        "query": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code GROUP BY t2.color_description ORDER BY count(*) DESC",
        "schema": "CREATE TABLE Products (typical_selling_price TEXT, product_description TEXT, product_id NUMBER, product_name TEXT, color_code TEXT, typical_buying_price TEXT); CREATE TABLE Product_Characteristics (product_id NUMBER); CREATE TABLE Ref_Colors (color_code TEXT, color_description TEXT);"
      },
      {
        "question": "Show only for the most frequent color description.",
        "query": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code GROUP BY t2.color_description ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Product_Characteristics (product_id NUMBER); CREATE TABLE Products (product_name TEXT, typical_buying_price TEXT, product_description TEXT, color_code TEXT, product_id NUMBER, typical_selling_price TEXT); CREATE TABLE Ref_Colors (color_code TEXT, color_description TEXT);"
      }
    ],
    [
      {
        "question": "What is the most frequent product category code of the products?",
        "query": "SELECT product_category_code FROM products GROUP BY product_category_code ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Ref_Product_Categories (product_category_code TEXT); CREATE TABLE Products (product_category_code TEXT, product_name TEXT, product_id NUMBER);"
      },
      {
        "question": "What about the color description instead?",
        "query": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code GROUP BY t2.color_description ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Ref_Colors (color_code TEXT, color_description TEXT); CREATE TABLE Products (product_name TEXT, product_id NUMBER, product_description TEXT, product_category_code TEXT, color_code TEXT); CREATE TABLE Ref_Product_Categories (product_category_code TEXT);"
      },
      {
        "question": "Give the least frequent now.",
        "query": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code GROUP BY t2.color_description ORDER BY count(*) ASC LIMIT 1",
        "schema": "CREATE TABLE Ref_Product_Categories (product_category_code TEXT); CREATE TABLE Products (product_id NUMBER, product_description TEXT, color_code TEXT, product_category_code TEXT, product_name TEXT); CREATE TABLE Ref_Colors (color_code TEXT, color_description TEXT);"
      }
    ],
    [
      {
        "question": "What are the product category codes used of the products?",
        "query": "SELECT product_category_code FROM products",
        "schema": "CREATE TABLE Ref_Product_Categories (product_category_code TEXT); CREATE TABLE Products (product_category_code TEXT, product_id NUMBER, product_name TEXT);"
      },
      {
        "question": "What is the ones used most frequently?",
        "query": "SELECT product_category_code FROM products GROUP BY product_category_code ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Ref_Product_Categories (product_category_code TEXT); CREATE TABLE Products (product_name TEXT, product_category_code TEXT, product_id NUMBER);"
      },
      {
        "question": "What about for the characteristic name instead?",
        "query": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id GROUP BY t3.characteristic_name ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Ref_Product_Categories (product_category_code TEXT); CREATE TABLE Product_Characteristics (product_id NUMBER, characteristic_id NUMBER); CREATE TABLE Products (product_name TEXT, product_id NUMBER, product_category_code TEXT); CREATE TABLE Characteristics (characteristic_id NUMBER, characteristic_name TEXT, characteristic_type_code TEXT);"
      }
    ],
    [
      {
        "question": "What are the names, details and data types of the characteristics?",
        "query": "SELECT characteristic_name , other_characteristic_details , characteristic_data_type FROM CHARACTERISTICS",
        "schema": "CREATE TABLE Product_Characteristics (product_id NUMBER, characteristic_id NUMBER); CREATE TABLE Products (product_name TEXT); CREATE TABLE Characteristics (characteristic_name TEXT, characteristic_id NUMBER, characteristic_type_code TEXT, other_characteristic_details TEXT, characteristic_data_type TEXT); CREATE TABLE Ref_Characteristic_Types (characteristic_type_description TEXT, characteristic_type_code TEXT);"
      },
      {
        "question": "Show these for the ones used in products.",
        "query": "SELECT characteristic_name , other_characteristic_details , characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id = t2.characteristic_id",
        "schema": "CREATE TABLE Characteristics (characteristic_id NUMBER, characteristic_type_code TEXT, characteristic_data_type TEXT, other_characteristic_details TEXT, characteristic_name TEXT); CREATE TABLE Product_Characteristics (product_id NUMBER, characteristic_id NUMBER); CREATE TABLE Ref_Characteristic_Types (characteristic_type_description TEXT, characteristic_type_code TEXT); CREATE TABLE Products (other_product_details TEXT, product_id NUMBER, product_name TEXT);"
      },
      {
        "question": "Show the ones that are not used.",
        "query": "SELECT characteristic_name , other_characteristic_details , characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name , t1.other_characteristic_details , t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id = t2.characteristic_id",
        "schema": "CREATE TABLE Characteristics (characteristic_type_code TEXT, characteristic_data_type TEXT, characteristic_id NUMBER, characteristic_name TEXT, other_characteristic_details TEXT); CREATE TABLE Product_Characteristics (characteristic_id NUMBER, product_id NUMBER); CREATE TABLE Products (other_product_details TEXT, product_name TEXT, product_id NUMBER); CREATE TABLE Ref_Characteristic_Types (characteristic_type_description TEXT, characteristic_type_code TEXT);"
      }
    ],
    [
      {
        "question": "What are the color descriptions?",
        "query": "SELECT color_description FROM ref_colors",
        "schema": "CREATE TABLE Products (color_code TEXT, product_description TEXT); CREATE TABLE Ref_Colors (color_description TEXT, color_code TEXT);"
      },
      {
        "question": "Which ones are used only once across all the products?",
        "query": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code GROUP BY t2.color_description HAVING count(*) = 1",
        "schema": "CREATE TABLE Ref_Colors (color_description TEXT, color_code TEXT); CREATE TABLE Products (product_name TEXT, color_code TEXT, product_id NUMBER, product_description TEXT);"
      },
      {
        "question": "How about for the characteristic names?",
        "query": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id GROUP BY t3.characteristic_name HAVING count(*) = 1",
        "schema": "CREATE TABLE Product_Characteristics (product_id NUMBER, characteristic_id NUMBER); CREATE TABLE Ref_Colors (color_code TEXT, color_description TEXT); CREATE TABLE Characteristics (characteristic_type_code TEXT, other_characteristic_details TEXT, characteristic_name TEXT, characteristic_id NUMBER); CREATE TABLE Products (color_code TEXT, product_id NUMBER, product_name TEXT, product_description TEXT); CREATE TABLE Ref_Characteristic_Types (characteristic_type_description TEXT, characteristic_type_code TEXT);"
      },
      {
        "question": "Show the ones that are used at least twice.",
        "query": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id GROUP BY t3.characteristic_name HAVING count(*) >= 2",
        "schema": "CREATE TABLE Ref_Characteristic_Types (characteristic_type_code TEXT, characteristic_type_description TEXT); CREATE TABLE Product_Characteristics (product_id NUMBER, characteristic_id NUMBER); CREATE TABLE Characteristics (characteristic_id NUMBER, other_characteristic_details TEXT, characteristic_name TEXT, characteristic_type_code TEXT); CREATE TABLE Products (product_description TEXT, product_id NUMBER, color_code TEXT, product_name TEXT); CREATE TABLE Ref_Colors (color_code TEXT, color_description TEXT);"
      }
    ]
  ],
  "program_share": [
    [
      {
        "question": "List all channel names.",
        "query": "SELECT name FROM channel",
        "schema": "CREATE TABLE channel (Name TEXT, Channel_ID NUMBER); CREATE TABLE broadcast_share (Channel_ID NUMBER); CREATE TABLE broadcast (Channel_ID NUMBER, Program_ID NUMBER); CREATE TABLE program (Name TEXT, Program_ID NUMBER);"
      },
      {
        "question": "Order them by rating ratio from highest to lowest.",
        "query": "SELECT name FROM channel ORDER BY rating_in_percent DESC",
        "schema": "CREATE TABLE program (Name TEXT, Program_ID NUMBER); CREATE TABLE broadcast (Program_ID NUMBER, Channel_ID NUMBER); CREATE TABLE broadcast_share (Channel_ID NUMBER); CREATE TABLE channel (Rating_in_percent NUMBER, Channel_ID NUMBER, Name TEXT);"
      },
      {
        "question": "Which one has the highest rating?",
        "query": "SELECT name FROM channel ORDER BY rating_in_percent DESC LIMIT 1",
        "schema": "CREATE TABLE broadcast (Channel_ID NUMBER, Program_ID NUMBER); CREATE TABLE broadcast_share (Channel_ID NUMBER); CREATE TABLE program (Name TEXT, Program_ID NUMBER); CREATE TABLE channel (Channel_ID NUMBER, Rating_in_percent NUMBER, Share_in_percent NUMBER, Name TEXT);"
      },
      {
        "question": "Who is the owner?",
        "query": "SELECT OWNER FROM channel ORDER BY rating_in_percent DESC LIMIT 1",
        "schema": "CREATE TABLE program (Program_ID NUMBER, Name TEXT, Owner TEXT); CREATE TABLE broadcast (Channel_ID NUMBER, Program_ID NUMBER); CREATE TABLE channel (Owner TEXT, Rating_in_percent NUMBER, Share_in_percent NUMBER, Name TEXT, Channel_ID NUMBER); CREATE TABLE broadcast_share (Channel_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What are the program names?",
        "query": "SELECT name FROM program",
        "schema": "CREATE TABLE program (Name TEXT, Program_ID NUMBER); CREATE TABLE broadcast (Program_ID NUMBER);"
      },
      {
        "question": "Order by launch date from most recent to least recent.",
        "query": "SELECT name FROM program ORDER BY launch DESC",
        "schema": "CREATE TABLE broadcast (Program_ID NUMBER); CREATE TABLE program (Launch NUMBER, Name TEXT, Program_ID NUMBER);"
      },
      {
        "question": "Which one was launched most recently?",
        "query": "SELECT name FROM program ORDER BY launch DESC LIMIT 1",
        "schema": "CREATE TABLE broadcast (Program_ID NUMBER); CREATE TABLE program (Program_ID NUMBER, Name TEXT, Launch NUMBER);"
      }
    ],
    [
      {
        "question": "List all channel names.",
        "query": "SELECT name FROM channel",
        "schema": "CREATE TABLE broadcast_share (Channel_ID NUMBER); CREATE TABLE channel (Name TEXT, Channel_ID NUMBER); CREATE TABLE broadcast (Program_ID NUMBER, Channel_ID NUMBER); CREATE TABLE program (Name TEXT, Program_ID NUMBER);"
      },
      {
        "question": "When are they broadcasted?",
        "query": "SELECT t1.name, t2.time_of_day FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id = t2.channel_id",
        "schema": "CREATE TABLE channel (Name TEXT, Channel_ID NUMBER); CREATE TABLE broadcast (Channel_ID NUMBER, Program_ID NUMBER, Time_of_day TEXT); CREATE TABLE program (Name TEXT, Program_ID NUMBER); CREATE TABLE broadcast_share (Channel_ID NUMBER);"
      },
      {
        "question": "Which ones are broadcasted in the morning?",
        "query": "SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id = t2.channel_id WHERE t2.time_of_day = 'Morning'",
        "schema": "CREATE TABLE broadcast (Program_ID NUMBER, Channel_ID NUMBER, Time_of_day TEXT); CREATE TABLE broadcast_share (Channel_ID NUMBER); CREATE TABLE program (Name TEXT, Program_ID NUMBER); CREATE TABLE channel (Name TEXT, Channel_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Please list the names of all channels.",
        "query": "SELECT name FROM channel",
        "schema": "CREATE TABLE broadcast (Channel_ID NUMBER); CREATE TABLE broadcast_share (Channel_ID NUMBER); CREATE TABLE channel (Channel_ID NUMBER, Name TEXT);"
      },
      {
        "question": "Include the time of day that they are broadcasted.",
        "query": "SELECT t1.name, t2.time_of_day FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id = t2.channel_id",
        "schema": "CREATE TABLE broadcast_share (Channel_ID NUMBER); CREATE TABLE channel (Name TEXT, Channel_ID NUMBER); CREATE TABLE broadcast (Time_of_day TEXT, Channel_ID NUMBER);"
      },
      {
        "question": "Which ones broadcast in the morning?",
        "query": "SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id = t2.channel_id WHERE t2.time_of_day = 'Morning'",
        "schema": "CREATE TABLE broadcast_share (Channel_ID NUMBER); CREATE TABLE channel (Channel_ID NUMBER, Name TEXT); CREATE TABLE broadcast (Channel_ID NUMBER, Time_of_day TEXT);"
      },
      {
        "question": "Out of those channels, which ones also broadcast at night?",
        "query": "SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id = t2.channel_id WHERE t2.time_of_day = 'Morning' INTERSECT SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id = t2.channel_id WHERE t2.time_of_day = 'Night'",
        "schema": "CREATE TABLE broadcast (Channel_ID NUMBER, Time_of_day TEXT); CREATE TABLE broadcast_share (Channel_ID NUMBER); CREATE TABLE channel (Channel_ID NUMBER, Name TEXT);"
      }
    ],
    [
      {
        "question": "What are the names of all programs?",
        "query": "SELECT name FROM program",
        "schema": "CREATE TABLE program (Name TEXT, Program_ID NUMBER);"
      },
      {
        "question": "When are they broadcasted?",
        "query": "SELECT t1.name, t2.time_of_day FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id = t2.program_id",
        "schema": "CREATE TABLE program (Name TEXT, Program_ID NUMBER); CREATE TABLE broadcast_share (Program_ID NUMBER, Date TEXT); CREATE TABLE broadcast (Time_of_day TEXT, Program_ID NUMBER);"
      },
      {
        "question": "Which ones are broadcasted in the morning?",
        "query": "SELECT t1.name, t2.time_of_day FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id = t2.program_id WHERE t2.time_of_day = \"Morning\"",
        "schema": "CREATE TABLE broadcast_share (Program_ID NUMBER, Date TEXT); CREATE TABLE broadcast (Time_of_day TEXT, Program_ID NUMBER); CREATE TABLE program (Name TEXT, Program_ID NUMBER);"
      },
      {
        "question": "What about the ones that are not broadcasted in the morning?",
        "query": "SELECT name FROM program EXCEPT SELECT t1.name FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id = t2.program_id WHERE t2.time_of_day = \"Morning\"",
        "schema": "CREATE TABLE broadcast (Time_of_day TEXT, Program_ID NUMBER); CREATE TABLE program (Program_ID NUMBER, Name TEXT); CREATE TABLE broadcast_share (Program_ID NUMBER, Date TEXT);"
      }
    ],
    [
      {
        "question": "List the names of all programs.",
        "query": "SELECT name FROM program",
        "schema": "CREATE TABLE program (Name TEXT, Program_ID NUMBER); CREATE TABLE broadcast (Program_ID NUMBER);"
      },
      {
        "question": "Include their broadcast times.",
        "query": "SELECT t1.name, t2.time_of_day FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id = t2.program_id",
        "schema": "CREATE TABLE program (Program_ID NUMBER, Name TEXT); CREATE TABLE broadcast (Time_of_day TEXT, Program_ID NUMBER); CREATE TABLE broadcast_share (Date TEXT, Program_ID NUMBER);"
      },
      {
        "question": "Which ones are broadcasted in both morning and night?",
        "query": "SELECT t1.name FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id = t2.program_id WHERE t2.time_of_day = 'Morning' INTERSECT SELECT t1.name FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id = t2.program_id WHERE t2.time_of_day = 'Night'",
        "schema": "CREATE TABLE broadcast (Time_of_day TEXT, Program_ID NUMBER); CREATE TABLE program (Name TEXT, Program_ID NUMBER); CREATE TABLE broadcast_share (Program_ID NUMBER, Date TEXT);"
      },
      {
        "question": "Who are the owners of these programs?",
        "query": "SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id = t2.program_id WHERE t2.time_of_day = \"Morning\" INTERSECT SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id = t2.program_id WHERE t2.time_of_day = \"Night\"",
        "schema": "CREATE TABLE program (Owner TEXT, Program_ID NUMBER, Name TEXT); CREATE TABLE broadcast (Time_of_day TEXT, Program_ID NUMBER); CREATE TABLE broadcast_share (Program_ID NUMBER, Date TEXT);"
      }
    ],
    [
      {
        "question": "List the names of all channels.",
        "query": "SELECT name FROM channel",
        "schema": "CREATE TABLE program (Program_ID NUMBER, Name TEXT); CREATE TABLE broadcast (Channel_ID NUMBER, Program_ID NUMBER); CREATE TABLE channel (Name TEXT, Channel_ID NUMBER); CREATE TABLE broadcast_share (Channel_ID NUMBER);"
      },
      {
        "question": "Which channels are owned by CCTV?",
        "query": "SELECT name FROM channel WHERE OWNER = 'CCTV'",
        "schema": "CREATE TABLE broadcast (Program_ID NUMBER, Channel_ID NUMBER); CREATE TABLE program (Program_ID NUMBER, Name TEXT); CREATE TABLE broadcast_share (Channel_ID NUMBER); CREATE TABLE channel (Channel_ID NUMBER, Owner TEXT, Name TEXT);"
      },
      {
        "question": "Include those owned by HBS.",
        "query": "SELECT name FROM channel WHERE OWNER = 'CCTV' OR OWNER = 'HBS'",
        "schema": "CREATE TABLE broadcast_share (Channel_ID NUMBER); CREATE TABLE channel (Owner TEXT, Channel_ID NUMBER, Name TEXT); CREATE TABLE program (Program_ID NUMBER, Name TEXT); CREATE TABLE broadcast (Channel_ID NUMBER, Program_ID NUMBER);"
      }
    ]
  ],
  "swimming": [
    [
      {
        "question": "How many events are there in the record?",
        "query": "SELECT count(*) FROM event",
        "schema": "CREATE TABLE stadium (ID NUMBER); CREATE TABLE swimmer (ID NUMBER, name TEXT); CREATE TABLE record (Event_ID NUMBER, Swimmer_ID NUMBER, ID NUMBER); CREATE TABLE event (ID NUMBER, Name TEXT);"
      },
      {
        "question": "Show me their names.",
        "query": "SELECT name FROM event",
        "schema": "CREATE TABLE record (Swimmer_ID NUMBER, ID NUMBER, Event_ID NUMBER); CREATE TABLE event (Name TEXT, ID NUMBER); CREATE TABLE stadium (ID NUMBER); CREATE TABLE swimmer (name TEXT, ID NUMBER);"
      },
      {
        "question": "Which ones happened in the most recent year?",
        "query": "SELECT name FROM event ORDER BY YEAR DESC LIMIT 1",
        "schema": "CREATE TABLE stadium (ID NUMBER); CREATE TABLE record (ID NUMBER, Swimmer_ID NUMBER, Event_ID NUMBER); CREATE TABLE swimmer (ID NUMBER, name TEXT); CREATE TABLE event (Year TEXT, ID NUMBER, Name TEXT);"
      }
    ],
    [
      {
        "question": "How many stadiums are there in the system?",
        "query": "SELECT count(*) FROM stadium",
        "schema": "CREATE TABLE event (Stadium_ID NUMBER, ID NUMBER); CREATE TABLE stadium (ID NUMBER, name TEXT, City TEXT, Capacity NUMBER); CREATE TABLE record (Swimmer_ID NUMBER); CREATE TABLE swimmer (ID NUMBER);"
      },
      {
        "question": "What are their names?",
        "query": "SELECT name FROM stadium",
        "schema": "CREATE TABLE stadium (ID NUMBER, City TEXT, name TEXT, Capacity NUMBER); CREATE TABLE record (Swimmer_ID NUMBER); CREATE TABLE event (Name TEXT, ID NUMBER, Stadium_ID NUMBER); CREATE TABLE swimmer (ID NUMBER);"
      },
      {
        "question": "Show me the one with maximum capacity.",
        "query": "SELECT name FROM stadium ORDER BY capacity DESC LIMIT 1",
        "schema": "CREATE TABLE record (Swimmer_ID NUMBER); CREATE TABLE event (Name TEXT, ID NUMBER, Stadium_ID NUMBER); CREATE TABLE stadium (ID NUMBER, City TEXT, Capacity NUMBER, name TEXT); CREATE TABLE swimmer (ID NUMBER);"
      }
    ],
    [
      {
        "question": "How many stadiums are there in the system?",
        "query": "SELECT count(*) FROM stadium",
        "schema": "CREATE TABLE event (Stadium_ID NUMBER, ID NUMBER); CREATE TABLE swimmer (ID NUMBER); CREATE TABLE record (Swimmer_ID NUMBER); CREATE TABLE stadium (ID NUMBER, Capacity NUMBER, name TEXT, City TEXT);"
      },
      {
        "question": "What are their names?",
        "query": "SELECT name FROM stadium",
        "schema": "CREATE TABLE event (ID NUMBER, Name TEXT, Stadium_ID NUMBER); CREATE TABLE stadium (name TEXT, ID NUMBER, Capacity NUMBER, City TEXT); CREATE TABLE swimmer (ID NUMBER); CREATE TABLE record (Swimmer_ID NUMBER);"
      },
      {
        "question": "Give me their capacities.",
        "query": "SELECT name, capacity FROM stadium",
        "schema": "CREATE TABLE record (Swimmer_ID NUMBER); CREATE TABLE event (Name TEXT, ID NUMBER, Stadium_ID NUMBER); CREATE TABLE swimmer (ID NUMBER); CREATE TABLE stadium (City TEXT, Capacity NUMBER, name TEXT, ID NUMBER);"
      },
      {
        "question": "What is the average capacity?",
        "query": "SELECT avg(capacity) FROM stadium",
        "schema": "CREATE TABLE event (Name TEXT, ID NUMBER, Stadium_ID NUMBER); CREATE TABLE record (Swimmer_ID NUMBER); CREATE TABLE stadium (Capacity NUMBER, ID NUMBER, City TEXT, name TEXT); CREATE TABLE swimmer (ID NUMBER);"
      },
      {
        "question": "Show me the stadiums whose capacity is smaller than that.",
        "query": "SELECT name FROM stadium WHERE capacity < (SELECT avg(capacity) FROM stadium)",
        "schema": "CREATE TABLE swimmer (ID NUMBER); CREATE TABLE record (Swimmer_ID NUMBER); CREATE TABLE stadium (Capacity NUMBER, ID NUMBER, name TEXT, City TEXT); CREATE TABLE event (Stadium_ID NUMBER, ID NUMBER, Name TEXT);"
      }
    ],
    [
      {
        "question": "How many stadiums are there in file?",
        "query": "SELECT count(*) FROM stadium",
        "schema": "CREATE TABLE event (Stadium_ID NUMBER, ID NUMBER); CREATE TABLE stadium (name TEXT, ID NUMBER, Capacity NUMBER); CREATE TABLE record (Event_ID NUMBER, Swimmer_ID NUMBER); CREATE TABLE swimmer (name TEXT, ID NUMBER);"
      },
      {
        "question": "What about in terms of different countries?",
        "query": "SELECT country, count(*) FROM stadium GROUP BY country",
        "schema": "CREATE TABLE swimmer (ID NUMBER, Nationality TEXT, name TEXT); CREATE TABLE record (Event_ID NUMBER, Swimmer_ID NUMBER); CREATE TABLE event (ID NUMBER, Stadium_ID NUMBER); CREATE TABLE stadium (name TEXT, Capacity NUMBER, ID NUMBER, Country TEXT);"
      },
      {
        "question": "Show me the country with the most of them.",
        "query": "SELECT country FROM stadium GROUP BY country ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE swimmer (ID NUMBER, Nationality TEXT, name TEXT); CREATE TABLE record (Event_ID NUMBER, Swimmer_ID NUMBER); CREATE TABLE event (Stadium_ID NUMBER, ID NUMBER); CREATE TABLE stadium (Capacity NUMBER, name TEXT, Country TEXT, ID NUMBER);"
      }
    ],
    [
      {
        "question": "How many stadiums are there in file?",
        "query": "SELECT count(*) FROM stadium",
        "schema": "CREATE TABLE stadium (ID NUMBER, Capacity NUMBER, name TEXT); CREATE TABLE record (Swimmer_ID NUMBER, Event_ID NUMBER); CREATE TABLE swimmer (ID NUMBER, name TEXT); CREATE TABLE event (ID NUMBER, Stadium_ID NUMBER);"
      },
      {
        "question": "What about in terms of different countries?",
        "query": "SELECT country, count(*) FROM stadium GROUP BY country",
        "schema": "CREATE TABLE stadium (Country TEXT, name TEXT, Capacity NUMBER, ID NUMBER); CREATE TABLE record (Swimmer_ID NUMBER, Event_ID NUMBER); CREATE TABLE event (ID NUMBER, Stadium_ID NUMBER); CREATE TABLE swimmer (ID NUMBER, name TEXT, Nationality TEXT);"
      },
      {
        "question": "Show me the countries with at most three.",
        "query": "SELECT country FROM stadium GROUP BY country HAVING count(*) <= 3",
        "schema": "CREATE TABLE swimmer (name TEXT, Nationality TEXT, ID NUMBER); CREATE TABLE stadium (Country TEXT, Capacity NUMBER, name TEXT, ID NUMBER); CREATE TABLE event (Stadium_ID NUMBER, ID NUMBER); CREATE TABLE record (Swimmer_ID NUMBER, Event_ID NUMBER);"
      }
    ],
    [
      {
        "question": "How many stadiums are there in file?",
        "query": "SELECT count(*) FROM stadium",
        "schema": "CREATE TABLE swimmer (name TEXT, ID NUMBER); CREATE TABLE stadium (ID NUMBER, name TEXT, Capacity NUMBER); CREATE TABLE record (Swimmer_ID NUMBER, Event_ID NUMBER); CREATE TABLE event (Stadium_ID NUMBER, ID NUMBER);"
      },
      {
        "question": "What about in terms of different countries?",
        "query": "SELECT country, count(*) FROM stadium GROUP BY country",
        "schema": "CREATE TABLE stadium (Country TEXT, Capacity NUMBER, name TEXT, ID NUMBER); CREATE TABLE record (Swimmer_ID NUMBER, Event_ID NUMBER); CREATE TABLE swimmer (ID NUMBER, Nationality TEXT, name TEXT); CREATE TABLE event (Stadium_ID NUMBER, ID NUMBER);"
      },
      {
        "question": "Show me the countries that have stadiums with capacity greater than 60000.",
        "query": "SELECT country FROM stadium WHERE capacity > 60000",
        "schema": "CREATE TABLE record (Swimmer_ID NUMBER, Event_ID NUMBER); CREATE TABLE swimmer (name TEXT, ID NUMBER, Nationality TEXT); CREATE TABLE event (Stadium_ID NUMBER, ID NUMBER); CREATE TABLE stadium (Capacity NUMBER, Country TEXT, name TEXT, ID NUMBER);"
      },
      {
        "question": "Among them, which ones also have stadiums with capacity less than 50000.",
        "query": "SELECT country FROM stadium WHERE capacity > 60000 INTERSECT SELECT country FROM stadium WHERE capacity < 50000",
        "schema": "CREATE TABLE stadium (ID NUMBER, Capacity NUMBER, Country TEXT, name TEXT); CREATE TABLE record (Swimmer_ID NUMBER, Event_ID NUMBER); CREATE TABLE swimmer (Nationality TEXT, name TEXT, ID NUMBER); CREATE TABLE event (Stadium_ID NUMBER, ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show me the name of all stadiums.",
        "query": "SELECT name FROM stadium",
        "schema": "CREATE TABLE event (Name TEXT, Stadium_ID NUMBER, ID NUMBER); CREATE TABLE swimmer (ID NUMBER, name TEXT); CREATE TABLE stadium (name TEXT, ID NUMBER); CREATE TABLE record (Event_ID NUMBER, Swimmer_ID NUMBER);"
      },
      {
        "question": "What about their opening years?",
        "query": "SELECT name,opening_year FROM stadium",
        "schema": "CREATE TABLE stadium (name TEXT, Opening_year NUMBER, ID NUMBER); CREATE TABLE record (Event_ID NUMBER, Swimmer_ID NUMBER); CREATE TABLE event (Stadium_ID NUMBER, ID NUMBER, Name TEXT); CREATE TABLE swimmer (name TEXT, ID NUMBER);"
      },
      {
        "question": "Only list those opened after 2006.",
        "query": "SELECT name,opening_year FROM stadium WHERE opening_year > 2006",
        "schema": "CREATE TABLE stadium (name TEXT, ID NUMBER, Opening_year NUMBER); CREATE TABLE swimmer (ID NUMBER, name TEXT); CREATE TABLE event (ID NUMBER, Stadium_ID NUMBER, Name TEXT); CREATE TABLE record (Event_ID NUMBER, Swimmer_ID NUMBER);"
      },
      {
        "question": "Show me the countries which has any of those stadiums.",
        "query": "SELECT country FROM stadium WHERE opening_year > 2006",
        "schema": "CREATE TABLE stadium (Opening_year NUMBER, Country TEXT, ID NUMBER, name TEXT); CREATE TABLE swimmer (name TEXT, ID NUMBER); CREATE TABLE event (Name TEXT, ID NUMBER, Stadium_ID NUMBER); CREATE TABLE record (Event_ID NUMBER, Swimmer_ID NUMBER);"
      },
      {
        "question": "What about the countries in file that are not among them.",
        "query": "SELECT country FROM stadium EXCEPT SELECT country FROM stadium WHERE opening_year > 2006",
        "schema": "CREATE TABLE swimmer (ID NUMBER, name TEXT); CREATE TABLE record (Event_ID NUMBER, Swimmer_ID NUMBER); CREATE TABLE stadium (Opening_year NUMBER, ID NUMBER, Country TEXT, name TEXT); CREATE TABLE event (Name TEXT, ID NUMBER, Stadium_ID NUMBER);"
      }
    ],
    [
      {
        "question": "How many swimmers are there in record?",
        "query": "SELECT count(*) FROM swimmer",
        "schema": "CREATE TABLE event (ID NUMBER); CREATE TABLE swimmer (ID NUMBER, name TEXT); CREATE TABLE record (Swimmer_ID NUMBER, ID NUMBER);"
      },
      {
        "question": "What about in terms of nationality?",
        "query": "SELECT nationality , count(*) FROM swimmer GROUP BY nationality",
        "schema": "CREATE TABLE event (ID NUMBER); CREATE TABLE swimmer (Nationality TEXT, ID NUMBER, name TEXT); CREATE TABLE record (ID NUMBER, Swimmer_ID NUMBER);"
      },
      {
        "question": "Show me the countries with more than one.",
        "query": "SELECT nationality , count(*) FROM swimmer GROUP BY nationality HAVING count(*) > 1",
        "schema": "CREATE TABLE record (ID NUMBER, Swimmer_ID NUMBER); CREATE TABLE swimmer (ID NUMBER, name TEXT, Nationality TEXT); CREATE TABLE event (ID NUMBER);"
      }
    ],
    [
      {
        "question": "How many swimming records are there?",
        "query": "SELECT count(*) FROM record",
        "schema": "CREATE TABLE record (Swimmer_ID NUMBER, ID NUMBER, Event_ID NUMBER); CREATE TABLE swimmer (ID NUMBER, name TEXT); CREATE TABLE event (ID NUMBER);"
      },
      {
        "question": "How many of them have a result of win?",
        "query": "SELECT count(*) FROM record WHERE RESULT = 'Win'",
        "schema": "CREATE TABLE event (ID NUMBER); CREATE TABLE record (Swimmer_ID NUMBER, ID NUMBER, Result TEXT, Event_ID NUMBER); CREATE TABLE swimmer (name TEXT, ID NUMBER);"
      },
      {
        "question": "Show me the swimmer ids in those records.",
        "query": "SELECT swimmer_id FROM record WHERE RESULT = 'Win'",
        "schema": "CREATE TABLE record (Result TEXT, Event_ID NUMBER, ID NUMBER, Swimmer_ID NUMBER); CREATE TABLE event (ID NUMBER); CREATE TABLE swimmer (name TEXT, ID NUMBER);"
      },
      {
        "question": "What are their names?",
        "query": "SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id WHERE RESULT = 'Win'",
        "schema": "CREATE TABLE event (Name TEXT, ID NUMBER); CREATE TABLE swimmer (ID NUMBER, name TEXT); CREATE TABLE record (Event_ID NUMBER, Swimmer_ID NUMBER, Result TEXT, ID NUMBER);"
      }
    ],
    [
      {
        "question": "How many events are there?",
        "query": "SELECT count(*) FROM event",
        "schema": "CREATE TABLE record (Event_ID NUMBER, Swimmer_ID NUMBER); CREATE TABLE event (Stadium_ID NUMBER, Name TEXT, ID NUMBER); CREATE TABLE stadium (ID NUMBER); CREATE TABLE swimmer (name TEXT, ID NUMBER);"
      },
      {
        "question": "What about in terms of stadiums?",
        "query": "SELECT stadium_id,count(*) FROM event GROUP BY stadium_id",
        "schema": "CREATE TABLE stadium (name TEXT, ID NUMBER, Capacity NUMBER); CREATE TABLE record (Swimmer_ID NUMBER, Event_ID NUMBER); CREATE TABLE event (Stadium_ID NUMBER, ID NUMBER, Name TEXT); CREATE TABLE swimmer (name TEXT, ID NUMBER);"
      },
      {
        "question": "Give me the name of the one that held the most of them.",
        "query": "SELECT t1.name FROM stadium AS t1 JOIN event AS t2 ON t1.id = t2.stadium_id GROUP BY t2.stadium_id ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE swimmer (name TEXT, ID NUMBER); CREATE TABLE event (Name TEXT, Stadium_ID NUMBER, ID NUMBER); CREATE TABLE record (Event_ID NUMBER, Swimmer_ID NUMBER); CREATE TABLE stadium (name TEXT, ID NUMBER, Capacity NUMBER);"
      }
    ],
    [
      {
        "question": "How many events are there?",
        "query": "SELECT count(*) FROM event",
        "schema": "CREATE TABLE stadium (ID NUMBER); CREATE TABLE record (Event_ID NUMBER, Swimmer_ID NUMBER); CREATE TABLE event (Stadium_ID NUMBER, ID NUMBER, Name TEXT); CREATE TABLE swimmer (name TEXT, ID NUMBER);"
      },
      {
        "question": "What are their names?",
        "query": "SELECT name FROM event",
        "schema": "CREATE TABLE stadium (ID NUMBER); CREATE TABLE swimmer (ID NUMBER, name TEXT); CREATE TABLE record (Event_ID NUMBER, Swimmer_ID NUMBER); CREATE TABLE event (ID NUMBER, Stadium_ID NUMBER, Name TEXT);"
      },
      {
        "question": "Show me the name of the stadium that held World Junior event.",
        "query": "SELECT t1.name , t1.capacity FROM stadium AS t1 JOIN event AS t2 ON t1.id = t2.stadium_id WHERE t2.name = 'World Junior'",
        "schema": "CREATE TABLE event (ID NUMBER, Name TEXT, Stadium_ID NUMBER); CREATE TABLE stadium (Capacity NUMBER, name TEXT, ID NUMBER); CREATE TABLE record (Swimmer_ID NUMBER, Event_ID NUMBER); CREATE TABLE swimmer (ID NUMBER, name TEXT);"
      }
    ],
    [
      {
        "question": "How many events are there?",
        "query": "SELECT count(*) FROM event",
        "schema": "CREATE TABLE event (Name TEXT, Stadium_ID NUMBER, ID NUMBER); CREATE TABLE record (Event_ID NUMBER, Swimmer_ID NUMBER); CREATE TABLE stadium (ID NUMBER); CREATE TABLE swimmer (ID NUMBER, name TEXT);"
      },
      {
        "question": "Give me the id of stadiums that have held any of them.",
        "query": "SELECT stadium_id FROM event",
        "schema": "CREATE TABLE record (Swimmer_ID NUMBER, Event_ID NUMBER, ID NUMBER); CREATE TABLE swimmer (name TEXT, ID NUMBER); CREATE TABLE event (ID NUMBER, Name TEXT, Stadium_ID NUMBER); CREATE TABLE stadium (ID NUMBER, name TEXT);"
      },
      {
        "question": "What about the stadium ids in file that are not among those?",
        "query": "SELECT id FROM stadium WHERE id NOT IN (SELECT stadium_id FROM event)",
        "schema": "CREATE TABLE event (Name TEXT, Stadium_ID NUMBER, ID NUMBER); CREATE TABLE record (Event_ID NUMBER, ID NUMBER, Swimmer_ID NUMBER); CREATE TABLE stadium (name TEXT, ID NUMBER); CREATE TABLE swimmer (name TEXT, ID NUMBER);"
      },
      {
        "question": "Show me their names.",
        "query": "SELECT name FROM stadium WHERE id NOT IN (SELECT stadium_id FROM event)",
        "schema": "CREATE TABLE swimmer (name TEXT, ID NUMBER); CREATE TABLE event (ID NUMBER, Stadium_ID NUMBER, Name TEXT); CREATE TABLE stadium (ID NUMBER, name TEXT); CREATE TABLE record (Swimmer_ID NUMBER, ID NUMBER, Event_ID NUMBER);"
      }
    ],
    [
      {
        "question": "How many swimming records are there in the system?",
        "query": "SELECT count(*) FROM record",
        "schema": "CREATE TABLE record (Swimmer_ID NUMBER, Event_ID NUMBER, ID NUMBER); CREATE TABLE event (ID NUMBER); CREATE TABLE swimmer (ID NUMBER);"
      },
      {
        "question": "What about that in terms of swimmer ids?",
        "query": "SELECT swimmer_id, count(*) FROM record GROUP BY swimmer_id",
        "schema": "CREATE TABLE record (Swimmer_ID NUMBER, ID NUMBER, Event_ID NUMBER); CREATE TABLE swimmer (name TEXT, ID NUMBER); CREATE TABLE event (ID NUMBER);"
      },
      {
        "question": "Show me the one with the most of them.",
        "query": "SELECT swimmer_id FROM record GROUP BY swimmer_id ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE record (Event_ID NUMBER, Swimmer_ID NUMBER, ID NUMBER); CREATE TABLE event (ID NUMBER); CREATE TABLE swimmer (ID NUMBER, name TEXT);"
      },
      {
        "question": "Give me that swimmer's name.",
        "query": "SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id GROUP BY t2.swimmer_id ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE record (ID NUMBER, Swimmer_ID NUMBER, Event_ID NUMBER); CREATE TABLE swimmer (name TEXT, ID NUMBER); CREATE TABLE event (ID NUMBER);"
      }
    ],
    [
      {
        "question": "How many swimming records are there in the system?",
        "query": "SELECT count(*) FROM record",
        "schema": "CREATE TABLE record (Event_ID NUMBER, ID NUMBER, Swimmer_ID NUMBER); CREATE TABLE swimmer (ID NUMBER); CREATE TABLE event (ID NUMBER);"
      },
      {
        "question": "What about that in terms of swimmer ids?",
        "query": "SELECT swimmer_id, count(*) FROM record GROUP BY swimmer_id",
        "schema": "CREATE TABLE event (ID NUMBER); CREATE TABLE swimmer (ID NUMBER, name TEXT); CREATE TABLE record (Swimmer_ID NUMBER, Event_ID NUMBER, ID NUMBER);"
      },
      {
        "question": "Show me those with at least two.",
        "query": "SELECT swimmer_id FROM record GROUP BY swimmer_id HAVING count(*) >= 2",
        "schema": "CREATE TABLE event (ID NUMBER); CREATE TABLE record (Event_ID NUMBER, Swimmer_ID NUMBER, ID NUMBER); CREATE TABLE swimmer (ID NUMBER, name TEXT);"
      },
      {
        "question": "What about their names?",
        "query": "SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id GROUP BY t2.swimmer_id HAVING count(*) >= 2",
        "schema": "CREATE TABLE record (Swimmer_ID NUMBER, ID NUMBER, Event_ID NUMBER); CREATE TABLE swimmer (name TEXT, ID NUMBER); CREATE TABLE event (ID NUMBER, Name TEXT);"
      }
    ],
    [
      {
        "question": "How many swimming records are there in the system?",
        "query": "SELECT count(*) FROM record",
        "schema": "CREATE TABLE event (ID NUMBER); CREATE TABLE swimmer (ID NUMBER); CREATE TABLE record (Swimmer_ID NUMBER, ID NUMBER, Event_ID NUMBER);"
      },
      {
        "question": "What about swimming records of a result Win?",
        "query": "SELECT count(*) FROM record WHERE RESULT = 'Win'",
        "schema": "CREATE TABLE event (ID NUMBER); CREATE TABLE record (Result TEXT, ID NUMBER, Event_ID NUMBER, Swimmer_ID NUMBER); CREATE TABLE swimmer (ID NUMBER);"
      },
      {
        "question": "What about in terms of swimmer ids?",
        "query": "SELECT swimmer_id, count(*) FROM record WHERE RESULT = 'Win' GROUP BY swimmer_id",
        "schema": "CREATE TABLE event (ID NUMBER); CREATE TABLE swimmer (ID NUMBER); CREATE TABLE record (ID NUMBER, Result TEXT, Event_ID NUMBER, Swimmer_ID NUMBER);"
      },
      {
        "question": "Show me those with more than one.",
        "query": "SELECT swimmer_id FROM record WHERE RESULT = 'Win' GROUP BY swimmer_id HAVING count(*) > 1",
        "schema": "CREATE TABLE record (ID NUMBER, Swimmer_ID NUMBER, Result TEXT, Event_ID NUMBER); CREATE TABLE event (ID NUMBER); CREATE TABLE swimmer (ID NUMBER);"
      },
      {
        "question": "Show me their names and nationalities.",
        "query": "SELECT t1.name , t1.nationality FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id WHERE RESULT = 'Win' GROUP BY t2.swimmer_id HAVING count(*) > 1",
        "schema": "CREATE TABLE swimmer (name TEXT, Nationality TEXT, ID NUMBER); CREATE TABLE record (ID NUMBER, Event_ID NUMBER, Result TEXT, Swimmer_ID NUMBER); CREATE TABLE event (ID NUMBER);"
      }
    ],
    [
      {
        "question": "How many swimming records are there?",
        "query": "SELECT count(*) FROM record",
        "schema": "CREATE TABLE event (ID NUMBER); CREATE TABLE record (ID NUMBER, Swimmer_ID NUMBER, Event_ID NUMBER); CREATE TABLE swimmer (ID NUMBER, name TEXT);"
      },
      {
        "question": "Show me the swimmer ids associated with any of those record.",
        "query": "SELECT DISTINCT swimmer_id FROM record",
        "schema": "CREATE TABLE swimmer (name TEXT, ID NUMBER); CREATE TABLE record (Swimmer_ID NUMBER, ID NUMBER, Event_ID NUMBER); CREATE TABLE event (ID NUMBER);"
      },
      {
        "question": "What about the swimmer ids that are not one of those?",
        "query": "SELECT id FROM swimmer WHERE id NOT IN (SELECT swimmer_id FROM record)",
        "schema": "CREATE TABLE event (ID NUMBER); CREATE TABLE swimmer (ID NUMBER, name TEXT); CREATE TABLE record (ID NUMBER, Event_ID NUMBER, Swimmer_ID NUMBER);"
      },
      {
        "question": "Show me those swimmers' names.",
        "query": "SELECT name FROM swimmer WHERE id NOT IN (SELECT swimmer_id FROM record)",
        "schema": "CREATE TABLE event (ID NUMBER); CREATE TABLE swimmer (name TEXT, ID NUMBER); CREATE TABLE record (Swimmer_ID NUMBER, ID NUMBER, Event_ID NUMBER);"
      }
    ],
    [
      {
        "question": "How many swimming records are there?",
        "query": "SELECT count(*) FROM record",
        "schema": "CREATE TABLE swimmer (ID NUMBER, name TEXT); CREATE TABLE record (Event_ID NUMBER, ID NUMBER, Swimmer_ID NUMBER); CREATE TABLE event (ID NUMBER);"
      },
      {
        "question": "What about records that have results \"Win\"?",
        "query": "SELECT count(*) FROM record WHERE RESULT = 'Win'",
        "schema": "CREATE TABLE record (Swimmer_ID NUMBER, ID NUMBER, Event_ID NUMBER, Result TEXT); CREATE TABLE event (ID NUMBER); CREATE TABLE swimmer (name TEXT, ID NUMBER);"
      },
      {
        "question": "Show me the name of the swimmers who have any of those records.",
        "query": "SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id WHERE RESULT = 'Win'",
        "schema": "CREATE TABLE record (Result TEXT, ID NUMBER, Swimmer_ID NUMBER, Event_ID NUMBER); CREATE TABLE swimmer (name TEXT, ID NUMBER); CREATE TABLE event (ID NUMBER);"
      },
      {
        "question": "Among those swimmers, who also have any records with results \"Loss\"?",
        "query": "SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id WHERE RESULT = 'Win' INTERSECT SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id WHERE RESULT = 'Loss'",
        "schema": "CREATE TABLE swimmer (name TEXT, ID NUMBER); CREATE TABLE event (ID NUMBER); CREATE TABLE record (Swimmer_ID NUMBER, ID NUMBER, Event_ID NUMBER, Result TEXT);"
      }
    ],
    [
      {
        "question": "How many stadiums are there?",
        "query": "SELECT count(*) FROM stadium",
        "schema": "CREATE TABLE record (ID NUMBER, Event_ID NUMBER, Swimmer_ID NUMBER); CREATE TABLE swimmer (name TEXT, ID NUMBER); CREATE TABLE stadium (ID NUMBER, name TEXT, Capacity NUMBER, City TEXT); CREATE TABLE event (Stadium_ID NUMBER, ID NUMBER);"
      },
      {
        "question": "How many Australian swimmers are there in the record?",
        "query": "SELECT count(*) FROM swimmer WHERE nationality = 'Australian'",
        "schema": "CREATE TABLE record (Swimmer_ID NUMBER, ID NUMBER, Event_ID NUMBER); CREATE TABLE event (Stadium_ID NUMBER, ID NUMBER); CREATE TABLE swimmer (name TEXT, Nationality TEXT, ID NUMBER); CREATE TABLE stadium (Country TEXT, ID NUMBER, City TEXT, name TEXT, Capacity NUMBER);"
      },
      {
        "question": "Show me the stadiums any of those swimmers have been to.",
        "query": "SELECT t4.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id JOIN event AS t3 ON t2.event_id = t3.id JOIN stadium AS t4 ON t4.id = t3.stadium_id WHERE t1.nationality = 'Australia'",
        "schema": "CREATE TABLE swimmer (name TEXT, Nationality TEXT, ID NUMBER); CREATE TABLE event (ID NUMBER, Stadium_ID NUMBER, Name TEXT); CREATE TABLE record (Event_ID NUMBER, Swimmer_ID NUMBER, ID NUMBER); CREATE TABLE stadium (Country TEXT, City TEXT, name TEXT, Capacity NUMBER, ID NUMBER);"
      }
    ]
  ],
  "manufacturer": [
    [
      {
        "question": "What is the average market rate for furniture?",
        "query": "SELECT avg(market_rate) FROM furniture",
        "schema": "CREATE TABLE furniture_manufacte (Price_in_Dollar NUMBER, Furniture_ID NUMBER); CREATE TABLE furniture (Market_Rate NUMBER, Furniture_ID NUMBER, Name TEXT);"
      },
      {
        "question": "Show each furniture id number and its corresponding market_rate.",
        "query": "SELECT furniture_id, market_rate FROM furniture",
        "schema": "CREATE TABLE furniture (Furniture_ID NUMBER, Market_Rate NUMBER, Name TEXT); CREATE TABLE manufacturer (Manufacturer_ID NUMBER); CREATE TABLE furniture_manufacte (Furniture_ID NUMBER, Price_in_Dollar NUMBER, Manufacturer_ID NUMBER);"
      },
      {
        "question": "Which one has the lowest market_rate?",
        "query": "SELECT furniture_id, market_rate FROM furniture ORDER BY market_rate LIMIT 1",
        "schema": "CREATE TABLE furniture (Name TEXT, Furniture_ID NUMBER, Market_Rate NUMBER); CREATE TABLE furniture_manufacte (Furniture_ID NUMBER, Price_in_Dollar NUMBER, Manufacturer_ID NUMBER); CREATE TABLE manufacturer (Manufacturer_ID NUMBER);"
      },
      {
        "question": "Which one has the highest?",
        "query": "SELECT furniture_id, market_rate FROM furniture ORDER BY market_rate DESC LIMIT 1",
        "schema": "CREATE TABLE furniture (Market_Rate NUMBER, Furniture_ID NUMBER, Name TEXT); CREATE TABLE furniture_manufacte (Manufacturer_ID NUMBER, Price_in_Dollar NUMBER, Furniture_ID NUMBER); CREATE TABLE manufacturer (Manufacturer_ID NUMBER);"
      },
      {
        "question": "Also show its name.",
        "query": "SELECT name , furniture_id FROM furniture ORDER BY market_rate DESC LIMIT 1",
        "schema": "CREATE TABLE furniture_manufacte (Price_in_Dollar NUMBER, Furniture_ID NUMBER, Manufacturer_ID NUMBER); CREATE TABLE manufacturer (Name TEXT, Manufacturer_ID NUMBER); CREATE TABLE furniture (Market_Rate NUMBER, Furniture_ID NUMBER, Name TEXT);"
      }
    ],
    [
      {
        "question": "What are the names of the 5 furniture items with the highest market rates?",
        "query": "SELECT name FROM furniture ORDER BY market_rate DESC LIMIT 5",
        "schema": "CREATE TABLE furniture (Furniture_ID NUMBER, Name TEXT, Market_Rate NUMBER); CREATE TABLE furniture_manufacte (Furniture_ID NUMBER);"
      },
      {
        "question": "How about the top 2?",
        "query": "SELECT name FROM furniture ORDER BY market_rate DESC LIMIT 2",
        "schema": "CREATE TABLE furniture_manufacte (Furniture_ID NUMBER); CREATE TABLE furniture (Name TEXT, Market_Rate NUMBER, Furniture_ID NUMBER);"
      },
      {
        "question": "What are their market rates?",
        "query": "SELECT name, market_rate FROM furniture ORDER BY market_rate DESC LIMIT 2",
        "schema": "CREATE TABLE furniture (Market_Rate NUMBER, Furniture_ID NUMBER, Name TEXT); CREATE TABLE furniture_manufacte (Furniture_ID NUMBER);"
      },
      {
        "question": "How about the sum?",
        "query": "SELECT sum(market_rate) FROM furniture ORDER BY market_rate DESC LIMIT 2",
        "schema": "CREATE TABLE furniture_manufacte (Furniture_ID NUMBER); CREATE TABLE furniture (Market_Rate NUMBER, Furniture_ID NUMBER, Name TEXT);"
      }
    ],
    [
      {
        "question": "Show all information for the lowest market-rate furniture item.",
        "query": "SELECT * FROM furniture ORDER BY market_rate LIMIT 1",
        "schema": "CREATE TABLE furniture_manufacte (Furniture_ID NUMBER, Price_in_Dollar NUMBER); CREATE TABLE furniture (Name TEXT, Furniture_ID NUMBER, Market_Rate NUMBER); CREATE TABLE manufacturer (Manufacturer_ID NUMBER);"
      },
      {
        "question": "What is its id number?",
        "query": "SELECT furniture_id FROM furniture ORDER BY market_rate LIMIT 1",
        "schema": "CREATE TABLE manufacturer (Manufacturer_ID NUMBER); CREATE TABLE furniture (Name TEXT, Market_Rate NUMBER, Furniture_ID NUMBER); CREATE TABLE furniture_manufacte (Price_in_Dollar NUMBER, Furniture_ID NUMBER, Manufacturer_ID NUMBER);"
      },
      {
        "question": "How many components does it have?",
        "query": "SELECT num_of_component FROM furniture ORDER BY market_rate LIMIT 1",
        "schema": "CREATE TABLE furniture_manufacte (Price_in_Dollar NUMBER, Furniture_ID NUMBER, Manufacturer_ID NUMBER); CREATE TABLE furniture (Name TEXT, Num_of_Component NUMBER, Market_Rate NUMBER, Furniture_ID NUMBER); CREATE TABLE manufacturer (Manufacturer_ID NUMBER);"
      },
      {
        "question": "Also show its name.",
        "query": "SELECT name , num_of_component FROM furniture ORDER BY market_rate LIMIT 1",
        "schema": "CREATE TABLE furniture (Num_of_Component NUMBER, Name TEXT, Furniture_ID NUMBER, Market_Rate NUMBER); CREATE TABLE furniture_manufacte (Price_in_Dollar NUMBER, Manufacturer_ID NUMBER, Furniture_ID NUMBER); CREATE TABLE manufacturer (Name TEXT, Manufacturer_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What is the highest dollar price among the furniture?",
        "query": "SELECT max(price_in_dollar) FROM furniture_manufacte",
        "schema": "CREATE TABLE manufacturer (Manufacturer_ID NUMBER); CREATE TABLE furniture_manufacte (Manufacturer_ID NUMBER, Furniture_ID NUMBER, Price_in_Dollar NUMBER); CREATE TABLE furniture (Furniture_ID NUMBER);"
      },
      {
        "question": "Show manufacture information for items with a lower price than this.",
        "query": "SELECT * FROM furniture_manufacte WHERE price_in_dollar < (SELECT max(price_in_dollar) FROM furniture_manufacte)",
        "schema": "CREATE TABLE manufacturer (Name TEXT, Manufacturer_ID NUMBER); CREATE TABLE furniture (Furniture_ID NUMBER); CREATE TABLE furniture_manufacte (Price_in_Dollar NUMBER, Furniture_ID NUMBER, Manufacturer_ID NUMBER);"
      },
      {
        "question": "Show only their furniture_id numbers.",
        "query": "SELECT furniture_id FROM furniture_manufacte WHERE price_in_dollar < (SELECT max(price_in_dollar) FROM furniture_manufacte)",
        "schema": "CREATE TABLE manufacturer (Manufacturer_ID NUMBER, Name TEXT); CREATE TABLE furniture_manufacte (Furniture_ID NUMBER, Manufacturer_ID NUMBER, Price_in_Dollar NUMBER); CREATE TABLE furniture (Furniture_ID NUMBER);"
      },
      {
        "question": "What are the names of these items?",
        "query": "SELECT t1.name FROM furniture AS t1 JOIN furniture_manufacte AS t2 ON t1.furniture_id = t2.furniture_id WHERE t2.price_in_dollar < (SELECT max(price_in_dollar) FROM furniture_manufacte)",
        "schema": "CREATE TABLE manufacturer (Name TEXT, Manufacturer_ID NUMBER); CREATE TABLE furniture_manufacte (Furniture_ID NUMBER, Manufacturer_ID NUMBER, Price_in_Dollar NUMBER); CREATE TABLE furniture (Name TEXT, Furniture_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What is the average number of shops for manufacturers?",
        "query": "SELECT avg(num_of_shops) FROM manufacturer",
        "schema": "CREATE TABLE manufacturer (Num_of_Factories NUMBER, Name TEXT, Num_of_Shops NUMBER, Manufacturer_ID NUMBER); CREATE TABLE furniture_manufacte (Manufacturer_ID NUMBER);"
      },
      {
        "question": "How about the minimum?",
        "query": "SELECT min(num_of_shops) FROM manufacturer",
        "schema": "CREATE TABLE furniture_manufacte (Manufacturer_ID NUMBER); CREATE TABLE manufacturer (Num_of_Factories NUMBER, Manufacturer_ID NUMBER, Num_of_Shops NUMBER, Name TEXT);"
      },
      {
        "question": "Which manufacturer has the fewest shops?",
        "query": "SELECT * FROM manufacturer ORDER BY num_of_shops DESC LIMIT 1",
        "schema": "CREATE TABLE furniture_manufacte (Manufacturer_ID NUMBER); CREATE TABLE manufacturer (Manufacturer_ID NUMBER, Name TEXT, Num_of_Factories NUMBER, Num_of_Shops NUMBER);"
      },
      {
        "question": "Only show the year it opened and the name of the manufacturer.",
        "query": "SELECT open_year , name FROM manufacturer ORDER BY num_of_shops DESC LIMIT 1",
        "schema": "CREATE TABLE manufacturer (Num_of_Factories NUMBER, Name TEXT, Num_of_Shops NUMBER, Open_Year NUMBER, Manufacturer_ID NUMBER); CREATE TABLE furniture_manufacte (Manufacturer_ID NUMBER);"
      }
    ],
    [
      {
        "question": "How many different manufacturers are there?",
        "query": "SELECT count(*) FROM manufacturer",
        "schema": "CREATE TABLE manufacturer (Num_of_Shops NUMBER, Name TEXT, Manufacturer_ID NUMBER, Num_of_Factories NUMBER); CREATE TABLE furniture_manufacte (Manufacturer_ID NUMBER, Furniture_ID NUMBER); CREATE TABLE furniture (Furniture_ID NUMBER);"
      },
      {
        "question": "How many of them have fewer than 10 factories?",
        "query": "SELECT count(*) FROM manufacturer WHERE num_of_shops < 10",
        "schema": "CREATE TABLE manufacturer (Manufacturer_ID NUMBER, Num_of_Factories NUMBER, Num_of_Shops NUMBER, Name TEXT); CREATE TABLE furniture_manufacte (Furniture_ID NUMBER, Manufacturer_ID NUMBER); CREATE TABLE furniture (Furniture_ID NUMBER);"
      },
      {
        "question": "Show their names and the years they opened.",
        "query": "SELECT name, open_year FROM manufacturer WHERE num_of_shops < 10",
        "schema": "CREATE TABLE furniture_manufacte (Furniture_ID NUMBER, Manufacturer_ID NUMBER); CREATE TABLE furniture (Furniture_ID NUMBER); CREATE TABLE manufacturer (Name TEXT, Manufacturer_ID NUMBER, Num_of_Shops NUMBER, Open_Year NUMBER, Num_of_Factories NUMBER);"
      },
      {
        "question": "Also include those that have more than 10 shops.",
        "query": "SELECT name, open_year FROM manufacturer WHERE num_of_shops < 10 OR num_of_shops > 10",
        "schema": "CREATE TABLE furniture (Furniture_ID NUMBER); CREATE TABLE manufacturer (Name TEXT, Manufacturer_ID NUMBER, Num_of_Factories NUMBER, Open_Year NUMBER, Num_of_Shops NUMBER); CREATE TABLE furniture_manufacte (Manufacturer_ID NUMBER, Furniture_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show information for manufacturers that opened on or after 1990.",
        "query": "SELECT * FROM manufacturer WHERE open_year >= 1990",
        "schema": "CREATE TABLE manufacturer (Open_Year NUMBER, Manufacturer_ID NUMBER, Num_of_Factories NUMBER, Num_of_Shops NUMBER, Name TEXT);"
      },
      {
        "question": "How about before 1990?",
        "query": "SELECT * FROM manufacturer WHERE open_year < 1990",
        "schema": "CREATE TABLE manufacturer (Num_of_Factories NUMBER, Num_of_Shops NUMBER, Manufacturer_ID NUMBER, Name TEXT, Open_Year NUMBER);"
      },
      {
        "question": "What is the maximim number of shops among these manufacturers?",
        "query": "SELECT max(num_of_shops) FROM manufacturer WHERE open_year < 1990",
        "schema": "CREATE TABLE manufacturer (Num_of_Factories NUMBER, Open_Year NUMBER, Name TEXT, Num_of_Shops NUMBER, Manufacturer_ID NUMBER);"
      },
      {
        "question": "Also show the average number of factories for this group.",
        "query": "SELECT max(num_of_shops) , avg(num_of_factories) FROM manufacturer WHERE open_year < 1990",
        "schema": "CREATE TABLE manufacturer (Manufacturer_ID NUMBER, Num_of_Shops NUMBER, Open_Year NUMBER, Name TEXT, Num_of_Factories NUMBER);"
      }
    ],
    [
      {
        "question": "What is the furniture id number of the most expensive furniture?",
        "query": "SELECT furniture_id FROM furniture_manufacte ORDER BY price_in_dollar DESC 1",
        "schema": "CREATE TABLE furniture (Name TEXT, Furniture_ID NUMBER); CREATE TABLE furniture_manufacte (Price_in_Dollar NUMBER, Furniture_ID NUMBER, Manufacturer_ID NUMBER); CREATE TABLE manufacturer (Manufacturer_ID NUMBER);"
      },
      {
        "question": "How about the manufacturer number?",
        "query": "SELECT manufacturer_id FROM furniture_manufacte ORDER BY price_in_dollar DESC 1",
        "schema": "CREATE TABLE furniture (Furniture_ID NUMBER, Name TEXT); CREATE TABLE furniture_manufacte (Furniture_ID NUMBER, Price_in_Dollar NUMBER, Manufacturer_ID NUMBER); CREATE TABLE manufacturer (Manufacturer_ID NUMBER, Name TEXT);"
      },
      {
        "question": "What is the name of the manufacturer?",
        "query": "SELECT t1.manufacturer_id FROM manufacturer AS t1 JOIN furniture_manufacte AS t2 ON t1.manufacturer_id = t2.manufacturer_id ORDER BY t2.price_in_dollar DESC LIMIT 1",
        "schema": "CREATE TABLE furniture (Furniture_ID NUMBER, Name TEXT); CREATE TABLE manufacturer (Num_of_Factories NUMBER, Name TEXT, Manufacturer_ID NUMBER); CREATE TABLE furniture_manufacte (Price_in_Dollar NUMBER, Manufacturer_ID NUMBER, Furniture_ID NUMBER);"
      },
      {
        "question": "Also show how many shops they have.",
        "query": "SELECT t1.manufacturer_id , t1.num_of_shops FROM manufacturer AS t1 JOIN furniture_manufacte AS t2 ON t1.manufacturer_id = t2.manufacturer_id ORDER BY t2.price_in_dollar DESC LIMIT 1",
        "schema": "CREATE TABLE furniture_manufacte (Furniture_ID NUMBER, Price_in_Dollar NUMBER, Manufacturer_ID NUMBER); CREATE TABLE manufacturer (Num_of_Shops NUMBER, Name TEXT, Num_of_Factories NUMBER, Manufacturer_ID NUMBER); CREATE TABLE furniture (Name TEXT, Furniture_ID NUMBER);"
      }
    ],
    [
      {
        "question": "How many distinct manufacturers are there?",
        "query": "SELECT count(DISTINCT manufacturer_id) FROM manufacturer",
        "schema": "CREATE TABLE furniture_manufacte (Manufacturer_ID NUMBER, Furniture_ID NUMBER); CREATE TABLE furniture (Furniture_ID NUMBER); CREATE TABLE manufacturer (Num_of_Shops NUMBER, Num_of_Factories NUMBER, Name TEXT, Manufacturer_ID NUMBER);"
      },
      {
        "question": "How many produce furniture?",
        "query": "SELECT count(DISTINCT t1.manufacturer_id) FROM manufacturer AS t1 JOIN furniture_manufacte AS t2 ON t1.manufacturer_id = t2.manufacturer_id",
        "schema": "CREATE TABLE manufacturer (Num_of_Factories NUMBER, Manufacturer_ID NUMBER, Num_of_Shops NUMBER, Name TEXT); CREATE TABLE furniture_manufacte (Manufacturer_ID NUMBER, Furniture_ID NUMBER); CREATE TABLE furniture (Furniture_ID NUMBER);"
      },
      {
        "question": "What are their names?",
        "query": "SELECT DISTINCT t1.name FROM manufacturer AS t1 JOIN furniture_manufacte AS t2 ON t1.manufacturer_id = t2.manufacturer_id",
        "schema": "CREATE TABLE furniture_manufacte (Manufacturer_ID NUMBER, Furniture_ID NUMBER); CREATE TABLE manufacturer (Num_of_Shops NUMBER, Manufacturer_ID NUMBER, Num_of_Factories NUMBER, Name TEXT); CREATE TABLE furniture (Name TEXT, Furniture_ID NUMBER);"
      },
      {
        "question": "Also show how many furniture types each manufacturer produces.",
        "query": "SELECT count(*) , t1.name FROM manufacturer AS t1 JOIN furniture_manufacte AS t2 ON t1.manufacturer_id = t2.manufacturer_id GROUP BY t1.manufacturer_id",
        "schema": "CREATE TABLE manufacturer (Manufacturer_ID NUMBER, Name TEXT, Num_of_Factories NUMBER, Num_of_Shops NUMBER); CREATE TABLE furniture (Name TEXT, Furniture_ID NUMBER); CREATE TABLE furniture_manufacte (Furniture_ID NUMBER, Manufacturer_ID NUMBER);"
      }
    ],
    [
      {
        "question": "How many different furniture items are there?",
        "query": "SELECT count(DISTINCT furniture_id) FROM furniture",
        "schema": "CREATE TABLE furniture (Name TEXT, Furniture_ID NUMBER); CREATE TABLE furniture_manufacte (Manufacturer_ID NUMBER, Furniture_ID NUMBER); CREATE TABLE manufacturer (Manufacturer_ID NUMBER);"
      },
      {
        "question": "How many are sold by manufacturers in our records?",
        "query": "SELECT count(DISTINCT furniture_id) FROM furniture WHERE furniture_id IN (SELECT furniture_id FROM furniture_manufacte)",
        "schema": "CREATE TABLE furniture (Name TEXT, Furniture_ID NUMBER); CREATE TABLE manufacturer (Name TEXT, Manufacturer_ID NUMBER); CREATE TABLE furniture_manufacte (Manufacturer_ID NUMBER, Furniture_ID NUMBER, Price_in_Dollar NUMBER);"
      },
      {
        "question": "Which furniture names are not in our records?",
        "query": "SELECT name FROM furniture WHERE furniture_id NOT IN (SELECT furniture_id FROM furniture_manufacte)",
        "schema": "CREATE TABLE furniture (Name TEXT, Furniture_ID NUMBER); CREATE TABLE manufacturer (Name TEXT, Manufacturer_ID NUMBER); CREATE TABLE furniture_manufacte (Manufacturer_ID NUMBER, Price_in_Dollar NUMBER, Furniture_ID NUMBER);"
      },
      {
        "question": "Also show their market rates.",
        "query": "SELECT market_rate, name FROM furniture WHERE furniture_id NOT IN (SELECT furniture_id FROM furniture_manufacte)",
        "schema": "CREATE TABLE furniture_manufacte (Manufacturer_ID NUMBER, Furniture_ID NUMBER, Price_in_Dollar NUMBER); CREATE TABLE furniture (Market_Rate NUMBER, Furniture_ID NUMBER, Name TEXT); CREATE TABLE manufacturer (Name TEXT, Manufacturer_ID NUMBER);"
      }
    ]
  ],
  "school_bus": [
    [
      {
        "question": "How many drivers are there?",
        "query": "SELECT count(*) FROM driver",
        "schema": "CREATE TABLE driver (Name TEXT, Party TEXT, Driver_ID NUMBER, Age NUMBER); CREATE TABLE school_bus (Driver_ID NUMBER);"
      },
      {
        "question": "How many drivers does each city have?",
        "query": "SELECT home_city, count(*) FROM driver GROUP BY home_city",
        "schema": "CREATE TABLE driver (Party TEXT, Driver_ID NUMBER, Age NUMBER, Name TEXT, Home_city TEXT); CREATE TABLE school_bus (Driver_ID NUMBER);"
      },
      {
        "question": "Which city has the most drivers?",
        "query": "SELECT home_city FROM driver GROUP BY home_city ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE driver (Name TEXT, Party TEXT, Driver_ID NUMBER, Home_city TEXT, Age NUMBER); CREATE TABLE school_bus (Driver_ID NUMBER);"
      }
    ],
    [
      {
        "question": "How many different parties are there?",
        "query": "SELECT count(DISTINCT party) FROM driver",
        "schema": "CREATE TABLE school (School_ID NUMBER); CREATE TABLE driver (Party TEXT, Name TEXT, Driver_ID NUMBER);"
      },
      {
        "question": "How many drivers are from Hartford?",
        "query": "SELECT count(*) FROM driver WHERE home_city = 'Hartford'",
        "schema": "CREATE TABLE school (School_ID NUMBER); CREATE TABLE driver (Party TEXT, Name TEXT, Driver_ID NUMBER, Home_city TEXT);"
      },
      {
        "question": "Among these drivers, how many of them are older than 40?",
        "query": "SELECT count(*) FROM driver WHERE home_city = 'Hartford' AND age > 40",
        "schema": "CREATE TABLE school (School_ID NUMBER); CREATE TABLE driver (Driver_ID NUMBER, Party TEXT, Name TEXT, Age NUMBER, Home_city TEXT);"
      },
      {
        "question": "Show their parites.",
        "query": "SELECT party FROM driver WHERE home_city = 'Hartford' AND age > 40",
        "schema": "CREATE TABLE driver (Home_city TEXT, Driver_ID NUMBER, Party TEXT, Age NUMBER, Name TEXT); CREATE TABLE school (Type TEXT, School_ID NUMBER);"
      }
    ],
    [
      {
        "question": "How many drivers are older than 30?",
        "query": "SELECT count(*) FROM driver WHERE age > 30",
        "schema": "CREATE TABLE driver (Name TEXT, Driver_ID NUMBER, Age NUMBER);"
      },
      {
        "question": "How many are older than 40?",
        "query": "SELECT count(*) FROM driver WHERE age > 40",
        "schema": "CREATE TABLE driver (Name TEXT, Age NUMBER, Driver_ID NUMBER);"
      },
      {
        "question": "Show their home cities.",
        "query": "SELECT home_city FROM driver WHERE age > 40",
        "schema": "CREATE TABLE school (Location TEXT); CREATE TABLE driver (Age NUMBER, Driver_ID NUMBER, Home_city TEXT, Name TEXT);"
      },
      {
        "question": "Among these cities, which one has at least two drivers older than 40?",
        "query": "SELECT home_city FROM driver WHERE age > 40 GROUP BY home_city HAVING count(*) >= 2",
        "schema": "CREATE TABLE school (Location TEXT); CREATE TABLE driver (Driver_ID NUMBER, Home_city TEXT, Name TEXT, Age NUMBER);"
      }
    ],
    [
      {
        "question": "Show the hometowns of the drivers who are older than 40.",
        "query": "SELECT home_city FROM driver WHERE age > 40",
        "schema": "CREATE TABLE driver (Home_city TEXT, Driver_ID NUMBER, Name TEXT, Age NUMBER);"
      },
      {
        "question": "How many different cities are there?",
        "query": "SELECT count(DISTINCT home_city) FROM driver",
        "schema": "CREATE TABLE driver (Name TEXT, Home_city TEXT, Driver_ID NUMBER, Age NUMBER);"
      },
      {
        "question": "What are the cities that do not have a driver older than 40?",
        "query": "SELECT home_city FROM driver EXCEPT SELECT home_city FROM driver WHERE age > 40",
        "schema": "CREATE TABLE driver (Driver_ID NUMBER, Home_city TEXT, Age NUMBER, Name TEXT);"
      }
    ],
    [
      {
        "question": "How many drivers are there that have a school bus?",
        "query": "SELECT count(*) FROM driver WHERE driver_id IN (SELECT driver_id FROM school_bus)",
        "schema": "CREATE TABLE driver (Name TEXT, Driver_ID NUMBER); CREATE TABLE school (School_ID NUMBER); CREATE TABLE school_bus (School_ID NUMBER, Driver_ID NUMBER);"
      },
      {
        "question": "How about the number of drivers without a school bus?",
        "query": "SELECT count(*) FROM driver WHERE driver_id NOT IN (SELECT driver_id FROM school_bus)",
        "schema": "CREATE TABLE driver (Name TEXT, Driver_ID NUMBER); CREATE TABLE school_bus (Driver_ID NUMBER, School_ID NUMBER); CREATE TABLE school (School_ID NUMBER);"
      },
      {
        "question": "Show these drivers' names.",
        "query": "SELECT name FROM driver WHERE driver_id NOT IN (SELECT driver_id FROM school_bus)",
        "schema": "CREATE TABLE school (School_ID NUMBER); CREATE TABLE school_bus (Driver_ID NUMBER, School_ID NUMBER); CREATE TABLE driver (Driver_ID NUMBER, Name TEXT);"
      }
    ],
    [
      {
        "question": "How many different types of schools are there?",
        "query": "SELECT count(DISTINCT TYPE) FROM school",
        "schema": "CREATE TABLE driver (Driver_ID NUMBER); CREATE TABLE school (School TEXT, Location TEXT, School_ID NUMBER, Type TEXT);"
      },
      {
        "question": "For each type, how many schools are there?",
        "query": "SELECT TYPE, count(*) FROM school GROUP BY TYPE",
        "schema": "CREATE TABLE driver (Driver_ID NUMBER); CREATE TABLE school (Type TEXT, School_ID NUMBER, Location TEXT, School TEXT);"
      },
      {
        "question": "Which types have two schools?",
        "query": "SELECT TYPE FROM school GROUP BY TYPE HAVING count(*) = 2",
        "schema": "CREATE TABLE school (Type TEXT, School TEXT, School_ID NUMBER, Location TEXT); CREATE TABLE driver (Driver_ID NUMBER);"
      }
    ],
    [
      {
        "question": "How many different schools are there?",
        "query": "SELECT count(*) FROM school",
        "schema": "CREATE TABLE driver (Driver_ID NUMBER); CREATE TABLE school (School_ID NUMBER, Type TEXT, Location TEXT, School TEXT); CREATE TABLE school_bus (School_ID NUMBER, Driver_ID NUMBER);"
      },
      {
        "question": "Which schools have school buses?",
        "query": "SELECT t2.school FROM school_bus AS t1 JOIN school AS t2 ON t1.school_id = t2.school_id",
        "schema": "CREATE TABLE school_bus (School_ID NUMBER, Driver_ID NUMBER); CREATE TABLE driver (Driver_ID NUMBER); CREATE TABLE school (School TEXT, School_ID NUMBER, Type TEXT, Location TEXT);"
      },
      {
        "question": "Please also show the names of the drivers.",
        "query": "SELECT t2.school , t3.name FROM school_bus AS t1 JOIN school AS t2 ON t1.school_id = t2.school_id JOIN driver AS t3 ON t1.driver_id = t3.driver_id",
        "schema": "CREATE TABLE school_bus (Driver_ID NUMBER, School_ID NUMBER); CREATE TABLE driver (Name TEXT, Driver_ID NUMBER); CREATE TABLE school (Type TEXT, School_ID NUMBER, Location TEXT, School TEXT);"
      }
    ],
    [
      {
        "question": "What are the top 3 number of years spent working on a school bus?",
        "query": "SELECT years_working FROM school_bus ORDER BY years_working DESC LIMIT 3",
        "schema": "CREATE TABLE driver (Age NUMBER, Driver_ID NUMBER); CREATE TABLE school_bus (Driver_ID NUMBER, Years_Working NUMBER, If_full_time OTHERS, School_ID NUMBER); CREATE TABLE school (School_ID NUMBER);"
      },
      {
        "question": "What is the maximum years spent working on a school bus?",
        "query": "SELECT max(years_working) FROM school_bus",
        "schema": "CREATE TABLE driver (Age NUMBER, Driver_ID NUMBER); CREATE TABLE school_bus (If_full_time OTHERS, Years_Working NUMBER, Driver_ID NUMBER, School_ID NUMBER); CREATE TABLE school (School_ID NUMBER);"
      },
      {
        "question": "Please also show the minimum and average years.",
        "query": "SELECT max(years_working) , min(years_working) , avg(years_working) FROM school_bus",
        "schema": "CREATE TABLE school (School_ID NUMBER); CREATE TABLE school_bus (School_ID NUMBER, Driver_ID NUMBER, Years_Working NUMBER, If_full_time OTHERS); CREATE TABLE driver (Age NUMBER, Driver_ID NUMBER);"
      }
    ],
    [
      {
        "question": "How many schools do not have a school bus?",
        "query": "SELECT count(*) FROM school WHERE school_id NOT IN (SELECT school_id FROM school_bus)",
        "schema": "CREATE TABLE school_bus (School_ID NUMBER, Driver_ID NUMBER); CREATE TABLE school (School_ID NUMBER, Type TEXT, School TEXT); CREATE TABLE driver (Driver_ID NUMBER);"
      },
      {
        "question": "What are the names of these schools?",
        "query": "SELECT school FROM school WHERE school_id NOT IN (SELECT school_id FROM school_bus)",
        "schema": "CREATE TABLE driver (Driver_ID NUMBER); CREATE TABLE school_bus (School_ID NUMBER, Driver_ID NUMBER); CREATE TABLE school (School_ID NUMBER, Type TEXT, School TEXT);"
      },
      {
        "question": "Please also show the school types.",
        "query": "SELECT school , TYPE FROM school WHERE school_id NOT IN (SELECT school_id FROM school_bus)",
        "schema": "CREATE TABLE driver (Driver_ID NUMBER); CREATE TABLE school_bus (School_ID NUMBER, Driver_ID NUMBER); CREATE TABLE school (School_ID NUMBER, School TEXT, Type TEXT);"
      }
    ],
    [
      {
        "question": "How many schools have a school bus?",
        "query": "SELECT count(*) FROM school_bus AS t1 JOIN school AS t2 ON t1.school_id = t2.school_id",
        "schema": "CREATE TABLE school (School TEXT, Type TEXT, School_ID NUMBER); CREATE TABLE driver (Driver_ID NUMBER); CREATE TABLE school_bus (Driver_ID NUMBER, School_ID NUMBER);"
      },
      {
        "question": "How many school buses does each school type have?",
        "query": "SELECT count(*) FROM school_bus AS t1 JOIN school AS t2 ON t1.school_id = t2.school_id GROUP BY t2.type",
        "schema": "CREATE TABLE school_bus (Driver_ID NUMBER, School_ID NUMBER); CREATE TABLE school (School_ID NUMBER, Type TEXT, School TEXT); CREATE TABLE driver (Driver_ID NUMBER);"
      },
      {
        "question": "Please also show the types.",
        "query": "SELECT t2.type , count(*) FROM school_bus AS t1 JOIN school AS t2 ON t1.school_id = t2.school_id GROUP BY t2.type",
        "schema": "CREATE TABLE school_bus (Driver_ID NUMBER, School_ID NUMBER); CREATE TABLE school (School_ID NUMBER, Type TEXT, School TEXT); CREATE TABLE driver (Driver_ID NUMBER);"
      }
    ],
    [
      {
        "question": "How many drivers are older than 40?",
        "query": "SELECT count(*) FROM driver WHERE age > 40",
        "schema": "CREATE TABLE driver (Driver_ID NUMBER, Name TEXT, Age NUMBER);"
      },
      {
        "question": "How about the number younger than 40?",
        "query": "SELECT count(*) FROM driver WHERE age < 40",
        "schema": "CREATE TABLE driver (Driver_ID NUMBER, Name TEXT, Age NUMBER);"
      },
      {
        "question": "Please add the number of drivers that are from Hartford.",
        "query": "SELECT count(*) FROM driver WHERE home_city = 'Hartford' OR age < 40",
        "schema": "CREATE TABLE driver (Driver_ID NUMBER, Age NUMBER, Home_city TEXT, Name TEXT);"
      }
    ],
    [
      {
        "question": "How many drivers are from Hartford?",
        "query": "SELECT count(*) FROM driver WHERE home_city = 'Hartford'",
        "schema": "CREATE TABLE school (School_ID NUMBER, Location TEXT, School TEXT); CREATE TABLE driver (Name TEXT, Home_city TEXT, Driver_ID NUMBER);"
      },
      {
        "question": "Among these drivers, how many of them are younger than 40?",
        "query": "SELECT count(*) FROM driver WHERE home_city = 'Hartford' AND age < 40",
        "schema": "CREATE TABLE driver (Driver_ID NUMBER, Home_city TEXT, Age NUMBER, Name TEXT); CREATE TABLE school (School_ID NUMBER, Location TEXT, School TEXT);"
      },
      {
        "question": "Show their names.",
        "query": "SELECT name FROM driver WHERE home_city = 'Hartford' AND age < 40",
        "schema": "CREATE TABLE driver (Name TEXT, Age NUMBER, Home_city TEXT, Driver_ID NUMBER); CREATE TABLE school (School_ID NUMBER, Location TEXT, School TEXT);"
      }
    ]
  ],
  "cre_Doc_Tracking_DB": [
    [
      {
        "question": "Show information for all calendar items.",
        "query": "SELECT * FROM ref_calendar",
        "schema": "CREATE TABLE Employees (Date_of_Birth TIME); CREATE TABLE Documents_to_be_Destroyed (Actual_Destruction_Date TIME, Planned_Destruction_Date TIME); CREATE TABLE Ref_Calendar (Calendar_Date TIME, Day_Number NUMBER); CREATE TABLE Document_Locations (Date_in_Locaton_To TIME); CREATE TABLE All_Documents (Date_Stored TIME);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT count(*) FROM ref_calendar",
        "schema": "CREATE TABLE Ref_Calendar (Calendar_Date TIME, Day_Number NUMBER); CREATE TABLE Employees (Date_of_Birth TIME); CREATE TABLE Documents_to_be_Destroyed (Actual_Destruction_Date TIME, Planned_Destruction_Date TIME); CREATE TABLE All_Documents (Date_Stored TIME); CREATE TABLE Document_Locations (Date_in_Locaton_To TIME);"
      }
    ],
    [
      {
        "question": "Show all calendar items.",
        "query": "SELECT * FROM ref_calendar",
        "schema": "CREATE TABLE Documents_to_be_Destroyed (Planned_Destruction_Date TIME, Actual_Destruction_Date TIME); CREATE TABLE All_Documents (Date_Stored TIME); CREATE TABLE Employees (Date_of_Birth TIME); CREATE TABLE Ref_Calendar (Day_Number NUMBER, Calendar_Date TIME);"
      },
      {
        "question": "Only show the calendar dates and day numbers for them.",
        "query": "SELECT calendar_date , day_number FROM ref_calendar",
        "schema": "CREATE TABLE All_Documents (Date_Stored TIME); CREATE TABLE Documents_to_be_Destroyed (Planned_Destruction_Date TIME, Actual_Destruction_Date TIME); CREATE TABLE Employees (Date_of_Birth TIME); CREATE TABLE Ref_Calendar (Calendar_Date TIME, Day_Number NUMBER);"
      }
    ],
    [
      {
        "question": "Show all document types.",
        "query": "SELECT * FROM ref_document_types",
        "schema": "CREATE TABLE Ref_Document_Types (Document_Type_Code TEXT, Document_Type_Description TEXT, Document_Type_Name TEXT); CREATE TABLE All_Documents (Document_ID NUMBER, Document_Type_Code TEXT);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT count(*) FROM ref_document_types",
        "schema": "CREATE TABLE Employees (Employee_ID NUMBER); CREATE TABLE Ref_Document_Types (Document_Type_Description TEXT, Document_Type_Name TEXT, Document_Type_Code TEXT); CREATE TABLE All_Documents (Document_ID NUMBER, Document_Type_Code TEXT);"
      }
    ],
    [
      {
        "question": "Show all document type information.",
        "query": "SELECT * FROM ref_document_types",
        "schema": "CREATE TABLE All_Documents (Document_Type_Code TEXT, Document_Name TEXT, Document_ID NUMBER); CREATE TABLE Ref_Document_Types (Document_Type_Name TEXT, Document_Type_Description TEXT, Document_Type_Code TEXT); CREATE TABLE Employees (Employee_ID NUMBER);"
      },
      {
        "question": "What are their document type codes and names?",
        "query": "SELECT document_type_code , document_type_name FROM ref_document_types",
        "schema": "CREATE TABLE Employees (Employee_ID NUMBER); CREATE TABLE All_Documents (Document_Name TEXT, Document_ID NUMBER, Document_Type_Code TEXT); CREATE TABLE Ref_Document_Types (Document_Type_Description TEXT, Document_Type_Name TEXT, Document_Type_Code TEXT);"
      }
    ],
    [
      {
        "question": "Show the name and description for all document types.",
        "query": "SELECT document_type_name , document_type_description FROM ref_document_types",
        "schema": "CREATE TABLE All_Documents (Document_Type_Code TEXT, Document_Description TEXT, Document_Name TEXT); CREATE TABLE Ref_Document_Types (Document_Type_Code TEXT, Document_Type_Name TEXT, Document_Type_Description TEXT);"
      },
      {
        "question": "Filter the results for only those with code RV.",
        "query": "SELECT document_type_name , document_type_description FROM ref_document_types WHERE document_type_code = \"RV\"",
        "schema": "CREATE TABLE Ref_Document_Types (Document_Type_Code TEXT, Document_Type_Description TEXT, Document_Type_Name TEXT); CREATE TABLE All_Documents (Document_Name TEXT, Document_Description TEXT, Document_Type_Code TEXT);"
      }
    ],
    [
      {
        "question": "Show all the document type codes.",
        "query": "SELECT document_type_code FROM ref_document_types",
        "schema": "CREATE TABLE Ref_Document_Types (Document_Type_Name TEXT, Document_Type_Code TEXT); CREATE TABLE All_Documents (Document_Type_Code TEXT, Document_ID NUMBER);"
      },
      {
        "question": "What is the code for the document type named \"Paper\"?",
        "query": "SELECT document_type_code FROM ref_document_types WHERE document_type_name = \"Paper\"",
        "schema": "CREATE TABLE Ref_Document_Types (Document_Type_Name TEXT, Document_Type_Code TEXT, Document_Type_Description TEXT); CREATE TABLE All_Documents (Document_ID NUMBER, Document_Type_Code TEXT, Document_Name TEXT);"
      }
    ],
    [
      {
        "question": "How many documents are there in total?",
        "query": "SELECT count(*) FROM all_documents",
        "schema": "CREATE TABLE Ref_Document_Types (Document_Type_Code TEXT, Document_Type_Name TEXT); CREATE TABLE Document_Locations (Document_ID NUMBER); CREATE TABLE All_Documents (Document_ID NUMBER, Document_Description TEXT, Other_Details TEXT, Document_Name TEXT, Document_Type_Code TEXT); CREATE TABLE Ref_Calendar (Calendar_Date TIME); CREATE TABLE Employees (Employee_ID NUMBER); CREATE TABLE Documents_to_be_Destroyed (Document_ID NUMBER);"
      },
      {
        "question": "How about the number for those with document type code CV?",
        "query": "SELECT count(*) FROM all_documents WHERE document_type_code = \"CV\"",
        "schema": "CREATE TABLE Document_Locations (Document_ID NUMBER); CREATE TABLE Employees (Employee_ID NUMBER); CREATE TABLE Documents_to_be_Destroyed (Document_ID NUMBER); CREATE TABLE Ref_Calendar (Calendar_Date TIME); CREATE TABLE Ref_Document_Types (Document_Type_Code TEXT, Document_Type_Name TEXT); CREATE TABLE All_Documents (Document_ID NUMBER, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT, Document_Type_Code TEXT);"
      },
      {
        "question": "How about CV or BK?",
        "query": "SELECT count(*) FROM all_documents WHERE document_type_code = \"CV\" OR document_type_code = \"BK\"",
        "schema": "CREATE TABLE All_Documents (Document_ID NUMBER, Document_Name TEXT, Other_Details TEXT, Document_Description TEXT, Document_Type_Code TEXT); CREATE TABLE Ref_Calendar (Calendar_Date TIME); CREATE TABLE Ref_Document_Types (Document_Type_Code TEXT, Document_Type_Name TEXT); CREATE TABLE Document_Locations (Document_ID NUMBER); CREATE TABLE Documents_to_be_Destroyed (Document_ID NUMBER); CREATE TABLE Employees (Employee_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show the info for all documents.",
        "query": "SELECT * FROM all_documents",
        "schema": "CREATE TABLE Documents_to_be_Destroyed (Document_ID NUMBER); CREATE TABLE Employees (Employee_ID NUMBER); CREATE TABLE Document_Locations (Document_ID NUMBER); CREATE TABLE All_Documents (Document_Type_Code TEXT, Other_Details TEXT, Document_Name TEXT, Document_Description TEXT, Document_ID NUMBER); CREATE TABLE Ref_Document_Types (Document_Type_Code TEXT);"
      },
      {
        "question": "How about those with name \"Marry CV\"?",
        "query": "SELECT * FROM all_documents WHERE document_name = \"Marry CV\"",
        "schema": "CREATE TABLE All_Documents (Document_Name TEXT, Document_Type_Code TEXT, Other_Details TEXT, Document_Description TEXT, Document_ID NUMBER); CREATE TABLE Documents_to_be_Destroyed (Document_ID NUMBER); CREATE TABLE Document_Locations (Document_ID NUMBER); CREATE TABLE Roles (Role_Name TEXT); CREATE TABLE Ref_Document_Types (Document_Type_Code TEXT); CREATE TABLE Employees (Employee_Name TEXT, Employee_ID NUMBER);"
      },
      {
        "question": "Show its date stored.",
        "query": "SELECT date_stored FROM all_documents WHERE document_name = \"Marry CV\"",
        "schema": "CREATE TABLE Roles (Role_Name TEXT); CREATE TABLE Documents_to_be_Destroyed (Document_ID NUMBER); CREATE TABLE Ref_Calendar (Calendar_Date TIME); CREATE TABLE Document_Locations (Document_ID NUMBER); CREATE TABLE Employees (Employee_ID NUMBER, Employee_Name TEXT); CREATE TABLE All_Documents (Document_Name TEXT, Date_Stored TIME, Document_ID NUMBER, Other_Details TEXT, Document_Description TEXT, Document_Type_Code TEXT); CREATE TABLE Ref_Document_Types (Document_Type_Code TEXT);"
      }
    ],
    [
      {
        "question": "Show date stored for all the documents.",
        "query": "SELECT date_stored FROM all_documents",
        "schema": "CREATE TABLE Documents_to_be_Destroyed (Actual_Destruction_Date TIME, Document_ID NUMBER); CREATE TABLE Ref_Calendar (Calendar_Date TIME); CREATE TABLE Employees (Employee_ID NUMBER); CREATE TABLE All_Documents (Document_Name TEXT, Document_ID NUMBER, Date_Stored TIME); CREATE TABLE Document_Locations (Document_ID NUMBER);"
      },
      {
        "question": "Also show their day numbers.",
        "query": "SELECT t2.day_number , t1.date_stored FROM all_documents AS t1 JOIN ref_calendar AS t2 ON t1.date_stored = t2.calendar_date",
        "schema": "CREATE TABLE Ref_Calendar (Day_Number NUMBER, Calendar_Date TIME); CREATE TABLE All_Documents (Date_Stored TIME, Document_ID NUMBER, Document_Name TEXT); CREATE TABLE Documents_to_be_Destroyed (Actual_Destruction_Date TIME, Document_ID NUMBER); CREATE TABLE Employees (Employee_ID NUMBER); CREATE TABLE Document_Locations (Document_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show all document names.",
        "query": "SELECT document_name FROM all_documents",
        "schema": "CREATE TABLE All_Documents (Document_Name TEXT, Document_ID NUMBER, Document_Type_Code TEXT); CREATE TABLE Ref_Document_Types (Document_Type_Name TEXT, Document_Type_Code TEXT); CREATE TABLE Employees (Employee_Name TEXT);"
      },
      {
        "question": "For each of them, show the document type name.",
        "query": "SELECT t2.document_type_name, t1.document_name FROM all_documents AS t1 JOIN ref_document_types AS t2 ON t1.document_type_code = t2.document_type_code",
        "schema": "CREATE TABLE Employees (Employee_Name TEXT); CREATE TABLE Ref_Document_Types (Document_Type_Name TEXT, Document_Type_Code TEXT); CREATE TABLE All_Documents (Document_Type_Code TEXT, Document_ID NUMBER, Document_Name TEXT);"
      },
      {
        "question": "What is the type name for the document named \"How to read a book\"?",
        "query": "SELECT t2.document_type_name FROM all_documents AS t1 JOIN ref_document_types AS t2 ON t1.document_type_code = t2.document_type_code WHERE t1.document_name = \"How to read a book\"",
        "schema": "CREATE TABLE Employees (Employee_Name TEXT); CREATE TABLE All_Documents (Document_Name TEXT, Document_Type_Code TEXT, Document_ID NUMBER); CREATE TABLE Ref_Document_Types (Document_Type_Name TEXT, Document_Type_Code TEXT);"
      }
    ],
    [
      {
        "question": "Show all locations.",
        "query": "SELECT * FROM ref_locations",
        "schema": "CREATE TABLE Ref_Locations (Location_Name TEXT, Location_Code TEXT, Location_Description TEXT); CREATE TABLE Document_Locations (Location_Code TEXT, Document_ID NUMBER);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT count(*) FROM ref_locations",
        "schema": "CREATE TABLE Document_Locations (Document_ID NUMBER, Location_Code TEXT); CREATE TABLE Ref_Locations (Location_Code TEXT, Location_Name TEXT, Location_Description TEXT);"
      }
    ],
    [
      {
        "question": "List the names of all locations.",
        "query": "SELECT location_name FROM ref_locations",
        "schema": "CREATE TABLE Ref_Locations (Location_Name TEXT, Location_Description TEXT, Location_Code TEXT); CREATE TABLE Employees (Employee_Name TEXT); CREATE TABLE Document_Locations (Location_Code TEXT);"
      },
      {
        "question": "Also show their location codes.",
        "query": "SELECT location_code , location_name FROM ref_locations",
        "schema": "CREATE TABLE Ref_Locations (Location_Description TEXT, Location_Name TEXT, Location_Code TEXT); CREATE TABLE Document_Locations (Location_Code TEXT); CREATE TABLE Employees (Employee_Name TEXT);"
      }
    ],
    [
      {
        "question": "Show the names of all locations.",
        "query": "SELECT location_name FROM ref_locations",
        "schema": "CREATE TABLE Ref_Locations (Location_Name TEXT, Location_Code TEXT, Location_Description TEXT); CREATE TABLE Employees (Employee_Name TEXT); CREATE TABLE Document_Locations (Location_Code TEXT);"
      },
      {
        "question": "What is name for the one with code x?",
        "query": "SELECT location_name FROM ref_locations WHERE location_code = \"x\"",
        "schema": "CREATE TABLE Ref_Locations (Location_Code TEXT, Location_Description TEXT, Location_Name TEXT); CREATE TABLE Employees (Employee_Name TEXT); CREATE TABLE Document_Locations (Location_Code TEXT);"
      },
      {
        "question": "Also show its description.",
        "query": "SELECT location_name , location_description FROM ref_locations WHERE location_code = \"x\"",
        "schema": "CREATE TABLE Ref_Document_Types (Document_Type_Description TEXT); CREATE TABLE Document_Locations (Location_Code TEXT); CREATE TABLE Ref_Locations (Location_Code TEXT, Location_Name TEXT, Location_Description TEXT); CREATE TABLE Employees (Employee_Name TEXT); CREATE TABLE All_Documents (Document_Description TEXT);"
      }
    ],
    [
      {
        "question": "Show the code for all locations.",
        "query": "SELECT location_code FROM ref_locations",
        "schema": "CREATE TABLE Document_Locations (Document_ID NUMBER, Location_Code TEXT); CREATE TABLE Ref_Locations (Location_Name TEXT, Location_Code TEXT);"
      },
      {
        "question": "How about the one named \"Canada\"?",
        "query": "SELECT location_code FROM ref_locations",
        "schema": "CREATE TABLE Document_Locations (Location_Code TEXT, Document_ID NUMBER); CREATE TABLE Ref_Locations (Location_Code TEXT, Location_Name TEXT);"
      }
    ],
    [
      {
        "question": "Show all roles.",
        "query": "SELECT * FROM ROLES",
        "schema": "CREATE TABLE Employees (Role_Code TEXT); CREATE TABLE Roles (Role_Code TEXT, Role_Name TEXT, Role_Description TEXT);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT count(*) FROM ROLES",
        "schema": "CREATE TABLE Employees (Role_Code TEXT); CREATE TABLE Roles (Role_Name TEXT, Role_Code TEXT, Role_Description TEXT);"
      }
    ],
    [
      {
        "question": "Show the names of all roles.",
        "query": "SELECT role_name FROM ROLES",
        "schema": "CREATE TABLE Employees (Employee_Name TEXT, Role_Code TEXT); CREATE TABLE All_Documents (Document_Name TEXT); CREATE TABLE Roles (Role_Name TEXT, Role_Description TEXT, Role_Code TEXT);"
      },
      {
        "question": "Also show their codes and descriptions.",
        "query": "SELECT role_code , role_name , role_description FROM ROLES",
        "schema": "CREATE TABLE Employees (Role_Code TEXT, Employee_Name TEXT); CREATE TABLE All_Documents (Document_Name TEXT); CREATE TABLE Roles (Role_Description TEXT, Role_Code TEXT, Role_Name TEXT);"
      }
    ],
    [
      {
        "question": "Show the name for all roles.",
        "query": "SELECT role_name FROM ROLES",
        "schema": "CREATE TABLE Roles (Role_Name TEXT, Role_Description TEXT, Role_Code TEXT); CREATE TABLE Employees (Employee_Name TEXT, Role_Code TEXT); CREATE TABLE All_Documents (Document_Name TEXT);"
      },
      {
        "question": "What about the role with code \"MG\"?",
        "query": "SELECT role_name FROM ROLES WHERE role_code = \"MG\"",
        "schema": "CREATE TABLE Employees (Employee_Name TEXT, Role_Code TEXT); CREATE TABLE All_Documents (Document_Name TEXT); CREATE TABLE Roles (Role_Description TEXT, Role_Code TEXT, Role_Name TEXT);"
      },
      {
        "question": "Also show its description.",
        "query": "SELECT role_name , role_description FROM ROLES WHERE role_code = \"MG\"",
        "schema": "CREATE TABLE Roles (Role_Name TEXT, Role_Code TEXT, Role_Description TEXT); CREATE TABLE All_Documents (Document_Description TEXT, Document_Name TEXT); CREATE TABLE Employees (Employee_Name TEXT, Role_Code TEXT);"
      }
    ],
    [
      {
        "question": "Show the descriptions of all roles.",
        "query": "SELECT role_description FROM ROLES",
        "schema": "CREATE TABLE All_Documents (Document_Description TEXT); CREATE TABLE Employees (Role_Code TEXT); CREATE TABLE Roles (Role_Name TEXT, Role_Description TEXT, Role_Code TEXT);"
      },
      {
        "question": "What is the description for the one named \"Proof Reader\"?",
        "query": "SELECT role_description FROM ROLES WHERE role_name = \"Proof Reader\"",
        "schema": "CREATE TABLE Roles (Role_Code TEXT, Role_Description TEXT, Role_Name TEXT); CREATE TABLE All_Documents (Document_Description TEXT, Document_Name TEXT); CREATE TABLE Employees (Role_Code TEXT);"
      }
    ],
    [
      {
        "question": "Show information for all employees.",
        "query": "SELECT * FROM employees",
        "schema": "CREATE TABLE All_Documents (Document_ID NUMBER); CREATE TABLE Roles (Role_Code TEXT); CREATE TABLE Documents_to_be_Destroyed (Destroyed_by_Employee_ID NUMBER, Destruction_Authorised_by_Employee_ID NUMBER); CREATE TABLE Employees (Employee_ID NUMBER, Role_Code TEXT, Employee_Name TEXT);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT count(*) FROM employees",
        "schema": "CREATE TABLE Documents_to_be_Destroyed (Destruction_Authorised_by_Employee_ID NUMBER, Destroyed_by_Employee_ID NUMBER); CREATE TABLE Roles (Role_Code TEXT); CREATE TABLE All_Documents (Document_ID NUMBER); CREATE TABLE Employees (Employee_ID NUMBER, Employee_Name TEXT, Role_Code TEXT);"
      }
    ],
    [
      {
        "question": "Show the names of all employee.",
        "query": "SELECT employee_name FROM employees",
        "schema": "CREATE TABLE Roles (Role_Name TEXT, Role_Code TEXT); CREATE TABLE Employees (Gender_MFU TEXT, Role_Code TEXT, Employee_ID NUMBER, Employee_Name TEXT);"
      },
      {
        "question": "Show the name, code, and date of birth for the employee named 'Armani'.",
        "query": "SELECT employee_name , role_code , date_of_birth FROM employees WHERE employee_name = 'Armani'",
        "schema": "CREATE TABLE Roles (Role_Code TEXT, Role_Name TEXT); CREATE TABLE Employees (Employee_ID NUMBER, Role_Code TEXT, Employee_Name TEXT, Gender_MFU TEXT, Date_of_Birth TIME); CREATE TABLE Ref_Calendar (Calendar_Date TIME);"
      }
    ],
    [
      {
        "question": "Show the id and name for all employees.",
        "query": "SELECT employee_id, employee_name FROM employees",
        "schema": "CREATE TABLE Documents_to_be_Destroyed (Destroyed_by_Employee_ID NUMBER); CREATE TABLE Employees (Employee_Name TEXT, Employee_ID NUMBER, Role_Code TEXT); CREATE TABLE Roles (Role_Code TEXT, Role_Name TEXT);"
      },
      {
        "question": "What is the id for the employee called Ebba?",
        "query": "SELECT employee_id FROM employees WHERE employee_name = \"Ebba\"",
        "schema": "CREATE TABLE Documents_to_be_Destroyed (Destroyed_by_Employee_ID NUMBER); CREATE TABLE Roles (Role_Name TEXT, Role_Code TEXT); CREATE TABLE Employees (Employee_ID NUMBER, Role_Code TEXT, Employee_Name TEXT);"
      }
    ],
    [
      {
        "question": "Show the names and role code of all the employees.",
        "query": "SELECT employee_name , role_code FROM employees",
        "schema": "CREATE TABLE Roles (Role_Name TEXT, Role_Code TEXT); CREATE TABLE Employees (Employee_Name TEXT, Employee_ID NUMBER, Role_Code TEXT);"
      },
      {
        "question": "Show names for those with \"HR\" as their role.",
        "query": "SELECT employee_name FROM employees WHERE role_code = \"HR\"",
        "schema": "CREATE TABLE Roles (Role_Code TEXT, Role_Name TEXT); CREATE TABLE Employees (Employee_Name TEXT, Employee_ID NUMBER, Role_Code TEXT);"
      }
    ],
    [
      {
        "question": "Show the role code for all employees.",
        "query": "SELECT role_code FROM employees",
        "schema": "CREATE TABLE Roles (Role_Name TEXT, Role_Code TEXT, Role_Description TEXT); CREATE TABLE All_Documents (Document_ID NUMBER); CREATE TABLE Employees (Employee_ID NUMBER, Gender_MFU TEXT, Role_Code TEXT, Employee_Name TEXT);"
      },
      {
        "question": "For each of them, also show the number of employees in each role.",
        "query": "SELECT role_code , count(*) FROM employees GROUP BY role_code",
        "schema": "CREATE TABLE All_Documents (Document_ID NUMBER); CREATE TABLE Employees (Employee_ID NUMBER, Role_Code TEXT, Gender_MFU TEXT, Employee_Name TEXT); CREATE TABLE Roles (Role_Name TEXT, Role_Code TEXT, Role_Description TEXT);"
      }
    ],
    [
      {
        "question": "Show the role code for all employees.",
        "query": "SELECT role_code FROM employees",
        "schema": "CREATE TABLE All_Documents (Document_ID NUMBER); CREATE TABLE Roles (Role_Description TEXT, Role_Name TEXT, Role_Code TEXT); CREATE TABLE Employees (Employee_Name TEXT, Gender_MFU TEXT, Role_Code TEXT, Employee_ID NUMBER);"
      },
      {
        "question": "Count the number of employees with each role code.",
        "query": "SELECT role_code, count(*) FROM employees GROUP BY role_code",
        "schema": "CREATE TABLE All_Documents (Document_ID NUMBER); CREATE TABLE Roles (Role_Name TEXT, Role_Code TEXT, Role_Description TEXT); CREATE TABLE Employees (Role_Code TEXT, Employee_Name TEXT, Employee_ID NUMBER, Gender_MFU TEXT);"
      },
      {
        "question": "Sort the codes by the count in descending order.",
        "query": "SELECT role_code FROM employees GROUP BY role_code ORDER BY count(*) DESC",
        "schema": "CREATE TABLE Employees (Employee_Name TEXT, Employee_ID NUMBER, Gender_MFU TEXT, Role_Code TEXT); CREATE TABLE All_Documents (Document_ID NUMBER); CREATE TABLE Roles (Role_Name TEXT, Role_Description TEXT, Role_Code TEXT);"
      },
      {
        "question": "Which of them has the largest number of employees?",
        "query": "SELECT role_code FROM employees GROUP BY role_code ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE All_Documents (Document_ID NUMBER); CREATE TABLE Employees (Employee_ID NUMBER, Employee_Name TEXT, Role_Code TEXT, Gender_MFU TEXT); CREATE TABLE Roles (Role_Name TEXT, Role_Code TEXT, Role_Description TEXT);"
      }
    ],
    [
      {
        "question": "Show role codes for all employees.",
        "query": "SELECT role_code FROM employees",
        "schema": "CREATE TABLE Employees (Role_Code TEXT, Gender_MFU TEXT, Employee_ID NUMBER, Employee_Name TEXT); CREATE TABLE Roles (Role_Name TEXT, Role_Code TEXT); CREATE TABLE All_Documents (Document_ID NUMBER);"
      },
      {
        "question": "Count the number of employees for each of them.",
        "query": "SELECT role_code, count(*) FROM employees GROUP BY role_code",
        "schema": "CREATE TABLE Employees (Gender_MFU TEXT, Employee_Name TEXT, Employee_ID NUMBER, Role_Code TEXT); CREATE TABLE Roles (Role_Name TEXT, Role_Code TEXT); CREATE TABLE All_Documents (Document_ID NUMBER);"
      },
      {
        "question": "Which of them have at least 3?",
        "query": "SELECT role_code FROM employees GROUP BY role_code HAVING count(*) >= 3",
        "schema": "CREATE TABLE Employees (Gender_MFU TEXT, Employee_ID NUMBER, Employee_Name TEXT, Role_Code TEXT); CREATE TABLE Roles (Role_Code TEXT, Role_Name TEXT); CREATE TABLE All_Documents (Document_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show the role code for all employees.",
        "query": "SELECT role_code FROM employees",
        "schema": "CREATE TABLE All_Documents (Document_ID NUMBER); CREATE TABLE Employees (Employee_Name TEXT, Employee_ID NUMBER, Role_Code TEXT, Gender_MFU TEXT); CREATE TABLE Roles (Role_Code TEXT, Role_Name TEXT, Role_Description TEXT);"
      },
      {
        "question": "For each of them, count the number of employees.",
        "query": "SELECT role_code, count(*) FROM employees GROUP BY role_code",
        "schema": "CREATE TABLE Roles (Role_Name TEXT, Role_Description TEXT, Role_Code TEXT); CREATE TABLE All_Documents (Document_ID NUMBER); CREATE TABLE Employees (Role_Code TEXT, Employee_ID NUMBER, Employee_Name TEXT, Gender_MFU TEXT);"
      },
      {
        "question": "Sort the codes by this count.",
        "query": "SELECT role_code FROM employees GROUP BY role_code ORDER BY count(*) ASC",
        "schema": "CREATE TABLE Employees (Gender_MFU TEXT, Employee_ID NUMBER, Employee_Name TEXT, Role_Code TEXT); CREATE TABLE Roles (Role_Name TEXT, Role_Code TEXT, Role_Description TEXT); CREATE TABLE All_Documents (Document_ID NUMBER);"
      },
      {
        "question": "Which code has the least?",
        "query": "SELECT role_code FROM employees GROUP BY role_code ORDER BY count(*) ASC LIMIT 1",
        "schema": "CREATE TABLE Roles (Role_Name TEXT, Role_Code TEXT, Role_Description TEXT); CREATE TABLE All_Documents (Document_ID NUMBER); CREATE TABLE Employees (Employee_ID NUMBER, Role_Code TEXT, Employee_Name TEXT, Gender_MFU TEXT);"
      }
    ],
    [
      {
        "question": "Show the names of all employees.",
        "query": "SELECT employee_name FROM employees",
        "schema": "CREATE TABLE Roles (Role_Code TEXT, Role_Name TEXT); CREATE TABLE Employees (Employee_ID NUMBER, Employee_Name TEXT, Role_Code TEXT);"
      },
      {
        "question": "Also show their role name and role description.",
        "query": "SELECT t1.employee_name , t2.role_name , t2.role_description FROM employees AS t1 JOIN ROLES AS t2 ON t1.role_code = t2.role_code",
        "schema": "CREATE TABLE Employees (Employee_ID NUMBER, Role_Code TEXT, Employee_Name TEXT); CREATE TABLE Roles (Role_Description TEXT, Role_Code TEXT, Role_Name TEXT);"
      },
      {
        "question": "What is the role name and role description for the employee named Ebba?",
        "query": "SELECT t2.role_name , t2.role_description FROM employees AS t1 JOIN ROLES AS t2 ON t1.role_code = t2.role_code WHERE t1.employee_name = \"Ebba\"",
        "schema": "CREATE TABLE Roles (Role_Code TEXT, Role_Name TEXT, Role_Description TEXT); CREATE TABLE Employees (Employee_ID NUMBER, Employee_Name TEXT, Role_Code TEXT);"
      }
    ],
    [
      {
        "question": "Show the name for all employees.",
        "query": "SELECT employee_name FROM employees",
        "schema": "CREATE TABLE Employees (Role_Code TEXT, Employee_Name TEXT, Gender_MFU TEXT, Employee_ID NUMBER); CREATE TABLE Roles (Role_Code TEXT, Role_Name TEXT);"
      },
      {
        "question": "Also show their role names.",
        "query": "SELECT t1.employee_name, t2.role_name FROM employees AS t1 JOIN ROLES AS t2 ON t1.role_code = t2.role_code",
        "schema": "CREATE TABLE Employees (Role_Code TEXT, Employee_Name TEXT, Gender_MFU TEXT, Employee_ID NUMBER); CREATE TABLE Roles (Role_Description TEXT, Role_Code TEXT, Role_Name TEXT);"
      },
      {
        "question": "Who has \"Editor\" as their role?",
        "query": "SELECT t1.employee_name FROM employees AS t1 JOIN ROLES AS t2 ON t1.role_code = t2.role_code WHERE t2.role_name = \"Editor\"",
        "schema": "CREATE TABLE Employees (Employee_Name TEXT, Role_Code TEXT, Gender_MFU TEXT, Employee_ID NUMBER); CREATE TABLE Roles (Role_Code TEXT, Role_Name TEXT, Role_Description TEXT);"
      }
    ],
    [
      {
        "question": "Show the ids for all employees.",
        "query": "SELECT employee_id FROM employees",
        "schema": "CREATE TABLE Employees (Employee_Name TEXT, Employee_ID NUMBER, Role_Code TEXT); CREATE TABLE Documents_to_be_Destroyed (Destroyed_by_Employee_ID NUMBER, Destruction_Authorised_by_Employee_ID NUMBER); CREATE TABLE Roles (Role_Code TEXT);"
      },
      {
        "question": "Also show their role names.",
        "query": "SELECT t1.employee_id , t2.role_name FROM employees AS t1 JOIN ROLES AS t2 ON t1.role_code = t2.role_code",
        "schema": "CREATE TABLE Roles (Role_Code TEXT, Role_Name TEXT); CREATE TABLE Employees (Employee_Name TEXT, Role_Code TEXT, Employee_ID NUMBER); CREATE TABLE Documents_to_be_Destroyed (Destroyed_by_Employee_ID NUMBER, Destruction_Authorised_by_Employee_ID NUMBER);"
      },
      {
        "question": "Which employees have \"Human Resources\" as their role?",
        "query": "SELECT t1.employee_id FROM employees AS t1 JOIN ROLES AS t2 ON t1.role_code = t2.role_code WHERE t2.role_name = \"Human Resource\"",
        "schema": "CREATE TABLE Employees (Employee_ID NUMBER, Role_Code TEXT, Employee_Name TEXT); CREATE TABLE Documents_to_be_Destroyed (Destroyed_by_Employee_ID NUMBER, Destruction_Authorised_by_Employee_ID NUMBER); CREATE TABLE Roles (Role_Code TEXT, Role_Name TEXT);"
      },
      {
        "question": "Also show the employee ids with the role \"Manager\".",
        "query": "SELECT t1.employee_id FROM employees AS t1 JOIN ROLES AS t2 ON t1.role_code = t2.role_code WHERE t2.role_name = \"Human Resource\" OR t2.role_name = \"Manager\"",
        "schema": "CREATE TABLE Documents_to_be_Destroyed (Destroyed_by_Employee_ID NUMBER, Destruction_Authorised_by_Employee_ID NUMBER); CREATE TABLE Employees (Employee_Name TEXT, Employee_ID NUMBER, Role_Code TEXT); CREATE TABLE Roles (Role_Code TEXT, Role_Name TEXT);"
      }
    ],
    [
      {
        "question": "Show locations for all documents.",
        "query": "SELECT location_code FROM document_locations",
        "schema": "CREATE TABLE Ref_Locations (Location_Description TEXT, Location_Code TEXT, Location_Name TEXT); CREATE TABLE All_Documents (Document_ID NUMBER, Document_Name TEXT); CREATE TABLE Document_Locations (Document_ID NUMBER, Location_Code TEXT);"
      },
      {
        "question": "Show all distinct locations among them.",
        "query": "SELECT DISTINCT location_code FROM document_locations",
        "schema": "CREATE TABLE Ref_Locations (Location_Code TEXT, Location_Name TEXT, Location_Description TEXT); CREATE TABLE All_Documents (Document_Name TEXT, Document_ID NUMBER); CREATE TABLE Document_Locations (Location_Code TEXT, Document_ID NUMBER, Date_in_Location_From TIME);"
      }
    ],
    [
      {
        "question": "Show all document names.",
        "query": "SELECT document_name FROM all_documents",
        "schema": "CREATE TABLE Ref_Document_Types (Document_Type_Code TEXT, Document_Type_Name TEXT); CREATE TABLE All_Documents (Document_Name TEXT, Document_ID NUMBER, Document_Type_Code TEXT); CREATE TABLE Employees (Employee_Name TEXT);"
      },
      {
        "question": "Also show their location name.",
        "query": "SELECT t1.document_name, t3.location_name FROM all_documents AS t1 JOIN document_locations AS t2 ON t1.document_id = t2.document_id JOIN ref_locations AS t3 ON t2.location_code = t3.location_code",
        "schema": "CREATE TABLE Document_Locations (Document_ID NUMBER, Date_in_Location_From TIME, Location_Code TEXT); CREATE TABLE Ref_Calendar (Calendar_Date TIME); CREATE TABLE All_Documents (Document_Name TEXT, Document_ID NUMBER, Document_Type_Code TEXT); CREATE TABLE Ref_Document_Types (Document_Type_Code TEXT, Document_Type_Name TEXT); CREATE TABLE Employees (Employee_Name TEXT); CREATE TABLE Ref_Locations (Location_Name TEXT, Location_Code TEXT, Location_Description TEXT);"
      },
      {
        "question": "What is the location for the document titled \"Robin CV\"?",
        "query": "SELECT t3.location_name FROM all_documents AS t1 JOIN document_locations AS t2 ON t1.document_id = t2.document_id JOIN ref_locations AS t3 ON t2.location_code = t3.location_code WHERE t1.document_name = \"Robin CV\"",
        "schema": "CREATE TABLE Ref_Document_Types (Document_Type_Code TEXT, Document_Type_Name TEXT); CREATE TABLE Document_Locations (Document_ID NUMBER, Location_Code TEXT, Date_in_Location_From TIME); CREATE TABLE Employees (Employee_Name TEXT); CREATE TABLE All_Documents (Document_ID NUMBER, Document_Name TEXT, Document_Type_Code TEXT); CREATE TABLE Ref_Calendar (Calendar_Date TIME); CREATE TABLE Ref_Locations (Location_Code TEXT, Location_Name TEXT, Location_Description TEXT);"
      }
    ],
    [
      {
        "question": "Show the location code for all the document locations.",
        "query": "SELECT location_code FROM document_locations",
        "schema": "CREATE TABLE Ref_Locations (Location_Code TEXT, Location_Name TEXT); CREATE TABLE All_Documents (Document_ID NUMBER); CREATE TABLE Document_Locations (Document_ID NUMBER, Location_Code TEXT);"
      },
      {
        "question": "Also show their their starting and ending dates.",
        "query": "SELECT location_code , date_in_location_from , date_in_locaton_to FROM document_locations",
        "schema": "CREATE TABLE Document_Locations (Document_ID NUMBER, Date_in_Location_From TIME, Date_in_Locaton_To TIME, Location_Code TEXT); CREATE TABLE All_Documents (Document_ID NUMBER); CREATE TABLE Ref_Calendar (Calendar_Date TIME); CREATE TABLE Ref_Locations (Location_Code TEXT, Location_Name TEXT);"
      }
    ],
    [
      {
        "question": "Show the document names.",
        "query": "SELECT document_name FROM all_documents",
        "schema": "CREATE TABLE Ref_Document_Types (Document_Type_Code TEXT); CREATE TABLE Employees (Employee_ID NUMBER, Employee_Name TEXT); CREATE TABLE All_Documents (Document_Type_Code TEXT, Document_ID NUMBER, Document_Name TEXT);"
      },
      {
        "question": "Also show the to and from dates for them.",
        "query": "SELECT t2.document_name, t1.date_in_location_from , t1.date_in_locaton_to FROM document_locations AS t1 JOIN all_documents AS t2 ON t1.document_id = t2.document_id",
        "schema": "CREATE TABLE Employees (Employee_Name TEXT, Employee_ID NUMBER); CREATE TABLE Ref_Calendar (Calendar_Date TIME); CREATE TABLE All_Documents (Document_Name TEXT, Document_ID NUMBER, Date_Stored TIME, Document_Type_Code TEXT); CREATE TABLE Documents_to_be_Destroyed (Document_ID NUMBER); CREATE TABLE Ref_Document_Types (Document_Type_Code TEXT); CREATE TABLE Ref_Locations (Location_Code TEXT, Location_Name TEXT); CREATE TABLE Document_Locations (Date_in_Locaton_To TIME, Location_Code TEXT, Date_in_Location_From TIME, Document_ID NUMBER);"
      },
      {
        "question": "What are these values for the document named \"Robin CV\"?",
        "query": "SELECT t1.date_in_location_from , t1.date_in_locaton_to FROM document_locations AS t1 JOIN all_documents AS t2 ON t1.document_id = t2.document_id WHERE t2.document_name = \"Robin CV\"",
        "schema": "CREATE TABLE Documents_to_be_Destroyed (Document_ID NUMBER); CREATE TABLE Ref_Document_Types (Document_Type_Code TEXT); CREATE TABLE Document_Locations (Date_in_Locaton_To TIME, Date_in_Location_From TIME, Document_ID NUMBER, Location_Code TEXT); CREATE TABLE Employees (Employee_ID NUMBER, Employee_Name TEXT); CREATE TABLE Ref_Calendar (Calendar_Date TIME); CREATE TABLE Ref_Locations (Location_Name TEXT, Location_Code TEXT); CREATE TABLE All_Documents (Document_Name TEXT, Date_Stored TIME, Document_ID NUMBER, Document_Type_Code TEXT);"
      }
    ],
    [
      {
        "question": "Show the codes for all document locations.",
        "query": "SELECT location_code FROM document_locations",
        "schema": "CREATE TABLE Document_Locations (Location_Code TEXT, Document_ID NUMBER); CREATE TABLE All_Documents (Document_ID NUMBER); CREATE TABLE Ref_Locations (Location_Name TEXT, Location_Code TEXT);"
      },
      {
        "question": "For each code, show the corresponding count of documents.",
        "query": "SELECT location_code , count(*) FROM document_locations GROUP BY location_code",
        "schema": "CREATE TABLE All_Documents (Document_ID NUMBER); CREATE TABLE Document_Locations (Document_ID NUMBER, Location_Code TEXT); CREATE TABLE Ref_Locations (Location_Name TEXT, Location_Code TEXT);"
      }
    ],
    [
      {
        "question": "Show the location codes.",
        "query": "SELECT location_code FROM document_locations",
        "schema": "CREATE TABLE All_Documents (Document_ID NUMBER); CREATE TABLE Document_Locations (Document_ID NUMBER, Location_Code TEXT, Date_in_Location_From TIME); CREATE TABLE Ref_Locations (Location_Code TEXT, Location_Name TEXT); CREATE TABLE Employees (Employee_ID NUMBER);"
      },
      {
        "question": "For each of them, what is the count of associated documents?",
        "query": "SELECT location_code , count(*) FROM document_locations GROUP BY location_code",
        "schema": "CREATE TABLE Document_Locations (Date_in_Location_From TIME, Location_Code TEXT, Document_ID NUMBER); CREATE TABLE All_Documents (Document_ID NUMBER); CREATE TABLE Ref_Locations (Location_Name TEXT, Location_Code TEXT); CREATE TABLE Employees (Employee_ID NUMBER);"
      },
      {
        "question": "Sort codes in descending order by these counts.",
        "query": "SELECT location_code FROM document_locations GROUP BY location_code ORDER BY count(*) DESC",
        "schema": "CREATE TABLE All_Documents (Document_ID NUMBER, Document_Type_Code TEXT); CREATE TABLE Employees (Employee_ID NUMBER); CREATE TABLE Ref_Locations (Location_Code TEXT, Location_Name TEXT); CREATE TABLE Document_Locations (Document_ID NUMBER, Location_Code TEXT, Date_in_Location_From TIME);"
      },
      {
        "question": "Which has the most?",
        "query": "SELECT location_code FROM document_locations GROUP BY location_code ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Document_Locations (Date_in_Location_From TIME, Location_Code TEXT, Document_ID NUMBER); CREATE TABLE All_Documents (Document_Type_Code TEXT, Document_ID NUMBER); CREATE TABLE Employees (Employee_ID NUMBER); CREATE TABLE Ref_Locations (Location_Name TEXT, Location_Code TEXT);"
      }
    ],
    [
      {
        "question": "Show all location codes.",
        "query": "SELECT location_code FROM document_locations",
        "schema": "CREATE TABLE Ref_Locations (Location_Code TEXT, Location_Name TEXT); CREATE TABLE Document_Locations (Document_ID NUMBER, Location_Code TEXT);"
      },
      {
        "question": "For each of them, count the number of corresponding documents.",
        "query": "SELECT location_code, count(*) FROM document_locations GROUP BY location_code",
        "schema": "CREATE TABLE Document_Locations (Document_ID NUMBER, Location_Code TEXT, Date_in_Location_From TIME); CREATE TABLE All_Documents (Document_ID NUMBER); CREATE TABLE Ref_Locations (Location_Name TEXT, Location_Code TEXT);"
      },
      {
        "question": "Which of them have at least 3?",
        "query": "SELECT location_code FROM document_locations GROUP BY location_code HAVING count(*) >= 3",
        "schema": "CREATE TABLE Ref_Locations (Location_Name TEXT, Location_Code TEXT); CREATE TABLE Document_Locations (Document_ID NUMBER, Location_Code TEXT, Date_in_Location_From TIME); CREATE TABLE All_Documents (Document_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show the location codes for all documents.",
        "query": "SELECT location_code FROM document_locations",
        "schema": "CREATE TABLE Ref_Locations (Location_Code TEXT, Location_Name TEXT, Location_Description TEXT); CREATE TABLE All_Documents (Document_ID NUMBER, Document_Name TEXT); CREATE TABLE Document_Locations (Document_ID NUMBER, Location_Code TEXT);"
      },
      {
        "question": "Also show their locations.",
        "query": "SELECT t2.location_name , t1.location_code FROM document_locations AS t1 JOIN ref_locations AS t2 ON t1.location_code = t2.location_code",
        "schema": "CREATE TABLE All_Documents (Document_ID NUMBER, Document_Name TEXT); CREATE TABLE Ref_Locations (Location_Code TEXT, Location_Description TEXT, Location_Name TEXT); CREATE TABLE Document_Locations (Date_in_Location_From TIME, Location_Code TEXT, Document_ID NUMBER);"
      },
      {
        "question": "How many documents come from each location?",
        "query": "SELECT t2.location_name , t1.location_code, count(*) FROM document_locations AS t1 JOIN ref_locations AS t2 ON t1.location_code = t2.location_code GROUP BY t1.location_code",
        "schema": "CREATE TABLE Document_Locations (Date_in_Location_From TIME, Document_ID NUMBER, Location_Code TEXT); CREATE TABLE All_Documents (Document_Name TEXT, Document_ID NUMBER); CREATE TABLE Ref_Locations (Location_Description TEXT, Location_Name TEXT, Location_Code TEXT);"
      },
      {
        "question": "Which location has the fewest?",
        "query": "SELECT t2.location_name , t1.location_code FROM document_locations AS t1 JOIN ref_locations AS t2 ON t1.location_code = t2.location_code GROUP BY t1.location_code ORDER BY count(*) ASC LIMIT 1",
        "schema": "CREATE TABLE Document_Locations (Date_in_Location_From TIME, Location_Code TEXT, Document_ID NUMBER); CREATE TABLE All_Documents (Document_Name TEXT, Document_ID NUMBER); CREATE TABLE Ref_Locations (Location_Name TEXT, Location_Code TEXT, Location_Description TEXT);"
      }
    ],
    [
      {
        "question": "Show all employee names.",
        "query": "SELECT employee_name FROM employees",
        "schema": "CREATE TABLE Employees (Employee_Name TEXT, Role_Code TEXT, Employee_ID NUMBER); CREATE TABLE Roles (Role_Code TEXT);"
      },
      {
        "question": "What are the names of the employees who authorized document destruction.",
        "query": "SELECT t2.employee_name FROM documents_to_be_destroyed AS t1 JOIN employees AS t2 ON t1.destruction_authorised_by_employee_id = t2.employee_id",
        "schema": "CREATE TABLE All_Documents (Document_ID NUMBER, Document_Name TEXT); CREATE TABLE Documents_to_be_Destroyed (Destruction_Authorised_by_Employee_ID NUMBER, Destroyed_by_Employee_ID NUMBER, Document_ID NUMBER); CREATE TABLE Roles (Role_Code TEXT); CREATE TABLE Employees (Employee_ID NUMBER, Role_Code TEXT, Employee_Name TEXT);"
      },
      {
        "question": "Also show the names for those who destroyed the corresponding documents.",
        "query": "SELECT t2.employee_name , t3.employee_name FROM documents_to_be_destroyed AS t1 JOIN employees AS t2 ON t1.destruction_authorised_by_employee_id = t2.employee_id JOIN employees AS t3 ON t1.destroyed_by_employee_id = t3.employee_id",
        "schema": "CREATE TABLE Roles (Role_Code TEXT); CREATE TABLE Documents_to_be_Destroyed (Destruction_Authorised_by_Employee_ID NUMBER, Document_ID NUMBER, Destroyed_by_Employee_ID NUMBER); CREATE TABLE All_Documents (Document_ID NUMBER, Document_Name TEXT); CREATE TABLE Employees (Role_Code TEXT, Employee_Name TEXT, Employee_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show the id of each employee who has authorized document destruction.",
        "query": "SELECT destruction_authorised_by_employee_id FROM documents_to_be_destroyed",
        "schema": "CREATE TABLE Roles (Role_Code TEXT); CREATE TABLE Documents_to_be_Destroyed (Destruction_Authorised_by_Employee_ID NUMBER, Document_ID NUMBER, Destroyed_by_Employee_ID NUMBER); CREATE TABLE All_Documents (Document_ID NUMBER); CREATE TABLE Employees (Employee_Name TEXT, Role_Code TEXT, Employee_ID NUMBER);"
      },
      {
        "question": "For each of them, count the number of destroyed documents they authorized.",
        "query": "SELECT destruction_authorised_by_employee_id , count(*) FROM documents_to_be_destroyed GROUP BY destruction_authorised_by_employee_id",
        "schema": "CREATE TABLE All_Documents (Document_ID NUMBER); CREATE TABLE Documents_to_be_Destroyed (Destroyed_by_Employee_ID NUMBER, Document_ID NUMBER, Destruction_Authorised_by_Employee_ID NUMBER); CREATE TABLE Roles (Role_Code TEXT); CREATE TABLE Employees (Employee_Name TEXT, Role_Code TEXT, Employee_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show the employee ids having destroyed some documents.",
        "query": "SELECT destroyed_by_employee_id FROM documents_to_be_destroyed",
        "schema": "CREATE TABLE All_Documents (Document_ID NUMBER); CREATE TABLE Employees (Employee_ID NUMBER, Employee_Name TEXT); CREATE TABLE Document_Locations (Document_ID NUMBER); CREATE TABLE Documents_to_be_Destroyed (Other_Details TEXT, Destruction_Authorised_by_Employee_ID NUMBER, Destroyed_by_Employee_ID NUMBER, Document_ID NUMBER);"
      },
      {
        "question": "For each employee, how many documents did they destroy?",
        "query": "SELECT destroyed_by_employee_id , count(*) FROM documents_to_be_destroyed GROUP BY destroyed_by_employee_id",
        "schema": "CREATE TABLE All_Documents (Document_ID NUMBER); CREATE TABLE Documents_to_be_Destroyed (Other_Details TEXT, Document_ID NUMBER, Destroyed_by_Employee_ID NUMBER, Destruction_Authorised_by_Employee_ID NUMBER); CREATE TABLE Employees (Employee_ID NUMBER, Employee_Name TEXT); CREATE TABLE Document_Locations (Document_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show the ids of the employees having authorized any document destruction.",
        "query": "SELECT destruction_authorised_by_employee_id FROM documents_to_be_destroyed",
        "schema": "CREATE TABLE Employees (Employee_ID NUMBER, Role_Code TEXT, Employee_Name TEXT); CREATE TABLE All_Documents (Document_ID NUMBER); CREATE TABLE Roles (Role_Code TEXT); CREATE TABLE Documents_to_be_Destroyed (Destruction_Authorised_by_Employee_ID NUMBER, Document_ID NUMBER, Destroyed_by_Employee_ID NUMBER);"
      },
      {
        "question": "How about those who didn't?",
        "query": "SELECT employee_id FROM employees EXCEPT SELECT destruction_authorised_by_employee_id FROM documents_to_be_destroyed",
        "schema": "CREATE TABLE Documents_to_be_Destroyed (Destroyed_by_Employee_ID NUMBER, Document_ID NUMBER, Destruction_Authorised_by_Employee_ID NUMBER); CREATE TABLE All_Documents (Document_ID NUMBER); CREATE TABLE Roles (Role_Code TEXT); CREATE TABLE Employees (Employee_Name TEXT, Role_Code TEXT, Employee_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show the id of all authorizing employees for documents to be destroyed.",
        "query": "SELECT destruction_authorised_by_employee_id FROM documents_to_be_destroyed",
        "schema": "CREATE TABLE Employees (Employee_ID NUMBER, Role_Code TEXT); CREATE TABLE Documents_to_be_Destroyed (Document_ID NUMBER, Destruction_Authorised_by_Employee_ID NUMBER, Destroyed_by_Employee_ID NUMBER, Other_Details TEXT); CREATE TABLE All_Documents (Document_ID NUMBER);"
      },
      {
        "question": "Show only distinct ids.",
        "query": "SELECT DISTINCT destruction_authorised_by_employee_id FROM documents_to_be_destroyed",
        "schema": "CREATE TABLE Documents_to_be_Destroyed (Other_Details TEXT, Document_ID NUMBER, Destroyed_by_Employee_ID NUMBER, Destruction_Authorised_by_Employee_ID NUMBER); CREATE TABLE Employees (Role_Code TEXT, Employee_ID NUMBER); CREATE TABLE All_Documents (Document_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show ids for employees who destroyed a document.",
        "query": "SELECT destroyed_by_employee_id FROM documents_to_be_destroyed",
        "schema": "CREATE TABLE All_Documents (Document_ID NUMBER); CREATE TABLE Employees (Role_Code TEXT, Employee_ID NUMBER, Employee_Name TEXT); CREATE TABLE Documents_to_be_Destroyed (Destruction_Authorised_by_Employee_ID NUMBER, Destroyed_by_Employee_ID NUMBER, Document_ID NUMBER);"
      },
      {
        "question": "What are the distinct results?",
        "query": "SELECT DISTINCT destroyed_by_employee_id FROM documents_to_be_destroyed",
        "schema": "CREATE TABLE Documents_to_be_Destroyed (Destruction_Authorised_by_Employee_ID NUMBER, Destroyed_by_Employee_ID NUMBER, Document_ID NUMBER); CREATE TABLE All_Documents (Document_ID NUMBER); CREATE TABLE Employees (Employee_ID NUMBER, Role_Code TEXT, Employee_Name TEXT);"
      }
    ],
    [
      {
        "question": "Show all employee ids.",
        "query": "SELECT employee_id FROM employees",
        "schema": "CREATE TABLE Employees (Employee_ID NUMBER, Role_Code TEXT, Employee_Name TEXT); CREATE TABLE Documents_to_be_Destroyed (Destroyed_by_Employee_ID NUMBER, Destruction_Authorised_by_Employee_ID NUMBER); CREATE TABLE Roles (Role_Code TEXT);"
      },
      {
        "question": "Show all employee ids who have destroyed a document.",
        "query": "SELECT destroyed_by_employee_id FROM documents_to_be_destroyed",
        "schema": "CREATE TABLE Documents_to_be_Destroyed (Destroyed_by_Employee_ID NUMBER, Destruction_Authorised_by_Employee_ID NUMBER, Document_ID NUMBER); CREATE TABLE Employees (Role_Code TEXT, Employee_Name TEXT, Employee_ID NUMBER); CREATE TABLE All_Documents (Document_ID NUMBER); CREATE TABLE Roles (Role_Code TEXT);"
      },
      {
        "question": "How about those who haven't?",
        "query": "SELECT employee_id FROM employees EXCEPT SELECT destroyed_by_employee_id FROM documents_to_be_destroyed",
        "schema": "CREATE TABLE All_Documents (Document_ID NUMBER); CREATE TABLE Documents_to_be_Destroyed (Document_ID NUMBER, Destruction_Authorised_by_Employee_ID NUMBER, Destroyed_by_Employee_ID NUMBER); CREATE TABLE Employees (Role_Code TEXT, Employee_ID NUMBER, Employee_Name TEXT); CREATE TABLE Roles (Role_Code TEXT);"
      }
    ]
  ],
  "book_2": [
    [
      {
        "question": "I want to know the information of all the publications.",
        "query": "SELECT * FROM publication",
        "schema": "CREATE TABLE book (Book_ID NUMBER); CREATE TABLE publication (Book_ID NUMBER, Publisher TEXT, Publication_ID NUMBER);"
      },
      {
        "question": "Just tell me publishers from the tables above.",
        "query": "SELECT publisher FROM publication",
        "schema": "CREATE TABLE publication (Publisher TEXT, Book_ID NUMBER, Publication_ID NUMBER); CREATE TABLE book (Book_ID NUMBER);"
      },
      {
        "question": "Thanks. Could you tell me who is the richest?",
        "query": "SELECT publisher FROM publication ORDER BY price DESC LIMIT 1",
        "schema": "CREATE TABLE book (Book_ID NUMBER); CREATE TABLE publication (Book_ID NUMBER, Publisher TEXT, Publication_ID NUMBER, Price NUMBER);"
      }
    ],
    [
      {
        "question": "What's the price of the publication published by Wiley?",
        "query": "SELECT price FROM publication WHERE publisher = \"Wiley\"",
        "schema": "CREATE TABLE publication (Publisher TEXT, Price NUMBER, Publication_ID NUMBER, Book_ID NUMBER); CREATE TABLE book (Book_ID NUMBER, Title TEXT);"
      },
      {
        "question": "How about Pearson's?",
        "query": "SELECT price FROM publication WHERE publisher = \"Pearson\"",
        "schema": "CREATE TABLE book (Title TEXT, Book_ID NUMBER); CREATE TABLE publication (Publication_ID NUMBER, Publisher TEXT, Book_ID NUMBER, Price NUMBER);"
      },
      {
        "question": "Okay. I want to know the publication dates of publications with 3 lowest prices now.",
        "query": "SELECT publication_date FROM publication ORDER BY price ASC LIMIT 3",
        "schema": "CREATE TABLE book (Title TEXT, Book_ID NUMBER); CREATE TABLE publication (Price NUMBER, Publisher TEXT, Publication_Date TEXT, Book_ID NUMBER, Publication_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Could you tell me the book with published price more than 4000000?",
        "query": "SELECT t1.title FROM book AS t1 JOIN publication AS t2 ON t1.book_id = t2.book_id WHERE t2.price > 4000000",
        "schema": "CREATE TABLE publication (Publisher TEXT, Book_ID NUMBER, Price NUMBER); CREATE TABLE book (Book_ID NUMBER, Title TEXT);"
      },
      {
        "question": "Who were their writers?",
        "query": "SELECT t1.writer FROM book AS t1 JOIN publication AS t2 ON t1.book_id = t2.book_id WHERE t2.price > 4000000",
        "schema": "CREATE TABLE book (Title TEXT, Writer TEXT, Book_ID NUMBER); CREATE TABLE publication (Book_ID NUMBER, Publisher TEXT, Price NUMBER, Publication_ID NUMBER);"
      }
    ],
    [
      {
        "question": "I want to know the publication price of the book with title \"Cyberella\"?",
        "query": "SELECT t2.price FROM book AS t1 JOIN publication AS t2 ON t1.book_id = t2.book_id WHERE t1.title = \"Cyberella\"",
        "schema": "CREATE TABLE publication (Price NUMBER, Book_ID NUMBER, Publication_ID NUMBER); CREATE TABLE book (Book_ID NUMBER, Title TEXT);"
      },
      {
        "question": "Could you show me all the books' publication price?",
        "query": "SELECT t2.price FROM book AS t1 JOIN publication AS t2 ON t1.book_id = t2.book_id",
        "schema": "CREATE TABLE publication (Price NUMBER, Book_ID NUMBER, Publication_ID NUMBER); CREATE TABLE book (Book_ID NUMBER, Title TEXT);"
      },
      {
        "question": "Okay. I want all the books' titles in descending order of publication price.",
        "query": "SELECT t1.title FROM book AS t1 JOIN publication AS t2 ON t1.book_id = t2.book_id ORDER BY t2.price DESC",
        "schema": "CREATE TABLE book (Book_ID NUMBER, Title TEXT); CREATE TABLE publication (Price NUMBER, Publication_ID NUMBER, Book_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Tell me the publisher of the book Bloody Mary : Lady Liberty.",
        "query": "SELECT t2.publisher FROM book AS t1 JOIN publication AS t2 ON t1.book_id = t2.book_id WHERE t1.title = \"Bloody Mary : Lady Liberty\"",
        "schema": "CREATE TABLE publication (Publisher TEXT, Book_ID NUMBER); CREATE TABLE book (Title TEXT, Book_ID NUMBER);"
      },
      {
        "question": "How many publications does this publisher have?",
        "query": "SELECT count(*) FROM publication WHERE publisher = (SELECT t2.publisher FROM book AS t1 JOIN publication AS t2 ON t1.book_id = t2.book_id WHERE t1.title = \"Bloody Mary : Lady Liberty\")",
        "schema": "CREATE TABLE publication (Book_ID NUMBER, Publication_ID NUMBER, Publisher TEXT); CREATE TABLE book (Title TEXT, Book_ID NUMBER);"
      },
      {
        "question": "Tell me the publishers that have more than one publication.",
        "query": "SELECT publisher FROM publication GROUP BY publisher HAVING count(*) > 1",
        "schema": "CREATE TABLE book (Book_ID NUMBER, Title TEXT); CREATE TABLE publication (Publication_ID NUMBER, Book_ID NUMBER, Publisher TEXT);"
      }
    ],
    [
      {
        "question": "Tell me the publication date of the book\ufeffDead Corps.",
        "query": "SELECT t2.publication_date FROM book AS t1 JOIN publication AS t2 ON t1.book_id = t2.book_id WHERE t1.title = \"Dead Corps\"",
        "schema": "CREATE TABLE book (Title TEXT, Issues NUMBER, Book_ID NUMBER); CREATE TABLE publication (Publication_ID NUMBER, Book_ID NUMBER, Publication_Date TEXT);"
      },
      {
        "question": "How about the book Cyberella?",
        "query": "SELECT t2.publication_date FROM book AS t1 JOIN publication AS t2 ON t1.book_id = t2.book_id WHERE t1.title = \"Cyberella\"",
        "schema": "CREATE TABLE book (Issues NUMBER, Title TEXT, Book_ID NUMBER); CREATE TABLE publication (Publication_ID NUMBER, Book_ID NUMBER, Publication_Date TEXT);"
      },
      {
        "question": "Okay, please show me the most common publication date.",
        "query": "SELECT publication_date FROM publication GROUP BY publication_date ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE publication (Publication_Date TEXT, Publication_ID NUMBER, Book_ID NUMBER); CREATE TABLE book (Book_ID NUMBER, Issues NUMBER, Title TEXT);"
      }
    ],
    [
      {
        "question": "Tell me the writer of\ufeff Gemini Blood.",
        "query": "SELECT writer FROM book WHERE title = \"Gemini Blood\"",
        "schema": "CREATE TABLE publication (Book_ID NUMBER); CREATE TABLE book (Book_ID NUMBER, Writer TEXT, Title TEXT);"
      },
      {
        "question": "Tell me all the books he wrote.",
        "query": "SELECT title FROM book WHERE writer = (SELECT writer FROM book WHERE title = \"Gemini Blood\")",
        "schema": "CREATE TABLE publication (Book_ID NUMBER); CREATE TABLE book (Writer TEXT, Book_ID NUMBER, Title TEXT);"
      },
      {
        "question": "Okay, show me the writers who have written more than one book.",
        "query": "SELECT writer FROM book GROUP BY writer HAVING count(*) > 1",
        "schema": "CREATE TABLE book (Writer TEXT, Title TEXT, Book_ID NUMBER); CREATE TABLE publication (Book_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Tell me the publisher of the book Bloody Mary : Lady Liberty.",
        "query": "SELECT t2.publisher FROM book AS t1 JOIN publication AS t2 ON t1.book_id = t2.book_id WHERE t1.title = \"Bloody Mary : Lady Liberty\"",
        "schema": "CREATE TABLE book (Title TEXT, Book_ID NUMBER); CREATE TABLE publication (Book_ID NUMBER, Publisher TEXT);"
      },
      {
        "question": "How about the publisher of the book with title Gemini Blood?",
        "query": "SELECT t2.publisher FROM book AS t1 JOIN publication AS t2 ON t1.book_id = t2.book_id WHERE t1.title = \"Gemini Blood\"",
        "schema": "CREATE TABLE book (Book_ID NUMBER, Title TEXT); CREATE TABLE publication (Book_ID NUMBER, Publisher TEXT);"
      },
      {
        "question": "Tell me the books that are not published.",
        "query": "SELECT title FROM book WHERE book_id NOT IN (SELECT book_id FROM publication)",
        "schema": "CREATE TABLE book (Title TEXT, Book_ID NUMBER); CREATE TABLE publication (Publisher TEXT, Book_ID NUMBER, Publication_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Tell me the publishers that have publications with price higher than 10000000.",
        "query": "SELECT publisher FROM publication WHERE price > 10000000",
        "schema": "CREATE TABLE publication (Price NUMBER, Publisher TEXT);"
      },
      {
        "question": "Tell me the publishers that have publications with price lower than 5000000.",
        "query": "SELECT publisher FROM publication WHERE price < 5000000",
        "schema": "CREATE TABLE publication (Price NUMBER, Publisher TEXT);"
      },
      {
        "question": "Okay. Show me the people in both lists.",
        "query": "SELECT publisher FROM publication WHERE price > 10000000 INTERSECT SELECT publisher FROM publication WHERE price < 5000000",
        "schema": "CREATE TABLE publication (Price NUMBER, Publisher TEXT);"
      }
    ]
  ],
  "performance_attendance": [
    [
      {
        "question": "What are the dates of the performances?",
        "query": "SELECT Date FROM performance",
        "schema": "CREATE TABLE performance (Date TEXT, Performance_ID NUMBER);"
      },
      {
        "question": "How about the locations?",
        "query": "SELECT LOCATION FROM performance",
        "schema": "CREATE TABLE performance (Location TEXT, Date TEXT, Performance_ID NUMBER);"
      },
      {
        "question": "How many performances are there?",
        "query": "SELECT count(*) FROM performance",
        "schema": "CREATE TABLE performance (Date TEXT, Location TEXT, Performance_ID NUMBER, Attendance NUMBER);"
      }
    ],
    [
      {
        "question": "Who are the members of the performances?",
        "query": "SELECT name FROM member",
        "schema": "CREATE TABLE member_attendance (Performance_ID NUMBER, Member_ID NUMBER); CREATE TABLE member (Name TEXT, Role TEXT, Member_ID TEXT); CREATE TABLE performance (Performance_ID NUMBER);"
      },
      {
        "question": "How about the hosts?",
        "query": "SELECT HOST FROM performance",
        "schema": "CREATE TABLE member (Name TEXT, Role TEXT, Member_ID TEXT); CREATE TABLE member_attendance (Performance_ID NUMBER, Member_ID NUMBER); CREATE TABLE performance (Performance_ID NUMBER, Host TEXT);"
      },
      {
        "question": "Order the result by ascending order of attendance.",
        "query": "SELECT HOST FROM performance ORDER BY attendance ASC",
        "schema": "CREATE TABLE member (Role TEXT, Member_ID TEXT, Name TEXT); CREATE TABLE member_attendance (Performance_ID NUMBER, Member_ID NUMBER); CREATE TABLE performance (Host TEXT, Performance_ID NUMBER, Attendance NUMBER);"
      }
    ],
    [
      {
        "question": "How many people attended the performances?",
        "query": "SELECT attendance FROM performance",
        "schema": "CREATE TABLE member_attendance (Performance_ID NUMBER, Num_of_Pieces NUMBER); CREATE TABLE performance (Performance_ID NUMBER, Attendance NUMBER, Host TEXT); CREATE TABLE member (Member_ID TEXT);"
      },
      {
        "question": "On what dates are they held?",
        "query": "SELECT Date FROM performance",
        "schema": "CREATE TABLE performance (Attendance NUMBER, Performance_ID NUMBER, Location TEXT, Date TEXT, Host TEXT); CREATE TABLE member (Member_ID TEXT); CREATE TABLE member_attendance (Performance_ID NUMBER, Num_of_Pieces NUMBER);"
      },
      {
        "question": "Add the locations to the result.",
        "query": "SELECT Date, LOCATION FROM performance",
        "schema": "CREATE TABLE member (Member_ID TEXT); CREATE TABLE member_attendance (Performance_ID NUMBER, Num_of_Pieces NUMBER); CREATE TABLE performance (Location TEXT, Performance_ID NUMBER, Host TEXT, Date TEXT, Attendance NUMBER);"
      }
    ],
    [
      {
        "question": "Show me the dates of the performances.",
        "query": "SELECT Date FROM performance",
        "schema": "CREATE TABLE performance (Performance_ID NUMBER, Date TEXT);"
      },
      {
        "question": "How about the attendances?",
        "query": "SELECT attendance FROM performance",
        "schema": "CREATE TABLE performance (Performance_ID NUMBER, Date TEXT, Attendance NUMBER); CREATE TABLE member_attendance (Performance_ID NUMBER);"
      },
      {
        "question": "Among the results, which are performed at \"TD Garden\" or \"Bell Centre\"?",
        "query": "SELECT attendance FROM performance WHERE LOCATION = \"TD Garden\" OR LOCATION = \"Bell Centre\"",
        "schema": "CREATE TABLE performance (Date TEXT, Attendance NUMBER, Performance_ID NUMBER, Location TEXT); CREATE TABLE member_attendance (Performance_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What is the maximum number of attendees for performances?",
        "query": "SELECT max(attendance) FROM performance",
        "schema": "CREATE TABLE performance (Attendance NUMBER, Performance_ID NUMBER); CREATE TABLE member_attendance (Performance_ID NUMBER);"
      },
      {
        "question": "How about the total sum?",
        "query": "SELECT sum(attendance) FROM performance",
        "schema": "CREATE TABLE member_attendance (Performance_ID NUMBER); CREATE TABLE performance (Performance_ID NUMBER, Attendance NUMBER);"
      },
      {
        "question": "What is the average number of attendees for performances?",
        "query": "SELECT avg(attendance) FROM performance",
        "schema": "CREATE TABLE member_attendance (Performance_ID NUMBER); CREATE TABLE performance (Attendance NUMBER, Performance_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Where are the performances?",
        "query": "SELECT LOCATION FROM performance",
        "schema": "CREATE TABLE performance (Performance_ID NUMBER, Date TEXT, Attendance NUMBER, Host TEXT, Location TEXT); CREATE TABLE member_attendance (Performance_ID NUMBER);"
      },
      {
        "question": "On what date are they held?",
        "query": "SELECT Date FROM performance",
        "schema": "CREATE TABLE member_attendance (Performance_ID NUMBER); CREATE TABLE performance (Location TEXT, Date TEXT, Performance_ID NUMBER, Host TEXT, Attendance NUMBER);"
      },
      {
        "question": "Among the result, show me the one with the lowest number of attendees.",
        "query": "SELECT Date FROM performance ORDER BY attendance ASC LIMIT 1",
        "schema": "CREATE TABLE member_attendance (Performance_ID NUMBER); CREATE TABLE performance (Location TEXT, Date TEXT, Attendance NUMBER, Performance_ID NUMBER, Host TEXT);"
      },
      {
        "question": "What about highest number of attendees?",
        "query": "SELECT Date FROM performance ORDER BY attendance DESC LIMIT 1",
        "schema": "CREATE TABLE performance (Date TEXT, Attendance NUMBER, Host TEXT, Location TEXT, Performance_ID NUMBER); CREATE TABLE member_attendance (Performance_ID NUMBER);"
      }
    ],
    [
      {
        "question": "How many attendees are there for the performances?",
        "query": "SELECT attendance FROM performance",
        "schema": "CREATE TABLE member_attendance (Performance_ID NUMBER); CREATE TABLE performance (Attendance NUMBER, Performance_ID NUMBER);"
      },
      {
        "question": "What are the distinct locations of each performance?",
        "query": "SELECT LOCATION FROM performance GROUP BY LOCATION",
        "schema": "CREATE TABLE performance (Performance_ID NUMBER, Location TEXT, Attendance NUMBER); CREATE TABLE member_attendance (Performance_ID NUMBER);"
      },
      {
        "question": "How many performances are there at each location?",
        "query": "SELECT LOCATION , count(*) FROM performance GROUP BY LOCATION",
        "schema": "CREATE TABLE performance (Location TEXT, Attendance NUMBER, Performance_ID NUMBER); CREATE TABLE member_attendance (Performance_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show different locations and the number of performances at each location.",
        "query": "SELECT LOCATION , count(*) FROM performance GROUP BY LOCATION",
        "schema": "CREATE TABLE performance (Performance_ID NUMBER, Location TEXT);"
      },
      {
        "question": "Which is the least common location?",
        "query": "SELECT LOCATION FROM performance GROUP BY LOCATION ORDER BY count(*) ASC LIMIT 1",
        "schema": "CREATE TABLE performance (Performance_ID NUMBER, Location TEXT);"
      },
      {
        "question": "How about the most common one?",
        "query": "SELECT LOCATION FROM performance GROUP BY LOCATION ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE performance (Performance_ID NUMBER, Location TEXT);"
      }
    ],
    [
      {
        "question": "What are the locations of the performances?",
        "query": "SELECT LOCATION FROM performance",
        "schema": "CREATE TABLE performance (Performance_ID NUMBER, Location TEXT);"
      },
      {
        "question": "Show me the number of performances at each location.",
        "query": "SELECT count(*) FROM performance GROUP BY LOCATION",
        "schema": "CREATE TABLE performance (Performance_ID NUMBER, Location TEXT);"
      },
      {
        "question": "Which locations have at least two performances?",
        "query": "SELECT LOCATION FROM performance GROUP BY LOCATION HAVING count(*) >= 2",
        "schema": "CREATE TABLE performance (Performance_ID NUMBER, Location TEXT);"
      }
    ],
    [
      {
        "question": "What are the locations of performances?",
        "query": "SELECT LOCATION FROM performance",
        "schema": "CREATE TABLE performance (Location TEXT, Performance_ID NUMBER);"
      },
      {
        "question": "How about locations of performances with less than 1000 attendees?",
        "query": "SELECT LOCATION FROM performance WHERE attendance < 1000",
        "schema": "CREATE TABLE performance (Attendance NUMBER, Performance_ID NUMBER, Location TEXT);"
      },
      {
        "question": "What about those with more than 2000 attendees?",
        "query": "SELECT LOCATION FROM performance WHERE attendance > 2000",
        "schema": "CREATE TABLE performance (Location TEXT, Performance_ID NUMBER, Attendance NUMBER);"
      },
      {
        "question": "Show the locations that have both performances with more than 2000 attendees and performances with less than 1000 attendees.",
        "query": "SELECT LOCATION FROM performance WHERE attendance > 2000 INTERSECT SELECT LOCATION FROM performance WHERE attendance < 1000",
        "schema": "CREATE TABLE performance (Attendance NUMBER, Performance_ID NUMBER, Location TEXT);"
      }
    ],
    [
      {
        "question": "What is the role of each member?",
        "query": "SELECT ROLE FROM member",
        "schema": "CREATE TABLE performance (Performance_ID NUMBER); CREATE TABLE member (Role TEXT, Member_ID TEXT, Name TEXT);"
      },
      {
        "question": "How about their names?",
        "query": "SELECT name FROM member",
        "schema": "CREATE TABLE performance (Performance_ID NUMBER); CREATE TABLE member (Role TEXT, Member_ID TEXT, Name TEXT);"
      },
      {
        "question": "Show me in addition the location of the performances they attended.",
        "query": "SELECT t2.name , t3.location FROM member_attendance AS t1 JOIN member AS t2 ON t1.member_id = t2.member_id JOIN performance AS t3 ON t1.performance_id = t3.performance_id",
        "schema": "CREATE TABLE performance (Performance_ID NUMBER, Location TEXT, Attendance NUMBER); CREATE TABLE member_attendance (Performance_ID NUMBER, Member_ID NUMBER); CREATE TABLE member (Role TEXT, Member_ID TEXT, Name TEXT);"
      }
    ],
    [
      {
        "question": "Show me the names of the members.",
        "query": "SELECT name FROM member",
        "schema": "CREATE TABLE member (Member_ID TEXT, Name TEXT, Role TEXT); CREATE TABLE performance (Performance_ID NUMBER);"
      },
      {
        "question": "Sort the result in ascending alphabetical order.",
        "query": "SELECT name FROM member ORDER BY name ASC",
        "schema": "CREATE TABLE member (Member_ID TEXT, Name TEXT, Role TEXT); CREATE TABLE performance (Performance_ID NUMBER);"
      },
      {
        "question": "Also provide the locations of the performances they attended?",
        "query": "SELECT t2.name , t3.location FROM member_attendance AS t1 JOIN member AS t2 ON t1.member_id = t2.member_id JOIN performance AS t3 ON t1.performance_id = t3.performance_id ORDER BY t2.name ASC",
        "schema": "CREATE TABLE member (Role TEXT, Member_ID TEXT, Name TEXT); CREATE TABLE member_attendance (Performance_ID NUMBER, Member_ID NUMBER); CREATE TABLE performance (Performance_ID NUMBER, Location TEXT, Attendance NUMBER);"
      }
    ],
    [
      {
        "question": "Who are the attending members whose roles are \"Viola\"?",
        "query": "SELECT name FROM member WHERE ROLE = \"Viola\"",
        "schema": "CREATE TABLE member_attendance (Performance_ID NUMBER, Member_ID NUMBER); CREATE TABLE member (Role TEXT, Name TEXT, Member_ID TEXT); CREATE TABLE performance (Host TEXT, Performance_ID NUMBER, Attendance NUMBER);"
      },
      {
        "question": "How about Violin?",
        "query": "SELECT name FROM member WHERE ROLE = \"Violin\"",
        "schema": "CREATE TABLE member (Name TEXT, Role TEXT, Member_ID TEXT); CREATE TABLE performance (Host TEXT, Performance_ID NUMBER, Attendance NUMBER); CREATE TABLE member_attendance (Member_ID NUMBER, Performance_ID NUMBER, Num_of_Pieces NUMBER);"
      },
      {
        "question": "Show me the dates of performances in which members in the result attended.",
        "query": "SELECT t3.date FROM member_attendance AS t1 JOIN member AS t2 ON t1.member_id = t2.member_id JOIN performance AS t3 ON t1.performance_id = t3.performance_id WHERE t2.role = \"Violin\"",
        "schema": "CREATE TABLE member (Member_ID TEXT, Name TEXT, Role TEXT); CREATE TABLE performance (Date TEXT, Host TEXT, Attendance NUMBER, Performance_ID NUMBER); CREATE TABLE member_attendance (Performance_ID NUMBER, Member_ID NUMBER, Num_of_Pieces NUMBER);"
      }
    ],
    [
      {
        "question": "Show me all about the members.",
        "query": "SELECT * FROM member",
        "schema": "CREATE TABLE performance (Performance_ID NUMBER); CREATE TABLE member_attendance (Performance_ID NUMBER, Member_ID NUMBER); CREATE TABLE member (Role TEXT, Member_ID TEXT, Name TEXT);"
      },
      {
        "question": "What are the dates of performances that each of them attended? Show name and date.",
        "query": "SELECT t2.name , t3.date FROM member_attendance AS t1 JOIN member AS t2 ON t1.member_id = t2.member_id JOIN performance AS t3 ON t1.performance_id = t3.performance_id",
        "schema": "CREATE TABLE member (Role TEXT, Member_ID TEXT, Name TEXT); CREATE TABLE performance (Attendance NUMBER, Date TEXT, Performance_ID NUMBER); CREATE TABLE member_attendance (Member_ID NUMBER, Performance_ID NUMBER);"
      },
      {
        "question": "Sort the result in descending order of attendance of the performances.",
        "query": "SELECT t2.name , t3.date FROM member_attendance AS t1 JOIN member AS t2 ON t1.member_id = t2.member_id JOIN performance AS t3 ON t1.performance_id = t3.performance_id ORDER BY t3.attendance DESC",
        "schema": "CREATE TABLE performance (Attendance NUMBER, Performance_ID NUMBER, Date TEXT); CREATE TABLE member (Member_ID TEXT, Role TEXT, Name TEXT); CREATE TABLE member_attendance (Performance_ID NUMBER, Member_ID NUMBER);"
      }
    ]
  ],
  "music_2": [
    [
      {
        "question": "Show me all musicians with first name \"Solveig\".",
        "query": "SELECT * FROM band WHERE firstname = \"Solveig\"",
        "schema": "CREATE TABLE Performance (Bandmate NUMBER, SongId NUMBER); CREATE TABLE Band (Lastname TEXT, Id NUMBER, Firstname TEXT); CREATE TABLE Albums (AId NUMBER); CREATE TABLE Songs (SongId NUMBER); CREATE TABLE Vocals (Bandmate NUMBER);"
      },
      {
        "question": "Show me their stage positions.",
        "query": "SELECT DISTINCT t1.stageposition FROM performance AS t1 JOIN band AS t2 ON t1.bandmate = t2.id WHERE firstname = \"Solveig\"",
        "schema": "CREATE TABLE Albums (AId NUMBER); CREATE TABLE Performance (SongId NUMBER, StagePosition TEXT, Bandmate NUMBER); CREATE TABLE Vocals (Bandmate NUMBER); CREATE TABLE Band (Id NUMBER, Lastname TEXT, Firstname TEXT); CREATE TABLE Songs (SongId NUMBER);"
      }
    ],
    [
      {
        "question": "Show me all artists with last name \"Heilo\"",
        "query": "SELECT * FROM band WHERE lastname = \"Heilo\"",
        "schema": "CREATE TABLE Band (Firstname TEXT, Id NUMBER, Lastname TEXT); CREATE TABLE Performance (Bandmate NUMBER); CREATE TABLE Vocals (Bandmate NUMBER);"
      },
      {
        "question": "Find all the songs they have performed.",
        "query": "SELECT t3.title FROM performance AS t1 JOIN band AS t2 ON t1.bandmate = t2.id JOIN songs AS t3 ON t3.songid = t1.songid WHERE t2.lastname = \"Heilo\"",
        "schema": "CREATE TABLE Tracklists (SongId NUMBER); CREATE TABLE Vocals (Bandmate NUMBER); CREATE TABLE Performance (Bandmate NUMBER, SongId NUMBER); CREATE TABLE Songs (Title TEXT, SongId NUMBER); CREATE TABLE Band (Firstname TEXT, Lastname TEXT, Id NUMBER);"
      }
    ],
    [
      {
        "question": "Show me all the musicians who performed in the song \"Flash\".",
        "query": "SELECT * FROM performance AS t1 JOIN band AS t2 ON t1.bandmate = t2.id JOIN songs AS t3 ON t3.songid = t1.songid WHERE t2.lastname = \"Flash\"",
        "schema": "CREATE TABLE Band (Firstname TEXT, Lastname TEXT, Id NUMBER); CREATE TABLE Performance (Bandmate NUMBER, SongId NUMBER); CREATE TABLE Songs (Title TEXT, SongId NUMBER);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT count(*) FROM performance AS t1 JOIN band AS t2 ON t1.bandmate = t2.id JOIN songs AS t3 ON t3.songid = t1.songid WHERE t3.title = \"Flash\"",
        "schema": "CREATE TABLE Tracklists (SongId NUMBER); CREATE TABLE Instruments (BandmateId NUMBER, SongId NUMBER); CREATE TABLE Vocals (Bandmate NUMBER); CREATE TABLE Songs (SongId NUMBER, Title TEXT); CREATE TABLE Band (Id NUMBER, Firstname TEXT, Lastname TEXT); CREATE TABLE Performance (SongId NUMBER, Bandmate NUMBER);"
      }
    ],
    [
      {
        "question": "Show me all artists with first name \"Marianne\"",
        "query": "SELECT * FROM band WHERE firstname = \"Marianne\"",
        "schema": "CREATE TABLE Performance (Bandmate NUMBER); CREATE TABLE Band (Id NUMBER, Lastname TEXT, Firstname TEXT); CREATE TABLE Vocals (Bandmate NUMBER);"
      },
      {
        "question": "How many songs have they produced in total?",
        "query": "SELECT count(*) FROM performance AS t1 JOIN band AS t2 ON t1.bandmate = t2.id JOIN songs AS t3 ON t3.songid = t1.songid WHERE t2.firstname = \"Marianne\"",
        "schema": "CREATE TABLE Tracklists (SongId NUMBER); CREATE TABLE Songs (Title TEXT, SongId NUMBER); CREATE TABLE Band (Lastname TEXT, Firstname TEXT, Id NUMBER); CREATE TABLE Vocals (Bandmate NUMBER); CREATE TABLE Performance (SongId NUMBER, Bandmate NUMBER);"
      },
      {
        "question": "Show me the names of those songs.",
        "query": "SELECT t3.title FROM performance AS t1 JOIN band AS t2 ON t1.bandmate = t2.id JOIN songs AS t3 ON t3.songid = t1.songid WHERE t2.firstname = \"Marianne\"",
        "schema": "CREATE TABLE Tracklists (SongId NUMBER); CREATE TABLE Band (Firstname TEXT, Id NUMBER, Lastname TEXT); CREATE TABLE Songs (Title TEXT, SongId NUMBER); CREATE TABLE Performance (Bandmate NUMBER, SongId NUMBER); CREATE TABLE Vocals (Bandmate NUMBER);"
      }
    ],
    [
      {
        "question": "Show me all songs containing the word \"Badlands\".",
        "query": "SELECT * FROM songs WHERE title LIKE \"%Badlands%\"",
        "schema": "CREATE TABLE Songs (Title TEXT, SongId NUMBER); CREATE TABLE Tracklists (SongId NUMBER);"
      },
      {
        "question": "How about a song exactly named \"Badlands\"?",
        "query": "SELECT * FROM songs WHERE title = \"Badlands\"",
        "schema": "CREATE TABLE Tracklists (SongId NUMBER); CREATE TABLE Songs (Title TEXT, SongId NUMBER);"
      },
      {
        "question": "Who performed it? Show me the first and last names.",
        "query": "SELECT t2.firstname , t2.lastname FROM performance AS t1 JOIN band AS t2 ON t1.bandmate = t2.id JOIN songs AS t3 ON t3.songid = t1.songid WHERE t3.title = \"Badlands\"",
        "schema": "CREATE TABLE Songs (SongId NUMBER, Title TEXT); CREATE TABLE Performance (SongId NUMBER, Bandmate NUMBER); CREATE TABLE Tracklists (SongId NUMBER); CREATE TABLE Band (Firstname TEXT, Id NUMBER, Lastname TEXT);"
      }
    ],
    [
      {
        "question": "Show me all songs containing the word \"Badlands\".",
        "query": "SELECT * FROM songs WHERE title LIKE \"%Badlands%\"",
        "schema": "CREATE TABLE Tracklists (SongId NUMBER); CREATE TABLE Songs (Title TEXT, SongId NUMBER);"
      },
      {
        "question": "How about a song exactly named \"Badlands\"?",
        "query": "SELECT * FROM songs WHERE title = \"Badlands\"",
        "schema": "CREATE TABLE Songs (SongId NUMBER, Title TEXT); CREATE TABLE Tracklists (SongId NUMBER);"
      },
      {
        "question": "Who performed it in the back stage position? Show me the first and last names.",
        "query": "SELECT t2.firstname , t2.lastname FROM performance AS t1 JOIN band AS t2 ON t1.bandmate = t2.id JOIN songs AS t3 ON t3.songid = t1.songid WHERE t3.title = \"Badlands\" AND t1.stageposition = \"back\"",
        "schema": "CREATE TABLE Tracklists (SongId NUMBER); CREATE TABLE Band (Id NUMBER, Firstname TEXT, Lastname TEXT); CREATE TABLE Performance (SongId NUMBER, StagePosition TEXT, Bandmate NUMBER); CREATE TABLE Songs (Title TEXT, SongId NUMBER);"
      }
    ],
    [
      {
        "question": "Show me all the labels of each album.",
        "query": "SELECT label FROM albums",
        "schema": "CREATE TABLE Band (Id NUMBER); CREATE TABLE Tracklists (AlbumId NUMBER); CREATE TABLE Albums (Label TEXT, AId NUMBER, Title TEXT, Type TEXT);"
      },
      {
        "question": "Among those, which one has the most albums?",
        "query": "SELECT label FROM albums GROUP BY label ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Band (Id NUMBER); CREATE TABLE Albums (AId NUMBER, Type TEXT, Label TEXT, Title TEXT); CREATE TABLE Tracklists (AlbumId NUMBER);"
      }
    ],
    [
      {
        "question": "What is the first name of the musician that have produced the least number of songs?",
        "query": "SELECT t2.lastname FROM performance AS t1 JOIN band AS t2 ON t1.bandmate = t2.id JOIN songs AS t3 ON t3.songid = t1.songid GROUP BY lastname ORDER BY count(*) ASC LIMIT 1",
        "schema": "CREATE TABLE Songs (Title TEXT, SongId NUMBER); CREATE TABLE Band (Lastname TEXT, Firstname TEXT, Id NUMBER); CREATE TABLE Performance (SongId NUMBER, Bandmate NUMBER);"
      },
      {
        "question": "How about the musician who have produced the most number of songs?",
        "query": "SELECT t2.lastname FROM performance AS t1 JOIN band AS t2 ON t1.bandmate = t2.id JOIN songs AS t3 ON t3.songid = t1.songid GROUP BY lastname ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Songs (Title TEXT, SongId NUMBER); CREATE TABLE Band (Lastname TEXT, Firstname TEXT, Id NUMBER); CREATE TABLE Performance (Bandmate NUMBER, SongId NUMBER);"
      }
    ],
    [
      {
        "question": "Show me last names of all the musicians who have been at the back position.",
        "query": "SELECT t2.lastname FROM performance AS t1 JOIN band AS t2 ON t1.bandmate = t2.id WHERE stageposition = \"back\"",
        "schema": "CREATE TABLE Vocals (Bandmate NUMBER); CREATE TABLE Band (Firstname TEXT, Lastname TEXT, Id NUMBER); CREATE TABLE Performance (StagePosition TEXT, Bandmate NUMBER, SongId NUMBER); CREATE TABLE Tracklists (Position NUMBER); CREATE TABLE Songs (SongId NUMBER);"
      },
      {
        "question": "Who has been at the back position the most?",
        "query": "SELECT t2.lastname FROM performance AS t1 JOIN band AS t2 ON t1.bandmate = t2.id WHERE stageposition = \"back\" GROUP BY lastname ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Tracklists (Position NUMBER); CREATE TABLE Performance (StagePosition TEXT, Bandmate NUMBER, SongId NUMBER); CREATE TABLE Songs (SongId NUMBER); CREATE TABLE Band (Firstname TEXT, Lastname TEXT, Id NUMBER); CREATE TABLE Vocals (Bandmate NUMBER);"
      }
    ],
    [
      {
        "question": "Find all the songs whose name starts with the word \"the\".",
        "query": "SELECT title FROM songs WHERE title LIKE 'the %'",
        "schema": "CREATE TABLE Songs (Title TEXT, SongId NUMBER); CREATE TABLE Tracklists (SongId NUMBER);"
      },
      {
        "question": "Find all songs that contains that word.",
        "query": "SELECT title FROM songs WHERE title LIKE '% the %'",
        "schema": "CREATE TABLE Tracklists (SongId NUMBER); CREATE TABLE Songs (Title TEXT, SongId NUMBER);"
      }
    ],
    [
      {
        "question": "Find me the id of the song called \"Le Pop\".",
        "query": "SELECT songid FROM songs WHERE title = \"Le Pop\"",
        "schema": "CREATE TABLE Songs (SongId NUMBER, Title TEXT); CREATE TABLE Vocals (SongId NUMBER); CREATE TABLE Tracklists (SongId NUMBER); CREATE TABLE Band (Id NUMBER);"
      },
      {
        "question": "Which instruments were used in that song?",
        "query": "SELECT t4.instrument FROM performance AS t1 JOIN band AS t2 ON t1.bandmate = t2.id JOIN songs AS t3 ON t3.songid = t1.songid JOIN instruments AS t4 ON t4.songid = t3.songid AND t4.bandmateid = t2.id WHERE t3.title = \"Le Pop\"",
        "schema": "CREATE TABLE Performance (Bandmate NUMBER, SongId NUMBER); CREATE TABLE Tracklists (SongId NUMBER); CREATE TABLE Songs (Title TEXT, SongId NUMBER); CREATE TABLE Vocals (SongId NUMBER); CREATE TABLE Band (Lastname TEXT, Id NUMBER); CREATE TABLE Instruments (SongId NUMBER, BandmateId NUMBER, Instrument TEXT);"
      },
      {
        "question": "Which instrument did the musician with last name \"Heilo\" play?",
        "query": "SELECT t4.instrument FROM performance AS t1 JOIN band AS t2 ON t1.bandmate = t2.id JOIN songs AS t3 ON t3.songid = t1.songid JOIN instruments AS t4 ON t4.songid = t3.songid AND t4.bandmateid = t2.id WHERE t2.lastname = \"Heilo\" AND t3.title = \"Le Pop\"",
        "schema": "CREATE TABLE Instruments (SongId NUMBER, BandmateId NUMBER, Instrument TEXT); CREATE TABLE Songs (Title TEXT, SongId NUMBER); CREATE TABLE Vocals (SongId NUMBER); CREATE TABLE Performance (Bandmate NUMBER, SongId NUMBER); CREATE TABLE Tracklists (SongId NUMBER); CREATE TABLE Band (Firstname TEXT, Lastname TEXT, Id NUMBER);"
      }
    ],
    [
      {
        "question": "How many times was each instrument used?",
        "query": "SELECT instrument, count(*) FROM instruments GROUP BY instrument",
        "schema": "CREATE TABLE Instruments (SongId NUMBER, Instrument TEXT, BandmateId NUMBER); CREATE TABLE Band (Id NUMBER); CREATE TABLE Performance (StagePosition TEXT, Bandmate NUMBER);"
      },
      {
        "question": "Which instrument was the most used?",
        "query": "SELECT instrument FROM instruments GROUP BY instrument ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Instruments (BandmateId NUMBER, Instrument TEXT, SongId NUMBER); CREATE TABLE Performance (StagePosition TEXT, Bandmate NUMBER); CREATE TABLE Band (Id NUMBER);"
      }
    ],
    [
      {
        "question": "How many instruments does the song \"Le Pop\" use?",
        "query": "SELECT count(DISTINCT instrument) FROM instruments AS t1 JOIN songs AS t2 ON t1.songid = t2.songid WHERE title = \"Le Pop\"",
        "schema": "CREATE TABLE Tracklists (SongId NUMBER); CREATE TABLE Instruments (BandmateId NUMBER, Instrument TEXT, SongId NUMBER); CREATE TABLE Band (Id NUMBER); CREATE TABLE Songs (Title TEXT, SongId NUMBER);"
      },
      {
        "question": "List them.",
        "query": "SELECT instrument FROM instruments AS t1 JOIN songs AS t2 ON t1.songid = t2.songid WHERE title = \"Le Pop\"",
        "schema": "CREATE TABLE Albums (Title TEXT); CREATE TABLE Songs (SongId NUMBER, Title TEXT); CREATE TABLE Band (Id NUMBER); CREATE TABLE Tracklists (SongId NUMBER); CREATE TABLE Instruments (SongId NUMBER, BandmateId NUMBER, Instrument TEXT);"
      }
    ],
    [
      {
        "question": "What instruments does the song \"Le Pop\" use?",
        "query": "SELECT instrument FROM instruments AS t1 JOIN songs AS t2 ON t1.songid = t2.songid WHERE title = \"Le Pop\"",
        "schema": "CREATE TABLE Band (Id NUMBER); CREATE TABLE Tracklists (SongId NUMBER); CREATE TABLE Performance (SongId NUMBER); CREATE TABLE Songs (Title TEXT, SongId NUMBER); CREATE TABLE Instruments (SongId NUMBER, Instrument TEXT, BandmateId NUMBER);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT count(DISTINCT instrument) FROM instruments AS t1 JOIN songs AS t2 ON t1.songid = t2.songid WHERE title = \"Le Pop\"",
        "schema": "CREATE TABLE Band (Id NUMBER); CREATE TABLE Tracklists (SongId NUMBER); CREATE TABLE Instruments (SongId NUMBER, Instrument TEXT, BandmateId NUMBER); CREATE TABLE Albums (Title TEXT); CREATE TABLE Performance (SongId NUMBER); CREATE TABLE Songs (SongId NUMBER, Title TEXT);"
      }
    ],
    [
      {
        "question": "What instruments does the musician with last name \"Heilo\" use?",
        "query": "SELECT DISTINCT instrument FROM instruments AS t1 JOIN band AS t2 ON t1.bandmateid = t2.id WHERE t2.lastname = \"Heilo\"",
        "schema": "CREATE TABLE Performance (Bandmate NUMBER); CREATE TABLE Band (Firstname TEXT, Lastname TEXT, Id NUMBER); CREATE TABLE Instruments (BandmateId NUMBER, SongId NUMBER, Instrument TEXT);"
      },
      {
        "question": "How many instruments are used?",
        "query": "SELECT count(DISTINCT instrument) FROM instruments AS t1 JOIN band AS t2 ON t1.bandmateid = t2.id WHERE t2.lastname = \"Heilo\"",
        "schema": "CREATE TABLE Band (Lastname TEXT, Id NUMBER, Firstname TEXT); CREATE TABLE Performance (Bandmate NUMBER); CREATE TABLE Instruments (BandmateId NUMBER, SongId NUMBER, Instrument TEXT);"
      }
    ],
    [
      {
        "question": "How many instruments have the musician with last name \"Heilo\" ever use?",
        "query": "SELECT count(instrument) FROM instruments AS t1 JOIN band AS t2 ON t1.bandmateid = t2.id WHERE t2.lastname = \"Heilo\"",
        "schema": "CREATE TABLE Band (Lastname TEXT, Firstname TEXT, Id NUMBER); CREATE TABLE Instruments (SongId NUMBER, BandmateId NUMBER, Instrument TEXT); CREATE TABLE Performance (Bandmate NUMBER);"
      },
      {
        "question": "List those instruments",
        "query": "SELECT instrument FROM instruments AS t1 JOIN band AS t2 ON t1.bandmateid = t2.id WHERE t2.lastname = \"Heilo\"",
        "schema": "CREATE TABLE Band (Id NUMBER, Firstname TEXT, Lastname TEXT); CREATE TABLE Performance (Bandmate NUMBER); CREATE TABLE Instruments (SongId NUMBER, BandmateId NUMBER, Instrument TEXT);"
      }
    ],
    [
      {
        "question": "Show me how many vocals each song uses.",
        "query": "SELECT count(*) FROM vocals AS t1 JOIN songs AS t2 ON t1.songid = t2.songid GROUP BY t1.songid",
        "schema": "CREATE TABLE Band (Id NUMBER); CREATE TABLE Vocals (Type TEXT, SongId NUMBER); CREATE TABLE Instruments (SongId NUMBER); CREATE TABLE Tracklists (AlbumId NUMBER, SongId NUMBER); CREATE TABLE Performance (SongId NUMBER); CREATE TABLE Albums (AId NUMBER); CREATE TABLE Songs (SongId NUMBER, Title TEXT);"
      },
      {
        "question": "Which one has the most? Show me the song title.",
        "query": "SELECT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid = t2.songid GROUP BY t1.songid ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Vocals (SongId NUMBER, Type TEXT); CREATE TABLE Albums (AId NUMBER); CREATE TABLE Performance (SongId NUMBER); CREATE TABLE Instruments (SongId NUMBER); CREATE TABLE Tracklists (SongId NUMBER, AlbumId NUMBER); CREATE TABLE Songs (SongId NUMBER, Title TEXT); CREATE TABLE Band (Id NUMBER);"
      }
    ],
    [
      {
        "question": "Show me all vocal types.",
        "query": "SELECT TYPE FROM vocals GROUP BY TYPE",
        "schema": "CREATE TABLE Band (Id NUMBER); CREATE TABLE Vocals (SongId NUMBER, Bandmate NUMBER, Type TEXT); CREATE TABLE Tracklists (AlbumId NUMBER); CREATE TABLE Songs (SongId NUMBER); CREATE TABLE Albums (AId NUMBER, Type TEXT);"
      },
      {
        "question": "Show me the 5 least frequently appearing types among those.",
        "query": "SELECT TYPE FROM vocals GROUP BY TYPE ORDER BY count(*) ASC LIMIT 5",
        "schema": "CREATE TABLE Songs (SongId NUMBER); CREATE TABLE Albums (Type TEXT, AId NUMBER); CREATE TABLE Tracklists (AlbumId NUMBER); CREATE TABLE Band (Id NUMBER); CREATE TABLE Vocals (Type TEXT, Bandmate NUMBER, SongId NUMBER);"
      },
      {
        "question": "Show me the most frequently appearing type.",
        "query": "SELECT TYPE FROM vocals GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Songs (SongId NUMBER); CREATE TABLE Band (Id NUMBER); CREATE TABLE Tracklists (AlbumId NUMBER); CREATE TABLE Albums (AId NUMBER, Type TEXT); CREATE TABLE Vocals (Bandmate NUMBER, Type TEXT, SongId NUMBER);"
      }
    ],
    [
      {
        "question": "Show me all vocal types played by the band mate with last name \"Heilo\".",
        "query": "SELECT TYPE FROM vocals AS t1 JOIN band AS t2 ON t1.bandmate = t2.id WHERE lastname = \"Heilo\" GROUP BY TYPE",
        "schema": "CREATE TABLE Band (Firstname TEXT, Id NUMBER, Lastname TEXT); CREATE TABLE Vocals (Bandmate NUMBER, Type TEXT, SongId NUMBER); CREATE TABLE Performance (Bandmate NUMBER); CREATE TABLE Albums (Type TEXT, AId NUMBER); CREATE TABLE Songs (SongId NUMBER);"
      },
      {
        "question": "Which one did they play the most?",
        "query": "SELECT TYPE FROM vocals AS t1 JOIN band AS t2 ON t1.bandmate = t2.id WHERE lastname = \"Heilo\" GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Band (Lastname TEXT, Id NUMBER, Firstname TEXT); CREATE TABLE Songs (SongId NUMBER); CREATE TABLE Performance (Bandmate NUMBER); CREATE TABLE Albums (AId NUMBER, Type TEXT); CREATE TABLE Vocals (SongId NUMBER, Bandmate NUMBER, Type TEXT);"
      }
    ],
    [
      {
        "question": "Show me songs named \"Le Pop\".",
        "query": "SELECT * FROM songs WHERE title = \"Le Pop\"",
        "schema": "CREATE TABLE Tracklists (AlbumId NUMBER, SongId NUMBER); CREATE TABLE Songs (Title TEXT, SongId NUMBER); CREATE TABLE Band (Id NUMBER, Lastname TEXT, Firstname TEXT); CREATE TABLE Albums (Title TEXT, AId NUMBER);"
      },
      {
        "question": "Which vocal type is used in that song?",
        "query": "SELECT TYPE FROM vocals AS t1 JOIN songs AS t2 ON t1.songid = t2.songid WHERE title = \"Le Pop\"",
        "schema": "CREATE TABLE Tracklists (AlbumId NUMBER, SongId NUMBER); CREATE TABLE Vocals (SongId NUMBER, Type TEXT); CREATE TABLE Albums (AId NUMBER, Title TEXT); CREATE TABLE Band (Firstname TEXT, Lastname TEXT, Id NUMBER); CREATE TABLE Songs (Title TEXT, SongId NUMBER);"
      }
    ],
    [
      {
        "question": "What vocal types are used in song \"Demon Kitty Rag\"?",
        "query": "SELECT TYPE FROM vocals AS t1 JOIN songs AS t2 ON t1.songid = t2.songid WHERE title = \"Demon Kitty Rag\"",
        "schema": "CREATE TABLE Vocals (SongId NUMBER, Type TEXT); CREATE TABLE Albums (Type TEXT); CREATE TABLE Songs (Title TEXT, SongId NUMBER); CREATE TABLE Band (Id NUMBER); CREATE TABLE Tracklists (SongId NUMBER, AlbumId NUMBER); CREATE TABLE Performance (SongId NUMBER);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT count(*) FROM vocals AS t1 JOIN songs AS t2 ON t1.songid = t2.songid WHERE title = \"Demon Kitty Rag\"",
        "schema": "CREATE TABLE Instruments (SongId NUMBER); CREATE TABLE Performance (SongId NUMBER); CREATE TABLE Albums (Type TEXT, Title TEXT); CREATE TABLE Tracklists (SongId NUMBER, AlbumId NUMBER); CREATE TABLE Band (Id NUMBER); CREATE TABLE Vocals (SongId NUMBER, Type TEXT); CREATE TABLE Songs (Title TEXT, SongId NUMBER);"
      }
    ],
    [
      {
        "question": "How many songs are there?",
        "query": "SELECT count(DISTINCT title) FROM songs",
        "schema": "CREATE TABLE Vocals (Type TEXT, SongId NUMBER); CREATE TABLE Tracklists (SongId NUMBER, AlbumId NUMBER, Position NUMBER); CREATE TABLE Band (Id NUMBER); CREATE TABLE Songs (SongId NUMBER, Title TEXT); CREATE TABLE Performance (SongId NUMBER); CREATE TABLE Albums (AId NUMBER);"
      },
      {
        "question": "Show me the ones with a lead vocal.",
        "query": "SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid = t2.songid WHERE TYPE = \"lead\"",
        "schema": "CREATE TABLE Songs (SongId NUMBER, Title TEXT); CREATE TABLE Band (Id NUMBER); CREATE TABLE Performance (SongId NUMBER); CREATE TABLE Albums (AId NUMBER, Title TEXT); CREATE TABLE Tracklists (SongId NUMBER, Position NUMBER, AlbumId NUMBER); CREATE TABLE Vocals (Type TEXT, SongId NUMBER);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT count(DISTINCT title) FROM vocals AS t1 JOIN songs AS t2 ON t1.songid = t2.songid WHERE TYPE = \"lead\"",
        "schema": "CREATE TABLE Vocals (SongId NUMBER, Type TEXT); CREATE TABLE Instruments (SongId NUMBER); CREATE TABLE Songs (SongId NUMBER, Title TEXT); CREATE TABLE Performance (SongId NUMBER); CREATE TABLE Band (Id NUMBER); CREATE TABLE Albums (Type TEXT, AId NUMBER, Title TEXT); CREATE TABLE Tracklists (AlbumId NUMBER, Position NUMBER, SongId NUMBER);"
      }
    ],
    [
      {
        "question": "Which vocal type does the musician with first name \"Solveig\" play?",
        "query": "SELECT TYPE FROM vocals AS t1 JOIN songs AS t2 ON t1.songid = t2.songid JOIN band AS t3 ON t1.bandmate = t3.id WHERE t3.firstname = \"Solveig\"",
        "schema": "CREATE TABLE Band (Id NUMBER, Lastname TEXT, Firstname TEXT); CREATE TABLE Songs (SongId NUMBER); CREATE TABLE Albums (Type TEXT); CREATE TABLE Performance (Bandmate NUMBER); CREATE TABLE Vocals (Bandmate NUMBER, Type TEXT, SongId NUMBER);"
      },
      {
        "question": "Which one did that musician play in a song called \"A Bar in Amsterdam\"?",
        "query": "SELECT TYPE FROM vocals AS t1 JOIN songs AS t2 ON t1.songid = t2.songid JOIN band AS t3 ON t1.bandmate = t3.id WHERE t3.firstname = \"Solveig\" AND t2.title = \"A Bar In Amsterdam\"",
        "schema": "CREATE TABLE Albums (Type TEXT); CREATE TABLE Band (Lastname TEXT, Id NUMBER, Firstname TEXT); CREATE TABLE Vocals (Type TEXT, SongId NUMBER, Bandmate NUMBER); CREATE TABLE Performance (SongId NUMBER, Bandmate NUMBER); CREATE TABLE Songs (Title TEXT, SongId NUMBER);"
      }
    ],
    [
      {
        "question": "Find songs that have a lead vocal.",
        "query": "SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid = t2.songid WHERE TYPE = \"lead\"",
        "schema": "CREATE TABLE Vocals (Type TEXT, SongId NUMBER); CREATE TABLE Albums (AId NUMBER); CREATE TABLE Tracklists (AlbumId NUMBER, SongId NUMBER); CREATE TABLE Songs (Title TEXT, SongId NUMBER);"
      },
      {
        "question": "Find all other songs.",
        "query": "SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid = t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid = t2.songid WHERE TYPE = \"lead\"",
        "schema": "CREATE TABLE Tracklists (AlbumId NUMBER, SongId NUMBER); CREATE TABLE Vocals (SongId NUMBER, Type TEXT); CREATE TABLE Albums (AId NUMBER, Title TEXT); CREATE TABLE Songs (Title TEXT, SongId NUMBER);"
      }
    ],
    [
      {
        "question": "Find me id of the song named \"Le Pop\".",
        "query": "SELECT songid FROM songs WHERE title = \"Le Pop\"",
        "schema": "CREATE TABLE Vocals (SongId NUMBER); CREATE TABLE Songs (Title TEXT, SongId NUMBER); CREATE TABLE Tracklists (SongId NUMBER); CREATE TABLE Band (Lastname TEXT, Id NUMBER);"
      },
      {
        "question": "Who performed that song?",
        "query": "SELECT t2.firstname , t2.lastname FROM performance AS t1 JOIN band AS t2 ON t1.bandmate = t2.id JOIN songs AS t3 ON t3.songid = t1.songid WHERE t3.title = \"Le Pop\"",
        "schema": "CREATE TABLE Songs (Title TEXT, SongId NUMBER); CREATE TABLE Performance (Bandmate NUMBER, SongId NUMBER); CREATE TABLE Band (Firstname TEXT, Id NUMBER, Lastname TEXT); CREATE TABLE Tracklists (SongId NUMBER); CREATE TABLE Vocals (Bandmate NUMBER, SongId NUMBER);"
      }
    ],
    [
      {
        "question": "What instrument is used in the song \"Badlands\"?",
        "query": "SELECT t4.instrument FROM performance AS t1 JOIN band AS t2 ON t1.bandmate = t2.id JOIN songs AS t3 ON t3.songid = t1.songid JOIN instruments AS t4 ON t4.songid = t3.songid AND t4.bandmateid = t2.id WHERE t3.title = \"Badlands\"",
        "schema": "CREATE TABLE Performance (StagePosition TEXT, Bandmate NUMBER, SongId NUMBER); CREATE TABLE Band (Firstname TEXT, Id NUMBER); CREATE TABLE Songs (SongId NUMBER, Title TEXT); CREATE TABLE Instruments (SongId NUMBER, BandmateId NUMBER, Instrument TEXT);"
      },
      {
        "question": "Which instrument did the musician with last name \"Heilo\" use in that song?",
        "query": "SELECT t4.instrument FROM performance AS t1 JOIN band AS t2 ON t1.bandmate = t2.id JOIN songs AS t3 ON t3.songid = t1.songid JOIN instruments AS t4 ON t4.songid = t3.songid AND t4.bandmateid = t2.id WHERE t2.lastname = \"Heilo\" AND t3.title = \"Badlands\"",
        "schema": "CREATE TABLE Band (Lastname TEXT, Firstname TEXT, Id NUMBER); CREATE TABLE Instruments (Instrument TEXT, SongId NUMBER, BandmateId NUMBER); CREATE TABLE Songs (SongId NUMBER, Title TEXT); CREATE TABLE Performance (StagePosition TEXT, SongId NUMBER, Bandmate NUMBER);"
      }
    ],
    [
      {
        "question": "Show me all distinct instruments used in the song \"Badlands\".",
        "query": "SELECT DISTINCT instrument FROM instruments AS t1 JOIN songs AS t2 ON t1.songid = t2.songid WHERE title = \"Badlands\"",
        "schema": "CREATE TABLE Songs (Title TEXT, SongId NUMBER); CREATE TABLE Instruments (SongId NUMBER, BandmateId NUMBER, Instrument TEXT); CREATE TABLE Performance (SongId NUMBER);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT count(DISTINCT instrument) FROM instruments AS t1 JOIN songs AS t2 ON t1.songid = t2.songid WHERE title = \"Badlands\"",
        "schema": "CREATE TABLE Performance (SongId NUMBER); CREATE TABLE Tracklists (SongId NUMBER); CREATE TABLE Instruments (BandmateId NUMBER, SongId NUMBER, Instrument TEXT); CREATE TABLE Songs (Title TEXT, SongId NUMBER);"
      }
    ],
    [
      {
        "question": "Show me all the bandmates in song \"Badlands\"",
        "query": "SELECT bandmate FROM vocals AS t1 JOIN songs AS t2 ON t1.songid = t2.songid WHERE title = \"Badlands\"",
        "schema": "CREATE TABLE Band (Lastname TEXT, Firstname TEXT, Id NUMBER); CREATE TABLE Vocals (Bandmate NUMBER, SongId NUMBER); CREATE TABLE Songs (Title TEXT, SongId NUMBER); CREATE TABLE Performance (Bandmate NUMBER, SongId NUMBER); CREATE TABLE Instruments (BandmateId NUMBER, SongId NUMBER);"
      },
      {
        "question": "Show me all vocal types used in song \"Badlands\".",
        "query": "SELECT TYPE FROM vocals AS t1 JOIN songs AS t2 ON t1.songid = t2.songid WHERE title = \"Badlands\"",
        "schema": "CREATE TABLE Performance (Bandmate NUMBER, SongId NUMBER); CREATE TABLE Vocals (SongId NUMBER, Bandmate NUMBER, Type TEXT); CREATE TABLE Band (Id NUMBER, Lastname TEXT, Firstname TEXT); CREATE TABLE Songs (SongId NUMBER, Title TEXT); CREATE TABLE Instruments (SongId NUMBER, BandmateId NUMBER);"
      }
    ],
    [
      {
        "question": "Show me all vocal types used in song \"Le Pop\".",
        "query": "SELECT TYPE FROM vocals AS t1 JOIN songs AS t2 ON t1.songid = t2.songid WHERE title = \"Le Pop\"",
        "schema": "CREATE TABLE Performance (SongId NUMBER); CREATE TABLE Songs (SongId NUMBER, Title TEXT); CREATE TABLE Vocals (SongId NUMBER, Type TEXT); CREATE TABLE Albums (Type TEXT); CREATE TABLE Band (Id NUMBER); CREATE TABLE Tracklists (SongId NUMBER, AlbumId NUMBER);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT count(*) FROM vocals AS t1 JOIN songs AS t2 ON t1.songid = t2.songid WHERE title = \"Le Pop\"",
        "schema": "CREATE TABLE Albums (Title TEXT, Type TEXT); CREATE TABLE Performance (SongId NUMBER); CREATE TABLE Tracklists (SongId NUMBER, AlbumId NUMBER); CREATE TABLE Vocals (SongId NUMBER, Type TEXT); CREATE TABLE Band (Id NUMBER); CREATE TABLE Songs (SongId NUMBER, Title TEXT); CREATE TABLE Instruments (SongId NUMBER);"
      }
    ],
    [
      {
        "question": "Show me all songs with shared vocals.",
        "query": "SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid = t2.songid WHERE TYPE = \"shared\"",
        "schema": "CREATE TABLE Albums (AId NUMBER); CREATE TABLE Tracklists (AlbumId NUMBER, SongId NUMBER); CREATE TABLE Vocals (Type TEXT, SongId NUMBER); CREATE TABLE Songs (Title TEXT, SongId NUMBER);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT count(DISTINCT title) FROM vocals AS t1 JOIN songs AS t2 ON t1.songid = t2.songid WHERE TYPE = \"shared\"",
        "schema": "CREATE TABLE Vocals (SongId NUMBER, Type TEXT); CREATE TABLE Albums (AId NUMBER, Title TEXT); CREATE TABLE Songs (Title TEXT, SongId NUMBER); CREATE TABLE Instruments (SongId NUMBER); CREATE TABLE Tracklists (SongId NUMBER, AlbumId NUMBER);"
      }
    ],
    [
      {
        "question": "How many songs do not have a back vocal?",
        "query": "SELECT count(DISTINCT title) FROM vocals AS t1 JOIN songs AS t2 ON t1.songid = t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid = t2.songid WHERE TYPE = \"back\"",
        "schema": "CREATE TABLE Tracklists (AlbumId NUMBER, SongId NUMBER); CREATE TABLE Band (Id NUMBER); CREATE TABLE Albums (AId NUMBER); CREATE TABLE Vocals (Type TEXT, SongId NUMBER); CREATE TABLE Songs (Title TEXT, SongId NUMBER);"
      },
      {
        "question": "Show me the titles of those songs.",
        "query": "SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid = t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid = t2.songid WHERE TYPE = \"back\"",
        "schema": "CREATE TABLE Songs (SongId NUMBER, Title TEXT); CREATE TABLE Band (Id NUMBER); CREATE TABLE Tracklists (SongId NUMBER, AlbumId NUMBER); CREATE TABLE Albums (AId NUMBER, Title TEXT, Type TEXT); CREATE TABLE Vocals (SongId NUMBER, Type TEXT);"
      }
    ],
    [
      {
        "question": "Show me all vocal types played by a bandmate with first name \"Solveig\".",
        "query": "SELECT TYPE FROM vocals AS t1 JOIN band AS t2 ON t1.bandmate = t2.id WHERE firstname = \"Solveig\" GROUP BY TYPE",
        "schema": "CREATE TABLE Band (Id NUMBER, Firstname TEXT, Lastname TEXT); CREATE TABLE Performance (Bandmate NUMBER); CREATE TABLE Vocals (Type TEXT, Bandmate NUMBER); CREATE TABLE Albums (Type TEXT);"
      },
      {
        "question": "Which one is played the most?",
        "query": "SELECT TYPE FROM vocals AS t1 JOIN band AS t2 ON t1.bandmate = t2.id WHERE firstname = \"Solveig\" GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Performance (Bandmate NUMBER); CREATE TABLE Band (Lastname TEXT, Firstname TEXT, Id NUMBER); CREATE TABLE Vocals (Bandmate NUMBER, Type TEXT); CREATE TABLE Albums (Type TEXT);"
      }
    ],
    [
      {
        "question": "Which vocal type is played in the song \"Der Kapitan\"?",
        "query": "SELECT TYPE FROM vocals AS t1 JOIN songs AS t2 ON t1.songid = t2.songid JOIN band AS t3 ON t1.bandmate = t3.id WHERE t2.title = \"Der Kapitan\"",
        "schema": "CREATE TABLE Band (Firstname TEXT, Id NUMBER, Lastname TEXT); CREATE TABLE Tracklists (SongId NUMBER); CREATE TABLE Songs (SongId NUMBER, Title TEXT); CREATE TABLE Albums (Type TEXT); CREATE TABLE Vocals (SongId NUMBER, Bandmate NUMBER, Type TEXT);"
      },
      {
        "question": "Which vocal type did the musician with last name \"Heilo\" play?",
        "query": "SELECT TYPE FROM vocals AS t1 JOIN songs AS t2 ON t1.songid = t2.songid JOIN band AS t3 ON t1.bandmate = t3.id WHERE t3.lastname = \"Heilo\" AND t2.title = \"Der Kapitan\"",
        "schema": "CREATE TABLE Songs (Title TEXT, SongId NUMBER); CREATE TABLE Performance (SongId NUMBER, Bandmate NUMBER); CREATE TABLE Band (Firstname TEXT, Id NUMBER, Lastname TEXT); CREATE TABLE Tracklists (SongId NUMBER); CREATE TABLE Vocals (Bandmate NUMBER, SongId NUMBER, Type TEXT); CREATE TABLE Albums (Type TEXT);"
      }
    ],
    [
      {
        "question": "Which band mate performed in most songs? Show me the last name.",
        "query": "SELECT t2.lastname FROM performance AS t1 JOIN band AS t2 ON t1.bandmate = t2.id JOIN songs AS t3 ON t3.songid = t1.songid GROUP BY firstname ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Songs (Title TEXT, SongId NUMBER); CREATE TABLE Vocals (Bandmate NUMBER, SongId NUMBER); CREATE TABLE Performance (SongId NUMBER, Bandmate NUMBER); CREATE TABLE Band (Firstname TEXT, Lastname TEXT, Id NUMBER); CREATE TABLE Tracklists (SongId NUMBER);"
      },
      {
        "question": "Show the first name.",
        "query": "SELECT t2.firstname FROM performance AS t1 JOIN band AS t2 ON t1.bandmate = t2.id JOIN songs AS t3 ON t3.songid = t1.songid GROUP BY firstname ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Performance (Bandmate NUMBER, SongId NUMBER); CREATE TABLE Band (Id NUMBER, Lastname TEXT, Firstname TEXT); CREATE TABLE Tracklists (SongId NUMBER); CREATE TABLE Vocals (SongId NUMBER, Bandmate NUMBER); CREATE TABLE Songs (SongId NUMBER, Title TEXT);"
      }
    ],
    [
      {
        "question": "Which vocal type has the band mate with first name \"Marianne\" played?",
        "query": "SELECT TYPE FROM vocals AS t1 JOIN band AS t2 ON t1.bandmate = t2.id WHERE firstname = \"Marianne\" GROUP BY TYPE",
        "schema": "CREATE TABLE Vocals (Bandmate NUMBER, Type TEXT); CREATE TABLE Band (Firstname TEXT, Id NUMBER, Lastname TEXT); CREATE TABLE Songs (SongId NUMBER); CREATE TABLE Albums (AId NUMBER, Type TEXT); CREATE TABLE Performance (Bandmate NUMBER);"
      },
      {
        "question": "Which one did she play the most?",
        "query": "SELECT TYPE FROM vocals AS t1 JOIN band AS t2 ON t1.bandmate = t2.id WHERE firstname = \"Marianne\" GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Vocals (Bandmate NUMBER, Type TEXT); CREATE TABLE Band (Firstname TEXT, Id NUMBER, Lastname TEXT); CREATE TABLE Songs (SongId NUMBER); CREATE TABLE Performance (Bandmate NUMBER); CREATE TABLE Albums (Type TEXT, AId NUMBER);"
      }
    ],
    [
      {
        "question": "Which bandmates are performing in the song \"Der Kapitan\"? Show the first name and last name.",
        "query": "SELECT t2.firstname , t2.lastname FROM performance AS t1 JOIN band AS t2 ON t1.bandmate = t2.id JOIN songs AS t3 ON t3.songid = t1.songid WHERE t3.title = \"Der Kapitan\"",
        "schema": "CREATE TABLE Songs (Title TEXT, SongId NUMBER); CREATE TABLE Tracklists (SongId NUMBER); CREATE TABLE Performance (Bandmate NUMBER, SongId NUMBER); CREATE TABLE Band (Firstname TEXT, Lastname TEXT, Id NUMBER); CREATE TABLE Vocals (SongId NUMBER, Bandmate NUMBER);"
      },
      {
        "question": "Who plays in the back stage position? Show first and last names.",
        "query": "SELECT t2.firstname , t2.lastname FROM performance AS t1 JOIN band AS t2 ON t1.bandmate = t2.id JOIN songs AS t3 ON t3.songid = t1.songid WHERE t3.title = \"Der Kapitan\" AND t1.stageposition = \"back\"",
        "schema": "CREATE TABLE Performance (StagePosition TEXT, Bandmate NUMBER, SongId NUMBER); CREATE TABLE Tracklists (SongId NUMBER); CREATE TABLE Songs (SongId NUMBER, Title TEXT); CREATE TABLE Band (Id NUMBER, Lastname TEXT, Firstname TEXT); CREATE TABLE Vocals (Bandmate NUMBER, SongId NUMBER);"
      }
    ],
    [
      {
        "question": "How many songs are there in album \"A Kiss Before You Go: Live in Hamburg\"?",
        "query": "SELECT count(t3.title) FROM albums AS t1 JOIN tracklists AS t2 ON t1.aid = t2.albumid JOIN songs AS t3 ON t2.songid = t3.songid WHERE t1.title = \"A Kiss Before You Go: Live in Hamburg\"",
        "schema": "CREATE TABLE Performance (SongId NUMBER); CREATE TABLE Vocals (SongId NUMBER); CREATE TABLE Tracklists (SongId NUMBER, AlbumId NUMBER); CREATE TABLE Songs (Title TEXT, SongId NUMBER); CREATE TABLE Albums (Title TEXT, AId NUMBER, Type TEXT); CREATE TABLE Band (Id NUMBER);"
      },
      {
        "question": "What are those songs? Show me the title.",
        "query": "SELECT t3.title FROM albums AS t1 JOIN tracklists AS t2 ON t1.aid = t2.albumid JOIN songs AS t3 ON t2.songid = t3.songid WHERE t1.title = \"A Kiss Before You Go: Live in Hamburg\"",
        "schema": "CREATE TABLE Vocals (SongId NUMBER); CREATE TABLE Albums (AId NUMBER, Title TEXT, Type TEXT); CREATE TABLE Songs (Title TEXT, SongId NUMBER); CREATE TABLE Performance (SongId NUMBER); CREATE TABLE Band (Id NUMBER); CREATE TABLE Tracklists (AlbumId NUMBER, SongId NUMBER);"
      }
    ],
    [
      {
        "question": "How many songs are in albums under label \"Universal Music Group\"?",
        "query": "SELECT count(t3.title) FROM albums AS t1 JOIN tracklists AS t2 ON t1.aid = t2.albumid JOIN songs AS t3 ON t2.songid = t3.songid WHERE t1.label = \"Universal Music Group\"",
        "schema": "CREATE TABLE Albums (Type TEXT, AId NUMBER, Label TEXT, Title TEXT); CREATE TABLE Songs (Title TEXT, SongId NUMBER); CREATE TABLE Band (Id NUMBER); CREATE TABLE Tracklists (AlbumId NUMBER, SongId NUMBER);"
      },
      {
        "question": "Show me the titles of those songs.",
        "query": "SELECT t3.title FROM albums AS t1 JOIN tracklists AS t2 ON t1.aid = t2.albumid JOIN songs AS t3 ON t2.songid = t3.songid WHERE t1.label = \"Universal Music Group\"",
        "schema": "CREATE TABLE Tracklists (AlbumId NUMBER, SongId NUMBER); CREATE TABLE Songs (Title TEXT, SongId NUMBER); CREATE TABLE Band (Id NUMBER); CREATE TABLE Albums (Title TEXT, Type TEXT, AId NUMBER, Label TEXT);"
      }
    ]
  ],
  "soccer_1": [
    [
      {
        "question": "Tell me the country of the league named \"France Ligue 1\".",
        "query": "SELECT t1.name FROM country AS t1 JOIN league AS t2 ON t1.id = t2.country_id WHERE t2.name = \"France Ligue 1\"",
        "schema": "CREATE TABLE League (id NUMBER, name TEXT, country_id NUMBER); CREATE TABLE Country (id NUMBER, name TEXT);"
      },
      {
        "question": "How about that of the league named \"Poland Ekstraklasa\"",
        "query": "SELECT t1.name FROM country AS t1 JOIN league AS t2 ON t1.id = t2.country_id WHERE t2.name = \"Poland Ekstraklasa\"",
        "schema": "CREATE TABLE League (id NUMBER, name TEXT, country_id NUMBER); CREATE TABLE Country (id NUMBER, name TEXT);"
      },
      {
        "question": "How many leagues are there in England?",
        "query": "SELECT count(*) FROM country AS t1 JOIN league AS t2 ON t1.id = t2.country_id WHERE t1.name = \"England\"",
        "schema": "CREATE TABLE League (country_id NUMBER, id NUMBER, name TEXT); CREATE TABLE Country (name TEXT, id NUMBER);"
      }
    ],
    [
      {
        "question": "Tell me the birthday of the player named Aaron Hunt.",
        "query": "SELECT birthday FROM player WHERE player_name = \"Aaron Hunt\"",
        "schema": "CREATE TABLE Player (birthday TEXT, player_api_id NUMBER, player_fifa_api_id NUMBER, player_name TEXT, id NUMBER);"
      },
      {
        "question": "How about his weight?",
        "query": "SELECT weight FROM player WHERE player_name = \"Aaron Hunt\"",
        "schema": "CREATE TABLE Player (birthday TEXT, id NUMBER, player_fifa_api_id NUMBER, weight NUMBER, player_name TEXT, player_api_id NUMBER);"
      },
      {
        "question": "tell me the maximum and minimum weight of all players.",
        "query": "SELECT max(weight) , min(weight) FROM player",
        "schema": "CREATE TABLE Player (birthday TEXT, player_fifa_api_id NUMBER, id NUMBER, weight NUMBER, player_name TEXT, player_api_id NUMBER);"
      }
    ],
    [
      {
        "question": "Tell me the potential of the player named \"Abasse Ba\".",
        "query": "SELECT t2.potential FROM player AS t1 JOIN player_attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = \"Abasse Ba\"",
        "schema": "CREATE TABLE Player (player_api_id NUMBER, player_fifa_api_id NUMBER, id NUMBER, player_name TEXT); CREATE TABLE Player_Attributes (potential NUMBER, player_api_id NUMBER);"
      },
      {
        "question": "How about his finishing times?",
        "query": "SELECT t2.finishing FROM player AS t1 JOIN player_attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = \"Abasse Ba\"",
        "schema": "CREATE TABLE Player_Attributes (shot_power NUMBER, potential NUMBER, crossing NUMBER, reactions NUMBER, gk_diving NUMBER, sliding_tackle NUMBER, balance NUMBER, gk_kicking NUMBER, marking NUMBER, id NUMBER, strength NUMBER, aggression NUMBER, standing_tackle NUMBER, positioning NUMBER, long_shots NUMBER, curve NUMBER, date TEXT, gk_handling NUMBER, gk_reflexes NUMBER, short_passing NUMBER, heading_accuracy NUMBER, sprint_speed NUMBER, defensive_work_rate TEXT, ball_control NUMBER, acceleration NUMBER, free_kick_accuracy NUMBER, volleys NUMBER, stamina NUMBER, player_api_id NUMBER, player_fifa_api_id NUMBER, overall_rating NUMBER, gk_positioning NUMBER, jumping NUMBER, agility NUMBER, dribbling NUMBER, long_passing NUMBER, penalties NUMBER, finishing NUMBER, attacking_work_rate TEXT, interceptions NUMBER, vision NUMBER, preferred_foot TEXT); CREATE TABLE Player (player_api_id NUMBER, id NUMBER, player_fifa_api_id NUMBER, player_name TEXT);"
      },
      {
        "question": "list all player names who have an overall rating higher than the average.",
        "query": "SELECT DISTINCT t1.player_name FROM player AS t1 JOIN player_attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.overall_rating > ( SELECT avg(overall_rating) FROM player_attributes )",
        "schema": "CREATE TABLE Player_Attributes (vision NUMBER, crossing NUMBER, positioning NUMBER, player_fifa_api_id NUMBER, gk_kicking NUMBER, marking NUMBER, stamina NUMBER, preferred_foot TEXT, strength NUMBER, sprint_speed NUMBER, volleys NUMBER, dribbling NUMBER, sliding_tackle NUMBER, reactions NUMBER, curve NUMBER, jumping NUMBER, potential NUMBER, aggression NUMBER, heading_accuracy NUMBER, id NUMBER, acceleration NUMBER, defensive_work_rate TEXT, player_api_id NUMBER, interceptions NUMBER, finishing NUMBER, shot_power NUMBER, long_passing NUMBER, balance NUMBER, gk_reflexes NUMBER, free_kick_accuracy NUMBER, penalties NUMBER, gk_handling NUMBER, gk_positioning NUMBER, agility NUMBER, ball_control NUMBER, date TEXT, short_passing NUMBER, overall_rating NUMBER, attacking_work_rate TEXT, long_shots NUMBER, gk_diving NUMBER, standing_tackle NUMBER); CREATE TABLE Player (id NUMBER, height NUMBER, player_name TEXT, player_api_id NUMBER, player_fifa_api_id NUMBER);"
      }
    ],
    [
      {
        "question": "What are the names of players who have the best crossing?",
        "query": "SELECT DISTINCT t1.player_name FROM player AS t1 JOIN player_attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.crossing = ( SELECT max(crossing) FROM player_attributes)",
        "schema": "CREATE TABLE Player (player_fifa_api_id NUMBER, player_api_id NUMBER, id NUMBER, player_name TEXT); CREATE TABLE Player_Attributes (stamina NUMBER, gk_diving NUMBER, long_passing NUMBER, interceptions NUMBER, volleys NUMBER, gk_reflexes NUMBER, player_api_id NUMBER, agility NUMBER, dribbling NUMBER, acceleration NUMBER, gk_kicking NUMBER, crossing NUMBER, strength NUMBER, preferred_foot TEXT, potential NUMBER, sliding_tackle NUMBER, attacking_work_rate TEXT, short_passing NUMBER, long_shots NUMBER, defensive_work_rate TEXT, shot_power NUMBER, overall_rating NUMBER, player_fifa_api_id NUMBER, standing_tackle NUMBER, gk_positioning NUMBER, heading_accuracy NUMBER, finishing NUMBER, curve NUMBER, aggression NUMBER, jumping NUMBER, vision NUMBER, gk_handling NUMBER, reactions NUMBER, marking NUMBER, penalties NUMBER, balance NUMBER, date TEXT, ball_control NUMBER, id NUMBER, sprint_speed NUMBER, free_kick_accuracy NUMBER, positioning NUMBER);"
      },
      {
        "question": "What are the names of players who have the best short passing?",
        "query": "SELECT DISTINCT t1.player_name FROM player AS t1 JOIN player_attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.short_passing = ( SELECT max(short_passing) FROM player_attributes)",
        "schema": "CREATE TABLE Player (player_fifa_api_id NUMBER, id NUMBER, player_name TEXT, player_api_id NUMBER); CREATE TABLE Player_Attributes (gk_kicking NUMBER, heading_accuracy NUMBER, free_kick_accuracy NUMBER, gk_handling NUMBER, volleys NUMBER, attacking_work_rate TEXT, preferred_foot TEXT, ball_control NUMBER, reactions NUMBER, short_passing NUMBER, player_fifa_api_id NUMBER, positioning NUMBER, sprint_speed NUMBER, balance NUMBER, gk_reflexes NUMBER, sliding_tackle NUMBER, curve NUMBER, jumping NUMBER, stamina NUMBER, player_api_id NUMBER, crossing NUMBER, agility NUMBER, shot_power NUMBER, vision NUMBER, long_passing NUMBER, date TEXT, overall_rating NUMBER, long_shots NUMBER, id NUMBER, standing_tackle NUMBER, interceptions NUMBER, strength NUMBER, penalties NUMBER, marking NUMBER, defensive_work_rate TEXT, acceleration NUMBER, gk_positioning NUMBER, finishing NUMBER, aggression NUMBER, gk_diving NUMBER, dribbling NUMBER, potential NUMBER);"
      },
      {
        "question": "What are the names of players who have the best dribbling?",
        "query": "SELECT DISTINCT t1.player_name FROM player AS t1 JOIN player_attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.dribbling = ( SELECT max(dribbling) FROM player_attributes)",
        "schema": "CREATE TABLE Player_Attributes (player_fifa_api_id NUMBER, gk_kicking NUMBER, marking NUMBER, positioning NUMBER, reactions NUMBER, finishing NUMBER, gk_positioning NUMBER, defensive_work_rate TEXT, long_shots NUMBER, stamina NUMBER, crossing NUMBER, gk_diving NUMBER, short_passing NUMBER, strength NUMBER, interceptions NUMBER, preferred_foot TEXT, heading_accuracy NUMBER, attacking_work_rate TEXT, sprint_speed NUMBER, acceleration NUMBER, dribbling NUMBER, shot_power NUMBER, overall_rating NUMBER, date TEXT, volleys NUMBER, balance NUMBER, jumping NUMBER, standing_tackle NUMBER, gk_reflexes NUMBER, sliding_tackle NUMBER, potential NUMBER, gk_handling NUMBER, curve NUMBER, vision NUMBER, free_kick_accuracy NUMBER, long_passing NUMBER, ball_control NUMBER, aggression NUMBER, agility NUMBER, player_api_id NUMBER, id NUMBER, penalties NUMBER); CREATE TABLE Player (player_api_id NUMBER, player_name TEXT, id NUMBER, player_fifa_api_id NUMBER);"
      }
    ],
    [
      {
        "question": "Tell me all the players whose defensive work rate is high.",
        "query": "SELECT DISTINCT t1.player_name FROM player AS t1 JOIN player_attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.defensive_work_rate = \"high\"",
        "schema": "CREATE TABLE Player_Attributes (defensive_work_rate TEXT, penalties NUMBER, crossing NUMBER, gk_diving NUMBER, id NUMBER, overall_rating NUMBER, agility NUMBER, sprint_speed NUMBER, sliding_tackle NUMBER, interceptions NUMBER, long_shots NUMBER, curve NUMBER, preferred_foot TEXT, date TEXT, heading_accuracy NUMBER, shot_power NUMBER, acceleration NUMBER, standing_tackle NUMBER, strength NUMBER, attacking_work_rate TEXT, gk_kicking NUMBER, reactions NUMBER, short_passing NUMBER, balance NUMBER, dribbling NUMBER, gk_reflexes NUMBER, player_api_id NUMBER, player_fifa_api_id NUMBER, jumping NUMBER, ball_control NUMBER, gk_handling NUMBER, volleys NUMBER, marking NUMBER, finishing NUMBER, positioning NUMBER, stamina NUMBER, long_passing NUMBER, gk_positioning NUMBER, potential NUMBER, vision NUMBER, aggression NUMBER, free_kick_accuracy NUMBER); CREATE TABLE Player (player_api_id NUMBER, player_name TEXT, height NUMBER, player_fifa_api_id NUMBER, id NUMBER);"
      },
      {
        "question": "How about players whose attacking work rate is high?",
        "query": "SELECT DISTINCT t1.player_name FROM player AS t1 JOIN player_attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.defensive_work_rate = \"high\" AND t2.attacking_work_rate = \"high\"",
        "schema": "CREATE TABLE Player (player_fifa_api_id NUMBER, player_api_id NUMBER, height NUMBER, player_name TEXT, id NUMBER); CREATE TABLE Player_Attributes (reactions NUMBER, stamina NUMBER, gk_reflexes NUMBER, volleys NUMBER, heading_accuracy NUMBER, date TEXT, gk_kicking NUMBER, ball_control NUMBER, sprint_speed NUMBER, interceptions NUMBER, aggression NUMBER, preferred_foot TEXT, strength NUMBER, penalties NUMBER, jumping NUMBER, gk_handling NUMBER, defensive_work_rate TEXT, acceleration NUMBER, curve NUMBER, player_api_id NUMBER, dribbling NUMBER, long_passing NUMBER, sliding_tackle NUMBER, agility NUMBER, gk_positioning NUMBER, gk_diving NUMBER, id NUMBER, positioning NUMBER, short_passing NUMBER, attacking_work_rate TEXT, potential NUMBER, vision NUMBER, free_kick_accuracy NUMBER, long_shots NUMBER, player_fifa_api_id NUMBER, crossing NUMBER, overall_rating NUMBER, marking NUMBER, shot_power NUMBER, finishing NUMBER, balance NUMBER, standing_tackle NUMBER);"
      },
      {
        "question": "Tell me the names of all players who have a crossing score higher than 90 and prefer their right foot.",
        "query": "SELECT DISTINCT t1.player_name FROM player AS t1 JOIN player_attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.crossing > 90 AND t2.preferred_foot = \"right\"",
        "schema": "CREATE TABLE Player_Attributes (balance NUMBER, aggression NUMBER, player_api_id NUMBER, player_fifa_api_id NUMBER, preferred_foot TEXT, gk_reflexes NUMBER, acceleration NUMBER, short_passing NUMBER, positioning NUMBER, sliding_tackle NUMBER, potential NUMBER, vision NUMBER, ball_control NUMBER, crossing NUMBER, gk_positioning NUMBER, strength NUMBER, defensive_work_rate TEXT, sprint_speed NUMBER, curve NUMBER, dribbling NUMBER, standing_tackle NUMBER, long_passing NUMBER, finishing NUMBER, jumping NUMBER, agility NUMBER, attacking_work_rate TEXT, overall_rating NUMBER, reactions NUMBER, gk_diving NUMBER, gk_handling NUMBER, gk_kicking NUMBER, penalties NUMBER, long_shots NUMBER, date TEXT, shot_power NUMBER, volleys NUMBER, id NUMBER, interceptions NUMBER, stamina NUMBER, free_kick_accuracy NUMBER, marking NUMBER, heading_accuracy NUMBER); CREATE TABLE Player (player_fifa_api_id NUMBER, player_api_id NUMBER, height NUMBER, id NUMBER, player_name TEXT); CREATE TABLE Team_Attributes (buildUpPlayPassing NUMBER, chanceCreationPassing NUMBER);"
      }
    ],
    [
      {
        "question": "Tell me the names of players who have an overall rating larger than 80.",
        "query": "SELECT DISTINCT t1.player_name FROM player AS t1 JOIN player_attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.overall_rating > 80",
        "schema": "CREATE TABLE Player_Attributes (positioning NUMBER, marking NUMBER, sliding_tackle NUMBER, finishing NUMBER, short_passing NUMBER, id NUMBER, gk_positioning NUMBER, agility NUMBER, gk_handling NUMBER, volleys NUMBER, long_shots NUMBER, jumping NUMBER, gk_diving NUMBER, acceleration NUMBER, curve NUMBER, strength NUMBER, ball_control NUMBER, defensive_work_rate TEXT, stamina NUMBER, attacking_work_rate TEXT, balance NUMBER, penalties NUMBER, player_fifa_api_id NUMBER, heading_accuracy NUMBER, reactions NUMBER, sprint_speed NUMBER, potential NUMBER, aggression NUMBER, preferred_foot TEXT, player_api_id NUMBER, gk_kicking NUMBER, vision NUMBER, long_passing NUMBER, standing_tackle NUMBER, gk_reflexes NUMBER, free_kick_accuracy NUMBER, interceptions NUMBER, overall_rating NUMBER, shot_power NUMBER, crossing NUMBER, dribbling NUMBER); CREATE TABLE Player (player_name TEXT, player_api_id NUMBER, player_fifa_api_id NUMBER, id NUMBER);"
      },
      {
        "question": "Tell me their preferred foot.",
        "query": "SELECT DISTINCT t1.player_name, t2.preferred_foot FROM player AS t1 JOIN player_attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.overall_rating > 80",
        "schema": "CREATE TABLE Player_Attributes (dribbling NUMBER, player_api_id NUMBER, vision NUMBER, curve NUMBER, stamina NUMBER, long_passing NUMBER, defensive_work_rate TEXT, agility NUMBER, interceptions NUMBER, volleys NUMBER, id NUMBER, preferred_foot TEXT, aggression NUMBER, standing_tackle NUMBER, attacking_work_rate TEXT, heading_accuracy NUMBER, potential NUMBER, jumping NUMBER, overall_rating NUMBER, player_fifa_api_id NUMBER, ball_control NUMBER, free_kick_accuracy NUMBER, shot_power NUMBER, short_passing NUMBER, balance NUMBER, sprint_speed NUMBER, gk_kicking NUMBER, acceleration NUMBER, gk_positioning NUMBER, finishing NUMBER, positioning NUMBER, date TEXT, long_shots NUMBER, crossing NUMBER, marking NUMBER, gk_diving NUMBER, gk_reflexes NUMBER, sliding_tackle NUMBER, gk_handling NUMBER, strength NUMBER, penalties NUMBER, reactions NUMBER); CREATE TABLE Player (player_name TEXT, id NUMBER, player_api_id NUMBER, player_fifa_api_id NUMBER);"
      },
      {
        "question": "tell me the names of all left-footed players who have overall rating between 85 and 90.",
        "query": "SELECT DISTINCT t1.player_name FROM player AS t1 JOIN player_attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.preferred_foot = \"left\" AND t2.overall_rating >= 85 AND t2.overall_rating <= 90",
        "schema": "CREATE TABLE Player (player_fifa_api_id NUMBER, player_api_id NUMBER, player_name TEXT, id NUMBER); CREATE TABLE Player_Attributes (crossing NUMBER, reactions NUMBER, gk_reflexes NUMBER, short_passing NUMBER, gk_kicking NUMBER, player_api_id NUMBER, standing_tackle NUMBER, vision NUMBER, marking NUMBER, sprint_speed NUMBER, volleys NUMBER, agility NUMBER, attacking_work_rate TEXT, date TEXT, ball_control NUMBER, finishing NUMBER, defensive_work_rate TEXT, stamina NUMBER, strength NUMBER, interceptions NUMBER, gk_diving NUMBER, balance NUMBER, aggression NUMBER, sliding_tackle NUMBER, long_passing NUMBER, preferred_foot TEXT, potential NUMBER, shot_power NUMBER, dribbling NUMBER, player_fifa_api_id NUMBER, free_kick_accuracy NUMBER, curve NUMBER, acceleration NUMBER, heading_accuracy NUMBER, gk_positioning NUMBER, overall_rating NUMBER, penalties NUMBER, id NUMBER, positioning NUMBER, gk_handling NUMBER, long_shots NUMBER, jumping NUMBER);"
      }
    ],
    [
      {
        "question": "How many players have an overall rating of 60 or greater?",
        "query": "SELECT count(DISTINCT t1.player_name) FROM player AS t1 JOIN player_attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.overall_rating >= 60",
        "schema": "CREATE TABLE Player (player_name TEXT, id NUMBER, player_api_id NUMBER, player_fifa_api_id NUMBER); CREATE TABLE Player_Attributes (player_fifa_api_id NUMBER, id NUMBER, heading_accuracy NUMBER, potential NUMBER, balance NUMBER, strength NUMBER, agility NUMBER, reactions NUMBER, interceptions NUMBER, gk_positioning NUMBER, positioning NUMBER, overall_rating NUMBER, player_api_id NUMBER, curve NUMBER, gk_diving NUMBER, dribbling NUMBER, gk_kicking NUMBER);"
      },
      {
        "question": "How many players have potential of 80 or greater?",
        "query": "SELECT count(DISTINCT t1.player_name) FROM player AS t1 JOIN player_attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.potential >= 80",
        "schema": "CREATE TABLE Player_Attributes (gk_kicking NUMBER, finishing NUMBER, positioning NUMBER, strength NUMBER, potential NUMBER, gk_positioning NUMBER, marking NUMBER, defensive_work_rate TEXT, player_fifa_api_id NUMBER, overall_rating NUMBER, heading_accuracy NUMBER, aggression NUMBER, preferred_foot TEXT, jumping NUMBER, sliding_tackle NUMBER, date TEXT, interceptions NUMBER, attacking_work_rate TEXT, ball_control NUMBER, crossing NUMBER, sprint_speed NUMBER, gk_reflexes NUMBER, shot_power NUMBER, player_api_id NUMBER, gk_diving NUMBER, standing_tackle NUMBER, vision NUMBER, penalties NUMBER, free_kick_accuracy NUMBER, id NUMBER, dribbling NUMBER, long_shots NUMBER, gk_handling NUMBER, agility NUMBER, acceleration NUMBER, balance NUMBER, volleys NUMBER, long_passing NUMBER, curve NUMBER, reactions NUMBER, stamina NUMBER, short_passing NUMBER); CREATE TABLE Player (player_fifa_api_id NUMBER, player_api_id NUMBER, id NUMBER, player_name TEXT);"
      },
      {
        "question": "Of all players with an overall rating greater than 80, how many are right-footed and left-footed?",
        "query": "SELECT preferred_foot , count(*) FROM player_attributes WHERE overall_rating > 80 GROUP BY preferred_foot",
        "schema": "CREATE TABLE Player_Attributes (potential NUMBER, gk_kicking NUMBER, ball_control NUMBER, jumping NUMBER, standing_tackle NUMBER, agility NUMBER, reactions NUMBER, vision NUMBER, date TEXT, overall_rating NUMBER, gk_positioning NUMBER, heading_accuracy NUMBER, attacking_work_rate TEXT, volleys NUMBER, dribbling NUMBER, acceleration NUMBER, preferred_foot TEXT, balance NUMBER, penalties NUMBER, aggression NUMBER, finishing NUMBER, sliding_tackle NUMBER, long_passing NUMBER, gk_reflexes NUMBER, gk_handling NUMBER, crossing NUMBER, curve NUMBER, strength NUMBER, sprint_speed NUMBER, long_shots NUMBER, interceptions NUMBER, stamina NUMBER, free_kick_accuracy NUMBER, marking NUMBER, id NUMBER, gk_diving NUMBER, shot_power NUMBER, defensive_work_rate TEXT, positioning NUMBER, player_api_id NUMBER, player_fifa_api_id NUMBER, short_passing NUMBER); CREATE TABLE Player (player_api_id NUMBER, player_name TEXT, player_fifa_api_id NUMBER, id NUMBER, weight NUMBER);"
      }
    ],
    [
      {
        "question": "What is the height of the player named Abdoulaye Toure?",
        "query": "SELECT height FROM player WHERE player_name = \"Abdoulaye Toure\"",
        "schema": "CREATE TABLE Player (id NUMBER, player_api_id NUMBER, height NUMBER, player_fifa_api_id NUMBER, player_name TEXT);"
      },
      {
        "question": "What is his overall rating?",
        "query": "SELECT t2.overall_rating FROM player AS t1 JOIN player_attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = \"Abdoulaye Toure\"",
        "schema": "CREATE TABLE Player (player_api_id NUMBER, height NUMBER, player_name TEXT, player_fifa_api_id NUMBER, id NUMBER); CREATE TABLE Player_Attributes (agility NUMBER, gk_positioning NUMBER, gk_handling NUMBER, potential NUMBER, interceptions NUMBER, reactions NUMBER, gk_reflexes NUMBER, player_fifa_api_id NUMBER, vision NUMBER, stamina NUMBER, overall_rating NUMBER, crossing NUMBER, aggression NUMBER, id NUMBER, heading_accuracy NUMBER, gk_kicking NUMBER, acceleration NUMBER, standing_tackle NUMBER, marking NUMBER, balance NUMBER, preferred_foot TEXT, attacking_work_rate TEXT, player_api_id NUMBER, finishing NUMBER, penalties NUMBER, curve NUMBER, volleys NUMBER, long_passing NUMBER, dribbling NUMBER, positioning NUMBER);"
      },
      {
        "question": "Tell me all of the player ids with a height of at least 180cm and an overall rating higher than 85.",
        "query": "SELECT player_api_id FROM player WHERE height >= 180 INTERSECT SELECT player_api_id FROM player_attributes WHERE overall_rating > 85",
        "schema": "CREATE TABLE Player_Attributes (strength NUMBER, standing_tackle NUMBER, overall_rating NUMBER, defensive_work_rate TEXT, ball_control NUMBER, heading_accuracy NUMBER, curve NUMBER, id NUMBER, long_shots NUMBER, agility NUMBER, gk_diving NUMBER, marking NUMBER, gk_handling NUMBER, player_fifa_api_id NUMBER, long_passing NUMBER, penalties NUMBER, free_kick_accuracy NUMBER, stamina NUMBER, aggression NUMBER, potential NUMBER, jumping NUMBER, sliding_tackle NUMBER, short_passing NUMBER, gk_kicking NUMBER, attacking_work_rate TEXT, reactions NUMBER, volleys NUMBER, interceptions NUMBER, balance NUMBER, positioning NUMBER, preferred_foot TEXT, crossing NUMBER, dribbling NUMBER, player_api_id NUMBER, gk_positioning NUMBER, gk_reflexes NUMBER, acceleration NUMBER, vision NUMBER, finishing NUMBER); CREATE TABLE Player (player_api_id NUMBER, id NUMBER, player_name TEXT, height NUMBER, player_fifa_api_id NUMBER);"
      }
    ],
    [
      {
        "question": "Tell me the birthday of the player named \"Aaron Hunt\".",
        "query": "SELECT birthday FROM player WHERE player_name = \"Aaron Hunt\"",
        "schema": "CREATE TABLE Player (id NUMBER, player_api_id NUMBER, birthday TEXT, player_fifa_api_id NUMBER, player_name TEXT);"
      },
      {
        "question": "What is his preferred foot?",
        "query": "SELECT t2.preferred_foot FROM player AS t1 JOIN player_attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = \"Aaron Hunt\"",
        "schema": "CREATE TABLE Player (id NUMBER, player_name TEXT, player_api_id NUMBER, player_fifa_api_id NUMBER, birthday TEXT); CREATE TABLE Player_Attributes (crossing NUMBER, gk_kicking NUMBER, acceleration NUMBER, aggression NUMBER, id NUMBER, agility NUMBER, gk_positioning NUMBER, jumping NUMBER, dribbling NUMBER, positioning NUMBER, potential NUMBER, player_fifa_api_id NUMBER, balance NUMBER, volleys NUMBER, player_api_id NUMBER, curve NUMBER, shot_power NUMBER, long_shots NUMBER, strength NUMBER, gk_reflexes NUMBER, marking NUMBER, sliding_tackle NUMBER, stamina NUMBER, preferred_foot TEXT);"
      },
      {
        "question": "List all of the ids for left-footed players with a height between 180cm and 190cm.",
        "query": "SELECT player_api_id FROM player WHERE height >= 180 AND height <= 190 INTERSECT SELECT player_api_id FROM player_attributes WHERE preferred_foot = \"left\"",
        "schema": "CREATE TABLE Player_Attributes (marking NUMBER, defensive_work_rate TEXT, shot_power NUMBER, short_passing NUMBER, gk_diving NUMBER, agility NUMBER, penalties NUMBER, gk_positioning NUMBER, long_shots NUMBER, interceptions NUMBER, player_fifa_api_id NUMBER, curve NUMBER, preferred_foot TEXT, stamina NUMBER, player_api_id NUMBER, reactions NUMBER, heading_accuracy NUMBER, positioning NUMBER, ball_control NUMBER, dribbling NUMBER, strength NUMBER, overall_rating NUMBER, finishing NUMBER, gk_kicking NUMBER, gk_handling NUMBER, standing_tackle NUMBER, vision NUMBER, balance NUMBER, date TEXT, attacking_work_rate TEXT, crossing NUMBER, acceleration NUMBER, long_passing NUMBER, aggression NUMBER, sliding_tackle NUMBER, sprint_speed NUMBER, jumping NUMBER, free_kick_accuracy NUMBER, volleys NUMBER, gk_reflexes NUMBER, potential NUMBER, id NUMBER); CREATE TABLE Player (player_fifa_api_id NUMBER, player_name TEXT, player_api_id NUMBER, height NUMBER, birthday TEXT, id NUMBER);"
      }
    ],
    [
      {
        "question": "How many players have heading accuracy larger than 70?",
        "query": "SELECT count(DISTINCT t1.player_name) FROM player AS t1 JOIN player_attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.heading_accuracy > 70",
        "schema": "CREATE TABLE Player_Attributes (strength NUMBER, gk_handling NUMBER, sliding_tackle NUMBER, gk_kicking NUMBER, gk_positioning NUMBER, shot_power NUMBER, player_fifa_api_id NUMBER, balance NUMBER, attacking_work_rate TEXT, marking NUMBER, preferred_foot TEXT, gk_reflexes NUMBER, gk_diving NUMBER, crossing NUMBER, jumping NUMBER, dribbling NUMBER, volleys NUMBER, positioning NUMBER, player_api_id NUMBER, free_kick_accuracy NUMBER, overall_rating NUMBER, interceptions NUMBER, agility NUMBER, potential NUMBER, heading_accuracy NUMBER, short_passing NUMBER, id NUMBER, acceleration NUMBER, long_shots NUMBER, curve NUMBER); CREATE TABLE Player (height NUMBER, player_api_id NUMBER, id NUMBER, player_fifa_api_id NUMBER, player_name TEXT); CREATE TABLE Team (team_api_id NUMBER);"
      },
      {
        "question": "Tell me the top three of these?",
        "query": "SELECT DISTINCT t1.player_name FROM player AS t1 JOIN player_attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.heading_accuracy > 70 ORDER BY overall_rating DESC LIMIT 3",
        "schema": "CREATE TABLE Player_Attributes (gk_reflexes NUMBER, player_api_id NUMBER, volleys NUMBER, attacking_work_rate TEXT, positioning NUMBER, gk_handling NUMBER, short_passing NUMBER, defensive_work_rate TEXT, preferred_foot TEXT, sprint_speed NUMBER, balance NUMBER, crossing NUMBER, long_passing NUMBER, penalties NUMBER, shot_power NUMBER, acceleration NUMBER, dribbling NUMBER, interceptions NUMBER, curve NUMBER, vision NUMBER, potential NUMBER, standing_tackle NUMBER, stamina NUMBER, date TEXT, gk_positioning NUMBER, gk_kicking NUMBER, gk_diving NUMBER, jumping NUMBER, finishing NUMBER, agility NUMBER, aggression NUMBER, free_kick_accuracy NUMBER, heading_accuracy NUMBER, overall_rating NUMBER, ball_control NUMBER, id NUMBER, sliding_tackle NUMBER, player_fifa_api_id NUMBER, long_shots NUMBER, marking NUMBER, strength NUMBER, reactions NUMBER); CREATE TABLE Player (height NUMBER, player_fifa_api_id NUMBER, player_api_id NUMBER, player_name TEXT, id NUMBER); CREATE TABLE Team (team_api_id NUMBER);"
      },
      {
        "question": "Who are the top 3 players in terms of overall rating?",
        "query": "SELECT DISTINCT t1.player_name FROM player AS t1 JOIN player_attributes AS t2 ON t1.player_api_id = t2.player_api_id ORDER BY overall_rating DESC LIMIT 3",
        "schema": "CREATE TABLE Team (team_api_id NUMBER); CREATE TABLE Player (player_api_id NUMBER, id NUMBER, player_fifa_api_id NUMBER, player_name TEXT, height NUMBER); CREATE TABLE Player_Attributes (agility NUMBER, defensive_work_rate TEXT, jumping NUMBER, penalties NUMBER, id NUMBER, attacking_work_rate TEXT, standing_tackle NUMBER, preferred_foot TEXT, stamina NUMBER, potential NUMBER, vision NUMBER, gk_positioning NUMBER, shot_power NUMBER, dribbling NUMBER, balance NUMBER, ball_control NUMBER, gk_reflexes NUMBER, overall_rating NUMBER, interceptions NUMBER, short_passing NUMBER, strength NUMBER, player_fifa_api_id NUMBER, date TEXT, long_passing NUMBER, long_shots NUMBER, volleys NUMBER, gk_kicking NUMBER, positioning NUMBER, curve NUMBER, aggression NUMBER, free_kick_accuracy NUMBER, marking NUMBER, sprint_speed NUMBER, finishing NUMBER, crossing NUMBER, player_api_id NUMBER, sliding_tackle NUMBER, reactions NUMBER, gk_handling NUMBER, acceleration NUMBER, gk_diving NUMBER, heading_accuracy NUMBER);"
      }
    ]
  ],
  "customer_deliveries": [
    [
      {
        "question": "How many different products are available to order?",
        "query": "SELECT count(DISTINCT product_id) FROM products",
        "schema": "CREATE TABLE Products (product_name TEXT, product_id NUMBER, product_price NUMBER); CREATE TABLE Actual_Orders (actual_order_id NUMBER); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Actual_Order_Products (actual_order_id NUMBER, product_id NUMBER); CREATE TABLE Regular_Order_Products (regular_order_id NUMBER, product_id NUMBER);"
      },
      {
        "question": "Order them by the number of times they have been ordered.",
        "query": "SELECT * FROM products AS t1 JOIN regular_order_products AS t2 ON t1.product_id = t2.product_id GROUP BY t2.product_id ORDER BY count(*)",
        "schema": "CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Products (product_price NUMBER, product_name TEXT, product_id NUMBER); CREATE TABLE Regular_Order_Products (product_id NUMBER, regular_order_id NUMBER); CREATE TABLE Actual_Orders (actual_order_date TIME, actual_order_id NUMBER); CREATE TABLE Actual_Order_Products (product_id NUMBER, actual_order_id NUMBER); CREATE TABLE Order_Deliveries (actual_order_id NUMBER);"
      },
      {
        "question": "Which has been ordered the greatest number of times?",
        "query": "SELECT * FROM products AS t1 JOIN regular_order_products AS t2 ON t1.product_id = t2.product_id GROUP BY t2.product_id ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Order_Deliveries (actual_order_id NUMBER); CREATE TABLE Regular_Orders (regular_order_id NUMBER); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Products (product_price NUMBER, product_id NUMBER, product_name TEXT); CREATE TABLE Actual_Orders (actual_order_date TIME, actual_order_id NUMBER); CREATE TABLE Regular_Order_Products (product_id NUMBER, regular_order_id NUMBER); CREATE TABLE Actual_Order_Products (actual_order_id NUMBER, product_id NUMBER);"
      },
      {
        "question": "Only show the name and price.",
        "query": "SELECT t1.product_name , t1.product_price FROM products AS t1 JOIN regular_order_products AS t2 ON t1.product_id = t2.product_id GROUP BY t2.product_id ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Actual_Order_Products (product_id NUMBER, actual_order_id NUMBER); CREATE TABLE Products (product_id NUMBER, product_price NUMBER, product_name TEXT); CREATE TABLE Regular_Orders (regular_order_id NUMBER); CREATE TABLE Regular_Order_Products (regular_order_id NUMBER, product_id NUMBER); CREATE TABLE Actual_Orders (actual_order_id NUMBER, actual_order_date TIME); CREATE TABLE Order_Deliveries (actual_order_id NUMBER);"
      }
    ],
    [
      {
        "question": "What is the average price of all products?",
        "query": "SELECT avg(product_price) FROM products",
        "schema": "CREATE TABLE Products (product_id NUMBER, product_price NUMBER, product_name TEXT); CREATE TABLE Customers (customer_id NUMBER);"
      },
      {
        "question": "Which of the procucts cost more than this?",
        "query": "SELECT * FROM products WHERE product_price > (SELECT avg(product_price) FROM products)",
        "schema": "CREATE TABLE Products (product_name TEXT, product_id NUMBER, product_price NUMBER); CREATE TABLE Customers (customer_id NUMBER);"
      },
      {
        "question": "Which is the name of the most expensive product?",
        "query": "SELECT product_name FROM products ORDER BY product_price DESC LIMIT 1",
        "schema": "CREATE TABLE Products (product_name TEXT, product_price NUMBER, product_id NUMBER); CREATE TABLE Customers (customer_id NUMBER);"
      }
    ],
    [
      {
        "question": "How many customers have addresses on file?",
        "query": "SELECT count(DISTINCT customer_id) FROM customer_addresses AS t1 JOIN addresses AS t2 ON t1.address_id = t2.address_id",
        "schema": "CREATE TABLE Addresses (address_id NUMBER, address_details TEXT); CREATE TABLE Customer_Addresses (address_id NUMBER, address_type TEXT, customer_id NUMBER); CREATE TABLE Customers (customer_name TEXT, customer_id NUMBER); CREATE TABLE Employees (employee_address_id NUMBER);"
      },
      {
        "question": "What different states are they from?",
        "query": "SELECT DISTINCT state_province_county FROM addresses",
        "schema": "CREATE TABLE Customer_Addresses (address_type TEXT, customer_id NUMBER, address_id NUMBER); CREATE TABLE Employees (employee_address_id NUMBER); CREATE TABLE Customers (customer_name TEXT, customer_id NUMBER); CREATE TABLE Addresses (address_id NUMBER, address_details TEXT, country TEXT, state_province_county TEXT);"
      },
      {
        "question": "Show all information for customers living in the state of California.",
        "query": "SELECT * FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id WHERE t3.state_province_county = 'California'",
        "schema": "CREATE TABLE Customer_Addresses (address_type TEXT, customer_id NUMBER, address_id NUMBER); CREATE TABLE Addresses (country TEXT, address_id NUMBER, state_province_county TEXT, city TEXT, address_details TEXT); CREATE TABLE Customers (customer_name TEXT, customer_id NUMBER); CREATE TABLE Employees (employee_address_id NUMBER);"
      },
      {
        "question": "Show the names of all customers except these.",
        "query": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id WHERE t3.state_province_county = 'California'",
        "schema": "CREATE TABLE Customer_Addresses (customer_id NUMBER, address_type TEXT, address_id NUMBER); CREATE TABLE Customers (customer_name TEXT, customer_id NUMBER); CREATE TABLE Addresses (address_id NUMBER, country TEXT, city TEXT, address_details TEXT, state_province_county TEXT); CREATE TABLE Employees (employee_address_id NUMBER);"
      }
    ],
    [
      {
        "question": "What state or province are the most customer addresses located?",
        "query": "SELECT state_province_county, count(*) FROM customer_addresses AS t1 JOIN addresses AS t2 ON t1.address_id = t2.address_id GROUP BY state_province_county ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Addresses (country TEXT, address_id NUMBER, address_details TEXT, state_province_county TEXT, city TEXT); CREATE TABLE Customer_Addresses (address_type TEXT, customer_id NUMBER, address_id NUMBER); CREATE TABLE Customers (customer_id NUMBER);"
      },
      {
        "question": "How many customers have addresses in the state of California",
        "query": "SELECT count(*) FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id WHERE t3.state_province_county = 'California'",
        "schema": "CREATE TABLE Customer_Addresses (customer_id NUMBER, address_id NUMBER, address_type TEXT); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Addresses (city TEXT, address_id NUMBER, address_details TEXT, country TEXT, state_province_county TEXT);"
      },
      {
        "question": "What are their names and phone numbers?",
        "query": "SELECT t1.customer_name , t1.customer_phone FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id WHERE t3.state_province_county = 'California'",
        "schema": "CREATE TABLE Addresses (state_province_county TEXT, country TEXT, address_details TEXT, address_id NUMBER, city TEXT); CREATE TABLE Customers (customer_id NUMBER, customer_name TEXT, customer_phone TEXT); CREATE TABLE Customer_Addresses (address_id NUMBER, customer_id NUMBER, address_type TEXT);"
      }
    ],
    [
      {
        "question": "What are all the different employee address details?",
        "query": "SELECT DISTINCT address_details FROM addresses AS t1 JOIN employees AS t2 ON t1.address_id = t2.employee_address_id",
        "schema": "CREATE TABLE Customer_Addresses (address_id NUMBER); CREATE TABLE Actual_Orders (actual_order_id NUMBER); CREATE TABLE Order_Deliveries (driver_employee_id NUMBER); CREATE TABLE Delivery_Route_Locations (location_address_id NUMBER); CREATE TABLE Employees (employee_address_id NUMBER, employee_name TEXT, employee_id NUMBER); CREATE TABLE Addresses (address_details TEXT, address_id NUMBER);"
      },
      {
        "question": "At which adresses do no employees live?",
        "query": "SELECT * FROM addresses WHERE address_id NOT IN (SELECT employee_address_id FROM employees)",
        "schema": "CREATE TABLE Addresses (city TEXT, address_id NUMBER, address_details TEXT); CREATE TABLE Customer_Addresses (address_id NUMBER); CREATE TABLE Employees (employee_id NUMBER, employee_name TEXT, employee_address_id NUMBER); CREATE TABLE Order_Deliveries (driver_employee_id NUMBER); CREATE TABLE Delivery_Route_Locations (location_address_id NUMBER); CREATE TABLE Actual_Orders (actual_order_id NUMBER);"
      },
      {
        "question": "What states or provinces are they in?",
        "query": "SELECT state_province_county FROM addresses WHERE address_id NOT IN (SELECT employee_address_id FROM employees)",
        "schema": "CREATE TABLE Customer_Addresses (address_id NUMBER); CREATE TABLE Actual_Orders (actual_order_id NUMBER); CREATE TABLE Delivery_Route_Locations (location_address_id NUMBER); CREATE TABLE Addresses (state_province_county TEXT, address_details TEXT, city TEXT, address_id NUMBER, country TEXT); CREATE TABLE Employees (employee_name TEXT, employee_address_id NUMBER, employee_id NUMBER); CREATE TABLE Order_Deliveries (driver_employee_id NUMBER);"
      }
    ],
    [
      {
        "question": "What is the customer ID of the person who became a customer most recently?",
        "query": "SELECT customer_id FROM customers ORDER BY date_became_customer DESC LIMIT 1",
        "schema": "CREATE TABLE Customer_Addresses (customer_id NUMBER, date_to TIME, date_from TIME); CREATE TABLE Regular_Orders (distributer_id NUMBER); CREATE TABLE Customers (customer_name TEXT, date_became_customer TIME, customer_id NUMBER);"
      },
      {
        "question": "What is their name?",
        "query": "SELECT customer_name FROM customers ORDER BY date_became_customer DESC LIMIT 1",
        "schema": "CREATE TABLE Customers (customer_id NUMBER, customer_name TEXT, date_became_customer TIME); CREATE TABLE Customer_Addresses (date_from TIME, date_to TIME, customer_id NUMBER); CREATE TABLE Regular_Orders (distributer_id NUMBER); CREATE TABLE Products (product_name TEXT);"
      },
      {
        "question": "How about the earliest 5 customers?",
        "query": "SELECT customer_name FROM customers ORDER BY date_became_customer LIMIT 5",
        "schema": "CREATE TABLE Customers (customer_id NUMBER, customer_name TEXT, date_became_customer TIME); CREATE TABLE Regular_Orders (distributer_id NUMBER); CREATE TABLE Products (product_name TEXT); CREATE TABLE Customer_Addresses (customer_id NUMBER, date_to TIME, date_from TIME);"
      }
    ],
    [
      {
        "question": "Order all customer payment methods alphabetically.",
        "query": "SELECT payment_method FROM customers ORDER BY payment_method",
        "schema": "CREATE TABLE Customers (customer_id NUMBER, customer_name TEXT, payment_method TEXT); CREATE TABLE Actual_Orders (actual_order_id NUMBER);"
      },
      {
        "question": "Which is last alphabetically?",
        "query": "SELECT payment_method FROM customers ORDER BY payment_method DESC LIMIT 1",
        "schema": "CREATE TABLE Customers (customer_name TEXT, payment_method TEXT, customer_id NUMBER); CREATE TABLE Actual_Orders (actual_order_id NUMBER);"
      },
      {
        "question": "Which appears most often?",
        "query": "SELECT payment_method FROM customers GROUP BY payment_method ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Actual_Orders (actual_order_id NUMBER); CREATE TABLE Customers (customer_name TEXT, customer_id NUMBER, payment_method TEXT);"
      }
    ],
    [
      {
        "question": "What are all location codes for the delivery locations?",
        "query": "SELECT location_code FROM delivery_route_locations",
        "schema": "CREATE TABLE Order_Deliveries (location_code TEXT); CREATE TABLE Addresses (address_id NUMBER, zip_postcode TEXT, city TEXT); CREATE TABLE Delivery_Route_Locations (location_address_id NUMBER, route_id NUMBER, location_code TEXT, location_name TEXT);"
      },
      {
        "question": "Which route has had the fewest orders delivered?",
        "query": "SELECT route_id FROM order_deliveries AS t1 JOIN delivery_route_locations AS t2 ON t1.location_code = t2.location_code ORDER BY t2.route_id LIMIT 1",
        "schema": "CREATE TABLE Delivery_Route_Locations (location_address_id NUMBER, route_id NUMBER, location_name TEXT, location_code TEXT); CREATE TABLE Order_Deliveries (location_code TEXT); CREATE TABLE Addresses (zip_postcode TEXT, city TEXT, address_id NUMBER); CREATE TABLE Delivery_Routes (route_name TEXT, route_id NUMBER);"
      },
      {
        "question": "Which route has the highest number of delivery locations?",
        "query": "SELECT t1.route_name FROM delivery_routes AS t1 JOIN delivery_route_locations AS t2 ON t1.route_id = t2.route_id GROUP BY t1.route_id ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Order_Deliveries (location_code TEXT); CREATE TABLE Delivery_Route_Locations (location_name TEXT, location_address_id NUMBER, location_code TEXT, route_id NUMBER); CREATE TABLE Delivery_Routes (route_id NUMBER, route_name TEXT); CREATE TABLE Addresses (city TEXT, zip_postcode TEXT, address_id NUMBER);"
      }
    ]
  ],
  "document_management": [
    [
      {
        "question": "What are all the documents?",
        "query": "SELECT * FROM documents",
        "schema": "CREATE TABLE Document_Sections (document_code TEXT, section_id NUMBER, section_title TEXT); CREATE TABLE Documents (document_code TEXT, document_name TEXT, document_type_code TEXT, document_structure_code TEXT);"
      },
      {
        "question": "Show the name and access counts of them in alphabetic order of the name.",
        "query": "SELECT document_name , access_count FROM documents ORDER BY document_name",
        "schema": "CREATE TABLE Users (user_name TEXT); CREATE TABLE Document_Sections (section_id NUMBER, document_code TEXT, section_title TEXT); CREATE TABLE Documents (document_name TEXT, document_structure_code TEXT, document_code TEXT, document_type_code TEXT, access_count NUMBER);"
      }
    ],
    [
      {
        "question": "What are the names and access counts of all the documents?",
        "query": "SELECT document_name, access_count FROM documents",
        "schema": "CREATE TABLE Documents (access_count NUMBER, document_code TEXT, document_name TEXT); CREATE TABLE Images (image_name TEXT); CREATE TABLE Users (user_id NUMBER, user_name TEXT); CREATE TABLE Document_Sections (section_title TEXT, document_code TEXT);"
      },
      {
        "question": "Which one has been accessed the greatest number of times?",
        "query": "SELECT document_name , access_count FROM documents ORDER BY access_count DESC LIMIT 1",
        "schema": "CREATE TABLE Documents (document_name TEXT, access_count NUMBER, document_code TEXT); CREATE TABLE Document_Sections (document_code TEXT, section_title TEXT); CREATE TABLE Images (image_name TEXT); CREATE TABLE Users (user_id NUMBER, user_name TEXT);"
      }
    ],
    [
      {
        "question": "What are all the documents?",
        "query": "SELECT * FROM documents",
        "schema": "CREATE TABLE Documents (document_code TEXT, document_name TEXT, document_type_code TEXT, document_structure_code TEXT); CREATE TABLE Document_Sections (section_title TEXT, section_id NUMBER, document_code TEXT);"
      },
      {
        "question": "Which document types are there?",
        "query": "SELECT document_type_code FROM documents GROUP BY document_type_code",
        "schema": "CREATE TABLE Documents (document_type_code TEXT, document_code TEXT, document_structure_code TEXT, document_name TEXT); CREATE TABLE Document_Sections (section_id NUMBER, section_title TEXT, document_code TEXT);"
      },
      {
        "question": "Which types have more than 4 documents?",
        "query": "SELECT document_type_code FROM documents GROUP BY document_type_code HAVING count(*) > 4",
        "schema": "CREATE TABLE Document_Sections (document_code TEXT, section_title TEXT, section_id NUMBER); CREATE TABLE Documents (document_name TEXT, document_type_code TEXT, document_code TEXT, document_structure_code TEXT);"
      }
    ],
    [
      {
        "question": "What are all the documents?",
        "query": "SELECT * FROM documents",
        "schema": "CREATE TABLE Document_Structures (document_structure_code TEXT); CREATE TABLE Document_Sections (section_id NUMBER, document_code TEXT, section_title TEXT); CREATE TABLE Documents (document_name TEXT, document_structure_code TEXT, document_type_code TEXT, document_code TEXT);"
      },
      {
        "question": "What are the total access counts of documents in terms of document type?",
        "query": "SELECT sum(access_count) FROM documents GROUP BY document_type_code",
        "schema": "CREATE TABLE Documents (access_count NUMBER, document_code TEXT, document_type_code TEXT, document_structure_code TEXT, document_name TEXT); CREATE TABLE Document_Structures (document_structure_code TEXT); CREATE TABLE Document_Sections (section_title TEXT, document_code TEXT, section_id NUMBER);"
      },
      {
        "question": "Which is the largest among them?",
        "query": "SELECT sum(access_count) FROM documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Document_Structures (document_structure_code TEXT); CREATE TABLE Documents (access_count NUMBER, document_structure_code TEXT, document_type_code TEXT, document_name TEXT, document_code TEXT); CREATE TABLE Document_Sections (section_id NUMBER, document_code TEXT, section_title TEXT);"
      }
    ],
    [
      {
        "question": "What are access counts all the documents?",
        "query": "SELECT access_count FROM documents",
        "schema": "CREATE TABLE Documents (access_count NUMBER, document_code TEXT, document_type_code TEXT, document_name TEXT); CREATE TABLE Document_Sections (document_code TEXT); CREATE TABLE Users (user_id NUMBER, user_name TEXT);"
      },
      {
        "question": "Show their average.",
        "query": "SELECT avg(access_count) FROM documents",
        "schema": "CREATE TABLE Document_Sections (document_code TEXT); CREATE TABLE Documents (document_code TEXT, document_name TEXT, access_count NUMBER, document_type_code TEXT); CREATE TABLE Users (user_id NUMBER, user_name TEXT);"
      }
    ],
    [
      {
        "question": "What are all the documents?",
        "query": "SELECT * FROM documents",
        "schema": "CREATE TABLE Document_Structures (document_structure_code TEXT); CREATE TABLE Documents (document_type_code TEXT, document_structure_code TEXT, document_code TEXT, document_name TEXT); CREATE TABLE Document_Sections (document_code TEXT, section_title TEXT, section_id NUMBER);"
      },
      {
        "question": "Show the type of the one named \"David CV\".",
        "query": "SELECT document_type_code FROM documents WHERE document_name = \"David CV\"",
        "schema": "CREATE TABLE Document_Sections (section_title TEXT, section_id NUMBER, document_code TEXT); CREATE TABLE Documents (document_name TEXT, document_code TEXT, document_type_code TEXT, document_structure_code TEXT); CREATE TABLE Users (user_id NUMBER, user_name TEXT); CREATE TABLE Document_Structures (document_structure_code TEXT);"
      }
    ],
    [
      {
        "question": "What are all the documents?",
        "query": "SELECT * FROM documents",
        "schema": "CREATE TABLE Document_Sections (section_title TEXT, document_code TEXT, section_id NUMBER); CREATE TABLE Documents (document_structure_code TEXT, document_code TEXT, document_type_code TEXT, document_name TEXT);"
      },
      {
        "question": "Which document types have more than 10000 total access number?",
        "query": "SELECT document_type_code FROM documents GROUP BY document_type_code HAVING sum(access_count) > 10000",
        "schema": "CREATE TABLE Documents (document_code TEXT, document_name TEXT, document_structure_code TEXT, access_count NUMBER, document_type_code TEXT); CREATE TABLE Document_Sections (document_code TEXT, section_title TEXT, section_id NUMBER);"
      }
    ],
    [
      {
        "question": "What is the document named \"David CV\"?",
        "query": "SELECT * FROM documents WHERE document_name = \"David CV\"",
        "schema": "CREATE TABLE Users (user_name TEXT, user_id NUMBER); CREATE TABLE Documents (document_code TEXT, document_name TEXT);"
      },
      {
        "question": "What are all the section titils of it?",
        "query": "SELECT t2.section_title FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code = t2.document_code WHERE t1.document_name = \"David CV\"",
        "schema": "CREATE TABLE Document_Sections (section_sequence NUMBER, document_code TEXT, section_id NUMBER, section_title TEXT, section_code TEXT); CREATE TABLE Documents (document_name TEXT, document_code TEXT); CREATE TABLE Document_Sections_Images (section_id NUMBER); CREATE TABLE Users (user_name TEXT, user_id NUMBER);"
      }
    ],
    [
      {
        "question": "What are all the documents?",
        "query": "SELECT * FROM documents",
        "schema": "CREATE TABLE Document_Sections (document_code TEXT, section_id NUMBER, section_title TEXT); CREATE TABLE Documents (document_structure_code TEXT, document_code TEXT, document_type_code TEXT, document_name TEXT); CREATE TABLE Document_Structures (document_structure_code TEXT);"
      },
      {
        "question": "Show those without any sections.",
        "query": "SELECT document_name FROM documents WHERE document_code NOT IN (SELECT document_code FROM document_sections)",
        "schema": "CREATE TABLE Document_Sections_Images (section_id NUMBER); CREATE TABLE Documents (document_structure_code TEXT, document_type_code TEXT, document_code TEXT, document_name TEXT); CREATE TABLE Document_Structures (document_structure_code TEXT); CREATE TABLE Document_Sections (section_sequence NUMBER, section_title TEXT, document_code TEXT, section_code TEXT, section_id NUMBER);"
      }
    ],
    [
      {
        "question": "What are all the documents with functional area \"Acknowledgement\"?",
        "query": "SELECT * FROM documents AS t1 JOIN document_functional_areas AS t2 ON t1.document_code = t2.document_code JOIN functional_areas AS t3 ON t2.functional_area_code = t3.functional_area_code WHERE t3.functional_area_description = \"Acknowledgement\"",
        "schema": "CREATE TABLE Document_Functional_Areas (document_code TEXT, functional_area_code TEXT); CREATE TABLE Documents (document_name TEXT, document_structure_code TEXT, document_code TEXT); CREATE TABLE Document_Sections (document_code TEXT); CREATE TABLE Document_Structures (document_structure_code TEXT); CREATE TABLE Functional_Areas (functional_area_code TEXT, functional_area_description TEXT, parent_functional_area_code TEXT);"
      },
      {
        "question": "Show the average access counts for each of them.",
        "query": "SELECT avg(t1.access_count) FROM documents AS t1 JOIN document_functional_areas AS t2 ON t1.document_code = t2.document_code JOIN functional_areas AS t3 ON t2.functional_area_code = t3.functional_area_code WHERE t3.functional_area_description = \"Acknowledgement\"",
        "schema": "CREATE TABLE Document_Structures (document_structure_code TEXT); CREATE TABLE Documents (document_code TEXT, access_count NUMBER, document_name TEXT, document_structure_code TEXT); CREATE TABLE Functional_Areas (functional_area_code TEXT, parent_functional_area_code TEXT, functional_area_description TEXT); CREATE TABLE Document_Functional_Areas (functional_area_code TEXT, document_code TEXT); CREATE TABLE Document_Sections (document_code TEXT);"
      }
    ],
    [
      {
        "question": "What are all the documents?",
        "query": "SELECT * FROM documents",
        "schema": "CREATE TABLE Document_Sections (document_code TEXT, section_id NUMBER, section_title TEXT); CREATE TABLE Documents (document_type_code TEXT, document_name TEXT, document_structure_code TEXT, document_code TEXT); CREATE TABLE Document_Structures (document_structure_code TEXT);"
      },
      {
        "question": "Show those without any images.",
        "query": "SELECT document_name FROM documents EXCEPT SELECT t1.document_name FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code = t2.document_code JOIN document_sections_images AS t3 ON t2.section_id = t3.section_id",
        "schema": "CREATE TABLE Images (image_url TEXT, image_alt_text TEXT, image_id NUMBER, image_name TEXT); CREATE TABLE Document_Sections_Images (image_id NUMBER, section_id NUMBER); CREATE TABLE Documents (document_code TEXT, document_structure_code TEXT, document_name TEXT, document_type_code TEXT); CREATE TABLE Document_Structures (document_structure_code TEXT); CREATE TABLE Document_Sections (section_id NUMBER, section_title TEXT, document_code TEXT);"
      }
    ],
    [
      {
        "question": "What are all the documents?",
        "query": "SELECT * FROM documents",
        "schema": "CREATE TABLE Document_Sections (document_code TEXT, section_id NUMBER, section_title TEXT); CREATE TABLE Document_Structures (document_structure_code TEXT); CREATE TABLE Documents (document_structure_code TEXT, document_name TEXT, document_type_code TEXT, document_code TEXT);"
      },
      {
        "question": "Show their names in the order of number of sections.",
        "query": "SELECT t1.document_name FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code = t2.document_code GROUP BY t1.document_code ORDER BY count(*)",
        "schema": "CREATE TABLE Document_Sections (section_code TEXT, document_code TEXT, section_title TEXT, section_id NUMBER); CREATE TABLE Documents (document_name TEXT, document_structure_code TEXT, document_type_code TEXT, document_code TEXT); CREATE TABLE Document_Structures (document_structure_code TEXT);"
      },
      {
        "question": "What is the name of the one with the most number of sections?",
        "query": "SELECT t1.document_name FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code = t2.document_code GROUP BY t1.document_code ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Documents (document_structure_code TEXT, document_name TEXT, document_code TEXT, document_type_code TEXT); CREATE TABLE Document_Sections (section_id NUMBER, section_title TEXT, section_code TEXT, document_code TEXT); CREATE TABLE Document_Structures (document_structure_code TEXT);"
      }
    ],
    [
      {
        "question": "What are the names of all the documents?",
        "query": "SELECT document_name FROM documents",
        "schema": "CREATE TABLE Documents (document_name TEXT, document_code TEXT); CREATE TABLE Images (image_name TEXT); CREATE TABLE Users (user_name TEXT); CREATE TABLE Document_Sections (document_code TEXT, section_title TEXT);"
      },
      {
        "question": "Show those that contain \"CV\".",
        "query": "SELECT document_name FROM documents WHERE document_name LIKE \"%CV%\"",
        "schema": "CREATE TABLE Images (image_name TEXT); CREATE TABLE Documents (document_name TEXT, document_type_code TEXT, document_code TEXT); CREATE TABLE Document_Sections (section_title TEXT, document_code TEXT); CREATE TABLE Users (user_name TEXT);"
      }
    ],
    [
      {
        "question": "Who are all the users?",
        "query": "SELECT * FROM users",
        "schema": "CREATE TABLE Users (role_code TEXT, user_id NUMBER, user_name TEXT);"
      },
      {
        "question": "Show those who are logged in.",
        "query": "SELECT count(*) FROM users WHERE user_login = 1",
        "schema": "CREATE TABLE Users (role_code TEXT, user_id NUMBER, user_login TEXT, user_name TEXT);"
      }
    ],
    [
      {
        "question": "What are all the users that have logged in?",
        "query": "SELECT * FROM users WHERE user_login = 1",
        "schema": "CREATE TABLE Users (user_name TEXT, user_id NUMBER, user_login TEXT);"
      },
      {
        "question": "Among those users, which role is the most popular one?",
        "query": "SELECT role_code FROM users WHERE user_login = 1 GROUP BY role_code ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Roles (role_description TEXT, role_code TEXT); CREATE TABLE Users (role_code TEXT, user_name TEXT, user_id NUMBER, user_login TEXT);"
      },
      {
        "question": "Show the description of that role.",
        "query": "SELECT role_description FROM ROLES WHERE role_code = (SELECT role_code FROM users WHERE user_login = 1 GROUP BY role_code ORDER BY count(*) DESC LIMIT 1)",
        "schema": "CREATE TABLE Roles (role_code TEXT, role_description TEXT); CREATE TABLE Users (user_name TEXT, user_login TEXT, user_id NUMBER, role_code TEXT);"
      }
    ],
    [
      {
        "question": "What are all the documents?",
        "query": "SELECT * FROM documents",
        "schema": "CREATE TABLE Documents (document_name TEXT, document_structure_code TEXT, document_type_code TEXT, document_code TEXT); CREATE TABLE Document_Sections (section_id NUMBER, section_title TEXT, document_code TEXT); CREATE TABLE Document_Structures (document_structure_code TEXT);"
      },
      {
        "question": "What are the average access counts in terms of each document structure?",
        "query": "SELECT avg(access_count) FROM documents GROUP BY document_structure_code",
        "schema": "CREATE TABLE Documents (document_structure_code TEXT, document_type_code TEXT, access_count NUMBER, document_name TEXT, document_code TEXT); CREATE TABLE Document_Sections (section_id NUMBER, section_title TEXT, document_code TEXT); CREATE TABLE Document_Structures (document_structure_description TEXT, document_structure_code TEXT);"
      },
      {
        "question": "Show the one with the least popular structure.",
        "query": "SELECT avg(access_count) FROM documents GROUP BY document_structure_code ORDER BY count(*) ASC LIMIT 1",
        "schema": "CREATE TABLE Document_Structures (document_structure_description TEXT, document_structure_code TEXT); CREATE TABLE Documents (document_type_code TEXT, document_structure_code TEXT, access_count NUMBER, document_name TEXT, document_code TEXT); CREATE TABLE Document_Sections (document_code TEXT, section_id NUMBER, section_title TEXT);"
      }
    ],
    [
      {
        "question": "Show all the images.",
        "query": "SELECT * FROM images",
        "schema": "CREATE TABLE Users (user_id NUMBER); CREATE TABLE Document_Sections_Images (image_id NUMBER, section_id NUMBER); CREATE TABLE Document_Sections (document_code TEXT, section_id NUMBER); CREATE TABLE Images (image_url TEXT, image_name TEXT, image_alt_text TEXT, image_id NUMBER); CREATE TABLE Documents (document_code TEXT, document_name TEXT);"
      },
      {
        "question": "Show their names and URLs in the order of their names.",
        "query": "SELECT image_name , image_url FROM images ORDER BY image_name",
        "schema": "CREATE TABLE Users (user_id NUMBER, user_name TEXT); CREATE TABLE Document_Sections (section_id NUMBER, document_code TEXT); CREATE TABLE Images (image_url TEXT, image_id NUMBER, image_alt_text TEXT, image_name TEXT); CREATE TABLE Document_Sections_Images (section_id NUMBER, image_id NUMBER); CREATE TABLE Documents (document_name TEXT, document_code TEXT);"
      }
    ],
    [
      {
        "question": "What are all the users?",
        "query": "SELECT * FROM users",
        "schema": "CREATE TABLE Users (user_name TEXT, user_id NUMBER, role_code TEXT);"
      },
      {
        "question": "What are the different kinds of roles among them?",
        "query": "SELECT role_code FROM users GROUP BY role_code",
        "schema": "CREATE TABLE Users (role_code TEXT, user_id NUMBER, user_name TEXT); CREATE TABLE Roles (role_code TEXT, role_description TEXT);"
      },
      {
        "question": "Show the number of users in each role.",
        "query": "SELECT count(*) , role_code FROM users GROUP BY role_code",
        "schema": "CREATE TABLE Users (user_id NUMBER, user_name TEXT, role_code TEXT); CREATE TABLE Roles (role_code TEXT, role_description TEXT);"
      }
    ]
  ],
  "insurance_fnol": [
    [
      {
        "question": "Show me all the policy types.",
        "query": "SELECT policy_type_code FROM available_policies",
        "schema": "CREATE TABLE Customers_Policies (Customer_ID NUMBER, Policy_ID NUMBER); CREATE TABLE Available_Policies (policy_type_code TEXT, Policy_ID NUMBER, Customer_Phone TEXT);"
      },
      {
        "question": "Show me the type with most records in the database.",
        "query": "SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Customers_Policies (Policy_ID NUMBER, Customer_ID NUMBER); CREATE TABLE Available_Policies (Customer_Phone TEXT, policy_type_code TEXT, Policy_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What is the most popular policy type?",
        "query": "SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Customers_Policies (Policy_ID NUMBER); CREATE TABLE Available_Policies (Customer_Phone TEXT, policy_type_code TEXT, Policy_ID NUMBER);"
      },
      {
        "question": "Show me all the customer phone numbers associated with it.",
        "query": "SELECT customer_phone FROM available_policies WHERE policy_type_code = (SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1)",
        "schema": "CREATE TABLE Customers_Policies (Customer_ID NUMBER, Policy_ID NUMBER); CREATE TABLE Available_Policies (Policy_ID NUMBER, Customer_Phone TEXT, policy_type_code TEXT); CREATE TABLE Customers (Customer_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show me the policy type used by more than 3 customers.",
        "query": "SELECT policy_type_code FROM available_policies GROUP BY policy_type_code HAVING count(*) > 3",
        "schema": "CREATE TABLE Available_Policies (Customer_Phone TEXT, Policy_ID NUMBER, policy_type_code TEXT); CREATE TABLE Customers (Customer_ID NUMBER); CREATE TABLE Customers_Policies (Customer_ID NUMBER, Policy_ID NUMBER);"
      },
      {
        "question": "Show me the same for more than 4 customers.",
        "query": "SELECT policy_type_code FROM available_policies GROUP BY policy_type_code HAVING count(*) > 4",
        "schema": "CREATE TABLE Customers_Policies (Customer_ID NUMBER, Policy_ID NUMBER); CREATE TABLE Available_Policies (policy_type_code TEXT, Customer_Phone TEXT, Policy_ID NUMBER); CREATE TABLE Customers (Customer_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What is the maximum amount of settlements?",
        "query": "SELECT max(settlement_amount) FROM settlements",
        "schema": "CREATE TABLE Settlements (Settlement_Amount NUMBER, Settlement_ID NUMBER);"
      },
      {
        "question": "What is the total amount of settlements?",
        "query": "SELECT sum(settlement_amount) FROM settlements",
        "schema": "CREATE TABLE Settlements (Settlement_Amount NUMBER, Settlement_ID NUMBER);"
      },
      {
        "question": "What is the average?",
        "query": "SELECT avg(settlement_amount) FROM settlements",
        "schema": "CREATE TABLE Settlements (Settlement_ID NUMBER, Settlement_Amount NUMBER);"
      }
    ],
    [
      {
        "question": "Find the name of services that have been used in first notification of loss.",
        "query": "SELECT t2.service_name FROM first_notification_of_loss AS t1 JOIN services AS t2 ON t1.service_id = t2.service_id GROUP BY t1.service_id HAVING count(*) > 0",
        "schema": "CREATE TABLE Services (Service_ID NUMBER, Service_name TEXT); CREATE TABLE Customers_Policies (Policy_ID NUMBER); CREATE TABLE First_Notification_of_Loss (FNOL_ID NUMBER, Service_ID NUMBER, Customer_ID NUMBER, Policy_ID NUMBER); CREATE TABLE Available_Policies (Policy_ID NUMBER);"
      },
      {
        "question": "Find services used more than twice in first notification of loss.",
        "query": "SELECT t2.service_name FROM first_notification_of_loss AS t1 JOIN services AS t2 ON t1.service_id = t2.service_id GROUP BY t1.service_id HAVING count(*) > 2",
        "schema": "CREATE TABLE Services (Service_name TEXT, Service_ID NUMBER); CREATE TABLE First_Notification_of_Loss (FNOL_ID NUMBER, Customer_ID NUMBER, Policy_ID NUMBER, Service_ID NUMBER); CREATE TABLE Customers_Policies (Policy_ID NUMBER); CREATE TABLE Available_Policies (Policy_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What is the ID of the claim that has the smallest amount of total settlement?",
        "query": "SELECT t1.claim_id FROM claims AS t1 JOIN settlements AS t2 ON t1.claim_id = t2.claim_id GROUP BY t1.claim_id ORDER BY sum(t2.settlement_amount) ASC LIMIT 1",
        "schema": "CREATE TABLE Settlements (Claim_ID NUMBER, Settlement_Amount NUMBER, Settlement_ID NUMBER); CREATE TABLE Claims (Claim_ID NUMBER, FNOL_ID NUMBER); CREATE TABLE Customers (Customer_ID NUMBER); CREATE TABLE Customers_Policies (Policy_ID NUMBER, Customer_ID NUMBER);"
      },
      {
        "question": "What is its effective date?",
        "query": "SELECT t1.effective_date FROM claims AS t1 JOIN settlements AS t2 ON t1.claim_id = t2.claim_id GROUP BY t1.claim_id ORDER BY sum(t2.settlement_amount) ASC LIMIT 1",
        "schema": "CREATE TABLE Settlements (Claim_ID NUMBER, Effective_Date TIME, Settlement_ID NUMBER, Settlement_Amount NUMBER); CREATE TABLE Customers (Customer_ID NUMBER); CREATE TABLE Claims (Effective_Date TIME, Claim_ID NUMBER, FNOL_ID NUMBER); CREATE TABLE Customers_Policies (Policy_ID NUMBER, Customer_ID NUMBER);"
      },
      {
        "question": "Show me the same for the effective date of claim with largest amount of total sum.",
        "query": "SELECT t1.effective_date FROM claims AS t1 JOIN settlements AS t2 ON t1.claim_id = t2.claim_id GROUP BY t1.claim_id ORDER BY sum(t2.settlement_amount) DESC LIMIT 1",
        "schema": "CREATE TABLE Settlements (Settlement_ID NUMBER, Settlement_Amount NUMBER, Claim_ID NUMBER, Effective_Date TIME); CREATE TABLE Customers (Customer_ID NUMBER); CREATE TABLE Customers_Policies (Policy_ID NUMBER, Customer_ID NUMBER); CREATE TABLE Claims (Effective_Date TIME, FNOL_ID NUMBER, Claim_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show me the policies listed for the customer named \"Dayana Robel\".",
        "query": "SELECT * FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id WHERE t1.customer_name = \"Dayana Robel\"",
        "schema": "CREATE TABLE Customers_Policies (Policy_ID NUMBER, Customer_ID NUMBER); CREATE TABLE Available_Policies (policy_type_code TEXT, Policy_ID NUMBER); CREATE TABLE Customers (Customer_ID NUMBER, Customer_name TEXT); CREATE TABLE First_Notification_of_Loss (Policy_ID NUMBER, Customer_ID NUMBER);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT count(*) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id WHERE t1.customer_name = \"Dayana Robel\"",
        "schema": "CREATE TABLE First_Notification_of_Loss (Customer_ID NUMBER, Policy_ID NUMBER); CREATE TABLE Customers_Policies (Customer_ID NUMBER, Policy_ID NUMBER); CREATE TABLE Available_Policies (Policy_ID NUMBER, policy_type_code TEXT); CREATE TABLE Customers (Customer_ID NUMBER, Customer_name TEXT);"
      }
    ],
    [
      {
        "question": "What is the name of the customer who has the least policies listed?",
        "query": "SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) ASC LIMIT 1",
        "schema": "CREATE TABLE Customers_Policies (Customer_ID NUMBER, Policy_ID NUMBER); CREATE TABLE Customers (Customer_name TEXT, Customer_ID NUMBER); CREATE TABLE Available_Policies (Policy_ID NUMBER);"
      },
      {
        "question": "How about the most policies listed?",
        "query": "SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Customers (Customer_name TEXT, Customer_ID NUMBER); CREATE TABLE Customers_Policies (Policy_ID NUMBER, Customer_ID NUMBER); CREATE TABLE Available_Policies (Policy_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What is the phone number of the customer named \"Dayana Robel\"?",
        "query": "SELECT DISTINCT t3.customer_phone FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id JOIN available_policies AS t3 ON t2.policy_id = t3.policy_id WHERE t1.customer_name = \"Dayana Robel\"",
        "schema": "CREATE TABLE Available_Policies (Policy_ID NUMBER, Customer_Phone TEXT); CREATE TABLE Customers (Customer_ID NUMBER, Customer_name TEXT); CREATE TABLE Customers_Policies (Policy_ID NUMBER, Customer_ID NUMBER);"
      },
      {
        "question": "Show me all the policy types associated with that phone number.",
        "query": "SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id JOIN available_policies AS t3 ON t2.policy_id = t3.policy_id WHERE t1.customer_name = \"Dayana Robel\"",
        "schema": "CREATE TABLE Customers_Policies (Policy_ID NUMBER, Customer_ID NUMBER); CREATE TABLE Available_Policies (Policy_ID NUMBER, policy_type_code TEXT, Customer_Phone TEXT); CREATE TABLE Customers (Customer_name TEXT, Customer_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What is the name of the customer who has the most policies listed?",
        "query": "SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Customers_Policies (Customer_ID NUMBER, Policy_ID NUMBER); CREATE TABLE Available_Policies (Policy_ID NUMBER); CREATE TABLE Customers (Customer_ID NUMBER, Customer_name TEXT); CREATE TABLE First_Notification_of_Loss (Customer_ID NUMBER);"
      },
      {
        "question": "How many policy types has the customer listed?",
        "query": "SELECT DISTINCT count(*) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id JOIN available_policies AS t3 ON t2.policy_id = t3.policy_id WHERE t1.customer_name = (SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1)",
        "schema": "CREATE TABLE First_Notification_of_Loss (Customer_ID NUMBER); CREATE TABLE Customers (Customer_name TEXT, Customer_ID NUMBER); CREATE TABLE Customers_Policies (Policy_ID NUMBER, Customer_ID NUMBER); CREATE TABLE Available_Policies (policy_type_code TEXT, Policy_ID NUMBER);"
      },
      {
        "question": "List all of them please.",
        "query": "SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id JOIN available_policies AS t3 ON t2.policy_id = t3.policy_id WHERE t1.customer_name = (SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1)",
        "schema": "CREATE TABLE Available_Policies (Policy_ID NUMBER, policy_type_code TEXT); CREATE TABLE First_Notification_of_Loss (Customer_ID NUMBER); CREATE TABLE Customers (Customer_ID NUMBER, Customer_name TEXT); CREATE TABLE Customers_Policies (Customer_ID NUMBER, Policy_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Find the ids of customers without first notification of loss record.",
        "query": "SELECT customer_id FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id = t2.customer_id",
        "schema": "CREATE TABLE First_Notification_of_Loss (FNOL_ID NUMBER, Policy_ID NUMBER, Customer_ID NUMBER); CREATE TABLE Customers (Customer_name TEXT, Customer_ID NUMBER); CREATE TABLE Customers_Policies (Customer_ID NUMBER, Policy_ID NUMBER);"
      },
      {
        "question": "Show me their names.",
        "query": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id = t2.customer_id",
        "schema": "CREATE TABLE Customers (Customer_name TEXT, Customer_ID NUMBER); CREATE TABLE Customers_Policies (Policy_ID NUMBER, Customer_ID NUMBER); CREATE TABLE First_Notification_of_Loss (Customer_ID NUMBER, FNOL_ID NUMBER, Policy_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Find me names of customers who have used the service \"Close a policy\".",
        "query": "SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id = t2.customer_id JOIN services AS t3 ON t2.service_id = t3.service_id WHERE t3.service_name = \"Close a policy\"",
        "schema": "CREATE TABLE Available_Policies (Policy_ID NUMBER); CREATE TABLE Customers_Policies (Policy_ID NUMBER, Customer_ID NUMBER); CREATE TABLE First_Notification_of_Loss (Service_ID NUMBER, Customer_ID NUMBER, Policy_ID NUMBER); CREATE TABLE Customers (Customer_ID NUMBER, Customer_name TEXT); CREATE TABLE Services (Service_ID NUMBER, Service_name TEXT);"
      },
      {
        "question": "Find me names of customers who have also used the service \"Upgrade a policy\".",
        "query": "SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id = t2.customer_id JOIN services AS t3 ON t2.service_id = t3.service_id WHERE t3.service_name = \"Close a policy\" AND t3.service_name = \"Upgrade a policy\"",
        "schema": "CREATE TABLE Customers (Customer_name TEXT, Customer_ID NUMBER); CREATE TABLE Customers_Policies (Customer_ID NUMBER, Policy_ID NUMBER); CREATE TABLE Available_Policies (Policy_ID NUMBER); CREATE TABLE Services (Service_name TEXT, Service_ID NUMBER); CREATE TABLE First_Notification_of_Loss (Policy_ID NUMBER, Customer_ID NUMBER, FNOL_ID NUMBER, Service_ID NUMBER);"
      },
      {
        "question": "Find me names of customers who have used either of the two services.",
        "query": "SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id = t2.customer_id JOIN services AS t3 ON t2.service_id = t3.service_id WHERE t3.service_name = \"Close a policy\" OR t3.service_name = \"Upgrade a policy\"",
        "schema": "CREATE TABLE Customers_Policies (Customer_ID NUMBER, Policy_ID NUMBER); CREATE TABLE Services (Service_name TEXT, Service_ID NUMBER); CREATE TABLE Customers (Customer_name TEXT, Customer_ID NUMBER); CREATE TABLE First_Notification_of_Loss (FNOL_ID NUMBER, Service_ID NUMBER, Customer_ID NUMBER, Policy_ID NUMBER); CREATE TABLE Available_Policies (Policy_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Find the names of customers who have used both the service \"Close a policy\" or the service \"Upgrade a policy\".",
        "query": "SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id = t2.customer_id JOIN services AS t3 ON t2.service_id = t3.service_id WHERE t3.service_name = \"Close a policy\" INTERSECT SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id = t2.customer_id JOIN services AS t3 ON t2.service_id = t3.service_id WHERE t3.service_name = \"Upgrade a policy\"",
        "schema": "CREATE TABLE Available_Policies (Policy_ID NUMBER); CREATE TABLE Customers_Policies (Policy_ID NUMBER, Customer_ID NUMBER); CREATE TABLE First_Notification_of_Loss (Customer_ID NUMBER, Service_ID NUMBER, Policy_ID NUMBER); CREATE TABLE Customers (Customer_name TEXT, Customer_ID NUMBER); CREATE TABLE Services (Service_ID NUMBER, Service_name TEXT);"
      },
      {
        "question": "How about customers who have used both \"Close a policy\" and \"New policy application\"?",
        "query": "SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id = t2.customer_id JOIN services AS t3 ON t2.service_id = t3.service_id WHERE t3.service_name = \"Close a policy\" INTERSECT SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id = t2.customer_id JOIN services AS t3 ON t2.service_id = t3.service_id WHERE t3.service_name = \"New policy application\"",
        "schema": "CREATE TABLE Available_Policies (Policy_ID NUMBER); CREATE TABLE Customers (Customer_name TEXT, Customer_ID NUMBER); CREATE TABLE Services (Service_name TEXT, Service_ID NUMBER); CREATE TABLE First_Notification_of_Loss (Customer_ID NUMBER, Policy_ID NUMBER, Service_ID NUMBER, FNOL_ID NUMBER); CREATE TABLE Customers_Policies (Policy_ID NUMBER, Customer_ID NUMBER);"
      }
    ],
    [
      {
        "question": "How many customers are there whose name contains \"Diana\"?",
        "query": "SELECT count(*) FROM customers WHERE customer_name LIKE \"%Diana%\"",
        "schema": "CREATE TABLE Customers (Customer_ID NUMBER, Customer_name TEXT); CREATE TABLE Customers_Policies (Customer_ID NUMBER);"
      },
      {
        "question": "Show me their IDs",
        "query": "SELECT customer_id FROM customers WHERE customer_name LIKE \"%Diana%\"",
        "schema": "CREATE TABLE Customers_Policies (Customer_ID NUMBER); CREATE TABLE Customers (Customer_name TEXT, Customer_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What is the average settlement amount on record?",
        "query": "SELECT avg(settlement_amount) FROM settlements",
        "schema": "CREATE TABLE Settlements (Settlement_Amount NUMBER, Settlement_ID NUMBER);"
      },
      {
        "question": "What are the maximum and minimum?",
        "query": "SELECT max(settlement_amount) , min(settlement_amount) FROM settlements",
        "schema": "CREATE TABLE Settlements (Settlement_ID NUMBER, Settlement_Amount NUMBER);"
      }
    ]
  ],
  "wine_1": [
    [
      {
        "question": "show all info of wines.",
        "query": "SELECT * FROM wine",
        "schema": "CREATE TABLE wine (Score NUMBER, Name TEXT, No NUMBER, Winery TEXT, Appelation TEXT); CREATE TABLE appellations (Appelation TEXT);"
      },
      {
        "question": "what is their average rated score?",
        "query": "SELECT avg(score) FROM wine",
        "schema": "CREATE TABLE appellations (Appelation TEXT); CREATE TABLE wine (Name TEXT, Winery TEXT, No NUMBER, Score NUMBER, Appelation TEXT);"
      },
      {
        "question": "find the name of the lowest rated wine.",
        "query": "SELECT name FROM wine ORDER BY score LIMIT 1",
        "schema": "CREATE TABLE appellations (Appelation TEXT); CREATE TABLE wine (Name TEXT, No NUMBER, Winery TEXT, Score NUMBER, Appelation TEXT);"
      },
      {
        "question": "what about the highest rated one?",
        "query": "SELECT name FROM wine ORDER BY score DESC LIMIT 1",
        "schema": "CREATE TABLE wine (Name TEXT, Appelation TEXT, Winery TEXT, No NUMBER, Score NUMBER); CREATE TABLE appellations (Appelation TEXT);"
      }
    ],
    [
      {
        "question": "what is the name of the highest rated wine?",
        "query": "SELECT name FROM wine ORDER BY score DESC LIMIT 1",
        "schema": "CREATE TABLE appellations (Appelation TEXT); CREATE TABLE wine (Appelation TEXT, Score NUMBER, No NUMBER, Name TEXT);"
      },
      {
        "question": "Which winery is it from?",
        "query": "SELECT winery FROM wine ORDER BY score DESC LIMIT 1",
        "schema": "CREATE TABLE appellations (Appelation TEXT); CREATE TABLE wine (Winery TEXT, No NUMBER, Score NUMBER, Appelation TEXT, Name TEXT);"
      }
    ],
    [
      {
        "question": "how many wines are there?",
        "query": "SELECT count(*) FROM wine",
        "schema": "CREATE TABLE wine (Appelation TEXT, State TEXT, No NUMBER, Name TEXT, Winery TEXT, Score NUMBER, Cases NUMBER); CREATE TABLE appellations (Appelation TEXT);"
      },
      {
        "question": "how many are made of red color grape?",
        "query": "SELECT count(*) FROM grapes AS t1 JOIN wine AS t2 ON t1.grape = t2.grape WHERE t1.color = \"Red\"",
        "schema": "CREATE TABLE appellations (Appelation TEXT); CREATE TABLE wine (Name TEXT, Winery TEXT, State TEXT, Cases NUMBER, Score NUMBER, Appelation TEXT, No NUMBER, Grape TEXT); CREATE TABLE grapes (ID NUMBER, Grape TEXT, Color TEXT);"
      },
      {
        "question": "only show their names.",
        "query": "SELECT DISTINCT t2.name FROM grapes AS t1 JOIN wine AS t2 ON t1.grape = t2.grape WHERE t1.color = \"Red\"",
        "schema": "CREATE TABLE wine (Winery TEXT, Name TEXT, No NUMBER, Score NUMBER, Grape TEXT, Appelation TEXT, State TEXT, Cases NUMBER); CREATE TABLE grapes (ID NUMBER, Grape TEXT, Color TEXT); CREATE TABLE appellations (Appelation TEXT);"
      }
    ],
    [
      {
        "question": "what are all appellations?",
        "query": "SELECT appelation FROM appellations",
        "schema": "CREATE TABLE wine (Winery TEXT, Name TEXT, Appelation TEXT); CREATE TABLE appellations (No NUMBER, Appelation TEXT);"
      },
      {
        "question": "which of them are in the North Coast area?",
        "query": "SELECT appelation FROM appellations WHERE area = \"North Coast\"",
        "schema": "CREATE TABLE wine (Winery TEXT, Name TEXT, Appelation TEXT); CREATE TABLE appellations (State TEXT, County TEXT, No NUMBER, Area TEXT, Appelation TEXT);"
      },
      {
        "question": "Find the names of all distinct wines from those appellations.",
        "query": "SELECT DISTINCT t2.name FROM appellations AS t1 JOIN wine AS t2 ON t1.appelation = t2.appelation WHERE t1.area = \"North Coast\"",
        "schema": "CREATE TABLE appellations (No NUMBER, Appelation TEXT, State TEXT, County TEXT, Area TEXT); CREATE TABLE wine (Name TEXT, Winery TEXT, Appelation TEXT);"
      }
    ],
    [
      {
        "question": "what appellations does Sonoma County have?",
        "query": "SELECT appelation FROM appellations WHERE county = \"Sonoma\"",
        "schema": "CREATE TABLE appellations (Area TEXT, County TEXT, State TEXT, Appelation TEXT); CREATE TABLE wine (Appelation TEXT, Name TEXT, State TEXT);"
      },
      {
        "question": "Give me the name of wines that are produced by them.",
        "query": "SELECT t2.name FROM appellations AS t1 JOIN wine AS t2 ON t1.appelation = t2.appelation WHERE t1.county = \"Sonoma\"",
        "schema": "CREATE TABLE appellations (Area TEXT, County TEXT, State TEXT, Appelation TEXT); CREATE TABLE wine (Appelation TEXT, State TEXT, Name TEXT, Winery TEXT);"
      },
      {
        "question": "what is their average price?",
        "query": "SELECT avg(t2.price) FROM appellations AS t1 JOIN wine AS t2 ON t1.appelation = t2.appelation WHERE t1.county = \"Sonoma\"",
        "schema": "CREATE TABLE appellations (State TEXT, County TEXT, Area TEXT, Appelation TEXT); CREATE TABLE wine (Appelation TEXT, Name TEXT, Price NUMBER, Winery TEXT, State TEXT);"
      }
    ],
    [
      {
        "question": "what are all the different colors of grapes?",
        "query": "SELECT DISTINCT color FROM grapes",
        "schema": "CREATE TABLE grapes (Grape TEXT, ID NUMBER, Color TEXT); CREATE TABLE wine (Grape TEXT);"
      },
      {
        "question": "What are the names of wines that are made of white color grapes?",
        "query": "SELECT t2.name FROM grapes AS t1 JOIN wine AS t2 ON t1.grape = t2.grape WHERE t1.color = \"White\"",
        "schema": "CREATE TABLE wine (Name TEXT, Grape TEXT); CREATE TABLE grapes (Color TEXT, ID NUMBER, Grape TEXT);"
      },
      {
        "question": "also show their scores.",
        "query": "SELECT t2.name, t2.score FROM grapes AS t1 JOIN wine AS t2 ON t1.grape = t2.grape WHERE t1.color = \"White\"",
        "schema": "CREATE TABLE grapes (ID NUMBER, Grape TEXT, Color TEXT); CREATE TABLE wine (Score NUMBER, Name TEXT, Grape TEXT);"
      }
    ],
    [
      {
        "question": "how many wines were produced before the year of 2005?",
        "query": "SELECT count(*) FROM wine WHERE YEAR < 2005",
        "schema": "CREATE TABLE appellations (Appelation TEXT); CREATE TABLE wine (Name TEXT, Year NUMBER, Winery TEXT, Appelation TEXT);"
      },
      {
        "question": "how many of them were made by appelations in the Central Coast area?",
        "query": "SELECT count(*) FROM appellations AS t1 JOIN wine AS t2 ON t1.appelation = t2.appelation WHERE t1.area = \"Central Coast\" AND t2.year < 2005",
        "schema": "CREATE TABLE appellations (Area TEXT, State TEXT, Appelation TEXT, County TEXT); CREATE TABLE wine (State TEXT, Appelation TEXT, Year NUMBER, Name TEXT, Winery TEXT);"
      },
      {
        "question": "what is the maximum price among them?",
        "query": "SELECT max(t2.price) FROM appellations AS t1 JOIN wine AS t2 ON t1.appelation = t2.appelation WHERE t1.area = \"Central Coast\" AND t2.year < 2005",
        "schema": "CREATE TABLE wine (Name TEXT, State TEXT, Year NUMBER, Price NUMBER, Winery TEXT, Appelation TEXT); CREATE TABLE appellations (Area TEXT, Appelation TEXT, County TEXT, State TEXT);"
      }
    ],
    [
      {
        "question": "show the name of the wines with scores higher than 90.",
        "query": "SELECT name FROM wine WHERE score > 90",
        "schema": "CREATE TABLE wine (Appelation TEXT, Score NUMBER, Winery TEXT, Name TEXT); CREATE TABLE appellations (Appelation TEXT);"
      },
      {
        "question": "among them, which are made from white grapes?",
        "query": "SELECT t2.name FROM grapes AS t1 JOIN wine AS t2 ON t1.grape = t2.grape WHERE t1.color = \"White\" AND t2.score > 90",
        "schema": "CREATE TABLE appellations (Appelation TEXT); CREATE TABLE wine (Score NUMBER, Appelation TEXT, Grape TEXT, Winery TEXT, Name TEXT); CREATE TABLE grapes (Grape TEXT, Color TEXT, ID NUMBER);"
      },
      {
        "question": "what different grape varieties were they made from?",
        "query": "SELECT DISTINCT t1.grape FROM grapes AS t1 JOIN wine AS t2 ON t1.grape = t2.grape WHERE t1.color = \"White\" AND t2.score > 90",
        "schema": "CREATE TABLE wine (Name TEXT, Score NUMBER, Winery TEXT, Appelation TEXT, Grape TEXT); CREATE TABLE appellations (Appelation TEXT); CREATE TABLE grapes (Grape TEXT, Color TEXT, ID NUMBER);"
      }
    ],
    [
      {
        "question": "how many wines are there?",
        "query": "SELECT count(*) FROM wine",
        "schema": "CREATE TABLE wine (Appelation TEXT, State TEXT, No NUMBER, Name TEXT, Cases NUMBER, Score NUMBER, Winery TEXT); CREATE TABLE appellations (Appelation TEXT);"
      },
      {
        "question": "how many of them have a price higher than 50?",
        "query": "SELECT count(*) FROM wine WHERE price > 50",
        "schema": "CREATE TABLE wine (No NUMBER, Appelation TEXT, Price NUMBER, State TEXT, Cases NUMBER, Name TEXT, Winery TEXT, Score NUMBER); CREATE TABLE appellations (Appelation TEXT);"
      },
      {
        "question": "find their names.",
        "query": "SELECT name FROM wine WHERE price > 50",
        "schema": "CREATE TABLE wine (Price NUMBER, Winery TEXT, No NUMBER, Cases NUMBER, Score NUMBER, Appelation TEXT, Name TEXT, State TEXT); CREATE TABLE appellations (Appelation TEXT);"
      },
      {
        "question": "which are made from red colored grapes?",
        "query": "SELECT t2.name FROM grapes AS t1 JOIN wine AS t2 ON t1.grape = t2.grape WHERE t1.color = \"Red\" AND t2.price > 50",
        "schema": "CREATE TABLE appellations (Appelation TEXT); CREATE TABLE wine (Name TEXT, Grape TEXT, Winery TEXT, State TEXT, Appelation TEXT, Cases NUMBER, Price NUMBER, No NUMBER, Score NUMBER); CREATE TABLE grapes (Grape TEXT, Color TEXT, ID NUMBER);"
      }
    ],
    [
      {
        "question": "Find the name of the wines that have prices lower than 50.",
        "query": "SELECT name FROM wine WHERE price < 50",
        "schema": "CREATE TABLE appellations (Appelation TEXT); CREATE TABLE wine (Price NUMBER, Name TEXT, Appelation TEXT);"
      },
      {
        "question": "which ones have appellations from Monterey county?",
        "query": "SELECT t2.name FROM appellations AS t1 JOIN wine AS t2 ON t1.appelation = t2.appelation WHERE t1.county = \"Monterey\" AND t2.price < 50",
        "schema": "CREATE TABLE wine (State TEXT, Winery TEXT, Name TEXT, Appelation TEXT, Price NUMBER); CREATE TABLE appellations (Appelation TEXT, State TEXT, County TEXT);"
      }
    ],
    [
      {
        "question": "find the lowest price of all wines.",
        "query": "SELECT min(price) FROM wine",
        "schema": "CREATE TABLE appellations (Appelation TEXT); CREATE TABLE wine (Appelation TEXT, No NUMBER, Price NUMBER, Name TEXT, Score NUMBER, Winery TEXT);"
      },
      {
        "question": "how about among those from John Anthony winery?",
        "query": "SELECT min(price) FROM wine WHERE winery = \"John Anthony\"",
        "schema": "CREATE TABLE appellations (Appelation TEXT); CREATE TABLE wine (Appelation TEXT, Score NUMBER, Name TEXT, Price NUMBER, Winery TEXT, No NUMBER);"
      },
      {
        "question": "Find the distinct names of all wines that have prices higher than that.",
        "query": "SELECT DISTINCT name FROM wine WHERE price > (SELECT min(price) FROM wine WHERE winery = \"John Anthony\")",
        "schema": "CREATE TABLE appellations (Appelation TEXT); CREATE TABLE wine (Score NUMBER, Price NUMBER, Name TEXT, Winery TEXT, Appelation TEXT, No NUMBER);"
      }
    ],
    [
      {
        "question": "how many wines were produced before the year of 2010?",
        "query": "SELECT count(*) FROM wine WHERE YEAR < 2010",
        "schema": "CREATE TABLE appellations (Appelation TEXT); CREATE TABLE wine (No NUMBER, Name TEXT, Winery TEXT, Appelation TEXT, Year NUMBER);"
      },
      {
        "question": "which appellation produced the highest number of these?",
        "query": "SELECT appelation FROM wine WHERE YEAR < 2010 GROUP BY appelation ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE wine (Name TEXT, Winery TEXT, No NUMBER, Appelation TEXT, Year NUMBER); CREATE TABLE appellations (Appelation TEXT);"
      },
      {
        "question": "What is the area where that appellation is from?",
        "query": "SELECT t1.area FROM appellations AS t1 JOIN wine AS t2 ON t1.appelation = t2.appelation GROUP BY t2.appelation HAVING t2.year < 2010 ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE appellations (County TEXT, Appelation TEXT, State TEXT, Area TEXT); CREATE TABLE wine (Name TEXT, State TEXT, No NUMBER, Year NUMBER, Winery TEXT, Appelation TEXT);"
      }
    ],
    [
      {
        "question": "what are all different colors of grapes?",
        "query": "SELECT DISTINCT color FROM grapes",
        "schema": "CREATE TABLE grapes (Color TEXT, Grape TEXT, ID NUMBER); CREATE TABLE wine (Grape TEXT);"
      },
      {
        "question": "which one produces the wines with the highest average price?",
        "query": "SELECT t1.color FROM grapes AS t1 JOIN wine AS t2 ON t1.grape = t2.grape GROUP BY t2.grape ORDER BY avg(price) DESC LIMIT 1",
        "schema": "CREATE TABLE appellations (Appelation TEXT); CREATE TABLE grapes (Grape TEXT, ID NUMBER, Color TEXT); CREATE TABLE wine (Price NUMBER, Name TEXT, Grape TEXT);"
      }
    ],
    [
      {
        "question": "Find the distinct names of wines produced before the year of 2000.",
        "query": "SELECT DISTINCT name FROM wine WHERE YEAR < 2000",
        "schema": "CREATE TABLE wine (Name TEXT, Year NUMBER); CREATE TABLE appellations (Appelation TEXT);"
      },
      {
        "question": "also list the different names of wines produced after 2010.",
        "query": "SELECT DISTINCT name FROM wine WHERE YEAR < 2000 OR YEAR > 2010",
        "schema": "CREATE TABLE appellations (Appelation TEXT); CREATE TABLE wine (Year NUMBER, Name TEXT);"
      }
    ],
    [
      {
        "question": "how many wines are made from Zinfandel grapes?",
        "query": "SELECT count(*) FROM wine WHERE grape = \"Zinfandel\"",
        "schema": "CREATE TABLE grapes (Grape TEXT, ID NUMBER); CREATE TABLE wine (No NUMBER, Appelation TEXT, Name TEXT, Grape TEXT, Winery TEXT); CREATE TABLE appellations (Appelation TEXT);"
      },
      {
        "question": "What are the average prices and number of cases for these wines?",
        "query": "SELECT avg(price) , avg(cases) FROM wine WHERE grape = \"Zinfandel\"",
        "schema": "CREATE TABLE wine (Grape TEXT, Name TEXT, Cases NUMBER, Winery TEXT, No NUMBER, Price NUMBER, Appelation TEXT); CREATE TABLE grapes (Grape TEXT, ID NUMBER); CREATE TABLE appellations (Appelation TEXT);"
      },
      {
        "question": "only show numbers for the ones produced in 2009.",
        "query": "SELECT avg(price) , avg(cases) FROM wine WHERE YEAR = 2009 AND grape = \"Zinfandel\"",
        "schema": "CREATE TABLE appellations (Appelation TEXT); CREATE TABLE wine (Year NUMBER, Winery TEXT, Name TEXT, Price NUMBER, Cases NUMBER, Grape TEXT, Appelation TEXT, No NUMBER); CREATE TABLE grapes (Grape TEXT, ID NUMBER);"
      }
    ],
    [
      {
        "question": "find the names of all wines produced by the St. Helena appelation.",
        "query": "SELECT name FROM wine WHERE appelation = \"St. Helena\"",
        "schema": "CREATE TABLE wine (Appelation TEXT, Winery TEXT, Name TEXT); CREATE TABLE appellations (Appelation TEXT);"
      },
      {
        "question": "which one is the most expensive?",
        "query": "SELECT name FROM wine WHERE appelation = \"St. Helena\" ORDER BY price DESC LIMIT 1",
        "schema": "CREATE TABLE appellations (Appelation TEXT); CREATE TABLE wine (Price NUMBER, Winery TEXT, Name TEXT, Score NUMBER, Appelation TEXT);"
      },
      {
        "question": "what is its price?",
        "query": "SELECT max(price) FROM wine WHERE appelation = \"St. Helena\"",
        "schema": "CREATE TABLE wine (Score NUMBER, Price NUMBER, Appelation TEXT, Name TEXT, Winery TEXT); CREATE TABLE appellations (Appelation TEXT);"
      },
      {
        "question": "also show the best score earned by these wines.",
        "query": "SELECT max(price) , max(score) FROM wine WHERE appelation = \"St. Helena\"",
        "schema": "CREATE TABLE wine (Score NUMBER, Name TEXT, Winery TEXT, Price NUMBER, Appelation TEXT); CREATE TABLE appellations (Appelation TEXT);"
      }
    ],
    [
      {
        "question": "how many wines were produced in each year?",
        "query": "SELECT count(*), YEAR FROM wine GROUP BY YEAR",
        "schema": "CREATE TABLE wine (Year NUMBER, Appelation TEXT, Winery TEXT, Name TEXT, No NUMBER); CREATE TABLE appellations (Appelation TEXT);"
      },
      {
        "question": "What are the maximum price and score of wines in each year?",
        "query": "SELECT max(price) , max(score) , YEAR FROM wine GROUP BY YEAR",
        "schema": "CREATE TABLE wine (Name TEXT, Price NUMBER, Score NUMBER, Year NUMBER, No NUMBER, Winery TEXT, Appelation TEXT); CREATE TABLE appellations (Appelation TEXT);"
      }
    ],
    [
      {
        "question": "how many different appellations are there?",
        "query": "SELECT count(DISTINCT appelation) FROM appellations",
        "schema": "CREATE TABLE wine (Winery TEXT, Appelation TEXT, Name TEXT); CREATE TABLE appellations (Appelation TEXT, No NUMBER, State TEXT);"
      },
      {
        "question": "what is the average price for wines from each of them?",
        "query": "SELECT avg(price), appelation FROM wine GROUP BY appelation",
        "schema": "CREATE TABLE appellations (Appelation TEXT, No NUMBER, State TEXT); CREATE TABLE wine (Appelation TEXT, Price NUMBER, Name TEXT, Winery TEXT);"
      },
      {
        "question": "what are their average scores too?",
        "query": "SELECT avg(price) , avg(score) , appelation FROM wine GROUP BY appelation",
        "schema": "CREATE TABLE appellations (No NUMBER, State TEXT, Appelation TEXT); CREATE TABLE wine (Score NUMBER, Winery TEXT, Name TEXT, Appelation TEXT, Price NUMBER);"
      }
    ],
    [
      {
        "question": "what are all the different wineries?",
        "query": "SELECT DISTINCT winery FROM wine",
        "schema": "CREATE TABLE wine (Appelation TEXT, Winery TEXT, Name TEXT); CREATE TABLE appellations (Appelation TEXT);"
      },
      {
        "question": "how many are there?",
        "query": "SELECT count(DISTINCT winery) FROM wine",
        "schema": "CREATE TABLE wine (Name TEXT, Appelation TEXT, No NUMBER, Winery TEXT); CREATE TABLE appellations (Appelation TEXT);"
      },
      {
        "question": "show those that have at least four wines.",
        "query": "SELECT winery FROM wine GROUP BY winery HAVING count(*) >= 4",
        "schema": "CREATE TABLE wine (No NUMBER, Appelation TEXT, Name TEXT, Winery TEXT); CREATE TABLE appellations (Appelation TEXT);"
      }
    ],
    [
      {
        "question": "find the appellations that have more three wines.",
        "query": "SELECT appelation FROM wine GROUP BY appelation HAVING count(*) > 3",
        "schema": "CREATE TABLE wine (Name TEXT, Winery TEXT, Appelation TEXT); CREATE TABLE appellations (Appelation TEXT, No NUMBER);"
      },
      {
        "question": "how about those that have at most three?",
        "query": "SELECT appelation FROM wine GROUP BY appelation HAVING count(*) <= 3",
        "schema": "CREATE TABLE appellations (No NUMBER, Appelation TEXT); CREATE TABLE wine (Winery TEXT, Appelation TEXT, Name TEXT);"
      },
      {
        "question": "find the countries of these appellations.",
        "query": "SELECT t1.county FROM appellations AS t1 JOIN wine AS t2 ON t1.appelation = t2.appelation GROUP BY t2.appelation HAVING count(*) <= 3",
        "schema": "CREATE TABLE appellations (County TEXT, Appelation TEXT, State TEXT, No NUMBER); CREATE TABLE wine (Appelation TEXT, State TEXT, Winery TEXT, Name TEXT);"
      }
    ],
    [
      {
        "question": "show the name and year of all wines by Brander winery.",
        "query": "SELECT name, YEAR FROM wine WHERE winery = \"Brander\"",
        "schema": "CREATE TABLE wine (Name TEXT, Winery TEXT, Appelation TEXT, Year NUMBER); CREATE TABLE appellations (Appelation TEXT);"
      },
      {
        "question": "which one was made the earliest?",
        "query": "SELECT name, YEAR FROM wine WHERE winery = \"Brander\" ORDER BY YEAR LIMIT 1",
        "schema": "CREATE TABLE wine (Year NUMBER, Appelation TEXT, Name TEXT, Winery TEXT); CREATE TABLE appellations (Appelation TEXT);"
      },
      {
        "question": "What are the names of all wines that were produced before this year?",
        "query": "SELECT name FROM wine WHERE YEAR < (SELECT min(YEAR) FROM wine WHERE winery = \"Brander\")",
        "schema": "CREATE TABLE appellations (Appelation TEXT); CREATE TABLE wine (Year NUMBER, Appelation TEXT, Winery TEXT, Name TEXT);"
      }
    ],
    [
      {
        "question": "what are the names of wines made during the year 2006?",
        "query": "SELECT name FROM wine WHERE YEAR = 2006",
        "schema": "CREATE TABLE appellations (Appelation TEXT); CREATE TABLE wine (Year NUMBER, Name TEXT);"
      },
      {
        "question": "which one is the most expensive?",
        "query": "SELECT name FROM wine WHERE YEAR = 2006 ORDER BY price DESC LIMIT 1",
        "schema": "CREATE TABLE appellations (Appelation TEXT); CREATE TABLE wine (Winery TEXT, Name TEXT, Year NUMBER, Price NUMBER);"
      },
      {
        "question": "what is the price?",
        "query": "SELECT max(price) FROM wine WHERE YEAR = 2006",
        "schema": "CREATE TABLE appellations (Appelation TEXT); CREATE TABLE wine (Year NUMBER, Winery TEXT, Name TEXT, Price NUMBER);"
      },
      {
        "question": "What are the names of wines that are more expensive than that?",
        "query": "SELECT name FROM wine WHERE price > (SELECT max(price) FROM wine WHERE YEAR = 2006)",
        "schema": "CREATE TABLE appellations (Appelation TEXT); CREATE TABLE wine (Name TEXT, Price NUMBER, Winery TEXT, Year NUMBER);"
      }
    ],
    [
      {
        "question": "how many wines are made of white colored grapes?",
        "query": "SELECT count(*) FROM grapes AS t1 JOIN wine AS t2 ON t1.grape = t2.grape WHERE t1.color = \"White\"",
        "schema": "CREATE TABLE grapes (ID NUMBER, Grape TEXT, Color TEXT); CREATE TABLE appellations (Appelation TEXT); CREATE TABLE wine (Grape TEXT, Appelation TEXT, Name TEXT);"
      },
      {
        "question": "which winery produced the greatest number of these wines?",
        "query": "SELECT t2.winery FROM grapes AS t1 JOIN wine AS t2 ON t1.grape = t2.grape WHERE t1.color = \"White\" GROUP BY t2.winery ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE grapes (Grape TEXT, Color TEXT, ID NUMBER); CREATE TABLE wine (Appelation TEXT, Winery TEXT, Name TEXT, Grape TEXT); CREATE TABLE appellations (Appelation TEXT);"
      },
      {
        "question": "how the top 3 wineries?",
        "query": "SELECT t2.winery FROM grapes AS t1 JOIN wine AS t2 ON t1.grape = t2.grape WHERE t1.color = \"White\" GROUP BY t2.winery ORDER BY count(*) DESC LIMIT 3",
        "schema": "CREATE TABLE wine (Grape TEXT, Name TEXT, Winery TEXT, Appelation TEXT); CREATE TABLE grapes (Color TEXT, ID NUMBER, Grape TEXT); CREATE TABLE appellations (Appelation TEXT);"
      }
    ],
    [
      {
        "question": "how many wines cost more than 100?",
        "query": "SELECT count(*) FROM wine WHERE price > 100",
        "schema": "CREATE TABLE wine (Winery TEXT, Appelation TEXT, Name TEXT, Price NUMBER); CREATE TABLE appellations (Appelation TEXT);"
      },
      {
        "question": "List the grape, winery and year of these wines.",
        "query": "SELECT grape , winery , YEAR FROM wine WHERE price > 100",
        "schema": "CREATE TABLE appellations (Appelation TEXT); CREATE TABLE wine (Winery TEXT, Grape TEXT, Price NUMBER, Year NUMBER, Appelation TEXT, Name TEXT); CREATE TABLE grapes (Grape TEXT, ID NUMBER);"
      },
      {
        "question": "order them by their produce year.",
        "query": "SELECT grape , winery , YEAR FROM wine WHERE price > 100 ORDER BY YEAR",
        "schema": "CREATE TABLE grapes (Grape TEXT, ID NUMBER); CREATE TABLE appellations (Appelation TEXT); CREATE TABLE wine (Price NUMBER, Appelation TEXT, Winery TEXT, Grape TEXT, Year NUMBER, Name TEXT);"
      }
    ],
    [
      {
        "question": "list all info for wines ordered by their names.",
        "query": "SELECT * FROM wine ORDER BY name",
        "schema": "CREATE TABLE wine (Name TEXT, Appelation TEXT);"
      },
      {
        "question": "only show those whose score is higher than 93.",
        "query": "SELECT * FROM wine WHERE score > 93 ORDER BY name",
        "schema": "CREATE TABLE wine (Name TEXT, Score NUMBER, Winery TEXT, Appelation TEXT);"
      },
      {
        "question": "show their name only.",
        "query": "SELECT name FROM wine WHERE score > 93 ORDER BY name",
        "schema": "CREATE TABLE wine (Winery TEXT, Name TEXT, Score NUMBER, Appelation TEXT);"
      },
      {
        "question": "also give me their grapes and appellations.",
        "query": "SELECT grape , appelation , name FROM wine WHERE score > 93 ORDER BY name",
        "schema": "CREATE TABLE wine (Appelation TEXT, Winery TEXT, Grape TEXT, Name TEXT, Score NUMBER); CREATE TABLE appellations (Appelation TEXT); CREATE TABLE grapes (Grape TEXT, ID NUMBER);"
      }
    ],
    [
      {
        "question": "how many wines were made after the year 2008?",
        "query": "SELECT count(*) FROM wine WHERE YEAR > 2008",
        "schema": "CREATE TABLE wine (Appelation TEXT, Name TEXT, Year NUMBER, Winery TEXT); CREATE TABLE appellations (Appelation TEXT);"
      },
      {
        "question": "what are their appellations?",
        "query": "SELECT appelation FROM wine WHERE YEAR > 2008",
        "schema": "CREATE TABLE wine (Name TEXT, Winery TEXT, Year NUMBER, Appelation TEXT); CREATE TABLE appellations (Appelation TEXT);"
      },
      {
        "question": "which of them are not in the Central Coast area?",
        "query": "SELECT appelation FROM wine WHERE YEAR > 2008 EXCEPT SELECT appelation FROM appellations WHERE area = \"Central Coast\"",
        "schema": "CREATE TABLE wine (State TEXT, Name TEXT, Year NUMBER, Appelation TEXT, Winery TEXT); CREATE TABLE appellations (Appelation TEXT, State TEXT, County TEXT, Area TEXT);"
      }
    ],
    [
      {
        "question": "Find the average price of wines.",
        "query": "SELECT avg(price) FROM wine",
        "schema": "CREATE TABLE wine (Name TEXT, Price NUMBER, Appelation TEXT, Winery TEXT, No NUMBER); CREATE TABLE appellations (Appelation TEXT);"
      },
      {
        "question": "how about for the wines with appellations from Sonoma county?",
        "query": "SELECT avg(t2.price) FROM appellations AS t1 JOIN wine AS t2 ON t1.appelation = t2.appelation WHERE t1.county = 'Sonoma'",
        "schema": "CREATE TABLE wine (Name TEXT, State TEXT, Winery TEXT, No NUMBER, Price NUMBER, Appelation TEXT); CREATE TABLE appellations (Appelation TEXT, County TEXT, State TEXT);"
      },
      {
        "question": "what is the average for wines that are not produced from there?",
        "query": "SELECT avg(price) FROM wine WHERE appelation NOT IN (SELECT t1.appelation FROM appellations AS t1 JOIN wine AS t2 ON t1.appelation = t2.appelation WHERE t1.county = 'Sonoma')",
        "schema": "CREATE TABLE appellations (State TEXT, County TEXT, Appelation TEXT); CREATE TABLE wine (Price NUMBER, Winery TEXT, Name TEXT, Appelation TEXT, No NUMBER, State TEXT);"
      }
    ]
  ],
  "company_office": [
    [
      {
        "question": "Show me the sales for each company!",
        "query": "SELECT id, sales_billion FROM companies",
        "schema": "CREATE TABLE Companies (id NUMBER, name TEXT, Sales_billion NUMBER);"
      },
      {
        "question": "Also, include the industry they are in!",
        "query": "SELECT id, sales_billion, industry FROM companies",
        "schema": "CREATE TABLE Companies (name TEXT, Industry TEXT, Sales_billion NUMBER, id NUMBER);"
      },
      {
        "question": "Which ones are not in the Banking industry?",
        "query": "SELECT id, sales_billion, industry FROM companies WHERE industry != \"Banking\"",
        "schema": "CREATE TABLE Companies (Industry TEXT, id NUMBER, Sales_billion NUMBER, name TEXT);"
      },
      {
        "question": "What are the minimum and maximum sales?",
        "query": "SELECT max(sales_billion) , min(sales_billion) FROM companies WHERE industry != \"Banking\"",
        "schema": "CREATE TABLE Companies (name TEXT, Industry TEXT, id NUMBER, Sales_billion NUMBER);"
      }
    ],
    [
      {
        "question": "Show me the heights of each building.",
        "query": "SELECT id, height FROM buildings",
        "schema": "CREATE TABLE buildings (Stories NUMBER, name TEXT, id NUMBER, Height NUMBER); CREATE TABLE Office_locations (company_id NUMBER, building_id NUMBER); CREATE TABLE Companies (Headquarters TEXT, id NUMBER);"
      },
      {
        "question": "What is the average height?",
        "query": "SELECT avg(height) FROM buildings",
        "schema": "CREATE TABLE Office_locations (building_id NUMBER, company_id NUMBER); CREATE TABLE buildings (name TEXT, Stories NUMBER, Height NUMBER, id NUMBER); CREATE TABLE Companies (Headquarters TEXT, id NUMBER);"
      },
      {
        "question": "How about the max height?",
        "query": "SELECT height FROM buildings ORDER BY height DESC LIMIT 1",
        "schema": "CREATE TABLE Companies (Headquarters TEXT, id NUMBER); CREATE TABLE buildings (name TEXT, id NUMBER, Stories NUMBER, Height NUMBER); CREATE TABLE Office_locations (building_id NUMBER, company_id NUMBER);"
      },
      {
        "question": "How many stories does the building with this height have?",
        "query": "SELECT stories FROM buildings ORDER BY height DESC LIMIT 1",
        "schema": "CREATE TABLE buildings (Height NUMBER, id NUMBER, Stories NUMBER, name TEXT); CREATE TABLE Office_locations (building_id NUMBER, company_id NUMBER); CREATE TABLE Companies (id NUMBER, Headquarters TEXT);"
      }
    ],
    [
      {
        "question": "What are names of all the companies?",
        "query": "SELECT name FROM companies",
        "schema": "CREATE TABLE Companies (id NUMBER, name TEXT);"
      },
      {
        "question": "How many of them have office locations?",
        "query": "SELECT count(*) FROM office_locations AS t1 JOIN companies AS t2 ON t1.company_id = t2.id",
        "schema": "CREATE TABLE Office_locations (company_id NUMBER, building_id NUMBER); CREATE TABLE Companies (id NUMBER, Headquarters TEXT, name TEXT); CREATE TABLE buildings (name TEXT, id NUMBER);"
      },
      {
        "question": "Which are they?",
        "query": "SELECT t2.name FROM office_locations AS t1 JOIN companies AS t2 ON t1.company_id = t2.id",
        "schema": "CREATE TABLE buildings (id NUMBER, name TEXT); CREATE TABLE Office_locations (company_id NUMBER, building_id NUMBER); CREATE TABLE Companies (Headquarters TEXT, id NUMBER, name TEXT);"
      },
      {
        "question": "Also, provide the names all the office locations for each!",
        "query": "SELECT t3.name , t2.name FROM office_locations AS t1 JOIN buildings AS t2 ON t1.building_id = t2.id JOIN companies AS t3 ON t1.company_id = t3.id",
        "schema": "CREATE TABLE Companies (Headquarters TEXT, name TEXT, id NUMBER); CREATE TABLE buildings (name TEXT, id NUMBER); CREATE TABLE Office_locations (building_id NUMBER, company_id NUMBER);"
      }
    ],
    [
      {
        "question": "What are the names of all the buildings?",
        "query": "SELECT name FROM buildings",
        "schema": "CREATE TABLE buildings (id NUMBER, name TEXT);"
      },
      {
        "question": "Which ones have at least one company office?",
        "query": "SELECT t2.name FROM office_locations AS t1 JOIN buildings AS t2 ON t1.building_id = t2.id JOIN companies AS t3 ON t1.company_id = t3.id",
        "schema": "CREATE TABLE Office_locations (building_id NUMBER, company_id NUMBER); CREATE TABLE Companies (id NUMBER, name TEXT); CREATE TABLE buildings (id NUMBER, name TEXT);"
      },
      {
        "question": "How about at least two?",
        "query": "SELECT t2.name FROM office_locations AS t1 JOIN buildings AS t2 ON t1.building_id = t2.id JOIN companies AS t3 ON t1.company_id = t3.id GROUP BY t1.building_id HAVING count(*) > 1",
        "schema": "CREATE TABLE Companies (name TEXT, id NUMBER); CREATE TABLE Office_locations (company_id NUMBER, building_id NUMBER); CREATE TABLE buildings (name TEXT, id NUMBER);"
      }
    ],
    [
      {
        "question": "What are the buildings with at least one company office?",
        "query": "SELECT * FROM office_locations AS t1 JOIN buildings AS t2 ON t1.building_id = t2.id JOIN companies AS t3 ON t1.company_id = t3.id",
        "schema": "CREATE TABLE buildings (id NUMBER, name TEXT); CREATE TABLE Companies (id NUMBER, Headquarters TEXT); CREATE TABLE Office_locations (company_id NUMBER, building_id NUMBER);"
      },
      {
        "question": "How many offices do they each have?",
        "query": "SELECT t1.building_id, count(*) FROM office_locations AS t1 JOIN buildings AS t2 ON t1.building_id = t2.id JOIN companies AS t3 ON t1.company_id = t3.id GROUP BY t1.building_id",
        "schema": "CREATE TABLE Office_locations (company_id NUMBER, building_id NUMBER); CREATE TABLE Companies (Headquarters TEXT, id NUMBER); CREATE TABLE buildings (id NUMBER, name TEXT);"
      },
      {
        "question": "Which one has the most?",
        "query": "SELECT * FROM office_locations AS t1 JOIN buildings AS t2 ON t1.building_id = t2.id JOIN companies AS t3 ON t1.company_id = t3.id GROUP BY t1.building_id ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Companies (id NUMBER, Headquarters TEXT); CREATE TABLE Office_locations (company_id NUMBER, building_id NUMBER); CREATE TABLE buildings (name TEXT, id NUMBER);"
      },
      {
        "question": "What is its name?",
        "query": "SELECT t2.name FROM office_locations AS t1 JOIN buildings AS t2 ON t1.building_id = t2.id JOIN companies AS t3 ON t1.company_id = t3.id GROUP BY t1.building_id ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE buildings (name TEXT, id NUMBER); CREATE TABLE Companies (Headquarters TEXT, id NUMBER, name TEXT); CREATE TABLE Office_locations (building_id NUMBER, company_id NUMBER);"
      }
    ],
    [
      {
        "question": "List the names of the buildings that have a status on-hold.",
        "query": "SELECT name FROM buildings WHERE status = \"on-hold\"",
        "schema": "CREATE TABLE buildings (Status TEXT, name TEXT, id NUMBER);"
      },
      {
        "question": "Also, list their height and number of stories.",
        "query": "SELECT name, height, stories FROM buildings WHERE status = \"on-hold\"",
        "schema": "CREATE TABLE buildings (Stories NUMBER, name TEXT, Status TEXT, Height NUMBER, id NUMBER);"
      },
      {
        "question": "Actually just show the names and number of stories for each!",
        "query": "SELECT name, stories FROM buildings WHERE status = \"on-hold\"",
        "schema": "CREATE TABLE buildings (Status TEXT, name TEXT, Height NUMBER, Stories NUMBER, id NUMBER);"
      },
      {
        "question": "Can you just show the names sorted by number of stories FROM least to greatest?",
        "query": "SELECT name FROM buildings WHERE status = \"on-hold\" ORDER BY stories ASC",
        "schema": "CREATE TABLE buildings (id NUMBER, name TEXT, Status TEXT, Height NUMBER, Stories NUMBER);"
      }
    ],
    [
      {
        "question": "Show each company id and its industry.",
        "query": "SELECT id, industry FROM companies",
        "schema": "CREATE TABLE Companies (id NUMBER, Industry TEXT, Headquarters TEXT, name TEXT); CREATE TABLE Office_locations (company_id NUMBER);"
      },
      {
        "question": "Show how many companies are in each industry.",
        "query": "SELECT industry, count(*) FROM companies GROUP BY industry",
        "schema": "CREATE TABLE Office_locations (company_id NUMBER); CREATE TABLE Companies (name TEXT, id NUMBER, Headquarters TEXT, Industry TEXT);"
      },
      {
        "question": "Sort industries by the number of companies in a descending order!",
        "query": "SELECT industry, count(*) FROM companies GROUP BY industry ORDER BY count(*) DESC",
        "schema": "CREATE TABLE Companies (id NUMBER, name TEXT, Headquarters TEXT, Industry TEXT); CREATE TABLE Office_locations (company_id NUMBER);"
      },
      {
        "question": "Actually, can you just show the industries!",
        "query": "SELECT industry FROM companies GROUP BY industry ORDER BY count(*) DESC",
        "schema": "CREATE TABLE Companies (id NUMBER, Headquarters TEXT, Industry TEXT, name TEXT); CREATE TABLE Office_locations (company_id NUMBER);"
      }
    ],
    [
      {
        "question": "How many different company industries are there?",
        "query": "SELECT count(DISTINCT industry) FROM companies",
        "schema": "CREATE TABLE Companies (Industry TEXT, Headquarters TEXT, id NUMBER, name TEXT);"
      },
      {
        "question": "What are they?",
        "query": "SELECT DISTINCT industry FROM companies",
        "schema": "CREATE TABLE Companies (Industry TEXT, id NUMBER, name TEXT, Headquarters TEXT);"
      },
      {
        "question": "Which one has the least number of companies?",
        "query": "SELECT industry FROM companies GROUP BY industry ORDER BY count(*) ASC LIMIT 1",
        "schema": "CREATE TABLE Companies (id NUMBER, Industry TEXT, name TEXT, Headquarters TEXT);"
      },
      {
        "question": "How about the most?",
        "query": "SELECT industry FROM companies GROUP BY industry ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Companies (Market_Value_billion TEXT, id NUMBER, Industry TEXT, Headquarters TEXT, name TEXT);"
      }
    ],
    [
      {
        "question": "How many buildings are there?",
        "query": "SELECT count(*) FROM buildings",
        "schema": "CREATE TABLE Office_locations (building_id NUMBER, company_id NUMBER); CREATE TABLE Companies (Headquarters TEXT, id NUMBER); CREATE TABLE buildings (Stories NUMBER, name TEXT, id NUMBER, City TEXT);"
      },
      {
        "question": "How many have a company office?",
        "query": "SELECT count(DISTINCT building_id) FROM office_locations",
        "schema": "CREATE TABLE buildings (City TEXT, Stories NUMBER, name TEXT, id NUMBER); CREATE TABLE Companies (id NUMBER, Headquarters TEXT); CREATE TABLE Office_locations (company_id NUMBER, building_id NUMBER);"
      },
      {
        "question": "What are their building names?",
        "query": "SELECT t2.name FROM office_locations AS t1 JOIN buildings AS t2 ON t1.building_id = t2.id GROUP BY t2.id",
        "schema": "CREATE TABLE buildings (name TEXT, City TEXT, id NUMBER, Stories NUMBER); CREATE TABLE Companies (id NUMBER, Headquarters TEXT); CREATE TABLE Office_locations (building_id NUMBER, company_id NUMBER);"
      },
      {
        "question": "What are the names of the buildings other than those?",
        "query": "SELECT name FROM buildings WHERE id NOT IN (SELECT building_id FROM office_locations)",
        "schema": "CREATE TABLE buildings (Stories NUMBER, name TEXT, City TEXT, id NUMBER); CREATE TABLE Companies (id NUMBER, Headquarters TEXT); CREATE TABLE Office_locations (building_id NUMBER, company_id NUMBER);"
      }
    ],
    [
      {
        "question": "How many different industries have companies have headquarters in USA?",
        "query": "SELECT count(DISTINCT industry) FROM companies WHERE headquarters = \"USA\"",
        "schema": "CREATE TABLE Office_locations (company_id NUMBER); CREATE TABLE Companies (Industry TEXT, Headquarters TEXT, id NUMBER, name TEXT); CREATE TABLE buildings (City TEXT);"
      },
      {
        "question": "headquarters in China?",
        "query": "SELECT count(DISTINCT industry) FROM companies WHERE headquarters = \"China\"",
        "schema": "CREATE TABLE buildings (City TEXT); CREATE TABLE Companies (Industry TEXT, Headquarters TEXT, name TEXT, id NUMBER); CREATE TABLE Office_locations (company_id NUMBER);"
      },
      {
        "question": "how about both?",
        "query": "SELECT count(*) FROM (SELECT industry FROM companies WHERE headquarters = \"USA\" INTERSECT SELECT industry FROM companies WHERE headquarters = \"China\")",
        "schema": "CREATE TABLE buildings (City TEXT); CREATE TABLE Companies (name TEXT, Headquarters TEXT, Industry TEXT, id NUMBER); CREATE TABLE Office_locations (company_id NUMBER);"
      },
      {
        "question": "Which ones?",
        "query": "SELECT industry FROM companies WHERE headquarters = \"USA\" INTERSECT SELECT industry FROM companies WHERE headquarters = \"China\"",
        "schema": "CREATE TABLE Office_locations (company_id NUMBER); CREATE TABLE buildings (City TEXT); CREATE TABLE Companies (Headquarters TEXT, Industry TEXT, name TEXT, id NUMBER);"
      }
    ],
    [
      {
        "question": "What industry is each company in?",
        "query": "SELECT id, industry FROM companies",
        "schema": "CREATE TABLE Companies (id NUMBER, name TEXT, Industry TEXT);"
      },
      {
        "question": "How many companies are in Banking industry?",
        "query": "SELECT count(*) FROM companies WHERE industry = \"Banking\"",
        "schema": "CREATE TABLE Companies (name TEXT, id NUMBER, Headquarters TEXT, Industry TEXT);"
      },
      {
        "question": "How about in the industry Conglomerate?",
        "query": "SELECT count(*) FROM companies WHERE industry = \"Conglomerate\"",
        "schema": "CREATE TABLE Companies (Headquarters TEXT, id NUMBER, name TEXT, Industry TEXT);"
      },
      {
        "question": "How many in total are in either one?",
        "query": "SELECT count(*) FROM companies WHERE industry = \"Banking\" OR industry = \"Conglomerate\"",
        "schema": "CREATE TABLE Companies (Headquarters TEXT, name TEXT, id NUMBER, Industry TEXT);"
      }
    ]
  ],
  "theme_gallery": [
    [
      {
        "question": "Show all info about artists.",
        "query": "SELECT * FROM artist",
        "schema": "CREATE TABLE artist (Name TEXT, Artist_ID NUMBER); CREATE TABLE exhibition (Exhibition_ID NUMBER, Artist_ID NUMBER);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT count(*) FROM artist",
        "schema": "CREATE TABLE artist (Name TEXT, Artist_ID NUMBER); CREATE TABLE exhibition (Exhibition_ID NUMBER, Artist_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show all info about artists",
        "query": "SELECT * FROM artist",
        "schema": "CREATE TABLE exhibition (Exhibition_ID NUMBER, Artist_ID NUMBER); CREATE TABLE artist (Artist_ID NUMBER, Name TEXT);"
      },
      {
        "question": "Can you just give me their name and age?",
        "query": "SELECT name , age FROM artist",
        "schema": "CREATE TABLE exhibition (Exhibition_ID NUMBER, Artist_ID NUMBER); CREATE TABLE artist (Age NUMBER, Name TEXT, Artist_ID NUMBER);"
      },
      {
        "question": "Ohh also add their country.",
        "query": "SELECT name , age , country FROM artist",
        "schema": "CREATE TABLE exhibition (Exhibition_ID NUMBER, Artist_ID NUMBER); CREATE TABLE artist (Age NUMBER, Name TEXT, Country TEXT, Artist_ID NUMBER);"
      },
      {
        "question": "Sort them by the year they joined.",
        "query": "SELECT name , age , country FROM artist ORDER BY year_join",
        "schema": "CREATE TABLE exhibition (Exhibition_ID NUMBER, Artist_ID NUMBER); CREATE TABLE artist (Artist_ID NUMBER, Age NUMBER, Name TEXT, Country TEXT, Year_Join NUMBER);"
      }
    ],
    [
      {
        "question": "Show all artists.",
        "query": "SELECT * FROM artist",
        "schema": "CREATE TABLE artist (Name TEXT, Artist_ID NUMBER); CREATE TABLE exhibition (Artist_ID NUMBER, Exhibition_ID NUMBER);"
      },
      {
        "question": "What are their countries?",
        "query": "SELECT country FROM artist",
        "schema": "CREATE TABLE artist (Name TEXT, Country TEXT, Artist_ID NUMBER); CREATE TABLE exhibition (Exhibition_ID NUMBER, Artist_ID NUMBER);"
      },
      {
        "question": "Just give me distinct ones.",
        "query": "SELECT DISTINCT country FROM artist",
        "schema": "CREATE TABLE artist (Artist_ID NUMBER, Country TEXT, Name TEXT); CREATE TABLE exhibition (Exhibition_ID NUMBER, Artist_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show all artists.",
        "query": "SELECT * FROM artist",
        "schema": "CREATE TABLE exhibition (Artist_ID NUMBER, Exhibition_ID NUMBER); CREATE TABLE artist (Name TEXT, Artist_ID NUMBER);"
      },
      {
        "question": "What are their names and year they joined?",
        "query": "SELECT name , year_join FROM artist",
        "schema": "CREATE TABLE artist (Name TEXT, Artist_ID NUMBER, Year_Join NUMBER); CREATE TABLE exhibition (Year NUMBER, Artist_ID NUMBER, Exhibition_ID NUMBER);"
      },
      {
        "question": "Oh please just consider those who are not from United States.",
        "query": "SELECT name , year_join FROM artist WHERE country != 'United States'",
        "schema": "CREATE TABLE exhibition (Exhibition_ID NUMBER, Artist_ID NUMBER, Year NUMBER); CREATE TABLE artist (Country TEXT, Artist_ID NUMBER, Year_Join NUMBER, Name TEXT);"
      }
    ],
    [
      {
        "question": "Which artists have an age above 46?",
        "query": "SELECT * FROM artist WHERE age > 46",
        "schema": "CREATE TABLE exhibition (Artist_ID NUMBER); CREATE TABLE artist (Name TEXT, Age NUMBER, Artist_ID NUMBER);"
      },
      {
        "question": "Which artists have an age above 46 and joined after 1990?",
        "query": "SELECT * FROM artist WHERE age > 46 AND year_join > 1990",
        "schema": "CREATE TABLE artist (Name TEXT, Age NUMBER, Artist_ID NUMBER, Year_Join NUMBER); CREATE TABLE exhibition (Artist_ID NUMBER, Year NUMBER);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT count(*) FROM artist WHERE age > 46 AND year_join > 1990",
        "schema": "CREATE TABLE exhibition (Artist_ID NUMBER, Year NUMBER); CREATE TABLE artist (Year_Join NUMBER, Age NUMBER, Artist_ID NUMBER, Name TEXT);"
      }
    ],
    [
      {
        "question": "Show all artists.",
        "query": "SELECT * FROM artist",
        "schema": "CREATE TABLE exhibition (Exhibition_ID NUMBER, Artist_ID NUMBER); CREATE TABLE artist (Name TEXT, Artist_ID NUMBER);"
      },
      {
        "question": "Just show those from United States.",
        "query": "SELECT * FROM artist WHERE country = 'United States'",
        "schema": "CREATE TABLE exhibition (Artist_ID NUMBER, Exhibition_ID NUMBER); CREATE TABLE artist (Name TEXT, Artist_ID NUMBER, Country TEXT);"
      },
      {
        "question": "What is their average age?",
        "query": "SELECT avg(age) FROM artist WHERE country = 'United States'",
        "schema": "CREATE TABLE artist (Age NUMBER, Name TEXT, Country TEXT, Artist_ID NUMBER); CREATE TABLE exhibition (Exhibition_ID NUMBER, Artist_ID NUMBER);"
      },
      {
        "question": "Also show their minimum age.",
        "query": "SELECT avg(age) , min(age) FROM artist WHERE country = 'United States'",
        "schema": "CREATE TABLE exhibition (Exhibition_ID NUMBER, Artist_ID NUMBER); CREATE TABLE artist (Name TEXT, Artist_ID NUMBER, Age NUMBER, Country TEXT);"
      }
    ],
    [
      {
        "question": "What is the year each artist joined?",
        "query": "SELECT year_join FROM artist",
        "schema": "CREATE TABLE artist (Artist_ID NUMBER, Name TEXT, Year_Join NUMBER); CREATE TABLE exhibition (Year NUMBER, Artist_ID NUMBER);"
      },
      {
        "question": "Can you order artists by the year they joined?",
        "query": "SELECT * FROM artist ORDER BY year_join",
        "schema": "CREATE TABLE exhibition (Year NUMBER, Artist_ID NUMBER); CREATE TABLE artist (Name TEXT, Year_Join NUMBER, Artist_ID NUMBER);"
      },
      {
        "question": "What is the name of the artist who joined latest?",
        "query": "SELECT name FROM artist ORDER BY year_join DESC LIMIT 1",
        "schema": "CREATE TABLE artist (Artist_ID NUMBER, Name TEXT, Year_Join NUMBER); CREATE TABLE exhibition (Artist_ID NUMBER, Year NUMBER);"
      }
    ],
    [
      {
        "question": "Show all info about exhibition.",
        "query": "SELECT * FROM exhibition",
        "schema": "CREATE TABLE exhibition_record (Exhibition_ID NUMBER, Attendance NUMBER); CREATE TABLE exhibition (Exhibition_ID NUMBER, Theme TEXT);"
      },
      {
        "question": "Hmm just show those that took place after year 2005.",
        "query": "SELECT * FROM exhibition WHERE YEAR >= 2005",
        "schema": "CREATE TABLE exhibition_record (Exhibition_ID NUMBER, Date TEXT, Attendance NUMBER); CREATE TABLE exhibition (Exhibition_ID NUMBER, Theme TEXT, Year NUMBER);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT count(*) FROM exhibition WHERE YEAR >= 2005",
        "schema": "CREATE TABLE exhibition_record (Date TEXT, Attendance NUMBER, Exhibition_ID NUMBER); CREATE TABLE exhibition (Exhibition_ID NUMBER, Year NUMBER, Theme TEXT);"
      }
    ],
    [
      {
        "question": "Show all info about exhibition.",
        "query": "SELECT * FROM exhibition",
        "schema": "CREATE TABLE exhibition_record (Attendance NUMBER, Exhibition_ID NUMBER); CREATE TABLE exhibition (Theme TEXT, Exhibition_ID NUMBER);"
      },
      {
        "question": "What are their themes and years?",
        "query": "SELECT theme , YEAR FROM exhibition",
        "schema": "CREATE TABLE exhibition (Exhibition_ID NUMBER, Theme TEXT, Year NUMBER); CREATE TABLE exhibition_record (Attendance NUMBER, Exhibition_ID NUMBER);"
      },
      {
        "question": "Which themes and years had ticket prices lower than 15?",
        "query": "SELECT theme , YEAR FROM exhibition WHERE ticket_price < 15",
        "schema": "CREATE TABLE exhibition_record (Attendance NUMBER, Exhibition_ID NUMBER); CREATE TABLE exhibition (Exhibition_ID NUMBER, Year NUMBER, Theme TEXT, Ticket_Price NUMBER);"
      }
    ],
    [
      {
        "question": "Show all artist names.",
        "query": "SELECT name FROM artist",
        "schema": "CREATE TABLE artist (Name TEXT, Artist_ID NUMBER); CREATE TABLE exhibition (Exhibition_ID NUMBER, Artist_ID NUMBER);"
      },
      {
        "question": "Show all exhibitions.",
        "query": "SELECT * FROM exhibition",
        "schema": "CREATE TABLE exhibition (Artist_ID NUMBER, Exhibition_ID NUMBER); CREATE TABLE exhibition_record (Exhibition_ID NUMBER); CREATE TABLE artist (Artist_ID NUMBER, Name TEXT);"
      },
      {
        "question": "Count exhibitions for each artist.",
        "query": "SELECT count(*) FROM exhibition AS t1 JOIN artist AS t2 ON t1.artist_id = t2.artist_id GROUP BY t1.artist_id",
        "schema": "CREATE TABLE artist (Name TEXT, Artist_ID NUMBER); CREATE TABLE exhibition (Artist_ID NUMBER, Exhibition_ID NUMBER); CREATE TABLE exhibition_record (Exhibition_ID NUMBER);"
      },
      {
        "question": "Show all artist names and the number of exhibitions for each artist.",
        "query": "SELECT t2.name , count(*) FROM exhibition AS t1 JOIN artist AS t2 ON t1.artist_id = t2.artist_id GROUP BY t1.artist_id",
        "schema": "CREATE TABLE exhibition (Artist_ID NUMBER, Exhibition_ID NUMBER); CREATE TABLE artist (Name TEXT, Artist_ID NUMBER); CREATE TABLE exhibition_record (Exhibition_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Count exhibitions for each artist.",
        "query": "SELECT count(*) FROM exhibition AS t1 JOIN artist AS t2 ON t1.artist_id = t2.artist_id GROUP BY t1.artist_id",
        "schema": "CREATE TABLE artist (Name TEXT, Artist_ID NUMBER); CREATE TABLE exhibition (Artist_ID NUMBER, Exhibition_ID NUMBER); CREATE TABLE exhibition_record (Exhibition_ID NUMBER);"
      },
      {
        "question": "Which artist has the most exhibitions?",
        "query": "SELECT * FROM exhibition AS t1 JOIN artist AS t2 ON t1.artist_id = t2.artist_id GROUP BY t1.artist_id ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE exhibition (Exhibition_ID NUMBER, Artist_ID NUMBER); CREATE TABLE artist (Name TEXT, Artist_ID NUMBER); CREATE TABLE exhibition_record (Exhibition_ID NUMBER);"
      },
      {
        "question": "Give me his or her name and country.",
        "query": "SELECT t2.name , t2.country FROM exhibition AS t1 JOIN artist AS t2 ON t1.artist_id = t2.artist_id GROUP BY t1.artist_id ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE exhibition_record (Exhibition_ID NUMBER); CREATE TABLE exhibition (Exhibition_ID NUMBER, Artist_ID NUMBER); CREATE TABLE artist (Country TEXT, Name TEXT, Artist_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show all artist ids involved in an exhibition.",
        "query": "SELECT artist_id FROM exhibition",
        "schema": "CREATE TABLE exhibition (Theme TEXT, Artist_ID NUMBER, Exhibition_ID NUMBER); CREATE TABLE artist (Artist_ID NUMBER, Name TEXT); CREATE TABLE exhibition_record (Exhibition_ID NUMBER);"
      },
      {
        "question": "Which artists did not have any exhibition?",
        "query": "SELECT * FROM artist WHERE artist_id NOT IN (SELECT artist_id FROM exhibition)",
        "schema": "CREATE TABLE artist (Artist_ID NUMBER, Name TEXT); CREATE TABLE exhibition_record (Exhibition_ID NUMBER); CREATE TABLE exhibition (Theme TEXT, Exhibition_ID NUMBER, Artist_ID NUMBER);"
      },
      {
        "question": "What are their names?",
        "query": "SELECT name FROM artist WHERE artist_id NOT IN (SELECT artist_id FROM exhibition)",
        "schema": "CREATE TABLE exhibition (Artist_ID NUMBER, Theme TEXT, Exhibition_ID NUMBER); CREATE TABLE exhibition_record (Exhibition_ID NUMBER); CREATE TABLE artist (Artist_ID NUMBER, Name TEXT);"
      }
    ],
    [
      {
        "question": "Show all exhibitions.",
        "query": "SELECT * FROM exhibition",
        "schema": "CREATE TABLE exhibition_record (Exhibition_ID NUMBER); CREATE TABLE exhibition (Theme TEXT, Exhibition_ID NUMBER);"
      },
      {
        "question": "What is the average ticket price?",
        "query": "SELECT avg(ticket_price) FROM exhibition",
        "schema": "CREATE TABLE exhibition (Theme TEXT, Exhibition_ID NUMBER, Ticket_Price NUMBER); CREATE TABLE exhibition_record (Exhibition_ID NUMBER);"
      },
      {
        "question": "Which exhibitions have a ticket price higher than the average?",
        "query": "SELECT * FROM exhibition WHERE ticket_price > (SELECT avg(ticket_price) FROM exhibition)",
        "schema": "CREATE TABLE exhibition_record (Exhibition_ID NUMBER); CREATE TABLE exhibition (Ticket_Price NUMBER, Theme TEXT, Exhibition_ID NUMBER);"
      },
      {
        "question": "What are the themes and artist names for the exhibitions with a ticket price higher than the average?",
        "query": "SELECT t1.theme , t2.name FROM exhibition AS t1 JOIN artist AS t2 ON t1.artist_id = t2.artist_id WHERE t1.ticket_price > (SELECT avg(ticket_price) FROM exhibition)",
        "schema": "CREATE TABLE artist (Name TEXT, Artist_ID NUMBER); CREATE TABLE exhibition (Theme TEXT, Ticket_Price NUMBER, Exhibition_ID NUMBER, Artist_ID NUMBER); CREATE TABLE exhibition_record (Exhibition_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show all info about exhibitions.",
        "query": "SELECT * FROM exhibition",
        "schema": "CREATE TABLE exhibition (Theme TEXT, Exhibition_ID NUMBER); CREATE TABLE exhibition_record (Exhibition_ID NUMBER);"
      },
      {
        "question": "Which exhibitions were before year 2009?",
        "query": "SELECT * FROM exhibition WHERE YEAR < 2009",
        "schema": "CREATE TABLE exhibition (Exhibition_ID NUMBER, Year NUMBER, Theme TEXT); CREATE TABLE exhibition_record (Date TEXT, Exhibition_ID NUMBER);"
      },
      {
        "question": "What are their average ticket prices?",
        "query": "SELECT avg(ticket_price) FROM exhibition WHERE YEAR < 2009",
        "schema": "CREATE TABLE exhibition (Theme TEXT, Year NUMBER, Exhibition_ID NUMBER, Ticket_Price NUMBER); CREATE TABLE exhibition_record (Exhibition_ID NUMBER, Date TEXT);"
      },
      {
        "question": "Can you also show their minimum, and maximum ticket prices?",
        "query": "SELECT avg(ticket_price) , min(ticket_price) , max(ticket_price) FROM exhibition WHERE YEAR < 2009",
        "schema": "CREATE TABLE exhibition (Exhibition_ID NUMBER, Year NUMBER, Theme TEXT, Ticket_Price NUMBER); CREATE TABLE exhibition_record (Date TEXT, Exhibition_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What is the ticket price of each exhibition?",
        "query": "SELECT ticket_price FROM exhibition",
        "schema": "CREATE TABLE exhibition_record (Exhibition_ID NUMBER); CREATE TABLE exhibition (Ticket_Price NUMBER, Theme TEXT, Exhibition_ID NUMBER);"
      },
      {
        "question": "Sort exhibitions in a descending order of ticket price.",
        "query": "SELECT * FROM exhibition ORDER BY ticket_price DESC",
        "schema": "CREATE TABLE exhibition_record (Exhibition_ID NUMBER); CREATE TABLE exhibition (Ticket_Price NUMBER, Exhibition_ID NUMBER, Theme TEXT);"
      },
      {
        "question": "Can you show the theme and year of exhibitions?",
        "query": "SELECT theme , YEAR FROM exhibition ORDER BY ticket_price DESC",
        "schema": "CREATE TABLE exhibition_record (Exhibition_ID NUMBER); CREATE TABLE exhibition (Year NUMBER, Ticket_Price NUMBER, Exhibition_ID NUMBER, Theme TEXT);"
      }
    ],
    [
      {
        "question": "Which exhibitions were held in year 2004?",
        "query": "SELECT * FROM exhibition WHERE YEAR = 2004",
        "schema": "CREATE TABLE exhibition (Theme TEXT, Exhibition_ID NUMBER, Year NUMBER); CREATE TABLE exhibition_record (Exhibition_ID NUMBER, Date TEXT);"
      },
      {
        "question": "What were the themes for each?",
        "query": "SELECT theme FROM exhibition WHERE YEAR = 2004",
        "schema": "CREATE TABLE exhibition_record (Date TEXT, Exhibition_ID NUMBER); CREATE TABLE exhibition (Year NUMBER, Exhibition_ID NUMBER, Theme TEXT);"
      },
      {
        "question": "Can you also the dates, and attendances?",
        "query": "SELECT t2.theme , t1.date , t1.attendance FROM exhibition_record AS t1 JOIN exhibition AS t2 ON t1.exhibition_id = t2.exhibition_id WHERE t2.year = 2004",
        "schema": "CREATE TABLE exhibition_record (Exhibition_ID NUMBER, Date TEXT, Attendance NUMBER); CREATE TABLE exhibition (Exhibition_ID NUMBER, Theme TEXT, Year NUMBER);"
      }
    ],
    [
      {
        "question": "Show all exhibitions in 2004.",
        "query": "SELECT * FROM exhibition WHERE YEAR = 2004",
        "schema": "CREATE TABLE exhibition (Year NUMBER, Exhibition_ID NUMBER); CREATE TABLE exhibition_record (Exhibition_ID NUMBER, Date TEXT); CREATE TABLE artist (Year_Join NUMBER);"
      },
      {
        "question": "Show all artists.",
        "query": "SELECT name FROM artist",
        "schema": "CREATE TABLE exhibition (Year NUMBER, Exhibition_ID NUMBER, Artist_ID NUMBER); CREATE TABLE artist (Name TEXT, Year_Join NUMBER, Artist_ID NUMBER); CREATE TABLE exhibition_record (Date TEXT, Exhibition_ID NUMBER);"
      },
      {
        "question": "Show all the names of the artists who didn't have an exhibition in 2004.",
        "query": "SELECT name FROM artist EXCEPT SELECT t2.name FROM exhibition AS t1 JOIN artist AS t2 ON t1.artist_id = t2.artist_id WHERE t1.year = 2004",
        "schema": "CREATE TABLE exhibition_record (Exhibition_ID NUMBER, Date TEXT); CREATE TABLE artist (Year_Join NUMBER, Name TEXT, Artist_ID NUMBER); CREATE TABLE exhibition (Year NUMBER, Exhibition_ID NUMBER, Artist_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show the theme of each exhibition.",
        "query": "SELECT t2.theme FROM exhibition_record AS t1 JOIN exhibition AS t2 ON t1.exhibition_id = t2.exhibition_id",
        "schema": "CREATE TABLE exhibition (Exhibition_ID NUMBER, Theme TEXT); CREATE TABLE exhibition_record (Exhibition_ID NUMBER);"
      },
      {
        "question": "How about of each exhibition with an attendance below 100?",
        "query": "SELECT t2.theme FROM exhibition_record AS t1 JOIN exhibition AS t2 ON t1.exhibition_id = t2.exhibition_id WHERE t1.attendance < 100",
        "schema": "CREATE TABLE exhibition_record (Attendance NUMBER, Exhibition_ID NUMBER); CREATE TABLE exhibition (Exhibition_ID NUMBER, Theme TEXT);"
      },
      {
        "question": "How about of each exhibition with an attendance below 100 or above 500?",
        "query": "SELECT t2.theme FROM exhibition_record AS t1 JOIN exhibition AS t2 ON t1.exhibition_id = t2.exhibition_id WHERE t1.attendance < 100 INTERSECT SELECT t2.theme FROM exhibition_record AS t1 JOIN exhibition AS t2 ON t1.exhibition_id = t2.exhibition_id WHERE t1.attendance > 500",
        "schema": "CREATE TABLE exhibition (Theme TEXT, Exhibition_ID NUMBER); CREATE TABLE exhibition_record (Exhibition_ID NUMBER, Attendance NUMBER);"
      }
    ],
    [
      {
        "question": "Which exhibition has an attendance more than 100?",
        "query": "SELECT * FROM exhibition_record AS t1 JOIN exhibition AS t2 ON t1.exhibition_id = t2.exhibition_id WHERE t1.attendance > 100",
        "schema": "CREATE TABLE exhibition_record (Exhibition_ID NUMBER, Attendance NUMBER); CREATE TABLE exhibition (Exhibition_ID NUMBER, Theme TEXT);"
      },
      {
        "question": "How about those with an attendance of more than 100 or a ticket price below 10?",
        "query": "SELECT * FROM exhibition_record AS t1 JOIN exhibition AS t2 ON t1.exhibition_id = t2.exhibition_id WHERE t1.attendance > 100 OR t2.ticket_price < 10",
        "schema": "CREATE TABLE exhibition_record (Exhibition_ID NUMBER, Attendance NUMBER); CREATE TABLE exhibition (Exhibition_ID NUMBER, Theme TEXT, Ticket_Price NUMBER);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT count(*) FROM exhibition_record AS t1 JOIN exhibition AS t2 ON t1.exhibition_id = t2.exhibition_id WHERE t1.attendance > 100 OR t2.ticket_price < 10",
        "schema": "CREATE TABLE exhibition (Theme TEXT, Ticket_Price NUMBER, Exhibition_ID NUMBER); CREATE TABLE exhibition_record (Attendance NUMBER, Exhibition_ID NUMBER);"
      }
    ]
  ],
  "county_public_safety": [
    [
      {
        "question": "How many counties are there?",
        "query": "SELECT count(*) FROM county_public_safety",
        "schema": "CREATE TABLE county_public_safety (Police_officers NUMBER, County_ID NUMBER, Name TEXT, Location TEXT, Police_force TEXT, Residents_per_officer NUMBER, Population NUMBER, Case_burden NUMBER, Crime_rate NUMBER); CREATE TABLE city (County_ID NUMBER);"
      },
      {
        "question": "What is the average crime rate of counties?",
        "query": "SELECT avg(crime_rate) FROM county_public_safety",
        "schema": "CREATE TABLE city (County_ID NUMBER); CREATE TABLE county_public_safety (Residents_per_officer NUMBER, Crime_rate NUMBER, Location TEXT, Police_officers NUMBER, Police_force TEXT, Case_burden NUMBER, County_ID NUMBER, Name TEXT, Population NUMBER);"
      },
      {
        "question": "How about the minimum and maximum?",
        "query": "SELECT min(crime_rate) , max(crime_rate) FROM county_public_safety",
        "schema": "CREATE TABLE county_public_safety (Name TEXT, Police_officers NUMBER, Location TEXT, Crime_rate NUMBER, Case_burden NUMBER, Population NUMBER, Residents_per_officer NUMBER, County_ID NUMBER, Police_force TEXT); CREATE TABLE city (County_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What is the average population?",
        "query": "SELECT avg(population) FROM county_public_safety",
        "schema": "CREATE TABLE county_public_safety (Population NUMBER, Residents_per_officer NUMBER);"
      },
      {
        "question": "What is the maximum population?",
        "query": "SELECT population FROM county_public_safety ORDER BY population DESC LIMIT 1",
        "schema": "CREATE TABLE county_public_safety (Name TEXT, Residents_per_officer NUMBER, County_ID NUMBER, Population NUMBER);"
      },
      {
        "question": "What is the name of its county?",
        "query": "SELECT name FROM county_public_safety ORDER BY population DESC LIMIT 1",
        "schema": "CREATE TABLE county_public_safety (Population NUMBER, Name TEXT, County_ID NUMBER, Residents_per_officer NUMBER);"
      }
    ],
    [
      {
        "question": "What is the minimum white percentage of the counties?",
        "query": "SELECT white FROM city ORDER BY white ASC LIMIT 1",
        "schema": "CREATE TABLE county_public_safety (Population NUMBER, County_ID NUMBER, Name TEXT); CREATE TABLE city (White NUMBER);"
      },
      {
        "question": "How about the largest 5 white percentages?",
        "query": "SELECT white FROM city ORDER BY white DESC LIMIT 5",
        "schema": "CREATE TABLE city (White NUMBER, County_ID NUMBER, Black NUMBER); CREATE TABLE county_public_safety (Population NUMBER, Name TEXT, County_ID NUMBER);"
      },
      {
        "question": "List the names of their cities.",
        "query": "SELECT name FROM city ORDER BY white DESC LIMIT 5",
        "schema": "CREATE TABLE city (Name TEXT, City_ID NUMBER, County_ID NUMBER, White NUMBER, Black NUMBER); CREATE TABLE county_public_safety (Population NUMBER, County_ID NUMBER, Name TEXT);"
      }
    ],
    [
      {
        "question": "What is the average number of police officers of all counties?",
        "query": "SELECT avg(police_officers) FROM county_public_safety",
        "schema": "CREATE TABLE county_public_safety (Residents_per_officer NUMBER, Police_force TEXT, County_ID NUMBER, Name TEXT, Police_officers NUMBER, Population NUMBER); CREATE TABLE city (County_ID NUMBER);"
      },
      {
        "question": "Which county has largest number of police officers? Show its county_ID.",
        "query": "SELECT county_id FROM county_public_safety ORDER BY police_officers DESC LIMIT 1",
        "schema": "CREATE TABLE county_public_safety (Name TEXT, Population NUMBER, Police_officers NUMBER, County_ID NUMBER, Police_force TEXT, Residents_per_officer NUMBER); CREATE TABLE city (County_ID NUMBER);"
      },
      {
        "question": "Which cities are located in this county?",
        "query": "SELECT name FROM city WHERE county_id = (SELECT county_id FROM county_public_safety ORDER BY police_officers DESC LIMIT 1)",
        "schema": "CREATE TABLE county_public_safety (Population NUMBER, Name TEXT, County_ID NUMBER, Police_officers NUMBER, Police_force TEXT, Location TEXT, Residents_per_officer NUMBER); CREATE TABLE city (City_ID NUMBER, Name TEXT, County_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What is the average population of all counties?",
        "query": "SELECT avg(population) FROM county_public_safety",
        "schema": "CREATE TABLE county_public_safety (Population NUMBER, Name TEXT, County_ID NUMBER, Residents_per_officer NUMBER);"
      },
      {
        "question": "How many counties have a population more than 20000?",
        "query": "SELECT count(*) FROM county_public_safety WHERE population > 20000",
        "schema": "CREATE TABLE county_public_safety (Name TEXT, Residents_per_officer NUMBER, County_ID NUMBER, Police_officers NUMBER, Population NUMBER);"
      },
      {
        "question": "How many cities are located in these counties?",
        "query": "SELECT count(*) FROM city WHERE county_id IN (SELECT county_id FROM county_public_safety WHERE population > 20000)",
        "schema": "CREATE TABLE county_public_safety (Population NUMBER, Residents_per_officer NUMBER, Police_officers NUMBER, Name TEXT, County_ID NUMBER, Location TEXT); CREATE TABLE city (Amerindian NUMBER, County_ID NUMBER, City_ID NUMBER, Multiracial NUMBER, Name TEXT);"
      }
    ],
    [
      {
        "question": "What is the laargest white percentage among all cities?",
        "query": "SELECT max(white) FROM city",
        "schema": "CREATE TABLE county_public_safety (Population NUMBER, County_ID NUMBER); CREATE TABLE city (Black NUMBER, County_ID NUMBER, White NUMBER, Name TEXT, Asian NUMBER, City_ID NUMBER);"
      },
      {
        "question": "How many cities have a white percentage of more than 90?",
        "query": "SELECT count(*) FROM city WHERE white > 90",
        "schema": "CREATE TABLE county_public_safety (County_ID NUMBER, Population NUMBER); CREATE TABLE city (County_ID NUMBER, White NUMBER, Name TEXT, Asian NUMBER, City_ID NUMBER, Black NUMBER);"
      },
      {
        "question": "What is the id of the county this city is located in?",
        "query": "SELECT county_id FROM city WHERE white > 90",
        "schema": "CREATE TABLE city (City_ID NUMBER, County_ID NUMBER, White NUMBER, Asian NUMBER, Black NUMBER, Name TEXT); CREATE TABLE county_public_safety (Location TEXT, Name TEXT, Population NUMBER, County_ID NUMBER);"
      },
      {
        "question": "What is this county's crime rate?",
        "query": "SELECT t2.crime_rate FROM city AS t1 JOIN county_public_safety AS t2 ON t1.county_id = t2.county_id WHERE t1.white > 90",
        "schema": "CREATE TABLE city (Name TEXT, Black NUMBER, Asian NUMBER, County_ID NUMBER, White NUMBER, City_ID NUMBER); CREATE TABLE county_public_safety (Location TEXT, Name TEXT, Crime_rate NUMBER, Population NUMBER, County_ID NUMBER);"
      }
    ],
    [
      {
        "question": "How many different locations are there?",
        "query": "SELECT count(DISTINCT LOCATION) FROM county_public_safety",
        "schema": "CREATE TABLE county_public_safety (County_ID NUMBER, Location TEXT); CREATE TABLE city (County_ID NUMBER, City_ID NUMBER, Name TEXT);"
      },
      {
        "question": "What is the location shared by the fewest counties?",
        "query": "SELECT LOCATION FROM county_public_safety GROUP BY LOCATION ORDER BY count(*) ASC LIMIT 1",
        "schema": "CREATE TABLE city (County_ID NUMBER, Name TEXT, City_ID NUMBER); CREATE TABLE county_public_safety (Name TEXT, Location TEXT, County_ID NUMBER);"
      },
      {
        "question": "How about the one shared by most counties?",
        "query": "SELECT LOCATION FROM county_public_safety GROUP BY LOCATION ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE county_public_safety (Name TEXT, Location TEXT, County_ID NUMBER); CREATE TABLE city (County_ID NUMBER, City_ID NUMBER, Name TEXT);"
      }
    ],
    [
      {
        "question": "How many cities does each county have?",
        "query": "SELECT county_id, count(*) FROM city GROUP BY county_id",
        "schema": "CREATE TABLE county_public_safety (Name TEXT, County_ID NUMBER, Population NUMBER, Police_officers NUMBER); CREATE TABLE city (City_ID NUMBER, Name TEXT, County_ID NUMBER);"
      },
      {
        "question": "Could you order the results by the number of cities?",
        "query": "SELECT county_id, count(*) FROM city GROUP BY county_id ORDER BY count(*) DESC",
        "schema": "CREATE TABLE county_public_safety (Police_officers NUMBER, County_ID NUMBER, Name TEXT, Population NUMBER); CREATE TABLE city (Name TEXT, City_ID NUMBER, County_ID NUMBER);"
      },
      {
        "question": "Which counties do not have any cities? List their names.",
        "query": "SELECT name FROM county_public_safety WHERE county_id NOT IN (SELECT county_id FROM city)",
        "schema": "CREATE TABLE city (County_ID NUMBER, Name TEXT, City_ID NUMBER); CREATE TABLE county_public_safety (Population NUMBER, County_ID NUMBER, Police_officers NUMBER, Name TEXT);"
      }
    ],
    [
      {
        "question": "How many counties with location on the east?",
        "query": "SELECT count(*) FROM county_public_safety WHERE LOCATION = \"East\"",
        "schema": "CREATE TABLE county_public_safety (Name TEXT, Location TEXT, County_ID NUMBER); CREATE TABLE city (County_ID NUMBER);"
      },
      {
        "question": "How about the number of counties with location on the west?",
        "query": "SELECT count(*) FROM county_public_safety WHERE LOCATION = \"West\"",
        "schema": "CREATE TABLE county_public_safety (Name TEXT, Location TEXT, County_ID NUMBER); CREATE TABLE city (County_ID NUMBER);"
      },
      {
        "question": "Please show the police forces in counties with location on the east.",
        "query": "SELECT police_force FROM county_public_safety WHERE LOCATION = \"East\"",
        "schema": "CREATE TABLE county_public_safety (Police_officers NUMBER, Name TEXT, Location TEXT, Police_force TEXT, County_ID NUMBER); CREATE TABLE city (County_ID NUMBER);"
      },
      {
        "question": "How about the police forces shared by counties with location on the east and west?",
        "query": "SELECT police_force FROM county_public_safety WHERE LOCATION = \"East\" INTERSECT SELECT police_force FROM county_public_safety WHERE LOCATION = \"West\"",
        "schema": "CREATE TABLE county_public_safety (Name TEXT, County_ID NUMBER, Location TEXT, Police_force TEXT, Police_officers NUMBER); CREATE TABLE city (County_ID NUMBER);"
      }
    ]
  ],
  "medicine_enzyme_interaction": [
    [
      {
        "question": "What is the id of the medicine 'Amisulpride'?",
        "query": "SELECT id FROM medicine WHERE name = 'Amisulpride'",
        "schema": "CREATE TABLE medicine_enzyme_interaction (medicine_id NUMBER, enzyme_id NUMBER, interaction_type TEXT); CREATE TABLE medicine (Trade_Name TEXT, name TEXT, id NUMBER); CREATE TABLE enzyme (name TEXT, id NUMBER, Product TEXT);"
      },
      {
        "question": "What are the enzyme ids that interact as inhibitor with medicine 'Amisulpride'?",
        "query": "SELECT t2.enzyme_id FROM medicine AS t1 JOIN medicine_enzyme_interaction AS t2 ON t1.id = t2.medicine_id WHERE t1.name = 'Amisulpride' AND t2.interaction_type = 'inhibitor'",
        "schema": "CREATE TABLE medicine_enzyme_interaction (interaction_type TEXT, medicine_id NUMBER, enzyme_id NUMBER); CREATE TABLE medicine (name TEXT, Trade_Name TEXT, id NUMBER); CREATE TABLE enzyme (Product TEXT, name TEXT, id NUMBER);"
      },
      {
        "question": "What is the name of this enzyme?",
        "query": "SELECT t1.name FROM enzyme AS t1 JOIN medicine_enzyme_interaction AS t2 ON t1.id = t2.enzyme_id JOIN medicine AS t3 ON t2.medicine_id = t3.id WHERE t3.name = 'Amisulpride' AND t2.interaction_type = 'inhibitor'",
        "schema": "CREATE TABLE medicine (id NUMBER, Trade_Name TEXT, name TEXT); CREATE TABLE enzyme (Product TEXT, name TEXT, id NUMBER); CREATE TABLE medicine_enzyme_interaction (enzyme_id NUMBER, interaction_type TEXT, medicine_id NUMBER);"
      }
    ],
    [
      {
        "question": "What are the ids of medicines that interact with at least one enzyme?",
        "query": "SELECT DISTINCT medicine_id FROM medicine_enzyme_interaction",
        "schema": "CREATE TABLE medicine_enzyme_interaction (enzyme_id NUMBER, medicine_id NUMBER, interaction_type TEXT); CREATE TABLE medicine (name TEXT, id NUMBER); CREATE TABLE enzyme (id NUMBER);"
      },
      {
        "question": "Give their names, too.",
        "query": "SELECT t1.id , t1.name FROM medicine AS t1 JOIN medicine_enzyme_interaction AS t2 ON t2.medicine_id = t1.id GROUP BY t1.id",
        "schema": "CREATE TABLE medicine (name TEXT, id NUMBER); CREATE TABLE enzyme (id NUMBER, name TEXT); CREATE TABLE medicine_enzyme_interaction (enzyme_id NUMBER, medicine_id NUMBER, interaction_type TEXT);"
      },
      {
        "question": "Only show that information for medicines with at least two interactions.",
        "query": "SELECT t1.id , t1.name FROM medicine AS t1 JOIN medicine_enzyme_interaction AS t2 ON t2.medicine_id = t1.id GROUP BY t1.id HAVING count(*) >= 2",
        "schema": "CREATE TABLE enzyme (id NUMBER, name TEXT); CREATE TABLE medicine_enzyme_interaction (medicine_id NUMBER, interaction_type TEXT, enzyme_id NUMBER); CREATE TABLE medicine (name TEXT, id NUMBER);"
      }
    ],
    [
      {
        "question": "Show the id, name, and FDA approval for medicines.",
        "query": "SELECT id, name, fda_approved FROM medicine",
        "schema": "CREATE TABLE enzyme (id NUMBER, name TEXT); CREATE TABLE medicine_enzyme_interaction (enzyme_id NUMBER); CREATE TABLE medicine (FDA_approved TEXT, id NUMBER, Trade_Name TEXT, name TEXT);"
      },
      {
        "question": "Only ones that have some interaction with an enzyme.",
        "query": "SELECT id, name, fda_approved FROM medicine WHERE id IN (SELECT medicine_id FROM medicine_enzyme_interaction)",
        "schema": "CREATE TABLE enzyme (name TEXT, id NUMBER); CREATE TABLE medicine_enzyme_interaction (medicine_id NUMBER, interaction_type TEXT, enzyme_id NUMBER); CREATE TABLE medicine (id NUMBER, FDA_approved TEXT, Trade_Name TEXT, name TEXT);"
      },
      {
        "question": "Order that by descending order of number of enzymes the medicine interacts with.",
        "query": "SELECT t1.id , t1.name , t1.fda_approved FROM medicine AS t1 JOIN medicine_enzyme_interaction AS t2 ON t2.medicine_id = t1.id GROUP BY t1.id ORDER BY count(*) DESC",
        "schema": "CREATE TABLE medicine_enzyme_interaction (interaction_type TEXT, medicine_id NUMBER, enzyme_id NUMBER); CREATE TABLE medicine (Trade_Name TEXT, id NUMBER, name TEXT, FDA_approved TEXT); CREATE TABLE enzyme (name TEXT, id NUMBER);"
      }
    ],
    [
      {
        "question": "What are the ids of enzymes that interact with at least one enzyme?",
        "query": "SELECT DISTINCT enzyme_id FROM medicine_enzyme_interaction",
        "schema": "CREATE TABLE enzyme (name TEXT, id NUMBER); CREATE TABLE medicine_enzyme_interaction (medicine_id NUMBER, enzyme_id NUMBER, interaction_type TEXT);"
      },
      {
        "question": "Give their names, too.",
        "query": "SELECT t1.id , t1.name FROM enzyme AS t1 JOIN medicine_enzyme_interaction AS t2 ON t2.enzyme_id = t1.id GROUP BY t1.id",
        "schema": "CREATE TABLE medicine_enzyme_interaction (medicine_id NUMBER, enzyme_id NUMBER, interaction_type TEXT); CREATE TABLE medicine (name TEXT, id NUMBER); CREATE TABLE enzyme (id NUMBER, name TEXT);"
      },
      {
        "question": "Which of those can interact as an 'activator'?",
        "query": "SELECT t1.id , t1.name FROM enzyme AS t1 JOIN medicine_enzyme_interaction AS t2 ON t1.id = t2.enzyme_id WHERE t2.interaction_type = 'activitor' GROUP BY t1.id",
        "schema": "CREATE TABLE medicine_enzyme_interaction (interaction_type TEXT, medicine_id NUMBER, enzyme_id NUMBER); CREATE TABLE enzyme (name TEXT, id NUMBER); CREATE TABLE medicine (name TEXT, id NUMBER);"
      },
      {
        "question": "Which of those interacts as 'activator' with the most number of medicines?",
        "query": "SELECT t1.id , t1.name FROM enzyme AS t1 JOIN medicine_enzyme_interaction AS t2 ON t1.id = t2.enzyme_id WHERE t2.interaction_type = 'activitor' GROUP BY t1.id ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE medicine (name TEXT, id NUMBER); CREATE TABLE medicine_enzyme_interaction (medicine_id NUMBER, enzyme_id NUMBER, interaction_type TEXT); CREATE TABLE enzyme (id NUMBER, name TEXT);"
      }
    ],
    [
      {
        "question": "What is the enzyme id of 'ALA synthase'?",
        "query": "SELECT id FROM enzyme WHERE name = 'ALA synthase'",
        "schema": "CREATE TABLE medicine_enzyme_interaction (enzyme_id NUMBER, interaction_type TEXT, medicine_id NUMBER); CREATE TABLE enzyme (id NUMBER, Product TEXT, name TEXT);"
      },
      {
        "question": "How about for the medicine named 'Aripiprazole'?",
        "query": "SELECT id FROM medicine WHERE name = 'Aripiprazole'",
        "schema": "CREATE TABLE medicine_enzyme_interaction (medicine_id NUMBER, enzyme_id NUMBER, interaction_type TEXT); CREATE TABLE enzyme (Location TEXT, Product TEXT, name TEXT, id NUMBER); CREATE TABLE medicine (Trade_Name TEXT, id NUMBER, name TEXT);"
      },
      {
        "question": "Show where those two ids index into the interaction table together.",
        "query": "SELECT * FROM medicine_enzyme_interaction AS t1 JOIN medicine AS t2 ON t1.medicine_id = t2.id JOIN enzyme AS t3 ON t1.enzyme_id = t3.id WHERE t3.name = 'ALA synthase' AND t2.name = 'Aripiprazole'",
        "schema": "CREATE TABLE medicine_enzyme_interaction (interaction_type TEXT, enzyme_id NUMBER, medicine_id NUMBER); CREATE TABLE enzyme (name TEXT, id NUMBER, Product TEXT, Location TEXT); CREATE TABLE medicine (name TEXT, id NUMBER, Trade_Name TEXT);"
      },
      {
        "question": "Just give the interaction type for that entry.",
        "query": "SELECT t1.interaction_type FROM medicine_enzyme_interaction AS t1 JOIN medicine AS t2 ON t1.medicine_id = t2.id JOIN enzyme AS t3 ON t1.enzyme_id = t3.id WHERE t3.name = 'ALA synthase' AND t2.name = 'Aripiprazole'",
        "schema": "CREATE TABLE enzyme (name TEXT, Product TEXT, id NUMBER, Location TEXT); CREATE TABLE medicine_enzyme_interaction (interaction_type TEXT, enzyme_id NUMBER, medicine_id NUMBER); CREATE TABLE medicine (Trade_Name TEXT, name TEXT, id NUMBER);"
      }
    ],
    [
      {
        "question": "Show the interaction types in decreasing order of frequency.",
        "query": "SELECT interaction_type FROM medicine_enzyme_interaction GROUP BY interaction_type ORDER BY count(*) DESC",
        "schema": "CREATE TABLE enzyme (id NUMBER); CREATE TABLE medicine_enzyme_interaction (interaction_type TEXT, enzyme_id NUMBER, medicine_id NUMBER);"
      },
      {
        "question": "Show the counts, too.",
        "query": "SELECT interaction_type , count(*) FROM medicine_enzyme_interaction GROUP BY interaction_type ORDER BY count(*) DESC",
        "schema": "CREATE TABLE enzyme (id NUMBER); CREATE TABLE medicine_enzyme_interaction (enzyme_id NUMBER, interaction_type TEXT, medicine_id NUMBER);"
      },
      {
        "question": "Only show the most frequent.",
        "query": "SELECT interaction_type , count(*) FROM medicine_enzyme_interaction GROUP BY interaction_type ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE enzyme (id NUMBER); CREATE TABLE medicine_enzyme_interaction (enzyme_id NUMBER, interaction_type TEXT, medicine_id NUMBER);"
      }
    ],
    [
      {
        "question": "Which enzyme ids have interactions?",
        "query": "SELECT DISTINCT enzyme_id FROM medicine_enzyme_interaction",
        "schema": "CREATE TABLE medicine_enzyme_interaction (interaction_type TEXT, enzyme_id NUMBER, medicine_id NUMBER); CREATE TABLE enzyme (id NUMBER);"
      },
      {
        "question": "Which ids do not?",
        "query": "SELECT id FROM enzyme WHERE id NOT IN ( SELECT enzyme_id FROM medicine_enzyme_interaction );",
        "schema": "CREATE TABLE enzyme (id NUMBER, name TEXT); CREATE TABLE medicine_enzyme_interaction (medicine_id NUMBER, enzyme_id NUMBER, interaction_type TEXT); CREATE TABLE medicine (id NUMBER);"
      },
      {
        "question": "Count that.",
        "query": "SELECT count(*) FROM enzyme WHERE id NOT IN ( SELECT enzyme_id FROM medicine_enzyme_interaction );",
        "schema": "CREATE TABLE enzyme (id NUMBER, name TEXT); CREATE TABLE medicine (id NUMBER); CREATE TABLE medicine_enzyme_interaction (interaction_type TEXT, medicine_id NUMBER, enzyme_id NUMBER);"
      }
    ],
    [
      {
        "question": "Which medicine ids interact with at least three enzymes?",
        "query": "SELECT medicine_id FROM medicine_enzyme_interaction GROUP BY medicine_id HAVING count(*) >= 3",
        "schema": "CREATE TABLE medicine (id NUMBER, name TEXT); CREATE TABLE enzyme (id NUMBER); CREATE TABLE medicine_enzyme_interaction (medicine_id NUMBER, interaction_type TEXT, enzyme_id NUMBER);"
      },
      {
        "question": "Also give the trade name for that medicine.",
        "query": "SELECT t1.id , t1.trade_name FROM medicine AS t1 JOIN medicine_enzyme_interaction AS t2 ON t2.medicine_id = t1.id GROUP BY t1.id HAVING count(*) >= 3",
        "schema": "CREATE TABLE enzyme (id NUMBER); CREATE TABLE medicine (name TEXT, Trade_Name TEXT, id NUMBER); CREATE TABLE medicine_enzyme_interaction (enzyme_id NUMBER, interaction_type TEXT, medicine_id NUMBER);"
      }
    ],
    [
      {
        "question": "Which enzyme ids have any 'inhibitor' interaction?",
        "query": "SELECT DISTINCT enzyme_id FROM medicine_enzyme_interaction WHERE interaction_type = 'inhibitor'",
        "schema": "CREATE TABLE medicine_enzyme_interaction (enzyme_id NUMBER, interaction_type TEXT, medicine_id NUMBER); CREATE TABLE enzyme (name TEXT, id NUMBER);"
      },
      {
        "question": "For those enzyme, give the name, location and products.",
        "query": "SELECT DISTINCT t1.name , t1.location , t1.product FROM enzyme AS t1 JOIN medicine_enzyme_interaction AS t2 ON t2.enzyme_id = t1.id WHERE t2.interaction_type = 'inhibitor'",
        "schema": "CREATE TABLE medicine_enzyme_interaction (enzyme_id NUMBER, interaction_type TEXT, medicine_id NUMBER); CREATE TABLE enzyme (name TEXT, Product TEXT, Location TEXT, id NUMBER); CREATE TABLE medicine (name TEXT, id NUMBER);"
      }
    ],
    [
      {
        "question": "Which medicine id can interact both as 'inhibitor' and as 'activitor'?",
        "query": "SELECT medicine_id FROM medicine_enzyme_interaction WHERE interaction_type = 'inhibitor' INTERSECT SELECT medicine_id FROM medicine_enzyme_interaction WHERE interaction_type = 'activitor'",
        "schema": "CREATE TABLE enzyme (id NUMBER); CREATE TABLE medicine_enzyme_interaction (enzyme_id NUMBER, medicine_id NUMBER, interaction_type TEXT); CREATE TABLE medicine (name TEXT, id NUMBER);"
      },
      {
        "question": "Give the medicine name and trade name for those.",
        "query": "SELECT t1.name , t1.trade_name FROM medicine AS t1 JOIN medicine_enzyme_interaction AS t2 ON t2.medicine_id = t1.id WHERE interaction_type = 'inhibitor' INTERSECT SELECT t1.name , t1.trade_name FROM medicine AS t1 JOIN medicine_enzyme_interaction AS t2 ON t2.medicine_id = t1.id WHERE interaction_type = 'activitor'",
        "schema": "CREATE TABLE enzyme (id NUMBER); CREATE TABLE medicine_enzyme_interaction (medicine_id NUMBER, enzyme_id NUMBER, interaction_type TEXT); CREATE TABLE medicine (Trade_Name TEXT, id NUMBER, name TEXT);"
      }
    ],
    [
      {
        "question": "Which medicine ids can interact with enzyme with product 'Protoporphyrinogen IX'?",
        "query": "SELECT medicine_id FROM medicine_enzyme_interaction AS t1 JOIN enzyme AS t2 ON t2.id = t1.enzyme_id WHERE t2.product = 'Protoporphyrinogen IX'",
        "schema": "CREATE TABLE medicine_enzyme_interaction (enzyme_id NUMBER, interaction_type TEXT, medicine_id NUMBER); CREATE TABLE medicine (name TEXT, id NUMBER); CREATE TABLE enzyme (name TEXT, id NUMBER, Product TEXT);"
      },
      {
        "question": "Which ones can not?",
        "query": "SELECT id FROM medicine WHERE id NOT IN (SELECT medicine_id FROM medicine_enzyme_interaction AS t1 JOIN enzyme AS t2 ON t2.id = t1.enzyme_id WHERE t2.product = 'Protoporphyrinogen IX')",
        "schema": "CREATE TABLE enzyme (Product TEXT, id NUMBER, name TEXT); CREATE TABLE medicine_enzyme_interaction (medicine_id NUMBER, enzyme_id NUMBER, interaction_type TEXT); CREATE TABLE medicine (id NUMBER, name TEXT);"
      },
      {
        "question": "Give the name and trade names for those.",
        "query": "SELECT name , trade_name FROM medicine EXCEPT SELECT t1.name , t1.trade_name FROM medicine AS t1 JOIN medicine_enzyme_interaction AS t2 ON t2.medicine_id = t1.id JOIN enzyme AS t3 ON t3.id = t2.enzyme_id WHERE t3.product = 'Protoporphyrinogen IX'",
        "schema": "CREATE TABLE enzyme (name TEXT, Product TEXT, id NUMBER); CREATE TABLE medicine (id NUMBER, name TEXT, Trade_Name TEXT); CREATE TABLE medicine_enzyme_interaction (medicine_id NUMBER, enzyme_id NUMBER, interaction_type TEXT);"
      }
    ]
  ],
  "sakila_1": [
    [
      {
        "question": "Tell me the films which Nick participated in.",
        "query": "SELECT t2.title FROM film_actor AS t1 JOIN film AS t2 ON t1.film_id = t2.film_id JOIN actor AS t3 ON t1.actor_id = t3.actor_id WHERE t3.first_name = \"NICK\"",
        "schema": "CREATE TABLE staff (username TEXT, last_name TEXT, first_name TEXT, staff_id NUMBER); CREATE TABLE film_category (category_id NUMBER, film_id NUMBER); CREATE TABLE inventory (film_id NUMBER); CREATE TABLE film_actor (film_id NUMBER, actor_id NUMBER); CREATE TABLE category (name TEXT, category_id NUMBER); CREATE TABLE actor (actor_id NUMBER, last_name TEXT, first_name TEXT); CREATE TABLE film_text (title TEXT, film_id NUMBER); CREATE TABLE film (title TEXT, film_id NUMBER, rating TEXT); CREATE TABLE customer (customer_id NUMBER, last_name TEXT, first_name TEXT);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT count(t2.title) FROM film_actor AS t1 JOIN film AS t2 ON t1.film_id = t2.film_id JOIN actor AS t3 ON t1.actor_id = t3.actor_id WHERE t3.first_name = \"NICK\"",
        "schema": "CREATE TABLE inventory (film_id NUMBER); CREATE TABLE staff (first_name TEXT, username TEXT, last_name TEXT, staff_id NUMBER); CREATE TABLE film_actor (actor_id NUMBER, film_id NUMBER); CREATE TABLE film (title TEXT, rating TEXT, film_id NUMBER); CREATE TABLE film_text (film_id NUMBER, title TEXT); CREATE TABLE actor (first_name TEXT, actor_id NUMBER, last_name TEXT); CREATE TABLE film_category (category_id NUMBER, film_id NUMBER); CREATE TABLE category (name TEXT, category_id NUMBER); CREATE TABLE customer (first_name TEXT, customer_id NUMBER, last_name TEXT);"
      },
      {
        "question": "And what is the most popular first name of the actors?",
        "query": "SELECT first_name FROM actor GROUP BY first_name ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE inventory (film_id NUMBER); CREATE TABLE film_category (film_id NUMBER, category_id NUMBER); CREATE TABLE customer (last_name TEXT, first_name TEXT, customer_id NUMBER); CREATE TABLE film_text (title TEXT, film_id NUMBER); CREATE TABLE film (title TEXT, film_id NUMBER, rating TEXT); CREATE TABLE category (category_id NUMBER, name TEXT); CREATE TABLE actor (last_name TEXT, first_name TEXT, actor_id NUMBER); CREATE TABLE staff (first_name TEXT, last_name TEXT, username TEXT, staff_id NUMBER); CREATE TABLE film_actor (film_id NUMBER, actor_id NUMBER);"
      }
    ],
    [
      {
        "question": "Tell the last name of the actor with first name ED.",
        "query": "SELECT last_name FROM actor WHERE first_name = \"ED\"",
        "schema": "CREATE TABLE actor (actor_id NUMBER, first_name TEXT, last_name TEXT); CREATE TABLE film (film_id NUMBER); CREATE TABLE film_actor (film_id NUMBER, actor_id NUMBER);"
      },
      {
        "question": "How about that of the actor with first name GRACE?",
        "query": "SELECT last_name FROM actor WHERE first_name = \"GRACE\"",
        "schema": "CREATE TABLE actor (last_name TEXT, first_name TEXT, actor_id NUMBER); CREATE TABLE film_actor (film_id NUMBER, actor_id NUMBER); CREATE TABLE film (film_id NUMBER);"
      },
      {
        "question": "tell me the most popular full name of the actors.",
        "query": "SELECT first_name , last_name FROM actor GROUP BY first_name , last_name ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE film (film_id NUMBER); CREATE TABLE actor (first_name TEXT, actor_id NUMBER, last_name TEXT); CREATE TABLE film_actor (actor_id NUMBER, film_id NUMBER);"
      }
    ],
    [
      {
        "question": "Tell me the city of address \"47 MySakila Drive\".",
        "query": "SELECT t2.city FROM address AS t1 JOIN city AS t2 ON t1.city_id = t2.city_id WHERE t1.address = \"47 MySakila Drive\"",
        "schema": "CREATE TABLE store (address_id NUMBER); CREATE TABLE city (city_id NUMBER, city TEXT); CREATE TABLE address (address2 TEXT, city_id NUMBER, district TEXT, address TEXT, address_id NUMBER); CREATE TABLE staff (address_id NUMBER); CREATE TABLE customer (address_id NUMBER);"
      },
      {
        "question": "What is the district of this address?",
        "query": "SELECT district FROM address WHERE address = \"47 MySakila Drive\"",
        "schema": "CREATE TABLE customer (address_id NUMBER); CREATE TABLE city (city TEXT, city_id NUMBER); CREATE TABLE store (address_id NUMBER); CREATE TABLE address (address TEXT, city_id NUMBER, address2 TEXT, address_id NUMBER, district TEXT); CREATE TABLE staff (address_id NUMBER);"
      },
      {
        "question": "Which districts have at least two addresses?",
        "query": "SELECT district FROM address GROUP BY district HAVING count(*) >= 2",
        "schema": "CREATE TABLE store (address_id NUMBER); CREATE TABLE address (address_id NUMBER, city_id NUMBER, address2 TEXT, address TEXT, district TEXT); CREATE TABLE staff (address_id NUMBER); CREATE TABLE customer (address_id NUMBER); CREATE TABLE city (city_id NUMBER, city TEXT);"
      }
    ],
    [
      {
        "question": "What is the district of \"1913 Hanoi Way?\"",
        "query": "SELECT district FROM address WHERE address = \"1913 Hanoi Way\"",
        "schema": "CREATE TABLE city (country_id NUMBER, city_id NUMBER, city TEXT); CREATE TABLE film_text (title TEXT, description TEXT, film_id NUMBER); CREATE TABLE language (name TEXT, language_id NUMBER); CREATE TABLE film_category (film_id NUMBER, category_id NUMBER); CREATE TABLE category (category_id NUMBER, name TEXT); CREATE TABLE store (store_id NUMBER, address_id NUMBER); CREATE TABLE address (city_id NUMBER, district TEXT, address TEXT, address2 TEXT, address_id NUMBER); CREATE TABLE country (country_id NUMBER, country TEXT); CREATE TABLE film (description TEXT, title TEXT, rating TEXT, film_id NUMBER, original_language_id NUMBER); CREATE TABLE staff (address_id NUMBER);"
      },
      {
        "question": "Tell me the city of this address.",
        "query": "SELECT t2.city FROM address AS t1 JOIN city AS t2 ON t1.city_id = t2.city_id WHERE t1.address = \"1913 Hanoi Way\"",
        "schema": "CREATE TABLE film (original_language_id NUMBER, rating TEXT, title TEXT, description TEXT, film_id NUMBER); CREATE TABLE store (store_id NUMBER, address_id NUMBER); CREATE TABLE city (city_id NUMBER, country_id NUMBER, city TEXT); CREATE TABLE address (address TEXT, district TEXT, address2 TEXT, address_id NUMBER, city_id NUMBER); CREATE TABLE film_text (title TEXT, film_id NUMBER, description TEXT); CREATE TABLE category (name TEXT, category_id NUMBER); CREATE TABLE film_category (category_id NUMBER, film_id NUMBER); CREATE TABLE country (country_id NUMBER, country TEXT); CREATE TABLE language (language_id NUMBER, name TEXT); CREATE TABLE staff (address_id NUMBER);"
      },
      {
        "question": "Which city has the most addresses? List the city name, number of addresses, and city id",
        "query": "SELECT t2.city , count(*) , t1.city_id FROM address AS t1 JOIN city AS t2 ON t1.city_id = t2.city_id GROUP BY t1.city_id ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE category (name TEXT, category_id NUMBER); CREATE TABLE staff (address_id NUMBER); CREATE TABLE film (original_language_id NUMBER, film_id NUMBER, title TEXT, description TEXT, rating TEXT); CREATE TABLE country (country TEXT, country_id NUMBER); CREATE TABLE language (name TEXT, language_id NUMBER); CREATE TABLE film_category (film_id NUMBER, category_id NUMBER); CREATE TABLE film_text (title TEXT, film_id NUMBER, description TEXT); CREATE TABLE city (city_id NUMBER, country_id NUMBER, city TEXT); CREATE TABLE address (address_id NUMBER, address TEXT, city_id NUMBER, address2 TEXT, district TEXT); CREATE TABLE store (address_id NUMBER, store_id NUMBER);"
      }
    ],
    [
      {
        "question": "Tell me the actors' first name in the film \"ACE GOLDFINGER\".",
        "query": "SELECT t3.first_name FROM film_actor AS t1 JOIN film AS t2 ON t1.film_id = t2.film_id JOIN actor AS t3 ON t1.actor_id = t3.actor_id WHERE t2.title = \"ACE GOLDFINGER\"",
        "schema": "CREATE TABLE film (description TEXT, rating TEXT, film_id NUMBER, title TEXT); CREATE TABLE staff (first_name TEXT); CREATE TABLE film_actor (film_id NUMBER, actor_id NUMBER); CREATE TABLE actor (last_name TEXT, first_name TEXT, actor_id NUMBER); CREATE TABLE film_text (film_id NUMBER, title TEXT);"
      },
      {
        "question": "What is the rental fee of this film?",
        "query": "SELECT rental_rate FROM film WHERE title = \"ACE GOLDFINGER\"",
        "schema": "CREATE TABLE actor (last_name TEXT, first_name TEXT, actor_id NUMBER); CREATE TABLE film_text (title TEXT, film_id NUMBER); CREATE TABLE film (title TEXT, film_id NUMBER, rental_duration NUMBER, description TEXT, rating TEXT, replacement_cost NUMBER, rental_rate NUMBER); CREATE TABLE rental (rental_id NUMBER); CREATE TABLE film_actor (actor_id NUMBER, film_id NUMBER); CREATE TABLE payment (rental_id NUMBER, amount NUMBER); CREATE TABLE staff (first_name TEXT);"
      },
      {
        "question": "Which film is rented at a fee of 0.99 and has less than 3 in the inventory? List the film title and id.",
        "query": "SELECT title , film_id FROM film WHERE rental_rate = 0.99 INTERSECT SELECT t1.title , t1.film_id FROM film AS t1 JOIN inventory AS t2 ON t1.film_id = t2.film_id GROUP BY t1.film_id HAVING count(*) < 3",
        "schema": "CREATE TABLE film_actor (film_id NUMBER, actor_id NUMBER); CREATE TABLE payment (rental_id NUMBER, amount NUMBER); CREATE TABLE actor (first_name TEXT, last_name TEXT, actor_id NUMBER); CREATE TABLE rental (inventory_id NUMBER, rental_id NUMBER); CREATE TABLE film_text (title TEXT, film_id NUMBER); CREATE TABLE inventory (inventory_id NUMBER, film_id NUMBER); CREATE TABLE film (rating TEXT, replacement_cost NUMBER, title TEXT, rental_rate NUMBER, description TEXT, rental_duration NUMBER, film_id NUMBER); CREATE TABLE staff (first_name TEXT);"
      }
    ],
    [
      {
        "question": "Tell me the city of address \"1913 Hanoi Way\".",
        "query": "SELECT t2.city FROM address AS t1 JOIN city AS t2 ON t1.city_id = t2.city_id WHERE t1.address = \"1913 Hanoi Way\"",
        "schema": "CREATE TABLE store (address_id NUMBER); CREATE TABLE category (category_id NUMBER, name TEXT); CREATE TABLE city (city TEXT, city_id NUMBER); CREATE TABLE staff (address_id NUMBER); CREATE TABLE customer (address_id NUMBER); CREATE TABLE address (address_id NUMBER, city_id NUMBER, address TEXT, address2 TEXT, district TEXT);"
      },
      {
        "question": "What is the country of this address?",
        "query": "SELECT t3.country FROM address AS t1 JOIN city AS t2 ON t1.city_id = t2.city_id JOIN country AS t3 ON t2.country_id = t3.country_id WHERE t1.address = \"1913 Hanoi Way\"",
        "schema": "CREATE TABLE language (language_id NUMBER, name TEXT); CREATE TABLE address (address2 TEXT, city_id NUMBER, district TEXT, address_id NUMBER, address TEXT); CREATE TABLE staff (address_id NUMBER); CREATE TABLE country (country TEXT, country_id NUMBER); CREATE TABLE customer (address_id NUMBER); CREATE TABLE store (address_id NUMBER); CREATE TABLE city (city_id NUMBER, country_id NUMBER, city TEXT); CREATE TABLE category (category_id NUMBER, name TEXT);"
      },
      {
        "question": "And how many cities are there in Australia?",
        "query": "SELECT count(*) FROM city AS t1 JOIN country AS t2 ON t1.country_id = t2.country_id WHERE t2.country = 'Australia'",
        "schema": "CREATE TABLE customer (address_id NUMBER); CREATE TABLE staff (address_id NUMBER); CREATE TABLE language (language_id NUMBER, name TEXT); CREATE TABLE city (country_id NUMBER, city_id NUMBER, city TEXT); CREATE TABLE country (country TEXT, country_id NUMBER); CREATE TABLE address (district TEXT, address TEXT, address2 TEXT, address_id NUMBER, city_id NUMBER); CREATE TABLE category (name TEXT, category_id NUMBER); CREATE TABLE store (address_id NUMBER);"
      }
    ],
    [
      {
        "question": "Tell me the phones in the city \"Acua\".",
        "query": "SELECT t1.phone FROM address AS t1 JOIN city AS t2 ON t1.city_id = t2.city_id WHERE t2.city = \"Acua\"",
        "schema": "CREATE TABLE store (address_id NUMBER); CREATE TABLE customer (address_id NUMBER); CREATE TABLE staff (staff_id NUMBER, address_id NUMBER); CREATE TABLE language (language_id NUMBER, name TEXT); CREATE TABLE city (city TEXT, city_id NUMBER); CREATE TABLE address (district TEXT, address TEXT, address2 TEXT, phone TEXT, city_id NUMBER, address_id NUMBER); CREATE TABLE category (name TEXT, category_id NUMBER); CREATE TABLE actor (actor_id NUMBER);"
      },
      {
        "question": "How about that of the the city \"Bag\"?",
        "query": "SELECT t1.phone FROM address AS t1 JOIN city AS t2 ON t1.city_id = t2.city_id WHERE t2.city = \"Bag\"",
        "schema": "CREATE TABLE language (language_id NUMBER, name TEXT); CREATE TABLE customer (address_id NUMBER); CREATE TABLE address (address2 TEXT, city_id NUMBER, district TEXT, phone TEXT, address_id NUMBER, address TEXT); CREATE TABLE staff (address_id NUMBER, staff_id NUMBER); CREATE TABLE store (address_id NUMBER); CREATE TABLE city (city TEXT, city_id NUMBER); CREATE TABLE actor (actor_id NUMBER); CREATE TABLE category (name TEXT, category_id NUMBER);"
      },
      {
        "question": "Which countries have at least 3 cities?",
        "query": "SELECT t2.country FROM city AS t1 JOIN country AS t2 ON t1.country_id = t2.country_id GROUP BY t2.country_id HAVING count(*) >= 3",
        "schema": "CREATE TABLE category (name TEXT, category_id NUMBER); CREATE TABLE address (phone TEXT, city_id NUMBER, address_id NUMBER, address TEXT, address2 TEXT, district TEXT); CREATE TABLE actor (actor_id NUMBER); CREATE TABLE city (country_id NUMBER, city TEXT, city_id NUMBER); CREATE TABLE country (country_id NUMBER, country TEXT); CREATE TABLE store (address_id NUMBER); CREATE TABLE language (language_id NUMBER, name TEXT); CREATE TABLE customer (address_id NUMBER); CREATE TABLE staff (staff_id NUMBER, address_id NUMBER);"
      }
    ],
    [
      {
        "question": "Tell me the payment amount for the payment id 4.",
        "query": "SELECT amount FROM payment WHERE payment_id = 4",
        "schema": "CREATE TABLE payment (rental_id NUMBER, customer_id NUMBER, payment_id NUMBER, staff_id NUMBER, amount NUMBER); CREATE TABLE rental (customer_id NUMBER); CREATE TABLE actor (actor_id NUMBER); CREATE TABLE film (title TEXT, description TEXT, film_id NUMBER, special_features TEXT); CREATE TABLE inventory (film_id NUMBER); CREATE TABLE staff (staff_id NUMBER); CREATE TABLE film_actor (actor_id NUMBER, film_id NUMBER); CREATE TABLE customer (customer_id NUMBER);"
      },
      {
        "question": "How about its date?",
        "query": "SELECT payment_date FROM payment WHERE payment_id = 4",
        "schema": "CREATE TABLE inventory (film_id NUMBER); CREATE TABLE film_actor (actor_id NUMBER, film_id NUMBER); CREATE TABLE payment (customer_id NUMBER, last_update TIME, payment_id NUMBER, staff_id NUMBER, amount NUMBER, rental_id NUMBER, payment_date TIME); CREATE TABLE customer (customer_id NUMBER); CREATE TABLE rental (customer_id NUMBER); CREATE TABLE film (title TEXT, film_id NUMBER, description TEXT, special_features TEXT); CREATE TABLE actor (actor_id NUMBER); CREATE TABLE staff (staff_id NUMBER);"
      },
      {
        "question": "Tell me all the payment dates for the payments with an amount larger than 10 and the payments handled by a staff person with the first name Elsa.",
        "query": "SELECT payment_date FROM payment WHERE amount > 10 UNION SELECT t1.payment_date FROM payment AS t1 JOIN staff AS t2 ON t1.staff_id = t2.staff_id WHERE t2.first_name = 'Elsa'",
        "schema": "CREATE TABLE film_actor (film_id NUMBER, actor_id NUMBER); CREATE TABLE rental (customer_id NUMBER); CREATE TABLE film (title TEXT, description TEXT, film_id NUMBER, special_features TEXT); CREATE TABLE staff (username TEXT, first_name TEXT, last_name TEXT, staff_id NUMBER); CREATE TABLE payment (customer_id NUMBER, last_update TIME, amount NUMBER, payment_date TIME, payment_id NUMBER, staff_id NUMBER, rental_id NUMBER); CREATE TABLE inventory (film_id NUMBER); CREATE TABLE customer (customer_id NUMBER, first_name TEXT); CREATE TABLE actor (first_name TEXT, actor_id NUMBER, last_name TEXT);"
      }
    ],
    [
      {
        "question": "Tell me the category of the film \"ADAPTATION HOLES\".",
        "query": "SELECT t2.title FROM film_category AS t1 JOIN film AS t2 ON t1.film_id = t2.film_id JOIN category AS t3 ON t1.category_id = t3.category_id WHERE t2.title = \"ADAPTATION HOLES\"",
        "schema": "CREATE TABLE film_actor (film_id NUMBER); CREATE TABLE inventory (film_id NUMBER); CREATE TABLE film_category (film_id NUMBER, category_id NUMBER); CREATE TABLE category (name TEXT, category_id NUMBER); CREATE TABLE film (film_id NUMBER, title TEXT, rating TEXT, description TEXT); CREATE TABLE film_text (title TEXT, film_id NUMBER); CREATE TABLE actor (actor_id NUMBER);"
      },
      {
        "question": "How about the rental rate of this film?",
        "query": "SELECT rental_rate FROM film WHERE title = \"ADAPTATION HOLES\"",
        "schema": "CREATE TABLE actor (actor_id NUMBER); CREATE TABLE film_text (film_id NUMBER, title TEXT); CREATE TABLE rental (inventory_id NUMBER, rental_id NUMBER); CREATE TABLE inventory (inventory_id NUMBER, film_id NUMBER); CREATE TABLE film_category (category_id NUMBER, film_id NUMBER); CREATE TABLE category (category_id NUMBER, name TEXT); CREATE TABLE film (replacement_cost NUMBER, rental_rate NUMBER, film_id NUMBER, title TEXT, description TEXT, rating TEXT, rental_duration NUMBER); CREATE TABLE payment (rental_id NUMBER); CREATE TABLE film_actor (film_id NUMBER);"
      },
      {
        "question": "tell me which film has the highest rental rate? What is that rate?",
        "query": "SELECT title , rental_rate FROM film ORDER BY rental_rate DESC LIMIT 1",
        "schema": "CREATE TABLE category (category_id NUMBER, name TEXT); CREATE TABLE film_actor (film_id NUMBER); CREATE TABLE payment (rental_id NUMBER); CREATE TABLE film_category (film_id NUMBER, category_id NUMBER); CREATE TABLE rental (rental_id NUMBER, inventory_id NUMBER); CREATE TABLE actor (actor_id NUMBER); CREATE TABLE film_text (film_id NUMBER, title TEXT); CREATE TABLE inventory (inventory_id NUMBER, film_id NUMBER); CREATE TABLE film (film_id NUMBER, replacement_cost NUMBER, rating TEXT, description TEXT, title TEXT, rental_rate NUMBER, rental_duration NUMBER);"
      }
    ],
    [
      {
        "question": "Tell me the films which BETTE participated in.",
        "query": "SELECT t2.title FROM film_actor AS t1 JOIN film AS t2 ON t1.film_id = t2.film_id JOIN actor AS t3 ON t1.actor_id = t3.actor_id WHERE t3.first_name = \"BETTE\"",
        "schema": "CREATE TABLE inventory (film_id NUMBER); CREATE TABLE film_category (film_id NUMBER); CREATE TABLE actor (last_name TEXT, actor_id NUMBER, first_name TEXT); CREATE TABLE staff (first_name TEXT, last_name TEXT, username TEXT); CREATE TABLE film_actor (film_id NUMBER, actor_id NUMBER); CREATE TABLE payment (customer_id NUMBER); CREATE TABLE film (title TEXT, film_id NUMBER, rating TEXT); CREATE TABLE film_text (title TEXT, film_id NUMBER); CREATE TABLE customer (last_name TEXT, customer_id NUMBER, first_name TEXT); CREATE TABLE rental (customer_id NUMBER);"
      },
      {
        "question": "How about the films which JOE starred in?",
        "query": "SELECT t2.title FROM film_actor AS t1 JOIN film AS t2 ON t1.film_id = t2.film_id JOIN actor AS t3 ON t1.actor_id = t3.actor_id WHERE t3.first_name = \"JOE\"",
        "schema": "CREATE TABLE rental (customer_id NUMBER); CREATE TABLE film_text (title TEXT, film_id NUMBER); CREATE TABLE inventory (film_id NUMBER); CREATE TABLE staff (last_name TEXT, first_name TEXT, username TEXT); CREATE TABLE film (film_id NUMBER, title TEXT, rating TEXT); CREATE TABLE film_category (film_id NUMBER); CREATE TABLE payment (customer_id NUMBER); CREATE TABLE film_actor (actor_id NUMBER, film_id NUMBER); CREATE TABLE customer (first_name TEXT, last_name TEXT, customer_id NUMBER); CREATE TABLE actor (last_name TEXT, actor_id NUMBER, first_name TEXT);"
      },
      {
        "question": "Which film has the most number of actors or actresses? List the film name, film id and description.",
        "query": "SELECT t2.title , t2.film_id , t2.description FROM film_actor AS t1 JOIN film AS t2 ON t1.film_id = t2.film_id GROUP BY t2.film_id ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE customer (first_name TEXT, customer_id NUMBER, last_name TEXT); CREATE TABLE film (rating TEXT, film_id NUMBER, title TEXT, description TEXT); CREATE TABLE film_category (film_id NUMBER); CREATE TABLE rental (customer_id NUMBER); CREATE TABLE film_text (title TEXT, description TEXT, film_id NUMBER); CREATE TABLE payment (customer_id NUMBER); CREATE TABLE staff (last_name TEXT, first_name TEXT, username TEXT); CREATE TABLE film_actor (actor_id NUMBER, film_id NUMBER); CREATE TABLE inventory (film_id NUMBER); CREATE TABLE actor (first_name TEXT, actor_id NUMBER, last_name TEXT);"
      }
    ],
    [
      {
        "question": "Tell me the description of the film titled \"AIRPORT POLLOCK\".",
        "query": "SELECT description FROM film WHERE title = \"AIRPORT POLLOCK\"",
        "schema": "CREATE TABLE film (title TEXT, description TEXT, length NUMBER, original_language_id NUMBER, film_id NUMBER, rating TEXT); CREATE TABLE film_text (title TEXT, description TEXT, film_id NUMBER); CREATE TABLE language (language_id NUMBER); CREATE TABLE category (name TEXT);"
      },
      {
        "question": "Who are the actors in this film? Give the first and last name.",
        "query": "SELECT t3.first_name, t3.last_name FROM film_actor AS t1 JOIN film AS t2 ON t1.film_id = t2.film_id JOIN actor AS t3 ON t1.actor_id = t3.actor_id WHERE t2.title = \"ACE GOLDFINGER\"",
        "schema": "CREATE TABLE film_actor (actor_id NUMBER, film_id NUMBER); CREATE TABLE film (original_language_id NUMBER, length NUMBER, film_id NUMBER, description TEXT, title TEXT, rating TEXT); CREATE TABLE film_text (title TEXT, film_id NUMBER, description TEXT); CREATE TABLE category (name TEXT); CREATE TABLE actor (last_name TEXT, first_name TEXT, actor_id NUMBER); CREATE TABLE language (language_id NUMBER);"
      },
      {
        "question": "And which film actor (actress) starred in the most films? List his or her first name, last name and actor id.",
        "query": "SELECT t2.first_name , t2.last_name , t2.actor_id FROM film_actor AS t1 JOIN actor AS t2 ON t1.actor_id = t2.actor_id GROUP BY t2.actor_id ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE actor (actor_id NUMBER, first_name TEXT, last_name TEXT); CREATE TABLE film_actor (film_id NUMBER, actor_id NUMBER); CREATE TABLE film_text (film_id NUMBER, description TEXT, title TEXT); CREATE TABLE language (language_id NUMBER); CREATE TABLE category (name TEXT); CREATE TABLE film (film_id NUMBER, rating TEXT, description TEXT, length NUMBER, title TEXT, original_language_id NUMBER);"
      }
    ],
    [
      {
        "question": "Tell me the release year of the film titled \"ALI FOREVER\".",
        "query": "SELECT release_year FROM film WHERE title = \"ALI FOREVER\"",
        "schema": "CREATE TABLE film_text (title TEXT, film_id NUMBER); CREATE TABLE actor (first_name TEXT, last_name TEXT); CREATE TABLE film (title TEXT, description TEXT, film_id NUMBER, release_year TIME);"
      },
      {
        "question": "tell me the last name of the actors in it.",
        "query": "SELECT t3.first_name, t3.last_name FROM film_actor AS t1 JOIN film AS t2 ON t1.film_id = t2.film_id JOIN actor AS t3 ON t1.actor_id = t3.actor_id WHERE t2.title = \"ALI FOREVER\"",
        "schema": "CREATE TABLE actor (first_name TEXT, last_name TEXT, actor_id NUMBER); CREATE TABLE film_text (film_id NUMBER, title TEXT); CREATE TABLE film (description TEXT, title TEXT, film_id NUMBER, release_year TIME); CREATE TABLE film_actor (film_id NUMBER, actor_id NUMBER);"
      },
      {
        "question": "Tell me which film actors (actresses) played a role in more than 30 films? List his or her first name and last name.",
        "query": "SELECT t2.first_name , t2.last_name FROM film_actor AS t1 JOIN actor AS t2 ON t1.actor_id = t2.actor_id GROUP BY t2.actor_id HAVING count(*) > 30",
        "schema": "CREATE TABLE actor (first_name TEXT, actor_id NUMBER, last_name TEXT); CREATE TABLE film_actor (film_id NUMBER, actor_id NUMBER); CREATE TABLE film (title TEXT, release_year TIME, film_id NUMBER, description TEXT); CREATE TABLE film_text (film_id NUMBER, title TEXT);"
      }
    ],
    [
      {
        "question": "Tell me the number of items in the inventory for the film titled \"ALI FOREVER\".",
        "query": "SELECT count(*) FROM inventory AS t1 JOIN film AS t2 ON t1.film_id = t2.film_id WHERE t2.title = \"ALI FOREVER\"",
        "schema": "CREATE TABLE film_actor (actor_id NUMBER, film_id NUMBER); CREATE TABLE film_text (title TEXT, description TEXT, film_id NUMBER); CREATE TABLE inventory (film_id NUMBER, inventory_id NUMBER); CREATE TABLE actor (last_name TEXT, actor_id NUMBER); CREATE TABLE film (description TEXT, rating TEXT, title TEXT, film_id NUMBER); CREATE TABLE rental (inventory_id NUMBER);"
      },
      {
        "question": "Which film has the most items?",
        "query": "SELECT title FROM inventory AS t1 JOIN film AS t2 ON t1.film_id = t2.film_id GROUP BY t1.film_id ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE inventory (inventory_id NUMBER, film_id NUMBER); CREATE TABLE film_actor (actor_id NUMBER, film_id NUMBER); CREATE TABLE film (description TEXT, title TEXT, film_id NUMBER, rating TEXT); CREATE TABLE film_text (description TEXT, film_id NUMBER, title TEXT); CREATE TABLE rental (inventory_id NUMBER); CREATE TABLE actor (last_name TEXT, actor_id NUMBER);"
      },
      {
        "question": "Which store owns most items?",
        "query": "SELECT store_id FROM inventory GROUP BY store_id ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE film_actor (actor_id NUMBER, film_id NUMBER); CREATE TABLE film (rating TEXT, title TEXT, film_id NUMBER, description TEXT); CREATE TABLE inventory (store_id NUMBER, film_id NUMBER, inventory_id NUMBER); CREATE TABLE film_text (description TEXT, title TEXT, film_id NUMBER); CREATE TABLE rental (inventory_id NUMBER); CREATE TABLE customer (store_id NUMBER); CREATE TABLE film_category (category_id NUMBER, film_id NUMBER); CREATE TABLE actor (actor_id NUMBER, last_name TEXT); CREATE TABLE store (store_id NUMBER);"
      }
    ],
    [
      {
        "question": "Tell me the email of customer with first name PATRICIA.",
        "query": "SELECT email FROM customer WHERE first_name = \"PATRICIA\"",
        "schema": "CREATE TABLE rental (customer_id NUMBER); CREATE TABLE actor (first_name TEXT, last_name TEXT); CREATE TABLE customer (first_name TEXT, customer_id NUMBER, last_name TEXT, email TEXT); CREATE TABLE staff (email TEXT);"
      },
      {
        "question": "Tell me all the information about the payments they made.",
        "query": "SELECT * FROM customer AS t1 JOIN payment AS t2 ON t1.customer_id = t2.customer_id GROUP BY t1.customer_id WHERE t1.first_name = \"PATRICIA\"",
        "schema": "CREATE TABLE rental (customer_id NUMBER); CREATE TABLE staff (email TEXT); CREATE TABLE payment (customer_id NUMBER, payment_id NUMBER, last_update TIME); CREATE TABLE customer (email TEXT, first_name TEXT, last_name TEXT, customer_id NUMBER); CREATE TABLE actor (first_name TEXT, last_name TEXT);"
      },
      {
        "question": "tell me which customer, who has made at least one payment, has spent the least money. List his or her first name, last name, and the id.",
        "query": "SELECT t1.first_name , t1.last_name , t1.customer_id FROM customer AS t1 JOIN payment AS t2 ON t1.customer_id = t2.customer_id GROUP BY t1.customer_id ORDER BY sum(amount) ASC LIMIT 1",
        "schema": "CREATE TABLE actor (first_name TEXT, last_name TEXT); CREATE TABLE customer (email TEXT, customer_id NUMBER, last_name TEXT, first_name TEXT); CREATE TABLE rental (customer_id NUMBER); CREATE TABLE payment (last_update TIME, customer_id NUMBER, payment_id NUMBER, amount NUMBER); CREATE TABLE staff (email TEXT);"
      }
    ],
    [
      {
        "question": "What are the actors in the film titled ALONE TRIP?",
        "query": "SELECT t3.first_name, t3.last_name FROM film_actor AS t1 JOIN film AS t2 ON t1.film_id = t2.film_id JOIN actor AS t3 ON t1.actor_id = t3.actor_id WHERE t2.title = \"ALONE TRIP\"",
        "schema": "CREATE TABLE actor (actor_id NUMBER, first_name TEXT, last_name TEXT); CREATE TABLE film_text (title TEXT, film_id NUMBER); CREATE TABLE film_actor (film_id NUMBER, actor_id NUMBER); CREATE TABLE film (rating TEXT, film_id NUMBER, title TEXT, description TEXT);"
      },
      {
        "question": "How about that of the film titled HUNGER ROOF?",
        "query": "SELECT t3.first_name, t3.last_name FROM film_actor AS t1 JOIN film AS t2 ON t1.film_id = t2.film_id JOIN actor AS t3 ON t1.actor_id = t3.actor_id WHERE t2.title = \"HUNGER ROOF\"",
        "schema": "CREATE TABLE film_actor (actor_id NUMBER, film_id NUMBER); CREATE TABLE film (rating TEXT, description TEXT, title TEXT, film_id NUMBER); CREATE TABLE film_text (title TEXT, film_id NUMBER); CREATE TABLE actor (last_name TEXT, actor_id NUMBER, first_name TEXT);"
      },
      {
        "question": "What's the genre name of this film?",
        "query": "SELECT t1.name FROM category AS t1 JOIN film_category AS t2 ON t1.category_id = t2.category_id JOIN film AS t3 ON t2.film_id = t3.film_id WHERE t3.title = 'HUNGER ROOF'",
        "schema": "CREATE TABLE film (language_id NUMBER, description TEXT, title TEXT, film_id NUMBER, rating TEXT); CREATE TABLE film_actor (film_id NUMBER, actor_id NUMBER); CREATE TABLE film_text (film_id NUMBER, title TEXT); CREATE TABLE actor (actor_id NUMBER, last_name TEXT, first_name TEXT); CREATE TABLE category (name TEXT, category_id NUMBER); CREATE TABLE film_category (film_id NUMBER, category_id NUMBER);"
      }
    ],
    [
      {
        "question": "Tell me about the special features of the film titled ACADEMY DINOSAUR.",
        "query": "SELECT special_features FROM film WHERE title = \"ACADEMY DINOSAUR\"",
        "schema": "CREATE TABLE film_text (title TEXT, film_id NUMBER); CREATE TABLE film (length NUMBER, special_features TEXT, film_id NUMBER, description TEXT, title TEXT, rating TEXT);"
      },
      {
        "question": "What is its category?",
        "query": "SELECT t1.name FROM category AS t1 JOIN film_category AS t2 ON t1.category_id = t2.category_id JOIN film AS t3 ON t2.film_id = t3.film_id WHERE t3.title = 'ACADEMY DINOSAUR'",
        "schema": "CREATE TABLE film_category (category_id NUMBER, film_id NUMBER); CREATE TABLE film (title TEXT, length NUMBER, description TEXT, film_id NUMBER, language_id NUMBER, original_language_id NUMBER, special_features TEXT, rating TEXT); CREATE TABLE language (language_id NUMBER); CREATE TABLE category (name TEXT, category_id NUMBER); CREATE TABLE film_text (film_id NUMBER, title TEXT);"
      },
      {
        "question": "How many films are there in each category?",
        "query": "SELECT t2.name , t1.category_id , count(*) FROM film_category AS t1 JOIN category AS t2 ON t1.category_id = t2.category_id GROUP BY t1.category_id",
        "schema": "CREATE TABLE category (category_id NUMBER, name TEXT); CREATE TABLE film_category (film_id NUMBER, category_id NUMBER); CREATE TABLE language (language_id NUMBER); CREATE TABLE film (language_id NUMBER, rating TEXT, description TEXT, original_language_id NUMBER, length NUMBER, film_id NUMBER, title TEXT, special_features TEXT); CREATE TABLE film_text (title TEXT, film_id NUMBER); CREATE TABLE inventory (film_id NUMBER);"
      }
    ],
    [
      {
        "question": "Tell me the rating of the film titled AGENT TRUMAN.",
        "query": "SELECT rating FROM film WHERE title = \"AGENT TRUMAN\"",
        "schema": "CREATE TABLE film_actor (film_id NUMBER); CREATE TABLE film (rating TEXT, description TEXT, film_id NUMBER, title TEXT); CREATE TABLE film_text (film_id NUMBER, title TEXT, description TEXT); CREATE TABLE inventory (film_id NUMBER);"
      },
      {
        "question": "Tell me the number of its copies in the inventory.",
        "query": "SELECT count(*) FROM film AS t1 JOIN inventory AS t2 ON t1.film_id = t2.film_id WHERE t1.title = \"AGENT TRUMAN\"",
        "schema": "CREATE TABLE film_text (film_id NUMBER, title TEXT, description TEXT); CREATE TABLE film_actor (film_id NUMBER); CREATE TABLE rental (inventory_id NUMBER); CREATE TABLE inventory (film_id NUMBER, inventory_id NUMBER); CREATE TABLE category (name TEXT); CREATE TABLE film (film_id NUMBER, description TEXT, rating TEXT, original_language_id NUMBER, title TEXT);"
      },
      {
        "question": "And which film has the most copies in the inventory? Tell me both title and id.",
        "query": "SELECT t1.title , t1.film_id FROM film AS t1 JOIN inventory AS t2 ON t1.film_id = t2.film_id GROUP BY t1.film_id ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE film_actor (film_id NUMBER); CREATE TABLE inventory (film_id NUMBER, inventory_id NUMBER); CREATE TABLE film (title TEXT, film_id NUMBER, original_language_id NUMBER, description TEXT, rating TEXT); CREATE TABLE category (name TEXT); CREATE TABLE film_text (title TEXT, film_id NUMBER, description TEXT); CREATE TABLE rental (inventory_id NUMBER);"
      }
    ],
    [
      {
        "question": "What is the rental rate of film titled ALAMO VIDEOTAPE?",
        "query": "SELECT rental_rate FROM film WHERE title = \"ALAMO VIDEOTAPE\"",
        "schema": "CREATE TABLE category (category_id NUMBER, name TEXT); CREATE TABLE staff (first_name TEXT); CREATE TABLE inventory (film_id NUMBER, inventory_id NUMBER); CREATE TABLE actor (last_name TEXT, actor_id NUMBER, first_name TEXT); CREATE TABLE film_category (category_id NUMBER, film_id NUMBER); CREATE TABLE film_text (film_id NUMBER, description TEXT, title TEXT); CREATE TABLE rental (rental_id NUMBER, inventory_id NUMBER, customer_id NUMBER, staff_id NUMBER); CREATE TABLE film_actor (film_id NUMBER, actor_id NUMBER); CREATE TABLE customer (last_name TEXT, first_name TEXT, customer_id NUMBER); CREATE TABLE film (rental_rate NUMBER, rental_duration NUMBER, film_id NUMBER, rating TEXT, description TEXT, title TEXT); CREATE TABLE payment (customer_id NUMBER, rental_id NUMBER);"
      },
      {
        "question": "How about the number of times it was rented.",
        "query": "SELECT count(*) FROM film AS t1 JOIN inventory AS t2 ON t1.film_id = t2.film_id JOIN rental AS t3 ON t2.inventory_id = t3.inventory_id GROUP BY t2.inventory_id WHERE t1.title = \"ALAMO VIDEOTAPE\"",
        "schema": "CREATE TABLE inventory (film_id NUMBER, inventory_id NUMBER); CREATE TABLE staff (first_name TEXT); CREATE TABLE rental (inventory_id NUMBER, staff_id NUMBER, customer_id NUMBER, rental_date TIME, rental_id NUMBER, return_date TIME); CREATE TABLE film_category (film_id NUMBER, category_id NUMBER); CREATE TABLE payment (customer_id NUMBER, rental_id NUMBER); CREATE TABLE film_text (film_id NUMBER, description TEXT, title TEXT); CREATE TABLE film_actor (film_id NUMBER, actor_id NUMBER); CREATE TABLE customer (last_name TEXT, customer_id NUMBER, first_name TEXT); CREATE TABLE film (rating TEXT, title TEXT, rental_duration NUMBER, length NUMBER, rental_rate NUMBER, description TEXT, film_id NUMBER, release_year TIME); CREATE TABLE category (category_id NUMBER, name TEXT); CREATE TABLE actor (first_name TEXT, actor_id NUMBER, last_name TEXT);"
      },
      {
        "question": "What is the film title and inventory id of the item in the inventory which was rented most frequently?",
        "query": "SELECT t1.title , t2.inventory_id FROM film AS t1 JOIN inventory AS t2 ON t1.film_id = t2.film_id JOIN rental AS t3 ON t2.inventory_id = t3.inventory_id GROUP BY t2.inventory_id ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE inventory (inventory_id NUMBER, film_id NUMBER); CREATE TABLE film_category (category_id NUMBER, film_id NUMBER); CREATE TABLE film_actor (actor_id NUMBER, film_id NUMBER); CREATE TABLE payment (customer_id NUMBER, rental_id NUMBER); CREATE TABLE rental (rental_id NUMBER, return_date TIME, inventory_id NUMBER, customer_id NUMBER, staff_id NUMBER, rental_date TIME); CREATE TABLE category (category_id NUMBER, name TEXT); CREATE TABLE customer (customer_id NUMBER, first_name TEXT, last_name TEXT); CREATE TABLE actor (first_name TEXT, actor_id NUMBER, last_name TEXT); CREATE TABLE film (title TEXT, rating TEXT, film_id NUMBER, rental_rate NUMBER, rental_duration NUMBER, length NUMBER, description TEXT, release_year TIME); CREATE TABLE film_text (description TEXT, film_id NUMBER, title TEXT); CREATE TABLE staff (first_name TEXT);"
      }
    ],
    [
      {
        "question": "Tell me the number of items in store 2.",
        "query": "SELECT count(*) FROM inventory WHERE store_id = 2",
        "schema": "CREATE TABLE category (name TEXT, category_id NUMBER); CREATE TABLE store (store_id NUMBER); CREATE TABLE customer (store_id NUMBER); CREATE TABLE rental (inventory_id NUMBER); CREATE TABLE staff (store_id NUMBER, staff_id NUMBER); CREATE TABLE inventory (inventory_id NUMBER, store_id NUMBER);"
      },
      {
        "question": "Tell me that of store 1.",
        "query": "SELECT count(*) FROM inventory WHERE store_id = 1",
        "schema": "CREATE TABLE staff (store_id NUMBER, staff_id NUMBER); CREATE TABLE customer (store_id NUMBER); CREATE TABLE inventory (store_id NUMBER, inventory_id NUMBER); CREATE TABLE category (category_id NUMBER, name TEXT); CREATE TABLE rental (inventory_id NUMBER); CREATE TABLE store (store_id NUMBER, address_id NUMBER);"
      },
      {
        "question": "And where is store 1 located?",
        "query": "SELECT t2.address FROM store AS t1 JOIN address AS t2 ON t1.address_id = t2.address_id WHERE store_id = 1",
        "schema": "CREATE TABLE store (store_id NUMBER, address_id NUMBER); CREATE TABLE customer (store_id NUMBER, address_id NUMBER); CREATE TABLE address (district TEXT, address TEXT, address_id NUMBER, city_id NUMBER, address2 TEXT); CREATE TABLE staff (store_id NUMBER, staff_id NUMBER); CREATE TABLE category (name TEXT, category_id NUMBER); CREATE TABLE inventory (store_id NUMBER, inventory_id NUMBER); CREATE TABLE rental (inventory_id NUMBER);"
      }
    ],
    [
      {
        "question": "Tell me the date of payment with id 3.",
        "query": "SELECT payment_date FROM payment WHERE payment_id = 3",
        "schema": "CREATE TABLE staff (staff_id NUMBER); CREATE TABLE actor (actor_id NUMBER); CREATE TABLE rental (rental_id NUMBER, rental_date TIME); CREATE TABLE customer (customer_id NUMBER); CREATE TABLE payment (last_update TIME, payment_id NUMBER, rental_id NUMBER, staff_id NUMBER, customer_id NUMBER, payment_date TIME);"
      },
      {
        "question": "How about its staff name? Give the first name and last name.",
        "query": "SELECT t1.first_name , t1.last_name FROM staff AS t1 JOIN payment AS t2 ON t1.staff_id = t2.staff_id WHERE t2.payment_id = 3",
        "schema": "CREATE TABLE rental (rental_date TIME, rental_id NUMBER, staff_id NUMBER); CREATE TABLE payment (payment_id NUMBER, rental_id NUMBER, customer_id NUMBER, payment_date TIME, last_update TIME, staff_id NUMBER); CREATE TABLE staff (first_name TEXT, last_name TEXT, staff_id NUMBER, username TEXT, picture OTHERS); CREATE TABLE actor (first_name TEXT, actor_id NUMBER, last_name TEXT); CREATE TABLE customer (first_name TEXT, customer_id NUMBER);"
      },
      {
        "question": "tell me which staff handled the least number of payments? List the full name and the id.",
        "query": "SELECT t1.first_name , t1.last_name , t1.staff_id FROM staff AS t1 JOIN payment AS t2 ON t1.staff_id = t2.staff_id GROUP BY t1.staff_id ORDER BY count(*) ASC LIMIT 1",
        "schema": "CREATE TABLE payment (rental_id NUMBER, amount NUMBER, last_update TIME, payment_date TIME, staff_id NUMBER, customer_id NUMBER, payment_id NUMBER); CREATE TABLE staff (staff_id NUMBER, first_name TEXT, username TEXT, last_name TEXT, picture OTHERS); CREATE TABLE customer (first_name TEXT, customer_id NUMBER); CREATE TABLE rental (rental_date TIME, rental_id NUMBER, staff_id NUMBER); CREATE TABLE actor (last_name TEXT, actor_id NUMBER, first_name TEXT);"
      }
    ],
    [
      {
        "question": "What is the length of the film titled AIRPORT POLLOCK?",
        "query": "SELECT LENGTH FROM film WHERE title = 'AIRPORT POLLOCK'",
        "schema": "CREATE TABLE film (rental_duration NUMBER, film_id NUMBER, length NUMBER, title TEXT, rating TEXT, description TEXT); CREATE TABLE film_text (description TEXT, film_id NUMBER, title TEXT);"
      },
      {
        "question": "How about its rental duration?",
        "query": "SELECT rental_duration FROM film WHERE title = 'AIRPORT POLLOCK'",
        "schema": "CREATE TABLE rental (rental_date TIME, return_date TIME, rental_id NUMBER); CREATE TABLE payment (rental_id NUMBER); CREATE TABLE film_text (title TEXT, film_id NUMBER, description TEXT); CREATE TABLE film (rental_duration NUMBER, film_id NUMBER, description TEXT, rental_rate NUMBER, title TEXT, rating TEXT, length NUMBER);"
      },
      {
        "question": "And which language does the film AIRPORT POLLOCK use? List the language name.",
        "query": "SELECT t2.name FROM film AS t1 JOIN LANGUAGE AS t2 ON t1.language_id = t2.language_id WHERE t1.title = 'AIRPORT POLLOCK'",
        "schema": "CREATE TABLE film (original_language_id NUMBER, film_id NUMBER, language_id NUMBER, rental_duration NUMBER, title TEXT, length NUMBER, rating TEXT, rental_rate NUMBER, description TEXT); CREATE TABLE film_text (film_id NUMBER, title TEXT, description TEXT); CREATE TABLE rental (return_date TIME, rental_id NUMBER, rental_date TIME); CREATE TABLE payment (rental_id NUMBER); CREATE TABLE language (name TEXT, language_id NUMBER);"
      }
    ],
    [
      {
        "question": "Tell me the movies in which the actor named ZERO played a role in.",
        "query": "SELECT t2.title FROM film_actor AS t1 JOIN film AS t2 ON t1.film_id = t2.film_id JOIN actor AS t3 ON t1.actor_id = t3.actor_id WHERE t3.first_name = \"ZERO\"",
        "schema": "CREATE TABLE inventory (film_id NUMBER); CREATE TABLE film_actor (actor_id NUMBER, film_id NUMBER); CREATE TABLE film_text (film_id NUMBER, title TEXT); CREATE TABLE actor (last_name TEXT, actor_id NUMBER, first_name TEXT); CREATE TABLE film (rating TEXT, film_id NUMBER, description TEXT, length NUMBER, title TEXT);"
      },
      {
        "question": "What are the special features of this film?",
        "query": "SELECT t2.special_features FROM film_actor AS t1 JOIN film AS t2 ON t1.film_id = t2.film_id JOIN actor AS t3 ON t1.actor_id = t3.actor_id WHERE t3.first_name = \"ZERO\"",
        "schema": "CREATE TABLE actor (last_name TEXT, actor_id NUMBER, first_name TEXT); CREATE TABLE inventory (film_id NUMBER); CREATE TABLE film_actor (actor_id NUMBER, film_id NUMBER); CREATE TABLE film (length NUMBER, special_features TEXT, rating TEXT, title TEXT, description TEXT, film_id NUMBER); CREATE TABLE film_text (title TEXT, film_id NUMBER);"
      },
      {
        "question": "Which movies have 'Deleted Scenes' as a substring in the special feature?",
        "query": "SELECT title FROM film WHERE special_features LIKE '%Deleted Scenes%'",
        "schema": "CREATE TABLE film (special_features TEXT, length NUMBER, film_id NUMBER, title TEXT, description TEXT, rating TEXT); CREATE TABLE inventory (film_id NUMBER); CREATE TABLE film_actor (actor_id NUMBER, film_id NUMBER); CREATE TABLE film_text (title TEXT, film_id NUMBER); CREATE TABLE actor (actor_id NUMBER, last_name TEXT, first_name TEXT);"
      }
    ],
    [
      {
        "question": "What are the payments of the customer named LINDA?",
        "query": "SELECT * FROM customer AS t1 JOIN payment AS t2 ON t1.customer_id = t2.customer_id GROUP BY t1.customer_id WHERE t1.first_name = \"LINDA\"",
        "schema": "CREATE TABLE rental (customer_id NUMBER); CREATE TABLE staff (first_name TEXT); CREATE TABLE customer (last_name TEXT, customer_id NUMBER, first_name TEXT); CREATE TABLE payment (payment_id NUMBER, customer_id NUMBER); CREATE TABLE actor (first_name TEXT, last_name TEXT);"
      },
      {
        "question": "What are the dates of these payments?",
        "query": "SELECT t2.payment_date FROM customer AS t1 JOIN payment AS t2 ON t1.customer_id = t2.customer_id GROUP BY t1.customer_id WHERE t1.first_name = \"LINDA\"",
        "schema": "CREATE TABLE payment (payment_id NUMBER, payment_date TIME, customer_id NUMBER); CREATE TABLE rental (customer_id NUMBER); CREATE TABLE staff (first_name TEXT); CREATE TABLE actor (first_name TEXT, last_name TEXT); CREATE TABLE customer (first_name TEXT, customer_id NUMBER, create_date TIME, last_name TEXT);"
      },
      {
        "question": "And when did the first payment happen?",
        "query": "SELECT payment_date FROM payment ORDER BY payment_date ASC LIMIT 1",
        "schema": "CREATE TABLE payment (payment_id NUMBER, payment_date TIME, customer_id NUMBER); CREATE TABLE staff (first_name TEXT); CREATE TABLE rental (customer_id NUMBER); CREATE TABLE customer (first_name TEXT, customer_id NUMBER, create_date TIME, last_name TEXT); CREATE TABLE actor (first_name TEXT, last_name TEXT);"
      }
    ],
    [
      {
        "question": "How many payments did LINDA make?",
        "query": "SELECT count(*) FROM customer AS t1 JOIN payment AS t2 ON t1.customer_id = t2.customer_id GROUP BY t1.customer_id WHERE t1.first_name = \"LINDA\"",
        "schema": "CREATE TABLE customer (last_name TEXT, customer_id NUMBER, first_name TEXT); CREATE TABLE actor (first_name TEXT, actor_id NUMBER, last_name TEXT); CREATE TABLE staff (last_name TEXT, staff_id NUMBER, username TEXT, first_name TEXT); CREATE TABLE film (film_id NUMBER); CREATE TABLE film_actor (actor_id NUMBER, film_id NUMBER); CREATE TABLE rental (staff_id NUMBER, customer_id NUMBER); CREATE TABLE payment (rental_id NUMBER, staff_id NUMBER, customer_id NUMBER, payment_id NUMBER);"
      },
      {
        "question": "Tell me all the information about the largest one.",
        "query": "SELECT * FROM customer AS t1 JOIN payment AS t2 ON t1.customer_id = t2.customer_id GROUP BY t1.customer_id WHERE t1.first_name = \"LINDA\" ORDER BY t2.amount DESC LIMIT 1",
        "schema": "CREATE TABLE customer (first_name TEXT, last_name TEXT, customer_id NUMBER); CREATE TABLE rental (staff_id NUMBER, customer_id NUMBER); CREATE TABLE film (film_id NUMBER); CREATE TABLE film_actor (film_id NUMBER, actor_id NUMBER); CREATE TABLE payment (payment_id NUMBER, customer_id NUMBER, rental_id NUMBER, staff_id NUMBER, amount NUMBER); CREATE TABLE staff (staff_id NUMBER, last_name TEXT, first_name TEXT, username TEXT); CREATE TABLE actor (first_name TEXT, actor_id NUMBER, last_name TEXT);"
      },
      {
        "question": "tell me where she lives, and also her email.",
        "query": "SELECT t2.address , t1.email FROM customer AS t1 JOIN address AS t2 ON t2.address_id = t1.address_id WHERE t1.first_name = 'LINDA'",
        "schema": "CREATE TABLE customer (email TEXT, first_name TEXT, address_id NUMBER, last_name TEXT, customer_id NUMBER); CREATE TABLE staff (first_name TEXT, username TEXT, staff_id NUMBER, last_name TEXT); CREATE TABLE actor (first_name TEXT, last_name TEXT, actor_id NUMBER); CREATE TABLE payment (rental_id NUMBER, payment_id NUMBER, customer_id NUMBER, staff_id NUMBER, amount NUMBER); CREATE TABLE film_actor (film_id NUMBER, actor_id NUMBER); CREATE TABLE address (address2 TEXT, address_id NUMBER, address TEXT); CREATE TABLE rental (customer_id NUMBER, staff_id NUMBER); CREATE TABLE film (film_id NUMBER);"
      }
    ],
    [
      {
        "question": "Tell me the release year of the film titleed ACE GOLDFINGER.",
        "query": "SELECT release_year FROM film WHERE title = \"ACE GOLDFINGER\"",
        "schema": "CREATE TABLE film_text (film_id NUMBER, title TEXT); CREATE TABLE film (release_year TIME, description TEXT, length NUMBER, rating TEXT, title TEXT, film_id NUMBER);"
      },
      {
        "question": "What is the rating of this film?",
        "query": "SELECT rating FROM film WHERE title = \"ACE GOLDFINGER\"",
        "schema": "CREATE TABLE film_text (description TEXT, film_id NUMBER, title TEXT); CREATE TABLE film (title TEXT, film_id NUMBER, rating TEXT, release_year TIME, length NUMBER, description TEXT);"
      },
      {
        "question": "tell me all the films longer than 100 minutes, or rated PG, except those who cost more than 200 for replacement.",
        "query": "SELECT title FROM film WHERE LENGTH > 100 OR rating = 'PG' EXCEPT SELECT title FROM film WHERE replacement_cost > 200",
        "schema": "CREATE TABLE film_text (description TEXT, film_id NUMBER, title TEXT); CREATE TABLE film (rental_duration NUMBER, replacement_cost NUMBER, rental_rate NUMBER, title TEXT, length NUMBER, release_year TIME, film_id NUMBER, rating TEXT, description TEXT); CREATE TABLE payment (amount NUMBER, rental_id NUMBER); CREATE TABLE rental (rental_id NUMBER);"
      }
    ],
    [
      {
        "question": "Tell me the email of the customer named MARIA.",
        "query": "SELECT email FROM customer WHERE first_name = \"MARIA\"",
        "schema": "CREATE TABLE actor (first_name TEXT, last_name TEXT); CREATE TABLE customer (last_name TEXT, customer_id NUMBER, email TEXT, first_name TEXT); CREATE TABLE rental (customer_id NUMBER); CREATE TABLE payment (customer_id NUMBER); CREATE TABLE staff (email TEXT);"
      },
      {
        "question": "Tell me all the information about her rentals.",
        "query": "SELECT * FROM customer AS t1 JOIN rental AS t2 ON t1.customer_id = t2.customer_id WHERE t1.first_name = \"MARIA\"",
        "schema": "CREATE TABLE actor (first_name TEXT, last_name TEXT); CREATE TABLE staff (email TEXT); CREATE TABLE rental (inventory_id NUMBER, customer_id NUMBER, rental_id NUMBER); CREATE TABLE customer (last_name TEXT, first_name TEXT, address_id NUMBER, customer_id NUMBER, email TEXT); CREATE TABLE payment (customer_id NUMBER, rental_id NUMBER); CREATE TABLE address (address_id NUMBER);"
      },
      {
        "question": "What is the first name and the last name of the customer who made the earliest rental?",
        "query": "SELECT t1.first_name , t1.last_name FROM customer AS t1 JOIN rental AS t2 ON t1.customer_id = t2.customer_id ORDER BY t2.rental_date ASC LIMIT 1",
        "schema": "CREATE TABLE staff (email TEXT); CREATE TABLE address (address_id NUMBER); CREATE TABLE rental (customer_id NUMBER, rental_id NUMBER, rental_date TIME, return_date TIME, inventory_id NUMBER); CREATE TABLE actor (first_name TEXT, last_name TEXT); CREATE TABLE customer (create_date TIME, first_name TEXT, address_id NUMBER, customer_id NUMBER, email TEXT, last_name TEXT); CREATE TABLE payment (customer_id NUMBER, rental_id NUMBER);"
      }
    ],
    [
      {
        "question": "Tell me the customer of rental with id 2.",
        "query": "SELECT t1.first_name, t1.last_name FROM customer AS t1 JOIN rental AS t2 ON t1.customer_id = t2.customer_id WHERE t2.rental_id = 2",
        "schema": "CREATE TABLE category (name TEXT, category_id NUMBER); CREATE TABLE payment (customer_id NUMBER, rental_id NUMBER); CREATE TABLE rental (inventory_id NUMBER, rental_id NUMBER, customer_id NUMBER); CREATE TABLE customer (first_name TEXT, last_name TEXT, customer_id NUMBER, address_id NUMBER);"
      },
      {
        "question": "How about its return date?",
        "query": "SELECT return_date FROM rental WHERE rental_id = 2",
        "schema": "CREATE TABLE actor (first_name TEXT); CREATE TABLE category (name TEXT, category_id NUMBER); CREATE TABLE payment (rental_id NUMBER, customer_id NUMBER); CREATE TABLE rental (return_date TIME, rental_date TIME, customer_id NUMBER, rental_id NUMBER, inventory_id NUMBER); CREATE TABLE customer (first_name TEXT, last_name TEXT, address_id NUMBER, customer_id NUMBER);"
      },
      {
        "question": "What is the full name of the staff member who has rented a film to a customer with the first name April and the last name Burns?",
        "query": "SELECT DISTINCT t1.first_name , t1.last_name FROM staff AS t1 JOIN rental AS t2 ON t1.staff_id = t2.staff_id JOIN customer AS t3 ON t2.customer_id = t3.customer_id WHERE t3.first_name = 'APRIL' AND t3.last_name = 'BURNS'",
        "schema": "CREATE TABLE rental (inventory_id NUMBER, staff_id NUMBER, rental_id NUMBER, return_date TIME, customer_id NUMBER, rental_date TIME); CREATE TABLE staff (username TEXT, last_name TEXT, first_name TEXT, staff_id NUMBER); CREATE TABLE film (film_id NUMBER); CREATE TABLE customer (first_name TEXT, customer_id NUMBER, last_name TEXT, address_id NUMBER); CREATE TABLE actor (first_name TEXT); CREATE TABLE category (name TEXT, category_id NUMBER); CREATE TABLE payment (customer_id NUMBER, rental_id NUMBER);"
      }
    ],
    [
      {
        "question": "Tell me all the information about the stores.",
        "query": "SELECT * FROM store",
        "schema": "CREATE TABLE category (name TEXT, category_id NUMBER); CREATE TABLE staff (staff_id NUMBER, store_id NUMBER); CREATE TABLE customer (store_id NUMBER); CREATE TABLE rental (inventory_id NUMBER); CREATE TABLE inventory (last_update TIME, inventory_id NUMBER, store_id NUMBER); CREATE TABLE store (store_id NUMBER, manager_staff_id NUMBER, last_update TIME);"
      },
      {
        "question": "Tell me how many items are in store 3.",
        "query": "SELECT count(*) FROM inventory WHERE store_id = 3",
        "schema": "CREATE TABLE rental (inventory_id NUMBER); CREATE TABLE customer (store_id NUMBER); CREATE TABLE store (last_update TIME, store_id NUMBER, manager_staff_id NUMBER); CREATE TABLE category (name TEXT, category_id NUMBER); CREATE TABLE inventory (store_id NUMBER, last_update TIME, inventory_id NUMBER); CREATE TABLE staff (staff_id NUMBER, store_id NUMBER);"
      },
      {
        "question": "Which store has the most customers?",
        "query": "SELECT store_id FROM customer GROUP BY store_id ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE category (category_id NUMBER, name TEXT); CREATE TABLE staff (staff_id NUMBER, store_id NUMBER); CREATE TABLE inventory (inventory_id NUMBER, store_id NUMBER, last_update TIME); CREATE TABLE customer (address_id NUMBER, store_id NUMBER, customer_id NUMBER); CREATE TABLE store (last_update TIME, manager_staff_id NUMBER, store_id NUMBER); CREATE TABLE rental (customer_id NUMBER, inventory_id NUMBER);"
      }
    ],
    [
      {
        "question": "Tell me all the information about Lisa's payments.",
        "query": "SELECT * FROM customer AS t1 JOIN payment AS t2 ON t1.customer_id = t2.customer_id GROUP BY t1.customer_id WHERE t1.first_name = \"Lisa\"",
        "schema": "CREATE TABLE payment (staff_id NUMBER, customer_id NUMBER, payment_id NUMBER); CREATE TABLE actor (first_name TEXT, actor_id NUMBER, last_name TEXT); CREATE TABLE customer (first_name TEXT, last_name TEXT, customer_id NUMBER); CREATE TABLE film (film_id NUMBER); CREATE TABLE film_actor (actor_id NUMBER, film_id NUMBER); CREATE TABLE staff (username TEXT, staff_id NUMBER, last_name TEXT, first_name TEXT);"
      },
      {
        "question": "What's the largest one among those? Give the payment amount.",
        "query": "SELECT t2.amount FROM customer AS t1 JOIN payment AS t2 ON t1.customer_id = t2.customer_id GROUP BY t1.customer_id WHERE t1.first_name = \"Lisa\" ORDER BY t2.amount DESC LIMIT 1",
        "schema": "CREATE TABLE staff (last_name TEXT, staff_id NUMBER, first_name TEXT, username TEXT); CREATE TABLE actor (first_name TEXT, last_name TEXT, actor_id NUMBER); CREATE TABLE payment (payment_id NUMBER, customer_id NUMBER, amount NUMBER, staff_id NUMBER); CREATE TABLE customer (first_name TEXT, customer_id NUMBER, last_name TEXT); CREATE TABLE film (film_id NUMBER); CREATE TABLE film_actor (film_id NUMBER, actor_id NUMBER);"
      },
      {
        "question": "What's the largest one among all the payments?",
        "query": "SELECT amount FROM payment ORDER BY amount DESC LIMIT 1",
        "schema": "CREATE TABLE film (film_id NUMBER); CREATE TABLE customer (last_name TEXT, customer_id NUMBER, first_name TEXT); CREATE TABLE staff (staff_id NUMBER, username TEXT, first_name TEXT, last_name TEXT); CREATE TABLE payment (staff_id NUMBER, payment_id NUMBER, amount NUMBER, customer_id NUMBER); CREATE TABLE film_actor (film_id NUMBER, actor_id NUMBER); CREATE TABLE actor (last_name TEXT, first_name TEXT, actor_id NUMBER);"
      }
    ],
    [
      {
        "question": "Tell me the store in which the staff member with first name \"Elsa\" works.",
        "query": "SELECT * FROM staff AS t1 JOIN store AS t2 ON t1.store_id = t2.store_id WHERE t1.first_name = 'Elsa'",
        "schema": "CREATE TABLE customer (store_id NUMBER); CREATE TABLE address (address_id NUMBER); CREATE TABLE inventory (store_id NUMBER, inventory_id NUMBER); CREATE TABLE store (manager_staff_id NUMBER, address_id NUMBER, store_id NUMBER); CREATE TABLE rental (staff_id NUMBER); CREATE TABLE actor (actor_id NUMBER, last_name TEXT, first_name TEXT); CREATE TABLE staff (address_id NUMBER, store_id NUMBER, last_name TEXT, staff_id NUMBER, first_name TEXT, username TEXT, picture OTHERS); CREATE TABLE category (category_id NUMBER, name TEXT);"
      },
      {
        "question": "Tell me her email.",
        "query": "SELECT email FROM staff WHERE first_name = 'Elsa'",
        "schema": "CREATE TABLE store (store_id NUMBER, address_id NUMBER, manager_staff_id NUMBER); CREATE TABLE staff (username TEXT, first_name TEXT, staff_id NUMBER, email TEXT, picture OTHERS, store_id NUMBER, address_id NUMBER, last_name TEXT); CREATE TABLE rental (staff_id NUMBER); CREATE TABLE customer (store_id NUMBER, email TEXT); CREATE TABLE address (address_id NUMBER); CREATE TABLE actor (actor_id NUMBER, last_name TEXT, first_name TEXT); CREATE TABLE category (category_id NUMBER, name TEXT); CREATE TABLE inventory (inventory_id NUMBER, store_id NUMBER);"
      },
      {
        "question": "Where does she live?",
        "query": "SELECT t2.address FROM staff AS t1 JOIN address AS t2 ON t1.address_id = t2.address_id WHERE t1.first_name = 'Elsa'",
        "schema": "CREATE TABLE inventory (inventory_id NUMBER, store_id NUMBER); CREATE TABLE store (manager_staff_id NUMBER, address_id NUMBER, store_id NUMBER); CREATE TABLE staff (first_name TEXT, picture OTHERS, username TEXT, staff_id NUMBER, store_id NUMBER, email TEXT, last_name TEXT, address_id NUMBER); CREATE TABLE customer (address_id NUMBER, store_id NUMBER, email TEXT); CREATE TABLE actor (first_name TEXT, actor_id NUMBER, last_name TEXT); CREATE TABLE rental (staff_id NUMBER); CREATE TABLE category (name TEXT, category_id NUMBER); CREATE TABLE city (city_id NUMBER, city TEXT); CREATE TABLE address (address TEXT, district TEXT, address2 TEXT, city_id NUMBER, address_id NUMBER);"
      }
    ]
  ],
  "customers_and_invoices": [
    [
      {
        "question": "Show the id for all accounts.",
        "query": "SELECT account_id FROM accounts",
        "schema": "CREATE TABLE Orders (customer_id NUMBER); CREATE TABLE Accounts (account_name TEXT, account_id NUMBER, customer_id NUMBER); CREATE TABLE Financial_Transactions (account_id NUMBER); CREATE TABLE Customers (customer_id NUMBER, customer_last_name TEXT);"
      },
      {
        "question": "Also show the date the account opened and the account name.",
        "query": "SELECT account_id , date_account_opened , account_name FROM accounts",
        "schema": "CREATE TABLE Customers (customer_last_name TEXT, customer_id NUMBER); CREATE TABLE Accounts (account_id NUMBER, customer_id NUMBER, date_account_opened TIME, account_name TEXT); CREATE TABLE Financial_Transactions (account_id NUMBER); CREATE TABLE Orders (customer_id NUMBER);"
      },
      {
        "question": "Also show account details.",
        "query": "SELECT account_id , date_account_opened , account_name , other_account_details FROM accounts",
        "schema": "CREATE TABLE Customers (customer_id NUMBER, customer_last_name TEXT); CREATE TABLE Financial_Transactions (account_id NUMBER); CREATE TABLE Accounts (customer_id NUMBER, date_account_opened TIME, other_account_details TEXT, account_id NUMBER, account_name TEXT); CREATE TABLE Orders (customer_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show the account id for all accounts.",
        "query": "SELECT account_id FROM accounts",
        "schema": "CREATE TABLE Financial_Transactions (account_id NUMBER); CREATE TABLE Accounts (customer_id NUMBER, account_id NUMBER, account_name TEXT); CREATE TABLE Customers (customer_last_name TEXT, customer_first_name TEXT, customer_id NUMBER);"
      },
      {
        "question": "Also show the customer first name for these accounts.",
        "query": "SELECT t1.account_id, t2.customer_first_name FROM accounts AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id",
        "schema": "CREATE TABLE Accounts (account_id NUMBER, account_name TEXT, customer_id NUMBER); CREATE TABLE Financial_Transactions (account_id NUMBER); CREATE TABLE Customers (customer_id NUMBER, customer_middle_initial TEXT, customer_first_name TEXT, customer_last_name TEXT);"
      },
      {
        "question": "What are the ids for the accounts owned by the customer with first name 'Meaghan'?",
        "query": "SELECT t1.account_id FROM accounts AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id WHERE t2.customer_first_name = 'Meaghan'",
        "schema": "CREATE TABLE Customers (customer_last_name TEXT, customer_id NUMBER, customer_middle_initial TEXT, customer_first_name TEXT); CREATE TABLE Financial_Transactions (account_id NUMBER); CREATE TABLE Accounts (account_id NUMBER, customer_id NUMBER, account_name TEXT);"
      },
      {
        "question": "Also show the account name, and other account details for these accounts.",
        "query": "SELECT t1.account_id , t1.date_account_opened , t1.account_name , t1.other_account_details FROM accounts AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id WHERE t2.customer_first_name = 'Meaghan'",
        "schema": "CREATE TABLE Financial_Transactions (account_id NUMBER); CREATE TABLE Accounts (customer_id NUMBER, date_account_opened TIME, account_id NUMBER, other_account_details TEXT, account_name TEXT); CREATE TABLE Customers (customer_first_name TEXT, customer_id NUMBER, customer_middle_initial TEXT, customer_last_name TEXT);"
      }
    ],
    [
      {
        "question": "Show the account name and other account details for all accounts.",
        "query": "SELECT account_name , other_account_details FROM accounts",
        "schema": "CREATE TABLE Accounts (account_id NUMBER, account_name TEXT, other_account_details TEXT); CREATE TABLE Customers (customer_id NUMBER);"
      },
      {
        "question": "How about those accounts by the customer with first name Meaghan and last name Keeling?",
        "query": "SELECT t1.account_name , t1.other_account_details FROM accounts AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id WHERE t2.customer_first_name = \"Meaghan\" AND t2.customer_last_name = \"Keeling\"",
        "schema": "CREATE TABLE Customers (customer_first_name TEXT, customer_last_name TEXT, customer_id NUMBER); CREATE TABLE Accounts (account_name TEXT, customer_id NUMBER, account_id NUMBER, other_account_details TEXT);"
      }
    ],
    [
      {
        "question": "Show the first name and last name for all customers.",
        "query": "SELECT customer_first_name , customer_last_name FROM customers",
        "schema": "CREATE TABLE Accounts (account_name TEXT, customer_id NUMBER); CREATE TABLE Customers (customer_first_name TEXT, customer_last_name TEXT, customer_id NUMBER);"
      },
      {
        "question": "Also show their account names.",
        "query": "SELECT t2.customer_first_name , t2.customer_last_name, t1.account_name FROM accounts AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id",
        "schema": "CREATE TABLE Customers (customer_last_name TEXT, customer_id NUMBER, customer_first_name TEXT); CREATE TABLE Accounts (account_name TEXT, account_id NUMBER, customer_id NUMBER);"
      },
      {
        "question": "Who has the account with name 900?",
        "query": "SELECT t2.customer_first_name , t2.customer_last_name FROM accounts AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id WHERE t1.account_name = \"900\"",
        "schema": "CREATE TABLE Customers (customer_first_name TEXT, customer_id NUMBER, customer_last_name TEXT); CREATE TABLE Accounts (account_id NUMBER, account_name TEXT, customer_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show the first name, last name, and phone number for all customers.",
        "query": "SELECT customer_first_name , customer_last_name , phone_number FROM customers",
        "schema": "CREATE TABLE Customers (customer_last_name TEXT, customer_first_name TEXT, phone_number TEXT, customer_id NUMBER); CREATE TABLE Accounts (account_name TEXT, customer_id NUMBER);"
      },
      {
        "question": "How about those with an account?",
        "query": "SELECT t1.customer_first_name , t1.customer_last_name , t1.phone_number FROM customers AS t1 JOIN accounts AS t2 ON t1.customer_id = t2.customer_id",
        "schema": "CREATE TABLE Accounts (customer_id NUMBER, account_name TEXT, account_id NUMBER); CREATE TABLE Customers (customer_first_name TEXT, customer_last_name TEXT, customer_id NUMBER, phone_number TEXT);"
      },
      {
        "question": "Show their distinct information.",
        "query": "SELECT DISTINCT t1.customer_first_name , t1.customer_last_name , t1.phone_number FROM customers AS t1 JOIN accounts AS t2 ON t1.customer_id = t2.customer_id",
        "schema": "CREATE TABLE Accounts (customer_id NUMBER, account_name TEXT, account_id NUMBER); CREATE TABLE Customers (customer_first_name TEXT, phone_number TEXT, customer_id NUMBER, customer_last_name TEXT);"
      }
    ],
    [
      {
        "question": "Show customer ids for all customers.",
        "query": "SELECT customer_id FROM customers",
        "schema": "CREATE TABLE Customers (customer_last_name TEXT, customer_middle_initial TEXT, customer_first_name TEXT, customer_id NUMBER); CREATE TABLE Orders (customer_id NUMBER); CREATE TABLE Accounts (customer_id NUMBER);"
      },
      {
        "question": "Show ids for those who have an account.",
        "query": "SELECT customer_id FROM accounts",
        "schema": "CREATE TABLE Orders (customer_id NUMBER); CREATE TABLE Customers (customer_last_name TEXT, customer_first_name TEXT, customer_middle_initial TEXT, customer_id NUMBER); CREATE TABLE Accounts (customer_id NUMBER, account_id NUMBER);"
      },
      {
        "question": "How about those who don't?",
        "query": "SELECT customer_id FROM customers EXCEPT SELECT customer_id FROM accounts",
        "schema": "CREATE TABLE Customers (customer_middle_initial TEXT, customer_last_name TEXT, customer_first_name TEXT, customer_id NUMBER); CREATE TABLE Orders (customer_id NUMBER); CREATE TABLE Accounts (customer_id NUMBER, account_id NUMBER, account_name TEXT);"
      }
    ],
    [
      {
        "question": "Show the id for all customers with an account.",
        "query": "SELECT customer_id FROM accounts",
        "schema": "CREATE TABLE Accounts (customer_id NUMBER, account_id NUMBER, account_name TEXT); CREATE TABLE Customers (customer_first_name TEXT, customer_middle_initial TEXT, customer_last_name TEXT, customer_id NUMBER); CREATE TABLE Orders (customer_id NUMBER);"
      },
      {
        "question": "How many accounts do each of them have?",
        "query": "SELECT count(*) , customer_id FROM accounts GROUP BY customer_id",
        "schema": "CREATE TABLE Customers (customer_middle_initial TEXT, customer_last_name TEXT, customer_first_name TEXT, customer_id NUMBER); CREATE TABLE Orders (customer_id NUMBER); CREATE TABLE Accounts (account_name TEXT, account_id NUMBER, customer_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show the customer id for all customers with an account.",
        "query": "SELECT customer_id FROM accounts",
        "schema": "CREATE TABLE Accounts (account_name TEXT, account_id NUMBER, customer_id NUMBER); CREATE TABLE Customers (customer_middle_initial TEXT, customer_first_name TEXT, customer_id NUMBER, customer_last_name TEXT); CREATE TABLE Orders (customer_id NUMBER);"
      },
      {
        "question": "Also show their first and last name.",
        "query": "SELECT t1.customer_id , t2.customer_first_name , t2.customer_last_name FROM accounts AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id",
        "schema": "CREATE TABLE Customers (customer_last_name TEXT, customer_first_name TEXT, customer_id NUMBER, customer_middle_initial TEXT); CREATE TABLE Accounts (account_id NUMBER, account_name TEXT, customer_id NUMBER); CREATE TABLE Orders (customer_id NUMBER);"
      },
      {
        "question": "Order them by the number of accounts in descending order.",
        "query": "SELECT t1.customer_id , t2.customer_first_name , t2.customer_last_name FROM accounts AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id GROUP BY t1.customer_id ORDER BY count(*) DESC",
        "schema": "CREATE TABLE Orders (customer_id NUMBER, order_id NUMBER); CREATE TABLE Accounts (account_name TEXT, account_id NUMBER, customer_id NUMBER); CREATE TABLE Customers (customer_last_name TEXT, customer_middle_initial TEXT, customer_id NUMBER, customer_first_name TEXT);"
      },
      {
        "question": "Who has the most?",
        "query": "SELECT t1.customer_id , t2.customer_first_name , t2.customer_last_name FROM accounts AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id GROUP BY t1.customer_id ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Orders (order_id NUMBER, customer_id NUMBER); CREATE TABLE Customers (customer_middle_initial TEXT, customer_id NUMBER, customer_first_name TEXT, customer_last_name TEXT); CREATE TABLE Accounts (account_id NUMBER, customer_id NUMBER, account_name TEXT);"
      }
    ],
    [
      {
        "question": "Show the first name and last name for all customers.",
        "query": "SELECT customer_first_name , customer_last_name FROM customers",
        "schema": "CREATE TABLE Customers (customer_first_name TEXT, customer_last_name TEXT, customer_id NUMBER); CREATE TABLE Accounts (account_name TEXT, customer_id NUMBER);"
      },
      {
        "question": "Also show the number of accounts owned by each of them.",
        "query": "SELECT t2.customer_first_name , t2.customer_last_name , count(*) FROM accounts AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id GROUP BY t1.customer_id",
        "schema": "CREATE TABLE Accounts (customer_id NUMBER, account_id NUMBER, account_name TEXT); CREATE TABLE Customers (customer_first_name TEXT, customer_id NUMBER, customer_last_name TEXT);"
      },
      {
        "question": "Also show their customer ids.",
        "query": "SELECT t1.customer_id , t2.customer_first_name , t2.customer_last_name , count(*) FROM accounts AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id GROUP BY t1.customer_id",
        "schema": "CREATE TABLE Customers (customer_id NUMBER, customer_first_name TEXT, customer_last_name TEXT); CREATE TABLE Accounts (account_name TEXT, customer_id NUMBER, account_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show the first name and id for all customers with an accout.",
        "query": "SELECT t2.customer_first_name , t1.customer_id FROM accounts AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id",
        "schema": "CREATE TABLE Orders (customer_id NUMBER); CREATE TABLE Accounts (account_name TEXT, account_id NUMBER, customer_id NUMBER); CREATE TABLE Customers (customer_first_name TEXT, customer_id NUMBER, customer_middle_initial TEXT, customer_last_name TEXT);"
      },
      {
        "question": "For each of them, also count the number of accounts.",
        "query": "SELECT t2.customer_first_name , t1.customer_id , count(*) FROM accounts AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id GROUP BY t1.customer_id",
        "schema": "CREATE TABLE Customers (customer_middle_initial TEXT, customer_first_name TEXT, customer_last_name TEXT, customer_id NUMBER); CREATE TABLE Accounts (account_id NUMBER, customer_id NUMBER, account_name TEXT); CREATE TABLE Orders (customer_id NUMBER);"
      },
      {
        "question": "Show the first name and id for those with at least 2 accounts.",
        "query": "SELECT t2.customer_first_name , t1.customer_id FROM accounts AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id GROUP BY t1.customer_id HAVING count(*) >= 2",
        "schema": "CREATE TABLE Orders (customer_id NUMBER); CREATE TABLE Customers (customer_first_name TEXT, customer_last_name TEXT, customer_id NUMBER, customer_middle_initial TEXT); CREATE TABLE Accounts (account_name TEXT, account_id NUMBER, customer_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show the total number of customers.",
        "query": "SELECT count(*) FROM customers",
        "schema": "CREATE TABLE Orders (customer_id NUMBER); CREATE TABLE Customers (customer_middle_initial TEXT, customer_last_name TEXT, customer_id NUMBER, gender TEXT, state_county_province TEXT, town_city TEXT, customer_first_name TEXT); CREATE TABLE Accounts (customer_id NUMBER);"
      },
      {
        "question": "Break down this number by gender.",
        "query": "SELECT gender , count(*) FROM customers GROUP BY gender",
        "schema": "CREATE TABLE Accounts (customer_id NUMBER); CREATE TABLE Orders (customer_id NUMBER); CREATE TABLE Customers (state_county_province TEXT, town_city TEXT, gender TEXT, customer_first_name TEXT, customer_last_name TEXT, customer_middle_initial TEXT, customer_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show the information for all financial transactions.",
        "query": "SELECT * FROM financial_transactions",
        "schema": "CREATE TABLE Customers (customer_last_name TEXT, customer_id NUMBER); CREATE TABLE Accounts (account_id NUMBER); CREATE TABLE Financial_Transactions (transaction_comment TEXT, account_id NUMBER, other_transaction_details TEXT, transaction_type TEXT, transaction_id NUMBER);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT count(*) FROM financial_transactions",
        "schema": "CREATE TABLE Customers (customer_last_name TEXT, customer_id NUMBER); CREATE TABLE Accounts (account_id NUMBER); CREATE TABLE Financial_Transactions (other_transaction_details TEXT, account_id NUMBER, transaction_amount NUMBER, transaction_comment TEXT, transaction_type TEXT, transaction_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show the id of accounts with a financial transaction.",
        "query": "SELECT account_id FROM financial_transactions",
        "schema": "CREATE TABLE Financial_Transactions (transaction_comment TEXT, transaction_type TEXT, account_id NUMBER, transaction_id NUMBER); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Products (parent_product_id NUMBER, product_id NUMBER, product_name TEXT); CREATE TABLE Accounts (account_name TEXT, account_id NUMBER, customer_id NUMBER);"
      },
      {
        "question": "For each of them, count the number of financial transactions.",
        "query": "SELECT count(*) , account_id FROM financial_transactions GROUP BY account_id",
        "schema": "CREATE TABLE Financial_Transactions (transaction_type TEXT, account_id NUMBER, transaction_id NUMBER, transaction_amount NUMBER, transaction_comment TEXT); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Products (product_id NUMBER, product_name TEXT, parent_product_id NUMBER); CREATE TABLE Accounts (customer_id NUMBER, account_id NUMBER, account_name TEXT);"
      }
    ],
    [
      {
        "question": "Show the transaction id for each financial transaction.",
        "query": "SELECT transaction_id FROM financial_transactions",
        "schema": "CREATE TABLE Financial_Transactions (transaction_id NUMBER, transaction_type TEXT, account_id NUMBER); CREATE TABLE Accounts (account_id NUMBER, customer_id NUMBER); CREATE TABLE Orders (customer_id NUMBER, order_id NUMBER); CREATE TABLE Order_Items (order_id NUMBER); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Invoices (invoice_number NUMBER);"
      },
      {
        "question": "Also show the account name for each of them.",
        "query": "SELECT t1.transaction_id , t2.account_name FROM financial_transactions AS t1 JOIN accounts AS t2 ON t1.account_id = t2.account_id",
        "schema": "CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Orders (order_id NUMBER, customer_id NUMBER); CREATE TABLE Financial_Transactions (transaction_id NUMBER, transaction_type TEXT, account_id NUMBER, transaction_comment TEXT); CREATE TABLE Accounts (account_name TEXT, customer_id NUMBER, account_id NUMBER); CREATE TABLE Order_Items (order_id NUMBER); CREATE TABLE Invoices (invoice_number NUMBER);"
      },
      {
        "question": "Limit the results to transactions from accounts with the account name 337.",
        "query": "SELECT t1.transaction_id , t2.account_name FROM financial_transactions AS t1 JOIN accounts AS t2 ON t1.account_id = t2.account_id WHERE t2.account_name = \"337\"",
        "schema": "CREATE TABLE Accounts (account_id NUMBER, customer_id NUMBER, account_name TEXT); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Financial_Transactions (transaction_type TEXT, transaction_comment TEXT, transaction_id NUMBER, account_id NUMBER); CREATE TABLE Invoices (invoice_number NUMBER); CREATE TABLE Order_Items (order_id NUMBER); CREATE TABLE Orders (order_id NUMBER, customer_id NUMBER);"
      },
      {
        "question": "How many of those are there?",
        "query": "SELECT count(*) FROM financial_transactions AS t1 JOIN accounts AS t2 ON t1.account_id = t2.account_id WHERE t2.account_name = \"337\"",
        "schema": "CREATE TABLE Order_Items (order_id NUMBER); CREATE TABLE Financial_Transactions (transaction_type TEXT, transaction_comment TEXT, transaction_id NUMBER, account_id NUMBER); CREATE TABLE Invoices (invoice_number NUMBER); CREATE TABLE Orders (customer_id NUMBER, order_id NUMBER); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Accounts (customer_id NUMBER, account_id NUMBER, account_name TEXT);"
      }
    ],
    [
      {
        "question": "Show the transaction amount for each transaction.",
        "query": "SELECT transaction_amount FROM financial_transactions",
        "schema": "CREATE TABLE Accounts (account_id NUMBER); CREATE TABLE Customers (customer_last_name TEXT, customer_id NUMBER); CREATE TABLE Financial_Transactions (transaction_type TEXT, transaction_amount NUMBER, transaction_id NUMBER, account_id NUMBER);"
      },
      {
        "question": "What is the average?",
        "query": "SELECT avg(transaction_amount) FROM financial_transactions",
        "schema": "CREATE TABLE Customers (customer_id NUMBER, customer_last_name TEXT); CREATE TABLE Financial_Transactions (transaction_amount NUMBER, transaction_id NUMBER, transaction_type TEXT, account_id NUMBER); CREATE TABLE Accounts (account_id NUMBER);"
      },
      {
        "question": "Also show the minimum, maximum, and total.",
        "query": "SELECT avg(transaction_amount) , min(transaction_amount) , max(transaction_amount) , sum(transaction_amount) FROM financial_transactions",
        "schema": "CREATE TABLE Accounts (account_id NUMBER); CREATE TABLE Financial_Transactions (account_id NUMBER, transaction_id NUMBER, transaction_type TEXT, transaction_amount NUMBER); CREATE TABLE Customers (customer_id NUMBER, customer_last_name TEXT);"
      }
    ],
    [
      {
        "question": "Show ids for all transactions.",
        "query": "SELECT transaction_id FROM financial_transactions",
        "schema": "CREATE TABLE Orders (customer_id NUMBER, order_id NUMBER); CREATE TABLE Accounts (account_id NUMBER, customer_id NUMBER); CREATE TABLE Customers (customer_last_name TEXT, customer_id NUMBER); CREATE TABLE Financial_Transactions (transaction_id NUMBER, transaction_type TEXT, account_id NUMBER);"
      },
      {
        "question": "What is the average transaction amount?",
        "query": "SELECT avg(transaction_amount) FROM financial_transactions",
        "schema": "CREATE TABLE Customers (customer_id NUMBER, customer_last_name TEXT); CREATE TABLE Orders (order_id NUMBER, customer_id NUMBER); CREATE TABLE Financial_Transactions (transaction_amount NUMBER, transaction_type TEXT, transaction_id NUMBER, account_id NUMBER); CREATE TABLE Accounts (customer_id NUMBER, account_id NUMBER);"
      },
      {
        "question": "What are the ids of transactions whose amount is greater than it?",
        "query": "SELECT transaction_id FROM financial_transactions WHERE transaction_amount > (SELECT avg(transaction_amount) FROM financial_transactions)",
        "schema": "CREATE TABLE Orders (order_id NUMBER, customer_id NUMBER); CREATE TABLE Customers (customer_id NUMBER, customer_last_name TEXT); CREATE TABLE Accounts (customer_id NUMBER, account_id NUMBER); CREATE TABLE Financial_Transactions (transaction_amount NUMBER, account_id NUMBER, transaction_type TEXT, transaction_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show the transaction type for each transaction.",
        "query": "SELECT transaction_type FROM financial_transactions",
        "schema": "CREATE TABLE Financial_Transactions (transaction_type TEXT);"
      },
      {
        "question": "For each type, what is the total amount of transactions?",
        "query": "SELECT transaction_type , sum(transaction_amount) FROM financial_transactions GROUP BY transaction_type",
        "schema": "CREATE TABLE Financial_Transactions (transaction_type TEXT, transaction_amount NUMBER, transaction_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show the account id for each transaction.",
        "query": "SELECT account_id FROM financial_transactions",
        "schema": "CREATE TABLE Financial_Transactions (account_id NUMBER, transaction_id NUMBER, transaction_type TEXT); CREATE TABLE Accounts (customer_id NUMBER, account_id NUMBER); CREATE TABLE Customers (customer_id NUMBER);"
      },
      {
        "question": "Also show the account name for each.",
        "query": "SELECT t2.account_name , t1.account_id FROM financial_transactions AS t1 JOIN accounts AS t2 ON t1.account_id = t2.account_id",
        "schema": "CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Accounts (account_name TEXT, account_id NUMBER, customer_id NUMBER); CREATE TABLE Financial_Transactions (account_id NUMBER, transaction_id NUMBER, transaction_type TEXT);"
      },
      {
        "question": "For each account, show the number of transactions.",
        "query": "SELECT t2.account_name , t1.account_id , count(*) FROM financial_transactions AS t1 JOIN accounts AS t2 ON t1.account_id = t2.account_id GROUP BY t1.account_id",
        "schema": "CREATE TABLE Financial_Transactions (account_id NUMBER, transaction_id NUMBER, transaction_type TEXT, transaction_amount NUMBER); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Accounts (account_id NUMBER, account_name TEXT, customer_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show the account id for each transaction.",
        "query": "SELECT account_id FROM financial_transactions",
        "schema": "CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Financial_Transactions (transaction_id NUMBER, transaction_type TEXT, account_id NUMBER); CREATE TABLE Accounts (account_id NUMBER, customer_id NUMBER);"
      },
      {
        "question": "For each of them, show the number of transactions.",
        "query": "SELECT account_id, count(*) FROM financial_transactions GROUP BY account_id",
        "schema": "CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Accounts (customer_id NUMBER, account_id NUMBER); CREATE TABLE Financial_Transactions (account_id NUMBER, transaction_amount NUMBER, transaction_type TEXT, transaction_id NUMBER);"
      },
      {
        "question": "Order the ids in descending order of the number of transactions.",
        "query": "SELECT account_id FROM financial_transactions GROUP BY account_id ORDER BY count(*) DESC",
        "schema": "CREATE TABLE Order_Items (order_id NUMBER); CREATE TABLE Orders (order_id NUMBER); CREATE TABLE Financial_Transactions (transaction_amount NUMBER, transaction_comment TEXT, account_id NUMBER, transaction_type TEXT, transaction_id NUMBER); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Accounts (customer_id NUMBER, account_id NUMBER);"
      },
      {
        "question": "Which id has the most?",
        "query": "SELECT account_id FROM financial_transactions GROUP BY account_id ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Financial_Transactions (transaction_amount NUMBER, transaction_type TEXT, transaction_comment TEXT, transaction_id NUMBER, account_id NUMBER); CREATE TABLE Accounts (account_id NUMBER, customer_id NUMBER); CREATE TABLE Orders (order_id NUMBER); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Order_Items (order_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show the account id and name for each account with a transaction.",
        "query": "SELECT t1.account_id , t2.account_name FROM financial_transactions AS t1 JOIN accounts AS t2 ON t1.account_id = t2.account_id",
        "schema": "CREATE TABLE Customers (customer_first_name TEXT, customer_id NUMBER); CREATE TABLE Financial_Transactions (transaction_type TEXT, transaction_id NUMBER, account_id NUMBER); CREATE TABLE Accounts (account_id NUMBER, customer_id NUMBER, account_name TEXT);"
      },
      {
        "question": "Also count the number of transactions for each of them.",
        "query": "SELECT t1.account_id , t2.account_name , count(*) FROM financial_transactions AS t1 JOIN accounts AS t2 ON t1.account_id = t2.account_id GROUP BY t1.account_id",
        "schema": "CREATE TABLE Accounts (customer_id NUMBER, account_name TEXT, account_id NUMBER); CREATE TABLE Financial_Transactions (transaction_id NUMBER, transaction_type TEXT, account_id NUMBER); CREATE TABLE Customers (customer_first_name TEXT, customer_id NUMBER);"
      },
      {
        "question": "Which of them have at least 4 transactions?",
        "query": "SELECT t1.account_id , t2.account_name FROM financial_transactions AS t1 JOIN accounts AS t2 ON t1.account_id = t2.account_id GROUP BY t1.account_id HAVING count(*) >= 4",
        "schema": "CREATE TABLE Financial_Transactions (transaction_id NUMBER, transaction_type TEXT, account_id NUMBER, transaction_amount NUMBER); CREATE TABLE Accounts (account_name TEXT, customer_id NUMBER, account_id NUMBER); CREATE TABLE Customers (customer_id NUMBER, customer_first_name TEXT);"
      }
    ],
    [
      {
        "question": "Show information for all products.",
        "query": "SELECT * FROM products",
        "schema": "CREATE TABLE Order_Items (product_id NUMBER, order_item_id NUMBER); CREATE TABLE Invoice_Line_Items (product_title TEXT, order_item_id NUMBER, product_id NUMBER, product_price NUMBER); CREATE TABLE Products (production_type_code TEXT, product_id NUMBER, product_name TEXT, parent_product_id NUMBER); CREATE TABLE Product_Categories (production_type_code TEXT);"
      },
      {
        "question": "What are their sizes?",
        "query": "SELECT product_size FROM products",
        "schema": "CREATE TABLE Product_Categories (production_type_code TEXT); CREATE TABLE Invoice_Line_Items (product_id NUMBER, product_price NUMBER, product_title TEXT, order_item_id NUMBER); CREATE TABLE Order_Items (product_quantity TEXT, product_id NUMBER, order_item_id NUMBER); CREATE TABLE Products (product_name TEXT, product_id NUMBER, production_type_code TEXT, parent_product_id NUMBER, product_size TEXT);"
      },
      {
        "question": "Only show distinct sizes.",
        "query": "SELECT DISTINCT product_size FROM products",
        "schema": "CREATE TABLE Order_Items (order_item_id NUMBER, product_id NUMBER, product_quantity TEXT); CREATE TABLE Invoice_Line_Items (product_id NUMBER, product_price NUMBER, order_item_id NUMBER, product_title TEXT); CREATE TABLE Product_Categories (production_type_code TEXT); CREATE TABLE Products (product_id NUMBER, product_name TEXT, product_size TEXT, production_type_code TEXT, parent_product_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show info for all products.",
        "query": "SELECT * FROM products",
        "schema": "CREATE TABLE Invoice_Line_Items (product_price NUMBER, product_id NUMBER, product_title TEXT); CREATE TABLE Products (product_name TEXT, product_id NUMBER, parent_product_id NUMBER, production_type_code TEXT); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Order_Items (product_id NUMBER, order_item_id NUMBER); CREATE TABLE Product_Categories (production_type_code TEXT);"
      },
      {
        "question": "Show their distinct colors.",
        "query": "SELECT DISTINCT product_color FROM products",
        "schema": "CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Product_Categories (production_type_code TEXT); CREATE TABLE Invoice_Line_Items (product_price NUMBER, product_title TEXT, product_id NUMBER); CREATE TABLE Products (production_type_code TEXT, product_color TEXT, product_id NUMBER, product_name TEXT, parent_product_id NUMBER); CREATE TABLE Order_Items (order_item_id NUMBER, product_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show the invoice number for each transaction.",
        "query": "SELECT invoice_number FROM financial_transactions",
        "schema": "CREATE TABLE Financial_Transactions (invoice_number NUMBER, transaction_comment TEXT, transaction_amount NUMBER, transaction_id NUMBER, account_id NUMBER, transaction_type TEXT); CREATE TABLE Accounts (account_id NUMBER); CREATE TABLE Invoices (invoice_number NUMBER, order_id NUMBER); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Invoice_Line_Items (invoice_number NUMBER);"
      },
      {
        "question": "For each of them, show the number of transactions.",
        "query": "SELECT invoice_number , count(*) FROM financial_transactions GROUP BY invoice_number",
        "schema": "CREATE TABLE Invoice_Line_Items (invoice_number NUMBER); CREATE TABLE Accounts (account_id NUMBER); CREATE TABLE Invoices (invoice_number NUMBER, order_id NUMBER); CREATE TABLE Financial_Transactions (transaction_type TEXT, transaction_amount NUMBER, transaction_comment TEXT, transaction_id NUMBER, invoice_number NUMBER, account_id NUMBER); CREATE TABLE Customers (customer_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show the invoice number of each transaction.",
        "query": "SELECT invoice_number FROM financial_transactions",
        "schema": "CREATE TABLE Invoices (invoice_number NUMBER, order_id NUMBER); CREATE TABLE Order_Items (order_item_id NUMBER); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Orders (order_id NUMBER); CREATE TABLE Financial_Transactions (transaction_type TEXT, account_id NUMBER, transaction_amount NUMBER, invoice_number NUMBER, transaction_comment TEXT, transaction_id NUMBER); CREATE TABLE Accounts (account_id NUMBER); CREATE TABLE Invoice_Line_Items (invoice_number NUMBER);"
      },
      {
        "question": "Also show the invoice date.",
        "query": "SELECT t2.invoice_number , t2.invoice_date FROM financial_transactions AS t1 JOIN invoices AS t2 ON t1.invoice_number = t2.invoice_number",
        "schema": "CREATE TABLE Invoice_Line_Items (invoice_number NUMBER); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Financial_Transactions (transaction_date TIME, invoice_number NUMBER, account_id NUMBER, transaction_amount NUMBER, transaction_id NUMBER, transaction_comment TEXT, transaction_type TEXT); CREATE TABLE Orders (order_id NUMBER); CREATE TABLE Order_Items (order_item_id NUMBER); CREATE TABLE Accounts (account_id NUMBER); CREATE TABLE Invoices (order_id NUMBER, invoice_number NUMBER, invoice_date TIME);"
      },
      {
        "question": "Also show the number of transactions for each of them.",
        "query": "SELECT t2.invoice_number , t2.invoice_date, count(*) FROM financial_transactions AS t1 JOIN invoices AS t2 ON t1.invoice_number = t2.invoice_number GROUP BY t1.invoice_number",
        "schema": "CREATE TABLE Order_Items (order_item_id NUMBER); CREATE TABLE Financial_Transactions (transaction_id NUMBER, transaction_comment TEXT, transaction_type TEXT, invoice_number NUMBER, transaction_amount NUMBER, transaction_date TIME, account_id NUMBER); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Invoice_Line_Items (invoice_number NUMBER); CREATE TABLE Invoices (invoice_number NUMBER, invoice_date TIME, order_id NUMBER); CREATE TABLE Accounts (account_id NUMBER); CREATE TABLE Orders (order_id NUMBER);"
      },
      {
        "question": "Which one has the most transactions?",
        "query": "SELECT t2.invoice_number , t2.invoice_date FROM financial_transactions AS t1 JOIN invoices AS t2 ON t1.invoice_number = t2.invoice_number GROUP BY t1.invoice_number ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Order_Items (order_item_id NUMBER); CREATE TABLE Invoice_Line_Items (invoice_number NUMBER); CREATE TABLE Financial_Transactions (account_id NUMBER, transaction_type TEXT, transaction_comment TEXT, invoice_number NUMBER, transaction_id NUMBER, transaction_amount NUMBER, transaction_date TIME); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Invoices (invoice_date TIME, invoice_number NUMBER, order_id NUMBER); CREATE TABLE Orders (order_id NUMBER); CREATE TABLE Accounts (account_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show the information for all invoices.",
        "query": "SELECT * FROM invoices",
        "schema": "CREATE TABLE Orders (order_id NUMBER); CREATE TABLE Financial_Transactions (invoice_number NUMBER); CREATE TABLE Accounts (customer_id NUMBER); CREATE TABLE Customers (customer_last_name TEXT, customer_id NUMBER); CREATE TABLE Invoice_Line_Items (order_item_id NUMBER, product_title TEXT, invoice_number NUMBER); CREATE TABLE Invoices (invoice_number NUMBER, order_id NUMBER); CREATE TABLE Order_Items (order_item_id NUMBER);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT count(*) FROM invoices",
        "schema": "CREATE TABLE Orders (order_id NUMBER); CREATE TABLE Financial_Transactions (invoice_number NUMBER); CREATE TABLE Customers (customer_id NUMBER, customer_first_name TEXT, customer_last_name TEXT); CREATE TABLE Order_Items (order_item_id NUMBER); CREATE TABLE Accounts (customer_id NUMBER); CREATE TABLE Invoices (order_id NUMBER, invoice_date TIME, invoice_number NUMBER); CREATE TABLE Invoice_Line_Items (invoice_number NUMBER, product_title TEXT, order_item_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show the invoice date for all invoices.",
        "query": "SELECT invoice_date FROM invoices",
        "schema": "CREATE TABLE Invoice_Line_Items (invoice_number NUMBER); CREATE TABLE Financial_Transactions (invoice_number NUMBER, transaction_date TIME); CREATE TABLE Customers (customer_last_name TEXT, customer_id NUMBER); CREATE TABLE Accounts (customer_id NUMBER); CREATE TABLE Invoices (invoice_date TIME, invoice_number NUMBER, order_id NUMBER);"
      },
      {
        "question": "Also show their order ids.",
        "query": "SELECT invoice_date , order_id FROM invoices",
        "schema": "CREATE TABLE Order_Items (order_item_id NUMBER, order_id NUMBER); CREATE TABLE Financial_Transactions (transaction_date TIME, invoice_number NUMBER); CREATE TABLE Customers (customer_id NUMBER, customer_last_name TEXT); CREATE TABLE Invoice_Line_Items (order_item_id NUMBER, invoice_number NUMBER); CREATE TABLE Orders (order_details TEXT, order_id NUMBER, date_order_placed TIME); CREATE TABLE Accounts (customer_id NUMBER); CREATE TABLE Invoices (order_id NUMBER, invoice_date TIME, invoice_number NUMBER);"
      },
      {
        "question": "Also show their order details.",
        "query": "SELECT t1.invoice_date , t1.order_id , t2.order_details FROM invoices AS t1 JOIN orders AS t2 ON t1.order_id = t2.order_id",
        "schema": "CREATE TABLE Invoices (invoice_number NUMBER, order_id NUMBER, invoice_date TIME); CREATE TABLE Orders (date_order_placed TIME, order_id NUMBER, order_details TEXT); CREATE TABLE Customers (customer_id NUMBER, customer_last_name TEXT); CREATE TABLE Financial_Transactions (transaction_date TIME, invoice_number NUMBER); CREATE TABLE Accounts (customer_id NUMBER); CREATE TABLE Invoice_Line_Items (invoice_number NUMBER, order_item_id NUMBER); CREATE TABLE Order_Items (order_item_id NUMBER, order_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show the order id for each invoice.",
        "query": "SELECT order_id FROM invoices",
        "schema": "CREATE TABLE Financial_Transactions (invoice_number NUMBER); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Accounts (customer_id NUMBER, account_id NUMBER); CREATE TABLE Order_Items (order_id NUMBER, product_id NUMBER, order_item_id NUMBER); CREATE TABLE Products (product_id NUMBER); CREATE TABLE Orders (order_id NUMBER, customer_id NUMBER, order_details TEXT); CREATE TABLE Invoices (invoice_number NUMBER, order_id NUMBER); CREATE TABLE Invoice_Line_Items (order_item_id NUMBER, product_id NUMBER, invoice_number NUMBER, product_title TEXT);"
      },
      {
        "question": "What is the number of invoices for each order?",
        "query": "SELECT order_id , count(*) FROM invoices GROUP BY order_id",
        "schema": "CREATE TABLE Accounts (account_id NUMBER, customer_id NUMBER); CREATE TABLE Financial_Transactions (invoice_number NUMBER); CREATE TABLE Invoices (invoice_number NUMBER, order_id NUMBER); CREATE TABLE Products (product_id NUMBER); CREATE TABLE Order_Items (order_item_id NUMBER, product_id NUMBER, order_id NUMBER); CREATE TABLE Orders (order_details TEXT, order_id NUMBER, customer_id NUMBER); CREATE TABLE Invoice_Line_Items (order_item_id NUMBER, invoice_number NUMBER, product_title TEXT, product_id NUMBER); CREATE TABLE Customers (customer_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show the order id and order details for all orders.",
        "query": "SELECT order_id , order_details FROM orders",
        "schema": "CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Invoice_Line_Items (order_item_id NUMBER); CREATE TABLE Invoices (order_id NUMBER); CREATE TABLE Accounts (customer_id NUMBER); CREATE TABLE Order_Items (order_item_id NUMBER, order_id NUMBER, other_order_item_details TEXT); CREATE TABLE Orders (order_id NUMBER, order_details TEXT, customer_id NUMBER);"
      },
      {
        "question": "For each of them, count the number of invoices as well.",
        "query": "SELECT t2.order_id , t2.order_details, count(*) FROM invoices AS t1 JOIN orders AS t2 ON t1.order_id = t2.order_id GROUP BY t2.order_id",
        "schema": "CREATE TABLE Accounts (customer_id NUMBER); CREATE TABLE Invoice_Line_Items (order_item_id NUMBER, invoice_number NUMBER); CREATE TABLE Invoices (order_id NUMBER, invoice_number NUMBER); CREATE TABLE Orders (order_details TEXT, order_id NUMBER, customer_id NUMBER); CREATE TABLE Financial_Transactions (invoice_number NUMBER); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Order_Items (order_item_id NUMBER, order_id NUMBER, other_order_item_details TEXT);"
      },
      {
        "question": "Which of them have more than two?",
        "query": "SELECT t2.order_id , t2.order_details FROM invoices AS t1 JOIN orders AS t2 ON t1.order_id = t2.order_id GROUP BY t2.order_id HAVING count(*) > 2",
        "schema": "CREATE TABLE Orders (customer_id NUMBER, order_details TEXT, order_id NUMBER); CREATE TABLE Financial_Transactions (invoice_number NUMBER); CREATE TABLE Order_Items (other_order_item_details TEXT, order_id NUMBER, order_item_id NUMBER); CREATE TABLE Invoice_Line_Items (order_item_id NUMBER, invoice_number NUMBER); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Invoices (order_id NUMBER, invoice_number NUMBER); CREATE TABLE Accounts (customer_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show the last name, id, and phone number for all customers.",
        "query": "SELECT customer_last_name , customer_id , phone_number FROM customers",
        "schema": "CREATE TABLE Customers (customer_id NUMBER, phone_number TEXT, customer_first_name TEXT, customer_last_name TEXT); CREATE TABLE Accounts (account_name TEXT, customer_id NUMBER);"
      },
      {
        "question": "For each of them, show the number of orders as well.",
        "query": "SELECT t2.customer_last_name , t1.customer_id , t2.phone_number , count(*) FROM orders AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id GROUP BY t1.customer_id",
        "schema": "CREATE TABLE Customers (customer_id NUMBER, phone_number TEXT, customer_last_name TEXT, customer_first_name TEXT); CREATE TABLE Accounts (account_name TEXT, customer_id NUMBER); CREATE TABLE Invoices (order_id NUMBER); CREATE TABLE Order_Items (order_id NUMBER); CREATE TABLE Orders (order_id NUMBER, customer_id NUMBER);"
      },
      {
        "question": "Sort them in descending order of the number of orders.",
        "query": "SELECT t2.customer_last_name , t1.customer_id , t2.phone_number FROM orders AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id GROUP BY t1.customer_id ORDER BY count(*) DESC",
        "schema": "CREATE TABLE Invoices (order_id NUMBER); CREATE TABLE Order_Items (order_id NUMBER); CREATE TABLE Accounts (account_name TEXT, customer_id NUMBER); CREATE TABLE Orders (order_id NUMBER, customer_id NUMBER); CREATE TABLE Customers (customer_first_name TEXT, customer_last_name TEXT, phone_number TEXT, customer_id NUMBER);"
      },
      {
        "question": "Who has the most?",
        "query": "SELECT t2.customer_last_name , t1.customer_id , t2.phone_number FROM orders AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id GROUP BY t1.customer_id ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Accounts (account_name TEXT, customer_id NUMBER); CREATE TABLE Invoices (order_id NUMBER); CREATE TABLE Orders (customer_id NUMBER, order_id NUMBER); CREATE TABLE Customers (customer_first_name TEXT, customer_last_name TEXT, customer_id NUMBER, phone_number TEXT); CREATE TABLE Order_Items (order_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show all product names",
        "query": "SELECT product_name FROM products",
        "schema": "CREATE TABLE Invoice_Line_Items (product_title TEXT, product_id NUMBER); CREATE TABLE Products (product_name TEXT, product_id NUMBER);"
      },
      {
        "question": "Which of them has an order?",
        "query": "SELECT t1.product_name FROM products AS t1 JOIN order_items AS t2 ON t1.product_id = t2.product_id",
        "schema": "CREATE TABLE Order_Items (order_item_id NUMBER, order_id NUMBER, product_id NUMBER); CREATE TABLE Products (product_name TEXT, product_id NUMBER); CREATE TABLE Invoice_Line_Items (product_id NUMBER, product_title TEXT, order_item_id NUMBER); CREATE TABLE Orders (order_details TEXT, order_id NUMBER);"
      },
      {
        "question": "Which of them don't?",
        "query": "SELECT product_name FROM products EXCEPT SELECT t1.product_name FROM products AS t1 JOIN order_items AS t2 ON t1.product_id = t2.product_id",
        "schema": "CREATE TABLE Products (product_name TEXT, product_id NUMBER); CREATE TABLE Invoice_Line_Items (order_item_id NUMBER, product_title TEXT, product_id NUMBER); CREATE TABLE Order_Items (order_item_id NUMBER, product_id NUMBER, order_id NUMBER); CREATE TABLE Orders (order_id NUMBER, order_details TEXT);"
      }
    ],
    [
      {
        "question": "Show all product names",
        "query": "SELECT product_name FROM products",
        "schema": "CREATE TABLE Products (product_name TEXT, product_id NUMBER); CREATE TABLE Order_Items (product_id NUMBER); CREATE TABLE Invoice_Line_Items (product_id NUMBER, product_title TEXT);"
      },
      {
        "question": "Also show the quantity ordered for each order of a product.",
        "query": "SELECT t2.product_name , t1.product_quantity FROM order_items AS t1 JOIN products AS t2 ON t1.product_id = t2.product_id",
        "schema": "CREATE TABLE Products (product_id NUMBER, product_name TEXT); CREATE TABLE Order_Items (product_id NUMBER, order_item_id NUMBER, order_id NUMBER, product_quantity TEXT); CREATE TABLE Invoices (invoice_number NUMBER, order_id NUMBER); CREATE TABLE Invoice_Line_Items (order_item_id NUMBER, product_title TEXT, product_id NUMBER, product_quantity TEXT); CREATE TABLE Orders (order_id NUMBER, order_details TEXT);"
      },
      {
        "question": "What is the total quantity ordered for each product name?",
        "query": "SELECT t2.product_name , sum(t1.product_quantity) FROM order_items AS t1 JOIN products AS t2 ON t1.product_id = t2.product_id GROUP BY t2.product_name",
        "schema": "CREATE TABLE Order_Items (product_id NUMBER, order_item_id NUMBER, product_quantity TEXT, order_id NUMBER); CREATE TABLE Invoice_Line_Items (product_title TEXT, product_id NUMBER, order_item_id NUMBER, product_quantity TEXT); CREATE TABLE Orders (order_id NUMBER, order_details TEXT); CREATE TABLE Invoices (invoice_number NUMBER, order_id NUMBER); CREATE TABLE Products (product_name TEXT, product_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show the order id for each order item.",
        "query": "SELECT order_id FROM order_items",
        "schema": "CREATE TABLE Accounts (customer_id NUMBER, account_id NUMBER); CREATE TABLE Orders (order_id NUMBER, customer_id NUMBER, order_details TEXT); CREATE TABLE Financial_Transactions (transaction_id NUMBER); CREATE TABLE Products (product_id NUMBER); CREATE TABLE Invoices (order_id NUMBER, invoice_number NUMBER); CREATE TABLE Order_Items (order_id NUMBER, order_item_id NUMBER, other_order_item_details TEXT, product_id NUMBER); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Invoice_Line_Items (order_item_id NUMBER);"
      },
      {
        "question": "For each of those ids, how many items were ordered?",
        "query": "SELECT order_id , count(*) FROM order_items GROUP BY order_id",
        "schema": "CREATE TABLE Order_Items (product_id NUMBER, other_order_item_details TEXT, order_id NUMBER, order_item_id NUMBER); CREATE TABLE Accounts (customer_id NUMBER, account_id NUMBER); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Financial_Transactions (transaction_id NUMBER); CREATE TABLE Products (product_id NUMBER); CREATE TABLE Invoice_Line_Items (order_item_id NUMBER); CREATE TABLE Invoices (order_id NUMBER, invoice_number NUMBER); CREATE TABLE Orders (order_details TEXT, customer_id NUMBER, order_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show the product id for all orders.",
        "query": "SELECT product_id FROM order_items",
        "schema": "CREATE TABLE Invoice_Line_Items (product_id NUMBER); CREATE TABLE Products (product_name TEXT, parent_product_id NUMBER, product_id NUMBER); CREATE TABLE Orders (customer_id NUMBER, order_id NUMBER, order_details TEXT); CREATE TABLE Invoices (order_id NUMBER); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Order_Items (order_item_id NUMBER, order_id NUMBER, product_id NUMBER);"
      },
      {
        "question": "Also show the order id.",
        "query": "SELECT product_id, order_id FROM order_items",
        "schema": "CREATE TABLE Order_Items (order_item_id NUMBER, product_id NUMBER, order_id NUMBER); CREATE TABLE Invoice_Line_Items (order_item_id NUMBER, product_id NUMBER); CREATE TABLE Orders (order_id NUMBER, order_details TEXT, customer_id NUMBER); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Invoices (order_id NUMBER); CREATE TABLE Products (parent_product_id NUMBER, product_name TEXT, product_id NUMBER);"
      },
      {
        "question": "For each of those product ids, what is the number of unique orders containing each product?",
        "query": "SELECT product_id , count(DISTINCT order_id) FROM order_items GROUP BY product_id",
        "schema": "CREATE TABLE Invoice_Line_Items (product_id NUMBER, order_item_id NUMBER); CREATE TABLE Orders (order_details TEXT, order_id NUMBER, customer_id NUMBER); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Products (parent_product_id NUMBER, product_name TEXT, product_id NUMBER); CREATE TABLE Invoices (order_id NUMBER); CREATE TABLE Order_Items (order_id NUMBER, order_item_id NUMBER, product_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show all product names.",
        "query": "SELECT product_name FROM products",
        "schema": "CREATE TABLE Invoice_Line_Items (product_title TEXT, product_id NUMBER); CREATE TABLE Products (product_name TEXT, product_id NUMBER); CREATE TABLE Order_Items (product_id NUMBER);"
      },
      {
        "question": "For each of them, what is the number of order items on each?",
        "query": "SELECT t2.product_name , count(*) FROM order_items AS t1 JOIN products AS t2 ON t1.product_id = t2.product_id JOIN orders AS t3 ON t3.order_id = t1.order_id GROUP BY t2.product_name",
        "schema": "CREATE TABLE Orders (order_details TEXT, order_id NUMBER); CREATE TABLE Invoices (invoice_number NUMBER, order_id NUMBER); CREATE TABLE Products (product_id NUMBER, product_name TEXT); CREATE TABLE Order_Items (other_order_item_details TEXT, order_id NUMBER, order_item_id NUMBER, product_id NUMBER, product_quantity TEXT); CREATE TABLE Invoice_Line_Items (order_item_id NUMBER, invoice_number NUMBER, product_title TEXT, product_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show the order id for all order items.",
        "query": "SELECT order_id FROM order_items",
        "schema": "CREATE TABLE Orders (customer_id NUMBER, order_details TEXT, order_id NUMBER); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Products (product_name TEXT, product_id NUMBER); CREATE TABLE Order_Items (order_id NUMBER, order_item_id NUMBER, product_id NUMBER, other_order_item_details TEXT); CREATE TABLE Accounts (account_id NUMBER, customer_id NUMBER); CREATE TABLE Invoices (invoice_number NUMBER, order_id NUMBER); CREATE TABLE Invoice_Line_Items (order_item_id NUMBER);"
      },
      {
        "question": "Also show the product id.",
        "query": "SELECT order_id, product_id FROM order_items",
        "schema": "CREATE TABLE Invoice_Line_Items (product_id NUMBER, order_item_id NUMBER); CREATE TABLE Accounts (customer_id NUMBER, account_id NUMBER); CREATE TABLE Invoices (invoice_number NUMBER, order_id NUMBER); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Products (product_id NUMBER, product_name TEXT); CREATE TABLE Order_Items (product_id NUMBER, order_item_id NUMBER, order_id NUMBER, other_order_item_details TEXT); CREATE TABLE Orders (customer_id NUMBER, order_id NUMBER, order_details TEXT);"
      },
      {
        "question": "For each order, show the number of products.",
        "query": "SELECT order_id , count(DISTINCT product_id) FROM order_items GROUP BY order_id",
        "schema": "CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Invoice_Line_Items (order_item_id NUMBER, product_id NUMBER); CREATE TABLE Invoices (invoice_number NUMBER, order_id NUMBER); CREATE TABLE Products (product_name TEXT, product_id NUMBER); CREATE TABLE Accounts (account_id NUMBER, customer_id NUMBER); CREATE TABLE Order_Items (order_id NUMBER, other_order_item_details TEXT, product_quantity TEXT, order_item_id NUMBER, product_id NUMBER); CREATE TABLE Orders (customer_id NUMBER, order_details TEXT, order_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show the order id for each order item.",
        "query": "SELECT order_id FROM order_items",
        "schema": "CREATE TABLE Invoices (invoice_number NUMBER, order_id NUMBER); CREATE TABLE Invoice_Line_Items (order_item_id NUMBER); CREATE TABLE Products (product_id NUMBER); CREATE TABLE Accounts (account_id NUMBER, customer_id NUMBER); CREATE TABLE Order_Items (order_item_id NUMBER, order_id NUMBER, product_id NUMBER, other_order_item_details TEXT); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Orders (order_id NUMBER, customer_id NUMBER, order_details TEXT);"
      },
      {
        "question": "For each of those items, also show the product quantities.",
        "query": "SELECT order_id , product_quantity FROM order_items",
        "schema": "CREATE TABLE Orders (order_id NUMBER, order_details TEXT, customer_id NUMBER); CREATE TABLE Products (product_id NUMBER); CREATE TABLE Invoices (order_id NUMBER, invoice_number NUMBER); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Accounts (customer_id NUMBER, account_id NUMBER); CREATE TABLE Order_Items (product_id NUMBER, other_order_item_details TEXT, product_quantity TEXT, order_item_id NUMBER, order_id NUMBER); CREATE TABLE Invoice_Line_Items (order_item_id NUMBER, product_quantity TEXT, product_id NUMBER);"
      },
      {
        "question": "For each order, what is the total quantity?",
        "query": "SELECT order_id , sum(product_quantity) FROM order_items GROUP BY order_id",
        "schema": "CREATE TABLE Invoices (order_id NUMBER, invoice_number NUMBER); CREATE TABLE Accounts (account_id NUMBER, customer_id NUMBER); CREATE TABLE Orders (customer_id NUMBER, order_details TEXT, order_id NUMBER); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Products (product_id NUMBER); CREATE TABLE Invoice_Line_Items (product_id NUMBER, order_item_id NUMBER, product_quantity TEXT); CREATE TABLE Order_Items (order_item_id NUMBER, other_order_item_details TEXT, product_quantity TEXT, order_id NUMBER, product_id NUMBER);"
      }
    ]
  ],
  "department_management": [
    [
      {
        "question": "Show all information about department heads.",
        "query": "SELECT * FROM head",
        "schema": "CREATE TABLE department (Name TEXT, Creation TEXT, Num_Employees NUMBER, Department_ID NUMBER); CREATE TABLE management (department_ID NUMBER, head_ID NUMBER); CREATE TABLE head (name TEXT, head_ID NUMBER);"
      },
      {
        "question": "How many heads of departments are there?",
        "query": "SELECT count(*) FROM head",
        "schema": "CREATE TABLE department (Num_Employees NUMBER, Department_ID NUMBER, Creation TEXT, Name TEXT); CREATE TABLE head (name TEXT, head_ID NUMBER); CREATE TABLE management (department_ID NUMBER, head_ID NUMBER);"
      },
      {
        "question": "How many heads of department are older than 56?",
        "query": "SELECT count(*) FROM head WHERE age > 56",
        "schema": "CREATE TABLE department (Creation TEXT, Name TEXT, Department_ID NUMBER, Num_Employees NUMBER); CREATE TABLE management (department_ID NUMBER, head_ID NUMBER); CREATE TABLE head (age NUMBER, born_state TEXT, head_ID NUMBER, name TEXT);"
      }
    ],
    [
      {
        "question": "Show the names of the heads of departments.",
        "query": "SELECT name FROM head",
        "schema": "CREATE TABLE department (Creation TEXT, Department_ID NUMBER, Num_Employees NUMBER, Name TEXT); CREATE TABLE head (name TEXT, head_ID NUMBER); CREATE TABLE management (head_ID NUMBER, department_ID NUMBER);"
      },
      {
        "question": "Show the state where each department head was born.",
        "query": "SELECT born_state FROM head",
        "schema": "CREATE TABLE management (department_ID NUMBER, head_ID NUMBER); CREATE TABLE department (Num_Employees NUMBER, Department_ID NUMBER, Name TEXT, Creation TEXT); CREATE TABLE head (name TEXT, head_ID NUMBER, born_state TEXT, age NUMBER);"
      },
      {
        "question": "Show the age of the heads of departments.",
        "query": "SELECT age FROM head",
        "schema": "CREATE TABLE head (name TEXT, age NUMBER, head_ID NUMBER, born_state TEXT); CREATE TABLE department (Name TEXT, Creation TEXT, Department_ID NUMBER, Num_Employees NUMBER); CREATE TABLE management (head_ID NUMBER, department_ID NUMBER);"
      },
      {
        "question": "Please order this information by heads' ages.",
        "query": "SELECT name , born_state , age FROM head ORDER BY age",
        "schema": "CREATE TABLE department (Name TEXT, Creation TEXT, Department_ID NUMBER, Num_Employees NUMBER); CREATE TABLE head (name TEXT, age NUMBER, head_ID NUMBER, born_state TEXT); CREATE TABLE management (head_ID NUMBER, department_ID NUMBER);"
      }
    ],
    [
      {
        "question": "List the creation year of each department.",
        "query": "SELECT creation FROM department",
        "schema": "CREATE TABLE department (Name TEXT, Creation TEXT, Department_ID NUMBER);"
      },
      {
        "question": "List the name of each department.",
        "query": "SELECT name FROM department",
        "schema": "CREATE TABLE department (Name TEXT, Creation TEXT, Department_ID NUMBER);"
      },
      {
        "question": "List the budget of each department.",
        "query": "SELECT budget_in_billions FROM department",
        "schema": "CREATE TABLE department (Creation TEXT, Budget_in_Billions NUMBER, Department_ID NUMBER, Name TEXT);"
      },
      {
        "question": "List the creation year, name and budget of each department.",
        "query": "SELECT creation , name , budget_in_billions FROM department",
        "schema": "CREATE TABLE department (Creation TEXT, Department_ID NUMBER, Name TEXT, Budget_in_Billions NUMBER);"
      }
    ],
    [
      {
        "question": "List the budget of each department.",
        "query": "SELECT budget_in_billions FROM department",
        "schema": "CREATE TABLE management (department_ID NUMBER); CREATE TABLE department (Department_ID NUMBER, Num_Employees NUMBER, Name TEXT, Creation TEXT, Budget_in_Billions NUMBER);"
      },
      {
        "question": "What are the maximum and minimum budget of the departments?",
        "query": "SELECT max(budget_in_billions) , min(budget_in_billions) FROM department",
        "schema": "CREATE TABLE department (Budget_in_Billions NUMBER, Department_ID NUMBER, Creation TEXT, Num_Employees NUMBER, Name TEXT); CREATE TABLE management (department_ID NUMBER);"
      }
    ],
    [
      {
        "question": "How many employees does each department have?",
        "query": "SELECT num_employees FROM department",
        "schema": "CREATE TABLE head (head_ID NUMBER, name TEXT); CREATE TABLE management (department_ID NUMBER, head_ID NUMBER); CREATE TABLE department (Creation TEXT, Name TEXT, Department_ID NUMBER, Num_Employees NUMBER);"
      },
      {
        "question": "What is the number of employees of the departments whose rank is between 10 and 15?",
        "query": "SELECT num_employees FROM department WHERE ranking BETWEEN 10 AND 15",
        "schema": "CREATE TABLE management (department_ID NUMBER, head_ID NUMBER); CREATE TABLE head (head_ID NUMBER, name TEXT, age NUMBER); CREATE TABLE department (Name TEXT, Department_ID NUMBER, Creation TEXT, Num_Employees NUMBER, Ranking NUMBER);"
      },
      {
        "question": "What is the average number of employees of these departments?",
        "query": "SELECT avg(num_employees) FROM department WHERE ranking BETWEEN 10 AND 15",
        "schema": "CREATE TABLE management (head_ID NUMBER, department_ID NUMBER); CREATE TABLE department (Creation TEXT, Num_Employees NUMBER, Department_ID NUMBER, Name TEXT, Ranking NUMBER); CREATE TABLE head (age NUMBER, head_ID NUMBER, name TEXT);"
      }
    ],
    [
      {
        "question": "Show all the names of the department heads.",
        "query": "SELECT name FROM head",
        "schema": "CREATE TABLE department (Department_ID NUMBER, Num_Employees NUMBER, Creation TEXT, Name TEXT); CREATE TABLE management (department_ID NUMBER, head_ID NUMBER); CREATE TABLE head (head_ID NUMBER, name TEXT);"
      },
      {
        "question": "Among these department heads, who was born outside California?",
        "query": "SELECT name FROM head WHERE born_state != 'California'",
        "schema": "CREATE TABLE department (Creation TEXT, Department_ID NUMBER, Name TEXT, Num_Employees NUMBER); CREATE TABLE head (born_state TEXT, head_ID NUMBER, name TEXT, age NUMBER); CREATE TABLE management (department_ID NUMBER, head_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What are the creation years of the departments?",
        "query": "SELECT creation FROM department",
        "schema": "CREATE TABLE department (Creation TEXT, Department_ID NUMBER, Name TEXT);"
      },
      {
        "question": "Which secretaries were born in Alabama?",
        "query": "SELECT * FROM head WHERE born_state = 'Alabama'",
        "schema": "CREATE TABLE management (head_ID NUMBER, department_ID NUMBER); CREATE TABLE department (Creation TEXT, Name TEXT, Num_Employees NUMBER, Department_ID NUMBER); CREATE TABLE head (born_state TEXT, name TEXT, age NUMBER, head_ID NUMBER);"
      },
      {
        "question": "What are the distinct creation years of the departments managed by a secretary born in state 'Alabama'?",
        "query": "SELECT DISTINCT t1.creation FROM department AS t1 JOIN management AS t2 ON t1.department_id = t2.department_id JOIN head AS t3 ON t2.head_id = t3.head_id WHERE t3.born_state = 'Alabama'",
        "schema": "CREATE TABLE head (head_ID NUMBER, born_state TEXT, age NUMBER, name TEXT); CREATE TABLE management (department_ID NUMBER, head_ID NUMBER); CREATE TABLE department (Name TEXT, Department_ID NUMBER, Num_Employees NUMBER, Creation TEXT);"
      }
    ],
    [
      {
        "question": "What are the names of the states where department heads were born?",
        "query": "SELECT born_state FROM head",
        "schema": "CREATE TABLE head (head_ID NUMBER, name TEXT, born_state TEXT, age NUMBER); CREATE TABLE management (head_ID NUMBER, department_ID NUMBER); CREATE TABLE department (Name TEXT, Creation TEXT, Department_ID NUMBER, Num_Employees NUMBER);"
      },
      {
        "question": "How many heads were born in each state?",
        "query": "SELECT born_state, count(*) FROM head GROUP BY born_state",
        "schema": "CREATE TABLE department (Creation TEXT, Department_ID NUMBER, Num_Employees NUMBER, Name TEXT); CREATE TABLE management (head_ID NUMBER, department_ID NUMBER); CREATE TABLE head (born_state TEXT, age NUMBER, head_ID NUMBER, name TEXT);"
      },
      {
        "question": "What are the names of the states where at least 3 heads were born?",
        "query": "SELECT born_state FROM head GROUP BY born_state HAVING count(*) >= 3",
        "schema": "CREATE TABLE management (head_ID NUMBER, department_ID NUMBER); CREATE TABLE department (Name TEXT, Department_ID NUMBER, Num_Employees NUMBER, Creation TEXT); CREATE TABLE head (born_state TEXT, name TEXT, head_ID NUMBER, age NUMBER);"
      }
    ],
    [
      {
        "question": "What are the years in which departments were established?",
        "query": "SELECT creation FROM department GROUP BY creation",
        "schema": "CREATE TABLE department (Department_ID NUMBER, Creation TEXT, Name TEXT);"
      },
      {
        "question": "In which year were the most departments established?",
        "query": "SELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE department (Creation TEXT, Name TEXT, Department_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show the names and number of employees of each department.",
        "query": "SELECT name , num_employees FROM department",
        "schema": "CREATE TABLE department (Num_Employees NUMBER, Creation TEXT, Name TEXT, Department_ID NUMBER); CREATE TABLE head (head_ID NUMBER, name TEXT); CREATE TABLE management (head_ID NUMBER, department_ID NUMBER);"
      },
      {
        "question": "Who are the department heads whose temporary acting value is \"Yes\"?",
        "query": "SELECT * FROM management WHERE temporary_acting = 'Yes'",
        "schema": "CREATE TABLE head (name TEXT, head_ID NUMBER); CREATE TABLE department (Name TEXT, Creation TEXT, Num_Employees NUMBER, Department_ID NUMBER); CREATE TABLE management (department_ID NUMBER, head_ID NUMBER, temporary_acting TEXT);"
      },
      {
        "question": "Show the name and number of employees for the departments managed by heads whose temporary acting value is 'Yes'.",
        "query": "SELECT t1.name , t1.num_employees FROM department AS t1 JOIN management AS t2 ON t1.department_id = t2.department_id WHERE t2.temporary_acting = 'Yes'",
        "schema": "CREATE TABLE department (Num_Employees NUMBER, Department_ID NUMBER, Name TEXT, Creation TEXT); CREATE TABLE management (temporary_acting TEXT, head_ID NUMBER, department_ID NUMBER); CREATE TABLE head (name TEXT, head_ID NUMBER);"
      }
    ],
    [
      {
        "question": "List the acting statuses.",
        "query": "SELECT temporary_acting FROM management",
        "schema": "CREATE TABLE head (head_ID NUMBER); CREATE TABLE department (Department_ID NUMBER); CREATE TABLE management (department_ID NUMBER, head_ID NUMBER, temporary_acting TEXT);"
      },
      {
        "question": "How many acting statuses are there?",
        "query": "SELECT count(DISTINCT temporary_acting) FROM management",
        "schema": "CREATE TABLE department (Department_ID NUMBER); CREATE TABLE head (head_ID NUMBER); CREATE TABLE management (department_ID NUMBER, head_ID NUMBER, temporary_acting TEXT);"
      }
    ],
    [
      {
        "question": "How many departments are there?",
        "query": "SELECT count(*) FROM department",
        "schema": "CREATE TABLE head (head_ID NUMBER); CREATE TABLE management (head_ID NUMBER, department_ID NUMBER); CREATE TABLE department (Name TEXT, Ranking NUMBER, Creation TEXT, Department_ID NUMBER, Num_Employees NUMBER);"
      },
      {
        "question": "How many departments are led by heads who are mentioned in the database?",
        "query": "SELECT count(*) FROM department WHERE department_id IN (SELECT department_id FROM management);",
        "schema": "CREATE TABLE management (department_ID NUMBER, head_ID NUMBER); CREATE TABLE department (Name TEXT, Ranking NUMBER, Creation TEXT, Department_ID NUMBER, Num_Employees NUMBER); CREATE TABLE head (head_ID NUMBER, name TEXT);"
      },
      {
        "question": "How many departments are led by heads who are not mentioned?",
        "query": "SELECT count(*) FROM department WHERE department_id NOT IN (SELECT department_id FROM management);",
        "schema": "CREATE TABLE management (department_ID NUMBER, head_ID NUMBER); CREATE TABLE department (Creation TEXT, Department_ID NUMBER, Num_Employees NUMBER, Ranking NUMBER, Name TEXT); CREATE TABLE head (head_ID NUMBER, name TEXT);"
      }
    ],
    [
      {
        "question": "What are the dictinct ages of the department heads?",
        "query": "SELECT DISTINCT t1.age FROM management AS t2 JOIN head AS t1 ON t1.head_id = t2.head_id",
        "schema": "CREATE TABLE management (department_ID NUMBER, head_ID NUMBER); CREATE TABLE department (Department_ID NUMBER, Num_Employees NUMBER, Name TEXT); CREATE TABLE head (age NUMBER, name TEXT, head_ID NUMBER);"
      },
      {
        "question": "List the ages of the heads who are acting.",
        "query": "SELECT DISTINCT t1.age FROM management AS t2 JOIN head AS t1 ON t1.head_id = t2.head_id WHERE t2.temporary_acting = 'Yes'",
        "schema": "CREATE TABLE head (name TEXT, head_ID NUMBER, age NUMBER); CREATE TABLE management (head_ID NUMBER, department_ID NUMBER, temporary_acting TEXT); CREATE TABLE department (Department_ID NUMBER, Name TEXT, Num_Employees NUMBER);"
      }
    ],
    [
      {
        "question": "List the states where each secretary was born.",
        "query": "SELECT DISTINCT born_state FROM head",
        "schema": "CREATE TABLE head (name TEXT, head_ID NUMBER, age NUMBER, born_state TEXT); CREATE TABLE department (Department_ID NUMBER); CREATE TABLE management (department_ID NUMBER, head_ID NUMBER);"
      },
      {
        "question": "List the information of the secretary of 'Treasury' department and the secretary of 'Homeland Security' department.",
        "query": "SELECT t3.name, t3.born_state FROM department AS t1 JOIN management AS t2 ON t1.department_id = t2.department_id JOIN head AS t3 ON t2.head_id = t3.head_id WHERE t1.name = 'Treasury' OR t1.name = 'Homeland Security'",
        "schema": "CREATE TABLE department (Name TEXT, Ranking NUMBER, Num_Employees NUMBER, Department_ID NUMBER, Creation TEXT); CREATE TABLE management (head_ID NUMBER, department_ID NUMBER); CREATE TABLE head (name TEXT, age NUMBER, born_state TEXT, head_ID NUMBER);"
      },
      {
        "question": "List the states where both the secretary of 'Treasury' department and the secretary of 'Homeland Security' were born.",
        "query": "SELECT t3.born_state FROM department AS t1 JOIN management AS t2 ON t1.department_id = t2.department_id JOIN head AS t3 ON t2.head_id = t3.head_id WHERE t1.name = 'Treasury' INTERSECT SELECT t3.born_state FROM department AS t1 JOIN management AS t2 ON t1.department_id = t2.department_id JOIN head AS t3 ON t2.head_id = t3.head_id WHERE t1.name = 'Homeland Security'",
        "schema": "CREATE TABLE head (age NUMBER, name TEXT, born_state TEXT, head_ID NUMBER); CREATE TABLE department (Creation TEXT, Name TEXT, Department_ID NUMBER, Num_Employees NUMBER, Ranking NUMBER); CREATE TABLE management (department_ID NUMBER, head_ID NUMBER);"
      }
    ],
    [
      {
        "question": "How many heads does each department have?",
        "query": "SELECT t1.name , count(*) FROM management AS t2 JOIN department AS t1 ON t1.department_id = t2.department_id GROUP BY t1.department_id",
        "schema": "CREATE TABLE department (Num_Employees NUMBER, Creation TEXT, Department_ID NUMBER, Name TEXT); CREATE TABLE head (name TEXT, head_ID NUMBER); CREATE TABLE management (head_ID NUMBER, department_ID NUMBER);"
      },
      {
        "question": "Which department has more than 1 head at a time?",
        "query": "SELECT t1.department_id , t1.name FROM management AS t2 JOIN department AS t1 ON t1.department_id = t2.department_id GROUP BY t1.department_id HAVING count(*) > 1",
        "schema": "CREATE TABLE management (department_ID NUMBER, head_ID NUMBER); CREATE TABLE department (Creation TEXT, Num_Employees NUMBER, Name TEXT, Department_ID NUMBER); CREATE TABLE head (head_ID NUMBER, name TEXT);"
      },
      {
        "question": "List the id, name and the number of heads of these departments.",
        "query": "SELECT t1.department_id , t1.name , count(*) FROM management AS t2 JOIN department AS t1 ON t1.department_id = t2.department_id GROUP BY t1.department_id HAVING count(*) > 1",
        "schema": "CREATE TABLE department (Department_ID NUMBER, Creation TEXT, Num_Employees NUMBER, Name TEXT); CREATE TABLE management (head_ID NUMBER, department_ID NUMBER); CREATE TABLE head (name TEXT, head_ID NUMBER);"
      }
    ]
  ],
  "city_record": [
    [
      {
        "question": "How many cities are there",
        "query": "SELECT count(*) FROM city",
        "schema": "CREATE TABLE temperature (City_ID NUMBER); CREATE TABLE match (Match_ID NUMBER); CREATE TABLE city (Hanzi TEXT, City_ID NUMBER, City TEXT, Regional_Population NUMBER); CREATE TABLE hosting_city (Host_City TEXT, Match_ID NUMBER);"
      },
      {
        "question": "How many cities have hosted events?",
        "query": "SELECT count(DISTINCT city) FROM city AS t1 JOIN hosting_city AS t2 ON t1.city_id = t2.host_city",
        "schema": "CREATE TABLE match (Match_ID NUMBER); CREATE TABLE city (Hanzi TEXT, City TEXT, City_ID NUMBER, Regional_Population NUMBER); CREATE TABLE temperature (City_ID NUMBER); CREATE TABLE hosting_city (Host_City TEXT, Match_ID NUMBER);"
      },
      {
        "question": "Wihch city hosted events in the most recent year?",
        "query": "SELECT t1.city FROM city AS t1 JOIN hosting_city AS t2 ON t1.city_id = t2.host_city ORDER BY YEAR DESC LIMIT 1",
        "schema": "CREATE TABLE city (City_ID NUMBER, City TEXT, Hanzi TEXT, Regional_Population NUMBER); CREATE TABLE temperature (City_ID NUMBER); CREATE TABLE match (Match_ID NUMBER); CREATE TABLE hosting_city (Year NUMBER, Host_City TEXT, Match_ID NUMBER);"
      },
      {
        "question": "Show its id.",
        "query": "SELECT host_city FROM hosting_city ORDER BY YEAR DESC LIMIT 1",
        "schema": "CREATE TABLE city (City_ID NUMBER, Regional_Population NUMBER, Hanzi TEXT, City TEXT); CREATE TABLE hosting_city (Match_ID NUMBER, Year NUMBER, Host_City TEXT); CREATE TABLE match (Match_ID NUMBER, Competition TEXT); CREATE TABLE temperature (City_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show the names of the cities.",
        "query": "SELECT city FROM city",
        "schema": "CREATE TABLE temperature (City_ID NUMBER); CREATE TABLE city (City_ID NUMBER, City TEXT); CREATE TABLE hosting_city (Host_City TEXT, Match_ID NUMBER); CREATE TABLE match (Match_ID NUMBER);"
      },
      {
        "question": "Which of them were a host city after 2008?",
        "query": "SELECT t1.city FROM city AS t1 JOIN hosting_city AS t2 ON t1.city_id = t2.host_city WHERE t2.year > 2008",
        "schema": "CREATE TABLE temperature (City_ID NUMBER); CREATE TABLE match (Match_ID NUMBER); CREATE TABLE city (City TEXT, City_ID NUMBER); CREATE TABLE hosting_city (Year NUMBER, Match_ID NUMBER, Host_City TEXT);"
      },
      {
        "question": "How about the cities that were a host city after 2010?",
        "query": "SELECT t1.city FROM city AS t1 JOIN hosting_city AS t2 ON t1.city_id = t2.host_city WHERE t2.year > 2010",
        "schema": "CREATE TABLE hosting_city (Match_ID NUMBER, Host_City TEXT, Year NUMBER); CREATE TABLE city (City_ID NUMBER, City TEXT); CREATE TABLE temperature (City_ID NUMBER); CREATE TABLE match (Match_ID NUMBER);"
      }
    ],
    [
      {
        "question": "How many cities have hosted events?",
        "query": "SELECT count(DISTINCT city) FROM city AS t1 JOIN hosting_city AS t2 ON t1.city_id = t2.host_city",
        "schema": "CREATE TABLE temperature (City_ID NUMBER); CREATE TABLE match (Venue TEXT, Match_ID NUMBER); CREATE TABLE hosting_city (Match_ID NUMBER, Host_City TEXT); CREATE TABLE city (City_ID NUMBER, City TEXT);"
      },
      {
        "question": "For each city, how many events has it hosted?",
        "query": "SELECT t1.city, count(*) FROM city AS t1 JOIN hosting_city AS t2 ON t1.city_id = t2.host_city GROUP BY t2.host_city",
        "schema": "CREATE TABLE hosting_city (Match_ID NUMBER, Host_City TEXT); CREATE TABLE match (Match_ID NUMBER, Venue TEXT, Competition TEXT); CREATE TABLE city (City_ID NUMBER, City TEXT); CREATE TABLE temperature (City_ID NUMBER);"
      },
      {
        "question": "Which city has hosted the most events?",
        "query": "SELECT t1.city FROM city AS t1 JOIN hosting_city AS t2 ON t1.city_id = t2.host_city GROUP BY t2.host_city ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE city (City_ID NUMBER, City TEXT); CREATE TABLE temperature (City_ID NUMBER); CREATE TABLE hosting_city (Host_City TEXT, Match_ID NUMBER); CREATE TABLE match (Competition TEXT, Match_ID NUMBER, Venue TEXT);"
      }
    ],
    [
      {
        "question": "How many events has \"Nanjing ( Jiangsu )\" hosted?",
        "query": "SELECT count(*) FROM city AS t1 JOIN hosting_city AS t2 ON t1.city_id = t2.host_city WHERE city = \"Nanjing ( Jiangsu )\"",
        "schema": "CREATE TABLE match (Match_ID NUMBER, Venue TEXT, Competition TEXT); CREATE TABLE hosting_city (Host_City TEXT, Match_ID NUMBER); CREATE TABLE city (City TEXT, City_ID NUMBER);"
      },
      {
        "question": "What is the date of the competition \"1994 FIFA World Cup qualification\" hosted by \"Nanjing ( Jiangsu )\"?",
        "query": "SELECT t3.date FROM city AS t1 JOIN hosting_city AS t2 ON t1.city_id = t2.host_city JOIN MATCH AS t3 ON t2.match_id = t3.match_id WHERE t1.city = \"Nanjing ( Jiangsu )\" AND t3.competition = \"1994 FIFA World Cup qualification\"",
        "schema": "CREATE TABLE match (Date TEXT, Match_ID NUMBER, Venue TEXT, Competition TEXT); CREATE TABLE city (City TEXT, City_ID NUMBER); CREATE TABLE hosting_city (Match_ID NUMBER, Host_City TEXT, Year NUMBER);"
      },
      {
        "question": "How about the venue?",
        "query": "SELECT t3.venue FROM city AS t1 JOIN hosting_city AS t2 ON t1.city_id = t2.host_city JOIN MATCH AS t3 ON t2.match_id = t3.match_id WHERE t1.city = \"Nanjing ( Jiangsu )\" AND t3.competition = \"1994 FIFA World Cup qualification\"",
        "schema": "CREATE TABLE hosting_city (Host_City TEXT, Match_ID NUMBER, Year NUMBER); CREATE TABLE match (Competition TEXT, Match_ID NUMBER, Venue TEXT, Date TEXT); CREATE TABLE city (City TEXT, City_ID NUMBER);"
      }
    ],
    [
      {
        "question": "How many events has \"Shanghai\" hosted?",
        "query": "SELECT count(*) FROM city AS t1 JOIN hosting_city AS t2 ON t1.city_id = t2.host_city WHERE city = \"Shanghai\"",
        "schema": "CREATE TABLE city (City TEXT, City_ID NUMBER); CREATE TABLE match (Match_ID NUMBER, Competition TEXT, Venue TEXT); CREATE TABLE hosting_city (Host_City TEXT, Match_ID NUMBER);"
      },
      {
        "question": "Give me the temperature of Shanghai in March.",
        "query": "SELECT t2.mar FROM city AS t1 JOIN temperature AS t2 ON t1.city_id = t2.city_id WHERE t1.city = \"Shanghai\"",
        "schema": "CREATE TABLE temperature (Apr NUMBER, City_ID NUMBER, Nov NUMBER, Oct NUMBER, Jan NUMBER, Mar NUMBER, Feb NUMBER); CREATE TABLE hosting_city (Host_City TEXT, Match_ID NUMBER); CREATE TABLE match (Competition TEXT, Match_ID NUMBER, Venue TEXT); CREATE TABLE city (City_ID NUMBER, City TEXT);"
      },
      {
        "question": "How about the temperature in January?",
        "query": "SELECT t2.jan FROM city AS t1 JOIN temperature AS t2 ON t1.city_id = t2.city_id WHERE t1.city = \"Shanghai\"",
        "schema": "CREATE TABLE match (Competition TEXT, Match_ID NUMBER, Venue TEXT); CREATE TABLE temperature (Oct NUMBER, Nov NUMBER, Jan NUMBER, Feb NUMBER, Mar NUMBER, City_ID NUMBER, Apr NUMBER); CREATE TABLE city (City TEXT, City_ID NUMBER); CREATE TABLE hosting_city (Match_ID NUMBER, Host_City TEXT);"
      }
    ],
    [
      {
        "question": "How many events has \"Taizhou ( Zhejiang )\" hosted?",
        "query": "SELECT count(*) FROM city AS t1 JOIN hosting_city AS t2 ON t1.city_id = t2.host_city WHERE city = \"Taizhou ( Zhejiang )\"",
        "schema": "CREATE TABLE hosting_city (Host_City TEXT, Match_ID NUMBER); CREATE TABLE match (Venue TEXT, Competition TEXT, Match_ID NUMBER); CREATE TABLE city (City_ID NUMBER, City TEXT);"
      },
      {
        "question": "What event did it host?",
        "query": "SELECT t3.competition FROM city AS t1 JOIN hosting_city AS t2 ON t1.city_id = t2.host_city JOIN MATCH AS t3 ON t2.match_id = t3.match_id WHERE t1.city = \"Taizhou ( Zhejiang )\"",
        "schema": "CREATE TABLE match (Match_ID NUMBER, Venue TEXT, Competition TEXT); CREATE TABLE hosting_city (Match_ID NUMBER, Host_City TEXT); CREATE TABLE city (City TEXT, City_ID NUMBER);"
      },
      {
        "question": "What is the host year of this city?",
        "query": "SELECT t2.year FROM city AS t1 JOIN hosting_city AS t2 ON t1.city_id = t2.host_city WHERE t1.city = \"Taizhou ( Zhejiang )\"",
        "schema": "CREATE TABLE city (City TEXT, City_ID NUMBER); CREATE TABLE hosting_city (Host_City TEXT, Match_ID NUMBER, Year NUMBER); CREATE TABLE match (Competition TEXT, Venue TEXT, Match_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What is the average regional population?",
        "query": "SELECT avg(regional_population) FROM city",
        "schema": "CREATE TABLE city (City TEXT, Regional_Population NUMBER, City_ID NUMBER);"
      },
      {
        "question": "Which city has the largest regional population?",
        "query": "SELECT city FROM city ORDER BY regional_population DESC LIMIT 1",
        "schema": "CREATE TABLE city (City_ID NUMBER, City TEXT, Regional_Population NUMBER);"
      },
      {
        "question": "What are the top three cities with the largest regional population?",
        "query": "SELECT city FROM city ORDER BY regional_population DESC LIMIT 3",
        "schema": "CREATE TABLE city (Regional_Population NUMBER, City_ID NUMBER, City TEXT);"
      }
    ],
    [
      {
        "question": "What is the average GDP among all cities?",
        "query": "SELECT avg(gdp) FROM city",
        "schema": "CREATE TABLE city (Regional_Population NUMBER, GDP NUMBER, City_ID NUMBER, City TEXT);"
      },
      {
        "question": "What is the minimum GDP?",
        "query": "SELECT gdp FROM city ORDER BY gdp LIMIT 1",
        "schema": "CREATE TABLE city (City TEXT, GDP NUMBER, Regional_Population NUMBER, City_ID NUMBER);"
      },
      {
        "question": "Please also list the city name.",
        "query": "SELECT city , gdp FROM city ORDER BY gdp LIMIT 1",
        "schema": "CREATE TABLE city (City_ID NUMBER, GDP NUMBER, Regional_Population NUMBER, City TEXT);"
      }
    ],
    [
      {
        "question": "What is the average temperature in March?",
        "query": "SELECT avg(mar) FROM temperature",
        "schema": "CREATE TABLE city (City_ID NUMBER); CREATE TABLE match (Match_ID NUMBER); CREATE TABLE temperature (Nov NUMBER, City_ID NUMBER, Mar NUMBER, Aug NUMBER, Feb NUMBER, Jan NUMBER, Apr NUMBER, Oct NUMBER, Jun NUMBER, Jul NUMBER);"
      },
      {
        "question": "How about February?",
        "query": "SELECT avg(feb) FROM temperature",
        "schema": "CREATE TABLE match (Match_ID NUMBER); CREATE TABLE city (City_ID NUMBER); CREATE TABLE temperature (Aug NUMBER, Jan NUMBER, Oct NUMBER, Mar NUMBER, Jul NUMBER, Feb NUMBER, Nov NUMBER, City_ID NUMBER, Apr NUMBER, Jun NUMBER);"
      },
      {
        "question": "In this month, which city has the highest temperature?",
        "query": "SELECT t1.city FROM city AS t1 JOIN temperature AS t2 ON t1.city_id = t2.city_id ORDER BY t2.feb DESC LIMIT 1",
        "schema": "CREATE TABLE match (Match_ID NUMBER); CREATE TABLE city (City_ID NUMBER, City TEXT); CREATE TABLE temperature (Nov NUMBER, City_ID NUMBER, Feb NUMBER, Apr NUMBER, Mar NUMBER, Jan NUMBER, Aug NUMBER, Jun NUMBER, Oct NUMBER, Jul NUMBER);"
      }
    ],
    [
      {
        "question": "What is the average temperature of all cities in October?",
        "query": "SELECT avg(oct) FROM temperature",
        "schema": "CREATE TABLE city (City_ID NUMBER, City TEXT); CREATE TABLE temperature (Jun NUMBER, City_ID NUMBER, Oct NUMBER, Jul NUMBER, Feb NUMBER, Mar NUMBER, Aug NUMBER, Nov NUMBER, Jan NUMBER, Apr NUMBER); CREATE TABLE match (Match_ID NUMBER);"
      },
      {
        "question": "How many cities are there whose temperature in March is lower than that in July ?",
        "query": "SELECT count(*) FROM city AS t1 JOIN temperature AS t2 ON t1.city_id = t2.city_id WHERE t2.mar < t2.jul",
        "schema": "CREATE TABLE match (Match_ID NUMBER); CREATE TABLE city (City_ID NUMBER, Regional_Population NUMBER, City TEXT); CREATE TABLE temperature (Jul NUMBER, City_ID NUMBER, Jan NUMBER, Oct NUMBER, Jun NUMBER, Feb NUMBER, Nov NUMBER, Apr NUMBER, Mar NUMBER, Aug NUMBER);"
      },
      {
        "question": "What are the city names?",
        "query": "SELECT t1.city FROM city AS t1 JOIN temperature AS t2 ON t1.city_id = t2.city_id WHERE t2.mar < t2.jul",
        "schema": "CREATE TABLE city (City_ID NUMBER, City TEXT, Regional_Population NUMBER); CREATE TABLE temperature (Mar NUMBER, Jun NUMBER, Jul NUMBER, Jan NUMBER, Apr NUMBER, City_ID NUMBER, Feb NUMBER, Aug NUMBER, Oct NUMBER, Nov NUMBER); CREATE TABLE match (Match_ID NUMBER);"
      },
      {
        "question": "Please also show cities whose temperature in March is higher than that in Oct.",
        "query": "SELECT t1.city FROM city AS t1 JOIN temperature AS t2 ON t1.city_id = t2.city_id WHERE t2.mar < t2.jul OR t2.mar > t2.oct",
        "schema": "CREATE TABLE city (Regional_Population NUMBER, City_ID NUMBER, City TEXT); CREATE TABLE match (Match_ID NUMBER); CREATE TABLE temperature (Jun NUMBER, Oct NUMBER, Mar NUMBER, Jan NUMBER, Aug NUMBER, Apr NUMBER, Feb NUMBER, City_ID NUMBER, Nov NUMBER, Jul NUMBER);"
      }
    ],
    [
      {
        "question": "Which cities have hosted events?",
        "query": "SELECT city FROM city AS t1 JOIN hosting_city AS t2 ON t1.city_id = t2.host_city",
        "schema": "CREATE TABLE hosting_city (Host_City TEXT, Match_ID NUMBER); CREATE TABLE match (Match_ID NUMBER, Competition TEXT, Venue TEXT); CREATE TABLE temperature (City_ID NUMBER); CREATE TABLE city (City TEXT, City_ID NUMBER);"
      },
      {
        "question": "What is the average temperature in March of these cities?",
        "query": "SELECT avg(mar) FROM city AS t1 JOIN hosting_city AS t2 ON t1.city_id = t2.host_city JOIN temperature AS t3 ON t3.city_id = t2.host_city",
        "schema": "CREATE TABLE city (City_ID NUMBER, City TEXT); CREATE TABLE temperature (City_ID NUMBER, Mar NUMBER, Jan NUMBER, Jun NUMBER, Nov NUMBER, Oct NUMBER, Feb NUMBER, Apr NUMBER, Aug NUMBER); CREATE TABLE hosting_city (Host_City TEXT, Match_ID NUMBER); CREATE TABLE match (Venue TEXT, Match_ID NUMBER, Competition TEXT);"
      },
      {
        "question": "Among these cities, whose temperature in Mar is lower than that in July?",
        "query": "SELECT t1.city FROM city AS t1 JOIN temperature AS t2 ON t1.city_id = t2.city_id WHERE t2.mar < t2.jul INTERSECT SELECT t3.city FROM city AS t3 JOIN hosting_city AS t4 ON t3.city_id = t4.host_city",
        "schema": "CREATE TABLE match (Venue TEXT, Match_ID NUMBER, Competition TEXT); CREATE TABLE hosting_city (Match_ID NUMBER, Host_City TEXT); CREATE TABLE temperature (Jul NUMBER, Oct NUMBER, City_ID NUMBER, Nov NUMBER, Mar NUMBER, Jun NUMBER, Jan NUMBER, Aug NUMBER, Feb NUMBER, Apr NUMBER); CREATE TABLE city (City TEXT, City_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Which cities have never hosted an event?",
        "query": "SELECT city FROM city EXCEPT SELECT city FROM city AS t1 JOIN hosting_city AS t2 ON t1.city_id = t2.host_city",
        "schema": "CREATE TABLE hosting_city (Host_City TEXT, Match_ID NUMBER); CREATE TABLE city (City_ID NUMBER, City TEXT); CREATE TABLE match (Venue TEXT, Match_ID NUMBER); CREATE TABLE temperature (City_ID NUMBER);"
      },
      {
        "question": "What is the average temperature in Dec of these cities?",
        "query": "SELECT avg(DEC) FROM city AS t1 JOIN temperature AS t2 ON t1.city_id = t2.city_id EXCEPT SELECT t3.city FROM city AS t3 JOIN hosting_city AS t4 ON t3.city_id = t4.host_city",
        "schema": "CREATE TABLE hosting_city (Host_City TEXT, Match_ID NUMBER); CREATE TABLE match (Match_ID NUMBER, Venue TEXT); CREATE TABLE city (City TEXT, City_ID NUMBER); CREATE TABLE temperature (Nov NUMBER, Mar NUMBER, Jan NUMBER, Aug NUMBER, Apr NUMBER, Oct NUMBER, Feb NUMBER, Dec NUMBER, City_ID NUMBER);"
      },
      {
        "question": "How about the cities whose temperature in Mar is lower than that in Dec?",
        "query": "SELECT t1.city FROM city AS t1 JOIN temperature AS t2 ON t1.city_id = t2.city_id WHERE t2.mar < t2.dec EXCEPT SELECT t3.city FROM city AS t3 JOIN hosting_city AS t4 ON t3.city_id = t4.host_city",
        "schema": "CREATE TABLE temperature (Oct NUMBER, Feb NUMBER, Mar NUMBER, City_ID NUMBER, Dec NUMBER, Nov NUMBER, Aug NUMBER, Jan NUMBER, Apr NUMBER); CREATE TABLE city (City_ID NUMBER, City TEXT); CREATE TABLE match (Match_ID NUMBER, Venue TEXT); CREATE TABLE hosting_city (Match_ID NUMBER, Host_City TEXT);"
      }
    ],
    [
      {
        "question": "How many cities are there that were once host cities?",
        "query": "SELECT count(DISTINCT t1.city) FROM city AS t1 JOIN hosting_city AS t2 ON t1.city_id = t2.host_city",
        "schema": "CREATE TABLE city (City_ID NUMBER, City TEXT); CREATE TABLE match (Match_ID NUMBER); CREATE TABLE hosting_city (Year NUMBER, Host_City TEXT, Match_ID NUMBER);"
      },
      {
        "question": "How many cities are there whose temperature in Feb is higher than that in Jun?",
        "query": "SELECT count(*) FROM city AS t1 JOIN temperature AS t2 ON t1.city_id = t2.city_id WHERE t2.feb > t2.jun",
        "schema": "CREATE TABLE match (Match_ID NUMBER); CREATE TABLE city (City TEXT, City_ID NUMBER); CREATE TABLE temperature (Mar NUMBER, Jun NUMBER, Aug NUMBER, City_ID NUMBER, Oct NUMBER, Apr NUMBER, Feb NUMBER, Jan NUMBER); CREATE TABLE hosting_city (Host_City TEXT, Match_ID NUMBER, Year NUMBER);"
      },
      {
        "question": "Please list the city names of the above results.",
        "query": "SELECT t1.city FROM city AS t1 JOIN temperature AS t2 ON t1.city_id = t2.city_id WHERE t2.feb > t2.jun UNION SELECT t3.city FROM city AS t3 JOIN hosting_city AS t4 ON t3.city_id = t4.host_city",
        "schema": "CREATE TABLE city (City TEXT, City_ID NUMBER); CREATE TABLE temperature (Mar NUMBER, Aug NUMBER, Jun NUMBER, Jan NUMBER, Apr NUMBER, City_ID NUMBER, Oct NUMBER, Feb NUMBER); CREATE TABLE hosting_city (Host_City TEXT, Year NUMBER, Match_ID NUMBER); CREATE TABLE match (Match_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Which city has the smallest regional population?",
        "query": "SELECT city FROM city ORDER BY regional_population ASC LIMIT 1",
        "schema": "CREATE TABLE temperature (City_ID NUMBER); CREATE TABLE hosting_city (Host_City TEXT); CREATE TABLE city (City TEXT, City_ID NUMBER, Regional_Population NUMBER);"
      },
      {
        "question": "How many cities are there that have a regional population over 8000000 or under 5000000?",
        "query": "SELECT count(*) FROM city WHERE regional_population > 8000000 OR regional_population < 5000000",
        "schema": "CREATE TABLE temperature (City_ID NUMBER); CREATE TABLE city (City TEXT, City_ID NUMBER, Regional_Population NUMBER); CREATE TABLE hosting_city (Host_City TEXT);"
      },
      {
        "question": "Please show the names of these cities.",
        "query": "SELECT city FROM city WHERE regional_population > 8000000 UNION SELECT city FROM city WHERE regional_population < 5000000",
        "schema": "CREATE TABLE hosting_city (Host_City TEXT); CREATE TABLE city (Regional_Population NUMBER, City TEXT, City_ID NUMBER); CREATE TABLE temperature (City_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Which city has the smallest GDP?",
        "query": "SELECT city FROM city ORDER BY gdp ASC LIMIT 1",
        "schema": "CREATE TABLE city (GDP NUMBER, City_ID NUMBER, City TEXT, Regional_Population NUMBER);"
      },
      {
        "question": "Which city has the largest population?",
        "query": "SELECT city FROM city ORDER BY regional_population DESC LIMIT 1",
        "schema": "CREATE TABLE city (GDP NUMBER, Regional_Population NUMBER, City TEXT, City_ID NUMBER);"
      },
      {
        "question": "What is its GDP?",
        "query": "SELECT gdp FROM city ORDER BY regional_population DESC LIMIT 1",
        "schema": "CREATE TABLE city (Regional_Population NUMBER, City TEXT, City_ID NUMBER, GDP NUMBER);"
      }
    ]
  ],
  "shop_membership": [
    [
      {
        "question": "How many branches are there?",
        "query": "SELECT count(*) FROM branch",
        "schema": "CREATE TABLE branch (membership_amount TEXT, Name TEXT, City TEXT, Branch_ID NUMBER); CREATE TABLE purchase (Member_ID NUMBER, Branch_ID TEXT); CREATE TABLE membership_register_branch (Branch_ID TEXT, Member_ID NUMBER); CREATE TABLE member (Member_ID NUMBER, Name TEXT);"
      },
      {
        "question": "What is their average membership amounts?",
        "query": "SELECT avg(membership_amount) FROM branch",
        "schema": "CREATE TABLE membership_register_branch (Member_ID NUMBER, Branch_ID TEXT); CREATE TABLE branch (membership_amount TEXT, Branch_ID NUMBER, City TEXT, Name TEXT); CREATE TABLE member (Member_ID NUMBER, Name TEXT); CREATE TABLE purchase (Branch_ID TEXT, Member_ID NUMBER);"
      },
      {
        "question": "How many branches have more membership than that?",
        "query": "SELECT count(*) FROM branch WHERE membership_amount > (SELECT avg(membership_amount) FROM branch)",
        "schema": "CREATE TABLE membership_register_branch (Branch_ID TEXT, Member_ID NUMBER); CREATE TABLE member (Member_ID NUMBER, Name TEXT); CREATE TABLE purchase (Member_ID NUMBER, Branch_ID TEXT); CREATE TABLE branch (City TEXT, membership_amount TEXT, Name TEXT, Branch_ID NUMBER);"
      }
    ],
    [
      {
        "question": "How many branches are there?",
        "query": "SELECT count(*) FROM branch",
        "schema": "CREATE TABLE member (Member_ID NUMBER, Name TEXT); CREATE TABLE membership_register_branch (Member_ID NUMBER, Branch_ID TEXT); CREATE TABLE purchase (Member_ID NUMBER, Branch_ID TEXT); CREATE TABLE branch (Name TEXT, Branch_ID NUMBER, membership_amount TEXT, City TEXT);"
      },
      {
        "question": "How many membership does each of them have?",
        "query": "SELECT name, membership_amount FROM branch",
        "schema": "CREATE TABLE member (Name TEXT, Member_ID NUMBER); CREATE TABLE branch (Name TEXT, membership_amount TEXT, City TEXT, Branch_ID NUMBER); CREATE TABLE purchase (Member_ID NUMBER, Branch_ID TEXT); CREATE TABLE membership_register_branch (Branch_ID TEXT, Member_ID NUMBER);"
      },
      {
        "question": "Show me the top three of them.",
        "query": "SELECT name, membership_amount FROM branch ORDER BY membership_amount DESC LIMIT 3",
        "schema": "CREATE TABLE member (Member_ID NUMBER, Name TEXT); CREATE TABLE branch (Name TEXT, Branch_ID NUMBER, City TEXT, membership_amount TEXT); CREATE TABLE purchase (Branch_ID TEXT, Member_ID NUMBER); CREATE TABLE membership_register_branch (Branch_ID TEXT, Member_ID NUMBER);"
      },
      {
        "question": "Give me only the name.",
        "query": "SELECT name FROM branch ORDER BY membership_amount DESC LIMIT 3",
        "schema": "CREATE TABLE branch (Branch_ID NUMBER, Name TEXT, City TEXT, membership_amount TEXT); CREATE TABLE purchase (Member_ID NUMBER, Branch_ID TEXT); CREATE TABLE member (Member_ID NUMBER, Name TEXT); CREATE TABLE membership_register_branch (Branch_ID TEXT, Member_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Give me the name of all branches.",
        "query": "SELECT name FROM branch",
        "schema": "CREATE TABLE branch (Branch_ID NUMBER, Name TEXT, City TEXT); CREATE TABLE member (Name TEXT, Member_ID NUMBER); CREATE TABLE membership_register_branch (Branch_ID TEXT);"
      },
      {
        "question": "Show me all open years when any of them were opened.",
        "query": "SELECT open_year FROM branch GROUP BY open_year",
        "schema": "CREATE TABLE member (Name TEXT, Member_ID NUMBER); CREATE TABLE branch (Branch_ID NUMBER, Name TEXT, City TEXT, Open_year TEXT); CREATE TABLE membership_register_branch (Branch_ID TEXT);"
      },
      {
        "question": "Among them, during which years, at least two shops were opened?",
        "query": "SELECT open_year FROM branch GROUP BY open_year HAVING count(*) >= 2",
        "schema": "CREATE TABLE branch (Name TEXT, Branch_ID NUMBER, City TEXT, Open_year TEXT); CREATE TABLE member (Name TEXT, Member_ID NUMBER); CREATE TABLE membership_register_branch (Branch_ID TEXT);"
      }
    ],
    [
      {
        "question": "How many branches are there?",
        "query": "SELECT count(*) FROM branch",
        "schema": "CREATE TABLE purchase (Branch_ID TEXT); CREATE TABLE membership_register_branch (Member_ID NUMBER, Branch_ID TEXT); CREATE TABLE member (Member_ID NUMBER, Name TEXT); CREATE TABLE branch (Branch_ID NUMBER, membership_amount TEXT, Name TEXT, City TEXT);"
      },
      {
        "question": "What about opened in 2011 or located at London?",
        "query": "SELECT count(*) FROM branch WHERE open_year = 2011 OR city = 'London'",
        "schema": "CREATE TABLE branch (Branch_ID NUMBER, membership_amount TEXT, Name TEXT, Open_year TEXT, Address_road TEXT, City TEXT); CREATE TABLE purchase (Branch_ID TEXT); CREATE TABLE member (Member_ID NUMBER, Name TEXT); CREATE TABLE membership_register_branch (Branch_ID TEXT, Member_ID NUMBER);"
      },
      {
        "question": "Show me the amount of memberships for them.",
        "query": "SELECT membership_amount FROM branch WHERE open_year = 2011 OR city = 'London'",
        "schema": "CREATE TABLE member (Name TEXT, Member_ID NUMBER); CREATE TABLE purchase (Branch_ID TEXT); CREATE TABLE branch (Open_year TEXT, City TEXT, membership_amount TEXT, Name TEXT, Address_road TEXT, Branch_ID NUMBER); CREATE TABLE membership_register_branch (Member_ID NUMBER, Register_Year TEXT, Branch_ID TEXT);"
      },
      {
        "question": "What are the minimum and maximum among them?",
        "query": "SELECT min(membership_amount) , max(membership_amount) FROM branch WHERE open_year = 2011 OR city = 'London'",
        "schema": "CREATE TABLE membership_register_branch (Member_ID NUMBER, Register_Year TEXT, Branch_ID TEXT); CREATE TABLE branch (membership_amount TEXT, Name TEXT, Address_road TEXT, Branch_ID NUMBER, Open_year TEXT, City TEXT); CREATE TABLE member (Level NUMBER, Name TEXT, Member_ID NUMBER); CREATE TABLE purchase (Branch_ID TEXT);"
      }
    ],
    [
      {
        "question": "How many branches are there?",
        "query": "SELECT count(*) FROM branch",
        "schema": "CREATE TABLE member (Member_ID NUMBER, Name TEXT); CREATE TABLE branch (City TEXT, Name TEXT, membership_amount TEXT, Branch_ID NUMBER); CREATE TABLE purchase (Member_ID NUMBER, Branch_ID TEXT); CREATE TABLE membership_register_branch (Member_ID NUMBER, Branch_ID TEXT);"
      },
      {
        "question": "What about before 2010?",
        "query": "SELECT count(*) FROM branch WHERE open_year < 2010",
        "schema": "CREATE TABLE member (Name TEXT, Member_ID NUMBER); CREATE TABLE branch (Name TEXT, membership_amount TEXT, Branch_ID NUMBER, City TEXT, Open_year TEXT); CREATE TABLE purchase (Branch_ID TEXT, Year TEXT, Member_ID NUMBER); CREATE TABLE membership_register_branch (Branch_ID TEXT, Member_ID NUMBER, Register_Year TEXT);"
      },
      {
        "question": "Can you show me those for each city?",
        "query": "SELECT city, count(*) FROM branch WHERE open_year < 2010 GROUP BY city",
        "schema": "CREATE TABLE purchase (Year TEXT, Branch_ID TEXT, Member_ID NUMBER); CREATE TABLE membership_register_branch (Member_ID NUMBER, Branch_ID TEXT, Register_Year TEXT); CREATE TABLE branch (City TEXT, Name TEXT, Open_year TEXT, membership_amount TEXT, Branch_ID NUMBER); CREATE TABLE member (Name TEXT, Hometown TEXT, Member_ID NUMBER);"
      }
    ],
    [
      {
        "question": "How many different membership levels are there?",
        "query": "SELECT LEVEL FROM member GROUP BY LEVEL",
        "schema": "CREATE TABLE member (Name TEXT, Level NUMBER, Member_ID NUMBER); CREATE TABLE branch (Branch_ID NUMBER, membership_amount TEXT);"
      },
      {
        "question": "How many members are there in the record?",
        "query": "SELECT count(*) FROM member",
        "schema": "CREATE TABLE branch (Branch_ID NUMBER, membership_amount TEXT); CREATE TABLE member (Level NUMBER, Name TEXT, Member_ID NUMBER); CREATE TABLE membership_register_branch (Member_ID NUMBER);"
      },
      {
        "question": "Which membership level has the most number of members?",
        "query": "SELECT LEVEL FROM member GROUP BY LEVEL ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE membership_register_branch (Member_ID NUMBER); CREATE TABLE branch (Branch_ID NUMBER, membership_amount TEXT); CREATE TABLE member (Level NUMBER, Name TEXT, Member_ID NUMBER);"
      }
    ],
    [
      {
        "question": "How many membership registrations are there in file?",
        "query": "SELECT count(*) FROM membership_register_branch",
        "schema": "CREATE TABLE member (Member_ID NUMBER); CREATE TABLE membership_register_branch (Branch_ID TEXT, Member_ID NUMBER); CREATE TABLE branch (Branch_ID NUMBER);"
      },
      {
        "question": "Show me the member names and branch names associated with them.",
        "query": "SELECT t3.name , t2.name FROM membership_register_branch AS t1 JOIN branch AS t2 ON t1.branch_id = t2.branch_id JOIN member AS t3 ON t1.member_id = t3.member_id",
        "schema": "CREATE TABLE member (Name TEXT, Member_ID NUMBER); CREATE TABLE membership_register_branch (Member_ID NUMBER, Branch_ID TEXT); CREATE TABLE branch (Name TEXT, Branch_ID NUMBER);"
      },
      {
        "question": "List them in order of their register years.",
        "query": "SELECT t3.name , t2.name FROM membership_register_branch AS t1 JOIN branch AS t2 ON t1.branch_id = t2.branch_id JOIN member AS t3 ON t1.member_id = t3.member_id ORDER BY t1.register_year",
        "schema": "CREATE TABLE member (Name TEXT, Member_ID NUMBER); CREATE TABLE branch (Branch_ID NUMBER, Name TEXT); CREATE TABLE membership_register_branch (Member_ID NUMBER, Branch_ID TEXT, Register_Year TEXT);"
      }
    ],
    [
      {
        "question": "How many membership registrations are there in file?",
        "query": "SELECT count(*) FROM membership_register_branch",
        "schema": "CREATE TABLE membership_register_branch (Branch_ID TEXT, Member_ID NUMBER); CREATE TABLE member (Member_ID NUMBER); CREATE TABLE branch (Branch_ID NUMBER);"
      },
      {
        "question": "How many of those were registered after 2015?",
        "query": "SELECT count(*) FROM membership_register_branch WHERE register_year > 2015",
        "schema": "CREATE TABLE member (Member_ID NUMBER); CREATE TABLE membership_register_branch (Branch_ID TEXT, Register_Year TEXT, Member_ID NUMBER); CREATE TABLE branch (Branch_ID NUMBER);"
      },
      {
        "question": "What about for each branch?",
        "query": "SELECT branch_id, count(*) FROM membership_register_branch WHERE register_year > 2015 GROUP BY branch_id",
        "schema": "CREATE TABLE branch (Branch_ID NUMBER, Name TEXT); CREATE TABLE membership_register_branch (Branch_ID TEXT, Register_Year TEXT, Member_ID NUMBER); CREATE TABLE member (Member_ID NUMBER);"
      },
      {
        "question": "Show me the name for each branch instead of id.",
        "query": "SELECT t2.name , count(*) FROM membership_register_branch AS t1 JOIN branch AS t2 ON t1.branch_id = t2.branch_id WHERE t1.register_year > 2015 GROUP BY t2.branch_id",
        "schema": "CREATE TABLE membership_register_branch (Member_ID NUMBER, Register_Year TEXT, Branch_ID TEXT); CREATE TABLE branch (Name TEXT, Branch_ID NUMBER); CREATE TABLE member (Member_ID NUMBER);"
      }
    ],
    [
      {
        "question": "How many membership registrations are there in file?",
        "query": "SELECT count(*) FROM membership_register_branch",
        "schema": "CREATE TABLE member (Name TEXT, Member_ID NUMBER); CREATE TABLE membership_register_branch (Branch_ID TEXT, Member_ID NUMBER); CREATE TABLE branch (Branch_ID NUMBER);"
      },
      {
        "question": "Show me the id of members in any of them.",
        "query": "SELECT member_id FROM membership_register_branch",
        "schema": "CREATE TABLE member (Name TEXT, Member_ID NUMBER); CREATE TABLE branch (Branch_ID NUMBER); CREATE TABLE membership_register_branch (Register_Year TEXT, Member_ID NUMBER, Branch_ID TEXT);"
      },
      {
        "question": "Give me the name of members who are not one of those.",
        "query": "SELECT name FROM member WHERE member_id NOT IN (SELECT member_id FROM membership_register_branch)",
        "schema": "CREATE TABLE member (Name TEXT, Member_ID NUMBER); CREATE TABLE branch (Name TEXT, Branch_ID NUMBER); CREATE TABLE membership_register_branch (Register_Year TEXT, Branch_ID TEXT, Member_ID NUMBER);"
      }
    ],
    [
      {
        "question": "How many membership registrations are there in file?",
        "query": "SELECT count(*) FROM membership_register_branch",
        "schema": "CREATE TABLE member (Member_ID NUMBER, Name TEXT); CREATE TABLE membership_register_branch (Branch_ID TEXT, Member_ID NUMBER); CREATE TABLE branch (Branch_ID NUMBER);"
      },
      {
        "question": "Show me the id of branches in any of them.",
        "query": "SELECT branch_id FROM membership_register_branch",
        "schema": "CREATE TABLE branch (Branch_ID NUMBER, Name TEXT); CREATE TABLE member (Member_ID NUMBER, Name TEXT); CREATE TABLE membership_register_branch (Register_Year TEXT, Branch_ID TEXT, Member_ID NUMBER);"
      },
      {
        "question": "Give me the name of branches which are not one of those.",
        "query": "SELECT name FROM branch WHERE branch_id NOT IN (SELECT branch_id FROM membership_register_branch)",
        "schema": "CREATE TABLE membership_register_branch (Member_ID NUMBER, Branch_ID TEXT, Register_Year TEXT); CREATE TABLE member (Name TEXT, Member_ID NUMBER); CREATE TABLE branch (Branch_ID NUMBER, Name TEXT);"
      },
      {
        "question": "What about their cities?",
        "query": "SELECT name , city FROM branch WHERE branch_id NOT IN (SELECT branch_id FROM membership_register_branch)",
        "schema": "CREATE TABLE membership_register_branch (Register_Year TEXT, Branch_ID TEXT, Member_ID NUMBER); CREATE TABLE branch (Branch_ID NUMBER, City TEXT, Name TEXT); CREATE TABLE member (Member_ID NUMBER, Name TEXT);"
      }
    ],
    [
      {
        "question": "How many membership registrations are there in 2016?",
        "query": "SELECT count(*) FROM membership_register_branch WHERE register_year = 2016",
        "schema": "CREATE TABLE membership_register_branch (Member_ID NUMBER, Register_Year TEXT, Branch_ID TEXT); CREATE TABLE member (Member_ID NUMBER); CREATE TABLE branch (Branch_ID NUMBER);"
      },
      {
        "question": "What about for each branch?",
        "query": "SELECT branch_id, count(*) FROM membership_register_branch WHERE register_year = 2016 GROUP BY branch_id",
        "schema": "CREATE TABLE membership_register_branch (Member_ID NUMBER, Branch_ID TEXT, Register_Year TEXT); CREATE TABLE member (Member_ID NUMBER); CREATE TABLE branch (Name TEXT, Branch_ID NUMBER);"
      },
      {
        "question": "Show me the name of branch with the most of them.",
        "query": "SELECT t2.name FROM membership_register_branch AS t1 JOIN branch AS t2 ON t1.branch_id = t2.branch_id WHERE t1.register_year = 2016 GROUP BY t2.branch_id ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE member (Member_ID NUMBER); CREATE TABLE membership_register_branch (Register_Year TEXT, Member_ID NUMBER, Branch_ID TEXT); CREATE TABLE branch (membership_amount TEXT, Name TEXT, Branch_ID NUMBER);"
      },
      {
        "question": "What about its open year?",
        "query": "SELECT t2.name , t2.open_year FROM membership_register_branch AS t1 JOIN branch AS t2 ON t1.branch_id = t2.branch_id WHERE t1.register_year = 2016 GROUP BY t2.branch_id ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE branch (Branch_ID NUMBER, Open_year TEXT, Name TEXT, membership_amount TEXT); CREATE TABLE member (Member_ID NUMBER); CREATE TABLE membership_register_branch (Branch_ID TEXT, Register_Year TEXT, Member_ID NUMBER);"
      }
    ],
    [
      {
        "question": "How many membership registrations are there in 2016?",
        "query": "SELECT count(*) FROM membership_register_branch WHERE register_year = 2016",
        "schema": "CREATE TABLE member (Member_ID NUMBER); CREATE TABLE branch (Branch_ID NUMBER); CREATE TABLE membership_register_branch (Branch_ID TEXT, Member_ID NUMBER, Register_Year TEXT);"
      },
      {
        "question": "Show me the name of members in them.",
        "query": "SELECT t2.name FROM membership_register_branch AS t1 JOIN member AS t2 ON t1.member_id = t2.member_id WHERE t1.register_year = 2016",
        "schema": "CREATE TABLE membership_register_branch (Member_ID NUMBER, Register_Year TEXT, Branch_ID TEXT); CREATE TABLE branch (Branch_ID NUMBER, Name TEXT); CREATE TABLE member (Member_ID NUMBER, Name TEXT);"
      },
      {
        "question": "Also include their hometowns.",
        "query": "SELECT t2.name , t2.hometown FROM membership_register_branch AS t1 JOIN member AS t2 ON t1.member_id = t2.member_id WHERE t1.register_year = 2016",
        "schema": "CREATE TABLE member (Name TEXT, Member_ID NUMBER, Hometown TEXT); CREATE TABLE branch (Name TEXT, Branch_ID NUMBER, City TEXT); CREATE TABLE membership_register_branch (Member_ID NUMBER, Branch_ID TEXT, Register_Year TEXT);"
      }
    ],
    [
      {
        "question": "How many branches were opened in 2001?",
        "query": "SELECT count(*) FROM branch WHERE open_year = 2001",
        "schema": "CREATE TABLE branch (Name TEXT, Open_year TEXT, City TEXT, Branch_ID NUMBER);"
      },
      {
        "question": "Among them, how many also have more than 100 membership?",
        "query": "SELECT count(*) FROM branch WHERE open_year = 2001 AND membership_amount > 100",
        "schema": "CREATE TABLE branch (City TEXT, membership_amount TEXT, Name TEXT, Open_year TEXT, Branch_ID NUMBER); CREATE TABLE membership_register_branch (Branch_ID TEXT, Register_Year TEXT);"
      },
      {
        "question": "Show me all cities with any of those branches.",
        "query": "SELECT city FROM branch WHERE open_year = 2001 AND membership_amount > 100",
        "schema": "CREATE TABLE branch (membership_amount TEXT, City TEXT, Name TEXT, Branch_ID NUMBER, Open_year TEXT); CREATE TABLE membership_register_branch (Branch_ID TEXT, Register_Year TEXT); CREATE TABLE member (Hometown TEXT);"
      }
    ],
    [
      {
        "question": "How many branches have more than 100 memberships?",
        "query": "SELECT count(*) FROM branch WHERE membership_amount > 100",
        "schema": "CREATE TABLE branch (membership_amount TEXT, Name TEXT, Branch_ID NUMBER); CREATE TABLE membership_register_branch (Branch_ID TEXT, Member_ID NUMBER); CREATE TABLE member (Member_ID NUMBER);"
      },
      {
        "question": "Give me all cities with any of those branches.",
        "query": "SELECT city FROM branch WHERE membership_amount > 100",
        "schema": "CREATE TABLE member (Member_ID NUMBER, Hometown TEXT); CREATE TABLE membership_register_branch (Member_ID NUMBER, Branch_ID TEXT); CREATE TABLE branch (Branch_ID NUMBER, membership_amount TEXT, Name TEXT, City TEXT);"
      },
      {
        "question": "What about cities without any of those branches?",
        "query": "SELECT city FROM branch EXCEPT SELECT city FROM branch WHERE membership_amount > 100",
        "schema": "CREATE TABLE membership_register_branch (Branch_ID TEXT, Member_ID NUMBER); CREATE TABLE branch (City TEXT, Branch_ID NUMBER, Name TEXT, membership_amount TEXT); CREATE TABLE member (Member_ID NUMBER, Hometown TEXT);"
      }
    ],
    [
      {
        "question": "How many purchases are there in 2018?",
        "query": "SELECT count(*) FROM purchase WHERE YEAR = 2018",
        "schema": "CREATE TABLE member (Member_ID NUMBER); CREATE TABLE purchase (Total_pounds NUMBER, Year TEXT, Member_ID NUMBER);"
      },
      {
        "question": "How many of them were made through any branch in London?",
        "query": "SELECT count(*) FROM purchase AS t1 JOIN branch AS t2 ON t1.branch_id = t2.branch_id WHERE t2.city = 'London' AND t1.year = 2018",
        "schema": "CREATE TABLE branch (Name TEXT, City TEXT, Branch_ID NUMBER, Address_road TEXT); CREATE TABLE purchase (Branch_ID TEXT, Member_ID NUMBER, Year TEXT, Total_pounds NUMBER); CREATE TABLE member (Member_ID NUMBER);"
      },
      {
        "question": "Show me the sum of total pounds of them.",
        "query": "SELECT sum(total_pounds) FROM purchase AS t1 JOIN branch AS t2 ON t1.branch_id = t2.branch_id WHERE t2.city = 'London' AND t1.year = 2018",
        "schema": "CREATE TABLE branch (membership_amount TEXT, City TEXT, Name TEXT, Address_road TEXT, Branch_ID NUMBER); CREATE TABLE purchase (Member_ID NUMBER, Branch_ID TEXT, Year TEXT, Total_pounds NUMBER); CREATE TABLE member (Member_ID NUMBER);"
      }
    ],
    [
      {
        "question": "How many purchases are there in file?",
        "query": "SELECT count(*) FROM purchase",
        "schema": "CREATE TABLE member (Member_ID NUMBER); CREATE TABLE branch (Branch_ID NUMBER); CREATE TABLE purchase (Total_pounds NUMBER, Member_ID NUMBER, Branch_ID TEXT);"
      },
      {
        "question": "Show me the id of members with level 6.",
        "query": "SELECT member_id FROM member WHERE LEVEL = 6",
        "schema": "CREATE TABLE member (Name TEXT, Level NUMBER, Member_ID NUMBER); CREATE TABLE branch (Branch_ID NUMBER); CREATE TABLE purchase (Branch_ID TEXT, Member_ID NUMBER, Total_pounds NUMBER);"
      },
      {
        "question": "How many purchases are for any of those members?",
        "query": "SELECT count(*) FROM purchase AS t1 JOIN member AS t2 ON t1.member_id = t2.member_id WHERE t2.level = 6",
        "schema": "CREATE TABLE branch (Branch_ID NUMBER); CREATE TABLE member (Member_ID NUMBER, Level NUMBER, Name TEXT); CREATE TABLE purchase (Branch_ID TEXT, Member_ID NUMBER, Total_pounds NUMBER, Year TEXT);"
      }
    ],
    [
      {
        "question": "How many members' hometown is in Louisville, Kentucky?",
        "query": "SELECT count(*) FROM member WHERE hometown = 'Louisville , Kentucky'",
        "schema": "CREATE TABLE membership_register_branch (Member_ID NUMBER, Branch_ID TEXT); CREATE TABLE member (Name TEXT, Hometown TEXT, Member_ID NUMBER); CREATE TABLE branch (Address_road TEXT, City TEXT, Branch_ID NUMBER);"
      },
      {
        "question": "Show me the name of branches with any of those members.",
        "query": "SELECT t2.name FROM membership_register_branch AS t1 JOIN branch AS t2 ON t1.branch_id = t2.branch_id JOIN member AS t3 ON t1.member_id = t3.member_id WHERE t3.hometown = 'Louisville, Kentucky'",
        "schema": "CREATE TABLE member (Member_ID NUMBER, Hometown TEXT, Name TEXT); CREATE TABLE membership_register_branch (Member_ID NUMBER, Branch_ID TEXT); CREATE TABLE branch (Name TEXT, City TEXT, Address_road TEXT, Branch_ID NUMBER);"
      },
      {
        "question": "Among them, which ones also have members from Hiram, Georgia?",
        "query": "SELECT t2.name FROM membership_register_branch AS t1 JOIN branch AS t2 ON t1.branch_id = t2.branch_id JOIN member AS t3 ON t1.member_id = t3.member_id WHERE t3.hometown = 'Louisville , Kentucky' INTERSECT SELECT t2.name FROM membership_register_branch AS t1 JOIN branch AS t2 ON t1.branch_id = t2.branch_id JOIN member AS t3 ON t1.member_id = t3.member_id WHERE t3.hometown = 'Hiram, Georgia'",
        "schema": "CREATE TABLE branch (City TEXT, Branch_ID NUMBER, Name TEXT, Address_road TEXT); CREATE TABLE membership_register_branch (Branch_ID TEXT, Member_ID NUMBER); CREATE TABLE member (Member_ID NUMBER, Name TEXT, Hometown TEXT);"
      }
    ]
  ],
  "perpetrator": [
    [
      {
        "question": "Show me all about perpetrator.",
        "query": "SELECT * FROM perpetrator;",
        "schema": "CREATE TABLE people (People_ID NUMBER); CREATE TABLE perpetrator (People_ID NUMBER, Perpetrator_ID NUMBER);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT count(*) FROM perpetrator;",
        "schema": "CREATE TABLE people (People_ID NUMBER); CREATE TABLE perpetrator (Injured NUMBER, People_ID NUMBER, Perpetrator_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show me the number of people killed by each perpetrator.",
        "query": "SELECT killed FROM perpetrator;",
        "schema": "CREATE TABLE perpetrator (Killed NUMBER, Perpetrator_ID NUMBER, Injured NUMBER, People_ID NUMBER); CREATE TABLE people (People_ID NUMBER);"
      },
      {
        "question": "List the date for each in descending order of the number of people killed.",
        "query": "SELECT Date FROM perpetrator ORDER BY killed DESC;",
        "schema": "CREATE TABLE people (People_ID NUMBER); CREATE TABLE perpetrator (Injured NUMBER, Killed NUMBER, Year NUMBER, Date TEXT, Perpetrator_ID NUMBER, People_ID NUMBER);"
      }
    ],
    [
      {
        "question": "How many people has each perpetrator killed?",
        "query": "SELECT killed FROM perpetrator;",
        "schema": "CREATE TABLE perpetrator (Perpetrator_ID NUMBER, Killed NUMBER, People_ID NUMBER, Injured NUMBER); CREATE TABLE people (Name TEXT, People_ID NUMBER);"
      },
      {
        "question": "How about injured?",
        "query": "SELECT injured FROM perpetrator;",
        "schema": "CREATE TABLE perpetrator (Killed NUMBER, People_ID NUMBER, Injured NUMBER, Perpetrator_ID NUMBER); CREATE TABLE people (Name TEXT, People_ID NUMBER);"
      },
      {
        "question": "Sort the result in ascending order.",
        "query": "SELECT injured FROM perpetrator ORDER BY injured ASC;",
        "schema": "CREATE TABLE people (People_ID NUMBER, Name TEXT); CREATE TABLE perpetrator (Injured NUMBER, Killed NUMBER, Perpetrator_ID NUMBER, People_ID NUMBER);"
      }
    ],
    [
      {
        "question": "How many people are injured in total by all perpetrators?",
        "query": "SELECT sum(injured) FROM perpetrator;",
        "schema": "CREATE TABLE people (People_ID NUMBER); CREATE TABLE perpetrator (Killed NUMBER, Injured NUMBER, People_ID NUMBER, Perpetrator_ID NUMBER);"
      },
      {
        "question": "How many perpetrators are there?",
        "query": "SELECT count(*) FROM perpetrator;",
        "schema": "CREATE TABLE perpetrator (Injured NUMBER, Killed NUMBER, Perpetrator_ID NUMBER, People_ID NUMBER); CREATE TABLE people (People_ID NUMBER);"
      },
      {
        "question": "What is the average number of people injured by all perpetrators?",
        "query": "SELECT avg(injured) FROM perpetrator;",
        "schema": "CREATE TABLE perpetrator (Perpetrator_ID NUMBER, People_ID NUMBER, Injured NUMBER, Killed NUMBER); CREATE TABLE people (People_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show me the number of people killed by each perpetrator.",
        "query": "SELECT killed FROM perpetrator;",
        "schema": "CREATE TABLE people (People_ID NUMBER); CREATE TABLE perpetrator (Killed NUMBER, Injured NUMBER, Perpetrator_ID NUMBER, People_ID NUMBER);"
      },
      {
        "question": "Order the result in descending order.",
        "query": "SELECT killed FROM perpetrator ORDER BY killed DESC ;",
        "schema": "CREATE TABLE people (People_ID NUMBER); CREATE TABLE perpetrator (Injured NUMBER, Perpetrator_ID NUMBER, People_ID NUMBER, Killed NUMBER);"
      },
      {
        "question": "What's the location for the one who killed the most people?",
        "query": "SELECT LOCATION FROM perpetrator ORDER BY killed DESC LIMIT 1;",
        "schema": "CREATE TABLE perpetrator (Perpetrator_ID NUMBER, Injured NUMBER, People_ID NUMBER, Killed NUMBER, Location TEXT); CREATE TABLE people (People_ID NUMBER);"
      }
    ],
    [
      {
        "question": "How many people are there?",
        "query": "SELECT count(*) FROM people;",
        "schema": "CREATE TABLE people (People_ID NUMBER, Name TEXT); CREATE TABLE perpetrator (People_ID NUMBER, Perpetrator_ID NUMBER);"
      },
      {
        "question": "What are their names?",
        "query": "SELECT name FROM people;",
        "schema": "CREATE TABLE people (People_ID NUMBER, Name TEXT); CREATE TABLE perpetrator (Perpetrator_ID NUMBER, People_ID NUMBER);"
      },
      {
        "question": "Order the result by descending height.",
        "query": "SELECT name FROM people ORDER BY height ASC;",
        "schema": "CREATE TABLE people (People_ID NUMBER, Name TEXT, Height NUMBER); CREATE TABLE perpetrator (People_ID NUMBER, Perpetrator_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What are the heights of all people?",
        "query": "SELECT height FROM people;",
        "schema": "CREATE TABLE people (Height NUMBER, People_ID NUMBER, Name TEXT); CREATE TABLE perpetrator (Perpetrator_ID NUMBER, People_ID NUMBER);"
      },
      {
        "question": "How about their names?",
        "query": "SELECT name FROM people;",
        "schema": "CREATE TABLE people (People_ID NUMBER, Name TEXT, Height NUMBER); CREATE TABLE perpetrator (Perpetrator_ID NUMBER, People_ID NUMBER);"
      },
      {
        "question": "Show just the perpetrators' names.",
        "query": "SELECT t1.name FROM people AS t1 JOIN perpetrator AS t2 ON t1.people_id = t2.people_id;",
        "schema": "CREATE TABLE people (Name TEXT, Height NUMBER, People_ID NUMBER); CREATE TABLE perpetrator (Perpetrator_ID NUMBER, People_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show me the countries of the perpetrators.",
        "query": "SELECT country FROM perpetrator;",
        "schema": "CREATE TABLE people (People_ID NUMBER, Name TEXT); CREATE TABLE perpetrator (Country TEXT, People_ID NUMBER, Perpetrator_ID NUMBER);"
      },
      {
        "question": "What are the names of perpetrators whose country is \"China\"?",
        "query": "SELECT t1.name FROM people AS t1 JOIN perpetrator AS t2 ON t1.people_id = t2.people_id WHERE t2.country = \"China\";",
        "schema": "CREATE TABLE people (Name TEXT, People_ID NUMBER); CREATE TABLE perpetrator (Perpetrator_ID NUMBER, People_ID NUMBER, Country TEXT);"
      },
      {
        "question": "How about those whose country is not \"China\"?",
        "query": "SELECT t1.name FROM people AS t1 JOIN perpetrator AS t2 ON t1.people_id = t2.people_id WHERE t2.country != \"China\";",
        "schema": "CREATE TABLE people (Name TEXT, People_ID NUMBER); CREATE TABLE perpetrator (People_ID NUMBER, Perpetrator_ID NUMBER, Country TEXT);"
      }
    ],
    [
      {
        "question": "Show me the names of the perpetrators.",
        "query": "SELECT t1.name FROM people AS t1 JOIN perpetrator AS t2 ON t1.people_id = t2.people_id;",
        "schema": "CREATE TABLE people (People_ID NUMBER, Name TEXT); CREATE TABLE perpetrator (Perpetrator_ID NUMBER, People_ID NUMBER);"
      },
      {
        "question": "Who has the largest height?",
        "query": "SELECT t1.name FROM people AS t1 JOIN perpetrator AS t2 ON t1.people_id = t2.people_id ORDER BY t1.height DESC LIMIT 1;",
        "schema": "CREATE TABLE people (People_ID NUMBER, Name TEXT, Height NUMBER); CREATE TABLE perpetrator (People_ID NUMBER, Perpetrator_ID NUMBER);"
      },
      {
        "question": "How about the highest weight?",
        "query": "SELECT t1.name FROM people AS t1 JOIN perpetrator AS t2 ON t1.people_id = t2.people_id ORDER BY t1.weight DESC LIMIT 1;",
        "schema": "CREATE TABLE people (People_ID NUMBER, Name TEXT, Weight NUMBER, Height NUMBER); CREATE TABLE perpetrator (Perpetrator_ID NUMBER, People_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show me the names of all the perpetrators with a height of more than 1.84 meters.",
        "query": "SELECT t1.name FROM people AS t1 JOIN perpetrator AS t2 ON t1.people_id = t2.people_id WHERE t1.height > 1.84;",
        "schema": "CREATE TABLE perpetrator (People_ID NUMBER, Perpetrator_ID NUMBER); CREATE TABLE people (Height NUMBER, People_ID NUMBER, Name TEXT);"
      },
      {
        "question": "What's their average number of killed people?",
        "query": "SELECT avg(t2.killed) FROM people AS t1 JOIN perpetrator AS t2 ON t1.people_id = t2.people_id WHERE t1.height > 1.84;",
        "schema": "CREATE TABLE people (People_ID NUMBER, Name TEXT, Height NUMBER); CREATE TABLE perpetrator (Perpetrator_ID NUMBER, People_ID NUMBER, Injured NUMBER, Killed NUMBER);"
      },
      {
        "question": "How about the total?",
        "query": "SELECT sum(t2.killed) FROM people AS t1 JOIN perpetrator AS t2 ON t1.people_id = t2.people_id WHERE t1.height > 1.84;",
        "schema": "CREATE TABLE perpetrator (Perpetrator_ID NUMBER, Injured NUMBER, People_ID NUMBER, Killed NUMBER); CREATE TABLE people (People_ID NUMBER, Height NUMBER, Name TEXT);"
      }
    ],
    [
      {
        "question": "Show me perpetrators' names.",
        "query": "SELECT t1.name FROM people AS t1 JOIN perpetrator AS t2 ON t1.people_id = t2.people_id;",
        "schema": "CREATE TABLE perpetrator (People_ID NUMBER, Perpetrator_ID NUMBER); CREATE TABLE people (Name TEXT, People_ID NUMBER);"
      },
      {
        "question": "Among the result, who are in \"South Korea\"?",
        "query": "SELECT t1.name FROM people AS t1 JOIN perpetrator AS t2 ON t1.people_id = t2.people_id WHERE t2.country = \"South Korea\";",
        "schema": "CREATE TABLE perpetrator (Perpetrator_ID NUMBER, Country TEXT, Location TEXT, People_ID NUMBER); CREATE TABLE people (People_ID NUMBER, Home Town TEXT, Name TEXT);"
      },
      {
        "question": "How about China or Japan?",
        "query": "SELECT t1.name FROM people AS t1 JOIN perpetrator AS t2 ON t1.people_id = t2.people_id WHERE t2.country = \"China\" OR t2.country = \"Japan\"",
        "schema": "CREATE TABLE perpetrator (Location TEXT, Perpetrator_ID NUMBER, Country TEXT, People_ID NUMBER); CREATE TABLE people (Name TEXT, People_ID NUMBER, Home Town TEXT);"
      }
    ],
    [
      {
        "question": "What are the number of people injured for each perpetrator?",
        "query": "SELECT t1.name, t2.injured FROM people AS t1 JOIN perpetrator AS t2 ON t1.people_id = t2.people_id;",
        "schema": "CREATE TABLE perpetrator (Killed NUMBER, People_ID NUMBER, Perpetrator_ID NUMBER, Injured NUMBER); CREATE TABLE people (People_ID NUMBER, Name TEXT);"
      },
      {
        "question": "What are the heights of each perpetrator in descending order of the number of people they injured?",
        "query": "SELECT t1.height FROM people AS t1 JOIN perpetrator AS t2 ON t1.people_id = t2.people_id ORDER BY t2.injured DESC;",
        "schema": "CREATE TABLE people (Height NUMBER, People_ID NUMBER, Name TEXT); CREATE TABLE perpetrator (Perpetrator_ID NUMBER, Injured NUMBER, People_ID NUMBER, Killed NUMBER);"
      }
    ],
    [
      {
        "question": "What year corresponds with each perpetrator\uff1f",
        "query": "SELECT YEAR FROM perpetrator;",
        "schema": "CREATE TABLE perpetrator (Perpetrator_ID NUMBER, People_ID NUMBER, Year NUMBER, Date TEXT); CREATE TABLE people (People_ID NUMBER);"
      },
      {
        "question": "How about country?",
        "query": "SELECT country FROM perpetrator;",
        "schema": "CREATE TABLE people (People_ID NUMBER); CREATE TABLE perpetrator (Date TEXT, People_ID NUMBER, Perpetrator_ID NUMBER, Country TEXT, Year NUMBER);"
      },
      {
        "question": "Show each country and the corresponding number of perpetrators there.",
        "query": "SELECT country , count(*) FROM perpetrator GROUP BY country;",
        "schema": "CREATE TABLE perpetrator (Date TEXT, Country TEXT, Year NUMBER, People_ID NUMBER, Perpetrator_ID NUMBER); CREATE TABLE people (People_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What are the countries of perpetrators? Show each country and the corresponding number of perpetrators there.",
        "query": "SELECT country , count(*) FROM perpetrator GROUP BY country;",
        "schema": "CREATE TABLE perpetrator (Country TEXT, People_ID NUMBER, Perpetrator_ID NUMBER); CREATE TABLE people (People_ID NUMBER);"
      },
      {
        "question": "Which country has the fewest perpetrators?",
        "query": "SELECT country , count(*) FROM perpetrator GROUP BY country ORDER BY count(*) ASC LIMIT 1;",
        "schema": "CREATE TABLE perpetrator (Country TEXT, People_ID NUMBER, Perpetrator_ID NUMBER); CREATE TABLE people (People_ID NUMBER);"
      },
      {
        "question": "How about the most?",
        "query": "SELECT country , count(*) FROM perpetrator GROUP BY country ORDER BY count(*) DESC LIMIT 1;",
        "schema": "CREATE TABLE people (People_ID NUMBER); CREATE TABLE perpetrator (Country TEXT, People_ID NUMBER, Perpetrator_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What is the country that has the most perpetrators?",
        "query": "SELECT country , count(*) FROM perpetrator GROUP BY country ORDER BY count(*) DESC LIMIT 1;",
        "schema": "CREATE TABLE people (People_ID NUMBER); CREATE TABLE perpetrator (Country TEXT);"
      },
      {
        "question": "Which ones have more more than 1 perpetrator?",
        "query": "SELECT country , count(*) FROM perpetrator GROUP BY country HAVING count(*) <= 1;",
        "schema": "CREATE TABLE perpetrator (Country TEXT); CREATE TABLE people (People_ID NUMBER);"
      },
      {
        "question": "How about those with at least two perpetrators?",
        "query": "SELECT country , count(*) FROM perpetrator GROUP BY country HAVING count(*) >= 2;",
        "schema": "CREATE TABLE perpetrator (Country TEXT); CREATE TABLE people (People_ID NUMBER);"
      }
    ],
    [
      {
        "question": "For each perpetrator, show the year that corresponds?",
        "query": "SELECT YEAR FROM perpetrator;",
        "schema": "CREATE TABLE perpetrator (Year NUMBER, Perpetrator_ID NUMBER, People_ID NUMBER, Date TEXT); CREATE TABLE people (People_ID NUMBER);"
      },
      {
        "question": "Show me their names.",
        "query": "SELECT t1.name FROM people AS t1 JOIN perpetrator AS t2 ON t1.people_id = t2.people_id;",
        "schema": "CREATE TABLE people (Name TEXT, People_ID NUMBER); CREATE TABLE perpetrator (Perpetrator_ID NUMBER, People_ID NUMBER, Date TEXT, Year NUMBER);"
      },
      {
        "question": "Sort the result in descending order by year.",
        "query": "SELECT t1.name FROM people AS t1 JOIN perpetrator AS t2 ON t1.people_id = t2.people_id ORDER BY t2.year DESC;",
        "schema": "CREATE TABLE people (People_ID NUMBER, Name TEXT); CREATE TABLE perpetrator (Perpetrator_ID NUMBER, Date TEXT, People_ID NUMBER, Year NUMBER);"
      }
    ],
    [
      {
        "question": "Show me all about people.",
        "query": "SELECT * FROM people;",
        "schema": "CREATE TABLE people (People_ID NUMBER, Name TEXT); CREATE TABLE perpetrator (People_ID NUMBER, Perpetrator_ID NUMBER);"
      },
      {
        "question": "Which of those are perpetrators?",
        "query": "SELECT name FROM people WHERE people_id IN (SELECT people_id FROM perpetrator);",
        "schema": "CREATE TABLE people (People_ID NUMBER, Name TEXT); CREATE TABLE perpetrator (People_ID NUMBER, Perpetrator_ID NUMBER);"
      },
      {
        "question": "Show the rest of peoples' names.",
        "query": "SELECT name FROM people WHERE people_id NOT IN (SELECT people_id FROM perpetrator);",
        "schema": "CREATE TABLE people (People_ID NUMBER, Name TEXT); CREATE TABLE perpetrator (Perpetrator_ID NUMBER, People_ID NUMBER);"
      }
    ],
    [
      {
        "question": "For each perpetrator, show the ids and his or her country.",
        "query": "SELECT country, perpetrator_id FROM perpetrator;",
        "schema": "CREATE TABLE perpetrator (People_ID NUMBER, Location TEXT, Country TEXT, Perpetrator_ID NUMBER); CREATE TABLE people (People_ID NUMBER);"
      },
      {
        "question": "Also, show how many they have each injured.",
        "query": "SELECT country, perpetrator_id, injured FROM perpetrator;",
        "schema": "CREATE TABLE people (People_ID NUMBER); CREATE TABLE perpetrator (Location TEXT, Injured NUMBER, Killed NUMBER, People_ID NUMBER, Country TEXT, Perpetrator_ID NUMBER);"
      },
      {
        "question": "Which countries have perpetrators who have injured more than 50?",
        "query": "SELECT country FROM perpetrator WHERE injured > 50;",
        "schema": "CREATE TABLE people (People_ID NUMBER); CREATE TABLE perpetrator (Country TEXT, Injured NUMBER, Location TEXT, Killed NUMBER, Perpetrator_ID NUMBER, People_ID NUMBER);"
      },
      {
        "question": "Which of these also have perpetrators who have injured fewer than 20?",
        "query": "SELECT country FROM perpetrator WHERE injured > 50 INTERSECT SELECT country FROM perpetrator WHERE injured < 20;",
        "schema": "CREATE TABLE people (People_ID NUMBER); CREATE TABLE perpetrator (Country TEXT, Location TEXT, People_ID NUMBER, Killed NUMBER, Injured NUMBER, Perpetrator_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show me the location for each perpetrator.",
        "query": "SELECT LOCATION FROM perpetrator;",
        "schema": "CREATE TABLE people (Home Town TEXT, People_ID NUMBER, Name TEXT); CREATE TABLE perpetrator (Perpetrator_ID NUMBER, People_ID NUMBER, Location TEXT);"
      },
      {
        "question": "What are the distinct locations?",
        "query": "SELECT DISTINCT LOCATION FROM perpetrator;",
        "schema": "CREATE TABLE perpetrator (Location TEXT, People_ID NUMBER, Perpetrator_ID NUMBER); CREATE TABLE people (People_ID NUMBER, Home Town TEXT, Name TEXT);"
      },
      {
        "question": "How many are there in the result?",
        "query": "SELECT count(DISTINCT LOCATION) FROM perpetrator;",
        "schema": "CREATE TABLE perpetrator (Perpetrator_ID NUMBER, People_ID NUMBER, Location TEXT); CREATE TABLE people (People_ID NUMBER, Name TEXT, Home Town TEXT);"
      }
    ],
    [
      {
        "question": "What is the date for the perpetrator?",
        "query": "SELECT Date FROM perpetrator;",
        "schema": "CREATE TABLE perpetrator (Year NUMBER, Date TEXT, Perpetrator_ID NUMBER, People_ID NUMBER); CREATE TABLE people (People_ID NUMBER, Name TEXT);"
      },
      {
        "question": "Who's the tallest perpetrator?",
        "query": "SELECT t1.name FROM people AS t1 JOIN perpetrator AS t2 ON t1.people_id = t2.people_id ORDER BY t1.height DESC LIMIT 1",
        "schema": "CREATE TABLE perpetrator (Date TEXT, Year NUMBER, People_ID NUMBER, Perpetrator_ID NUMBER); CREATE TABLE people (Name TEXT, Height NUMBER, People_ID NUMBER);"
      },
      {
        "question": "What's his date?",
        "query": "SELECT t2.date FROM people AS t1 JOIN perpetrator AS t2 ON t1.people_id = t2.people_id ORDER BY t1.height DESC LIMIT 1",
        "schema": "CREATE TABLE people (Name TEXT, People_ID NUMBER, Height NUMBER); CREATE TABLE perpetrator (Date TEXT, Year NUMBER, Perpetrator_ID NUMBER, People_ID NUMBER);"
      }
    ]
  ],
  "company_1": [
    [
      {
        "question": "how many departments are there?",
        "query": "SELECT count(*) FROM department",
        "schema": "CREATE TABLE dept_locations (Dnumber NUMBER, Dlocation TEXT); CREATE TABLE dependent (Essn NUMBER, Dependent_name TEXT); CREATE TABLE employee (Ssn NUMBER, Minit TEXT, Super_ssn NUMBER, Lname TEXT, Dno NUMBER); CREATE TABLE works_on (Essn NUMBER, Pno NUMBER); CREATE TABLE department (Mgr_ssn NUMBER, Dnumber NUMBER, Dname TEXT);"
      },
      {
        "question": "show all their info.",
        "query": "SELECT * FROM department",
        "schema": "CREATE TABLE dept_locations (Dnumber NUMBER, Dlocation TEXT); CREATE TABLE department (Mgr_ssn NUMBER, Dnumber NUMBER, Dname TEXT); CREATE TABLE works_on (Essn NUMBER, Pno NUMBER); CREATE TABLE employee (Dno NUMBER, Super_ssn NUMBER, Ssn NUMBER, Minit TEXT, Lname TEXT); CREATE TABLE dependent (Essn NUMBER, Dependent_name TEXT);"
      },
      {
        "question": "where are they each located?",
        "query": "SELECT dlocation FROM department AS t1 JOIN dept_locations AS t2 ON t1.dnumber = t2.dnumber",
        "schema": "CREATE TABLE works_on (Pno NUMBER, Essn NUMBER); CREATE TABLE department (Dname TEXT, Dnumber NUMBER, Mgr_ssn NUMBER); CREATE TABLE employee (Ssn NUMBER, Minit TEXT, Dno NUMBER, Super_ssn NUMBER, Address TEXT, Lname TEXT); CREATE TABLE dependent (Dependent_name TEXT, Essn NUMBER); CREATE TABLE dept_locations (Dnumber NUMBER, Dlocation TEXT);"
      },
      {
        "question": "what are the names of departments that are located in Houston?",
        "query": "SELECT t1.dname FROM department AS t1 JOIN dept_locations AS t2 ON t1.dnumber = t2.dnumber WHERE t2.dlocation = 'Houston'",
        "schema": "CREATE TABLE dependent (Dependent_name TEXT, Essn NUMBER); CREATE TABLE dept_locations (Dnumber NUMBER, Dlocation TEXT); CREATE TABLE works_on (Essn NUMBER, Pno NUMBER); CREATE TABLE employee (Address TEXT, Ssn NUMBER, Minit TEXT, Super_ssn NUMBER, Dno NUMBER, Lname TEXT); CREATE TABLE department (Dname TEXT, Dnumber NUMBER, Mgr_ssn NUMBER);"
      }
    ]
  ],
  "ship_1": [
    [
      {
        "question": "What are the captains names and ages?",
        "query": "SELECT name, age FROM captain",
        "schema": "CREATE TABLE captain (Captain_ID NUMBER, Name TEXT, age TEXT);"
      },
      {
        "question": "What is the average age for each rank?",
        "query": "SELECT rank, avg(age) FROM captain GROUP BY rank",
        "schema": "CREATE TABLE captain (Captain_ID NUMBER, Name TEXT, age TEXT, Rank TEXT);"
      },
      {
        "question": "Per rank, how many are older than 50?",
        "query": "SELECT count(*) , rank FROM captain WHERE age < 50 GROUP BY rank",
        "schema": "CREATE TABLE captain (Rank TEXT, Name TEXT, age TEXT, Captain_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What are the names and ranks of captains?",
        "query": "SELECT name, rank FROM captain",
        "schema": "CREATE TABLE captain (Rank TEXT, Captain_ID NUMBER, Name TEXT);"
      },
      {
        "question": "Which rank is most common?",
        "query": "SELECT rank FROM captain GROUP BY rank ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE captain (Rank TEXT, Name TEXT, Captain_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Give the classes of captains.",
        "query": "SELECT CLASS FROM captain",
        "schema": "CREATE TABLE Ship (Class TEXT); CREATE TABLE captain (Class TEXT, Captain_ID NUMBER);"
      },
      {
        "question": "Group by class and count.",
        "query": "SELECT CLASS, count(*) FROM captain GROUP BY CLASS",
        "schema": "CREATE TABLE Ship (Class TEXT); CREATE TABLE captain (Captain_ID NUMBER, Class TEXT);"
      },
      {
        "question": "Which class has more than two?",
        "query": "SELECT CLASS FROM captain GROUP BY CLASS HAVING count(*) > 2",
        "schema": "CREATE TABLE captain (Class TEXT, Captain_ID NUMBER); CREATE TABLE Ship (Class TEXT);"
      }
    ],
    [
      {
        "question": "How many captains are either Midshipman or Lieutenant?",
        "query": "SELECT count(*) FROM captain WHERE rank = 'Midshipman' OR rank = 'Lieutenant'",
        "schema": "CREATE TABLE captain (Name TEXT, age TEXT, Class TEXT, Rank TEXT, Captain_ID NUMBER);"
      },
      {
        "question": "What are their names?",
        "query": "SELECT name FROM captain WHERE rank = 'Midshipman' OR rank = 'Lieutenant'",
        "schema": "CREATE TABLE captain (age TEXT, Name TEXT, Captain_ID NUMBER, Rank TEXT, Class TEXT); CREATE TABLE Ship (Name TEXT, Ship_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Order class by increasing age. Also show age.",
        "query": "SELECT CLASS, age FROM captain ORDER BY age",
        "schema": "CREATE TABLE captain (age TEXT, Class TEXT); CREATE TABLE Ship (Class TEXT, Ship_ID NUMBER);"
      },
      {
        "question": "What are the average and minimum age of captains in different class?",
        "query": "SELECT avg(age) , min(age) , CLASS FROM captain GROUP BY CLASS",
        "schema": "CREATE TABLE Ship (Ship_ID NUMBER, Class TEXT); CREATE TABLE captain (Class TEXT, age TEXT);"
      }
    ],
    [
      {
        "question": "Which ranks of captains are in the Cutter class?",
        "query": "SELECT DISTINCT rank FROM captain WHERE CLASS = 'Cutter'",
        "schema": "CREATE TABLE Ship (Class TEXT); CREATE TABLE captain (Rank TEXT, Class TEXT);"
      },
      {
        "question": "How about Armed schooner?",
        "query": "SELECT rank FROM captain WHERE CLASS = 'Armed schooner'",
        "schema": "CREATE TABLE captain (Rank TEXT, Class TEXT); CREATE TABLE Ship (Class TEXT);"
      },
      {
        "question": "Intersect those.",
        "query": "SELECT rank FROM captain WHERE CLASS = 'Cutter' INTERSECT SELECT rank FROM captain WHERE CLASS = 'Armed schooner'",
        "schema": "CREATE TABLE Ship (Class TEXT); CREATE TABLE captain (Rank TEXT, Class TEXT);"
      }
    ],
    [
      {
        "question": "For each class, what are the ranks?",
        "query": "SELECT DISTINCT CLASS, rank FROM captain ORDER BY CLASS",
        "schema": "CREATE TABLE Ship (Class TEXT); CREATE TABLE captain (Class TEXT, Rank TEXT);"
      },
      {
        "question": "Find the captain rank that has no captain in Third-rate ship of the line class.",
        "query": "SELECT rank FROM captain EXCEPT SELECT rank FROM captain WHERE CLASS = 'Third-rate ship of the line'",
        "schema": "CREATE TABLE Ship (Class TEXT, Ship_ID NUMBER); CREATE TABLE captain (Ship_ID NUMBER, Rank TEXT, Class TEXT);"
      }
    ],
    [
      {
        "question": "Sort captains records by age.",
        "query": "SELECT * FROM captain ORDER BY age",
        "schema": "CREATE TABLE captain (Name TEXT, Rank TEXT, age TEXT, Captain_ID NUMBER);"
      },
      {
        "question": "Just their names.",
        "query": "SELECT name FROM captain ORDER BY age",
        "schema": "CREATE TABLE captain (Rank TEXT, age TEXT, Name TEXT, Captain_ID NUMBER);"
      },
      {
        "question": "limit it to the one youngest.",
        "query": "SELECT name FROM captain ORDER BY age LIMIT 1",
        "schema": "CREATE TABLE captain (age TEXT, Name TEXT, Captain_ID NUMBER, Rank TEXT);"
      }
    ],
    [
      {
        "question": "What is the most recent build year?",
        "query": "SELECT max(built_year) FROM ship",
        "schema": "CREATE TABLE Ship (Ship_ID NUMBER, Built_Year NUMBER);"
      },
      {
        "question": "Which ships were built in the most recent year?",
        "query": "SELECT name FROM ship WHERE built_year IN (SELECT max(built_year) FROM ship)",
        "schema": "CREATE TABLE Ship (Built_Year NUMBER, Name TEXT, Ship_ID NUMBER); CREATE TABLE captain (Ship_ID NUMBER);"
      },
      {
        "question": "Also give the type and flag.",
        "query": "SELECT name, TYPE, flag FROM ship WHERE built_year IN (SELECT max(built_year) FROM ship)",
        "schema": "CREATE TABLE Ship (Built_Year NUMBER, Flag TEXT, Name TEXT, Ship_ID NUMBER, Type TEXT); CREATE TABLE captain (Ship_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Which flags are used?",
        "query": "SELECT DISTINCT flag FROM ship",
        "schema": "CREATE TABLE Ship (Flag TEXT);"
      },
      {
        "question": "Which is most common?",
        "query": "SELECT flag FROM ship GROUP BY flag ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Ship (Flag TEXT, Type TEXT, Ship_ID NUMBER, Name TEXT); CREATE TABLE captain (Ship_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Which type of ship has flag Panama?",
        "query": "SELECT DISTINCT TYPE FROM ship WHERE flag = 'Panama'",
        "schema": "CREATE TABLE Ship (Type TEXT, Ship_ID NUMBER, Flag TEXT, Name TEXT); CREATE TABLE captain (Ship_ID NUMBER);"
      },
      {
        "question": "How about Malta?",
        "query": "SELECT TYPE FROM ship WHERE flag = 'Malta'",
        "schema": "CREATE TABLE captain (Ship_ID NUMBER); CREATE TABLE Ship (Ship_ID NUMBER, Flag TEXT, Type TEXT, Name TEXT);"
      },
      {
        "question": "Which types have ships with both flags?",
        "query": "SELECT TYPE FROM ship WHERE flag = 'Panama' INTERSECT SELECT TYPE FROM ship WHERE flag = 'Malta'",
        "schema": "CREATE TABLE captain (Ship_ID NUMBER); CREATE TABLE Ship (Name TEXT, Flag TEXT, Ship_ID NUMBER, Type TEXT);"
      }
    ],
    [
      {
        "question": "What are the distinct build years of ships?",
        "query": "SELECT DISTINCT built_year FROM ship",
        "schema": "CREATE TABLE Ship (Type TEXT, Ship_ID NUMBER, Built_Year NUMBER, Name TEXT); CREATE TABLE captain (Ship_ID NUMBER);"
      },
      {
        "question": "Which is more common?",
        "query": "SELECT built_year FROM ship GROUP BY built_year ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE captain (Ship_ID NUMBER); CREATE TABLE Ship (Type TEXT, Built_Year NUMBER, Ship_ID NUMBER, Name TEXT);"
      }
    ],
    [
      {
        "question": "List each ship with its captains.",
        "query": "SELECT t1.name, t2.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id = t2.ship_id",
        "schema": "CREATE TABLE captain (Captain_ID NUMBER, Ship_ID NUMBER, Name TEXT); CREATE TABLE Ship (Ship_ID NUMBER, Name TEXT, Type TEXT);"
      },
      {
        "question": "Which ship has more than one captain?",
        "query": "SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id = t2.ship_id GROUP BY t2.ship_id HAVING count(*) > 1",
        "schema": "CREATE TABLE Ship (Type TEXT, Ship_ID NUMBER, Name TEXT); CREATE TABLE captain (Ship_ID NUMBER, Name TEXT, Captain_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Which ship ids are not in the captain records?",
        "query": "SELECT ship_id FROM ship EXCEPT SELECT ship_id FROM captain",
        "schema": "CREATE TABLE captain (Captain_ID NUMBER, Ship_ID NUMBER); CREATE TABLE Ship (Ship_ID NUMBER, Type TEXT);"
      },
      {
        "question": "Give their names and classes",
        "query": "SELECT name , CLASS FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain)",
        "schema": "CREATE TABLE Ship (Name TEXT, Ship_ID NUMBER, Class TEXT, Type TEXT); CREATE TABLE captain (Ship_ID NUMBER, Class TEXT, Name TEXT, Captain_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Who is the youngest captain?",
        "query": "SELECT name FROM captain ORDER BY age ASC LIMIT 1",
        "schema": "CREATE TABLE captain (Name TEXT, Captain_ID NUMBER, age TEXT, Rank TEXT);"
      },
      {
        "question": "Which ship does he steer?",
        "query": "SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id = t2.ship_id ORDER BY t2.age LIMIT 1",
        "schema": "CREATE TABLE Ship (Name TEXT, Ship_ID NUMBER, Type TEXT); CREATE TABLE captain (Name TEXT, Captain_ID NUMBER, Rank TEXT, Ship_ID NUMBER, age TEXT);"
      }
    ],
    [
      {
        "question": "Which ship ids are steered by captains with the Midshipman rank?",
        "query": "SELECT DISTINCT ship_id FROM captain WHERE rank = 'Midshipman'",
        "schema": "CREATE TABLE Ship (Ship_ID NUMBER); CREATE TABLE captain (Ship_ID NUMBER, Rank TEXT, Captain_ID NUMBER);"
      },
      {
        "question": "Which are not?",
        "query": "SELECT ship_id FROM ship EXCEPT SELECT ship_id FROM captain WHERE rank = 'Midshipman'",
        "schema": "CREATE TABLE captain (Captain_ID NUMBER, Rank TEXT, Ship_ID NUMBER); CREATE TABLE Ship (Ship_ID NUMBER);"
      },
      {
        "question": "What are their names and flags?",
        "query": "SELECT name , flag FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain WHERE rank = 'Midshipman')",
        "schema": "CREATE TABLE Ship (Ship_ID NUMBER, Name TEXT, Flag TEXT); CREATE TABLE captain (Captain_ID NUMBER, Rank TEXT, Ship_ID NUMBER, Name TEXT);"
      }
    ]
  ],
  "game_injury": [
    [
      {
        "question": "Show me the names of all the stadiums.",
        "query": "SELECT name FROM stadium",
        "schema": "CREATE TABLE game (id NUMBER, stadium_id NUMBER); CREATE TABLE stadium (name TEXT, id NUMBER);"
      },
      {
        "question": "How many home games did each of them hold?",
        "query": "SELECT name, home_games FROM stadium",
        "schema": "CREATE TABLE stadium (Home_Games NUMBER, Total_Attendance NUMBER, name TEXT, id NUMBER); CREATE TABLE game (Home_team TEXT, stadium_id NUMBER, id NUMBER);"
      },
      {
        "question": "Show me the maxium, minimum, and average of them.",
        "query": "SELECT max(home_games) , min(home_games) , avg(home_games) FROM stadium",
        "schema": "CREATE TABLE game (stadium_id NUMBER, id NUMBER, Home_team TEXT); CREATE TABLE stadium (Average_Attendance NUMBER, name TEXT, id NUMBER, Home_Games NUMBER, Total_Attendance NUMBER);"
      }
    ],
    [
      {
        "question": "Show me all the players who got injured.",
        "query": "SELECT player FROM injury_accident",
        "schema": "CREATE TABLE injury_accident (Injury TEXT, Player TEXT, id NUMBER, game_id NUMBER); CREATE TABLE stadium (Capacity_Percentage NUMBER); CREATE TABLE game (id NUMBER);"
      },
      {
        "question": "Show me the date of the game that causes Walter Samuel to get injured?",
        "query": "SELECT t1.date FROM game AS t1 JOIN injury_accident AS t2 ON t1.id = t2.game_id WHERE t2.player = 'Walter Samuel'",
        "schema": "CREATE TABLE injury_accident (Player TEXT, id NUMBER, Injury TEXT, game_id NUMBER); CREATE TABLE game (Date TEXT, id NUMBER, Season NUMBER); CREATE TABLE stadium (Capacity_Percentage NUMBER);"
      },
      {
        "question": "What about its season?",
        "query": "SELECT t1.season FROM game AS t1 JOIN injury_accident AS t2 ON t1.id = t2.game_id WHERE t2.player = 'Walter Samuel'",
        "schema": "CREATE TABLE stadium (id NUMBER, Capacity_Percentage NUMBER); CREATE TABLE injury_accident (game_id NUMBER, Player TEXT, Injury TEXT, id NUMBER); CREATE TABLE game (Competition TEXT, Season NUMBER, Date TEXT, id NUMBER);"
      }
    ],
    [
      {
        "question": "Show me all the players who got injured.",
        "query": "SELECT player FROM injury_accident",
        "schema": "CREATE TABLE injury_accident (Injury TEXT, id NUMBER, Player TEXT, game_id NUMBER); CREATE TABLE game (id NUMBER); CREATE TABLE stadium (Capacity_Percentage NUMBER);"
      },
      {
        "question": "What about their game ids?",
        "query": "SELECT player, game_id FROM injury_accident",
        "schema": "CREATE TABLE stadium (Capacity_Percentage NUMBER, id NUMBER); CREATE TABLE injury_accident (game_id NUMBER, id NUMBER, Player TEXT, Injury TEXT); CREATE TABLE game (stadium_id NUMBER, id NUMBER);"
      },
      {
        "question": "Which games caused at least two injury accidents?",
        "query": "SELECT game_id FROM injury_accident GROUP BY game_id HAVING count(*) >= 2",
        "schema": "CREATE TABLE stadium (Capacity_Percentage NUMBER, id NUMBER); CREATE TABLE injury_accident (id NUMBER, Injury TEXT, Number_of_matches TEXT, Player TEXT, game_id NUMBER); CREATE TABLE game (id NUMBER, stadium_id NUMBER);"
      },
      {
        "question": "Show me their ids, scores, and dates.",
        "query": "SELECT t1.id , t1.score , t1.date FROM game AS t1 JOIN injury_accident AS t2 ON t2.game_id = t1.id GROUP BY t1.id HAVING count(*) >= 2",
        "schema": "CREATE TABLE stadium (Capacity_Percentage NUMBER, id NUMBER); CREATE TABLE injury_accident (Injury TEXT, game_id NUMBER, Player TEXT, Number_of_matches TEXT, id NUMBER); CREATE TABLE game (stadium_id NUMBER, Competition TEXT, id NUMBER, Score TEXT, Date TEXT);"
      }
    ],
    [
      {
        "question": "Show me all the injury accidents.",
        "query": "SELECT * FROM injury_accident",
        "schema": "CREATE TABLE stadium (Capacity_Percentage NUMBER, id NUMBER); CREATE TABLE game (id NUMBER); CREATE TABLE injury_accident (Player TEXT, Source TEXT, Injury TEXT, Number_of_matches TEXT, game_id NUMBER, id NUMBER);"
      },
      {
        "question": "Show me distinct names of the stadium in which those accidents happened.",
        "query": "SELECT DISTINCT t1.name FROM stadium AS t1 JOIN game AS t2 ON t1.id = t2.stadium_id JOIN injury_accident AS t3 ON t2.id = t3.game_id",
        "schema": "CREATE TABLE stadium (id NUMBER, Capacity_Percentage NUMBER, name TEXT); CREATE TABLE injury_accident (id NUMBER, Injury TEXT, Source TEXT, game_id NUMBER, Player TEXT, Number_of_matches TEXT); CREATE TABLE game (id NUMBER, stadium_id NUMBER);"
      },
      {
        "question": "Show me the id and name of the one where the most injury accidents happened.",
        "query": "SELECT t1.id , t1.name FROM stadium AS t1 JOIN game AS t2 ON t1.id = t2.stadium_id JOIN injury_accident AS t3 ON t2.id = t3.game_id GROUP BY t1.id ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE injury_accident (Source TEXT, game_id NUMBER, Number_of_matches TEXT, Injury TEXT, id NUMBER, Player TEXT); CREATE TABLE game (stadium_id NUMBER, id NUMBER, Competition TEXT); CREATE TABLE stadium (id NUMBER, name TEXT, Capacity_Percentage NUMBER);"
      }
    ],
    [
      {
        "question": "Show me all the injuries.",
        "query": "SELECT injury FROM injury_accident",
        "schema": "CREATE TABLE stadium (id NUMBER, Capacity_Percentage NUMBER); CREATE TABLE injury_accident (Player TEXT, Number_of_matches TEXT, Source TEXT, id NUMBER, game_id NUMBER, Injury TEXT); CREATE TABLE game (id NUMBER);"
      },
      {
        "question": "Show me the ids of the games where those of 'Foot injury' or 'Knee problem' happened.",
        "query": "SELECT game_id FROM injury_accident WHERE injury = 'Foot injury' OR injury = 'Knee problem'",
        "schema": "CREATE TABLE stadium (id NUMBER, Capacity_Percentage NUMBER); CREATE TABLE game (id NUMBER); CREATE TABLE injury_accident (id NUMBER, Injury TEXT, Source TEXT, Player TEXT, Number_of_matches TEXT, game_id NUMBER);"
      },
      {
        "question": "What about their seasons and stadiums?",
        "query": "SELECT t1.season , t2.name FROM game AS t1 JOIN stadium AS t2 ON t1.stadium_id = t2.id JOIN injury_accident AS t3 ON t1.id = t3.game_id WHERE t3.injury = 'Foot injury' OR t3.injury = 'Knee problem'",
        "schema": "CREATE TABLE injury_accident (id NUMBER, Player TEXT, Injury TEXT, game_id NUMBER, Number_of_matches TEXT, Source TEXT); CREATE TABLE game (id NUMBER, Season NUMBER, stadium_id NUMBER); CREATE TABLE stadium (name TEXT, id NUMBER, Average_Attendance NUMBER, Home_Games NUMBER, Capacity_Percentage NUMBER, Total_Attendance NUMBER);"
      }
    ],
    [
      {
        "question": "How many industry accidents are there?",
        "query": "SELECT count(*) FROM injury_accident",
        "schema": "CREATE TABLE game (Competition TEXT, id NUMBER); CREATE TABLE injury_accident (Player TEXT, id NUMBER, Source TEXT, game_id NUMBER, Injury TEXT);"
      },
      {
        "question": "Show me their game ids.",
        "query": "SELECT game_id FROM injury_accident",
        "schema": "CREATE TABLE game (Competition TEXT, stadium_id NUMBER, id NUMBER); CREATE TABLE injury_accident (Source TEXT, id NUMBER, Player TEXT, game_id NUMBER, Injury TEXT); CREATE TABLE stadium (id NUMBER);"
      },
      {
        "question": "Which games are not one of them?",
        "query": "SELECT id FROM game WHERE id NOT IN ( SELECT game_id FROM injury_accident )",
        "schema": "CREATE TABLE injury_accident (Source TEXT, id NUMBER, Number_of_matches TEXT, game_id NUMBER, Injury TEXT, Player TEXT); CREATE TABLE stadium (id NUMBER); CREATE TABLE game (id NUMBER, stadium_id NUMBER, Competition TEXT);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT count(*) FROM game WHERE id NOT IN ( SELECT game_id FROM injury_accident )",
        "schema": "CREATE TABLE injury_accident (Player TEXT, Source TEXT, Injury TEXT, id NUMBER, Number_of_matches TEXT, game_id NUMBER); CREATE TABLE game (id NUMBER, Competition TEXT, stadium_id NUMBER); CREATE TABLE stadium (id NUMBER);"
      }
    ],
    [
      {
        "question": "Show me all distinct kinds of injuries.",
        "query": "SELECT DISTINCT injury FROM injury_accident",
        "schema": "CREATE TABLE injury_accident (id NUMBER, Number_of_matches TEXT, Player TEXT, Injury TEXT, game_id NUMBER); CREATE TABLE game (id NUMBER);"
      },
      {
        "question": "What about those happened after season 2010?",
        "query": "SELECT DISTINCT t1.injury FROM injury_accident AS t1 JOIN game AS t2 ON t1.game_id = t2.id WHERE t2.season > 2010",
        "schema": "CREATE TABLE game (id NUMBER, Season NUMBER, Date TEXT); CREATE TABLE injury_accident (Number_of_matches TEXT, id NUMBER, Player TEXT, Injury TEXT, game_id NUMBER);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT count(DISTINCT t1.injury) FROM injury_accident AS t1 JOIN game AS t2 ON t1.game_id = t2.id WHERE t2.season > 2010",
        "schema": "CREATE TABLE game (Date TEXT, id NUMBER, Season NUMBER); CREATE TABLE injury_accident (Injury TEXT, game_id NUMBER, id NUMBER, Number_of_matches TEXT, Player TEXT);"
      }
    ],
    [
      {
        "question": "Show me the name of players that got injured?",
        "query": "SELECT player FROM injury_accident",
        "schema": "CREATE TABLE stadium (Capacity_Percentage NUMBER); CREATE TABLE injury_accident (Player TEXT, id NUMBER, Injury TEXT, game_id NUMBER); CREATE TABLE game (id NUMBER);"
      },
      {
        "question": "Give me the id of the games where Walter Samuel and Thiago Motta got injured.",
        "query": "SELECT game_id FROM injury_accident WHERE player = 'Walter Samuel' OR player = 'Thiago Motta'",
        "schema": "CREATE TABLE stadium (id NUMBER, Capacity_Percentage NUMBER); CREATE TABLE game (Season NUMBER, id NUMBER); CREATE TABLE injury_accident (game_id NUMBER, Player TEXT, Injury TEXT, id NUMBER);"
      },
      {
        "question": "What about the name of the stadium where both of them got injured?",
        "query": "SELECT t2.name FROM game AS t1 JOIN stadium AS t2 ON t1.stadium_id = t2.id JOIN injury_accident AS t3 ON t1.id = t3.game_id WHERE t3.player = 'Walter Samuel' INTERSECT SELECT t2.name FROM game AS t1 JOIN stadium AS t2 ON t1.stadium_id = t2.id JOIN injury_accident AS t3 ON t1.id = t3.game_id WHERE t3.player = 'Thiago Motta'",
        "schema": "CREATE TABLE stadium (Home_Games NUMBER, id NUMBER, Capacity_Percentage NUMBER, name TEXT); CREATE TABLE injury_accident (game_id NUMBER, Injury TEXT, Player TEXT, id NUMBER); CREATE TABLE game (stadium_id NUMBER, id NUMBER, Season NUMBER);"
      }
    ],
    [
      {
        "question": "Show me the game ids of all the injury accidents.",
        "query": "SELECT game_id FROM injury_accident",
        "schema": "CREATE TABLE stadium (id NUMBER, Capacity_Percentage NUMBER); CREATE TABLE game (id NUMBER, stadium_id NUMBER); CREATE TABLE injury_accident (Player TEXT, game_id NUMBER, Injury TEXT, id NUMBER, Number_of_matches TEXT);"
      },
      {
        "question": "Which stadium did each of them happen?",
        "query": "SELECT t2.name , t3.game_id FROM game AS t1 JOIN stadium AS t2 ON t1.stadium_id = t2.id JOIN injury_accident AS t3 ON t1.id = t3.game_id GROUP BY t3.game_id",
        "schema": "CREATE TABLE injury_accident (id NUMBER, Player TEXT, Injury TEXT, game_id NUMBER, Number_of_matches TEXT); CREATE TABLE stadium (id NUMBER, Home_Games NUMBER, Capacity_Percentage NUMBER, name TEXT); CREATE TABLE game (stadium_id NUMBER, id NUMBER);"
      },
      {
        "question": "Show me the name of stadiums which are not one of those.",
        "query": "SELECT name FROM stadium EXCEPT SELECT t2.name FROM game AS t1 JOIN stadium AS t2 ON t1.stadium_id = t2.id JOIN injury_accident AS t3 ON t1.id = t3.game_id GROUP BY t3.game_id",
        "schema": "CREATE TABLE stadium (id NUMBER, name TEXT, Home_Games NUMBER, Capacity_Percentage NUMBER); CREATE TABLE game (Competition TEXT, stadium_id NUMBER, id NUMBER); CREATE TABLE injury_accident (Injury TEXT, Number_of_matches TEXT, id NUMBER, game_id NUMBER, Player TEXT);"
      },
      {
        "question": "Also show me their average attendance and total attendance.",
        "query": "SELECT name , average_attendance , total_attendance FROM stadium EXCEPT SELECT t2.name , t2.average_attendance , t2.total_attendance FROM game AS t1 JOIN stadium AS t2 ON t1.stadium_id = t2.id JOIN injury_accident AS t3 ON t1.id = t3.game_id",
        "schema": "CREATE TABLE stadium (Average_Attendance NUMBER, id NUMBER, Total_Attendance NUMBER, Capacity_Percentage NUMBER, name TEXT, Home_Games NUMBER); CREATE TABLE injury_accident (id NUMBER, game_id NUMBER, Number_of_matches TEXT, Injury TEXT, Player TEXT); CREATE TABLE game (Competition TEXT, stadium_id NUMBER, id NUMBER);"
      }
    ],
    [
      {
        "question": "Show me the name of all the stadiums.",
        "query": "SELECT name FROM stadium",
        "schema": "CREATE TABLE game (stadium_id NUMBER, id NUMBER); CREATE TABLE stadium (id NUMBER, name TEXT);"
      },
      {
        "question": "Which one contains \"Bank\" in it?",
        "query": "SELECT name FROM stadium WHERE name LIKE \"%Bank%\"",
        "schema": "CREATE TABLE stadium (id NUMBER, name TEXT); CREATE TABLE game (id NUMBER, stadium_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show me the name of all the stadiums.",
        "query": "SELECT name FROM stadium",
        "schema": "CREATE TABLE game (stadium_id NUMBER, id NUMBER); CREATE TABLE stadium (id NUMBER, name TEXT);"
      },
      {
        "question": "How many games has each of them held?",
        "query": "SELECT t1.name , count(*) FROM stadium AS t1 JOIN game AS t2 ON t1.id = t2.stadium_id GROUP BY t1.id",
        "schema": "CREATE TABLE game (stadium_id NUMBER, id NUMBER); CREATE TABLE stadium (id NUMBER, Home_Games NUMBER, name TEXT);"
      }
    ]
  ],
  "small_bank_1": [
    [
      {
        "question": "How many savings accounts are there?",
        "query": "SELECT count(custid) FROM accounts",
        "schema": "CREATE TABLE ACCOUNTS (name TEXT, custid NUMBER); CREATE TABLE SAVINGS (custid NUMBER, balance NUMBER);"
      },
      {
        "question": "What are their saving balances?",
        "query": "SELECT t2.balance FROM accounts AS t1 JOIN savings AS t2 ON t1.custid = t2.custid",
        "schema": "CREATE TABLE SAVINGS (balance NUMBER, custid NUMBER); CREATE TABLE ACCOUNTS (custid NUMBER, name TEXT);"
      },
      {
        "question": "Remove Brown's saving balance.",
        "query": "SELECT t2.balance FROM accounts AS t1 JOIN savings AS t2 ON t1.custid = t2.custid WHERE t1.name != \"Brown\"",
        "schema": "CREATE TABLE SAVINGS (balance NUMBER, custid NUMBER); CREATE TABLE ACCOUNTS (name TEXT, custid NUMBER);"
      },
      {
        "question": "What is the total of these saving balances?",
        "query": "SELECT sum(t2.balance) FROM accounts AS t1 JOIN savings AS t2 ON t1.custid = t2.custid WHERE t1.name != 'Brown'",
        "schema": "CREATE TABLE SAVINGS (balance NUMBER, custid NUMBER); CREATE TABLE ACCOUNTS (custid NUMBER, name TEXT);"
      }
    ],
    [
      {
        "question": "What is the maximum savings balance?",
        "query": "SELECT max(balance)FROM savings",
        "schema": "CREATE TABLE SAVINGS (balance NUMBER, custid NUMBER);"
      },
      {
        "question": "What is the average?",
        "query": "SELECT avg(balance) FROM savings",
        "schema": "CREATE TABLE SAVINGS (custid NUMBER, balance NUMBER);"
      },
      {
        "question": "Who are names of the people that are above this average?",
        "query": "SELECT t1.name FROM accounts AS t1 JOIN savings AS t2 ON t1.custid = t2.custid WHERE t2.balance > (SELECT avg(balance) FROM savings)",
        "schema": "CREATE TABLE ACCOUNTS (name TEXT, custid NUMBER); CREATE TABLE SAVINGS (custid NUMBER, balance NUMBER);"
      },
      {
        "question": "How many of them are there?",
        "query": "SELECT count(*) FROM savings WHERE balance > (SELECT avg(balance) FROM savings)",
        "schema": "CREATE TABLE SAVINGS (custid NUMBER, balance NUMBER); CREATE TABLE ACCOUNTS (custid NUMBER, name TEXT);"
      }
    ],
    [
      {
        "question": "What account has the maximum checking balance?",
        "query": "SELECT custid FROM checking WHERE balance = (SELECT max(balance) FROM checking)",
        "schema": "CREATE TABLE ACCOUNTS (name TEXT, custid NUMBER); CREATE TABLE CHECKING (balance NUMBER, custid NUMBER);"
      },
      {
        "question": "What is the checking balance?",
        "query": "SELECT max(balance) FROM checking",
        "schema": "CREATE TABLE CHECKING (balance NUMBER, custid NUMBER); CREATE TABLE ACCOUNTS (name TEXT, custid NUMBER);"
      },
      {
        "question": "Show all the account names that have checking balances lower than this.",
        "query": "SELECT t1.name FROM accounts AS t1 JOIN checking AS t2 ON t1.custid = t2.custid WHERE t2.balance < (SELECT max(balance) FROM checking)",
        "schema": "CREATE TABLE CHECKING (balance NUMBER, custid NUMBER); CREATE TABLE ACCOUNTS (name TEXT, custid NUMBER);"
      },
      {
        "question": "also provide their ids.",
        "query": "SELECT t1.custid, t1.name FROM accounts AS t1 JOIN checking AS t2 ON t1.custid = t2.custid WHERE t2.balance < (SELECT max(balance) FROM checking)",
        "schema": "CREATE TABLE CHECKING (balance NUMBER, custid NUMBER); CREATE TABLE ACCOUNTS (name TEXT, custid NUMBER);"
      }
    ],
    [
      {
        "question": "List all the account owner names.",
        "query": "SELECT name FROM accounts",
        "schema": "CREATE TABLE ACCOUNTS (name TEXT, custid NUMBER);"
      },
      {
        "question": "Is there an owner with the name that has 'ee' in it?",
        "query": "SELECT name FROM accounts WHERE name LIKE '%ee%'",
        "schema": "CREATE TABLE ACCOUNTS (name TEXT, custid NUMBER);"
      },
      {
        "question": "What is the savings balance for that owner?",
        "query": "SELECT t2.balance FROM accounts AS t1 JOIN savings AS t2 ON t1.custid = t2.custid WHERE t1.name LIKE '%ee%'",
        "schema": "CREATE TABLE SAVINGS (balance NUMBER, custid NUMBER); CREATE TABLE ACCOUNTS (name TEXT, custid NUMBER);"
      },
      {
        "question": "How about the checking balance?",
        "query": "SELECT t2.balance FROM accounts AS t1 JOIN checking AS t2 ON t1.custid = t2.custid WHERE t1.name LIKE '%ee%'",
        "schema": "CREATE TABLE SAVINGS (custid NUMBER, balance NUMBER); CREATE TABLE ACCOUNTS (name TEXT, custid NUMBER); CREATE TABLE CHECKING (balance NUMBER, custid NUMBER);"
      }
    ],
    [
      {
        "question": "Is there an owner named Brown?",
        "query": "SELECT * FROM accounts WHERE name = \"Brown\"",
        "schema": "CREATE TABLE SAVINGS (custid NUMBER); CREATE TABLE ACCOUNTS (custid NUMBER, name TEXT);"
      },
      {
        "question": "What is his checking balance?",
        "query": "SELECT t2.balance FROM accounts AS t1 JOIN checking AS t2 ON t1.custid = t2.custid WHERE t1.name = 'Brown'",
        "schema": "CREATE TABLE SAVINGS (custid NUMBER); CREATE TABLE ACCOUNTS (custid NUMBER, name TEXT); CREATE TABLE CHECKING (balance NUMBER, custid NUMBER);"
      },
      {
        "question": "What is his savings balance?",
        "query": "SELECT t2.balance FROM accounts AS t1 JOIN savings AS t2 ON t1.custid = t2.custid WHERE t1.name = 'Brown'",
        "schema": "CREATE TABLE ACCOUNTS (name TEXT, custid NUMBER); CREATE TABLE SAVINGS (balance NUMBER, custid NUMBER); CREATE TABLE CHECKING (custid NUMBER, balance NUMBER);"
      },
      {
        "question": "Please show both at the same time.",
        "query": "SELECT t2.balance, t3.balance FROM accounts AS t1 JOIN checking AS t2 ON t1.custid = t2.custid JOIN savings AS t3 ON t1.custid = t3.custid WHERE t1.name = 'Brown'",
        "schema": "CREATE TABLE CHECKING (custid NUMBER, balance NUMBER); CREATE TABLE ACCOUNTS (custid NUMBER, name TEXT); CREATE TABLE SAVINGS (balance NUMBER, custid NUMBER);"
      }
    ],
    [
      {
        "question": "What is the average saving balance?",
        "query": "SELECT avg(balance) FROM savings",
        "schema": "CREATE TABLE SAVINGS (custid NUMBER, balance NUMBER);"
      },
      {
        "question": "Who have savings account balances below that?",
        "query": "SELECT t1.name FROM accounts AS t1 JOIN savings AS t2 ON t1.custid = t2.custid WHERE t2.balance < (SELECT avg(balance) FROM savings)",
        "schema": "CREATE TABLE SAVINGS (custid NUMBER, balance NUMBER); CREATE TABLE ACCOUNTS (name TEXT, custid NUMBER);"
      },
      {
        "question": "What are their checking account balances?",
        "query": "SELECT t1.name, t2.balance FROM accounts AS t1 JOIN checking AS t2 ON t1.custid = t2.custid WHERE t2.custid IN (SELECT t1.custid FROM accounts AS t1 JOIN savings AS t2 ON t1.custid = t2.custid WHERE t2.balance < (SELECT avg(balance) FROM savings))",
        "schema": "CREATE TABLE SAVINGS (custid NUMBER, balance NUMBER); CREATE TABLE CHECKING (balance NUMBER, custid NUMBER); CREATE TABLE ACCOUNTS (name TEXT, custid NUMBER);"
      },
      {
        "question": "Who of these users have checking account balances above the average checking balance of all users?",
        "query": "SELECT t1.name FROM accounts AS t1 JOIN checking AS t2 ON t1.custid = t2.custid WHERE t2.balance > (SELECT avg(balance) FROM checking) INTERSECT SELECT t1.name FROM accounts AS t1 JOIN savings AS t2 ON t1.custid = t2.custid WHERE t2.balance < (SELECT avg(balance) FROM savings)",
        "schema": "CREATE TABLE CHECKING (balance NUMBER, custid NUMBER); CREATE TABLE ACCOUNTS (custid NUMBER, name TEXT); CREATE TABLE SAVINGS (balance NUMBER, custid NUMBER);"
      }
    ],
    [
      {
        "question": "What is the average savings balance?",
        "query": "SELECT avg(balance) FROM savings",
        "schema": "CREATE TABLE SAVINGS (custid NUMBER, balance NUMBER);"
      },
      {
        "question": "How many people have savings account balances over it?",
        "query": "SELECT count(*) FROM savings WHERE balance > (SELECT avg(balance) FROM savings)",
        "schema": "CREATE TABLE ACCOUNTS (custid NUMBER, name TEXT); CREATE TABLE SAVINGS (custid NUMBER, balance NUMBER);"
      },
      {
        "question": "What are their names?",
        "query": "SELECT t1.name FROM accounts AS t1 JOIN savings AS t2 ON t1.custid = t2.custid WHERE t2.balance > (SELECT avg(balance) FROM savings)",
        "schema": "CREATE TABLE ACCOUNTS (name TEXT, custid NUMBER); CREATE TABLE SAVINGS (custid NUMBER, balance NUMBER);"
      },
      {
        "question": "What are their checking account balances?",
        "query": "SELECT t2.balance FROM accounts AS t1 JOIN checking AS t2 ON t1.custid = t2.custid WHERE t1.name IN (SELECT t1.name FROM accounts AS t1 JOIN savings AS t2 ON t1.custid = t2.custid WHERE t2.balance > (SELECT avg(balance) FROM savings))",
        "schema": "CREATE TABLE CHECKING (custid NUMBER, balance NUMBER); CREATE TABLE ACCOUNTS (name TEXT, custid NUMBER); CREATE TABLE SAVINGS (custid NUMBER, balance NUMBER);"
      }
    ],
    [
      {
        "question": "What is the name of the user that has the lowest checking balance?",
        "query": "SELECT t1.name FROM accounts AS t1 JOIN checking AS t2 ON t1.custid = t2.custid ORDER BY t2.balance LIMIT 1",
        "schema": "CREATE TABLE CHECKING (custid NUMBER, balance NUMBER); CREATE TABLE ACCOUNTS (name TEXT, custid NUMBER);"
      },
      {
        "question": "the lowest saving balance?",
        "query": "SELECT t1.name FROM accounts AS t1 JOIN savings AS t2 ON t1.custid = t2.custid ORDER BY t2.balance LIMIT 1",
        "schema": "CREATE TABLE SAVINGS (custid NUMBER, balance NUMBER); CREATE TABLE CHECKING (balance NUMBER, custid NUMBER); CREATE TABLE ACCOUNTS (custid NUMBER, name TEXT);"
      },
      {
        "question": "how about the lowest total sum of checking and saving balance?",
        "query": "SELECT t1.name FROM accounts AS t1 JOIN checking AS t2 ON t1.custid = t2.custid JOIN savings AS t3 ON t1.custid = t3.custid ORDER BY t2.balance + t3.balance LIMIT 1",
        "schema": "CREATE TABLE SAVINGS (custid NUMBER, balance NUMBER); CREATE TABLE CHECKING (custid NUMBER, balance NUMBER); CREATE TABLE ACCOUNTS (custid NUMBER, name TEXT);"
      }
    ],
    [
      {
        "question": "How many accounts have savings balances greater than the average savings balance?",
        "query": "SELECT count(*) FROM savings WHERE balance > (SELECT avg(balance) FROM savings)",
        "schema": "CREATE TABLE ACCOUNTS (name TEXT, custid NUMBER); CREATE TABLE SAVINGS (custid NUMBER, balance NUMBER);"
      },
      {
        "question": "What are their names?",
        "query": "SELECT t1.name FROM accounts AS t1 JOIN savings AS t2 ON t1.custid = t2.custid WHERE t2.balance > (SELECT avg(balance) FROM savings)",
        "schema": "CREATE TABLE ACCOUNTS (name TEXT, custid NUMBER); CREATE TABLE SAVINGS (custid NUMBER, balance NUMBER);"
      },
      {
        "question": "What are their checking account balances?",
        "query": "SELECT t1.name, t2.balance FROM accounts AS t1 JOIN checking AS t2 ON t1.custid = t2.custid JOIN savings AS t3 ON t1.custid = t3.custid WHERE t3.balance > (SELECT avg(balance) FROM savings)",
        "schema": "CREATE TABLE ACCOUNTS (name TEXT, custid NUMBER); CREATE TABLE CHECKING (custid NUMBER, balance NUMBER); CREATE TABLE SAVINGS (custid NUMBER, balance NUMBER);"
      },
      {
        "question": "How about both their total checking and savings balances.",
        "query": "SELECT t1.name, t2.balance + t3.balance FROM accounts AS t1 JOIN checking AS t2 ON t1.custid = t2.custid JOIN savings AS t3 ON t1.custid = t3.custid WHERE t3.balance > (SELECT avg(balance) FROM savings)",
        "schema": "CREATE TABLE SAVINGS (custid NUMBER, balance NUMBER); CREATE TABLE ACCOUNTS (name TEXT, custid NUMBER); CREATE TABLE CHECKING (custid NUMBER, balance NUMBER);"
      }
    ],
    [
      {
        "question": "What are all the savings balances?",
        "query": "SELECT balance FROM savings",
        "schema": "CREATE TABLE SAVINGS (balance NUMBER, custid NUMBER);"
      },
      {
        "question": "What is the lowest one?",
        "query": "SELECT min(balance) FROM savings",
        "schema": "CREATE TABLE SAVINGS (custid NUMBER, balance NUMBER);"
      },
      {
        "question": "What is the name on the account has the lowest one?",
        "query": "SELECT t1.name FROM accounts AS t1 JOIN savings AS t2 ON t1.custid = t2.custid ORDER BY t2.balance LIMIT 1",
        "schema": "CREATE TABLE ACCOUNTS (custid NUMBER, name TEXT); CREATE TABLE SAVINGS (custid NUMBER, balance NUMBER);"
      },
      {
        "question": "Also provide the checking balance.",
        "query": "SELECT t1.name, t2.balance FROM accounts AS t1 JOIN checking AS t2 ON t1.custid = t2.custid JOIN savings AS t3 ON t1.custid = t3.custid ORDER BY t3.balance LIMIT 1",
        "schema": "CREATE TABLE CHECKING (balance NUMBER, custid NUMBER); CREATE TABLE SAVINGS (balance NUMBER, custid NUMBER); CREATE TABLE ACCOUNTS (name TEXT, custid NUMBER);"
      }
    ],
    [
      {
        "question": "Show all the names for each account.",
        "query": "SELECT name FROM accounts",
        "schema": "CREATE TABLE ACCOUNTS (custid NUMBER, name TEXT);"
      },
      {
        "question": "What are the unique set of names?",
        "query": "SELECT DISTINCT name FROM accounts",
        "schema": "CREATE TABLE ACCOUNTS (name TEXT, custid NUMBER);"
      },
      {
        "question": "How many savings accounts under each of these names?",
        "query": "SELECT count(*), t1.name FROM accounts AS t1 JOIN savings AS t2 ON t1.custid = t2.custid GROUP BY t1.name",
        "schema": "CREATE TABLE SAVINGS (balance NUMBER, custid NUMBER); CREATE TABLE ACCOUNTS (custid NUMBER, name TEXT);"
      },
      {
        "question": "How about checking accounts?",
        "query": "SELECT count(*), t1.name FROM accounts AS t1 JOIN checking AS t2 ON t1.custid = t2.custid GROUP BY t1.name",
        "schema": "CREATE TABLE CHECKING (custid NUMBER, balance NUMBER); CREATE TABLE ACCOUNTS (name TEXT, custid NUMBER); CREATE TABLE SAVINGS (balance NUMBER, custid NUMBER);"
      }
    ],
    [
      {
        "question": "What are the names of all the accounts?",
        "query": "SELECT name FROM accounts",
        "schema": "CREATE TABLE CHECKING (custid NUMBER); CREATE TABLE ACCOUNTS (custid NUMBER, name TEXT);"
      },
      {
        "question": "Show the savings balances for all accounts.",
        "query": "SELECT t1.name, t2.balance FROM accounts AS t1 JOIN savings AS t2 ON t1.custid = t2.custid",
        "schema": "CREATE TABLE SAVINGS (custid NUMBER, balance NUMBER); CREATE TABLE CHECKING (custid NUMBER); CREATE TABLE ACCOUNTS (custid NUMBER, name TEXT);"
      },
      {
        "question": "Now show me the total by account name.",
        "query": "SELECT sum(t2.balance), t1.name FROM accounts AS t1 JOIN savings AS t2 ON t1.custid = t2.custid GROUP BY t1.name",
        "schema": "CREATE TABLE SAVINGS (custid NUMBER, balance NUMBER); CREATE TABLE CHECKING (custid NUMBER); CREATE TABLE ACCOUNTS (name TEXT, custid NUMBER);"
      }
    ],
    [
      {
        "question": "What is the average checking balance?",
        "query": "SELECT avg(balance) FROM checking",
        "schema": "CREATE TABLE CHECKING (balance NUMBER, custid NUMBER);"
      },
      {
        "question": "What is the account information for those have greater checking balances than that?",
        "query": "SELECT * FROM accounts AS t1 JOIN checking AS t2 ON t1.custid = t2.custid WHERE t2.balance > (SELECT avg(balance) FROM checking)",
        "schema": "CREATE TABLE ACCOUNTS (custid NUMBER, name TEXT); CREATE TABLE CHECKING (custid NUMBER, balance NUMBER);"
      },
      {
        "question": "How about for lower checking balances?",
        "query": "SELECT * FROM accounts AS t1 JOIN checking AS t2 ON t1.custid = t2.custid WHERE t2.balance < (SELECT avg(balance) FROM checking)",
        "schema": "CREATE TABLE CHECKING (custid NUMBER, balance NUMBER); CREATE TABLE ACCOUNTS (custid NUMBER, name TEXT);"
      },
      {
        "question": "What are their account names?",
        "query": "SELECT t1.name FROM accounts AS t1 JOIN checking AS t2 ON t1.custid = t2.custid WHERE t2.balance < (SELECT avg(balance) FROM checking)",
        "schema": "CREATE TABLE CHECKING (custid NUMBER, balance NUMBER); CREATE TABLE ACCOUNTS (name TEXT, custid NUMBER);"
      }
    ],
    [
      {
        "question": "Whose checking balance is the highest?",
        "query": "SELECT name FROM accounts AS t1 JOIN checking AS t2 ON t1.custid = t2.custid ORDER BY t2.balance DESC LIMIT 1",
        "schema": "CREATE TABLE ACCOUNTS (name TEXT, custid NUMBER); CREATE TABLE CHECKING (balance NUMBER, custid NUMBER);"
      },
      {
        "question": "What is it?",
        "query": "SELECT t2.balance FROM accounts AS t1 JOIN checking AS t2 ON t1.custid = t2.custid ORDER BY t2.balance DESC LIMIT 1",
        "schema": "CREATE TABLE ACCOUNTS (custid NUMBER, name TEXT); CREATE TABLE CHECKING (balance NUMBER, custid NUMBER);"
      },
      {
        "question": "what is her saving balance?",
        "query": "SELECT t3.balance FROM accounts AS t1 JOIN checking AS t2 ON t1.custid = t2.custid JOIN savings AS t3 ON t1.custid = t3.custid ORDER BY t2.balance DESC LIMIT 1",
        "schema": "CREATE TABLE ACCOUNTS (custid NUMBER, name TEXT); CREATE TABLE CHECKING (custid NUMBER, balance NUMBER); CREATE TABLE SAVINGS (custid NUMBER, balance NUMBER);"
      }
    ],
    [
      {
        "question": "What are the total checking and saving balances for all accounts?",
        "query": "SELECT t1.balance + t2.balance FROM checking AS t1 JOIN savings AS t2 ON t1.custid = t2.custid",
        "schema": "CREATE TABLE CHECKING (custid NUMBER, balance NUMBER); CREATE TABLE ACCOUNTS (custid NUMBER, name TEXT); CREATE TABLE SAVINGS (custid NUMBER, balance NUMBER);"
      },
      {
        "question": "Show me the the balances FROM greatest to least?",
        "query": "SELECT t1.balance + t2.balance FROM checking AS t1 JOIN savings AS t2 ON t1.custid = t2.custid ORDER BY t1.balance + t2.balance DESC",
        "schema": "CREATE TABLE CHECKING (custid NUMBER, balance NUMBER); CREATE TABLE SAVINGS (balance NUMBER, custid NUMBER); CREATE TABLE ACCOUNTS (name TEXT, custid NUMBER);"
      },
      {
        "question": "How about FROM least to greatest?",
        "query": "SELECT t1.balance + t2.balance FROM checking AS t1 JOIN savings AS t2 ON t1.custid = t2.custid ORDER BY t1.balance + t2.balance",
        "schema": "CREATE TABLE ACCOUNTS (name TEXT, custid NUMBER); CREATE TABLE CHECKING (custid NUMBER, balance NUMBER); CREATE TABLE SAVINGS (custid NUMBER, balance NUMBER);"
      }
    ],
    [
      {
        "question": "What is the average saving balance?",
        "query": "SELECT avg(balance) FROM savings",
        "schema": "CREATE TABLE SAVINGS (balance NUMBER, custid NUMBER);"
      },
      {
        "question": "how about the lowest saving balance?",
        "query": "SELECT balance FROM savings ORDER BY balance LIMIT 1",
        "schema": "CREATE TABLE SAVINGS (balance NUMBER, custid NUMBER);"
      },
      {
        "question": "What is the name of the user that has this?",
        "query": "SELECT t1.name, t2.balance FROM accounts AS t1 JOIN savings AS t2 ON t1.custid = t2.custid ORDER BY t2.balance LIMIT 1",
        "schema": "CREATE TABLE ACCOUNTS (custid NUMBER, name TEXT); CREATE TABLE SAVINGS (balance NUMBER, custid NUMBER);"
      },
      {
        "question": "Also show his checking balance too.",
        "query": "SELECT t2.balance, t1.name FROM accounts AS t1 JOIN checking AS t2 ON t1.custid = t2.custid JOIN savings AS t3 ON t1.custid = t3.custid ORDER BY t3.balance LIMIT 1",
        "schema": "CREATE TABLE SAVINGS (balance NUMBER, custid NUMBER); CREATE TABLE CHECKING (custid NUMBER, balance NUMBER); CREATE TABLE ACCOUNTS (name TEXT, custid NUMBER);"
      }
    ],
    [
      {
        "question": "How many accounts are there in the bank?",
        "query": "SELECT count(*) FROM accounts",
        "schema": "CREATE TABLE ACCOUNTS (name TEXT, custid NUMBER);"
      },
      {
        "question": "What are the names for each?",
        "query": "SELECT name FROM accounts",
        "schema": "CREATE TABLE ACCOUNTS (custid NUMBER, name TEXT);"
      },
      {
        "question": "Include the checking and saving balances for each.",
        "query": "SELECT t2.balance , t3.balance , t1.name FROM accounts AS t1 JOIN checking AS t2 ON t1.custid = t2.custid JOIN savings AS t3 ON t1.custid = t3.custid",
        "schema": "CREATE TABLE SAVINGS (balance NUMBER, custid NUMBER); CREATE TABLE ACCOUNTS (name TEXT, custid NUMBER); CREATE TABLE CHECKING (balance NUMBER, custid NUMBER);"
      }
    ],
    [
      {
        "question": "Show me the names, checking balances, and savings balance for all accounts?",
        "query": "SELECT t2.balance , t3.balance , t1.name FROM accounts AS t1 JOIN checking AS t2 ON t1.custid = t2.custid JOIN savings AS t3 ON t1.custid = t3.custid",
        "schema": "CREATE TABLE CHECKING (custid NUMBER, balance NUMBER); CREATE TABLE ACCOUNTS (name TEXT, custid NUMBER); CREATE TABLE SAVINGS (custid NUMBER, balance NUMBER);"
      },
      {
        "question": "Also provide their total checking and saving balances?",
        "query": "SELECT t2.balance + t3.balance, t2.balance , t3.balance , t1.name FROM accounts AS t1 JOIN checking AS t2 ON t1.custid = t2.custid JOIN savings AS t3 ON t1.custid = t3.custid",
        "schema": "CREATE TABLE CHECKING (custid NUMBER, balance NUMBER); CREATE TABLE SAVINGS (balance NUMBER, custid NUMBER); CREATE TABLE ACCOUNTS (name TEXT, custid NUMBER);"
      },
      {
        "question": "Just show names, checking balance, saving balance but sort them by savings account balance.",
        "query": "SELECT t2.balance , t3.balance , t1.name FROM accounts AS t1 JOIN checking AS t2 ON t1.custid = t2.custid JOIN savings AS t3 ON t1.custid = t3.custid ORDER BY t3.balance",
        "schema": "CREATE TABLE CHECKING (custid NUMBER, balance NUMBER); CREATE TABLE ACCOUNTS (name TEXT, custid NUMBER); CREATE TABLE SAVINGS (custid NUMBER, balance NUMBER);"
      },
      {
        "question": "Actually, sort them by the total checking and savings balance FROM greatest to least.",
        "query": "SELECT t2.balance , t3.balance , t1.name FROM accounts AS t1 JOIN checking AS t2 ON t1.custid = t2.custid JOIN savings AS t3 ON t1.custid = t3.custid ORDER BY t2.balance + t3.balance DESC",
        "schema": "CREATE TABLE SAVINGS (custid NUMBER, balance NUMBER); CREATE TABLE CHECKING (custid NUMBER, balance NUMBER); CREATE TABLE ACCOUNTS (custid NUMBER, name TEXT);"
      }
    ],
    [
      {
        "question": "How many accounts have higher savings balances than their checking balances?",
        "query": "SELECT count(*) FROM accounts AS t1 JOIN checking AS t2 ON t1.custid = t2.custid JOIN savings AS t3 ON t1.custid = t3.custid WHERE t3.balance > t2.balance",
        "schema": "CREATE TABLE SAVINGS (custid NUMBER, balance NUMBER); CREATE TABLE ACCOUNTS (name TEXT, custid NUMBER); CREATE TABLE CHECKING (custid NUMBER, balance NUMBER);"
      },
      {
        "question": "How about higher checking balances than their saving balances?",
        "query": "SELECT count(*) FROM accounts AS t1 JOIN checking AS t2 ON t1.custid = t2.custid JOIN savings AS t3 ON t1.custid = t3.custid WHERE t2.balance > t3.balance",
        "schema": "CREATE TABLE CHECKING (custid NUMBER, balance NUMBER); CREATE TABLE SAVINGS (custid NUMBER, balance NUMBER); CREATE TABLE ACCOUNTS (name TEXT, custid NUMBER);"
      },
      {
        "question": "Show me the checking balances and saving balances for each of these accounts.",
        "query": "SELECT t2.balance, t3.balance FROM accounts AS t1 JOIN checking AS t2 ON t1.custid = t2.custid JOIN savings AS t3 ON t1.custid = t3.custid WHERE t2.balance > t3.balance",
        "schema": "CREATE TABLE ACCOUNTS (name TEXT, custid NUMBER); CREATE TABLE CHECKING (custid NUMBER, balance NUMBER); CREATE TABLE SAVINGS (custid NUMBER, balance NUMBER);"
      },
      {
        "question": "Actually, just show me the corresponding names.",
        "query": "SELECT t1.name FROM accounts AS t1 JOIN checking AS t2 ON t1.custid = t2.custid JOIN savings AS t3 ON t1.custid = t3.custid WHERE t2.balance > t3.balance",
        "schema": "CREATE TABLE ACCOUNTS (custid NUMBER, name TEXT); CREATE TABLE CHECKING (balance NUMBER, custid NUMBER); CREATE TABLE SAVINGS (balance NUMBER, custid NUMBER);"
      }
    ],
    [
      {
        "question": "What are the name, checking, and saving balances for all accounts?",
        "query": "SELECT t2.balance , t3.balance , t1.name FROM accounts AS t1 JOIN checking AS t2 ON t1.custid = t2.custid JOIN savings AS t3 ON t1.custid = t3.custid",
        "schema": "CREATE TABLE ACCOUNTS (custid NUMBER, name TEXT); CREATE TABLE CHECKING (custid NUMBER, balance NUMBER); CREATE TABLE SAVINGS (custid NUMBER, balance NUMBER);"
      },
      {
        "question": "Show me the total checking and savings balance of the accounts!",
        "query": "SELECT t2.balance , t3.balance , t1.name, t3.balance + t2.balance FROM accounts AS t1 JOIN checking AS t2 ON t1.custid = t2.custid JOIN savings AS t3 ON t1.custid = t3.custid",
        "schema": "CREATE TABLE ACCOUNTS (custid NUMBER, name TEXT); CREATE TABLE CHECKING (balance NUMBER, custid NUMBER); CREATE TABLE SAVINGS (custid NUMBER, balance NUMBER);"
      },
      {
        "question": "Show me only the accounts that have a lower savings balance than their checking balance?",
        "query": "SELECT t2.balance , t3.balance , t1.name, t3.balance + t2.balance FROM accounts AS t1 JOIN checking AS t2 ON t1.custid = t2.custid JOIN savings AS t3 ON t1.custid = t3.custid WHERE t3.balance < t2.balance",
        "schema": "CREATE TABLE CHECKING (balance NUMBER, custid NUMBER); CREATE TABLE ACCOUNTS (custid NUMBER, name TEXT); CREATE TABLE SAVINGS (custid NUMBER, balance NUMBER);"
      },
      {
        "question": "Show just the name and total checking and savings balance.",
        "query": "SELECT t1.name, t3.balance + t2.balance FROM accounts AS t1 JOIN checking AS t2 ON t1.custid = t2.custid JOIN savings AS t3 ON t1.custid = t3.custid WHERE t3.balance < t2.balance",
        "schema": "CREATE TABLE CHECKING (custid NUMBER, balance NUMBER); CREATE TABLE SAVINGS (balance NUMBER, custid NUMBER); CREATE TABLE ACCOUNTS (name TEXT, custid NUMBER);"
      }
    ]
  ],
  "chinook_1": [
    [
      {
        "question": "Find the names of all artists whose names end with \"b\".",
        "query": "SELECT name FROM artist WHERE name LIKE \"%b\"",
        "schema": "CREATE TABLE Album (ArtistId NUMBER); CREATE TABLE Artist (ArtistId NUMBER, Name TEXT);"
      },
      {
        "question": "How about artists whose names contain \"b\"?",
        "query": "SELECT name FROM artist WHERE name LIKE \"%b%\"",
        "schema": "CREATE TABLE Artist (Name TEXT, ArtistId NUMBER); CREATE TABLE Album (ArtistId NUMBER);"
      },
      {
        "question": "Now do the same for \"a\".",
        "query": "SELECT name FROM artist WHERE name LIKE \"%a%\"",
        "schema": "CREATE TABLE Artist (Name TEXT, ArtistId NUMBER); CREATE TABLE Album (ArtistId NUMBER);"
      }
    ],
    [
      {
        "question": "Find the ids of all albums of \"AC/DC\".",
        "query": "SELECT albumid FROM album AS t1 JOIN artist AS t2 ON t1.artistid = t2.artistid WHERE t2.name = \"AC/DC\"",
        "schema": "CREATE TABLE Track (TrackId NUMBER, GenreId NUMBER, AlbumId NUMBER, Name TEXT); CREATE TABLE Artist (Name TEXT, ArtistId NUMBER); CREATE TABLE Album (AlbumId NUMBER, ArtistId NUMBER, Title TEXT); CREATE TABLE Genre (GenreId NUMBER, Name TEXT); CREATE TABLE Customer (LastName TEXT, FirstName TEXT);"
      },
      {
        "question": "Show me the titles of those albums.",
        "query": "SELECT title FROM album AS t1 JOIN artist AS t2 ON t1.artistid = t2.artistid WHERE t2.name = \"AC/DC\"",
        "schema": "CREATE TABLE Genre (GenreId NUMBER, Name TEXT); CREATE TABLE Artist (ArtistId NUMBER, Name TEXT); CREATE TABLE Customer (FirstName TEXT, LastName TEXT); CREATE TABLE Track (Name TEXT, AlbumId NUMBER, TrackId NUMBER, GenreId NUMBER); CREATE TABLE Album (AlbumId NUMBER, Title TEXT, ArtistId NUMBER);"
      }
    ],
    [
      {
        "question": "Show me all the albums from \"Metallica\".",
        "query": "SELECT * FROM album AS t1 JOIN artist AS t2 ON t1.artistid = t2.artistid WHERE t2.name = \"Metallica\"",
        "schema": "CREATE TABLE Customer (LastName TEXT, FirstName TEXT); CREATE TABLE Artist (ArtistId NUMBER, Name TEXT); CREATE TABLE Track (AlbumId NUMBER, Name TEXT, GenreId NUMBER); CREATE TABLE Album (AlbumId NUMBER, Title TEXT, ArtistId NUMBER); CREATE TABLE Genre (GenreId NUMBER, Name TEXT); CREATE TABLE Employee (LastName TEXT);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT count(*) FROM album AS t1 JOIN artist AS t2 ON t1.artistid = t2.artistid WHERE t2.name = \"Metallica\"",
        "schema": "CREATE TABLE Genre (Name TEXT, GenreId NUMBER); CREATE TABLE Employee (LastName TEXT); CREATE TABLE Album (AlbumId NUMBER, Title TEXT, ArtistId NUMBER); CREATE TABLE Artist (ArtistId NUMBER, Name TEXT); CREATE TABLE Customer (FirstName TEXT, LastName TEXT); CREATE TABLE Track (TrackId NUMBER, GenreId NUMBER, Name TEXT, AlbumId NUMBER);"
      }
    ],
    [
      {
        "question": "Is there an album called \"Balls to the Wall\"?",
        "query": "SELECT * FROM album WHERE title = \"Balls to the Wall\"",
        "schema": "CREATE TABLE Artist (Name TEXT, ArtistId NUMBER); CREATE TABLE Track (Name TEXT, AlbumId NUMBER, GenreId NUMBER, TrackId NUMBER); CREATE TABLE Album (AlbumId NUMBER, ArtistId NUMBER, Title TEXT); CREATE TABLE Genre (Name TEXT, GenreId NUMBER);"
      },
      {
        "question": "Who made it?",
        "query": "SELECT t2.name FROM album AS t1 JOIN artist AS t2 ON t1.artistid = t2.artistid WHERE t1.title = \"Balls to the Wall\"",
        "schema": "CREATE TABLE Track (Name TEXT, TrackId NUMBER, Composer TEXT, AlbumId NUMBER, GenreId NUMBER); CREATE TABLE Customer (LastName TEXT); CREATE TABLE Genre (Name TEXT, GenreId NUMBER); CREATE TABLE Album (Title TEXT, AlbumId NUMBER, ArtistId NUMBER); CREATE TABLE Artist (Name TEXT, ArtistId NUMBER);"
      }
    ],
    [
      {
        "question": "Which artist has the least albums?",
        "query": "SELECT t2.name FROM album AS t1 JOIN artist AS t2 ON t1.artistid = t2.artistid GROUP BY t2.name ORDER BY count(*) ASC LIMIT 1",
        "schema": "CREATE TABLE Artist (Name TEXT, ArtistId NUMBER); CREATE TABLE Track (AlbumId NUMBER); CREATE TABLE Album (Title TEXT, ArtistId NUMBER, AlbumId NUMBER);"
      },
      {
        "question": "How about the most albums?",
        "query": "SELECT t2.name FROM album AS t1 JOIN artist AS t2 ON t1.artistid = t2.artistid GROUP BY t2.name ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Track (AlbumId NUMBER); CREATE TABLE Artist (Name TEXT, ArtistId NUMBER); CREATE TABLE Album (AlbumId NUMBER, ArtistId NUMBER, Title TEXT);"
      }
    ],
    [
      {
        "question": "Find the names of all the albums that contain the word \"you\".",
        "query": "SELECT title FROM album WHERE title LIKE '%you%'",
        "schema": "CREATE TABLE Genre (GenreId NUMBER); CREATE TABLE Artist (ArtistId NUMBER, Name TEXT); CREATE TABLE Track (Name TEXT, GenreId NUMBER, AlbumId NUMBER, TrackId NUMBER); CREATE TABLE Album (AlbumId NUMBER, ArtistId NUMBER, Title TEXT);"
      },
      {
        "question": "Oops, I meant tracks not albums.",
        "query": "SELECT name FROM track WHERE name LIKE '%you%'",
        "schema": "CREATE TABLE Album (ArtistId NUMBER, AlbumId NUMBER, Title TEXT); CREATE TABLE Artist (ArtistId NUMBER, Name TEXT); CREATE TABLE Track (TrackId NUMBER, GenreId NUMBER, Name TEXT, AlbumId NUMBER); CREATE TABLE Genre (Name TEXT, GenreId NUMBER);"
      }
    ],
    [
      {
        "question": "What is the longest track?",
        "query": "SELECT max(milliseconds) FROM track",
        "schema": "CREATE TABLE Customer (LastName TEXT, CustomerId NUMBER); CREATE TABLE Track (TrackId NUMBER, Bytes NUMBER, AlbumId NUMBER, Milliseconds NUMBER, Name TEXT); CREATE TABLE Album (AlbumId NUMBER, Title TEXT); CREATE TABLE Artist (ArtistId NUMBER); CREATE TABLE InvoiceLine (TrackId NUMBER); CREATE TABLE Employee (EmployeeId NUMBER);"
      },
      {
        "question": "The shortest?",
        "query": "SELECT min(milliseconds) FROM track",
        "schema": "CREATE TABLE Employee (EmployeeId NUMBER); CREATE TABLE Customer (CustomerId NUMBER, LastName TEXT); CREATE TABLE Artist (ArtistId NUMBER); CREATE TABLE Track (TrackId NUMBER, Milliseconds NUMBER, AlbumId NUMBER, Name TEXT, Bytes NUMBER); CREATE TABLE InvoiceLine (TrackId NUMBER); CREATE TABLE Album (Title TEXT, AlbumId NUMBER);"
      },
      {
        "question": "Show me both.",
        "query": "SELECT max(milliseconds) , min(milliseconds) FROM track",
        "schema": "CREATE TABLE Album (AlbumId NUMBER, Title TEXT); CREATE TABLE Artist (ArtistId NUMBER); CREATE TABLE Employee (EmployeeId NUMBER); CREATE TABLE Track (Milliseconds NUMBER, AlbumId NUMBER, Bytes NUMBER, Name TEXT, TrackId NUMBER); CREATE TABLE InvoiceLine (TrackId NUMBER); CREATE TABLE Customer (CustomerId NUMBER, LastName TEXT);"
      }
    ],
    [
      {
        "question": "Show me the names and ids of each album.",
        "query": "SELECT t1.title , t2.albumid FROM album AS t1 JOIN track AS t2 ON t1.albumid = t2.albumid GROUP BY t2.albumid",
        "schema": "CREATE TABLE Track (TrackId NUMBER, Name TEXT, AlbumId NUMBER); CREATE TABLE Album (Title TEXT, ArtistId NUMBER, AlbumId NUMBER); CREATE TABLE Artist (ArtistId NUMBER, Name TEXT); CREATE TABLE Genre (Name TEXT, GenreId NUMBER);"
      },
      {
        "question": "Show me the number of tracks each album has as well.",
        "query": "SELECT t1.title , t2.albumid , count(*) FROM album AS t1 JOIN track AS t2 ON t1.albumid = t2.albumid GROUP BY t2.albumid",
        "schema": "CREATE TABLE Album (Title TEXT, AlbumId NUMBER, ArtistId NUMBER); CREATE TABLE Genre (GenreId NUMBER, Name TEXT); CREATE TABLE Track (Name TEXT, AlbumId NUMBER, TrackId NUMBER); CREATE TABLE Artist (Name TEXT, ArtistId NUMBER);"
      }
    ],
    [
      {
        "question": "Show me the 10 most common genres in all tracks.",
        "query": "SELECT t1.name FROM genre AS t1 JOIN track AS t2 ON t1.genreid = t2.genreid GROUP BY t2.genreid ORDER BY count(*) DESC LIMIT 10",
        "schema": "CREATE TABLE Genre (Name TEXT, GenreId NUMBER); CREATE TABLE Track (TrackId NUMBER, Name TEXT, GenreId NUMBER);"
      },
      {
        "question": "Show me the 10 least common genres.",
        "query": "SELECT t1.name FROM genre AS t1 JOIN track AS t2 ON t1.genreid = t2.genreid GROUP BY t2.genreid ORDER BY count(*) ASC LIMIT 10",
        "schema": "CREATE TABLE Genre (GenreId NUMBER, Name TEXT); CREATE TABLE Track (TrackId NUMBER, GenreId NUMBER, Name TEXT);"
      },
      {
        "question": "Show me the most common one.",
        "query": "SELECT t1.name FROM genre AS t1 JOIN track AS t2 ON t1.genreid = t2.genreid GROUP BY t2.genreid ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Track (TrackId NUMBER, GenreId NUMBER, Name TEXT); CREATE TABLE Genre (GenreId NUMBER, Name TEXT);"
      }
    ],
    [
      {
        "question": "Show me all the media types in tracks.",
        "query": "SELECT t1.name FROM mediatype AS t1 JOIN track AS t2 ON t1.mediatypeid = t2.mediatypeid GROUP BY t2.mediatypeid",
        "schema": "CREATE TABLE Album (AlbumId NUMBER); CREATE TABLE MediaType (MediaTypeId NUMBER, Name TEXT); CREATE TABLE Track (TrackId NUMBER, MediaTypeId NUMBER, GenreId NUMBER, Name TEXT, AlbumId NUMBER);"
      },
      {
        "question": "What is the most common one?",
        "query": "SELECT t1.name FROM mediatype AS t1 JOIN track AS t2 ON t1.mediatypeid = t2.mediatypeid GROUP BY t2.mediatypeid ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Track (MediaTypeId NUMBER, TrackId NUMBER, AlbumId NUMBER, Name TEXT, GenreId NUMBER); CREATE TABLE MediaType (Name TEXT, MediaTypeId NUMBER); CREATE TABLE Album (AlbumId NUMBER);"
      },
      {
        "question": "How about the least common one?",
        "query": "SELECT t1.name FROM mediatype AS t1 JOIN track AS t2 ON t1.mediatypeid = t2.mediatypeid GROUP BY t2.mediatypeid ORDER BY count(*) ASC LIMIT 1",
        "schema": "CREATE TABLE MediaType (Name TEXT, MediaTypeId NUMBER); CREATE TABLE Track (Name TEXT, TrackId NUMBER, MediaTypeId NUMBER, AlbumId NUMBER, GenreId NUMBER); CREATE TABLE Album (AlbumId NUMBER);"
      }
    ],
    [
      {
        "question": "Show me all the tracks with unit price bigger than 1.",
        "query": "SELECT name FROM track WHERE unitprice > 1",
        "schema": "CREATE TABLE Invoice (Total NUMBER); CREATE TABLE Track (GenreId NUMBER, Name TEXT, AlbumId NUMBER, Milliseconds NUMBER, TrackId NUMBER, UnitPrice NUMBER); CREATE TABLE Album (AlbumId NUMBER); CREATE TABLE InvoiceLine (UnitPrice NUMBER, TrackId NUMBER);"
      },
      {
        "question": "Show me their album names and ids",
        "query": "SELECT t1.title , t2.albumid FROM album AS t1 JOIN track AS t2 ON t1.albumid = t2.albumid WHERE t2.unitprice > 1 GROUP BY t2.albumid",
        "schema": "CREATE TABLE Album (Title TEXT, AlbumId NUMBER); CREATE TABLE Track (UnitPrice NUMBER, Name TEXT, TrackId NUMBER, GenreId NUMBER, Milliseconds NUMBER, AlbumId NUMBER); CREATE TABLE InvoiceLine (UnitPrice NUMBER, TrackId NUMBER); CREATE TABLE Invoice (Total NUMBER, InvoiceId NUMBER);"
      }
    ],
    [
      {
        "question": "Show me tracks that belong to rock genre.",
        "query": "SELECT t2.name FROM genre AS t1 JOIN track AS t2 ON t1.genreid = t2.genreid WHERE t1.name = \"Rock\"",
        "schema": "CREATE TABLE Album (AlbumId NUMBER, Title TEXT); CREATE TABLE Genre (GenreId NUMBER, Name TEXT); CREATE TABLE Track (GenreId NUMBER, AlbumId NUMBER, Name TEXT, TrackId NUMBER);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT count(*) FROM genre AS t1 JOIN track AS t2 ON t1.genreid = t2.genreid WHERE t1.name = \"Rock\"",
        "schema": "CREATE TABLE Album (Title TEXT, AlbumId NUMBER); CREATE TABLE Genre (GenreId NUMBER, Name TEXT); CREATE TABLE Track (Name TEXT, AlbumId NUMBER, GenreId NUMBER, TrackId NUMBER);"
      }
    ],
    [
      {
        "question": "What is the most expensive track with Jazz genre?",
        "query": "SELECT max(unitprice) FROM genre AS t1 JOIN track AS t2 ON t1.genreid = t2.genreid WHERE t1.name = \"Jazz\"",
        "schema": "CREATE TABLE Album (AlbumId NUMBER); CREATE TABLE Genre (GenreId NUMBER, Name TEXT); CREATE TABLE Track (AlbumId NUMBER, TrackId NUMBER, Name TEXT, Milliseconds NUMBER, GenreId NUMBER, UnitPrice NUMBER); CREATE TABLE Invoice (Total NUMBER); CREATE TABLE InvoiceLine (TrackId NUMBER);"
      },
      {
        "question": "Show me the average unit price of all Jazz genre tracks.",
        "query": "SELECT avg(unitprice) FROM genre AS t1 JOIN track AS t2 ON t1.genreid = t2.genreid WHERE t1.name = \"Jazz\"",
        "schema": "CREATE TABLE InvoiceLine (TrackId NUMBER, UnitPrice NUMBER); CREATE TABLE Album (AlbumId NUMBER); CREATE TABLE Genre (Name TEXT, GenreId NUMBER); CREATE TABLE Track (GenreId NUMBER, AlbumId NUMBER, Milliseconds NUMBER, UnitPrice NUMBER, TrackId NUMBER, Name TEXT); CREATE TABLE Invoice (Total NUMBER);"
      }
    ],
    [
      {
        "question": "Show me first name of customers with emails that contain \"gmail.com\".",
        "query": "SELECT firstname FROM customer WHERE email LIKE \"%gmail.com%\"",
        "schema": "CREATE TABLE Invoice (CustomerId NUMBER); CREATE TABLE Customer (Email TEXT, CustomerId NUMBER, FirstName TEXT, LastName TEXT);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT count(*) FROM customer WHERE email LIKE \"%gmail.com%\"",
        "schema": "CREATE TABLE Customer (Email TEXT, LastName TEXT, CustomerId NUMBER, FirstName TEXT); CREATE TABLE Invoice (CustomerId NUMBER);"
      }
    ],
    [
      {
        "question": "Show me the customer with first name Leonie.",
        "query": "SELECT * FROM customer WHERE firstname = \"Leonie\"",
        "schema": "CREATE TABLE Artist (Name TEXT); CREATE TABLE Invoice (CustomerId NUMBER); CREATE TABLE Customer (FirstName TEXT, SupportRepId NUMBER, LastName TEXT, CustomerId NUMBER);"
      },
      {
        "question": "What is the first and last name of the employee assigned to this customer?",
        "query": "SELECT t2.firstname , t2.lastname FROM customer AS t1 JOIN employee AS t2 ON t1.supportrepid = t2.employeeid WHERE t1.firstname = \"Leonie\"",
        "schema": "CREATE TABLE Invoice (CustomerId NUMBER); CREATE TABLE Employee (HireDate TIME, LastName TEXT, EmployeeId NUMBER, FirstName TEXT, ReportsTo NUMBER, Title TEXT); CREATE TABLE Customer (FirstName TEXT, CustomerId NUMBER, SupportRepId NUMBER, LastName TEXT); CREATE TABLE Artist (Name TEXT);"
      }
    ],
    [
      {
        "question": "Find me a customer with postal code 70174.",
        "query": "SELECT * FROM customer WHERE postalcode = 70174",
        "schema": "CREATE TABLE Invoice (CustomerId NUMBER, BillingPostalCode TEXT); CREATE TABLE Employee (PostalCode TEXT); CREATE TABLE Customer (SupportRepId NUMBER, LastName TEXT, PostalCode TEXT, CustomerId NUMBER, FirstName TEXT, Company TEXT, Address TEXT);"
      },
      {
        "question": "Which employee was assigned to this customer? Give me the first and last names.",
        "query": "SELECT t2.firstname, t2.lastname FROM customer AS t1 JOIN employee AS t2 ON t1.supportrepid = t2.employeeid WHERE t1.postalcode = \"70174\"",
        "schema": "CREATE TABLE Customer (Address TEXT, CustomerId NUMBER, SupportRepId NUMBER, FirstName TEXT, LastName TEXT, PostalCode TEXT, Company TEXT); CREATE TABLE Invoice (BillingPostalCode TEXT, CustomerId NUMBER); CREATE TABLE Employee (LastName TEXT, ReportsTo NUMBER, Title TEXT, HireDate TIME, FirstName TEXT, PostalCode TEXT, EmployeeId NUMBER);"
      },
      {
        "question": "Which city does he/she live?",
        "query": "SELECT t2.city FROM customer AS t1 JOIN employee AS t2 ON t1.supportrepid = t2.employeeid WHERE t1.postalcode = \"70174\"",
        "schema": "CREATE TABLE Customer (LastName TEXT, City TEXT, Address TEXT, PostalCode TEXT, Company TEXT, FirstName TEXT, SupportRepId NUMBER, CustomerId NUMBER); CREATE TABLE Invoice (BillingPostalCode TEXT, CustomerId NUMBER); CREATE TABLE Employee (City TEXT, HireDate TIME, PostalCode TEXT, State TEXT, EmployeeId NUMBER, ReportsTo NUMBER, FirstName TEXT, Country TEXT, LastName TEXT, Address TEXT, Title TEXT);"
      }
    ],
    [
      {
        "question": "Find all invoice dates of customer named Astrid.",
        "query": "SELECT t2.invoicedate FROM customer AS t1 JOIN invoice AS t2 ON t1.customerid = t2.customerid WHERE t1.firstname = \"Astrid\"",
        "schema": "CREATE TABLE Customer (LastName TEXT, FirstName TEXT, CustomerId NUMBER, SupportRepId NUMBER); CREATE TABLE Artist (Name TEXT); CREATE TABLE Invoice (Total NUMBER, BillingAddress TEXT, InvoiceId NUMBER, InvoiceDate TIME, CustomerId NUMBER); CREATE TABLE InvoiceLine (InvoiceId NUMBER);"
      },
      {
        "question": "Hm, find them for Astrids with last name Gruber.",
        "query": "SELECT t2.invoicedate FROM customer AS t1 JOIN invoice AS t2 ON t1.customerid = t2.customerid WHERE t1.firstname = \"Astrid\" AND lastname = \"Gruber\"",
        "schema": "CREATE TABLE Artist (Name TEXT); CREATE TABLE Invoice (CustomerId NUMBER, InvoiceDate TIME, BillingAddress TEXT, Total NUMBER, InvoiceId NUMBER); CREATE TABLE Customer (FirstName TEXT, CustomerId NUMBER, LastName TEXT, SupportRepId NUMBER); CREATE TABLE InvoiceLine (InvoiceId NUMBER);"
      }
    ],
    [
      {
        "question": "Show me first names of all customers that have invoice totals less than 20.",
        "query": "SELECT firstname FROM customer EXCEPT SELECT t1.lastname FROM customer AS t1 JOIN invoice AS t2 ON t1.customerid = t2.customerid WHERE t2.total < 20",
        "schema": "CREATE TABLE InvoiceLine (Quantity NUMBER, InvoiceId NUMBER); CREATE TABLE Invoice (CustomerId NUMBER, Total NUMBER, BillingAddress TEXT, BillingCity TEXT, InvoiceId NUMBER); CREATE TABLE Customer (LastName TEXT, FirstName TEXT, SupportRepId NUMBER, CustomerId NUMBER);"
      },
      {
        "question": "I meant last names.",
        "query": "SELECT lastname FROM customer EXCEPT SELECT t1.lastname FROM customer AS t1 JOIN invoice AS t2 ON t1.customerid = t2.customerid WHERE t2.total < 20",
        "schema": "CREATE TABLE InvoiceLine (Quantity NUMBER, InvoiceId NUMBER); CREATE TABLE Customer (CustomerId NUMBER, SupportRepId NUMBER, LastName TEXT, FirstName TEXT); CREATE TABLE Invoice (BillingAddress TEXT, InvoiceId NUMBER, BillingCity TEXT, Total NUMBER, CustomerId NUMBER);"
      },
      {
        "question": "Oh I meant invoice totals larger than 20, not less than.",
        "query": "SELECT lastname FROM customer EXCEPT SELECT t1.lastname FROM customer AS t1 JOIN invoice AS t2 ON t1.customerid = t2.customerid WHERE t2.total > 20",
        "schema": "CREATE TABLE InvoiceLine (InvoiceId NUMBER, Quantity NUMBER); CREATE TABLE Invoice (CustomerId NUMBER, InvoiceId NUMBER, BillingAddress TEXT, BillingCity TEXT, Total NUMBER); CREATE TABLE Customer (FirstName TEXT, SupportRepId NUMBER, LastName TEXT, CustomerId NUMBER);"
      }
    ],
    [
      {
        "question": "Find the first names of all customers that live in Brazil",
        "query": "SELECT DISTINCT firstname FROM customer WHERE country = \"Brazil\"",
        "schema": "CREATE TABLE Customer (LastName TEXT, Address TEXT, Country TEXT, CustomerId NUMBER, City TEXT, FirstName TEXT, State TEXT);"
      },
      {
        "question": "Among them, find ones who have an invoice.",
        "query": "SELECT DISTINCT t1.firstname FROM customer AS t1 JOIN invoice AS t2 ON t1.customerid = t2.customerid WHERE t1.country = \"Brazil\"",
        "schema": "CREATE TABLE InvoiceLine (InvoiceId NUMBER); CREATE TABLE Invoice (InvoiceId NUMBER, Total NUMBER, CustomerId NUMBER); CREATE TABLE Customer (FirstName TEXT, Company TEXT, City TEXT, Country TEXT, CustomerId NUMBER, Address TEXT, LastName TEXT, State TEXT);"
      }
    ],
    [
      {
        "question": "Find the address of all customers who live in Germany.",
        "query": "SELECT DISTINCT address FROM customer WHERE country = \"Germany\"",
        "schema": "CREATE TABLE Customer (PostalCode TEXT, Country TEXT, CustomerId NUMBER, Address TEXT, State TEXT, City TEXT);"
      },
      {
        "question": "Among those, find the ones who have invoice.",
        "query": "SELECT DISTINCT t1.address FROM customer AS t1 JOIN invoice AS t2 ON t1.customerid = t2.customerid WHERE t1.country = \"Germany\"",
        "schema": "CREATE TABLE Invoice (BillingCountry TEXT, BillingAddress TEXT, Total NUMBER, InvoiceId NUMBER, CustomerId NUMBER); CREATE TABLE Customer (LastName TEXT, CustomerId NUMBER, State TEXT, PostalCode TEXT, FirstName TEXT, Country TEXT, City TEXT, Address TEXT); CREATE TABLE InvoiceLine (InvoiceId NUMBER);"
      }
    ],
    [
      {
        "question": "Show me the tracks that are in AAC audio file media type",
        "query": "SELECT * FROM mediatype AS t1 JOIN track AS t2 ON t1.mediatypeid = t2.mediatypeid WHERE t1.name = \"AAC audio file\"",
        "schema": "CREATE TABLE Track (Name TEXT, MediaTypeId NUMBER, AlbumId NUMBER, TrackId NUMBER, GenreId NUMBER); CREATE TABLE Album (AlbumId NUMBER); CREATE TABLE MediaType (MediaTypeId NUMBER, Name TEXT);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT count(*) FROM mediatype AS t1 JOIN track AS t2 ON t1.mediatypeid = t2.mediatypeid WHERE t1.name = \"AAC audio file\"",
        "schema": "CREATE TABLE MediaType (Name TEXT, MediaTypeId NUMBER); CREATE TABLE Track (MediaTypeId NUMBER, AlbumId NUMBER, TrackId NUMBER, GenreId NUMBER, Name TEXT); CREATE TABLE Album (AlbumId NUMBER);"
      }
    ],
    [
      {
        "question": "What is the average duration of tracks that belong to Latin genre?",
        "query": "SELECT avg(milliseconds) FROM genre AS t1 JOIN track AS t2 ON t1.genreid = t2.genreid WHERE t1.name = \"Latin\"",
        "schema": "CREATE TABLE Genre (GenreId NUMBER, Name TEXT); CREATE TABLE Track (Name TEXT, Bytes NUMBER, TrackId NUMBER, Milliseconds NUMBER, GenreId NUMBER);"
      },
      {
        "question": "How about Pop?",
        "query": "SELECT avg(milliseconds) FROM genre AS t1 JOIN track AS t2 ON t1.genreid = t2.genreid WHERE t1.name = \"Pop\"",
        "schema": "CREATE TABLE Track (Bytes NUMBER, TrackId NUMBER, GenreId NUMBER, Milliseconds NUMBER, Name TEXT); CREATE TABLE Genre (Name TEXT, GenreId NUMBER);"
      },
      {
        "question": "Show me the average for both genres.",
        "query": "SELECT avg(milliseconds) FROM genre AS t1 JOIN track AS t2 ON t1.genreid = t2.genreid WHERE t1.name = \"Latin\" OR t1.name = \"Pop\"",
        "schema": "CREATE TABLE Track (GenreId NUMBER, Name TEXT, Bytes NUMBER, Milliseconds NUMBER, TrackId NUMBER); CREATE TABLE Genre (Name TEXT, GenreId NUMBER);"
      }
    ],
    [
      {
        "question": "Show the first names and ids of employees serving 10 customers.",
        "query": "SELECT t1.firstname , t1.supportrepid FROM customer AS t1 JOIN employee AS t2 ON t1.supportrepid = t2.employeeid GROUP BY t1.supportrepid HAVING count(*) = 10",
        "schema": "CREATE TABLE Invoice (CustomerId NUMBER); CREATE TABLE Employee (ReportsTo NUMBER, FirstName TEXT, EmployeeId NUMBER, Title TEXT, HireDate TIME, LastName TEXT); CREATE TABLE Customer (FirstName TEXT, SupportRepId NUMBER, LastName TEXT, CustomerId NUMBER);"
      },
      {
        "question": "Show me those serving at least 10 customers.",
        "query": "SELECT t1.firstname , t1.supportrepid FROM customer AS t1 JOIN employee AS t2 ON t1.supportrepid = t2.employeeid GROUP BY t1.supportrepid HAVING count(*) >= 10",
        "schema": "CREATE TABLE Employee (Title TEXT, FirstName TEXT, LastName TEXT, ReportsTo NUMBER, HireDate TIME, EmployeeId NUMBER); CREATE TABLE Invoice (CustomerId NUMBER); CREATE TABLE Customer (FirstName TEXT, LastName TEXT, SupportRepId NUMBER, CustomerId NUMBER);"
      }
    ],
    [
      {
        "question": "Show me first names for employees serving 20 customers.",
        "query": "SELECT t1.firstname FROM customer AS t1 JOIN employee AS t2 ON t1.supportrepid = t2.employeeid GROUP BY t1.supportrepid HAVING count(*) = 20",
        "schema": "CREATE TABLE Employee (HireDate TIME, ReportsTo NUMBER, Title TEXT, FirstName TEXT, EmployeeId NUMBER, LastName TEXT); CREATE TABLE Invoice (CustomerId NUMBER); CREATE TABLE Customer (LastName TEXT, SupportRepId NUMBER, FirstName TEXT, CustomerId NUMBER);"
      },
      {
        "question": "Show me their last names.",
        "query": "SELECT t1.lastname FROM customer AS t1 JOIN employee AS t2 ON t1.supportrepid = t2.employeeid GROUP BY t1.supportrepid HAVING count(*) = 20",
        "schema": "CREATE TABLE Employee (FirstName TEXT, EmployeeId NUMBER, Title TEXT, ReportsTo NUMBER, HireDate TIME, LastName TEXT); CREATE TABLE Customer (LastName TEXT, SupportRepId NUMBER, FirstName TEXT, CustomerId NUMBER); CREATE TABLE Invoice (CustomerId NUMBER);"
      },
      {
        "question": "Show me the same for employees serving no more than 20 customers.",
        "query": "SELECT t1.lastname FROM customer AS t1 JOIN employee AS t2 ON t1.supportrepid = t2.employeeid GROUP BY t1.supportrepid HAVING count(*) <= 20",
        "schema": "CREATE TABLE Invoice (CustomerId NUMBER); CREATE TABLE Employee (LastName TEXT, EmployeeId NUMBER, HireDate TIME, Title TEXT, FirstName TEXT, ReportsTo NUMBER); CREATE TABLE Customer (SupportRepId NUMBER, CustomerId NUMBER, LastName TEXT, FirstName TEXT);"
      }
    ],
    [
      {
        "question": "Show me all artists with at least 3 albums.",
        "query": "SELECT * FROM album AS t1 JOIN artist AS t2 ON t1.artistid = t2.artistid GROUP BY t1.artistid HAVING count(*) >= 3",
        "schema": "CREATE TABLE Artist (Name TEXT, ArtistId NUMBER); CREATE TABLE Track (AlbumId NUMBER); CREATE TABLE Album (Title TEXT, AlbumId NUMBER, ArtistId NUMBER);"
      },
      {
        "question": "Show me their names and ids.",
        "query": "SELECT t2.name , t1.artistid FROM album AS t1 JOIN artist AS t2 ON t1.artistid = t2.artistid GROUP BY t1.artistid HAVING count(*) >= 3 ORDER BY t2.name",
        "schema": "CREATE TABLE Artist (Name TEXT, ArtistId NUMBER); CREATE TABLE Track (AlbumId NUMBER, Name TEXT); CREATE TABLE Album (ArtistId NUMBER, Title TEXT, AlbumId NUMBER);"
      },
      {
        "question": "Sort them in alphabetical order.",
        "query": "SELECT t2.name , t1.artistid FROM album AS t1 JOIN artist AS t2 ON t1.artistid = t2.artistid GROUP BY t1.artistid HAVING count(*) >= 3 ORDER BY t2.name",
        "schema": "CREATE TABLE Artist (Name TEXT, ArtistId NUMBER); CREATE TABLE Track (AlbumId NUMBER, Name TEXT); CREATE TABLE Album (Title TEXT, ArtistId NUMBER, AlbumId NUMBER);"
      }
    ],
    [
      {
        "question": "How many artists don't have any albums?",
        "query": "SELECT count(*) FROM artist EXCEPT SELECT t2.name FROM album AS t1 JOIN artist AS t2 ON t1.artistid = t2.artistid",
        "schema": "CREATE TABLE Artist (ArtistId NUMBER, Name TEXT); CREATE TABLE Track (AlbumId NUMBER); CREATE TABLE Album (Title TEXT, ArtistId NUMBER, AlbumId NUMBER);"
      },
      {
        "question": "Find me their names.",
        "query": "SELECT name FROM artist EXCEPT SELECT t2.name FROM album AS t1 JOIN artist AS t2 ON t1.artistid = t2.artistid",
        "schema": "CREATE TABLE Artist (ArtistId NUMBER, Name TEXT); CREATE TABLE Album (AlbumId NUMBER, Title TEXT, ArtistId NUMBER); CREATE TABLE Track (AlbumId NUMBER, Name TEXT);"
      }
    ],
    [
      {
        "question": "What is the max unit price of rock tracks?",
        "query": "SELECT max(t2.unitprice) FROM genre AS t1 JOIN track AS t2 ON t1.genreid = t2.genreid WHERE t1.name = \"Rock\"",
        "schema": "CREATE TABLE Invoice (Total NUMBER, InvoiceId NUMBER); CREATE TABLE Album (AlbumId NUMBER, Title TEXT); CREATE TABLE Genre (GenreId NUMBER, Name TEXT); CREATE TABLE InvoiceLine (TrackId NUMBER, UnitPrice NUMBER); CREATE TABLE Track (AlbumId NUMBER, TrackId NUMBER, Name TEXT, UnitPrice NUMBER, GenreId NUMBER);"
      },
      {
        "question": "What is the average?",
        "query": "SELECT avg(t2.unitprice) FROM genre AS t1 JOIN track AS t2 ON t1.genreid = t2.genreid WHERE t1.name = \"Rock\"",
        "schema": "CREATE TABLE InvoiceLine (UnitPrice NUMBER, TrackId NUMBER); CREATE TABLE Invoice (InvoiceId NUMBER, Total NUMBER); CREATE TABLE Genre (GenreId NUMBER, Name TEXT); CREATE TABLE Album (Title TEXT, AlbumId NUMBER); CREATE TABLE Track (Name TEXT, TrackId NUMBER, GenreId NUMBER, AlbumId NUMBER, UnitPrice NUMBER);"
      }
    ],
    [
      {
        "question": "How long is the longest pop track?",
        "query": "SELECT max(milliseconds) FROM genre AS t1 JOIN track AS t2 ON t1.genreid = t2.genreid WHERE t1.name = \"Pop\"",
        "schema": "CREATE TABLE Album (Title TEXT, AlbumId NUMBER); CREATE TABLE Genre (GenreId NUMBER, Name TEXT); CREATE TABLE Track (TrackId NUMBER, Bytes NUMBER, GenreId NUMBER, AlbumId NUMBER, Name TEXT, Milliseconds NUMBER);"
      },
      {
        "question": "How about the shortest one?",
        "query": "SELECT min(milliseconds) FROM genre AS t1 JOIN track AS t2 ON t1.genreid = t2.genreid WHERE t1.name = \"Pop\"",
        "schema": "CREATE TABLE Genre (GenreId NUMBER, Name TEXT); CREATE TABLE Album (AlbumId NUMBER, Title TEXT); CREATE TABLE Track (Name TEXT, GenreId NUMBER, Bytes NUMBER, TrackId NUMBER, AlbumId NUMBER, Milliseconds NUMBER);"
      },
      {
        "question": "Show me durations for both of those pop tracks.",
        "query": "SELECT max(milliseconds) , min(milliseconds) FROM genre AS t1 JOIN track AS t2 ON t1.genreid = t2.genreid WHERE t1.name = \"Pop\"",
        "schema": "CREATE TABLE Album (AlbumId NUMBER, Title TEXT); CREATE TABLE Genre (Name TEXT, GenreId NUMBER); CREATE TABLE Track (Milliseconds NUMBER, Name TEXT, TrackId NUMBER, GenreId NUMBER, Bytes NUMBER, AlbumId NUMBER);"
      }
    ],
    [
      {
        "question": "Show me the names of artists with no album.",
        "query": "SELECT name FROM artist EXCEPT SELECT t2.name FROM album AS t1 JOIN artist AS t2 ON t1.artistid = t2.artistid",
        "schema": "CREATE TABLE Artist (ArtistId NUMBER, Name TEXT); CREATE TABLE Customer (FirstName TEXT); CREATE TABLE Track (AlbumId NUMBER, Name TEXT); CREATE TABLE Album (ArtistId NUMBER, AlbumId NUMBER, Title TEXT);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT count(*) FROM artist WHERE artistid NOT IN(SELECT artistid FROM album)",
        "schema": "CREATE TABLE Artist (ArtistId NUMBER, Name TEXT); CREATE TABLE Album (AlbumId NUMBER, ArtistId NUMBER, Title TEXT); CREATE TABLE Track (AlbumId NUMBER, Name TEXT); CREATE TABLE Customer (FirstName TEXT);"
      }
    ]
  ],
  "entrepreneur": [
    [
      {
        "question": "Show me the names of all entrepreneurs.",
        "query": "SELECT t2.name FROM entrepreneur AS t1 JOIN people AS t2 ON t1.people_id = t2.people_id",
        "schema": "CREATE TABLE entrepreneur (People_ID NUMBER, Entrepreneur_ID NUMBER); CREATE TABLE people (Name TEXT, People_ID NUMBER);"
      },
      {
        "question": "Whose investor is not Rachel Elnaugh?",
        "query": "SELECT t2.name FROM entrepreneur AS t1 JOIN people AS t2 ON t1.people_id = t2.people_id WHERE t1.investor != \"Rachel Elnaugh\"",
        "schema": "CREATE TABLE entrepreneur (Entrepreneur_ID NUMBER, People_ID NUMBER, Investor TEXT); CREATE TABLE people (People_ID NUMBER, Name TEXT);"
      }
    ],
    [
      {
        "question": "Show me the names of all people.",
        "query": "SELECT name FROM people",
        "schema": "CREATE TABLE entrepreneur (People_ID NUMBER); CREATE TABLE people (People_ID NUMBER, Name TEXT);"
      },
      {
        "question": "Who has the shortest height?",
        "query": "SELECT name FROM people ORDER BY height ASC LIMIT 1",
        "schema": "CREATE TABLE people (People_ID NUMBER, Height NUMBER, Name TEXT); CREATE TABLE entrepreneur (People_ID NUMBER);"
      },
      {
        "question": "What is this people's weight?",
        "query": "SELECT weight FROM people ORDER BY height ASC LIMIT 1",
        "schema": "CREATE TABLE people (Name TEXT, People_ID NUMBER, Height NUMBER, Weight NUMBER); CREATE TABLE entrepreneur (People_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show me the names of all entrepreneurs.",
        "query": "SELECT t2.name FROM entrepreneur AS t1 JOIN people AS t2 ON t1.people_id = t2.people_id",
        "schema": "CREATE TABLE people (People_ID NUMBER, Name TEXT); CREATE TABLE entrepreneur (People_ID NUMBER, Entrepreneur_ID NUMBER);"
      },
      {
        "question": "Who has the greatest weight?",
        "query": "SELECT t2.name FROM entrepreneur AS t1 JOIN people AS t2 ON t1.people_id = t2.people_id ORDER BY t2.weight DESC LIMIT 1",
        "schema": "CREATE TABLE people (Weight NUMBER, People_ID NUMBER, Name TEXT); CREATE TABLE entrepreneur (People_ID NUMBER, Entrepreneur_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show me the names of all entrepreneurs.",
        "query": "SELECT t2.name FROM entrepreneur AS t1 JOIN people AS t2 ON t1.people_id = t2.people_id",
        "schema": "CREATE TABLE entrepreneur (Entrepreneur_ID NUMBER, People_ID NUMBER); CREATE TABLE people (People_ID NUMBER, Name TEXT);"
      },
      {
        "question": "Show me those with height taller than 1.85.",
        "query": "SELECT t2.name FROM entrepreneur AS t1 JOIN people AS t2 ON t1.people_id = t2.people_id WHERE t2.height > 1.85",
        "schema": "CREATE TABLE entrepreneur (People_ID NUMBER, Entrepreneur_ID NUMBER); CREATE TABLE people (People_ID NUMBER, Height NUMBER, Name TEXT);"
      },
      {
        "question": "What is the total money requested by them?",
        "query": "SELECT sum(t1.money_requested) FROM entrepreneur AS t1 JOIN people AS t2 ON t1.people_id = t2.people_id WHERE t2.height > 1.85",
        "schema": "CREATE TABLE people (Height NUMBER, People_ID NUMBER, Name TEXT); CREATE TABLE entrepreneur (People_ID NUMBER, Money_Requested NUMBER, Entrepreneur_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show me the names of all entrepreneurs.",
        "query": "SELECT t2.name FROM entrepreneur AS t1 JOIN people AS t2 ON t1.people_id = t2.people_id",
        "schema": "CREATE TABLE people (People_ID NUMBER, Name TEXT); CREATE TABLE entrepreneur (Entrepreneur_ID NUMBER, People_ID NUMBER);"
      },
      {
        "question": "Whose investor is Simon Woodroffe or Peter Jones?",
        "query": "SELECT t2.name FROM entrepreneur AS t1 JOIN people AS t2 ON t1.people_id = t2.people_id WHERE t1.investor = \"Simon Woodroffe\" OR t1.investor = \"Peter Jones\"",
        "schema": "CREATE TABLE entrepreneur (People_ID NUMBER, Entrepreneur_ID NUMBER, Investor TEXT); CREATE TABLE people (People_ID NUMBER, Name TEXT);"
      },
      {
        "question": "Show me their dates of birth.",
        "query": "SELECT t2.date_of_birth FROM entrepreneur AS t1 JOIN people AS t2 ON t1.people_id = t2.people_id WHERE t1.investor = \"Simon Woodroffe\" OR t1.investor = \"Peter Jones\"",
        "schema": "CREATE TABLE entrepreneur (Entrepreneur_ID NUMBER, Investor TEXT, People_ID NUMBER); CREATE TABLE people (Date_of_Birth TEXT, Name TEXT, People_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show me the names of all entrepreneurs.",
        "query": "SELECT t2.name FROM entrepreneur AS t1 JOIN people AS t2 ON t1.people_id = t2.people_id",
        "schema": "CREATE TABLE entrepreneur (People_ID NUMBER, Entrepreneur_ID NUMBER); CREATE TABLE people (Name TEXT, People_ID NUMBER);"
      },
      {
        "question": "How much money did they each request?",
        "query": "SELECT t2.name,t1.money_requested FROM entrepreneur AS t1 JOIN people AS t2 ON t1.people_id = t2.people_id",
        "schema": "CREATE TABLE people (People_ID NUMBER, Name TEXT); CREATE TABLE entrepreneur (Money_Requested NUMBER, Entrepreneur_ID NUMBER, People_ID NUMBER);"
      },
      {
        "question": "Give me the weights of them only, in descending order of money requested.",
        "query": "SELECT t2.weight FROM entrepreneur AS t1 JOIN people AS t2 ON t1.people_id = t2.people_id ORDER BY t1.money_requested DESC",
        "schema": "CREATE TABLE people (Weight NUMBER, People_ID NUMBER, Name TEXT); CREATE TABLE entrepreneur (Money_Requested NUMBER, People_ID NUMBER, Entrepreneur_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show me the name of all investors.",
        "query": "SELECT investor FROM entrepreneur GROUP BY investor",
        "schema": "CREATE TABLE people (People_ID NUMBER, Name TEXT); CREATE TABLE entrepreneur (People_ID NUMBER, Investor TEXT);"
      },
      {
        "question": "Who has invested in the most number of entrepreneurs?",
        "query": "SELECT investor FROM entrepreneur GROUP BY investor ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE entrepreneur (Investor TEXT, Entrepreneur_ID NUMBER, People_ID NUMBER); CREATE TABLE people (Name TEXT, People_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show me the name of all investors.",
        "query": "SELECT investor FROM entrepreneur GROUP BY investor",
        "schema": "CREATE TABLE people (Name TEXT, People_ID NUMBER); CREATE TABLE entrepreneur (People_ID NUMBER, Investor TEXT);"
      },
      {
        "question": "Who have invested in at least two entrepreneurs?",
        "query": "SELECT investor FROM entrepreneur GROUP BY investor HAVING count(*) >= 2",
        "schema": "CREATE TABLE people (People_ID NUMBER, Name TEXT); CREATE TABLE entrepreneur (Entrepreneur_ID NUMBER, Investor TEXT, People_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show me the names of all entrepreneurs.",
        "query": "SELECT t2.name FROM entrepreneur AS t1 JOIN people AS t2 ON t1.people_id = t2.people_id",
        "schema": "CREATE TABLE entrepreneur (Entrepreneur_ID NUMBER, People_ID NUMBER); CREATE TABLE people (Name TEXT, People_ID NUMBER);"
      },
      {
        "question": "What are their companies?",
        "query": "SELECT t2.name,t1.company FROM entrepreneur AS t1 JOIN people AS t2 ON t1.people_id = t2.people_id",
        "schema": "CREATE TABLE people (Name TEXT, People_ID NUMBER); CREATE TABLE entrepreneur (People_ID NUMBER, Entrepreneur_ID NUMBER, Company TEXT);"
      },
      {
        "question": "List them in descending order of money requested.",
        "query": "SELECT t2.name , t1.company FROM entrepreneur AS t1 JOIN people AS t2 ON t1.people_id = t2.people_id ORDER BY t1.money_requested",
        "schema": "CREATE TABLE people (Name TEXT, People_ID NUMBER); CREATE TABLE entrepreneur (Entrepreneur_ID NUMBER, Company TEXT, Money_Requested NUMBER, People_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What are the name of all the people?",
        "query": "SELECT name FROM people",
        "schema": "CREATE TABLE people (People_ID NUMBER, Name TEXT); CREATE TABLE entrepreneur (People_ID NUMBER);"
      },
      {
        "question": "Show me those who are not entrepreneurs.",
        "query": "SELECT name FROM people WHERE people_id NOT IN (SELECT people_id FROM entrepreneur)",
        "schema": "CREATE TABLE entrepreneur (People_ID NUMBER, Entrepreneur_ID NUMBER); CREATE TABLE people (People_ID NUMBER, Name TEXT);"
      }
    ],
    [
      {
        "question": "Show me the name of all investors.",
        "query": "SELECT investor FROM entrepreneur GROUP BY investor",
        "schema": "CREATE TABLE people (People_ID NUMBER, Name TEXT); CREATE TABLE entrepreneur (People_ID NUMBER, Investor TEXT);"
      },
      {
        "question": "Who have been requested more than 140000 by any entrepreneurs?",
        "query": "SELECT investor FROM entrepreneur WHERE money_requested > 140000",
        "schema": "CREATE TABLE people (Name TEXT, People_ID NUMBER); CREATE TABLE entrepreneur (Investor TEXT, Money_Requested NUMBER, People_ID NUMBER, Entrepreneur_ID NUMBER);"
      },
      {
        "question": "Among them, who have been requested less than 120000 by any entrepreneurs?",
        "query": "SELECT investor FROM entrepreneur WHERE money_requested > 140000 INTERSECT SELECT investor FROM entrepreneur WHERE money_requested < 120000",
        "schema": "CREATE TABLE people (People_ID NUMBER, Name TEXT); CREATE TABLE entrepreneur (Money_Requested NUMBER, Investor TEXT, Entrepreneur_ID NUMBER, People_ID NUMBER);"
      }
    ]
  ],
  "farm": [
    [
      {
        "question": "Tell me everything about the farms.",
        "query": "SELECT * FROM farm",
        "schema": "CREATE TABLE farm (Farm_ID NUMBER, Oxen NUMBER, Cows NUMBER, Bulls NUMBER); CREATE TABLE competition_record (Farm_ID NUMBER, Competition_ID NUMBER); CREATE TABLE farm_competition (Theme TEXT, Competition_ID NUMBER);"
      },
      {
        "question": "Show me the bulls produced by all the farms.",
        "query": "SELECT bulls FROM farm",
        "schema": "CREATE TABLE farm (Bulls NUMBER, Oxen NUMBER, Farm_ID NUMBER, Total_Cattle NUMBER, Cows NUMBER); CREATE TABLE farm_competition (Competition_ID NUMBER, Theme TEXT); CREATE TABLE competition_record (Competition_ID NUMBER, Farm_ID NUMBER);"
      },
      {
        "question": "What about the cows?",
        "query": "SELECT cows FROM farm",
        "schema": "CREATE TABLE competition_record (Farm_ID NUMBER, Competition_ID NUMBER); CREATE TABLE farm (Cows NUMBER, Total_Cattle NUMBER, Bulls NUMBER, Oxen NUMBER, Sheep_and_Goats NUMBER, Farm_ID NUMBER); CREATE TABLE farm_competition (Competition_ID NUMBER, Theme TEXT);"
      },
      {
        "question": "Tell me the maximum and minimum number of cows.",
        "query": "SELECT max(cows) , min(cows) FROM farm",
        "schema": "CREATE TABLE competition_record (Competition_ID NUMBER, Farm_ID NUMBER); CREATE TABLE farm_competition (Competition_ID NUMBER, Theme TEXT); CREATE TABLE farm (Cows NUMBER, Total_Cattle NUMBER, Sheep_and_Goats NUMBER, Bulls NUMBER, Oxen NUMBER, Farm_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show me the official names of all the cities.",
        "query": "SELECT official_name FROM city",
        "schema": "CREATE TABLE city (City_ID NUMBER, Status TEXT, Official_Name TEXT); CREATE TABLE farm_competition (Host_city_ID NUMBER);"
      },
      {
        "question": "Which of these cities has the largest population?",
        "query": "SELECT official_name FROM city ORDER BY population DESC LIMIT 1",
        "schema": "CREATE TABLE city (City_ID NUMBER, Status TEXT, Official_Name TEXT, Population NUMBER); CREATE TABLE farm_competition (Host_city_ID NUMBER);"
      },
      {
        "question": "What is its population?",
        "query": "SELECT official_name, population FROM city ORDER BY population DESC LIMIT 1",
        "schema": "CREATE TABLE city (Official_Name TEXT, Population NUMBER, Status TEXT, City_ID NUMBER); CREATE TABLE farm_competition (Host_city_ID NUMBER);"
      },
      {
        "question": "Can you only show the official name and status of this city?",
        "query": "SELECT official_name , status FROM city ORDER BY population DESC LIMIT 1",
        "schema": "CREATE TABLE farm_competition (Host_city_ID NUMBER); CREATE TABLE city (City_ID NUMBER, Official_Name TEXT, Status TEXT, Population NUMBER);"
      }
    ],
    [
      {
        "question": "List all the city names.",
        "query": "SELECT official_name FROM city",
        "schema": "CREATE TABLE city (Official_Name TEXT, City_ID NUMBER); CREATE TABLE farm_competition (Host_city_ID NUMBER);"
      },
      {
        "question": "Can you also show me the competition id of these cities?",
        "query": "SELECT t1.official_name, t2.competition_id FROM city AS t1 JOIN farm_competition AS t2 ON t1.city_id = t2.host_city_id",
        "schema": "CREATE TABLE city (City_ID NUMBER, Official_Name TEXT); CREATE TABLE farm_competition (Host_city_ID NUMBER, Competition_ID NUMBER); CREATE TABLE farm (Farm_ID NUMBER); CREATE TABLE competition_record (Competition_ID NUMBER, Farm_ID NUMBER);"
      },
      {
        "question": "How about the themes of these competitions?",
        "query": "SELECT t1.official_name, t2.theme FROM city AS t1 JOIN farm_competition AS t2 ON t1.city_id = t2.host_city_id",
        "schema": "CREATE TABLE city (Official_Name TEXT, City_ID NUMBER); CREATE TABLE farm_competition (Host_city_ID NUMBER, Competition_ID NUMBER, Theme TEXT, Hosts TEXT); CREATE TABLE competition_record (Competition_ID NUMBER, Farm_ID NUMBER); CREATE TABLE farm (Farm_ID NUMBER);"
      },
      {
        "question": "Which of these cities hosted more than one competition?",
        "query": "SELECT t1.official_name FROM city AS t1 JOIN farm_competition AS t2 ON t1.city_id = t2.host_city_id GROUP BY t2.host_city_id HAVING count(*) > 1",
        "schema": "CREATE TABLE competition_record (Competition_ID NUMBER, Farm_ID NUMBER); CREATE TABLE farm (Farm_ID NUMBER); CREATE TABLE city (City_ID NUMBER, Official_Name TEXT); CREATE TABLE farm_competition (Theme TEXT, Host_city_ID NUMBER, Hosts TEXT, Competition_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show me the names of all cities",
        "query": "SELECT official_name FROM city",
        "schema": "CREATE TABLE farm_competition (Host_city_ID NUMBER); CREATE TABLE city (City_ID NUMBER, Official_Name TEXT);"
      },
      {
        "question": "How many competitions did these cities host?",
        "query": "SELECT t1.official_name, count(*) FROM city AS t1 JOIN farm_competition AS t2 ON t1.city_id = t2.host_city_id GROUP BY city_id",
        "schema": "CREATE TABLE city (Official_Name TEXT, City_ID NUMBER); CREATE TABLE farm_competition (Hosts TEXT, Host_city_ID NUMBER, Competition_ID NUMBER);"
      },
      {
        "question": "Which of these cities hosted the most competitions?",
        "query": "SELECT t1.official_name FROM city AS t1 JOIN farm_competition AS t2 ON t1.city_id = t2.host_city_id GROUP BY t2.host_city_id ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE city (City_ID NUMBER, Official_Name TEXT); CREATE TABLE farm_competition (Host_city_ID NUMBER, Hosts TEXT, Competition_ID NUMBER); CREATE TABLE farm (Farm_ID NUMBER);"
      },
      {
        "question": "Can you only show me its status?",
        "query": "SELECT t1.status FROM city AS t1 JOIN farm_competition AS t2 ON t1.city_id = t2.host_city_id GROUP BY t2.host_city_id ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE city (Status TEXT, City_ID NUMBER, Official_Name TEXT); CREATE TABLE competition_record (Competition_ID NUMBER, Rank NUMBER); CREATE TABLE farm (Farm_ID NUMBER); CREATE TABLE farm_competition (Competition_ID NUMBER, Hosts TEXT, Host_city_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show me the information for all of the cities.",
        "query": "SELECT * FROM city",
        "schema": "CREATE TABLE farm_competition (Host_city_ID NUMBER); CREATE TABLE city (Population NUMBER, Area_km_2 NUMBER, Official_Name TEXT, Status TEXT, Census_Ranking TEXT, City_ID NUMBER);"
      },
      {
        "question": "Which of these cities have a population greater than 1000?",
        "query": "SELECT * FROM city WHERE population > 1000",
        "schema": "CREATE TABLE farm_competition (Host_city_ID NUMBER); CREATE TABLE city (Status TEXT, Official_Name TEXT, Area_km_2 NUMBER, Population NUMBER, City_ID NUMBER, Census_Ranking TEXT);"
      },
      {
        "question": "Show me all the years when a competition was held in these cities.",
        "query": "SELECT t2.year FROM city AS t1 JOIN farm_competition AS t2 ON t1.city_id = t2.host_city_id WHERE population > 1000",
        "schema": "CREATE TABLE city (City_ID NUMBER, Population NUMBER, Area_km_2 NUMBER, Status TEXT, Census_Ranking TEXT, Official_Name TEXT); CREATE TABLE farm (Year NUMBER); CREATE TABLE farm_competition (Competition_ID NUMBER, Year NUMBER, Host_city_ID NUMBER);"
      },
      {
        "question": "What about the themes of these competitions?",
        "query": "SELECT t2.theme FROM city AS t1 JOIN farm_competition AS t2 ON t1.city_id = t2.host_city_id WHERE t1.population > 1000",
        "schema": "CREATE TABLE farm_competition (Hosts TEXT, Year NUMBER, Competition_ID NUMBER, Theme TEXT, Host_city_ID NUMBER); CREATE TABLE city (Census_Ranking TEXT, Status TEXT, City_ID NUMBER, Population NUMBER, Area_km_2 NUMBER, Official_Name TEXT); CREATE TABLE farm (Year NUMBER, Farm_ID NUMBER);"
      }
    ],
    [
      {
        "question": "List the official names of all the cities.",
        "query": "SELECT DISTINCT official_name FROM city",
        "schema": "CREATE TABLE city (Status TEXT, Official_Name TEXT, City_ID NUMBER);"
      },
      {
        "question": "Show me all the status of these cities.",
        "query": "SELECT DISTINCT status FROM city",
        "schema": "CREATE TABLE city (Status TEXT, Official_Name TEXT, City_ID NUMBER);"
      },
      {
        "question": "What is the number of cities with each status?",
        "query": "SELECT status, count(*) FROM city GROUP BY status",
        "schema": "CREATE TABLE city (City_ID NUMBER, Official_Name TEXT, Status TEXT);"
      },
      {
        "question": "Can you show them in increasing order?",
        "query": "SELECT status FROM city GROUP BY status ORDER BY count(*) ASC",
        "schema": "CREATE TABLE city (Official_Name TEXT, Status TEXT, City_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Tell me the names of all the cities.",
        "query": "SELECT official_name FROM city",
        "schema": "CREATE TABLE city (City_ID NUMBER, Official_Name TEXT); CREATE TABLE farm_competition (Host_city_ID NUMBER);"
      },
      {
        "question": "Tell me the city status of \"Grand Falls/Grand-Sault\".",
        "query": "SELECT status FROM city WHERE official_name = \"Grand Falls/Grand-Sault\"",
        "schema": "CREATE TABLE city (Status TEXT, Official_Name TEXT, City_ID NUMBER); CREATE TABLE farm_competition (Host_city_ID NUMBER);"
      },
      {
        "question": "Which of the cities are not towns?",
        "query": "SELECT official_name FROM city WHERE status != \"Town\"",
        "schema": "CREATE TABLE city (Official_Name TEXT, Status TEXT, City_ID NUMBER); CREATE TABLE farm_competition (Host_city_ID NUMBER);"
      },
      {
        "question": "Which city status is the most common?",
        "query": "SELECT status FROM city GROUP BY status ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE city (City_ID NUMBER, Official_Name TEXT, Status TEXT); CREATE TABLE farm_competition (Host_city_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show me all the cities.",
        "query": "SELECT * FROM city",
        "schema": "CREATE TABLE farm_competition (Host_city_ID NUMBER); CREATE TABLE city (Area_km_2 NUMBER, Population NUMBER, Status TEXT, Official_Name TEXT, City_ID NUMBER);"
      },
      {
        "question": "Show me the official names of all the cities.",
        "query": "SELECT official_name FROM city",
        "schema": "CREATE TABLE city (Population NUMBER, Status TEXT, City_ID NUMBER, Official_Name TEXT, Area_km_2 NUMBER); CREATE TABLE farm_competition (Host_city_ID NUMBER);"
      },
      {
        "question": "Which of these cities have hosted competitions before?",
        "query": "SELECT DISTINCT official_name FROM city AS t1 JOIN farm_competition AS t2 ON t1.city_id = t2.host_city_id",
        "schema": "CREATE TABLE farm_competition (Hosts TEXT, Host_city_ID NUMBER); CREATE TABLE city (Area_km_2 NUMBER, Official_Name TEXT, Population NUMBER, Status TEXT, City_ID NUMBER);"
      },
      {
        "question": "Which of them have not?",
        "query": "SELECT official_name FROM city WHERE city_id NOT IN (SELECT host_city_id FROM farm_competition)",
        "schema": "CREATE TABLE farm_competition (Host_city_ID NUMBER, Hosts TEXT); CREATE TABLE city (Official_Name TEXT, Status TEXT, City_ID NUMBER, Population NUMBER, Area_km_2 NUMBER);"
      }
    ],
    [
      {
        "question": "List the names of all the cities.",
        "query": "SELECT official_name FROM city",
        "schema": "CREATE TABLE city (Official_Name TEXT, City_ID NUMBER); CREATE TABLE farm_competition (Host_city_ID NUMBER);"
      },
      {
        "question": "Which of these cities have a population bigger than 1500?",
        "query": "SELECT official_name FROM city WHERE population > 1500",
        "schema": "CREATE TABLE farm_competition (Host_city_ID NUMBER); CREATE TABLE city (Official_Name TEXT, City_ID NUMBER, Population NUMBER);"
      },
      {
        "question": "Which cities have a population smaller than 500?",
        "query": "SELECT official_name FROM city WHERE population < 500",
        "schema": "CREATE TABLE city (City_ID NUMBER, Population NUMBER, Official_Name TEXT); CREATE TABLE farm_competition (Host_city_ID NUMBER);"
      },
      {
        "question": "Show all statuses that are common between these two types of cities.",
        "query": "SELECT status FROM city WHERE population > 1500 INTERSECT SELECT status FROM city WHERE population < 500",
        "schema": "CREATE TABLE farm_competition (Host_city_ID NUMBER); CREATE TABLE city (Population NUMBER, Official_Name TEXT, Status TEXT, City_ID NUMBER);"
      }
    ]
  ],
  "gymnast": [
    [
      {
        "question": "Can I see the names of the gymnasts?",
        "query": "SELECT t2.name FROM gymnast AS t1 JOIN people AS t2 ON t1.gymnast_id = t2.people_id",
        "schema": "CREATE TABLE gymnast (Gymnast_ID NUMBER); CREATE TABLE people (People_ID NUMBER, Name TEXT);"
      },
      {
        "question": "How old is the gymnast from Bonao?",
        "query": "SELECT t2.age FROM gymnast AS t1 JOIN people AS t2 ON t1.gymnast_id = t2.people_id WHERE hometown = \"Bonao\"",
        "schema": "CREATE TABLE people (Name TEXT, People_ID NUMBER, Hometown TEXT, Age NUMBER); CREATE TABLE gymnast (Gymnast_ID NUMBER);"
      },
      {
        "question": "Who is from Miami?",
        "query": "SELECT t2.name FROM gymnast AS t1 JOIN people AS t2 ON t1.gymnast_id = t2.people_id WHERE hometown = \"Miami\"",
        "schema": "CREATE TABLE gymnast (Gymnast_ID NUMBER); CREATE TABLE people (People_ID NUMBER, Age NUMBER, Name TEXT, Hometown TEXT);"
      },
      {
        "question": "How about gymnasts not from \"Santo Domingo\"?",
        "query": "SELECT t2.name FROM gymnast AS t1 JOIN people AS t2 ON t1.gymnast_id = t2.people_id WHERE t2.hometown != \"Santo Domingo\"",
        "schema": "CREATE TABLE gymnast (Gymnast_ID NUMBER); CREATE TABLE people (Age NUMBER, Hometown TEXT, Name TEXT, People_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What is the average height of all people?",
        "query": "SELECT avg(height) FROM people",
        "schema": "CREATE TABLE people (People_ID NUMBER, Name TEXT, Age NUMBER, Height NUMBER); CREATE TABLE gymnast (Gymnast_ID NUMBER);"
      },
      {
        "question": "How about the average height of gymnasts?",
        "query": "SELECT avg(t2.height) FROM gymnast AS t1 JOIN people AS t2 ON t1.gymnast_id = t2.people_id",
        "schema": "CREATE TABLE gymnast (Gymnast_ID NUMBER); CREATE TABLE people (Age NUMBER, Height NUMBER, Name TEXT, People_ID NUMBER);"
      },
      {
        "question": "How old is the tallest among all people?",
        "query": "SELECT age FROM people ORDER BY height DESC LIMIT 1",
        "schema": "CREATE TABLE gymnast (Gymnast_ID NUMBER); CREATE TABLE people (Height NUMBER, Age NUMBER, Name TEXT, People_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Who is the tallest?",
        "query": "SELECT name FROM people ORDER BY height DESC LIMIT 1",
        "schema": "CREATE TABLE gymnast (Gymnast_ID NUMBER, Total_Points NUMBER); CREATE TABLE people (Name TEXT, Height NUMBER, Age NUMBER, People_ID NUMBER);"
      },
      {
        "question": "Who is the oldest gymnast?",
        "query": "SELECT t2.name FROM gymnast AS t1 JOIN people AS t2 ON t1.gymnast_id = t2.people_id ORDER BY age DESC LIMIT 1",
        "schema": "CREATE TABLE gymnast (Gymnast_ID NUMBER, Total_Points NUMBER); CREATE TABLE people (Height NUMBER, People_ID NUMBER, Age NUMBER, Name TEXT);"
      },
      {
        "question": "Please show the top 5 oldest gymnasts.",
        "query": "SELECT t2.name FROM gymnast AS t1 JOIN people AS t2 ON t1.gymnast_id = t2.people_id ORDER BY age DESC LIMIT 5",
        "schema": "CREATE TABLE gymnast (Gymnast_ID NUMBER, Total_Points NUMBER); CREATE TABLE people (Age NUMBER, Height NUMBER, Name TEXT, People_ID NUMBER);"
      },
      {
        "question": "How about the top 5 oldest people?",
        "query": "SELECT name FROM people ORDER BY age DESC LIMIT 5",
        "schema": "CREATE TABLE people (Name TEXT, Height NUMBER, Age NUMBER, People_ID NUMBER); CREATE TABLE gymnast (Gymnast_ID NUMBER, Total_Points NUMBER);"
      }
    ],
    [
      {
        "question": "What is the average age of all people?",
        "query": "SELECT avg(age) FROM people",
        "schema": "CREATE TABLE gymnast (Gymnast_ID NUMBER); CREATE TABLE people (Age NUMBER, People_ID NUMBER);"
      },
      {
        "question": "How about the average age of all gymnasts?",
        "query": "SELECT avg(age) FROM gymnast AS t1 JOIN people AS t2 ON t1.gymnast_id = t2.people_id",
        "schema": "CREATE TABLE gymnast (Gymnast_ID NUMBER); CREATE TABLE people (Age NUMBER, Name TEXT, People_ID NUMBER);"
      },
      {
        "question": "Who is the youngest gymnast?",
        "query": "SELECT t2.name FROM gymnast AS t1 JOIN people AS t2 ON t1.gymnast_id = t2.people_id ORDER BY t2.age ASC LIMIT 1",
        "schema": "CREATE TABLE people (People_ID NUMBER, Name TEXT, Age NUMBER); CREATE TABLE gymnast (Gymnast_ID NUMBER);"
      },
      {
        "question": "How many total points does he have?",
        "query": "SELECT t1.total_points FROM gymnast AS t1 JOIN people AS t2 ON t1.gymnast_id = t2.people_id ORDER BY t2.age ASC LIMIT 1",
        "schema": "CREATE TABLE people (Name TEXT, Age NUMBER, People_ID NUMBER); CREATE TABLE gymnast (Total_Points NUMBER, Gymnast_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What is the average total points of gymnasts?",
        "query": "SELECT avg(total_points) FROM gymnast",
        "schema": "CREATE TABLE people (People_ID NUMBER); CREATE TABLE gymnast (Floor_Exercise_Points NUMBER, Vault_Points NUMBER, Total_Points NUMBER, Rings_Points NUMBER, Gymnast_ID NUMBER);"
      },
      {
        "question": "How many gymnasts are there that have total points more than 50?",
        "query": "SELECT count(*) FROM gymnast AS t1 JOIN people AS t2 ON t1.gymnast_id = t2.people_id WHERE t1.total_points > 50",
        "schema": "CREATE TABLE gymnast (Vault_Points NUMBER, Rings_Points NUMBER, Floor_Exercise_Points NUMBER, Gymnast_ID NUMBER, Total_Points NUMBER); CREATE TABLE people (Age NUMBER, People_ID NUMBER);"
      },
      {
        "question": "How about the number of gymnasts with total points more than 57.5?",
        "query": "SELECT count(*) FROM gymnast AS t1 JOIN people AS t2 ON t1.gymnast_id = t2.people_id WHERE t1.total_points > 57.5",
        "schema": "CREATE TABLE people (People_ID NUMBER, Age NUMBER); CREATE TABLE gymnast (Rings_Points NUMBER, Vault_Points NUMBER, Total_Points NUMBER, Floor_Exercise_Points NUMBER, Gymnast_ID NUMBER);"
      },
      {
        "question": "What are the distinct hometowns of these gymnasts?",
        "query": "SELECT DISTINCT t2.hometown FROM gymnast AS t1 JOIN people AS t2 ON t1.gymnast_id = t2.people_id WHERE t1.total_points > 57.5",
        "schema": "CREATE TABLE gymnast (Vault_Points NUMBER, Gymnast_ID NUMBER, Floor_Exercise_Points NUMBER, Total_Points NUMBER, Rings_Points NUMBER); CREATE TABLE people (Age NUMBER, People_ID NUMBER, Hometown TEXT);"
      }
    ],
    [
      {
        "question": "How many gymnasts are there?",
        "query": "SELECT count(*) FROM gymnast AS t1 JOIN people AS t2 ON t1.gymnast_id = t2.people_id",
        "schema": "CREATE TABLE gymnast (Total_Points NUMBER, Gymnast_ID NUMBER); CREATE TABLE people (People_ID NUMBER, Name TEXT);"
      },
      {
        "question": "How many gymnasts are there in each age group?",
        "query": "SELECT t2.age , count(*) FROM gymnast AS t1 JOIN people AS t2 ON t1.gymnast_id = t2.people_id GROUP BY t2.age",
        "schema": "CREATE TABLE gymnast (Gymnast_ID NUMBER, Total_Points NUMBER); CREATE TABLE people (Age NUMBER, People_ID NUMBER, Name TEXT);"
      },
      {
        "question": "How many gymnasts are there in each hometown?",
        "query": "SELECT t2.hometown , count(*) FROM gymnast AS t1 JOIN people AS t2 ON t1.gymnast_id = t2.people_id GROUP BY t2.hometown",
        "schema": "CREATE TABLE gymnast (Total_Points NUMBER, Gymnast_ID NUMBER); CREATE TABLE people (People_ID NUMBER, Name TEXT, Age NUMBER, Hometown TEXT);"
      }
    ],
    [
      {
        "question": "How many distinct hometowns are there?",
        "query": "SELECT count(DISTINCT hometown) FROM people",
        "schema": "CREATE TABLE people (Name TEXT, People_ID NUMBER, Hometown TEXT);"
      },
      {
        "question": "How many gymnasts are from each town?",
        "query": "SELECT t2.hometown, count(*) FROM gymnast AS t1 JOIN people AS t2 ON t1.gymnast_id = t2.people_id GROUP BY t2.hometown",
        "schema": "CREATE TABLE gymnast (Gymnast_ID NUMBER, Total_Points NUMBER); CREATE TABLE people (Name TEXT, Hometown TEXT, People_ID NUMBER);"
      },
      {
        "question": "What is the most common hometown?",
        "query": "SELECT t2.hometown FROM gymnast AS t1 JOIN people AS t2 ON t1.gymnast_id = t2.people_id GROUP BY t2.hometown ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE people (People_ID NUMBER, Name TEXT, Hometown TEXT); CREATE TABLE gymnast (Total_Points NUMBER, Gymnast_ID NUMBER);"
      }
    ],
    [
      {
        "question": "How many distinct hometowns are there?",
        "query": "SELECT count(DISTINCT hometown) FROM people",
        "schema": "CREATE TABLE people (Name TEXT, People_ID NUMBER, Hometown TEXT);"
      },
      {
        "question": "How many gymnasts are there in each hometown?",
        "query": "SELECT t2.hometown, count(*) FROM gymnast AS t1 JOIN people AS t2 ON t1.gymnast_id = t2.people_id GROUP BY t2.hometown",
        "schema": "CREATE TABLE gymnast (Gymnast_ID NUMBER); CREATE TABLE people (People_ID NUMBER, Name TEXT, Hometown TEXT);"
      },
      {
        "question": "Which hometown has more than 1 gymnast?",
        "query": "SELECT t2.hometown FROM gymnast AS t1 JOIN people AS t2 ON t1.gymnast_id = t2.people_id GROUP BY t2.hometown HAVING count(*) >= 2",
        "schema": "CREATE TABLE gymnast (Gymnast_ID NUMBER); CREATE TABLE people (People_ID NUMBER, Name TEXT, Hometown TEXT);"
      }
    ],
    [
      {
        "question": "Who is the tallest gymnast?",
        "query": "SELECT t2.name FROM gymnast AS t1 JOIN people AS t2 ON t1.gymnast_id = t2.people_id ORDER BY t2.height DESC LIMIT 1",
        "schema": "CREATE TABLE gymnast (Floor_Exercise_Points NUMBER, Horizontal_Bar_Points NUMBER, Rings_Points NUMBER, Total_Points NUMBER, Gymnast_ID NUMBER); CREATE TABLE people (Age NUMBER, People_ID NUMBER, Height NUMBER, Name TEXT);"
      },
      {
        "question": "How about the shortest gymnast?",
        "query": "SELECT t2.name FROM gymnast AS t1 JOIN people AS t2 ON t1.gymnast_id = t2.people_id ORDER BY t2.height ASC LIMIT 1",
        "schema": "CREATE TABLE people (People_ID NUMBER, Age NUMBER, Height NUMBER, Name TEXT); CREATE TABLE gymnast (Floor_Exercise_Points NUMBER, Gymnast_ID NUMBER, Horizontal_Bar_Points NUMBER, Rings_Points NUMBER, Total_Points NUMBER);"
      },
      {
        "question": "Please show the names of gymnasts in ascending order by their heights.",
        "query": "SELECT t2.name FROM gymnast AS t1 JOIN people AS t2 ON t1.gymnast_id = t2.people_id ORDER BY t2.height ASC",
        "schema": "CREATE TABLE gymnast (Gymnast_ID NUMBER, Rings_Points NUMBER, Floor_Exercise_Points NUMBER, Horizontal_Bar_Points NUMBER, Total_Points NUMBER); CREATE TABLE people (Height NUMBER, People_ID NUMBER, Age NUMBER, Name TEXT);"
      }
    ],
    [
      {
        "question": "What is the average Floor Exercise Points of gymnasts?",
        "query": "SELECT avg(floor_exercise_points) FROM gymnast",
        "schema": "CREATE TABLE people (People_ID NUMBER); CREATE TABLE gymnast (Floor_Exercise_Points NUMBER, Horizontal_Bar_Points NUMBER, Total_Points NUMBER, Gymnast_ID NUMBER);"
      },
      {
        "question": "Please show the hometowns of the gymnasts.",
        "query": "SELECT t2.hometown FROM gymnast AS t1 JOIN people AS t2 ON t1.gymnast_id = t2.people_id",
        "schema": "CREATE TABLE people (Hometown TEXT, People_ID NUMBER); CREATE TABLE gymnast (Gymnast_ID NUMBER, Total_Points NUMBER, Horizontal_Bar_Points NUMBER, Floor_Exercise_Points NUMBER);"
      },
      {
        "question": "Please show the hometowns of all people.",
        "query": "SELECT hometown FROM people",
        "schema": "CREATE TABLE people (People_ID NUMBER, Hometown TEXT); CREATE TABLE gymnast (Horizontal_Bar_Points NUMBER, Total_Points NUMBER, Gymnast_ID NUMBER, Floor_Exercise_Points NUMBER);"
      },
      {
        "question": "What are the distinct hometowns that do not have any gymnasts?",
        "query": "SELECT DISTINCT hometown FROM people EXCEPT SELECT DISTINCT t2.hometown FROM gymnast AS t1 JOIN people AS t2 ON t1.gymnast_id = t2.people_id",
        "schema": "CREATE TABLE gymnast (Gymnast_ID NUMBER, Horizontal_Bar_Points NUMBER, Total_Points NUMBER, Floor_Exercise_Points NUMBER); CREATE TABLE people (People_ID NUMBER, Hometown TEXT);"
      }
    ],
    [
      {
        "question": "How many people are older than 23?",
        "query": "SELECT count(*) FROM people WHERE age > 23",
        "schema": "CREATE TABLE gymnast (Gymnast_ID NUMBER); CREATE TABLE people (Age NUMBER, Name TEXT, Height NUMBER, People_ID NUMBER);"
      },
      {
        "question": "How about the number of people younger than 20?",
        "query": "SELECT count(*) FROM people WHERE age < 20",
        "schema": "CREATE TABLE gymnast (Gymnast_ID NUMBER); CREATE TABLE people (Age NUMBER, People_ID NUMBER, Name TEXT, Height NUMBER);"
      },
      {
        "question": "Please show their hometowns.",
        "query": "SELECT hometown FROM people WHERE age < 20",
        "schema": "CREATE TABLE people (Name TEXT, Hometown TEXT, Height NUMBER, Age NUMBER, People_ID NUMBER); CREATE TABLE gymnast (Gymnast_ID NUMBER);"
      },
      {
        "question": "How about the hometowns shared by people older than 23 and younger than 20?",
        "query": "SELECT hometown FROM people WHERE age > 23 INTERSECT SELECT hometown FROM people WHERE age < 20",
        "schema": "CREATE TABLE people (Name TEXT, Height NUMBER, Age NUMBER, Hometown TEXT, People_ID NUMBER); CREATE TABLE gymnast (Gymnast_ID NUMBER);"
      }
    ]
  ],
  "phone_market": [
    [
      {
        "question": "What is the average price of phones?",
        "query": "SELECT avg(price) FROM phone",
        "schema": "CREATE TABLE phone_market (Phone_ID TEXT); CREATE TABLE phone (Carrier TEXT, Price NUMBER, Name TEXT, Phone_ID NUMBER);"
      },
      {
        "question": "What about their names?",
        "query": "SELECT name FROM phone",
        "schema": "CREATE TABLE phone_market (Phone_ID TEXT); CREATE TABLE phone (Price NUMBER, Phone_ID NUMBER, Carrier TEXT, Name TEXT);"
      },
      {
        "question": "Of those, only tell me the ones that are either \"Sprint\" or \"TMobile\" carriers.",
        "query": "SELECT name FROM phone WHERE carrier = \"Sprint\" OR carrier = \"TMobile\"",
        "schema": "CREATE TABLE phone (Phone_ID NUMBER, Price NUMBER, Name TEXT, Carrier TEXT); CREATE TABLE phone_market (Phone_ID TEXT);"
      }
    ],
    [
      {
        "question": "What is the memory of the cheapest phone?",
        "query": "SELECT memory_in_g FROM phone ORDER BY price ASC LIMIT 1",
        "schema": "CREATE TABLE phone (Phone_ID NUMBER, Memory_in_G NUMBER, Price NUMBER, Name TEXT);"
      },
      {
        "question": "Include the name as well please.",
        "query": "SELECT name, memory_in_g FROM phone ORDER BY price ASC LIMIT 1",
        "schema": "CREATE TABLE phone (Phone_ID NUMBER, Price NUMBER, Name TEXT, Memory_in_G NUMBER);"
      },
      {
        "question": "What about for the most expensive phone?",
        "query": "SELECT name, memory_in_g FROM phone ORDER BY price DESC LIMIT 1",
        "schema": "CREATE TABLE phone (Name TEXT, Price NUMBER, Memory_in_G NUMBER, Phone_ID NUMBER);"
      },
      {
        "question": "Which company carries this?",
        "query": "SELECT carrier FROM phone ORDER BY price DESC LIMIT 1",
        "schema": "CREATE TABLE phone (Name TEXT, Phone_ID NUMBER, Carrier TEXT, Memory_in_G NUMBER, Price NUMBER);"
      }
    ],
    [
      {
        "question": "What is the cheapest phone?",
        "query": "SELECT * FROM phone ORDER BY price ASC LIMIT 1",
        "schema": "CREATE TABLE phone (Name TEXT, Price NUMBER, Phone_ID NUMBER, Carrier TEXT); CREATE TABLE phone_market (Phone_ID TEXT);"
      },
      {
        "question": "Which carrier has this?",
        "query": "SELECT carrier FROM phone ORDER BY price ASC LIMIT 1",
        "schema": "CREATE TABLE phone (Phone_ID NUMBER, Price NUMBER, Name TEXT, Carrier TEXT); CREATE TABLE phone_market (Phone_ID TEXT);"
      },
      {
        "question": "Which one has the most phones instead?",
        "query": "SELECT carrier FROM phone GROUP BY carrier ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE phone_market (Phone_ID TEXT); CREATE TABLE phone (Phone_ID NUMBER, Name TEXT, Carrier TEXT, Price NUMBER);"
      }
    ],
    [
      {
        "question": "Show me all the phone carriers.",
        "query": "SELECT carrier FROM phone",
        "schema": "CREATE TABLE phone (Name TEXT, Carrier TEXT, Phone_ID NUMBER);"
      },
      {
        "question": "The ones with a phones having a price range of 700 to 900?",
        "query": "SELECT carrier FROM phone WHERE price > 700 AND price < 900",
        "schema": "CREATE TABLE phone (Phone_ID NUMBER, Price NUMBER, Name TEXT, Carrier TEXT);"
      },
      {
        "question": "How about the ones that have phones both price less than 700 and price more than 900.",
        "query": "SELECT carrier FROM phone WHERE price < 700 INTERSECT SELECT carrier FROM phone WHERE price > 900",
        "schema": "CREATE TABLE phone (Name TEXT, Price NUMBER, Carrier TEXT, Phone_ID NUMBER);"
      },
      {
        "question": "What about phones with memory less than 32 and memory greater than 64?",
        "query": "SELECT carrier FROM phone WHERE memory_in_g < 32 INTERSECT SELECT carrier FROM phone WHERE memory_in_g > 64",
        "schema": "CREATE TABLE phone (Name TEXT, Memory_in_G NUMBER, Phone_ID NUMBER, Carrier TEXT, Price NUMBER);"
      }
    ],
    [
      {
        "question": "What are the names of the phones available?",
        "query": "SELECT name FROM phone",
        "schema": "CREATE TABLE phone_market (Phone_ID TEXT); CREATE TABLE phone (Phone_ID NUMBER, Name TEXT);"
      },
      {
        "question": "What about those available in Alberta?",
        "query": "SELECT t3.name FROM phone_market AS t1 JOIN market AS t2 ON t1.market_id = t2.market_id JOIN phone AS t3 ON t1.phone_id = t3.phone_id WHERE t2.district = \"Alberta\"",
        "schema": "CREATE TABLE phone (Carrier TEXT, Name TEXT, Phone_ID NUMBER); CREATE TABLE market (Market_ID NUMBER, District TEXT); CREATE TABLE phone_market (Phone_ID TEXT, Market_ID NUMBER);"
      },
      {
        "question": "Show the district as well.",
        "query": "SELECT t3.name, t2.district FROM phone_market AS t1 JOIN market AS t2 ON t1.market_id = t2.market_id JOIN phone AS t3 ON t1.phone_id = t3.phone_id WHERE t2.district = \"Alberta\"",
        "schema": "CREATE TABLE market (Market_ID NUMBER, District TEXT); CREATE TABLE phone_market (Market_ID NUMBER, Phone_ID TEXT); CREATE TABLE phone (Carrier TEXT, Phone_ID NUMBER, Name TEXT);"
      },
      {
        "question": "Remove the restriction of those in Alberta only, show all instead.",
        "query": "SELECT t3.name , t2.district FROM phone_market AS t1 JOIN market AS t2 ON t1.market_id = t2.market_id JOIN phone AS t3 ON t1.phone_id = t3.phone_id",
        "schema": "CREATE TABLE phone (Phone_ID NUMBER, Carrier TEXT, Name TEXT); CREATE TABLE phone_market (Phone_ID TEXT, Market_ID NUMBER); CREATE TABLE market (District TEXT, Market_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What are the names and districts of the phones I can find in Ontario?",
        "query": "SELECT t3.name, t2.district FROM phone_market AS t1 JOIN market AS t2 ON t1.market_id = t2.market_id JOIN phone AS t3 ON t1.phone_id = t3.phone_id WHERE t2.district = \"Ontario\"",
        "schema": "CREATE TABLE phone_market (Market_ID NUMBER, Phone_ID TEXT); CREATE TABLE market (District TEXT, Market_ID NUMBER); CREATE TABLE phone (Phone_ID NUMBER, Name TEXT);"
      },
      {
        "question": "What about for each of the market district?",
        "query": "SELECT t3.name, t2.district FROM phone_market AS t1 JOIN market AS t2 ON t1.market_id = t2.market_id JOIN phone AS t3 ON t1.phone_id = t3.phone_id",
        "schema": "CREATE TABLE phone_market (Market_ID NUMBER, Phone_ID TEXT); CREATE TABLE market (District TEXT, Market_ID NUMBER); CREATE TABLE phone (Name TEXT, Phone_ID NUMBER);"
      },
      {
        "question": "Order those by increasing number of shops.",
        "query": "SELECT t3.name, t2.district FROM phone_market AS t1 JOIN market AS t2 ON t1.market_id = t2.market_id JOIN phone AS t3 ON t1.phone_id = t3.phone_id ORDER BY t2.num_of_shops",
        "schema": "CREATE TABLE phone_market (Market_ID NUMBER, Phone_ID TEXT); CREATE TABLE phone (Name TEXT, Phone_ID NUMBER); CREATE TABLE market (Market_ID NUMBER, Num_of_shops NUMBER, District TEXT);"
      },
      {
        "question": "By ranking instead?",
        "query": "SELECT t3.name , t2.district FROM phone_market AS t1 JOIN market AS t2 ON t1.market_id = t2.market_id JOIN phone AS t3 ON t1.phone_id = t3.phone_id ORDER BY t2.ranking",
        "schema": "CREATE TABLE phone (Name TEXT, Phone_ID NUMBER); CREATE TABLE phone_market (Phone_ID TEXT, Market_ID NUMBER); CREATE TABLE market (Ranking NUMBER, Market_ID NUMBER, Num_of_shops NUMBER, District TEXT);"
      }
    ],
    [
      {
        "question": "What are the markets with at least 30 shops?",
        "query": "SELECT * FROM market WHERE num_of_shops > 30",
        "schema": "CREATE TABLE market (District TEXT, Num_of_shops NUMBER, Ranking NUMBER, Market_ID NUMBER); CREATE TABLE phone_market (Market_ID NUMBER);"
      },
      {
        "question": "50 shops?",
        "query": "SELECT * FROM market WHERE num_of_shops > 50",
        "schema": "CREATE TABLE market (District TEXT, Market_ID NUMBER, Ranking NUMBER, Num_of_shops NUMBER); CREATE TABLE phone_market (Market_ID NUMBER);"
      },
      {
        "question": "What are their phones?",
        "query": "SELECT t3.name FROM phone_market AS t1 JOIN market AS t2 ON t1.market_id = t2.market_id JOIN phone AS t3 ON t1.phone_id = t3.phone_id WHERE t2.num_of_shops > 50",
        "schema": "CREATE TABLE market (Ranking NUMBER, District TEXT, Market_ID NUMBER, Num_of_shops NUMBER); CREATE TABLE phone_market (Phone_ID TEXT, Market_ID NUMBER); CREATE TABLE phone (Phone_ID NUMBER, Carrier TEXT, Name TEXT);"
      }
    ],
    [
      {
        "question": "What are the names of the phones?",
        "query": "SELECT name FROM phone",
        "schema": "CREATE TABLE phone (Phone_ID NUMBER, Name TEXT);"
      },
      {
        "question": "Show me their memory as well.",
        "query": "SELECT name, memory_in_g FROM phone",
        "schema": "CREATE TABLE phone (Name TEXT, Phone_ID NUMBER, Memory_in_G NUMBER);"
      },
      {
        "question": "Their total stocks?",
        "query": "SELECT t2.name , sum(t1.num_of_stock) FROM phone_market AS t1 JOIN phone AS t2 ON t1.phone_id = t2.phone_id GROUP BY t2.name",
        "schema": "CREATE TABLE phone (Name TEXT, Phone_ID NUMBER, Memory_in_G NUMBER); CREATE TABLE phone_market (Phone_ID TEXT, Num_of_stock NUMBER);"
      }
    ],
    [
      {
        "question": "Show the names of phones and their stocks.",
        "query": "SELECT t2.name, t1.num_of_stock FROM phone_market AS t1 JOIN phone AS t2 ON t1.phone_id = t2.phone_id",
        "schema": "CREATE TABLE phone_market (Num_of_stock NUMBER, Phone_ID TEXT); CREATE TABLE phone (Name TEXT, Phone_ID NUMBER);"
      },
      {
        "question": "Of those, which have 64 GB memory?",
        "query": "SELECT t2.name, t1.num_of_stock FROM phone_market AS t1 JOIN phone AS t2 ON t1.phone_id = t2.phone_id WHERE t2.memory_in_g = 64",
        "schema": "CREATE TABLE phone_market (Phone_ID TEXT, Market_ID NUMBER, Num_of_stock NUMBER); CREATE TABLE phone (Memory_in_G NUMBER, Phone_ID NUMBER, Name TEXT); CREATE TABLE market (Market_ID NUMBER);"
      },
      {
        "question": "How about the having total stocks at least 2000 instead?",
        "query": "SELECT t2.name, t1.num_of_stock FROM phone_market AS t1 JOIN phone AS t2 ON t1.phone_id = t2.phone_id GROUP BY t2.name HAVING sum(t1.num_of_stock) >= 2000",
        "schema": "CREATE TABLE phone_market (Num_of_stock NUMBER, Phone_ID TEXT, Market_ID NUMBER); CREATE TABLE phone (Memory_in_G NUMBER, Name TEXT, Phone_ID NUMBER); CREATE TABLE market (Market_ID NUMBER);"
      },
      {
        "question": "Don't show their number of stocks.",
        "query": "SELECT t2.name FROM phone_market AS t1 JOIN phone AS t2 ON t1.phone_id = t2.phone_id GROUP BY t2.name HAVING sum(t1.num_of_stock) >= 2000",
        "schema": "CREATE TABLE phone_market (Num_of_stock NUMBER, Phone_ID TEXT, Market_ID NUMBER); CREATE TABLE market (Market_ID NUMBER); CREATE TABLE phone (Name TEXT, Phone_ID NUMBER, Memory_in_G NUMBER);"
      },
      {
        "question": "Can you sort them in increasing order of total stocks?",
        "query": "SELECT t2.name FROM phone_market AS t1 JOIN phone AS t2 ON t1.phone_id = t2.phone_id GROUP BY t2.name HAVING sum(t1.num_of_stock) >= 2000 ORDER BY sum(t1.num_of_stock)",
        "schema": "CREATE TABLE phone (Name TEXT, Memory_in_G NUMBER, Phone_ID NUMBER); CREATE TABLE phone_market (Market_ID NUMBER, Num_of_stock NUMBER, Phone_ID TEXT); CREATE TABLE market (Market_ID NUMBER);"
      },
      {
        "question": "Decreasing order instead.",
        "query": "SELECT t2.name FROM phone_market AS t1 JOIN phone AS t2 ON t1.phone_id = t2.phone_id GROUP BY t2.name HAVING sum(t1.num_of_stock) >= 2000 ORDER BY sum(t1.num_of_stock) DESC",
        "schema": "CREATE TABLE market (Market_ID NUMBER); CREATE TABLE phone_market (Phone_ID TEXT, Num_of_stock NUMBER, Market_ID NUMBER); CREATE TABLE phone (Phone_ID NUMBER, Memory_in_G NUMBER, Name TEXT);"
      }
    ]
  ],
  "election_representative": [
    [
      {
        "question": "Show me the vote percents of all the elections.",
        "query": "SELECT vote_percent FROM election",
        "schema": "CREATE TABLE election (Vote_Percent NUMBER, Votes NUMBER, Election_ID NUMBER); CREATE TABLE representative (Representative_ID NUMBER);"
      },
      {
        "question": "What are the minimum and maximum ones of them?",
        "query": "SELECT min(vote_percent) , max(vote_percent) FROM election",
        "schema": "CREATE TABLE representative (Representative_ID NUMBER); CREATE TABLE election (Election_ID NUMBER, Vote_Percent NUMBER, Votes NUMBER);"
      }
    ],
    [
      {
        "question": "Show me the the name of all the representatives.",
        "query": "SELECT name FROM representative",
        "schema": "CREATE TABLE election (Representative_ID NUMBER); CREATE TABLE representative (Name TEXT, Representative_ID NUMBER);"
      },
      {
        "question": "Only show me those from New York or Indiana.",
        "query": "SELECT name FROM representative WHERE state = \"New York\" OR state = \"Indiana\"",
        "schema": "CREATE TABLE election (Representative_ID NUMBER); CREATE TABLE representative (State TEXT, Representative_ID NUMBER, Name TEXT);"
      },
      {
        "question": "What about their life spans?",
        "query": "SELECT lifespan FROM representative WHERE state = \"New York\" OR state = \"Indiana\"",
        "schema": "CREATE TABLE representative (State TEXT, Lifespan TEXT, Representative_ID NUMBER, Name TEXT); CREATE TABLE election (Representative_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show me the name of all the representatives.",
        "query": "SELECT name FROM representative",
        "schema": "CREATE TABLE representative (Representative_ID NUMBER, Name TEXT); CREATE TABLE election (Representative_ID NUMBER);"
      },
      {
        "question": "What about their votes in their elections?",
        "query": "SELECT t2.name,t1.votes FROM election AS t1 JOIN representative AS t2 ON t1.representative_id = t2.representative_id",
        "schema": "CREATE TABLE representative (Representative_ID NUMBER, Name TEXT); CREATE TABLE election (Representative_ID NUMBER, Votes NUMBER, Election_ID NUMBER);"
      },
      {
        "question": "Only show me the name of those with more than 10000 votes.",
        "query": "SELECT t2.name FROM election AS t1 JOIN representative AS t2 ON t1.representative_id = t2.representative_id WHERE votes > 10000",
        "schema": "CREATE TABLE election (Election_ID NUMBER, Votes NUMBER, Representative_ID NUMBER); CREATE TABLE representative (Representative_ID NUMBER, Name TEXT);"
      }
    ],
    [
      {
        "question": "Show me the name of all the representatives.",
        "query": "SELECT name FROM representative",
        "schema": "CREATE TABLE representative (Representative_ID NUMBER, Name TEXT); CREATE TABLE election (Representative_ID NUMBER);"
      },
      {
        "question": "What about their votes in their elections?",
        "query": "SELECT t2.name,t1.votes FROM election AS t1 JOIN representative AS t2 ON t1.representative_id = t2.representative_id",
        "schema": "CREATE TABLE election (Election_ID NUMBER, Votes NUMBER, Representative_ID NUMBER); CREATE TABLE representative (Name TEXT, Representative_ID NUMBER);"
      },
      {
        "question": "Show me their names in descending order of votes.",
        "query": "SELECT t2.name FROM election AS t1 JOIN representative AS t2 ON t1.representative_id = t2.representative_id ORDER BY votes DESC",
        "schema": "CREATE TABLE election (Votes NUMBER, Representative_ID NUMBER, Election_ID NUMBER); CREATE TABLE representative (Name TEXT, Representative_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show me the names of all parties of the representative.",
        "query": "SELECT DISTINCT party FROM representative",
        "schema": "CREATE TABLE representative (Party TEXT, Name TEXT, Representative_ID NUMBER); CREATE TABLE election (Representative_ID NUMBER);"
      },
      {
        "question": "Show me the names of all the representatives.",
        "query": "SELECT name FROM representative",
        "schema": "CREATE TABLE election (Representative_ID NUMBER); CREATE TABLE representative (Name TEXT, Party TEXT, Representative_ID NUMBER);"
      },
      {
        "question": "What are their votes?",
        "query": "SELECT t2.name,t1.votes FROM election AS t1 JOIN representative AS t2 ON t1.representative_id = t2.representative_id",
        "schema": "CREATE TABLE election (Representative_ID NUMBER, Votes NUMBER); CREATE TABLE representative (Representative_ID NUMBER, Party TEXT, Name TEXT);"
      },
      {
        "question": "What is the party of the one with the smallest number of votes?",
        "query": "SELECT t2.party FROM election AS t1 JOIN representative AS t2 ON t1.representative_id = t2.representative_id ORDER BY votes ASC LIMIT 1",
        "schema": "CREATE TABLE representative (Party TEXT, Representative_ID NUMBER, Name TEXT); CREATE TABLE election (Votes NUMBER, Representative_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show me the names of all the representatives.",
        "query": "SELECT name FROM representative",
        "schema": "CREATE TABLE representative (Representative_ID NUMBER, Name TEXT); CREATE TABLE election (Representative_ID NUMBER);"
      },
      {
        "question": "What about their lifespans?",
        "query": "SELECT name, lifespan FROM representative",
        "schema": "CREATE TABLE representative (Name TEXT, Lifespan TEXT, Representative_ID NUMBER); CREATE TABLE election (Representative_ID NUMBER);"
      },
      {
        "question": "Please list them in descending order of their vote percentage.",
        "query": "SELECT t2.lifespan FROM election AS t1 JOIN representative AS t2 ON t1.representative_id = t2.representative_id ORDER BY vote_percent DESC",
        "schema": "CREATE TABLE election (Votes NUMBER, Vote_Percent NUMBER, Representative_ID NUMBER); CREATE TABLE representative (Lifespan TEXT, Representative_ID NUMBER, Name TEXT);"
      }
    ],
    [
      {
        "question": "Show me the name of representatives from Republican party.",
        "query": "SELECT name FROM representative WHERE party = \"Republican\"",
        "schema": "CREATE TABLE election (Representative_ID NUMBER); CREATE TABLE representative (Representative_ID NUMBER, Name TEXT, Party TEXT);"
      },
      {
        "question": "What about their votes?",
        "query": "SELECT t2.name, t1.votes FROM election AS t1 JOIN representative AS t2 ON t1.representative_id = t2.representative_id WHERE t2.party = \"Republican\"",
        "schema": "CREATE TABLE election (Votes NUMBER, Representative_ID NUMBER); CREATE TABLE representative (Name TEXT, Representative_ID NUMBER, Party TEXT);"
      },
      {
        "question": "Show me the average of them.",
        "query": "SELECT avg(t1.votes) FROM election AS t1 JOIN representative AS t2 ON t1.representative_id = t2.representative_id WHERE t2.party = \"Republican\"",
        "schema": "CREATE TABLE election (Representative_ID NUMBER, Votes NUMBER); CREATE TABLE representative (Party TEXT, Representative_ID NUMBER, Name TEXT);"
      }
    ],
    [
      {
        "question": "What are the name of parties of representatives?",
        "query": "SELECT DISTINCT party FROM representative",
        "schema": "CREATE TABLE election (Representative_ID NUMBER); CREATE TABLE representative (Party TEXT, Representative_ID NUMBER, Name TEXT);"
      },
      {
        "question": "Show me the number of representatives in each party.",
        "query": "SELECT party , count(*) FROM representative GROUP BY party",
        "schema": "CREATE TABLE election (Representative_ID NUMBER); CREATE TABLE representative (Representative_ID NUMBER, Name TEXT, Party TEXT);"
      },
      {
        "question": "Give me the party that has more.",
        "query": "SELECT party , count(*) FROM representative GROUP BY party ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE representative (Name TEXT, Party TEXT, Representative_ID NUMBER); CREATE TABLE election (Representative_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What are the name of parties of representatives?",
        "query": "SELECT DISTINCT party FROM representative",
        "schema": "CREATE TABLE representative (Representative_ID NUMBER, Name TEXT, Party TEXT); CREATE TABLE election (Representative_ID NUMBER);"
      },
      {
        "question": "Show me the number of representatives in each party.",
        "query": "SELECT party , count(*) FROM representative GROUP BY party",
        "schema": "CREATE TABLE election (Representative_ID NUMBER); CREATE TABLE representative (Party TEXT, Name TEXT, Representative_ID NUMBER);"
      },
      {
        "question": "Give me the parties that have at least three of them.",
        "query": "SELECT party FROM representative GROUP BY party HAVING count(*) >= 3",
        "schema": "CREATE TABLE election (Representative_ID NUMBER); CREATE TABLE representative (Party TEXT, Representative_ID NUMBER, Name TEXT);"
      }
    ],
    [
      {
        "question": "Show me the name of the states of representative.",
        "query": "SELECT state FROM representative",
        "schema": "CREATE TABLE representative (Name TEXT, State TEXT, Representative_ID NUMBER); CREATE TABLE election (Representative_ID NUMBER);"
      },
      {
        "question": "What about their number of representatives?",
        "query": "SELECT state, count(*) FROM representative GROUP BY state",
        "schema": "CREATE TABLE representative (State TEXT, Name TEXT, Representative_ID NUMBER); CREATE TABLE election (Representative_ID NUMBER);"
      },
      {
        "question": "Show me the states that have at least of them.",
        "query": "SELECT state FROM representative GROUP BY state HAVING count(*) >= 2",
        "schema": "CREATE TABLE representative (State TEXT, Representative_ID NUMBER, Name TEXT); CREATE TABLE election (Representative_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show me the names of all the representatives.",
        "query": "SELECT name FROM representative",
        "schema": "CREATE TABLE representative (Representative_ID NUMBER, Name TEXT); CREATE TABLE election (Representative_ID NUMBER);"
      },
      {
        "question": "Who have not participated in elections listed here?",
        "query": "SELECT name FROM representative WHERE representative_id NOT IN (SELECT representative_id FROM election)",
        "schema": "CREATE TABLE election (Representative_ID NUMBER, Election_ID NUMBER); CREATE TABLE representative (Representative_ID NUMBER, Name TEXT);"
      }
    ]
  ],
  "formula_1": [
    [
      {
        "question": "What are all the races?",
        "query": "SELECT * FROM races",
        "schema": "CREATE TABLE qualifying (raceId NUMBER); CREATE TABLE driverStandings (raceId NUMBER); CREATE TABLE circuits (circuitId NUMBER); CREATE TABLE constructorStandings (raceId NUMBER); CREATE TABLE lapTimes (raceId NUMBER); CREATE TABLE pitStops (raceId NUMBER); CREATE TABLE results (raceId NUMBER, resultId NUMBER); CREATE TABLE races (name TEXT, round NUMBER, circuitId NUMBER, raceId NUMBER, url TEXT); CREATE TABLE drivers (driverId NUMBER); CREATE TABLE constructorResults (raceId NUMBER);"
      },
      {
        "question": "Show the name of the one held most recently.",
        "query": "SELECT name FROM races ORDER BY date DESC LIMIT 1",
        "schema": "CREATE TABLE results (raceId NUMBER, resultId NUMBER, milliseconds NUMBER, time TEXT); CREATE TABLE pitStops (raceId NUMBER); CREATE TABLE constructorResults (raceId NUMBER); CREATE TABLE drivers (driverId NUMBER); CREATE TABLE lapTimes (raceId NUMBER); CREATE TABLE qualifying (raceId NUMBER); CREATE TABLE constructorStandings (raceId NUMBER); CREATE TABLE circuits (circuitRef TEXT, circuitId NUMBER, name TEXT); CREATE TABLE races (round NUMBER, raceId NUMBER, year NUMBER, time TEXT, name TEXT, date TEXT, url TEXT, circuitId NUMBER); CREATE TABLE driverStandings (raceId NUMBER);"
      }
    ],
    [
      {
        "question": "What are all the races?",
        "query": "SELECT * FROM races",
        "schema": "CREATE TABLE constructorResults (raceId NUMBER); CREATE TABLE results (driverId NUMBER, resultId NUMBER, raceId NUMBER); CREATE TABLE circuits (circuitId NUMBER); CREATE TABLE races (round NUMBER, raceId NUMBER, url TEXT, circuitId NUMBER, name TEXT); CREATE TABLE lapTimes (raceId NUMBER); CREATE TABLE drivers (driverId NUMBER); CREATE TABLE constructorStandings (raceId NUMBER); CREATE TABLE driverStandings (raceId NUMBER); CREATE TABLE qualifying (raceId NUMBER, driverId NUMBER); CREATE TABLE pitStops (raceId NUMBER);"
      },
      {
        "question": "What is the most recent one?",
        "query": "SELECT * FROM races ORDER BY date DESC LIMIT 1",
        "schema": "CREATE TABLE constructorResults (raceId NUMBER); CREATE TABLE results (time TEXT, resultId NUMBER, milliseconds NUMBER, raceId NUMBER, driverId NUMBER); CREATE TABLE qualifying (driverId NUMBER, raceId NUMBER); CREATE TABLE seasons (url TEXT, year NUMBER); CREATE TABLE constructorStandings (raceId NUMBER); CREATE TABLE races (round NUMBER, name TEXT, time TEXT, date TEXT, year NUMBER, raceId NUMBER, circuitId NUMBER, url TEXT); CREATE TABLE drivers (driverId NUMBER); CREATE TABLE circuits (circuitId NUMBER); CREATE TABLE lapTimes (raceId NUMBER); CREATE TABLE driverStandings (raceId NUMBER); CREATE TABLE pitStops (raceId NUMBER);"
      },
      {
        "question": "Only show its name and date.",
        "query": "SELECT name , date FROM races ORDER BY date DESC LIMIT 1",
        "schema": "CREATE TABLE drivers (driverId NUMBER); CREATE TABLE circuits (circuitId NUMBER, name TEXT); CREATE TABLE races (round NUMBER, name TEXT, circuitId NUMBER, year NUMBER, time TEXT, date TEXT, url TEXT, raceId NUMBER); CREATE TABLE pitStops (raceId NUMBER); CREATE TABLE results (milliseconds NUMBER, resultId NUMBER, raceId NUMBER, time TEXT, driverId NUMBER); CREATE TABLE constructorResults (raceId NUMBER); CREATE TABLE driverStandings (raceId NUMBER); CREATE TABLE seasons (url TEXT, year NUMBER); CREATE TABLE constructorStandings (raceId NUMBER); CREATE TABLE lapTimes (raceId NUMBER); CREATE TABLE qualifying (raceId NUMBER, driverId NUMBER);"
      }
    ],
    [
      {
        "question": "What are all the races held in 2017?",
        "query": "SELECT * FROM races WHERE YEAR = 2017",
        "schema": "CREATE TABLE circuits (name TEXT, circuitId NUMBER, circuitRef TEXT); CREATE TABLE results (raceId NUMBER); CREATE TABLE driverStandings (raceId NUMBER); CREATE TABLE pitStops (raceId NUMBER); CREATE TABLE drivers (driverId NUMBER); CREATE TABLE seasons (url TEXT, year NUMBER); CREATE TABLE races (time TEXT, year NUMBER, date TEXT, name TEXT, round NUMBER, raceId NUMBER, circuitId NUMBER);"
      },
      {
        "question": "Only show their names.",
        "query": "SELECT name FROM races WHERE YEAR = 2017",
        "schema": "CREATE TABLE circuits (name TEXT, circuitId NUMBER, circuitRef TEXT); CREATE TABLE driverStandings (raceId NUMBER); CREATE TABLE pitStops (raceId NUMBER); CREATE TABLE results (raceId NUMBER); CREATE TABLE races (time TEXT, circuitId NUMBER, raceId NUMBER, name TEXT, year NUMBER, date TEXT, round NUMBER); CREATE TABLE seasons (url TEXT, year NUMBER); CREATE TABLE drivers (driverId NUMBER, surname TEXT);"
      }
    ],
    [
      {
        "question": "What are all races held between 2014 and 2017?",
        "query": "SELECT * FROM races WHERE YEAR BETWEEN 2014 AND 2017",
        "schema": "CREATE TABLE driverStandings (raceId NUMBER); CREATE TABLE pitStops (raceId NUMBER); CREATE TABLE circuits (circuitRef TEXT, circuitId NUMBER, name TEXT); CREATE TABLE lapTimes (raceId NUMBER); CREATE TABLE races (name TEXT, date TEXT, circuitId NUMBER, time TEXT, round NUMBER, year NUMBER, raceId NUMBER); CREATE TABLE seasons (year NUMBER, url TEXT); CREATE TABLE results (raceId NUMBER); CREATE TABLE drivers (driverId NUMBER);"
      },
      {
        "question": "Show the distinct names of them.",
        "query": "SELECT DISTINCT name FROM races WHERE YEAR BETWEEN 2014 AND 2017",
        "schema": "CREATE TABLE lapTimes (raceId NUMBER); CREATE TABLE pitStops (raceId NUMBER); CREATE TABLE circuits (circuitId NUMBER, circuitRef TEXT, name TEXT); CREATE TABLE driverStandings (raceId NUMBER); CREATE TABLE results (raceId NUMBER); CREATE TABLE drivers (forename TEXT, driverId NUMBER, surname TEXT); CREATE TABLE seasons (year NUMBER, url TEXT); CREATE TABLE races (name TEXT, round NUMBER, date TEXT, circuitId NUMBER, time TEXT, year NUMBER, raceId NUMBER);"
      }
    ],
    [
      {
        "question": "What are all the drivers?",
        "query": "SELECT * FROM drivers",
        "schema": "CREATE TABLE pitStops (driverId NUMBER); CREATE TABLE lapTimes (driverId NUMBER); CREATE TABLE qualifying (driverId NUMBER); CREATE TABLE drivers (surname TEXT, code TEXT, number NUMBER, forename TEXT, dob TEXT, driverId NUMBER, driverRef TEXT); CREATE TABLE races (raceId NUMBER); CREATE TABLE driverStandings (driverId NUMBER); CREATE TABLE results (raceId NUMBER, driverId NUMBER, number NUMBER);"
      },
      {
        "question": "What about those who once had laptime less than 93000 milliseconds?",
        "query": "SELECT * FROM drivers AS t1 JOIN laptimes AS t2 ON t1.driverid = t2.driverid WHERE t2.milliseconds < 93000",
        "schema": "CREATE TABLE drivers (surname TEXT, driverRef TEXT, forename TEXT, number NUMBER, dob TEXT, code TEXT, driverId NUMBER); CREATE TABLE results (driverId NUMBER, raceId NUMBER, milliseconds NUMBER, resultId NUMBER, laps NUMBER, number NUMBER); CREATE TABLE races (year NUMBER, raceId NUMBER); CREATE TABLE pitStops (driverId NUMBER, milliseconds NUMBER, duration TEXT); CREATE TABLE qualifying (driverId NUMBER); CREATE TABLE lapTimes (driverId NUMBER, raceId NUMBER, milliseconds NUMBER, time TEXT, lap NUMBER); CREATE TABLE driverStandings (driverStandingsId NUMBER, driverId NUMBER);"
      },
      {
        "question": "Show the distinct forename and surname of them.",
        "query": "SELECT DISTINCT t1.forename , t1.surname FROM drivers AS t1 JOIN laptimes AS t2 ON t1.driverid = t2.driverid WHERE t2.milliseconds < 93000",
        "schema": "CREATE TABLE races (year NUMBER, raceId NUMBER); CREATE TABLE lapTimes (milliseconds NUMBER, lap NUMBER, time TEXT, raceId NUMBER, driverId NUMBER); CREATE TABLE drivers (driverId NUMBER, code TEXT, surname TEXT, driverRef TEXT, dob TEXT, number NUMBER, forename TEXT); CREATE TABLE driverStandings (driverId NUMBER, driverStandingsId NUMBER); CREATE TABLE pitStops (milliseconds NUMBER, duration TEXT, driverId NUMBER); CREATE TABLE results (raceId NUMBER, milliseconds NUMBER, laps NUMBER, driverId NUMBER, resultId NUMBER, number NUMBER); CREATE TABLE qualifying (driverId NUMBER);"
      }
    ],
    [
      {
        "question": "What are all the drivers?",
        "query": "SELECT * FROM drivers",
        "schema": "CREATE TABLE drivers (forename TEXT, surname TEXT, driverRef TEXT, driverId NUMBER, number NUMBER, code TEXT, dob TEXT); CREATE TABLE pitStops (driverId NUMBER); CREATE TABLE lapTimes (driverId NUMBER); CREATE TABLE results (driverId NUMBER, number NUMBER, raceId NUMBER, resultId NUMBER); CREATE TABLE driverStandings (driverId NUMBER); CREATE TABLE races (raceId NUMBER); CREATE TABLE qualifying (driverId NUMBER);"
      },
      {
        "question": "What about those who once had laptime more than 100000 milliseconds?",
        "query": "SELECT * FROM drivers AS t1 JOIN laptimes AS t2 ON t1.driverid = t2.driverid WHERE t2.milliseconds > 100000",
        "schema": "CREATE TABLE results (milliseconds NUMBER, driverId NUMBER, resultId NUMBER, laps NUMBER, raceId NUMBER, number NUMBER); CREATE TABLE races (year NUMBER, raceId NUMBER); CREATE TABLE drivers (driverId NUMBER, forename TEXT, driverRef TEXT, dob TEXT, code TEXT, surname TEXT, number NUMBER); CREATE TABLE pitStops (milliseconds NUMBER, duration TEXT, driverId NUMBER); CREATE TABLE qualifying (driverId NUMBER); CREATE TABLE lapTimes (raceId NUMBER, lap NUMBER, time TEXT, driverId NUMBER, milliseconds NUMBER); CREATE TABLE driverStandings (driverId NUMBER, driverStandingsId NUMBER);"
      },
      {
        "question": "Show the distinct driver id and nationality of them.",
        "query": "SELECT DISTINCT t1.driverid , t1.nationality FROM drivers AS t1 JOIN laptimes AS t2 ON t1.driverid = t2.driverid WHERE t2.milliseconds > 100000",
        "schema": "CREATE TABLE drivers (dob TEXT, driverId NUMBER, driverRef TEXT, code TEXT, forename TEXT, surname TEXT, number NUMBER, nationality TEXT); CREATE TABLE races (raceId NUMBER, year NUMBER); CREATE TABLE qualifying (driverId NUMBER); CREATE TABLE results (laps NUMBER, milliseconds NUMBER, driverId NUMBER, number NUMBER, resultId NUMBER, raceId NUMBER); CREATE TABLE pitStops (driverId NUMBER, milliseconds NUMBER, duration TEXT); CREATE TABLE circuits (country TEXT); CREATE TABLE driverStandings (driverId NUMBER, driverStandingsId NUMBER); CREATE TABLE lapTimes (raceId NUMBER, lap NUMBER, time TEXT, milliseconds NUMBER, driverId NUMBER);"
      }
    ],
    [
      {
        "question": "What are all the drivers?",
        "query": "SELECT * FROM drivers",
        "schema": "CREATE TABLE results (number NUMBER, resultId NUMBER, driverId NUMBER, raceId NUMBER); CREATE TABLE drivers (driverRef TEXT, surname TEXT, dob TEXT, forename TEXT, code TEXT, number NUMBER, driverId NUMBER); CREATE TABLE qualifying (driverId NUMBER); CREATE TABLE pitStops (driverId NUMBER); CREATE TABLE driverStandings (driverId NUMBER); CREATE TABLE races (raceId NUMBER); CREATE TABLE lapTimes (driverId NUMBER);"
      },
      {
        "question": "Show the forename and surname of the one with the smallest laptime.",
        "query": "SELECT t1.forename , t1.surname FROM drivers AS t1 JOIN laptimes AS t2 ON t1.driverid = t2.driverid ORDER BY t2.milliseconds LIMIT 1",
        "schema": "CREATE TABLE driverStandings (driverId NUMBER); CREATE TABLE qualifying (driverId NUMBER); CREATE TABLE results (raceId NUMBER, number NUMBER, resultId NUMBER, driverId NUMBER); CREATE TABLE races (raceId NUMBER); CREATE TABLE drivers (driverRef TEXT, dob TEXT, number NUMBER, code TEXT, driverId NUMBER, forename TEXT, surname TEXT); CREATE TABLE pitStops (lap NUMBER, driverId NUMBER); CREATE TABLE lapTimes (raceId NUMBER, driverId NUMBER, lap NUMBER, milliseconds NUMBER, time TEXT);"
      }
    ],
    [
      {
        "question": "What are all the drivers?",
        "query": "SELECT * FROM drivers",
        "schema": "CREATE TABLE driverStandings (driverId NUMBER); CREATE TABLE lapTimes (driverId NUMBER); CREATE TABLE races (raceId NUMBER); CREATE TABLE pitStops (driverId NUMBER); CREATE TABLE results (driverId NUMBER, resultId NUMBER, number NUMBER, raceId NUMBER); CREATE TABLE drivers (surname TEXT, forename TEXT, code TEXT, driverId NUMBER, number NUMBER, dob TEXT, driverRef TEXT); CREATE TABLE qualifying (driverId NUMBER);"
      },
      {
        "question": "Show the id and family name of the one with the longest laptime.",
        "query": "SELECT t1.driverid , t1.surname FROM drivers AS t1 JOIN laptimes AS t2 ON t1.driverid = t2.driverid ORDER BY t2.milliseconds DESC LIMIT 1",
        "schema": "CREATE TABLE circuits (name TEXT); CREATE TABLE lapTimes (milliseconds NUMBER, time TEXT, driverId NUMBER, raceId NUMBER, lap NUMBER); CREATE TABLE results (raceId NUMBER, number NUMBER, driverId NUMBER, resultId NUMBER, laps NUMBER); CREATE TABLE pitStops (lap NUMBER, driverId NUMBER, duration TEXT); CREATE TABLE drivers (driverRef TEXT, driverId NUMBER, dob TEXT, surname TEXT, code TEXT, forename TEXT, number NUMBER); CREATE TABLE qualifying (driverId NUMBER); CREATE TABLE driverStandings (driverId NUMBER); CREATE TABLE races (raceId NUMBER, name TEXT);"
      }
    ],
    [
      {
        "question": "What are all the drivers?",
        "query": "SELECT * FROM drivers",
        "schema": "CREATE TABLE drivers (driverId NUMBER, surname TEXT, forename TEXT, dob TEXT, code TEXT, driverRef TEXT, number NUMBER); CREATE TABLE results (number NUMBER, raceId NUMBER, driverId NUMBER, resultId NUMBER); CREATE TABLE races (raceId NUMBER); CREATE TABLE qualifying (driverId NUMBER); CREATE TABLE pitStops (driverId NUMBER); CREATE TABLE lapTimes (driverId NUMBER); CREATE TABLE driverStandings (driverId NUMBER);"
      },
      {
        "question": "Which ones of them had the first position in terms of laptime at least twice?",
        "query": "SELECT * FROM drivers AS t1 JOIN laptimes AS t2 ON t1.driverid = t2.driverid WHERE POSITION = '1' GROUP BY t1.driverid HAVING count(*) >= 2",
        "schema": "CREATE TABLE qualifying (driverId NUMBER, position NUMBER); CREATE TABLE races (raceId NUMBER); CREATE TABLE drivers (driverRef TEXT, number NUMBER, forename TEXT, dob TEXT, code TEXT, surname TEXT, driverId NUMBER); CREATE TABLE pitStops (duration TEXT, driverId NUMBER, lap NUMBER); CREATE TABLE results (statusId NUMBER, position NUMBER, fastestLap NUMBER, points NUMBER, raceId NUMBER, number NUMBER, milliseconds NUMBER, fastestLapTime TEXT, positionOrder NUMBER, grid NUMBER, driverId NUMBER, laps NUMBER, rank NUMBER, resultId NUMBER, time TEXT); CREATE TABLE driverStandings (position NUMBER, driverId NUMBER); CREATE TABLE lapTimes (milliseconds NUMBER, raceId NUMBER, position NUMBER, time TEXT, lap NUMBER, driverId NUMBER);"
      },
      {
        "question": "Only show their id, forename and surname",
        "query": "SELECT t1.driverid , t1.forename , t1.surname FROM drivers AS t1 JOIN laptimes AS t2 ON t1.driverid = t2.driverid WHERE POSITION = '1' GROUP BY t1.driverid HAVING count(*) >= 2",
        "schema": "CREATE TABLE drivers (surname TEXT, forename TEXT, number NUMBER, code TEXT, dob TEXT, driverRef TEXT, driverId NUMBER); CREATE TABLE qualifying (driverId NUMBER, position NUMBER); CREATE TABLE driverStandings (driverId NUMBER, position NUMBER); CREATE TABLE lapTimes (lap NUMBER, position NUMBER, milliseconds NUMBER, raceId NUMBER, time TEXT, driverId NUMBER); CREATE TABLE pitStops (lap NUMBER, duration TEXT, driverId NUMBER); CREATE TABLE races (raceId NUMBER); CREATE TABLE results (time TEXT, laps NUMBER, fastestLapSpeed TEXT, rank NUMBER, milliseconds NUMBER, driverId NUMBER, number NUMBER, positionOrder NUMBER, raceId NUMBER, fastestLapTime TEXT, points NUMBER, fastestLap NUMBER, position NUMBER, grid NUMBER, statusId NUMBER, resultId NUMBER);"
      }
    ],
    [
      {
        "question": "What are all the drivers?",
        "query": "SELECT * FROM drivers",
        "schema": "CREATE TABLE lapTimes (driverId NUMBER); CREATE TABLE drivers (dob TEXT, driverRef TEXT, driverId NUMBER, code TEXT, surname TEXT, forename TEXT, number NUMBER); CREATE TABLE driverStandings (driverId NUMBER); CREATE TABLE pitStops (driverId NUMBER); CREATE TABLE races (raceId NUMBER); CREATE TABLE results (raceId NUMBER, driverId NUMBER, number NUMBER); CREATE TABLE qualifying (driverId NUMBER);"
      },
      {
        "question": "Which ones of them participated in the race Australian Grand Prix held in 2009?",
        "query": "SELECT count(*) FROM results AS t1 JOIN races AS t2 ON t1.raceid = t2.raceid WHERE t2.name = \"Australian Grand Prix\" AND YEAR = 2009",
        "schema": "CREATE TABLE results (positionText TEXT, time TEXT, fastestLap NUMBER, driverId NUMBER, fastestLapSpeed TEXT, points NUMBER, number NUMBER, position NUMBER, resultId NUMBER, statusId NUMBER, rank NUMBER, grid NUMBER, milliseconds NUMBER, raceId NUMBER, fastestLapTime TEXT, laps NUMBER); CREATE TABLE pitStops (raceId NUMBER, driverId NUMBER); CREATE TABLE lapTimes (driverId NUMBER); CREATE TABLE races (name TEXT, circuitId NUMBER, year NUMBER, round NUMBER, date TEXT, time TEXT, raceId NUMBER); CREATE TABLE seasons (year NUMBER, url TEXT); CREATE TABLE qualifying (raceId NUMBER, driverId NUMBER); CREATE TABLE circuits (circuitId NUMBER, name TEXT, country TEXT, circuitRef TEXT); CREATE TABLE driverStandings (raceId NUMBER, driverId NUMBER); CREATE TABLE drivers (driverRef TEXT, nationality TEXT, number NUMBER, surname TEXT, driverId NUMBER, dob TEXT, code TEXT, forename TEXT);"
      }
    ],
    [
      {
        "question": "What are all the drivers?",
        "query": "SELECT * FROM drivers",
        "schema": "CREATE TABLE pitStops (driverId NUMBER); CREATE TABLE qualifying (driverId NUMBER); CREATE TABLE driverStandings (driverId NUMBER); CREATE TABLE lapTimes (driverId NUMBER); CREATE TABLE races (raceId NUMBER); CREATE TABLE results (resultId NUMBER, driverId NUMBER, raceId NUMBER, number NUMBER); CREATE TABLE drivers (number NUMBER, surname TEXT, driverRef TEXT, code TEXT, driverId NUMBER, dob TEXT, forename TEXT);"
      },
      {
        "question": "Which ones of them did not participate in the races held in 2009?",
        "query": "SELECT count(DISTINCT driverid) FROM results WHERE raceid NOT IN( SELECT raceid FROM races WHERE YEAR != 2009 )",
        "schema": "CREATE TABLE qualifying (driverId NUMBER); CREATE TABLE pitStops (driverId NUMBER, raceId NUMBER); CREATE TABLE seasons (url TEXT, year NUMBER); CREATE TABLE lapTimes (driverId NUMBER); CREATE TABLE drivers (dob TEXT, code TEXT, driverRef TEXT, number NUMBER, forename TEXT, driverId NUMBER, surname TEXT); CREATE TABLE driverStandings (driverId NUMBER, raceId NUMBER); CREATE TABLE results (raceId NUMBER, number NUMBER, statusId NUMBER, driverId NUMBER, rank NUMBER, resultId NUMBER, fastestLap NUMBER, fastestLapTime TEXT, time TEXT, laps NUMBER, fastestLapSpeed TEXT, points NUMBER, positionText TEXT, grid NUMBER, position NUMBER); CREATE TABLE circuits (circuitId NUMBER); CREATE TABLE races (raceId NUMBER, year NUMBER, date TEXT, circuitId NUMBER, name TEXT, time TEXT);"
      }
    ],
    [
      {
        "question": "What are all the drivers with forename Lewis?",
        "query": "SELECT * FROM drivers WHERE forename = \"Lewis\"",
        "schema": "CREATE TABLE drivers (driverId NUMBER, dob TEXT, driverRef TEXT, forename TEXT, code TEXT, number NUMBER, surname TEXT); CREATE TABLE pitStops (driverId NUMBER); CREATE TABLE races (raceId NUMBER); CREATE TABLE driverStandings (driverId NUMBER); CREATE TABLE results (driverId NUMBER);"
      },
      {
        "question": "Show the names and years of races that had any of them?",
        "query": "SELECT t2.name , t2.year FROM results AS t1 JOIN races AS t2 ON t1.raceid = t2.raceid JOIN drivers AS t3 ON t1.driverid = t3.driverid WHERE t3.forename = \"Lewis\"",
        "schema": "CREATE TABLE results (raceId NUMBER, number NUMBER, driverId NUMBER, milliseconds NUMBER, resultId NUMBER); CREATE TABLE pitStops (driverId NUMBER, raceId NUMBER); CREATE TABLE circuits (name TEXT, circuitId NUMBER); CREATE TABLE races (year NUMBER, name TEXT, date TEXT, circuitId NUMBER, raceId NUMBER); CREATE TABLE drivers (surname TEXT, forename TEXT, number NUMBER, code TEXT, dob TEXT, driverRef TEXT, driverId NUMBER); CREATE TABLE seasons (url TEXT, year NUMBER); CREATE TABLE driverStandings (driverId NUMBER, raceId NUMBER);"
      }
    ],
    [
      {
        "question": "What are all the drivers?",
        "query": "SELECT * FROM drivers",
        "schema": "CREATE TABLE driverStandings (driverId NUMBER); CREATE TABLE lapTimes (driverId NUMBER); CREATE TABLE drivers (number NUMBER, dob TEXT, driverRef TEXT, surname TEXT, code TEXT, forename TEXT, driverId NUMBER); CREATE TABLE pitStops (driverId NUMBER); CREATE TABLE qualifying (driverId NUMBER); CREATE TABLE races (raceId NUMBER); CREATE TABLE results (resultId NUMBER, number NUMBER, raceId NUMBER, driverId NUMBER);"
      },
      {
        "question": "Show the forename and surname of those whose nationality is German.",
        "query": "SELECT forename , surname FROM drivers WHERE nationality = \"German\"",
        "schema": "CREATE TABLE qualifying (driverId NUMBER); CREATE TABLE results (driverId NUMBER, raceId NUMBER, number NUMBER, resultId NUMBER); CREATE TABLE pitStops (driverId NUMBER); CREATE TABLE circuits (country TEXT); CREATE TABLE driverStandings (driverId NUMBER); CREATE TABLE drivers (dob TEXT, driverId NUMBER, driverRef TEXT, nationality TEXT, forename TEXT, number NUMBER, code TEXT, surname TEXT); CREATE TABLE lapTimes (driverId NUMBER); CREATE TABLE races (raceId NUMBER);"
      }
    ],
    [
      {
        "question": "What are the ids and forenames of drivers that participated in races with name Australian Grand Prix?",
        "query": "SELECT t2.driverid , t3.forename FROM races AS t1 JOIN results AS t2 ON t1.raceid = t2.raceid JOIN drivers AS t3 ON t2.driverid = t3.driverid WHERE t1.name = \"Australian Grand Prix\"",
        "schema": "CREATE TABLE results (raceId NUMBER, resultId NUMBER, statusId NUMBER, number NUMBER, driverId NUMBER, grid NUMBER, points NUMBER); CREATE TABLE circuits (country TEXT, circuitId NUMBER, circuitRef TEXT, name TEXT); CREATE TABLE lapTimes (driverId NUMBER); CREATE TABLE races (round NUMBER, raceId NUMBER, name TEXT, circuitId NUMBER); CREATE TABLE qualifying (raceId NUMBER, driverId NUMBER); CREATE TABLE driverStandings (driverStandingsId NUMBER, driverId NUMBER, raceId NUMBER); CREATE TABLE pitStops (driverId NUMBER, raceId NUMBER); CREATE TABLE drivers (forename TEXT, driverRef TEXT, surname TEXT, dob TEXT, driverId NUMBER, code TEXT, nationality TEXT);"
      },
      {
        "question": "Among them, show those who also participated the races with name Chinese Grand Prix.",
        "query": "SELECT t2.driverid , t3.forename FROM races AS t1 JOIN results AS t2 ON t1.raceid = t2.raceid JOIN drivers AS t3 ON t2.driverid = t3.driverid WHERE t1.name = \"Australian Grand Prix\" INTERSECT SELECT t2.driverid , t3.forename FROM races AS t1 JOIN results AS t2 ON t1.raceid = t2.raceid JOIN drivers AS t3 ON t2.driverid = t3.driverid WHERE t1.name = \"Chinese Grand Prix\"",
        "schema": "CREATE TABLE lapTimes (driverId NUMBER); CREATE TABLE races (raceId NUMBER, round NUMBER, circuitId NUMBER, name TEXT); CREATE TABLE circuits (name TEXT, country TEXT, circuitRef TEXT, circuitId NUMBER); CREATE TABLE pitStops (raceId NUMBER, driverId NUMBER); CREATE TABLE driverStandings (driverStandingsId NUMBER, raceId NUMBER, driverId NUMBER); CREATE TABLE qualifying (driverId NUMBER, raceId NUMBER); CREATE TABLE drivers (forename TEXT, driverId NUMBER, code TEXT, surname TEXT, driverRef TEXT, dob TEXT, nationality TEXT); CREATE TABLE results (raceId NUMBER, number NUMBER, statusId NUMBER, points NUMBER, driverId NUMBER, position NUMBER, grid NUMBER, resultId NUMBER, fastestLapSpeed TEXT);"
      }
    ],
    [
      {
        "question": "What are the forenames and surnames of drivers that participated in races with name Australian Grand Prix?",
        "query": "SELECT t3.forename , t3.surname FROM races AS t1 JOIN results AS t2 ON t1.raceid = t2.raceid JOIN drivers AS t3 ON t2.driverid = t3.driverid WHERE t1.name = \"Australian Grand Prix\"",
        "schema": "CREATE TABLE races (name TEXT, circuitId NUMBER, raceId NUMBER, round NUMBER); CREATE TABLE results (resultId NUMBER, driverId NUMBER, raceId NUMBER, number NUMBER); CREATE TABLE drivers (driverRef TEXT, surname TEXT, forename TEXT, code TEXT, nationality TEXT, driverId NUMBER, dob TEXT); CREATE TABLE circuits (name TEXT, circuitId NUMBER, country TEXT, circuitRef TEXT); CREATE TABLE pitStops (driverId NUMBER); CREATE TABLE driverStandings (raceId NUMBER, driverId NUMBER);"
      },
      {
        "question": "Among them, show those who did not participate in the races named Chinese Grand Prix.",
        "query": "SELECT t3.forename , t3.surname FROM races AS t1 JOIN results AS t2 ON t1.raceid = t2.raceid JOIN drivers AS t3 ON t2.driverid = t3.driverid WHERE t1.name = \"Australian Grand Prix\" EXCEPT SELECT t3.forename , t3.surname FROM races AS t1 JOIN results AS t2 ON t1.raceid = t2.raceid JOIN drivers AS t3 ON t2.driverid = t3.driverid WHERE t1.name = \"Chinese Grand Prix\"",
        "schema": "CREATE TABLE races (circuitId NUMBER, raceId NUMBER, round NUMBER, name TEXT); CREATE TABLE circuits (country TEXT, name TEXT, circuitId NUMBER, circuitRef TEXT); CREATE TABLE results (raceId NUMBER, driverId NUMBER, number NUMBER, resultId NUMBER, statusId NUMBER); CREATE TABLE pitStops (driverId NUMBER); CREATE TABLE driverStandings (driverId NUMBER, raceId NUMBER); CREATE TABLE drivers (driverId NUMBER, code TEXT, dob TEXT, forename TEXT, driverRef TEXT, surname TEXT, nationality TEXT);"
      }
    ],
    [
      {
        "question": "Who are all the drivers who was in position 1 as standing?",
        "query": "SELECT * FROM drivers AS t1 JOIN driverstandings AS t2 ON t1.driverid = t2.driverid WHERE t2.position = 1",
        "schema": "CREATE TABLE lapTimes (position NUMBER, driverId NUMBER); CREATE TABLE races (raceId NUMBER); CREATE TABLE driverStandings (driverStandingsId NUMBER, positionText TEXT, driverId NUMBER, position NUMBER); CREATE TABLE circuits (location TEXT); CREATE TABLE pitStops (driverId NUMBER); CREATE TABLE results (fastestLapSpeed TEXT, position NUMBER, positionOrder NUMBER, number NUMBER, resultId NUMBER, driverId NUMBER, positionText TEXT, raceId NUMBER, points NUMBER, milliseconds NUMBER, grid NUMBER, time TEXT, rank NUMBER, statusId NUMBER, fastestLapTime TEXT, fastestLap NUMBER); CREATE TABLE qualifying (position NUMBER, driverId NUMBER); CREATE TABLE drivers (code TEXT, surname TEXT, number NUMBER, forename TEXT, dob TEXT, driverId NUMBER, driverRef TEXT);"
      },
      {
        "question": "Among them, show the distinct forenames of those who also won?",
        "query": "SELECT DISTINCT t1.forename FROM drivers AS t1 JOIN driverstandings AS t2 ON t1.driverid = t2.driverid WHERE t2.position = 1 AND t2.wins = 1",
        "schema": "CREATE TABLE lapTimes (position NUMBER, driverId NUMBER); CREATE TABLE circuits (location TEXT); CREATE TABLE driverStandings (raceId NUMBER, driverStandingsId NUMBER, positionText TEXT, wins NUMBER, position NUMBER, driverId NUMBER); CREATE TABLE drivers (dob TEXT, driverId NUMBER, forename TEXT, code TEXT, surname TEXT, driverRef TEXT, number NUMBER); CREATE TABLE results (points NUMBER, rank NUMBER, grid NUMBER, milliseconds NUMBER, positionOrder NUMBER, number NUMBER, position NUMBER, driverId NUMBER, fastestLapTime TEXT, positionText TEXT, raceId NUMBER, time TEXT, fastestLapSpeed TEXT, fastestLap NUMBER, laps NUMBER, statusId NUMBER, resultId NUMBER); CREATE TABLE qualifying (driverId NUMBER, position NUMBER); CREATE TABLE pitStops (driverId NUMBER); CREATE TABLE races (raceId NUMBER, name TEXT);"
      }
    ],
    [
      {
        "question": "Who are all the drivers who was in position 1 as standing?",
        "query": "SELECT * FROM drivers AS t1 JOIN driverstandings AS t2 ON t1.driverid = t2.driverid WHERE t2.position = 1",
        "schema": "CREATE TABLE results (positionOrder NUMBER, rank NUMBER, position NUMBER, points NUMBER, positionText TEXT, resultId NUMBER, raceId NUMBER, grid NUMBER, fastestLapSpeed TEXT, driverId NUMBER, statusId NUMBER, number NUMBER); CREATE TABLE races (raceId NUMBER); CREATE TABLE circuits (location TEXT); CREATE TABLE pitStops (driverId NUMBER); CREATE TABLE drivers (number NUMBER, dob TEXT, driverId NUMBER, code TEXT, surname TEXT, forename TEXT, driverRef TEXT); CREATE TABLE driverStandings (position NUMBER, driverStandingsId NUMBER, positionText TEXT, driverId NUMBER); CREATE TABLE qualifying (position NUMBER, driverId NUMBER); CREATE TABLE lapTimes (driverId NUMBER, position NUMBER);"
      },
      {
        "question": "Among them, show those who also won?",
        "query": "SELECT * FROM drivers AS t1 JOIN driverstandings AS t2 ON t1.driverid = t2.driverid WHERE t2.position = 1 AND t2.wins = 1",
        "schema": "CREATE TABLE lapTimes (position NUMBER, driverId NUMBER); CREATE TABLE results (position NUMBER, driverId NUMBER, fastestLapSpeed TEXT, statusId NUMBER, resultId NUMBER, positionText TEXT, number NUMBER, points NUMBER, grid NUMBER, raceId NUMBER, positionOrder NUMBER, rank NUMBER); CREATE TABLE races (raceId NUMBER); CREATE TABLE qualifying (position NUMBER, driverId NUMBER); CREATE TABLE circuits (location TEXT); CREATE TABLE pitStops (driverId NUMBER, raceId NUMBER); CREATE TABLE driverStandings (driverId NUMBER, points NUMBER, position NUMBER, positionText TEXT, wins NUMBER, driverStandingsId NUMBER, raceId NUMBER); CREATE TABLE drivers (driverRef TEXT, code TEXT, surname TEXT, number NUMBER, dob TEXT, forename TEXT, driverId NUMBER);"
      },
      {
        "question": "Furthermore, show the distinct forenames of those who had more than 20 points.",
        "query": "SELECT DISTINCT t1.forename FROM drivers AS t1 JOIN driverstandings AS t2 ON t1.driverid = t2.driverid WHERE t2.position = 1 AND t2.wins = 1 AND t2.points > 20",
        "schema": "CREATE TABLE results (milliseconds NUMBER, positionText TEXT, raceId NUMBER, rank NUMBER, resultId NUMBER, laps NUMBER, grid NUMBER, position NUMBER, positionOrder NUMBER, fastestLapTime TEXT, fastestLapSpeed TEXT, statusId NUMBER, time TEXT, number NUMBER, driverId NUMBER, points NUMBER); CREATE TABLE pitStops (raceId NUMBER, driverId NUMBER); CREATE TABLE races (raceId NUMBER); CREATE TABLE circuits (location TEXT); CREATE TABLE driverStandings (positionText TEXT, position NUMBER, wins NUMBER, driverId NUMBER, driverStandingsId NUMBER, points NUMBER, raceId NUMBER); CREATE TABLE lapTimes (driverId NUMBER, position NUMBER); CREATE TABLE qualifying (position NUMBER, driverId NUMBER); CREATE TABLE drivers (forename TEXT, code TEXT, number NUMBER, surname TEXT, dob TEXT, driverRef TEXT, driverId NUMBER);"
      }
    ],
    [
      {
        "question": "Who are all the constructors?",
        "query": "SELECT * FROM constructors",
        "schema": "CREATE TABLE constructorResults (constructorResultsId NUMBER, constructorId NUMBER, raceId NUMBER); CREATE TABLE results (constructorId NUMBER); CREATE TABLE races (raceId NUMBER); CREATE TABLE constructors (constructorId NUMBER, name TEXT, constructorRef TEXT); CREATE TABLE drivers (driverId NUMBER); CREATE TABLE qualifying (constructorId NUMBER); CREATE TABLE constructorStandings (raceId NUMBER, constructorStandingsId NUMBER, constructorId NUMBER);"
      },
      {
        "question": "Show the number of them in terms of each nationality.",
        "query": "SELECT count(*) , nationality FROM constructors GROUP BY nationality",
        "schema": "CREATE TABLE results (constructorId NUMBER, number NUMBER); CREATE TABLE circuits (country TEXT); CREATE TABLE races (raceId NUMBER); CREATE TABLE drivers (nationality TEXT, number NUMBER, driverId NUMBER); CREATE TABLE constructorResults (constructorId NUMBER, constructorResultsId NUMBER, raceId NUMBER); CREATE TABLE constructorStandings (raceId NUMBER, constructorId NUMBER, constructorStandingsId NUMBER); CREATE TABLE constructors (constructorId NUMBER, name TEXT, nationality TEXT, constructorRef TEXT); CREATE TABLE qualifying (constructorId NUMBER);"
      }
    ],
    [
      {
        "question": "What are all the constructors?",
        "query": "SELECT * FROM constructors",
        "schema": "CREATE TABLE driverStandings (driverId NUMBER); CREATE TABLE results (constructorId NUMBER); CREATE TABLE constructorResults (constructorResultsId NUMBER, constructorId NUMBER, raceId NUMBER); CREATE TABLE constructorStandings (constructorStandingsId NUMBER, constructorId NUMBER, raceId NUMBER); CREATE TABLE constructors (constructorId NUMBER, name TEXT, constructorRef TEXT); CREATE TABLE drivers (driverId NUMBER); CREATE TABLE qualifying (constructorId NUMBER); CREATE TABLE races (raceId NUMBER);"
      },
      {
        "question": "How many races did each of them have?",
        "query": "SELECT count(*) , constructorid FROM constructorstandings GROUP BY constructorid",
        "schema": "CREATE TABLE qualifying (constructorId NUMBER, raceId NUMBER); CREATE TABLE constructorStandings (constructorId NUMBER, raceId NUMBER, constructorStandingsId NUMBER); CREATE TABLE drivers (driverId NUMBER); CREATE TABLE circuits (circuitId NUMBER); CREATE TABLE results (raceId NUMBER, driverId NUMBER, number NUMBER, resultId NUMBER, constructorId NUMBER); CREATE TABLE pitStops (driverId NUMBER, raceId NUMBER); CREATE TABLE constructorResults (constructorResultsId NUMBER, constructorId NUMBER, raceId NUMBER); CREATE TABLE constructors (name TEXT, constructorRef TEXT, constructorId NUMBER); CREATE TABLE driverStandings (raceId NUMBER, driverId NUMBER); CREATE TABLE races (name TEXT, raceId NUMBER, circuitId NUMBER); CREATE TABLE lapTimes (raceId NUMBER);"
      }
    ],
    [
      {
        "question": "What are all the races?",
        "query": "SELECT * FROM races",
        "schema": "CREATE TABLE circuits (circuitId NUMBER); CREATE TABLE driverStandings (raceId NUMBER); CREATE TABLE qualifying (raceId NUMBER); CREATE TABLE constructorStandings (raceId NUMBER); CREATE TABLE results (driverId NUMBER, resultId NUMBER, raceId NUMBER); CREATE TABLE races (raceId NUMBER, url TEXT, round NUMBER, name TEXT, circuitId NUMBER); CREATE TABLE drivers (driverId NUMBER); CREATE TABLE lapTimes (raceId NUMBER); CREATE TABLE pitStops (driverId NUMBER, raceId NUMBER); CREATE TABLE constructorResults (raceId NUMBER);"
      },
      {
        "question": "What are the names of those that were held after 2017?",
        "query": "SELECT t1.name FROM races AS t1 JOIN circuits AS t2 ON t1.circuitid = t2.circuitid WHERE t1.year > 2017",
        "schema": "CREATE TABLE drivers (driverId NUMBER); CREATE TABLE seasons (year NUMBER, url TEXT); CREATE TABLE pitStops (raceId NUMBER, driverId NUMBER); CREATE TABLE races (circuitId NUMBER, raceId NUMBER, name TEXT, time TEXT, url TEXT, year NUMBER, round NUMBER, date TEXT); CREATE TABLE circuits (name TEXT, circuitRef TEXT, circuitId NUMBER); CREATE TABLE qualifying (raceId NUMBER); CREATE TABLE lapTimes (raceId NUMBER); CREATE TABLE results (raceId NUMBER, resultId NUMBER, driverId NUMBER); CREATE TABLE constructorStandings (raceId NUMBER); CREATE TABLE constructorResults (raceId NUMBER); CREATE TABLE driverStandings (raceId NUMBER);"
      },
      {
        "question": "Among them, show those with their circuits in Spain.",
        "query": "SELECT t1.name FROM races AS t1 JOIN circuits AS t2 ON t1.circuitid = t2.circuitid WHERE t2.country = \"Spain\" AND t1.year > 2017",
        "schema": "CREATE TABLE circuits (location TEXT, lat NUMBER, circuitId NUMBER, circuitRef TEXT, country TEXT, name TEXT); CREATE TABLE results (driverId NUMBER, raceId NUMBER, resultId NUMBER); CREATE TABLE pitStops (driverId NUMBER, raceId NUMBER); CREATE TABLE driverStandings (raceId NUMBER); CREATE TABLE constructorResults (raceId NUMBER); CREATE TABLE constructorStandings (raceId NUMBER); CREATE TABLE drivers (driverId NUMBER); CREATE TABLE races (round NUMBER, year NUMBER, name TEXT, time TEXT, raceId NUMBER, circuitId NUMBER, date TEXT, url TEXT); CREATE TABLE lapTimes (raceId NUMBER); CREATE TABLE qualifying (raceId NUMBER); CREATE TABLE seasons (url TEXT, year NUMBER);"
      }
    ],
    [
      {
        "question": "What are all the races?",
        "query": "SELECT * FROM races",
        "schema": "CREATE TABLE lapTimes (raceId NUMBER); CREATE TABLE constructorResults (raceId NUMBER); CREATE TABLE results (resultId NUMBER, raceId NUMBER, driverId NUMBER); CREATE TABLE drivers (driverId NUMBER); CREATE TABLE driverStandings (raceId NUMBER); CREATE TABLE pitStops (raceId NUMBER); CREATE TABLE races (raceId NUMBER, url TEXT, circuitId NUMBER, round NUMBER, name TEXT); CREATE TABLE qualifying (raceId NUMBER); CREATE TABLE circuits (circuitId NUMBER); CREATE TABLE constructorStandings (raceId NUMBER);"
      },
      {
        "question": "What are the names of those that were held after 2000?",
        "query": "SELECT t1.name FROM races AS t1 JOIN circuits AS t2 ON t1.circuitid = t2.circuitid WHERE t1.year > 2000",
        "schema": "CREATE TABLE lapTimes (raceId NUMBER); CREATE TABLE races (name TEXT, year NUMBER, url TEXT, time TEXT, round NUMBER, raceId NUMBER, date TEXT, circuitId NUMBER); CREATE TABLE circuits (circuitRef TEXT, name TEXT, circuitId NUMBER); CREATE TABLE qualifying (raceId NUMBER); CREATE TABLE pitStops (raceId NUMBER); CREATE TABLE results (resultId NUMBER, raceId NUMBER, driverId NUMBER); CREATE TABLE drivers (driverId NUMBER); CREATE TABLE constructorStandings (raceId NUMBER); CREATE TABLE constructorResults (raceId NUMBER); CREATE TABLE driverStandings (raceId NUMBER); CREATE TABLE seasons (url TEXT, year NUMBER);"
      },
      {
        "question": "Among them, show the distinct name of those with their circuits in Spain.",
        "query": "SELECT DISTINCT t1.name FROM races AS t1 JOIN circuits AS t2 ON t1.circuitid = t2.circuitid WHERE t2.country = \"Spain\" AND t1.year > 2000",
        "schema": "CREATE TABLE results (raceId NUMBER, resultId NUMBER, driverId NUMBER); CREATE TABLE races (time TEXT, circuitId NUMBER, round NUMBER, name TEXT, raceId NUMBER, date TEXT, year NUMBER, url TEXT); CREATE TABLE constructorStandings (raceId NUMBER); CREATE TABLE seasons (year NUMBER, url TEXT); CREATE TABLE constructorResults (raceId NUMBER); CREATE TABLE driverStandings (raceId NUMBER); CREATE TABLE lapTimes (raceId NUMBER); CREATE TABLE pitStops (raceId NUMBER); CREATE TABLE drivers (driverId NUMBER); CREATE TABLE circuits (circuitRef TEXT, name TEXT, circuitId NUMBER, location TEXT, country TEXT); CREATE TABLE qualifying (raceId NUMBER);"
      }
    ],
    [
      {
        "question": "What is the maximum pit stop duration in the race with id 841?",
        "query": "SELECT max(duration) FROM pitstops WHERE raceid = 841",
        "schema": "CREATE TABLE pitStops (duration TEXT, time TEXT, driverId NUMBER, milliseconds NUMBER, raceId NUMBER, lap NUMBER, stop NUMBER); CREATE TABLE driverStandings (driverStandingsId NUMBER, driverId NUMBER, raceId NUMBER); CREATE TABLE lapTimes (raceId NUMBER, milliseconds NUMBER, driverId NUMBER); CREATE TABLE qualifying (driverId NUMBER, raceId NUMBER); CREATE TABLE drivers (driverId NUMBER); CREATE TABLE circuits (circuitId NUMBER); CREATE TABLE races (circuitId NUMBER, raceId NUMBER, round NUMBER, name TEXT); CREATE TABLE results (driverId NUMBER, fastestLap NUMBER, fastestLapTime TEXT, resultId NUMBER, milliseconds NUMBER, raceId NUMBER);"
      },
      {
        "question": "Find distinct driver ids and stop numbers of all drivers that have a shorter pit stop duration that that one.",
        "query": "SELECT DISTINCT driverid , STOP FROM pitstops WHERE duration < (SELECT max(duration) FROM pitstops WHERE raceid = 841)",
        "schema": "CREATE TABLE circuits (circuitId NUMBER); CREATE TABLE results (laps NUMBER, milliseconds NUMBER, fastestLapTime TEXT, grid NUMBER, resultId NUMBER, driverId NUMBER, raceId NUMBER, number NUMBER, fastestLap NUMBER); CREATE TABLE pitStops (raceId NUMBER, time TEXT, milliseconds NUMBER, driverId NUMBER, duration TEXT, lap NUMBER, stop NUMBER); CREATE TABLE qualifying (driverId NUMBER, raceId NUMBER); CREATE TABLE races (round NUMBER, name TEXT, raceId NUMBER, circuitId NUMBER); CREATE TABLE lapTimes (driverId NUMBER, raceId NUMBER, milliseconds NUMBER); CREATE TABLE driverStandings (raceId NUMBER, driverStandingsId NUMBER, driverId NUMBER); CREATE TABLE drivers (driverId NUMBER, driverRef TEXT, dob TEXT, number NUMBER, code TEXT);"
      }
    ],
    [
      {
        "question": "What is the minimum pit stop duration in the race with id 841?",
        "query": "SELECT min(duration) FROM pitstops WHERE raceid = 841",
        "schema": "CREATE TABLE races (round NUMBER, name TEXT, raceId NUMBER, circuitId NUMBER); CREATE TABLE circuits (alt NUMBER, circuitId NUMBER); CREATE TABLE driverStandings (raceId NUMBER, driverId NUMBER, driverStandingsId NUMBER); CREATE TABLE qualifying (driverId NUMBER, raceId NUMBER); CREATE TABLE constructorResults (raceId NUMBER); CREATE TABLE constructorStandings (raceId NUMBER); CREATE TABLE results (milliseconds NUMBER, raceId NUMBER, driverId NUMBER, resultId NUMBER); CREATE TABLE lapTimes (raceId NUMBER, milliseconds NUMBER, driverId NUMBER); CREATE TABLE drivers (driverId NUMBER); CREATE TABLE pitStops (stop NUMBER, milliseconds NUMBER, time TEXT, raceId NUMBER, duration TEXT, lap NUMBER, driverId NUMBER);"
      },
      {
        "question": "Find distinct driver ids and stop numbers of all drivers that have a longer pit stop duration that that one.",
        "query": "SELECT DISTINCT driverid , STOP FROM pitstops WHERE duration > (SELECT min(duration) FROM pitstops WHERE raceid = 841)",
        "schema": "CREATE TABLE pitStops (stop NUMBER, time TEXT, milliseconds NUMBER, driverId NUMBER, duration TEXT, raceId NUMBER, lap NUMBER); CREATE TABLE driverStandings (driverId NUMBER, driverStandingsId NUMBER, raceId NUMBER); CREATE TABLE circuits (circuitId NUMBER, alt NUMBER); CREATE TABLE results (driverId NUMBER, raceId NUMBER, resultId NUMBER, laps NUMBER, number NUMBER, grid NUMBER, milliseconds NUMBER); CREATE TABLE lapTimes (milliseconds NUMBER, driverId NUMBER, raceId NUMBER); CREATE TABLE qualifying (driverId NUMBER, raceId NUMBER); CREATE TABLE constructorResults (raceId NUMBER); CREATE TABLE drivers (driverRef TEXT, driverId NUMBER, number NUMBER, dob TEXT, code TEXT); CREATE TABLE constructorStandings (raceId NUMBER); CREATE TABLE races (circuitId NUMBER, name TEXT, raceId NUMBER, round NUMBER);"
      }
    ],
    [
      {
        "question": "What are the forenames of all the drivers?",
        "query": "SELECT forename FROM drivers",
        "schema": "CREATE TABLE circuits (name TEXT); CREATE TABLE drivers (driverId NUMBER, driverRef TEXT, surname TEXT, code TEXT, dob TEXT, forename TEXT); CREATE TABLE races (raceId NUMBER); CREATE TABLE driverStandings (driverId NUMBER);"
      },
      {
        "question": "Show the distinct of them in alphabetical order.",
        "query": "SELECT DISTINCT forename FROM drivers ORDER BY forename ASC",
        "schema": "CREATE TABLE results (driverId NUMBER); CREATE TABLE drivers (surname TEXT, driverId NUMBER, code TEXT, dob TEXT, driverRef TEXT, forename TEXT); CREATE TABLE races (raceId NUMBER); CREATE TABLE circuits (name TEXT); CREATE TABLE driverStandings (driverId NUMBER);"
      }
    ],
    [
      {
        "question": "What are the names of all the races?",
        "query": "SELECT name FROM races",
        "schema": "CREATE TABLE circuits (circuitId NUMBER, name TEXT); CREATE TABLE races (name TEXT, raceId NUMBER, circuitId NUMBER); CREATE TABLE pitStops (raceId NUMBER); CREATE TABLE qualifying (raceId NUMBER); CREATE TABLE lapTimes (raceId NUMBER); CREATE TABLE drivers (driverId NUMBER); CREATE TABLE driverStandings (raceId NUMBER); CREATE TABLE results (raceId NUMBER);"
      },
      {
        "question": "Show their distinct names in reversed lexicographic order.",
        "query": "SELECT DISTINCT name FROM races ORDER BY name DESC",
        "schema": "CREATE TABLE drivers (driverId NUMBER, surname TEXT); CREATE TABLE driverStandings (raceId NUMBER); CREATE TABLE results (raceId NUMBER); CREATE TABLE races (name TEXT, raceId NUMBER, circuitId NUMBER); CREATE TABLE lapTimes (raceId NUMBER); CREATE TABLE pitStops (raceId NUMBER); CREATE TABLE circuits (name TEXT, circuitId NUMBER); CREATE TABLE qualifying (raceId NUMBER);"
      }
    ],
    [
      {
        "question": "What are all the races?",
        "query": "SELECT * FROM races",
        "schema": "CREATE TABLE constructorResults (raceId NUMBER); CREATE TABLE circuits (circuitId NUMBER); CREATE TABLE lapTimes (raceId NUMBER); CREATE TABLE constructorStandings (raceId NUMBER); CREATE TABLE drivers (driverId NUMBER); CREATE TABLE qualifying (raceId NUMBER, driverId NUMBER); CREATE TABLE races (time TEXT, url TEXT, raceId NUMBER, name TEXT, circuitId NUMBER, round NUMBER); CREATE TABLE pitStops (raceId NUMBER); CREATE TABLE results (raceId NUMBER, resultId NUMBER, driverId NUMBER); CREATE TABLE driverStandings (raceId NUMBER);"
      },
      {
        "question": "Which of them are held between 2009 and 2011?",
        "query": "SELECT name FROM races WHERE YEAR BETWEEN 2009 AND 2011",
        "schema": "CREATE TABLE constructorResults (raceId NUMBER); CREATE TABLE lapTimes (raceId NUMBER); CREATE TABLE seasons (year NUMBER, url TEXT); CREATE TABLE races (circuitId NUMBER, year NUMBER, time TEXT, round NUMBER, raceId NUMBER, date TEXT, url TEXT, name TEXT); CREATE TABLE pitStops (raceId NUMBER); CREATE TABLE driverStandings (raceId NUMBER); CREATE TABLE qualifying (raceId NUMBER, driverId NUMBER); CREATE TABLE drivers (driverId NUMBER); CREATE TABLE circuits (circuitRef TEXT, name TEXT, circuitId NUMBER); CREATE TABLE results (driverId NUMBER, resultId NUMBER, raceId NUMBER); CREATE TABLE constructorStandings (raceId NUMBER);"
      }
    ],
    [
      {
        "question": "What are the names of all the races?",
        "query": "SELECT name FROM races",
        "schema": "CREATE TABLE races (name TEXT, circuitId NUMBER, raceId NUMBER); CREATE TABLE pitStops (raceId NUMBER); CREATE TABLE qualifying (raceId NUMBER); CREATE TABLE drivers (driverId NUMBER); CREATE TABLE lapTimes (raceId NUMBER); CREATE TABLE driverStandings (raceId NUMBER); CREATE TABLE results (raceId NUMBER); CREATE TABLE circuits (name TEXT, circuitId NUMBER);"
      },
      {
        "question": "Which of them are held after 12:00:00 or before 09:00:00?",
        "query": "SELECT name FROM races WHERE TIME > \"12:00:00\" OR TIME < \"09:00:00\"",
        "schema": "CREATE TABLE qualifying (raceId NUMBER); CREATE TABLE lapTimes (time TEXT, raceId NUMBER); CREATE TABLE circuits (circuitId NUMBER, circuitRef TEXT, name TEXT); CREATE TABLE pitStops (raceId NUMBER); CREATE TABLE races (year NUMBER, date TEXT, time TEXT, raceId NUMBER, name TEXT, circuitId NUMBER, round NUMBER); CREATE TABLE results (time TEXT, milliseconds NUMBER, raceId NUMBER); CREATE TABLE driverStandings (raceId NUMBER); CREATE TABLE drivers (driverId NUMBER);"
      }
    ],
    [
      {
        "question": "What are the first, last names and ids of all the drivers?",
        "query": "SELECT forename, surname, driverid FROM drivers",
        "schema": "CREATE TABLE results (driverId NUMBER); CREATE TABLE races (raceId NUMBER); CREATE TABLE drivers (driverRef TEXT, code TEXT, dob TEXT, driverId NUMBER, forename TEXT, number NUMBER, surname TEXT); CREATE TABLE driverStandings (driverId NUMBER);"
      },
      {
        "question": "Show those who had more than 8 pit stops.",
        "query": "SELECT t1.forename , t1.surname , t1.driverid FROM drivers AS t1 JOIN pitstops AS t2 ON t1.driverid = t2.driverid GROUP BY t1.driverid HAVING count(*) > 8",
        "schema": "CREATE TABLE lapTimes (driverId NUMBER); CREATE TABLE races (raceId NUMBER); CREATE TABLE results (raceId NUMBER, resultId NUMBER, number NUMBER, driverId NUMBER); CREATE TABLE qualifying (driverId NUMBER); CREATE TABLE driverStandings (driverId NUMBER); CREATE TABLE pitStops (duration TEXT, stop NUMBER, driverId NUMBER, raceId NUMBER); CREATE TABLE drivers (driverId NUMBER, surname TEXT, number NUMBER, dob TEXT, forename TEXT, driverRef TEXT, code TEXT);"
      },
      {
        "question": "Include drivers who participated in more than 5 races",
        "query": "SELECT t1.forename , t1.surname , t1.driverid FROM drivers AS t1 JOIN pitstops AS t2 ON t1.driverid = t2.driverid GROUP BY t1.driverid HAVING count(*) > 8 UNION SELECT t1.forename , t1.surname , t1.driverid FROM drivers AS t1 JOIN results AS t2 ON t1.driverid = t2.driverid GROUP BY t1.driverid HAVING count(*) > 5",
        "schema": "CREATE TABLE lapTimes (driverId NUMBER); CREATE TABLE qualifying (driverId NUMBER); CREATE TABLE races (name TEXT, raceId NUMBER); CREATE TABLE drivers (dob TEXT, driverRef TEXT, number NUMBER, driverId NUMBER, forename TEXT, surname TEXT, code TEXT); CREATE TABLE pitStops (driverId NUMBER, raceId NUMBER, stop NUMBER, duration TEXT); CREATE TABLE driverStandings (driverId NUMBER); CREATE TABLE results (number NUMBER, raceId NUMBER, statusId NUMBER, milliseconds NUMBER, driverId NUMBER, resultId NUMBER, points NUMBER);"
      }
    ],
    [
      {
        "question": "What are the last names and ids of all the drivers?",
        "query": "SELECT surname, driverid FROM drivers",
        "schema": "CREATE TABLE pitStops (driverId NUMBER); CREATE TABLE lapTimes (driverId NUMBER); CREATE TABLE driverStandings (driverId NUMBER); CREATE TABLE races (raceId NUMBER); CREATE TABLE results (driverId NUMBER); CREATE TABLE drivers (driverRef TEXT, driverId NUMBER, dob TEXT, code TEXT, forename TEXT, surname TEXT);"
      },
      {
        "question": "Show those who had 11 pit stops.",
        "query": "SELECT t1.surname , t1.driverid FROM drivers AS t1 JOIN pitstops AS t2 ON t1.driverid = t2.driverid GROUP BY t1.driverid HAVING count(*) = 11",
        "schema": "CREATE TABLE pitStops (raceId NUMBER, driverId NUMBER, stop NUMBER, milliseconds NUMBER, duration TEXT); CREATE TABLE races (raceId NUMBER); CREATE TABLE lapTimes (driverId NUMBER); CREATE TABLE driverStandings (driverId NUMBER); CREATE TABLE qualifying (driverId NUMBER); CREATE TABLE results (raceId NUMBER, number NUMBER, grid NUMBER, driverId NUMBER, resultId NUMBER, laps NUMBER, milliseconds NUMBER); CREATE TABLE drivers (code TEXT, forename TEXT, number NUMBER, dob TEXT, driverRef TEXT, surname TEXT, driverId NUMBER);"
      },
      {
        "question": "Among those, who also participated in more than 5 race results?",
        "query": "SELECT t1.surname , t1.driverid FROM drivers AS t1 JOIN pitstops AS t2 ON t1.driverid = t2.driverid GROUP BY t1.driverid HAVING count(*) = 11 INTERSECT SELECT t1.surname , t1.driverid FROM drivers AS t1 JOIN results AS t2 ON t1.driverid = t2.driverid GROUP BY t1.driverid HAVING count(*) > 5",
        "schema": "CREATE TABLE lapTimes (driverId NUMBER); CREATE TABLE results (laps NUMBER, points NUMBER, resultId NUMBER, grid NUMBER, milliseconds NUMBER, driverId NUMBER, raceId NUMBER, number NUMBER, statusId NUMBER); CREATE TABLE races (raceId NUMBER); CREATE TABLE driverStandings (raceId NUMBER, driverId NUMBER); CREATE TABLE pitStops (raceId NUMBER, stop NUMBER, milliseconds NUMBER, driverId NUMBER, duration TEXT); CREATE TABLE drivers (surname TEXT, forename TEXT, driverId NUMBER, driverRef TEXT, code TEXT, number NUMBER, dob TEXT); CREATE TABLE qualifying (driverId NUMBER);"
      }
    ],
    [
      {
        "question": "What are the ids and last names of all the drivers?",
        "query": "SELECT driverid, surname FROM drivers",
        "schema": "CREATE TABLE drivers (surname TEXT, driverRef TEXT, driverId NUMBER, dob TEXT, forename TEXT, code TEXT); CREATE TABLE pitStops (driverId NUMBER); CREATE TABLE lapTimes (driverId NUMBER); CREATE TABLE driverStandings (driverId NUMBER); CREATE TABLE qualifying (driverId NUMBER); CREATE TABLE results (driverId NUMBER); CREATE TABLE races (raceId NUMBER);"
      },
      {
        "question": "Who participated in the most races after 2010?",
        "query": "SELECT t1.driverid , t1.surname FROM drivers AS t1 JOIN results AS t2 ON t1.driverid = t2.driverid JOIN races AS t3 ON t2.raceid = t3.raceid WHERE t3.year > 2010 GROUP BY t1.driverid ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE results (time TEXT, grid NUMBER, driverId NUMBER, points NUMBER, fastestLap NUMBER, number NUMBER, statusId NUMBER, milliseconds NUMBER, resultId NUMBER, raceId NUMBER); CREATE TABLE lapTimes (driverId NUMBER); CREATE TABLE driverStandings (raceId NUMBER, driverId NUMBER); CREATE TABLE races (year NUMBER, date TEXT, time TEXT, name TEXT, raceId NUMBER); CREATE TABLE drivers (forename TEXT, driverId NUMBER, code TEXT, surname TEXT, driverRef TEXT, dob TEXT); CREATE TABLE qualifying (driverId NUMBER); CREATE TABLE pitStops (driverId NUMBER, raceId NUMBER); CREATE TABLE seasons (year NUMBER, url TEXT);"
      }
    ],
    [
      {
        "question": "What are the names of all the circuits?",
        "query": "SELECT name FROM circuits",
        "schema": "CREATE TABLE races (round NUMBER, name TEXT, circuitId NUMBER, raceId NUMBER); CREATE TABLE circuits (circuitRef TEXT, circuitId NUMBER, name TEXT); CREATE TABLE drivers (driverId NUMBER); CREATE TABLE constructors (name TEXT);"
      },
      {
        "question": "Which of them belong to UK or Malaysia?",
        "query": "SELECT name FROM circuits WHERE country = \"UK\" OR country = \"Malaysia\"",
        "schema": "CREATE TABLE races (round NUMBER, circuitId NUMBER, raceId NUMBER, name TEXT); CREATE TABLE circuits (name TEXT, country TEXT, location TEXT, circuitId NUMBER, circuitRef TEXT); CREATE TABLE drivers (driverId NUMBER, nationality TEXT); CREATE TABLE constructors (name TEXT, nationality TEXT);"
      }
    ],
    [
      {
        "question": "What are the ids and locations of all the circuits?",
        "query": "SELECT circuitid , LOCATION FROM circuits",
        "schema": "CREATE TABLE drivers (driverId NUMBER); CREATE TABLE circuits (lat NUMBER, circuitId NUMBER, location TEXT, circuitRef TEXT, name TEXT); CREATE TABLE races (raceId NUMBER, circuitId NUMBER);"
      },
      {
        "question": "Which of them belong to France or Belgium?",
        "query": "SELECT circuitid , LOCATION FROM circuits WHERE country = \"France\" OR country = \"Belgium\"",
        "schema": "CREATE TABLE races (raceId NUMBER, circuitId NUMBER); CREATE TABLE drivers (driverId NUMBER, nationality TEXT); CREATE TABLE circuits (lat NUMBER, location TEXT, circuitId NUMBER, circuitRef TEXT, country TEXT, name TEXT);"
      }
    ],
    [
      {
        "question": "What are the names of all the constructors?",
        "query": "SELECT * FROM constructors",
        "schema": "CREATE TABLE circuits (name TEXT); CREATE TABLE results (constructorId NUMBER); CREATE TABLE races (raceId NUMBER, name TEXT); CREATE TABLE constructorStandings (constructorStandingsId NUMBER, constructorId NUMBER); CREATE TABLE constructorResults (constructorResultsId NUMBER, raceId NUMBER, constructorId NUMBER); CREATE TABLE constructors (constructorRef TEXT, name TEXT, constructorId NUMBER); CREATE TABLE qualifying (constructorId NUMBER); CREATE TABLE drivers (surname TEXT, forename TEXT);"
      },
      {
        "question": "Show the names of those who are Japanese.",
        "query": "SELECT name FROM constructors WHERE nationality = \"Japanese\"",
        "schema": "CREATE TABLE races (raceId NUMBER, name TEXT); CREATE TABLE constructorStandings (constructorStandingsId NUMBER, constructorId NUMBER); CREATE TABLE circuits (circuitId NUMBER, name TEXT, circuitRef TEXT, country TEXT); CREATE TABLE qualifying (constructorId NUMBER); CREATE TABLE results (constructorId NUMBER); CREATE TABLE constructorResults (constructorId NUMBER, constructorResultsId NUMBER, raceId NUMBER); CREATE TABLE drivers (nationality TEXT, surname TEXT, forename TEXT); CREATE TABLE constructors (constructorRef TEXT, nationality TEXT, name TEXT, constructorId NUMBER);"
      },
      {
        "question": "Among those, who have once earned more than 5 points?",
        "query": "SELECT t1.name FROM constructors AS t1 JOIN constructorstandings AS t2 ON t1.constructorid = t2.constructorid WHERE t1.nationality = \"Japanese\" AND t2.points > 5",
        "schema": "CREATE TABLE races (name TEXT, year NUMBER, raceId NUMBER); CREATE TABLE qualifying (constructorId NUMBER); CREATE TABLE constructorStandings (constructorId NUMBER, points NUMBER, constructorStandingsId NUMBER); CREATE TABLE driverStandings (points NUMBER); CREATE TABLE results (constructorId NUMBER, points NUMBER, number NUMBER); CREATE TABLE constructorResults (constructorResultsId NUMBER, points NUMBER, raceId NUMBER, constructorId NUMBER); CREATE TABLE circuits (circuitRef TEXT, country TEXT, circuitId NUMBER, name TEXT); CREATE TABLE drivers (nationality TEXT, surname TEXT, forename TEXT); CREATE TABLE constructors (name TEXT, constructorRef TEXT, constructorId NUMBER, nationality TEXT);"
      }
    ],
    [
      {
        "question": "What is the race named 'Monaco Grand Prix' in 2008.",
        "query": "SELECT * FROM races WHERE YEAR = 2008 AND name = \"Monaco Grand Prix\"",
        "schema": "CREATE TABLE pitStops (raceId NUMBER); CREATE TABLE circuits (country TEXT, circuitRef TEXT, circuitId NUMBER, name TEXT); CREATE TABLE seasons (url TEXT, year NUMBER); CREATE TABLE races (circuitId NUMBER, year NUMBER, round NUMBER, name TEXT, time TEXT, date TEXT, raceId NUMBER); CREATE TABLE results (raceId NUMBER); CREATE TABLE drivers (forename TEXT, driverId NUMBER); CREATE TABLE driverStandings (raceId NUMBER);"
      },
      {
        "question": "What are the fastest lap speed in that race?",
        "query": "SELECT t2.fastestlapspeed FROM races AS t1 JOIN results AS t2 ON t1.raceid = t2.raceid WHERE t1.year = 2008 AND t1.name = \"Monaco Grand Prix\"",
        "schema": "CREATE TABLE pitStops (raceId NUMBER); CREATE TABLE circuits (country TEXT, circuitRef TEXT, circuitId NUMBER, name TEXT); CREATE TABLE races (date TEXT, circuitId NUMBER, raceId NUMBER, time TEXT, year NUMBER, round NUMBER, name TEXT); CREATE TABLE drivers (driverId NUMBER, forename TEXT); CREATE TABLE driverStandings (raceId NUMBER); CREATE TABLE seasons (year NUMBER, url TEXT); CREATE TABLE lapTimes (raceId NUMBER); CREATE TABLE results (milliseconds NUMBER, fastestLapSpeed TEXT, fastestLap NUMBER, laps NUMBER, raceId NUMBER, driverId NUMBER, resultId NUMBER, fastestLapTime TEXT);"
      },
      {
        "question": "Show the average of them.",
        "query": "SELECT avg(t2.fastestlapspeed) FROM races AS t1 JOIN results AS t2 ON t1.raceid = t2.raceid WHERE t1.year = 2008 AND t1.name = \"Monaco Grand Prix\"",
        "schema": "CREATE TABLE seasons (year NUMBER, url TEXT); CREATE TABLE drivers (surname TEXT, forename TEXT, driverId NUMBER); CREATE TABLE results (fastestLapSpeed TEXT, milliseconds NUMBER, driverId NUMBER, fastestLap NUMBER, resultId NUMBER, fastestLapTime TEXT, laps NUMBER, points NUMBER, number NUMBER, grid NUMBER, raceId NUMBER, position NUMBER); CREATE TABLE races (circuitId NUMBER, raceId NUMBER, round NUMBER, time TEXT, date TEXT, name TEXT, year NUMBER); CREATE TABLE driverStandings (raceId NUMBER); CREATE TABLE lapTimes (raceId NUMBER); CREATE TABLE pitStops (raceId NUMBER); CREATE TABLE circuits (name TEXT, country TEXT, circuitId NUMBER, circuitRef TEXT);"
      }
    ],
    [
      {
        "question": "What is the race named 'Monaco Grand Prix' in 2008.",
        "query": "SELECT * FROM races WHERE YEAR = 2008 AND name = \"Monaco Grand Prix\"",
        "schema": "CREATE TABLE pitStops (raceId NUMBER); CREATE TABLE races (year NUMBER, date TEXT, name TEXT, raceId NUMBER, time TEXT, round NUMBER, circuitId NUMBER); CREATE TABLE seasons (url TEXT, year NUMBER); CREATE TABLE driverStandings (raceId NUMBER); CREATE TABLE circuits (circuitRef TEXT, name TEXT, country TEXT, circuitId NUMBER); CREATE TABLE results (raceId NUMBER); CREATE TABLE drivers (driverId NUMBER, forename TEXT);"
      },
      {
        "question": "What are the fastest lap speed in that race?",
        "query": "SELECT t2.fastestlapspeed FROM races AS t1 JOIN results AS t2 ON t1.raceid = t2.raceid WHERE t1.year = 2008 AND t1.name = \"Monaco Grand Prix\"",
        "schema": "CREATE TABLE pitStops (raceId NUMBER); CREATE TABLE results (grid NUMBER, fastestLap NUMBER, fastestLapTime TEXT, driverId NUMBER, raceId NUMBER, milliseconds NUMBER, resultId NUMBER, laps NUMBER, fastestLapSpeed TEXT); CREATE TABLE seasons (url TEXT, year NUMBER); CREATE TABLE driverStandings (raceId NUMBER); CREATE TABLE circuits (circuitId NUMBER, name TEXT, country TEXT, circuitRef TEXT); CREATE TABLE races (raceId NUMBER, name TEXT, round NUMBER, circuitId NUMBER, year NUMBER, date TEXT, time TEXT); CREATE TABLE drivers (forename TEXT, driverId NUMBER); CREATE TABLE lapTimes (raceId NUMBER);"
      },
      {
        "question": "Show the maximum of them.",
        "query": "SELECT max(t2.fastestlapspeed) FROM races AS t1 JOIN results AS t2 ON t1.raceid = t2.raceid WHERE t1.year = 2008 AND t1.name = \"Monaco Grand Prix\"",
        "schema": "CREATE TABLE lapTimes (raceId NUMBER); CREATE TABLE circuits (circuitRef TEXT, country TEXT, circuitId NUMBER, name TEXT); CREATE TABLE drivers (driverId NUMBER, forename TEXT, surname TEXT); CREATE TABLE races (round NUMBER, raceId NUMBER, year NUMBER, circuitId NUMBER, time TEXT, date TEXT, name TEXT); CREATE TABLE results (raceId NUMBER, number NUMBER, laps NUMBER, points NUMBER, milliseconds NUMBER, driverId NUMBER, resultId NUMBER, grid NUMBER, fastestLap NUMBER, fastestLapSpeed TEXT, fastestLapTime TEXT); CREATE TABLE seasons (year NUMBER, url TEXT); CREATE TABLE pitStops (raceId NUMBER); CREATE TABLE driverStandings (raceId NUMBER);"
      }
    ],
    [
      {
        "question": "What are all the races held after 2014?",
        "query": "SELECT * FROM races WHERE YEAR > 2014",
        "schema": "CREATE TABLE circuits (circuitRef TEXT, name TEXT, circuitId NUMBER); CREATE TABLE drivers (driverId NUMBER); CREATE TABLE races (date TEXT, round NUMBER, year NUMBER, raceId NUMBER, time TEXT, name TEXT, circuitId NUMBER); CREATE TABLE seasons (year NUMBER, url TEXT); CREATE TABLE driverStandings (raceId NUMBER); CREATE TABLE results (raceId NUMBER); CREATE TABLE constructorResults (raceId NUMBER); CREATE TABLE pitStops (raceId NUMBER);"
      },
      {
        "question": "What are the maximum fastest lap speed in those races in term of each race?",
        "query": "SELECT max(t2.fastestlapspeed) , t1.name , t1.year FROM races AS t1 JOIN results AS t2 ON t1.raceid = t2.raceid WHERE t1.year > 2014 GROUP BY t1.name",
        "schema": "CREATE TABLE seasons (url TEXT, year NUMBER); CREATE TABLE drivers (driverId NUMBER); CREATE TABLE driverStandings (raceId NUMBER); CREATE TABLE circuits (name TEXT, circuitRef TEXT, circuitId NUMBER); CREATE TABLE results (raceId NUMBER, fastestLap NUMBER, driverId NUMBER, milliseconds NUMBER, fastestLapTime TEXT, resultId NUMBER, laps NUMBER, fastestLapSpeed TEXT); CREATE TABLE lapTimes (raceId NUMBER); CREATE TABLE races (circuitId NUMBER, round NUMBER, time TEXT, year NUMBER, raceId NUMBER, name TEXT, date TEXT); CREATE TABLE pitStops (raceId NUMBER); CREATE TABLE constructorResults (raceId NUMBER);"
      },
      {
        "question": "Show them in order of year.",
        "query": "SELECT max(t2.fastestlapspeed) , t1.name , t1.year FROM races AS t1 JOIN results AS t2 ON t1.raceid = t2.raceid WHERE t1.year > 2014 GROUP BY t1.name ORDER BY t1.year",
        "schema": "CREATE TABLE pitStops (raceId NUMBER); CREATE TABLE circuits (name TEXT, circuitId NUMBER, circuitRef TEXT); CREATE TABLE seasons (url TEXT, year NUMBER); CREATE TABLE constructorResults (raceId NUMBER); CREATE TABLE drivers (driverId NUMBER); CREATE TABLE results (milliseconds NUMBER, fastestLap NUMBER, driverId NUMBER, fastestLapSpeed TEXT, statusId NUMBER, grid NUMBER, laps NUMBER, resultId NUMBER, fastestLapTime TEXT, raceId NUMBER); CREATE TABLE lapTimes (raceId NUMBER); CREATE TABLE driverStandings (raceId NUMBER); CREATE TABLE races (circuitId NUMBER, year NUMBER, round NUMBER, time TEXT, date TEXT, raceId NUMBER, name TEXT);"
      }
    ],
    [
      {
        "question": "What are all the races held after 2014?",
        "query": "SELECT * FROM races WHERE YEAR > 2014",
        "schema": "CREATE TABLE pitStops (raceId NUMBER); CREATE TABLE results (raceId NUMBER); CREATE TABLE circuits (name TEXT, circuitId NUMBER, circuitRef TEXT); CREATE TABLE drivers (driverId NUMBER); CREATE TABLE seasons (year NUMBER, url TEXT); CREATE TABLE driverStandings (raceId NUMBER); CREATE TABLE races (raceId NUMBER, time TEXT, year NUMBER, date TEXT, name TEXT, circuitId NUMBER, round NUMBER);"
      },
      {
        "question": "What are the average fastest lap speed in those races in term of each race?",
        "query": "SELECT avg(t2.fastestlapspeed) , t1.name , t1.year FROM races AS t1 JOIN results AS t2 ON t1.raceid = t2.raceid WHERE t1.year > 2014 GROUP BY t1.name",
        "schema": "CREATE TABLE circuits (circuitId NUMBER, circuitRef TEXT, name TEXT); CREATE TABLE seasons (url TEXT, year NUMBER); CREATE TABLE results (raceId NUMBER, fastestLapTime TEXT, fastestLap NUMBER, resultId NUMBER, grid NUMBER, laps NUMBER, fastestLapSpeed TEXT, milliseconds NUMBER, driverId NUMBER); CREATE TABLE races (round NUMBER, raceId NUMBER, time TEXT, date TEXT, year NUMBER, name TEXT, circuitId NUMBER); CREATE TABLE pitStops (raceId NUMBER); CREATE TABLE driverStandings (raceId NUMBER); CREATE TABLE drivers (driverId NUMBER); CREATE TABLE lapTimes (milliseconds NUMBER, raceId NUMBER);"
      },
      {
        "question": "Show them in order of year.",
        "query": "SELECT avg(t2.fastestlapspeed) , t1.name , t1.year FROM races AS t1 JOIN results AS t2 ON t1.raceid = t2.raceid WHERE t1.year > 2014 GROUP BY t1.name ORDER BY t1.year",
        "schema": "CREATE TABLE results (resultId NUMBER, fastestLap NUMBER, driverId NUMBER, grid NUMBER, raceId NUMBER, fastestLapSpeed TEXT, milliseconds NUMBER, laps NUMBER, number NUMBER, fastestLapTime TEXT); CREATE TABLE seasons (year NUMBER, url TEXT); CREATE TABLE drivers (driverId NUMBER); CREATE TABLE driverStandings (raceId NUMBER); CREATE TABLE lapTimes (raceId NUMBER, milliseconds NUMBER); CREATE TABLE circuits (name TEXT, circuitRef TEXT, circuitId NUMBER); CREATE TABLE pitStops (raceId NUMBER); CREATE TABLE races (year NUMBER, raceId NUMBER, circuitId NUMBER, round NUMBER, date TEXT, time TEXT, name TEXT);"
      }
    ],
    [
      {
        "question": "What are all the drivers?",
        "query": "SELECT * FROM drivers",
        "schema": "CREATE TABLE qualifying (driverId NUMBER); CREATE TABLE lapTimes (driverId NUMBER); CREATE TABLE drivers (number NUMBER, driverId NUMBER, code TEXT, surname TEXT, dob TEXT, driverRef TEXT, forename TEXT); CREATE TABLE races (raceId NUMBER); CREATE TABLE results (number NUMBER, resultId NUMBER, raceId NUMBER, driverId NUMBER); CREATE TABLE pitStops (driverId NUMBER); CREATE TABLE driverStandings (driverId NUMBER);"
      },
      {
        "question": "Show the id, forename and number of races of those who have at least participated in two races.",
        "query": "SELECT t1.driverid , t1.forename , count(*) FROM drivers AS t1 JOIN results AS t2 ON t1.driverid = t2.driverid JOIN races AS t3 ON t2.raceid = t3.raceid GROUP BY t1.driverid HAVING count(*) >= 2",
        "schema": "CREATE TABLE races (name TEXT, circuitId NUMBER, round NUMBER, raceId NUMBER); CREATE TABLE circuits (name TEXT, circuitId NUMBER); CREATE TABLE driverStandings (driverId NUMBER, raceId NUMBER, driverStandingsId NUMBER); CREATE TABLE drivers (forename TEXT, dob TEXT, driverId NUMBER, code TEXT, driverRef TEXT, number NUMBER, surname TEXT); CREATE TABLE lapTimes (raceId NUMBER, driverId NUMBER); CREATE TABLE qualifying (raceId NUMBER, driverId NUMBER, number NUMBER); CREATE TABLE results (rank NUMBER, positionOrder NUMBER, statusId NUMBER, number NUMBER, grid NUMBER, driverId NUMBER, raceId NUMBER, points NUMBER, fastestLapTime TEXT, fastestLap NUMBER, milliseconds NUMBER, resultId NUMBER); CREATE TABLE pitStops (driverId NUMBER, raceId NUMBER);"
      }
    ],
    [
      {
        "question": "Who are all the drivers?",
        "query": "SELECT * FROM drivers",
        "schema": "CREATE TABLE pitStops (driverId NUMBER); CREATE TABLE races (raceId NUMBER); CREATE TABLE results (driverId NUMBER, raceId NUMBER, resultId NUMBER); CREATE TABLE qualifying (driverId NUMBER); CREATE TABLE drivers (code TEXT, forename TEXT, dob TEXT, driverId NUMBER, surname TEXT, number NUMBER, driverRef TEXT); CREATE TABLE driverStandings (driverId NUMBER);"
      },
      {
        "question": "Show the id and number of races of those who have at most participated in 30 races.",
        "query": "SELECT t1.driverid , count(*) FROM drivers AS t1 JOIN results AS t2 ON t1.driverid = t2.driverid JOIN races AS t3 ON t2.raceid = t3.raceid GROUP BY t1.driverid HAVING count(*) <= 30",
        "schema": "CREATE TABLE lapTimes (driverId NUMBER, raceId NUMBER); CREATE TABLE pitStops (raceId NUMBER, driverId NUMBER); CREATE TABLE qualifying (driverId NUMBER, number NUMBER, raceId NUMBER); CREATE TABLE drivers (driverId NUMBER, number NUMBER, dob TEXT, surname TEXT, driverRef TEXT, forename TEXT, code TEXT); CREATE TABLE driverStandings (driverId NUMBER, driverStandingsId NUMBER, raceId NUMBER); CREATE TABLE results (driverId NUMBER, time TEXT, fastestLap NUMBER, statusId NUMBER, grid NUMBER, resultId NUMBER, rank NUMBER, number NUMBER, milliseconds NUMBER, points NUMBER, raceId NUMBER); CREATE TABLE circuits (circuitId NUMBER); CREATE TABLE races (name TEXT, circuitId NUMBER, raceId NUMBER);"
      }
    ]
  ],
  "phone_1": [
    [
      {
        "question": "tell me the Ram of the chip with model name X5.",
        "query": "SELECT ram_mib FROM chip_model WHERE model_name = \"X5\"",
        "schema": "CREATE TABLE chip_model (ROM_MiB NUMBER, RAM_MiB NUMBER, Model_name TEXT); CREATE TABLE phone (chip_model TEXT, Hardware_Model_name TEXT);"
      },
      {
        "question": "How about the X3 Basic's?",
        "query": "SELECT ram_mib FROM chip_model WHERE model_name = \"X3 Basic\"",
        "schema": "CREATE TABLE chip_model (ROM_MiB NUMBER, RAM_MiB NUMBER, Model_name TEXT); CREATE TABLE phone (Hardware_Model_name TEXT, chip_model TEXT);"
      },
      {
        "question": "Which model has the least amount of RAM? List the model name and the amount of RAM.",
        "query": "SELECT model_name , ram_mib FROM chip_model ORDER BY ram_mib ASC LIMIT 1;",
        "schema": "CREATE TABLE phone (Hardware_Model_name TEXT, chip_model TEXT); CREATE TABLE chip_model (RAM_MiB NUMBER, ROM_MiB NUMBER, Model_name TEXT);"
      }
    ],
    [
      {
        "question": "tell me the chip models produced by the company named \"Nokia Corporation\".",
        "query": "SELECT chip_model FROM phone WHERE company_name = \"Nokia Corporation\"",
        "schema": "CREATE TABLE chip_model (Model_name TEXT, Bluetooth TEXT); CREATE TABLE screen_mode (Graphics_mode NUMBER); CREATE TABLE phone (chip_model TEXT, Company_name TEXT, Hardware_Model_name TEXT);"
      },
      {
        "question": "Okay, tell me the RAM size of those chip models.",
        "query": "SELECT t1.ram_mib FROM chip_model AS t1 JOIN phone AS t2 ON t1.model_name = t2.chip_model WHERE t2.company_name = \"Nokia Corporation\";",
        "schema": "CREATE TABLE phone (Hardware_Model_name TEXT, chip_model TEXT, Company_name TEXT); CREATE TABLE chip_model (RAM_MiB NUMBER, Model_name TEXT, Bluetooth TEXT); CREATE TABLE screen_mode (Graphics_mode NUMBER);"
      },
      {
        "question": "So, what is maximum and minimum RAM size?",
        "query": "SELECT max(t1.ram_mib) , min(t1.ram_mib) FROM chip_model AS t1 JOIN phone AS t2 ON t1.model_name = t2.chip_model WHERE t2.company_name = \"Nokia Corporation\"",
        "schema": "CREATE TABLE phone (chip_model TEXT, Company_name TEXT, Hardware_Model_name TEXT); CREATE TABLE chip_model (Model_name TEXT, Bluetooth TEXT, RAM_MiB NUMBER); CREATE TABLE screen_mode (Graphics_mode NUMBER);"
      }
    ],
    [
      {
        "question": "tell me the chip model produced by the company named \"Nokia Corporation\".",
        "query": "SELECT chip_model FROM phone WHERE company_name = \"Nokia Corporation\"",
        "schema": "CREATE TABLE chip_model (RAM_MiB NUMBER, WiFi TEXT, Model_name TEXT, Bluetooth TEXT); CREATE TABLE phone (chip_model TEXT, Hardware_Model_name TEXT, Company_name TEXT); CREATE TABLE screen_mode (Graphics_mode NUMBER);"
      },
      {
        "question": "Okay, tell me the ROM size of those chip models.",
        "query": "SELECT t1.rom_mib FROM chip_model AS t1 JOIN phone AS t2 ON t1.model_name = t2.chip_model WHERE t2.company_name = \"Nokia Corporation\";",
        "schema": "CREATE TABLE phone (Company_name TEXT, Hardware_Model_name TEXT, chip_model TEXT); CREATE TABLE screen_mode (Graphics_mode NUMBER); CREATE TABLE chip_model (WiFi TEXT, Bluetooth TEXT, ROM_MiB NUMBER, RAM_MiB NUMBER, Model_name TEXT);"
      },
      {
        "question": "So, what is the average ROM size?",
        "query": "SELECT avg(t1.rom_mib) FROM chip_model AS t1 JOIN phone AS t2 ON t1.model_name = t2.chip_model WHERE t2.company_name = \"Nokia Corporation\"",
        "schema": "CREATE TABLE chip_model (Model_name TEXT, ROM_MiB NUMBER, Bluetooth TEXT, RAM_MiB NUMBER, WiFi TEXT); CREATE TABLE phone (chip_model TEXT, Company_name TEXT, Hardware_Model_name TEXT); CREATE TABLE screen_mode (Graphics_mode NUMBER);"
      }
    ],
    [
      {
        "question": "Tell me the phones that were launched in the year 2002.",
        "query": "SELECT t2.hardware_model_name FROM chip_model AS t1 JOIN phone AS t2 ON t1.model_name = t2.chip_model WHERE t1.launch_year = 2002",
        "schema": "CREATE TABLE chip_model (Launch_year NUMBER, Model_name TEXT); CREATE TABLE phone (Company_name TEXT, Date TEXT, chip_model TEXT, Hardware_Model_name TEXT);"
      },
      {
        "question": "What companies were they produced by?",
        "query": "SELECT t2.company_name FROM chip_model AS t1 JOIN phone AS t2 ON t1.model_name = t2.chip_model WHERE t1.launch_year = 2002",
        "schema": "CREATE TABLE chip_model (Launch_year NUMBER, Model_name TEXT); CREATE TABLE phone (Hardware_Model_name TEXT, Date TEXT, Company_name TEXT, chip_model TEXT);"
      },
      {
        "question": "Give information about the company and hardware model name for phones that have RAM size greater than 32.",
        "query": "SELECT t2.hardware_model_name , t2.company_name FROM chip_model AS t1 JOIN phone AS t2 ON t1.model_name = t2.chip_model WHERE t1.ram_mib > 32;",
        "schema": "CREATE TABLE phone (Hardware_Model_name TEXT, chip_model TEXT, Date TEXT, Company_name TEXT); CREATE TABLE chip_model (Launch_year NUMBER, Model_name TEXT, RAM_MiB NUMBER);"
      }
    ],
    [
      {
        "question": "Tell me the phones that have the word 'Provisional' in their accreditation types.",
        "query": "SELECT hardware_model_name FROM phone WHERE accreditation_type LIKE 'Provisional'",
        "schema": "CREATE TABLE phone (Accreditation_level TEXT, Hardware_Model_name TEXT, Accreditation_type TEXT, Company_name TEXT);"
      },
      {
        "question": "How about their company names?",
        "query": "SELECT company_name FROM phone WHERE accreditation_type LIKE 'Provisional';",
        "schema": "CREATE TABLE chip_model (Model_name TEXT); CREATE TABLE phone (Company_name TEXT, Accreditation_level TEXT, chip_model TEXT, Accreditation_type TEXT, Hardware_Model_name TEXT);"
      },
      {
        "question": "Okay, I want to know the same information of the phones that have word 'Full' in their accreditation types.",
        "query": "SELECT hardware_model_name , company_name FROM phone WHERE accreditation_type LIKE 'Full';",
        "schema": "CREATE TABLE chip_model (Model_name TEXT); CREATE TABLE phone (Hardware_Model_name TEXT, Accreditation_type TEXT, Company_name TEXT, Accreditation_level TEXT, chip_model TEXT);"
      }
    ],
    [
      {
        "question": "Tell me the chip model of the phone with hardware model name \"LG-P760\".",
        "query": "SELECT chip_model FROM phone WHERE hardware_model_name = \"LG-P760\"",
        "schema": "CREATE TABLE phone (Hardware_Model_name TEXT, Company_name TEXT, chip_model TEXT); CREATE TABLE chip_model (Model_name TEXT);"
      },
      {
        "question": "How about the Char cells, Pixels and Hardware colours for its screen?",
        "query": "SELECT t1.char_cells , t1.pixels , t1.hardware_colours FROM screen_mode AS t1 JOIN phone AS t2 ON t1.graphics_mode = t2.screen_mode WHERE t2.hardware_model_name = \"LG-P760\";",
        "schema": "CREATE TABLE phone (chip_model TEXT, Company_name TEXT, Hardware_Model_name TEXT, screen_mode TEXT); CREATE TABLE screen_mode (Graphics_mode NUMBER, used_kb NUMBER, Type TEXT, Char_cells TEXT, Pixels TEXT, Hardware_colours NUMBER); CREATE TABLE chip_model (Model_name TEXT);"
      }
    ],
    [
      {
        "question": "List the hardware model name and company name for the phone whose screen mode type is \"Text\".",
        "query": "SELECT t2.hardware_model_name , t2.company_name FROM screen_mode AS t1 JOIN phone AS t2 ON t1.graphics_mode = t2.screen_mode WHERE t1.type = \"Text\";",
        "schema": "CREATE TABLE screen_mode (Type TEXT, used_kb NUMBER, Graphics_mode NUMBER); CREATE TABLE phone (chip_model TEXT, Company_name TEXT, screen_mode TEXT, Hardware_Model_name TEXT); CREATE TABLE chip_model (Model_name TEXT);"
      },
      {
        "question": "How about that with screen mode type \"Graphics\".",
        "query": "SELECT t2.hardware_model_name , t2.company_name FROM screen_mode AS t1 JOIN phone AS t2 ON t1.graphics_mode = t2.screen_mode WHERE t1.type = \"Graphics\"",
        "schema": "CREATE TABLE chip_model (Model_name TEXT); CREATE TABLE screen_mode (Graphics_mode NUMBER, used_kb NUMBER, Type TEXT); CREATE TABLE phone (Company_name TEXT, screen_mode TEXT, chip_model TEXT, Hardware_Model_name TEXT);"
      }
    ],
    [
      {
        "question": "Tell me the name of the company that has the largest number of phone models? Give the count as well.",
        "query": "SELECT company_name , count(*) FROM phone GROUP BY company_name ORDER BY count(*) DESC LIMIT 1;",
        "schema": "CREATE TABLE phone (chip_model TEXT, Hardware_Model_name TEXT, Company_name TEXT); CREATE TABLE chip_model (Model_name TEXT);"
      },
      {
        "question": "How about the smallest one?",
        "query": "SELECT company_name , count(*) FROM phone GROUP BY company_name ORDER BY count(*) ASC LIMIT 1;",
        "schema": "CREATE TABLE phone (chip_model TEXT, Company_name TEXT, Hardware_Model_name TEXT); CREATE TABLE chip_model (Model_name TEXT);"
      }
    ],
    [
      {
        "question": "Tell the name of the company which produced the phone Nokia 700.",
        "query": "SELECT company_name FROM phone WHERE hardware_model_name = \"Nokia 700\"",
        "schema": "CREATE TABLE phone (screen_mode TEXT, Company_name TEXT, chip_model TEXT, Hardware_Model_name TEXT); CREATE TABLE chip_model (Model_name TEXT);"
      },
      {
        "question": "So what is the company which produced the phone LG-P760?",
        "query": "SELECT company_name FROM phone WHERE hardware_model_name = \"LG-P760\"",
        "schema": "CREATE TABLE chip_model (Model_name TEXT); CREATE TABLE phone (screen_mode TEXT, Company_name TEXT, Hardware_Model_name TEXT, chip_model TEXT);"
      },
      {
        "question": "Tell me the name of the company that produced more than one phone model.",
        "query": "SELECT company_name FROM phone GROUP BY company_name HAVING count(*) > 1;",
        "schema": "CREATE TABLE phone (Hardware_Model_name TEXT, screen_mode TEXT, Company_name TEXT, chip_model TEXT); CREATE TABLE chip_model (Model_name TEXT);"
      }
    ],
    [
      {
        "question": "Tell me the distinct maps in screen mode.",
        "query": "SELECT DISTINCT map FROM screen_mode",
        "schema": "CREATE TABLE screen_mode (Graphics_mode NUMBER, Type TEXT, map TEXT, used_kb NUMBER); CREATE TABLE phone (screen_mode TEXT);"
      },
      {
        "question": "How about the used kb values?",
        "query": "SELECT DISTINCT used_kb FROM screen_mode",
        "schema": "CREATE TABLE screen_mode (map TEXT, Type TEXT, used_kb NUMBER, Graphics_mode NUMBER); CREATE TABLE phone (screen_mode TEXT);"
      },
      {
        "question": "Okay, I want to know the maximum, minimum and average number of used kb in screen mode.",
        "query": "SELECT max(used_kb) , min(used_kb) , avg(used_kb) FROM screen_mode",
        "schema": "CREATE TABLE screen_mode (Graphics_mode NUMBER, map TEXT, Type TEXT, used_kb NUMBER); CREATE TABLE phone (screen_mode TEXT);"
      }
    ],
    [
      {
        "question": "Tell me the the name of the phone model launched in the year 2003.",
        "query": "SELECT t2.hardware_model_name FROM chip_model AS t1 JOIN phone AS t2 ON t1.model_name = t2.chip_model WHERE t1.launch_year = 2003",
        "schema": "CREATE TABLE chip_model (Model_name TEXT, RAM_MiB NUMBER, Launch_year NUMBER); CREATE TABLE phone (chip_model TEXT, Date TEXT, Hardware_Model_name TEXT, Company_name TEXT);"
      },
      {
        "question": "How about that in the year 2002?",
        "query": "SELECT t2.hardware_model_name FROM chip_model AS t1 JOIN phone AS t2 ON t1.model_name = t2.chip_model WHERE t1.launch_year = 2002",
        "schema": "CREATE TABLE chip_model (Launch_year NUMBER, Model_name TEXT, RAM_MiB NUMBER); CREATE TABLE phone (Hardware_Model_name TEXT, Date TEXT, chip_model TEXT, Company_name TEXT);"
      },
      {
        "question": "I want to know the one with highest RAM size.",
        "query": "SELECT t2.hardware_model_name FROM chip_model AS t1 JOIN phone AS t2 ON t1.model_name = t2.chip_model WHERE t1.launch_year = 2002 ORDER BY t1.ram_mib DESC LIMIT 1;",
        "schema": "CREATE TABLE chip_model (RAM_MiB NUMBER, Launch_year NUMBER, Model_name TEXT); CREATE TABLE phone (Hardware_Model_name TEXT, Company_name TEXT, Date TEXT, chip_model TEXT);"
      }
    ],
    [
      {
        "question": "What are the wifi and screen mode type of the hardware model named \"GT-I9300\"?",
        "query": "SELECT t1.wifi , t3.type FROM chip_model AS t1 JOIN phone AS t2 ON t1.model_name = t2.chip_model JOIN screen_mode AS t3 ON t2.screen_mode = t3.graphics_mode WHERE t2.hardware_model_name = \"GT-I9300\"",
        "schema": "CREATE TABLE phone (chip_model TEXT, Hardware_Model_name TEXT, screen_mode TEXT); CREATE TABLE screen_mode (Type TEXT, used_kb NUMBER, Graphics_mode NUMBER); CREATE TABLE chip_model (WiFi TEXT, Model_name TEXT);"
      },
      {
        "question": "How about that of the hardware model named \"Z520e\"?",
        "query": "SELECT t1.wifi , t3.type FROM chip_model AS t1 JOIN phone AS t2 ON t1.model_name = t2.chip_model JOIN screen_mode AS t3 ON t2.screen_mode = t3.graphics_mode WHERE t2.hardware_model_name = \"Z520e\"",
        "schema": "CREATE TABLE phone (screen_mode TEXT, chip_model TEXT, Hardware_Model_name TEXT); CREATE TABLE screen_mode (Graphics_mode NUMBER, used_kb NUMBER, Type TEXT); CREATE TABLE chip_model (Model_name TEXT, WiFi TEXT);"
      },
      {
        "question": "Okay, I want to know that of the hardware model named \"LG-P760\".",
        "query": "SELECT t1.wifi , t3.type FROM chip_model AS t1 JOIN phone AS t2 ON t1.model_name = t2.chip_model JOIN screen_mode AS t3 ON t2.screen_mode = t3.graphics_mode WHERE t2.hardware_model_name = \"LG-P760\"",
        "schema": "CREATE TABLE screen_mode (Type TEXT, used_kb NUMBER, Graphics_mode NUMBER); CREATE TABLE phone (screen_mode TEXT, Hardware_Model_name TEXT, chip_model TEXT); CREATE TABLE chip_model (WiFi TEXT, Model_name TEXT);"
      }
    ],
    [
      {
        "question": "Tell me the hardware model name for the phones that have screen mode type \"Graphics\".",
        "query": "SELECT t2.hardware_model_name FROM chip_model AS t1 JOIN phone AS t2 ON t1.model_name = t2.chip_model JOIN screen_mode AS t3 ON t2.screen_mode = t3.graphics_mode WHERE t3.type = \"Graphics\"",
        "schema": "CREATE TABLE screen_mode (Graphics_mode NUMBER, Type TEXT); CREATE TABLE chip_model (Model_name TEXT); CREATE TABLE phone (Company_name TEXT, screen_mode TEXT, Hardware_Model_name TEXT, chip_model TEXT);"
      },
      {
        "question": "So how about the phones that have screen model type \"Text\"?",
        "query": "SELECT t2.hardware_model_name FROM chip_model AS t1 JOIN phone AS t2 ON t1.model_name = t2.chip_model JOIN screen_mode AS t3 ON t2.screen_mode = t3.graphics_mode WHERE t3.type = \"Text\"",
        "schema": "CREATE TABLE phone (Hardware_Model_name TEXT, chip_model TEXT, screen_mode TEXT, Company_name TEXT); CREATE TABLE chip_model (Model_name TEXT); CREATE TABLE screen_mode (Type TEXT, Graphics_mode NUMBER);"
      },
      {
        "question": "Okay, I want to know the same for the phones that have RAM size greater than 32.",
        "query": "SELECT t2.hardware_model_name FROM chip_model AS t1 JOIN phone AS t2 ON t1.model_name = t2.chip_model JOIN screen_mode AS t3 ON t2.screen_mode = t3.graphics_mode WHERE t1.ram_mib > 32;",
        "schema": "CREATE TABLE chip_model (RAM_MiB NUMBER, Model_name TEXT); CREATE TABLE phone (Company_name TEXT, screen_mode TEXT, chip_model TEXT, Hardware_Model_name TEXT); CREATE TABLE screen_mode (Graphics_mode NUMBER, Type TEXT);"
      }
    ],
    [
      {
        "question": "Tell me the hardware model name for the phones that have screen mode type \"Graphics\".",
        "query": "SELECT DISTINCT t2.hardware_model_name FROM screen_mode AS t1 JOIN phone AS t2 ON t1.graphics_mode = t2.screen_mode WHERE t1.type = \"Graphics\"",
        "schema": "CREATE TABLE chip_model (Model_name TEXT); CREATE TABLE phone (chip_model TEXT, Hardware_Model_name TEXT, screen_mode TEXT, Company_name TEXT); CREATE TABLE screen_mode (Graphics_mode NUMBER, Type TEXT);"
      },
      {
        "question": "So how about the phones that have screen model type \"Text\"?",
        "query": "SELECT DISTINCT t2.hardware_model_name FROM screen_mode AS t1 JOIN phone AS t2 ON t1.graphics_mode = t2.screen_mode WHERE t1.type = \"Text\"",
        "schema": "CREATE TABLE screen_mode (Type TEXT, Graphics_mode NUMBER); CREATE TABLE chip_model (Model_name TEXT); CREATE TABLE phone (Hardware_Model_name TEXT, screen_mode TEXT, chip_model TEXT, Company_name TEXT);"
      },
      {
        "question": "Okay, for now I want to know the hardware model name for the phones that were produced by \"Nokia Corporation\" or whose screen mode type is \"Graphics.\"",
        "query": "SELECT DISTINCT t2.hardware_model_name FROM screen_mode AS t1 JOIN phone AS t2 ON t1.graphics_mode = t2.screen_mode WHERE t1.type = \"Graphics\" OR t2.company_name = \"Nokia Corporation\"",
        "schema": "CREATE TABLE screen_mode (Graphics_mode NUMBER, Type TEXT); CREATE TABLE phone (Company_name TEXT, Hardware_Model_name TEXT, screen_mode TEXT, chip_model TEXT); CREATE TABLE chip_model (Model_name TEXT);"
      }
    ],
    [
      {
        "question": "List the hardware model name for the phones that were produced by \"Nokia Corporation\".",
        "query": "SELECT DISTINCT t2.hardware_model_name FROM screen_mode AS t1 JOIN phone AS t2 ON t1.graphics_mode = t2.screen_mode WHERE t2.company_name = \"Nokia Corporation\"",
        "schema": "CREATE TABLE chip_model (Model_name TEXT); CREATE TABLE phone (Company_name TEXT, Hardware_Model_name TEXT, screen_mode TEXT, chip_model TEXT); CREATE TABLE screen_mode (Type TEXT, Graphics_mode NUMBER);"
      },
      {
        "question": "For these phones, which ones have screen model Text?",
        "query": "SELECT DISTINCT t2.hardware_model_name FROM screen_mode AS t1 JOIN phone AS t2 ON t1.graphics_mode = t2.screen_mode WHERE t2.company_name = \"Nokia Corporation\" AND t1.type = \"Text\"",
        "schema": "CREATE TABLE phone (Company_name TEXT, screen_mode TEXT, Hardware_Model_name TEXT, chip_model TEXT); CREATE TABLE chip_model (Model_name TEXT); CREATE TABLE screen_mode (Graphics_mode NUMBER, Type TEXT);"
      },
      {
        "question": "How about the ones that do not?",
        "query": "SELECT DISTINCT t2.hardware_model_name FROM screen_mode AS t1 JOIN phone AS t2 ON t1.graphics_mode = t2.screen_mode WHERE t2.company_name = \"Nokia Corporation\" AND t1.type != \"Text\"",
        "schema": "CREATE TABLE phone (chip_model TEXT, Hardware_Model_name TEXT, Company_name TEXT, screen_mode TEXT); CREATE TABLE screen_mode (Graphics_mode NUMBER, Type TEXT); CREATE TABLE chip_model (Model_name TEXT);"
      }
    ],
    [
      {
        "question": "Tell me the phone hardware model and company name for the phones whose screen usage in kb is larger than 10.",
        "query": "SELECT DISTINCT t2.hardware_model_name , t2.company_name FROM screen_mode AS t1 JOIN phone AS t2 ON t1.graphics_mode = t2.screen_mode WHERE t1.used_kb > 10",
        "schema": "CREATE TABLE phone (Company_name TEXT, screen_mode TEXT, chip_model TEXT, Hardware_Model_name TEXT); CREATE TABLE screen_mode (Graphics_mode NUMBER, Type TEXT, used_kb NUMBER); CREATE TABLE chip_model (Model_name TEXT);"
      },
      {
        "question": "Smaller than 15?",
        "query": "SELECT DISTINCT t2.hardware_model_name , t2.company_name FROM screen_mode AS t1 JOIN phone AS t2 ON t1.graphics_mode = t2.screen_mode WHERE t1.used_kb < 15",
        "schema": "CREATE TABLE phone (Company_name TEXT, screen_mode TEXT, Hardware_Model_name TEXT, chip_model TEXT); CREATE TABLE chip_model (Model_name TEXT); CREATE TABLE screen_mode (Type TEXT, Graphics_mode NUMBER, used_kb NUMBER);"
      },
      {
        "question": "Okay, now I want to know the phones with screen usage within that range.",
        "query": "SELECT DISTINCT t2.hardware_model_name , t2.company_name FROM screen_mode AS t1 JOIN phone AS t2 ON t1.graphics_mode = t2.screen_mode WHERE t1.used_kb BETWEEN 10 AND 15",
        "schema": "CREATE TABLE chip_model (Model_name TEXT); CREATE TABLE screen_mode (Graphics_mode NUMBER, Type TEXT, used_kb NUMBER); CREATE TABLE phone (Hardware_Model_name TEXT, screen_mode TEXT, chip_model TEXT, Company_name TEXT);"
      }
    ],
    [
      {
        "question": "Tell me the accreditation level of the hardware model with name Z520e.",
        "query": "SELECT accreditation_level FROM phone WHERE hardware_model_name = \"Z520e\"",
        "schema": "CREATE TABLE chip_model (Model_name TEXT); CREATE TABLE phone (Hardware_Model_name TEXT, Accreditation_type TEXT, chip_model TEXT, Accreditation_level TEXT);"
      },
      {
        "question": "How about that of Nokia 700?",
        "query": "SELECT accreditation_level FROM phone WHERE hardware_model_name = \"Nokia 700\"",
        "schema": "CREATE TABLE phone (Accreditation_level TEXT, chip_model TEXT, Accreditation_type TEXT, Company_name TEXT, Hardware_Model_name TEXT); CREATE TABLE chip_model (Model_name TEXT);"
      },
      {
        "question": "Okay, I want to know the accreditation level that more than 3 phones use.",
        "query": "SELECT accreditation_level FROM phone GROUP BY accreditation_level HAVING count(*) > 3",
        "schema": "CREATE TABLE phone (Company_name TEXT, chip_model TEXT, Accreditation_type TEXT, Accreditation_level TEXT, Hardware_Model_name TEXT); CREATE TABLE chip_model (Model_name TEXT);"
      }
    ],
    [
      {
        "question": "Tell me the ram size of the hardware model with name Nokia 700.",
        "query": "SELECT t1.ram_mib FROM chip_model AS t1 JOIN phone AS t2 ON t1.model_name = t2.chip_model WHERE t2.hardware_model_name = \"Nokia 700\"",
        "schema": "CREATE TABLE chip_model (Model_name TEXT, RAM_MiB NUMBER); CREATE TABLE phone (chip_model TEXT, Hardware_Model_name TEXT, Company_name TEXT);"
      },
      {
        "question": "How about for the GT-I9300?",
        "query": "SELECT t1.ram_mib FROM chip_model AS t1 JOIN phone AS t2 ON t1.model_name = t2.chip_model WHERE t2.hardware_model_name = \"GT-I9300\"",
        "schema": "CREATE TABLE chip_model (Model_name TEXT, RAM_MiB NUMBER); CREATE TABLE phone (Company_name TEXT, chip_model TEXT, Hardware_Model_name TEXT);"
      },
      {
        "question": "Tell me the average ram mib size of the chip models that are never used by any phone.",
        "query": "SELECT avg(ram_mib) FROM chip_model WHERE model_name NOT IN (SELECT chip_model FROM phone)",
        "schema": "CREATE TABLE chip_model (RAM_MiB NUMBER, Model_name TEXT); CREATE TABLE phone (Hardware_Model_name TEXT, Company_name TEXT, chip_model TEXT);"
      }
    ],
    [
      {
        "question": "Tell me all the chip models.",
        "query": "SELECT model_name FROM chip_model",
        "schema": "CREATE TABLE chip_model (Model_name TEXT, ROM_MiB NUMBER, Bluetooth TEXT, WiFi TEXT, RAM_MiB NUMBER); CREATE TABLE phone (Hardware_Model_name TEXT, chip_model TEXT); CREATE TABLE screen_mode (Graphics_mode NUMBER);"
      },
      {
        "question": "Tell me all the chip models that are used by phones with full accreditation type.",
        "query": "SELECT t1.model_name FROM chip_model AS t1 JOIN phone AS t2 ON t1.model_name = t2.chip_model WHERE t2.accreditation_type = 'Full'",
        "schema": "CREATE TABLE chip_model (WiFi TEXT, Bluetooth TEXT, RAM_MiB NUMBER, Model_name TEXT, ROM_MiB NUMBER); CREATE TABLE screen_mode (Graphics_mode NUMBER, Type TEXT); CREATE TABLE phone (Accreditation_type TEXT, Company_name TEXT, chip_model TEXT, Hardware_Model_name TEXT, Accreditation_level TEXT);"
      },
      {
        "question": "How about not used by any phone with full accreditation type?",
        "query": "SELECT model_name FROM chip_model EXCEPT SELECT chip_model FROM phone WHERE accreditation_type = 'Full'",
        "schema": "CREATE TABLE chip_model (Model_name TEXT, RAM_MiB NUMBER, ROM_MiB NUMBER, WiFi TEXT, Bluetooth TEXT); CREATE TABLE screen_mode (Type TEXT, Graphics_mode NUMBER); CREATE TABLE phone (Accreditation_level TEXT, Company_name TEXT, Accreditation_type TEXT, chip_model TEXT, Hardware_Model_name TEXT);"
      }
    ]
  ],
  "driving_school": [
    [
      {
        "question": "Give the first and last names of the staff.",
        "query": "SELECT first_name, last_name FROM staff",
        "schema": "CREATE TABLE Staff (last_name TEXT, middle_name TEXT, first_name TEXT, staff_id NUMBER); CREATE TABLE Customers (first_name TEXT, last_name TEXT);"
      },
      {
        "question": "Also list the date of birth.",
        "query": "SELECT first_name, last_name, date_of_birth FROM staff",
        "schema": "CREATE TABLE Staff (last_name TEXT, staff_id NUMBER, middle_name TEXT, date_of_birth TIME, first_name TEXT); CREATE TABLE Customers (last_name TEXT, first_name TEXT);"
      },
      {
        "question": "What is the birthday of the staff member with first name as Janessa and last name as Sawayn?",
        "query": "SELECT date_of_birth FROM staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\";",
        "schema": "CREATE TABLE Customers (first_name TEXT, last_name TEXT); CREATE TABLE Staff (date_of_birth TIME, last_name TEXT, staff_id NUMBER, middle_name TEXT, first_name TEXT);"
      }
    ],
    [
      {
        "question": "When did various staff join?",
        "query": "SELECT first_name, last_name, date_joined_staff FROM staff",
        "schema": "CREATE TABLE Lessons (staff_id NUMBER); CREATE TABLE Staff (last_name TEXT, date_joined_staff TIME, first_name TEXT, date_left_staff TIME, date_of_birth TIME, staff_id NUMBER, middle_name TEXT);"
      },
      {
        "question": "When did the staff member with first name as Janessa and last name as Sawayn join the company?",
        "query": "SELECT date_joined_staff FROM staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\";",
        "schema": "CREATE TABLE Lessons (staff_id NUMBER); CREATE TABLE Staff (staff_id NUMBER, date_of_birth TIME, middle_name TEXT, date_joined_staff TIME, last_name TEXT, first_name TEXT, date_left_staff TIME);"
      }
    ],
    [
      {
        "question": "What was the most recent leaving of the company for any staff member?",
        "query": "SELECT max(date_left_staff) FROM staff",
        "schema": "CREATE TABLE Staff (date_joined_staff TIME, date_of_birth TIME, first_name TEXT, date_left_staff TIME, staff_id NUMBER, last_name TEXT);"
      },
      {
        "question": "When did the staff member with first name as Janessa and last name as Sawayn leave the company?",
        "query": "SELECT date_left_staff FROM staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\";",
        "schema": "CREATE TABLE Staff (date_left_staff TIME, last_name TEXT, first_name TEXT, staff_id NUMBER, middle_name TEXT, date_of_birth TIME, date_joined_staff TIME);"
      }
    ],
    [
      {
        "question": "How many unique nicknames are there for the staff?",
        "query": "SELECT count(*) FROM (SELECT DISTINCT nickname FROM staff)",
        "schema": "CREATE TABLE Lessons (staff_id NUMBER); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Staff (first_name TEXT, nickname TEXT, staff_id NUMBER, last_name TEXT);"
      },
      {
        "question": "What is the nickname of staff with first name as Janessa and last name as Sawayn?",
        "query": "SELECT nickname FROM staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\";",
        "schema": "CREATE TABLE Staff (nickname TEXT, last_name TEXT, first_name TEXT, staff_id NUMBER, staff_address_id NUMBER, middle_name TEXT); CREATE TABLE Lessons (staff_id NUMBER); CREATE TABLE Customers (customer_id NUMBER);"
      }
    ],
    [
      {
        "question": "Sort the cities in which the staff live in by alphabetical order.",
        "query": "SELECT t1.city FROM addresses AS t1 JOIN staff AS t2 ON t1.address_id = t2.staff_address_id ORDER BY t1.city",
        "schema": "CREATE TABLE Staff (staff_id NUMBER, staff_address_id NUMBER, last_name TEXT); CREATE TABLE Customers (customer_address_id NUMBER); CREATE TABLE Addresses (city TEXT, address_id NUMBER);"
      },
      {
        "question": "Which city does staff with first name as Janessa and last name as Sawayn live?",
        "query": "SELECT t1.city FROM addresses AS t1 JOIN staff AS t2 ON t1.address_id = t2.staff_address_id WHERE t2.first_name = \"Janessa\" AND t2.last_name = \"Sawayn\";",
        "schema": "CREATE TABLE Staff (first_name TEXT, staff_id NUMBER, last_name TEXT, staff_address_id NUMBER); CREATE TABLE Addresses (address_id NUMBER, city TEXT); CREATE TABLE Customers (customer_address_id NUMBER);"
      }
    ],
    [
      {
        "question": "Where do the staff live? Give first and last name and also country and state.",
        "query": "SELECT t2.first_name, t2.last_name, t1.country , t1.state_province_county FROM addresses AS t1 JOIN staff AS t2 ON t1.address_id = t2.staff_address_id",
        "schema": "CREATE TABLE Staff (last_name TEXT, staff_id NUMBER, staff_address_id NUMBER, first_name TEXT); CREATE TABLE Customers (first_name TEXT, customer_address_id NUMBER); CREATE TABLE Addresses (country TEXT, city TEXT, state_province_county TEXT, address_id NUMBER);"
      },
      {
        "question": "Narrow that to Janessa Sawayn.",
        "query": "SELECT t1.country , t1.state_province_county FROM addresses AS t1 JOIN staff AS t2 ON t1.address_id = t2.staff_address_id WHERE t2.first_name = \"Janessa\" AND t2.last_name = \"Sawayn\";",
        "schema": "CREATE TABLE Addresses (city TEXT, state_province_county TEXT, address_id NUMBER, country TEXT); CREATE TABLE Customers (first_name TEXT, customer_address_id NUMBER); CREATE TABLE Staff (middle_name TEXT, first_name TEXT, staff_id NUMBER, staff_address_id NUMBER, last_name TEXT);"
      }
    ],
    [
      {
        "question": "Which customer ids took lessons?",
        "query": "SELECT DISTINCT customer_id FROM lessons",
        "schema": "CREATE TABLE Customers (last_name TEXT, customer_id NUMBER, customer_address_id NUMBER, customer_status_code TEXT, first_name TEXT); CREATE TABLE Lessons (lesson_id NUMBER, customer_id NUMBER, lesson_status_code TEXT, lesson_time TEXT); CREATE TABLE Customer_Payments (payment_method_code TEXT, customer_id NUMBER);"
      },
      {
        "question": "Sum over the lesson time for those groups. Also count the number of lessons take.",
        "query": "SELECT customer_id, sum(lesson_time), count(*) FROM lessons GROUP BY customer_id",
        "schema": "CREATE TABLE Lessons (lesson_time TEXT, customer_id NUMBER, lesson_date TIME, lesson_id NUMBER, lesson_status_code TEXT); CREATE TABLE Customers (customer_address_id NUMBER, first_name TEXT, customer_id NUMBER, last_name TEXT, customer_status_code TEXT); CREATE TABLE Customer_Payments (payment_method_code TEXT, customer_id NUMBER);"
      },
      {
        "question": "What is the customer id of Rylan Goodwin?",
        "query": "SELECT customer_id FROM customers WHERE first_name = \"Rylan\" AND last_name = \"Goodwin\";",
        "schema": "CREATE TABLE Lessons (lesson_time TEXT, lesson_status_code TEXT, lesson_id NUMBER, customer_id NUMBER, lesson_date TIME); CREATE TABLE Customer_Payments (customer_id NUMBER, payment_method_code TEXT); CREATE TABLE Customers (first_name TEXT, last_name TEXT, customer_status_code TEXT, customer_id NUMBER, customer_address_id NUMBER); CREATE TABLE Staff (last_name TEXT, first_name TEXT, nickname TEXT);"
      },
      {
        "question": "How long is the total lesson time took by customer with first name as Rylan and last name as Goodwin?",
        "query": "SELECT sum(t1.lesson_time) FROM lessons AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id WHERE t2.first_name = \"Rylan\" AND t2.last_name = \"Goodwin\";",
        "schema": "CREATE TABLE Staff (first_name TEXT, nickname TEXT, last_name TEXT); CREATE TABLE Customers (customer_address_id NUMBER, last_name TEXT, customer_status_code TEXT, customer_id NUMBER, first_name TEXT); CREATE TABLE Lessons (customer_id NUMBER, lesson_status_code TEXT, lesson_id NUMBER, lesson_date TIME, lesson_time TEXT); CREATE TABLE Customer_Payments (customer_id NUMBER, payment_method_code TEXT);"
      }
    ],
    [
      {
        "question": "What is the address id of Janessa Sawayn?",
        "query": "SELECT staff_address_id FROM staff WHERE first_name = 'Janessa' AND last_name = 'Sawayn'",
        "schema": "CREATE TABLE Staff (first_name TEXT, middle_name TEXT, staff_id NUMBER, staff_address_id NUMBER, nickname TEXT, last_name TEXT, date_of_birth TIME); CREATE TABLE Customers (customer_address_id NUMBER, last_name TEXT, first_name TEXT, customer_id NUMBER); CREATE TABLE Addresses (address_id NUMBER, city TEXT);"
      },
      {
        "question": "For that address id, give teh zip code.",
        "query": "SELECT t1.zip_postcode FROM addresses AS t1 JOIN staff AS t2 ON t1.address_id = t2.staff_address_id WHERE t2.first_name = \"Janessa\" AND t2.last_name = \"Sawayn\";",
        "schema": "CREATE TABLE Addresses (address_id NUMBER, zip_postcode TEXT, city TEXT); CREATE TABLE Customers (last_name TEXT, first_name TEXT, customer_address_id NUMBER, customer_id NUMBER); CREATE TABLE Staff (middle_name TEXT, last_name TEXT, staff_address_id NUMBER, staff_id NUMBER, first_name TEXT, date_of_birth TIME, nickname TEXT);"
      }
    ],
    [
      {
        "question": "Which address ids correspond to the city Damianfort?",
        "query": "SELECT address_id FROM addresses WHERE city = 'Damianfort'",
        "schema": "CREATE TABLE Customers (customer_address_id NUMBER, customer_id NUMBER); CREATE TABLE Staff (staff_address_id NUMBER); CREATE TABLE Addresses (address_id NUMBER, city TEXT);"
      },
      {
        "question": "Join that with staff to find staff living there. Give first and last name.",
        "query": "SELECT t2.first_name , t2.last_name FROM addresses AS t1 JOIN staff AS t2 ON t1.address_id = t2.staff_address_id WHERE t1.city = \"Damianfort\";",
        "schema": "CREATE TABLE Staff (last_name TEXT, staff_id NUMBER, first_name TEXT, staff_address_id NUMBER); CREATE TABLE Customers (customer_id NUMBER, customer_address_id NUMBER); CREATE TABLE Addresses (city TEXT, address_id NUMBER);"
      }
    ],
    [
      {
        "question": "What is the most common address_id for staff?",
        "query": "SELECT staff_address_id FROM staff ORDER BY staff_address_id DESC LIMIT 1",
        "schema": "CREATE TABLE Addresses (city TEXT, address_id NUMBER); CREATE TABLE Staff (staff_id NUMBER, last_name TEXT, staff_address_id NUMBER); CREATE TABLE Customers (customer_address_id NUMBER);"
      },
      {
        "question": "List the corresponding city name and number of staff living there.",
        "query": "SELECT t1.city , count(*) FROM addresses AS t1 JOIN staff AS t2 ON t1.address_id = t2.staff_address_id GROUP BY t1.city ORDER BY count(*) DESC LIMIT 1;",
        "schema": "CREATE TABLE Customers (customer_address_id NUMBER); CREATE TABLE Staff (staff_id NUMBER, last_name TEXT, first_name TEXT, staff_address_id NUMBER); CREATE TABLE Addresses (city TEXT, address_id NUMBER);"
      }
    ],
    [
      {
        "question": "List the states and counts of staff living there.",
        "query": "SELECT t1.state_province_county, count(*) FROM addresses AS t1 JOIN staff AS t2 ON t1.address_id = t2.staff_address_id GROUP BY t2.staff_id",
        "schema": "CREATE TABLE Customers (customer_address_id NUMBER); CREATE TABLE Staff (middle_name TEXT, last_name TEXT, staff_id NUMBER, staff_address_id NUMBER, first_name TEXT); CREATE TABLE Addresses (state_province_county TEXT, address_id NUMBER, country TEXT, city TEXT);"
      },
      {
        "question": "List the states which have between 2 to 4 staff living there.",
        "query": "SELECT t1.state_province_county FROM addresses AS t1 JOIN staff AS t2 ON t1.address_id = t2.staff_address_id GROUP BY t1.state_province_county HAVING count(*) BETWEEN 2 AND 4;",
        "schema": "CREATE TABLE Staff (staff_address_id NUMBER, first_name TEXT, last_name TEXT, middle_name TEXT, staff_id NUMBER); CREATE TABLE Addresses (address_id NUMBER, country TEXT, state_province_county TEXT, city TEXT); CREATE TABLE Customers (customer_address_id NUMBER);"
      }
    ],
    [
      {
        "question": "Give records on the customer with last name Kohler.",
        "query": "SELECT * FROM customers WHERE last_name = 'Kohler'",
        "schema": "CREATE TABLE Lessons (customer_id NUMBER); CREATE TABLE Customers (last_name TEXT, customer_status_code TEXT, customer_id NUMBER, first_name TEXT);"
      },
      {
        "question": "Also show records for first name 'Marina'",
        "query": "SELECT * FROM customers WHERE last_name = 'Kohler' OR first_name = 'Marina'",
        "schema": "CREATE TABLE Lessons (customer_id NUMBER); CREATE TABLE Customers (customer_status_code TEXT, customer_id NUMBER, last_name TEXT, first_name TEXT);"
      },
      {
        "question": "Just show the status code, mobile phone number and email address for the above.",
        "query": "SELECT customer_status_code , cell_mobile_phone_number , email_address FROM customers WHERE first_name = \"Marina\" OR last_name = \"Kohler\"",
        "schema": "CREATE TABLE Lessons (customer_id NUMBER, lesson_status_code TEXT); CREATE TABLE Customers (first_name TEXT, phone_number TEXT, customer_status_code TEXT, customer_address_id NUMBER, customer_id NUMBER, last_name TEXT, email_address TEXT, cell_mobile_phone_number TEXT); CREATE TABLE Addresses (address_id NUMBER);"
      }
    ],
    [
      {
        "question": "List the names and date became customer for the customers.",
        "query": "SELECT first_name, last_name, date_became_customer FROM customers",
        "schema": "CREATE TABLE Customers (date_of_birth TIME, last_name TEXT, customer_id NUMBER, date_became_customer TIME, first_name TEXT); CREATE TABLE Lessons (lesson_date TIME);"
      },
      {
        "question": "Limit that to Carole Bernhard, and just show the relevant date.",
        "query": "SELECT date_became_customer FROM customers WHERE first_name = \"Carole\" AND last_name = \"Bernhard\";",
        "schema": "CREATE TABLE Customers (last_name TEXT, customer_id NUMBER, date_of_birth TIME, date_became_customer TIME, first_name TEXT); CREATE TABLE Lessons (lesson_date TIME);"
      }
    ],
    [
      {
        "question": "List the customer status code with their respective counts.",
        "query": "SELECT customer_status_code, count(*) FROM customers GROUP BY customer_status_code",
        "schema": "CREATE TABLE Lessons (lesson_status_code TEXT); CREATE TABLE Customers (customer_id NUMBER, customer_status_code TEXT, first_name TEXT, last_name TEXT);"
      },
      {
        "question": "Sort by ascending counts.",
        "query": "SELECT customer_status_code, count(*) FROM customers GROUP BY customer_status_code ORDER BY count(*) ASC",
        "schema": "CREATE TABLE Customers (customer_status_code TEXT, first_name TEXT, customer_id NUMBER, last_name TEXT); CREATE TABLE Lessons (lesson_status_code TEXT);"
      },
      {
        "question": "Which customer status code has least number of customers?",
        "query": "SELECT customer_status_code FROM customers GROUP BY customer_status_code ORDER BY count(*) ASC LIMIT 1;",
        "schema": "CREATE TABLE Lessons (lesson_status_code TEXT); CREATE TABLE Customers (last_name TEXT, first_name TEXT, customer_status_code TEXT, customer_id NUMBER);"
      }
    ],
    [
      {
        "question": "List the lessons taken by each customer first and last name.",
        "query": "SELECT t2.first_name, t2.last_name, count(*) FROM lessons AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id GROUP BY t2.customer_id",
        "schema": "CREATE TABLE Customers (customer_id NUMBER, last_name TEXT, customer_status_code TEXT, first_name TEXT); CREATE TABLE Customer_Payments (customer_id NUMBER); CREATE TABLE Lessons (lesson_status_code TEXT, customer_id NUMBER, lesson_id NUMBER);"
      },
      {
        "question": "Just show that information for the completed status lessons.",
        "query": "SELECT t2.first_name, t2.last_name, count(*) FROM lessons AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id GROUP BY t2.customer_id WHERE t1.lesson_status_code = 'Completed'",
        "schema": "CREATE TABLE Lessons (lesson_id NUMBER, lesson_status_code TEXT, customer_id NUMBER); CREATE TABLE Customer_Payments (customer_id NUMBER); CREATE TABLE Customers (customer_status_code TEXT, first_name TEXT, customer_id NUMBER, last_name TEXT);"
      },
      {
        "question": "How many lessons taken by customer with first name as Rylan and last name as Goodwin were completed?",
        "query": "SELECT count(*) FROM lessons AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id WHERE t2.first_name = \"Rylan\" AND t2.last_name = \"Goodwin\" AND t1.lesson_status_code = \"Completed\";",
        "schema": "CREATE TABLE Customer_Payments (customer_id NUMBER); CREATE TABLE Lessons (lesson_id NUMBER, lesson_status_code TEXT, customer_id NUMBER); CREATE TABLE Customers (customer_id NUMBER, customer_status_code TEXT, first_name TEXT, last_name TEXT);"
      }
    ],
    [
      {
        "question": "List names of customers with their amount outstanding.",
        "query": "SELECT first_name, last_name, amount_outstanding FROM customers",
        "schema": "CREATE TABLE Customers (customer_id NUMBER, last_name TEXT, amount_outstanding NUMBER, first_name TEXT, customer_status_code TEXT); CREATE TABLE Customer_Payments (customer_id NUMBER);"
      },
      {
        "question": "What is maximum, minimum and average amount of outstanding of customer?",
        "query": "SELECT max(amount_outstanding) , min(amount_outstanding) , avg(amount_outstanding) FROM customers;",
        "schema": "CREATE TABLE Customer_Payments (customer_id NUMBER); CREATE TABLE Customers (amount_outstanding NUMBER, customer_status_code TEXT, first_name TEXT, customer_id NUMBER, last_name TEXT);"
      }
    ],
    [
      {
        "question": "List records of customers living in city Lockmanfurt.",
        "query": "SELECT FROM customers AS t1 JOIN addresses AS t2 ON t1.customer_address_id = t2.address_id WHERE t2.city = \"Lockmanfurt\";",
        "schema": "CREATE TABLE Staff (staff_address_id NUMBER); CREATE TABLE Customers (customer_status_code TEXT, customer_id NUMBER, customer_address_id NUMBER, first_name TEXT, last_name TEXT); CREATE TABLE Addresses (state_province_county TEXT, city TEXT, address_id NUMBER);"
      },
      {
        "question": "Just show the first and last name.",
        "query": "SELECT t1.first_name , t1.last_name FROM customers AS t1 JOIN addresses AS t2 ON t1.customer_address_id = t2.address_id WHERE t2.city = \"Lockmanfurt\";",
        "schema": "CREATE TABLE Addresses (address_id NUMBER, state_province_county TEXT, city TEXT); CREATE TABLE Customers (last_name TEXT, first_name TEXT, customer_address_id NUMBER, customer_id NUMBER, customer_status_code TEXT); CREATE TABLE Staff (first_name TEXT, staff_address_id NUMBER);"
      }
    ],
    [
      {
        "question": "Join customer names with their lived-in countries.",
        "query": "SELECT t1.first_name, t1.last_name, t2.country FROM customers AS t1 JOIN addresses AS t2 ON t1.customer_address_id = t2.address_id",
        "schema": "CREATE TABLE Addresses (country TEXT, city TEXT, state_province_county TEXT, address_id NUMBER); CREATE TABLE Customers (customer_address_id NUMBER, first_name TEXT, customer_id NUMBER, last_name TEXT);"
      },
      {
        "question": "Which country does customer with first name as Carole and last name as Bernhard live in?",
        "query": "SELECT t2.country FROM customers AS t1 JOIN addresses AS t2 ON t1.customer_address_id = t2.address_id WHERE t1.first_name = \"Carole\" AND t1.last_name = \"Bernhard\"",
        "schema": "CREATE TABLE Customers (last_name TEXT, customer_address_id NUMBER, first_name TEXT, customer_id NUMBER); CREATE TABLE Addresses (address_id NUMBER, state_province_county TEXT, city TEXT, country TEXT);"
      }
    ],
    [
      {
        "question": "What are the customers zip codes?",
        "query": "SELECT t1.first_name, t1.last_name, t2.zip_postcode FROM customers AS t1 JOIN addresses AS t2 ON t1.customer_address_id = t2.address_id",
        "schema": "CREATE TABLE Customers (customer_status_code TEXT, last_name TEXT, customer_address_id NUMBER, first_name TEXT, phone_number TEXT, customer_id NUMBER); CREATE TABLE Addresses (zip_postcode TEXT, city TEXT, state_province_county TEXT, address_id NUMBER); CREATE TABLE Lessons (customer_id NUMBER);"
      },
      {
        "question": "What is zip code of customer with first name as Carole and last name as Bernhard?",
        "query": "SELECT t2.zip_postcode FROM customers AS t1 JOIN addresses AS t2 ON t1.customer_address_id = t2.address_id WHERE t1.first_name = \"Carole\" AND t1.last_name = \"Bernhard\"",
        "schema": "CREATE TABLE Lessons (customer_id NUMBER); CREATE TABLE Customers (first_name TEXT, customer_address_id NUMBER, phone_number TEXT, customer_status_code TEXT, customer_id NUMBER, last_name TEXT); CREATE TABLE Addresses (city TEXT, zip_postcode TEXT, address_id NUMBER, state_province_county TEXT);"
      }
    ],
    [
      {
        "question": "Give counts of cities customers live in.",
        "query": "SELECT t2.city, count(*) FROM customers AS t1 JOIN addresses AS t2 ON t1.customer_address_id = t2.address_id GROUP BY t2.city",
        "schema": "CREATE TABLE Customers (first_name TEXT, customer_address_id NUMBER, last_name TEXT, customer_id NUMBER); CREATE TABLE Addresses (address_id NUMBER, city TEXT);"
      },
      {
        "question": "Which city has most number of customers?",
        "query": "SELECT t2.city FROM customers AS t1 JOIN addresses AS t2 ON t1.customer_address_id = t2.address_id GROUP BY t2.city ORDER BY count(*) DESC LIMIT 1;",
        "schema": "CREATE TABLE Addresses (address_id NUMBER, city TEXT); CREATE TABLE Customers (customer_address_id NUMBER, last_name TEXT, first_name TEXT, customer_id NUMBER);"
      }
    ],
    [
      {
        "question": "List a sum of all the payments for all the customers.",
        "query": "SELECT t2.first_name, t2.last_name, sum(t1.amount_payment) FROM customer_payments AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id GROUP BY t2.customer_id",
        "schema": "CREATE TABLE Customers (first_name TEXT, customer_id NUMBER, last_name TEXT); CREATE TABLE Customer_Payments (payment_method_code TEXT, amount_payment NUMBER, customer_id NUMBER);"
      },
      {
        "question": "How much in total has customer with first name as Carole and last name as Bernhard paid?",
        "query": "SELECT sum(t1.amount_payment) FROM customer_payments AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id WHERE t2.first_name = \"Carole\" AND t2.last_name = \"Bernhard\"",
        "schema": "CREATE TABLE Customers (last_name TEXT, first_name TEXT, customer_id NUMBER); CREATE TABLE Customer_Payments (payment_method_code TEXT, customer_id NUMBER, amount_payment NUMBER);"
      }
    ],
    [
      {
        "question": "Which customer ids have no payment history?",
        "query": "SELECT customer_id FROM customers EXCEPT SELECT customer_id FROM customer_payments",
        "schema": "CREATE TABLE Lessons (customer_id NUMBER); CREATE TABLE Customer_Payments (customer_id NUMBER, payment_method_code TEXT); CREATE TABLE Customers (customer_status_code TEXT, customer_address_id NUMBER, customer_id NUMBER, last_name TEXT, first_name TEXT);"
      },
      {
        "question": "Count those.",
        "query": "SELECT count(*) FROM customers WHERE customer_id NOT IN ( SELECT customer_id FROM customer_payments );",
        "schema": "CREATE TABLE Customers (customer_address_id NUMBER, customer_status_code TEXT, customer_id NUMBER, first_name TEXT, last_name TEXT); CREATE TABLE Lessons (customer_id NUMBER); CREATE TABLE Customer_Payments (payment_method_code TEXT, customer_id NUMBER, amount_payment NUMBER);"
      }
    ],
    [
      {
        "question": "Count the payments per customer.",
        "query": "SELECT t2.first_name, t2.last_name, count(t1.amount_payment) FROM customer_payments AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id GROUP BY t2.customer_id",
        "schema": "CREATE TABLE Customer_Payments (payment_method_code TEXT, amount_payment NUMBER, customer_id NUMBER); CREATE TABLE Customers (first_name TEXT, last_name TEXT, customer_id NUMBER, customer_status_code TEXT); CREATE TABLE Lessons (customer_id NUMBER);"
      },
      {
        "question": "Just for those with more than 2 payments.",
        "query": "SELECT t2.first_name , t2.last_name FROM customer_payments AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id GROUP BY t1.customer_id HAVING count(*) > 2;",
        "schema": "CREATE TABLE Lessons (customer_id NUMBER); CREATE TABLE Customer_Payments (customer_id NUMBER, payment_method_code TEXT, amount_payment NUMBER); CREATE TABLE Customers (first_name TEXT, customer_id NUMBER, last_name TEXT, customer_status_code TEXT);"
      }
    ],
    [
      {
        "question": "List lesson id of all lessons taught by staff with first name as Janessa",
        "query": "SELECT t1.lesson_id FROM lessons AS t1 JOIN staff AS t2 ON t1.staff_id = t2.staff_id WHERE t2.first_name = \"Janessa\"",
        "schema": "CREATE TABLE Lessons (staff_id NUMBER, customer_id NUMBER, lesson_id NUMBER, lesson_status_code TEXT); CREATE TABLE Staff (first_name TEXT, nickname TEXT, last_name TEXT, staff_id NUMBER); CREATE TABLE Customers (customer_id NUMBER, first_name TEXT);"
      },
      {
        "question": "Intersect that with last name Sawayn and nickname containing letter 's'.",
        "query": "SELECT t1.lesson_id FROM lessons AS t1 JOIN staff AS t2 ON t1.staff_id = t2.staff_id WHERE t2.first_name = \"Janessa\" AND t2.last_name = \"Sawayn\" AND nickname LIKE \"%s%\";",
        "schema": "CREATE TABLE Customers (first_name TEXT, customer_id NUMBER); CREATE TABLE Lessons (lesson_id NUMBER, customer_id NUMBER, lesson_status_code TEXT, staff_id NUMBER); CREATE TABLE Staff (staff_address_id NUMBER, staff_id NUMBER, first_name TEXT, last_name TEXT, nickname TEXT);"
      }
    ],
    [
      {
        "question": "Count the lessons grouped by staff first name.",
        "query": "SELECT t2.first_name, count(*) FROM lessons AS t1 JOIN staff AS t2 ON t1.staff_id = t2.staff_id GROUP BY t2.first_name",
        "schema": "CREATE TABLE Staff (first_name TEXT, nickname TEXT, last_name TEXT, staff_id NUMBER, middle_name TEXT); CREATE TABLE Lessons (staff_id NUMBER, lesson_status_code TEXT, lesson_id NUMBER);"
      },
      {
        "question": "How many lessons taught by staff whose first name has letter 'a' in it?",
        "query": "SELECT count(*) FROM lessons AS t1 JOIN staff AS t2 ON t1.staff_id = t2.staff_id WHERE t2.first_name LIKE \"%a%\"",
        "schema": "CREATE TABLE Lessons (lesson_id NUMBER, lesson_status_code TEXT, staff_id NUMBER); CREATE TABLE Staff (staff_id NUMBER, nickname TEXT, first_name TEXT, middle_name TEXT, last_name TEXT);"
      }
    ],
    [
      {
        "question": "Count the lesson time grouped by staff id.",
        "query": "SELECT t2.staff_id, sum(lesson_time) FROM lessons AS t1 JOIN staff AS t2 ON t1.staff_id = t2.staff_id GROUP BY t2.staff_id",
        "schema": "CREATE TABLE Staff (staff_id NUMBER, last_name TEXT); CREATE TABLE Lessons (lesson_time TEXT, staff_id NUMBER, lesson_id NUMBER, lesson_date TIME, lesson_status_code TEXT);"
      },
      {
        "question": "Join that sum on the staff with first name Janess and last name Sawayn.",
        "query": "SELECT sum(lesson_time) FROM lessons AS t1 JOIN staff AS t2 ON t1.staff_id = t2.staff_id WHERE t2.first_name = \"Janessa\" AND t2.last_name = \"Sawayn\";",
        "schema": "CREATE TABLE Staff (middle_name TEXT, last_name TEXT, staff_id NUMBER, first_name TEXT); CREATE TABLE Lessons (lesson_status_code TEXT, staff_id NUMBER, lesson_date TIME, lesson_time TEXT, lesson_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show the sum of lesson prices per staff.",
        "query": "SELECT t2.first_name, t2.last_name, sum(t1.price) FROM lessons AS t1 JOIN staff AS t2 ON t1.staff_id = t2.staff_id GROUP BY t2.staff_id",
        "schema": "CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Staff (middle_name TEXT, staff_id NUMBER, first_name TEXT, last_name TEXT); CREATE TABLE Lessons (staff_id NUMBER, price NUMBER, lesson_id NUMBER);"
      },
      {
        "question": "Give the average.",
        "query": "SELECT t2.first_name, t2.last_name, avg(t1.price) FROM lessons AS t1 JOIN staff AS t2 ON t1.staff_id = t2.staff_id GROUP BY t2.staff_id",
        "schema": "CREATE TABLE Lessons (price NUMBER, lesson_id NUMBER, staff_id NUMBER); CREATE TABLE Staff (staff_id NUMBER, last_name TEXT, middle_name TEXT, first_name TEXT); CREATE TABLE Customers (customer_id NUMBER);"
      },
      {
        "question": "Just for first name as Janessa and last name as Sawayn?",
        "query": "SELECT avg(price) FROM lessons AS t1 JOIN staff AS t2 ON t1.staff_id = t2.staff_id WHERE t2.first_name = \"Janessa\" AND t2.last_name = \"Sawayn\";",
        "schema": "CREATE TABLE Lessons (lesson_id NUMBER, staff_id NUMBER, price NUMBER); CREATE TABLE Staff (staff_id NUMBER, first_name TEXT, last_name TEXT, middle_name TEXT); CREATE TABLE Customers (customer_id NUMBER);"
      }
    ],
    [
      {
        "question": "count the lessons taken per customer first name.",
        "query": "SELECT t2.first_name, count(*) FROM lessons AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id GROUP BY t2.first_name",
        "schema": "CREATE TABLE Customers (last_name TEXT, first_name TEXT, customer_id NUMBER); CREATE TABLE Lessons (customer_id NUMBER, lesson_status_code TEXT, lesson_id NUMBER, lesson_time TEXT); CREATE TABLE Staff (first_name TEXT, last_name TEXT); CREATE TABLE Customer_Payments (customer_id NUMBER);"
      },
      {
        "question": "How many lessons did customer with first name Ray take?",
        "query": "SELECT count(*) FROM lessons AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id WHERE t2.first_name = \"Ray\"",
        "schema": "CREATE TABLE Customer_Payments (customer_id NUMBER); CREATE TABLE Staff (last_name TEXT, first_name TEXT); CREATE TABLE Lessons (lesson_status_code TEXT, customer_id NUMBER, lesson_id NUMBER, lesson_time TEXT); CREATE TABLE Customers (last_name TEXT, customer_id NUMBER, first_name TEXT);"
      }
    ],
    [
      {
        "question": "What are the distinct last names of staff?",
        "query": "SELECT DISTINCT last_name FROM staff",
        "schema": "CREATE TABLE Customers (last_name TEXT); CREATE TABLE Staff (first_name TEXT, staff_id NUMBER, last_name TEXT);"
      },
      {
        "question": "Of customers?",
        "query": "SELECT DISTINCT last_name FROM customers",
        "schema": "CREATE TABLE Staff (first_name TEXT, last_name TEXT, staff_id NUMBER, nickname TEXT); CREATE TABLE Customers (customer_address_id NUMBER, customer_status_code TEXT, last_name TEXT, customer_id NUMBER, first_name TEXT); CREATE TABLE Lessons (customer_id NUMBER);"
      },
      {
        "question": "Intersect that.",
        "query": "SELECT last_name FROM customers INTERSECT SELECT last_name FROM staff",
        "schema": "CREATE TABLE Staff (first_name TEXT, staff_id NUMBER, nickname TEXT, last_name TEXT); CREATE TABLE Customers (customer_address_id NUMBER, last_name TEXT, customer_id NUMBER, customer_status_code TEXT, first_name TEXT); CREATE TABLE Lessons (customer_id NUMBER);"
      }
    ],
    [
      {
        "question": "Which staff gave lessons? Give their first names.",
        "query": "SELECT DISTINCT t2.first_name FROM lessons AS t1 JOIN staff AS t2 ON t1.staff_id = t2.staff_id",
        "schema": "CREATE TABLE Customers (customer_id NUMBER, first_name TEXT, last_name TEXT); CREATE TABLE Staff (last_name TEXT, staff_id NUMBER, middle_name TEXT, nickname TEXT, first_name TEXT); CREATE TABLE Lessons (staff_id NUMBER, lesson_id NUMBER, customer_id NUMBER, lesson_status_code TEXT);"
      },
      {
        "question": "Which staff first names did not?",
        "query": "SELECT first_name FROM staff EXCEPT SELECT t2.first_name FROM lessons AS t1 JOIN staff AS t2 ON t1.staff_id = t2.staff_id",
        "schema": "CREATE TABLE Lessons (lesson_status_code TEXT, customer_id NUMBER, staff_id NUMBER, lesson_id NUMBER); CREATE TABLE Staff (last_name TEXT, middle_name TEXT, first_name TEXT, staff_id NUMBER, nickname TEXT); CREATE TABLE Customers (last_name TEXT, first_name TEXT, customer_id NUMBER);"
      }
    ],
    [
      {
        "question": "List the distinct vehicle ids used in lessons.",
        "query": "SELECT DISTINCT vehicle_id FROM lessons",
        "schema": "CREATE TABLE Lessons (customer_id NUMBER, lesson_id NUMBER, vehicle_id NUMBER); CREATE TABLE Vehicles (vehicle_details TEXT, vehicle_id NUMBER); CREATE TABLE Customers (customer_id NUMBER);"
      },
      {
        "question": "For those, give the detail as well.",
        "query": "SELECT t1.vehicle_id , t1.vehicle_details FROM vehicles AS t1 JOIN lessons AS t2 ON t1.vehicle_id = t2.vehicle_id GROUP BY t1.vehicle_id",
        "schema": "CREATE TABLE Lessons (lesson_id NUMBER, customer_id NUMBER, vehicle_id NUMBER); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Vehicles (vehicle_details TEXT, vehicle_id NUMBER);"
      },
      {
        "question": "What is the id and detail of the vehicle used in lessons for most of the times?",
        "query": "SELECT t1.vehicle_id , t1.vehicle_details FROM vehicles AS t1 JOIN lessons AS t2 ON t1.vehicle_id = t2.vehicle_id GROUP BY t1.vehicle_id ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Vehicles (vehicle_details TEXT, vehicle_id NUMBER); CREATE TABLE Lessons (lesson_time TEXT, customer_id NUMBER, lesson_id NUMBER, vehicle_id NUMBER, lesson_date TIME);"
      }
    ],
    [
      {
        "question": "Give the first and last names of the staff.",
        "query": "SELECT first_name, last_name FROM staff",
        "schema": "CREATE TABLE Customers (first_name TEXT, last_name TEXT); CREATE TABLE Staff (staff_id NUMBER, last_name TEXT, first_name TEXT, nickname TEXT, middle_name TEXT);"
      },
      {
        "question": "Also list the date of birth.",
        "query": "SELECT first_name, last_name, date_of_birth FROM staff",
        "schema": "CREATE TABLE Customers (first_name TEXT, last_name TEXT); CREATE TABLE Staff (last_name TEXT, staff_id NUMBER, date_of_birth TIME, middle_name TEXT, nickname TEXT, first_name TEXT);"
      },
      {
        "question": "What is the birthday of the staff member with first name as Janessa and last name as Sawayn?",
        "query": "SELECT date_of_birth FROM staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\";",
        "schema": "CREATE TABLE Staff (date_of_birth TIME, middle_name TEXT, nickname TEXT, staff_id NUMBER, first_name TEXT, last_name TEXT); CREATE TABLE Customers (last_name TEXT, first_name TEXT);"
      }
    ],
    [
      {
        "question": "When did various staff join?",
        "query": "SELECT first_name, last_name, date_joined_staff FROM staff",
        "schema": "CREATE TABLE Staff (middle_name TEXT, date_of_birth TIME, date_left_staff TIME, date_joined_staff TIME, staff_id NUMBER, last_name TEXT, first_name TEXT); CREATE TABLE Lessons (staff_id NUMBER);"
      },
      {
        "question": "When did the staff member with first name as Janessa and last name as Sawayn join the company?",
        "query": "SELECT date_joined_staff FROM staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\";",
        "schema": "CREATE TABLE Staff (last_name TEXT, date_of_birth TIME, first_name TEXT, date_left_staff TIME, middle_name TEXT, date_joined_staff TIME, staff_id NUMBER); CREATE TABLE Lessons (staff_id NUMBER);"
      }
    ],
    [
      {
        "question": "What was the most recent leaving of the company for any staff member?",
        "query": "SELECT max(date_left_staff) FROM staff",
        "schema": "CREATE TABLE Staff (staff_id NUMBER, date_of_birth TIME, date_joined_staff TIME, date_left_staff TIME, last_name TEXT, first_name TEXT);"
      },
      {
        "question": "When did the staff member with first name as Janessa and last name as Sawayn leave the company?",
        "query": "SELECT date_left_staff FROM staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\";",
        "schema": "CREATE TABLE Staff (staff_id NUMBER, date_left_staff TIME, middle_name TEXT, date_of_birth TIME, first_name TEXT, last_name TEXT, date_joined_staff TIME);"
      }
    ],
    [
      {
        "question": "How many unique nicknames are there for the staff?",
        "query": "SELECT count(*) FROM (SELECT DISTINCT nickname FROM staff)",
        "schema": "CREATE TABLE Staff (staff_id NUMBER, first_name TEXT, nickname TEXT, last_name TEXT); CREATE TABLE Lessons (lesson_id NUMBER, staff_id NUMBER); CREATE TABLE Customers (customer_id NUMBER);"
      },
      {
        "question": "What is the nickname of staff with first name as Janessa and last name as Sawayn?",
        "query": "SELECT nickname FROM staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\";",
        "schema": "CREATE TABLE Lessons (lesson_id NUMBER, staff_id NUMBER); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Staff (middle_name TEXT, staff_id NUMBER, staff_address_id NUMBER, first_name TEXT, last_name TEXT, nickname TEXT);"
      }
    ],
    [
      {
        "question": "Sort the cities in which the staff live in by alphabetical order.",
        "query": "SELECT t1.city FROM addresses AS t1 JOIN staff AS t2 ON t1.address_id = t2.staff_address_id ORDER BY t1.city",
        "schema": "CREATE TABLE Customers (customer_address_id NUMBER); CREATE TABLE Staff (last_name TEXT, staff_address_id NUMBER, staff_id NUMBER); CREATE TABLE Addresses (city TEXT, address_id NUMBER);"
      },
      {
        "question": "Which city does staff with first name as Janessa and last name as Sawayn live?",
        "query": "SELECT t1.city FROM addresses AS t1 JOIN staff AS t2 ON t1.address_id = t2.staff_address_id WHERE t2.first_name = \"Janessa\" AND t2.last_name = \"Sawayn\";",
        "schema": "CREATE TABLE Staff (first_name TEXT, staff_id NUMBER, staff_address_id NUMBER, last_name TEXT); CREATE TABLE Addresses (address_id NUMBER, city TEXT); CREATE TABLE Customers (customer_address_id NUMBER);"
      }
    ],
    [
      {
        "question": "Where do the staff live? Give first and last name and also country and state.",
        "query": "SELECT t2.first_name, t2.last_name, t1.country , t1.state_province_county FROM addresses AS t1 JOIN staff AS t2 ON t1.address_id = t2.staff_address_id",
        "schema": "CREATE TABLE Staff (staff_id NUMBER, last_name TEXT, staff_address_id NUMBER, first_name TEXT); CREATE TABLE Addresses (state_province_county TEXT, address_id NUMBER, country TEXT, city TEXT); CREATE TABLE Customers (customer_address_id NUMBER, first_name TEXT);"
      },
      {
        "question": "Narrow that to Janessa Sawayn.",
        "query": "SELECT t1.country , t1.state_province_county FROM addresses AS t1 JOIN staff AS t2 ON t1.address_id = t2.staff_address_id WHERE t2.first_name = \"Janessa\" AND t2.last_name = \"Sawayn\";",
        "schema": "CREATE TABLE Staff (middle_name TEXT, last_name TEXT, first_name TEXT, staff_id NUMBER, staff_address_id NUMBER); CREATE TABLE Customers (first_name TEXT, customer_address_id NUMBER); CREATE TABLE Addresses (country TEXT, state_province_county TEXT, city TEXT, address_id NUMBER);"
      }
    ],
    [
      {
        "question": "Which customer ids took lessons?",
        "query": "SELECT DISTINCT customer_id FROM lessons",
        "schema": "CREATE TABLE Lessons (lesson_id NUMBER, lesson_time TEXT, lesson_status_code TEXT, customer_id NUMBER); CREATE TABLE Customer_Payments (customer_id NUMBER, payment_method_code TEXT); CREATE TABLE Customers (customer_status_code TEXT, customer_id NUMBER, first_name TEXT, customer_address_id NUMBER, last_name TEXT);"
      },
      {
        "question": "Sum over the lesson time for those groups. Also count the number of lessons take.",
        "query": "SELECT customer_id, sum(lesson_time), count(*) FROM lessons GROUP BY customer_id",
        "schema": "CREATE TABLE Lessons (lesson_status_code TEXT, lesson_date TIME, lesson_time TEXT, lesson_id NUMBER, customer_id NUMBER); CREATE TABLE Customers (last_name TEXT, first_name TEXT, customer_id NUMBER, customer_status_code TEXT, customer_address_id NUMBER); CREATE TABLE Customer_Payments (payment_method_code TEXT, customer_id NUMBER);"
      },
      {
        "question": "What is the customer id of Rylan Goodwin?",
        "query": "SELECT customer_id FROM customers WHERE first_name = \"Rylan\" AND last_name = \"Goodwin\";",
        "schema": "CREATE TABLE Customer_Payments (payment_method_code TEXT, customer_id NUMBER); CREATE TABLE Staff (nickname TEXT, last_name TEXT, first_name TEXT); CREATE TABLE Lessons (customer_id NUMBER, lesson_time TEXT, lesson_date TIME, lesson_id NUMBER, lesson_status_code TEXT); CREATE TABLE Customers (customer_address_id NUMBER, last_name TEXT, customer_status_code TEXT, customer_id NUMBER, first_name TEXT);"
      },
      {
        "question": "How long is the total lesson time took by customer with first name as Rylan and last name as Goodwin?",
        "query": "SELECT sum(t1.lesson_time) FROM lessons AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id WHERE t2.first_name = \"Rylan\" AND t2.last_name = \"Goodwin\";",
        "schema": "CREATE TABLE Lessons (lesson_time TEXT, lesson_date TIME, customer_id NUMBER, lesson_status_code TEXT, lesson_id NUMBER); CREATE TABLE Staff (nickname TEXT, first_name TEXT, last_name TEXT); CREATE TABLE Customer_Payments (payment_method_code TEXT, customer_id NUMBER); CREATE TABLE Customers (customer_id NUMBER, first_name TEXT, customer_status_code TEXT, last_name TEXT, customer_address_id NUMBER);"
      }
    ],
    [
      {
        "question": "What is the address id of Janessa Sawayn?",
        "query": "SELECT staff_address_id FROM staff WHERE first_name = 'Janessa' AND last_name = 'Sawayn'",
        "schema": "CREATE TABLE Customers (last_name TEXT, first_name TEXT, customer_id NUMBER, customer_address_id NUMBER); CREATE TABLE Addresses (city TEXT, address_id NUMBER); CREATE TABLE Staff (middle_name TEXT, staff_id NUMBER, nickname TEXT, first_name TEXT, staff_address_id NUMBER, last_name TEXT);"
      },
      {
        "question": "For that address id, give teh zip code.",
        "query": "SELECT t1.zip_postcode FROM addresses AS t1 JOIN staff AS t2 ON t1.address_id = t2.staff_address_id WHERE t2.first_name = \"Janessa\" AND t2.last_name = \"Sawayn\";",
        "schema": "CREATE TABLE Staff (staff_id NUMBER, last_name TEXT, staff_address_id NUMBER, nickname TEXT, middle_name TEXT, first_name TEXT); CREATE TABLE Customers (first_name TEXT, last_name TEXT, customer_id NUMBER, customer_address_id NUMBER); CREATE TABLE Addresses (zip_postcode TEXT, address_id NUMBER, city TEXT);"
      }
    ],
    [
      {
        "question": "Which address ids correspond to the city Damianfort?",
        "query": "SELECT address_id FROM addresses WHERE city = 'Damianfort'",
        "schema": "CREATE TABLE Staff (staff_address_id NUMBER); CREATE TABLE Addresses (city TEXT, address_id NUMBER); CREATE TABLE Customers (customer_address_id NUMBER);"
      },
      {
        "question": "Join that with staff to find staff living there. Give first and last name.",
        "query": "SELECT t2.first_name , t2.last_name FROM addresses AS t1 JOIN staff AS t2 ON t1.address_id = t2.staff_address_id WHERE t1.city = \"Damianfort\";",
        "schema": "CREATE TABLE Customers (customer_address_id NUMBER); CREATE TABLE Staff (staff_id NUMBER, first_name TEXT, last_name TEXT, staff_address_id NUMBER); CREATE TABLE Addresses (address_id NUMBER, city TEXT);"
      }
    ],
    [
      {
        "question": "What is the most common address_id for staff?",
        "query": "SELECT staff_address_id FROM staff ORDER BY staff_address_id DESC LIMIT 1",
        "schema": "CREATE TABLE Addresses (city TEXT, address_id NUMBER); CREATE TABLE Staff (staff_id NUMBER, last_name TEXT, staff_address_id NUMBER); CREATE TABLE Customers (customer_address_id NUMBER);"
      },
      {
        "question": "List the corresponding city name and number of staff living there.",
        "query": "SELECT t1.city , count(*) FROM addresses AS t1 JOIN staff AS t2 ON t1.address_id = t2.staff_address_id GROUP BY t1.city ORDER BY count(*) DESC LIMIT 1;",
        "schema": "CREATE TABLE Staff (last_name TEXT, staff_id NUMBER, staff_address_id NUMBER, first_name TEXT); CREATE TABLE Customers (customer_address_id NUMBER); CREATE TABLE Addresses (address_id NUMBER, city TEXT);"
      }
    ],
    [
      {
        "question": "List the states and counts of staff living there.",
        "query": "SELECT t1.state_province_county, count(*) FROM addresses AS t1 JOIN staff AS t2 ON t1.address_id = t2.staff_address_id GROUP BY t2.staff_id",
        "schema": "CREATE TABLE Customers (customer_address_id NUMBER); CREATE TABLE Staff (staff_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, staff_address_id NUMBER); CREATE TABLE Addresses (country TEXT, city TEXT, state_province_county TEXT, address_id NUMBER);"
      },
      {
        "question": "List the states which have between 2 to 4 staff living there.",
        "query": "SELECT t1.state_province_county FROM addresses AS t1 JOIN staff AS t2 ON t1.address_id = t2.staff_address_id GROUP BY t1.state_province_county HAVING count(*) BETWEEN 2 AND 4;",
        "schema": "CREATE TABLE Customers (customer_address_id NUMBER); CREATE TABLE Addresses (address_id NUMBER, state_province_county TEXT, city TEXT, country TEXT); CREATE TABLE Staff (last_name TEXT, staff_id NUMBER, first_name TEXT, middle_name TEXT, staff_address_id NUMBER);"
      }
    ],
    [
      {
        "question": "Give records on the customer with last name Kohler.",
        "query": "SELECT * FROM customers WHERE last_name = 'Kohler'",
        "schema": "CREATE TABLE Customers (customer_status_code TEXT, customer_id NUMBER, last_name TEXT, first_name TEXT); CREATE TABLE Lessons (customer_id NUMBER);"
      },
      {
        "question": "Also show records for first name 'Marina'",
        "query": "SELECT * FROM customers WHERE last_name = 'Kohler' OR first_name = 'Marina'",
        "schema": "CREATE TABLE Customers (customer_status_code TEXT, customer_id NUMBER, first_name TEXT, last_name TEXT); CREATE TABLE Lessons (customer_id NUMBER);"
      },
      {
        "question": "Just show the status code, mobile phone number and email address for the above.",
        "query": "SELECT customer_status_code , cell_mobile_phone_number , email_address FROM customers WHERE first_name = \"Marina\" OR last_name = \"Kohler\"",
        "schema": "CREATE TABLE Addresses (address_id NUMBER); CREATE TABLE Lessons (customer_id NUMBER, lesson_status_code TEXT); CREATE TABLE Customers (phone_number TEXT, customer_address_id NUMBER, last_name TEXT, customer_id NUMBER, cell_mobile_phone_number TEXT, first_name TEXT, email_address TEXT, customer_status_code TEXT);"
      }
    ],
    [
      {
        "question": "List the names and date became customer for the customers.",
        "query": "SELECT first_name, last_name, date_became_customer FROM customers",
        "schema": "CREATE TABLE Customers (first_name TEXT, date_became_customer TIME, date_of_birth TIME, last_name TEXT, customer_id NUMBER);"
      },
      {
        "question": "Limit that to Carole Bernhard, and just show the relevant date.",
        "query": "SELECT date_became_customer FROM customers WHERE first_name = \"Carole\" AND last_name = \"Bernhard\";",
        "schema": "CREATE TABLE Customers (customer_id NUMBER, last_name TEXT, date_became_customer TIME, first_name TEXT, date_of_birth TIME);"
      }
    ],
    [
      {
        "question": "List the customer status code with their respective counts.",
        "query": "SELECT customer_status_code, count(*) FROM customers GROUP BY customer_status_code",
        "schema": "CREATE TABLE Lessons (lesson_status_code TEXT); CREATE TABLE Customers (customer_id NUMBER, last_name TEXT, customer_status_code TEXT);"
      },
      {
        "question": "Sort by ascending counts.",
        "query": "SELECT customer_status_code, count(*) FROM customers GROUP BY customer_status_code ORDER BY count(*) ASC",
        "schema": "CREATE TABLE Lessons (lesson_status_code TEXT); CREATE TABLE Customers (customer_id NUMBER, customer_status_code TEXT, last_name TEXT);"
      },
      {
        "question": "Which customer status code has least number of customers?",
        "query": "SELECT customer_status_code FROM customers GROUP BY customer_status_code ORDER BY count(*) ASC LIMIT 1;",
        "schema": "CREATE TABLE Customers (last_name TEXT, customer_id NUMBER, customer_status_code TEXT); CREATE TABLE Lessons (lesson_status_code TEXT);"
      }
    ],
    [
      {
        "question": "List the lessons taken by each customer first and last name.",
        "query": "SELECT t2.first_name, t2.last_name, count(*) FROM lessons AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id GROUP BY t2.customer_id",
        "schema": "CREATE TABLE Customers (last_name TEXT, customer_id NUMBER, customer_status_code TEXT, first_name TEXT); CREATE TABLE Lessons (lesson_time TEXT, customer_id NUMBER, lesson_id NUMBER, lesson_status_code TEXT); CREATE TABLE Customer_Payments (customer_id NUMBER);"
      },
      {
        "question": "Just show that information for the completed status lessons.",
        "query": "SELECT t2.first_name, t2.last_name, count(*) FROM lessons AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id GROUP BY t2.customer_id WHERE t1.lesson_status_code = 'Completed'",
        "schema": "CREATE TABLE Customer_Payments (customer_id NUMBER); CREATE TABLE Customers (first_name TEXT, last_name TEXT, customer_status_code TEXT, customer_id NUMBER); CREATE TABLE Lessons (lesson_status_code TEXT, lesson_id NUMBER, lesson_time TEXT, customer_id NUMBER);"
      },
      {
        "question": "How many lessons taken by customer with first name as Rylan and last name as Goodwin were completed?",
        "query": "SELECT count(*) FROM lessons AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id WHERE t2.first_name = \"Rylan\" AND t2.last_name = \"Goodwin\" AND t1.lesson_status_code = \"Completed\";",
        "schema": "CREATE TABLE Customer_Payments (customer_id NUMBER); CREATE TABLE Lessons (lesson_id NUMBER, lesson_time TEXT, customer_id NUMBER, lesson_status_code TEXT); CREATE TABLE Customers (last_name TEXT, first_name TEXT, customer_status_code TEXT, customer_id NUMBER);"
      }
    ],
    [
      {
        "question": "List names of customers with their amount outstanding.",
        "query": "SELECT first_name, last_name, amount_outstanding FROM customers",
        "schema": "CREATE TABLE Customers (customer_status_code TEXT, first_name TEXT, last_name TEXT, amount_outstanding NUMBER, customer_id NUMBER); CREATE TABLE Customer_Payments (customer_id NUMBER);"
      },
      {
        "question": "What is maximum, minimum and average amount of outstanding of customer?",
        "query": "SELECT max(amount_outstanding) , min(amount_outstanding) , avg(amount_outstanding) FROM customers;",
        "schema": "CREATE TABLE Customer_Payments (customer_id NUMBER); CREATE TABLE Staff (first_name TEXT); CREATE TABLE Customers (last_name TEXT, amount_outstanding NUMBER, customer_id NUMBER, customer_status_code TEXT, first_name TEXT);"
      }
    ],
    [
      {
        "question": "List records of customers living in city Lockmanfurt.",
        "query": "SELECT * FROM customers AS t1 JOIN addresses AS t2 ON t1.customer_address_id = t2.address_id WHERE t2.city = \"Lockmanfurt\";",
        "schema": "CREATE TABLE Staff (staff_address_id NUMBER); CREATE TABLE Customers (last_name TEXT, first_name TEXT, customer_status_code TEXT, customer_address_id NUMBER, customer_id NUMBER); CREATE TABLE Addresses (state_province_county TEXT, address_id NUMBER, city TEXT);"
      },
      {
        "question": "Just show the first and last name.",
        "query": "SELECT t1.first_name , t1.last_name FROM customers AS t1 JOIN addresses AS t2 ON t1.customer_address_id = t2.address_id WHERE t2.city = \"Lockmanfurt\";",
        "schema": "CREATE TABLE Staff (staff_address_id NUMBER); CREATE TABLE Customers (first_name TEXT, customer_id NUMBER, last_name TEXT, customer_address_id NUMBER, customer_status_code TEXT); CREATE TABLE Addresses (address_id NUMBER, state_province_county TEXT, city TEXT);"
      }
    ],
    [
      {
        "question": "Join customer names with their lived-in countries.",
        "query": "SELECT t1.first_name, t1.last_name, t2.country FROM customers AS t1 JOIN addresses AS t2 ON t1.customer_address_id = t2.address_id",
        "schema": "CREATE TABLE Addresses (address_id NUMBER, state_province_county TEXT, city TEXT, country TEXT); CREATE TABLE Customers (customer_address_id NUMBER, customer_id NUMBER, last_name TEXT, first_name TEXT);"
      },
      {
        "question": "Which country does customer with first name as Carole and last name as Bernhard live in?",
        "query": "SELECT t2.country FROM customers AS t1 JOIN addresses AS t2 ON t1.customer_address_id = t2.address_id WHERE t1.first_name = \"Carole\" AND t1.last_name = \"Bernhard\"",
        "schema": "CREATE TABLE Customers (first_name TEXT, customer_address_id NUMBER, last_name TEXT, customer_id NUMBER); CREATE TABLE Addresses (state_province_county TEXT, country TEXT, city TEXT, address_id NUMBER);"
      }
    ],
    [
      {
        "question": "What are the customers zip codes?",
        "query": "SELECT t1.first_name, t1.last_name, t2.zip_postcode FROM customers AS t1 JOIN addresses AS t2 ON t1.customer_address_id = t2.address_id",
        "schema": "CREATE TABLE Addresses (city TEXT, state_province_county TEXT, zip_postcode TEXT, address_id NUMBER); CREATE TABLE Customers (first_name TEXT, last_name TEXT, customer_id NUMBER, customer_address_id NUMBER, customer_status_code TEXT, phone_number TEXT); CREATE TABLE Lessons (customer_id NUMBER); CREATE TABLE Customer_Payments (customer_id NUMBER);"
      },
      {
        "question": "What is zip code of customer with first name as Carole and last name as Bernhard?",
        "query": "SELECT t2.zip_postcode FROM customers AS t1 JOIN addresses AS t2 ON t1.customer_address_id = t2.address_id WHERE t1.first_name = \"Carole\" AND t1.last_name = \"Bernhard\"",
        "schema": "CREATE TABLE Lessons (customer_id NUMBER); CREATE TABLE Customers (phone_number TEXT, customer_address_id NUMBER, customer_status_code TEXT, customer_id NUMBER, first_name TEXT, last_name TEXT); CREATE TABLE Customer_Payments (customer_id NUMBER); CREATE TABLE Addresses (zip_postcode TEXT, address_id NUMBER, state_province_county TEXT, city TEXT);"
      }
    ],
    [
      {
        "question": "Give counts of cities customers live in.",
        "query": "SELECT t2.city, count(*) FROM customers AS t1 JOIN addresses AS t2 ON t1.customer_address_id = t2.address_id GROUP BY t2.city",
        "schema": "CREATE TABLE Addresses (city TEXT, address_id NUMBER); CREATE TABLE Customers (customer_id NUMBER, first_name TEXT, customer_address_id NUMBER, last_name TEXT);"
      },
      {
        "question": "Which city has most number of customers?",
        "query": "SELECT t2.city FROM customers AS t1 JOIN addresses AS t2 ON t1.customer_address_id = t2.address_id GROUP BY t2.city ORDER BY count(*) DESC LIMIT 1;",
        "schema": "CREATE TABLE Addresses (city TEXT, address_id NUMBER); CREATE TABLE Customers (customer_id NUMBER, first_name TEXT, customer_address_id NUMBER, last_name TEXT);"
      }
    ],
    [
      {
        "question": "List a sum of all the payments for all the customers.",
        "query": "SELECT t2.first_name, t2.last_name, sum(t1.amount_payment) FROM customer_payments AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id GROUP BY t2.customer_id",
        "schema": "CREATE TABLE Customer_Payments (amount_payment NUMBER, payment_method_code TEXT, customer_id NUMBER); CREATE TABLE Customers (customer_id NUMBER, first_name TEXT, last_name TEXT);"
      },
      {
        "question": "How much in total has customer with first name as Carole and last name as Bernhard paid?",
        "query": "SELECT sum(t1.amount_payment) FROM customer_payments AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id WHERE t2.first_name = \"Carole\" AND t2.last_name = \"Bernhard\"",
        "schema": "CREATE TABLE Customers (last_name TEXT, first_name TEXT, customer_id NUMBER); CREATE TABLE Customer_Payments (customer_id NUMBER, amount_payment NUMBER, payment_method_code TEXT);"
      }
    ],
    [
      {
        "question": "Which customer ids have no payment history?",
        "query": "SELECT customer_id FROM customers EXCEPT SELECT customer_id FROM customer_payments",
        "schema": "CREATE TABLE Customer_Payments (customer_id NUMBER, payment_method_code TEXT); CREATE TABLE Lessons (customer_id NUMBER); CREATE TABLE Customers (last_name TEXT, customer_id NUMBER, first_name TEXT, customer_address_id NUMBER, customer_status_code TEXT);"
      },
      {
        "question": "Count those.",
        "query": "SELECT count(*) FROM customers WHERE customer_id NOT IN ( SELECT customer_id FROM customer_payments );",
        "schema": "CREATE TABLE Lessons (customer_id NUMBER); CREATE TABLE Customers (last_name TEXT, customer_address_id NUMBER, customer_status_code TEXT, customer_id NUMBER, first_name TEXT); CREATE TABLE Customer_Payments (payment_method_code TEXT, customer_id NUMBER, amount_payment NUMBER);"
      }
    ],
    [
      {
        "question": "Count the payments per customer.",
        "query": "SELECT t2.first_name, t2.last_name, count(t1.amount_payment) FROM customer_payments AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id GROUP BY t2.customer_id",
        "schema": "CREATE TABLE Customer_Payments (payment_method_code TEXT, customer_id NUMBER, amount_payment NUMBER); CREATE TABLE Customers (customer_id NUMBER, customer_status_code TEXT, last_name TEXT, first_name TEXT); CREATE TABLE Lessons (customer_id NUMBER);"
      },
      {
        "question": "Just for those with more than 2 payments.",
        "query": "SELECT t2.first_name , t2.last_name FROM customer_payments AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id GROUP BY t1.customer_id HAVING count(*) > 2;",
        "schema": "CREATE TABLE Customers (customer_id NUMBER, first_name TEXT, last_name TEXT, customer_status_code TEXT); CREATE TABLE Lessons (customer_id NUMBER); CREATE TABLE Customer_Payments (payment_method_code TEXT, amount_payment NUMBER, customer_id NUMBER);"
      }
    ],
    [
      {
        "question": "List lesson id of all lessons taught by staff with first name as Janessa",
        "query": "SELECT t1.lesson_id FROM lessons AS t1 JOIN staff AS t2 ON t1.staff_id = t2.staff_id WHERE t2.first_name = \"Janessa\"",
        "schema": "CREATE TABLE Customers (customer_id NUMBER, first_name TEXT); CREATE TABLE Staff (staff_id NUMBER, first_name TEXT, last_name TEXT, nickname TEXT); CREATE TABLE Lessons (customer_id NUMBER, staff_id NUMBER, lesson_id NUMBER, lesson_status_code TEXT);"
      },
      {
        "question": "Intersect that with last name Sawayn and nickname containing letter 's'.",
        "query": "SELECT t1.lesson_id FROM lessons AS t1 JOIN staff AS t2 ON t1.staff_id = t2.staff_id WHERE t2.first_name = \"Janessa\" AND t2.last_name = \"Sawayn\" AND nickname LIKE \"%s%\";",
        "schema": "CREATE TABLE Staff (staff_address_id NUMBER, first_name TEXT, last_name TEXT, nickname TEXT, staff_id NUMBER); CREATE TABLE Lessons (lesson_status_code TEXT, lesson_id NUMBER, staff_id NUMBER, customer_id NUMBER); CREATE TABLE Customers (first_name TEXT, customer_id NUMBER);"
      }
    ],
    [
      {
        "question": "Count the lessons grouped by staff first name.",
        "query": "SELECT t2.first_name, count(*) FROM lessons AS t1 JOIN staff AS t2 ON t1.staff_id = t2.staff_id GROUP BY t2.first_name",
        "schema": "CREATE TABLE Staff (last_name TEXT, nickname TEXT, staff_id NUMBER, middle_name TEXT, first_name TEXT); CREATE TABLE Lessons (staff_id NUMBER, lesson_id NUMBER);"
      },
      {
        "question": "How many lessons taught by staff whose first name has letter 'a' in it?",
        "query": "SELECT count(*) FROM lessons AS t1 JOIN staff AS t2 ON t1.staff_id = t2.staff_id WHERE t2.first_name LIKE \"%a%\"",
        "schema": "CREATE TABLE Staff (staff_id NUMBER, last_name TEXT, first_name TEXT, nickname TEXT, middle_name TEXT); CREATE TABLE Lessons (lesson_id NUMBER, staff_id NUMBER);"
      }
    ],
    [
      {
        "question": "Count the lesson time grouped by staff id.",
        "query": "SELECT t2.staff_id, sum(lesson_time) FROM lessons AS t1 JOIN staff AS t2 ON t1.staff_id = t2.staff_id GROUP BY t2.staff_id",
        "schema": "CREATE TABLE Lessons (lesson_id NUMBER, lesson_time TEXT, lesson_date TIME, staff_id NUMBER, lesson_status_code TEXT); CREATE TABLE Staff (staff_id NUMBER, last_name TEXT);"
      },
      {
        "question": "Join that sum on the staff with first name Janess and last name Sawayn.",
        "query": "SELECT sum(lesson_time) FROM lessons AS t1 JOIN staff AS t2 ON t1.staff_id = t2.staff_id WHERE t2.first_name = \"Janessa\" AND t2.last_name = \"Sawayn\";",
        "schema": "CREATE TABLE Lessons (lesson_status_code TEXT, lesson_time TEXT, lesson_id NUMBER, lesson_date TIME, staff_id NUMBER); CREATE TABLE Staff (first_name TEXT, middle_name TEXT, last_name TEXT, staff_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show the sum of lesson prices per staff.",
        "query": "SELECT t2.first_name, t2.last_name, sum(t1.price) FROM lessons AS t1 JOIN staff AS t2 ON t1.staff_id = t2.staff_id GROUP BY t2.staff_id",
        "schema": "CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Lessons (price NUMBER, lesson_id NUMBER, staff_id NUMBER); CREATE TABLE Staff (middle_name TEXT, nickname TEXT, staff_id NUMBER, last_name TEXT, first_name TEXT);"
      },
      {
        "question": "Give the average.",
        "query": "SELECT t2.first_name, t2.last_name, avg(t1.price) FROM lessons AS t1 JOIN staff AS t2 ON t1.staff_id = t2.staff_id GROUP BY t2.staff_id",
        "schema": "CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Lessons (lesson_id NUMBER, staff_id NUMBER, price NUMBER); CREATE TABLE Staff (first_name TEXT, middle_name TEXT, nickname TEXT, last_name TEXT, staff_id NUMBER);"
      },
      {
        "question": "Just for first name as Janessa and last name as Sawayn?",
        "query": "SELECT avg(price) FROM lessons AS t1 JOIN staff AS t2 ON t1.staff_id = t2.staff_id WHERE t2.first_name = \"Janessa\" AND t2.last_name = \"Sawayn\";",
        "schema": "CREATE TABLE Lessons (lesson_id NUMBER, staff_id NUMBER, price NUMBER); CREATE TABLE Staff (first_name TEXT, nickname TEXT, middle_name TEXT, staff_id NUMBER, last_name TEXT); CREATE TABLE Customers (customer_id NUMBER);"
      }
    ],
    [
      {
        "question": "count the lessons taken per customer first name.",
        "query": "SELECT t2.first_name, count(*) FROM lessons AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id GROUP BY t2.first_name",
        "schema": "CREATE TABLE Customer_Payments (customer_id NUMBER); CREATE TABLE Customers (customer_id NUMBER, first_name TEXT, last_name TEXT); CREATE TABLE Staff (last_name TEXT, first_name TEXT); CREATE TABLE Lessons (lesson_id NUMBER, lesson_status_code TEXT, lesson_time TEXT, customer_id NUMBER);"
      },
      {
        "question": "How many lessons did customer with first name Ray take?",
        "query": "SELECT count(*) FROM lessons AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id WHERE t2.first_name = \"Ray\"",
        "schema": "CREATE TABLE Customers (customer_id NUMBER, last_name TEXT, first_name TEXT); CREATE TABLE Customer_Payments (customer_id NUMBER); CREATE TABLE Staff (last_name TEXT, first_name TEXT); CREATE TABLE Lessons (lesson_status_code TEXT, lesson_time TEXT, lesson_id NUMBER, customer_id NUMBER);"
      }
    ],
    [
      {
        "question": "What are the distinct last names of staff?",
        "query": "SELECT DISTINCT last_name FROM staff",
        "schema": "CREATE TABLE Customers (last_name TEXT); CREATE TABLE Staff (first_name TEXT, staff_id NUMBER, last_name TEXT);"
      },
      {
        "question": "Of customers?",
        "query": "SELECT DISTINCT last_name FROM customers",
        "schema": "CREATE TABLE Staff (staff_id NUMBER, last_name TEXT, nickname TEXT, first_name TEXT); CREATE TABLE Lessons (customer_id NUMBER); CREATE TABLE Customers (first_name TEXT, last_name TEXT, customer_address_id NUMBER, customer_id NUMBER, customer_status_code TEXT);"
      },
      {
        "question": "Intersect that.",
        "query": "SELECT last_name FROM customers INTERSECT SELECT last_name FROM staff",
        "schema": "CREATE TABLE Lessons (customer_id NUMBER); CREATE TABLE Customers (customer_id NUMBER, last_name TEXT, first_name TEXT, customer_status_code TEXT, customer_address_id NUMBER); CREATE TABLE Staff (staff_id NUMBER, first_name TEXT, last_name TEXT, nickname TEXT);"
      }
    ],
    [
      {
        "question": "Which staff gave lessons? Give their first names.",
        "query": "SELECT DISTINCT t2.first_name FROM lessons AS t1 JOIN staff AS t2 ON t1.staff_id = t2.staff_id",
        "schema": "CREATE TABLE Lessons (customer_id NUMBER, lesson_status_code TEXT, staff_id NUMBER, lesson_id NUMBER); CREATE TABLE Customers (customer_id NUMBER, last_name TEXT, first_name TEXT); CREATE TABLE Staff (nickname TEXT, first_name TEXT, staff_id NUMBER, last_name TEXT);"
      },
      {
        "question": "Which staff first names did not?",
        "query": "SELECT first_name FROM staff EXCEPT SELECT t2.first_name FROM lessons AS t1 JOIN staff AS t2 ON t1.staff_id = t2.staff_id",
        "schema": "CREATE TABLE Staff (first_name TEXT, last_name TEXT, staff_id NUMBER, nickname TEXT); CREATE TABLE Lessons (lesson_id NUMBER, customer_id NUMBER, lesson_status_code TEXT, staff_id NUMBER); CREATE TABLE Customers (last_name TEXT, customer_id NUMBER, first_name TEXT);"
      }
    ]
  ],
  "decoration_competition": [
    [
      {
        "question": "What are the names of all the members?",
        "query": "SELECT name FROM member",
        "schema": "CREATE TABLE member (Member_ID NUMBER, Name TEXT);"
      },
      {
        "question": "What countries are they each from?",
        "query": "SELECT name, country FROM member",
        "schema": "CREATE TABLE member (Name TEXT, Country TEXT, Member_ID NUMBER);"
      },
      {
        "question": "Now show those from the United States.",
        "query": "SELECT name, country FROM member WHERE country = \"United States\"",
        "schema": "CREATE TABLE member (Name TEXT, Member_ID NUMBER, Country TEXT);"
      },
      {
        "question": "Can you also include those from Canada?",
        "query": "SELECT name FROM member WHERE country = \"United States\" OR country = \"Canada\"",
        "schema": "CREATE TABLE member (Name TEXT, Country TEXT, Member_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What are all the distinct countries the members belong to?",
        "query": "SELECT DISTINCT country FROM member",
        "schema": "CREATE TABLE member (Country TEXT, Name TEXT, Member_ID NUMBER);"
      },
      {
        "question": "How many members belong to each one?",
        "query": "SELECT country, count(*) FROM member GROUP BY country",
        "schema": "CREATE TABLE member (Member_ID NUMBER, Country TEXT, Name TEXT);"
      },
      {
        "question": "Which one has the least number of members?",
        "query": "SELECT country FROM member GROUP BY country ORDER BY count(*) ASC LIMIT 1",
        "schema": "CREATE TABLE member (Member_ID NUMBER, Name TEXT, Country TEXT);"
      },
      {
        "question": "How about the most?",
        "query": "SELECT country FROM member GROUP BY country ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE member (Name TEXT, Member_ID NUMBER, Country TEXT);"
      }
    ],
    [
      {
        "question": "Can you show me all the member names and their countries?",
        "query": "SELECT name, country FROM member",
        "schema": "CREATE TABLE member (Member_ID NUMBER, Name TEXT, Country TEXT);"
      },
      {
        "question": "List all the different countries.",
        "query": "SELECT DISTINCT country FROM member",
        "schema": "CREATE TABLE member (Country TEXT, Member_ID NUMBER, Name TEXT);"
      },
      {
        "question": "Which of these have more than one member?",
        "query": "SELECT country FROM member GROUP BY country HAVING count(*) > 1",
        "schema": "CREATE TABLE member (Member_ID NUMBER, Name TEXT, Country TEXT);"
      },
      {
        "question": "How about more than two?",
        "query": "SELECT country FROM member GROUP BY country HAVING count(*) > 2",
        "schema": "CREATE TABLE member (Name TEXT, Country TEXT, Member_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What are the names of all the members in alphabetical order?",
        "query": "SELECT name FROM member ORDER BY name ASC",
        "schema": "CREATE TABLE member (Name TEXT, Member_ID NUMBER); CREATE TABLE round (Member_ID NUMBER);"
      },
      {
        "question": "Also provide their college names.",
        "query": "SELECT t2.name , t1.name FROM college AS t1 JOIN member AS t2 ON t1.college_id = t2.college_id ORDER BY t2.name ASC",
        "schema": "CREATE TABLE member (College_ID NUMBER, Member_ID NUMBER, Name TEXT); CREATE TABLE college (College_ID NUMBER, Name TEXT); CREATE TABLE round (Member_ID NUMBER);"
      },
      {
        "question": "and their college locations!",
        "query": "SELECT t2.name , t1.name, t1.college_location FROM college AS t1 JOIN member AS t2 ON t1.college_id = t2.college_id ORDER BY t2.name ASC",
        "schema": "CREATE TABLE college (College_Location TEXT, Name TEXT, College_ID NUMBER); CREATE TABLE member (College_ID NUMBER, Name TEXT, Member_ID NUMBER); CREATE TABLE round (Member_ID NUMBER);"
      },
      {
        "question": "actually, show just the names and locations.",
        "query": "SELECT t2.name , t1.college_location FROM college AS t1 JOIN member AS t2 ON t1.college_id = t2.college_id ORDER BY t2.name ASC",
        "schema": "CREATE TABLE college (College_Location TEXT, Name TEXT, College_ID NUMBER); CREATE TABLE round (Member_ID NUMBER); CREATE TABLE member (Member_ID NUMBER, Name TEXT, College_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Who are all the members from the country Canada?",
        "query": "SELECT member_id FROM member WHERE country = \"Canada\"",
        "schema": "CREATE TABLE member (Name TEXT, Member_ID NUMBER, Country TEXT);"
      },
      {
        "question": "What are the names of the colleges they go to?",
        "query": "SELECT t2.member_id, t1.name FROM college AS t1 JOIN member AS t2 ON t1.college_id = t2.college_id WHERE t2.country = \"Canada\"",
        "schema": "CREATE TABLE college (College_ID NUMBER, Name TEXT, College_Location TEXT); CREATE TABLE member (College_ID NUMBER, Member_ID NUMBER, Country TEXT, Name TEXT);"
      },
      {
        "question": "Who are the team leaders of these colleges?",
        "query": "SELECT t2.member_id, t1.name, t1.leader_name FROM college AS t1 JOIN member AS t2 ON t1.college_id = t2.college_id WHERE t2.country = \"Canada\"",
        "schema": "CREATE TABLE college (Leader_Name TEXT, Name TEXT, College_ID NUMBER, College_Location TEXT); CREATE TABLE member (College_ID NUMBER, Country TEXT, Name TEXT, Member_ID NUMBER);"
      },
      {
        "question": "Show me a list of all the different leaders!",
        "query": "SELECT DISTINCT t1.leader_name FROM college AS t1 JOIN member AS t2 ON t1.college_id = t2.college_id WHERE t2.country = \"Canada\"",
        "schema": "CREATE TABLE college (College_ID NUMBER, College_Location TEXT, Leader_Name TEXT, Name TEXT); CREATE TABLE member (Member_ID NUMBER, College_ID NUMBER, Name TEXT, Country TEXT);"
      }
    ],
    [
      {
        "question": "How many different rounds are there?",
        "query": "SELECT count(DISTINCT round_id) FROM round",
        "schema": "CREATE TABLE round (Member_ID NUMBER, Round_ID NUMBER, Decoration_Theme TEXT, Rank_in_Round NUMBER); CREATE TABLE member (Member_ID NUMBER);"
      },
      {
        "question": "What are they?",
        "query": "SELECT DISTINCT round_id FROM round",
        "schema": "CREATE TABLE member (Member_ID NUMBER); CREATE TABLE round (Rank_in_Round NUMBER, Round_ID NUMBER, Member_ID NUMBER, Decoration_Theme TEXT);"
      },
      {
        "question": "For each, who are the names of the members with ranks in rounds lower than 3?",
        "query": "SELECT t1.name FROM member AS t1 JOIN round AS t2 ON t1.member_id = t2.member_id WHERE t2.rank_in_round < 3",
        "schema": "CREATE TABLE round (Member_ID NUMBER, Round_ID NUMBER, Decoration_Theme TEXT, Rank_in_Round NUMBER); CREATE TABLE member (Name TEXT, Member_ID NUMBER);"
      },
      {
        "question": "How about greater than 3?",
        "query": "SELECT t1.name FROM member AS t1 JOIN round AS t2 ON t1.member_id = t2.member_id WHERE t2.rank_in_round > 3",
        "schema": "CREATE TABLE member (Member_ID NUMBER, Name TEXT); CREATE TABLE round (Rank_in_Round NUMBER, Decoration_Theme TEXT, Member_ID NUMBER, Round_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What are the names of the member that did not made it to any round?",
        "query": "SELECT name FROM member WHERE name NOT IN (SELECT t1.name FROM member AS t1 JOIN round AS t2 ON t1.member_id = t2.member_id ORDER BY rank_in_round)",
        "schema": "CREATE TABLE member (Name TEXT, Member_ID NUMBER); CREATE TABLE round (Round_ID NUMBER, Member_ID NUMBER);"
      },
      {
        "question": "Now show me the other members!",
        "query": "SELECT t1.name FROM member AS t1 JOIN round AS t2 ON t1.member_id = t2.member_id",
        "schema": "CREATE TABLE round (Rank_in_Round NUMBER, Round_ID NUMBER, Member_ID NUMBER); CREATE TABLE member (Name TEXT, Member_ID NUMBER);"
      },
      {
        "question": "Show just the names ordered from greatest to least on their ranks.",
        "query": "SELECT t1.name FROM member AS t1 JOIN round AS t2 ON t1.member_id = t2.member_id ORDER BY rank_in_round DESC",
        "schema": "CREATE TABLE member (Member_ID NUMBER, Name TEXT); CREATE TABLE round (Round_ID NUMBER, Member_ID NUMBER, Rank_in_Round NUMBER);"
      },
      {
        "question": "Actually, sort least to greatest!",
        "query": "SELECT t1.name FROM member AS t1 JOIN round AS t2 ON t1.member_id = t2.member_id ORDER BY rank_in_round ASC",
        "schema": "CREATE TABLE member (Name TEXT, Member_ID NUMBER); CREATE TABLE round (Round_ID NUMBER, Rank_in_Round NUMBER, Member_ID NUMBER);"
      }
    ]
  ],
  "music_4": [
    [
      {
        "question": "List the information for all volumes.",
        "query": "SELECT * FROM volume",
        "schema": "CREATE TABLE volume (Artist_ID NUMBER, Volume_ID NUMBER, Volume_Issue TEXT, Song TEXT); CREATE TABLE music_festival (Volume NUMBER); CREATE TABLE artist (Artist_ID NUMBER);"
      },
      {
        "question": "Order them by weeks on top from the most to the least.",
        "query": "SELECT * FROM volume ORDER BY weeks_on_top DESC",
        "schema": "CREATE TABLE volume (Artist_ID NUMBER, Volume_Issue TEXT, Weeks_on_Top NUMBER, Volume_ID NUMBER, Song TEXT); CREATE TABLE artist (Artist_ID NUMBER); CREATE TABLE music_festival (Volume NUMBER);"
      },
      {
        "question": "What is the maximum weeks on top for a volume?",
        "query": "SELECT max(weeks_on_top) FROM volume",
        "schema": "CREATE TABLE music_festival (Volume NUMBER); CREATE TABLE artist (Artist_ID NUMBER); CREATE TABLE volume (Weeks_on_Top NUMBER, Artist_ID NUMBER, Volume_ID NUMBER, Volume_Issue TEXT, Song TEXT);"
      },
      {
        "question": "Include the minimum as well.",
        "query": "SELECT max(weeks_on_top) , min(weeks_on_top) FROM volume",
        "schema": "CREATE TABLE music_festival (Volume NUMBER); CREATE TABLE volume (Weeks_on_Top NUMBER, Artist_ID NUMBER, Volume_Issue TEXT, Song TEXT, Volume_ID NUMBER); CREATE TABLE artist (Artist_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Order volumes by weeks on top in increasing order.",
        "query": "SELECT * FROM volume ORDER BY weeks_on_top",
        "schema": "CREATE TABLE volume (Weeks_on_Top NUMBER, Song TEXT, Volume_ID NUMBER); CREATE TABLE music_festival (Volume NUMBER);"
      },
      {
        "question": "Which volumes lasted no more than 2 weeks on top?",
        "query": "SELECT volume_id FROM volume WHERE weeks_on_top <= 2",
        "schema": "CREATE TABLE volume (Volume_Issue TEXT, Song TEXT, Volume_ID NUMBER, Weeks_on_Top NUMBER); CREATE TABLE music_festival (Volume NUMBER);"
      },
      {
        "question": "Which ones lasted more than 2 weeks on top?",
        "query": "SELECT volume_id FROM volume WHERE weeks_on_top > 2",
        "schema": "CREATE TABLE volume (Song TEXT, Volume_ID NUMBER, Volume_Issue TEXT, Weeks_on_Top NUMBER); CREATE TABLE music_festival (Volume NUMBER);"
      },
      {
        "question": "What are the ceremony dates for these volumes?",
        "query": "SELECT DISTINCT t1.date_of_ceremony FROM music_festival AS t1 JOIN volume AS t2 ON t1.volume = t2.volume_id WHERE t2.weeks_on_top > 2",
        "schema": "CREATE TABLE music_festival (ID NUMBER, Music_Festival TEXT, Date_of_ceremony TEXT, Volume NUMBER); CREATE TABLE volume (Volume_Issue TEXT, Volume_ID NUMBER, Issue_Date TEXT, Weeks_on_Top NUMBER, Song TEXT);"
      }
    ],
    [
      {
        "question": "List the names of all songs.",
        "query": "SELECT song FROM volume",
        "schema": "CREATE TABLE volume (Song TEXT);"
      },
      {
        "question": "Which songs were featured at music festivals?",
        "query": "SELECT t2.song FROM music_festival AS t1 JOIN volume AS t2 ON t1.volume = t2.volume_id",
        "schema": "CREATE TABLE music_festival (Music_Festival TEXT, Volume NUMBER, ID NUMBER, Result TEXT); CREATE TABLE volume (Volume_ID NUMBER, Song TEXT);"
      },
      {
        "question": "Which ones have the result \u201cnominated\u201d?",
        "query": "SELECT t2.song FROM music_festival AS t1 JOIN volume AS t2 ON t1.volume = t2.volume_id WHERE t1.result = \"Nominated\"",
        "schema": "CREATE TABLE volume (Volume_ID NUMBER, Song TEXT); CREATE TABLE music_festival (Music_Festival TEXT, ID NUMBER, Volume NUMBER, Result TEXT);"
      }
    ],
    [
      {
        "question": "List the names of artists who have released volumes.",
        "query": "SELECT DISTINCT t1.artist FROM artist AS t1 JOIN volume AS t2 ON t1.artist_id = t2.artist_id",
        "schema": "CREATE TABLE artist (Artist_ID NUMBER, Artist TEXT, Famous_Title TEXT); CREATE TABLE volume (Volume_ID NUMBER, Artist_ID NUMBER);"
      },
      {
        "question": "List the information of volumes released by Gorgoroth.",
        "query": "SELECT * FROM artist AS t1 JOIN volume AS t2 ON t1.artist_id = t2.artist_id WHERE t1.artist = \"Gorgoroth\"",
        "schema": "CREATE TABLE volume (Artist_ID NUMBER, Volume_ID NUMBER, Volume_Issue TEXT); CREATE TABLE artist (Artist_ID NUMBER, Artist TEXT, Famous_Title TEXT);"
      },
      {
        "question": "What are their issue dates?",
        "query": "SELECT t2.issue_date FROM artist AS t1 JOIN volume AS t2 ON t1.artist_id = t2.artist_id WHERE t1.artist = \"Gorgoroth\"",
        "schema": "CREATE TABLE volume (Issue_Date TEXT, Volume_Issue TEXT, Artist_ID NUMBER, Volume_ID NUMBER); CREATE TABLE artist (Artist TEXT, Artist_ID NUMBER, Famous_Title TEXT);"
      }
    ],
    [
      {
        "question": "List all artists.",
        "query": "SELECT DISTINCT artist FROM artist",
        "schema": "CREATE TABLE volume (Artist_ID NUMBER); CREATE TABLE artist (Artist_ID NUMBER, Artist TEXT);"
      },
      {
        "question": "Only list those aged 32 or older.",
        "query": "SELECT DISTINCT artist FROM artist WHERE age >= 32",
        "schema": "CREATE TABLE volume (Artist_ID NUMBER); CREATE TABLE artist (Age NUMBER, Artist TEXT, Artist_ID NUMBER);"
      },
      {
        "question": "Show the information for volumes associated with these artists.",
        "query": "SELECT * FROM artist AS t1 JOIN volume AS t2 ON t1.artist_id = t2.artist_id WHERE t1.age >= 32",
        "schema": "CREATE TABLE music_festival (Volume NUMBER); CREATE TABLE volume (Artist_ID NUMBER, Volume_ID NUMBER); CREATE TABLE artist (Artist_ID NUMBER, Artist TEXT, Age NUMBER);"
      },
      {
        "question": "Only show song names.",
        "query": "SELECT t2.song FROM artist AS t1 JOIN volume AS t2 ON t1.artist_id = t2.artist_id WHERE t1.age >= 32",
        "schema": "CREATE TABLE volume (Volume_ID NUMBER, Song TEXT, Artist_ID NUMBER); CREATE TABLE artist (Age NUMBER, Artist_ID NUMBER, Artist TEXT); CREATE TABLE music_festival (Volume NUMBER);"
      }
    ],
    [
      {
        "question": "List all volumes.",
        "query": "SELECT * FROM volume",
        "schema": "CREATE TABLE music_festival (Volume NUMBER); CREATE TABLE volume (Volume_Issue TEXT, Song TEXT, Artist_ID NUMBER, Volume_ID NUMBER); CREATE TABLE artist (Artist_ID NUMBER);"
      },
      {
        "question": "Only show information for volumes associated with artists aged 25 or younger.",
        "query": "SELECT * FROM artist AS t1 JOIN volume AS t2 ON t1.artist_id = t2.artist_id WHERE t1.age <= 25",
        "schema": "CREATE TABLE artist (Artist TEXT, Age NUMBER, Artist_ID NUMBER); CREATE TABLE music_festival (Volume NUMBER); CREATE TABLE volume (Artist_ID NUMBER, Volume_Issue TEXT, Volume_ID NUMBER, Song TEXT);"
      },
      {
        "question": "What is the average weeks on top for these volumes?",
        "query": "SELECT avg(t2.weeks_on_top) FROM artist AS t1 JOIN volume AS t2 ON t1.artist_id = t2.artist_id WHERE t1.age <= 25",
        "schema": "CREATE TABLE music_festival (Volume NUMBER); CREATE TABLE artist (Artist_ID NUMBER, Artist TEXT, Age NUMBER); CREATE TABLE volume (Artist_ID NUMBER, Volume_ID NUMBER, Weeks_on_Top NUMBER, Volume_Issue TEXT, Song TEXT);"
      }
    ],
    [
      {
        "question": "What are the names of all artists?",
        "query": "SELECT DISTINCT artist FROM artist",
        "schema": "CREATE TABLE artist (Famous_Title TEXT, Artist_ID NUMBER, Artist TEXT); CREATE TABLE volume (Artist_ID NUMBER);"
      },
      {
        "question": "Which of them have released volumes?",
        "query": "SELECT DISTINCT t1.artist FROM artist AS t1 JOIN volume AS t2 ON t1.artist_id = t2.artist_id",
        "schema": "CREATE TABLE artist (Artist TEXT, Famous_Title TEXT, Artist_ID NUMBER); CREATE TABLE volume (Artist_ID NUMBER);"
      },
      {
        "question": "Only show those whose volumes spent more than 2 weeks on top.",
        "query": "SELECT DISTINCT t1.artist FROM artist AS t1 JOIN volume AS t2 ON t1.artist_id = t2.artist_id WHERE t2.weeks_on_top > 2",
        "schema": "CREATE TABLE artist (Artist_ID NUMBER, Artist TEXT, Famous_Title TEXT); CREATE TABLE volume (Weeks_on_Top NUMBER, Volume_ID NUMBER, Artist_ID NUMBER);"
      },
      {
        "question": "List the famous titles of these artists.",
        "query": "SELECT t1.famous_title FROM artist AS t1 JOIN volume AS t2 ON t1.artist_id = t2.artist_id WHERE t2.weeks_on_top > 2",
        "schema": "CREATE TABLE volume (Weeks_on_Top NUMBER, Artist_ID NUMBER, Volume_ID NUMBER); CREATE TABLE artist (Artist TEXT, Artist_ID NUMBER, Famous_Title TEXT);"
      }
    ],
    [
      {
        "question": "Show the names of all artists.",
        "query": "SELECT DISTINCT artist FROM artist",
        "schema": "CREATE TABLE artist (Artist_ID NUMBER, Famous_Title TEXT, Artist TEXT); CREATE TABLE volume (Artist_ID NUMBER);"
      },
      {
        "question": "Order them by decreasing age.",
        "query": "SELECT DISTINCT artist FROM artist ORDER BY age DESC",
        "schema": "CREATE TABLE volume (Artist_ID NUMBER); CREATE TABLE artist (Age NUMBER, Famous_Title TEXT, Artist TEXT, Artist_ID NUMBER);"
      },
      {
        "question": "Who is the oldest artist?",
        "query": "SELECT DISTINCT artist FROM artist ORDER BY age DESC LIMIT 1",
        "schema": "CREATE TABLE artist (Age NUMBER, Famous_Title TEXT, Artist TEXT, Artist_ID NUMBER); CREATE TABLE volume (Artist_ID NUMBER);"
      },
      {
        "question": "What is his famous release date?",
        "query": "SELECT famous_release_date FROM artist ORDER BY age DESC LIMIT 1",
        "schema": "CREATE TABLE artist (Artist TEXT, Famous_Title TEXT, Artist_ID NUMBER, Famous_Release_date TEXT, Age NUMBER); CREATE TABLE volume (Artist_ID NUMBER, Issue_Date TEXT);"
      }
    ],
    [
      {
        "question": "List the names of all music festivals.",
        "query": "SELECT music_festival FROM music_festival",
        "schema": "CREATE TABLE music_festival (Music_Festival TEXT, ID NUMBER);"
      },
      {
        "question": "Include the ID of the volume featured at each music festival.",
        "query": "SELECT music_festival, volume FROM music_festival",
        "schema": "CREATE TABLE volume (Volume_ID NUMBER); CREATE TABLE music_festival (Music_Festival TEXT, ID NUMBER, Volume NUMBER);"
      },
      {
        "question": "Also include the result of each volume.",
        "query": "SELECT music_festival, volume, RESULT FROM music_festival",
        "schema": "CREATE TABLE volume (Volume_ID NUMBER); CREATE TABLE music_festival (Music_Festival TEXT, ID NUMBER, Volume NUMBER, Result TEXT);"
      },
      {
        "question": "What was the most common result?",
        "query": "SELECT RESULT FROM music_festival GROUP BY RESULT ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE volume (Volume_ID NUMBER); CREATE TABLE music_festival (ID NUMBER, Music_Festival TEXT, Result TEXT, Volume NUMBER);"
      }
    ],
    [
      {
        "question": "List all the different categories of music festivals.",
        "query": "SELECT DISTINCT category FROM music_festival",
        "schema": "CREATE TABLE music_festival (ID NUMBER, Music_Festival TEXT, Category TEXT);"
      },
      {
        "question": "Order them by decreasing frequency of category.",
        "query": "SELECT category FROM music_festival GROUP BY category ORDER BY count(*) DESC",
        "schema": "CREATE TABLE music_festival (Music_Festival TEXT, ID NUMBER, Category TEXT);"
      },
      {
        "question": "Only show the categories that appear more than once.",
        "query": "SELECT category FROM music_festival GROUP BY category HAVING count(*) > 1",
        "schema": "CREATE TABLE music_festival (Music_Festival TEXT, Category TEXT, ID NUMBER);"
      }
    ],
    [
      {
        "question": "List the song associated with each volume.",
        "query": "SELECT song FROM volume",
        "schema": "CREATE TABLE artist (Artist_ID NUMBER); CREATE TABLE music_festival (Volume NUMBER); CREATE TABLE volume (Song TEXT, Volume_ID NUMBER, Volume_Issue TEXT);"
      },
      {
        "question": "Show the weeks on top for each song.",
        "query": "SELECT song, weeks_on_top FROM volume",
        "schema": "CREATE TABLE artist (Artist_ID NUMBER); CREATE TABLE volume (Volume_Issue TEXT, Song TEXT, Volume_ID NUMBER, Weeks_on_Top NUMBER); CREATE TABLE music_festival (Volume NUMBER);"
      },
      {
        "question": "Order by decreasing weeks on top.",
        "query": "SELECT song, weeks_on_top FROM volume ORDER BY weeks_on_top DESC",
        "schema": "CREATE TABLE volume (Volume_ID NUMBER, Volume_Issue TEXT, Song TEXT, Weeks_on_Top NUMBER); CREATE TABLE artist (Artist_ID NUMBER); CREATE TABLE music_festival (Volume NUMBER);"
      },
      {
        "question": "Which song had the most weeks on top?",
        "query": "SELECT song FROM volume ORDER BY weeks_on_top DESC LIMIT 1",
        "schema": "CREATE TABLE artist (Artist_ID NUMBER); CREATE TABLE volume (Song TEXT, Volume_Issue TEXT, Volume_ID NUMBER, Weeks_on_Top NUMBER); CREATE TABLE music_festival (Volume NUMBER);"
      }
    ],
    [
      {
        "question": "List the names of all artists.",
        "query": "SELECT DISTINCT artist FROM artist",
        "schema": "CREATE TABLE artist (Artist TEXT, Artist_ID NUMBER, Famous_Title TEXT); CREATE TABLE volume (Artist_ID NUMBER);"
      },
      {
        "question": "How many artists have not released any volumes?",
        "query": "SELECT count(*) FROM artist WHERE artist_id NOT IN(SELECT artist_id FROM volume)",
        "schema": "CREATE TABLE artist (Artist_ID NUMBER, Famous_Title TEXT, Artist TEXT); CREATE TABLE volume (Artist_ID NUMBER);"
      },
      {
        "question": "What are their names?",
        "query": "SELECT artist FROM artist WHERE artist_id NOT IN(SELECT artist_id FROM volume)",
        "schema": "CREATE TABLE volume (Artist_ID NUMBER); CREATE TABLE artist (Artist TEXT, Artist_ID NUMBER, Famous_Title TEXT);"
      },
      {
        "question": "How about their famous titles?",
        "query": "SELECT famous_title FROM artist WHERE artist_id NOT IN(SELECT artist_id FROM volume)",
        "schema": "CREATE TABLE volume (Artist_ID NUMBER); CREATE TABLE artist (Artist_ID NUMBER, Famous_Title TEXT, Artist TEXT);"
      }
    ],
    [
      {
        "question": "Which artists have released volumes?",
        "query": "SELECT DISTINCT artist FROM artist WHERE artist_id IN(SELECT artist_id FROM volume)",
        "schema": "CREATE TABLE volume (Artist_ID NUMBER, Volume_ID NUMBER); CREATE TABLE artist (Artist_ID NUMBER, Artist TEXT);"
      },
      {
        "question": "Whose volumes lasted more than 2 weeks on top?",
        "query": "SELECT DISTINCT t1.artist FROM artist AS t1 JOIN volume AS t2 ON t1.artist_id = t2.artist_id WHERE t2.weeks_on_top > 2",
        "schema": "CREATE TABLE volume (Artist_ID NUMBER, Weeks_on_Top NUMBER, Volume_ID NUMBER); CREATE TABLE artist (Artist TEXT, Artist_ID NUMBER);"
      },
      {
        "question": "Whose volumes also lasted less than 2 weeks on top?",
        "query": "SELECT t1.artist FROM artist AS t1 JOIN volume AS t2 ON t1.artist_id = t2.artist_id WHERE t2.weeks_on_top > 2 INTERSECT SELECT t1.artist FROM artist AS t1 JOIN volume AS t2 ON t1.artist_id = t2.artist_id WHERE t2.weeks_on_top < 2",
        "schema": "CREATE TABLE artist (Artist_ID NUMBER, Artist TEXT); CREATE TABLE volume (Artist_ID NUMBER, Volume_ID NUMBER, Weeks_on_Top NUMBER);"
      },
      {
        "question": "What are their famous titles?",
        "query": "SELECT t1.famous_title FROM artist AS t1 JOIN volume AS t2 ON t1.artist_id = t2.artist_id WHERE t2.weeks_on_top > 2 INTERSECT SELECT t1.famous_title FROM artist AS t1 JOIN volume AS t2 ON t1.artist_id = t2.artist_id WHERE t2.weeks_on_top < 2",
        "schema": "CREATE TABLE volume (Weeks_on_Top NUMBER, Artist_ID NUMBER, Volume_ID NUMBER); CREATE TABLE artist (Artist TEXT, Artist_ID NUMBER, Famous_Title TEXT);"
      }
    ],
    [
      {
        "question": "List the information of all music festivals.",
        "query": "SELECT * FROM music_festival",
        "schema": "CREATE TABLE music_festival (ID NUMBER, Volume NUMBER, Music_Festival TEXT, Category TEXT);"
      },
      {
        "question": "Only show festivals with category \u201cBest Song\u201d.",
        "query": "SELECT * FROM music_festival WHERE category = \"Best Song\"",
        "schema": "CREATE TABLE volume (Song TEXT, Volume_ID NUMBER); CREATE TABLE music_festival (Volume NUMBER, Music_Festival TEXT, ID NUMBER, Category TEXT);"
      },
      {
        "question": "Which of those festivals also have the result \u201cAwarded\u201d?",
        "query": "SELECT * FROM music_festival WHERE category = \"Best Song\" AND RESULT = \"Awarded\"",
        "schema": "CREATE TABLE volume (Volume_ID NUMBER, Song TEXT); CREATE TABLE music_festival (Volume NUMBER, Category TEXT, ID NUMBER, Music_Festival TEXT, Result TEXT);"
      },
      {
        "question": "Show their ceremony dates.",
        "query": "SELECT date_of_ceremony FROM music_festival WHERE category = \"Best Song\" AND RESULT = \"Awarded\"",
        "schema": "CREATE TABLE music_festival (Date_of_ceremony TEXT, Music_Festival TEXT, Volume NUMBER, ID NUMBER, Result TEXT, Category TEXT); CREATE TABLE volume (Volume_ID NUMBER, Song TEXT);"
      }
    ],
    [
      {
        "question": "List the information for all volumes.",
        "query": "SELECT * FROM volume",
        "schema": "CREATE TABLE artist (Artist_ID NUMBER); CREATE TABLE volume (Artist_ID NUMBER, Song TEXT, Volume_ID NUMBER, Volume_Issue TEXT); CREATE TABLE music_festival (Volume NUMBER);"
      },
      {
        "question": "Order by increasing weeks on top.",
        "query": "SELECT * FROM volume ORDER BY weeks_on_top ASC",
        "schema": "CREATE TABLE volume (Weeks_on_Top NUMBER, Song TEXT, Artist_ID NUMBER, Volume_Issue TEXT, Volume_ID NUMBER); CREATE TABLE music_festival (Volume NUMBER); CREATE TABLE artist (Artist_ID NUMBER);"
      },
      {
        "question": "Which one had the minimum weeks on top?",
        "query": "SELECT volume_id FROM volume ORDER BY weeks_on_top ASC LIMIT 1",
        "schema": "CREATE TABLE music_festival (Volume NUMBER); CREATE TABLE artist (Artist_ID NUMBER); CREATE TABLE volume (Volume_Issue TEXT, Weeks_on_Top NUMBER, Song TEXT, Volume_ID NUMBER, Artist_ID NUMBER);"
      },
      {
        "question": "What was its issue date?",
        "query": "SELECT issue_date FROM volume ORDER BY weeks_on_top ASC LIMIT 1",
        "schema": "CREATE TABLE volume (Issue_Date TEXT, Volume_Issue TEXT, Song TEXT, Weeks_on_Top NUMBER, Artist_ID NUMBER, Volume_ID NUMBER); CREATE TABLE music_festival (Volume NUMBER); CREATE TABLE artist (Artist_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show the results of all music festivals.",
        "query": "SELECT RESULT FROM music_festival",
        "schema": "CREATE TABLE music_festival (ID NUMBER, Result TEXT, Music_Festival TEXT);"
      },
      {
        "question": "What is the total number of each result?",
        "query": "SELECT RESULT , count(*) FROM music_festival GROUP BY RESULT",
        "schema": "CREATE TABLE music_festival (Music_Festival TEXT, ID NUMBER, Result TEXT);"
      },
      {
        "question": "Order by decreasing order.",
        "query": "SELECT RESULT , count(*) FROM music_festival GROUP BY RESULT ORDER BY count(*) DESC",
        "schema": "CREATE TABLE music_festival (ID NUMBER, Result TEXT, Music_Festival TEXT);"
      }
    ]
  ],
  "baseball_1": [
    [
      {
        "question": "How many baseball players are there?",
        "query": "SELECT count(*) FROM player_college",
        "schema": "CREATE TABLE pitching_postseason (sv NUMBER, league_id TEXT, r NUMBER, sh NUMBER, hbp NUMBER, gs NUMBER, player_id TEXT, cg NUMBER, g_idp NUMBER, bfp NUMBER, team_id TEXT, baopp TEXT, sho NUMBER, so NUMBER, ibb NUMBER, wp NUMBER, h NUMBER, year NUMBER, gf NUMBER, bb NUMBER, bk NUMBER, hr NUMBER, ipouts NUMBER, sf NUMBER, er NUMBER, w NUMBER); CREATE TABLE manager_award_vote (player_id TEXT); CREATE TABLE batting_postseason (league_id TEXT, sh NUMBER, bb NUMBER, r NUMBER, h NUMBER, ab NUMBER, so NUMBER, hr NUMBER, sf NUMBER, ibb NUMBER, round TEXT, team_id TEXT, player_id TEXT, rbi NUMBER, g_idp NUMBER, triple NUMBER, double NUMBER, hbp NUMBER, year NUMBER, cs NUMBER, g NUMBER, sb NUMBER); CREATE TABLE player (death_state TEXT, death_country TEXT, player_id TEXT, death_month NUMBER, final_game TEXT, birth_state TEXT, birth_month NUMBER, bats TEXT, birth_city TEXT, retro_id TEXT, throws TEXT, birth_country TEXT, death_day NUMBER, bbref_id TEXT, death_year NUMBER, height NUMBER, weight NUMBER, name_given TEXT, birth_day NUMBER, birth_year NUMBER, name_last TEXT, death_city TEXT, name_first TEXT, debut TEXT); CREATE TABLE salary (player_id TEXT); CREATE TABLE appearances (g_c NUMBER, g_1b NUMBER, g_cf NUMBER, g_p NUMBER, g_pr NUMBER, g_3b NUMBER, g_rf NUMBER, g_defense NUMBER, league_id TEXT, player_id TEXT, g_2b NUMBER, g_lf NUMBER, g_ss NUMBER, gs NUMBER, g_ph NUMBER, g_batting NUMBER, g_all NUMBER, g_of NUMBER, g_dh NUMBER, team_id TEXT); CREATE TABLE fielding_postseason (round TEXT, e NUMBER, a NUMBER, league_id TEXT, tp NUMBER, dp NUMBER, cs NUMBER, g NUMBER, team_id TEXT, player_id TEXT, po NUMBER, sb NUMBER, inn_outs NUMBER, year NUMBER, pos TEXT, gs NUMBER, pb NUMBER); CREATE TABLE batting (sb NUMBER, r NUMBER, stint NUMBER, hbp NUMBER, ab NUMBER, sh NUMBER, year NUMBER, team_id TEXT, hr NUMBER, so NUMBER, sf NUMBER, rbi NUMBER, triple NUMBER, ibb NUMBER, g NUMBER, cs NUMBER, g_idp NUMBER, player_id TEXT, league_id TEXT, double NUMBER, bb NUMBER, h NUMBER); CREATE TABLE player_award (league_id TEXT, award_id TEXT, player_id TEXT); CREATE TABLE hall_of_fame (player_id TEXT); CREATE TABLE manager_award (player_id TEXT); CREATE TABLE manager_half (player_id TEXT); CREATE TABLE fielding_outfield (glf NUMBER, gcf NUMBER, grf NUMBER, player_id TEXT); CREATE TABLE park (park_alias TEXT, park_id TEXT); CREATE TABLE all_star (game_id TEXT, game_num NUMBER, player_id TEXT); CREATE TABLE player_college (college_id TEXT, player_id TEXT); CREATE TABLE player_award_vote (league_id TEXT, player_id TEXT, award_id TEXT); CREATE TABLE college (college_id TEXT); CREATE TABLE team_franchise (franchise_id TEXT); CREATE TABLE manager (league_id TEXT, player_id TEXT); CREATE TABLE fielding (cs NUMBER, player_id TEXT, pos TEXT, a NUMBER, gs NUMBER, zr NUMBER, sb NUMBER, team_id TEXT, e NUMBER, stint NUMBER, dp NUMBER, pb NUMBER, g NUMBER, league_id TEXT, po NUMBER, wp NUMBER, inn_outs NUMBER); CREATE TABLE pitching (year NUMBER, r NUMBER, gf NUMBER, h NUMBER, bb NUMBER, team_id TEXT, w NUMBER, player_id TEXT, bfp NUMBER, league_id TEXT, gs NUMBER, sf NUMBER, ibb NUMBER, l NUMBER, sh NUMBER, bk NUMBER, sho NUMBER, hbp NUMBER, ipouts NUMBER, er NUMBER, so NUMBER, cg NUMBER, g_idp NUMBER, hr NUMBER, g NUMBER, stint NUMBER, baopp NUMBER, era NUMBER, wp NUMBER, sv NUMBER);"
      },
      {
        "question": "How about the number of colleges?",
        "query": "SELECT count(*) FROM college",
        "schema": "CREATE TABLE all_star (player_id TEXT, game_num NUMBER, game_id TEXT); CREATE TABLE pitching_postseason (ipouts NUMBER, sh NUMBER, so NUMBER, player_id TEXT, sho NUMBER, gf NUMBER, h NUMBER, cg NUMBER, g_idp NUMBER, ibb NUMBER, r NUMBER, bb NUMBER, sv NUMBER, wp NUMBER, gs NUMBER, team_id TEXT, hbp NUMBER, er NUMBER, bk NUMBER, w NUMBER, year NUMBER, league_id TEXT, baopp TEXT, sf NUMBER, hr NUMBER, bfp NUMBER); CREATE TABLE manager (league_id TEXT, player_id TEXT); CREATE TABLE player_award_vote (league_id TEXT, player_id TEXT, award_id TEXT); CREATE TABLE batting (sf NUMBER, rbi NUMBER, stint NUMBER, cs NUMBER, so NUMBER, r NUMBER, player_id TEXT, triple NUMBER, year NUMBER, g NUMBER, hbp NUMBER, g_idp NUMBER, hr NUMBER, sb NUMBER, ab NUMBER, ibb NUMBER, double NUMBER, team_id TEXT, h NUMBER, sh NUMBER, league_id TEXT, bb NUMBER); CREATE TABLE home_game (games NUMBER); CREATE TABLE hall_of_fame (player_id TEXT); CREATE TABLE fielding_postseason (g NUMBER, player_id TEXT, round TEXT, pb NUMBER, sb NUMBER, dp NUMBER, po NUMBER, a NUMBER, year NUMBER, gs NUMBER, inn_outs NUMBER, tp NUMBER, league_id TEXT, cs NUMBER, e NUMBER, pos TEXT, team_id TEXT); CREATE TABLE player (death_day NUMBER, final_game TEXT, birth_country TEXT, throws TEXT, height NUMBER, retro_id TEXT, death_country TEXT, bats TEXT, birth_city TEXT, death_city TEXT, name_given TEXT, player_id TEXT, bbref_id TEXT, name_first TEXT, birth_month NUMBER, death_year NUMBER, birth_day NUMBER, birth_state TEXT, birth_year NUMBER, death_state TEXT, weight NUMBER, name_last TEXT, debut TEXT, death_month NUMBER); CREATE TABLE manager_award (player_id TEXT); CREATE TABLE team_franchise (franchise_id TEXT, na_assoc TEXT); CREATE TABLE fielding (cs NUMBER, sb NUMBER, inn_outs NUMBER, pb NUMBER, dp NUMBER, stint NUMBER, zr NUMBER, wp NUMBER, po NUMBER, e NUMBER, team_id TEXT, pos TEXT, gs NUMBER, a NUMBER, league_id TEXT, player_id TEXT, g NUMBER); CREATE TABLE pitching (year NUMBER, ibb NUMBER, ipouts NUMBER, er NUMBER, w NUMBER, g NUMBER, bk NUMBER, so NUMBER, sho NUMBER, gf NUMBER, sh NUMBER, g_idp NUMBER, cg NUMBER, hr NUMBER, era NUMBER, bb NUMBER, league_id TEXT, stint NUMBER, team_id TEXT, r NUMBER, hbp NUMBER, sv NUMBER, l NUMBER, gs NUMBER, sf NUMBER, h NUMBER, bfp NUMBER, player_id TEXT, wp NUMBER, baopp NUMBER); CREATE TABLE manager_half (player_id TEXT); CREATE TABLE college (name_full TEXT, college_id TEXT); CREATE TABLE salary (player_id TEXT); CREATE TABLE manager_award_vote (player_id TEXT); CREATE TABLE batting_postseason (g NUMBER, hr NUMBER, round TEXT, so NUMBER, g_idp NUMBER, year NUMBER, sb NUMBER, league_id TEXT, r NUMBER, sf NUMBER, h NUMBER, double NUMBER, sh NUMBER, team_id TEXT, ibb NUMBER, bb NUMBER, cs NUMBER, triple NUMBER, ab NUMBER, player_id TEXT, rbi NUMBER, hbp NUMBER); CREATE TABLE park (park_alias TEXT, park_id TEXT); CREATE TABLE player_college (player_id TEXT, college_id TEXT); CREATE TABLE appearances (g_all NUMBER, g_3b NUMBER, g_p NUMBER, g_ss NUMBER, g_1b NUMBER, g_2b NUMBER, gs NUMBER, g_lf NUMBER, league_id TEXT, g_c NUMBER, g_pr NUMBER, g_defense NUMBER, g_dh NUMBER, player_id TEXT, g_ph NUMBER, team_id TEXT, g_rf NUMBER, g_cf NUMBER, g_of NUMBER, g_batting NUMBER); CREATE TABLE fielding_outfield (grf NUMBER, gcf NUMBER, player_id TEXT, glf NUMBER); CREATE TABLE player_award (award_id TEXT, league_id TEXT, player_id TEXT);"
      },
      {
        "question": "How many baseball players are there in each college?",
        "query": "SELECT t1.name_full, count(*) FROM college AS t1 JOIN player_college AS t2 ON t1.college_id = t2.college_id GROUP BY t1.college_id;",
        "schema": "CREATE TABLE player_award_vote (award_id TEXT, league_id TEXT, player_id TEXT); CREATE TABLE player (death_year NUMBER, birth_city TEXT, debut TEXT, birth_state TEXT, name_last TEXT, death_day NUMBER, bbref_id TEXT, player_id TEXT, death_country TEXT, height NUMBER, birth_country TEXT, retro_id TEXT, name_given TEXT, birth_year NUMBER, death_month NUMBER, death_state TEXT, name_first TEXT, final_game TEXT, bats TEXT, birth_day NUMBER, birth_month NUMBER, throws TEXT, weight NUMBER, death_city TEXT); CREATE TABLE player_college (player_id TEXT, college_id TEXT); CREATE TABLE fielding_postseason (e NUMBER, cs NUMBER, league_id TEXT, tp NUMBER, po NUMBER, g NUMBER, a NUMBER, dp NUMBER, pos TEXT, sb NUMBER, year NUMBER, pb NUMBER, player_id TEXT, team_id TEXT, inn_outs NUMBER, round TEXT, gs NUMBER); CREATE TABLE park (park_alias TEXT, park_id TEXT); CREATE TABLE appearances (gs NUMBER, g_defense NUMBER, g_ss NUMBER, g_2b NUMBER, g_3b NUMBER, g_rf NUMBER, g_of NUMBER, g_1b NUMBER, player_id TEXT, g_batting NUMBER, g_p NUMBER, g_pr NUMBER, g_dh NUMBER, g_c NUMBER, league_id TEXT, g_ph NUMBER, g_cf NUMBER, g_all NUMBER, team_id TEXT, g_lf NUMBER); CREATE TABLE batting_postseason (year NUMBER, g NUMBER, r NUMBER, round TEXT, bb NUMBER, ibb NUMBER, triple NUMBER, h NUMBER, player_id TEXT, league_id TEXT, hbp NUMBER, sf NUMBER, cs NUMBER, g_idp NUMBER, team_id TEXT, ab NUMBER, hr NUMBER, double NUMBER, rbi NUMBER, sb NUMBER, sh NUMBER, so NUMBER); CREATE TABLE manager_half (player_id TEXT); CREATE TABLE manager (player_id TEXT, league_id TEXT); CREATE TABLE player_award (player_id TEXT, award_id TEXT, league_id TEXT); CREATE TABLE pitching (baopp NUMBER, w NUMBER, year NUMBER, era NUMBER, hr NUMBER, gs NUMBER, sv NUMBER, cg NUMBER, r NUMBER, sho NUMBER, bb NUMBER, g_idp NUMBER, gf NUMBER, sh NUMBER, stint NUMBER, h NUMBER, bfp NUMBER, er NUMBER, l NUMBER, wp NUMBER, ibb NUMBER, hbp NUMBER, bk NUMBER, g NUMBER, so NUMBER, league_id TEXT, player_id TEXT, sf NUMBER, ipouts NUMBER, team_id TEXT); CREATE TABLE fielding (pos TEXT, gs NUMBER, stint NUMBER, sb NUMBER, player_id TEXT, wp NUMBER, e NUMBER, pb NUMBER, dp NUMBER, g NUMBER, inn_outs NUMBER, zr NUMBER, a NUMBER, league_id TEXT, po NUMBER, team_id TEXT, cs NUMBER); CREATE TABLE manager_award_vote (player_id TEXT); CREATE TABLE home_game (games NUMBER); CREATE TABLE all_star (game_num NUMBER, game_id TEXT, player_id TEXT); CREATE TABLE manager_award (player_id TEXT); CREATE TABLE team_franchise (franchise_id TEXT, na_assoc TEXT); CREATE TABLE pitching_postseason (baopp TEXT, r NUMBER, sh NUMBER, wp NUMBER, w NUMBER, so NUMBER, g_idp NUMBER, hr NUMBER, ibb NUMBER, bb NUMBER, bfp NUMBER, gs NUMBER, hbp NUMBER, year NUMBER, league_id TEXT, sv NUMBER, ipouts NUMBER, sf NUMBER, bk NUMBER, player_id TEXT, team_id TEXT, sho NUMBER, cg NUMBER, gf NUMBER, h NUMBER, er NUMBER); CREATE TABLE batting (player_id TEXT, league_id TEXT, ibb NUMBER, year NUMBER, rbi NUMBER, sf NUMBER, sb NUMBER, g_idp NUMBER, ab NUMBER, sh NUMBER, team_id TEXT, g NUMBER, so NUMBER, bb NUMBER, cs NUMBER, h NUMBER, r NUMBER, hr NUMBER, double NUMBER, triple NUMBER, stint NUMBER, hbp NUMBER); CREATE TABLE college (name_full TEXT, college_id TEXT); CREATE TABLE fielding_outfield (player_id TEXT, glf NUMBER, grf NUMBER, gcf NUMBER); CREATE TABLE salary (player_id TEXT); CREATE TABLE hall_of_fame (player_id TEXT);"
      },
      {
        "question": "Can you order the results by the number of baseball players in descending order?",
        "query": "SELECT t1.name_full, count(*) FROM college AS t1 JOIN player_college AS t2 ON t1.college_id = t2.college_id GROUP BY t1.college_id ORDER BY count(*) DESC",
        "schema": "CREATE TABLE appearances (player_id TEXT, g_batting NUMBER, g_p NUMBER, g_dh NUMBER, g_c NUMBER, g_1b NUMBER, g_2b NUMBER, g_of NUMBER, g_defense NUMBER, g_3b NUMBER, gs NUMBER, g_cf NUMBER, g_lf NUMBER, g_rf NUMBER, g_ph NUMBER, g_pr NUMBER, team_id TEXT, g_ss NUMBER, league_id TEXT, g_all NUMBER); CREATE TABLE player_award_vote (league_id TEXT, player_id TEXT, award_id TEXT); CREATE TABLE player_college (college_id TEXT, player_id TEXT); CREATE TABLE college (name_full TEXT, college_id TEXT); CREATE TABLE manager (league_id TEXT, player_id TEXT); CREATE TABLE home_game (games NUMBER); CREATE TABLE fielding (wp NUMBER, zr NUMBER, stint NUMBER, league_id TEXT, po NUMBER, team_id TEXT, inn_outs NUMBER, a NUMBER, pb NUMBER, dp NUMBER, pos TEXT, e NUMBER, player_id TEXT, gs NUMBER, cs NUMBER, sb NUMBER, g NUMBER); CREATE TABLE player_award (league_id TEXT, player_id TEXT, award_id TEXT); CREATE TABLE fielding_postseason (e NUMBER, pos TEXT, g NUMBER, gs NUMBER, cs NUMBER, pb NUMBER, a NUMBER, player_id TEXT, year NUMBER, league_id TEXT, team_id TEXT, sb NUMBER, po NUMBER, inn_outs NUMBER, dp NUMBER, tp NUMBER, round TEXT); CREATE TABLE manager_award (player_id TEXT); CREATE TABLE manager_award_vote (player_id TEXT); CREATE TABLE batting_postseason (bb NUMBER, so NUMBER, h NUMBER, league_id TEXT, year NUMBER, sf NUMBER, triple NUMBER, ab NUMBER, g_idp NUMBER, r NUMBER, sb NUMBER, team_id TEXT, sh NUMBER, double NUMBER, ibb NUMBER, hr NUMBER, hbp NUMBER, g NUMBER, player_id TEXT, rbi NUMBER, cs NUMBER, round TEXT); CREATE TABLE pitching (er NUMBER, league_id TEXT, baopp NUMBER, sv NUMBER, cg NUMBER, player_id TEXT, so NUMBER, sho NUMBER, bfp NUMBER, bk NUMBER, sf NUMBER, ibb NUMBER, h NUMBER, gf NUMBER, year NUMBER, l NUMBER, g_idp NUMBER, ipouts NUMBER, era NUMBER, hr NUMBER, team_id TEXT, bb NUMBER, g NUMBER, hbp NUMBER, r NUMBER, wp NUMBER, sh NUMBER, w NUMBER, stint NUMBER, gs NUMBER); CREATE TABLE manager_half (player_id TEXT); CREATE TABLE batting (g_idp NUMBER, stint NUMBER, player_id TEXT, triple NUMBER, g NUMBER, hbp NUMBER, year NUMBER, team_id TEXT, ab NUMBER, ibb NUMBER, rbi NUMBER, sb NUMBER, r NUMBER, cs NUMBER, sf NUMBER, double NUMBER, bb NUMBER, h NUMBER, sh NUMBER, league_id TEXT, hr NUMBER, so NUMBER); CREATE TABLE team_franchise (na_assoc TEXT, franchise_id TEXT); CREATE TABLE pitching_postseason (bk NUMBER, sh NUMBER, gs NUMBER, league_id TEXT, cg NUMBER, ibb NUMBER, ipouts NUMBER, er NUMBER, team_id TEXT, baopp TEXT, h NUMBER, g_idp NUMBER, year NUMBER, bfp NUMBER, so NUMBER, sv NUMBER, sho NUMBER, bb NUMBER, r NUMBER, w NUMBER, hbp NUMBER, gf NUMBER, hr NUMBER, wp NUMBER, player_id TEXT, sf NUMBER); CREATE TABLE park (park_alias TEXT, park_id TEXT); CREATE TABLE salary (player_id TEXT); CREATE TABLE all_star (game_id TEXT, player_id TEXT, game_num NUMBER); CREATE TABLE hall_of_fame (player_id TEXT); CREATE TABLE fielding_outfield (grf NUMBER, player_id TEXT, glf NUMBER, gcf NUMBER); CREATE TABLE player (retro_id TEXT, birth_state TEXT, birth_year NUMBER, death_month NUMBER, debut TEXT, name_first TEXT, birth_city TEXT, name_last TEXT, height NUMBER, bats TEXT, player_id TEXT, death_state TEXT, death_country TEXT, death_day NUMBER, death_city TEXT, bbref_id TEXT, final_game TEXT, name_given TEXT, weight NUMBER, death_year NUMBER, birth_month NUMBER, throws TEXT, birth_country TEXT, birth_day NUMBER);"
      },
      {
        "question": "Please give me the full name and id of the first college.",
        "query": "SELECT t1.name_full , t1.college_id FROM college AS t1 JOIN player_college AS t2 ON t1.college_id = t2.college_id GROUP BY t1.college_id ORDER BY count(*) DESC LIMIT 1;",
        "schema": "CREATE TABLE manager_award (player_id TEXT); CREATE TABLE pitching_postseason (sho NUMBER, w NUMBER, wp NUMBER, baopp TEXT, player_id TEXT, league_id TEXT, h NUMBER, year NUMBER, gs NUMBER, hr NUMBER, cg NUMBER, so NUMBER, ipouts NUMBER, hbp NUMBER, er NUMBER, ibb NUMBER, sh NUMBER, bk NUMBER, g_idp NUMBER, sf NUMBER, r NUMBER, bb NUMBER, bfp NUMBER, sv NUMBER, team_id TEXT, gf NUMBER); CREATE TABLE batting (ab NUMBER, player_id TEXT, sb NUMBER, hbp NUMBER, sh NUMBER, year NUMBER, g NUMBER, h NUMBER, triple NUMBER, g_idp NUMBER, cs NUMBER, ibb NUMBER, r NUMBER, double NUMBER, stint NUMBER, so NUMBER, sf NUMBER, bb NUMBER, league_id TEXT, hr NUMBER, team_id TEXT, rbi NUMBER); CREATE TABLE manager_award_vote (player_id TEXT); CREATE TABLE player_college (year NUMBER, player_id TEXT, college_id TEXT); CREATE TABLE fielding_postseason (a NUMBER, cs NUMBER, inn_outs NUMBER, sb NUMBER, gs NUMBER, league_id TEXT, team_id TEXT, round TEXT, player_id TEXT, pb NUMBER, e NUMBER, dp NUMBER, po NUMBER, tp NUMBER, pos TEXT, g NUMBER, year NUMBER); CREATE TABLE team_franchise (na_assoc TEXT, franchise_id TEXT); CREATE TABLE home_game (games NUMBER); CREATE TABLE hall_of_fame (player_id TEXT); CREATE TABLE manager (player_id TEXT, league_id TEXT); CREATE TABLE fielding (stint NUMBER, g NUMBER, a NUMBER, pb NUMBER, inn_outs NUMBER, wp NUMBER, gs NUMBER, league_id TEXT, zr NUMBER, pos TEXT, e NUMBER, dp NUMBER, team_id TEXT, cs NUMBER, po NUMBER, sb NUMBER, player_id TEXT); CREATE TABLE player_award (league_id TEXT, player_id TEXT, award_id TEXT); CREATE TABLE college (name_full TEXT, college_id TEXT); CREATE TABLE player (weight NUMBER, birth_day NUMBER, name_given TEXT, name_last TEXT, retro_id TEXT, birth_year NUMBER, height NUMBER, death_year NUMBER, bats TEXT, player_id TEXT, birth_state TEXT, death_day NUMBER, death_country TEXT, death_state TEXT, birth_city TEXT, throws TEXT, death_city TEXT, bbref_id TEXT, birth_month NUMBER, name_first TEXT, debut TEXT, death_month NUMBER, final_game TEXT, birth_country TEXT); CREATE TABLE all_star (player_id TEXT, game_num NUMBER, game_id TEXT); CREATE TABLE fielding_outfield (gcf NUMBER, glf NUMBER, player_id TEXT, grf NUMBER); CREATE TABLE player_award_vote (award_id TEXT, player_id TEXT, league_id TEXT); CREATE TABLE pitching (gf NUMBER, bk NUMBER, era NUMBER, wp NUMBER, player_id TEXT, cg NUMBER, league_id TEXT, w NUMBER, ipouts NUMBER, sf NUMBER, year NUMBER, team_id TEXT, er NUMBER, h NUMBER, hr NUMBER, hbp NUMBER, gs NUMBER, ibb NUMBER, g_idp NUMBER, r NUMBER, bb NUMBER, g NUMBER, l NUMBER, sv NUMBER, stint NUMBER, sh NUMBER, bfp NUMBER, so NUMBER, baopp NUMBER, sho NUMBER); CREATE TABLE appearances (g_dh NUMBER, gs NUMBER, g_rf NUMBER, g_c NUMBER, g_3b NUMBER, player_id TEXT, g_2b NUMBER, g_1b NUMBER, g_pr NUMBER, g_defense NUMBER, team_id TEXT, g_ph NUMBER, g_cf NUMBER, g_batting NUMBER, g_of NUMBER, league_id TEXT, g_lf NUMBER, g_all NUMBER, g_ss NUMBER, g_p NUMBER); CREATE TABLE park (park_id TEXT, park_alias TEXT); CREATE TABLE salary (player_id TEXT); CREATE TABLE manager_half (player_id TEXT); CREATE TABLE batting_postseason (rbi NUMBER, g_idp NUMBER, sh NUMBER, ab NUMBER, hr NUMBER, so NUMBER, triple NUMBER, bb NUMBER, h NUMBER, sf NUMBER, year NUMBER, player_id TEXT, ibb NUMBER, league_id TEXT, team_id TEXT, double NUMBER, hbp NUMBER, r NUMBER, cs NUMBER, g NUMBER, round TEXT, sb NUMBER);"
      }
    ],
    [
      {
        "question": "What is the average salary of the players?",
        "query": "SELECT avg(salary) FROM salary",
        "schema": "CREATE TABLE all_star (player_id TEXT, gp NUMBER); CREATE TABLE hall_of_fame (player_id TEXT); CREATE TABLE player (player_id TEXT); CREATE TABLE salary (player_id TEXT, team_id TEXT, year NUMBER, salary NUMBER, league_id TEXT); CREATE TABLE batting (player_id TEXT, sb NUMBER);"
      },
      {
        "question": "How about for each team?",
        "query": "SELECT t2.team_id_br, avg(t1.salary) FROM salary AS t1 JOIN team AS t2 ON t1.team_id = t2.team_id_br GROUP BY t2.team_id_br",
        "schema": "CREATE TABLE team_half (half NUMBER, league_id TEXT, team_id TEXT, div_id TEXT, l NUMBER, w NUMBER, rank NUMBER, g NUMBER); CREATE TABLE all_star (gp NUMBER, team_id TEXT, player_id TEXT, league_id TEXT); CREATE TABLE manager_half (team_id TEXT); CREATE TABLE manager (team_id TEXT); CREATE TABLE team (soa NUMBER, ab NUMBER, r NUMBER, name TEXT, cg NUMBER, triple NUMBER, year NUMBER, g NUMBER, league_id TEXT, double NUMBER, lg_win TEXT, rank NUMBER, ppf NUMBER, div_win TEXT, sv NUMBER, ra NUMBER, team_id_retro TEXT, sb NUMBER, cs NUMBER, franchise_id TEXT, bb NUMBER, l NUMBER, sf NUMBER, er NUMBER, team_id TEXT, e NUMBER, ha NUMBER, div_id TEXT, ipouts NUMBER, sho NUMBER, fp NUMBER, team_id_br TEXT, wc_win TEXT, dp NUMBER, w NUMBER, ghome NUMBER, bba NUMBER, so NUMBER, hbp NUMBER, bpf NUMBER, park TEXT, team_id_lahman45 TEXT); CREATE TABLE team_franchise (franchise_name TEXT, na_assoc TEXT, franchise_id TEXT); CREATE TABLE fielding (team_id TEXT); CREATE TABLE salary (player_id TEXT, year NUMBER, team_id TEXT, salary NUMBER, league_id TEXT); CREATE TABLE player (player_id TEXT); CREATE TABLE batting (player_id TEXT, sb NUMBER); CREATE TABLE hall_of_fame (player_id TEXT);"
      },
      {
        "question": "How about for the team 'Boston Red Stockings' ?",
        "query": "SELECT avg(t1.salary) FROM salary AS t1 JOIN team AS t2 ON t1.team_id = t2.team_id_br WHERE t2.name = 'Boston Red Stockings'",
        "schema": "CREATE TABLE fielding (team_id TEXT); CREATE TABLE manager (team_id TEXT); CREATE TABLE team (l NUMBER, hbp NUMBER, team_id TEXT, sf NUMBER, e NUMBER, franchise_id TEXT, ab NUMBER, sv NUMBER, cs NUMBER, g NUMBER, sb NUMBER, cg NUMBER, div_win TEXT, lg_win TEXT, team_id_lahman45 TEXT, bb NUMBER, ipouts NUMBER, team_id_retro TEXT, name TEXT, rank NUMBER, hra NUMBER, ppf NUMBER, er NUMBER, ghome NUMBER, r NUMBER, fp NUMBER, so NUMBER, double NUMBER, ha NUMBER, div_id TEXT, bba NUMBER, league_id TEXT, triple NUMBER, ra NUMBER, dp NUMBER, year NUMBER, soa NUMBER, wc_win TEXT, park TEXT, sho NUMBER, team_id_br TEXT, w NUMBER, bpf NUMBER); CREATE TABLE salary (year NUMBER, team_id TEXT, salary NUMBER, league_id TEXT, player_id TEXT); CREATE TABLE hall_of_fame (player_id TEXT); CREATE TABLE batting (sb NUMBER, player_id TEXT); CREATE TABLE all_star (player_id TEXT, gp NUMBER, league_id TEXT, team_id TEXT); CREATE TABLE manager_half (team_id TEXT); CREATE TABLE team_franchise (franchise_name TEXT, franchise_id TEXT, na_assoc TEXT); CREATE TABLE player (player_id TEXT); CREATE TABLE team_half (rank NUMBER, half NUMBER, team_id TEXT, g NUMBER, w NUMBER, div_id TEXT, league_id TEXT, l NUMBER);"
      }
    ],
    [
      {
        "question": "How many players have participated in all star games?",
        "query": "SELECT count(*) FROM player AS t1 JOIN all_star AS t2 ON t1.player_id = t2.player_id",
        "schema": "CREATE TABLE fielding_postseason (po NUMBER, pb NUMBER, dp NUMBER, inn_outs NUMBER, g NUMBER, tp NUMBER, a NUMBER, sb NUMBER, team_id TEXT, pos TEXT, e NUMBER, cs NUMBER, league_id TEXT, year NUMBER, player_id TEXT, gs NUMBER, round TEXT); CREATE TABLE fielding_outfield (player_id TEXT); CREATE TABLE player_award_vote (league_id TEXT, player_id TEXT, award_id TEXT); CREATE TABLE all_star (game_num NUMBER, gp NUMBER, player_id TEXT, game_id TEXT); CREATE TABLE fielding (player_id TEXT); CREATE TABLE pitching_postseason (hbp NUMBER, team_id TEXT, gf NUMBER, l NUMBER, ibb NUMBER, wp NUMBER, league_id TEXT, baopp TEXT, bk NUMBER, r NUMBER, cg NUMBER, sh NUMBER, sv NUMBER, bb NUMBER, g_idp NUMBER, w NUMBER, g NUMBER, ipouts NUMBER, round TEXT, era NUMBER, year NUMBER, gs NUMBER, bfp NUMBER, player_id TEXT, h NUMBER, er NUMBER, hr NUMBER, sho NUMBER, so NUMBER, sf NUMBER); CREATE TABLE appearances (g_pr NUMBER, g_dh NUMBER, g_ss NUMBER, g_3b NUMBER, g_cf NUMBER, gs NUMBER, g_lf NUMBER, year NUMBER, g_of NUMBER, g_1b NUMBER, league_id TEXT, g_2b NUMBER, g_c NUMBER, team_id TEXT, g_all NUMBER, g_rf NUMBER, g_ph NUMBER, player_id TEXT, g_batting NUMBER, g_p NUMBER); CREATE TABLE batting (player_id TEXT); CREATE TABLE manager_award (player_id TEXT); CREATE TABLE batting_postseason (team_id TEXT, ab NUMBER, g_idp NUMBER, hbp NUMBER, league_id TEXT, bb NUMBER, sf NUMBER, so NUMBER, triple NUMBER, sh NUMBER, ibb NUMBER, cs NUMBER, hr NUMBER, sb NUMBER, round TEXT, player_id TEXT, h NUMBER, rbi NUMBER, r NUMBER, double NUMBER, g NUMBER, year NUMBER); CREATE TABLE player_college (player_id TEXT); CREATE TABLE player (bbref_id TEXT, death_year NUMBER, name_first TEXT, birth_day NUMBER, name_given TEXT, death_month NUMBER, weight NUMBER, birth_city TEXT, death_day NUMBER, bats TEXT, birth_year NUMBER, death_city TEXT, birth_country TEXT, retro_id TEXT, debut TEXT, birth_state TEXT, final_game TEXT, death_country TEXT, height NUMBER, death_state TEXT, name_last TEXT, birth_month NUMBER, player_id TEXT, throws TEXT); CREATE TABLE hall_of_fame (player_id TEXT); CREATE TABLE postseason (round TEXT); CREATE TABLE manager_award_vote (player_id TEXT); CREATE TABLE player_award (player_id TEXT);"
      },
      {
        "question": "How about in 1998?",
        "query": "SELECT count(*) FROM player AS t1 JOIN all_star AS t2 ON t1.player_id = t2.player_id WHERE YEAR = 1998",
        "schema": "CREATE TABLE all_star (gp NUMBER, game_id TEXT, player_id TEXT, game_num NUMBER, year NUMBER); CREATE TABLE fielding_outfield (player_id TEXT); CREATE TABLE fielding_postseason (g NUMBER, gs NUMBER, team_id TEXT, e NUMBER, pos TEXT, player_id TEXT, year NUMBER, a NUMBER, tp NUMBER, cs NUMBER, sb NUMBER, pb NUMBER, po NUMBER, dp NUMBER, round TEXT, inn_outs NUMBER, league_id TEXT); CREATE TABLE batting_postseason (so NUMBER, cs NUMBER, round TEXT, sf NUMBER, double NUMBER, ibb NUMBER, rbi NUMBER, bb NUMBER, hr NUMBER, r NUMBER, year NUMBER, ab NUMBER, team_id TEXT, triple NUMBER, g_idp NUMBER, sh NUMBER, sb NUMBER, g NUMBER, league_id TEXT, player_id TEXT, hbp NUMBER, h NUMBER); CREATE TABLE player_award (year NUMBER, player_id TEXT); CREATE TABLE home_game (year NUMBER); CREATE TABLE player (birth_country TEXT, death_year NUMBER, birth_state TEXT, birth_day NUMBER, bats TEXT, name_last TEXT, retro_id TEXT, player_id TEXT, name_given TEXT, death_country TEXT, throws TEXT, birth_city TEXT, birth_month NUMBER, debut TEXT, birth_year NUMBER, death_city TEXT, final_game TEXT, death_month NUMBER, weight NUMBER, death_state TEXT, death_day NUMBER, height NUMBER, bbref_id TEXT, name_first TEXT); CREATE TABLE appearances (g_1b NUMBER, g_p NUMBER, g_c NUMBER, year NUMBER, g_of NUMBER, g_batting NUMBER, player_id TEXT, g_ph NUMBER, g_pr NUMBER, g_ss NUMBER, g_cf NUMBER, g_rf NUMBER, team_id TEXT, g_3b NUMBER, gs NUMBER, league_id TEXT, g_all NUMBER, g_2b NUMBER, g_lf NUMBER, g_dh NUMBER); CREATE TABLE fielding (player_id TEXT, year NUMBER); CREATE TABLE player_college (year NUMBER, player_id TEXT); CREATE TABLE player_award_vote (award_id TEXT, player_id TEXT, league_id TEXT, year NUMBER); CREATE TABLE manager_award_vote (player_id TEXT, year NUMBER); CREATE TABLE manager_award (player_id TEXT); CREATE TABLE pitching (year NUMBER); CREATE TABLE postseason (round TEXT, year NUMBER); CREATE TABLE batting (year NUMBER, player_id TEXT); CREATE TABLE team (year NUMBER); CREATE TABLE hall_of_fame (player_id TEXT, yearid NUMBER); CREATE TABLE pitching_postseason (gf NUMBER, hr NUMBER, bk NUMBER, player_id TEXT, l NUMBER, gs NUMBER, g_idp NUMBER, w NUMBER, team_id TEXT, round TEXT, sv NUMBER, baopp TEXT, er NUMBER, wp NUMBER, hbp NUMBER, bfp NUMBER, ipouts NUMBER, so NUMBER, league_id TEXT, ibb NUMBER, sf NUMBER, g NUMBER, sho NUMBER, year NUMBER, h NUMBER, sh NUMBER, bb NUMBER, era NUMBER, cg NUMBER, r NUMBER);"
      },
      {
        "question": "Please list the first and last names of these players.",
        "query": "SELECT name_first , name_last FROM player AS t1 JOIN all_star AS t2 ON t1.player_id = t2.player_id WHERE YEAR = 1998",
        "schema": "CREATE TABLE player_college (year NUMBER, player_id TEXT); CREATE TABLE home_game (year NUMBER); CREATE TABLE batting_postseason (sh NUMBER, year NUMBER, h NUMBER, round TEXT, so NUMBER, hr NUMBER, ibb NUMBER, bb NUMBER, g NUMBER, cs NUMBER, double NUMBER, player_id TEXT, sb NUMBER, g_idp NUMBER, r NUMBER, hbp NUMBER, rbi NUMBER, triple NUMBER, sf NUMBER, team_id TEXT, league_id TEXT, ab NUMBER); CREATE TABLE pitching_postseason (hr NUMBER, ibb NUMBER, sho NUMBER, era NUMBER, w NUMBER, cg NUMBER, sv NUMBER, player_id TEXT, wp NUMBER, ipouts NUMBER, sh NUMBER, hbp NUMBER, team_id TEXT, league_id TEXT, l NUMBER, r NUMBER, bfp NUMBER, gf NUMBER, bk NUMBER, gs NUMBER, er NUMBER, sf NUMBER, h NUMBER, so NUMBER, bb NUMBER, round TEXT, g_idp NUMBER, year NUMBER, baopp TEXT, g NUMBER); CREATE TABLE all_star (player_id TEXT, game_id TEXT, game_num NUMBER, gp NUMBER, year NUMBER); CREATE TABLE fielding (player_id TEXT, year NUMBER); CREATE TABLE pitching (year NUMBER); CREATE TABLE postseason (year NUMBER, round TEXT); CREATE TABLE manager_award_vote (player_id TEXT, year NUMBER); CREATE TABLE hall_of_fame (player_id TEXT, yearid NUMBER); CREATE TABLE fielding_outfield (player_id TEXT); CREATE TABLE team (year NUMBER); CREATE TABLE appearances (year NUMBER, g_cf NUMBER, g_batting NUMBER, league_id TEXT, g_of NUMBER, g_ph NUMBER, g_p NUMBER, g_3b NUMBER, g_1b NUMBER, g_pr NUMBER, player_id TEXT, g_rf NUMBER, g_c NUMBER, gs NUMBER, g_dh NUMBER, g_lf NUMBER, g_2b NUMBER, team_id TEXT, g_ss NUMBER, g_all NUMBER); CREATE TABLE batting (player_id TEXT, year NUMBER); CREATE TABLE fielding_postseason (player_id TEXT, e NUMBER, round TEXT, team_id TEXT, dp NUMBER, tp NUMBER, pb NUMBER, a NUMBER, cs NUMBER, year NUMBER, pos TEXT, po NUMBER, g NUMBER, inn_outs NUMBER, league_id TEXT, gs NUMBER, sb NUMBER); CREATE TABLE player_award (player_id TEXT, year NUMBER); CREATE TABLE player (death_city TEXT, birth_city TEXT, death_country TEXT, name_given TEXT, birth_year NUMBER, debut TEXT, final_game TEXT, death_month NUMBER, height NUMBER, bbref_id TEXT, retro_id TEXT, throws TEXT, name_first TEXT, birth_month NUMBER, death_day NUMBER, player_id TEXT, death_year NUMBER, death_state TEXT, birth_country TEXT, weight NUMBER, bats TEXT, birth_day NUMBER, name_last TEXT, birth_state TEXT); CREATE TABLE manager_award (player_id TEXT); CREATE TABLE player_award_vote (league_id TEXT, player_id TEXT, award_id TEXT, year NUMBER);"
      }
    ],
    [
      {
        "question": "How many players have participated in all star games?",
        "query": "SELECT count(*) FROM player AS t1 JOIN all_star AS t2 ON t1.player_id = t2.player_id",
        "schema": "CREATE TABLE player (death_state TEXT, death_country TEXT, final_game TEXT, birth_country TEXT, retro_id TEXT, birth_year NUMBER, bats TEXT, death_year NUMBER, name_last TEXT, name_first TEXT, player_id TEXT, throws TEXT, death_month NUMBER, death_city TEXT, birth_day NUMBER, debut TEXT, birth_month NUMBER, death_day NUMBER, height NUMBER, birth_city TEXT, name_given TEXT, bbref_id TEXT); CREATE TABLE fielding_postseason (sb NUMBER, po NUMBER, gs NUMBER, g NUMBER, team_id TEXT, league_id TEXT, e NUMBER, inn_outs NUMBER, tp NUMBER, pb NUMBER, round TEXT, cs NUMBER, player_id TEXT, a NUMBER, year NUMBER, dp NUMBER, pos TEXT); CREATE TABLE manager_award (player_id TEXT); CREATE TABLE hall_of_fame (player_id TEXT); CREATE TABLE pitching_postseason (l NUMBER, era NUMBER, sv NUMBER, sh NUMBER, w NUMBER, er NUMBER, gf NUMBER, g NUMBER, hbp NUMBER, team_id TEXT, league_id TEXT, wp NUMBER, ibb NUMBER, gs NUMBER, ipouts NUMBER, g_idp NUMBER, cg NUMBER, h NUMBER, sf NUMBER, bk NUMBER, bfp NUMBER, r NUMBER, round TEXT, bb NUMBER, player_id TEXT, hr NUMBER, baopp TEXT, so NUMBER, year NUMBER, sho NUMBER); CREATE TABLE postseason (round TEXT); CREATE TABLE appearances (g_dh NUMBER, g_pr NUMBER, gs NUMBER, g_rf NUMBER, g_defense NUMBER, league_id TEXT, g_of NUMBER, g_lf NUMBER, g_all NUMBER, g_batting NUMBER, g_ss NUMBER, g_2b NUMBER, player_id TEXT, g_ph NUMBER, team_id TEXT, g_p NUMBER, g_cf NUMBER, g_1b NUMBER, g_3b NUMBER, g_c NUMBER); CREATE TABLE batting_postseason (cs NUMBER, player_id TEXT, hbp NUMBER, so NUMBER, h NUMBER, r NUMBER, rbi NUMBER, double NUMBER, team_id TEXT, sb NUMBER, sf NUMBER, triple NUMBER, g_idp NUMBER, ibb NUMBER, year NUMBER, bb NUMBER, round TEXT, sh NUMBER, ab NUMBER, league_id TEXT, hr NUMBER, g NUMBER); CREATE TABLE player_award (player_id TEXT); CREATE TABLE player_award_vote (player_id TEXT); CREATE TABLE all_star (game_num NUMBER, gp NUMBER, player_id TEXT, game_id TEXT); CREATE TABLE batting (player_id TEXT); CREATE TABLE fielding (player_id TEXT); CREATE TABLE fielding_outfield (player_id TEXT);"
      },
      {
        "question": "Among these players, how many times did they participate in all star game?",
        "query": "SELECT t1.name_first , t1.name_last , count(*) FROM player AS t1 JOIN all_star AS t2 ON t1.player_id = t2.player_id GROUP BY t1.player_id",
        "schema": "CREATE TABLE manager_award (player_id TEXT); CREATE TABLE pitching_postseason (team_id TEXT, wp NUMBER, gf NUMBER, sv NUMBER, h NUMBER, league_id TEXT, gs NUMBER, bk NUMBER, g_idp NUMBER, sho NUMBER, ibb NUMBER, sh NUMBER, sf NUMBER, so NUMBER, year NUMBER, bfp NUMBER, round TEXT, player_id TEXT, w NUMBER, hbp NUMBER, ipouts NUMBER, er NUMBER, r NUMBER, baopp TEXT, era NUMBER, g NUMBER, l NUMBER, cg NUMBER, bb NUMBER, hr NUMBER); CREATE TABLE batting (player_id TEXT); CREATE TABLE player_award (player_id TEXT); CREATE TABLE batting_postseason (r NUMBER, triple NUMBER, rbi NUMBER, sb NUMBER, hbp NUMBER, sh NUMBER, so NUMBER, bb NUMBER, h NUMBER, g NUMBER, sf NUMBER, league_id TEXT, ab NUMBER, round TEXT, cs NUMBER, team_id TEXT, ibb NUMBER, hr NUMBER, year NUMBER, g_idp NUMBER, player_id TEXT, double NUMBER); CREATE TABLE player_award_vote (player_id TEXT); CREATE TABLE fielding (player_id TEXT); CREATE TABLE appearances (team_id TEXT, g_of NUMBER, g_dh NUMBER, player_id TEXT, g_cf NUMBER, g_2b NUMBER, g_3b NUMBER, g_rf NUMBER, g_ph NUMBER, g_ss NUMBER, g_all NUMBER, g_1b NUMBER, g_defense NUMBER, league_id TEXT, gs NUMBER, g_lf NUMBER, g_pr NUMBER, year NUMBER, g_c NUMBER, g_batting NUMBER, g_p NUMBER); CREATE TABLE hall_of_fame (player_id TEXT); CREATE TABLE fielding_postseason (e NUMBER, a NUMBER, sb NUMBER, team_id TEXT, inn_outs NUMBER, gs NUMBER, round TEXT, po NUMBER, tp NUMBER, dp NUMBER, year NUMBER, pos TEXT, pb NUMBER, cs NUMBER, player_id TEXT, g NUMBER, league_id TEXT); CREATE TABLE all_star (game_id TEXT, player_id TEXT, gp NUMBER, game_num NUMBER); CREATE TABLE fielding_outfield (player_id TEXT); CREATE TABLE postseason (round TEXT, year NUMBER); CREATE TABLE player (death_month NUMBER, birth_country TEXT, bbref_id TEXT, player_id TEXT, bats TEXT, death_state TEXT, birth_day NUMBER, name_first TEXT, death_year NUMBER, height NUMBER, throws TEXT, birth_month NUMBER, retro_id TEXT, debut TEXT, final_game TEXT, death_country TEXT, birth_state TEXT, birth_city TEXT, name_last TEXT, name_given TEXT, birth_year NUMBER, weight NUMBER, death_day NUMBER, death_city TEXT);"
      },
      {
        "question": "Could you please give the top 10 players that have the most all star experience?",
        "query": "SELECT t1.name_first , t1.name_last , count(*) FROM player AS t1 JOIN all_star AS t2 ON t1.player_id = t2.player_id GROUP BY t1.player_id ORDER BY count(*) DESC LIMIT 10",
        "schema": "CREATE TABLE batting (player_id TEXT); CREATE TABLE player (death_month NUMBER, death_year NUMBER, bbref_id TEXT, final_game TEXT, throws TEXT, player_id TEXT, name_first TEXT, birth_city TEXT, birth_state TEXT, death_state TEXT, death_city TEXT, name_given TEXT, birth_day NUMBER, bats TEXT, name_last TEXT, retro_id TEXT, debut TEXT, death_day NUMBER, birth_country TEXT, weight NUMBER, birth_month NUMBER, height NUMBER, death_country TEXT, birth_year NUMBER); CREATE TABLE batting_postseason (year NUMBER, rbi NUMBER, double NUMBER, team_id TEXT, g_idp NUMBER, h NUMBER, sf NUMBER, hr NUMBER, so NUMBER, ibb NUMBER, cs NUMBER, r NUMBER, triple NUMBER, round TEXT, ab NUMBER, league_id TEXT, player_id TEXT, hbp NUMBER, sh NUMBER, sb NUMBER, g NUMBER, bb NUMBER); CREATE TABLE manager_award (player_id TEXT); CREATE TABLE player_award (player_id TEXT); CREATE TABLE postseason (year NUMBER, round TEXT); CREATE TABLE fielding_postseason (cs NUMBER, a NUMBER, sb NUMBER, team_id TEXT, g NUMBER, round TEXT, year NUMBER, gs NUMBER, po NUMBER, dp NUMBER, player_id TEXT, league_id TEXT, pb NUMBER, tp NUMBER, e NUMBER, inn_outs NUMBER, pos TEXT); CREATE TABLE fielding (player_id TEXT); CREATE TABLE hall_of_fame (player_id TEXT); CREATE TABLE all_star (game_num NUMBER, player_id TEXT, game_id TEXT, gp NUMBER); CREATE TABLE pitching_postseason (round TEXT, sv NUMBER, sf NUMBER, league_id TEXT, bfp NUMBER, bk NUMBER, era NUMBER, er NUMBER, r NUMBER, player_id TEXT, sh NUMBER, cg NUMBER, ibb NUMBER, bb NUMBER, baopp TEXT, w NUMBER, hr NUMBER, wp NUMBER, team_id TEXT, g NUMBER, so NUMBER, gs NUMBER, h NUMBER, gf NUMBER, g_idp NUMBER, l NUMBER, ipouts NUMBER, year NUMBER, hbp NUMBER, sho NUMBER); CREATE TABLE player_award_vote (player_id TEXT); CREATE TABLE fielding_outfield (player_id TEXT); CREATE TABLE appearances (g_rf NUMBER, g_batting NUMBER, g_lf NUMBER, g_3b NUMBER, team_id TEXT, g_1b NUMBER, g_ss NUMBER, g_all NUMBER, g_cf NUMBER, g_defense NUMBER, g_p NUMBER, g_pr NUMBER, g_ph NUMBER, gs NUMBER, g_of NUMBER, g_c NUMBER, league_id TEXT, g_2b NUMBER, player_id TEXT, g_dh NUMBER, year NUMBER);"
      },
      {
        "question": "Please give me the information of the top one.",
        "query": "SELECT t1.name_first , t1.name_last , t1.player_id , count(*) FROM player AS t1 JOIN all_star AS t2 ON t1.player_id = t2.player_id GROUP BY t1.player_id ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE appearances (league_id TEXT, g_ss NUMBER, g_all NUMBER, g_pr NUMBER, g_defense NUMBER, team_id TEXT, year NUMBER, player_id TEXT, g_3b NUMBER, gs NUMBER, g_ph NUMBER, g_p NUMBER, g_lf NUMBER, g_batting NUMBER, g_dh NUMBER, g_c NUMBER, g_1b NUMBER, g_of NUMBER, g_rf NUMBER, g_cf NUMBER, g_2b NUMBER); CREATE TABLE hall_of_fame (player_id TEXT); CREATE TABLE postseason (year NUMBER, round TEXT); CREATE TABLE pitching_postseason (era NUMBER, round TEXT, bk NUMBER, cg NUMBER, baopp TEXT, ipouts NUMBER, l NUMBER, sho NUMBER, wp NUMBER, sh NUMBER, bfp NUMBER, league_id TEXT, ibb NUMBER, team_id TEXT, year NUMBER, sv NUMBER, r NUMBER, hr NUMBER, hbp NUMBER, bb NUMBER, gs NUMBER, gf NUMBER, w NUMBER, sf NUMBER, so NUMBER, g_idp NUMBER, er NUMBER, g NUMBER, player_id TEXT, h NUMBER); CREATE TABLE batting_postseason (hbp NUMBER, so NUMBER, player_id TEXT, g_idp NUMBER, team_id TEXT, rbi NUMBER, round TEXT, triple NUMBER, sb NUMBER, sh NUMBER, ibb NUMBER, year NUMBER, hr NUMBER, double NUMBER, h NUMBER, g NUMBER, bb NUMBER, r NUMBER, ab NUMBER, league_id TEXT, sf NUMBER, cs NUMBER); CREATE TABLE fielding (player_id TEXT); CREATE TABLE batting (player_id TEXT); CREATE TABLE player_award (player_id TEXT); CREATE TABLE fielding_postseason (tp NUMBER, sb NUMBER, a NUMBER, player_id TEXT, inn_outs NUMBER, team_id TEXT, league_id TEXT, year NUMBER, cs NUMBER, pb NUMBER, po NUMBER, e NUMBER, dp NUMBER, gs NUMBER, round TEXT, pos TEXT, g NUMBER); CREATE TABLE all_star (game_num NUMBER, player_id TEXT, game_id TEXT, gp NUMBER); CREATE TABLE fielding_outfield (player_id TEXT); CREATE TABLE player (death_month NUMBER, throws TEXT, death_state TEXT, bbref_id TEXT, name_first TEXT, retro_id TEXT, name_given TEXT, final_game TEXT, birth_day NUMBER, debut TEXT, height NUMBER, weight NUMBER, death_city TEXT, birth_state TEXT, player_id TEXT, name_last TEXT, death_day NUMBER, birth_country TEXT, birth_month NUMBER, birth_city TEXT, death_country TEXT, birth_year NUMBER, death_year NUMBER, bats TEXT); CREATE TABLE manager_award (player_id TEXT); CREATE TABLE player_award_vote (player_id TEXT);"
      }
    ],
    [
      {
        "question": "What is the average attendance?",
        "query": "SELECT avg(attendance) FROM home_game",
        "schema": "CREATE TABLE college (college_id TEXT); CREATE TABLE all_star (game_num NUMBER, game_id TEXT); CREATE TABLE home_game (attendance NUMBER, team_id TEXT); CREATE TABLE pitching_postseason (gf NUMBER, sf NUMBER, hr NUMBER, hbp NUMBER, cg NUMBER, ibb NUMBER, sho NUMBER, so NUMBER, r NUMBER, bfp NUMBER, er NUMBER, baopp TEXT, l NUMBER, player_id TEXT, bb NUMBER, league_id TEXT, sh NUMBER, bk NUMBER, wp NUMBER, team_id TEXT, g NUMBER, gs NUMBER, g_idp NUMBER, sv NUMBER, h NUMBER, year NUMBER, w NUMBER, round TEXT, ipouts NUMBER, era NUMBER); CREATE TABLE player (player_id TEXT);"
      },
      {
        "question": "What is the average attendance of each team in 2013?",
        "query": "SELECT t2.team_id , avg(t1.attendance) FROM home_game AS t1 JOIN team AS t2 ON t1.team_id = t2.team_id WHERE t1.year = 2013 GROUP BY t1.team_id",
        "schema": "CREATE TABLE park (park_id TEXT); CREATE TABLE team (cs NUMBER, franchise_id TEXT, sv NUMBER, attendance NUMBER, hra NUMBER, team_id_br TEXT, hbp NUMBER, sb NUMBER, g NUMBER, park TEXT, era NUMBER, w NUMBER, team_id_lahman45 TEXT, league_id TEXT, team_id TEXT, ws_win TEXT, team_id_retro TEXT, bb NUMBER, l NUMBER, div_win TEXT, r NUMBER, ra NUMBER, h NUMBER, rank NUMBER, triple NUMBER, sho NUMBER, year NUMBER, ha NUMBER, bba NUMBER, lg_win TEXT, wc_win TEXT, div_id TEXT, bpf NUMBER, so NUMBER, double NUMBER, dp NUMBER, cg NUMBER, ab NUMBER, ipouts NUMBER, fp NUMBER, e NUMBER, er NUMBER, ppf NUMBER, name TEXT, sf NUMBER, soa NUMBER); CREATE TABLE college (college_id TEXT); CREATE TABLE team_franchise (franchise_name TEXT, franchise_id TEXT, na_assoc TEXT); CREATE TABLE all_star (game_num NUMBER, game_id TEXT); CREATE TABLE team_half (year NUMBER); CREATE TABLE hall_of_fame (yearid NUMBER); CREATE TABLE home_game (games NUMBER, team_id TEXT, attendance NUMBER, year NUMBER, league_id TEXT); CREATE TABLE player (player_id TEXT); CREATE TABLE postseason (year NUMBER); CREATE TABLE pitching_postseason (g NUMBER, baopp TEXT, sv NUMBER, w NUMBER, er NUMBER, ibb NUMBER, so NUMBER, sh NUMBER, sf NUMBER, era NUMBER, bk NUMBER, player_id TEXT, sho NUMBER, bfp NUMBER, team_id TEXT, gs NUMBER, hr NUMBER, wp NUMBER, l NUMBER, ipouts NUMBER, year NUMBER, g_idp NUMBER, cg NUMBER, gf NUMBER, r NUMBER, h NUMBER, hbp NUMBER, league_id TEXT, round TEXT, bb NUMBER);"
      },
      {
        "question": "How about in 2014?",
        "query": "SELECT t2.team_id , avg(t1.attendance) FROM home_game AS t1 JOIN team AS t2 ON t1.team_id = t2.team_id WHERE t1.year = 2014 GROUP BY t1.team_id",
        "schema": "CREATE TABLE college (college_id TEXT); CREATE TABLE all_star (game_num NUMBER, game_id TEXT); CREATE TABLE team_half (year NUMBER); CREATE TABLE team_franchise (na_assoc TEXT, franchise_id TEXT, franchise_name TEXT); CREATE TABLE hall_of_fame (yearid NUMBER); CREATE TABLE postseason (year NUMBER); CREATE TABLE home_game (attendance NUMBER, league_id TEXT, team_id TEXT, year NUMBER, games NUMBER); CREATE TABLE park (park_id TEXT); CREATE TABLE player (player_id TEXT); CREATE TABLE pitching_postseason (round TEXT, era NUMBER, wp NUMBER, gs NUMBER, year NUMBER, baopp TEXT, sho NUMBER, hr NUMBER, ibb NUMBER, h NUMBER, bfp NUMBER, sv NUMBER, sf NUMBER, g NUMBER, l NUMBER, so NUMBER, ipouts NUMBER, r NUMBER, cg NUMBER, gf NUMBER, bk NUMBER, player_id TEXT, er NUMBER, bb NUMBER, team_id TEXT, g_idp NUMBER, w NUMBER, league_id TEXT, hbp NUMBER, sh NUMBER); CREATE TABLE team (cs NUMBER, r NUMBER, hra NUMBER, so NUMBER, triple NUMBER, double NUMBER, team_id_retro TEXT, dp NUMBER, team_id_lahman45 TEXT, ab NUMBER, team_id TEXT, sv NUMBER, bpf NUMBER, er NUMBER, l NUMBER, bb NUMBER, bba NUMBER, e NUMBER, rank NUMBER, hbp NUMBER, era NUMBER, w NUMBER, park TEXT, year NUMBER, ra NUMBER, attendance NUMBER, h NUMBER, ws_win TEXT, league_id TEXT, div_win TEXT, name TEXT, ipouts NUMBER, ppf NUMBER, soa NUMBER, cg NUMBER, lg_win TEXT, sb NUMBER, franchise_id TEXT, wc_win TEXT, sf NUMBER, g NUMBER, fp NUMBER, sho NUMBER, div_id TEXT, team_id_br TEXT, ha NUMBER);"
      },
      {
        "question": "Please list the id and rank of the team that had the largest average attendance in that year.",
        "query": "SELECT t2.team_id , t2.rank FROM home_game AS t1 JOIN team AS t2 ON t1.team_id = t2.team_id WHERE t1.year = 2014 GROUP BY t1.team_id ORDER BY avg(t1.attendance) DESC LIMIT 1;",
        "schema": "CREATE TABLE team_franchise (franchise_name TEXT, na_assoc TEXT, franchise_id TEXT); CREATE TABLE home_game (attendance NUMBER, league_id TEXT, year NUMBER, team_id TEXT, games NUMBER); CREATE TABLE college (college_id TEXT); CREATE TABLE team_half (year NUMBER, rank NUMBER); CREATE TABLE player (player_id TEXT); CREATE TABLE park (park_id TEXT); CREATE TABLE team (ghome NUMBER, cs NUMBER, park TEXT, cg NUMBER, team_id_lahman45 TEXT, e NUMBER, r NUMBER, franchise_id TEXT, double NUMBER, triple NUMBER, soa NUMBER, bba NUMBER, fp NUMBER, ppf NUMBER, team_id_br TEXT, ws_win TEXT, dp NUMBER, ipouts NUMBER, league_id TEXT, div_id TEXT, bb NUMBER, rank NUMBER, bpf NUMBER, hra NUMBER, l NUMBER, div_win TEXT, attendance NUMBER, team_id TEXT, w NUMBER, era NUMBER, sv NUMBER, team_id_retro TEXT, ha NUMBER, g NUMBER, h NUMBER, ra NUMBER, name TEXT, sb NUMBER, lg_win TEXT, sf NUMBER, ab NUMBER, hbp NUMBER, wc_win TEXT, so NUMBER, year NUMBER, er NUMBER, sho NUMBER); CREATE TABLE pitching_postseason (g_idp NUMBER, sf NUMBER, team_id TEXT, player_id TEXT, w NUMBER, era NUMBER, g NUMBER, bfp NUMBER, round TEXT, r NUMBER, league_id TEXT, baopp TEXT, gf NUMBER, cg NUMBER, ibb NUMBER, year NUMBER, wp NUMBER, gs NUMBER, l NUMBER, so NUMBER, er NUMBER, bb NUMBER, sho NUMBER, sh NUMBER, sv NUMBER, h NUMBER, ipouts NUMBER, hbp NUMBER, bk NUMBER, hr NUMBER); CREATE TABLE manager (rank NUMBER); CREATE TABLE hall_of_fame (yearid NUMBER); CREATE TABLE all_star (game_id TEXT, game_num NUMBER); CREATE TABLE manager_half (rank NUMBER); CREATE TABLE postseason (year NUMBER);"
      }
    ],
    [
      {
        "question": "Who are the managers that have won the manager award?",
        "query": "SELECT t1.name_first , t1.name_last FROM player AS t1 JOIN manager_award AS t2 ON t1.player_id = t2.player_id",
        "schema": "CREATE TABLE hall_of_fame (votes NUMBER, player_id TEXT); CREATE TABLE manager_half (team_id TEXT, player_id TEXT, half NUMBER, rank NUMBER, g NUMBER, w NUMBER, inseason NUMBER, l NUMBER); CREATE TABLE postseason (team_id_winner TEXT, wins NUMBER); CREATE TABLE manager (inseason NUMBER, team_id TEXT, plyr_mgr TEXT, player_id TEXT, g NUMBER, l NUMBER, w NUMBER, rank NUMBER); CREATE TABLE manager_award (notes NUMBER, award_id TEXT, player_id TEXT, league_id TEXT, year NUMBER, tie TEXT); CREATE TABLE player (name_last TEXT, player_id TEXT, name_first TEXT); CREATE TABLE player_award (award_id TEXT, player_id TEXT); CREATE TABLE player_award_vote (player_id TEXT, award_id TEXT, votes_first NUMBER, points_won NUMBER); CREATE TABLE all_star (player_id TEXT); CREATE TABLE manager_award_vote (votes_first NUMBER, award_id TEXT, points_won NUMBER, league_id TEXT, points_max NUMBER, player_id TEXT, year NUMBER);"
      },
      {
        "question": "How many times did each manager get this award?",
        "query": "SELECT t1.name_first , t1.name_last, count(*) FROM player AS t1 JOIN manager_award AS t2 ON t1.player_id = t2.player_id GROUP BY t2.player_id",
        "schema": "CREATE TABLE manager_award_vote (votes_first NUMBER, year NUMBER, points_max NUMBER, league_id TEXT, points_won NUMBER, player_id TEXT, award_id TEXT); CREATE TABLE player_award (award_id TEXT, player_id TEXT, year NUMBER); CREATE TABLE player_award_vote (player_id TEXT, points_won NUMBER, votes_first NUMBER, award_id TEXT, year NUMBER); CREATE TABLE manager_half (inseason NUMBER, l NUMBER, g NUMBER, player_id TEXT, half NUMBER, w NUMBER, team_id TEXT, rank NUMBER); CREATE TABLE all_star (player_id TEXT); CREATE TABLE manager_award (league_id TEXT, player_id TEXT, award_id TEXT, notes NUMBER, tie TEXT, year NUMBER); CREATE TABLE manager (w NUMBER, year NUMBER, player_id TEXT, l NUMBER, g NUMBER, plyr_mgr TEXT, inseason NUMBER, team_id TEXT, rank NUMBER); CREATE TABLE postseason (wins NUMBER, team_id_winner TEXT); CREATE TABLE hall_of_fame (player_id TEXT, votes NUMBER); CREATE TABLE fielding (player_id TEXT); CREATE TABLE player (birth_country TEXT, name_first TEXT, weight NUMBER, throws TEXT, birth_year NUMBER, death_city TEXT, birth_month NUMBER, death_country TEXT, name_last TEXT, bats TEXT, final_game TEXT, birth_city TEXT, player_id TEXT, debut TEXT, birth_day NUMBER, birth_state TEXT, death_state TEXT, retro_id TEXT, death_year NUMBER, height NUMBER, bbref_id TEXT, death_month NUMBER, death_day NUMBER, name_given TEXT);"
      },
      {
        "question": "Who won the most times?",
        "query": "SELECT t1.name_first , t1.name_last, count(*) FROM player AS t1 JOIN manager_award AS t2 ON t1.player_id = t2.player_id GROUP BY t2.player_id ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE hall_of_fame (player_id TEXT, votes NUMBER); CREATE TABLE player (birth_state TEXT, birth_city TEXT, retro_id TEXT, birth_year NUMBER, height NUMBER, bats TEXT, death_day NUMBER, death_year NUMBER, name_given TEXT, name_last TEXT, birth_country TEXT, death_country TEXT, debut TEXT, birth_day NUMBER, name_first TEXT, throws TEXT, death_state TEXT, final_game TEXT, weight NUMBER, death_city TEXT, player_id TEXT, death_month NUMBER, birth_month NUMBER, bbref_id TEXT); CREATE TABLE player_award_vote (votes_first NUMBER, player_id TEXT, year NUMBER, points_won NUMBER, award_id TEXT); CREATE TABLE manager_award (player_id TEXT, notes NUMBER, year NUMBER, tie TEXT, award_id TEXT, league_id TEXT); CREATE TABLE manager_award_vote (points_max NUMBER, award_id TEXT, votes_first NUMBER, points_won NUMBER, year NUMBER, player_id TEXT, league_id TEXT); CREATE TABLE postseason (team_id_winner TEXT, wins NUMBER); CREATE TABLE all_star (player_id TEXT); CREATE TABLE player_award (player_id TEXT, year NUMBER, award_id TEXT); CREATE TABLE manager (plyr_mgr TEXT, team_id TEXT, year NUMBER, inseason NUMBER, rank NUMBER, w NUMBER, l NUMBER, g NUMBER, player_id TEXT); CREATE TABLE fielding (player_id TEXT); CREATE TABLE manager_half (w NUMBER, l NUMBER, player_id TEXT, team_id TEXT, rank NUMBER, half NUMBER, g NUMBER, inseason NUMBER);"
      },
      {
        "question": "Please give their full name and id.",
        "query": "SELECT t1.name_first , t1.name_last , t2.player_id FROM player AS t1 JOIN manager_award AS t2 ON t1.player_id = t2.player_id GROUP BY t2.player_id ORDER BY count(*) DESC LIMIT 1;",
        "schema": "CREATE TABLE player_award_vote (award_id TEXT, player_id TEXT, votes_first NUMBER, year NUMBER, points_won NUMBER); CREATE TABLE hall_of_fame (votes NUMBER, player_id TEXT); CREATE TABLE manager_award (player_id TEXT, year NUMBER, award_id TEXT, tie TEXT, league_id TEXT, notes NUMBER); CREATE TABLE manager_half (rank NUMBER, w NUMBER, half NUMBER, team_id TEXT, l NUMBER, inseason NUMBER, player_id TEXT, g NUMBER); CREATE TABLE player (final_game TEXT, death_city TEXT, name_given TEXT, bbref_id TEXT, height NUMBER, birth_city TEXT, name_last TEXT, bats TEXT, name_first TEXT, debut TEXT, death_day NUMBER, birth_month NUMBER, death_month NUMBER, death_country TEXT, death_year NUMBER, birth_country TEXT, birth_year NUMBER, player_id TEXT, retro_id TEXT, death_state TEXT, birth_state TEXT, throws TEXT, weight NUMBER, birth_day NUMBER); CREATE TABLE player_award (year NUMBER, player_id TEXT, award_id TEXT); CREATE TABLE fielding (player_id TEXT); CREATE TABLE manager (rank NUMBER, team_id TEXT, plyr_mgr TEXT, year NUMBER, l NUMBER, inseason NUMBER, g NUMBER, player_id TEXT, w NUMBER); CREATE TABLE manager_award_vote (points_max NUMBER, year NUMBER, points_won NUMBER, award_id TEXT, league_id TEXT, votes_first NUMBER, player_id TEXT); CREATE TABLE all_star (player_id TEXT); CREATE TABLE postseason (team_id_winner TEXT, wins NUMBER);"
      }
    ],
    [
      {
        "question": "How many players have won player awards?",
        "query": "SELECT count(*) FROM player AS t1 JOIN player_award AS t2 ON t1.player_id = t2.player_id",
        "schema": "CREATE TABLE appearances (player_id TEXT); CREATE TABLE fielding_postseason (player_id TEXT); CREATE TABLE manager_award_vote (award_id TEXT, player_id TEXT, points_max NUMBER, points_won NUMBER, votes_first NUMBER); CREATE TABLE player_award_vote (points_won NUMBER, league_id TEXT, votes_first NUMBER, points_max NUMBER, year NUMBER, player_id TEXT, award_id TEXT); CREATE TABLE batting_postseason (player_id TEXT); CREATE TABLE fielding (player_id TEXT); CREATE TABLE all_star (player_id TEXT, gp NUMBER); CREATE TABLE salary (player_id TEXT); CREATE TABLE postseason (team_id_winner TEXT, wins NUMBER); CREATE TABLE player (death_city TEXT, name_given TEXT, weight NUMBER, death_year NUMBER, death_day NUMBER, retro_id TEXT, bbref_id TEXT, birth_city TEXT, birth_year NUMBER, birth_state TEXT, throws TEXT, name_last TEXT, bats TEXT, height NUMBER, death_country TEXT, player_id TEXT, death_state TEXT, final_game TEXT, death_month NUMBER, debut TEXT, birth_day NUMBER, birth_country TEXT, name_first TEXT, birth_month NUMBER); CREATE TABLE fielding_outfield (player_id TEXT); CREATE TABLE manager_award (player_id TEXT, award_id TEXT); CREATE TABLE player_award (notes TEXT, award_id TEXT, league_id TEXT, tie TEXT, player_id TEXT); CREATE TABLE player_college (player_id TEXT); CREATE TABLE hall_of_fame (votes NUMBER, inducted TEXT, player_id TEXT, ballots NUMBER, category TEXT);"
      },
      {
        "question": "Please list their full names.",
        "query": "SELECT t1.name_first , t1.name_last FROM player AS t1 JOIN player_award AS t2 ON t1.player_id = t2.player_id GROUP BY t1.player_id",
        "schema": "CREATE TABLE appearances (player_id TEXT); CREATE TABLE fielding (player_id TEXT); CREATE TABLE hall_of_fame (player_id TEXT, ballots NUMBER, inducted TEXT, votes NUMBER, category TEXT); CREATE TABLE player (death_day NUMBER, player_id TEXT, bats TEXT, throws TEXT, death_state TEXT, death_city TEXT, final_game TEXT, debut TEXT, birth_day NUMBER, birth_year NUMBER, name_given TEXT, death_country TEXT, height NUMBER, birth_city TEXT, death_month NUMBER, name_first TEXT, birth_country TEXT, birth_month NUMBER, retro_id TEXT, name_last TEXT, weight NUMBER, birth_state TEXT, death_year NUMBER, bbref_id TEXT); CREATE TABLE postseason (team_id_winner TEXT, wins NUMBER); CREATE TABLE manager_award (player_id TEXT, award_id TEXT); CREATE TABLE all_star (gp NUMBER, player_id TEXT); CREATE TABLE fielding_outfield (player_id TEXT); CREATE TABLE college (name_full TEXT); CREATE TABLE manager_award_vote (votes_first NUMBER, points_won NUMBER, award_id TEXT, points_max NUMBER, player_id TEXT); CREATE TABLE player_award (league_id TEXT, award_id TEXT, tie TEXT, notes TEXT, player_id TEXT); CREATE TABLE batting_postseason (player_id TEXT); CREATE TABLE player_award_vote (points_max NUMBER, player_id TEXT, year NUMBER, points_won NUMBER, votes_first NUMBER, league_id TEXT, award_id TEXT); CREATE TABLE fielding_postseason (player_id TEXT); CREATE TABLE salary (player_id TEXT); CREATE TABLE player_college (player_id TEXT);"
      },
      {
        "question": "Among them, who won the most player awards? List their full name and id.",
        "query": "SELECT t1.name_first , t1.name_last , t1.player_id FROM player AS t1 JOIN player_award AS t2 ON t1.player_id = t2.player_id GROUP BY t1.player_id ORDER BY count(*) DESC LIMIT 1;",
        "schema": "CREATE TABLE appearances (player_id TEXT); CREATE TABLE player (name_first TEXT, death_month NUMBER, throws TEXT, player_id TEXT, birth_day NUMBER, bats TEXT, death_day NUMBER, weight NUMBER, birth_city TEXT, death_city TEXT, bbref_id TEXT, death_year NUMBER, retro_id TEXT, death_state TEXT, height NUMBER, birth_country TEXT, name_last TEXT, debut TEXT, birth_month NUMBER, final_game TEXT, death_country TEXT, name_given TEXT, birth_state TEXT, birth_year NUMBER); CREATE TABLE all_star (gp NUMBER, player_id TEXT); CREATE TABLE salary (player_id TEXT); CREATE TABLE fielding (player_id TEXT); CREATE TABLE manager_award_vote (points_max NUMBER, points_won NUMBER, player_id TEXT, votes_first NUMBER, award_id TEXT); CREATE TABLE fielding_postseason (player_id TEXT); CREATE TABLE hall_of_fame (inducted TEXT, votes NUMBER, ballots NUMBER, player_id TEXT, category TEXT); CREATE TABLE fielding_outfield (player_id TEXT); CREATE TABLE player_award (tie TEXT, award_id TEXT, notes TEXT, league_id TEXT, player_id TEXT); CREATE TABLE postseason (team_id_winner TEXT, wins NUMBER); CREATE TABLE batting_postseason (player_id TEXT); CREATE TABLE player_award_vote (player_id TEXT, points_won NUMBER, award_id TEXT, votes_first NUMBER, league_id TEXT, year NUMBER, points_max NUMBER); CREATE TABLE college (name_full TEXT); CREATE TABLE manager_award (player_id TEXT, award_id TEXT); CREATE TABLE player_college (player_id TEXT);"
      },
      {
        "question": "How about top 3?",
        "query": "SELECT t1.name_first , t1.name_last , t1.player_id FROM player AS t1 JOIN player_award AS t2 ON t1.player_id = t2.player_id GROUP BY t1.player_id ORDER BY count(*) DESC LIMIT 3;",
        "schema": "CREATE TABLE appearances (player_id TEXT); CREATE TABLE player_award (award_id TEXT, tie TEXT, notes TEXT, league_id TEXT, player_id TEXT); CREATE TABLE postseason (wins NUMBER, team_id_winner TEXT); CREATE TABLE fielding_postseason (player_id TEXT); CREATE TABLE player_award_vote (votes_first NUMBER, points_won NUMBER, award_id TEXT, player_id TEXT, league_id TEXT, points_max NUMBER, year NUMBER); CREATE TABLE college (name_full TEXT); CREATE TABLE batting_postseason (player_id TEXT); CREATE TABLE player_college (player_id TEXT); CREATE TABLE hall_of_fame (player_id TEXT, ballots NUMBER, votes NUMBER, category TEXT, inducted TEXT); CREATE TABLE manager_award (player_id TEXT, award_id TEXT); CREATE TABLE salary (player_id TEXT); CREATE TABLE all_star (player_id TEXT, gp NUMBER); CREATE TABLE player (death_country TEXT, birth_country TEXT, birth_year NUMBER, death_day NUMBER, name_given TEXT, birth_state TEXT, player_id TEXT, name_last TEXT, debut TEXT, death_year NUMBER, throws TEXT, name_first TEXT, birth_month NUMBER, weight NUMBER, birth_city TEXT, death_city TEXT, final_game TEXT, retro_id TEXT, death_state TEXT, bats TEXT, death_month NUMBER, birth_day NUMBER, bbref_id TEXT, height NUMBER); CREATE TABLE manager_award_vote (votes_first NUMBER, award_id TEXT, points_max NUMBER, points_won NUMBER, player_id TEXT); CREATE TABLE fielding_outfield (player_id TEXT); CREATE TABLE fielding (player_id TEXT);"
      }
    ],
    [
      {
        "question": "Which countries do players come from?",
        "query": "SELECT birth_country FROM player",
        "schema": "CREATE TABLE park (country TEXT, state TEXT); CREATE TABLE college (country TEXT, state TEXT, city TEXT); CREATE TABLE player (bats TEXT, name_given TEXT, player_id TEXT, bbref_id TEXT, debut TEXT, death_year NUMBER, name_first TEXT, height NUMBER, weight NUMBER, death_country TEXT, birth_country TEXT, retro_id TEXT, death_month NUMBER, death_state TEXT, birth_day NUMBER, birth_state TEXT, final_game TEXT, birth_city TEXT, name_last TEXT, death_city TEXT, death_day NUMBER, birth_year NUMBER, birth_month NUMBER);"
      },
      {
        "question": "How many players are from each country?",
        "query": "SELECT birth_country, count(*) FROM player GROUP BY birth_country",
        "schema": "CREATE TABLE park (state TEXT, country TEXT); CREATE TABLE college (country TEXT, city TEXT, state TEXT); CREATE TABLE player (bbref_id TEXT, death_year NUMBER, throws TEXT, death_day NUMBER, name_given TEXT, player_id TEXT, debut TEXT, death_month NUMBER, death_country TEXT, birth_country TEXT, height NUMBER, bats TEXT, retro_id TEXT, name_last TEXT, birth_state TEXT, weight NUMBER, death_state TEXT, birth_month NUMBER, birth_city TEXT, final_game TEXT, birth_day NUMBER, name_first TEXT, death_city TEXT, birth_year NUMBER);"
      },
      {
        "question": "Which country provided the most players?",
        "query": "SELECT birth_country FROM player GROUP BY birth_country ORDER BY count(*) DESC LIMIT 1;",
        "schema": "CREATE TABLE player (death_month NUMBER, throws TEXT, death_city TEXT, death_year NUMBER, debut TEXT, name_given TEXT, bbref_id TEXT, death_day NUMBER, death_country TEXT, birth_state TEXT, name_first TEXT, birth_year NUMBER, bats TEXT, retro_id TEXT, player_id TEXT, death_state TEXT, final_game TEXT, weight NUMBER, birth_day NUMBER, birth_country TEXT, birth_city TEXT, birth_month NUMBER, height NUMBER, name_last TEXT); CREATE TABLE college (state TEXT, country TEXT, city TEXT); CREATE TABLE park (country TEXT, state TEXT);"
      },
      {
        "question": "What are the three countries that provided the fewest players?",
        "query": "SELECT birth_country FROM player GROUP BY birth_country ORDER BY count(*) ASC LIMIT 3;",
        "schema": "CREATE TABLE player (birth_year NUMBER, height NUMBER, birth_day NUMBER, birth_state TEXT, final_game TEXT, bats TEXT, throws TEXT, name_first TEXT, bbref_id TEXT, death_month NUMBER, death_state TEXT, debut TEXT, death_country TEXT, death_year NUMBER, birth_city TEXT, birth_month NUMBER, weight NUMBER, name_given TEXT, player_id TEXT, name_last TEXT, birth_country TEXT, retro_id TEXT, death_day NUMBER, death_city TEXT); CREATE TABLE park (country TEXT, state TEXT); CREATE TABLE college (country TEXT, state TEXT, city TEXT);"
      }
    ],
    [
      {
        "question": "How many left-handed batters are there?",
        "query": "SELECT count(*) FROM player WHERE bats = 'L';",
        "schema": "CREATE TABLE fielding (team_id TEXT, pos TEXT, e NUMBER, a NUMBER, pb NUMBER, g NUMBER, player_id TEXT, zr NUMBER, league_id TEXT, sb NUMBER, po NUMBER, wp NUMBER, cs NUMBER, gs NUMBER, inn_outs NUMBER, dp NUMBER); CREATE TABLE fielding_postseason (player_id TEXT); CREATE TABLE college (college_id TEXT); CREATE TABLE fielding_outfield (player_id TEXT); CREATE TABLE batting_postseason (r NUMBER, sf NUMBER, bb NUMBER, ibb NUMBER, g NUMBER, ab NUMBER, g_idp NUMBER, hbp NUMBER, cs NUMBER, team_id TEXT, player_id TEXT, league_id TEXT, so NUMBER, sb NUMBER, sh NUMBER); CREATE TABLE player (bats TEXT, player_id TEXT); CREATE TABLE player_award (player_id TEXT); CREATE TABLE pitching (wp NUMBER, gf NUMBER, h NUMBER, w NUMBER, cg NUMBER, hr NUMBER, bb NUMBER, r NUMBER, bfp NUMBER, l NUMBER, g_idp NUMBER, sh NUMBER, era NUMBER, sho NUMBER, baopp NUMBER, sv NUMBER, year NUMBER, ibb NUMBER, so NUMBER, player_id TEXT, gs NUMBER, bk NUMBER, league_id TEXT, g NUMBER, sf NUMBER, hbp NUMBER, ipouts NUMBER, stint NUMBER, er NUMBER, team_id TEXT); CREATE TABLE batting (sh NUMBER, stint NUMBER, double NUMBER, so NUMBER, rbi NUMBER, year NUMBER, team_id TEXT, player_id TEXT, r NUMBER, ab NUMBER, h NUMBER, g_idp NUMBER, cs NUMBER, hbp NUMBER, sf NUMBER, ibb NUMBER, bb NUMBER, g NUMBER, hr NUMBER, league_id TEXT, sb NUMBER, triple NUMBER); CREATE TABLE hall_of_fame (player_id TEXT); CREATE TABLE all_star (game_id TEXT, player_id TEXT); CREATE TABLE team_franchise (franchise_id TEXT, franchise_name TEXT); CREATE TABLE appearances (g_batting NUMBER, player_id TEXT);"
      },
      {
        "question": "How about the right-handed batters?",
        "query": "SELECT count(*) FROM player WHERE bats = 'R';",
        "schema": "CREATE TABLE pitching (hr NUMBER, er NUMBER, hbp NUMBER, year NUMBER, l NUMBER, wp NUMBER, sf NUMBER, player_id TEXT, gf NUMBER, sho NUMBER, g_idp NUMBER, w NUMBER, team_id TEXT, r NUMBER, sh NUMBER, ipouts NUMBER, cg NUMBER, sv NUMBER, h NUMBER, bb NUMBER, baopp NUMBER, gs NUMBER, ibb NUMBER, era NUMBER, bk NUMBER, league_id TEXT, so NUMBER, g NUMBER, stint NUMBER, bfp NUMBER); CREATE TABLE batting_postseason (sh NUMBER, double NUMBER, hbp NUMBER, bb NUMBER, cs NUMBER, r NUMBER, g_idp NUMBER, league_id TEXT, sf NUMBER, ab NUMBER, so NUMBER, ibb NUMBER, player_id TEXT, sb NUMBER, triple NUMBER, g NUMBER, team_id TEXT); CREATE TABLE appearances (player_id TEXT, g_batting NUMBER); CREATE TABLE hall_of_fame (player_id TEXT); CREATE TABLE fielding_outfield (player_id TEXT); CREATE TABLE team_franchise (franchise_name TEXT, franchise_id TEXT); CREATE TABLE college (college_id TEXT); CREATE TABLE player_award (player_id TEXT); CREATE TABLE batting (g NUMBER, player_id TEXT, bb NUMBER, year NUMBER, h NUMBER, double NUMBER, sb NUMBER, cs NUMBER, hr NUMBER, triple NUMBER, sh NUMBER, team_id TEXT, stint NUMBER, ab NUMBER, sf NUMBER, hbp NUMBER, rbi NUMBER, league_id TEXT, so NUMBER, r NUMBER, ibb NUMBER, g_idp NUMBER); CREATE TABLE all_star (player_id TEXT, game_id TEXT); CREATE TABLE fielding (team_id TEXT, league_id TEXT, sb NUMBER, g NUMBER, pb NUMBER, player_id TEXT, pos TEXT, cs NUMBER, inn_outs NUMBER, wp NUMBER, po NUMBER, zr NUMBER, dp NUMBER, e NUMBER, a NUMBER, gs NUMBER); CREATE TABLE pitching_postseason (l NUMBER); CREATE TABLE fielding_postseason (player_id TEXT); CREATE TABLE player (throws TEXT, player_id TEXT, bats TEXT);"
      },
      {
        "question": "Out of those batters, how many were born in California?",
        "query": "SELECT count(*) FROM player WHERE birth_state = 'CA' AND bats = 'R';",
        "schema": "CREATE TABLE pitching (bfp NUMBER, sh NUMBER, cg NUMBER, bb NUMBER, h NUMBER, hr NUMBER, wp NUMBER, baopp NUMBER, sho NUMBER, so NUMBER, ipouts NUMBER, sv NUMBER, stint NUMBER, g NUMBER, sf NUMBER, player_id TEXT, team_id TEXT, gf NUMBER, league_id TEXT, w NUMBER, gs NUMBER, l NUMBER, ibb NUMBER, er NUMBER, hbp NUMBER, era NUMBER, year NUMBER, r NUMBER, g_idp NUMBER, bk NUMBER); CREATE TABLE batting_postseason (player_id TEXT, double NUMBER, ibb NUMBER, triple NUMBER, cs NUMBER, sh NUMBER, r NUMBER, team_id TEXT, hbp NUMBER, sb NUMBER, g_idp NUMBER, sf NUMBER, g NUMBER, ab NUMBER, bb NUMBER, league_id TEXT, so NUMBER); CREATE TABLE batting (year NUMBER, ab NUMBER, team_id TEXT, h NUMBER, hbp NUMBER, r NUMBER, stint NUMBER, g_idp NUMBER, player_id TEXT, rbi NUMBER, triple NUMBER, so NUMBER, sf NUMBER, league_id TEXT, double NUMBER, ibb NUMBER, sb NUMBER, cs NUMBER, g NUMBER, bb NUMBER, hr NUMBER, sh NUMBER); CREATE TABLE player (death_year NUMBER, debut TEXT, bats TEXT, height NUMBER, birth_day NUMBER, player_id TEXT, throws TEXT, birth_city TEXT, death_city TEXT, birth_country TEXT, death_month NUMBER, death_country TEXT, birth_state TEXT, retro_id TEXT, final_game TEXT, bbref_id TEXT, name_last TEXT, name_given TEXT, death_state TEXT, death_day NUMBER, birth_month NUMBER, birth_year NUMBER, weight NUMBER, name_first TEXT); CREATE TABLE pitching_postseason (l NUMBER); CREATE TABLE appearances (player_id TEXT, g_batting NUMBER); CREATE TABLE fielding_postseason (player_id TEXT); CREATE TABLE college (state TEXT, college_id TEXT); CREATE TABLE fielding_outfield (player_id TEXT); CREATE TABLE fielding (e NUMBER, gs NUMBER, pb NUMBER, player_id TEXT, dp NUMBER, zr NUMBER, po NUMBER, g NUMBER, a NUMBER, league_id TEXT, cs NUMBER, sb NUMBER, wp NUMBER, inn_outs NUMBER, pos TEXT, team_id TEXT); CREATE TABLE hall_of_fame (player_id TEXT); CREATE TABLE team_franchise (franchise_name TEXT, franchise_id TEXT); CREATE TABLE all_star (player_id TEXT, game_id TEXT); CREATE TABLE player_college (player_id TEXT, college_id TEXT); CREATE TABLE player_award (player_id TEXT);"
      },
      {
        "question": "How about those born in the USA?",
        "query": "SELECT count(*) FROM player WHERE birth_country = 'USA' AND bats = 'R'",
        "schema": "CREATE TABLE pitching (hr NUMBER, gf NUMBER, bfp NUMBER, year NUMBER, sf NUMBER, league_id TEXT, baopp NUMBER, wp NUMBER, so NUMBER, hbp NUMBER, ibb NUMBER, gs NUMBER, w NUMBER, sv NUMBER, stint NUMBER, l NUMBER, team_id TEXT, era NUMBER, bb NUMBER, er NUMBER, g NUMBER, ipouts NUMBER, sh NUMBER, sho NUMBER, r NUMBER, bk NUMBER, g_idp NUMBER, cg NUMBER, player_id TEXT, h NUMBER); CREATE TABLE pitching_postseason (l NUMBER); CREATE TABLE fielding_outfield (player_id TEXT); CREATE TABLE team_franchise (franchise_name TEXT, franchise_id TEXT); CREATE TABLE batting (triple NUMBER, player_id TEXT, ab NUMBER, r NUMBER, h NUMBER, rbi NUMBER, so NUMBER, sb NUMBER, cs NUMBER, stint NUMBER, year NUMBER, hr NUMBER, league_id TEXT, bb NUMBER, team_id TEXT, g NUMBER, double NUMBER, sf NUMBER, ibb NUMBER, g_idp NUMBER, sh NUMBER, hbp NUMBER); CREATE TABLE college (college_id TEXT, state TEXT); CREATE TABLE appearances (g_batting NUMBER, player_id TEXT); CREATE TABLE fielding (gs NUMBER, pb NUMBER, league_id TEXT, player_id TEXT, team_id TEXT, g NUMBER, dp NUMBER, po NUMBER, inn_outs NUMBER, e NUMBER, pos TEXT, sb NUMBER, zr NUMBER, a NUMBER, cs NUMBER, wp NUMBER); CREATE TABLE batting_postseason (hbp NUMBER, triple NUMBER, ab NUMBER, team_id TEXT, double NUMBER, sb NUMBER, ibb NUMBER, so NUMBER, g NUMBER, league_id TEXT, g_idp NUMBER, bb NUMBER, cs NUMBER, sh NUMBER, r NUMBER, player_id TEXT, sf NUMBER); CREATE TABLE all_star (player_id TEXT, game_id TEXT); CREATE TABLE player (birth_year NUMBER, death_day NUMBER, death_state TEXT, birth_country TEXT, name_first TEXT, retro_id TEXT, death_city TEXT, throws TEXT, birth_state TEXT, weight NUMBER, death_year NUMBER, birth_day NUMBER, name_given TEXT, name_last TEXT, death_month NUMBER, bbref_id TEXT, final_game TEXT, player_id TEXT, birth_city TEXT, height NUMBER, bats TEXT, debut TEXT, death_country TEXT, birth_month NUMBER); CREATE TABLE hall_of_fame (player_id TEXT); CREATE TABLE fielding_postseason (player_id TEXT); CREATE TABLE player_college (player_id TEXT, college_id TEXT); CREATE TABLE player_award (player_id TEXT);"
      }
    ],
    [
      {
        "question": "What is the average height of all players?",
        "query": "SELECT avg(height) FROM player",
        "schema": "CREATE TABLE player (weight NUMBER, height NUMBER, player_id TEXT); CREATE TABLE fielding (player_id TEXT, zr NUMBER); CREATE TABLE batting_postseason (player_id TEXT); CREATE TABLE fielding_postseason (player_id TEXT); CREATE TABLE team_franchise (franchise_id TEXT); CREATE TABLE all_star (player_id TEXT); CREATE TABLE fielding_outfield (player_id TEXT); CREATE TABLE hall_of_fame (player_id TEXT);"
      },
      {
        "question": "What is the average height of players from 'University of Akron'?",
        "query": "SELECT avg(t1.height) FROM player AS t1 JOIN player_college AS t2 ON t1.player_id = t2.player_id JOIN college AS t3 ON t3.college_id = t2.college_id WHERE t3.name_full = 'University of Akron';",
        "schema": "CREATE TABLE fielding_postseason (player_id TEXT); CREATE TABLE college (college_id TEXT, city TEXT, name_full TEXT); CREATE TABLE fielding (player_id TEXT, zr NUMBER); CREATE TABLE batting_postseason (player_id TEXT); CREATE TABLE player (height NUMBER, bbref_id TEXT, player_id TEXT, weight NUMBER); CREATE TABLE team_franchise (franchise_id TEXT); CREATE TABLE all_star (player_id TEXT); CREATE TABLE park (city TEXT); CREATE TABLE fielding_outfield (player_id TEXT); CREATE TABLE player_college (college_id TEXT, player_id TEXT); CREATE TABLE hall_of_fame (player_id TEXT);"
      },
      {
        "question": "How about for those from Yale University?",
        "query": "SELECT avg(t1.height) FROM player AS t1 JOIN player_college AS t2 ON t1.player_id = t2.player_id JOIN college AS t3 ON t3.college_id = t2.college_id WHERE t3.name_full = 'Yale University'",
        "schema": "CREATE TABLE player_college (college_id TEXT, player_id TEXT, year NUMBER); CREATE TABLE hall_of_fame (player_id TEXT); CREATE TABLE all_star (player_id TEXT); CREATE TABLE batting_postseason (player_id TEXT); CREATE TABLE team_franchise (franchise_id TEXT); CREATE TABLE college (college_id TEXT, city TEXT, name_full TEXT); CREATE TABLE fielding (zr NUMBER, player_id TEXT); CREATE TABLE fielding_postseason (player_id TEXT); CREATE TABLE fielding_outfield (player_id TEXT); CREATE TABLE player (height NUMBER, player_id TEXT, bbref_id TEXT, name_first TEXT, name_given TEXT, birth_month NUMBER, weight NUMBER, name_last TEXT); CREATE TABLE park (city TEXT);"
      }
    ],
    [
      {
        "question": "What is the average salary of all teams?",
        "query": "SELECT avg(salary) FROM salary",
        "schema": "CREATE TABLE all_star (game_id TEXT, team_id TEXT, player_id TEXT); CREATE TABLE team (year NUMBER, ghome NUMBER, div_id TEXT, ws_win TEXT, team_id_lahman45 TEXT, attendance NUMBER, hbp NUMBER, cs NUMBER, lg_win TEXT, name TEXT, ha NUMBER, w NUMBER, dp NUMBER, sb NUMBER, bb NUMBER, rank NUMBER, triple NUMBER, sf NUMBER, hr NUMBER, sv NUMBER, g NUMBER, wc_win TEXT, bpf NUMBER, franchise_id TEXT, park TEXT, er NUMBER, ppf NUMBER, cg NUMBER, soa NUMBER, era NUMBER, league_id TEXT, e NUMBER, sho NUMBER, ipouts NUMBER, team_id_br TEXT, fp NUMBER, r NUMBER, ra NUMBER, l NUMBER, ab NUMBER, h NUMBER, bba NUMBER, div_win TEXT, so NUMBER, team_id TEXT, double NUMBER, team_id_retro TEXT, hra NUMBER); CREATE TABLE salary (league_id TEXT, player_id TEXT, salary NUMBER, team_id TEXT, year NUMBER); CREATE TABLE college (college_id TEXT); CREATE TABLE team_franchise (franchise_name TEXT, franchise_id TEXT); CREATE TABLE team_half (div_id TEXT, w NUMBER, team_id TEXT, g NUMBER, rank NUMBER, year NUMBER, l NUMBER); CREATE TABLE player (player_id TEXT);"
      },
      {
        "question": "What is the average salary of each team?",
        "query": "SELECT t1.name , avg(t2.salary) FROM team AS t1 JOIN salary AS t2 ON t1.team_id = t2.team_id GROUP BY t1.team_id;",
        "schema": "CREATE TABLE salary (league_id TEXT, player_id TEXT, team_id TEXT, year NUMBER, salary NUMBER); CREATE TABLE player (player_id TEXT); CREATE TABLE college (college_id TEXT); CREATE TABLE team_half (g NUMBER, rank NUMBER, div_id TEXT, w NUMBER, l NUMBER, team_id TEXT, year NUMBER); CREATE TABLE all_star (game_id TEXT, player_id TEXT, team_id TEXT); CREATE TABLE team (h NUMBER, cg NUMBER, year NUMBER, park TEXT, rank NUMBER, team_id_retro TEXT, bba NUMBER, team_id TEXT, l NUMBER, hra NUMBER, name TEXT, sho NUMBER, er NUMBER, ghome NUMBER, era NUMBER, cs NUMBER, franchise_id TEXT, lg_win TEXT, div_id TEXT, hr NUMBER, sv NUMBER, div_win TEXT, soa NUMBER, fp NUMBER, team_id_lahman45 TEXT, so NUMBER, wc_win TEXT, ab NUMBER, sf NUMBER, hbp NUMBER, triple NUMBER, bpf NUMBER, sb NUMBER, dp NUMBER, w NUMBER, ipouts NUMBER, team_id_br TEXT, r NUMBER, double NUMBER, attendance NUMBER, ha NUMBER, g NUMBER, e NUMBER, ws_win TEXT, league_id TEXT, bb NUMBER, ppf NUMBER, ra NUMBER); CREATE TABLE team_franchise (franchise_name TEXT, franchise_id TEXT);"
      },
      {
        "question": "What is the highest salary of each team?",
        "query": "SELECT t1.name , max(t2.salary) FROM team AS t1 JOIN salary AS t2 ON t1.team_id = t2.team_id GROUP BY t1.team_id;",
        "schema": "CREATE TABLE salary (salary NUMBER, team_id TEXT, league_id TEXT, player_id TEXT, year NUMBER); CREATE TABLE team_franchise (franchise_id TEXT, franchise_name TEXT); CREATE TABLE player (player_id TEXT); CREATE TABLE college (college_id TEXT); CREATE TABLE team_half (year NUMBER, div_id TEXT, w NUMBER, team_id TEXT, l NUMBER, g NUMBER, rank NUMBER); CREATE TABLE team (ghome NUMBER, ws_win TEXT, league_id TEXT, franchise_id TEXT, double NUMBER, era NUMBER, fp NUMBER, so NUMBER, hbp NUMBER, team_id_br TEXT, h NUMBER, rank NUMBER, bb NUMBER, g NUMBER, ra NUMBER, bpf NUMBER, e NUMBER, sb NUMBER, ipouts NUMBER, triple NUMBER, dp NUMBER, w NUMBER, lg_win TEXT, name TEXT, team_id_retro TEXT, ab NUMBER, cs NUMBER, div_win TEXT, hr NUMBER, sf NUMBER, attendance NUMBER, team_id_lahman45 TEXT, sho NUMBER, er NUMBER, ha NUMBER, team_id TEXT, year NUMBER, ppf NUMBER, park TEXT, l NUMBER, soa NUMBER, sv NUMBER, hra NUMBER, bba NUMBER, wc_win TEXT, cg NUMBER, div_id TEXT, r NUMBER); CREATE TABLE all_star (game_id TEXT, player_id TEXT, team_id TEXT);"
      },
      {
        "question": "Please also give the team name, id and maximum salary.",
        "query": "SELECT t1.name , t1.team_id , max(t2.salary) FROM team AS t1 JOIN salary AS t2 ON t1.team_id = t2.team_id GROUP BY t1.team_id;",
        "schema": "CREATE TABLE team_half (year NUMBER, team_id TEXT, g NUMBER, l NUMBER, w NUMBER, div_id TEXT, rank NUMBER); CREATE TABLE team (div_id TEXT, fp NUMBER, div_win TEXT, er NUMBER, league_id TEXT, sho NUMBER, h NUMBER, so NUMBER, lg_win TEXT, franchise_id TEXT, team_id_lahman45 TEXT, ab NUMBER, hr NUMBER, era NUMBER, attendance NUMBER, name TEXT, hra NUMBER, team_id_br TEXT, bb NUMBER, rank NUMBER, ghome NUMBER, double NUMBER, dp NUMBER, ppf NUMBER, ha NUMBER, bba NUMBER, g NUMBER, team_id TEXT, sv NUMBER, e NUMBER, year NUMBER, ipouts NUMBER, bpf NUMBER, sb NUMBER, team_id_retro TEXT, r NUMBER, cg NUMBER, sf NUMBER, triple NUMBER, wc_win TEXT, cs NUMBER, park TEXT, ra NUMBER, ws_win TEXT, soa NUMBER, l NUMBER, hbp NUMBER, w NUMBER); CREATE TABLE all_star (game_id TEXT, team_id TEXT, player_id TEXT); CREATE TABLE salary (league_id TEXT, player_id TEXT, salary NUMBER, year NUMBER, team_id TEXT); CREATE TABLE player (player_id TEXT); CREATE TABLE college (college_id TEXT); CREATE TABLE team_franchise (franchise_name TEXT, franchise_id TEXT);"
      }
    ],
    [
      {
        "question": "What is the average salary of all teams?",
        "query": "SELECT avg(salary) FROM salary",
        "schema": "CREATE TABLE team (franchise_id TEXT, div_id TEXT, league_id TEXT, bba NUMBER, dp NUMBER, era NUMBER, hbp NUMBER, r NUMBER, bpf NUMBER, park TEXT, er NUMBER, hr NUMBER, rank NUMBER, cg NUMBER, team_id_br TEXT, triple NUMBER, so NUMBER, h NUMBER, hra NUMBER, g NUMBER, w NUMBER, lg_win TEXT, bb NUMBER, soa NUMBER, wc_win TEXT, sv NUMBER, l NUMBER, team_id TEXT, cs NUMBER, ab NUMBER, team_id_retro TEXT, sf NUMBER, e NUMBER, fp NUMBER, team_id_lahman45 TEXT, year NUMBER, div_win TEXT, ra NUMBER, ppf NUMBER, sb NUMBER, ipouts NUMBER, double NUMBER, name TEXT, ws_win TEXT, sho NUMBER, ha NUMBER); CREATE TABLE player (player_id TEXT); CREATE TABLE team_half (w NUMBER, team_id TEXT, g NUMBER, div_id TEXT, l NUMBER); CREATE TABLE team_franchise (franchise_name TEXT, franchise_id TEXT); CREATE TABLE college (college_id TEXT); CREATE TABLE all_star (player_id TEXT, game_id TEXT, team_id TEXT); CREATE TABLE salary (team_id TEXT, player_id TEXT, salary NUMBER, year NUMBER, league_id TEXT);"
      },
      {
        "question": "What about for each team?",
        "query": "SELECT t1.name , avg(t2.salary) FROM team AS t1 JOIN salary AS t2 ON t1.team_id = t2.team_id GROUP BY t1.team_id;",
        "schema": "CREATE TABLE team_half (div_id TEXT, g NUMBER, l NUMBER, w NUMBER, team_id TEXT); CREATE TABLE team_franchise (franchise_id TEXT, franchise_name TEXT, na_assoc TEXT); CREATE TABLE college (college_id TEXT); CREATE TABLE team (fp NUMBER, l NUMBER, name TEXT, er NUMBER, bb NUMBER, year NUMBER, ab NUMBER, dp NUMBER, park TEXT, bba NUMBER, div_id TEXT, franchise_id TEXT, ra NUMBER, w NUMBER, so NUMBER, ppf NUMBER, attendance NUMBER, sf NUMBER, e NUMBER, team_id TEXT, team_id_br TEXT, team_id_lahman45 TEXT, bpf NUMBER, div_win TEXT, hr NUMBER, double NUMBER, team_id_retro TEXT, g NUMBER, hra NUMBER, ipouts NUMBER, triple NUMBER, cs NUMBER, sv NUMBER, lg_win TEXT, r NUMBER, ws_win TEXT, ghome NUMBER, soa NUMBER, league_id TEXT, rank NUMBER, h NUMBER, sb NUMBER, era NUMBER, wc_win TEXT, hbp NUMBER, sho NUMBER, cg NUMBER, ha NUMBER); CREATE TABLE all_star (team_id TEXT, player_id TEXT, game_id TEXT); CREATE TABLE salary (year NUMBER, team_id TEXT, league_id TEXT, salary NUMBER, player_id TEXT); CREATE TABLE player (player_id TEXT);"
      },
      {
        "question": "Can you order the results by average salary?",
        "query": "SELECT t1.name , avg(t2.salary) FROM team AS t1 JOIN salary AS t2 ON t1.team_id = t2.team_id GROUP BY t1.team_id ORDER BY avg(t2.salary)",
        "schema": "CREATE TABLE all_star (game_id TEXT, player_id TEXT, team_id TEXT); CREATE TABLE college (college_id TEXT); CREATE TABLE player (player_id TEXT); CREATE TABLE team_half (div_id TEXT, w NUMBER, l NUMBER, team_id TEXT, g NUMBER); CREATE TABLE team (ws_win TEXT, fp NUMBER, cg NUMBER, wc_win TEXT, double NUMBER, league_id TEXT, sho NUMBER, team_id TEXT, team_id_br TEXT, e NUMBER, triple NUMBER, div_win TEXT, er NUMBER, rank NUMBER, year NUMBER, franchise_id TEXT, name TEXT, ha NUMBER, ghome NUMBER, dp NUMBER, g NUMBER, lg_win TEXT, hbp NUMBER, attendance NUMBER, l NUMBER, ab NUMBER, team_id_retro TEXT, w NUMBER, hra NUMBER, bba NUMBER, div_id TEXT, r NUMBER, sf NUMBER, park TEXT, cs NUMBER, team_id_lahman45 TEXT, ra NUMBER, ipouts NUMBER, ppf NUMBER, bpf NUMBER, soa NUMBER, sv NUMBER, era NUMBER, bb NUMBER, sb NUMBER, so NUMBER, hr NUMBER, h NUMBER); CREATE TABLE team_franchise (franchise_name TEXT, na_assoc TEXT, franchise_id TEXT); CREATE TABLE salary (year NUMBER, team_id TEXT, player_id TEXT, league_id TEXT, salary NUMBER);"
      },
      {
        "question": "Please give the first one with its name and id.",
        "query": "SELECT t1.name , t1.team_id FROM team AS t1 JOIN salary AS t2 ON t1.team_id = t2.team_id GROUP BY t1.team_id ORDER BY avg(t2.salary) ASC LIMIT 1;",
        "schema": "CREATE TABLE salary (year NUMBER, team_id TEXT, salary NUMBER, league_id TEXT, player_id TEXT); CREATE TABLE team_half (team_id TEXT, w NUMBER, g NUMBER, div_id TEXT, l NUMBER); CREATE TABLE college (college_id TEXT); CREATE TABLE player_award_vote (votes_first NUMBER); CREATE TABLE team_franchise (franchise_name TEXT, na_assoc TEXT, franchise_id TEXT); CREATE TABLE team (park TEXT, cg NUMBER, attendance NUMBER, ghome NUMBER, era NUMBER, div_id TEXT, franchise_id TEXT, bba NUMBER, wc_win TEXT, year NUMBER, l NUMBER, so NUMBER, h NUMBER, lg_win TEXT, hra NUMBER, r NUMBER, rank NUMBER, league_id TEXT, bpf NUMBER, sv NUMBER, er NUMBER, cs NUMBER, team_id_retro TEXT, w NUMBER, e NUMBER, team_id_lahman45 TEXT, triple NUMBER, sho NUMBER, g NUMBER, ppf NUMBER, team_id_br TEXT, bb NUMBER, name TEXT, dp NUMBER, fp NUMBER, soa NUMBER, team_id TEXT, ra NUMBER, sb NUMBER, sf NUMBER, double NUMBER, hbp NUMBER, div_win TEXT, ab NUMBER, ha NUMBER, ws_win TEXT, ipouts NUMBER, hr NUMBER); CREATE TABLE all_star (team_id TEXT, player_id TEXT, game_id TEXT); CREATE TABLE player (player_id TEXT, name_first TEXT);"
      }
    ],
    [
      {
        "question": "Which players have won an award?",
        "query": "SELECT t1.name_first , t1.name_last FROM player AS t1 JOIN player_award AS t2 ON t1.player_id = t2.player_id GROUP BY t2.player_id",
        "schema": "CREATE TABLE all_star (game_num NUMBER, player_id TEXT, game_id TEXT, gp NUMBER); CREATE TABLE park (park_alias TEXT); CREATE TABLE manager_award (notes NUMBER, player_id TEXT, award_id TEXT); CREATE TABLE player (birth_country TEXT, birth_month NUMBER, retro_id TEXT, death_month NUMBER, height NUMBER, death_state TEXT, name_given TEXT, final_game TEXT, throws TEXT, name_first TEXT, bats TEXT, birth_state TEXT, weight NUMBER, death_day NUMBER, bbref_id TEXT, debut TEXT, birth_year NUMBER, death_year NUMBER, name_last TEXT, death_city TEXT, player_id TEXT, birth_day NUMBER, death_country TEXT, birth_city TEXT); CREATE TABLE fielding_postseason (tp NUMBER, inn_outs NUMBER, e NUMBER, po NUMBER, a NUMBER, g NUMBER, cs NUMBER, pos TEXT, dp NUMBER, league_id TEXT, sb NUMBER, round TEXT, pb NUMBER, gs NUMBER, player_id TEXT); CREATE TABLE player_award_vote (player_id TEXT, league_id TEXT, points_won NUMBER, points_max NUMBER, votes_first NUMBER, award_id TEXT); CREATE TABLE team_half (div_win TEXT); CREATE TABLE fielding (player_id TEXT); CREATE TABLE postseason (wins NUMBER, team_id_winner TEXT, league_id_winner TEXT); CREATE TABLE hall_of_fame (votes NUMBER, ballots NUMBER, inducted TEXT, player_id TEXT); CREATE TABLE fielding_outfield (player_id TEXT); CREATE TABLE player_college (player_id TEXT); CREATE TABLE manager_award_vote (points_won NUMBER, award_id TEXT, player_id TEXT, votes_first NUMBER, points_max NUMBER); CREATE TABLE appearances (player_id TEXT); CREATE TABLE player_award (award_id TEXT, league_id TEXT, notes TEXT, tie TEXT, player_id TEXT); CREATE TABLE batting_postseason (player_id TEXT);"
      },
      {
        "question": "Who won an award in 1960?",
        "query": "SELECT t1.name_first , t1.name_last FROM player AS t1 JOIN player_award AS t2 ON t1.player_id = t2.player_id WHERE t2.year = 1960 GROUP BY t2.player_id",
        "schema": "CREATE TABLE hall_of_fame (yearid NUMBER, votes NUMBER, inducted TEXT, player_id TEXT, ballots NUMBER); CREATE TABLE player_college (player_id TEXT, year NUMBER); CREATE TABLE park (park_alias TEXT); CREATE TABLE fielding_outfield (player_id TEXT); CREATE TABLE batting_postseason (player_id TEXT); CREATE TABLE player (death_country TEXT, death_day NUMBER, death_month NUMBER, death_state TEXT, bats TEXT, height NUMBER, death_year NUMBER, name_first TEXT, retro_id TEXT, throws TEXT, name_given TEXT, birth_year NUMBER, death_city TEXT, bbref_id TEXT, player_id TEXT, name_last TEXT, weight NUMBER, birth_day NUMBER, birth_country TEXT, birth_month NUMBER, birth_city TEXT, birth_state TEXT, final_game TEXT, debut TEXT); CREATE TABLE player_award_vote (points_max NUMBER, votes_first NUMBER, league_id TEXT, award_id TEXT, player_id TEXT, year NUMBER, points_won NUMBER); CREATE TABLE manager_award (player_id TEXT, award_id TEXT, notes NUMBER); CREATE TABLE all_star (game_id TEXT, year NUMBER, gp NUMBER, player_id TEXT, game_num NUMBER); CREATE TABLE fielding (player_id TEXT); CREATE TABLE manager_award_vote (year NUMBER, award_id TEXT, player_id TEXT, points_max NUMBER, points_won NUMBER, votes_first NUMBER); CREATE TABLE appearances (year NUMBER, player_id TEXT); CREATE TABLE postseason (team_id_winner TEXT, wins NUMBER, year NUMBER, league_id_winner TEXT); CREATE TABLE player_award (award_id TEXT, notes TEXT, tie TEXT, year NUMBER, league_id TEXT, player_id TEXT); CREATE TABLE fielding_postseason (sb NUMBER, pb NUMBER, player_id TEXT, pos TEXT, a NUMBER, league_id TEXT, dp NUMBER, cs NUMBER, po NUMBER, inn_outs NUMBER, round TEXT, e NUMBER, g NUMBER, gs NUMBER, tp NUMBER); CREATE TABLE team_half (div_win TEXT);"
      },
      {
        "question": "How about in 1961?",
        "query": "SELECT t1.name_first , t1.name_last FROM player AS t1 JOIN player_award AS t2 ON t1.player_id = t2.player_id WHERE t2.year = 1961 GROUP BY t2.player_id",
        "schema": "CREATE TABLE manager_award (player_id TEXT, award_id TEXT, notes NUMBER); CREATE TABLE postseason (team_id_winner TEXT, year NUMBER, wins NUMBER, league_id_winner TEXT); CREATE TABLE player_college (year NUMBER, player_id TEXT); CREATE TABLE team_half (div_win TEXT); CREATE TABLE hall_of_fame (yearid NUMBER, votes NUMBER, inducted TEXT, ballots NUMBER, player_id TEXT); CREATE TABLE fielding_postseason (sb NUMBER, player_id TEXT, e NUMBER, a NUMBER, g NUMBER, gs NUMBER, tp NUMBER, round TEXT, pb NUMBER, inn_outs NUMBER, pos TEXT, league_id TEXT, dp NUMBER, cs NUMBER, po NUMBER); CREATE TABLE park (park_alias TEXT); CREATE TABLE fielding_outfield (player_id TEXT); CREATE TABLE appearances (year NUMBER, player_id TEXT); CREATE TABLE player_award (notes TEXT, year NUMBER, tie TEXT, award_id TEXT, player_id TEXT, league_id TEXT); CREATE TABLE all_star (game_id TEXT, player_id TEXT, game_num NUMBER, gp NUMBER, year NUMBER); CREATE TABLE fielding (player_id TEXT); CREATE TABLE manager_award_vote (award_id TEXT, points_won NUMBER, points_max NUMBER, player_id TEXT, votes_first NUMBER, year NUMBER); CREATE TABLE batting_postseason (player_id TEXT); CREATE TABLE player_award_vote (player_id TEXT, year NUMBER, points_max NUMBER, league_id TEXT, votes_first NUMBER, award_id TEXT, points_won NUMBER); CREATE TABLE player (weight NUMBER, birth_day NUMBER, final_game TEXT, death_state TEXT, birth_country TEXT, throws TEXT, player_id TEXT, bbref_id TEXT, name_last TEXT, birth_month NUMBER, retro_id TEXT, death_year NUMBER, bats TEXT, death_month NUMBER, death_country TEXT, death_day NUMBER, name_first TEXT, debut TEXT, name_given TEXT, height NUMBER, birth_state TEXT, birth_city TEXT, death_city TEXT, birth_year NUMBER);"
      },
      {
        "question": "Among the players, who won awards both in 1960 and in 1961?",
        "query": "SELECT t1.name_first , t1.name_last FROM player AS t1 JOIN player_award AS t2 ON t1.player_id = t2.player_id WHERE t2.year = 1960 INTERSECT SELECT t1.name_first , t1.name_last FROM player AS t1 JOIN player_award AS t2 WHERE t2.year = 1961",
        "schema": "CREATE TABLE park (park_alias TEXT); CREATE TABLE postseason (wins NUMBER, team_id_winner TEXT, league_id_winner TEXT, year NUMBER); CREATE TABLE hall_of_fame (votes NUMBER, yearid NUMBER, ballots NUMBER, inducted TEXT, player_id TEXT); CREATE TABLE player_college (player_id TEXT, year NUMBER); CREATE TABLE manager_award_vote (player_id TEXT, points_won NUMBER, year NUMBER, award_id TEXT, points_max NUMBER, votes_first NUMBER); CREATE TABLE fielding_outfield (player_id TEXT); CREATE TABLE all_star (game_num NUMBER, game_id TEXT, year NUMBER, gp NUMBER, player_id TEXT); CREATE TABLE appearances (player_id TEXT, year NUMBER); CREATE TABLE team_half (div_win TEXT); CREATE TABLE player_award (award_id TEXT, league_id TEXT, tie TEXT, year NUMBER, player_id TEXT, notes TEXT); CREATE TABLE fielding_postseason (sb NUMBER, cs NUMBER, dp NUMBER, league_id TEXT, player_id TEXT, po NUMBER, e NUMBER, g NUMBER, tp NUMBER, gs NUMBER, a NUMBER, inn_outs NUMBER, pb NUMBER, pos TEXT, round TEXT); CREATE TABLE player_award_vote (league_id TEXT, player_id TEXT, award_id TEXT, year NUMBER, points_won NUMBER, points_max NUMBER, votes_first NUMBER); CREATE TABLE fielding (player_id TEXT); CREATE TABLE player (player_id TEXT, birth_month NUMBER, name_given TEXT, name_first TEXT, birth_state TEXT, birth_country TEXT, death_year NUMBER, death_country TEXT, birth_year NUMBER, bats TEXT, throws TEXT, death_day NUMBER, birth_city TEXT, height NUMBER, name_last TEXT, debut TEXT, retro_id TEXT, bbref_id TEXT, death_city TEXT, death_state TEXT, death_month NUMBER, birth_day NUMBER, final_game TEXT, weight NUMBER); CREATE TABLE manager_award (player_id TEXT, notes NUMBER, award_id TEXT); CREATE TABLE batting_postseason (player_id TEXT);"
      }
    ],
    [
      {
        "question": "How many players have a weight greater than 220?",
        "query": "SELECT count(*) FROM player WHERE weight > 220",
        "schema": "CREATE TABLE player (bbref_id TEXT, name_last TEXT, weight NUMBER, player_id TEXT, name_first TEXT, name_given TEXT, bats TEXT); CREATE TABLE appearances (player_id TEXT); CREATE TABLE fielding_postseason (player_id TEXT); CREATE TABLE player_award (player_id TEXT); CREATE TABLE player_college (player_id TEXT); CREATE TABLE fielding (player_id TEXT); CREATE TABLE team_half (div_id TEXT); CREATE TABLE team_franchise (na_assoc TEXT, franchise_id TEXT); CREATE TABLE college (college_id TEXT); CREATE TABLE fielding_outfield (player_id TEXT); CREATE TABLE all_star (player_id TEXT); CREATE TABLE hall_of_fame (player_id TEXT); CREATE TABLE batting_postseason (player_id TEXT); CREATE TABLE player_award_vote (player_id TEXT);"
      },
      {
        "question": "How about greater than 230?",
        "query": "SELECT count(*) FROM player WHERE weight > 230",
        "schema": "CREATE TABLE team_half (div_id TEXT); CREATE TABLE appearances (player_id TEXT); CREATE TABLE fielding (player_id TEXT); CREATE TABLE player_award (player_id TEXT); CREATE TABLE player (bbref_id TEXT, weight NUMBER, name_last TEXT, bats TEXT, name_first TEXT, player_id TEXT, name_given TEXT); CREATE TABLE player_college (player_id TEXT); CREATE TABLE all_star (player_id TEXT); CREATE TABLE college (college_id TEXT); CREATE TABLE fielding_outfield (player_id TEXT); CREATE TABLE team_franchise (franchise_id TEXT, na_assoc TEXT); CREATE TABLE fielding_postseason (player_id TEXT); CREATE TABLE player_award_vote (player_id TEXT); CREATE TABLE batting_postseason (player_id TEXT); CREATE TABLE hall_of_fame (player_id TEXT);"
      },
      {
        "question": "How many players have a weight greater than 220 or height shorter than 75?",
        "query": "SELECT count(*) FROM player WHERE weight > 220 OR height < 75",
        "schema": "CREATE TABLE player_award_vote (player_id TEXT); CREATE TABLE player (weight NUMBER, name_first TEXT, name_last TEXT, final_game TEXT, birth_country TEXT, death_month NUMBER, birth_day NUMBER, birth_city TEXT, death_year NUMBER, death_city TEXT, name_given TEXT, birth_year NUMBER, height NUMBER, birth_month NUMBER, birth_state TEXT, debut TEXT, death_state TEXT, death_day NUMBER, death_country TEXT, retro_id TEXT, throws TEXT, player_id TEXT, bats TEXT, bbref_id TEXT); CREATE TABLE hall_of_fame (player_id TEXT); CREATE TABLE fielding_outfield (player_id TEXT); CREATE TABLE team_half (div_id TEXT); CREATE TABLE college (college_id TEXT); CREATE TABLE fielding (player_id TEXT); CREATE TABLE player_college (player_id TEXT); CREATE TABLE batting_postseason (player_id TEXT); CREATE TABLE appearances (player_id TEXT); CREATE TABLE all_star (player_id TEXT); CREATE TABLE fielding_postseason (player_id TEXT); CREATE TABLE team_franchise (na_assoc TEXT, franchise_id TEXT); CREATE TABLE player_award (player_id TEXT);"
      },
      {
        "question": "Please list their full names.",
        "query": "SELECT name_first , name_last FROM player WHERE weight > 220 OR height < 75",
        "schema": "CREATE TABLE fielding (player_id TEXT); CREATE TABLE player (bats TEXT, debut TEXT, death_year NUMBER, birth_state TEXT, final_game TEXT, name_last TEXT, birth_city TEXT, name_given TEXT, birth_day NUMBER, bbref_id TEXT, death_state TEXT, birth_country TEXT, birth_year NUMBER, death_day NUMBER, name_first TEXT, death_country TEXT, throws TEXT, birth_month NUMBER, death_city TEXT, retro_id TEXT, height NUMBER, player_id TEXT, weight NUMBER, death_month NUMBER); CREATE TABLE team_half (div_id TEXT); CREATE TABLE team_franchise (franchise_id TEXT, na_assoc TEXT); CREATE TABLE player_award_vote (player_id TEXT); CREATE TABLE college (college_id TEXT); CREATE TABLE hall_of_fame (player_id TEXT); CREATE TABLE fielding_outfield (player_id TEXT); CREATE TABLE appearances (player_id TEXT); CREATE TABLE all_star (player_id TEXT); CREATE TABLE fielding_postseason (player_id TEXT); CREATE TABLE batting_postseason (player_id TEXT); CREATE TABLE player_college (player_id TEXT); CREATE TABLE player_award (player_id TEXT);"
      }
    ],
    [
      {
        "question": "How many times did the Boston Red Stockings win in postseason?",
        "query": "SELECT count(*) FROM postseason AS t1 JOIN team AS t2 ON t1.team_id_winner = t2.team_id_br WHERE t2.name = 'Boston Red Stockings';",
        "schema": "CREATE TABLE postseason (year NUMBER, team_id_winner TEXT, losses NUMBER, team_id_loser TEXT, league_id_winner TEXT, wins NUMBER, league_id_loser TEXT, round TEXT); CREATE TABLE fielding (league_id TEXT, stint NUMBER, sb NUMBER, dp NUMBER, wp NUMBER, cs NUMBER, team_id TEXT, player_id TEXT, year NUMBER, inn_outs NUMBER, gs NUMBER, e NUMBER, pb NUMBER, pos TEXT, g NUMBER, zr NUMBER, a NUMBER, po NUMBER); CREATE TABLE fielding_outfield (year NUMBER, glf NUMBER, grf NUMBER, player_id TEXT); CREATE TABLE player_college (college_id TEXT, player_id TEXT); CREATE TABLE home_game (league_id TEXT, games NUMBER, team_id TEXT, park_id TEXT, year NUMBER); CREATE TABLE park (park_id TEXT, city TEXT); CREATE TABLE team (er NUMBER, lg_win TEXT, l NUMBER, sv NUMBER, league_id TEXT, wc_win TEXT, ha NUMBER, park TEXT, team_id TEXT, div_win TEXT, w NUMBER, rank NUMBER, ws_win TEXT, r NUMBER, div_id TEXT, franchise_id TEXT, ra NUMBER, hra NUMBER, soa NUMBER, era NUMBER, team_id_br TEXT, attendance NUMBER, h NUMBER, ghome NUMBER, team_id_lahman45 TEXT, year NUMBER, name TEXT, sf NUMBER, bpf NUMBER, ppf NUMBER, cs NUMBER, triple NUMBER, hbp NUMBER, e NUMBER, so NUMBER, dp NUMBER, double NUMBER, g NUMBER, bb NUMBER, team_id_retro TEXT, bba NUMBER, sb NUMBER, ipouts NUMBER, cg NUMBER, fp NUMBER, sho NUMBER, hr NUMBER, ab NUMBER); CREATE TABLE all_star (game_num NUMBER, game_id TEXT, team_id TEXT, league_id TEXT, year NUMBER, player_id TEXT); CREATE TABLE player (birth_city TEXT, player_id TEXT); CREATE TABLE appearances (team_id TEXT, league_id TEXT, g_batting NUMBER, gs NUMBER, year NUMBER); CREATE TABLE college (city TEXT, college_id TEXT); CREATE TABLE batting (bb NUMBER, sb NUMBER, team_id TEXT, hbp NUMBER, h NUMBER, ab NUMBER, sh NUMBER, double NUMBER, hr NUMBER, g_idp NUMBER, r NUMBER, stint NUMBER, triple NUMBER, ibb NUMBER, g NUMBER, year NUMBER, so NUMBER, league_id TEXT, player_id TEXT, cs NUMBER, sf NUMBER); CREATE TABLE hall_of_fame (yearid NUMBER, player_id TEXT); CREATE TABLE player_award (year NUMBER); CREATE TABLE player_award_vote (year NUMBER, points_won NUMBER, league_id TEXT); CREATE TABLE manager_award_vote (points_won NUMBER, league_id TEXT); CREATE TABLE pitching_postseason (l NUMBER, gs NUMBER, gf NUMBER, bb NUMBER, g NUMBER, bfp NUMBER, sf NUMBER, w NUMBER, baopp TEXT, bk NUMBER, era NUMBER, h NUMBER, g_idp NUMBER, round TEXT, hr NUMBER, cg NUMBER, so NUMBER, sh NUMBER, league_id TEXT, sho NUMBER, wp NUMBER, year NUMBER, r NUMBER, player_id TEXT, sv NUMBER, ibb NUMBER, hbp NUMBER, ipouts NUMBER, er NUMBER, team_id TEXT); CREATE TABLE team_franchise (na_assoc TEXT, franchise_id TEXT, franchise_name TEXT); CREATE TABLE team_half (team_id TEXT, div_win TEXT, half NUMBER); CREATE TABLE batting_postseason (ab NUMBER, h NUMBER, sb NUMBER, year NUMBER, double NUMBER, r NUMBER, rbi NUMBER, so NUMBER, round TEXT, bb NUMBER, sh NUMBER, cs NUMBER, player_id TEXT, team_id TEXT, g_idp NUMBER, league_id TEXT, ibb NUMBER, triple NUMBER, g NUMBER, sf NUMBER, hr NUMBER, hbp NUMBER); CREATE TABLE fielding_postseason (team_id TEXT, round TEXT, g NUMBER, dp NUMBER, a NUMBER, inn_outs NUMBER, year NUMBER, pos TEXT, e NUMBER, sb NUMBER, gs NUMBER, league_id TEXT, cs NUMBER, po NUMBER, player_id TEXT, tp NUMBER, pb NUMBER); CREATE TABLE pitching (sv NUMBER, sf NUMBER, bfp NUMBER, league_id TEXT, g_idp NUMBER, team_id TEXT, year NUMBER, r NUMBER, wp NUMBER, so NUMBER, bk NUMBER, ibb NUMBER);"
      },
      {
        "question": "What is the average score of the games that it won?",
        "query": "SELECT avg(t1.wins) FROM postseason AS t1 JOIN team AS t2 ON t1.team_id_winner = t2.team_id_br WHERE t2.name = 'Boston Red Stockings';",
        "schema": "CREATE TABLE player_award (year NUMBER); CREATE TABLE batting (stint NUMBER, hbp NUMBER, triple NUMBER, sb NUMBER, double NUMBER, g_idp NUMBER, g NUMBER, ibb NUMBER, cs NUMBER, so NUMBER, sh NUMBER, r NUMBER, year NUMBER, league_id TEXT, h NUMBER, player_id TEXT, bb NUMBER, sf NUMBER, team_id TEXT, ab NUMBER, hr NUMBER); CREATE TABLE pitching_postseason (r NUMBER, era NUMBER, hbp NUMBER, player_id TEXT, sv NUMBER, sh NUMBER, bfp NUMBER, team_id TEXT, bb NUMBER, sho NUMBER, l NUMBER, ibb NUMBER, wp NUMBER, cg NUMBER, so NUMBER, round TEXT, year NUMBER, league_id TEXT, bk NUMBER, gf NUMBER, gs NUMBER, hr NUMBER, baopp TEXT, er NUMBER, g NUMBER, w NUMBER, ipouts NUMBER, sf NUMBER, h NUMBER, g_idp NUMBER); CREATE TABLE team (r NUMBER, hr NUMBER, cg NUMBER, div_win TEXT, div_id TEXT, attendance NUMBER, h NUMBER, l NUMBER, e NUMBER, sho NUMBER, hra NUMBER, team_id_retro TEXT, bba NUMBER, g NUMBER, year NUMBER, cs NUMBER, team_id TEXT, lg_win TEXT, franchise_id TEXT, w NUMBER, double NUMBER, team_id_br TEXT, ipouts NUMBER, ghome NUMBER, bpf NUMBER, ws_win TEXT, rank NUMBER, league_id TEXT, bb NUMBER, so NUMBER, dp NUMBER, wc_win TEXT, park TEXT, soa NUMBER, team_id_lahman45 TEXT, sv NUMBER, era NUMBER, ra NUMBER, er NUMBER, name TEXT, hbp NUMBER, ab NUMBER, fp NUMBER, triple NUMBER, sf NUMBER, sb NUMBER, ha NUMBER, ppf NUMBER); CREATE TABLE all_star (game_num NUMBER, year NUMBER, team_id TEXT, game_id TEXT, league_id TEXT, player_id TEXT); CREATE TABLE batting_postseason (cs NUMBER, r NUMBER, round TEXT, h NUMBER, ibb NUMBER, double NUMBER, hr NUMBER, sf NUMBER, hbp NUMBER, rbi NUMBER, g_idp NUMBER, ab NUMBER, g NUMBER, league_id TEXT, so NUMBER, player_id TEXT, triple NUMBER, sh NUMBER, year NUMBER, sb NUMBER, team_id TEXT, bb NUMBER); CREATE TABLE postseason (losses NUMBER, league_id_winner TEXT, wins NUMBER, round TEXT, team_id_winner TEXT, team_id_loser TEXT, league_id_loser TEXT, year NUMBER); CREATE TABLE fielding_outfield (player_id TEXT, glf NUMBER, year NUMBER, grf NUMBER); CREATE TABLE player_award_vote (points_won NUMBER, league_id TEXT, year NUMBER); CREATE TABLE manager_award_vote (points_won NUMBER, league_id TEXT); CREATE TABLE team_franchise (franchise_id TEXT, franchise_name TEXT, na_assoc TEXT); CREATE TABLE home_game (games NUMBER, year NUMBER, team_id TEXT, league_id TEXT, park_id TEXT); CREATE TABLE fielding_postseason (inn_outs NUMBER, sb NUMBER, e NUMBER, g NUMBER, round TEXT, dp NUMBER, pos TEXT, player_id TEXT, league_id TEXT, team_id TEXT, tp NUMBER, po NUMBER, cs NUMBER, gs NUMBER, a NUMBER, pb NUMBER, year NUMBER); CREATE TABLE team_half (half NUMBER, div_id TEXT, div_win TEXT, team_id TEXT); CREATE TABLE appearances (team_id TEXT, g_batting NUMBER, league_id TEXT, year NUMBER, gs NUMBER); CREATE TABLE hall_of_fame (yearid NUMBER, player_id TEXT); CREATE TABLE player (birth_city TEXT, player_id TEXT); CREATE TABLE player_college (player_id TEXT, college_id TEXT); CREATE TABLE pitching (g_idp NUMBER, bfp NUMBER, sf NUMBER, ibb NUMBER, league_id TEXT, year NUMBER, sv NUMBER, so NUMBER, bk NUMBER, wp NUMBER, r NUMBER, team_id TEXT); CREATE TABLE college (college_id TEXT, city TEXT); CREATE TABLE park (city TEXT, park_id TEXT); CREATE TABLE fielding (team_id TEXT, cs NUMBER, g NUMBER, stint NUMBER, league_id TEXT, player_id TEXT, pb NUMBER, wp NUMBER, a NUMBER, inn_outs NUMBER, gs NUMBER, sb NUMBER, po NUMBER, pos TEXT, year NUMBER, e NUMBER, dp NUMBER, zr NUMBER);"
      },
      {
        "question": "How about the the maximum score?",
        "query": "SELECT max(t1.wins) FROM postseason AS t1 JOIN team AS t2 ON t1.team_id_winner = t2.team_id_br WHERE t2.name = 'Boston Red Stockings';",
        "schema": "CREATE TABLE fielding_outfield (grf NUMBER, year NUMBER, glf NUMBER, player_id TEXT); CREATE TABLE team_half (half NUMBER, team_id TEXT, div_win TEXT, div_id TEXT); CREATE TABLE pitching (ibb NUMBER, league_id TEXT, bfp NUMBER, wp NUMBER, g_idp NUMBER, bk NUMBER, team_id TEXT, year NUMBER, sf NUMBER, sv NUMBER, r NUMBER, so NUMBER); CREATE TABLE home_game (games NUMBER, year NUMBER, team_id TEXT, league_id TEXT, park_id TEXT); CREATE TABLE player_award_vote (league_id TEXT, year NUMBER, points_won NUMBER); CREATE TABLE batting (cs NUMBER, sb NUMBER, so NUMBER, g NUMBER, bb NUMBER, team_id TEXT, h NUMBER, league_id TEXT, ibb NUMBER, player_id TEXT, r NUMBER, hbp NUMBER, triple NUMBER, hr NUMBER, ab NUMBER, sf NUMBER, g_idp NUMBER, sh NUMBER, double NUMBER, stint NUMBER, year NUMBER); CREATE TABLE park (park_id TEXT, city TEXT); CREATE TABLE team_franchise (franchise_id TEXT, na_assoc TEXT, franchise_name TEXT); CREATE TABLE player_college (college_id TEXT, player_id TEXT); CREATE TABLE batting_postseason (so NUMBER, rbi NUMBER, bb NUMBER, ab NUMBER, hr NUMBER, g NUMBER, g_idp NUMBER, team_id TEXT, sb NUMBER, double NUMBER, sf NUMBER, triple NUMBER, cs NUMBER, r NUMBER, sh NUMBER, h NUMBER, hbp NUMBER, year NUMBER, league_id TEXT, round TEXT, player_id TEXT, ibb NUMBER); CREATE TABLE postseason (year NUMBER, league_id_winner TEXT, round TEXT, losses NUMBER, team_id_loser TEXT, team_id_winner TEXT, league_id_loser TEXT, wins NUMBER); CREATE TABLE manager_award_vote (league_id TEXT, points_won NUMBER); CREATE TABLE fielding_postseason (inn_outs NUMBER, player_id TEXT, dp NUMBER, round TEXT, sb NUMBER, pos TEXT, e NUMBER, cs NUMBER, league_id TEXT, team_id TEXT, po NUMBER, tp NUMBER, gs NUMBER, pb NUMBER, a NUMBER, g NUMBER, year NUMBER); CREATE TABLE fielding (league_id TEXT, stint NUMBER, zr NUMBER, pos TEXT, po NUMBER, a NUMBER, inn_outs NUMBER, g NUMBER, cs NUMBER, player_id TEXT, gs NUMBER, team_id TEXT, wp NUMBER, e NUMBER, sb NUMBER, dp NUMBER, pb NUMBER, year NUMBER); CREATE TABLE college (college_id TEXT, city TEXT); CREATE TABLE appearances (league_id TEXT, year NUMBER, team_id TEXT, g_batting NUMBER, gs NUMBER); CREATE TABLE team (bpf NUMBER, sf NUMBER, w NUMBER, h NUMBER, so NUMBER, park TEXT, league_id TEXT, dp NUMBER, sb NUMBER, er NUMBER, hbp NUMBER, name TEXT, hr NUMBER, sv NUMBER, ab NUMBER, cg NUMBER, year NUMBER, cs NUMBER, ra NUMBER, hra NUMBER, bb NUMBER, r NUMBER, div_id TEXT, ppf NUMBER, attendance NUMBER, div_win TEXT, era NUMBER, team_id_br TEXT, g NUMBER, ha NUMBER, l NUMBER, lg_win TEXT, e NUMBER, sho NUMBER, ws_win TEXT, wc_win TEXT, ghome NUMBER, triple NUMBER, team_id TEXT, ipouts NUMBER, team_id_lahman45 TEXT, fp NUMBER, rank NUMBER, team_id_retro TEXT, double NUMBER, bba NUMBER, franchise_id TEXT, soa NUMBER); CREATE TABLE player (birth_city TEXT, player_id TEXT); CREATE TABLE pitching_postseason (gf NUMBER, w NUMBER, era NUMBER, round TEXT, gs NUMBER, l NUMBER, so NUMBER, player_id TEXT, g_idp NUMBER, bb NUMBER, sv NUMBER, hbp NUMBER, sho NUMBER, cg NUMBER, h NUMBER, ipouts NUMBER, er NUMBER, bk NUMBER, ibb NUMBER, bfp NUMBER, wp NUMBER, team_id TEXT, year NUMBER, r NUMBER, sf NUMBER, league_id TEXT, hr NUMBER, baopp TEXT, sh NUMBER, g NUMBER); CREATE TABLE hall_of_fame (yearid NUMBER, player_id TEXT); CREATE TABLE all_star (team_id TEXT, league_id TEXT, game_num NUMBER, game_id TEXT, year NUMBER, player_id TEXT); CREATE TABLE player_award (year NUMBER);"
      }
    ],
    [
      {
        "question": "How many times did the Boston Red Stockings win in postseason?",
        "query": "SELECT count(*) FROM postseason AS t1 JOIN team AS t2 ON t1.team_id_winner = t2.team_id_br WHERE t2.name = 'Boston Red Stockings';",
        "schema": "CREATE TABLE pitching_postseason (league_id TEXT, r NUMBER, h NUMBER, gs NUMBER, w NUMBER, cg NUMBER, team_id TEXT, ipouts NUMBER, so NUMBER, year NUMBER, bfp NUMBER, sh NUMBER, bk NUMBER, era NUMBER, g NUMBER, bb NUMBER, l NUMBER, ibb NUMBER, sf NUMBER, sv NUMBER, round TEXT, hbp NUMBER, sho NUMBER, g_idp NUMBER, hr NUMBER, wp NUMBER, player_id TEXT, gf NUMBER, er NUMBER, baopp TEXT); CREATE TABLE player (birth_city TEXT, player_id TEXT); CREATE TABLE player_college (college_id TEXT, player_id TEXT); CREATE TABLE fielding_outfield (grf NUMBER, year NUMBER, glf NUMBER, player_id TEXT); CREATE TABLE team_half (div_win TEXT, half NUMBER, team_id TEXT); CREATE TABLE park (city TEXT, park_id TEXT); CREATE TABLE hall_of_fame (yearid NUMBER, player_id TEXT); CREATE TABLE home_game (year NUMBER, team_id TEXT, park_id TEXT, league_id TEXT, games NUMBER); CREATE TABLE all_star (game_id TEXT, team_id TEXT, game_num NUMBER, year NUMBER, player_id TEXT); CREATE TABLE team (bba NUMBER, ppf NUMBER, cg NUMBER, dp NUMBER, w NUMBER, sf NUMBER, g NUMBER, r NUMBER, er NUMBER, franchise_id TEXT, wc_win TEXT, ra NUMBER, hra NUMBER, triple NUMBER, team_id_retro TEXT, ws_win TEXT, league_id TEXT, park TEXT, h NUMBER, div_win TEXT, rank NUMBER, hbp NUMBER, e NUMBER, team_id_br TEXT, name TEXT, soa NUMBER, cs NUMBER, bpf NUMBER, l NUMBER, team_id_lahman45 TEXT, team_id TEXT, sb NUMBER, fp NUMBER, sho NUMBER, so NUMBER, bb NUMBER, hr NUMBER, era NUMBER, attendance NUMBER, ghome NUMBER, div_id TEXT, ipouts NUMBER, sv NUMBER, lg_win TEXT, year NUMBER, ha NUMBER, double NUMBER, ab NUMBER); CREATE TABLE batting_postseason (round TEXT, player_id TEXT, triple NUMBER, rbi NUMBER, hr NUMBER, year NUMBER, g NUMBER, cs NUMBER, team_id TEXT, hbp NUMBER, so NUMBER, g_idp NUMBER, league_id TEXT, ab NUMBER, r NUMBER, sf NUMBER, double NUMBER, sb NUMBER, bb NUMBER, h NUMBER, ibb NUMBER, sh NUMBER); CREATE TABLE pitching (w NUMBER, baopp NUMBER, r NUMBER, bfp NUMBER, sho NUMBER, sh NUMBER, so NUMBER, wp NUMBER, league_id TEXT, sf NUMBER, year NUMBER, team_id TEXT, sv NUMBER, l NUMBER, bk NUMBER); CREATE TABLE college (city TEXT, college_id TEXT); CREATE TABLE fielding_postseason (league_id TEXT, dp NUMBER, cs NUMBER, e NUMBER, gs NUMBER, inn_outs NUMBER, tp NUMBER, round TEXT, pos TEXT, player_id TEXT, sb NUMBER, po NUMBER, pb NUMBER, year NUMBER, g NUMBER, a NUMBER, team_id TEXT); CREATE TABLE postseason (team_id_winner TEXT, losses NUMBER, wins NUMBER, round TEXT, league_id_loser TEXT, league_id_winner TEXT, team_id_loser TEXT, year NUMBER); CREATE TABLE fielding (player_id TEXT, sb NUMBER, zr NUMBER, g NUMBER, year NUMBER, cs NUMBER, team_id TEXT, stint NUMBER, gs NUMBER, a NUMBER, wp NUMBER, dp NUMBER, po NUMBER, e NUMBER, inn_outs NUMBER, league_id TEXT, pb NUMBER, pos TEXT); CREATE TABLE player_award_vote (year NUMBER, points_won NUMBER, league_id TEXT); CREATE TABLE batting (ibb NUMBER, r NUMBER, ab NUMBER, stint NUMBER, sf NUMBER, rbi NUMBER, g NUMBER, double NUMBER, hbp NUMBER, sb NUMBER, year NUMBER, g_idp NUMBER, cs NUMBER, h NUMBER, league_id TEXT, bb NUMBER, player_id TEXT, hr NUMBER, team_id TEXT, triple NUMBER, so NUMBER, sh NUMBER); CREATE TABLE team_franchise (franchise_id TEXT, na_assoc TEXT, franchise_name TEXT); CREATE TABLE appearances (year NUMBER, gs NUMBER, team_id TEXT, league_id TEXT, g_batting NUMBER); CREATE TABLE manager_award_vote (points_won NUMBER, league_id TEXT);"
      },
      {
        "question": "How many time did the Chicago White Stockings win in postseason?",
        "query": "SELECT count(*) FROM postseason AS t1 JOIN team AS t2 ON t1.team_id_winner = t2.team_id_br WHERE t2.name = 'Chicago White Stockings';",
        "schema": "CREATE TABLE team_franchise (franchise_name TEXT, na_assoc TEXT, franchise_id TEXT); CREATE TABLE appearances (g_batting NUMBER, team_id TEXT, gs NUMBER, year NUMBER, league_id TEXT); CREATE TABLE park (city TEXT, park_id TEXT); CREATE TABLE hall_of_fame (yearid NUMBER, player_id TEXT); CREATE TABLE manager_award_vote (points_won NUMBER, league_id TEXT); CREATE TABLE fielding (a NUMBER, pos TEXT, po NUMBER, g NUMBER, cs NUMBER, team_id TEXT, gs NUMBER, year NUMBER, wp NUMBER, inn_outs NUMBER, stint NUMBER, sb NUMBER, e NUMBER, pb NUMBER, league_id TEXT, dp NUMBER, zr NUMBER, player_id TEXT); CREATE TABLE player (player_id TEXT, birth_city TEXT); CREATE TABLE pitching (bk NUMBER, so NUMBER, w NUMBER, bfp NUMBER, sho NUMBER, year NUMBER, sh NUMBER, wp NUMBER, sf NUMBER, r NUMBER, l NUMBER, league_id TEXT, sv NUMBER, team_id TEXT, baopp NUMBER); CREATE TABLE pitching_postseason (gs NUMBER, league_id TEXT, sv NUMBER, hr NUMBER, era NUMBER, year NUMBER, ipouts NUMBER, round TEXT, so NUMBER, player_id TEXT, gf NUMBER, ibb NUMBER, sh NUMBER, sho NUMBER, wp NUMBER, team_id TEXT, baopp TEXT, bk NUMBER, w NUMBER, g NUMBER, hbp NUMBER, bb NUMBER, l NUMBER, bfp NUMBER, r NUMBER, sf NUMBER, er NUMBER, h NUMBER, g_idp NUMBER, cg NUMBER); CREATE TABLE team_half (half NUMBER, team_id TEXT, year NUMBER, div_win TEXT); CREATE TABLE all_star (game_id TEXT, team_id TEXT, game_num NUMBER, player_id TEXT, year NUMBER); CREATE TABLE batting_postseason (ab NUMBER, sf NUMBER, round TEXT, sh NUMBER, league_id TEXT, double NUMBER, player_id TEXT, team_id TEXT, sb NUMBER, so NUMBER, h NUMBER, hbp NUMBER, triple NUMBER, bb NUMBER, hr NUMBER, year NUMBER, g NUMBER, ibb NUMBER, rbi NUMBER, cs NUMBER, r NUMBER, g_idp NUMBER); CREATE TABLE player_award_vote (league_id TEXT, year NUMBER, points_won NUMBER); CREATE TABLE home_game (league_id TEXT, year NUMBER, park_id TEXT, team_id TEXT, games NUMBER); CREATE TABLE fielding_postseason (pb NUMBER, gs NUMBER, round TEXT, inn_outs NUMBER, a NUMBER, team_id TEXT, dp NUMBER, e NUMBER, year NUMBER, po NUMBER, cs NUMBER, pos TEXT, player_id TEXT, sb NUMBER, league_id TEXT, g NUMBER, tp NUMBER); CREATE TABLE team (w NUMBER, g NUMBER, hra NUMBER, sb NUMBER, ha NUMBER, era NUMBER, league_id TEXT, hr NUMBER, div_id TEXT, team_id TEXT, fp NUMBER, e NUMBER, lg_win TEXT, bba NUMBER, ghome NUMBER, l NUMBER, franchise_id TEXT, hbp NUMBER, double NUMBER, sho NUMBER, cs NUMBER, cg NUMBER, attendance NUMBER, er NUMBER, div_win TEXT, soa NUMBER, h NUMBER, ab NUMBER, r NUMBER, bb NUMBER, dp NUMBER, ws_win TEXT, ra NUMBER, sf NUMBER, wc_win TEXT, sv NUMBER, rank NUMBER, triple NUMBER, year NUMBER, ipouts NUMBER, ppf NUMBER, park TEXT, name TEXT, bpf NUMBER, team_id_lahman45 TEXT, so NUMBER, team_id_br TEXT, team_id_retro TEXT); CREATE TABLE player_college (college_id TEXT, player_id TEXT); CREATE TABLE fielding_outfield (year NUMBER, grf NUMBER, player_id TEXT, glf NUMBER); CREATE TABLE batting (cs NUMBER, stint NUMBER, ibb NUMBER, so NUMBER, triple NUMBER, g_idp NUMBER, r NUMBER, hr NUMBER, g NUMBER, year NUMBER, double NUMBER, sb NUMBER, hbp NUMBER, team_id TEXT, sf NUMBER, sh NUMBER, ab NUMBER, league_id TEXT, h NUMBER, player_id TEXT, bb NUMBER, rbi NUMBER); CREATE TABLE postseason (year NUMBER, team_id_loser TEXT, wins NUMBER, losses NUMBER, league_id_loser TEXT, league_id_winner TEXT, team_id_winner TEXT, round TEXT); CREATE TABLE college (city TEXT, college_id TEXT);"
      },
      {
        "question": "How many times did the Boston Red Stockings lose in postseason?",
        "query": "SELECT count(*) FROM postseason AS t1 JOIN team AS t2 ON t1.team_id_loser = t2.team_id_br WHERE t2.name = 'Boston Red Stockings'",
        "schema": "CREATE TABLE fielding (cs NUMBER, a NUMBER, league_id TEXT, year NUMBER, gs NUMBER, sb NUMBER, zr NUMBER, team_id TEXT, e NUMBER, stint NUMBER, pos TEXT, player_id TEXT, inn_outs NUMBER, pb NUMBER, po NUMBER, dp NUMBER, wp NUMBER, g NUMBER); CREATE TABLE team (e NUMBER, team_id_lahman45 TEXT, double NUMBER, ha NUMBER, sb NUMBER, er NUMBER, l NUMBER, bpf NUMBER, hr NUMBER, cs NUMBER, ghome NUMBER, hbp NUMBER, sho NUMBER, rank NUMBER, ppf NUMBER, ws_win TEXT, w NUMBER, dp NUMBER, franchise_id TEXT, park TEXT, team_id_br TEXT, team_id TEXT, name TEXT, div_win TEXT, g NUMBER, so NUMBER, triple NUMBER, bba NUMBER, div_id TEXT, league_id TEXT, h NUMBER, lg_win TEXT, bb NUMBER, fp NUMBER, era NUMBER, sf NUMBER, ipouts NUMBER, soa NUMBER, ra NUMBER, ab NUMBER, sv NUMBER, wc_win TEXT, r NUMBER, cg NUMBER, year NUMBER, attendance NUMBER, hra NUMBER, team_id_retro TEXT); CREATE TABLE fielding_outfield (grf NUMBER, player_id TEXT, glf NUMBER, year NUMBER); CREATE TABLE postseason (team_id_loser TEXT, year NUMBER, team_id_winner TEXT, losses NUMBER, league_id_winner TEXT, league_id_loser TEXT, wins NUMBER, round TEXT); CREATE TABLE park (park_id TEXT, city TEXT); CREATE TABLE hall_of_fame (yearid NUMBER, player_id TEXT); CREATE TABLE all_star (team_id TEXT, game_num NUMBER, game_id TEXT, year NUMBER, player_id TEXT); CREATE TABLE pitching (l NUMBER, wp NUMBER, league_id TEXT, baopp NUMBER, sho NUMBER, bfp NUMBER, r NUMBER, w NUMBER, sf NUMBER, sv NUMBER, year NUMBER, so NUMBER, sh NUMBER, team_id TEXT, bk NUMBER); CREATE TABLE manager_award_vote (league_id TEXT, points_won NUMBER); CREATE TABLE team_half (team_id TEXT, half NUMBER, year NUMBER, div_win TEXT); CREATE TABLE home_game (year NUMBER, games NUMBER, league_id TEXT, park_id TEXT, team_id TEXT); CREATE TABLE appearances (year NUMBER, g_batting NUMBER, league_id TEXT, team_id TEXT, gs NUMBER); CREATE TABLE player (birth_city TEXT, player_id TEXT); CREATE TABLE college (city TEXT, college_id TEXT); CREATE TABLE team_franchise (franchise_name TEXT, franchise_id TEXT, na_assoc TEXT); CREATE TABLE player_college (player_id TEXT, college_id TEXT); CREATE TABLE batting (double NUMBER, sb NUMBER, sh NUMBER, cs NUMBER, rbi NUMBER, sf NUMBER, ibb NUMBER, ab NUMBER, h NUMBER, triple NUMBER, stint NUMBER, hr NUMBER, r NUMBER, league_id TEXT, g NUMBER, year NUMBER, team_id TEXT, hbp NUMBER, g_idp NUMBER, bb NUMBER, player_id TEXT, so NUMBER); CREATE TABLE fielding_postseason (pb NUMBER, round TEXT, league_id TEXT, inn_outs NUMBER, pos TEXT, dp NUMBER, cs NUMBER, sb NUMBER, player_id TEXT, e NUMBER, a NUMBER, po NUMBER, tp NUMBER, gs NUMBER, g NUMBER, team_id TEXT, year NUMBER); CREATE TABLE pitching_postseason (bk NUMBER, year NUMBER, r NUMBER, hr NUMBER, er NUMBER, g NUMBER, sv NUMBER, gs NUMBER, sho NUMBER, g_idp NUMBER, league_id TEXT, era NUMBER, ipouts NUMBER, sf NUMBER, h NUMBER, gf NUMBER, hbp NUMBER, player_id TEXT, baopp TEXT, bfp NUMBER, cg NUMBER, round TEXT, so NUMBER, team_id TEXT, bb NUMBER, sh NUMBER, w NUMBER, ibb NUMBER, l NUMBER, wp NUMBER); CREATE TABLE batting_postseason (rbi NUMBER, bb NUMBER, g_idp NUMBER, round TEXT, double NUMBER, hbp NUMBER, team_id TEXT, ibb NUMBER, g NUMBER, r NUMBER, sf NUMBER, player_id TEXT, cs NUMBER, hr NUMBER, ab NUMBER, h NUMBER, league_id TEXT, triple NUMBER, year NUMBER, sb NUMBER, so NUMBER, sh NUMBER); CREATE TABLE player_award_vote (points_won NUMBER, league_id TEXT, year NUMBER);"
      },
      {
        "question": "How about the number in 2009?",
        "query": "SELECT count(*) FROM postseason AS t1 JOIN team AS t2 ON t1.team_id_loser = t2.team_id_br WHERE t2.name = 'Boston Red Stockings' AND t1.year = 2009;",
        "schema": "CREATE TABLE player_college (player_id TEXT, college_id TEXT); CREATE TABLE fielding_postseason (team_id TEXT, g NUMBER, po NUMBER, inn_outs NUMBER, round TEXT, sb NUMBER, player_id TEXT, e NUMBER, tp NUMBER, year NUMBER, pb NUMBER, league_id TEXT, gs NUMBER, a NUMBER, cs NUMBER, dp NUMBER, pos TEXT); CREATE TABLE hall_of_fame (player_id TEXT, yearid NUMBER); CREATE TABLE college (city TEXT, college_id TEXT); CREATE TABLE appearances (gs NUMBER, g_batting NUMBER, year NUMBER, team_id TEXT, league_id TEXT); CREATE TABLE pitching (team_id TEXT, baopp NUMBER, bfp NUMBER, sh NUMBER, league_id TEXT, bk NUMBER, wp NUMBER, w NUMBER, sf NUMBER, sho NUMBER, sv NUMBER, year NUMBER, l NUMBER, so NUMBER, r NUMBER); CREATE TABLE all_star (player_id TEXT, year NUMBER, game_id TEXT, game_num NUMBER, team_id TEXT); CREATE TABLE manager_award_vote (league_id TEXT, points_won NUMBER); CREATE TABLE player_award_vote (year NUMBER, points_won NUMBER, league_id TEXT); CREATE TABLE fielding_outfield (glf NUMBER, grf NUMBER, player_id TEXT, year NUMBER); CREATE TABLE home_game (games NUMBER, team_id TEXT, park_id TEXT, league_id TEXT, year NUMBER); CREATE TABLE team_franchise (franchise_name TEXT, na_assoc TEXT, franchise_id TEXT); CREATE TABLE batting_postseason (player_id TEXT, double NUMBER, ibb NUMBER, cs NUMBER, h NUMBER, year NUMBER, hr NUMBER, sh NUMBER, hbp NUMBER, triple NUMBER, ab NUMBER, so NUMBER, sf NUMBER, bb NUMBER, round TEXT, rbi NUMBER, g NUMBER, g_idp NUMBER, sb NUMBER, r NUMBER, team_id TEXT, league_id TEXT); CREATE TABLE postseason (wins NUMBER, year NUMBER, losses NUMBER, team_id_loser TEXT, team_id_winner TEXT, round TEXT, league_id_loser TEXT, league_id_winner TEXT); CREATE TABLE team (soa NUMBER, team_id_retro TEXT, team_id_lahman45 TEXT, ws_win TEXT, triple NUMBER, l NUMBER, double NUMBER, cg NUMBER, ipouts NUMBER, attendance NUMBER, hbp NUMBER, team_id TEXT, ghome NUMBER, w NUMBER, hra NUMBER, rank NUMBER, bba NUMBER, league_id TEXT, div_id TEXT, lg_win TEXT, sb NUMBER, ra NUMBER, sf NUMBER, park TEXT, year NUMBER, dp NUMBER, sv NUMBER, r NUMBER, ppf NUMBER, div_win TEXT, cs NUMBER, wc_win TEXT, bb NUMBER, team_id_br TEXT, franchise_id TEXT, er NUMBER, ha NUMBER, hr NUMBER, bpf NUMBER, ab NUMBER, sho NUMBER, era NUMBER, h NUMBER, so NUMBER, e NUMBER, fp NUMBER, name TEXT, g NUMBER); CREATE TABLE fielding (zr NUMBER, stint NUMBER, a NUMBER, po NUMBER, cs NUMBER, g NUMBER, wp NUMBER, league_id TEXT, dp NUMBER, team_id TEXT, e NUMBER, gs NUMBER, sb NUMBER, year NUMBER, pb NUMBER, inn_outs NUMBER, pos TEXT, player_id TEXT); CREATE TABLE batting (sf NUMBER, bb NUMBER, stint NUMBER, cs NUMBER, g_idp NUMBER, hbp NUMBER, ab NUMBER, player_id TEXT, h NUMBER, year NUMBER, hr NUMBER, r NUMBER, g NUMBER, rbi NUMBER, sb NUMBER, team_id TEXT, league_id TEXT, ibb NUMBER, double NUMBER, sh NUMBER, so NUMBER, triple NUMBER); CREATE TABLE pitching_postseason (gs NUMBER, hr NUMBER, cg NUMBER, sf NUMBER, w NUMBER, league_id TEXT, era NUMBER, l NUMBER, er NUMBER, g NUMBER, ibb NUMBER, baopp TEXT, r NUMBER, hbp NUMBER, round TEXT, sv NUMBER, bb NUMBER, h NUMBER, sh NUMBER, player_id TEXT, year NUMBER, g_idp NUMBER, sho NUMBER, wp NUMBER, team_id TEXT, gf NUMBER, bk NUMBER, ipouts NUMBER, so NUMBER, bfp NUMBER); CREATE TABLE player (player_id TEXT, birth_city TEXT); CREATE TABLE park (city TEXT, park_id TEXT); CREATE TABLE team_half (div_win TEXT, team_id TEXT, year NUMBER, half NUMBER);"
      }
    ],
    [
      {
        "question": "Which teams have had victories?",
        "query": "SELECT t2.name , t1.team_id_winner FROM postseason AS t1 JOIN team AS t2 ON t1.team_id_winner = t2.team_id_br GROUP BY t1.team_id_winner",
        "schema": "CREATE TABLE fielding (team_id TEXT); CREATE TABLE player (player_id TEXT); CREATE TABLE team_franchise (franchise_id TEXT, franchise_name TEXT); CREATE TABLE manager_half (team_id TEXT); CREATE TABLE manager (team_id TEXT); CREATE TABLE batting_postseason (team_id TEXT); CREATE TABLE appearances (team_id TEXT); CREATE TABLE fielding_postseason (team_id TEXT, player_id TEXT); CREATE TABLE home_game (team_id TEXT); CREATE TABLE team_half (half NUMBER, team_id TEXT, g NUMBER, div_win TEXT, l NUMBER, rank NUMBER, w NUMBER, div_id TEXT); CREATE TABLE team (hr NUMBER, hbp NUMBER, wc_win TEXT, team_id_br TEXT, sb NUMBER, era NUMBER, dp NUMBER, sho NUMBER, team_id_lahman45 TEXT, attendance NUMBER, cs NUMBER, franchise_id TEXT, er NUMBER, ab NUMBER, div_id TEXT, ra NUMBER, ppf NUMBER, lg_win TEXT, ghome NUMBER, l NUMBER, ipouts NUMBER, bpf NUMBER, league_id TEXT, hra NUMBER, ws_win TEXT, park TEXT, team_id TEXT, bba NUMBER, fp NUMBER, soa NUMBER, year NUMBER, team_id_retro TEXT, sf NUMBER, double NUMBER, g NUMBER, rank NUMBER, e NUMBER, sv NUMBER, name TEXT, w NUMBER, div_win TEXT, ha NUMBER, r NUMBER, triple NUMBER, cg NUMBER, so NUMBER, bb NUMBER, h NUMBER); CREATE TABLE all_star (game_num NUMBER, team_id TEXT, player_id TEXT); CREATE TABLE postseason (team_id_loser TEXT, team_id_winner TEXT, wins NUMBER);"
      },
      {
        "question": "How about in 2008 postseason?",
        "query": "SELECT t2.name , t1.team_id_winner FROM postseason AS t1 JOIN team AS t2 ON t1.team_id_winner = t2.team_id_br WHERE t1.year = 2008 GROUP BY t1.team_id_winner",
        "schema": "CREATE TABLE home_game (team_id TEXT); CREATE TABLE manager (team_id TEXT); CREATE TABLE batting_postseason (year NUMBER, team_id TEXT); CREATE TABLE fielding_postseason (team_id TEXT, year NUMBER, player_id TEXT); CREATE TABLE team_franchise (franchise_id TEXT, franchise_name TEXT); CREATE TABLE fielding (team_id TEXT); CREATE TABLE manager_half (team_id TEXT); CREATE TABLE player (player_id TEXT); CREATE TABLE team (triple NUMBER, so NUMBER, league_id TEXT, dp NUMBER, attendance NUMBER, e NUMBER, team_id_br TEXT, fp NUMBER, w NUMBER, cg NUMBER, bba NUMBER, div_id TEXT, er NUMBER, team_id TEXT, ha NUMBER, sv NUMBER, g NUMBER, sb NUMBER, r NUMBER, team_id_retro TEXT, hra NUMBER, bpf NUMBER, name TEXT, ppf NUMBER, bb NUMBER, ipouts NUMBER, sf NUMBER, ra NUMBER, double NUMBER, rank NUMBER, div_win TEXT, hbp NUMBER, year NUMBER, franchise_id TEXT, soa NUMBER, l NUMBER, era NUMBER, lg_win TEXT, wc_win TEXT, h NUMBER, ws_win TEXT, ghome NUMBER, cs NUMBER, team_id_lahman45 TEXT, sho NUMBER, ab NUMBER, hr NUMBER, park TEXT); CREATE TABLE pitching_postseason (team_id TEXT, year NUMBER); CREATE TABLE team_half (div_id TEXT, w NUMBER, div_win TEXT, l NUMBER, rank NUMBER, team_id TEXT, half NUMBER, year NUMBER, g NUMBER); CREATE TABLE appearances (team_id TEXT); CREATE TABLE all_star (game_num NUMBER, player_id TEXT, team_id TEXT); CREATE TABLE postseason (team_id_winner TEXT, league_id_winner TEXT, team_id_loser TEXT, round TEXT, wins NUMBER, year NUMBER);"
      },
      {
        "question": "Among the results, which team has had the fewest victories?",
        "query": "SELECT t2.name , t1.team_id_winner FROM postseason AS t1 JOIN team AS t2 ON t1.team_id_winner = t2.team_id_br WHERE t1.year = 2008 GROUP BY t1.team_id_winner ORDER BY count(*) ASC LIMIT 1;",
        "schema": "CREATE TABLE team (bpf NUMBER, ra NUMBER, div_win TEXT, year NUMBER, triple NUMBER, ipouts NUMBER, team_id TEXT, wc_win TEXT, l NUMBER, cg NUMBER, so NUMBER, div_id TEXT, soa NUMBER, sb NUMBER, ghome NUMBER, league_id TEXT, lg_win TEXT, sv NUMBER, sho NUMBER, ppf NUMBER, e NUMBER, hbp NUMBER, name TEXT, team_id_lahman45 TEXT, park TEXT, rank NUMBER, bba NUMBER, w NUMBER, double NUMBER, cs NUMBER, fp NUMBER, ha NUMBER, bb NUMBER, er NUMBER, team_id_br TEXT, dp NUMBER, team_id_retro TEXT, ws_win TEXT, r NUMBER, hra NUMBER, h NUMBER, hr NUMBER, sf NUMBER, franchise_id TEXT, era NUMBER, g NUMBER, ab NUMBER, attendance NUMBER); CREATE TABLE batting_postseason (team_id TEXT, year NUMBER); CREATE TABLE manager_half (team_id TEXT); CREATE TABLE fielding_postseason (team_id TEXT, player_id TEXT, year NUMBER); CREATE TABLE pitching_postseason (year NUMBER, team_id TEXT); CREATE TABLE home_game (team_id TEXT); CREATE TABLE all_star (team_id TEXT, player_id TEXT, game_num NUMBER); CREATE TABLE appearances (team_id TEXT); CREATE TABLE postseason (team_id_loser TEXT, round TEXT, team_id_winner TEXT, year NUMBER, wins NUMBER, league_id_winner TEXT); CREATE TABLE player (player_id TEXT); CREATE TABLE manager (team_id TEXT); CREATE TABLE team_half (year NUMBER, half NUMBER, rank NUMBER, g NUMBER, w NUMBER, div_win TEXT, team_id TEXT, l NUMBER, div_id TEXT); CREATE TABLE team_franchise (franchise_name TEXT, franchise_id TEXT); CREATE TABLE fielding (team_id TEXT);"
      },
      {
        "question": "How about the team with the most victories?",
        "query": "SELECT t2.name , t1.team_id_winner FROM postseason AS t1 JOIN team AS t2 ON t1.team_id_winner = t2.team_id_br WHERE t1.year = 2008 GROUP BY t1.team_id_winner ORDER BY count(*) DESC LIMIT 1;",
        "schema": "CREATE TABLE pitching_postseason (year NUMBER, team_id TEXT); CREATE TABLE fielding (team_id TEXT); CREATE TABLE team_franchise (franchise_name TEXT, franchise_id TEXT); CREATE TABLE player (player_id TEXT); CREATE TABLE appearances (team_id TEXT); CREATE TABLE postseason (league_id_winner TEXT, round TEXT, team_id_winner TEXT, year NUMBER, wins NUMBER, team_id_loser TEXT); CREATE TABLE team_half (g NUMBER, div_id TEXT, rank NUMBER, team_id TEXT, div_win TEXT, year NUMBER, half NUMBER, w NUMBER, l NUMBER); CREATE TABLE manager (team_id TEXT); CREATE TABLE fielding_postseason (team_id TEXT, player_id TEXT, year NUMBER); CREATE TABLE batting_postseason (team_id TEXT, year NUMBER); CREATE TABLE team (so NUMBER, hra NUMBER, rank NUMBER, team_id TEXT, fp NUMBER, l NUMBER, hbp NUMBER, year NUMBER, div_win TEXT, lg_win TEXT, hr NUMBER, ha NUMBER, era NUMBER, dp NUMBER, ipouts NUMBER, double NUMBER, div_id TEXT, sho NUMBER, bb NUMBER, cg NUMBER, ra NUMBER, attendance NUMBER, triple NUMBER, ab NUMBER, sf NUMBER, wc_win TEXT, r NUMBER, soa NUMBER, name TEXT, w NUMBER, team_id_retro TEXT, team_id_lahman45 TEXT, league_id TEXT, park TEXT, g NUMBER, ghome NUMBER, ws_win TEXT, sb NUMBER, cs NUMBER, h NUMBER, er NUMBER, franchise_id TEXT, sv NUMBER, team_id_br TEXT, bba NUMBER, bpf NUMBER, e NUMBER, ppf NUMBER); CREATE TABLE home_game (team_id TEXT); CREATE TABLE all_star (player_id TEXT, team_id TEXT, game_num NUMBER); CREATE TABLE manager_half (team_id TEXT);"
      }
    ],
    [
      {
        "question": "How many wins does the team Boston Red Stockings have?",
        "query": "SELECT count(*) FROM postseason AS t1 JOIN team AS t2 ON t1.team_id_winner = t2.team_id_br WHERE t2.name = 'Boston Red Stockings'",
        "schema": "CREATE TABLE all_star (player_id TEXT, league_id TEXT, game_num NUMBER, team_id TEXT, game_id TEXT); CREATE TABLE manager_award_vote (points_won NUMBER); CREATE TABLE postseason (league_id_winner TEXT, wins NUMBER, team_id_winner TEXT, losses NUMBER, league_id_loser TEXT, team_id_loser TEXT); CREATE TABLE fielding (wp NUMBER, team_id TEXT, league_id TEXT, cs NUMBER); CREATE TABLE pitching_postseason (ibb NUMBER, round TEXT, sho NUMBER, wp NUMBER, gf NUMBER, team_id TEXT, league_id TEXT, baopp TEXT, h NUMBER, era NUMBER, year NUMBER, l NUMBER, so NUMBER, bfp NUMBER, g_idp NUMBER, player_id TEXT, r NUMBER, bb NUMBER, er NUMBER, sf NUMBER, gs NUMBER, sh NUMBER, hr NUMBER, sv NUMBER, bk NUMBER, cg NUMBER, hbp NUMBER, w NUMBER, g NUMBER); CREATE TABLE home_game (park_id TEXT, team_id TEXT); CREATE TABLE team_half (rank NUMBER, div_win TEXT, div_id TEXT, team_id TEXT, half NUMBER); CREATE TABLE player (player_id TEXT); CREATE TABLE player_award_vote (player_id TEXT, points_won NUMBER, league_id TEXT); CREATE TABLE appearances (team_id TEXT); CREATE TABLE batting_postseason (player_id TEXT, so NUMBER, league_id TEXT, team_id TEXT, g NUMBER, bb NUMBER, sf NUMBER, sh NUMBER, sb NUMBER, cs NUMBER, g_idp NUMBER); CREATE TABLE team_franchise (na_assoc TEXT, franchise_id TEXT, franchise_name TEXT); CREATE TABLE team (team_id_br TEXT, cg NUMBER, ha NUMBER, sv NUMBER, park TEXT, soa NUMBER, ppf NUMBER, league_id TEXT, g NUMBER, bpf NUMBER, div_id TEXT, ra NUMBER, double NUMBER, e NUMBER, w NUMBER, sb NUMBER, dp NUMBER, cs NUMBER, ipouts NUMBER, team_id_lahman45 TEXT, hr NUMBER, r NUMBER, ghome NUMBER, l NUMBER, rank NUMBER, div_win TEXT, era NUMBER, fp NUMBER, bba NUMBER, name TEXT, attendance NUMBER, er NUMBER, team_id_retro TEXT, triple NUMBER, sho NUMBER, bb NUMBER, team_id TEXT, hra NUMBER, so NUMBER, lg_win TEXT, year NUMBER, ab NUMBER, sf NUMBER, wc_win TEXT, h NUMBER, franchise_id TEXT, ws_win TEXT, hbp NUMBER); CREATE TABLE batting (ab NUMBER, cs NUMBER, team_id TEXT, r NUMBER, hbp NUMBER, sf NUMBER, sb NUMBER, g NUMBER, g_idp NUMBER, sh NUMBER, league_id TEXT, player_id TEXT, ibb NUMBER, so NUMBER); CREATE TABLE college (city TEXT, college_id TEXT); CREATE TABLE player_award (player_id TEXT, league_id TEXT); CREATE TABLE park (city TEXT, park_name TEXT, park_id TEXT); CREATE TABLE fielding_postseason (player_id TEXT, pb NUMBER, tp NUMBER, cs NUMBER, league_id TEXT, po NUMBER, dp NUMBER, pos TEXT, sb NUMBER, gs NUMBER, team_id TEXT, g NUMBER, round TEXT, year NUMBER, e NUMBER, inn_outs NUMBER, a NUMBER); CREATE TABLE fielding_outfield (player_id TEXT, gcf NUMBER, glf NUMBER, grf NUMBER);"
      },
      {
        "question": "How many wins did the team Boston Red Stockings have in 2008?",
        "query": "SELECT count(*) , t1.year FROM postseason AS t1 JOIN team AS t2 ON t1.team_id_winner = t2.team_id_br WHERE t2.name = 'Boston Red Stockings' AND t1.year = 2008",
        "schema": "CREATE TABLE player_award_vote (league_id TEXT, player_id TEXT, points_won NUMBER); CREATE TABLE fielding_postseason (tp NUMBER, pb NUMBER, player_id TEXT, league_id TEXT, year NUMBER, cs NUMBER, round TEXT, inn_outs NUMBER, team_id TEXT, dp NUMBER, gs NUMBER, sb NUMBER, po NUMBER, e NUMBER, g NUMBER, a NUMBER, pos TEXT); CREATE TABLE fielding_outfield (glf NUMBER, grf NUMBER, gcf NUMBER, player_id TEXT); CREATE TABLE appearances (team_id TEXT); CREATE TABLE all_star (year NUMBER, player_id TEXT, game_id TEXT, league_id TEXT, team_id TEXT, game_num NUMBER); CREATE TABLE player (player_id TEXT); CREATE TABLE team_half (year NUMBER, div_win TEXT, team_id TEXT, half NUMBER, div_id TEXT, rank NUMBER); CREATE TABLE home_game (team_id TEXT, park_id TEXT, year NUMBER); CREATE TABLE team_franchise (franchise_name TEXT, franchise_id TEXT, na_assoc TEXT); CREATE TABLE college (city TEXT, college_id TEXT); CREATE TABLE pitching_postseason (so NUMBER, sh NUMBER, league_id TEXT, bfp NUMBER, sv NUMBER, g NUMBER, year NUMBER, l NUMBER, sho NUMBER, ibb NUMBER, g_idp NUMBER, wp NUMBER, gf NUMBER, r NUMBER, cg NUMBER, round TEXT, w NUMBER, era NUMBER, h NUMBER, baopp TEXT, hbp NUMBER, team_id TEXT, sf NUMBER, bb NUMBER, gs NUMBER, er NUMBER, bk NUMBER, player_id TEXT, hr NUMBER); CREATE TABLE fielding (wp NUMBER, league_id TEXT, team_id TEXT, cs NUMBER); CREATE TABLE park (park_name TEXT, park_id TEXT, city TEXT); CREATE TABLE batting (so NUMBER, sb NUMBER, ibb NUMBER, r NUMBER, sh NUMBER, team_id TEXT, g NUMBER, ab NUMBER, hbp NUMBER, g_idp NUMBER, sf NUMBER, league_id TEXT, cs NUMBER, year NUMBER, player_id TEXT); CREATE TABLE manager_award_vote (points_won NUMBER); CREATE TABLE batting_postseason (sf NUMBER, team_id TEXT, player_id TEXT, g NUMBER, sh NUMBER, cs NUMBER, sb NUMBER, year NUMBER, league_id TEXT, bb NUMBER, g_idp NUMBER, so NUMBER); CREATE TABLE player_award (player_id TEXT, league_id TEXT); CREATE TABLE postseason (team_id_loser TEXT, year NUMBER, team_id_winner TEXT, losses NUMBER, league_id_winner TEXT, wins NUMBER, league_id_loser TEXT); CREATE TABLE team (double NUMBER, sb NUMBER, sho NUMBER, ghome NUMBER, team_id_retro TEXT, lg_win TEXT, sv NUMBER, div_win TEXT, hra NUMBER, er NUMBER, so NUMBER, park TEXT, div_id TEXT, hr NUMBER, cs NUMBER, soa NUMBER, g NUMBER, bba NUMBER, ab NUMBER, w NUMBER, hbp NUMBER, h NUMBER, sf NUMBER, name TEXT, year NUMBER, l NUMBER, team_id_lahman45 TEXT, dp NUMBER, era NUMBER, ha NUMBER, ws_win TEXT, team_id TEXT, ppf NUMBER, league_id TEXT, bb NUMBER, fp NUMBER, cg NUMBER, attendance NUMBER, triple NUMBER, r NUMBER, rank NUMBER, franchise_id TEXT, ipouts NUMBER, e NUMBER, bpf NUMBER, wc_win TEXT, team_id_br TEXT, ra NUMBER);"
      },
      {
        "question": "How about the wins in each year?",
        "query": "SELECT count(*) , t1.year FROM postseason AS t1 JOIN team AS t2 ON t1.team_id_winner = t2.team_id_br WHERE t2.name = 'Boston Red Stockings' GROUP BY t1.year",
        "schema": "CREATE TABLE team_half (rank NUMBER, team_id TEXT, half NUMBER, year NUMBER, div_win TEXT, div_id TEXT); CREATE TABLE batting_postseason (league_id TEXT, so NUMBER, sh NUMBER, year NUMBER, sf NUMBER, g NUMBER, team_id TEXT, cs NUMBER, g_idp NUMBER, sb NUMBER, player_id TEXT, bb NUMBER); CREATE TABLE batting (so NUMBER, sh NUMBER, player_id TEXT, team_id TEXT, g NUMBER, year NUMBER, hbp NUMBER, r NUMBER, g_idp NUMBER, cs NUMBER, league_id TEXT, ibb NUMBER, ab NUMBER, sf NUMBER, sb NUMBER); CREATE TABLE pitching_postseason (l NUMBER, player_id TEXT, bb NUMBER, sho NUMBER, so NUMBER, cg NUMBER, bk NUMBER, g_idp NUMBER, era NUMBER, er NUMBER, year NUMBER, hbp NUMBER, sh NUMBER, sf NUMBER, gf NUMBER, league_id TEXT, sv NUMBER, baopp TEXT, gs NUMBER, w NUMBER, hr NUMBER, wp NUMBER, round TEXT, r NUMBER, ibb NUMBER, bfp NUMBER, team_id TEXT, g NUMBER, h NUMBER); CREATE TABLE appearances (year NUMBER, team_id TEXT); CREATE TABLE player_award_vote (player_id TEXT, points_won NUMBER, league_id TEXT); CREATE TABLE fielding (wp NUMBER, cs NUMBER, team_id TEXT, league_id TEXT); CREATE TABLE team (div_win TEXT, cg NUMBER, franchise_id TEXT, wc_win TEXT, w NUMBER, g NUMBER, ra NUMBER, hbp NUMBER, div_id TEXT, e NUMBER, sb NUMBER, r NUMBER, ipouts NUMBER, year NUMBER, double NUMBER, name TEXT, ws_win TEXT, triple NUMBER, cs NUMBER, team_id_retro TEXT, dp NUMBER, er NUMBER, park TEXT, l NUMBER, league_id TEXT, soa NUMBER, sv NUMBER, sf NUMBER, bba NUMBER, team_id_lahman45 TEXT, bb NUMBER, so NUMBER, lg_win TEXT, era NUMBER, team_id TEXT, ghome NUMBER, attendance NUMBER, h NUMBER, hr NUMBER, hra NUMBER, fp NUMBER, sho NUMBER, ppf NUMBER, team_id_br TEXT, bpf NUMBER, ab NUMBER, ha NUMBER, rank NUMBER); CREATE TABLE college (college_id TEXT, city TEXT); CREATE TABLE player (player_id TEXT); CREATE TABLE postseason (wins NUMBER, year NUMBER, team_id_winner TEXT, league_id_loser TEXT, league_id_winner TEXT, team_id_loser TEXT, losses NUMBER); CREATE TABLE all_star (league_id TEXT, game_num NUMBER, player_id TEXT, game_id TEXT, team_id TEXT, year NUMBER); CREATE TABLE park (park_name TEXT, park_id TEXT, city TEXT); CREATE TABLE manager_award_vote (points_won NUMBER); CREATE TABLE fielding_postseason (sb NUMBER, pos TEXT, year NUMBER, league_id TEXT, round TEXT, e NUMBER, cs NUMBER, player_id TEXT, team_id TEXT, pb NUMBER, dp NUMBER, a NUMBER, inn_outs NUMBER, g NUMBER, gs NUMBER, tp NUMBER, po NUMBER); CREATE TABLE home_game (park_id TEXT, team_id TEXT, year NUMBER); CREATE TABLE team_franchise (franchise_name TEXT, na_assoc TEXT, franchise_id TEXT); CREATE TABLE fielding_outfield (grf NUMBER, player_id TEXT, glf NUMBER, gcf NUMBER); CREATE TABLE player_award (league_id TEXT, player_id TEXT);"
      }
    ],
    [
      {
        "question": "How many games were there in 1885?",
        "query": "SELECT count(*) FROM postseason WHERE YEAR = 1885",
        "schema": "CREATE TABLE manager (year NUMBER); CREATE TABLE hall_of_fame (yearid NUMBER); CREATE TABLE fielding_outfield (year NUMBER, player_id TEXT); CREATE TABLE fielding (year NUMBER); CREATE TABLE team_franchise (na_assoc TEXT); CREATE TABLE home_game (team_id TEXT, games NUMBER, year NUMBER); CREATE TABLE player_award (year NUMBER); CREATE TABLE batting (sb NUMBER, team_id TEXT, player_id TEXT, sf NUMBER, so NUMBER, year NUMBER, g_idp NUMBER); CREATE TABLE player (player_id TEXT); CREATE TABLE team (ipouts NUMBER, ra NUMBER, ha NUMBER, year NUMBER, g NUMBER, e NUMBER, ppf NUMBER, ab NUMBER, hr NUMBER, cs NUMBER, era NUMBER, bba NUMBER, name TEXT, team_id_br TEXT, team_id_retro TEXT, league_id TEXT, sf NUMBER, dp NUMBER, sv NUMBER, soa NUMBER, rank NUMBER, div_id TEXT, double NUMBER, bb NUMBER, franchise_id TEXT, fp NUMBER, r NUMBER, sb NUMBER, sho NUMBER, cg NUMBER, so NUMBER, team_id TEXT, ghome NUMBER); CREATE TABLE player_college (player_id TEXT, year NUMBER); CREATE TABLE fielding_postseason (player_id TEXT, year NUMBER); CREATE TABLE player_award_vote (year NUMBER); CREATE TABLE pitching (year NUMBER); CREATE TABLE manager_award (year NUMBER); CREATE TABLE pitching_postseason (sf NUMBER, ipouts NUMBER, year NUMBER); CREATE TABLE batting_postseason (year NUMBER, team_id TEXT, player_id TEXT); CREATE TABLE team_half (year NUMBER); CREATE TABLE all_star (game_id TEXT, year NUMBER); CREATE TABLE postseason (ties NUMBER, year NUMBER); CREATE TABLE appearances (year NUMBER);"
      },
      {
        "question": "How about in 1900?",
        "query": "SELECT count(*) FROM postseason WHERE YEAR = 1900",
        "schema": "CREATE TABLE player_college (year NUMBER, player_id TEXT); CREATE TABLE batting (g_idp NUMBER, sb NUMBER, year NUMBER, player_id TEXT, sf NUMBER, team_id TEXT, so NUMBER); CREATE TABLE team (league_id TEXT, e NUMBER, team_id_retro TEXT, g NUMBER, team_id TEXT, r NUMBER, sv NUMBER, team_id_br TEXT, era NUMBER, ipouts NUMBER, div_id TEXT, year NUMBER, ha NUMBER, ra NUMBER, double NUMBER, sho NUMBER, hr NUMBER, ghome NUMBER, rank NUMBER, ab NUMBER, soa NUMBER, fp NUMBER, franchise_id TEXT, dp NUMBER, bba NUMBER, name TEXT, bb NUMBER, sb NUMBER, cg NUMBER, so NUMBER, sf NUMBER, cs NUMBER, ppf NUMBER); CREATE TABLE fielding (year NUMBER); CREATE TABLE team_half (year NUMBER); CREATE TABLE player_award_vote (year NUMBER); CREATE TABLE hall_of_fame (yearid NUMBER); CREATE TABLE manager_award (year NUMBER); CREATE TABLE fielding_outfield (player_id TEXT, year NUMBER); CREATE TABLE manager (year NUMBER); CREATE TABLE player (player_id TEXT); CREATE TABLE appearances (year NUMBER); CREATE TABLE postseason (year NUMBER, round TEXT, ties NUMBER); CREATE TABLE all_star (year NUMBER, game_num NUMBER, game_id TEXT); CREATE TABLE player_award (year NUMBER); CREATE TABLE pitching_postseason (sho NUMBER, hbp NUMBER, player_id TEXT, era NUMBER, sv NUMBER, sf NUMBER, r NUMBER, w NUMBER, bk NUMBER, hr NUMBER, g NUMBER, sh NUMBER, baopp TEXT, cg NUMBER, g_idp NUMBER, gf NUMBER, er NUMBER, h NUMBER, gs NUMBER, team_id TEXT, league_id TEXT, bb NUMBER, bfp NUMBER, wp NUMBER, ipouts NUMBER, ibb NUMBER, l NUMBER, year NUMBER, so NUMBER, round TEXT); CREATE TABLE home_game (team_id TEXT, games NUMBER, year NUMBER); CREATE TABLE batting_postseason (team_id TEXT, year NUMBER, player_id TEXT); CREATE TABLE fielding_postseason (g NUMBER, cs NUMBER, team_id TEXT, sb NUMBER, round TEXT, gs NUMBER, year NUMBER, dp NUMBER, player_id TEXT, po NUMBER, tp NUMBER, pos TEXT, pb NUMBER, league_id TEXT, inn_outs NUMBER, e NUMBER, a NUMBER); CREATE TABLE team_franchise (franchise_name TEXT, na_assoc TEXT); CREATE TABLE pitching (year NUMBER);"
      },
      {
        "question": "How many games resulted in ties?",
        "query": "SELECT count(*) FROM postseason WHERE ties = 1;",
        "schema": "CREATE TABLE fielding_postseason (dp NUMBER, a NUMBER, year NUMBER, team_id TEXT, cs NUMBER, pb NUMBER, g NUMBER, player_id TEXT, gs NUMBER, pos TEXT, sb NUMBER, e NUMBER, po NUMBER, league_id TEXT, round TEXT, inn_outs NUMBER, tp NUMBER); CREATE TABLE player (player_id TEXT); CREATE TABLE home_game (games NUMBER, year NUMBER, team_id TEXT); CREATE TABLE manager_award (year NUMBER); CREATE TABLE all_star (game_num NUMBER, year NUMBER, game_id TEXT); CREATE TABLE pitching_postseason (gf NUMBER, hbp NUMBER, g NUMBER, ipouts NUMBER, er NUMBER, era NUMBER, bfp NUMBER, hr NUMBER, cg NUMBER, sh NUMBER, team_id TEXT, sho NUMBER, w NUMBER, baopp TEXT, r NUMBER, h NUMBER, ibb NUMBER, bk NUMBER, bb NUMBER, wp NUMBER, so NUMBER, sv NUMBER, l NUMBER, player_id TEXT, gs NUMBER, year NUMBER, g_idp NUMBER, sf NUMBER, league_id TEXT, round TEXT); CREATE TABLE appearances (year NUMBER); CREATE TABLE fielding (year NUMBER); CREATE TABLE manager (year NUMBER); CREATE TABLE hall_of_fame (yearid NUMBER); CREATE TABLE postseason (losses NUMBER, round TEXT, year NUMBER, wins NUMBER, ties NUMBER); CREATE TABLE fielding_outfield (player_id TEXT, year NUMBER); CREATE TABLE player_college (year NUMBER, player_id TEXT); CREATE TABLE batting (sb NUMBER, year NUMBER, player_id TEXT, g_idp NUMBER, team_id TEXT, so NUMBER, sf NUMBER); CREATE TABLE batting_postseason (year NUMBER, player_id TEXT, team_id TEXT); CREATE TABLE team (bb NUMBER, ra NUMBER, era NUMBER, name TEXT, double NUMBER, sv NUMBER, g NUMBER, ha NUMBER, div_id TEXT, team_id_br TEXT, team_id_retro TEXT, fp NUMBER, bba NUMBER, league_id TEXT, ab NUMBER, so NUMBER, dp NUMBER, ipouts NUMBER, year NUMBER, team_id TEXT, sho NUMBER, soa NUMBER, franchise_id TEXT, cg NUMBER, e NUMBER, ghome NUMBER, sb NUMBER, hr NUMBER, cs NUMBER, rank NUMBER, r NUMBER, sf NUMBER, ppf NUMBER); CREATE TABLE team_franchise (franchise_name TEXT, na_assoc TEXT); CREATE TABLE player_award_vote (year NUMBER); CREATE TABLE pitching (year NUMBER); CREATE TABLE player_award (year NUMBER); CREATE TABLE team_half (year NUMBER);"
      },
      {
        "question": "How about the number in 1885?",
        "query": "SELECT count(*) FROM postseason WHERE YEAR = 1885 AND ties = 1;",
        "schema": "CREATE TABLE postseason (round TEXT, ties NUMBER, losses NUMBER, year NUMBER, wins NUMBER); CREATE TABLE batting (sf NUMBER, so NUMBER, year NUMBER, g_idp NUMBER, sb NUMBER, team_id TEXT, player_id TEXT); CREATE TABLE manager_award (year NUMBER); CREATE TABLE team_half (year NUMBER); CREATE TABLE batting_postseason (year NUMBER, player_id TEXT, team_id TEXT); CREATE TABLE fielding_outfield (player_id TEXT, year NUMBER); CREATE TABLE player_college (year NUMBER, player_id TEXT); CREATE TABLE player (player_id TEXT); CREATE TABLE all_star (game_num NUMBER, year NUMBER, game_id TEXT); CREATE TABLE pitching (year NUMBER); CREATE TABLE appearances (year NUMBER); CREATE TABLE team (sho NUMBER, dp NUMBER, bb NUMBER, franchise_id TEXT, sf NUMBER, ha NUMBER, rank NUMBER, soa NUMBER, team_id_br TEXT, div_id TEXT, ghome NUMBER, sb NUMBER, league_id TEXT, ra NUMBER, sv NUMBER, ppf NUMBER, double NUMBER, team_id TEXT, bba NUMBER, ab NUMBER, fp NUMBER, cs NUMBER, so NUMBER, e NUMBER, era NUMBER, name TEXT, year NUMBER, g NUMBER, team_id_retro TEXT, r NUMBER, hr NUMBER, ipouts NUMBER, cg NUMBER); CREATE TABLE team_franchise (na_assoc TEXT, franchise_name TEXT); CREATE TABLE fielding (year NUMBER); CREATE TABLE pitching_postseason (g NUMBER, round TEXT, bk NUMBER, h NUMBER, gs NUMBER, gf NUMBER, player_id TEXT, year NUMBER, sh NUMBER, ibb NUMBER, er NUMBER, era NUMBER, so NUMBER, sf NUMBER, hr NUMBER, team_id TEXT, league_id TEXT, sho NUMBER, w NUMBER, bfp NUMBER, r NUMBER, cg NUMBER, wp NUMBER, baopp TEXT, bb NUMBER, sv NUMBER, l NUMBER, g_idp NUMBER, hbp NUMBER, ipouts NUMBER); CREATE TABLE hall_of_fame (yearid NUMBER); CREATE TABLE home_game (year NUMBER, team_id TEXT, games NUMBER); CREATE TABLE player_award (year NUMBER); CREATE TABLE manager (year NUMBER); CREATE TABLE fielding_postseason (pb NUMBER, year NUMBER, pos TEXT, gs NUMBER, e NUMBER, a NUMBER, dp NUMBER, cs NUMBER, tp NUMBER, round TEXT, player_id TEXT, sb NUMBER, team_id TEXT, po NUMBER, league_id TEXT, inn_outs NUMBER, g NUMBER); CREATE TABLE player_award_vote (year NUMBER);"
      }
    ],
    [
      {
        "question": "What is the average salary paid by team Boston Red Stockings?",
        "query": "SELECT avg(t1.salary) FROM salary AS t1 JOIN team AS t2 ON t1.team_id = t2.team_id_br WHERE t2.name = 'Boston Red Stockings'",
        "schema": "CREATE TABLE fielding_postseason (player_id TEXT, e NUMBER); CREATE TABLE manager (team_id TEXT); CREATE TABLE college (city TEXT); CREATE TABLE park (park_alias TEXT, city TEXT, park_name TEXT); CREATE TABLE all_star (team_id TEXT, player_id TEXT); CREATE TABLE team_half (year NUMBER); CREATE TABLE team_franchise (franchise_name TEXT, na_assoc TEXT, franchise_id TEXT); CREATE TABLE fielding (a NUMBER, cs NUMBER, team_id TEXT, e NUMBER, player_id TEXT, league_id TEXT); CREATE TABLE batting (team_id TEXT); CREATE TABLE team (team_id TEXT, name TEXT, h NUMBER, hr NUMBER, ppf NUMBER, team_id_br TEXT, er NUMBER, fp NUMBER, bb NUMBER, div_id TEXT, dp NUMBER, ws_win TEXT, soa NUMBER, ipouts NUMBER, ha NUMBER, hbp NUMBER, hra NUMBER, ab NUMBER, cg NUMBER, l NUMBER, e NUMBER, team_id_retro TEXT, sv NUMBER, league_id TEXT, ra NUMBER, bpf NUMBER, ghome NUMBER, cs NUMBER, lg_win TEXT, div_win TEXT, park TEXT, era NUMBER, sho NUMBER, g NUMBER, attendance NUMBER, sf NUMBER, franchise_id TEXT, double NUMBER, rank NUMBER, team_id_lahman45 TEXT, sb NUMBER, r NUMBER, triple NUMBER, so NUMBER, bba NUMBER, year NUMBER, w NUMBER); CREATE TABLE salary (year NUMBER, salary NUMBER, player_id TEXT, league_id TEXT, team_id TEXT); CREATE TABLE player (player_id TEXT);"
      },
      {
        "question": "How about the average salary paid in 2010?",
        "query": "SELECT avg(t1.salary) FROM salary AS t1 JOIN team AS t2 ON t1.team_id = t2.team_id_br WHERE t2.name = 'Boston Red Stockings' AND t1.year = 2010",
        "schema": "CREATE TABLE player (player_id TEXT); CREATE TABLE all_star (player_id TEXT, team_id TEXT); CREATE TABLE team_franchise (na_assoc TEXT, franchise_id TEXT, franchise_name TEXT); CREATE TABLE manager (team_id TEXT); CREATE TABLE park (park_name TEXT, park_alias TEXT, city TEXT); CREATE TABLE college (city TEXT); CREATE TABLE postseason (year NUMBER); CREATE TABLE team (ipouts NUMBER, team_id_lahman45 TEXT, g NUMBER, hra NUMBER, r NUMBER, soa NUMBER, lg_win TEXT, bb NUMBER, attendance NUMBER, hr NUMBER, franchise_id TEXT, ha NUMBER, name TEXT, fp NUMBER, bba NUMBER, hbp NUMBER, double NUMBER, year NUMBER, er NUMBER, div_id TEXT, dp NUMBER, ghome NUMBER, wc_win TEXT, ra NUMBER, team_id TEXT, league_id TEXT, so NUMBER, park TEXT, h NUMBER, team_id_retro TEXT, e NUMBER, sv NUMBER, ab NUMBER, team_id_br TEXT, cg NUMBER, sho NUMBER, era NUMBER, ws_win TEXT, l NUMBER, bpf NUMBER, w NUMBER, triple NUMBER, sf NUMBER, div_win TEXT, cs NUMBER, ppf NUMBER, rank NUMBER, sb NUMBER); CREATE TABLE batting (team_id TEXT); CREATE TABLE team_half (year NUMBER); CREATE TABLE fielding (team_id TEXT, league_id TEXT, cs NUMBER, a NUMBER, player_id TEXT, e NUMBER); CREATE TABLE fielding_postseason (player_id TEXT, e NUMBER); CREATE TABLE salary (year NUMBER, player_id TEXT, league_id TEXT, team_id TEXT, salary NUMBER);"
      },
      {
        "question": "What is the total salary in this year?",
        "query": "SELECT sum(t1.salary) FROM salary AS t1 JOIN team AS t2 ON t1.team_id = t2.team_id_br WHERE t2.name = 'Boston Red Stockings' AND t1.year = 2010",
        "schema": "CREATE TABLE all_star (team_id TEXT, year NUMBER, player_id TEXT); CREATE TABLE fielding_postseason (player_id TEXT, e NUMBER); CREATE TABLE team_franchise (franchise_id TEXT, franchise_name TEXT, na_assoc TEXT); CREATE TABLE salary (salary NUMBER, team_id TEXT, player_id TEXT, year NUMBER, league_id TEXT); CREATE TABLE college (city TEXT); CREATE TABLE manager (team_id TEXT); CREATE TABLE team_half (year NUMBER); CREATE TABLE park (park_alias TEXT, park_name TEXT, city TEXT); CREATE TABLE team (team_id TEXT, bb NUMBER, ws_win TEXT, dp NUMBER, bpf NUMBER, l NUMBER, ha NUMBER, team_id_lahman45 TEXT, sf NUMBER, rank NUMBER, attendance NUMBER, year NUMBER, er NUMBER, era NUMBER, ppf NUMBER, div_win TEXT, cg NUMBER, r NUMBER, so NUMBER, bba NUMBER, league_id TEXT, div_id TEXT, ab NUMBER, cs NUMBER, franchise_id TEXT, e NUMBER, fp NUMBER, name TEXT, hbp NUMBER, triple NUMBER, park TEXT, hr NUMBER, sb NUMBER, ghome NUMBER, sv NUMBER, ipouts NUMBER, w NUMBER, sho NUMBER, team_id_br TEXT, ra NUMBER, double NUMBER, g NUMBER, lg_win TEXT, team_id_retro TEXT, hra NUMBER, h NUMBER, soa NUMBER, wc_win TEXT); CREATE TABLE batting (team_id TEXT); CREATE TABLE player (player_id TEXT); CREATE TABLE postseason (year NUMBER); CREATE TABLE fielding (e NUMBER, a NUMBER, player_id TEXT, cs NUMBER, league_id TEXT, team_id TEXT);"
      }
    ],
    [
      {
        "question": "Show the player ids of the players in the team Boston Red Stockings in 2001.",
        "query": "SELECT player_id FROM salary AS t1 JOIN team AS t2 ON t1.team_id = t2.team_id_br WHERE t2.name = 'Boston Red Stockings' AND t1.year = 2001 GROUP BY player_id",
        "schema": "CREATE TABLE manager_half (team_id TEXT, player_id TEXT); CREATE TABLE fielding (team_id TEXT, wp NUMBER, player_id TEXT, dp NUMBER, gs NUMBER, cs NUMBER, year NUMBER, pb NUMBER, league_id TEXT, inn_outs NUMBER, po NUMBER, e NUMBER, g NUMBER, pos TEXT, a NUMBER, zr NUMBER, sb NUMBER); CREATE TABLE team_half (div_id TEXT, year NUMBER, team_id TEXT, w NUMBER, g NUMBER, l NUMBER, league_id TEXT, half NUMBER); CREATE TABLE fielding_postseason (year NUMBER, g NUMBER, player_id TEXT, cs NUMBER, tp NUMBER, dp NUMBER, team_id TEXT, league_id TEXT, gs NUMBER, sb NUMBER, a NUMBER, e NUMBER, pos TEXT, pb NUMBER); CREATE TABLE pitching_postseason (g_idp NUMBER, player_id TEXT, team_id TEXT, year NUMBER); CREATE TABLE pitching (year NUMBER, player_id TEXT, team_id TEXT); CREATE TABLE manager_award (year NUMBER, player_id TEXT); CREATE TABLE team (g NUMBER, ha NUMBER, cg NUMBER, era NUMBER, h NUMBER, fp NUMBER, ppf NUMBER, wc_win TEXT, div_id TEXT, lg_win TEXT, hr NUMBER, bb NUMBER, w NUMBER, year NUMBER, sb NUMBER, cs NUMBER, r NUMBER, bpf NUMBER, team_id_lahman45 TEXT, soa NUMBER, league_id TEXT, ws_win TEXT, er NUMBER, sho NUMBER, park TEXT, e NUMBER, sv NUMBER, dp NUMBER, franchise_id TEXT, div_win TEXT, attendance NUMBER, double NUMBER, ghome NUMBER, ab NUMBER, bba NUMBER, hra NUMBER, hbp NUMBER, l NUMBER, team_id_br TEXT, triple NUMBER, ra NUMBER, name TEXT, team_id TEXT, sf NUMBER, team_id_retro TEXT, rank NUMBER, ipouts NUMBER, so NUMBER); CREATE TABLE manager (league_id TEXT, year NUMBER, player_id TEXT, team_id TEXT); CREATE TABLE college (city TEXT); CREATE TABLE manager_award_vote (year NUMBER, player_id TEXT); CREATE TABLE player_award_vote (year NUMBER, player_id TEXT); CREATE TABLE appearances (player_id TEXT, g_all NUMBER, g_2b NUMBER, g_lf NUMBER, league_id TEXT, g_p NUMBER, team_id TEXT, g_cf NUMBER, g_pr NUMBER, g_defense NUMBER, gs NUMBER, g_dh NUMBER, g_1b NUMBER, g_3b NUMBER, g_ph NUMBER, g_ss NUMBER, g_batting NUMBER, g_rf NUMBER, g_c NUMBER, year NUMBER, g_of NUMBER); CREATE TABLE salary (player_id TEXT, team_id TEXT, year NUMBER); CREATE TABLE batting (sf NUMBER, hbp NUMBER, ab NUMBER, sb NUMBER, sh NUMBER, g_idp NUMBER, g NUMBER, double NUMBER, stint NUMBER, year NUMBER, cs NUMBER, league_id TEXT, r NUMBER, h NUMBER, bb NUMBER, ibb NUMBER, so NUMBER, player_id TEXT, team_id TEXT, rbi NUMBER, triple NUMBER); CREATE TABLE home_game (team_id TEXT, year NUMBER); CREATE TABLE player_award (year NUMBER, player_id TEXT); CREATE TABLE fielding_outfield (player_id TEXT, year NUMBER); CREATE TABLE park (city TEXT, park_name TEXT, park_id TEXT); CREATE TABLE team_franchise (franchise_name TEXT, franchise_id TEXT, na_assoc TEXT); CREATE TABLE player_college (player_id TEXT, year NUMBER); CREATE TABLE player (throws TEXT, name_first TEXT, birth_country TEXT, birth_month NUMBER, birth_state TEXT, death_state TEXT, name_given TEXT, birth_day NUMBER, birth_year NUMBER, height NUMBER, birth_city TEXT, death_city TEXT, name_last TEXT, death_day NUMBER, retro_id TEXT, debut TEXT, weight NUMBER, death_year NUMBER, bats TEXT, bbref_id TEXT, player_id TEXT, final_game TEXT); CREATE TABLE batting_postseason (cs NUMBER, sb NUMBER, sh NUMBER, team_id TEXT, g_idp NUMBER, so NUMBER, league_id TEXT, player_id TEXT, year NUMBER, g NUMBER); CREATE TABLE postseason (year NUMBER); CREATE TABLE all_star (team_id TEXT, game_id TEXT, league_id TEXT, year NUMBER, player_id TEXT); CREATE TABLE hall_of_fame (player_id TEXT, yearid NUMBER);"
      },
      {
        "question": "How about in 2000?",
        "query": "SELECT player_id FROM salary AS t1 JOIN team AS t2 ON t1.team_id = t2.team_id_br WHERE t2.name = 'Boston Red Stockings' AND t1.year = 2000 GROUP BY player_id",
        "schema": "CREATE TABLE manager_award (year NUMBER, player_id TEXT); CREATE TABLE salary (year NUMBER, salary NUMBER, team_id TEXT, player_id TEXT); CREATE TABLE park (park_name TEXT, city TEXT, park_id TEXT); CREATE TABLE college (city TEXT); CREATE TABLE player_award_vote (year NUMBER, player_id TEXT); CREATE TABLE batting_postseason (league_id TEXT, sb NUMBER, g_idp NUMBER, so NUMBER, team_id TEXT, g NUMBER, year NUMBER, sh NUMBER, player_id TEXT, cs NUMBER); CREATE TABLE team_franchise (franchise_id TEXT, na_assoc TEXT, franchise_name TEXT); CREATE TABLE player (death_state TEXT, birth_month NUMBER, birth_city TEXT, birth_country TEXT, debut TEXT, throws TEXT, name_last TEXT, player_id TEXT, final_game TEXT, bats TEXT, height NUMBER, birth_state TEXT, birth_year NUMBER, name_first TEXT, retro_id TEXT, death_day NUMBER, death_city TEXT, weight NUMBER, name_given TEXT, bbref_id TEXT, birth_day NUMBER, death_year NUMBER); CREATE TABLE manager_award_vote (player_id TEXT, year NUMBER); CREATE TABLE player_award (player_id TEXT, year NUMBER); CREATE TABLE pitching (team_id TEXT, player_id TEXT, year NUMBER); CREATE TABLE manager (year NUMBER, league_id TEXT, team_id TEXT, player_id TEXT); CREATE TABLE fielding_postseason (league_id TEXT, e NUMBER, team_id TEXT, pb NUMBER, a NUMBER, tp NUMBER, year NUMBER, player_id TEXT, gs NUMBER, sb NUMBER, dp NUMBER, g NUMBER, pos TEXT, cs NUMBER); CREATE TABLE manager_half (team_id TEXT, player_id TEXT); CREATE TABLE hall_of_fame (player_id TEXT, yearid NUMBER); CREATE TABLE player_college (player_id TEXT, year NUMBER); CREATE TABLE postseason (year NUMBER); CREATE TABLE team (year NUMBER, e NUMBER, league_id TEXT, hbp NUMBER, team_id_lahman45 TEXT, so NUMBER, cg NUMBER, name TEXT, hra NUMBER, sv NUMBER, dp NUMBER, bb NUMBER, ws_win TEXT, team_id_br TEXT, wc_win TEXT, g NUMBER, ha NUMBER, ghome NUMBER, rank NUMBER, div_id TEXT, l NUMBER, ppf NUMBER, triple NUMBER, fp NUMBER, ipouts NUMBER, cs NUMBER, sb NUMBER, ab NUMBER, park TEXT, sho NUMBER, w NUMBER, er NUMBER, team_id_retro TEXT, hr NUMBER, franchise_id TEXT, team_id TEXT, bba NUMBER, soa NUMBER, r NUMBER, era NUMBER, ra NUMBER, sf NUMBER, h NUMBER, lg_win TEXT, div_win TEXT, double NUMBER, bpf NUMBER, attendance NUMBER); CREATE TABLE home_game (year NUMBER, team_id TEXT); CREATE TABLE fielding (year NUMBER, a NUMBER, zr NUMBER, gs NUMBER, e NUMBER, pb NUMBER, pos TEXT, league_id TEXT, inn_outs NUMBER, po NUMBER, cs NUMBER, g NUMBER, wp NUMBER, player_id TEXT, sb NUMBER, team_id TEXT, dp NUMBER); CREATE TABLE batting (league_id TEXT, hbp NUMBER, team_id TEXT, ibb NUMBER, bb NUMBER, g_idp NUMBER, rbi NUMBER, player_id TEXT, triple NUMBER, double NUMBER, sh NUMBER, r NUMBER, stint NUMBER, so NUMBER, sb NUMBER, h NUMBER, year NUMBER, cs NUMBER, sf NUMBER, g NUMBER, ab NUMBER); CREATE TABLE team_half (year NUMBER, g NUMBER, half NUMBER, team_id TEXT, div_id TEXT, l NUMBER, league_id TEXT, w NUMBER); CREATE TABLE fielding_outfield (player_id TEXT, year NUMBER); CREATE TABLE pitching_postseason (team_id TEXT, g_idp NUMBER, year NUMBER, player_id TEXT); CREATE TABLE appearances (g_1b NUMBER, gs NUMBER, g_of NUMBER, g_2b NUMBER, g_3b NUMBER, g_pr NUMBER, g_all NUMBER, team_id TEXT, g_rf NUMBER, g_lf NUMBER, league_id TEXT, g_defense NUMBER, g_batting NUMBER, player_id TEXT, g_p NUMBER, g_cf NUMBER, g_c NUMBER, g_ph NUMBER, year NUMBER, g_dh NUMBER, g_ss NUMBER); CREATE TABLE all_star (team_id TEXT, game_id TEXT, league_id TEXT, year NUMBER, player_id TEXT);"
      },
      {
        "question": "How many players were there that year?",
        "query": "SELECT count(*) FROM salary AS t1 JOIN team AS t2 ON t1.team_id = t2.team_id_br WHERE t2.name = 'Boston Red Stockings' AND t1.year = 2000 GROUP BY player_id",
        "schema": "CREATE TABLE postseason (year NUMBER); CREATE TABLE park (park_id TEXT, city TEXT, park_name TEXT); CREATE TABLE home_game (year NUMBER, team_id TEXT); CREATE TABLE all_star (league_id TEXT, year NUMBER, player_id TEXT, game_id TEXT, team_id TEXT); CREATE TABLE player_college (year NUMBER, player_id TEXT); CREATE TABLE player_award_vote (year NUMBER, player_id TEXT); CREATE TABLE batting_postseason (team_id TEXT, cs NUMBER, player_id TEXT, sh NUMBER, year NUMBER, g_idp NUMBER, sb NUMBER, g NUMBER, league_id TEXT, so NUMBER); CREATE TABLE batting (player_id TEXT, hbp NUMBER, ibb NUMBER, triple NUMBER, league_id TEXT, ab NUMBER, team_id TEXT, rbi NUMBER, double NUMBER, g_idp NUMBER, sf NUMBER, r NUMBER, cs NUMBER, sh NUMBER, h NUMBER, g NUMBER, stint NUMBER, sb NUMBER, year NUMBER, bb NUMBER, so NUMBER); CREATE TABLE manager_award_vote (player_id TEXT, year NUMBER); CREATE TABLE pitching (player_id TEXT, year NUMBER, team_id TEXT); CREATE TABLE fielding (team_id TEXT, pos TEXT, gs NUMBER, league_id TEXT, a NUMBER, zr NUMBER, dp NUMBER, wp NUMBER, e NUMBER, year NUMBER, g NUMBER, inn_outs NUMBER, player_id TEXT, sb NUMBER, po NUMBER, cs NUMBER, pb NUMBER); CREATE TABLE player (height NUMBER, bats TEXT, debut TEXT, death_city TEXT, throws TEXT, death_year NUMBER, birth_year NUMBER, bbref_id TEXT, name_given TEXT, birth_city TEXT, final_game TEXT, death_day NUMBER, birth_state TEXT, birth_month NUMBER, birth_country TEXT, death_state TEXT, player_id TEXT, name_first TEXT, weight NUMBER, retro_id TEXT, birth_day NUMBER, name_last TEXT); CREATE TABLE hall_of_fame (yearid NUMBER, player_id TEXT); CREATE TABLE player_award (year NUMBER, player_id TEXT); CREATE TABLE college (city TEXT); CREATE TABLE manager (player_id TEXT, year NUMBER, league_id TEXT, team_id TEXT); CREATE TABLE team_franchise (na_assoc TEXT, franchise_id TEXT, franchise_name TEXT); CREATE TABLE manager_half (team_id TEXT, player_id TEXT); CREATE TABLE manager_award (year NUMBER, player_id TEXT); CREATE TABLE team_half (year NUMBER, league_id TEXT, g NUMBER, w NUMBER, div_id TEXT, l NUMBER, team_id TEXT, half NUMBER); CREATE TABLE fielding_outfield (player_id TEXT, year NUMBER); CREATE TABLE salary (year NUMBER, player_id TEXT, salary NUMBER, team_id TEXT); CREATE TABLE fielding_postseason (sb NUMBER, pb NUMBER, year NUMBER, player_id TEXT, dp NUMBER, tp NUMBER, e NUMBER, gs NUMBER, league_id TEXT, pos TEXT, cs NUMBER, a NUMBER, team_id TEXT, g NUMBER); CREATE TABLE pitching_postseason (g_idp NUMBER, team_id TEXT, player_id TEXT, year NUMBER); CREATE TABLE team (er NUMBER, wc_win TEXT, e NUMBER, team_id_lahman45 TEXT, sv NUMBER, ha NUMBER, hra NUMBER, sho NUMBER, team_id_retro TEXT, l NUMBER, cg NUMBER, name TEXT, era NUMBER, park TEXT, league_id TEXT, div_win TEXT, so NUMBER, g NUMBER, franchise_id TEXT, triple NUMBER, double NUMBER, dp NUMBER, r NUMBER, ab NUMBER, bpf NUMBER, h NUMBER, year NUMBER, lg_win TEXT, team_id_br TEXT, div_id TEXT, hbp NUMBER, fp NUMBER, ppf NUMBER, sb NUMBER, w NUMBER, cs NUMBER, attendance NUMBER, ipouts NUMBER, sf NUMBER, soa NUMBER, ghome NUMBER, bb NUMBER, rank NUMBER, ws_win TEXT, hr NUMBER, bba NUMBER, ra NUMBER, team_id TEXT); CREATE TABLE appearances (g_2b NUMBER, gs NUMBER, g_p NUMBER, g_lf NUMBER, player_id TEXT, g_ph NUMBER, g_dh NUMBER, g_c NUMBER, g_defense NUMBER, league_id TEXT, g_all NUMBER, team_id TEXT, g_rf NUMBER, g_ss NUMBER, g_3b NUMBER, g_cf NUMBER, g_batting NUMBER, g_1b NUMBER, g_pr NUMBER, year NUMBER, g_of NUMBER);"
      }
    ],
    [
      {
        "question": "What is the highest salary out of all the players?",
        "query": "SELECT max(salary) FROM salary",
        "schema": "CREATE TABLE player_award (player_id TEXT); CREATE TABLE hall_of_fame (player_id TEXT); CREATE TABLE player (player_id TEXT); CREATE TABLE salary (team_id TEXT, salary NUMBER, year NUMBER, league_id TEXT, player_id TEXT); CREATE TABLE all_star (gp NUMBER, player_id TEXT);"
      },
      {
        "question": "How about in 2001?",
        "query": "SELECT max(salary) FROM salary WHERE YEAR = 2001",
        "schema": "CREATE TABLE player_award_vote (year NUMBER); CREATE TABLE player_award (player_id TEXT, year NUMBER); CREATE TABLE salary (player_id TEXT, year NUMBER, team_id TEXT, league_id TEXT, salary NUMBER); CREATE TABLE postseason (year NUMBER); CREATE TABLE all_star (player_id TEXT, year NUMBER, gp NUMBER); CREATE TABLE hall_of_fame (yearid NUMBER, player_id TEXT); CREATE TABLE player (player_id TEXT);"
      },
      {
        "question": "Could you please give the top three highest salaries from that year?",
        "query": "SELECT salary FROM salary WHERE YEAR = 2001 ORDER BY salary DESC LIMIT 3;",
        "schema": "CREATE TABLE player_award (player_id TEXT, year NUMBER); CREATE TABLE salary (year NUMBER, salary NUMBER, team_id TEXT, league_id TEXT, player_id TEXT); CREATE TABLE postseason (year NUMBER); CREATE TABLE hall_of_fame (yearid NUMBER, player_id TEXT); CREATE TABLE player_award_vote (year NUMBER); CREATE TABLE all_star (year NUMBER, gp NUMBER, player_id TEXT); CREATE TABLE player (player_id TEXT);"
      }
    ],
    [
      {
        "question": "What were all the salary values of players in 2012?",
        "query": "SELECT salary FROM salary WHERE YEAR = 2012",
        "schema": "CREATE TABLE hall_of_fame (yearid NUMBER, player_id TEXT); CREATE TABLE player_college (year NUMBER, player_id TEXT); CREATE TABLE salary (team_id TEXT, salary NUMBER, year NUMBER, player_id TEXT, league_id TEXT); CREATE TABLE player_award (player_id TEXT, year NUMBER); CREATE TABLE appearances (year NUMBER); CREATE TABLE all_star (year NUMBER, player_id TEXT); CREATE TABLE batting (year NUMBER); CREATE TABLE player_award_vote (player_id TEXT, year NUMBER); CREATE TABLE player (player_id TEXT); CREATE TABLE postseason (year NUMBER);"
      },
      {
        "question": "How about in 2010?",
        "query": "SELECT salary FROM salary WHERE YEAR = 2010",
        "schema": "CREATE TABLE appearances (year NUMBER); CREATE TABLE player_college (year NUMBER, player_id TEXT); CREATE TABLE batting (year NUMBER); CREATE TABLE postseason (year NUMBER); CREATE TABLE player_award_vote (year NUMBER, player_id TEXT); CREATE TABLE salary (salary NUMBER, year NUMBER, team_id TEXT, player_id TEXT, league_id TEXT); CREATE TABLE all_star (year NUMBER, player_id TEXT); CREATE TABLE player (player_id TEXT); CREATE TABLE player_award (year NUMBER, player_id TEXT); CREATE TABLE hall_of_fame (player_id TEXT, yearid NUMBER);"
      },
      {
        "question": "What is the average number of these results?",
        "query": "SELECT avg(salary) FROM salary WHERE YEAR = 2010",
        "schema": "CREATE TABLE player (player_id TEXT); CREATE TABLE player_award_vote (year NUMBER, player_id TEXT); CREATE TABLE all_star (year NUMBER, player_id TEXT); CREATE TABLE salary (league_id TEXT, player_id TEXT, salary NUMBER, team_id TEXT, year NUMBER); CREATE TABLE appearances (year NUMBER); CREATE TABLE player_award (year NUMBER, player_id TEXT); CREATE TABLE postseason (year NUMBER); CREATE TABLE player_college (year NUMBER, player_id TEXT); CREATE TABLE hall_of_fame (player_id TEXT, yearid NUMBER); CREATE TABLE batting (year NUMBER);"
      },
      {
        "question": "Could please give all the salary values of players in 2010 and 2001?",
        "query": "SELECT salary FROM salary WHERE YEAR = 2010 UNION SELECT salary FROM salary WHERE YEAR = 2001",
        "schema": "CREATE TABLE appearances (year NUMBER); CREATE TABLE batting (year NUMBER); CREATE TABLE player_college (player_id TEXT, year NUMBER); CREATE TABLE salary (year NUMBER, league_id TEXT, team_id TEXT, salary NUMBER, player_id TEXT); CREATE TABLE postseason (year NUMBER); CREATE TABLE all_star (year NUMBER, player_id TEXT); CREATE TABLE player_award_vote (year NUMBER, player_id TEXT); CREATE TABLE hall_of_fame (yearid NUMBER, player_id TEXT); CREATE TABLE player (player_id TEXT); CREATE TABLE player_award (player_id TEXT, year NUMBER);"
      }
    ],
    [
      {
        "question": "How many players are there in the hall of fame?",
        "query": "SELECT count(*) FROM hall_of_fame",
        "schema": "CREATE TABLE fielding (player_id TEXT); CREATE TABLE appearances (g_p NUMBER, g_dh NUMBER, g_of NUMBER, g_pr NUMBER, g_ss NUMBER, g_1b NUMBER, player_id TEXT, team_id TEXT, g_3b NUMBER, g_cf NUMBER, g_ph NUMBER, g_all NUMBER, g_2b NUMBER, g_c NUMBER, g_rf NUMBER, gs NUMBER); CREATE TABLE manager_award_vote (player_id TEXT); CREATE TABLE manager_award (player_id TEXT); CREATE TABLE player_award_vote (award_id TEXT, player_id TEXT, league_id TEXT); CREATE TABLE all_star (game_num NUMBER, player_id TEXT, game_id TEXT); CREATE TABLE manager (plyr_mgr TEXT, inseason NUMBER, g NUMBER, player_id TEXT); CREATE TABLE player_college (college_id TEXT, player_id TEXT); CREATE TABLE batting (player_id TEXT); CREATE TABLE fielding_outfield (player_id TEXT); CREATE TABLE player_award (player_id TEXT, award_id TEXT, league_id TEXT); CREATE TABLE park (park_alias TEXT); CREATE TABLE hall_of_fame (needed_note TEXT, yearid NUMBER, needed NUMBER, category TEXT, votes NUMBER, votedby TEXT, ballots NUMBER, inducted TEXT, player_id TEXT); CREATE TABLE fielding_postseason (player_id TEXT); CREATE TABLE player (name_first TEXT, bbref_id TEXT, retro_id TEXT, player_id TEXT, death_day NUMBER, name_given TEXT, name_last TEXT); CREATE TABLE manager_half (player_id TEXT);"
      },
      {
        "question": "How many of them entered each year?",
        "query": "SELECT yearid, count(*) FROM hall_of_fame GROUP BY yearid",
        "schema": "CREATE TABLE all_star (game_num NUMBER, game_id TEXT, player_id TEXT, year NUMBER); CREATE TABLE manager (player_id TEXT, plyr_mgr TEXT, inseason NUMBER, g NUMBER); CREATE TABLE batting (player_id TEXT); CREATE TABLE player_award_vote (award_id TEXT, year NUMBER, league_id TEXT, player_id TEXT); CREATE TABLE manager_award (player_id TEXT); CREATE TABLE hall_of_fame (yearid NUMBER, needed NUMBER, category TEXT, needed_note TEXT, ballots NUMBER, votedby TEXT, inducted TEXT, player_id TEXT, votes NUMBER); CREATE TABLE fielding_postseason (player_id TEXT, year NUMBER); CREATE TABLE player_award (league_id TEXT, award_id TEXT, player_id TEXT, year NUMBER); CREATE TABLE manager_half (player_id TEXT); CREATE TABLE fielding (player_id TEXT); CREATE TABLE appearances (year NUMBER, g_p NUMBER, g_cf NUMBER, g_ss NUMBER, g_dh NUMBER, g_all NUMBER, league_id TEXT, g_lf NUMBER, gs NUMBER, g_defense NUMBER, team_id TEXT, g_batting NUMBER, g_of NUMBER, g_1b NUMBER, player_id TEXT, g_pr NUMBER, g_ph NUMBER, g_3b NUMBER, g_2b NUMBER, g_c NUMBER, g_rf NUMBER); CREATE TABLE batting_postseason (year NUMBER); CREATE TABLE park (park_alias TEXT); CREATE TABLE player (retro_id TEXT, bbref_id TEXT, death_day NUMBER, name_first TEXT, name_last TEXT, name_given TEXT, player_id TEXT); CREATE TABLE fielding_outfield (player_id TEXT, year NUMBER); CREATE TABLE postseason (year NUMBER); CREATE TABLE player_college (player_id TEXT, college_id TEXT, year NUMBER); CREATE TABLE manager_award_vote (player_id TEXT);"
      },
      {
        "question": "Which year has the fewest people?",
        "query": "SELECT yearid FROM hall_of_fame GROUP BY yearid ORDER BY count(*) ASC LIMIT 1",
        "schema": "CREATE TABLE batting_postseason (year NUMBER); CREATE TABLE player_award (league_id TEXT, year NUMBER, award_id TEXT, player_id TEXT); CREATE TABLE fielding_outfield (year NUMBER, player_id TEXT); CREATE TABLE manager_award (player_id TEXT); CREATE TABLE postseason (year NUMBER); CREATE TABLE fielding (player_id TEXT); CREATE TABLE player_college (college_id TEXT, player_id TEXT, year NUMBER); CREATE TABLE manager_half (player_id TEXT); CREATE TABLE batting (player_id TEXT); CREATE TABLE park (park_alias TEXT); CREATE TABLE player (retro_id TEXT, death_day NUMBER, name_given TEXT, player_id TEXT, name_first TEXT, name_last TEXT, bbref_id TEXT); CREATE TABLE hall_of_fame (player_id TEXT, category TEXT, needed_note TEXT, ballots NUMBER, inducted TEXT, votes NUMBER, votedby TEXT, yearid NUMBER, needed NUMBER); CREATE TABLE all_star (game_num NUMBER, game_id TEXT, year NUMBER, player_id TEXT); CREATE TABLE fielding_postseason (player_id TEXT, year NUMBER); CREATE TABLE player_award_vote (award_id TEXT, player_id TEXT, league_id TEXT, year NUMBER); CREATE TABLE appearances (g_defense NUMBER, g_cf NUMBER, g_pr NUMBER, g_rf NUMBER, g_p NUMBER, team_id TEXT, gs NUMBER, g_batting NUMBER, g_ss NUMBER, g_of NUMBER, g_3b NUMBER, g_dh NUMBER, g_lf NUMBER, year NUMBER, g_all NUMBER, g_2b NUMBER, g_ph NUMBER, g_c NUMBER, player_id TEXT, league_id TEXT, g_1b NUMBER); CREATE TABLE manager (plyr_mgr TEXT, player_id TEXT, g NUMBER, inseason NUMBER); CREATE TABLE manager_award_vote (player_id TEXT);"
      }
    ],
    [
      {
        "question": "Which city is \"Columbia Park\" located in?",
        "query": "SELECT city FROM park WHERE park_name = \"Columbia Park\"",
        "schema": "CREATE TABLE home_game (park_id TEXT); CREATE TABLE college (city TEXT); CREATE TABLE park (park_id TEXT, city TEXT, park_name TEXT, park_alias TEXT);"
      },
      {
        "question": "How many games were played in this park?",
        "query": "SELECT count(*) FROM home_game AS t1 JOIN park AS t2 ON t1.park_id = t2.park_id WHERE t2.park_name = 'Columbia Park';",
        "schema": "CREATE TABLE home_game (games NUMBER, park_id TEXT); CREATE TABLE college (city TEXT); CREATE TABLE park (park_alias TEXT, park_id TEXT, park_name TEXT, city TEXT);"
      },
      {
        "question": "How about in year 1908?",
        "query": "SELECT count(*) FROM home_game AS t1 JOIN park AS t2 ON t1.park_id = t2.park_id WHERE t1.year = 1908 AND t2.park_name = 'Columbia Park';",
        "schema": "CREATE TABLE college (city TEXT); CREATE TABLE home_game (park_id TEXT, games NUMBER, year NUMBER); CREATE TABLE park (city TEXT, park_id TEXT, park_name TEXT, park_alias TEXT);"
      },
      {
        "question": "How about in year 1907?",
        "query": "SELECT count(*) FROM home_game AS t1 JOIN park AS t2 ON t1.park_id = t2.park_id WHERE t1.year = 1907 AND t2.park_name = 'Columbia Park';",
        "schema": "CREATE TABLE college (city TEXT); CREATE TABLE home_game (games NUMBER, year NUMBER, park_id TEXT); CREATE TABLE park (park_id TEXT, park_name TEXT, city TEXT, park_alias TEXT);"
      }
    ],
    [
      {
        "question": "Which park is located in Atlanta?",
        "query": "SELECT park_name FROM park WHERE city = 'Atlanta'",
        "schema": "CREATE TABLE home_game (park_id TEXT); CREATE TABLE park (city TEXT, state TEXT, park_name TEXT, park_id TEXT, park_alias TEXT); CREATE TABLE college (state TEXT, city TEXT);"
      },
      {
        "question": "How many games were played in this city?",
        "query": "SELECT count(*) FROM home_game AS t1 JOIN park AS t2 ON t1.park_id = t2.park_id WHERE t2.city = 'Atlanta';",
        "schema": "CREATE TABLE home_game (park_id TEXT, team_id TEXT, games NUMBER); CREATE TABLE park (park_name TEXT, state TEXT, city TEXT, park_id TEXT, park_alias TEXT); CREATE TABLE college (state TEXT, city TEXT);"
      },
      {
        "question": "How about the number in 2010?",
        "query": "SELECT count(*) FROM home_game AS t1 JOIN park AS t2 ON t1.park_id = t2.park_id WHERE t1.year = 2010 AND t2.city = 'Atlanta';",
        "schema": "CREATE TABLE college (city TEXT, state TEXT); CREATE TABLE postseason (year NUMBER); CREATE TABLE home_game (park_id TEXT, team_id TEXT, games NUMBER, year NUMBER); CREATE TABLE park (park_name TEXT, state TEXT, park_id TEXT, city TEXT, park_alias TEXT);"
      },
      {
        "question": "How about the number in 2000?",
        "query": "SELECT count(*) FROM home_game AS t1 JOIN park AS t2 ON t1.park_id = t2.park_id WHERE t1.year = 2000 AND t2.city = 'Atlanta';",
        "schema": "CREATE TABLE park (park_id TEXT, park_alias TEXT, city TEXT, park_name TEXT, state TEXT); CREATE TABLE college (city TEXT, state TEXT); CREATE TABLE postseason (year NUMBER); CREATE TABLE home_game (year NUMBER, games NUMBER, team_id TEXT, park_id TEXT); CREATE TABLE player (player_id TEXT);"
      }
    ],
    [
      {
        "question": "What is the total home game attendance of team Cleveland Forest Citys?",
        "query": "SELECT sum(t1.attendance) FROM home_game AS t1 JOIN team AS t2 ON t1.team_id = t2.team_id_br WHERE t2.name = 'Cleveland Forest Citys'",
        "schema": "CREATE TABLE batting (sf NUMBER, team_id TEXT); CREATE TABLE player (player_id TEXT); CREATE TABLE player_college (college_id TEXT, player_id TEXT); CREATE TABLE park (park_name TEXT, park_alias TEXT, park_id TEXT, city TEXT); CREATE TABLE home_game (team_id TEXT, games NUMBER, attendance NUMBER, league_id TEXT, park_id TEXT); CREATE TABLE all_star (game_id TEXT); CREATE TABLE college (college_id TEXT, city TEXT); CREATE TABLE appearances (team_id TEXT); CREATE TABLE team (bba NUMBER, soa NUMBER, double NUMBER, l NUMBER, er NUMBER, era NUMBER, w NUMBER, dp NUMBER, team_id_br TEXT, attendance NUMBER, ppf NUMBER, franchise_id TEXT, ipouts NUMBER, sv NUMBER, ha NUMBER, team_id_lahman45 TEXT, bpf NUMBER, triple NUMBER, park TEXT, sf NUMBER, so NUMBER, cs NUMBER, bb NUMBER, year NUMBER, hra NUMBER, team_id TEXT, lg_win TEXT, ws_win TEXT, g NUMBER, rank NUMBER, ab NUMBER, league_id TEXT, h NUMBER, ra NUMBER, hr NUMBER, ghome NUMBER, fp NUMBER, e NUMBER, team_id_retro TEXT, sho NUMBER, wc_win TEXT, div_win TEXT, div_id TEXT, hbp NUMBER, r NUMBER, name TEXT, cg NUMBER, sb NUMBER); CREATE TABLE team_half (league_id TEXT, div_id TEXT, team_id TEXT); CREATE TABLE team_franchise (franchise_id TEXT, na_assoc TEXT, franchise_name TEXT); CREATE TABLE batting_postseason (team_id TEXT);"
      },
      {
        "question": "How about the number for Boston Red Stockings?",
        "query": "SELECT sum(t1.attendance) FROM home_game AS t1 JOIN team AS t2 ON t1.team_id = t2.team_id_br WHERE t2.name = 'Boston Red Stockings'",
        "schema": "CREATE TABLE team_half (div_id TEXT, team_id TEXT, league_id TEXT); CREATE TABLE batting (sf NUMBER, team_id TEXT); CREATE TABLE batting_postseason (team_id TEXT); CREATE TABLE appearances (team_id TEXT); CREATE TABLE home_game (games NUMBER, attendance NUMBER, park_id TEXT, league_id TEXT, team_id TEXT); CREATE TABLE team_franchise (franchise_name TEXT, na_assoc TEXT, franchise_id TEXT); CREATE TABLE team (ra NUMBER, ipouts NUMBER, team_id_retro TEXT, era NUMBER, so NUMBER, ghome NUMBER, r NUMBER, ha NUMBER, cg NUMBER, sb NUMBER, lg_win TEXT, div_id TEXT, triple NUMBER, ab NUMBER, hra NUMBER, team_id_br TEXT, double NUMBER, h NUMBER, l NUMBER, e NUMBER, ws_win TEXT, hr NUMBER, fp NUMBER, year NUMBER, sf NUMBER, team_id TEXT, hbp NUMBER, rank NUMBER, attendance NUMBER, league_id TEXT, w NUMBER, name TEXT, er NUMBER, ppf NUMBER, bba NUMBER, bpf NUMBER, div_win TEXT, soa NUMBER, cs NUMBER, g NUMBER, wc_win TEXT, park TEXT, dp NUMBER, sho NUMBER, bb NUMBER, team_id_lahman45 TEXT, franchise_id TEXT, sv NUMBER); CREATE TABLE park (park_name TEXT, city TEXT, park_id TEXT, park_alias TEXT); CREATE TABLE all_star (game_id TEXT); CREATE TABLE player (player_id TEXT); CREATE TABLE player_college (college_id TEXT, player_id TEXT); CREATE TABLE college (college_id TEXT, city TEXT);"
      },
      {
        "question": "Can you please give the results for 2005?",
        "query": "SELECT sum(t1.attendance) FROM home_game AS t1 JOIN team AS t2 ON t1.team_id = t2.team_id_br WHERE t2.name = 'Boston Red Stockings' AND t1.year = 2005;",
        "schema": "CREATE TABLE team_franchise (franchise_name TEXT, na_assoc TEXT, franchise_id TEXT); CREATE TABLE player (player_id TEXT); CREATE TABLE player_college (college_id TEXT, player_id TEXT); CREATE TABLE all_star (game_id TEXT); CREATE TABLE batting (team_id TEXT, sf NUMBER); CREATE TABLE batting_postseason (team_id TEXT); CREATE TABLE appearances (team_id TEXT); CREATE TABLE team (bb NUMBER, ab NUMBER, ipouts NUMBER, wc_win TEXT, ha NUMBER, sb NUMBER, attendance NUMBER, ghome NUMBER, sho NUMBER, bpf NUMBER, hra NUMBER, name TEXT, double NUMBER, franchise_id TEXT, year NUMBER, e NUMBER, g NUMBER, team_id TEXT, er NUMBER, bba NUMBER, hr NUMBER, era NUMBER, team_id_br TEXT, div_id TEXT, sv NUMBER, triple NUMBER, l NUMBER, league_id TEXT, park TEXT, team_id_retro TEXT, dp NUMBER, soa NUMBER, cs NUMBER, div_win TEXT, w NUMBER, team_id_lahman45 TEXT, sf NUMBER, r NUMBER, h NUMBER, ppf NUMBER, cg NUMBER, hbp NUMBER, lg_win TEXT, rank NUMBER, fp NUMBER, so NUMBER, ws_win TEXT, ra NUMBER); CREATE TABLE home_game (league_id TEXT, year NUMBER, park_id TEXT, team_id TEXT, games NUMBER, attendance NUMBER); CREATE TABLE team_half (league_id TEXT, team_id TEXT, div_id TEXT); CREATE TABLE park (park_id TEXT, park_alias TEXT, park_name TEXT, city TEXT); CREATE TABLE college (college_id TEXT, city TEXT); CREATE TABLE postseason (year NUMBER);"
      },
      {
        "question": "How about the number from 2000 to 2010?",
        "query": "SELECT sum(t1.attendance) FROM home_game AS t1 JOIN team AS t2 ON t1.team_id = t2.team_id_br WHERE t2.name = 'Boston Red Stockings' AND t1.year BETWEEN 2000 AND 2010;",
        "schema": "CREATE TABLE home_game (team_id TEXT, park_id TEXT, league_id TEXT, attendance NUMBER, year NUMBER, games NUMBER); CREATE TABLE postseason (year NUMBER); CREATE TABLE appearances (team_id TEXT); CREATE TABLE team (wc_win TEXT, bba NUMBER, h NUMBER, bpf NUMBER, name TEXT, g NUMBER, div_id TEXT, ws_win TEXT, so NUMBER, lg_win TEXT, ha NUMBER, dp NUMBER, hra NUMBER, league_id TEXT, hr NUMBER, div_win TEXT, team_id_lahman45 TEXT, l NUMBER, era NUMBER, ipouts NUMBER, sf NUMBER, franchise_id TEXT, bb NUMBER, er NUMBER, sho NUMBER, rank NUMBER, double NUMBER, hbp NUMBER, cs NUMBER, ppf NUMBER, team_id_br TEXT, year NUMBER, ghome NUMBER, ab NUMBER, sv NUMBER, cg NUMBER, triple NUMBER, fp NUMBER, park TEXT, soa NUMBER, ra NUMBER, team_id TEXT, w NUMBER, r NUMBER, attendance NUMBER, e NUMBER, sb NUMBER, team_id_retro TEXT); CREATE TABLE player_college (college_id TEXT, player_id TEXT); CREATE TABLE batting (sf NUMBER, team_id TEXT); CREATE TABLE college (college_id TEXT, city TEXT); CREATE TABLE team_franchise (franchise_name TEXT, na_assoc TEXT, franchise_id TEXT); CREATE TABLE park (park_id TEXT, city TEXT, park_alias TEXT, park_name TEXT); CREATE TABLE team_half (year NUMBER, team_id TEXT, div_id TEXT, league_id TEXT); CREATE TABLE batting_postseason (team_id TEXT); CREATE TABLE player (player_id TEXT); CREATE TABLE all_star (game_id TEXT);"
      }
    ],
    [
      {
        "question": "How many players with first name Len and last name Barker are there?",
        "query": "SELECT count(*) FROM player WHERE name_first = 'Len' AND name_last = 'Barker'",
        "schema": "CREATE TABLE player (birth_country TEXT, name_first TEXT, death_city TEXT, death_month NUMBER, birth_city TEXT, weight NUMBER, death_day NUMBER, final_game TEXT, birth_year NUMBER, debut TEXT, birth_day NUMBER, birth_state TEXT, retro_id TEXT, bats TEXT, player_id TEXT, bbref_id TEXT, name_last TEXT, death_state TEXT, birth_month NUMBER, death_year NUMBER, death_country TEXT, name_given TEXT, throws TEXT, height NUMBER); CREATE TABLE hall_of_fame (player_id TEXT); CREATE TABLE fielding_outfield (player_id TEXT); CREATE TABLE appearances (team_id TEXT, g_ph NUMBER, gs NUMBER, g_p NUMBER, g_ss NUMBER, g_dh NUMBER, g_rf NUMBER, player_id TEXT, g_all NUMBER, g_of NUMBER); CREATE TABLE player_award (player_id TEXT); CREATE TABLE fielding (player_id TEXT); CREATE TABLE player_award_vote (player_id TEXT); CREATE TABLE manager (w NUMBER, g NUMBER, player_id TEXT); CREATE TABLE all_star (player_id TEXT); CREATE TABLE player_college (player_id TEXT); CREATE TABLE college (city TEXT); CREATE TABLE manager_award (player_id TEXT); CREATE TABLE manager_half (player_id TEXT); CREATE TABLE park (park_name TEXT, city TEXT, park_id TEXT, park_alias TEXT);"
      },
      {
        "question": "What is the average salary that he won in his career?",
        "query": "SELECT avg(t1.salary) FROM salary AS t1 JOIN player AS t2 ON t1.player_id = t2.player_id WHERE t2.name_first = 'Len' AND t2.name_last = 'Barker'",
        "schema": "CREATE TABLE park (park_alias TEXT, park_name TEXT, park_id TEXT, city TEXT); CREATE TABLE player_award_vote (player_id TEXT, points_won NUMBER); CREATE TABLE player (birth_city TEXT, birth_year NUMBER, debut TEXT, death_year NUMBER, bats TEXT, birth_country TEXT, weight NUMBER, death_state TEXT, death_country TEXT, death_month NUMBER, name_given TEXT, death_day NUMBER, name_last TEXT, retro_id TEXT, birth_state TEXT, final_game TEXT, death_city TEXT, birth_day NUMBER, height NUMBER, player_id TEXT, bbref_id TEXT, throws TEXT, birth_month NUMBER, name_first TEXT); CREATE TABLE fielding_outfield (player_id TEXT); CREATE TABLE hall_of_fame (player_id TEXT); CREATE TABLE appearances (g_ss NUMBER, g_of NUMBER, g_rf NUMBER, gs NUMBER, g_p NUMBER, team_id TEXT, g_ph NUMBER, player_id TEXT, g_all NUMBER, g_dh NUMBER); CREATE TABLE manager (w NUMBER, g NUMBER, player_id TEXT); CREATE TABLE college (city TEXT); CREATE TABLE salary (league_id TEXT, salary NUMBER, player_id TEXT, year NUMBER); CREATE TABLE player_college (player_id TEXT); CREATE TABLE manager_half (player_id TEXT); CREATE TABLE all_star (player_id TEXT); CREATE TABLE fielding (player_id TEXT); CREATE TABLE postseason (wins NUMBER); CREATE TABLE manager_award (player_id TEXT); CREATE TABLE player_award (player_id TEXT, year NUMBER);"
      },
      {
        "question": "What is the total salary that he won in his career?",
        "query": "SELECT sum(t1.salary) FROM salary AS t1 JOIN player AS t2 ON t1.player_id = t2.player_id WHERE t2.name_first = 'Len' AND t2.name_last = 'Barker'",
        "schema": "CREATE TABLE player_award (year NUMBER, player_id TEXT); CREATE TABLE manager (w NUMBER, player_id TEXT, g NUMBER); CREATE TABLE player (death_day NUMBER, height NUMBER, name_last TEXT, birth_month NUMBER, bats TEXT, birth_year NUMBER, final_game TEXT, throws TEXT, name_given TEXT, birth_city TEXT, birth_state TEXT, death_country TEXT, death_city TEXT, birth_country TEXT, name_first TEXT, death_year NUMBER, death_month NUMBER, birth_day NUMBER, retro_id TEXT, weight NUMBER, bbref_id TEXT, debut TEXT, player_id TEXT, death_state TEXT); CREATE TABLE park (park_id TEXT, park_alias TEXT, park_name TEXT, city TEXT); CREATE TABLE player_award_vote (player_id TEXT, points_won NUMBER); CREATE TABLE manager_award (player_id TEXT); CREATE TABLE postseason (wins NUMBER); CREATE TABLE appearances (g_p NUMBER, g_all NUMBER, g_of NUMBER, g_dh NUMBER, g_rf NUMBER, team_id TEXT, gs NUMBER, g_ph NUMBER, player_id TEXT, g_ss NUMBER); CREATE TABLE fielding (player_id TEXT); CREATE TABLE manager_half (player_id TEXT); CREATE TABLE fielding_outfield (player_id TEXT); CREATE TABLE hall_of_fame (player_id TEXT); CREATE TABLE player_college (player_id TEXT); CREATE TABLE college (city TEXT); CREATE TABLE salary (year NUMBER, player_id TEXT, salary NUMBER, league_id TEXT); CREATE TABLE all_star (player_id TEXT, game_num NUMBER);"
      },
      {
        "question": "How about the total salary between 1985 to 1990?",
        "query": "SELECT sum(t1.salary) FROM salary AS t1 JOIN player AS t2 ON t1.player_id = t2.player_id WHERE t2.name_first = 'Len' AND t2.name_last = 'Barker' AND t1.year BETWEEN 1985 AND 1990;",
        "schema": "CREATE TABLE fielding_outfield (player_id TEXT); CREATE TABLE postseason (wins NUMBER); CREATE TABLE fielding (player_id TEXT); CREATE TABLE appearances (g_all NUMBER, g_dh NUMBER, g_of NUMBER, g_p NUMBER, team_id TEXT, g_rf NUMBER, gs NUMBER, g_ph NUMBER, g_ss NUMBER, player_id TEXT); CREATE TABLE salary (salary NUMBER, player_id TEXT, league_id TEXT, year NUMBER); CREATE TABLE manager_award (player_id TEXT); CREATE TABLE park (park_alias TEXT, park_id TEXT, city TEXT, park_name TEXT); CREATE TABLE player_college (player_id TEXT); CREATE TABLE all_star (game_num NUMBER, player_id TEXT); CREATE TABLE player_award_vote (points_won NUMBER, player_id TEXT); CREATE TABLE manager_half (player_id TEXT); CREATE TABLE college (city TEXT); CREATE TABLE hall_of_fame (player_id TEXT); CREATE TABLE player_award (year NUMBER, player_id TEXT); CREATE TABLE player (death_year NUMBER, birth_state TEXT, name_last TEXT, name_given TEXT, bbref_id TEXT, birth_day NUMBER, weight NUMBER, death_month NUMBER, retro_id TEXT, final_game TEXT, player_id TEXT, death_day NUMBER, bats TEXT, throws TEXT, death_city TEXT, birth_city TEXT, birth_year NUMBER, birth_month NUMBER, name_first TEXT, death_country TEXT, debut TEXT, birth_country TEXT, death_state TEXT, height NUMBER); CREATE TABLE manager (w NUMBER, g NUMBER, player_id TEXT);"
      }
    ],
    [
      {
        "question": "In which parks does the team \"Washington Nationals\" play games?",
        "query": "SELECT park FROM team WHERE name = \"Washington Nationals\" GROUP BY park",
        "schema": "CREATE TABLE all_star (player_id TEXT, game_id TEXT, team_id TEXT, league_id TEXT, game_num NUMBER); CREATE TABLE team (hbp NUMBER, so NUMBER, wc_win TEXT, w NUMBER, team_id_br TEXT, ra NUMBER, g NUMBER, era NUMBER, l NUMBER, fp NUMBER, ghome NUMBER, ipouts NUMBER, bb NUMBER, cs NUMBER, dp NUMBER, ws_win TEXT, rank NUMBER, ha NUMBER, triple NUMBER, park TEXT, sb NUMBER, name TEXT, year NUMBER, ab NUMBER, sf NUMBER, league_id TEXT, div_win TEXT, team_id TEXT, er NUMBER, sho NUMBER, r NUMBER, e NUMBER, lg_win TEXT, cg NUMBER, double NUMBER, hr NUMBER, bba NUMBER, bpf NUMBER, attendance NUMBER, team_id_lahman45 TEXT, hra NUMBER, div_id TEXT, h NUMBER, franchise_id TEXT, soa NUMBER, team_id_retro TEXT, ppf NUMBER, sv NUMBER); CREATE TABLE fielding_outfield (gcf NUMBER, player_id TEXT, glf NUMBER, grf NUMBER); CREATE TABLE manager (team_id TEXT); CREATE TABLE appearances (team_id TEXT); CREATE TABLE fielding_postseason (player_id TEXT); CREATE TABLE manager_half (team_id TEXT); CREATE TABLE player (player_id TEXT); CREATE TABLE fielding (player_id TEXT, g NUMBER, league_id TEXT, e NUMBER, pb NUMBER, po NUMBER, a NUMBER, cs NUMBER, team_id TEXT); CREATE TABLE team_half (team_id TEXT); CREATE TABLE college (college_id TEXT, city TEXT); CREATE TABLE team_franchise (franchise_id TEXT, na_assoc TEXT, franchise_name TEXT); CREATE TABLE home_game (team_id TEXT, games NUMBER, league_id TEXT, park_id TEXT); CREATE TABLE park (state TEXT, park_name TEXT, park_alias TEXT, city TEXT, park_id TEXT);"
      },
      {
        "question": "How many players have played for this team?",
        "query": "SELECT count(*) FROM salary AS t1 JOIN player AS t2 ON t1.player_id = t2.player_id JOIN team AS t3 ON t3.team_id_br = t1.team_id WHERE t3.name = 'Washington Nationals'",
        "schema": "CREATE TABLE manager (team_id TEXT); CREATE TABLE manager_half (team_id TEXT); CREATE TABLE fielding_outfield (player_id TEXT, gcf NUMBER, glf NUMBER, grf NUMBER); CREATE TABLE hall_of_fame (player_id TEXT); CREATE TABLE team_franchise (franchise_id TEXT, franchise_name TEXT, na_assoc TEXT); CREATE TABLE team (ws_win TEXT, sho NUMBER, div_win TEXT, sb NUMBER, triple NUMBER, wc_win TEXT, h NUMBER, ghome NUMBER, double NUMBER, g NUMBER, fp NUMBER, sf NUMBER, cg NUMBER, hbp NUMBER, w NUMBER, l NUMBER, team_id_br TEXT, lg_win TEXT, league_id TEXT, era NUMBER, park TEXT, ppf NUMBER, bb NUMBER, name TEXT, attendance NUMBER, bpf NUMBER, team_id TEXT, div_id TEXT, e NUMBER, er NUMBER, r NUMBER, franchise_id TEXT, year NUMBER, sv NUMBER, hra NUMBER, cs NUMBER, team_id_lahman45 TEXT, hr NUMBER, dp NUMBER, so NUMBER, bba NUMBER, ha NUMBER, rank NUMBER, ra NUMBER, team_id_retro TEXT, ipouts NUMBER, soa NUMBER, ab NUMBER); CREATE TABLE appearances (team_id TEXT); CREATE TABLE player (player_id TEXT); CREATE TABLE fielding (player_id TEXT, team_id TEXT, g NUMBER, a NUMBER, e NUMBER, po NUMBER, cs NUMBER, pb NUMBER, league_id TEXT); CREATE TABLE all_star (player_id TEXT, team_id TEXT, league_id TEXT, game_id TEXT, game_num NUMBER); CREATE TABLE fielding_postseason (player_id TEXT); CREATE TABLE college (college_id TEXT, city TEXT); CREATE TABLE home_game (team_id TEXT, park_id TEXT, league_id TEXT, games NUMBER); CREATE TABLE team_half (team_id TEXT); CREATE TABLE park (park_id TEXT, park_name TEXT, state TEXT, city TEXT, park_alias TEXT); CREATE TABLE salary (player_id TEXT, team_id TEXT);"
      },
      {
        "question": "Could you please list their full names?",
        "query": "SELECT t2.name_first , t2.name_last FROM salary AS t1 JOIN player AS t2 ON t1.player_id = t2.player_id JOIN team AS t3 ON t3.team_id_br = t1.team_id WHERE t3.name = 'Washington Nationals' GROUP BY t2.player_id",
        "schema": "CREATE TABLE all_star (league_id TEXT, game_num NUMBER, game_id TEXT, team_id TEXT, player_id TEXT); CREATE TABLE manager (team_id TEXT); CREATE TABLE team (hbp NUMBER, year NUMBER, div_id TEXT, hra NUMBER, dp NUMBER, div_win TEXT, soa NUMBER, er NUMBER, e NUMBER, team_id_br TEXT, double NUMBER, sho NUMBER, ipouts NUMBER, franchise_id TEXT, park TEXT, sv NUMBER, sf NUMBER, era NUMBER, name TEXT, bb NUMBER, ghome NUMBER, l NUMBER, lg_win TEXT, ab NUMBER, ppf NUMBER, cs NUMBER, team_id_retro TEXT, w NUMBER, ha NUMBER, attendance NUMBER, sb NUMBER, wc_win TEXT, ws_win TEXT, cg NUMBER, bpf NUMBER, fp NUMBER, team_id TEXT, hr NUMBER, g NUMBER, team_id_lahman45 TEXT, r NUMBER, so NUMBER, league_id TEXT, bba NUMBER, ra NUMBER, h NUMBER, rank NUMBER, triple NUMBER); CREATE TABLE park (park_alias TEXT, city TEXT, state TEXT, park_id TEXT, park_name TEXT); CREATE TABLE fielding_outfield (player_id TEXT, grf NUMBER, gcf NUMBER, glf NUMBER); CREATE TABLE fielding (player_id TEXT, pb NUMBER, cs NUMBER, league_id TEXT, g NUMBER, team_id TEXT, po NUMBER, a NUMBER, e NUMBER); CREATE TABLE salary (team_id TEXT, player_id TEXT, salary NUMBER); CREATE TABLE manager_half (team_id TEXT); CREATE TABLE college (college_id TEXT, city TEXT); CREATE TABLE fielding_postseason (player_id TEXT); CREATE TABLE player (birth_city TEXT, name_first TEXT, bbref_id TEXT, debut TEXT, birth_state TEXT, weight NUMBER, death_year NUMBER, death_city TEXT, player_id TEXT, death_month NUMBER, death_state TEXT, death_day NUMBER, height NUMBER, throws TEXT, death_country TEXT, retro_id TEXT, final_game TEXT, birth_country TEXT, birth_day NUMBER, bats TEXT, birth_month NUMBER, name_given TEXT, birth_year NUMBER, name_last TEXT); CREATE TABLE hall_of_fame (player_id TEXT); CREATE TABLE team_franchise (franchise_name TEXT, franchise_id TEXT, na_assoc TEXT); CREATE TABLE home_game (team_id TEXT, league_id TEXT, park_id TEXT, games NUMBER); CREATE TABLE team_half (team_id TEXT); CREATE TABLE appearances (team_id TEXT);"
      },
      {
        "question": "How about names of the players that played for this team in both 2005 and 2007",
        "query": "SELECT t2.name_first , t2.name_last FROM salary AS t1 JOIN player AS t2 ON t1.player_id = t2.player_id JOIN team AS t3 ON t3.team_id_br = t1.team_id WHERE t1.year = 2005 AND t3.name = 'Washington Nationals' INTERSECT SELECT t2.name_first , t2.name_last FROM salary AS t1 JOIN player AS t2 ON t1.player_id = t2.player_id JOIN team AS t3 ON t3.team_id_br = t1.team_id WHERE t1.year = 2007 AND t3.name = 'Washington Nationals'",
        "schema": "CREATE TABLE hall_of_fame (player_id TEXT); CREATE TABLE team_franchise (franchise_id TEXT, franchise_name TEXT, na_assoc TEXT); CREATE TABLE player (birth_month NUMBER, birth_day NUMBER, debut TEXT, weight NUMBER, death_day NUMBER, name_first TEXT, player_id TEXT, birth_state TEXT, retro_id TEXT, death_year NUMBER, name_given TEXT, death_city TEXT, throws TEXT, birth_city TEXT, bats TEXT, birth_year NUMBER, death_country TEXT, final_game TEXT, death_month NUMBER, name_last TEXT, birth_country TEXT, bbref_id TEXT, death_state TEXT, height NUMBER); CREATE TABLE team_half (team_id TEXT, year NUMBER); CREATE TABLE home_game (games NUMBER, league_id TEXT, park_id TEXT, team_id TEXT); CREATE TABLE fielding (po NUMBER, cs NUMBER, team_id TEXT, league_id TEXT, g NUMBER, e NUMBER, a NUMBER, player_id TEXT, pb NUMBER); CREATE TABLE salary (player_id TEXT, year NUMBER, team_id TEXT, salary NUMBER); CREATE TABLE all_star (player_id TEXT, league_id TEXT, team_id TEXT, game_num NUMBER, game_id TEXT); CREATE TABLE manager (team_id TEXT); CREATE TABLE fielding_postseason (player_id TEXT); CREATE TABLE park (city TEXT, state TEXT, park_alias TEXT, park_id TEXT, park_name TEXT); CREATE TABLE postseason (year NUMBER); CREATE TABLE appearances (team_id TEXT); CREATE TABLE fielding_outfield (grf NUMBER, player_id TEXT, gcf NUMBER, glf NUMBER); CREATE TABLE manager_half (team_id TEXT); CREATE TABLE team (hra NUMBER, cs NUMBER, attendance NUMBER, team_id_lahman45 TEXT, fp NUMBER, sv NUMBER, park TEXT, div_id TEXT, e NUMBER, wc_win TEXT, era NUMBER, ab NUMBER, triple NUMBER, rank NUMBER, year NUMBER, name TEXT, w NUMBER, r NUMBER, h NUMBER, cg NUMBER, double NUMBER, ipouts NUMBER, sb NUMBER, sf NUMBER, soa NUMBER, ppf NUMBER, ha NUMBER, ws_win TEXT, l NUMBER, bpf NUMBER, sho NUMBER, er NUMBER, ghome NUMBER, hr NUMBER, g NUMBER, so NUMBER, team_id_br TEXT, league_id TEXT, bb NUMBER, lg_win TEXT, team_id TEXT, bba NUMBER, franchise_id TEXT, ra NUMBER, team_id_retro TEXT, hbp NUMBER, div_win TEXT, dp NUMBER); CREATE TABLE college (college_id TEXT, city TEXT);"
      }
    ],
    [
      {
        "question": "In which parks does the team \"Boston Red Stockings\" play games?",
        "query": "SELECT park FROM team WHERE name = \"Boston Red Stockings\" GROUP BY park",
        "schema": "CREATE TABLE team_half (team_id TEXT); CREATE TABLE all_star (team_id TEXT, game_id TEXT); CREATE TABLE team (bba NUMBER, cs NUMBER, dp NUMBER, team_id_lahman45 TEXT, team_id_retro TEXT, bb NUMBER, team_id TEXT, league_id TEXT, er NUMBER, ws_win TEXT, so NUMBER, lg_win TEXT, wc_win TEXT, ra NUMBER, fp NUMBER, franchise_id TEXT, l NUMBER, h NUMBER, era NUMBER, sf NUMBER, sv NUMBER, e NUMBER, team_id_br TEXT, ipouts NUMBER, div_id TEXT, double NUMBER, div_win TEXT, r NUMBER, ppf NUMBER, g NUMBER, rank NUMBER, year NUMBER, hr NUMBER, ab NUMBER, park TEXT, sb NUMBER, hbp NUMBER, hra NUMBER, triple NUMBER, attendance NUMBER, w NUMBER, sho NUMBER, bpf NUMBER, soa NUMBER, name TEXT, cg NUMBER, ha NUMBER, ghome NUMBER); CREATE TABLE fielding_outfield (grf NUMBER, glf NUMBER, gcf NUMBER, player_id TEXT); CREATE TABLE fielding (e NUMBER, player_id TEXT, team_id TEXT, po NUMBER, league_id TEXT); CREATE TABLE pitching_postseason (team_id TEXT); CREATE TABLE college (city TEXT); CREATE TABLE batting_postseason (team_id TEXT); CREATE TABLE park (city TEXT, park_alias TEXT, park_name TEXT, park_id TEXT, state TEXT); CREATE TABLE manager (team_id TEXT); CREATE TABLE team_franchise (franchise_name TEXT, na_assoc TEXT, franchise_id TEXT); CREATE TABLE player (player_id TEXT); CREATE TABLE fielding_postseason (player_id TEXT, sb NUMBER, team_id TEXT); CREATE TABLE home_game (park_id TEXT, games NUMBER, team_id TEXT, league_id TEXT, openings NUMBER);"
      },
      {
        "question": "How many home games did the team Boston Red Stockings play?",
        "query": "SELECT sum(t1.games) FROM home_game AS t1 JOIN team AS t2 ON t1.team_id = t2.team_id_br WHERE t2.name = 'Boston Red Stockings'",
        "schema": "CREATE TABLE fielding (e NUMBER, team_id TEXT, po NUMBER, league_id TEXT, player_id TEXT); CREATE TABLE fielding_outfield (player_id TEXT, glf NUMBER, grf NUMBER, gcf NUMBER); CREATE TABLE manager (team_id TEXT); CREATE TABLE pitching_postseason (team_id TEXT); CREATE TABLE batting_postseason (team_id TEXT); CREATE TABLE team_franchise (na_assoc TEXT, franchise_id TEXT, franchise_name TEXT); CREATE TABLE player (player_id TEXT); CREATE TABLE park (city TEXT, park_alias TEXT, state TEXT, park_id TEXT, park_name TEXT); CREATE TABLE team (hra NUMBER, sho NUMBER, so NUMBER, soa NUMBER, ipouts NUMBER, div_id TEXT, franchise_id TEXT, sf NUMBER, fp NUMBER, hbp NUMBER, triple NUMBER, park TEXT, wc_win TEXT, dp NUMBER, ppf NUMBER, team_id TEXT, er NUMBER, rank NUMBER, name TEXT, cg NUMBER, league_id TEXT, team_id_retro TEXT, team_id_lahman45 TEXT, bpf NUMBER, ws_win TEXT, attendance NUMBER, ra NUMBER, g NUMBER, bb NUMBER, div_win TEXT, era NUMBER, bba NUMBER, ha NUMBER, year NUMBER, e NUMBER, l NUMBER, double NUMBER, team_id_br TEXT, r NUMBER, cs NUMBER, ghome NUMBER, w NUMBER, sv NUMBER, ab NUMBER, sb NUMBER, h NUMBER, lg_win TEXT, hr NUMBER); CREATE TABLE fielding_postseason (player_id TEXT, sb NUMBER, team_id TEXT); CREATE TABLE home_game (openings NUMBER, games NUMBER, team_id TEXT, park_id TEXT, league_id TEXT); CREATE TABLE all_star (game_id TEXT, team_id TEXT); CREATE TABLE college (city TEXT); CREATE TABLE team_half (team_id TEXT);"
      },
      {
        "question": "How about the number from 1990 to 2000?",
        "query": "SELECT sum(t1.games) FROM home_game AS t1 JOIN team AS t2 ON t1.team_id = t2.team_id_br WHERE t2.name = 'Boston Red Stockings' AND t1.year BETWEEN 1990 AND 2000;",
        "schema": "CREATE TABLE team_half (year NUMBER, team_id TEXT); CREATE TABLE hall_of_fame (yearid NUMBER); CREATE TABLE park (state TEXT, park_id TEXT, park_name TEXT, city TEXT, park_alias TEXT); CREATE TABLE home_game (openings NUMBER, team_id TEXT, park_id TEXT, year NUMBER, games NUMBER, league_id TEXT); CREATE TABLE postseason (year NUMBER); CREATE TABLE college (city TEXT); CREATE TABLE fielding (team_id TEXT, e NUMBER, league_id TEXT, player_id TEXT, po NUMBER); CREATE TABLE fielding_postseason (sb NUMBER, player_id TEXT, team_id TEXT); CREATE TABLE pitching_postseason (team_id TEXT); CREATE TABLE fielding_outfield (grf NUMBER, gcf NUMBER, player_id TEXT, glf NUMBER); CREATE TABLE manager (team_id TEXT); CREATE TABLE batting_postseason (team_id TEXT); CREATE TABLE team (ra NUMBER, r NUMBER, ipouts NUMBER, hr NUMBER, cg NUMBER, era NUMBER, cs NUMBER, team_id_br TEXT, sv NUMBER, dp NUMBER, wc_win TEXT, w NUMBER, bb NUMBER, ws_win TEXT, attendance NUMBER, e NUMBER, so NUMBER, year NUMBER, sf NUMBER, hbp NUMBER, sho NUMBER, ppf NUMBER, hra NUMBER, bpf NUMBER, div_id TEXT, ghome NUMBER, ab NUMBER, double NUMBER, soa NUMBER, er NUMBER, ha NUMBER, lg_win TEXT, sb NUMBER, name TEXT, league_id TEXT, team_id_retro TEXT, park TEXT, rank NUMBER, l NUMBER, fp NUMBER, h NUMBER, div_win TEXT, team_id TEXT, triple NUMBER, g NUMBER, franchise_id TEXT, team_id_lahman45 TEXT, bba NUMBER); CREATE TABLE team_franchise (na_assoc TEXT, franchise_name TEXT, franchise_id TEXT); CREATE TABLE player_award (year NUMBER); CREATE TABLE player (player_id TEXT); CREATE TABLE all_star (year NUMBER, team_id TEXT, game_id TEXT);"
      }
    ],
    [
      {
        "question": "How many attendances did each team have in 1980?",
        "query": "SELECT t2.name, t1.attendance FROM home_game AS t1 JOIN team AS t2 ON t1.team_id = t2.team_id_br WHERE t1.year = 1980 GROUP BY t2.name",
        "schema": "CREATE TABLE home_game (attendance NUMBER, team_id TEXT, year NUMBER); CREATE TABLE fielding_outfield (year NUMBER); CREATE TABLE appearances (year NUMBER, team_id TEXT); CREATE TABLE player (player_id TEXT); CREATE TABLE manager_award_vote (year NUMBER); CREATE TABLE team (hra NUMBER, bb NUMBER, g NUMBER, league_id TEXT, team_id_retro TEXT, w NUMBER, franchise_id TEXT, ab NUMBER, ipouts NUMBER, sb NUMBER, bba NUMBER, div_win TEXT, ra NUMBER, dp NUMBER, sho NUMBER, er NUMBER, wc_win TEXT, ws_win TEXT, div_id TEXT, name TEXT, ppf NUMBER, team_id_br TEXT, l NUMBER, hbp NUMBER, ghome NUMBER, park TEXT, era NUMBER, team_id_lahman45 TEXT, r NUMBER, ha NUMBER, sf NUMBER, rank NUMBER, bpf NUMBER, e NUMBER, cg NUMBER, fp NUMBER, lg_win TEXT, double NUMBER, soa NUMBER, year NUMBER, attendance NUMBER, triple NUMBER, so NUMBER, team_id TEXT, cs NUMBER, h NUMBER, sv NUMBER, hr NUMBER); CREATE TABLE park (park_id TEXT); CREATE TABLE team_franchise (na_assoc TEXT, franchise_id TEXT, franchise_name TEXT); CREATE TABLE team_half (team_id TEXT, w NUMBER, year NUMBER, l NUMBER, g NUMBER, div_id TEXT); CREATE TABLE fielding_postseason (year NUMBER, team_id TEXT); CREATE TABLE manager (year NUMBER); CREATE TABLE all_star (team_id TEXT, year NUMBER); CREATE TABLE hall_of_fame (needed NUMBER, yearid NUMBER); CREATE TABLE player_award_vote (year NUMBER); CREATE TABLE fielding (year NUMBER, team_id TEXT); CREATE TABLE postseason (year NUMBER);"
      },
      {
        "question": "Could you please order the results by the attendance?",
        "query": "SELECT t2.name FROM home_game AS t1 JOIN team AS t2 ON t1.team_id = t2.team_id_br WHERE t1.year = 1980 GROUP BY t2.name ORDER BY t1.attendance ASC",
        "schema": "CREATE TABLE postseason (year NUMBER); CREATE TABLE manager (year NUMBER); CREATE TABLE manager_award_vote (year NUMBER); CREATE TABLE team_half (g NUMBER, year NUMBER, div_id TEXT, w NUMBER, team_id TEXT, l NUMBER); CREATE TABLE home_game (attendance NUMBER, team_id TEXT, year NUMBER, games NUMBER); CREATE TABLE all_star (team_id TEXT, year NUMBER); CREATE TABLE fielding (year NUMBER, team_id TEXT); CREATE TABLE player_award_vote (year NUMBER); CREATE TABLE fielding_outfield (year NUMBER); CREATE TABLE fielding_postseason (team_id TEXT, year NUMBER); CREATE TABLE appearances (year NUMBER, team_id TEXT); CREATE TABLE park (park_id TEXT); CREATE TABLE hall_of_fame (yearid NUMBER, needed NUMBER); CREATE TABLE team (sho NUMBER, dp NUMBER, park TEXT, double NUMBER, rank NUMBER, r NUMBER, bba NUMBER, team_id_retro TEXT, cg NUMBER, team_id_br TEXT, ghome NUMBER, h NUMBER, wc_win TEXT, ra NUMBER, fp NUMBER, name TEXT, lg_win TEXT, sv NUMBER, div_win TEXT, so NUMBER, hr NUMBER, ws_win TEXT, e NUMBER, l NUMBER, team_id TEXT, year NUMBER, ipouts NUMBER, sb NUMBER, bpf NUMBER, w NUMBER, team_id_lahman45 TEXT, ppf NUMBER, franchise_id TEXT, soa NUMBER, hbp NUMBER, ha NUMBER, era NUMBER, div_id TEXT, cs NUMBER, g NUMBER, er NUMBER, league_id TEXT, attendance NUMBER, triple NUMBER, sf NUMBER, ab NUMBER, bb NUMBER, hra NUMBER); CREATE TABLE player (player_id TEXT); CREATE TABLE team_franchise (franchise_id TEXT, franchise_name TEXT, na_assoc TEXT);"
      },
      {
        "question": "Which team had the least number of attendances?",
        "query": "SELECT t2.name FROM home_game AS t1 JOIN team AS t2 ON t1.team_id = t2.team_id_br WHERE t1.year = 1980 ORDER BY t1.attendance ASC LIMIT 1;",
        "schema": "CREATE TABLE fielding (year NUMBER, team_id TEXT); CREATE TABLE all_star (year NUMBER, team_id TEXT); CREATE TABLE home_game (attendance NUMBER, year NUMBER, team_id TEXT, games NUMBER); CREATE TABLE player (player_id TEXT); CREATE TABLE hall_of_fame (needed NUMBER, yearid NUMBER); CREATE TABLE appearances (year NUMBER, team_id TEXT); CREATE TABLE team_franchise (franchise_name TEXT, na_assoc TEXT, franchise_id TEXT); CREATE TABLE manager_award_vote (year NUMBER); CREATE TABLE fielding_postseason (team_id TEXT, year NUMBER); CREATE TABLE park (park_id TEXT); CREATE TABLE manager (year NUMBER); CREATE TABLE team (hr NUMBER, soa NUMBER, team_id_br TEXT, e NUMBER, r NUMBER, fp NUMBER, ghome NUMBER, ws_win TEXT, h NUMBER, ab NUMBER, triple NUMBER, w NUMBER, div_win TEXT, name TEXT, cs NUMBER, hbp NUMBER, rank NUMBER, bb NUMBER, div_id TEXT, wc_win TEXT, team_id_lahman45 TEXT, dp NUMBER, sb NUMBER, hra NUMBER, team_id TEXT, er NUMBER, sho NUMBER, lg_win TEXT, league_id TEXT, bpf NUMBER, year NUMBER, ha NUMBER, ra NUMBER, g NUMBER, park TEXT, sv NUMBER, ppf NUMBER, bba NUMBER, era NUMBER, l NUMBER, franchise_id TEXT, attendance NUMBER, so NUMBER, team_id_retro TEXT, double NUMBER, sf NUMBER, cg NUMBER, ipouts NUMBER); CREATE TABLE fielding_outfield (year NUMBER); CREATE TABLE player_award_vote (year NUMBER); CREATE TABLE postseason (year NUMBER); CREATE TABLE team_half (div_id TEXT, g NUMBER, team_id TEXT, w NUMBER, year NUMBER, l NUMBER);"
      }
    ],
    [
      {
        "question": "How many parks does each state have?",
        "query": "SELECT state, count(*) FROM park GROUP BY state",
        "schema": "CREATE TABLE college (state TEXT, college_id TEXT); CREATE TABLE park (park_id TEXT, country TEXT, state TEXT, park_alias TEXT, park_name TEXT); CREATE TABLE home_game (park_id TEXT); CREATE TABLE player (player_id TEXT);"
      },
      {
        "question": "Which states have more than 3 parks?",
        "query": "SELECT state FROM park GROUP BY state HAVING count(*) > 3;",
        "schema": "CREATE TABLE home_game (park_id TEXT); CREATE TABLE park (park_name TEXT, park_id TEXT, state TEXT, park_alias TEXT, country TEXT); CREATE TABLE player (player_id TEXT); CREATE TABLE college (state TEXT, college_id TEXT);"
      },
      {
        "question": "Which states have more than 2 parks?",
        "query": "SELECT state FROM park GROUP BY state HAVING count(*) > 2;",
        "schema": "CREATE TABLE college (college_id TEXT, state TEXT); CREATE TABLE park (country TEXT, park_name TEXT, park_alias TEXT, park_id TEXT, state TEXT); CREATE TABLE home_game (park_id TEXT); CREATE TABLE player (player_id TEXT);"
      }
    ],
    [
      {
        "question": "How many parks does each city have?",
        "query": "SELECT city, count(*) FROM park GROUP BY city",
        "schema": "CREATE TABLE park (park_alias TEXT, city TEXT, park_name TEXT, park_id TEXT); CREATE TABLE player (player_id TEXT); CREATE TABLE home_game (park_id TEXT); CREATE TABLE college (city TEXT, college_id TEXT);"
      },
      {
        "question": "Which cities have 2 or more parks?",
        "query": "SELECT city FROM park GROUP BY city HAVING count(*) >= 2;",
        "schema": "CREATE TABLE player (player_id TEXT); CREATE TABLE park (park_name TEXT, city TEXT, park_id TEXT, park_alias TEXT); CREATE TABLE home_game (park_id TEXT); CREATE TABLE college (college_id TEXT, city TEXT);"
      },
      {
        "question": "Which cities have 3 or more parks?",
        "query": "SELECT city FROM park GROUP BY city HAVING count(*) >= 3;",
        "schema": "CREATE TABLE college (city TEXT, college_id TEXT); CREATE TABLE home_game (park_id TEXT); CREATE TABLE player (player_id TEXT); CREATE TABLE park (park_id TEXT, park_name TEXT, park_alias TEXT, city TEXT);"
      },
      {
        "question": "How about those with 2 to 4 parks?",
        "query": "SELECT city FROM park GROUP BY city HAVING count(*) BETWEEN 2 AND 4;",
        "schema": "CREATE TABLE home_game (park_id TEXT); CREATE TABLE park (park_name TEXT, park_alias TEXT, city TEXT, park_id TEXT); CREATE TABLE college (city TEXT, college_id TEXT); CREATE TABLE player (player_id TEXT);"
      }
    ]
  ],
  "university_basketball": [
    [
      {
        "question": "What is the average enrollment?",
        "query": "SELECT avg(enrollment) FROM university",
        "schema": "CREATE TABLE university (School_ID NUMBER, Enrollment NUMBER, School TEXT);"
      },
      {
        "question": "Which school was founded the earliest?",
        "query": "SELECT school FROM university ORDER BY founded ASC LIMIT 1",
        "schema": "CREATE TABLE university (Affiliation TEXT, Founded NUMBER, School_ID NUMBER, School TEXT, Enrollment NUMBER);"
      },
      {
        "question": "Which school has the largest enrollment?",
        "query": "SELECT school FROM university ORDER BY enrollment DESC LIMIT 1",
        "schema": "CREATE TABLE university (School TEXT, School_ID NUMBER, Enrollment NUMBER, Affiliation TEXT, Founded NUMBER);"
      },
      {
        "question": "When was it founded?",
        "query": "SELECT founded FROM university ORDER BY enrollment DESC LIMIT 1",
        "schema": "CREATE TABLE university (Affiliation TEXT, Enrollment NUMBER, School_ID NUMBER, Founded NUMBER, School TEXT);"
      }
    ],
    [
      {
        "question": "Which one is the the newest school?",
        "query": "SELECT school FROM university ORDER BY founded DESC LIMIT 1",
        "schema": "CREATE TABLE university (Founded NUMBER, Affiliation TEXT, School TEXT, School_ID NUMBER); CREATE TABLE basketball_match (School_ID NUMBER);"
      },
      {
        "question": "Among the schools, which ones were founded before 1800?",
        "query": "SELECT school FROM university WHERE founded < 1800",
        "schema": "CREATE TABLE basketball_match (School_ID NUMBER); CREATE TABLE university (School TEXT, Founded NUMBER, School_ID NUMBER, Affiliation TEXT);"
      },
      {
        "question": "Can you list the school names ordered by year founded in decreasing order?",
        "query": "SELECT school FROM university ORDER BY founded DESC",
        "schema": "CREATE TABLE university (School_ID NUMBER, Affiliation TEXT, Founded NUMBER, School TEXT); CREATE TABLE basketball_match (School_ID NUMBER);"
      },
      {
        "question": "Please give the year that the first non public school was founded.",
        "query": "SELECT founded FROM university WHERE affiliation != 'Public' ORDER BY founded DESC LIMIT 1",
        "schema": "CREATE TABLE university (School_ID NUMBER, School TEXT, Founded NUMBER, Affiliation TEXT); CREATE TABLE basketball_match (School_ID NUMBER);"
      }
    ],
    [
      {
        "question": "How many games are there?",
        "query": "SELECT count(*) FROM basketball_match",
        "schema": "CREATE TABLE university (School_ID NUMBER); CREATE TABLE basketball_match (Team_ID NUMBER, School_ID NUMBER, ACC_Regular_Season TEXT, All_Games TEXT, All_Games_Percent NUMBER, ACC_Home TEXT, All_Home TEXT, All_Road TEXT, Team_Name TEXT);"
      },
      {
        "question": "What is the lowest acc percent among the competitions?",
        "query": "SELECT min(acc_percent) FROM basketball_match",
        "schema": "CREATE TABLE basketball_match (Team_Name TEXT, ACC_Road TEXT, ACC_Regular_Season TEXT, Team_ID NUMBER, ACC_Home TEXT, All_Home TEXT, All_Games_Percent NUMBER, All_Road TEXT, ACC_Percent TEXT, All_Games TEXT, School_ID NUMBER); CREATE TABLE university (School_ID NUMBER);"
      },
      {
        "question": "Can you order the schools by acc percent in descending order?",
        "query": "SELECT team_name FROM basketball_match ORDER BY acc_percent DESC",
        "schema": "CREATE TABLE university (School_ID NUMBER, School TEXT); CREATE TABLE basketball_match (All_Road TEXT, ACC_Percent TEXT, All_Home TEXT, Team_ID NUMBER, All_Games_Percent NUMBER, ACC_Regular_Season TEXT, School_ID NUMBER, Team_Name TEXT, ACC_Home TEXT, All_Games TEXT, ACC_Road TEXT);"
      },
      {
        "question": "What is the highest acc percent socre?",
        "query": "SELECT acc_percent FROM basketball_match ORDER BY acc_percent DESC LIMIT 1",
        "schema": "CREATE TABLE basketball_match (All_Games_Percent NUMBER, All_Road TEXT, All_Home TEXT, School_ID NUMBER, ACC_Regular_Season TEXT, ACC_Home TEXT, All_Games TEXT, ACC_Percent TEXT, ACC_Road TEXT, Team_ID NUMBER, Team_Name TEXT); CREATE TABLE university (School TEXT, School_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Please give me all the acc percent scores.",
        "query": "SELECT acc_percent FROM basketball_match",
        "schema": "CREATE TABLE university (School_ID NUMBER); CREATE TABLE basketball_match (ACC_Regular_Season TEXT, School_ID NUMBER, ACC_Percent TEXT, All_Games_Percent NUMBER);"
      },
      {
        "question": "Which school has the lowest acc percent score?",
        "query": "SELECT t1.school FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id = t2.school_id ORDER BY t2.acc_percent LIMIT 1",
        "schema": "CREATE TABLE university (School_ID NUMBER, School TEXT); CREATE TABLE basketball_match (All_Games_Percent NUMBER, School_ID NUMBER, ACC_Regular_Season TEXT, ACC_Percent TEXT);"
      },
      {
        "question": "What is its primary conference?",
        "query": "SELECT t1.primary_conference FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id = t2.school_id ORDER BY t2.acc_percent LIMIT 1",
        "schema": "CREATE TABLE university (School_ID NUMBER, Affiliation TEXT, Primary_conference TEXT, School TEXT); CREATE TABLE basketball_match (All_Games_Percent NUMBER, ACC_Regular_Season TEXT, ACC_Percent TEXT, School_ID NUMBER, ACC_Road TEXT);"
      }
    ],
    [
      {
        "question": "Which schools have participated in a basketball match?",
        "query": "SELECT t1.school FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id = t2.school_id",
        "schema": "CREATE TABLE university (School_ID NUMBER, School TEXT); CREATE TABLE basketball_match (Team_ID NUMBER, All_Games TEXT, Team_Name TEXT, School_ID NUMBER);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT count(t1.school) FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id = t2.school_id",
        "schema": "CREATE TABLE university (School TEXT, School_ID NUMBER, Affiliation TEXT); CREATE TABLE basketball_match (Team_Name TEXT, School_ID NUMBER, All_Games TEXT, Team_ID NUMBER);"
      },
      {
        "question": "Which one has been founded for the longest time?",
        "query": "SELECT t1.school FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id = t2.school_id ORDER BY t1.founded LIMIT 1",
        "schema": "CREATE TABLE basketball_match (Team_ID NUMBER, School_ID NUMBER, All_Games TEXT, Team_Name TEXT); CREATE TABLE university (Affiliation TEXT, School TEXT, Founded NUMBER, School_ID NUMBER);"
      },
      {
        "question": "Please list its team name and acc regular season score",
        "query": "SELECT t2.team_name , t2.acc_regular_season FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id = t2.school_id ORDER BY t1.founded LIMIT 1",
        "schema": "CREATE TABLE university (Affiliation TEXT, Founded NUMBER, School TEXT, School_ID NUMBER); CREATE TABLE basketball_match (Team_ID NUMBER, ACC_Road TEXT, School_ID NUMBER, All_Games TEXT, Team_Name TEXT, ACC_Regular_Season TEXT, ACC_Percent TEXT);"
      }
    ],
    [
      {
        "question": "Which school has North Carolina as its team name?",
        "query": "SELECT t1.school FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id = t2.school_id WHERE team_name = 'North Carolina'",
        "schema": "CREATE TABLE university (Nickname TEXT, Location TEXT, School_ID NUMBER, Affiliation TEXT, School TEXT); CREATE TABLE basketball_match (Team_ID NUMBER, Team_Name TEXT, School_ID NUMBER);"
      },
      {
        "question": "What is its location?",
        "query": "SELECT t1.location FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id = t2.school_id WHERE team_name = 'North Carolina'",
        "schema": "CREATE TABLE basketball_match (School_ID NUMBER, Team_Name TEXT, Team_ID NUMBER, All_Home TEXT, ACC_Home TEXT); CREATE TABLE university (School_ID NUMBER, School TEXT, Affiliation TEXT, Location TEXT, Nickname TEXT);"
      },
      {
        "question": "How about the school that has Clemson as its team name?",
        "query": "SELECT t1.school FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id = t2.school_id WHERE team_name = 'Clemson'",
        "schema": "CREATE TABLE university (Affiliation TEXT, School_ID NUMBER, Nickname TEXT, Location TEXT, School TEXT); CREATE TABLE basketball_match (Team_ID NUMBER, All_Home TEXT, ACC_Home TEXT, School_ID NUMBER, Team_Name TEXT);"
      },
      {
        "question": "Please list its location and all games score.",
        "query": "SELECT t2.all_games , t1.location FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id = t2.school_id WHERE team_name = 'Clemson'",
        "schema": "CREATE TABLE basketball_match (All_Games TEXT, Team_ID NUMBER, ACC_Home TEXT, Team_Name TEXT, All_Home TEXT, School_ID NUMBER); CREATE TABLE university (Affiliation TEXT, Location TEXT, Nickname TEXT, School_ID NUMBER, School TEXT);"
      }
    ],
    [
      {
        "question": "How many colleges are there?",
        "query": "SELECT count(*) FROM university",
        "schema": "CREATE TABLE basketball_match (School_ID NUMBER); CREATE TABLE university (Enrollment NUMBER, Affiliation TEXT, School_ID NUMBER, School TEXT);"
      },
      {
        "question": "Please order them by founding year.",
        "query": "SELECT school FROM university ORDER BY founded",
        "schema": "CREATE TABLE basketball_match (School_ID NUMBER); CREATE TABLE university (School_ID NUMBER, Founded NUMBER, Affiliation TEXT, Enrollment NUMBER, School TEXT);"
      },
      {
        "question": "Which one is the oldest?",
        "query": "SELECT school FROM university ORDER BY founded LIMIT 1",
        "schema": "CREATE TABLE university (School TEXT, School_ID NUMBER, Enrollment NUMBER, Affiliation TEXT, Founded NUMBER); CREATE TABLE basketball_match (School_ID NUMBER);"
      },
      {
        "question": "Please list its enrollment and primary_conference.",
        "query": "SELECT enrollment , primary_conference FROM university ORDER BY founded LIMIT 1",
        "schema": "CREATE TABLE basketball_match (School_ID NUMBER); CREATE TABLE university (School TEXT, Enrollment NUMBER, Affiliation TEXT, Primary_conference TEXT, Founded NUMBER, School_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What is the average enrollment of all schools?",
        "query": "SELECT avg(enrollment) FROM university",
        "schema": "CREATE TABLE university (School TEXT, Enrollment NUMBER, School_ID NUMBER);"
      },
      {
        "question": "Could you please order the schools by their enrollment?",
        "query": "SELECT school FROM university ORDER BY enrollment",
        "schema": "CREATE TABLE university (School TEXT, Enrollment NUMBER, School_ID NUMBER);"
      },
      {
        "question": "What is the total enrollment of all schools?",
        "query": "SELECT sum(enrollment) FROM university",
        "schema": "CREATE TABLE university (Enrollment NUMBER, School_ID NUMBER, School TEXT);"
      },
      {
        "question": "Please also list the minimum enrollment.",
        "query": "SELECT sum(enrollment) , min(enrollment) FROM university",
        "schema": "CREATE TABLE university (School TEXT, Enrollment NUMBER, School_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Which schools have participated in a basketball match?",
        "query": "SELECT school FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id = t2.school_id",
        "schema": "CREATE TABLE university (School_ID NUMBER, School TEXT); CREATE TABLE basketball_match (School_ID NUMBER, Team_ID NUMBER, All_Games TEXT, Team_Name TEXT);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT count(school) FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id = t2.school_id",
        "schema": "CREATE TABLE basketball_match (Team_Name TEXT, School_ID NUMBER, Team_ID NUMBER, All_Games TEXT); CREATE TABLE university (School_ID NUMBER, School TEXT);"
      },
      {
        "question": "How about the schools that have not participated in a basketball match?",
        "query": "SELECT school FROM university WHERE school_id NOT IN (SELECT school_id FROM basketball_match)",
        "schema": "CREATE TABLE basketball_match (All_Games TEXT, Team_ID NUMBER, Team_Name TEXT, School_ID NUMBER); CREATE TABLE university (School TEXT, School_ID NUMBER);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT count(*) FROM university WHERE school_id NOT IN (SELECT school_id FROM basketball_match)",
        "schema": "CREATE TABLE basketball_match (All_Games TEXT, Team_ID NUMBER, School_ID NUMBER, Team_Name TEXT); CREATE TABLE university (School TEXT, School_ID NUMBER);"
      }
    ],
    [
      {
        "question": "How many public schools are there?",
        "query": "SELECT count(school) FROM university WHERE affiliation = 'Public'",
        "schema": "CREATE TABLE basketball_match (School_ID NUMBER); CREATE TABLE university (Affiliation TEXT, School_ID NUMBER, School TEXT);"
      },
      {
        "question": "Please list their names.",
        "query": "SELECT school FROM university WHERE affiliation = 'Public'",
        "schema": "CREATE TABLE university (School_ID NUMBER, Affiliation TEXT, School TEXT); CREATE TABLE basketball_match (School_ID NUMBER);"
      },
      {
        "question": "Please also list the schools that were founded after 1850.",
        "query": "SELECT school FROM university WHERE founded > 1850 OR affiliation = 'Public'",
        "schema": "CREATE TABLE basketball_match (School_ID NUMBER); CREATE TABLE university (School TEXT, Founded NUMBER, Affiliation TEXT, School_ID NUMBER);"
      }
    ],
    [
      {
        "question": "How many schools are there?",
        "query": "SELECT count(school) FROM university",
        "schema": "CREATE TABLE university (School TEXT, Enrollment NUMBER, Location TEXT, School_ID NUMBER); CREATE TABLE basketball_match (School_ID NUMBER);"
      },
      {
        "question": "Please list the years they were founded.",
        "query": "SELECT founded FROM university",
        "schema": "CREATE TABLE basketball_match (School_ID NUMBER); CREATE TABLE university (Founded NUMBER, Enrollment NUMBER, School_ID NUMBER, School TEXT, Affiliation TEXT, Location TEXT);"
      },
      {
        "question": "Please list their locations.",
        "query": "SELECT LOCATION FROM university",
        "schema": "CREATE TABLE basketball_match (School_ID NUMBER); CREATE TABLE university (School_ID NUMBER, Founded NUMBER, School TEXT, Location TEXT, Enrollment NUMBER, Affiliation TEXT);"
      },
      {
        "question": "how many of them are in NY?",
        "query": "SELECT count(*) FROM university WHERE LOCATION LIKE \"%NY%\"",
        "schema": "CREATE TABLE university (Founded NUMBER, School_ID NUMBER, Location TEXT, School TEXT, Affiliation TEXT, Enrollment NUMBER); CREATE TABLE basketball_match (School_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What is the average enrollment size?",
        "query": "SELECT avg(enrollment) FROM university",
        "schema": "CREATE TABLE university (School TEXT, Enrollment NUMBER, School_ID NUMBER);"
      },
      {
        "question": "Which schools have basketball team?",
        "query": "SELECT school FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id = t2.school_id",
        "schema": "CREATE TABLE university (Nickname TEXT, School TEXT, School_ID NUMBER, Enrollment NUMBER); CREATE TABLE basketball_match (Team_ID NUMBER, All_Games TEXT, Team_Name TEXT, School_ID NUMBER);"
      },
      {
        "question": "Please list the enrollment of these schools.",
        "query": "SELECT school, enrollment FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id = t2.school_id",
        "schema": "CREATE TABLE basketball_match (School_ID NUMBER, Team_ID NUMBER, Team_Name TEXT, All_Games TEXT); CREATE TABLE university (Nickname TEXT, Enrollment NUMBER, School TEXT, School_ID NUMBER);"
      },
      {
        "question": "Which of them have enrollments that are smaller than the average enrollment size?",
        "query": "SELECT school FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id = t2.school_id WHERE enrollment < (SELECT avg(enrollment) FROM university)",
        "schema": "CREATE TABLE basketball_match (All_Games TEXT, Team_Name TEXT, Team_ID NUMBER, School_ID NUMBER); CREATE TABLE university (Nickname TEXT, School_ID NUMBER, Enrollment NUMBER, School TEXT);"
      },
      {
        "question": "Please list their team names.",
        "query": "SELECT t2.team_name FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id = t2.school_id WHERE enrollment < (SELECT avg(enrollment) FROM university)",
        "schema": "CREATE TABLE basketball_match (School_ID NUMBER, All_Games TEXT, Team_ID NUMBER, Team_Name TEXT); CREATE TABLE university (Nickname TEXT, School TEXT, School_ID NUMBER, Enrollment NUMBER);"
      }
    ],
    [
      {
        "question": "What are the different affiliation types of these schools?",
        "query": "SELECT DISTINCT affiliation FROM university",
        "schema": "CREATE TABLE university (School TEXT, School_ID NUMBER, Affiliation TEXT);"
      },
      {
        "question": "Which universities have over a 20000 enrollment size?",
        "query": "SELECT school FROM university WHERE enrollment > 20000",
        "schema": "CREATE TABLE university (Affiliation TEXT, Enrollment NUMBER, School TEXT, School_ID NUMBER);"
      },
      {
        "question": "Can you also list their affiliation type?",
        "query": "SELECT school, affiliation FROM university WHERE enrollment > 20000",
        "schema": "CREATE TABLE university (Enrollment NUMBER, School_ID NUMBER, Affiliation TEXT, School TEXT);"
      },
      {
        "question": "How many are there in each affiliation group?",
        "query": "SELECT count(*) , affiliation FROM university WHERE enrollment > 20000 GROUP BY affiliation",
        "schema": "CREATE TABLE university (Affiliation TEXT, School_ID NUMBER, Enrollment NUMBER, School TEXT);"
      }
    ]
  ],
  "e_learning": [
    [
      {
        "question": "Tell me Wilson's date of registration.",
        "query": "SELECT date_of_registration FROM students WHERE personal_name = \"Wilson\"",
        "schema": "CREATE TABLE Course_Authors_and_Tutors (middle_name TEXT, family_name TEXT, author_id NUMBER, author_tutor_ATB TEXT, personal_name TEXT); CREATE TABLE Student_Tests_Taken (registration_id NUMBER, date_test_taken TIME); CREATE TABLE Student_Course_Enrolment (date_of_enrolment TIME, registration_id NUMBER, student_id NUMBER); CREATE TABLE Students (personal_name TEXT, family_name TEXT, date_of_latest_logon TIME, date_of_registration TIME, middle_name TEXT, student_id NUMBER); CREATE TABLE Subjects (subject_id NUMBER, subject_name TEXT); CREATE TABLE Courses (subject_id NUMBER, author_id NUMBER);"
      },
      {
        "question": "Tell me the date of his latest logon.",
        "query": "SELECT date_of_latest_logon FROM students WHERE personal_name = \"Wilson\"",
        "schema": "CREATE TABLE Course_Authors_and_Tutors (middle_name TEXT, family_name TEXT, author_id NUMBER, author_tutor_ATB TEXT, personal_name TEXT); CREATE TABLE Student_Tests_Taken (registration_id NUMBER, date_test_taken TIME); CREATE TABLE Courses (author_id NUMBER, subject_id NUMBER); CREATE TABLE Students (date_of_registration TIME, date_of_latest_logon TIME, personal_name TEXT, middle_name TEXT, family_name TEXT, student_id NUMBER); CREATE TABLE Subjects (subject_name TEXT, subject_id NUMBER); CREATE TABLE Student_Course_Enrolment (date_of_enrolment TIME, student_id NUMBER, registration_id NUMBER);"
      },
      {
        "question": "How about the dates of the latest logon of the students with family name \"Jaskolski\" or \"Langosh\"?",
        "query": "SELECT date_of_latest_logon FROM students WHERE family_name = \"Jaskolski\" OR family_name = \"Langosh\"",
        "schema": "CREATE TABLE Student_Course_Enrolment (date_of_enrolment TIME, student_id NUMBER, registration_id NUMBER); CREATE TABLE Students (middle_name TEXT, personal_name TEXT, date_of_registration TIME, date_of_latest_logon TIME, family_name TEXT, student_id NUMBER); CREATE TABLE Courses (subject_id NUMBER, author_id NUMBER); CREATE TABLE Course_Authors_and_Tutors (family_name TEXT, author_tutor_ATB TEXT, personal_name TEXT, author_id NUMBER, middle_name TEXT); CREATE TABLE Student_Tests_Taken (date_test_taken TIME, registration_id NUMBER); CREATE TABLE Subjects (subject_name TEXT, subject_id NUMBER);"
      }
    ],
    [
      {
        "question": "How many students are there?",
        "query": "SELECT count(*) FROM students",
        "schema": "CREATE TABLE Course_Authors_and_Tutors (author_id NUMBER); CREATE TABLE Student_Course_Enrolment (course_id NUMBER, registration_id NUMBER, student_id NUMBER); CREATE TABLE Subjects (subject_id NUMBER, subject_name TEXT); CREATE TABLE Students (middle_name TEXT, student_id NUMBER, personal_name TEXT, login_name TEXT, family_name TEXT); CREATE TABLE Courses (author_id NUMBER, course_id NUMBER); CREATE TABLE Student_Tests_Taken (test_result TEXT, registration_id NUMBER);"
      },
      {
        "question": "How many students have personal names that contain the word \"wel\"?",
        "query": "SELECT count(*) FROM students WHERE personal_name LIKE \"%wel%\"",
        "schema": "CREATE TABLE Student_Course_Enrolment (registration_id NUMBER, student_id NUMBER, course_id NUMBER); CREATE TABLE Course_Authors_and_Tutors (author_id NUMBER); CREATE TABLE Student_Tests_Taken (registration_id NUMBER, test_result TEXT); CREATE TABLE Subjects (subject_id NUMBER, subject_name TEXT); CREATE TABLE Courses (course_id NUMBER, author_id NUMBER); CREATE TABLE Students (middle_name TEXT, family_name TEXT, personal_name TEXT, login_name TEXT, student_id NUMBER);"
      },
      {
        "question": "How many students have personal names that contain the word \"son\"?",
        "query": "SELECT count(*) FROM students WHERE personal_name LIKE \"%son%\"",
        "schema": "CREATE TABLE Student_Tests_Taken (registration_id NUMBER, test_result TEXT); CREATE TABLE Subjects (subject_id NUMBER, subject_name TEXT); CREATE TABLE Students (login_name TEXT, middle_name TEXT, student_id NUMBER, personal_name TEXT, family_name TEXT); CREATE TABLE Course_Authors_and_Tutors (author_id NUMBER); CREATE TABLE Student_Course_Enrolment (course_id NUMBER, student_id NUMBER, registration_id NUMBER); CREATE TABLE Courses (author_id NUMBER, course_id NUMBER);"
      }
    ],
    [
      {
        "question": "Tell me the number of tests with result \"Pass\".",
        "query": "SELECT count(*) FROM student_tests_taken WHERE test_result = \"Pass\"",
        "schema": "CREATE TABLE Student_Course_Enrolment (registration_id NUMBER, student_id NUMBER); CREATE TABLE Courses (course_id NUMBER); CREATE TABLE Subjects (subject_id NUMBER); CREATE TABLE Students (student_id NUMBER); CREATE TABLE Student_Tests_Taken (date_test_taken TIME, test_result TEXT, registration_id NUMBER);"
      },
      {
        "question": "Tell me the number of tests with result \"Fail\".",
        "query": "SELECT count(*) FROM student_tests_taken WHERE test_result = \"Fail\"",
        "schema": "CREATE TABLE Student_Tests_Taken (registration_id NUMBER, test_result TEXT, date_test_taken TIME); CREATE TABLE Subjects (subject_id NUMBER); CREATE TABLE Student_Course_Enrolment (registration_id NUMBER, student_id NUMBER); CREATE TABLE Students (student_id NUMBER); CREATE TABLE Courses (course_id NUMBER);"
      },
      {
        "question": "List each test result and its count in descending order of count.",
        "query": "SELECT test_result , count(*) FROM student_tests_taken GROUP BY test_result ORDER BY count(*) DESC",
        "schema": "CREATE TABLE Student_Tests_Taken (test_result TEXT, registration_id NUMBER, date_test_taken TIME); CREATE TABLE Courses (course_id NUMBER); CREATE TABLE Students (student_id NUMBER); CREATE TABLE Student_Course_Enrolment (student_id NUMBER, registration_id NUMBER); CREATE TABLE Subjects (subject_id NUMBER);"
      }
    ],
    [
      {
        "question": "Tell me the personal name of the course author that teaches the course with name \"advanced database\".",
        "query": "SELECT t1.personal_name FROM course_authors_and_tutors AS t1 JOIN courses AS t2 ON t1.author_id = t2.author_id WHERE t2.course_name = \"advanced database\"",
        "schema": "CREATE TABLE Courses (course_name TEXT, author_id NUMBER, course_id NUMBER); CREATE TABLE Students (student_id NUMBER, family_name TEXT, personal_name TEXT); CREATE TABLE Course_Authors_and_Tutors (personal_name TEXT, middle_name TEXT, author_tutor_ATB TEXT, author_id NUMBER, family_name TEXT);"
      },
      {
        "question": "Tell me the login name of the course author that teaches the course with name \"advanced database\".",
        "query": "SELECT t1.login_name FROM course_authors_and_tutors AS t1 JOIN courses AS t2 ON t1.author_id = t2.author_id WHERE t2.course_name = \"advanced database\"",
        "schema": "CREATE TABLE Students (personal_name TEXT, login_name TEXT, family_name TEXT, student_id NUMBER); CREATE TABLE Course_Authors_and_Tutors (middle_name TEXT, author_id NUMBER, login_name TEXT, family_name TEXT, author_tutor_ATB TEXT, personal_name TEXT); CREATE TABLE Courses (course_id NUMBER, course_name TEXT, author_id NUMBER);"
      }
    ],
    [
      {
        "question": "Tell me the personal name of the course author that teaches the course with name \"operating system\".",
        "query": "SELECT t1.personal_name FROM course_authors_and_tutors AS t1 JOIN courses AS t2 ON t1.author_id = t2.author_id WHERE t2.course_name = \"operating system\"",
        "schema": "CREATE TABLE Students (personal_name TEXT); CREATE TABLE Course_Authors_and_Tutors (middle_name TEXT, personal_name TEXT, author_tutor_ATB TEXT, author_id NUMBER, family_name TEXT); CREATE TABLE Courses (author_id NUMBER, course_name TEXT, course_id NUMBER);"
      },
      {
        "question": "How about his address?",
        "query": "SELECT t1.address_line_1 FROM course_authors_and_tutors AS t1 JOIN courses AS t2 ON t1.author_id = t2.author_id WHERE t2.course_name = \"operating system\"",
        "schema": "CREATE TABLE Courses (course_id NUMBER, course_name TEXT, author_id NUMBER); CREATE TABLE Students (personal_name TEXT); CREATE TABLE Course_Authors_and_Tutors (author_tutor_ATB TEXT, personal_name TEXT, middle_name TEXT, author_id NUMBER, family_name TEXT, address_line_1 TEXT);"
      },
      {
        "question": "Tel me the addresses of the course authors who teach the course with name \"operating system\" or \"data structure\"",
        "query": "SELECT t1.address_line_1 FROM course_authors_and_tutors AS t1 JOIN courses AS t2 ON t1.author_id = t2.author_id WHERE t2.course_name = \"operating system\" OR t2.course_name = \"data structure\"",
        "schema": "CREATE TABLE Courses (author_id NUMBER, course_name TEXT, course_id NUMBER); CREATE TABLE Course_Authors_and_Tutors (family_name TEXT, author_id NUMBER, address_line_1 TEXT, personal_name TEXT, author_tutor_ATB TEXT, middle_name TEXT); CREATE TABLE Students (personal_name TEXT);"
      }
    ],
    [
      {
        "question": "Tell me the personal name, family name, and author ID of the course author that teaches English.",
        "query": "SELECT t1.personal_name , t1.family_name , t2.author_id FROM course_authors_and_tutors AS t1 JOIN courses AS t2 ON t1.author_id = t2.author_id WHERE t2.course_name = \"English\"",
        "schema": "CREATE TABLE Students (family_name TEXT, personal_name TEXT); CREATE TABLE Courses (author_id NUMBER, course_name TEXT, course_id NUMBER); CREATE TABLE Course_Authors_and_Tutors (author_tutor_ATB TEXT, family_name TEXT, personal_name TEXT, author_id NUMBER, middle_name TEXT);"
      },
      {
        "question": "How about that of course French.",
        "query": "SELECT t1.personal_name , t1.family_name , t2.author_id FROM course_authors_and_tutors AS t1 JOIN courses AS t2 ON t1.author_id = t2.author_id WHERE t2.course_name = \"French\"",
        "schema": "CREATE TABLE Course_Authors_and_Tutors (author_id NUMBER, family_name TEXT, middle_name TEXT, personal_name TEXT, author_tutor_ATB TEXT); CREATE TABLE Students (personal_name TEXT, family_name TEXT); CREATE TABLE Courses (course_name TEXT, course_id NUMBER, author_id NUMBER);"
      },
      {
        "question": "Tell me the personal name, family name, and author ID of the course author that teaches the most courses.",
        "query": "SELECT t1.personal_name , t1.family_name , t2.author_id FROM course_authors_and_tutors AS t1 JOIN courses AS t2 ON t1.author_id = t2.author_id GROUP BY t2.author_id ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Students (family_name TEXT, personal_name TEXT); CREATE TABLE Course_Authors_and_Tutors (personal_name TEXT, middle_name TEXT, author_id NUMBER, author_tutor_ATB TEXT, family_name TEXT); CREATE TABLE Courses (author_id NUMBER, course_name TEXT, course_id NUMBER);"
      }
    ],
    [
      {
        "question": "Tell me Julio's address",
        "query": "SELECT address_line_1 FROM course_authors_and_tutors WHERE personal_name = \"Julio\"",
        "schema": "CREATE TABLE Course_Authors_and_Tutors (author_id NUMBER, personal_name TEXT, author_tutor_ATB TEXT, address_line_1 TEXT, middle_name TEXT, family_name TEXT); CREATE TABLE Courses (author_id NUMBER, subject_id NUMBER, course_name TEXT); CREATE TABLE Subjects (subject_name TEXT, subject_id NUMBER); CREATE TABLE Students (middle_name TEXT, family_name TEXT, personal_name TEXT, student_id NUMBER);"
      },
      {
        "question": "Tell me the number of courses that he teaches.",
        "query": "SELECT count(*) FROM course_authors_and_tutors AS t1 JOIN courses AS t2 ON t1.author_id = t2.author_id WHERE personal_name = \"Julio\"",
        "schema": "CREATE TABLE Subjects (subject_id NUMBER, subject_name TEXT); CREATE TABLE Students (student_id NUMBER, personal_name TEXT, middle_name TEXT, family_name TEXT); CREATE TABLE Course_Authors_and_Tutors (personal_name TEXT, author_tutor_ATB TEXT, middle_name TEXT, address_line_1 TEXT, author_id NUMBER, family_name TEXT); CREATE TABLE Courses (course_name TEXT, subject_id NUMBER, course_id NUMBER, author_id NUMBER);"
      },
      {
        "question": "Tell me the addresses and author IDs of the course authors that teach at least two courses.",
        "query": "SELECT t1.address_line_1 , t2.author_id FROM course_authors_and_tutors AS t1 JOIN courses AS t2 ON t1.author_id = t2.author_id GROUP BY t2.author_id HAVING count(*) >= 2",
        "schema": "CREATE TABLE Course_Authors_and_Tutors (author_id NUMBER, middle_name TEXT, address_line_1 TEXT, personal_name TEXT, family_name TEXT, author_tutor_ATB TEXT); CREATE TABLE Students (student_id NUMBER, middle_name TEXT, personal_name TEXT, family_name TEXT); CREATE TABLE Subjects (subject_id NUMBER, subject_name TEXT); CREATE TABLE Courses (author_id NUMBER, course_name TEXT, course_id NUMBER, subject_id NUMBER);"
      }
    ],
    [
      {
        "question": "Tell me Julio's address.",
        "query": "SELECT address_line_1 FROM course_authors_and_tutors WHERE personal_name = \"Julio\"",
        "schema": "CREATE TABLE Students (personal_name TEXT, family_name TEXT, student_id NUMBER); CREATE TABLE Subjects (subject_id NUMBER, subject_name TEXT); CREATE TABLE Course_Authors_and_Tutors (address_line_1 TEXT, author_id NUMBER, middle_name TEXT, personal_name TEXT, author_tutor_ATB TEXT, family_name TEXT); CREATE TABLE Courses (author_id NUMBER, subject_id NUMBER);"
      },
      {
        "question": "Tell me the number of courses that he teaches.",
        "query": "SELECT count(t2.course_name) FROM course_authors_and_tutors AS t1 JOIN courses AS t2 ON t1.author_id = t2.author_id WHERE t1.personal_name = \"Julio\"",
        "schema": "CREATE TABLE Course_Authors_and_Tutors (personal_name TEXT, author_id NUMBER, family_name TEXT, middle_name TEXT, author_tutor_ATB TEXT, address_line_1 TEXT); CREATE TABLE Courses (course_id NUMBER, subject_id NUMBER, course_name TEXT, author_id NUMBER); CREATE TABLE Students (personal_name TEXT, student_id NUMBER, family_name TEXT); CREATE TABLE Subjects (subject_name TEXT, subject_id NUMBER);"
      },
      {
        "question": "What are they?",
        "query": "SELECT t2.course_name FROM course_authors_and_tutors AS t1 JOIN courses AS t2 ON t1.author_id = t2.author_id WHERE t1.personal_name = \"Julio\"",
        "schema": "CREATE TABLE Courses (course_name TEXT, course_id NUMBER, author_id NUMBER, subject_id NUMBER); CREATE TABLE Course_Authors_and_Tutors (personal_name TEXT, author_id NUMBER, author_tutor_ATB TEXT, address_line_1 TEXT, middle_name TEXT, family_name TEXT); CREATE TABLE Subjects (subject_id NUMBER, subject_name TEXT); CREATE TABLE Students (family_name TEXT, personal_name TEXT, student_id NUMBER);"
      }
    ],
    [
      {
        "question": "Tell me the names and descriptions of courses that belong to the subject named \"Arts\".",
        "query": "SELECT t1.course_name , t1.course_description FROM courses AS t1 JOIN subjects AS t2 ON t1.subject_id = t2.subject_id WHERE t2.subject_name = \"Arts\"",
        "schema": "CREATE TABLE Courses (subject_id NUMBER, course_name TEXT, course_id NUMBER, course_description TEXT); CREATE TABLE Subjects (subject_id NUMBER, subject_name TEXT);"
      },
      {
        "question": "Tell me the names and descriptions of courses that belong to the subject named \"Language\".",
        "query": "SELECT t1.course_name , t1.course_description FROM courses AS t1 JOIN subjects AS t2 ON t1.subject_id = t2.subject_id WHERE t2.subject_name = \"Language\"",
        "schema": "CREATE TABLE Subjects (subject_name TEXT, subject_id NUMBER); CREATE TABLE Courses (course_name TEXT, course_id NUMBER, course_description TEXT, subject_id NUMBER);"
      },
      {
        "question": "Tell me the names and descriptions of courses that belong to the subject named \"Computer Science\".",
        "query": "SELECT t1.course_name , t1.course_description FROM courses AS t1 JOIN subjects AS t2 ON t1.subject_id = t2.subject_id WHERE t2.subject_name = \"Computer Science\"",
        "schema": "CREATE TABLE Courses (course_description TEXT, course_name TEXT, subject_id NUMBER, course_id NUMBER); CREATE TABLE Subjects (subject_id NUMBER, subject_name TEXT);"
      }
    ],
    [
      {
        "question": "Tell me the courses that belong to the subject named \"Computer Science\".",
        "query": "SELECT t1.course_name FROM courses AS t1 JOIN subjects AS t2 ON t1.subject_id = t2.subject_id WHERE t2.subject_name = \"Computer Science\"",
        "schema": "CREATE TABLE Courses (course_name TEXT, subject_id NUMBER, course_id NUMBER); CREATE TABLE Subjects (subject_id NUMBER, subject_name TEXT);"
      },
      {
        "question": "Tell me the courses that belong to the subject named \"Arts\".",
        "query": "SELECT t1.course_name FROM courses AS t1 JOIN subjects AS t2 ON t1.subject_id = t2.subject_id WHERE t2.subject_name = \"Arts\"",
        "schema": "CREATE TABLE Courses (course_name TEXT, course_id NUMBER, subject_id NUMBER); CREATE TABLE Subjects (subject_name TEXT, subject_id NUMBER);"
      },
      {
        "question": "Tell me the subject ID, subject name, and the corresponding number of available courses for each subject.",
        "query": "SELECT t1.subject_id , t2.subject_name , count(*) FROM courses AS t1 JOIN subjects AS t2 ON t1.subject_id = t2.subject_id GROUP BY t1.subject_id",
        "schema": "CREATE TABLE Courses (course_id NUMBER, course_name TEXT, subject_id NUMBER); CREATE TABLE Subjects (subject_name TEXT, subject_id NUMBER);"
      }
    ],
    [
      {
        "question": "Tell me the number of courses that belong to \"Language\".",
        "query": "SELECT count(t1.course_name) FROM courses AS t1 JOIN subjects AS t2 ON t1.subject_id = t2.subject_id WHERE t2.subject_name = \"Language\"",
        "schema": "CREATE TABLE Student_Course_Enrolment (course_id NUMBER); CREATE TABLE Subjects (subject_name TEXT, subject_id NUMBER); CREATE TABLE Courses (course_description TEXT, course_name TEXT, subject_id NUMBER, course_id NUMBER);"
      },
      {
        "question": "What are they?",
        "query": "SELECT t1.course_name FROM courses AS t1 JOIN subjects AS t2 ON t1.subject_id = t2.subject_id WHERE t2.subject_name = \"Language\"",
        "schema": "CREATE TABLE Courses (course_id NUMBER, course_description TEXT, subject_id NUMBER, course_name TEXT); CREATE TABLE Subjects (subject_name TEXT, subject_id NUMBER); CREATE TABLE Student_Course_Enrolment (course_id NUMBER);"
      },
      {
        "question": "Tell me the subject ID, name of subject and the corresponding number of courses for each subject, and sort by the course count in ascending order.",
        "query": "SELECT t1.subject_id , t2.subject_name , count(*) FROM courses AS t1 JOIN subjects AS t2 ON t1.subject_id = t2.subject_id GROUP BY t1.subject_id ORDER BY count(*) ASC",
        "schema": "CREATE TABLE Courses (subject_id NUMBER, course_description TEXT, course_name TEXT, course_id NUMBER); CREATE TABLE Subjects (subject_name TEXT, subject_id NUMBER); CREATE TABLE Student_Course_Enrolment (course_id NUMBER);"
      }
    ],
    [
      {
        "question": "What is the date of completion of the course named \"machine learning\"?",
        "query": "SELECT t2.date_of_completion FROM courses AS t1 JOIN student_course_enrolment AS t2 ON t1.course_id = t2.course_id WHERE t1.course_name = \"machine learning\"",
        "schema": "CREATE TABLE Students (student_id NUMBER); CREATE TABLE Student_Tests_Taken (date_test_taken TIME); CREATE TABLE Courses (course_description TEXT, course_name TEXT, subject_id NUMBER, course_id NUMBER); CREATE TABLE Student_Course_Enrolment (date_of_enrolment TIME, date_of_completion TIME, course_id NUMBER);"
      },
      {
        "question": "What is the date of enrollment of that course?",
        "query": "SELECT t2.date_of_enrolment FROM courses AS t1 JOIN student_course_enrolment AS t2 ON t1.course_id = t2.course_id WHERE t1.course_name = \"machine learning\"",
        "schema": "CREATE TABLE Students (student_id NUMBER); CREATE TABLE Student_Course_Enrolment (date_of_completion TIME, registration_id NUMBER, course_id NUMBER, student_id NUMBER, date_of_enrolment TIME); CREATE TABLE Student_Tests_Taken (date_test_taken TIME); CREATE TABLE Courses (course_id NUMBER, subject_id NUMBER, course_description TEXT, course_name TEXT);"
      },
      {
        "question": "So what is the date of enrollment of the course named \"Spanish\"?",
        "query": "SELECT t2.date_of_enrolment FROM courses AS t1 JOIN student_course_enrolment AS t2 ON t1.course_id = t2.course_id WHERE t1.course_name = \"Spanish\"",
        "schema": "CREATE TABLE Student_Tests_Taken (date_test_taken TIME); CREATE TABLE Students (student_id NUMBER); CREATE TABLE Courses (course_name TEXT, subject_id NUMBER, course_id NUMBER, course_description TEXT); CREATE TABLE Student_Course_Enrolment (course_id NUMBER, date_of_enrolment TIME, date_of_completion TIME, registration_id NUMBER, student_id NUMBER);"
      }
    ],
    [
      {
        "question": "How many students are enrolled in \"English\"?",
        "query": "SELECT count(*) FROM courses AS t1 JOIN student_course_enrolment AS t2 ON t1.course_id = t2.course_id WHERE t1.course_name = \"English\"",
        "schema": "CREATE TABLE Student_Tests_Taken (registration_id NUMBER, test_result TEXT); CREATE TABLE Courses (course_description TEXT, course_id NUMBER, subject_id NUMBER, course_name TEXT); CREATE TABLE Subjects (subject_name TEXT, subject_id NUMBER); CREATE TABLE Students (student_id NUMBER); CREATE TABLE Student_Course_Enrolment (student_id NUMBER, registration_id NUMBER, course_id NUMBER);"
      },
      {
        "question": "So what is the name of the course that has the least student enrollment?",
        "query": "SELECT t1.course_name FROM courses AS t1 JOIN student_course_enrolment AS t2 ON t1.course_id = t2.course_id GROUP BY t1.course_name ORDER BY count(*) ASC LIMIT 1",
        "schema": "CREATE TABLE Student_Tests_Taken (registration_id NUMBER, test_result TEXT); CREATE TABLE Student_Course_Enrolment (course_id NUMBER, student_id NUMBER, registration_id NUMBER); CREATE TABLE Subjects (subject_name TEXT, subject_id NUMBER); CREATE TABLE Courses (subject_id NUMBER, course_name TEXT, course_description TEXT, course_id NUMBER); CREATE TABLE Students (student_id NUMBER);"
      },
      {
        "question": "How about the course that has the most student enrollment?",
        "query": "SELECT t1.course_name FROM courses AS t1 JOIN student_course_enrolment AS t2 ON t1.course_id = t2.course_id GROUP BY t1.course_name ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Courses (course_description TEXT, course_name TEXT, subject_id NUMBER, course_id NUMBER); CREATE TABLE Students (student_id NUMBER); CREATE TABLE Student_Tests_Taken (registration_id NUMBER, test_result TEXT); CREATE TABLE Subjects (subject_name TEXT, subject_id NUMBER); CREATE TABLE Student_Course_Enrolment (course_id NUMBER, student_id NUMBER, registration_id NUMBER);"
      }
    ],
    [
      {
        "question": "How many students are enrolled in \"French\"?",
        "query": "SELECT count(*) FROM courses AS t1 JOIN student_course_enrolment AS t2 ON t1.course_id = t2.course_id WHERE t1.course_name = \"French\"",
        "schema": "CREATE TABLE Student_Tests_Taken (registration_id NUMBER); CREATE TABLE Subjects (subject_name TEXT, subject_id NUMBER); CREATE TABLE Student_Course_Enrolment (registration_id NUMBER, student_id NUMBER, course_id NUMBER); CREATE TABLE Students (student_id NUMBER); CREATE TABLE Courses (subject_id NUMBER, course_description TEXT, course_name TEXT, course_id NUMBER);"
      },
      {
        "question": "Okay, how many students are enrolled in \"AI\"?",
        "query": "SELECT count(*) FROM courses AS t1 JOIN student_course_enrolment AS t2 ON t1.course_id = t2.course_id WHERE t1.course_name = \"AI\"",
        "schema": "CREATE TABLE Student_Course_Enrolment (course_id NUMBER, registration_id NUMBER, student_id NUMBER); CREATE TABLE Students (student_id NUMBER); CREATE TABLE Student_Tests_Taken (registration_id NUMBER); CREATE TABLE Courses (course_id NUMBER, subject_id NUMBER, course_description TEXT, course_name TEXT); CREATE TABLE Subjects (subject_name TEXT, subject_id NUMBER);"
      },
      {
        "question": "So what are the names of the courses that have exactly 1 student enrollment?",
        "query": "SELECT t1.course_name FROM courses AS t1 JOIN student_course_enrolment AS t2 ON t1.course_id = t2.course_id GROUP BY t1.course_name HAVING count(*) = 1",
        "schema": "CREATE TABLE Student_Tests_Taken (registration_id NUMBER); CREATE TABLE Courses (course_id NUMBER, course_description TEXT, subject_id NUMBER, course_name TEXT); CREATE TABLE Subjects (subject_id NUMBER, subject_name TEXT); CREATE TABLE Student_Course_Enrolment (course_id NUMBER, registration_id NUMBER, student_id NUMBER); CREATE TABLE Students (student_id NUMBER);"
      }
    ],
    [
      {
        "question": "How many students are enrolled in \"AI\"?",
        "query": "SELECT count(*) FROM courses AS t1 JOIN student_course_enrolment AS t2 ON t1.course_id = t2.course_id WHERE t1.course_name = \"AI\"",
        "schema": "CREATE TABLE Subjects (subject_id NUMBER); CREATE TABLE Student_Tests_Taken (registration_id NUMBER, test_result TEXT); CREATE TABLE Students (student_id NUMBER); CREATE TABLE Courses (course_name TEXT, course_id NUMBER, subject_id NUMBER); CREATE TABLE Student_Course_Enrolment (student_id NUMBER, registration_id NUMBER, course_id NUMBER);"
      },
      {
        "question": "Okay. Tell me the names of the courses that have student enrollment bigger than 5?",
        "query": "SELECT t1.course_name FROM courses AS t1 JOIN student_course_enrolment AS t2 ON t1.course_id = t2.course_id GROUP BY t1.course_name HAVING count(*) > 5",
        "schema": "CREATE TABLE Subjects (subject_id NUMBER); CREATE TABLE Students (student_id NUMBER); CREATE TABLE Courses (subject_id NUMBER, course_name TEXT, course_id NUMBER); CREATE TABLE Student_Tests_Taken (registration_id NUMBER, test_result TEXT); CREATE TABLE Student_Course_Enrolment (student_id NUMBER, registration_id NUMBER, course_id NUMBER);"
      },
      {
        "question": "What are the descriptions and names of the courses that have student enrollment bigger than 2?",
        "query": "SELECT t1.course_description , t1.course_name FROM courses AS t1 JOIN student_course_enrolment AS t2 ON t1.course_id = t2.course_id GROUP BY t1.course_name HAVING count(*) > 2",
        "schema": "CREATE TABLE Subjects (subject_id NUMBER); CREATE TABLE Students (student_id NUMBER); CREATE TABLE Student_Course_Enrolment (course_id NUMBER, student_id NUMBER, registration_id NUMBER); CREATE TABLE Student_Tests_Taken (test_result TEXT, registration_id NUMBER); CREATE TABLE Courses (course_id NUMBER, course_name TEXT, subject_id NUMBER, course_description TEXT);"
      }
    ],
    [
      {
        "question": "How many students are there?",
        "query": "SELECT count(*) FROM students",
        "schema": "CREATE TABLE Student_Course_Enrolment (registration_id NUMBER, student_id NUMBER, course_id NUMBER); CREATE TABLE Student_Tests_Taken (registration_id NUMBER, test_result TEXT); CREATE TABLE Courses (course_id NUMBER); CREATE TABLE Students (login_name TEXT, family_name TEXT, middle_name TEXT, student_id NUMBER, personal_name TEXT); CREATE TABLE Course_Authors_and_Tutors (author_id NUMBER); CREATE TABLE Subjects (subject_id NUMBER, subject_name TEXT);"
      },
      {
        "question": "How many courses are there?",
        "query": "SELECT count(*) FROM courses",
        "schema": "CREATE TABLE Students (login_name TEXT, student_id NUMBER, family_name TEXT, personal_name TEXT, middle_name TEXT); CREATE TABLE Student_Course_Enrolment (course_id NUMBER, registration_id NUMBER, student_id NUMBER); CREATE TABLE Student_Tests_Taken (registration_id NUMBER, test_result TEXT); CREATE TABLE Subjects (subject_name TEXT, subject_id NUMBER); CREATE TABLE Course_Authors_and_Tutors (author_id NUMBER); CREATE TABLE Courses (course_id NUMBER, course_description TEXT, subject_id NUMBER, course_name TEXT);"
      },
      {
        "question": "What is the name of each course and the corresponding number of student enrollment?",
        "query": "SELECT t1.course_name , count(*) FROM courses AS t1 JOIN student_course_enrolment AS t2 ON t1.course_id = t2.course_id GROUP BY t1.course_name",
        "schema": "CREATE TABLE Course_Authors_and_Tutors (author_id NUMBER); CREATE TABLE Subjects (subject_id NUMBER, subject_name TEXT); CREATE TABLE Student_Course_Enrolment (course_id NUMBER, registration_id NUMBER, student_id NUMBER); CREATE TABLE Student_Tests_Taken (registration_id NUMBER, test_result TEXT); CREATE TABLE Courses (course_id NUMBER, subject_id NUMBER, course_name TEXT, course_description TEXT); CREATE TABLE Students (personal_name TEXT, middle_name TEXT, login_name TEXT, family_name TEXT, student_id NUMBER);"
      }
    ],
    [
      {
        "question": "What are the dates of all the tests that have the result \"Fail\"?",
        "query": "SELECT date_test_taken FROM student_tests_taken WHERE test_result = \"Fail\"",
        "schema": "CREATE TABLE Courses (course_id NUMBER); CREATE TABLE Students (date_of_registration TIME, student_id NUMBER); CREATE TABLE Student_Tests_Taken (date_test_taken TIME, test_result TEXT, registration_id NUMBER); CREATE TABLE Student_Course_Enrolment (date_of_enrolment TIME, registration_id NUMBER);"
      },
      {
        "question": "How about that of all the tests that have the result \"Pass\"?",
        "query": "SELECT date_test_taken FROM student_tests_taken WHERE test_result = \"Pass\"",
        "schema": "CREATE TABLE Courses (course_id NUMBER); CREATE TABLE Student_Tests_Taken (registration_id NUMBER, test_result TEXT, date_test_taken TIME); CREATE TABLE Student_Course_Enrolment (registration_id NUMBER, date_of_enrolment TIME); CREATE TABLE Students (student_id NUMBER, date_of_registration TIME);"
      },
      {
        "question": "So what are the enrollment dates of all the tests that have the result \"Pass\"?",
        "query": "SELECT t1.date_of_enrolment FROM student_course_enrolment AS t1 JOIN student_tests_taken AS t2 ON t1.registration_id = t2.registration_id WHERE t2.test_result = \"Pass\"",
        "schema": "CREATE TABLE Student_Tests_Taken (test_result TEXT, date_test_taken TIME, registration_id NUMBER); CREATE TABLE Courses (course_id NUMBER); CREATE TABLE Student_Course_Enrolment (course_id NUMBER, date_of_completion TIME, registration_id NUMBER, student_id NUMBER, date_of_enrolment TIME); CREATE TABLE Students (date_of_registration TIME, student_id NUMBER);"
      }
    ],
    [
      {
        "question": "How many tests have result \"Fail\"?",
        "query": "SELECT count(*) FROM student_tests_taken WHERE test_result = \"Fail\"",
        "schema": "CREATE TABLE Courses (course_id NUMBER); CREATE TABLE Student_Course_Enrolment (student_id NUMBER, registration_id NUMBER); CREATE TABLE Students (student_id NUMBER); CREATE TABLE Student_Tests_Taken (date_test_taken TIME, registration_id NUMBER, test_result TEXT); CREATE TABLE Subjects (subject_id NUMBER);"
      },
      {
        "question": "What are the dates of those tests?",
        "query": "SELECT date_test_taken FROM student_tests_taken WHERE test_result = \"Fail\"",
        "schema": "CREATE TABLE Students (date_of_registration TIME, student_id NUMBER); CREATE TABLE Student_Tests_Taken (registration_id NUMBER, date_test_taken TIME, test_result TEXT); CREATE TABLE Subjects (subject_id NUMBER); CREATE TABLE Student_Course_Enrolment (student_id NUMBER, registration_id NUMBER); CREATE TABLE Courses (course_id NUMBER);"
      },
      {
        "question": "What are the completion dates of all the tests that have result \"Fail\"?",
        "query": "SELECT t1.date_of_completion FROM student_course_enrolment AS t1 JOIN student_tests_taken AS t2 ON t1.registration_id = t2.registration_id WHERE t2.test_result = \"Fail\"",
        "schema": "CREATE TABLE Subjects (subject_id NUMBER); CREATE TABLE Students (student_id NUMBER, date_of_registration TIME); CREATE TABLE Courses (course_id NUMBER); CREATE TABLE Student_Course_Enrolment (date_of_completion TIME, registration_id NUMBER, student_id NUMBER); CREATE TABLE Student_Tests_Taken (test_result TEXT, registration_id NUMBER, date_test_taken TIME);"
      }
    ],
    [
      {
        "question": "Tell me Karson's registration date.",
        "query": "SELECT date_of_registration FROM students WHERE personal_name = \"Karson\"",
        "schema": "CREATE TABLE Subjects (subject_id NUMBER, subject_name TEXT); CREATE TABLE Student_Course_Enrolment (date_of_enrolment TIME, course_id NUMBER, student_id NUMBER, registration_id NUMBER); CREATE TABLE Courses (subject_id NUMBER, author_id NUMBER, course_id NUMBER); CREATE TABLE Students (student_id NUMBER, login_name TEXT, middle_name TEXT, personal_name TEXT, family_name TEXT, date_of_registration TIME); CREATE TABLE Course_Authors_and_Tutors (middle_name TEXT, author_tutor_ATB TEXT, author_id NUMBER, personal_name TEXT, family_name TEXT, login_name TEXT); CREATE TABLE Student_Tests_Taken (registration_id NUMBER, date_test_taken TIME);"
      },
      {
        "question": "When is his enrollment?",
        "query": "SELECT t1.date_of_enrolment FROM student_course_enrolment AS t1 JOIN students AS t2 ON t1.student_id = t2.student_id WHERE t2.personal_name = \"Karson\"",
        "schema": "CREATE TABLE Student_Course_Enrolment (date_of_enrolment TIME, date_of_completion TIME, course_id NUMBER, registration_id NUMBER, student_id NUMBER); CREATE TABLE Course_Authors_and_Tutors (family_name TEXT, personal_name TEXT, middle_name TEXT, author_id NUMBER, login_name TEXT, author_tutor_ATB TEXT); CREATE TABLE Courses (course_id NUMBER, subject_id NUMBER, author_id NUMBER); CREATE TABLE Subjects (subject_name TEXT, subject_id NUMBER); CREATE TABLE Student_Tests_Taken (registration_id NUMBER, date_test_taken TIME); CREATE TABLE Students (login_name TEXT, family_name TEXT, middle_name TEXT, date_of_latest_logon TIME, date_of_registration TIME, personal_name TEXT, student_id NUMBER);"
      },
      {
        "question": "When is his completion?",
        "query": "SELECT t1.date_of_completion FROM student_course_enrolment AS t1 JOIN students AS t2 ON t1.student_id = t2.student_id WHERE t2.personal_name = \"Karson\"",
        "schema": "CREATE TABLE Course_Authors_and_Tutors (author_id NUMBER, personal_name TEXT, middle_name TEXT, author_tutor_ATB TEXT, family_name TEXT, login_name TEXT); CREATE TABLE Courses (author_id NUMBER, subject_id NUMBER, course_id NUMBER); CREATE TABLE Student_Course_Enrolment (course_id NUMBER, date_of_enrolment TIME, date_of_completion TIME, registration_id NUMBER, student_id NUMBER); CREATE TABLE Subjects (subject_name TEXT, subject_id NUMBER); CREATE TABLE Students (personal_name TEXT, date_of_latest_logon TIME, student_id NUMBER, date_of_registration TIME, login_name TEXT, family_name TEXT, middle_name TEXT); CREATE TABLE Student_Tests_Taken (registration_id NUMBER, date_test_taken TIME);"
      }
    ],
    [
      {
        "question": "Tell me Krystel's date of registration.",
        "query": "SELECT date_of_registration FROM students WHERE personal_name = \"Krystel\"",
        "schema": "CREATE TABLE Course_Authors_and_Tutors (middle_name TEXT, personal_name TEXT, family_name TEXT, author_id NUMBER); CREATE TABLE Subjects (subject_id NUMBER, subject_name TEXT); CREATE TABLE Courses (author_id NUMBER); CREATE TABLE Student_Tests_Taken (date_test_taken TIME, registration_id NUMBER); CREATE TABLE Students (date_of_latest_logon TIME, personal_name TEXT, middle_name TEXT, family_name TEXT, student_id NUMBER, date_of_registration TIME); CREATE TABLE Student_Course_Enrolment (date_of_enrolment TIME, registration_id NUMBER, student_id NUMBER);"
      },
      {
        "question": "How about her dates of enrollment and completion?",
        "query": "SELECT t1.date_of_enrolment , t1.date_of_completion FROM student_course_enrolment AS t1 JOIN students AS t2 ON t1.student_id = t2.student_id WHERE t2.personal_name = \"Krystel\"",
        "schema": "CREATE TABLE Courses (author_id NUMBER); CREATE TABLE Course_Authors_and_Tutors (family_name TEXT, middle_name TEXT, author_id NUMBER, personal_name TEXT); CREATE TABLE Subjects (subject_name TEXT, subject_id NUMBER); CREATE TABLE Student_Tests_Taken (registration_id NUMBER, date_test_taken TIME); CREATE TABLE Student_Course_Enrolment (date_of_completion TIME, date_of_enrolment TIME, student_id NUMBER, registration_id NUMBER, course_id NUMBER); CREATE TABLE Students (date_of_latest_logon TIME, family_name TEXT, student_id NUMBER, personal_name TEXT, middle_name TEXT, date_of_registration TIME);"
      },
      {
        "question": "How about the dates of enrollment and completion of the student with family name \"Zieme\" and personal name \"Bernie\"?",
        "query": "SELECT t1.date_of_enrolment , t1.date_of_completion FROM student_course_enrolment AS t1 JOIN students AS t2 ON t1.student_id = t2.student_id WHERE t2.family_name = \"Zieme\" AND t2.personal_name = \"Bernie\"",
        "schema": "CREATE TABLE Course_Authors_and_Tutors (personal_name TEXT, family_name TEXT, author_id NUMBER, middle_name TEXT); CREATE TABLE Subjects (subject_name TEXT, subject_id NUMBER); CREATE TABLE Students (date_of_registration TIME, middle_name TEXT, personal_name TEXT, date_of_latest_logon TIME, student_id NUMBER, family_name TEXT); CREATE TABLE Student_Tests_Taken (registration_id NUMBER, date_test_taken TIME); CREATE TABLE Student_Course_Enrolment (registration_id NUMBER, student_id NUMBER, course_id NUMBER, date_of_enrolment TIME, date_of_completion TIME); CREATE TABLE Courses (author_id NUMBER);"
      }
    ],
    [
      {
        "question": "Tell me how many course enrollments there are?",
        "query": "SELECT count(*) FROM student_course_enrolment",
        "schema": "CREATE TABLE Student_Course_Enrolment (student_id NUMBER, date_of_enrolment TIME, course_id NUMBER, registration_id NUMBER, date_of_completion TIME); CREATE TABLE Courses (course_id NUMBER, course_name TEXT); CREATE TABLE Students (student_id NUMBER);"
      },
      {
        "question": "Tell me how many there are for the student named Jewel?",
        "query": "SELECT count(*) FROM student_course_enrolment AS t1 JOIN students AS t2 ON t1.student_id = t2.student_id WHERE t2.personal_name = \"Jewel\"",
        "schema": "CREATE TABLE Courses (course_name TEXT, course_id NUMBER); CREATE TABLE Students (personal_name TEXT, student_id NUMBER, family_name TEXT, middle_name TEXT); CREATE TABLE Student_Course_Enrolment (registration_id NUMBER, date_of_completion TIME, date_of_enrolment TIME, student_id NUMBER, course_id NUMBER);"
      },
      {
        "question": "Tell me the student ID and login name of the student with the most course enrollments.",
        "query": "SELECT t1.student_id , t2.login_name FROM student_course_enrolment AS t1 JOIN students AS t2 ON t1.student_id = t2.student_id GROUP BY t1.student_id ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Student_Course_Enrolment (registration_id NUMBER, course_id NUMBER, student_id NUMBER, date_of_completion TIME, date_of_enrolment TIME); CREATE TABLE Courses (course_id NUMBER, course_name TEXT); CREATE TABLE Students (student_id NUMBER, family_name TEXT, login_name TEXT, middle_name TEXT, personal_name TEXT);"
      }
    ],
    [
      {
        "question": "How many students are enrolled in \"AI\"?",
        "query": "SELECT count(*) FROM courses AS t1 JOIN student_course_enrolment AS t2 ON t1.course_id = t2.course_id WHERE t1.course_name = \"AI\"",
        "schema": "CREATE TABLE Students (student_id NUMBER); CREATE TABLE Student_Tests_Taken (test_result TEXT, registration_id NUMBER); CREATE TABLE Subjects (subject_id NUMBER); CREATE TABLE Student_Course_Enrolment (student_id NUMBER, registration_id NUMBER, course_id NUMBER); CREATE TABLE Courses (course_id NUMBER, course_name TEXT, subject_id NUMBER);"
      },
      {
        "question": "Tell me the names of the courses that have student enrollment bigger than 5.",
        "query": "SELECT t1.course_name FROM courses AS t1 JOIN student_course_enrolment AS t2 ON t1.course_id = t2.course_id GROUP BY t1.course_name HAVING count(*) > 2",
        "schema": "CREATE TABLE Students (student_id NUMBER); CREATE TABLE Student_Course_Enrolment (course_id NUMBER, student_id NUMBER, registration_id NUMBER); CREATE TABLE Student_Tests_Taken (test_result TEXT, registration_id NUMBER); CREATE TABLE Subjects (subject_id NUMBER); CREATE TABLE Courses (subject_id NUMBER, course_id NUMBER, course_name TEXT);"
      },
      {
        "question": "What are the student ID and personal name of the student with at least two enrollments?",
        "query": "SELECT t1.student_id , t2.personal_name FROM student_course_enrolment AS t1 JOIN students AS t2 ON t1.student_id = t2.student_id GROUP BY t1.student_id HAVING count(*) >= 2",
        "schema": "CREATE TABLE Courses (course_id NUMBER, course_name TEXT, subject_id NUMBER); CREATE TABLE Student_Tests_Taken (registration_id NUMBER, test_result TEXT); CREATE TABLE Students (family_name TEXT, student_id NUMBER, personal_name TEXT); CREATE TABLE Subjects (subject_id NUMBER); CREATE TABLE Student_Course_Enrolment (student_id NUMBER, course_id NUMBER, registration_id NUMBER);"
      }
    ],
    [
      {
        "question": "Tell me all the enrollment information for the student with personal name \"Else\".",
        "query": "SELECT * FROM student_course_enrolment AS t1 JOIN students AS t2 ON t1.student_id = t2.student_id WHERE t2.personal_name = \"Else\"",
        "schema": "CREATE TABLE Student_Course_Enrolment (course_id NUMBER, registration_id NUMBER, student_id NUMBER); CREATE TABLE Courses (course_id NUMBER); CREATE TABLE Students (family_name TEXT, student_id NUMBER, personal_name TEXT, middle_name TEXT);"
      },
      {
        "question": "How about that for the personal name \"Wilson\"?",
        "query": "SELECT * FROM student_course_enrolment AS t1 JOIN students AS t2 ON t1.student_id = t2.student_id WHERE t2.personal_name = \"Wilson\"",
        "schema": "CREATE TABLE Courses (course_id NUMBER); CREATE TABLE Students (student_id NUMBER, personal_name TEXT, middle_name TEXT, family_name TEXT); CREATE TABLE Student_Course_Enrolment (course_id NUMBER, registration_id NUMBER, student_id NUMBER);"
      },
      {
        "question": "Tell me the student ID and middle name for all the students with at most two enrollments.",
        "query": "SELECT t1.student_id , t2.middle_name FROM student_course_enrolment AS t1 JOIN students AS t2 ON t1.student_id = t2.student_id GROUP BY t1.student_id HAVING count(*) <= 2",
        "schema": "CREATE TABLE Students (family_name TEXT, middle_name TEXT, student_id NUMBER, personal_name TEXT); CREATE TABLE Student_Course_Enrolment (student_id NUMBER, registration_id NUMBER, course_id NUMBER); CREATE TABLE Courses (course_id NUMBER);"
      }
    ],
    [
      {
        "question": "Tell me the course description of the course named \"database\".",
        "query": "SELECT course_description FROM courses WHERE course_name = \"database\"",
        "schema": "CREATE TABLE Students (student_id NUMBER); CREATE TABLE Courses (course_name TEXT, course_id NUMBER, course_description TEXT);"
      },
      {
        "question": "Tell me the number of students enrolled in this course.",
        "query": "SELECT t1.course_name , count(*) FROM courses AS t1 JOIN student_course_enrolment AS t2 ON t1.course_id = t2.course_id GROUP BY t1.course_name WHERE t1.course_name = \"database\"",
        "schema": "CREATE TABLE Student_Course_Enrolment (student_id NUMBER, registration_id NUMBER, course_id NUMBER); CREATE TABLE Students (student_id NUMBER); CREATE TABLE Courses (course_id NUMBER, course_name TEXT, course_description TEXT);"
      },
      {
        "question": "Tell me the personal names of students that not enrolled in any course.",
        "query": "SELECT personal_name FROM students EXCEPT SELECT t1.personal_name FROM students AS t1 JOIN student_course_enrolment AS t2 ON t1.student_id = t2.student_id",
        "schema": "CREATE TABLE Students (middle_name TEXT, student_id NUMBER, family_name TEXT, personal_name TEXT); CREATE TABLE Student_Course_Enrolment (student_id NUMBER, course_id NUMBER, registration_id NUMBER); CREATE TABLE Courses (course_id NUMBER, course_name TEXT, course_description TEXT);"
      }
    ],
    [
      {
        "question": "Tell me the course description of the course named art history.",
        "query": "SELECT course_description FROM courses WHERE course_name = \"Art history\"",
        "schema": "CREATE TABLE Subjects (subject_name TEXT); CREATE TABLE Courses (subject_id NUMBER, course_description TEXT, course_name TEXT, course_id NUMBER);"
      },
      {
        "question": "Tell me the number of students enrolling this course.",
        "query": "SELECT t1.course_name , count(*) FROM courses AS t1 JOIN student_course_enrolment AS t2 ON t1.course_id = t2.course_id GROUP BY t1.course_name WHERE t1.course_name = \"Art history\"",
        "schema": "CREATE TABLE Student_Course_Enrolment (registration_id NUMBER, course_id NUMBER, student_id NUMBER); CREATE TABLE Students (student_id NUMBER); CREATE TABLE Subjects (subject_name TEXT); CREATE TABLE Courses (subject_id NUMBER, course_name TEXT, course_id NUMBER, course_description TEXT);"
      },
      {
        "question": "How many students did not have any course enrollment?",
        "query": "SELECT count(*) FROM students WHERE student_id NOT IN (SELECT student_id FROM student_course_enrolment)",
        "schema": "CREATE TABLE Students (student_id NUMBER); CREATE TABLE Courses (subject_id NUMBER, course_name TEXT, course_id NUMBER, course_description TEXT); CREATE TABLE Subjects (subject_name TEXT); CREATE TABLE Student_Course_Enrolment (registration_id NUMBER, student_id NUMBER, course_id NUMBER);"
      }
    ],
    [
      {
        "question": "Tell me Cary's login name.",
        "query": "SELECT login_name FROM students WHERE personal_name = \"Cary\"",
        "schema": "CREATE TABLE Subjects (subject_name TEXT, subject_id NUMBER); CREATE TABLE Course_Authors_and_Tutors (author_id NUMBER, author_tutor_ATB TEXT, family_name TEXT, login_name TEXT, personal_name TEXT); CREATE TABLE Students (personal_name TEXT, student_id NUMBER, family_name TEXT, login_name TEXT, middle_name TEXT); CREATE TABLE Courses (author_id NUMBER);"
      },
      {
        "question": "How about Autumn's login name.",
        "query": "SELECT login_name FROM students WHERE personal_name = \"Autumn\"",
        "schema": "CREATE TABLE Subjects (subject_id NUMBER, subject_name TEXT); CREATE TABLE Courses (author_id NUMBER); CREATE TABLE Students (login_name TEXT, family_name TEXT, student_id NUMBER, personal_name TEXT, middle_name TEXT); CREATE TABLE Course_Authors_and_Tutors (family_name TEXT, personal_name TEXT, author_tutor_ATB TEXT, login_name TEXT, author_id NUMBER);"
      },
      {
        "question": "Tell me the common login name of course authors and students.",
        "query": "SELECT login_name FROM course_authors_and_tutors INTERSECT SELECT login_name FROM students",
        "schema": "CREATE TABLE Courses (course_name TEXT, author_id NUMBER); CREATE TABLE Subjects (subject_name TEXT, subject_id NUMBER); CREATE TABLE Course_Authors_and_Tutors (personal_name TEXT, login_name TEXT, family_name TEXT, author_tutor_ATB TEXT, author_id NUMBER); CREATE TABLE Students (login_name TEXT, personal_name TEXT, student_id NUMBER, family_name TEXT, middle_name TEXT);"
      }
    ]
  ],
  "sports_competition": [
    [
      {
        "question": "List all the information about the club ranks.",
        "query": "SELECT * FROM club_rank",
        "schema": "CREATE TABLE competition_result (Club_ID_1 NUMBER); CREATE TABLE player (Player_ID NUMBER, Club_ID NUMBER); CREATE TABLE club (Club_ID NUMBER, name TEXT); CREATE TABLE club_rank (Total NUMBER, Club_ID NUMBER, Gold NUMBER, Silver NUMBER, Bronze NUMBER, Rank NUMBER);"
      },
      {
        "question": "What is the average number of gold medals?",
        "query": "SELECT avg(gold) FROM club_rank",
        "schema": "CREATE TABLE club (name TEXT, Club_ID NUMBER); CREATE TABLE competition_result (Club_ID_1 NUMBER, Score TEXT); CREATE TABLE club_rank (Gold NUMBER, Total NUMBER, Bronze NUMBER, Silver NUMBER, Rank NUMBER, Club_ID NUMBER); CREATE TABLE player (Club_ID NUMBER, Player_ID NUMBER, Points NUMBER);"
      },
      {
        "question": "What about silver medals?",
        "query": "SELECT avg(silver) FROM club_rank",
        "schema": "CREATE TABLE competition_result (Club_ID_1 NUMBER, Score TEXT); CREATE TABLE club (Club_ID NUMBER, name TEXT); CREATE TABLE club_rank (Bronze NUMBER, Rank NUMBER, Club_ID NUMBER, Silver NUMBER, Gold NUMBER, Total NUMBER); CREATE TABLE player (Club_ID NUMBER, Player_ID NUMBER, Points NUMBER);"
      },
      {
        "question": "What about the maximum and minimum number of silver medals?",
        "query": "SELECT max(silver) , min(silver) FROM club_rank",
        "schema": "CREATE TABLE club (Club_ID NUMBER, name TEXT); CREATE TABLE club_rank (Bronze NUMBER, Total NUMBER, Silver NUMBER, Rank NUMBER, Gold NUMBER, Club_ID NUMBER); CREATE TABLE competition_result (Score TEXT, Club_ID_1 NUMBER); CREATE TABLE player (Club_ID NUMBER, Points NUMBER, Player_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What are the club names for each player?",
        "query": "SELECT t1.name, t2.name FROM club AS t1 JOIN player AS t2 ON t1.club_id = t2.club_id",
        "schema": "CREATE TABLE player (Player_ID NUMBER, Club_ID NUMBER, name TEXT); CREATE TABLE club_rank (Club_ID NUMBER); CREATE TABLE club (name TEXT, Club_ID NUMBER); CREATE TABLE competition_result (Club_ID_1 NUMBER);"
      },
      {
        "question": "How many players are there in each club?",
        "query": "SELECT t1.name, count(*) FROM club AS t1 JOIN player AS t2 ON t1.club_id = t2.club_id GROUP BY t1.name",
        "schema": "CREATE TABLE club_rank (Club_ID NUMBER); CREATE TABLE player (Player_ID NUMBER, Club_ID NUMBER, name TEXT); CREATE TABLE club (name TEXT, Club_ID NUMBER); CREATE TABLE competition_result (Club_ID_1 NUMBER);"
      },
      {
        "question": "Which clubs have players who are the position of \"Right Wing\".",
        "query": "SELECT t1.name FROM club AS t1 JOIN player AS t2 ON t1.club_id = t2.club_id WHERE t2.position = \"Right Wing\"",
        "schema": "CREATE TABLE competition_result (Club_ID_1 NUMBER); CREATE TABLE player (Player_ID NUMBER, Club_ID NUMBER, Position TEXT, name TEXT); CREATE TABLE club_rank (Club_ID NUMBER); CREATE TABLE club (name TEXT, Club_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What are the club names and points for each player?",
        "query": "SELECT t1.name,t2.points,t2.name FROM club AS t1 JOIN player AS t2 ON t1.club_id = t2.club_id",
        "schema": "CREATE TABLE club (Club_ID NUMBER, name TEXT); CREATE TABLE competition_result (Club_ID_1 NUMBER, Club_ID_2 NUMBER); CREATE TABLE club_rank (Total NUMBER, Club_ID NUMBER); CREATE TABLE player (name TEXT, Club_ID NUMBER, Player_ID NUMBER, Points NUMBER);"
      },
      {
        "question": "What is the average points for all of them?",
        "query": "SELECT avg(t2.points) FROM club AS t1 JOIN player AS t2 ON t1.club_id = t2.club_id",
        "schema": "CREATE TABLE player (Club_ID NUMBER, Player_ID NUMBER, Points NUMBER, name TEXT); CREATE TABLE club (Club_ID NUMBER, name TEXT); CREATE TABLE club_rank (Total NUMBER, Club_ID NUMBER); CREATE TABLE competition_result (Club_ID_1 NUMBER, Club_ID_2 NUMBER);"
      },
      {
        "question": "What about that of the club 'BK Slide'?",
        "query": "SELECT avg(t2.points) FROM club AS t1 JOIN player AS t2 ON t1.club_id = t2.club_id WHERE t1.name = \"BK Slide\"",
        "schema": "CREATE TABLE club_rank (Total NUMBER, Club_ID NUMBER); CREATE TABLE competition_result (Club_ID_2 NUMBER, Club_ID_1 NUMBER); CREATE TABLE player (Club_ID NUMBER, name TEXT, Player_ID NUMBER, Points NUMBER); CREATE TABLE club (Club_ID NUMBER, name TEXT);"
      },
      {
        "question": "What about club 'AIB'?",
        "query": "SELECT avg(t2.points) FROM club AS t1 JOIN player AS t2 ON t1.club_id = t2.club_id WHERE t1.name = \"AIB\"",
        "schema": "CREATE TABLE competition_result (Club_ID_2 NUMBER, Club_ID_1 NUMBER); CREATE TABLE club (Club_ID NUMBER, name TEXT); CREATE TABLE player (Club_ID NUMBER, Points NUMBER, Player_ID NUMBER, name TEXT); CREATE TABLE club_rank (Club_ID NUMBER, Total NUMBER);"
      }
    ],
    [
      {
        "question": "Show all the positions of the players.",
        "query": "SELECT POSITION FROM player",
        "schema": "CREATE TABLE player (Points NUMBER, name TEXT, Position TEXT, Player_ID NUMBER);"
      },
      {
        "question": "How many unique positions are there?",
        "query": "SELECT COUNT (DISTINCT POSITION) FROM player",
        "schema": "CREATE TABLE player (Points NUMBER, Position TEXT, Player_ID NUMBER, name TEXT);"
      },
      {
        "question": "How many players are there for each of them?",
        "query": "SELECT POSITION, COUNT (*) FROM player GROUP BY POSITION",
        "schema": "CREATE TABLE player (name TEXT, Position TEXT, Points NUMBER, Player_ID NUMBER);"
      },
      {
        "question": "What is the average points of all players?",
        "query": "SELECT avg(points) FROM player",
        "schema": "CREATE TABLE player (Player_ID NUMBER, name TEXT, Points NUMBER, Position TEXT);"
      },
      {
        "question": "What are the positions of the players with average number of points scored by players of that position bigger than 20?",
        "query": "SELECT POSITION FROM player GROUP BY name HAVING avg(points) >= 20",
        "schema": "CREATE TABLE player (Position TEXT, name TEXT, Player_ID NUMBER, Points NUMBER);"
      }
    ],
    [
      {
        "question": "How many unique competition types are there?",
        "query": "SELECT COUNT (DISTINCT competition_type) FROM competition",
        "schema": "CREATE TABLE competition (Competition_type TEXT, Competition_ID NUMBER); CREATE TABLE club (Club_ID NUMBER); CREATE TABLE player (Player_ID NUMBER); CREATE TABLE competition_result (Competition_ID NUMBER);"
      },
      {
        "question": "How many competitions are there for each type?",
        "query": "SELECT competition_type, count(*) FROM competition GROUP BY competition_type",
        "schema": "CREATE TABLE player (Player_ID NUMBER); CREATE TABLE competition_result (Competition_ID NUMBER); CREATE TABLE club (Club_ID NUMBER); CREATE TABLE competition (Competition_ID NUMBER, Competition_type TEXT);"
      },
      {
        "question": "Among those results, which one is the most common one?",
        "query": "SELECT competition_type FROM competition GROUP BY competition_type ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE club (Club_ID NUMBER); CREATE TABLE competition_result (Competition_ID NUMBER); CREATE TABLE competition (Competition_type TEXT, Competition_ID NUMBER); CREATE TABLE player (Player_ID NUMBER);"
      }
    ],
    [
      {
        "question": "How many unique competition types are there?",
        "query": "SELECT COUNT (DISTINCT competition_type) FROM competition",
        "schema": "CREATE TABLE player (Player_ID NUMBER); CREATE TABLE club (Club_ID NUMBER); CREATE TABLE competition (Competition_type TEXT, Competition_ID NUMBER);"
      },
      {
        "question": "How many competitions are there for each type?",
        "query": "SELECT competition_type, count(*) FROM competition GROUP BY competition_type",
        "schema": "CREATE TABLE competition (Competition_type TEXT, Competition_ID NUMBER); CREATE TABLE player (Player_ID NUMBER); CREATE TABLE club (Club_ID NUMBER);"
      },
      {
        "question": "What are the top 3 competition types?",
        "query": "SELECT competition_type FROM competition GROUP BY competition_type ORDER BY count(*) DESC LIMIT 3",
        "schema": "CREATE TABLE competition (Competition_type TEXT, Competition_ID NUMBER, Year NUMBER); CREATE TABLE club (Club_ID NUMBER); CREATE TABLE player (Player_ID NUMBER);"
      },
      {
        "question": "What about the ones that have at most five competitions of that type.",
        "query": "SELECT competition_type FROM competition GROUP BY competition_type HAVING count(*) <= 5",
        "schema": "CREATE TABLE competition (Year NUMBER, Competition_type TEXT, Competition_ID NUMBER); CREATE TABLE club (Club_ID NUMBER); CREATE TABLE player (Player_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What are the club names?",
        "query": "SELECT name FROM club",
        "schema": "CREATE TABLE club (Club_ID NUMBER, name TEXT); CREATE TABLE player (name TEXT, Club_ID NUMBER);"
      },
      {
        "question": "How many of them have at least one player?",
        "query": "SELECT count(name) FROM club WHERE club_id IN (SELECT club_id FROM player)",
        "schema": "CREATE TABLE club (Club_ID NUMBER, name TEXT); CREATE TABLE club_rank (Club_ID NUMBER); CREATE TABLE player (name TEXT, Player_ID NUMBER, Club_ID NUMBER);"
      },
      {
        "question": "Which ones have no players at all?",
        "query": "SELECT name FROM club WHERE club_id NOT IN (SELECT club_id FROM player)",
        "schema": "CREATE TABLE club (Club_ID NUMBER, name TEXT); CREATE TABLE player (Club_ID NUMBER, name TEXT, Player_ID NUMBER); CREATE TABLE club_rank (Club_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What is the average value of points?",
        "query": "SELECT avg(points) FROM player",
        "schema": "CREATE TABLE club_rank (Total NUMBER, Gold NUMBER); CREATE TABLE player (Player_ID NUMBER, Points NUMBER); CREATE TABLE competition_result (Score TEXT); CREATE TABLE club (Club_ID NUMBER);"
      },
      {
        "question": "How many players have points less than 20.0?",
        "query": "SELECT count(*) FROM player WHERE points < 20",
        "schema": "CREATE TABLE club (Club_ID NUMBER); CREATE TABLE player (name TEXT, Player_ID NUMBER, Points NUMBER); CREATE TABLE club_rank (Gold NUMBER, Total NUMBER); CREATE TABLE competition_result (Score TEXT);"
      },
      {
        "question": "What are the positions of those players?",
        "query": "SELECT POSITION FROM player WHERE points < 20",
        "schema": "CREATE TABLE player (Position TEXT, Points NUMBER, name TEXT, Player_ID NUMBER); CREATE TABLE competition_result (Score TEXT); CREATE TABLE club_rank (Gold NUMBER, Total NUMBER); CREATE TABLE club (Club_ID NUMBER);"
      },
      {
        "question": "What about the positions of those players who have more than 20 points and less than 10 points.",
        "query": "SELECT POSITION FROM player WHERE points > 20 INTERSECT SELECT POSITION FROM player WHERE points < 10",
        "schema": "CREATE TABLE club (Club_ID NUMBER); CREATE TABLE player (name TEXT, Player_ID NUMBER, Position TEXT, Points NUMBER); CREATE TABLE club_rank (Total NUMBER, Gold NUMBER); CREATE TABLE competition_result (Score TEXT);"
      }
    ],
    [
      {
        "question": "What are the maximum and mean values of the points?",
        "query": "SELECT max(points), avg(points) FROM player",
        "schema": "CREATE TABLE club_rank (Total NUMBER); CREATE TABLE club (Club_ID NUMBER); CREATE TABLE player (Player_ID NUMBER, Points NUMBER);"
      },
      {
        "question": "What are the player names of those who have more points than the average?",
        "query": "SELECT name FROM player WHERE points > (SELECT avg(points) FROM player)",
        "schema": "CREATE TABLE club_rank (Total NUMBER); CREATE TABLE club (Club_ID NUMBER); CREATE TABLE player (name TEXT, Points NUMBER, Player_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What are the minimum and mean values of the points?",
        "query": "SELECT min(points), avg(points) FROM player",
        "schema": "CREATE TABLE club_rank (Total NUMBER); CREATE TABLE club (Club_ID NUMBER); CREATE TABLE player (Points NUMBER, Player_ID NUMBER);"
      },
      {
        "question": "What are the player names of those who have fewer points than the average?",
        "query": "SELECT name FROM player WHERE points < (SELECT avg(points) FROM player)",
        "schema": "CREATE TABLE club_rank (Total NUMBER); CREATE TABLE player (name TEXT, Points NUMBER, Player_ID NUMBER); CREATE TABLE club (Club_ID NUMBER);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT count(*) FROM player WHERE points < (SELECT avg(points) FROM player)",
        "schema": "CREATE TABLE player (Points NUMBER, name TEXT, Player_ID NUMBER); CREATE TABLE club_rank (Total NUMBER); CREATE TABLE club (Club_ID NUMBER);"
      },
      {
        "question": "How many players are there whose points are lower than 30?",
        "query": "SELECT count(*) FROM player WHERE points < 30",
        "schema": "CREATE TABLE player (Player_ID NUMBER, name TEXT, Club_ID NUMBER, Points NUMBER); CREATE TABLE club (Club_ID NUMBER); CREATE TABLE club_rank (Total NUMBER);"
      },
      {
        "question": "Among those, how many players are there for each position?",
        "query": "SELECT count(*) , POSITION FROM player WHERE points < 30 GROUP BY POSITION",
        "schema": "CREATE TABLE club (Club_ID NUMBER); CREATE TABLE club_rank (Total NUMBER); CREATE TABLE player (Position TEXT, Points NUMBER, name TEXT, Player_ID NUMBER, Club_ID NUMBER);"
      }
    ],
    [
      {
        "question": "How many competitions are there where the competition type is 'Friendly'?",
        "query": "SELECT count(*) FROM competition WHERE competition_type = 'Friendly'",
        "schema": "CREATE TABLE player (Player_ID NUMBER); CREATE TABLE competition_result (Competition_ID NUMBER); CREATE TABLE club (Club_ID NUMBER); CREATE TABLE competition (Competition_ID NUMBER, Competition_type TEXT);"
      },
      {
        "question": "What about for the type 'Tournament'?",
        "query": "SELECT count(*) FROM competition WHERE competition_type = 'Tournament'",
        "schema": "CREATE TABLE player (Player_ID NUMBER); CREATE TABLE club (Club_ID NUMBER); CREATE TABLE competition (Competition_type TEXT, Competition_ID NUMBER); CREATE TABLE competition_result (Competition_ID NUMBER);"
      },
      {
        "question": "Among those results, how many competitions are there for each country?",
        "query": "SELECT country FROM competition WHERE competition_type = 'Tournament' GROUP BY country",
        "schema": "CREATE TABLE competition (Country TEXT, Competition_type TEXT, Competition_ID NUMBER); CREATE TABLE competition_result (Competition_ID NUMBER); CREATE TABLE club (Club_ID NUMBER); CREATE TABLE player (Player_ID NUMBER);"
      },
      {
        "question": "Which one is the most popular country?",
        "query": "SELECT country FROM competition WHERE competition_type = 'Tournament' GROUP BY country ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE competition (Competition_ID NUMBER, Country TEXT, Competition_type TEXT); CREATE TABLE competition_result (Competition_ID NUMBER); CREATE TABLE player (Player_ID NUMBER); CREATE TABLE club (Club_ID NUMBER);"
      }
    ],
    [
      {
        "question": "How many competitions are there where the  competition type is 'Friendly'?",
        "query": "SELECT count(*) FROM competition WHERE competition_type = 'Friendly'",
        "schema": "CREATE TABLE club (Club_ID NUMBER); CREATE TABLE competition_result (Competition_ID NUMBER); CREATE TABLE competition (Competition_ID NUMBER, Competition_type TEXT); CREATE TABLE player (Player_ID NUMBER);"
      },
      {
        "question": "Among those results, how many competitions are there for each country?",
        "query": "SELECT country FROM competition WHERE competition_type = 'Friendly' GROUP BY country",
        "schema": "CREATE TABLE player (Player_ID NUMBER); CREATE TABLE competition_result (Competition_ID NUMBER); CREATE TABLE club (Club_ID NUMBER); CREATE TABLE competition (Competition_ID NUMBER, Competition_type TEXT, Country TEXT);"
      },
      {
        "question": "What about for type 'Tournament'?",
        "query": "SELECT country FROM competition WHERE competition_type = 'Tournament' GROUP BY country",
        "schema": "CREATE TABLE competition_result (Competition_ID NUMBER); CREATE TABLE competition (Competition_type TEXT, Country TEXT, Competition_ID NUMBER); CREATE TABLE club (Club_ID NUMBER); CREATE TABLE player (Player_ID NUMBER);"
      },
      {
        "question": "Which countries held both types of competitions?",
        "query": "SELECT country FROM competition WHERE competition_type = 'Friendly' INTERSECT SELECT country FROM competition WHERE competition_type = 'Tournament'",
        "schema": "CREATE TABLE player (Player_ID NUMBER); CREATE TABLE club (Club_ID NUMBER); CREATE TABLE competition_result (Competition_ID NUMBER); CREATE TABLE competition (Competition_ID NUMBER, Competition_type TEXT, Country TEXT);"
      }
    ]
  ],
  "assets_maintenance": [
    [
      {
        "question": "Which assets have 2 parts? Show me its id and details.",
        "query": "SELECT t1.asset_id , t1.asset_details FROM assets AS t1 JOIN asset_parts AS t2 ON t1.asset_id = t2.asset_id GROUP BY t1.asset_id HAVING count(*) = 2",
        "schema": "CREATE TABLE Asset_Parts (asset_id NUMBER, part_id NUMBER); CREATE TABLE Assets (asset_model TEXT, other_asset_details TEXT, asset_id NUMBER, asset_details TEXT, asset_make TEXT); CREATE TABLE Staff (staff_id NUMBER); CREATE TABLE Fault_Log (fault_log_entry_id NUMBER, asset_id NUMBER); CREATE TABLE Fault_Log_Parts (fault_log_entry_id NUMBER, part_fault_id NUMBER); CREATE TABLE Parts (part_id NUMBER, part_name TEXT); CREATE TABLE Part_Faults (part_fault_id NUMBER, part_id NUMBER);"
      },
      {
        "question": "Which assets have less than 2 fault logs? Show me its id and details.",
        "query": "SELECT t1.asset_id , t1.asset_details FROM assets AS t1 JOIN fault_log AS t2 ON t1.asset_id = t2.asset_id GROUP BY t1.asset_id HAVING count(*) < 2",
        "schema": "CREATE TABLE Parts (part_id NUMBER, part_name TEXT); CREATE TABLE Assets (asset_make TEXT, asset_details TEXT, asset_model TEXT, other_asset_details TEXT, asset_id NUMBER); CREATE TABLE Staff (staff_id NUMBER); CREATE TABLE Part_Faults (part_id NUMBER, part_fault_id NUMBER); CREATE TABLE Asset_Parts (asset_id NUMBER, part_id NUMBER); CREATE TABLE Fault_Log_Parts (part_fault_id NUMBER, fault_log_entry_id NUMBER); CREATE TABLE Fault_Log (other_fault_details TEXT, asset_id NUMBER, fault_log_entry_id NUMBER);"
      },
      {
        "question": "Which assets fulfill both of those conditions? Show me asset id and details.",
        "query": "SELECT t1.asset_id , t1.asset_details FROM assets AS t1 JOIN asset_parts AS t2 ON t1.asset_id = t2.asset_id GROUP BY t1.asset_id HAVING count(*) = 2 INTERSECT SELECT t1.asset_id , t1.asset_details FROM assets AS t1 JOIN fault_log AS t2 ON t1.asset_id = t2.asset_id GROUP BY t1.asset_id HAVING count(*) < 2",
        "schema": "CREATE TABLE Staff (staff_id NUMBER); CREATE TABLE Parts (part_name TEXT, part_id NUMBER); CREATE TABLE Assets (asset_model TEXT, asset_id NUMBER, other_asset_details TEXT, asset_details TEXT, asset_make TEXT); CREATE TABLE Asset_Parts (part_id NUMBER, asset_id NUMBER); CREATE TABLE Part_Faults (part_id NUMBER, part_fault_id NUMBER); CREATE TABLE Fault_Log_Parts (fault_log_entry_id NUMBER, part_fault_id NUMBER); CREATE TABLE Fault_Log (asset_id NUMBER, other_fault_details TEXT, fault_log_entry_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show me assets each maintenance contract contains.",
        "query": "SELECT * FROM maintenance_contracts AS t1 JOIN assets AS t2 ON t1.maintenance_contract_id = t2.maintenance_contract_id GROUP BY t1.maintenance_contract_id",
        "schema": "CREATE TABLE Fault_Log (asset_id NUMBER); CREATE TABLE Asset_Parts (asset_id NUMBER); CREATE TABLE Assets (maintenance_contract_id NUMBER, asset_model TEXT, asset_details TEXT, asset_id NUMBER, asset_make TEXT); CREATE TABLE Third_Party_Companies (company_id NUMBER); CREATE TABLE Maintenance_Engineers (last_name TEXT, company_id NUMBER, engineer_id NUMBER); CREATE TABLE Maintenance_Contracts (maintenance_contract_id NUMBER, maintenance_contract_company_id NUMBER);"
      },
      {
        "question": "Show me the number of assets and contract id.",
        "query": "SELECT count(*) , t1.maintenance_contract_id FROM maintenance_contracts AS t1 JOIN assets AS t2 ON t1.maintenance_contract_id = t2.maintenance_contract_id GROUP BY t1.maintenance_contract_id",
        "schema": "CREATE TABLE Asset_Parts (asset_id NUMBER); CREATE TABLE Fault_Log (asset_id NUMBER); CREATE TABLE Assets (asset_model TEXT, maintenance_contract_id NUMBER, asset_id NUMBER, asset_make TEXT, asset_details TEXT); CREATE TABLE Maintenance_Engineers (engineer_id NUMBER, last_name TEXT, company_id NUMBER); CREATE TABLE Third_Party_Companies (company_id NUMBER); CREATE TABLE Maintenance_Contracts (maintenance_contract_company_id NUMBER, maintenance_contract_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show me assets supplied by each third party company.",
        "query": "SELECT * FROM third_party_companies AS t1 JOIN assets AS t2 ON t1.company_id = t2.supplier_company_id GROUP BY t1.company_id",
        "schema": "CREATE TABLE Fault_Log (asset_id NUMBER); CREATE TABLE Asset_Parts (asset_id NUMBER); CREATE TABLE Third_Party_Companies (other_company_details TEXT, company_type TEXT, company_id NUMBER, company_name TEXT); CREATE TABLE Maintenance_Contracts (maintenance_contract_id NUMBER, maintenance_contract_company_id NUMBER); CREATE TABLE Maintenance_Engineers (company_id NUMBER); CREATE TABLE Assets (supplier_company_id NUMBER, asset_id NUMBER, asset_model TEXT, asset_details TEXT, asset_make TEXT);"
      },
      {
        "question": "How many are there for each third party company? Show me the company id as well.",
        "query": "SELECT count(*) , t1.company_id FROM third_party_companies AS t1 JOIN assets AS t2 ON t1.company_id = t2.supplier_company_id GROUP BY t1.company_id",
        "schema": "CREATE TABLE Maintenance_Engineers (company_id NUMBER); CREATE TABLE Asset_Parts (asset_id NUMBER); CREATE TABLE Maintenance_Contracts (maintenance_contract_company_id NUMBER, maintenance_contract_id NUMBER); CREATE TABLE Assets (asset_make TEXT, asset_details TEXT, asset_id NUMBER, supplier_company_id NUMBER, asset_model TEXT); CREATE TABLE Fault_Log (asset_id NUMBER); CREATE TABLE Third_Party_Companies (company_id NUMBER, company_name TEXT, other_company_details TEXT, company_type TEXT);"
      }
    ],
    [
      {
        "question": "Which third party companies have at least 2 maintenance engineers? List the id and name of that company.",
        "query": "SELECT t1.company_id , t1.company_name FROM third_party_companies AS t1 JOIN maintenance_engineers AS t2 ON t1.company_id = t2.company_id GROUP BY t1.company_id HAVING count(*) >= 2",
        "schema": "CREATE TABLE Maintenance_Engineers (engineer_id NUMBER, first_name TEXT, last_name TEXT, company_id NUMBER); CREATE TABLE Engineer_Skills (engineer_id NUMBER); CREATE TABLE Staff (staff_id NUMBER); CREATE TABLE Maintenance_Contracts (maintenance_contract_company_id NUMBER, maintenance_contract_id NUMBER); CREATE TABLE Assets (supplier_company_id NUMBER); CREATE TABLE Fault_Log (fault_log_entry_id NUMBER); CREATE TABLE Engineer_Visits (engineer_id NUMBER); CREATE TABLE Third_Party_Companies (company_type TEXT, company_id NUMBER, other_company_details TEXT, company_name TEXT);"
      },
      {
        "question": "Show me names and ids of third party companies that have at least 2 maintenance contracts as well, along with the previous result.",
        "query": "SELECT t1.company_id , t1.company_name FROM third_party_companies AS t1 JOIN maintenance_engineers AS t2 ON t1.company_id = t2.company_id GROUP BY t1.company_id HAVING count(*) >= 2 UNION SELECT t3.company_id , t3.company_name FROM third_party_companies AS t3 JOIN maintenance_contracts AS t4 ON t3.company_id = t4.maintenance_contract_company_id GROUP BY t3.company_id HAVING count(*) >= 2",
        "schema": "CREATE TABLE Assets (supplier_company_id NUMBER, maintenance_contract_id NUMBER); CREATE TABLE Third_Party_Companies (company_name TEXT, other_company_details TEXT, company_type TEXT, company_id NUMBER); CREATE TABLE Engineer_Visits (engineer_id NUMBER); CREATE TABLE Fault_Log (fault_log_entry_id NUMBER); CREATE TABLE Staff (staff_id NUMBER); CREATE TABLE Engineer_Skills (engineer_id NUMBER); CREATE TABLE Maintenance_Engineers (company_id NUMBER, first_name TEXT, engineer_id NUMBER, last_name TEXT); CREATE TABLE Maintenance_Contracts (maintenance_contract_id NUMBER, maintenance_contract_company_id NUMBER, contract_start_date TIME);"
      }
    ],
    [
      {
        "question": "What is the name and id of the staff who recorded the fault log?",
        "query": "SELECT t1.staff_name , t1.staff_id FROM staff AS t1 JOIN fault_log AS t2 ON t1.staff_id = t2.recorded_by_staff_id",
        "schema": "CREATE TABLE Part_Faults (fault_short_name TEXT, part_fault_id NUMBER); CREATE TABLE Fault_Log_Parts (part_fault_id NUMBER, fault_status TEXT, fault_log_entry_id NUMBER); CREATE TABLE Fault_Log (fault_description TEXT, other_fault_details TEXT, fault_log_entry_id NUMBER, recorded_by_staff_id NUMBER); CREATE TABLE Maintenance_Engineers (first_name TEXT, last_name TEXT, engineer_id NUMBER); CREATE TABLE Staff (staff_name TEXT, staff_id NUMBER); CREATE TABLE Engineer_Visits (contact_staff_id NUMBER, fault_log_entry_id NUMBER);"
      },
      {
        "question": "Among those staff members, only show the name and id of staff who has not contacted any visiting engineers.",
        "query": "SELECT t1.staff_name , t1.staff_id FROM staff AS t1 JOIN fault_log AS t2 ON t1.staff_id = t2.recorded_by_staff_id EXCEPT SELECT t3.staff_name , t3.staff_id FROM staff AS t3 JOIN engineer_visits AS t4 ON t3.staff_id = t4.contact_staff_id",
        "schema": "CREATE TABLE Maintenance_Engineers (first_name TEXT, last_name TEXT, engineer_id NUMBER); CREATE TABLE Staff (staff_id NUMBER, staff_name TEXT); CREATE TABLE Part_Faults (fault_short_name TEXT, part_fault_id NUMBER); CREATE TABLE Fault_Log_Parts (fault_log_entry_id NUMBER, part_fault_id NUMBER, fault_status TEXT); CREATE TABLE Engineer_Visits (fault_log_entry_id NUMBER, fault_status TEXT, contact_staff_id NUMBER, engineer_visit_id NUMBER, engineer_id NUMBER); CREATE TABLE Fault_Log (recorded_by_staff_id NUMBER, fault_log_entry_id NUMBER, fault_description TEXT, other_fault_details TEXT);"
      }
    ],
    [
      {
        "question": "Which engineer has visited the least number of times? Show the id, first and last names of that engineer.",
        "query": "SELECT t1.engineer_id , t1.first_name , t1.last_name FROM maintenance_engineers AS t1 JOIN engineer_visits AS t2 GROUP BY t1.engineer_id ORDER BY count(*) ASC LIMIT 1",
        "schema": "CREATE TABLE Maintenance_Engineers (last_name TEXT, engineer_id NUMBER, first_name TEXT); CREATE TABLE Engineer_Skills (engineer_id NUMBER); CREATE TABLE Engineer_Visits (visit_start_datetime TIME, visit_end_datetime TIME, other_visit_details TEXT, engineer_id NUMBER, contact_staff_id NUMBER, engineer_visit_id NUMBER); CREATE TABLE Staff (staff_id NUMBER);"
      },
      {
        "question": "Do the same for the engineer who has visited the most times.",
        "query": "SELECT t1.engineer_id , t1.first_name , t1.last_name FROM maintenance_engineers AS t1 JOIN engineer_visits AS t2 GROUP BY t1.engineer_id ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Engineer_Visits (engineer_id NUMBER, contact_staff_id NUMBER, other_visit_details TEXT, engineer_visit_id NUMBER, visit_end_datetime TIME, visit_start_datetime TIME); CREATE TABLE Staff (staff_id NUMBER); CREATE TABLE Maintenance_Engineers (last_name TEXT, first_name TEXT, engineer_id NUMBER, company_id NUMBER); CREATE TABLE Engineer_Skills (engineer_id NUMBER);"
      }
    ],
    [
      {
        "question": "Which parts have less than 2 faults? Show the id and name of that part.",
        "query": "SELECT t1.part_name , t1.part_id FROM parts AS t1 JOIN part_faults AS t2 ON t1.part_id = t2.part_id GROUP BY t1.part_id HAVING count(*) < 2",
        "schema": "CREATE TABLE Skills (skill_id NUMBER); CREATE TABLE Parts (part_name TEXT, part_id NUMBER); CREATE TABLE Fault_Log_Parts (part_fault_id NUMBER, fault_log_entry_id NUMBER); CREATE TABLE Fault_Log (fault_log_entry_id NUMBER); CREATE TABLE Part_Faults (part_fault_id NUMBER, fault_short_name TEXT, part_id NUMBER); CREATE TABLE Skills_Required_To_Fix (part_fault_id NUMBER); CREATE TABLE Assets (asset_id NUMBER); CREATE TABLE Asset_Parts (asset_id NUMBER, part_id NUMBER);"
      },
      {
        "question": "Do the same for parts with more than 2 faults.",
        "query": "SELECT t1.part_name , t1.part_id FROM parts AS t1 JOIN part_faults AS t2 ON t1.part_id = t2.part_id GROUP BY t1.part_id HAVING count(*) > 2",
        "schema": "CREATE TABLE Skills_Required_To_Fix (part_fault_id NUMBER); CREATE TABLE Parts (part_id NUMBER, part_name TEXT); CREATE TABLE Fault_Log (fault_log_entry_id NUMBER); CREATE TABLE Skills (skill_id NUMBER); CREATE TABLE Part_Faults (part_fault_id NUMBER, fault_short_name TEXT, part_id NUMBER); CREATE TABLE Fault_Log_Parts (part_fault_id NUMBER, fault_log_entry_id NUMBER); CREATE TABLE Asset_Parts (asset_id NUMBER, part_id NUMBER); CREATE TABLE Assets (asset_id NUMBER);"
      }
    ],
    [
      {
        "question": "List all engineers' first and last names.",
        "query": "SELECT t1.first_name , t1.last_name FROM maintenance_engineers AS t1 JOIN engineer_skills AS t2 ON t1.engineer_id = t2.engineer_id",
        "schema": "CREATE TABLE Maintenance_Engineers (first_name TEXT, engineer_id NUMBER, last_name TEXT); CREATE TABLE Staff (staff_name TEXT, staff_id NUMBER); CREATE TABLE Engineer_Visits (engineer_id NUMBER, engineer_visit_id NUMBER); CREATE TABLE Engineer_Skills (engineer_id NUMBER);"
      },
      {
        "question": "List the details of each engineer and corresponding skill descriptions as well, along with the names.",
        "query": "SELECT t1.first_name , t1.last_name , t1.other_details , t3.skill_description FROM maintenance_engineers AS t1 JOIN engineer_skills AS t2 ON t1.engineer_id = t2.engineer_id JOIN skills AS t3 ON t2.skill_id = t3.skill_id",
        "schema": "CREATE TABLE Maintenance_Engineers (engineer_id NUMBER, last_name TEXT, other_details TEXT, first_name TEXT); CREATE TABLE Engineer_Skills (engineer_id NUMBER, skill_id NUMBER); CREATE TABLE Skills (skill_description TEXT, skill_id NUMBER, skill_code TEXT); CREATE TABLE Staff (staff_name TEXT, staff_id NUMBER); CREATE TABLE Engineer_Visits (engineer_id NUMBER, engineer_visit_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show me all faults of different parts.",
        "query": "SELECT fault_short_name FROM part_faults",
        "schema": "CREATE TABLE Skills_Required_To_Fix (part_fault_id NUMBER, skill_id NUMBER); CREATE TABLE Parts (part_id NUMBER, part_name TEXT); CREATE TABLE Fault_Log (fault_log_entry_id NUMBER); CREATE TABLE Part_Faults (part_id NUMBER, other_fault_details TEXT, fault_description TEXT, fault_short_name TEXT, part_fault_id NUMBER); CREATE TABLE Asset_Parts (part_id NUMBER); CREATE TABLE Skills (skill_id NUMBER); CREATE TABLE Maintenance_Engineers (engineer_id NUMBER); CREATE TABLE Fault_Log_Parts (fault_log_entry_id NUMBER, part_fault_id NUMBER); CREATE TABLE Staff (staff_id NUMBER); CREATE TABLE Engineer_Visits (fault_log_entry_id NUMBER);"
      },
      {
        "question": "Give me descriptions of skills required to fix those faults, along with the names of those faults.",
        "query": "SELECT t1.fault_short_name , t3.skill_description FROM part_faults AS t1 JOIN skills_required_to_fix AS t2 ON t1.part_fault_id = t2.part_fault_id JOIN skills AS t3 ON t2.skill_id = t3.skill_id",
        "schema": "CREATE TABLE Staff (staff_id NUMBER); CREATE TABLE Engineer_Skills (skill_id NUMBER); CREATE TABLE Fault_Log_Parts (part_fault_id NUMBER, fault_log_entry_id NUMBER); CREATE TABLE Skills_Required_To_Fix (part_fault_id NUMBER, skill_id NUMBER); CREATE TABLE Fault_Log (fault_description TEXT, fault_log_entry_id NUMBER); CREATE TABLE Part_Faults (fault_short_name TEXT, part_fault_id NUMBER, fault_description TEXT, other_fault_details TEXT, part_id NUMBER); CREATE TABLE Parts (part_name TEXT, part_id NUMBER); CREATE TABLE Skills (skill_code TEXT, skill_description TEXT, skill_id NUMBER); CREATE TABLE Asset_Parts (part_id NUMBER); CREATE TABLE Engineer_Visits (fault_log_entry_id NUMBER); CREATE TABLE Maintenance_Engineers (engineer_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show me all assets each part can be used in. List the part name and the asset details.",
        "query": "SELECT t1.part_name , t3.asset_details FROM parts AS t1 JOIN asset_parts AS t2 ON t1.part_id = t2.part_id JOIN assets AS t3 ON t2.asset_id = t3.asset_id GROUP BY t1.part_name",
        "schema": "CREATE TABLE Parts (part_name TEXT, other_part_details TEXT, part_id NUMBER); CREATE TABLE Asset_Parts (asset_id NUMBER, part_id NUMBER); CREATE TABLE Part_Faults (part_id NUMBER, part_fault_id NUMBER); CREATE TABLE Fault_Log (asset_id NUMBER); CREATE TABLE Assets (other_asset_details TEXT, asset_id NUMBER, asset_model TEXT, asset_make TEXT, asset_details TEXT);"
      },
      {
        "question": "How many assets can each part be used in? Show me the count and the part name.",
        "query": "SELECT t1.part_name , count(*) FROM parts AS t1 JOIN asset_parts AS t2 ON t1.part_id = t2.part_id GROUP BY t1.part_name",
        "schema": "CREATE TABLE Assets (other_asset_details TEXT, asset_id NUMBER, asset_make TEXT, asset_details TEXT, asset_model TEXT); CREATE TABLE Asset_Parts (part_id NUMBER, asset_id NUMBER); CREATE TABLE Parts (part_id NUMBER, part_name TEXT, other_part_details TEXT); CREATE TABLE Fault_Log (asset_id NUMBER); CREATE TABLE Part_Faults (part_fault_id NUMBER, part_id NUMBER);"
      }
    ],
    [
      {
        "question": "What is the lowest number of engineer visits for a single fault log? List the number and log entry id.",
        "query": "SELECT count(*) , t1.fault_log_entry_id FROM fault_log AS t1 JOIN engineer_visits AS t2 ON t1.fault_log_entry_id = t2.fault_log_entry_id GROUP BY t1.fault_log_entry_id ORDER BY count(*) ASC LIMIT 1",
        "schema": "CREATE TABLE Fault_Log_Parts (fault_log_entry_id NUMBER, part_fault_id NUMBER, fault_status TEXT); CREATE TABLE Engineer_Visits (engineer_visit_id NUMBER, fault_status TEXT, engineer_id NUMBER, fault_log_entry_id NUMBER); CREATE TABLE Maintenance_Engineers (engineer_id NUMBER); CREATE TABLE Fault_Log (fault_log_entry_id NUMBER);"
      },
      {
        "question": "Do the same for the highest number of engineer visits for a single fault log?",
        "query": "SELECT count(*) , t1.fault_log_entry_id FROM fault_log AS t1 JOIN engineer_visits AS t2 ON t1.fault_log_entry_id = t2.fault_log_entry_id GROUP BY t1.fault_log_entry_id ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Engineer_Visits (engineer_visit_id NUMBER, engineer_id NUMBER, fault_log_entry_id NUMBER, fault_status TEXT); CREATE TABLE Fault_Log_Parts (fault_log_entry_id NUMBER, part_fault_id NUMBER, fault_status TEXT); CREATE TABLE Maintenance_Engineers (engineer_id NUMBER); CREATE TABLE Fault_Log (fault_log_entry_id NUMBER);"
      }
    ],
    [
      {
        "question": "How many engineers have never visited to maintain the assets?",
        "query": "SELECT count(*) FROM maintenance_engineers WHERE engineer_id NOT IN (SELECT engineer_id FROM engineer_visits)",
        "schema": "CREATE TABLE Staff (staff_id NUMBER); CREATE TABLE Engineer_Visits (fault_status TEXT, visit_end_datetime TIME, other_visit_details TEXT, engineer_id NUMBER, fault_log_entry_id NUMBER, engineer_visit_id NUMBER, contact_staff_id NUMBER, visit_start_datetime TIME); CREATE TABLE Maintenance_Engineers (last_name TEXT, company_id NUMBER, engineer_id NUMBER, first_name TEXT); CREATE TABLE Maintenance_Contracts (maintenance_contract_id NUMBER); CREATE TABLE Engineer_Skills (engineer_id NUMBER); CREATE TABLE Assets (asset_model TEXT, maintenance_contract_id NUMBER, asset_make TEXT, asset_id NUMBER, asset_details TEXT); CREATE TABLE Asset_Parts (asset_id NUMBER); CREATE TABLE Fault_Log (fault_log_entry_id NUMBER, asset_id NUMBER);"
      },
      {
        "question": "Show me their first and last names.",
        "query": "SELECT first_name , last_name FROM maintenance_engineers WHERE engineer_id NOT IN (SELECT engineer_id FROM engineer_visits)",
        "schema": "CREATE TABLE Engineer_Skills (engineer_id NUMBER); CREATE TABLE Maintenance_Contracts (maintenance_contract_id NUMBER); CREATE TABLE Staff (staff_id NUMBER); CREATE TABLE Engineer_Visits (fault_status TEXT, contact_staff_id NUMBER, engineer_id NUMBER, engineer_visit_id NUMBER, other_visit_details TEXT, visit_end_datetime TIME, fault_log_entry_id NUMBER, visit_start_datetime TIME); CREATE TABLE Fault_Log (asset_id NUMBER, fault_log_entry_id NUMBER); CREATE TABLE Asset_Parts (asset_id NUMBER); CREATE TABLE Maintenance_Engineers (first_name TEXT, last_name TEXT, company_id NUMBER, engineer_id NUMBER); CREATE TABLE Assets (asset_model TEXT, maintenance_contract_id NUMBER, asset_id NUMBER, asset_details TEXT, asset_make TEXT);"
      }
    ],
    [
      {
        "question": "When was the latest date that an asset was acquired?",
        "query": "SELECT asset_acquired_date FROM assets ORDER BY asset_acquired_date DESC LIMIT 1",
        "schema": "CREATE TABLE Fault_Log (asset_id NUMBER); CREATE TABLE Assets (asset_acquired_date TIME, asset_disposed_date TIME, asset_details TEXT, asset_id NUMBER, asset_make TEXT, asset_model TEXT); CREATE TABLE Engineer_Visits (visit_start_datetime TIME);"
      },
      {
        "question": "How about the oldest date?",
        "query": "SELECT asset_acquired_date FROM assets ORDER BY asset_acquired_date ASC LIMIT 1",
        "schema": "CREATE TABLE Engineer_Visits (visit_start_datetime TIME); CREATE TABLE Assets (asset_model TEXT, asset_make TEXT, asset_id NUMBER, asset_details TEXT, asset_acquired_date TIME, asset_disposed_date TIME); CREATE TABLE Fault_Log (asset_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show me the id and name of a fault that needs the least number of skills to be fixed.",
        "query": "SELECT t1.part_id , t1.part_name FROM parts AS t1 JOIN part_faults AS t2 ON t1.part_id = t2.part_id JOIN skills_required_to_fix AS t3 ON t2.part_fault_id = t3.part_fault_id GROUP BY t1.part_id ORDER BY count(*) ASC LIMIT 1",
        "schema": "CREATE TABLE Maintenance_Engineers (engineer_id NUMBER); CREATE TABLE Skills (skill_code TEXT, skill_id NUMBER); CREATE TABLE Skills_Required_To_Fix (skill_id NUMBER, part_fault_id NUMBER); CREATE TABLE Parts (part_name TEXT, part_id NUMBER); CREATE TABLE Part_Faults (fault_short_name TEXT, part_fault_id NUMBER, part_id NUMBER); CREATE TABLE Engineer_Skills (skill_id NUMBER, engineer_id NUMBER); CREATE TABLE Engineer_Visits (fault_log_entry_id NUMBER); CREATE TABLE Fault_Log (recorded_by_staff_id NUMBER, asset_id NUMBER, fault_log_entry_id NUMBER); CREATE TABLE Fault_Log_Parts (part_fault_id NUMBER, fault_log_entry_id NUMBER); CREATE TABLE Staff (staff_id NUMBER);"
      },
      {
        "question": "How about the fault that requires the most number of skills to fix?",
        "query": "SELECT t1.part_id , t1.part_name FROM parts AS t1 JOIN part_faults AS t2 ON t1.part_id = t2.part_id JOIN skills_required_to_fix AS t3 ON t2.part_fault_id = t3.part_fault_id GROUP BY t1.part_id ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Maintenance_Engineers (engineer_id NUMBER); CREATE TABLE Staff (staff_id NUMBER); CREATE TABLE Skills_Required_To_Fix (part_fault_id NUMBER, skill_id NUMBER); CREATE TABLE Skills (skill_id NUMBER, skill_code TEXT); CREATE TABLE Engineer_Visits (fault_log_entry_id NUMBER); CREATE TABLE Fault_Log_Parts (fault_log_entry_id NUMBER, part_fault_id NUMBER); CREATE TABLE Fault_Log (recorded_by_staff_id NUMBER, asset_id NUMBER, fault_log_entry_id NUMBER); CREATE TABLE Parts (part_name TEXT, part_id NUMBER); CREATE TABLE Engineer_Skills (engineer_id NUMBER, skill_id NUMBER); CREATE TABLE Part_Faults (fault_short_name TEXT, part_fault_id NUMBER, part_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show me the name of each part with the number of faults it has.",
        "query": "SELECT t1.part_name, count(*) FROM parts AS t1 JOIN part_faults AS t2 ON t1.part_id = t2.part_id GROUP BY t1.part_name",
        "schema": "CREATE TABLE Fault_Log_Parts (part_fault_id NUMBER); CREATE TABLE Maintenance_Engineers (first_name TEXT); CREATE TABLE Staff (staff_id NUMBER); CREATE TABLE Fault_Log (fault_log_entry_id NUMBER); CREATE TABLE Asset_Parts (part_id NUMBER); CREATE TABLE Skills (skill_id NUMBER); CREATE TABLE Parts (part_id NUMBER, part_name TEXT); CREATE TABLE Part_Faults (fault_description TEXT, part_id NUMBER, other_fault_details TEXT, fault_short_name TEXT, part_fault_id NUMBER); CREATE TABLE Skills_Required_To_Fix (part_fault_id NUMBER, skill_id NUMBER);"
      },
      {
        "question": "Show me the name of part with the least number of faults.",
        "query": "SELECT t1.part_name FROM parts AS t1 JOIN part_faults AS t2 ON t1.part_id = t2.part_id GROUP BY t1.part_name ORDER BY count(*) ASC LIMIT 1",
        "schema": "CREATE TABLE Staff (staff_id NUMBER); CREATE TABLE Maintenance_Engineers (first_name TEXT); CREATE TABLE Skills (skill_id NUMBER); CREATE TABLE Fault_Log (fault_log_entry_id NUMBER); CREATE TABLE Fault_Log_Parts (part_fault_id NUMBER); CREATE TABLE Asset_Parts (part_id NUMBER); CREATE TABLE Skills_Required_To_Fix (part_fault_id NUMBER, skill_id NUMBER); CREATE TABLE Parts (part_id NUMBER, part_name TEXT); CREATE TABLE Part_Faults (part_fault_id NUMBER, part_id NUMBER, fault_description TEXT, other_fault_details TEXT, fault_short_name TEXT);"
      }
    ],
    [
      {
        "question": "Show me all the engineers.",
        "query": "SELECT * FROM maintenance_engineers",
        "schema": "CREATE TABLE Maintenance_Engineers (company_id NUMBER, first_name TEXT, engineer_id NUMBER, last_name TEXT); CREATE TABLE Engineer_Skills (engineer_id NUMBER); CREATE TABLE Engineer_Visits (engineer_id NUMBER, engineer_visit_id NUMBER); CREATE TABLE Staff (staff_id NUMBER);"
      },
      {
        "question": "Show me id, first and last names of engineers who have visited.",
        "query": "SELECT t1.engineer_id , t1.first_name , t1.last_name FROM maintenance_engineers AS t1 JOIN engineer_visits AS t2 ON t1.engineer_id = t2.engineer_id GROUP BY t1.engineer_id",
        "schema": "CREATE TABLE Maintenance_Engineers (engineer_id NUMBER, last_name TEXT, company_id NUMBER, first_name TEXT); CREATE TABLE Staff (staff_id NUMBER); CREATE TABLE Engineer_Visits (engineer_id NUMBER, contact_staff_id NUMBER, engineer_visit_id NUMBER); CREATE TABLE Engineer_Skills (engineer_id NUMBER);"
      },
      {
        "question": "Among those, which one made the least number of visits.",
        "query": "SELECT t1.engineer_id , t1.first_name , t1.last_name FROM maintenance_engineers AS t1 JOIN engineer_visits AS t2 ON t1.engineer_id = t2.engineer_id GROUP BY t1.engineer_id ORDER BY count(*) ASC LIMIT 1",
        "schema": "CREATE TABLE Maintenance_Engineers (company_id NUMBER, engineer_id NUMBER, last_name TEXT, first_name TEXT); CREATE TABLE Staff (staff_id NUMBER); CREATE TABLE Engineer_Visits (contact_staff_id NUMBER, engineer_id NUMBER, engineer_visit_id NUMBER); CREATE TABLE Engineer_Skills (engineer_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show me names of all the staff members.",
        "query": "SELECT staff_name FROM staff",
        "schema": "CREATE TABLE Fault_Log (recorded_by_staff_id NUMBER); CREATE TABLE Staff (staff_name TEXT, staff_id NUMBER, gender TEXT, other_staff_details TEXT); CREATE TABLE Parts (part_name TEXT); CREATE TABLE Maintenance_Engineers (last_name TEXT, first_name TEXT); CREATE TABLE Engineer_Visits (contact_staff_id NUMBER);"
      },
      {
        "question": "List the first and last names of engineers each staff member has contacted.",
        "query": "SELECT t1.staff_name , t3.first_name , t3.last_name FROM staff AS t1 JOIN engineer_visits AS t2 ON t1.staff_id = t2.contact_staff_id JOIN maintenance_engineers AS t3 ON t2.engineer_id = t3.engineer_id",
        "schema": "CREATE TABLE Engineer_Visits (engineer_id NUMBER, engineer_visit_id NUMBER, contact_staff_id NUMBER); CREATE TABLE Staff (staff_id NUMBER, staff_name TEXT, gender TEXT, other_staff_details TEXT); CREATE TABLE Maintenance_Engineers (engineer_id NUMBER, first_name TEXT, last_name TEXT); CREATE TABLE Parts (part_name TEXT); CREATE TABLE Fault_Log (recorded_by_staff_id NUMBER); CREATE TABLE Engineer_Skills (engineer_id NUMBER);"
      }
    ],
    [
      {
        "question": "Which fault log included the least number of faulty parts? List the id, description, and record time of that fault log.",
        "query": "SELECT t1.fault_log_entry_id , t1.fault_description , t1.fault_log_entry_datetime FROM fault_log AS t1 JOIN fault_log_parts AS t2 ON t1.fault_log_entry_id = t2.fault_log_entry_id GROUP BY t1.fault_log_entry_id ORDER BY count(*) ASC LIMIT 1",
        "schema": "CREATE TABLE Fault_Log_Parts (part_fault_id NUMBER, fault_status TEXT, fault_log_entry_id NUMBER); CREATE TABLE Engineer_Visits (fault_log_entry_id NUMBER); CREATE TABLE Parts (part_id NUMBER); CREATE TABLE Part_Faults (fault_description TEXT, part_id NUMBER, part_fault_id NUMBER); CREATE TABLE Fault_Log (fault_description TEXT, other_fault_details TEXT, fault_log_entry_id NUMBER, fault_log_entry_datetime TIME);"
      },
      {
        "question": "Show the same for the fault log with most number of faulty parts.",
        "query": "SELECT t1.fault_log_entry_id , t1.fault_description , t1.fault_log_entry_datetime FROM fault_log AS t1 JOIN fault_log_parts AS t2 ON t1.fault_log_entry_id = t2.fault_log_entry_id GROUP BY t1.fault_log_entry_id ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Part_Faults (part_fault_id NUMBER, part_id NUMBER, fault_description TEXT); CREATE TABLE Fault_Log (other_fault_details TEXT, fault_description TEXT, fault_log_entry_id NUMBER, fault_log_entry_datetime TIME); CREATE TABLE Fault_Log_Parts (fault_status TEXT, part_fault_id NUMBER, fault_log_entry_id NUMBER); CREATE TABLE Engineer_Visits (fault_log_entry_id NUMBER); CREATE TABLE Parts (part_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show me id and descriptions of all the skills.",
        "query": "SELECT skill_id, skill_description FROM skills",
        "schema": "CREATE TABLE Maintenance_Engineers (engineer_id NUMBER); CREATE TABLE Fault_Log (asset_id NUMBER, fault_log_entry_id NUMBER, fault_description TEXT); CREATE TABLE Skills_Required_To_Fix (part_fault_id NUMBER, skill_id NUMBER); CREATE TABLE Skills (skill_id NUMBER, skill_description TEXT, skill_code TEXT); CREATE TABLE Parts (part_id NUMBER); CREATE TABLE Third_Party_Companies (company_id NUMBER); CREATE TABLE Assets (asset_id NUMBER); CREATE TABLE Engineer_Skills (skill_id NUMBER, engineer_id NUMBER); CREATE TABLE Staff (staff_id NUMBER); CREATE TABLE Part_Faults (fault_description TEXT, part_fault_id NUMBER);"
      },
      {
        "question": "For each of those skills, show the number of faults each skill is used to fix.",
        "query": "SELECT t1.skill_id , t1.skill_description, count(*) FROM skills AS t1 JOIN skills_required_to_fix AS t2 ON t1.skill_id = t2.skill_id GROUP BY t1.skill_id ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Engineer_Skills (engineer_id NUMBER, skill_id NUMBER); CREATE TABLE Maintenance_Engineers (engineer_id NUMBER); CREATE TABLE Part_Faults (fault_description TEXT, part_fault_id NUMBER); CREATE TABLE Fault_Log (fault_description TEXT, fault_log_entry_id NUMBER, asset_id NUMBER); CREATE TABLE Skills (skill_code TEXT, skill_id NUMBER, skill_description TEXT); CREATE TABLE Staff (staff_id NUMBER); CREATE TABLE Third_Party_Companies (company_id NUMBER); CREATE TABLE Parts (part_id NUMBER); CREATE TABLE Assets (asset_id NUMBER); CREATE TABLE Skills_Required_To_Fix (part_fault_id NUMBER, skill_id NUMBER);"
      },
      {
        "question": "Which skill is used to fix the most number of faults?",
        "query": "SELECT t1.skill_id , t1.skill_description FROM skills AS t1 JOIN skills_required_to_fix AS t2 ON t1.skill_id = t2.skill_id GROUP BY t1.skill_id ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Engineer_Skills (skill_id NUMBER, engineer_id NUMBER); CREATE TABLE Maintenance_Engineers (engineer_id NUMBER); CREATE TABLE Third_Party_Companies (company_id NUMBER); CREATE TABLE Fault_Log (asset_id NUMBER, fault_description TEXT, fault_log_entry_id NUMBER); CREATE TABLE Skills (skill_description TEXT, skill_id NUMBER, skill_code TEXT); CREATE TABLE Parts (part_id NUMBER); CREATE TABLE Skills_Required_To_Fix (part_fault_id NUMBER, skill_id NUMBER); CREATE TABLE Assets (asset_id NUMBER); CREATE TABLE Staff (staff_id NUMBER); CREATE TABLE Part_Faults (fault_description TEXT, part_fault_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show chargeable amount for every part.",
        "query": "SELECT chargeable_amount FROM parts",
        "schema": "CREATE TABLE Parts (chargeable_amount TEXT, part_id NUMBER, part_name TEXT, chargeable_yn TEXT); CREATE TABLE Maintenance_Engineers (engineer_id NUMBER); CREATE TABLE Asset_Parts (asset_id NUMBER, part_id NUMBER); CREATE TABLE Assets (asset_id NUMBER); CREATE TABLE Part_Faults (part_fault_id NUMBER, part_id NUMBER);"
      },
      {
        "question": "Order them by chargeable amount in ascending order.",
        "query": "SELECT chargeable_amount FROM parts ORDER BY chargeable_amount ASC",
        "schema": "CREATE TABLE Parts (chargeable_amount TEXT, part_name TEXT, chargeable_yn TEXT, part_id NUMBER); CREATE TABLE Maintenance_Engineers (engineer_id NUMBER); CREATE TABLE Assets (asset_id NUMBER); CREATE TABLE Asset_Parts (asset_id NUMBER, part_id NUMBER); CREATE TABLE Part_Faults (part_fault_id NUMBER, part_id NUMBER);"
      },
      {
        "question": "Show me the id and chargeable amount of the part with the least chargeable amount.",
        "query": "SELECT part_id , chargeable_amount FROM parts ORDER BY chargeable_amount ASC LIMIT 1",
        "schema": "CREATE TABLE Asset_Parts (asset_id NUMBER, part_id NUMBER); CREATE TABLE Maintenance_Engineers (engineer_id NUMBER); CREATE TABLE Assets (asset_id NUMBER); CREATE TABLE Part_Faults (part_id NUMBER, part_fault_id NUMBER); CREATE TABLE Parts (chargeable_amount TEXT, chargeable_yn TEXT, part_id NUMBER, part_name TEXT);"
      }
    ],
    [
      {
        "question": "Show me the names of companies that started the five earliest maintenance contracts.",
        "query": "SELECT t1.company_name FROM third_party_companies AS t1 JOIN maintenance_contracts AS t2 ON t1.company_id = t2.maintenance_contract_company_id ORDER BY t2.contract_start_date ASC LIMIT 5",
        "schema": "CREATE TABLE Assets (supplier_company_id NUMBER, maintenance_contract_id NUMBER); CREATE TABLE Staff (staff_name TEXT, staff_id NUMBER); CREATE TABLE Maintenance_Contracts (maintenance_contract_id NUMBER, contract_end_date TIME, contract_start_date TIME, maintenance_contract_company_id NUMBER); CREATE TABLE Maintenance_Engineers (first_name TEXT, last_name TEXT, company_id NUMBER); CREATE TABLE Third_Party_Companies (company_id NUMBER, company_name TEXT, company_type TEXT);"
      },
      {
        "question": "Show me the same for the earliest one.",
        "query": "SELECT t1.company_name FROM third_party_companies AS t1 JOIN maintenance_contracts AS t2 ON t1.company_id = t2.maintenance_contract_company_id ORDER BY t2.contract_start_date ASC LIMIT 1",
        "schema": "CREATE TABLE Third_Party_Companies (company_type TEXT, company_name TEXT, company_id NUMBER); CREATE TABLE Staff (staff_id NUMBER, staff_name TEXT); CREATE TABLE Assets (supplier_company_id NUMBER, maintenance_contract_id NUMBER); CREATE TABLE Maintenance_Contracts (maintenance_contract_company_id NUMBER, contract_end_date TIME, maintenance_contract_id NUMBER, contract_start_date TIME); CREATE TABLE Maintenance_Engineers (last_name TEXT, company_id NUMBER, first_name TEXT);"
      }
    ],
    [
      {
        "question": "List gender of each staff.",
        "query": "SELECT gender FROM staff",
        "schema": "CREATE TABLE Staff (staff_name TEXT, gender TEXT, staff_id NUMBER, other_staff_details TEXT);"
      },
      {
        "question": "Which gender do most staff members have?",
        "query": "SELECT gender FROM staff GROUP BY gender ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Staff (gender TEXT, staff_id NUMBER, other_staff_details TEXT, staff_name TEXT);"
      }
    ],
    [
      {
        "question": "Show me engineers each staff has contacted. List the names of contact staff and engineers.",
        "query": "SELECT t1.staff_name , t3.first_name FROM staff AS t1 JOIN engineer_visits AS t2 ON t1.staff_id = t2.contact_staff_id JOIN maintenance_engineers AS t3 ON t2.engineer_id = t3.engineer_id GROUP BY t1.staff_name",
        "schema": "CREATE TABLE Engineer_Skills (engineer_id NUMBER); CREATE TABLE Engineer_Visits (contact_staff_id NUMBER, engineer_visit_id NUMBER, engineer_id NUMBER); CREATE TABLE Staff (staff_name TEXT, staff_id NUMBER); CREATE TABLE Maintenance_Engineers (first_name TEXT, engineer_id NUMBER, last_name TEXT);"
      },
      {
        "question": "How many engineers did each staff contact? List the count instead of the names of engineers.",
        "query": "SELECT t1.staff_name , count(*) FROM staff AS t1 JOIN engineer_visits AS t2 ON t1.staff_id = t2.contact_staff_id GROUP BY t1.staff_name",
        "schema": "CREATE TABLE Engineer_Visits (engineer_visit_id NUMBER, engineer_id NUMBER, contact_staff_id NUMBER); CREATE TABLE Maintenance_Engineers (last_name TEXT, first_name TEXT, engineer_id NUMBER); CREATE TABLE Staff (staff_name TEXT, staff_id NUMBER); CREATE TABLE Engineer_Skills (engineer_id NUMBER);"
      }
    ]
  ],
  "station_weather": [
    [
      {
        "question": "Show me all about stations.",
        "query": "SELECT * FROM station;",
        "schema": "CREATE TABLE route (station_id NUMBER); CREATE TABLE weekly_weather (station_id NUMBER); CREATE TABLE station (local_authority TEXT, network_name TEXT, id NUMBER);"
      },
      {
        "question": "What are the network names?",
        "query": "SELECT network_name FROM station;",
        "schema": "CREATE TABLE station (local_authority TEXT, network_name TEXT, id NUMBER); CREATE TABLE route (station_id NUMBER); CREATE TABLE weekly_weather (station_id NUMBER);"
      },
      {
        "question": "How about the local authorities and services provided by all stations.",
        "query": "SELECT local_authority , services FROM station;",
        "schema": "CREATE TABLE route (station_id NUMBER); CREATE TABLE station (network_name TEXT, id NUMBER, services TEXT, local_authority TEXT); CREATE TABLE weekly_weather (station_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show me the origin of all trains ordered by time early to late.",
        "query": "SELECT origin FROM train ORDER BY TIME;",
        "schema": "CREATE TABLE train (id NUMBER, time TEXT, origin TEXT);"
      },
      {
        "question": "Now show me the train_number for all trains ordered by time early to late.",
        "query": "SELECT train_number FROM train ORDER BY TIME;",
        "schema": "CREATE TABLE train (origin TEXT, id NUMBER, time TEXT, train_number NUMBER);"
      },
      {
        "question": "Also provide the train_name for each of the result above.",
        "query": "SELECT train_number , name FROM train ORDER BY TIME;",
        "schema": "CREATE TABLE train (train_number NUMBER, origin TEXT, name TEXT, time TEXT, id NUMBER);"
      }
    ],
    [
      {
        "question": "What's time for trains going to Mumbai?",
        "query": "SELECT TIME FROM train WHERE destination = 'Mumbai';",
        "schema": "CREATE TABLE route (train_id NUMBER); CREATE TABLE train (origin TEXT, time TEXT, id NUMBER, destination TEXT);"
      },
      {
        "question": "How about the time and train number for trains going to Chennai?",
        "query": "SELECT TIME , train_number FROM train WHERE destination = 'Chennai';",
        "schema": "CREATE TABLE train (train_number NUMBER, origin TEXT, destination TEXT, time TEXT, id NUMBER); CREATE TABLE route (train_id NUMBER);"
      },
      {
        "question": "Order the result by time.",
        "query": "SELECT TIME , train_number FROM train WHERE destination = 'Chennai' ORDER BY TIME;",
        "schema": "CREATE TABLE train (train_number NUMBER, time TEXT, destination TEXT, id NUMBER, origin TEXT); CREATE TABLE route (train_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show me the train names.",
        "query": "SELECT name FROM train;",
        "schema": "CREATE TABLE train (train_number NUMBER, name TEXT, id NUMBER); CREATE TABLE station (id NUMBER);"
      },
      {
        "question": "How many distinct names are there?",
        "query": "SELECT count(DISTINCT name) FROM train;",
        "schema": "CREATE TABLE station (id NUMBER); CREATE TABLE train (train_number NUMBER, id NUMBER, name TEXT);"
      },
      {
        "question": "How many trains have 'Express' in their names?",
        "query": "SELECT count(*) FROM train WHERE name LIKE \"%Express%\";",
        "schema": "CREATE TABLE route (train_id NUMBER); CREATE TABLE station (id NUMBER); CREATE TABLE train (train_number NUMBER, name TEXT, id NUMBER);"
      }
    ],
    [
      {
        "question": "How many trains are going from Chennai to Guruvayur?",
        "query": "SELECT count(*) FROM train WHERE origin = 'Chennai' AND destination = 'Guruvayur';",
        "schema": "CREATE TABLE station (id NUMBER); CREATE TABLE train (origin TEXT, train_number NUMBER, id NUMBER, name TEXT, destination TEXT); CREATE TABLE route (train_id NUMBER, station_id NUMBER);"
      },
      {
        "question": "What times are they each going?",
        "query": "SELECT TIME FROM train WHERE origin = 'Chennai' AND destination = 'Guruvayur';",
        "schema": "CREATE TABLE route (train_id NUMBER, station_id NUMBER); CREATE TABLE train (train_number NUMBER, destination TEXT, time TEXT, name TEXT, origin TEXT, id NUMBER); CREATE TABLE station (id NUMBER);"
      },
      {
        "question": "Find both train number and time.",
        "query": "SELECT train_number , TIME FROM train WHERE origin = 'Chennai' AND destination = 'Guruvayur';",
        "schema": "CREATE TABLE station (id NUMBER); CREATE TABLE route (station_id NUMBER, train_id NUMBER); CREATE TABLE train (train_number NUMBER, destination TEXT, origin TEXT, name TEXT, id NUMBER, time TEXT);"
      }
    ],
    [
      {
        "question": "What are the origins of all trains?",
        "query": "SELECT origin FROM train;",
        "schema": "CREATE TABLE train (origin TEXT, name TEXT, id NUMBER);"
      },
      {
        "question": "Which origin has the most number of trains?",
        "query": "SELECT origin FROM train GROUP BY origin ORDER BY count(*) DESC LIMIT 1;",
        "schema": "CREATE TABLE train (origin TEXT, id NUMBER, train_number NUMBER, name TEXT);"
      },
      {
        "question": "Find the number of trains starting from each origin.",
        "query": "SELECT origin , count(*) FROM train GROUP BY origin;",
        "schema": "CREATE TABLE train (train_number NUMBER, id NUMBER, origin TEXT, name TEXT);"
      }
    ],
    [
      {
        "question": "Show me the station names.",
        "query": "SELECT network_name FROM station;",
        "schema": "CREATE TABLE route (station_id NUMBER); CREATE TABLE weekly_weather (station_id NUMBER); CREATE TABLE station (network_name TEXT, id NUMBER);"
      },
      {
        "question": "How about the name of trains and the number of stations each runs through?",
        "query": "SELECT t1.name, count(*) FROM train AS t1 JOIN route AS t2 ON t1.id = t2.train_id GROUP BY t2.train_id;",
        "schema": "CREATE TABLE route (train_id NUMBER, station_id NUMBER); CREATE TABLE train (id NUMBER, train_number NUMBER, name TEXT); CREATE TABLE weekly_weather (station_id NUMBER); CREATE TABLE station (network_name TEXT, id NUMBER);"
      },
      {
        "question": "Of these, return the name with the greatest number of stations.",
        "query": "SELECT t1.name FROM train AS t1 JOIN route AS t2 ON t1.id = t2.train_id GROUP BY t2.train_id ORDER BY count(*) DESC LIMIT 1;",
        "schema": "CREATE TABLE weekly_weather (station_id NUMBER); CREATE TABLE route (train_id NUMBER, station_id NUMBER); CREATE TABLE train (train_number NUMBER, id NUMBER, name TEXT); CREATE TABLE station (id NUMBER, network_name TEXT);"
      }
    ],
    [
      {
        "question": "Can you list the services for each station?",
        "query": "SELECT services FROM station;",
        "schema": "CREATE TABLE route (station_id NUMBER); CREATE TABLE station (services TEXT, id NUMBER, network_name TEXT);"
      },
      {
        "question": "Can you also show the the number of trains for each station?",
        "query": "SELECT count(*) , t1.services FROM station AS t1 JOIN route AS t2 ON t1.id = t2.station_id GROUP BY t2.station_id;",
        "schema": "CREATE TABLE route (station_id NUMBER, train_id NUMBER); CREATE TABLE station (services TEXT, network_name TEXT, id NUMBER); CREATE TABLE train (train_number NUMBER, id NUMBER);"
      },
      {
        "question": "Also include the the station network name.",
        "query": "SELECT count(*) , t1.network_name , t1.services FROM station AS t1 JOIN route AS t2 ON t1.id = t2.station_id GROUP BY t2.station_id;",
        "schema": "CREATE TABLE train (train_number NUMBER, id NUMBER); CREATE TABLE station (services TEXT, network_name TEXT, id NUMBER); CREATE TABLE route (station_id NUMBER, train_id NUMBER);"
      }
    ],
    [
      {
        "question": "What's the average low temperature of Monday?",
        "query": "SELECT avg(low_temperature) FROM weekly_weather WHERE day_of_week = \"Monday\";",
        "schema": "CREATE TABLE station (id NUMBER); CREATE TABLE weekly_weather (station_id NUMBER, day_of_week TEXT, high_temperature NUMBER, low_temperature NUMBER);"
      },
      {
        "question": "How about its average high temperature?",
        "query": "SELECT avg(high_temperature) FROM weekly_weather WHERE day_of_week = \"Monday\";",
        "schema": "CREATE TABLE station (id NUMBER); CREATE TABLE weekly_weather (station_id NUMBER, day_of_week TEXT, high_temperature NUMBER, low_temperature NUMBER);"
      },
      {
        "question": "Show me the average high temperature for each day of week?",
        "query": "SELECT avg(high_temperature) , day_of_week FROM weekly_weather GROUP BY day_of_week;",
        "schema": "CREATE TABLE station (id NUMBER); CREATE TABLE weekly_weather (station_id NUMBER, low_temperature NUMBER, day_of_week TEXT, high_temperature NUMBER);"
      }
    ],
    [
      {
        "question": "Show me the all about weather for all stations.",
        "query": "SELECT * FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id = t2.id;",
        "schema": "CREATE TABLE weekly_weather (station_id NUMBER, precipitation NUMBER, day_of_week TEXT, high_temperature NUMBER); CREATE TABLE station (network_name TEXT, id NUMBER);"
      },
      {
        "question": "What's the maximum low temperature and average precipitation for Bushey station?",
        "query": "SELECT max(t1.low_temperature) , avg(t1.precipitation) FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id = t2.id WHERE t2.network_name = \"Bushey\";",
        "schema": "CREATE TABLE weekly_weather (precipitation NUMBER, day_of_week TEXT, low_temperature NUMBER, high_temperature NUMBER, station_id NUMBER); CREATE TABLE station (id NUMBER, network_name TEXT); CREATE TABLE route (station_id NUMBER);"
      },
      {
        "question": "How about for the Amersham station?",
        "query": "SELECT max(t1.low_temperature) , avg(t1.precipitation) FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id = t2.id WHERE t2.network_name = \"Amersham\";",
        "schema": "CREATE TABLE station (network_name TEXT, id NUMBER); CREATE TABLE weekly_weather (day_of_week TEXT, low_temperature NUMBER, high_temperature NUMBER, precipitation NUMBER, station_id NUMBER); CREATE TABLE route (station_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show me the names of trains that run through a station serviced by Greater Anglia.",
        "query": "SELECT t3.name FROM station AS t1 JOIN route AS t2 ON t1.id = t2.station_id JOIN train AS t3 ON t2.train_id = t3.id WHERE t1.services = \"Greater Anglia\";",
        "schema": "CREATE TABLE train (train_number NUMBER, name TEXT, id NUMBER); CREATE TABLE route (station_id NUMBER, train_id NUMBER); CREATE TABLE station (network_name TEXT, services TEXT, id NUMBER, local_authority TEXT);"
      },
      {
        "question": "How about stations for local authority Chiltern?",
        "query": "SELECT t3.name FROM station AS t1 JOIN route AS t2 ON t1.id = t2.station_id JOIN train AS t3 ON t2.train_id = t3.id WHERE t1.local_authority = \"Chiltern\";",
        "schema": "CREATE TABLE station (local_authority TEXT, network_name TEXT, id NUMBER, services TEXT); CREATE TABLE train (train_number NUMBER, origin TEXT, id NUMBER, name TEXT); CREATE TABLE route (station_id NUMBER, train_id NUMBER);"
      },
      {
        "question": "For these, also provide the times of each train.",
        "query": "SELECT t3.name , t3.time FROM station AS t1 JOIN route AS t2 ON t1.id = t2.station_id JOIN train AS t3 ON t2.train_id = t3.id WHERE t1.local_authority = \"Chiltern\";",
        "schema": "CREATE TABLE route (train_id NUMBER, station_id NUMBER); CREATE TABLE station (local_authority TEXT, network_name TEXT, id NUMBER, services TEXT); CREATE TABLE train (interval TEXT, name TEXT, id NUMBER, train_number NUMBER, origin TEXT, time TEXT);"
      }
    ],
    [
      {
        "question": "Show me the services provided by all stations.",
        "query": "SELECT services FROM station;",
        "schema": "CREATE TABLE route (station_id NUMBER); CREATE TABLE station (id NUMBER, network_name TEXT, services TEXT);"
      },
      {
        "question": "How about the number of services?",
        "query": "SELECT count(services) FROM station;",
        "schema": "CREATE TABLE route (station_id NUMBER); CREATE TABLE station (network_name TEXT, services TEXT, id NUMBER);"
      },
      {
        "question": "How many distinct ones are there?",
        "query": "SELECT count(DISTINCT services) FROM station;",
        "schema": "CREATE TABLE route (station_id NUMBER); CREATE TABLE station (services TEXT, network_name TEXT, id NUMBER);"
      }
    ],
    [
      {
        "question": "What's the high temperature of each station?",
        "query": "SELECT t1.high_temperature FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id = t2.id;",
        "schema": "CREATE TABLE weekly_weather (high_temperature NUMBER, station_id NUMBER, low_temperature NUMBER); CREATE TABLE station (id NUMBER, network_name TEXT); CREATE TABLE route (station_id NUMBER);"
      },
      {
        "question": "What's the id of the station with highest average high temperature?",
        "query": "SELECT t2.id FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id = t2.id GROUP BY t1.station_id ORDER BY avg(high_temperature) DESC LIMIT 1",
        "schema": "CREATE TABLE station (network_name TEXT, id NUMBER); CREATE TABLE weekly_weather (high_temperature NUMBER, station_id NUMBER, low_temperature NUMBER); CREATE TABLE route (station_id NUMBER);"
      },
      {
        "question": "Also show me the local authority of this station.",
        "query": "SELECT t2.id , t2.local_authority FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id = t2.id GROUP BY t1.station_id ORDER BY avg(high_temperature) DESC LIMIT 1",
        "schema": "CREATE TABLE route (station_id NUMBER); CREATE TABLE station (network_name TEXT, local_authority TEXT, id NUMBER); CREATE TABLE weekly_weather (high_temperature NUMBER, low_temperature NUMBER, station_id NUMBER);"
      }
    ],
    [
      {
        "question": "List the minimum precipitation of each station.",
        "query": "SELECT min(t1.precipitation) FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id = t2.id GROUP BY t1.station_id;",
        "schema": "CREATE TABLE station (id NUMBER, network_name TEXT); CREATE TABLE route (station_id NUMBER); CREATE TABLE weekly_weather (precipitation NUMBER, station_id NUMBER);"
      },
      {
        "question": "How about the max precipitation? Show station id as well.",
        "query": "SELECT t2.id, max(t1.precipitation) FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id = t2.id GROUP BY t1.station_id;",
        "schema": "CREATE TABLE weekly_weather (precipitation NUMBER, station_id NUMBER); CREATE TABLE station (network_name TEXT, id NUMBER); CREATE TABLE route (station_id NUMBER);"
      },
      {
        "question": "Find the id and local authority of the station whose maximum precipitation is higher than 50.",
        "query": "SELECT t2.id , t2.local_authority FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id = t2.id GROUP BY t1.station_id HAVING max(t1.precipitation) > 50;",
        "schema": "CREATE TABLE weekly_weather (high_temperature NUMBER, station_id NUMBER, precipitation NUMBER); CREATE TABLE route (station_id NUMBER); CREATE TABLE station (id NUMBER, local_authority TEXT, network_name TEXT);"
      }
    ],
    [
      {
        "question": "What's average low_temperature per week?",
        "query": "SELECT avg(low_temperature) FROM weekly_weather;",
        "schema": "CREATE TABLE station (id NUMBER); CREATE TABLE weekly_weather (low_temperature NUMBER, day_of_week TEXT, station_id NUMBER, high_temperature NUMBER); CREATE TABLE train (id NUMBER);"
      },
      {
        "question": "How about the average wind speed per week in miles per hour?",
        "query": "SELECT avg(wind_speed_mph) FROM weekly_weather;",
        "schema": "CREATE TABLE train (id NUMBER); CREATE TABLE station (id NUMBER); CREATE TABLE weekly_weather (high_temperature NUMBER, low_temperature NUMBER, station_id NUMBER, wind_speed_mph NUMBER, day_of_week TEXT);"
      },
      {
        "question": "Show the weekly lowest low temperature and weekly highest wind speed in miles per hour.",
        "query": "SELECT min(low_temperature) , max(wind_speed_mph) FROM weekly_weather;",
        "schema": "CREATE TABLE weekly_weather (high_temperature NUMBER, wind_speed_mph NUMBER, low_temperature NUMBER, station_id NUMBER, day_of_week TEXT); CREATE TABLE train (id NUMBER); CREATE TABLE station (id NUMBER);"
      }
    ]
  ],
  "culture_company": [
    [
      {
        "question": "Show information for all book clubs.",
        "query": "SELECT * FROM book_club",
        "schema": "CREATE TABLE book_club (Book_Title TEXT, Category TEXT, book_club_id NUMBER, Author_or_Editor TEXT); CREATE TABLE culture_company (book_club_id TEXT);"
      },
      {
        "question": "How many of them?",
        "query": "SELECT count(*) FROM book_club",
        "schema": "CREATE TABLE culture_company (book_club_id TEXT); CREATE TABLE book_club (Author_or_Editor TEXT, book_club_id NUMBER, Book_Title TEXT, Publisher TEXT, Category TEXT);"
      }
    ],
    [
      {
        "question": "Show the title for all books.",
        "query": "SELECT book_title FROM book_club",
        "schema": "CREATE TABLE movie (Title TEXT); CREATE TABLE book_club (book_club_id NUMBER, Book_Title TEXT);"
      },
      {
        "question": "Also show the authors or editors for each of them.",
        "query": "SELECT book_title , author_or_editor FROM book_club",
        "schema": "CREATE TABLE movie (Title TEXT); CREATE TABLE book_club (Book_Title TEXT, Author_or_Editor TEXT, book_club_id NUMBER, Publisher TEXT);"
      },
      {
        "question": "How about the results for those published after the year 1989?",
        "query": "SELECT book_title , author_or_editor FROM book_club WHERE YEAR > 1989",
        "schema": "CREATE TABLE book_club (book_club_id NUMBER, Book_Title TEXT, Publisher TEXT, Author_or_Editor TEXT, Result TEXT, Year NUMBER); CREATE TABLE movie (Title TEXT, Year NUMBER);"
      }
    ],
    [
      {
        "question": "Show information for all books.",
        "query": "SELECT * FROM book_club",
        "schema": "CREATE TABLE culture_company (book_club_id TEXT); CREATE TABLE book_club (book_club_id NUMBER, Book_Title TEXT);"
      },
      {
        "question": "What are the distinct publishers for them?",
        "query": "SELECT DISTINCT publisher FROM book_club",
        "schema": "CREATE TABLE culture_company (book_club_id TEXT); CREATE TABLE book_club (Category TEXT, Author_or_Editor TEXT, book_club_id NUMBER, Publisher TEXT, Book_Title TEXT);"
      }
    ],
    [
      {
        "question": "Show the titles of all books.",
        "query": "SELECT book_title FROM book_club",
        "schema": "CREATE TABLE book_club (book_club_id NUMBER, Book_Title TEXT); CREATE TABLE movie (Title TEXT);"
      },
      {
        "question": "Also show the year published and the publisher.",
        "query": "SELECT YEAR , book_title , publisher FROM book_club",
        "schema": "CREATE TABLE movie (Title TEXT, Year NUMBER); CREATE TABLE book_club (book_club_id NUMBER, Publisher TEXT, Book_Title TEXT, Year NUMBER);"
      },
      {
        "question": "Order the results in descending order by year.",
        "query": "SELECT YEAR , book_title , publisher FROM book_club ORDER BY YEAR DESC",
        "schema": "CREATE TABLE movie (Title TEXT, Year NUMBER); CREATE TABLE book_club (Result TEXT, Year NUMBER, book_club_id NUMBER, Book_Title TEXT, Publisher TEXT);"
      }
    ],
    [
      {
        "question": "Show the publisher for all books.",
        "query": "SELECT publisher FROM book_club",
        "schema": "CREATE TABLE culture_company (book_club_id TEXT); CREATE TABLE book_club (Publisher TEXT, book_club_id NUMBER, Book_Title TEXT, Author_or_Editor TEXT);"
      },
      {
        "question": "Count the number of books published by each of them.",
        "query": "SELECT publisher , count(*) FROM book_club GROUP BY publisher",
        "schema": "CREATE TABLE book_club (Book_Title TEXT, Author_or_Editor TEXT, Publisher TEXT, book_club_id NUMBER); CREATE TABLE culture_company (book_club_id TEXT);"
      }
    ],
    [
      {
        "question": "Show the publisher for all books.",
        "query": "SELECT publisher FROM book_club",
        "schema": "CREATE TABLE culture_company (book_club_id TEXT); CREATE TABLE book_club (Book_Title TEXT, Publisher TEXT, Author_or_Editor TEXT, book_club_id NUMBER);"
      },
      {
        "question": "For each of them, how many books are published?",
        "query": "SELECT publisher, count(*) FROM book_club GROUP BY publisher",
        "schema": "CREATE TABLE book_club (book_club_id NUMBER, Author_or_Editor TEXT, Book_Title TEXT, Publisher TEXT); CREATE TABLE culture_company (book_club_id TEXT);"
      },
      {
        "question": "Can you order them by the count in descending order?",
        "query": "SELECT publisher FROM book_club GROUP BY publisher ORDER BY count(*) DESC",
        "schema": "CREATE TABLE book_club (Book_Title TEXT, book_club_id NUMBER, Author_or_Editor TEXT, Publisher TEXT); CREATE TABLE culture_company (book_club_id TEXT);"
      },
      {
        "question": "Which one has the most?",
        "query": "SELECT publisher FROM book_club GROUP BY publisher ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE culture_company (book_club_id TEXT); CREATE TABLE book_club (book_club_id NUMBER, Publisher TEXT, Author_or_Editor TEXT, Book_Title TEXT);"
      }
    ],
    [
      {
        "question": "How many books are there in total?",
        "query": "SELECT count(*) FROM book_club",
        "schema": "CREATE TABLE movie (movie_id NUMBER); CREATE TABLE culture_company (book_club_id TEXT); CREATE TABLE book_club (Category TEXT, Author_or_Editor TEXT, book_club_id NUMBER, Book_Title TEXT);"
      },
      {
        "question": "Can you break down the count by the book category?",
        "query": "SELECT category , count(*) FROM book_club GROUP BY category",
        "schema": "CREATE TABLE movie (movie_id NUMBER); CREATE TABLE book_club (book_club_id NUMBER, Category TEXT, Author_or_Editor TEXT, Book_Title TEXT); CREATE TABLE culture_company (book_club_id TEXT);"
      }
    ],
    [
      {
        "question": "Show all categories for books.",
        "query": "SELECT category FROM book_club",
        "schema": "CREATE TABLE book_club (Category TEXT, book_club_id NUMBER, Book_Title TEXT);"
      },
      {
        "question": "For each of them, count the number of books published after 1989.",
        "query": "SELECT category, count(*) FROM book_club WHERE YEAR > 1989 GROUP BY category",
        "schema": "CREATE TABLE book_club (Year NUMBER, Publisher TEXT, Category TEXT, book_club_id NUMBER, Book_Title TEXT); CREATE TABLE movie (Year NUMBER);"
      },
      {
        "question": "Which categories have at least two such books?",
        "query": "SELECT category FROM book_club WHERE YEAR > 1989 GROUP BY category HAVING count(*) >= 2",
        "schema": "CREATE TABLE book_club (Category TEXT, Book_Title TEXT, book_club_id NUMBER, Year NUMBER, Publisher TEXT); CREATE TABLE movie (Year NUMBER);"
      }
    ],
    [
      {
        "question": "Show the publisher for all books.",
        "query": "SELECT publisher FROM book_club",
        "schema": "CREATE TABLE book_club (Author_or_Editor TEXT, Book_Title TEXT, book_club_id NUMBER, Publisher TEXT); CREATE TABLE culture_company (book_club_id TEXT);"
      },
      {
        "question": "Who published a book in 1989?",
        "query": "SELECT publisher FROM book_club WHERE YEAR = 1989",
        "schema": "CREATE TABLE movie (Year NUMBER); CREATE TABLE culture_company (book_club_id TEXT); CREATE TABLE book_club (Publisher TEXT, Book_Title TEXT, book_club_id NUMBER, Year NUMBER, Author_or_Editor TEXT);"
      },
      {
        "question": "Among those, who also published a book in 1990?",
        "query": "SELECT publisher FROM book_club WHERE YEAR = 1989 INTERSECT SELECT publisher FROM book_club WHERE YEAR = 1990",
        "schema": "CREATE TABLE book_club (Year NUMBER, Author_or_Editor TEXT, book_club_id NUMBER, Book_Title TEXT, Publisher TEXT); CREATE TABLE movie (Year NUMBER); CREATE TABLE culture_company (book_club_id TEXT);"
      }
    ],
    [
      {
        "question": "Show publishers that published a book in 1989.",
        "query": "SELECT publisher FROM book_club WHERE YEAR = 1989",
        "schema": "CREATE TABLE movie (Year NUMBER, movie_id NUMBER); CREATE TABLE book_club (Book_Title TEXT, book_club_id NUMBER, Year NUMBER, Publisher TEXT); CREATE TABLE culture_company (Incorporated_in TEXT, book_club_id TEXT, Company_name TEXT);"
      },
      {
        "question": "Show all publishers who do not have such a book.",
        "query": "SELECT publisher FROM book_club EXCEPT SELECT publisher FROM book_club WHERE YEAR = 1989",
        "schema": "CREATE TABLE book_club (Year NUMBER, Author_or_Editor TEXT, book_club_id NUMBER, Publisher TEXT, Book_Title TEXT); CREATE TABLE movie (Year NUMBER, movie_id NUMBER); CREATE TABLE culture_company (book_club_id TEXT, Company_name TEXT, Incorporated_in TEXT);"
      }
    ],
    [
      {
        "question": "Show the title and year for all movies.",
        "query": "SELECT title , YEAR FROM movie",
        "schema": "CREATE TABLE book_club (Book_Title TEXT, Year NUMBER); CREATE TABLE movie (Title TEXT, Year NUMBER);"
      },
      {
        "question": "Also show the director for each of them.",
        "query": "SELECT title , YEAR , director FROM movie",
        "schema": "CREATE TABLE book_club (Book_Title TEXT, Year NUMBER); CREATE TABLE movie (Title TEXT, Director TEXT, Year NUMBER);"
      },
      {
        "question": "Order the results by their budgets.",
        "query": "SELECT title , YEAR , director FROM movie ORDER BY budget_million",
        "schema": "CREATE TABLE movie (Director TEXT, Title TEXT, Budget_million NUMBER, Year NUMBER); CREATE TABLE book_club (Result TEXT, Book_Title TEXT, Year NUMBER);"
      }
    ],
    [
      {
        "question": "Show the director for all movies.",
        "query": "SELECT director FROM movie",
        "schema": "CREATE TABLE book_club (book_club_id NUMBER); CREATE TABLE movie (movie_id NUMBER, Director TEXT, Title TEXT);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT COUNT (DISTINCT director) FROM movie",
        "schema": "CREATE TABLE movie (movie_id NUMBER, Director TEXT, Title TEXT); CREATE TABLE book_club (book_club_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show the title and director for all movies.",
        "query": "SELECT title , director FROM movie",
        "schema": "CREATE TABLE movie (Title TEXT, movie_id NUMBER, Director TEXT); CREATE TABLE book_club (Book_Title TEXT);"
      },
      {
        "question": "Only show the results for those in the year 2000 or before.",
        "query": "SELECT title , director FROM movie WHERE YEAR <= 2000",
        "schema": "CREATE TABLE movie (Director TEXT, Title TEXT, Year NUMBER, movie_id NUMBER); CREATE TABLE book_club (Year NUMBER, Result TEXT, Book_Title TEXT);"
      },
      {
        "question": "Order the results by the worldwide gross in descending order.",
        "query": "SELECT title , director FROM movie WHERE YEAR <= 2000 ORDER BY gross_worldwide DESC",
        "schema": "CREATE TABLE book_club (Result TEXT, Year NUMBER, Book_Title TEXT); CREATE TABLE movie (Year NUMBER, Title TEXT, Director TEXT, Gross_worldwide NUMBER, movie_id NUMBER);"
      },
      {
        "question": "Which one has the highest?",
        "query": "SELECT title , director FROM movie WHERE YEAR <= 2000 ORDER BY gross_worldwide DESC LIMIT 1",
        "schema": "CREATE TABLE movie (Director TEXT, movie_id NUMBER, Gross_worldwide NUMBER, Title TEXT, Year NUMBER); CREATE TABLE book_club (Result TEXT, Book_Title TEXT, Year NUMBER);"
      }
    ],
    [
      {
        "question": "Show all director names.",
        "query": "SELECT director FROM movie",
        "schema": "CREATE TABLE book_club (Author_or_Editor TEXT); CREATE TABLE movie (movie_id NUMBER, Director TEXT, Title TEXT);"
      },
      {
        "question": "Who has a movie in 1999?",
        "query": "SELECT director FROM movie WHERE YEAR = 1999",
        "schema": "CREATE TABLE movie (Director TEXT, movie_id NUMBER, Year NUMBER, Title TEXT); CREATE TABLE book_club (Author_or_Editor TEXT, Year NUMBER);"
      },
      {
        "question": "Who has a movie in 2000?",
        "query": "SELECT director FROM movie WHERE YEAR = 2000",
        "schema": "CREATE TABLE book_club (Author_or_Editor TEXT, Year NUMBER); CREATE TABLE movie (Year NUMBER, Director TEXT, movie_id NUMBER, Title TEXT);"
      },
      {
        "question": "Who has movies in both years?",
        "query": "SELECT director FROM movie WHERE YEAR = 2000 INTERSECT SELECT director FROM movie WHERE YEAR = 1999",
        "schema": "CREATE TABLE book_club (Author_or_Editor TEXT, Year NUMBER); CREATE TABLE movie (movie_id NUMBER, Year NUMBER, Director TEXT, Title TEXT);"
      }
    ],
    [
      {
        "question": "Show all director names.",
        "query": "SELECT director FROM movie",
        "schema": "CREATE TABLE book_club (Author_or_Editor TEXT); CREATE TABLE movie (Title TEXT, Director TEXT, movie_id NUMBER);"
      },
      {
        "question": "Among them, who has a movie in 1999?",
        "query": "SELECT director FROM movie WHERE YEAR = 1999",
        "schema": "CREATE TABLE book_club (Author_or_Editor TEXT, Year NUMBER); CREATE TABLE movie (movie_id NUMBER, Title TEXT, Year NUMBER, Director TEXT);"
      },
      {
        "question": "Also show those who have a movie in 2000.",
        "query": "SELECT director FROM movie WHERE YEAR = 1999 OR YEAR = 2000",
        "schema": "CREATE TABLE book_club (Year NUMBER, Author_or_Editor TEXT); CREATE TABLE movie (Year NUMBER, Title TEXT, Director TEXT, movie_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show the budget for all movies.",
        "query": "SELECT budget_million FROM movie",
        "schema": "CREATE TABLE book_club (book_club_id NUMBER); CREATE TABLE movie (movie_id NUMBER, Title TEXT, Budget_million NUMBER);"
      },
      {
        "question": "What about the budget for those before 2000?",
        "query": "SELECT budget_million FROM movie WHERE YEAR < 2000",
        "schema": "CREATE TABLE book_club (Year NUMBER, book_club_id NUMBER); CREATE TABLE movie (Title TEXT, Budget_million NUMBER, Year NUMBER, movie_id NUMBER);"
      },
      {
        "question": "Show their average, maximum, and minimum budget.",
        "query": "SELECT avg(budget_million) , max(budget_million) , min(budget_million) FROM movie WHERE YEAR < 2000",
        "schema": "CREATE TABLE movie (Budget_million NUMBER, Title TEXT, Year NUMBER, movie_id NUMBER); CREATE TABLE book_club (Year NUMBER, book_club_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show all company names.",
        "query": "SELECT company_name FROM culture_company",
        "schema": "CREATE TABLE movie (movie_id NUMBER); CREATE TABLE culture_company (Type TEXT, book_club_id TEXT, movie_id TEXT, Company_name TEXT); CREATE TABLE book_club (book_club_id NUMBER, Publisher TEXT);"
      },
      {
        "question": "Only show the companies with a book.",
        "query": "SELECT t1.company_name FROM culture_company AS t1 JOIN book_club AS t2 ON t1.book_club_id = t2.book_club_id",
        "schema": "CREATE TABLE book_club (Publisher TEXT, Book_Title TEXT, book_club_id NUMBER); CREATE TABLE culture_company (movie_id TEXT, Company_name TEXT, Type TEXT, Incorporated_in TEXT, book_club_id TEXT); CREATE TABLE movie (movie_id NUMBER);"
      },
      {
        "question": "What about the companies with a book published by Alyson?",
        "query": "SELECT t1.company_name FROM culture_company AS t1 JOIN book_club AS t2 ON t1.book_club_id = t2.book_club_id WHERE t2.publisher = 'Alyson'",
        "schema": "CREATE TABLE culture_company (Incorporated_in TEXT, book_club_id TEXT, Type TEXT, movie_id TEXT, Company_name TEXT); CREATE TABLE movie (movie_id NUMBER); CREATE TABLE book_club (Book_Title TEXT, book_club_id NUMBER, Publisher TEXT);"
      }
    ],
    [
      {
        "question": "Show all movie titles.",
        "query": "SELECT title FROM movie",
        "schema": "CREATE TABLE culture_company (movie_id TEXT); CREATE TABLE movie (movie_id NUMBER, Title TEXT); CREATE TABLE book_club (Book_Title TEXT);"
      },
      {
        "question": "Show all movie titles for all companies in China.",
        "query": "SELECT t1.title FROM movie AS t1 JOIN culture_company AS t2 ON t1.movie_id = t2.movie_id WHERE t2.incorporated_in = 'China'",
        "schema": "CREATE TABLE movie (movie_id NUMBER, Title TEXT); CREATE TABLE culture_company (Incorporated_in TEXT, Type TEXT, Company_name TEXT, movie_id TEXT); CREATE TABLE book_club (book_club_id NUMBER, Publisher TEXT, Book_Title TEXT);"
      },
      {
        "question": "For those companies, also show all the book titles.",
        "query": "SELECT t1.title , t3.book_title FROM movie AS t1 JOIN culture_company AS t2 ON t1.movie_id = t2.movie_id JOIN book_club AS t3 ON t3.book_club_id = t2.book_club_id WHERE t2.incorporated_in = 'China'",
        "schema": "CREATE TABLE culture_company (Type TEXT, book_club_id TEXT, movie_id TEXT, Incorporated_in TEXT, Company_name TEXT); CREATE TABLE book_club (Publisher TEXT, Book_Title TEXT, book_club_id NUMBER); CREATE TABLE movie (Title TEXT, movie_id NUMBER);"
      }
    ]
  ],
  "architecture": [
    [
      {
        "question": "Find all female architects.",
        "query": "SELECT * FROM architect WHERE gender = 'female'",
        "schema": "CREATE TABLE architect (name TEXT, id TEXT, gender TEXT);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT count(*) FROM architect WHERE gender = 'female'",
        "schema": "CREATE TABLE architect (gender TEXT, id TEXT, name TEXT); CREATE TABLE mill (architect_id NUMBER);"
      }
    ],
    [
      {
        "question": "Return all the male architects.",
        "query": "SELECT * FROM architect WHERE gender = 'male'",
        "schema": "CREATE TABLE architect (name TEXT, gender TEXT, id TEXT);"
      },
      {
        "question": "What are their names, nationalities and ids?",
        "query": "SELECT name , nationality , id FROM architect WHERE gender = 'male'",
        "schema": "CREATE TABLE architect (nationality TEXT, name TEXT, id TEXT, gender TEXT); CREATE TABLE mill (name TEXT);"
      },
      {
        "question": "Sort them by name.",
        "query": "SELECT name , nationality , id FROM architect WHERE gender = 'male' ORDER BY name",
        "schema": "CREATE TABLE architect (gender TEXT, name TEXT, id TEXT, nationality TEXT); CREATE TABLE mill (name TEXT);"
      }
    ],
    [
      {
        "question": "What is the length in meters of each bridge?",
        "query": "SELECT length_meters FROM bridge",
        "schema": "CREATE TABLE bridge (length_feet NUMBER, name TEXT, length_meters NUMBER, id NUMBER);"
      },
      {
        "question": "Find the maximum length.",
        "query": "SELECT max(length_meters) FROM bridge",
        "schema": "CREATE TABLE bridge (length_feet NUMBER, name TEXT, id NUMBER, length_meters NUMBER);"
      },
      {
        "question": "Show the maximum length in meters of the bridges and the name of the architect that made it.",
        "query": "SELECT max(t1.length_meters) , t2.name FROM bridge AS t1 JOIN architect AS t2 ON t1.architect_id = t2.id",
        "schema": "CREATE TABLE architect (id TEXT, name TEXT); CREATE TABLE mill (architect_id NUMBER); CREATE TABLE bridge (name TEXT, architect_id NUMBER, length_feet NUMBER, id NUMBER, length_meters NUMBER);"
      }
    ],
    [
      {
        "question": "What is the length in feet of each bridge?",
        "query": "SELECT length_feet FROM bridge",
        "schema": "CREATE TABLE bridge (id NUMBER, length_meters NUMBER, name TEXT, length_feet NUMBER);"
      },
      {
        "question": "Find the average length.",
        "query": "SELECT avg(length_meters) FROM bridge",
        "schema": "CREATE TABLE bridge (name TEXT, length_feet NUMBER, length_meters NUMBER, id NUMBER);"
      }
    ],
    [
      {
        "question": "What are the names of all the mills?",
        "query": "SELECT name FROM mill",
        "schema": "CREATE TABLE architect (name TEXT, id TEXT); CREATE TABLE mill (architect_id NUMBER, id NUMBER, name TEXT);"
      },
      {
        "question": "What are the names of all the mills of 'Grondzeiler' type?",
        "query": "SELECT name FROM mill WHERE TYPE = 'Grondzeiler'",
        "schema": "CREATE TABLE architect (id TEXT, name TEXT); CREATE TABLE mill (architect_id NUMBER, type TEXT, name TEXT, id NUMBER);"
      },
      {
        "question": "Also show the years that they were built.",
        "query": "SELECT name , built_year FROM mill WHERE TYPE = 'Grondzeiler'",
        "schema": "CREATE TABLE architect (name TEXT, id TEXT); CREATE TABLE mill (type TEXT, architect_id NUMBER, id NUMBER, name TEXT, built_year NUMBER);"
      }
    ],
    [
      {
        "question": "What are the ids of the architects who built a mill?",
        "query": "SELECT architect_id FROM mill",
        "schema": "CREATE TABLE mill (id NUMBER, architect_id NUMBER); CREATE TABLE bridge (architect_id NUMBER); CREATE TABLE architect (name TEXT, id TEXT);"
      },
      {
        "question": "What are all their distinct names and nationalities?",
        "query": "SELECT DISTINCT t1.name , t1.nationality FROM architect AS t1 JOIN mill AS t2 ON t1.id = t2.architect_id",
        "schema": "CREATE TABLE architect (name TEXT, nationality TEXT, id TEXT); CREATE TABLE mill (id NUMBER, name TEXT, architect_id NUMBER); CREATE TABLE bridge (architect_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show the information for all mills.",
        "query": "SELECT * FROM mill",
        "schema": "CREATE TABLE architect (id TEXT, name TEXT); CREATE TABLE mill (name TEXT, type TEXT, architect_id NUMBER, id NUMBER);"
      },
      {
        "question": "Which mills are not located in 'Donceel'?",
        "query": "SELECT * FROM mill WHERE LOCATION != 'Donceel'",
        "schema": "CREATE TABLE architect (name TEXT, id TEXT); CREATE TABLE bridge (location TEXT); CREATE TABLE mill (type TEXT, name TEXT, id NUMBER, architect_id NUMBER, location TEXT);"
      },
      {
        "question": "What are their names?",
        "query": "SELECT name FROM mill WHERE LOCATION != 'Donceel'",
        "schema": "CREATE TABLE bridge (location TEXT); CREATE TABLE mill (id NUMBER, name TEXT, location TEXT, type TEXT, architect_id NUMBER); CREATE TABLE architect (name TEXT, id TEXT);"
      }
    ],
    [
      {
        "question": "Which architects have nationality 'American' or 'Canadian'?",
        "query": "SELECT * FROM architect WHERE nationality = 'American' OR nationality = 'Canadian'",
        "schema": "CREATE TABLE architect (nationality TEXT, id TEXT, name TEXT); CREATE TABLE mill (architect_id NUMBER);"
      },
      {
        "question": "Find all mills that are built by these architects.",
        "query": "SELECT * FROM mill AS t1 JOIN architect AS t2 ON t1.architect_id = t2.id WHERE t2.nationality = 'American' OR t2.nationality = 'Canadian'",
        "schema": "CREATE TABLE architect (id TEXT, nationality TEXT, name TEXT); CREATE TABLE mill (type TEXT, name TEXT, architect_id NUMBER, id NUMBER);"
      },
      {
        "question": "What are the distinct types of these mills?",
        "query": "SELECT DISTINCT t1.type FROM mill AS t1 JOIN architect AS t2 ON t1.architect_id = t2.id WHERE t2.nationality = 'American' OR t2.nationality = 'Canadian'",
        "schema": "CREATE TABLE architect (id TEXT, nationality TEXT, name TEXT); CREATE TABLE mill (architect_id NUMBER, type TEXT, id NUMBER, name TEXT);"
      }
    ],
    [
      {
        "question": "Find the id of the architect who built each bridge.",
        "query": "SELECT architect_id FROM bridge",
        "schema": "CREATE TABLE mill (architect_id NUMBER); CREATE TABLE architect (name TEXT, id TEXT); CREATE TABLE bridge (architect_id NUMBER, name TEXT, id NUMBER);"
      },
      {
        "question": "How many bridges did each one build?",
        "query": "SELECT count(*) FROM bridge GROUP BY architect_id",
        "schema": "CREATE TABLE architect (id TEXT, name TEXT); CREATE TABLE bridge (id NUMBER, architect_id NUMBER, name TEXT); CREATE TABLE mill (architect_id NUMBER);"
      },
      {
        "question": "What are the ids and names of those who built at least 3 bridges ?",
        "query": "SELECT t1.id , t1.name FROM architect AS t1 JOIN bridge AS t2 ON t1.id = t2.architect_id GROUP BY t1.id HAVING count(*) >= 3",
        "schema": "CREATE TABLE bridge (id NUMBER, name TEXT, architect_id NUMBER); CREATE TABLE architect (id TEXT, name TEXT); CREATE TABLE mill (architect_id NUMBER);"
      }
    ],
    [
      {
        "question": "How many mills did each architect build?",
        "query": "SELECT count(*) FROM mill GROUP BY architect_id",
        "schema": "CREATE TABLE architect (gender TEXT, name TEXT, id TEXT); CREATE TABLE bridge (architect_id NUMBER); CREATE TABLE mill (built_year NUMBER, architect_id NUMBER, type TEXT, id NUMBER);"
      },
      {
        "question": "Which architect built the most?",
        "query": "SELECT * FROM architect AS t1 JOIN mill AS t2 ON t1.id = t2.architect_id GROUP BY t1.id ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE architect (id TEXT, name TEXT, gender TEXT); CREATE TABLE mill (architect_id NUMBER, id NUMBER, type TEXT, built_year NUMBER); CREATE TABLE bridge (architect_id NUMBER);"
      },
      {
        "question": "What are the id, name and nationality of this architect?",
        "query": "SELECT t1.id , t1.name , t1.nationality FROM architect AS t1 JOIN mill AS t2 ON t1.id = t2.architect_id GROUP BY t1.id ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE mill (id NUMBER, built_year NUMBER, type TEXT, name TEXT, architect_id NUMBER); CREATE TABLE architect (nationality TEXT, id TEXT, name TEXT, gender TEXT); CREATE TABLE bridge (architect_id NUMBER);"
      }
    ],
    [
      {
        "question": "How many bridges did each architect build?",
        "query": "SELECT count(*) FROM bridge GROUP BY architect_id",
        "schema": "CREATE TABLE architect (id TEXT, name TEXT); CREATE TABLE bridge (id NUMBER, architect_id NUMBER); CREATE TABLE mill (architect_id NUMBER);"
      },
      {
        "question": "What are the ids, names and genders of the architects who built two bridges?",
        "query": "SELECT t1.id , t1.name , t1.gender FROM architect AS t1 JOIN bridge AS t2 ON t1.id = t2.architect_id GROUP BY t1.id HAVING count(*) = 2",
        "schema": "CREATE TABLE architect (id TEXT, gender TEXT, name TEXT); CREATE TABLE mill (architect_id NUMBER); CREATE TABLE bridge (name TEXT, id NUMBER, architect_id NUMBER);"
      },
      {
        "question": "How about for the architects who built two bridges or one mill?",
        "query": "SELECT t1.id , t1.name , t1.gender FROM architect AS t1 JOIN bridge AS t2 ON t1.id = t2.architect_id GROUP BY t1.id HAVING count(*) = 2 UNION SELECT t1.id , t1.name , t1.gender FROM architect AS t1 JOIN mill AS t2 ON t1.id = t2.architect_id GROUP BY t1.id HAVING count(*) = 1",
        "schema": "CREATE TABLE mill (architect_id NUMBER); CREATE TABLE bridge (architect_id NUMBER, id NUMBER, name TEXT); CREATE TABLE architect (name TEXT, gender TEXT, id TEXT);"
      }
    ],
    [
      {
        "question": "Show the location of each bridge.",
        "query": "SELECT LOCATION FROM bridge",
        "schema": "CREATE TABLE bridge (location TEXT, name TEXT, id NUMBER); CREATE TABLE mill (location TEXT);"
      },
      {
        "question": "What is it for the bridge named 'Kolob Arch'?",
        "query": "SELECT LOCATION FROM bridge WHERE name = 'Kolob Arch'",
        "schema": "CREATE TABLE bridge (name TEXT, id NUMBER, location TEXT); CREATE TABLE mill (location TEXT);"
      },
      {
        "question": "How about for the bridges named either 'Kolob Arch' or 'Rainbow Bridge'?",
        "query": "SELECT LOCATION FROM bridge WHERE name = 'Kolob Arch' OR name = 'Rainbow Bridge'",
        "schema": "CREATE TABLE bridge (name TEXT, location TEXT, id NUMBER); CREATE TABLE mill (location TEXT);"
      }
    ],
    [
      {
        "question": "What are the names of mills?",
        "query": "SELECT name FROM mill",
        "schema": "CREATE TABLE mill (name TEXT, id NUMBER, type TEXT, architect_id NUMBER); CREATE TABLE architect (name TEXT, id TEXT);"
      },
      {
        "question": "Which ones contain the french word 'Moulin'?",
        "query": "SELECT name FROM mill WHERE name LIKE '%Moulin%'",
        "schema": "CREATE TABLE architect (name TEXT, id TEXT); CREATE TABLE mill (name TEXT, architect_id NUMBER, id NUMBER, type TEXT);"
      }
    ],
    [
      {
        "question": "Which bridges have a length above 80 meters?",
        "query": "SELECT * FROM bridge WHERE length_meters > 80",
        "schema": "CREATE TABLE architect (id TEXT); CREATE TABLE bridge (id NUMBER, length_feet NUMBER, name TEXT, length_meters NUMBER);"
      },
      {
        "question": "Show all the architects that have built each of these bridges.",
        "query": "SELECT * FROM architect AS t2 JOIN bridge AS t3 ON t3.architect_id = t2.id WHERE t3.length_meters > 80",
        "schema": "CREATE TABLE bridge (name TEXT, id NUMBER, length_meters NUMBER, architect_id NUMBER, length_feet NUMBER); CREATE TABLE architect (id TEXT, name TEXT);"
      },
      {
        "question": "What are the distinct name of the mills built by these architects?",
        "query": "SELECT DISTINCT t1.name FROM mill AS t1 JOIN architect AS t2 ON t1.architect_id = t2.id JOIN bridge AS t3 ON t3.architect_id = t2.id WHERE t3.length_meters > 80",
        "schema": "CREATE TABLE architect (name TEXT, id TEXT); CREATE TABLE bridge (architect_id NUMBER, length_feet NUMBER, length_meters NUMBER, id NUMBER, name TEXT); CREATE TABLE mill (id NUMBER, architect_id NUMBER, name TEXT);"
      }
    ],
    [
      {
        "question": "Count the number of mill types.",
        "query": "SELECT count(*) FROM mill GROUP BY TYPE",
        "schema": "CREATE TABLE architect (id TEXT); CREATE TABLE mill (type TEXT, id NUMBER);"
      },
      {
        "question": "What is the most common mill type?",
        "query": "SELECT TYPE FROM mill GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE architect (id TEXT); CREATE TABLE mill (id NUMBER, type TEXT);"
      },
      {
        "question": "Also provide the number of mills of this type.",
        "query": "SELECT TYPE , count(*) FROM mill GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE architect (id TEXT); CREATE TABLE mill (type TEXT, id NUMBER);"
      }
    ],
    [
      {
        "question": "Find all mills that were built before year 1850.",
        "query": "SELECT * FROM mill WHERE built_year < 1850",
        "schema": "CREATE TABLE mill (name TEXT, id NUMBER, built_year NUMBER); CREATE TABLE architect (id TEXT);"
      },
      {
        "question": "What are the ids of the architects who built a mill before year 1850?",
        "query": "SELECT architect_id FROM mill WHERE built_year < 1850",
        "schema": "CREATE TABLE mill (built_year NUMBER, name TEXT, id NUMBER, architect_id NUMBER); CREATE TABLE bridge (architect_id NUMBER); CREATE TABLE architect (name TEXT, id TEXT);"
      },
      {
        "question": "How many other architects are there?",
        "query": "SELECT count(*) FROM architect WHERE id NOT IN ( SELECT architect_id FROM mill WHERE built_year < 1850 )",
        "schema": "CREATE TABLE bridge (architect_id NUMBER); CREATE TABLE architect (id TEXT, name TEXT); CREATE TABLE mill (id NUMBER, built_year NUMBER, name TEXT, architect_id NUMBER);"
      }
    ],
    [
      {
        "question": "List the names and nationalities of all architects.",
        "query": "SELECT name, nationality FROM architect",
        "schema": "CREATE TABLE architect (nationality TEXT, id TEXT, name TEXT); CREATE TABLE mill (architect_id NUMBER);"
      },
      {
        "question": "Include their ids as well.",
        "query": "SELECT name, nationality, id FROM architect",
        "schema": "CREATE TABLE architect (nationality TEXT, id TEXT, name TEXT); CREATE TABLE mill (architect_id NUMBER);"
      },
      {
        "question": "Only include architects who are male.",
        "query": "SELECT name, nationality, id FROM architect WHERE gender = \"male\"",
        "schema": "CREATE TABLE architect (nationality TEXT, name TEXT, id TEXT, gender TEXT); CREATE TABLE mill (architect_id NUMBER);"
      },
      {
        "question": "List the names alphabetically.",
        "query": "SELECT name, nationality, id FROM architect WHERE gender = \"male\" ORDER BY name",
        "schema": "CREATE TABLE architect (nationality TEXT, name TEXT, id TEXT, gender TEXT); CREATE TABLE mill (architect_id NUMBER);"
      }
    ],
    [
      {
        "question": "What are the different types of mills?",
        "query": "SELECT DISTINCT TYPE FROM mill",
        "schema": "CREATE TABLE mill (name TEXT, type TEXT);"
      },
      {
        "question": "Which ones were built by American architects?",
        "query": "SELECT DISTINCT t1.type FROM mill AS t1 JOIN architect AS t2 ON t1.architect_id = t2.id WHERE t2.nationality = 'American'",
        "schema": "CREATE TABLE architect (nationality TEXT, id TEXT, name TEXT); CREATE TABLE mill (type TEXT, name TEXT, architect_id NUMBER);"
      },
      {
        "question": "Include those built by Canadian architects as well.",
        "query": "SELECT DISTINCT t1.type FROM mill AS t1 JOIN architect AS t2 ON t1.architect_id = t2.id WHERE t2.nationality = 'American' OR t2.nationality = 'Canadian'",
        "schema": "CREATE TABLE architect (nationality TEXT, name TEXT, id TEXT); CREATE TABLE mill (type TEXT, architect_id NUMBER, name TEXT, id NUMBER);"
      }
    ],
    [
      {
        "question": "What are the ids and names of all architects?",
        "query": "SELECT id, name FROM architect",
        "schema": "CREATE TABLE architect (name TEXT, id TEXT); CREATE TABLE mill (architect_id NUMBER); CREATE TABLE bridge (architect_id NUMBER);"
      },
      {
        "question": "How many of those architects built less than 3 bridges?",
        "query": "SELECT count(*) FROM (SELECT t1.id , t1.name FROM architect AS t1 JOIN bridge AS t2 ON t1.id = t2.architect_id GROUP BY t1.id HAVING count(*) < 3)",
        "schema": "CREATE TABLE bridge (architect_id NUMBER); CREATE TABLE mill (architect_id NUMBER); CREATE TABLE architect (name TEXT, id TEXT);"
      },
      {
        "question": "How many built 3 or more bridges?",
        "query": "SELECT count(*) FROM (SELECT t1.id , t1.name FROM architect AS t1 JOIN bridge AS t2 ON t1.id = t2.architect_id GROUP BY t1.id HAVING count(*) >= 3)",
        "schema": "CREATE TABLE architect (id TEXT, name TEXT); CREATE TABLE bridge (id NUMBER, architect_id NUMBER, name TEXT); CREATE TABLE mill (architect_id NUMBER);"
      },
      {
        "question": "Please list their ids and names.",
        "query": "SELECT t1.id , t1.name FROM architect AS t1 JOIN bridge AS t2 ON t1.id = t2.architect_id GROUP BY t1.id HAVING count(*) >= 3",
        "schema": "CREATE TABLE architect (id TEXT, name TEXT); CREATE TABLE bridge (id NUMBER, architect_id NUMBER, name TEXT); CREATE TABLE mill (architect_id NUMBER);"
      }
    ],
    [
      {
        "question": "How many mills did each architect build?",
        "query": "SELECT t1.name , count(*) FROM architect AS t1 JOIN mill AS t2 ON t1.id = t2.architect_id GROUP BY t1.id ORDER BY count(*)",
        "schema": "CREATE TABLE architect (gender TEXT, name TEXT, id TEXT); CREATE TABLE mill (architect_id NUMBER, id NUMBER, type TEXT, built_year NUMBER); CREATE TABLE bridge (architect_id NUMBER);"
      },
      {
        "question": "Order by decreasing number of mills built.",
        "query": "SELECT t1.name , count(*) FROM architect AS t1 JOIN mill AS t2 ON t1.id = t2.architect_id GROUP BY t1.id ORDER BY count(*) DESC",
        "schema": "CREATE TABLE bridge (architect_id NUMBER); CREATE TABLE mill (architect_id NUMBER, name TEXT, id NUMBER, type TEXT, built_year NUMBER); CREATE TABLE architect (id TEXT, gender TEXT, name TEXT);"
      },
      {
        "question": "Which architect built the most mills?",
        "query": "SELECT t1.name FROM architect AS t1 JOIN mill AS t2 ON t1.id = t2.architect_id GROUP BY t1.id ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE architect (gender TEXT, name TEXT, id TEXT); CREATE TABLE bridge (architect_id NUMBER); CREATE TABLE mill (architect_id NUMBER, id NUMBER, name TEXT, type TEXT, built_year NUMBER);"
      },
      {
        "question": "Please list his id and nationality as well.",
        "query": "SELECT t1.id , t1.name , t1.nationality FROM architect AS t1 JOIN mill AS t2 ON t1.id = t2.architect_id GROUP BY t1.id ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE bridge (architect_id NUMBER); CREATE TABLE architect (nationality TEXT, id TEXT, gender TEXT, name TEXT); CREATE TABLE mill (built_year NUMBER, architect_id NUMBER, name TEXT, type TEXT, id NUMBER);"
      }
    ],
    [
      {
        "question": "List the names of architects who built 2 bridges.",
        "query": "SELECT t1.name FROM architect AS t1 JOIN bridge AS t2 ON t1.id = t2.architect_id GROUP BY t1.id HAVING count(*) = 2",
        "schema": "CREATE TABLE bridge (architect_id NUMBER); CREATE TABLE architect (id TEXT, name TEXT); CREATE TABLE mill (architect_id NUMBER);"
      },
      {
        "question": "Include architects who built 1 mill.",
        "query": "SELECT t1.name FROM architect AS t1 JOIN bridge AS t2 ON t1.id = t2.architect_id GROUP BY t1.id HAVING count(*) = 2 UNION SELECT t1.name FROM architect AS t1 JOIN mill AS t2 ON t1.id = t2.architect_id GROUP BY t1.id HAVING count(*) = 1",
        "schema": "CREATE TABLE architect (id TEXT, name TEXT); CREATE TABLE mill (architect_id NUMBER, id NUMBER); CREATE TABLE bridge (name TEXT, architect_id NUMBER, id NUMBER);"
      },
      {
        "question": "Include their ids and genders as well.",
        "query": "SELECT t1.id , t1.name , t1.gender FROM architect AS t1 JOIN bridge AS t2 ON t1.id = t2.architect_id GROUP BY t1.id HAVING count(*) = 2 UNION SELECT t1.id , t1.name , t1.gender FROM architect AS t1 JOIN mill AS t2 ON t1.id = t2.architect_id GROUP BY t1.id HAVING count(*) = 1",
        "schema": "CREATE TABLE mill (architect_id NUMBER, name TEXT, id NUMBER); CREATE TABLE architect (name TEXT, gender TEXT, id TEXT); CREATE TABLE bridge (name TEXT, id NUMBER, architect_id NUMBER);"
      }
    ],
    [
      {
        "question": "List the locations of all bridges.",
        "query": "SELECT DISTINCT LOCATION FROM bridge",
        "schema": "CREATE TABLE mill (location TEXT); CREATE TABLE bridge (id NUMBER, location TEXT, name TEXT);"
      },
      {
        "question": "Where is the bridge named \u2018Kolob Arch\u2019 located?",
        "query": "SELECT LOCATION FROM bridge WHERE name = 'Kolob Arch'",
        "schema": "CREATE TABLE mill (location TEXT); CREATE TABLE bridge (name TEXT, location TEXT, id NUMBER);"
      },
      {
        "question": "Include the location of the bridge named \u2018Rainbow Bridge\u2019.",
        "query": "SELECT LOCATION FROM bridge WHERE name = 'Kolob Arch' OR name = 'Rainbow Bridge'",
        "schema": "CREATE TABLE bridge (id NUMBER, location TEXT, name TEXT); CREATE TABLE mill (location TEXT);"
      }
    ],
    [
      {
        "question": "List all of the mill names.",
        "query": "SELECT name FROM mill",
        "schema": "CREATE TABLE mill (name TEXT, id NUMBER); CREATE TABLE architect (name TEXT, id TEXT);"
      },
      {
        "question": "Just show mill names that contain the word \u2018Moulin\u2019.",
        "query": "SELECT name FROM mill WHERE name LIKE '%Moulin%'",
        "schema": "CREATE TABLE architect (id TEXT, name TEXT); CREATE TABLE mill (id NUMBER, name TEXT, type TEXT);"
      }
    ],
    [
      {
        "question": "Which architects have built bridges?",
        "query": "SELECT DISTINCT t1.name FROM architect AS t1 JOIN bridge AS t2 ON t1.id = t2.architect_id",
        "schema": "CREATE TABLE bridge (id NUMBER, architect_id NUMBER); CREATE TABLE mill (architect_id NUMBER); CREATE TABLE architect (id TEXT, name TEXT);"
      },
      {
        "question": "Which of them have built bridges longer than 80 meters?",
        "query": "SELECT DISTINCT t1.name FROM architect AS t1 JOIN bridge AS t2 ON t1.id = t2.architect_id WHERE t2.length_meters > 80",
        "schema": "CREATE TABLE bridge (length_meters NUMBER, architect_id NUMBER, length_feet NUMBER, name TEXT, id NUMBER); CREATE TABLE architect (id TEXT, name TEXT); CREATE TABLE mill (architect_id NUMBER);"
      },
      {
        "question": "How many of those architects have also built mills?",
        "query": "SELECT count(DISTINCT t2.name) FROM mill AS t1 JOIN architect AS t2 ON t1.architect_id = t2.id JOIN bridge AS t3 ON t3.architect_id = t2.id WHERE t3.length_meters > 80",
        "schema": "CREATE TABLE mill (architect_id NUMBER); CREATE TABLE bridge (architect_id NUMBER, length_feet NUMBER, length_meters NUMBER, id NUMBER, name TEXT); CREATE TABLE architect (id TEXT, name TEXT);"
      },
      {
        "question": "Please list the names of those mills.",
        "query": "SELECT DISTINCT t1.name FROM mill AS t1 JOIN architect AS t2 ON t1.architect_id = t2.id JOIN bridge AS t3 ON t3.architect_id = t2.id WHERE t3.length_meters > 80",
        "schema": "CREATE TABLE architect (id TEXT, name TEXT); CREATE TABLE mill (id NUMBER, name TEXT, architect_id NUMBER); CREATE TABLE bridge (name TEXT, id NUMBER, architect_id NUMBER, length_meters NUMBER, length_feet NUMBER);"
      }
    ],
    [
      {
        "question": "What are the different mill types?",
        "query": "SELECT DISTINCT TYPE FROM mill",
        "schema": "CREATE TABLE mill (type TEXT);"
      },
      {
        "question": "Order by the number of mills of each type in decreasing order.",
        "query": "SELECT TYPE FROM mill GROUP BY TYPE ORDER BY count(*) DESC",
        "schema": "CREATE TABLE mill (type TEXT);"
      },
      {
        "question": "What is the most common mill type?",
        "query": "SELECT TYPE FROM mill GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE mill (type TEXT);"
      },
      {
        "question": "How many mills of that type are there?",
        "query": "SELECT TYPE , count(*) FROM mill GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE mill (id NUMBER, type TEXT);"
      }
    ],
    [
      {
        "question": "Count the total number of architects.",
        "query": "SELECT count(*) FROM architect",
        "schema": "CREATE TABLE bridge (architect_id NUMBER); CREATE TABLE architect (id TEXT, name TEXT); CREATE TABLE mill (architect_id NUMBER);"
      },
      {
        "question": "How many have built a mill?",
        "query": "SELECT count(*) FROM architect WHERE id IN ( SELECT architect_id FROM mill )",
        "schema": "CREATE TABLE bridge (architect_id NUMBER); CREATE TABLE mill (architect_id NUMBER); CREATE TABLE architect (name TEXT, id TEXT);"
      },
      {
        "question": "How many did not build a mill before 1850?",
        "query": "SELECT count(*) FROM architect WHERE id NOT IN ( SELECT architect_id FROM mill WHERE built_year < 1850 )",
        "schema": "CREATE TABLE architect (name TEXT, id TEXT); CREATE TABLE mill (built_year NUMBER, architect_id NUMBER); CREATE TABLE bridge (architect_id NUMBER);"
      }
    ]
  ],
  "school_finance": [
    [
      {
        "question": "What is the maximum enrollment of all schools?",
        "query": "SELECT max(enrollment) FROM school",
        "schema": "CREATE TABLE School (School_name TEXT, IHSAA_Class TEXT, School_id TEXT, Enrollment NUMBER);"
      },
      {
        "question": "What is the total enrollment of these schools?",
        "query": "SELECT sum(enrollment) FROM school",
        "schema": "CREATE TABLE School (School_name TEXT, IHSAA_Class TEXT, School_id TEXT, Enrollment NUMBER);"
      },
      {
        "question": "Please also show the average enrollment.",
        "query": "SELECT sum(enrollment) , avg(enrollment) FROM school",
        "schema": "CREATE TABLE School (Enrollment NUMBER, School_id TEXT, School_name TEXT, IHSAA_Class TEXT);"
      }
    ],
    [
      {
        "question": "How many different mascots are there?",
        "query": "SELECT count(DISTINCT mascot) FROM school",
        "schema": "CREATE TABLE School (School_name TEXT, IHSAA_Football_Class TEXT, Mascot TEXT, School_id TEXT);"
      },
      {
        "question": "What are they?",
        "query": "SELECT DISTINCT mascot FROM school",
        "schema": "CREATE TABLE School (School_name TEXT, School_id TEXT, IHSAA_Football_Class TEXT, Mascot TEXT);"
      },
      {
        "question": "Which of them are from schools with enrollments above the average?",
        "query": "SELECT mascot FROM school WHERE enrollment > (SELECT avg(enrollment) FROM school)",
        "schema": "CREATE TABLE School (School_name TEXT, IHSAA_Football_Class TEXT, School_id TEXT, Enrollment NUMBER, Mascot TEXT);"
      }
    ],
    [
      {
        "question": "What school has the largest enrollment?",
        "query": "SELECT school_name FROM school ORDER BY enrollment DESC LIMIT 1",
        "schema": "CREATE TABLE School (School_name TEXT, School_id TEXT, IHSAA_Class TEXT, Enrollment NUMBER);"
      },
      {
        "question": "What is its mascot?",
        "query": "SELECT mascot FROM school ORDER BY enrollment DESC LIMIT 1",
        "schema": "CREATE TABLE School (School_name TEXT, IHSAA_Class TEXT, Enrollment NUMBER, School_id TEXT, Mascot TEXT);"
      },
      {
        "question": "What school has the smallest enrollment?",
        "query": "SELECT school_name FROM school ORDER BY enrollment LIMIT 1",
        "schema": "CREATE TABLE School (Mascot TEXT, School_id TEXT, Enrollment NUMBER, IHSAA_Class TEXT, School_name TEXT);"
      }
    ],
    [
      {
        "question": "What are the 3 largest enrollments of all schools?",
        "query": "SELECT enrollment FROM school ORDER BY enrollment DESC LIMIT 3",
        "schema": "CREATE TABLE School (School_id TEXT, School_name TEXT, IHSAA_Class TEXT, Enrollment NUMBER);"
      },
      {
        "question": "What is the largest enrollment?",
        "query": "SELECT max(enrollment) FROM school",
        "schema": "CREATE TABLE School (Enrollment NUMBER, IHSAA_Class TEXT, School_id TEXT, School_name TEXT);"
      },
      {
        "question": "Please also show the average and minimum enrollment",
        "query": "SELECT avg(enrollment) , max(enrollment) , min(enrollment) FROM school",
        "schema": "CREATE TABLE School (School_name TEXT, Enrollment NUMBER, School_id TEXT, IHSAA_Class TEXT);"
      }
    ],
    [
      {
        "question": "How many different counties are there?",
        "query": "SELECT count(DISTINCT county) FROM school",
        "schema": "CREATE TABLE School (County TEXT, School_id TEXT);"
      },
      {
        "question": "How many schools are there in each county?",
        "query": "SELECT county , count(*) FROM school GROUP BY county",
        "schema": "CREATE TABLE School (County TEXT, School_id TEXT, School_name TEXT);"
      },
      {
        "question": "Please also show the total enrollment in each county.",
        "query": "SELECT county , count(*) , sum(enrollment) FROM school GROUP BY county",
        "schema": "CREATE TABLE School (School_id TEXT, County TEXT, Enrollment NUMBER, School_name TEXT);"
      }
    ],
    [
      {
        "question": "What is the location of the school named \"Glenn\"?",
        "query": "SELECT LOCATION FROM school WHERE school_name = \"Glenn\"",
        "schema": "CREATE TABLE School (School_id TEXT, Location TEXT, School_name TEXT);"
      },
      {
        "question": "What is the largest endowment amount for this school?",
        "query": "SELECT max(amount) FROM endowment AS t1 JOIN school AS t2 ON t1.school_id = t2.school_id WHERE t2.school_name = \"Glenn\"",
        "schema": "CREATE TABLE School (School_id TEXT, School_name TEXT, Location TEXT); CREATE TABLE endowment (School_id NUMBER, endowment_id NUMBER, donator_name TEXT, amount NUMBER);"
      },
      {
        "question": "How many donors have contributed to the endowment for this school?",
        "query": "SELECT count(DISTINCT t1.donator_name) FROM endowment AS t1 JOIN school AS t2 ON t1.school_id = t2.school_id WHERE t2.school_name = \"Glenn\"",
        "schema": "CREATE TABLE endowment (amount NUMBER, endowment_id NUMBER, donator_name TEXT, School_id NUMBER); CREATE TABLE School (Location TEXT, School_id TEXT, School_name TEXT);"
      }
    ],
    [
      {
        "question": "How many donators are there?",
        "query": "SELECT count(DISTINCT donator_name) FROM endowment",
        "schema": "CREATE TABLE endowment (donator_name TEXT, School_id NUMBER, amount NUMBER, endowment_id NUMBER); CREATE TABLE School (School_id TEXT);"
      },
      {
        "question": "What is the amount of endowment given by each donoator?",
        "query": "SELECT donator_name , sum(amount) FROM endowment GROUP BY donator_name",
        "schema": "CREATE TABLE endowment (amount NUMBER, donator_name TEXT, endowment_id NUMBER, School_id NUMBER); CREATE TABLE School (School_id TEXT);"
      },
      {
        "question": "Please order them by the amount of endowment.",
        "query": "SELECT donator_name , sum(amount) FROM endowment GROUP BY donator_name ORDER BY sum(amount) DESC",
        "schema": "CREATE TABLE School (School_id TEXT); CREATE TABLE endowment (donator_name TEXT, School_id NUMBER, amount NUMBER, endowment_id NUMBER);"
      }
    ],
    [
      {
        "question": "How many schools have an endowment?",
        "query": "SELECT count(*) FROM school WHERE school_id IN (SELECT school_id FROM endowment)",
        "schema": "CREATE TABLE budget (School_id NUMBER); CREATE TABLE School (School_id TEXT, School_name TEXT, IHSAA_Class TEXT); CREATE TABLE endowment (School_id NUMBER, endowment_id NUMBER, amount NUMBER);"
      },
      {
        "question": "How many schools do not have an endowment?",
        "query": "SELECT count(*) FROM school WHERE school_id NOT IN (SELECT school_id FROM endowment)",
        "schema": "CREATE TABLE budget (School_id NUMBER); CREATE TABLE endowment (amount NUMBER, endowment_id NUMBER, School_id NUMBER); CREATE TABLE School (IHSAA_Class TEXT, School_name TEXT, School_id TEXT);"
      },
      {
        "question": "List the names of these schools.",
        "query": "SELECT school_name FROM school WHERE school_id NOT IN (SELECT school_id FROM endowment)",
        "schema": "CREATE TABLE budget (School_id NUMBER); CREATE TABLE endowment (School_id NUMBER, endowment_id NUMBER, amount NUMBER); CREATE TABLE School (IHSAA_Class TEXT, School_id TEXT, School_name TEXT);"
      }
    ],
    [
      {
        "question": "What is the average endowment amount?",
        "query": "SELECT avg(amount) FROM endowment",
        "schema": "CREATE TABLE School (School_id TEXT); CREATE TABLE endowment (endowment_id NUMBER, School_id NUMBER, amount NUMBER, donator_name TEXT);"
      },
      {
        "question": "What is the minimum endowment amount?",
        "query": "SELECT min(amount) FROM endowment",
        "schema": "CREATE TABLE endowment (amount NUMBER, endowment_id NUMBER, School_id NUMBER, donator_name TEXT); CREATE TABLE School (School_id TEXT);"
      },
      {
        "question": "How many endowments are there that have an amount smaller than or equal to 10?",
        "query": "SELECT count(*) FROM endowment WHERE amount <= 10",
        "schema": "CREATE TABLE School (School_id TEXT); CREATE TABLE endowment (amount NUMBER, School_id NUMBER, donator_name TEXT, endowment_id NUMBER);"
      },
      {
        "question": "List all the names of schools with this kind of endowment.",
        "query": "SELECT t2.school_name FROM endowment AS t1 JOIN school AS t2 ON t1.school_id = t2.school_id GROUP BY t1.school_id HAVING sum(t1.amount) <= 10",
        "schema": "CREATE TABLE endowment (amount NUMBER, donator_name TEXT, endowment_id NUMBER, School_id NUMBER); CREATE TABLE School (School_id TEXT, School_name TEXT);"
      }
    ],
    [
      {
        "question": "Who has donated to \"Glenn\"?",
        "query": "SELECT t1.donator_name FROM endowment AS t1 JOIN school AS t2 ON t1.school_id = t2.school_id WHERE t2.school_name = 'Glenn'",
        "schema": "CREATE TABLE endowment (donator_name TEXT, School_id NUMBER, amount NUMBER, endowment_id NUMBER); CREATE TABLE School (School_id TEXT, School_name TEXT, Location TEXT);"
      },
      {
        "question": "Who has donated to \"Triton\"?",
        "query": "SELECT t1.donator_name FROM endowment AS t1 JOIN school AS t2 ON t1.school_id = t2.school_id WHERE t2.school_name = 'Triton'",
        "schema": "CREATE TABLE endowment (School_id NUMBER, endowment_id NUMBER, amount NUMBER, donator_name TEXT); CREATE TABLE School (Location TEXT, School_name TEXT, School_id TEXT);"
      },
      {
        "question": "Who has donated to both schools?",
        "query": "SELECT t1.donator_name FROM endowment AS t1 JOIN school AS t2 ON t1.school_id = t2.school_id WHERE t2.school_name = 'Glenn' INTERSECT SELECT t1.donator_name FROM endowment AS t1 JOIN school AS t2 ON t1.school_id = t2.school_id WHERE t2.school_name = 'Triton'",
        "schema": "CREATE TABLE endowment (School_id NUMBER, amount NUMBER, endowment_id NUMBER, donator_name TEXT); CREATE TABLE School (School_name TEXT, School_id TEXT, Location TEXT);"
      }
    ],
    [
      {
        "question": "How many donors are there?",
        "query": "SELECT count(DISTINCT donator_name) FROM endowment",
        "schema": "CREATE TABLE endowment (amount NUMBER, endowment_id NUMBER, donator_name TEXT, School_id NUMBER);"
      },
      {
        "question": "How many donors are there that gave a donation amount less than 9?",
        "query": "SELECT count(DISTINCT donator_name) FROM endowment WHERE amount < 9",
        "schema": "CREATE TABLE endowment (donator_name TEXT, endowment_id NUMBER, amount NUMBER, School_id NUMBER);"
      },
      {
        "question": "Show the names of all the donors except these donors.",
        "query": "SELECT donator_name FROM endowment EXCEPT SELECT donator_name FROM endowment WHERE amount < 9",
        "schema": "CREATE TABLE endowment (donator_name TEXT, School_id NUMBER, amount NUMBER, endowment_id NUMBER);"
      }
    ],
    [
      {
        "question": "How many endowments are there?",
        "query": "SELECT count(*) FROM endowment",
        "schema": "CREATE TABLE endowment (School_id NUMBER, donator_name TEXT, endowment_id NUMBER, amount NUMBER); CREATE TABLE School (School_id TEXT);"
      },
      {
        "question": "What is the largest endowment amount?",
        "query": "SELECT amount FROM endowment ORDER BY amount DESC LIMIT 1",
        "schema": "CREATE TABLE endowment (endowment_id NUMBER, donator_name TEXT, School_id NUMBER, amount NUMBER); CREATE TABLE School (School_id TEXT);"
      },
      {
        "question": "Please also show the donor name.",
        "query": "SELECT amount , donator_name FROM endowment ORDER BY amount DESC LIMIT 1",
        "schema": "CREATE TABLE School (School_id TEXT); CREATE TABLE endowment (amount NUMBER, endowment_id NUMBER, donator_name TEXT, School_id NUMBER);"
      }
    ],
    [
      {
        "question": "What is the average budget?",
        "query": "SELECT avg(budgeted) FROM budget",
        "schema": "CREATE TABLE School (School_id TEXT); CREATE TABLE budget (Budget_invested_percent TEXT, Year NUMBER, School_id NUMBER, Budgeted NUMBER, total_budget_percent_invested NUMBER, total_budget_percent_budgeted NUMBER);"
      },
      {
        "question": "How many budgets are above 2000?",
        "query": "SELECT count(*) FROM budget WHERE budgeted > 2000",
        "schema": "CREATE TABLE budget (Budgeted NUMBER, School_id NUMBER, total_budget_percent_invested NUMBER, total_budget_percent_budgeted NUMBER, Budget_invested_percent TEXT, Year NUMBER); CREATE TABLE School (School_id TEXT);"
      },
      {
        "question": "How about the number of budgets that are above 3000?",
        "query": "SELECT count(*) FROM budget WHERE budgeted > 3000",
        "schema": "CREATE TABLE School (School_id TEXT); CREATE TABLE budget (Year NUMBER, total_budget_percent_invested NUMBER, Budgeted NUMBER, School_id NUMBER, Budget_invested_percent TEXT, total_budget_percent_budgeted NUMBER);"
      },
      {
        "question": "Which of them are in year 2001 or before?",
        "query": "SELECT count(*) FROM budget WHERE budgeted > 3000 AND YEAR <= 2001",
        "schema": "CREATE TABLE budget (total_budget_percent_budgeted NUMBER, Budgeted NUMBER, total_budget_percent_invested NUMBER, School_id NUMBER, Year NUMBER, Budget_invested_percent TEXT); CREATE TABLE School (School_id TEXT);"
      }
    ],
    [
      {
        "question": "How many schools have a budget?",
        "query": "SELECT count(DISTINCT t1.school_id) FROM budget AS t1 JOIN school AS t2 ON t1.school_id = t2.school_id",
        "schema": "CREATE TABLE School (School_id TEXT, School_name TEXT); CREATE TABLE budget (Budgeted NUMBER, School_id NUMBER);"
      },
      {
        "question": "How about the number in year 2002 or after?",
        "query": "SELECT count(DISTINCT t1.school_id) FROM budget AS t1 JOIN school AS t2 ON t1.school_id = t2.school_id WHERE t1.year >= 2002",
        "schema": "CREATE TABLE budget (School_id NUMBER, Year NUMBER, Budgeted NUMBER); CREATE TABLE School (School_name TEXT, School_id TEXT);"
      },
      {
        "question": "Please show school name, its budgeted amount, and invested amount",
        "query": "SELECT t2.school_name , t1.budgeted , t1.invested FROM budget AS t1 JOIN school AS t2 ON t1.school_id = t2.school_id WHERE t1.year >= 2002",
        "schema": "CREATE TABLE endowment (School_id NUMBER, amount NUMBER); CREATE TABLE budget (School_id NUMBER, Budget_invested_percent TEXT, total_budget_percent_invested NUMBER, Year NUMBER, Invested NUMBER, Budgeted NUMBER); CREATE TABLE School (School_id TEXT, School_name TEXT);"
      }
    ],
    [
      {
        "question": "What is the mascot of the school 'Glenn'?",
        "query": "SELECT mascot FROM school WHERE school_name = 'Glenn'",
        "schema": "CREATE TABLE School (School_name TEXT, Mascot TEXT, School_id TEXT, Location TEXT, IHSAA_Football_Class TEXT);"
      },
      {
        "question": "Please show the budget record of school 'Glenn'.",
        "query": "SELECT * FROM budget AS t1 JOIN school AS t2 ON t1.school_id = t2.school_id WHERE t2.school_name = 'Glenn'",
        "schema": "CREATE TABLE School (Location TEXT, School_id TEXT, IHSAA_Football_Class TEXT, School_name TEXT, Mascot TEXT); CREATE TABLE budget (School_id NUMBER, Budgeted NUMBER, Year NUMBER, total_budget_percent_budgeted NUMBER);"
      },
      {
        "question": "What is total budget amount for this school?",
        "query": "SELECT sum(t1.budgeted) FROM budget AS t1 JOIN school AS t2 ON t1.school_id = t2.school_id WHERE t2.school_name = 'Glenn'",
        "schema": "CREATE TABLE School (Mascot TEXT, IHSAA_Football_Class TEXT, School_name TEXT, School_id TEXT, Location TEXT); CREATE TABLE budget (Budgeted NUMBER, total_budget_percent_budgeted NUMBER, Year NUMBER, School_id NUMBER);"
      }
    ],
    [
      {
        "question": "How many schools are there\uff1f",
        "query": "SELECT count(*) FROM school",
        "schema": "CREATE TABLE endowment (School_id NUMBER); CREATE TABLE School (IHSAA_Class TEXT, Enrollment NUMBER, IHSAA_Football_Class TEXT, School_id TEXT, County TEXT, Mascot TEXT, School_name TEXT); CREATE TABLE budget (School_id NUMBER);"
      },
      {
        "question": "How many schools are there that have a total budget amount greater than 100?",
        "query": "SELECT count(*) FROM (SELECT count(DISTINCT t2.school_name) FROM budget AS t1 JOIN school AS t2 ON t1.school_id = t2.school_id GROUP BY t2.school_name HAVING sum(t1.budgeted) > 100)",
        "schema": "CREATE TABLE School (IHSAA_Football_Class TEXT, School_id TEXT, County TEXT, Enrollment NUMBER, School_name TEXT, Mascot TEXT, IHSAA_Class TEXT); CREATE TABLE budget (total_budget_percent_budgeted NUMBER, total_budget_percent_invested NUMBER, Budgeted NUMBER, School_id NUMBER, Year NUMBER); CREATE TABLE endowment (amount NUMBER, School_id NUMBER);"
      },
      {
        "question": "How many schools are there have a total budget amount greater than 100 or a total endowment greater than 10?",
        "query": "SELECT count(*) FROM (SELECT t2.school_name FROM budget AS t1 JOIN school AS t2 ON t1.school_id = t2.school_id JOIN endowment AS t3 ON t2.school_id = t3.school_id GROUP BY t2.school_name HAVING sum(t1.budgeted) > 100 OR sum(t3.amount) > 10)",
        "schema": "CREATE TABLE budget (total_budget_percent_budgeted NUMBER, Year NUMBER, total_budget_percent_invested NUMBER, School_id NUMBER, Budgeted NUMBER); CREATE TABLE School (IHSAA_Class TEXT, County TEXT, Enrollment NUMBER, School_name TEXT, IHSAA_Football_Class TEXT, Mascot TEXT, School_id TEXT); CREATE TABLE endowment (amount NUMBER, School_id NUMBER, endowment_id NUMBER);"
      },
      {
        "question": "Show the names of these schools.",
        "query": "SELECT t2.school_name FROM budget AS t1 JOIN school AS t2 ON t1.school_id = t2.school_id JOIN endowment AS t3 ON t2.school_id = t3.school_id GROUP BY t2.school_name HAVING sum(t1.budgeted) > 100 OR sum(t3.amount) > 10",
        "schema": "CREATE TABLE budget (total_budget_percent_invested NUMBER, School_id NUMBER, total_budget_percent_budgeted NUMBER, Year NUMBER, Budgeted NUMBER); CREATE TABLE School (County TEXT, Enrollment NUMBER, IHSAA_Class TEXT, IHSAA_Football_Class TEXT, School_id TEXT, Mascot TEXT, School_name TEXT); CREATE TABLE endowment (School_id NUMBER, amount NUMBER, endowment_id NUMBER);"
      }
    ],
    [
      {
        "question": "What is the average donation amount?",
        "query": "SELECT avg(amount) FROM endowment",
        "schema": "CREATE TABLE endowment (endowment_id NUMBER, amount NUMBER, donator_name TEXT);"
      },
      {
        "question": "How many donators does each school have?",
        "query": "SELECT t2.school_name, count(*) FROM endowment AS t1 JOIN school AS t2 ON t1.school_id = t2.school_id GROUP BY t1.school_id",
        "schema": "CREATE TABLE endowment (amount NUMBER, donator_name TEXT, endowment_id NUMBER, School_id NUMBER); CREATE TABLE budget (School_id NUMBER); CREATE TABLE School (School_id TEXT, School_name TEXT);"
      },
      {
        "question": "Which schools have more than one donator?",
        "query": "SELECT t2.school_name, count(*) FROM endowment AS t1 JOIN school AS t2 ON t1.school_id = t2.school_id GROUP BY t1.school_id HAVING count(*) > 1",
        "schema": "CREATE TABLE endowment (School_id NUMBER, amount NUMBER, endowment_id NUMBER, donator_name TEXT); CREATE TABLE School (School_name TEXT, School_id TEXT); CREATE TABLE budget (School_id NUMBER);"
      },
      {
        "question": "Among these schools, which schools have one donator with a donation amount above 8.5?",
        "query": "SELECT t2.school_name FROM endowment AS t1 JOIN school AS t2 ON t1.school_id = t2.school_id WHERE t1.amount > 8.5 GROUP BY t1.school_id HAVING count(*) > 1",
        "schema": "CREATE TABLE School (School_id TEXT, School_name TEXT); CREATE TABLE budget (School_id NUMBER); CREATE TABLE endowment (endowment_id NUMBER, School_id NUMBER, donator_name TEXT, amount NUMBER);"
      }
    ],
    [
      {
        "question": "How many schools are there?",
        "query": "SELECT count(*) FROM school",
        "schema": "CREATE TABLE School (School_name TEXT, County TEXT, Mascot TEXT, IHSAA_Football_Class TEXT, School_id TEXT, Enrollment NUMBER, Location TEXT, IHSAA_Class TEXT); CREATE TABLE endowment (School_id NUMBER); CREATE TABLE budget (School_id NUMBER);"
      },
      {
        "question": "How many donations are there that are less than 8.5?",
        "query": "SELECT count(*) FROM endowment WHERE amount < 8.5",
        "schema": "CREATE TABLE endowment (endowment_id NUMBER, donator_name TEXT, School_id NUMBER, amount NUMBER); CREATE TABLE School (School_name TEXT, County TEXT, IHSAA_Class TEXT, School_id TEXT, Enrollment NUMBER, Mascot TEXT, IHSAA_Football_Class TEXT, Location TEXT); CREATE TABLE budget (School_id NUMBER);"
      },
      {
        "question": "How many schools have more than one donator?",
        "query": "SELECT count(*) FROM (SELECT * FROM endowment GROUP BY school_id HAVING count(*) > 1)",
        "schema": "CREATE TABLE School (County TEXT, IHSAA_Class TEXT, School_name TEXT, School_id TEXT, IHSAA_Football_Class TEXT, Enrollment NUMBER, Location TEXT, Mascot TEXT); CREATE TABLE budget (School_id NUMBER); CREATE TABLE endowment (endowment_id NUMBER, donator_name TEXT, School_id NUMBER, amount NUMBER);"
      },
      {
        "question": "Among these schools, how many of them have more than one donator whose donation amount is less than 8.5?",
        "query": "SELECT count(*) FROM (SELECT * FROM endowment WHERE amount < 8.5 GROUP BY school_id HAVING count(*) > 1)",
        "schema": "CREATE TABLE budget (School_id NUMBER); CREATE TABLE School (School_id TEXT, Location TEXT, School_name TEXT, Mascot TEXT, IHSAA_Class TEXT, Enrollment NUMBER, County TEXT, IHSAA_Football_Class TEXT); CREATE TABLE endowment (endowment_id NUMBER, School_id NUMBER, amount NUMBER, donator_name TEXT);"
      }
    ]
  ],
  "film_rank": [
    [
      {
        "question": "What countries are there in the market?",
        "query": "SELECT country FROM market",
        "schema": "CREATE TABLE film_market_estimation (Market_ID NUMBER); CREATE TABLE market (Market_ID NUMBER, Number_cities NUMBER, Country TEXT);"
      },
      {
        "question": "What about their number of cities?",
        "query": "SELECT country, number_cities FROM market",
        "schema": "CREATE TABLE market (Number_cities NUMBER, Country TEXT, Market_ID NUMBER); CREATE TABLE film_market_estimation (Market_ID NUMBER);"
      },
      {
        "question": "Among those, show me the maximum and minimum.",
        "query": "SELECT max(number_cities) , min(number_cities) FROM market",
        "schema": "CREATE TABLE market (Number_cities NUMBER, Country TEXT, Market_ID NUMBER); CREATE TABLE film_market_estimation (Market_ID NUMBER, Low_Estimate NUMBER);"
      }
    ],
    [
      {
        "question": "How many film market estimations are there in record?",
        "query": "SELECT count(*) FROM film_market_estimation",
        "schema": "CREATE TABLE market (Market_ID NUMBER); CREATE TABLE film_market_estimation (Market_ID NUMBER, Film_ID NUMBER, Estimation_ID NUMBER, Type TEXT); CREATE TABLE film (Film_ID NUMBER);"
      },
      {
        "question": "Show me the ones in the year of 1995.",
        "query": "SELECT * FROM film_market_estimation WHERE YEAR = 1995",
        "schema": "CREATE TABLE market (Market_ID NUMBER); CREATE TABLE film (Film_ID NUMBER); CREATE TABLE film_market_estimation (Estimation_ID NUMBER, Market_ID NUMBER, Year NUMBER, Type TEXT, Film_ID NUMBER);"
      },
      {
        "question": "Give me the distinct directors of films in those estimations.",
        "query": "SELECT DISTINCT t1.director FROM film AS t1 JOIN film_market_estimation AS t2 ON t1.film_id = t2.film_id WHERE t2.year = 1995",
        "schema": "CREATE TABLE film (Film_ID NUMBER, Director TEXT); CREATE TABLE film_market_estimation (Year NUMBER, Estimation_ID NUMBER, Film_ID NUMBER, Market_ID NUMBER, Type TEXT); CREATE TABLE market (Market_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show me all different market ids in any film market estimation.",
        "query": "SELECT DISTINCT market_id FROM film_market_estimation",
        "schema": "CREATE TABLE market (Market_ID NUMBER); CREATE TABLE film (Film_ID NUMBER); CREATE TABLE film_market_estimation (Estimation_ID NUMBER, Market_ID NUMBER, Type TEXT, Film_ID NUMBER);"
      },
      {
        "question": "Show me those with a low estimate above 10000.",
        "query": "SELECT market_id FROM film_market_estimation GROUP BY market_id HAVING max(low_estimate) > 10000",
        "schema": "CREATE TABLE film (Film_ID NUMBER); CREATE TABLE market (Market_ID NUMBER); CREATE TABLE film_market_estimation (Market_ID NUMBER, Estimation_ID NUMBER, Type TEXT, Low_Estimate NUMBER, Film_ID NUMBER, High_Estimate NUMBER);"
      },
      {
        "question": "What is the average number of cities of them?",
        "query": "SELECT avg(t2.number_cities) FROM film_market_estimation AS t1 JOIN market AS t2 ON t1.market_id = t2.market_id WHERE t1.low_estimate > 10000",
        "schema": "CREATE TABLE film_market_estimation (Market_ID NUMBER, Estimation_ID NUMBER, Type TEXT, High_Estimate NUMBER, Low_Estimate NUMBER, Film_ID NUMBER); CREATE TABLE market (Number_cities NUMBER, Market_ID NUMBER); CREATE TABLE film (Film_ID NUMBER);"
      }
    ],
    [
      {
        "question": "How many film market estimations are there?",
        "query": "SELECT count(*) FROM film_market_estimation",
        "schema": "CREATE TABLE film (Film_ID NUMBER); CREATE TABLE film_market_estimation (Type TEXT, Market_ID NUMBER, Estimation_ID NUMBER, Film_ID NUMBER); CREATE TABLE market (Market_ID NUMBER);"
      },
      {
        "question": "Show me the year eash estimation was made.",
        "query": "SELECT YEAR FROM film_market_estimation",
        "schema": "CREATE TABLE film_market_estimation (Film_ID NUMBER, Year NUMBER, Type TEXT, Estimation_ID NUMBER, Market_ID NUMBER); CREATE TABLE market (Market_ID NUMBER); CREATE TABLE film (Film_ID NUMBER);"
      },
      {
        "question": "What about those in the market Japan?",
        "query": "SELECT t1.year FROM film_market_estimation AS t1 JOIN market AS t2 ON t1.market_id = t2.market_id WHERE t2.country = \"Japan\"",
        "schema": "CREATE TABLE film_market_estimation (Market_ID NUMBER, Estimation_ID NUMBER, Year NUMBER, Film_ID NUMBER, Type TEXT); CREATE TABLE film (Film_ID NUMBER); CREATE TABLE market (Country TEXT, Market_ID NUMBER, Number_cities NUMBER);"
      },
      {
        "question": "List them in descending order.",
        "query": "SELECT t1.year FROM film_market_estimation AS t1 JOIN market AS t2 ON t1.market_id = t2.market_id WHERE t2.country = \"Japan\" ORDER BY t1.year DESC",
        "schema": "CREATE TABLE film_market_estimation (Film_ID NUMBER, Type TEXT, Year NUMBER, Estimation_ID NUMBER, Market_ID NUMBER); CREATE TABLE film (Film_ID NUMBER); CREATE TABLE market (Country TEXT, Number_cities NUMBER, Market_ID NUMBER);"
      }
    ],
    [
      {
        "question": "How many films are there?",
        "query": "SELECT count(*) FROM film",
        "schema": "CREATE TABLE film_market_estimation (Film_ID NUMBER, Type TEXT, Estimation_ID NUMBER); CREATE TABLE film (Film_ID NUMBER, Title TEXT, Director TEXT);"
      },
      {
        "question": "Show me all film studios in record.",
        "query": "SELECT DISTINCT studio FROM film",
        "schema": "CREATE TABLE film (Film_ID NUMBER, Studio TEXT, Title TEXT, Director TEXT); CREATE TABLE film_market_estimation (Estimation_ID NUMBER, Film_ID NUMBER, Type TEXT);"
      },
      {
        "question": "How many films does each of them have?",
        "query": "SELECT studio, count(*) FROM film GROUP BY studio",
        "schema": "CREATE TABLE film (Studio TEXT, Director TEXT, Title TEXT, Film_ID NUMBER); CREATE TABLE film_market_estimation (Estimation_ID NUMBER, Type TEXT, Film_ID NUMBER);"
      },
      {
        "question": "Show me the name of the studio that have the most.",
        "query": "SELECT studio FROM film GROUP BY studio ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE film (Director TEXT, Title TEXT, Studio TEXT, Film_ID NUMBER); CREATE TABLE film_market_estimation (Film_ID NUMBER, Estimation_ID NUMBER, Type TEXT);"
      }
    ],
    [
      {
        "question": "How many films are there?",
        "query": "SELECT count(*) FROM film",
        "schema": "CREATE TABLE film_market_estimation (Film_ID NUMBER, Type TEXT); CREATE TABLE film (Film_ID NUMBER, Title TEXT);"
      },
      {
        "question": "Show me all film studios in record.",
        "query": "SELECT DISTINCT studio FROM film",
        "schema": "CREATE TABLE film (Title TEXT, Film_ID NUMBER, Studio TEXT); CREATE TABLE film_market_estimation (Type TEXT, Film_ID NUMBER);"
      },
      {
        "question": "How many films does each of them have?",
        "query": "SELECT studio, count(*) FROM film GROUP BY studio",
        "schema": "CREATE TABLE film_market_estimation (Type TEXT, Film_ID NUMBER); CREATE TABLE film (Studio TEXT, Title TEXT, Film_ID NUMBER);"
      },
      {
        "question": "Show me the name of the studios that have at least two.",
        "query": "SELECT studio FROM film GROUP BY studio HAVING count(*) >= 2",
        "schema": "CREATE TABLE film (Title TEXT, Film_ID NUMBER, Studio TEXT); CREATE TABLE film_market_estimation (Film_ID NUMBER, Type TEXT);"
      }
    ],
    [
      {
        "question": "How many film market estimations are there?",
        "query": "SELECT count(*) FROM film_market_estimation",
        "schema": "CREATE TABLE market (Market_ID NUMBER); CREATE TABLE film (Film_ID NUMBER); CREATE TABLE film_market_estimation (Type TEXT, Estimation_ID NUMBER, High_Estimate NUMBER, Film_ID NUMBER, Market_ID NUMBER);"
      },
      {
        "question": "Show me the id of films that are in one of those estimations.",
        "query": "SELECT DISTINCT film_id FROM film_market_estimation",
        "schema": "CREATE TABLE market (Market_ID NUMBER); CREATE TABLE film (Title TEXT, Film_ID NUMBER); CREATE TABLE film_market_estimation (Type TEXT, Market_ID NUMBER, Film_ID NUMBER, Estimation_ID NUMBER, High_Estimate NUMBER);"
      },
      {
        "question": "Show me the title of films that are not one of those.",
        "query": "SELECT title FROM film WHERE film_id NOT IN (SELECT film_id FROM film_market_estimation)",
        "schema": "CREATE TABLE film_market_estimation (Estimation_ID NUMBER, Market_ID NUMBER, Type TEXT, Film_ID NUMBER, High_Estimate NUMBER); CREATE TABLE market (Market_ID NUMBER); CREATE TABLE film (Title TEXT, Film_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show me all film studios in record.",
        "query": "SELECT DISTINCT studio FROM film",
        "schema": "CREATE TABLE film (Film_ID NUMBER, Studio TEXT, Title TEXT);"
      },
      {
        "question": "Show me all the directors in record.",
        "query": "SELECT DISTINCT director FROM film",
        "schema": "CREATE TABLE film (Film_ID NUMBER, Title TEXT, Studio TEXT, Director TEXT);"
      },
      {
        "question": "Which studios have produced films with Nicholas Mayer?",
        "query": "SELECT studio FROM film WHERE director = \"Nicholas Meyer\"",
        "schema": "CREATE TABLE film (Studio TEXT, Film_ID NUMBER, Director TEXT, Title TEXT);"
      },
      {
        "question": "Among those studios, which of them also have films with Walter Hill?",
        "query": "SELECT studio FROM film WHERE director = \"Nicholas Meyer\" INTERSECT SELECT studio FROM film WHERE director = \"Walter Hill\"",
        "schema": "CREATE TABLE film (Studio TEXT, Director TEXT, Film_ID NUMBER, Title TEXT);"
      }
    ],
    [
      {
        "question": "Show me all film studios in record.",
        "query": "SELECT DISTINCT studio FROM film",
        "schema": "CREATE TABLE film (Studio TEXT, Film_ID NUMBER);"
      },
      {
        "question": "Which ones contain the word \"Universal\"?",
        "query": "SELECT DISTINCT studio FROM film WHERE studio LIKE \"%Universal%\"",
        "schema": "CREATE TABLE film (Film_ID NUMBER, Title TEXT, Studio TEXT);"
      },
      {
        "question": "Show me the titles of their films along with their name.",
        "query": "SELECT title , studio FROM film WHERE studio LIKE \"%Universal%\"",
        "schema": "CREATE TABLE film (Film_ID NUMBER, Title TEXT, Studio TEXT);"
      }
    ],
    [
      {
        "question": "Show me the name of all directors.",
        "query": "SELECT director FROM film",
        "schema": "CREATE TABLE film (Director TEXT, Film_ID NUMBER, Title TEXT);"
      },
      {
        "question": "Which studios did Walter Hill work with?",
        "query": "SELECT studio FROM film WHERE director = \"Walter Hill\"",
        "schema": "CREATE TABLE film (Director TEXT, Studio TEXT, Title TEXT, Film_ID NUMBER);"
      },
      {
        "question": "Show me studios that are not among them.",
        "query": "SELECT studio FROM film EXCEPT SELECT studio FROM film WHERE director = \"Walter Hill\"",
        "schema": "CREATE TABLE film (Studio TEXT, Director TEXT, Title TEXT, Film_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show me all film studios in record.",
        "query": "SELECT DISTINCT studio FROM film",
        "schema": "CREATE TABLE film (Film_ID NUMBER, Studio TEXT, Title TEXT);"
      },
      {
        "question": "What are the maximum gross for their films?",
        "query": "SELECT studio, max(gross_in_dollar) FROM film GROUP BY studio",
        "schema": "CREATE TABLE film (Studio TEXT, Film_ID NUMBER, Gross_in_dollar NUMBER, Title TEXT);"
      },
      {
        "question": "What about the average?",
        "query": "SELECT studio, min(gross_in_dollar) FROM film GROUP BY studio",
        "schema": "CREATE TABLE film (Title TEXT, Gross_in_dollar NUMBER, Film_ID NUMBER, Studio TEXT);"
      },
      {
        "question": "Show me the name of studios that have average above 4500000.",
        "query": "SELECT studio FROM film GROUP BY studio HAVING avg(gross_in_dollar) >= 4500000",
        "schema": "CREATE TABLE film (Film_ID NUMBER, Gross_in_dollar NUMBER, Title TEXT, Studio TEXT);"
      }
    ],
    [
      {
        "question": "Show me the title of all films that have market estimation.",
        "query": "SELECT DISTINCT t1.title FROM film AS t1 JOIN film_market_estimation AS t2 ON t1.film_id = t2.film_id",
        "schema": "CREATE TABLE market (Market_ID NUMBER); CREATE TABLE film_market_estimation (Estimation_ID NUMBER, Market_ID NUMBER, Film_ID NUMBER, Type TEXT); CREATE TABLE film (Title TEXT, Film_ID NUMBER);"
      },
      {
        "question": "What are their high market estimations?",
        "query": "SELECT t1.title, t2.high_estimate FROM film AS t1 JOIN film_market_estimation AS t2 ON t1.film_id = t2.film_id",
        "schema": "CREATE TABLE market (Market_ID NUMBER); CREATE TABLE film (Title TEXT, Film_ID NUMBER); CREATE TABLE film_market_estimation (High_Estimate NUMBER, Film_ID NUMBER, Low_Estimate NUMBER, Type TEXT, Market_ID NUMBER, Estimation_ID NUMBER);"
      },
      {
        "question": "Show me the film that is the highest of them.",
        "query": "SELECT t1.title FROM film AS t1 JOIN film_market_estimation AS t2 ON t1.film_id = t2.film_id ORDER BY high_estimate DESC LIMIT 1",
        "schema": "CREATE TABLE film (Film_ID NUMBER, Title TEXT); CREATE TABLE film_market_estimation (Estimation_ID NUMBER, Type TEXT, Market_ID NUMBER, High_Estimate NUMBER, Low_Estimate NUMBER, Film_ID NUMBER); CREATE TABLE market (Market_ID NUMBER);"
      }
    ]
  ],
  "party_host": [
    [
      {
        "question": "What are all the parties?",
        "query": "SELECT * FROM party",
        "schema": "CREATE TABLE party_host (Host_ID NUMBER, Party_ID NUMBER); CREATE TABLE party (Party_ID NUMBER); CREATE TABLE host (Host_ID NUMBER);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT count(*) FROM party",
        "schema": "CREATE TABLE party_host (Host_ID NUMBER, Party_ID NUMBER); CREATE TABLE host (Host_ID NUMBER); CREATE TABLE party (Number_of_hosts NUMBER, Party_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What are all the parties?",
        "query": "SELECT * FROM party",
        "schema": "CREATE TABLE party (Party_ID NUMBER); CREATE TABLE host (Host_ID NUMBER); CREATE TABLE party_host (Host_ID NUMBER, Party_ID NUMBER);"
      },
      {
        "question": "Order them by the number of hosts.",
        "query": "SELECT * FROM party ORDER BY number_of_hosts ASC",
        "schema": "CREATE TABLE party_host (Host_ID NUMBER, Party_ID NUMBER); CREATE TABLE party (Party_ID NUMBER, Number_of_hosts NUMBER); CREATE TABLE host (Host_ID NUMBER);"
      },
      {
        "question": "Only show the Party_Theme in that order.",
        "query": "SELECT party_theme FROM party ORDER BY number_of_hosts ASC",
        "schema": "CREATE TABLE host (Host_ID NUMBER); CREATE TABLE party (Party_ID NUMBER, Number_of_hosts NUMBER, Party_Theme TEXT); CREATE TABLE party_host (Host_ID NUMBER, Party_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What are all the parties?",
        "query": "SELECT * FROM party",
        "schema": "CREATE TABLE host (Host_ID NUMBER); CREATE TABLE party (Party_ID NUMBER); CREATE TABLE party_host (Host_ID NUMBER, Party_ID NUMBER);"
      },
      {
        "question": "what are their themes and locations?",
        "query": "SELECT party_theme , LOCATION FROM party",
        "schema": "CREATE TABLE party_host (Host_ID NUMBER, Party_ID NUMBER); CREATE TABLE party (Party_Theme TEXT, Location TEXT, Party_ID NUMBER); CREATE TABLE host (Host_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What are all the parties?",
        "query": "SELECT * FROM party",
        "schema": "CREATE TABLE host (Host_ID NUMBER); CREATE TABLE party_host (Host_ID NUMBER, Party_ID NUMBER); CREATE TABLE party (Party_ID NUMBER);"
      },
      {
        "question": "What about those with theme \"Spring\" or \"Teqnology\"?",
        "query": "SELECT * FROM party WHERE party_theme = \"Spring\" OR party_theme = \"Teqnology\"",
        "schema": "CREATE TABLE host (Host_ID NUMBER); CREATE TABLE party_host (Party_ID NUMBER, Host_ID NUMBER); CREATE TABLE party (Party_Theme TEXT, Party_ID NUMBER);"
      },
      {
        "question": "Show their first year and last year.",
        "query": "SELECT first_year , last_year FROM party WHERE party_theme = \"Spring\" OR party_theme = \"Teqnology\"",
        "schema": "CREATE TABLE party (Party_Theme TEXT, First_year TEXT, Party_ID NUMBER, Last_year TEXT); CREATE TABLE party_host (Party_ID NUMBER, Host_ID NUMBER); CREATE TABLE host (Host_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What are all the parties?",
        "query": "SELECT * FROM party",
        "schema": "CREATE TABLE party (Party_ID NUMBER); CREATE TABLE party_host (Host_ID NUMBER, Party_ID NUMBER); CREATE TABLE host (Host_ID NUMBER);"
      },
      {
        "question": "What are their number of hosts?",
        "query": "SELECT number_of_hosts FROM party",
        "schema": "CREATE TABLE party (Number_of_hosts NUMBER, Party_ID NUMBER); CREATE TABLE host (Host_ID NUMBER); CREATE TABLE party_host (Party_ID NUMBER, Host_ID NUMBER);"
      },
      {
        "question": "Show the average of them.",
        "query": "SELECT avg(number_of_hosts) FROM party",
        "schema": "CREATE TABLE party (Number_of_hosts NUMBER, Party_ID NUMBER); CREATE TABLE party_host (Host_ID NUMBER, Party_ID NUMBER); CREATE TABLE host (Host_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What are all the parties?",
        "query": "SELECT * FROM party",
        "schema": "CREATE TABLE party_host (Host_ID NUMBER, Party_ID NUMBER); CREATE TABLE host (Host_ID NUMBER); CREATE TABLE party (Party_ID NUMBER);"
      },
      {
        "question": "Order them by the number of hosts.",
        "query": "SELECT * FROM party ORDER BY number_of_hosts",
        "schema": "CREATE TABLE host (Host_ID NUMBER); CREATE TABLE party (Party_ID NUMBER, Number_of_hosts NUMBER); CREATE TABLE party_host (Party_ID NUMBER, Host_ID NUMBER);"
      },
      {
        "question": "Show the location of the top one.",
        "query": "SELECT LOCATION FROM party ORDER BY number_of_hosts DESC LIMIT 1",
        "schema": "CREATE TABLE host (Host_ID NUMBER); CREATE TABLE party_host (Party_ID NUMBER, Host_ID NUMBER); CREATE TABLE party (Party_ID NUMBER, Number_of_hosts NUMBER, Location TEXT);"
      }
    ],
    [
      {
        "question": "Who are all the hosts?",
        "query": "SELECT * FROM HOST",
        "schema": "CREATE TABLE party_host (Host_ID NUMBER, Is_Main_in_Charge OTHERS); CREATE TABLE party (Number_of_hosts NUMBER); CREATE TABLE host (Name TEXT, Host_ID NUMBER);"
      },
      {
        "question": "What are the different nationalities among them?",
        "query": "SELECT nationality FROM HOST GROUP BY nationality",
        "schema": "CREATE TABLE party (Number_of_hosts NUMBER); CREATE TABLE host (Nationality TEXT, Name TEXT, Host_ID NUMBER); CREATE TABLE party_host (Host_ID NUMBER, Is_Main_in_Charge OTHERS);"
      },
      {
        "question": "Please also show the number of hosts along with each nationality.",
        "query": "SELECT nationality , count(*) FROM HOST GROUP BY nationality",
        "schema": "CREATE TABLE party_host (Host_ID NUMBER, Is_Main_in_Charge OTHERS); CREATE TABLE party (Number_of_hosts NUMBER); CREATE TABLE host (Nationality TEXT, Name TEXT, Host_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Who are all the hosts?",
        "query": "SELECT * FROM HOST",
        "schema": "CREATE TABLE host (Host_ID NUMBER, Name TEXT); CREATE TABLE party (Number_of_hosts NUMBER); CREATE TABLE party_host (Host_ID NUMBER, Is_Main_in_Charge OTHERS);"
      },
      {
        "question": "What are the different nationalities among them?",
        "query": "SELECT nationality FROM HOST GROUP BY nationality",
        "schema": "CREATE TABLE party_host (Host_ID NUMBER, Is_Main_in_Charge OTHERS); CREATE TABLE host (Host_ID NUMBER, Name TEXT, Nationality TEXT); CREATE TABLE party (Number_of_hosts NUMBER);"
      },
      {
        "question": "Order them by the number of host in each nationality.",
        "query": "SELECT nationality FROM HOST GROUP BY nationality ORDER BY count(*)",
        "schema": "CREATE TABLE party_host (Host_ID NUMBER, Is_Main_in_Charge OTHERS); CREATE TABLE party (Number_of_hosts NUMBER); CREATE TABLE host (Name TEXT, Host_ID NUMBER, Nationality TEXT);"
      },
      {
        "question": "Show the top one.",
        "query": "SELECT nationality FROM HOST GROUP BY nationality ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE host (Name TEXT, Nationality TEXT, Host_ID NUMBER); CREATE TABLE party_host (Is_Main_in_Charge OTHERS, Host_ID NUMBER); CREATE TABLE party (Number_of_hosts NUMBER);"
      }
    ],
    [
      {
        "question": "Who are all the hosts?",
        "query": "SELECT * FROM HOST",
        "schema": "CREATE TABLE host (Name TEXT, Host_ID NUMBER); CREATE TABLE party (Number_of_hosts NUMBER); CREATE TABLE party_host (Host_ID NUMBER, Is_Main_in_Charge OTHERS);"
      },
      {
        "question": "Show hosts who are older than 45.",
        "query": "SELECT * FROM HOST WHERE age > 45",
        "schema": "CREATE TABLE party_host (Is_Main_in_Charge OTHERS, Host_ID NUMBER); CREATE TABLE host (Host_ID NUMBER, Name TEXT, Age TEXT); CREATE TABLE party (Number_of_hosts NUMBER);"
      },
      {
        "question": "Show hosts who are younger than 35.",
        "query": "SELECT * FROM HOST WHERE age < 35",
        "schema": "CREATE TABLE host (Host_ID NUMBER, Name TEXT, Age TEXT); CREATE TABLE party_host (Host_ID NUMBER, Is_Main_in_Charge OTHERS); CREATE TABLE party (Number_of_hosts NUMBER);"
      },
      {
        "question": "Show the nations that have hosts from above two results at the same time.",
        "query": "SELECT nationality FROM HOST WHERE age > 45 INTERSECT SELECT nationality FROM HOST WHERE age < 35",
        "schema": "CREATE TABLE host (Name TEXT, Host_ID NUMBER, Age TEXT, Nationality TEXT); CREATE TABLE party_host (Is_Main_in_Charge OTHERS, Host_ID NUMBER); CREATE TABLE party (Number_of_hosts NUMBER);"
      }
    ],
    [
      {
        "question": "Who are all the party hosts?",
        "query": "SELECT * FROM party_host",
        "schema": "CREATE TABLE party_host (Party_ID NUMBER, Is_Main_in_Charge OTHERS, Host_ID NUMBER); CREATE TABLE party (Party_ID NUMBER, Number_of_hosts NUMBER); CREATE TABLE host (Name TEXT, Host_ID NUMBER);"
      },
      {
        "question": "What are their names?",
        "query": "SELECT t2.name FROM party_host AS t1 JOIN HOST AS t2 ON t1.host_id = t2.host_id",
        "schema": "CREATE TABLE party_host (Is_Main_in_Charge OTHERS, Party_ID NUMBER, Host_ID NUMBER); CREATE TABLE party (Number_of_hosts NUMBER, Party_ID NUMBER); CREATE TABLE host (Host_ID NUMBER, Name TEXT);"
      },
      {
        "question": "Show the themes of parties they host along with their name.",
        "query": "SELECT t3.party_theme , t2.name FROM party_host AS t1 JOIN HOST AS t2 ON t1.host_id = t2.host_id JOIN party AS t3 ON t1.party_id = t3.party_id",
        "schema": "CREATE TABLE host (Name TEXT, Host_ID NUMBER); CREATE TABLE party_host (Host_ID NUMBER, Party_ID NUMBER, Is_Main_in_Charge OTHERS); CREATE TABLE party (Number_of_hosts NUMBER, Party_ID NUMBER, Party_Theme TEXT);"
      }
    ],
    [
      {
        "question": "Who are all the party hosts?",
        "query": "SELECT * FROM party_host",
        "schema": "CREATE TABLE party (Party_ID NUMBER, Number_of_hosts NUMBER); CREATE TABLE party_host (Is_Main_in_Charge OTHERS, Host_ID NUMBER, Party_ID NUMBER); CREATE TABLE host (Host_ID NUMBER, Name TEXT);"
      },
      {
        "question": "What are their names?",
        "query": "SELECT t2.name FROM party_host AS t1 JOIN HOST AS t2 ON t1.host_id = t2.host_id",
        "schema": "CREATE TABLE host (Host_ID NUMBER, Name TEXT); CREATE TABLE party (Number_of_hosts NUMBER, Party_ID NUMBER); CREATE TABLE party_host (Party_ID NUMBER, Is_Main_in_Charge OTHERS, Host_ID NUMBER);"
      },
      {
        "question": "Show the locations of parties they host along with their names.",
        "query": "SELECT t3.location , t2.name FROM party_host AS t1 JOIN HOST AS t2 ON t1.host_id = t2.host_id JOIN party AS t3 ON t1.party_id = t3.party_id",
        "schema": "CREATE TABLE host (Host_ID NUMBER, Name TEXT); CREATE TABLE party_host (Host_ID NUMBER, Is_Main_in_Charge OTHERS, Party_ID NUMBER); CREATE TABLE party (Party_ID NUMBER, Location TEXT, Number_of_hosts NUMBER);"
      },
      {
        "question": "Order them by the age of the host.",
        "query": "SELECT t3.location , t2.name FROM party_host AS t1 JOIN HOST AS t2 ON t1.host_id = t2.host_id JOIN party AS t3 ON t1.party_id = t3.party_id ORDER BY t2.age",
        "schema": "CREATE TABLE party (Number_of_hosts NUMBER, Party_ID NUMBER, Location TEXT); CREATE TABLE host (Age TEXT, Name TEXT, Host_ID NUMBER); CREATE TABLE party_host (Host_ID NUMBER, Party_ID NUMBER, Is_Main_in_Charge OTHERS);"
      }
    ],
    [
      {
        "question": "Who are all the party hosts?",
        "query": "SELECT * FROM party_host",
        "schema": "CREATE TABLE host (Host_ID NUMBER, Name TEXT); CREATE TABLE party_host (Host_ID NUMBER, Party_ID NUMBER, Is_Main_in_Charge OTHERS); CREATE TABLE party (Number_of_hosts NUMBER, Party_ID NUMBER);"
      },
      {
        "question": "Show the name of those who are order than 50.",
        "query": "SELECT t2.name FROM party_host AS t1 JOIN HOST AS t2 ON t1.host_id = t2.host_id WHERE t2.age > 50",
        "schema": "CREATE TABLE party (Party_ID NUMBER, Number_of_hosts NUMBER); CREATE TABLE party_host (Host_ID NUMBER, Is_Main_in_Charge OTHERS, Party_ID NUMBER); CREATE TABLE host (Host_ID NUMBER, Age TEXT, Name TEXT);"
      },
      {
        "question": "What about the locations of parties they host?",
        "query": "SELECT t3.location FROM party_host AS t1 JOIN HOST AS t2 ON t1.host_id = t2.host_id JOIN party AS t3 ON t1.party_id = t3.party_id WHERE t2.age > 50",
        "schema": "CREATE TABLE party_host (Host_ID NUMBER, Is_Main_in_Charge OTHERS, Party_ID NUMBER); CREATE TABLE party (Location TEXT, Number_of_hosts NUMBER, Party_ID NUMBER); CREATE TABLE host (Host_ID NUMBER, Age TEXT, Name TEXT);"
      }
    ],
    [
      {
        "question": "Show me all parties.",
        "query": "SELECT * FROM party",
        "schema": "CREATE TABLE host (Host_ID NUMBER); CREATE TABLE party_host (Party_ID NUMBER, Host_ID NUMBER); CREATE TABLE party (Party_ID NUMBER);"
      },
      {
        "question": "Show those with more than 20 hosts.",
        "query": "SELECT * FROM party WHERE number_of_hosts > 20",
        "schema": "CREATE TABLE party_host (Party_ID NUMBER, Host_ID NUMBER); CREATE TABLE host (Host_ID NUMBER); CREATE TABLE party (Number_of_hosts NUMBER, Party_ID NUMBER);"
      },
      {
        "question": "What are the host names for those parties?",
        "query": "SELECT t2.name FROM party_host AS t1 JOIN HOST AS t2 ON t1.host_id = t2.host_id JOIN party AS t3 ON t1.party_id = t3.party_id WHERE t3.number_of_hosts > 20",
        "schema": "CREATE TABLE party (Number_of_hosts NUMBER, Party_ID NUMBER); CREATE TABLE host (Host_ID NUMBER, Name TEXT, Age TEXT); CREATE TABLE party_host (Party_ID NUMBER, Host_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Who are all the hosts?",
        "query": "SELECT * FROM HOST",
        "schema": "CREATE TABLE party_host (Is_Main_in_Charge OTHERS, Host_ID NUMBER); CREATE TABLE party (Number_of_hosts NUMBER); CREATE TABLE host (Host_ID NUMBER, Name TEXT);"
      },
      {
        "question": "Who is the oldest one?",
        "query": "SELECT * FROM HOST ORDER BY age DESC LIMIT 1",
        "schema": "CREATE TABLE party_host (Is_Main_in_Charge OTHERS, Host_ID NUMBER); CREATE TABLE host (Host_ID NUMBER, Age TEXT, Name TEXT); CREATE TABLE party (Number_of_hosts NUMBER);"
      },
      {
        "question": "Show the name and the nationality of that host.",
        "query": "SELECT name , nationality FROM HOST ORDER BY age DESC LIMIT 1",
        "schema": "CREATE TABLE party_host (Host_ID NUMBER, Is_Main_in_Charge OTHERS); CREATE TABLE party (Number_of_hosts NUMBER); CREATE TABLE host (Nationality TEXT, Host_ID NUMBER, Name TEXT, Age TEXT);"
      }
    ]
  ],
  "ship_mission": [
    [
      {
        "question": "Show me the name of all the ships.",
        "query": "SELECT name FROM ship",
        "schema": "CREATE TABLE ship (Ship_ID NUMBER, Name TEXT, Type TEXT); CREATE TABLE mission (Ship_ID NUMBER);"
      },
      {
        "question": "Which of them belong to United states?",
        "query": "SELECT name FROM ship WHERE nationality = \"United States\"",
        "schema": "CREATE TABLE ship (Nationality TEXT, Type TEXT, Ship_ID NUMBER, Name TEXT); CREATE TABLE mission (Ship_ID NUMBER);"
      },
      {
        "question": "Include those that belong to United Kingdom.",
        "query": "SELECT name FROM ship WHERE nationality = \"United States\" OR nationality = \"United Kingdom\"",
        "schema": "CREATE TABLE ship (Name TEXT, Nationality TEXT, Type TEXT, Ship_ID NUMBER); CREATE TABLE mission (Ship_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show me the name of all the ships.",
        "query": "SELECT name FROM ship",
        "schema": "CREATE TABLE mission (Ship_ID NUMBER); CREATE TABLE ship (Name TEXT, Ship_ID NUMBER);"
      },
      {
        "question": "Which one has the largest tonnage?",
        "query": "SELECT name FROM ship ORDER BY tonnage DESC LIMIT 1",
        "schema": "CREATE TABLE ship (Name TEXT, Tonnage NUMBER, Ship_ID NUMBER); CREATE TABLE mission (Ship_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What are the types of ships?",
        "query": "SELECT TYPE FROM ship",
        "schema": "CREATE TABLE ship (Name TEXT, Type TEXT, Ship_ID NUMBER);"
      },
      {
        "question": "Which type is the most common?",
        "query": "SELECT TYPE FROM ship GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE ship (Type TEXT, Ship_ID NUMBER, Name TEXT);"
      }
    ],
    [
      {
        "question": "What nations are there?",
        "query": "SELECT nationality FROM ship",
        "schema": "CREATE TABLE ship (Nationality TEXT);"
      },
      {
        "question": "How many ships are there?",
        "query": "SELECT count(*) FROM ship",
        "schema": "CREATE TABLE ship (Nationality TEXT, Type TEXT, Name TEXT, Ship_ID NUMBER); CREATE TABLE mission (Ship_ID NUMBER);"
      },
      {
        "question": "How many ships does each nation have?",
        "query": "SELECT nationality, count(*) FROM ship GROUP BY nationality",
        "schema": "CREATE TABLE ship (Name TEXT, Type TEXT, Ship_ID NUMBER, Nationality TEXT); CREATE TABLE mission (Ship_ID NUMBER);"
      },
      {
        "question": "Show me nations that have more than two ships.",
        "query": "SELECT nationality FROM ship GROUP BY nationality HAVING count(*) > 2",
        "schema": "CREATE TABLE mission (Ship_ID NUMBER); CREATE TABLE ship (Ship_ID NUMBER, Type TEXT, Nationality TEXT, Name TEXT);"
      }
    ],
    [
      {
        "question": "What are the name of all the ships?",
        "query": "SELECT name FROM ship",
        "schema": "CREATE TABLE ship (Ship_ID NUMBER, Name TEXT, Type TEXT); CREATE TABLE mission (Ship_ID NUMBER);"
      },
      {
        "question": "Give me missions that were launched after 1928.",
        "query": "SELECT * FROM mission WHERE launched_year > 1928",
        "schema": "CREATE TABLE mission (Mission_ID NUMBER, Ship_ID NUMBER, Launched_Year NUMBER, Code TEXT); CREATE TABLE ship (Ship_ID NUMBER, Name TEXT, Type TEXT);"
      },
      {
        "question": "Which ships were involved in any of those?",
        "query": "SELECT t2.name FROM mission AS t1 JOIN ship AS t2 ON t1.ship_id = t2.ship_id WHERE t1.launched_year > 1928",
        "schema": "CREATE TABLE mission (Launched_Year NUMBER, Ship_ID NUMBER, Code TEXT, Mission_ID NUMBER); CREATE TABLE ship (Ship_ID NUMBER, Name TEXT, Type TEXT);"
      }
    ],
    [
      {
        "question": "How many ships are there?",
        "query": "SELECT count(*) FROM ship",
        "schema": "CREATE TABLE mission (Ship_ID NUMBER); CREATE TABLE ship (Name TEXT, Type TEXT, Ship_ID NUMBER);"
      },
      {
        "question": "Which of them are from United States?",
        "query": "SELECT * FROM ship WHERE nationality = \"United States\"",
        "schema": "CREATE TABLE ship (Type TEXT, Name TEXT, Nationality TEXT, Ship_ID NUMBER); CREATE TABLE mission (Ship_ID NUMBER);"
      },
      {
        "question": "Show me the distinct fate of missions that involve any of those.",
        "query": "SELECT DISTINCT t1.fate FROM mission AS t1 JOIN ship AS t2 ON t1.ship_id = t2.ship_id WHERE t2.nationality = \"United States\"",
        "schema": "CREATE TABLE mission (Ship_ID NUMBER, Mission_ID NUMBER, Fate TEXT, Code TEXT); CREATE TABLE ship (Type TEXT, Ship_ID NUMBER, Nationality TEXT, Name TEXT);"
      }
    ],
    [
      {
        "question": "What are all the missions?",
        "query": "SELECT * FROM mission",
        "schema": "CREATE TABLE mission (Mission_ID NUMBER, Code TEXT, Ship_ID NUMBER, Fate TEXT);"
      },
      {
        "question": "Which ship is involved in any of them?",
        "query": "SELECT ship_id FROM mission",
        "schema": "CREATE TABLE mission (Fate TEXT, Mission_ID NUMBER, Ship_ID NUMBER, Code TEXT); CREATE TABLE ship (Ship_ID NUMBER, Name TEXT, Type TEXT);"
      },
      {
        "question": "Give me the name of ships which are not among those.",
        "query": "SELECT name FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM mission)",
        "schema": "CREATE TABLE mission (Code TEXT, Ship_ID NUMBER, Mission_ID NUMBER, Fate TEXT); CREATE TABLE ship (Name TEXT, Type TEXT, Ship_ID NUMBER);"
      }
    ]
  ],
  "company_employee": [
    [
      {
        "question": "Tell me the industry of JPMorgan Chase.",
        "query": "SELECT industry FROM company WHERE name = \"JPMorgan Chase\"",
        "schema": "CREATE TABLE people (People_ID NUMBER, Name TEXT); CREATE TABLE company (Company_ID NUMBER, Industry TEXT, Name TEXT, Headquarters TEXT);"
      },
      {
        "question": "How about its market value?",
        "query": "SELECT market_value_in_billion FROM company WHERE name = \"JPMorgan Chase\"",
        "schema": "CREATE TABLE company (Name TEXT, Market_Value_in_Billion NUMBER, Industry TEXT, Company_ID NUMBER, Headquarters TEXT); CREATE TABLE people (Name TEXT, People_ID NUMBER);"
      },
      {
        "question": "Tell me the names of companies in the banking or retailing industry.",
        "query": "SELECT name FROM company WHERE industry = \"Banking\" OR industry = \"Retailing\"",
        "schema": "CREATE TABLE company (Headquarters TEXT, Name TEXT, Market_Value_in_Billion NUMBER, Company_ID NUMBER, Industry TEXT); CREATE TABLE people (People_ID NUMBER, Name TEXT);"
      }
    ],
    [
      {
        "question": "Tell me the headquarters of the company HSBC.",
        "query": "SELECT headquarters FROM company WHERE name = \"HSBC\"",
        "schema": "CREATE TABLE people (People_ID NUMBER); CREATE TABLE company (Headquarters TEXT, Name TEXT, Company_ID NUMBER);"
      },
      {
        "question": "What is its market value?",
        "query": "SELECT market_value_in_billion FROM company WHERE name = \"HSBC\"",
        "schema": "CREATE TABLE people (Name TEXT, People_ID NUMBER); CREATE TABLE company (Market_Value_in_Billion NUMBER, Company_ID NUMBER, Name TEXT, Headquarters TEXT);"
      },
      {
        "question": "What is the maximum and minimum market value of companies.",
        "query": "SELECT max(market_value_in_billion) , min(market_value_in_billion) FROM company",
        "schema": "CREATE TABLE people (Name TEXT, People_ID NUMBER); CREATE TABLE company (Market_Value_in_Billion NUMBER, Company_ID NUMBER, Headquarters TEXT, Name TEXT);"
      }
    ],
    [
      {
        "question": "Tell me the sales of HSBC.",
        "query": "SELECT sales_in_billion FROM company WHERE name = \"HSBC\"",
        "schema": "CREATE TABLE company (Headquarters TEXT, Sales_in_Billion NUMBER, Company_ID NUMBER, Name TEXT); CREATE TABLE people (People_ID NUMBER, Name TEXT);"
      },
      {
        "question": "How about that of PetroChina?",
        "query": "SELECT sales_in_billion FROM company WHERE name = \"PetroChina\"",
        "schema": "CREATE TABLE company (Company_ID NUMBER, Headquarters TEXT, Sales_in_Billion NUMBER, Name TEXT); CREATE TABLE people (Name TEXT, People_ID NUMBER);"
      },
      {
        "question": "What is the headquarters of the company with the largest sales?",
        "query": "SELECT headquarters FROM company ORDER BY sales_in_billion DESC LIMIT 1",
        "schema": "CREATE TABLE company (Sales_in_Billion NUMBER, Headquarters TEXT, Company_ID NUMBER, Name TEXT); CREATE TABLE people (People_ID NUMBER, Name TEXT);"
      }
    ],
    [
      {
        "question": "Tell me the profits of the company BP.",
        "query": "SELECT profits_in_billion FROM company WHERE name = \"BP\"",
        "schema": "CREATE TABLE employment (Company_ID NUMBER, People_ID NUMBER); CREATE TABLE company (Profits_in_Billion NUMBER, Company_ID NUMBER, Name TEXT); CREATE TABLE people (Name TEXT, People_ID NUMBER);"
      },
      {
        "question": "How about its headquarters?",
        "query": "SELECT headquarters FROM company WHERE name = \"BP\"",
        "schema": "CREATE TABLE company (Profits_in_Billion NUMBER, Headquarters TEXT, Name TEXT, Company_ID NUMBER); CREATE TABLE employment (Company_ID NUMBER, People_ID NUMBER); CREATE TABLE people (Name TEXT, People_ID NUMBER);"
      },
      {
        "question": "What is the most common headquarters for companies?",
        "query": "SELECT headquarters FROM company GROUP BY headquarters ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE employment (Company_ID NUMBER, People_ID NUMBER); CREATE TABLE people (Name TEXT, People_ID NUMBER); CREATE TABLE company (Name TEXT, Company_ID NUMBER, Headquarters TEXT, Profits_in_Billion NUMBER);"
      }
    ],
    [
      {
        "question": "Tell me ExxonMobil's industry.",
        "query": "SELECT industry FROM company WHERE name = \"ExxonMobil\"",
        "schema": "CREATE TABLE people (Name TEXT, People_ID NUMBER); CREATE TABLE company (Company_ID NUMBER, Industry TEXT, Headquarters TEXT, Name TEXT);"
      },
      {
        "question": "What is its headquarters?",
        "query": "SELECT headquarters FROM company WHERE name = \"ExxonMobil\"",
        "schema": "CREATE TABLE people (Name TEXT, People_ID NUMBER); CREATE TABLE company (Headquarters TEXT, Name TEXT, Industry TEXT, Company_ID NUMBER);"
      },
      {
        "question": "Tell me the headquarters that have at least two companies.",
        "query": "SELECT headquarters FROM company GROUP BY headquarters HAVING count(*) >= 2",
        "schema": "CREATE TABLE people (People_ID NUMBER, Name TEXT); CREATE TABLE company (Name TEXT, Industry TEXT, Company_ID NUMBER, Headquarters TEXT);"
      }
    ],
    [
      {
        "question": "Tell me the companies in the banking industry.",
        "query": "SELECT name FROM company WHERE industry = \"Banking\"",
        "schema": "CREATE TABLE people (People_ID NUMBER, Name TEXT); CREATE TABLE company (Company_ID NUMBER, Name TEXT, Headquarters TEXT, Industry TEXT);"
      },
      {
        "question": "Where are their headquarters?",
        "query": "SELECT headquarters FROM company WHERE industry = \"Banking\"",
        "schema": "CREATE TABLE company (Industry TEXT, Headquarters TEXT, Name TEXT, Company_ID NUMBER); CREATE TABLE people (Name TEXT, People_ID NUMBER);"
      },
      {
        "question": "Tell me the headquarters that have both companies in the banking industry and companies in the oil and gas industry.",
        "query": "SELECT headquarters FROM company WHERE industry = \"Banking\" INTERSECT SELECT headquarters FROM company WHERE industry = \"Oil and gas\"",
        "schema": "CREATE TABLE company (Headquarters TEXT, Industry TEXT, Name TEXT, Company_ID NUMBER); CREATE TABLE people (Name TEXT, People_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Tell me Brad Lohaus's age.",
        "query": "SELECT age FROM people WHERE name = \"Brad Lohaus\"",
        "schema": "CREATE TABLE company (Company_ID NUMBER); CREATE TABLE people (Age NUMBER, People_ID NUMBER, Name TEXT);"
      },
      {
        "question": "Where does he work?",
        "query": "SELECT t3.name FROM employment AS t1 JOIN people AS t2 ON t1.people_id = t2.people_id JOIN company AS t3 ON t1.company_id = t3.company_id WHERE t2.name = \"Brad Lohaus\"",
        "schema": "CREATE TABLE company (Company_ID NUMBER, Headquarters TEXT, Name TEXT); CREATE TABLE people (Age NUMBER, People_ID NUMBER, Name TEXT); CREATE TABLE employment (Company_ID NUMBER, People_ID NUMBER);"
      },
      {
        "question": "How about all the names of the companies and of the employees?",
        "query": "SELECT t3.name , t2.name FROM employment AS t1 JOIN people AS t2 ON t1.people_id = t2.people_id JOIN company AS t3 ON t1.company_id = t3.company_id",
        "schema": "CREATE TABLE company (Name TEXT, Company_ID NUMBER, Headquarters TEXT); CREATE TABLE employment (People_ID NUMBER, Company_ID NUMBER); CREATE TABLE people (People_ID NUMBER, Name TEXT, Age NUMBER);"
      }
    ],
    [
      {
        "question": "Tell me the people working in HSBC.",
        "query": "SELECT t2.name FROM employment AS t1 JOIN people AS t2 ON t1.people_id = t2.people_id JOIN company AS t3 ON t1.company_id = t3.company_id WHERE t3.name = \"HSBC\"",
        "schema": "CREATE TABLE people (People_ID NUMBER, Name TEXT); CREATE TABLE employment (People_ID NUMBER, Company_ID NUMBER); CREATE TABLE company (Name TEXT, Company_ID NUMBER, Headquarters TEXT);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT count(*) FROM employment AS t1 JOIN people AS t2 ON t1.people_id = t2.people_id JOIN company AS t3 ON t1.company_id = t3.company_id WHERE t3.name = \"HSBC\"",
        "schema": "CREATE TABLE employment (Company_ID NUMBER, People_ID NUMBER); CREATE TABLE company (Company_ID NUMBER, Name TEXT, Headquarters TEXT); CREATE TABLE people (Name TEXT, People_ID NUMBER);"
      },
      {
        "question": "What are the names of the companies and that of the employees in descending order of number of years working for that employee?",
        "query": "SELECT t3.name , t2.name FROM employment AS t1 JOIN people AS t2 ON t1.people_id = t2.people_id JOIN company AS t3 ON t1.company_id = t3.company_id ORDER BY t1.year_working",
        "schema": "CREATE TABLE employment (Company_ID NUMBER, People_ID NUMBER, Year_working NUMBER); CREATE TABLE people (People_ID NUMBER, Name TEXT); CREATE TABLE company (Name TEXT, Headquarters TEXT, Company_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Tell me the company Tim Naegeli works in.",
        "query": "SELECT t3.name FROM employment AS t1 JOIN people AS t2 ON t1.people_id = t2.people_id JOIN company AS t3 ON t1.company_id = t3.company_id WHERE t2.name = \"Tim Naegeli\"",
        "schema": "CREATE TABLE company (Name TEXT, Headquarters TEXT, Company_ID NUMBER); CREATE TABLE employment (Company_ID NUMBER, People_ID NUMBER); CREATE TABLE people (Name TEXT, People_ID NUMBER);"
      },
      {
        "question": "What are this company's sales numbers?",
        "query": "SELECT t3.sales_in_billion FROM employment AS t1 JOIN people AS t2 ON t1.people_id = t2.people_id JOIN company AS t3 ON t1.company_id = t3.company_id WHERE t2.name = \"Tim Naegeli\"",
        "schema": "CREATE TABLE employment (People_ID NUMBER, Company_ID NUMBER); CREATE TABLE people (People_ID NUMBER, Name TEXT); CREATE TABLE company (Headquarters TEXT, Name TEXT, Sales_in_Billion NUMBER, Company_ID NUMBER);"
      },
      {
        "question": "Tell me the names of the employees that work for the companies with sales bigger than 200.",
        "query": "SELECT t2.name FROM employment AS t1 JOIN people AS t2 ON t1.people_id = t2.people_id JOIN company AS t3 ON t1.company_id = t3.company_id WHERE t3.sales_in_billion > 200",
        "schema": "CREATE TABLE employment (Company_ID NUMBER, People_ID NUMBER); CREATE TABLE company (Name TEXT, Headquarters TEXT, Company_ID NUMBER, Sales_in_Billion NUMBER); CREATE TABLE people (People_ID NUMBER, Name TEXT);"
      }
    ],
    [
      {
        "question": "What are PetroChina's assets?",
        "query": "SELECT assets_in_billion FROM company WHERE name = \"PetroChina\"",
        "schema": "CREATE TABLE people (People_ID NUMBER, Name TEXT); CREATE TABLE company (Assets_in_Billion NUMBER, Company_ID NUMBER, Name TEXT);"
      },
      {
        "question": "How many employees are there?",
        "query": "SELECT count(*) FROM employment AS t1 JOIN people AS t2 ON t1.people_id = t2.people_id JOIN company AS t3 ON t1.company_id = t3.company_id WHERE t3.name = \"PetroChina\"",
        "schema": "CREATE TABLE employment (Company_ID NUMBER, People_ID NUMBER); CREATE TABLE people (People_ID NUMBER, Name TEXT); CREATE TABLE company (Company_ID NUMBER, Assets_in_Billion NUMBER, Name TEXT);"
      },
      {
        "question": "Tell me the names of the companies and the number of employees they have.",
        "query": "SELECT t3.name , count(*) FROM employment AS t1 JOIN people AS t2 ON t1.people_id = t2.people_id JOIN company AS t3 ON t1.company_id = t3.company_id GROUP BY t3.name",
        "schema": "CREATE TABLE people (Name TEXT, People_ID NUMBER); CREATE TABLE employment (Company_ID NUMBER, People_ID NUMBER); CREATE TABLE company (Name TEXT, Assets_in_Billion NUMBER, Company_ID NUMBER);"
      }
    ],
    [
      {
        "question": "How old is David Butler?",
        "query": "SELECT age FROM people WHERE name = \"David Butler\"",
        "schema": "CREATE TABLE company (Name TEXT); CREATE TABLE people (Name TEXT, People_ID NUMBER, Age NUMBER);"
      },
      {
        "question": "Where does he work?",
        "query": "SELECT t3.name FROM employment AS t1 JOIN people AS t2 ON t1.people_id = t2.people_id JOIN company AS t3 ON t1.company_id = t3.company_id WHERE t2.name = \"Brad Lohaus\"",
        "schema": "CREATE TABLE company (Name TEXT, Headquarters TEXT, Company_ID NUMBER); CREATE TABLE employment (People_ID NUMBER, Company_ID NUMBER); CREATE TABLE people (Age NUMBER, Name TEXT, People_ID NUMBER);"
      },
      {
        "question": "Tell me the names of people that are not employed by any company.",
        "query": "SELECT name FROM people WHERE people_id NOT IN (SELECT people_id FROM employment)",
        "schema": "CREATE TABLE employment (Company_ID NUMBER, People_ID NUMBER); CREATE TABLE company (Name TEXT, Headquarters TEXT, Company_ID NUMBER); CREATE TABLE people (People_ID NUMBER, Age NUMBER, Name TEXT);"
      }
    ]
  ],
  "tracking_share_transactions": [
    [
      {
        "question": "Show the amount of transactions whose type code is \"PUR\"",
        "query": "SELECT amount_of_transaction FROM transactions WHERE transaction_type_code = \"PUR\"",
        "schema": "CREATE TABLE Transactions (transaction_type_code TEXT, amount_of_transaction NUMBER, transaction_id NUMBER); CREATE TABLE Ref_Transaction_Types (transaction_type_code TEXT, transaction_type_description TEXT);"
      },
      {
        "question": "Show average amount of transactions whose type code is \"PUR\"",
        "query": "SELECT avg(amount_of_transaction) FROM transactions WHERE transaction_type_code = \"PUR\"",
        "schema": "CREATE TABLE Ref_Transaction_Types (transaction_type_description TEXT, transaction_type_code TEXT); CREATE TABLE Transactions (amount_of_transaction NUMBER, transaction_type_code TEXT, transaction_id NUMBER);"
      },
      {
        "question": "Show the minimum amount of transactions whose type code is \"PUR\" and whose share count is bigger than 50.",
        "query": "SELECT min(amount_of_transaction) FROM transactions WHERE transaction_type_code = \"PUR\" AND share_count > 50",
        "schema": "CREATE TABLE Ref_Transaction_Types (transaction_type_code TEXT, transaction_type_description TEXT); CREATE TABLE Transactions (amount_of_transaction NUMBER, share_count TEXT, transaction_id NUMBER, transaction_type_code TEXT);"
      }
    ],
    [
      {
        "question": "Show the dates of transactions if the share count is bigger than 100.",
        "query": "SELECT date_of_transaction FROM transactions WHERE share_count > 100",
        "schema": "CREATE TABLE Transactions (transaction_id NUMBER, date_of_transaction TIME, amount_of_transaction NUMBER, share_count TEXT);"
      },
      {
        "question": "Show the dates of transactions if the amount is bigger than 1000.",
        "query": "SELECT date_of_transaction FROM transactions WHERE amount_of_transaction > 1000",
        "schema": "CREATE TABLE Transactions (transaction_id NUMBER, share_count TEXT, amount_of_transaction NUMBER, date_of_transaction TIME);"
      },
      {
        "question": "What are the dates of the transactions in these two groups?",
        "query": "SELECT date_of_transaction FROM transactions WHERE share_count > 100 OR amount_of_transaction > 1000",
        "schema": "CREATE TABLE Transactions (share_count TEXT, amount_of_transaction NUMBER, date_of_transaction TIME, transaction_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show the transaction type description if the share count is smaller than 10.",
        "query": "SELECT t1.transaction_type_description FROM ref_transaction_types AS t1 JOIN transactions AS t2 ON t1.transaction_type_code = t2.transaction_type_code WHERE t2.share_count < 10",
        "schema": "CREATE TABLE Ref_Transaction_Types (transaction_type_code TEXT, transaction_type_description TEXT); CREATE TABLE Transactions (transaction_type_code TEXT, transaction_id NUMBER, share_count TEXT);"
      },
      {
        "question": "Please also show their transaction dates.",
        "query": "SELECT t1.transaction_type_description , t2.date_of_transaction FROM ref_transaction_types AS t1 JOIN transactions AS t2 ON t1.transaction_type_code = t2.transaction_type_code WHERE t2.share_count < 10",
        "schema": "CREATE TABLE Transactions (date_of_transaction TIME, transaction_id NUMBER, share_count TEXT, transaction_type_code TEXT); CREATE TABLE Ref_Transaction_Types (transaction_type_description TEXT, transaction_type_code TEXT);"
      }
    ],
    [
      {
        "question": "Show the average share count of all investors.",
        "query": "SELECT avg(share_count) FROM transactions",
        "schema": "CREATE TABLE Investors (Investor_details TEXT, investor_id NUMBER); CREATE TABLE Transactions (investor_id NUMBER, share_count TEXT); CREATE TABLE Lots (investor_id NUMBER);"
      },
      {
        "question": "Count the number of investors who make any transaction with share count greater than 100.",
        "query": "SELECT count(*) FROM investors AS t1 JOIN transactions AS t2 ON t1.investor_id = t2.investor_id WHERE t2.share_count > 100",
        "schema": "CREATE TABLE Investors (Investor_details TEXT, investor_id NUMBER); CREATE TABLE Transactions (share_count TEXT, investor_id NUMBER, transaction_id NUMBER); CREATE TABLE Lots (investor_id NUMBER);"
      },
      {
        "question": "Show their details.",
        "query": "SELECT t1.investor_details FROM investors AS t1 JOIN transactions AS t2 ON t1.investor_id = t2.investor_id WHERE t2.share_count > 100",
        "schema": "CREATE TABLE Transactions (share_count TEXT, other_details TEXT, investor_id NUMBER, transaction_id NUMBER); CREATE TABLE Lots (investor_id NUMBER); CREATE TABLE Investors (Investor_details TEXT, investor_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show the lot details of all lots.",
        "query": "SELECT lot_details FROM lots",
        "schema": "CREATE TABLE Transactions_Lots (lot_id NUMBER, transaction_id NUMBER); CREATE TABLE Lots (lot_id NUMBER, lot_details TEXT);"
      },
      {
        "question": "Show the ids of investors with details \"l\".",
        "query": "SELECT investor_id FROM investors WHERE investor_details = \"l\"",
        "schema": "CREATE TABLE Transactions (transaction_id NUMBER, investor_id NUMBER); CREATE TABLE Transactions_Lots (lot_id NUMBER, transaction_id NUMBER); CREATE TABLE Investors (investor_id NUMBER, Investor_details TEXT); CREATE TABLE Lots (lot_details TEXT, investor_id NUMBER, lot_id NUMBER);"
      },
      {
        "question": "Return the lot details of lots that belong to investors with details \"l\".",
        "query": "SELECT t2.lot_details FROM investors AS t1 JOIN lots AS t2 ON t1.investor_id = t2.investor_id WHERE t1.investor_details = \"l\"",
        "schema": "CREATE TABLE Transactions (investor_id NUMBER, transaction_id NUMBER); CREATE TABLE Investors (Investor_details TEXT, investor_id NUMBER); CREATE TABLE Transactions_Lots (transaction_id NUMBER, lot_id NUMBER); CREATE TABLE Lots (investor_id NUMBER, lot_details TEXT, lot_id NUMBER);"
      }
    ],
    [
      {
        "question": "What is the average transaction amount?",
        "query": "SELECT avg(amount_of_transaction) FROM transactions",
        "schema": "CREATE TABLE Transactions (transaction_type_code TEXT, amount_of_transaction NUMBER, transaction_id NUMBER); CREATE TABLE Purchases (purchase_transaction_id NUMBER); CREATE TABLE Sales (sales_transaction_id NUMBER); CREATE TABLE Transactions_Lots (transaction_id NUMBER);"
      },
      {
        "question": "How many transactions have an amount bigger than 10000?",
        "query": "SELECT count(amount_of_transaction) FROM transactions WHERE amount_of_transaction > 10000",
        "schema": "CREATE TABLE Purchases (purchase_transaction_id NUMBER); CREATE TABLE Sales (sales_transaction_id NUMBER); CREATE TABLE Transactions (transaction_type_code TEXT, amount_of_transaction NUMBER, transaction_id NUMBER); CREATE TABLE Transactions_Lots (transaction_id NUMBER);"
      },
      {
        "question": "Please show the purchase details of these transactions.",
        "query": "SELECT t1.purchase_details FROM purchases AS t1 JOIN transactions AS t2 ON t1.purchase_transaction_id = t2.transaction_id WHERE t2.amount_of_transaction > 10000",
        "schema": "CREATE TABLE Transactions_Lots (transaction_id NUMBER, lot_id NUMBER); CREATE TABLE Lots (lot_id NUMBER, lot_details TEXT); CREATE TABLE Purchases (purchase_details TEXT, purchase_transaction_id NUMBER); CREATE TABLE Sales (sales_transaction_id NUMBER, sales_details TEXT); CREATE TABLE Transactions (transaction_id NUMBER, other_details TEXT, amount_of_transaction NUMBER, transaction_type_code TEXT);"
      }
    ],
    [
      {
        "question": "What is the minimum transaction amount?",
        "query": "SELECT min(amount_of_transaction) FROM transactions",
        "schema": "CREATE TABLE Purchases (purchase_transaction_id NUMBER); CREATE TABLE Transactions_Lots (transaction_id NUMBER); CREATE TABLE Sales (sales_transaction_id NUMBER); CREATE TABLE Transactions (transaction_type_code TEXT, transaction_id NUMBER, amount_of_transaction NUMBER);"
      },
      {
        "question": "How many transactions have an amount smaller than 3000?",
        "query": "SELECT count(amount_of_transaction) FROM transactions WHERE amount_of_transaction < 3000",
        "schema": "CREATE TABLE Transactions_Lots (transaction_id NUMBER); CREATE TABLE Transactions (transaction_type_code TEXT, amount_of_transaction NUMBER, transaction_id NUMBER); CREATE TABLE Purchases (purchase_transaction_id NUMBER); CREATE TABLE Sales (sales_transaction_id NUMBER);"
      },
      {
        "question": "Please show the sale details and dates of transactions with amount smaller than 3000.",
        "query": "SELECT t1.sales_details , t2.date_of_transaction FROM sales AS t1 JOIN transactions AS t2 ON t1.sales_transaction_id = t2.transaction_id WHERE t2.amount_of_transaction < 3000",
        "schema": "CREATE TABLE Sales (sales_transaction_id NUMBER, sales_details TEXT); CREATE TABLE Transactions (transaction_id NUMBER, date_of_transaction TIME, transaction_type_code TEXT, amount_of_transaction NUMBER); CREATE TABLE Transactions_Lots (transaction_id NUMBER); CREATE TABLE Purchases (purchase_details TEXT, purchase_transaction_id NUMBER);"
      }
    ],
    [
      {
        "question": "What is the average share amount of the transactions?",
        "query": "SELECT avg(share_count) FROM transactions",
        "schema": "CREATE TABLE Transactions (amount_of_transaction NUMBER, transaction_id NUMBER, share_count TEXT);"
      },
      {
        "question": "How many transactions have a share count smaller than 50?",
        "query": "SELECT count(*) FROM transactions_lots AS t1 JOIN transactions AS t2 ON t1.transaction_id = t2.transaction_id WHERE t2.share_count < 50",
        "schema": "CREATE TABLE Transactions_Lots (transaction_id NUMBER); CREATE TABLE Transactions (transaction_id NUMBER, amount_of_transaction NUMBER, share_count TEXT);"
      },
      {
        "question": "What are the lot details of lots associated with transactions with share count smaller than 50?",
        "query": "SELECT t1.lot_details FROM lots AS t1 JOIN transactions_lots AS t2 ON t1.lot_id = t2.transaction_id JOIN transactions AS t3 ON t2.transaction_id = t3.transaction_id WHERE t3.share_count < 50",
        "schema": "CREATE TABLE Transactions_Lots (transaction_id NUMBER, lot_id NUMBER); CREATE TABLE Transactions (transaction_id NUMBER, amount_of_transaction NUMBER, share_count TEXT, other_details TEXT); CREATE TABLE Lots (lot_id NUMBER, lot_details TEXT);"
      }
    ],
    [
      {
        "question": "Show the transaction id of transactions whose share count is bigger than 100.",
        "query": "SELECT transaction_id FROM transactions WHERE share_count > 100",
        "schema": "CREATE TABLE Transactions_Lots (transaction_id NUMBER); CREATE TABLE Transactions (transaction_id NUMBER, share_count TEXT, amount_of_transaction NUMBER);"
      },
      {
        "question": "How many transactions whose share count is bigger than 100 and whose type code is \"PUR\"?.",
        "query": "SELECT count(transaction_id) FROM transactions WHERE share_count > 100 AND transaction_type_code = \"PUR\"",
        "schema": "CREATE TABLE Ref_Transaction_Types (transaction_type_code TEXT); CREATE TABLE Transactions (transaction_type_code TEXT, transaction_id NUMBER, share_count TEXT, amount_of_transaction NUMBER); CREATE TABLE Transactions_Lots (transaction_id NUMBER);"
      },
      {
        "question": "What are the lot details of lots associated with transactions whose share count is bigger than 100 and whose type code is \"PUR\"?",
        "query": "SELECT t1.lot_details FROM lots AS t1 JOIN transactions_lots AS t2 ON t1.lot_id = t2.transaction_id JOIN transactions AS t3 ON t2.transaction_id = t3.transaction_id WHERE t3.share_count > 100 AND t3.transaction_type_code = \"PUR\"",
        "schema": "CREATE TABLE Lots (lot_id NUMBER, lot_details TEXT); CREATE TABLE Ref_Transaction_Types (transaction_type_code TEXT); CREATE TABLE Transactions_Lots (lot_id NUMBER, transaction_id NUMBER); CREATE TABLE Transactions (amount_of_transaction NUMBER, transaction_id NUMBER, transaction_type_code TEXT, share_count TEXT);"
      }
    ],
    [
      {
        "question": "How many different transaction types are there?",
        "query": "SELECT count(DISTINCT transaction_type_code) FROM transactions",
        "schema": "CREATE TABLE Transactions (transaction_id NUMBER, transaction_type_code TEXT); CREATE TABLE Ref_Transaction_Types (transaction_type_code TEXT, transaction_type_description TEXT);"
      },
      {
        "question": "What is the average share count of different transaction types?",
        "query": "SELECT transaction_type_code , avg(share_count) FROM transactions GROUP BY transaction_type_code",
        "schema": "CREATE TABLE Ref_Transaction_Types (transaction_type_description TEXT, transaction_type_code TEXT); CREATE TABLE Transactions (transaction_type_code TEXT, transaction_id NUMBER, share_count TEXT);"
      },
      {
        "question": "Show the maximum and minimum share count of different transaction types.",
        "query": "SELECT transaction_type_code , max(share_count) , min(share_count) FROM transactions GROUP BY transaction_type_code",
        "schema": "CREATE TABLE Transactions (share_count TEXT, amount_of_transaction NUMBER, transaction_id NUMBER, transaction_type_code TEXT); CREATE TABLE Ref_Transaction_Types (transaction_type_description TEXT, transaction_type_code TEXT);"
      }
    ],
    [
      {
        "question": "What is the maximum share count of transactions?",
        "query": "SELECT max(share_count) FROM transactions",
        "schema": "CREATE TABLE Transactions (share_count TEXT, transaction_id NUMBER, amount_of_transaction NUMBER);"
      },
      {
        "question": "What is the average share count of transactions made by each investor?",
        "query": "SELECT investor_id , avg(share_count) FROM transactions GROUP BY investor_id",
        "schema": "CREATE TABLE Transactions (share_count TEXT, investor_id NUMBER, amount_of_transaction NUMBER, transaction_id NUMBER); CREATE TABLE Investors (investor_id NUMBER);"
      },
      {
        "question": "Please order them by average share count.",
        "query": "SELECT investor_id , avg(share_count) FROM transactions GROUP BY investor_id ORDER BY avg(share_count)",
        "schema": "CREATE TABLE Transactions (investor_id NUMBER, share_count TEXT, transaction_id NUMBER, amount_of_transaction NUMBER); CREATE TABLE Investors (investor_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show the max amount of transactions for different lots.",
        "query": "SELECT max(amount_of_transaction) FROM transactions",
        "schema": "CREATE TABLE Transactions_Lots (transaction_id NUMBER, lot_id NUMBER); CREATE TABLE Sales (sales_transaction_id NUMBER); CREATE TABLE Lots (lot_details TEXT, lot_id NUMBER); CREATE TABLE Transactions (transaction_id NUMBER, transaction_type_code TEXT, amount_of_transaction NUMBER, share_count TEXT); CREATE TABLE Purchases (purchase_transaction_id NUMBER);"
      },
      {
        "question": "What is the average amount of transactions for all lots?",
        "query": "SELECT avg(amount_of_transaction) FROM transactions",
        "schema": "CREATE TABLE Lots (lot_id NUMBER, lot_details TEXT); CREATE TABLE Transactions_Lots (transaction_id NUMBER, lot_id NUMBER); CREATE TABLE Sales (sales_transaction_id NUMBER); CREATE TABLE Transactions (amount_of_transaction NUMBER, transaction_type_code TEXT, transaction_id NUMBER, share_count TEXT); CREATE TABLE Purchases (purchase_transaction_id NUMBER);"
      },
      {
        "question": "What is the average amount of transactions for the lot with id 1?",
        "query": "SELECT t2.lot_id , avg(amount_of_transaction) FROM transactions AS t1 JOIN transactions_lots AS t2 ON t1.transaction_id = t2.transaction_id WHERE t2.lot_id = 1 GROUP BY t2.lot_id",
        "schema": "CREATE TABLE Sales (sales_transaction_id NUMBER); CREATE TABLE Transactions (transaction_id NUMBER, amount_of_transaction NUMBER, share_count TEXT, transaction_type_code TEXT); CREATE TABLE Transactions_Lots (transaction_id NUMBER, lot_id NUMBER); CREATE TABLE Purchases (purchase_transaction_id NUMBER); CREATE TABLE Lots (lot_id NUMBER, lot_details TEXT);"
      },
      {
        "question": "Show the average amount of transactions for all different lots.",
        "query": "SELECT t2.lot_id , avg(amount_of_transaction) FROM transactions AS t1 JOIN transactions_lots AS t2 ON t1.transaction_id = t2.transaction_id GROUP BY t2.lot_id",
        "schema": "CREATE TABLE Transactions_Lots (lot_id NUMBER, transaction_id NUMBER); CREATE TABLE Transactions (share_count TEXT, transaction_id NUMBER, amount_of_transaction NUMBER, transaction_type_code TEXT); CREATE TABLE Purchases (purchase_transaction_id NUMBER); CREATE TABLE Sales (sales_transaction_id NUMBER); CREATE TABLE Lots (lot_details TEXT, lot_id NUMBER);"
      }
    ],
    [
      {
        "question": "What is the average amount of transactions for the lot with id 3?",
        "query": "SELECT t2.lot_id , avg(amount_of_transaction) FROM transactions AS t1 JOIN transactions_lots AS t2 ON t1.transaction_id = t2.transaction_id WHERE t2.lot_id = 3 GROUP BY t2.lot_id",
        "schema": "CREATE TABLE Sales (sales_transaction_id NUMBER); CREATE TABLE Transactions_Lots (lot_id NUMBER, transaction_id NUMBER); CREATE TABLE Purchases (purchase_transaction_id NUMBER); CREATE TABLE Transactions (transaction_id NUMBER, amount_of_transaction NUMBER, transaction_type_code TEXT); CREATE TABLE Lots (lot_details TEXT, lot_id NUMBER);"
      },
      {
        "question": "Show the average amount of transactions for all different lots.",
        "query": "SELECT t2.lot_id , avg(amount_of_transaction) FROM transactions AS t1 JOIN transactions_lots AS t2 ON t1.transaction_id = t2.transaction_id GROUP BY t2.lot_id",
        "schema": "CREATE TABLE Transactions_Lots (transaction_id NUMBER, lot_id NUMBER); CREATE TABLE Sales (sales_transaction_id NUMBER); CREATE TABLE Purchases (purchase_transaction_id NUMBER); CREATE TABLE Transactions (amount_of_transaction NUMBER, transaction_id NUMBER, transaction_type_code TEXT); CREATE TABLE Lots (lot_details TEXT, lot_id NUMBER);"
      },
      {
        "question": "Could you please order the results by the average amount of transactions?",
        "query": "SELECT t2.lot_id , avg(amount_of_transaction) FROM transactions AS t1 JOIN transactions_lots AS t2 ON t1.transaction_id = t2.transaction_id GROUP BY t2.lot_id ORDER BY avg(amount_of_transaction)",
        "schema": "CREATE TABLE Sales (sales_transaction_id NUMBER); CREATE TABLE Transactions_Lots (lot_id NUMBER, transaction_id NUMBER); CREATE TABLE Lots (lot_id NUMBER, lot_details TEXT); CREATE TABLE Purchases (purchase_transaction_id NUMBER); CREATE TABLE Transactions (transaction_type_code TEXT, amount_of_transaction NUMBER, transaction_id NUMBER);"
      }
    ],
    [
      {
        "question": "How many transactions are there with transaction type code \"PUR\"?",
        "query": "SELECT count(*) FROM transactions WHERE transaction_type_code = \"PUR\"",
        "schema": "CREATE TABLE Transactions (transaction_type_code TEXT, transaction_id NUMBER, amount_of_transaction NUMBER); CREATE TABLE Ref_Transaction_Types (transaction_type_code TEXT, transaction_type_description TEXT);"
      },
      {
        "question": "Show the number of transactions with transaction type code \"SALE\".",
        "query": "SELECT count(*) FROM transactions WHERE transaction_type_code = \"SALE\"",
        "schema": "CREATE TABLE Ref_Transaction_Types (transaction_type_description TEXT, transaction_type_code TEXT); CREATE TABLE Purchases (purchase_details TEXT, purchase_transaction_id NUMBER); CREATE TABLE Sales (sales_details TEXT, sales_transaction_id NUMBER); CREATE TABLE Transactions (transaction_id NUMBER, amount_of_transaction NUMBER, transaction_type_code TEXT);"
      },
      {
        "question": "For these transactions, show the number made by each investor.",
        "query": "SELECT investor_id , count(*) FROM transactions WHERE transaction_type_code = \"SALE\" GROUP BY investor_id",
        "schema": "CREATE TABLE Transactions (transaction_type_code TEXT, transaction_id NUMBER, investor_id NUMBER, amount_of_transaction NUMBER); CREATE TABLE Purchases (purchase_transaction_id NUMBER, purchase_details TEXT); CREATE TABLE Investors (investor_id NUMBER, Investor_details TEXT); CREATE TABLE Sales (sales_transaction_id NUMBER, sales_details TEXT); CREATE TABLE Ref_Transaction_Types (transaction_type_code TEXT, transaction_type_description TEXT);"
      }
    ],
    [
      {
        "question": "Show the transaction type code that occurs the most times.",
        "query": "SELECT transaction_type_code FROM transactions GROUP BY transaction_type_code ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Transactions (transaction_type_code TEXT, transaction_id NUMBER); CREATE TABLE Ref_Transaction_Types (transaction_type_description TEXT, transaction_type_code TEXT);"
      },
      {
        "question": "Show the number of occurances of each transaction type code.",
        "query": "SELECT transaction_type_code, count(*) FROM transactions GROUP BY transaction_type_code",
        "schema": "CREATE TABLE Ref_Transaction_Types (transaction_type_description TEXT, transaction_type_code TEXT); CREATE TABLE Transactions (transaction_id NUMBER, transaction_type_code TEXT);"
      },
      {
        "question": "Could you please order the transaction type codes by their number of occurances?",
        "query": "SELECT transaction_type_code FROM transactions GROUP BY transaction_type_code ORDER BY count(*) ASC",
        "schema": "CREATE TABLE Ref_Transaction_Types (transaction_type_description TEXT, transaction_type_code TEXT); CREATE TABLE Transactions (amount_of_transaction NUMBER, transaction_id NUMBER, transaction_type_code TEXT);"
      },
      {
        "question": "Show the first one.",
        "query": "SELECT transaction_type_code FROM transactions GROUP BY transaction_type_code ORDER BY count(*) ASC LIMIT 1",
        "schema": "CREATE TABLE Transactions (transaction_type_code TEXT, date_of_transaction TIME, amount_of_transaction NUMBER, transaction_id NUMBER); CREATE TABLE Ref_Transaction_Types (transaction_type_description TEXT, transaction_type_code TEXT);"
      }
    ],
    [
      {
        "question": "Show the transaction type code that occurs the fewest times.",
        "query": "SELECT transaction_type_code FROM transactions GROUP BY transaction_type_code ORDER BY count(*) ASC LIMIT 1",
        "schema": "CREATE TABLE Ref_Transaction_Types (transaction_type_code TEXT, transaction_type_description TEXT); CREATE TABLE Transactions (transaction_id NUMBER, transaction_type_code TEXT);"
      },
      {
        "question": "Show the number of occurances of each transaction type code.",
        "query": "SELECT transaction_type_code, count(*) FROM transactions GROUP BY transaction_type_code",
        "schema": "CREATE TABLE Transactions (transaction_type_code TEXT, transaction_id NUMBER); CREATE TABLE Ref_Transaction_Types (transaction_type_code TEXT, transaction_type_description TEXT);"
      },
      {
        "question": "Which transaction occurs the most frequently?",
        "query": "SELECT * FROM transactions GROUP BY transaction_type_code ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Ref_Transaction_Types (transaction_type_description TEXT, transaction_type_code TEXT); CREATE TABLE Transactions (date_of_transaction TIME, transaction_id NUMBER, transaction_type_code TEXT);"
      },
      {
        "question": "Show its transaction type code.",
        "query": "SELECT transaction_type_code FROM transactions GROUP BY transaction_type_code ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Transactions (date_of_transaction TIME, transaction_type_code TEXT, transaction_id NUMBER); CREATE TABLE Ref_Transaction_Types (transaction_type_description TEXT, transaction_type_code TEXT);"
      }
    ],
    [
      {
        "question": "Please show the description of the transaction type \"SALE\".",
        "query": "SELECT transaction_type_description FROM ref_transaction_types WHERE transaction_type_code = \"SALE\"",
        "schema": "CREATE TABLE Purchases (purchase_transaction_id NUMBER); CREATE TABLE Ref_Transaction_Types (transaction_type_code TEXT, transaction_type_description TEXT); CREATE TABLE Transactions (transaction_type_code TEXT, transaction_id NUMBER); CREATE TABLE Sales (sales_transaction_id NUMBER);"
      },
      {
        "question": "How many transaction types are there?",
        "query": "SELECT count(*) FROM ref_transaction_types",
        "schema": "CREATE TABLE Transactions (transaction_type_code TEXT, transaction_id NUMBER); CREATE TABLE Sales (sales_transaction_id NUMBER); CREATE TABLE Purchases (purchase_transaction_id NUMBER); CREATE TABLE Ref_Transaction_Types (transaction_type_description TEXT, transaction_type_code TEXT);"
      },
      {
        "question": "Among these transactions, which one occurs most frequently?",
        "query": "SELECT t1.transaction_type_code FROM ref_transaction_types AS t1 JOIN transactions AS t2 ON t1.transaction_type_code = t2.transaction_type_code GROUP BY t1.transaction_type_code ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Sales (sales_transaction_id NUMBER); CREATE TABLE Ref_Transaction_Types (transaction_type_description TEXT, transaction_type_code TEXT); CREATE TABLE Purchases (purchase_transaction_id NUMBER); CREATE TABLE Transactions (transaction_id NUMBER, transaction_type_code TEXT, date_of_transaction TIME);"
      },
      {
        "question": "Show its description.",
        "query": "SELECT t1.transaction_type_description FROM ref_transaction_types AS t1 JOIN transactions AS t2 ON t1.transaction_type_code = t2.transaction_type_code GROUP BY t1.transaction_type_code ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Purchases (purchase_transaction_id NUMBER); CREATE TABLE Sales (sales_transaction_id NUMBER); CREATE TABLE Transactions (transaction_type_code TEXT, transaction_id NUMBER, date_of_transaction TIME); CREATE TABLE Ref_Transaction_Types (transaction_type_description TEXT, transaction_type_code TEXT);"
      }
    ],
    [
      {
        "question": "How many investors are there?",
        "query": "SELECT count(*) FROM investors",
        "schema": "CREATE TABLE Transactions (transaction_id NUMBER, investor_id NUMBER); CREATE TABLE Lots (investor_id NUMBER); CREATE TABLE Investors (investor_id NUMBER, Investor_details TEXT);"
      },
      {
        "question": "How many of them have transactions?",
        "query": "SELECT count(DISTINCT t1.investor_id) FROM investors AS t1 JOIN transactions AS t2 ON t1.investor_id = t2.investor_id",
        "schema": "CREATE TABLE Transactions (share_count TEXT, investor_id NUMBER, transaction_id NUMBER, transaction_type_code TEXT); CREATE TABLE Investors (Investor_details TEXT, investor_id NUMBER); CREATE TABLE Transactions_Lots (transaction_id NUMBER); CREATE TABLE Lots (investor_id NUMBER);"
      },
      {
        "question": "Could you order these investors according to their number of transactions in decreasing order?",
        "query": "SELECT * FROM investors AS t1 JOIN transactions AS t2 ON t1.investor_id = t2.investor_id GROUP BY t2.investor_id ORDER BY count(*) DESC",
        "schema": "CREATE TABLE Investors (Investor_details TEXT, investor_id NUMBER); CREATE TABLE Transactions (transaction_type_code TEXT, investor_id NUMBER, transaction_id NUMBER, amount_of_transaction NUMBER, share_count TEXT); CREATE TABLE Lots (investor_id NUMBER); CREATE TABLE Transactions_Lots (transaction_id NUMBER);"
      },
      {
        "question": "Show the id and details of the first investor.",
        "query": "SELECT t2.investor_id , t1.investor_details FROM investors AS t1 JOIN transactions AS t2 ON t1.investor_id = t2.investor_id GROUP BY t2.investor_id ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Transactions (other_details TEXT, transaction_id NUMBER, amount_of_transaction NUMBER, transaction_type_code TEXT, share_count TEXT, investor_id NUMBER); CREATE TABLE Lots (investor_id NUMBER); CREATE TABLE Transactions_Lots (transaction_id NUMBER); CREATE TABLE Investors (Investor_details TEXT, investor_id NUMBER);"
      }
    ],
    [
      {
        "question": "How many transactions are there?",
        "query": "SELECT count(*) FROM transactions",
        "schema": "CREATE TABLE Sales (sales_transaction_id NUMBER); CREATE TABLE Investors (investor_id NUMBER); CREATE TABLE Transactions_Lots (transaction_id NUMBER); CREATE TABLE Purchases (purchase_transaction_id NUMBER); CREATE TABLE Transactions (date_of_transaction TIME, amount_of_transaction NUMBER, transaction_type_code TEXT, other_details TEXT, transaction_id NUMBER, investor_id NUMBER); CREATE TABLE Ref_Transaction_Types (transaction_type_description TEXT, transaction_type_code TEXT);"
      },
      {
        "question": "Show the id and details for the investor who has the most transactions.",
        "query": "SELECT t2.investor_id , t1.investor_details FROM investors AS t1 JOIN transactions AS t2 ON t1.investor_id = t2.investor_id GROUP BY t2.investor_id ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Transactions (other_details TEXT, transaction_type_code TEXT, amount_of_transaction NUMBER, transaction_id NUMBER, date_of_transaction TIME, investor_id NUMBER); CREATE TABLE Investors (Investor_details TEXT, investor_id NUMBER); CREATE TABLE Sales (sales_transaction_id NUMBER); CREATE TABLE Lots (investor_id NUMBER); CREATE TABLE Ref_Transaction_Types (transaction_type_description TEXT, transaction_type_code TEXT); CREATE TABLE Transactions_Lots (transaction_id NUMBER); CREATE TABLE Purchases (purchase_transaction_id NUMBER);"
      },
      {
        "question": "How about investors with top 3 number of transactions?",
        "query": "SELECT t2.investor_id , t1.investor_details FROM investors AS t1 JOIN transactions AS t2 ON t1.investor_id = t2.investor_id GROUP BY t2.investor_id ORDER BY count(*) DESC LIMIT 3",
        "schema": "CREATE TABLE Lots (investor_id NUMBER); CREATE TABLE Purchases (purchase_transaction_id NUMBER); CREATE TABLE Investors (investor_id NUMBER, Investor_details TEXT); CREATE TABLE Transactions (investor_id NUMBER, other_details TEXT, amount_of_transaction NUMBER, date_of_transaction TIME, transaction_id NUMBER, transaction_type_code TEXT); CREATE TABLE Ref_Transaction_Types (transaction_type_description TEXT, transaction_type_code TEXT); CREATE TABLE Transactions_Lots (transaction_id NUMBER); CREATE TABLE Sales (sales_transaction_id NUMBER);"
      }
    ],
    [
      {
        "question": "Which investors have some transactions?",
        "query": "SELECT * FROM investors AS t1 JOIN transactions AS t2 ON t1.investor_id = t2.investor_id",
        "schema": "CREATE TABLE Investors (Investor_details TEXT, investor_id NUMBER); CREATE TABLE Transactions (investor_id NUMBER, transaction_id NUMBER); CREATE TABLE Lots (investor_id NUMBER);"
      },
      {
        "question": "How many of these investors have at least three transactions?",
        "query": "SELECT count(*) FROM (SELECT count(*) FROM investors AS t1 JOIN transactions AS t2 ON t1.investor_id = t2.investor_id GROUP BY t2.investor_id HAVING count(*) >= 3)",
        "schema": "CREATE TABLE Investors (investor_id NUMBER, Investor_details TEXT); CREATE TABLE Lots (investor_id NUMBER); CREATE TABLE Transactions (transaction_id NUMBER, investor_id NUMBER);"
      },
      {
        "question": "Next, how many of these investors have at least two transactions?",
        "query": "SELECT count(*) FROM (SELECT count(*) FROM investors AS t1 JOIN transactions AS t2 ON t1.investor_id = t2.investor_id GROUP BY t2.investor_id HAVING count(*) >= 2)",
        "schema": "CREATE TABLE Transactions (investor_id NUMBER, transaction_id NUMBER); CREATE TABLE Investors (Investor_details TEXT, investor_id NUMBER); CREATE TABLE Lots (investor_id NUMBER);"
      },
      {
        "question": "Please give their ids.",
        "query": "SELECT t2.investor_id FROM investors AS t1 JOIN transactions AS t2 ON t1.investor_id = t2.investor_id GROUP BY t2.investor_id HAVING count(*) >= 2",
        "schema": "CREATE TABLE Lots (investor_id NUMBER); CREATE TABLE Transactions (transaction_id NUMBER, investor_id NUMBER); CREATE TABLE Investors (Investor_details TEXT, investor_id NUMBER);"
      }
    ],
    [
      {
        "question": "Which investors have some transactions?",
        "query": "SELECT * FROM investors AS t1 JOIN transactions AS t2 ON t1.investor_id = t2.investor_id",
        "schema": "CREATE TABLE Lots (investor_id NUMBER); CREATE TABLE Investors (Investor_details TEXT, investor_id NUMBER); CREATE TABLE Transactions (transaction_id NUMBER, transaction_type_code TEXT, investor_id NUMBER);"
      },
      {
        "question": "How many of these investors are there?",
        "query": "SELECT count(DISTINCT t1.investor_id) FROM investors AS t1 JOIN transactions AS t2 ON t1.investor_id = t2.investor_id",
        "schema": "CREATE TABLE Transactions (transaction_type_code TEXT, transaction_id NUMBER, investor_id NUMBER); CREATE TABLE Investors (investor_id NUMBER, Investor_details TEXT); CREATE TABLE Lots (investor_id NUMBER);"
      },
      {
        "question": "How about those who have at least two transactions with type code \"SALE\"?",
        "query": "SELECT count(*) FROM (SELECT count(*) FROM investors AS t1 JOIN transactions AS t2 ON t1.investor_id = t2.investor_id WHERE t2.transaction_type_code = \"SALE\" GROUP BY t2.investor_id HAVING count(*) >= 2)",
        "schema": "CREATE TABLE Purchases (purchase_transaction_id NUMBER); CREATE TABLE Ref_Transaction_Types (transaction_type_code TEXT); CREATE TABLE Transactions (investor_id NUMBER, transaction_type_code TEXT, transaction_id NUMBER); CREATE TABLE Sales (sales_transaction_id NUMBER); CREATE TABLE Lots (investor_id NUMBER); CREATE TABLE Investors (investor_id NUMBER, Investor_details TEXT);"
      },
      {
        "question": "OK\uff0cgive me their ids and details.",
        "query": "SELECT t2.investor_id , t1.investor_details FROM investors AS t1 JOIN transactions AS t2 ON t1.investor_id = t2.investor_id WHERE t2.transaction_type_code = \"SALE\" GROUP BY t2.investor_id HAVING count(*) >= 2",
        "schema": "CREATE TABLE Ref_Transaction_Types (transaction_type_code TEXT); CREATE TABLE Transactions (transaction_type_code TEXT, investor_id NUMBER, transaction_id NUMBER); CREATE TABLE Lots (investor_id NUMBER); CREATE TABLE Purchases (purchase_transaction_id NUMBER); CREATE TABLE Sales (sales_transaction_id NUMBER); CREATE TABLE Investors (Investor_details TEXT, investor_id NUMBER);"
      }
    ],
    [
      {
        "question": "How many transactions are there?",
        "query": "SELECT count(date_of_transaction) FROM transactions",
        "schema": "CREATE TABLE Purchases (purchase_transaction_id NUMBER); CREATE TABLE Investors (investor_id NUMBER); CREATE TABLE Sales (sales_transaction_id NUMBER); CREATE TABLE Ref_Transaction_Types (transaction_type_code TEXT, transaction_type_description TEXT); CREATE TABLE Transactions_Lots (transaction_id NUMBER); CREATE TABLE Transactions (other_details TEXT, amount_of_transaction NUMBER, transaction_id NUMBER, date_of_transaction TIME, investor_id NUMBER, transaction_type_code TEXT);"
      },
      {
        "question": "Among these transactions, how many of them have a share count of at least 100 or an amount bigger than 100?",
        "query": "SELECT count(date_of_transaction) FROM transactions WHERE share_count >= 100 OR amount_of_transaction >= 100",
        "schema": "CREATE TABLE Transactions (transaction_id NUMBER, share_count TEXT, investor_id NUMBER, transaction_type_code TEXT, amount_of_transaction NUMBER, date_of_transaction TIME, other_details TEXT); CREATE TABLE Purchases (purchase_transaction_id NUMBER); CREATE TABLE Transactions_Lots (transaction_id NUMBER); CREATE TABLE Investors (investor_id NUMBER); CREATE TABLE Ref_Transaction_Types (transaction_type_code TEXT, transaction_type_description TEXT); CREATE TABLE Sales (sales_transaction_id NUMBER);"
      },
      {
        "question": "Can you please show their dates?",
        "query": "SELECT date_of_transaction FROM transactions WHERE share_count >= 100 OR amount_of_transaction >= 100",
        "schema": "CREATE TABLE Ref_Transaction_Types (transaction_type_description TEXT, transaction_type_code TEXT); CREATE TABLE Purchases (purchase_transaction_id NUMBER); CREATE TABLE Transactions (other_details TEXT, date_of_transaction TIME, share_count TEXT, transaction_type_code TEXT, investor_id NUMBER, transaction_id NUMBER, amount_of_transaction NUMBER); CREATE TABLE Transactions_Lots (transaction_id NUMBER); CREATE TABLE Sales (sales_transaction_id NUMBER); CREATE TABLE Investors (investor_id NUMBER);"
      }
    ],
    [
      {
        "question": "What are the details of all sales?",
        "query": "SELECT sales_details FROM sales",
        "schema": "CREATE TABLE Transactions (transaction_id NUMBER); CREATE TABLE Sales (sales_details TEXT, sales_transaction_id NUMBER); CREATE TABLE Purchases (purchase_details TEXT, purchase_transaction_id NUMBER);"
      },
      {
        "question": "What are the details of all purchases?",
        "query": "SELECT purchase_details FROM purchases",
        "schema": "CREATE TABLE Sales (sales_transaction_id NUMBER, sales_details TEXT); CREATE TABLE Transactions (transaction_id NUMBER); CREATE TABLE Purchases (purchase_details TEXT, purchase_transaction_id NUMBER);"
      },
      {
        "question": "Could you please combine them?",
        "query": "SELECT sales_details FROM sales UNION SELECT purchase_details FROM purchases",
        "schema": "CREATE TABLE Lots (lot_details TEXT); CREATE TABLE Purchases (purchase_transaction_id NUMBER, purchase_details TEXT); CREATE TABLE Transactions (transaction_id NUMBER); CREATE TABLE Sales (sales_transaction_id NUMBER, sales_details TEXT);"
      }
    ]
  ],
  "news_report": [
    [
      {
        "question": "Show me many how many journalists are FROM the nation England?",
        "query": "SELECT count(*) FROM journalist WHERE nationality = \"England\"",
        "schema": "CREATE TABLE journalist (Name TEXT, journalist_ID NUMBER, Nationality TEXT);"
      },
      {
        "question": "How about Wales?",
        "query": "SELECT count(*) FROM journalist WHERE nationality = \"Wales\"",
        "schema": "CREATE TABLE journalist (journalist_ID NUMBER, Name TEXT, Nationality TEXT);"
      },
      {
        "question": "How many are FROM England or Wales?",
        "query": "SELECT count(*) FROM journalist WHERE nationality = \"England\" OR nationality = \"Wales\"",
        "schema": "CREATE TABLE journalist (journalist_ID NUMBER, Name TEXT, Nationality TEXT);"
      },
      {
        "question": "What are their names?",
        "query": "SELECT name FROM journalist WHERE nationality = \"England\" OR nationality = \"Wales\"",
        "schema": "CREATE TABLE event (Name TEXT); CREATE TABLE journalist (Nationality TEXT, journalist_ID NUMBER, Name TEXT);"
      }
    ],
    [
      {
        "question": "What is the average number of years a journalist works?",
        "query": "SELECT avg(years_working) FROM journalist",
        "schema": "CREATE TABLE journalist (journalist_ID NUMBER, Age TEXT, Name TEXT, Years_working NUMBER);"
      },
      {
        "question": "What is the greatest?",
        "query": "SELECT years_working FROM journalist ORDER BY years_working DESC LIMIT 1",
        "schema": "CREATE TABLE journalist (Years_working NUMBER, journalist_ID NUMBER, Age TEXT, Name TEXT);"
      },
      {
        "question": "Who is the journalist that has worked this long?",
        "query": "SELECT name FROM journalist ORDER BY years_working DESC LIMIT 1",
        "schema": "CREATE TABLE journalist (Years_working NUMBER, journalist_ID NUMBER, Name TEXT, Age TEXT);"
      },
      {
        "question": "Show me just her nationality?",
        "query": "SELECT nationality FROM journalist ORDER BY years_working DESC LIMIT 1",
        "schema": "CREATE TABLE journalist (Age TEXT, journalist_ID NUMBER, Name TEXT, Years_working NUMBER, Nationality TEXT);"
      }
    ],
    [
      {
        "question": "Show me every journalists name and nationality.",
        "query": "SELECT name, nationality FROM journalist",
        "schema": "CREATE TABLE journalist (Nationality TEXT, journalist_ID NUMBER, Name TEXT);"
      },
      {
        "question": "How many different nationalities are there?",
        "query": "SELECT count(DISTINCT nationality) FROM journalist",
        "schema": "CREATE TABLE journalist (Nationality TEXT, journalist_ID NUMBER, Name TEXT);"
      },
      {
        "question": "What are they?",
        "query": "SELECT DISTINCT nationality FROM journalist",
        "schema": "CREATE TABLE journalist (journalist_ID NUMBER, Name TEXT, Nationality TEXT);"
      },
      {
        "question": "Of which one, are the most journalist?",
        "query": "SELECT nationality FROM journalist GROUP BY nationality ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE journalist (journalist_ID NUMBER, Name TEXT, Nationality TEXT);"
      }
    ],
    [
      {
        "question": "Which journalists have been working for less than 3 years?",
        "query": "SELECT * FROM journalist WHERE years_working < 3",
        "schema": "CREATE TABLE journalist (Name TEXT, Age TEXT, Years_working NUMBER, journalist_ID NUMBER);"
      },
      {
        "question": "Also add those that have been working for over 10!",
        "query": "SELECT * FROM journalist WHERE years_working < 3 OR years_working > 10",
        "schema": "CREATE TABLE journalist (journalist_ID NUMBER, Name TEXT, Years_working NUMBER, Age TEXT);"
      },
      {
        "question": "What are their names?",
        "query": "SELECT name FROM journalist WHERE years_working < 3 OR years_working > 10",
        "schema": "CREATE TABLE journalist (journalist_ID NUMBER, Years_working NUMBER, Name TEXT, Age TEXT);"
      },
      {
        "question": "Actually, list the different nations they are FROM!",
        "query": "SELECT nationality FROM journalist WHERE years_working > 10 INTERSECT SELECT nationality FROM journalist WHERE years_working < 3",
        "schema": "CREATE TABLE journalist (journalist_ID NUMBER, Years_working NUMBER, Nationality TEXT, Name TEXT, Age TEXT);"
      }
    ],
    [
      {
        "question": "What are names of all the different journalists that have reported on at least one event?",
        "query": "SELECT t3.name FROM news_report AS t1 JOIN event AS t2 ON t1.event_id = t2.event_id JOIN journalist AS t3 ON t1.journalist_id = t3.journalist_id GROUP BY t1.journalist_id",
        "schema": "CREATE TABLE event (Event_Attendance NUMBER, Event_ID NUMBER, Name TEXT); CREATE TABLE news_report (Event_ID NUMBER, journalist_ID NUMBER); CREATE TABLE journalist (journalist_ID NUMBER, Name TEXT);"
      },
      {
        "question": "For each, show the names of the events they reported on.",
        "query": "SELECT t3.name , t2.name FROM news_report AS t1 JOIN event AS t2 ON t1.event_id = t2.event_id JOIN journalist AS t3 ON t1.journalist_id = t3.journalist_id",
        "schema": "CREATE TABLE journalist (journalist_ID NUMBER, Name TEXT); CREATE TABLE event (Event_ID NUMBER, Name TEXT, Event_Attendance NUMBER); CREATE TABLE news_report (journalist_ID NUMBER, Event_ID NUMBER);"
      },
      {
        "question": "And also the venues and dates.",
        "query": "SELECT t3.name , t2.name, t2.venue, t2.date FROM news_report AS t1 JOIN event AS t2 ON t1.event_id = t2.event_id JOIN journalist AS t3 ON t1.journalist_id = t3.journalist_id",
        "schema": "CREATE TABLE event (Event_ID NUMBER, Venue TEXT, Event_Attendance NUMBER, Name TEXT, Date TEXT); CREATE TABLE news_report (Event_ID NUMBER, journalist_ID NUMBER); CREATE TABLE journalist (journalist_ID NUMBER, Name TEXT);"
      },
      {
        "question": "Now, show just the journalist names and dates of the events!",
        "query": "SELECT t3.name , t2.date FROM news_report AS t1 JOIN event AS t2 ON t1.event_id = t2.event_id JOIN journalist AS t3 ON t1.journalist_id = t3.journalist_id",
        "schema": "CREATE TABLE journalist (Name TEXT, journalist_ID NUMBER); CREATE TABLE news_report (journalist_ID NUMBER, Event_ID NUMBER); CREATE TABLE event (Name TEXT, Date TEXT, Venue TEXT, Event_Attendance NUMBER, Event_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What are all the event names?",
        "query": "SELECT name FROM event",
        "schema": "CREATE TABLE event (Event_Attendance NUMBER, Event_ID NUMBER, Name TEXT); CREATE TABLE journalist (Name TEXT, journalist_ID NUMBER);"
      },
      {
        "question": "What were the event attendances for each one?",
        "query": "SELECT name, event_attendance FROM event",
        "schema": "CREATE TABLE journalist (journalist_ID NUMBER, Name TEXT); CREATE TABLE news_report (Event_ID NUMBER); CREATE TABLE event (Event_ID NUMBER, Name TEXT, Event_Attendance NUMBER);"
      },
      {
        "question": "Include the names of the journalist working on each event!",
        "query": "SELECT t3.name , t2.name, t2.event_attendance FROM news_report AS t1 JOIN event AS t2 ON t1.event_id = t2.event_id JOIN journalist AS t3 ON t1.journalist_id = t3.journalist_id",
        "schema": "CREATE TABLE event (Event_Attendance NUMBER, Name TEXT, Event_ID NUMBER); CREATE TABLE journalist (journalist_ID NUMBER, Name TEXT); CREATE TABLE news_report (Event_ID NUMBER, journalist_ID NUMBER);"
      },
      {
        "question": "Show me just the names of the journalists and the event names in ascending order!",
        "query": "SELECT t3.name , t2.name FROM news_report AS t1 JOIN event AS t2 ON t1.event_id = t2.event_id JOIN journalist AS t3 ON t1.journalist_id = t3.journalist_id ORDER BY t2.event_attendance ASC",
        "schema": "CREATE TABLE event (Event_Attendance NUMBER, Name TEXT, Event_ID NUMBER); CREATE TABLE news_report (Event_ID NUMBER, journalist_ID NUMBER); CREATE TABLE journalist (Name TEXT, journalist_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Shoe me the names of all the journalists.",
        "query": "SELECT name FROM journalist",
        "schema": "CREATE TABLE journalist (Name TEXT, journalist_ID NUMBER);"
      },
      {
        "question": "Now include the names of all the events they each worked on.",
        "query": "SELECT t3.name, t2.name FROM news_report AS t1 JOIN event AS t2 ON t1.event_id = t2.event_id JOIN journalist AS t3 ON t1.journalist_id = t3.journalist_id",
        "schema": "CREATE TABLE event (Name TEXT, Event_ID NUMBER, Event_Attendance NUMBER); CREATE TABLE news_report (Event_ID NUMBER, journalist_ID NUMBER); CREATE TABLE journalist (journalist_ID NUMBER, Name TEXT);"
      },
      {
        "question": "How many did they each do?",
        "query": "SELECT t3.name , count(*) FROM news_report AS t1 JOIN event AS t2 ON t1.event_id = t2.event_id JOIN journalist AS t3 ON t1.journalist_id = t3.journalist_id GROUP BY t3.name",
        "schema": "CREATE TABLE event (Event_Attendance NUMBER, Name TEXT, Event_ID NUMBER); CREATE TABLE journalist (journalist_ID NUMBER, Name TEXT); CREATE TABLE news_report (Event_ID NUMBER, journalist_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show me all the journalist information for each journalist!",
        "query": "SELECT * FROM journalist",
        "schema": "CREATE TABLE event (Event_ID NUMBER); CREATE TABLE news_report (journalist_ID NUMBER); CREATE TABLE journalist (Name TEXT, journalist_ID NUMBER);"
      },
      {
        "question": "What events have they each reported on.",
        "query": "SELECT * FROM news_report AS t1 JOIN event AS t2 ON t1.event_id = t2.event_id JOIN journalist AS t3 ON t1.journalist_id = t3.journalist_id",
        "schema": "CREATE TABLE news_report (journalist_ID NUMBER, Event_ID NUMBER); CREATE TABLE event (Event_ID NUMBER, Name TEXT, Event_Attendance NUMBER); CREATE TABLE journalist (Name TEXT, journalist_ID NUMBER);"
      },
      {
        "question": "Count how many each journalist has worked on.",
        "query": "SELECT t3.name, count(*) FROM news_report AS t1 JOIN event AS t2 ON t1.event_id = t2.event_id JOIN journalist AS t3 ON t1.journalist_id = t3.journalist_id GROUP BY t3.name",
        "schema": "CREATE TABLE journalist (journalist_ID NUMBER, Name TEXT); CREATE TABLE event (Event_Attendance NUMBER, Event_ID NUMBER, Name TEXT); CREATE TABLE news_report (journalist_ID NUMBER, Event_ID NUMBER);"
      },
      {
        "question": "Show me just the names of the journalists that have reported on more than 1!",
        "query": "SELECT t3.name FROM news_report AS t1 JOIN event AS t2 ON t1.event_id = t2.event_id JOIN journalist AS t3 ON t1.journalist_id = t3.journalist_id GROUP BY t3.name HAVING count(*) > 1",
        "schema": "CREATE TABLE journalist (journalist_ID NUMBER, Name TEXT); CREATE TABLE event (Event_Attendance NUMBER, Name TEXT, Event_ID NUMBER); CREATE TABLE news_report (journalist_ID NUMBER, Event_ID NUMBER);"
      }
    ],
    [
      {
        "question": "How many events have each journalists reported on?",
        "query": "SELECT t3.name, count(*) FROM news_report AS t1 JOIN event AS t2 ON t1.event_id = t2.event_id JOIN journalist AS t3 ON t1.journalist_id = t3.journalist_id GROUP BY t3.name",
        "schema": "CREATE TABLE event (Event_ID NUMBER, Name TEXT); CREATE TABLE news_report (journalist_ID NUMBER, Event_ID NUMBER); CREATE TABLE journalist (Name TEXT, journalist_ID NUMBER);"
      },
      {
        "question": "How many journalists have 0 events!",
        "query": "SELECT count(*) FROM journalist WHERE journalist_id NOT IN (SELECT journalist_id FROM news_report)",
        "schema": "CREATE TABLE event (Name TEXT, Event_ID NUMBER); CREATE TABLE news_report (Event_ID NUMBER, journalist_ID NUMBER); CREATE TABLE journalist (journalist_ID NUMBER, Name TEXT);"
      },
      {
        "question": "What are their names?",
        "query": "SELECT name FROM journalist WHERE journalist_id NOT IN (SELECT journalist_id FROM news_report)",
        "schema": "CREATE TABLE news_report (Event_ID NUMBER, journalist_ID NUMBER); CREATE TABLE journalist (journalist_ID NUMBER, Name TEXT); CREATE TABLE event (Event_ID NUMBER, Name TEXT);"
      }
    ],
    [
      {
        "question": "List all the names of the events!",
        "query": "SELECT name FROM event",
        "schema": "CREATE TABLE journalist (Name TEXT, journalist_ID NUMBER); CREATE TABLE event (Name TEXT, Event_ID NUMBER, Event_Attendance NUMBER);"
      },
      {
        "question": "Show many attended each one!",
        "query": "SELECT name, event_attendance FROM event",
        "schema": "CREATE TABLE journalist (Name TEXT, journalist_ID NUMBER); CREATE TABLE event (Name TEXT, Venue TEXT, Event_Attendance NUMBER, Event_ID NUMBER); CREATE TABLE news_report (Event_ID NUMBER);"
      },
      {
        "question": "What is the average event _attendance?",
        "query": "SELECT avg(event_attendance) FROM event",
        "schema": "CREATE TABLE news_report (Event_ID NUMBER); CREATE TABLE event (Event_ID NUMBER, Event_Attendance NUMBER, Name TEXT, Venue TEXT); CREATE TABLE journalist (journalist_ID NUMBER, Name TEXT);"
      },
      {
        "question": "Also show the max!",
        "query": "SELECT avg(event_attendance) , max(event_attendance) FROM event",
        "schema": "CREATE TABLE event (Event_ID NUMBER, Venue TEXT, Event_Attendance NUMBER, Name TEXT); CREATE TABLE news_report (Event_ID NUMBER); CREATE TABLE journalist (Name TEXT, journalist_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What are the different work_types of news reporting?",
        "query": "SELECT DISTINCT work_type FROM news_report",
        "schema": "CREATE TABLE event (Event_ID NUMBER); CREATE TABLE journalist (journalist_ID NUMBER); CREATE TABLE news_report (journalist_ID NUMBER, Work_Type TEXT);"
      },
      {
        "question": "How many reporters belong to each type?",
        "query": "SELECT count(*), t2.work_type FROM journalist AS t1 JOIN news_report AS t2 ON t1.journalist_id = t2.journalist_id GROUP BY t2.work_type",
        "schema": "CREATE TABLE event (Event_ID NUMBER); CREATE TABLE news_report (Work_Type TEXT, journalist_ID NUMBER); CREATE TABLE journalist (Name TEXT, journalist_ID NUMBER);"
      },
      {
        "question": "What is the average age of the reporters for each type?",
        "query": "SELECT avg(t1.age), t2.work_type FROM journalist AS t1 JOIN news_report AS t2 ON t1.journalist_id = t2.journalist_id GROUP BY t2.work_type",
        "schema": "CREATE TABLE event (Event_ID NUMBER); CREATE TABLE news_report (journalist_ID NUMBER, Work_Type TEXT); CREATE TABLE journalist (journalist_ID NUMBER, Name TEXT, Age TEXT);"
      },
      {
        "question": "Also show the average number of years working for each type?",
        "query": "SELECT avg(t1.age) , avg(years_working) , t2.work_type FROM journalist AS t1 JOIN news_report AS t2 ON t1.journalist_id = t2.journalist_id GROUP BY t2.work_type",
        "schema": "CREATE TABLE event (Event_ID NUMBER); CREATE TABLE journalist (Years_working NUMBER, Age TEXT, journalist_ID NUMBER, Name TEXT); CREATE TABLE news_report (Work_Type TEXT, journalist_ID NUMBER);"
      }
    ]
  ],
  "storm_record": [
    [
      {
        "question": "What are the names of the regions?",
        "query": "SELECT region_name FROM region;",
        "schema": "CREATE TABLE region (Region_id NUMBER, Region_code TEXT, Region_name TEXT);"
      },
      {
        "question": "Show all region code and region name sorted by the region name alphabetically.",
        "query": "SELECT region_code , region_name FROM region ORDER BY region_name ASC;",
        "schema": "CREATE TABLE region (Region_name TEXT, Region_code TEXT, Region_id NUMBER);"
      },
      {
        "question": "Order the result by the codes.",
        "query": "SELECT region_code , region_name FROM region ORDER BY region_code;",
        "schema": "CREATE TABLE region (Region_code TEXT, Region_id NUMBER, Region_name TEXT);"
      }
    ],
    [
      {
        "question": "How about their names of each region?",
        "query": "SELECT region_name FROM region;",
        "schema": "CREATE TABLE region (Region_code TEXT, Region_id NUMBER, Region_name TEXT);"
      },
      {
        "question": "Order the result in alphabetical order.",
        "query": "SELECT region_name FROM region ORDER BY region_name;",
        "schema": "CREATE TABLE region (Region_code TEXT, Region_id NUMBER, Region_name TEXT);"
      }
    ],
    [
      {
        "question": "Can you list the id of region named Denmark.",
        "query": "SELECT region_id FROM region WHERE region_name = 'Denmark';",
        "schema": "CREATE TABLE storm (Storm_ID NUMBER); CREATE TABLE region (Region_name TEXT, Region_id NUMBER, Region_code TEXT); CREATE TABLE affected_region (Region_id NUMBER);"
      },
      {
        "question": "How about the region code for all regions except for Denmark.",
        "query": "SELECT region_code FROM region WHERE region_name != 'Denmark';",
        "schema": "CREATE TABLE region (Region_id NUMBER, Region_name TEXT, Region_code TEXT); CREATE TABLE affected_region (Region_id NUMBER); CREATE TABLE storm (Storm_ID NUMBER);"
      },
      {
        "question": "List their names.",
        "query": "SELECT region_name FROM region WHERE region_name != 'Denmark';",
        "schema": "CREATE TABLE storm (Storm_ID NUMBER); CREATE TABLE affected_region (Region_id NUMBER); CREATE TABLE region (Region_id NUMBER, Region_code TEXT, Region_name TEXT);"
      }
    ],
    [
      {
        "question": "What's the number of deaths for each storm?",
        "query": "SELECT number_deaths FROM storm;",
        "schema": "CREATE TABLE storm (Number_Deaths NUMBER, Name TEXT, Storm_ID NUMBER);"
      },
      {
        "question": "Show the average number of deaths.",
        "query": "SELECT avg(number_deaths) FROM storm;",
        "schema": "CREATE TABLE storm (Name TEXT, Number_Deaths NUMBER, Storm_ID NUMBER);"
      },
      {
        "question": "How many storms had death records?",
        "query": "SELECT count(*) FROM storm WHERE number_deaths > 0;",
        "schema": "CREATE TABLE storm (Storm_ID NUMBER, Number_Deaths NUMBER, Name TEXT);"
      }
    ],
    [
      {
        "question": "Show me the name of the storm where no people died.",
        "query": "SELECT name FROM storm WHERE number_deaths = 0;",
        "schema": "CREATE TABLE storm (Name TEXT, Number_Deaths NUMBER, Storm_ID NUMBER); CREATE TABLE affected_region (Storm_ID NUMBER);"
      },
      {
        "question": "How about the number of deaths for the rest of the storms?",
        "query": "SELECT number_deaths FROM storm WHERE number_deaths > 0;",
        "schema": "CREATE TABLE storm (Name TEXT, Storm_ID NUMBER, Number_Deaths NUMBER); CREATE TABLE affected_region (Storm_ID NUMBER);"
      },
      {
        "question": "List their names and dates active as well.",
        "query": "SELECT name , dates_active , number_deaths FROM storm WHERE number_deaths >= 1;",
        "schema": "CREATE TABLE affected_region (Storm_ID NUMBER); CREATE TABLE storm (Storm_ID NUMBER, Number_Deaths NUMBER, Dates_active TEXT, Name TEXT);"
      }
    ],
    [
      {
        "question": "Show me in the maximum damage for storms with max speed no more than 1000.",
        "query": "SELECT max(damage_millions_usd) FROM storm WHERE max_speed <= 1000;",
        "schema": "CREATE TABLE storm (Storm_ID NUMBER, Damage_millions_USD NUMBER, Name TEXT, Max_speed NUMBER);"
      },
      {
        "question": "How about those with max speed higher than 1000?",
        "query": "SELECT max(damage_millions_usd) FROM storm WHERE max_speed > 1000;",
        "schema": "CREATE TABLE storm (Name TEXT, Damage_millions_USD NUMBER, Max_speed NUMBER, Storm_ID NUMBER);"
      },
      {
        "question": "Show the average and maximum damage for all storms with max speed higher than 1000.",
        "query": "SELECT avg(damage_millions_usd) , max(damage_millions_usd) FROM storm WHERE max_speed > 1000;",
        "schema": "CREATE TABLE storm (Storm_ID NUMBER, Damage_millions_USD NUMBER, Name TEXT, Max_speed NUMBER);"
      }
    ],
    [
      {
        "question": "What's the average max speed for all storms?",
        "query": "SELECT avg(max_speed) FROM storm;",
        "schema": "CREATE TABLE storm (Storm_ID NUMBER, Max_speed NUMBER, Name TEXT, Damage_millions_USD NUMBER);"
      },
      {
        "question": "What are the number of deaths and damage for all storms with a max speed greater than the average?",
        "query": "SELECT number_deaths , damage_millions_usd FROM storm WHERE max_speed > (SELECT avg(max_speed) FROM storm);",
        "schema": "CREATE TABLE storm (Max_speed NUMBER, Name TEXT, Damage_millions_USD NUMBER, Storm_ID NUMBER, Number_Deaths NUMBER);"
      },
      {
        "question": "How about the total death and total damage?",
        "query": "SELECT sum(number_deaths) , sum(damage_millions_usd) FROM storm WHERE max_speed > (SELECT avg(max_speed) FROM storm);",
        "schema": "CREATE TABLE storm (Damage_millions_USD NUMBER, Max_speed NUMBER, Storm_ID NUMBER, Number_Deaths NUMBER, Name TEXT);"
      }
    ],
    [
      {
        "question": "What's the date active for all storms?",
        "query": "SELECT dates_active FROM storm;",
        "schema": "CREATE TABLE storm (Storm_ID NUMBER, Name TEXT, Dates_active TEXT);"
      },
      {
        "question": "How about the name and damage of all storms?",
        "query": "SELECT name , damage_millions_usd FROM storm;",
        "schema": "CREATE TABLE storm (Name TEXT, Damage_millions_USD NUMBER, Dates_active TEXT, Storm_ID NUMBER);"
      },
      {
        "question": "Order the result by a descending order of max speed.",
        "query": "SELECT name , damage_millions_usd FROM storm ORDER BY max_speed DESC;",
        "schema": "CREATE TABLE storm (Damage_millions_USD NUMBER, Max_speed NUMBER, Dates_active TEXT, Name TEXT, Storm_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What are the names of the affected regions?",
        "query": "SELECT region.region_name FROM region JOIN affected_region ON affected_region.region_id = region.region_id;",
        "schema": "CREATE TABLE region (Region_name TEXT, Region_id NUMBER); CREATE TABLE affected_region (Storm_ID NUMBER, Region_id NUMBER, Number_city_affected NUMBER);"
      },
      {
        "question": "Show the distinct region names.",
        "query": "SELECT DISTINCT region.region_name FROM region JOIN affected_region ON affected_region.region_id = region.region_id;",
        "schema": "CREATE TABLE affected_region (Region_id NUMBER, Storm_ID NUMBER, Number_city_affected NUMBER); CREATE TABLE region (Region_id NUMBER, Region_name TEXT, Region_code TEXT);"
      },
      {
        "question": "How many distinct affected regions are there?",
        "query": "SELECT count(DISTINCT region_id) FROM affected_region",
        "schema": "CREATE TABLE region (Region_name TEXT, Region_code TEXT, Region_id NUMBER); CREATE TABLE affected_region (Region_id NUMBER, Number_city_affected NUMBER, Storm_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What are the names of the regions affected?",
        "query": "SELECT region_name FROM region WHERE region_id IN (SELECT region_id FROM affected_region);",
        "schema": "CREATE TABLE affected_region (Storm_ID NUMBER, Region_id NUMBER, Number_city_affected NUMBER); CREATE TABLE region (Region_code TEXT, Region_id NUMBER, Region_name TEXT);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT count(region_name) FROM region WHERE region_id IN (SELECT region_id FROM affected_region);",
        "schema": "CREATE TABLE affected_region (Number_city_affected NUMBER, Storm_ID NUMBER, Region_id NUMBER); CREATE TABLE region (Region_id NUMBER, Region_code TEXT, Region_name TEXT);"
      },
      {
        "question": "How about the names of regions not affected?",
        "query": "SELECT region_name FROM region WHERE region_id NOT IN (SELECT region_id FROM affected_region);",
        "schema": "CREATE TABLE region (Region_name TEXT, Region_code TEXT, Region_id NUMBER); CREATE TABLE affected_region (Number_city_affected NUMBER, Region_id NUMBER, Storm_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show me the storm ids for each region.",
        "query": "SELECT t2.storm_id FROM region AS t1 JOIN affected_region AS t2 ON t1.region_id = t2.region_id GROUP BY t1.region_id;",
        "schema": "CREATE TABLE affected_region (Storm_ID NUMBER, Region_id NUMBER); CREATE TABLE storm (Storm_ID NUMBER); CREATE TABLE region (Region_name TEXT, Region_id NUMBER, Region_code TEXT);"
      },
      {
        "question": "What's the maximum number of storms of one region?",
        "query": "SELECT count(t2.storm_id) FROM region AS t1 JOIN affected_region AS t2 ON t1.region_id = t2.region_id GROUP BY t1.region_id ORDER BY count(storm_id) DESC LIMIT 1;",
        "schema": "CREATE TABLE storm (Storm_ID NUMBER); CREATE TABLE region (Region_name TEXT, Region_id NUMBER, Region_code TEXT); CREATE TABLE affected_region (Storm_ID NUMBER, Region_id NUMBER);"
      },
      {
        "question": "Show the region names and the number of storms for each region.",
        "query": "SELECT t1.region_name , count(*) FROM region AS t1 JOIN affected_region AS t2 ON t1.region_id = t2.region_id GROUP BY t1.region_id;",
        "schema": "CREATE TABLE affected_region (Storm_ID NUMBER, Region_id NUMBER); CREATE TABLE storm (Storm_ID NUMBER, Name TEXT); CREATE TABLE region (Region_id NUMBER, Region_code TEXT, Region_name TEXT);"
      }
    ],
    [
      {
        "question": "Show me the names of all storms that affect more than 1 regions?",
        "query": "SELECT t1.name FROM storm AS t1 JOIN affected_region AS t2 ON t1.storm_id = t2.storm_id GROUP BY t1.storm_id HAVING count(*) > 1;",
        "schema": "CREATE TABLE storm (Name TEXT, Storm_ID NUMBER); CREATE TABLE affected_region (Number_city_affected NUMBER, Region_id NUMBER, Storm_ID NUMBER);"
      },
      {
        "question": "List the name for storms and the number of affected regions for each storm.",
        "query": "SELECT t1.name , count(*) FROM storm AS t1 JOIN affected_region AS t2 ON t1.storm_id = t2.storm_id GROUP BY t1.storm_id;",
        "schema": "CREATE TABLE storm (Storm_ID NUMBER, Name TEXT); CREATE TABLE affected_region (Storm_ID NUMBER, Number_city_affected NUMBER, Region_id NUMBER);"
      }
    ],
    [
      {
        "question": "What is the name for storms and the number of affected regions for each storm.",
        "query": "SELECT t1.name , count(*) FROM storm AS t1 JOIN affected_region AS t2 ON t1.storm_id = t2.storm_id GROUP BY t1.storm_id;",
        "schema": "CREATE TABLE storm (Name TEXT, Storm_ID NUMBER); CREATE TABLE affected_region (Region_id NUMBER, Storm_ID NUMBER, Number_city_affected NUMBER);"
      },
      {
        "question": "Which storm affected the greatest number of regions?",
        "query": "SELECT t1.name FROM storm AS t1 JOIN affected_region AS t2 ON t1.storm_id = t2.storm_id GROUP BY t1.storm_id ORDER BY count(*) DESC LIMIT 1;",
        "schema": "CREATE TABLE storm (Name TEXT, Storm_ID NUMBER); CREATE TABLE affected_region (Storm_ID NUMBER, Region_id NUMBER, Number_city_affected NUMBER);"
      },
      {
        "question": "Show its max speed in addition to its name.",
        "query": "SELECT t1.name , t1.max_speed FROM storm AS t1 JOIN affected_region AS t2 ON t1.storm_id = t2.storm_id GROUP BY t1.storm_id ORDER BY count(*) DESC LIMIT 1;",
        "schema": "CREATE TABLE storm (Name TEXT, Damage_millions_USD NUMBER, Max_speed NUMBER, Storm_ID NUMBER); CREATE TABLE affected_region (Number_city_affected NUMBER, Storm_ID NUMBER, Region_id NUMBER); CREATE TABLE region (Region_id NUMBER, Region_name TEXT);"
      }
    ],
    [
      {
        "question": "What are the names of the storms that have affected regions in record?",
        "query": "SELECT name FROM storm WHERE storm_id IN (SELECT storm_id FROM affected_region);",
        "schema": "CREATE TABLE storm (Storm_ID NUMBER, Name TEXT); CREATE TABLE affected_region (Storm_ID NUMBER, Number_city_affected NUMBER, Region_id NUMBER);"
      },
      {
        "question": "How many such storms are there in the result?",
        "query": "SELECT count(name) FROM storm WHERE storm_id IN (SELECT storm_id FROM affected_region);",
        "schema": "CREATE TABLE storm (Name TEXT, Storm_ID NUMBER); CREATE TABLE affected_region (Region_id NUMBER, Number_city_affected NUMBER, Storm_ID NUMBER);"
      },
      {
        "question": "How about the names of storms which don't have affected region in record.",
        "query": "SELECT name FROM storm WHERE storm_id NOT IN (SELECT storm_id FROM affected_region);",
        "schema": "CREATE TABLE storm (Storm_ID NUMBER, Name TEXT); CREATE TABLE affected_region (Number_city_affected NUMBER, Region_id NUMBER, Storm_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What is the name of the storm affected the most number of cities?",
        "query": "SELECT t1.name FROM storm AS t1 JOIN affected_region AS t2 ON t1.storm_id = t2.storm_id GROUP BY t1.storm_id ORDER BY sum(t2.number_city_affected) DESC LIMIT 1;",
        "schema": "CREATE TABLE storm (Storm_ID NUMBER, Name TEXT); CREATE TABLE affected_region (Number_city_affected NUMBER, Storm_ID NUMBER);"
      },
      {
        "question": "How about of the storms that affected at least two regions?",
        "query": "SELECT t1.name FROM storm AS t1 JOIN affected_region AS t2 ON t1.storm_id = t2.storm_id GROUP BY t1.storm_id HAVING count(*) >= 2;",
        "schema": "CREATE TABLE storm (Storm_ID NUMBER, Name TEXT); CREATE TABLE affected_region (Region_id NUMBER, Number_city_affected NUMBER, Storm_ID NUMBER);"
      },
      {
        "question": "Among the result, which one affected at least 10 cities?",
        "query": "SELECT t1.name FROM storm AS t1 JOIN affected_region AS t2 ON t1.storm_id = t2.storm_id GROUP BY t1.storm_id HAVING count(*) >= 2 INTERSECT SELECT t1.name FROM storm AS t1 JOIN affected_region AS t2 ON t1.storm_id = t2.storm_id GROUP BY t1.storm_id HAVING sum(t2.number_city_affected) >= 10;",
        "schema": "CREATE TABLE affected_region (Storm_ID NUMBER, Number_city_affected NUMBER, Region_id NUMBER); CREATE TABLE storm (Storm_ID NUMBER, Name TEXT);"
      }
    ],
    [
      {
        "question": "Show me all the storms by name.",
        "query": "SELECT name FROM storm;",
        "schema": "CREATE TABLE affected_region (Storm_ID NUMBER); CREATE TABLE storm (Storm_ID NUMBER, Name TEXT);"
      },
      {
        "question": "List only ones with at least 2 affected regions.",
        "query": "SELECT t1.name FROM storm AS t1 JOIN affected_region AS t2 ON t1.storm_id = t2.storm_id GROUP BY t1.storm_id HAVING count(*) = 2;",
        "schema": "CREATE TABLE affected_region (Region_id NUMBER, Storm_ID NUMBER, Number_city_affected NUMBER); CREATE TABLE storm (Name TEXT, Storm_ID NUMBER);"
      },
      {
        "question": "Show all names of the storms except for these.",
        "query": "SELECT name FROM storm EXCEPT SELECT t1.name FROM storm AS t1 JOIN affected_region AS t2 ON t1.storm_id = t2.storm_id GROUP BY t1.storm_id HAVING count(*) >= 2;",
        "schema": "CREATE TABLE affected_region (Storm_ID NUMBER, Region_id NUMBER, Number_city_affected NUMBER); CREATE TABLE storm (Name TEXT, Storm_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show me the regions affected by a storm with a damage of more than 10 million dollars?",
        "query": "SELECT t2.region_name FROM affected_region AS t1 JOIN region AS t2 ON t1.region_id = t2.region_id JOIN storm AS t3 ON t1.storm_id = t3.storm_id WHERE t3.damage_millions_usd > 10;",
        "schema": "CREATE TABLE region (Region_name TEXT, Region_code TEXT, Region_id NUMBER); CREATE TABLE storm (Damage_millions_USD NUMBER, Name TEXT, Storm_ID NUMBER); CREATE TABLE affected_region (Storm_ID NUMBER, Region_id NUMBER, Number_city_affected NUMBER);"
      },
      {
        "question": "How about those with affected by storms with no more than 10 deaths?",
        "query": "SELECT t2.region_name FROM affected_region AS t1 JOIN region AS t2 ON t1.region_id = t2.region_id JOIN storm AS t3 ON t1.storm_id = t3.storm_id WHERE t3.number_deaths <= 10;",
        "schema": "CREATE TABLE region (Region_name TEXT, Region_code TEXT, Region_id NUMBER); CREATE TABLE storm (Damage_millions_USD NUMBER, Storm_ID NUMBER, Number_Deaths NUMBER, Name TEXT); CREATE TABLE affected_region (Region_id NUMBER, Number_city_affected NUMBER, Storm_ID NUMBER);"
      },
      {
        "question": "List the region names affected by the storm with a number of deaths of least 10.",
        "query": "SELECT t2.region_name FROM affected_region AS t1 JOIN region AS t2 ON t1.region_id = t2.region_id JOIN storm AS t3 ON t1.storm_id = t3.storm_id WHERE t3.number_deaths >= 10;",
        "schema": "CREATE TABLE affected_region (Storm_ID NUMBER, Number_city_affected NUMBER, Region_id NUMBER); CREATE TABLE region (Region_name TEXT, Region_code TEXT, Region_id NUMBER); CREATE TABLE storm (Name TEXT, Number_Deaths NUMBER, Damage_millions_USD NUMBER, Storm_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show me all the affected regions.",
        "query": "SELECT region.region_name FROM region JOIN affected_region ON affected_region.region_id = region.region_id;",
        "schema": "CREATE TABLE region (Region_name TEXT, Region_id NUMBER); CREATE TABLE storm (Storm_ID NUMBER); CREATE TABLE affected_region (Number_city_affected NUMBER, Region_id NUMBER, Storm_ID NUMBER);"
      },
      {
        "question": "Which storm affected region Cyprus?",
        "query": "SELECT t3.name FROM affected_region AS t1 JOIN region AS t2 ON t1.region_id = t2.region_id JOIN storm AS t3 ON t1.storm_id = t3.storm_id WHERE t2.region_name = 'Cyprus';",
        "schema": "CREATE TABLE affected_region (Storm_ID NUMBER, Number_city_affected NUMBER, Region_id NUMBER); CREATE TABLE storm (Name TEXT, Storm_ID NUMBER); CREATE TABLE region (Region_id NUMBER, Region_name TEXT);"
      },
      {
        "question": "How about Denmark?",
        "query": "SELECT t3.name FROM affected_region AS t1 JOIN region AS t2 ON t1.region_id = t2.region_id JOIN storm AS t3 ON t1.storm_id = t3.storm_id WHERE t2.region_name = 'Denmark';",
        "schema": "CREATE TABLE affected_region (Region_id NUMBER, Storm_ID NUMBER, Number_city_affected NUMBER); CREATE TABLE region (Region_name TEXT, Region_code TEXT, Region_id NUMBER); CREATE TABLE storm (Storm_ID NUMBER, Name TEXT);"
      }
    ],
    [
      {
        "question": "Show me the number of regions affected for each storm.",
        "query": "SELECT t1.name , count(*) FROM storm AS t1 JOIN affected_region AS t2 ON t1.storm_id = t2.storm_id GROUP BY t1.storm_id;",
        "schema": "CREATE TABLE region (Region_id NUMBER); CREATE TABLE affected_region (Storm_ID NUMBER, Region_id NUMBER, Number_city_affected NUMBER); CREATE TABLE storm (Name TEXT, Storm_ID NUMBER, Damage_millions_USD NUMBER);"
      },
      {
        "question": "How about the number of storms for each region?",
        "query": "SELECT t1.region_name , count(*) FROM region AS t1 JOIN affected_region AS t2 ON t1.region_id = t2.region_id GROUP BY t1.region_id;",
        "schema": "CREATE TABLE storm (Name TEXT, Damage_millions_USD NUMBER, Storm_ID NUMBER); CREATE TABLE region (Region_id NUMBER, Region_name TEXT, Region_code TEXT); CREATE TABLE affected_region (Number_city_affected NUMBER, Region_id NUMBER, Storm_ID NUMBER);"
      },
      {
        "question": "Show the region name with at least two storms.",
        "query": "SELECT t1.region_name FROM region AS t1 JOIN affected_region AS t2 ON t1.region_id = t2.region_id GROUP BY t1.region_id HAVING count(*) >= 2;",
        "schema": "CREATE TABLE affected_region (Storm_ID NUMBER, Region_id NUMBER, Number_city_affected NUMBER); CREATE TABLE storm (Storm_ID NUMBER, Name TEXT, Damage_millions_USD NUMBER); CREATE TABLE region (Region_name TEXT, Region_id NUMBER, Region_code TEXT);"
      }
    ],
    [
      {
        "question": "Show me the number of people killed for each storm.",
        "query": "SELECT number_deaths FROM storm;",
        "schema": "CREATE TABLE storm (Number_Deaths NUMBER, Name TEXT, Storm_ID NUMBER);"
      },
      {
        "question": "What's the name of the one that killed the most people?",
        "query": "SELECT name FROM storm ORDER BY number_deaths DESC LIMIT 1;",
        "schema": "CREATE TABLE storm (Number_Deaths NUMBER, Storm_ID NUMBER, Name TEXT);"
      },
      {
        "question": "What's the names of the regions affected by this storm?",
        "query": "SELECT t2.region_name FROM affected_region AS t1 JOIN region AS t2 ON t1.region_id = t2.region_id JOIN storm AS t3 ON t1.storm_id = t3.storm_id ORDER BY t3.number_deaths DESC LIMIT 1",
        "schema": "CREATE TABLE region (Region_id NUMBER, Region_name TEXT, Region_code TEXT); CREATE TABLE affected_region (Storm_ID NUMBER, Number_city_affected NUMBER, Region_id NUMBER); CREATE TABLE storm (Storm_ID NUMBER, Number_Deaths NUMBER, Name TEXT);"
      }
    ]
  ],
  "gas_company": [
    [
      {
        "question": "Show company information.",
        "query": "SELECT * FROM company",
        "schema": "CREATE TABLE station_company (Station_ID NUMBER, Company_ID NUMBER); CREATE TABLE gas_station (Station_ID NUMBER); CREATE TABLE company (Company_ID NUMBER, Headquarters TEXT, Company TEXT);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT count(*) FROM company",
        "schema": "CREATE TABLE company (Main_Industry TEXT, Headquarters TEXT, Company TEXT, Company_ID NUMBER, Rank NUMBER); CREATE TABLE station_company (Station_ID NUMBER, Company_ID NUMBER); CREATE TABLE gas_station (Station_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show the company names.",
        "query": "SELECT company FROM company",
        "schema": "CREATE TABLE gas_station (Station_ID NUMBER, Manager_Name TEXT); CREATE TABLE station_company (Company_ID NUMBER, Station_ID NUMBER); CREATE TABLE company (Company_ID NUMBER, Company TEXT);"
      },
      {
        "question": "Also show the rank for each.",
        "query": "SELECT company , rank FROM company",
        "schema": "CREATE TABLE company (Company_ID NUMBER, Rank NUMBER, Company TEXT, Headquarters TEXT); CREATE TABLE gas_station (Manager_Name TEXT, Station_ID NUMBER); CREATE TABLE station_company (Station_ID NUMBER, Rank_of_the_Year NUMBER, Company_ID NUMBER);"
      },
      {
        "question": "Show the results in decreasing order of their sales.",
        "query": "SELECT company , rank FROM company ORDER BY sales_billion DESC",
        "schema": "CREATE TABLE company (Company TEXT, Rank NUMBER, Sales_billion NUMBER, Company_ID NUMBER, Headquarters TEXT); CREATE TABLE station_company (Company_ID NUMBER, Rank_of_the_Year NUMBER, Station_ID NUMBER); CREATE TABLE gas_station (Station_ID NUMBER, Manager_Name TEXT);"
      }
    ],
    [
      {
        "question": "Show the company name and the main industry for all companies.",
        "query": "SELECT company , main_industry FROM company",
        "schema": "CREATE TABLE company (Main_Industry TEXT, Company TEXT, Company_ID NUMBER);"
      },
      {
        "question": "Show the results only for those whose headquarters are not from USA.",
        "query": "SELECT company , main_industry FROM company WHERE headquarters != 'USA'",
        "schema": "CREATE TABLE company (Main_Industry TEXT, Headquarters TEXT, Company TEXT, Company_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show all company names and headquarters.",
        "query": "SELECT company , headquarters FROM company",
        "schema": "CREATE TABLE company (Headquarters TEXT, Company_ID NUMBER, Company TEXT); CREATE TABLE station_company (Company_ID NUMBER, Station_ID NUMBER);"
      },
      {
        "question": "Show them in the descending order of market value.",
        "query": "SELECT company , headquarters FROM company ORDER BY market_value DESC",
        "schema": "CREATE TABLE station_company (Station_ID NUMBER, Company_ID NUMBER); CREATE TABLE company (Market_Value NUMBER, Company TEXT, Headquarters TEXT, Company_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show the market value for all companies.",
        "query": "SELECT market_value FROM company",
        "schema": "CREATE TABLE company (Market_Value NUMBER, Company TEXT, Company_ID NUMBER);"
      },
      {
        "question": "What are the minimum, maximum, and average of them?",
        "query": "SELECT min(market_value) , max(market_value) , avg(market_value) FROM company",
        "schema": "CREATE TABLE company (Company TEXT, Company_ID NUMBER, Market_Value NUMBER);"
      }
    ],
    [
      {
        "question": "Show the company info.",
        "query": "SELECT * FROM company",
        "schema": "CREATE TABLE gas_station (Station_ID NUMBER); CREATE TABLE company (Company_ID NUMBER, Company TEXT, Headquarters TEXT); CREATE TABLE station_company (Company_ID NUMBER, Station_ID NUMBER);"
      },
      {
        "question": "Show the main industry for them.",
        "query": "SELECT main_industry FROM company",
        "schema": "CREATE TABLE gas_station (Station_ID NUMBER); CREATE TABLE company (Main_Industry TEXT, Company TEXT, Headquarters TEXT, Company_ID NUMBER); CREATE TABLE station_company (Station_ID NUMBER, Company_ID NUMBER);"
      },
      {
        "question": "Remove duplicates.",
        "query": "SELECT DISTINCT main_industry FROM company",
        "schema": "CREATE TABLE company (Company_ID NUMBER, Main_Industry TEXT, Headquarters TEXT, Company TEXT); CREATE TABLE station_company (Company_ID NUMBER, Station_ID NUMBER); CREATE TABLE gas_station (Station_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show all headquarters for companies.",
        "query": "SELECT headquarters FROM company",
        "schema": "CREATE TABLE company (Company_ID NUMBER, Headquarters TEXT, Company TEXT); CREATE TABLE station_company (Company_ID NUMBER);"
      },
      {
        "question": "For each of them, show the number of companies.",
        "query": "SELECT headquarters , count(*) FROM company GROUP BY headquarters",
        "schema": "CREATE TABLE company (Company_ID NUMBER, Company TEXT, Headquarters TEXT); CREATE TABLE station_company (Company_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show all main industries for companies.",
        "query": "SELECT main_industry FROM company",
        "schema": "CREATE TABLE company (Company TEXT, Company_ID NUMBER, Headquarters TEXT, Main_Industry TEXT);"
      },
      {
        "question": "For each of them, also show the total market value.",
        "query": "SELECT main_industry , sum(market_value) FROM company GROUP BY main_industry",
        "schema": "CREATE TABLE company (Company_ID NUMBER, Market_Value NUMBER, Headquarters TEXT, Company TEXT, Main_Industry TEXT);"
      }
    ],
    [
      {
        "question": "Show all the main industries for companies.",
        "query": "SELECT main_industry FROM company",
        "schema": "CREATE TABLE company (Company TEXT, Main_Industry TEXT, Company_ID NUMBER);"
      },
      {
        "question": "Order them in descending order by total market value.",
        "query": "SELECT main_industry FROM company GROUP BY main_industry ORDER BY sum(market_value) DESC",
        "schema": "CREATE TABLE company (Company TEXT, Company_ID NUMBER, Main_Industry TEXT, Market_Value NUMBER);"
      },
      {
        "question": "What one has the highest?",
        "query": "SELECT main_industry FROM company GROUP BY main_industry ORDER BY sum(market_value) DESC LIMIT 1",
        "schema": "CREATE TABLE company (Company TEXT, Company_ID NUMBER, Main_Industry TEXT, Market_Value NUMBER);"
      },
      {
        "question": "Also show its number of companies.",
        "query": "SELECT main_industry , count(*) FROM company GROUP BY main_industry ORDER BY sum(market_value) DESC LIMIT 1",
        "schema": "CREATE TABLE company (Market_Value NUMBER, Company_ID NUMBER, Main_Industry TEXT, Company TEXT);"
      }
    ],
    [
      {
        "question": "Show all headquarters.",
        "query": "SELECT headquarters FROM company",
        "schema": "CREATE TABLE company (Headquarters TEXT, Company_ID NUMBER);"
      },
      {
        "question": "For each of them, also show the number of companies in the banking industry.",
        "query": "SELECT headquarters, count(*) FROM company WHERE main_industry = 'Banking' GROUP BY headquarters",
        "schema": "CREATE TABLE company (Company_ID NUMBER, Main_Industry TEXT, Company TEXT, Headquarters TEXT);"
      },
      {
        "question": "Which have at least two?",
        "query": "SELECT headquarters FROM company WHERE main_industry = 'Banking' GROUP BY headquarters HAVING count(*) >= 2",
        "schema": "CREATE TABLE company (Headquarters TEXT, Main_Industry TEXT, Company_ID NUMBER, Company TEXT);"
      }
    ],
    [
      {
        "question": "Show the station id for all stations.",
        "query": "SELECT station_id FROM gas_station",
        "schema": "CREATE TABLE station_company (Station_ID NUMBER, Company_ID NUMBER); CREATE TABLE gas_station (Station_ID NUMBER);"
      },
      {
        "question": "Also show the location and the manager name for each of them.",
        "query": "SELECT station_id , LOCATION , manager_name FROM gas_station",
        "schema": "CREATE TABLE gas_station (Location TEXT, Station_ID NUMBER, Manager_Name TEXT); CREATE TABLE station_company (Company_ID NUMBER, Station_ID NUMBER);"
      },
      {
        "question": "Order the results by their opening year.",
        "query": "SELECT station_id , LOCATION , manager_name FROM gas_station ORDER BY open_year",
        "schema": "CREATE TABLE station_company (Station_ID NUMBER, Company_ID NUMBER); CREATE TABLE gas_station (Location TEXT, Open_Year NUMBER, Manager_Name TEXT, Station_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show the information for all gas stations.",
        "query": "SELECT * FROM gas_station",
        "schema": "CREATE TABLE company (Company_ID NUMBER); CREATE TABLE gas_station (Station_ID NUMBER, Manager_Name TEXT, Representative_Name TEXT); CREATE TABLE station_company (Company_ID NUMBER, Station_ID NUMBER);"
      },
      {
        "question": "How about those that opened between 2000 and 2005?",
        "query": "SELECT * FROM gas_station WHERE open_year BETWEEN 2000 AND 2005",
        "schema": "CREATE TABLE gas_station (Open_Year NUMBER, Representative_Name TEXT, Station_ID NUMBER, Manager_Name TEXT); CREATE TABLE station_company (Company_ID NUMBER, Station_ID NUMBER); CREATE TABLE company (Company_ID NUMBER);"
      },
      {
        "question": "Show the count.",
        "query": "SELECT count(*) FROM gas_station WHERE open_year BETWEEN 2000 AND 2005",
        "schema": "CREATE TABLE gas_station (Station_ID NUMBER, Representative_Name TEXT, Manager_Name TEXT, Open_Year NUMBER); CREATE TABLE station_company (Company_ID NUMBER, Station_ID NUMBER); CREATE TABLE company (Company_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show locations for all gas stations.",
        "query": "SELECT LOCATION FROM gas_station",
        "schema": "CREATE TABLE station_company (Station_ID NUMBER); CREATE TABLE gas_station (Location TEXT, Station_ID NUMBER);"
      },
      {
        "question": "For each of them, show the number of gas stations.",
        "query": "SELECT LOCATION , count(*) FROM gas_station GROUP BY LOCATION",
        "schema": "CREATE TABLE station_company (Station_ID NUMBER); CREATE TABLE gas_station (Station_ID NUMBER, Location TEXT);"
      },
      {
        "question": "Order the results by the count.",
        "query": "SELECT LOCATION , count(*) FROM gas_station GROUP BY LOCATION ORDER BY count(*)",
        "schema": "CREATE TABLE station_company (Station_ID NUMBER); CREATE TABLE gas_station (Station_ID NUMBER, Location TEXT);"
      }
    ],
    [
      {
        "question": "Show all headquarters.",
        "query": "SELECT headquarters FROM company",
        "schema": "CREATE TABLE company (Headquarters TEXT, Company_ID NUMBER);"
      },
      {
        "question": "Show headquarters with a company in the banking industry.",
        "query": "SELECT headquarters FROM company WHERE main_industry = 'Banking'",
        "schema": "CREATE TABLE company (Main_Industry TEXT, Company_ID NUMBER, Company TEXT, Headquarters TEXT);"
      },
      {
        "question": "How about headquarters with a company in oil and gas?",
        "query": "SELECT headquarters FROM company WHERE main_industry = 'Oil and gas'",
        "schema": "CREATE TABLE company (Headquarters TEXT, Company_ID NUMBER, Main_Industry TEXT, Company TEXT);"
      },
      {
        "question": "Show headquarters with both.",
        "query": "SELECT headquarters FROM company WHERE main_industry = 'Banking' INTERSECT SELECT headquarters FROM company WHERE main_industry = 'Oil and gas'",
        "schema": "CREATE TABLE company (Main_Industry TEXT, Company TEXT, Company_ID NUMBER, Headquarters TEXT);"
      }
    ],
    [
      {
        "question": "Show the headquarters with a company in banking industry.",
        "query": "SELECT headquarters FROM company WHERE main_industry = 'Banking'",
        "schema": "CREATE TABLE company (Headquarters TEXT, Company TEXT, Main_Industry TEXT);"
      },
      {
        "question": "How about those without any such company?",
        "query": "SELECT headquarters FROM company EXCEPT SELECT headquarters FROM company WHERE main_industry = 'Banking'",
        "schema": "CREATE TABLE company (Company_ID NUMBER, Headquarters TEXT, Company TEXT, Main_Industry TEXT);"
      }
    ],
    [
      {
        "question": "Show the company name.",
        "query": "SELECT company FROM company",
        "schema": "CREATE TABLE company (Company TEXT, Company_ID NUMBER, Headquarters TEXT); CREATE TABLE gas_station (Station_ID NUMBER, Manager_Name TEXT); CREATE TABLE station_company (Company_ID NUMBER, Station_ID NUMBER);"
      },
      {
        "question": "For each of them, also show the number of gas station.",
        "query": "SELECT t2.company , count(*) FROM station_company AS t1 JOIN company AS t2 ON t1.company_id = t2.company_id GROUP BY t1.company_id",
        "schema": "CREATE TABLE station_company (Company_ID NUMBER, Station_ID NUMBER); CREATE TABLE company (Company TEXT, Company_ID NUMBER, Headquarters TEXT); CREATE TABLE gas_station (Station_ID NUMBER, Manager_Name TEXT);"
      }
    ],
    [
      {
        "question": "What are company ids with a gas station.",
        "query": "SELECT company_id FROM station_company",
        "schema": "CREATE TABLE station_company (Company_ID NUMBER, Station_ID NUMBER); CREATE TABLE company (Headquarters TEXT, Company TEXT, Company_ID NUMBER); CREATE TABLE gas_station (Station_ID NUMBER);"
      },
      {
        "question": "Show the company name without a gas station.",
        "query": "SELECT company FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company)",
        "schema": "CREATE TABLE station_company (Company_ID NUMBER, Station_ID NUMBER); CREATE TABLE company (Company_ID NUMBER, Company TEXT, Headquarters TEXT); CREATE TABLE gas_station (Station_ID NUMBER, Manager_Name TEXT);"
      },
      {
        "question": "Show also their main industry.",
        "query": "SELECT company , main_industry FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company)",
        "schema": "CREATE TABLE station_company (Company_ID NUMBER, Station_ID NUMBER); CREATE TABLE company (Company_ID NUMBER, Main_Industry TEXT, Headquarters TEXT, Company TEXT); CREATE TABLE gas_station (Manager_Name TEXT, Station_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show the manager name for all gas stations.",
        "query": "SELECT manager_name FROM gas_station",
        "schema": "CREATE TABLE gas_station (Station_ID NUMBER, Manager_Name TEXT, Vice_Manager_Name TEXT); CREATE TABLE company (Company_ID NUMBER); CREATE TABLE station_company (Company_ID NUMBER, Station_ID NUMBER);"
      },
      {
        "question": "Show those for gas stations belonging to the ExxonMobil company.",
        "query": "SELECT t3.manager_name FROM station_company AS t1 JOIN company AS t2 ON t1.company_id = t2.company_id JOIN gas_station AS t3 ON t1.station_id = t3.station_id WHERE t2.company = 'ExxonMobil'",
        "schema": "CREATE TABLE gas_station (Manager_Name TEXT, Vice_Manager_Name TEXT, Station_ID NUMBER); CREATE TABLE company (Company_ID NUMBER, Main_Industry TEXT, Company TEXT, Headquarters TEXT); CREATE TABLE station_company (Station_ID NUMBER, Company_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show locations for all gas stations.",
        "query": "SELECT LOCATION FROM gas_station",
        "schema": "CREATE TABLE gas_station (Location TEXT, Station_ID NUMBER); CREATE TABLE station_company (Station_ID NUMBER);"
      },
      {
        "question": "Show locations whose company has a market value greater than 100.",
        "query": "SELECT t3.location FROM station_company AS t1 JOIN company AS t2 ON t1.company_id = t2.company_id JOIN gas_station AS t3 ON t1.station_id = t3.station_id WHERE t2.market_value > 100",
        "schema": "CREATE TABLE company (Market_Value NUMBER, Company TEXT, Company_ID NUMBER, Headquarters TEXT); CREATE TABLE gas_station (Station_ID NUMBER, Location TEXT); CREATE TABLE station_company (Station_ID NUMBER, Company_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show the manager name for all gas stations.",
        "query": "SELECT manager_name FROM gas_station",
        "schema": "CREATE TABLE gas_station (Manager_Name TEXT, Station_ID NUMBER, Vice_Manager_Name TEXT); CREATE TABLE station_company (Station_ID NUMBER, Company_ID NUMBER); CREATE TABLE company (Company_ID NUMBER);"
      },
      {
        "question": "For each of them, also count the number of gas stations opened after 2000.",
        "query": "SELECT manager_name, count(*) FROM gas_station WHERE open_year > 2000 GROUP BY manager_name",
        "schema": "CREATE TABLE company (Company_ID NUMBER); CREATE TABLE gas_station (Manager_Name TEXT, Vice_Manager_Name TEXT, Open_Year NUMBER, Station_ID NUMBER); CREATE TABLE station_company (Station_ID NUMBER, Company_ID NUMBER);"
      },
      {
        "question": "Show the results in the descending order of their count.",
        "query": "SELECT manager_name, count(*) FROM gas_station WHERE open_year > 2000 GROUP BY manager_name ORDER BY count(*) DESC",
        "schema": "CREATE TABLE station_company (Station_ID NUMBER, Company_ID NUMBER); CREATE TABLE gas_station (Station_ID NUMBER, Vice_Manager_Name TEXT, Open_Year NUMBER, Manager_Name TEXT); CREATE TABLE company (Company_ID NUMBER);"
      },
      {
        "question": "Which manager name has the most?",
        "query": "SELECT manager_name FROM gas_station WHERE open_year > 2000 GROUP BY manager_name ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE station_company (Company_ID NUMBER, Station_ID NUMBER); CREATE TABLE gas_station (Manager_Name TEXT, Station_ID NUMBER, Vice_Manager_Name TEXT, Open_Year NUMBER); CREATE TABLE company (Company_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show the location for all gas stations.",
        "query": "SELECT LOCATION FROM gas_station",
        "schema": "CREATE TABLE gas_station (Station_ID NUMBER, Location TEXT); CREATE TABLE station_company (Station_ID NUMBER); CREATE TABLE company (Company_ID NUMBER);"
      },
      {
        "question": "Order them by their opening year.",
        "query": "SELECT LOCATION FROM gas_station ORDER BY open_year",
        "schema": "CREATE TABLE company (Company_ID NUMBER); CREATE TABLE station_company (Station_ID NUMBER); CREATE TABLE gas_station (Station_ID NUMBER, Open_Year NUMBER, Location TEXT);"
      }
    ],
    [
      {
        "question": "Show the rank, company names, market values of all the companies.",
        "query": "SELECT rank , company , market_value FROM company",
        "schema": "CREATE TABLE company (Company_ID NUMBER, Rank NUMBER, Headquarters TEXT, Company TEXT, Market_Value NUMBER); CREATE TABLE station_company (Rank_of_the_Year NUMBER, Company_ID NUMBER);"
      },
      {
        "question": "What about the results for those in the banking industry?",
        "query": "SELECT rank , company , market_value FROM company WHERE main_industry = 'Banking'",
        "schema": "CREATE TABLE station_company (Rank_of_the_Year NUMBER, Company_ID NUMBER); CREATE TABLE company (Rank NUMBER, Company TEXT, Company_ID NUMBER, Market_Value NUMBER, Main_Industry TEXT, Headquarters TEXT);"
      },
      {
        "question": "Order the results by their sales and profits in billion.",
        "query": "SELECT rank , company , market_value FROM company WHERE main_industry = 'Banking' ORDER BY sales_billion , profits_billion",
        "schema": "CREATE TABLE company (Rank NUMBER, Sales_billion NUMBER, Market_Value NUMBER, Headquarters TEXT, Company_ID NUMBER, Company TEXT, Profits_billion NUMBER, Main_Industry TEXT); CREATE TABLE station_company (Company_ID NUMBER, Rank_of_the_Year NUMBER);"
      }
    ]
  ],
  "solvency_ii": [
    [
      {
        "question": "What are the prices of products called \"Trading Policy\"?",
        "query": "SELECT product_price FROM products WHERE product_name = \"Trading Policy\"",
        "schema": "CREATE TABLE Products (Product_Name TEXT, Product_Price NUMBER, Product_Type_Code TEXT, Product_ID NUMBER);"
      },
      {
        "question": "How bout \"Dining\"?",
        "query": "SELECT product_price FROM products WHERE product_name = \"Dining\"",
        "schema": "CREATE TABLE Products (Product_Type_Code TEXT, Product_ID NUMBER, Product_Price NUMBER, Product_Name TEXT);"
      },
      {
        "question": "Show those together, please.",
        "query": "SELECT product_price FROM products WHERE product_name = \"Dining\" OR product_name = \"Trading Policy\"",
        "schema": "CREATE TABLE Products (Product_ID NUMBER, Product_Name TEXT, Product_Type_Code TEXT, Product_Price NUMBER);"
      }
    ],
    [
      {
        "question": "What are the prices of the products?",
        "query": "SELECT product_name, product_price FROM products",
        "schema": "CREATE TABLE Products (Product_Type_Code TEXT, Product_Name TEXT, Product_Price NUMBER, Product_ID NUMBER);"
      },
      {
        "question": "Can you sort that by descending product price?",
        "query": "SELECT product_name, product_price FROM products ORDER BY product_price DESC",
        "schema": "CREATE TABLE Products (Product_Name TEXT, Product_ID NUMBER, Product_Price NUMBER, Product_Type_Code TEXT);"
      },
      {
        "question": "Just show the product name with the highest price",
        "query": "SELECT product_name FROM products ORDER BY product_price DESC LIMIT 1",
        "schema": "CREATE TABLE Products (Product_ID NUMBER, Product_Type_Code TEXT, Product_Name TEXT, Product_Price NUMBER);"
      }
    ],
    [
      {
        "question": "What are the type codes for products?",
        "query": "SELECT product_name, product_type_code FROM products",
        "schema": "CREATE TABLE Events (Event_Type_Code TEXT); CREATE TABLE Products (Product_Type_Code TEXT, Product_Name TEXT, Product_ID NUMBER);"
      },
      {
        "question": "Can you count the products for each type code?",
        "query": "SELECT product_type_code, count(*) FROM products GROUP BY product_type_code",
        "schema": "CREATE TABLE Products (Product_ID NUMBER, Product_Type_Code TEXT, Product_Name TEXT); CREATE TABLE Events (Event_Type_Code TEXT);"
      },
      {
        "question": "Which is most common?",
        "query": "SELECT product_type_code FROM products GROUP BY product_type_code ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Events (Event_Type_Code TEXT); CREATE TABLE Products (Product_Name TEXT, Product_ID NUMBER, Product_Type_Code TEXT);"
      },
      {
        "question": "Show the ones with at least two products.",
        "query": "SELECT product_type_code FROM products GROUP BY product_type_code HAVING count(*) >= 2",
        "schema": "CREATE TABLE Events (Event_Type_Code TEXT); CREATE TABLE Products (Product_Name TEXT, Product_Type_Code TEXT, Product_ID NUMBER);"
      },
      {
        "question": "Show those ones that have products with price higher than 4500 and products with price lower than 3000.",
        "query": "SELECT product_type_code FROM products WHERE product_price > 4500 INTERSECT SELECT product_type_code FROM products WHERE product_price < 3000",
        "schema": "CREATE TABLE Events (Event_Type_Code TEXT); CREATE TABLE Products (Product_ID NUMBER, Product_Type_Code TEXT, Product_Price NUMBER, Product_Name TEXT);"
      }
    ]
  ],
  "cinema": [
    [
      {
        "question": "Show the locations for all cinemas.",
        "query": "SELECT LOCATION FROM cinema",
        "schema": "CREATE TABLE cinema (Location TEXT, Cinema_ID NUMBER, Name TEXT);"
      },
      {
        "question": "What are the locations for the cinemas that have a capacity over 800?",
        "query": "SELECT LOCATION FROM cinema WHERE capacity > 800",
        "schema": "CREATE TABLE cinema (Cinema_ID NUMBER, Location TEXT, Capacity NUMBER, Name TEXT);"
      },
      {
        "question": "Show all locations except for those.",
        "query": "SELECT LOCATION FROM cinema EXCEPT SELECT LOCATION FROM cinema WHERE capacity > 800",
        "schema": "CREATE TABLE cinema (Capacity NUMBER, Location TEXT, Name TEXT, Cinema_ID NUMBER);"
      }
    ],
    [
      {
        "question": "List the locations where a cinema was opened in 2010.",
        "query": "SELECT LOCATION FROM cinema WHERE openning_year = 2010",
        "schema": "CREATE TABLE cinema (Location TEXT, Name TEXT, Openning_year NUMBER, Cinema_ID NUMBER);"
      },
      {
        "question": "How about the locations where of cinema was opened in 2011?",
        "query": "SELECT LOCATION FROM cinema WHERE openning_year = 2011",
        "schema": "CREATE TABLE cinema (Cinema_ID NUMBER, Name TEXT, Openning_year NUMBER, Location TEXT);"
      },
      {
        "question": "Show the locations that belong to both groups.",
        "query": "SELECT LOCATION FROM cinema WHERE openning_year = 2010 INTERSECT SELECT LOCATION FROM cinema WHERE openning_year = 2011",
        "schema": "CREATE TABLE cinema (Openning_year NUMBER, Location TEXT, Cinema_ID NUMBER, Name TEXT);"
      }
    ],
    [
      {
        "question": "Show all cinemas.",
        "query": "SELECT * FROM cinema",
        "schema": "CREATE TABLE schedule (Cinema_ID NUMBER); CREATE TABLE cinema (Cinema_ID NUMBER, Name TEXT); CREATE TABLE film (Film_ID NUMBER);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT count(*) FROM cinema",
        "schema": "CREATE TABLE schedule (Cinema_ID NUMBER); CREATE TABLE film (Film_ID NUMBER); CREATE TABLE cinema (Name TEXT, Cinema_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show all information for cinemas.",
        "query": "SELECT * FROM cinema",
        "schema": "CREATE TABLE schedule (Film_ID NUMBER, Cinema_ID NUMBER); CREATE TABLE cinema (Cinema_ID NUMBER, Name TEXT); CREATE TABLE film (Film_ID NUMBER, Directed_by TEXT, Title TEXT);"
      },
      {
        "question": "Only list name, opening year, and capacity for them.",
        "query": "SELECT name , openning_year , capacity FROM cinema",
        "schema": "CREATE TABLE film (Film_ID NUMBER, Directed_by TEXT, Title TEXT); CREATE TABLE schedule (Cinema_ID NUMBER, Film_ID NUMBER); CREATE TABLE cinema (Openning_year NUMBER, Capacity NUMBER, Cinema_ID NUMBER, Name TEXT);"
      }
    ],
    [
      {
        "question": "What is are the capacities for cinemas?",
        "query": "SELECT capacity FROM cinema",
        "schema": "CREATE TABLE cinema (Name TEXT, Cinema_ID NUMBER, Capacity NUMBER); CREATE TABLE film (Film_ID NUMBER);"
      },
      {
        "question": "What is the average?",
        "query": "SELECT avg(capacity) FROM cinema",
        "schema": "CREATE TABLE cinema (Name TEXT, Cinema_ID NUMBER, Capacity NUMBER); CREATE TABLE film (Film_ID NUMBER);"
      },
      {
        "question": "Show the name and location for any cinemas with a capacity above this.",
        "query": "SELECT name , LOCATION FROM cinema WHERE capacity > (SELECT avg(capacity) FROM cinema)",
        "schema": "CREATE TABLE film (Film_ID NUMBER); CREATE TABLE cinema (Name TEXT, Location TEXT, Capacity NUMBER, Cinema_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show all information for cinemas.",
        "query": "SELECT * FROM cinema",
        "schema": "CREATE TABLE film (Film_ID NUMBER, Title TEXT, Directed_by TEXT); CREATE TABLE cinema (Name TEXT, Cinema_ID NUMBER); CREATE TABLE schedule (Cinema_ID NUMBER, Film_ID NUMBER);"
      },
      {
        "question": "Show all distinct locations containing cinemas.",
        "query": "SELECT DISTINCT LOCATION FROM cinema",
        "schema": "CREATE TABLE schedule (Cinema_ID NUMBER, Film_ID NUMBER); CREATE TABLE cinema (Cinema_ID NUMBER, Location TEXT, Name TEXT); CREATE TABLE film (Title TEXT, Film_ID NUMBER, Directed_by TEXT);"
      }
    ],
    [
      {
        "question": "Show name and opening year for each cinema.",
        "query": "SELECT name , openning_year FROM cinema",
        "schema": "CREATE TABLE cinema (Openning_year NUMBER, Name TEXT, Cinema_ID NUMBER);"
      },
      {
        "question": "Sort them in descending order by opening year.",
        "query": "SELECT name , openning_year FROM cinema ORDER BY openning_year DESC",
        "schema": "CREATE TABLE cinema (Name TEXT, Cinema_ID NUMBER, Openning_year NUMBER);"
      }
    ],
    [
      {
        "question": "Show name and location for all cinemas.",
        "query": "SELECT name , LOCATION FROM cinema",
        "schema": "CREATE TABLE cinema (Name TEXT, Location TEXT, Cinema_ID NUMBER);"
      },
      {
        "question": "Order by them their capacity in descending order.",
        "query": "SELECT name , LOCATION FROM cinema ORDER BY capacity DESC",
        "schema": "CREATE TABLE cinema (Cinema_ID NUMBER, Capacity NUMBER, Location TEXT, Name TEXT);"
      },
      {
        "question": "What is the top cinema in the list?",
        "query": "SELECT name , LOCATION FROM cinema ORDER BY capacity DESC LIMIT 1",
        "schema": "CREATE TABLE cinema (Location TEXT, Cinema_ID NUMBER, Name TEXT, Capacity NUMBER);"
      }
    ],
    [
      {
        "question": "Show the capacities for all cinemas.",
        "query": "SELECT capacity FROM cinema",
        "schema": "CREATE TABLE cinema (Cinema_ID NUMBER, Name TEXT, Capacity NUMBER); CREATE TABLE film (Film_ID NUMBER);"
      },
      {
        "question": "How about the capacities for those that opened in 2011 or later?",
        "query": "SELECT capacity FROM cinema WHERE openning_year >= 2011",
        "schema": "CREATE TABLE film (Film_ID NUMBER); CREATE TABLE cinema (Capacity NUMBER, Cinema_ID NUMBER, Openning_year NUMBER, Name TEXT);"
      },
      {
        "question": "What is the average, minimum, and maximum among these?",
        "query": "SELECT avg(capacity) , min(capacity) , max(capacity) FROM cinema WHERE openning_year >= 2011",
        "schema": "CREATE TABLE cinema (Openning_year NUMBER, Cinema_ID NUMBER, Capacity NUMBER, Name TEXT); CREATE TABLE film (Film_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show all locations for cinemas.",
        "query": "SELECT LOCATION FROM cinema",
        "schema": "CREATE TABLE cinema (Name TEXT, Location TEXT, Cinema_ID NUMBER);"
      },
      {
        "question": "Also show the number of cinemas in each location.",
        "query": "SELECT LOCATION , count(*) FROM cinema GROUP BY LOCATION",
        "schema": "CREATE TABLE cinema (Name TEXT, Location TEXT, Cinema_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show all locations with cinemas.",
        "query": "SELECT LOCATION FROM cinema",
        "schema": "CREATE TABLE cinema (Location TEXT, Cinema_ID NUMBER, Name TEXT);"
      },
      {
        "question": "How about locations for those that opened in year 2010 or later?",
        "query": "SELECT LOCATION FROM cinema WHERE openning_year >= 2010",
        "schema": "CREATE TABLE cinema (Cinema_ID NUMBER, Name TEXT, Openning_year NUMBER, Location TEXT);"
      },
      {
        "question": "What is the location with the most such cinemas?",
        "query": "SELECT LOCATION FROM cinema WHERE openning_year >= 2010 GROUP BY LOCATION ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE cinema (Openning_year NUMBER, Location TEXT, Cinema_ID NUMBER, Name TEXT);"
      }
    ],
    [
      {
        "question": "Show all locations of cinemas.",
        "query": "SELECT LOCATION FROM cinema",
        "schema": "CREATE TABLE cinema (Location TEXT, Cinema_ID NUMBER, Name TEXT);"
      },
      {
        "question": "What are locations for the cinemas with a capacity above 300?",
        "query": "SELECT LOCATION FROM cinema WHERE capacity > 300",
        "schema": "CREATE TABLE cinema (Location TEXT, Cinema_ID NUMBER, Capacity NUMBER, Name TEXT);"
      },
      {
        "question": "What are locations with at least two such cinemas?",
        "query": "SELECT LOCATION FROM cinema WHERE capacity > 300 GROUP BY LOCATION HAVING count(*) >= 2",
        "schema": "CREATE TABLE cinema (Capacity NUMBER, Name TEXT, Cinema_ID NUMBER, Location TEXT);"
      }
    ],
    [
      {
        "question": "Show all information of films.",
        "query": "SELECT * FROM film",
        "schema": "CREATE TABLE film (Title TEXT, Film_ID NUMBER, Directed_by TEXT); CREATE TABLE schedule (Film_ID NUMBER); CREATE TABLE cinema (Cinema_ID NUMBER);"
      },
      {
        "question": "How about the title and director for those?",
        "query": "SELECT title , directed_by FROM film",
        "schema": "CREATE TABLE schedule (Film_ID NUMBER); CREATE TABLE film (Film_ID NUMBER, Title TEXT, Directed_by TEXT); CREATE TABLE cinema (Cinema_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show the information for all films.",
        "query": "SELECT * FROM film",
        "schema": "CREATE TABLE schedule (Film_ID NUMBER); CREATE TABLE cinema (Cinema_ID NUMBER, Name TEXT); CREATE TABLE film (Production_code TEXT, Directed_by TEXT, Film_ID NUMBER, Title TEXT);"
      },
      {
        "question": "Who are the directors for those?",
        "query": "SELECT DISTINCT directed_by FROM film",
        "schema": "CREATE TABLE schedule (Film_ID NUMBER); CREATE TABLE cinema (Cinema_ID NUMBER, Name TEXT); CREATE TABLE film (Production_code TEXT, Title TEXT, Directed_by TEXT, Film_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show directors for all films.",
        "query": "SELECT directed_by FROM film",
        "schema": "CREATE TABLE cinema (Cinema_ID NUMBER); CREATE TABLE film (Directed_by TEXT, Production_code TEXT, Title TEXT, Film_ID NUMBER); CREATE TABLE schedule (Film_ID NUMBER);"
      },
      {
        "question": "Also show the number of films made by each director.",
        "query": "SELECT directed_by , count(*) FROM film GROUP BY directed_by",
        "schema": "CREATE TABLE film (Production_code TEXT, Film_ID NUMBER, Title TEXT, Directed_by TEXT); CREATE TABLE cinema (Cinema_ID NUMBER); CREATE TABLE schedule (Film_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show the names for all cinemas.",
        "query": "SELECT name FROM cinema",
        "schema": "CREATE TABLE cinema (Name TEXT, Cinema_ID NUMBER); CREATE TABLE film (Title TEXT, Film_ID NUMBER);"
      },
      {
        "question": "Also show the showtimes per day for those cinemas.",
        "query": "SELECT t2.name , t1.show_times_per_day FROM schedule AS t1 JOIN cinema AS t2 ON t1.cinema_id = t2.cinema_id",
        "schema": "CREATE TABLE film (Film_ID NUMBER, Title TEXT); CREATE TABLE schedule (Date TEXT, Show_times_per_day NUMBER, Cinema_ID NUMBER); CREATE TABLE cinema (Name TEXT, Cinema_ID NUMBER);"
      },
      {
        "question": "For each cinema, also show the total number of showtimes per day.",
        "query": "SELECT t2.name , sum(t1.show_times_per_day) FROM schedule AS t1 JOIN cinema AS t2 ON t1.cinema_id = t2.cinema_id GROUP BY t1.cinema_id",
        "schema": "CREATE TABLE schedule (Date TEXT, Show_times_per_day NUMBER, Cinema_ID NUMBER); CREATE TABLE film (Title TEXT, Film_ID NUMBER); CREATE TABLE cinema (Cinema_ID NUMBER, Name TEXT);"
      }
    ],
    [
      {
        "question": "Show the title for each film.",
        "query": "SELECT title FROM film",
        "schema": "CREATE TABLE film (Title TEXT, Film_ID NUMBER); CREATE TABLE schedule (Film_ID NUMBER);"
      },
      {
        "question": "Also show the prices for each of them.",
        "query": "SELECT t2.title , t1.price FROM schedule AS t1 JOIN film AS t2 ON t1.film_id = t2.film_id",
        "schema": "CREATE TABLE schedule (Film_ID NUMBER, Price NUMBER); CREATE TABLE film (Title TEXT, Film_ID NUMBER);"
      },
      {
        "question": "What is the maximum price for each?",
        "query": "SELECT t2.title , max(t1.price) FROM schedule AS t1 JOIN film AS t2 ON t1.film_id = t2.film_id GROUP BY t1.film_id",
        "schema": "CREATE TABLE schedule (Film_ID NUMBER, Price NUMBER); CREATE TABLE film (Film_ID NUMBER, Title TEXT);"
      }
    ],
    [
      {
        "question": "Show the title for films.",
        "query": "SELECT title FROM film",
        "schema": "CREATE TABLE film (Film_ID NUMBER, Title TEXT); CREATE TABLE cinema (Name TEXT);"
      },
      {
        "question": "Show the name for cinemas.",
        "query": "SELECT name FROM cinema",
        "schema": "CREATE TABLE film (Title TEXT, Film_ID NUMBER); CREATE TABLE cinema (Location TEXT, Cinema_ID NUMBER, Name TEXT);"
      },
      {
        "question": "Show all the schedule record.",
        "query": "SELECT * FROM schedule",
        "schema": "CREATE TABLE film (Film_ID NUMBER, Title TEXT); CREATE TABLE cinema (Cinema_ID NUMBER, Name TEXT, Location TEXT); CREATE TABLE schedule (Film_ID NUMBER, Cinema_ID NUMBER);"
      },
      {
        "question": "How about the date and the price for each of those records along with the film title and cinema name.",
        "query": "SELECT t3.name , t2.title , t1.date , t1.price FROM schedule AS t1 JOIN film AS t2 ON t1.film_id = t2.film_id JOIN cinema AS t3 ON t1.cinema_id = t3.cinema_id",
        "schema": "CREATE TABLE schedule (Cinema_ID NUMBER, Price NUMBER, Date TEXT, Film_ID NUMBER); CREATE TABLE cinema (Location TEXT, Cinema_ID NUMBER, Name TEXT); CREATE TABLE film (Title TEXT, Film_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show all film ids in the schedule.",
        "query": "SELECT film_id FROM schedule",
        "schema": "CREATE TABLE film (Film_ID NUMBER); CREATE TABLE cinema (Cinema_ID NUMBER); CREATE TABLE schedule (Film_ID NUMBER, Cinema_ID NUMBER, Show_times_per_day NUMBER);"
      },
      {
        "question": "Show the title and director for all films.",
        "query": "SELECT title , directed_by FROM film",
        "schema": "CREATE TABLE cinema (Cinema_ID NUMBER); CREATE TABLE schedule (Cinema_ID NUMBER, Show_times_per_day NUMBER, Film_ID NUMBER); CREATE TABLE film (Directed_by TEXT, Title TEXT, Film_ID NUMBER);"
      },
      {
        "question": "Only show the title and director for films not in the schedule.",
        "query": "SELECT title , directed_by FROM film WHERE film_id NOT IN (SELECT film_id FROM schedule)",
        "schema": "CREATE TABLE film (Film_ID NUMBER, Title TEXT, Directed_by TEXT); CREATE TABLE schedule (Show_times_per_day NUMBER, Cinema_ID NUMBER, Film_ID NUMBER); CREATE TABLE cinema (Cinema_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show all the directors.",
        "query": "SELECT directed_by FROM film",
        "schema": "CREATE TABLE cinema (Name TEXT, Cinema_ID NUMBER); CREATE TABLE film (Directed_by TEXT, Film_ID NUMBER);"
      },
      {
        "question": "List those directors in descending order by the total number of showtimes.",
        "query": "SELECT t2.directed_by FROM schedule AS t1 JOIN film AS t2 ON t1.film_id = t2.film_id GROUP BY t2.directed_by ORDER BY sum(t1.show_times_per_day) DESC",
        "schema": "CREATE TABLE schedule (Film_ID NUMBER, Show_times_per_day NUMBER); CREATE TABLE cinema (Cinema_ID NUMBER, Name TEXT); CREATE TABLE film (Film_ID NUMBER, Directed_by TEXT);"
      },
      {
        "question": "Who has the most?",
        "query": "SELECT t2.directed_by FROM schedule AS t1 JOIN film AS t2 ON t1.film_id = t2.film_id GROUP BY t2.directed_by ORDER BY sum(t1.show_times_per_day) DESC LIMIT 1",
        "schema": "CREATE TABLE schedule (Show_times_per_day NUMBER, Date TEXT, Film_ID NUMBER); CREATE TABLE film (Film_ID NUMBER, Directed_by TEXT); CREATE TABLE cinema (Name TEXT, Cinema_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show all locations for the cinemas.",
        "query": "SELECT LOCATION FROM cinema",
        "schema": "CREATE TABLE film (Title TEXT); CREATE TABLE cinema (Cinema_ID NUMBER, Location TEXT, Name TEXT);"
      },
      {
        "question": "Only show locations of cinemas with a capacity above 300.",
        "query": "SELECT LOCATION FROM cinema WHERE capacity > 300",
        "schema": "CREATE TABLE film (Title TEXT); CREATE TABLE cinema (Capacity NUMBER, Location TEXT, Name TEXT, Cinema_ID NUMBER);"
      },
      {
        "question": "How about locations with more than one such cinema?",
        "query": "SELECT LOCATION FROM cinema WHERE capacity > 300 GROUP BY LOCATION HAVING count(*) > 1",
        "schema": "CREATE TABLE film (Title TEXT); CREATE TABLE cinema (Cinema_ID NUMBER, Name TEXT, Capacity NUMBER, Location TEXT);"
      }
    ]
  ],
  "cre_Drama_Workshop_Groups": [
    [
      {
        "question": "What are all the bookings?",
        "query": "SELECT * FROM bookings",
        "schema": "CREATE TABLE Customers (Customer_ID TEXT); CREATE TABLE Customer_Orders (Order_ID NUMBER); CREATE TABLE Bookings (Other_Order_Details TEXT, Status_Code TEXT, Customer_ID NUMBER, Booking_ID NUMBER, Workshop_Group_ID TEXT, Store_ID NUMBER); CREATE TABLE Addresses (Address_ID TEXT); CREATE TABLE Performers_in_Bookings (Performer_ID NUMBER, Order_ID NUMBER); CREATE TABLE Services (Service_ID NUMBER, Workshop_Group_ID NUMBER); CREATE TABLE Stores (Store_ID TEXT); CREATE TABLE Clients (Client_ID NUMBER); CREATE TABLE Drama_Workshop_Groups (Workshop_Group_ID NUMBER); CREATE TABLE Performers (Performer_ID NUMBER); CREATE TABLE Bookings_Services (Order_ID NUMBER);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT count(*) FROM bookings",
        "schema": "CREATE TABLE Drama_Workshop_Groups (Workshop_Group_ID NUMBER); CREATE TABLE Performers (Performer_ID NUMBER); CREATE TABLE Bookings_Services (Order_ID NUMBER); CREATE TABLE Customers (Customer_ID TEXT); CREATE TABLE Customer_Orders (Order_ID NUMBER); CREATE TABLE Clients (Client_ID NUMBER); CREATE TABLE Services (Service_ID NUMBER, Workshop_Group_ID NUMBER); CREATE TABLE Stores (Store_ID TEXT); CREATE TABLE Bookings (Other_Order_Details TEXT, Customer_ID NUMBER, Workshop_Group_ID TEXT, Store_ID NUMBER, Booking_ID NUMBER, Status_Code TEXT); CREATE TABLE Performers_in_Bookings (Order_ID NUMBER, Performer_ID NUMBER); CREATE TABLE Addresses (Address_ID TEXT);"
      }
    ],
    [
      {
        "question": "What are all the bookings?",
        "query": "SELECT * FROM bookings",
        "schema": "CREATE TABLE Performers (Performer_ID NUMBER); CREATE TABLE Services (Workshop_Group_ID NUMBER, Service_ID NUMBER); CREATE TABLE Clients (Client_ID NUMBER); CREATE TABLE Performers_in_Bookings (Performer_ID NUMBER, Order_ID NUMBER); CREATE TABLE Drama_Workshop_Groups (Workshop_Group_ID NUMBER); CREATE TABLE Bookings (Store_ID NUMBER, Status_Code TEXT, Other_Order_Details TEXT, Customer_ID NUMBER, Workshop_Group_ID TEXT, Booking_ID NUMBER); CREATE TABLE Stores (Store_ID TEXT); CREATE TABLE Customer_Orders (Order_ID NUMBER); CREATE TABLE Bookings_Services (Order_ID NUMBER); CREATE TABLE Customers (Customer_ID TEXT); CREATE TABLE Addresses (Address_ID TEXT);"
      },
      {
        "question": "What are their order dates?",
        "query": "SELECT order_date FROM bookings",
        "schema": "CREATE TABLE Services (Workshop_Group_ID NUMBER, Service_ID NUMBER); CREATE TABLE Stores (Store_ID TEXT); CREATE TABLE Invoices (Order_Item_ID NUMBER, Order_ID NUMBER); CREATE TABLE Addresses (Address_ID TEXT); CREATE TABLE Order_Items (Order_Item_ID NUMBER, Order_ID NUMBER); CREATE TABLE Performers (Performer_ID NUMBER); CREATE TABLE Customers (Customer_ID TEXT); CREATE TABLE Drama_Workshop_Groups (Workshop_Group_ID NUMBER); CREATE TABLE Performers_in_Bookings (Order_ID NUMBER, Performer_ID NUMBER); CREATE TABLE Clients (Client_ID NUMBER); CREATE TABLE Bookings (Store_ID NUMBER, Actual_Delivery_Date TIME, Planned_Delivery_Date TIME, Workshop_Group_ID TEXT, Order_Date TIME, Other_Order_Details TEXT, Customer_ID NUMBER, Booking_ID NUMBER, Status_Code TEXT); CREATE TABLE Bookings_Services (Order_ID NUMBER); CREATE TABLE Customer_Orders (Order_ID NUMBER, Order_Date TIME);"
      }
    ],
    [
      {
        "question": "What are all the bookings?",
        "query": "SELECT * FROM bookings",
        "schema": "CREATE TABLE Bookings (Booking_ID NUMBER, Status_Code TEXT, Customer_ID NUMBER, Store_ID NUMBER, Workshop_Group_ID TEXT, Other_Order_Details TEXT); CREATE TABLE Customers (Customer_ID TEXT); CREATE TABLE Drama_Workshop_Groups (Workshop_Group_ID NUMBER); CREATE TABLE Customer_Orders (Order_ID NUMBER); CREATE TABLE Clients (Client_ID NUMBER); CREATE TABLE Bookings_Services (Order_ID NUMBER); CREATE TABLE Performers (Performer_ID NUMBER); CREATE TABLE Addresses (Address_ID TEXT); CREATE TABLE Stores (Store_ID TEXT); CREATE TABLE Performers_in_Bookings (Performer_ID NUMBER, Order_ID NUMBER); CREATE TABLE Services (Service_ID NUMBER, Workshop_Group_ID NUMBER);"
      },
      {
        "question": "What are their planned delivery dates and actual delivery dates?",
        "query": "SELECT planned_delivery_date , actual_delivery_date FROM bookings",
        "schema": "CREATE TABLE Customers (Customer_ID TEXT); CREATE TABLE Clients (Client_ID NUMBER); CREATE TABLE Stores (Store_ID TEXT); CREATE TABLE Services (Workshop_Group_ID NUMBER, Service_ID NUMBER); CREATE TABLE Performers_in_Bookings (Order_ID NUMBER, Performer_ID NUMBER); CREATE TABLE Performers (Performer_ID NUMBER); CREATE TABLE Addresses (Address_ID TEXT); CREATE TABLE Customer_Orders (Actual_Delivery_Date TIME, Planned_Delivery_Date TIME, Order_ID NUMBER); CREATE TABLE Bookings (Workshop_Group_ID TEXT, Booking_ID NUMBER, Status_Code TEXT, Planned_Delivery_Date TIME, Store_ID NUMBER, Customer_ID NUMBER, Order_Date TIME, Actual_Delivery_Date TIME, Other_Order_Details TEXT); CREATE TABLE Drama_Workshop_Groups (Workshop_Group_ID NUMBER); CREATE TABLE Bookings_Services (Order_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What are all the customers?",
        "query": "SELECT * FROM customers",
        "schema": "CREATE TABLE Clients (Customer_Phone TEXT, Client_ID NUMBER, Customer_Name TEXT); CREATE TABLE Bookings (Customer_ID NUMBER); CREATE TABLE Customers (Customer_ID TEXT, Customer_Phone TEXT, Customer_Name TEXT); CREATE TABLE Performers (Customer_Name TEXT); CREATE TABLE Customer_Orders (Customer_ID NUMBER);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT count(*) FROM customers",
        "schema": "CREATE TABLE Bookings (Customer_ID NUMBER); CREATE TABLE Customers (Customer_Phone TEXT, Customer_ID TEXT, Customer_Name TEXT); CREATE TABLE Customer_Orders (Customer_ID NUMBER, Order_ID NUMBER); CREATE TABLE Performers (Customer_Name TEXT, Customer_Phone TEXT); CREATE TABLE Clients (Customer_Name TEXT, Customer_Email_Address TEXT, Client_ID NUMBER, Customer_Phone TEXT);"
      }
    ],
    [
      {
        "question": "What are all the customers?",
        "query": "SELECT * FROM customers",
        "schema": "CREATE TABLE Customer_Orders (Customer_ID NUMBER); CREATE TABLE Bookings (Customer_ID NUMBER); CREATE TABLE Customers (Customer_ID TEXT, Customer_Name TEXT, Customer_Phone TEXT); CREATE TABLE Clients (Customer_Phone TEXT, Client_ID NUMBER, Customer_Name TEXT); CREATE TABLE Performers (Customer_Name TEXT);"
      },
      {
        "question": "Who is Harold?",
        "query": "SELECT * FROM customers WHERE customer_name = \"Harold\"",
        "schema": "CREATE TABLE Clients (Customer_Phone TEXT, Client_ID NUMBER, Customer_Name TEXT); CREATE TABLE Customers (Customer_ID TEXT, Customer_Name TEXT, Customer_Phone TEXT); CREATE TABLE Performers (Customer_Name TEXT); CREATE TABLE Bookings (Customer_ID NUMBER); CREATE TABLE Customer_Orders (Customer_ID NUMBER);"
      },
      {
        "question": "Show Harold's phone and email.",
        "query": "SELECT customer_phone , customer_email_address FROM customers WHERE customer_name = \"Harold\"",
        "schema": "CREATE TABLE Customers (Customer_Email_Address TEXT, Customer_Phone TEXT, Customer_ID TEXT, Customer_Name TEXT); CREATE TABLE Performers (Customer_Name TEXT, Customer_Email_Address TEXT, Customer_Phone TEXT); CREATE TABLE Customer_Orders (Customer_ID NUMBER); CREATE TABLE Clients (Client_ID NUMBER, Customer_Email_Address TEXT, Customer_Phone TEXT, Customer_Name TEXT); CREATE TABLE Bookings (Customer_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What are all the drama workshop groups?",
        "query": "SELECT * FROM drama_workshop_groups",
        "schema": "CREATE TABLE Addresses (Address_ID TEXT); CREATE TABLE Bookings (Workshop_Group_ID TEXT, Booking_ID NUMBER); CREATE TABLE Services (Workshop_Group_ID NUMBER); CREATE TABLE Performers (Performer_ID NUMBER); CREATE TABLE Drama_Workshop_Groups (Other_Details TEXT, Currency_Code TEXT, Marketing_Region_Code TEXT, Store_Phone TEXT, Store_Name TEXT, Address_ID NUMBER, Store_Email_Address TEXT, Workshop_Group_ID NUMBER);"
      },
      {
        "question": "What are their names?",
        "query": "SELECT store_name FROM drama_workshop_groups",
        "schema": "CREATE TABLE Customers (Customer_Name TEXT); CREATE TABLE Performers (Performer_ID NUMBER, Customer_Name TEXT); CREATE TABLE Products (Product_Name TEXT); CREATE TABLE Services (Workshop_Group_ID NUMBER); CREATE TABLE Addresses (Address_ID TEXT); CREATE TABLE Clients (Customer_Name TEXT); CREATE TABLE Drama_Workshop_Groups (Currency_Code TEXT, Workshop_Group_ID NUMBER, Store_Name TEXT, Marketing_Region_Code TEXT, Store_Email_Address TEXT, Store_Phone TEXT, Address_ID NUMBER, Other_Details TEXT); CREATE TABLE Bookings (Booking_ID NUMBER, Workshop_Group_ID TEXT); CREATE TABLE Stores (Store_Name TEXT);"
      }
    ],
    [
      {
        "question": "What are all the invoices?",
        "query": "SELECT * FROM invoices",
        "schema": "CREATE TABLE Customer_Orders (Customer_ID NUMBER); CREATE TABLE Performers (Performer_ID NUMBER); CREATE TABLE Customers (Customer_Name TEXT, Customer_ID TEXT); CREATE TABLE Addresses (Address_ID TEXT); CREATE TABLE Ref_Payment_Methods (payment_method_code TEXT); CREATE TABLE Bookings (Booking_ID NUMBER, Customer_ID NUMBER); CREATE TABLE Invoice_Items (Invoice_ID NUMBER, Order_ID NUMBER, Invoice_Item_ID NUMBER); CREATE TABLE Invoices (Invoice_ID NUMBER, Product_ID NUMBER, Order_ID NUMBER, Order_Item_ID NUMBER, payment_method_code TEXT); CREATE TABLE Clients (Client_ID NUMBER, Customer_Name TEXT);"
      },
      {
        "question": "What are their order quantities?",
        "query": "SELECT order_quantity FROM invoices",
        "schema": "CREATE TABLE Order_Items (Order_Quantity TEXT, Order_ID NUMBER, Order_Item_ID NUMBER); CREATE TABLE Invoice_Items (Invoice_ID NUMBER, Order_ID NUMBER, Order_Item_ID NUMBER, Order_Quantity NUMBER, Invoice_Item_ID NUMBER); CREATE TABLE Customers (Customer_ID TEXT, Customer_Name TEXT); CREATE TABLE Invoices (payment_method_code TEXT, Order_Quantity TEXT, Invoice_ID NUMBER, Order_Item_ID NUMBER, Product_ID NUMBER, Order_ID NUMBER); CREATE TABLE Customer_Orders (Customer_ID NUMBER, Order_ID NUMBER); CREATE TABLE Performers (Performer_ID NUMBER); CREATE TABLE Ref_Payment_Methods (payment_method_code TEXT); CREATE TABLE Bookings (Booking_ID NUMBER, Customer_ID NUMBER); CREATE TABLE Clients (Customer_Name TEXT, Client_ID NUMBER); CREATE TABLE Addresses (Address_ID TEXT);"
      },
      {
        "question": "Show the minimum, average, maximum of them.",
        "query": "SELECT min(order_quantity) , avg(order_quantity) , max(order_quantity) FROM invoices",
        "schema": "CREATE TABLE Bookings (Customer_ID NUMBER, Booking_ID NUMBER); CREATE TABLE Order_Items (Order_Item_ID NUMBER, Order_ID NUMBER, Order_Quantity TEXT); CREATE TABLE Customers (Customer_Name TEXT, Customer_ID TEXT); CREATE TABLE Invoice_Items (Order_ID NUMBER, Order_Quantity NUMBER, Invoice_ID NUMBER, Order_Item_ID NUMBER, Invoice_Item_ID NUMBER); CREATE TABLE Customer_Orders (Customer_ID NUMBER, Order_ID NUMBER); CREATE TABLE Clients (Client_ID NUMBER, Customer_Name TEXT); CREATE TABLE Addresses (Address_ID TEXT); CREATE TABLE Ref_Payment_Methods (payment_method_code TEXT); CREATE TABLE Invoices (Invoice_ID NUMBER, Order_Item_ID NUMBER, Order_Quantity TEXT, Product_ID NUMBER, payment_method_code TEXT, Order_ID NUMBER); CREATE TABLE Performers (Performer_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What are all the invoices?",
        "query": "SELECT * FROM invoices",
        "schema": "CREATE TABLE Clients (Customer_Name TEXT, Client_ID NUMBER); CREATE TABLE Addresses (Address_ID TEXT); CREATE TABLE Performers (Performer_ID NUMBER); CREATE TABLE Invoice_Items (Invoice_Item_ID NUMBER, Invoice_ID NUMBER, Order_ID NUMBER); CREATE TABLE Invoices (Invoice_ID NUMBER, Order_Item_ID NUMBER, payment_method_code TEXT, Order_ID NUMBER, Product_ID NUMBER); CREATE TABLE Bookings (Customer_ID NUMBER, Booking_ID NUMBER); CREATE TABLE Customer_Orders (Customer_ID NUMBER, Order_ID NUMBER); CREATE TABLE Customers (Customer_ID TEXT, Customer_Name TEXT);"
      },
      {
        "question": "What are their payment method codes?",
        "query": "SELECT payment_method_code FROM invoices",
        "schema": "CREATE TABLE Clients (Client_ID NUMBER, Customer_Name TEXT); CREATE TABLE Bookings (Booking_ID NUMBER, Customer_ID NUMBER); CREATE TABLE Addresses (Address_ID TEXT); CREATE TABLE Invoices (Order_Item_ID NUMBER, Order_ID NUMBER, payment_method_code TEXT, Product_ID NUMBER, Invoice_ID NUMBER); CREATE TABLE Invoice_Items (Invoice_Item_ID NUMBER, Invoice_ID NUMBER, Order_ID NUMBER); CREATE TABLE Performers (Performer_ID NUMBER); CREATE TABLE Customers (Customer_Name TEXT, Customer_ID TEXT); CREATE TABLE Customer_Orders (Customer_ID NUMBER, Order_ID NUMBER); CREATE TABLE Ref_Payment_Methods (payment_method_code TEXT);"
      },
      {
        "question": "Only show the distinct ones.",
        "query": "SELECT DISTINCT payment_method_code FROM invoices",
        "schema": "CREATE TABLE Invoices (Order_Item_ID NUMBER, payment_method_code TEXT, Order_ID NUMBER, Invoice_ID NUMBER, Product_ID NUMBER); CREATE TABLE Clients (Customer_Name TEXT, Client_ID NUMBER); CREATE TABLE Addresses (Address_ID TEXT); CREATE TABLE Customers (Customer_ID TEXT, Customer_Name TEXT); CREATE TABLE Customer_Orders (Order_ID NUMBER, Customer_ID NUMBER); CREATE TABLE Bookings (Booking_ID NUMBER, Customer_ID NUMBER); CREATE TABLE Performers (Performer_ID NUMBER); CREATE TABLE Invoice_Items (Order_ID NUMBER, Invoice_Item_ID NUMBER, Invoice_ID NUMBER); CREATE TABLE Ref_Payment_Methods (payment_method_code TEXT);"
      }
    ],
    [
      {
        "question": "What are all the marketing regions?",
        "query": "SELECT * FROM marketing_regions",
        "schema": "CREATE TABLE Drama_Workshop_Groups (Marketing_Region_Code TEXT); CREATE TABLE Marketing_Regions (Marketing_Region_Name TEXT, Marketing_Region_Code TEXT, Marketing_Region_Descriptrion TEXT); CREATE TABLE Stores (Marketing_Region_Code TEXT);"
      },
      {
        "question": "Show me the region named China.",
        "query": "SELECT * FROM marketing_regions WHERE marketing_region_name = \"China\"",
        "schema": "CREATE TABLE Stores (Marketing_Region_Code TEXT); CREATE TABLE Drama_Workshop_Groups (Marketing_Region_Code TEXT); CREATE TABLE Marketing_Regions (Marketing_Region_Descriptrion TEXT, Marketing_Region_Name TEXT, Marketing_Region_Code TEXT);"
      },
      {
        "question": "Show the description of it.",
        "query": "SELECT marketing_region_descriptrion FROM marketing_regions WHERE marketing_region_name = \"China\"",
        "schema": "CREATE TABLE Drama_Workshop_Groups (Marketing_Region_Code TEXT); CREATE TABLE Stores (Marketing_Region_Code TEXT); CREATE TABLE Products (Product_Description TEXT); CREATE TABLE Marketing_Regions (Marketing_Region_Name TEXT, Marketing_Region_Descriptrion TEXT, Marketing_Region_Code TEXT);"
      }
    ],
    [
      {
        "question": "What are all the products?",
        "query": "SELECT * FROM products",
        "schema": "CREATE TABLE Products (Product_ID TEXT, Product_Name TEXT, Product_Price NUMBER); CREATE TABLE Order_Items (Product_ID NUMBER, Order_Item_ID NUMBER); CREATE TABLE Invoice_Items (Product_ID NUMBER); CREATE TABLE Invoices (Product_ID NUMBER); CREATE TABLE Services (Product_Name TEXT);"
      },
      {
        "question": "What about those with price higher than average?",
        "query": "SELECT * FROM products WHERE product_price > (SELECT avg(product_price) FROM products)",
        "schema": "CREATE TABLE Services (Product_Name TEXT, Product_Price NUMBER); CREATE TABLE Products (Product_ID TEXT, Product_Price NUMBER, Product_Name TEXT); CREATE TABLE Invoice_Items (Product_ID NUMBER); CREATE TABLE Invoices (Product_ID NUMBER); CREATE TABLE Order_Items (Product_ID NUMBER, Order_Item_ID NUMBER);"
      },
      {
        "question": "Show their distinct names.",
        "query": "SELECT DISTINCT product_name FROM products WHERE product_price > (SELECT avg(product_price) FROM products)",
        "schema": "CREATE TABLE Invoices (Product_ID NUMBER); CREATE TABLE Services (Product_Price NUMBER, Product_Name TEXT); CREATE TABLE Order_Items (Product_ID NUMBER, Order_Item_ID NUMBER); CREATE TABLE Customers (Customer_Name TEXT); CREATE TABLE Invoice_Items (Product_ID NUMBER); CREATE TABLE Products (Product_Name TEXT, Product_Price NUMBER, Product_ID TEXT);"
      }
    ],
    [
      {
        "question": "What are all the products?",
        "query": "SELECT * FROM products",
        "schema": "CREATE TABLE Invoices (Product_ID NUMBER); CREATE TABLE Services (Product_Name TEXT); CREATE TABLE Invoice_Items (Product_ID NUMBER); CREATE TABLE Order_Items (Product_ID NUMBER); CREATE TABLE Products (Product_ID TEXT, Product_Name TEXT, Product_Price NUMBER);"
      },
      {
        "question": "which is the one with the highest price?",
        "query": "SELECT * FROM products ORDER BY product_price DESC LIMIT 1",
        "schema": "CREATE TABLE Order_Items (Product_ID NUMBER); CREATE TABLE Services (Product_Price NUMBER, Product_Name TEXT); CREATE TABLE Products (Product_Name TEXT, Product_Price NUMBER, Product_ID TEXT); CREATE TABLE Invoices (Product_ID NUMBER); CREATE TABLE Invoice_Items (Product_ID NUMBER);"
      },
      {
        "question": "Only show its name.",
        "query": "SELECT product_name FROM products ORDER BY product_price DESC LIMIT 1",
        "schema": "CREATE TABLE Order_Items (Order_Item_ID NUMBER, Product_ID NUMBER); CREATE TABLE Customer_Orders (Order_ID NUMBER); CREATE TABLE Services (Product_Price NUMBER, Product_Name TEXT); CREATE TABLE Products (Product_Price NUMBER, Product_Name TEXT, Product_ID TEXT); CREATE TABLE Invoice_Items (Product_ID NUMBER); CREATE TABLE Invoices (Product_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What are all the performers?",
        "query": "SELECT * FROM performers",
        "schema": "CREATE TABLE Performers_in_Bookings (Order_ID NUMBER, Performer_ID NUMBER); CREATE TABLE Bookings (Booking_ID NUMBER); CREATE TABLE Performers (Performer_ID NUMBER); CREATE TABLE Customers (Customer_ID TEXT);"
      },
      {
        "question": "Show the phone number of the performer whose name is Ashley.",
        "query": "SELECT customer_phone FROM performers WHERE customer_name = \"Ashley\"",
        "schema": "CREATE TABLE Bookings (Booking_ID NUMBER); CREATE TABLE Addresses (City_Town TEXT, Address_ID TEXT); CREATE TABLE Drama_Workshop_Groups (Store_Phone TEXT); CREATE TABLE Customers (Customer_Name TEXT, Customer_Phone TEXT, Address_ID NUMBER, Customer_ID TEXT); CREATE TABLE Clients (Customer_Name TEXT, Customer_Phone TEXT); CREATE TABLE Performers (Customer_Name TEXT, Customer_Phone TEXT, Customer_Email_Address TEXT, Performer_ID NUMBER, Address_ID NUMBER); CREATE TABLE Performers_in_Bookings (Performer_ID NUMBER, Order_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What are all the invoices?",
        "query": "SELECT * FROM invoices",
        "schema": "CREATE TABLE Customer_Orders (Customer_ID NUMBER); CREATE TABLE Invoice_Items (Invoice_Item_ID NUMBER, Invoice_ID NUMBER, Order_ID NUMBER); CREATE TABLE Addresses (Address_ID TEXT); CREATE TABLE Performers (Performer_ID NUMBER); CREATE TABLE Invoices (Invoice_ID NUMBER, Product_ID NUMBER, payment_method_code TEXT, Order_ID NUMBER, Order_Item_ID NUMBER); CREATE TABLE Clients (Client_ID NUMBER, Customer_Name TEXT); CREATE TABLE Bookings (Customer_ID NUMBER, Booking_ID NUMBER); CREATE TABLE Customers (Customer_ID TEXT, Customer_Name TEXT);"
      },
      {
        "question": "Show all kinds of payment method codes among them.",
        "query": "SELECT payment_method_code FROM invoices GROUP BY payment_method_code",
        "schema": "CREATE TABLE Addresses (Address_ID TEXT); CREATE TABLE Clients (Client_ID NUMBER, Customer_Name TEXT); CREATE TABLE Invoices (Invoice_ID NUMBER, Order_Item_ID NUMBER, Order_ID NUMBER, payment_method_code TEXT, Product_ID NUMBER); CREATE TABLE Customers (Customer_ID TEXT, Customer_Name TEXT); CREATE TABLE Invoice_Items (Order_ID NUMBER, Invoice_Item_ID NUMBER, Invoice_ID NUMBER); CREATE TABLE Customer_Orders (Customer_ID NUMBER); CREATE TABLE Performers (Performer_ID NUMBER); CREATE TABLE Ref_Payment_Methods (payment_method_code TEXT); CREATE TABLE Bookings (Customer_ID NUMBER, Booking_ID NUMBER);"
      },
      {
        "question": "How many orders are there for each of them?",
        "query": "SELECT payment_method_code , count(*) FROM invoices GROUP BY payment_method_code",
        "schema": "CREATE TABLE Invoice_Items (Order_ID NUMBER, Order_Item_ID NUMBER, Invoice_Item_ID NUMBER, Invoice_ID NUMBER); CREATE TABLE Bookings (Customer_ID NUMBER, Booking_ID NUMBER); CREATE TABLE Addresses (Address_ID TEXT); CREATE TABLE Performers (Performer_ID NUMBER); CREATE TABLE Customers (Customer_ID TEXT, Customer_Name TEXT); CREATE TABLE Invoices (Order_Item_ID NUMBER, Product_ID NUMBER, Invoice_ID NUMBER, Order_ID NUMBER, payment_method_code TEXT); CREATE TABLE Clients (Client_ID NUMBER, Customer_Name TEXT); CREATE TABLE Ref_Payment_Methods (payment_method_code TEXT); CREATE TABLE Customer_Orders (Order_ID NUMBER, Customer_ID NUMBER); CREATE TABLE Order_Items (Order_Item_ID NUMBER, Order_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What are all the invoices?",
        "query": "SELECT * FROM invoices",
        "schema": "CREATE TABLE Invoices (payment_method_code TEXT, Order_ID NUMBER, Invoice_ID NUMBER, Product_ID NUMBER, Order_Item_ID NUMBER); CREATE TABLE Customer_Orders (Customer_ID NUMBER); CREATE TABLE Customers (Customer_ID TEXT, Customer_Name TEXT); CREATE TABLE Invoice_Items (Invoice_Item_ID NUMBER, Invoice_ID NUMBER, Order_ID NUMBER); CREATE TABLE Bookings (Customer_ID NUMBER, Booking_ID NUMBER); CREATE TABLE Performers (Performer_ID NUMBER); CREATE TABLE Ref_Payment_Methods (payment_method_code TEXT); CREATE TABLE Addresses (Address_ID TEXT); CREATE TABLE Clients (Customer_Name TEXT, Client_ID NUMBER);"
      },
      {
        "question": "Show all kinds of payment method codes among them.",
        "query": "SELECT payment_method_code FROM invoices GROUP BY payment_method_code",
        "schema": "CREATE TABLE Clients (Customer_Name TEXT, Client_ID NUMBER); CREATE TABLE Customer_Orders (Customer_ID NUMBER); CREATE TABLE Invoices (Order_Item_ID NUMBER, Order_ID NUMBER, Product_ID NUMBER, payment_method_code TEXT, Invoice_ID NUMBER); CREATE TABLE Bookings (Booking_ID NUMBER, Customer_ID NUMBER); CREATE TABLE Ref_Payment_Methods (payment_method_code TEXT); CREATE TABLE Customers (Customer_Name TEXT, Customer_ID TEXT); CREATE TABLE Addresses (Address_ID TEXT); CREATE TABLE Performers (Performer_ID NUMBER); CREATE TABLE Invoice_Items (Invoice_ID NUMBER, Order_ID NUMBER, Invoice_Item_ID NUMBER);"
      },
      {
        "question": "Which one is used by most orders?",
        "query": "SELECT payment_method_code FROM invoices GROUP BY payment_method_code ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Addresses (Address_ID TEXT); CREATE TABLE Customers (Customer_Name TEXT, Customer_ID TEXT); CREATE TABLE Ref_Payment_Methods (payment_method_code TEXT); CREATE TABLE Invoice_Items (Invoice_ID NUMBER, Invoice_Item_ID NUMBER, Order_ID NUMBER); CREATE TABLE Invoices (Product_ID NUMBER, Invoice_ID NUMBER, Order_ID NUMBER, Order_Item_ID NUMBER, payment_method_code TEXT); CREATE TABLE Order_Items (Order_ID NUMBER, Order_Item_ID NUMBER); CREATE TABLE Performers (Performer_ID NUMBER); CREATE TABLE Clients (Client_ID NUMBER, Customer_Name TEXT); CREATE TABLE Customer_Orders (Order_ID NUMBER, Customer_ID NUMBER); CREATE TABLE Bookings (Customer_ID NUMBER, Booking_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show me information about the store named \"FJA Filming\".",
        "query": "SELECT * FROM stores WHERE store_name = \"FJA Filming\"",
        "schema": "CREATE TABLE Stores (Store_ID TEXT, Store_Name TEXT); CREATE TABLE Bookings (Store_ID NUMBER); CREATE TABLE Customer_Orders (Store_ID NUMBER); CREATE TABLE Drama_Workshop_Groups (Store_Name TEXT, Store_Phone TEXT);"
      },
      {
        "question": "Which city is that store located in?",
        "query": "SELECT t1.city_town FROM addresses AS t1 JOIN stores AS t2 ON t1.address_id = t2.address_id WHERE t2.store_name = \"FJA Filming\"",
        "schema": "CREATE TABLE Customer_Orders (Store_ID NUMBER); CREATE TABLE Drama_Workshop_Groups (Store_Name TEXT, Address_ID NUMBER, Store_Phone TEXT); CREATE TABLE Performers (Address_ID NUMBER); CREATE TABLE Addresses (City_Town TEXT, Address_ID TEXT, Line_2 TEXT, Line_1 TEXT); CREATE TABLE Bookings (Store_ID NUMBER); CREATE TABLE Stores (Address_ID NUMBER, Store_ID TEXT, Store_Name TEXT);"
      }
    ],
    [
      {
        "question": "What are the stores with marketing region code \"CA\"?",
        "query": "SELECT * FROM stores WHERE marketing_region_code = \"CA\"",
        "schema": "CREATE TABLE Marketing_Regions (Marketing_Region_Name TEXT, Marketing_Region_Code TEXT, Marketing_Region_Descriptrion TEXT); CREATE TABLE Drama_Workshop_Groups (Marketing_Region_Code TEXT); CREATE TABLE Stores (Store_ID TEXT, Marketing_Region_Code TEXT, Store_Name TEXT); CREATE TABLE Bookings (Store_ID NUMBER); CREATE TABLE Customer_Orders (Store_ID NUMBER);"
      },
      {
        "question": "What are their addresses?",
        "query": "SELECT line_1, line_2 FROM stores AS t1 JOIN addresses AS t2 ON t1.address_id = t2.address_id WHERE marketing_region_code = \"CA\"",
        "schema": "CREATE TABLE Customer_Orders (Store_ID NUMBER); CREATE TABLE Addresses (Line_1 TEXT, City_Town TEXT, Address_ID TEXT, State_County TEXT, Line_2 TEXT); CREATE TABLE Drama_Workshop_Groups (Address_ID NUMBER, Marketing_Region_Code TEXT); CREATE TABLE Stores (Store_Name TEXT, Store_ID TEXT, Marketing_Region_Code TEXT, Address_ID NUMBER); CREATE TABLE Marketing_Regions (Marketing_Region_Name TEXT, Marketing_Region_Code TEXT, Marketing_Region_Descriptrion TEXT); CREATE TABLE Bookings (Store_ID NUMBER);"
      },
      {
        "question": "What are the states or counties those addresses belong to?",
        "query": "SELECT t1.state_county FROM addresses AS t1 JOIN stores AS t2 ON t1.address_id = t2.address_id WHERE t2.marketing_region_code = \"CA\"",
        "schema": "CREATE TABLE Drama_Workshop_Groups (Marketing_Region_Code TEXT, Address_ID NUMBER); CREATE TABLE Bookings (Store_ID NUMBER); CREATE TABLE Marketing_Regions (Marketing_Region_Name TEXT, Marketing_Region_Descriptrion TEXT, Marketing_Region_Code TEXT); CREATE TABLE Addresses (Address_ID TEXT, City_Town TEXT, Line_1 TEXT, State_County TEXT, Line_2 TEXT); CREATE TABLE Customer_Orders (Store_ID NUMBER); CREATE TABLE Stores (Store_Name TEXT, Address_ID NUMBER, Marketing_Region_Code TEXT, Store_ID TEXT);"
      }
    ],
    [
      {
        "question": "Show me information about the store named Rob Dinning?",
        "query": "SELECT * FROM stores WHERE store_name = \"Rob Dinning\"",
        "schema": "CREATE TABLE Clients (Client_ID NUMBER, Customer_Name TEXT); CREATE TABLE Bookings (Store_ID NUMBER); CREATE TABLE Drama_Workshop_Groups (Store_Phone TEXT, Store_Name TEXT, Store_Email_Address TEXT); CREATE TABLE Stores (Store_ID TEXT, Store_Name TEXT); CREATE TABLE Performers (Customer_Name TEXT); CREATE TABLE Customers (Customer_Name TEXT, Customer_ID TEXT); CREATE TABLE Customer_Orders (Store_ID NUMBER, Customer_ID NUMBER);"
      },
      {
        "question": "What is the name of its marketing region?",
        "query": "SELECT t1.marketing_region_name FROM marketing_regions AS t1 JOIN stores AS t2 ON t1.marketing_region_code = t2.marketing_region_code WHERE t2.store_name = \"Rob Dinning\"",
        "schema": "CREATE TABLE Marketing_Regions (Marketing_Region_Name TEXT, Marketing_Region_Code TEXT, Marketing_Region_Descriptrion TEXT); CREATE TABLE Stores (Marketing_Region_Code TEXT, Store_Name TEXT, Store_ID TEXT); CREATE TABLE Performers (Customer_Name TEXT); CREATE TABLE Customers (Customer_ID TEXT, Customer_Name TEXT); CREATE TABLE Drama_Workshop_Groups (Store_Phone TEXT, Store_Email_Address TEXT, Marketing_Region_Code TEXT, Store_Name TEXT); CREATE TABLE Bookings (Store_ID NUMBER); CREATE TABLE Clients (Client_ID NUMBER, Customer_Name TEXT); CREATE TABLE Customer_Orders (Store_ID NUMBER, Customer_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What are the services with product price above 100?",
        "query": "SELECT * FROM services WHERE product_price > 100",
        "schema": "CREATE TABLE Customer_Orders (Customer_ID NUMBER); CREATE TABLE Bookings_Services (Product_ID NUMBER); CREATE TABLE Ref_Service_Types (Service_Type_Code TEXT); CREATE TABLE Bookings (Booking_ID NUMBER); CREATE TABLE Customers (Customer_ID TEXT); CREATE TABLE Products (Product_Name TEXT, Other_Product_Service_Details TEXT, Product_Price NUMBER, Product_ID TEXT); CREATE TABLE Invoice_Items (Product_ID NUMBER); CREATE TABLE Invoices (Product_ID NUMBER); CREATE TABLE Services (Service_Type_Code TEXT, Product_Price NUMBER, Service_ID NUMBER, Other_Product_Service_Details TEXT, Product_Name TEXT, Product_Description TEXT);"
      },
      {
        "question": "What are the descriptions of the service types of them?",
        "query": "SELECT t1.service_type_description FROM ref_service_types AS t1 JOIN services AS t2 ON t1.service_type_code = t2.service_type_code WHERE t2.product_price > 100",
        "schema": "CREATE TABLE Products (Product_Name TEXT, Product_Description TEXT, Product_ID TEXT, Product_Price NUMBER, Other_Product_Service_Details TEXT); CREATE TABLE Ref_Service_Types (Service_Type_Code TEXT, Parent_Service_Type_Code TEXT, Service_Type_Description TEXT); CREATE TABLE Invoices (Product_ID NUMBER); CREATE TABLE Services (Service_Type_Code TEXT, Other_Product_Service_Details TEXT, Product_Name TEXT, Service_ID NUMBER, Product_Price NUMBER, Product_Description TEXT); CREATE TABLE Customers (Customer_ID TEXT); CREATE TABLE Bookings_Services (Product_ID NUMBER); CREATE TABLE Bookings (Booking_ID NUMBER); CREATE TABLE Invoice_Items (Product_ID NUMBER); CREATE TABLE Customer_Orders (Customer_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What are all the service types?",
        "query": "SELECT * FROM ref_service_types",
        "schema": "CREATE TABLE Ref_Service_Types (Service_Type_Description TEXT, Service_Type_Code TEXT, Parent_Service_Type_Code TEXT); CREATE TABLE Services (Service_ID NUMBER, Service_Type_Code TEXT);"
      },
      {
        "question": "For each of them, what is the description, code and the corresponding count of service?",
        "query": "SELECT t1.service_type_description , t2.service_type_code , count(*) FROM ref_service_types AS t1 JOIN services AS t2 ON t1.service_type_code = t2.service_type_code GROUP BY t2.service_type_code",
        "schema": "CREATE TABLE Products (Product_Description TEXT); CREATE TABLE Ref_Service_Types (Service_Type_Code TEXT, Service_Type_Description TEXT, Parent_Service_Type_Code TEXT); CREATE TABLE Services (Product_Description TEXT, Service_ID NUMBER, Service_Type_Code TEXT);"
      }
    ],
    [
      {
        "question": "What are all the service types?",
        "query": "SELECT * FROM ref_service_types",
        "schema": "CREATE TABLE Services (Service_ID NUMBER, Service_Type_Code TEXT); CREATE TABLE Ref_Service_Types (Service_Type_Code TEXT, Service_Type_Description TEXT, Parent_Service_Type_Code TEXT);"
      },
      {
        "question": "How many times has each of them being performed?",
        "query": "SELECT t1.service_type_description , t1.service_type_code, count(*) FROM ref_service_types AS t1 JOIN services AS t2 ON t1.service_type_code = t2.service_type_code GROUP BY t1.service_type_code",
        "schema": "CREATE TABLE Services (Service_ID NUMBER, Service_Type_Code TEXT); CREATE TABLE Customers (Customer_ID TEXT); CREATE TABLE Ref_Service_Types (Parent_Service_Type_Code TEXT, Service_Type_Description TEXT, Service_Type_Code TEXT); CREATE TABLE Bookings (Customer_ID NUMBER, Order_Date TIME, Booking_ID NUMBER); CREATE TABLE Clients (Client_ID NUMBER); CREATE TABLE Performers (Performer_ID NUMBER);"
      },
      {
        "question": "Show the description and code of the one that is performed the most often.",
        "query": "SELECT t1.service_type_description , t1.service_type_code FROM ref_service_types AS t1 JOIN services AS t2 ON t1.service_type_code = t2.service_type_code GROUP BY t1.service_type_code ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Customers (Customer_ID TEXT); CREATE TABLE Performers (Performer_ID NUMBER); CREATE TABLE Bookings (Customer_ID NUMBER, Booking_ID NUMBER, Order_Date TIME); CREATE TABLE Ref_Service_Types (Service_Type_Code TEXT, Parent_Service_Type_Code TEXT, Service_Type_Description TEXT); CREATE TABLE Services (Service_Type_Code TEXT, Product_Description TEXT, Service_ID NUMBER); CREATE TABLE Clients (Client_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What are all the workshop groups?",
        "query": "SELECT * FROM drama_workshop_groups",
        "schema": "CREATE TABLE Customers (Customer_ID TEXT); CREATE TABLE Bookings (Workshop_Group_ID TEXT, Booking_ID NUMBER); CREATE TABLE Addresses (Address_ID TEXT); CREATE TABLE Drama_Workshop_Groups (Store_Phone TEXT, Address_ID NUMBER, Other_Details TEXT, Marketing_Region_Code TEXT, Workshop_Group_ID NUMBER, Currency_Code TEXT, Store_Email_Address TEXT, Store_Name TEXT); CREATE TABLE Performers (Performer_ID NUMBER); CREATE TABLE Services (Workshop_Group_ID NUMBER);"
      },
      {
        "question": "What about those that services are performed?",
        "query": "SELECT * FROM drama_workshop_groups AS t1 JOIN services AS t2 ON t1.workshop_group_id = t2.workshop_group_id",
        "schema": "CREATE TABLE Bookings (Workshop_Group_ID TEXT, Booking_ID NUMBER); CREATE TABLE Customers (Customer_ID TEXT); CREATE TABLE Addresses (Address_ID TEXT); CREATE TABLE Clients (Client_ID NUMBER); CREATE TABLE Performers (Performer_ID NUMBER); CREATE TABLE Bookings_Services (Product_ID NUMBER, Order_ID NUMBER); CREATE TABLE Drama_Workshop_Groups (Store_Name TEXT, Currency_Code TEXT, Address_ID NUMBER, Workshop_Group_ID NUMBER, Store_Email_Address TEXT, Marketing_Region_Code TEXT, Store_Phone TEXT, Other_Details TEXT); CREATE TABLE Services (Service_ID NUMBER, Workshop_Group_ID NUMBER, Service_Type_Code TEXT);"
      },
      {
        "question": "Show their phones and emails.",
        "query": "SELECT t1.store_phone , t1.store_email_address FROM drama_workshop_groups AS t1 JOIN services AS t2 ON t1.workshop_group_id = t2.workshop_group_id",
        "schema": "CREATE TABLE Customers (Customer_Phone TEXT, Customer_ID TEXT, Customer_Email_Address TEXT); CREATE TABLE Performers (Customer_Phone TEXT, Customer_Email_Address TEXT, Performer_ID NUMBER); CREATE TABLE Clients (Client_ID NUMBER, Customer_Email_Address TEXT, Customer_Phone TEXT); CREATE TABLE Bookings_Services (Order_ID NUMBER, Product_ID NUMBER); CREATE TABLE Bookings (Booking_ID NUMBER, Workshop_Group_ID TEXT); CREATE TABLE Services (Service_Type_Code TEXT, Service_ID NUMBER, Workshop_Group_ID NUMBER); CREATE TABLE Drama_Workshop_Groups (Currency_Code TEXT, Other_Details TEXT, Workshop_Group_ID NUMBER, Marketing_Region_Code TEXT, Store_Name TEXT, Address_ID NUMBER, Store_Email_Address TEXT, Store_Phone TEXT); CREATE TABLE Addresses (Address_ID TEXT);"
      }
    ],
    [
      {
        "question": "What are all the services with product name \"film\"?",
        "query": "SELECT * FROM services WHERE product_name = \"film\"",
        "schema": "CREATE TABLE Bookings_Services (Product_ID NUMBER); CREATE TABLE Invoice_Items (Product_ID NUMBER); CREATE TABLE Services (Service_ID NUMBER, Product_Price NUMBER, Service_Type_Code TEXT, Product_Name TEXT, Other_Product_Service_Details TEXT, Product_Description TEXT); CREATE TABLE Products (Product_Name TEXT, Other_Product_Service_Details TEXT, Product_ID TEXT); CREATE TABLE Order_Items (Product_ID NUMBER); CREATE TABLE Ref_Service_Types (Service_Type_Code TEXT); CREATE TABLE Invoices (Product_ID NUMBER); CREATE TABLE Clients (Customer_Name TEXT);"
      },
      {
        "question": "What are the names of workshop groups in which they are performed?",
        "query": "SELECT t1.store_phone , t1.store_email_address FROM drama_workshop_groups AS t1 JOIN services AS t2 ON t1.workshop_group_id = t2.workshop_group_id WHERE t2.product_name = \"film\"",
        "schema": "CREATE TABLE Bookings (Booking_ID NUMBER, Workshop_Group_ID TEXT); CREATE TABLE Invoices (Product_ID NUMBER); CREATE TABLE Bookings_Services (Product_ID NUMBER); CREATE TABLE Ref_Service_Types (Service_Type_Code TEXT); CREATE TABLE Performers (Performer_ID NUMBER); CREATE TABLE Services (Product_Description TEXT, Product_Name TEXT, Product_Price NUMBER, Service_Type_Code TEXT, Other_Product_Service_Details TEXT, Service_ID NUMBER, Workshop_Group_ID NUMBER); CREATE TABLE Drama_Workshop_Groups (Currency_Code TEXT, Workshop_Group_ID NUMBER, Store_Phone TEXT, Address_ID NUMBER, Store_Name TEXT, Store_Email_Address TEXT, Other_Details TEXT, Marketing_Region_Code TEXT); CREATE TABLE Clients (Customer_Name TEXT); CREATE TABLE Order_Items (Product_ID NUMBER); CREATE TABLE Products (Product_ID TEXT, Other_Product_Service_Details TEXT, Product_Name TEXT); CREATE TABLE Invoice_Items (Product_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What are all the products?",
        "query": "SELECT * FROM products",
        "schema": "CREATE TABLE Order_Items (Product_ID NUMBER); CREATE TABLE Invoice_Items (Product_ID NUMBER); CREATE TABLE Invoices (Product_ID NUMBER); CREATE TABLE Services (Product_Name TEXT); CREATE TABLE Products (Product_Name TEXT, Product_Price NUMBER, Product_ID TEXT);"
      },
      {
        "question": "Show all product names.",
        "query": "SELECT product_name FROM products GROUP BY product_name",
        "schema": "CREATE TABLE Invoices (Product_ID NUMBER); CREATE TABLE Invoice_Items (Product_ID NUMBER); CREATE TABLE Services (Product_Name TEXT); CREATE TABLE Products (Product_Name TEXT, Product_Price NUMBER, Product_ID TEXT); CREATE TABLE Order_Items (Product_ID NUMBER);"
      },
      {
        "question": "Show the average price for each name.",
        "query": "SELECT product_name , avg(product_price) FROM products GROUP BY product_name",
        "schema": "CREATE TABLE Products (Product_ID TEXT, Product_Price NUMBER, Product_Name TEXT); CREATE TABLE Invoice_Items (Product_ID NUMBER); CREATE TABLE Services (Product_Name TEXT, Product_Price NUMBER); CREATE TABLE Invoices (Product_ID NUMBER); CREATE TABLE Order_Items (Product_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What are the names for all products?",
        "query": "SELECT product_name FROM products GROUP BY product_name",
        "schema": "CREATE TABLE Products (Product_ID TEXT, Product_Name TEXT); CREATE TABLE Services (Product_Name TEXT); CREATE TABLE Customers (Customer_Name TEXT);"
      },
      {
        "question": "Show the one that has average price smaller than 1000000.",
        "query": "SELECT product_name FROM products GROUP BY product_name HAVING avg(product_price) < 1000000",
        "schema": "CREATE TABLE Services (Product_Price NUMBER, Product_Name TEXT); CREATE TABLE Customers (Customer_Name TEXT); CREATE TABLE Products (Product_Name TEXT, Product_ID TEXT, Product_Price NUMBER);"
      }
    ],
    [
      {
        "question": "What are all the photo products?",
        "query": "SELECT * FROM products WHERE product_name = \"photo\"",
        "schema": "CREATE TABLE Order_Items (Product_ID NUMBER); CREATE TABLE Products (Product_ID TEXT, Product_Name TEXT); CREATE TABLE Invoices (Product_ID NUMBER);"
      },
      {
        "question": "What are the total order quantities of them?",
        "query": "SELECT sum(t1.order_quantity) FROM order_items AS t1 JOIN products AS t2 ON t1.product_id = t2.product_id WHERE t2.product_name = \"photo\"",
        "schema": "CREATE TABLE Invoices (Order_Quantity TEXT, Product_ID NUMBER, Order_Item_ID NUMBER, Order_ID NUMBER); CREATE TABLE Order_Items (Order_ID NUMBER, Product_ID NUMBER, Order_Item_ID NUMBER, Order_Quantity TEXT); CREATE TABLE Products (Product_ID TEXT, Product_Name TEXT); CREATE TABLE Customer_Orders (Order_ID NUMBER); CREATE TABLE Invoice_Items (Order_Quantity NUMBER, Order_Item_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What are all the products with price higher than 2000?",
        "query": "SELECT * FROM products WHERE product_price > 2000",
        "schema": "CREATE TABLE Services (Product_Price NUMBER); CREATE TABLE Products (Product_ID TEXT, Product_Name TEXT, Product_Price NUMBER); CREATE TABLE Performers (Performer_ID NUMBER); CREATE TABLE Invoices (Product_ID NUMBER);"
      },
      {
        "question": "What are the order details of them?",
        "query": "SELECT t1.other_item_details FROM order_items AS t1 JOIN products AS t2 ON t1.product_id = t2.product_id WHERE t2.product_price > 2000",
        "schema": "CREATE TABLE Products (Product_ID TEXT, Product_Price NUMBER, Product_Name TEXT); CREATE TABLE Bookings (Other_Order_Details TEXT, Booking_ID NUMBER); CREATE TABLE Performers (Performer_ID NUMBER); CREATE TABLE Services (Product_Price NUMBER); CREATE TABLE Invoice_Items (Order_ID NUMBER, Order_Quantity NUMBER, Order_Item_ID NUMBER); CREATE TABLE Customer_Orders (Order_ID NUMBER, Other_Order_Details TEXT); CREATE TABLE Order_Items (Other_Item_Details TEXT, Product_ID NUMBER, Order_ID NUMBER, Order_Item_ID NUMBER); CREATE TABLE Invoices (Product_ID NUMBER, Order_ID NUMBER, Order_Item_ID NUMBER); CREATE TABLE Bookings_Services (Order_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What are the orders with quantity 1?",
        "query": "SELECT * FROM order_items WHERE order_quantity = 1",
        "schema": "CREATE TABLE Invoices (Order_Item_ID NUMBER, Order_Quantity TEXT, Order_ID NUMBER); CREATE TABLE Invoice_Items (Order_ID NUMBER, Order_Item_ID NUMBER, Order_Quantity NUMBER); CREATE TABLE Customers (Customer_ID TEXT); CREATE TABLE Bookings_Services (Order_ID NUMBER); CREATE TABLE Order_Items (Product_ID NUMBER, Order_Quantity TEXT, Order_ID NUMBER, Order_Item_ID NUMBER); CREATE TABLE Clients (Client_ID NUMBER); CREATE TABLE Performers (Performer_ID NUMBER); CREATE TABLE Customer_Orders (Order_ID NUMBER, Customer_ID NUMBER); CREATE TABLE Bookings (Booking_ID NUMBER);"
      },
      {
        "question": "Show the actual delivery dates of them.",
        "query": "SELECT t1.actual_delivery_date FROM customer_orders AS t1 JOIN order_items AS t2 ON t1.order_id = t2.order_id WHERE t2.order_quantity = 1",
        "schema": "CREATE TABLE Products (Product_ID TEXT, Product_Name TEXT); CREATE TABLE Bookings_Services (Order_ID NUMBER); CREATE TABLE Customers (Customer_ID TEXT); CREATE TABLE Bookings (Booking_ID NUMBER, Order_Date TIME, Planned_Delivery_Date TIME, Actual_Delivery_Date TIME); CREATE TABLE Customer_Orders (Planned_Delivery_Date TIME, Customer_ID NUMBER, Actual_Delivery_Date TIME, Order_Date TIME, Order_ID NUMBER); CREATE TABLE Performers (Performer_ID NUMBER); CREATE TABLE Invoice_Items (Order_Quantity NUMBER, Order_ID NUMBER, Order_Item_ID NUMBER); CREATE TABLE Invoices (Order_ID NUMBER, Order_Item_ID NUMBER, Order_Quantity TEXT); CREATE TABLE Clients (Client_ID NUMBER); CREATE TABLE Order_Items (Order_Item_ID NUMBER, Order_Quantity TEXT, Order_ID NUMBER, Product_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What are the products with price higher than 1000?",
        "query": "SELECT * FROM products WHERE product_price > 1000",
        "schema": "CREATE TABLE Products (Product_ID TEXT, Product_Price NUMBER, Product_Name TEXT); CREATE TABLE Customers (Customer_ID TEXT); CREATE TABLE Services (Product_Price NUMBER); CREATE TABLE Performers (Performer_ID NUMBER); CREATE TABLE Invoices (Product_ID NUMBER);"
      },
      {
        "question": "What are their order dates?",
        "query": "SELECT t1.order_date FROM customer_orders AS t1 JOIN order_items AS t2 ON t1.order_id = t2.order_id JOIN products AS t3 ON t2.product_id = t3.product_id WHERE t3.product_price > 1000",
        "schema": "CREATE TABLE Performers (Performer_ID NUMBER); CREATE TABLE Invoice_Items (Order_Item_ID NUMBER, Order_ID NUMBER); CREATE TABLE Services (Product_Price NUMBER); CREATE TABLE Bookings (Order_Date TIME, Booking_ID NUMBER); CREATE TABLE Order_Items (Order_Item_ID NUMBER, Order_Quantity TEXT, Order_ID NUMBER, Product_ID NUMBER); CREATE TABLE Customers (Customer_ID TEXT); CREATE TABLE Customer_Orders (Actual_Delivery_Date TIME, Order_Date TIME, Order_ID NUMBER, Planned_Delivery_Date TIME); CREATE TABLE Products (Product_ID TEXT, Product_Price NUMBER, Product_Name TEXT); CREATE TABLE Invoices (Order_ID NUMBER, Order_Item_ID NUMBER, Product_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What are the currency codes for all drama workshop groups?",
        "query": "SELECT currency_code FROM drama_workshop_groups",
        "schema": "CREATE TABLE Performers (Performer_ID NUMBER); CREATE TABLE Drama_Workshop_Groups (Store_Name TEXT, Store_Phone TEXT, Currency_Code TEXT, Marketing_Region_Code TEXT, Address_ID NUMBER, Workshop_Group_ID NUMBER, Store_Email_Address TEXT); CREATE TABLE Bookings (Workshop_Group_ID TEXT); CREATE TABLE Services (Workshop_Group_ID NUMBER);"
      },
      {
        "question": "Only show the distinct ones.",
        "query": "SELECT DISTINCT currency_code FROM drama_workshop_groups",
        "schema": "CREATE TABLE Drama_Workshop_Groups (Store_Phone TEXT, Address_ID NUMBER, Currency_Code TEXT, Store_Email_Address TEXT, Store_Name TEXT, Workshop_Group_ID NUMBER, Marketing_Region_Code TEXT); CREATE TABLE Performers (Performer_ID NUMBER); CREATE TABLE Bookings (Workshop_Group_ID TEXT); CREATE TABLE Services (Workshop_Group_ID NUMBER);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT count(DISTINCT currency_code) FROM drama_workshop_groups",
        "schema": "CREATE TABLE Performers (Performer_ID NUMBER); CREATE TABLE Services (Workshop_Group_ID NUMBER); CREATE TABLE Bookings (Workshop_Group_ID TEXT); CREATE TABLE Drama_Workshop_Groups (Currency_Code TEXT, Store_Name TEXT, Store_Email_Address TEXT, Store_Phone TEXT, Workshop_Group_ID NUMBER, Address_ID NUMBER, Marketing_Region_Code TEXT);"
      }
    ],
    [
      {
        "question": "What are the addresses in Feliciaberg city?",
        "query": "SELECT * FROM addresses WHERE city_town = \"Feliciaberg\"",
        "schema": "CREATE TABLE Clients (Address_ID NUMBER); CREATE TABLE Drama_Workshop_Groups (Store_Name TEXT, Address_ID NUMBER); CREATE TABLE Customers (Address_ID NUMBER); CREATE TABLE Performers (Address_ID NUMBER); CREATE TABLE Addresses (Address_ID TEXT, City_Town TEXT); CREATE TABLE Stores (Store_Name TEXT, Address_ID NUMBER);"
      },
      {
        "question": "Show the drama workshop groups that are in those addresses.",
        "query": "SELECT t2.store_name FROM addresses AS t1 JOIN drama_workshop_groups AS t2 ON t1.address_id = t2.address_id WHERE t1.city_town = \"Feliciaberg\"",
        "schema": "CREATE TABLE Clients (Address_ID NUMBER); CREATE TABLE Drama_Workshop_Groups (Store_Name TEXT, Store_Phone TEXT, Other_Details TEXT, Store_Email_Address TEXT, Address_ID NUMBER, Marketing_Region_Code TEXT, Workshop_Group_ID NUMBER); CREATE TABLE Stores (Address_ID NUMBER, Store_Name TEXT); CREATE TABLE Addresses (Address_ID TEXT, City_Town TEXT); CREATE TABLE Customers (Address_ID NUMBER); CREATE TABLE Bookings (Workshop_Group_ID TEXT); CREATE TABLE Performers (Address_ID NUMBER); CREATE TABLE Services (Workshop_Group_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What are the addresses in Alaska state?",
        "query": "SELECT * FROM addresses WHERE state_county = \"Alaska\"",
        "schema": "CREATE TABLE Stores (Address_ID NUMBER); CREATE TABLE Drama_Workshop_Groups (Address_ID NUMBER); CREATE TABLE Performers (Address_ID NUMBER); CREATE TABLE Addresses (State_County TEXT, Address_ID TEXT); CREATE TABLE Customers (Address_ID NUMBER); CREATE TABLE Clients (Address_ID NUMBER);"
      },
      {
        "question": "Show the names of drama workshop groups that are using those addresses?",
        "query": "SELECT t2.store_email_address FROM addresses AS t1 JOIN drama_workshop_groups AS t2 ON t1.address_id = t2.address_id WHERE t1.state_county = \"Alaska\"",
        "schema": "CREATE TABLE Clients (Address_ID NUMBER); CREATE TABLE Stores (Address_ID NUMBER); CREATE TABLE Drama_Workshop_Groups (Workshop_Group_ID NUMBER, Store_Email_Address TEXT, Other_Details TEXT, Marketing_Region_Code TEXT, Store_Name TEXT, Address_ID NUMBER, Store_Phone TEXT); CREATE TABLE Performers (Address_ID NUMBER); CREATE TABLE Services (Workshop_Group_ID NUMBER); CREATE TABLE Bookings (Workshop_Group_ID TEXT); CREATE TABLE Customers (Address_ID NUMBER); CREATE TABLE Addresses (Address_ID TEXT, State_County TEXT, Line_2 TEXT, Line_1 TEXT);"
      }
    ],
    [
      {
        "question": "What are all the cities?",
        "query": "SELECT city_town FROM addresses GROUP BY city_town",
        "schema": "CREATE TABLE Clients (Address_ID NUMBER); CREATE TABLE Drama_Workshop_Groups (Address_ID NUMBER); CREATE TABLE Customers (Address_ID NUMBER); CREATE TABLE Addresses (Address_ID TEXT, City_Town TEXT); CREATE TABLE Stores (Address_ID NUMBER); CREATE TABLE Performers (Address_ID NUMBER);"
      },
      {
        "question": "How many drama workshop groups are in each of them?",
        "query": "SELECT t1.city_town , count(*) FROM addresses AS t1 JOIN drama_workshop_groups AS t2 ON t1.address_id = t2.address_id GROUP BY t1.city_town",
        "schema": "CREATE TABLE Stores (Address_ID NUMBER); CREATE TABLE Addresses (Address_ID TEXT, City_Town TEXT); CREATE TABLE Bookings (Workshop_Group_ID TEXT); CREATE TABLE Customers (Address_ID NUMBER); CREATE TABLE Clients (Address_ID NUMBER); CREATE TABLE Services (Workshop_Group_ID NUMBER); CREATE TABLE Performers (Address_ID NUMBER); CREATE TABLE Drama_Workshop_Groups (Workshop_Group_ID NUMBER, Store_Email_Address TEXT, Store_Name TEXT, Address_ID NUMBER, Marketing_Region_Code TEXT);"
      }
    ],
    [
      {
        "question": "What are the market region codes of all the drama workshop groups?",
        "query": "SELECT marketing_region_code FROM drama_workshop_groups GROUP BY marketing_region_code",
        "schema": "CREATE TABLE Addresses (Address_ID TEXT, City_Town TEXT); CREATE TABLE Services (Workshop_Group_ID NUMBER); CREATE TABLE Bookings (Workshop_Group_ID TEXT); CREATE TABLE Stores (Marketing_Region_Code TEXT); CREATE TABLE Drama_Workshop_Groups (Store_Email_Address TEXT, Currency_Code TEXT, Store_Phone TEXT, Address_ID NUMBER, Store_Name TEXT, Workshop_Group_ID NUMBER, Marketing_Region_Code TEXT); CREATE TABLE Marketing_Regions (Marketing_Region_Name TEXT, Marketing_Region_Descriptrion TEXT, Marketing_Region_Code TEXT);"
      },
      {
        "question": "Which one of them has the most drama workshop groups?",
        "query": "SELECT marketing_region_code FROM drama_workshop_groups GROUP BY marketing_region_code ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Drama_Workshop_Groups (Address_ID NUMBER, Marketing_Region_Code TEXT, Store_Name TEXT, Workshop_Group_ID NUMBER, Currency_Code TEXT, Store_Email_Address TEXT, Store_Phone TEXT); CREATE TABLE Stores (Marketing_Region_Code TEXT); CREATE TABLE Marketing_Regions (Marketing_Region_Code TEXT, Marketing_Region_Descriptrion TEXT, Marketing_Region_Name TEXT); CREATE TABLE Services (Workshop_Group_ID NUMBER); CREATE TABLE Bookings (Workshop_Group_ID TEXT); CREATE TABLE Addresses (Address_ID TEXT, City_Town TEXT);"
      }
    ],
    [
      {
        "question": "Show me all the cities.",
        "query": "SELECT city_town FROM addresses",
        "schema": "CREATE TABLE Clients (Address_ID NUMBER); CREATE TABLE Addresses (Line_1 TEXT, City_Town TEXT, Address_ID TEXT); CREATE TABLE Drama_Workshop_Groups (Store_Name TEXT, Address_ID NUMBER); CREATE TABLE Performers (Address_ID NUMBER, Performer_ID NUMBER); CREATE TABLE Stores (Address_ID NUMBER, Store_Name TEXT, Store_ID TEXT); CREATE TABLE Customers (Address_ID NUMBER);"
      },
      {
        "question": "Which ones of them has at least one customer?",
        "query": "SELECT t1.city_town FROM addresses AS t1 JOIN customers AS t2 ON t1.address_id = t2.address_id",
        "schema": "CREATE TABLE Customers (Customer_ID TEXT, Address_ID NUMBER); CREATE TABLE Addresses (City_Town TEXT, Line_1 TEXT, Address_ID TEXT); CREATE TABLE Performers (Performer_ID NUMBER, Address_ID NUMBER); CREATE TABLE Clients (Address_ID NUMBER); CREATE TABLE Stores (Store_Name TEXT, Address_ID NUMBER, Store_ID TEXT); CREATE TABLE Drama_Workshop_Groups (Store_Name TEXT, Address_ID NUMBER);"
      },
      {
        "question": "Among those cities, show ones that has no performer.",
        "query": "SELECT t1.city_town FROM addresses AS t1 JOIN customers AS t2 ON t1.address_id = t2.address_id EXCEPT SELECT t1.city_town FROM addresses AS t1 JOIN performers AS t2 ON t1.address_id = t2.address_id",
        "schema": "CREATE TABLE Clients (Address_ID NUMBER); CREATE TABLE Customers (Customer_ID TEXT, Address_ID NUMBER); CREATE TABLE Drama_Workshop_Groups (Address_ID NUMBER, Store_Name TEXT); CREATE TABLE Addresses (City_Town TEXT, Address_ID TEXT, Line_1 TEXT); CREATE TABLE Stores (Address_ID NUMBER, Store_ID TEXT, Store_Name TEXT); CREATE TABLE Performers (Address_ID NUMBER, Performer_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What are the status of all the bookings?",
        "query": "SELECT DISTINCT status_code FROM bookings",
        "schema": "CREATE TABLE Customer_Orders (Order_ID NUMBER); CREATE TABLE Services (Service_ID NUMBER, Workshop_Group_ID NUMBER); CREATE TABLE Bookings_Services (Order_ID NUMBER); CREATE TABLE Bookings (Booking_ID NUMBER, Status_Code TEXT, Customer_ID NUMBER); CREATE TABLE Performers (Performer_ID NUMBER); CREATE TABLE Addresses (Address_ID TEXT); CREATE TABLE Invoices (Order_ID NUMBER); CREATE TABLE Performers_in_Bookings (Performer_ID NUMBER, Order_ID NUMBER); CREATE TABLE Stores (Store_ID TEXT); CREATE TABLE Drama_Workshop_Groups (Workshop_Group_ID NUMBER); CREATE TABLE Customers (Customer_ID TEXT); CREATE TABLE Clients (Client_ID NUMBER);"
      },
      {
        "question": "Which one of them is the most frequent one?",
        "query": "SELECT status_code FROM bookings GROUP BY status_code ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Invoices (Order_ID NUMBER); CREATE TABLE Bookings (Booking_ID NUMBER, Status_Code TEXT, Customer_ID NUMBER); CREATE TABLE Clients (Client_ID NUMBER); CREATE TABLE Services (Service_ID NUMBER, Workshop_Group_ID NUMBER); CREATE TABLE Performers (Performer_ID NUMBER); CREATE TABLE Addresses (Address_ID TEXT); CREATE TABLE Stores (Store_ID TEXT); CREATE TABLE Performers_in_Bookings (Order_ID NUMBER, Performer_ID NUMBER); CREATE TABLE Drama_Workshop_Groups (Workshop_Group_ID NUMBER); CREATE TABLE Bookings_Services (Order_ID NUMBER); CREATE TABLE Customers (Customer_ID TEXT); CREATE TABLE Customer_Orders (Order_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Which bookings have status code \"stop\"?",
        "query": "SELECT * FROM bookings WHERE status_code = \"stop\"",
        "schema": "CREATE TABLE Services (Service_ID NUMBER); CREATE TABLE Drama_Workshop_Groups (Workshop_Group_ID NUMBER); CREATE TABLE Performers_in_Bookings (Order_ID NUMBER, Performer_ID NUMBER); CREATE TABLE Customers (Customer_ID TEXT); CREATE TABLE Bookings (Booking_ID NUMBER, Workshop_Group_ID TEXT, Store_ID NUMBER, Status_Code TEXT, Customer_ID NUMBER); CREATE TABLE Customer_Orders (Customer_ID NUMBER, Order_ID NUMBER); CREATE TABLE Performers (Performer_ID NUMBER); CREATE TABLE Clients (Client_ID NUMBER); CREATE TABLE Addresses (Address_ID TEXT); CREATE TABLE Bookings_Services (Product_ID NUMBER, Order_ID NUMBER);"
      },
      {
        "question": "Show the names of the workshop groups that have those bookings.",
        "query": "SELECT t2.store_name FROM bookings AS t1 JOIN drama_workshop_groups AS t2 ON t1.workshop_group_id = t2.workshop_group_id WHERE t1.status_code = \"stop\"",
        "schema": "CREATE TABLE Customers (Customer_ID TEXT); CREATE TABLE Addresses (Address_ID TEXT); CREATE TABLE Performers (Performer_ID NUMBER); CREATE TABLE Bookings_Services (Order_ID NUMBER, Product_ID NUMBER); CREATE TABLE Services (Service_ID NUMBER, Workshop_Group_ID NUMBER); CREATE TABLE Clients (Client_ID NUMBER); CREATE TABLE Customer_Orders (Order_ID NUMBER, Customer_ID NUMBER); CREATE TABLE Bookings (Store_ID NUMBER, Workshop_Group_ID TEXT, Booking_ID NUMBER, Status_Code TEXT, Customer_ID NUMBER); CREATE TABLE Performers_in_Bookings (Performer_ID NUMBER, Order_ID NUMBER); CREATE TABLE Drama_Workshop_Groups (Marketing_Region_Code TEXT, Address_ID NUMBER, Store_Name TEXT, Store_Email_Address TEXT, Store_Phone TEXT, Workshop_Group_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What are the names of all the clients?",
        "query": "SELECT customer_name FROM clients",
        "schema": "CREATE TABLE Bookings (Customer_ID NUMBER); CREATE TABLE Performers (Customer_Name TEXT); CREATE TABLE Clients (Customer_Name TEXT, Client_ID NUMBER); CREATE TABLE Customers (Customer_Name TEXT, Customer_ID TEXT);"
      },
      {
        "question": "How about those who have no booking?",
        "query": "SELECT customer_name FROM clients EXCEPT SELECT t2.customer_name FROM bookings AS t1 JOIN clients AS t2 ON t1.customer_id = t2.client_id",
        "schema": "CREATE TABLE Clients (Customer_Name TEXT, Client_ID NUMBER); CREATE TABLE Bookings (Customer_ID NUMBER, Booking_ID NUMBER); CREATE TABLE Customers (Customer_ID TEXT, Customer_Name TEXT); CREATE TABLE Performers (Customer_Name TEXT); CREATE TABLE Customer_Orders (Customer_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What are all the invoices using \"MasterCard\"?",
        "query": "SELECT * FROM invoices WHERE payment_method_code = \"MasterCard\"",
        "schema": "CREATE TABLE Customers (Customer_Name TEXT, Customer_ID TEXT); CREATE TABLE Invoices (Order_ID NUMBER, payment_method_code TEXT, Invoice_ID NUMBER, Product_ID NUMBER); CREATE TABLE Invoice_Items (Order_Item_ID NUMBER, Invoice_Item_ID NUMBER, Order_ID NUMBER, Invoice_ID NUMBER, Product_ID NUMBER); CREATE TABLE Bookings (Booking_ID NUMBER, Customer_ID NUMBER); CREATE TABLE Ref_Payment_Methods (payment_method_description TEXT, payment_method_code TEXT); CREATE TABLE Clients (Client_ID NUMBER); CREATE TABLE Products (Product_ID TEXT, Product_Name TEXT); CREATE TABLE Services (Service_ID NUMBER, Product_Name TEXT); CREATE TABLE Bookings_Services (Order_ID NUMBER, Product_ID NUMBER); CREATE TABLE Performers (Performer_ID NUMBER, Customer_Phone TEXT);"
      },
      {
        "question": "Show the average quantities of them.",
        "query": "SELECT avg(order_quantity) FROM invoices WHERE payment_method_code = \"MasterCard\"",
        "schema": "CREATE TABLE Customers (Customer_ID TEXT, Customer_Name TEXT); CREATE TABLE Invoices (Order_ID NUMBER, payment_method_code TEXT, Invoice_ID NUMBER, Product_ID NUMBER, Order_Quantity TEXT); CREATE TABLE Bookings_Services (Product_ID NUMBER, Order_ID NUMBER); CREATE TABLE Order_Items (Order_Quantity TEXT, Order_Item_ID NUMBER); CREATE TABLE Services (Service_ID NUMBER, Product_Name TEXT); CREATE TABLE Invoice_Items (Order_ID NUMBER, Order_Quantity NUMBER, Invoice_Item_ID NUMBER, Invoice_ID NUMBER, Product_ID NUMBER, Order_Item_ID NUMBER); CREATE TABLE Performers (Performer_ID NUMBER, Customer_Phone TEXT); CREATE TABLE Bookings (Customer_ID NUMBER, Booking_ID NUMBER); CREATE TABLE Ref_Payment_Methods (payment_method_description TEXT, payment_method_code TEXT); CREATE TABLE Clients (Client_ID NUMBER); CREATE TABLE Products (Product_Name TEXT, Product_ID TEXT);"
      }
    ],
    [
      {
        "question": "What are the product IDs of all the invoices?",
        "query": "SELECT product_id FROM invoices",
        "schema": "CREATE TABLE Clients (Client_ID NUMBER); CREATE TABLE Bookings (Booking_ID NUMBER); CREATE TABLE Services (Service_ID NUMBER, Product_Price NUMBER); CREATE TABLE Performers (Performer_ID NUMBER); CREATE TABLE Products (Product_ID TEXT, Product_Price NUMBER, Product_Name TEXT); CREATE TABLE Customers (Customer_ID TEXT); CREATE TABLE Invoice_Items (Product_ID NUMBER, Invoice_Item_ID NUMBER, Order_Item_ID NUMBER, Invoice_ID NUMBER, Order_ID NUMBER); CREATE TABLE Invoices (Invoice_ID NUMBER, Product_ID NUMBER, Order_Item_ID NUMBER, Order_ID NUMBER); CREATE TABLE Customer_Orders (Customer_ID NUMBER, Order_ID NUMBER); CREATE TABLE Bookings_Services (Product_ID NUMBER, Order_ID NUMBER); CREATE TABLE Order_Items (Product_ID NUMBER, Order_Item_ID NUMBER);"
      },
      {
        "question": "Show the one that has been ordered the most.",
        "query": "SELECT product_id FROM invoices GROUP BY product_id ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Customer_Orders (Order_Date TIME, Order_ID NUMBER, Customer_ID NUMBER); CREATE TABLE Bookings (Booking_ID NUMBER); CREATE TABLE Clients (Client_ID NUMBER); CREATE TABLE Invoices (Order_ID NUMBER, Order_Item_ID NUMBER, Product_ID NUMBER, Invoice_ID NUMBER, Order_Quantity TEXT); CREATE TABLE Services (Service_ID NUMBER, Product_Price NUMBER); CREATE TABLE Performers (Performer_ID NUMBER); CREATE TABLE Customers (Customer_ID TEXT); CREATE TABLE Products (Product_ID TEXT, Product_Price NUMBER, Product_Name TEXT); CREATE TABLE Order_Items (Order_ID NUMBER, Order_Item_ID NUMBER, Order_Quantity TEXT, Product_ID NUMBER); CREATE TABLE Invoice_Items (Invoice_Item_ID NUMBER, Order_Item_ID NUMBER, Product_ID NUMBER, Order_Quantity NUMBER, Invoice_ID NUMBER, Order_ID NUMBER); CREATE TABLE Bookings_Services (Order_ID NUMBER, Product_ID NUMBER);"
      }
    ]
  ],
  "cre_Theme_park": [
    [
      {
        "question": "How many hotels have 5 star ratings?",
        "query": "SELECT count(*) FROM hotels WHERE star_rating_code = \"5\"",
        "schema": "CREATE TABLE Ref_Hotel_Star_Ratings (star_rating_code TEXT, star_rating_description TEXT); CREATE TABLE Tourist_Attractions (Tourist_Attraction_ID NUMBER, Name TEXT); CREATE TABLE Hotels (star_rating_code TEXT, hotel_id NUMBER, price_range NUMBER);"
      },
      {
        "question": "Among the results, how many are hotels that allow pets?",
        "query": "SELECT count(*) FROM hotels WHERE star_rating_code = \"5\" AND pets_allowed_yn = 1",
        "schema": "CREATE TABLE Ref_Hotel_Star_Ratings (star_rating_description TEXT, star_rating_code TEXT); CREATE TABLE Hotels (hotel_id NUMBER, price_range NUMBER, star_rating_code TEXT, pets_allowed_yn TEXT); CREATE TABLE Tourist_Attractions (Name TEXT, Tourist_Attraction_ID NUMBER);"
      },
      {
        "question": "What one has the highest price range?",
        "query": "SELECT hotel_id FROM hotels WHERE star_rating_code = \"5\" AND pets_allowed_yn = 1 ORDER BY price_range DESC LIMIT 1",
        "schema": "CREATE TABLE Tourist_Attractions (Tourist_Attraction_ID NUMBER, Name TEXT); CREATE TABLE Hotels (pets_allowed_yn TEXT, hotel_id NUMBER, star_rating_code TEXT, price_range NUMBER); CREATE TABLE Ref_Hotel_Star_Ratings (star_rating_description TEXT, star_rating_code TEXT);"
      },
      {
        "question": "Please show the average price range of these hotels.",
        "query": "SELECT avg(price_range) FROM hotels WHERE star_rating_code = \"5\" AND pets_allowed_yn = 1",
        "schema": "CREATE TABLE Tourist_Attractions (Tourist_Attraction_ID NUMBER, Name TEXT); CREATE TABLE Ref_Hotel_Star_Ratings (star_rating_description TEXT, star_rating_code TEXT); CREATE TABLE Hotels (pets_allowed_yn TEXT, price_range NUMBER, star_rating_code TEXT, hotel_id NUMBER);"
      }
    ],
    [
      {
        "question": "Please show the location names.",
        "query": "SELECT location_name FROM locations",
        "schema": "CREATE TABLE Tourist_Attractions (How_to_Get_There TEXT, Name TEXT, Tourist_Attraction_ID NUMBER, Location_ID NUMBER); CREATE TABLE Locations (Address TEXT, Location_Name TEXT, Location_ID NUMBER); CREATE TABLE Street_Markets (Market_ID NUMBER);"
      },
      {
        "question": "Which one contains the word \"UK\"?",
        "query": "SELECT location_name FROM locations WHERE location_name LIKE \"%UK%\"",
        "schema": "CREATE TABLE Street_Markets (Market_ID NUMBER); CREATE TABLE Locations (Location_Name TEXT, Location_ID NUMBER, Address TEXT); CREATE TABLE Tourist_Attractions (How_to_Get_There TEXT, Name TEXT, Location_ID NUMBER, Tourist_Attraction_ID NUMBER);"
      },
      {
        "question": "Then, which one contains the word \"film\"?",
        "query": "SELECT location_name FROM locations WHERE location_name LIKE \"%film%\"",
        "schema": "CREATE TABLE Tourist_Attractions (How_to_Get_There TEXT, Location_ID NUMBER, Tourist_Attraction_ID NUMBER, Name TEXT); CREATE TABLE Locations (Address TEXT, Location_Name TEXT, Location_ID NUMBER); CREATE TABLE Street_Markets (Market_ID NUMBER);"
      }
    ],
    [
      {
        "question": "How many tourist attractions are there?",
        "query": "SELECT count(*) FROM tourist_attractions",
        "schema": "CREATE TABLE Visits (Tourist_Attraction_ID NUMBER); CREATE TABLE Ref_Attraction_Types (Attraction_Type_Code TEXT); CREATE TABLE Tourist_Attractions (Attraction_Type_Code TEXT, Name TEXT, Other_Details TEXT, How_to_Get_There TEXT, Description TEXT, Opening_Hours TEXT, Tourist_Attraction_ID NUMBER, Location_ID NUMBER); CREATE TABLE Theme_Parks (Theme_Park_ID NUMBER); CREATE TABLE Photos (Tourist_Attraction_ID NUMBER); CREATE TABLE Tourist_Attraction_Features (Tourist_Attraction_ID NUMBER); CREATE TABLE Staff (Tourist_Attraction_ID NUMBER);"
      },
      {
        "question": "How many of them could be accessed by bus or walking?",
        "query": "SELECT count(*) FROM tourist_attractions WHERE how_to_get_there = \"bus\" OR how_to_get_there = \"walk\"",
        "schema": "CREATE TABLE Visits (Tourist_Attraction_ID NUMBER); CREATE TABLE Locations (Location_ID NUMBER); CREATE TABLE Ref_Attraction_Types (Attraction_Type_Code TEXT); CREATE TABLE Tourist_Attractions (How_to_Get_There TEXT, Tourist_Attraction_ID NUMBER, Name TEXT, Other_Details TEXT, Description TEXT, Location_ID NUMBER, Attraction_Type_Code TEXT, Opening_Hours TEXT); CREATE TABLE Theme_Parks (Theme_Park_ID NUMBER); CREATE TABLE Tourist_Attraction_Features (Tourist_Attraction_ID NUMBER); CREATE TABLE Staff (Tourist_Attraction_ID NUMBER); CREATE TABLE Photos (Tourist_Attraction_ID NUMBER);"
      },
      {
        "question": "Please show their names and opening hours.",
        "query": "SELECT name , opening_hours FROM tourist_attractions WHERE how_to_get_there = \"bus\" OR how_to_get_there = \"walk\"",
        "schema": "CREATE TABLE Staff (Tourist_Attraction_ID NUMBER); CREATE TABLE Tourist_Attractions (Other_Details TEXT, Description TEXT, Attraction_Type_Code TEXT, Opening_Hours TEXT, Tourist_Attraction_ID NUMBER, Location_ID NUMBER, Name TEXT, How_to_Get_There TEXT); CREATE TABLE Visits (Tourist_Attraction_ID NUMBER); CREATE TABLE Photos (Tourist_Attraction_ID NUMBER); CREATE TABLE Ref_Attraction_Types (Attraction_Type_Code TEXT); CREATE TABLE Theme_Parks (Theme_Park_ID NUMBER); CREATE TABLE Locations (Location_ID NUMBER); CREATE TABLE Tourist_Attraction_Features (Tourist_Attraction_ID NUMBER);"
      }
    ],
    [
      {
        "question": "How many hotels are there?",
        "query": "SELECT count(*) FROM hotels",
        "schema": "CREATE TABLE Visits (Tourist_ID NUMBER, Tourist_Attraction_ID NUMBER); CREATE TABLE Tourist_Attractions (Tourist_Attraction_ID NUMBER, Name TEXT); CREATE TABLE Visitors (Tourist_ID NUMBER); CREATE TABLE Hotels (other_hotel_details TEXT, hotel_id NUMBER);"
      },
      {
        "question": "What is the average price range of these hotels?",
        "query": "SELECT avg(price_range) FROM hotels",
        "schema": "CREATE TABLE Visits (Tourist_Attraction_ID NUMBER, Tourist_ID NUMBER); CREATE TABLE Visitors (Tourist_ID NUMBER); CREATE TABLE Tourist_Attractions (Name TEXT, Tourist_Attraction_ID NUMBER); CREATE TABLE Hotels (hotel_id NUMBER, other_hotel_details TEXT, price_range NUMBER);"
      },
      {
        "question": "How many of hotels have a price above 10000?",
        "query": "SELECT count(*) FROM hotels WHERE price_range > 10000",
        "schema": "CREATE TABLE Hotels (hotel_id NUMBER, other_hotel_details TEXT, price_range NUMBER); CREATE TABLE Visitors (Tourist_ID NUMBER); CREATE TABLE Visits (Tourist_Attraction_ID NUMBER, Tourist_ID NUMBER); CREATE TABLE Tourist_Attractions (Name TEXT, Tourist_Attraction_ID NUMBER);"
      },
      {
        "question": "Please show the star rating descriptions of these hotels.",
        "query": "SELECT t2.star_rating_description FROM hotels AS t1 JOIN ref_hotel_star_ratings AS t2 ON t1.star_rating_code = t2.star_rating_code WHERE t1.price_range > 10000",
        "schema": "CREATE TABLE Tourist_Attractions (Description TEXT, Tourist_Attraction_ID NUMBER, Name TEXT); CREATE TABLE Photos (Description TEXT); CREATE TABLE Visitors (Tourist_ID NUMBER); CREATE TABLE Visits (Tourist_ID NUMBER, Tourist_Attraction_ID NUMBER); CREATE TABLE Hotels (star_rating_code TEXT, hotel_id NUMBER, price_range NUMBER, other_hotel_details TEXT); CREATE TABLE Ref_Hotel_Star_Ratings (star_rating_code TEXT, star_rating_description TEXT);"
      }
    ],
    [
      {
        "question": "How many tourist attractions are there?",
        "query": "SELECT count(*) FROM tourist_attractions",
        "schema": "CREATE TABLE Staff (Tourist_Attraction_ID NUMBER); CREATE TABLE Visits (Tourist_Attraction_ID NUMBER); CREATE TABLE Theme_Parks (Theme_Park_ID NUMBER); CREATE TABLE Tourist_Attraction_Features (Tourist_Attraction_ID NUMBER); CREATE TABLE Photos (Tourist_Attraction_ID NUMBER); CREATE TABLE Ref_Attraction_Types (Attraction_Type_Code TEXT); CREATE TABLE Tourist_Attractions (Other_Details TEXT, Attraction_Type_Code TEXT, Opening_Hours TEXT, How_to_Get_There TEXT, Name TEXT, Location_ID NUMBER, Tourist_Attraction_ID NUMBER, Description TEXT);"
      },
      {
        "question": "How many of them are associated with the photo \"fun1\"?",
        "query": "SELECT count(*) FROM photos AS t1 JOIN tourist_attractions AS t2 ON t1.tourist_attraction_id = t2.tourist_attraction_id WHERE t1.name = \"fun1\"",
        "schema": "CREATE TABLE Ref_Attraction_Types (Attraction_Type_Code TEXT); CREATE TABLE Tourist_Attraction_Features (Tourist_Attraction_ID NUMBER); CREATE TABLE Visits (Tourist_Attraction_ID NUMBER); CREATE TABLE Photos (Photo_ID NUMBER, Tourist_Attraction_ID NUMBER, Filename TEXT, Name TEXT); CREATE TABLE Tourist_Attractions (Attraction_Type_Code TEXT, Other_Details TEXT, Description TEXT, How_to_Get_There TEXT, Name TEXT, Opening_Hours TEXT, Location_ID NUMBER, Tourist_Attraction_ID NUMBER); CREATE TABLE Theme_Parks (Theme_Park_ID NUMBER); CREATE TABLE Staff (Tourist_Attraction_ID NUMBER);"
      },
      {
        "question": "How about the photo \"game1\"?",
        "query": "SELECT count(*) FROM photos AS t1 JOIN tourist_attractions AS t2 ON t1.tourist_attraction_id = t2.tourist_attraction_id WHERE t1.name = \"game1\"",
        "schema": "CREATE TABLE Staff (Tourist_Attraction_ID NUMBER); CREATE TABLE Ref_Attraction_Types (Attraction_Type_Code TEXT); CREATE TABLE Photos (Name TEXT, Filename TEXT, Photo_ID NUMBER, Tourist_Attraction_ID NUMBER); CREATE TABLE Visits (Tourist_Attraction_ID NUMBER); CREATE TABLE Tourist_Attraction_Features (Tourist_Attraction_ID NUMBER); CREATE TABLE Theme_Parks (Theme_Park_ID NUMBER); CREATE TABLE Tourist_Attractions (How_to_Get_There TEXT, Opening_Hours TEXT, Description TEXT, Name TEXT, Location_ID NUMBER, Attraction_Type_Code TEXT, Other_Details TEXT, Tourist_Attraction_ID NUMBER);"
      },
      {
        "question": "Please show the name of these tourist attractions?",
        "query": "SELECT t2.name FROM photos AS t1 JOIN tourist_attractions AS t2 ON t1.tourist_attraction_id = t2.tourist_attraction_id WHERE t1.name = \"game1\"",
        "schema": "CREATE TABLE Tourist_Attraction_Features (Tourist_Attraction_ID NUMBER); CREATE TABLE Visits (Tourist_Attraction_ID NUMBER); CREATE TABLE Theme_Parks (Theme_Park_ID NUMBER); CREATE TABLE Ref_Attraction_Types (Attraction_Type_Code TEXT); CREATE TABLE Staff (Tourist_Attraction_ID NUMBER); CREATE TABLE Photos (Filename TEXT, Tourist_Attraction_ID NUMBER, Photo_ID NUMBER, Name TEXT); CREATE TABLE Tourist_Attractions (Tourist_Attraction_ID NUMBER, Location_ID NUMBER, Other_Details TEXT, Attraction_Type_Code TEXT, Opening_Hours TEXT, Name TEXT, How_to_Get_There TEXT, Description TEXT);"
      }
    ],
    [
      {
        "question": "How can I get to the tourist attraction \"film festival\"?",
        "query": "SELECT how_to_get_there FROM tourist_attractions WHERE name = \"film festival\"",
        "schema": "CREATE TABLE Tourist_Attractions (How_to_Get_There TEXT, Name TEXT, Opening_Hours TEXT, Tourist_Attraction_ID NUMBER, Location_ID NUMBER, Attraction_Type_Code TEXT); CREATE TABLE Theme_Parks (Theme_Park_ID NUMBER); CREATE TABLE Staff (Tourist_Attraction_ID NUMBER); CREATE TABLE Visits (Tourist_Attraction_ID NUMBER); CREATE TABLE Photos (Tourist_Attraction_ID NUMBER); CREATE TABLE Locations (Location_ID NUMBER, Location_Name TEXT);"
      },
      {
        "question": "How many photos have been taken at this tourist attraction?",
        "query": "SELECT count(*) FROM photos AS t1 JOIN tourist_attractions AS t2 ON t1.tourist_attraction_id = t2.tourist_attraction_id WHERE t2.name = \"film festival\"",
        "schema": "CREATE TABLE Visits (Tourist_Attraction_ID NUMBER); CREATE TABLE Locations (Location_ID NUMBER, Location_Name TEXT); CREATE TABLE Staff (Tourist_Attraction_ID NUMBER); CREATE TABLE Theme_Parks (Theme_Park_ID NUMBER); CREATE TABLE Photos (Tourist_Attraction_ID NUMBER, Name TEXT, Photo_ID NUMBER, Filename TEXT); CREATE TABLE Tourist_Attractions (Attraction_Type_Code TEXT, Name TEXT, How_to_Get_There TEXT, Location_ID NUMBER, Tourist_Attraction_ID NUMBER, Opening_Hours TEXT);"
      },
      {
        "question": "Please show its name and descriptions.",
        "query": "SELECT t1.name , t1.description FROM photos AS t1 JOIN tourist_attractions AS t2 ON t1.tourist_attraction_id = t2.tourist_attraction_id WHERE t2.name = \"film festival\"",
        "schema": "CREATE TABLE Staff (Tourist_Attraction_ID NUMBER); CREATE TABLE Photos (Name TEXT, Description TEXT, Photo_ID NUMBER, Filename TEXT, Tourist_Attraction_ID NUMBER); CREATE TABLE Locations (Location_Name TEXT, Location_ID NUMBER); CREATE TABLE Visits (Tourist_Attraction_ID NUMBER); CREATE TABLE Tourist_Attractions (How_to_Get_There TEXT, Location_ID NUMBER, Description TEXT, Attraction_Type_Code TEXT, Opening_Hours TEXT, Name TEXT, Tourist_Attraction_ID NUMBER); CREATE TABLE Theme_Parks (Theme_Park_ID NUMBER);"
      }
    ],
    [
      {
        "question": "How many shops are there?",
        "query": "SELECT count(*) FROM shops",
        "schema": "CREATE TABLE Shops (Shop_ID NUMBER, Shop_Details TEXT); CREATE TABLE Street_Markets (Market_ID NUMBER); CREATE TABLE Museums (Museum_ID NUMBER); CREATE TABLE Tourist_Attractions (Name TEXT, How_to_Get_There TEXT, Tourist_Attraction_ID NUMBER);"
      },
      {
        "question": "How many of them could be accessed by bus?",
        "query": "SELECT count(*) FROM shops AS t1 JOIN tourist_attractions AS t2 ON t1.shop_id = t2.tourist_attraction_id WHERE t2.how_to_get_there = \"bus\"",
        "schema": "CREATE TABLE Museums (Museum_ID NUMBER); CREATE TABLE Tourist_Attractions (Name TEXT, How_to_Get_There TEXT, Location_ID NUMBER, Tourist_Attraction_ID NUMBER); CREATE TABLE Street_Markets (Market_ID NUMBER); CREATE TABLE Shops (Shop_Details TEXT, Shop_ID NUMBER); CREATE TABLE Locations (Location_ID NUMBER, Location_Name TEXT);"
      },
      {
        "question": "How about the number of those that could be accessed by walking?",
        "query": "SELECT count(*) FROM shops AS t1 JOIN tourist_attractions AS t2 ON t1.shop_id = t2.tourist_attraction_id WHERE t2.how_to_get_there = \"walk\"",
        "schema": "CREATE TABLE Locations (Location_ID NUMBER, Location_Name TEXT); CREATE TABLE Street_Markets (Market_ID NUMBER); CREATE TABLE Museums (Museum_ID NUMBER); CREATE TABLE Shops (Shop_ID NUMBER, Shop_Details TEXT); CREATE TABLE Tourist_Attractions (How_to_Get_There TEXT, Name TEXT, Location_ID NUMBER, Tourist_Attraction_ID NUMBER);"
      },
      {
        "question": "Please show the details of these shops.",
        "query": "SELECT t1.shop_details FROM shops AS t1 JOIN tourist_attractions AS t2 ON t1.shop_id = t2.tourist_attraction_id WHERE t2.how_to_get_there = \"walk\"",
        "schema": "CREATE TABLE Shops (Shop_ID NUMBER, Shop_Details TEXT); CREATE TABLE Locations (Location_ID NUMBER, Location_Name TEXT); CREATE TABLE Street_Markets (Market_ID NUMBER); CREATE TABLE Museums (Museum_ID NUMBER); CREATE TABLE Tourist_Attractions (Tourist_Attraction_ID NUMBER, Other_Details TEXT, Location_ID NUMBER, Name TEXT, How_to_Get_There TEXT);"
      }
    ],
    [
      {
        "question": "Please show the description of the the attraction named \"US museum\".",
        "query": "SELECT description FROM tourist_attractions WHERE name = \"US museum\"",
        "schema": "CREATE TABLE Ref_Attraction_Types (Attraction_Type_Code TEXT, Attraction_Type_Description TEXT); CREATE TABLE Staff (Tourist_Attraction_ID NUMBER); CREATE TABLE Photos (Tourist_Attraction_ID NUMBER, Description TEXT); CREATE TABLE Locations (Location_ID NUMBER, Location_Name TEXT); CREATE TABLE Museums (Museum_ID NUMBER, Museum_Details TEXT); CREATE TABLE Tourist_Attractions (Location_ID NUMBER, Tourist_Attraction_ID NUMBER, Description TEXT, Name TEXT, How_to_Get_There TEXT, Attraction_Type_Code TEXT);"
      },
      {
        "question": "How can I get to this place?",
        "query": "SELECT how_to_get_there FROM tourist_attractions WHERE name = \"US museum\"",
        "schema": "CREATE TABLE Locations (Location_ID NUMBER, Address TEXT, Location_Name TEXT); CREATE TABLE Photos (Tourist_Attraction_ID NUMBER, Description TEXT); CREATE TABLE Tourist_Attractions (Tourist_Attraction_ID NUMBER, How_to_Get_There TEXT, Location_ID NUMBER, Description TEXT, Name TEXT, Attraction_Type_Code TEXT); CREATE TABLE Museums (Museum_Details TEXT, Museum_ID NUMBER); CREATE TABLE Ref_Attraction_Types (Attraction_Type_Description TEXT, Attraction_Type_Code TEXT); CREATE TABLE Staff (Tourist_Attraction_ID NUMBER);"
      },
      {
        "question": "Who is in charge of it?",
        "query": "SELECT t1.name FROM staff AS t1 JOIN tourist_attractions AS t2 ON t1.tourist_attraction_id = t2.tourist_attraction_id WHERE t2.name = \"US museum\"",
        "schema": "CREATE TABLE Ref_Attraction_Types (Attraction_Type_Code TEXT, Attraction_Type_Description TEXT); CREATE TABLE Museums (Museum_ID NUMBER, Museum_Details TEXT); CREATE TABLE Tourist_Attractions (Name TEXT, Tourist_Attraction_ID NUMBER, How_to_Get_There TEXT, Attraction_Type_Code TEXT, Location_ID NUMBER, Description TEXT); CREATE TABLE Visits (Tourist_Attraction_ID NUMBER); CREATE TABLE Locations (Location_ID NUMBER, Address TEXT, Location_Name TEXT); CREATE TABLE Staff (Staff_ID NUMBER, Name TEXT, Tourist_Attraction_ID NUMBER); CREATE TABLE Photos (Description TEXT, Tourist_Attraction_ID NUMBER);"
      }
    ],
    [
      {
        "question": "How many markets are there?",
        "query": "SELECT count(*) FROM street_markets",
        "schema": "CREATE TABLE Shops (Shop_Details TEXT, Shop_ID NUMBER); CREATE TABLE Locations (Location_ID NUMBER); CREATE TABLE Street_Markets (Market_Details TEXT, Market_ID NUMBER); CREATE TABLE Tourist_Attractions (How_to_Get_There TEXT, Location_ID NUMBER, Tourist_Attraction_ID NUMBER, Name TEXT);"
      },
      {
        "question": "How many of them could be accessed by shuttle?",
        "query": "SELECT count(*) FROM street_markets AS t1 JOIN tourist_attractions AS t2 ON t1.market_id = t2.tourist_attraction_id WHERE t2.how_to_get_there = \"shuttle\"",
        "schema": "CREATE TABLE Tourist_Attractions (Name TEXT, Tourist_Attraction_ID NUMBER, How_to_Get_There TEXT, Location_ID NUMBER); CREATE TABLE Street_Markets (Market_Details TEXT, Market_ID NUMBER); CREATE TABLE Locations (Location_ID NUMBER); CREATE TABLE Shops (Shop_ID NUMBER, Shop_Details TEXT);"
      },
      {
        "question": "How about the number of those that could be accessed by walking or bus?",
        "query": "SELECT count(*) FROM street_markets AS t1 JOIN tourist_attractions AS t2 ON t1.market_id = t2.tourist_attraction_id WHERE t2.how_to_get_there = \"walk\" OR t2.how_to_get_there = \"bus\"",
        "schema": "CREATE TABLE Street_Markets (Market_Details TEXT, Market_ID NUMBER); CREATE TABLE Tourist_Attractions (Location_ID NUMBER, How_to_Get_There TEXT, Tourist_Attraction_ID NUMBER, Name TEXT); CREATE TABLE Locations (Location_ID NUMBER); CREATE TABLE Shops (Shop_Details TEXT, Shop_ID NUMBER);"
      },
      {
        "question": "Please show the details of these markets.",
        "query": "SELECT t1.market_details FROM street_markets AS t1 JOIN tourist_attractions AS t2 ON t1.market_id = t2.tourist_attraction_id WHERE t2.how_to_get_there = \"walk\" OR t2.how_to_get_there = \"bus\"",
        "schema": "CREATE TABLE Locations (Location_ID NUMBER); CREATE TABLE Tourist_Attractions (How_to_Get_There TEXT, Other_Details TEXT, Location_ID NUMBER, Name TEXT, Tourist_Attraction_ID NUMBER); CREATE TABLE Street_Markets (Market_ID NUMBER, Market_Details TEXT); CREATE TABLE Shops (Shop_ID NUMBER, Shop_Details TEXT);"
      }
    ],
    [
      {
        "question": "How many visitors are there?",
        "query": "SELECT count(*) FROM visitors",
        "schema": "CREATE TABLE Tourist_Attractions (Tourist_Attraction_ID NUMBER); CREATE TABLE Visitors (Tourist_Details TEXT, Tourist_ID NUMBER); CREATE TABLE Visits (Tourist_ID NUMBER, Visit_Details TEXT, Visit_ID NUMBER, Tourist_Attraction_ID NUMBER);"
      },
      {
        "question": "What is the Tourist_ID of the visitor whose detail is 'Vincent'?",
        "query": "SELECT tourist_id FROM visitors WHERE tourist_details = \"Vincent\"",
        "schema": "CREATE TABLE Visits (Visit_Details TEXT, Tourist_Attraction_ID NUMBER, Tourist_ID NUMBER, Visit_ID NUMBER); CREATE TABLE Visitors (Tourist_ID NUMBER, Tourist_Details TEXT); CREATE TABLE Tourist_Attractions (Tourist_Attraction_ID NUMBER);"
      },
      {
        "question": "Please show his visit date and detail.",
        "query": "SELECT t2.visit_date , t2.visit_details FROM visitors AS t1 JOIN visits AS t2 ON t1.tourist_id = t2.tourist_id WHERE t1.tourist_details = \"Vincent\"",
        "schema": "CREATE TABLE Visits (Visit_Date TIME, Tourist_ID NUMBER, Visit_ID NUMBER, Tourist_Attraction_ID NUMBER, Visit_Details TEXT); CREATE TABLE Visitors (Tourist_ID NUMBER, Tourist_Details TEXT); CREATE TABLE Tourist_Attractions (Tourist_Attraction_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What is the Tourist_ID of the visitor whose detail is 'Vivian'?",
        "query": "SELECT tourist_id FROM visitors WHERE tourist_details = \"Vivian\"",
        "schema": "CREATE TABLE Staff (Name TEXT, Tourist_Attraction_ID NUMBER); CREATE TABLE Visitors (Tourist_Details TEXT, Tourist_ID NUMBER); CREATE TABLE Tourist_Attractions (Name TEXT, Attraction_Type_Code TEXT, Description TEXT, Tourist_Attraction_ID NUMBER); CREATE TABLE Visits (Visit_ID NUMBER, Visit_Details TEXT, Tourist_ID NUMBER, Tourist_Attraction_ID NUMBER);"
      },
      {
        "question": "Which tourist attractions does she visit?",
        "query": "SELECT t1.name FROM tourist_attractions AS t1 JOIN visits AS t2 ON t1.tourist_attraction_id = t2.tourist_attraction_id JOIN visitors AS t3 ON t2.tourist_id = t3.tourist_id WHERE t3.tourist_details = \"Vivian\"",
        "schema": "CREATE TABLE Staff (Name TEXT, Tourist_Attraction_ID NUMBER); CREATE TABLE Visits (Tourist_ID NUMBER, Visit_Details TEXT, Visit_ID NUMBER, Tourist_Attraction_ID NUMBER); CREATE TABLE Photos (Tourist_Attraction_ID NUMBER); CREATE TABLE Tourist_Attractions (How_to_Get_There TEXT, Name TEXT, Location_ID NUMBER, Description TEXT, Tourist_Attraction_ID NUMBER, Other_Details TEXT, Attraction_Type_Code TEXT); CREATE TABLE Visitors (Tourist_ID NUMBER, Tourist_Details TEXT);"
      },
      {
        "question": "How about Vincent?",
        "query": "SELECT t1.name FROM tourist_attractions AS t1 JOIN visits AS t2 ON t1.tourist_attraction_id = t2.tourist_attraction_id JOIN visitors AS t3 ON t2.tourist_id = t3.tourist_id WHERE t3.tourist_details = \"Vincent\"",
        "schema": "CREATE TABLE Tourist_Attractions (Other_Details TEXT, Location_ID NUMBER, Attraction_Type_Code TEXT, How_to_Get_There TEXT, Name TEXT, Tourist_Attraction_ID NUMBER, Description TEXT); CREATE TABLE Staff (Tourist_Attraction_ID NUMBER, Name TEXT); CREATE TABLE Visits (Visit_Details TEXT, Visit_ID NUMBER, Tourist_ID NUMBER, Tourist_Attraction_ID NUMBER); CREATE TABLE Photos (Tourist_Attraction_ID NUMBER); CREATE TABLE Visitors (Tourist_Details TEXT, Tourist_ID NUMBER);"
      }
    ],
    [
      {
        "question": "How many tourist attractions has Vincent visited?",
        "query": "SELECT count(*) FROM tourist_attractions AS t1 JOIN visitors AS t2 JOIN visits AS t3 ON t1.tourist_attraction_id = t3.tourist_attraction_id AND t2.tourist_id = t3.tourist_id WHERE t2.tourist_details = \"Vincent\"",
        "schema": "CREATE TABLE Photos (Tourist_Attraction_ID NUMBER); CREATE TABLE Visitors (Tourist_Details TEXT, Tourist_ID NUMBER); CREATE TABLE Staff (Tourist_Attraction_ID NUMBER, Name TEXT); CREATE TABLE Locations (Location_Name TEXT, Location_ID NUMBER); CREATE TABLE Tourist_Attractions (Other_Details TEXT, Name TEXT, Location_ID NUMBER, Tourist_Attraction_ID NUMBER, How_to_Get_There TEXT, Opening_Hours TEXT); CREATE TABLE Visits (Visit_ID NUMBER, Visit_Details TEXT, Tourist_Attraction_ID NUMBER, Tourist_ID NUMBER, Visit_Date TIME);"
      },
      {
        "question": "How about Vivian?",
        "query": "SELECT count(*) FROM tourist_attractions AS t1 JOIN visitors AS t2 JOIN visits AS t3 ON t1.tourist_attraction_id = t3.tourist_attraction_id AND t2.tourist_id = t3.tourist_id WHERE t2.tourist_details = \"Vivian\"",
        "schema": "CREATE TABLE Visits (Visit_Date TIME, Visit_Details TEXT, Tourist_Attraction_ID NUMBER, Tourist_ID NUMBER, Visit_ID NUMBER); CREATE TABLE Visitors (Tourist_Details TEXT, Tourist_ID NUMBER); CREATE TABLE Staff (Tourist_Attraction_ID NUMBER, Name TEXT); CREATE TABLE Tourist_Attractions (Other_Details TEXT, Tourist_Attraction_ID NUMBER, Name TEXT, Opening_Hours TEXT, How_to_Get_There TEXT, Location_ID NUMBER); CREATE TABLE Locations (Location_Name TEXT, Location_ID NUMBER); CREATE TABLE Photos (Tourist_Attraction_ID NUMBER);"
      },
      {
        "question": "Among these attractions, please show the names and dates of the ones that Vincent or Vivian has visited.",
        "query": "SELECT t1.name , t3.visit_date FROM tourist_attractions AS t1 JOIN visitors AS t2 JOIN visits AS t3 ON t1.tourist_attraction_id = t3.tourist_attraction_id AND t2.tourist_id = t3.tourist_id WHERE t2.tourist_details = \"Vincent\" OR t2.tourist_details = \"Vivian\"",
        "schema": "CREATE TABLE Photos (Tourist_Attraction_ID NUMBER); CREATE TABLE Visitors (Tourist_Details TEXT, Tourist_ID NUMBER); CREATE TABLE Visits (Visit_Date TIME, Visit_Details TEXT, Tourist_ID NUMBER, Visit_ID NUMBER, Tourist_Attraction_ID NUMBER); CREATE TABLE Staff (Tourist_Attraction_ID NUMBER, Name TEXT); CREATE TABLE Locations (Location_ID NUMBER, Location_Name TEXT); CREATE TABLE Tourist_Attractions (Other_Details TEXT, Tourist_Attraction_ID NUMBER, How_to_Get_There TEXT, Opening_Hours TEXT, Location_ID NUMBER, Name TEXT);"
      }
    ],
    [
      {
        "question": "What is the price range of the most expensive hotel?",
        "query": "SELECT price_range FROM hotels ORDER BY price_range DESC LIMIT 1",
        "schema": "CREATE TABLE Staff (Tourist_Attraction_ID NUMBER); CREATE TABLE Tourist_Attractions (Name TEXT, Tourist_Attraction_ID NUMBER); CREATE TABLE Hotels (price_range NUMBER, hotel_id NUMBER);"
      },
      {
        "question": "How about the top 3?",
        "query": "SELECT price_range FROM hotels ORDER BY price_range DESC LIMIT 3",
        "schema": "CREATE TABLE Tourist_Attractions (Name TEXT, Tourist_Attraction_ID NUMBER); CREATE TABLE Hotels (hotel_id NUMBER, price_range NUMBER); CREATE TABLE Staff (Tourist_Attraction_ID NUMBER);"
      },
      {
        "question": "Please show the details.",
        "query": "SELECT other_hotel_details FROM hotels ORDER BY price_range DESC LIMIT 3",
        "schema": "CREATE TABLE Hotels (other_hotel_details TEXT, price_range NUMBER, hotel_id NUMBER); CREATE TABLE Staff (Tourist_Attraction_ID NUMBER); CREATE TABLE Tourist_Attractions (Name TEXT, Tourist_Attraction_ID NUMBER, Other_Details TEXT); CREATE TABLE Photos (Other_Details TEXT);"
      }
    ],
    [
      {
        "question": "What is the lowest price range of the hotels?",
        "query": "SELECT price_range FROM hotels ORDER BY price_range LIMIT 1",
        "schema": "CREATE TABLE Hotels (hotel_id NUMBER, star_rating_code TEXT, other_hotel_details TEXT, price_range NUMBER); CREATE TABLE Ref_Hotel_Star_Ratings (star_rating_code TEXT); CREATE TABLE Tourist_Attractions (Name TEXT, Tourist_Attraction_ID NUMBER);"
      },
      {
        "question": "How about the last 3?",
        "query": "SELECT price_range FROM hotels ORDER BY price_range LIMIT 3",
        "schema": "CREATE TABLE Ref_Hotel_Star_Ratings (star_rating_code TEXT); CREATE TABLE Hotels (hotel_id NUMBER, star_rating_code TEXT, other_hotel_details TEXT, price_range NUMBER); CREATE TABLE Tourist_Attractions (Name TEXT, Tourist_Attraction_ID NUMBER);"
      },
      {
        "question": "Please show the details and star ratings of these three hotels.",
        "query": "SELECT other_hotel_details , star_rating_code FROM hotels ORDER BY price_range ASC LIMIT 3",
        "schema": "CREATE TABLE Photos (Other_Details TEXT); CREATE TABLE Ref_Hotel_Star_Ratings (star_rating_description TEXT, star_rating_code TEXT); CREATE TABLE Hotels (hotel_id NUMBER, other_hotel_details TEXT, star_rating_code TEXT, price_range NUMBER); CREATE TABLE Tourist_Attractions (Name TEXT, Tourist_Attraction_ID NUMBER);"
      }
    ],
    [
      {
        "question": "How many people choose to get to the tourist attractions by walking?",
        "query": "SELECT count(*) FROM tourist_attractions WHERE how_to_get_there = \"walk\"",
        "schema": "CREATE TABLE Visits (Tourist_Attraction_ID NUMBER); CREATE TABLE Locations (Location_ID NUMBER); CREATE TABLE Museums (Museum_ID NUMBER); CREATE TABLE Staff (Tourist_Attraction_ID NUMBER); CREATE TABLE Tourist_Attractions (How_to_Get_There TEXT, Tourist_Attraction_ID NUMBER, Opening_Hours TEXT, Location_ID NUMBER, Name TEXT, Attraction_Type_Code TEXT);"
      },
      {
        "question": "How about by bus?",
        "query": "SELECT count(*) FROM tourist_attractions WHERE how_to_get_there = \"bus\"",
        "schema": "CREATE TABLE Museums (Museum_ID NUMBER); CREATE TABLE Staff (Tourist_Attraction_ID NUMBER); CREATE TABLE Visits (Tourist_Attraction_ID NUMBER); CREATE TABLE Locations (Location_ID NUMBER); CREATE TABLE Tourist_Attractions (How_to_Get_There TEXT, Attraction_Type_Code TEXT, Tourist_Attraction_ID NUMBER, Opening_Hours TEXT, Location_ID NUMBER, Name TEXT);"
      },
      {
        "question": "Then, which transportation method is the most popular?",
        "query": "SELECT how_to_get_there FROM tourist_attractions GROUP BY how_to_get_there ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Tourist_Attractions (Attraction_Type_Code TEXT, Tourist_Attraction_ID NUMBER, How_to_Get_There TEXT, Name TEXT, Opening_Hours TEXT, Location_ID NUMBER); CREATE TABLE Museums (Museum_ID NUMBER); CREATE TABLE Visits (Tourist_Attraction_ID NUMBER); CREATE TABLE Staff (Tourist_Attraction_ID NUMBER); CREATE TABLE Locations (Location_ID NUMBER);"
      }
    ],
    [
      {
        "question": "How many attraction types are there?",
        "query": "SELECT count(*) FROM ref_attraction_types",
        "schema": "CREATE TABLE Ref_Attraction_Types (Attraction_Type_Code TEXT, Attraction_Type_Description TEXT); CREATE TABLE Tourist_Attractions (Tourist_Attraction_ID NUMBER, Name TEXT, Attraction_Type_Code TEXT); CREATE TABLE Staff (Tourist_Attraction_ID NUMBER);"
      },
      {
        "question": "What is the description of the attraction with attraction type code being 2?",
        "query": "SELECT attraction_type_description FROM ref_attraction_types WHERE attraction_type_code = 2",
        "schema": "CREATE TABLE Staff (Tourist_Attraction_ID NUMBER); CREATE TABLE Ref_Attraction_Types (Attraction_Type_Description TEXT, Attraction_Type_Code TEXT); CREATE TABLE Tourist_Attractions (Description TEXT, Tourist_Attraction_ID NUMBER, Attraction_Type_Code TEXT, Name TEXT); CREATE TABLE Photos (Description TEXT);"
      },
      {
        "question": "For each attraction type, how many attractions are there?",
        "query": "SELECT t2.attraction_type_code, count(*) FROM ref_attraction_types AS t1 JOIN tourist_attractions AS t2 ON t1.attraction_type_code = t2.attraction_type_code GROUP BY t2.attraction_type_code",
        "schema": "CREATE TABLE Ref_Attraction_Types (Attraction_Type_Description TEXT, Attraction_Type_Code TEXT); CREATE TABLE Staff (Tourist_Attraction_ID NUMBER); CREATE TABLE Tourist_Attractions (Attraction_Type_Code TEXT, Tourist_Attraction_ID NUMBER, Description TEXT, Name TEXT, How_to_Get_There TEXT); CREATE TABLE Photos (Description TEXT);"
      },
      {
        "question": "Please show the description and code of the attraction type that includes the most tourist attractions.",
        "query": "SELECT t1.attraction_type_description , t2.attraction_type_code FROM ref_attraction_types AS t1 JOIN tourist_attractions AS t2 ON t1.attraction_type_code = t2.attraction_type_code GROUP BY t2.attraction_type_code ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Tourist_Attractions (Tourist_Attraction_ID NUMBER, Name TEXT, Description TEXT, Attraction_Type_Code TEXT, How_to_Get_There TEXT); CREATE TABLE Staff (Tourist_Attraction_ID NUMBER); CREATE TABLE Photos (Description TEXT); CREATE TABLE Ref_Attraction_Types (Attraction_Type_Code TEXT, Attraction_Type_Description TEXT);"
      }
    ],
    [
      {
        "question": "How many tourist attractions are there?",
        "query": "SELECT count(*) FROM tourist_attractions",
        "schema": "CREATE TABLE Tourist_Attractions (Name TEXT, Attraction_Type_Code TEXT, Opening_Hours TEXT, How_to_Get_There TEXT, Location_ID NUMBER, Tourist_Attraction_ID NUMBER, Other_Details TEXT, Description TEXT); CREATE TABLE Visits (Tourist_Attraction_ID NUMBER); CREATE TABLE Tourist_Attraction_Features (Tourist_Attraction_ID NUMBER); CREATE TABLE Staff (Tourist_Attraction_ID NUMBER); CREATE TABLE Ref_Attraction_Types (Attraction_Type_Description TEXT, Attraction_Type_Code TEXT); CREATE TABLE Theme_Parks (Theme_Park_ID NUMBER); CREATE TABLE Photos (Tourist_Attraction_ID NUMBER);"
      },
      {
        "question": "For each attraction, how many visits does it have?",
        "query": "SELECT t1.name, count(*) FROM tourist_attractions AS t1 JOIN visits AS t2 ON t1.tourist_attraction_id = t2.tourist_attraction_id GROUP BY t2.tourist_attraction_id",
        "schema": "CREATE TABLE Tourist_Attractions (Attraction_Type_Code TEXT, Opening_Hours TEXT, Tourist_Attraction_ID NUMBER, Description TEXT, How_to_Get_There TEXT, Name TEXT, Location_ID NUMBER, Other_Details TEXT); CREATE TABLE Tourist_Attraction_Features (Tourist_Attraction_ID NUMBER); CREATE TABLE Visitors (Tourist_ID NUMBER, Tourist_Details TEXT); CREATE TABLE Photos (Tourist_Attraction_ID NUMBER); CREATE TABLE Staff (Tourist_Attraction_ID NUMBER); CREATE TABLE Ref_Attraction_Types (Attraction_Type_Code TEXT, Attraction_Type_Description TEXT); CREATE TABLE Visits (Visit_Details TEXT, Tourist_ID NUMBER, Visit_ID NUMBER, Tourist_Attraction_ID NUMBER); CREATE TABLE Theme_Parks (Theme_Park_ID NUMBER);"
      },
      {
        "question": "Please also show the ids of these attractions.",
        "query": "SELECT t1.name , t2.tourist_attraction_id , count(*) FROM tourist_attractions AS t1 JOIN visits AS t2 ON t1.tourist_attraction_id = t2.tourist_attraction_id GROUP BY t2.tourist_attraction_id",
        "schema": "CREATE TABLE Visitors (Tourist_ID NUMBER, Tourist_Details TEXT); CREATE TABLE Staff (Tourist_Attraction_ID NUMBER); CREATE TABLE Photos (Tourist_Attraction_ID NUMBER); CREATE TABLE Ref_Attraction_Types (Attraction_Type_Description TEXT, Attraction_Type_Code TEXT); CREATE TABLE Theme_Parks (Theme_Park_ID NUMBER); CREATE TABLE Tourist_Attraction_Features (Tourist_Attraction_ID NUMBER); CREATE TABLE Tourist_Attractions (Name TEXT, Tourist_Attraction_ID NUMBER, Description TEXT, How_to_Get_There TEXT, Other_Details TEXT, Opening_Hours TEXT, Attraction_Type_Code TEXT, Location_ID NUMBER); CREATE TABLE Visits (Tourist_Attraction_ID NUMBER, Visit_ID NUMBER, Visit_Details TEXT, Tourist_ID NUMBER);"
      }
    ],
    [
      {
        "question": "How many tourist attractions have been visited at least once?",
        "query": "SELECT count(*) FROM (SELECT t1.name FROM tourist_attractions AS t1 JOIN visits AS t2 ON t1.tourist_attraction_id = t2.tourist_attraction_id GROUP BY t2.tourist_attraction_id HAVING count(*) >= 1)",
        "schema": "CREATE TABLE Photos (Tourist_Attraction_ID NUMBER); CREATE TABLE Tourist_Attractions (Attraction_Type_Code TEXT, Description TEXT, Tourist_Attraction_ID NUMBER, How_to_Get_There TEXT, Location_ID NUMBER, Opening_Hours TEXT, Name TEXT); CREATE TABLE Staff (Tourist_Attraction_ID NUMBER); CREATE TABLE Locations (Location_ID NUMBER); CREATE TABLE Visitors (Tourist_Details TEXT, Tourist_ID NUMBER); CREATE TABLE Visits (Tourist_Attraction_ID NUMBER, Tourist_ID NUMBER, Visit_Date TIME, Visit_Details TEXT, Visit_ID NUMBER);"
      },
      {
        "question": "How about the number of those that have been visited at least two times?",
        "query": "SELECT count(*) FROM (SELECT t1.name FROM tourist_attractions AS t1 JOIN visits AS t2 ON t1.tourist_attraction_id = t2.tourist_attraction_id GROUP BY t2.tourist_attraction_id HAVING count(*) >= 2)",
        "schema": "CREATE TABLE Tourist_Attractions (How_to_Get_There TEXT, Description TEXT, Tourist_Attraction_ID NUMBER, Name TEXT, Attraction_Type_Code TEXT, Opening_Hours TEXT, Location_ID NUMBER); CREATE TABLE Visitors (Tourist_Details TEXT, Tourist_ID NUMBER); CREATE TABLE Visits (Tourist_ID NUMBER, Visit_ID NUMBER, Visit_Date TIME, Tourist_Attraction_ID NUMBER, Visit_Details TEXT); CREATE TABLE Photos (Tourist_Attraction_ID NUMBER); CREATE TABLE Staff (Tourist_Attraction_ID NUMBER); CREATE TABLE Locations (Location_ID NUMBER);"
      },
      {
        "question": "Please show their names and ids.",
        "query": "SELECT t1.name , t2.tourist_attraction_id FROM tourist_attractions AS t1 JOIN visits AS t2 ON t1.tourist_attraction_id = t2.tourist_attraction_id GROUP BY t2.tourist_attraction_id HAVING count(*) >= 2",
        "schema": "CREATE TABLE Visitors (Tourist_Details TEXT, Tourist_ID NUMBER); CREATE TABLE Staff (Tourist_Attraction_ID NUMBER); CREATE TABLE Visits (Visit_Date TIME, Tourist_ID NUMBER, Visit_Details TEXT, Visit_ID NUMBER, Tourist_Attraction_ID NUMBER); CREATE TABLE Locations (Location_ID NUMBER); CREATE TABLE Tourist_Attractions (Description TEXT, Name TEXT, Attraction_Type_Code TEXT, Opening_Hours TEXT, Location_ID NUMBER, Tourist_Attraction_ID NUMBER, How_to_Get_There TEXT); CREATE TABLE Photos (Tourist_Attraction_ID NUMBER);"
      }
    ],
    [
      {
        "question": "How many tourist attractions are there at address 660 Shea Crescent?",
        "query": "SELECT count(*) FROM locations AS t1 JOIN tourist_attractions AS t2 ON t1.location_id = t2.location_id WHERE t1.address = \"660 Shea Crescent\"",
        "schema": "CREATE TABLE Locations (Location_Name TEXT, Address TEXT, Other_Details TEXT, Location_ID NUMBER); CREATE TABLE Staff (Tourist_Attraction_ID NUMBER); CREATE TABLE Museums (Museum_ID NUMBER); CREATE TABLE Shops (Shop_Details TEXT, Shop_ID NUMBER); CREATE TABLE Street_Markets (Market_Details TEXT, Market_ID NUMBER); CREATE TABLE Tourist_Attractions (Location_ID NUMBER, Name TEXT, Tourist_Attraction_ID NUMBER, Attraction_Type_Code TEXT, How_to_Get_There TEXT); CREATE TABLE Theme_Parks (Theme_Park_ID NUMBER); CREATE TABLE Visits (Tourist_Attraction_ID NUMBER); CREATE TABLE Photos (Tourist_Attraction_ID NUMBER); CREATE TABLE Hotels (hotel_id NUMBER, other_hotel_details TEXT);"
      },
      {
        "question": "How many tourist attractions can be reached by walking?",
        "query": "SELECT count(*) FROM tourist_attractions WHERE how_to_get_there = \"walk\"",
        "schema": "CREATE TABLE Locations (Other_Details TEXT, Location_Name TEXT, Address TEXT, Location_ID NUMBER); CREATE TABLE Shops (Shop_ID NUMBER, Shop_Details TEXT); CREATE TABLE Hotels (hotel_id NUMBER, other_hotel_details TEXT); CREATE TABLE Theme_Parks (Theme_Park_ID NUMBER); CREATE TABLE Photos (Tourist_Attraction_ID NUMBER); CREATE TABLE Visits (Tourist_Attraction_ID NUMBER); CREATE TABLE Street_Markets (Market_ID NUMBER, Market_Details TEXT); CREATE TABLE Museums (Museum_ID NUMBER); CREATE TABLE Tourist_Attractions (How_to_Get_There TEXT, Tourist_Attraction_ID NUMBER, Name TEXT, Location_ID NUMBER, Attraction_Type_Code TEXT); CREATE TABLE Staff (Tourist_Attraction_ID NUMBER);"
      },
      {
        "question": "Please show the names of these tourist attractions or those that are at address 660 Shea Crescent.",
        "query": "SELECT t2.name FROM locations AS t1 JOIN tourist_attractions AS t2 ON t1.location_id = t2.location_id WHERE t1.address = \"660 Shea Crescent\" OR t2.how_to_get_there = \"walk\"",
        "schema": "CREATE TABLE Locations (Location_ID NUMBER, Location_Name TEXT, Address TEXT, Other_Details TEXT); CREATE TABLE Theme_Parks (Theme_Park_ID NUMBER); CREATE TABLE Photos (Tourist_Attraction_ID NUMBER); CREATE TABLE Visits (Tourist_Attraction_ID NUMBER); CREATE TABLE Tourist_Attractions (Tourist_Attraction_ID NUMBER, Attraction_Type_Code TEXT, Location_ID NUMBER, How_to_Get_There TEXT, Name TEXT); CREATE TABLE Staff (Tourist_Attraction_ID NUMBER); CREATE TABLE Museums (Museum_ID NUMBER); CREATE TABLE Street_Markets (Market_Details TEXT, Market_ID NUMBER); CREATE TABLE Hotels (hotel_id NUMBER, other_hotel_details TEXT); CREATE TABLE Shops (Shop_Details TEXT, Shop_ID NUMBER);"
      }
    ],
    [
      {
        "question": "How many features could be provided by tourist attractions?",
        "query": "SELECT count(*) FROM features",
        "schema": "CREATE TABLE Features (Feature_ID NUMBER, Feature_Details TEXT); CREATE TABLE Photos (Tourist_Attraction_ID NUMBER); CREATE TABLE Ref_Attraction_Types (Attraction_Type_Code TEXT); CREATE TABLE Tourist_Attractions (Name TEXT, Tourist_Attraction_ID NUMBER, Description TEXT, Attraction_Type_Code TEXT, Other_Details TEXT); CREATE TABLE Tourist_Attraction_Features (Tourist_Attraction_ID NUMBER, Feature_ID NUMBER); CREATE TABLE Staff (Tourist_Attraction_ID NUMBER);"
      },
      {
        "question": "Please show their details.",
        "query": "SELECT feature_details FROM features",
        "schema": "CREATE TABLE Staff (Tourist_Attraction_ID NUMBER); CREATE TABLE Tourist_Attractions (Description TEXT, Tourist_Attraction_ID NUMBER, Attraction_Type_Code TEXT, Other_Details TEXT, Name TEXT); CREATE TABLE Tourist_Attraction_Features (Feature_ID NUMBER, Tourist_Attraction_ID NUMBER); CREATE TABLE Photos (Tourist_Attraction_ID NUMBER); CREATE TABLE Features (Feature_Details TEXT, Feature_ID NUMBER); CREATE TABLE Ref_Attraction_Types (Attraction_Type_Code TEXT);"
      },
      {
        "question": "How many tourist attractions have parking as their feature details?",
        "query": "SELECT count(*) FROM tourist_attractions AS t1 JOIN tourist_attraction_features AS t2 ON t1.tourist_attraction_id = t2.tourist_attraction_id JOIN features AS t3 ON t2.feature_id = t3.feature_id WHERE t3.feature_details = 'park'",
        "schema": "CREATE TABLE Ref_Attraction_Types (Attraction_Type_Code TEXT); CREATE TABLE Features (Feature_Details TEXT, Feature_ID NUMBER); CREATE TABLE Photos (Tourist_Attraction_ID NUMBER); CREATE TABLE Tourist_Attractions (How_to_Get_There TEXT, Other_Details TEXT, Description TEXT, Attraction_Type_Code TEXT, Tourist_Attraction_ID NUMBER, Name TEXT); CREATE TABLE Tourist_Attraction_Features (Tourist_Attraction_ID NUMBER, Feature_ID NUMBER); CREATE TABLE Staff (Tourist_Attraction_ID NUMBER);"
      },
      {
        "question": "How about the number of those that have either parking or shopping as their feature details?",
        "query": "SELECT count(*) FROM (SELECT t1.name FROM tourist_attractions AS t1 JOIN tourist_attraction_features AS t2 ON t1.tourist_attraction_id = t2.tourist_attraction_id JOIN features AS t3 ON t2.feature_id = t3.feature_id WHERE t3.feature_details = 'park' UNION SELECT t1.name FROM tourist_attractions AS t1 JOIN tourist_attraction_features AS t2 ON t1.tourist_attraction_id = t2.tourist_attraction_id JOIN features AS t3 ON t2.feature_id = t3.feature_id WHERE t3.feature_details = 'shopping')",
        "schema": "CREATE TABLE Features (Feature_ID NUMBER, Feature_Details TEXT); CREATE TABLE Tourist_Attractions (How_to_Get_There TEXT, Description TEXT, Tourist_Attraction_ID NUMBER, Attraction_Type_Code TEXT, Name TEXT, Other_Details TEXT); CREATE TABLE Staff (Tourist_Attraction_ID NUMBER); CREATE TABLE Photos (Tourist_Attraction_ID NUMBER); CREATE TABLE Ref_Attraction_Types (Attraction_Type_Code TEXT); CREATE TABLE Tourist_Attraction_Features (Tourist_Attraction_ID NUMBER, Feature_ID NUMBER);"
      },
      {
        "question": "Please show the names of these attractions.",
        "query": "SELECT t1.name FROM tourist_attractions AS t1 JOIN tourist_attraction_features AS t2 ON t1.tourist_attraction_id = t2.tourist_attraction_id JOIN features AS t3 ON t2.feature_id = t3.feature_id WHERE t3.feature_details = 'park' UNION SELECT t1.name FROM tourist_attractions AS t1 JOIN tourist_attraction_features AS t2 ON t1.tourist_attraction_id = t2.tourist_attraction_id JOIN features AS t3 ON t2.feature_id = t3.feature_id WHERE t3.feature_details = 'shopping'",
        "schema": "CREATE TABLE Photos (Name TEXT, Tourist_Attraction_ID NUMBER); CREATE TABLE Features (Feature_Details TEXT, Feature_ID NUMBER); CREATE TABLE Ref_Attraction_Types (Attraction_Type_Code TEXT); CREATE TABLE Staff (Tourist_Attraction_ID NUMBER); CREATE TABLE Tourist_Attraction_Features (Feature_ID NUMBER, Tourist_Attraction_ID NUMBER); CREATE TABLE Tourist_Attractions (Name TEXT, Tourist_Attraction_ID NUMBER, Description TEXT, How_to_Get_There TEXT, Attraction_Type_Code TEXT, Other_Details TEXT);"
      }
    ],
    [
      {
        "question": "How many tourist attractions can be reached by bus?",
        "query": "SELECT count(*) FROM tourist_attractions WHERE how_to_get_there = \"bus\"",
        "schema": "CREATE TABLE Locations (Location_ID NUMBER); CREATE TABLE Tourist_Attractions (How_to_Get_There TEXT, Location_ID NUMBER, Name TEXT, Tourist_Attraction_ID NUMBER);"
      },
      {
        "question": "How about the number of tourist attractions that can be reached by bus or are at address 254 Ottilie Junction?",
        "query": "SELECT count(*) FROM locations AS t1 JOIN tourist_attractions AS t2 ON t1.location_id = t2.location_id WHERE t1.address = \"254 Ottilie Junction\" OR t2.how_to_get_there = \"bus\"",
        "schema": "CREATE TABLE Tourist_Attractions (Tourist_Attraction_ID NUMBER, How_to_Get_There TEXT, Location_ID NUMBER, Name TEXT); CREATE TABLE Locations (Address TEXT, Location_Name TEXT, Location_ID NUMBER);"
      },
      {
        "question": "Please show the names of these tourist attractions.",
        "query": "SELECT t2.name FROM locations AS t1 JOIN tourist_attractions AS t2 ON t1.location_id = t2.location_id WHERE t1.address = \"254 Ottilie Junction\" OR t2.how_to_get_there = \"bus\"",
        "schema": "CREATE TABLE Tourist_Attractions (Location_ID NUMBER, How_to_Get_There TEXT, Name TEXT, Tourist_Attraction_ID NUMBER); CREATE TABLE Locations (Location_Name TEXT, Location_ID NUMBER, Address TEXT);"
      }
    ],
    [
      {
        "question": "How many tourist attractions are there that Alison has visited?",
        "query": "SELECT count(*) FROM tourist_attractions AS t1 JOIN visitors AS t2 JOIN visits AS t3 ON t1.tourist_attraction_id = t3.tourist_attraction_id AND t2.tourist_id = t3.tourist_id WHERE t2.tourist_details = \"Alison\"",
        "schema": "CREATE TABLE Tourist_Attractions (Location_ID NUMBER, Attraction_Type_Code TEXT, How_to_Get_There TEXT, Tourist_Attraction_ID NUMBER, Other_Details TEXT, Name TEXT, Description TEXT); CREATE TABLE Theme_Parks (Theme_Park_Details TEXT); CREATE TABLE Visits (Tourist_ID NUMBER, Tourist_Attraction_ID NUMBER, Visit_ID NUMBER, Visit_Details TEXT); CREATE TABLE Royal_Family (Royal_Family_Details TEXT, Royal_Family_ID NUMBER); CREATE TABLE Staff (Name TEXT, Tourist_Attraction_ID NUMBER); CREATE TABLE Locations (Address TEXT, Location_ID NUMBER, Location_Name TEXT); CREATE TABLE Visitors (Tourist_Details TEXT, Tourist_ID NUMBER); CREATE TABLE Photos (Name TEXT, Tourist_Attraction_ID NUMBER);"
      },
      {
        "question": "Please show their names.",
        "query": "SELECT t1.name FROM tourist_attractions AS t1 JOIN visitors AS t2 JOIN visits AS t3 ON t1.tourist_attraction_id = t3.tourist_attraction_id AND t2.tourist_id = t3.tourist_id WHERE t2.tourist_details = \"Alison\"",
        "schema": "CREATE TABLE Theme_Parks (Theme_Park_Details TEXT); CREATE TABLE Tourist_Attractions (Location_ID NUMBER, Tourist_Attraction_ID NUMBER, How_to_Get_There TEXT, Name TEXT, Attraction_Type_Code TEXT, Description TEXT, Other_Details TEXT); CREATE TABLE Photos (Name TEXT, Tourist_Attraction_ID NUMBER); CREATE TABLE Locations (Location_ID NUMBER, Location_Name TEXT, Address TEXT); CREATE TABLE Staff (Name TEXT, Tourist_Attraction_ID NUMBER); CREATE TABLE Visitors (Tourist_ID NUMBER, Tourist_Details TEXT); CREATE TABLE Royal_Family (Royal_Family_Details TEXT, Royal_Family_ID NUMBER); CREATE TABLE Visits (Visit_ID NUMBER, Visit_Details TEXT, Tourist_ID NUMBER, Tourist_Attraction_ID NUMBER);"
      },
      {
        "question": "What are the names of tourist attractions that Rosalind has visited?",
        "query": "SELECT t1.name FROM tourist_attractions AS t1 JOIN visitors AS t2 JOIN visits AS t3 ON t1.tourist_attraction_id = t3.tourist_attraction_id AND t2.tourist_id = t3.tourist_id WHERE t2.tourist_details = \"Rosalind\"",
        "schema": "CREATE TABLE Theme_Parks (Theme_Park_Details TEXT); CREATE TABLE Photos (Tourist_Attraction_ID NUMBER, Name TEXT); CREATE TABLE Staff (Name TEXT, Tourist_Attraction_ID NUMBER); CREATE TABLE Tourist_Attractions (Tourist_Attraction_ID NUMBER, Description TEXT, Location_ID NUMBER, How_to_Get_There TEXT, Name TEXT, Other_Details TEXT, Attraction_Type_Code TEXT); CREATE TABLE Royal_Family (Royal_Family_Details TEXT, Royal_Family_ID NUMBER); CREATE TABLE Visitors (Tourist_ID NUMBER, Tourist_Details TEXT); CREATE TABLE Locations (Location_Name TEXT, Location_ID NUMBER, Address TEXT); CREATE TABLE Visits (Tourist_ID NUMBER, Visit_ID NUMBER, Visit_Details TEXT, Tourist_Attraction_ID NUMBER);"
      },
      {
        "question": "How about the names of tourist attractions that Alison visited but Rosalind did not visit?",
        "query": "SELECT t1.name FROM tourist_attractions AS t1 JOIN visitors AS t2 JOIN visits AS t3 ON t1.tourist_attraction_id = t3.tourist_attraction_id AND t2.tourist_id = t3.tourist_id WHERE t2.tourist_details = \"Alison\" EXCEPT SELECT t1.name FROM tourist_attractions AS t1 JOIN visitors AS t2 JOIN visits AS t3 ON t1.tourist_attraction_id = t3.tourist_attraction_id AND t2.tourist_id = t3.tourist_id WHERE t2.tourist_details = \"Rosalind\"",
        "schema": "CREATE TABLE Visitors (Tourist_ID NUMBER, Tourist_Details TEXT); CREATE TABLE Locations (Location_ID NUMBER, Address TEXT, Location_Name TEXT); CREATE TABLE Tourist_Attractions (Name TEXT, Attraction_Type_Code TEXT, Tourist_Attraction_ID NUMBER, Description TEXT, Other_Details TEXT, How_to_Get_There TEXT, Location_ID NUMBER); CREATE TABLE Staff (Tourist_Attraction_ID NUMBER, Name TEXT); CREATE TABLE Photos (Tourist_Attraction_ID NUMBER, Name TEXT); CREATE TABLE Visits (Visit_Details TEXT, Tourist_Attraction_ID NUMBER, Tourist_ID NUMBER, Visit_ID NUMBER); CREATE TABLE Royal_Family (Royal_Family_ID NUMBER, Royal_Family_Details TEXT); CREATE TABLE Theme_Parks (Theme_Park_Details TEXT);"
      }
    ]
  ],
  "candidate_poll": [
    [
      {
        "question": "what different poll resources exist?",
        "query": "SELECT DISTINCT poll_source FROM candidate",
        "schema": "CREATE TABLE candidate (People_ID NUMBER, Candidate_ID NUMBER, Poll_Source TEXT); CREATE TABLE people (People_ID NUMBER);"
      },
      {
        "question": "how many are there?",
        "query": "SELECT count(DISTINCT poll_source) FROM candidate",
        "schema": "CREATE TABLE people (People_ID NUMBER); CREATE TABLE candidate (Poll_Source TEXT, Candidate_ID NUMBER, People_ID NUMBER);"
      },
      {
        "question": "which one provides the greatest amount of candidate information?",
        "query": "SELECT poll_source FROM candidate GROUP BY poll_source ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE candidate (Support_rate NUMBER, People_ID NUMBER, Candidate_ID NUMBER, Poll_Source TEXT); CREATE TABLE people (People_ID NUMBER);"
      }
    ],
    [
      {
        "question": "what is the highest support rate?",
        "query": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 1",
        "schema": "CREATE TABLE people (People_ID NUMBER); CREATE TABLE candidate (Support_rate NUMBER, People_ID NUMBER);"
      },
      {
        "question": "show me the top 3.",
        "query": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "schema": "CREATE TABLE candidate (Candidate_ID NUMBER, Support_rate NUMBER, People_ID NUMBER); CREATE TABLE people (People_ID NUMBER);"
      }
    ],
    [
      {
        "question": "show the id of the candidate who got the highest oppose rate.",
        "query": "SELECT candidate_id FROM candidate ORDER BY oppose_rate DESC LIMIT 1",
        "schema": "CREATE TABLE people (People_ID NUMBER); CREATE TABLE candidate (Candidate_ID NUMBER, People_ID NUMBER, Oppose_rate NUMBER);"
      },
      {
        "question": "how about the one with the lowest oppose rate?",
        "query": "SELECT candidate_id FROM candidate ORDER BY oppose_rate LIMIT 1",
        "schema": "CREATE TABLE candidate (People_ID NUMBER, Candidate_ID NUMBER, Oppose_rate NUMBER); CREATE TABLE people (People_ID NUMBER);"
      }
    ],
    [
      {
        "question": "which candidate has the highest oppose rate?",
        "query": "SELECT * FROM candidate ORDER BY oppose_rate DESC LIMIT 1",
        "schema": "CREATE TABLE people (People_ID NUMBER, Name TEXT); CREATE TABLE candidate (Oppose_rate NUMBER, People_ID NUMBER, Candidate_ID NUMBER);"
      },
      {
        "question": "just show the poll source.",
        "query": "SELECT poll_source FROM candidate ORDER BY oppose_rate DESC LIMIT 1",
        "schema": "CREATE TABLE candidate (People_ID NUMBER, Candidate_ID NUMBER, Oppose_rate NUMBER, Poll_Source TEXT); CREATE TABLE people (People_ID NUMBER, Name TEXT);"
      }
    ],
    [
      {
        "question": "show all males.",
        "query": "SELECT * FROM people WHERE sex = 'M'",
        "schema": "CREATE TABLE people (People_ID NUMBER, Sex TEXT); CREATE TABLE candidate (Candidate_ID NUMBER, People_ID NUMBER);"
      },
      {
        "question": "what is their average height?",
        "query": "SELECT avg(height) FROM people WHERE sex = 'M'",
        "schema": "CREATE TABLE people (Sex TEXT, People_ID NUMBER, Height NUMBER); CREATE TABLE candidate (People_ID NUMBER, Candidate_ID NUMBER);"
      },
      {
        "question": "also what is the average weight?",
        "query": "SELECT avg(height) , avg(weight) FROM people WHERE sex = 'M'",
        "schema": "CREATE TABLE people (Sex TEXT, Weight NUMBER, People_ID NUMBER, Height NUMBER); CREATE TABLE candidate (People_ID NUMBER, Candidate_ID NUMBER);"
      }
    ],
    [
      {
        "question": "show the info of people who are taller than 200.",
        "query": "SELECT * FROM people WHERE height > 200",
        "schema": "CREATE TABLE people (Name TEXT, People_ID NUMBER, Height NUMBER); CREATE TABLE candidate (People_ID NUMBER, Candidate_ID NUMBER);"
      },
      {
        "question": "also list the people whose height is lower than 190.",
        "query": "SELECT * FROM people WHERE height > 200 OR height < 190",
        "schema": "CREATE TABLE people (Height NUMBER, People_ID NUMBER, Name TEXT); CREATE TABLE candidate (People_ID NUMBER, Candidate_ID NUMBER);"
      },
      {
        "question": "just show their names.",
        "query": "SELECT name FROM people WHERE height > 200 OR height < 190",
        "schema": "CREATE TABLE people (Height NUMBER, Name TEXT, People_ID NUMBER); CREATE TABLE candidate (Candidate_ID NUMBER, People_ID NUMBER);"
      }
    ],
    [
      {
        "question": "what is the average weight?",
        "query": "SELECT avg(weight) FROM people",
        "schema": "CREATE TABLE people (Weight NUMBER, People_ID NUMBER); CREATE TABLE candidate (People_ID NUMBER, Candidate_ID NUMBER);"
      },
      {
        "question": "what is the minimum?",
        "query": "SELECT min(weight) FROM people",
        "schema": "CREATE TABLE people (Weight NUMBER, People_ID NUMBER); CREATE TABLE candidate (People_ID NUMBER, Candidate_ID NUMBER);"
      },
      {
        "question": "show these values for each gender.",
        "query": "SELECT avg(weight), min(weight), sex FROM people GROUP BY sex",
        "schema": "CREATE TABLE candidate (Candidate_ID NUMBER, People_ID NUMBER); CREATE TABLE people (People_ID NUMBER, Sex TEXT, Weight NUMBER);"
      }
    ],
    [
      {
        "question": "order the candidate table by support rate from high to the low.",
        "query": "SELECT * FROM candidate ORDER BY support_rate DESC",
        "schema": "CREATE TABLE people (Height NUMBER, People_ID NUMBER); CREATE TABLE candidate (Candidate_ID NUMBER, People_ID NUMBER, Support_rate NUMBER);"
      },
      {
        "question": "what is the name of the candidate in first place?",
        "query": "SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id = t2.people_id ORDER BY t2.support_rate DESC LIMIT 1",
        "schema": "CREATE TABLE people (People_ID NUMBER, Height NUMBER, Name TEXT); CREATE TABLE candidate (Support_rate NUMBER, Candidate_ID NUMBER, People_ID NUMBER);"
      },
      {
        "question": "show the gender as well.",
        "query": "SELECT t1.name, t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id = t2.people_id ORDER BY t2.support_rate DESC LIMIT 1",
        "schema": "CREATE TABLE people (Height NUMBER, Sex TEXT, People_ID NUMBER, Name TEXT); CREATE TABLE candidate (Support_rate NUMBER, Candidate_ID NUMBER, People_ID NUMBER);"
      }
    ],
    [
      {
        "question": "what are the names of all candidates?",
        "query": "SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id = t2.people_id",
        "schema": "CREATE TABLE candidate (Candidate_ID NUMBER, People_ID NUMBER); CREATE TABLE people (People_ID NUMBER, Name TEXT);"
      },
      {
        "question": "among them, whose oppose percentage is the lowest?",
        "query": "SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id = t2.people_id ORDER BY oppose_rate LIMIT 1",
        "schema": "CREATE TABLE candidate (Candidate_ID NUMBER, Oppose_rate NUMBER, People_ID NUMBER); CREATE TABLE people (People_ID NUMBER, Name TEXT);"
      },
      {
        "question": "for each gender?",
        "query": "SELECT t1.name , t1.sex , min(oppose_rate) FROM people AS t1 JOIN candidate AS t2 ON t1.people_id = t2.people_id GROUP BY t1.sex",
        "schema": "CREATE TABLE candidate (Candidate_ID NUMBER, People_ID NUMBER, Oppose_rate NUMBER); CREATE TABLE people (Name TEXT, People_ID NUMBER, Sex TEXT);"
      }
    ],
    [
      {
        "question": "what is the average uncertain ratio of all candidates?",
        "query": "SELECT avg(unsure_rate) FROM candidate",
        "schema": "CREATE TABLE people (People_ID NUMBER); CREATE TABLE candidate (Consider_rate NUMBER, People_ID NUMBER, Unsure_rate NUMBER, Candidate_ID NUMBER);"
      },
      {
        "question": "what are the numbers for each sex?",
        "query": "SELECT t1.sex, avg(t2.unsure_rate) FROM people AS t1 JOIN candidate AS t2 ON t1.people_id = t2.people_id GROUP BY t1.sex",
        "schema": "CREATE TABLE people (Sex TEXT, People_ID NUMBER); CREATE TABLE candidate (Unsure_rate NUMBER, Consider_rate NUMBER, People_ID NUMBER, Candidate_ID NUMBER);"
      },
      {
        "question": "which gender got the higher number?",
        "query": "SELECT t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id = t2.people_id GROUP BY t1.sex ORDER BY avg(t2.unsure_rate) DESC LIMIT 1",
        "schema": "CREATE TABLE people (People_ID NUMBER, Sex TEXT); CREATE TABLE candidate (Candidate_ID NUMBER, Consider_rate NUMBER, Unsure_rate NUMBER, People_ID NUMBER);"
      }
    ],
    [
      {
        "question": "give me info of all candidates.",
        "query": "SELECT * FROM candidate",
        "schema": "CREATE TABLE people (Name TEXT, People_ID NUMBER); CREATE TABLE candidate (People_ID NUMBER, Poll_Source TEXT, Candidate_ID NUMBER);"
      },
      {
        "question": "what are their names?",
        "query": "SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id = t2.people_id",
        "schema": "CREATE TABLE candidate (Poll_Source TEXT, Candidate_ID NUMBER, People_ID NUMBER); CREATE TABLE people (Name TEXT, People_ID NUMBER);"
      },
      {
        "question": "how about those who were not candidates in the election?",
        "query": "SELECT name FROM people WHERE people_id NOT IN (SELECT people_id FROM candidate)",
        "schema": "CREATE TABLE people (Name TEXT, People_ID NUMBER); CREATE TABLE candidate (People_ID NUMBER, Candidate_ID NUMBER, Poll_Source TEXT);"
      }
    ],
    [
      {
        "question": "show the name of all candidates with their support and oppose percentages.",
        "query": "SELECT t1.name, t2.support_rate, t2.oppose_rate FROM people AS t1 JOIN candidate AS t2 ON t1.people_id = t2.people_id",
        "schema": "CREATE TABLE candidate (People_ID NUMBER, Candidate_ID NUMBER, Support_rate NUMBER, Oppose_rate NUMBER); CREATE TABLE people (Name TEXT, People_ID NUMBER);"
      },
      {
        "question": "just show those whose support percentage is higher than their oppose rate.",
        "query": "SELECT t1.name, t2.support_rate, t2.oppose_rate FROM people AS t1 JOIN candidate AS t2 ON t1.people_id = t2.people_id WHERE t2.support_rate > t2.oppose_rate",
        "schema": "CREATE TABLE people (People_ID NUMBER, Name TEXT); CREATE TABLE candidate (Oppose_rate NUMBER, People_ID NUMBER, Candidate_ID NUMBER, Support_rate NUMBER);"
      },
      {
        "question": "no need to show the support and oppose rates.",
        "query": "SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id = t2.people_id WHERE t2.support_rate > t2.oppose_rate",
        "schema": "CREATE TABLE candidate (Candidate_ID NUMBER, People_ID NUMBER, Support_rate NUMBER, Oppose_rate NUMBER); CREATE TABLE people (Name TEXT, People_ID NUMBER);"
      },
      {
        "question": "how about those whose support percentage is lower than their oppose rate.",
        "query": "SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id = t2.people_id WHERE t2.support_rate < t2.oppose_rate",
        "schema": "CREATE TABLE people (Name TEXT, People_ID NUMBER); CREATE TABLE candidate (Oppose_rate NUMBER, Support_rate NUMBER, Candidate_ID NUMBER, People_ID NUMBER);"
      }
    ],
    [
      {
        "question": "what are the names of people whose weight is less than 85?",
        "query": "SELECT name FROM people WHERE weight < 85",
        "schema": "CREATE TABLE people (Weight NUMBER, People_ID NUMBER, Name TEXT); CREATE TABLE candidate (Candidate_ID NUMBER);"
      },
      {
        "question": "how about those whose weight is greater than 85?",
        "query": "SELECT name FROM people WHERE weight > 85",
        "schema": "CREATE TABLE people (Name TEXT, People_ID NUMBER, Weight NUMBER); CREATE TABLE candidate (Candidate_ID NUMBER);"
      },
      {
        "question": "how many are there in total?",
        "query": "SELECT count(*) FROM people WHERE weight > 85",
        "schema": "CREATE TABLE candidate (Candidate_ID NUMBER); CREATE TABLE people (Name TEXT, People_ID NUMBER, Weight NUMBER);"
      },
      {
        "question": "what is the number for each gender?",
        "query": "SELECT count(*) , sex FROM people WHERE weight > 85 GROUP BY sex",
        "schema": "CREATE TABLE candidate (Candidate_ID NUMBER); CREATE TABLE people (People_ID NUMBER, Weight NUMBER, Sex TEXT, Name TEXT);"
      }
    ],
    [
      {
        "question": "what is the highest support percentage for all candidates?",
        "query": "SELECT max(support_rate) FROM candidate",
        "schema": "CREATE TABLE people (People_ID NUMBER); CREATE TABLE candidate (People_ID NUMBER, Support_rate NUMBER, Candidate_ID NUMBER);"
      },
      {
        "question": "how about the lowest consider rate and oppose rate?",
        "query": "SELECT min(consider_rate), min(oppose_rate) FROM candidate",
        "schema": "CREATE TABLE candidate (Candidate_ID NUMBER, Oppose_rate NUMBER, People_ID NUMBER, Support_rate NUMBER, Unsure_rate NUMBER, Consider_rate NUMBER); CREATE TABLE people (People_ID NUMBER);"
      }
    ],
    [
      {
        "question": "show info for all females (sex is F).",
        "query": "SELECT * FROM people WHERE sex = 'F'",
        "schema": "CREATE TABLE candidate (People_ID NUMBER, Candidate_ID NUMBER); CREATE TABLE people (People_ID NUMBER, Sex TEXT, Name TEXT);"
      },
      {
        "question": "who are candidates among them? Just show their names.",
        "query": "SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id = t2.people_id WHERE t1.sex = 'F'",
        "schema": "CREATE TABLE people (Name TEXT, Sex TEXT, People_ID NUMBER); CREATE TABLE candidate (People_ID NUMBER, Candidate_ID NUMBER);"
      },
      {
        "question": "list the result in the alphabetical order.",
        "query": "SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id = t2.people_id WHERE t1.sex = 'F' ORDER BY t1.name",
        "schema": "CREATE TABLE people (Name TEXT, Sex TEXT, People_ID NUMBER); CREATE TABLE candidate (People_ID NUMBER, Candidate_ID NUMBER);"
      }
    ]
  ],
  "twitter_1": [
    [
      {
        "question": "How many users are there?",
        "query": "SELECT count(*) FROM user_profiles",
        "schema": "CREATE TABLE user_profiles (followers NUMBER, partitionid NUMBER, name TEXT, uid NUMBER); CREATE TABLE follows (f2 NUMBER, f1 NUMBER);"
      },
      {
        "question": "Please list their names and email.",
        "query": "SELECT name, email FROM user_profiles",
        "schema": "CREATE TABLE follows (f2 NUMBER, f1 NUMBER); CREATE TABLE user_profiles (email TEXT, followers NUMBER, uid NUMBER, name TEXT, partitionid NUMBER);"
      },
      {
        "question": "Among these names, whose name contains \u2018Swift\u2019?",
        "query": "SELECT name , email FROM user_profiles WHERE name LIKE '%Swift%'",
        "schema": "CREATE TABLE user_profiles (email TEXT, name TEXT, followers NUMBER, partitionid NUMBER, uid NUMBER); CREATE TABLE follows (f1 NUMBER, f2 NUMBER);"
      }
    ],
    [
      {
        "question": "How many users are there?",
        "query": "SELECT count(*) FROM user_profiles",
        "schema": "CREATE TABLE user_profiles (uid NUMBER, followers NUMBER, partitionid NUMBER, name TEXT); CREATE TABLE follows (f1 NUMBER, f2 NUMBER);"
      },
      {
        "question": "Please list their names and email.",
        "query": "SELECT name, email FROM user_profiles",
        "schema": "CREATE TABLE user_profiles (partitionid NUMBER, email TEXT, followers NUMBER, name TEXT, uid NUMBER); CREATE TABLE follows (f2 NUMBER, f1 NUMBER);"
      },
      {
        "question": "How many followers do they have?",
        "query": "SELECT name, email, followers FROM user_profiles",
        "schema": "CREATE TABLE user_profiles (partitionid NUMBER, email TEXT, name TEXT, followers NUMBER, uid NUMBER); CREATE TABLE follows (f2 NUMBER, f1 NUMBER);"
      },
      {
        "question": "How many users' emails contain \u2018superstar\u2019 or \u2018edu\u2019?",
        "query": "SELECT count(*) FROM user_profiles WHERE email LIKE '%superstar%' OR email LIKE '%edu%'",
        "schema": "CREATE TABLE user_profiles (email TEXT, name TEXT, followers NUMBER, uid NUMBER, partitionid NUMBER); CREATE TABLE follows (f1 NUMBER, f2 NUMBER);"
      },
      {
        "question": "Please list their names.",
        "query": "SELECT name FROM user_profiles WHERE email LIKE '%superstar%' OR email LIKE '%edu%'",
        "schema": "CREATE TABLE user_profiles (uid NUMBER, followers NUMBER, partitionid NUMBER, email TEXT, name TEXT); CREATE TABLE follows (f2 NUMBER, f1 NUMBER);"
      }
    ],
    [
      {
        "question": "How many tweets are there?",
        "query": "SELECT count(*) FROM tweets",
        "schema": "CREATE TABLE tweets (id NUMBER, text TEXT, uid NUMBER, createdate TIME); CREATE TABLE user_profiles (name TEXT, uid NUMBER);"
      },
      {
        "question": "Among these tweets, how many of them are about the topic 'intern'?",
        "query": "SELECT count(*) FROM tweets WHERE text LIKE '%intern%'",
        "schema": "CREATE TABLE tweets (uid NUMBER, text TEXT, createdate TIME, id NUMBER); CREATE TABLE user_profiles (uid NUMBER, name TEXT);"
      },
      {
        "question": "Please show their texts.",
        "query": "SELECT text FROM tweets WHERE text LIKE '%intern%'",
        "schema": "CREATE TABLE user_profiles (uid NUMBER, name TEXT); CREATE TABLE tweets (text TEXT, uid NUMBER, createdate TIME, id NUMBER);"
      }
    ],
    [
      {
        "question": "How many followers does the user named \"Tyler Swift\" have?",
        "query": "SELECT count(*) FROM user_profiles AS t1 JOIN follows AS t2 ON t1.uid = t2.f1 WHERE t1.name = 'Tyler Swift'",
        "schema": "CREATE TABLE user_profiles (uid NUMBER, name TEXT, followers NUMBER); CREATE TABLE follows (f2 NUMBER, f1 NUMBER);"
      },
      {
        "question": "How many users are there whose number of followers is greater than that of the user named \"Tyler Swift\"?",
        "query": "SELECT count(*) FROM (SELECT t1.name FROM user_profiles AS t1 JOIN follows AS t2 ON t1.uid = t2.f1 GROUP BY t2.f1 HAVING count(*) > (SELECT count(*) FROM user_profiles AS t1 JOIN follows AS t2 ON t1.uid = t2.f1 WHERE t1.name = 'Tyler Swift'))",
        "schema": "CREATE TABLE user_profiles (uid NUMBER, followers NUMBER, name TEXT); CREATE TABLE follows (f1 NUMBER, f2 NUMBER);"
      },
      {
        "question": "Show the names of these users.",
        "query": "SELECT t1.name FROM user_profiles AS t1 JOIN follows AS t2 ON t1.uid = t2.f1 GROUP BY t2.f1 HAVING count(*) > (SELECT count(*) FROM user_profiles AS t1 JOIN follows AS t2 ON t1.uid = t2.f1 WHERE t1.name = 'Tyler Swift')",
        "schema": "CREATE TABLE follows (f2 NUMBER, f1 NUMBER); CREATE TABLE user_profiles (name TEXT, followers NUMBER, uid NUMBER);"
      }
    ],
    [
      {
        "question": "Who has the least number of followers?",
        "query": "SELECT name FROM user_profiles ORDER BY followers LIMIT 1",
        "schema": "CREATE TABLE follows (f1 NUMBER, f2 NUMBER); CREATE TABLE user_profiles (uid NUMBER, name TEXT, followers NUMBER);"
      },
      {
        "question": "How many users have more than one follower?",
        "query": "SELECT count(*) FROM (SELECT t1.name FROM user_profiles AS t1 JOIN follows AS t2 ON t1.uid = t2.f1 GROUP BY t2.f1 HAVING count(*) > 1)",
        "schema": "CREATE TABLE follows (f2 NUMBER, f1 NUMBER); CREATE TABLE user_profiles (followers NUMBER, uid NUMBER, name TEXT);"
      },
      {
        "question": "Show their names and emails.",
        "query": "SELECT t1.name , t1.email FROM user_profiles AS t1 JOIN follows AS t2 ON t1.uid = t2.f1 GROUP BY t2.f1 HAVING count(*) > 1",
        "schema": "CREATE TABLE follows (f2 NUMBER, f1 NUMBER); CREATE TABLE user_profiles (name TEXT, uid NUMBER, followers NUMBER, email TEXT);"
      }
    ],
    [
      {
        "question": "How many tweets are there?",
        "query": "SELECT count(*) FROM tweets",
        "schema": "CREATE TABLE tweets (text TEXT, id NUMBER, uid NUMBER, createdate TIME); CREATE TABLE user_profiles (uid NUMBER);"
      },
      {
        "question": "What is the text of the tweet with id 1?",
        "query": "SELECT text FROM tweets WHERE id = 1",
        "schema": "CREATE TABLE tweets (id NUMBER, createdate TIME, uid NUMBER, text TEXT); CREATE TABLE user_profiles (uid NUMBER);"
      },
      {
        "question": "How many tweets does each user have?",
        "query": "SELECT t1.name, count(*) FROM user_profiles AS t1 JOIN tweets AS t2 ON t1.uid = t2.uid GROUP BY t2.uid",
        "schema": "CREATE TABLE follows (f1 NUMBER, f2 NUMBER); CREATE TABLE user_profiles (followers NUMBER, name TEXT, uid NUMBER); CREATE TABLE tweets (createdate TIME, text TEXT, uid NUMBER, id NUMBER);"
      },
      {
        "question": "Who has more than one tweet?",
        "query": "SELECT t1.name FROM user_profiles AS t1 JOIN tweets AS t2 ON t1.uid = t2.uid GROUP BY t2.uid HAVING count(*) > 1",
        "schema": "CREATE TABLE user_profiles (uid NUMBER, name TEXT, followers NUMBER); CREATE TABLE follows (f1 NUMBER, f2 NUMBER); CREATE TABLE tweets (text TEXT, createdate TIME, id NUMBER, uid NUMBER);"
      }
    ],
    [
      {
        "question": "How many followers does Mary have?",
        "query": "SELECT followers FROM user_profiles WHERE name = \"Mary\"",
        "schema": "CREATE TABLE user_profiles (uid NUMBER, name TEXT, followers NUMBER); CREATE TABLE follows (f1 NUMBER, f2 NUMBER);"
      },
      {
        "question": "How about that of Susan?",
        "query": "SELECT followers FROM user_profiles WHERE name = \"Susan\"",
        "schema": "CREATE TABLE follows (f1 NUMBER, f2 NUMBER); CREATE TABLE user_profiles (followers NUMBER, partitionid NUMBER, name TEXT, uid NUMBER);"
      },
      {
        "question": "Who is followed by either one of them?",
        "query": "SELECT t3.name FROM user_profiles AS t1 JOIN follows AS t2 ON t1.uid = t2.f2 JOIN user_profiles AS t3 ON t3.uid = t2.f1 WHERE t1.name = \"Mary\" OR t1.name = \"Susan\"",
        "schema": "CREATE TABLE follows (f1 NUMBER, f2 NUMBER); CREATE TABLE user_profiles (name TEXT, followers NUMBER, partitionid NUMBER, uid NUMBER);"
      },
      {
        "question": "What are their ids?",
        "query": "SELECT t2.f1 FROM user_profiles AS t1 JOIN follows AS t2 ON t1.uid = t2.f2 WHERE t1.name = \"Mary\" OR t1.name = \"Susan\"",
        "schema": "CREATE TABLE user_profiles (partitionid NUMBER, followers NUMBER, uid NUMBER, name TEXT); CREATE TABLE follows (f2 NUMBER, f1 NUMBER);"
      }
    ],
    [
      {
        "question": "Who has the most followers?",
        "query": "SELECT name FROM user_profiles ORDER BY followers DESC LIMIT 1",
        "schema": "CREATE TABLE follows (f1 NUMBER, f2 NUMBER); CREATE TABLE user_profiles (followers NUMBER, uid NUMBER, name TEXT);"
      },
      {
        "question": "What is the minimum number of followers of all users?",
        "query": "SELECT followers FROM user_profiles ORDER BY followers LIMIT 1",
        "schema": "CREATE TABLE user_profiles (name TEXT, followers NUMBER, uid NUMBER); CREATE TABLE follows (f1 NUMBER, f2 NUMBER);"
      },
      {
        "question": "Please show the name of the user with that number of followers.",
        "query": "SELECT name FROM user_profiles ORDER BY followers LIMIT 1",
        "schema": "CREATE TABLE follows (f1 NUMBER, f2 NUMBER); CREATE TABLE user_profiles (uid NUMBER, followers NUMBER, name TEXT);"
      },
      {
        "question": "Please also show the email.",
        "query": "SELECT name , email FROM user_profiles ORDER BY followers LIMIT 1",
        "schema": "CREATE TABLE follows (f2 NUMBER, f1 NUMBER); CREATE TABLE user_profiles (followers NUMBER, email TEXT, uid NUMBER, name TEXT);"
      }
    ],
    [
      {
        "question": "How many followers does each user have?",
        "query": "SELECT name, followers FROM user_profiles",
        "schema": "CREATE TABLE follows (f1 NUMBER, f2 NUMBER); CREATE TABLE user_profiles (name TEXT, uid NUMBER, followers NUMBER);"
      },
      {
        "question": "Who has the most followers?",
        "query": "SELECT name FROM user_profiles ORDER BY followers DESC LIMIT 1",
        "schema": "CREATE TABLE follows (f2 NUMBER, f1 NUMBER); CREATE TABLE user_profiles (uid NUMBER, followers NUMBER, name TEXT);"
      },
      {
        "question": "Which top 5 users have the most followers?",
        "query": "SELECT name FROM user_profiles ORDER BY followers DESC LIMIT 5",
        "schema": "CREATE TABLE follows (f2 NUMBER, f1 NUMBER); CREATE TABLE user_profiles (followers NUMBER, name TEXT, uid NUMBER);"
      }
    ],
    [
      {
        "question": "How many users are there?",
        "query": "SELECT count(*) FROM user_profiles",
        "schema": "CREATE TABLE user_profiles (followers NUMBER, partitionid NUMBER, uid NUMBER, name TEXT); CREATE TABLE follows (f1 NUMBER, f2 NUMBER);"
      },
      {
        "question": "Show their names.",
        "query": "SELECT name FROM user_profiles",
        "schema": "CREATE TABLE follows (f1 NUMBER, f2 NUMBER); CREATE TABLE user_profiles (name TEXT, uid NUMBER, partitionid NUMBER, followers NUMBER);"
      },
      {
        "question": "Please also show the number of tweets tweeted by each of them.",
        "query": "SELECT t1.name , count(*) FROM user_profiles AS t1 JOIN tweets AS t2 ON t1.uid = t2.uid GROUP BY t2.uid",
        "schema": "CREATE TABLE tweets (uid NUMBER, text TEXT, id NUMBER); CREATE TABLE follows (f2 NUMBER, f1 NUMBER); CREATE TABLE user_profiles (name TEXT, followers NUMBER, uid NUMBER, partitionid NUMBER);"
      }
    ],
    [
      {
        "question": "How many users tweeted less than twice?",
        "query": "SELECT count(*) FROM (SELECT count(*) FROM user_profiles AS t1 JOIN tweets AS t2 ON t1.uid = t2.uid GROUP BY t2.uid HAVING count(*) < 2)",
        "schema": "CREATE TABLE follows (f1 NUMBER, f2 NUMBER); CREATE TABLE tweets (uid NUMBER, text TEXT, id NUMBER, createdate TIME); CREATE TABLE user_profiles (uid NUMBER, name TEXT);"
      },
      {
        "question": "Show their names.",
        "query": "SELECT t1.name FROM user_profiles AS t1 JOIN tweets AS t2 ON t1.uid = t2.uid GROUP BY t2.uid HAVING count(*) < 2",
        "schema": "CREATE TABLE tweets (createdate TIME, uid NUMBER, id NUMBER, text TEXT); CREATE TABLE follows (f2 NUMBER, f1 NUMBER); CREATE TABLE user_profiles (name TEXT, uid NUMBER);"
      },
      {
        "question": "Please also show their partition id",
        "query": "SELECT t1.name , t1.partitionid FROM user_profiles AS t1 JOIN tweets AS t2 ON t1.uid = t2.uid GROUP BY t2.uid HAVING count(*) < 2",
        "schema": "CREATE TABLE tweets (text TEXT, id NUMBER, uid NUMBER, createdate TIME); CREATE TABLE user_profiles (name TEXT, uid NUMBER, partitionid NUMBER); CREATE TABLE follows (f1 NUMBER, f2 NUMBER);"
      }
    ],
    [
      {
        "question": "How many users have some tweets?",
        "query": "SELECT count(*) FROM user_profiles WHERE UID IN (SELECT UID FROM tweets)",
        "schema": "CREATE TABLE follows (f1 NUMBER, f2 NUMBER); CREATE TABLE user_profiles (name TEXT, partitionid NUMBER, uid NUMBER); CREATE TABLE tweets (text TEXT, createdate TIME, uid NUMBER, id NUMBER);"
      },
      {
        "question": "How about the number of users that have tweeted more than once?",
        "query": "SELECT count(*) FROM (SELECT count(*) FROM user_profiles AS t1 JOIN tweets AS t2 ON t1.uid = t2.uid GROUP BY t2.uid HAVING count(*) > 1)",
        "schema": "CREATE TABLE follows (f1 NUMBER, f2 NUMBER); CREATE TABLE tweets (id NUMBER, text TEXT, createdate TIME, uid NUMBER); CREATE TABLE user_profiles (followers NUMBER, name TEXT, uid NUMBER, partitionid NUMBER);"
      },
      {
        "question": "Show their names and number of tweets tweeted by them.",
        "query": "SELECT t1.name , count(*) FROM user_profiles AS t1 JOIN tweets AS t2 ON t1.uid = t2.uid GROUP BY t2.uid HAVING count(*) > 1",
        "schema": "CREATE TABLE user_profiles (partitionid NUMBER, followers NUMBER, uid NUMBER, name TEXT); CREATE TABLE follows (f1 NUMBER, f2 NUMBER); CREATE TABLE tweets (createdate TIME, id NUMBER, text TEXT, uid NUMBER);"
      }
    ],
    [
      {
        "question": "How many users have some tweets?",
        "query": "SELECT count(*) FROM user_profiles WHERE UID IN (SELECT UID FROM tweets)",
        "schema": "CREATE TABLE user_profiles (partitionid NUMBER, name TEXT, uid NUMBER); CREATE TABLE follows (f2 NUMBER, f1 NUMBER); CREATE TABLE tweets (createdate TIME, uid NUMBER, text TEXT, id NUMBER);"
      },
      {
        "question": "Show the name of these users and their number of followers.",
        "query": "SELECT name, followers FROM user_profiles WHERE UID IN (SELECT UID FROM tweets)",
        "schema": "CREATE TABLE user_profiles (partitionid NUMBER, uid NUMBER, name TEXT, followers NUMBER); CREATE TABLE tweets (id NUMBER, text TEXT, createdate TIME, uid NUMBER); CREATE TABLE follows (f1 NUMBER, f2 NUMBER);"
      },
      {
        "question": "What is the average number of followers for these users?",
        "query": "SELECT avg(followers) FROM user_profiles WHERE UID IN (SELECT UID FROM tweets)",
        "schema": "CREATE TABLE tweets (id NUMBER, createdate TIME, text TEXT, uid NUMBER); CREATE TABLE follows (f2 NUMBER, f1 NUMBER); CREATE TABLE user_profiles (partitionid NUMBER, followers NUMBER, name TEXT, uid NUMBER);"
      }
    ]
  ],
  "tracking_orders": [
    [
      {
        "question": "What is the id of the customer who made the most recent order?",
        "query": "SELECT customer_id FROM orders ORDER BY date_order_placed DESC LIMIT 1",
        "schema": "CREATE TABLE Customers (customer_id NUMBER, customer_details TEXT, customer_name TEXT); CREATE TABLE Orders (order_status TEXT, date_order_placed TIME, order_details TEXT, customer_id NUMBER, order_id NUMBER); CREATE TABLE Order_Items (order_id NUMBER); CREATE TABLE Invoices (invoice_date TIME);"
      },
      {
        "question": "What's its status?",
        "query": "SELECT order_status FROM orders ORDER BY date_order_placed DESC LIMIT 1",
        "schema": "CREATE TABLE Customers (customer_details TEXT, customer_id NUMBER, customer_name TEXT); CREATE TABLE Orders (order_details TEXT, customer_id NUMBER, order_status TEXT, date_order_placed TIME, order_id NUMBER); CREATE TABLE Order_Items (order_id NUMBER, order_item_status TEXT); CREATE TABLE Invoices (invoice_date TIME);"
      },
      {
        "question": "What's its id?",
        "query": "SELECT order_id FROM orders ORDER BY date_order_placed DESC LIMIT 1",
        "schema": "CREATE TABLE Orders (order_id NUMBER, customer_id NUMBER, order_status TEXT, date_order_placed TIME, order_details TEXT); CREATE TABLE Invoices (invoice_date TIME); CREATE TABLE Customers (customer_id NUMBER, customer_details TEXT, customer_name TEXT); CREATE TABLE Order_Items (order_item_status TEXT, order_id NUMBER);"
      }
    ],
    [
      {
        "question": "When was the oldest order placed?",
        "query": "SELECT date_order_placed FROM orders ORDER BY date_order_placed LIMIT 1",
        "schema": "CREATE TABLE Orders (order_details TEXT, order_id NUMBER, date_order_placed TIME, order_status TEXT); CREATE TABLE Shipments (order_id NUMBER, shipment_date TIME); CREATE TABLE Invoices (invoice_number NUMBER, invoice_date TIME); CREATE TABLE Shipment_Items (order_item_id NUMBER); CREATE TABLE Order_Items (order_item_id NUMBER, order_id NUMBER, order_item_details TEXT);"
      },
      {
        "question": "What's the id of the customer who placed it?",
        "query": "SELECT customer_id FROM orders ORDER BY date_order_placed LIMIT 1",
        "schema": "CREATE TABLE Customers (customer_name TEXT, customer_details TEXT, customer_id NUMBER); CREATE TABLE Invoices (invoice_date TIME, invoice_number NUMBER); CREATE TABLE Shipment_Items (order_item_id NUMBER); CREATE TABLE Shipments (shipment_date TIME, order_id NUMBER); CREATE TABLE Order_Items (order_id NUMBER, order_item_details TEXT, order_item_id NUMBER); CREATE TABLE Orders (order_status TEXT, order_details TEXT, order_id NUMBER, date_order_placed TIME, customer_id NUMBER);"
      },
      {
        "question": "What's the id of the order?",
        "query": "SELECT order_id FROM orders ORDER BY date_order_placed LIMIT 1",
        "schema": "CREATE TABLE Invoices (invoice_date TIME, invoice_number NUMBER); CREATE TABLE Shipment_Items (order_item_id NUMBER); CREATE TABLE Orders (order_status TEXT, customer_id NUMBER, order_id NUMBER, date_order_placed TIME, order_details TEXT); CREATE TABLE Customers (customer_id NUMBER, customer_name TEXT, customer_details TEXT); CREATE TABLE Order_Items (order_item_id NUMBER, order_item_details TEXT, order_id NUMBER); CREATE TABLE Shipments (order_id NUMBER, shipment_date TIME);"
      },
      {
        "question": "Show me both id's.",
        "query": "SELECT order_id , customer_id FROM orders ORDER BY date_order_placed LIMIT 1",
        "schema": "CREATE TABLE Customers (customer_id NUMBER, customer_name TEXT, customer_details TEXT); CREATE TABLE Orders (customer_id NUMBER, order_id NUMBER, order_details TEXT, date_order_placed TIME, order_status TEXT); CREATE TABLE Shipment_Items (order_item_id NUMBER); CREATE TABLE Shipments (order_id NUMBER, shipment_date TIME); CREATE TABLE Invoices (invoice_number NUMBER, invoice_date TIME); CREATE TABLE Order_Items (order_item_details TEXT, order_item_id NUMBER, order_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show me all the orders with status \"Packing\"",
        "query": "SELECT * FROM orders WHERE order_status = \"Packing\"",
        "schema": "CREATE TABLE Orders (order_details TEXT, order_id NUMBER, customer_id NUMBER, order_status TEXT); CREATE TABLE Shipments (order_id NUMBER); CREATE TABLE Order_Items (order_id NUMBER, order_item_id NUMBER, order_item_status TEXT); CREATE TABLE Customers (customer_id NUMBER);"
      },
      {
        "question": "Who made those orders?",
        "query": "SELECT t1.customer_name FROM customers AS t1 JOIN orders AS t2 ON t1.customer_id = t2.customer_id WHERE t2.order_status = \"Packing\"",
        "schema": "CREATE TABLE Order_Items (order_item_status TEXT, order_id NUMBER, order_item_id NUMBER); CREATE TABLE Orders (order_id NUMBER, customer_id NUMBER, order_details TEXT, order_status TEXT); CREATE TABLE Customers (customer_id NUMBER, customer_name TEXT); CREATE TABLE Shipments (order_id NUMBER);"
      },
      {
        "question": "Show me the distinct customer names.",
        "query": "SELECT DISTINCT t1.customer_name FROM customers AS t1 JOIN orders AS t2 ON t1.customer_id = t2.customer_id WHERE t2.order_status = \"Packing\"",
        "schema": "CREATE TABLE Order_Items (order_id NUMBER, order_item_id NUMBER, order_item_status TEXT); CREATE TABLE Customers (customer_name TEXT, customer_id NUMBER); CREATE TABLE Shipments (order_id NUMBER); CREATE TABLE Orders (customer_id NUMBER, order_id NUMBER, order_status TEXT, order_details TEXT);"
      }
    ],
    [
      {
        "question": "Show me all the orders with status \"On Road\"",
        "query": "SELECT * FROM orders WHERE order_status = \"On Road\"",
        "schema": "CREATE TABLE Shipments (order_id NUMBER); CREATE TABLE Orders (customer_id NUMBER, order_details TEXT, order_id NUMBER, order_status TEXT); CREATE TABLE Order_Items (order_item_id NUMBER, order_item_status TEXT, order_id NUMBER); CREATE TABLE Customers (customer_id NUMBER);"
      },
      {
        "question": "Who made those orders?",
        "query": "SELECT t1.customer_name FROM customers AS t1 JOIN orders AS t2 ON t1.customer_id = t2.customer_id WHERE t2.order_status = \"On Road\"",
        "schema": "CREATE TABLE Order_Items (order_id NUMBER, order_item_status TEXT, order_item_id NUMBER); CREATE TABLE Customers (customer_name TEXT, customer_id NUMBER); CREATE TABLE Shipments (order_id NUMBER); CREATE TABLE Orders (order_id NUMBER, customer_id NUMBER, order_details TEXT, order_status TEXT);"
      },
      {
        "question": "Show me the distinct customer names.",
        "query": "SELECT DISTINCT t1.customer_name FROM customers AS t1 JOIN orders AS t2 ON t1.customer_id = t2.customer_id WHERE t2.order_status = \"On Road\"",
        "schema": "CREATE TABLE Customers (customer_id NUMBER, customer_name TEXT); CREATE TABLE Shipments (order_id NUMBER); CREATE TABLE Order_Items (order_item_id NUMBER, order_id NUMBER, order_item_status TEXT); CREATE TABLE Orders (order_status TEXT, customer_id NUMBER, order_id NUMBER, order_details TEXT);"
      }
    ],
    [
      {
        "question": "What is the id of the customer who has the most orders?",
        "query": "SELECT t1.customer_id FROM customers AS t1 JOIN orders AS t2 ON t1.customer_id = t2.customer_id GROUP BY t1.customer_id ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Order_Items (order_id NUMBER); CREATE TABLE Orders (customer_id NUMBER, order_id NUMBER); CREATE TABLE Customers (customer_id NUMBER, customer_details TEXT, customer_name TEXT);"
      },
      {
        "question": "Show me details",
        "query": "SELECT t1.customer_details FROM customers AS t1 JOIN orders AS t2 ON t1.customer_id = t2.customer_id GROUP BY t1.customer_id ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Orders (order_details TEXT, customer_id NUMBER, order_id NUMBER); CREATE TABLE Customers (customer_id NUMBER, customer_name TEXT, customer_details TEXT); CREATE TABLE Order_Items (order_id NUMBER);"
      },
      {
        "question": "Show me his or her name.",
        "query": "SELECT t1.customer_name FROM customers AS t1 JOIN orders AS t2 ON t1.customer_id = t2.customer_id GROUP BY t1.customer_id ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Order_Items (order_id NUMBER); CREATE TABLE Orders (order_id NUMBER, customer_id NUMBER, order_details TEXT); CREATE TABLE Customers (customer_name TEXT, customer_details TEXT, customer_id NUMBER);"
      }
    ],
    [
      {
        "question": "What is the name of the customer who has the most orders?",
        "query": "SELECT t1.customer_name FROM customers AS t1 JOIN orders AS t2 ON t1.customer_id = t2.customer_id GROUP BY t1.customer_id ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Customers (customer_name TEXT, customer_id NUMBER, customer_details TEXT); CREATE TABLE Orders (customer_id NUMBER, order_id NUMBER); CREATE TABLE Order_Items (order_id NUMBER);"
      },
      {
        "question": "What's his or her id?",
        "query": "SELECT t1.customer_id FROM customers AS t1 JOIN orders AS t2 ON t1.customer_id = t2.customer_id GROUP BY t1.customer_id ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Customers (customer_details TEXT, customer_name TEXT, customer_id NUMBER); CREATE TABLE Order_Items (order_id NUMBER); CREATE TABLE Orders (customer_id NUMBER, order_id NUMBER);"
      }
    ],
    [
      {
        "question": "Any customer named Jeramie?",
        "query": "SELECT * FROM customers WHERE customer_name = \"Jeramie\"",
        "schema": "CREATE TABLE Customers (customer_name TEXT, customer_details TEXT, customer_id NUMBER);"
      },
      {
        "question": "Show me the status of his orders",
        "query": "SELECT t2.order_status FROM customers AS t1 JOIN orders AS t2 ON t1.customer_id = t2.customer_id WHERE t1.customer_name = \"Jeramie\"",
        "schema": "CREATE TABLE Orders (order_id NUMBER, order_status TEXT, customer_id NUMBER); CREATE TABLE Customers (customer_details TEXT, customer_id NUMBER, customer_name TEXT); CREATE TABLE Order_Items (order_id NUMBER, order_item_status TEXT);"
      },
      {
        "question": "Show me the id's of his orders as well.",
        "query": "SELECT t2.order_id, t2.order_status FROM customers AS t1 JOIN orders AS t2 ON t1.customer_id = t2.customer_id WHERE t1.customer_name = \"Jeramie\"",
        "schema": "CREATE TABLE Customers (customer_name TEXT, customer_id NUMBER, customer_details TEXT); CREATE TABLE Orders (order_status TEXT, order_id NUMBER, customer_id NUMBER); CREATE TABLE Order_Items (order_id NUMBER, order_item_status TEXT);"
      }
    ],
    [
      {
        "question": "Any customer named Jeramie?",
        "query": "SELECT * FROM customers WHERE customer_name = \"Jeramie\"",
        "schema": "CREATE TABLE Customers (customer_name TEXT, customer_details TEXT, customer_id NUMBER);"
      },
      {
        "question": "Show me the status of his orders",
        "query": "SELECT t2.order_status FROM customers AS t1 JOIN orders AS t2 ON t1.customer_id = t2.customer_id WHERE t1.customer_name = \"Jeramie\"",
        "schema": "CREATE TABLE Orders (order_status TEXT, order_id NUMBER, customer_id NUMBER); CREATE TABLE Customers (customer_details TEXT, customer_name TEXT, customer_id NUMBER); CREATE TABLE Order_Items (order_item_status TEXT, order_id NUMBER);"
      },
      {
        "question": "Now show me the dates of those orders.",
        "query": "SELECT t2.date_order_placed FROM customers AS t1 JOIN orders AS t2 ON t1.customer_id = t2.customer_id WHERE t1.customer_name = \"Jeramie\"",
        "schema": "CREATE TABLE Invoices (invoice_date TIME); CREATE TABLE Orders (order_status TEXT, order_id NUMBER, customer_id NUMBER, date_order_placed TIME); CREATE TABLE Order_Items (order_id NUMBER, order_item_status TEXT); CREATE TABLE Customers (customer_details TEXT, customer_id NUMBER, customer_name TEXT);"
      }
    ],
    [
      {
        "question": "Show me the orders placed between 2009-01-01 and 2010-01-01.",
        "query": "SELECT * FROM orders WHERE date_order_placed >= \"2009-01-01\" AND date_order_placed <= \"2010-01-01\"",
        "schema": "CREATE TABLE Order_Items (order_id NUMBER, order_item_id NUMBER); CREATE TABLE Orders (order_status TEXT, order_details TEXT, date_order_placed TIME, customer_id NUMBER, order_id NUMBER); CREATE TABLE Shipments (order_id NUMBER);"
      },
      {
        "question": "Show me the customers who made those orders.",
        "query": "SELECT t1.customer_name FROM customers AS t1 JOIN orders AS t2 ON t1.customer_id = t2.customer_id WHERE t2.date_order_placed >= \"2009-01-01\" AND t2.date_order_placed <= \"2010-01-01\"",
        "schema": "CREATE TABLE Customers (customer_id NUMBER, customer_details TEXT, customer_name TEXT); CREATE TABLE Order_Items (order_item_id NUMBER, order_id NUMBER); CREATE TABLE Orders (order_details TEXT, order_status TEXT, order_id NUMBER, customer_id NUMBER, date_order_placed TIME); CREATE TABLE Shipments (order_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show me the orders placed between 1975-01-01 and 1976-01-01.",
        "query": "SELECT * FROM orders WHERE date_order_placed >= \"1975-01-01\" AND date_order_placed <= \"1976-01-01\"",
        "schema": "CREATE TABLE Shipments (order_id NUMBER); CREATE TABLE Orders (date_order_placed TIME, order_id NUMBER, customer_id NUMBER, order_status TEXT, order_details TEXT); CREATE TABLE Order_Items (order_item_id NUMBER, order_id NUMBER);"
      },
      {
        "question": "Show me the product ids of those orders.",
        "query": "SELECT DISTINCT t2.product_id FROM orders AS t1 JOIN order_items AS t2 ON t1.order_id = t2.order_id WHERE t1.date_order_placed >= \"1975-01-01\" AND t1.date_order_placed <= \"1976-01-01\"",
        "schema": "CREATE TABLE Shipments (order_id NUMBER); CREATE TABLE Products (product_id NUMBER, product_name TEXT); CREATE TABLE Order_Items (order_item_id NUMBER, product_id NUMBER, order_id NUMBER); CREATE TABLE Orders (date_order_placed TIME, order_status TEXT, customer_id NUMBER, order_details TEXT, order_id NUMBER);"
      }
    ],
    [
      {
        "question": "Find me customers who have order status \"On Road\".",
        "query": "SELECT t1.customer_name FROM customers AS t1 JOIN orders AS t2 ON t1.customer_id = t2.customer_id WHERE t2.order_status = \"On Road\"",
        "schema": "CREATE TABLE Orders (order_status TEXT, customer_id NUMBER, order_id NUMBER); CREATE TABLE Order_Items (order_item_status TEXT, order_id NUMBER); CREATE TABLE Customers (customer_details TEXT, customer_name TEXT, customer_id NUMBER);"
      },
      {
        "question": "Now find me customers who have order status \"Shipped\".",
        "query": "SELECT t1.customer_name FROM customers AS t1 JOIN orders AS t2 ON t1.customer_id = t2.customer_id WHERE t2.order_status = \"Shipped\"",
        "schema": "CREATE TABLE Customers (customer_id NUMBER, customer_details TEXT, customer_name TEXT); CREATE TABLE Orders (order_status TEXT, order_id NUMBER, customer_id NUMBER); CREATE TABLE Order_Items (order_item_status TEXT, order_id NUMBER);"
      },
      {
        "question": "Now show me customers with both of those order statuses.",
        "query": "SELECT t1.customer_name FROM customers AS t1 JOIN orders AS t2 ON t1.customer_id = t2.customer_id WHERE t2.order_status = \"On Road\" INTERSECT SELECT t1.customer_name FROM customers AS t1 JOIN orders AS t2 ON t1.customer_id = t2.customer_id WHERE t2.order_status = \"Shipped\"",
        "schema": "CREATE TABLE Orders (order_status TEXT, customer_id NUMBER, order_id NUMBER); CREATE TABLE Customers (customer_details TEXT, customer_name TEXT, customer_id NUMBER); CREATE TABLE Order_Items (order_id NUMBER, order_item_status TEXT);"
      }
    ],
    [
      {
        "question": "Find me ids of customers who have order status \"On Road\".",
        "query": "SELECT t1.customer_id FROM customers AS t1 JOIN orders AS t2 ON t1.customer_id = t2.customer_id WHERE t2.order_status = \"On Road\"",
        "schema": "CREATE TABLE Order_Items (order_id NUMBER); CREATE TABLE Customers (customer_details TEXT, customer_id NUMBER, customer_name TEXT); CREATE TABLE Orders (customer_id NUMBER, order_id NUMBER, order_status TEXT);"
      },
      {
        "question": "Now find me ids of customers who have order status \"Shipped\".",
        "query": "SELECT t1.customer_id FROM customers AS t1 JOIN orders AS t2 ON t1.customer_id = t2.customer_id WHERE t2.order_status = \"Shipped\"",
        "schema": "CREATE TABLE Customers (customer_id NUMBER, customer_name TEXT, customer_details TEXT); CREATE TABLE Order_Items (order_id NUMBER); CREATE TABLE Orders (customer_id NUMBER, order_status TEXT, order_id NUMBER);"
      },
      {
        "question": "Now show me ids of customers with both of those order statuses.",
        "query": "SELECT t1.customer_id FROM customers AS t1 JOIN orders AS t2 ON t1.customer_id = t2.customer_id WHERE t2.order_status = \"On Road\" INTERSECT SELECT t1.customer_name FROM customers AS t1 JOIN orders AS t2 ON t1.customer_id = t2.customer_id WHERE t2.order_status = \"Shipped\"",
        "schema": "CREATE TABLE Orders (order_id NUMBER, order_status TEXT, customer_id NUMBER); CREATE TABLE Customers (customer_id NUMBER, customer_details TEXT, customer_name TEXT); CREATE TABLE Order_Items (order_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show me the order with shipment tracking number 3452.",
        "query": "SELECT * FROM orders AS t1 JOIN shipments AS t2 ON t1.order_id = t2.order_id WHERE shipment_tracking_number = 3452",
        "schema": "CREATE TABLE Shipments (shipment_tracking_number TEXT, order_id NUMBER, shipment_id NUMBER); CREATE TABLE Shipment_Items (shipment_id NUMBER, order_item_id NUMBER); CREATE TABLE Orders (order_id NUMBER, order_details TEXT); CREATE TABLE Order_Items (order_item_id NUMBER, order_item_details TEXT, order_id NUMBER);"
      },
      {
        "question": "When was that order placed?",
        "query": "SELECT t1.date_order_placed FROM orders AS t1 JOIN shipments AS t2 ON t1.order_id = t2.order_id WHERE t2.shipment_tracking_number = 3452",
        "schema": "CREATE TABLE Shipment_Items (order_item_id NUMBER, shipment_id NUMBER); CREATE TABLE Orders (date_order_placed TIME, order_details TEXT, order_id NUMBER); CREATE TABLE Order_Items (order_item_details TEXT, order_id NUMBER, order_item_id NUMBER); CREATE TABLE Shipments (shipment_date TIME, shipment_tracking_number TEXT, order_id NUMBER, shipment_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show me the order with invoice number 10.",
        "query": "SELECT * FROM orders AS t1 JOIN shipments AS t2 ON t1.order_id = t2.order_id WHERE invoice_number = 10",
        "schema": "CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Order_Items (order_item_id NUMBER, order_id NUMBER, order_item_details TEXT); CREATE TABLE Shipment_Items (order_item_id NUMBER); CREATE TABLE Shipments (order_id NUMBER, invoice_number NUMBER); CREATE TABLE Orders (order_details TEXT, order_status TEXT, order_id NUMBER); CREATE TABLE Invoices (invoice_number NUMBER);"
      },
      {
        "question": "When was that order placed? Give me the date.",
        "query": "SELECT t1.date_order_placed FROM orders AS t1 JOIN shipments AS t2 ON t1.order_id = t2.order_id WHERE t2.invoice_number = 10",
        "schema": "CREATE TABLE Invoices (invoice_date TIME, invoice_number NUMBER); CREATE TABLE Shipments (order_id NUMBER, invoice_number NUMBER, shipment_date TIME, shipment_id NUMBER); CREATE TABLE Shipment_Items (order_item_id NUMBER); CREATE TABLE Order_Items (order_id NUMBER, order_item_details TEXT, order_item_id NUMBER); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Orders (order_status TEXT, date_order_placed TIME, order_details TEXT, order_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show me all the products.",
        "query": "SELECT * FROM products",
        "schema": "CREATE TABLE Order_Items (product_id NUMBER); CREATE TABLE Products (product_name TEXT, product_details TEXT, product_id NUMBER);"
      },
      {
        "question": "Show me only the products that have been ordered.",
        "query": "SELECT * FROM orders AS t1 JOIN order_items AS t2 JOIN products AS t3 ON t1.order_id = t2.order_id AND t2.product_id = t3.product_id GROUP BY t3.product_id",
        "schema": "CREATE TABLE Order_Items (product_id NUMBER, order_id NUMBER, order_item_details TEXT, order_item_id NUMBER); CREATE TABLE Shipments (order_id NUMBER); CREATE TABLE Products (product_id NUMBER, product_name TEXT, product_details TEXT); CREATE TABLE Orders (order_status TEXT, order_id NUMBER);"
      },
      {
        "question": "Show me only the count and id of each product",
        "query": "SELECT count(*) , t3.product_id FROM orders AS t1 JOIN order_items AS t2 JOIN products AS t3 ON t1.order_id = t2.order_id AND t2.product_id = t3.product_id GROUP BY t3.product_id",
        "schema": "CREATE TABLE Products (product_name TEXT, product_details TEXT, product_id NUMBER); CREATE TABLE Orders (order_id NUMBER, order_status TEXT); CREATE TABLE Shipments (order_id NUMBER); CREATE TABLE Order_Items (order_item_details TEXT, order_id NUMBER, product_id NUMBER, order_item_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show me all the products.",
        "query": "SELECT * FROM products",
        "schema": "CREATE TABLE Products (product_id NUMBER, product_details TEXT, product_name TEXT); CREATE TABLE Order_Items (product_id NUMBER);"
      },
      {
        "question": "Show me only the products that have been ordered.",
        "query": "SELECT * FROM orders AS t1 JOIN order_items AS t2 JOIN products AS t3 ON t1.order_id = t2.order_id AND t2.product_id = t3.product_id GROUP BY t3.product_id",
        "schema": "CREATE TABLE Order_Items (order_item_id NUMBER, order_item_details TEXT, product_id NUMBER, order_id NUMBER); CREATE TABLE Products (product_id NUMBER, product_details TEXT, product_name TEXT); CREATE TABLE Orders (order_id NUMBER, order_status TEXT); CREATE TABLE Shipments (order_id NUMBER);"
      },
      {
        "question": "Show me only the name and count of each product",
        "query": "SELECT t3.product_name , count(*) FROM orders AS t1 JOIN order_items AS t2 JOIN products AS t3 ON t1.order_id = t2.order_id AND t2.product_id = t3.product_id GROUP BY t3.product_id",
        "schema": "CREATE TABLE Orders (order_id NUMBER, order_status TEXT); CREATE TABLE Order_Items (order_id NUMBER, order_item_id NUMBER, order_item_details TEXT, product_id NUMBER); CREATE TABLE Shipments (order_id NUMBER); CREATE TABLE Products (product_name TEXT, product_id NUMBER, product_details TEXT);"
      }
    ],
    [
      {
        "question": "Show me the 10 most recently shipped orders.",
        "query": "SELECT * FROM shipments ORDER BY shipment_date DESC LIMIT 10",
        "schema": "CREATE TABLE Order_Items (order_item_id NUMBER, order_id NUMBER); CREATE TABLE Invoices (invoice_date TIME); CREATE TABLE Shipments (shipment_date TIME, order_id NUMBER, shipment_id NUMBER); CREATE TABLE Shipment_Items (shipment_id NUMBER, order_item_id NUMBER); CREATE TABLE Orders (date_order_placed TIME, order_id NUMBER, customer_id NUMBER, order_status TEXT); CREATE TABLE Customers (customer_id NUMBER, customer_details TEXT, customer_name TEXT);"
      },
      {
        "question": "Ok, show me only the most recent one.",
        "query": "SELECT * FROM shipments ORDER BY shipment_date DESC LIMIT 1",
        "schema": "CREATE TABLE Orders (order_status TEXT, order_id NUMBER, date_order_placed TIME, customer_id NUMBER); CREATE TABLE Invoices (invoice_date TIME); CREATE TABLE Customers (customer_details TEXT, customer_id NUMBER, customer_name TEXT); CREATE TABLE Order_Items (order_id NUMBER, order_item_id NUMBER); CREATE TABLE Shipments (shipment_date TIME, order_id NUMBER, shipment_id NUMBER); CREATE TABLE Shipment_Items (shipment_id NUMBER, order_item_id NUMBER);"
      },
      {
        "question": "Show me its id.",
        "query": "SELECT order_id FROM shipments WHERE shipment_date = (SELECT max(shipment_date) FROM shipments)",
        "schema": "CREATE TABLE Shipment_Items (order_item_id NUMBER, shipment_id NUMBER); CREATE TABLE Invoices (invoice_date TIME); CREATE TABLE Customers (customer_name TEXT, customer_id NUMBER, customer_details TEXT); CREATE TABLE Orders (order_id NUMBER, date_order_placed TIME, order_status TEXT, customer_id NUMBER); CREATE TABLE Order_Items (order_id NUMBER, order_item_id NUMBER); CREATE TABLE Shipments (order_id NUMBER, shipment_date TIME, shipment_id NUMBER);"
      }
    ],
    [
      {
        "question": "Who ordered the order with most items?",
        "query": "SELECT t1.customer_id FROM orders AS t1 JOIN order_items AS t2 ON t1.order_id = t2.order_id GROUP BY t1.order_id ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Customers (customer_name TEXT, customer_id NUMBER); CREATE TABLE Order_Items (order_id NUMBER, order_item_status TEXT, order_item_id NUMBER, product_id NUMBER, order_item_details TEXT); CREATE TABLE Products (product_name TEXT, product_id NUMBER); CREATE TABLE Shipments (order_id NUMBER); CREATE TABLE Orders (customer_id NUMBER, order_status TEXT, order_details TEXT, order_id NUMBER); CREATE TABLE Shipment_Items (order_item_id NUMBER);"
      },
      {
        "question": "What is its order id?",
        "query": "SELECT t1.order_id FROM orders AS t1 JOIN order_items AS t2 ON t1.order_id = t2.order_id GROUP BY t1.order_id ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Order_Items (order_item_status TEXT, order_id NUMBER, order_item_id NUMBER, order_item_details TEXT, product_id NUMBER); CREATE TABLE Customers (customer_id NUMBER, customer_name TEXT); CREATE TABLE Shipments (order_id NUMBER); CREATE TABLE Products (product_id NUMBER, product_name TEXT); CREATE TABLE Shipment_Items (order_item_id NUMBER); CREATE TABLE Orders (order_details TEXT, order_status TEXT, order_id NUMBER, customer_id NUMBER);"
      }
    ],
    [
      {
        "question": "What is the id of the order with the most items?",
        "query": "SELECT t1.order_id FROM orders AS t1 JOIN order_items AS t2 ON t1.order_id = t2.order_id GROUP BY t1.order_id ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Order_Items (order_item_id NUMBER, product_id NUMBER, order_item_details TEXT, order_id NUMBER, order_item_status TEXT); CREATE TABLE Products (product_name TEXT, product_id NUMBER); CREATE TABLE Shipment_Items (shipment_id NUMBER, order_item_id NUMBER); CREATE TABLE Orders (customer_id NUMBER, order_id NUMBER, order_details TEXT); CREATE TABLE Shipments (order_id NUMBER, shipment_id NUMBER); CREATE TABLE Customers (customer_id NUMBER);"
      },
      {
        "question": "What is the id of the customer who ordered it?",
        "query": "SELECT t1.customer_name FROM customers AS t1 JOIN orders AS t2 ON t1.customer_id = t2.customer_id GROUP BY t1.customer_id ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Shipments (shipment_id NUMBER, order_id NUMBER); CREATE TABLE Order_Items (order_item_details TEXT, product_id NUMBER, order_item_status TEXT, order_id NUMBER, order_item_id NUMBER); CREATE TABLE Orders (order_details TEXT, customer_id NUMBER, order_id NUMBER); CREATE TABLE Products (product_id NUMBER, product_name TEXT); CREATE TABLE Customers (customer_name TEXT, customer_id NUMBER); CREATE TABLE Shipment_Items (shipment_id NUMBER, order_item_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show me all the dates between 1989-09-03 and 2007-12-25 that invoice number was created.",
        "query": "SELECT invoice_date FROM invoices WHERE invoice_date > \"1989-09-03\" AND invoice_date < \"2007-12-25\"",
        "schema": "CREATE TABLE Orders (order_id NUMBER); CREATE TABLE Invoices (invoice_number NUMBER, invoice_date TIME); CREATE TABLE Shipments (invoice_number NUMBER);"
      },
      {
        "question": "Sorry, I meant dates before 1989-09-03 and after 2007-12-25.",
        "query": "SELECT invoice_date FROM invoices WHERE invoice_date < \"1989-09-03\" OR invoice_date > \"2007-12-25\"",
        "schema": "CREATE TABLE Shipments (invoice_number NUMBER); CREATE TABLE Orders (order_id NUMBER); CREATE TABLE Invoices (invoice_number NUMBER, invoice_date TIME);"
      },
      {
        "question": "Now show me their invoice numbers.",
        "query": "SELECT invoice_number FROM invoices WHERE invoice_date < \"1989-09-03\" OR invoice_date > \"2007-12-25\"",
        "schema": "CREATE TABLE Invoices (invoice_number NUMBER, invoice_date TIME); CREATE TABLE Shipments (invoice_number NUMBER); CREATE TABLE Orders (order_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show me all the details of invoices created between 1989-09-03 and 2007-12-25.",
        "query": "SELECT invoice_date FROM invoices WHERE invoice_date > \"1989-09-03\" AND invoice_date < \"2007-12-25\"",
        "schema": "CREATE TABLE Customers (customer_details TEXT); CREATE TABLE Invoices (invoice_number NUMBER, invoice_date TIME, invoice_details TEXT); CREATE TABLE Orders (date_order_placed TIME);"
      },
      {
        "question": "Now show me the distinct details of all the other invoices.",
        "query": "SELECT DISTINCT invoice_details FROM invoices WHERE invoice_date < \"1989-09-03\" OR invoice_date > \"2007-12-25\"",
        "schema": "CREATE TABLE Orders (date_order_placed TIME); CREATE TABLE Invoices (invoice_number NUMBER, invoice_details TEXT, invoice_date TIME); CREATE TABLE Customers (customer_details TEXT);"
      }
    ],
    [
      {
        "question": "Show me the names of all customers who have at least two orders.",
        "query": "SELECT t2.customer_name FROM orders AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id GROUP BY t2.customer_id HAVING count(*) >= 2",
        "schema": "CREATE TABLE Customers (customer_name TEXT, customer_details TEXT, customer_id NUMBER); CREATE TABLE Orders (customer_id NUMBER, order_id NUMBER); CREATE TABLE Order_Items (order_id NUMBER);"
      },
      {
        "question": "Show me the number of orders each of them made as well.",
        "query": "SELECT t2.customer_name , count(*) FROM orders AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id GROUP BY t2.customer_id HAVING count(*) >= 2",
        "schema": "CREATE TABLE Order_Items (order_id NUMBER); CREATE TABLE Orders (order_id NUMBER, order_status TEXT, customer_id NUMBER); CREATE TABLE Customers (customer_details TEXT, customer_id NUMBER, customer_name TEXT);"
      }
    ],
    [
      {
        "question": "Show me the names of all customers who have at least two orders.",
        "query": "SELECT t2.customer_name FROM orders AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id GROUP BY t2.customer_id HAVING count(*) >= 2",
        "schema": "CREATE TABLE Orders (order_id NUMBER, customer_id NUMBER); CREATE TABLE Customers (customer_details TEXT, customer_name TEXT, customer_id NUMBER); CREATE TABLE Order_Items (order_id NUMBER);"
      },
      {
        "question": "Now show me names of customers who have at most two orders.",
        "query": "SELECT t2.customer_name FROM orders AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id GROUP BY t2.customer_id HAVING count(*) <= 2",
        "schema": "CREATE TABLE Customers (customer_details TEXT, customer_id NUMBER, customer_name TEXT); CREATE TABLE Orders (customer_id NUMBER, order_id NUMBER); CREATE TABLE Order_Items (order_id NUMBER);"
      }
    ],
    [
      {
        "question": "List the ids of the customers who have once bought product \"food\".",
        "query": "SELECT t1.customer_id FROM customers AS t1 JOIN orders AS t2 JOIN order_items AS t3 JOIN products AS t4 ON t1.customer_id = t2.customer_id AND t2.order_id = t3.order_id AND t3.product_id = t4.product_id WHERE t4.product_name = \"food\" GROUP BY t1.customer_id HAVING count(*) >= 1",
        "schema": "CREATE TABLE Customers (customer_details TEXT, customer_id NUMBER, customer_name TEXT); CREATE TABLE Orders (customer_id NUMBER, order_id NUMBER); CREATE TABLE Products (product_id NUMBER, product_name TEXT); CREATE TABLE Order_Items (product_id NUMBER, order_item_id NUMBER, order_id NUMBER);"
      },
      {
        "question": "Now list the names.",
        "query": "SELECT t1.customer_name FROM customers AS t1 JOIN orders AS t2 JOIN order_items AS t3 JOIN products AS t4 ON t1.customer_id = t2.customer_id AND t2.order_id = t3.order_id AND t3.product_id = t4.product_id WHERE t4.product_name = \"food\" GROUP BY t1.customer_id HAVING count(*) >= 1",
        "schema": "CREATE TABLE Orders (customer_id NUMBER, order_id NUMBER); CREATE TABLE Customers (customer_name TEXT, customer_details TEXT, customer_id NUMBER); CREATE TABLE Products (product_id NUMBER, product_name TEXT); CREATE TABLE Order_Items (product_id NUMBER, order_id NUMBER, order_item_id NUMBER);"
      }
    ]
  ],
  "tracking_software_problems": [
    [
      {
        "question": "What is the most recent log_entry_date?",
        "query": "SELECT log_entry_date FROM problem_log ORDER BY log_entry_date ASC LIMIT 1",
        "schema": "CREATE TABLE Problems (date_problem_reported TIME); CREATE TABLE Problem_Log (problem_id NUMBER, log_entry_description TEXT, log_entry_date TIME, problem_log_id NUMBER, log_entry_fix TEXT);"
      },
      {
        "question": "the latest?",
        "query": "SELECT log_entry_date FROM problem_log ORDER BY log_entry_date DESC LIMIT 1",
        "schema": "CREATE TABLE Problem_Log (log_entry_date TIME, log_entry_fix TEXT, problem_id NUMBER, problem_log_id NUMBER, log_entry_description TEXT); CREATE TABLE Problems (date_problem_reported TIME, problem_id NUMBER);"
      },
      {
        "question": "what is the product id that has this?",
        "query": "SELECT problem_log_id FROM problem_log ORDER BY log_entry_date DESC LIMIT 1",
        "schema": "CREATE TABLE Product (product_name TEXT, product_id NUMBER); CREATE TABLE Problems (problem_id NUMBER, date_problem_reported TIME, product_id NUMBER); CREATE TABLE Problem_Log (log_entry_description TEXT, problem_log_id NUMBER, log_entry_fix TEXT, problem_id NUMBER, log_entry_date TIME);"
      }
    ],
    [
      {
        "question": "How many problem logs are there?",
        "query": "SELECT count(*) FROM problem_log",
        "schema": "CREATE TABLE Problem_Log (problem_id NUMBER, other_log_details TEXT, assigned_to_staff_id NUMBER, log_entry_fix TEXT, problem_log_id NUMBER); CREATE TABLE Problems (problem_id NUMBER, reported_by_staff_id NUMBER); CREATE TABLE Staff (staff_id NUMBER);"
      },
      {
        "question": "Of those, what is the oldest entry date used?",
        "query": "SELECT log_entry_date FROM problem_log ORDER BY log_entry_date LIMIT 1",
        "schema": "CREATE TABLE Problem_Log (assigned_to_staff_id NUMBER, problem_id NUMBER, other_log_details TEXT, problem_log_id NUMBER, log_entry_fix TEXT, log_entry_date TIME); CREATE TABLE Problems (reported_by_staff_id NUMBER, problem_id NUMBER); CREATE TABLE Staff (staff_id NUMBER);"
      },
      {
        "question": "Show all the problem_log information for this date!",
        "query": "SELECT * FROM problem_log ORDER BY log_entry_date LIMIT 1",
        "schema": "CREATE TABLE Staff (staff_id NUMBER); CREATE TABLE Problems (problem_id NUMBER, reported_by_staff_id NUMBER, date_problem_reported TIME); CREATE TABLE Problem_Log (other_log_details TEXT, log_entry_date TIME, problem_log_id NUMBER, log_entry_fix TEXT, assigned_to_staff_id NUMBER, problem_id NUMBER);"
      },
      {
        "question": "Actually, just show the log id and problem id.",
        "query": "SELECT problem_log_id , problem_id FROM problem_log ORDER BY log_entry_date LIMIT 1",
        "schema": "CREATE TABLE Problem_Log (other_log_details TEXT, log_entry_fix TEXT, problem_id NUMBER, log_entry_date TIME, assigned_to_staff_id NUMBER, problem_log_id NUMBER); CREATE TABLE Staff (staff_id NUMBER); CREATE TABLE Problems (problem_id NUMBER, reported_by_staff_id NUMBER, date_problem_reported TIME);"
      }
    ],
    [
      {
        "question": "How many problem logs have to do with problem id 1?",
        "query": "SELECT count(*) FROM problem_log WHERE problem_id = 1",
        "schema": "CREATE TABLE Staff (staff_id NUMBER); CREATE TABLE Problems (problem_id NUMBER); CREATE TABLE Problem_Log (assigned_to_staff_id NUMBER, log_entry_fix TEXT, problem_log_id NUMBER, problem_id NUMBER);"
      },
      {
        "question": "Show the log ids, dates, descriptions for these.",
        "query": "SELECT problem_log_id, log_entry_date, log_entry_description FROM problem_log WHERE problem_id = 1",
        "schema": "CREATE TABLE Staff (staff_id NUMBER); CREATE TABLE Problems (problem_id NUMBER, problem_description TEXT, date_problem_reported TIME); CREATE TABLE Problem_Log (assigned_to_staff_id NUMBER, log_entry_description TEXT, log_entry_date TIME, log_entry_fix TEXT, problem_log_id NUMBER, problem_id NUMBER);"
      },
      {
        "question": "Also show the staff for each.",
        "query": "SELECT problem_log_id, log_entry_date, log_entry_description, assigned_to_staff_id FROM problem_log WHERE problem_id = 1",
        "schema": "CREATE TABLE Problems (problem_id NUMBER, reported_by_staff_id NUMBER, problem_description TEXT, date_problem_reported TIME); CREATE TABLE Problem_Log (log_entry_fix TEXT, log_entry_date TIME, problem_log_id NUMBER, assigned_to_staff_id NUMBER, problem_id NUMBER, log_entry_description TEXT); CREATE TABLE Staff (staff_id NUMBER, staff_first_name TEXT, staff_last_name TEXT);"
      },
      {
        "question": "Can you give me a distinct list of the names of all staff members!",
        "query": "SELECT DISTINCT staff_first_name , staff_last_name FROM staff AS t1 JOIN problem_log AS t2 ON t1.staff_id = t2.assigned_to_staff_id WHERE t2.problem_id = 1",
        "schema": "CREATE TABLE Problem_Log (log_entry_fix TEXT, log_entry_description TEXT, problem_log_id NUMBER, assigned_to_staff_id NUMBER, problem_id NUMBER, log_entry_date TIME); CREATE TABLE Staff (staff_first_name TEXT, staff_id NUMBER, staff_last_name TEXT); CREATE TABLE Problems (problem_id NUMBER, date_problem_reported TIME, problem_description TEXT, reported_by_staff_id NUMBER);"
      }
    ],
    [
      {
        "question": "What are the problem reported by named Ryan Homenick.",
        "query": "SELECT * FROM staff AS t1 JOIN problems AS t2 ON t1.staff_id = t2.reported_by_staff_id WHERE t1.staff_first_name = \"Rylan\" AND t1.staff_last_name = \"Homenick\"",
        "schema": "CREATE TABLE Staff (staff_last_name TEXT, staff_first_name TEXT, staff_id NUMBER); CREATE TABLE Problem_Log (assigned_to_staff_id NUMBER, problem_id NUMBER); CREATE TABLE Problems (reported_by_staff_id NUMBER, closure_authorised_by_staff_id NUMBER, problem_description TEXT, problem_id NUMBER);"
      },
      {
        "question": "How about the problems on which closure is authorized by him?",
        "query": "SELECT FROM staff AS t1 JOIN problems AS t2 ON t1.staff_id = t2.closure_authorised_by_staff_id WHERE t1.staff_first_name = \"Rylan\" AND t1.staff_last_name = \"Homenick\"",
        "schema": "CREATE TABLE Problems (problem_description TEXT, date_problem_closed TIME, closure_authorised_by_staff_id NUMBER, problem_id NUMBER, reported_by_staff_id NUMBER); CREATE TABLE Staff (staff_id NUMBER, staff_first_name TEXT, staff_last_name TEXT); CREATE TABLE Problem_Log (assigned_to_staff_id NUMBER, problem_id NUMBER);"
      },
      {
        "question": "Actually can you show the different problem_logs that he is assigned to!",
        "query": "SELECT * FROM staff AS t1 JOIN problem_log AS t2 ON t1.staff_id = t2.assigned_to_staff_id WHERE t1.staff_first_name = \"Rylan\" AND t1.staff_last_name = \"Homenick\"",
        "schema": "CREATE TABLE Staff (staff_first_name TEXT, staff_id NUMBER, staff_last_name TEXT); CREATE TABLE Problems (problem_description TEXT, reported_by_staff_id NUMBER, date_problem_closed TIME, closure_authorised_by_staff_id NUMBER, problem_id NUMBER); CREATE TABLE Problem_Log (assigned_to_staff_id NUMBER, problem_id NUMBER, problem_log_id NUMBER, problem_status_code TEXT);"
      },
      {
        "question": "For these, show the distinct problem ids and log ids!",
        "query": "SELECT DISTINCT t2.problem_id , t2.problem_log_id FROM staff AS t1 JOIN problem_log AS t2 ON t1.staff_id = t2.assigned_to_staff_id WHERE t1.staff_first_name = \"Rylan\" AND t1.staff_last_name = \"Homenick\"",
        "schema": "CREATE TABLE Problem_Log (problem_id NUMBER, problem_log_id NUMBER, assigned_to_staff_id NUMBER, problem_status_code TEXT); CREATE TABLE Staff (staff_last_name TEXT, staff_id NUMBER, staff_first_name TEXT); CREATE TABLE Problems (problem_id NUMBER, date_problem_closed TIME, problem_description TEXT, closure_authorised_by_staff_id NUMBER, reported_by_staff_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show me all the problems on the product with name voluptatem.",
        "query": "SELECT * FROM product AS t1 JOIN problems AS t2 ON t1.product_id = t2.product_id WHERE t1.product_name = \"voluptatem\"",
        "schema": "CREATE TABLE Product (product_details TEXT, product_id NUMBER, product_name TEXT); CREATE TABLE Problems (product_id NUMBER, problem_id NUMBER); CREATE TABLE Problem_Log (problem_log_id NUMBER, problem_id NUMBER);"
      },
      {
        "question": "What are the statuses of each?",
        "query": "SELECT *, t3.problem_status_code FROM product AS t1 JOIN problems AS t2 ON t1.product_id = t2.product_id JOIN problem_log AS t3 ON t2.problem_id = t3.problem_id WHERE t1.product_name = \"voluptatem\"",
        "schema": "CREATE TABLE Problem_Status_Codes (problem_status_code TEXT, problem_status_description TEXT); CREATE TABLE Product (product_id NUMBER, product_name TEXT, product_details TEXT); CREATE TABLE Problem_Log (problem_id NUMBER, problem_status_code TEXT, problem_log_id NUMBER); CREATE TABLE Problems (product_id NUMBER, problem_id NUMBER);"
      },
      {
        "question": "How many are solved?",
        "query": "SELECT count(*) FROM product AS t1 JOIN problems AS t2 ON t1.product_id = t2.product_id JOIN problem_log AS t3 ON t2.problem_id = t3.problem_id WHERE t1.product_name = \"voluptatem\" AND t3.problem_status_code = \"Solved\"",
        "schema": "CREATE TABLE Product (product_id NUMBER, product_details TEXT, product_name TEXT); CREATE TABLE Problems (product_id NUMBER, problem_id NUMBER); CREATE TABLE Problem_Log (problem_log_id NUMBER, problem_status_code TEXT, problem_id NUMBER); CREATE TABLE Problem_Status_Codes (problem_status_code TEXT, problem_status_description TEXT);"
      },
      {
        "question": "Actually how many are there in total?",
        "query": "SELECT count(*) FROM product AS t1 JOIN problems AS t2 ON t1.product_id = t2.product_id WHERE t1.product_name = \"voluptatem\"",
        "schema": "CREATE TABLE Problem_Log (problem_status_code TEXT, problem_id NUMBER, problem_log_id NUMBER); CREATE TABLE Problem_Status_Codes (problem_status_description TEXT, problem_status_code TEXT); CREATE TABLE Problems (product_id NUMBER, problem_id NUMBER); CREATE TABLE Product (product_details TEXT, product_id NUMBER, product_name TEXT);"
      }
    ],
    [
      {
        "question": "How many problems are there?",
        "query": "SELECT count(*) FROM problems",
        "schema": "CREATE TABLE Problems (product_id NUMBER, problem_id NUMBER, reported_by_staff_id NUMBER); CREATE TABLE Staff (staff_id NUMBER, staff_last_name TEXT); CREATE TABLE Problem_Log (assigned_to_staff_id NUMBER, problem_id NUMBER);"
      },
      {
        "question": "What products are they associated with?",
        "query": "SELECT * FROM product AS t1 JOIN problems AS t2 ON t1.product_id = t2.product_id",
        "schema": "CREATE TABLE Problems (reported_by_staff_id NUMBER, problem_id NUMBER, product_id NUMBER); CREATE TABLE Problem_Log (problem_id NUMBER, assigned_to_staff_id NUMBER); CREATE TABLE Staff (staff_id NUMBER, staff_last_name TEXT); CREATE TABLE Product (product_id NUMBER, product_name TEXT);"
      },
      {
        "question": "Now show how many problems exist per product name?",
        "query": "SELECT count(*) , t1.product_id FROM product AS t1 JOIN problems AS t2 ON t1.product_id = t2.product_id GROUP BY t1.product_id",
        "schema": "CREATE TABLE Product (product_name TEXT, product_id NUMBER); CREATE TABLE Problems (reported_by_staff_id NUMBER, product_id NUMBER, problem_id NUMBER); CREATE TABLE Staff (staff_id NUMBER, staff_last_name TEXT); CREATE TABLE Problem_Log (assigned_to_staff_id NUMBER, problem_id NUMBER);"
      },
      {
        "question": "Which one has the most problems?",
        "query": "SELECT count(*) , t1.product_name FROM product AS t1 JOIN problems AS t2 ON t1.product_id = t2.product_id GROUP BY t1.product_name ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Staff (staff_last_name TEXT, staff_id NUMBER); CREATE TABLE Product (product_id NUMBER, product_name TEXT); CREATE TABLE Problem_Log (problem_id NUMBER, assigned_to_staff_id NUMBER); CREATE TABLE Problems (problem_id NUMBER, reported_by_staff_id NUMBER, product_id NUMBER);"
      }
    ],
    [
      {
        "question": "How many staff members have the first name Christop.",
        "query": "SELECT count(*) FROM staff WHERE staff_first_name = \"Christop\"",
        "schema": "CREATE TABLE Problem_Log (assigned_to_staff_id NUMBER); CREATE TABLE Staff (staff_last_name TEXT, staff_id NUMBER, other_staff_details TEXT, staff_first_name TEXT); CREATE TABLE Problems (closure_authorised_by_staff_id NUMBER, reported_by_staff_id NUMBER, problem_id NUMBER);"
      },
      {
        "question": "What problem are these members authorized to close!",
        "query": "SELECT * FROM problems AS t1 JOIN staff AS t2 ON t1.closure_authorised_by_staff_id = t2.staff_id WHERE t2.staff_first_name = \"Christop\"",
        "schema": "CREATE TABLE Problem_Log (assigned_to_staff_id NUMBER, problem_id NUMBER); CREATE TABLE Staff (other_staff_details TEXT, staff_first_name TEXT, staff_id NUMBER, staff_last_name TEXT); CREATE TABLE Problems (closure_authorised_by_staff_id NUMBER, reported_by_staff_id NUMBER, problem_id NUMBER);"
      },
      {
        "question": "How about what problems have these members reported!",
        "query": "SELECT * FROM problems AS t1 JOIN staff AS t2 ON t1.reported_by_staff_id = t2.staff_id WHERE t2.staff_first_name = \"Christop\"",
        "schema": "CREATE TABLE Staff (staff_last_name TEXT, staff_first_name TEXT, staff_id NUMBER, other_staff_details TEXT); CREATE TABLE Problems (closure_authorised_by_staff_id NUMBER, reported_by_staff_id NUMBER, problem_id NUMBER); CREATE TABLE Problem_Log (assigned_to_staff_id NUMBER, problem_id NUMBER);"
      },
      {
        "question": "List just the problem descriptions for each?",
        "query": "SELECT t1.problem_description FROM problems AS t1 JOIN staff AS t2 ON t1.reported_by_staff_id = t2.staff_id WHERE t2.staff_first_name = \"Christop\"",
        "schema": "CREATE TABLE Problems (other_problem_details TEXT, reported_by_staff_id NUMBER, problem_description TEXT, closure_authorised_by_staff_id NUMBER, problem_id NUMBER); CREATE TABLE Problem_Log (log_entry_description TEXT, problem_id NUMBER, assigned_to_staff_id NUMBER, problem_log_id NUMBER); CREATE TABLE Staff (staff_first_name TEXT, other_staff_details TEXT, staff_id NUMBER, staff_last_name TEXT);"
      }
    ],
    [
      {
        "question": "List all the problem ids!",
        "query": "SELECT problem_id FROM problems",
        "schema": "CREATE TABLE Problems (problem_id NUMBER, product_id NUMBER, reported_by_staff_id NUMBER); CREATE TABLE Problem_Log (problem_log_id NUMBER, problem_id NUMBER, assigned_to_staff_id NUMBER); CREATE TABLE Staff (staff_id NUMBER);"
      },
      {
        "question": "What are the names of the staff members that reported each!",
        "query": "SELECT t1.problem_id, t2.staff_first_name, t2.staff_last_name FROM problems AS t1 JOIN staff AS t2 ON t1.reported_by_staff_id = t2.staff_id",
        "schema": "CREATE TABLE Staff (staff_last_name TEXT, staff_first_name TEXT, staff_id NUMBER); CREATE TABLE Problems (product_id NUMBER, problem_id NUMBER, closure_authorised_by_staff_id NUMBER, reported_by_staff_id NUMBER); CREATE TABLE Problem_Log (problem_log_id NUMBER, assigned_to_staff_id NUMBER, problem_id NUMBER);"
      },
      {
        "question": "Show me the ids of those reported by the last name Bosco!",
        "query": "SELECT t1.problem_id FROM problems AS t1 JOIN staff AS t2 ON t1.reported_by_staff_id = t2.staff_id WHERE t2.staff_last_name = \"Bosco\"",
        "schema": "CREATE TABLE Problems (product_id NUMBER, problem_id NUMBER, closure_authorised_by_staff_id NUMBER, reported_by_staff_id NUMBER); CREATE TABLE Problem_Log (problem_id NUMBER, problem_log_id NUMBER, assigned_to_staff_id NUMBER); CREATE TABLE Staff (staff_last_name TEXT, staff_first_name TEXT, staff_id NUMBER);"
      }
    ],
    [
      {
        "question": "How many products do not have any problems?",
        "query": "SELECT count(*) FROM product WHERE product_id NOT IN (SELECT product_id FROM problems)",
        "schema": "CREATE TABLE Problems (problem_id NUMBER, product_id NUMBER); CREATE TABLE Staff (staff_id NUMBER); CREATE TABLE Product (product_details TEXT, product_id NUMBER, product_name TEXT);"
      },
      {
        "question": "What are they?",
        "query": "SELECT product_id FROM product WHERE product_id NOT IN (SELECT product_id FROM problems)",
        "schema": "CREATE TABLE Product (product_id NUMBER, product_details TEXT, product_name TEXT); CREATE TABLE Problems (product_id NUMBER, problem_id NUMBER); CREATE TABLE Staff (staff_id NUMBER);"
      },
      {
        "question": "Show all the different ids of the products other than these!",
        "query": "SELECT DISTINCT product_id FROM problems",
        "schema": "CREATE TABLE Product (product_name TEXT, product_id NUMBER, product_details TEXT); CREATE TABLE Problems (problem_id NUMBER, product_id NUMBER); CREATE TABLE Staff (staff_id NUMBER);"
      },
      {
        "question": "Also provide the number of problems they each have!",
        "query": "SELECT count(*), t2.product_id FROM problems AS t1 JOIN product AS t2 ON t1.product_id = t2.product_id GROUP BY t2.product_id",
        "schema": "CREATE TABLE Staff (staff_id NUMBER); CREATE TABLE Product (product_details TEXT, product_name TEXT, product_id NUMBER); CREATE TABLE Problems (product_id NUMBER, problem_id NUMBER); CREATE TABLE Problem_Log (problem_id NUMBER);"
      }
    ],
    [
      {
        "question": "How many problems were reported on or before 1986-11-13?",
        "query": "SELECT count(*) FROM problems WHERE date_problem_reported <= \"1986-11-13\"",
        "schema": "CREATE TABLE Staff (staff_id NUMBER); CREATE TABLE Problem_Log (log_entry_date TIME); CREATE TABLE Problems (reported_by_staff_id NUMBER, problem_id NUMBER, date_problem_reported TIME);"
      },
      {
        "question": "how about after?",
        "query": "SELECT count(*) FROM problems WHERE date_problem_reported > \"1986-11-13\"",
        "schema": "CREATE TABLE Problem_Log (log_entry_date TIME); CREATE TABLE Staff (staff_id NUMBER); CREATE TABLE Problems (reported_by_staff_id NUMBER, problem_id NUMBER, date_problem_reported TIME);"
      },
      {
        "question": "Show me their problem ids and product ids!",
        "query": "SELECT problem_id, product_id FROM problems WHERE date_problem_reported > \"1986-11-13\"",
        "schema": "CREATE TABLE Product (product_name TEXT, product_id NUMBER); CREATE TABLE Staff (staff_id NUMBER); CREATE TABLE Problem_Log (problem_id NUMBER, log_entry_date TIME); CREATE TABLE Problems (date_problem_reported TIME, product_id NUMBER, reported_by_staff_id NUMBER, problem_id NUMBER, problem_description TEXT);"
      },
      {
        "question": "For these, show the number of problems by product id!",
        "query": "SELECT count(*) , t2.product_id FROM problems AS t1 JOIN product AS t2 ON t1.product_id = t2.product_id WHERE t1.date_problem_reported > \"1986-11-13\" GROUP BY t2.product_id",
        "schema": "CREATE TABLE Product (product_name TEXT, product_id NUMBER); CREATE TABLE Staff (staff_id NUMBER); CREATE TABLE Problem_Log (log_entry_date TIME, problem_id NUMBER); CREATE TABLE Problems (reported_by_staff_id NUMBER, problem_description TEXT, date_problem_reported TIME, problem_id NUMBER, product_id NUMBER);"
      }
    ],
    [
      {
        "question": "What are all the products reported by staff named Jolie Weber?",
        "query": "SELECT product_id FROM problems AS t1 JOIN staff AS t2 ON t1.reported_by_staff_id = t2.staff_id WHERE t2.staff_first_name = \"Jolie\" AND t2.staff_last_name = \"Weber\"",
        "schema": "CREATE TABLE Product (product_details TEXT, product_id NUMBER, product_name TEXT); CREATE TABLE Problems (product_id NUMBER, problem_id NUMBER, reported_by_staff_id NUMBER, closure_authorised_by_staff_id NUMBER); CREATE TABLE Staff (staff_id NUMBER, staff_first_name TEXT, staff_last_name TEXT); CREATE TABLE Problem_Log (assigned_to_staff_id NUMBER);"
      },
      {
        "question": "How about Dameon Fami?",
        "query": "SELECT product_id FROM problems AS t1 JOIN staff AS t2 ON t1.reported_by_staff_id = t2.staff_id WHERE t2.staff_first_name = \"Dameon\" AND t2.staff_last_name = \"Fami\"",
        "schema": "CREATE TABLE Problems (problem_id NUMBER, closure_authorised_by_staff_id NUMBER, product_id NUMBER, reported_by_staff_id NUMBER); CREATE TABLE Product (product_id NUMBER, product_name TEXT, product_details TEXT); CREATE TABLE Staff (staff_id NUMBER, staff_first_name TEXT, staff_last_name TEXT); CREATE TABLE Problem_Log (assigned_to_staff_id NUMBER, problem_id NUMBER);"
      },
      {
        "question": "Which products are reported by either one?",
        "query": "SELECT product_id FROM problems AS t1 JOIN staff AS t2 ON t1.reported_by_staff_id = t2.staff_id WHERE t2.staff_first_name = \"Dameon\" AND t2.staff_last_name = \"Frami\"",
        "schema": "CREATE TABLE Problems (problem_id NUMBER, product_id NUMBER, closure_authorised_by_staff_id NUMBER, reported_by_staff_id NUMBER); CREATE TABLE Staff (staff_first_name TEXT, staff_last_name TEXT, staff_id NUMBER); CREATE TABLE Product (product_id NUMBER, product_name TEXT, product_details TEXT); CREATE TABLE Problem_Log (assigned_to_staff_id NUMBER, problem_id NUMBER);"
      },
      {
        "question": "What are their ids?",
        "query": "SELECT product_id FROM problems AS t1 JOIN staff AS t2 ON t1.reported_by_staff_id = t2.staff_id WHERE t2.staff_first_name = \"Dameon\" AND t2.staff_last_name = \"Frami\" UNION SELECT product_id FROM problems AS t1 JOIN staff AS t2 ON t1.reported_by_staff_id = t2.staff_id WHERE t2.staff_first_name = \"Jolie\" AND t2.staff_last_name = \"Weber\"",
        "schema": "CREATE TABLE Staff (staff_last_name TEXT, staff_first_name TEXT, staff_id NUMBER); CREATE TABLE Product (product_details TEXT, product_name TEXT, product_id NUMBER); CREATE TABLE Problem_Log (assigned_to_staff_id NUMBER, problem_id NUMBER); CREATE TABLE Problems (problem_id NUMBER, closure_authorised_by_staff_id NUMBER, reported_by_staff_id NUMBER, product_id NUMBER);"
      }
    ],
    [
      {
        "question": "For each problem, What are the different names of staff members who can authorize closure!",
        "query": "SELECT DISTINCT t2.staff_first_name, t2.staff_last_name FROM problems AS t1 JOIN staff AS t2 ON t1.closure_authorised_by_staff_id = t2.staff_id",
        "schema": "CREATE TABLE Problems (date_problem_closed TIME, problem_id NUMBER, reported_by_staff_id NUMBER, closure_authorised_by_staff_id NUMBER); CREATE TABLE Problem_Log (assigned_to_staff_id NUMBER, problem_id NUMBER); CREATE TABLE Staff (staff_first_name TEXT, staff_last_name TEXT, staff_id NUMBER);"
      },
      {
        "question": "Also provide the product_ids!",
        "query": "SELECT product_id, t2.staff_first_name, t2.staff_last_name FROM problems AS t1 JOIN staff AS t2 ON t1.closure_authorised_by_staff_id = t2.staff_id",
        "schema": "CREATE TABLE Problems (problem_id NUMBER, closure_authorised_by_staff_id NUMBER, date_problem_closed TIME, reported_by_staff_id NUMBER, product_id NUMBER); CREATE TABLE Product (product_id NUMBER, product_name TEXT, product_details TEXT); CREATE TABLE Problem_Log (problem_id NUMBER, assigned_to_staff_id NUMBER); CREATE TABLE Staff (staff_id NUMBER, staff_last_name TEXT, staff_first_name TEXT);"
      },
      {
        "question": "Show me the product ids that have closure authorized by Ashley Medhurst!",
        "query": "SELECT product_id FROM problems AS t1 JOIN staff AS t2 ON t1.closure_authorised_by_staff_id = t2.staff_id WHERE t2.staff_first_name = \"Ashley\" AND t2.staff_last_name = \"Medhurst\"",
        "schema": "CREATE TABLE Product (product_id NUMBER, product_name TEXT, product_details TEXT); CREATE TABLE Staff (staff_last_name TEXT, staff_first_name TEXT, staff_id NUMBER); CREATE TABLE Problem_Log (problem_id NUMBER, assigned_to_staff_id NUMBER); CREATE TABLE Problems (problem_id NUMBER, product_id NUMBER, date_problem_closed TIME, reported_by_staff_id NUMBER, closure_authorised_by_staff_id NUMBER);"
      },
      {
        "question": "Of those, only those that were reported  by Christop Beege!",
        "query": "SELECT product_id FROM problems AS t1 JOIN staff AS t2 ON t1.reported_by_staff_id = t2.staff_id WHERE t2.staff_first_name = \"Christop\" AND t2.staff_last_name = \"Berge\" INTERSECT SELECT product_id FROM problems AS t1 JOIN staff AS t2 ON t1.closure_authorised_by_staff_id = t2.staff_id WHERE t2.staff_first_name = \"Ashley\" AND t2.staff_last_name = \"Medhurst\"",
        "schema": "CREATE TABLE Staff (staff_last_name TEXT, staff_id NUMBER, staff_first_name TEXT); CREATE TABLE Problem_Log (problem_id NUMBER, assigned_to_staff_id NUMBER); CREATE TABLE Product (product_details TEXT, product_name TEXT, product_id NUMBER); CREATE TABLE Problems (product_id NUMBER, problem_id NUMBER, closure_authorised_by_staff_id NUMBER, date_problem_closed TIME, reported_by_staff_id NUMBER);"
      }
    ],
    [
      {
        "question": "How many problems has staff named Lysanne Turcotte reported?",
        "query": "SELECT count(*) FROM problems AS t1 JOIN staff AS t2 ON t1.reported_by_staff_id = t2.staff_id WHERE t2.staff_first_name = \"Lysanne\" AND t2.staff_last_name = \"Turcotte\"",
        "schema": "CREATE TABLE Problems (problem_id NUMBER, reported_by_staff_id NUMBER, closure_authorised_by_staff_id NUMBER); CREATE TABLE Problem_Log (assigned_to_staff_id NUMBER, problem_id NUMBER); CREATE TABLE Staff (staff_first_name TEXT, staff_last_name TEXT, other_staff_details TEXT, staff_id NUMBER);"
      },
      {
        "question": "Show me their ids, and problem descriptions.",
        "query": "SELECT problem_id, problem_description FROM problems AS t1 JOIN staff AS t2 ON t1.reported_by_staff_id = t2.staff_id WHERE t2.staff_first_name = \"Lysanne\" AND t2.staff_last_name = \"Turcotte\"",
        "schema": "CREATE TABLE Problem_Status_Codes (problem_status_code TEXT, problem_status_description TEXT); CREATE TABLE Problem_Log (assigned_to_staff_id NUMBER, problem_id NUMBER, log_entry_description TEXT, problem_log_id NUMBER); CREATE TABLE Problems (closure_authorised_by_staff_id NUMBER, reported_by_staff_id NUMBER, problem_description TEXT, problem_id NUMBER); CREATE TABLE Staff (other_staff_details TEXT, staff_id NUMBER, staff_first_name TEXT, staff_last_name TEXT);"
      },
      {
        "question": "What is the oldest date these were reported?",
        "query": "SELECT min(date_problem_reported) FROM problems AS t1 JOIN staff AS t2 ON t1.reported_by_staff_id = t2.staff_id WHERE t2.staff_first_name = \"Lysanne\" AND t2.staff_last_name = \"Turcotte\"",
        "schema": "CREATE TABLE Problem_Status_Codes (problem_status_description TEXT, problem_status_code TEXT); CREATE TABLE Staff (staff_first_name TEXT, staff_last_name TEXT, staff_id NUMBER, other_staff_details TEXT); CREATE TABLE Problems (closure_authorised_by_staff_id NUMBER, problem_id NUMBER, reported_by_staff_id NUMBER, problem_description TEXT, date_problem_reported TIME); CREATE TABLE Problem_Log (problem_id NUMBER, log_entry_description TEXT, problem_log_id NUMBER, assigned_to_staff_id NUMBER);"
      },
      {
        "question": "Show me the ids of all the other problems that were reported before this date! :",
        "query": "SELECT t1.problem_id FROM problems AS t1 JOIN staff AS t2 ON t1.reported_by_staff_id = t2.staff_id WHERE date_problem_reported < ( SELECT min(date_problem_reported) FROM problems AS t3 JOIN staff AS t4 ON t3.reported_by_staff_id = t4.staff_id WHERE t4.staff_first_name = \"Lysanne\" AND t4.staff_last_name = \"Turcotte\" )",
        "schema": "CREATE TABLE Problem_Status_Codes (problem_status_description TEXT, problem_status_code TEXT); CREATE TABLE Staff (other_staff_details TEXT, staff_first_name TEXT, staff_last_name TEXT, staff_id NUMBER); CREATE TABLE Problem_Log (log_entry_description TEXT, problem_log_id NUMBER, assigned_to_staff_id NUMBER, problem_id NUMBER); CREATE TABLE Problems (problem_description TEXT, reported_by_staff_id NUMBER, closure_authorised_by_staff_id NUMBER, problem_id NUMBER, date_problem_reported TIME);"
      }
    ],
    [
      {
        "question": "What are all the names of the staff members that have reported problems?",
        "query": "SELECT t2.staff_first_name, t2.staff_last_name FROM problems AS t1 JOIN staff AS t2 ON t1.reported_by_staff_id = t2.staff_id",
        "schema": "CREATE TABLE Staff (other_staff_details TEXT, staff_id NUMBER, staff_last_name TEXT, staff_first_name TEXT); CREATE TABLE Problem_Log (assigned_to_staff_id NUMBER, problem_id NUMBER); CREATE TABLE Problems (problem_id NUMBER, closure_authorised_by_staff_id NUMBER, reported_by_staff_id NUMBER);"
      },
      {
        "question": "What was the problem id and date of the last problem they each reported?",
        "query": "SELECT t2.staff_first_name, t2.staff_last_name, t1.problem_id, max(date_problem_reported) FROM problems AS t1 JOIN staff AS t2 ON t1.reported_by_staff_id = t2.staff_id GROUP BY t2.staff_first_name, t2.staff_last_name",
        "schema": "CREATE TABLE Staff (staff_last_name TEXT, other_staff_details TEXT, staff_first_name TEXT, staff_id NUMBER); CREATE TABLE Problem_Log (assigned_to_staff_id NUMBER, problem_id NUMBER); CREATE TABLE Problems (problem_id NUMBER, closure_authorised_by_staff_id NUMBER, date_problem_reported TIME, reported_by_staff_id NUMBER);"
      },
      {
        "question": "Show me the date for staff named Ryan Homenick",
        "query": "SELECT max(date_problem_reported) FROM problems AS t1 JOIN staff AS t2 ON t1.reported_by_staff_id = t2.staff_id WHERE t2.staff_first_name = \"Rylan\" AND t2.staff_last_name = \"Homenick\"",
        "schema": "CREATE TABLE Problem_Log (problem_id NUMBER, assigned_to_staff_id NUMBER); CREATE TABLE Problems (problem_id NUMBER, reported_by_staff_id NUMBER, closure_authorised_by_staff_id NUMBER, date_problem_reported TIME); CREATE TABLE Staff (other_staff_details TEXT, staff_id NUMBER, staff_last_name TEXT, staff_first_name TEXT);"
      },
      {
        "question": "Now show any problem id that was reported after this date!",
        "query": "SELECT t1.problem_id FROM problems AS t1 JOIN staff AS t2 ON t1.reported_by_staff_id = t2.staff_id WHERE date_problem_reported > ( SELECT max(date_problem_reported) FROM problems AS t3 JOIN staff AS t4 ON t3.reported_by_staff_id = t4.staff_id WHERE t4.staff_first_name = \"Rylan\" AND t4.staff_last_name = \"Homenick\" )",
        "schema": "CREATE TABLE Problems (problem_id NUMBER, date_problem_reported TIME, closure_authorised_by_staff_id NUMBER, reported_by_staff_id NUMBER); CREATE TABLE Staff (other_staff_details TEXT, staff_last_name TEXT, staff_id NUMBER, staff_first_name TEXT); CREATE TABLE Problem_Log (problem_id NUMBER, assigned_to_staff_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show me all different products with problems!",
        "query": "SELECT * FROM problems AS t1 JOIN product AS t2 ON t1.product_id = t2.product_id",
        "schema": "CREATE TABLE Product (product_name TEXT, product_details TEXT, product_id NUMBER); CREATE TABLE Problems (product_id NUMBER, problem_id NUMBER);"
      },
      {
        "question": "How many problems do they each have for each product name?",
        "query": "SELECT t2.product_name, count(*) FROM problems AS t1 JOIN product AS t2 ON t1.product_id = t2.product_id GROUP BY t2.product_name",
        "schema": "CREATE TABLE Product (product_name TEXT, product_details TEXT, product_id NUMBER); CREATE TABLE Problems (problem_id NUMBER, product_id NUMBER);"
      },
      {
        "question": "Show me the names of the products in the bottom 3!",
        "query": "SELECT t2.product_name FROM problems AS t1 JOIN product AS t2 ON t1.product_id = t2.product_id GROUP BY t2.product_name ORDER BY count(*) ASC LIMIT 3",
        "schema": "CREATE TABLE Product (product_name TEXT, product_id NUMBER, product_details TEXT); CREATE TABLE Problems (problem_id NUMBER, product_id NUMBER);"
      },
      {
        "question": "What about the top 3?",
        "query": "SELECT t2.product_name FROM problems AS t1 JOIN product AS t2 ON t1.product_id = t2.product_id GROUP BY t2.product_name ORDER BY count(*) DESC LIMIT 3",
        "schema": "CREATE TABLE Problems (product_id NUMBER, problem_id NUMBER); CREATE TABLE Product (product_name TEXT, product_details TEXT, product_id NUMBER);"
      }
    ],
    [
      {
        "question": "What are all the problems that are reported after 1995?",
        "query": "SELECT * FROM problems WHERE date_problem_reported > \"1995\"",
        "schema": "CREATE TABLE Staff (staff_id NUMBER); CREATE TABLE Problems (reported_by_staff_id NUMBER, problem_id NUMBER, date_problem_reported TIME); CREATE TABLE Problem_Log (problem_id NUMBER, log_entry_date TIME);"
      },
      {
        "question": "Show the product names that each are associated with?",
        "query": "SELECT *, t2.product_name FROM problems AS t1 JOIN product AS t2 ON t1.product_id = t2.product_id WHERE t1.date_problem_reported > \"1995\"",
        "schema": "CREATE TABLE Staff (staff_id NUMBER); CREATE TABLE Product (product_id NUMBER, product_name TEXT); CREATE TABLE Problems (problem_description TEXT, product_id NUMBER, date_problem_reported TIME, problem_id NUMBER, reported_by_staff_id NUMBER); CREATE TABLE Problem_Log (log_entry_date TIME, problem_id NUMBER);"
      },
      {
        "question": "Show the ids of the ones with the product named Rose.",
        "query": "SELECT t1.problem_id FROM problems AS t1 JOIN product AS t2 ON t1.product_id = t2.product_id WHERE t2.product_name = \"rose\" AND t1.date_problem_reported > \"1995\"",
        "schema": "CREATE TABLE Problem_Log (problem_id NUMBER, log_entry_date TIME); CREATE TABLE Problems (problem_description TEXT, product_id NUMBER, date_problem_reported TIME, problem_id NUMBER, reported_by_staff_id NUMBER); CREATE TABLE Product (product_id NUMBER, product_name TEXT); CREATE TABLE Staff (staff_id NUMBER);"
      },
      {
        "question": "How about those with the product named voluptatem",
        "query": "SELECT t1.problem_id FROM problems AS t1 JOIN product AS t2 ON t1.product_id = t2.product_id WHERE t2.product_name = \"voluptatem\" AND t1.date_problem_reported > \"1995\"",
        "schema": "CREATE TABLE Problems (date_problem_reported TIME, product_id NUMBER, reported_by_staff_id NUMBER, problem_id NUMBER, problem_description TEXT); CREATE TABLE Staff (staff_id NUMBER); CREATE TABLE Problem_Log (log_entry_date TIME, problem_id NUMBER); CREATE TABLE Product (product_id NUMBER, product_name TEXT);"
      }
    ],
    [
      {
        "question": "What are first and last names of all the staff members?",
        "query": "SELECT staff_first_name , staff_last_name FROM staff",
        "schema": "CREATE TABLE Problem_Log (assigned_to_staff_id NUMBER); CREATE TABLE Staff (other_staff_details TEXT, staff_first_name TEXT, staff_last_name TEXT, staff_id NUMBER);"
      },
      {
        "question": "Which ones reported on problems with products named \"rem\" or \"aut\"?",
        "query": "SELECT t3.staff_first_name , t3.staff_last_name FROM problems AS t1 JOIN product AS t2 JOIN staff AS t3 ON t1.product_id = t2.product_id AND t1.reported_by_staff_id = t3.staff_id WHERE t2.product_name = \"rem\" OR t2.product_name = \"aut\"",
        "schema": "CREATE TABLE Problem_Log (assigned_to_staff_id NUMBER, problem_id NUMBER); CREATE TABLE Staff (staff_last_name TEXT, other_staff_details TEXT, staff_first_name TEXT, staff_id NUMBER); CREATE TABLE Problems (closure_authorised_by_staff_id NUMBER, product_id NUMBER, problem_id NUMBER, reported_by_staff_id NUMBER); CREATE TABLE Product (product_details TEXT, product_id NUMBER, product_name TEXT);"
      },
      {
        "question": "Of these, who reported on \"rem\"?",
        "query": "SELECT t3.staff_first_name , t3.staff_last_name FROM problems AS t1 JOIN product AS t2 JOIN staff AS t3 ON t1.product_id = t2.product_id AND t1.reported_by_staff_id = t3.staff_id WHERE t2.product_name = \"rem\"",
        "schema": "CREATE TABLE Problem_Log (assigned_to_staff_id NUMBER, problem_id NUMBER); CREATE TABLE Problems (product_id NUMBER, reported_by_staff_id NUMBER, problem_id NUMBER, closure_authorised_by_staff_id NUMBER); CREATE TABLE Product (product_details TEXT, product_id NUMBER, product_name TEXT); CREATE TABLE Staff (staff_id NUMBER, other_staff_details TEXT, staff_first_name TEXT, staff_last_name TEXT);"
      },
      {
        "question": "Of these, who did not report on \"aut\"",
        "query": "SELECT t3.staff_first_name , t3.staff_last_name FROM problems AS t1 JOIN product AS t2 JOIN staff AS t3 ON t1.product_id = t2.product_id AND t1.reported_by_staff_id = t3.staff_id WHERE t2.product_name = \"rem\" EXCEPT SELECT t3.staff_first_name , t3.staff_last_name FROM problems AS t1 JOIN product AS t2 JOIN staff AS t3 ON t1.product_id = t2.product_id AND t1.reported_by_staff_id = t3.staff_id WHERE t2.product_name = \"aut\"",
        "schema": "CREATE TABLE Problems (product_id NUMBER, problem_id NUMBER, reported_by_staff_id NUMBER, closure_authorised_by_staff_id NUMBER); CREATE TABLE Problem_Log (problem_id NUMBER, assigned_to_staff_id NUMBER); CREATE TABLE Product (product_name TEXT, product_id NUMBER, product_details TEXT); CREATE TABLE Staff (staff_first_name TEXT, other_staff_details TEXT, staff_last_name TEXT, staff_id NUMBER);"
      }
    ]
  ],
  "student_assessment": [
    [
      {
        "question": "What are the course names?",
        "query": "SELECT course_name FROM courses",
        "schema": "CREATE TABLE People (person_id NUMBER); CREATE TABLE Courses (course_id TEXT, course_name TEXT, course_description TEXT);"
      },
      {
        "question": "Which course has the least number of registered students?",
        "query": "SELECT t1.course_name FROM courses AS t1 JOIN student_course_registrations AS t2 ON t1.course_id = t2.course_id GROUP BY t1.course_id ORDER BY count(*) ASC LIMIT 1",
        "schema": "CREATE TABLE Courses (course_name TEXT, course_description TEXT, course_id TEXT); CREATE TABLE People (person_id NUMBER); CREATE TABLE Student_Course_Attendance (course_id NUMBER, student_id NUMBER); CREATE TABLE Student_Course_Registrations (course_id NUMBER, student_id NUMBER);"
      },
      {
        "question": "Most number?",
        "query": "SELECT t1.course_name FROM courses AS t1 JOIN student_course_registrations AS t2 ON t1.course_id = t2.course_id GROUP BY t1.course_id ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Courses (course_description TEXT, course_id TEXT, course_name TEXT); CREATE TABLE People (person_id NUMBER); CREATE TABLE Students (student_id NUMBER); CREATE TABLE Student_Course_Registrations (course_id NUMBER, student_id NUMBER); CREATE TABLE Student_Course_Attendance (course_id NUMBER, student_id NUMBER);"
      }
    ],
    [
      {
        "question": "What are the course ids that students registered for?",
        "query": "SELECT course_id FROM student_course_registrations",
        "schema": "CREATE TABLE Student_Course_Registrations (registration_date TIME, course_id NUMBER, student_id NUMBER); CREATE TABLE People (person_id NUMBER, last_name TEXT); CREATE TABLE Courses (course_id TEXT); CREATE TABLE Students (student_details TEXT, student_id NUMBER); CREATE TABLE Student_Course_Attendance (course_id NUMBER, student_id NUMBER);"
      },
      {
        "question": "What about student ids.",
        "query": "SELECT student_id FROM student_course_registrations",
        "schema": "CREATE TABLE People (person_id NUMBER, last_name TEXT); CREATE TABLE Courses (course_id TEXT); CREATE TABLE Students (student_id NUMBER, student_details TEXT); CREATE TABLE Student_Course_Registrations (student_id NUMBER, course_id NUMBER, registration_date TIME); CREATE TABLE Student_Course_Attendance (student_id NUMBER, course_id NUMBER);"
      },
      {
        "question": "Which one registered for the least number of courses.",
        "query": "SELECT student_id FROM student_course_registrations GROUP BY student_id ORDER BY count(*) LIMIT 1",
        "schema": "CREATE TABLE Students (student_details TEXT, student_id NUMBER); CREATE TABLE Courses (course_id TEXT); CREATE TABLE People (last_name TEXT, person_id NUMBER); CREATE TABLE Student_Course_Registrations (course_id NUMBER, registration_date TIME, student_id NUMBER); CREATE TABLE Student_Course_Attendance (course_id NUMBER, student_id NUMBER);"
      }
    ],
    [
      {
        "question": "Who are the students? Give the id and details.",
        "query": "SELECT student_id, student_details FROM students",
        "schema": "CREATE TABLE Candidates (candidate_id NUMBER); CREATE TABLE Courses (course_id TEXT); CREATE TABLE People_Addresses (person_id NUMBER); CREATE TABLE People (person_id NUMBER, last_name TEXT, first_name TEXT); CREATE TABLE Student_Course_Registrations (student_id NUMBER, course_id NUMBER); CREATE TABLE Candidate_Assessments (candidate_id NUMBER); CREATE TABLE Addresses (address_id NUMBER); CREATE TABLE Student_Course_Attendance (student_id NUMBER, course_id NUMBER); CREATE TABLE Students (student_id NUMBER, student_details TEXT);"
      },
      {
        "question": "Which students attend courses?",
        "query": "SELECT student_id, student_details FROM students WHERE student_id IN (SELECT student_id FROM student_course_attendance)",
        "schema": "CREATE TABLE People (first_name TEXT, last_name TEXT, person_id NUMBER); CREATE TABLE People_Addresses (person_id NUMBER); CREATE TABLE Student_Course_Registrations (course_id NUMBER, student_id NUMBER); CREATE TABLE Courses (course_id TEXT); CREATE TABLE Student_Course_Attendance (course_id NUMBER, date_of_attendance TIME, student_id NUMBER); CREATE TABLE Addresses (address_id NUMBER); CREATE TABLE Candidate_Assessments (candidate_id NUMBER); CREATE TABLE Candidates (candidate_id NUMBER); CREATE TABLE Students (student_details TEXT, student_id NUMBER);"
      },
      {
        "question": "Which ones do not? Just give the student id.",
        "query": "SELECT student_id FROM students WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)",
        "schema": "CREATE TABLE People_Addresses (person_id NUMBER); CREATE TABLE Courses (course_id TEXT); CREATE TABLE People (person_id NUMBER, last_name TEXT, first_name TEXT); CREATE TABLE Candidate_Assessments (candidate_id NUMBER); CREATE TABLE Students (student_details TEXT, student_id NUMBER); CREATE TABLE Student_Course_Registrations (student_id NUMBER, course_id NUMBER); CREATE TABLE Candidates (candidate_id NUMBER); CREATE TABLE Student_Course_Attendance (student_id NUMBER, course_id NUMBER, date_of_attendance TIME); CREATE TABLE Addresses (address_id NUMBER);"
      }
    ],
    [
      {
        "question": "What is the course id of the most recent course registration?",
        "query": "SELECT course_id FROM student_course_registrations ORDER BY registration_date DESC LIMIT 1",
        "schema": "CREATE TABLE Student_Course_Attendance (course_id NUMBER, date_of_attendance TIME, student_id NUMBER); CREATE TABLE Students (student_id NUMBER); CREATE TABLE Candidates (candidate_id NUMBER); CREATE TABLE Candidate_Assessments (candidate_id NUMBER, assessment_date TIME); CREATE TABLE Courses (course_name TEXT, course_id TEXT); CREATE TABLE People (person_id NUMBER); CREATE TABLE Student_Course_Registrations (registration_date TIME, course_id NUMBER, student_id NUMBER);"
      },
      {
        "question": "Give the student id instead.",
        "query": "SELECT student_id FROM student_course_registrations ORDER BY registration_date DESC LIMIT 1",
        "schema": "CREATE TABLE Student_Course_Attendance (course_id NUMBER, student_id NUMBER, date_of_attendance TIME); CREATE TABLE Courses (course_id TEXT, course_name TEXT); CREATE TABLE Student_Course_Registrations (course_id NUMBER, student_id NUMBER, registration_date TIME); CREATE TABLE Students (student_id NUMBER); CREATE TABLE People (person_id NUMBER); CREATE TABLE Candidate_Assessments (assessment_date TIME, candidate_id NUMBER); CREATE TABLE Candidates (candidate_id NUMBER);"
      },
      {
        "question": "Give the student details.",
        "query": "SELECT t2.student_details FROM student_course_registrations AS t1 JOIN students AS t2 ON t1.student_id = t2.student_id ORDER BY t1.registration_date DESC LIMIT 1",
        "schema": "CREATE TABLE People (person_id NUMBER); CREATE TABLE Student_Course_Attendance (student_id NUMBER, course_id NUMBER, date_of_attendance TIME); CREATE TABLE Courses (course_name TEXT, course_id TEXT); CREATE TABLE Student_Course_Registrations (course_id NUMBER, student_id NUMBER, registration_date TIME); CREATE TABLE Students (student_details TEXT, student_id NUMBER); CREATE TABLE Candidates (candidate_id NUMBER); CREATE TABLE Candidate_Assessments (candidate_id NUMBER, assessment_date TIME);"
      }
    ],
    [
      {
        "question": "Which students attended the course with course id 301?",
        "query": "SELECT student_id FROM student_course_attendance WHERE course_id = 301",
        "schema": "CREATE TABLE Courses (course_name TEXT, course_id TEXT); CREATE TABLE Candidates (candidate_id NUMBER); CREATE TABLE People (last_name TEXT, first_name TEXT, person_id NUMBER); CREATE TABLE Student_Course_Attendance (student_id NUMBER, course_id NUMBER, date_of_attendance TIME); CREATE TABLE Students (student_id NUMBER, student_details TEXT); CREATE TABLE Student_Course_Registrations (student_id NUMBER, course_id NUMBER);"
      },
      {
        "question": "Count how many did so.",
        "query": "SELECT count(*) FROM student_course_attendance WHERE course_id = 301",
        "schema": "CREATE TABLE Candidates (candidate_id NUMBER); CREATE TABLE Students (student_id NUMBER, student_details TEXT); CREATE TABLE Courses (course_name TEXT, course_id TEXT); CREATE TABLE Student_Course_Attendance (date_of_attendance TIME, course_id NUMBER, student_id NUMBER); CREATE TABLE Student_Course_Registrations (course_id NUMBER, student_id NUMBER); CREATE TABLE People (last_name TEXT, person_id NUMBER, first_name TEXT);"
      },
      {
        "question": "What about the course English?",
        "query": "SELECT count(*) FROM courses AS t1 JOIN student_course_attendance AS t2 ON t1.course_id = t2.course_id WHERE t1.course_name = \"English\"",
        "schema": "CREATE TABLE Candidates (candidate_id NUMBER); CREATE TABLE Student_Course_Registrations (course_id NUMBER, student_id NUMBER); CREATE TABLE Student_Course_Attendance (date_of_attendance TIME, course_id NUMBER, student_id NUMBER); CREATE TABLE People (first_name TEXT, person_id NUMBER, last_name TEXT); CREATE TABLE Students (student_details TEXT, student_id NUMBER); CREATE TABLE Courses (course_id TEXT, course_name TEXT);"
      }
    ],
    [
      {
        "question": "What are the dates of attendance for the student with id 141?",
        "query": "SELECT date_of_attendance FROM student_course_attendance WHERE student_id = 141",
        "schema": "CREATE TABLE Candidates (candidate_id NUMBER); CREATE TABLE Student_Course_Registrations (student_id NUMBER, registration_date TIME, course_id NUMBER); CREATE TABLE Student_Course_Attendance (date_of_attendance TIME, course_id NUMBER, student_id NUMBER); CREATE TABLE Candidate_Assessments (assessment_date TIME, candidate_id NUMBER); CREATE TABLE Students (student_details TEXT, student_id NUMBER); CREATE TABLE People (last_name TEXT, person_id NUMBER); CREATE TABLE People_Addresses (date_to TIME); CREATE TABLE Courses (course_id TEXT);"
      },
      {
        "question": "With id 171?",
        "query": "SELECT date_of_attendance FROM student_course_attendance WHERE student_id = 171",
        "schema": "CREATE TABLE Students (student_id NUMBER, student_details TEXT); CREATE TABLE Courses (course_id TEXT); CREATE TABLE Student_Course_Registrations (student_id NUMBER, course_id NUMBER, registration_date TIME); CREATE TABLE Candidate_Assessments (assessment_date TIME, candidate_id NUMBER); CREATE TABLE Student_Course_Attendance (date_of_attendance TIME, student_id NUMBER, course_id NUMBER); CREATE TABLE People (person_id NUMBER, last_name TEXT); CREATE TABLE Candidates (candidate_id NUMBER); CREATE TABLE People_Addresses (date_to TIME);"
      },
      {
        "question": "What are the courses that this student attends? Give the course names.",
        "query": "SELECT course_name FROM courses AS t1 JOIN student_course_attendance AS t2 ON t1.course_id = t2.course_id WHERE t2.student_id = 171",
        "schema": "CREATE TABLE Student_Course_Attendance (student_id NUMBER, course_id NUMBER, date_of_attendance TIME); CREATE TABLE Courses (course_id TEXT, course_name TEXT); CREATE TABLE Candidate_Assessments (candidate_id NUMBER, assessment_date TIME); CREATE TABLE People (person_id NUMBER, last_name TEXT); CREATE TABLE People_Addresses (date_to TIME); CREATE TABLE Students (student_details TEXT, student_id NUMBER); CREATE TABLE Student_Course_Registrations (student_id NUMBER, registration_date TIME, course_id NUMBER); CREATE TABLE Candidates (candidate_id NUMBER);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT count(*) FROM courses AS t1 JOIN student_course_attendance AS t2 ON t1.course_id = t2.course_id WHERE t2.student_id = 171",
        "schema": "CREATE TABLE Candidate_Assessments (candidate_id NUMBER, assessment_date TIME); CREATE TABLE Candidates (candidate_id NUMBER); CREATE TABLE Student_Course_Attendance (date_of_attendance TIME, course_id NUMBER, student_id NUMBER); CREATE TABLE Courses (course_name TEXT, course_id TEXT); CREATE TABLE Student_Course_Registrations (student_id NUMBER, course_id NUMBER, registration_date TIME); CREATE TABLE Students (student_id NUMBER, student_details TEXT); CREATE TABLE People (person_id NUMBER, last_name TEXT); CREATE TABLE People_Addresses (date_to TIME);"
      }
    ],
    [
      {
        "question": "What is the first name of the candidate with login name mkou?",
        "query": "SELECT first_name FROM people WHERE login_name = \"mkou\"",
        "schema": "CREATE TABLE People_Addresses (person_id NUMBER, address_id NUMBER, person_address_id NUMBER); CREATE TABLE Candidate_Assessments (candidate_id NUMBER); CREATE TABLE Students (student_id NUMBER, student_details TEXT); CREATE TABLE People (person_id NUMBER, login_name TEXT, first_name TEXT, last_name TEXT); CREATE TABLE Addresses (address_id NUMBER); CREATE TABLE Candidates (candidate_details TEXT, candidate_id NUMBER);"
      },
      {
        "question": "Give the candidate id instead.",
        "query": "SELECT t2.candidate_id FROM people AS t1 JOIN candidates AS t2 ON t1.person_id = t2.candidate_id WHERE t1.login_name = \"mkou\"",
        "schema": "CREATE TABLE Candidates (candidate_id NUMBER, candidate_details TEXT); CREATE TABLE Candidate_Assessments (candidate_id NUMBER); CREATE TABLE People (first_name TEXT, login_name TEXT, person_id NUMBER, last_name TEXT); CREATE TABLE Addresses (address_id NUMBER); CREATE TABLE People_Addresses (person_id NUMBER, address_id NUMBER, person_address_id NUMBER); CREATE TABLE Students (student_id NUMBER, student_details TEXT);"
      },
      {
        "question": "Find the same for the candidate with emailstanley.monahan@example.org.",
        "query": "SELECT t2.candidate_id FROM people AS t1 JOIN candidates AS t2 ON t1.person_id = t2.candidate_id WHERE t1.email_address = \"stanley.monahan@example.org\"",
        "schema": "CREATE TABLE Candidates (candidate_details TEXT, candidate_id NUMBER); CREATE TABLE People_Addresses (person_id NUMBER, address_id NUMBER, person_address_id NUMBER); CREATE TABLE Candidate_Assessments (candidate_id NUMBER); CREATE TABLE Addresses (address_id NUMBER); CREATE TABLE People (person_id NUMBER, last_name TEXT, first_name TEXT, login_name TEXT, email_address TEXT); CREATE TABLE Students (student_id NUMBER, student_details TEXT);"
      }
    ],
    [
      {
        "question": "What is the oldest date of assessment of the candidates?",
        "query": "SELECT assessment_date FROM candidate_assessments ORDER BY assessment_date ASC LIMIT 1",
        "schema": "CREATE TABLE People (person_id NUMBER); CREATE TABLE Candidates (candidate_details TEXT, candidate_id NUMBER); CREATE TABLE Candidate_Assessments (assessment_date TIME, candidate_id NUMBER, qualification TEXT, asessment_outcome_code TEXT);"
      },
      {
        "question": "Most recent?",
        "query": "SELECT assessment_date FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1",
        "schema": "CREATE TABLE Candidates (candidate_details TEXT, candidate_id NUMBER); CREATE TABLE People (person_id NUMBER); CREATE TABLE Candidate_Assessments (asessment_outcome_code TEXT, qualification TEXT, candidate_id NUMBER, assessment_date TIME);"
      },
      {
        "question": "Give the candidate id instead.",
        "query": "SELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1",
        "schema": "CREATE TABLE Candidate_Assessments (qualification TEXT, candidate_id NUMBER, asessment_outcome_code TEXT, assessment_date TIME); CREATE TABLE Candidates (candidate_details TEXT, candidate_id NUMBER); CREATE TABLE People (person_id NUMBER);"
      }
    ],
    [
      {
        "question": "Which student registered for the least number of courses? Give the student id.",
        "query": "SELECT student_id FROM student_course_registrations GROUP BY student_id ORDER BY count(*) ASC LIMIT 1",
        "schema": "CREATE TABLE People (person_id NUMBER, last_name TEXT); CREATE TABLE Students (student_id NUMBER, student_details TEXT); CREATE TABLE Courses (course_id TEXT); CREATE TABLE Student_Course_Attendance (course_id NUMBER, student_id NUMBER); CREATE TABLE Student_Course_Registrations (registration_date TIME, course_id NUMBER, student_id NUMBER); CREATE TABLE Candidate_Assessments (asessment_outcome_code TEXT);"
      },
      {
        "question": "Most number of courses?",
        "query": "SELECT student_id FROM student_course_registrations GROUP BY student_id ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Student_Course_Attendance (student_id NUMBER, course_id NUMBER); CREATE TABLE Students (student_details TEXT, student_id NUMBER); CREATE TABLE Student_Course_Registrations (registration_date TIME, course_id NUMBER, student_id NUMBER); CREATE TABLE People (person_id NUMBER, last_name TEXT); CREATE TABLE Courses (course_id TEXT); CREATE TABLE Candidate_Assessments (asessment_outcome_code TEXT);"
      },
      {
        "question": "Give the student details.",
        "query": "SELECT t1.student_details FROM students AS t1 JOIN student_course_registrations AS t2 ON t1.student_id = t2.student_id GROUP BY t1.student_id ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Candidate_Assessments (asessment_outcome_code TEXT); CREATE TABLE People (person_id NUMBER, last_name TEXT); CREATE TABLE Student_Course_Attendance (student_id NUMBER, course_id NUMBER); CREATE TABLE Students (student_id NUMBER, student_details TEXT); CREATE TABLE Courses (course_id TEXT); CREATE TABLE Student_Course_Registrations (course_id NUMBER, registration_date TIME, student_id NUMBER);"
      }
    ],
    [
      {
        "question": "How many students registered for each course?",
        "query": "SELECT count(*) FROM student_course_registrations GROUP BY course_id",
        "schema": "CREATE TABLE Students (student_id NUMBER); CREATE TABLE Student_Course_Registrations (registration_date TIME, course_id NUMBER, student_id NUMBER); CREATE TABLE Student_Course_Attendance (course_id NUMBER, student_id NUMBER); CREATE TABLE People (person_id NUMBER); CREATE TABLE Courses (course_id TEXT, course_name TEXT);"
      },
      {
        "question": "How many courses did each student register for?",
        "query": "SELECT count(*) FROM student_course_registrations GROUP BY student_id",
        "schema": "CREATE TABLE Student_Course_Registrations (course_id NUMBER, student_id NUMBER, registration_date TIME); CREATE TABLE Courses (course_id TEXT, course_name TEXT); CREATE TABLE Student_Course_Attendance (course_id NUMBER, student_id NUMBER); CREATE TABLE People (person_id NUMBER); CREATE TABLE Students (student_id NUMBER);"
      },
      {
        "question": "Give the student id as well.",
        "query": "SELECT t1.student_id , count(*) FROM students AS t1 JOIN student_course_registrations AS t2 ON t1.student_id = t2.student_id GROUP BY t1.student_id",
        "schema": "CREATE TABLE Students (student_id NUMBER); CREATE TABLE People (person_id NUMBER); CREATE TABLE Courses (course_id TEXT, course_name TEXT); CREATE TABLE Student_Course_Registrations (registration_date TIME, student_id NUMBER, course_id NUMBER); CREATE TABLE Student_Course_Attendance (course_id NUMBER, student_id NUMBER);"
      }
    ],
    [
      {
        "question": "How many registered students are there?",
        "query": "SELECT count(DISTINCT student_id) FROM student_course_registrations",
        "schema": "CREATE TABLE People (last_name TEXT, person_id NUMBER, first_name TEXT, login_name TEXT); CREATE TABLE Student_Course_Registrations (student_id NUMBER, course_id NUMBER, registration_date TIME); CREATE TABLE Student_Course_Attendance (student_id NUMBER, course_id NUMBER); CREATE TABLE Students (student_id NUMBER, student_details TEXT); CREATE TABLE Candidates (candidate_id NUMBER); CREATE TABLE People_Addresses (person_id NUMBER);"
      },
      {
        "question": "How many are there for each course?",
        "query": "SELECT count(*) FROM student_course_registrations GROUP BY course_id",
        "schema": "CREATE TABLE Courses (course_id TEXT, course_name TEXT); CREATE TABLE Student_Course_Attendance (course_id NUMBER, student_id NUMBER); CREATE TABLE People (last_name TEXT, first_name TEXT, login_name TEXT, person_id NUMBER); CREATE TABLE People_Addresses (person_id NUMBER); CREATE TABLE Student_Course_Registrations (registration_date TIME, student_id NUMBER, course_id NUMBER); CREATE TABLE Candidates (candidate_id NUMBER); CREATE TABLE Students (student_id NUMBER, student_details TEXT);"
      },
      {
        "question": "Give the course name as well.",
        "query": "SELECT t3.course_name , count(*) FROM students AS t1 JOIN student_course_registrations AS t2 ON t1.student_id = t2.student_id JOIN courses AS t3 ON t2.course_id = t3.course_id GROUP BY t2.course_id",
        "schema": "CREATE TABLE Courses (course_id TEXT, course_name TEXT); CREATE TABLE Student_Course_Registrations (registration_date TIME, student_id NUMBER, course_id NUMBER); CREATE TABLE Student_Course_Attendance (student_id NUMBER, course_id NUMBER); CREATE TABLE Students (student_id NUMBER, student_details TEXT); CREATE TABLE People_Addresses (person_id NUMBER); CREATE TABLE Candidates (candidate_id NUMBER); CREATE TABLE People (first_name TEXT, login_name TEXT, last_name TEXT, person_id NUMBER);"
      }
    ],
    [
      {
        "question": "Find the qualifications of the candidates with assessment code \"Pass\"",
        "query": "SELECT qualification FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"",
        "schema": "CREATE TABLE Candidates (candidate_id NUMBER, candidate_details TEXT); CREATE TABLE Candidate_Assessments (asessment_outcome_code TEXT, qualification TEXT, candidate_id NUMBER); CREATE TABLE People (person_id NUMBER);"
      },
      {
        "question": "Give their candidate details instead.",
        "query": "SELECT t1.candidate_details FROM candidates AS t1 JOIN candidate_assessments AS t2 ON t1.candidate_id = t2.candidate_id WHERE t2.asessment_outcome_code = \"Pass\"",
        "schema": "CREATE TABLE Candidate_Assessments (qualification TEXT, asessment_outcome_code TEXT, candidate_id NUMBER); CREATE TABLE Candidates (candidate_id NUMBER, candidate_details TEXT); CREATE TABLE People (person_id NUMBER); CREATE TABLE Students (student_details TEXT, student_id NUMBER);"
      },
      {
        "question": "What about with assessment code \"Fail\"",
        "query": "SELECT t1.candidate_details FROM candidates AS t1 JOIN candidate_assessments AS t2 ON t1.candidate_id = t2.candidate_id WHERE t2.asessment_outcome_code = \"Fail\"",
        "schema": "CREATE TABLE Candidate_Assessments (candidate_id NUMBER, qualification TEXT, asessment_outcome_code TEXT); CREATE TABLE Candidates (candidate_details TEXT, candidate_id NUMBER); CREATE TABLE People (person_id NUMBER); CREATE TABLE Students (student_details TEXT, student_id NUMBER);"
      },
      {
        "question": "Find the cell mobile number instead.",
        "query": "SELECT t3.cell_mobile_number FROM candidates AS t1 JOIN candidate_assessments AS t2 ON t1.candidate_id = t2.candidate_id JOIN people AS t3 ON t1.candidate_id = t3.person_id WHERE t2.asessment_outcome_code = \"Fail\"",
        "schema": "CREATE TABLE Students (student_details TEXT, student_id NUMBER); CREATE TABLE Candidate_Assessments (asessment_outcome_code TEXT, candidate_id NUMBER, qualification TEXT); CREATE TABLE Candidates (candidate_details TEXT, candidate_id NUMBER); CREATE TABLE People (person_id NUMBER, cell_mobile_number TEXT);"
      }
    ],
    [
      {
        "question": "Give the most recently attended course.",
        "query": "SELECT course_id FROM student_course_attendance ORDER BY date_of_attendance DESC LIMIT 1",
        "schema": "CREATE TABLE Candidates (candidate_id NUMBER); CREATE TABLE Students (student_id NUMBER); CREATE TABLE People (person_id NUMBER); CREATE TABLE Courses (course_name TEXT, course_id TEXT); CREATE TABLE Student_Course_Registrations (registration_date TIME, course_id NUMBER, student_id NUMBER); CREATE TABLE Student_Course_Attendance (student_id NUMBER, date_of_attendance TIME, course_id NUMBER); CREATE TABLE Candidate_Assessments (assessment_date TIME);"
      },
      {
        "question": "What about for the course 301?",
        "query": "SELECT course_id FROM student_course_attendance WHERE course_id = 301 ORDER BY date_of_attendance DESC LIMIT 1",
        "schema": "CREATE TABLE Student_Course_Registrations (course_id NUMBER, registration_date TIME, student_id NUMBER); CREATE TABLE Student_Course_Attendance (student_id NUMBER, date_of_attendance TIME, course_id NUMBER); CREATE TABLE Candidate_Assessments (assessment_date TIME); CREATE TABLE Students (student_id NUMBER); CREATE TABLE People (person_id NUMBER); CREATE TABLE Candidates (candidate_id NUMBER); CREATE TABLE Courses (course_id TEXT, course_name TEXT);"
      },
      {
        "question": "Give the student id instead.",
        "query": "SELECT student_id FROM student_course_attendance WHERE course_id = 301 ORDER BY date_of_attendance DESC LIMIT 1",
        "schema": "CREATE TABLE Candidates (candidate_id NUMBER); CREATE TABLE Students (student_id NUMBER); CREATE TABLE People (person_id NUMBER); CREATE TABLE Candidate_Assessments (assessment_date TIME); CREATE TABLE Courses (course_id TEXT, course_name TEXT); CREATE TABLE Student_Course_Registrations (registration_date TIME, course_id NUMBER, student_id NUMBER); CREATE TABLE Student_Course_Attendance (student_id NUMBER, date_of_attendance TIME, course_id NUMBER);"
      }
    ],
    [
      {
        "question": "What are the distinct address ids of the people?",
        "query": "SELECT DISTINCT address_id FROM people_addresses",
        "schema": "CREATE TABLE Addresses (address_id NUMBER); CREATE TABLE People (first_name TEXT, last_name TEXT, person_id NUMBER); CREATE TABLE Students (student_id NUMBER); CREATE TABLE People_Addresses (person_id NUMBER, address_id NUMBER, person_address_id NUMBER);"
      },
      {
        "question": "Give the same for the students.",
        "query": "SELECT DISTINCT t1.address_id FROM people_addresses AS t1 JOIN students AS t2 ON t1.person_id = t2.student_id",
        "schema": "CREATE TABLE People_Addresses (address_id NUMBER, person_id NUMBER, person_address_id NUMBER); CREATE TABLE People (first_name TEXT, person_id NUMBER, last_name TEXT); CREATE TABLE Addresses (address_id NUMBER); CREATE TABLE Students (student_id NUMBER, student_details TEXT);"
      },
      {
        "question": "Give their cities of addresses too.",
        "query": "SELECT DISTINCT t1.city FROM addresses AS t1 JOIN people_addresses AS t2 ON t1.address_id = t2.address_id JOIN students AS t3 ON t2.person_id = t3.student_id",
        "schema": "CREATE TABLE Students (student_id NUMBER, student_details TEXT); CREATE TABLE People_Addresses (person_address_id NUMBER, person_id NUMBER, address_id NUMBER); CREATE TABLE Addresses (city TEXT, address_id NUMBER); CREATE TABLE People (first_name TEXT, last_name TEXT, person_id NUMBER);"
      }
    ],
    [
      {
        "question": "What are the ids of students who registered courses?",
        "query": "SELECT student_id FROM student_course_registrations",
        "schema": "CREATE TABLE Courses (course_id TEXT); CREATE TABLE Candidate_Assessments (qualification TEXT, asessment_outcome_code TEXT, candidate_id NUMBER); CREATE TABLE People_Addresses (person_id NUMBER); CREATE TABLE People (last_name TEXT, first_name TEXT, person_id NUMBER); CREATE TABLE Candidates (candidate_id NUMBER); CREATE TABLE Students (student_id NUMBER, student_details TEXT); CREATE TABLE Student_Course_Attendance (course_id NUMBER, student_id NUMBER); CREATE TABLE Student_Course_Registrations (registration_date TIME, student_id NUMBER, course_id NUMBER);"
      },
      {
        "question": "What about for students who also attended courses?",
        "query": "SELECT student_id FROM student_course_registrations INTERSECT SELECT student_id FROM student_course_attendance",
        "schema": "CREATE TABLE People (person_id NUMBER, first_name TEXT, last_name TEXT); CREATE TABLE Students (student_id NUMBER, student_details TEXT); CREATE TABLE Student_Course_Registrations (course_id NUMBER, student_id NUMBER, registration_date TIME); CREATE TABLE People_Addresses (person_id NUMBER); CREATE TABLE Courses (course_id TEXT, course_name TEXT); CREATE TABLE Student_Course_Attendance (date_of_attendance TIME, student_id NUMBER, course_id NUMBER); CREATE TABLE Candidates (candidate_id NUMBER); CREATE TABLE Candidate_Assessments (asessment_outcome_code TEXT, qualification TEXT, candidate_id NUMBER);"
      },
      {
        "question": "Give the ids for students who did either.",
        "query": "SELECT student_id FROM student_course_registrations UNION SELECT student_id FROM student_course_attendance",
        "schema": "CREATE TABLE Candidate_Assessments (asessment_outcome_code TEXT, candidate_id NUMBER, qualification TEXT); CREATE TABLE Courses (course_id TEXT, course_name TEXT); CREATE TABLE Students (student_details TEXT, student_id NUMBER); CREATE TABLE Student_Course_Registrations (student_id NUMBER, course_id NUMBER, registration_date TIME); CREATE TABLE People_Addresses (person_id NUMBER); CREATE TABLE Candidates (candidate_id NUMBER); CREATE TABLE People (person_id NUMBER, first_name TEXT, last_name TEXT); CREATE TABLE Student_Course_Attendance (student_id NUMBER, course_id NUMBER, date_of_attendance TIME);"
      }
    ],
    [
      {
        "question": "Find the course ids of the courses registered by the student with id 171.",
        "query": "SELECT course_id FROM student_course_registrations WHERE student_id = 171",
        "schema": "CREATE TABLE Candidate_Assessments (candidate_id NUMBER); CREATE TABLE Students (student_details TEXT, student_id NUMBER); CREATE TABLE Student_Course_Registrations (student_id NUMBER, course_id NUMBER); CREATE TABLE Courses (course_id TEXT, course_name TEXT); CREATE TABLE People (last_name TEXT, person_id NUMBER); CREATE TABLE Student_Course_Attendance (course_id NUMBER, student_id NUMBER);"
      },
      {
        "question": "Find the same for the student with id 121.",
        "query": "SELECT course_id FROM student_course_registrations WHERE student_id = 121",
        "schema": "CREATE TABLE Student_Course_Attendance (student_id NUMBER, course_id NUMBER); CREATE TABLE Student_Course_Registrations (course_id NUMBER, student_id NUMBER); CREATE TABLE Candidate_Assessments (candidate_id NUMBER); CREATE TABLE People (last_name TEXT, person_id NUMBER); CREATE TABLE Courses (course_name TEXT, course_id TEXT); CREATE TABLE Students (student_id NUMBER, student_details TEXT);"
      },
      {
        "question": "Give also the id of courses which are attended by that student.",
        "query": "SELECT course_id FROM student_course_registrations WHERE student_id = 121 UNION SELECT course_id FROM student_course_attendance WHERE student_id = 121",
        "schema": "CREATE TABLE Student_Course_Registrations (student_id NUMBER, course_id NUMBER); CREATE TABLE Student_Course_Attendance (course_id NUMBER, student_id NUMBER); CREATE TABLE Courses (course_id TEXT, course_name TEXT); CREATE TABLE Candidate_Assessments (candidate_id NUMBER); CREATE TABLE People (last_name TEXT, person_id NUMBER); CREATE TABLE Students (student_id NUMBER, student_details TEXT);"
      }
    ],
    [
      {
        "question": "How many students registered for courses?",
        "query": "SELECT count(*) FROM student_course_registrations",
        "schema": "CREATE TABLE Courses (course_id TEXT); CREATE TABLE Students (student_id NUMBER); CREATE TABLE Student_Course_Attendance (course_id NUMBER, student_id NUMBER); CREATE TABLE People (person_id NUMBER, last_name TEXT); CREATE TABLE Student_Course_Registrations (student_id NUMBER, course_id NUMBER, registration_date TIME);"
      },
      {
        "question": "Of them, how many did not attend course 301?",
        "query": "SELECT count(*) FROM student_course_registrations WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance WHERE course_id = 301)",
        "schema": "CREATE TABLE People (person_id NUMBER, last_name TEXT); CREATE TABLE Student_Course_Attendance (course_id NUMBER, student_id NUMBER, date_of_attendance TIME); CREATE TABLE Students (student_id NUMBER); CREATE TABLE Student_Course_Registrations (student_id NUMBER, registration_date TIME, course_id NUMBER); CREATE TABLE Courses (course_id TEXT);"
      },
      {
        "question": "How many did not even attend any course?",
        "query": "SELECT count(*) FROM student_course_registrations WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)",
        "schema": "CREATE TABLE People (last_name TEXT, person_id NUMBER); CREATE TABLE Student_Course_Registrations (registration_date TIME, course_id NUMBER, student_id NUMBER); CREATE TABLE Courses (course_id TEXT); CREATE TABLE Student_Course_Attendance (student_id NUMBER, date_of_attendance TIME, course_id NUMBER); CREATE TABLE Students (student_id NUMBER);"
      },
      {
        "question": "Give all the info instead.",
        "query": "SELECT * FROM student_course_registrations WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)",
        "schema": "CREATE TABLE Students (student_id NUMBER, student_details TEXT); CREATE TABLE People (last_name TEXT, person_id NUMBER); CREATE TABLE Student_Course_Attendance (date_of_attendance TIME, student_id NUMBER, course_id NUMBER); CREATE TABLE Student_Course_Registrations (course_id NUMBER, registration_date TIME, student_id NUMBER); CREATE TABLE Courses (course_id TEXT);"
      }
    ],
    [
      {
        "question": "Give the registration dates of registrations for the course 305.",
        "query": "SELECT registration_date FROM student_course_registrations WHERE course_id = 305",
        "schema": "CREATE TABLE Candidates (candidate_id NUMBER); CREATE TABLE Courses (course_name TEXT, course_id TEXT); CREATE TABLE Student_Course_Registrations (student_id NUMBER, course_id NUMBER, registration_date TIME); CREATE TABLE Candidate_Assessments (assessment_date TIME); CREATE TABLE People (person_id NUMBER); CREATE TABLE Student_Course_Attendance (course_id NUMBER);"
      },
      {
        "question": "How about for the course statistics?",
        "query": "SELECT t2.registration_date FROM courses AS t1 JOIN student_course_registrations AS t2 ON t1.course_id = t2.course_id WHERE t1.course_name = \"statistics\"",
        "schema": "CREATE TABLE Student_Course_Registrations (registration_date TIME, student_id NUMBER, course_id NUMBER); CREATE TABLE People (person_id NUMBER); CREATE TABLE Courses (course_name TEXT, course_id TEXT); CREATE TABLE Candidate_Assessments (assessment_date TIME); CREATE TABLE Candidates (candidate_id NUMBER); CREATE TABLE Student_Course_Attendance (student_id NUMBER, course_id NUMBER);"
      },
      {
        "question": "Give the student ids, ordered by the registration date.",
        "query": "SELECT t2.student_id FROM courses AS t1 JOIN student_course_registrations AS t2 ON t1.course_id = t2.course_id WHERE t1.course_name = \"statistics\" ORDER BY t2.registration_date",
        "schema": "CREATE TABLE Candidate_Assessments (assessment_date TIME); CREATE TABLE Student_Course_Registrations (registration_date TIME, course_id NUMBER, student_id NUMBER); CREATE TABLE Candidates (candidate_id NUMBER); CREATE TABLE Courses (course_name TEXT, course_id TEXT); CREATE TABLE Students (student_id NUMBER); CREATE TABLE Student_Course_Attendance (course_id NUMBER, student_id NUMBER); CREATE TABLE People (person_id NUMBER);"
      }
    ]
  ],
  "wrestler": [
    [
      {
        "question": "What are the names of the wrestlers?",
        "query": "SELECT name FROM wrestler",
        "schema": "CREATE TABLE wrestler (Wrestler_ID NUMBER, Name TEXT); CREATE TABLE Elimination (Wrestler_ID TEXT);"
      },
      {
        "question": "Who has the most number of days held",
        "query": "SELECT name FROM wrestler ORDER BY days_held DESC LIMIT 1",
        "schema": "CREATE TABLE wrestler (Name TEXT, Days_held TEXT, Wrestler_ID NUMBER); CREATE TABLE Elimination (Wrestler_ID TEXT);"
      },
      {
        "question": "Least number instead.",
        "query": "SELECT name FROM wrestler ORDER BY days_held ASC LIMIT 1",
        "schema": "CREATE TABLE wrestler (Name TEXT, Wrestler_ID NUMBER, Days_held TEXT); CREATE TABLE Elimination (Wrestler_ID TEXT);"
      }
    ],
    [
      {
        "question": "What are the teams in elimination?",
        "query": "SELECT team FROM elimination",
        "schema": "CREATE TABLE Elimination (Eliminated_By TEXT, Team TEXT, Elimination_ID TEXT); CREATE TABLE wrestler (Wrestler_ID NUMBER);"
      },
      {
        "question": "Show the respective names of the wrestlers.",
        "query": "SELECT t2.name, t1.team FROM elimination AS t1 JOIN wrestler AS t2 ON t1.wrestler_id = t2.wrestler_id",
        "schema": "CREATE TABLE wrestler (Name TEXT, Wrestler_ID NUMBER); CREATE TABLE Elimination (Eliminated_By TEXT, Elimination_ID TEXT, Wrestler_ID TEXT, Team TEXT);"
      },
      {
        "question": "Order this by increasing time.",
        "query": "SELECT t2.name, t1.team FROM elimination AS t1 JOIN wrestler AS t2 ON t1.wrestler_id = t2.wrestler_id ORDER BY t1.time ASC",
        "schema": "CREATE TABLE Elimination (Time TEXT, Team TEXT, Wrestler_ID TEXT, Elimination_ID TEXT, Eliminated_By TEXT); CREATE TABLE wrestler (Name TEXT, Wrestler_ID NUMBER);"
      },
      {
        "question": "Decreasing instead.",
        "query": "SELECT t2.name, t1.team FROM elimination AS t1 JOIN wrestler AS t2 ON t1.wrestler_id = t2.wrestler_id ORDER BY t1.time DESC",
        "schema": "CREATE TABLE wrestler (Wrestler_ID NUMBER, Name TEXT); CREATE TABLE Elimination (Wrestler_ID TEXT, Time TEXT, Eliminated_By TEXT, Elimination_ID TEXT, Team TEXT);"
      },
      {
        "question": "Sort by days held in the same order.",
        "query": "SELECT t2.name , t1.team FROM elimination AS t1 JOIN wrestler AS t2 ON t1.wrestler_id = t2.wrestler_id ORDER BY t2.days_held DESC",
        "schema": "CREATE TABLE wrestler (Days_held TEXT, Name TEXT, Wrestler_ID NUMBER); CREATE TABLE Elimination (Team TEXT, Eliminated_By TEXT, Elimination_ID TEXT, Wrestler_ID TEXT, Time TEXT);"
      }
    ],
    [
      {
        "question": "Which wrestler has the largest reign?",
        "query": "SELECT name FROM wrestler ORDER BY reign DESC LIMIT 1",
        "schema": "CREATE TABLE Elimination (Wrestler_ID TEXT); CREATE TABLE wrestler (Name TEXT, Reign TEXT, Wrestler_ID NUMBER);"
      },
      {
        "question": "Largest days held instead.",
        "query": "SELECT name FROM wrestler ORDER BY days_held DESC LIMIT 1",
        "schema": "CREATE TABLE Elimination (Wrestler_ID TEXT); CREATE TABLE wrestler (Days_held TEXT, Reign TEXT, Name TEXT, Wrestler_ID NUMBER);"
      },
      {
        "question": "List the elimination move of this, not the name.",
        "query": "SELECT t1.elimination_move FROM elimination AS t1 JOIN wrestler AS t2 ON t1.wrestler_id = t2.wrestler_id ORDER BY days_held DESC LIMIT 1",
        "schema": "CREATE TABLE wrestler (Name TEXT, Reign TEXT, Wrestler_ID NUMBER, Days_held TEXT); CREATE TABLE Elimination (Elimination_Move TEXT, Wrestler_ID TEXT);"
      },
      {
        "question": "List the elimination time instead.",
        "query": "SELECT t1.time FROM elimination AS t1 JOIN wrestler AS t2 ON t1.wrestler_id = t2.wrestler_id ORDER BY t2.days_held DESC LIMIT 1",
        "schema": "CREATE TABLE wrestler (Wrestler_ID NUMBER, Days_held TEXT, Reign TEXT, Name TEXT); CREATE TABLE Elimination (Wrestler_ID TEXT, Elimination_Move TEXT, Time TEXT);"
      }
    ],
    [
      {
        "question": "What are the names of the wrestlers who have more than 1 reign?",
        "query": "SELECT name FROM wrestler WHERE reign > 1",
        "schema": "CREATE TABLE wrestler (Reign TEXT, Name TEXT, Wrestler_ID NUMBER); CREATE TABLE Elimination (Wrestler_ID TEXT);"
      },
      {
        "question": "More than 50 days held instead.",
        "query": "SELECT name FROM wrestler WHERE days_held > 50",
        "schema": "CREATE TABLE wrestler (Name TEXT, Wrestler_ID NUMBER, Reign TEXT, Days_held TEXT); CREATE TABLE Elimination (Wrestler_ID TEXT);"
      },
      {
        "question": "Give the times of elimination only.",
        "query": "SELECT t1.time FROM elimination AS t1 JOIN wrestler AS t2 ON t1.wrestler_id = t2.wrestler_id WHERE t2.days_held > 50",
        "schema": "CREATE TABLE wrestler (Wrestler_ID NUMBER, Reign TEXT, Days_held TEXT, Name TEXT); CREATE TABLE Elimination (Wrestler_ID TEXT, Time TEXT);"
      }
    ],
    [
      {
        "question": "What are the teams who have suffered elimination?",
        "query": "SELECT team FROM elimination",
        "schema": "CREATE TABLE wrestler (Wrestler_ID NUMBER); CREATE TABLE Elimination (Eliminated_By TEXT, Team TEXT, Elimination_ID TEXT);"
      },
      {
        "question": "Which ones have had only two eliminations?",
        "query": "SELECT team FROM elimination GROUP BY team HAVING count(*) = 2",
        "schema": "CREATE TABLE wrestler (Wrestler_ID NUMBER); CREATE TABLE Elimination (Elimination_ID TEXT, Eliminated_By TEXT, Team TEXT);"
      },
      {
        "question": "Which ones have had more than three?",
        "query": "SELECT team FROM elimination GROUP BY team HAVING count(*) > 3",
        "schema": "CREATE TABLE wrestler (Wrestler_ID NUMBER); CREATE TABLE Elimination (Team TEXT, Elimination_ID TEXT, Eliminated_By TEXT);"
      }
    ],
    [
      {
        "question": "Show the reigns of the wrestlers.",
        "query": "SELECT reign FROM wrestler",
        "schema": "CREATE TABLE Elimination (Wrestler_ID TEXT); CREATE TABLE wrestler (Wrestler_ID NUMBER, Reign TEXT);"
      },
      {
        "question": "What is the least common reign?",
        "query": "SELECT reign FROM wrestler GROUP BY reign ORDER BY count(*) ASC LIMIT 1",
        "schema": "CREATE TABLE wrestler (Reign TEXT, Wrestler_ID NUMBER); CREATE TABLE Elimination (Wrestler_ID TEXT);"
      },
      {
        "question": "Opposite?",
        "query": "SELECT reign FROM wrestler GROUP BY reign ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Elimination (Wrestler_ID TEXT); CREATE TABLE wrestler (Reign TEXT, Wrestler_ID NUMBER);"
      }
    ],
    [
      {
        "question": "List the events of the wrestlers.",
        "query": "SELECT event FROM wrestler",
        "schema": "CREATE TABLE wrestler (Wrestler_ID NUMBER, Name TEXT, Event TEXT); CREATE TABLE Elimination (Wrestler_ID TEXT);"
      },
      {
        "question": "Locations instead.",
        "query": "SELECT LOCATION FROM wrestler",
        "schema": "CREATE TABLE wrestler (Wrestler_ID NUMBER, Event TEXT, Name TEXT, Location TEXT); CREATE TABLE Elimination (Wrestler_ID TEXT);"
      },
      {
        "question": "Which ones are shared by one wrestler?",
        "query": "SELECT LOCATION FROM wrestler GROUP BY LOCATION HAVING count(*) = 1",
        "schema": "CREATE TABLE Elimination (Wrestler_ID TEXT); CREATE TABLE wrestler (Location TEXT, Name TEXT, Wrestler_ID NUMBER, Event TEXT);"
      },
      {
        "question": "More than two instead?",
        "query": "SELECT LOCATION FROM wrestler GROUP BY LOCATION HAVING count(*) > 2",
        "schema": "CREATE TABLE wrestler (Event TEXT, Name TEXT, Wrestler_ID NUMBER, Location TEXT); CREATE TABLE Elimination (Wrestler_ID TEXT);"
      }
    ],
    [
      {
        "question": "Show the names of the wrestlers.",
        "query": "SELECT name FROM wrestler",
        "schema": "CREATE TABLE wrestler (Wrestler_ID NUMBER, Name TEXT); CREATE TABLE Elimination (Wrestler_ID TEXT);"
      },
      {
        "question": "Who has been eliminated?",
        "query": "SELECT name FROM wrestler WHERE wrestler_id IN (SELECT wrestler_id FROM elimination)",
        "schema": "CREATE TABLE Elimination (Eliminated_By TEXT, Elimination_ID TEXT, Wrestler_ID TEXT); CREATE TABLE wrestler (Name TEXT, Wrestler_ID NUMBER);"
      },
      {
        "question": "Who hasn't been?",
        "query": "SELECT name FROM wrestler WHERE wrestler_id NOT IN (SELECT wrestler_id FROM elimination)",
        "schema": "CREATE TABLE wrestler (Name TEXT, Wrestler_ID NUMBER); CREATE TABLE Elimination (Elimination_ID TEXT, Eliminated_By TEXT, Wrestler_ID TEXT);"
      }
    ],
    [
      {
        "question": "Give the teams that have wrestlers eliminated by the move \"Go To Sleep\"",
        "query": "SELECT team FROM elimination WHERE elimination_move = \"Go To Sleep\"",
        "schema": "CREATE TABLE wrestler (Wrestler_ID NUMBER); CREATE TABLE Elimination (Elimination_ID TEXT, Eliminated_By TEXT, Team TEXT, Elimination_Move TEXT);"
      },
      {
        "question": "How about the ones eliminated by \"Orton\"",
        "query": "SELECT team FROM elimination WHERE eliminated_by = \"Orton\"",
        "schema": "CREATE TABLE wrestler (Wrestler_ID NUMBER); CREATE TABLE Elimination (Team TEXT, Time TEXT, Elimination_Move TEXT, Eliminated_By TEXT, Elimination_ID TEXT);"
      },
      {
        "question": "Give the ones that were also eliminated by \"Benjamin\"",
        "query": "SELECT team FROM elimination WHERE eliminated_by = \"Orton\" INTERSECT SELECT team FROM elimination WHERE eliminated_by = \"Benjamin\"",
        "schema": "CREATE TABLE wrestler (Wrestler_ID NUMBER); CREATE TABLE Elimination (Eliminated_By TEXT, Elimination_ID TEXT, Time TEXT, Elimination_Move TEXT, Team TEXT);"
      }
    ]
  ],
  "local_govt_and_lot": [
    [
      {
        "question": "How many residents are there total?",
        "query": "SELECT count(*) FROM residents",
        "schema": "CREATE TABLE Residents (property_id NUMBER, resident_id NUMBER, other_details TEXT, date_moved_in TIME); CREATE TABLE Customer_Event_Notes (resident_id NUMBER); CREATE TABLE Residents_Services (resident_id NUMBER, property_id NUMBER); CREATE TABLE Customer_Events (resident_id NUMBER, property_id NUMBER);"
      },
      {
        "question": "How many different properties are there?",
        "query": "SELECT count(DISTINCT property_id) FROM properties",
        "schema": "CREATE TABLE Residents (property_id NUMBER, resident_id NUMBER, other_details TEXT, date_moved_in TIME); CREATE TABLE Customer_Event_Notes (resident_id NUMBER); CREATE TABLE Residents_Services (property_id NUMBER, resident_id NUMBER); CREATE TABLE Properties (property_type_code TEXT, property_address TEXT, property_id NUMBER); CREATE TABLE Customer_Events (resident_id NUMBER, property_id NUMBER);"
      },
      {
        "question": "Show the property id and count of residents for the property with the most residents.",
        "query": "SELECT t1.property_id, count(*) FROM properties AS t1 JOIN residents AS t2 ON t1.property_id = t2.property_id GROUP BY t1.property_id ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Residents_Services (property_id NUMBER, resident_id NUMBER); CREATE TABLE Customer_Events (property_id NUMBER, resident_id NUMBER); CREATE TABLE Properties (property_type_code TEXT, property_id NUMBER, property_address TEXT); CREATE TABLE Customer_Event_Notes (resident_id NUMBER); CREATE TABLE Residents (date_moved_in TIME, property_id NUMBER, other_details TEXT, resident_id NUMBER);"
      },
      {
        "question": "Show this data for each property.",
        "query": "SELECT t1.property_id , count(*) FROM properties AS t1 JOIN residents AS t2 ON t1.property_id = t2.property_id GROUP BY t1.property_id",
        "schema": "CREATE TABLE Properties (property_type_code TEXT, property_id NUMBER, property_address TEXT); CREATE TABLE Customer_Events (resident_id NUMBER, property_id NUMBER); CREATE TABLE Customer_Event_Notes (resident_id NUMBER); CREATE TABLE Residents (date_moved_in TIME, resident_id NUMBER, property_id NUMBER, other_details TEXT); CREATE TABLE Residents_Services (resident_id NUMBER, property_id NUMBER);"
      }
    ],
    [
      {
        "question": "What is the id of the parent organization to the 'Robel-Schulist Group'?",
        "query": "SELECT parent_organization_id FROM organizations WHERE organization_details = 'Robel-Schulist Group'",
        "schema": "CREATE TABLE Organizations (organization_details TEXT, parent_organization_id NUMBER, organization_id NUMBER); CREATE TABLE Services (organization_id NUMBER); CREATE TABLE Residents (resident_id NUMBER, property_id NUMBER); CREATE TABLE Things (thing_id NUMBER, organization_id NUMBER); CREATE TABLE Properties (property_id NUMBER);"
      },
      {
        "question": "What is the detail of this organization id?",
        "query": "SELECT organization_details FROM organizations WHERE organization_id = (SELECT parent_organization_id FROM organizations WHERE organization_details = 'Robel-Schulist Group')",
        "schema": "CREATE TABLE Things (thing_id NUMBER, organization_id NUMBER); CREATE TABLE Properties (property_id NUMBER); CREATE TABLE Organizations (organization_details TEXT, organization_id NUMBER, parent_organization_id NUMBER); CREATE TABLE Services (organization_id NUMBER); CREATE TABLE Residents (resident_id NUMBER, property_id NUMBER);"
      },
      {
        "question": "What are the distinct service types that are provided by the organization which has detail 'Denesik and Sons Party'?",
        "query": "SELECT DISTINCT t1.service_type_code FROM services AS t1 JOIN organizations AS t2 ON t1.organization_id = t2.organization_id WHERE t2.organization_details = 'Denesik and Sons Party'",
        "schema": "CREATE TABLE Organizations (organization_details TEXT, parent_organization_id NUMBER, organization_id NUMBER); CREATE TABLE Customer_Event_Notes (service_type_code TEXT); CREATE TABLE Properties (property_id NUMBER); CREATE TABLE Services (service_type_code TEXT, organization_id NUMBER, service_details TEXT, service_id NUMBER); CREATE TABLE Residents_Services (service_id NUMBER); CREATE TABLE Things (thing_id NUMBER, organization_id NUMBER, service_details TEXT, service_type_code TEXT); CREATE TABLE Residents (resident_id NUMBER, property_id NUMBER);"
      }
    ],
    [
      {
        "question": "How many residential services were requested?",
        "query": "SELECT count(*) FROM residents_services",
        "schema": "CREATE TABLE Residents_Services (date_requested TIME, property_id NUMBER, resident_id NUMBER, service_id NUMBER); CREATE TABLE Services (service_type_code TEXT, service_id NUMBER); CREATE TABLE Residents (property_id NUMBER, resident_id NUMBER);"
      },
      {
        "question": "How about for each resident?",
        "query": "SELECT t1.resident_id , count(*) FROM residents AS t1 JOIN residents_services AS t2 ON t1.resident_id = t2.resident_id GROUP BY t1.resident_id",
        "schema": "CREATE TABLE Residents_Services (date_moved_in TIME, property_id NUMBER, resident_id NUMBER, service_id NUMBER, date_requested TIME); CREATE TABLE Residents (resident_id NUMBER, date_moved_in TIME, property_id NUMBER); CREATE TABLE Services (service_type_code TEXT, service_id NUMBER);"
      },
      {
        "question": "Also show the other details for each resident.",
        "query": "SELECT t1.resident_id , t1.other_details , count(*) FROM residents AS t1 JOIN residents_services AS t2 ON t1.resident_id = t2.resident_id GROUP BY t1.resident_id",
        "schema": "CREATE TABLE Services (service_details TEXT, service_type_code TEXT, service_id NUMBER); CREATE TABLE Residents_Services (other_details TEXT, resident_id NUMBER, service_id NUMBER, date_moved_in TIME, date_requested TIME, property_id NUMBER); CREATE TABLE Things (service_details TEXT); CREATE TABLE Residents (property_id NUMBER, other_details TEXT, date_moved_in TIME, resident_id NUMBER);"
      },
      {
        "question": "Order the previous table in descending order of the number of requests.",
        "query": "SELECT t1.resident_id , t1.other_details , count(*) FROM residents AS t1 JOIN residents_services AS t2 ON t1.resident_id = t2.resident_id GROUP BY t1.resident_id ORDER BY count(*) DESC",
        "schema": "CREATE TABLE Residents (other_details TEXT, date_moved_in TIME, resident_id NUMBER, property_id NUMBER); CREATE TABLE Residents_Services (other_details TEXT, service_id NUMBER, date_moved_in TIME, property_id NUMBER, date_requested TIME, resident_id NUMBER); CREATE TABLE Services (service_details TEXT, service_type_code TEXT, service_id NUMBER); CREATE TABLE Things (service_details TEXT);"
      }
    ],
    [
      {
        "question": "Show the ID numbers for all the different services that are available.",
        "query": "SELECT DISTINCT service_id FROM services",
        "schema": "CREATE TABLE Residents_Services (property_id NUMBER, service_id NUMBER, resident_id NUMBER); CREATE TABLE Services (organization_id NUMBER, service_id NUMBER, service_details TEXT, service_type_code TEXT); CREATE TABLE Things (service_type_code TEXT, thing_id NUMBER, service_details TEXT);"
      },
      {
        "question": "How many times has a resident service of the type 'Moving Out' been provided?",
        "query": "SELECT count(*) FROM services AS t1 JOIN residents_services AS t2 ON t1.service_id = t2.service_id WHERE service_type_code = 'Moving Out'",
        "schema": "CREATE TABLE Residents_Services (resident_id NUMBER, service_id NUMBER, property_id NUMBER, date_moved_in TIME, date_provided TIME); CREATE TABLE Services (service_type_code TEXT, organization_id NUMBER, service_details TEXT, service_id NUMBER); CREATE TABLE Residents (date_moved_out TIME, resident_id NUMBER, date_moved_in TIME); CREATE TABLE Properties (property_type_code TEXT); CREATE TABLE Things (service_type_code TEXT, thing_id NUMBER, service_details TEXT);"
      },
      {
        "question": "Which services have not been provided, if any?",
        "query": "SELECT count(*) FROM services WHERE service_id NOT IN (SELECT DISTINCT t1.service_id FROM services AS t1 JOIN residents_services AS t2 ON t1.service_id = t2.service_id)",
        "schema": "CREATE TABLE Residents_Services (service_id NUMBER, date_provided TIME, property_id NUMBER, date_moved_in TIME, resident_id NUMBER); CREATE TABLE Services (service_id NUMBER, service_details TEXT, service_type_code TEXT, organization_id NUMBER); CREATE TABLE Properties (property_type_code TEXT); CREATE TABLE Residents (date_moved_in TIME, resident_id NUMBER, date_moved_out TIME); CREATE TABLE Things (service_type_code TEXT, service_details TEXT, thing_id NUMBER);"
      },
      {
        "question": "What is the most number of times any particular service was provided?",
        "query": "SELECT count(*) FROM services AS t1 JOIN residents_services AS t2 ON t1.service_id = t2.service_id GROUP BY t1.service_id ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Properties (property_type_code TEXT); CREATE TABLE Things (service_type_code TEXT, thing_id NUMBER, service_details TEXT); CREATE TABLE Services (service_id NUMBER, service_type_code TEXT, organization_id NUMBER, service_details TEXT); CREATE TABLE Residents (date_moved_out TIME, resident_id NUMBER, date_moved_in TIME); CREATE TABLE Residents_Services (date_moved_in TIME, service_id NUMBER, property_id NUMBER, date_provided TIME, resident_id NUMBER);"
      },
      {
        "question": "What service was it? Show the service_id and service_details.",
        "query": "SELECT t1.service_id , t1.service_details , count(*) FROM services AS t1 JOIN residents_services AS t2 ON t1.service_id = t2.service_id GROUP BY t1.service_id ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Properties (property_type_code TEXT); CREATE TABLE Things (thing_id NUMBER, service_details TEXT, service_type_code TEXT); CREATE TABLE Residents_Services (date_moved_in TIME, resident_id NUMBER, other_details TEXT, property_id NUMBER, service_id NUMBER, date_provided TIME); CREATE TABLE Residents (date_moved_out TIME, resident_id NUMBER, date_moved_in TIME); CREATE TABLE Services (service_details TEXT, organization_id NUMBER, service_id NUMBER, service_type_code TEXT);"
      }
    ],
    [
      {
        "question": "Show the customer id numbers for those who have events.",
        "query": "SELECT t1.customer_id FROM customers AS t1 JOIN customer_events AS t2 ON t1.customer_id = t2.customer_id",
        "schema": "CREATE TABLE Customers (customer_id NUMBER, customer_details TEXT); CREATE TABLE Customer_Events (Customer_Event_ID NUMBER, thing_id NUMBER, customer_id NUMBER); CREATE TABLE Customer_Event_Notes (Customer_Event_ID NUMBER, Customer_Event_Note_ID NUMBER);"
      },
      {
        "question": "How about those with at least 3?",
        "query": "SELECT t1.customer_id FROM customers AS t1 JOIN customer_events AS t2 ON t1.customer_id = t2.customer_id GROUP BY t1.customer_id HAVING count(*) >= 3",
        "schema": "CREATE TABLE Customer_Event_Notes (Customer_Event_ID NUMBER, Customer_Event_Note_ID NUMBER); CREATE TABLE Customers (customer_id NUMBER, customer_details TEXT); CREATE TABLE Customer_Events (thing_id NUMBER, Customer_Event_ID NUMBER, customer_id NUMBER);"
      },
      {
        "question": "Also show customer details.",
        "query": "SELECT t1.customer_id , t1.customer_details FROM customers AS t1 JOIN customer_events AS t2 ON t1.customer_id = t2.customer_id GROUP BY t1.customer_id HAVING count(*) >= 3",
        "schema": "CREATE TABLE Customer_Event_Notes (Customer_Event_ID NUMBER, Customer_Event_Note_ID NUMBER); CREATE TABLE Customer_Events (thing_id NUMBER, Customer_Event_ID NUMBER, customer_id NUMBER); CREATE TABLE Customers (customer_id NUMBER, customer_details TEXT);"
      }
    ],
    [
      {
        "question": "Show any customer event id numbers that have corresponding notes.",
        "query": "SELECT t1.customer_event_id FROM customer_events AS t1 JOIN customer_event_notes AS t2 ON t1.customer_event_id = t2.customer_event_id",
        "schema": "CREATE TABLE Customer_Events (customer_id NUMBER, thing_id NUMBER, Customer_Event_ID NUMBER); CREATE TABLE Customer_Event_Notes (Customer_Event_ID NUMBER, property_id NUMBER, service_type_code TEXT, Customer_Event_Note_ID NUMBER); CREATE TABLE Customers (customer_id NUMBER, customer_details TEXT);"
      },
      {
        "question": "How many appear have more than 5 notes?",
        "query": "SELECT t1.customer_event_id FROM customer_events AS t1 JOIN customer_event_notes AS t2 ON t1.customer_event_id = t2.customer_event_id GROUP BY t1.customer_event_id HAVING count(*) > 5",
        "schema": "CREATE TABLE Customer_Event_Notes (service_type_code TEXT, Customer_Event_ID NUMBER, property_id NUMBER, Customer_Event_Note_ID NUMBER); CREATE TABLE Customers (customer_details TEXT, customer_id NUMBER); CREATE TABLE Customer_Events (thing_id NUMBER, Customer_Event_ID NUMBER, customer_id NUMBER);"
      },
      {
        "question": "How about between 1 and 3 notes? Also show property id.",
        "query": "SELECT t1.customer_event_id , t1.property_id FROM customer_events AS t1 JOIN customer_event_notes AS t2 ON t1.customer_event_id = t2.customer_event_id GROUP BY t1.customer_event_id HAVING count(*) BETWEEN 1 AND 3",
        "schema": "CREATE TABLE Customer_Event_Notes (Customer_Event_ID NUMBER, property_id NUMBER, Customer_Event_Note_ID NUMBER, service_type_code TEXT); CREATE TABLE Customers (customer_details TEXT, customer_id NUMBER); CREATE TABLE Customer_Events (customer_id NUMBER, thing_id NUMBER, property_id NUMBER, Customer_Event_ID NUMBER); CREATE TABLE Properties (property_id NUMBER, property_address TEXT); CREATE TABLE Residents (property_id NUMBER);"
      }
    ],
    [
      {
        "question": "What is the earliest status record date?",
        "query": "SELECT min(date_and_date) FROM timed_status_of_things",
        "schema": "CREATE TABLE Timed_Status_of_Things (Date_and_Date TIME, Status_of_Thing_Code TEXT, thing_id NUMBER);"
      },
      {
        "question": "Which things have a status record before the date '2017-06-19 02:59:21'?",
        "query": "SELECT * FROM timed_status_of_things WHERE date_and_date < '2017-06-19 02:59:21'",
        "schema": "CREATE TABLE Customer_Events (thing_id NUMBER); CREATE TABLE Timed_Locations_of_Things (thing_id NUMBER, Date_and_Time TIME); CREATE TABLE Things (thing_id NUMBER); CREATE TABLE Timed_Status_of_Things (Status_of_Thing_Code TEXT, Date_and_Date TIME, thing_id NUMBER);"
      },
      {
        "question": "Also show the things that have the status 'Close'.",
        "query": "SELECT * FROM timed_status_of_things WHERE status_of_thing_code = 'Close' OR date_and_date < '2017-06-19 02:59:21'",
        "schema": "CREATE TABLE Customer_Events (thing_id NUMBER); CREATE TABLE Things (thing_id NUMBER); CREATE TABLE Timed_Status_of_Things (Status_of_Thing_Code TEXT, Date_and_Date TIME, thing_id NUMBER); CREATE TABLE Timed_Locations_of_Things (thing_id NUMBER, Date_and_Time TIME);"
      },
      {
        "question": "Show the distinct ids and also the type of thing.",
        "query": "SELECT DISTINCT t2.thing_id , t2.type_of_thing_code FROM timed_status_of_things AS t1 JOIN things AS t2 ON t1.thing_id = t2.thing_id WHERE t1.status_of_thing_code = 'Close' OR t1.date_and_date < '2017-06-19 02:59:21'",
        "schema": "CREATE TABLE Timed_Status_of_Things (thing_id NUMBER, Status_of_Thing_Code TEXT, Date_and_Date TIME); CREATE TABLE Things (service_type_code TEXT, thing_id NUMBER, Type_of_Thing_Code TEXT); CREATE TABLE Properties (property_id NUMBER, property_type_code TEXT); CREATE TABLE Customer_Events (thing_id NUMBER); CREATE TABLE Timed_Locations_of_Things (Date_and_Time TIME, thing_id NUMBER);"
      }
    ],
    [
      {
        "question": "What are all the different types of service details for things?",
        "query": "SELECT DISTINCT service_details FROM things",
        "schema": "CREATE TABLE Residents_Services (service_id NUMBER); CREATE TABLE Things (service_details TEXT, thing_id NUMBER, service_type_code TEXT, Type_of_Thing_Code TEXT); CREATE TABLE Services (service_type_code TEXT, service_id NUMBER, service_details TEXT); CREATE TABLE Customer_Event_Notes (service_type_code TEXT); CREATE TABLE Properties (property_type_code TEXT);"
      },
      {
        "question": "How many of each?",
        "query": "SELECT count(*), service_details FROM things GROUP BY service_details",
        "schema": "CREATE TABLE Customer_Event_Notes (service_type_code TEXT); CREATE TABLE Services (service_details TEXT, service_id NUMBER, service_type_code TEXT); CREATE TABLE Residents_Services (service_id NUMBER); CREATE TABLE Properties (property_type_code TEXT); CREATE TABLE Things (service_details TEXT, thing_id NUMBER, Type_of_Thing_Code TEXT, service_type_code TEXT);"
      },
      {
        "question": "Show only the things with the detail being 'Unsatisfied'.",
        "query": "SELECT * FROM things WHERE service_details = 'Unsatisfied'",
        "schema": "CREATE TABLE Properties (property_type_code TEXT); CREATE TABLE Residents_Services (service_id NUMBER); CREATE TABLE Services (service_details TEXT, service_id NUMBER, service_type_code TEXT); CREATE TABLE Customer_Event_Notes (service_type_code TEXT); CREATE TABLE Things (thing_id NUMBER, service_details TEXT, Type_of_Thing_Code TEXT, service_type_code TEXT);"
      },
      {
        "question": "At how many distinct locations have they been located?",
        "query": "SELECT count(DISTINCT t2.location_code) FROM things AS t1 JOIN timed_locations_of_things AS t2 ON t1.thing_id = t2.thing_id WHERE t1.service_details = 'Unsatisfied'",
        "schema": "CREATE TABLE Services (service_id NUMBER, service_type_code TEXT, service_details TEXT); CREATE TABLE Customer_Event_Notes (service_type_code TEXT); CREATE TABLE Residents_Services (service_id NUMBER); CREATE TABLE Timed_Locations_of_Things (Date_and_Time TIME, Location_Code TEXT, thing_id NUMBER); CREATE TABLE Properties (property_address TEXT, property_type_code TEXT); CREATE TABLE Things (service_details TEXT, Type_of_Thing_Code TEXT, service_type_code TEXT, thing_id NUMBER);"
      }
    ],
    [
      {
        "question": "What are all the different parent organization ids?",
        "query": "SELECT DISTINCT parent_organization_id FROM organizations",
        "schema": "CREATE TABLE Residents (resident_id NUMBER, property_id NUMBER); CREATE TABLE Organizations (parent_organization_id NUMBER, organization_id NUMBER, organization_details TEXT); CREATE TABLE Properties (property_id NUMBER); CREATE TABLE Services (organization_id NUMBER); CREATE TABLE Things (organization_id NUMBER);"
      },
      {
        "question": "How many organizations are their own parent?",
        "query": "SELECT count(*) FROM organizations WHERE parent_organization_id = organization_id",
        "schema": "CREATE TABLE Services (organization_id NUMBER); CREATE TABLE Properties (property_id NUMBER); CREATE TABLE Things (organization_id NUMBER); CREATE TABLE Organizations (organization_id NUMBER, organization_details TEXT, parent_organization_id NUMBER); CREATE TABLE Residents (property_id NUMBER, resident_id NUMBER);"
      },
      {
        "question": "Which organizations are not a parent to any others?",
        "query": "SELECT organization_id FROM organizations EXCEPT SELECT parent_organization_id FROM organizations",
        "schema": "CREATE TABLE Services (organization_id NUMBER); CREATE TABLE Organizations (parent_organization_id NUMBER, organization_details TEXT, organization_id NUMBER); CREATE TABLE Properties (property_id NUMBER); CREATE TABLE Things (organization_id NUMBER); CREATE TABLE Residents (resident_id NUMBER, property_id NUMBER);"
      }
    ],
    [
      {
        "question": "Order the resident list alphabetically by other details.",
        "query": "SELECT * FROM residents ORDER BY other_details",
        "schema": "CREATE TABLE Properties (property_id NUMBER, other_details TEXT); CREATE TABLE Residents_Services (other_details TEXT, resident_id NUMBER); CREATE TABLE Things (service_details TEXT); CREATE TABLE Customer_Events (resident_id NUMBER); CREATE TABLE Residents (resident_id NUMBER, other_details TEXT); CREATE TABLE Customer_Event_Notes (resident_id NUMBER);"
      },
      {
        "question": "How many residents have the title of 'Prof'?",
        "query": "SELECT count(*) FROM residents WHERE other_details LIKE '%Prof.%'",
        "schema": "CREATE TABLE Customer_Event_Notes (resident_id NUMBER); CREATE TABLE Things (service_details TEXT); CREATE TABLE Customer_Events (resident_id NUMBER); CREATE TABLE Properties (other_details TEXT, property_id NUMBER); CREATE TABLE Residents_Services (other_details TEXT, resident_id NUMBER); CREATE TABLE Residents (other_details TEXT, resident_id NUMBER);"
      },
      {
        "question": "Alright, what about 'Miss'?",
        "query": "SELECT other_details FROM residents WHERE other_details LIKE '%Miss%'",
        "schema": "CREATE TABLE Properties (property_id NUMBER, other_details TEXT); CREATE TABLE Residents (resident_id NUMBER, other_details TEXT, date_moved_in TIME); CREATE TABLE Customer_Events (resident_id NUMBER); CREATE TABLE Residents_Services (other_details TEXT, resident_id NUMBER); CREATE TABLE Things (service_details TEXT); CREATE TABLE Customer_Event_Notes (resident_id NUMBER);"
      }
    ]
  ],
  "product_catalog": [
    [
      {
        "question": "What are the different attribute data types?",
        "query": "SELECT DISTINCT attribute_data_type FROM attribute_definitions",
        "schema": "CREATE TABLE Attribute_Definitions (attribute_name TEXT, attribute_id NUMBER, attribute_data_type TEXT); CREATE TABLE Catalog_Contents_Additional_Attributes (catalog_entry_id NUMBER, attribute_id NUMBER, attribute_value TEXT);"
      },
      {
        "question": "How many attributes are of each type?",
        "query": "SELECT attribute_data_type, count(*) FROM attribute_definitions GROUP BY attribute_data_type",
        "schema": "CREATE TABLE Catalog_Contents_Additional_Attributes (catalog_entry_id NUMBER, attribute_value TEXT, attribute_id NUMBER); CREATE TABLE Attribute_Definitions (attribute_name TEXT, attribute_data_type TEXT, attribute_id NUMBER);"
      },
      {
        "question": "What datatypes have more than 1?",
        "query": "SELECT attribute_data_type FROM attribute_definitions GROUP BY attribute_data_type HAVING count(*) > 1",
        "schema": "CREATE TABLE Catalog_Contents_Additional_Attributes (attribute_value TEXT, catalog_entry_id NUMBER, attribute_id NUMBER); CREATE TABLE Attribute_Definitions (attribute_name TEXT, attribute_id NUMBER, attribute_data_type TEXT);"
      },
      {
        "question": "How about more than 3?",
        "query": "SELECT attribute_data_type FROM attribute_definitions GROUP BY attribute_data_type HAVING count(*) > 3",
        "schema": "CREATE TABLE Attribute_Definitions (attribute_name TEXT, attribute_id NUMBER, attribute_data_type TEXT); CREATE TABLE Catalog_Contents_Additional_Attributes (catalog_entry_id NUMBER, attribute_id NUMBER, attribute_value TEXT);"
      }
    ],
    [
      {
        "question": "How many different catalog publishers are there?",
        "query": "SELECT count(DISTINCT catalog_publisher) FROM catalogs",
        "schema": "CREATE TABLE Catalogs (catalog_id NUMBER, catalog_name TEXT, catalog_publisher TEXT); CREATE TABLE Catalog_Contents (catalog_entry_id NUMBER, catalog_entry_name TEXT);"
      },
      {
        "question": "How many have a name that contaSELECT count(distinct(catalog_publisher)) FROM catalogs WHERE catalog_publisher LIKE \"%Murray%\"ins \"Murray\"",
        "query": "SELECT count(DISTINCT catalog_publisher) FROM catalogs WHERE catalog_publisher LIKE \"%Murray%\"",
        "schema": "CREATE TABLE Catalog_Contents (catalog_entry_name TEXT, catalog_entry_id NUMBER); CREATE TABLE Catalogs (catalog_id NUMBER, catalog_publisher TEXT, catalog_name TEXT);"
      },
      {
        "question": "Which ones?",
        "query": "SELECT distinct(catalog_publisher) FROM catalogs WHERE catalog_publisher LIKE \"%Murray%\"",
        "schema": "CREATE TABLE Catalogs (catalog_name TEXT, catalog_publisher TEXT, catalog_id NUMBER); CREATE TABLE Catalog_Contents (catalog_entry_name TEXT, catalog_entry_id NUMBER);"
      }
    ],
    [
      {
        "question": "List all the catalog ids and their respective catalog publisher?",
        "query": "SELECT catalog_id, catalog_publisher FROM catalogs",
        "schema": "CREATE TABLE Catalog_Contents_Additional_Attributes (catalog_entry_id NUMBER); CREATE TABLE Catalog_Contents (catalog_entry_name TEXT, next_entry_id NUMBER, catalog_entry_id NUMBER, parent_entry_id NUMBER); CREATE TABLE Catalog_Structure (catalog_level_number NUMBER, catalog_id NUMBER); CREATE TABLE Catalogs (catalog_publisher TEXT, catalog_id NUMBER, catalog_name TEXT);"
      },
      {
        "question": "How many catalogs have each publisher published?",
        "query": "SELECT catalog_publisher, count(*) FROM catalogs GROUP BY catalog_publisher",
        "schema": "CREATE TABLE Catalog_Structure (catalog_id NUMBER, catalog_level_number NUMBER); CREATE TABLE Catalog_Contents_Additional_Attributes (catalog_entry_id NUMBER); CREATE TABLE Catalogs (catalog_id NUMBER, catalog_name TEXT, catalog_publisher TEXT); CREATE TABLE Catalog_Contents (next_entry_id NUMBER, catalog_entry_id NUMBER, parent_entry_id NUMBER, catalog_entry_name TEXT);"
      },
      {
        "question": "Which publisher has the least?",
        "query": "SELECT catalog_publisher FROM catalogs GROUP BY catalog_publisher ORDER BY count(*) ASC LIMIT 1",
        "schema": "CREATE TABLE Catalog_Contents (catalog_entry_name TEXT, parent_entry_id NUMBER, catalog_entry_id NUMBER, next_entry_id NUMBER); CREATE TABLE Catalogs (catalog_id NUMBER, catalog_publisher TEXT, catalog_name TEXT); CREATE TABLE Catalog_Structure (catalog_level_number NUMBER, catalog_id NUMBER); CREATE TABLE Catalog_Contents_Additional_Attributes (catalog_entry_id NUMBER);"
      },
      {
        "question": "How about the most?",
        "query": "SELECT catalog_publisher FROM catalogs GROUP BY catalog_publisher ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Catalogs (catalog_id NUMBER, catalog_name TEXT, catalog_publisher TEXT); CREATE TABLE Catalog_Structure (catalog_level_number NUMBER, catalog_id NUMBER); CREATE TABLE Catalog_Contents_Additional_Attributes (catalog_entry_id NUMBER); CREATE TABLE Catalog_Contents (catalog_entry_id NUMBER, length TEXT, parent_entry_id NUMBER, next_entry_id NUMBER, height TEXT, catalog_entry_name TEXT);"
      }
    ],
    [
      {
        "question": "Show all the catalog information and their respective levels numbers!",
        "query": "SELECT * FROM catalogs AS t1 JOIN catalog_structure AS t2 ON t1.catalog_id = t2.catalog_id",
        "schema": "CREATE TABLE Catalogs (catalog_id NUMBER, catalog_name TEXT); CREATE TABLE Catalog_Contents (length TEXT, catalog_entry_name TEXT, parent_entry_id NUMBER, height TEXT, product_stock_number TEXT, next_entry_id NUMBER, catalog_entry_id NUMBER, catalog_level_number NUMBER); CREATE TABLE Catalog_Contents_Additional_Attributes (catalog_entry_id NUMBER, catalog_level_number NUMBER); CREATE TABLE Catalog_Structure (catalog_level_name TEXT, catalog_id NUMBER, catalog_level_number NUMBER);"
      },
      {
        "question": "Show me only those with a level number greater than five.",
        "query": "SELECT * FROM catalogs AS t1 JOIN catalog_structure AS t2 ON t1.catalog_id = t2.catalog_id WHERE catalog_level_number > 5",
        "schema": "CREATE TABLE Catalog_Contents_Additional_Attributes (catalog_entry_id NUMBER, catalog_level_number NUMBER); CREATE TABLE Catalog_Structure (catalog_level_name TEXT, catalog_id NUMBER, catalog_level_number NUMBER); CREATE TABLE Catalog_Contents (catalog_entry_name TEXT, parent_entry_id NUMBER, next_entry_id NUMBER, product_stock_number TEXT, height TEXT, catalog_entry_id NUMBER, length TEXT, catalog_level_number NUMBER); CREATE TABLE Catalogs (catalog_id NUMBER, catalog_name TEXT);"
      },
      {
        "question": "Show me just the names of these catalogs?",
        "query": "SELECT t1.catalog_name FROM catalogs AS t1 JOIN catalog_structure AS t2 ON t1.catalog_id = t2.catalog_id WHERE catalog_level_number > 5",
        "schema": "CREATE TABLE Catalog_Contents_Additional_Attributes (catalog_level_number NUMBER, catalog_entry_id NUMBER); CREATE TABLE Catalogs (catalog_name TEXT, catalog_id NUMBER); CREATE TABLE Catalog_Contents (height TEXT, parent_entry_id NUMBER, next_entry_id NUMBER, product_stock_number TEXT, catalog_entry_id NUMBER, catalog_level_number NUMBER, length TEXT, catalog_entry_name TEXT); CREATE TABLE Catalog_Structure (catalog_level_name TEXT, catalog_level_number NUMBER, catalog_id NUMBER);"
      },
      {
        "question": "Also show their publication dates.",
        "query": "SELECT t1.catalog_name , t1.date_of_publication FROM catalogs AS t1 JOIN catalog_structure AS t2 ON t1.catalog_id = t2.catalog_id WHERE catalog_level_number > 5",
        "schema": "CREATE TABLE Catalog_Contents_Additional_Attributes (catalog_level_number NUMBER, catalog_entry_id NUMBER); CREATE TABLE Catalogs (catalog_id NUMBER, date_of_publication TIME, catalog_name TEXT); CREATE TABLE Catalog_Contents (catalog_entry_id NUMBER, height TEXT, product_stock_number TEXT, catalog_entry_name TEXT, next_entry_id NUMBER, catalog_level_number NUMBER, parent_entry_id NUMBER, length TEXT); CREATE TABLE Catalog_Structure (catalog_id NUMBER, catalog_level_name TEXT, catalog_level_number NUMBER);"
      }
    ],
    [
      {
        "question": "How many different attributes are there?",
        "query": "SELECT count(*) FROM attribute_definitions",
        "schema": "CREATE TABLE Attribute_Definitions (attribute_name TEXT, attribute_data_type TEXT, attribute_id NUMBER); CREATE TABLE Catalog_Contents_Additional_Attributes (attribute_value TEXT, catalog_entry_id NUMBER, attribute_id NUMBER);"
      },
      {
        "question": "What is the id of the one that is used in the most catalog content entries?",
        "query": "SELECT attribute_id FROM catalog_contents_additional_attributes GROUP BY attribute_id ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Attribute_Definitions (attribute_id NUMBER, attribute_name TEXT, attribute_data_type TEXT); CREATE TABLE Catalog_Contents_Additional_Attributes (attribute_id NUMBER, catalog_entry_id NUMBER, attribute_value TEXT); CREATE TABLE Catalogs (catalog_id NUMBER, catalog_name TEXT); CREATE TABLE Catalog_Contents (parent_entry_id NUMBER, next_entry_id NUMBER, previous_entry_id NUMBER, catalog_entry_id NUMBER, catalog_entry_name TEXT); CREATE TABLE Catalog_Structure (catalog_id NUMBER);"
      },
      {
        "question": "Which catalog content entries use this attribute value?",
        "query": "SELECT * FROM catalog_contents AS t1 JOIN catalog_contents_additional_attributes AS t2 ON t1.catalog_entry_id = t2.catalog_entry_id WHERE t2.attribute_id = (SELECT attribute_id FROM catalog_contents_additional_attributes GROUP BY attribute_id ORDER BY count(*) DESC LIMIT 1)",
        "schema": "CREATE TABLE Catalog_Contents_Additional_Attributes (attribute_value TEXT, catalog_entry_id NUMBER, attribute_id NUMBER); CREATE TABLE Catalog_Structure (catalog_id NUMBER); CREATE TABLE Catalog_Contents (previous_entry_id NUMBER, catalog_entry_name TEXT, catalog_entry_id NUMBER, parent_entry_id NUMBER, next_entry_id NUMBER); CREATE TABLE Catalogs (catalog_id NUMBER, catalog_name TEXT); CREATE TABLE Attribute_Definitions (attribute_data_type TEXT, attribute_name TEXT, attribute_id NUMBER);"
      },
      {
        "question": "Show me just their catalog entry names?",
        "query": "SELECT t1.catalog_entry_name FROM catalog_contents AS t1 JOIN catalog_contents_additional_attributes AS t2 ON t1.catalog_entry_id = t2.catalog_entry_id WHERE t2.attribute_id = (SELECT attribute_id FROM catalog_contents_additional_attributes GROUP BY attribute_id ORDER BY count(*) DESC LIMIT 1)",
        "schema": "CREATE TABLE Catalog_Contents (previous_entry_id NUMBER, parent_entry_id NUMBER, catalog_entry_id NUMBER, catalog_entry_name TEXT, next_entry_id NUMBER); CREATE TABLE Catalog_Contents_Additional_Attributes (catalog_entry_id NUMBER, attribute_value TEXT, attribute_id NUMBER); CREATE TABLE Catalogs (catalog_id NUMBER, catalog_name TEXT); CREATE TABLE Catalog_Structure (catalog_id NUMBER); CREATE TABLE Attribute_Definitions (attribute_data_type TEXT, attribute_name TEXT, attribute_id NUMBER);"
      }
    ],
    [
      {
        "question": "What are prices of each catalog entry id?",
        "query": "SELECT catalog_entry_id, price_in_dollars, price_in_euros, price_in_pounds FROM catalog_contents",
        "schema": "CREATE TABLE Catalog_Contents (catalog_entry_name TEXT, previous_entry_id NUMBER, price_in_dollars NUMBER, catalog_entry_id NUMBER, next_entry_id NUMBER, price_in_pounds NUMBER, price_in_euros NUMBER); CREATE TABLE Catalogs (catalog_id NUMBER, catalog_name TEXT); CREATE TABLE Catalog_Contents_Additional_Attributes (catalog_entry_id NUMBER);"
      },
      {
        "question": "Show me only the prices in USD!",
        "query": "SELECT catalog_entry_id, price_in_dollars FROM catalog_contents",
        "schema": "CREATE TABLE Catalog_Contents (price_in_pounds NUMBER, price_in_euros NUMBER, catalog_entry_id NUMBER, price_in_dollars NUMBER, catalog_entry_name TEXT, previous_entry_id NUMBER, next_entry_id NUMBER); CREATE TABLE Catalog_Contents_Additional_Attributes (catalog_entry_id NUMBER); CREATE TABLE Catalogs (catalog_id NUMBER, catalog_name TEXT);"
      },
      {
        "question": "Which are the contents of the catalog with the highest one?",
        "query": "SELECT * FROM catalog_contents ORDER BY price_in_dollars DESC LIMIT 1",
        "schema": "CREATE TABLE Catalog_Contents (price_in_pounds NUMBER, next_entry_id NUMBER, catalog_entry_id NUMBER, height TEXT, previous_entry_id NUMBER, price_in_euros NUMBER, length TEXT, catalog_entry_name TEXT, price_in_dollars NUMBER); CREATE TABLE Catalogs (catalog_id NUMBER, catalog_name TEXT); CREATE TABLE Catalog_Contents_Additional_Attributes (catalog_entry_id NUMBER);"
      },
      {
        "question": "What is its entry name?",
        "query": "SELECT catalog_entry_name FROM catalog_contents ORDER BY price_in_dollars DESC LIMIT 1",
        "schema": "CREATE TABLE Catalog_Contents_Additional_Attributes (catalog_entry_id NUMBER); CREATE TABLE Catalog_Contents (catalog_entry_name TEXT, catalog_entry_id NUMBER, height TEXT, price_in_dollars NUMBER, next_entry_id NUMBER, length TEXT, price_in_pounds NUMBER, previous_entry_id NUMBER, price_in_euros NUMBER); CREATE TABLE Catalogs (catalog_name TEXT, catalog_id NUMBER);"
      }
    ],
    [
      {
        "question": "What are the prices of each catalog in USD?",
        "query": "SELECT catalog_entry_id, price_in_dollars FROM catalog_contents",
        "schema": "CREATE TABLE Catalog_Structure (catalog_level_number NUMBER, catalog_id NUMBER); CREATE TABLE Catalog_Contents (price_in_pounds NUMBER, price_in_dollars NUMBER, product_stock_number TEXT, catalog_entry_name TEXT, catalog_entry_id NUMBER, price_in_euros NUMBER); CREATE TABLE Catalog_Contents_Additional_Attributes (catalog_entry_id NUMBER); CREATE TABLE Catalogs (catalog_id NUMBER, catalog_name TEXT, catalog_publisher TEXT);"
      },
      {
        "question": "What is the one with the highest price?",
        "query": "SELECT * FROM catalog_contents AS t1 JOIN catalog_structure AS t2 ON t1.catalog_level_number = t2.catalog_level_number ORDER BY t1.price_in_dollars DESC LIMIT 1",
        "schema": "CREATE TABLE Catalog_Structure (catalog_level_number NUMBER, catalog_id NUMBER); CREATE TABLE Catalog_Contents (next_entry_id NUMBER, product_stock_number TEXT, height TEXT, price_in_pounds NUMBER, catalog_level_number NUMBER, catalog_entry_id NUMBER, price_in_euros NUMBER, price_in_dollars NUMBER, previous_entry_id NUMBER, catalog_entry_name TEXT); CREATE TABLE Catalogs (catalog_id NUMBER, catalog_name TEXT, catalog_publisher TEXT); CREATE TABLE Catalog_Contents_Additional_Attributes (catalog_entry_id NUMBER);"
      },
      {
        "question": "How about the lowest?",
        "query": "SELECT * FROM catalog_contents AS t1 JOIN catalog_structure AS t2 ON t1.catalog_level_number = t2.catalog_level_number ORDER BY t1.price_in_dollars LIMIT 1",
        "schema": "CREATE TABLE Catalog_Contents (price_in_pounds NUMBER, length TEXT, product_stock_number TEXT, price_in_euros NUMBER, height TEXT, catalog_level_number NUMBER, catalog_entry_name TEXT, previous_entry_id NUMBER, width TEXT, catalog_entry_id NUMBER, next_entry_id NUMBER, price_in_dollars NUMBER); CREATE TABLE Catalog_Contents_Additional_Attributes (catalog_level_number NUMBER, catalog_entry_id NUMBER); CREATE TABLE Catalogs (catalog_publisher TEXT, catalog_id NUMBER, catalog_name TEXT); CREATE TABLE Catalog_Structure (catalog_level_number NUMBER, catalog_id NUMBER, catalog_level_name TEXT);"
      },
      {
        "question": "What is its catalog level name?",
        "query": "SELECT t2.catalog_level_name FROM catalog_contents AS t1 JOIN catalog_structure AS t2 ON t1.catalog_level_number = t2.catalog_level_number ORDER BY t1.price_in_dollars LIMIT 1",
        "schema": "CREATE TABLE Catalogs (catalog_id NUMBER, catalog_name TEXT, catalog_publisher TEXT); CREATE TABLE Catalog_Contents_Additional_Attributes (catalog_level_number NUMBER, catalog_entry_id NUMBER); CREATE TABLE Catalog_Contents (price_in_dollars NUMBER, height TEXT, next_entry_id NUMBER, width TEXT, price_in_euros NUMBER, price_in_pounds NUMBER, catalog_level_number NUMBER, product_stock_number TEXT, catalog_entry_name TEXT, previous_entry_id NUMBER, catalog_entry_id NUMBER, length TEXT); CREATE TABLE Catalog_Structure (catalog_level_number NUMBER, catalog_id NUMBER, catalog_level_name TEXT);"
      }
    ],
    [
      {
        "question": "What are all the catalog entry names?",
        "query": "SELECT catalog_entry_name FROM catalog_contents",
        "schema": "CREATE TABLE Catalogs (catalog_id NUMBER, catalog_name TEXT); CREATE TABLE Catalog_Contents (previous_entry_id NUMBER, next_entry_id NUMBER, catalog_entry_name TEXT, catalog_entry_id NUMBER);"
      },
      {
        "question": "What are the prices in euros of each?",
        "query": "SELECT catalog_entry_name, price_in_euros FROM catalog_contents",
        "schema": "CREATE TABLE Catalog_Contents_Additional_Attributes (catalog_entry_id NUMBER); CREATE TABLE Catalog_Contents (price_in_dollars NUMBER, next_entry_id NUMBER, previous_entry_id NUMBER, catalog_entry_id NUMBER, price_in_euros NUMBER, catalog_entry_name TEXT, price_in_pounds NUMBER); CREATE TABLE Catalogs (catalog_name TEXT, catalog_id NUMBER);"
      },
      {
        "question": "Show me the average price in euros!",
        "query": "SELECT avg(price_in_euros) FROM catalog_contents",
        "schema": "CREATE TABLE Catalog_Contents_Additional_Attributes (catalog_entry_id NUMBER); CREATE TABLE Catalogs (catalog_name TEXT, catalog_id NUMBER); CREATE TABLE Catalog_Contents (catalog_entry_name TEXT, catalog_entry_id NUMBER, price_in_pounds NUMBER, price_in_dollars NUMBER, price_in_euros NUMBER, next_entry_id NUMBER, previous_entry_id NUMBER);"
      },
      {
        "question": "Also provide the lowest price!",
        "query": "SELECT avg(price_in_euros) , min(price_in_euros) FROM catalog_contents",
        "schema": "CREATE TABLE Catalog_Contents (price_in_pounds NUMBER, next_entry_id NUMBER, catalog_entry_name TEXT, price_in_euros NUMBER, price_in_dollars NUMBER, catalog_entry_id NUMBER, previous_entry_id NUMBER); CREATE TABLE Catalog_Contents_Additional_Attributes (catalog_entry_id NUMBER); CREATE TABLE Catalogs (catalog_id NUMBER, catalog_name TEXT);"
      }
    ],
    [
      {
        "question": "Show the name, length, height, and width of every catalog product.",
        "query": "SELECT catalog_entry_name, height, width, LENGTH FROM catalog_contents",
        "schema": "CREATE TABLE Catalog_Structure (catalog_id NUMBER); CREATE TABLE Catalog_Contents (catalog_entry_name TEXT, height TEXT, length TEXT, width TEXT, catalog_entry_id NUMBER); CREATE TABLE Catalogs (catalog_id NUMBER, catalog_name TEXT);"
      },
      {
        "question": "Can you show me the list sorted on width FROM greatest to least!",
        "query": "SELECT catalog_entry_name, height, width, LENGTH FROM catalog_contents ORDER BY width DESC",
        "schema": "CREATE TABLE Catalog_Contents (catalog_entry_id NUMBER, height TEXT, length TEXT, width TEXT, catalog_entry_name TEXT); CREATE TABLE Catalog_Structure (catalog_id NUMBER); CREATE TABLE Catalogs (catalog_name TEXT, catalog_id NUMBER);"
      },
      {
        "question": "How about based on height!",
        "query": "SELECT catalog_entry_name, height, width, LENGTH FROM catalog_contents ORDER BY height DESC",
        "schema": "CREATE TABLE Catalogs (catalog_id NUMBER, catalog_name TEXT); CREATE TABLE Catalog_Contents (catalog_entry_id NUMBER, catalog_entry_name TEXT, width TEXT, height TEXT, length TEXT, next_entry_id NUMBER); CREATE TABLE Catalog_Structure (catalog_id NUMBER);"
      },
      {
        "question": "Show me the entry_name of just the first row!",
        "query": "SELECT catalog_entry_name FROM catalog_contents ORDER BY height DESC LIMIT 1",
        "schema": "CREATE TABLE Catalogs (catalog_id NUMBER, catalog_name TEXT); CREATE TABLE Catalog_Contents (width TEXT, length TEXT, next_entry_id NUMBER, height TEXT, catalog_entry_id NUMBER, catalog_entry_name TEXT); CREATE TABLE Catalog_Structure (catalog_id NUMBER);"
      }
    ],
    [
      {
        "question": "What are the distinct capacity each catalog can have?",
        "query": "SELECT DISTINCT capacity FROM catalog_contents",
        "schema": "CREATE TABLE Catalogs (catalog_id NUMBER, catalog_name TEXT); CREATE TABLE Catalog_Structure (catalog_level_number NUMBER, catalog_id NUMBER); CREATE TABLE Catalog_Contents (capacity TEXT, catalog_entry_id NUMBER, catalog_entry_name TEXT);"
      },
      {
        "question": "Which one is the most common?",
        "query": "SELECT capacity FROM catalog_contents GROUP BY capacity ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Catalog_Structure (catalog_level_number NUMBER, catalog_id NUMBER); CREATE TABLE Catalogs (catalog_name TEXT, catalog_id NUMBER); CREATE TABLE Catalog_Contents (catalog_entry_id NUMBER, capacity TEXT, catalog_entry_name TEXT);"
      },
      {
        "question": "Which one is the smallest?",
        "query": "SELECT capacity FROM catalog_contents ORDER BY capacity ASC LIMIT 1",
        "schema": "CREATE TABLE Catalogs (catalog_id NUMBER, catalog_name TEXT); CREATE TABLE Catalog_Contents (catalog_entry_id NUMBER, capacity TEXT, width TEXT, catalog_entry_name TEXT, height TEXT, length TEXT); CREATE TABLE Catalog_Structure (catalog_level_number NUMBER, catalog_id NUMBER);"
      },
      {
        "question": "What is the name of a catalog product that has this?",
        "query": "SELECT catalog_entry_name FROM catalog_contents ORDER BY capacity ASC LIMIT 1",
        "schema": "CREATE TABLE Catalog_Structure (catalog_id NUMBER, catalog_level_number NUMBER); CREATE TABLE Catalogs (catalog_name TEXT, catalog_id NUMBER); CREATE TABLE Catalog_Contents (catalog_entry_name TEXT, length TEXT, capacity TEXT, height TEXT, catalog_entry_id NUMBER, width TEXT);"
      }
    ],
    [
      {
        "question": "What are all the names of all the catalog products?",
        "query": "SELECT catalog_entry_name FROM catalog_contents",
        "schema": "CREATE TABLE Catalogs (catalog_id NUMBER, catalog_name TEXT); CREATE TABLE Catalog_Contents (catalog_entry_id NUMBER, catalog_entry_name TEXT);"
      },
      {
        "question": "Could you also show me their product stock numbers?!",
        "query": "SELECT catalog_entry_name, product_stock_number FROM catalog_contents",
        "schema": "CREATE TABLE Catalogs (catalog_id NUMBER, catalog_name TEXT); CREATE TABLE Catalog_Contents (catalog_entry_id NUMBER, catalog_entry_name TEXT, product_stock_number TEXT, next_entry_id NUMBER); CREATE TABLE Catalog_Contents_Additional_Attributes (catalog_entry_id NUMBER);"
      },
      {
        "question": "How many have stock number that starts with \"2\"?",
        "query": "SELECT count(*) FROM catalog_contents WHERE product_stock_number LIKE \"2%\"",
        "schema": "CREATE TABLE Catalog_Contents_Additional_Attributes (catalog_entry_id NUMBER); CREATE TABLE Catalog_Contents (catalog_entry_name TEXT, product_stock_number TEXT, next_entry_id NUMBER, catalog_entry_id NUMBER); CREATE TABLE Catalogs (catalog_id NUMBER, catalog_name TEXT);"
      },
      {
        "question": "What are their names?",
        "query": "SELECT catalog_entry_name FROM catalog_contents WHERE product_stock_number LIKE \"2%\"",
        "schema": "CREATE TABLE Catalog_Contents (catalog_entry_id NUMBER, catalog_entry_name TEXT, next_entry_id NUMBER, product_stock_number TEXT); CREATE TABLE Catalog_Contents_Additional_Attributes (catalog_entry_id NUMBER); CREATE TABLE Catalogs (catalog_name TEXT, catalog_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show me each catalog entry id and their catalog level numbers.",
        "query": "SELECT catalog_entry_id, catalog_level_number FROM catalog_contents_additional_attributes",
        "schema": "CREATE TABLE Catalog_Structure (catalog_level_name TEXT, catalog_level_number NUMBER, catalog_id NUMBER); CREATE TABLE Catalog_Contents_Additional_Attributes (catalog_level_number NUMBER, catalog_entry_id NUMBER); CREATE TABLE Catalog_Contents (next_entry_id NUMBER, previous_entry_id NUMBER, parent_entry_id NUMBER, catalog_entry_id NUMBER, catalog_entry_name TEXT, catalog_level_number NUMBER); CREATE TABLE Catalogs (catalog_name TEXT, catalog_id NUMBER);"
      },
      {
        "question": "Which ones have more than one catalog level number?",
        "query": "SELECT catalog_entry_id, catalog_level_number FROM catalog_contents_additional_attributes GROUP BY catalog_entry_id HAVING COUNT (DISTINCT catalog_level_number) > 1",
        "schema": "CREATE TABLE Catalog_Contents_Additional_Attributes (catalog_level_number NUMBER, catalog_entry_id NUMBER, attribute_value TEXT, attribute_id NUMBER); CREATE TABLE Catalog_Contents (catalog_entry_id NUMBER, catalog_entry_name TEXT, catalog_level_number NUMBER, next_entry_id NUMBER, previous_entry_id NUMBER, parent_entry_id NUMBER, length TEXT); CREATE TABLE Attribute_Definitions (attribute_id NUMBER, attribute_name TEXT); CREATE TABLE Catalogs (catalog_name TEXT, catalog_id NUMBER); CREATE TABLE Catalog_Structure (catalog_level_name TEXT, catalog_level_number NUMBER, catalog_id NUMBER);"
      },
      {
        "question": "Which ones have a catalog level number of 8?",
        "query": "SELECT catalog_entry_id, catalog_level_number FROM catalog_contents_additional_attributes WHERE catalog_level_number = \"8\"",
        "schema": "CREATE TABLE Catalog_Contents (catalog_entry_name TEXT, previous_entry_id NUMBER, catalog_level_number NUMBER, catalog_entry_id NUMBER, next_entry_id NUMBER, parent_entry_id NUMBER, length TEXT); CREATE TABLE Catalog_Contents_Additional_Attributes (attribute_value TEXT, catalog_level_number NUMBER, catalog_entry_id NUMBER, attribute_id NUMBER); CREATE TABLE Catalogs (catalog_name TEXT, catalog_id NUMBER); CREATE TABLE Attribute_Definitions (attribute_name TEXT, attribute_id NUMBER); CREATE TABLE Catalog_Structure (catalog_id NUMBER, catalog_level_number NUMBER, catalog_level_name TEXT);"
      },
      {
        "question": "Show me the entry names of each!",
        "query": "SELECT t1.catalog_entry_name FROM catalog_contents AS t1 JOIN catalog_contents_additional_attributes AS t2 ON t1.catalog_entry_id = t2.catalog_entry_id WHERE t2.catalog_level_number = \"8\"",
        "schema": "CREATE TABLE Catalog_Structure (catalog_level_name TEXT, catalog_id NUMBER, catalog_level_number NUMBER); CREATE TABLE Attribute_Definitions (attribute_id NUMBER, attribute_name TEXT); CREATE TABLE Catalogs (catalog_name TEXT, catalog_id NUMBER); CREATE TABLE Catalog_Contents (length TEXT, previous_entry_id NUMBER, catalog_level_number NUMBER, next_entry_id NUMBER, catalog_entry_name TEXT, catalog_entry_id NUMBER, parent_entry_id NUMBER); CREATE TABLE Catalog_Contents_Additional_Attributes (catalog_level_number NUMBER, attribute_id NUMBER, attribute_value TEXT, catalog_entry_id NUMBER);"
      }
    ],
    [
      {
        "question": "What catalog products have a length smaller than 3?",
        "query": "SELECT * FROM catalog_contents WHERE LENGTH < 3",
        "schema": "CREATE TABLE Catalogs (catalog_name TEXT, catalog_id NUMBER); CREATE TABLE Catalog_Contents (catalog_entry_id NUMBER, capacity TEXT, height TEXT, product_stock_number TEXT, width TEXT, next_entry_id NUMBER, length TEXT, catalog_entry_name TEXT); CREATE TABLE Catalog_Structure (catalog_id NUMBER);"
      },
      {
        "question": "Show me their names!",
        "query": "SELECT catalog_entry_name FROM catalog_contents WHERE LENGTH < 3",
        "schema": "CREATE TABLE Catalog_Contents (next_entry_id NUMBER, catalog_entry_id NUMBER, length TEXT, capacity TEXT, height TEXT, width TEXT, catalog_entry_name TEXT, product_stock_number TEXT); CREATE TABLE Catalog_Structure (catalog_id NUMBER); CREATE TABLE Catalogs (catalog_id NUMBER, catalog_name TEXT);"
      },
      {
        "question": "Also include those with a height that are greater than 5!",
        "query": "SELECT catalog_entry_name FROM catalog_contents WHERE LENGTH < 3 OR height > 5",
        "schema": "CREATE TABLE Catalog_Contents_Additional_Attributes (catalog_entry_id NUMBER); CREATE TABLE Catalogs (catalog_id NUMBER, catalog_name TEXT); CREATE TABLE Catalog_Structure (catalog_id NUMBER); CREATE TABLE Catalog_Contents (next_entry_id NUMBER, height TEXT, catalog_entry_name TEXT, capacity TEXT, catalog_entry_id NUMBER, product_stock_number TEXT, length TEXT, width TEXT);"
      }
    ],
    [
      {
        "question": "For each catalog id, show the attribute ids and values!!",
        "query": "SELECT attribute_id, attribute_value FROM catalog_contents_additional_attributes",
        "schema": "CREATE TABLE Attribute_Definitions (attribute_name TEXT, attribute_data_type TEXT, attribute_id NUMBER); CREATE TABLE Catalog_Contents (catalog_entry_id NUMBER, next_entry_id NUMBER, parent_entry_id NUMBER, catalog_entry_name TEXT, previous_entry_id NUMBER); CREATE TABLE Catalog_Contents_Additional_Attributes (catalog_entry_id NUMBER, attribute_id NUMBER, attribute_value TEXT); CREATE TABLE Catalogs (catalog_name TEXT, catalog_id NUMBER); CREATE TABLE Catalog_Structure (catalog_id NUMBER, catalog_level_number NUMBER);"
      },
      {
        "question": "Show me just those that a value of 1!",
        "query": "SELECT attribute_id, attribute_value FROM catalog_contents_additional_attributes WHERE attribute_value = 1",
        "schema": "CREATE TABLE Catalogs (catalog_name TEXT, catalog_id NUMBER); CREATE TABLE Attribute_Definitions (attribute_data_type TEXT, attribute_id NUMBER, attribute_name TEXT); CREATE TABLE Catalog_Contents (catalog_entry_name TEXT, previous_entry_id NUMBER, catalog_entry_id NUMBER, next_entry_id NUMBER, parent_entry_id NUMBER); CREATE TABLE Catalog_Contents_Additional_Attributes (attribute_id NUMBER, catalog_entry_id NUMBER, attribute_value TEXT); CREATE TABLE Catalog_Structure (catalog_id NUMBER, catalog_level_number NUMBER);"
      },
      {
        "question": "Actually, how about those with a value of 0?",
        "query": "SELECT attribute_id, attribute_value FROM catalog_contents_additional_attributes WHERE attribute_value = 0",
        "schema": "CREATE TABLE Attribute_Definitions (attribute_name TEXT, attribute_id NUMBER, attribute_data_type TEXT); CREATE TABLE Catalog_Contents_Additional_Attributes (catalog_entry_id NUMBER, attribute_id NUMBER, attribute_value TEXT); CREATE TABLE Catalogs (catalog_name TEXT, catalog_id NUMBER); CREATE TABLE Catalog_Contents (previous_entry_id NUMBER, catalog_entry_id NUMBER, catalog_entry_name TEXT, next_entry_id NUMBER, parent_entry_id NUMBER); CREATE TABLE Catalog_Structure (catalog_id NUMBER, catalog_level_number NUMBER);"
      },
      {
        "question": "What are the just the names and attribute IDs of each?",
        "query": "SELECT t1.attribute_name , t1.attribute_id FROM attribute_definitions AS t1 JOIN catalog_contents_additional_attributes AS t2 ON t1.attribute_id = t2.attribute_id WHERE t2.attribute_value = 0",
        "schema": "CREATE TABLE Catalogs (catalog_name TEXT, catalog_id NUMBER); CREATE TABLE Attribute_Definitions (attribute_name TEXT, attribute_id NUMBER, attribute_data_type TEXT); CREATE TABLE Catalog_Structure (catalog_level_number NUMBER, catalog_id NUMBER); CREATE TABLE Catalog_Contents_Additional_Attributes (attribute_value TEXT, attribute_id NUMBER, catalog_entry_id NUMBER); CREATE TABLE Catalog_Contents (parent_entry_id NUMBER, next_entry_id NUMBER, catalog_entry_name TEXT, previous_entry_id NUMBER, catalog_entry_id NUMBER);"
      }
    ]
  ],
  "entertainment_awards": [
    [
      {
        "question": "What festivals are there?",
        "query": "SELECT festival_name FROM festival_detail",
        "schema": "CREATE TABLE festival_detail (Chair_Name TEXT, Num_of_Audience NUMBER, Festival_Name TEXT, Festival_ID NUMBER, Location TEXT);"
      },
      {
        "question": "What is the audience size for each of these festivals?",
        "query": "SELECT festival_name, num_of_audience FROM festival_detail",
        "schema": "CREATE TABLE festival_detail (Location TEXT, Festival_Name TEXT, Chair_Name TEXT, Festival_ID NUMBER, Num_of_Audience NUMBER);"
      },
      {
        "question": "Which of these festivals has the largest audience?",
        "query": "SELECT festival_name FROM festival_detail WHERE num_of_audience = (SELECT max(num_of_audience)FROM festival_detail)",
        "schema": "CREATE TABLE festival_detail (Festival_Name TEXT, Festival_ID NUMBER, Chair_Name TEXT, Location TEXT, Num_of_Audience NUMBER);"
      },
      {
        "question": "Where is this festival located?",
        "query": "SELECT LOCATION FROM festival_detail ORDER BY num_of_audience DESC LIMIT 1",
        "schema": "CREATE TABLE festival_detail (Location TEXT, Festival_Name TEXT, Festival_ID NUMBER, Num_of_Audience NUMBER, Chair_Name TEXT);"
      }
    ],
    [
      {
        "question": "Tell me the names of all the festivals available.",
        "query": "SELECT festival_name FROM festival_detail",
        "schema": "CREATE TABLE artwork (Name TEXT); CREATE TABLE festival_detail (Chair_Name TEXT, Festival_ID NUMBER, Festival_Name TEXT);"
      },
      {
        "question": "When did these festivals occur?",
        "query": "SELECT festival_name, YEAR FROM festival_detail",
        "schema": "CREATE TABLE artwork (Name TEXT); CREATE TABLE festival_detail (Festival_ID NUMBER, Festival_Name TEXT, Year NUMBER, Chair_Name TEXT);"
      },
      {
        "question": "Which one of these festivals occurred most recently?",
        "query": "SELECT festival_name FROM festival_detail ORDER BY YEAR DESC LIMIT 1",
        "schema": "CREATE TABLE festival_detail (Festival_Name TEXT, Festival_ID NUMBER, Year NUMBER, Chair_Name TEXT); CREATE TABLE artwork (Name TEXT);"
      },
      {
        "question": "Ok, what about the top three most recent ones?",
        "query": "SELECT festival_name FROM festival_detail ORDER BY YEAR DESC LIMIT 3",
        "schema": "CREATE TABLE artwork (Name TEXT); CREATE TABLE festival_detail (Festival_Name TEXT, Year NUMBER, Chair_Name TEXT, Festival_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show me the names of the artworks.",
        "query": "SELECT name FROM artwork",
        "schema": "CREATE TABLE artwork (Name TEXT, Type TEXT, Artwork_ID NUMBER);"
      },
      {
        "question": "Can you also tell me the types of these artworks?",
        "query": "SELECT name, TYPE FROM artwork",
        "schema": "CREATE TABLE artwork (Artwork_ID NUMBER, Name TEXT, Type TEXT);"
      },
      {
        "question": "Which of these artworks were nominated in some festival?",
        "query": "SELECT t1.name FROM artwork AS t1 JOIN nomination AS t2 ON t1.artwork_id = t2.artwork_id JOIN festival_detail AS t3 ON t2.festival_id = t3.festival_id",
        "schema": "CREATE TABLE festival_detail (Festival_ID NUMBER, Festival_Name TEXT); CREATE TABLE nomination (Result TEXT, Artwork_ID NUMBER, Festival_ID NUMBER); CREATE TABLE artwork (Name TEXT, Artwork_ID NUMBER, Type TEXT);"
      },
      {
        "question": "What were the names of these festivals?",
        "query": "SELECT t2.name , t3.festival_name FROM nomination AS t1 JOIN artwork AS t2 ON t1.artwork_id = t2.artwork_id JOIN festival_detail AS t3 ON t1.festival_id = t3.festival_id",
        "schema": "CREATE TABLE artwork (Type TEXT, Name TEXT, Artwork_ID NUMBER); CREATE TABLE festival_detail (Festival_ID NUMBER, Festival_Name TEXT); CREATE TABLE nomination (Festival_ID NUMBER, Artwork_ID NUMBER, Result TEXT);"
      }
    ],
    [
      {
        "question": "Tell me about the names of all the artworks.",
        "query": "SELECT name FROM artwork",
        "schema": "CREATE TABLE artwork (Type TEXT, Name TEXT, Artwork_ID NUMBER);"
      },
      {
        "question": "What are the types of all these artworks?",
        "query": "SELECT DISTINCT TYPE FROM artwork",
        "schema": "CREATE TABLE artwork (Name TEXT, Artwork_ID NUMBER, Type TEXT);"
      },
      {
        "question": "Which of these were nominated?",
        "query": "SELECT DISTINCT t1.type FROM artwork AS t1 JOIN nomination AS t2 ON t1.artwork_id = t2.artwork_id JOIN festival_detail AS t3 ON t2.festival_id = t3.festival_id",
        "schema": "CREATE TABLE artwork (Type TEXT, Name TEXT, Artwork_ID NUMBER); CREATE TABLE festival_detail (Festival_ID NUMBER); CREATE TABLE nomination (Artwork_ID NUMBER, Festival_ID NUMBER, Result TEXT);"
      },
      {
        "question": "Which of these were nominated in 2007?",
        "query": "SELECT DISTINCT t2.type FROM nomination AS t1 JOIN artwork AS t2 ON t1.artwork_id = t2.artwork_id JOIN festival_detail AS t3 ON t1.festival_id = t3.festival_id WHERE t3.year = 2007",
        "schema": "CREATE TABLE nomination (Result TEXT, Artwork_ID NUMBER, Festival_ID NUMBER); CREATE TABLE festival_detail (Festival_Name TEXT, Year NUMBER, Festival_ID NUMBER); CREATE TABLE artwork (Artwork_ID NUMBER, Name TEXT, Type TEXT);"
      }
    ],
    [
      {
        "question": "List the names of all the artworks.",
        "query": "SELECT name FROM artwork",
        "schema": "CREATE TABLE artwork (Name TEXT, Type TEXT, Artwork_ID NUMBER);"
      },
      {
        "question": "At which festivals were these artworks nominated?",
        "query": "SELECT t1.name, t3.festival_name FROM artwork AS t1 JOIN nomination AS t2 ON t1.artwork_id = t2.artwork_id JOIN festival_detail AS t3 ON t2.festival_id = t3.festival_id",
        "schema": "CREATE TABLE nomination (Festival_ID NUMBER, Artwork_ID NUMBER, Result TEXT); CREATE TABLE artwork (Type TEXT, Artwork_ID NUMBER, Name TEXT); CREATE TABLE festival_detail (Festival_ID NUMBER, Festival_Name TEXT);"
      },
      {
        "question": "What year were these artworks nominated?",
        "query": "SELECT t1.name, t3.year FROM artwork AS t1 JOIN nomination AS t2 ON t1.artwork_id = t2.artwork_id JOIN festival_detail AS t3 ON t2.festival_id = t3.festival_id",
        "schema": "CREATE TABLE festival_detail (Year NUMBER, Festival_Name TEXT, Festival_ID NUMBER); CREATE TABLE nomination (Result TEXT, Festival_ID NUMBER, Artwork_ID NUMBER); CREATE TABLE artwork (Type TEXT, Artwork_ID NUMBER, Name TEXT);"
      },
      {
        "question": "Can you list them in ascending order?",
        "query": "SELECT t2.name FROM nomination AS t1 JOIN artwork AS t2 ON t1.artwork_id = t2.artwork_id JOIN festival_detail AS t3 ON t1.festival_id = t3.festival_id ORDER BY t3.year",
        "schema": "CREATE TABLE nomination (Festival_ID NUMBER, Artwork_ID NUMBER, Result TEXT); CREATE TABLE festival_detail (Year NUMBER, Festival_ID NUMBER, Festival_Name TEXT); CREATE TABLE artwork (Type TEXT, Name TEXT, Artwork_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What are the names of all the festivals?",
        "query": "SELECT festival_name FROM festival_detail",
        "schema": "CREATE TABLE artwork (Name TEXT); CREATE TABLE festival_detail (Chair_Name TEXT, Festival_Name TEXT, Festival_ID NUMBER);"
      },
      {
        "question": "What are the nominated artworks of these festivals?",
        "query": "SELECT t3.festival_name, t1.name FROM artwork AS t1 JOIN nomination AS t2 ON t1.artwork_id = t2.artwork_id JOIN festival_detail AS t3 ON t2.festival_id = t3.festival_id",
        "schema": "CREATE TABLE festival_detail (Festival_ID NUMBER, Festival_Name TEXT, Chair_Name TEXT); CREATE TABLE nomination (Festival_ID NUMBER, Artwork_ID NUMBER, Result TEXT); CREATE TABLE artwork (Type TEXT, Name TEXT, Artwork_ID NUMBER);"
      },
      {
        "question": "Show the types of these artworks given these festivals.",
        "query": "SELECT t3.festival_name, t1.type FROM artwork AS t1 JOIN nomination AS t2 ON t1.artwork_id = t2.artwork_id JOIN festival_detail AS t3 ON t2.festival_id = t3.festival_id",
        "schema": "CREATE TABLE artwork (Name TEXT, Artwork_ID NUMBER, Type TEXT); CREATE TABLE nomination (Result TEXT, Artwork_ID NUMBER, Festival_ID NUMBER); CREATE TABLE festival_detail (Chair_Name TEXT, Festival_Name TEXT, Festival_ID NUMBER);"
      },
      {
        "question": "Which of these festivals have type \"Program Talent Show\"?",
        "query": "SELECT t3.festival_name FROM nomination AS t1 JOIN artwork AS t2 ON t1.artwork_id = t2.artwork_id JOIN festival_detail AS t3 ON t1.festival_id = t3.festival_id WHERE t2.type = \"Program Talent Show\"",
        "schema": "CREATE TABLE nomination (Festival_ID NUMBER, Artwork_ID NUMBER, Result TEXT); CREATE TABLE artwork (Artwork_ID NUMBER, Name TEXT, Type TEXT); CREATE TABLE festival_detail (Festival_ID NUMBER, Chair_Name TEXT, Festival_Name TEXT);"
      }
    ],
    [
      {
        "question": "List the names of the festivals.",
        "query": "SELECT festival_name FROM festival_detail",
        "schema": "CREATE TABLE artwork (Name TEXT); CREATE TABLE festival_detail (Chair_Name TEXT, Festival_ID NUMBER, Festival_Name TEXT);"
      },
      {
        "question": "Show me the names of the nominated artworks for the festivals listed.",
        "query": "SELECT t3.festival_name, t1.name FROM artwork AS t1 JOIN nomination AS t2 ON t1.artwork_id = t2.artwork_id JOIN festival_detail AS t3 ON t2.festival_id = t3.festival_id",
        "schema": "CREATE TABLE nomination (Festival_ID NUMBER, Artwork_ID NUMBER); CREATE TABLE festival_detail (Chair_Name TEXT, Festival_ID NUMBER, Festival_Name TEXT); CREATE TABLE artwork (Artwork_ID NUMBER, Name TEXT);"
      },
      {
        "question": "Which of these festivals have at least two nominations for artworks?",
        "query": "SELECT t3.festival_name FROM artwork AS t1 JOIN nomination AS t2 ON t1.artwork_id = t2.artwork_id JOIN festival_detail AS t3 ON t2.festival_id = t3.festival_id GROUP BY t3.festival_id HAVING count(*) >= 2",
        "schema": "CREATE TABLE artwork (Name TEXT, Artwork_ID NUMBER); CREATE TABLE festival_detail (Chair_Name TEXT, Festival_Name TEXT, Festival_ID NUMBER); CREATE TABLE nomination (Artwork_ID NUMBER, Festival_ID NUMBER);"
      },
      {
        "question": "Show me their ids as well.",
        "query": "SELECT t1.festival_id , t3.festival_name FROM nomination AS t1 JOIN artwork AS t2 ON t1.artwork_id = t2.artwork_id JOIN festival_detail AS t3 ON t1.festival_id = t3.festival_id GROUP BY t1.festival_id HAVING count(*) >= 2",
        "schema": "CREATE TABLE nomination (Artwork_ID NUMBER, Festival_ID NUMBER); CREATE TABLE artwork (Name TEXT, Artwork_ID NUMBER); CREATE TABLE festival_detail (Festival_Name TEXT, Festival_ID NUMBER, Chair_Name TEXT);"
      }
    ],
    [
      {
        "question": "Show me the ids of the festivals.",
        "query": "SELECT festival_id FROM festival_detail",
        "schema": "CREATE TABLE nomination (Festival_ID NUMBER); CREATE TABLE festival_detail (Festival_ID NUMBER, Num_of_Audience NUMBER, Festival_Name TEXT);"
      },
      {
        "question": "Show me the names as well.",
        "query": "SELECT festival_id, festival_name FROM festival_detail",
        "schema": "CREATE TABLE artwork (Name TEXT); CREATE TABLE festival_detail (Festival_Name TEXT, Num_of_Audience NUMBER, Festival_ID NUMBER); CREATE TABLE nomination (Festival_ID NUMBER);"
      },
      {
        "question": "Add in the artworks nominated as well.",
        "query": "SELECT t3.festival_id, t3.festival_name, t1.name FROM artwork AS t1 JOIN nomination AS t2 ON t1.artwork_id = t2.artwork_id JOIN festival_detail AS t3 ON t2.festival_id = t3.festival_id",
        "schema": "CREATE TABLE festival_detail (Festival_Name TEXT, Num_of_Audience NUMBER, Festival_ID NUMBER); CREATE TABLE nomination (Artwork_ID NUMBER, Festival_ID NUMBER); CREATE TABLE artwork (Name TEXT, Artwork_ID NUMBER);"
      },
      {
        "question": "Instead of showing the artworks nominated, show me the number of nominated artworks for each of these festivals.",
        "query": "SELECT t1.festival_id , t3.festival_name , count(*) FROM nomination AS t1 JOIN artwork AS t2 ON t1.artwork_id = t2.artwork_id JOIN festival_detail AS t3 ON t1.festival_id = t3.festival_id GROUP BY t1.festival_id",
        "schema": "CREATE TABLE artwork (Name TEXT, Artwork_ID NUMBER); CREATE TABLE festival_detail (Num_of_Audience NUMBER, Festival_Name TEXT, Festival_ID NUMBER); CREATE TABLE nomination (Artwork_ID NUMBER, Festival_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show me the names of all the artworks.",
        "query": "SELECT name FROM artwork",
        "schema": "CREATE TABLE artwork (Artwork_ID NUMBER, Type TEXT, Name TEXT);"
      },
      {
        "question": "Show me their types as well.",
        "query": "SELECT name, TYPE FROM artwork",
        "schema": "CREATE TABLE artwork (Type TEXT, Name TEXT, Artwork_ID NUMBER);"
      },
      {
        "question": "What is the number of artworks for each type?",
        "query": "SELECT TYPE, count(*) FROM artwork GROUP BY TYPE",
        "schema": "CREATE TABLE artwork (Type TEXT, Name TEXT, Artwork_ID NUMBER);"
      },
      {
        "question": "Which of these types is the most common?",
        "query": "SELECT TYPE FROM artwork GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE artwork (Type TEXT, Name TEXT, Artwork_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show all the names of all the festivals.",
        "query": "SELECT festival_name FROM festival_detail",
        "schema": "CREATE TABLE festival_detail (Festival_Name TEXT, Chair_Name TEXT, Festival_ID NUMBER);"
      },
      {
        "question": "Show me the corresponding year for these festivals.",
        "query": "SELECT festival_name, YEAR FROM festival_detail",
        "schema": "CREATE TABLE festival_detail (Year NUMBER, Festival_ID NUMBER, Festival_Name TEXT, Chair_Name TEXT);"
      },
      {
        "question": "What were the amount of festivals for each of these years?",
        "query": "SELECT YEAR, count(*) FROM festival_detail GROUP BY YEAR",
        "schema": "CREATE TABLE festival_detail (Festival_Name TEXT, Year NUMBER, Festival_ID NUMBER, Chair_Name TEXT);"
      },
      {
        "question": "Which of these years has more than one festival?",
        "query": "SELECT YEAR FROM festival_detail GROUP BY YEAR HAVING count(*) > 1",
        "schema": "CREATE TABLE festival_detail (Year NUMBER, Festival_ID NUMBER, Festival_Name TEXT, Chair_Name TEXT);"
      }
    ],
    [
      {
        "question": "Tell me everything about all the artworks.",
        "query": "SELECT * FROM artwork",
        "schema": "CREATE TABLE artwork (Artwork_ID NUMBER, Type TEXT, Name TEXT); CREATE TABLE nomination (Artwork_ID NUMBER);"
      },
      {
        "question": "List only the names of all these artworks.",
        "query": "SELECT name FROM artwork",
        "schema": "CREATE TABLE nomination (Artwork_ID NUMBER); CREATE TABLE artwork (Type TEXT, Artwork_ID NUMBER, Name TEXT);"
      },
      {
        "question": "Which of these were nominated?",
        "query": "SELECT t1.name FROM artwork AS t1 JOIN nomination AS t2 ON t1.artwork_id = t2.artwork_id JOIN festival_detail AS t3 ON t2.festival_id = t3.festival_id",
        "schema": "CREATE TABLE nomination (Festival_ID NUMBER, Result TEXT, Artwork_ID NUMBER); CREATE TABLE festival_detail (Festival_Name TEXT, Festival_ID NUMBER); CREATE TABLE artwork (Name TEXT, Type TEXT, Artwork_ID NUMBER);"
      },
      {
        "question": "Which of those weren't?",
        "query": "SELECT name FROM artwork WHERE artwork_id NOT IN (SELECT artwork_id FROM nomination)",
        "schema": "CREATE TABLE nomination (Festival_ID NUMBER, Artwork_ID NUMBER, Result TEXT); CREATE TABLE artwork (Artwork_ID NUMBER, Name TEXT, Type TEXT); CREATE TABLE festival_detail (Festival_Name TEXT, Festival_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show me the names of all the festivals.",
        "query": "SELECT festival_name FROM festival_detail",
        "schema": "CREATE TABLE festival_detail (Chair_Name TEXT, Festival_Name TEXT, Festival_ID NUMBER);"
      },
      {
        "question": "Show the year for each of them.",
        "query": "SELECT festival_name, YEAR FROM festival_detail",
        "schema": "CREATE TABLE festival_detail (Festival_Name TEXT, Year NUMBER, Chair_Name TEXT, Festival_ID NUMBER);"
      },
      {
        "question": "Can you only show the audience size for year 2008?",
        "query": "SELECT num_of_audience FROM festival_detail WHERE YEAR = 2008",
        "schema": "CREATE TABLE festival_detail (Chair_Name TEXT, Festival_Name TEXT, Festival_ID NUMBER, Year NUMBER, Num_of_Audience NUMBER);"
      },
      {
        "question": "Can you only show the audience sizes for year 2008 and 2010?",
        "query": "SELECT num_of_audience FROM festival_detail WHERE YEAR = 2008 OR YEAR = 2010",
        "schema": "CREATE TABLE festival_detail (Year NUMBER, Chair_Name TEXT, Num_of_Audience NUMBER, Festival_Name TEXT, Festival_ID NUMBER);"
      }
    ]
  ],
  "behavior_monitoring": [
    [
      {
        "question": "Show me the mobile number of the student Emma Rohan.",
        "query": "SELECT cell_mobile_number FROM students WHERE first_name = \"Emma\" AND last_name = \"Rohan\"",
        "schema": "CREATE TABLE Behavior_Incident (student_id NUMBER); CREATE TABLE Students (first_name TEXT, middle_name TEXT, student_id NUMBER, last_name TEXT, other_student_details TEXT, address_id NUMBER, cell_mobile_number TEXT); CREATE TABLE Addresses (address_id NUMBER); CREATE TABLE Teachers (cell_mobile_number TEXT); CREATE TABLE Detention (detention_id NUMBER); CREATE TABLE Student_Addresses (student_id NUMBER);"
      },
      {
        "question": "What about her email?",
        "query": "SELECT email_address FROM students WHERE first_name = \"Emma\" AND last_name = \"Rohan\"",
        "schema": "CREATE TABLE Student_Addresses (student_id NUMBER); CREATE TABLE Students (email_address TEXT, other_student_details TEXT, first_name TEXT, middle_name TEXT, cell_mobile_number TEXT, student_id NUMBER, address_id NUMBER, last_name TEXT); CREATE TABLE Detention (detention_id NUMBER); CREATE TABLE Behavior_Incident (student_id NUMBER); CREATE TABLE Teachers (cell_mobile_number TEXT); CREATE TABLE Addresses (address_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show me the names of all students.",
        "query": "SELECT first_name, last_name FROM students",
        "schema": "CREATE TABLE Teachers (first_name TEXT); CREATE TABLE Students (student_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT); CREATE TABLE Student_Addresses (student_id NUMBER);"
      },
      {
        "question": "What are their monthly rentals?",
        "query": "SELECT t1.first_name, t1.last_name, t2.monthly_rental FROM students AS t1 JOIN student_addresses AS t2 ON t1.student_id = t2.student_id",
        "schema": "CREATE TABLE Student_Addresses (student_id NUMBER, monthly_rental NUMBER, address_id NUMBER); CREATE TABLE Teachers (first_name TEXT); CREATE TABLE Addresses (address_id NUMBER); CREATE TABLE Students (student_id NUMBER, last_name TEXT, first_name TEXT, date_first_rental TIME, address_id NUMBER, middle_name TEXT);"
      },
      {
        "question": "Show me the maximum and minimum of them.",
        "query": "SELECT max(monthly_rental) , min(monthly_rental) FROM student_addresses",
        "schema": "CREATE TABLE Addresses (address_id NUMBER); CREATE TABLE Teachers (first_name TEXT); CREATE TABLE Students (first_name TEXT, student_id NUMBER, address_id NUMBER, date_first_rental TIME, middle_name TEXT, last_name TEXT); CREATE TABLE Student_Addresses (address_id NUMBER, student_id NUMBER, monthly_rental NUMBER);"
      }
    ],
    [
      {
        "question": "Show me the name of all teachers.",
        "query": "SELECT first_name, last_name FROM teachers",
        "schema": "CREATE TABLE Addresses (address_id NUMBER); CREATE TABLE Teachers (teacher_id NUMBER, last_name TEXT, middle_name TEXT, first_name TEXT); CREATE TABLE Students (student_id NUMBER);"
      },
      {
        "question": "What are their mobile numbers?",
        "query": "SELECT first_name,last_name,cell_mobile_number FROM teachers",
        "schema": "CREATE TABLE Teachers (first_name TEXT, cell_mobile_number TEXT, teacher_id NUMBER, middle_name TEXT, last_name TEXT); CREATE TABLE Addresses (address_id NUMBER); CREATE TABLE Students (cell_mobile_number TEXT, student_id NUMBER);"
      },
      {
        "question": "What about email addresses?",
        "query": "SELECT first_name,last_name,email_address FROM teachers",
        "schema": "CREATE TABLE Teachers (teacher_id NUMBER, first_name TEXT, address_id NUMBER, last_name TEXT, middle_name TEXT, email_address TEXT, cell_mobile_number TEXT); CREATE TABLE Students (cell_mobile_number TEXT, student_id NUMBER, email_address TEXT); CREATE TABLE Addresses (address_id NUMBER);"
      },
      {
        "question": "Which ones contain the word \"man\"?",
        "query": "SELECT first_name,last_name,email_address FROM teachers WHERE email_address LIKE '%man%'",
        "schema": "CREATE TABLE Addresses (address_id NUMBER); CREATE TABLE Students (email_address TEXT, student_id NUMBER, cell_mobile_number TEXT); CREATE TABLE Teachers (middle_name TEXT, last_name TEXT, email_address TEXT, teacher_id NUMBER, address_id NUMBER, first_name TEXT, gender TEXT, cell_mobile_number TEXT);"
      },
      {
        "question": "Show me the first name only.",
        "query": "SELECT first_name FROM teachers WHERE email_address LIKE '%man%'",
        "schema": "CREATE TABLE Teachers (middle_name TEXT, gender TEXT, address_id NUMBER, first_name TEXT, last_name TEXT, email_address TEXT, teacher_id NUMBER, cell_mobile_number TEXT); CREATE TABLE Addresses (address_id NUMBER); CREATE TABLE Students (cell_mobile_number TEXT, email_address TEXT, student_id NUMBER);"
      }
    ],
    [
      {
        "question": "How many assessment notes are there?",
        "query": "SELECT count(*) FROM assessment_notes",
        "schema": "CREATE TABLE Teachers (teacher_id NUMBER); CREATE TABLE Detention (detention_id NUMBER, detention_summary TEXT); CREATE TABLE Students (student_id NUMBER); CREATE TABLE Assessment_Notes (other_details TEXT, text_of_notes TEXT, student_id NUMBER, teacher_id NUMBER, notes_id NUMBER); CREATE TABLE Students_in_Detention (student_id NUMBER, detention_id NUMBER); CREATE TABLE Behavior_Incident (incident_summary TEXT, incident_id NUMBER, student_id NUMBER);"
      },
      {
        "question": "How many does each student have?",
        "query": "SELECT student_id, count(*) FROM assessment_notes GROUP BY student_id",
        "schema": "CREATE TABLE Students (student_id NUMBER, last_name TEXT, first_name TEXT, middle_name TEXT, other_student_details TEXT); CREATE TABLE Student_Addresses (student_id NUMBER); CREATE TABLE Detention (detention_id NUMBER, detention_summary TEXT); CREATE TABLE Teachers (teacher_id NUMBER); CREATE TABLE Assessment_Notes (other_details TEXT, notes_id NUMBER, student_id NUMBER, teacher_id NUMBER, text_of_notes TEXT); CREATE TABLE Students_in_Detention (detention_id NUMBER, student_id NUMBER); CREATE TABLE Behavior_Incident (incident_id NUMBER, incident_summary TEXT, student_id NUMBER);"
      },
      {
        "question": "Give me the id and first name of the student with the largest number of them.",
        "query": "SELECT t1.student_id , t2.first_name FROM assessment_notes AS t1 JOIN students AS t2 ON t1.student_id = t2.student_id GROUP BY t1.student_id ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Assessment_Notes (notes_id NUMBER, student_id NUMBER, teacher_id NUMBER, other_details TEXT, text_of_notes TEXT); CREATE TABLE Student_Addresses (student_id NUMBER); CREATE TABLE Teachers (teacher_id NUMBER); CREATE TABLE Detention (detention_id NUMBER, detention_summary TEXT); CREATE TABLE Behavior_Incident (incident_summary TEXT, student_id NUMBER, incident_id NUMBER); CREATE TABLE Students (first_name TEXT, last_name TEXT, other_student_details TEXT, student_id NUMBER, middle_name TEXT); CREATE TABLE Students_in_Detention (student_id NUMBER, detention_id NUMBER);"
      }
    ],
    [
      {
        "question": "How many assessment notes are there?",
        "query": "SELECT count(*) FROM assessment_notes",
        "schema": "CREATE TABLE Assessment_Notes (notes_id NUMBER, teacher_id NUMBER, text_of_notes TEXT, other_details TEXT, student_id NUMBER); CREATE TABLE Detention (detention_summary TEXT, detention_id NUMBER); CREATE TABLE Teachers (teacher_id NUMBER); CREATE TABLE Behavior_Incident (student_id NUMBER, incident_summary TEXT, incident_id NUMBER); CREATE TABLE Students (student_id NUMBER); CREATE TABLE Students_in_Detention (student_id NUMBER);"
      },
      {
        "question": "How many does each teacher have?",
        "query": "SELECT teacher_id, count(*) FROM assessment_notes GROUP BY teacher_id",
        "schema": "CREATE TABLE Assessment_Notes (other_details TEXT, notes_id NUMBER, text_of_notes TEXT, teacher_id NUMBER, student_id NUMBER); CREATE TABLE Behavior_Incident (student_id NUMBER, incident_summary TEXT, incident_id NUMBER); CREATE TABLE Students_in_Detention (student_id NUMBER); CREATE TABLE Students (student_id NUMBER); CREATE TABLE Teachers (middle_name TEXT, first_name TEXT, last_name TEXT, teacher_id NUMBER, gender TEXT); CREATE TABLE Detention (detention_summary TEXT, teacher_id NUMBER, detention_id NUMBER);"
      },
      {
        "question": "List them in the descending order of number of assessment notes.",
        "query": "SELECT teacher_id, count(*) FROM assessment_notes GROUP BY teacher_id ORDER BY count(*) DESC",
        "schema": "CREATE TABLE Students (student_id NUMBER); CREATE TABLE Behavior_Incident (incident_id NUMBER, incident_summary TEXT, student_id NUMBER); CREATE TABLE Students_in_Detention (student_id NUMBER); CREATE TABLE Assessment_Notes (student_id NUMBER, teacher_id NUMBER, text_of_notes TEXT, other_details TEXT, notes_id NUMBER); CREATE TABLE Detention (teacher_id NUMBER, detention_summary TEXT, detention_id NUMBER); CREATE TABLE Teachers (first_name TEXT, middle_name TEXT, last_name TEXT, teacher_id NUMBER, gender TEXT);"
      },
      {
        "question": "Show me the ids and first name of the top 3 teachers.",
        "query": "SELECT t1.teacher_id , t2.first_name FROM assessment_notes AS t1 JOIN teachers AS t2 ON t1.teacher_id = t2.teacher_id GROUP BY t1.teacher_id ORDER BY count(*) DESC LIMIT 3",
        "schema": "CREATE TABLE Students (first_name TEXT, student_id NUMBER); CREATE TABLE Detention (detention_id NUMBER, detention_summary TEXT, teacher_id NUMBER); CREATE TABLE Behavior_Incident (student_id NUMBER, incident_id NUMBER, incident_summary TEXT); CREATE TABLE Assessment_Notes (teacher_id NUMBER, notes_id NUMBER, student_id NUMBER, other_details TEXT, text_of_notes TEXT); CREATE TABLE Students_in_Detention (student_id NUMBER); CREATE TABLE Teachers (middle_name TEXT, gender TEXT, last_name TEXT, first_name TEXT, teacher_id NUMBER);"
      }
    ],
    [
      {
        "question": "What behavior incident types are there?",
        "query": "SELECT incident_type_code FROM behavior_incident GROUP BY incident_type_code",
        "schema": "CREATE TABLE Behavior_Incident (incident_summary TEXT, student_id NUMBER, incident_type_code TEXT, incident_id NUMBER); CREATE TABLE Students (last_name TEXT, student_id NUMBER); CREATE TABLE Ref_Incident_Type (incident_type_code TEXT, incident_type_description TEXT); CREATE TABLE Detention (detention_type_code TEXT, detention_id NUMBER); CREATE TABLE Students_in_Detention (incident_id NUMBER); CREATE TABLE Teachers (teacher_id NUMBER);"
      },
      {
        "question": "How many behavior incidents are there?",
        "query": "SELECT count(*) FROM behavior_incident",
        "schema": "CREATE TABLE Behavior_Incident (incident_type_code TEXT, incident_id NUMBER, incident_summary TEXT, student_id NUMBER); CREATE TABLE Detention (detention_id NUMBER, detention_type_code TEXT); CREATE TABLE Ref_Incident_Type (incident_type_description TEXT, incident_type_code TEXT); CREATE TABLE Teachers (teacher_id NUMBER); CREATE TABLE Students (last_name TEXT, student_id NUMBER); CREATE TABLE Students_in_Detention (incident_id NUMBER);"
      },
      {
        "question": "How many does each student have?",
        "query": "SELECT student_id, count(*) FROM behavior_incident GROUP BY student_id",
        "schema": "CREATE TABLE Teachers (teacher_id NUMBER); CREATE TABLE Behavior_Incident (incident_summary TEXT, student_id NUMBER, incident_id NUMBER, incident_type_code TEXT); CREATE TABLE Student_Addresses (student_id NUMBER); CREATE TABLE Students (first_name TEXT, last_name TEXT, student_id NUMBER); CREATE TABLE Detention (detention_type_code TEXT, detention_id NUMBER); CREATE TABLE Students_in_Detention (incident_id NUMBER, student_id NUMBER); CREATE TABLE Ref_Incident_Type (incident_type_code TEXT, incident_type_description TEXT);"
      },
      {
        "question": "Show me the id and last name of the one with the largest number.",
        "query": "SELECT t1.student_id , t2.last_name FROM behavior_incident AS t1 JOIN students AS t2 ON t1.student_id = t2.student_id GROUP BY t1.student_id ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Behavior_Incident (incident_id NUMBER, incident_summary TEXT, incident_type_code TEXT, student_id NUMBER); CREATE TABLE Teachers (teacher_id NUMBER); CREATE TABLE Ref_Incident_Type (incident_type_code TEXT, incident_type_description TEXT); CREATE TABLE Students_in_Detention (incident_id NUMBER, student_id NUMBER); CREATE TABLE Student_Addresses (student_id NUMBER); CREATE TABLE Students (last_name TEXT, student_id NUMBER, first_name TEXT); CREATE TABLE Detention (detention_id NUMBER, detention_type_code TEXT); CREATE TABLE Assessment_Notes (student_id NUMBER);"
      }
    ],
    [
      {
        "question": "How many detentions are there?",
        "query": "SELECT count(*) FROM detention",
        "schema": "CREATE TABLE Behavior_Incident (incident_id NUMBER, student_id NUMBER); CREATE TABLE Detention (teacher_id NUMBER, detention_type_code TEXT, detention_summary TEXT, detention_id NUMBER); CREATE TABLE Teachers (teacher_id NUMBER); CREATE TABLE Students (last_name TEXT, student_id NUMBER); CREATE TABLE Assessment_Notes (student_id NUMBER, teacher_id NUMBER); CREATE TABLE Ref_Detention_Type (detention_type_code TEXT, detention_type_description TEXT); CREATE TABLE Students_in_Detention (student_id NUMBER, detention_id NUMBER, incident_id NUMBER);"
      },
      {
        "question": "What about detentions with type code \"AFTER\"?",
        "query": "SELECT count(*) FROM detention WHERE detention_type_code = \"AFTER\"",
        "schema": "CREATE TABLE Students (last_name TEXT, student_id NUMBER); CREATE TABLE Behavior_Incident (student_id NUMBER, incident_id NUMBER); CREATE TABLE Teachers (teacher_id NUMBER); CREATE TABLE Detention (detention_summary TEXT, teacher_id NUMBER, datetime_detention_start TIME, datetime_detention_end TIME, detention_type_code TEXT, detention_id NUMBER); CREATE TABLE Students_in_Detention (student_id NUMBER, detention_id NUMBER, incident_id NUMBER); CREATE TABLE Assessment_Notes (student_id NUMBER, teacher_id NUMBER); CREATE TABLE Ref_Detention_Type (detention_type_description TEXT, detention_type_code TEXT);"
      },
      {
        "question": "How many does each teacher have?",
        "query": "SELECT t1.teacher_id , t2.last_name, count(*) FROM detention AS t1 JOIN teachers AS t2 ON t1.teacher_id = t2.teacher_id WHERE t1.detention_type_code = \"AFTER\" GROUP BY t1.teacher_id",
        "schema": "CREATE TABLE Ref_Detention_Type (detention_type_description TEXT, detention_type_code TEXT); CREATE TABLE Behavior_Incident (incident_id NUMBER, student_id NUMBER); CREATE TABLE Teachers (last_name TEXT, teacher_id NUMBER, first_name TEXT); CREATE TABLE Students (last_name TEXT, student_id NUMBER); CREATE TABLE Students_in_Detention (incident_id NUMBER, detention_id NUMBER, student_id NUMBER); CREATE TABLE Detention (detention_summary TEXT, datetime_detention_start TIME, datetime_detention_end TIME, teacher_id NUMBER, detention_type_code TEXT, detention_id NUMBER); CREATE TABLE Assessment_Notes (student_id NUMBER, teacher_id NUMBER);"
      },
      {
        "question": "Give me the id and last name of the teacher with the largest number.",
        "query": "SELECT t1.teacher_id , t2.last_name FROM detention AS t1 JOIN teachers AS t2 ON t1.teacher_id = t2.teacher_id WHERE t1.detention_type_code = \"AFTER\" GROUP BY t1.teacher_id ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Students (last_name TEXT, student_id NUMBER); CREATE TABLE Assessment_Notes (teacher_id NUMBER, student_id NUMBER); CREATE TABLE Behavior_Incident (incident_id NUMBER, student_id NUMBER); CREATE TABLE Students_in_Detention (incident_id NUMBER, student_id NUMBER, detention_id NUMBER); CREATE TABLE Ref_Detention_Type (detention_type_description TEXT, detention_type_code TEXT); CREATE TABLE Detention (teacher_id NUMBER, detention_id NUMBER, detention_summary TEXT, datetime_detention_start TIME, datetime_detention_end TIME, detention_type_code TEXT); CREATE TABLE Teachers (first_name TEXT, last_name TEXT, teacher_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show me the first name of all students.",
        "query": "SELECT first_name FROM students",
        "schema": "CREATE TABLE Student_Addresses (student_id NUMBER); CREATE TABLE Teachers (first_name TEXT); CREATE TABLE Students (last_name TEXT, first_name TEXT, middle_name TEXT, student_id NUMBER);"
      },
      {
        "question": "What are their monthly rentals?",
        "query": "SELECT t1.first_name, t2.monthly_rental FROM students AS t1 JOIN student_addresses AS t2 ON t1.student_id = t2.student_id",
        "schema": "CREATE TABLE Addresses (address_id NUMBER); CREATE TABLE Students (address_id NUMBER, last_name TEXT, middle_name TEXT, first_name TEXT, date_first_rental TIME, student_id NUMBER); CREATE TABLE Student_Addresses (student_id NUMBER, monthly_rental NUMBER, address_id NUMBER); CREATE TABLE Teachers (first_name TEXT);"
      },
      {
        "question": "What about each student's average rentals across different address?",
        "query": "SELECT t2.first_name , avg(t1.monthly_rental) FROM student_addresses AS t1 JOIN students AS t2 ON t1.student_id = t2.student_id GROUP BY t2.first_name",
        "schema": "CREATE TABLE Addresses (address_id NUMBER); CREATE TABLE Teachers (first_name TEXT); CREATE TABLE Students (address_id NUMBER, student_id NUMBER, date_first_rental TIME, first_name TEXT, middle_name TEXT, last_name TEXT); CREATE TABLE Student_Addresses (address_id NUMBER, student_id NUMBER, monthly_rental NUMBER);"
      },
      {
        "question": "Give me the id and first name of the student with the highest of them.",
        "query": "SELECT t1.student_id , t2.first_name FROM student_addresses AS t1 JOIN students AS t2 ON t1.student_id = t2.student_id GROUP BY t1.student_id ORDER BY avg(monthly_rental) DESC LIMIT 1",
        "schema": "CREATE TABLE Students (student_id NUMBER, last_name TEXT, date_first_rental TIME, address_id NUMBER, first_name TEXT, middle_name TEXT); CREATE TABLE Addresses (address_id NUMBER); CREATE TABLE Student_Addresses (student_id NUMBER, address_id NUMBER, monthly_rental NUMBER); CREATE TABLE Teachers (first_name TEXT);"
      }
    ],
    [
      {
        "question": "Show me all the monthly rentals from student addresses.",
        "query": "SELECT monthly_rental FROM student_addresses",
        "schema": "CREATE TABLE Teachers (address_id NUMBER); CREATE TABLE Addresses (address_id NUMBER); CREATE TABLE Students (address_id NUMBER, student_id NUMBER); CREATE TABLE Student_Addresses (monthly_rental NUMBER, address_id NUMBER, student_id NUMBER);"
      },
      {
        "question": "Give me the average monthly rental in terms of each address.",
        "query": "SELECT address_id, avg(monthly_rental) FROM student_addresses GROUP BY address_id",
        "schema": "CREATE TABLE Student_Addresses (student_id NUMBER, address_id NUMBER, monthly_rental NUMBER); CREATE TABLE Addresses (address_id NUMBER); CREATE TABLE Teachers (address_id NUMBER); CREATE TABLE Students (student_id NUMBER, address_id NUMBER);"
      },
      {
        "question": "Show me their cities.",
        "query": "SELECT t1.city,t2.address_id , avg(t2.monthly_rental) FROM addresses AS t1 JOIN student_addresses AS t2 ON t1.address_id = t2.address_id GROUP BY t2.address_id",
        "schema": "CREATE TABLE Teachers (address_id NUMBER); CREATE TABLE Addresses (city TEXT, address_id NUMBER); CREATE TABLE Student_Addresses (address_id NUMBER, student_id NUMBER, monthly_rental NUMBER); CREATE TABLE Students (student_id NUMBER, address_id NUMBER);"
      },
      {
        "question": "Give me the id and city of the one with largest average monthly rental.",
        "query": "SELECT t2.address_id , t1.city FROM addresses AS t1 JOIN student_addresses AS t2 ON t1.address_id = t2.address_id GROUP BY t2.address_id ORDER BY avg(monthly_rental) DESC LIMIT 1",
        "schema": "CREATE TABLE Students (address_id NUMBER, student_id NUMBER); CREATE TABLE Teachers (address_id NUMBER); CREATE TABLE Addresses (city TEXT, address_id NUMBER); CREATE TABLE Student_Addresses (monthly_rental NUMBER, address_id NUMBER, student_id NUMBER);"
      }
    ],
    [
      {
        "question": "What behavior incident types are there?",
        "query": "SELECT incident_type_code FROM behavior_incident GROUP BY incident_type_code",
        "schema": "CREATE TABLE Detention (detention_id NUMBER, detention_type_code TEXT); CREATE TABLE Students_in_Detention (incident_id NUMBER); CREATE TABLE Teachers (teacher_id NUMBER); CREATE TABLE Students (student_id NUMBER, last_name TEXT); CREATE TABLE Behavior_Incident (incident_type_code TEXT, incident_id NUMBER, incident_summary TEXT, student_id NUMBER); CREATE TABLE Ref_Incident_Type (incident_type_description TEXT, incident_type_code TEXT);"
      },
      {
        "question": "How many behavior incidents are there in terms of each type?",
        "query": "SELECT incident_type_code,count(*) FROM behavior_incident GROUP BY incident_type_code",
        "schema": "CREATE TABLE Detention (detention_type_code TEXT, detention_id NUMBER); CREATE TABLE Teachers (teacher_id NUMBER); CREATE TABLE Ref_Incident_Type (incident_type_code TEXT, incident_type_description TEXT); CREATE TABLE Students (student_id NUMBER, last_name TEXT); CREATE TABLE Students_in_Detention (incident_id NUMBER); CREATE TABLE Behavior_Incident (incident_type_code TEXT, incident_summary TEXT, student_id NUMBER, incident_id NUMBER);"
      },
      {
        "question": "Show me the code and description of the most frequent one of them.",
        "query": "SELECT t1.incident_type_code , t2.incident_type_description FROM behavior_incident AS t1 JOIN ref_incident_type AS t2 ON t1.incident_type_code = t2.incident_type_code GROUP BY t1.incident_type_code ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Students_in_Detention (incident_id NUMBER); CREATE TABLE Students (last_name TEXT, student_id NUMBER); CREATE TABLE Behavior_Incident (incident_id NUMBER, incident_type_code TEXT, incident_summary TEXT, student_id NUMBER); CREATE TABLE Teachers (teacher_id NUMBER); CREATE TABLE Ref_Incident_Type (incident_type_description TEXT, incident_type_code TEXT); CREATE TABLE Detention (detention_id NUMBER, detention_type_code TEXT);"
      }
    ],
    [
      {
        "question": "What detention types are there?",
        "query": "SELECT detention_type_code FROM detention GROUP BY detention_type_code",
        "schema": "CREATE TABLE Students_in_Detention (detention_id NUMBER, student_id NUMBER); CREATE TABLE Detention (detention_summary TEXT, detention_type_code TEXT, detention_id NUMBER); CREATE TABLE Students (student_id NUMBER); CREATE TABLE Assessment_Notes (student_id NUMBER); CREATE TABLE Ref_Detention_Type (detention_type_description TEXT, detention_type_code TEXT); CREATE TABLE Behavior_Incident (incident_type_code TEXT); CREATE TABLE Teachers (teacher_id NUMBER);"
      },
      {
        "question": "How many detentions are there in terms of each type?",
        "query": "SELECT detention_type_code, count(*) FROM detention GROUP BY detention_type_code",
        "schema": "CREATE TABLE Assessment_Notes (student_id NUMBER); CREATE TABLE Teachers (teacher_id NUMBER); CREATE TABLE Students (student_id NUMBER); CREATE TABLE Students_in_Detention (detention_id NUMBER, student_id NUMBER); CREATE TABLE Behavior_Incident (incident_type_code TEXT); CREATE TABLE Detention (detention_id NUMBER, detention_summary TEXT, detention_type_code TEXT); CREATE TABLE Ref_Detention_Type (detention_type_description TEXT, detention_type_code TEXT);"
      },
      {
        "question": "Show me the code and description of the least frequent one of them.",
        "query": "SELECT t1.detention_type_code , t2.detention_type_description FROM detention AS t1 JOIN ref_detention_type AS t2 ON t1.detention_type_code = t2.detention_type_code GROUP BY t1.detention_type_code ORDER BY count(*) ASC LIMIT 1",
        "schema": "CREATE TABLE Behavior_Incident (incident_type_code TEXT); CREATE TABLE Students_in_Detention (detention_id NUMBER, student_id NUMBER); CREATE TABLE Assessment_Notes (student_id NUMBER); CREATE TABLE Detention (detention_type_code TEXT, detention_id NUMBER, detention_summary TEXT); CREATE TABLE Teachers (teacher_id NUMBER); CREATE TABLE Students (student_id NUMBER); CREATE TABLE Ref_Detention_Type (detention_type_description TEXT, detention_type_code TEXT);"
      }
    ],
    [
      {
        "question": "How many assessment notes are there?",
        "query": "SELECT count(*) FROM assessment_notes",
        "schema": "CREATE TABLE Behavior_Incident (incident_summary TEXT, student_id NUMBER, incident_id NUMBER); CREATE TABLE Detention (detention_id NUMBER, teacher_id NUMBER, detention_summary TEXT); CREATE TABLE Students (student_id NUMBER); CREATE TABLE Teachers (teacher_id NUMBER); CREATE TABLE Assessment_Notes (notes_id NUMBER, other_details TEXT, student_id NUMBER, text_of_notes TEXT, teacher_id NUMBER); CREATE TABLE Students_in_Detention (student_id NUMBER);"
      },
      {
        "question": "Show me the first name of students that had assessment notes in record.",
        "query": "SELECT t2.first_name FROM assessment_notes AS t1 JOIN students AS t2 ON t1.student_id = t2.student_id",
        "schema": "CREATE TABLE Students_in_Detention (student_id NUMBER); CREATE TABLE Teachers (teacher_id NUMBER); CREATE TABLE Students (last_name TEXT, student_id NUMBER, first_name TEXT, middle_name TEXT); CREATE TABLE Behavior_Incident (incident_summary TEXT, incident_id NUMBER, student_id NUMBER); CREATE TABLE Assessment_Notes (other_details TEXT, teacher_id NUMBER, text_of_notes TEXT, student_id NUMBER, notes_id NUMBER); CREATE TABLE Detention (detention_id NUMBER, teacher_id NUMBER, detention_summary TEXT);"
      },
      {
        "question": "When did Fanny have assessment nodes?",
        "query": "SELECT t1.date_of_notes FROM assessment_notes AS t1 JOIN students AS t2 ON t1.student_id = t2.student_id WHERE t2.first_name = \"Fanny\"",
        "schema": "CREATE TABLE Assessment_Notes (notes_id NUMBER, student_id NUMBER, other_details TEXT, date_of_notes TIME, teacher_id NUMBER, text_of_notes TEXT); CREATE TABLE Detention (detention_id NUMBER, teacher_id NUMBER, detention_summary TEXT, datetime_detention_start TIME); CREATE TABLE Behavior_Incident (incident_id NUMBER, incident_summary TEXT, student_id NUMBER); CREATE TABLE Student_Addresses (student_id NUMBER); CREATE TABLE Students_in_Detention (student_id NUMBER); CREATE TABLE Students (first_name TEXT, last_name TEXT, date_left_university TIME, student_id NUMBER, middle_name TEXT); CREATE TABLE Teachers (teacher_id NUMBER);"
      }
    ],
    [
      {
        "question": "How many assessment notes are there?",
        "query": "SELECT count(*) FROM assessment_notes",
        "schema": "CREATE TABLE Assessment_Notes (text_of_notes TEXT, notes_id NUMBER, teacher_id NUMBER, other_details TEXT, student_id NUMBER); CREATE TABLE Students_in_Detention (student_id NUMBER); CREATE TABLE Teachers (teacher_id NUMBER); CREATE TABLE Behavior_Incident (incident_id NUMBER, student_id NUMBER, incident_summary TEXT); CREATE TABLE Detention (detention_summary TEXT, detention_id NUMBER); CREATE TABLE Students (student_id NUMBER);"
      },
      {
        "question": "Show me the last name of teachers that had assessment notes in record.",
        "query": "SELECT t2.last_name FROM assessment_notes AS t1 JOIN teachers AS t2 ON t1.teacher_id = t2.teacher_id",
        "schema": "CREATE TABLE Students (student_id NUMBER); CREATE TABLE Students_in_Detention (student_id NUMBER); CREATE TABLE Teachers (last_name TEXT, first_name TEXT, middle_name TEXT, teacher_id NUMBER); CREATE TABLE Detention (teacher_id NUMBER, detention_id NUMBER, detention_summary TEXT); CREATE TABLE Assessment_Notes (student_id NUMBER, text_of_notes TEXT, notes_id NUMBER, teacher_id NUMBER, other_details TEXT); CREATE TABLE Behavior_Incident (incident_id NUMBER, incident_summary TEXT, student_id NUMBER);"
      },
      {
        "question": "Give me the texts of assessment notes that Schuster had.",
        "query": "SELECT t1.text_of_notes FROM assessment_notes AS t1 JOIN teachers AS t2 ON t1.teacher_id = t2.teacher_id WHERE t2.last_name = \"Schuster\"",
        "schema": "CREATE TABLE Assessment_Notes (student_id NUMBER, teacher_id NUMBER, notes_id NUMBER, text_of_notes TEXT, other_details TEXT); CREATE TABLE Teachers (middle_name TEXT, last_name TEXT, teacher_id NUMBER, first_name TEXT); CREATE TABLE Students (student_id NUMBER); CREATE TABLE Detention (teacher_id NUMBER, detention_summary TEXT, detention_id NUMBER); CREATE TABLE Behavior_Incident (incident_summary TEXT, incident_id NUMBER, student_id NUMBER); CREATE TABLE Students_in_Detention (student_id NUMBER);"
      }
    ],
    [
      {
        "question": "How many behavior incidents are there in record?",
        "query": "SELECT count(*) FROM behavior_incident",
        "schema": "CREATE TABLE Students (student_id NUMBER, last_name TEXT); CREATE TABLE Assessment_Notes (student_id NUMBER, teacher_id NUMBER); CREATE TABLE Ref_Incident_Type (incident_type_code TEXT, incident_type_description TEXT); CREATE TABLE Addresses (address_id NUMBER); CREATE TABLE Teachers (teacher_id NUMBER, last_name TEXT); CREATE TABLE Behavior_Incident (student_id NUMBER, incident_type_code TEXT, other_details TEXT, incident_summary TEXT, incident_id NUMBER, recommendations TEXT); CREATE TABLE Students_in_Detention (student_id NUMBER, detention_id NUMBER, incident_id NUMBER); CREATE TABLE Detention (detention_id NUMBER, teacher_id NUMBER); CREATE TABLE Student_Addresses (student_id NUMBER);"
      },
      {
        "question": "Show me the last name of students that were in any incidents.",
        "query": "SELECT t2.last_name FROM behavior_incident AS t1 JOIN students AS t2 ON t1.student_id = t2.student_id",
        "schema": "CREATE TABLE Student_Addresses (student_id NUMBER); CREATE TABLE Teachers (teacher_id NUMBER, last_name TEXT); CREATE TABLE Assessment_Notes (student_id NUMBER, teacher_id NUMBER); CREATE TABLE Addresses (address_id NUMBER); CREATE TABLE Behavior_Incident (incident_type_code TEXT, student_id NUMBER, recommendations TEXT, incident_id NUMBER, other_details TEXT, incident_summary TEXT); CREATE TABLE Detention (teacher_id NUMBER, detention_id NUMBER); CREATE TABLE Students (other_student_details TEXT, first_name TEXT, student_id NUMBER, middle_name TEXT, last_name TEXT); CREATE TABLE Ref_Incident_Type (incident_type_description TEXT, incident_type_code TEXT); CREATE TABLE Students_in_Detention (detention_id NUMBER, incident_id NUMBER, student_id NUMBER);"
      },
      {
        "question": "Give me the start and end dates of Fahey's ones.",
        "query": "SELECT t1.date_incident_start , date_incident_end FROM behavior_incident AS t1 JOIN students AS t2 ON t1.student_id = t2.student_id WHERE t2.last_name = \"Fahey\"",
        "schema": "CREATE TABLE Teachers (last_name TEXT, teacher_id NUMBER); CREATE TABLE Detention (datetime_detention_end TIME, datetime_detention_start TIME, detention_id NUMBER, teacher_id NUMBER); CREATE TABLE Assessment_Notes (student_id NUMBER, teacher_id NUMBER); CREATE TABLE Students (date_left_university TIME, middle_name TEXT, first_name TEXT, student_id NUMBER, other_student_details TEXT, last_name TEXT); CREATE TABLE Addresses (address_id NUMBER, city TEXT); CREATE TABLE Student_Addresses (student_id NUMBER); CREATE TABLE Ref_Incident_Type (incident_type_code TEXT, incident_type_description TEXT); CREATE TABLE Students_in_Detention (detention_id NUMBER, student_id NUMBER, incident_id NUMBER); CREATE TABLE Behavior_Incident (date_incident_start TIME, incident_summary TEXT, incident_type_code TEXT, student_id NUMBER, recommendations TEXT, incident_id NUMBER, other_details TEXT, date_incident_end TIME);"
      }
    ],
    [
      {
        "question": "How many detentions are there in record?",
        "query": "SELECT count(*) FROM detention",
        "schema": "CREATE TABLE Students_in_Detention (student_id NUMBER, incident_id NUMBER, detention_id NUMBER); CREATE TABLE Teachers (teacher_id NUMBER); CREATE TABLE Students (student_id NUMBER); CREATE TABLE Detention (detention_summary TEXT, detention_id NUMBER, detention_type_code TEXT, teacher_id NUMBER); CREATE TABLE Behavior_Incident (incident_id NUMBER, student_id NUMBER); CREATE TABLE Ref_Detention_Type (detention_type_description TEXT, detention_type_code TEXT); CREATE TABLE Assessment_Notes (student_id NUMBER, teacher_id NUMBER);"
      },
      {
        "question": "Show me the last name of teachers that were in any detentions.",
        "query": "SELECT t2.last_name FROM detention AS t1 JOIN teachers AS t2 ON t1.teacher_id = t2.teacher_id",
        "schema": "CREATE TABLE Ref_Detention_Type (detention_type_description TEXT, detention_type_code TEXT); CREATE TABLE Students (student_id NUMBER, last_name TEXT); CREATE TABLE Teachers (middle_name TEXT, last_name TEXT, teacher_id NUMBER, first_name TEXT); CREATE TABLE Assessment_Notes (teacher_id NUMBER, student_id NUMBER); CREATE TABLE Detention (detention_type_code TEXT, detention_id NUMBER, teacher_id NUMBER, detention_summary TEXT); CREATE TABLE Behavior_Incident (student_id NUMBER, incident_id NUMBER); CREATE TABLE Students_in_Detention (student_id NUMBER, incident_id NUMBER, detention_id NUMBER);"
      },
      {
        "question": "Give me the start and end dates of Schultz's ones.",
        "query": "SELECT t1.datetime_detention_start , datetime_detention_end FROM detention AS t1 JOIN teachers AS t2 ON t1.teacher_id = t2.teacher_id WHERE t2.last_name = \"Schultz\"",
        "schema": "CREATE TABLE Detention (datetime_detention_end TIME, teacher_id NUMBER, detention_id NUMBER, detention_type_code TEXT, datetime_detention_start TIME, detention_summary TEXT); CREATE TABLE Assessment_Notes (teacher_id NUMBER, student_id NUMBER); CREATE TABLE Teachers (last_name TEXT, first_name TEXT, middle_name TEXT, teacher_id NUMBER); CREATE TABLE Students_in_Detention (detention_id NUMBER, incident_id NUMBER, student_id NUMBER); CREATE TABLE Students (last_name TEXT, student_id NUMBER); CREATE TABLE Ref_Detention_Type (detention_type_description TEXT, detention_type_code TEXT); CREATE TABLE Behavior_Incident (date_incident_start TIME, incident_id NUMBER, date_incident_end TIME, student_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show me the monthly rentals for all student addresses.",
        "query": "SELECT address_id, monthly_rental FROM student_addresses",
        "schema": "CREATE TABLE Addresses (address_id NUMBER); CREATE TABLE Teachers (address_id NUMBER); CREATE TABLE Students (address_id NUMBER, student_id NUMBER); CREATE TABLE Student_Addresses (monthly_rental NUMBER, student_id NUMBER, address_id NUMBER);"
      },
      {
        "question": "Give me the id of address with highest monthly rental.",
        "query": "SELECT address_id FROM student_addresses ORDER BY monthly_rental DESC LIMIT 1",
        "schema": "CREATE TABLE Students (address_id NUMBER, student_id NUMBER); CREATE TABLE Addresses (address_id NUMBER); CREATE TABLE Student_Addresses (student_id NUMBER, monthly_rental NUMBER, address_id NUMBER); CREATE TABLE Teachers (address_id NUMBER);"
      },
      {
        "question": "What about its zip code?",
        "query": "SELECT t2.address_id , t1.zip_postcode FROM addresses AS t1 JOIN student_addresses AS t2 ON t1.address_id = t2.address_id ORDER BY monthly_rental DESC LIMIT 1",
        "schema": "CREATE TABLE Student_Addresses (monthly_rental NUMBER, student_id NUMBER, address_id NUMBER); CREATE TABLE Teachers (address_id NUMBER); CREATE TABLE Students (address_id NUMBER, student_id NUMBER); CREATE TABLE Addresses (address_id NUMBER, zip_postcode TEXT);"
      }
    ],
    [
      {
        "question": "Show me the monthly rentals for all student addresses.",
        "query": "SELECT address_id, monthly_rental FROM student_addresses",
        "schema": "CREATE TABLE Students (student_id NUMBER, address_id NUMBER); CREATE TABLE Addresses (address_id NUMBER); CREATE TABLE Teachers (address_id NUMBER); CREATE TABLE Student_Addresses (monthly_rental NUMBER, address_id NUMBER, student_id NUMBER);"
      },
      {
        "question": "Give me the id of student with the lowest of them.",
        "query": "SELECT student_id FROM student_addresses ORDER BY monthly_rental ASC LIMIT 1",
        "schema": "CREATE TABLE Addresses (address_id NUMBER); CREATE TABLE Student_Addresses (student_id NUMBER, address_id NUMBER, monthly_rental NUMBER); CREATE TABLE Students (address_id NUMBER, last_name TEXT, student_id NUMBER); CREATE TABLE Teachers (address_id NUMBER);"
      },
      {
        "question": "What about that student's cell phone number?",
        "query": "SELECT t2.cell_mobile_number FROM student_addresses AS t1 JOIN students AS t2 ON t1.student_id = t2.student_id ORDER BY t1.monthly_rental ASC LIMIT 1",
        "schema": "CREATE TABLE Student_Addresses (monthly_rental NUMBER, address_id NUMBER, student_id NUMBER); CREATE TABLE Teachers (cell_mobile_number TEXT, address_id NUMBER); CREATE TABLE Students (last_name TEXT, cell_mobile_number TEXT, address_id NUMBER, student_id NUMBER); CREATE TABLE Addresses (address_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show me the monthly rentals for all student addresses.",
        "query": "SELECT address_id, monthly_rental FROM student_addresses",
        "schema": "CREATE TABLE Teachers (address_id NUMBER); CREATE TABLE Student_Addresses (monthly_rental NUMBER, student_id NUMBER, address_id NUMBER); CREATE TABLE Addresses (address_id NUMBER); CREATE TABLE Students (address_id NUMBER, student_id NUMBER);"
      },
      {
        "question": "What are their corresponding state, province, or county?",
        "query": "SELECT t2.address_id, t2.monthly_rental,t1.state_province_county FROM addresses AS t1 JOIN student_addresses AS t2 ON t1.address_id = t2.address_id",
        "schema": "CREATE TABLE Student_Addresses (monthly_rental NUMBER, student_id NUMBER, address_id NUMBER); CREATE TABLE Teachers (address_id NUMBER); CREATE TABLE Addresses (country TEXT, state_province_county TEXT, address_id NUMBER); CREATE TABLE Students (student_id NUMBER, address_id NUMBER);"
      },
      {
        "question": "Show me the monthly rentals from Texas.",
        "query": "SELECT t2.monthly_rental FROM addresses AS t1 JOIN student_addresses AS t2 ON t1.address_id = t2.address_id WHERE t1.state_province_county = \"Texas\"",
        "schema": "CREATE TABLE Students (address_id NUMBER, student_id NUMBER); CREATE TABLE Teachers (address_id NUMBER); CREATE TABLE Student_Addresses (student_id NUMBER, monthly_rental NUMBER, address_id NUMBER); CREATE TABLE Addresses (address_id NUMBER, state_province_county TEXT, country TEXT);"
      }
    ],
    [
      {
        "question": "How many students are there in the record?",
        "query": "SELECT count(*) FROM students",
        "schema": "CREATE TABLE Addresses (address_id NUMBER); CREATE TABLE Students_in_Detention (incident_id NUMBER, student_id NUMBER, detention_id NUMBER); CREATE TABLE Behavior_Incident (incident_id NUMBER, student_id NUMBER); CREATE TABLE Assessment_Notes (notes_id NUMBER, student_id NUMBER, teacher_id NUMBER); CREATE TABLE Students (first_name TEXT, last_name TEXT, other_student_details TEXT, student_id NUMBER, address_id NUMBER, middle_name TEXT); CREATE TABLE Detention (detention_id NUMBER, detention_summary TEXT); CREATE TABLE Teachers (teacher_id NUMBER); CREATE TABLE Student_Addresses (address_id NUMBER, student_id NUMBER);"
      },
      {
        "question": "What about those with address in Wisconsin?",
        "query": "SELECT count(*) FROM addresses AS t1 JOIN students AS t2 ON t1.address_id = t2.address_id WHERE t1.state_province_county = \"Wisconsin\"",
        "schema": "CREATE TABLE Assessment_Notes (student_id NUMBER, notes_id NUMBER, teacher_id NUMBER); CREATE TABLE Detention (detention_summary TEXT, detention_id NUMBER); CREATE TABLE Behavior_Incident (incident_id NUMBER, student_id NUMBER); CREATE TABLE Students (address_id NUMBER, first_name TEXT, other_student_details TEXT, last_name TEXT, middle_name TEXT, student_id NUMBER); CREATE TABLE Teachers (teacher_id NUMBER, address_id NUMBER); CREATE TABLE Addresses (state_province_county TEXT, city TEXT, address_id NUMBER, country TEXT); CREATE TABLE Student_Addresses (address_id NUMBER, student_id NUMBER); CREATE TABLE Students_in_Detention (detention_id NUMBER, incident_id NUMBER, student_id NUMBER);"
      },
      {
        "question": "Show me the first and last names of those students.",
        "query": "SELECT t2.first_name , t2.last_name FROM addresses AS t1 JOIN students AS t2 ON t1.address_id = t2.address_id WHERE t1.state_province_county = \"Wisconsin\"",
        "schema": "CREATE TABLE Students_in_Detention (incident_id NUMBER, student_id NUMBER, detention_id NUMBER); CREATE TABLE Behavior_Incident (incident_id NUMBER, student_id NUMBER); CREATE TABLE Assessment_Notes (notes_id NUMBER, teacher_id NUMBER, student_id NUMBER); CREATE TABLE Students (last_name TEXT, first_name TEXT, address_id NUMBER, student_id NUMBER, middle_name TEXT, other_student_details TEXT); CREATE TABLE Addresses (state_province_county TEXT, country TEXT, address_id NUMBER, city TEXT); CREATE TABLE Detention (detention_summary TEXT, detention_id NUMBER); CREATE TABLE Student_Addresses (address_id NUMBER, student_id NUMBER); CREATE TABLE Teachers (address_id NUMBER, teacher_id NUMBER);"
      }
    ],
    [
      {
        "question": "How many students are there in file?",
        "query": "SELECT count(*) FROM students",
        "schema": "CREATE TABLE Teachers (teacher_id NUMBER); CREATE TABLE Behavior_Incident (student_id NUMBER, incident_id NUMBER); CREATE TABLE Students_in_Detention (incident_id NUMBER, detention_id NUMBER, student_id NUMBER); CREATE TABLE Student_Addresses (address_id NUMBER, student_id NUMBER); CREATE TABLE Addresses (address_id NUMBER); CREATE TABLE Assessment_Notes (teacher_id NUMBER, student_id NUMBER); CREATE TABLE Detention (teacher_id NUMBER, detention_id NUMBER); CREATE TABLE Students (other_student_details TEXT, address_id NUMBER, last_name TEXT, first_name TEXT, student_id NUMBER);"
      },
      {
        "question": "What about student addresses?",
        "query": "SELECT count(*) FROM student_addresses",
        "schema": "CREATE TABLE Addresses (address_id NUMBER); CREATE TABLE Student_Addresses (student_id NUMBER, address_id NUMBER, other_details TEXT); CREATE TABLE Assessment_Notes (teacher_id NUMBER, student_id NUMBER); CREATE TABLE Students (last_name TEXT, student_id NUMBER, address_id NUMBER, email_address TEXT, other_student_details TEXT, first_name TEXT); CREATE TABLE Detention (detention_id NUMBER, teacher_id NUMBER); CREATE TABLE Behavior_Incident (student_id NUMBER, incident_id NUMBER); CREATE TABLE Students_in_Detention (student_id NUMBER, detention_id NUMBER, incident_id NUMBER); CREATE TABLE Teachers (teacher_id NUMBER);"
      },
      {
        "question": "Show me the line 1 and average montly rentals of those addresses.",
        "query": "SELECT t1.line_1 , avg(t2.monthly_rental) FROM addresses AS t1 JOIN student_addresses AS t2 ON t1.address_id = t2.address_id GROUP BY t2.address_id",
        "schema": "CREATE TABLE Students (first_name TEXT, student_id NUMBER, address_id NUMBER, other_student_details TEXT, email_address TEXT, last_name TEXT); CREATE TABLE Students_in_Detention (student_id NUMBER, incident_id NUMBER, detention_id NUMBER); CREATE TABLE Assessment_Notes (student_id NUMBER, teacher_id NUMBER); CREATE TABLE Student_Addresses (student_id NUMBER, address_id NUMBER, other_details TEXT, monthly_rental NUMBER); CREATE TABLE Teachers (teacher_id NUMBER); CREATE TABLE Detention (teacher_id NUMBER, detention_id NUMBER); CREATE TABLE Behavior_Incident (incident_id NUMBER, student_id NUMBER); CREATE TABLE Addresses (line_3 TEXT, line_2 TEXT, address_id NUMBER, line_1 TEXT);"
      }
    ],
    [
      {
        "question": "Show me the first name of all teachers.",
        "query": "SELECT first_name FROM teachers",
        "schema": "CREATE TABLE Students (first_name TEXT); CREATE TABLE Teachers (middle_name TEXT, first_name TEXT, last_name TEXT, teacher_id NUMBER);"
      },
      {
        "question": "Which city does Lyla live?",
        "query": "SELECT t1.city FROM addresses AS t1 JOIN teachers AS t2 ON t1.address_id = t2.address_id WHERE t2.first_name = \"Lyla\"",
        "schema": "CREATE TABLE Addresses (line_3 TEXT, line_1 TEXT, city TEXT, other_address_details TEXT, address_id NUMBER, zip_postcode TEXT); CREATE TABLE Students (first_name TEXT, address_id NUMBER); CREATE TABLE Student_Addresses (address_id NUMBER, student_id NUMBER); CREATE TABLE Teachers (middle_name TEXT, last_name TEXT, first_name TEXT, teacher_id NUMBER, address_id NUMBER); CREATE TABLE Ref_Address_Types (address_type_description TEXT);"
      },
      {
        "question": "What about the zip code?",
        "query": "SELECT t1.zip_postcode FROM addresses AS t1 JOIN teachers AS t2 ON t1.address_id = t2.address_id WHERE t2.first_name = \"Lyla\"",
        "schema": "CREATE TABLE Ref_Address_Types (address_type_description TEXT); CREATE TABLE Students (address_id NUMBER, first_name TEXT); CREATE TABLE Addresses (city TEXT, line_3 TEXT, other_address_details TEXT, address_id NUMBER, zip_postcode TEXT, line_1 TEXT); CREATE TABLE Student_Addresses (address_id NUMBER, student_id NUMBER); CREATE TABLE Teachers (first_name TEXT, last_name TEXT, teacher_id NUMBER, address_id NUMBER, middle_name TEXT);"
      }
    ],
    [
      {
        "question": "Show me the first name of all teachers.",
        "query": "SELECT first_name FROM teachers",
        "schema": "CREATE TABLE Teachers (middle_name TEXT, last_name TEXT, first_name TEXT, teacher_id NUMBER); CREATE TABLE Students (first_name TEXT);"
      },
      {
        "question": "Who live in addresses with zip code 918?",
        "query": "SELECT t2.first_name FROM addresses AS t1 JOIN teachers AS t2 ON t1.address_id = t2.address_id WHERE t1.zip_postcode = \"918\"",
        "schema": "CREATE TABLE Ref_Address_Types (address_type_description TEXT); CREATE TABLE Students (first_name TEXT); CREATE TABLE Teachers (middle_name TEXT, address_id NUMBER, teacher_id NUMBER, last_name TEXT, first_name TEXT); CREATE TABLE Addresses (address_id NUMBER, zip_postcode TEXT, city TEXT); CREATE TABLE Student_Addresses (address_id NUMBER);"
      },
      {
        "question": "What about their email addresses?",
        "query": "SELECT t2.email_address FROM addresses AS t1 JOIN teachers AS t2 ON t1.address_id = t2.address_id WHERE t1.zip_postcode = \"918\"",
        "schema": "CREATE TABLE Addresses (city TEXT, zip_postcode TEXT, address_id NUMBER); CREATE TABLE Ref_Address_Types (address_type_description TEXT); CREATE TABLE Students (email_address TEXT, first_name TEXT); CREATE TABLE Teachers (email_address TEXT, middle_name TEXT, first_name TEXT, address_id NUMBER, teacher_id NUMBER, last_name TEXT); CREATE TABLE Student_Addresses (address_id NUMBER);"
      }
    ],
    [
      {
        "question": "How many students are there in file?",
        "query": "SELECT count(*) FROM students",
        "schema": "CREATE TABLE Student_Addresses (student_id NUMBER, address_id NUMBER); CREATE TABLE Behavior_Incident (incident_id NUMBER, student_id NUMBER); CREATE TABLE Teachers (teacher_id NUMBER); CREATE TABLE Detention (detention_id NUMBER, teacher_id NUMBER); CREATE TABLE Students_in_Detention (incident_id NUMBER, detention_id NUMBER, student_id NUMBER); CREATE TABLE Students (last_name TEXT, address_id NUMBER, first_name TEXT, other_student_details TEXT, student_id NUMBER); CREATE TABLE Addresses (address_id NUMBER); CREATE TABLE Assessment_Notes (teacher_id NUMBER, student_id NUMBER);"
      },
      {
        "question": "Give me the id of the students involved in any behavior incident.",
        "query": "SELECT DISTINCT student_id FROM behavior_incident",
        "schema": "CREATE TABLE Assessment_Notes (student_id NUMBER, teacher_id NUMBER); CREATE TABLE Behavior_Incident (incident_summary TEXT, incident_id NUMBER, student_id NUMBER, incident_type_code TEXT); CREATE TABLE Student_Addresses (student_id NUMBER, address_id NUMBER); CREATE TABLE Students (other_student_details TEXT, address_id NUMBER, student_id NUMBER, first_name TEXT, last_name TEXT); CREATE TABLE Students_in_Detention (student_id NUMBER, detention_id NUMBER, incident_id NUMBER); CREATE TABLE Addresses (address_id NUMBER); CREATE TABLE Detention (teacher_id NUMBER, detention_id NUMBER); CREATE TABLE Teachers (teacher_id NUMBER);"
      },
      {
        "question": "How many students are not among those?",
        "query": "SELECT count(*) FROM students WHERE student_id NOT IN ( SELECT student_id FROM behavior_incident )",
        "schema": "CREATE TABLE Behavior_Incident (incident_id NUMBER, student_id NUMBER, incident_type_code TEXT, incident_summary TEXT); CREATE TABLE Student_Addresses (student_id NUMBER, address_id NUMBER); CREATE TABLE Students_in_Detention (detention_id NUMBER, student_id NUMBER, incident_id NUMBER); CREATE TABLE Assessment_Notes (student_id NUMBER, teacher_id NUMBER); CREATE TABLE Teachers (teacher_id NUMBER); CREATE TABLE Addresses (address_id NUMBER); CREATE TABLE Detention (detention_id NUMBER, teacher_id NUMBER); CREATE TABLE Students (student_id NUMBER, other_student_details TEXT, first_name TEXT, address_id NUMBER, last_name TEXT);"
      }
    ],
    [
      {
        "question": "Show me the last name of all teachers in file.",
        "query": "SELECT last_name FROM teachers",
        "schema": "CREATE TABLE Teachers (middle_name TEXT, first_name TEXT, other_details TEXT, address_id NUMBER, teacher_id NUMBER, last_name TEXT); CREATE TABLE Students (last_name TEXT); CREATE TABLE Assessment_Notes (teacher_id NUMBER); CREATE TABLE Detention (teacher_id NUMBER);"
      },
      {
        "question": "How many teachers are involved in any detention?",
        "query": "SELECT count(*) FROM teachers AS t1 JOIN detention AS t2 ON t1.teacher_id = t2.teacher_id",
        "schema": "CREATE TABLE Teachers (teacher_id NUMBER, address_id NUMBER, first_name TEXT, middle_name TEXT, other_details TEXT, last_name TEXT); CREATE TABLE Students_in_Detention (detention_id NUMBER); CREATE TABLE Detention (teacher_id NUMBER, detention_id NUMBER); CREATE TABLE Students (last_name TEXT); CREATE TABLE Assessment_Notes (teacher_id NUMBER);"
      },
      {
        "question": "Give me the last name of teachers who are not one of those.",
        "query": "SELECT last_name FROM teachers EXCEPT SELECT t1.last_name FROM teachers AS t1 JOIN detention AS t2 ON t1.teacher_id = t2.teacher_id",
        "schema": "CREATE TABLE Students (last_name TEXT); CREATE TABLE Teachers (first_name TEXT, teacher_id NUMBER, middle_name TEXT, address_id NUMBER, other_details TEXT, last_name TEXT); CREATE TABLE Students_in_Detention (detention_id NUMBER); CREATE TABLE Detention (detention_id NUMBER, teacher_id NUMBER, detention_summary TEXT); CREATE TABLE Assessment_Notes (teacher_id NUMBER);"
      }
    ]
  ],
  "e_government": [
    [
      {
        "question": "Show information for all individuals.",
        "query": "SELECT * FROM individuals",
        "schema": "CREATE TABLE Individuals (individual_first_name TEXT, individual_id NUMBER, individual_last_name TEXT, individual_middle_name TEXT);"
      },
      {
        "question": "What are their first names, middle names and last names?",
        "query": "SELECT individual_first_name , individual_middle_name , individual_last_name FROM individuals ORDER BY individual_last_name",
        "schema": "CREATE TABLE Forms (form_name TEXT); CREATE TABLE Individuals (individual_last_name TEXT, individual_middle_name TEXT, individual_id NUMBER, individual_first_name TEXT);"
      },
      {
        "question": "Order the results by the last name.",
        "query": "SELECT individual_first_name , individual_middle_name , individual_last_name FROM individuals ORDER BY individual_last_name",
        "schema": "CREATE TABLE Individuals (individual_last_name TEXT, individual_first_name TEXT, individual_id NUMBER, individual_middle_name TEXT); CREATE TABLE Forms (form_name TEXT);"
      }
    ],
    [
      {
        "question": "Show all the forms.",
        "query": "SELECT * FROM forms",
        "schema": "CREATE TABLE Forms (form_id NUMBER, form_type_code TEXT, form_name TEXT, form_number TEXT, form_description TEXT, service_id NUMBER); CREATE TABLE Addresses (address_id NUMBER); CREATE TABLE Individuals (individual_id NUMBER); CREATE TABLE Party_Forms (form_status_code TEXT, form_id NUMBER, party_id NUMBER);"
      },
      {
        "question": "What are the distinct type codes of forms?",
        "query": "SELECT DISTINCT form_type_code FROM forms",
        "schema": "CREATE TABLE Forms (form_id NUMBER, service_id NUMBER, form_description TEXT, form_number TEXT, form_name TEXT, form_type_code TEXT); CREATE TABLE Party_Forms (party_id NUMBER, form_id NUMBER, form_status_code TEXT); CREATE TABLE Party_Addresses (address_type_code TEXT); CREATE TABLE Individuals (individual_id NUMBER); CREATE TABLE Services (service_type_code TEXT); CREATE TABLE Addresses (address_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show all the party forms.",
        "query": "SELECT * FROM party_forms",
        "schema": "CREATE TABLE Individuals (individual_id NUMBER); CREATE TABLE Parties (party_id NUMBER); CREATE TABLE Addresses (address_id NUMBER); CREATE TABLE Party_Addresses (address_id NUMBER); CREATE TABLE Party_Services (customer_id NUMBER); CREATE TABLE Forms (form_name TEXT, form_type_code TEXT, form_number TEXT, form_id NUMBER); CREATE TABLE Party_Forms (party_id NUMBER, form_id NUMBER, form_status_code TEXT);"
      },
      {
        "question": "Show the form name of each party form.",
        "query": "SELECT t1.form_name FROM forms AS t1 JOIN party_forms AS t2 ON t1.form_id = t2.form_id",
        "schema": "CREATE TABLE Individuals (individual_id NUMBER); CREATE TABLE Parties (party_id NUMBER); CREATE TABLE Forms (form_type_code TEXT, form_name TEXT, form_id NUMBER, form_number TEXT); CREATE TABLE Party_Services (customer_id NUMBER); CREATE TABLE Party_Forms (form_status_code TEXT, party_id NUMBER, form_id NUMBER); CREATE TABLE Party_Addresses (address_id NUMBER); CREATE TABLE Addresses (address_id NUMBER);"
      },
      {
        "question": "Which one is the most popular party form?",
        "query": "SELECT t1.form_name FROM forms AS t1 JOIN party_forms AS t2 ON t1.form_id = t2.form_id GROUP BY t2.form_id ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Party_Addresses (address_id NUMBER); CREATE TABLE Addresses (address_id NUMBER); CREATE TABLE Party_Forms (party_id NUMBER, form_id NUMBER, form_status_code TEXT); CREATE TABLE Parties (party_id NUMBER); CREATE TABLE Individuals (individual_id NUMBER); CREATE TABLE Party_Services (customer_id NUMBER); CREATE TABLE Forms (form_type_code TEXT, form_number TEXT, form_id NUMBER, form_name TEXT);"
      }
    ],
    [
      {
        "question": "Return all the information for each party.",
        "query": "SELECT * FROM parties",
        "schema": "CREATE TABLE Addresses (address_id NUMBER); CREATE TABLE Forms (form_id NUMBER); CREATE TABLE Party_Forms (form_status_code TEXT, party_id NUMBER, form_id NUMBER); CREATE TABLE Organizations (organization_name TEXT, organization_id NUMBER); CREATE TABLE Party_Addresses (party_id NUMBER, address_id NUMBER); CREATE TABLE Party_Services (customer_id NUMBER); CREATE TABLE Individuals (individual_id NUMBER); CREATE TABLE Parties (party_id NUMBER, payment_method_code TEXT);"
      },
      {
        "question": "Show me the information for the one with email \"enrico09@example.com\".",
        "query": "SELECT * FROM parties WHERE party_email = \"enrico09@example.com\"",
        "schema": "CREATE TABLE Party_Forms (party_id NUMBER, form_status_code TEXT, form_id NUMBER); CREATE TABLE Parties (payment_method_code TEXT, party_phone TEXT, party_id NUMBER, party_email TEXT); CREATE TABLE Organizations (organization_id NUMBER, organization_name TEXT); CREATE TABLE Party_Addresses (address_id NUMBER, party_id NUMBER); CREATE TABLE Party_Services (customer_id NUMBER); CREATE TABLE Individuals (individual_email TEXT, individual_id NUMBER); CREATE TABLE Forms (form_id NUMBER); CREATE TABLE Addresses (address_id NUMBER);"
      },
      {
        "question": "What are their payment method and phone number?",
        "query": "SELECT payment_method_code , party_phone FROM parties WHERE party_email = \"enrico09@example.com\"",
        "schema": "CREATE TABLE Addresses (address_id NUMBER); CREATE TABLE Parties (party_id NUMBER, party_email TEXT, payment_method_code TEXT, party_phone TEXT); CREATE TABLE Party_Addresses (address_id NUMBER, party_id NUMBER); CREATE TABLE Party_Services (customer_id NUMBER); CREATE TABLE Party_Forms (form_id NUMBER, party_id NUMBER, form_status_code TEXT); CREATE TABLE Organizations (organization_name TEXT, organization_id NUMBER); CREATE TABLE Forms (form_id NUMBER); CREATE TABLE Individuals (individual_email TEXT, inidividual_phone TEXT, individual_id NUMBER);"
      }
    ],
    [
      {
        "question": "What is the most popular party form?",
        "query": "SELECT * FROM party_forms GROUP BY form_id ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Party_Forms (party_id NUMBER, form_status_code TEXT, form_id NUMBER); CREATE TABLE Forms (form_id NUMBER, form_type_code TEXT, form_number TEXT, form_name TEXT); CREATE TABLE Parties (party_id NUMBER);"
      },
      {
        "question": "Find the emails of parties using this form.",
        "query": "SELECT t1.party_email FROM parties AS t1 JOIN party_forms AS t2 ON t1.party_id = t2.party_id WHERE t2.form_id = (SELECT form_id FROM party_forms GROUP BY form_id ORDER BY count(*) DESC LIMIT 1)",
        "schema": "CREATE TABLE Party_Addresses (party_id NUMBER); CREATE TABLE Forms (form_number TEXT, form_name TEXT, form_id NUMBER, form_type_code TEXT); CREATE TABLE Parties (party_email TEXT, party_id NUMBER); CREATE TABLE Party_Forms (party_id NUMBER, form_status_code TEXT, form_id NUMBER); CREATE TABLE Individuals (individual_email TEXT);"
      }
    ],
    [
      {
        "question": "Show all the organizations.",
        "query": "SELECT * FROM organizations",
        "schema": "CREATE TABLE Forms (form_id NUMBER); CREATE TABLE Individuals (individual_id NUMBER, individual_last_name TEXT); CREATE TABLE Organization_Contact_Individuals (organization_id NUMBER); CREATE TABLE Parties (party_id NUMBER); CREATE TABLE Organizations (organization_id NUMBER, organization_name TEXT); CREATE TABLE Services (service_id NUMBER); CREATE TABLE Addresses (address_id NUMBER); CREATE TABLE Party_Addresses (address_id NUMBER);"
      },
      {
        "question": "Sort them in order of the date formed.",
        "query": "SELECT * FROM organizations ORDER BY date_formed ASC",
        "schema": "CREATE TABLE Parties (party_id NUMBER); CREATE TABLE Services (service_id NUMBER); CREATE TABLE Party_Forms (form_status_code TEXT); CREATE TABLE Individuals (individual_id NUMBER, individual_last_name TEXT); CREATE TABLE Party_Addresses (address_id NUMBER); CREATE TABLE Organizations (organization_name TEXT, date_formed TIME, organization_id NUMBER); CREATE TABLE Organization_Contact_Individuals (organization_id NUMBER); CREATE TABLE Forms (form_name TEXT, form_id NUMBER); CREATE TABLE Addresses (address_id NUMBER);"
      },
      {
        "question": "Just show the organization names.",
        "query": "SELECT organization_name FROM organizations ORDER BY date_formed ASC",
        "schema": "CREATE TABLE Organizations (organization_name TEXT, date_formed TIME, organization_id NUMBER); CREATE TABLE Individuals (individual_last_name TEXT, individual_id NUMBER); CREATE TABLE Parties (party_id NUMBER); CREATE TABLE Organization_Contact_Individuals (organization_id NUMBER); CREATE TABLE Addresses (address_id NUMBER); CREATE TABLE Party_Forms (form_status_code TEXT); CREATE TABLE Forms (form_name TEXT, form_id NUMBER); CREATE TABLE Party_Addresses (address_id NUMBER); CREATE TABLE Services (service_id NUMBER);"
      }
    ],
    [
      {
        "question": "When was each organization formed?",
        "query": "SELECT date_formed FROM organizations",
        "schema": "CREATE TABLE Organizations (date_formed TIME, organization_name TEXT, organization_id NUMBER); CREATE TABLE Parties (party_id NUMBER); CREATE TABLE Forms (form_id NUMBER); CREATE TABLE Party_Forms (form_id NUMBER, party_id NUMBER, date_completion_started TIME, form_status_code TEXT, date_fully_completed TIME);"
      },
      {
        "question": "Find the name of the organization formed most recently.",
        "query": "SELECT organization_name FROM organizations ORDER BY date_formed DESC LIMIT 1",
        "schema": "CREATE TABLE Forms (form_id NUMBER, form_name TEXT); CREATE TABLE Party_Forms (date_fully_completed TIME, party_id NUMBER, form_id NUMBER, form_status_code TEXT, date_completion_started TIME); CREATE TABLE Parties (party_id NUMBER); CREATE TABLE Organizations (date_formed TIME, organization_name TEXT, organization_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show the organization whose name is \"Labour Party\".",
        "query": "SELECT * FROM organizations WHERE organization_name = \"Labour Party\"",
        "schema": "CREATE TABLE Forms (form_id NUMBER, form_name TEXT); CREATE TABLE Party_Forms (party_id NUMBER, form_id NUMBER); CREATE TABLE Party_Addresses (party_id NUMBER); CREATE TABLE Parties (party_id NUMBER); CREATE TABLE Organizations (organization_name TEXT, organization_id NUMBER); CREATE TABLE Party_Services (customer_id NUMBER); CREATE TABLE Individuals (individual_id NUMBER, individual_last_name TEXT);"
      },
      {
        "question": "What are the contact individuals for this organization?",
        "query": "SELECT * FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id = t2.organization_id JOIN individuals AS t3 ON t2.individual_id = t3.individual_id WHERE t1.organization_name = \"Labour Party\"",
        "schema": "CREATE TABLE Party_Services (customer_id NUMBER); CREATE TABLE Organization_Contact_Individuals (date_contact_to TIME, date_contact_from TIME, organization_id NUMBER, individual_id NUMBER); CREATE TABLE Organizations (organization_name TEXT, organization_id NUMBER); CREATE TABLE Parties (party_id NUMBER); CREATE TABLE Individuals (individual_middle_name TEXT, individual_last_name TEXT, individual_id NUMBER, individual_email TEXT, individual_first_name TEXT); CREATE TABLE Forms (form_name TEXT, form_id NUMBER); CREATE TABLE Party_Addresses (party_id NUMBER); CREATE TABLE Party_Forms (party_id NUMBER, form_id NUMBER);"
      },
      {
        "question": "Of these, find the last name of the latest contact individual.",
        "query": "SELECT t3.individual_last_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id = t2.organization_id JOIN individuals AS t3 ON t2.individual_id = t3.individual_id WHERE t1.organization_name = \"Labour Party\" ORDER BY t2.date_contact_to DESC LIMIT 1",
        "schema": "CREATE TABLE Individuals (individual_first_name TEXT, individual_email TEXT, individual_last_name TEXT, individual_middle_name TEXT, individual_id NUMBER); CREATE TABLE Parties (party_id NUMBER); CREATE TABLE Organizations (date_formed TIME, organization_id NUMBER, organization_name TEXT); CREATE TABLE Party_Services (customer_id NUMBER); CREATE TABLE Party_Forms (party_id NUMBER, form_id NUMBER); CREATE TABLE Party_Addresses (party_id NUMBER); CREATE TABLE Organization_Contact_Individuals (organization_id NUMBER, individual_id NUMBER, date_contact_from TIME, date_contact_to TIME); CREATE TABLE Forms (form_id NUMBER, form_name TEXT);"
      }
    ],
    [
      {
        "question": "What is the highest UK Vat number?",
        "query": "SELECT max(uk_vat_number) FROM organizations",
        "schema": "CREATE TABLE Individuals (individual_id NUMBER); CREATE TABLE Addresses (state_province_county TEXT, country TEXT); CREATE TABLE Organizations (uk_vat_number TEXT, organization_name TEXT, organization_id NUMBER);"
      },
      {
        "question": "Show the contact persons of the organization with this UK Vat number.",
        "query": "SELECT * FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id = t2.organization_id JOIN individuals AS t3 ON t2.individual_id = t3.individual_id WHERE t1.uk_vat_number = (SELECT max(uk_vat_number) FROM organizations)",
        "schema": "CREATE TABLE Organizations (uk_vat_number TEXT, organization_name TEXT, organization_id NUMBER); CREATE TABLE Addresses (country TEXT, state_province_county TEXT); CREATE TABLE Individuals (individual_id NUMBER, individual_last_name TEXT, individual_first_name TEXT); CREATE TABLE Organization_Contact_Individuals (date_contact_to TIME, date_contact_from TIME, individual_id NUMBER, organization_id NUMBER);"
      },
      {
        "question": "From the results, find the last name of the first ever contact person.",
        "query": "SELECT t3.individual_last_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id = t2.organization_id JOIN individuals AS t3 ON t2.individual_id = t3.individual_id WHERE t1.uk_vat_number = (SELECT max(uk_vat_number) FROM organizations) ORDER BY t2.date_contact_to ASC LIMIT 1",
        "schema": "CREATE TABLE Organizations (organization_name TEXT, uk_vat_number TEXT, organization_id NUMBER); CREATE TABLE Addresses (country TEXT, state_province_county TEXT); CREATE TABLE Individuals (individual_first_name TEXT, individual_last_name TEXT, individual_id NUMBER); CREATE TABLE Organization_Contact_Individuals (date_contact_from TIME, organization_id NUMBER, individual_id NUMBER, date_contact_to TIME);"
      }
    ],
    [
      {
        "question": "List all the available service names.",
        "query": "SELECT service_name FROM services",
        "schema": "CREATE TABLE Services (service_id NUMBER, service_descriptio TEXT, service_name TEXT, service_type_code TEXT); CREATE TABLE Party_Services (service_id NUMBER); CREATE TABLE Forms (service_id NUMBER);"
      },
      {
        "question": "Which of these have been used in some party service?",
        "query": "SELECT t1.service_name FROM services AS t1 JOIN party_services AS t2 ON t1.service_id = t2.service_id",
        "schema": "CREATE TABLE Party_Services (service_id NUMBER, customer_id NUMBER); CREATE TABLE Parties (party_id NUMBER); CREATE TABLE Forms (service_id NUMBER); CREATE TABLE Services (service_descriptio TEXT, service_name TEXT, service_id NUMBER, service_type_code TEXT);"
      },
      {
        "question": "How about those never used in any party service?",
        "query": "SELECT service_name FROM services EXCEPT SELECT t1.service_name FROM services AS t1 JOIN party_services AS t2 ON t1.service_id = t2.service_id",
        "schema": "CREATE TABLE Parties (party_id NUMBER); CREATE TABLE Party_Services (service_id NUMBER, customer_id NUMBER); CREATE TABLE Services (service_name TEXT, service_descriptio TEXT, service_id NUMBER, service_type_code TEXT); CREATE TABLE Forms (service_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show all the address information.",
        "query": "SELECT * FROM addresses",
        "schema": "CREATE TABLE Addresses (town_city TEXT, address_id NUMBER); CREATE TABLE Party_Addresses (address_type_code TEXT, address_id NUMBER, party_id NUMBER); CREATE TABLE Individuals (individual_address TEXT);"
      },
      {
        "question": "Find the names of all the cities.",
        "query": "SELECT town_city FROM addresses",
        "schema": "CREATE TABLE Individuals (individual_address TEXT); CREATE TABLE Addresses (address_id NUMBER, town_city TEXT); CREATE TABLE Party_Addresses (party_id NUMBER, address_type_code TEXT, address_id NUMBER);"
      },
      {
        "question": "Find the names of all the cities and states.",
        "query": "SELECT town_city FROM addresses UNION SELECT state_province_county FROM addresses",
        "schema": "CREATE TABLE Individuals (individual_address TEXT); CREATE TABLE Party_Addresses (address_id NUMBER, address_type_code TEXT, party_id NUMBER); CREATE TABLE Addresses (state_province_county TEXT, town_city TEXT, country TEXT, address_id NUMBER);"
      }
    ],
    [
      {
        "question": "How many addresses are there?",
        "query": "SELECT count(*) FROM addresses",
        "schema": "CREATE TABLE Individuals (individual_address TEXT); CREATE TABLE Party_Addresses (party_id NUMBER, address_type_code TEXT, address_id NUMBER); CREATE TABLE Addresses (zip_postcode TEXT, address_id NUMBER, town_city TEXT);"
      },
      {
        "question": "How many are in the state \"Colorado\"?",
        "query": "SELECT count(*) FROM addresses WHERE state_province_county = \"Colorado\"",
        "schema": "CREATE TABLE Addresses (state_province_county TEXT, address_id NUMBER, zip_postcode TEXT, town_city TEXT, country TEXT); CREATE TABLE Party_Addresses (party_id NUMBER, address_type_code TEXT, address_id NUMBER); CREATE TABLE Individuals (individual_address TEXT);"
      }
    ],
    [
      {
        "question": "Show the payment method codes used by parties.",
        "query": "SELECT payment_method_code FROM parties",
        "schema": "CREATE TABLE Party_Forms (party_id NUMBER); CREATE TABLE Party_Services (customer_id NUMBER); CREATE TABLE Parties (party_phone TEXT, payment_method_code TEXT, party_id NUMBER);"
      },
      {
        "question": "Which of them are used by more than 3 parties",
        "query": "SELECT payment_method_code FROM parties GROUP BY payment_method_code HAVING count(*) > 3",
        "schema": "CREATE TABLE Parties (payment_method_code TEXT, party_phone TEXT, party_id NUMBER); CREATE TABLE Party_Forms (party_id NUMBER); CREATE TABLE Party_Services (customer_id NUMBER);"
      }
    ],
    [
      {
        "question": "Find all the organization names.",
        "query": "SELECT organization_name FROM organizations",
        "schema": "CREATE TABLE Services (service_id NUMBER, service_name TEXT); CREATE TABLE Addresses (address_id NUMBER); CREATE TABLE Individuals (individual_id NUMBER, individual_last_name TEXT, individual_first_name TEXT); CREATE TABLE Parties (party_id NUMBER); CREATE TABLE Forms (form_name TEXT); CREATE TABLE Organizations (organization_id NUMBER, organization_name TEXT);"
      },
      {
        "question": "Which of them contain the string \"Party\"?",
        "query": "SELECT organization_name FROM organizations WHERE organization_name LIKE \"%Party%\"",
        "schema": "CREATE TABLE Forms (form_name TEXT); CREATE TABLE Parties (party_id NUMBER); CREATE TABLE Addresses (address_id NUMBER); CREATE TABLE Party_Forms (form_id NUMBER, party_id NUMBER); CREATE TABLE Organizations (organization_name TEXT, organization_id NUMBER); CREATE TABLE Services (service_id NUMBER, service_name TEXT); CREATE TABLE Individuals (individual_id NUMBER, individual_last_name TEXT, individual_first_name TEXT);"
      }
    ],
    [
      {
        "question": "What is the payment method code used by each party?",
        "query": "SELECT payment_method_code FROM parties",
        "schema": "CREATE TABLE Party_Addresses (party_id NUMBER); CREATE TABLE Party_Forms (party_id NUMBER); CREATE TABLE Party_Services (customer_id NUMBER); CREATE TABLE Parties (party_email TEXT, party_phone TEXT, payment_method_code TEXT, party_id NUMBER);"
      },
      {
        "question": "How many distinct payment methods are used by parties?",
        "query": "SELECT count(DISTINCT payment_method_code) FROM parties",
        "schema": "CREATE TABLE Party_Services (customer_id NUMBER); CREATE TABLE Parties (payment_method_code TEXT, party_id NUMBER, party_phone TEXT, party_email TEXT); CREATE TABLE Party_Addresses (party_id NUMBER); CREATE TABLE Party_Forms (party_id NUMBER);"
      }
    ],
    [
      {
        "question": "How many times did each party use services?",
        "query": "SELECT count(*) FROM parties AS t1 JOIN party_services AS t2 ON t1.party_id = t2.customer_id GROUP BY t1.party_id",
        "schema": "CREATE TABLE Party_Services (service_datetime TIME, booking_made_date TIME, booking_id NUMBER, service_id NUMBER, customer_id NUMBER); CREATE TABLE Individuals (individual_id NUMBER); CREATE TABLE Party_Addresses (party_id NUMBER); CREATE TABLE Organizations (organization_id NUMBER, organization_name TEXT); CREATE TABLE Party_Forms (party_id NUMBER); CREATE TABLE Parties (party_phone TEXT, party_email TEXT, payment_method_code TEXT, party_id NUMBER); CREATE TABLE Forms (service_id NUMBER); CREATE TABLE Services (service_id NUMBER, service_type_code TEXT);"
      },
      {
        "question": "Which party used party services the most number of times?",
        "query": "SELECT * FROM parties AS t1 JOIN party_services AS t2 ON t1.party_id = t2.customer_id GROUP BY t1.party_id ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Parties (party_phone TEXT, payment_method_code TEXT, party_email TEXT, party_id NUMBER); CREATE TABLE Individuals (individual_id NUMBER); CREATE TABLE Party_Forms (party_id NUMBER); CREATE TABLE Services (service_type_code TEXT, service_id NUMBER); CREATE TABLE Party_Services (booking_made_date TIME, booking_id NUMBER, service_id NUMBER, service_datetime TIME, customer_id NUMBER); CREATE TABLE Forms (service_id NUMBER); CREATE TABLE Party_Addresses (party_id NUMBER); CREATE TABLE Organizations (organization_id NUMBER, organization_name TEXT);"
      },
      {
        "question": "What is their email?",
        "query": "SELECT t1.party_email FROM parties AS t1 JOIN party_services AS t2 ON t1.party_id = t2.customer_id GROUP BY t1.party_id ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Party_Addresses (party_id NUMBER); CREATE TABLE Organizations (organization_name TEXT, organization_id NUMBER); CREATE TABLE Party_Forms (party_id NUMBER); CREATE TABLE Individuals (individual_id NUMBER, individual_email TEXT); CREATE TABLE Parties (party_email TEXT, party_id NUMBER, party_phone TEXT, payment_method_code TEXT); CREATE TABLE Services (service_type_code TEXT, service_id NUMBER); CREATE TABLE Party_Services (booking_made_date TIME, booking_id NUMBER, service_datetime TIME, service_id NUMBER, customer_id NUMBER); CREATE TABLE Forms (service_id NUMBER);"
      }
    ],
    [
      {
        "question": "What is the state of each address?",
        "query": "SELECT state_province_county FROM addresses",
        "schema": "CREATE TABLE Individuals (individual_address TEXT); CREATE TABLE Addresses (country TEXT, address_id NUMBER, zip_postcode TEXT, state_province_county TEXT); CREATE TABLE Party_Addresses (address_id NUMBER, address_type_code TEXT);"
      },
      {
        "question": "What one has building name that contains \"6862 Kaitlyn Knolls\"?",
        "query": "SELECT state_province_county FROM addresses WHERE line_1_number_building LIKE \"%6862 Kaitlyn Knolls%\"",
        "schema": "CREATE TABLE Party_Addresses (address_type_code TEXT, address_id NUMBER); CREATE TABLE Addresses (state_province_county TEXT, line_1_number_building TEXT, zip_postcode TEXT, country TEXT, town_city TEXT, address_id NUMBER); CREATE TABLE Individuals (individual_address TEXT);"
      }
    ],
    [
      {
        "question": "How many contact individuals does each organization have?",
        "query": "SELECT count(*) FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id = t2.organization_id",
        "schema": "CREATE TABLE Organizations (organization_name TEXT, organization_id NUMBER); CREATE TABLE Organization_Contact_Individuals (date_contact_from TIME, individual_id NUMBER, date_contact_to TIME, organization_id NUMBER); CREATE TABLE Individuals (individual_id NUMBER, individual_last_name TEXT);"
      },
      {
        "question": "What is the name of organization that has the greatest number of contact individuals?",
        "query": "SELECT t1.organization_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id = t2.organization_id GROUP BY t1.organization_name ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Organizations (organization_id NUMBER, organization_name TEXT); CREATE TABLE Individuals (individual_id NUMBER, individual_last_name TEXT); CREATE TABLE Organization_Contact_Individuals (date_contact_to TIME, organization_id NUMBER, date_contact_from TIME, individual_id NUMBER);"
      }
    ]
  ],
  "products_for_hire": [
    [
      {
        "question": "Show me the name of customers.",
        "query": "SELECT first_name, last_name FROM customers",
        "schema": "CREATE TABLE Customers (first_name TEXT, customer_id NUMBER, last_name TEXT);"
      },
      {
        "question": "What about their coupon amounts?",
        "query": "SELECT t1.first_name, t1.last_name, t2.coupon_amount FROM customers AS t1 JOIN discount_coupons AS t2 ON t1.coupon_id = t2.coupon_id",
        "schema": "CREATE TABLE Customers (coupon_id NUMBER, customer_id NUMBER, last_name TEXT, first_name TEXT); CREATE TABLE Payments (customer_id NUMBER); CREATE TABLE Discount_Coupons (coupon_amount NUMBER, coupon_id NUMBER);"
      },
      {
        "question": "Show me those with amount 500.",
        "query": "SELECT t1.first_name, t1.last_name, t2.coupon_amount FROM customers AS t1 JOIN discount_coupons AS t2 ON t1.coupon_id = t2.coupon_id WHERE t2.coupon_amount = 500",
        "schema": "CREATE TABLE Discount_Coupons (coupon_amount NUMBER, coupon_id NUMBER); CREATE TABLE Payments (customer_id NUMBER); CREATE TABLE Customers (coupon_id NUMBER, last_name TEXT, customer_id NUMBER, first_name TEXT);"
      },
      {
        "question": "Show me if they are bad or good.",
        "query": "SELECT t1.good_or_bad_customer FROM customers AS t1 JOIN discount_coupons AS t2 ON t1.coupon_id = t2.coupon_id WHERE t2.coupon_amount = 500",
        "schema": "CREATE TABLE Discount_Coupons (coupon_id NUMBER, coupon_amount NUMBER); CREATE TABLE Payments (customer_id NUMBER); CREATE TABLE Customers (customer_id NUMBER, coupon_id NUMBER, good_or_bad_customer TEXT, last_name TEXT, first_name TEXT);"
      }
    ],
    [
      {
        "question": "Show me the first name of all customers.",
        "query": "SELECT first_name FROM customers",
        "schema": "CREATE TABLE Customers (customer_id NUMBER, first_name TEXT, last_name TEXT);"
      },
      {
        "question": "How many bookings are there in record?",
        "query": "SELECT count(*) FROM bookings",
        "schema": "CREATE TABLE Bookings (customer_id NUMBER, booking_id NUMBER, count_hired TEXT, booking_status_code TEXT); CREATE TABLE Payments (booking_id NUMBER, customer_id NUMBER); CREATE TABLE Products_Booked (booking_id NUMBER); CREATE TABLE Customers (last_name TEXT, first_name TEXT, customer_id NUMBER);"
      },
      {
        "question": "What about that in terms of those customers?",
        "query": "SELECT t1.first_name , count(*) FROM customers AS t1 JOIN bookings AS t2 ON t1.customer_id = t2.customer_id GROUP BY t1.customer_id",
        "schema": "CREATE TABLE Products_Booked (booking_id NUMBER); CREATE TABLE Customers (last_name TEXT, customer_id NUMBER, first_name TEXT); CREATE TABLE Payments (customer_id NUMBER, booking_id NUMBER); CREATE TABLE Bookings (count_hired TEXT, booking_id NUMBER, booking_status_code TEXT, customer_id NUMBER);"
      },
      {
        "question": "Could you also show me those customers' ids?",
        "query": "SELECT t1.customer_id , t1.first_name , count(*) FROM customers AS t1 JOIN bookings AS t2 ON t1.customer_id = t2.customer_id GROUP BY t1.customer_id",
        "schema": "CREATE TABLE Products_Booked (booking_id NUMBER); CREATE TABLE Payments (customer_id NUMBER, booking_id NUMBER); CREATE TABLE Bookings (customer_id NUMBER, count_hired TEXT, booking_id NUMBER, booking_status_code TEXT); CREATE TABLE Customers (last_name TEXT, customer_id NUMBER, first_name TEXT);"
      }
    ],
    [
      {
        "question": "How many payment records are there?",
        "query": "SELECT count(*) FROM payments",
        "schema": "CREATE TABLE Customers (customer_id NUMBER, last_name TEXT); CREATE TABLE Bookings (booking_id NUMBER, customer_id NUMBER, amount_payable NUMBER); CREATE TABLE Payments (amount_paid NUMBER, customer_id NUMBER, booking_id NUMBER, payment_id NUMBER, payment_type_code TEXT);"
      },
      {
        "question": "Show me the maximum amount paid?",
        "query": "SELECT amount_paid FROM payments ORDER BY amount_paid DESC LIMIT 1",
        "schema": "CREATE TABLE Payments (payment_id NUMBER, payment_type_code TEXT, amount_due NUMBER, customer_id NUMBER, booking_id NUMBER, amount_paid_in_full_yn TEXT, amount_paid NUMBER); CREATE TABLE Customers (last_name TEXT, customer_id NUMBER); CREATE TABLE Bookings (amount_payable NUMBER, customer_id NUMBER, amount_of_discount NUMBER, amount_of_refund NUMBER, booking_id NUMBER);"
      },
      {
        "question": "What about the total maximum amount paid by a single customer?",
        "query": "SELECT sum(amount_paid) FROM payments GROUP BY customer_id ORDER BY sum(amount_paid) DESC LIMIT 1",
        "schema": "CREATE TABLE Bookings (customer_id NUMBER, amount_of_refund NUMBER, amount_payable NUMBER, booking_id NUMBER, amount_of_discount NUMBER); CREATE TABLE Customers (last_name TEXT, customer_id NUMBER); CREATE TABLE Payments (payment_id NUMBER, amount_paid NUMBER, payment_type_code TEXT, amount_due NUMBER, customer_id NUMBER, amount_paid_in_full_yn TEXT, booking_id NUMBER);"
      },
      {
        "question": "Show me the customer id also.",
        "query": "SELECT customer_id , sum(amount_paid) FROM payments GROUP BY customer_id ORDER BY sum(amount_paid) DESC LIMIT 1",
        "schema": "CREATE TABLE Bookings (customer_id NUMBER, amount_of_refund NUMBER, amount_payable NUMBER, amount_of_discount NUMBER, booking_id NUMBER); CREATE TABLE Customers (last_name TEXT, customer_id NUMBER); CREATE TABLE Payments (amount_paid_in_full_yn TEXT, customer_id NUMBER, booking_id NUMBER, payment_type_code TEXT, amount_due NUMBER, payment_id NUMBER, amount_paid NUMBER);"
      }
    ],
    [
      {
        "question": "How many payments are there in record?",
        "query": "SELECT count(*) FROM payments",
        "schema": "CREATE TABLE Bookings (customer_id NUMBER, booking_id NUMBER); CREATE TABLE Customers (last_name TEXT, customer_id NUMBER); CREATE TABLE Payments (payment_type_code TEXT, customer_id NUMBER, amount_paid_in_full_yn TEXT, booking_id NUMBER, payment_id NUMBER, amount_paid NUMBER);"
      },
      {
        "question": "How many did each booking incur?",
        "query": "SELECT booking_id, count(*) FROM payments GROUP BY booking_id",
        "schema": "CREATE TABLE Products_Booked (booked_count NUMBER, booking_id NUMBER); CREATE TABLE Bookings (booking_id NUMBER, customer_id NUMBER, amount_payable NUMBER, amount_of_refund NUMBER, booking_status_code TEXT, count_hired TEXT); CREATE TABLE Customers (customer_id NUMBER, last_name TEXT); CREATE TABLE Payments (amount_paid NUMBER, payment_id NUMBER, amount_paid_in_full_yn TEXT, payment_type_code TEXT, booking_id NUMBER, customer_id NUMBER);"
      },
      {
        "question": "Which one has the largest number?",
        "query": "SELECT booking_id FROM payments GROUP BY booking_id ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Customers (last_name TEXT, customer_id NUMBER); CREATE TABLE Payments (customer_id NUMBER, amount_paid_in_full_yn TEXT, payment_type_code TEXT, amount_paid NUMBER, booking_id NUMBER, payment_id NUMBER); CREATE TABLE Products_Booked (booked_count NUMBER, booking_id NUMBER); CREATE TABLE Bookings (booking_id NUMBER, amount_of_refund NUMBER, booking_status_code TEXT, count_hired TEXT, customer_id NUMBER, amount_payable NUMBER);"
      },
      {
        "question": "Show me its id and the amount of refund.",
        "query": "SELECT t1.booking_id , t1.amount_of_refund FROM bookings AS t1 JOIN payments AS t2 ON t1.booking_id = t2.booking_id GROUP BY t1.booking_id ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Products_Booked (booked_amount NUMBER, booked_count NUMBER, booking_id NUMBER); CREATE TABLE Customers (last_name TEXT, customer_id NUMBER); CREATE TABLE Discount_Coupons (coupon_amount NUMBER); CREATE TABLE Payments (amount_paid_in_full_yn TEXT, payment_type_code TEXT, booking_id NUMBER, customer_id NUMBER, payment_id NUMBER, amount_paid NUMBER, amount_due NUMBER); CREATE TABLE Bookings (amount_of_discount NUMBER, booking_id NUMBER, amount_payable NUMBER, count_hired TEXT, booking_status_code TEXT, customer_id NUMBER, amount_of_refund NUMBER);"
      }
    ],
    [
      {
        "question": "Show me the number of products that have been booked.",
        "query": "SELECT product_id FROM products_booked",
        "schema": "CREATE TABLE Products_Booked (product_id NUMBER, booked_amount NUMBER, booking_id NUMBER, booked_count NUMBER); CREATE TABLE Products_for_Hire (product_name TEXT, product_id NUMBER, product_type_code TEXT); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE View_Product_Availability (product_id NUMBER, booking_id NUMBER); CREATE TABLE Payments (booking_id NUMBER); CREATE TABLE Bookings (customer_id NUMBER, booking_id NUMBER);"
      },
      {
        "question": "How many times has each of them been booked?",
        "query": "SELECT product_id,count(*) FROM products_booked GROUP BY product_id",
        "schema": "CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE View_Product_Availability (booking_id NUMBER, product_id NUMBER); CREATE TABLE Bookings (booking_start_date TIME, customer_id NUMBER, booking_id NUMBER); CREATE TABLE Payments (booking_id NUMBER); CREATE TABLE Products_Booked (product_id NUMBER, booking_id NUMBER, booked_count NUMBER, booked_amount NUMBER); CREATE TABLE Products_for_Hire (product_type_code TEXT, product_id NUMBER, product_name TEXT);"
      },
      {
        "question": "Show me the id of the product with 3 bookings.",
        "query": "SELECT product_id FROM products_booked GROUP BY product_id HAVING count(*) = 3",
        "schema": "CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Products_Booked (booking_id NUMBER, product_id NUMBER, booked_count NUMBER, booked_amount NUMBER); CREATE TABLE Payments (booking_id NUMBER); CREATE TABLE Products_for_Hire (product_type_code TEXT, product_name TEXT, product_id NUMBER); CREATE TABLE View_Product_Availability (product_id NUMBER, booking_id NUMBER); CREATE TABLE Bookings (booking_id NUMBER, count_hired TEXT, customer_id NUMBER, booking_start_date TIME);"
      }
    ],
    [
      {
        "question": "What are the product that have been booked?",
        "query": "SELECT DISTINCT product_id FROM products_booked",
        "schema": "CREATE TABLE Products_Booked (product_id NUMBER, booking_id NUMBER, booked_count NUMBER); CREATE TABLE Products_for_Hire (product_type_code TEXT, product_id NUMBER, product_description TEXT, product_name TEXT); CREATE TABLE Bookings (booking_id NUMBER); CREATE TABLE View_Product_Availability (product_id NUMBER); CREATE TABLE Customers (customer_id NUMBER);"
      },
      {
        "question": "Show me the one with booked amount 102.76.",
        "query": "SELECT product_id FROM products_booked WHERE booked_amount = 102.76",
        "schema": "CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Products_Booked (booking_id NUMBER, booked_amount NUMBER, product_id NUMBER, booked_count NUMBER); CREATE TABLE Bookings (booking_id NUMBER, amount_outstanding NUMBER, amount_of_discount NUMBER); CREATE TABLE Products_for_Hire (product_type_code TEXT, product_name TEXT, product_description TEXT, product_id NUMBER); CREATE TABLE View_Product_Availability (product_id NUMBER);"
      },
      {
        "question": "What about its description?",
        "query": "SELECT t2.product_description FROM products_booked AS t1 JOIN products_for_hire AS t2 ON t1.product_id = t2.product_id WHERE t1.booked_amount = 102.76",
        "schema": "CREATE TABLE Products_for_Hire (product_id NUMBER, product_name TEXT, product_description TEXT, product_type_code TEXT); CREATE TABLE View_Product_Availability (product_id NUMBER); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Bookings (amount_of_discount NUMBER, booking_id NUMBER, amount_outstanding NUMBER); CREATE TABLE Products_Booked (booking_id NUMBER, booked_amount NUMBER, booked_count NUMBER, product_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show me the name of all the products in file.",
        "query": "SELECT product_name FROM products_for_hire",
        "schema": "CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Products_for_Hire (product_id NUMBER, product_name TEXT, product_description TEXT, product_type_code TEXT); CREATE TABLE Products_Booked (product_id NUMBER);"
      },
      {
        "question": "How many times has Book collection A been booked?",
        "query": "SELECT count(*) FROM products_booked AS t1 JOIN products_for_hire AS t2 ON t1.product_id = t2.product_id WHERE t2.product_name = 'Book collection A'",
        "schema": "CREATE TABLE Bookings (booking_id NUMBER, booking_start_date TIME, booking_end_date TIME, count_hired TEXT, customer_id NUMBER); CREATE TABLE Products_for_Hire (product_name TEXT, product_id NUMBER, product_type_code TEXT, product_description TEXT); CREATE TABLE Customers (date_last_hire TIME, customer_id NUMBER); CREATE TABLE Products_Booked (booking_id NUMBER, product_id NUMBER, booked_count NUMBER);"
      },
      {
        "question": "What are the start date and end date of those bookings?",
        "query": "SELECT t3.booking_start_date , t3.booking_end_date FROM products_for_hire AS t1 JOIN products_booked AS t2 ON t1.product_id = t2.product_id JOIN bookings AS t3 ON t2.booking_id = t3.booking_id WHERE t1.product_name = 'Book collection A'",
        "schema": "CREATE TABLE Products_for_Hire (product_name TEXT, product_description TEXT, product_type_code TEXT, product_id NUMBER); CREATE TABLE Customers (date_last_hire TIME, customer_id NUMBER); CREATE TABLE Products_Booked (product_id NUMBER, booking_id NUMBER, booked_count NUMBER); CREATE TABLE Bookings (count_hired TEXT, booking_id NUMBER, customer_id NUMBER, booking_end_date TIME, booking_start_date TIME);"
      }
    ],
    [
      {
        "question": "Show me the name of all the products in file.",
        "query": "SELECT product_name FROM products_for_hire",
        "schema": "CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Products_for_Hire (product_type_code TEXT, product_description TEXT, product_name TEXT, product_id NUMBER); CREATE TABLE Products_Booked (product_id NUMBER);"
      },
      {
        "question": "Show me those with availability equal to 1.",
        "query": "SELECT t2.product_name FROM view_product_availability AS t1 JOIN products_for_hire AS t2 ON t1.product_id = t2.product_id WHERE t1.available_yn = 1",
        "schema": "CREATE TABLE View_Product_Availability (product_id NUMBER, available_yn TEXT); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Products_for_Hire (product_id NUMBER, product_description TEXT, product_type_code TEXT, product_name TEXT); CREATE TABLE Products_Booked (product_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show me the name of all the customers.",
        "query": "SELECT first_name , last_name FROM customers",
        "schema": "CREATE TABLE Bookings (customer_id NUMBER); CREATE TABLE Customers (customer_id NUMBER, first_name TEXT, last_name TEXT);"
      },
      {
        "question": "What about those good customers?",
        "query": "SELECT first_name , last_name FROM customers WHERE good_or_bad_customer = 'good'",
        "schema": "CREATE TABLE Bookings (customer_id NUMBER); CREATE TABLE Customers (first_name TEXT, good_or_bad_customer TEXT, customer_id NUMBER, last_name TEXT);"
      },
      {
        "question": "Also show me their genders.",
        "query": "SELECT first_name , last_name , gender_mf FROM customers WHERE good_or_bad_customer = 'good'",
        "schema": "CREATE TABLE Bookings (customer_id NUMBER); CREATE TABLE Customers (gender_mf TEXT, first_name TEXT, last_name TEXT, good_or_bad_customer TEXT, customer_id NUMBER);"
      },
      {
        "question": "Order them by their last name.",
        "query": "SELECT first_name , last_name , gender_mf FROM customers WHERE good_or_bad_customer = 'good' ORDER BY last_name",
        "schema": "CREATE TABLE Customers (first_name TEXT, gender_mf TEXT, last_name TEXT, good_or_bad_customer TEXT, customer_id NUMBER); CREATE TABLE Bookings (customer_id NUMBER);"
      }
    ],
    [
      {
        "question": "How many times has any product been booked?",
        "query": "SELECT count(*) FROM products_booked",
        "schema": "CREATE TABLE Payments (booking_id NUMBER); CREATE TABLE Products_Booked (returned_yn TEXT, booked_count NUMBER, product_id NUMBER, returned_late_yn TEXT, booking_id NUMBER, booked_amount NUMBER); CREATE TABLE Products_for_Hire (product_type_code TEXT, product_id NUMBER, product_name TEXT); CREATE TABLE Bookings (booking_id NUMBER, customer_id NUMBER, booking_start_date TIME); CREATE TABLE View_Product_Availability (product_id NUMBER, booking_id NUMBER); CREATE TABLE Customers (customer_id NUMBER);"
      },
      {
        "question": "Show me the product at each time.",
        "query": "SELECT product_id FROM products_booked",
        "schema": "CREATE TABLE Bookings (booking_start_date TIME, booking_end_date TIME, customer_id NUMBER, booking_id NUMBER); CREATE TABLE Products_Booked (returned_yn TEXT, returned_late_yn TEXT, product_id NUMBER, booked_count NUMBER, booked_amount NUMBER, booking_id NUMBER); CREATE TABLE Products_for_Hire (product_id NUMBER, product_name TEXT, product_type_code TEXT); CREATE TABLE View_Product_Availability (booking_id NUMBER, product_id NUMBER); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Payments (booking_id NUMBER);"
      },
      {
        "question": "What about their booked amount?",
        "query": "SELECT booked_count FROM products_booked",
        "schema": "CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Products_Booked (product_id NUMBER, returned_yn TEXT, booked_amount NUMBER, returned_late_yn TEXT, booking_id NUMBER, booked_count NUMBER); CREATE TABLE View_Product_Availability (product_id NUMBER, booking_id NUMBER); CREATE TABLE Payments (booking_id NUMBER); CREATE TABLE Bookings (booking_end_date TIME, amount_outstanding NUMBER, customer_id NUMBER, amount_of_discount NUMBER, booking_start_date TIME, booking_id NUMBER); CREATE TABLE Products_for_Hire (product_name TEXT, product_id NUMBER, product_type_code TEXT);"
      },
      {
        "question": "Show me the maximum, minimum, and average of them.",
        "query": "SELECT max(booked_count) , min(booked_count) , avg(booked_count) FROM products_booked",
        "schema": "CREATE TABLE Products_for_Hire (product_name TEXT, product_id NUMBER, product_type_code TEXT); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE View_Product_Availability (booking_id NUMBER, product_id NUMBER); CREATE TABLE Payments (booking_id NUMBER); CREATE TABLE Bookings (amount_of_discount NUMBER, booking_start_date TIME, customer_id NUMBER, booking_end_date TIME, booking_id NUMBER, amount_outstanding NUMBER); CREATE TABLE Products_Booked (booked_count NUMBER, returned_yn TEXT, booked_amount NUMBER, returned_late_yn TEXT, product_id NUMBER, booking_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show me all the product names.",
        "query": "SELECT product_name FROM products_for_hire",
        "schema": "CREATE TABLE Customers (last_name TEXT, customer_id NUMBER, first_name TEXT); CREATE TABLE Products_Booked (product_id NUMBER); CREATE TABLE Products_for_Hire (product_name TEXT, product_id NUMBER, product_type_code TEXT);"
      },
      {
        "question": "What are their description?",
        "query": "SELECT product_name, product_description FROM products_for_hire",
        "schema": "CREATE TABLE Products_for_Hire (product_type_code TEXT, product_id NUMBER, product_name TEXT, product_description TEXT); CREATE TABLE Customers (last_name TEXT, customer_id NUMBER, first_name TEXT); CREATE TABLE Products_Booked (product_id NUMBER);"
      },
      {
        "question": "What about their daily hire costs?",
        "query": "SELECT product_name, daily_hire_cost FROM products_for_hire",
        "schema": "CREATE TABLE Products_Booked (product_id NUMBER); CREATE TABLE Customers (last_name TEXT, customer_id NUMBER, first_name TEXT); CREATE TABLE Products_for_Hire (daily_hire_cost NUMBER, product_name TEXT, product_description TEXT, product_id NUMBER, product_type_code TEXT);"
      },
      {
        "question": "Only show the cost of those which has 'Book' in its name.",
        "query": "SELECT daily_hire_cost FROM products_for_hire WHERE product_name LIKE '%Book%'",
        "schema": "CREATE TABLE Customers (first_name TEXT, customer_id NUMBER, last_name TEXT); CREATE TABLE Products_Booked (product_id NUMBER); CREATE TABLE Products_for_Hire (product_type_code TEXT, daily_hire_cost NUMBER, product_description TEXT, product_name TEXT, product_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show me the id of products that have been booked.",
        "query": "SELECT DISTINCT product_id FROM products_booked",
        "schema": "CREATE TABLE Products_Booked (booking_id NUMBER, product_id NUMBER, booked_count NUMBER); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Products_for_Hire (product_type_code TEXT, product_id NUMBER, product_name TEXT); CREATE TABLE View_Product_Availability (booking_id NUMBER, product_id NUMBER); CREATE TABLE Bookings (booking_id NUMBER, customer_id NUMBER); CREATE TABLE Payments (payment_id NUMBER, booking_id NUMBER);"
      },
      {
        "question": "Show me their maximum booked amount.",
        "query": "SELECT product_id, max(booked_amount) FROM products_booked GROUP BY product_id",
        "schema": "CREATE TABLE Bookings (amount_of_discount NUMBER, booking_id NUMBER, amount_of_refund NUMBER, amount_outstanding NUMBER, customer_id NUMBER); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Payments (booking_id NUMBER, payment_id NUMBER); CREATE TABLE Products_for_Hire (product_id NUMBER, product_type_code TEXT, product_name TEXT); CREATE TABLE View_Product_Availability (product_id NUMBER, booking_id NUMBER); CREATE TABLE Products_Booked (booked_amount NUMBER, booking_id NUMBER, product_id NUMBER, booked_count NUMBER);"
      },
      {
        "question": "Give me the id of those which has been booked with amount higher than 200.",
        "query": "SELECT product_id FROM products_booked WHERE booked_amount > 200",
        "schema": "CREATE TABLE Products_Booked (booking_id NUMBER, booked_count NUMBER, booked_amount NUMBER, product_id NUMBER); CREATE TABLE Bookings (amount_outstanding NUMBER, amount_of_refund NUMBER, customer_id NUMBER, booking_id NUMBER, amount_of_discount NUMBER); CREATE TABLE Products_for_Hire (product_type_code TEXT, product_id NUMBER, product_name TEXT); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE View_Product_Availability (booking_id NUMBER, product_id NUMBER); CREATE TABLE Payments (booking_id NUMBER, payment_id NUMBER);"
      },
      {
        "question": "What about the id of products which are not one of those?",
        "query": "SELECT product_id FROM products_for_hire WHERE product_id NOT IN ( SELECT product_id FROM products_booked WHERE booked_amount > 200)",
        "schema": "CREATE TABLE Products_for_Hire (product_name TEXT, product_type_code TEXT, product_id NUMBER); CREATE TABLE Payments (payment_id NUMBER, booking_id NUMBER); CREATE TABLE Products_Booked (booked_amount NUMBER, product_id NUMBER, booking_id NUMBER, booked_count NUMBER); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE View_Product_Availability (product_id NUMBER, booking_id NUMBER); CREATE TABLE Bookings (amount_outstanding NUMBER, customer_id NUMBER, amount_of_discount NUMBER, amount_of_refund NUMBER, booking_id NUMBER);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT count(*) FROM products_for_hire WHERE product_id NOT IN ( SELECT product_id FROM products_booked WHERE booked_amount > 200 )",
        "schema": "CREATE TABLE View_Product_Availability (booking_id NUMBER, product_id NUMBER); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Payments (payment_id NUMBER, booking_id NUMBER); CREATE TABLE Products_for_Hire (product_name TEXT, product_type_code TEXT, product_id NUMBER); CREATE TABLE Products_Booked (booked_count NUMBER, booking_id NUMBER, product_id NUMBER, booked_amount NUMBER); CREATE TABLE Bookings (amount_outstanding NUMBER, customer_id NUMBER, amount_of_discount NUMBER, amount_of_refund NUMBER, booking_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show me the first name of good customers.",
        "query": "SELECT first_name FROM customers WHERE good_or_bad_customer = 'good'",
        "schema": "CREATE TABLE Payments (customer_id NUMBER); CREATE TABLE Bookings (customer_id NUMBER); CREATE TABLE Customers (customer_id NUMBER, good_or_bad_customer TEXT, gender_mf TEXT, first_name TEXT, last_name TEXT);"
      },
      {
        "question": "What coupon amounts did they own?",
        "query": "SELECT t1.coupon_amount FROM discount_coupons AS t1 JOIN customers AS t2 ON t1.coupon_id = t2.coupon_id WHERE t2.good_or_bad_customer = 'good'",
        "schema": "CREATE TABLE Customers (first_name TEXT, last_name TEXT, customer_id NUMBER, good_or_bad_customer TEXT, gender_mf TEXT, coupon_id NUMBER); CREATE TABLE Bookings (customer_id NUMBER); CREATE TABLE Discount_Coupons (coupon_id NUMBER, coupon_amount NUMBER); CREATE TABLE Payments (customer_id NUMBER); CREATE TABLE Products_for_Hire (daily_hire_cost NUMBER);"
      },
      {
        "question": "What about those owned by bad customers?",
        "query": "SELECT t1.coupon_amount FROM discount_coupons AS t1 JOIN customers AS t2 ON t1.coupon_id = t2.coupon_id WHERE t2.good_or_bad_customer = 'bad'",
        "schema": "CREATE TABLE Bookings (customer_id NUMBER); CREATE TABLE Customers (first_name TEXT, coupon_id NUMBER, customer_id NUMBER, gender_mf TEXT, last_name TEXT, good_or_bad_customer TEXT); CREATE TABLE Discount_Coupons (coupon_amount NUMBER, coupon_id NUMBER); CREATE TABLE Products_for_Hire (daily_hire_cost NUMBER); CREATE TABLE Payments (customer_id NUMBER);"
      },
      {
        "question": "Show me the coupon amounts owned by both of them.",
        "query": "SELECT t1.coupon_amount FROM discount_coupons AS t1 JOIN customers AS t2 ON t1.coupon_id = t2.coupon_id WHERE t2.good_or_bad_customer = 'good' INTERSECT SELECT t1.coupon_amount FROM discount_coupons AS t1 JOIN customers AS t2 ON t1.coupon_id = t2.coupon_id WHERE t2.good_or_bad_customer = 'bad'",
        "schema": "CREATE TABLE Products_for_Hire (daily_hire_cost NUMBER); CREATE TABLE Customers (customer_id NUMBER, good_or_bad_customer TEXT, first_name TEXT, last_name TEXT, coupon_id NUMBER, gender_mf TEXT); CREATE TABLE Bookings (customer_id NUMBER); CREATE TABLE Discount_Coupons (coupon_id NUMBER, coupon_amount NUMBER); CREATE TABLE Payments (customer_id NUMBER);"
      }
    ],
    [
      {
        "question": "How many payment types are there?",
        "query": "SELECT DISTINCT payment_type_code FROM payments",
        "schema": "CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Payments (customer_id NUMBER, payment_type_code TEXT, payment_id NUMBER); CREATE TABLE Products_for_Hire (product_type_code TEXT);"
      },
      {
        "question": "Show me the date of payments using Check as payment type.",
        "query": "SELECT payment_date FROM payments WHERE payment_type_code = 'Check'",
        "schema": "CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Payments (payment_type_code TEXT, payment_date TIME, customer_id NUMBER, payment_id NUMBER); CREATE TABLE Products_for_Hire (product_type_code TEXT);"
      },
      {
        "question": "Also include those with amount paid higher than 300.",
        "query": "SELECT payment_date FROM payments WHERE amount_paid > 300 OR payment_type_code = 'Check'",
        "schema": "CREATE TABLE Products_for_Hire (product_type_code TEXT); CREATE TABLE Payments (amount_due NUMBER, amount_paid NUMBER, payment_date TIME, payment_type_code TEXT, amount_paid_in_full_yn TEXT, payment_id NUMBER, customer_id NUMBER); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Bookings (amount_payable NUMBER);"
      }
    ]
  ],
  "journal_committee": [
    [
      {
        "question": "Tell me Kamila Porczyk's age.",
        "query": "SELECT age FROM editor WHERE name = \"Kamila Porczyk\"",
        "schema": "CREATE TABLE editor (Age NUMBER, Editor_ID NUMBER, Name TEXT);"
      },
      {
        "question": "How about Mariusz Zalejski's age?",
        "query": "SELECT age FROM editor WHERE name = \"Mariusz Zalejski\"",
        "schema": "CREATE TABLE editor (Name TEXT, Editor_ID NUMBER, Age NUMBER);"
      },
      {
        "question": "Tell me the names of editors of age either 24 or 25.",
        "query": "SELECT name FROM editor WHERE age = 24 OR age = 25",
        "schema": "CREATE TABLE editor (Editor_ID NUMBER, Age NUMBER, Name TEXT);"
      }
    ],
    [
      {
        "question": "Tell me Szymon Wydra's journal's themes.",
        "query": "SELECT t3.theme FROM journal_committee AS t1 JOIN editor AS t2 ON t1.editor_id = t2.editor_id JOIN journal AS t3 ON t1.journal_id = t3.journal_id WHERE t2.name = \"Szymon Wydra\"",
        "schema": "CREATE TABLE journal (Theme TEXT, Journal_ID NUMBER); CREATE TABLE journal_committee (Editor_ID NUMBER, Journal_ID NUMBER); CREATE TABLE editor (Name TEXT, Editor_ID NUMBER);"
      },
      {
        "question": "How old is he?",
        "query": "SELECT age FROM editor WHERE name = \"Szymon Wydra\"",
        "schema": "CREATE TABLE journal_committee (Editor_ID NUMBER, Journal_ID NUMBER); CREATE TABLE journal (Theme TEXT, Journal_ID NUMBER); CREATE TABLE editor (Age NUMBER, Name TEXT, Editor_ID NUMBER);"
      },
      {
        "question": "What is the name of the youngest editor?",
        "query": "SELECT name FROM editor ORDER BY age ASC LIMIT 1",
        "schema": "CREATE TABLE journal_committee (Editor_ID NUMBER, Journal_ID NUMBER); CREATE TABLE editor (Name TEXT, Age NUMBER, Editor_ID NUMBER); CREATE TABLE journal (Theme TEXT, Journal_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Tell me the work types of Anna Powierza.",
        "query": "SELECT t1.work_type FROM journal_committee AS t1 JOIN editor AS t2 ON t1.editor_id = t2.editor_id WHERE t2.name = \"Anna Powierza\"",
        "schema": "CREATE TABLE journal_committee (Editor_ID NUMBER, Work_Type TEXT); CREATE TABLE editor (Editor_ID NUMBER, Name TEXT);"
      },
      {
        "question": "What is her age?",
        "query": "SELECT age FROM editor WHERE name = \"Anna Powierza\"",
        "schema": "CREATE TABLE journal_committee (Work_Type TEXT, Editor_ID NUMBER); CREATE TABLE editor (Age NUMBER, Name TEXT, Editor_ID NUMBER);"
      },
      {
        "question": "Tell me the most common age of editors.",
        "query": "SELECT age FROM editor GROUP BY age ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE editor (Age NUMBER, Editor_ID NUMBER, Name TEXT); CREATE TABLE journal_committee (Work_Type TEXT, Editor_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Tell me the number of journals of editor Szymon Wydra?",
        "query": "SELECT count(*) FROM journal_committee AS t1 JOIN editor AS t2 ON t1.editor_id = t2.editor_id JOIN journal AS t3 ON t1.journal_id = t3.journal_id WHERE t2.name = \"Szymon Wydra\"",
        "schema": "CREATE TABLE journal_committee (Journal_ID NUMBER, Editor_ID NUMBER); CREATE TABLE editor (Name TEXT, Editor_ID NUMBER); CREATE TABLE journal (Journal_ID NUMBER);"
      },
      {
        "question": "Tell me about the sales of journals of editor Szymon Wydra.",
        "query": "SELECT t3.sales FROM journal_committee AS t1 JOIN editor AS t2 ON t1.editor_id = t2.editor_id JOIN journal AS t3 ON t1.journal_id = t3.journal_id WHERE t2.name = \"Szymon Wydra\"",
        "schema": "CREATE TABLE editor (Editor_ID NUMBER, Name TEXT); CREATE TABLE journal (Sales NUMBER, Journal_ID NUMBER); CREATE TABLE journal_committee (Editor_ID NUMBER, Journal_ID NUMBER);"
      },
      {
        "question": "What are the names of editors and the theme of journals for which they serve on committees?",
        "query": "SELECT t2.name , t3.theme FROM journal_committee AS t1 JOIN editor AS t2 ON t1.editor_id = t2.editor_id JOIN journal AS t3 ON t1.journal_id = t3.journal_id",
        "schema": "CREATE TABLE journal_committee (Editor_ID NUMBER, Journal_ID NUMBER); CREATE TABLE editor (Name TEXT, Editor_ID NUMBER); CREATE TABLE journal (Theme TEXT, Sales NUMBER, Journal_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Tell me the date of the journal with the theme Tampa Bay Buccaneers.",
        "query": "SELECT Date FROM journal WHERE theme = \"Tampa Bay Buccaneers\"",
        "schema": "CREATE TABLE journal (Theme TEXT, Date TEXT, Journal_ID NUMBER);"
      },
      {
        "question": "Who is its editor?",
        "query": "SELECT t2.name FROM journal_committee AS t1 JOIN editor AS t2 ON t1.editor_id = t2.editor_id JOIN journal AS t3 ON t1.journal_id = t3.journal_id WHERE t3.theme = \"Tampa Bay Buccaneers\"",
        "schema": "CREATE TABLE journal_committee (Journal_ID NUMBER, Editor_ID NUMBER); CREATE TABLE editor (Editor_ID NUMBER, Name TEXT); CREATE TABLE journal (Date TEXT, Theme TEXT, Journal_ID NUMBER);"
      },
      {
        "question": "I want to know the names and ages of editors and the theme of journals for which they serve on committees, in ascending alphabetical order of theme.",
        "query": "SELECT t2.name , t2.age , t3.theme FROM journal_committee AS t1 JOIN editor AS t2 ON t1.editor_id = t2.editor_id JOIN journal AS t3 ON t1.journal_id = t3.journal_id ORDER BY t3.theme ASC",
        "schema": "CREATE TABLE journal (Journal_ID NUMBER, Date TEXT, Theme TEXT); CREATE TABLE editor (Age NUMBER, Editor_ID NUMBER, Name TEXT); CREATE TABLE journal_committee (Journal_ID NUMBER, Editor_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Tell me Anna Powierza's journal's themes.",
        "query": "SELECT t3.theme FROM journal_committee AS t1 JOIN editor AS t2 ON t1.editor_id = t2.editor_id JOIN journal AS t3 ON t1.journal_id = t3.journal_id WHERE t2.name = \"Anna Powierza\"",
        "schema": "CREATE TABLE editor (Editor_ID NUMBER, Name TEXT); CREATE TABLE journal (Theme TEXT, Journal_ID NUMBER); CREATE TABLE journal_committee (Work_Type TEXT, Editor_ID NUMBER, Journal_ID NUMBER);"
      },
      {
        "question": "How about her sales?",
        "query": "SELECT t3.sales FROM journal_committee AS t1 JOIN editor AS t2 ON t1.editor_id = t2.editor_id JOIN journal AS t3 ON t1.journal_id = t3.journal_id WHERE t2.name = \"Anna Powierza\"",
        "schema": "CREATE TABLE journal_committee (Work_Type TEXT, Editor_ID NUMBER, Journal_ID NUMBER); CREATE TABLE journal (Journal_ID NUMBER, Theme TEXT, Sales NUMBER); CREATE TABLE editor (Name TEXT, Editor_ID NUMBER);"
      },
      {
        "question": "What are the names of editors that are on the committee of journals with sales bigger than 3000?",
        "query": "SELECT t2.name FROM journal_committee AS t1 JOIN editor AS t2 ON t1.editor_id = t2.editor_id JOIN journal AS t3 ON t1.journal_id = t3.journal_id WHERE t3.sales > 3000",
        "schema": "CREATE TABLE editor (Name TEXT, Editor_ID NUMBER); CREATE TABLE journal_committee (Work_Type TEXT, Editor_ID NUMBER, Journal_ID NUMBER); CREATE TABLE journal (Theme TEXT, Sales NUMBER, Journal_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Tell me Marek Siudym's age.",
        "query": "SELECT age FROM editor WHERE name = \"Marek Siudym\"",
        "schema": "CREATE TABLE editor (Name TEXT, Editor_ID NUMBER, Age NUMBER);"
      },
      {
        "question": "Show me his journals.",
        "query": "SELECT t3.theme FROM journal_committee AS t1 JOIN editor AS t2 ON t1.editor_id = t2.editor_id JOIN journal AS t3 ON t1.journal_id = t3.journal_id WHERE t2.name = \"Marek Siudym\"",
        "schema": "CREATE TABLE journal (Theme TEXT, Journal_ID NUMBER); CREATE TABLE journal_committee (Editor_ID NUMBER, Journal_ID NUMBER); CREATE TABLE editor (Editor_ID NUMBER, Age NUMBER, Name TEXT);"
      },
      {
        "question": "Okay, now I want to know the id, name of each editor and the number of journal committees they are on.",
        "query": "SELECT t1.editor_id , t1.name , count(*) FROM editor AS t1 JOIN journal_committee AS t2 ON t1.editor_id = t2.editor_id GROUP BY t1.editor_id",
        "schema": "CREATE TABLE journal (Journal_ID NUMBER, Theme TEXT); CREATE TABLE editor (Name TEXT, Editor_ID NUMBER, Age NUMBER); CREATE TABLE journal_committee (Editor_ID NUMBER, Journal_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Tell me the sales of the journal with theme Jacksonville Jaguars.",
        "query": "SELECT sales FROM journal WHERE theme = \"Jacksonville Jaguars\"",
        "schema": "CREATE TABLE journal (Sales NUMBER, Theme TEXT, Journal_ID NUMBER);"
      },
      {
        "question": "Who is its editor?",
        "query": "SELECT t2.name FROM journal_committee AS t1 JOIN editor AS t2 ON t1.editor_id = t2.editor_id JOIN journal AS t3 ON t1.journal_id = t3.journal_id WHERE t3.theme = \"Jacksonville Jaguars\"",
        "schema": "CREATE TABLE journal_committee (Editor_ID NUMBER, Journal_ID NUMBER); CREATE TABLE editor (Name TEXT, Editor_ID NUMBER); CREATE TABLE journal (Journal_ID NUMBER, Theme TEXT, Sales NUMBER);"
      },
      {
        "question": "tell me the names of editors that are on at least two journal committees.",
        "query": "SELECT t1.name FROM editor AS t1 JOIN journal_committee AS t2 ON t1.editor_id = t2.editor_id GROUP BY t1.name HAVING count(*) >= 2",
        "schema": "CREATE TABLE journal (Theme TEXT, Sales NUMBER, Journal_ID NUMBER); CREATE TABLE editor (Editor_ID NUMBER, Name TEXT); CREATE TABLE journal_committee (Journal_ID NUMBER, Editor_ID NUMBER);"
      }
    ],
    [
      {
        "question": "tell me the number of journal committees of editor Kamila Porczyk.",
        "query": "SELECT count(*) FROM editor AS t1 JOIN journal_committee AS t2 ON t1.editor_id = t2.editor_id WHERE t1.name = \"Kamila Porczyk\"",
        "schema": "CREATE TABLE journal_committee (Journal_ID NUMBER, Editor_ID NUMBER); CREATE TABLE journal (Journal_ID NUMBER); CREATE TABLE editor (Editor_ID NUMBER, Name TEXT);"
      },
      {
        "question": "Okay, I want to know the themes of his journals.",
        "query": "SELECT t3.theme FROM journal_committee AS t1 JOIN editor AS t2 ON t1.editor_id = t2.editor_id JOIN journal AS t3 ON t1.journal_id = t3.journal_id WHERE t2.name = \"Szymon Wydra\"",
        "schema": "CREATE TABLE editor (Editor_ID NUMBER, Name TEXT); CREATE TABLE journal (Journal_ID NUMBER, Theme TEXT); CREATE TABLE journal_committee (Journal_ID NUMBER, Editor_ID NUMBER);"
      },
      {
        "question": "Tell me the names of editors that are not on any journal committee.",
        "query": "SELECT name FROM editor WHERE editor_id NOT IN (SELECT editor_id FROM journal_committee)",
        "schema": "CREATE TABLE journal (Theme TEXT, Journal_ID NUMBER); CREATE TABLE editor (Editor_ID NUMBER, Name TEXT); CREATE TABLE journal_committee (Editor_ID NUMBER, Journal_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Tell me the themes of Marek Siudym's journals.",
        "query": "SELECT t3.theme FROM journal_committee AS t1 JOIN editor AS t2 ON t1.editor_id = t2.editor_id JOIN journal AS t3 ON t1.journal_id = t3.journal_id WHERE t2.name = \"Marek Siudym\"",
        "schema": "CREATE TABLE editor (Name TEXT, Editor_ID NUMBER); CREATE TABLE journal_committee (Work_Type TEXT, Journal_ID NUMBER, Editor_ID NUMBER); CREATE TABLE journal (Journal_ID NUMBER, Theme TEXT);"
      },
      {
        "question": "Okay, tell me the date of the journal with theme \"at Jacksonville Jaguars\".",
        "query": "SELECT Date FROM journal WHERE theme = \"at Jacksonville Jaguars\"",
        "schema": "CREATE TABLE editor (Editor_ID NUMBER, Name TEXT); CREATE TABLE journal (Journal_ID NUMBER, Date TEXT, Theme TEXT); CREATE TABLE journal_committee (Editor_ID NUMBER, Journal_ID NUMBER, Work_Type TEXT);"
      },
      {
        "question": "list the date, theme and sales of the journal which did not have any of the listed editors serving on committee.",
        "query": "SELECT date , theme , sales FROM journal EXCEPT SELECT t1.date , t1.theme , t1.sales FROM journal AS t1 JOIN journal_committee AS t2 ON t1.journal_id = t2.journal_id",
        "schema": "CREATE TABLE journal_committee (Journal_ID NUMBER, Work_Type TEXT, Editor_ID NUMBER); CREATE TABLE editor (Editor_ID NUMBER, Name TEXT); CREATE TABLE journal (Sales NUMBER, Theme TEXT, Journal_ID NUMBER, Date TEXT);"
      }
    ]
  ],
  "department_store": [
    [
      {
        "question": "What is the total amount purchased for each product?",
        "query": "SELECT product_id, total_amount_purchased FROM product_suppliers",
        "schema": "CREATE TABLE Products (product_name TEXT, product_type_code TEXT, product_price NUMBER, product_id NUMBER); CREATE TABLE Customer_Orders (customer_id NUMBER, order_id NUMBER); CREATE TABLE Product_Suppliers (total_value_purchased NUMBER, total_amount_purchased TEXT, product_id NUMBER); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Order_Items (product_id NUMBER, order_item_id NUMBER, order_id NUMBER);"
      },
      {
        "question": "List the ids of products in decreasing order of their total amount purchased.",
        "query": "SELECT product_id FROM product_suppliers ORDER BY total_amount_purchased DESC",
        "schema": "CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Customer_Orders (order_id NUMBER, customer_id NUMBER); CREATE TABLE Product_Suppliers (total_amount_purchased TEXT, supplier_id NUMBER, product_id NUMBER, total_value_purchased NUMBER); CREATE TABLE Order_Items (order_item_id NUMBER, order_id NUMBER, product_id NUMBER); CREATE TABLE Suppliers (supplier_id NUMBER, supplier_name TEXT); CREATE TABLE Products (product_id NUMBER, product_name TEXT, product_price NUMBER, product_type_code TEXT);"
      },
      {
        "question": "Just give me the top three.",
        "query": "SELECT product_id FROM product_suppliers ORDER BY total_amount_purchased DESC LIMIT 3",
        "schema": "CREATE TABLE Product_Suppliers (total_value_purchased NUMBER, total_amount_purchased TEXT, product_id NUMBER, supplier_id NUMBER); CREATE TABLE Order_Items (order_item_id NUMBER, order_id NUMBER, product_id NUMBER); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Suppliers (supplier_id NUMBER, supplier_name TEXT); CREATE TABLE Products (product_id NUMBER, product_price NUMBER, product_name TEXT, product_type_code TEXT); CREATE TABLE Customer_Orders (order_id NUMBER, customer_id NUMBER);"
      }
    ],
    [
      {
        "question": "List all the product ids.",
        "query": "SELECT product_id FROM products",
        "schema": "CREATE TABLE Product_Suppliers (supplier_id NUMBER, product_id NUMBER); CREATE TABLE Customer_Orders (customer_id NUMBER); CREATE TABLE Products (product_id NUMBER, product_name TEXT); CREATE TABLE Customers (customer_code TEXT, customer_id NUMBER); CREATE TABLE Suppliers (supplier_id NUMBER); CREATE TABLE Departments (department_id NUMBER); CREATE TABLE Order_Items (order_id NUMBER, order_item_id NUMBER, product_id NUMBER);"
      },
      {
        "question": "Order them by the product price.",
        "query": "SELECT product_id FROM products ORDER BY product_price",
        "schema": "CREATE TABLE Products (product_name TEXT, product_price NUMBER, product_id NUMBER); CREATE TABLE Customers (customer_id NUMBER, customer_code TEXT); CREATE TABLE Departments (department_id NUMBER); CREATE TABLE Suppliers (supplier_id NUMBER); CREATE TABLE Order_Items (product_id NUMBER, order_id NUMBER, order_item_id NUMBER); CREATE TABLE Product_Suppliers (supplier_id NUMBER, product_id NUMBER); CREATE TABLE Customer_Orders (customer_id NUMBER);"
      },
      {
        "question": "Show the product id and product type of the cheapest product.",
        "query": "SELECT product_id , product_type_code FROM products ORDER BY product_price LIMIT 1",
        "schema": "CREATE TABLE Customer_Orders (customer_id NUMBER); CREATE TABLE Suppliers (supplier_id NUMBER); CREATE TABLE Customers (customer_id NUMBER, customer_code TEXT); CREATE TABLE Departments (department_id NUMBER); CREATE TABLE Order_Items (order_id NUMBER, product_id NUMBER, order_item_id NUMBER); CREATE TABLE Products (product_name TEXT, product_type_code TEXT, product_id NUMBER, product_price NUMBER); CREATE TABLE Product_Suppliers (product_id NUMBER, supplier_id NUMBER);"
      }
    ],
    [
      {
        "question": "What are all the product types?",
        "query": "SELECT product_type_code FROM products",
        "schema": "CREATE TABLE Products (product_name TEXT, product_type_code TEXT, product_id NUMBER);"
      },
      {
        "question": "Show me all the distinct product types.",
        "query": "SELECT DISTINCT product_type_code FROM products",
        "schema": "CREATE TABLE Products (product_name TEXT, product_type_code TEXT, product_id NUMBER);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT count(DISTINCT product_type_code) FROM products",
        "schema": "CREATE TABLE Products (product_name TEXT, product_id NUMBER, product_type_code TEXT);"
      }
    ],
    [
      {
        "question": "Show all the information about customer addresses.",
        "query": "SELECT * FROM customer_addresses",
        "schema": "CREATE TABLE Customers (customer_code TEXT, customer_address TEXT, customer_id NUMBER); CREATE TABLE Customer_Addresses (address_id NUMBER, customer_id NUMBER); CREATE TABLE Addresses (address_id NUMBER, address_details TEXT);"
      },
      {
        "question": "What is the address id of customer 10?",
        "query": "SELECT address_id FROM customer_addresses WHERE customer_id = 10",
        "schema": "CREATE TABLE Customer_Addresses (address_id NUMBER, customer_id NUMBER); CREATE TABLE Customers (customer_address TEXT, customer_id NUMBER, customer_name TEXT, customer_code TEXT); CREATE TABLE Addresses (address_id NUMBER, address_details TEXT);"
      },
      {
        "question": "What are address details of customer 10?",
        "query": "SELECT t1.address_details FROM addresses AS t1 JOIN customer_addresses AS t2 ON t1.address_id = t2.address_id WHERE t2.customer_id = 10",
        "schema": "CREATE TABLE Customer_Addresses (address_id NUMBER, customer_id NUMBER); CREATE TABLE Addresses (address_id NUMBER, address_details TEXT); CREATE TABLE Customers (customer_id NUMBER, customer_name TEXT, customer_address TEXT, customer_code TEXT);"
      }
    ],
    [
      {
        "question": "Show all staff information.",
        "query": "SELECT * FROM staff",
        "schema": "CREATE TABLE Customers (customer_id NUMBER, customer_code TEXT, customer_name TEXT); CREATE TABLE Departments (department_name TEXT, department_id NUMBER); CREATE TABLE Staff_Department_Assignments (staff_id NUMBER, job_title_code TEXT, department_id NUMBER); CREATE TABLE Staff (staff_name TEXT, staff_id NUMBER); CREATE TABLE Department_Stores (dept_store_id NUMBER);"
      },
      {
        "question": "What are the staff ids and genders of all staffs?",
        "query": "SELECT staff_id , staff_gender FROM staff",
        "schema": "CREATE TABLE Departments (department_name TEXT, department_id NUMBER); CREATE TABLE Customers (customer_code TEXT, customer_id NUMBER, customer_name TEXT); CREATE TABLE Staff (staff_id NUMBER, staff_gender TEXT, staff_name TEXT); CREATE TABLE Department_Stores (dept_store_id NUMBER); CREATE TABLE Staff_Department_Assignments (department_id NUMBER, staff_id NUMBER, job_title_code TEXT);"
      },
      {
        "question": "What are the staff ids and genders of all staffs whose job title is Department Manager?",
        "query": "SELECT t1.staff_id , t1.staff_gender FROM staff AS t1 JOIN staff_department_assignments AS t2 ON t1.staff_id = t2.staff_id WHERE t2.job_title_code = \"Department Manager\"",
        "schema": "CREATE TABLE Staff_Department_Assignments (job_title_code TEXT, staff_id NUMBER, department_id NUMBER); CREATE TABLE Staff (staff_name TEXT, staff_gender TEXT, staff_id NUMBER); CREATE TABLE Customers (customer_id NUMBER, customer_name TEXT, customer_code TEXT); CREATE TABLE Department_Stores (dept_store_id NUMBER); CREATE TABLE Departments (department_id NUMBER, department_name TEXT);"
      }
    ],
    [
      {
        "question": "Show all the customers.",
        "query": "SELECT * FROM customers",
        "schema": "CREATE TABLE Customer_Orders (customer_id NUMBER); CREATE TABLE Customer_Addresses (customer_id NUMBER); CREATE TABLE Customers (customer_name TEXT, customer_code TEXT, customer_id NUMBER);"
      },
      {
        "question": "How many customers are there?",
        "query": "SELECT count(*) FROM customers",
        "schema": "CREATE TABLE Customers (customer_name TEXT, customer_address TEXT, customer_code TEXT, customer_phone TEXT, customer_id NUMBER); CREATE TABLE Customer_Addresses (customer_id NUMBER); CREATE TABLE Customer_Orders (customer_id NUMBER);"
      },
      {
        "question": "For each payment method, find how many customers use it.",
        "query": "SELECT payment_method_code , count(*) FROM customers GROUP BY payment_method_code",
        "schema": "CREATE TABLE Customer_Orders (customer_id NUMBER); CREATE TABLE Customer_Addresses (customer_id NUMBER); CREATE TABLE Customers (customer_phone TEXT, customer_code TEXT, customer_address TEXT, customer_name TEXT, payment_method_code TEXT, customer_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show all the order items.",
        "query": "SELECT * FROM order_items",
        "schema": "CREATE TABLE Customers (customer_code TEXT, customer_id NUMBER); CREATE TABLE Products (product_type_code TEXT, product_id NUMBER, product_name TEXT); CREATE TABLE Customer_Orders (order_id NUMBER); CREATE TABLE Order_Items (product_id NUMBER, order_id NUMBER, order_item_id NUMBER);"
      },
      {
        "question": "Show the number of times each product was ordered.",
        "query": "SELECT count(*) FROM order_items GROUP BY product_id",
        "schema": "CREATE TABLE Products (product_type_code TEXT, product_name TEXT, product_id NUMBER); CREATE TABLE Product_Suppliers (product_id NUMBER); CREATE TABLE Order_Items (order_item_id NUMBER, order_id NUMBER, product_id NUMBER); CREATE TABLE Customers (customer_code TEXT, customer_id NUMBER); CREATE TABLE Customer_Orders (order_id NUMBER, order_date TIME);"
      },
      {
        "question": "What is the id of the product that was ordered the most often?",
        "query": "SELECT product_id FROM order_items GROUP BY product_id ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Product_Suppliers (product_id NUMBER); CREATE TABLE Customers (customer_id NUMBER, customer_code TEXT); CREATE TABLE Products (product_name TEXT, product_type_code TEXT, product_id NUMBER); CREATE TABLE Order_Items (order_item_id NUMBER, product_id NUMBER, order_id NUMBER); CREATE TABLE Customer_Orders (order_id NUMBER, order_date TIME);"
      }
    ],
    [
      {
        "question": "Show all the customer information.",
        "query": "SELECT * FROM customers",
        "schema": "CREATE TABLE Customer_Orders (customer_id NUMBER); CREATE TABLE Customers (customer_code TEXT, customer_id NUMBER, customer_name TEXT); CREATE TABLE Customer_Addresses (customer_id NUMBER);"
      },
      {
        "question": "How many orders did each customer make?",
        "query": "SELECT count(*) FROM customer_orders GROUP BY customer_id",
        "schema": "CREATE TABLE Customers (customer_id NUMBER, customer_code TEXT, customer_name TEXT); CREATE TABLE Order_Items (order_id NUMBER); CREATE TABLE Customer_Orders (order_status_code TEXT, order_date TIME, order_id NUMBER, customer_id NUMBER); CREATE TABLE Customer_Addresses (customer_id NUMBER);"
      },
      {
        "question": "Which customer made the largest number of orders?",
        "query": "SELECT * FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id GROUP BY t2.customer_id ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Order_Items (order_id NUMBER); CREATE TABLE Customers (customer_id NUMBER, customer_name TEXT, customer_code TEXT); CREATE TABLE Customer_Orders (order_date TIME, order_id NUMBER, customer_id NUMBER, order_status_code TEXT); CREATE TABLE Customer_Addresses (customer_id NUMBER);"
      },
      {
        "question": "What are the name, phone number and email address of this customer?",
        "query": "SELECT t1.customer_name , t1.customer_phone , t1.customer_email FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id GROUP BY t2.customer_id ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Customer_Orders (order_status_code TEXT, order_date TIME, customer_id NUMBER, order_id NUMBER); CREATE TABLE Order_Items (order_id NUMBER); CREATE TABLE Customers (customer_id NUMBER, customer_code TEXT, customer_email TEXT, customer_name TEXT, customer_address TEXT, customer_phone TEXT); CREATE TABLE Customer_Addresses (customer_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show all the products.",
        "query": "SELECT * FROM products",
        "schema": "CREATE TABLE Order_Items (product_id NUMBER); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Product_Suppliers (product_id NUMBER); CREATE TABLE Products (product_type_code TEXT, product_id NUMBER, product_name TEXT);"
      },
      {
        "question": "Group all the products by product type.",
        "query": "SELECT * FROM products GROUP BY product_type_code",
        "schema": "CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Order_Items (product_id NUMBER); CREATE TABLE Product_Suppliers (product_id NUMBER); CREATE TABLE Products (product_type_code TEXT, product_name TEXT, product_id NUMBER);"
      },
      {
        "question": "What is the average price for each type of product?",
        "query": "SELECT product_type_code , avg(product_price) FROM products GROUP BY product_type_code",
        "schema": "CREATE TABLE Product_Suppliers (product_id NUMBER, total_value_purchased NUMBER); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Order_Items (product_id NUMBER); CREATE TABLE Products (product_id NUMBER, product_name TEXT, product_type_code TEXT, product_price NUMBER);"
      }
    ],
    [
      {
        "question": "What are all the department stores?",
        "query": "SELECT * FROM department_stores",
        "schema": "CREATE TABLE Department_Stores (dept_store_chain_id NUMBER, dept_store_id NUMBER, store_name TEXT); CREATE TABLE Department_Store_Chain (dept_store_chain_id NUMBER, dept_store_chain_name TEXT); CREATE TABLE Staff_Department_Assignments (department_id NUMBER); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Departments (dept_store_id NUMBER, department_name TEXT, department_id NUMBER);"
      },
      {
        "question": "What are all the department stores that the store chain South has?",
        "query": "SELECT * FROM department_stores AS t1 JOIN department_store_chain AS t2 ON t1.dept_store_chain_id = t2.dept_store_chain_id WHERE t2.dept_store_chain_name = \"South\"",
        "schema": "CREATE TABLE Staff_Department_Assignments (department_id NUMBER); CREATE TABLE Departments (department_name TEXT, department_id NUMBER, dept_store_id NUMBER); CREATE TABLE Department_Stores (dept_store_chain_id NUMBER, dept_store_id NUMBER, store_name TEXT); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Department_Store_Chain (dept_store_chain_name TEXT, dept_store_chain_id NUMBER);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT count(*) FROM department_stores AS t1 JOIN department_store_chain AS t2 ON t1.dept_store_chain_id = t2.dept_store_chain_id WHERE t2.dept_store_chain_name = \"South\"",
        "schema": "CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Department_Store_Chain (dept_store_chain_name TEXT, dept_store_chain_id NUMBER); CREATE TABLE Department_Stores (store_name TEXT, dept_store_chain_id NUMBER, dept_store_id NUMBER); CREATE TABLE Departments (department_name TEXT, dept_store_id NUMBER, department_id NUMBER); CREATE TABLE Staff_Department_Assignments (department_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show all the staff.",
        "query": "SELECT * FROM staff",
        "schema": "CREATE TABLE Customers (customer_code TEXT, customer_name TEXT, customer_id NUMBER); CREATE TABLE Department_Stores (dept_store_id NUMBER); CREATE TABLE Staff (staff_name TEXT, staff_id NUMBER); CREATE TABLE Staff_Department_Assignments (staff_id NUMBER, job_title_code TEXT, department_id NUMBER); CREATE TABLE Departments (department_id NUMBER);"
      },
      {
        "question": "Sort all the staff by their assigned date in a descending manner.",
        "query": "SELECT * FROM staff AS t1 JOIN staff_department_assignments AS t2 ON t1.staff_id = t2.staff_id ORDER BY t2.date_assigned_to DESC LIMIT 1",
        "schema": "CREATE TABLE Staff (staff_name TEXT, staff_id NUMBER); CREATE TABLE Department_Stores (dept_store_id NUMBER); CREATE TABLE Customers (customer_name TEXT, customer_code TEXT, customer_id NUMBER); CREATE TABLE Staff_Department_Assignments (department_id NUMBER, date_assigned_to TIME, date_assigned_from TIME, staff_id NUMBER, job_title_code TEXT); CREATE TABLE Departments (department_id NUMBER);"
      },
      {
        "question": "What is the name and job title of the staff who was assigned the latest?",
        "query": "SELECT t1.staff_name , t2.job_title_code FROM staff AS t1 JOIN staff_department_assignments AS t2 ON t1.staff_id = t2.staff_id ORDER BY t2.date_assigned_to DESC LIMIT 1",
        "schema": "CREATE TABLE Departments (department_id NUMBER); CREATE TABLE Staff (staff_id NUMBER, staff_name TEXT); CREATE TABLE Customers (customer_name TEXT, customer_code TEXT, customer_id NUMBER); CREATE TABLE Department_Stores (dept_store_id NUMBER); CREATE TABLE Staff_Department_Assignments (staff_id NUMBER, department_id NUMBER, job_title_code TEXT, date_assigned_from TIME, date_assigned_to TIME);"
      }
    ],
    [
      {
        "question": "What are all the products?",
        "query": "SELECT * FROM products",
        "schema": "CREATE TABLE Order_Items (product_id NUMBER); CREATE TABLE Product_Suppliers (product_id NUMBER); CREATE TABLE Products (product_name TEXT, product_type_code TEXT, product_id NUMBER);"
      },
      {
        "question": "Which products are supplied by supplier id 3?",
        "query": "SELECT * FROM product_suppliers AS t1 JOIN products AS t2 ON t1.product_id = t2.product_id WHERE t1.supplier_id = 3",
        "schema": "CREATE TABLE Supplier_Addresses (supplier_id NUMBER); CREATE TABLE Product_Suppliers (product_id NUMBER, supplier_id NUMBER); CREATE TABLE Products (product_type_code TEXT, product_name TEXT, product_id NUMBER); CREATE TABLE Order_Items (product_id NUMBER); CREATE TABLE Suppliers (supplier_id NUMBER, supplier_name TEXT);"
      },
      {
        "question": "Give me the product type, name and price for these products.",
        "query": "SELECT t2.product_type_code , t2.product_name , t2.product_price FROM product_suppliers AS t1 JOIN products AS t2 ON t1.product_id = t2.product_id WHERE t1.supplier_id = 3",
        "schema": "CREATE TABLE Order_Items (product_id NUMBER); CREATE TABLE Products (product_name TEXT, product_type_code TEXT, product_price NUMBER, product_id NUMBER); CREATE TABLE Product_Suppliers (total_value_purchased NUMBER, supplier_id NUMBER, product_id NUMBER); CREATE TABLE Supplier_Addresses (supplier_id NUMBER); CREATE TABLE Suppliers (supplier_name TEXT, supplier_id NUMBER);"
      }
    ],
    [
      {
        "question": "Find all the customers.",
        "query": "SELECT * FROM customers",
        "schema": "CREATE TABLE Customer_Orders (customer_id NUMBER); CREATE TABLE Customers (customer_address TEXT, customer_code TEXT, customer_name TEXT, customer_id NUMBER); CREATE TABLE Customer_Addresses (customer_id NUMBER);"
      },
      {
        "question": "Which customers have order status Pending? Show their names.",
        "query": "SELECT DISTINCT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id WHERE t2.order_status_code = \"Pending\"",
        "schema": "CREATE TABLE Customer_Addresses (customer_id NUMBER); CREATE TABLE Customers (customer_code TEXT, customer_address TEXT, customer_id NUMBER, customer_name TEXT); CREATE TABLE Customer_Orders (order_status_code TEXT, customer_id NUMBER, order_id NUMBER);"
      },
      {
        "question": "Sort them in the order of customer id.",
        "query": "SELECT DISTINCT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id WHERE t2.order_status_code = \"Pending\" ORDER BY t2.customer_id",
        "schema": "CREATE TABLE Customer_Orders (customer_id NUMBER, order_status_code TEXT, order_id NUMBER); CREATE TABLE Customer_Addresses (customer_id NUMBER); CREATE TABLE Customers (customer_code TEXT, customer_address TEXT, customer_name TEXT, customer_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show all the customers.",
        "query": "SELECT * FROM customers",
        "schema": "CREATE TABLE Customers (customer_code TEXT, customer_name TEXT, customer_id NUMBER); CREATE TABLE Customer_Orders (customer_id NUMBER); CREATE TABLE Customer_Addresses (customer_id NUMBER);"
      },
      {
        "question": "Which customers have both New and Pending orders?",
        "query": "SELECT * FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id WHERE t2.order_status_code = \"New\" INTERSECT SELECT * FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id WHERE t2.order_status_code = \"Pending\"",
        "schema": "CREATE TABLE Customers (customer_name TEXT, customer_code TEXT, customer_id NUMBER); CREATE TABLE Customer_Addresses (customer_id NUMBER); CREATE TABLE Customer_Orders (order_id NUMBER, order_date TIME, order_status_code TEXT, customer_id NUMBER);"
      },
      {
        "question": "Show these customers' names and addresses.",
        "query": "SELECT t1.customer_name , t1.customer_address FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id WHERE t2.order_status_code = \"New\" INTERSECT SELECT t1.customer_name , t1.customer_address FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id WHERE t2.order_status_code = \"Pending\"",
        "schema": "CREATE TABLE Customers (customer_name TEXT, customer_code TEXT, customer_id NUMBER, customer_address TEXT); CREATE TABLE Customer_Orders (order_id NUMBER, order_status_code TEXT, customer_id NUMBER, order_date TIME); CREATE TABLE Customer_Addresses (customer_id NUMBER, address_id NUMBER); CREATE TABLE Addresses (address_id NUMBER, address_details TEXT);"
      }
    ],
    [
      {
        "question": "Show me all the products.",
        "query": "SELECT * FROM products",
        "schema": "CREATE TABLE Order_Items (product_id NUMBER); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Products (product_name TEXT, product_id NUMBER, product_type_code TEXT); CREATE TABLE Product_Suppliers (product_id NUMBER);"
      },
      {
        "question": "Which products are supplied by supplier id 2?",
        "query": "SELECT t1.product_id FROM product_suppliers AS t1 JOIN products AS t2 ON t1.product_id = t2.product_id WHERE t1.supplier_id = 2",
        "schema": "CREATE TABLE Products (product_id NUMBER, product_name TEXT, product_type_code TEXT); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Suppliers (supplier_id NUMBER, supplier_name TEXT); CREATE TABLE Order_Items (product_id NUMBER); CREATE TABLE Product_Suppliers (supplier_id NUMBER, product_id NUMBER); CREATE TABLE Supplier_Addresses (supplier_id NUMBER);"
      },
      {
        "question": "Which products are more expensive than the average price of all products?",
        "query": "SELECT product_id FROM products WHERE product_price > (SELECT avg(product_price) FROM products)",
        "schema": "CREATE TABLE Products (product_price NUMBER, product_id NUMBER, product_name TEXT, product_type_code TEXT); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Supplier_Addresses (supplier_id NUMBER); CREATE TABLE Order_Items (product_id NUMBER); CREATE TABLE Suppliers (supplier_id NUMBER, supplier_name TEXT); CREATE TABLE Product_Suppliers (product_id NUMBER, supplier_id NUMBER, total_value_purchased NUMBER);"
      },
      {
        "question": "Return ids of all the products that are supplied by supplier id 2 and are more expensive than the average price of all products.",
        "query": "SELECT t1.product_id FROM product_suppliers AS t1 JOIN products AS t2 ON t1.product_id = t2.product_id WHERE t1.supplier_id = 2 AND t2.product_price > (SELECT avg(product_price) FROM products)",
        "schema": "CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Products (product_name TEXT, product_type_code TEXT, product_id NUMBER, product_price NUMBER); CREATE TABLE Product_Suppliers (supplier_id NUMBER, product_id NUMBER, total_value_purchased NUMBER); CREATE TABLE Order_Items (product_id NUMBER); CREATE TABLE Supplier_Addresses (supplier_id NUMBER); CREATE TABLE Suppliers (supplier_name TEXT, supplier_id NUMBER);"
      }
    ],
    [
      {
        "question": "Which department store has a marketing department?",
        "query": "SELECT * FROM departments AS t1 JOIN department_stores AS t2 ON t1.dept_store_id = t2.dept_store_id WHERE t1.department_name = \"marketing\"",
        "schema": "CREATE TABLE Staff_Department_Assignments (department_id NUMBER); CREATE TABLE Departments (dept_store_id NUMBER, department_name TEXT, department_id NUMBER); CREATE TABLE Department_Stores (dept_store_chain_id NUMBER, dept_store_id NUMBER, store_name TEXT); CREATE TABLE Department_Store_Chain (dept_store_chain_name TEXT, dept_store_chain_id NUMBER); CREATE TABLE Customers (customer_id NUMBER);"
      },
      {
        "question": "Which department store has both a marketing and a managing department?",
        "query": "SELECT * FROM departments AS t1 JOIN department_stores AS t2 ON t1.dept_store_id = t2.dept_store_id WHERE t1.department_name = \"marketing\" INTERSECT SELECT * FROM departments AS t1 JOIN department_stores AS t2 ON t1.dept_store_id = t2.dept_store_id WHERE t1.department_name = \"managing\"",
        "schema": "CREATE TABLE Department_Store_Chain (dept_store_chain_id NUMBER, dept_store_chain_name TEXT); CREATE TABLE Staff_Department_Assignments (department_id NUMBER); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Department_Stores (dept_store_chain_id NUMBER, store_name TEXT, dept_store_id NUMBER); CREATE TABLE Departments (department_id NUMBER, department_name TEXT, dept_store_id NUMBER);"
      },
      {
        "question": "Give me their id and name.",
        "query": "SELECT t2.dept_store_id , t2.store_name FROM departments AS t1 JOIN department_stores AS t2 ON t1.dept_store_id = t2.dept_store_id WHERE t1.department_name = \"marketing\" INTERSECT SELECT t2.dept_store_id , t2.store_name FROM departments AS t1 JOIN department_stores AS t2 ON t1.dept_store_id = t2.dept_store_id WHERE t1.department_name = \"managing\"",
        "schema": "CREATE TABLE Departments (department_id NUMBER, department_name TEXT, dept_store_id NUMBER); CREATE TABLE Staff_Department_Assignments (department_id NUMBER); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Department_Stores (dept_store_id NUMBER, dept_store_chain_id NUMBER, store_name TEXT); CREATE TABLE Department_Store_Chain (dept_store_chain_id NUMBER, dept_store_chain_name TEXT);"
      }
    ],
    [
      {
        "question": "Count the number of department stores each department store chain has.",
        "query": "SELECT count(*) FROM department_stores GROUP BY dept_store_chain_id",
        "schema": "CREATE TABLE Departments (department_id NUMBER, department_name TEXT, dept_store_id NUMBER); CREATE TABLE Department_Stores (dept_store_chain_id NUMBER, dept_store_id NUMBER, store_name TEXT); CREATE TABLE Department_Store_Chain (dept_store_chain_name TEXT, dept_store_chain_id NUMBER);"
      },
      {
        "question": "Which department store chain has the largest number of department stores?",
        "query": "SELECT * FROM department_stores GROUP BY dept_store_chain_id ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Department_Stores (store_name TEXT, dept_store_chain_id NUMBER, dept_store_id NUMBER); CREATE TABLE Departments (dept_store_id NUMBER, department_name TEXT, department_id NUMBER); CREATE TABLE Department_Store_Chain (dept_store_chain_name TEXT, dept_store_chain_id NUMBER);"
      },
      {
        "question": "What are the ids of the top two department store chains by number of department stores?",
        "query": "SELECT dept_store_chain_id FROM department_stores GROUP BY dept_store_chain_id ORDER BY count(*) DESC LIMIT 2",
        "schema": "CREATE TABLE Departments (dept_store_id NUMBER, department_id NUMBER, department_name TEXT); CREATE TABLE Department_Store_Chain (dept_store_chain_name TEXT, dept_store_chain_id NUMBER); CREATE TABLE Department_Stores (store_name TEXT, dept_store_chain_id NUMBER, dept_store_id NUMBER);"
      }
    ],
    [
      {
        "question": "Count the number of staff for each department.",
        "query": "SELECT count(*) FROM staff_department_assignments GROUP BY department_id",
        "schema": "CREATE TABLE Departments (department_name TEXT, department_id NUMBER, dept_store_id NUMBER); CREATE TABLE Department_Stores (dept_store_id NUMBER); CREATE TABLE Staff_Department_Assignments (department_id NUMBER, staff_id NUMBER, job_title_code TEXT); CREATE TABLE Staff (staff_name TEXT, staff_id NUMBER);"
      },
      {
        "question": "Which department has the least number of staff?",
        "query": "SELECT * FROM staff_department_assignments GROUP BY department_id ORDER BY count(*) LIMIT 1",
        "schema": "CREATE TABLE Department_Stores (dept_store_id NUMBER); CREATE TABLE Staff_Department_Assignments (job_title_code TEXT, staff_id NUMBER, department_id NUMBER); CREATE TABLE Departments (department_name TEXT, dept_store_id NUMBER, department_id NUMBER); CREATE TABLE Staff (staff_id NUMBER, staff_name TEXT);"
      },
      {
        "question": "What is the id of this department?",
        "query": "SELECT department_id FROM staff_department_assignments GROUP BY department_id ORDER BY count(*) LIMIT 1",
        "schema": "CREATE TABLE Staff (staff_name TEXT, staff_id NUMBER); CREATE TABLE Department_Stores (dept_store_id NUMBER); CREATE TABLE Departments (dept_store_id NUMBER, department_name TEXT, department_id NUMBER); CREATE TABLE Staff_Department_Assignments (job_title_code TEXT, department_id NUMBER, staff_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show all the product types.",
        "query": "SELECT product_type_code FROM products",
        "schema": "CREATE TABLE Products (product_name TEXT, product_type_code TEXT, product_id NUMBER);"
      },
      {
        "question": "Order all the products by their types.",
        "query": "SELECT * FROM products ORDER BY product_type_code",
        "schema": "CREATE TABLE Order_Items (product_id NUMBER); CREATE TABLE Products (product_id NUMBER, product_name TEXT, product_type_code TEXT);"
      },
      {
        "question": "Give me the maximum and minimum price for each product type.",
        "query": "SELECT product_type_code , max(product_price) , min(product_price) FROM products GROUP BY product_type_code",
        "schema": "CREATE TABLE Order_Items (product_id NUMBER); CREATE TABLE Products (product_price NUMBER, product_name TEXT, product_type_code TEXT, product_id NUMBER);"
      }
    ],
    [
      {
        "question": "What are all the product types?",
        "query": "SELECT product_type_code FROM products",
        "schema": "CREATE TABLE Products (product_type_code TEXT, product_id NUMBER, product_name TEXT);"
      },
      {
        "question": "What is the average price of products?",
        "query": "SELECT avg(product_price) FROM products",
        "schema": "CREATE TABLE Product_Suppliers (total_value_purchased NUMBER, product_id NUMBER); CREATE TABLE Products (product_name TEXT, product_price NUMBER, product_type_code TEXT, product_id NUMBER);"
      },
      {
        "question": "Find the product type whose average price is higher than the average price of all products.",
        "query": "SELECT product_type_code FROM products GROUP BY product_type_code HAVING avg(product_price) > (SELECT avg(product_price) FROM products)",
        "schema": "CREATE TABLE Products (product_id NUMBER, product_type_code TEXT, product_name TEXT, product_price NUMBER); CREATE TABLE Product_Suppliers (total_value_purchased NUMBER, product_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show all the staff.",
        "query": "SELECT * FROM staff",
        "schema": "CREATE TABLE Department_Stores (dept_store_id NUMBER); CREATE TABLE Customers (customer_name TEXT, customer_code TEXT, customer_id NUMBER); CREATE TABLE Departments (department_id NUMBER); CREATE TABLE Staff (staff_id NUMBER, staff_name TEXT); CREATE TABLE Staff_Department_Assignments (department_id NUMBER, staff_id NUMBER, job_title_code TEXT);"
      },
      {
        "question": "What is the assignment period for each staff?",
        "query": "SELECT date_assigned_to - date_assigned_from FROM staff_department_assignments",
        "schema": "CREATE TABLE Staff (staff_id NUMBER, staff_name TEXT); CREATE TABLE Customers (customer_id NUMBER, customer_code TEXT, customer_name TEXT); CREATE TABLE Departments (department_id NUMBER); CREATE TABLE Staff_Department_Assignments (department_id NUMBER, date_assigned_to TIME, staff_id NUMBER, date_assigned_from TIME, job_title_code TEXT); CREATE TABLE Department_Stores (dept_store_id NUMBER);"
      },
      {
        "question": "Find the id and name of the staff who has been assigned for the shortest period.",
        "query": "SELECT t1.staff_id , t1.staff_name FROM staff AS t1 JOIN staff_department_assignments AS t2 ON t1.staff_id = t2.staff_id ORDER BY date_assigned_to - date_assigned_from LIMIT 1",
        "schema": "CREATE TABLE Customers (customer_id NUMBER, customer_code TEXT, customer_name TEXT); CREATE TABLE Staff_Department_Assignments (date_assigned_from TIME, date_assigned_to TIME, job_title_code TEXT, staff_id NUMBER, department_id NUMBER); CREATE TABLE Staff (staff_name TEXT, staff_id NUMBER); CREATE TABLE Department_Stores (dept_store_id NUMBER); CREATE TABLE Departments (department_id NUMBER);"
      }
    ],
    [
      {
        "question": "What is the price of each product?",
        "query": "SELECT product_price FROM products",
        "schema": "CREATE TABLE Products (product_type_code TEXT, product_price NUMBER, product_name TEXT, product_id NUMBER); CREATE TABLE Product_Suppliers (product_id NUMBER, total_value_purchased NUMBER);"
      },
      {
        "question": "Which product costs between 600 and 700?",
        "query": "SELECT * FROM products WHERE product_price BETWEEN 600 AND 700",
        "schema": "CREATE TABLE Product_Suppliers (product_id NUMBER, total_value_purchased NUMBER); CREATE TABLE Products (product_name TEXT, product_price NUMBER, product_type_code TEXT, product_id NUMBER);"
      },
      {
        "question": "Give me their product names and ids.",
        "query": "SELECT product_name , product_id FROM products WHERE product_price BETWEEN 600 AND 700",
        "schema": "CREATE TABLE Products (product_name TEXT, product_type_code TEXT, product_price NUMBER, product_id NUMBER); CREATE TABLE Product_Suppliers (product_id NUMBER, total_value_purchased NUMBER);"
      }
    ],
    [
      {
        "question": "Show all distinct customer ids.",
        "query": "SELECT DISTINCT customer_id FROM customer_orders",
        "schema": "CREATE TABLE Customer_Addresses (customer_id NUMBER); CREATE TABLE Customer_Orders (order_id NUMBER, customer_id NUMBER); CREATE TABLE Customers (customer_code TEXT, customer_name TEXT, customer_id NUMBER);"
      },
      {
        "question": "When was the first time some orders were cancelled?",
        "query": "SELECT min(order_date) FROM customer_orders WHERE order_status_code = \"Cancelled\"",
        "schema": "CREATE TABLE Customer_Orders (order_id NUMBER, order_status_code TEXT, order_date TIME, customer_id NUMBER); CREATE TABLE Customer_Addresses (customer_id NUMBER); CREATE TABLE Customers (customer_id NUMBER, customer_code TEXT, customer_name TEXT);"
      },
      {
        "question": "Find the ids of all distinct customers who made orders after this date.",
        "query": "SELECT DISTINCT customer_id FROM customer_orders WHERE order_date > (SELECT min(order_date) FROM customer_orders WHERE order_status_code = \"Cancelled\")",
        "schema": "CREATE TABLE Customer_Orders (order_status_code TEXT, order_id NUMBER, order_date TIME, customer_id NUMBER); CREATE TABLE Customers (customer_name TEXT, customer_id NUMBER, customer_code TEXT); CREATE TABLE Customer_Addresses (customer_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show the information about all the staff department assignments.",
        "query": "SELECT * FROM staff_department_assignments",
        "schema": "CREATE TABLE Department_Stores (dept_store_id NUMBER); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Departments (department_id NUMBER, department_name TEXT); CREATE TABLE Staff (staff_id NUMBER, staff_name TEXT); CREATE TABLE Staff_Department_Assignments (department_id NUMBER, date_assigned_to TIME, staff_id NUMBER, job_title_code TEXT, date_assigned_from TIME);"
      },
      {
        "question": "When was the latest department assignment of Clerical Staff?",
        "query": "SELECT max(date_assigned_to) FROM staff_department_assignments WHERE job_title_code = 'Clerical Staff'",
        "schema": "CREATE TABLE Staff_Department_Assignments (job_title_code TEXT, date_assigned_to TIME, department_id NUMBER, date_assigned_from TIME, staff_id NUMBER); CREATE TABLE Department_Stores (dept_store_id NUMBER); CREATE TABLE Staff (staff_id NUMBER, staff_name TEXT); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Departments (department_id NUMBER, department_name TEXT);"
      },
      {
        "question": "What is id of the staff who had a Staff Department Assignment earlier than this date?",
        "query": "SELECT staff_id FROM staff_department_assignments WHERE date_assigned_to < (SELECT max(date_assigned_to) FROM staff_department_assignments WHERE job_title_code = 'Clerical Staff')",
        "schema": "CREATE TABLE Staff (staff_name TEXT, staff_id NUMBER); CREATE TABLE Departments (department_name TEXT, department_id NUMBER); CREATE TABLE Staff_Department_Assignments (date_assigned_to TIME, department_id NUMBER, date_assigned_from TIME, staff_id NUMBER, job_title_code TEXT); CREATE TABLE Department_Stores (dept_store_id NUMBER); CREATE TABLE Customers (customer_id NUMBER);"
      }
    ],
    [
      {
        "question": "Give me the information about all the customers.",
        "query": "SELECT * FROM customers",
        "schema": "CREATE TABLE Customer_Addresses (customer_id NUMBER); CREATE TABLE Customers (customer_id NUMBER, customer_code TEXT, customer_name TEXT); CREATE TABLE Customer_Orders (customer_id NUMBER, order_id NUMBER);"
      },
      {
        "question": "Which customers have an address that contains TN?",
        "query": "SELECT * FROM customers WHERE customer_address LIKE \"%TN%\"",
        "schema": "CREATE TABLE Customers (customer_id NUMBER, customer_address TEXT, customer_name TEXT, customer_code TEXT); CREATE TABLE Customer_Addresses (customer_id NUMBER, address_id NUMBER); CREATE TABLE Addresses (address_details TEXT, address_id NUMBER); CREATE TABLE Customer_Orders (customer_id NUMBER, order_id NUMBER);"
      },
      {
        "question": "What are their names and ids?",
        "query": "SELECT customer_name , customer_id FROM customers WHERE customer_address LIKE \"%TN%\"",
        "schema": "CREATE TABLE Customer_Addresses (address_id NUMBER, customer_id NUMBER); CREATE TABLE Customers (customer_code TEXT, customer_id NUMBER, customer_address TEXT, customer_name TEXT); CREATE TABLE Departments (department_name TEXT); CREATE TABLE Products (product_name TEXT); CREATE TABLE Customer_Orders (customer_id NUMBER, order_id NUMBER); CREATE TABLE Addresses (address_id NUMBER, address_details TEXT);"
      }
    ],
    [
      {
        "question": "Show all the staff department assignments.",
        "query": "SELECT * FROM staff_department_assignments",
        "schema": "CREATE TABLE Staff_Department_Assignments (job_title_code TEXT, department_id NUMBER, staff_id NUMBER); CREATE TABLE Departments (department_name TEXT, department_id NUMBER); CREATE TABLE Staff (staff_name TEXT, staff_id NUMBER); CREATE TABLE Department_Stores (dept_store_id NUMBER); CREATE TABLE Customers (customer_code TEXT, customer_id NUMBER);"
      },
      {
        "question": "Which staff was assigned in 2016?",
        "query": "SELECT * FROM staff_department_assignments WHERE date_assigned_from LIKE \"2016%\"",
        "schema": "CREATE TABLE Customers (customer_code TEXT, customer_id NUMBER); CREATE TABLE Departments (department_id NUMBER, department_name TEXT); CREATE TABLE Staff_Department_Assignments (job_title_code TEXT, department_id NUMBER, date_assigned_to TIME, staff_id NUMBER, date_assigned_from TIME); CREATE TABLE Staff (staff_id NUMBER, staff_name TEXT); CREATE TABLE Department_Stores (dept_store_id NUMBER);"
      },
      {
        "question": "What are their names and genders?",
        "query": "SELECT t1.staff_name , t1.staff_gender FROM staff AS t1 JOIN staff_department_assignments AS t2 ON t1.staff_id = t2.staff_id WHERE t2.date_assigned_from LIKE \"2016%\"",
        "schema": "CREATE TABLE Customers (customer_id NUMBER, customer_code TEXT); CREATE TABLE Staff (staff_gender TEXT, staff_id NUMBER, staff_name TEXT); CREATE TABLE Staff_Department_Assignments (date_assigned_from TIME, date_assigned_to TIME, staff_id NUMBER, department_id NUMBER, job_title_code TEXT); CREATE TABLE Department_Stores (dept_store_id NUMBER); CREATE TABLE Departments (department_id NUMBER, department_name TEXT);"
      }
    ],
    [
      {
        "question": "Return all the staff department assignments.",
        "query": "SELECT * FROM staff_department_assignments",
        "schema": "CREATE TABLE Department_Stores (dept_store_id NUMBER); CREATE TABLE Departments (department_id NUMBER, department_name TEXT); CREATE TABLE Staff_Department_Assignments (department_id NUMBER, job_title_code TEXT, staff_id NUMBER); CREATE TABLE Staff (staff_id NUMBER, staff_name TEXT);"
      },
      {
        "question": "Count the number of assignments for each staff.",
        "query": "SELECT COUNT (*) FROM staff_department_assignments GROUP BY staff_id",
        "schema": "CREATE TABLE Department_Stores (dept_store_id NUMBER); CREATE TABLE Staff (staff_name TEXT, staff_id NUMBER); CREATE TABLE Staff_Department_Assignments (job_title_code TEXT, staff_id NUMBER, date_assigned_to TIME, department_id NUMBER, date_assigned_from TIME); CREATE TABLE Departments (department_name TEXT, department_id NUMBER);"
      },
      {
        "question": "List the names of staff who have been assigned multiple jobs.",
        "query": "SELECT t1.staff_name FROM staff AS t1 JOIN staff_department_assignments AS t2 ON t1.staff_id = t2.staff_id GROUP BY t2.staff_id HAVING COUNT (*) > 1",
        "schema": "CREATE TABLE Staff_Department_Assignments (date_assigned_from TIME, staff_id NUMBER, job_title_code TEXT, department_id NUMBER, date_assigned_to TIME); CREATE TABLE Department_Stores (dept_store_id NUMBER); CREATE TABLE Departments (department_name TEXT, department_id NUMBER); CREATE TABLE Staff (staff_id NUMBER, staff_name TEXT);"
      }
    ],
    [
      {
        "question": "Find the information about all the suppliers.",
        "query": "SELECT * FROM suppliers",
        "schema": "CREATE TABLE Supplier_Addresses (supplier_id NUMBER); CREATE TABLE Suppliers (supplier_phone TEXT, supplier_id NUMBER, supplier_name TEXT); CREATE TABLE Departments (department_id NUMBER); CREATE TABLE Product_Suppliers (product_id NUMBER, supplier_id NUMBER); CREATE TABLE Customers (customer_id NUMBER, customer_code TEXT); CREATE TABLE Staff (staff_id NUMBER);"
      },
      {
        "question": "Sort them in the alphabetical order of their addresses.",
        "query": "SELECT * FROM suppliers AS t1 JOIN supplier_addresses AS t2 ON t1.supplier_id = t2.supplier_id JOIN addresses AS t3 ON t2.address_id = t3.address_id ORDER BY t3.address_details",
        "schema": "CREATE TABLE Addresses (address_id NUMBER, address_details TEXT); CREATE TABLE Supplier_Addresses (supplier_id NUMBER, address_id NUMBER); CREATE TABLE Customer_Addresses (customer_id NUMBER, address_id NUMBER); CREATE TABLE Suppliers (supplier_id NUMBER, supplier_phone TEXT, supplier_name TEXT); CREATE TABLE Customers (customer_address TEXT, customer_code TEXT, customer_id NUMBER); CREATE TABLE Staff (staff_id NUMBER); CREATE TABLE Product_Suppliers (supplier_id NUMBER, product_id NUMBER); CREATE TABLE Departments (department_id NUMBER);"
      },
      {
        "question": "Show the name and phone number of all suppliers in the alphabetical order of their addresses.",
        "query": "SELECT t1.supplier_name , t1.supplier_phone FROM suppliers AS t1 JOIN supplier_addresses AS t2 ON t1.supplier_id = t2.supplier_id JOIN addresses AS t3 ON t2.address_id = t3.address_id ORDER BY t3.address_details",
        "schema": "CREATE TABLE Customer_Addresses (customer_id NUMBER, address_id NUMBER); CREATE TABLE Suppliers (supplier_id NUMBER, supplier_name TEXT, supplier_phone TEXT); CREATE TABLE Departments (department_id NUMBER); CREATE TABLE Supplier_Addresses (address_id NUMBER, supplier_id NUMBER); CREATE TABLE Addresses (address_id NUMBER, address_details TEXT); CREATE TABLE Customers (customer_code TEXT, customer_address TEXT, customer_phone TEXT, customer_id NUMBER); CREATE TABLE Product_Suppliers (supplier_id NUMBER, product_id NUMBER); CREATE TABLE Staff (staff_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show all the customers.",
        "query": "SELECT * FROM customers",
        "schema": "CREATE TABLE Customer_Orders (customer_id NUMBER); CREATE TABLE Customers (customer_code TEXT, customer_name TEXT, customer_id NUMBER); CREATE TABLE Customer_Addresses (customer_id NUMBER);"
      },
      {
        "question": "What are the phone numbers of all customers?",
        "query": "SELECT customer_phone FROM customers",
        "schema": "CREATE TABLE Department_Stores (store_phone TEXT); CREATE TABLE Customers (customer_address TEXT, customer_phone TEXT, customer_name TEXT, customer_id NUMBER, customer_code TEXT); CREATE TABLE Customer_Orders (customer_id NUMBER); CREATE TABLE Customer_Addresses (customer_id NUMBER); CREATE TABLE Suppliers (supplier_phone TEXT);"
      },
      {
        "question": "What are the phone numbers of all customers and suppliers?",
        "query": "SELECT customer_phone FROM customers UNION SELECT supplier_phone FROM suppliers",
        "schema": "CREATE TABLE Product_Suppliers (supplier_id NUMBER); CREATE TABLE Department_Stores (store_phone TEXT); CREATE TABLE Supplier_Addresses (supplier_id NUMBER); CREATE TABLE Suppliers (supplier_id NUMBER, supplier_phone TEXT, supplier_name TEXT); CREATE TABLE Customer_Addresses (customer_id NUMBER); CREATE TABLE Customer_Orders (customer_id NUMBER); CREATE TABLE Customers (customer_id NUMBER, customer_code TEXT, customer_name TEXT, customer_phone TEXT, customer_address TEXT);"
      }
    ],
    [
      {
        "question": "Which products were ordered more than three times?",
        "query": "SELECT * FROM order_items GROUP BY product_id HAVING count(*) > 3",
        "schema": "CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Order_Items (order_id NUMBER, order_item_id NUMBER, product_id NUMBER); CREATE TABLE Products (product_type_code TEXT, product_name TEXT, product_id NUMBER); CREATE TABLE Product_Suppliers (total_amount_purchased TEXT, product_id NUMBER); CREATE TABLE Customer_Orders (order_id NUMBER, order_status_code TEXT, order_date TIME, customer_id NUMBER);"
      },
      {
        "question": "Which products were purchased for a total amount of more than 80000?",
        "query": "SELECT * FROM product_suppliers GROUP BY product_id HAVING sum(total_amount_purchased) > 80000",
        "schema": "CREATE TABLE Customer_Orders (order_status_code TEXT, order_id NUMBER, order_date TIME, customer_id NUMBER); CREATE TABLE Product_Suppliers (product_id NUMBER, total_value_purchased NUMBER, total_amount_purchased TEXT); CREATE TABLE Products (product_id NUMBER, product_name TEXT, product_type_code TEXT, product_price NUMBER); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Order_Items (order_id NUMBER, order_item_id NUMBER, product_id NUMBER);"
      },
      {
        "question": "Find the ids of all products that were ordered more than three times or purchased for a total amount of more than 80000.",
        "query": "SELECT product_id FROM order_items GROUP BY product_id HAVING count(*) > 3 UNION SELECT product_id FROM product_suppliers GROUP BY product_id HAVING sum(total_amount_purchased) > 80000",
        "schema": "CREATE TABLE Product_Suppliers (supplier_id NUMBER, total_value_purchased NUMBER, product_id NUMBER, total_amount_purchased TEXT); CREATE TABLE Order_Items (order_id NUMBER, order_item_id NUMBER, product_id NUMBER); CREATE TABLE Customer_Orders (order_id NUMBER, order_status_code TEXT, customer_id NUMBER, order_date TIME); CREATE TABLE Suppliers (supplier_name TEXT, supplier_id NUMBER); CREATE TABLE Products (product_price NUMBER, product_name TEXT, product_id NUMBER, product_type_code TEXT); CREATE TABLE Customers (customer_id NUMBER);"
      }
    ],
    [
      {
        "question": "What are the ids and names of all products?",
        "query": "SELECT product_id , product_name FROM products",
        "schema": "CREATE TABLE Products (product_id NUMBER, product_name TEXT, product_type_code TEXT); CREATE TABLE Order_Items (product_id NUMBER); CREATE TABLE Customers (customer_name TEXT, customer_id NUMBER); CREATE TABLE Product_Suppliers (product_id NUMBER);"
      },
      {
        "question": "How about those with a price lower than 600?",
        "query": "SELECT product_id , product_name FROM products WHERE product_price < 600",
        "schema": "CREATE TABLE Products (product_id NUMBER, product_price NUMBER, product_name TEXT, product_type_code TEXT); CREATE TABLE Product_Suppliers (product_id NUMBER); CREATE TABLE Order_Items (product_id NUMBER); CREATE TABLE Customers (customer_name TEXT, customer_id NUMBER);"
      },
      {
        "question": "How about those with price above 600 or below 900?",
        "query": "SELECT product_id , product_name FROM products WHERE product_price < 600 OR product_price > 900",
        "schema": "CREATE TABLE Order_Items (product_id NUMBER); CREATE TABLE Products (product_type_code TEXT, product_name TEXT, product_price NUMBER, product_id NUMBER); CREATE TABLE Product_Suppliers (product_id NUMBER); CREATE TABLE Customers (customer_name TEXT, customer_id NUMBER);"
      }
    ],
    [
      {
        "question": "What are the ids of all suppliers?",
        "query": "SELECT supplier_id FROM product_suppliers",
        "schema": "CREATE TABLE Products (product_id NUMBER); CREATE TABLE Customers (customer_code TEXT, customer_id NUMBER); CREATE TABLE Department_Stores (dept_store_id NUMBER); CREATE TABLE Supplier_Addresses (address_id NUMBER, supplier_id NUMBER); CREATE TABLE Customer_Orders (order_id NUMBER, customer_id NUMBER); CREATE TABLE Suppliers (supplier_name TEXT, supplier_id NUMBER, supplier_phone TEXT); CREATE TABLE Product_Suppliers (product_id NUMBER, supplier_id NUMBER); CREATE TABLE Staff_Department_Assignments (department_id NUMBER); CREATE TABLE Customer_Addresses (customer_id NUMBER); CREATE TABLE Departments (department_id NUMBER);"
      },
      {
        "question": "What is the average of total amount purchased?",
        "query": "SELECT avg(total_amount_purchased) FROM product_suppliers",
        "schema": "CREATE TABLE Products (product_id NUMBER, product_price NUMBER); CREATE TABLE Departments (department_id NUMBER); CREATE TABLE Supplier_Addresses (supplier_id NUMBER, address_id NUMBER); CREATE TABLE Department_Stores (dept_store_id NUMBER); CREATE TABLE Customer_Addresses (customer_id NUMBER); CREATE TABLE Staff_Department_Assignments (department_id NUMBER); CREATE TABLE Product_Suppliers (total_value_purchased NUMBER, product_id NUMBER, total_amount_purchased TEXT, supplier_id NUMBER); CREATE TABLE Customers (customer_id NUMBER, customer_code TEXT); CREATE TABLE Customer_Orders (customer_id NUMBER, order_id NUMBER); CREATE TABLE Suppliers (supplier_name TEXT, supplier_id NUMBER, supplier_phone TEXT); CREATE TABLE Order_Items (product_id NUMBER, order_id NUMBER);"
      },
      {
        "question": "Find the id of suppliers whose average amount purchased for each product is above 50000 or below 30000.",
        "query": "SELECT supplier_id FROM product_suppliers GROUP BY supplier_id HAVING avg(total_amount_purchased) > 50000 OR avg(total_amount_purchased) < 30000",
        "schema": "CREATE TABLE Supplier_Addresses (address_id NUMBER, supplier_id NUMBER); CREATE TABLE Customers (customer_id NUMBER, customer_code TEXT); CREATE TABLE Department_Stores (dept_store_id NUMBER); CREATE TABLE Staff_Department_Assignments (department_id NUMBER); CREATE TABLE Customer_Orders (customer_id NUMBER, order_id NUMBER); CREATE TABLE Products (product_price NUMBER, product_id NUMBER); CREATE TABLE Suppliers (supplier_id NUMBER, supplier_phone TEXT, supplier_name TEXT); CREATE TABLE Departments (department_id NUMBER); CREATE TABLE Customer_Addresses (customer_id NUMBER); CREATE TABLE Order_Items (order_id NUMBER, product_id NUMBER); CREATE TABLE Product_Suppliers (supplier_id NUMBER, total_amount_purchased TEXT, product_id NUMBER, total_value_purchased NUMBER);"
      }
    ],
    [
      {
        "question": "How many products does each suppler supply?",
        "query": "SELECT count(*) FROM product_suppliers GROUP BY supplier_id",
        "schema": "CREATE TABLE Products (product_name TEXT, product_type_code TEXT, product_price NUMBER, product_id NUMBER); CREATE TABLE Suppliers (supplier_name TEXT, supplier_phone TEXT, supplier_id NUMBER); CREATE TABLE Supplier_Addresses (supplier_id NUMBER); CREATE TABLE Customers (customer_code TEXT, customer_id NUMBER, customer_name TEXT); CREATE TABLE Product_Suppliers (total_amount_purchased TEXT, supplier_id NUMBER, product_id NUMBER); CREATE TABLE Staff (staff_id NUMBER); CREATE TABLE Customer_Orders (order_id NUMBER, customer_id NUMBER);"
      },
      {
        "question": "Which suppler supplies the most products? Give me the supplier id.",
        "query": "SELECT supplier_id FROM product_suppliers GROUP BY supplier_id ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Customers (customer_name TEXT, customer_code TEXT, customer_id NUMBER); CREATE TABLE Staff (staff_id NUMBER); CREATE TABLE Product_Suppliers (total_amount_purchased TEXT, product_id NUMBER, supplier_id NUMBER); CREATE TABLE Customer_Orders (order_id NUMBER, customer_id NUMBER); CREATE TABLE Supplier_Addresses (supplier_id NUMBER); CREATE TABLE Suppliers (supplier_name TEXT, supplier_phone TEXT, supplier_id NUMBER); CREATE TABLE Products (product_name TEXT, product_price NUMBER, product_id NUMBER, product_type_code TEXT);"
      },
      {
        "question": "What are the average amount purchased and value purchased for this supplier.",
        "query": "SELECT avg(total_amount_purchased) , avg(total_value_purchased) FROM product_suppliers WHERE supplier_id = (SELECT supplier_id FROM product_suppliers GROUP BY supplier_id ORDER BY count(*) DESC LIMIT 1)",
        "schema": "CREATE TABLE Customer_Orders (customer_id NUMBER, order_id NUMBER); CREATE TABLE Order_Items (product_id NUMBER); CREATE TABLE Suppliers (supplier_phone TEXT, supplier_id NUMBER, supplier_name TEXT); CREATE TABLE Products (product_price NUMBER, product_type_code TEXT, product_name TEXT, product_id NUMBER); CREATE TABLE Supplier_Addresses (supplier_id NUMBER); CREATE TABLE Staff (staff_id NUMBER); CREATE TABLE Product_Suppliers (total_amount_purchased TEXT, total_value_purchased NUMBER, product_id NUMBER, supplier_id NUMBER); CREATE TABLE Customers (customer_name TEXT, customer_id NUMBER, customer_code TEXT);"
      }
    ],
    [
      {
        "question": "Show all the customer codes.",
        "query": "SELECT customer_code FROM customers",
        "schema": "CREATE TABLE Customers (customer_code TEXT, customer_name TEXT, customer_id NUMBER); CREATE TABLE Customer_Orders (customer_id NUMBER);"
      },
      {
        "question": "What is the largest code among those?",
        "query": "SELECT max(customer_code) FROM customers",
        "schema": "CREATE TABLE Customers (customer_id NUMBER, customer_name TEXT, customer_code TEXT); CREATE TABLE Customer_Orders (customer_id NUMBER);"
      },
      {
        "question": "Show me both the largest and smallest codes.",
        "query": "SELECT max(customer_code) , min(customer_code) FROM customers",
        "schema": "CREATE TABLE Customer_Orders (customer_id NUMBER); CREATE TABLE Customers (customer_name TEXT, customer_code TEXT, customer_id NUMBER);"
      }
    ],
    [
      {
        "question": "Find the information for the product \"keyboard\".",
        "query": "SELECT * FROM products WHERE product_name = \"keyboard\"",
        "schema": "CREATE TABLE Order_Items (product_id NUMBER); CREATE TABLE Products (product_price NUMBER, product_id NUMBER, product_name TEXT, product_type_code TEXT); CREATE TABLE Product_Suppliers (product_id NUMBER);"
      },
      {
        "question": "Return all the distinct customers who bought a keyboard.",
        "query": "SELECT DISTINCT * FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id JOIN products AS t4 ON t3.product_id = t4.product_id WHERE t4.product_name = \"keyboard\"",
        "schema": "CREATE TABLE Product_Suppliers (product_id NUMBER, total_value_purchased NUMBER, total_amount_purchased TEXT); CREATE TABLE Customer_Addresses (customer_id NUMBER); CREATE TABLE Customer_Orders (customer_id NUMBER, order_id NUMBER, order_status_code TEXT); CREATE TABLE Customers (customer_name TEXT, customer_id NUMBER, customer_code TEXT); CREATE TABLE Products (product_type_code TEXT, product_id NUMBER, product_price NUMBER, product_name TEXT); CREATE TABLE Order_Items (order_item_id NUMBER, order_id NUMBER, product_id NUMBER);"
      },
      {
        "question": "What are their names?",
        "query": "SELECT DISTINCT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id JOIN products AS t4 ON t3.product_id = t4.product_id WHERE t4.product_name = \"keyboard\"",
        "schema": "CREATE TABLE Customer_Addresses (customer_id NUMBER); CREATE TABLE Products (product_id NUMBER, product_name TEXT, product_price NUMBER, product_type_code TEXT); CREATE TABLE Customers (customer_id NUMBER, customer_name TEXT, customer_code TEXT); CREATE TABLE Product_Suppliers (product_id NUMBER, total_amount_purchased TEXT, total_value_purchased NUMBER); CREATE TABLE Customer_Orders (order_status_code TEXT, customer_id NUMBER, order_id NUMBER); CREATE TABLE Order_Items (order_item_id NUMBER, order_id NUMBER, product_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show the information for the product \"red jeans\".",
        "query": "SELECT * FROM products WHERE product_name = \"red jeans\"",
        "schema": "CREATE TABLE Order_Items (product_id NUMBER); CREATE TABLE Product_Suppliers (product_id NUMBER); CREATE TABLE Products (product_name TEXT, product_type_code TEXT, product_price NUMBER, product_id NUMBER); CREATE TABLE Customers (customer_id NUMBER);"
      },
      {
        "question": "Find all the distinct suppliers who supply red jeans.",
        "query": "SELECT DISTINCT * FROM suppliers AS t1 JOIN product_suppliers AS t2 ON t1.supplier_id = t2.supplier_id JOIN products AS t3 ON t2.product_id = t3.product_id WHERE t3.product_name = \"red jeans\"",
        "schema": "CREATE TABLE Products (product_id NUMBER, product_price NUMBER, product_type_code TEXT, product_name TEXT); CREATE TABLE Product_Suppliers (product_id NUMBER, supplier_id NUMBER); CREATE TABLE Suppliers (supplier_phone TEXT, supplier_id NUMBER, supplier_name TEXT); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Order_Items (product_id NUMBER);"
      },
      {
        "question": "What are their names and phone numbers?",
        "query": "SELECT DISTINCT t1.supplier_name , t1.supplier_phone FROM suppliers AS t1 JOIN product_suppliers AS t2 ON t1.supplier_id = t2.supplier_id JOIN products AS t3 ON t2.product_id = t3.product_id WHERE t3.product_name = \"red jeans\"",
        "schema": "CREATE TABLE Department_Stores (store_phone TEXT); CREATE TABLE Suppliers (supplier_phone TEXT, supplier_id NUMBER, supplier_name TEXT); CREATE TABLE Order_Items (product_id NUMBER); CREATE TABLE Products (product_name TEXT, product_price NUMBER, product_type_code TEXT, product_id NUMBER); CREATE TABLE Product_Suppliers (product_id NUMBER, supplier_id NUMBER); CREATE TABLE Customers (customer_id NUMBER, customer_phone TEXT);"
      }
    ],
    [
      {
        "question": "What are the highest and lowest prices of products?",
        "query": "SELECT max(product_price) , min(product_price) FROM products",
        "schema": "CREATE TABLE Products (product_id NUMBER, product_price NUMBER, product_type_code TEXT, product_name TEXT); CREATE TABLE Product_Suppliers (product_id NUMBER, total_value_purchased NUMBER);"
      },
      {
        "question": "What are the highest and lowest prices of products, grouped by product type?",
        "query": "SELECT max(product_price) , min(product_price) , product_type_code FROM products GROUP BY product_type_code",
        "schema": "CREATE TABLE Product_Suppliers (product_id NUMBER, total_value_purchased NUMBER); CREATE TABLE Products (product_name TEXT, product_price NUMBER, product_id NUMBER, product_type_code TEXT);"
      },
      {
        "question": "Sort the results by the product type.",
        "query": "SELECT max(product_price) , min(product_price) , product_type_code FROM products GROUP BY product_type_code ORDER BY product_type_code",
        "schema": "CREATE TABLE Product_Suppliers (product_id NUMBER, total_value_purchased NUMBER); CREATE TABLE Products (product_type_code TEXT, product_price NUMBER, product_name TEXT, product_id NUMBER);"
      }
    ],
    [
      {
        "question": "Find customer orders whose status is \"Cancelled\".",
        "query": "SELECT * FROM customer_orders WHERE order_status_code = \"Cancelled\"",
        "schema": "CREATE TABLE Customer_Orders (order_date TIME, order_id NUMBER, order_status_code TEXT, customer_id NUMBER); CREATE TABLE Order_Items (order_id NUMBER); CREATE TABLE Customers (customer_id NUMBER, customer_code TEXT);"
      },
      {
        "question": "List the order id, customer id for orders in Cancelled status.",
        "query": "SELECT order_id , customer_id FROM customer_orders WHERE order_status_code = \"Cancelled\"",
        "schema": "CREATE TABLE Order_Items (order_id NUMBER); CREATE TABLE Customer_Orders (order_id NUMBER, order_status_code TEXT, order_date TIME, customer_id NUMBER); CREATE TABLE Customers (customer_code TEXT, customer_id NUMBER);"
      },
      {
        "question": "Sort the results by the order date.",
        "query": "SELECT order_id , customer_id FROM customer_orders WHERE order_status_code = \"Cancelled\" ORDER BY order_date",
        "schema": "CREATE TABLE Customer_Orders (customer_id NUMBER, order_id NUMBER, order_status_code TEXT, order_date TIME); CREATE TABLE Order_Items (order_id NUMBER); CREATE TABLE Customers (customer_code TEXT, customer_id NUMBER);"
      }
    ],
    [
      {
        "question": "How many customers bought each product?",
        "query": "SELECT COUNT (DISTINCT t1.customer_id) FROM customer_orders AS t1 JOIN order_items AS t2 ON t1.order_id = t2.order_id JOIN products AS t3 ON t2.product_id = t3.product_id GROUP BY t3.product_id",
        "schema": "CREATE TABLE Customers (customer_code TEXT, payment_method_code TEXT, customer_id NUMBER); CREATE TABLE Order_Items (product_id NUMBER, order_id NUMBER, order_item_id NUMBER); CREATE TABLE Customer_Orders (customer_id NUMBER, order_status_code TEXT, order_id NUMBER); CREATE TABLE Suppliers (supplier_id NUMBER); CREATE TABLE Products (product_price NUMBER, product_id NUMBER, product_name TEXT, product_type_code TEXT); CREATE TABLE Product_Suppliers (supplier_id NUMBER, total_value_purchased NUMBER, total_amount_purchased TEXT, product_id NUMBER);"
      },
      {
        "question": "Which products were bought by at least two distinct customers?",
        "query": "SELECT * FROM customer_orders AS t1 JOIN order_items AS t2 ON t1.order_id = t2.order_id JOIN products AS t3 ON t2.product_id = t3.product_id GROUP BY t3.product_id HAVING COUNT (DISTINCT t1.customer_id) >= 2",
        "schema": "CREATE TABLE Products (product_price NUMBER, product_name TEXT, product_id NUMBER, product_type_code TEXT); CREATE TABLE Product_Suppliers (product_id NUMBER, total_amount_purchased TEXT, total_value_purchased NUMBER, supplier_id NUMBER); CREATE TABLE Customers (customer_id NUMBER, customer_code TEXT, payment_method_code TEXT); CREATE TABLE Order_Items (order_item_id NUMBER, order_id NUMBER, product_id NUMBER); CREATE TABLE Suppliers (supplier_id NUMBER); CREATE TABLE Customer_Orders (order_id NUMBER, customer_id NUMBER, order_status_code TEXT);"
      },
      {
        "question": "What are the product names?",
        "query": "SELECT DISTINCT t3.product_name FROM customer_orders AS t1 JOIN order_items AS t2 ON t1.order_id = t2.order_id JOIN products AS t3 ON t2.product_id = t3.product_id GROUP BY t3.product_id HAVING COUNT (DISTINCT t1.customer_id) >= 2",
        "schema": "CREATE TABLE Customers (payment_method_code TEXT, customer_code TEXT, customer_name TEXT, customer_id NUMBER); CREATE TABLE Customer_Orders (order_id NUMBER, order_status_code TEXT, customer_id NUMBER); CREATE TABLE Order_Items (product_id NUMBER, order_item_id NUMBER, order_id NUMBER); CREATE TABLE Product_Suppliers (total_amount_purchased TEXT, supplier_id NUMBER, total_value_purchased NUMBER, product_id NUMBER); CREATE TABLE Suppliers (supplier_id NUMBER); CREATE TABLE Products (product_type_code TEXT, product_name TEXT, product_id NUMBER, product_price NUMBER);"
      }
    ],
    [
      {
        "question": "Count the number of distinct products each customer ordered.",
        "query": "SELECT COUNT (t3.product_id) FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id GROUP BY t1.customer_id",
        "schema": "CREATE TABLE Order_Items (order_item_id NUMBER, order_id NUMBER, product_id NUMBER); CREATE TABLE Customer_Orders (order_status_code TEXT, order_id NUMBER, customer_id NUMBER); CREATE TABLE Products (product_name TEXT, product_id NUMBER, product_type_code TEXT); CREATE TABLE Customers (customer_code TEXT, customer_id NUMBER, customer_name TEXT); CREATE TABLE Product_Suppliers (product_id NUMBER);"
      },
      {
        "question": "Find customers who have bought at least three distinct products.",
        "query": "SELECT DISTINCT * FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id GROUP BY t1.customer_id HAVING COUNT (DISTINCT t3.product_id) >= 3",
        "schema": "CREATE TABLE Product_Suppliers (product_id NUMBER); CREATE TABLE Products (product_type_code TEXT, product_id NUMBER, product_name TEXT); CREATE TABLE Customer_Orders (customer_id NUMBER, order_status_code TEXT, order_id NUMBER); CREATE TABLE Order_Items (order_item_id NUMBER, product_id NUMBER, order_id NUMBER); CREATE TABLE Customers (customer_name TEXT, customer_code TEXT, customer_id NUMBER);"
      },
      {
        "question": "What are their names?",
        "query": "SELECT DISTINCT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id GROUP BY t1.customer_id HAVING COUNT (DISTINCT t3.product_id) >= 3",
        "schema": "CREATE TABLE Product_Suppliers (product_id NUMBER); CREATE TABLE Customers (customer_id NUMBER, customer_name TEXT, customer_code TEXT); CREATE TABLE Departments (department_name TEXT); CREATE TABLE Products (product_id NUMBER, product_type_code TEXT, product_name TEXT); CREATE TABLE Order_Items (product_id NUMBER, order_item_id NUMBER, order_id NUMBER); CREATE TABLE Customer_Orders (order_status_code TEXT, customer_id NUMBER, order_id NUMBER);"
      }
    ],
    [
      {
        "question": "What are the name and gender of each staff?",
        "query": "SELECT staff_name , staff_gender FROM staff",
        "schema": "CREATE TABLE Staff (staff_gender TEXT, staff_name TEXT, staff_id NUMBER); CREATE TABLE Staff_Department_Assignments (staff_id NUMBER);"
      },
      {
        "question": "What about the staff that has been assigned the job of Sales Person?",
        "query": "SELECT t1.staff_name , t1.staff_gender FROM staff AS t1 JOIN staff_department_assignments AS t2 ON t1.staff_id = t2.staff_id WHERE t2.job_title_code = \"Sales Person\"",
        "schema": "CREATE TABLE Staff_Department_Assignments (department_id NUMBER, staff_id NUMBER, job_title_code TEXT); CREATE TABLE Staff (staff_name TEXT, staff_id NUMBER, staff_gender TEXT); CREATE TABLE Departments (department_id NUMBER, department_name TEXT);"
      },
      {
        "question": "What about the staff who has been assigned the job of Sales Person but never Clerical Staff?",
        "query": "SELECT t1.staff_name , t1.staff_gender FROM staff AS t1 JOIN staff_department_assignments AS t2 ON t1.staff_id = t2.staff_id WHERE t2.job_title_code = \"Sales Person\" EXCEPT SELECT t1.staff_name , t1.staff_gender FROM staff AS t1 JOIN staff_department_assignments AS t2 ON t1.staff_id = t2.staff_id WHERE t2.job_title_code = \"Clerical Staff\"",
        "schema": "CREATE TABLE Staff_Department_Assignments (job_title_code TEXT, department_id NUMBER, staff_id NUMBER); CREATE TABLE Staff (staff_gender TEXT, staff_name TEXT, staff_id NUMBER); CREATE TABLE Departments (department_name TEXT, department_id NUMBER);"
      }
    ],
    [
      {
        "question": "What are the id and name of each customer?",
        "query": "SELECT customer_id , customer_name FROM customers",
        "schema": "CREATE TABLE Customer_Addresses (customer_id NUMBER); CREATE TABLE Customer_Orders (customer_id NUMBER, order_id NUMBER); CREATE TABLE Customers (customer_name TEXT, customer_code TEXT, customer_id NUMBER);"
      },
      {
        "question": "Only return those for customers whose address contains WY.",
        "query": "SELECT customer_id , customer_name FROM customers WHERE customer_address LIKE \"%WY%\"",
        "schema": "CREATE TABLE Addresses (address_details TEXT, address_id NUMBER); CREATE TABLE Customer_Addresses (customer_id NUMBER, address_id NUMBER); CREATE TABLE Customer_Orders (customer_id NUMBER, order_id NUMBER); CREATE TABLE Customers (customer_id NUMBER, customer_code TEXT, customer_address TEXT, customer_name TEXT);"
      },
      {
        "question": "Find the ids and names of customers whose address contains WY state and do not use credit cards for payment.",
        "query": "SELECT customer_id , customer_name FROM customers WHERE customer_address LIKE \"%WY%\" AND payment_method_code != \"Credit Card\"",
        "schema": "CREATE TABLE Customers (customer_id NUMBER, customer_name TEXT, customer_code TEXT, payment_method_code TEXT, customer_address TEXT); CREATE TABLE Customer_Orders (order_id NUMBER, customer_id NUMBER); CREATE TABLE Customer_Addresses (customer_id NUMBER, address_id NUMBER); CREATE TABLE Addresses (address_id NUMBER, address_details TEXT);"
      }
    ],
    [
      {
        "question": "Show me all the products.",
        "query": "SELECT * FROM products",
        "schema": "CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Product_Suppliers (product_id NUMBER); CREATE TABLE Order_Items (product_id NUMBER); CREATE TABLE Products (product_id NUMBER, product_name TEXT, product_type_code TEXT);"
      },
      {
        "question": "What is the average price of all products?",
        "query": "SELECT avg(product_price) FROM products",
        "schema": "CREATE TABLE Product_Suppliers (product_id NUMBER, total_value_purchased NUMBER); CREATE TABLE Order_Items (product_id NUMBER); CREATE TABLE Products (product_name TEXT, product_price NUMBER, product_id NUMBER, product_type_code TEXT); CREATE TABLE Customers (customer_id NUMBER);"
      },
      {
        "question": "What is the average price of all products whose type is Clothes.",
        "query": "SELECT avg(product_price) FROM products WHERE product_type_code = 'Clothes'",
        "schema": "CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Product_Suppliers (total_value_purchased NUMBER, product_id NUMBER); CREATE TABLE Products (product_name TEXT, product_price NUMBER, product_id NUMBER, product_type_code TEXT); CREATE TABLE Order_Items (product_id NUMBER);"
      }
    ]
  ],
  "mountain_photos": [
    [
      {
        "question": "Find camera lens whose focal length is longer than 15 mm.",
        "query": "SELECT * FROM camera_lens WHERE focal_length_mm > 15",
        "schema": "CREATE TABLE camera_lens (id NUMBER, focal_length_mm NUMBER, name TEXT); CREATE TABLE photos (camera_lens_id NUMBER);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT count(*) FROM camera_lens WHERE focal_length_mm > 15",
        "schema": "CREATE TABLE photos (camera_lens_id NUMBER); CREATE TABLE camera_lens (id NUMBER, name TEXT, focal_length_mm NUMBER);"
      }
    ],
    [
      {
        "question": "What are the brand and name of each camera lens?",
        "query": "SELECT brand , name FROM camera_lens",
        "schema": "CREATE TABLE photos (camera_lens_id NUMBER); CREATE TABLE camera_lens (name TEXT, brand TEXT, id NUMBER);"
      },
      {
        "question": "Sort the results in descending order of the lens' maximum aperture.",
        "query": "SELECT brand , name FROM camera_lens ORDER BY max_aperture DESC",
        "schema": "CREATE TABLE photos (camera_lens_id NUMBER); CREATE TABLE camera_lens (brand TEXT, name TEXT, max_aperture NUMBER, id NUMBER);"
      }
    ],
    [
      {
        "question": "Give me the information for all photos.",
        "query": "SELECT * FROM photos",
        "schema": "CREATE TABLE camera_lens (id NUMBER); CREATE TABLE photos (name TEXT, camera_lens_id NUMBER, id NUMBER, mountain_id NUMBER);"
      },
      {
        "question": "List the id, color scheme, and name for each.",
        "query": "SELECT id , color , name FROM photos",
        "schema": "CREATE TABLE camera_lens (id NUMBER, name TEXT); CREATE TABLE photos (name TEXT, id NUMBER, color TEXT, mountain_id NUMBER, camera_lens_id NUMBER);"
      }
    ],
    [
      {
        "question": "What is the height of each mountain?",
        "query": "SELECT max(height) , avg(height) FROM mountain",
        "schema": "CREATE TABLE camera_lens (id NUMBER); CREATE TABLE mountain (name TEXT, Height NUMBER, Prominence NUMBER, id NUMBER);"
      },
      {
        "question": "What is the maximum height?",
        "query": "SELECT max(height) FROM mountain",
        "schema": "CREATE TABLE camera_lens (id NUMBER); CREATE TABLE mountain (id NUMBER, Prominence NUMBER, Height NUMBER, name TEXT);"
      },
      {
        "question": "Also show the average height.",
        "query": "SELECT max(height) , avg(height) FROM mountain",
        "schema": "CREATE TABLE camera_lens (id NUMBER); CREATE TABLE mountain (name TEXT, id NUMBER, Prominence NUMBER, Height NUMBER);"
      }
    ],
    [
      {
        "question": "What is the prominence of each mountain?",
        "query": "SELECT prominence FROM mountain",
        "schema": "CREATE TABLE camera_lens (id NUMBER, name TEXT); CREATE TABLE mountain (Height NUMBER, Prominence NUMBER, id NUMBER, name TEXT);"
      },
      {
        "question": "What is the prominence of mountains in country 'Morocco'?",
        "query": "SELECT prominence FROM mountain WHERE country = 'Morocco'",
        "schema": "CREATE TABLE camera_lens (name TEXT, id NUMBER); CREATE TABLE mountain (name TEXT, Prominence NUMBER, Country TEXT, id NUMBER, Height NUMBER);"
      },
      {
        "question": "What is the average of them?",
        "query": "SELECT avg(prominence) FROM mountain WHERE country = 'Morocco'",
        "schema": "CREATE TABLE mountain (name TEXT, id NUMBER, Prominence NUMBER, Height NUMBER, Country TEXT); CREATE TABLE camera_lens (id NUMBER, name TEXT);"
      }
    ],
    [
      {
        "question": "Show all the mountains.",
        "query": "SELECT * FROM mountain",
        "schema": "CREATE TABLE camera_lens (name TEXT, id NUMBER); CREATE TABLE mountain (id NUMBER, name TEXT, Range TEXT); CREATE TABLE photos (mountain_id NUMBER);"
      },
      {
        "question": "Which mountains do not belong to the range 'Aberdare Range'?",
        "query": "SELECT * FROM mountain WHERE RANGE != 'Aberdare Range'",
        "schema": "CREATE TABLE camera_lens (id NUMBER, name TEXT); CREATE TABLE photos (mountain_id NUMBER); CREATE TABLE mountain (id NUMBER, name TEXT, Range TEXT);"
      },
      {
        "question": "What are those mountains' name, height and prominence?",
        "query": "SELECT name , height , prominence FROM mountain WHERE RANGE != 'Aberdare Range'",
        "schema": "CREATE TABLE mountain (Height NUMBER, Prominence NUMBER, Range TEXT, id NUMBER, name TEXT); CREATE TABLE camera_lens (id NUMBER, name TEXT); CREATE TABLE photos (mountain_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show the id and name of all mountains.",
        "query": "SELECT id , name FROM mountain",
        "schema": "CREATE TABLE camera_lens (id NUMBER, name TEXT); CREATE TABLE photos (mountain_id NUMBER); CREATE TABLE mountain (id NUMBER, name TEXT);"
      },
      {
        "question": "Show the id and name of all the mountains that have photos.",
        "query": "SELECT t1.id , t1.name FROM mountain AS t1 JOIN photos AS t2 ON t1.id = t2.mountain_id",
        "schema": "CREATE TABLE camera_lens (name TEXT, id NUMBER); CREATE TABLE mountain (name TEXT, id NUMBER); CREATE TABLE photos (id NUMBER, mountain_id NUMBER, name TEXT);"
      },
      {
        "question": "What are the id and name of mountains that have photos and heights above 4000?",
        "query": "SELECT t1.id , t1.name FROM mountain AS t1 JOIN photos AS t2 ON t1.id = t2.mountain_id WHERE t1.height > 4000",
        "schema": "CREATE TABLE mountain (Prominence NUMBER, Height NUMBER, name TEXT, id NUMBER); CREATE TABLE camera_lens (id NUMBER, name TEXT); CREATE TABLE photos (id NUMBER, mountain_id NUMBER, name TEXT);"
      }
    ],
    [
      {
        "question": "Show the ids and names of all mountains.",
        "query": "SELECT id , name FROM mountain",
        "schema": "CREATE TABLE mountain (id NUMBER, name TEXT); CREATE TABLE camera_lens (id NUMBER, name TEXT); CREATE TABLE photos (id NUMBER, mountain_id NUMBER);"
      },
      {
        "question": "Show the ids and names of those that have photos.",
        "query": "SELECT t1.id , t1.name FROM mountain AS t1 JOIN photos AS t2 ON t1.id = t2.mountain_id",
        "schema": "CREATE TABLE mountain (name TEXT, id NUMBER); CREATE TABLE camera_lens (id NUMBER, name TEXT); CREATE TABLE photos (id NUMBER, mountain_id NUMBER, name TEXT);"
      },
      {
        "question": "Which ones have at least 2 photos?",
        "query": "SELECT t1.id , t1.name FROM mountain AS t1 JOIN photos AS t2 ON t1.id = t2.mountain_id GROUP BY t1.id HAVING count(*) >= 2",
        "schema": "CREATE TABLE mountain (name TEXT, id NUMBER); CREATE TABLE camera_lens (name TEXT, id NUMBER); CREATE TABLE photos (id NUMBER, name TEXT, mountain_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show the id of the camera lens that has taken picture of each mountain.",
        "query": "SELECT camera_lens_id FROM photos",
        "schema": "CREATE TABLE photos (id NUMBER, camera_lens_id NUMBER, mountain_id NUMBER); CREATE TABLE camera_lens (name TEXT, id NUMBER); CREATE TABLE mountain (name TEXT, id NUMBER);"
      },
      {
        "question": "Which one has taken pictures of the most mountains.",
        "query": "SELECT camera_lens_id FROM photos GROUP BY camera_lens_id ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE camera_lens (id NUMBER, name TEXT); CREATE TABLE photos (camera_lens_id NUMBER, mountain_id NUMBER, id NUMBER); CREATE TABLE mountain (name TEXT, id NUMBER);"
      },
      {
        "question": "What is the name of this camera?",
        "query": "SELECT t2.name FROM photos AS t1 JOIN camera_lens AS t2 ON t1.camera_lens_id = t2.id GROUP BY t2.id ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE photos (id NUMBER, mountain_id NUMBER, name TEXT, camera_lens_id NUMBER); CREATE TABLE camera_lens (name TEXT, id NUMBER); CREATE TABLE mountain (id NUMBER, name TEXT);"
      }
    ],
    [
      {
        "question": "For each photo, show the id of the camera lens that has taken it.",
        "query": "SELECT camera_lens_id FROM photos",
        "schema": "CREATE TABLE photos (camera_lens_id NUMBER, name TEXT, id NUMBER); CREATE TABLE camera_lens (name TEXT, id NUMBER);"
      },
      {
        "question": "Which photos were taken with the lens brand 'Sigma' or 'Olympus'?",
        "query": "SELECT * FROM camera_lens AS t1 JOIN photos AS t2 ON t2.camera_lens_id = t1.id WHERE t1.brand = 'Sigma' OR t1.brand = 'Olympus'",
        "schema": "CREATE TABLE photos (camera_lens_id NUMBER, name TEXT, id NUMBER); CREATE TABLE camera_lens (brand TEXT, name TEXT, id NUMBER);"
      },
      {
        "question": "Give me the photo names.",
        "query": "SELECT t2.name FROM camera_lens AS t1 JOIN photos AS t2 ON t2.camera_lens_id = t1.id WHERE t1.brand = 'Sigma' OR t1.brand = 'Olympus'",
        "schema": "CREATE TABLE camera_lens (name TEXT, brand TEXT, id NUMBER); CREATE TABLE photos (name TEXT, camera_lens_id NUMBER, id NUMBER);"
      }
    ],
    [
      {
        "question": "What is the brand of each camera lens?",
        "query": "SELECT brand FROM camera_lens",
        "schema": "CREATE TABLE photos (camera_lens_id NUMBER); CREATE TABLE camera_lens (brand TEXT, name TEXT, id NUMBER);"
      },
      {
        "question": "How many different kinds are there?",
        "query": "SELECT count(DISTINCT brand) FROM camera_lens",
        "schema": "CREATE TABLE camera_lens (id NUMBER, brand TEXT, name TEXT); CREATE TABLE photos (camera_lens_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show the id of all the camera lenses used for taking photos.",
        "query": "SELECT camera_lens_id FROM photos",
        "schema": "CREATE TABLE photos (camera_lens_id NUMBER, id NUMBER); CREATE TABLE camera_lens (name TEXT, id NUMBER);"
      },
      {
        "question": "Which camera lenses were not used for taking any photos?",
        "query": "SELECT * FROM camera_lens WHERE id NOT IN ( SELECT camera_lens_id FROM photos )",
        "schema": "CREATE TABLE camera_lens (name TEXT, id NUMBER); CREATE TABLE photos (camera_lens_id NUMBER, id NUMBER);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT count(*) FROM camera_lens WHERE id NOT IN ( SELECT camera_lens_id FROM photos )",
        "schema": "CREATE TABLE photos (camera_lens_id NUMBER, id NUMBER); CREATE TABLE camera_lens (name TEXT, id NUMBER);"
      }
    ],
    [
      {
        "question": "Which mountains are in the country 'Ethiopia'?",
        "query": "SELECT * FROM mountain WHERE country = 'Ethiopia'",
        "schema": "CREATE TABLE mountain (Country TEXT, name TEXT, id NUMBER, Range TEXT);"
      },
      {
        "question": "Which camera lenses are used to take photos of these mountains? Return the camera lens ids.",
        "query": "SELECT t2.camera_lens_id FROM mountain AS t1 JOIN photos AS t2 ON t1.id = t2.mountain_id WHERE t1.country = 'Ethiopia'",
        "schema": "CREATE TABLE mountain (Range TEXT, name TEXT, id NUMBER, Country TEXT); CREATE TABLE camera_lens (name TEXT, id NUMBER); CREATE TABLE photos (mountain_id NUMBER, id NUMBER, camera_lens_id NUMBER);"
      },
      {
        "question": "How many distinct kinds of camera lenses are there, among these?",
        "query": "SELECT count(DISTINCT t2.camera_lens_id) FROM mountain AS t1 JOIN photos AS t2 ON t1.id = t2.mountain_id WHERE t1.country = 'Ethiopia'",
        "schema": "CREATE TABLE camera_lens (name TEXT, id NUMBER); CREATE TABLE mountain (name TEXT, Range TEXT, id NUMBER, Country TEXT); CREATE TABLE photos (id NUMBER, mountain_id NUMBER, camera_lens_id NUMBER);"
      }
    ],
    [
      {
        "question": "Which mountains are in the range 'Toubkal Atlas'?",
        "query": "SELECT * FROM mountain WHERE RANGE = 'Toubkal Atlas'",
        "schema": "CREATE TABLE mountain (name TEXT, id NUMBER, Range TEXT); CREATE TABLE photos (mountain_id NUMBER);"
      },
      {
        "question": "Find the brands of lenses that took a picture of mountains with range 'Toubkal Atlas'",
        "query": "SELECT t3.brand FROM mountain AS t1 JOIN photos AS t2 ON t1.id = t2.mountain_id JOIN camera_lens AS t3 ON t2.camera_lens_id = t3.id WHERE t1.range = 'Toubkal Atlas'",
        "schema": "CREATE TABLE camera_lens (name TEXT, id NUMBER, brand TEXT); CREATE TABLE mountain (name TEXT, Range TEXT, id NUMBER); CREATE TABLE photos (name TEXT, camera_lens_id NUMBER, mountain_id NUMBER, id NUMBER);"
      },
      {
        "question": "Of these, which ones have also taken a picture of mountains with range 'Lasta Massif'",
        "query": "SELECT t3.brand FROM mountain AS t1 JOIN photos AS t2 ON t1.id = t2.mountain_id JOIN camera_lens AS t3 ON t2.camera_lens_id = t3.id WHERE t1.range = 'Toubkal Atlas' INTERSECT SELECT t3.brand FROM mountain AS t1 JOIN photos AS t2 ON t1.id = t2.mountain_id JOIN camera_lens AS t3 ON t2.camera_lens_id = t3.id WHERE t1.range = 'Lasta Massif'",
        "schema": "CREATE TABLE photos (name TEXT, camera_lens_id NUMBER, id NUMBER, mountain_id NUMBER); CREATE TABLE camera_lens (name TEXT, id NUMBER, brand TEXT); CREATE TABLE mountain (Range TEXT, id NUMBER, name TEXT);"
      }
    ],
    [
      {
        "question": "Which pictures are taken by a lens of brand 'Sigma'?",
        "query": "SELECT * FROM photos AS t2 JOIN camera_lens AS t3 ON t2.camera_lens_id = t3.id WHERE t3.brand = 'Sigma'",
        "schema": "CREATE TABLE photos (camera_lens_id NUMBER, name TEXT, id NUMBER); CREATE TABLE camera_lens (name TEXT, brand TEXT, id NUMBER);"
      },
      {
        "question": "Show the name and prominence of the mountains whose picture is not taken by a lens of brand 'Sigma'.",
        "query": "SELECT name , prominence FROM mountain EXCEPT SELECT t1.name , t1.prominence FROM mountain AS t1 JOIN photos AS t2 ON t1.id = t2.mountain_id JOIN camera_lens AS t3 ON t2.camera_lens_id = t3.id WHERE t3.brand = 'Sigma'",
        "schema": "CREATE TABLE mountain (Prominence NUMBER, name TEXT, id NUMBER, Height NUMBER, Range TEXT); CREATE TABLE photos (camera_lens_id NUMBER, mountain_id NUMBER, name TEXT, id NUMBER); CREATE TABLE camera_lens (brand TEXT, id NUMBER, name TEXT);"
      }
    ],
    [
      {
        "question": "Show the name of each camera lens.",
        "query": "SELECT name FROM camera_lens",
        "schema": "CREATE TABLE camera_lens (name TEXT, id NUMBER); CREATE TABLE photos (camera_lens_id NUMBER, name TEXT);"
      },
      {
        "question": "Find the camera lens names containing substring \"Digital\".",
        "query": "SELECT name FROM camera_lens WHERE name LIKE \"%Digital%\"",
        "schema": "CREATE TABLE photos (name TEXT, camera_lens_id NUMBER); CREATE TABLE camera_lens (id NUMBER, name TEXT);"
      }
    ]
  ],
  "insurance_policies": [
    [
      {
        "question": "Tell me claim 143's settled amount.",
        "query": "SELECT amount_settled FROM claims WHERE claim_id = 143",
        "schema": "CREATE TABLE Claims (Date_Claim_Settled TIME, Amount_Settled NUMBER, Amount_Claimed NUMBER, Claim_ID NUMBER); CREATE TABLE Payments (Settlement_ID NUMBER); CREATE TABLE Customer_Policies (Policy_ID NUMBER); CREATE TABLE Customers (Customer_ID NUMBER); CREATE TABLE Settlements (Amount_Claimed NUMBER, Amount_Settled NUMBER, Date_Claim_Settled TIME, Claim_ID NUMBER);"
      },
      {
        "question": "Tell me its number of settlements.",
        "query": "SELECT count(*) FROM claims AS t1 JOIN settlements AS t2 ON t1.claim_id = t2.claim_id WHERE t1.claim_id = 143",
        "schema": "CREATE TABLE Claims (Amount_Claimed NUMBER, Claim_ID NUMBER, Date_Claim_Settled TIME, Amount_Settled NUMBER); CREATE TABLE Customers (Customer_ID NUMBER); CREATE TABLE Settlements (Amount_Claimed NUMBER, Settlement_ID NUMBER, Amount_Settled NUMBER, Date_Claim_Settled TIME, Claim_ID NUMBER); CREATE TABLE Customer_Policies (Policy_ID NUMBER); CREATE TABLE Payments (Settlement_ID NUMBER);"
      },
      {
        "question": "Which claims caused more than 2 settlements or have the maximum claim value? List the date the claim was made and the claim id.",
        "query": "SELECT t1.date_claim_made , t1.claim_id FROM claims AS t1 JOIN settlements AS t2 ON t1.claim_id = t2.claim_id GROUP BY t1.claim_id HAVING count(*) > 2 UNION SELECT t1.date_claim_made , t1.claim_id FROM claims AS t1 JOIN settlements AS t2 ON t1.claim_id = t2.claim_id WHERE t1.amount_claimed = ( SELECT max(amount_claimed) FROM claims )",
        "schema": "CREATE TABLE Payments (Settlement_ID NUMBER); CREATE TABLE Claims (Claim_ID NUMBER, Amount_Settled NUMBER, Policy_ID NUMBER, Date_Claim_Settled TIME, Date_Claim_Made TIME, Amount_Claimed NUMBER); CREATE TABLE Customer_Policies (Policy_ID NUMBER); CREATE TABLE Settlements (Date_Claim_Settled TIME, Claim_ID NUMBER, Amount_Claimed NUMBER, Amount_Settled NUMBER, Settlement_ID NUMBER, Date_Claim_Made TIME); CREATE TABLE Customers (Customer_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Tell me the claims id of the customer named Ellsworth Paucek.",
        "query": "SELECT t3.claim_id FROM customers AS t1 JOIN customer_policies AS t2 ON t1.customer_id = t2.customer_id JOIN claims AS t3 ON t2.policy_id = t3.policy_id WHERE t1.customer_details = \"Ellsworth Paucek\"",
        "schema": "CREATE TABLE Customers (Customer_Details TEXT, Customer_ID NUMBER); CREATE TABLE Claims (Policy_ID NUMBER, Claim_ID NUMBER); CREATE TABLE Customer_Policies (Policy_ID NUMBER, Customer_ID NUMBER); CREATE TABLE Settlements (Claim_ID NUMBER);"
      },
      {
        "question": "Tell me the number of policies of the customer named Ellsworth Paucek.",
        "query": "SELECT count(*) FROM customers AS t1 JOIN customer_policies AS t2 ON t1.customer_id = t2.customer_id WHERE t1.customer_details = \"Ellsworth Paucek\"",
        "schema": "CREATE TABLE Customers (Customer_Details TEXT, Customer_ID NUMBER); CREATE TABLE Settlements (Claim_ID NUMBER); CREATE TABLE Claims (Policy_ID NUMBER, Claim_ID NUMBER); CREATE TABLE Customer_Policies (Policy_ID NUMBER, Customer_ID NUMBER);"
      },
      {
        "question": "Which customer had at least 2 policies but did not file any claims? List the customer details and id.",
        "query": "SELECT t1.customer_details , t1.customer_id FROM customers AS t1 JOIN customer_policies AS t2 ON t1.customer_id = t2.customer_id GROUP BY t1.customer_id HAVING count(*) >= 2 EXCEPT SELECT t1.customer_details , t1.customer_id FROM customers AS t1 JOIN customer_policies AS t2 ON t1.customer_id = t2.customer_id JOIN claims AS t3 ON t2.policy_id = t3.policy_id",
        "schema": "CREATE TABLE Customer_Policies (Policy_Type_Code TEXT, Customer_ID NUMBER, Policy_ID NUMBER); CREATE TABLE Customers (Customer_ID NUMBER, Customer_Details TEXT); CREATE TABLE Claims (Policy_ID NUMBER, Claim_ID NUMBER); CREATE TABLE Settlements (Claim_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What is the claim settled date of the claim with id 571.",
        "query": "SELECT date_claim_settled FROM claims WHERE claim_id = 571",
        "schema": "CREATE TABLE Claims (Claim_ID NUMBER, Amount_Settled NUMBER, Policy_ID NUMBER, Date_Claim_Settled TIME, Date_Claim_Made TIME); CREATE TABLE Settlements (Claim_ID NUMBER, Date_Claim_Settled TIME, Date_Claim_Made TIME);"
      },
      {
        "question": "What is its settlement amount?",
        "query": "SELECT amount_settled FROM claims WHERE claim_id = 571",
        "schema": "CREATE TABLE Settlements (Settlement_ID NUMBER, Amount_Settled NUMBER, Date_Claim_Settled TIME, Claim_ID NUMBER, Date_Claim_Made TIME, Amount_Claimed NUMBER); CREATE TABLE Claims (Amount_Settled NUMBER, Date_Claim_Settled TIME, Date_Claim_Made TIME, Policy_ID NUMBER, Amount_Claimed NUMBER, Claim_ID NUMBER);"
      },
      {
        "question": "Among all the claims, what is the settlement amount of the claim with the largest claim amount? List both the settlement amount and claim amount",
        "query": "SELECT amount_settled , amount_claimed FROM claims ORDER BY amount_claimed DESC LIMIT 1",
        "schema": "CREATE TABLE Settlements (Settlement_ID NUMBER, Amount_Claimed NUMBER, Amount_Settled NUMBER, Date_Claim_Made TIME, Date_Claim_Settled TIME, Claim_ID NUMBER); CREATE TABLE Claims (Policy_ID NUMBER, Amount_Claimed NUMBER, Amount_Settled NUMBER, Date_Claim_Made TIME, Claim_ID NUMBER, Date_Claim_Settled TIME);"
      }
    ],
    [
      {
        "question": "Tell me the claims id of the customer named Dr. Diana Rathk.",
        "query": "SELECT t3.claim_id FROM customers AS t1 JOIN customer_policies AS t2 ON t1.customer_id = t2.customer_id JOIN claims AS t3 ON t2.policy_id = t3.policy_id WHERE t1.customer_details = \"Dr. Diana Rathk\"",
        "schema": "CREATE TABLE Settlements (Claim_ID NUMBER); CREATE TABLE Customer_Policies (Customer_ID NUMBER, Policy_ID NUMBER); CREATE TABLE Customers (Customer_ID NUMBER, Customer_Details TEXT); CREATE TABLE Claims (Claim_ID NUMBER, Policy_ID NUMBER);"
      },
      {
        "question": "What was their claim amount?",
        "query": "SELECT t3.amount_claimed FROM customers AS t1 JOIN customer_policies AS t2 ON t1.customer_id = t2.customer_id JOIN claims AS t3 ON t2.policy_id = t3.policy_id WHERE t1.customer_details = \"Dr. Diana Rathk\"",
        "schema": "CREATE TABLE Settlements (Claim_ID NUMBER); CREATE TABLE Customer_Policies (Customer_ID NUMBER, Policy_ID NUMBER); CREATE TABLE Claims (Claim_ID NUMBER, Amount_Claimed NUMBER, Amount_Settled NUMBER, Policy_ID NUMBER); CREATE TABLE Customers (Customer_ID NUMBER, Customer_Details TEXT);"
      },
      {
        "question": "Among all the claims, what is the amount claimed in the claim with the least amount settled? List both the settlement amount and claim amount",
        "query": "SELECT amount_settled , amount_claimed FROM claims ORDER BY amount_settled ASC LIMIT 1",
        "schema": "CREATE TABLE Claims (Policy_ID NUMBER, Claim_ID NUMBER, Amount_Settled NUMBER, Amount_Claimed NUMBER); CREATE TABLE Customer_Policies (Customer_ID NUMBER, Policy_ID NUMBER); CREATE TABLE Settlements (Amount_Claimed NUMBER, Amount_Settled NUMBER, Customer_Policy_ID NUMBER, Claim_ID NUMBER); CREATE TABLE Customers (Customer_ID NUMBER, Customer_Details TEXT);"
      }
    ],
    [
      {
        "question": "Among all the claims, which one has the largest claim amount?",
        "query": "SELECT claim_id FROM claims ORDER BY amount_settled ASC LIMIT 1",
        "schema": "CREATE TABLE Settlements (Claim_ID NUMBER, Amount_Claimed NUMBER); CREATE TABLE Claims (Policy_ID NUMBER, Claim_ID NUMBER, Amount_Settled NUMBER, Amount_Claimed NUMBER);"
      },
      {
        "question": "Which one has the least claim amount?",
        "query": "SELECT claim_id FROM claims ORDER BY amount_settled DESC LIMIT 1",
        "schema": "CREATE TABLE Settlements (Amount_Settled NUMBER, Claim_ID NUMBER, Amount_Claimed NUMBER); CREATE TABLE Claims (Amount_Settled NUMBER, Policy_ID NUMBER, Claim_ID NUMBER, Amount_Claimed NUMBER);"
      },
      {
        "question": "Which claims have a claimed amount larger than the average? Tell me the date the claim was made and the date it was settled.",
        "query": "SELECT date_claim_made , date_claim_settled FROM claims WHERE amount_claimed > ( SELECT avg(amount_claimed) FROM claims )",
        "schema": "CREATE TABLE Settlements (Date_Claim_Settled TIME, Amount_Claimed NUMBER, Claim_ID NUMBER, Date_Claim_Made TIME, Amount_Settled NUMBER); CREATE TABLE Claims (Date_Claim_Made TIME, Date_Claim_Settled TIME, Policy_ID NUMBER, Claim_ID NUMBER, Amount_Claimed NUMBER, Amount_Settled NUMBER);"
      }
    ],
    [
      {
        "question": "Tell me claim 563's claim amount.",
        "query": "SELECT amount_claimed FROM claims WHERE claim_id = 563",
        "schema": "CREATE TABLE Settlements (Claim_ID NUMBER, Amount_Claimed NUMBER); CREATE TABLE Claims (Policy_ID NUMBER, Claim_ID NUMBER, Amount_Settled NUMBER, Amount_Claimed NUMBER);"
      },
      {
        "question": "How about that of claim 621?",
        "query": "SELECT amount_claimed FROM claims WHERE claim_id = 621",
        "schema": "CREATE TABLE Claims (Amount_Settled NUMBER, Claim_ID NUMBER, Amount_Claimed NUMBER, Policy_ID NUMBER); CREATE TABLE Settlements (Claim_ID NUMBER, Amount_Claimed NUMBER);"
      },
      {
        "question": "Among all the claims, which settlements have a claimed amount that is no more than the average? List the claim start date.",
        "query": "SELECT date_claim_made FROM claims WHERE amount_settled <= ( SELECT avg(amount_settled) FROM claims )",
        "schema": "CREATE TABLE Claims (Amount_Settled NUMBER, Claim_ID NUMBER, Date_Claim_Made TIME, Amount_Claimed NUMBER, Date_Claim_Settled TIME, Policy_ID NUMBER); CREATE TABLE Settlements (Claim_ID NUMBER, Date_Claim_Settled TIME, Date_Claim_Made TIME, Amount_Settled NUMBER, Amount_Claimed NUMBER, Settlement_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Tell me claim 621's claim amount.",
        "query": "SELECT amount_claimed FROM claims WHERE claim_id = 621",
        "schema": "CREATE TABLE Customer_Policies (Policy_ID NUMBER); CREATE TABLE Claims (Claim_ID NUMBER, Policy_ID NUMBER, Amount_Settled NUMBER, Amount_Claimed NUMBER); CREATE TABLE Customers (Customer_ID NUMBER); CREATE TABLE Settlements (Amount_Claimed NUMBER, Claim_ID NUMBER);"
      },
      {
        "question": "How about its settlement claim amount?",
        "query": "SELECT t2.amount_claimed FROM claims AS t1 JOIN settlements AS t2 ON t1.claim_id = t2.claim_id WHERE t1.claim_id = 621",
        "schema": "CREATE TABLE Customer_Policies (Policy_ID NUMBER); CREATE TABLE Claims (Amount_Claimed NUMBER, Policy_ID NUMBER, Amount_Settled NUMBER, Claim_ID NUMBER); CREATE TABLE Settlements (Settlement_ID NUMBER, Amount_Claimed NUMBER, Claim_ID NUMBER, Amount_Settled NUMBER); CREATE TABLE Customers (Customer_ID NUMBER);"
      },
      {
        "question": "How many settlements does each claim correspond to? List the claim id and the number of settlements.",
        "query": "SELECT t1.claim_id , count(*) FROM claims AS t1 JOIN settlements AS t2 ON t1.claim_id = t2.claim_id GROUP BY t1.claim_id",
        "schema": "CREATE TABLE Claims (Policy_ID NUMBER, Claim_ID NUMBER, Amount_Settled NUMBER, Amount_Claimed NUMBER); CREATE TABLE Customer_Policies (Policy_ID NUMBER); CREATE TABLE Customers (Customer_ID NUMBER); CREATE TABLE Settlements (Amount_Claimed NUMBER, Settlement_ID NUMBER, Claim_ID NUMBER, Amount_Settled NUMBER);"
      }
    ],
    [
      {
        "question": "Tell me the number of settlements of claim 957",
        "query": "SELECT count(*) FROM claims AS t1 JOIN settlements AS t2 ON t1.claim_id = t2.claim_id WHERE t1.claim_id = 957",
        "schema": "CREATE TABLE Payments (Settlement_ID NUMBER); CREATE TABLE Settlements (Settlement_ID NUMBER, Claim_ID NUMBER, Amount_Claimed NUMBER); CREATE TABLE Claims (Amount_Settled NUMBER, Claim_ID NUMBER);"
      },
      {
        "question": "How about the settlement claim amount?",
        "query": "SELECT t2.amount_claimed FROM claims AS t1 JOIN settlements AS t2 ON t1.claim_id = t2.claim_id WHERE t1.claim_id = 957",
        "schema": "CREATE TABLE Payments (Settlement_ID NUMBER); CREATE TABLE Settlements (Claim_ID NUMBER, Amount_Settled NUMBER, Settlement_ID NUMBER, Amount_Claimed NUMBER); CREATE TABLE Claims (Amount_Claimed NUMBER, Claim_ID NUMBER, Amount_Settled NUMBER);"
      },
      {
        "question": "Which claim incurred the most number of settlements? List the claim id, the date the claim was made, and the number",
        "query": "SELECT t1.claim_id , t1.date_claim_made , count(*) FROM claims AS t1 JOIN settlements AS t2 ON t1.claim_id = t2.claim_id GROUP BY t1.claim_id ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Payments (Settlement_ID NUMBER); CREATE TABLE Claims (Amount_Claimed NUMBER, Amount_Settled NUMBER, Claim_ID NUMBER, Date_Claim_Settled TIME, Date_Claim_Made TIME); CREATE TABLE Settlements (Amount_Settled NUMBER, Date_Claim_Settled TIME, Claim_ID NUMBER, Date_Claim_Made TIME, Amount_Claimed NUMBER, Settlement_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Tell me the settlement amount of settlement 564.",
        "query": "SELECT amount_settled FROM settlements WHERE settlement_id = 564",
        "schema": "CREATE TABLE Settlements (Amount_Claimed NUMBER, Settlement_ID NUMBER, Amount_Settled NUMBER); CREATE TABLE Claims (Amount_Settled NUMBER);"
      },
      {
        "question": "What is the date on which the claim was made?",
        "query": "SELECT date_claim_made FROM settlements WHERE settlement_id = 564",
        "schema": "CREATE TABLE Claims (Amount_Settled NUMBER, Claim_ID NUMBER, Date_Claim_Made TIME, Date_Claim_Settled TIME, Amount_Claimed NUMBER); CREATE TABLE Settlements (Amount_Settled NUMBER, Claim_ID NUMBER, Amount_Claimed NUMBER, Settlement_ID NUMBER, Date_Claim_Settled TIME, Date_Claim_Made TIME);"
      },
      {
        "question": "How many settlements were made on the claim with the most recent claim settlement date? Tell me the number and the claim id.",
        "query": "SELECT count(*) , t1.claim_id FROM claims AS t1 JOIN settlements AS t2 ON t1.claim_id = t2.claim_id GROUP BY t1.claim_id ORDER BY t1.date_claim_settled DESC LIMIT 1",
        "schema": "CREATE TABLE Settlements (Date_Claim_Settled TIME, Amount_Settled NUMBER, Settlement_ID NUMBER, Claim_ID NUMBER, Amount_Claimed NUMBER, Date_Claim_Made TIME); CREATE TABLE Claims (Amount_Claimed NUMBER, Amount_Settled NUMBER, Claim_ID NUMBER, Date_Claim_Made TIME, Date_Claim_Settled TIME);"
      }
    ],
    [
      {
        "question": "Tell me which claim has the largest claim amount.",
        "query": "SELECT claim_id FROM claims ORDER BY amount_settled ASC LIMIT 1",
        "schema": "CREATE TABLE Customer_Policies (Policy_ID NUMBER); CREATE TABLE Claims (Claim_ID NUMBER, Policy_ID NUMBER, Amount_Settled NUMBER, Amount_Claimed NUMBER); CREATE TABLE Settlements (Amount_Claimed NUMBER, Claim_ID NUMBER);"
      },
      {
        "question": "How about the latest one?",
        "query": "SELECT date_claim_made FROM claims ORDER BY date_claim_made DESC LIMIT 1",
        "schema": "CREATE TABLE Settlements (Amount_Settled NUMBER, Date_Claim_Settled TIME, Claim_ID NUMBER, Amount_Claimed NUMBER, Date_Claim_Made TIME); CREATE TABLE Customer_Policies (Policy_ID NUMBER); CREATE TABLE Claims (Date_Claim_Made TIME, Amount_Settled NUMBER, Claim_ID NUMBER, Amount_Claimed NUMBER, Date_Claim_Settled TIME, Policy_ID NUMBER);"
      },
      {
        "question": "How about the earliest one?",
        "query": "SELECT date_claim_made FROM claims ORDER BY date_claim_made ASC LIMIT 1",
        "schema": "CREATE TABLE Customer_Policies (Policy_ID NUMBER); CREATE TABLE Settlements (Amount_Settled NUMBER, Date_Claim_Made TIME, Amount_Claimed NUMBER, Date_Claim_Settled TIME, Claim_ID NUMBER); CREATE TABLE Claims (Amount_Settled NUMBER, Amount_Claimed NUMBER, Claim_ID NUMBER, Date_Claim_Made TIME, Policy_ID NUMBER, Date_Claim_Settled TIME);"
      }
    ],
    [
      {
        "question": "Tell me the policy types of the customer named Augustine Kerluke",
        "query": "SELECT t2.policy_type_code FROM customers AS t1 JOIN customer_policies AS t2 ON t1.customer_id = t2.customer_id WHERE customer_details = \"Augustine Kerluke\"",
        "schema": "CREATE TABLE Claims (Policy_ID NUMBER); CREATE TABLE Customers (Customer_Details TEXT, Customer_ID NUMBER); CREATE TABLE Customer_Policies (Policy_ID NUMBER, Policy_Type_Code TEXT, Customer_ID NUMBER);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT count(t2.policy_type_code) FROM customers AS t1 JOIN customer_policies AS t2 ON t1.customer_id = t2.customer_id WHERE customer_details = \"Augustine Kerluke\"",
        "schema": "CREATE TABLE Customers (Customer_Details TEXT, Customer_ID NUMBER); CREATE TABLE Claims (Policy_ID NUMBER); CREATE TABLE Customer_Policies (Customer_ID NUMBER, Policy_ID NUMBER, Policy_Type_Code TEXT);"
      },
      {
        "question": "Who are the customers that have had more than 1 policy?",
        "query": "SELECT t1.customer_details , t1.customer_id FROM customers AS t1 JOIN customer_policies AS t2 ON t1.customer_id = t2.customer_id GROUP BY t1.customer_id HAVING count(*) > 1",
        "schema": "CREATE TABLE Claims (Policy_ID NUMBER); CREATE TABLE Customer_Policies (Policy_Type_Code TEXT, Policy_ID NUMBER, Customer_ID NUMBER); CREATE TABLE Customers (Customer_ID NUMBER, Customer_Details TEXT);"
      }
    ],
    [
      {
        "question": "Tell me payment method code of the most recent payment.",
        "query": "SELECT payment_method_code FROM payments ORDER BY date_payment_made DESC LIMIT 1",
        "schema": "CREATE TABLE Payments (Payment_Method_Code TEXT, Payment_ID NUMBER, Date_Payment_Made TIME); CREATE TABLE Customer_Policies (Start_Date TIME);"
      },
      {
        "question": "Tell me the amount of the most recent payment.",
        "query": "SELECT amount_payment FROM payments ORDER BY date_payment_made DESC LIMIT 1",
        "schema": "CREATE TABLE Customer_Policies (Start_Date TIME); CREATE TABLE Payments (Amount_Payment NUMBER, Date_Payment_Made TIME, Payment_Method_Code TEXT, Payment_ID NUMBER);"
      },
      {
        "question": "What is the most popular payment method?",
        "query": "SELECT payment_method_code FROM payments GROUP BY payment_method_code ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Customer_Policies (Start_Date TIME); CREATE TABLE Payments (Amount_Payment NUMBER, Payment_Method_Code TEXT, Payment_ID NUMBER, Date_Payment_Made TIME);"
      }
    ],
    [
      {
        "question": "Tell me how many payments are processed by MasterCard?",
        "query": "SELECT count(*) FROM payments WHERE payment_method_code = \"MasterCard\"",
        "schema": "CREATE TABLE Payments (Payment_ID NUMBER, Payment_Method_Code TEXT);"
      },
      {
        "question": "How about that of Discover Card?",
        "query": "SELECT count(*) FROM payments WHERE payment_method_code = \"Discover Card\"",
        "schema": "CREATE TABLE Payments (Payment_ID NUMBER, Payment_Method_Code TEXT);"
      },
      {
        "question": "With which kind of payment method were the least number of payments processed?",
        "query": "SELECT payment_method_code FROM payments GROUP BY payment_method_code ORDER BY count(*) ASC LIMIT 1",
        "schema": "CREATE TABLE Payments (Payment_Method_Code TEXT, Payment_ID NUMBER, Amount_Payment NUMBER);"
      }
    ],
    [
      {
        "question": "Tell me the policy types of the customer named Augustine Kerluke.",
        "query": "SELECT t2.policy_type_code FROM customers AS t1 JOIN customer_policies AS t2 ON t1.customer_id = t2.customer_id WHERE customer_details = \"Augustine Kerluke\"",
        "schema": "CREATE TABLE Claims (Policy_ID NUMBER); CREATE TABLE Customer_Policies (Policy_ID NUMBER, Customer_ID NUMBER, Policy_Type_Code TEXT); CREATE TABLE Customers (Customer_ID NUMBER, Customer_Details TEXT);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT count(t2.policy_type_code) FROM customers AS t1 JOIN customer_policies AS t2 ON t1.customer_id = t2.customer_id WHERE customer_details = \"Augustine Kerluke\"",
        "schema": "CREATE TABLE Claims (Policy_ID NUMBER); CREATE TABLE Customer_Policies (Policy_Type_Code TEXT, Customer_ID NUMBER, Policy_ID NUMBER); CREATE TABLE Customers (Customer_ID NUMBER, Customer_Details TEXT);"
      },
      {
        "question": "Which kind of policy type was chosen by the most customers?",
        "query": "SELECT policy_type_code FROM customer_policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Customer_Policies (Policy_ID NUMBER, Policy_Type_Code TEXT, Customer_ID NUMBER); CREATE TABLE Customers (Customer_ID NUMBER, Customer_Details TEXT); CREATE TABLE Claims (Policy_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Tell me the policy types of the customer named Selena Gerhold.",
        "query": "SELECT * FROM customers AS t1 JOIN customer_policies AS t2 ON t1.customer_id = t2.customer_id WHERE customer_details = \"Selena Gerhold\"",
        "schema": "CREATE TABLE Claims (Policy_ID NUMBER); CREATE TABLE Customers (Customer_Details TEXT, Customer_ID NUMBER); CREATE TABLE Customer_Policies (Policy_ID NUMBER, Customer_ID NUMBER, Policy_Type_Code TEXT);"
      },
      {
        "question": "How about that of the customer named Sydnie Friesen?",
        "query": "SELECT * FROM customers AS t1 JOIN customer_policies AS t2 ON t1.customer_id = t2.customer_id WHERE customer_details = \"Sydnie Friesen\"",
        "schema": "CREATE TABLE Customers (Customer_ID NUMBER, Customer_Details TEXT); CREATE TABLE Customer_Policies (Customer_ID NUMBER, Policy_ID NUMBER, Policy_Type_Code TEXT); CREATE TABLE Claims (Policy_ID NUMBER);"
      },
      {
        "question": "Tell me the details of the customers who do not have any policies.",
        "query": "SELECT customer_details FROM customers EXCEPT SELECT t1.customer_details FROM customers AS t1 JOIN customer_policies AS t2 ON t1.customer_id = t2.customer_id",
        "schema": "CREATE TABLE Claims (Policy_ID NUMBER); CREATE TABLE Customers (Customer_Details TEXT, Customer_ID NUMBER); CREATE TABLE Customer_Policies (Policy_ID NUMBER, Customer_ID NUMBER, Policy_Type_Code TEXT);"
      }
    ]
  ],
  "train_station": [
    [
      {
        "question": "Show information for all train stations.",
        "query": "SELECT * FROM station",
        "schema": "CREATE TABLE train_station (Station_ID NUMBER, Train_ID NUMBER); CREATE TABLE station (Station_ID NUMBER, Name TEXT);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT count(*) FROM station",
        "schema": "CREATE TABLE train_station (Train_ID NUMBER, Station_ID NUMBER); CREATE TABLE station (Number_of_Platforms NUMBER, Station_ID NUMBER, Total_Passengers NUMBER, Name TEXT);"
      }
    ],
    [
      {
        "question": "Show the name for all stations.",
        "query": "SELECT name FROM station",
        "schema": "CREATE TABLE station (Name TEXT, Station_ID NUMBER); CREATE TABLE train_station (Station_ID NUMBER);"
      },
      {
        "question": "Also show the location for them.",
        "query": "SELECT name , LOCATION FROM station",
        "schema": "CREATE TABLE station (Location TEXT, Station_ID NUMBER, Name TEXT); CREATE TABLE train_station (Station_ID NUMBER);"
      },
      {
        "question": "Also add the number of platforms for each.",
        "query": "SELECT name , LOCATION , number_of_platforms FROM station",
        "schema": "CREATE TABLE station (Station_ID NUMBER, Name TEXT, Number_of_Platforms NUMBER, Location TEXT); CREATE TABLE train_station (Station_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show the location for each train station.",
        "query": "SELECT LOCATION FROM station",
        "schema": "CREATE TABLE station (Name TEXT, Location TEXT, Station_ID NUMBER); CREATE TABLE train_station (Train_ID NUMBER, Station_ID NUMBER);"
      },
      {
        "question": "Show only distinct results.",
        "query": "SELECT DISTINCT LOCATION FROM station",
        "schema": "CREATE TABLE station (Station_ID NUMBER, Name TEXT, Location TEXT); CREATE TABLE train_station (Station_ID NUMBER, Train_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show the name for all train stations.",
        "query": "SELECT name FROM station",
        "schema": "CREATE TABLE train_station (Train_ID NUMBER, Station_ID NUMBER); CREATE TABLE train (Name TEXT, Train_ID NUMBER); CREATE TABLE station (Name TEXT, Station_ID NUMBER);"
      },
      {
        "question": "Also show the total passenger for them.",
        "query": "SELECT name , total_passengers FROM station",
        "schema": "CREATE TABLE train_station (Train_ID NUMBER, Station_ID NUMBER); CREATE TABLE train (Name TEXT, Train_ID NUMBER); CREATE TABLE station (Station_ID NUMBER, Name TEXT, Total_Passengers NUMBER);"
      },
      {
        "question": "How about the results for those stations not in London?",
        "query": "SELECT name , total_passengers FROM station WHERE LOCATION != 'London'",
        "schema": "CREATE TABLE train_station (Train_ID NUMBER, Station_ID NUMBER); CREATE TABLE station (Location TEXT, Total_Passengers NUMBER, Station_ID NUMBER, Name TEXT); CREATE TABLE train (Train_ID NUMBER, Name TEXT);"
      }
    ],
    [
      {
        "question": "Show the names of the stations.",
        "query": "SELECT name FROM station",
        "schema": "CREATE TABLE station (Name TEXT, Station_ID NUMBER); CREATE TABLE train_station (Station_ID NUMBER);"
      },
      {
        "question": "Also show the main services for them.",
        "query": "SELECT name , main_services FROM station",
        "schema": "CREATE TABLE station (Station_ID NUMBER, Main_Services TEXT, Name TEXT); CREATE TABLE train (Service TEXT); CREATE TABLE train_station (Station_ID NUMBER);"
      },
      {
        "question": "Order the results by the total number of passengers, descending.",
        "query": "SELECT name , main_services FROM station ORDER BY total_passengers DESC",
        "schema": "CREATE TABLE train (Service TEXT); CREATE TABLE station (Main_Services TEXT, Station_ID NUMBER, Name TEXT, Total_Passengers NUMBER); CREATE TABLE train_station (Station_ID NUMBER);"
      },
      {
        "question": "Only show the top three.",
        "query": "SELECT name , main_services FROM station ORDER BY total_passengers DESC LIMIT 3",
        "schema": "CREATE TABLE train (Service TEXT); CREATE TABLE station (Total_Passengers NUMBER, Name TEXT, Main_Services TEXT, Station_ID NUMBER); CREATE TABLE train_station (Station_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show the total passengers for all train stations.",
        "query": "SELECT total_passengers FROM station",
        "schema": "CREATE TABLE train_station (Train_ID NUMBER, Station_ID NUMBER); CREATE TABLE station (Total_Passengers NUMBER, Name TEXT, Station_ID NUMBER);"
      },
      {
        "question": "Show the total passengers for those in either London or Glasgow.",
        "query": "SELECT total_passengers FROM station WHERE LOCATION = 'London' OR LOCATION = 'Glasgow'",
        "schema": "CREATE TABLE train_station (Train_ID NUMBER, Station_ID NUMBER); CREATE TABLE station (Station_ID NUMBER, Name TEXT, Location TEXT, Total_Passengers NUMBER);"
      },
      {
        "question": "What is the average?",
        "query": "SELECT avg(total_passengers) FROM station WHERE LOCATION = 'London' OR LOCATION = 'Glasgow'",
        "schema": "CREATE TABLE station (Name TEXT, Location TEXT, Total_Passengers NUMBER, Station_ID NUMBER); CREATE TABLE train_station (Station_ID NUMBER, Train_ID NUMBER);"
      },
      {
        "question": "Also show the maximum.",
        "query": "SELECT avg(total_passengers) , max(total_passengers) FROM station WHERE LOCATION = 'London' OR LOCATION = 'Glasgow'",
        "schema": "CREATE TABLE train_station (Station_ID NUMBER, Train_ID NUMBER); CREATE TABLE station (Station_ID NUMBER, Total_Passengers NUMBER, Name TEXT, Location TEXT);"
      }
    ],
    [
      {
        "question": "Show the location for train stations.",
        "query": "SELECT LOCATION FROM station",
        "schema": "CREATE TABLE train_station (Station_ID NUMBER, Train_ID NUMBER); CREATE TABLE station (Name TEXT, Location TEXT, Station_ID NUMBER);"
      },
      {
        "question": "For each location of them, show the total number of platforms.",
        "query": "SELECT LOCATION , sum(number_of_platforms) FROM station GROUP BY LOCATION",
        "schema": "CREATE TABLE train_station (Train_ID NUMBER, Station_ID NUMBER); CREATE TABLE station (Name TEXT, Location TEXT, Number_of_Platforms NUMBER, Station_ID NUMBER);"
      },
      {
        "question": "For each of them, also show the total number of passengers.",
        "query": "SELECT LOCATION , sum(number_of_platforms) , sum(total_passengers) FROM station GROUP BY LOCATION",
        "schema": "CREATE TABLE train_station (Station_ID NUMBER, Train_ID NUMBER); CREATE TABLE station (Name TEXT, Location TEXT, Number_of_Platforms NUMBER, Station_ID NUMBER, Total_Passengers NUMBER);"
      }
    ],
    [
      {
        "question": "Show locations for stations.",
        "query": "SELECT LOCATION FROM station",
        "schema": "CREATE TABLE train_station (Station_ID NUMBER); CREATE TABLE station (Name TEXT, Station_ID NUMBER, Location TEXT);"
      },
      {
        "question": "Show locations for stations with at least 15 platforms.",
        "query": "SELECT LOCATION FROM station WHERE number_of_platforms >= 15",
        "schema": "CREATE TABLE train_station (Station_ID NUMBER); CREATE TABLE station (Location TEXT, Name TEXT, Number_of_Platforms NUMBER, Station_ID NUMBER);"
      },
      {
        "question": "Among those, which locations also have stations with more than 25 total passengers?",
        "query": "SELECT LOCATION FROM station WHERE number_of_platforms >= 15 AND total_passengers > 25",
        "schema": "CREATE TABLE train_station (Station_ID NUMBER); CREATE TABLE station (Location TEXT, Total_Passengers NUMBER, Number_of_Platforms NUMBER, Name TEXT, Station_ID NUMBER);"
      },
      {
        "question": "Show distinct locations of them.",
        "query": "SELECT DISTINCT LOCATION FROM station WHERE number_of_platforms >= 15 AND total_passengers > 25",
        "schema": "CREATE TABLE station (Name TEXT, Number_of_Platforms NUMBER, Location TEXT, Station_ID NUMBER, Total_Passengers NUMBER); CREATE TABLE train_station (Station_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show all locations of train stations.",
        "query": "SELECT LOCATION FROM station",
        "schema": "CREATE TABLE train_station (Station_ID NUMBER); CREATE TABLE station (Location TEXT, Station_ID NUMBER, Name TEXT);"
      },
      {
        "question": "Show locations with a station having at least 15 platforms.",
        "query": "SELECT LOCATION FROM station WHERE number_of_platforms >= 15",
        "schema": "CREATE TABLE station (Number_of_Platforms NUMBER, Location TEXT, Name TEXT, Station_ID NUMBER); CREATE TABLE train_station (Station_ID NUMBER);"
      },
      {
        "question": "Show all locations that don't.",
        "query": "SELECT LOCATION FROM station EXCEPT SELECT LOCATION FROM station WHERE number_of_platforms >= 15",
        "schema": "CREATE TABLE station (Number_of_Platforms NUMBER, Station_ID NUMBER, Location TEXT, Name TEXT); CREATE TABLE train_station (Station_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show the location for all train stations.",
        "query": "SELECT LOCATION FROM station",
        "schema": "CREATE TABLE station (Station_ID NUMBER, Location TEXT, Name TEXT); CREATE TABLE train_station (Station_ID NUMBER);"
      },
      {
        "question": "Show them in descending order of the number of train stations.",
        "query": "SELECT LOCATION FROM station GROUP BY LOCATION ORDER BY count(*) DESC",
        "schema": "CREATE TABLE station (Name TEXT, Location TEXT, Station_ID NUMBER); CREATE TABLE train_station (Station_ID NUMBER);"
      },
      {
        "question": "Which one has the most?",
        "query": "SELECT LOCATION FROM station GROUP BY LOCATION ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE station (Name TEXT, Station_ID NUMBER, Location TEXT); CREATE TABLE train_station (Station_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show the name for all trains.",
        "query": "SELECT name FROM train",
        "schema": "CREATE TABLE train (Name TEXT, Train_ID NUMBER);"
      },
      {
        "question": "Also show the time and service for them.",
        "query": "SELECT name , TIME , service FROM train",
        "schema": "CREATE TABLE station (Main_Services TEXT); CREATE TABLE train (Time TEXT, Name TEXT, Train_ID NUMBER, Service TEXT);"
      }
    ],
    [
      {
        "question": "Show information for all trains.",
        "query": "SELECT * FROM train",
        "schema": "CREATE TABLE train_station (Train_ID NUMBER, Station_ID NUMBER); CREATE TABLE train (Name TEXT, Train_ID NUMBER);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT count(*) FROM train",
        "schema": "CREATE TABLE train_station (Station_ID NUMBER, Train_ID NUMBER); CREATE TABLE train (Name TEXT, Train_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show the names of the trains.",
        "query": "SELECT name FROM train",
        "schema": "CREATE TABLE train (Train_ID NUMBER, Name TEXT);"
      },
      {
        "question": "Also show the services.",
        "query": "SELECT name , service FROM train",
        "schema": "CREATE TABLE train (Name TEXT, Train_ID NUMBER, Service TEXT); CREATE TABLE station (Main_Services TEXT);"
      },
      {
        "question": "Order the result by time.",
        "query": "SELECT name , service FROM train ORDER BY TIME",
        "schema": "CREATE TABLE station (Main_Services TEXT); CREATE TABLE train (Service TEXT, Time TEXT, Train_ID NUMBER, Name TEXT);"
      }
    ],
    [
      {
        "question": "Show the name for each station.",
        "query": "SELECT name FROM station",
        "schema": "CREATE TABLE train_station (Station_ID NUMBER); CREATE TABLE station (Station_ID NUMBER, Name TEXT);"
      },
      {
        "question": "For each station name, also count the number of trains.",
        "query": "SELECT t2.name , count(*) FROM train_station AS t1 JOIN station AS t2 ON t1.station_id = t2.station_id GROUP BY t1.station_id",
        "schema": "CREATE TABLE station (Station_ID NUMBER, Name TEXT); CREATE TABLE train_station (Train_ID NUMBER, Station_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show the name for each train.",
        "query": "SELECT name FROM train",
        "schema": "CREATE TABLE train (Train_ID NUMBER, Name TEXT); CREATE TABLE train_station (Train_ID NUMBER);"
      },
      {
        "question": "For each train, also show the station name.",
        "query": "SELECT t2.name , t3.name FROM train_station AS t1 JOIN station AS t2 ON t1.station_id = t2.station_id JOIN train AS t3 ON t3.train_id = t1.train_id",
        "schema": "CREATE TABLE train_station (Station_ID NUMBER, Train_ID NUMBER); CREATE TABLE train (Name TEXT, Train_ID NUMBER); CREATE TABLE station (Name TEXT, Station_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show all train names and times.",
        "query": "SELECT name, TIME FROM train",
        "schema": "CREATE TABLE train (Name TEXT, Train_ID NUMBER, Time TEXT);"
      },
      {
        "question": "Show the results only for trains in stations in London.",
        "query": "SELECT t3.name , t3.time FROM train_station AS t1 JOIN station AS t2 ON t1.station_id = t2.station_id JOIN train AS t3 ON t3.train_id = t1.train_id WHERE t2.location = 'London'",
        "schema": "CREATE TABLE train_station (Train_ID NUMBER, Station_ID NUMBER); CREATE TABLE station (Name TEXT, Location TEXT, Station_ID NUMBER); CREATE TABLE train (Name TEXT, Train_ID NUMBER, Time TEXT);"
      },
      {
        "question": "Order them in descending order by train time.",
        "query": "SELECT t3.name , t3.time FROM train_station AS t1 JOIN station AS t2 ON t1.station_id = t2.station_id JOIN train AS t3 ON t3.train_id = t1.train_id WHERE t2.location = 'London' ORDER BY t3.time DESC",
        "schema": "CREATE TABLE train_station (Station_ID NUMBER, Train_ID NUMBER); CREATE TABLE train (Time TEXT, Train_ID NUMBER, Name TEXT); CREATE TABLE station (Location TEXT, Name TEXT, Station_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show the name for all train stations.",
        "query": "SELECT name FROM station",
        "schema": "CREATE TABLE station (Station_ID NUMBER, Name TEXT); CREATE TABLE train_station (Train_ID NUMBER, Station_ID NUMBER); CREATE TABLE train (Train_ID NUMBER, Name TEXT);"
      },
      {
        "question": "Order those names in descending order of the number of trains.",
        "query": "SELECT t2.name FROM train_station AS t1 JOIN station AS t2 ON t1.station_id = t2.station_id GROUP BY t1.station_id ORDER BY count(*) DESC",
        "schema": "CREATE TABLE station (Station_ID NUMBER, Name TEXT); CREATE TABLE train (Name TEXT, Train_ID NUMBER); CREATE TABLE train_station (Station_ID NUMBER, Train_ID NUMBER);"
      },
      {
        "question": "Which one has the most?",
        "query": "SELECT t2.name FROM train_station AS t1 JOIN station AS t2 ON t1.station_id = t2.station_id GROUP BY t1.station_id ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE train_station (Train_ID NUMBER, Station_ID NUMBER); CREATE TABLE train (Name TEXT, Train_ID NUMBER); CREATE TABLE station (Name TEXT, Station_ID NUMBER);"
      }
    ],
    [
      {
        "question": "List the name for all stations.",
        "query": "SELECT name FROM station",
        "schema": "CREATE TABLE station (Station_ID NUMBER, Name TEXT); CREATE TABLE train_station (Station_ID NUMBER);"
      },
      {
        "question": "Also count the number of trains for each.",
        "query": "SELECT t2.name, count(*) FROM train_station AS t1 JOIN station AS t2 ON t1.station_id = t2.station_id GROUP BY t1.station_id",
        "schema": "CREATE TABLE station (Name TEXT, Station_ID NUMBER); CREATE TABLE train (Train_ID NUMBER); CREATE TABLE train_station (Train_ID NUMBER, Station_ID NUMBER);"
      },
      {
        "question": "Show those names with at least two trains.",
        "query": "SELECT t2.name FROM train_station AS t1 JOIN station AS t2 ON t1.station_id = t2.station_id GROUP BY t1.station_id HAVING count(*) >= 2",
        "schema": "CREATE TABLE train (Name TEXT, Train_ID NUMBER); CREATE TABLE train_station (Train_ID NUMBER, Station_ID NUMBER); CREATE TABLE station (Name TEXT, Station_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show the location for all stations.",
        "query": "SELECT LOCATION FROM station",
        "schema": "CREATE TABLE train_station (Station_ID NUMBER); CREATE TABLE station (Name TEXT, Location TEXT, Station_ID NUMBER);"
      },
      {
        "question": "What are those locations with only 1 station?",
        "query": "SELECT LOCATION FROM station GROUP BY LOCATION HAVING count(*) = 1",
        "schema": "CREATE TABLE station (Name TEXT, Station_ID NUMBER, Location TEXT); CREATE TABLE train_station (Station_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show station id for all stations with a train.",
        "query": "SELECT station_id FROM train_station",
        "schema": "CREATE TABLE station (Name TEXT, Station_ID NUMBER); CREATE TABLE train_station (Train_ID NUMBER, Station_ID NUMBER);"
      },
      {
        "question": "Show the name of stations without any train.",
        "query": "SELECT name FROM station WHERE station_id NOT IN (SELECT station_id FROM train_station)",
        "schema": "CREATE TABLE train_station (Station_ID NUMBER, Train_ID NUMBER); CREATE TABLE station (Station_ID NUMBER, Name TEXT);"
      }
    ],
    [
      {
        "question": "What are the names for all the stations?",
        "query": "SELECT name FROM station",
        "schema": "CREATE TABLE train_station (Station_ID NUMBER); CREATE TABLE station (Station_ID NUMBER, Name TEXT);"
      },
      {
        "question": "What are the names for those serving \"Ananthapuri Express\" trains?",
        "query": "SELECT t2.name FROM train_station AS t1 JOIN station AS t2 ON t1.station_id = t2.station_id JOIN train AS t3 ON t3.train_id = t1.train_id WHERE t3.name = \"Ananthapuri Express\"",
        "schema": "CREATE TABLE train (Name TEXT, Train_ID NUMBER); CREATE TABLE train_station (Train_ID NUMBER, Station_ID NUMBER); CREATE TABLE station (Station_ID NUMBER, Name TEXT);"
      },
      {
        "question": "How about those serving \"Guruvayur Express\"?",
        "query": "SELECT t2.name FROM train_station AS t1 JOIN station AS t2 ON t1.station_id = t2.station_id JOIN train AS t3 ON t3.train_id = t1.train_id WHERE t3.name = \"Guruvayur Express\"",
        "schema": "CREATE TABLE train_station (Station_ID NUMBER, Train_ID NUMBER); CREATE TABLE station (Station_ID NUMBER, Name TEXT); CREATE TABLE train (Name TEXT, Train_ID NUMBER);"
      },
      {
        "question": "Which serve both?",
        "query": "SELECT t2.name FROM train_station AS t1 JOIN station AS t2 ON t1.station_id = t2.station_id JOIN train AS t3 ON t3.train_id = t1.train_id WHERE t3.name = \"Ananthapuri Express\" INTERSECT SELECT t2.name FROM train_station AS t1 JOIN station AS t2 ON t1.station_id = t2.station_id JOIN train AS t3 ON t3.train_id = t1.train_id WHERE t3.name = \"Guruvayur Express\"",
        "schema": "CREATE TABLE train_station (Train_ID NUMBER, Station_ID NUMBER); CREATE TABLE station (Station_ID NUMBER, Name TEXT); CREATE TABLE train (Train_ID NUMBER, Name TEXT);"
      }
    ],
    [
      {
        "question": "Show station ids for stations located in London.",
        "query": "SELECT t4.station_id FROM train_station AS t3 JOIN station AS t4 ON t3.station_id = t4.station_id WHERE t4.location = \"London\"",
        "schema": "CREATE TABLE station (Name TEXT, Station_ID NUMBER, Location TEXT); CREATE TABLE train_station (Train_ID NUMBER, Station_ID NUMBER);"
      },
      {
        "question": "Show the names for all trains.",
        "query": "SELECT t2.name FROM train_station AS t1 JOIN train AS t2 ON t1.train_id = t2.train_id",
        "schema": "CREATE TABLE train_station (Train_ID NUMBER, Station_ID NUMBER); CREATE TABLE train (Train_ID NUMBER, Name TEXT); CREATE TABLE station (Name TEXT, Location TEXT, Station_ID NUMBER);"
      },
      {
        "question": "Only show the names for the trains that do not pass any station located in London.",
        "query": "SELECT t2.name FROM train_station AS t1 JOIN train AS t2 ON t1.train_id = t2.train_id WHERE t1.station_id NOT IN (SELECT t4.station_id FROM train_station AS t3 JOIN station AS t4 ON t3.station_id = t4.station_id WHERE t4.location = \"London\")",
        "schema": "CREATE TABLE train_station (Station_ID NUMBER, Train_ID NUMBER); CREATE TABLE train (Name TEXT, Train_ID NUMBER); CREATE TABLE station (Name TEXT, Location TEXT, Station_ID NUMBER);"
      }
    ]
  ],
  "club_1": [
    [
      {
        "question": "Tell me the age of the student named Tracy.",
        "query": "SELECT age FROM student WHERE fname = \"Tracy\"",
        "schema": "CREATE TABLE Member_of_club (ClubID NUMBER, StuID NUMBER); CREATE TABLE Student (StuID NUMBER, LName TEXT, Age NUMBER, Fname TEXT); CREATE TABLE Club (ClubID NUMBER);"
      },
      {
        "question": "Tell me the club she is in.",
        "query": "SELECT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.fname = \"Tracy\"",
        "schema": "CREATE TABLE Student (LName TEXT, Fname TEXT, Age NUMBER, StuID NUMBER); CREATE TABLE Member_of_club (StuID NUMBER, ClubID NUMBER); CREATE TABLE Club (ClubName TEXT, ClubDesc TEXT, ClubID NUMBER);"
      },
      {
        "question": "Tell me the last names of the members of the club \"Bootup Baltimore\"?",
        "query": "SELECT t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = \"Bootup Baltimore\"",
        "schema": "CREATE TABLE Member_of_club (ClubID NUMBER, StuID NUMBER); CREATE TABLE Club (ClubDesc TEXT, ClubID NUMBER, ClubLocation TEXT, ClubName TEXT); CREATE TABLE Student (Age NUMBER, city_code TEXT, Fname TEXT, StuID NUMBER, LName TEXT);"
      }
    ],
    [
      {
        "question": "Tell me the description of the club named \"Hopkins Student Enterprises\".",
        "query": "SELECT clubdesc FROM club WHERE clubname = \"Hopkins Student Enterprises\"",
        "schema": "CREATE TABLE Student (StuID NUMBER, LName TEXT); CREATE TABLE Club (ClubID NUMBER, ClubDesc TEXT, ClubName TEXT); CREATE TABLE Member_of_club (StuID NUMBER, ClubID NUMBER);"
      },
      {
        "question": "How about its location?",
        "query": "SELECT clublocation FROM club WHERE clubname = \"Hopkins Student Enterprises\"",
        "schema": "CREATE TABLE Member_of_club (ClubID NUMBER, StuID NUMBER); CREATE TABLE Student (city_code TEXT, StuID NUMBER, LName TEXT); CREATE TABLE Club (ClubName TEXT, ClubID NUMBER, ClubDesc TEXT, ClubLocation TEXT);"
      },
      {
        "question": "Tell me who are the members of the club named \"Hopkins Student Enterprises\"? Show me the last name.",
        "query": "SELECT t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = \"Hopkins Student Enterprises\"",
        "schema": "CREATE TABLE Member_of_club (StuID NUMBER, ClubID NUMBER); CREATE TABLE Student (city_code TEXT, StuID NUMBER, LName TEXT, Fname TEXT); CREATE TABLE Club (ClubLocation TEXT, ClubID NUMBER, ClubName TEXT, ClubDesc TEXT);"
      }
    ],
    [
      {
        "question": "Tell me the major of the student named \"Eric\".",
        "query": "SELECT major FROM student WHERE fname = \"Eric\"",
        "schema": "CREATE TABLE Member_of_club (StuID NUMBER, ClubID NUMBER); CREATE TABLE Student (StuID NUMBER, Major NUMBER, Fname TEXT, LName TEXT); CREATE TABLE Club (ClubID NUMBER);"
      },
      {
        "question": "What club did he join?",
        "query": "SELECT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.fname = \"Eric\"",
        "schema": "CREATE TABLE Club (ClubID NUMBER, ClubName TEXT); CREATE TABLE Student (LName TEXT, Major NUMBER, Fname TEXT, StuID NUMBER); CREATE TABLE Member_of_club (ClubID NUMBER, StuID NUMBER);"
      },
      {
        "question": "How many members does the club \"Tennis Club\" have?",
        "query": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = \"Tennis Club\"",
        "schema": "CREATE TABLE Member_of_club (StuID NUMBER, ClubID NUMBER); CREATE TABLE Student (StuID NUMBER, LName TEXT, Major NUMBER, Fname TEXT); CREATE TABLE Club (ClubName TEXT, ClubID NUMBER);"
      }
    ],
    [
      {
        "question": "Tell me the positions of the student named Lisa.",
        "query": "SELECT POSITION FROM member_of_club AS t1 JOIN student AS t2 ON t1.stuid = t2.stuid WHERE t2.fname = \"Lisa\"",
        "schema": "CREATE TABLE Member_of_club (StuID NUMBER, Position TEXT, ClubID NUMBER); CREATE TABLE Club (ClubID NUMBER); CREATE TABLE Student (Fname TEXT, StuID NUMBER, LName TEXT);"
      },
      {
        "question": "Tell me the club she is in.",
        "query": "SELECT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.fname = \"Lisa\"",
        "schema": "CREATE TABLE Member_of_club (ClubID NUMBER, Position TEXT, StuID NUMBER); CREATE TABLE Club (ClubName TEXT, ClubID NUMBER); CREATE TABLE Student (Fname TEXT, LName TEXT, StuID NUMBER);"
      },
      {
        "question": "Show me the the number of members of club \"Pen and Paper Gaming\".",
        "query": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = \"Pen and Paper Gaming\"",
        "schema": "CREATE TABLE Member_of_club (ClubID NUMBER, Position TEXT, StuID NUMBER); CREATE TABLE Club (ClubName TEXT, ClubID NUMBER); CREATE TABLE Student (LName TEXT, Fname TEXT, StuID NUMBER);"
      }
    ],
    [
      {
        "question": "Tell me the advisor of \"Linda Smith\".",
        "query": "SELECT advisor FROM student WHERE lname = \"Smith\" AND fname = \"Linda\"",
        "schema": "CREATE TABLE Student (Fname TEXT, Advisor NUMBER, StuID NUMBER, LName TEXT); CREATE TABLE Member_of_club (ClubID NUMBER, StuID NUMBER);"
      },
      {
        "question": "Tell me her age.",
        "query": "SELECT age FROM student WHERE lname = \"Smith\" AND fname = \"Linda\"",
        "schema": "CREATE TABLE Student (Fname TEXT, LName TEXT, Age NUMBER, Advisor NUMBER, StuID NUMBER); CREATE TABLE Member_of_club (ClubID NUMBER, StuID NUMBER);"
      },
      {
        "question": "How many clubs does \"Linda Smith\" belong to?",
        "query": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.fname = \"Linda\" AND t3.lname = \"Smith\"",
        "schema": "CREATE TABLE Student (Fname TEXT, StuID NUMBER, LName TEXT, Age NUMBER, Advisor NUMBER); CREATE TABLE Club (ClubName TEXT, ClubID NUMBER); CREATE TABLE Member_of_club (ClubID NUMBER, StuID NUMBER);"
      }
    ],
    [
      {
        "question": "Tell me Paul's sex.",
        "query": "SELECT sex FROM student WHERE fname = \"Paul\"",
        "schema": "CREATE TABLE Student (Fname TEXT, LName TEXT, StuID NUMBER, Sex TEXT); CREATE TABLE Member_of_club (StuID NUMBER);"
      },
      {
        "question": "Tell me the number of clubs where he is a member.",
        "query": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.fname = \"Paul\"",
        "schema": "CREATE TABLE Student (LName TEXT, Fname TEXT, StuID NUMBER, Sex TEXT); CREATE TABLE Member_of_club (ClubID NUMBER, StuID NUMBER); CREATE TABLE Club (ClubName TEXT, ClubLocation TEXT, ClubID NUMBER);"
      },
      {
        "question": "What is the number of clubs where \"Tracy Kim\" is a member?",
        "query": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.fname = \"Tracy\" AND t3.lname = \"Kim\"",
        "schema": "CREATE TABLE Member_of_club (StuID NUMBER, ClubID NUMBER); CREATE TABLE Club (ClubLocation TEXT, ClubName TEXT, ClubID NUMBER); CREATE TABLE Student (LName TEXT, Sex TEXT, Fname TEXT, StuID NUMBER);"
      }
    ],
    [
      {
        "question": "Tell me the location of club \"Tennis Club\".",
        "query": "SELECT clublocation FROM club WHERE clubname = \"Tennis Club\"",
        "schema": "CREATE TABLE Student (StuID NUMBER, city_code TEXT); CREATE TABLE Club (ClubLocation TEXT, ClubDesc TEXT, ClubName TEXT, ClubID NUMBER); CREATE TABLE Member_of_club (StuID NUMBER, ClubID NUMBER);"
      },
      {
        "question": "What is the first name of the members in it?",
        "query": "SELECT t3.fname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = \"Tennis Club\"",
        "schema": "CREATE TABLE Student (Fname TEXT, LName TEXT, city_code TEXT, StuID NUMBER); CREATE TABLE Club (ClubDesc TEXT, ClubName TEXT, ClubID NUMBER, ClubLocation TEXT); CREATE TABLE Member_of_club (StuID NUMBER, ClubID NUMBER);"
      },
      {
        "question": "Tell me all the female members of the club \"Bootup Baltimore\". Show the first name and last name.",
        "query": "SELECT t3.fname , t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = \"Bootup Baltimore\" AND t3.sex = \"F\"",
        "schema": "CREATE TABLE Student (StuID NUMBER, city_code TEXT, Sex TEXT, Fname TEXT, LName TEXT); CREATE TABLE Club (ClubDesc TEXT, ClubName TEXT, ClubLocation TEXT, ClubID NUMBER); CREATE TABLE Member_of_club (StuID NUMBER, ClubID NUMBER);"
      }
    ],
    [
      {
        "question": "What is the description of the club named \"Hopkins Student Enterprises\"?",
        "query": "SELECT clubdesc FROM club WHERE clubname = \"Hopkins Student Enterprises\"",
        "schema": "CREATE TABLE Club (ClubDesc TEXT, ClubID NUMBER, ClubName TEXT); CREATE TABLE Student (Fname TEXT, LName TEXT, StuID NUMBER); CREATE TABLE Member_of_club (StuID NUMBER, ClubID NUMBER);"
      },
      {
        "question": "What are all the female members of the club? Show me the first name.",
        "query": "SELECT t3.fname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = \"Hopkins Student Enterprises\" AND t3.sex = \"F\"",
        "schema": "CREATE TABLE Club (ClubName TEXT, ClubDesc TEXT, ClubID NUMBER); CREATE TABLE Student (Fname TEXT, StuID NUMBER, Sex TEXT, LName TEXT); CREATE TABLE Member_of_club (ClubID NUMBER, StuID NUMBER);"
      },
      {
        "question": "Who are the male members of the club? Show me the first name and last name.",
        "query": "SELECT t3.fname , t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = \"Hopkins Student Enterprises\" AND t3.sex = \"M\"",
        "schema": "CREATE TABLE Student (Fname TEXT, StuID NUMBER, LName TEXT, Sex TEXT); CREATE TABLE Club (ClubDesc TEXT, ClubID NUMBER, ClubName TEXT); CREATE TABLE Member_of_club (StuID NUMBER, ClubID NUMBER);"
      }
    ],
    [
      {
        "question": "Tell me the first names of all the female students.",
        "query": "SELECT fname FROM student WHERE sex = \"F\"",
        "schema": "CREATE TABLE Student (StuID NUMBER, Sex TEXT, Fname TEXT, LName TEXT);"
      },
      {
        "question": "Tell me their majors.",
        "query": "SELECT major FROM student WHERE sex = \"F\"",
        "schema": "CREATE TABLE Student (Fname TEXT, Sex TEXT, Major NUMBER, StuID NUMBER, LName TEXT);"
      },
      {
        "question": "Find all members of \"Bootup Baltimore\" whose major is \"600\". Show the first name and last name",
        "query": "SELECT t3.fname , t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = \"Bootup Baltimore\" AND t3.major = \"600\"",
        "schema": "CREATE TABLE Club (ClubName TEXT, ClubID NUMBER); CREATE TABLE Student (Fname TEXT, Sex TEXT, StuID NUMBER, city_code TEXT, Major NUMBER, LName TEXT); CREATE TABLE Member_of_club (ClubID NUMBER, StuID NUMBER);"
      }
    ],
    [
      {
        "question": "Tell me the first names of students whose advisor is 1121.",
        "query": "SELECT fname FROM student WHERE advisor = 1121",
        "schema": "CREATE TABLE Student (Advisor NUMBER, Fname TEXT, StuID NUMBER, LName TEXT); CREATE TABLE Member_of_club (StuID NUMBER);"
      },
      {
        "question": "Tell me the last names of students whose major is 600.",
        "query": "SELECT lname FROM student WHERE major = 600",
        "schema": "CREATE TABLE Member_of_club (StuID NUMBER); CREATE TABLE Student (Advisor NUMBER, Fname TEXT, Major NUMBER, LName TEXT, StuID NUMBER);"
      },
      {
        "question": "Tell me which club has the most members majoring in \"600\".",
        "query": "SELECT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.major = \"600\" GROUP BY t1.clubname ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Club (ClubDesc TEXT, ClubID NUMBER, ClubName TEXT); CREATE TABLE Member_of_club (StuID NUMBER, ClubID NUMBER); CREATE TABLE Student (StuID NUMBER, Major NUMBER, Advisor NUMBER, Fname TEXT, LName TEXT);"
      }
    ],
    [
      {
        "question": "Tell me the club Andy is in.",
        "query": "SELECT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.fname = \"Andy\"",
        "schema": "CREATE TABLE Student (StuID NUMBER, city_code TEXT, Fname TEXT, LName TEXT); CREATE TABLE Member_of_club (StuID NUMBER, ClubID NUMBER, Position TEXT); CREATE TABLE Club (ClubLocation TEXT, ClubDesc TEXT, ClubName TEXT, ClubID NUMBER);"
      },
      {
        "question": "What is Andy's sex?",
        "query": "SELECT sex FROM student WHERE fname = \"Andy\"",
        "schema": "CREATE TABLE Member_of_club (StuID NUMBER, Position TEXT, ClubID NUMBER); CREATE TABLE Club (ClubName TEXT, ClubDesc TEXT, ClubLocation TEXT, ClubID NUMBER); CREATE TABLE Student (LName TEXT, StuID NUMBER, Sex TEXT, Fname TEXT, city_code TEXT);"
      },
      {
        "question": "What is the name of the club that has the most female students.",
        "query": "SELECT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.sex = \"F\" GROUP BY t1.clubname ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Student (Fname TEXT, LName TEXT, Sex TEXT, StuID NUMBER, city_code TEXT); CREATE TABLE Club (ClubDesc TEXT, ClubName TEXT, ClubID NUMBER, ClubLocation TEXT); CREATE TABLE Member_of_club (StuID NUMBER, Position TEXT, ClubID NUMBER);"
      }
    ],
    [
      {
        "question": "How many students are in club \"Bootup Baltimore\"?",
        "query": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = \"Bootup Baltimore\"",
        "schema": "CREATE TABLE Student (LName TEXT, Fname TEXT, StuID NUMBER); CREATE TABLE Club (ClubName TEXT, ClubID NUMBER, ClubDesc TEXT); CREATE TABLE Member_of_club (ClubID NUMBER, StuID NUMBER);"
      },
      {
        "question": "Tell me its location.",
        "query": "SELECT clublocation FROM club WHERE clubname = \"Bootup Baltimore\"",
        "schema": "CREATE TABLE Student (LName TEXT, Fname TEXT, StuID NUMBER, city_code TEXT); CREATE TABLE Club (ClubID NUMBER, ClubDesc TEXT, ClubLocation TEXT, ClubName TEXT); CREATE TABLE Member_of_club (StuID NUMBER, ClubID NUMBER);"
      },
      {
        "question": "What is the first and last name of the president of this club?",
        "query": "SELECT t3.fname , t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = \"Bootup Baltimore\" AND t2.position = \"President\"",
        "schema": "CREATE TABLE Member_of_club (Position TEXT, StuID NUMBER, ClubID NUMBER); CREATE TABLE Club (ClubLocation TEXT, ClubDesc TEXT, ClubID NUMBER, ClubName TEXT); CREATE TABLE Student (city_code TEXT, LName TEXT, Fname TEXT, StuID NUMBER);"
      }
    ],
    [
      {
        "question": "Tell me the position of the student Jandy.",
        "query": "SELECT POSITION FROM member_of_club AS t1 JOIN student AS t2 ON t1.stuid = t2.stuid WHERE t2.fname = \"Jandy\"",
        "schema": "CREATE TABLE Club (ClubID NUMBER, ClubName TEXT, ClubDesc TEXT); CREATE TABLE Student (city_code TEXT, StuID NUMBER, LName TEXT, Fname TEXT); CREATE TABLE Member_of_club (StuID NUMBER, Position TEXT, ClubID NUMBER);"
      },
      {
        "question": "Tell me the club she is in.",
        "query": "SELECT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.fname = \"Jandy\"",
        "schema": "CREATE TABLE Club (ClubName TEXT, ClubDesc TEXT, ClubID NUMBER); CREATE TABLE Student (Fname TEXT, city_code TEXT, StuID NUMBER, LName TEXT); CREATE TABLE Member_of_club (StuID NUMBER, Position TEXT, ClubID NUMBER);"
      },
      {
        "question": "Who is the \"CTO\" of club \"Hopkins Student Enterprises\"? Show the first name and last name.",
        "query": "SELECT t3.fname , t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = \"Hopkins Student Enterprises\" AND t2.position = \"CTO\"",
        "schema": "CREATE TABLE Member_of_club (StuID NUMBER, Position TEXT, ClubID NUMBER); CREATE TABLE Club (ClubName TEXT, ClubDesc TEXT, ClubID NUMBER); CREATE TABLE Student (StuID NUMBER, city_code TEXT, LName TEXT, Fname TEXT);"
      }
    ],
    [
      {
        "question": "How many clubs are there in AKW?",
        "query": "SELECT count(*) FROM club WHERE clublocation = \"AKW\"",
        "schema": "CREATE TABLE Club (ClubID NUMBER, ClubLocation TEXT, ClubDesc TEXT, ClubName TEXT); CREATE TABLE Student (StuID NUMBER, city_code TEXT); CREATE TABLE Member_of_club (StuID NUMBER, ClubID NUMBER);"
      },
      {
        "question": "Tell me their name.",
        "query": "SELECT clubname FROM club WHERE clublocation = \"AKW\"",
        "schema": "CREATE TABLE Student (city_code TEXT, Fname TEXT, StuID NUMBER, LName TEXT); CREATE TABLE Club (ClubID NUMBER, ClubLocation TEXT, ClubDesc TEXT, ClubName TEXT); CREATE TABLE Member_of_club (StuID NUMBER, ClubID NUMBER);"
      },
      {
        "question": "How many different roles are there in the club \"Bootup Baltimore\"?",
        "query": "SELECT count(DISTINCT t2.position) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid WHERE t1.clubname = \"Bootup Baltimore\"",
        "schema": "CREATE TABLE Club (ClubName TEXT, ClubDesc TEXT, ClubID NUMBER, ClubLocation TEXT); CREATE TABLE Member_of_club (Position TEXT, ClubID NUMBER, StuID NUMBER); CREATE TABLE Student (city_code TEXT, StuID NUMBER, Fname TEXT, LName TEXT);"
      }
    ],
    [
      {
        "question": "How many students are there living in NYC?",
        "query": "SELECT count(*) FROM student WHERE city_code = \"NYC\"",
        "schema": "CREATE TABLE Student (city_code TEXT, StuID NUMBER); CREATE TABLE Member_of_club (ClubID NUMBER, StuID NUMBER); CREATE TABLE Club (ClubName TEXT, ClubLocation TEXT, ClubID NUMBER);"
      },
      {
        "question": "Tell me the clubs they are in.",
        "query": "SELECT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.city_code = \"NYC\"",
        "schema": "CREATE TABLE Student (city_code TEXT, StuID NUMBER); CREATE TABLE Club (ClubLocation TEXT, ClubDesc TEXT, ClubID NUMBER, ClubName TEXT); CREATE TABLE Member_of_club (ClubID NUMBER, StuID NUMBER);"
      },
      {
        "question": "Tell me how many members of \"Bootup Baltimore\" are older than 18?",
        "query": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = \"Bootup Baltimore\" AND t3.age > 18",
        "schema": "CREATE TABLE Club (ClubLocation TEXT, ClubID NUMBER, ClubName TEXT, ClubDesc TEXT); CREATE TABLE Member_of_club (ClubID NUMBER, StuID NUMBER); CREATE TABLE Student (LName TEXT, Age NUMBER, Fname TEXT, StuID NUMBER, city_code TEXT);"
      }
    ],
    [
      {
        "question": "What's the age of the student named Derek?",
        "query": "SELECT age FROM student WHERE fname = \"Derek\"",
        "schema": "CREATE TABLE Member_of_club (StuID NUMBER, ClubID NUMBER); CREATE TABLE Club (ClubID NUMBER); CREATE TABLE Student (Fname TEXT, StuID NUMBER, LName TEXT, Age NUMBER);"
      },
      {
        "question": "Tell me the age of students in the club \"Bootup Baltimore\"?",
        "query": "SELECT age FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = \"Bootup Baltimore\"",
        "schema": "CREATE TABLE Student (city_code TEXT, Fname TEXT, StuID NUMBER, LName TEXT, Age NUMBER); CREATE TABLE Member_of_club (StuID NUMBER, ClubID NUMBER); CREATE TABLE Club (ClubDesc TEXT, ClubLocation TEXT, ClubID NUMBER, ClubName TEXT);"
      },
      {
        "question": "How many members of that club are younger than 18?",
        "query": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = \"Bootup Baltimore\" AND t3.age < 18",
        "schema": "CREATE TABLE Club (ClubID NUMBER, ClubDesc TEXT, ClubName TEXT, ClubLocation TEXT); CREATE TABLE Student (StuID NUMBER, LName TEXT, city_code TEXT, Age NUMBER, Fname TEXT); CREATE TABLE Member_of_club (ClubID NUMBER, StuID NUMBER);"
      }
    ],
    [
      {
        "question": "Tell me first names of the students living in the city with city code \"LON\"",
        "query": "SELECT fname FROM student WHERE city_code = \"LON\"",
        "schema": "CREATE TABLE Student (city_code TEXT, LName TEXT, StuID NUMBER, Fname TEXT);"
      },
      {
        "question": "How about that of city with city code \"BAL\"",
        "query": "SELECT fname FROM student WHERE city_code = \"BAL\"",
        "schema": "CREATE TABLE Student (LName TEXT, city_code TEXT, StuID NUMBER, Fname TEXT);"
      },
      {
        "question": "Tell me the names of all the clubs that have at least a member from the city with city code \"BAL\".",
        "query": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.city_code = \"BAL\"",
        "schema": "CREATE TABLE Student (LName TEXT, Fname TEXT, StuID NUMBER, city_code TEXT); CREATE TABLE Member_of_club (ClubID NUMBER, StuID NUMBER); CREATE TABLE Club (ClubDesc TEXT, ClubID NUMBER, ClubLocation TEXT, ClubName TEXT);"
      }
    ],
    [
      {
        "question": "Tell me the location of the club \"Bootup Baltimore\".",
        "query": "SELECT clublocation FROM club WHERE clubname = \"Bootup Baltimore\"",
        "schema": "CREATE TABLE Student (StuID NUMBER); CREATE TABLE Club (ClubID NUMBER, ClubName TEXT, ClubLocation TEXT, ClubDesc TEXT); CREATE TABLE Member_of_club (StuID NUMBER, ClubID NUMBER);"
      },
      {
        "question": "Tell me the city code of the cities where at least a member of that club live in.",
        "query": "SELECT t3.city_code FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = \"Bootup Baltimore\"",
        "schema": "CREATE TABLE Club (ClubLocation TEXT, ClubName TEXT, ClubDesc TEXT, ClubID NUMBER); CREATE TABLE Member_of_club (StuID NUMBER, ClubID NUMBER); CREATE TABLE Student (city_code TEXT, StuID NUMBER);"
      },
      {
        "question": "What are the names of the clubs that have at least a member from the city with the city code \"HOU\"?",
        "query": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.city_code = \"HOU\"",
        "schema": "CREATE TABLE Club (ClubLocation TEXT, ClubName TEXT, ClubID NUMBER, ClubDesc TEXT); CREATE TABLE Student (city_code TEXT, StuID NUMBER); CREATE TABLE Member_of_club (ClubID NUMBER, StuID NUMBER);"
      }
    ],
    [
      {
        "question": "Tell me the age of the student named \"Eric Tai\".",
        "query": "SELECT age FROM student WHERE fname = \"Eric\" AND lname = \"Tai\"",
        "schema": "CREATE TABLE Club (ClubID NUMBER); CREATE TABLE Member_of_club (ClubID NUMBER, StuID NUMBER); CREATE TABLE Student (Age NUMBER, Fname TEXT, LName TEXT, StuID NUMBER);"
      },
      {
        "question": "How about his advisor?",
        "query": "SELECT advisor FROM student WHERE fname = \"Eric\" AND lname = \"Tai\"",
        "schema": "CREATE TABLE Member_of_club (StuID NUMBER, ClubID NUMBER); CREATE TABLE Student (Fname TEXT, Advisor NUMBER, LName TEXT, Age NUMBER, StuID NUMBER); CREATE TABLE Club (ClubID NUMBER);"
      },
      {
        "question": "How many clubs does the student named \"Eric Tai\" belong to?",
        "query": "SELECT count(DISTINCT t1.clubname) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.fname = \"Eric\" AND t3.lname = \"Tai\"",
        "schema": "CREATE TABLE Member_of_club (StuID NUMBER, ClubID NUMBER); CREATE TABLE Student (Age NUMBER, StuID NUMBER, Advisor NUMBER, Fname TEXT, LName TEXT); CREATE TABLE Club (ClubID NUMBER, ClubName TEXT);"
      }
    ],
    [
      {
        "question": "Tell me the city code of the city where \"Davis Steven\" lives.",
        "query": "SELECT city_code FROM student WHERE lname = \"Davis\" AND fname = \"Steven\"",
        "schema": "CREATE TABLE Member_of_club (StuID NUMBER, ClubID NUMBER); CREATE TABLE Student (LName TEXT, Fname TEXT, StuID NUMBER, city_code TEXT); CREATE TABLE Club (ClubLocation TEXT);"
      },
      {
        "question": "What is his major?",
        "query": "SELECT major FROM student WHERE lname = \"Davis\" AND fname = \"Steven\"",
        "schema": "CREATE TABLE Student (StuID NUMBER, city_code TEXT, Major NUMBER, LName TEXT, Fname TEXT); CREATE TABLE Club (ClubLocation TEXT); CREATE TABLE Member_of_club (ClubID NUMBER, StuID NUMBER);"
      },
      {
        "question": "Tell me the clubs having \"Davis Steven\" as a member.",
        "query": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.fname = \"Davis\" AND t3.lname = \"Steven\"",
        "schema": "CREATE TABLE Club (ClubID NUMBER, ClubName TEXT, ClubLocation TEXT); CREATE TABLE Member_of_club (StuID NUMBER, ClubID NUMBER); CREATE TABLE Student (city_code TEXT, Fname TEXT, Major NUMBER, LName TEXT, StuID NUMBER);"
      }
    ],
    [
      {
        "question": "What is the student id of the student with first name \"Arthur\"?",
        "query": "SELECT stuid FROM student WHERE fname = \"Arthur\"",
        "schema": "CREATE TABLE Student (LName TEXT, Fname TEXT, StuID NUMBER); CREATE TABLE Member_of_club (StuID NUMBER, ClubID NUMBER); CREATE TABLE Club (ClubID NUMBER);"
      },
      {
        "question": "Who is his advisor?",
        "query": "SELECT advisor FROM student WHERE fname = \"Arthur\"",
        "schema": "CREATE TABLE Student (Advisor NUMBER, Fname TEXT, StuID NUMBER, LName TEXT); CREATE TABLE Member_of_club (StuID NUMBER, ClubID NUMBER); CREATE TABLE Club (ClubID NUMBER);"
      },
      {
        "question": "Tell me the clubs that have at least a member with advisor \"1121\".",
        "query": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.advisor = 1121",
        "schema": "CREATE TABLE Student (Advisor NUMBER, StuID NUMBER, LName TEXT, Fname TEXT); CREATE TABLE Club (ClubName TEXT, ClubID NUMBER); CREATE TABLE Member_of_club (ClubID NUMBER, StuID NUMBER);"
      }
    ],
    [
      {
        "question": "Tell me the age of the members of the club \"Tennis Club\".",
        "query": "SELECT t3.age FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = \"Tennis Club\"",
        "schema": "CREATE TABLE Member_of_club (ClubID NUMBER, StuID NUMBER); CREATE TABLE Club (ClubName TEXT, ClubDesc TEXT, ClubID NUMBER); CREATE TABLE Student (Age NUMBER, StuID NUMBER);"
      },
      {
        "question": "How about that of the club \"Bootup Baltimore\"?",
        "query": "SELECT t3.age FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = \"Bootup Baltimore\"",
        "schema": "CREATE TABLE Club (ClubName TEXT, ClubDesc TEXT, ClubID NUMBER); CREATE TABLE Member_of_club (ClubID NUMBER, StuID NUMBER); CREATE TABLE Student (StuID NUMBER, Fname TEXT, Age NUMBER);"
      },
      {
        "question": "Can you show me the average number?",
        "query": "SELECT avg(t3.age) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = \"Bootup Baltimore\"",
        "schema": "CREATE TABLE Student (Fname TEXT, StuID NUMBER, Age NUMBER); CREATE TABLE Member_of_club (ClubID NUMBER, StuID NUMBER); CREATE TABLE Club (ClubName TEXT, ClubID NUMBER, ClubDesc TEXT);"
      }
    ],
    [
      {
        "question": "Tell me the number of females in club \"Hopkins Student Enterprises\".",
        "query": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = \"Hopkins Student Enterprises\" AND t3.sex = \"F\"",
        "schema": "CREATE TABLE Member_of_club (StuID NUMBER, ClubID NUMBER); CREATE TABLE Club (ClubDesc TEXT, ClubID NUMBER, ClubName TEXT); CREATE TABLE Student (Sex TEXT, Fname TEXT, StuID NUMBER, LName TEXT);"
      },
      {
        "question": "How about that of the members with age > 18?",
        "query": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = \"Hopkins Student Enterprises\" AND t3.age > 18",
        "schema": "CREATE TABLE Club (ClubName TEXT, ClubID NUMBER, ClubDesc TEXT); CREATE TABLE Member_of_club (ClubID NUMBER, StuID NUMBER); CREATE TABLE Student (Age NUMBER, Fname TEXT, StuID NUMBER, LName TEXT, Sex TEXT);"
      },
      {
        "question": "I want to know the average age of members in that club.",
        "query": "SELECT avg(t3.age) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = \"Hopkins Student Enterprises\"",
        "schema": "CREATE TABLE Member_of_club (ClubID NUMBER, StuID NUMBER); CREATE TABLE Club (ClubID NUMBER, ClubDesc TEXT, ClubName TEXT); CREATE TABLE Student (Sex TEXT, Age NUMBER, LName TEXT, StuID NUMBER, Fname TEXT);"
      }
    ]
  ],
  "wedding": [
    [
      {
        "question": "How many churches are there?",
        "query": "SELECT count(*) FROM church",
        "schema": "CREATE TABLE people (People_ID NUMBER); CREATE TABLE wedding (Church_ID NUMBER); CREATE TABLE church (Name TEXT, Church_ID NUMBER, Continuation_of TEXT, Organized_by TEXT);"
      },
      {
        "question": "What if we only count those opened before 1850?",
        "query": "SELECT count(*) FROM church WHERE open_date < 1850",
        "schema": "CREATE TABLE church (Church_ID NUMBER, Continuation_of TEXT, Open_Date NUMBER, Organized_by TEXT, Name TEXT); CREATE TABLE wedding (Church_ID NUMBER); CREATE TABLE people (People_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show all churches.",
        "query": "SELECT * FROM church",
        "schema": "CREATE TABLE church (Name TEXT, Organized_by TEXT, Continuation_of TEXT, Church_ID NUMBER); CREATE TABLE people (People_ID NUMBER); CREATE TABLE wedding (Church_ID NUMBER);"
      },
      {
        "question": "Give me their name, open data, and organizer.",
        "query": "SELECT name , open_date , organized_by FROM church",
        "schema": "CREATE TABLE church (Open_Date NUMBER, Church_ID NUMBER, Name TEXT, Organized_by TEXT, Continuation_of TEXT); CREATE TABLE wedding (Church_ID NUMBER); CREATE TABLE people (People_ID NUMBER, Name TEXT);"
      }
    ],
    [
      {
        "question": "Show all churches.",
        "query": "SELECT * FROM church",
        "schema": "CREATE TABLE people (People_ID NUMBER); CREATE TABLE church (Name TEXT, Organized_by TEXT, Continuation_of TEXT, Church_ID NUMBER); CREATE TABLE wedding (Church_ID NUMBER);"
      },
      {
        "question": "Sort them in descending order of opening date.",
        "query": "SELECT * FROM church ORDER BY open_date DESC",
        "schema": "CREATE TABLE people (People_ID NUMBER); CREATE TABLE church (Open_Date NUMBER, Name TEXT, Organized_by TEXT, Church_ID NUMBER, Continuation_of TEXT); CREATE TABLE wedding (Church_ID NUMBER);"
      },
      {
        "question": "Show the church names.",
        "query": "SELECT name FROM church ORDER BY open_date DESC",
        "schema": "CREATE TABLE wedding (Church_ID NUMBER); CREATE TABLE church (Organized_by TEXT, Open_Date NUMBER, Continuation_of TEXT, Name TEXT, Church_ID NUMBER); CREATE TABLE people (People_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What is the opening date of each church?",
        "query": "SELECT open_date FROM church",
        "schema": "CREATE TABLE church (Church_ID NUMBER, Continuation_of TEXT, Name TEXT, Open_Date NUMBER);"
      },
      {
        "question": "Show the opening year in which at least two churches opened.",
        "query": "SELECT open_date FROM church GROUP BY open_date HAVING count(*) >= 2",
        "schema": "CREATE TABLE church (Name TEXT, Open_Date NUMBER, Continuation_of TEXT, Church_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Which churches opened between 1830 and 1840?",
        "query": "SELECT * FROM church WHERE open_date BETWEEN 1830 AND 1840",
        "schema": "CREATE TABLE church (Continuation_of TEXT, Open_Date NUMBER, Organized_by TEXT, Church_ID NUMBER, Name TEXT);"
      },
      {
        "question": "Show their names and organizers.",
        "query": "SELECT organized_by , name FROM church WHERE open_date BETWEEN 1830 AND 1840",
        "schema": "CREATE TABLE church (Continuation_of TEXT, Open_Date NUMBER, Name TEXT, Church_ID NUMBER, Organized_by TEXT); CREATE TABLE people (People_ID NUMBER, Name TEXT);"
      }
    ],
    [
      {
        "question": "What is the opening year of each church?",
        "query": "SELECT open_date FROM church",
        "schema": "CREATE TABLE church (Open_Date NUMBER, Church_ID NUMBER, Name TEXT);"
      },
      {
        "question": "Show all opening years and the number of churches that opened in that year.",
        "query": "SELECT open_date , count(*) FROM church GROUP BY open_date",
        "schema": "CREATE TABLE church (Open_Date NUMBER, Name TEXT, Church_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What is the opening date of each church?",
        "query": "SELECT open_date FROM church",
        "schema": "CREATE TABLE church (Open_Date NUMBER, Name TEXT, Church_ID NUMBER, Continuation_of TEXT);"
      },
      {
        "question": "Which churches opened most recently?",
        "query": "SELECT * FROM church ORDER BY open_date DESC LIMIT 1",
        "schema": "CREATE TABLE church (Church_ID NUMBER, Name TEXT, Open_Date NUMBER, Continuation_of TEXT);"
      },
      {
        "question": "Show the name and opening year for three churches that opened most recently.",
        "query": "SELECT name , open_date FROM church ORDER BY open_date DESC LIMIT 3",
        "schema": "CREATE TABLE church (Church_ID NUMBER, Continuation_of TEXT, Open_Date NUMBER, Name TEXT);"
      }
    ],
    [
      {
        "question": "Count the number of people in the record.",
        "query": "SELECT count(*) FROM people",
        "schema": "CREATE TABLE people (Name TEXT, People_ID NUMBER);"
      },
      {
        "question": "How many are female?",
        "query": "SELECT count(*) FROM people WHERE is_male = 'F'",
        "schema": "CREATE TABLE people (Name TEXT, Is_Male TEXT, People_ID NUMBER); CREATE TABLE wedding (Male_ID NUMBER, Female_ID NUMBER);"
      },
      {
        "question": "How many of them are older than 30?",
        "query": "SELECT count(*) FROM people WHERE is_male = 'F' AND age > 30",
        "schema": "CREATE TABLE people (Age NUMBER, Is_Male TEXT, Name TEXT, People_ID NUMBER); CREATE TABLE wedding (Male_ID NUMBER, Female_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show all people whose age is below 25.",
        "query": "SELECT * FROM people WHERE age < 25",
        "schema": "CREATE TABLE people (People_ID NUMBER, Is_Male TEXT, Name TEXT, Age NUMBER);"
      },
      {
        "question": "What are their countries?",
        "query": "SELECT country FROM people WHERE age < 25",
        "schema": "CREATE TABLE people (Is_Male TEXT, Name TEXT, Age NUMBER, People_ID NUMBER, Country TEXT);"
      },
      {
        "question": "Which of these countries also have people older than 30?",
        "query": "SELECT country FROM people WHERE age < 25 INTERSECT SELECT country FROM people WHERE age > 30",
        "schema": "CREATE TABLE people (People_ID NUMBER, Country TEXT, Age NUMBER, Is_Male TEXT, Name TEXT);"
      }
    ],
    [
      {
        "question": "What is the age of each person?",
        "query": "SELECT age FROM people",
        "schema": "CREATE TABLE people (Name TEXT, Age NUMBER, Is_Male TEXT, People_ID NUMBER);"
      },
      {
        "question": "What is the average age?",
        "query": "SELECT min(age) FROM people",
        "schema": "CREATE TABLE people (Age NUMBER, People_ID NUMBER, Is_Male TEXT, Name TEXT);"
      },
      {
        "question": "What are the minimum, maximum, and average age?",
        "query": "SELECT min(age) , max(age) , avg(age) FROM people",
        "schema": "CREATE TABLE people (Age NUMBER, Is_Male TEXT, People_ID NUMBER, Name TEXT);"
      }
    ],
    [
      {
        "question": "What is the average age of people?",
        "query": "SELECT min(age) FROM people",
        "schema": "CREATE TABLE people (Age NUMBER, People_ID NUMBER, Name TEXT, Is_Male TEXT); CREATE TABLE church (Church_ID NUMBER);"
      },
      {
        "question": "Show people whose age is smaller than the average.",
        "query": "SELECT * FROM people WHERE age < (SELECT avg(age) FROM people)",
        "schema": "CREATE TABLE church (Church_ID NUMBER); CREATE TABLE people (Name TEXT, People_ID NUMBER, Age NUMBER, Is_Male TEXT);"
      },
      {
        "question": "What are their names and countries?",
        "query": "SELECT name , country FROM people WHERE age < (SELECT avg(age) FROM people)",
        "schema": "CREATE TABLE people (Name TEXT, People_ID NUMBER, Is_Male TEXT, Age NUMBER, Country TEXT); CREATE TABLE church (Church_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show the information about weddings after year 2014.",
        "query": "SELECT * FROM wedding WHERE YEAR > 2014",
        "schema": "CREATE TABLE people (People_ID NUMBER, Is_Male TEXT); CREATE TABLE wedding (Church_ID NUMBER, Year NUMBER, Male_ID NUMBER, Female_ID NUMBER);"
      },
      {
        "question": "Show the male names in all weddings after 2014.",
        "query": "SELECT t2.name FROM wedding AS t1 JOIN people AS t2 ON t1.male_id = t2.people_id WHERE t1.year > 2014",
        "schema": "CREATE TABLE people (People_ID NUMBER, Name TEXT, Is_Male TEXT); CREATE TABLE wedding (Church_ID NUMBER, Female_ID NUMBER, Male_ID NUMBER, Year NUMBER);"
      },
      {
        "question": "Show the pair of male and female names in all weddings after year 2014.",
        "query": "SELECT t2.name , t3.name FROM wedding AS t1 JOIN people AS t2 ON t1.male_id = t2.people_id JOIN people AS t3 ON t1.female_id = t3.people_id WHERE t1.year > 2014",
        "schema": "CREATE TABLE people (Is_Male TEXT, People_ID NUMBER, Name TEXT); CREATE TABLE wedding (Female_ID NUMBER, Year NUMBER, Church_ID NUMBER, Male_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What are the ids of the males who had a wedding?",
        "query": "SELECT male_id FROM wedding",
        "schema": "CREATE TABLE people (People_ID NUMBER, Is_Male TEXT); CREATE TABLE wedding (Male_ID NUMBER, Female_ID NUMBER);"
      },
      {
        "question": "Show all the male people who have not had a wedding.",
        "query": "SELECT * FROM people WHERE is_male = 'T' AND people_id NOT IN (SELECT male_id FROM wedding)",
        "schema": "CREATE TABLE wedding (Male_ID NUMBER, Female_ID NUMBER); CREATE TABLE people (People_ID NUMBER, Is_Male TEXT);"
      },
      {
        "question": "What are their names and ages?",
        "query": "SELECT name , age FROM people WHERE is_male = 'T' AND people_id NOT IN (SELECT male_id FROM wedding)",
        "schema": "CREATE TABLE wedding (Female_ID NUMBER, Male_ID NUMBER); CREATE TABLE people (Age NUMBER, Name TEXT, Is_Male TEXT, People_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Which churches had a wedding in year 2015?",
        "query": "SELECT * FROM church AS t1 JOIN wedding AS t2 ON t1.church_id = t2.church_id WHERE t2.year = 2015",
        "schema": "CREATE TABLE wedding (Year NUMBER, Church_ID NUMBER); CREATE TABLE church (Open_Date NUMBER, Name TEXT, Church_ID NUMBER);"
      },
      {
        "question": "Show all names of the churches except for those.",
        "query": "SELECT name FROM church EXCEPT SELECT t1.name FROM church AS t1 JOIN wedding AS t2 ON t1.church_id = t2.church_id WHERE t2.year = 2015",
        "schema": "CREATE TABLE church (Church_ID NUMBER, Open_Date NUMBER, Name TEXT); CREATE TABLE wedding (Church_ID NUMBER, Year NUMBER);"
      }
    ],
    [
      {
        "question": "How many weddings were hosted in each church?",
        "query": "SELECT count(*) FROM church AS t1 JOIN wedding AS t2 ON t1.church_id = t2.church_id GROUP BY t1.church_id",
        "schema": "CREATE TABLE people (People_ID NUMBER); CREATE TABLE church (Church_ID NUMBER, Organized_by TEXT, Name TEXT); CREATE TABLE wedding (Church_ID NUMBER);"
      },
      {
        "question": "Show all church names that have hosted least two weddings.",
        "query": "SELECT t1.name FROM church AS t1 JOIN wedding AS t2 ON t1.church_id = t2.church_id GROUP BY t1.church_id HAVING count(*) >= 2",
        "schema": "CREATE TABLE church (Name TEXT, Church_ID NUMBER, Organized_by TEXT); CREATE TABLE wedding (Church_ID NUMBER); CREATE TABLE people (People_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show all female people from Canada.",
        "query": "SELECT * FROM people WHERE is_male = 'F' AND country = 'Canada'",
        "schema": "CREATE TABLE wedding (Female_ID NUMBER, Male_ID NUMBER); CREATE TABLE people (Name TEXT, Is_Male TEXT, People_ID NUMBER, Country TEXT);"
      },
      {
        "question": "Show those that had a wedding in year 2016.",
        "query": "SELECT * FROM wedding AS t1 JOIN people AS t2 ON t1.female_id = t2.people_id WHERE t1.year = 2016 AND t2.is_male = 'F' AND t2.country = 'Canada'",
        "schema": "CREATE TABLE people (Name TEXT, People_ID NUMBER, Is_Male TEXT, Country TEXT); CREATE TABLE wedding (Female_ID NUMBER, Male_ID NUMBER, Year NUMBER);"
      },
      {
        "question": "What are their names?",
        "query": "SELECT t2.name FROM wedding AS t1 JOIN people AS t2 ON t1.female_id = t2.people_id WHERE t1.year = 2016 AND t2.is_male = 'F' AND t2.country = 'Canada'",
        "schema": "CREATE TABLE wedding (Year NUMBER, Female_ID NUMBER, Male_ID NUMBER); CREATE TABLE people (Is_Male TEXT, People_ID NUMBER, Country TEXT, Name TEXT);"
      }
    ],
    [
      {
        "question": "How many weddings are there in total?",
        "query": "SELECT count(*) FROM wedding",
        "schema": "CREATE TABLE people (People_ID NUMBER); CREATE TABLE wedding (Church_ID NUMBER, Year NUMBER, Male_ID NUMBER, Female_ID NUMBER); CREATE TABLE church (Church_ID NUMBER);"
      },
      {
        "question": "What about in the year 2016?",
        "query": "SELECT count(*) FROM wedding WHERE YEAR = 2016",
        "schema": "CREATE TABLE church (Church_ID NUMBER); CREATE TABLE wedding (Male_ID NUMBER, Church_ID NUMBER, Female_ID NUMBER, Year NUMBER); CREATE TABLE people (People_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show all people older than 30.",
        "query": "SELECT * FROM people WHERE age > 30",
        "schema": "CREATE TABLE people (People_ID NUMBER, Age NUMBER, Is_Male TEXT, Name TEXT);"
      },
      {
        "question": "Show all the weddings of people older than 30.",
        "query": "SELECT * FROM wedding AS t1 JOIN people AS t2 ON t1.male_id = t2.people_id JOIN people AS t3 ON t1.female_id = t3.people_id WHERE t2.age > 30 OR t3.age > 30",
        "schema": "CREATE TABLE people (Is_Male TEXT, People_ID NUMBER, Age NUMBER, Name TEXT); CREATE TABLE wedding (Female_ID NUMBER, Year NUMBER, Male_ID NUMBER);"
      },
      {
        "question": "Show the church names for the weddings of all people older than 30.",
        "query": "SELECT t4.name FROM wedding AS t1 JOIN people AS t2 ON t1.male_id = t2.people_id JOIN people AS t3 ON t1.female_id = t3.people_id JOIN church AS t4 ON t4.church_id = t1.church_id WHERE t2.age > 30 OR t3.age > 30",
        "schema": "CREATE TABLE church (Name TEXT, Church_ID NUMBER); CREATE TABLE wedding (Year NUMBER, Male_ID NUMBER, Female_ID NUMBER, Church_ID NUMBER); CREATE TABLE people (Is_Male TEXT, Age NUMBER, Name TEXT, People_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show the country of each person.",
        "query": "SELECT country FROM people",
        "schema": "CREATE TABLE people (Name TEXT, Country TEXT, People_ID NUMBER);"
      },
      {
        "question": "Count the number of people from each country.",
        "query": "SELECT count(*) FROM people GROUP BY country",
        "schema": "CREATE TABLE people (Country TEXT, Name TEXT, People_ID NUMBER);"
      },
      {
        "question": "Also show the country name.",
        "query": "SELECT country , count(*) FROM people GROUP BY country",
        "schema": "CREATE TABLE people (Country TEXT, Name TEXT, People_ID NUMBER);"
      }
    ]
  ],
  "debate": [
    [
      {
        "question": "How many people are there?",
        "query": "SELECT count(*) FROM people",
        "schema": "CREATE TABLE people (Party TEXT, Name TEXT, People_ID NUMBER, District TEXT); CREATE TABLE debate (Debate_ID NUMBER); CREATE TABLE debate_people (Debate_ID NUMBER, Affirmative NUMBER, Negative NUMBER);"
      },
      {
        "question": "How many people aged 40?",
        "query": "SELECT count(*) FROM people WHERE age = 40",
        "schema": "CREATE TABLE debate_people (Affirmative NUMBER, Debate_ID NUMBER, Negative NUMBER); CREATE TABLE people (Age NUMBER, Party TEXT, People_ID NUMBER, District TEXT, Name TEXT); CREATE TABLE debate (Debate_ID NUMBER);"
      },
      {
        "question": "How many people aged either 35 or 36?",
        "query": "SELECT count(*) FROM people WHERE age = 35 OR age = 36",
        "schema": "CREATE TABLE people (People_ID NUMBER, Name TEXT, Party TEXT, District TEXT, Age NUMBER); CREATE TABLE debate_people (Negative NUMBER, Affirmative NUMBER, Debate_ID NUMBER); CREATE TABLE debate (Debate_ID NUMBER);"
      },
      {
        "question": "Please show their names.",
        "query": "SELECT name FROM people WHERE age = 35 OR age = 36",
        "schema": "CREATE TABLE debate_people (Debate_ID NUMBER, Affirmative NUMBER, Negative NUMBER); CREATE TABLE debate (Debate_ID NUMBER); CREATE TABLE people (People_ID NUMBER, Name TEXT, Party TEXT, District TEXT, Age NUMBER);"
      }
    ],
    [
      {
        "question": "Who is the oldest person?",
        "query": "SELECT name FROM people ORDER BY age DESC LIMIT 1",
        "schema": "CREATE TABLE debate (Date TEXT, Debate_ID NUMBER); CREATE TABLE people (People_ID NUMBER, Name TEXT, Age NUMBER);"
      },
      {
        "question": "Who is the youngest person?",
        "query": "SELECT name FROM people ORDER BY age ASC LIMIT 1",
        "schema": "CREATE TABLE debate (Debate_ID NUMBER, Date TEXT); CREATE TABLE people (Age NUMBER, People_ID NUMBER, Name TEXT);"
      },
      {
        "question": "What is his party?",
        "query": "SELECT party FROM people ORDER BY age ASC LIMIT 1",
        "schema": "CREATE TABLE people (People_ID NUMBER, Party TEXT, Age NUMBER, Name TEXT); CREATE TABLE debate (Debate_ID NUMBER, Date TEXT);"
      }
    ],
    [
      {
        "question": "How many parties are there?",
        "query": "SELECT count(DISTINCT party) FROM people",
        "schema": "CREATE TABLE debate (Venue TEXT, Debate_ID NUMBER); CREATE TABLE people (Party TEXT, People_ID NUMBER);"
      },
      {
        "question": "How many people are there in each party?",
        "query": "SELECT party, count(*) FROM people GROUP BY party",
        "schema": "CREATE TABLE people (Name TEXT, Party TEXT, People_ID NUMBER); CREATE TABLE debate (Venue TEXT, Debate_ID NUMBER); CREATE TABLE debate_people (Negative NUMBER, Affirmative NUMBER);"
      },
      {
        "question": "Which party has the most people?",
        "query": "SELECT party FROM people GROUP BY party ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE debate (Venue TEXT, Debate_ID NUMBER); CREATE TABLE people (Party TEXT, People_ID NUMBER, Name TEXT); CREATE TABLE debate_people (Affirmative NUMBER, Negative NUMBER);"
      }
    ],
    [
      {
        "question": "How many people have been on the negative side?",
        "query": "SELECT count(*) FROM debate_people AS t1 JOIN people AS t2 ON t1.negative = t2.people_id",
        "schema": "CREATE TABLE people (People_ID NUMBER, Name TEXT); CREATE TABLE debate (Debate_ID NUMBER); CREATE TABLE debate_people (Affirmative NUMBER, Negative NUMBER, Debate_ID NUMBER);"
      },
      {
        "question": "How about the affirmative side?",
        "query": "SELECT count(*) FROM debate_people AS t1 JOIN people AS t2 ON t1.affirmative = t2.people_id",
        "schema": "CREATE TABLE debate (Debate_ID NUMBER); CREATE TABLE debate_people (Affirmative NUMBER, Debate_ID NUMBER, Negative NUMBER); CREATE TABLE people (Name TEXT, People_ID NUMBER);"
      },
      {
        "question": "Please give their full names.",
        "query": "SELECT t2.name FROM debate_people AS t1 JOIN people AS t2 ON t1.affirmative = t2.people_id",
        "schema": "CREATE TABLE people (Name TEXT, People_ID NUMBER); CREATE TABLE debate_people (Negative NUMBER, Affirmative NUMBER, Debate_ID NUMBER); CREATE TABLE debate (Debate_ID NUMBER);"
      },
      {
        "question": "Please also show the dates and venues of debates.",
        "query": "SELECT t3.name , t2.date , t2.venue FROM debate_people AS t1 JOIN debate AS t2 ON t1.debate_id = t2.debate_id JOIN people AS t3 ON t1.affirmative = t3.people_id",
        "schema": "CREATE TABLE debate_people (Affirmative NUMBER, Negative NUMBER, Debate_ID NUMBER); CREATE TABLE debate (Venue TEXT, Debate_ID NUMBER, Date TEXT); CREATE TABLE people (Name TEXT, People_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show the names of people that won the debate on the nagative side.",
        "query": "SELECT t2.name FROM debate_people AS t1 JOIN people AS t2 ON t1.negative = t2.people_id WHERE if_affirmative_win = \"F\"",
        "schema": "CREATE TABLE debate (Debate_ID NUMBER); CREATE TABLE debate_people (Affirmative NUMBER, If_Affirmative_Win OTHERS, Debate_ID NUMBER, Negative NUMBER); CREATE TABLE people (Name TEXT, People_ID NUMBER);"
      },
      {
        "question": "Please list the names of people who have been on the negative side.",
        "query": "SELECT t2.name FROM debate_people AS t1 JOIN people AS t2 ON t1.negative = t2.people_id",
        "schema": "CREATE TABLE debate (Debate_ID NUMBER); CREATE TABLE people (Name TEXT, People_ID NUMBER); CREATE TABLE debate_people (Negative NUMBER, Debate_ID NUMBER, If_Affirmative_Win OTHERS, Affirmative NUMBER);"
      },
      {
        "question": "Please also show the dates and venues of debates",
        "query": "SELECT t3.name , t2.date , t2.venue FROM debate_people AS t1 JOIN debate AS t2 ON t1.debate_id = t2.debate_id JOIN people AS t3 ON t1.negative = t3.people_id",
        "schema": "CREATE TABLE debate_people (Debate_ID NUMBER, Affirmative NUMBER, If_Affirmative_Win OTHERS, Negative NUMBER); CREATE TABLE debate (Debate_ID NUMBER, Date TEXT, Venue TEXT); CREATE TABLE people (People_ID NUMBER, Name TEXT);"
      },
      {
        "question": "Could you please order the results in ascending alphabetical order of name?",
        "query": "SELECT t3.name , t2.date , t2.venue FROM debate_people AS t1 JOIN debate AS t2 ON t1.debate_id = t2.debate_id JOIN people AS t3 ON t1.negative = t3.people_id ORDER BY t3.name ASC",
        "schema": "CREATE TABLE people (Name TEXT, People_ID NUMBER); CREATE TABLE debate (Venue TEXT, Date TEXT, Debate_ID NUMBER); CREATE TABLE debate_people (If_Affirmative_Win OTHERS, Debate_ID NUMBER, Negative NUMBER, Affirmative NUMBER);"
      }
    ],
    [
      {
        "question": "How many people have ever been on the affirmative side of debates?",
        "query": "SELECT count(*) FROM people WHERE people_id IN (SELECT affirmative FROM debate_people)",
        "schema": "CREATE TABLE debate (Debate_ID NUMBER); CREATE TABLE debate_people (Debate_ID NUMBER, Affirmative NUMBER, If_Affirmative_Win OTHERS, Negative NUMBER); CREATE TABLE people (Name TEXT, People_ID NUMBER);"
      },
      {
        "question": "What is the average size of the audience in a debate?",
        "query": "SELECT avg(num_of_audience) FROM debate",
        "schema": "CREATE TABLE debate_people (Negative NUMBER, Debate_ID NUMBER, If_Affirmative_Win OTHERS, Affirmative NUMBER); CREATE TABLE people (Name TEXT, People_ID NUMBER); CREATE TABLE debate (Venue TEXT, Num_of_Audience NUMBER, Debate_ID NUMBER);"
      },
      {
        "question": "How many debates have an audience size bigger than 200?",
        "query": "SELECT count(*) FROM debate WHERE num_of_audience > 200",
        "schema": "CREATE TABLE debate_people (Negative NUMBER, If_Affirmative_Win OTHERS, Debate_ID NUMBER, Affirmative NUMBER); CREATE TABLE debate (Debate_ID NUMBER, Venue TEXT, Num_of_Audience NUMBER); CREATE TABLE people (Name TEXT, People_ID NUMBER);"
      },
      {
        "question": "Show the names of people that are on the affirmative side of these debates.",
        "query": "SELECT t3.name FROM debate_people AS t1 JOIN debate AS t2 ON t1.debate_id = t2.debate_id JOIN people AS t3 ON t1.affirmative = t3.people_id WHERE t2.num_of_audience > 200",
        "schema": "CREATE TABLE debate_people (Debate_ID NUMBER, Affirmative NUMBER, If_Affirmative_Win OTHERS, Negative NUMBER); CREATE TABLE debate (Debate_ID NUMBER, Venue TEXT, Num_of_Audience NUMBER); CREATE TABLE people (People_ID NUMBER, Name TEXT);"
      }
    ],
    [
      {
        "question": "How many people have ever been on the affirmative side of debates?",
        "query": "SELECT count(*) FROM people WHERE people_id IN (SELECT affirmative FROM debate_people)",
        "schema": "CREATE TABLE debate_people (If_Affirmative_Win OTHERS, Affirmative NUMBER, Debate_ID NUMBER, Negative NUMBER); CREATE TABLE debate (Debate_ID NUMBER); CREATE TABLE people (Name TEXT, People_ID NUMBER);"
      },
      {
        "question": "Please show their names.",
        "query": "SELECT name FROM people WHERE people_id IN (SELECT affirmative FROM debate_people)",
        "schema": "CREATE TABLE debate_people (Affirmative NUMBER, Debate_ID NUMBER, If_Affirmative_Win OTHERS, Negative NUMBER); CREATE TABLE people (People_ID NUMBER, Name TEXT); CREATE TABLE debate (Debate_ID NUMBER);"
      },
      {
        "question": "Please also show the number of times they have been on the affirmative side of debates.",
        "query": "SELECT t2.name , count(*) FROM debate_people AS t1 JOIN people AS t2 ON t1.affirmative = t2.people_id GROUP BY t2.name",
        "schema": "CREATE TABLE debate (Date TEXT, Debate_ID NUMBER); CREATE TABLE debate_people (Negative NUMBER, If_Affirmative_Win OTHERS, Debate_ID NUMBER, Affirmative NUMBER); CREATE TABLE people (Name TEXT, People_ID NUMBER);"
      }
    ],
    [
      {
        "question": "How many people have ever been on the negative side of debates?",
        "query": "SELECT count(DISTINCT t2.people_id) FROM debate_people AS t1 JOIN people AS t2 ON t1.negative = t2.people_id",
        "schema": "CREATE TABLE debate_people (Debate_ID NUMBER, Negative NUMBER, Affirmative NUMBER); CREATE TABLE debate (Debate_ID NUMBER); CREATE TABLE people (Name TEXT, People_ID NUMBER);"
      },
      {
        "question": "How many times have they been on the negative side of debates?",
        "query": "SELECT t2.name, count(*) FROM debate_people AS t1 JOIN people AS t2 ON t1.negative = t2.people_id GROUP BY t2.name",
        "schema": "CREATE TABLE debate (Date TEXT, Debate_ID NUMBER); CREATE TABLE people (Name TEXT, People_ID NUMBER); CREATE TABLE debate_people (Affirmative NUMBER, Debate_ID NUMBER, Negative NUMBER);"
      },
      {
        "question": "How many of them have been on the negative side of debates at least twice?",
        "query": "SELECT count(DISTINCT t2.name) FROM debate_people AS t1 JOIN people AS t2 ON t1.negative = t2.people_id GROUP BY t2.name HAVING count(*) >= 2",
        "schema": "CREATE TABLE people (Name TEXT, People_ID NUMBER); CREATE TABLE debate (Debate_ID NUMBER, Date TEXT); CREATE TABLE debate_people (Debate_ID NUMBER, Affirmative NUMBER, Negative NUMBER);"
      },
      {
        "question": "Show their names.",
        "query": "SELECT t2.name FROM debate_people AS t1 JOIN people AS t2 ON t1.negative = t2.people_id GROUP BY t2.name HAVING count(*) >= 2",
        "schema": "CREATE TABLE debate_people (Debate_ID NUMBER, Affirmative NUMBER, Negative NUMBER); CREATE TABLE debate (Debate_ID NUMBER, Date TEXT); CREATE TABLE people (People_ID NUMBER, Name TEXT);"
      }
    ]
  ],
  "flight_company": [
    [
      {
        "question": "Show me all the companies.",
        "query": "SELECT name FROM operate_company",
        "schema": "CREATE TABLE operate_company (Type TEXT, name TEXT, id NUMBER); CREATE TABLE flight (company_id NUMBER); CREATE TABLE airport (id NUMBER);"
      },
      {
        "question": "Which of these companies operate flights?",
        "query": "SELECT DISTINCT name FROM operate_company AS t1 JOIN flight AS t2 ON t1.id = t2.company_id",
        "schema": "CREATE TABLE operate_company (Incorporated_in TEXT, id NUMBER, Type TEXT, Principal_activities TEXT, name TEXT); CREATE TABLE airport (id NUMBER); CREATE TABLE flight (id NUMBER, company_id NUMBER);"
      },
      {
        "question": "Which companies operated flights with velocity less than 200?",
        "query": "SELECT DISTINCT name FROM operate_company AS t1 JOIN flight AS t2 ON t1.id = t2.company_id WHERE t2.velocity < 200",
        "schema": "CREATE TABLE flight (Velocity NUMBER, id NUMBER, company_id NUMBER); CREATE TABLE operate_company (Incorporated_in TEXT, Type TEXT, name TEXT, id NUMBER, Principal_activities TEXT); CREATE TABLE airport (id NUMBER);"
      },
      {
        "question": "What are the distinct types of these companies?",
        "query": "SELECT DISTINCT t1.type FROM operate_company AS t1 JOIN flight AS t2 ON t1.id = t2.company_id WHERE t2.velocity < 200",
        "schema": "CREATE TABLE flight (Velocity NUMBER, id NUMBER, company_id NUMBER); CREATE TABLE operate_company (name TEXT, id NUMBER, Incorporated_in TEXT, Principal_activities TEXT, Type TEXT); CREATE TABLE airport (id NUMBER);"
      }
    ],
    [
      {
        "question": "List the names of all the companies.",
        "query": "SELECT name FROM operate_company",
        "schema": "CREATE TABLE flight (company_id NUMBER); CREATE TABLE operate_company (Type TEXT, name TEXT, id NUMBER);"
      },
      {
        "question": "How many flights did each of these companies operate?",
        "query": "SELECT t1.name, count(*) FROM operate_company AS t1 JOIN flight AS t2 ON t1.id = t2.company_id GROUP BY t1.id",
        "schema": "CREATE TABLE flight (id NUMBER, company_id NUMBER); CREATE TABLE airport (id NUMBER); CREATE TABLE operate_company (id NUMBER, Type TEXT, Incorporated_in TEXT, name TEXT);"
      },
      {
        "question": "Show me only the companies that operated more than one flight.",
        "query": "SELECT t1.name, count(*) FROM operate_company AS t1 JOIN flight AS t2 ON t1.id = t2.company_id GROUP BY t1.id HAVING count(*) > 1",
        "schema": "CREATE TABLE operate_company (name TEXT, Incorporated_in TEXT, Type TEXT, id NUMBER); CREATE TABLE airport (id NUMBER); CREATE TABLE flight (company_id NUMBER, id NUMBER);"
      },
      {
        "question": "Show me only the ids and the names of these companies.",
        "query": "SELECT t1.id , t1.name FROM operate_company AS t1 JOIN flight AS t2 ON t1.id = t2.company_id GROUP BY t1.id HAVING count(*) > 1",
        "schema": "CREATE TABLE flight (id NUMBER, company_id NUMBER); CREATE TABLE airport (id NUMBER); CREATE TABLE operate_company (name TEXT, Incorporated_in TEXT, Type TEXT, id NUMBER);"
      }
    ],
    [
      {
        "question": "Show me the names of all the airports",
        "query": "SELECT name FROM airport",
        "schema": "CREATE TABLE flight (airport_id NUMBER); CREATE TABLE airport (name TEXT, id NUMBER);"
      },
      {
        "question": "What are the number of flights for each of these airports?",
        "query": "SELECT name, count(*) FROM airport AS t1 JOIN flight AS t2 ON t1.id = t2.airport_id GROUP BY t1.id",
        "schema": "CREATE TABLE airport (id NUMBER, name TEXT); CREATE TABLE flight (airport_id NUMBER, id NUMBER);"
      },
      {
        "question": "Which airport had the most number of flights?",
        "query": "SELECT t1.name FROM airport AS t1 JOIN flight AS t2 ON t1.id = t2.airport_id GROUP BY t1.id ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE flight (airport_id NUMBER, id NUMBER); CREATE TABLE airport (id NUMBER, name TEXT);"
      },
      {
        "question": "Show me the id and IATA code of this airport as well.",
        "query": "SELECT t1.id, t1.name, t1.iata FROM airport AS t1 JOIN flight AS t2 ON t1.id = t2.airport_id GROUP BY t1.id ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE airport (Country TEXT, id NUMBER, IATA TEXT, name TEXT); CREATE TABLE flight (id NUMBER, airport_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show me the names of all the pilots.",
        "query": "SELECT DISTINCT pilot FROM flight",
        "schema": "CREATE TABLE flight (Pilot TEXT);"
      },
      {
        "question": "Which of these pilots piloted a flight in the United States?",
        "query": "SELECT DISTINCT t2.pilot FROM airport AS t1 JOIN flight AS t2 ON t1.id = t2.airport_id WHERE t1.country = \"United States\"",
        "schema": "CREATE TABLE airport (Country TEXT, id NUMBER, name TEXT); CREATE TABLE flight (id NUMBER, Pilot TEXT, Velocity NUMBER, airport_id NUMBER);"
      },
      {
        "question": "What about the pilots who did it at 'Billund Airport'?",
        "query": "SELECT DISTINCT t2.pilot FROM airport AS t1 JOIN flight AS t2 ON t1.id = t2.airport_id WHERE t1.name = \"Billund Airport\"",
        "schema": "CREATE TABLE flight (Pilot TEXT, Velocity NUMBER, id NUMBER, airport_id NUMBER); CREATE TABLE airport (City TEXT, Country TEXT, id NUMBER, name TEXT);"
      },
      {
        "question": "Which pilots did either one of those?",
        "query": "SELECT DISTINCT t2.pilot FROM airport AS t1 JOIN flight AS t2 ON t1.id = t2.airport_id WHERE t1.country = 'United States' OR t1.name = 'Billund Airport'",
        "schema": "CREATE TABLE flight (airport_id NUMBER, id NUMBER, Pilot TEXT, Velocity NUMBER); CREATE TABLE airport (City TEXT, Country TEXT, name TEXT, id NUMBER);"
      }
    ],
    [
      {
        "question": "Show me all the company names.",
        "query": "SELECT name FROM operate_company",
        "schema": "CREATE TABLE flight (company_id NUMBER); CREATE TABLE operate_company (id NUMBER, name TEXT, Type TEXT); CREATE TABLE airport (id NUMBER, name TEXT);"
      },
      {
        "question": "What are the types of these companies?",
        "query": "SELECT name, TYPE FROM operate_company",
        "schema": "CREATE TABLE flight (company_id NUMBER); CREATE TABLE airport (id NUMBER, name TEXT); CREATE TABLE operate_company (id NUMBER, name TEXT, Type TEXT);"
      },
      {
        "question": "How many companies have type 'Joint Venture'?",
        "query": "SELECT count(*) FROM operate_company GROUP BY TYPE HAVING TYPE = 'Joint Venture'",
        "schema": "CREATE TABLE operate_company (name TEXT, id NUMBER, Type TEXT); CREATE TABLE flight (company_id NUMBER); CREATE TABLE airport (id NUMBER, name TEXT);"
      },
      {
        "question": "Tell me the most common company type.",
        "query": "SELECT TYPE , count(*) FROM operate_company GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE operate_company (name TEXT, id NUMBER, Type TEXT); CREATE TABLE airport (name TEXT, id NUMBER); CREATE TABLE flight (company_id NUMBER);"
      }
    ],
    [
      {
        "question": "List the names of all the pilots.",
        "query": "SELECT DISTINCT pilot FROM flight",
        "schema": "CREATE TABLE flight (Pilot TEXT);"
      },
      {
        "question": "Which companies did Thompson fly for?",
        "query": "SELECT DISTINCT t2.name FROM flight AS t1 JOIN operate_company AS t2 ON t1.company_id = t2.id AND t1.pilot = 'Thompson'",
        "schema": "CREATE TABLE operate_company (name TEXT, Incorporated_in TEXT, id NUMBER, Type TEXT); CREATE TABLE flight (id NUMBER, Pilot TEXT, company_id NUMBER);"
      },
      {
        "question": "List all the airports where he drove an aircraft.",
        "query": "SELECT DISTINCT t2.name FROM flight AS t1 JOIN airport AS t2 ON t1.airport_id = t2.id AND t1.pilot = 'Thompson'",
        "schema": "CREATE TABLE operate_company (Type TEXT, id NUMBER, Principal_activities TEXT, Incorporated_in TEXT, name TEXT); CREATE TABLE airport (name TEXT, id NUMBER); CREATE TABLE flight (airport_id NUMBER, company_id NUMBER, Pilot TEXT, id NUMBER);"
      },
      {
        "question": "What is the total number of airports where he has not driven an aircraft?",
        "query": "SELECT count(*) FROM airport WHERE id NOT IN ( SELECT airport_id FROM flight WHERE pilot = 'Thompson' );",
        "schema": "CREATE TABLE flight (company_id NUMBER, airport_id NUMBER, Pilot TEXT, id NUMBER); CREATE TABLE operate_company (Incorporated_in TEXT, Principal_activities TEXT, name TEXT, Type TEXT, id NUMBER); CREATE TABLE airport (name TEXT, id NUMBER);"
      }
    ],
    [
      {
        "question": "Show me the names of all the pilots",
        "query": "SELECT pilot FROM flight",
        "schema": "CREATE TABLE flight (id NUMBER, Pilot TEXT);"
      },
      {
        "question": "Which of these pilots flied for a company that runs 'Cargo' activities?",
        "query": "SELECT * FROM flight AS t1 JOIN operate_company AS t2 ON t1.company_id = t2.id WHERE principal_activities = 'Cargo'",
        "schema": "CREATE TABLE operate_company (Incorporated_in TEXT, name TEXT, Type TEXT, Principal_activities TEXT, id NUMBER); CREATE TABLE flight (company_id NUMBER, Velocity NUMBER, Vehicle_Flight_number TEXT, id NUMBER, Pilot TEXT);"
      },
      {
        "question": "Which pilots flied for a company that runs 'Catering services' activities?",
        "query": "SELECT * FROM flight AS t1 JOIN operate_company AS t2 ON t1.company_id = t2.id WHERE principal_activities = 'Catering services'",
        "schema": "CREATE TABLE flight (id NUMBER, company_id NUMBER, Velocity NUMBER, Pilot TEXT, Vehicle_Flight_number TEXT); CREATE TABLE operate_company (name TEXT, Principal_activities TEXT, id NUMBER, Incorporated_in TEXT, Type TEXT);"
      },
      {
        "question": "Which pilots flied for companies that ran both of those activities?",
        "query": "SELECT t2.pilot FROM operate_company AS t1 JOIN flight AS t2 ON t1.id = t2.company_id WHERE t1.principal_activities = 'Cargo' INTERSECT SELECT t2.pilot FROM operate_company AS t1 JOIN flight AS t2 ON t1.id = t2.company_id WHERE t1.principal_activities = 'Catering services'",
        "schema": "CREATE TABLE operate_company (Type TEXT, Incorporated_in TEXT, name TEXT, Principal_activities TEXT, id NUMBER); CREATE TABLE flight (id NUMBER, Velocity NUMBER, Pilot TEXT, company_id NUMBER, Vehicle_Flight_number TEXT);"
      }
    ],
    [
      {
        "question": "Show me all the airports.",
        "query": "SELECT * FROM airport",
        "schema": "CREATE TABLE flight (airport_id NUMBER, id NUMBER); CREATE TABLE operate_company (id NUMBER); CREATE TABLE airport (id NUMBER, ICAO TEXT, name TEXT);"
      },
      {
        "question": "Show me the names of all airports.",
        "query": "SELECT name FROM airport",
        "schema": "CREATE TABLE airport (name TEXT, ICAO TEXT, id NUMBER); CREATE TABLE flight (airport_id NUMBER, id NUMBER); CREATE TABLE operate_company (id NUMBER);"
      },
      {
        "question": "Which of these airports start with the word 'international'?",
        "query": "SELECT name FROM airport WHERE name LIKE \"international%\"",
        "schema": "CREATE TABLE flight (airport_id NUMBER, id NUMBER); CREATE TABLE airport (ICAO TEXT, name TEXT, id NUMBER, Country TEXT); CREATE TABLE operate_company (id NUMBER);"
      },
      {
        "question": "What about the ones that contains the word \"international\"?",
        "query": "SELECT name FROM airport WHERE name LIKE '%international%'",
        "schema": "CREATE TABLE flight (airport_id NUMBER, id NUMBER); CREATE TABLE operate_company (id NUMBER); CREATE TABLE airport (Country TEXT, ICAO TEXT, id NUMBER, name TEXT);"
      }
    ],
    [
      {
        "question": "Tell me about all the airports.",
        "query": "SELECT * FROM airport",
        "schema": "CREATE TABLE airport (name TEXT, id NUMBER, City TEXT); CREATE TABLE operate_company (id NUMBER); CREATE TABLE flight (id NUMBER, airport_id NUMBER);"
      },
      {
        "question": "Tell me the names of these airports.",
        "query": "SELECT name FROM airport",
        "schema": "CREATE TABLE airport (id NUMBER, City TEXT, name TEXT); CREATE TABLE flight (airport_id NUMBER, id NUMBER); CREATE TABLE operate_company (id NUMBER);"
      },
      {
        "question": "How many companies operate in \"Akureyi airport\"?",
        "query": "SELECT count(t2.company_id) FROM airport AS t1 JOIN flight AS t2 ON t1.id = t2.airport_id GROUP BY t1.id HAVING t1.name = \"Akureyri Airport\"",
        "schema": "CREATE TABLE airport (id NUMBER, City TEXT, name TEXT); CREATE TABLE flight (airport_id NUMBER, id NUMBER, company_id NUMBER); CREATE TABLE operate_company (Type TEXT, name TEXT, Incorporated_in TEXT, Principal_activities TEXT, id NUMBER);"
      },
      {
        "question": "What about for each airport?",
        "query": "SELECT t3.id , count(*) FROM operate_company AS t1 JOIN flight AS t2 ON t1.id = t2.company_id JOIN airport AS t3 ON t2.airport_id = t3.id GROUP BY t3.id",
        "schema": "CREATE TABLE operate_company (id NUMBER, name TEXT, Incorporated_in TEXT, Type TEXT, Principal_activities TEXT); CREATE TABLE airport (id NUMBER, name TEXT, City TEXT); CREATE TABLE flight (id NUMBER, airport_id NUMBER, company_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show me everything about the airports.",
        "query": "SELECT * FROM airport",
        "schema": "CREATE TABLE airport (name TEXT, id NUMBER); CREATE TABLE flight (airport_id NUMBER, id NUMBER); CREATE TABLE operate_company (id NUMBER);"
      },
      {
        "question": "What are the countries with these airports?",
        "query": "SELECT DISTINCT country FROM airport",
        "schema": "CREATE TABLE operate_company (id NUMBER); CREATE TABLE airport (Country TEXT, id NUMBER, name TEXT); CREATE TABLE flight (airport_id NUMBER, id NUMBER);"
      },
      {
        "question": "Which of these countries have more than 1 airport?",
        "query": "SELECT country FROM airport GROUP BY country HAVING count(*) > 1",
        "schema": "CREATE TABLE operate_company (id NUMBER); CREATE TABLE flight (airport_id NUMBER, id NUMBER); CREATE TABLE airport (id NUMBER, Country TEXT, name TEXT);"
      },
      {
        "question": "Which of them have more than 2?",
        "query": "SELECT country FROM airport GROUP BY country HAVING count(*) > 2",
        "schema": "CREATE TABLE operate_company (id NUMBER); CREATE TABLE flight (id NUMBER, airport_id NUMBER); CREATE TABLE airport (Country TEXT, name TEXT, id NUMBER);"
      }
    ]
  ],
  "election": [
    [
      {
        "question": "What is all the information about the counties?",
        "query": "SELECT * FROM county",
        "schema": "CREATE TABLE county (County_Id NUMBER, County_name TEXT); CREATE TABLE election (District NUMBER);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT count(*) FROM county",
        "schema": "CREATE TABLE county (Zip_code TEXT, County_Id NUMBER, Population NUMBER, County_name TEXT); CREATE TABLE election (District NUMBER);"
      }
    ],
    [
      {
        "question": "Show me all the information about counties.",
        "query": "SELECT * FROM county",
        "schema": "CREATE TABLE election (District NUMBER); CREATE TABLE county (County_Id NUMBER, County_name TEXT);"
      },
      {
        "question": "I want to now the names of these counties.",
        "query": "SELECT county_name FROM county",
        "schema": "CREATE TABLE county (County_Id NUMBER, County_name TEXT); CREATE TABLE election (District NUMBER);"
      },
      {
        "question": "I also want to know their population.",
        "query": "SELECT population FROM county",
        "schema": "CREATE TABLE county (County_Id NUMBER, County_name TEXT, Population NUMBER); CREATE TABLE election (District NUMBER);"
      }
    ],
    [
      {
        "question": "Show me all the information about counties.",
        "query": "SELECT * FROM county",
        "schema": "CREATE TABLE county (County_name TEXT, County_Id NUMBER); CREATE TABLE election (District NUMBER);"
      },
      {
        "question": "I also want to know their population.",
        "query": "SELECT population FROM county",
        "schema": "CREATE TABLE election (District NUMBER); CREATE TABLE county (County_Id NUMBER, County_name TEXT, Population NUMBER);"
      },
      {
        "question": "Tell me the average number.",
        "query": "SELECT avg(population) FROM county",
        "schema": "CREATE TABLE county (County_name TEXT, Population NUMBER, County_Id NUMBER); CREATE TABLE election (District NUMBER);"
      }
    ],
    [
      {
        "question": "Please show me the information of population about all counties.",
        "query": "SELECT population FROM county",
        "schema": "CREATE TABLE county (County_name TEXT, Population NUMBER, County_Id NUMBER);"
      },
      {
        "question": "What's the maximum one?",
        "query": "SELECT max(population) FROM county",
        "schema": "CREATE TABLE county (County_Id NUMBER, Population NUMBER, County_name TEXT); CREATE TABLE election (District NUMBER);"
      },
      {
        "question": "I want to know the minimum one.",
        "query": "SELECT min(population) FROM county",
        "schema": "CREATE TABLE county (County_name TEXT, County_Id NUMBER, Population NUMBER); CREATE TABLE election (District NUMBER);"
      }
    ],
    [
      {
        "question": "Please tell me all the information about elections.",
        "query": "SELECT * FROM election",
        "schema": "CREATE TABLE election (First_Elected NUMBER, Party NUMBER, Election_ID NUMBER, Committee TEXT);"
      },
      {
        "question": "I only want to know the districts.",
        "query": "SELECT district FROM election",
        "schema": "CREATE TABLE election (Committee TEXT, Election_ID NUMBER, First_Elected NUMBER, Party NUMBER, District NUMBER); CREATE TABLE county (County_Id NUMBER);"
      },
      {
        "question": "Give me the unique ones.",
        "query": "SELECT DISTINCT district FROM election",
        "schema": "CREATE TABLE county (County_Id NUMBER); CREATE TABLE election (First_Elected NUMBER, Election_ID NUMBER, Committee TEXT, Party NUMBER, District NUMBER);"
      }
    ],
    [
      {
        "question": "Please tell me the information about all counties.",
        "query": "SELECT * FROM county",
        "schema": "CREATE TABLE election (District NUMBER); CREATE TABLE county (County_name TEXT, County_Id NUMBER);"
      },
      {
        "question": "I want to know the county \"Howard\" specifically.",
        "query": "SELECT * FROM county WHERE county_name = \"Howard\"",
        "schema": "CREATE TABLE county (Zip_code TEXT, County_Id NUMBER, County_name TEXT); CREATE TABLE election (District NUMBER);"
      },
      {
        "question": "Just show me the zip code of that county?",
        "query": "SELECT zip_code FROM county WHERE county_name = \"Howard\"",
        "schema": "CREATE TABLE county (Zip_code TEXT, County_Id NUMBER, County_name TEXT); CREATE TABLE election (District NUMBER);"
      }
    ],
    [
      {
        "question": "Please tell me the information about elections.",
        "query": "SELECT * FROM election",
        "schema": "CREATE TABLE election (Party NUMBER, Election_ID NUMBER, First_Elected NUMBER, Committee TEXT);"
      },
      {
        "question": "Just give me the information about delegates.",
        "query": "SELECT delegate FROM election",
        "schema": "CREATE TABLE election (Party NUMBER, Election_ID NUMBER, Committee TEXT, Delegate TEXT, First_Elected NUMBER);"
      },
      {
        "question": "How about the one from district 1?",
        "query": "SELECT delegate FROM election WHERE district = 1",
        "schema": "CREATE TABLE election (Election_ID NUMBER, District NUMBER, Delegate TEXT, Party NUMBER, First_Elected NUMBER, Committee TEXT); CREATE TABLE county (County_Id NUMBER);"
      }
    ],
    [
      {
        "question": "Please tell me all the information about elections.",
        "query": "SELECT * FROM election",
        "schema": "CREATE TABLE election (Committee TEXT, Election_ID NUMBER, First_Elected NUMBER, Party NUMBER);"
      },
      {
        "question": "Just give me the information about delegate",
        "query": "SELECT delegate FROM election",
        "schema": "CREATE TABLE election (First_Elected NUMBER, Election_ID NUMBER, Delegate TEXT, Committee TEXT, Party NUMBER);"
      },
      {
        "question": "I also want to know the committees.",
        "query": "SELECT delegate , committee FROM election",
        "schema": "CREATE TABLE election (Election_ID NUMBER, First_Elected NUMBER, Delegate TEXT, Committee TEXT, Party NUMBER);"
      }
    ],
    [
      {
        "question": "Tell me the information about all parties",
        "query": "SELECT * FROM party",
        "schema": "CREATE TABLE party (Party TEXT, Party_ID NUMBER); CREATE TABLE election (Party NUMBER); CREATE TABLE county (County_Id NUMBER);"
      },
      {
        "question": "Who are the governors of those parties",
        "query": "SELECT governor FROM party",
        "schema": "CREATE TABLE county (County_Id NUMBER); CREATE TABLE election (Party NUMBER); CREATE TABLE party (Governor TEXT, Lieutenant_Governor TEXT, Party TEXT, Party_ID NUMBER);"
      },
      {
        "question": "Just give me the distinct results.",
        "query": "SELECT DISTINCT governor FROM party",
        "schema": "CREATE TABLE election (Party NUMBER); CREATE TABLE county (County_Id NUMBER); CREATE TABLE party (Governor TEXT, Party TEXT, Lieutenant_Governor TEXT, Party_ID NUMBER);"
      },
      {
        "question": "Give the number of those governors.",
        "query": "SELECT count(DISTINCT governor) FROM party",
        "schema": "CREATE TABLE party (Party_ID NUMBER, Governor TEXT, Party TEXT, Lieutenant_Governor TEXT); CREATE TABLE county (County_Id NUMBER); CREATE TABLE election (Party NUMBER);"
      }
    ],
    [
      {
        "question": "Tell me the information about all parties",
        "query": "SELECT * FROM party",
        "schema": "CREATE TABLE county (County_Id NUMBER); CREATE TABLE election (Party NUMBER); CREATE TABLE party (Party_ID NUMBER, Party TEXT);"
      },
      {
        "question": "I want to know the information about the Democratic party specifically.",
        "query": "SELECT * FROM party WHERE party = \"Democratic\"",
        "schema": "CREATE TABLE county (County_Id NUMBER); CREATE TABLE party (Party TEXT, Party_ID NUMBER); CREATE TABLE election (Party NUMBER);"
      },
      {
        "question": "Who is their lieutenant governor?",
        "query": "SELECT lieutenant_governor FROM party WHERE party = \"Democratic\"",
        "schema": "CREATE TABLE party (Lieutenant_Governor TEXT, Party TEXT, Party_ID NUMBER, Governor TEXT); CREATE TABLE county (County_Id NUMBER); CREATE TABLE election (Party NUMBER);"
      },
      {
        "question": "Tell me the comptroller of that party.",
        "query": "SELECT comptroller FROM party WHERE party = \"Democratic\"",
        "schema": "CREATE TABLE election (Party NUMBER); CREATE TABLE party (Comptroller TEXT, Party_ID NUMBER, Party TEXT, Lieutenant_Governor TEXT, Governor TEXT); CREATE TABLE county (County_Id NUMBER);"
      }
    ],
    [
      {
        "question": "Tell me all the information about parties whose governor is Eliot Spitzer.",
        "query": "SELECT * FROM party WHERE governor = \"Eliot Spitzer\"",
        "schema": "CREATE TABLE party (Lieutenant_Governor TEXT, US_Senate TEXT, Comptroller TEXT, Party TEXT, Governor TEXT, Attorney_General TEXT, Party_ID NUMBER); CREATE TABLE election (Party NUMBER);"
      },
      {
        "question": "I want to know the years in which he was the governor.",
        "query": "SELECT YEAR FROM party WHERE governor = \"Eliot Spitzer\"",
        "schema": "CREATE TABLE election (Party NUMBER); CREATE TABLE party (Governor TEXT, Lieutenant_Governor TEXT, Attorney_General TEXT, Comptroller TEXT, Year NUMBER, US_Senate TEXT, Party TEXT, Party_ID NUMBER);"
      },
      {
        "question": "Excellent. Just tell me the distinct ones.",
        "query": "SELECT DISTINCT YEAR FROM party WHERE governor = \"Eliot Spitzer\"",
        "schema": "CREATE TABLE party (US_Senate TEXT, Attorney_General TEXT, Year NUMBER, Party_ID NUMBER, Party TEXT, Comptroller TEXT, Lieutenant_Governor TEXT, Governor TEXT); CREATE TABLE election (Party NUMBER);"
      }
    ],
    [
      {
        "question": "Please tell me all the information about elections.",
        "query": "SELECT * FROM election",
        "schema": "CREATE TABLE election (Party NUMBER, First_Elected NUMBER, Election_ID NUMBER, Committee TEXT);"
      }
    ],
    [
      {
        "question": "Tell me all the names of the counties.",
        "query": "SELECT county_name FROM county",
        "schema": "CREATE TABLE election (District NUMBER); CREATE TABLE county (County_name TEXT, County_Id NUMBER);"
      },
      {
        "question": "I want to know their delegates including their names.",
        "query": "SELECT t2.delegate , t1.county_name FROM county AS t1 JOIN election AS t2 ON t1.county_id = t2.district",
        "schema": "CREATE TABLE election (Delegate TEXT, District NUMBER); CREATE TABLE county (County_Id NUMBER, County_name TEXT);"
      }
    ],
    [
      {
        "question": "Tell me all the names of the counties.",
        "query": "SELECT county_name FROM county",
        "schema": "CREATE TABLE county (County_name TEXT, County_Id NUMBER); CREATE TABLE election (District NUMBER);"
      },
      {
        "question": "Okay. I want to know their delegates.",
        "query": "SELECT t2.delegate FROM county AS t1 JOIN election AS t2 ON t1.county_id = t2.district",
        "schema": "CREATE TABLE county (County_name TEXT, County_Id NUMBER); CREATE TABLE election (District NUMBER, Election_ID NUMBER, Delegate TEXT);"
      },
      {
        "question": "Furthermore, please tell me which ones' population is smaller than 100000?",
        "query": "SELECT t2.delegate FROM county AS t1 JOIN election AS t2 ON t1.county_id = t2.district WHERE t1.population < 100000",
        "schema": "CREATE TABLE election (Election_ID NUMBER, District NUMBER, Delegate TEXT); CREATE TABLE county (Population NUMBER, County_Id NUMBER, County_name TEXT);"
      }
    ],
    [
      {
        "question": "Tell me all the names of the counties.",
        "query": "SELECT county_name FROM county",
        "schema": "CREATE TABLE election (District NUMBER); CREATE TABLE county (County_name TEXT, County_Id NUMBER);"
      },
      {
        "question": "Okay. I want to know their delegates.",
        "query": "SELECT t2.delegate FROM county AS t1 JOIN election AS t2 ON t1.county_id = t2.district",
        "schema": "CREATE TABLE county (County_name TEXT, County_Id NUMBER); CREATE TABLE election (District NUMBER, Election_ID NUMBER, Counties_Represented TEXT, Delegate TEXT);"
      },
      {
        "question": "Furthermore, please tell me which ones' population is larger than 50000?",
        "query": "SELECT t2.delegate FROM county AS t1 JOIN election AS t2 ON t1.county_id = t2.district WHERE t1.population > 50000",
        "schema": "CREATE TABLE election (Counties_Represented TEXT, Election_ID NUMBER, District NUMBER, Delegate TEXT); CREATE TABLE county (County_name TEXT, Population NUMBER, County_Id NUMBER);"
      },
      {
        "question": "Wonderful! How many unique ones are there?",
        "query": "SELECT count(DISTINCT t2.delegate) FROM county AS t1 JOIN election AS t2 ON t1.county_id = t2.district WHERE t1.population > 50000",
        "schema": "CREATE TABLE election (District NUMBER, Delegate TEXT, Election_ID NUMBER, Counties_Represented TEXT); CREATE TABLE county (County_name TEXT, Population NUMBER, County_Id NUMBER);"
      }
    ],
    [
      {
        "question": "Tell me all the names of the counties.",
        "query": "SELECT county_name FROM county",
        "schema": "CREATE TABLE county (County_Id NUMBER, County_name TEXT); CREATE TABLE election (District NUMBER);"
      },
      {
        "question": "Okay. I want to know their delegates.",
        "query": "SELECT t2.delegate FROM county AS t1 JOIN election AS t2 ON t1.county_id = t2.district",
        "schema": "CREATE TABLE election (Election_ID NUMBER, District NUMBER, Counties_Represented TEXT, Delegate TEXT); CREATE TABLE county (County_Id NUMBER, County_name TEXT);"
      },
      {
        "question": "Which one's committee is \"Appropriations\"?",
        "query": "SELECT t1.county_name FROM county AS t1 JOIN election AS t2 ON t1.county_id = t2.district WHERE t2.committee = \"Appropriations\"",
        "schema": "CREATE TABLE election (District NUMBER, Election_ID NUMBER, Committee TEXT, Counties_Represented TEXT, Delegate TEXT); CREATE TABLE county (County_name TEXT, County_Id NUMBER);"
      }
    ],
    [
      {
        "question": "Tell me all the information about the democratic party.",
        "query": "SELECT * FROM party WHERE party = \"Democratic\"",
        "schema": "CREATE TABLE county (County_Id NUMBER); CREATE TABLE party (Party_ID NUMBER, Party TEXT); CREATE TABLE election (Committee TEXT, Party NUMBER);"
      },
      {
        "question": "Okay. I want to know all the party delegates and names.",
        "query": "SELECT t1.delegate , t2.party FROM election AS t1 JOIN party AS t2 ON t1.party = t2.party_id",
        "schema": "CREATE TABLE election (Committee TEXT, Delegate TEXT, Party NUMBER); CREATE TABLE party (Party TEXT, Party_ID NUMBER); CREATE TABLE county (County_Id NUMBER);"
      }
    ],
    [
      {
        "question": "I want to know the governor of the liberal party.",
        "query": "SELECT governor FROM party WHERE party = \"Liberal\"",
        "schema": "CREATE TABLE party (Party_ID NUMBER, Governor TEXT, Party TEXT, Lieutenant_Governor TEXT); CREATE TABLE election (Party NUMBER);"
      },
      {
        "question": "Which one's delegate is from district 1.",
        "query": "SELECT * FROM election AS t1 JOIN party AS t2 ON t1.party = t2.party_id WHERE t1.district = 1",
        "schema": "CREATE TABLE election (District NUMBER, Delegate TEXT, Party NUMBER); CREATE TABLE party (Governor TEXT, Party TEXT, Party_ID NUMBER, Lieutenant_Governor TEXT); CREATE TABLE county (County_name TEXT, County_Id NUMBER);"
      },
      {
        "question": "Who is its governor?",
        "query": "SELECT t2.governor FROM election AS t1 JOIN party AS t2 ON t1.party = t2.party_id WHERE t1.district = 1",
        "schema": "CREATE TABLE county (County_Id NUMBER, County_name TEXT); CREATE TABLE party (Party TEXT, Governor TEXT, Lieutenant_Governor TEXT, Party_ID NUMBER); CREATE TABLE election (District NUMBER, Delegate TEXT, Party NUMBER);"
      }
    ],
    [
      {
        "question": "Tell me all the parties.",
        "query": "SELECT * FROM party",
        "schema": "CREATE TABLE party (Party_ID NUMBER, Party TEXT); CREATE TABLE county (County_Id NUMBER); CREATE TABLE election (Party NUMBER);"
      },
      {
        "question": "Which one's delegates are from district 1 or district 2?",
        "query": "SELECT * FROM election AS t1 JOIN party AS t2 ON t1.party = t2.party_id WHERE t1.district = 1 OR t1.district = 2",
        "schema": "CREATE TABLE election (Party NUMBER, Delegate TEXT, District NUMBER); CREATE TABLE county (County_Id NUMBER); CREATE TABLE party (Party_ID NUMBER, Party TEXT);"
      },
      {
        "question": "Who were these parties' comptrollers?",
        "query": "SELECT t2.comptroller FROM election AS t1 JOIN party AS t2 ON t1.party = t2.party_id WHERE t1.district = 1 OR t1.district = 2",
        "schema": "CREATE TABLE county (County_Id NUMBER); CREATE TABLE election (District NUMBER, Party NUMBER, Delegate TEXT); CREATE TABLE party (Party TEXT, Party_ID NUMBER, Comptroller TEXT);"
      }
    ],
    [
      {
        "question": "Tell me the delegates from committees Appropriations?",
        "query": "SELECT delegate FROM election WHERE committee = \"Appropriations\"",
        "schema": "CREATE TABLE election (Committee TEXT, Delegate TEXT);"
      },
      {
        "question": "which ones have delegates from Democratic party.",
        "query": "SELECT t1.committee FROM election AS t1 JOIN party AS t2 ON t1.party = t2.party_id WHERE t2.party = \"Democratic\"",
        "schema": "CREATE TABLE election (Delegate TEXT, Party NUMBER, Committee TEXT); CREATE TABLE party (Party_ID NUMBER, Party TEXT);"
      }
    ],
    [
      {
        "question": "Tell me all the information about the counties.",
        "query": "SELECT * FROM county",
        "schema": "CREATE TABLE election (District NUMBER); CREATE TABLE county (County_name TEXT, County_Id NUMBER);"
      },
      {
        "question": "For now, I just want to know these counties' names.",
        "query": "SELECT county_name FROM county",
        "schema": "CREATE TABLE election (District NUMBER); CREATE TABLE county (County_name TEXT, County_Id NUMBER);"
      },
      {
        "question": "I also want to know the number of delegates of these counties",
        "query": "SELECT t1.county_name , count(*) FROM county AS t1 JOIN election AS t2 ON t1.county_id = t2.district GROUP BY t1.county_id",
        "schema": "CREATE TABLE county (County_name TEXT, County_Id NUMBER); CREATE TABLE election (District NUMBER, Delegate TEXT);"
      }
    ],
    [
      {
        "question": "Tell me all the information about the counties.",
        "query": "SELECT * FROM county",
        "schema": "CREATE TABLE county (County_name TEXT, County_Id NUMBER, Zip_code TEXT); CREATE TABLE election (District NUMBER);"
      },
      {
        "question": "For now, I just want to know the parties.",
        "query": "SELECT DISTINCT t1.county_name, t3.party FROM county AS t1 JOIN election AS t2 ON t1.county_id = t2.district JOIN party AS t3 ON t2.party = t3.party_id",
        "schema": "CREATE TABLE county (County_Id NUMBER, Zip_code TEXT, County_name TEXT); CREATE TABLE election (Party NUMBER, District NUMBER); CREATE TABLE party (Party_ID NUMBER, Party TEXT);"
      },
      {
        "question": "I also want to know the number of delegates of these parties.",
        "query": "SELECT t2.party , count(*) FROM election AS t1 JOIN party AS t2 ON t1.party = t2.party_id GROUP BY t1.party",
        "schema": "CREATE TABLE party (Party_ID NUMBER, Party TEXT); CREATE TABLE election (Party NUMBER, Delegate TEXT, District NUMBER); CREATE TABLE county (County_Id NUMBER, Zip_code TEXT, County_name TEXT);"
      }
    ],
    [
      {
        "question": "tell me the population of the county named Howard?",
        "query": "SELECT population FROM county WHERE county_name = \"Howard\"",
        "schema": "CREATE TABLE county (County_Id NUMBER, Population NUMBER, County_name TEXT); CREATE TABLE election (District NUMBER);"
      },
      {
        "question": "I want to know all the counties' names.",
        "query": "SELECT county_name FROM county",
        "schema": "CREATE TABLE county (County_name TEXT, Population NUMBER, County_Id NUMBER); CREATE TABLE election (District NUMBER);"
      },
      {
        "question": "Sort them in ascending order by population.",
        "query": "SELECT county_name FROM county ORDER BY population ASC",
        "schema": "CREATE TABLE election (District NUMBER); CREATE TABLE county (County_Id NUMBER, County_name TEXT, Population NUMBER);"
      }
    ],
    [
      {
        "question": "Tell me the county with zip code D21.",
        "query": "SELECT county_name FROM county WHERE zip_code = \"D21\"",
        "schema": "CREATE TABLE county (Zip_code TEXT, County_name TEXT, County_Id NUMBER);"
      },
      {
        "question": "Okay. I  want to know all the names of the counties.",
        "query": "SELECT county_name FROM county",
        "schema": "CREATE TABLE county (County_Id NUMBER, County_name TEXT, Zip_code TEXT);"
      },
      {
        "question": "Sort them in descending alphabetical order.",
        "query": "SELECT county_name FROM county ORDER BY county_name DESC",
        "schema": "CREATE TABLE county (Zip_code TEXT, County_Id NUMBER, County_name TEXT);"
      }
    ],
    [
      {
        "question": "Tell me the population of the county named Colony.",
        "query": "SELECT population FROM county WHERE county_name = \"Colony\"",
        "schema": "CREATE TABLE county (Population NUMBER, County_name TEXT, County_Id NUMBER); CREATE TABLE election (District NUMBER);"
      },
      {
        "question": "How about the one named Mansfield?",
        "query": "SELECT population FROM county WHERE county_name = \"Mansfield\"",
        "schema": "CREATE TABLE county (County_name TEXT, Population NUMBER, County_Id NUMBER); CREATE TABLE election (District NUMBER);"
      },
      {
        "question": "Just show me which county has the biggest population.",
        "query": "SELECT county_name FROM county ORDER BY population DESC LIMIT 1",
        "schema": "CREATE TABLE county (County_Id NUMBER, County_name TEXT, Population NUMBER); CREATE TABLE election (District NUMBER);"
      }
    ],
    [
      {
        "question": "Tell me the population of the county named Colony.",
        "query": "SELECT population FROM county WHERE county_name = \"Colony\"",
        "schema": "CREATE TABLE election (District NUMBER); CREATE TABLE county (County_name TEXT, Population NUMBER, County_Id NUMBER);"
      },
      {
        "question": "How about Mansfield's",
        "query": "SELECT population FROM county WHERE county_name = \"Mansfield\"",
        "schema": "CREATE TABLE election (District NUMBER); CREATE TABLE county (Population NUMBER, County_Id NUMBER, County_name TEXT);"
      },
      {
        "question": "just show me 3 ones which have the smallest population.",
        "query": "SELECT county_name FROM county ORDER BY population ASC LIMIT 3",
        "schema": "CREATE TABLE election (District NUMBER); CREATE TABLE county (Population NUMBER, County_name TEXT, County_Id NUMBER);"
      }
    ],
    [
      {
        "question": "Tell me the delegates of the county named Howard.",
        "query": "SELECT t2.delegate FROM county AS t1 JOIN election AS t2 ON t1.county_id = t2.district WHERE t1.county_name = \"Howard\"",
        "schema": "CREATE TABLE county (County_name TEXT, County_Id NUMBER); CREATE TABLE election (Counties_Represented TEXT, Delegate TEXT, District NUMBER); CREATE TABLE party (Party_ID NUMBER);"
      },
      {
        "question": "How about its committees?",
        "query": "SELECT t2.committee FROM county AS t1 JOIN election AS t2 ON t1.county_id = t2.district WHERE t1.county_name = \"Howard\"",
        "schema": "CREATE TABLE party (Party_ID NUMBER); CREATE TABLE county (County_Id NUMBER, County_name TEXT); CREATE TABLE election (Counties_Represented TEXT, Delegate TEXT, Committee TEXT, District NUMBER);"
      },
      {
        "question": "just show me the counties which have at least two delegates.",
        "query": "SELECT t1.county_name FROM county AS t1 JOIN election AS t2 ON t1.county_id = t2.district GROUP BY t1.county_id HAVING count(*) >= 2",
        "schema": "CREATE TABLE county (County_name TEXT, County_Id NUMBER); CREATE TABLE election (Delegate TEXT, Counties_Represented TEXT, District NUMBER, Committee TEXT); CREATE TABLE party (Party_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Tell me the information of all the parties.",
        "query": "SELECT * FROM party",
        "schema": "CREATE TABLE election (Party NUMBER); CREATE TABLE party (Party TEXT, Party_ID NUMBER);"
      },
      {
        "question": "I just want to know their names.",
        "query": "SELECT party FROM party",
        "schema": "CREATE TABLE election (Party NUMBER); CREATE TABLE party (Party TEXT, Party_ID NUMBER);"
      },
      {
        "question": "just show me the ones which have at least two records.",
        "query": "SELECT party FROM party GROUP BY party HAVING count(*) >= 2",
        "schema": "CREATE TABLE election (Party NUMBER); CREATE TABLE party (Party_ID NUMBER, Party TEXT);"
      }
    ],
    [
      {
        "question": "Tell me the delegates of county Howard.",
        "query": "SELECT t2.delegate FROM county AS t1 JOIN election AS t2 ON t1.county_id = t2.district WHERE t1.county_name = \"Howard\"",
        "schema": "CREATE TABLE party (Party_ID NUMBER); CREATE TABLE election (District NUMBER, Delegate TEXT, Counties_Represented TEXT); CREATE TABLE county (County_name TEXT, County_Id NUMBER);"
      },
      {
        "question": "How about that of the county Colony?",
        "query": "SELECT t2.delegate FROM county AS t1 JOIN election AS t2 ON t1.county_id = t2.district WHERE t1.county_name = \"Colony\"",
        "schema": "CREATE TABLE party (Party_ID NUMBER); CREATE TABLE election (District NUMBER, Counties_Represented TEXT, Delegate TEXT); CREATE TABLE county (County_Id NUMBER, County_name TEXT);"
      },
      {
        "question": "just show me the county which has the most delegates.",
        "query": "SELECT t2.party FROM election AS t1 JOIN party AS t2 ON t1.party = t2.party_id GROUP BY t1.party ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE party (Party TEXT, Party_ID NUMBER); CREATE TABLE county (County_name TEXT, County_Id NUMBER); CREATE TABLE election (Party NUMBER, District NUMBER, Delegate TEXT, Counties_Represented TEXT);"
      }
    ],
    [
      {
        "question": "Tell me who is the governor of the liberal party.",
        "query": "SELECT governor FROM party WHERE party = \"Liberal\"",
        "schema": "CREATE TABLE election (Party NUMBER); CREATE TABLE party (Lieutenant_Governor TEXT, Party TEXT, Party_ID NUMBER, Governor TEXT);"
      },
      {
        "question": "Okay, tell me how many times he has been governor.",
        "query": "SELECT count(*) FROM party WHERE governor = \"Eliot Spitzer\"",
        "schema": "CREATE TABLE party (Party TEXT, Lieutenant_Governor TEXT, Year NUMBER, Governor TEXT, Party_ID NUMBER); CREATE TABLE election (Party NUMBER);"
      },
      {
        "question": "Which governor has been governor the most times?",
        "query": "SELECT governor FROM party GROUP BY governor ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE party (Party TEXT, Lieutenant_Governor TEXT, Party_ID NUMBER, Year NUMBER, Governor TEXT); CREATE TABLE election (Party NUMBER);"
      }
    ],
    [
      {
        "question": "Tell me the comptrollers of the Independence party.",
        "query": "SELECT comptroller FROM party WHERE party = \"Independence\"",
        "schema": "CREATE TABLE party (Comptroller TEXT, Party_ID NUMBER, Party TEXT); CREATE TABLE election (Party NUMBER);"
      },
      {
        "question": "Okay, how about that of the Liberal party?",
        "query": "SELECT comptroller FROM party WHERE party = \"Liberal\"",
        "schema": "CREATE TABLE election (Party NUMBER); CREATE TABLE party (Comptroller TEXT, Party_ID NUMBER, Party TEXT);"
      },
      {
        "question": "Which ones have been comptroller the most times? Show also the corresponding number of times.",
        "query": "SELECT comptroller , count(*) FROM party GROUP BY comptroller ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE party (Comptroller TEXT, Party TEXT, Year NUMBER, Party_ID NUMBER); CREATE TABLE election (Party NUMBER);"
      }
    ],
    [
      {
        "question": "Tell me the information of all the parties.",
        "query": "SELECT * FROM party",
        "schema": "CREATE TABLE party (Party TEXT, Party_ID NUMBER, Comptroller TEXT); CREATE TABLE election (Party NUMBER);"
      },
      {
        "question": "which parties have delegates in the election?",
        "query": "SELECT party FROM party WHERE party_id IN (SELECT party FROM election)",
        "schema": "CREATE TABLE party (Party_ID NUMBER, Comptroller TEXT, Party TEXT); CREATE TABLE election (Party NUMBER, Delegate TEXT, Election_ID NUMBER);"
      },
      {
        "question": "Which ones do not?",
        "query": "SELECT party FROM party WHERE party_id NOT IN (SELECT party FROM election)",
        "schema": "CREATE TABLE party (Party TEXT, Party_ID NUMBER, Comptroller TEXT); CREATE TABLE election (Party NUMBER, Delegate TEXT, Election_ID NUMBER);"
      }
    ],
    [
      {
        "question": "tell me which parties have delegates on the \"Appropriations\" committee?",
        "query": "SELECT t2.party FROM election AS t1 JOIN party AS t2 ON t1.party = t2.party_id WHERE t1.committee = \"Appropriations\"",
        "schema": "CREATE TABLE election (Delegate TEXT, Party NUMBER, Committee TEXT); CREATE TABLE party (Party_ID NUMBER, Party TEXT);"
      },
      {
        "question": "So how about the ones with delegates on the \"Economic Matters\" committee?",
        "query": "SELECT t2.party FROM election AS t1 JOIN party AS t2 ON t1.party = t2.party_id WHERE t1.committee = \"Economic Matters\"",
        "schema": "CREATE TABLE party (Party_ID NUMBER, Party TEXT); CREATE TABLE election (Committee TEXT, Party NUMBER, Delegate TEXT);"
      },
      {
        "question": "Okay. I want to know which ones have delegates on both.",
        "query": "SELECT t2.party FROM election AS t1 JOIN party AS t2 ON t1.party = t2.party_id WHERE t1.committee = \"Appropriations\" INTERSECT SELECT t2.party FROM election AS t1 JOIN party AS t2 ON t1.party = t2.party_id WHERE t1.committee = \"Economic Matters\"",
        "schema": "CREATE TABLE party (Party_ID NUMBER, Party TEXT); CREATE TABLE election (Committee TEXT, Party NUMBER, Delegate TEXT);"
      }
    ]
  ],
  "loan_1": [
    [
      {
        "question": "List the names of all different customers who have an loan.",
        "query": "SELECT DISTINCT t1.cust_name FROM customer AS t1 JOIN loan AS t2 ON t1.cust_id = t2.cust_id",
        "schema": "CREATE TABLE loan (loan_ID TEXT, loan_type TEXT, cust_ID TEXT); CREATE TABLE customer (cust_ID TEXT, acc_type TEXT, cust_name TEXT, acc_bal NUMBER);"
      },
      {
        "question": "For each customer, what is their total amount of loans?",
        "query": "SELECT t1.cust_name, sum(t2.amount) FROM customer AS t1 JOIN loan AS t2 ON t1.cust_id = t2.cust_id GROUP BY t1.cust_name",
        "schema": "CREATE TABLE loan (loan_type TEXT, cust_ID TEXT, loan_ID TEXT, amount NUMBER); CREATE TABLE customer (no_of_loans NUMBER, cust_name TEXT, cust_ID TEXT, acc_bal NUMBER, acc_type TEXT);"
      },
      {
        "question": "sort the result by the total amount, and no need to show the total amount.",
        "query": "SELECT t1.cust_name FROM customer AS t1 JOIN loan AS t2 ON t1.cust_id = t2.cust_id GROUP BY t1.cust_name ORDER BY sum(t2.amount)",
        "schema": "CREATE TABLE customer (cust_name TEXT, cust_ID TEXT, no_of_loans NUMBER, acc_bal NUMBER, acc_type TEXT); CREATE TABLE loan (loan_type TEXT, cust_ID TEXT, loan_ID TEXT, amount NUMBER);"
      }
    ],
    [
      {
        "question": "what are the names of the customers?",
        "query": "SELECT cust_name FROM customer",
        "schema": "CREATE TABLE customer (acc_type TEXT, cust_name TEXT, cust_ID TEXT, acc_bal NUMBER);"
      },
      {
        "question": "just show customers who have the letter \u2018a\u2019 in their name.",
        "query": "SELECT cust_name FROM customer WHERE cust_name LIKE '%a%'",
        "schema": "CREATE TABLE customer (cust_ID TEXT, acc_type TEXT, cust_name TEXT, acc_bal NUMBER);"
      },
      {
        "question": "list their account balances too.",
        "query": "SELECT cust_name , acc_bal FROM customer WHERE cust_name LIKE '%a%'",
        "schema": "CREATE TABLE customer (cust_ID TEXT, cust_name TEXT, acc_type TEXT, acc_bal NUMBER);"
      }
    ],
    [
      {
        "question": "which states are the customers from?",
        "query": "SELECT DISTINCT state FROM customer",
        "schema": "CREATE TABLE customer (cust_name TEXT, cust_ID TEXT, acc_bal NUMBER, branch_ID NUMBER, acc_type TEXT, state TEXT); CREATE TABLE bank (branch_ID NUMBER, state TEXT, no_of_customers NUMBER);"
      },
      {
        "question": "find the names of customers from Utah or Texas.",
        "query": "SELECT cust_name FROM customer WHERE state = 'Utah' OR state = 'Texas'",
        "schema": "CREATE TABLE customer (cust_name TEXT, acc_bal NUMBER, branch_ID NUMBER, cust_ID TEXT, acc_type TEXT, state TEXT); CREATE TABLE bank (state TEXT, no_of_customers NUMBER, branch_ID NUMBER);"
      },
      {
        "question": "what is their total account balance?",
        "query": "SELECT sum(acc_bal) FROM customer WHERE state = 'Utah' OR state = 'Texas'",
        "schema": "CREATE TABLE customer (cust_ID TEXT, state TEXT, acc_type TEXT, branch_ID NUMBER, cust_name TEXT, acc_bal NUMBER); CREATE TABLE bank (no_of_customers NUMBER, branch_ID NUMBER, state TEXT);"
      }
    ],
    [
      {
        "question": "find the names of customers who have a saving account.",
        "query": "SELECT cust_name FROM customer WHERE acc_type = 'saving'",
        "schema": "CREATE TABLE loan (cust_ID TEXT); CREATE TABLE customer (cust_name TEXT, cust_ID TEXT, acc_bal NUMBER, acc_type TEXT);"
      },
      {
        "question": "how about those who have a checking account?",
        "query": "SELECT cust_name FROM customer WHERE acc_type = 'checking'",
        "schema": "CREATE TABLE customer (acc_type TEXT, acc_bal NUMBER, cust_ID TEXT, cust_name TEXT); CREATE TABLE loan (cust_ID TEXT);"
      },
      {
        "question": "which of them have both kinds of accounts?",
        "query": "SELECT cust_name FROM customer WHERE acc_type = 'saving' INTERSECT SELECT cust_name FROM customer WHERE acc_type = 'checking'",
        "schema": "CREATE TABLE loan (cust_ID TEXT); CREATE TABLE customer (cust_ID TEXT, acc_bal NUMBER, acc_type TEXT, cust_name TEXT);"
      }
    ],
    [
      {
        "question": "how many customers have a saving account?",
        "query": "SELECT count(*) FROM customer WHERE acc_type = 'saving'",
        "schema": "CREATE TABLE customer (acc_bal NUMBER, cust_ID TEXT, cust_name TEXT, acc_type TEXT); CREATE TABLE bank (no_of_customers NUMBER);"
      },
      {
        "question": "what are their names?",
        "query": "SELECT cust_name FROM customer WHERE acc_type = 'saving'",
        "schema": "CREATE TABLE bank (no_of_customers NUMBER); CREATE TABLE customer (cust_ID TEXT, acc_bal NUMBER, acc_type TEXT, cust_name TEXT);"
      },
      {
        "question": "who are those who do not have a savings account?",
        "query": "SELECT cust_name FROM customer EXCEPT SELECT cust_name FROM customer WHERE acc_type = 'saving'",
        "schema": "CREATE TABLE customer (cust_name TEXT, acc_bal NUMBER, cust_ID TEXT, acc_type TEXT); CREATE TABLE bank (no_of_customers NUMBER);"
      }
    ],
    [
      {
        "question": "Find the names of customers who have a mortgage loan.",
        "query": "SELECT t1.cust_name FROM customer AS t1 JOIN loan AS t2 ON t1.cust_id = t2.cust_id WHERE t2.loan_type = 'Mortgages'",
        "schema": "CREATE TABLE customer (acc_type TEXT, no_of_loans NUMBER, cust_ID TEXT, cust_name TEXT, acc_bal NUMBER); CREATE TABLE loan (loan_type TEXT, cust_ID TEXT, loan_ID TEXT);"
      },
      {
        "question": "who are those who do not have a mortgage?",
        "query": "SELECT cust_name FROM customer EXCEPT SELECT t1.cust_name FROM customer AS t1 JOIN loan AS t2 ON t1.cust_id = t2.cust_id WHERE t2.loan_type = 'Mortgages'",
        "schema": "CREATE TABLE loan (loan_type TEXT, cust_ID TEXT, loan_ID TEXT); CREATE TABLE customer (acc_type TEXT, cust_name TEXT, no_of_loans NUMBER, cust_ID TEXT, acc_bal NUMBER);"
      }
    ],
    [
      {
        "question": "find the names of customers who have a loan.",
        "query": "SELECT DISTINCT t1.cust_name FROM customer AS t1 JOIN loan AS t2 ON t1.cust_id = t2.cust_id",
        "schema": "CREATE TABLE loan (loan_type TEXT, loan_ID TEXT, cust_ID TEXT); CREATE TABLE customer (no_of_loans NUMBER, acc_type TEXT, cust_name TEXT, cust_ID TEXT, acc_bal NUMBER);"
      },
      {
        "question": "which of them have a mortgage loan?",
        "query": "SELECT t1.cust_name FROM customer AS t1 JOIN loan AS t2 ON t1.cust_id = t2.cust_id WHERE loan_type = 'Mortgages'",
        "schema": "CREATE TABLE customer (cust_name TEXT, acc_bal NUMBER, no_of_loans NUMBER, acc_type TEXT, cust_ID TEXT); CREATE TABLE loan (cust_ID TEXT, loan_type TEXT, loan_ID TEXT);"
      },
      {
        "question": "among them, who has an Auto loan as well?",
        "query": "SELECT t1.cust_name FROM customer AS t1 JOIN loan AS t2 ON t1.cust_id = t2.cust_id WHERE loan_type = 'Mortgages' INTERSECT SELECT t1.cust_name FROM customer AS t1 JOIN loan AS t2 ON t1.cust_id = t2.cust_id WHERE loan_type = 'Auto'",
        "schema": "CREATE TABLE customer (acc_bal NUMBER, no_of_loans NUMBER, acc_type TEXT, cust_ID TEXT, cust_name TEXT); CREATE TABLE loan (cust_ID TEXT, loan_ID TEXT, loan_type TEXT);"
      }
    ],
    [
      {
        "question": "what is the average credit score of all customers?",
        "query": "SELECT avg(credit_score) FROM customer",
        "schema": "CREATE TABLE customer (credit_score NUMBER, acc_bal NUMBER, cust_ID TEXT, acc_type TEXT, cust_name TEXT); CREATE TABLE bank (no_of_customers NUMBER);"
      },
      {
        "question": "list customers whose credit score is below the average.",
        "query": "SELECT * FROM customer WHERE credit_score < (SELECT avg(credit_score) FROM customer)",
        "schema": "CREATE TABLE customer (cust_ID TEXT, credit_score NUMBER, cust_name TEXT, acc_type TEXT, acc_bal NUMBER); CREATE TABLE bank (no_of_customers NUMBER);"
      },
      {
        "question": "just list their names.",
        "query": "SELECT cust_name FROM customer WHERE credit_score < (SELECT avg(credit_score) FROM customer)",
        "schema": "CREATE TABLE bank (no_of_customers NUMBER); CREATE TABLE customer (acc_type TEXT, acc_bal NUMBER, credit_score NUMBER, cust_name TEXT, cust_ID TEXT);"
      }
    ],
    [
      {
        "question": "show the name and number of customers for each bank branch.",
        "query": "SELECT bname, no_of_customers FROM bank",
        "schema": "CREATE TABLE bank (no_of_customers NUMBER, bname TEXT, branch_ID NUMBER); CREATE TABLE customer (acc_bal NUMBER, cust_name TEXT, branch_ID NUMBER, acc_type TEXT, cust_ID TEXT); CREATE TABLE loan (branch_ID TEXT);"
      },
      {
        "question": "order the result by the number of customers in descending order.",
        "query": "SELECT bname, no_of_customers FROM bank ORDER BY no_of_customers DESC",
        "schema": "CREATE TABLE bank (bname TEXT, no_of_customers NUMBER, branch_ID NUMBER); CREATE TABLE customer (branch_ID NUMBER, acc_type TEXT, cust_name TEXT, cust_ID TEXT, acc_bal NUMBER); CREATE TABLE loan (branch_ID TEXT);"
      },
      {
        "question": "Find the branch name of the bank that has the most customers.",
        "query": "SELECT bname FROM bank ORDER BY no_of_customers DESC LIMIT 1",
        "schema": "CREATE TABLE bank (no_of_customers NUMBER, bname TEXT, branch_ID NUMBER); CREATE TABLE loan (branch_ID TEXT); CREATE TABLE customer (cust_name TEXT, acc_bal NUMBER, acc_type TEXT, cust_ID TEXT, branch_ID NUMBER);"
      }
    ],
    [
      {
        "question": "what are the names of all customers?",
        "query": "SELECT cust_name FROM customer",
        "schema": "CREATE TABLE customer (acc_bal NUMBER, cust_ID TEXT, cust_name TEXT, acc_type TEXT);"
      },
      {
        "question": "which one has the lowest credit score?",
        "query": "SELECT cust_name FROM customer ORDER BY credit_score LIMIT 1",
        "schema": "CREATE TABLE customer (cust_ID TEXT, acc_type TEXT, cust_name TEXT, acc_bal NUMBER, credit_score NUMBER);"
      }
    ],
    [
      {
        "question": "what is the name of the customer with the lowest credit score?",
        "query": "SELECT cust_name FROM customer ORDER BY credit_score LIMIT 1",
        "schema": "CREATE TABLE customer (cust_name TEXT, credit_score NUMBER, acc_bal NUMBER, cust_ID TEXT);"
      },
      {
        "question": "how about the one who has the highest credit score?",
        "query": "SELECT cust_name FROM customer ORDER BY credit_score DESC LIMIT 1",
        "schema": "CREATE TABLE customer (acc_bal NUMBER, cust_name TEXT, credit_score NUMBER, cust_ID TEXT);"
      },
      {
        "question": "show their account types and balances as well.",
        "query": "SELECT cust_name , acc_type , acc_bal FROM customer ORDER BY credit_score DESC LIMIT 1",
        "schema": "CREATE TABLE customer (cust_ID TEXT, cust_name TEXT, acc_type TEXT, credit_score NUMBER, acc_bal NUMBER);"
      }
    ],
    [
      {
        "question": "what is the average amount of all loans?",
        "query": "SELECT avg(amount) FROM loan",
        "schema": "CREATE TABLE bank (branch_ID NUMBER); CREATE TABLE customer (acc_bal NUMBER); CREATE TABLE loan (amount NUMBER, loan_type TEXT, cust_ID TEXT, loan_ID TEXT);"
      },
      {
        "question": "how about the total amount?",
        "query": "SELECT sum(amount) FROM loan",
        "schema": "CREATE TABLE loan (loan_ID TEXT, loan_type TEXT, amount NUMBER, cust_ID TEXT); CREATE TABLE customer (acc_bal NUMBER); CREATE TABLE bank (branch_ID NUMBER);"
      },
      {
        "question": "Find the names of customer who have loans.",
        "query": "SELECT DISTINCT t1.cust_name FROM customer AS t1 JOIN loan AS t2 ON t1.cust_id = t2.cust_id",
        "schema": "CREATE TABLE loan (loan_type TEXT, amount NUMBER, loan_ID TEXT, cust_ID TEXT); CREATE TABLE bank (branch_ID NUMBER); CREATE TABLE customer (no_of_loans NUMBER, acc_bal NUMBER, cust_name TEXT, cust_ID TEXT, acc_type TEXT);"
      },
      {
        "question": "who has the largest amount of loans?",
        "query": "SELECT t1.cust_name FROM customer AS t1 JOIN loan AS t2 ON t1.cust_id = t2.cust_id GROUP BY t1.cust_name ORDER BY sum(t2.amount) DESC LIMIT 1",
        "schema": "CREATE TABLE loan (loan_type TEXT, amount NUMBER, loan_ID TEXT, cust_ID TEXT); CREATE TABLE bank (branch_ID NUMBER); CREATE TABLE customer (cust_name TEXT, cust_ID TEXT, no_of_loans NUMBER, acc_bal NUMBER, acc_type TEXT);"
      }
    ],
    [
      {
        "question": "show all different states where banks are located.",
        "query": "SELECT DISTINCT state FROM bank",
        "schema": "CREATE TABLE bank (bname TEXT, city TEXT, state TEXT, branch_ID NUMBER); CREATE TABLE customer (state TEXT);"
      },
      {
        "question": "which state has the most bank customers?",
        "query": "SELECT state FROM bank GROUP BY state ORDER BY sum(no_of_customers) DESC LIMIT 1",
        "schema": "CREATE TABLE bank (state TEXT, city TEXT, no_of_customers NUMBER, branch_ID NUMBER, bname TEXT); CREATE TABLE customer (branch_ID NUMBER, state TEXT, acc_type TEXT, acc_bal NUMBER);"
      }
    ],
    [
      {
        "question": "what are the names of customers with a credit score lower than 50?",
        "query": "SELECT cust_name FROM customer WHERE credit_score < 50",
        "schema": "CREATE TABLE customer (credit_score NUMBER, cust_name TEXT, acc_type TEXT, cust_ID TEXT, acc_bal NUMBER);"
      },
      {
        "question": "what is their average account balance?",
        "query": "SELECT avg(acc_bal) FROM customer WHERE credit_score < 50",
        "schema": "CREATE TABLE customer (cust_name TEXT, acc_type TEXT, cust_ID TEXT, credit_score NUMBER, acc_bal NUMBER);"
      },
      {
        "question": "find their average account balance for each different account type.",
        "query": "SELECT avg(acc_bal) , acc_type FROM customer WHERE credit_score < 50 GROUP BY acc_type",
        "schema": "CREATE TABLE customer (acc_type TEXT, cust_ID TEXT, acc_bal NUMBER, credit_score NUMBER, cust_name TEXT);"
      }
    ],
    [
      {
        "question": "what states are the customers from?",
        "query": "SELECT DISTINCT state FROM customer",
        "schema": "CREATE TABLE customer (cust_ID TEXT, state TEXT, branch_ID NUMBER, acc_type TEXT, cust_name TEXT, acc_bal NUMBER); CREATE TABLE bank (no_of_customers NUMBER, state TEXT);"
      },
      {
        "question": "For each state, how many customers have a credit score above 100?",
        "query": "SELECT count(*), state FROM customer WHERE credit_score > 100 GROUP BY state",
        "schema": "CREATE TABLE bank (state TEXT, no_of_customers NUMBER); CREATE TABLE customer (state TEXT, acc_type TEXT, credit_score NUMBER, acc_bal NUMBER, cust_name TEXT, branch_ID NUMBER, cust_ID TEXT);"
      },
      {
        "question": "find their total account balances.",
        "query": "SELECT sum(acc_bal) , state FROM customer WHERE credit_score > 100 GROUP BY state",
        "schema": "CREATE TABLE customer (acc_bal NUMBER, branch_ID NUMBER, acc_type TEXT, cust_ID TEXT, cust_name TEXT, state TEXT, credit_score NUMBER); CREATE TABLE bank (no_of_customers NUMBER, state TEXT);"
      }
    ],
    [
      {
        "question": "how many bank branches are not in the state of New York?",
        "query": "SELECT count(*) FROM bank WHERE state != \"New York\"",
        "schema": "CREATE TABLE loan (branch_ID TEXT); CREATE TABLE customer (branch_ID NUMBER, state TEXT); CREATE TABLE bank (state TEXT, branch_ID NUMBER, bname TEXT, city TEXT);"
      },
      {
        "question": "what is the total number of bank branches?",
        "query": "SELECT count(*) FROM bank",
        "schema": "CREATE TABLE loan (branch_ID TEXT); CREATE TABLE bank (bname TEXT, branch_ID NUMBER, state TEXT, city TEXT); CREATE TABLE customer (branch_ID NUMBER, state TEXT);"
      },
      {
        "question": "how many loans are offered by each branch?",
        "query": "SELECT count(*), t1.bname FROM bank AS t1 JOIN loan AS t2 ON t1.branch_id = t2.branch_id GROUP BY t1.bname",
        "schema": "CREATE TABLE bank (city TEXT, branch_ID NUMBER, state TEXT, bname TEXT); CREATE TABLE loan (branch_ID TEXT, loan_ID TEXT, amount NUMBER, loan_type TEXT, cust_ID TEXT); CREATE TABLE customer (state TEXT, branch_ID NUMBER);"
      },
      {
        "question": "what is the total amount of loans offered by each of them?",
        "query": "SELECT sum(amount) , t1.bname FROM bank AS t1 JOIN loan AS t2 ON t1.branch_id = t2.branch_id GROUP BY t1.bname",
        "schema": "CREATE TABLE customer (state TEXT, branch_ID NUMBER); CREATE TABLE bank (bname TEXT, state TEXT, city TEXT, branch_ID NUMBER); CREATE TABLE loan (loan_ID TEXT, branch_ID TEXT, cust_ID TEXT, loan_type TEXT, amount NUMBER);"
      }
    ],
    [
      {
        "question": "how many loans are there?",
        "query": "SELECT count(*) FROM loan",
        "schema": "CREATE TABLE bank (bname TEXT, branch_ID NUMBER); CREATE TABLE customer (branch_ID NUMBER, cust_name TEXT, no_of_loans NUMBER, cust_ID TEXT, acc_bal NUMBER); CREATE TABLE loan (cust_ID TEXT, loan_type TEXT, loan_ID TEXT, amount NUMBER, branch_ID TEXT);"
      },
      {
        "question": "what is the total amount of loans?",
        "query": "SELECT sum(amount) FROM loan",
        "schema": "CREATE TABLE bank (branch_ID NUMBER, bname TEXT); CREATE TABLE customer (branch_ID NUMBER, cust_ID TEXT, cust_name TEXT, acc_bal NUMBER, no_of_loans NUMBER); CREATE TABLE loan (cust_ID TEXT, branch_ID TEXT, loan_type TEXT, loan_ID TEXT, amount NUMBER);"
      },
      {
        "question": "Find the names of customers who have at least one loan.",
        "query": "SELECT t1.cust_name FROM customer AS t1 JOIN loan AS t2 ON t1.cust_id = t2.cust_id",
        "schema": "CREATE TABLE loan (amount NUMBER, cust_ID TEXT, loan_type TEXT, loan_ID TEXT, branch_ID TEXT); CREATE TABLE bank (bname TEXT, branch_ID NUMBER); CREATE TABLE customer (cust_ID TEXT, branch_ID NUMBER, no_of_loans NUMBER, acc_bal NUMBER, cust_name TEXT, acc_type TEXT);"
      },
      {
        "question": "which of them have more than one loan?",
        "query": "SELECT t1.cust_name FROM customer AS t1 JOIN loan AS t2 ON t1.cust_id = t2.cust_id GROUP BY t1.cust_name HAVING count(*) > 1",
        "schema": "CREATE TABLE loan (cust_ID TEXT, loan_ID TEXT, branch_ID TEXT, loan_type TEXT, amount NUMBER); CREATE TABLE customer (acc_bal NUMBER, cust_name TEXT, no_of_loans NUMBER, cust_ID TEXT, branch_ID NUMBER, acc_type TEXT); CREATE TABLE bank (branch_ID NUMBER, bname TEXT);"
      }
    ],
    [
      {
        "question": "Find the names of customers who have at least one loan.",
        "query": "SELECT DISTINCT t1.cust_name FROM customer AS t1 JOIN loan AS t2 ON t1.cust_id = t2.cust_id",
        "schema": "CREATE TABLE loan (cust_ID TEXT, loan_ID TEXT); CREATE TABLE customer (no_of_loans NUMBER, cust_name TEXT, cust_ID TEXT, acc_type TEXT, acc_bal NUMBER);"
      },
      {
        "question": "which of them have loans with a total amount of more than 5000?",
        "query": "SELECT t1.cust_name FROM customer AS t1 JOIN loan AS t2 ON t1.cust_id = t2.cust_id GROUP BY t1.cust_name HAVING sum(t2.amount) > 5000",
        "schema": "CREATE TABLE customer (cust_name TEXT, acc_bal NUMBER, acc_type TEXT, cust_ID TEXT, no_of_loans NUMBER); CREATE TABLE loan (loan_ID TEXT, amount NUMBER, cust_ID TEXT);"
      },
      {
        "question": "also show their account balances.",
        "query": "SELECT t1.cust_name , t1.acc_type FROM customer AS t1 JOIN loan AS t2 ON t1.cust_id = t2.cust_id GROUP BY t1.cust_name HAVING sum(t2.amount) > 5000",
        "schema": "CREATE TABLE loan (cust_ID TEXT, amount NUMBER, loan_ID TEXT); CREATE TABLE customer (acc_bal NUMBER, cust_ID TEXT, no_of_loans NUMBER, cust_name TEXT, acc_type TEXT);"
      }
    ],
    [
      {
        "question": "what is the total amount of all loans?",
        "query": "SELECT sum(amount) FROM loan",
        "schema": "CREATE TABLE bank (branch_ID NUMBER); CREATE TABLE loan (loan_type TEXT, cust_ID TEXT, loan_ID TEXT, amount NUMBER); CREATE TABLE customer (no_of_loans NUMBER);"
      },
      {
        "question": "find the names of bank branches that provided these loans.",
        "query": "SELECT t1.bname FROM bank AS t1 JOIN loan AS t2 ON t1.branch_id = t2.branch_id",
        "schema": "CREATE TABLE bank (bname TEXT, branch_ID NUMBER); CREATE TABLE customer (no_of_loans NUMBER); CREATE TABLE loan (branch_ID TEXT, loan_type TEXT, amount NUMBER, cust_ID TEXT, loan_ID TEXT);"
      },
      {
        "question": "which one offered the greatest total amount of loans?",
        "query": "SELECT t1.bname FROM bank AS t1 JOIN loan AS t2 ON t1.branch_id = t2.branch_id GROUP BY t1.bname ORDER BY sum(t2.amount) DESC LIMIT 1",
        "schema": "CREATE TABLE bank (branch_ID NUMBER, bname TEXT); CREATE TABLE customer (no_of_loans NUMBER); CREATE TABLE loan (loan_ID TEXT, amount NUMBER, branch_ID TEXT, loan_type TEXT, cust_ID TEXT);"
      }
    ],
    [
      {
        "question": "what are the names of customers whose credit score is higher than 200?",
        "query": "SELECT cust_name FROM customer WHERE credit_score > 200",
        "schema": "CREATE TABLE customer (cust_ID TEXT, credit_score NUMBER, cust_name TEXT, acc_bal NUMBER);"
      },
      {
        "question": "how about those whose credit score is less than 100?",
        "query": "SELECT cust_name FROM customer WHERE credit_score < 100",
        "schema": "CREATE TABLE customer (credit_score NUMBER, cust_ID TEXT, acc_bal NUMBER, cust_name TEXT);"
      },
      {
        "question": "what are the names of bank branches that provided any loans to them?",
        "query": "SELECT t2.bname FROM loan AS t1 JOIN bank AS t2 ON t1.branch_id = t2.branch_id JOIN customer AS t3 ON t1.cust_id = t3.cust_id WHERE t3.credit_score < 100",
        "schema": "CREATE TABLE loan (branch_ID TEXT, cust_ID TEXT, loan_ID TEXT); CREATE TABLE customer (acc_bal NUMBER, credit_score NUMBER, cust_name TEXT, branch_ID NUMBER, cust_ID TEXT); CREATE TABLE bank (bname TEXT, branch_ID NUMBER, no_of_customers NUMBER);"
      },
      {
        "question": "which bank branch gave the greatest total amount of loans to a customer whose credit score is less than 100?",
        "query": "SELECT t2.bname FROM loan AS t1 JOIN bank AS t2 ON t1.branch_id = t2.branch_id JOIN customer AS t3 ON t1.cust_id = t3.cust_id WHERE t3.credit_score < 100 GROUP BY t2.bname ORDER BY sum(t1.amount) DESC LIMIT 1",
        "schema": "CREATE TABLE bank (bname TEXT, branch_ID NUMBER, no_of_customers NUMBER); CREATE TABLE customer (acc_bal NUMBER, cust_ID TEXT, branch_ID NUMBER, cust_name TEXT, credit_score NUMBER); CREATE TABLE loan (branch_ID TEXT, cust_ID TEXT, amount NUMBER, loan_ID TEXT);"
      }
    ],
    [
      {
        "question": "how many loans have an amount greater than 3000?",
        "query": "SELECT count(*) FROM loan WHERE amount > 3000",
        "schema": "CREATE TABLE customer (cust_ID TEXT, branch_ID NUMBER, no_of_loans NUMBER); CREATE TABLE bank (branch_ID NUMBER); CREATE TABLE loan (cust_ID TEXT, branch_ID TEXT, loan_type TEXT, amount NUMBER, loan_ID TEXT);"
      },
      {
        "question": "what are their types?",
        "query": "SELECT DISTINCT loan_type FROM loan WHERE amount > 3000",
        "schema": "CREATE TABLE loan (branch_ID TEXT, amount NUMBER, loan_type TEXT, loan_ID TEXT, cust_ID TEXT); CREATE TABLE bank (branch_ID NUMBER); CREATE TABLE customer (cust_ID TEXT, acc_type TEXT, branch_ID NUMBER, no_of_loans NUMBER);"
      },
      {
        "question": "Find the names of the customers who own these loans.",
        "query": "SELECT t1.cust_name FROM customer AS t1 JOIN loan AS t2 ON t1.cust_id = t2.cust_id WHERE amount > 3000",
        "schema": "CREATE TABLE bank (no_of_customers NUMBER, branch_ID NUMBER); CREATE TABLE loan (cust_ID TEXT, loan_type TEXT, loan_ID TEXT, amount NUMBER, branch_ID TEXT); CREATE TABLE customer (acc_type TEXT, cust_name TEXT, no_of_loans NUMBER, acc_bal NUMBER, cust_ID TEXT, branch_ID NUMBER);"
      }
    ],
    [
      {
        "question": "what is the total amount of all business loans?",
        "query": "SELECT sum(amount) FROM loan WHERE loan_type = 'Business'",
        "schema": "CREATE TABLE loan (cust_ID TEXT, branch_ID TEXT, amount NUMBER, loan_ID TEXT, loan_type TEXT); CREATE TABLE customer (no_of_loans NUMBER); CREATE TABLE bank (branch_ID NUMBER);"
      },
      {
        "question": "what are the names of bank branches that provide these loans?",
        "query": "SELECT t1.bname FROM bank AS t1 JOIN loan AS t2 ON t1.branch_id = t2.branch_id WHERE t2.loan_type = 'Business'",
        "schema": "CREATE TABLE customer (no_of_loans NUMBER); CREATE TABLE bank (bname TEXT, branch_ID NUMBER); CREATE TABLE loan (branch_ID TEXT, cust_ID TEXT, loan_ID TEXT, loan_type TEXT, amount NUMBER);"
      },
      {
        "question": "which cities are these banks located at?",
        "query": "SELECT t1.city FROM bank AS t1 JOIN loan AS t2 ON t1.branch_id = t2.branch_id WHERE t2.loan_type = 'Business'",
        "schema": "CREATE TABLE customer (no_of_loans NUMBER); CREATE TABLE loan (cust_ID TEXT, amount NUMBER, loan_type TEXT, branch_ID TEXT, loan_ID TEXT); CREATE TABLE bank (bname TEXT, branch_ID NUMBER, city TEXT);"
      }
    ],
    [
      {
        "question": "show the name and credit score of all customers.",
        "query": "SELECT cust_name, credit_score FROM customer",
        "schema": "CREATE TABLE customer (cust_ID TEXT, cust_name TEXT, credit_score NUMBER, acc_bal NUMBER);"
      },
      {
        "question": "which of them have a credit score below 100?",
        "query": "SELECT cust_name FROM customer WHERE credit_score < 100",
        "schema": "CREATE TABLE customer (credit_score NUMBER, cust_name TEXT, acc_bal NUMBER, cust_ID TEXT);"
      },
      {
        "question": "Find the names of bank branches that have provided a loan to them.",
        "query": "SELECT t2.bname FROM loan AS t1 JOIN bank AS t2 ON t1.branch_id = t2.branch_id JOIN customer AS t3 ON t1.cust_id = t3.cust_id WHERE t3.credit_score < 100",
        "schema": "CREATE TABLE bank (no_of_customers NUMBER, branch_ID NUMBER, bname TEXT); CREATE TABLE loan (branch_ID TEXT, cust_ID TEXT, loan_ID TEXT); CREATE TABLE customer (branch_ID NUMBER, acc_bal NUMBER, cust_ID TEXT, cust_name TEXT, credit_score NUMBER);"
      }
    ],
    [
      {
        "question": "how many bank branches does the state of New York have?",
        "query": "SELECT count(*) FROM bank WHERE state = 'New York'",
        "schema": "CREATE TABLE customer (branch_ID NUMBER, state TEXT); CREATE TABLE bank (city TEXT, state TEXT, branch_ID NUMBER, bname TEXT); CREATE TABLE loan (branch_ID TEXT);"
      },
      {
        "question": "what are their names?",
        "query": "SELECT bname FROM bank WHERE state = 'New York'",
        "schema": "CREATE TABLE bank (bname TEXT, branch_ID NUMBER, state TEXT, city TEXT); CREATE TABLE customer (state TEXT, branch_ID NUMBER); CREATE TABLE loan (branch_ID TEXT);"
      },
      {
        "question": "what is the total amount of loans provided by them?",
        "query": "SELECT sum(t2.amount) FROM bank AS t1 JOIN loan AS t2 ON t1.branch_id = t2.branch_id WHERE t1.state = 'New York'",
        "schema": "CREATE TABLE customer (state TEXT, branch_ID NUMBER); CREATE TABLE loan (branch_ID TEXT, cust_ID TEXT, loan_ID TEXT, amount NUMBER); CREATE TABLE bank (bname TEXT, city TEXT, state TEXT, branch_ID NUMBER);"
      }
    ],
    [
      {
        "question": "how many customers have at least one loan?",
        "query": "SELECT count(*) FROM customer WHERE cust_id IN (SELECT cust_id FROM loan)",
        "schema": "CREATE TABLE loan (cust_ID TEXT, loan_type TEXT, loan_ID TEXT); CREATE TABLE customer (cust_ID TEXT, cust_name TEXT, acc_bal NUMBER, no_of_loans NUMBER, branch_ID NUMBER, acc_type TEXT); CREATE TABLE bank (no_of_customers NUMBER, branch_ID NUMBER);"
      },
      {
        "question": "which states are they from?",
        "query": "SELECT state FROM customer WHERE cust_id IN (SELECT cust_id FROM loan)",
        "schema": "CREATE TABLE customer (acc_bal NUMBER, no_of_loans NUMBER, cust_ID TEXT, state TEXT, branch_ID NUMBER, acc_type TEXT, cust_name TEXT); CREATE TABLE loan (cust_ID TEXT, branch_ID TEXT, loan_type TEXT, loan_ID TEXT); CREATE TABLE bank (state TEXT, no_of_customers NUMBER, branch_ID NUMBER);"
      },
      {
        "question": "show their credit scores.",
        "query": "SELECT credit_score FROM customer WHERE cust_id IN (SELECT cust_id FROM loan)",
        "schema": "CREATE TABLE customer (state TEXT, acc_type TEXT, no_of_loans NUMBER, acc_bal NUMBER, cust_name TEXT, branch_ID NUMBER, cust_ID TEXT, credit_score NUMBER); CREATE TABLE loan (cust_ID TEXT, loan_ID TEXT, loan_type TEXT, branch_ID TEXT); CREATE TABLE bank (state TEXT, no_of_customers NUMBER, branch_ID NUMBER);"
      },
      {
        "question": "what is the average?",
        "query": "SELECT avg(credit_score) FROM customer WHERE cust_id IN (SELECT cust_id FROM loan)",
        "schema": "CREATE TABLE customer (cust_ID TEXT, cust_name TEXT, branch_ID NUMBER, no_of_loans NUMBER, state TEXT, acc_type TEXT, acc_bal NUMBER, credit_score NUMBER); CREATE TABLE bank (branch_ID NUMBER, state TEXT, no_of_customers NUMBER); CREATE TABLE loan (branch_ID TEXT, amount NUMBER, loan_type TEXT, cust_ID TEXT, loan_ID TEXT);"
      }
    ]
  ],
  "flight_1": [
    [
      {
        "question": "Show all the aircraft information.",
        "query": "SELECT * FROM aircraft",
        "schema": "CREATE TABLE flight (aid NUMBER); CREATE TABLE aircraft (distance NUMBER, name TEXT, aid NUMBER);"
      },
      {
        "question": "How many are there ?",
        "query": "SELECT count(*) FROM aircraft",
        "schema": "CREATE TABLE employee (eid NUMBER); CREATE TABLE flight (aid NUMBER); CREATE TABLE certificate (aid NUMBER); CREATE TABLE aircraft (name TEXT, aid NUMBER, distance NUMBER);"
      }
    ],
    [
      {
        "question": "Show the names of all aircraft.",
        "query": "SELECT name FROM aircraft",
        "schema": "CREATE TABLE aircraft (aid NUMBER, name TEXT);"
      },
      {
        "question": "Also show the distances for each of them.",
        "query": "SELECT name , distance FROM aircraft",
        "schema": "CREATE TABLE aircraft (distance NUMBER, name TEXT, aid NUMBER);"
      }
    ],
    [
      {
        "question": "Show the id for all aircrafts.",
        "query": "SELECT aid FROM aircraft",
        "schema": "CREATE TABLE aircraft (name TEXT, aid NUMBER);"
      },
      {
        "question": "Only show the results for those with a distance longer than 1000.",
        "query": "SELECT aid FROM aircraft WHERE distance > 1000",
        "schema": "CREATE TABLE aircraft (distance NUMBER, name TEXT, aid NUMBER);"
      }
    ],
    [
      {
        "question": "How many aircraft are there?",
        "query": "SELECT count(*) FROM aircraft",
        "schema": "CREATE TABLE employee (eid NUMBER); CREATE TABLE aircraft (distance NUMBER, name TEXT, aid NUMBER); CREATE TABLE flight (aid NUMBER); CREATE TABLE certificate (aid NUMBER);"
      },
      {
        "question": "How many of them have a distance between 1000 and 5000?",
        "query": "SELECT count(*) FROM aircraft WHERE distance BETWEEN 1000 AND 5000",
        "schema": "CREATE TABLE employee (eid NUMBER); CREATE TABLE flight (aid NUMBER); CREATE TABLE certificate (aid NUMBER); CREATE TABLE aircraft (aid NUMBER, name TEXT, distance NUMBER);"
      }
    ],
    [
      {
        "question": "Show the name for all aircraft.",
        "query": "SELECT name FROM aircraft",
        "schema": "CREATE TABLE aircraft (aid NUMBER, name TEXT);"
      },
      {
        "question": "What about the one with id 12?",
        "query": "SELECT name FROM aircraft WHERE aid = 12",
        "schema": "CREATE TABLE aircraft (name TEXT, aid NUMBER);"
      },
      {
        "question": "Also show its distance.",
        "query": "SELECT name , distance FROM aircraft WHERE aid = 12",
        "schema": "CREATE TABLE aircraft (aid NUMBER, distance NUMBER, name TEXT);"
      }
    ],
    [
      {
        "question": "Show the distance for all aircrafts.",
        "query": "SELECT distance FROM aircraft",
        "schema": "CREATE TABLE aircraft (name TEXT, aid NUMBER, distance NUMBER);"
      },
      {
        "question": "Wnat is the minimum?",
        "query": "SELECT min(distance) FROM aircraft",
        "schema": "CREATE TABLE aircraft (name TEXT, distance NUMBER, aid NUMBER);"
      },
      {
        "question": "Also show the average and maximum.",
        "query": "SELECT min(distance) , avg(distance) , max(distance) FROM aircraft",
        "schema": "CREATE TABLE aircraft (name TEXT, distance NUMBER, aid NUMBER);"
      }
    ],
    [
      {
        "question": "Show the id and name for all aircraft.",
        "query": "SELECT aid , name FROM aircraft",
        "schema": "CREATE TABLE aircraft (name TEXT, aid NUMBER);"
      },
      {
        "question": "Order the results in descending order of distance.",
        "query": "SELECT aid , name FROM aircraft ORDER BY distance DESC",
        "schema": "CREATE TABLE aircraft (distance NUMBER, name TEXT, aid NUMBER);"
      },
      {
        "question": "Which one has the maximum?",
        "query": "SELECT aid , name FROM aircraft ORDER BY distance DESC LIMIT 1",
        "schema": "CREATE TABLE aircraft (name TEXT, aid NUMBER, distance NUMBER);"
      }
    ],
    [
      {
        "question": "Show the name for all aircrafts.",
        "query": "SELECT name FROM aircraft",
        "schema": "CREATE TABLE aircraft (aid NUMBER, name TEXT);"
      },
      {
        "question": "Order them by the distance.",
        "query": "SELECT name FROM aircraft ORDER BY distance",
        "schema": "CREATE TABLE aircraft (distance NUMBER, name TEXT, aid NUMBER);"
      },
      {
        "question": "Which three have the lowest?",
        "query": "SELECT name FROM aircraft ORDER BY distance LIMIT 3",
        "schema": "CREATE TABLE aircraft (name TEXT, aid NUMBER, distance NUMBER);"
      }
    ],
    [
      {
        "question": "What is the average distance?",
        "query": "SELECT avg(distance) FROM aircraft",
        "schema": "CREATE TABLE flight (aid NUMBER, distance NUMBER); CREATE TABLE aircraft (distance NUMBER, name TEXT, aid NUMBER); CREATE TABLE employee (eid NUMBER);"
      },
      {
        "question": "Show the name for all aircrafts with a distance above it.",
        "query": "SELECT name FROM aircraft WHERE distance > (SELECT avg(distance) FROM aircraft)",
        "schema": "CREATE TABLE flight (distance NUMBER, aid NUMBER); CREATE TABLE employee (eid NUMBER); CREATE TABLE aircraft (name TEXT, aid NUMBER, distance NUMBER);"
      }
    ],
    [
      {
        "question": "Show information for all employees.",
        "query": "SELECT * FROM employee",
        "schema": "CREATE TABLE employee (eid NUMBER, name TEXT); CREATE TABLE certificate (eid NUMBER);"
      },
      {
        "question": "Show the number of them.",
        "query": "SELECT count(*) FROM employee",
        "schema": "CREATE TABLE certificate (eid NUMBER); CREATE TABLE employee (eid NUMBER, name TEXT);"
      }
    ],
    [
      {
        "question": "Show the name for all employees.",
        "query": "SELECT name FROM employee",
        "schema": "CREATE TABLE employee (eid NUMBER, name TEXT);"
      },
      {
        "question": "Also show their salaries.",
        "query": "SELECT name , salary FROM employee",
        "schema": "CREATE TABLE employee (salary NUMBER, name TEXT, eid NUMBER);"
      },
      {
        "question": "Order the results by their salary.",
        "query": "SELECT name , salary FROM employee ORDER BY salary",
        "schema": "CREATE TABLE employee (salary NUMBER, name TEXT, eid NUMBER);"
      }
    ],
    [
      {
        "question": "Show the id for all employees.",
        "query": "SELECT eid FROM employee",
        "schema": "CREATE TABLE flight (flno NUMBER, aid NUMBER); CREATE TABLE employee (name TEXT, eid NUMBER); CREATE TABLE aircraft (aid NUMBER); CREATE TABLE certificate (eid NUMBER);"
      },
      {
        "question": "Which of them have a salary above 100000?",
        "query": "SELECT eid FROM employee WHERE salary > 100000",
        "schema": "CREATE TABLE aircraft (aid NUMBER); CREATE TABLE certificate (eid NUMBER); CREATE TABLE employee (name TEXT, salary NUMBER, eid NUMBER); CREATE TABLE flight (aid NUMBER, flno NUMBER);"
      }
    ],
    [
      {
        "question": "Show the total number of employees.",
        "query": "SELECT count(*) FROM employee",
        "schema": "CREATE TABLE employee (eid NUMBER, name TEXT);"
      },
      {
        "question": "How many of them have a salary between 100000 and 200000?",
        "query": "SELECT count(*) FROM employee WHERE salary BETWEEN 100000 AND 200000",
        "schema": "CREATE TABLE employee (eid NUMBER, salary NUMBER, name TEXT);"
      }
    ],
    [
      {
        "question": "Show the information for the employee with id 242518965.",
        "query": "SELECT * FROM employee WHERE eid = 242518965",
        "schema": "CREATE TABLE aircraft (aid NUMBER); CREATE TABLE employee (name TEXT, eid NUMBER); CREATE TABLE flight (flno NUMBER); CREATE TABLE certificate (eid NUMBER);"
      },
      {
        "question": "What is the name and salary for this employee?",
        "query": "SELECT name , salary FROM employee WHERE eid = 242518965",
        "schema": "CREATE TABLE certificate (eid NUMBER); CREATE TABLE aircraft (aid NUMBER); CREATE TABLE flight (flno NUMBER); CREATE TABLE employee (eid NUMBER, salary NUMBER, name TEXT);"
      }
    ],
    [
      {
        "question": "What is the salary for all employees.",
        "query": "SELECT salary FROM employee",
        "schema": "CREATE TABLE employee (name TEXT, eid NUMBER, salary NUMBER);"
      },
      {
        "question": "What are the average and maximum salaries.",
        "query": "SELECT avg(salary) , max(salary) FROM employee",
        "schema": "CREATE TABLE employee (salary NUMBER, eid NUMBER, name TEXT);"
      }
    ],
    [
      {
        "question": "Show the id and name of the employees.",
        "query": "SELECT eid , name FROM employee",
        "schema": "CREATE TABLE employee (name TEXT, eid NUMBER);"
      },
      {
        "question": "Order them by salary.",
        "query": "SELECT eid , name FROM employee ORDER BY salary",
        "schema": "CREATE TABLE employee (eid NUMBER, salary NUMBER, name TEXT);"
      },
      {
        "question": "Who has the maximum salary?",
        "query": "SELECT eid , name FROM employee ORDER BY salary DESC LIMIT 1",
        "schema": "CREATE TABLE employee (name TEXT, salary NUMBER, eid NUMBER);"
      }
    ],
    [
      {
        "question": "Show the names of all employees.",
        "query": "SELECT name FROM employee",
        "schema": "CREATE TABLE employee (name TEXT, eid NUMBER);"
      },
      {
        "question": "Order the results by their salaries.",
        "query": "SELECT name FROM employee ORDER BY salary",
        "schema": "CREATE TABLE employee (eid NUMBER, name TEXT, salary NUMBER);"
      },
      {
        "question": "Which three have the lowest?",
        "query": "SELECT name FROM employee ORDER BY salary ASC LIMIT 3",
        "schema": "CREATE TABLE employee (name TEXT, eid NUMBER, salary NUMBER);"
      }
    ],
    [
      {
        "question": "Show the salaries for all employees.",
        "query": "SELECT salary FROM employee",
        "schema": "CREATE TABLE employee (eid NUMBER, name TEXT, salary NUMBER);"
      },
      {
        "question": "What is the average of them?",
        "query": "SELECT avg(salary) FROM employee",
        "schema": "CREATE TABLE employee (salary NUMBER, eid NUMBER, name TEXT);"
      },
      {
        "question": "Show the name for all employees with a salary above that.",
        "query": "SELECT name FROM employee WHERE salary > (SELECT avg(salary) FROM employee)",
        "schema": "CREATE TABLE employee (name TEXT, salary NUMBER, eid NUMBER);"
      }
    ],
    [
      {
        "question": "Show ids for all the employees.",
        "query": "SELECT eid FROM employee",
        "schema": "CREATE TABLE certificate (eid NUMBER); CREATE TABLE employee (eid NUMBER, name TEXT); CREATE TABLE aircraft (aid NUMBER);"
      },
      {
        "question": "Show the id for employee Mark Young.",
        "query": "SELECT eid FROM employee WHERE name = 'Mark Young'",
        "schema": "CREATE TABLE employee (eid NUMBER, name TEXT); CREATE TABLE certificate (eid NUMBER); CREATE TABLE aircraft (aid NUMBER);"
      },
      {
        "question": "Also show his salary.",
        "query": "SELECT eid , salary FROM employee WHERE name = 'Mark Young'",
        "schema": "CREATE TABLE aircraft (aid NUMBER); CREATE TABLE employee (eid NUMBER, name TEXT, salary NUMBER); CREATE TABLE certificate (eid NUMBER);"
      }
    ],
    [
      {
        "question": "Show the info for all flights.",
        "query": "SELECT * FROM flight",
        "schema": "CREATE TABLE aircraft (aid NUMBER); CREATE TABLE flight (flno NUMBER, aid NUMBER);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT count(*) FROM flight",
        "schema": "CREATE TABLE aircraft (aid NUMBER); CREATE TABLE flight (flno NUMBER, distance NUMBER, aid NUMBER, origin TEXT);"
      }
    ],
    [
      {
        "question": "Show the flight number of all flights.",
        "query": "SELECT flno FROM flight",
        "schema": "CREATE TABLE employee (eid NUMBER); CREATE TABLE flight (flno NUMBER, aid NUMBER); CREATE TABLE aircraft (aid NUMBER);"
      },
      {
        "question": "Also show the origin and destination for them.",
        "query": "SELECT flno , origin , destination FROM flight",
        "schema": "CREATE TABLE aircraft (aid NUMBER); CREATE TABLE employee (eid NUMBER); CREATE TABLE flight (destination TEXT, origin TEXT, aid NUMBER, flno NUMBER);"
      },
      {
        "question": "Order them in the alphabetical order of the departure cities.",
        "query": "SELECT flno , origin , destination FROM flight ORDER BY origin",
        "schema": "CREATE TABLE employee (eid NUMBER); CREATE TABLE flight (origin TEXT, flno NUMBER, destination TEXT, aid NUMBER); CREATE TABLE aircraft (aid NUMBER);"
      }
    ],
    [
      {
        "question": "Show all flight numbers",
        "query": "SELECT flno FROM flight",
        "schema": "CREATE TABLE flight (aid NUMBER, flno NUMBER, distance NUMBER); CREATE TABLE aircraft (aid NUMBER);"
      },
      {
        "question": "Filter for only those from Los Angeles?",
        "query": "SELECT flno FROM flight WHERE origin = \"Los Angeles\"",
        "schema": "CREATE TABLE aircraft (aid NUMBER); CREATE TABLE flight (distance NUMBER, aid NUMBER, origin TEXT, destination TEXT, flno NUMBER);"
      }
    ],
    [
      {
        "question": "Show the origin for all flights.",
        "query": "SELECT origin FROM flight",
        "schema": "CREATE TABLE flight (aid NUMBER, destination TEXT, origin TEXT, flno NUMBER);"
      },
      {
        "question": "How about the origin for those with destination Honolulu?",
        "query": "SELECT origin FROM flight WHERE destination = \"Honolulu\"",
        "schema": "CREATE TABLE flight (flno NUMBER, destination TEXT, aid NUMBER, origin TEXT);"
      }
    ],
    [
      {
        "question": "Show the  departure date and arrival date for all flights.",
        "query": "SELECT departure_date , arrival_date FROM flight",
        "schema": "CREATE TABLE flight (flno NUMBER, arrival_date TIME, departure_date TIME, destination TEXT);"
      },
      {
        "question": "How about those from Los Angeles?",
        "query": "SELECT departure_date , arrival_date FROM flight WHERE origin = \"Los Angeles\"",
        "schema": "CREATE TABLE flight (origin TEXT, flno NUMBER, destination TEXT, arrival_date TIME, departure_date TIME);"
      },
      {
        "question": "From these results, only show those flying to Honolulu.",
        "query": "SELECT departure_date , arrival_date FROM flight WHERE origin = \"Los Angeles\" AND destination = \"Honolulu\"",
        "schema": "CREATE TABLE flight (departure_date TIME, flno NUMBER, destination TEXT, arrival_date TIME, origin TEXT);"
      }
    ],
    [
      {
        "question": "Show the flight numbers for all flights.",
        "query": "SELECT flno FROM flight",
        "schema": "CREATE TABLE flight (aid NUMBER, flno NUMBER); CREATE TABLE employee (eid NUMBER); CREATE TABLE aircraft (aid NUMBER);"
      },
      {
        "question": "How about those with distance longer than 2000?",
        "query": "SELECT flno FROM flight WHERE distance > 2000",
        "schema": "CREATE TABLE employee (eid NUMBER); CREATE TABLE flight (distance NUMBER, flno NUMBER, aid NUMBER); CREATE TABLE aircraft (aid NUMBER, distance NUMBER);"
      }
    ],
    [
      {
        "question": "Show the price for all flights.",
        "query": "SELECT price FROM flight",
        "schema": "CREATE TABLE flight (flno NUMBER, price NUMBER, aid NUMBER);"
      },
      {
        "question": "How about those from Los Angeles to Honolulu?",
        "query": "SELECT price FROM flight WHERE origin = \"Los Angeles\" AND destination = \"Honolulu\"",
        "schema": "CREATE TABLE flight (distance NUMBER, destination TEXT, origin TEXT, price NUMBER, aid NUMBER, flno NUMBER);"
      },
      {
        "question": "What is the average of them?",
        "query": "SELECT avg(price) FROM flight WHERE origin = \"Los Angeles\" AND destination = \"Honolulu\"",
        "schema": "CREATE TABLE flight (destination TEXT, price NUMBER, distance NUMBER, origin TEXT, aid NUMBER, flno NUMBER);"
      }
    ],
    [
      {
        "question": "Show the origin for all flights.",
        "query": "SELECT origin FROM flight",
        "schema": "CREATE TABLE flight (flno NUMBER, destination TEXT, aid NUMBER, origin TEXT);"
      },
      {
        "question": "How about those with a price higher than 300?",
        "query": "SELECT origin FROM flight WHERE price > 300",
        "schema": "CREATE TABLE flight (origin TEXT, destination TEXT, flno NUMBER, aid NUMBER, price NUMBER);"
      },
      {
        "question": "For each of them, also show the destination.",
        "query": "SELECT origin , destination FROM flight WHERE price > 300",
        "schema": "CREATE TABLE flight (flno NUMBER, price NUMBER, aid NUMBER, origin TEXT, destination TEXT);"
      }
    ],
    [
      {
        "question": "Show the flight number and distance of all the flights.",
        "query": "SELECT flno , distance FROM flight",
        "schema": "CREATE TABLE flight (flno NUMBER, aid NUMBER, distance NUMBER); CREATE TABLE aircraft (distance NUMBER, aid NUMBER); CREATE TABLE employee (eid NUMBER);"
      },
      {
        "question": "List them in the descending order of the price.",
        "query": "SELECT flno , distance FROM flight ORDER BY price DESC",
        "schema": "CREATE TABLE aircraft (distance NUMBER, aid NUMBER); CREATE TABLE flight (distance NUMBER, price NUMBER, flno NUMBER, aid NUMBER); CREATE TABLE employee (eid NUMBER);"
      },
      {
        "question": "Which has the maximum price?",
        "query": "SELECT flno , distance FROM flight ORDER BY price DESC LIMIT 1",
        "schema": "CREATE TABLE employee (eid NUMBER); CREATE TABLE aircraft (distance NUMBER, aid NUMBER); CREATE TABLE flight (distance NUMBER, flno NUMBER, price NUMBER, aid NUMBER);"
      }
    ],
    [
      {
        "question": "Show all flight numbers.",
        "query": "SELECT flno FROM flight",
        "schema": "CREATE TABLE employee (eid NUMBER); CREATE TABLE flight (distance NUMBER, flno NUMBER, aid NUMBER); CREATE TABLE aircraft (aid NUMBER);"
      },
      {
        "question": "Order them by the distance.",
        "query": "SELECT flno FROM flight ORDER BY distance",
        "schema": "CREATE TABLE flight (distance NUMBER, flno NUMBER, aid NUMBER); CREATE TABLE aircraft (distance NUMBER, aid NUMBER); CREATE TABLE employee (eid NUMBER);"
      },
      {
        "question": "Show the three shortest.",
        "query": "SELECT flno FROM flight ORDER BY distance ASC LIMIT 3",
        "schema": "CREATE TABLE flight (aid NUMBER, flno NUMBER, distance NUMBER); CREATE TABLE employee (eid NUMBER); CREATE TABLE aircraft (distance NUMBER, aid NUMBER);"
      }
    ],
    [
      {
        "question": "Show the distance and price for all flights.",
        "query": "SELECT distance , price FROM flight",
        "schema": "CREATE TABLE flight (aid NUMBER, price NUMBER, flno NUMBER, distance NUMBER); CREATE TABLE aircraft (distance NUMBER, aid NUMBER);"
      },
      {
        "question": "Show the result only for those from Los Angeles.",
        "query": "SELECT distance , price FROM flight WHERE origin = \"Los Angeles\"",
        "schema": "CREATE TABLE flight (price NUMBER, aid NUMBER, destination TEXT, flno NUMBER, distance NUMBER, origin TEXT); CREATE TABLE aircraft (distance NUMBER, aid NUMBER);"
      },
      {
        "question": "What is the average distance and average price for them?",
        "query": "SELECT avg(distance) , avg(price) FROM flight WHERE origin = \"Los Angeles\"",
        "schema": "CREATE TABLE flight (aid NUMBER, distance NUMBER, destination TEXT, price NUMBER, flno NUMBER, origin TEXT); CREATE TABLE aircraft (distance NUMBER, aid NUMBER);"
      }
    ],
    [
      {
        "question": "Show the number of flights in total.",
        "query": "SELECT count(*) FROM flight",
        "schema": "CREATE TABLE flight (distance NUMBER, aid NUMBER, flno NUMBER); CREATE TABLE aircraft (aid NUMBER);"
      },
      {
        "question": "Breakdown the count by the origin.",
        "query": "SELECT origin , count(*) FROM flight GROUP BY origin",
        "schema": "CREATE TABLE aircraft (aid NUMBER); CREATE TABLE flight (distance NUMBER, origin TEXT, aid NUMBER, flno NUMBER);"
      }
    ],
    [
      {
        "question": "Show the destination for all flights.",
        "query": "SELECT destination FROM flight",
        "schema": "CREATE TABLE flight (destination TEXT, aid NUMBER, flno NUMBER, origin TEXT);"
      },
      {
        "question": "For each of them, what is the number of flights?",
        "query": "SELECT destination , count(*) FROM flight GROUP BY destination",
        "schema": "CREATE TABLE flight (destination TEXT, flno NUMBER, aid NUMBER, origin TEXT);"
      }
    ],
    [
      {
        "question": "Show the origin for all flights.",
        "query": "SELECT origin FROM flight",
        "schema": "CREATE TABLE flight (flno NUMBER, destination TEXT, aid NUMBER, origin TEXT);"
      },
      {
        "question": "For each city, how many flights are departing from there?",
        "query": "SELECT origin, count(*) FROM flight GROUP BY origin",
        "schema": "CREATE TABLE flight (aid NUMBER, departure_date TIME, origin TEXT, destination TEXT, flno NUMBER, arrival_date TIME);"
      },
      {
        "question": "Order them in descending order of number of departures.",
        "query": "SELECT origin FROM flight GROUP BY origin ORDER BY count(*) DESC",
        "schema": "CREATE TABLE flight (aid NUMBER, departure_date TIME, flno NUMBER, origin TEXT, arrival_date TIME, destination TEXT);"
      },
      {
        "question": "Which origin has the most?",
        "query": "SELECT origin FROM flight GROUP BY origin ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE flight (arrival_date TIME, flno NUMBER, aid NUMBER, departure_date TIME, origin TEXT, destination TEXT);"
      }
    ],
    [
      {
        "question": "Show the destination for all flights.",
        "query": "SELECT destination FROM flight",
        "schema": "CREATE TABLE flight (flno NUMBER, aid NUMBER, origin TEXT, destination TEXT);"
      },
      {
        "question": "For each destination, show the number of flights arriving there.",
        "query": "SELECT destination, count(*) FROM flight GROUP BY destination",
        "schema": "CREATE TABLE flight (flno NUMBER, aid NUMBER, origin TEXT, arrival_date TIME, destination TEXT);"
      },
      {
        "question": "Which destination has the fewest?",
        "query": "SELECT destination FROM flight GROUP BY destination ORDER BY count(*) LIMIT 1",
        "schema": "CREATE TABLE flight (arrival_date TIME, aid NUMBER, destination TEXT, flno NUMBER, origin TEXT);"
      }
    ],
    [
      {
        "question": "Show the name for all aircraft.",
        "query": "SELECT name FROM aircraft",
        "schema": "CREATE TABLE aircraft (aid NUMBER, name TEXT);"
      },
      {
        "question": "Which one of them is being taken on flight 99?",
        "query": "SELECT t2.name FROM flight AS t1 JOIN aircraft AS t2 ON t1.aid = t2.aid WHERE t1.flno = 99",
        "schema": "CREATE TABLE aircraft (aid NUMBER, name TEXT); CREATE TABLE flight (distance NUMBER, flno NUMBER, aid NUMBER);"
      }
    ],
    [
      {
        "question": "Show all flight numbers.",
        "query": "SELECT flno FROM flight",
        "schema": "CREATE TABLE aircraft (aid NUMBER); CREATE TABLE flight (distance NUMBER, aid NUMBER, flno NUMBER);"
      },
      {
        "question": "Which of them are on aircraft Airbus A340-300?",
        "query": "SELECT t1.flno FROM flight AS t1 JOIN aircraft AS t2 ON t1.aid = t2.aid WHERE t2.name = \"Airbus A340-300\"",
        "schema": "CREATE TABLE flight (distance NUMBER, aid NUMBER, flno NUMBER); CREATE TABLE aircraft (name TEXT, aid NUMBER);"
      }
    ],
    [
      {
        "question": "Show the name for all aircraft.",
        "query": "SELECT name FROM aircraft",
        "schema": "CREATE TABLE aircraft (aid NUMBER, name TEXT);"
      },
      {
        "question": "For each of them, count the number of flights.",
        "query": "SELECT t2.name , count(*) FROM flight AS t1 JOIN aircraft AS t2 ON t1.aid = t2.aid GROUP BY t1.aid",
        "schema": "CREATE TABLE flight (aid NUMBER, flno NUMBER); CREATE TABLE aircraft (aid NUMBER, name TEXT, distance NUMBER);"
      }
    ],
    [
      {
        "question": "Show names for all aircraft.",
        "query": "SELECT name FROM aircraft",
        "schema": "CREATE TABLE aircraft (aid NUMBER, name TEXT);"
      },
      {
        "question": "For each of them, also show the number of flights.",
        "query": "SELECT t2.name, count(*) FROM flight AS t1 JOIN aircraft AS t2 ON t1.aid = t2.aid GROUP BY t1.aid",
        "schema": "CREATE TABLE certificate (aid NUMBER); CREATE TABLE aircraft (aid NUMBER, name TEXT); CREATE TABLE flight (aid NUMBER, flno NUMBER);"
      },
      {
        "question": "Which two have the fewest?",
        "query": "SELECT t2.name FROM flight AS t1 JOIN aircraft AS t2 ON t1.aid = t2.aid GROUP BY t1.aid HAVING count(*) >= 2",
        "schema": "CREATE TABLE certificate (aid NUMBER); CREATE TABLE flight (aid NUMBER, flno NUMBER); CREATE TABLE aircraft (name TEXT, distance NUMBER, aid NUMBER);"
      }
    ],
    [
      {
        "question": "Show employee ids for all certificates.",
        "query": "SELECT eid FROM certificate",
        "schema": "CREATE TABLE employee (name TEXT, eid NUMBER); CREATE TABLE certificate (eid NUMBER, aid NUMBER);"
      },
      {
        "question": "What are the distinct ids among them?",
        "query": "SELECT DISTINCT eid FROM certificate",
        "schema": "CREATE TABLE certificate (eid NUMBER, aid NUMBER); CREATE TABLE employee (eid NUMBER, name TEXT);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT count(DISTINCT eid) FROM certificate",
        "schema": "CREATE TABLE certificate (eid NUMBER, aid NUMBER); CREATE TABLE employee (eid NUMBER, name TEXT);"
      }
    ],
    [
      {
        "question": "Show the employee ids with a certificate.",
        "query": "SELECT eid FROM certificate",
        "schema": "CREATE TABLE aircraft (aid NUMBER); CREATE TABLE certificate (eid NUMBER, aid NUMBER); CREATE TABLE flight (flno NUMBER, aid NUMBER); CREATE TABLE employee (eid NUMBER, name TEXT);"
      },
      {
        "question": "Show the employee ids without any.",
        "query": "SELECT eid FROM employee EXCEPT SELECT eid FROM certificate",
        "schema": "CREATE TABLE employee (name TEXT, eid NUMBER); CREATE TABLE certificate (aid NUMBER, eid NUMBER); CREATE TABLE flight (aid NUMBER, flno NUMBER); CREATE TABLE aircraft (aid NUMBER);"
      }
    ],
    [
      {
        "question": "Show the name for all aircraft.",
        "query": "SELECT name FROM aircraft",
        "schema": "CREATE TABLE aircraft (aid NUMBER, name TEXT);"
      },
      {
        "question": "For each, also show the names of employees with a certificate on it.",
        "query": "SELECT t3.name, t1.name FROM employee AS t1 JOIN certificate AS t2 ON t1.eid = t2.eid JOIN aircraft AS t3 ON t3.aid = t2.aid",
        "schema": "CREATE TABLE employee (name TEXT, eid NUMBER); CREATE TABLE aircraft (name TEXT, aid NUMBER); CREATE TABLE certificate (eid NUMBER, aid NUMBER);"
      },
      {
        "question": "What are the names of aircraft of which John Williams has certificates?",
        "query": "SELECT t3.name FROM employee AS t1 JOIN certificate AS t2 ON t1.eid = t2.eid JOIN aircraft AS t3 ON t3.aid = t2.aid WHERE t1.name = \"John Williams\"",
        "schema": "CREATE TABLE employee (eid NUMBER, name TEXT); CREATE TABLE certificate (aid NUMBER, eid NUMBER); CREATE TABLE aircraft (aid NUMBER, name TEXT);"
      }
    ],
    [
      {
        "question": "Show names for all employees.",
        "query": "SELECT name FROM employee",
        "schema": "CREATE TABLE employee (eid NUMBER, name TEXT);"
      },
      {
        "question": "Also show the name of aircraft on which they have a certificate.",
        "query": "SELECT t1.name, t3.name FROM employee AS t1 JOIN certificate AS t2 ON t1.eid = t2.eid JOIN aircraft AS t3 ON t3.aid = t2.aid",
        "schema": "CREATE TABLE certificate (eid NUMBER, aid NUMBER); CREATE TABLE employee (eid NUMBER, name TEXT); CREATE TABLE aircraft (name TEXT, aid NUMBER);"
      },
      {
        "question": "Which of those employees have certificate of Boeing 737-800?",
        "query": "SELECT t1.name FROM employee AS t1 JOIN certificate AS t2 ON t1.eid = t2.eid JOIN aircraft AS t3 ON t3.aid = t2.aid WHERE t3.name = \"Boeing 737-800\"",
        "schema": "CREATE TABLE certificate (eid NUMBER, aid NUMBER); CREATE TABLE aircraft (aid NUMBER, name TEXT); CREATE TABLE employee (name TEXT, eid NUMBER);"
      }
    ],
    [
      {
        "question": "Show names for all employees.",
        "query": "SELECT name FROM employee",
        "schema": "CREATE TABLE employee (eid NUMBER, name TEXT);"
      },
      {
        "question": "Which of those have certificates on Boeing 737-800?",
        "query": "SELECT t1.name FROM employee AS t1 JOIN certificate AS t2 ON t1.eid = t2.eid JOIN aircraft AS t3 ON t3.aid = t2.aid WHERE t3.name = \"Boeing 737-800\"",
        "schema": "CREATE TABLE employee (name TEXT, eid NUMBER); CREATE TABLE aircraft (name TEXT, aid NUMBER); CREATE TABLE certificate (aid NUMBER, eid NUMBER);"
      },
      {
        "question": "How about those with certificates on Airbus A340-300?",
        "query": "SELECT t1.name FROM employee AS t1 JOIN certificate AS t2 ON t1.eid = t2.eid JOIN aircraft AS t3 ON t3.aid = t2.aid WHERE t3.name = \"Airbus A340-300\"",
        "schema": "CREATE TABLE aircraft (aid NUMBER, name TEXT); CREATE TABLE certificate (aid NUMBER, eid NUMBER); CREATE TABLE employee (name TEXT, eid NUMBER);"
      },
      {
        "question": "Who have both?",
        "query": "SELECT t1.name FROM employee AS t1 JOIN certificate AS t2 ON t1.eid = t2.eid JOIN aircraft AS t3 ON t3.aid = t2.aid WHERE t3.name = \"Boeing 737-800\" INTERSECT SELECT t1.name FROM employee AS t1 JOIN certificate AS t2 ON t1.eid = t2.eid JOIN aircraft AS t3 ON t3.aid = t2.aid WHERE t3.name = \"Airbus A340-300\"",
        "schema": "CREATE TABLE employee (name TEXT, eid NUMBER); CREATE TABLE aircraft (aid NUMBER, name TEXT); CREATE TABLE certificate (aid NUMBER, eid NUMBER);"
      }
    ],
    [
      {
        "question": "Show the names of employees with a certificate.",
        "query": "SELECT t1.name FROM employee AS t1 JOIN certificate AS t2 ON t1.eid = t2.eid",
        "schema": "CREATE TABLE employee (eid NUMBER, name TEXT); CREATE TABLE certificate (aid NUMBER, eid NUMBER);"
      },
      {
        "question": "Which of them have a certificate on Boeing 737-800?",
        "query": "SELECT t1.name FROM employee AS t1 JOIN certificate AS t2 ON t1.eid = t2.eid JOIN aircraft AS t3 ON t3.aid = t2.aid WHERE t3.name = \"Boeing 737-800\"",
        "schema": "CREATE TABLE aircraft (aid NUMBER, name TEXT); CREATE TABLE certificate (eid NUMBER, aid NUMBER); CREATE TABLE employee (name TEXT, eid NUMBER);"
      },
      {
        "question": "Show the names for all employees without this particular certificate.",
        "query": "SELECT name FROM employee EXCEPT SELECT t1.name FROM employee AS t1 JOIN certificate AS t2 ON t1.eid = t2.eid JOIN aircraft AS t3 ON t3.aid = t2.aid WHERE t3.name = \"Boeing 737-800\"",
        "schema": "CREATE TABLE certificate (aid NUMBER, eid NUMBER); CREATE TABLE employee (name TEXT, eid NUMBER); CREATE TABLE aircraft (aid NUMBER, name TEXT);"
      }
    ],
    [
      {
        "question": "Show the name of all aircrafts.",
        "query": "SELECT name FROM aircraft",
        "schema": "CREATE TABLE aircraft (name TEXT, aid NUMBER);"
      },
      {
        "question": "Also show the number of people with a certificate on each one.",
        "query": "SELECT t2.name, count(*) FROM certificate AS t1 JOIN aircraft AS t2 ON t2.aid = t1.aid GROUP BY t1.aid",
        "schema": "CREATE TABLE aircraft (name TEXT, aid NUMBER); CREATE TABLE certificate (aid NUMBER, eid NUMBER);"
      },
      {
        "question": "Order the aircraft by these counts.",
        "query": "SELECT t2.name FROM certificate AS t1 JOIN aircraft AS t2 ON t2.aid = t1.aid GROUP BY t1.aid ORDER BY count(*)",
        "schema": "CREATE TABLE aircraft (name TEXT, aid NUMBER); CREATE TABLE certificate (eid NUMBER, aid NUMBER);"
      },
      {
        "question": "Which of them has the fewest?",
        "query": "SELECT t2.name FROM certificate AS t1 JOIN aircraft AS t2 ON t2.aid = t1.aid GROUP BY t1.aid ORDER BY count(*) LIMIT 1",
        "schema": "CREATE TABLE certificate (aid NUMBER, eid NUMBER); CREATE TABLE aircraft (aid NUMBER, name TEXT);"
      }
    ],
    [
      {
        "question": "Show the name and distance of the aircrafts.",
        "query": "SELECT name, distance FROM aircraft",
        "schema": "CREATE TABLE aircraft (distance NUMBER, name TEXT, aid NUMBER);"
      },
      {
        "question": "How about those with a distance longer than 5000?",
        "query": "SELECT name, distance FROM aircraft WHERE distance > 5000",
        "schema": "CREATE TABLE aircraft (distance NUMBER, aid NUMBER, name TEXT);"
      },
      {
        "question": "Which also have at least 5 people with the certificate?",
        "query": "SELECT t2.name, t2.distance FROM certificate AS t1 JOIN aircraft AS t2 ON t2.aid = t1.aid WHERE t2.distance > 5000 GROUP BY t1.aid ORDER BY count(*) >= 5",
        "schema": "CREATE TABLE certificate (aid NUMBER, eid NUMBER); CREATE TABLE aircraft (name TEXT, aid NUMBER, distance NUMBER);"
      }
    ],
    [
      {
        "question": "Show the employee names with their corresponding counts of aircraft certificates.",
        "query": "SELECT t1.name, count(*) FROM employee AS t1 JOIN certificate AS t2 ON t1.eid = t2.eid GROUP BY t1.eid",
        "schema": "CREATE TABLE aircraft (aid NUMBER, name TEXT); CREATE TABLE certificate (aid NUMBER, eid NUMBER); CREATE TABLE employee (name TEXT, eid NUMBER); CREATE TABLE flight (flno NUMBER, aid NUMBER);"
      },
      {
        "question": "Order the employees by these counts.",
        "query": "SELECT t1.name, count(*) FROM employee AS t1 JOIN certificate AS t2 ON t1.eid = t2.eid GROUP BY t1.eid ORDER BY count(*)",
        "schema": "CREATE TABLE flight (aid NUMBER, flno NUMBER); CREATE TABLE employee (name TEXT, eid NUMBER); CREATE TABLE aircraft (aid NUMBER, name TEXT); CREATE TABLE certificate (aid NUMBER, eid NUMBER);"
      },
      {
        "question": "Who has the most certificates?",
        "query": "SELECT t1.name FROM employee AS t1 JOIN certificate AS t2 ON t1.eid = t2.eid GROUP BY t1.eid ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE aircraft (name TEXT, aid NUMBER); CREATE TABLE flight (flno NUMBER, aid NUMBER); CREATE TABLE certificate (aid NUMBER, eid NUMBER); CREATE TABLE employee (eid NUMBER, name TEXT);"
      },
      {
        "question": "what is the name and salary of this employee?",
        "query": "SELECT t1.name , t1.salary FROM employee AS t1 JOIN certificate AS t2 ON t1.eid = t2.eid GROUP BY t1.eid ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE aircraft (aid NUMBER, name TEXT); CREATE TABLE employee (name TEXT, eid NUMBER, salary NUMBER); CREATE TABLE certificate (eid NUMBER, aid NUMBER); CREATE TABLE flight (aid NUMBER, flno NUMBER);"
      }
    ]
  ],
  "party_people": [
    [
      {
        "question": "Show me a list of party ministers.",
        "query": "SELECT minister FROM party",
        "schema": "CREATE TABLE party (Minister TEXT, Party_ID NUMBER, Took_office TEXT, Party_name TEXT, Left_office TEXT);"
      },
      {
        "question": "Which ones took office between 1959 and 1961?",
        "query": "SELECT minister FROM party WHERE took_office >= 1959 AND took_office <= 1961",
        "schema": "CREATE TABLE party (Left_office TEXT, Minister TEXT, Took_office TEXT, Party_ID NUMBER, Party_name TEXT);"
      },
      {
        "question": "How about the others except those?",
        "query": "SELECT minister FROM party WHERE took_office > 1961 OR took_office < 1959",
        "schema": "CREATE TABLE party (Party_ID NUMBER, Left_office TEXT, Minister TEXT, Party_name TEXT, Took_office TEXT);"
      }
    ],
    [
      {
        "question": "Who are all the ministers?",
        "query": "SELECT minister FROM party",
        "schema": "CREATE TABLE party (Minister TEXT, Left_office TEXT, Took_office TEXT);"
      },
      {
        "question": "When did they each start?",
        "query": "SELECT minister, took_office FROM party",
        "schema": "CREATE TABLE party (Party_name TEXT, Party_ID NUMBER, Took_office TEXT, Minister TEXT, Left_office TEXT);"
      },
      {
        "question": "When did they each leave?",
        "query": "SELECT minister, left_office FROM party",
        "schema": "CREATE TABLE party (Took_office TEXT, Minister TEXT, Party_name TEXT, Party_ID NUMBER, Left_office TEXT);"
      },
      {
        "question": "Who left most recently?",
        "query": "SELECT minister FROM party ORDER BY left_office DESC LIMIT 1",
        "schema": "CREATE TABLE party (Party_name TEXT, Minister TEXT, Took_office TEXT, Left_office TEXT, Party_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What are all the party names?",
        "query": "SELECT party_name FROM party",
        "schema": "CREATE TABLE party_events (Event_Name TEXT, Member_in_charge_ID NUMBER, Party_ID NUMBER); CREATE TABLE party (Party_name TEXT, Party_ID NUMBER); CREATE TABLE member (Party_ID TEXT, Member_ID NUMBER, Member_Name TEXT);"
      },
      {
        "question": "Show me all the members each have.",
        "query": "SELECT * FROM member AS t1 JOIN party AS t2 ON t1.party_id = t2.party_id",
        "schema": "CREATE TABLE party_events (Event_Name TEXT, Party_ID NUMBER, Member_in_charge_ID NUMBER); CREATE TABLE member (Member_Name TEXT, Party_ID TEXT, Member_ID NUMBER); CREATE TABLE party (Party_ID NUMBER, Party_name TEXT);"
      },
      {
        "question": "How many does each party have?",
        "query": "SELECT t2.party_name, count(*) FROM member AS t1 JOIN party AS t2 ON t1.party_id = t2.party_id GROUP BY party_name",
        "schema": "CREATE TABLE member (Member_Name TEXT, Party_ID TEXT, Member_ID NUMBER); CREATE TABLE party (Party_ID NUMBER, Party_name TEXT); CREATE TABLE party_events (Member_in_charge_ID NUMBER, Party_ID NUMBER, Event_Name TEXT);"
      }
    ],
    [
      {
        "question": "What about the least number?",
        "query": "SELECT count(*) FROM member AS t1 JOIN party AS t2 ON t1.party_id = t2.party_id GROUP BY t1.party_id ORDER BY count(*) ASC LIMIT 1",
        "schema": "CREATE TABLE region (Region_ID NUMBER); CREATE TABLE party_events (Member_in_charge_ID NUMBER, Party_ID NUMBER); CREATE TABLE member (Member_ID NUMBER, Party_ID TEXT); CREATE TABLE party (Party_name TEXT, Party_ID NUMBER);"
      },
      {
        "question": "How about the max?",
        "query": "SELECT count(*) FROM member AS t1 JOIN party AS t2 ON t1.party_id = t2.party_id GROUP BY t1.party_id ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE party_events (Member_in_charge_ID NUMBER, Party_ID NUMBER); CREATE TABLE party (Party_name TEXT, Party_ID NUMBER); CREATE TABLE member (Member_ID NUMBER, Party_ID TEXT); CREATE TABLE region (Region_ID NUMBER);"
      },
      {
        "question": "What is the name of the party that has this number per party?",
        "query": "SELECT t2.party_name FROM member AS t1 JOIN party AS t2 ON t1.party_id = t2.party_id GROUP BY t1.party_id ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE party_events (Party_ID NUMBER, Member_in_charge_ID NUMBER); CREATE TABLE member (Member_ID NUMBER, Party_ID TEXT, Member_Name TEXT); CREATE TABLE party (Party_name TEXT, Party_ID NUMBER); CREATE TABLE region (Region_ID NUMBER, Region_name TEXT);"
      }
    ],
    [
      {
        "question": "What are the names of all parties?",
        "query": "SELECT party_name FROM party",
        "schema": "CREATE TABLE party (Party_name TEXT, Party_ID NUMBER); CREATE TABLE member (Member_ID NUMBER, Member_Name TEXT, Party_ID TEXT); CREATE TABLE party_events (Event_Name TEXT, Party_ID NUMBER, Member_in_charge_ID NUMBER);"
      },
      {
        "question": "How many have no members?",
        "query": "SELECT count(*) FROM party WHERE party_id NOT IN (SELECT party_id FROM member)",
        "schema": "CREATE TABLE member (Party_ID TEXT, Member_ID NUMBER, Member_Name TEXT); CREATE TABLE party_events (Event_Name TEXT, Member_in_charge_ID NUMBER, Party_ID NUMBER); CREATE TABLE party (Party_name TEXT, Party_ID NUMBER);"
      },
      {
        "question": "Which ones?",
        "query": "SELECT party_name FROM party WHERE party_id NOT IN (SELECT party_id FROM member)",
        "schema": "CREATE TABLE party (Party_ID NUMBER, Party_name TEXT); CREATE TABLE member (Party_ID TEXT, Member_Name TEXT, Member_ID NUMBER); CREATE TABLE party_events (Member_in_charge_ID NUMBER, Party_ID NUMBER, Event_Name TEXT);"
      }
    ],
    [
      {
        "question": "What are all the member names?",
        "query": "SELECT member_name FROM member",
        "schema": "CREATE TABLE party (Party_ID NUMBER); CREATE TABLE member (Member_ID NUMBER, Member_Name TEXT);"
      },
      {
        "question": "Which ones are in party with id 1?",
        "query": "SELECT member_name FROM member WHERE party_id = 1",
        "schema": "CREATE TABLE party_events (Party_ID NUMBER, Member_in_charge_ID NUMBER); CREATE TABLE party (Party_ID NUMBER, Party_name TEXT); CREATE TABLE member (Party_ID TEXT, Member_Name TEXT, Member_ID NUMBER);"
      },
      {
        "question": "How about in party with id 3?",
        "query": "SELECT member_name FROM member WHERE party_id = 3",
        "schema": "CREATE TABLE party_events (Member_in_charge_ID NUMBER, Party_ID NUMBER); CREATE TABLE member (Member_Name TEXT, Party_ID TEXT, Member_ID NUMBER); CREATE TABLE party (Party_ID NUMBER, Party_name TEXT);"
      },
      {
        "question": "Can you show me those in both?",
        "query": "SELECT member_name FROM member WHERE party_id = 3 INTERSECT SELECT member_name FROM member WHERE party_id = 1",
        "schema": "CREATE TABLE party_events (Member_in_charge_ID NUMBER, Party_ID NUMBER); CREATE TABLE party (Party_name TEXT, Party_ID NUMBER); CREATE TABLE member (Party_ID TEXT, Member_ID NUMBER, Member_Name TEXT);"
      }
    ],
    [
      {
        "question": "How many members are there?",
        "query": "SELECT count(*) FROM member",
        "schema": "CREATE TABLE member (In_office TEXT, Party_ID TEXT, Member_Name TEXT, Member_ID NUMBER); CREATE TABLE party_events (Member_in_charge_ID NUMBER); CREATE TABLE party (Party_ID NUMBER);"
      },
      {
        "question": "How many are in the Progressive party?",
        "query": "SELECT count(*) FROM member AS t1 JOIN party AS t2 ON t1.party_id = t2.party_id WHERE t2.party_name = \"Progress Party\"",
        "schema": "CREATE TABLE party_events (Party_ID NUMBER, Member_in_charge_ID NUMBER); CREATE TABLE member (Party_ID TEXT, In_office TEXT, Member_Name TEXT, Member_ID NUMBER); CREATE TABLE party (Party_name TEXT, Party_ID NUMBER);"
      },
      {
        "question": "How many are not?",
        "query": "SELECT count(*) FROM member AS t1 JOIN party AS t2 ON t1.party_id = t2.party_id WHERE t2.party_name != \"Progress Party\"",
        "schema": "CREATE TABLE party_events (Party_ID NUMBER, Member_in_charge_ID NUMBER); CREATE TABLE member (In_office TEXT, Member_Name TEXT, Member_ID NUMBER, Party_ID TEXT); CREATE TABLE party (Party_name TEXT, Party_ID NUMBER);"
      },
      {
        "question": "What are their names?",
        "query": "SELECT t1.member_name FROM member AS t1 JOIN party AS t2 ON t1.party_id = t2.party_id WHERE t2.party_name != \"Progress Party\"",
        "schema": "CREATE TABLE party (Party_name TEXT, Party_ID NUMBER); CREATE TABLE party_events (Party_ID NUMBER, Member_in_charge_ID NUMBER); CREATE TABLE member (Member_ID NUMBER, Party_ID TEXT, In_office TEXT, Member_Name TEXT);"
      }
    ],
    [
      {
        "question": "What are the names and ids of all the party events?",
        "query": "SELECT event_id, event_name FROM party_events",
        "schema": "CREATE TABLE party_events (Event_Name TEXT, Member_in_charge_ID NUMBER, Event_ID NUMBER, Party_ID NUMBER); CREATE TABLE member (Member_Name TEXT, Member_ID NUMBER); CREATE TABLE party (Party_name TEXT, Party_ID NUMBER);"
      },
      {
        "question": "What parties are each event affiliated with?",
        "query": "SELECT event_id, event_name, party_id FROM party_events",
        "schema": "CREATE TABLE member (Member_ID NUMBER, Member_Name TEXT); CREATE TABLE party_events (Event_ID NUMBER, Party_ID NUMBER, Member_in_charge_ID NUMBER, Event_Name TEXT); CREATE TABLE party (Party_ID NUMBER, Party_name TEXT);"
      },
      {
        "question": "Just show me a distinct list of the names these parties.",
        "query": "SELECT DISTINCT t2.party_name FROM party_events AS t1 JOIN party AS t2 ON t1.party_id = t2.party_id",
        "schema": "CREATE TABLE member (Member_Name TEXT, Member_ID NUMBER); CREATE TABLE party_events (Member_in_charge_ID NUMBER, Event_ID NUMBER, Event_Name TEXT, Party_ID NUMBER); CREATE TABLE party (Party_ID NUMBER, Party_name TEXT);"
      },
      {
        "question": "Also show how many events each of them!",
        "query": "SELECT t2.party_name, count(*) FROM party_events AS t1 JOIN party AS t2 ON t1.party_id = t2.party_id GROUP BY t1.party_id",
        "schema": "CREATE TABLE party (Party_name TEXT, Party_ID NUMBER); CREATE TABLE member (Member_Name TEXT, Member_ID NUMBER); CREATE TABLE party_events (Party_ID NUMBER, Event_Name TEXT, Member_in_charge_ID NUMBER, Event_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show me all the information for all the party events?",
        "query": "SELECT * FROM party_events",
        "schema": "CREATE TABLE member (Member_ID NUMBER); CREATE TABLE party (Party_ID NUMBER); CREATE TABLE party_events (Member_in_charge_ID NUMBER, Party_ID NUMBER, Event_Name TEXT, Event_ID NUMBER);"
      },
      {
        "question": "Also show all the distinct member information of those in charge of them?",
        "query": "SELECT * FROM member AS t1 JOIN party_events AS t2 ON t1.member_id = t2.member_in_charge_id",
        "schema": "CREATE TABLE party (Party_ID NUMBER, Party_name TEXT); CREATE TABLE party_events (Member_in_charge_ID NUMBER, Party_ID NUMBER, Event_Name TEXT, Event_ID NUMBER); CREATE TABLE member (Party_ID TEXT, Member_Name TEXT, Member_ID NUMBER);"
      },
      {
        "question": "Now just show me the distinct members information for all the members other than those?",
        "query": "SELECT * FROM member EXCEPT SELECT * FROM member AS t1 JOIN party_events AS t2 ON t1.member_id = t2.member_in_charge_id",
        "schema": "CREATE TABLE member (Member_Name TEXT, Party_ID TEXT, Member_ID NUMBER); CREATE TABLE party_events (Member_in_charge_ID NUMBER, Party_ID NUMBER, Event_Name TEXT, Event_ID NUMBER); CREATE TABLE party (Party_ID NUMBER, Party_name TEXT);"
      },
      {
        "question": "Just show me their names!",
        "query": "SELECT member_name FROM member EXCEPT SELECT t1.member_name FROM member AS t1 JOIN party_events AS t2 ON t1.member_id = t2.member_in_charge_id",
        "schema": "CREATE TABLE member (Member_Name TEXT, Party_ID TEXT, Member_ID NUMBER); CREATE TABLE party_events (Event_Name TEXT, Event_ID NUMBER, Member_in_charge_ID NUMBER, Party_ID NUMBER); CREATE TABLE party (Party_ID NUMBER, Party_name TEXT);"
      }
    ],
    [
      {
        "question": "What parties do not host any events?",
        "query": "SELECT * FROM party EXCEPT SELECT * FROM party_events AS t1 JOIN party AS t2 ON t1.party_id = t2.party_id",
        "schema": "CREATE TABLE member (Member_ID NUMBER, Party_ID TEXT); CREATE TABLE party_events (Party_ID NUMBER, Event_ID NUMBER, Event_Name TEXT); CREATE TABLE party (Party_name TEXT, Party_ID NUMBER);"
      },
      {
        "question": "Which ones host at least one event?",
        "query": "SELECT DISTINCT * FROM party_events AS t1 JOIN party AS t2 ON t1.party_id = t2.party_id",
        "schema": "CREATE TABLE member (Member_ID NUMBER, Party_ID TEXT); CREATE TABLE party_events (Event_Name TEXT, Party_ID NUMBER, Event_ID NUMBER); CREATE TABLE party (Party_ID NUMBER, Party_name TEXT);"
      },
      {
        "question": "How about 2?",
        "query": "SELECT * FROM party_events AS t1 JOIN party AS t2 ON t1.party_id = t2.party_id GROUP BY t1.party_id HAVING count(*) >= 2",
        "schema": "CREATE TABLE member (Member_ID NUMBER, Party_ID TEXT); CREATE TABLE party_events (Party_ID NUMBER, Event_ID NUMBER, Event_Name TEXT); CREATE TABLE party (Party_ID NUMBER, Party_name TEXT);"
      },
      {
        "question": "Show just the names of these!",
        "query": "SELECT t2.party_name FROM party_events AS t1 JOIN party AS t2 ON t1.party_id = t2.party_id GROUP BY t1.party_id HAVING count(*) >= 2",
        "schema": "CREATE TABLE party (Party_ID NUMBER, Party_name TEXT); CREATE TABLE party_events (Event_ID NUMBER, Event_Name TEXT, Party_ID NUMBER); CREATE TABLE member (Member_ID NUMBER, Party_ID TEXT);"
      }
    ],
    [
      {
        "question": "How many different member in charges are there for all party_events?",
        "query": "SELECT count(DISTINCT member_in_charge_id) FROM party_events",
        "schema": "CREATE TABLE party_events (Member_in_charge_ID NUMBER, Event_Name TEXT, Event_ID NUMBER, Party_ID NUMBER); CREATE TABLE member (Member_ID NUMBER, Member_Name TEXT, Party_ID TEXT); CREATE TABLE party (Party_ID NUMBER);"
      },
      {
        "question": "What are their names?",
        "query": "SELECT t1.member_name FROM member AS t1 JOIN party_events AS t2 ON t1.member_id = t2.member_in_charge_id GROUP BY t2.member_in_charge_id",
        "schema": "CREATE TABLE party (Party_ID NUMBER, Party_name TEXT); CREATE TABLE member (Member_Name TEXT, Member_ID NUMBER, Party_ID TEXT); CREATE TABLE party_events (Event_Name TEXT, Event_ID NUMBER, Member_in_charge_ID NUMBER, Party_ID NUMBER);"
      },
      {
        "question": "How many events are they each in charge of?",
        "query": "SELECT t1.member_name, count(*) FROM member AS t1 JOIN party_events AS t2 ON t1.member_id = t2.member_in_charge_id GROUP BY t2.member_in_charge_id",
        "schema": "CREATE TABLE party_events (Member_in_charge_ID NUMBER, Event_ID NUMBER, Party_ID NUMBER, Event_Name TEXT); CREATE TABLE party (Party_ID NUMBER, Party_name TEXT); CREATE TABLE member (Member_Name TEXT, Party_ID TEXT, Member_ID NUMBER);"
      },
      {
        "question": "Who has the greatest number?",
        "query": "SELECT t1.member_name FROM member AS t1 JOIN party_events AS t2 ON t1.member_id = t2.member_in_charge_id GROUP BY t2.member_in_charge_id ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE member (Member_Name TEXT, Party_ID TEXT, Member_ID NUMBER); CREATE TABLE party_events (Member_in_charge_ID NUMBER, Party_ID NUMBER, Event_ID NUMBER, Event_Name TEXT); CREATE TABLE party (Party_name TEXT, Party_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show me all the event ids, event names and party id for each party_event.",
        "query": "SELECT event_id, event_name, party_id FROM party_events",
        "schema": "CREATE TABLE member (Party_ID TEXT); CREATE TABLE party (Party_ID NUMBER, Party_name TEXT); CREATE TABLE party_events (Event_Name TEXT, Party_ID NUMBER, Event_ID NUMBER);"
      },
      {
        "question": "How events are there for every party?",
        "query": "SELECT party_id, count(*) FROM party_events GROUP BY party_id",
        "schema": "CREATE TABLE party (Party_name TEXT, Party_ID NUMBER); CREATE TABLE party_events (Event_ID NUMBER, Event_Name TEXT, Party_ID NUMBER); CREATE TABLE member (Party_ID TEXT);"
      },
      {
        "question": "How about for every event name?",
        "query": "SELECT event_name, count(*) FROM party_events GROUP BY event_name",
        "schema": "CREATE TABLE party_events (Party_ID NUMBER, Event_ID NUMBER, Event_Name TEXT); CREATE TABLE member (Party_ID TEXT); CREATE TABLE party (Party_name TEXT, Party_ID NUMBER);"
      },
      {
        "question": "Which event names have at least 2?",
        "query": "SELECT event_name FROM party_events GROUP BY event_name HAVING count(*) > 2",
        "schema": "CREATE TABLE party_events (Event_Name TEXT, Party_ID NUMBER, Event_ID NUMBER); CREATE TABLE party (Party_name TEXT, Party_ID NUMBER); CREATE TABLE member (Party_ID TEXT);"
      }
    ]
  ],
  "school_player": [
    [
      {
        "question": "What are the locations of each school ordered in the date founded, oldest first?",
        "query": "SELECT LOCATION FROM school ORDER BY founded ASC;",
        "schema": "CREATE TABLE player (School_ID NUMBER); CREATE TABLE school (School_ID NUMBER, Location TEXT, Founded NUMBER, Denomination TEXT, School TEXT);"
      },
      {
        "question": "Actually, order the result in ascending order of enrollment.",
        "query": "SELECT LOCATION FROM school ORDER BY enrollment ASC;",
        "schema": "CREATE TABLE school (Denomination TEXT, School_ID NUMBER, Founded NUMBER, School TEXT, Enrollment NUMBER, Location TEXT); CREATE TABLE player (School_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What are the locations of each school?",
        "query": "SELECT LOCATION FROM school;",
        "schema": "CREATE TABLE school (School_ID NUMBER, Location TEXT, Denomination TEXT, School TEXT); CREATE TABLE player (School_ID NUMBER); CREATE TABLE school_details (School_ID NUMBER);"
      },
      {
        "question": "Order the result in descending order of founded year.",
        "query": "SELECT LOCATION FROM school ORDER BY founded DESC;",
        "schema": "CREATE TABLE player (School_ID NUMBER); CREATE TABLE school (Founded NUMBER, School TEXT, Denomination TEXT, Location TEXT, School_ID NUMBER, Year_Entered_Competition NUMBER); CREATE TABLE school_details (School_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What is the denomination of each school?",
        "query": "SELECT denomination FROM school;",
        "schema": "CREATE TABLE school_details (School_ID NUMBER); CREATE TABLE player (School_ID NUMBER); CREATE TABLE school (School_ID NUMBER, Denomination TEXT, School TEXT);"
      },
      {
        "question": "What are the enrollments of schools whose denomination is \"Catholic\"?",
        "query": "SELECT enrollment FROM school WHERE denomination = \"Catholic\";",
        "schema": "CREATE TABLE school_details (School_ID NUMBER); CREATE TABLE school (School TEXT, Enrollment NUMBER, School_ID NUMBER, Denomination TEXT); CREATE TABLE player (School_ID NUMBER);"
      },
      {
        "question": "How about non-Catholic?",
        "query": "SELECT enrollment FROM school WHERE denomination != \"Catholic\";",
        "schema": "CREATE TABLE school_details (School_ID NUMBER); CREATE TABLE player (School_ID NUMBER); CREATE TABLE school (School TEXT, Denomination TEXT, School_ID NUMBER, Enrollment NUMBER);"
      }
    ],
    [
      {
        "question": "What is the combined total enrollment of all schools?",
        "query": "SELECT sum(enrollment) FROM school;",
        "schema": "CREATE TABLE school_details (School_ID NUMBER); CREATE TABLE school (Enrollment NUMBER, School TEXT, School_ID NUMBER); CREATE TABLE player (School_ID NUMBER);"
      },
      {
        "question": "How about the maximum enrollment?",
        "query": "SELECT enrollment FROM school ORDER BY enrollment LIMIT 1;",
        "schema": "CREATE TABLE player (School_ID NUMBER); CREATE TABLE school_details (School_ID NUMBER); CREATE TABLE school (School TEXT, School_ID NUMBER, Enrollment NUMBER);"
      },
      {
        "question": "Show me the average enrollment.",
        "query": "SELECT avg(enrollment) FROM school;",
        "schema": "CREATE TABLE school_details (School_ID NUMBER); CREATE TABLE player (School_ID NUMBER); CREATE TABLE school (School_ID NUMBER, Enrollment NUMBER, School TEXT);"
      }
    ],
    [
      {
        "question": "What are the ages of the players?",
        "query": "SELECT age FROM player;",
        "schema": "CREATE TABLE player (Player_ID NUMBER, Age NUMBER, Player TEXT);"
      },
      {
        "question": "Show their teams instead.",
        "query": "SELECT team FROM player;",
        "schema": "CREATE TABLE player (Team TEXT, Player TEXT, Player_ID NUMBER, Age NUMBER);"
      },
      {
        "question": "Sort the result in ascending alphabetical order.",
        "query": "SELECT team FROM player ORDER BY team ASC;",
        "schema": "CREATE TABLE player (Player TEXT, Team TEXT, Player_ID NUMBER, Age NUMBER);"
      }
    ],
    [
      {
        "question": "Show me all about each player.",
        "query": "SELECT * FROM player;",
        "schema": "CREATE TABLE player (Player TEXT, Player_ID NUMBER);"
      },
      {
        "question": "Who is the oldest among them?",
        "query": "SELECT player FROM player ORDER BY age DESC LIMIT 1;",
        "schema": "CREATE TABLE player (Age NUMBER, Player TEXT, Player_ID NUMBER);"
      },
      {
        "question": "What's his team?",
        "query": "SELECT team FROM player ORDER BY age DESC LIMIT 1;",
        "schema": "CREATE TABLE player (Age NUMBER, Team TEXT, Player_ID NUMBER, Player TEXT);"
      }
    ],
    [
      {
        "question": "How many players are there?",
        "query": "SELECT count(*) FROM player;",
        "schema": "CREATE TABLE player (Team TEXT, School_ID NUMBER, Player_ID NUMBER, Player TEXT, Age NUMBER);"
      },
      {
        "question": "What's their average age?",
        "query": "SELECT avg(age) FROM player;",
        "schema": "CREATE TABLE player (Player_ID NUMBER, Player TEXT, Age NUMBER, Team TEXT, School_ID NUMBER);"
      },
      {
        "question": "List the teams of the players with the top 5 largest ages.",
        "query": "SELECT team FROM player ORDER BY age DESC LIMIT 5;",
        "schema": "CREATE TABLE player (Player_ID NUMBER, Player TEXT, Team TEXT, School_ID NUMBER, Age NUMBER);"
      }
    ],
    [
      {
        "question": "Show me the location of each school.",
        "query": "SELECT LOCATION FROM school;",
        "schema": "CREATE TABLE school (Location TEXT, School_ID NUMBER, School TEXT); CREATE TABLE player (School_ID NUMBER); CREATE TABLE school_details (School_ID NUMBER);"
      },
      {
        "question": "For each player, show the location of the school they belong to.",
        "query": "SELECT t2.location FROM player AS t1 JOIN school AS t2 ON t1.school_id = t2.school_id;",
        "schema": "CREATE TABLE school_details (School_ID NUMBER); CREATE TABLE school (School_ID NUMBER, Location TEXT, Boys_or_Girls TEXT, School TEXT); CREATE TABLE player (School_ID NUMBER, Player TEXT);"
      },
      {
        "question": "Also provide, the team name.",
        "query": "SELECT t1.team , t2.location FROM player AS t1 JOIN school AS t2 ON t1.school_id = t2.school_id;",
        "schema": "CREATE TABLE school_details (School_ID NUMBER); CREATE TABLE player (Player TEXT, Team TEXT, School_ID NUMBER); CREATE TABLE school (School TEXT, School_ID NUMBER, Location TEXT, Boys_or_Girls TEXT);"
      }
    ],
    [
      {
        "question": "How many schools are there?",
        "query": "SELECT count(*) FROM school;",
        "schema": "CREATE TABLE player (School_ID NUMBER); CREATE TABLE school (Enrollment NUMBER, School_ID NUMBER, School TEXT, Denomination TEXT); CREATE TABLE school_details (School_ID NUMBER, Class TEXT); CREATE TABLE school_performance (School_Id NUMBER);"
      },
      {
        "question": "Show me their locations.",
        "query": "SELECT LOCATION FROM school;",
        "schema": "CREATE TABLE school (School TEXT, Location TEXT, School_ID NUMBER, Enrollment NUMBER, Denomination TEXT); CREATE TABLE school_performance (School_Id NUMBER); CREATE TABLE player (School_ID NUMBER); CREATE TABLE school_details (Class TEXT, School_ID NUMBER);"
      },
      {
        "question": "Which of them have more than 3 players?",
        "query": "SELECT t2.location FROM player AS t1 JOIN school AS t2 ON t1.school_id = t2.school_id GROUP BY t1.school_id HAVING count(*) > 3;",
        "schema": "CREATE TABLE player (School_ID NUMBER); CREATE TABLE school (School TEXT, Denomination TEXT, Location TEXT, Enrollment NUMBER, School_ID NUMBER); CREATE TABLE school_performance (School_Id NUMBER); CREATE TABLE school_details (School_ID NUMBER, Class TEXT);"
      },
      {
        "question": "How about more than 1 player?",
        "query": "SELECT t2.location FROM player AS t1 JOIN school AS t2 ON t1.school_id = t2.school_id GROUP BY t1.school_id HAVING count(*) > 1;",
        "schema": "CREATE TABLE player (School_ID NUMBER, Player_ID NUMBER, Player TEXT); CREATE TABLE school_performance (School_Id NUMBER); CREATE TABLE school (Enrollment NUMBER, Location TEXT, Denomination TEXT, School TEXT, School_ID NUMBER); CREATE TABLE school_details (Class TEXT, School_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Which school has the least number of players?",
        "query": "SELECT t2.school FROM player AS t1 JOIN school AS t2 ON t1.school_id = t2.school_id GROUP BY t1.school_id ORDER BY count(*) ASC LIMIT 1;",
        "schema": "CREATE TABLE school (Denomination TEXT, School_ID NUMBER, Boys_or_Girls TEXT, School TEXT); CREATE TABLE player (School_ID NUMBER); CREATE TABLE school_details (School_ID NUMBER); CREATE TABLE school_performance (School_Id NUMBER);"
      },
      {
        "question": "How about with the most players?",
        "query": "SELECT t2.school FROM player AS t1 JOIN school AS t2 ON t1.school_id = t2.school_id GROUP BY t1.school_id ORDER BY count(*) DESC LIMIT 1;",
        "schema": "CREATE TABLE school (School_ID NUMBER, Denomination TEXT, School TEXT, Boys_or_Girls TEXT); CREATE TABLE school_performance (School_Id NUMBER); CREATE TABLE school_details (School_ID NUMBER); CREATE TABLE player (School_ID NUMBER, Player_ID NUMBER);"
      },
      {
        "question": "Show me the denomination of this school.",
        "query": "SELECT t2.denomination FROM player AS t1 JOIN school AS t2 ON t1.school_id = t2.school_id GROUP BY t1.school_id ORDER BY count(*) DESC LIMIT 1;",
        "schema": "CREATE TABLE school_details (School_ID NUMBER); CREATE TABLE player (Player_ID NUMBER, School_ID NUMBER); CREATE TABLE school (School_ID NUMBER, Boys_or_Girls TEXT, Denomination TEXT, School TEXT); CREATE TABLE school_performance (School_Id NUMBER);"
      }
    ],
    [
      {
        "question": "Show me the school details.",
        "query": "SELECT * FROM school_details;",
        "schema": "CREATE TABLE school_performance (School_Id NUMBER); CREATE TABLE school (School TEXT, School_ID NUMBER); CREATE TABLE player (School_ID NUMBER); CREATE TABLE school_details (Class TEXT, School_ID NUMBER);"
      },
      {
        "question": "What's each school's color?",
        "query": "SELECT colors FROM school_details;",
        "schema": "CREATE TABLE school (School TEXT, School_ID NUMBER, School_Colors TEXT); CREATE TABLE player (School_ID NUMBER); CREATE TABLE school_performance (School_Id NUMBER); CREATE TABLE school_details (Class TEXT, Colors TEXT, School_ID NUMBER);"
      },
      {
        "question": "List the location and nickname of each school.",
        "query": "SELECT t1.location , t2.nickname FROM school AS t1 JOIN school_details AS t2 ON t1.school_id = t2.school_id;",
        "schema": "CREATE TABLE school_details (School_ID NUMBER, Class TEXT, Nickname TEXT, Colors TEXT); CREATE TABLE school_performance (School_Id NUMBER); CREATE TABLE school (Location TEXT, School_Colors TEXT, School TEXT, School_ID NUMBER); CREATE TABLE player (School_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show me whether each school is a boys' or girls' school.",
        "query": "SELECT boys_or_girls FROM school;",
        "schema": "CREATE TABLE player (School_ID NUMBER); CREATE TABLE school_performance (School_Id NUMBER); CREATE TABLE school (Boys_or_Girls TEXT, School TEXT, School_ID NUMBER, Denomination TEXT); CREATE TABLE school_details (School_ID NUMBER);"
      },
      {
        "question": "What are the distinct school denominations?",
        "query": "SELECT distinct(denomination) FROM school;",
        "schema": "CREATE TABLE school (School_ID NUMBER, Boys_or_Girls TEXT, Denomination TEXT, School TEXT); CREATE TABLE school_performance (School_Id NUMBER); CREATE TABLE player (School_ID NUMBER); CREATE TABLE school_details (School_ID NUMBER);"
      },
      {
        "question": "For each denomination, how many schools are there?",
        "query": "SELECT denomination , count(*) FROM school GROUP BY denomination;",
        "schema": "CREATE TABLE school (School_ID NUMBER, Denomination TEXT, Boys_or_Girls TEXT, School TEXT); CREATE TABLE school_performance (School_Id NUMBER); CREATE TABLE school_details (School_ID NUMBER); CREATE TABLE player (School_ID NUMBER);"
      }
    ],
    [
      {
        "question": "How many different denominations does each school have?",
        "query": "SELECT count(DISTINCT denomination) FROM school;",
        "schema": "CREATE TABLE school_details (School_ID NUMBER); CREATE TABLE player (School_ID NUMBER); CREATE TABLE school (School_ID NUMBER, Denomination TEXT, School TEXT);"
      },
      {
        "question": "What are they?",
        "query": "SELECT DISTINCT denomination FROM school;",
        "schema": "CREATE TABLE player (School_ID NUMBER); CREATE TABLE school_details (School_ID NUMBER); CREATE TABLE school (School TEXT, School_ID NUMBER, Denomination TEXT);"
      },
      {
        "question": "How many schools are there for every denomination. Show Denomination and number of schools.",
        "query": "SELECT denomination , count(*) FROM school GROUP BY denomination",
        "schema": "CREATE TABLE school (Denomination TEXT, School_ID NUMBER, School TEXT); CREATE TABLE player (School_ID NUMBER); CREATE TABLE school_details (School_ID NUMBER);"
      },
      {
        "question": "Show the results in descending order!",
        "query": "SELECT denomination , count(*) FROM school GROUP BY denomination ORDER BY count(*) DESC;",
        "schema": "CREATE TABLE school (School_ID NUMBER, Denomination TEXT, School TEXT); CREATE TABLE school_details (School_ID NUMBER); CREATE TABLE player (School_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What school has the largest enrollment?",
        "query": "SELECT * FROM school ORDER BY enrollment DESC LIMIT 1",
        "schema": "CREATE TABLE school_details (School_ID NUMBER); CREATE TABLE player (School_ID NUMBER); CREATE TABLE school (School_ID NUMBER, School TEXT, Enrollment NUMBER);"
      },
      {
        "question": "What are its school colors?",
        "query": "SELECT school_colors FROM school ORDER BY enrollment DESC LIMIT 1",
        "schema": "CREATE TABLE school_details (Colors TEXT, School_ID NUMBER); CREATE TABLE player (School_ID NUMBER); CREATE TABLE school (Enrollment NUMBER, School_ID NUMBER, School TEXT, School_Colors TEXT);"
      }
    ],
    [
      {
        "question": "How many schools are there?",
        "query": "SELECT count(*) FROM school;",
        "schema": "CREATE TABLE school_performance (School_Id NUMBER); CREATE TABLE school (Enrollment NUMBER, School_ID NUMBER, Denomination TEXT, School TEXT, Location TEXT); CREATE TABLE player (School_ID NUMBER); CREATE TABLE school_details (School_ID NUMBER, Class TEXT);"
      },
      {
        "question": "How many don't have any players?",
        "query": "SELECT count(*) FROM school WHERE school_id NOT IN (SELECT school_id FROM player);",
        "schema": "CREATE TABLE school_details (School_ID NUMBER, Class TEXT); CREATE TABLE school (School_ID NUMBER, Denomination TEXT, School TEXT, Enrollment NUMBER, Location TEXT); CREATE TABLE player (School_ID NUMBER); CREATE TABLE school_performance (School_Id NUMBER);"
      },
      {
        "question": "Which ones don't have any players?",
        "query": "SELECT * FROM school WHERE school_id NOT IN (SELECT school_id FROM player);",
        "schema": "CREATE TABLE school_performance (School_Id NUMBER); CREATE TABLE school (Enrollment NUMBER, School_ID NUMBER, Location TEXT, Denomination TEXT, School TEXT); CREATE TABLE school_details (Class TEXT, School_ID NUMBER); CREATE TABLE player (School_ID NUMBER, Player_ID NUMBER);"
      },
      {
        "question": "Show their locations.",
        "query": "SELECT LOCATION FROM school WHERE school_id NOT IN (SELECT school_id FROM player);",
        "schema": "CREATE TABLE player (Player_ID NUMBER, School_ID NUMBER); CREATE TABLE school_details (Class TEXT, School_ID NUMBER); CREATE TABLE school_performance (School_Id NUMBER); CREATE TABLE school (Enrollment NUMBER, School TEXT, Denomination TEXT, School_ID NUMBER, Location TEXT);"
      }
    ],
    [
      {
        "question": "Show the denominations of schools.",
        "query": "SELECT denomination FROM school;",
        "schema": "CREATE TABLE school (School_ID NUMBER, Denomination TEXT, School TEXT); CREATE TABLE player (School_ID NUMBER); CREATE TABLE school_details (School_ID NUMBER);"
      },
      {
        "question": "Also provide their founding year?",
        "query": "SELECT denomination, founded FROM school;",
        "schema": "CREATE TABLE school (Denomination TEXT, Founded NUMBER, School TEXT, School_ID NUMBER); CREATE TABLE school_details (School_ID NUMBER); CREATE TABLE player (School_ID NUMBER);"
      },
      {
        "question": "List the denomination shared by schools founded before 1890 and schools founded after 1900.",
        "query": "SELECT denomination FROM school WHERE founded < 1890 INTERSECT SELECT denomination FROM school WHERE founded > 1900;",
        "schema": "CREATE TABLE school_details (School_ID NUMBER); CREATE TABLE player (School_ID NUMBER); CREATE TABLE school (School_ID NUMBER, Founded NUMBER, Denomination TEXT, School TEXT);"
      }
    ],
    [
      {
        "question": "Show me the school names in division 1.",
        "query": "SELECT school FROM school_details AS t1 JOIN school AS t2 ON t1.school_id = t2.school_id WHERE t1.division = \"Division 1\";",
        "schema": "CREATE TABLE school (School_ID NUMBER, School TEXT); CREATE TABLE school_details (Division TEXT, League TEXT, School_ID NUMBER); CREATE TABLE player (School_ID NUMBER);"
      },
      {
        "question": "How about those not in division 1?",
        "query": "SELECT school FROM school_details AS t1 JOIN school AS t2 ON t1.school_id = t2.school_id WHERE t1.division != \"Division 1\";",
        "schema": "CREATE TABLE school_details (School_ID NUMBER, League TEXT, Division TEXT); CREATE TABLE school (School TEXT, School_ID NUMBER); CREATE TABLE player (School_ID NUMBER);"
      },
      {
        "question": "List their nicknames.",
        "query": "SELECT nickname FROM school_details WHERE division != \"Division 1\";",
        "schema": "CREATE TABLE school_details (League TEXT, Nickname TEXT, School_ID NUMBER, Division TEXT); CREATE TABLE player (School_ID NUMBER); CREATE TABLE school (School_ID NUMBER, School TEXT);"
      }
    ]
  ],
  "store_product": [
    [
      {
        "question": "What are the products available in the stores?",
        "query": "SELECT product FROM product",
        "schema": "CREATE TABLE store_product (Product_ID NUMBER, Store_ID NUMBER); CREATE TABLE product (product_id NUMBER, product TEXT); CREATE TABLE store (Store_ID NUMBER, Store_Name TEXT, Number_of_product_category NUMBER, Type TEXT);"
      },
      {
        "question": "What about the maximum page sizes supported by these products?",
        "query": "SELECT product, max_page_size FROM product",
        "schema": "CREATE TABLE store (Type TEXT, Number_of_product_category NUMBER, Store_Name TEXT, Store_ID NUMBER); CREATE TABLE store_product (Store_ID NUMBER, Product_ID NUMBER); CREATE TABLE product (product TEXT, product_id NUMBER, pages_per_minute_color NUMBER, dimensions TEXT, max_page_size TEXT);"
      },
      {
        "question": "Which products have a maximum page size A4?",
        "query": "SELECT product FROM product WHERE max_page_size = 'A4'",
        "schema": "CREATE TABLE product (product_id NUMBER, pages_per_minute_color NUMBER, product TEXT, max_page_size TEXT, dimensions TEXT); CREATE TABLE store (Type TEXT, Number_of_product_category NUMBER, Store_Name TEXT, Store_ID NUMBER); CREATE TABLE store_product (Product_ID NUMBER, Store_ID NUMBER);"
      },
      {
        "question": "Which maximum page sizes are the maximum page size for more than 3 products?",
        "query": "SELECT max_page_size FROM product GROUP BY max_page_size HAVING count(*) > 3",
        "schema": "CREATE TABLE product (dimensions TEXT, pages_per_minute_color NUMBER, max_page_size TEXT, product TEXT, product_id NUMBER); CREATE TABLE store_product (Store_ID NUMBER, Product_ID NUMBER); CREATE TABLE store (Store_Name TEXT, Type TEXT, Number_of_product_category NUMBER, Store_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What are the districts out there?",
        "query": "SELECT district_name FROM district",
        "schema": "CREATE TABLE store_district (District_ID NUMBER); CREATE TABLE district (District_name TEXT, Headquartered_City TEXT, District_ID NUMBER, City_Area NUMBER);"
      },
      {
        "question": "What is the name of the headquartered city of each district?",
        "query": "SELECT district_name, headquartered_city FROM district",
        "schema": "CREATE TABLE store_district (District_ID NUMBER); CREATE TABLE district (District_ID NUMBER, Headquartered_City TEXT, District_name TEXT, City_Area NUMBER);"
      },
      {
        "question": "Which of these given districts have a city population larger than 100000?",
        "query": "SELECT district_name FROM district WHERE city_population > 100000",
        "schema": "CREATE TABLE store_district (District_ID NUMBER); CREATE TABLE district (Headquartered_City TEXT, City_Population NUMBER, City_Area NUMBER, District_ID NUMBER, District_name TEXT);"
      },
      {
        "question": "Also show the districts that have a city area greater than 10.",
        "query": "SELECT district_name FROM district WHERE city_area > 10 OR city_population > 100000",
        "schema": "CREATE TABLE store_district (District_ID NUMBER); CREATE TABLE district (Headquartered_City TEXT, City_Area NUMBER, City_Population NUMBER, District_name TEXT, District_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Can you give me the names of the districts.",
        "query": "SELECT district_name FROM district",
        "schema": "CREATE TABLE district (Headquartered_City TEXT, District_ID NUMBER, City_Area NUMBER, District_name TEXT);"
      },
      {
        "question": "Tell me the city population of these districts.",
        "query": "SELECT district_name, city_population FROM district",
        "schema": "CREATE TABLE district (City_Area NUMBER, District_name TEXT, City_Population NUMBER, Headquartered_City TEXT, District_ID NUMBER);"
      },
      {
        "question": "Which of these cities have an above average population?",
        "query": "SELECT district_name FROM district WHERE city_population > (SELECT avg(city_population) FROM district)",
        "schema": "CREATE TABLE district (District_ID NUMBER, City_Area NUMBER, City_Population NUMBER, District_name TEXT, Headquartered_City TEXT);"
      },
      {
        "question": "Which district has the largest city population?",
        "query": "SELECT district_name FROM district ORDER BY city_population DESC LIMIT 1",
        "schema": "CREATE TABLE district (District_ID NUMBER, City_Area NUMBER, Headquartered_City TEXT, District_name TEXT, City_Population NUMBER);"
      }
    ],
    [
      {
        "question": "What are the districts out there?",
        "query": "SELECT district_name FROM district",
        "schema": "CREATE TABLE store_district (District_ID NUMBER); CREATE TABLE district (City_Area NUMBER, Headquartered_City TEXT, District_name TEXT, District_ID NUMBER);"
      },
      {
        "question": "Tell me the city area of these districts.",
        "query": "SELECT district_name, city_area FROM district",
        "schema": "CREATE TABLE store_district (District_ID NUMBER); CREATE TABLE district (Headquartered_City TEXT, City_Area NUMBER, District_name TEXT, District_ID NUMBER, City_Population NUMBER);"
      },
      {
        "question": "Of all these districts, which ones have a below average city area?",
        "query": "SELECT district_name FROM district WHERE city_area < (SELECT avg(city_area) FROM district)",
        "schema": "CREATE TABLE district (City_Population NUMBER, Headquartered_City TEXT, District_ID NUMBER, City_Area NUMBER, District_name TEXT); CREATE TABLE store_district (District_ID NUMBER);"
      },
      {
        "question": "Which of these districts has the least city area?",
        "query": "SELECT district_name FROM district WHERE city_area = (SELECT min(city_area) FROM district)",
        "schema": "CREATE TABLE store_district (District_ID NUMBER); CREATE TABLE district (District_name TEXT, Headquartered_City TEXT, District_ID NUMBER, City_Area NUMBER, City_Population NUMBER);"
      }
    ],
    [
      {
        "question": "What are the names of the districts?",
        "query": "SELECT district_name FROM district",
        "schema": "CREATE TABLE district (District_ID NUMBER, Headquartered_City TEXT, District_name TEXT, City_Area NUMBER);"
      },
      {
        "question": "Tell me which of these districts have stores.",
        "query": "SELECT DISTINCT t1.district_name FROM district AS t1 JOIN store_district AS t2 ON t1.district_id = t2.district_id JOIN store AS t3 ON t3.store_id = t2.store_id",
        "schema": "CREATE TABLE store (Store_ID NUMBER, Type TEXT, Store_Name TEXT); CREATE TABLE district (District_ID NUMBER, City_Area NUMBER, District_name TEXT, Headquartered_City TEXT); CREATE TABLE store_district (District_ID NUMBER, Store_ID NUMBER);"
      },
      {
        "question": "What are the store names of the Hafizabad District?",
        "query": "SELECT t1.store_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id = t2.store_id JOIN district AS t3 ON t2.district_id = t3.district_id WHERE t3.district_name = \"Hafizabad District\"",
        "schema": "CREATE TABLE store_district (Store_ID NUMBER, District_ID NUMBER); CREATE TABLE store (Type TEXT, Store_Name TEXT, Store_ID NUMBER); CREATE TABLE district (District_ID NUMBER, District_name TEXT, Headquartered_City TEXT, City_Area NUMBER);"
      },
      {
        "question": "What about the store names of the Khanewal District?",
        "query": "SELECT t1.store_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id = t2.store_id JOIN district AS t3 ON t2.district_id = t3.district_id WHERE t3.district_name = \"Khanewal District\"",
        "schema": "CREATE TABLE store_district (District_ID NUMBER, Store_ID NUMBER); CREATE TABLE district (Headquartered_City TEXT, District_ID NUMBER, District_name TEXT, City_Area NUMBER); CREATE TABLE store (Type TEXT, Store_ID NUMBER, Store_Name TEXT);"
      }
    ],
    [
      {
        "question": "What are the populations of the districts?",
        "query": "SELECT city_population FROM district",
        "schema": "CREATE TABLE district (City_Population NUMBER, District_name TEXT, Headquartered_City TEXT, District_ID NUMBER, City_Area NUMBER);"
      },
      {
        "question": "Can you also tell me the stores in each district along with the population?",
        "query": "SELECT t3.store_name, t1.city_population FROM district AS t1 JOIN store_district AS t2 ON t1.district_id = t2.district_id JOIN store AS t3 ON t3.store_id = t2.store_id",
        "schema": "CREATE TABLE store (Type TEXT, Store_Name TEXT, Store_ID NUMBER); CREATE TABLE store_district (District_ID NUMBER, Store_ID NUMBER); CREATE TABLE district (District_ID NUMBER, Headquartered_City TEXT, City_Population NUMBER, City_Area NUMBER, District_name TEXT);"
      },
      {
        "question": "Which of these stores are from the districts with above average population?",
        "query": "SELECT t3.store_name FROM district AS t1 JOIN store_district AS t2 ON t1.district_id = t2.district_id JOIN store AS t3 ON t3.store_id = t2.store_id WHERE t1.city_population > (SELECT avg(city_population) FROM district)",
        "schema": "CREATE TABLE store_district (District_ID NUMBER, Store_ID NUMBER); CREATE TABLE store (Type TEXT, Store_Name TEXT, Store_ID NUMBER); CREATE TABLE district (City_Population NUMBER, City_Area NUMBER, District_name TEXT, Headquartered_City TEXT, District_ID NUMBER);"
      },
      {
        "question": "What about the stores from the district with the most population?",
        "query": "SELECT t1.store_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id = t2.store_id WHERE district_id = (SELECT district_id FROM district ORDER BY city_population DESC LIMIT 1)",
        "schema": "CREATE TABLE district (City_Population NUMBER, District_name TEXT, Headquartered_City TEXT, District_ID NUMBER, City_Area NUMBER); CREATE TABLE store_district (Store_ID NUMBER, District_ID NUMBER); CREATE TABLE store (Store_ID NUMBER, Store_Name TEXT, Type TEXT);"
      }
    ],
    [
      {
        "question": "Can you tell me about the names of all the stores?",
        "query": "SELECT store_name FROM store",
        "schema": "CREATE TABLE district (District_name TEXT); CREATE TABLE store_product (Store_ID NUMBER); CREATE TABLE store_district (Store_ID NUMBER); CREATE TABLE store (Type TEXT, Store_ID NUMBER, Store_Name TEXT);"
      },
      {
        "question": "What is the type of the store \"Blackville\"?",
        "query": "SELECT TYPE FROM store WHERE store_name = \"Blackville\"",
        "schema": "CREATE TABLE store_product (Store_ID NUMBER); CREATE TABLE store_district (Store_ID NUMBER, District_ID NUMBER); CREATE TABLE district (District_ID NUMBER, District_name TEXT, Headquartered_City TEXT); CREATE TABLE store (Type TEXT, Store_Name TEXT, Store_ID NUMBER);"
      },
      {
        "question": "In which district is \"Blackville\" located?",
        "query": "SELECT t1.district_name FROM district AS t1 JOIN store_district AS t2 ON t1.district_id = t2.district_id JOIN store AS t3 ON t3.store_id = t2.store_id WHERE t3.store_name = \"Blackville\"",
        "schema": "CREATE TABLE store (Type TEXT, Store_ID NUMBER, Store_Name TEXT); CREATE TABLE district (District_name TEXT, District_ID NUMBER, Headquartered_City TEXT, City_Area NUMBER); CREATE TABLE store_district (Store_ID NUMBER, District_ID NUMBER); CREATE TABLE store_product (Store_ID NUMBER);"
      },
      {
        "question": "Which city is \"Blackville\" headquartered in?",
        "query": "SELECT t3.headquartered_city FROM store AS t1 JOIN store_district AS t2 ON t1.store_id = t2.store_id JOIN district AS t3 ON t2.district_id = t3.district_id WHERE t1.store_name = \"Blackville\"",
        "schema": "CREATE TABLE store (Store_ID NUMBER, Store_Name TEXT, Type TEXT); CREATE TABLE store_district (District_ID NUMBER, Store_ID NUMBER); CREATE TABLE district (City_Area NUMBER, Headquartered_City TEXT, District_name TEXT, District_ID NUMBER); CREATE TABLE store_product (Store_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show me the names of all the cities.",
        "query": "SELECT headquartered_city FROM district",
        "schema": "CREATE TABLE district (District_name TEXT, Headquartered_City TEXT); CREATE TABLE store (Store_Name TEXT);"
      },
      {
        "question": "How about the names of all the stores?",
        "query": "SELECT store_name FROM store",
        "schema": "CREATE TABLE store_district (District_ID NUMBER, Store_ID NUMBER); CREATE TABLE store (Store_Name TEXT, Store_ID NUMBER); CREATE TABLE store_product (Store_ID NUMBER); CREATE TABLE district (District_ID NUMBER, District_name TEXT, Headquartered_City TEXT);"
      },
      {
        "question": "Which cities have these stores?",
        "query": "SELECT DISTINCT t1.headquartered_city FROM district AS t1 JOIN store_district AS t2 ON t1.district_id = t2.district_id JOIN store AS t3 ON t3.store_id = t2.store_id",
        "schema": "CREATE TABLE store_product (Store_ID NUMBER); CREATE TABLE district (Headquartered_City TEXT, District_ID NUMBER, District_name TEXT); CREATE TABLE store (Store_Name TEXT, Store_ID NUMBER); CREATE TABLE store_district (District_ID NUMBER, Store_ID NUMBER);"
      },
      {
        "question": "What is the number of stores for each of these cities?",
        "query": "SELECT t3.headquartered_city , count(*) FROM store AS t1 JOIN store_district AS t2 ON t1.store_id = t2.store_id JOIN district AS t3 ON t2.district_id = t3.district_id GROUP BY t3.headquartered_city",
        "schema": "CREATE TABLE store_product (Store_ID NUMBER); CREATE TABLE store (Store_ID NUMBER, Store_Name TEXT); CREATE TABLE store_district (District_ID NUMBER, Store_ID NUMBER); CREATE TABLE district (District_ID NUMBER, District_name TEXT, Headquartered_City TEXT);"
      }
    ],
    [
      {
        "question": "Tell me all the cities and their respective stores.",
        "query": "SELECT t1.headquartered_city, t3.store_name FROM district AS t1 JOIN store_district AS t2 ON t1.district_id = t2.district_id JOIN store AS t3 ON t3.store_id = t2.store_id",
        "schema": "CREATE TABLE store (Type TEXT, Store_ID NUMBER, Store_Name TEXT); CREATE TABLE district (District_ID NUMBER, District_name TEXT, Headquartered_City TEXT); CREATE TABLE store_district (Store_ID NUMBER, District_ID NUMBER); CREATE TABLE store_product (Store_ID NUMBER);"
      },
      {
        "question": "How many stores are there for each city?",
        "query": "SELECT t1.headquartered_city, count(*) FROM district AS t1 JOIN store_district AS t2 ON t1.district_id = t2.district_id JOIN store AS t3 ON t3.store_id = t2.store_id GROUP BY t1.headquartered_city",
        "schema": "CREATE TABLE store_district (Store_ID NUMBER, District_ID NUMBER); CREATE TABLE store (Store_ID NUMBER, Type TEXT, Store_Name TEXT); CREATE TABLE store_product (Store_ID NUMBER); CREATE TABLE district (District_ID NUMBER, District_name TEXT, Headquartered_City TEXT);"
      },
      {
        "question": "Which city has the least number of stores?",
        "query": "SELECT t3.headquartered_city FROM store AS t1 JOIN store_district AS t2 ON t1.store_id = t2.store_id JOIN district AS t3 ON t2.district_id = t3.district_id GROUP BY t3.headquartered_city ORDER BY count(*) ASC LIMIT 1",
        "schema": "CREATE TABLE district (District_name TEXT, Headquartered_City TEXT, District_ID NUMBER); CREATE TABLE store_product (Store_ID NUMBER); CREATE TABLE store_district (District_ID NUMBER, Store_ID NUMBER); CREATE TABLE store (Type TEXT, Store_Name TEXT, Store_ID NUMBER);"
      },
      {
        "question": "What about the one with the most?",
        "query": "SELECT t3.headquartered_city FROM store AS t1 JOIN store_district AS t2 ON t1.store_id = t2.store_id JOIN district AS t3 ON t2.district_id = t3.district_id GROUP BY t3.headquartered_city ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE store (Store_Name TEXT, Store_ID NUMBER, Type TEXT); CREATE TABLE district (District_ID NUMBER, Headquartered_City TEXT, District_name TEXT); CREATE TABLE store_product (Store_ID NUMBER); CREATE TABLE store_district (Store_ID NUMBER, District_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Can you list all the stores?",
        "query": "SELECT store_name FROM store",
        "schema": "CREATE TABLE store_product (Product_ID NUMBER, Store_ID NUMBER); CREATE TABLE store (Type TEXT, Store_Name TEXT, Store_ID NUMBER); CREATE TABLE store_district (Store_ID NUMBER);"
      },
      {
        "question": "Which ones have products?",
        "query": "SELECT DISTINCT t1.store_name FROM store AS t1 JOIN store_product AS t2 ON t1.store_id = t2.store_id JOIN product AS t3 ON t2.product_id = t3.product_id",
        "schema": "CREATE TABLE store_product (Product_ID NUMBER, Store_ID NUMBER); CREATE TABLE store (Type TEXT, Store_Name TEXT, Store_ID NUMBER); CREATE TABLE store_district (Store_ID NUMBER); CREATE TABLE product (product_id NUMBER, product TEXT);"
      },
      {
        "question": "What products do they sell?",
        "query": "SELECT t3.product FROM store AS t1 JOIN store_product AS t2 ON t1.store_id = t2.store_id JOIN product AS t3 ON t2.product_id = t3.product_id",
        "schema": "CREATE TABLE product (product TEXT, product_id NUMBER); CREATE TABLE store_product (Store_ID NUMBER, Product_ID NUMBER); CREATE TABLE store (Store_ID NUMBER, Type TEXT, Store_Name TEXT); CREATE TABLE store_district (Store_ID NUMBER);"
      },
      {
        "question": "Out of those products, which ones are available at \"Miramichi\"?",
        "query": "SELECT t1.product FROM product AS t1 JOIN store_product AS t2 ON t1.product_id = t2.product_id JOIN store AS t3 ON t2.store_id = t3.store_id WHERE t3.store_name = \"Miramichi\"",
        "schema": "CREATE TABLE store_district (District_ID NUMBER, Store_ID NUMBER); CREATE TABLE product (product_id NUMBER, product TEXT); CREATE TABLE district (District_ID NUMBER); CREATE TABLE store (Store_ID NUMBER, Type TEXT, Store_Name TEXT); CREATE TABLE store_product (Store_ID NUMBER, Product_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What are the products out there?",
        "query": "SELECT product FROM product",
        "schema": "CREATE TABLE store (Number_of_product_category NUMBER, Type TEXT, Store_ID NUMBER); CREATE TABLE product (product_id NUMBER, product TEXT); CREATE TABLE district (District_ID NUMBER); CREATE TABLE store_product (Store_ID NUMBER, Product_ID NUMBER);"
      },
      {
        "question": "Tell me the page per minute color of these products.",
        "query": "SELECT product, pages_per_minute_color FROM product",
        "schema": "CREATE TABLE product (pages_per_minute_color NUMBER, product_id NUMBER, product TEXT); CREATE TABLE store_product (Product_ID NUMBER, Store_ID NUMBER); CREATE TABLE district (District_ID NUMBER); CREATE TABLE store (Type TEXT, Store_ID NUMBER, Number_of_product_category NUMBER);"
      },
      {
        "question": "Which of these have a pages per minute color smaller than 5?",
        "query": "SELECT product FROM product WHERE pages_per_minute_color < 5",
        "schema": "CREATE TABLE store_product (Store_ID NUMBER, Product_ID NUMBER); CREATE TABLE product (product TEXT, product_id NUMBER, pages_per_minute_color NUMBER); CREATE TABLE store (Number_of_product_category NUMBER, Type TEXT, Store_ID NUMBER); CREATE TABLE district (District_ID NUMBER);"
      },
      {
        "question": "Which of these listed products also have a max page size \"A4\"?",
        "query": "SELECT product FROM product WHERE max_page_size = \"A4\" AND pages_per_minute_color < 5",
        "schema": "CREATE TABLE store_product (Store_ID NUMBER, Product_ID NUMBER); CREATE TABLE store (Store_ID NUMBER, Number_of_product_category NUMBER, Type TEXT); CREATE TABLE product (product_id NUMBER, max_page_size TEXT, product TEXT, pages_per_minute_color NUMBER); CREATE TABLE district (District_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Give me the list of the products.",
        "query": "SELECT product FROM product",
        "schema": "CREATE TABLE product (product TEXT, product_id NUMBER);"
      },
      {
        "question": "Tell me the max page size of these products.",
        "query": "SELECT product, max_page_size FROM product",
        "schema": "CREATE TABLE product (product TEXT, max_page_size TEXT, product_id NUMBER, pages_per_minute_color NUMBER);"
      },
      {
        "question": "Which of these have a max page size of \"A4\"?",
        "query": "SELECT product FROM product WHERE max_page_size = \"A4\"",
        "schema": "CREATE TABLE product (product TEXT, max_page_size TEXT, pages_per_minute_color NUMBER, product_id NUMBER);"
      },
      {
        "question": "Also include those that have a pages per minute color smaller than 5.",
        "query": "SELECT product FROM product WHERE max_page_size = \"A4\" OR pages_per_minute_color < 5",
        "schema": "CREATE TABLE product (product TEXT, max_page_size TEXT, product_id NUMBER, pages_per_minute_color NUMBER);"
      }
    ],
    [
      {
        "question": "List the available products.",
        "query": "SELECT product FROM product",
        "schema": "CREATE TABLE product (product_id NUMBER, product TEXT);"
      },
      {
        "question": "Which of these products contains the word word \"Canon\"?",
        "query": "SELECT product FROM product WHERE product LIKE \"%Canon%\"",
        "schema": "CREATE TABLE product (product_id NUMBER, product TEXT);"
      },
      {
        "question": "How about the word \"Fujitsu\"?",
        "query": "SELECT product FROM product WHERE product LIKE \"%Fujitsu%\"",
        "schema": "CREATE TABLE product (product TEXT, product_id NUMBER);"
      },
      {
        "question": "How about the word \"Scanner\"?",
        "query": "SELECT product FROM product WHERE product LIKE \"%Scanner%\"",
        "schema": "CREATE TABLE product (product_id NUMBER, product TEXT);"
      }
    ],
    [
      {
        "question": "Tell me all the max page sizes available.",
        "query": "SELECT DISTINCT max_page_size FROM product",
        "schema": "CREATE TABLE product (max_page_size TEXT, pages_per_minute_color NUMBER);"
      },
      {
        "question": "Give me the names of all products.",
        "query": "SELECT product FROM product",
        "schema": "CREATE TABLE product (product_id NUMBER, pages_per_minute_color NUMBER, max_page_size TEXT, product TEXT);"
      },
      {
        "question": "What are the corresponding max page sizes of these products?",
        "query": "SELECT product, max_page_size FROM product",
        "schema": "CREATE TABLE product (product_id NUMBER, max_page_size TEXT, pages_per_minute_color NUMBER, product TEXT);"
      },
      {
        "question": "Which max page sizes are the most prominent?",
        "query": "SELECT max_page_size FROM product GROUP BY max_page_size ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE product (product TEXT, product_id NUMBER, pages_per_minute_color NUMBER, max_page_size TEXT);"
      }
    ],
    [
      {
        "question": "Can you show me all the products?",
        "query": "SELECT product FROM product",
        "schema": "CREATE TABLE product (product_id NUMBER, product TEXT);"
      },
      {
        "question": "Give me the max page sizes for each of these products.",
        "query": "SELECT product, max_page_size FROM product",
        "schema": "CREATE TABLE product (pages_per_minute_color NUMBER, max_page_size TEXT, product TEXT, product_id NUMBER);"
      },
      {
        "question": "Which of these max page sizes is most frequently used?",
        "query": "SELECT max_page_size FROM product GROUP BY max_page_size ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE product (max_page_size TEXT, product TEXT, product_id NUMBER, pages_per_minute_color NUMBER);"
      },
      {
        "question": "Which products do not use this max page size?",
        "query": "SELECT product FROM product WHERE max_page_size != (SELECT max_page_size FROM product GROUP BY max_page_size ORDER BY count(*) DESC LIMIT 1)",
        "schema": "CREATE TABLE product (product TEXT, max_page_size TEXT, pages_per_minute_color NUMBER, product_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show me all the districts.",
        "query": "SELECT district_name FROM district",
        "schema": "CREATE TABLE district (City_Area NUMBER, District_name TEXT, District_ID NUMBER, Headquartered_City TEXT, City_Population NUMBER); CREATE TABLE store_district (District_ID NUMBER);"
      },
      {
        "question": "What is the average city area of these districts?",
        "query": "SELECT avg(city_area) FROM district",
        "schema": "CREATE TABLE store_district (District_ID NUMBER); CREATE TABLE district (District_ID NUMBER, Headquartered_City TEXT, District_name TEXT, City_Area NUMBER, City_Population NUMBER);"
      },
      {
        "question": "Which districts have a higher than average city area?",
        "query": "SELECT district_name FROM district WHERE city_area > (SELECT avg(city_area) FROM district)",
        "schema": "CREATE TABLE district (District_ID NUMBER, Headquartered_City TEXT, City_Population NUMBER, District_name TEXT, City_Area NUMBER); CREATE TABLE store_district (District_ID NUMBER);"
      },
      {
        "question": "What is the total population of these districts?",
        "query": "SELECT sum(city_population) FROM district WHERE city_area > (SELECT avg(city_area) FROM district)",
        "schema": "CREATE TABLE district (City_Population NUMBER, District_name TEXT, Headquartered_City TEXT, District_ID NUMBER, City_Area NUMBER); CREATE TABLE store_district (District_ID NUMBER);"
      }
    ]
  ],
  "network_2": [
    [
      {
        "question": "How old is Dan?",
        "query": "SELECT age FROM person WHERE name = 'Dan'",
        "schema": "CREATE TABLE Person (age NUMBER, name TEXT, gender TEXT);"
      },
      {
        "question": "What city is she from?",
        "query": "SELECT city FROM person WHERE name = 'Dan'",
        "schema": "CREATE TABLE Person (city TEXT, gender TEXT, age NUMBER, name TEXT);"
      },
      {
        "question": "Show all friends of Dan.",
        "query": "SELECT * FROM personfriend WHERE name = 'Dan'",
        "schema": "CREATE TABLE PersonFriend (friend TEXT, name TEXT); CREATE TABLE Person (name TEXT, age NUMBER, gender TEXT, city TEXT);"
      },
      {
        "question": "How many friends is this?",
        "query": "SELECT count(t2.friend) FROM person AS t1 JOIN personfriend AS t2 ON t1.name = t2.name WHERE t1.name = 'Dan'",
        "schema": "CREATE TABLE PersonFriend (name TEXT, friend TEXT); CREATE TABLE Person (gender TEXT, city TEXT, name TEXT, age NUMBER);"
      }
    ],
    [
      {
        "question": "Show all ages of people.",
        "query": "SELECT age FROM person",
        "schema": "CREATE TABLE Person (age NUMBER, name TEXT);"
      },
      {
        "question": "What is the average?",
        "query": "SELECT avg(age) FROM person",
        "schema": "CREATE TABLE Person (name TEXT, age NUMBER);"
      },
      {
        "question": "What is the maximum?",
        "query": "SELECT max(age) FROM person",
        "schema": "CREATE TABLE Person (age NUMBER, name TEXT);"
      },
      {
        "question": "What is the name of the person with this age?",
        "query": "SELECT name FROM person WHERE age = (SELECT max(age) FROM person)",
        "schema": "CREATE TABLE Person (name TEXT, age NUMBER); CREATE TABLE PersonFriend (name TEXT);"
      }
    ],
    [
      {
        "question": "How many distinct jobs do the people have?",
        "query": "SELECT count(DISTINCT job) FROM person",
        "schema": "CREATE TABLE Person (name TEXT, job TEXT);"
      },
      {
        "question": "What are these jobs?",
        "query": "SELECT DISTINCT job FROM person",
        "schema": "CREATE TABLE Person (job TEXT, name TEXT);"
      },
      {
        "question": "List the names of all students.",
        "query": "SELECT name FROM person WHERE job = 'student'",
        "schema": "CREATE TABLE PersonFriend (name TEXT); CREATE TABLE Person (name TEXT, job TEXT);"
      },
      {
        "question": "What is the maximum age of students?",
        "query": "SELECT max(age) FROM person WHERE job = 'student'",
        "schema": "CREATE TABLE Person (age NUMBER, job TEXT, name TEXT); CREATE TABLE PersonFriend (name TEXT);"
      },
      {
        "question": "Print the name of the student with this age.",
        "query": "SELECT name FROM person WHERE job = 'student' AND age = (SELECT max(age) FROM person WHERE job = 'student' )",
        "schema": "CREATE TABLE PersonFriend (name TEXT); CREATE TABLE Person (age NUMBER, name TEXT, job TEXT);"
      }
    ],
    [
      {
        "question": "List all female names.",
        "query": "SELECT name FROM person WHERE gender = 'female'",
        "schema": "CREATE TABLE PersonFriend (name TEXT); CREATE TABLE Person (name TEXT, gender TEXT);"
      },
      {
        "question": "How about males?",
        "query": "SELECT name FROM person WHERE gender = 'male'",
        "schema": "CREATE TABLE PersonFriend (name TEXT, friend TEXT); CREATE TABLE Person (gender TEXT, name TEXT);"
      },
      {
        "question": "What are the maximum ages for each gender?",
        "query": "SELECT gender, max(age) FROM person GROUP BY gender",
        "schema": "CREATE TABLE Person (name TEXT, age NUMBER, gender TEXT); CREATE TABLE PersonFriend (name TEXT, friend TEXT);"
      },
      {
        "question": "Who is the youngest male?",
        "query": "SELECT name FROM person WHERE gender = 'male' AND age = (SELECT min(age) FROM person WHERE gender = 'male' )",
        "schema": "CREATE TABLE PersonFriend (name TEXT, friend TEXT); CREATE TABLE Person (name TEXT, age NUMBER, gender TEXT);"
      }
    ],
    [
      {
        "question": "What is the last name alphabetically?",
        "query": "SELECT name FROM person ORDER BY name DESC LIMIT 1",
        "schema": "CREATE TABLE Person (name TEXT);"
      },
      {
        "question": "What is the occupation for Zach?",
        "query": "SELECT job FROM person WHERE name = 'Zach'",
        "schema": "CREATE TABLE Person (job TEXT, name TEXT); CREATE TABLE PersonFriend (friend TEXT);"
      },
      {
        "question": "How old is the doctor named Zach?",
        "query": "SELECT age FROM person WHERE job = 'doctor' AND name = 'Zach'",
        "schema": "CREATE TABLE PersonFriend (friend TEXT); CREATE TABLE Person (job TEXT, age NUMBER, name TEXT);"
      }
    ],
    [
      {
        "question": "How many people are older than 20?",
        "query": "SELECT count(*) FROM person WHERE age > 20",
        "schema": "CREATE TABLE Person (gender TEXT, job TEXT, name TEXT, age NUMBER);"
      },
      {
        "question": "How about 30?",
        "query": "SELECT count(*) FROM person WHERE age > 30",
        "schema": "CREATE TABLE Person (age NUMBER, gender TEXT, job TEXT, name TEXT);"
      },
      {
        "question": "How many engineers are there?",
        "query": "SELECT count(*) FROM person WHERE job = 'engineer'",
        "schema": "CREATE TABLE Person (job TEXT, age NUMBER, name TEXT, gender TEXT);"
      },
      {
        "question": "How many people are both engineers and are over 30 years old?",
        "query": "SELECT count(*) FROM person WHERE age > 30 AND job = 'engineer'",
        "schema": "CREATE TABLE Person (gender TEXT, job TEXT, name TEXT, age NUMBER);"
      }
    ],
    [
      {
        "question": "What is the sum of ages for men?",
        "query": "SELECT sum(age) FROM person WHERE gender = 'male'",
        "schema": "CREATE TABLE Person (age NUMBER, gender TEXT);"
      },
      {
        "question": "What about the average?",
        "query": "SELECT avg(age) FROM person WHERE gender = 'male'",
        "schema": "CREATE TABLE Person (age NUMBER, name TEXT, gender TEXT);"
      },
      {
        "question": "What is the average for each job?",
        "query": "SELECT avg(age) FROM person WHERE gender = 'male' GROUP BY job",
        "schema": "CREATE TABLE Person (job TEXT, name TEXT, age NUMBER, gender TEXT);"
      }
    ],
    [
      {
        "question": "How many different people are over 40?",
        "query": "SELECT count(DISTINCT name) FROM person WHERE age > 40",
        "schema": "CREATE TABLE Person (age NUMBER, job TEXT, name TEXT, gender TEXT);"
      },
      {
        "question": "How about under?",
        "query": "SELECT count(DISTINCT name) FROM person WHERE age < 40",
        "schema": "CREATE TABLE PersonFriend (name TEXT, friend TEXT); CREATE TABLE Person (age NUMBER, job TEXT, name TEXT, gender TEXT);"
      },
      {
        "question": "How many are male?",
        "query": "SELECT count(DISTINCT name) FROM person WHERE age < 40 AND gender = 'male'",
        "schema": "CREATE TABLE Person (name TEXT, age NUMBER, job TEXT, gender TEXT); CREATE TABLE PersonFriend (friend TEXT, name TEXT);"
      },
      {
        "question": "What is the count under 40 for each gender?",
        "query": "SELECT count(*) , gender FROM person WHERE age < 40 GROUP BY gender",
        "schema": "CREATE TABLE PersonFriend (name TEXT, friend TEXT); CREATE TABLE Person (name TEXT, gender TEXT, age NUMBER, job TEXT);"
      }
    ],
    [
      {
        "question": "What is the minimum age of engineers?",
        "query": "SELECT min(age) FROM person WHERE job = 'engineer'",
        "schema": "CREATE TABLE Person (name TEXT, job TEXT, age NUMBER);"
      },
      {
        "question": "List all information for people older than this.",
        "query": "SELECT * FROM person WHERE age > (SELECT min(age) FROM person WHERE job = 'engineer')",
        "schema": "CREATE TABLE Person (job TEXT, name TEXT, age NUMBER);"
      },
      {
        "question": "Just show their name.",
        "query": "SELECT name FROM person WHERE age > (SELECT min(age) FROM person WHERE job = 'engineer')",
        "schema": "CREATE TABLE Person (age NUMBER, job TEXT, name TEXT);"
      },
      {
        "question": "Sort this group in order of ascending age.",
        "query": "SELECT name FROM person WHERE age > (SELECT min(age) FROM person WHERE job = 'engineer') ORDER BY age",
        "schema": "CREATE TABLE Person (name TEXT, age NUMBER, job TEXT);"
      }
    ],
    [
      {
        "question": "What is the maximum age of engineers?",
        "query": "SELECT max(age) FROM person WHERE job = 'engineer'",
        "schema": "CREATE TABLE Person (job TEXT, age NUMBER, name TEXT);"
      },
      {
        "question": "List all information for people older than this.",
        "query": "SELECT * FROM person WHERE age > (SELECT min(age) FROM person WHERE job = 'engineer')",
        "schema": "CREATE TABLE Person (age NUMBER, job TEXT, name TEXT);"
      },
      {
        "question": "Where are they all from?",
        "query": "SELECT city FROM person WHERE age > (SELECT min(age) FROM person WHERE job = 'engineer')",
        "schema": "CREATE TABLE Person (age NUMBER, city TEXT, name TEXT, job TEXT);"
      },
      {
        "question": "How many are there in total?",
        "query": "SELECT count(*) FROM person WHERE age > (SELECT max(age) FROM person WHERE job = 'engineer')",
        "schema": "CREATE TABLE Person (city TEXT, age NUMBER, name TEXT, job TEXT);"
      }
    ],
    [
      {
        "question": "Show all names of the men.",
        "query": "SELECT name FROM person WHERE gender = 'male'",
        "schema": "CREATE TABLE PersonFriend (name TEXT, friend TEXT); CREATE TABLE Person (gender TEXT, name TEXT);"
      },
      {
        "question": "Order them by descending age.",
        "query": "SELECT name FROM person WHERE gender = 'male' ORDER BY age DESC",
        "schema": "CREATE TABLE PersonFriend (friend TEXT, name TEXT); CREATE TABLE Person (gender TEXT, age NUMBER, name TEXT);"
      },
      {
        "question": "Reverse the oder.",
        "query": "SELECT name FROM person WHERE gender = 'male' ORDER BY age",
        "schema": "CREATE TABLE Person (age NUMBER, name TEXT, gender TEXT); CREATE TABLE PersonFriend (name TEXT, friend TEXT);"
      },
      {
        "question": "Also show the ages.",
        "query": "SELECT name, age FROM person WHERE gender = 'male' ORDER BY age",
        "schema": "CREATE TABLE PersonFriend (name TEXT, friend TEXT); CREATE TABLE Person (age NUMBER, gender TEXT, name TEXT);"
      }
    ],
    [
      {
        "question": "Show name and age of the people who are friends with Dan.",
        "query": "SELECT t1.name , t1.age FROM person AS t1 JOIN personfriend AS t2 ON t1.name = t2.name WHERE t2.friend = 'Dan'",
        "schema": "CREATE TABLE PersonFriend (name TEXT, friend TEXT); CREATE TABLE Person (name TEXT, age NUMBER);"
      },
      {
        "question": "How about the friends of Alice?",
        "query": "SELECT t1.name , t1.age FROM person AS t1 JOIN personfriend AS t2 ON t1.name = t2.name WHERE t2.friend = 'Alice'",
        "schema": "CREATE TABLE PersonFriend (name TEXT, friend TEXT); CREATE TABLE Person (name TEXT, age NUMBER);"
      },
      {
        "question": "Show the union of the sets.",
        "query": "SELECT t1.name , t1.age FROM person AS t1 JOIN personfriend AS t2 ON t1.name = t2.name WHERE t2.friend = 'Dan' UNION SELECT t1.name , t1.age FROM person AS t1 JOIN personfriend AS t2 ON t1.name = t2.name WHERE t2.friend = 'Alice'",
        "schema": "CREATE TABLE Person (name TEXT, age NUMBER); CREATE TABLE PersonFriend (name TEXT, friend TEXT);"
      },
      {
        "question": "How about the intersections?",
        "query": "SELECT t1.name , t1.age FROM person AS t1 JOIN personfriend AS t2 ON t1.name = t2.name WHERE t2.friend = 'Dan' INTERSECT SELECT t1.name , t1.age FROM person AS t1 JOIN personfriend AS t2 ON t1.name = t2.name WHERE t2.friend = 'Alice'",
        "schema": "CREATE TABLE Person (name TEXT, age NUMBER); CREATE TABLE PersonFriend (friend TEXT, name TEXT);"
      }
    ],
    [
      {
        "question": "How many people are friends with Dan?",
        "query": "SELECT count(*) FROM personfriend WHERE friend = 'Dan'",
        "schema": "CREATE TABLE Person (name TEXT); CREATE TABLE PersonFriend (friend TEXT, name TEXT);"
      },
      {
        "question": "How about for Alice?",
        "query": "SELECT count(*) FROM personfriend WHERE friend = 'Alice'",
        "schema": "CREATE TABLE PersonFriend (friend TEXT, name TEXT); CREATE TABLE Person (name TEXT);"
      },
      {
        "question": "Show the name and age of poeple who are friends with either.",
        "query": "SELECT DISTINCT t1.name , t1.age FROM person AS t1 JOIN personfriend AS t2 ON t1.name = t2.name WHERE t2.friend = 'Dan' OR t2.friend = 'Alice'",
        "schema": "CREATE TABLE Person (age NUMBER, name TEXT); CREATE TABLE PersonFriend (name TEXT, friend TEXT);"
      }
    ],
    [
      {
        "question": "Show how many friends each person in the set has.",
        "query": "SELECT name, count(*) FROM personfriend GROUP BY name",
        "schema": "CREATE TABLE Person (name TEXT); CREATE TABLE PersonFriend (name TEXT, friend TEXT);"
      },
      {
        "question": "Who has the most friends?",
        "query": "SELECT name FROM personfriend GROUP BY name ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Person (name TEXT); CREATE TABLE PersonFriend (name TEXT, friend TEXT);"
      },
      {
        "question": "Who is friends with someone who is above 40?",
        "query": "SELECT t1.name FROM person AS t1 JOIN personfriend AS t2 ON t1.name = t2.name WHERE t2.friend IN (SELECT name FROM person WHERE age > 40)",
        "schema": "CREATE TABLE PersonFriend (friend TEXT, name TEXT); CREATE TABLE Person (name TEXT, age NUMBER);"
      },
      {
        "question": "Who among them is also friends with someone who is under 30?",
        "query": "SELECT t1.name FROM person AS t1 JOIN personfriend AS t2 ON t1.name = t2.name WHERE t2.friend IN (SELECT name FROM person WHERE age > 40) INTERSECT SELECT t1.name FROM person AS t1 JOIN personfriend AS t2 ON t1.name = t2.name WHERE t2.friend IN (SELECT name FROM person WHERE age < 30)",
        "schema": "CREATE TABLE PersonFriend (friend TEXT, name TEXT); CREATE TABLE Person (age NUMBER, name TEXT);"
      }
    ],
    [
      {
        "question": "Who has exactly 1 friend?",
        "query": "SELECT name FROM personfriend GROUP BY name HAVING count(*) = 1",
        "schema": "CREATE TABLE PersonFriend (friend TEXT, name TEXT); CREATE TABLE Person (name TEXT);"
      },
      {
        "question": "What about more than 1?",
        "query": "SELECT name FROM personfriend GROUP BY name HAVING count(*) > 1",
        "schema": "CREATE TABLE Person (name TEXT); CREATE TABLE PersonFriend (name TEXT, friend TEXT);"
      },
      {
        "question": "Who has a friend who is at least 40 years old?",
        "query": "SELECT t1.name FROM person AS t1 JOIN personfriend AS t2 ON t1.name = t2.name WHERE t2.friend IN (SELECT name FROM person WHERE age > 40)",
        "schema": "CREATE TABLE PersonFriend (name TEXT, year NUMBER, friend TEXT); CREATE TABLE Person (name TEXT, age NUMBER);"
      },
      {
        "question": "Who among them do not also have a friend under 30?",
        "query": "SELECT t1.name FROM person AS t1 JOIN personfriend AS t2 ON t1.name = t2.name WHERE t2.friend IN (SELECT name FROM person WHERE age > 40) EXCEPT SELECT t1.name FROM person AS t1 JOIN personfriend AS t2 ON t1.name = t2.name WHERE t2.friend IN (SELECT name FROM person WHERE age < 30)",
        "schema": "CREATE TABLE Person (age NUMBER, name TEXT); CREATE TABLE PersonFriend (year NUMBER, friend TEXT, name TEXT);"
      }
    ],
    [
      {
        "question": "Show all student names.",
        "query": "SELECT name FROM person WHERE job = 'student'",
        "schema": "CREATE TABLE PersonFriend (name TEXT); CREATE TABLE Person (job TEXT, name TEXT);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT count(*) FROM person WHERE job = 'student'",
        "schema": "CREATE TABLE Person (name TEXT, job TEXT); CREATE TABLE PersonFriend (name TEXT, friend TEXT);"
      },
      {
        "question": "Show all people friends with students.",
        "query": "SELECT t2.name FROM person AS t1 JOIN personfriend AS t2 ON t1.name = t2.friend WHERE t1.name = 'student'",
        "schema": "CREATE TABLE PersonFriend (friend TEXT, name TEXT); CREATE TABLE Person (job TEXT, name TEXT);"
      },
      {
        "question": "Show all people except these.",
        "query": "SELECT name FROM person EXCEPT SELECT t2.name FROM person AS t1 JOIN personfriend AS t2 ON t1.name = t2.friend WHERE t1.job = 'student'",
        "schema": "CREATE TABLE Person (name TEXT, job TEXT); CREATE TABLE PersonFriend (friend TEXT, name TEXT);"
      }
    ],
    [
      {
        "question": "Who has the longest-running friend?",
        "query": "SELECT name FROM personfriend ORDER BY YEAR DESC LIMIT 1",
        "schema": "CREATE TABLE Person (name TEXT); CREATE TABLE PersonFriend (year NUMBER, friend TEXT, name TEXT);"
      },
      {
        "question": "Who has more than 1 friend?",
        "query": "SELECT name FROM personfriend GROUP BY name HAVING count(*) > 1",
        "schema": "CREATE TABLE Person (name TEXT); CREATE TABLE PersonFriend (friend TEXT, name TEXT, year NUMBER);"
      },
      {
        "question": "Who has no friends?",
        "query": "SELECT name FROM person WHERE name NOT IN (SELECT name FROM personfriend)",
        "schema": "CREATE TABLE PersonFriend (name TEXT, year NUMBER, friend TEXT); CREATE TABLE Person (name TEXT);"
      },
      {
        "question": "Who has exactly 1?",
        "query": "SELECT name FROM personfriend GROUP BY name HAVING count(*) = 1",
        "schema": "CREATE TABLE Person (name TEXT); CREATE TABLE PersonFriend (year NUMBER, friend TEXT, name TEXT);"
      }
    ],
    [
      {
        "question": "How many people does Bob consider a friend?",
        "query": "SELECT count(*) FROM personfriend WHERE name = 'Bob'",
        "schema": "CREATE TABLE PersonFriend (friend TEXT, name TEXT); CREATE TABLE Person (name TEXT, job TEXT);"
      },
      {
        "question": "How long have they been friends?",
        "query": "SELECT friend, YEAR FROM personfriend WHERE name = 'Bob'",
        "schema": "CREATE TABLE Person (job TEXT, name TEXT); CREATE TABLE PersonFriend (year NUMBER, friend TEXT, name TEXT);"
      },
      {
        "question": "Only show the name.",
        "query": "SELECT friend FROM personfriend WHERE name = 'Bob'",
        "schema": "CREATE TABLE PersonFriend (year NUMBER, friend TEXT, name TEXT); CREATE TABLE Person (job TEXT, name TEXT);"
      }
    ],
    [
      {
        "question": "How many friendships are there?",
        "query": "SELECT count(*) FROM personfriend",
        "schema": "CREATE TABLE Person (name TEXT); CREATE TABLE PersonFriend (year NUMBER, name TEXT, friend TEXT);"
      },
      {
        "question": "How many distinct people consider Bob to be their friend?",
        "query": "SELECT count(DISTINCT name) FROM personfriend WHERE friend = 'Bob'",
        "schema": "CREATE TABLE Person (name TEXT); CREATE TABLE PersonFriend (name TEXT, friend TEXT, year NUMBER);"
      },
      {
        "question": "Who has considered him a friend for the shortest amount of time?",
        "query": "SELECT name FROM personfriend WHERE friend = 'Bob' ORDER BY YEAR",
        "schema": "CREATE TABLE Person (name TEXT); CREATE TABLE PersonFriend (friend TEXT, name TEXT, year NUMBER);"
      },
      {
        "question": "Show the names of everyone who thinks he is their friend.",
        "query": "SELECT name FROM personfriend WHERE friend = 'Bob'",
        "schema": "CREATE TABLE PersonFriend (friend TEXT, year NUMBER, name TEXT); CREATE TABLE Person (name TEXT);"
      }
    ],
    [
      {
        "question": "Who does Zach consider to be his friend?",
        "query": "SELECT friend FROM personfriend WHERE name = 'Zach'",
        "schema": "CREATE TABLE PersonFriend (friend TEXT, name TEXT); CREATE TABLE Person (job TEXT, name TEXT);"
      },
      {
        "question": "How about the other way around?",
        "query": "SELECT name FROM personfriend WHERE friend = 'Zach'",
        "schema": "CREATE TABLE Person (name TEXT, job TEXT); CREATE TABLE PersonFriend (friend TEXT, name TEXT);"
      },
      {
        "question": "Find the names of those among them who are male.",
        "query": "SELECT t1.name FROM person AS t1 JOIN personfriend AS t2 ON t1.name = t2.name WHERE t2.friend = 'Zach' AND t1.gender = 'male'",
        "schema": "CREATE TABLE Person (name TEXT, job TEXT, gender TEXT); CREATE TABLE PersonFriend (friend TEXT, name TEXT);"
      },
      {
        "question": "And female?",
        "query": "SELECT t1.name FROM person AS t1 JOIN personfriend AS t2 ON t1.name = t2.name WHERE t2.friend = 'Zach' AND t1.gender = 'female'",
        "schema": "CREATE TABLE Person (gender TEXT, job TEXT, name TEXT); CREATE TABLE PersonFriend (name TEXT, friend TEXT);"
      }
    ],
    [
      {
        "question": "Who considers Alice to be their friend?",
        "query": "SELECT name FROM personfriend WHERE friend = 'Alice'",
        "schema": "CREATE TABLE Person (name TEXT); CREATE TABLE PersonFriend (name TEXT, friend TEXT);"
      },
      {
        "question": "How about the other way around?",
        "query": "SELECT friend FROM personfriend WHERE name = 'Alice'",
        "schema": "CREATE TABLE PersonFriend (name TEXT, friend TEXT); CREATE TABLE Person (name TEXT);"
      },
      {
        "question": "Find the names of those among them who are male.",
        "query": "SELECT t2.friend FROM person AS t1 JOIN personfriend AS t2 ON t1.name = t2.friend WHERE t2.name = 'Alice' AND t1.gender = 'male'",
        "schema": "CREATE TABLE PersonFriend (name TEXT, friend TEXT); CREATE TABLE Person (name TEXT, gender TEXT);"
      },
      {
        "question": "And female?",
        "query": "SELECT t2.friend FROM person AS t1 JOIN personfriend AS t2 ON t1.name = t2.friend WHERE t2.name = 'Alice' AND t1.gender = 'female'",
        "schema": "CREATE TABLE PersonFriend (friend TEXT, name TEXT); CREATE TABLE Person (name TEXT, gender TEXT);"
      }
    ],
    [
      {
        "question": "How many people are a friend of Alice?",
        "query": "SELECT count(*) FROM personfriend WHERE name = 'Alice'",
        "schema": "CREATE TABLE Person (city TEXT, name TEXT); CREATE TABLE PersonFriend (friend TEXT, name TEXT, year NUMBER);"
      },
      {
        "question": "How many people are not a friend of Alice?",
        "query": "SELECT count(*) FROM person WHERE name NOT IN (SELECT friend FROM personfriend WHERE name = 'Alice')",
        "schema": "CREATE TABLE Person (city TEXT, name TEXT); CREATE TABLE PersonFriend (year NUMBER, friend TEXT, name TEXT);"
      },
      {
        "question": "Who among the friends of Alice is male?",
        "query": "SELECT t2.friend FROM person AS t1 JOIN personfriend AS t2 ON t1.name = t2.friend WHERE t2.name = 'Alice' AND t1.gender = 'male'",
        "schema": "CREATE TABLE Person (city TEXT, gender TEXT, name TEXT); CREATE TABLE PersonFriend (name TEXT, friend TEXT, year NUMBER);"
      },
      {
        "question": "Only show those who are also a doctor?",
        "query": "SELECT t2.friend FROM person AS t1 JOIN personfriend AS t2 ON t1.name = t2.friend WHERE t2.name = 'Alice' AND t1.gender = 'male' AND t1.job = 'doctor'",
        "schema": "CREATE TABLE PersonFriend (name TEXT, friend TEXT, year NUMBER); CREATE TABLE Person (name TEXT, gender TEXT, city TEXT, job TEXT);"
      }
    ],
    [
      {
        "question": "Who is from Chicago?",
        "query": "SELECT name FROM person WHERE city = 'chicago'",
        "schema": "CREATE TABLE Person (city TEXT, name TEXT); CREATE TABLE PersonFriend (name TEXT);"
      },
      {
        "question": "How about New York City?",
        "query": "SELECT name FROM person WHERE city = 'new york city'",
        "schema": "CREATE TABLE Person (name TEXT, city TEXT); CREATE TABLE PersonFriend (name TEXT);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT count(*) FROM person WHERE city = 'new york city'",
        "schema": "CREATE TABLE PersonFriend (friend TEXT, name TEXT); CREATE TABLE Person (city TEXT, name TEXT, job TEXT);"
      },
      {
        "question": "Who is friends with these people?",
        "query": "SELECT t2.name FROM person AS t1 JOIN personfriend AS t2 ON t1.name = t2.friend WHERE t1.city = 'new york city'",
        "schema": "CREATE TABLE PersonFriend (friend TEXT, name TEXT); CREATE TABLE Person (job TEXT, city TEXT, name TEXT);"
      }
    ],
    [
      {
        "question": "What is the minimum age?",
        "query": "SELECT min(age) FROM person",
        "schema": "CREATE TABLE Person (name TEXT, age NUMBER);"
      },
      {
        "question": "Who has it?",
        "query": "SELECT name FROM person WHERE age = (SELECT min(age) FROM person)",
        "schema": "CREATE TABLE Person (age NUMBER, name TEXT, job TEXT, gender TEXT);"
      },
      {
        "question": "What is the average age?",
        "query": "SELECT avg(age) FROM person",
        "schema": "CREATE TABLE Person (name TEXT, age NUMBER, gender TEXT, job TEXT);"
      },
      {
        "question": "Who is younger than this?",
        "query": "SELECT name FROM person WHERE age < (SELECT avg(age) FROM person)",
        "schema": "CREATE TABLE Person (gender TEXT, job TEXT, name TEXT, age NUMBER);"
      },
      {
        "question": "Who calls these people friends?",
        "query": "SELECT DISTINCT t2.name FROM person AS t1 JOIN personfriend AS t2 ON t1.name = t2.friend WHERE t1.age < (SELECT avg(age) FROM person)",
        "schema": "CREATE TABLE Person (job TEXT, gender TEXT, name TEXT, age NUMBER); CREATE TABLE PersonFriend (name TEXT, friend TEXT);"
      }
    ],
    [
      {
        "question": "How many people are there?",
        "query": "SELECT count(*) FROM person",
        "schema": "CREATE TABLE Person (city TEXT, age NUMBER, gender TEXT, name TEXT, job TEXT);"
      },
      {
        "question": "How many are younger than the average age?",
        "query": "SELECT count(*) FROM person WHERE age < (SELECT avg(age) FROM person)",
        "schema": "CREATE TABLE Person (city TEXT, name TEXT, age NUMBER, gender TEXT, job TEXT);"
      },
      {
        "question": "What about older?",
        "query": "SELECT count(*) FROM person WHERE age > (SELECT avg(age) FROM person)",
        "schema": "CREATE TABLE Person (job TEXT, age NUMBER, city TEXT, gender TEXT, name TEXT);"
      },
      {
        "question": "Who is friends with these people? Show their names and ages.",
        "query": "SELECT DISTINCT t2.name , t2.friend , t1.age FROM person AS t1 JOIN personfriend AS t2 ON t1.name = t2.friend WHERE t1.age > (SELECT avg(age) FROM person)",
        "schema": "CREATE TABLE Person (age NUMBER, name TEXT, gender TEXT, city TEXT, job TEXT); CREATE TABLE PersonFriend (name TEXT, friend TEXT);"
      }
    ],
    [
      {
        "question": "How many people is Zach friends with?",
        "query": "SELECT count(*) FROM personfriend WHERE name = 'Zach'",
        "schema": "CREATE TABLE Person (name TEXT); CREATE TABLE PersonFriend (friend TEXT, name TEXT);"
      },
      {
        "question": "Who are they?",
        "query": "SELECT name FROM personfriend WHERE name = 'Zach'",
        "schema": "CREATE TABLE Person (name TEXT, job TEXT); CREATE TABLE PersonFriend (name TEXT, friend TEXT);"
      },
      {
        "question": "Also show how long they have been freinds.",
        "query": "SELECT name, YEAR FROM personfriend WHERE name = 'Zach'",
        "schema": "CREATE TABLE PersonFriend (name TEXT, friend TEXT, year NUMBER); CREATE TABLE Person (name TEXT, job TEXT);"
      },
      {
        "question": "Show the name of the person who has been freinds with him the longest.",
        "query": "SELECT friend FROM personfriend WHERE name = 'Zach' AND YEAR = (SELECT max(YEAR) FROM personfriend WHERE name = 'Zach')",
        "schema": "CREATE TABLE PersonFriend (friend TEXT, year NUMBER, name TEXT); CREATE TABLE Person (job TEXT, name TEXT);"
      }
    ],
    [
      {
        "question": "Who has the shortest relationship among the people Zach is friends with?",
        "query": "SELECT name FROM personfriend WHERE name = 'Zach' ORDER BY YEAR LIMIT 1",
        "schema": "CREATE TABLE PersonFriend (year NUMBER, name TEXT, friend TEXT); CREATE TABLE Person (name TEXT);"
      },
      {
        "question": "How about the longest?",
        "query": "SELECT name FROM personfriend WHERE name = 'Zach' ORDER BY YEAR DESC LIMIT 1",
        "schema": "CREATE TABLE Person (name TEXT); CREATE TABLE PersonFriend (year NUMBER, name TEXT, friend TEXT);"
      },
      {
        "question": "Also show how long have they been freinds.",
        "query": "SELECT name, YEAR FROM personfriend WHERE name = 'Zach' ORDER BY YEAR DESC LIMIT 1",
        "schema": "CREATE TABLE Person (name TEXT, age NUMBER); CREATE TABLE PersonFriend (friend TEXT, name TEXT, year NUMBER);"
      },
      {
        "question": "How old are they?",
        "query": "SELECT t1.age FROM person AS t1 JOIN personfriend AS t2 ON t1.name = t2.friend WHERE t2.name = 'Zach' AND t2.year = (SELECT max(YEAR) FROM personfriend WHERE name = 'Zach')",
        "schema": "CREATE TABLE PersonFriend (name TEXT, friend TEXT, year NUMBER); CREATE TABLE Person (age NUMBER, name TEXT);"
      }
    ],
    [
      {
        "question": "What is the length of the shortest friendship?",
        "query": "SELECT min(YEAR) FROM personfriend",
        "schema": "CREATE TABLE PersonFriend (friend TEXT, year NUMBER, name TEXT); CREATE TABLE Person (name TEXT);"
      },
      {
        "question": "WHat is the minimum among friendships with Alice?",
        "query": "SELECT min(YEAR) FROM personfriend WHERE friend = 'Alice'",
        "schema": "CREATE TABLE Person (name TEXT); CREATE TABLE PersonFriend (year NUMBER, friend TEXT, name TEXT);"
      },
      {
        "question": "What is the name of the person who has held this friendship?",
        "query": "SELECT name FROM personfriend WHERE friend = 'Alice' AND YEAR = (SELECT min(YEAR) FROM personfriend WHERE friend = 'Alice')",
        "schema": "CREATE TABLE PersonFriend (year NUMBER, friend TEXT, name TEXT); CREATE TABLE Person (name TEXT);"
      }
    ],
    [
      {
        "question": "What is the maximum length of friendships with Alice?",
        "query": "SELECT max(YEAR) FROM personfriend WHERE friend = 'Alice'",
        "schema": "CREATE TABLE Person (name TEXT); CREATE TABLE PersonFriend (friend TEXT, name TEXT, year NUMBER);"
      },
      {
        "question": "Who holds a relationship of that length?",
        "query": "SELECT t1.name FROM person AS t1 JOIN personfriend AS t2 ON t1.name = t2.name WHERE t2.friend = 'Alice' AND t2.year = (SELECT max(YEAR) FROM personfriend WHERE friend = 'Alice')",
        "schema": "CREATE TABLE PersonFriend (friend TEXT, name TEXT, year NUMBER); CREATE TABLE Person (name TEXT);"
      },
      {
        "question": "Also show age and job title.",
        "query": "SELECT t1.name , t1.age , t1.job FROM person AS t1 JOIN personfriend AS t2 ON t1.name = t2.name WHERE t2.friend = 'Alice' AND t2.year = (SELECT max(YEAR) FROM personfriend WHERE friend = 'Alice')",
        "schema": "CREATE TABLE PersonFriend (name TEXT, year NUMBER, friend TEXT); CREATE TABLE Person (job TEXT, age NUMBER, name TEXT);"
      }
    ],
    [
      {
        "question": "How many people are there in total?",
        "query": "SELECT count(*) FROM person",
        "schema": "CREATE TABLE Person (gender TEXT, age NUMBER, city TEXT, job TEXT, name TEXT);"
      },
      {
        "question": "How many people are in the friendship database?",
        "query": "SELECT count(DISTINCT name) FROM personfriend",
        "schema": "CREATE TABLE Person (gender TEXT, age NUMBER, name TEXT, city TEXT, job TEXT); CREATE TABLE PersonFriend (friend TEXT, name TEXT);"
      },
      {
        "question": "Who is not in it?",
        "query": "SELECT name FROM person EXCEPT SELECT name FROM personfriend",
        "schema": "CREATE TABLE Person (city TEXT, gender TEXT, job TEXT, name TEXT, age NUMBER); CREATE TABLE PersonFriend (friend TEXT, name TEXT);"
      }
    ],
    [
      {
        "question": "What is the average age of all people?",
        "query": "SELECT avg(age) FROM person",
        "schema": "CREATE TABLE Person (name TEXT, age NUMBER);"
      },
      {
        "question": "What is the average age of the friends?",
        "query": "SELECT avg(t1.age) FROM person AS t1 JOIN personfriend AS t2 ON t1.name = t2.friend",
        "schema": "CREATE TABLE Person (age NUMBER, name TEXT); CREATE TABLE PersonFriend (friend TEXT, name TEXT, year NUMBER);"
      },
      {
        "question": "Show the average friend age for each person.",
        "query": "SELECT t2.name , avg(t1.age) FROM person AS t1 JOIN personfriend AS t2 ON t1.name = t2.friend GROUP BY t2.name",
        "schema": "CREATE TABLE Person (name TEXT, age NUMBER); CREATE TABLE PersonFriend (friend TEXT, year NUMBER, name TEXT);"
      },
      {
        "question": "Who has the highest?",
        "query": "SELECT t2.name , avg(t1.age) FROM person AS t1 JOIN personfriend AS t2 ON t1.name = t2.friend GROUP BY t2.name ORDER BY avg(t1.age) DESC LIMIT 1",
        "schema": "CREATE TABLE Person (age NUMBER, name TEXT); CREATE TABLE PersonFriend (year NUMBER, friend TEXT, name TEXT);"
      }
    ],
    [
      {
        "question": "Show all cities alphabetically.",
        "query": "SELECT city FROM person ORDER BY city",
        "schema": "CREATE TABLE Person (name TEXT, city TEXT);"
      },
      {
        "question": "How many people live in Austin?",
        "query": "SELECT count(*) FROM person WHERE city = 'austin'",
        "schema": "CREATE TABLE Person (name TEXT, city TEXT);"
      },
      {
        "question": "Who is friends with them?",
        "query": "SELECT name FROM personfriend WHERE friend IN (SELECT name FROM person WHERE city = 'austin')",
        "schema": "CREATE TABLE Person (city TEXT, job TEXT, name TEXT); CREATE TABLE PersonFriend (name TEXT, friend TEXT);"
      },
      {
        "question": "How many people are not friends with them?",
        "query": "SELECT count(DISTINCT name) FROM personfriend WHERE friend NOT IN (SELECT name FROM person WHERE city = 'Austin')",
        "schema": "CREATE TABLE Person (city TEXT, job TEXT, name TEXT); CREATE TABLE PersonFriend (name TEXT, friend TEXT);"
      }
    ]
  ],
  "browser_web": [
    [
      {
        "question": "What are the names and market shares of browsers?",
        "query": "SELECT name, market_share FROM browser",
        "schema": "CREATE TABLE browser (name TEXT, market_share NUMBER, id NUMBER);"
      },
      {
        "question": "What is the name of the browser with the maximum market share?",
        "query": "SELECT name FROM browser ORDER BY market_share DESC LIMIT 1",
        "schema": "CREATE TABLE browser (id NUMBER, market_share NUMBER, name TEXT);"
      },
      {
        "question": "What is the maximum, minimum and average market share of the listed browsers?",
        "query": "SELECT max(market_share) , min(market_share) , avg(market_share) FROM browser",
        "schema": "CREATE TABLE browser (market_share NUMBER, id NUMBER, name TEXT);"
      }
    ],
    [
      {
        "question": "Which browsers are compatible with CProxy?",
        "query": "SELECT t1.name FROM browser AS t1 JOIN accelerator_compatible_browser AS t2 ON t1.id = t2.browser_id JOIN web_client_accelerator AS t3 ON t2.accelerator_id = t3.id WHERE t3.name = 'CProxy'",
        "schema": "CREATE TABLE Web_client_accelerator (name TEXT, Client TEXT, id NUMBER); CREATE TABLE accelerator_compatible_browser (accelerator_id NUMBER, browser_id NUMBER); CREATE TABLE browser (name TEXT, id NUMBER);"
      },
      {
        "question": "Which of those became compatible after year 1998?",
        "query": "SELECT t1.name FROM browser AS t1 JOIN accelerator_compatible_browser AS t2 ON t1.id = t2.browser_id JOIN web_client_accelerator AS t3 ON t2.accelerator_id = t3.id WHERE t3.name = 'CProxy' AND t2.compatible_since_year > 1998",
        "schema": "CREATE TABLE browser (name TEXT, id NUMBER); CREATE TABLE Web_client_accelerator (id NUMBER, Client TEXT, name TEXT); CREATE TABLE accelerator_compatible_browser (accelerator_id NUMBER, compatible_since_year NUMBER, browser_id NUMBER);"
      }
    ],
    [
      {
        "question": "Which accelerators are compatible with at least one browser?",
        "query": "SELECT name FROM web_client_accelerator WHERE id IN (SELECT accelerator_id FROM accelerator_compatible_browser)",
        "schema": "CREATE TABLE browser (id NUMBER); CREATE TABLE accelerator_compatible_browser (browser_id NUMBER, accelerator_id NUMBER); CREATE TABLE Web_client_accelerator (Client TEXT, name TEXT, id NUMBER);"
      },
      {
        "question": "Which are compatible with none?",
        "query": "SELECT name FROM web_client_accelerator WHERE id NOT IN (SELECT accelerator_id FROM accelerator_compatible_browser)",
        "schema": "CREATE TABLE Web_client_accelerator (id NUMBER, Client TEXT, name TEXT); CREATE TABLE browser (id NUMBER, name TEXT); CREATE TABLE accelerator_compatible_browser (accelerator_id NUMBER, browser_id NUMBER);"
      },
      {
        "question": "What are the ids and names of the web accelerators that are compatible with two or more browsers?",
        "query": "SELECT t1.id , t1.name FROM web_client_accelerator AS t1 JOIN accelerator_compatible_browser AS t2 ON t2.accelerator_id = t1.id GROUP BY t1.id HAVING count(*) >= 2",
        "schema": "CREATE TABLE browser (name TEXT, id NUMBER); CREATE TABLE Web_client_accelerator (id NUMBER, name TEXT, Client TEXT); CREATE TABLE accelerator_compatible_browser (browser_id NUMBER, accelerator_id NUMBER);"
      }
    ],
    [
      {
        "question": "Which browsers are compatible with some accelerator(s)?",
        "query": "SELECT name FROM browser WHERE id IN (SELECT browser_id FROM accelerator_compatible_browser)",
        "schema": "CREATE TABLE accelerator_compatible_browser (accelerator_id NUMBER, browser_id NUMBER); CREATE TABLE browser (name TEXT, id NUMBER); CREATE TABLE Web_client_accelerator (name TEXT, id NUMBER);"
      },
      {
        "question": "Which is compatible with the most?",
        "query": "SELECT t1.id , t1.name FROM browser AS t1 JOIN accelerator_compatible_browser AS t2 ON t1.id = t2.browser_id GROUP BY t1.id ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE accelerator_compatible_browser (accelerator_id NUMBER, browser_id NUMBER); CREATE TABLE browser (id NUMBER, name TEXT); CREATE TABLE Web_client_accelerator (name TEXT, id NUMBER);"
      }
    ],
    [
      {
        "question": "How many times did CACHEbox and Internet Explorer become compatible?",
        "query": "SELECT count(*) FROM accelerator_compatible_browser AS t1 JOIN browser AS t2 ON t1.browser_id = t2.id JOIN web_client_accelerator AS t3 ON t1.accelerator_id = t3.id WHERE t3.name = 'CACHEbox' AND t2.name = 'Internet Explorer'",
        "schema": "CREATE TABLE Web_client_accelerator (name TEXT, id NUMBER); CREATE TABLE browser (id NUMBER, name TEXT); CREATE TABLE accelerator_compatible_browser (compatible_since_year NUMBER, browser_id NUMBER, accelerator_id NUMBER);"
      },
      {
        "question": "What year did they become compatible?",
        "query": "SELECT t1.compatible_since_year FROM accelerator_compatible_browser AS t1 JOIN browser AS t2 ON t1.browser_id = t2.id JOIN web_client_accelerator AS t3 ON t1.accelerator_id = t3.id WHERE t3.name = 'CACHEbox' AND t2.name = 'Internet Explorer'",
        "schema": "CREATE TABLE Web_client_accelerator (name TEXT, id NUMBER, Client TEXT); CREATE TABLE accelerator_compatible_browser (accelerator_id NUMBER, browser_id NUMBER, compatible_since_year NUMBER); CREATE TABLE browser (name TEXT, id NUMBER);"
      }
    ],
    [
      {
        "question": "Which accelerator ids are not compatible with any browsers?",
        "query": "SELECT id FROM web_client_accelerator WHERE id NOT IN ( SELECT accelerator_id FROM accelerator_compatible_browser );",
        "schema": "CREATE TABLE Web_client_accelerator (Client TEXT, name TEXT, id NUMBER); CREATE TABLE accelerator_compatible_browser (accelerator_id NUMBER, browser_id NUMBER); CREATE TABLE browser (id NUMBER);"
      },
      {
        "question": "Count those.",
        "query": "SELECT count(*) FROM web_client_accelerator WHERE id NOT IN ( SELECT accelerator_id FROM accelerator_compatible_browser );",
        "schema": "CREATE TABLE Web_client_accelerator (Client TEXT, id NUMBER, name TEXT); CREATE TABLE browser (id NUMBER); CREATE TABLE accelerator_compatible_browser (browser_id NUMBER, accelerator_id NUMBER);"
      }
    ],
    [
      {
        "question": "Which browsers have market share greater than 15?",
        "query": "SELECT name FROM browser WHERE market_share > 15",
        "schema": "CREATE TABLE browser (id NUMBER, name TEXT, market_share NUMBER);"
      },
      {
        "question": "Which of those are compatible with some accelerator?",
        "query": "SELECT name FROM browser WHERE market_share > 15 AND id IN (SELECT browser_id FROM accelerator_compatible_browser)",
        "schema": "CREATE TABLE accelerator_compatible_browser (accelerator_id NUMBER, browser_id NUMBER); CREATE TABLE Web_client_accelerator (id NUMBER, name TEXT); CREATE TABLE browser (name TEXT, id NUMBER, market_share NUMBER);"
      },
      {
        "question": "What distinct accelerator names are compatible with the browswers that have market share higher than 15?",
        "query": "SELECT DISTINCT t1.name FROM web_client_accelerator AS t1 JOIN accelerator_compatible_browser AS t2 ON t2.accelerator_id = t1.id JOIN browser AS t3 ON t2.browser_id = t3.id WHERE t3.market_share > 15;",
        "schema": "CREATE TABLE Web_client_accelerator (id NUMBER, name TEXT); CREATE TABLE accelerator_compatible_browser (browser_id NUMBER, accelerator_id NUMBER); CREATE TABLE browser (id NUMBER, name TEXT, market_share NUMBER);"
      }
    ],
    [
      {
        "question": "Which browser ids are compatible with CACHEbox?",
        "query": "SELECT t1.id FROM web_client_accelerator AS t1 JOIN accelerator_compatible_browser AS t2 ON t2.accelerator_id = t1.id WHERE t1.name = 'CACHEbox'",
        "schema": "CREATE TABLE accelerator_compatible_browser (accelerator_id NUMBER, browser_id NUMBER); CREATE TABLE browser (name TEXT, id NUMBER); CREATE TABLE Web_client_accelerator (name TEXT, id NUMBER);"
      },
      {
        "question": "Name those browsers.",
        "query": "SELECT t3.name FROM web_client_accelerator AS t1 JOIN accelerator_compatible_browser AS t2 ON t2.accelerator_id = t1.id JOIN browser AS t3 ON t2.browser_id = t3.id WHERE t1.name = 'CACHEbox'",
        "schema": "CREATE TABLE accelerator_compatible_browser (browser_id NUMBER, accelerator_id NUMBER); CREATE TABLE Web_client_accelerator (Client TEXT, name TEXT, id NUMBER); CREATE TABLE browser (id NUMBER, name TEXT);"
      },
      {
        "question": "Intersect that with those compatible with Fasterfox.",
        "query": "SELECT t3.name FROM web_client_accelerator AS t1 JOIN accelerator_compatible_browser AS t2 ON t2.accelerator_id = t1.id JOIN browser AS t3 ON t2.browser_id = t3.id WHERE t1.name = 'CACHEbox' INTERSECT SELECT t3.name FROM web_client_accelerator AS t1 JOIN accelerator_compatible_browser AS t2 ON t2.accelerator_id = t1.id JOIN browser AS t3 ON t2.browser_id = t3.id WHERE t1.name = 'Fasterfox'",
        "schema": "CREATE TABLE accelerator_compatible_browser (accelerator_id NUMBER, browser_id NUMBER); CREATE TABLE browser (name TEXT, id NUMBER); CREATE TABLE Web_client_accelerator (id NUMBER, Client TEXT, name TEXT);"
      }
    ],
    [
      {
        "question": "Which accelerator ids are not compatible with Opera?",
        "query": "SELECT id FROM web_client_accelerator WHERE id NOT IN (SELECT t1.accelerator_id FROM accelerator_compatible_browser AS t1 JOIN browser AS t2 ON t1.browser_id = t2.id WHERE t2.name = 'Opera')",
        "schema": "CREATE TABLE browser (id NUMBER); CREATE TABLE accelerator_compatible_browser (accelerator_id NUMBER, browser_id NUMBER); CREATE TABLE Web_client_accelerator (id NUMBER, Client TEXT, Operating_system TEXT);"
      },
      {
        "question": "For these, show the names and supporting operating systems.",
        "query": "SELECT name , operating_system FROM web_client_accelerator EXCEPT SELECT t1.name , t1.operating_system FROM web_client_accelerator AS t1 JOIN accelerator_compatible_browser AS t2 ON t2.accelerator_id = t1.id JOIN browser AS t3 ON t2.browser_id = t3.id WHERE t3.name = 'Opera'",
        "schema": "CREATE TABLE browser (name TEXT, id NUMBER); CREATE TABLE accelerator_compatible_browser (accelerator_id NUMBER, browser_id NUMBER); CREATE TABLE Web_client_accelerator (Operating_system TEXT, name TEXT, Client TEXT, id NUMBER);"
      }
    ],
    [
      {
        "question": "Which accelerator name contains substring \"Free\"?",
        "query": "SELECT name FROM web_client_accelerator WHERE name LIKE \"%Free%\"",
        "schema": "CREATE TABLE accelerator_compatible_browser (accelerator_id NUMBER); CREATE TABLE Web_client_accelerator (Operating_system TEXT, Client TEXT, name TEXT, id NUMBER); CREATE TABLE browser (name TEXT);"
      },
      {
        "question": "How about \"Opera\"",
        "query": "SELECT name FROM web_client_accelerator WHERE name LIKE \"%Opera%\"",
        "schema": "CREATE TABLE Web_client_accelerator (name TEXT, Client TEXT, Operating_system TEXT, id NUMBER); CREATE TABLE browser (name TEXT); CREATE TABLE accelerator_compatible_browser (accelerator_id NUMBER);"
      }
    ]
  ],
  "roller_coaster": [
    [
      {
        "question": "What are the status of all the roller coasters?",
        "query": "SELECT status FROM roller_coaster",
        "schema": "CREATE TABLE roller_coaster (Roller_Coaster_ID NUMBER, Name TEXT, Status TEXT);"
      },
      {
        "question": "Give me the status of those longer than 3300.",
        "query": "SELECT status FROM roller_coaster WHERE LENGTH > 3300",
        "schema": "CREATE TABLE roller_coaster (Status TEXT, Height NUMBER, Name TEXT, Roller_Coaster_ID NUMBER, Length NUMBER);"
      },
      {
        "question": "Also show those higher than 100.",
        "query": "SELECT status FROM roller_coaster WHERE LENGTH > 3300 OR height > 100",
        "schema": "CREATE TABLE roller_coaster (Length NUMBER, Name TEXT, Height NUMBER, Status TEXT, Roller_Coaster_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What are name of all the roller coasters?",
        "query": "SELECT name FROM roller_coaster",
        "schema": "CREATE TABLE roller_coaster (Roller_Coaster_ID NUMBER, Name TEXT);"
      },
      {
        "question": "Which of them is the longest?",
        "query": "SELECT name FROM roller_coaster ORDER BY LENGTH DESC LIMIT 1",
        "schema": "CREATE TABLE roller_coaster (Length NUMBER, Roller_Coaster_ID NUMBER, Height NUMBER, Name TEXT, Speed TEXT);"
      },
      {
        "question": "Give me its speed.",
        "query": "SELECT speed FROM roller_coaster ORDER BY LENGTH DESC LIMIT 1",
        "schema": "CREATE TABLE roller_coaster (Name TEXT, Length NUMBER, Height NUMBER, Speed TEXT, Roller_Coaster_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What are name of all the roller coasters?",
        "query": "SELECT name FROM roller_coaster",
        "schema": "CREATE TABLE roller_coaster (Name TEXT, Roller_Coaster_ID NUMBER);"
      },
      {
        "question": "Give me their status.",
        "query": "SELECT name,status FROM roller_coaster",
        "schema": "CREATE TABLE roller_coaster (Status TEXT, Roller_Coaster_ID NUMBER, Name TEXT);"
      },
      {
        "question": "What is the most common status?",
        "query": "SELECT status FROM roller_coaster GROUP BY status ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE roller_coaster (Name TEXT, Roller_Coaster_ID NUMBER, Status TEXT);"
      }
    ],
    [
      {
        "question": "What are name of all the roller coasters?",
        "query": "SELECT name FROM roller_coaster",
        "schema": "CREATE TABLE roller_coaster (Roller_Coaster_ID NUMBER, Name TEXT);"
      },
      {
        "question": "Give me their status.",
        "query": "SELECT name,status FROM roller_coaster",
        "schema": "CREATE TABLE roller_coaster (Status TEXT, Name TEXT, Roller_Coaster_ID NUMBER);"
      },
      {
        "question": "Show me the those that are shared by more than two roller coasters.",
        "query": "SELECT status FROM roller_coaster GROUP BY status HAVING count(*) > 2",
        "schema": "CREATE TABLE roller_coaster (Status TEXT, Roller_Coaster_ID NUMBER, Name TEXT);"
      }
    ],
    [
      {
        "question": "What are name of all the roller coasters?",
        "query": "SELECT name FROM roller_coaster",
        "schema": "CREATE TABLE roller_coaster (Name TEXT, Roller_Coaster_ID NUMBER);"
      },
      {
        "question": "Give me their speed.",
        "query": "SELECT name,speed FROM roller_coaster",
        "schema": "CREATE TABLE roller_coaster (Name TEXT, Roller_Coaster_ID NUMBER, Speed TEXT);"
      },
      {
        "question": "Which one is the highest?",
        "query": "SELECT name,speed FROM roller_coaster ORDER BY speed DESC LIMIT 1",
        "schema": "CREATE TABLE roller_coaster (Speed TEXT, Roller_Coaster_ID NUMBER, Name TEXT, Height NUMBER);"
      },
      {
        "question": "Show me its park.",
        "query": "SELECT park FROM roller_coaster ORDER BY speed DESC LIMIT 1",
        "schema": "CREATE TABLE roller_coaster (Height NUMBER, Park TEXT, Roller_Coaster_ID NUMBER, Name TEXT, Speed TEXT);"
      }
    ],
    [
      {
        "question": "What countries are there that have roller coasters?",
        "query": "SELECT t1.name FROM country AS t1 JOIN roller_coaster AS t2 ON t1.country_id = t2.country_id",
        "schema": "CREATE TABLE roller_coaster (Name TEXT, Country_ID NUMBER, Roller_Coaster_ID NUMBER); CREATE TABLE country (Country_ID NUMBER, Name TEXT);"
      },
      {
        "question": "Give me those that have more than one roller coaster.",
        "query": "SELECT t1.name FROM country AS t1 JOIN roller_coaster AS t2 ON t1.country_id = t2.country_id GROUP BY t1.name HAVING count(*) > 1",
        "schema": "CREATE TABLE country (Name TEXT, Country_ID NUMBER); CREATE TABLE roller_coaster (Country_ID NUMBER, Name TEXT, Roller_Coaster_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What are name of all the roller coasters?",
        "query": "SELECT name FROM roller_coaster",
        "schema": "CREATE TABLE roller_coaster (Roller_Coaster_ID NUMBER, Name TEXT);"
      },
      {
        "question": "Give me their height.",
        "query": "SELECT name,height FROM roller_coaster",
        "schema": "CREATE TABLE roller_coaster (Length NUMBER, Name TEXT, Height NUMBER, Roller_Coaster_ID NUMBER);"
      },
      {
        "question": "Which one is the highest?",
        "query": "SELECT name,height FROM roller_coaster ORDER BY height DESC LIMIT 1",
        "schema": "CREATE TABLE roller_coaster (Roller_Coaster_ID NUMBER, Length NUMBER, Name TEXT, Height NUMBER);"
      },
      {
        "question": "Show me the name and population of the country that has it.",
        "query": "SELECT t1.name , t1.population FROM country AS t1 JOIN roller_coaster AS t2 ON t1.country_id = t2.country_id ORDER BY t2.height DESC LIMIT 1",
        "schema": "CREATE TABLE roller_coaster (Name TEXT, Roller_Coaster_ID NUMBER, Height NUMBER, Country_ID NUMBER, Length NUMBER); CREATE TABLE country (Languages TEXT, Population NUMBER, Name TEXT, Country_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show the names of countries that have more than one roller coaster.",
        "query": "SELECT t1.name FROM country AS t1 JOIN roller_coaster AS t2 ON t1.country_id = t2.country_id",
        "schema": "CREATE TABLE country (Name TEXT, Country_ID NUMBER); CREATE TABLE roller_coaster (Country_ID NUMBER, Name TEXT);"
      },
      {
        "question": "What are the speed of all roller coasters?",
        "query": "SELECT name, speed FROM roller_coaster",
        "schema": "CREATE TABLE roller_coaster (Speed TEXT, Roller_Coaster_ID NUMBER, Name TEXT, Country_ID NUMBER); CREATE TABLE country (Name TEXT, Country_ID NUMBER);"
      },
      {
        "question": "Give me a average of them in term of different countries.",
        "query": "SELECT t1.name FROM country AS t1 JOIN roller_coaster AS t2 ON t1.country_id = t2.country_id",
        "schema": "CREATE TABLE country (Name TEXT, Country_ID NUMBER); CREATE TABLE roller_coaster (Roller_Coaster_ID NUMBER, Country_ID NUMBER, Speed TEXT, Name TEXT);"
      }
    ],
    [
      {
        "question": "What are name of all the roller coasters?",
        "query": "SELECT name FROM roller_coaster",
        "schema": "CREATE TABLE roller_coaster (Roller_Coaster_ID NUMBER, Name TEXT);"
      },
      {
        "question": "Give me their length.",
        "query": "SELECT name,LENGTH FROM roller_coaster",
        "schema": "CREATE TABLE roller_coaster (Name TEXT, Roller_Coaster_ID NUMBER, Length NUMBER, Height NUMBER);"
      },
      {
        "question": "Show me the roller coasters that are longer than 3000.",
        "query": "SELECT name,LENGTH FROM roller_coaster WHERE LENGTH > 3000",
        "schema": "CREATE TABLE roller_coaster (Name TEXT, Roller_Coaster_ID NUMBER, Height NUMBER, Length NUMBER);"
      },
      {
        "question": "How many countries do not have any of them?",
        "query": "SELECT count(*) FROM country WHERE country_id NOT IN ( SELECT country_id FROM roller_coaster WHERE LENGTH > 3000 )",
        "schema": "CREATE TABLE roller_coaster (Name TEXT, Height NUMBER, Country_ID NUMBER, Length NUMBER, Roller_Coaster_ID NUMBER); CREATE TABLE country (Country_ID NUMBER, Languages TEXT, Name TEXT);"
      }
    ]
  ],
  "dorm_1": [
    [
      {
        "question": "how many students are below age 25?",
        "query": "SELECT count(*) FROM student WHERE age < 25",
        "schema": "CREATE TABLE Student (Sex TEXT, StuID NUMBER, LName TEXT, Age NUMBER); CREATE TABLE Lives_in (stuid NUMBER);"
      },
      {
        "question": "how many of them are female (sex is F)?",
        "query": "SELECT count(*) FROM student WHERE sex = 'F' AND age < 25",
        "schema": "CREATE TABLE Lives_in (stuid NUMBER); CREATE TABLE Student (StuID NUMBER, LName TEXT, Age NUMBER, Sex TEXT);"
      }
    ],
    [
      {
        "question": "what are the codes of all different cities where students are from?",
        "query": "SELECT DISTINCT city_code FROM student",
        "schema": "CREATE TABLE Lives_in (stuid NUMBER); CREATE TABLE Student (city_code TEXT, StuID NUMBER);"
      },
      {
        "question": "how many students are living in city PHL?",
        "query": "SELECT count(*) FROM student WHERE city_code = 'PHL'",
        "schema": "CREATE TABLE Student (city_code TEXT, StuID NUMBER); CREATE TABLE Lives_in (stuid NUMBER);"
      },
      {
        "question": "among them, how many are between ages 20 and 25?",
        "query": "SELECT count(*) FROM student WHERE city_code = 'PHL' AND age BETWEEN 20 AND 25",
        "schema": "CREATE TABLE Lives_in (stuid NUMBER); CREATE TABLE Student (StuID NUMBER, city_code TEXT, Age NUMBER);"
      },
      {
        "question": "show their first names.",
        "query": "SELECT fname FROM student WHERE city_code = 'PHL' AND age BETWEEN 20 AND 25",
        "schema": "CREATE TABLE Student (StuID NUMBER, Age NUMBER, city_code TEXT, LName TEXT, Fname TEXT); CREATE TABLE Lives_in (stuid NUMBER);"
      }
    ],
    [
      {
        "question": "what are the different gender types of all dorms?",
        "query": "SELECT DISTINCT gender FROM dorm",
        "schema": "CREATE TABLE Student (Sex TEXT, StuID NUMBER); CREATE TABLE Dorm (gender TEXT, dormid NUMBER);"
      },
      {
        "question": "show student capacity of the dorms with gender X.",
        "query": "SELECT student_capacity FROM dorm WHERE gender = 'X'",
        "schema": "CREATE TABLE Student (Sex TEXT, StuID NUMBER); CREATE TABLE Lives_in (stuid NUMBER); CREATE TABLE Dorm (dormid NUMBER, student_capacity NUMBER, gender TEXT);"
      },
      {
        "question": "what is their average capacity?",
        "query": "SELECT avg(student_capacity) FROM dorm WHERE gender = 'X'",
        "schema": "CREATE TABLE Lives_in (stuid NUMBER); CREATE TABLE Student (StuID NUMBER, Sex TEXT); CREATE TABLE Dorm (dormid NUMBER, student_capacity NUMBER, gender TEXT);"
      },
      {
        "question": "how about the total as well?",
        "query": "SELECT avg(student_capacity) , sum(student_capacity) FROM dorm WHERE gender = 'X'",
        "schema": "CREATE TABLE Lives_in (stuid NUMBER); CREATE TABLE Student (StuID NUMBER, Sex TEXT); CREATE TABLE Dorm (student_capacity NUMBER, gender TEXT, dormid NUMBER);"
      }
    ],
    [
      {
        "question": "list all dorm amenities.",
        "query": "SELECT amenity_name FROM dorm_amenity",
        "schema": "CREATE TABLE Dorm (dormid NUMBER); CREATE TABLE Has_amenity (amenid NUMBER, dormid NUMBER); CREATE TABLE Dorm_amenity (amenity_name TEXT, amenid NUMBER);"
      },
      {
        "question": "Find the names of dorms that have some of these amenities.",
        "query": "SELECT dorm_name FROM dorm WHERE dormid IN (SELECT dormid FROM has_amenity)",
        "schema": "CREATE TABLE Has_amenity (dormid NUMBER, amenid NUMBER); CREATE TABLE Dorm (dormid NUMBER, dorm_name TEXT); CREATE TABLE Dorm_amenity (amenity_name TEXT, amenid NUMBER);"
      },
      {
        "question": "Find the names of dorms that do not have any amenities.",
        "query": "SELECT dorm_name FROM dorm WHERE dormid NOT IN (SELECT dormid FROM has_amenity)",
        "schema": "CREATE TABLE Dorm_amenity (amenity_name TEXT, amenid NUMBER); CREATE TABLE Has_amenity (amenid NUMBER, dormid NUMBER); CREATE TABLE Dorm (dormid NUMBER, dorm_name TEXT);"
      }
    ],
    [
      {
        "question": "show the names of all dorms.",
        "query": "SELECT dorm_name FROM dorm",
        "schema": "CREATE TABLE Student (LName TEXT, StuID NUMBER, Fname TEXT); CREATE TABLE Lives_in (dormid NUMBER, stuid NUMBER); CREATE TABLE Dorm (dormid NUMBER, dorm_name TEXT);"
      },
      {
        "question": "just list the dorm whose name has substring \u2018Donor\u2019.",
        "query": "SELECT dorm_name FROM dorm WHERE dorm_name LIKE '%Donor%'",
        "schema": "CREATE TABLE Lives_in (dormid NUMBER, stuid NUMBER); CREATE TABLE Dorm (dormid NUMBER, dorm_name TEXT); CREATE TABLE Student (LName TEXT, Fname TEXT, StuID NUMBER);"
      },
      {
        "question": "what is its capacity and gender type?",
        "query": "SELECT student_capacity, gender FROM dorm WHERE dorm_name LIKE '%Donor%'",
        "schema": "CREATE TABLE Student (StuID NUMBER, LName TEXT, Sex TEXT, Fname TEXT); CREATE TABLE Dorm (student_capacity NUMBER, gender TEXT, dorm_name TEXT, dormid NUMBER); CREATE TABLE Lives_in (dormid NUMBER, stuid NUMBER);"
      }
    ],
    [
      {
        "question": "Find the name and gender type of all dorms.",
        "query": "SELECT dorm_name, gender FROM dorm",
        "schema": "CREATE TABLE Student (LName TEXT, Fname TEXT, Sex TEXT); CREATE TABLE Lives_in (stuid NUMBER); CREATE TABLE Dorm (dorm_name TEXT, gender TEXT, dormid NUMBER);"
      },
      {
        "question": "which of them have a capacity greater than 300?",
        "query": "SELECT dorm_name, gender FROM dorm WHERE student_capacity > 300",
        "schema": "CREATE TABLE Student (Sex TEXT, LName TEXT, Fname TEXT); CREATE TABLE Dorm (gender TEXT, dorm_name TEXT, dormid NUMBER, student_capacity NUMBER); CREATE TABLE Lives_in (stuid NUMBER);"
      },
      {
        "question": "also show the dorms with a capacity less than 100.",
        "query": "SELECT dorm_name, gender FROM dorm WHERE student_capacity > 300 OR student_capacity < 100",
        "schema": "CREATE TABLE Student (LName TEXT, StuID NUMBER, Sex TEXT, Fname TEXT); CREATE TABLE Lives_in (stuid NUMBER); CREATE TABLE Dorm (dormid NUMBER, dorm_name TEXT, gender TEXT, student_capacity NUMBER);"
      }
    ],
    [
      {
        "question": "show the info of all students.",
        "query": "SELECT * FROM student",
        "schema": "CREATE TABLE Dorm (dormid NUMBER); CREATE TABLE Student (StuID NUMBER, LName TEXT, Age NUMBER, Fname TEXT, Sex TEXT); CREATE TABLE Lives_in (stuid NUMBER);"
      },
      {
        "question": "how many distinct majors are there?",
        "query": "SELECT count(DISTINCT major) FROM student",
        "schema": "CREATE TABLE Lives_in (stuid NUMBER); CREATE TABLE Dorm (dormid NUMBER); CREATE TABLE Student (Fname TEXT, Major NUMBER, Sex TEXT, LName TEXT, StuID NUMBER, Age NUMBER);"
      },
      {
        "question": "also count the number of different cities.",
        "query": "SELECT count(DISTINCT major), count(DISTINCT city_code) FROM student",
        "schema": "CREATE TABLE Lives_in (stuid NUMBER); CREATE TABLE Dorm (dormid NUMBER); CREATE TABLE Student (Fname TEXT, Major NUMBER, Sex TEXT, StuID NUMBER, LName TEXT, Age NUMBER, city_code TEXT);"
      }
    ],
    [
      {
        "question": "what are the names of all dorms?",
        "query": "SELECT dorm_name FROM dorm",
        "schema": "CREATE TABLE Student (Fname TEXT, StuID NUMBER, LName TEXT); CREATE TABLE Lives_in (dormid NUMBER, stuid NUMBER); CREATE TABLE Dorm (dormid NUMBER, dorm_name TEXT);"
      },
      {
        "question": "what are all of the different amenities?",
        "query": "SELECT amenity_name FROM dorm_amenity",
        "schema": "CREATE TABLE Lives_in (dormid NUMBER, stuid NUMBER); CREATE TABLE Has_amenity (amenid NUMBER, dormid NUMBER); CREATE TABLE Student (StuID NUMBER, Fname TEXT, LName TEXT); CREATE TABLE Dorm_amenity (amenity_name TEXT, amenid NUMBER); CREATE TABLE Dorm (dormid NUMBER, dorm_name TEXT);"
      },
      {
        "question": "Find the names of dorms that have a TV Lounge.",
        "query": "SELECT t1.dorm_name FROM dorm AS t1 JOIN has_amenity AS t2 ON t1.dormid = t2.dormid JOIN dorm_amenity AS t3 ON t2.amenid = t3.amenid WHERE t3.amenity_name = 'TV Lounge'",
        "schema": "CREATE TABLE Lives_in (dormid NUMBER, stuid NUMBER); CREATE TABLE Dorm (dorm_name TEXT, dormid NUMBER); CREATE TABLE Dorm_amenity (amenity_name TEXT, amenid NUMBER); CREATE TABLE Student (Fname TEXT, LName TEXT, StuID NUMBER); CREATE TABLE Has_amenity (dormid NUMBER, amenid NUMBER);"
      },
      {
        "question": "how about those that also have a Study Room?",
        "query": "SELECT t1.dorm_name FROM dorm AS t1 JOIN has_amenity AS t2 ON t1.dormid = t2.dormid JOIN dorm_amenity AS t3 ON t2.amenid = t3.amenid WHERE t3.amenity_name = 'TV Lounge' INTERSECT SELECT t1.dorm_name FROM dorm AS t1 JOIN has_amenity AS t2 ON t1.dormid = t2.dormid JOIN dorm_amenity AS t3 ON t2.amenid = t3.amenid WHERE t3.amenity_name = 'Study Room'",
        "schema": "CREATE TABLE Student (Fname TEXT, StuID NUMBER, LName TEXT); CREATE TABLE Lives_in (stuid NUMBER, dormid NUMBER); CREATE TABLE Dorm_amenity (amenity_name TEXT, amenid NUMBER); CREATE TABLE Dorm (dormid NUMBER, dorm_name TEXT); CREATE TABLE Has_amenity (amenid NUMBER, dormid NUMBER);"
      }
    ],
    [
      {
        "question": "find the names of dorms that do not have a Study Room.",
        "query": "SELECT dorm_name FROM dorm EXCEPT SELECT t1.dorm_name FROM dorm AS t1 JOIN has_amenity AS t2 ON t1.dormid = t2.dormid JOIN dorm_amenity AS t3 ON t2.amenid = t3.amenid WHERE t3.amenity_name = 'Study Room'",
        "schema": "CREATE TABLE Student (StuID NUMBER, Fname TEXT); CREATE TABLE Has_amenity (dormid NUMBER, amenid NUMBER); CREATE TABLE Dorm (dorm_name TEXT, dormid NUMBER); CREATE TABLE Dorm_amenity (amenid NUMBER, amenity_name TEXT); CREATE TABLE Lives_in (stuid NUMBER, dormid NUMBER);"
      },
      {
        "question": "among them, which ones have a TV Lounge?",
        "query": "SELECT t1.dorm_name FROM dorm AS t1 JOIN has_amenity AS t2 ON t1.dormid = t2.dormid JOIN dorm_amenity AS t3 ON t2.amenid = t3.amenid WHERE t3.amenity_name = 'TV Lounge' EXCEPT SELECT t1.dorm_name FROM dorm AS t1 JOIN has_amenity AS t2 ON t1.dormid = t2.dormid JOIN dorm_amenity AS t3 ON t2.amenid = t3.amenid WHERE t3.amenity_name = 'Study Room'",
        "schema": "CREATE TABLE Has_amenity (amenid NUMBER, dormid NUMBER); CREATE TABLE Dorm_amenity (amenid NUMBER, amenity_name TEXT); CREATE TABLE Student (Fname TEXT, StuID NUMBER); CREATE TABLE Dorm (dorm_name TEXT, dormid NUMBER); CREATE TABLE Lives_in (dormid NUMBER, stuid NUMBER);"
      }
    ],
    [
      {
        "question": "how many female students are living in the city of code BAL?",
        "query": "SELECT count(*) FROM student WHERE sex = 'F' AND city_code = 'BAL'",
        "schema": "CREATE TABLE Lives_in (stuid NUMBER); CREATE TABLE Student (Sex TEXT, StuID NUMBER, city_code TEXT);"
      },
      {
        "question": "how many male students are less than 20 years old?",
        "query": "SELECT count(*) FROM student WHERE sex = 'M' AND age < 20",
        "schema": "CREATE TABLE Student (Sex TEXT, StuID NUMBER, city_code TEXT, Age NUMBER, LName TEXT); CREATE TABLE Lives_in (stuid NUMBER);"
      },
      {
        "question": "what is the total number of students in these two groups?",
        "query": "SELECT count(*) FROM (SELECT * FROM student WHERE sex = 'M' AND age < 20 UNION SELECT * FROM student WHERE sex = 'F' AND city_code = 'BAL')",
        "schema": "CREATE TABLE Lives_in (stuid NUMBER); CREATE TABLE Student (Sex TEXT, StuID NUMBER, LName TEXT, Age NUMBER, city_code TEXT);"
      },
      {
        "question": "what are their last names?",
        "query": "SELECT lname FROM student WHERE sex = 'F' AND city_code = 'BAL' UNION SELECT lname FROM student WHERE sex = 'M' AND age < 20",
        "schema": "CREATE TABLE Student (Sex TEXT, StuID NUMBER, Fname TEXT, Age NUMBER, city_code TEXT, LName TEXT); CREATE TABLE Lives_in (stuid NUMBER);"
      }
    ],
    [
      {
        "question": "find the total student capacity of all dorms.",
        "query": "SELECT sum(student_capacity) FROM dorm",
        "schema": "CREATE TABLE Lives_in (stuid NUMBER, dormid NUMBER); CREATE TABLE Dorm (student_capacity NUMBER, dorm_name TEXT, dormid NUMBER); CREATE TABLE Student (StuID NUMBER);"
      },
      {
        "question": "which dorm has the largest capacity?",
        "query": "SELECT * FROM dorm ORDER BY student_capacity",
        "schema": "CREATE TABLE Lives_in (stuid NUMBER, dormid NUMBER); CREATE TABLE Dorm (dormid NUMBER, dorm_name TEXT, student_capacity NUMBER); CREATE TABLE Student (StuID NUMBER);"
      },
      {
        "question": "just list its name.",
        "query": "SELECT dorm_name FROM dorm ORDER BY student_capacity DESC LIMIT 1",
        "schema": "CREATE TABLE Student (StuID NUMBER); CREATE TABLE Lives_in (stuid NUMBER, dormid NUMBER); CREATE TABLE Dorm (student_capacity NUMBER, dormid NUMBER, dorm_name TEXT);"
      }
    ],
    [
      {
        "question": "how many students are there?",
        "query": "SELECT count(*) FROM student",
        "schema": "CREATE TABLE Student (LName TEXT, Sex TEXT, Age NUMBER, Fname TEXT, Advisor NUMBER, city_code TEXT, Major NUMBER, StuID NUMBER); CREATE TABLE Lives_in (dormid NUMBER, stuid NUMBER); CREATE TABLE Dorm (student_capacity NUMBER, dormid NUMBER);"
      },
      {
        "question": "which cities are they living in?",
        "query": "SELECT DISTINCT city_code FROM student",
        "schema": "CREATE TABLE Student (Fname TEXT, Sex TEXT, Advisor NUMBER, StuID NUMBER, city_code TEXT, Age NUMBER, LName TEXT, Major NUMBER); CREATE TABLE Lives_in (stuid NUMBER, dormid NUMBER); CREATE TABLE Dorm (dormid NUMBER, student_capacity NUMBER);"
      },
      {
        "question": "Find the code of the city where most of them are living.",
        "query": "SELECT city_code FROM student GROUP BY city_code ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Dorm (dormid NUMBER, student_capacity NUMBER); CREATE TABLE Student (LName TEXT, StuID NUMBER, Major NUMBER, city_code TEXT, Age NUMBER, Fname TEXT, Sex TEXT, Advisor NUMBER); CREATE TABLE Lives_in (dormid NUMBER, stuid NUMBER);"
      }
    ],
    [
      {
        "question": "show the first and last name of all students.",
        "query": "SELECT fname , lname FROM student",
        "schema": "CREATE TABLE Student (Fname TEXT, StuID NUMBER, LName TEXT);"
      },
      {
        "question": "what are their ages?",
        "query": "SELECT fname , lname, age FROM student",
        "schema": "CREATE TABLE Student (Age NUMBER, LName TEXT, Fname TEXT, StuID NUMBER);"
      },
      {
        "question": "what is the average age?",
        "query": "SELECT avg(age) FROM student",
        "schema": "CREATE TABLE Student (Age NUMBER, Fname TEXT, StuID NUMBER, LName TEXT);"
      },
      {
        "question": "list the students whose age is younger than that. List their first and last names.",
        "query": "SELECT fname , lname FROM student WHERE age < (SELECT avg(age) FROM student)",
        "schema": "CREATE TABLE Student (StuID NUMBER, Fname TEXT, Sex TEXT, Age NUMBER, LName TEXT);"
      }
    ],
    [
      {
        "question": "show the codes of all different cities where students are living.",
        "query": "SELECT DISTINCT city_code FROM student",
        "schema": "CREATE TABLE Lives_in (stuid NUMBER); CREATE TABLE Student (StuID NUMBER, city_code TEXT);"
      },
      {
        "question": "find the number of students who are not living in the city with code HKG.",
        "query": "SELECT count(*) FROM student WHERE city_code != 'HKG'",
        "schema": "CREATE TABLE Student (StuID NUMBER, city_code TEXT); CREATE TABLE Lives_in (stuid NUMBER);"
      },
      {
        "question": "what are their first and last names?",
        "query": "SELECT fname, lname FROM student WHERE city_code != 'HKG'",
        "schema": "CREATE TABLE Lives_in (stuid NUMBER); CREATE TABLE Student (LName TEXT, StuID NUMBER, city_code TEXT, Fname TEXT);"
      },
      {
        "question": "sort the result by their ages.",
        "query": "SELECT fname, lname FROM student WHERE city_code != 'HKG' ORDER BY age",
        "schema": "CREATE TABLE Lives_in (stuid NUMBER); CREATE TABLE Student (city_code TEXT, LName TEXT, StuID NUMBER, Fname TEXT, Age NUMBER);"
      }
    ],
    [
      {
        "question": "list the info of all dorms.",
        "query": "SELECT * FROM dorm",
        "schema": "CREATE TABLE Lives_in (stuid NUMBER, dormid NUMBER); CREATE TABLE Dorm (dormid NUMBER, dorm_name TEXT); CREATE TABLE Student (StuID NUMBER);"
      },
      {
        "question": "what is the capacity of Anonymous Donor Hall?",
        "query": "SELECT student_capacity FROM dorm WHERE dorm_name = 'Anonymous Donor Hall'",
        "schema": "CREATE TABLE Student (StuID NUMBER); CREATE TABLE Lives_in (dormid NUMBER, stuid NUMBER); CREATE TABLE Has_amenity (amenid NUMBER); CREATE TABLE Dorm_amenity (amenity_name TEXT, amenid NUMBER); CREATE TABLE Dorm (student_capacity NUMBER, dormid NUMBER, dorm_name TEXT);"
      },
      {
        "question": "List all of the amenities that it has.",
        "query": "SELECT t1.amenity_name FROM dorm_amenity AS t1 JOIN has_amenity AS t2 ON t2.amenid = t1.amenid JOIN dorm AS t3 ON t2.dormid = t3.dormid WHERE t3.dorm_name = 'Anonymous Donor Hall'",
        "schema": "CREATE TABLE Dorm (dorm_name TEXT, student_capacity NUMBER, dormid NUMBER); CREATE TABLE Has_amenity (amenid NUMBER, dormid NUMBER); CREATE TABLE Lives_in (stuid NUMBER, dormid NUMBER); CREATE TABLE Dorm_amenity (amenity_name TEXT, amenid NUMBER); CREATE TABLE Student (LName TEXT, StuID NUMBER, Fname TEXT);"
      },
      {
        "question": "sort the results in alphabetic order.",
        "query": "SELECT t1.amenity_name FROM dorm_amenity AS t1 JOIN has_amenity AS t2 ON t2.amenid = t1.amenid JOIN dorm AS t3 ON t2.dormid = t3.dormid WHERE t3.dorm_name = 'Anonymous Donor Hall' ORDER BY t1.amenity_name",
        "schema": "CREATE TABLE Dorm_amenity (amenity_name TEXT, amenid NUMBER); CREATE TABLE Lives_in (stuid NUMBER, dormid NUMBER); CREATE TABLE Dorm (student_capacity NUMBER, dormid NUMBER, dorm_name TEXT); CREATE TABLE Has_amenity (amenid NUMBER, dormid NUMBER); CREATE TABLE Student (Fname TEXT, LName TEXT, StuID NUMBER);"
      }
    ],
    [
      {
        "question": "find the total number of dorms.",
        "query": "SELECT count(*) FROM dorm",
        "schema": "CREATE TABLE Student (StuID NUMBER); CREATE TABLE Dorm (dorm_name TEXT, dormid NUMBER); CREATE TABLE Lives_in (dormid NUMBER, stuid NUMBER);"
      },
      {
        "question": "what is the total student capacity of all dorms?",
        "query": "SELECT sum(student_capacity) FROM dorm",
        "schema": "CREATE TABLE Student (StuID NUMBER); CREATE TABLE Dorm (dormid NUMBER, dorm_name TEXT, student_capacity NUMBER); CREATE TABLE Lives_in (dormid NUMBER, stuid NUMBER);"
      },
      {
        "question": "how about for each gender?",
        "query": "SELECT sum(student_capacity) , gender FROM dorm GROUP BY gender",
        "schema": "CREATE TABLE Dorm (student_capacity NUMBER, dorm_name TEXT, dormid NUMBER, gender TEXT); CREATE TABLE Lives_in (dormid NUMBER, stuid NUMBER); CREATE TABLE Student (StuID NUMBER, Sex TEXT);"
      },
      {
        "question": "also show the number of dorms for each gender.",
        "query": "SELECT count(*) , sum(student_capacity) , gender FROM dorm GROUP BY gender",
        "schema": "CREATE TABLE Dorm (dorm_name TEXT, gender TEXT, dormid NUMBER, student_capacity NUMBER); CREATE TABLE Student (StuID NUMBER, Sex TEXT); CREATE TABLE Lives_in (dormid NUMBER, stuid NUMBER);"
      }
    ],
    [
      {
        "question": "how many students of each gender are there?",
        "query": "SELECT count(*), sex FROM student GROUP BY sex",
        "schema": "CREATE TABLE Student (LName TEXT, StuID NUMBER, Sex TEXT); CREATE TABLE Dorm (gender TEXT);"
      },
      {
        "question": "Find the average and oldest age for each gender.",
        "query": "SELECT avg(age) , max(age) , sex FROM student GROUP BY sex",
        "schema": "CREATE TABLE Dorm (gender TEXT); CREATE TABLE Student (Sex TEXT, StuID NUMBER, Age NUMBER, LName TEXT);"
      }
    ],
    [
      {
        "question": "how many different cities are there?",
        "query": "SELECT count(DISTINCT city_code) FROM student",
        "schema": "CREATE TABLE Student (StuID NUMBER, city_code TEXT);"
      },
      {
        "question": "find the number of students living in each city.",
        "query": "SELECT count(*), city_code FROM student GROUP BY city_code",
        "schema": "CREATE TABLE Lives_in (stuid NUMBER); CREATE TABLE Student (city_code TEXT, StuID NUMBER);"
      },
      {
        "question": "also find the average age of students living in each city.",
        "query": "SELECT count(*) , avg(age) , city_code FROM student GROUP BY city_code",
        "schema": "CREATE TABLE Lives_in (stuid NUMBER); CREATE TABLE Student (Age NUMBER, city_code TEXT, StuID NUMBER);"
      }
    ],
    [
      {
        "question": "find the number of students living in each city.",
        "query": "SELECT count(*), city_code FROM student GROUP BY city_code",
        "schema": "CREATE TABLE Lives_in (stuid NUMBER); CREATE TABLE Student (city_code TEXT, StuID NUMBER);"
      },
      {
        "question": "how many of them are male (with sex M)?",
        "query": "SELECT count(*), city_code FROM student WHERE sex = 'M' GROUP BY city_code",
        "schema": "CREATE TABLE Student (StuID NUMBER, city_code TEXT, Sex TEXT); CREATE TABLE Lives_in (stuid NUMBER);"
      },
      {
        "question": "Include their average age as well.",
        "query": "SELECT count(*) , avg(age) , city_code FROM student WHERE sex = 'M' GROUP BY city_code",
        "schema": "CREATE TABLE Lives_in (stuid NUMBER); CREATE TABLE Student (Age NUMBER, city_code TEXT, StuID NUMBER, Sex TEXT);"
      }
    ],
    [
      {
        "question": "Find the number of students living in each city.",
        "query": "SELECT count(*), city_code FROM student GROUP BY city_code",
        "schema": "CREATE TABLE Lives_in (stuid NUMBER); CREATE TABLE Student (StuID NUMBER, Age NUMBER, city_code TEXT);"
      },
      {
        "question": "just show the results of cities that have more than one student living in it.",
        "query": "SELECT count(*) , city_code FROM student GROUP BY city_code HAVING count(*) > 1",
        "schema": "CREATE TABLE Lives_in (stuid NUMBER); CREATE TABLE Student (StuID NUMBER, city_code TEXT, Age NUMBER);"
      }
    ],
    [
      {
        "question": "list all of the different majors.",
        "query": "SELECT DISTINCT major FROM student",
        "schema": "CREATE TABLE Student (Major NUMBER, StuID NUMBER);"
      },
      {
        "question": "which major has the fewest students?",
        "query": "SELECT major FROM student GROUP BY major ORDER BY count(*) LIMIT 1",
        "schema": "CREATE TABLE Student (StuID NUMBER, Major NUMBER); CREATE TABLE Dorm (student_capacity NUMBER);"
      },
      {
        "question": "what is the most popular major?",
        "query": "SELECT major FROM student GROUP BY major ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Dorm (student_capacity NUMBER); CREATE TABLE Student (StuID NUMBER, Major NUMBER);"
      },
      {
        "question": "how many students are not this major?",
        "query": "SELECT count(*) FROM student WHERE major != (SELECT major FROM student GROUP BY major ORDER BY count(*) DESC LIMIT 1)",
        "schema": "CREATE TABLE Student (LName TEXT, StuID NUMBER, Major NUMBER); CREATE TABLE Dorm (student_capacity NUMBER);"
      },
      {
        "question": "show their first and last names.",
        "query": "SELECT fname , lname FROM student WHERE major != (SELECT major FROM student GROUP BY major ORDER BY count(*) DESC LIMIT 1)",
        "schema": "CREATE TABLE Dorm (student_capacity NUMBER); CREATE TABLE Student (Fname TEXT, Major NUMBER, LName TEXT, StuID NUMBER);"
      }
    ],
    [
      {
        "question": "what is the average age for each gender?",
        "query": "SELECT avg(age) , sex FROM student GROUP BY sex",
        "schema": "CREATE TABLE Student (Age NUMBER, Sex TEXT, StuID NUMBER); CREATE TABLE Dorm (gender TEXT);"
      },
      {
        "question": "find the number of students whose age is older than the average age of these two groups.",
        "query": "SELECT count(*) , sex FROM student WHERE age > (SELECT avg(age) FROM student) GROUP BY sex",
        "schema": "CREATE TABLE Student (StuID NUMBER, Sex TEXT, Age NUMBER); CREATE TABLE Dorm (gender TEXT);"
      }
    ],
    [
      {
        "question": "what are the names of all of the dorms?",
        "query": "SELECT dorm_name FROM dorm",
        "schema": "CREATE TABLE Student (LName TEXT, StuID NUMBER, Fname TEXT); CREATE TABLE Dorm (dorm_name TEXT, dormid NUMBER); CREATE TABLE Lives_in (stuid NUMBER, dormid NUMBER);"
      },
      {
        "question": "how many students are living in each dorm? Group by names of dorms.",
        "query": "SELECT count(*), t3.dorm_name FROM student AS t1 JOIN lives_in AS t2 ON t1.stuid = t2.stuid JOIN dorm AS t3 ON t3.dormid = t2.dormid GROUP BY t3.dorm_name",
        "schema": "CREATE TABLE Lives_in (dormid NUMBER, stuid NUMBER); CREATE TABLE Dorm (student_capacity NUMBER, dorm_name TEXT, dormid NUMBER); CREATE TABLE Student (StuID NUMBER, Fname TEXT, LName TEXT, city_code TEXT);"
      },
      {
        "question": "find the average age of students living in each dorm.",
        "query": "SELECT avg(t1.age) , t3.dorm_name FROM student AS t1 JOIN lives_in AS t2 ON t1.stuid = t2.stuid JOIN dorm AS t3 ON t3.dormid = t2.dormid GROUP BY t3.dorm_name",
        "schema": "CREATE TABLE Dorm (dorm_name TEXT, student_capacity NUMBER, dormid NUMBER); CREATE TABLE Student (LName TEXT, StuID NUMBER, Age NUMBER, Fname TEXT, city_code TEXT); CREATE TABLE Lives_in (dormid NUMBER, stuid NUMBER);"
      }
    ],
    [
      {
        "question": "find the names of dorms that can accommodate more than 100 students.",
        "query": "SELECT dorm_name FROM dorm WHERE student_capacity > 100",
        "schema": "CREATE TABLE Dorm (dorm_name TEXT, dormid NUMBER, student_capacity NUMBER); CREATE TABLE Student (StuID NUMBER, Fname TEXT, LName TEXT);"
      },
      {
        "question": "what is the average capacity of these dorms?",
        "query": "SELECT avg(student_capacity) FROM dorm WHERE student_capacity > 100",
        "schema": "CREATE TABLE Student (LName TEXT, Fname TEXT, StuID NUMBER); CREATE TABLE Dorm (student_capacity NUMBER, dorm_name TEXT, dormid NUMBER);"
      },
      {
        "question": "Find the number of amenities for each of these dorms.",
        "query": "SELECT count(*) , t1.dormid FROM dorm AS t1 JOIN has_amenity AS t2 ON t1.dormid = t2.dormid WHERE t1.student_capacity > 100 GROUP BY t1.dormid",
        "schema": "CREATE TABLE Dorm (student_capacity NUMBER, dorm_name TEXT, dormid NUMBER); CREATE TABLE Has_amenity (amenid NUMBER, dormid NUMBER); CREATE TABLE Student (StuID NUMBER, Fname TEXT, LName TEXT); CREATE TABLE Dorm_amenity (amenid NUMBER, amenity_name TEXT);"
      }
    ],
    [
      {
        "question": "what are the names of all dorms?",
        "query": "SELECT dorm_name FROM dorm",
        "schema": "CREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT); CREATE TABLE Dorm (dormid NUMBER, dorm_name TEXT); CREATE TABLE Lives_in (dormid NUMBER, stuid NUMBER);"
      },
      {
        "question": "how many students are living in each dorm? Group by names of dorms.",
        "query": "SELECT count(*), t3.dorm_name FROM student AS t1 JOIN lives_in AS t2 ON t1.stuid = t2.stuid JOIN dorm AS t3 ON t3.dormid = t2.dormid GROUP BY t3.dorm_name",
        "schema": "CREATE TABLE Lives_in (stuid NUMBER, dormid NUMBER); CREATE TABLE Dorm (dorm_name TEXT, dormid NUMBER, student_capacity NUMBER); CREATE TABLE Student (Fname TEXT, LName TEXT, city_code TEXT, StuID NUMBER);"
      },
      {
        "question": "how many students are older than 20 years old in each dorm?",
        "query": "SELECT count(*) , t3.dorm_name FROM student AS t1 JOIN lives_in AS t2 ON t1.stuid = t2.stuid JOIN dorm AS t3 ON t3.dormid = t2.dormid WHERE t1.age > 20 GROUP BY t3.dorm_name",
        "schema": "CREATE TABLE Dorm (student_capacity NUMBER, dorm_name TEXT, dormid NUMBER); CREATE TABLE Lives_in (stuid NUMBER, dormid NUMBER); CREATE TABLE Student (Fname TEXT, LName TEXT, StuID NUMBER, Age NUMBER, city_code TEXT);"
      }
    ],
    [
      {
        "question": "how many students are living in Smith Hall?",
        "query": "SELECT count(*) FROM student AS t1 JOIN lives_in AS t2 ON t1.stuid = t2.stuid JOIN dorm AS t3 ON t3.dormid = t2.dormid WHERE t3.dorm_name = 'Smith Hall'",
        "schema": "CREATE TABLE Has_amenity (dormid NUMBER, amenid NUMBER); CREATE TABLE Lives_in (stuid NUMBER, dormid NUMBER); CREATE TABLE Student (StuID NUMBER, city_code TEXT); CREATE TABLE Dorm (dormid NUMBER, dorm_name TEXT); CREATE TABLE Dorm_amenity (amenid NUMBER, amenity_name TEXT);"
      },
      {
        "question": "show their last names and room numbers.",
        "query": "SELECT t1.lname, t2.room_number FROM student AS t1 JOIN lives_in AS t2 ON t1.stuid = t2.stuid JOIN dorm AS t3 ON t3.dormid = t2.dormid WHERE t3.dorm_name = 'Smith Hall'",
        "schema": "CREATE TABLE Dorm_amenity (amenid NUMBER, amenity_name TEXT); CREATE TABLE Student (StuID NUMBER, LName TEXT, city_code TEXT, Fname TEXT); CREATE TABLE Dorm (dormid NUMBER, dorm_name TEXT); CREATE TABLE Lives_in (room_number NUMBER, stuid NUMBER, dormid NUMBER); CREATE TABLE Has_amenity (dormid NUMBER, amenid NUMBER);"
      },
      {
        "question": "what are their first names?",
        "query": "SELECT t1.fname FROM student AS t1 JOIN lives_in AS t2 ON t1.stuid = t2.stuid JOIN dorm AS t3 ON t3.dormid = t2.dormid WHERE t3.dorm_name = 'Smith Hall'",
        "schema": "CREATE TABLE Has_amenity (dormid NUMBER, amenid NUMBER); CREATE TABLE Student (Fname TEXT, LName TEXT, city_code TEXT, StuID NUMBER); CREATE TABLE Dorm_amenity (amenity_name TEXT, amenid NUMBER); CREATE TABLE Lives_in (room_number NUMBER, stuid NUMBER, dormid NUMBER); CREATE TABLE Dorm (dormid NUMBER, dorm_name TEXT);"
      }
    ],
    [
      {
        "question": "show the name and capacity of all dorms.",
        "query": "SELECT dorm_name, student_capacity FROM dorm",
        "schema": "CREATE TABLE Dorm (student_capacity NUMBER, dormid NUMBER, dorm_name TEXT);"
      },
      {
        "question": "find the name of the dorm with the largest capacity.",
        "query": "SELECT dorm_name FROM dorm ORDER BY student_capacity DESC LIMIT 1",
        "schema": "CREATE TABLE Dorm (dorm_name TEXT, student_capacity NUMBER, dormid NUMBER); CREATE TABLE Student (StuID NUMBER);"
      },
      {
        "question": "how many students are living in there?",
        "query": "SELECT count(*) FROM student AS t1 JOIN lives_in AS t2 ON t1.stuid = t2.stuid JOIN dorm AS t3 ON t3.dormid = t2.dormid WHERE t3.student_capacity = (SELECT max(student_capacity) FROM dorm)",
        "schema": "CREATE TABLE Dorm (dorm_name TEXT, student_capacity NUMBER, dormid NUMBER); CREATE TABLE Lives_in (stuid NUMBER, dormid NUMBER); CREATE TABLE Student (city_code TEXT, StuID NUMBER);"
      },
      {
        "question": "what is the average age of these students?",
        "query": "SELECT avg(t1.age) FROM student AS t1 JOIN lives_in AS t2 ON t1.stuid = t2.stuid JOIN dorm AS t3 ON t3.dormid = t2.dormid WHERE t3.student_capacity = (SELECT max(student_capacity) FROM dorm)",
        "schema": "CREATE TABLE Lives_in (dormid NUMBER, stuid NUMBER); CREATE TABLE Dorm (student_capacity NUMBER, dormid NUMBER, dorm_name TEXT); CREATE TABLE Student (LName TEXT, StuID NUMBER, Age NUMBER, city_code TEXT);"
      }
    ],
    [
      {
        "question": "list the names of all male dorms (with gender M).",
        "query": "SELECT dorm_name FROM dorm WHERE gender = 'M'",
        "schema": "CREATE TABLE Lives_in (stuid NUMBER, dormid NUMBER); CREATE TABLE Student (Fname TEXT, LName TEXT, StuID NUMBER, Sex TEXT); CREATE TABLE Dorm (dorm_name TEXT, gender TEXT, dormid NUMBER);"
      },
      {
        "question": "how many are there?",
        "query": "SELECT count(*) FROM dorm WHERE gender = 'M'",
        "schema": "CREATE TABLE Student (Fname TEXT, LName TEXT, StuID NUMBER, Sex TEXT); CREATE TABLE Dorm (dorm_name TEXT, gender TEXT, dormid NUMBER); CREATE TABLE Lives_in (dormid NUMBER, stuid NUMBER);"
      },
      {
        "question": "Find the total number of students living in these dorms.",
        "query": "SELECT count(*) FROM student AS t1 JOIN lives_in AS t2 ON t1.stuid = t2.stuid JOIN dorm AS t3 ON t3.dormid = t2.dormid WHERE t3.gender = 'M'",
        "schema": "CREATE TABLE Lives_in (dormid NUMBER, stuid NUMBER); CREATE TABLE Student (StuID NUMBER, city_code TEXT, Fname TEXT, Sex TEXT, LName TEXT); CREATE TABLE Dorm (dormid NUMBER, dorm_name TEXT, gender TEXT);"
      }
    ],
    [
      {
        "question": "what is the capacity of Smith Hall dorm?",
        "query": "SELECT student_capacity FROM dorm WHERE dorm_name = 'Smith Hall'",
        "schema": "CREATE TABLE Dorm_amenity (amenid NUMBER, amenity_name TEXT); CREATE TABLE Student (StuID NUMBER); CREATE TABLE Has_amenity (amenid NUMBER, dormid NUMBER); CREATE TABLE Dorm (dorm_name TEXT, dormid NUMBER, student_capacity NUMBER);"
      },
      {
        "question": "how many students are living in there?",
        "query": "SELECT count(*) FROM student AS t1 JOIN lives_in AS t2 ON t1.stuid = t2.stuid JOIN dorm AS t3 ON t3.dormid = t2.dormid WHERE t3.dorm_name = 'Smith Hall'",
        "schema": "CREATE TABLE Lives_in (stuid NUMBER, dormid NUMBER); CREATE TABLE Dorm (student_capacity NUMBER, dorm_name TEXT, dormid NUMBER); CREATE TABLE Student (Fname TEXT, LName TEXT, city_code TEXT, StuID NUMBER); CREATE TABLE Dorm_amenity (amenity_name TEXT, amenid NUMBER); CREATE TABLE Has_amenity (dormid NUMBER, amenid NUMBER);"
      },
      {
        "question": "how many of them are female?",
        "query": "SELECT count(*) FROM student AS t1 JOIN lives_in AS t2 ON t1.stuid = t2.stuid JOIN dorm AS t3 ON t3.dormid = t2.dormid WHERE t3.dorm_name = 'Smith Hall' AND t1.sex = 'F'",
        "schema": "CREATE TABLE Has_amenity (amenid NUMBER, dormid NUMBER); CREATE TABLE Dorm_amenity (amenity_name TEXT, amenid NUMBER); CREATE TABLE Lives_in (stuid NUMBER, dormid NUMBER); CREATE TABLE Student (Fname TEXT, StuID NUMBER, LName TEXT, Sex TEXT, city_code TEXT); CREATE TABLE Dorm (gender TEXT, dorm_name TEXT, dormid NUMBER, student_capacity NUMBER);"
      }
    ],
    [
      {
        "question": "how many students are living in Smith Hall dorm?",
        "query": "SELECT count(*) FROM student AS t1 JOIN lives_in AS t2 ON t1.stuid = t2.stuid JOIN dorm AS t3 ON t3.dormid = t2.dormid WHERE t3.dorm_name = 'Smith Hall'",
        "schema": "CREATE TABLE Has_amenity (amenid NUMBER, dormid NUMBER); CREATE TABLE Lives_in (dormid NUMBER, stuid NUMBER); CREATE TABLE Dorm_amenity (amenity_name TEXT, amenid NUMBER); CREATE TABLE Dorm (dormid NUMBER, dorm_name TEXT); CREATE TABLE Student (StuID NUMBER, city_code TEXT);"
      },
      {
        "question": "Find the number of amenities it has.",
        "query": "SELECT count(*) FROM dorm AS t1 JOIN has_amenity AS t2 ON t1.dormid = t2.dormid JOIN dorm_amenity AS t3 ON t2.amenid = t3.amenid WHERE t1.dorm_name = 'Smith Hall'",
        "schema": "CREATE TABLE Dorm (dormid NUMBER, dorm_name TEXT); CREATE TABLE Student (city_code TEXT, StuID NUMBER); CREATE TABLE Dorm_amenity (amenity_name TEXT, amenid NUMBER); CREATE TABLE Has_amenity (dormid NUMBER, amenid NUMBER); CREATE TABLE Lives_in (stuid NUMBER, dormid NUMBER);"
      },
      {
        "question": "what are these amenities?",
        "query": "SELECT t3.amenity_name FROM dorm AS t1 JOIN has_amenity AS t2 ON t1.dormid = t2.dormid JOIN dorm_amenity AS t3 ON t2.amenid = t3.amenid WHERE t1.dorm_name = 'Smith Hall'",
        "schema": "CREATE TABLE Lives_in (stuid NUMBER, dormid NUMBER); CREATE TABLE Student (city_code TEXT, StuID NUMBER); CREATE TABLE Has_amenity (amenid NUMBER, dormid NUMBER); CREATE TABLE Dorm (dorm_name TEXT, dormid NUMBER); CREATE TABLE Dorm_amenity (amenity_name TEXT, amenid NUMBER);"
      }
    ],
    [
      {
        "question": "What are the amenities in Smith Hall?",
        "query": "SELECT t3.amenity_name FROM dorm AS t1 JOIN has_amenity AS t2 ON t1.dormid = t2.dormid JOIN dorm_amenity AS t3 ON t2.amenid = t3.amenid WHERE t1.dorm_name = 'Smith Hall'",
        "schema": "CREATE TABLE Dorm (dorm_name TEXT, dormid NUMBER); CREATE TABLE Has_amenity (dormid NUMBER, amenid NUMBER); CREATE TABLE Dorm_amenity (amenid NUMBER, amenity_name TEXT);"
      },
      {
        "question": "order the results by amenity names.",
        "query": "SELECT t3.amenity_name FROM dorm AS t1 JOIN has_amenity AS t2 ON t1.dormid = t2.dormid JOIN dorm_amenity AS t3 ON t2.amenid = t3.amenid WHERE t1.dorm_name = 'Smith Hall' ORDER BY t3.amenity_name",
        "schema": "CREATE TABLE Dorm_amenity (amenid NUMBER, amenity_name TEXT); CREATE TABLE Has_amenity (amenid NUMBER, dormid NUMBER); CREATE TABLE Dorm (dormid NUMBER, dorm_name TEXT);"
      }
    ],
    [
      {
        "question": "show the names of all different amenities.",
        "query": "SELECT amenity_name FROM dorm_amenity",
        "schema": "CREATE TABLE Has_amenity (dormid NUMBER, amenid NUMBER); CREATE TABLE Dorm_amenity (amenity_name TEXT, amenid NUMBER);"
      },
      {
        "question": "find the total number of each amenity in all of the dorms.",
        "query": "SELECT count(*), t2.amenid FROM dorm_amenity AS t1 JOIN has_amenity AS t2 ON t1.amenid = t2.amenid GROUP BY t2.amenid",
        "schema": "CREATE TABLE Dorm (dormid NUMBER, dorm_name TEXT); CREATE TABLE Dorm_amenity (amenid NUMBER, amenity_name TEXT); CREATE TABLE Has_amenity (dormid NUMBER, amenid NUMBER);"
      },
      {
        "question": "which one is the most common amenity used in all dorms? List its name.",
        "query": "SELECT t1.amenity_name FROM dorm_amenity AS t1 JOIN has_amenity AS t2 ON t1.amenid = t2.amenid GROUP BY t2.amenid ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Dorm_amenity (amenity_name TEXT, amenid NUMBER); CREATE TABLE Has_amenity (amenid NUMBER, dormid NUMBER); CREATE TABLE Dorm (dormid NUMBER, dorm_name TEXT);"
      }
    ],
    [
      {
        "question": "what is the id of the dorm that has the most amenities?",
        "query": "SELECT t3.dormid FROM dorm AS t3 JOIN has_amenity AS t4 ON t3.dormid = t4.dormid JOIN dorm_amenity AS t5 ON t4.amenid = t5.amenid GROUP BY t3.dormid ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Lives_in (stuid NUMBER); CREATE TABLE Dorm (dormid NUMBER, dorm_name TEXT); CREATE TABLE Has_amenity (amenid NUMBER, dormid NUMBER); CREATE TABLE Student (StuID NUMBER); CREATE TABLE Dorm_amenity (amenid NUMBER, amenity_name TEXT);"
      },
      {
        "question": "what is its name?",
        "query": "SELECT t3.dorm_name FROM dorm AS t3 JOIN has_amenity AS t4 ON t3.dormid = t4.dormid JOIN dorm_amenity AS t5 ON t4.amenid = t5.amenid GROUP BY t3.dormid ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Dorm (dormid NUMBER, dorm_name TEXT); CREATE TABLE Lives_in (stuid NUMBER); CREATE TABLE Dorm_amenity (amenity_name TEXT, amenid NUMBER); CREATE TABLE Student (StuID NUMBER); CREATE TABLE Has_amenity (dormid NUMBER, amenid NUMBER);"
      },
      {
        "question": "how many students are living in that dorm?",
        "query": "SELECT count(*) FROM student AS t1 JOIN lives_in AS t2 ON t1.stuid = t2.stuid WHERE t2.dormid IN (SELECT t3.dormid FROM dorm AS t3 JOIN has_amenity AS t4 ON t3.dormid = t4.dormid JOIN dorm_amenity AS t5 ON t4.amenid = t5.amenid GROUP BY t3.dormid ORDER BY count(*) DESC LIMIT 1)",
        "schema": "CREATE TABLE Student (Age NUMBER, LName TEXT, StuID NUMBER, city_code TEXT, Fname TEXT); CREATE TABLE Dorm (student_capacity NUMBER, dormid NUMBER, dorm_name TEXT); CREATE TABLE Lives_in (dormid NUMBER, stuid NUMBER); CREATE TABLE Dorm_amenity (amenid NUMBER, amenity_name TEXT); CREATE TABLE Has_amenity (dormid NUMBER, amenid NUMBER);"
      },
      {
        "question": "find their first names.",
        "query": "SELECT t1.fname FROM student AS t1 JOIN lives_in AS t2 ON t1.stuid = t2.stuid WHERE t2.dormid IN (SELECT t3.dormid FROM dorm AS t3 JOIN has_amenity AS t4 ON t3.dormid = t4.dormid JOIN dorm_amenity AS t5 ON t4.amenid = t5.amenid GROUP BY t3.dormid ORDER BY count(*) DESC LIMIT 1)",
        "schema": "CREATE TABLE Dorm_amenity (amenity_name TEXT, amenid NUMBER); CREATE TABLE Lives_in (stuid NUMBER, dormid NUMBER); CREATE TABLE Has_amenity (amenid NUMBER, dormid NUMBER); CREATE TABLE Dorm (dorm_name TEXT, dormid NUMBER, student_capacity NUMBER); CREATE TABLE Student (Age NUMBER, StuID NUMBER, LName TEXT, Fname TEXT, city_code TEXT);"
      }
    ],
    [
      {
        "question": "find the number of amenities in each dorm.",
        "query": "SELECT t1.dormid , count(*) FROM dorm AS t1 JOIN has_amenity AS t2 ON t1.dormid = t2.dormid JOIN dorm_amenity AS t3 ON t2.amenid = t3.amenid GROUP BY t2.dormid",
        "schema": "CREATE TABLE Student (StuID NUMBER); CREATE TABLE Dorm (dorm_name TEXT, dormid NUMBER); CREATE TABLE Has_amenity (dormid NUMBER, amenid NUMBER); CREATE TABLE Dorm_amenity (amenid NUMBER, amenity_name TEXT); CREATE TABLE Lives_in (stuid NUMBER);"
      },
      {
        "question": "which dorm has the fewest amenities? List its name.",
        "query": "SELECT t1.dorm_name FROM dorm AS t1 JOIN has_amenity AS t2 ON t1.dormid = t2.dormid JOIN dorm_amenity AS t3 ON t2.amenid = t3.amenid GROUP BY t2.dormid ORDER BY count(*) LIMIT 1",
        "schema": "CREATE TABLE Dorm (dorm_name TEXT, dormid NUMBER); CREATE TABLE Dorm_amenity (amenity_name TEXT, amenid NUMBER); CREATE TABLE Lives_in (stuid NUMBER); CREATE TABLE Student (StuID NUMBER); CREATE TABLE Has_amenity (dormid NUMBER, amenid NUMBER);"
      },
      {
        "question": "what is its capacity?",
        "query": "SELECT t1.student_capacity FROM dorm AS t1 JOIN has_amenity AS t2 ON t1.dormid = t2.dormid JOIN dorm_amenity AS t3 ON t2.amenid = t3.amenid GROUP BY t2.dormid ORDER BY count(*) LIMIT 1",
        "schema": "CREATE TABLE Dorm_amenity (amenid NUMBER, amenity_name TEXT); CREATE TABLE Student (StuID NUMBER); CREATE TABLE Lives_in (stuid NUMBER); CREATE TABLE Has_amenity (dormid NUMBER, amenid NUMBER); CREATE TABLE Dorm (dorm_name TEXT, student_capacity NUMBER, dormid NUMBER);"
      }
    ],
    [
      {
        "question": "how many dorms have a TV Lounge?",
        "query": "SELECT count(*) FROM dorm AS t1 JOIN has_amenity AS t2 ON t1.dormid = t2.dormid JOIN dorm_amenity AS t3 ON t2.amenid = t3.amenid WHERE t3.amenity_name = 'TV Lounge'",
        "schema": "CREATE TABLE Dorm_amenity (amenity_name TEXT, amenid NUMBER); CREATE TABLE Has_amenity (dormid NUMBER, amenid NUMBER); CREATE TABLE Dorm (dorm_name TEXT, dormid NUMBER); CREATE TABLE Lives_in (stuid NUMBER, dormid NUMBER); CREATE TABLE Student (StuID NUMBER);"
      },
      {
        "question": "what are their names?",
        "query": "SELECT t1.dorm_name FROM dorm AS t1 JOIN has_amenity AS t2 ON t1.dormid = t2.dormid JOIN dorm_amenity AS t3 ON t2.amenid = t3.amenid WHERE t3.amenity_name = 'TV Lounge'",
        "schema": "CREATE TABLE Dorm_amenity (amenid NUMBER, amenity_name TEXT); CREATE TABLE Has_amenity (dormid NUMBER, amenid NUMBER); CREATE TABLE Student (StuID NUMBER); CREATE TABLE Dorm (dorm_name TEXT, dormid NUMBER); CREATE TABLE Lives_in (dormid NUMBER, stuid NUMBER);"
      },
      {
        "question": "what are the names of dorms that do not have it?",
        "query": "SELECT dorm_name FROM dorm EXCEPT SELECT t1.dorm_name FROM dorm AS t1 JOIN has_amenity AS t2 ON t1.dormid = t2.dormid JOIN dorm_amenity AS t3 ON t2.amenid = t3.amenid WHERE t3.amenity_name = 'TV Lounge'",
        "schema": "CREATE TABLE Has_amenity (amenid NUMBER, dormid NUMBER); CREATE TABLE Student (StuID NUMBER); CREATE TABLE Lives_in (dormid NUMBER, stuid NUMBER); CREATE TABLE Dorm (dormid NUMBER, dorm_name TEXT); CREATE TABLE Dorm_amenity (amenid NUMBER, amenity_name TEXT);"
      }
    ],
    [
      {
        "question": "how many dorms have a TV Lounge?",
        "query": "SELECT count(*) FROM dorm AS t1 JOIN has_amenity AS t2 ON t1.dormid = t2.dormid JOIN dorm_amenity AS t3 ON t2.amenid = t3.amenid WHERE t3.amenity_name = 'TV Lounge'",
        "schema": "CREATE TABLE Lives_in (dormid NUMBER, stuid NUMBER); CREATE TABLE Student (StuID NUMBER); CREATE TABLE Has_amenity (dormid NUMBER, amenid NUMBER); CREATE TABLE Dorm (dormid NUMBER, dorm_name TEXT); CREATE TABLE Dorm_amenity (amenid NUMBER, amenity_name TEXT);"
      },
      {
        "question": "what is the total capacity of these dorms?",
        "query": "SELECT sum(t1.student_capacity) FROM dorm AS t1 JOIN has_amenity AS t2 ON t1.dormid = t2.dormid JOIN dorm_amenity AS t3 ON t2.amenid = t3.amenid WHERE t3.amenity_name = 'TV Lounge'",
        "schema": "CREATE TABLE Has_amenity (dormid NUMBER, amenid NUMBER); CREATE TABLE Dorm_amenity (amenity_name TEXT, amenid NUMBER); CREATE TABLE Student (StuID NUMBER); CREATE TABLE Lives_in (stuid NUMBER, dormid NUMBER); CREATE TABLE Dorm (student_capacity NUMBER, dormid NUMBER, dorm_name TEXT);"
      },
      {
        "question": "how many students are living in these dorms?",
        "query": "SELECT count(*) FROM student AS t1 JOIN lives_in AS t2 ON t1.stuid = t2.stuid WHERE t2.dormid IN (SELECT t3.dormid FROM has_amenity AS t3 JOIN dorm_amenity AS t4 ON t3.amenid = t4.amenid WHERE t4.amenity_name = 'TV Lounge')",
        "schema": "CREATE TABLE Lives_in (stuid NUMBER, dormid NUMBER, room_number NUMBER); CREATE TABLE Student (Fname TEXT, city_code TEXT, LName TEXT, StuID NUMBER); CREATE TABLE Has_amenity (dormid NUMBER, amenid NUMBER); CREATE TABLE Dorm_amenity (amenity_name TEXT, amenid NUMBER); CREATE TABLE Dorm (dormid NUMBER, student_capacity NUMBER, dorm_name TEXT);"
      },
      {
        "question": "list their first and last names.",
        "query": "SELECT t1.fname , t1.lname FROM student AS t1 JOIN lives_in AS t2 ON t1.stuid = t2.stuid WHERE t2.dormid IN (SELECT t3.dormid FROM has_amenity AS t3 JOIN dorm_amenity AS t4 ON t3.amenid = t4.amenid WHERE t4.amenity_name = 'TV Lounge')",
        "schema": "CREATE TABLE Lives_in (stuid NUMBER, dormid NUMBER, room_number NUMBER); CREATE TABLE Student (Fname TEXT, city_code TEXT, LName TEXT, StuID NUMBER); CREATE TABLE Has_amenity (amenid NUMBER, dormid NUMBER); CREATE TABLE Dorm_amenity (amenid NUMBER, amenity_name TEXT); CREATE TABLE Dorm (dormid NUMBER, student_capacity NUMBER, dorm_name TEXT);"
      }
    ],
    [
      {
        "question": "Find the names of dorms that do not have a TV Lounge.",
        "query": "SELECT dorm_name FROM dorm EXCEPT SELECT t1.dorm_name FROM dorm AS t1 JOIN has_amenity AS t2 ON t1.dormid = t2.dormid JOIN dorm_amenity AS t3 ON t2.amenid = t3.amenid WHERE t3.amenity_name = 'TV Lounge'",
        "schema": "CREATE TABLE Has_amenity (dormid NUMBER, amenid NUMBER); CREATE TABLE Dorm (dorm_name TEXT, dormid NUMBER); CREATE TABLE Dorm_amenity (amenity_name TEXT, amenid NUMBER); CREATE TABLE Student (LName TEXT, Fname TEXT, StuID NUMBER); CREATE TABLE Lives_in (stuid NUMBER);"
      },
      {
        "question": "Find the first name and age of students living in these dorms.",
        "query": "SELECT t1.fname , t1.age FROM student AS t1 JOIN lives_in AS t2 ON t1.stuid = t2.stuid WHERE t2.dormid NOT IN (SELECT t3.dormid FROM has_amenity AS t3 JOIN dorm_amenity AS t4 ON t3.amenid = t4.amenid WHERE t4.amenity_name = 'TV Lounge')",
        "schema": "CREATE TABLE Dorm_amenity (amenid NUMBER, amenity_name TEXT); CREATE TABLE Has_amenity (dormid NUMBER, amenid NUMBER); CREATE TABLE Student (Age NUMBER, city_code TEXT, Fname TEXT, LName TEXT, StuID NUMBER); CREATE TABLE Lives_in (dormid NUMBER, stuid NUMBER); CREATE TABLE Dorm (dorm_name TEXT, dormid NUMBER);"
      }
    ]
  ],
  "cre_Doc_Control_Systems": [
    [
      {
        "question": "Show me all about documents.",
        "query": "SELECT * FROM documents",
        "schema": "CREATE TABLE Circulation_History (document_id NUMBER); CREATE TABLE Ref_Document_Types (document_type_description TEXT, document_type_code TEXT); CREATE TABLE Documents_Mailed (document_id NUMBER); CREATE TABLE Document_Drafts (document_id NUMBER, draft_number NUMBER); CREATE TABLE Employees (employee_id NUMBER); CREATE TABLE Draft_Copies (document_id NUMBER); CREATE TABLE Documents (document_status_code TEXT, document_type_code TEXT, document_id NUMBER);"
      },
      {
        "question": "What document types are there?",
        "query": "SELECT document_type_code FROM ref_document_types;",
        "schema": "CREATE TABLE Document_Drafts (draft_number NUMBER, document_id NUMBER); CREATE TABLE Employees (employee_id NUMBER); CREATE TABLE Circulation_History (document_id NUMBER); CREATE TABLE Documents (document_id NUMBER, document_type_code TEXT, document_status_code TEXT); CREATE TABLE Draft_Copies (document_id NUMBER); CREATE TABLE Ref_Document_Types (document_type_description TEXT, document_type_code TEXT); CREATE TABLE Documents_Mailed (document_id NUMBER);"
      },
      {
        "question": "How about document status codes?",
        "query": "SELECT document_status_code FROM ref_document_status;",
        "schema": "CREATE TABLE Draft_Copies (document_id NUMBER); CREATE TABLE Employees (employee_id NUMBER); CREATE TABLE Documents (document_id NUMBER, document_status_code TEXT, document_type_code TEXT); CREATE TABLE Documents_Mailed (document_id NUMBER); CREATE TABLE Ref_Document_Status (document_status_description TEXT, document_status_code TEXT); CREATE TABLE Document_Drafts (document_id NUMBER, draft_number NUMBER); CREATE TABLE Circulation_History (document_id NUMBER); CREATE TABLE Ref_Document_Types (document_type_description TEXT, document_type_code TEXT);"
      }
    ],
    [
      {
        "question": "How many document status codes there?",
        "query": "SELECT count(document_status_code) FROM ref_document_status;",
        "schema": "CREATE TABLE Employees (employee_id NUMBER); CREATE TABLE Documents (document_id NUMBER, document_status_code TEXT); CREATE TABLE Ref_Document_Status (document_status_code TEXT, document_status_description TEXT);"
      },
      {
        "question": "What are they?",
        "query": "SELECT document_status_code FROM ref_document_status;",
        "schema": "CREATE TABLE Ref_Document_Status (document_status_code TEXT, document_status_description TEXT); CREATE TABLE Employees (employee_id NUMBER); CREATE TABLE Documents (document_status_code TEXT, document_id NUMBER);"
      },
      {
        "question": "What is the description of document status code 'working'?",
        "query": "SELECT document_status_description FROM ref_document_status WHERE document_status_code = \"working\";",
        "schema": "CREATE TABLE Employees (employee_id NUMBER); CREATE TABLE Documents (document_id NUMBER, document_status_code TEXT); CREATE TABLE Ref_Document_Status (document_status_description TEXT, document_status_code TEXT); CREATE TABLE Ref_Document_Types (document_type_code TEXT);"
      }
    ],
    [
      {
        "question": "Show me all about document types.",
        "query": "SELECT * FROM ref_document_types;",
        "schema": "CREATE TABLE Ref_Document_Types (document_type_code TEXT, document_type_description TEXT); CREATE TABLE Documents (document_type_code TEXT, document_id NUMBER);"
      },
      {
        "question": "Show me the descriptions of document types.",
        "query": "SELECT document_type_description FROM ref_document_types;",
        "schema": "CREATE TABLE Ref_Document_Types (document_type_description TEXT, document_type_code TEXT); CREATE TABLE Documents (document_id NUMBER, document_type_code TEXT);"
      },
      {
        "question": "Now, show the document type codes.",
        "query": "SELECT document_type_code FROM ref_document_types;",
        "schema": "CREATE TABLE Documents (document_id NUMBER, document_type_code TEXT); CREATE TABLE Ref_Document_Types (document_type_description TEXT, document_type_code TEXT);"
      }
    ],
    [
      {
        "question": "Show me the shipping agent code of documents?",
        "query": "SELECT shipping_agent_code FROM ref_shipping_agents;",
        "schema": "CREATE TABLE Ref_Shipping_Agents (shipping_agent_name TEXT, shipping_agent_code TEXT); CREATE TABLE Document_Drafts (document_id NUMBER); CREATE TABLE Documents (document_id NUMBER, document_type_code TEXT, shipping_agent_code TEXT);"
      },
      {
        "question": "How about the document type code?",
        "query": "SELECT document_type_code FROM ref_document_types;",
        "schema": "CREATE TABLE Ref_Shipping_Agents (shipping_agent_name TEXT, shipping_agent_code TEXT); CREATE TABLE Document_Drafts (document_id NUMBER); CREATE TABLE Ref_Document_Types (document_type_code TEXT, document_type_description TEXT); CREATE TABLE Documents (document_type_code TEXT, shipping_agent_code TEXT, document_id NUMBER);"
      },
      {
        "question": "Among those, what is the description of document type 'Paper'?",
        "query": "SELECT document_type_description FROM ref_document_types WHERE document_type_code = \"Paper\";",
        "schema": "CREATE TABLE Documents (shipping_agent_code TEXT, document_type_code TEXT, document_id NUMBER); CREATE TABLE Ref_Shipping_Agents (shipping_agent_name TEXT, shipping_agent_description TEXT, shipping_agent_code TEXT); CREATE TABLE Ref_Document_Types (document_type_code TEXT, document_type_description TEXT); CREATE TABLE Document_Drafts (document_id NUMBER);"
      }
    ],
    [
      {
        "question": "What are the shipping agents' codes?",
        "query": "SELECT shipping_agent_code FROM ref_shipping_agents;",
        "schema": "CREATE TABLE Ref_Shipping_Agents (shipping_agent_code TEXT, shipping_agent_name TEXT); CREATE TABLE Documents (shipping_agent_code TEXT);"
      },
      {
        "question": "How about their descriptions?",
        "query": "SELECT shipping_agent_description FROM ref_shipping_agents;",
        "schema": "CREATE TABLE Documents (shipping_agent_code TEXT); CREATE TABLE Ref_Shipping_Agents (shipping_agent_code TEXT, shipping_agent_description TEXT, shipping_agent_name TEXT);"
      },
      {
        "question": "Show me their names instead.",
        "query": "SELECT shipping_agent_name FROM ref_shipping_agents;",
        "schema": "CREATE TABLE Ref_Shipping_Agents (shipping_agent_name TEXT, shipping_agent_description TEXT, shipping_agent_code TEXT); CREATE TABLE Documents (shipping_agent_code TEXT);"
      }
    ],
    [
      {
        "question": "Show me the the shipping agent code of shipping agent Fedex.",
        "query": "SELECT shipping_agent_code FROM ref_shipping_agents WHERE shipping_agent_name = \"Fedex\";",
        "schema": "CREATE TABLE Documents (shipping_agent_code TEXT); CREATE TABLE Ref_Shipping_Agents (shipping_agent_name TEXT, shipping_agent_code TEXT);"
      },
      {
        "question": "How about the shipping agent description of shipping agent UPS?",
        "query": "SELECT shipping_agent_description FROM ref_shipping_agents WHERE shipping_agent_name = \"UPS\";",
        "schema": "CREATE TABLE Ref_Shipping_Agents (shipping_agent_code TEXT, shipping_agent_description TEXT, shipping_agent_name TEXT); CREATE TABLE Documents (shipping_agent_code TEXT);"
      },
      {
        "question": "What is the shipping agent code of this shipping agent?",
        "query": "SELECT shipping_agent_code FROM ref_shipping_agents WHERE shipping_agent_name = \"UPS\";",
        "schema": "CREATE TABLE Documents (shipping_agent_code TEXT); CREATE TABLE Ref_Shipping_Agents (shipping_agent_name TEXT, shipping_agent_description TEXT, shipping_agent_code TEXT);"
      }
    ],
    [
      {
        "question": "Show me all the descriptions for each role?",
        "query": "SELECT role_description FROM ROLES;",
        "schema": "CREATE TABLE Roles (role_description TEXT, role_code TEXT); CREATE TABLE Employees (role_code TEXT); CREATE TABLE Documents (document_type_code TEXT);"
      },
      {
        "question": "Now show all the role codes.",
        "query": "SELECT role_code FROM ROLES;",
        "schema": "CREATE TABLE Documents (document_type_code TEXT); CREATE TABLE Employees (role_code TEXT); CREATE TABLE Roles (role_code TEXT, role_description TEXT);"
      }
    ],
    [
      {
        "question": "How many employees have role code ED?",
        "query": "SELECT count(*) FROM employees WHERE role_code = \"ED\";",
        "schema": "CREATE TABLE Roles (role_code TEXT, role_description TEXT); CREATE TABLE Employees (employee_name TEXT, role_code TEXT, employee_id NUMBER);"
      },
      {
        "question": "What is the description for this role code?",
        "query": "SELECT role_description FROM ROLES WHERE role_code = \"ED\";",
        "schema": "CREATE TABLE Employees (employee_name TEXT, role_code TEXT, employee_id NUMBER); CREATE TABLE Roles (role_code TEXT, role_description TEXT);"
      }
    ],
    [
      {
        "question": "What are the employees' names?",
        "query": "SELECT employee_name FROM employees;",
        "schema": "CREATE TABLE Employees (employee_id NUMBER, employee_name TEXT, other_details TEXT, role_code TEXT);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT count(*) FROM employees;",
        "schema": "CREATE TABLE Employees (role_code TEXT, other_details TEXT, employee_name TEXT, employee_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show me the names of the employee.",
        "query": "SELECT employee_name FROM employees;",
        "schema": "CREATE TABLE Employees (role_code TEXT, employee_id NUMBER, employee_name TEXT);"
      },
      {
        "question": "What is the role code of the employee named Koby?",
        "query": "SELECT t1.role_code FROM ROLES AS t1 JOIN employees AS t2 ON t1.role_code = t2.role_code WHERE t2.employee_name = \"Koby\";",
        "schema": "CREATE TABLE Employees (employee_name TEXT, role_code TEXT, employee_id NUMBER); CREATE TABLE Roles (role_description TEXT, role_code TEXT);"
      },
      {
        "question": "How about his role description?",
        "query": "SELECT t1.role_description FROM ROLES AS t1 JOIN employees AS t2 ON t1.role_code = t2.role_code WHERE t2.employee_name = \"Koby\";",
        "schema": "CREATE TABLE Roles (role_code TEXT, role_description TEXT); CREATE TABLE Employees (employee_id NUMBER, employee_name TEXT, role_code TEXT);"
      }
    ],
    [
      {
        "question": "Show me all information about the documents.",
        "query": "SELECT * FROM documents;",
        "schema": "CREATE TABLE Employees (employee_id NUMBER); CREATE TABLE Document_Drafts (document_id NUMBER); CREATE TABLE Ref_Document_Types (document_type_code TEXT); CREATE TABLE Documents_Mailed (document_id NUMBER); CREATE TABLE Documents (other_details TEXT, document_type_code TEXT, document_id NUMBER);"
      },
      {
        "question": "List document ids and receipt dates of all documents",
        "query": "SELECT document_id , receipt_date FROM documents;",
        "schema": "CREATE TABLE Employees (employee_id NUMBER); CREATE TABLE Documents (other_details TEXT, document_id NUMBER, document_type_code TEXT, receipt_number TEXT, receipt_date TIME); CREATE TABLE Ref_Document_Types (document_type_code TEXT); CREATE TABLE Documents_Mailed (document_id NUMBER); CREATE TABLE Document_Drafts (document_id NUMBER);"
      }
    ],
    [
      {
        "question": "What are the role codes?",
        "query": "SELECT role_code FROM ROLES;",
        "schema": "CREATE TABLE Roles (role_code TEXT); CREATE TABLE Employees (employee_name TEXT, role_code TEXT);"
      },
      {
        "question": "How about their corresponding role_description?",
        "query": "SELECT role_code, role_description FROM ROLES;",
        "schema": "CREATE TABLE Employees (role_code TEXT, employee_name TEXT); CREATE TABLE Roles (role_description TEXT, role_code TEXT);"
      },
      {
        "question": "List role description, role code and number of employees of each role?",
        "query": "SELECT t1.role_description , t2.role_code , count(*) FROM ROLES AS t1 JOIN employees AS t2 ON t1.role_code = t2.role_code GROUP BY t2.role_code;",
        "schema": "CREATE TABLE Employees (employee_name TEXT, employee_id NUMBER, role_code TEXT); CREATE TABLE Roles (role_code TEXT, role_description TEXT);"
      }
    ],
    [
      {
        "question": "What are the employees' id?",
        "query": "SELECT employee_id FROM employees;",
        "schema": "CREATE TABLE Employees (role_code TEXT, employee_id NUMBER, employee_name TEXT); CREATE TABLE Circulation_History (employee_id NUMBER); CREATE TABLE Roles (role_code TEXT);"
      },
      {
        "question": "Which of those ids correspond to roles with more than 2 employees? Show in conjunction to the ids.",
        "query": "SELECT roles.role_description, employees.employee_id FROM ROLES JOIN employees ON employees.role_code = roles.role_code GROUP BY employees.role_code HAVING count(employees.employee_id) > 2;",
        "schema": "CREATE TABLE Roles (role_description TEXT, role_code TEXT); CREATE TABLE Circulation_History (employee_id NUMBER); CREATE TABLE Employees (role_code TEXT, employee_name TEXT, employee_id NUMBER);"
      },
      {
        "question": "How about more than 1 employee? Now only show the role description and number of employee ids.",
        "query": "SELECT roles.role_description , count(employees.employee_id) FROM ROLES JOIN employees ON employees.role_code = roles.role_code GROUP BY employees.role_code HAVING count(employees.employee_id) > 1;",
        "schema": "CREATE TABLE Circulation_History (employee_id NUMBER); CREATE TABLE Employees (employee_name TEXT, employee_id NUMBER, role_code TEXT); CREATE TABLE Roles (role_code TEXT, role_description TEXT);"
      }
    ],
    [
      {
        "question": "Show me the document with id 2.",
        "query": "SELECT * FROM documents WHERE document_id = 2;",
        "schema": "CREATE TABLE Documents (document_id NUMBER, document_type_code TEXT); CREATE TABLE Draft_Copies (document_id NUMBER); CREATE TABLE Document_Drafts (document_id NUMBER); CREATE TABLE Documents_Mailed (document_id NUMBER);"
      },
      {
        "question": "What about the document status code of document with id 1?",
        "query": "SELECT ref_document_status.document_status_code FROM ref_document_status JOIN documents ON documents.document_status_code = ref_document_status.document_status_code WHERE documents.document_id = 1;",
        "schema": "CREATE TABLE Ref_Document_Status (document_status_code TEXT, document_status_description TEXT); CREATE TABLE Document_Drafts (document_id NUMBER); CREATE TABLE Draft_Copies (document_id NUMBER); CREATE TABLE Documents (document_type_code TEXT, document_status_code TEXT, document_id NUMBER); CREATE TABLE Documents_Mailed (document_id NUMBER);"
      },
      {
        "question": "What is the document status description for this document?",
        "query": "SELECT ref_document_status.document_status_description FROM ref_document_status JOIN documents ON documents.document_status_code = ref_document_status.document_status_code WHERE documents.document_id = 1;",
        "schema": "CREATE TABLE Draft_Copies (document_id NUMBER); CREATE TABLE Ref_Document_Status (document_status_description TEXT, document_status_code TEXT); CREATE TABLE Document_Drafts (document_id NUMBER); CREATE TABLE Documents_Mailed (document_id NUMBER); CREATE TABLE Ref_Document_Types (document_type_code TEXT); CREATE TABLE Documents (document_status_code TEXT, document_type_code TEXT, document_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show me all the information about the documents.",
        "query": "SELECT * FROM documents",
        "schema": "CREATE TABLE Document_Drafts (document_id NUMBER, draft_number NUMBER); CREATE TABLE Documents (document_type_code TEXT, document_id NUMBER, document_status_code TEXT, other_details TEXT); CREATE TABLE Employees (employee_id NUMBER); CREATE TABLE Documents_Mailed (document_id NUMBER); CREATE TABLE Draft_Copies (document_id NUMBER);"
      },
      {
        "question": "List all the documents with status code working?",
        "query": "SELECT * FROM documents WHERE document_status_code = \"working\";",
        "schema": "CREATE TABLE Documents (document_status_code TEXT, other_details TEXT, document_id NUMBER, document_type_code TEXT); CREATE TABLE Ref_Document_Status (document_status_description TEXT, document_status_code TEXT); CREATE TABLE Documents_Mailed (document_id NUMBER); CREATE TABLE Document_Drafts (draft_number NUMBER, document_id NUMBER); CREATE TABLE Employees (employee_id NUMBER); CREATE TABLE Draft_Copies (document_id NUMBER);"
      },
      {
        "question": "How about the status code done?",
        "query": "SELECT * FROM documents WHERE document_status_code = \"done\";",
        "schema": "CREATE TABLE Document_Drafts (document_id NUMBER, draft_number NUMBER); CREATE TABLE Documents (document_id NUMBER, document_status_code TEXT, other_details TEXT, document_type_code TEXT); CREATE TABLE Documents_Mailed (document_id NUMBER); CREATE TABLE Employees (employee_id NUMBER); CREATE TABLE Ref_Document_Status (document_status_code TEXT, document_status_description TEXT); CREATE TABLE Draft_Copies (document_id NUMBER);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT count(*) FROM documents WHERE document_status_code = \"done\";",
        "schema": "CREATE TABLE Documents_Mailed (document_id NUMBER); CREATE TABLE Draft_Copies (document_id NUMBER); CREATE TABLE Ref_Document_Status (document_status_description TEXT, document_status_code TEXT); CREATE TABLE Document_Drafts (document_id NUMBER, draft_number NUMBER); CREATE TABLE Documents (other_details TEXT, document_type_code TEXT, document_id NUMBER, document_status_code TEXT); CREATE TABLE Employees (employee_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show me document with id 1.",
        "query": "SELECT * FROM documents WHERE document_id = 1;",
        "schema": "CREATE TABLE Documents_Mailed (document_id NUMBER); CREATE TABLE Employees (employee_id NUMBER); CREATE TABLE Document_Drafts (document_id NUMBER); CREATE TABLE Draft_Copies (document_id NUMBER); CREATE TABLE Documents (document_type_code TEXT, document_id NUMBER);"
      },
      {
        "question": "What about the document status description of document with id 2?",
        "query": "SELECT ref_document_status.document_status_description FROM ref_document_status JOIN documents ON documents.document_status_code = ref_document_status.document_status_code WHERE documents.document_id = 2;",
        "schema": "CREATE TABLE Ref_Document_Status (document_status_description TEXT, document_status_code TEXT); CREATE TABLE Document_Drafts (document_id NUMBER); CREATE TABLE Documents (document_id NUMBER, document_type_code TEXT, document_status_code TEXT); CREATE TABLE Draft_Copies (document_id NUMBER); CREATE TABLE Documents_Mailed (document_id NUMBER); CREATE TABLE Employees (employee_id NUMBER);"
      },
      {
        "question": "What is the document status code of this document?",
        "query": "SELECT document_type_code FROM documents WHERE document_id = 2;",
        "schema": "CREATE TABLE Draft_Copies (document_id NUMBER); CREATE TABLE Ref_Document_Status (document_status_description TEXT, document_status_code TEXT); CREATE TABLE Document_Drafts (document_id NUMBER); CREATE TABLE Documents_Mailed (document_id NUMBER); CREATE TABLE Documents (document_status_code TEXT, document_type_code TEXT, document_id NUMBER); CREATE TABLE Employees (employee_id NUMBER);"
      }
    ],
    [
      {
        "question": "How many documents are there?",
        "query": "SELECT count(*) FROM documents;",
        "schema": "CREATE TABLE Ref_Document_Types (document_type_code TEXT, document_type_description TEXT); CREATE TABLE Employees (employee_id NUMBER); CREATE TABLE Document_Drafts (draft_details TEXT, draft_number NUMBER, document_id NUMBER); CREATE TABLE Documents_Mailed (document_id NUMBER); CREATE TABLE Draft_Copies (document_id NUMBER, draft_number NUMBER); CREATE TABLE Documents (document_type_code TEXT, document_status_code TEXT, other_details TEXT, document_id NUMBER);"
      },
      {
        "question": "Show me ones with status code done.",
        "query": "SELECT * FROM documents WHERE document_status_code = \"done\"",
        "schema": "CREATE TABLE Ref_Document_Status (document_status_code TEXT, document_status_description TEXT); CREATE TABLE Document_Drafts (draft_number NUMBER, draft_details TEXT, document_id NUMBER); CREATE TABLE Draft_Copies (draft_number NUMBER, document_id NUMBER); CREATE TABLE Employees (employee_id NUMBER); CREATE TABLE Ref_Document_Types (document_type_code TEXT, document_type_description TEXT); CREATE TABLE Documents (document_id NUMBER, other_details TEXT, document_type_code TEXT, document_status_code TEXT); CREATE TABLE Documents_Mailed (document_id NUMBER);"
      },
      {
        "question": "List the document ids for any documents with the status code done and the type code paper.",
        "query": "SELECT document_id FROM documents WHERE document_status_code = \"done\" AND document_type_code = \"Paper\";",
        "schema": "CREATE TABLE Document_Drafts (draft_number NUMBER, draft_details TEXT, document_id NUMBER); CREATE TABLE Documents_Mailed (document_id NUMBER); CREATE TABLE Ref_Document_Status (document_status_description TEXT, document_status_code TEXT); CREATE TABLE Ref_Document_Types (document_type_code TEXT, document_type_description TEXT); CREATE TABLE Draft_Copies (draft_number NUMBER, document_id NUMBER); CREATE TABLE Documents (document_status_code TEXT, document_type_code TEXT, other_details TEXT, document_id NUMBER); CREATE TABLE Employees (employee_id NUMBER);"
      }
    ],
    [
      {
        "question": "What are the shipping agents' names?",
        "query": "SELECT ref_shipping_agents.shipping_agent_name FROM ref_shipping_agents;",
        "schema": "CREATE TABLE Documents (shipping_agent_code TEXT); CREATE TABLE Employees (employee_name TEXT); CREATE TABLE Ref_Shipping_Agents (shipping_agent_description TEXT, shipping_agent_name TEXT, shipping_agent_code TEXT);"
      },
      {
        "question": "Show all the documents with shipping agent named USPS?",
        "query": "SELECT * FROM documents AS t1 JOIN ref_shipping_agents AS t2 ON t1.shipping_agent_code = t2.shipping_agent_code WHERE t2.shipping_agent_name = \"USPS\";",
        "schema": "CREATE TABLE Documents (shipping_agent_code TEXT, document_id NUMBER, document_type_code TEXT); CREATE TABLE Employees (employee_name TEXT); CREATE TABLE Ref_Shipping_Agents (shipping_agent_description TEXT, shipping_agent_name TEXT, shipping_agent_code TEXT);"
      },
      {
        "question": "What is the name of the shipping agent of the document with id 2?",
        "query": "SELECT ref_shipping_agents.shipping_agent_name FROM ref_shipping_agents JOIN documents ON documents.shipping_agent_code = ref_shipping_agents.shipping_agent_code WHERE documents.document_id = 2;",
        "schema": "CREATE TABLE Documents (document_type_code TEXT, document_id NUMBER, shipping_agent_code TEXT); CREATE TABLE Ref_Shipping_Agents (shipping_agent_description TEXT, shipping_agent_name TEXT, shipping_agent_code TEXT); CREATE TABLE Document_Drafts (document_id NUMBER); CREATE TABLE Employees (employee_name TEXT);"
      }
    ],
    [
      {
        "question": "How many documents are there?",
        "query": "SELECT count(*) FROM documents;",
        "schema": "CREATE TABLE Ref_Document_Types (document_type_code TEXT, document_type_description TEXT); CREATE TABLE Employees (employee_id NUMBER); CREATE TABLE Documents_Mailed (document_id NUMBER); CREATE TABLE Draft_Copies (document_id NUMBER, draft_number NUMBER); CREATE TABLE Document_Drafts (document_id NUMBER, draft_number NUMBER, draft_details TEXT); CREATE TABLE Documents (document_id NUMBER, document_status_code TEXT, other_details TEXT, document_type_code TEXT);"
      },
      {
        "question": "How many documents were shipped by Fedex?",
        "query": "SELECT count(*) FROM ref_shipping_agents JOIN documents ON documents.shipping_agent_code = ref_shipping_agents.shipping_agent_code WHERE ref_shipping_agents.shipping_agent_name = \"Fedex\";",
        "schema": "CREATE TABLE Ref_Document_Types (document_type_code TEXT, document_type_description TEXT); CREATE TABLE Draft_Copies (draft_number NUMBER, document_id NUMBER); CREATE TABLE Documents (document_id NUMBER, shipping_agent_code TEXT, document_type_code TEXT, document_status_code TEXT, other_details TEXT); CREATE TABLE Documents_Mailed (document_id NUMBER); CREATE TABLE Ref_Shipping_Agents (shipping_agent_code TEXT, shipping_agent_name TEXT); CREATE TABLE Employees (employee_id NUMBER); CREATE TABLE Document_Drafts (document_id NUMBER, draft_number NUMBER, draft_details TEXT);"
      },
      {
        "question": "How about USPS?",
        "query": "SELECT count(*) FROM ref_shipping_agents JOIN documents ON documents.shipping_agent_code = ref_shipping_agents.shipping_agent_code WHERE ref_shipping_agents.shipping_agent_name = \"USPS\";",
        "schema": "CREATE TABLE Document_Drafts (draft_number NUMBER, document_id NUMBER, draft_details TEXT); CREATE TABLE Documents (document_status_code TEXT, document_type_code TEXT, other_details TEXT, shipping_agent_code TEXT, document_id NUMBER); CREATE TABLE Ref_Document_Types (document_type_description TEXT, document_type_code TEXT); CREATE TABLE Employees (employee_id NUMBER); CREATE TABLE Documents_Mailed (document_id NUMBER); CREATE TABLE Draft_Copies (draft_number NUMBER, document_id NUMBER); CREATE TABLE Ref_Shipping_Agents (shipping_agent_name TEXT, shipping_agent_code TEXT);"
      }
    ],
    [
      {
        "question": "What's the number of documents each shipping agent shipped?",
        "query": "SELECT ref_shipping_agents.shipping_agent_name , count(documents.document_id) FROM ref_shipping_agents JOIN documents ON documents.shipping_agent_code = ref_shipping_agents.shipping_agent_code GROUP BY ref_shipping_agents.shipping_agent_code;",
        "schema": "CREATE TABLE Ref_Shipping_Agents (shipping_agent_description TEXT, shipping_agent_name TEXT, shipping_agent_code TEXT); CREATE TABLE Documents_Mailed (document_id NUMBER); CREATE TABLE Document_Drafts (document_id NUMBER); CREATE TABLE Documents (document_id NUMBER, shipping_agent_code TEXT, receipt_number TEXT);"
      },
      {
        "question": "Which agent shipped the least number of documents?",
        "query": "SELECT ref_shipping_agents.shipping_agent_name , count(documents.document_id) FROM ref_shipping_agents JOIN documents ON documents.shipping_agent_code = ref_shipping_agents.shipping_agent_code GROUP BY ref_shipping_agents.shipping_agent_code ORDER BY count(documents.document_id) ASC LIMIT 1;",
        "schema": "CREATE TABLE Document_Drafts (document_id NUMBER); CREATE TABLE Ref_Shipping_Agents (shipping_agent_name TEXT, shipping_agent_code TEXT, shipping_agent_description TEXT); CREATE TABLE Documents (document_id NUMBER, receipt_number TEXT, shipping_agent_code TEXT); CREATE TABLE Documents_Mailed (document_id NUMBER);"
      },
      {
        "question": "How about the most number of documents?",
        "query": "SELECT ref_shipping_agents.shipping_agent_name , count(documents.document_id) FROM ref_shipping_agents JOIN documents ON documents.shipping_agent_code = ref_shipping_agents.shipping_agent_code GROUP BY ref_shipping_agents.shipping_agent_code ORDER BY count(documents.document_id) DESC LIMIT 1;",
        "schema": "CREATE TABLE Document_Drafts (document_id NUMBER); CREATE TABLE Documents_Mailed (document_id NUMBER); CREATE TABLE Documents (shipping_agent_code TEXT, receipt_number TEXT, document_id NUMBER); CREATE TABLE Ref_Shipping_Agents (shipping_agent_code TEXT, shipping_agent_description TEXT, shipping_agent_name TEXT);"
      }
    ],
    [
      {
        "question": "Show me the receipt number of the documents?",
        "query": "SELECT receipt_number FROM documents;",
        "schema": "CREATE TABLE Draft_Copies (draft_number NUMBER, copy_number NUMBER, document_id NUMBER); CREATE TABLE Documents (receipt_number TEXT, document_id NUMBER, receipt_date TIME); CREATE TABLE Employees (employee_id NUMBER); CREATE TABLE Document_Drafts (document_id NUMBER, draft_number NUMBER); CREATE TABLE Documents_Mailed (document_id NUMBER);"
      },
      {
        "question": "How about receipt date?",
        "query": "SELECT receipt_date FROM documents",
        "schema": "CREATE TABLE Draft_Copies (draft_number NUMBER, document_id NUMBER, copy_number NUMBER); CREATE TABLE Documents_Mailed (document_id NUMBER); CREATE TABLE Employees (employee_id NUMBER); CREATE TABLE Documents (document_id NUMBER, receipt_date TIME, receipt_number TEXT); CREATE TABLE Document_Drafts (document_id NUMBER, draft_number NUMBER);"
      },
      {
        "question": "Show me that for document  with id 2?",
        "query": "SELECT receipt_date FROM documents WHERE document_id = 3;",
        "schema": "CREATE TABLE Document_Drafts (document_id NUMBER, draft_number NUMBER); CREATE TABLE Documents_Mailed (document_id NUMBER); CREATE TABLE Draft_Copies (draft_number NUMBER, copy_number NUMBER, document_id NUMBER); CREATE TABLE Documents (receipt_number TEXT, receipt_date TIME, document_id NUMBER); CREATE TABLE Employees (employee_id NUMBER);"
      },
      {
        "question": "How about for document with id 3?",
        "query": "SELECT receipt_date FROM documents WHERE document_id = 3;",
        "schema": "CREATE TABLE Employees (employee_id NUMBER); CREATE TABLE Documents (receipt_number TEXT, receipt_date TIME, document_id NUMBER); CREATE TABLE Documents_Mailed (document_id NUMBER); CREATE TABLE Draft_Copies (copy_number NUMBER, document_id NUMBER, draft_number NUMBER); CREATE TABLE Document_Drafts (draft_number NUMBER, document_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show me the receipt_date of document with id 4?",
        "query": "SELECT receipt_date FROM documents WHERE document_id = 4;",
        "schema": "CREATE TABLE Draft_Copies (document_id NUMBER); CREATE TABLE Documents_Mailed (document_id NUMBER); CREATE TABLE Documents (document_id NUMBER, receipt_date TIME, receipt_number TEXT); CREATE TABLE Document_Drafts (document_id NUMBER);"
      },
      {
        "question": "What's its mailing date?",
        "query": "SELECT documents_mailed.mailing_date FROM addresses JOIN documents_mailed ON documents_mailed.mailed_to_address_id = addresses.address_id WHERE document_id = 4;",
        "schema": "CREATE TABLE Addresses (address_id NUMBER); CREATE TABLE Documents (receipt_date TIME, receipt_number TEXT, document_id NUMBER); CREATE TABLE Draft_Copies (document_id NUMBER); CREATE TABLE Documents_Mailed (mailing_date TIME, mailed_to_address_id NUMBER, document_id NUMBER); CREATE TABLE Document_Drafts (document_id NUMBER);"
      },
      {
        "question": "What address did it mail to?",
        "query": "SELECT addresses.address_details FROM addresses JOIN documents_mailed ON documents_mailed.mailed_to_address_id = addresses.address_id WHERE document_id = 4;",
        "schema": "CREATE TABLE Documents (document_id NUMBER, receipt_number TEXT, receipt_date TIME); CREATE TABLE Draft_Copies (document_id NUMBER); CREATE TABLE Document_Drafts (document_id NUMBER); CREATE TABLE Documents_Mailed (mailed_to_address_id NUMBER, mailing_date TIME, document_id NUMBER); CREATE TABLE Addresses (address_details TEXT, address_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show me document with id 7.",
        "query": "SELECT * FROM documents;",
        "schema": "CREATE TABLE Employees (employee_id NUMBER); CREATE TABLE Document_Drafts (document_id NUMBER); CREATE TABLE Documents_Mailed (document_id NUMBER); CREATE TABLE Documents (document_type_code TEXT, document_id NUMBER); CREATE TABLE Draft_Copies (document_id NUMBER);"
      },
      {
        "question": "Where did it mail to?",
        "query": "SELECT addresses.address_details FROM addresses JOIN documents_mailed ON documents_mailed.mailed_to_address_id = addresses.address_id WHERE document_id = 7;",
        "schema": "CREATE TABLE Employees (employee_id NUMBER); CREATE TABLE Documents_Mailed (document_id NUMBER, mailed_to_address_id NUMBER, mailing_date TIME); CREATE TABLE Addresses (address_details TEXT, address_id NUMBER); CREATE TABLE Draft_Copies (document_id NUMBER); CREATE TABLE Documents (receipt_number TEXT, document_type_code TEXT, document_id NUMBER); CREATE TABLE Document_Drafts (document_id NUMBER);"
      },
      {
        "question": "How about its mailing date?",
        "query": "SELECT mailing_date FROM documents_mailed WHERE document_id = 7;",
        "schema": "CREATE TABLE Addresses (address_id NUMBER, address_details TEXT); CREATE TABLE Employees (employee_id NUMBER); CREATE TABLE Draft_Copies (document_id NUMBER); CREATE TABLE Document_Drafts (document_id NUMBER); CREATE TABLE Documents (receipt_number TEXT, document_type_code TEXT, document_id NUMBER); CREATE TABLE Documents_Mailed (mailed_to_address_id NUMBER, document_id NUMBER, mailing_date TIME);"
      }
    ],
    [
      {
        "question": "Show me document ids of documents with status working.",
        "query": "SELECT document_id FROM documents WHERE document_status_code = \"working\";",
        "schema": "CREATE TABLE Documents_Mailed (document_id NUMBER); CREATE TABLE Employees (employee_id NUMBER); CREATE TABLE Document_Drafts (document_id NUMBER); CREATE TABLE Ref_Document_Status (document_status_description TEXT, document_status_code TEXT); CREATE TABLE Documents (document_id NUMBER, document_status_code TEXT);"
      },
      {
        "question": "How about documents with the status done and type Paper?",
        "query": "SELECT document_id FROM documents WHERE document_status_code = \"done\" AND document_type_code = \"Paper\";",
        "schema": "CREATE TABLE Ref_Document_Types (document_type_code TEXT); CREATE TABLE Documents_Mailed (document_id NUMBER); CREATE TABLE Document_Drafts (document_id NUMBER); CREATE TABLE Ref_Document_Status (document_status_code TEXT, document_status_description TEXT); CREATE TABLE Employees (employee_id NUMBER); CREATE TABLE Documents (document_id NUMBER, document_type_code TEXT, document_status_code TEXT);"
      },
      {
        "question": "Which of those were not shipped by agent named USPS?",
        "query": "SELECT document_id FROM documents WHERE document_status_code = \"done\" AND document_type_code = \"Paper\" EXCEPT SELECT document_id FROM documents JOIN ref_shipping_agents ON documents.shipping_agent_code = ref_shipping_agents.shipping_agent_code WHERE ref_shipping_agents.shipping_agent_name = \"USPS\";",
        "schema": "CREATE TABLE Document_Drafts (document_id NUMBER); CREATE TABLE Employees (employee_id NUMBER); CREATE TABLE Ref_Shipping_Agents (shipping_agent_code TEXT, shipping_agent_name TEXT); CREATE TABLE Addresses (address_id NUMBER); CREATE TABLE Documents (document_status_code TEXT, document_type_code TEXT, document_id NUMBER, shipping_agent_code TEXT); CREATE TABLE Ref_Document_Status (document_status_code TEXT, document_status_description TEXT); CREATE TABLE Ref_Document_Types (document_type_code TEXT); CREATE TABLE Documents_Mailed (document_id NUMBER, mailed_to_address_id NUMBER);"
      }
    ],
    [
      {
        "question": "What are document types of document with status done?",
        "query": "SELECT document_type_code FROM documents WHERE document_status_code = \"done\";",
        "schema": "CREATE TABLE Ref_Document_Status (document_status_code TEXT, document_status_description TEXT); CREATE TABLE Documents (document_type_code TEXT, document_id NUMBER, document_status_code TEXT); CREATE TABLE Ref_Document_Types (document_type_description TEXT, document_type_code TEXT);"
      },
      {
        "question": "Show me the document id of those whose document status is done and document type is Paper.",
        "query": "SELECT document_id FROM documents WHERE document_status_code = \"done\" AND document_type_code = \"Paper\";",
        "schema": "CREATE TABLE Documents (document_id NUMBER, document_status_code TEXT, document_type_code TEXT); CREATE TABLE Ref_Document_Types (document_type_description TEXT, document_type_code TEXT); CREATE TABLE Ref_Document_Status (document_status_code TEXT, document_status_description TEXT); CREATE TABLE Document_Drafts (document_id NUMBER);"
      },
      {
        "question": "Which of those are shipped by agent named USPS?",
        "query": "SELECT document_id FROM documents WHERE document_status_code = \"done\" AND document_type_code = \"Paper\" INTERSECT SELECT document_id FROM documents JOIN ref_shipping_agents ON documents.shipping_agent_code = ref_shipping_agents.shipping_agent_code WHERE ref_shipping_agents.shipping_agent_name = \"USPS\";",
        "schema": "CREATE TABLE Document_Drafts (document_id NUMBER); CREATE TABLE Ref_Document_Status (document_status_description TEXT, document_status_code TEXT); CREATE TABLE Ref_Shipping_Agents (shipping_agent_name TEXT, shipping_agent_code TEXT); CREATE TABLE Addresses (address_id NUMBER); CREATE TABLE Ref_Document_Types (document_type_code TEXT, document_type_description TEXT); CREATE TABLE Documents (document_status_code TEXT, shipping_agent_code TEXT, document_id NUMBER, document_type_code TEXT);"
      }
    ],
    [
      {
        "question": "Show me all about the documents.",
        "query": "SELECT * FROM documents;",
        "schema": "CREATE TABLE Employees (employee_id NUMBER); CREATE TABLE Ref_Document_Types (document_type_code TEXT, document_type_description TEXT); CREATE TABLE Draft_Copies (document_id NUMBER); CREATE TABLE Documents (document_type_code TEXT, document_id NUMBER, other_details TEXT); CREATE TABLE Documents_Mailed (document_id NUMBER); CREATE TABLE Document_Drafts (draft_number NUMBER, document_id NUMBER);"
      },
      {
        "question": "Only list document with id 7.",
        "query": "SELECT * FROM documents WHERE document_id = 7;",
        "schema": "CREATE TABLE Document_Drafts (draft_number NUMBER, document_id NUMBER); CREATE TABLE Draft_Copies (document_id NUMBER); CREATE TABLE Documents (document_id NUMBER, document_type_code TEXT, other_details TEXT); CREATE TABLE Documents_Mailed (document_id NUMBER); CREATE TABLE Ref_Document_Types (document_type_code TEXT, document_type_description TEXT); CREATE TABLE Employees (employee_id NUMBER);"
      },
      {
        "question": "What are its draft details?",
        "query": "SELECT draft_details FROM document_drafts WHERE document_id = 7;",
        "schema": "CREATE TABLE Ref_Document_Types (document_type_code TEXT, document_type_description TEXT); CREATE TABLE Draft_Copies (copy_number NUMBER, draft_number NUMBER, document_id NUMBER); CREATE TABLE Documents_Mailed (document_id NUMBER); CREATE TABLE Employees (employee_id NUMBER); CREATE TABLE Documents (document_id NUMBER, other_details TEXT, document_type_code TEXT); CREATE TABLE Document_Drafts (draft_number NUMBER, draft_details TEXT, document_id NUMBER); CREATE TABLE Circulation_History (document_id NUMBER, draft_number NUMBER);"
      }
    ],
    [
      {
        "question": "Show me everything about draft copies.",
        "query": "SELECT * FROM draft_copies;",
        "schema": "CREATE TABLE Circulation_History (draft_number NUMBER, document_id NUMBER); CREATE TABLE Draft_Copies (draft_number NUMBER, copy_number NUMBER, document_id NUMBER); CREATE TABLE Document_Drafts (document_id NUMBER, draft_details TEXT, draft_number NUMBER); CREATE TABLE Documents (document_id NUMBER); CREATE TABLE Employees (employee_id NUMBER);"
      },
      {
        "question": "What's the draft number of document with id 2?",
        "query": "SELECT draft_number FROM draft_copies WHERE document_id = 2;",
        "schema": "CREATE TABLE Documents (document_id NUMBER); CREATE TABLE Document_Drafts (draft_number NUMBER, document_id NUMBER, draft_details TEXT); CREATE TABLE Employees (employee_id NUMBER); CREATE TABLE Circulation_History (document_id NUMBER, draft_number NUMBER); CREATE TABLE Draft_Copies (copy_number NUMBER, draft_number NUMBER, document_id NUMBER);"
      },
      {
        "question": "How many draft copies does it have?",
        "query": "SELECT count(*) FROM draft_copies WHERE document_id = 2;",
        "schema": "CREATE TABLE Documents (document_id NUMBER); CREATE TABLE Employees (employee_id NUMBER); CREATE TABLE Document_Drafts (draft_details TEXT, document_id NUMBER, draft_number NUMBER); CREATE TABLE Draft_Copies (draft_number NUMBER, document_id NUMBER, copy_number NUMBER); CREATE TABLE Circulation_History (document_id NUMBER, draft_number NUMBER);"
      }
    ],
    [
      {
        "question": "What's draft number of the documents?",
        "query": "SELECT draft_number FROM draft_copies;",
        "schema": "CREATE TABLE Circulation_History (document_id NUMBER, draft_number NUMBER); CREATE TABLE Draft_Copies (copy_number NUMBER, document_id NUMBER, draft_number NUMBER); CREATE TABLE Documents_Mailed (document_id NUMBER); CREATE TABLE Document_Drafts (draft_number NUMBER, document_id NUMBER, draft_details TEXT); CREATE TABLE Documents (document_id NUMBER);"
      },
      {
        "question": "How about the draft copies? Show me how many draft copies each document has?",
        "query": "SELECT document_id , count(copy_number) FROM draft_copies GROUP BY document_id;",
        "schema": "CREATE TABLE Documents_Mailed (document_id NUMBER); CREATE TABLE Document_Drafts (draft_number NUMBER, document_id NUMBER, draft_details TEXT); CREATE TABLE Documents (document_id NUMBER); CREATE TABLE Draft_Copies (copy_number NUMBER, draft_number NUMBER, document_id NUMBER); CREATE TABLE Circulation_History (draft_number NUMBER, document_id NUMBER);"
      },
      {
        "question": "Which of the result has the most draft copies?",
        "query": "SELECT document_id , count(copy_number) FROM draft_copies GROUP BY document_id ORDER BY count(copy_number) DESC LIMIT 1;",
        "schema": "CREATE TABLE Document_Drafts (draft_number NUMBER, draft_details TEXT, document_id NUMBER); CREATE TABLE Documents (document_id NUMBER); CREATE TABLE Documents_Mailed (document_id NUMBER); CREATE TABLE Circulation_History (draft_number NUMBER, document_id NUMBER); CREATE TABLE Draft_Copies (draft_number NUMBER, copy_number NUMBER, document_id NUMBER);"
      }
    ],
    [
      {
        "question": "How many draft copies does each document have? List the id of documents.",
        "query": "SELECT document_id , count(*) FROM draft_copies GROUP BY document_id;",
        "schema": "CREATE TABLE Document_Drafts (document_id NUMBER, draft_number NUMBER, draft_details TEXT); CREATE TABLE Draft_Copies (copy_number NUMBER, draft_number NUMBER, document_id NUMBER); CREATE TABLE Documents (document_id NUMBER); CREATE TABLE Documents_Mailed (document_id NUMBER);"
      },
      {
        "question": "Which one has the maximum number of draft copies?",
        "query": "SELECT document_id , count(*) FROM draft_copies GROUP BY document_id ORDER BY draft_number DESC LIMIT 1;",
        "schema": "CREATE TABLE Documents_Mailed (document_id NUMBER); CREATE TABLE Documents (document_id NUMBER); CREATE TABLE Document_Drafts (draft_details TEXT, draft_number NUMBER, document_id NUMBER); CREATE TABLE Draft_Copies (document_id NUMBER, draft_number NUMBER, copy_number NUMBER); CREATE TABLE Circulation_History (draft_number NUMBER, document_id NUMBER);"
      },
      {
        "question": "How about ones with more than 1 draft copies?",
        "query": "SELECT document_id , count(*) FROM draft_copies GROUP BY document_id HAVING count(*) > 1;",
        "schema": "CREATE TABLE Draft_Copies (draft_number NUMBER, copy_number NUMBER, document_id NUMBER); CREATE TABLE Document_Drafts (draft_number NUMBER, document_id NUMBER, draft_details TEXT); CREATE TABLE Circulation_History (draft_number NUMBER, document_id NUMBER); CREATE TABLE Documents_Mailed (document_id NUMBER); CREATE TABLE Documents (document_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show me all about the document with id 1.",
        "query": "SELECT * FROM documents WHERE document_id = 1;",
        "schema": "CREATE TABLE Draft_Copies (document_id NUMBER); CREATE TABLE Documents_Mailed (document_id NUMBER); CREATE TABLE Document_Drafts (document_id NUMBER); CREATE TABLE Employees (employee_id NUMBER); CREATE TABLE Documents (document_type_code TEXT, document_id NUMBER);"
      },
      {
        "question": "What about role codes of the employees who appeared in the circulation history of it?",
        "query": "SELECT employees.role_code FROM employees JOIN circulation_history ON circulation_history.employee_id = employees.employee_id WHERE circulation_history.document_id = 1;",
        "schema": "CREATE TABLE Documents_Mailed (document_id NUMBER); CREATE TABLE Employees (employee_id NUMBER, employee_name TEXT, role_code TEXT); CREATE TABLE Documents (document_id NUMBER, document_type_code TEXT); CREATE TABLE Document_Drafts (document_id NUMBER); CREATE TABLE Draft_Copies (document_id NUMBER); CREATE TABLE Roles (role_code TEXT); CREATE TABLE Circulation_History (document_id NUMBER, draft_number NUMBER, employee_id NUMBER, copy_number NUMBER);"
      },
      {
        "question": "What about these employees' names?",
        "query": "SELECT employees.employee_name FROM employees JOIN circulation_history ON circulation_history.employee_id = employees.employee_id WHERE circulation_history.document_id = 1;",
        "schema": "CREATE TABLE Draft_Copies (document_id NUMBER); CREATE TABLE Documents (document_id NUMBER, document_type_code TEXT); CREATE TABLE Employees (employee_id NUMBER, employee_name TEXT, role_code TEXT); CREATE TABLE Document_Drafts (document_id NUMBER); CREATE TABLE Circulation_History (document_id NUMBER, copy_number NUMBER, employee_id NUMBER, draft_number NUMBER); CREATE TABLE Roles (role_code TEXT); CREATE TABLE Documents_Mailed (document_id NUMBER);"
      }
    ],
    [
      {
        "question": "For each employee, list the number of documents which showed up in the circulation history.",
        "query": "SELECT employees.employee_name, count(circulation_history.document_id) FROM employees JOIN circulation_history ON circulation_history.employee_id = employees.employee_id GROUP BY employees.employee_id;",
        "schema": "CREATE TABLE Draft_Copies (copy_number NUMBER); CREATE TABLE Circulation_History (draft_number NUMBER, document_id NUMBER, copy_number NUMBER, employee_id NUMBER); CREATE TABLE Documents (document_id NUMBER); CREATE TABLE Employees (role_code TEXT, employee_name TEXT, employee_id NUMBER);"
      },
      {
        "question": "Who showed up the most times?",
        "query": "SELECT employees.employee_name FROM employees JOIN circulation_history ON circulation_history.employee_id = employees.employee_id GROUP BY employees.employee_id ORDER BY count(circulation_history.document_id) DESC LIMIT 1;",
        "schema": "CREATE TABLE Circulation_History (draft_number NUMBER, document_id NUMBER, employee_id NUMBER, copy_number NUMBER); CREATE TABLE Employees (role_code TEXT, employee_name TEXT, employee_id NUMBER); CREATE TABLE Draft_Copies (copy_number NUMBER); CREATE TABLE Documents (document_id NUMBER);"
      },
      {
        "question": "What about the names of the employees who have not showed up in any circulation history of documents.",
        "query": "SELECT employee_name FROM employees EXCEPT SELECT employees.employee_name FROM employees JOIN circulation_history ON circulation_history.employee_id = employees.employee_id",
        "schema": "CREATE TABLE Employees (employee_id NUMBER, role_code TEXT, employee_name TEXT); CREATE TABLE Draft_Copies (copy_number NUMBER); CREATE TABLE Circulation_History (copy_number NUMBER, draft_number NUMBER, document_id NUMBER, employee_id NUMBER); CREATE TABLE Documents (document_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show me about the Circulation History.",
        "query": "SELECT * FROM circulation_history",
        "schema": "CREATE TABLE Circulation_History (employee_id NUMBER, document_id NUMBER, copy_number NUMBER, draft_number NUMBER); CREATE TABLE Draft_Copies (copy_number NUMBER); CREATE TABLE Employees (employee_id NUMBER);"
      },
      {
        "question": "Which employee has showed up in the least Circulation History documents?",
        "query": "SELECT employees.employee_name FROM employees JOIN circulation_history ON circulation_history.employee_id = employees.employee_id GROUP BY circulation_history.document_id , circulation_history.draft_number , circulation_history.copy_number ORDER BY count(*) ASC LIMIT 1;",
        "schema": "CREATE TABLE Draft_Copies (copy_number NUMBER); CREATE TABLE Employees (employee_id NUMBER, employee_name TEXT, role_code TEXT); CREATE TABLE Documents (document_id NUMBER); CREATE TABLE Circulation_History (document_id NUMBER, employee_id NUMBER, copy_number NUMBER, draft_number NUMBER);"
      },
      {
        "question": "How about the most circulation history documents? Show the number of circulation history documents as well.",
        "query": "SELECT employees.employee_name , count(*) FROM employees JOIN circulation_history ON circulation_history.employee_id = employees.employee_id GROUP BY circulation_history.document_id , circulation_history.draft_number , circulation_history.copy_number ORDER BY count(*) DESC LIMIT 1;",
        "schema": "CREATE TABLE Document_Drafts (draft_number NUMBER, document_id NUMBER); CREATE TABLE Circulation_History (copy_number NUMBER, draft_number NUMBER, employee_id NUMBER, document_id NUMBER); CREATE TABLE Employees (role_code TEXT, employee_id NUMBER, employee_name TEXT); CREATE TABLE Documents (document_id NUMBER); CREATE TABLE Draft_Copies (copy_number NUMBER, draft_number NUMBER, document_id NUMBER);"
      }
    ]
  ],
  "customers_and_products_contacts": [
    [
      {
        "question": "Show all the address information.",
        "query": "SELECT * FROM addresses",
        "schema": "CREATE TABLE Customer_Address_History (address_id NUMBER, customer_id NUMBER); CREATE TABLE Addresses (state_province_county TEXT, zip_postcode TEXT, address_id NUMBER, city TEXT); CREATE TABLE Customers (customer_address TEXT, customer_id NUMBER);"
      },
      {
        "question": "How about those in country USA?",
        "query": "SELECT * FROM addresses WHERE country = 'USA'",
        "schema": "CREATE TABLE Addresses (city TEXT, country TEXT, state_province_county TEXT, address_id NUMBER, zip_postcode TEXT); CREATE TABLE Customer_Address_History (customer_id NUMBER, address_id NUMBER); CREATE TABLE Customers (customer_id NUMBER, customer_address TEXT);"
      },
      {
        "question": "How many of them are there?",
        "query": "SELECT count(*) FROM addresses WHERE country = 'USA'",
        "schema": "CREATE TABLE Customer_Address_History (customer_id NUMBER, address_id NUMBER); CREATE TABLE Customers (customer_address TEXT, customer_id NUMBER); CREATE TABLE Addresses (country TEXT, zip_postcode TEXT, address_id NUMBER, state_province_county TEXT, city TEXT);"
      }
    ],
    [
      {
        "question": "Show all cities in the addresses.",
        "query": "SELECT city FROM addresses",
        "schema": "CREATE TABLE Customers (customer_address TEXT); CREATE TABLE Addresses (city TEXT, address_id NUMBER);"
      },
      {
        "question": "Only show unique names.",
        "query": "SELECT DISTINCT city FROM addresses",
        "schema": "CREATE TABLE Addresses (address_id NUMBER, city TEXT); CREATE TABLE Customers (customer_name TEXT, customer_address TEXT);"
      }
    ],
    [
      {
        "question": "Show the state for each address.",
        "query": "SELECT state_province_county FROM addresses",
        "schema": "CREATE TABLE Addresses (state_province_county TEXT, country TEXT, address_id NUMBER); CREATE TABLE Customers (customer_address TEXT);"
      },
      {
        "question": "Also show the number of addresses in each of them.",
        "query": "SELECT state_province_county , count(*) FROM addresses GROUP BY state_province_county",
        "schema": "CREATE TABLE Customers (customer_address TEXT); CREATE TABLE Addresses (address_id NUMBER, country TEXT, state_province_county TEXT);"
      }
    ],
    [
      {
        "question": "Show the ids of all customers.",
        "query": "SELECT customer_id FROM customers",
        "schema": "CREATE TABLE Customer_Orders (customer_id NUMBER, order_id NUMBER); CREATE TABLE Contacts (customer_id NUMBER); CREATE TABLE Customers (customer_id NUMBER, customer_number TEXT, customer_name TEXT); CREATE TABLE Customer_Address_History (customer_id NUMBER);"
      },
      {
        "question": "What about those who have address information?",
        "query": "SELECT customer_id FROM customer_address_history",
        "schema": "CREATE TABLE Customer_Orders (customer_id NUMBER, order_id NUMBER); CREATE TABLE Customer_Address_History (customer_id NUMBER, address_id NUMBER); CREATE TABLE Contacts (customer_id NUMBER); CREATE TABLE Customers (customer_id NUMBER, customer_address TEXT, customer_number TEXT, customer_name TEXT); CREATE TABLE Addresses (address_id NUMBER);"
      },
      {
        "question": "Show the names of those who don't have it.",
        "query": "SELECT customer_name FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM customer_address_history)",
        "schema": "CREATE TABLE Contacts (customer_id NUMBER); CREATE TABLE Customer_Address_History (address_id NUMBER, customer_id NUMBER); CREATE TABLE Addresses (address_id NUMBER); CREATE TABLE Customers (customer_name TEXT, customer_address TEXT, customer_number TEXT, customer_id NUMBER); CREATE TABLE Customer_Orders (customer_id NUMBER, order_id NUMBER);"
      },
      {
        "question": "Also show their phone numbers.",
        "query": "SELECT customer_name , customer_phone FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM customer_address_history)",
        "schema": "CREATE TABLE Customer_Orders (customer_id NUMBER, order_id NUMBER); CREATE TABLE Addresses (address_id NUMBER); CREATE TABLE Contacts (customer_id NUMBER, contact_phone TEXT); CREATE TABLE Customers (customer_id NUMBER, customer_address TEXT, customer_phone TEXT, customer_number TEXT, customer_name TEXT); CREATE TABLE Customer_Address_History (address_id NUMBER, customer_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show the names of all customers.",
        "query": "SELECT customer_name FROM customers",
        "schema": "CREATE TABLE Contacts (first_name TEXT); CREATE TABLE Customers (customer_name TEXT, customer_number TEXT, customer_id NUMBER);"
      },
      {
        "question": "Also show the number of orders each of them has.",
        "query": "SELECT t1.customer_name, count(*) FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id GROUP BY t1.customer_id",
        "schema": "CREATE TABLE Order_Items (order_id NUMBER); CREATE TABLE Contacts (first_name TEXT); CREATE TABLE Customer_Orders (order_id NUMBER, customer_id NUMBER, order_status_code TEXT); CREATE TABLE Customers (customer_name TEXT, customer_number TEXT, customer_id NUMBER);"
      },
      {
        "question": "Sort the names in descending order of the number of orders.",
        "query": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id GROUP BY t1.customer_id ORDER BY count(*) DESC",
        "schema": "CREATE TABLE Contacts (first_name TEXT); CREATE TABLE Customers (customer_name TEXT, customer_number TEXT, customer_id NUMBER); CREATE TABLE Order_Items (order_id NUMBER); CREATE TABLE Customer_Orders (order_id NUMBER, customer_id NUMBER, order_status_code TEXT);"
      },
      {
        "question": "Who has the most?",
        "query": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id GROUP BY t1.customer_id ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Customer_Orders (customer_id NUMBER, order_status_code TEXT, order_id NUMBER); CREATE TABLE Order_Items (order_id NUMBER); CREATE TABLE Contacts (first_name TEXT); CREATE TABLE Customers (customer_id NUMBER, customer_name TEXT, customer_number TEXT);"
      }
    ],
    [
      {
        "question": "Show the product type code for all products.",
        "query": "SELECT product_type_code FROM products",
        "schema": "CREATE TABLE Products (product_type_code TEXT, product_id NUMBER, product_name TEXT); CREATE TABLE Addresses (zip_postcode TEXT);"
      },
      {
        "question": "For each of them, count the number of products.",
        "query": "SELECT product_type_code, count(*) FROM products GROUP BY product_type_code",
        "schema": "CREATE TABLE Addresses (zip_postcode TEXT); CREATE TABLE Products (product_name TEXT, product_type_code TEXT, product_id NUMBER);"
      },
      {
        "question": "Which of them have at least two products?",
        "query": "SELECT product_type_code FROM products GROUP BY product_type_code HAVING count(*) >= 2",
        "schema": "CREATE TABLE Products (product_id NUMBER, product_type_code TEXT, product_name TEXT); CREATE TABLE Addresses (zip_postcode TEXT);"
      }
    ],
    [
      {
        "question": "Show the names of all customers.",
        "query": "SELECT customer_name FROM customers",
        "schema": "CREATE TABLE Customers (customer_name TEXT, customer_number TEXT, customer_id NUMBER); CREATE TABLE Contacts (last_name TEXT, first_name TEXT);"
      },
      {
        "question": "Who has an order in completed status?",
        "query": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id WHERE t2.order_status_code = 'Completed'",
        "schema": "CREATE TABLE Contacts (first_name TEXT, last_name TEXT); CREATE TABLE Customer_Orders (order_status_code TEXT, customer_id NUMBER, order_id NUMBER); CREATE TABLE Customers (customer_id NUMBER, customer_number TEXT, customer_name TEXT);"
      },
      {
        "question": "Who has an order in part status?",
        "query": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id WHERE t2.order_status_code = 'Part'",
        "schema": "CREATE TABLE Customer_Orders (order_status_code TEXT, customer_id NUMBER, order_id NUMBER); CREATE TABLE Customers (customer_id NUMBER, customer_number TEXT, customer_name TEXT); CREATE TABLE Contacts (first_name TEXT, last_name TEXT);"
      },
      {
        "question": "Who has both?",
        "query": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id WHERE t2.order_status_code = 'Completed' INTERSECT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id WHERE t2.order_status_code = 'Part'",
        "schema": "CREATE TABLE Customers (customer_number TEXT, customer_id NUMBER, customer_name TEXT); CREATE TABLE Contacts (last_name TEXT, first_name TEXT); CREATE TABLE Customer_Orders (customer_id NUMBER, order_status_code TEXT, order_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show the name for all customers.",
        "query": "SELECT customer_name FROM customers",
        "schema": "CREATE TABLE Contacts (first_name TEXT); CREATE TABLE Customers (customer_id NUMBER, customer_number TEXT, customer_name TEXT); CREATE TABLE Customer_Orders (customer_id NUMBER);"
      },
      {
        "question": "Also show their phone number and payment method code.",
        "query": "SELECT customer_name , customer_phone , payment_method_code FROM customers",
        "schema": "CREATE TABLE Contacts (contact_phone TEXT, first_name TEXT); CREATE TABLE Customers (customer_number TEXT, customer_phone TEXT, payment_method_code TEXT, customer_id NUMBER, customer_name TEXT); CREATE TABLE Customer_Orders (customer_id NUMBER);"
      },
      {
        "question": "Sort the results in descending order of customer number.",
        "query": "SELECT customer_name , customer_phone , payment_method_code FROM customers ORDER BY customer_number DESC",
        "schema": "CREATE TABLE Contacts (first_name TEXT, contact_phone TEXT); CREATE TABLE Customer_Orders (customer_id NUMBER); CREATE TABLE Customers (payment_method_code TEXT, customer_phone TEXT, customer_name TEXT, customer_number TEXT, customer_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show the product name for all products.",
        "query": "SELECT product_name FROM products",
        "schema": "CREATE TABLE Products (product_type_code TEXT, product_id NUMBER, product_name TEXT);"
      },
      {
        "question": "Show the product name and all the order quantities for each product.",
        "query": "SELECT t1.product_name , t2.order_quantity FROM products AS t1 JOIN order_items AS t2 ON t1.product_id = t2.product_id",
        "schema": "CREATE TABLE Order_Items (order_item_id NUMBER, order_quantity TEXT, product_id NUMBER, order_id NUMBER); CREATE TABLE Customer_Orders (order_id NUMBER); CREATE TABLE Products (product_type_code TEXT, product_id NUMBER, product_name TEXT);"
      },
      {
        "question": "For each of those products, what is the total order quantity?",
        "query": "SELECT t1.product_name , sum(t2.order_quantity) FROM products AS t1 JOIN order_items AS t2 ON t1.product_id = t2.product_id GROUP BY t1.product_id",
        "schema": "CREATE TABLE Customer_Orders (order_id NUMBER); CREATE TABLE Products (product_id NUMBER, product_type_code TEXT, product_name TEXT); CREATE TABLE Order_Items (order_quantity TEXT, product_id NUMBER, order_item_id NUMBER, order_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show the price for all products.",
        "query": "SELECT product_price FROM products",
        "schema": "CREATE TABLE Customer_Orders (customer_id NUMBER); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Products (product_price NUMBER, product_name TEXT, product_type_code TEXT, product_id NUMBER);"
      },
      {
        "question": "What is the minimum, maximum, and average of them?",
        "query": "SELECT min(product_price) , max(product_price) , avg(product_price) FROM products",
        "schema": "CREATE TABLE Customer_Orders (customer_id NUMBER); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Products (product_price NUMBER, product_name TEXT, product_id NUMBER, product_type_code TEXT);"
      }
    ],
    [
      {
        "question": "What is the average price for prodcuts?",
        "query": "SELECT avg(product_price) FROM products",
        "schema": "CREATE TABLE Customer_Orders (customer_id NUMBER); CREATE TABLE Addresses (address_id NUMBER); CREATE TABLE Products (product_price NUMBER, product_name TEXT, product_id NUMBER, product_type_code TEXT); CREATE TABLE Customers (customer_name TEXT, customer_id NUMBER);"
      },
      {
        "question": "Show product information for products more expensive than the average.",
        "query": "SELECT * FROM products WHERE product_price > (SELECT avg(product_price) FROM products)",
        "schema": "CREATE TABLE Products (product_price NUMBER, product_name TEXT, product_type_code TEXT, product_id NUMBER); CREATE TABLE Customers (customer_name TEXT, customer_id NUMBER); CREATE TABLE Customer_Orders (customer_id NUMBER); CREATE TABLE Addresses (address_id NUMBER);"
      },
      {
        "question": "How many such products are there?",
        "query": "SELECT count(*) FROM products WHERE product_price > (SELECT avg(product_price) FROM products)",
        "schema": "CREATE TABLE Products (product_type_code TEXT, product_name TEXT, product_id NUMBER, product_price NUMBER); CREATE TABLE Addresses (address_id NUMBER); CREATE TABLE Customer_Orders (customer_id NUMBER); CREATE TABLE Customers (customer_id NUMBER, customer_name TEXT);"
      }
    ],
    [
      {
        "question": "Show the date from and date to for each customer address history.",
        "query": "SELECT date_from , date_to FROM customer_address_history",
        "schema": "CREATE TABLE Addresses (address_id NUMBER); CREATE TABLE Customer_Address_History (date_to TIME, date_from TIME, customer_id NUMBER, address_id NUMBER); CREATE TABLE Customers (customer_id NUMBER, customer_address TEXT, customer_name TEXT);"
      },
      {
        "question": "For each of those records, also show the customer name.",
        "query": "SELECT t2.customer_name , t1.date_from , t1.date_to FROM customer_address_history AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id",
        "schema": "CREATE TABLE Addresses (address_id NUMBER); CREATE TABLE Customer_Address_History (date_from TIME, date_to TIME, customer_id NUMBER, address_id NUMBER); CREATE TABLE Customers (customer_id NUMBER, customer_address TEXT, customer_number TEXT, customer_name TEXT);"
      },
      {
        "question": "For each of those, also show the customer address city.",
        "query": "SELECT t2.customer_name , t3.city , t1.date_from , t1.date_to FROM customer_address_history AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t1.address_id = t3.address_id",
        "schema": "CREATE TABLE Customers (customer_id NUMBER, customer_name TEXT, customer_address TEXT, customer_number TEXT); CREATE TABLE Customer_Address_History (address_id NUMBER, date_to TIME, customer_id NUMBER, date_from TIME); CREATE TABLE Addresses (city TEXT, address_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show the names of all customers.",
        "query": "SELECT customer_name FROM customers",
        "schema": "CREATE TABLE Contacts (last_name TEXT, first_name TEXT); CREATE TABLE Customers (customer_name TEXT, customer_id NUMBER, customer_number TEXT);"
      },
      {
        "question": "Count the number of orders each of them has made.",
        "query": "SELECT t1.customer_name, count(*) FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id GROUP BY t1.customer_id",
        "schema": "CREATE TABLE Contacts (first_name TEXT, last_name TEXT); CREATE TABLE Order_Items (order_id NUMBER); CREATE TABLE Customer_Orders (order_id NUMBER, customer_id NUMBER, order_status_code TEXT); CREATE TABLE Customers (customer_number TEXT, customer_id NUMBER, customer_name TEXT);"
      },
      {
        "question": "For each of them, how many of their orders use Credit Card payment method?",
        "query": "SELECT t1.customer_name, count(*) FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id WHERE t1.payment_method_code = 'Credit Card' GROUP BY t1.customer_id",
        "schema": "CREATE TABLE Customers (customer_name TEXT, customer_number TEXT, customer_id NUMBER, payment_method_code TEXT); CREATE TABLE Contacts (first_name TEXT, last_name TEXT); CREATE TABLE Customer_Orders (customer_id NUMBER, order_id NUMBER, order_status_code TEXT); CREATE TABLE Order_Items (order_id NUMBER);"
      },
      {
        "question": "Show the names of those who have more than 2 such orders.",
        "query": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id WHERE t1.payment_method_code = 'Credit Card' GROUP BY t1.customer_id HAVING count(*) > 2",
        "schema": "CREATE TABLE Customer_Orders (order_status_code TEXT, order_id NUMBER, customer_id NUMBER); CREATE TABLE Customers (payment_method_code TEXT, customer_name TEXT, customer_number TEXT, customer_id NUMBER); CREATE TABLE Order_Items (order_id NUMBER); CREATE TABLE Contacts (first_name TEXT, last_name TEXT);"
      }
    ],
    [
      {
        "question": "Show the names of all customers.",
        "query": "SELECT customer_name FROM customers",
        "schema": "CREATE TABLE Customers (customer_number TEXT, customer_id NUMBER, customer_name TEXT); CREATE TABLE Contacts (first_name TEXT, last_name TEXT);"
      },
      {
        "question": "Also show their phone numbers.",
        "query": "SELECT customer_name, customer_phone FROM customers",
        "schema": "CREATE TABLE Contacts (last_name TEXT, contact_phone TEXT, first_name TEXT); CREATE TABLE Customers (customer_phone TEXT, customer_id NUMBER, customer_number TEXT, customer_name TEXT);"
      },
      {
        "question": "For each of them, what is the total product quantity of their orders?",
        "query": "SELECT t1.customer_name , t1.customer_phone, sum(t3.order_quantity) FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t3.order_id = t2.order_id GROUP BY t1.customer_id",
        "schema": "CREATE TABLE Order_Items (order_quantity TEXT, product_id NUMBER, order_id NUMBER); CREATE TABLE Customer_Orders (customer_id NUMBER, order_id NUMBER); CREATE TABLE Products (product_name TEXT, product_type_code TEXT, product_id NUMBER, product_price NUMBER); CREATE TABLE Contacts (last_name TEXT, contact_phone TEXT, first_name TEXT); CREATE TABLE Customers (customer_number TEXT, customer_id NUMBER, customer_phone TEXT, customer_name TEXT);"
      },
      {
        "question": "Sort the results in descending order of the quantity.",
        "query": "SELECT t1.customer_name , t1.customer_phone, sum(t3.order_quantity) FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t3.order_id = t2.order_id GROUP BY t1.customer_id ORDER BY sum(t3.order_quantity) DESC",
        "schema": "CREATE TABLE Customer_Orders (customer_id NUMBER, order_id NUMBER); CREATE TABLE Products (product_type_code TEXT, product_name TEXT, product_price NUMBER, product_id NUMBER); CREATE TABLE Contacts (contact_phone TEXT, first_name TEXT, last_name TEXT); CREATE TABLE Order_Items (order_item_id NUMBER, product_id NUMBER, order_id NUMBER, order_quantity TEXT); CREATE TABLE Customers (customer_phone TEXT, customer_number TEXT, customer_id NUMBER, customer_name TEXT);"
      },
      {
        "question": "What are the name and phone number of the customer with the most?",
        "query": "SELECT t1.customer_name , t1.customer_phone FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t3.order_id = t2.order_id GROUP BY t1.customer_id ORDER BY sum(t3.order_quantity) DESC LIMIT 1",
        "schema": "CREATE TABLE Contacts (first_name TEXT, contact_phone TEXT, last_name TEXT); CREATE TABLE Customers (customer_id NUMBER, customer_number TEXT, customer_phone TEXT, customer_name TEXT); CREATE TABLE Order_Items (order_item_id NUMBER, product_id NUMBER, order_quantity TEXT, order_id NUMBER); CREATE TABLE Products (product_name TEXT, product_price NUMBER, product_type_code TEXT, product_id NUMBER); CREATE TABLE Customer_Orders (order_id NUMBER, customer_id NUMBER);"
      }
    ]
  ],
  "student_1": [
    [
      {
        "question": "Show me the last names of all teachers.",
        "query": "SELECT lastname FROM teachers",
        "schema": "CREATE TABLE list (FirstName TEXT, LastName TEXT); CREATE TABLE teachers (FirstName TEXT, Classroom NUMBER, LastName TEXT);"
      },
      {
        "question": "Show me the student grade in each classroom.",
        "query": "SELECT DISTINCT classroom,grade FROM list",
        "schema": "CREATE TABLE list (FirstName TEXT, Classroom NUMBER, Grade NUMBER, LastName TEXT); CREATE TABLE teachers (LastName TEXT, FirstName TEXT, Classroom NUMBER);"
      },
      {
        "question": "Which classrooms do fifth grade students have?",
        "query": "SELECT DISTINCT classroom FROM list WHERE grade = 5",
        "schema": "CREATE TABLE list (LastName TEXT, Classroom NUMBER, FirstName TEXT, Grade NUMBER); CREATE TABLE teachers (LastName TEXT, Classroom NUMBER, FirstName TEXT);"
      },
      {
        "question": "Show me the teachers who teach in any of those classrooms.",
        "query": "SELECT DISTINCT t2.lastname FROM list AS t1 JOIN teachers AS t2 ON t1.classroom = t2.classroom WHERE grade = 5",
        "schema": "CREATE TABLE teachers (FirstName TEXT, LastName TEXT, Classroom NUMBER); CREATE TABLE list (Classroom NUMBER, LastName TEXT, Grade NUMBER, FirstName TEXT);"
      }
    ],
    [
      {
        "question": "Show me the first names of all teachers.",
        "query": "SELECT firstname FROM teachers",
        "schema": "CREATE TABLE list (FirstName TEXT, LastName TEXT); CREATE TABLE teachers (FirstName TEXT, LastName TEXT, Classroom NUMBER);"
      },
      {
        "question": "Show me the student grade in each classroom.",
        "query": "SELECT DISTINCT classroom,grade FROM list",
        "schema": "CREATE TABLE list (FirstName TEXT, Classroom NUMBER, Grade NUMBER, LastName TEXT); CREATE TABLE teachers (Classroom NUMBER, LastName TEXT, FirstName TEXT);"
      },
      {
        "question": "Which classrooms do first grade students have?",
        "query": "SELECT DISTINCT classroom FROM list WHERE grade = 1",
        "schema": "CREATE TABLE list (FirstName TEXT, Grade NUMBER, Classroom NUMBER, LastName TEXT); CREATE TABLE teachers (FirstName TEXT, Classroom NUMBER, LastName TEXT);"
      },
      {
        "question": "Show me the teachers who teach in any of those classrooms.",
        "query": "SELECT DISTINCT t2.firstname FROM list AS t1 JOIN teachers AS t2 ON t1.classroom = t2.classroom WHERE grade = 1",
        "schema": "CREATE TABLE teachers (FirstName TEXT, Classroom NUMBER, LastName TEXT); CREATE TABLE list (Grade NUMBER, FirstName TEXT, LastName TEXT, Classroom NUMBER);"
      }
    ],
    [
      {
        "question": "Show me the name of all teachers in record.",
        "query": "SELECT firstname, lastname FROM teachers",
        "schema": "CREATE TABLE teachers (FirstName TEXT, LastName TEXT); CREATE TABLE list (FirstName TEXT, LastName TEXT);"
      },
      {
        "question": "Which classrooms does OTHA MOYER teach in?",
        "query": "SELECT classroom FROM teachers WHERE firstname = \"OTHA\" AND lastname = \"MOYER\"",
        "schema": "CREATE TABLE list (FirstName TEXT, LastName TEXT, Classroom NUMBER); CREATE TABLE teachers (Classroom NUMBER, FirstName TEXT, LastName TEXT);"
      },
      {
        "question": "Show me the name of students who are in those classrooms.",
        "query": "SELECT t1.firstname , t1.lastname FROM list AS t1 JOIN teachers AS t2 ON t1.classroom = t2.classroom WHERE t2.firstname = \"OTHA\" AND t2.lastname = \"MOYER\"",
        "schema": "CREATE TABLE list (Classroom NUMBER, LastName TEXT, FirstName TEXT); CREATE TABLE teachers (Classroom NUMBER, LastName TEXT, FirstName TEXT);"
      }
    ],
    [
      {
        "question": "Show me the name of all teachers in record.",
        "query": "SELECT firstname, lastname FROM teachers",
        "schema": "CREATE TABLE teachers (FirstName TEXT, LastName TEXT); CREATE TABLE list (FirstName TEXT, LastName TEXT);"
      },
      {
        "question": "Which classrooms does MARROTTE KIRK teach in?",
        "query": "SELECT classroom FROM teachers WHERE firstname = \"MARROTTE\" AND lastname = \"KIRK\"",
        "schema": "CREATE TABLE list (FirstName TEXT, LastName TEXT, Classroom NUMBER); CREATE TABLE teachers (LastName TEXT, FirstName TEXT, Classroom NUMBER);"
      },
      {
        "question": "Show me the name of students who are in those classrooms.",
        "query": "SELECT t1.firstname , t1.lastname FROM list AS t1 JOIN teachers AS t2 ON t1.classroom = t2.classroom WHERE t2.firstname = \"MARROTTE\" AND t2.lastname = \"KIRK\"",
        "schema": "CREATE TABLE list (FirstName TEXT, Classroom NUMBER, LastName TEXT); CREATE TABLE teachers (Classroom NUMBER, LastName TEXT, FirstName TEXT);"
      }
    ],
    [
      {
        "question": "How many students are there in the file?",
        "query": "SELECT count(*) FROM list",
        "schema": "CREATE TABLE list (FirstName TEXT, LastName TEXT, Classroom NUMBER);"
      },
      {
        "question": "Give me the classroom EVELINA BROMLEY is in.",
        "query": "SELECT classroom FROM list WHERE firstname = \"EVELINA\" AND lastname = \"BROMLEY\"",
        "schema": "CREATE TABLE list (FirstName TEXT, LastName TEXT, Classroom NUMBER); CREATE TABLE teachers (Classroom NUMBER, LastName TEXT, FirstName TEXT);"
      },
      {
        "question": "Show me the name of teachers that teach in that classroom.",
        "query": "SELECT t2.firstname , t2.lastname FROM list AS t1 JOIN teachers AS t2 ON t1.classroom = t2.classroom WHERE t1.firstname = \"EVELINA\" AND t1.lastname = \"BROMLEY\"",
        "schema": "CREATE TABLE list (FirstName TEXT, LastName TEXT, Classroom NUMBER); CREATE TABLE teachers (LastName TEXT, FirstName TEXT, Classroom NUMBER);"
      }
    ],
    [
      {
        "question": "How many students are there in the file?",
        "query": "SELECT count(*) FROM list",
        "schema": "CREATE TABLE list (FirstName TEXT, LastName TEXT, Classroom NUMBER);"
      },
      {
        "question": "Give me the classroom GELL TAMI is in.",
        "query": "SELECT classroom FROM list WHERE firstname = \"EVELINA\" AND lastname = \"BROMLEY\"",
        "schema": "CREATE TABLE list (Classroom NUMBER, LastName TEXT, FirstName TEXT); CREATE TABLE teachers (Classroom NUMBER, FirstName TEXT, LastName TEXT);"
      },
      {
        "question": "Show me the last name of teachers that teach in that classroom.",
        "query": "SELECT t2.lastname FROM list AS t1 JOIN teachers AS t2 ON t1.classroom = t2.classroom WHERE t1.firstname = \"GELL\" AND t1.lastname = \"TAMI\"",
        "schema": "CREATE TABLE teachers (Classroom NUMBER, FirstName TEXT, LastName TEXT); CREATE TABLE list (LastName TEXT, FirstName TEXT, Classroom NUMBER);"
      }
    ],
    [
      {
        "question": "Show me the name of all teachers in record.",
        "query": "SELECT firstname, lastname FROM teachers",
        "schema": "CREATE TABLE list (FirstName TEXT, LastName TEXT); CREATE TABLE teachers (FirstName TEXT, LastName TEXT);"
      },
      {
        "question": "Which classrooms does LORIA ONDERSMA teach in?",
        "query": "SELECT classroom FROM teachers WHERE firstname = \"LORIA\" AND lastname = \"ONDERSMA\"",
        "schema": "CREATE TABLE list (FirstName TEXT, Classroom NUMBER, LastName TEXT); CREATE TABLE teachers (Classroom NUMBER, FirstName TEXT, LastName TEXT);"
      },
      {
        "question": "How many students study in those classrooms?",
        "query": "SELECT count(*) FROM list AS t1 JOIN teachers AS t2 ON t1.classroom = t2.classroom WHERE t2.firstname = \"LORIA\" AND t2.lastname = \"ONDERSMA\"",
        "schema": "CREATE TABLE teachers (LastName TEXT, Classroom NUMBER, FirstName TEXT); CREATE TABLE list (FirstName TEXT, Classroom NUMBER, LastName TEXT);"
      }
    ],
    [
      {
        "question": "Show me the name of all teachers in record.",
        "query": "SELECT firstname, lastname FROM teachers",
        "schema": "CREATE TABLE teachers (FirstName TEXT, LastName TEXT); CREATE TABLE list (FirstName TEXT, LastName TEXT);"
      },
      {
        "question": "Which classrooms does KAWA GORDON teach in?",
        "query": "SELECT classroom FROM teachers WHERE firstname = \"KAWA\" AND lastname = \"GORDON\"",
        "schema": "CREATE TABLE teachers (Classroom NUMBER, FirstName TEXT, LastName TEXT); CREATE TABLE list (FirstName TEXT, LastName TEXT, Classroom NUMBER);"
      },
      {
        "question": "How many students study in those classrooms?",
        "query": "SELECT count(*) FROM list AS t1 JOIN teachers AS t2 ON t1.classroom = t2.classroom WHERE t2.firstname = \"KAWA\" AND t2.lastname = \"GORDON\"",
        "schema": "CREATE TABLE teachers (Classroom NUMBER, FirstName TEXT, LastName TEXT); CREATE TABLE list (LastName TEXT, FirstName TEXT, Classroom NUMBER);"
      }
    ],
    [
      {
        "question": "Show me the name of all teachers in record.",
        "query": "SELECT firstname, lastname FROM teachers",
        "schema": "CREATE TABLE list (FirstName TEXT, LastName TEXT); CREATE TABLE teachers (LastName TEXT, Classroom NUMBER, FirstName TEXT);"
      },
      {
        "question": "Which classrooms does TARRING LEIA teach in?",
        "query": "SELECT classroom FROM teachers WHERE firstname = \"TARRING\" AND lastname = \"LEIA\"",
        "schema": "CREATE TABLE list (FirstName TEXT, Classroom NUMBER, LastName TEXT); CREATE TABLE teachers (LastName TEXT, Classroom NUMBER, FirstName TEXT);"
      },
      {
        "question": "How many students study in those classrooms?",
        "query": "SELECT count(*) FROM list AS t1 JOIN teachers AS t2 ON t1.classroom = t2.classroom WHERE t2.firstname = \"TARRING\" AND t2.lastname = \"LEIA\"",
        "schema": "CREATE TABLE teachers (FirstName TEXT, Classroom NUMBER, LastName TEXT); CREATE TABLE list (Classroom NUMBER, FirstName TEXT, LastName TEXT);"
      }
    ],
    [
      {
        "question": "How many teachers are there in record?",
        "query": "SELECT count(*) FROM teachers",
        "schema": "CREATE TABLE teachers (LastName TEXT, FirstName TEXT, Classroom NUMBER); CREATE TABLE list (FirstName TEXT, LastName TEXT);"
      },
      {
        "question": "What classrooms is CHRISSY NABOZNY in?",
        "query": "SELECT classroom FROM list WHERE firstname = \"CHRISSY\" AND lastname = \"NABOZNY\"",
        "schema": "CREATE TABLE teachers (Classroom NUMBER, LastName TEXT, FirstName TEXT); CREATE TABLE list (FirstName TEXT, Classroom NUMBER, LastName TEXT);"
      },
      {
        "question": "How many are they?",
        "query": "SELECT count(*) FROM list AS t1 JOIN teachers AS t2 ON t1.classroom = t2.classroom WHERE t1.firstname = \"CHRISSY\" AND t1.lastname = \"NABOZNY\"",
        "schema": "CREATE TABLE list (LastName TEXT, FirstName TEXT, Classroom NUMBER); CREATE TABLE teachers (FirstName TEXT, LastName TEXT, Classroom NUMBER);"
      }
    ],
    [
      {
        "question": "How many teachers are there in record?",
        "query": "SELECT count(*) FROM teachers",
        "schema": "CREATE TABLE teachers (LastName TEXT, Classroom NUMBER, FirstName TEXT); CREATE TABLE list (LastName TEXT, FirstName TEXT);"
      },
      {
        "question": "What classrooms is MADLOCK RAY in?",
        "query": "SELECT classroom FROM list WHERE firstname = \"CHRISSY\" AND lastname = \"NABOZNY\"",
        "schema": "CREATE TABLE list (LastName TEXT, Classroom NUMBER, FirstName TEXT); CREATE TABLE teachers (FirstName TEXT, LastName TEXT, Classroom NUMBER);"
      },
      {
        "question": "How many are they?",
        "query": "SELECT count(*) FROM list AS t1 JOIN teachers AS t2 ON t1.classroom = t2.classroom WHERE t1.firstname = \"MADLOCK\" AND t1.lastname = \"RAY\"",
        "schema": "CREATE TABLE teachers (LastName TEXT, Classroom NUMBER, FirstName TEXT); CREATE TABLE list (Classroom NUMBER, FirstName TEXT, LastName TEXT);"
      }
    ],
    [
      {
        "question": "How many teachers are there?",
        "query": "SELECT count(*) FROM teachers",
        "schema": "CREATE TABLE teachers (Classroom NUMBER, LastName TEXT, FirstName TEXT); CREATE TABLE list (FirstName TEXT, LastName TEXT, Classroom NUMBER);"
      },
      {
        "question": "Show me the classroom of OTHA MOYER.",
        "query": "SELECT classroom FROM teachers WHERE firstname = \"OTHA\" AND lastname = \"MOYER\"",
        "schema": "CREATE TABLE list (Classroom NUMBER, LastName TEXT, FirstName TEXT); CREATE TABLE teachers (Classroom NUMBER, LastName TEXT, FirstName TEXT);"
      },
      {
        "question": "What about classrooms other than that?",
        "query": "SELECT DISTINCT classroom FROM list WHERE classroom NOT IN SELECT classroom FROM teachers WHERE firstname = \"OTHA\" AND lastname = \"MOYER\"",
        "schema": "CREATE TABLE teachers (Classroom NUMBER, FirstName TEXT, LastName TEXT); CREATE TABLE list (FirstName TEXT, Classroom NUMBER, LastName TEXT);"
      },
      {
        "question": "Give me the name of all first-grade students who are in any of those classrooms.",
        "query": "SELECT DISTINCT t1.firstname , t1.lastname FROM list AS t1 JOIN teachers AS t2 ON t1.classroom = t2.classroom WHERE t1.grade = 1 EXCEPT SELECT t1.firstname , t1.lastname FROM list AS t1 JOIN teachers AS t2 ON t1.classroom = t2.classroom WHERE t2.firstname = \"OTHA\" AND t2.lastname = \"MOYER\"",
        "schema": "CREATE TABLE teachers (FirstName TEXT, LastName TEXT, Classroom NUMBER); CREATE TABLE list (FirstName TEXT, Grade NUMBER, Classroom NUMBER, LastName TEXT);"
      }
    ],
    [
      {
        "question": "How many teachers are there?",
        "query": "SELECT count(*) FROM teachers",
        "schema": "CREATE TABLE teachers (LastName TEXT, Classroom NUMBER, FirstName TEXT); CREATE TABLE list (Classroom NUMBER, LastName TEXT, FirstName TEXT);"
      },
      {
        "question": "Show me the classroom of OTHA MOYER.",
        "query": "SELECT classroom FROM teachers WHERE firstname = \"OTHA\" AND lastname = \"MOYER\"",
        "schema": "CREATE TABLE list (FirstName TEXT, LastName TEXT, Classroom NUMBER); CREATE TABLE teachers (Classroom NUMBER, FirstName TEXT, LastName TEXT);"
      },
      {
        "question": "What about classrooms other than that?",
        "query": "SELECT DISTINCT classroom FROM list WHERE classroom NOT IN SELECT classroom FROM teachers WHERE firstname = \"OTHA\" AND lastname = \"MOYER\"",
        "schema": "CREATE TABLE teachers (LastName TEXT, FirstName TEXT, Classroom NUMBER); CREATE TABLE list (Classroom NUMBER, LastName TEXT, FirstName TEXT);"
      },
      {
        "question": "Give me the name of all first-grade students who are in any of those classrooms.",
        "query": "SELECT DISTINCT t1.firstname , t1.lastname FROM list AS t1 JOIN teachers AS t2 ON t1.classroom = t2.classroom WHERE t1.grade = 1 EXCEPT SELECT t1.firstname , t1.lastname FROM list AS t1 JOIN teachers AS t2 ON t1.classroom = t2.classroom WHERE t2.firstname = \"OTHA\" AND t2.lastname = \"MOYER\"",
        "schema": "CREATE TABLE teachers (LastName TEXT, FirstName TEXT, Classroom NUMBER); CREATE TABLE list (Grade NUMBER, LastName TEXT, Classroom NUMBER, FirstName TEXT);"
      }
    ],
    [
      {
        "question": "How many students are there in record?",
        "query": "SELECT count(*) FROM list",
        "schema": "CREATE TABLE list (LastName TEXT, Classroom NUMBER, FirstName TEXT); CREATE TABLE teachers (Classroom NUMBER);"
      },
      {
        "question": "What about that in terms of each grade?",
        "query": "SELECT grade, count(*) FROM list GROUP BY grade",
        "schema": "CREATE TABLE list (Classroom NUMBER, LastName TEXT, Grade NUMBER, FirstName TEXT); CREATE TABLE teachers (Classroom NUMBER);"
      },
      {
        "question": "Also include number of classrooms.",
        "query": "SELECT grade , count(DISTINCT classroom) , count(*) FROM list GROUP BY grade",
        "schema": "CREATE TABLE list (LastName TEXT, FirstName TEXT, Classroom NUMBER, Grade NUMBER); CREATE TABLE teachers (Classroom NUMBER);"
      }
    ],
    [
      {
        "question": "How many classrooms are there?",
        "query": "SELECT DISTINCT classroom FROM list",
        "schema": "CREATE TABLE teachers (Classroom NUMBER); CREATE TABLE list (Classroom NUMBER, LastName TEXT);"
      },
      {
        "question": "How many students does each of them have?",
        "query": "SELECT classroom, count(*) FROM list GROUP BY classroom",
        "schema": "CREATE TABLE list (LastName TEXT, Classroom NUMBER, FirstName TEXT); CREATE TABLE teachers (Classroom NUMBER);"
      },
      {
        "question": "Give me the classroom with the most of them.",
        "query": "SELECT classroom FROM list GROUP BY classroom ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE list (FirstName TEXT, Classroom NUMBER, LastName TEXT); CREATE TABLE teachers (Classroom NUMBER);"
      }
    ],
    [
      {
        "question": "How many classrooms are there?",
        "query": "SELECT DISTINCT classroom FROM list",
        "schema": "CREATE TABLE list (Classroom NUMBER, LastName TEXT); CREATE TABLE teachers (Classroom NUMBER);"
      },
      {
        "question": "Show me the classrooms that any zero grade is in.",
        "query": "SELECT DISTINCT classroom FROM list WHERE grade = '0'",
        "schema": "CREATE TABLE teachers (Classroom NUMBER); CREATE TABLE list (Classroom NUMBER, Grade NUMBER, LastName TEXT);"
      },
      {
        "question": "How many students are in each of those classrooms?",
        "query": "SELECT classroom , count(*) FROM list WHERE grade = \"0\" GROUP BY classroom",
        "schema": "CREATE TABLE teachers (Classroom NUMBER); CREATE TABLE list (Classroom NUMBER, LastName TEXT, Grade NUMBER);"
      }
    ],
    [
      {
        "question": "How many classrooms are there?",
        "query": "SELECT DISTINCT classroom FROM list",
        "schema": "CREATE TABLE teachers (Classroom NUMBER); CREATE TABLE list (Classroom NUMBER);"
      },
      {
        "question": "Show me the classrooms that any fourth-grade is in.",
        "query": "SELECT DISTINCT classroom FROM list WHERE grade = '4'",
        "schema": "CREATE TABLE teachers (Classroom NUMBER); CREATE TABLE list (Classroom NUMBER, Grade NUMBER);"
      },
      {
        "question": "How many students are in each of those classrooms?",
        "query": "SELECT classroom , count(*) FROM list WHERE grade = \"4\" GROUP BY classroom",
        "schema": "CREATE TABLE list (Classroom NUMBER, Grade NUMBER); CREATE TABLE teachers (Classroom NUMBER);"
      }
    ]
  ],
  "voter_2": [
    [
      {
        "question": "How many students have major 600?",
        "query": "SELECT count(*) FROM student WHERE major = 600",
        "schema": "CREATE TABLE Student (LName TEXT, Major NUMBER, StuID NUMBER);"
      },
      {
        "question": "What is the maximum age of these students?",
        "query": "SELECT max(age) FROM student WHERE major = 600",
        "schema": "CREATE TABLE Student (LName TEXT, Age NUMBER, StuID NUMBER, Major NUMBER);"
      },
      {
        "question": "Please show the minimum age as well.",
        "query": "SELECT max(age) , min(age) FROM student WHERE major = 600",
        "schema": "CREATE TABLE Student (LName TEXT, Major NUMBER, StuID NUMBER, Age NUMBER);"
      }
    ],
    [
      {
        "question": "How many students have secretary votes?",
        "query": "SELECT count(DISTINCT t1.stuid) FROM student AS t1 JOIN voting_record AS t2 ON t1.stuid = t2.secretary_vote",
        "schema": "CREATE TABLE Student (Fname TEXT, StuID NUMBER, LName TEXT); CREATE TABLE Voting_record (Secretary_Vote NUMBER, Treasurer_Vote NUMBER, President_Vote NUMBER, StuID NUMBER, Class_President_Vote NUMBER, Vice_President_Vote NUMBER, Class_Senator_Vote NUMBER);"
      },
      {
        "question": "How many of those are from the fall election cycle?",
        "query": "SELECT count(DISTINCT t1.stuid) FROM student AS t1 JOIN voting_record AS t2 ON t1.stuid = t2.secretary_vote WHERE t2.election_cycle = \"Fall\"",
        "schema": "CREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT); CREATE TABLE Voting_record (Election_Cycle TEXT, Treasurer_Vote NUMBER, StuID NUMBER, Secretary_Vote NUMBER, Vice_President_Vote NUMBER, President_Vote NUMBER, Class_President_Vote NUMBER, Class_Senator_Vote NUMBER);"
      },
      {
        "question": "What are the names of those students?",
        "query": "SELECT DISTINCT t1.fname, t1.lname FROM student AS t1 JOIN voting_record AS t2 ON t1.stuid = t2.secretary_vote WHERE t2.election_cycle = \"Fall\"",
        "schema": "CREATE TABLE Student (Fname TEXT, LName TEXT, StuID NUMBER); CREATE TABLE Voting_record (Class_Senator_Vote NUMBER, Treasurer_Vote NUMBER, Secretary_Vote NUMBER, StuID NUMBER, Vice_President_Vote NUMBER, President_Vote NUMBER, Election_Cycle TEXT, Class_President_Vote NUMBER);"
      },
      {
        "question": "What are their ages?",
        "query": "SELECT DISTINCT t1.age FROM student AS t1 JOIN voting_record AS t2 ON t1.stuid = t2.secretary_vote WHERE t2.election_cycle = \"Fall\"",
        "schema": "CREATE TABLE Student (Age NUMBER, StuID NUMBER, Fname TEXT, LName TEXT); CREATE TABLE Voting_record (Election_Cycle TEXT, President_Vote NUMBER, StuID NUMBER, Treasurer_Vote NUMBER, Class_President_Vote NUMBER, Secretary_Vote NUMBER, Vice_President_Vote NUMBER, Class_Senator_Vote NUMBER);"
      }
    ],
    [
      {
        "question": "How many students have treasurer votes?",
        "query": "SELECT count(DISTINCT t1.stuid) FROM student AS t1 JOIN voting_record AS t2 ON t1.stuid = t2.treasurer_vote",
        "schema": "CREATE TABLE Student (LName TEXT, StuID NUMBER, Fname TEXT); CREATE TABLE Voting_record (Secretary_Vote NUMBER, StuID NUMBER, Class_Senator_Vote NUMBER, President_Vote NUMBER, Treasurer_Vote NUMBER, Class_President_Vote NUMBER, Vice_President_Vote NUMBER);"
      },
      {
        "question": "How many of those are from the spring election cycle?",
        "query": "SELECT count(DISTINCT t1.stuid) FROM student AS t1 JOIN voting_record AS t2 ON t1.stuid = t2.treasurer_vote WHERE t2.election_cycle = \"Spring\"",
        "schema": "CREATE TABLE Student (StuID NUMBER, Fname TEXT, LName TEXT); CREATE TABLE Voting_record (President_Vote NUMBER, StuID NUMBER, Election_Cycle TEXT, Class_President_Vote NUMBER, Vice_President_Vote NUMBER, Treasurer_Vote NUMBER, Secretary_Vote NUMBER, Class_Senator_Vote NUMBER);"
      },
      {
        "question": "Please list their names.",
        "query": "SELECT DISTINCT t1.fname, t1.lname FROM student AS t1 JOIN voting_record AS t2 ON t1.stuid = t2.treasurer_vote WHERE t2.election_cycle = \"Spring\"",
        "schema": "CREATE TABLE Student (Fname TEXT, LName TEXT, StuID NUMBER); CREATE TABLE Voting_record (Class_President_Vote NUMBER, StuID NUMBER, Election_Cycle TEXT, Class_Senator_Vote NUMBER, President_Vote NUMBER, Vice_President_Vote NUMBER, Secretary_Vote NUMBER, Treasurer_Vote NUMBER);"
      },
      {
        "question": "Who are their advisors?",
        "query": "SELECT DISTINCT t1.advisor FROM student AS t1 JOIN voting_record AS t2 ON t1.stuid = t2.treasurer_vote WHERE t2.election_cycle = \"Spring\"",
        "schema": "CREATE TABLE Student (LName TEXT, StuID NUMBER, Fname TEXT, Advisor NUMBER); CREATE TABLE Voting_record (Secretary_Vote NUMBER, StuID NUMBER, Vice_President_Vote NUMBER, Class_President_Vote NUMBER, Class_Senator_Vote NUMBER, President_Vote NUMBER, Election_Cycle TEXT, Treasurer_Vote NUMBER);"
      }
    ],
    [
      {
        "question": "How many students have president votes?",
        "query": "SELECT count(DISTINCT t1.stuid) FROM student AS t1 JOIN voting_record AS t2 ON t1.stuid = t2.president_vote",
        "schema": "CREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT); CREATE TABLE Voting_record (Vice_President_Vote NUMBER, Secretary_Vote NUMBER, Class_President_Vote NUMBER, StuID NUMBER, President_Vote NUMBER);"
      },
      {
        "question": "How many of them are female?",
        "query": "SELECT count(DISTINCT t1.stuid) FROM student AS t1 JOIN voting_record AS t2 ON t1.stuid = t2.president_vote WHERE t1.sex = \"F\"",
        "schema": "CREATE TABLE Voting_record (Secretary_Vote NUMBER, Treasurer_Vote NUMBER, President_Vote NUMBER, Class_President_Vote NUMBER, Vice_President_Vote NUMBER, StuID NUMBER, Class_Senator_Vote NUMBER); CREATE TABLE Student (LName TEXT, Sex TEXT, Fname TEXT, StuID NUMBER);"
      },
      {
        "question": "What are their first and last names?",
        "query": "SELECT DISTINCT t1.fname , t1.lname FROM student AS t1 JOIN voting_record AS t2 ON t1.stuid = t2.president_vote WHERE t1.sex = \"F\"",
        "schema": "CREATE TABLE Voting_record (Class_President_Vote NUMBER, Treasurer_Vote NUMBER, President_Vote NUMBER, Vice_President_Vote NUMBER, StuID NUMBER, Class_Senator_Vote NUMBER, Secretary_Vote NUMBER); CREATE TABLE Student (Sex TEXT, LName TEXT, StuID NUMBER, Fname TEXT);"
      }
    ],
    [
      {
        "question": "How many students have vice President votes?",
        "query": "SELECT count(DISTINCT t1.stuid) FROM student AS t1 JOIN voting_record AS t2 ON t1.stuid = t2.vice_president_vote",
        "schema": "CREATE TABLE Voting_record (President_Vote NUMBER, Secretary_Vote NUMBER, Vice_President_Vote NUMBER, StuID NUMBER, Class_President_Vote NUMBER); CREATE TABLE Student (LName TEXT, Fname TEXT, StuID NUMBER);"
      },
      {
        "question": "What are their names?",
        "query": "SELECT DISTINCT t1.fname, t1.lname FROM student AS t1 JOIN voting_record AS t2 ON t1.stuid = t2.vice_president_vote",
        "schema": "CREATE TABLE Student (StuID NUMBER, LName TEXT, Sex TEXT, Fname TEXT); CREATE TABLE Voting_record (Class_President_Vote NUMBER, Secretary_Vote NUMBER, StuID NUMBER, President_Vote NUMBER, Vice_President_Vote NUMBER);"
      },
      {
        "question": "How many of them are 18 years old?",
        "query": "SELECT count(DISTINCT t1.stuid) FROM student AS t1 JOIN voting_record AS t2 ON t1.stuid = t2.vice_president_vote WHERE t1.age = 18",
        "schema": "CREATE TABLE Voting_record (Vice_President_Vote NUMBER, StuID NUMBER, President_Vote NUMBER, Class_President_Vote NUMBER, Secretary_Vote NUMBER); CREATE TABLE Student (Sex TEXT, StuID NUMBER, Age NUMBER, LName TEXT, Fname TEXT);"
      },
      {
        "question": "What are their first and last names?",
        "query": "SELECT DISTINCT t1.fname , t1.lname FROM student AS t1 JOIN voting_record AS t2 ON t1.stuid = t2.vice_president_vote WHERE t1.age = 18",
        "schema": "CREATE TABLE Voting_record (President_Vote NUMBER, Class_President_Vote NUMBER, Vice_President_Vote NUMBER, Secretary_Vote NUMBER, StuID NUMBER); CREATE TABLE Student (LName TEXT, Fname TEXT, Sex TEXT, Age NUMBER, StuID NUMBER);"
      }
    ],
    [
      {
        "question": "How many students have class senator votes?",
        "query": "SELECT count(DISTINCT t1.stuid) FROM student AS t1 JOIN voting_record AS t2 ON t1.stuid = class_senator_vote",
        "schema": "CREATE TABLE Student (LName TEXT, Fname TEXT, StuID NUMBER); CREATE TABLE Voting_record (Class_President_Vote NUMBER, Secretary_Vote NUMBER, StuID NUMBER, Class_Senator_Vote NUMBER, President_Vote NUMBER);"
      },
      {
        "question": "How many of those votes are from the fall election cycle?",
        "query": "SELECT count(DISTINCT t1.stuid) FROM student AS t1 JOIN voting_record AS t2 ON t1.stuid = class_senator_vote WHERE t2.election_cycle = \"Fall\"",
        "schema": "CREATE TABLE Voting_record (President_Vote NUMBER, Secretary_Vote NUMBER, StuID NUMBER, Election_Cycle TEXT, Class_Senator_Vote NUMBER, Class_President_Vote NUMBER); CREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT);"
      },
      {
        "question": "How many are for male students?",
        "query": "SELECT count(*) FROM student AS t1 JOIN voting_record AS t2 ON t1.stuid = class_senator_vote WHERE t1.sex = \"M\" AND t2.election_cycle = \"Fall\"",
        "schema": "CREATE TABLE Voting_record (Election_Cycle TEXT, StuID NUMBER, Secretary_Vote NUMBER, President_Vote NUMBER, Class_Senator_Vote NUMBER, Class_President_Vote NUMBER); CREATE TABLE Student (StuID NUMBER, Fname TEXT, Sex TEXT, LName TEXT);"
      }
    ],
    [
      {
        "question": "Count the number of students whose city code is NYC.",
        "query": "SELECT count(*) FROM student WHERE city_code = \"NYC\"",
        "schema": "CREATE TABLE Student (LName TEXT, Age NUMBER, StuID NUMBER, city_code TEXT, Fname TEXT);"
      },
      {
        "question": "What are their names?",
        "query": "SELECT fname, lname FROM student WHERE city_code = \"NYC\"",
        "schema": "CREATE TABLE Student (LName TEXT, Fname TEXT, Age NUMBER, StuID NUMBER, city_code TEXT);"
      },
      {
        "question": "How many of those students have class senator votes?",
        "query": "SELECT count(*) FROM student AS t1 JOIN voting_record AS t2 ON t1.stuid = class_senator_vote WHERE t1.city_code = \"NYC\"",
        "schema": "CREATE TABLE Voting_record (Class_Senator_Vote NUMBER, StuID NUMBER, Treasurer_Vote NUMBER, Class_President_Vote NUMBER); CREATE TABLE Student (LName TEXT, city_code TEXT, Age NUMBER, StuID NUMBER, Fname TEXT);"
      },
      {
        "question": "How many of those votes are from the spring election cycle?",
        "query": "SELECT count(*) FROM student AS t1 JOIN voting_record AS t2 ON t1.stuid = class_senator_vote WHERE t1.city_code = \"NYC\" AND t2.election_cycle = \"Spring\"",
        "schema": "CREATE TABLE Student (LName TEXT, StuID NUMBER, Age NUMBER, city_code TEXT, Fname TEXT); CREATE TABLE Voting_record (Treasurer_Vote NUMBER, Class_Senator_Vote NUMBER, StuID NUMBER, Secretary_Vote NUMBER, Election_Cycle TEXT, Vice_President_Vote NUMBER, Class_President_Vote NUMBER, President_Vote NUMBER);"
      }
    ],
    [
      {
        "question": "Count the number of students whose city code is NYC.",
        "query": "SELECT count(*) FROM student WHERE city_code = \"NYC\"",
        "schema": "CREATE TABLE Student (city_code TEXT, LName TEXT, Age NUMBER, StuID NUMBER, Fname TEXT);"
      },
      {
        "question": "How many have secretary votes?",
        "query": "SELECT count(DISTINCT t1.stuid) FROM student AS t1 JOIN voting_record AS t2 ON t1.stuid = secretary_vote WHERE t1.city_code = \"NYC\"",
        "schema": "CREATE TABLE Student (LName TEXT, Fname TEXT, StuID NUMBER, city_code TEXT, Age NUMBER); CREATE TABLE Voting_record (Vice_President_Vote NUMBER, StuID NUMBER, Secretary_Vote NUMBER, Treasurer_Vote NUMBER, President_Vote NUMBER, Class_Senator_Vote NUMBER);"
      },
      {
        "question": "Which of those students have votes from the spring election cycle? List their names.",
        "query": "SELECT DISTINCT t1.fname, t1.lname FROM student AS t1 JOIN voting_record AS t2 ON t1.stuid = secretary_vote WHERE t1.city_code = \"NYC\" AND t2.election_cycle = \"Spring\"",
        "schema": "CREATE TABLE Student (city_code TEXT, LName TEXT, StuID NUMBER, Age NUMBER, Fname TEXT); CREATE TABLE Voting_record (Secretary_Vote NUMBER, Class_Senator_Vote NUMBER, Vice_President_Vote NUMBER, President_Vote NUMBER, Election_Cycle TEXT, Class_President_Vote NUMBER, StuID NUMBER, Treasurer_Vote NUMBER);"
      },
      {
        "question": "What is their average age?",
        "query": "SELECT avg(t1.age) FROM student AS t1 JOIN voting_record AS t2 ON t1.stuid = secretary_vote WHERE t1.city_code = \"NYC\" AND t2.election_cycle = \"Spring\"",
        "schema": "CREATE TABLE Voting_record (Vice_President_Vote NUMBER, Election_Cycle TEXT, President_Vote NUMBER, Treasurer_Vote NUMBER, Class_Senator_Vote NUMBER, Class_President_Vote NUMBER, StuID NUMBER, Secretary_Vote NUMBER); CREATE TABLE Student (Age NUMBER, StuID NUMBER, Fname TEXT, city_code TEXT, LName TEXT);"
      }
    ],
    [
      {
        "question": "How many female students are there?",
        "query": "SELECT count(*) FROM student WHERE sex = \"F\"",
        "schema": "CREATE TABLE Student (StuID NUMBER, Fname TEXT, Sex TEXT, LName TEXT, Age NUMBER);"
      },
      {
        "question": "How many have secretary votes?",
        "query": "SELECT count(DISTINCT t1.stuid) FROM student AS t1 JOIN voting_record AS t2 ON t1.stuid = secretary_vote WHERE t1.sex = \"F\"",
        "schema": "CREATE TABLE Student (Fname TEXT, Sex TEXT, StuID NUMBER, Age NUMBER, LName TEXT); CREATE TABLE Voting_record (Vice_President_Vote NUMBER, Class_Senator_Vote NUMBER, Secretary_Vote NUMBER, President_Vote NUMBER, Class_President_Vote NUMBER, Treasurer_Vote NUMBER, StuID NUMBER);"
      },
      {
        "question": "Which of them have votes from the spring election cycle? List their names.",
        "query": "SELECT count(DISTINCT t1.stuid) FROM student AS t1 JOIN voting_record AS t2 ON t1.stuid = secretary_vote WHERE t1.sex = \"F\" AND t2.election_cycle = \"Spring\"",
        "schema": "CREATE TABLE Voting_record (StuID NUMBER, Secretary_Vote NUMBER, Class_President_Vote NUMBER, Treasurer_Vote NUMBER, Election_Cycle TEXT, Class_Senator_Vote NUMBER, President_Vote NUMBER, Vice_President_Vote NUMBER); CREATE TABLE Student (Sex TEXT, Fname TEXT, LName TEXT, StuID NUMBER, Age NUMBER);"
      },
      {
        "question": "What is their average age?",
        "query": "SELECT avg(t1.age) FROM student AS t1 JOIN voting_record AS t2 ON t1.stuid = secretary_vote WHERE t1.sex = \"F\" AND t2.election_cycle = \"Spring\"",
        "schema": "CREATE TABLE Student (StuID NUMBER, Fname TEXT, Age NUMBER, Sex TEXT, LName TEXT); CREATE TABLE Voting_record (Class_Senator_Vote NUMBER, Class_President_Vote NUMBER, StuID NUMBER, Treasurer_Vote NUMBER, Election_Cycle TEXT, President_Vote NUMBER, Vice_President_Vote NUMBER, Secretary_Vote NUMBER);"
      }
    ],
    [
      {
        "question": "How many students have Vice President votes?",
        "query": "SELECT count(DISTINCT t1.stuid) FROM student AS t1 JOIN voting_record AS t2 ON t1.stuid = vice_president_vote",
        "schema": "CREATE TABLE Student (LName TEXT, StuID NUMBER, Fname TEXT); CREATE TABLE Voting_record (Class_President_Vote NUMBER, President_Vote NUMBER, Vice_President_Vote NUMBER, StuID NUMBER, Secretary_Vote NUMBER);"
      },
      {
        "question": "Count the number of those students whose city code is not PIT.",
        "query": "SELECT count(DISTINCT t1.stuid) FROM student AS t1 JOIN voting_record AS t2 ON t1.stuid = vice_president_vote WHERE city_code != \"PIT\"",
        "schema": "CREATE TABLE Student (city_code TEXT, Fname TEXT, StuID NUMBER, LName TEXT); CREATE TABLE Voting_record (Treasurer_Vote NUMBER, Secretary_Vote NUMBER, President_Vote NUMBER, Class_President_Vote NUMBER, Vice_President_Vote NUMBER, StuID NUMBER, Class_Senator_Vote NUMBER);"
      },
      {
        "question": "Please list their names.",
        "query": "SELECT DISTINCT t1.fname, t1.lname FROM student AS t1 JOIN voting_record AS t2 ON t1.stuid = t2.vice_president_vote EXCEPT SELECT DISTINCT fname, lname FROM student WHERE city_code = \"PIT\"",
        "schema": "CREATE TABLE Voting_record (Treasurer_Vote NUMBER, President_Vote NUMBER, StuID NUMBER, Vice_President_Vote NUMBER, Class_President_Vote NUMBER, Secretary_Vote NUMBER, Class_Senator_Vote NUMBER); CREATE TABLE Student (StuID NUMBER, LName TEXT, city_code TEXT, Fname TEXT);"
      },
      {
        "question": "Please only list their first names.",
        "query": "SELECT DISTINCT t1.fname FROM student AS t1 JOIN voting_record AS t2 ON t1.stuid = t2.vice_president_vote EXCEPT SELECT DISTINCT fname FROM student WHERE city_code = \"PIT\"",
        "schema": "CREATE TABLE Voting_record (Treasurer_Vote NUMBER, StuID NUMBER, Vice_President_Vote NUMBER, President_Vote NUMBER, Class_Senator_Vote NUMBER, Secretary_Vote NUMBER, Class_President_Vote NUMBER); CREATE TABLE Student (LName TEXT, city_code TEXT, Fname TEXT, StuID NUMBER);"
      }
    ],
    [
      {
        "question": "Which students have president votes?",
        "query": "SELECT DISTINCT t1.fname, t1.lname FROM student AS t1 JOIN voting_record AS t2 ON t1.stuid = t2.president_vote",
        "schema": "CREATE TABLE Voting_record (Secretary_Vote NUMBER, StuID NUMBER, Class_President_Vote NUMBER, Vice_President_Vote NUMBER, President_Vote NUMBER); CREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT);"
      },
      {
        "question": "How many of those students do not have advisor 2192?",
        "query": "SELECT count(DISTINCT t1.stuid) FROM student AS t1 JOIN voting_record AS t2 ON t1.stuid = t2.president_vote WHERE t1.advisor != \"2192\"",
        "schema": "CREATE TABLE Student (Advisor NUMBER, StuID NUMBER, LName TEXT, Fname TEXT); CREATE TABLE Voting_record (President_Vote NUMBER, StuID NUMBER, Treasurer_Vote NUMBER, Vice_President_Vote NUMBER, Secretary_Vote NUMBER, Class_Senator_Vote NUMBER, Class_President_Vote NUMBER);"
      },
      {
        "question": "What are their names?",
        "query": "SELECT DISTINCT t1.fname, t1.lname FROM student AS t1 JOIN voting_record AS t2 ON t1.stuid = president_vote EXCEPT SELECT DISTINCT fname, lname FROM student WHERE advisor = \"2192\"",
        "schema": "CREATE TABLE Student (Advisor NUMBER, LName TEXT, Fname TEXT, StuID NUMBER); CREATE TABLE Voting_record (StuID NUMBER, Class_President_Vote NUMBER, Treasurer_Vote NUMBER, President_Vote NUMBER, Secretary_Vote NUMBER, Vice_President_Vote NUMBER, Class_Senator_Vote NUMBER);"
      },
      {
        "question": "Please only list last names.",
        "query": "SELECT DISTINCT t1.lname FROM student AS t1 JOIN voting_record AS t2 ON t1.stuid = president_vote EXCEPT SELECT DISTINCT lname FROM student WHERE advisor = \"2192\"",
        "schema": "CREATE TABLE Voting_record (Class_President_Vote NUMBER, Secretary_Vote NUMBER, StuID NUMBER, Vice_President_Vote NUMBER, Treasurer_Vote NUMBER, President_Vote NUMBER, Class_Senator_Vote NUMBER); CREATE TABLE Student (StuID NUMBER, Advisor NUMBER, LName TEXT, Fname TEXT);"
      }
    ],
    [
      {
        "question": "How many students have president votes?",
        "query": "SELECT count(DISTINCT t1.stuid) FROM student AS t1 JOIN voting_record AS t2 ON t1.stuid = t2.president_vote",
        "schema": "CREATE TABLE Voting_record (Vice_President_Vote NUMBER, Class_President_Vote NUMBER, President_Vote NUMBER, StuID NUMBER); CREATE TABLE Student (Fname TEXT, StuID NUMBER, LName TEXT);"
      },
      {
        "question": "How many of those students have advisor 8741?",
        "query": "SELECT count(DISTINCT t1.stuid) FROM student AS t1 JOIN voting_record AS t2 ON t1.stuid = t2.president_vote WHERE t1.advisor = \"8741\"",
        "schema": "CREATE TABLE Voting_record (Class_President_Vote NUMBER, StuID NUMBER, President_Vote NUMBER, Vice_President_Vote NUMBER); CREATE TABLE Student (Advisor NUMBER, LName TEXT, Fname TEXT, StuID NUMBER);"
      },
      {
        "question": "What are their names?",
        "query": "SELECT DISTINCT t1.fname, t1.lname FROM student AS t1 JOIN voting_record AS t2 ON t1.stuid = t2.president_vote WHERE t1.advisor = \"8741\"",
        "schema": "CREATE TABLE Voting_record (StuID NUMBER, Class_Senator_Vote NUMBER, President_Vote NUMBER, Vice_President_Vote NUMBER, Class_President_Vote NUMBER, Treasurer_Vote NUMBER); CREATE TABLE Student (LName TEXT, Fname TEXT, StuID NUMBER, Advisor NUMBER);"
      },
      {
        "question": "Please only list last names.",
        "query": "SELECT DISTINCT t1.lname FROM student AS t1 JOIN voting_record AS t2 ON t1.stuid = president_vote INTERSECT SELECT DISTINCT lname FROM student WHERE advisor = \"8741\"",
        "schema": "CREATE TABLE Voting_record (President_Vote NUMBER, Class_President_Vote NUMBER, Treasurer_Vote NUMBER, Class_Senator_Vote NUMBER, Vice_President_Vote NUMBER, StuID NUMBER); CREATE TABLE Student (StuID NUMBER, Advisor NUMBER, LName TEXT, Fname TEXT);"
      }
    ],
    [
      {
        "question": "What are all of the advisors?",
        "query": "SELECT DISTINCT advisor FROM student",
        "schema": "CREATE TABLE Student (StuID NUMBER, Advisor NUMBER);"
      },
      {
        "question": "How many advise 2 students or less?",
        "query": "SELECT count(*) FROM (SELECT advisor FROM student GROUP BY advisor HAVING count(*) <= 2)",
        "schema": "CREATE TABLE Student (LName TEXT, Advisor NUMBER, StuID NUMBER);"
      },
      {
        "question": "How many advise more than 2 students?",
        "query": "SELECT count(*) FROM (SELECT advisor FROM student GROUP BY advisor HAVING count(*) > 2)",
        "schema": "CREATE TABLE Student (Advisor NUMBER, LName TEXT, StuID NUMBER);"
      },
      {
        "question": "Please report these advisors.",
        "query": "SELECT advisor FROM student GROUP BY advisor HAVING count(*) > 2",
        "schema": "CREATE TABLE Student (LName TEXT, Advisor NUMBER, StuID NUMBER);"
      }
    ],
    [
      {
        "question": "Report all majors.",
        "query": "SELECT DISTINCT major FROM student",
        "schema": "CREATE TABLE Student (Major NUMBER, StuID NUMBER);"
      },
      {
        "question": "How many have 3 students or more?",
        "query": "SELECT count(*) FROM (SELECT major FROM student GROUP BY major HAVING count(*) >= 3)",
        "schema": "CREATE TABLE Student (StuID NUMBER, Major NUMBER, LName TEXT, Age NUMBER);"
      },
      {
        "question": "How many have less than 3 students?",
        "query": "SELECT count(*) FROM (SELECT major FROM student GROUP BY major HAVING count(*) < 3)",
        "schema": "CREATE TABLE Student (LName TEXT, Major NUMBER, Age NUMBER, StuID NUMBER);"
      },
      {
        "question": "Report those majors with less than 3 students.",
        "query": "SELECT major FROM student GROUP BY major HAVING count(*) < 3",
        "schema": "CREATE TABLE Student (Major NUMBER, Age NUMBER, StuID NUMBER, LName TEXT);"
      }
    ],
    [
      {
        "question": "Report all majors.",
        "query": "SELECT DISTINCT major FROM student",
        "schema": "CREATE TABLE Student (StuID NUMBER, Major NUMBER);"
      },
      {
        "question": "Report the number of students per major as well.",
        "query": "SELECT major, count(*) FROM student GROUP BY major",
        "schema": "CREATE TABLE Student (LName TEXT, StuID NUMBER, Major NUMBER);"
      },
      {
        "question": "Order the majors by decreasing number of students.",
        "query": "SELECT major, count(*) FROM student GROUP BY major ORDER BY count(*) DESC",
        "schema": "CREATE TABLE Student (Major NUMBER, StuID NUMBER, LName TEXT);"
      },
      {
        "question": "Which major has the most students?",
        "query": "SELECT major FROM student GROUP BY major ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Student (Major NUMBER, LName TEXT, StuID NUMBER);"
      }
    ],
    [
      {
        "question": "List the majors of female students.",
        "query": "SELECT DISTINCT major FROM student WHERE sex = \"F\"",
        "schema": "CREATE TABLE Student (Major NUMBER, LName TEXT, Sex TEXT, StuID NUMBER);"
      },
      {
        "question": "Order the majors by decreasing number of students.",
        "query": "SELECT DISTINCT major FROM student WHERE sex = \"F\" GROUP BY major ORDER BY count(*) DESC",
        "schema": "CREATE TABLE Student (StuID NUMBER, LName TEXT, Major NUMBER, Sex TEXT);"
      },
      {
        "question": "What is the most common major?",
        "query": "SELECT major FROM student WHERE sex = \"F\" GROUP BY major ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Student (Sex TEXT, Major NUMBER, LName TEXT, StuID NUMBER);"
      }
    ],
    [
      {
        "question": "How many students live in each city?",
        "query": "SELECT city_code, count(*) FROM student GROUP BY city_code",
        "schema": "CREATE TABLE Student (LName TEXT, StuID NUMBER, city_code TEXT);"
      },
      {
        "question": "List the cities from the one with the most students to the one with the least students.",
        "query": "SELECT city_code FROM student GROUP BY city_code ORDER BY count(*) DESC",
        "schema": "CREATE TABLE Student (LName TEXT, StuID NUMBER, city_code TEXT);"
      },
      {
        "question": "How many students live in the most popular city?",
        "query": "SELECT count(*) FROM student GROUP BY city_code ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Student (city_code TEXT, StuID NUMBER, LName TEXT);"
      },
      {
        "question": "What is the city code of the most popular city?",
        "query": "SELECT city_code FROM student GROUP BY city_code ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Student (LName TEXT, StuID NUMBER, city_code TEXT);"
      }
    ]
  ],
  "movie_1": [
    [
      {
        "question": "Give me movies that are directed by James Cameron.",
        "query": "SELECT title FROM movie WHERE director = 'James Cameron'",
        "schema": "CREATE TABLE Movie (title TEXT, mID NUMBER, director TEXT);"
      },
      {
        "question": "What about those that also produced after 2000 at the same time?",
        "query": "SELECT title FROM movie WHERE director = 'James Cameron' AND YEAR > 2000",
        "schema": "CREATE TABLE Movie (mID NUMBER, year NUMBER, director TEXT, title TEXT);"
      }
    ],
    [
      {
        "question": "Give me the name of all reviewers.",
        "query": "SELECT name FROM reviewer",
        "schema": "CREATE TABLE Reviewer (rID NUMBER, name TEXT); CREATE TABLE Rating (rID NUMBER);"
      },
      {
        "question": "Whose name contains \"Mike\"?",
        "query": "SELECT name FROM reviewer WHERE name LIKE \"%Mike%\"",
        "schema": "CREATE TABLE Rating (rID NUMBER); CREATE TABLE Reviewer (name TEXT, rID NUMBER);"
      },
      {
        "question": "What about his id?",
        "query": "SELECT rid FROM reviewer WHERE name LIKE \"%Mike%\"",
        "schema": "CREATE TABLE Rating (rID NUMBER); CREATE TABLE Reviewer (name TEXT, rID NUMBER);"
      }
    ],
    [
      {
        "question": "What are the ratings?",
        "query": "SELECT * FROM rating",
        "schema": "CREATE TABLE Reviewer (rID NUMBER); CREATE TABLE Rating (mID NUMBER, stars NUMBER, rID NUMBER); CREATE TABLE Movie (mID NUMBER);"
      },
      {
        "question": "Show me the lowest and highest stars.",
        "query": "SELECT max(stars) , min(stars) FROM rating",
        "schema": "CREATE TABLE Rating (stars NUMBER, rID NUMBER, mID NUMBER); CREATE TABLE Movie (mID NUMBER); CREATE TABLE Reviewer (rID NUMBER);"
      }
    ],
    [
      {
        "question": "Show me the name of all movies.",
        "query": "SELECT title FROM movie",
        "schema": "CREATE TABLE Movie (mID NUMBER, title TEXT);"
      },
      {
        "question": "What about their ratings?",
        "query": "SELECT t1.title, t2.stars FROM movie AS t1 JOIN rating AS t2 ON t1.mid = t2.mid",
        "schema": "CREATE TABLE Movie (mID NUMBER, title TEXT); CREATE TABLE Rating (mID NUMBER, rID NUMBER, stars NUMBER);"
      },
      {
        "question": "Only show those with a rating of 4 or 5.",
        "query": "SELECT t1.title, t2.stars FROM movie AS t1 JOIN rating AS t2 ON t1.mid = t2.mid WHERE t2.stars >= 4",
        "schema": "CREATE TABLE Rating (mID NUMBER, stars NUMBER, rID NUMBER); CREATE TABLE Movie (mID NUMBER, title TEXT);"
      },
      {
        "question": "Give me all years that have any of those movies in the order of year.",
        "query": "SELECT DISTINCT YEAR FROM movie AS t1 JOIN rating AS t2 ON t1.mid = t2.mid WHERE t2.stars >= 4 ORDER BY t1.year",
        "schema": "CREATE TABLE Rating (rID NUMBER, stars NUMBER, mID NUMBER); CREATE TABLE Movie (mID NUMBER, year NUMBER, title TEXT);"
      }
    ],
    [
      {
        "question": "Show me the names of all movies.",
        "query": "SELECT title FROM movie",
        "schema": "CREATE TABLE Movie (mID NUMBER, title TEXT);"
      },
      {
        "question": "What about those with 5 star rating?",
        "query": "SELECT t1.title FROM movie AS t1 JOIN rating AS t2 ON t1.mid = t2.mid WHERE t2.stars = 5",
        "schema": "CREATE TABLE Rating (stars NUMBER, mID NUMBER, rID NUMBER); CREATE TABLE Movie (title TEXT, mID NUMBER);"
      },
      {
        "question": "Who directed those movies?",
        "query": "SELECT t1.director , t1.title FROM movie AS t1 JOIN rating AS t2 ON t1.mid = t2.mid WHERE t2.stars = 5",
        "schema": "CREATE TABLE Rating (stars NUMBER, rID NUMBER, mID NUMBER); CREATE TABLE Movie (title TEXT, mID NUMBER, director TEXT);"
      }
    ],
    [
      {
        "question": "Who are all the reviewers?",
        "query": "SELECT name FROM reviewer",
        "schema": "CREATE TABLE Rating (mID NUMBER, rID NUMBER); CREATE TABLE Reviewer (name TEXT, rID NUMBER);"
      },
      {
        "question": "What is their highest rating?",
        "query": "SELECT t2.name , max(t1.stars) FROM rating AS t1 JOIN reviewer AS t2 ON t1.rid = t2.rid GROUP BY t2.name",
        "schema": "CREATE TABLE Reviewer (rID NUMBER, name TEXT); CREATE TABLE Rating (rID NUMBER, stars NUMBER, mID NUMBER);"
      },
      {
        "question": "What is their lowest rating?",
        "query": "SELECT t2.name , min(t1.stars) FROM rating AS t1 JOIN reviewer AS t2 ON t1.rid = t2.rid GROUP BY t2.name",
        "schema": "CREATE TABLE Rating (mID NUMBER, stars NUMBER, rID NUMBER); CREATE TABLE Reviewer (name TEXT, rID NUMBER);"
      },
      {
        "question": "What about their average rating?",
        "query": "SELECT t2.name , avg(t1.stars) FROM rating AS t1 JOIN reviewer AS t2 ON t1.rid = t2.rid GROUP BY t2.name",
        "schema": "CREATE TABLE Reviewer (name TEXT, rID NUMBER); CREATE TABLE Rating (mID NUMBER, stars NUMBER, rID NUMBER);"
      }
    ],
    [
      {
        "question": "What are the title of all movies?",
        "query": "SELECT title FROM movie",
        "schema": "CREATE TABLE Movie (title TEXT, mID NUMBER);"
      },
      {
        "question": "What about those without any rating?",
        "query": "SELECT title FROM movie WHERE mid NOT IN (SELECT mid FROM rating)",
        "schema": "CREATE TABLE Movie (mID NUMBER, title TEXT); CREATE TABLE Rating (rID NUMBER, mID NUMBER, stars NUMBER);"
      }
    ],
    [
      {
        "question": "What are the titles of all movies?",
        "query": "SELECT title FROM movie",
        "schema": "CREATE TABLE Movie (mID NUMBER, title TEXT);"
      },
      {
        "question": "Which one is the oldest?",
        "query": "SELECT title FROM movie WHERE YEAR = (SELECT min(YEAR) FROM movie)",
        "schema": "CREATE TABLE Movie (year NUMBER, mID NUMBER, title TEXT);"
      },
      {
        "question": "What is its average rating stars?",
        "query": "SELECT avg(t1.stars) , t2.title FROM rating AS t1 JOIN movie AS t2 ON t1.mid = t2.mid WHERE t2.year = (SELECT min(YEAR) FROM movie)",
        "schema": "CREATE TABLE Rating (stars NUMBER, mID NUMBER); CREATE TABLE Movie (title TEXT, mID NUMBER, year NUMBER);"
      }
    ],
    [
      {
        "question": "What are the titles of all movies?",
        "query": "SELECT title FROM movie",
        "schema": "CREATE TABLE Movie (mID NUMBER, title TEXT);"
      },
      {
        "question": "Which one is the most recent?",
        "query": "SELECT title FROM movie WHERE YEAR = (SELECT max(YEAR) FROM movie)",
        "schema": "CREATE TABLE Movie (mID NUMBER, year NUMBER, title TEXT);"
      }
    ],
    [
      {
        "question": "What are the titles of all movies?",
        "query": "SELECT title FROM movie",
        "schema": "CREATE TABLE Movie (title TEXT, mID NUMBER);"
      },
      {
        "question": "Which one is the most recent?",
        "query": "SELECT title FROM movie WHERE YEAR = (SELECT max(YEAR) FROM movie)",
        "schema": "CREATE TABLE Movie (title TEXT, mID NUMBER, year NUMBER);"
      },
      {
        "question": "What is its highest rating stars?",
        "query": "SELECT max(t1.stars) , t2.title FROM rating AS t1 JOIN movie AS t2 ON t1.mid = t2.mid WHERE t2.year = (SELECT max(YEAR) FROM movie)",
        "schema": "CREATE TABLE Rating (mID NUMBER, stars NUMBER); CREATE TABLE Movie (title TEXT, year NUMBER, mID NUMBER);"
      }
    ],
    [
      {
        "question": "Show me the movies directed by Steven Spielberg.",
        "query": "SELECT title FROM movie WHERE director = \"Steven Spielberg\"",
        "schema": "CREATE TABLE Movie (year NUMBER, director TEXT, mID NUMBER, title TEXT);"
      },
      {
        "question": "What about their years?",
        "query": "SELECT title, YEAR FROM movie WHERE director = \"Steven Spielberg\"",
        "schema": "CREATE TABLE Movie (year NUMBER, mID NUMBER, director TEXT, title TEXT);"
      },
      {
        "question": "Show me the movies that were created after all of the above movies.",
        "query": "SELECT title FROM movie WHERE YEAR > (SELECT max(YEAR) FROM movie WHERE director = \"Steven Spielberg\")",
        "schema": "CREATE TABLE Movie (director TEXT, title TEXT, year NUMBER, mID NUMBER);"
      }
    ],
    [
      {
        "question": "Show me the movies directed by James Cameron.",
        "query": "SELECT title FROM movie WHERE director = \"James Cameron\"",
        "schema": "CREATE TABLE Movie (director TEXT, title TEXT, mID NUMBER);"
      },
      {
        "question": "What about their rating stars?",
        "query": "SELECT t1.stars FROM rating AS t1 JOIN movie AS t2 ON t1.mid = t2.mid WHERE t2.director = \"James Cameron\"",
        "schema": "CREATE TABLE Rating (rID NUMBER, stars NUMBER, mID NUMBER); CREATE TABLE Movie (title TEXT, mID NUMBER, director TEXT);"
      },
      {
        "question": "Show me the average of them.",
        "query": "SELECT avg(t1.stars) FROM rating AS t1 JOIN movie AS t2 ON t1.mid = t2.mid WHERE t2.director = \"James Cameron\"",
        "schema": "CREATE TABLE Rating (mID NUMBER, rID NUMBER, stars NUMBER); CREATE TABLE Movie (mID NUMBER, director TEXT, title TEXT);"
      },
      {
        "question": "Give me the titles and directors of movies whose star is greater than that.",
        "query": "SELECT t2.title , t2.director FROM rating AS t1 JOIN movie AS t2 ON t1.mid = t2.mid WHERE t1.stars > (SELECT avg(t1.stars) FROM rating AS t1 JOIN movie AS t2 ON t1.mid = t2.mid WHERE t2.director = \"James Cameron\")",
        "schema": "CREATE TABLE Movie (director TEXT, title TEXT, mID NUMBER); CREATE TABLE Rating (rID NUMBER, stars NUMBER, mID NUMBER);"
      }
    ],
    [
      {
        "question": "What are the titles of all movies?",
        "query": "SELECT title FROM movie",
        "schema": "CREATE TABLE Movie (mID NUMBER, title TEXT);"
      },
      {
        "question": "Show me their reviewer's name, stars, and rating date.",
        "query": "SELECT t3.name , t2.title , t1.stars , t1.ratingdate FROM rating AS t1 JOIN movie AS t2 ON t1.mid = t2.mid JOIN reviewer AS t3 ON t1.rid = t3.rid",
        "schema": "CREATE TABLE Reviewer (name TEXT, rID NUMBER); CREATE TABLE Rating (mID NUMBER, ratingDate TIME, rID NUMBER, stars NUMBER); CREATE TABLE Movie (mID NUMBER, year NUMBER, title TEXT);"
      },
      {
        "question": "Sort them first by reviewer name, then by movie title, and lastly by number of stars.",
        "query": "SELECT t3.name , t2.title , t1.stars , t1.ratingdate FROM rating AS t1 JOIN movie AS t2 ON t1.mid = t2.mid JOIN reviewer AS t3 ON t1.rid = t3.rid ORDER BY t3.name , t2.title , t1.stars",
        "schema": "CREATE TABLE Reviewer (rID NUMBER, name TEXT); CREATE TABLE Movie (mID NUMBER, year NUMBER, title TEXT); CREATE TABLE Rating (mID NUMBER, ratingDate TIME, stars NUMBER, rID NUMBER);"
      }
    ],
    [
      {
        "question": "Show me the names of all the reviewers.",
        "query": "SELECT name FROM reviewer",
        "schema": "CREATE TABLE Movie (title TEXT, mID NUMBER); CREATE TABLE Rating (rID NUMBER); CREATE TABLE Reviewer (name TEXT, rID NUMBER);"
      },
      {
        "question": "What about the ratings they have contributed?",
        "query": "SELECT * FROM rating AS t1 JOIN reviewer AS t2 ON t1.rid = t2.rid",
        "schema": "CREATE TABLE Reviewer (rID NUMBER, name TEXT); CREATE TABLE Rating (rID NUMBER, stars NUMBER, mID NUMBER); CREATE TABLE Movie (mID NUMBER, title TEXT);"
      },
      {
        "question": "Show me the reviewers who have contributed three or more ratings.",
        "query": "SELECT t2.name FROM rating AS t1 JOIN reviewer AS t2 ON t1.rid = t2.rid GROUP BY t1.rid HAVING count(*) >= 3",
        "schema": "CREATE TABLE Rating (stars NUMBER, mID NUMBER, rID NUMBER); CREATE TABLE Reviewer (name TEXT, rID NUMBER); CREATE TABLE Movie (mID NUMBER, title TEXT);"
      }
    ],
    [
      {
        "question": "Show me the ratings for Gone with the Wind.",
        "query": "SELECT * FROM rating AS t1 JOIN movie AS t2 ON t1.mid = t2.mid JOIN reviewer AS t3 ON t1.rid = t3.rid WHERE t2.title = 'Gone with the Wind'",
        "schema": "CREATE TABLE Rating (stars NUMBER, rID NUMBER, mID NUMBER); CREATE TABLE Reviewer (rID NUMBER); CREATE TABLE Movie (title TEXT, mID NUMBER);"
      },
      {
        "question": "Give me the names of reviewers who gave those ratings.",
        "query": "SELECT DISTINCT t3.name FROM rating AS t1 JOIN movie AS t2 ON t1.mid = t2.mid JOIN reviewer AS t3 ON t1.rid = t3.rid WHERE t2.title = 'Gone with the Wind'",
        "schema": "CREATE TABLE Movie (title TEXT, mID NUMBER); CREATE TABLE Reviewer (rID NUMBER, name TEXT); CREATE TABLE Rating (rID NUMBER, stars NUMBER, mID NUMBER);"
      }
    ],
    [
      {
        "question": "Show me all the ratings given by Sarah Martinez.",
        "query": "SELECT * FROM rating AS t1 JOIN reviewer AS t2 ON t1.rid = t2.rid WHERE t2.name = \"Sarah Martinez\"",
        "schema": "CREATE TABLE Rating (stars NUMBER, rID NUMBER, mID NUMBER, ratingDate TIME); CREATE TABLE Movie (mID NUMBER); CREATE TABLE Reviewer (name TEXT, rID NUMBER);"
      },
      {
        "question": "What movies are those ratings about?",
        "query": "SELECT DISTINCT t1.title FROM movie AS t1 JOIN rating AS t2 ON t1.mid = t2.mid JOIN reviewer AS t3 ON t2.rid = t3.rid WHERE t3.name = \"Sarah Martinez\"",
        "schema": "CREATE TABLE Movie (mID NUMBER, title TEXT); CREATE TABLE Reviewer (name TEXT, rID NUMBER); CREATE TABLE Rating (mID NUMBER, rID NUMBER, stars NUMBER, ratingDate TIME);"
      },
      {
        "question": "Show me the directors of those movies.",
        "query": "SELECT DISTINCT t2.director FROM rating AS t1 JOIN movie AS t2 ON t1.mid = t2.mid JOIN reviewer AS t3 ON t1.rid = t3.rid WHERE t3.name = 'Sarah Martinez'",
        "schema": "CREATE TABLE Reviewer (rID NUMBER, name TEXT); CREATE TABLE Movie (director TEXT, mID NUMBER, title TEXT); CREATE TABLE Rating (stars NUMBER, mID NUMBER, ratingDate TIME, rID NUMBER);"
      }
    ],
    [
      {
        "question": "Show me the titles of all the movies.",
        "query": "SELECT title FROM movie",
        "schema": "CREATE TABLE Movie (title TEXT, mID NUMBER);"
      },
      {
        "question": "What about the name of their reviewers and directors?",
        "query": "SELECT t3.name, t2.title, t2.director FROM rating AS t1 JOIN movie AS t2 ON t1.mid = t2.mid JOIN reviewer AS t3 ON t1.rid = t3.rid",
        "schema": "CREATE TABLE Movie (title TEXT, mID NUMBER, director TEXT); CREATE TABLE Reviewer (rID NUMBER, name TEXT); CREATE TABLE Rating (rID NUMBER, mID NUMBER);"
      },
      {
        "question": "Show those who have the same names.",
        "query": "SELECT t3.name, t2.title, t2.director FROM rating AS t1 JOIN movie AS t2 ON t1.mid = t2.mid JOIN reviewer AS t3 ON t1.rid = t3.rid WHERE t2.director = t3.name",
        "schema": "CREATE TABLE Rating (stars NUMBER, mID NUMBER, rID NUMBER); CREATE TABLE Reviewer (name TEXT, rID NUMBER); CREATE TABLE Movie (director TEXT, mID NUMBER, title TEXT);"
      },
      {
        "question": "Give me the reviewer name, movie title, and number of stars.",
        "query": "SELECT DISTINCT t3.name , t2.title , t1.stars FROM rating AS t1 JOIN movie AS t2 ON t1.mid = t2.mid JOIN reviewer AS t3 ON t1.rid = t3.rid WHERE t2.director = t3.name",
        "schema": "CREATE TABLE Reviewer (name TEXT, rID NUMBER); CREATE TABLE Rating (stars NUMBER, mID NUMBER, rID NUMBER); CREATE TABLE Movie (director TEXT, title TEXT, mID NUMBER);"
      }
    ],
    [
      {
        "question": "Give me the names of all reviewers.",
        "query": "SELECT name FROM reviewer",
        "schema": "CREATE TABLE Rating (rID NUMBER); CREATE TABLE Reviewer (name TEXT, rID NUMBER);"
      },
      {
        "question": "Show me the title of all movies together in a single list.",
        "query": "SELECT name FROM reviewer UNION SELECT title FROM movie",
        "schema": "CREATE TABLE Rating (mID NUMBER, rID NUMBER); CREATE TABLE Reviewer (rID NUMBER, name TEXT); CREATE TABLE Movie (title TEXT, mID NUMBER);"
      }
    ],
    [
      {
        "question": "Give me the ratings given by Chris Jackson.",
        "query": "SELECT * FROM rating AS t1 JOIN reviewer AS t2 ON t1.rid = t2.rid AND t2.name = 'Chris Jackson'",
        "schema": "CREATE TABLE Movie (director TEXT, mID NUMBER); CREATE TABLE Rating (stars NUMBER, mID NUMBER, rID NUMBER); CREATE TABLE Reviewer (name TEXT, rID NUMBER);"
      },
      {
        "question": "What movies are they about?",
        "query": "SELECT t2.title FROM rating AS t1 JOIN movie AS t2 ON t1.mid = t2.mid JOIN reviewer AS t3 ON t1.rid = t3.rid WHERE t3.name = 'Chris Jackson'",
        "schema": "CREATE TABLE Reviewer (name TEXT, rID NUMBER); CREATE TABLE Rating (mID NUMBER, rID NUMBER, stars NUMBER); CREATE TABLE Movie (director TEXT, title TEXT, mID NUMBER);"
      },
      {
        "question": "Show me the movies other than those.",
        "query": "SELECT DISTINCT title FROM movie EXCEPT SELECT t2.title FROM rating AS t1 JOIN movie AS t2 ON t1.mid = t2.mid JOIN reviewer AS t3 ON t1.rid = t3.rid WHERE t3.name = 'Chris Jackson'",
        "schema": "CREATE TABLE Movie (mID NUMBER, title TEXT, director TEXT); CREATE TABLE Rating (rID NUMBER, mID NUMBER, stars NUMBER); CREATE TABLE Reviewer (rID NUMBER, name TEXT);"
      }
    ],
    [
      {
        "question": "What are all the directors?",
        "query": "SELECT DISTINCT director FROM movie",
        "schema": "CREATE TABLE Movie (title TEXT, mID NUMBER, director TEXT);"
      },
      {
        "question": "How many movies did each of them direct?",
        "query": "SELECT count(*), director FROM movie GROUP BY director",
        "schema": "CREATE TABLE Movie (director TEXT, title TEXT, mID NUMBER);"
      },
      {
        "question": "Show me those who directed more than one movie.",
        "query": "SELECT director FROM movie GROUP BY director HAVING count(*) > 1",
        "schema": "CREATE TABLE Movie (mID NUMBER, title TEXT, director TEXT);"
      },
      {
        "question": "Show me their directed movies' titles, in the order of director name, then movie title.",
        "query": "SELECT t1.title , t1.director FROM movie AS t1 JOIN movie AS t2 ON t1.director = t2.director WHERE t1.title != t2.title ORDER BY t1.director , t1.title",
        "schema": "CREATE TABLE Movie (title TEXT, director TEXT, mID NUMBER);"
      }
    ],
    [
      {
        "question": "What are all the directors?",
        "query": "SELECT DISTINCT director FROM movie",
        "schema": "CREATE TABLE Movie (title TEXT, director TEXT, mID NUMBER);"
      },
      {
        "question": "How many movies did each of them direct?",
        "query": "SELECT count(*), director FROM movie GROUP BY director",
        "schema": "CREATE TABLE Movie (mID NUMBER, director TEXT, title TEXT);"
      },
      {
        "question": "Show me those who directed more than one movie.",
        "query": "SELECT director FROM movie GROUP BY director HAVING count(*) > 1",
        "schema": "CREATE TABLE Movie (title TEXT, mID NUMBER, director TEXT);"
      },
      {
        "question": "Give me the titles and produced years of all movies directed by them.",
        "query": "SELECT t1.title , t1.year FROM movie AS t1 JOIN movie AS t2 ON t1.director = t2.director WHERE t1.title != t2.title",
        "schema": "CREATE TABLE Movie (mID NUMBER, year NUMBER, title TEXT, director TEXT);"
      }
    ],
    [
      {
        "question": "What are all the directors?",
        "query": "SELECT DISTINCT director FROM movie",
        "schema": "CREATE TABLE Movie (director TEXT, title TEXT, mID NUMBER);"
      },
      {
        "question": "How many movies did each of them direct?",
        "query": "SELECT count(*), director FROM movie GROUP BY director",
        "schema": "CREATE TABLE Movie (mID NUMBER, director TEXT, title TEXT);"
      },
      {
        "question": "Show me those who directed exactly one movie.",
        "query": "SELECT director FROM movie GROUP BY director HAVING count(*) = 1",
        "schema": "CREATE TABLE Movie (title TEXT, mID NUMBER, director TEXT);"
      }
    ],
    [
      {
        "question": "What are all the directors?",
        "query": "SELECT DISTINCT director FROM movie",
        "schema": "CREATE TABLE Movie (director TEXT, mID NUMBER, title TEXT);"
      },
      {
        "question": "How many movies did each of them direct?",
        "query": "SELECT count(*), director FROM movie GROUP BY director",
        "schema": "CREATE TABLE Movie (director TEXT, title TEXT, mID NUMBER);"
      },
      {
        "question": "Show me those who directed exactly one movie other than NULL.",
        "query": "SELECT director FROM movie WHERE director != \"null\" GROUP BY director HAVING count(*) = 1",
        "schema": "CREATE TABLE Movie (title TEXT, mID NUMBER, director TEXT);"
      }
    ],
    [
      {
        "question": "What are all the directors?",
        "query": "SELECT DISTINCT director FROM movie",
        "schema": "CREATE TABLE Movie (director TEXT, title TEXT, mID NUMBER);"
      },
      {
        "question": "How many movie reviews does each of them get?",
        "query": "SELECT count(*) , t1.director FROM movie AS t1 JOIN rating AS t2 ON t1.mid = t2.mid GROUP BY t1.director",
        "schema": "CREATE TABLE Reviewer (rID NUMBER); CREATE TABLE Movie (title TEXT, mID NUMBER, director TEXT); CREATE TABLE Rating (rID NUMBER, mID NUMBER);"
      }
    ],
    [
      {
        "question": "What are all the movies?",
        "query": "SELECT title FROM movie",
        "schema": "CREATE TABLE Rating (rID NUMBER, mID NUMBER); CREATE TABLE Movie (mID NUMBER, title TEXT);"
      },
      {
        "question": "What are their average ratings?",
        "query": "SELECT t2.title , avg(t1.stars) FROM rating AS t1 JOIN movie AS t2 ON t1.mid = t2.mid GROUP BY t1.mid",
        "schema": "CREATE TABLE Rating (mID NUMBER, stars NUMBER, rID NUMBER); CREATE TABLE Movie (title TEXT, mID NUMBER);"
      },
      {
        "question": "Give me the movies with the highest average rating.",
        "query": "SELECT t2.title , avg(t1.stars) FROM rating AS t1 JOIN movie AS t2 ON t1.mid = t2.mid GROUP BY t1.mid ORDER BY avg(t1.stars) DESC LIMIT 1",
        "schema": "CREATE TABLE Rating (rID NUMBER, stars NUMBER, mID NUMBER); CREATE TABLE Movie (title TEXT, mID NUMBER);"
      }
    ],
    [
      {
        "question": "What are all the movies?",
        "query": "SELECT title FROM movie",
        "schema": "CREATE TABLE Movie (mID NUMBER, title TEXT); CREATE TABLE Rating (mID NUMBER, rID NUMBER);"
      },
      {
        "question": "What are their average ratings?",
        "query": "SELECT t2.title , avg(t1.stars) FROM rating AS t1 JOIN movie AS t2 ON t1.mid = t2.mid GROUP BY t1.mid",
        "schema": "CREATE TABLE Rating (rID NUMBER, mID NUMBER, stars NUMBER); CREATE TABLE Movie (mID NUMBER, title TEXT);"
      },
      {
        "question": "Give me the movies with the lowest average rating.",
        "query": "SELECT t2.title , avg(t1.stars) FROM rating AS t1 JOIN movie AS t2 ON t1.mid = t2.mid GROUP BY t1.mid ORDER BY avg(t1.stars) LIMIT 1",
        "schema": "CREATE TABLE Movie (mID NUMBER, title TEXT); CREATE TABLE Rating (rID NUMBER, stars NUMBER, mID NUMBER);"
      }
    ],
    [
      {
        "question": "Show me the titles all the movies.",
        "query": "SELECT title FROM movie",
        "schema": "CREATE TABLE Rating (mID NUMBER); CREATE TABLE Movie (mID NUMBER, title TEXT);"
      },
      {
        "question": "What are their ratings?",
        "query": "SELECT t2.title , t1.stars FROM rating AS t1 JOIN movie AS t2 ON t1.mid = t2.mid",
        "schema": "CREATE TABLE Movie (title TEXT, mID NUMBER); CREATE TABLE Rating (rID NUMBER, stars NUMBER, mID NUMBER);"
      },
      {
        "question": "Show me the names and years of the movies that has the top 3 rating star.",
        "query": "SELECT t2.title , t2.year FROM rating AS t1 JOIN movie AS t2 ON t1.mid = t2.mid ORDER BY t1.stars DESC LIMIT 3",
        "schema": "CREATE TABLE Rating (rID NUMBER, mID NUMBER, stars NUMBER); CREATE TABLE Movie (year NUMBER, title TEXT, mID NUMBER);"
      }
    ],
    [
      {
        "question": "What are all the directors excluding NULL?",
        "query": "SELECT DISTINCT director FROM movie WHERE director != \"null\"",
        "schema": "CREATE TABLE Movie (mID NUMBER, director TEXT); CREATE TABLE Reviewer (rID NUMBER, name TEXT);"
      },
      {
        "question": "What about the highest rating their movies have ever received?",
        "query": "SELECT t2.director , max(t1.stars) FROM rating AS t1 JOIN movie AS t2 ON t1.mid = t2.mid WHERE director != \"null\" GROUP BY director",
        "schema": "CREATE TABLE Rating (mID NUMBER, rID NUMBER, stars NUMBER); CREATE TABLE Reviewer (rID NUMBER, name TEXT); CREATE TABLE Movie (mID NUMBER, title TEXT, director TEXT);"
      },
      {
        "question": "Also give me those movies' title.",
        "query": "SELECT t2.title , t1.stars , t2.director , max(t1.stars) FROM rating AS t1 JOIN movie AS t2 ON t1.mid = t2.mid WHERE director != \"null\" GROUP BY director",
        "schema": "CREATE TABLE Reviewer (rID NUMBER, name TEXT); CREATE TABLE Movie (mID NUMBER, director TEXT, title TEXT); CREATE TABLE Rating (mID NUMBER, stars NUMBER, rID NUMBER);"
      }
    ],
    [
      {
        "question": "What are the name of all the reviewers?",
        "query": "SELECT name FROM reviewer",
        "schema": "CREATE TABLE Rating (rID NUMBER); CREATE TABLE Reviewer (name TEXT, rID NUMBER); CREATE TABLE Movie (title TEXT, mID NUMBER);"
      },
      {
        "question": "What are the least rating stars they ever gave?",
        "query": "SELECT min(stars) FROM rating GROUP BY rid",
        "schema": "CREATE TABLE Rating (rID NUMBER, stars NUMBER, mID NUMBER); CREATE TABLE Reviewer (name TEXT, rID NUMBER); CREATE TABLE Movie (title TEXT, mID NUMBER);"
      },
      {
        "question": "Also show me the title of the movies that correspond to those rating stars.",
        "query": "SELECT t2.title , t1.rid , t1.stars , min(t1.stars) FROM rating AS t1 JOIN movie AS t2 ON t1.mid = t2.mid GROUP BY t1.rid",
        "schema": "CREATE TABLE Rating (rID NUMBER, mID NUMBER, stars NUMBER); CREATE TABLE Movie (mID NUMBER, title TEXT); CREATE TABLE Reviewer (name TEXT, rID NUMBER);"
      }
    ],
    [
      {
        "question": "Who are all the directors?",
        "query": "SELECT DISTINCT director FROM movie",
        "schema": "CREATE TABLE Movie (mID NUMBER, title TEXT, director TEXT);"
      },
      {
        "question": "What about the lowest rating their movies have ever received?",
        "query": "SELECT t2.director , min(t1.stars) FROM rating AS t1 JOIN movie AS t2 ON t1.mid = t2.mid GROUP BY director",
        "schema": "CREATE TABLE Rating (rID NUMBER, mID NUMBER, stars NUMBER); CREATE TABLE Movie (director TEXT, mID NUMBER, title TEXT);"
      },
      {
        "question": "Also give me those movies' title.",
        "query": "SELECT t2.title , t1.stars , t2.director , min(t1.stars) FROM rating AS t1 JOIN movie AS t2 ON t1.mid = t2.mid GROUP BY t2.director",
        "schema": "CREATE TABLE Rating (mID NUMBER, stars NUMBER, rID NUMBER); CREATE TABLE Movie (mID NUMBER, director TEXT, title TEXT);"
      }
    ],
    [
      {
        "question": "What are the names of all movies?",
        "query": "SELECT title FROM movie",
        "schema": "CREATE TABLE Movie (title TEXT, mID NUMBER);"
      },
      {
        "question": "How many ratings did each of them have?",
        "query": "SELECT count(*) FROM rating AS t1 JOIN movie AS t2 ON t1.mid = t2.mid GROUP BY t1.mid",
        "schema": "CREATE TABLE Movie (mID NUMBER, title TEXT); CREATE TABLE Rating (rID NUMBER, mID NUMBER, stars NUMBER);"
      },
      {
        "question": "Give me the name of the movie that has the most ratings.",
        "query": "SELECT t2.title , t1.mid FROM rating AS t1 JOIN movie AS t2 ON t1.mid = t2.mid GROUP BY t1.mid ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Rating (rID NUMBER, stars NUMBER, mID NUMBER); CREATE TABLE Movie (mID NUMBER, title TEXT);"
      }
    ],
    [
      {
        "question": "What are the name of all movies?",
        "query": "SELECT title FROM movie",
        "schema": "CREATE TABLE Movie (title TEXT, mID NUMBER);"
      },
      {
        "question": "What rating star did each of them have?",
        "query": "SELECT t2.title, t1.stars FROM rating AS t1 JOIN movie AS t2 ON t1.mid = t2.mid",
        "schema": "CREATE TABLE Movie (mID NUMBER, title TEXT); CREATE TABLE Rating (mID NUMBER, stars NUMBER, rID NUMBER);"
      },
      {
        "question": "Give me the movies that have rating star between 3 and 5.",
        "query": "SELECT t2.title FROM rating AS t1 JOIN movie AS t2 ON t1.mid = t2.mid WHERE t1.stars BETWEEN 3 AND 5",
        "schema": "CREATE TABLE Rating (rID NUMBER, stars NUMBER, mID NUMBER); CREATE TABLE Movie (mID NUMBER, title TEXT);"
      }
    ],
    [
      {
        "question": "What are the names of all the reviewers?",
        "query": "SELECT name FROM reviewer",
        "schema": "CREATE TABLE Rating (rID NUMBER); CREATE TABLE Reviewer (name TEXT, rID NUMBER);"
      },
      {
        "question": "Who had given ratings higher than 3 stars?",
        "query": "SELECT t2.name FROM rating AS t1 JOIN reviewer AS t2 ON t1.rid = t2.rid WHERE t1.stars > 3",
        "schema": "CREATE TABLE Rating (mID NUMBER, rID NUMBER, stars NUMBER); CREATE TABLE Reviewer (name TEXT, rID NUMBER);"
      }
    ],
    [
      {
        "question": "What are the name of all the reviewers?",
        "query": "SELECT name FROM reviewer",
        "schema": "CREATE TABLE Movie (title TEXT, mID NUMBER); CREATE TABLE Reviewer (name TEXT, rID NUMBER); CREATE TABLE Rating (rID NUMBER);"
      },
      {
        "question": "What are the movies that are reviewed by Brittany Harris?",
        "query": "SELECT t1.mid FROM rating AS t1 JOIN reviewer AS t2 ON t1.rid = t2.rid WHERE t2.name = \"Brittany Harris\"",
        "schema": "CREATE TABLE Rating (stars NUMBER, mID NUMBER, rID NUMBER); CREATE TABLE Movie (mID NUMBER, title TEXT, director TEXT); CREATE TABLE Reviewer (name TEXT, rID NUMBER);"
      },
      {
        "question": "Show me the average rating star for all other movies except those.",
        "query": "SELECT mid , avg(stars) FROM rating WHERE mid NOT IN (SELECT t1.mid FROM rating AS t1 JOIN reviewer AS t2 ON t1.rid = t2.rid WHERE t2.name = \"Brittany Harris\") GROUP BY mid",
        "schema": "CREATE TABLE Rating (rID NUMBER, mID NUMBER, stars NUMBER); CREATE TABLE Reviewer (name TEXT, rID NUMBER); CREATE TABLE Movie (mID NUMBER, director TEXT, title TEXT);"
      }
    ],
    [
      {
        "question": "What are the name of all the reviewers?",
        "query": "SELECT name FROM reviewer",
        "schema": "CREATE TABLE Rating (mID NUMBER, rID NUMBER); CREATE TABLE Movie (title TEXT, mID NUMBER); CREATE TABLE Reviewer (rID NUMBER, name TEXT);"
      },
      {
        "question": "What are the ids of the movies that are reviewed by Brittany Harris?",
        "query": "SELECT t1.mid FROM rating AS t1 JOIN reviewer AS t2 ON t1.rid = t2.rid WHERE t2.name = \"Brittany Harris\"",
        "schema": "CREATE TABLE Reviewer (rID NUMBER, name TEXT); CREATE TABLE Movie (title TEXT, mID NUMBER); CREATE TABLE Rating (rID NUMBER, mID NUMBER, stars NUMBER);"
      },
      {
        "question": "Show me the ids of movies except those.",
        "query": "SELECT mid FROM rating EXCEPT SELECT t1.mid FROM rating AS t1 JOIN reviewer AS t2 ON t1.rid = t2.rid WHERE t2.name = \"Brittany Harris\"",
        "schema": "CREATE TABLE Movie (title TEXT, mID NUMBER); CREATE TABLE Reviewer (rID NUMBER, name TEXT); CREATE TABLE Rating (mID NUMBER, rID NUMBER, stars NUMBER);"
      }
    ],
    [
      {
        "question": "What are the rating star for all the movies?",
        "query": "SELECT mid, stars FROM rating",
        "schema": "CREATE TABLE Movie (title TEXT, mID NUMBER); CREATE TABLE Rating (rID NUMBER, stars NUMBER, mID NUMBER);"
      },
      {
        "question": "Give me the average rating star for each movie.",
        "query": "SELECT mid , avg(stars) FROM rating GROUP BY mid",
        "schema": "CREATE TABLE Rating (rID NUMBER, stars NUMBER, mID NUMBER); CREATE TABLE Movie (mID NUMBER, title TEXT);"
      },
      {
        "question": "Only show those that received at least 2 ratings.",
        "query": "SELECT mid , avg(stars) FROM rating GROUP BY mid HAVING count(*) >= 2",
        "schema": "CREATE TABLE Rating (stars NUMBER, mID NUMBER, rID NUMBER); CREATE TABLE Movie (title TEXT, mID NUMBER);"
      }
    ],
    [
      {
        "question": "What are all the ratings?",
        "query": "SELECT * FROM rating",
        "schema": "CREATE TABLE Movie (mID NUMBER); CREATE TABLE Reviewer (rID NUMBER); CREATE TABLE Rating (rID NUMBER, stars NUMBER, mID NUMBER);"
      },
      {
        "question": "Show me the ids of reviewers who gave 4 star.",
        "query": "SELECT DISTINCT rid FROM rating WHERE stars = 4",
        "schema": "CREATE TABLE Reviewer (rID NUMBER, name TEXT); CREATE TABLE Movie (mID NUMBER); CREATE TABLE Rating (rID NUMBER, mID NUMBER, stars NUMBER);"
      },
      {
        "question": "Give me the ids of reviewers except those.",
        "query": "SELECT rid FROM rating EXCEPT SELECT rid FROM rating WHERE stars = 4",
        "schema": "CREATE TABLE Reviewer (name TEXT, rID NUMBER); CREATE TABLE Movie (mID NUMBER); CREATE TABLE Rating (rID NUMBER, stars NUMBER, mID NUMBER);"
      }
    ],
    [
      {
        "question": "Show me the name of all the movies.",
        "query": "SELECT title FROM movie",
        "schema": "CREATE TABLE Movie (title TEXT, mID NUMBER);"
      },
      {
        "question": "What about those that were made after 2000?",
        "query": "SELECT title FROM movie WHERE YEAR > 2000",
        "schema": "CREATE TABLE Movie (year NUMBER, mID NUMBER, title TEXT);"
      },
      {
        "question": "Please also include those that were reviewed by Brittany Harris.",
        "query": "SELECT DISTINCT t2.title FROM rating AS t1 JOIN movie AS t2 ON t1.mid = t2.mid JOIN reviewer AS t3 ON t1.rid = t3.rid WHERE t3.name = 'Brittany Harris' OR t2.year > 2000",
        "schema": "CREATE TABLE Reviewer (name TEXT, rID NUMBER); CREATE TABLE Rating (mID NUMBER, ratingDate TIME, stars NUMBER, rID NUMBER); CREATE TABLE Movie (title TEXT, year NUMBER, mID NUMBER);"
      }
    ],
    [
      {
        "question": "Show me the name of all the movies.",
        "query": "SELECT title FROM movie",
        "schema": "CREATE TABLE Movie (title TEXT, mID NUMBER); CREATE TABLE Rating (mID NUMBER);"
      },
      {
        "question": "What about those that were made before 1980?",
        "query": "SELECT title FROM movie WHERE YEAR < 1980",
        "schema": "CREATE TABLE Movie (year NUMBER, mID NUMBER, title TEXT); CREATE TABLE Rating (mID NUMBER);"
      },
      {
        "question": "Please also include those that were directed by James Cameron.",
        "query": "SELECT title FROM movie WHERE director = \"James Cameron\" OR YEAR < 1980",
        "schema": "CREATE TABLE Rating (mID NUMBER); CREATE TABLE Movie (mID NUMBER, title TEXT, year NUMBER, director TEXT);"
      }
    ],
    [
      {
        "question": "Show me the name of all the reviewers.",
        "query": "SELECT name FROM reviewer",
        "schema": "CREATE TABLE Movie (title TEXT, mID NUMBER); CREATE TABLE Reviewer (name TEXT, rID NUMBER); CREATE TABLE Rating (rID NUMBER);"
      },
      {
        "question": "What about the rating star they had given?",
        "query": "SELECT t2.name, t1.stars FROM rating AS t1 JOIN reviewer AS t2 ON t1.rid = t2.rid",
        "schema": "CREATE TABLE Movie (title TEXT, mID NUMBER); CREATE TABLE Rating (mID NUMBER, rID NUMBER, stars NUMBER); CREATE TABLE Reviewer (name TEXT, rID NUMBER);"
      },
      {
        "question": "Show me the reviewers who had rated 3 star and 4 star.",
        "query": "SELECT t2.name FROM rating AS t1 JOIN reviewer AS t2 ON t1.rid = t2.rid WHERE t1.stars = 3 INTERSECT SELECT t2.name FROM rating AS t1 JOIN reviewer AS t2 ON t1.rid = t2.rid WHERE t1.stars = 4",
        "schema": "CREATE TABLE Movie (title TEXT, mID NUMBER); CREATE TABLE Rating (rID NUMBER, stars NUMBER, mID NUMBER); CREATE TABLE Reviewer (name TEXT, rID NUMBER);"
      }
    ]
  ],
  "epinions_1": [
    [
      {
        "question": "List the ratings for all of the reviews.",
        "query": "SELECT rating FROM review",
        "schema": "CREATE TABLE review (rating NUMBER, a_id NUMBER, u_id NUMBER, i_id NUMBER);"
      },
      {
        "question": "What was the average rating?",
        "query": "SELECT avg(rating) FROM review",
        "schema": "CREATE TABLE review (i_id NUMBER, u_id NUMBER, rating NUMBER, a_id NUMBER);"
      },
      {
        "question": "Include the maximum as well.",
        "query": "SELECT avg(rating) , max(rating) FROM review",
        "schema": "CREATE TABLE review (u_id NUMBER, a_id NUMBER, i_id NUMBER, rating NUMBER);"
      }
    ],
    [
      {
        "question": "Show all items.",
        "query": "SELECT title FROM item",
        "schema": "CREATE TABLE review (i_id NUMBER); CREATE TABLE item (i_id NUMBER, title TEXT);"
      },
      {
        "question": "Which ones received reviews?",
        "query": "SELECT title FROM item WHERE i_id IN (SELECT i_id FROM review)",
        "schema": "CREATE TABLE review (rating NUMBER, a_id NUMBER, i_id NUMBER); CREATE TABLE item (title TEXT, i_id NUMBER);"
      },
      {
        "question": "How about those that did not receive any reviews?",
        "query": "SELECT title FROM item WHERE i_id NOT IN (SELECT i_id FROM review)",
        "schema": "CREATE TABLE review (a_id NUMBER, i_id NUMBER, u_id NUMBER, rating NUMBER); CREATE TABLE item (i_id NUMBER, title TEXT);"
      },
      {
        "question": "How many unreviewed items were there?",
        "query": "SELECT count(*) FROM item WHERE i_id NOT IN (SELECT i_id FROM review)",
        "schema": "CREATE TABLE review (a_id NUMBER, i_id NUMBER, rating NUMBER, u_id NUMBER); CREATE TABLE item (i_id NUMBER, title TEXT);"
      }
    ],
    [
      {
        "question": "List the ratings of all goods.",
        "query": "SELECT rating FROM review",
        "schema": "CREATE TABLE review (u_id NUMBER, a_id NUMBER, i_id NUMBER, rating NUMBER); CREATE TABLE item (title TEXT, i_id NUMBER);"
      },
      {
        "question": "Include the names of the goods.",
        "query": "SELECT t1.title, t2.rating FROM item AS t1 JOIN review AS t2 ON t1.i_id = t2.i_id",
        "schema": "CREATE TABLE review (i_id NUMBER, a_id NUMBER, u_id NUMBER, rating NUMBER); CREATE TABLE item (i_id NUMBER, title TEXT);"
      },
      {
        "question": "How many received a rating of 10?",
        "query": "SELECT count(*) FROM item AS t1 JOIN review AS t2 ON t1.i_id = t2.i_id WHERE t2.rating = 10",
        "schema": "CREATE TABLE review (rating NUMBER, a_id NUMBER, i_id NUMBER, u_id NUMBER); CREATE TABLE item (i_id NUMBER, title TEXT);"
      },
      {
        "question": "What are the names of these goods?",
        "query": "SELECT t1.title FROM item AS t1 JOIN review AS t2 ON t1.i_id = t2.i_id WHERE t2.rating = 10",
        "schema": "CREATE TABLE item (title TEXT, i_id NUMBER); CREATE TABLE review (rating NUMBER, u_id NUMBER, a_id NUMBER, i_id NUMBER);"
      }
    ],
    [
      {
        "question": "What is the average rating of all items?",
        "query": "SELECT avg(rating) FROM review",
        "schema": "CREATE TABLE review (rank NUMBER, rating NUMBER, a_id NUMBER, i_id NUMBER); CREATE TABLE item (i_id NUMBER);"
      },
      {
        "question": "How many items have a rating lower than the average?",
        "query": "SELECT count(*) FROM item AS t1 JOIN review AS t2 ON t1.i_id = t2.i_id WHERE t2.rating < (SELECT avg(rating) FROM review)",
        "schema": "CREATE TABLE review (i_id NUMBER, rank NUMBER, rating NUMBER, a_id NUMBER); CREATE TABLE item (i_id NUMBER, title TEXT);"
      },
      {
        "question": "How about higher than the average?",
        "query": "SELECT count(*) FROM item AS t1 JOIN review AS t2 ON t1.i_id = t2.i_id WHERE t2.rating > (SELECT avg(rating) FROM review)",
        "schema": "CREATE TABLE review (rank NUMBER, rating NUMBER, i_id NUMBER, a_id NUMBER); CREATE TABLE item (i_id NUMBER, title TEXT);"
      },
      {
        "question": "What are the names of those items?",
        "query": "SELECT t1.title FROM item AS t1 JOIN review AS t2 ON t1.i_id = t2.i_id WHERE t2.rating > (SELECT avg(rating) FROM review)",
        "schema": "CREATE TABLE item (title TEXT, i_id NUMBER); CREATE TABLE review (rating NUMBER, a_id NUMBER, i_id NUMBER, rank NUMBER);"
      }
    ],
    [
      {
        "question": "List the title and rating for each item.",
        "query": "SELECT t1.title, t2.rating FROM item AS t1 JOIN review AS t2 ON t1.i_id = t2.i_id",
        "schema": "CREATE TABLE item (i_id NUMBER, title TEXT); CREATE TABLE review (i_id NUMBER, a_id NUMBER, rating NUMBER);"
      },
      {
        "question": "Order by increasing rating.",
        "query": "SELECT t1.title, t2.rating FROM item AS t1 JOIN review AS t2 ON t1.i_id = t2.i_id ORDER BY t2.rating ASC",
        "schema": "CREATE TABLE item (title TEXT, i_id NUMBER); CREATE TABLE review (rating NUMBER, a_id NUMBER, i_id NUMBER);"
      },
      {
        "question": "How many received a rating below 5?",
        "query": "SELECT count(*) FROM item AS t1 JOIN review AS t2 ON t1.i_id = t2.i_id WHERE t2.rating < 5",
        "schema": "CREATE TABLE item (title TEXT, i_id NUMBER); CREATE TABLE review (i_id NUMBER, a_id NUMBER, rating NUMBER);"
      },
      {
        "question": "What are the names of these items?",
        "query": "SELECT t1.title FROM item AS t1 JOIN review AS t2 ON t1.i_id = t2.i_id WHERE t2.rating < 5",
        "schema": "CREATE TABLE review (i_id NUMBER, rating NUMBER, a_id NUMBER); CREATE TABLE item (title TEXT, i_id NUMBER);"
      }
    ],
    [
      {
        "question": "What is the title and rating for each item?",
        "query": "SELECT t1.title, t2.rating FROM item AS t1 JOIN review AS t2 ON t1.i_id = t2.i_id",
        "schema": "CREATE TABLE item (title TEXT, i_id NUMBER); CREATE TABLE review (a_id NUMBER, i_id NUMBER, rating NUMBER);"
      },
      {
        "question": "Which ones received a rating higher than 8?",
        "query": "SELECT t1.title FROM item AS t1 JOIN review AS t2 ON t1.i_id = t2.i_id WHERE t2.rating > 8",
        "schema": "CREATE TABLE review (a_id NUMBER, rating NUMBER, i_id NUMBER); CREATE TABLE item (title TEXT, i_id NUMBER);"
      },
      {
        "question": "Out of those items, which ones also received a rating less than 5?",
        "query": "SELECT t1.title FROM item AS t1 JOIN review AS t2 ON t1.i_id = t2.i_id WHERE t2.rating > 8 INTERSECT SELECT t1.title FROM item AS t1 JOIN review AS t2 ON t1.i_id = t2.i_id WHERE t2.rating < 5",
        "schema": "CREATE TABLE review (i_id NUMBER, rating NUMBER, a_id NUMBER); CREATE TABLE item (title TEXT, i_id NUMBER);"
      }
    ],
    [
      {
        "question": "What items were ranked?",
        "query": "SELECT DISTINCT t1.title FROM item AS t1 JOIN review AS t2 ON t1.i_id = t2.i_id",
        "schema": "CREATE TABLE review (i_id NUMBER, a_id NUMBER, rating NUMBER, rank NUMBER, u_id NUMBER); CREATE TABLE useracct (u_id NUMBER); CREATE TABLE item (i_id NUMBER, title TEXT);"
      },
      {
        "question": "How many have a rank that is greater than 3?",
        "query": "SELECT count(DISTINCT t1.title) FROM item AS t1 JOIN review AS t2 ON t1.i_id = t2.i_id WHERE t2.rank > 3",
        "schema": "CREATE TABLE item (i_id NUMBER, title TEXT); CREATE TABLE useracct (u_id NUMBER); CREATE TABLE review (rating NUMBER, rank NUMBER, a_id NUMBER, i_id NUMBER, u_id NUMBER);"
      },
      {
        "question": "List the names of these items.",
        "query": "SELECT DISTINCT t1.title FROM item AS t1 JOIN review AS t2 ON t1.i_id = t2.i_id WHERE t2.rank > 3",
        "schema": "CREATE TABLE review (a_id NUMBER, rank NUMBER, i_id NUMBER, u_id NUMBER, rating NUMBER); CREATE TABLE useracct (u_id NUMBER); CREATE TABLE item (title TEXT, i_id NUMBER);"
      },
      {
        "question": "Out of these items, which ones also have an average rating that is above 5?",
        "query": "SELECT t1.title FROM item AS t1 JOIN review AS t2 ON t1.i_id = t2.i_id WHERE t2.rank > 3 INTERSECT SELECT t1.title FROM item AS t1 JOIN review AS t2 ON t1.i_id = t2.i_id GROUP BY t2.i_id HAVING avg(t2.rating) > 5",
        "schema": "CREATE TABLE item (title TEXT, i_id NUMBER); CREATE TABLE useracct (u_id NUMBER); CREATE TABLE review (i_id NUMBER, rank NUMBER, u_id NUMBER, a_id NUMBER, rating NUMBER);"
      }
    ],
    [
      {
        "question": "List the names of all items",
        "query": "SELECT title FROM item",
        "schema": "CREATE TABLE useracct (name TEXT); CREATE TABLE item (title TEXT, i_id NUMBER);"
      },
      {
        "question": "Show the average rating of each one as well.",
        "query": "SELECT t1.title, avg(t2.rating) FROM item AS t1 JOIN review AS t2 ON t1.i_id = t2.i_id GROUP BY t2.i_id",
        "schema": "CREATE TABLE item (i_id NUMBER, title TEXT); CREATE TABLE useracct (name TEXT); CREATE TABLE review (rating NUMBER, i_id NUMBER);"
      },
      {
        "question": "Order by increasing average rating.",
        "query": "SELECT t1.title, avg(t2.rating) FROM item AS t1 JOIN review AS t2 ON t1.i_id = t2.i_id GROUP BY t2.i_id ORDER BY avg(t2.rating)",
        "schema": "CREATE TABLE item (title TEXT, i_id NUMBER); CREATE TABLE useracct (name TEXT); CREATE TABLE review (rating NUMBER, i_id NUMBER);"
      },
      {
        "question": "Which one has the lowest?",
        "query": "SELECT t1.title FROM item AS t1 JOIN review AS t2 ON t1.i_id = t2.i_id GROUP BY t2.i_id ORDER BY avg(t2.rating) LIMIT 1",
        "schema": "CREATE TABLE item (title TEXT, i_id NUMBER); CREATE TABLE useracct (name TEXT); CREATE TABLE review (i_id NUMBER, rating NUMBER);"
      }
    ],
    [
      {
        "question": "What are the names of all users?",
        "query": "SELECT name FROM useracct",
        "schema": "CREATE TABLE useracct (name TEXT, u_id NUMBER);"
      },
      {
        "question": "How many reviews were given by each user?",
        "query": "SELECT t1.name, count(*) FROM useracct AS t1 JOIN review AS t2 ON t1.u_id = t2.u_id GROUP BY t2.u_id",
        "schema": "CREATE TABLE useracct (name TEXT, u_id NUMBER); CREATE TABLE review (u_id NUMBER, i_id NUMBER, a_id NUMBER, rating NUMBER);"
      },
      {
        "question": "Order by the number of reviews given, from the greatest to the least.",
        "query": "SELECT t1.name, count(*) FROM useracct AS t1 JOIN review AS t2 ON t1.u_id = t2.u_id GROUP BY t2.u_id ORDER BY count(*) DESC",
        "schema": "CREATE TABLE useracct (u_id NUMBER, name TEXT); CREATE TABLE review (a_id NUMBER, i_id NUMBER, rating NUMBER, u_id NUMBER);"
      },
      {
        "question": "Who gave the most reviews?",
        "query": "SELECT t1.name FROM useracct AS t1 JOIN review AS t2 ON t1.u_id = t2.u_id GROUP BY t2.u_id ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE useracct (u_id NUMBER, name TEXT); CREATE TABLE review (rating NUMBER, u_id NUMBER, a_id NUMBER, i_id NUMBER);"
      }
    ],
    [
      {
        "question": "List the name of each item that received a rating.",
        "query": "SELECT t1.title FROM item AS t1 JOIN review AS t2 ON t1.i_id = t2.i_id GROUP BY t2.i_id",
        "schema": "CREATE TABLE review (a_id NUMBER, rating NUMBER, i_id NUMBER); CREATE TABLE item (i_id NUMBER, title TEXT);"
      },
      {
        "question": "Include the item ID as well.",
        "query": "SELECT t1.title, t1.i_id FROM item AS t1 JOIN review AS t2 ON t1.i_id = t2.i_id GROUP BY t2.i_id",
        "schema": "CREATE TABLE item (title TEXT, i_id NUMBER); CREATE TABLE review (a_id NUMBER, i_id NUMBER, rating NUMBER);"
      },
      {
        "question": "Order items by decreasing average rating.",
        "query": "SELECT t1.title , t1.i_id FROM item AS t1 JOIN review AS t2 ON t1.i_id = t2.i_id GROUP BY t2.i_id ORDER BY avg(t2.rating) DESC",
        "schema": "CREATE TABLE review (a_id NUMBER, rating NUMBER, i_id NUMBER); CREATE TABLE item (title TEXT, i_id NUMBER);"
      },
      {
        "question": "Which item had the highest? Include its ID as well.",
        "query": "SELECT t1.title , t1.i_id FROM item AS t1 JOIN review AS t2 ON t1.i_id = t2.i_id GROUP BY t2.i_id ORDER BY avg(t2.rating) DESC LIMIT 1",
        "schema": "CREATE TABLE review (a_id NUMBER, rating NUMBER, i_id NUMBER); CREATE TABLE item (title TEXT, i_id NUMBER);"
      }
    ],
    [
      {
        "question": "Which items have a rank?",
        "query": "SELECT t1.title FROM item AS t1 JOIN review AS t2 ON t1.i_id = t2.i_id GROUP BY t2.i_id",
        "schema": "CREATE TABLE review (rating NUMBER, i_id NUMBER, a_id NUMBER, rank NUMBER); CREATE TABLE item (i_id NUMBER, title TEXT);"
      },
      {
        "question": "Also include their IDs.",
        "query": "SELECT t1.title, t1.i_id FROM item AS t1 JOIN review AS t2 ON t1.i_id = t2.i_id GROUP BY t2.i_id",
        "schema": "CREATE TABLE review (i_id NUMBER, a_id NUMBER, rank NUMBER, rating NUMBER); CREATE TABLE item (i_id NUMBER, title TEXT);"
      },
      {
        "question": "Order them by average rank from highest to lowest.",
        "query": "SELECT t1.title , t1.i_id FROM item AS t1 JOIN review AS t2 ON t1.i_id = t2.i_id GROUP BY t2.i_id ORDER BY avg(t2.rank)",
        "schema": "CREATE TABLE review (rating NUMBER, rank NUMBER, i_id NUMBER, a_id NUMBER); CREATE TABLE item (i_id NUMBER, title TEXT);"
      },
      {
        "question": "What is the name and ID of the item that received the highest average rank?",
        "query": "SELECT t1.title , t1.i_id FROM item AS t1 JOIN review AS t2 ON t1.i_id = t2.i_id GROUP BY t2.i_id ORDER BY avg(t2.rank) DESC LIMIT 1",
        "schema": "CREATE TABLE item (i_id NUMBER, title TEXT); CREATE TABLE review (i_id NUMBER, rating NUMBER, a_id NUMBER, rank NUMBER);"
      }
    ],
    [
      {
        "question": "List the names of all users.",
        "query": "SELECT name FROM useracct",
        "schema": "CREATE TABLE useracct (name TEXT, u_id NUMBER);"
      },
      {
        "question": "Only show those who gave reviews.",
        "query": "SELECT DISTINCT t1.name FROM useracct AS t1 JOIN review AS t2 ON t1.u_id = t2.u_id",
        "schema": "CREATE TABLE review (a_id NUMBER, u_id NUMBER, i_id NUMBER, rating NUMBER); CREATE TABLE useracct (name TEXT, u_id NUMBER);"
      },
      {
        "question": "Include the ratings given by each of them.",
        "query": "SELECT t1.name, t2.rating FROM useracct AS t1 JOIN review AS t2 ON t1.u_id = t2.u_id",
        "schema": "CREATE TABLE useracct (name TEXT, u_id NUMBER); CREATE TABLE review (u_id NUMBER, i_id NUMBER, rating NUMBER, a_id NUMBER);"
      },
      {
        "question": "Only show their name and the average rating given by each of them.",
        "query": "SELECT t1.name , avg(t2.rating) FROM useracct AS t1 JOIN review AS t2 ON t1.u_id = t2.u_id GROUP BY t2.u_id",
        "schema": "CREATE TABLE useracct (u_id NUMBER, name TEXT); CREATE TABLE review (rating NUMBER, u_id NUMBER, i_id NUMBER, a_id NUMBER);"
      }
    ],
    [
      {
        "question": "What are the names of the users?",
        "query": "SELECT name FROM useracct",
        "schema": "CREATE TABLE useracct (u_id NUMBER, name TEXT);"
      },
      {
        "question": "How many wrote reviews?",
        "query": "SELECT count(DISTINCT t1.name) FROM useracct AS t1 JOIN review AS t2 ON t1.u_id = t2.u_id",
        "schema": "CREATE TABLE review (a_id NUMBER, u_id NUMBER, i_id NUMBER); CREATE TABLE useracct (u_id NUMBER, name TEXT);"
      },
      {
        "question": "List their names?",
        "query": "SELECT DISTINCT t1.name FROM useracct AS t1 JOIN review AS t2 ON t1.u_id = t2.u_id",
        "schema": "CREATE TABLE review (u_id NUMBER, a_id NUMBER, i_id NUMBER); CREATE TABLE useracct (name TEXT, u_id NUMBER);"
      },
      {
        "question": "Include the number of reviews written by each of them.",
        "query": "SELECT t1.name , count(*) FROM useracct AS t1 JOIN review AS t2 ON t1.u_id = t2.u_id GROUP BY t2.u_id",
        "schema": "CREATE TABLE review (i_id NUMBER, a_id NUMBER, u_id NUMBER); CREATE TABLE useracct (u_id NUMBER, name TEXT);"
      }
    ],
    [
      {
        "question": "List the names of users who gave ratings.",
        "query": "SELECT DISTINCT t1.name FROM useracct AS t1 JOIN review AS t2 ON t1.u_id = t2.u_id",
        "schema": "CREATE TABLE review (rating NUMBER, u_id NUMBER, a_id NUMBER); CREATE TABLE useracct (u_id NUMBER, name TEXT);"
      },
      {
        "question": "Include the ratings that they gave as well.",
        "query": "SELECT t1.name, t2.rating FROM useracct AS t1 JOIN review AS t2 ON t1.u_id = t2.u_id",
        "schema": "CREATE TABLE review (u_id NUMBER, a_id NUMBER, rating NUMBER); CREATE TABLE useracct (u_id NUMBER, name TEXT);"
      },
      {
        "question": "Order by highest to lowest rating.",
        "query": "SELECT t1.name FROM useracct AS t1 JOIN review AS t2 ON t1.u_id = t2.u_id ORDER BY t2.rating DESC",
        "schema": "CREATE TABLE review (u_id NUMBER, a_id NUMBER, rating NUMBER); CREATE TABLE useracct (u_id NUMBER, name TEXT);"
      },
      {
        "question": "Who gave the highest rating?",
        "query": "SELECT t1.name FROM useracct AS t1 JOIN review AS t2 ON t1.u_id = t2.u_id ORDER BY t2.rating DESC LIMIT 1",
        "schema": "CREATE TABLE review (rating NUMBER, a_id NUMBER, u_id NUMBER); CREATE TABLE useracct (name TEXT, u_id NUMBER);"
      }
    ],
    [
      {
        "question": "What are all of the users\u2019 names?",
        "query": "SELECT name FROM useracct",
        "schema": "CREATE TABLE useracct (u_id NUMBER, name TEXT);"
      },
      {
        "question": "Only show the names of source users.",
        "query": "SELECT DISTINCT t1.name FROM useracct AS t1 JOIN trust AS t2 ON t1.u_id = t2.source_u_id",
        "schema": "CREATE TABLE trust (trust NUMBER, source_u_id NUMBER, target_u_id NUMBER); CREATE TABLE useracct (u_id NUMBER, name TEXT);"
      },
      {
        "question": "Order them by decreasing average trust score.",
        "query": "SELECT t1.name FROM useracct AS t1 JOIN trust AS t2 ON t1.u_id = t2.source_u_id GROUP BY t2.source_u_id ORDER BY avg(trust) DESC",
        "schema": "CREATE TABLE review (u_id NUMBER); CREATE TABLE trust (target_u_id NUMBER, trust NUMBER, source_u_id NUMBER); CREATE TABLE useracct (u_id NUMBER, name TEXT);"
      },
      {
        "question": "Who has the highest average trust score?",
        "query": "SELECT t1.name FROM useracct AS t1 JOIN trust AS t2 ON t1.u_id = t2.source_u_id GROUP BY t2.source_u_id ORDER BY avg(trust) DESC LIMIT 1",
        "schema": "CREATE TABLE trust (target_u_id NUMBER, source_u_id NUMBER, trust NUMBER); CREATE TABLE useracct (name TEXT, u_id NUMBER); CREATE TABLE review (u_id NUMBER);"
      }
    ],
    [
      {
        "question": "List the names of all target users.",
        "query": "SELECT DISTINCT t1.name FROM useracct AS t1 JOIN trust AS t2 ON t1.u_id = t2.target_u_id",
        "schema": "CREATE TABLE useracct (name TEXT, u_id NUMBER); CREATE TABLE trust (source_u_id NUMBER, target_u_id NUMBER);"
      },
      {
        "question": "Include the trust scores for each target user.",
        "query": "SELECT t1.name , t2.trust FROM useracct AS t1 JOIN trust AS t2 ON t1.u_id = t2.target_u_id",
        "schema": "CREATE TABLE useracct (u_id NUMBER, name TEXT); CREATE TABLE trust (trust NUMBER, source_u_id NUMBER, target_u_id NUMBER); CREATE TABLE review (u_id NUMBER);"
      },
      {
        "question": "List the name and average trust score for each target user.",
        "query": "SELECT t1.name , avg(trust) FROM useracct AS t1 JOIN trust AS t2 ON t1.u_id = t2.target_u_id GROUP BY t2.target_u_id",
        "schema": "CREATE TABLE review (u_id NUMBER); CREATE TABLE trust (source_u_id NUMBER, target_u_id NUMBER, trust NUMBER); CREATE TABLE useracct (u_id NUMBER, name TEXT);"
      }
    ],
    [
      {
        "question": "What are the names of all users?",
        "query": "SELECT name FROM useracct",
        "schema": "CREATE TABLE useracct (u_id NUMBER, name TEXT);"
      },
      {
        "question": "Only show the target users.",
        "query": "SELECT DISTINCT t1.name FROM useracct AS t1 JOIN trust AS t2 ON t1.u_id = t2.target_u_id",
        "schema": "CREATE TABLE useracct (u_id NUMBER, name TEXT); CREATE TABLE trust (target_u_id NUMBER, source_u_id NUMBER);"
      },
      {
        "question": "Order them by increasing trust score.",
        "query": "SELECT t1.name FROM useracct AS t1 JOIN trust AS t2 ON t1.u_id = t2.target_u_id ORDER BY trust",
        "schema": "CREATE TABLE trust (trust NUMBER, source_u_id NUMBER, target_u_id NUMBER); CREATE TABLE useracct (name TEXT, u_id NUMBER);"
      },
      {
        "question": "Who has the lowest trust score?",
        "query": "SELECT t1.name FROM useracct AS t1 JOIN trust AS t2 ON t1.u_id = t2.target_u_id ORDER BY trust LIMIT 1",
        "schema": "CREATE TABLE useracct (u_id NUMBER, name TEXT); CREATE TABLE trust (source_u_id NUMBER, trust NUMBER, target_u_id NUMBER);"
      }
    ],
    [
      {
        "question": "List the names of all items.",
        "query": "SELECT title FROM item",
        "schema": "CREATE TABLE item (title TEXT, i_id NUMBER); CREATE TABLE review (i_id NUMBER);"
      },
      {
        "question": "How many did not receive any reviews?",
        "query": "SELECT count(*) FROM item WHERE i_id NOT IN (SELECT i_id FROM review)",
        "schema": "CREATE TABLE item (i_id NUMBER, title TEXT); CREATE TABLE review (a_id NUMBER, i_id NUMBER);"
      },
      {
        "question": "List their names.",
        "query": "SELECT title FROM item WHERE i_id NOT IN (SELECT i_id FROM review)",
        "schema": "CREATE TABLE review (i_id NUMBER, a_id NUMBER); CREATE TABLE item (i_id NUMBER, title TEXT);"
      }
    ],
    [
      {
        "question": "What are all of the users\u2019 names?",
        "query": "SELECT name FROM useracct",
        "schema": "CREATE TABLE useracct (name TEXT, u_id NUMBER);"
      },
      {
        "question": "How many wrote reviews?",
        "query": "SELECT count(*) FROM useracct WHERE u_id IN (SELECT u_id FROM review)",
        "schema": "CREATE TABLE review (a_id NUMBER, i_id NUMBER, u_id NUMBER); CREATE TABLE useracct (name TEXT, u_id NUMBER);"
      },
      {
        "question": "How many did not write reviews?",
        "query": "SELECT count(*) FROM useracct WHERE u_id NOT IN (SELECT u_id FROM review)",
        "schema": "CREATE TABLE review (i_id NUMBER, u_id NUMBER, a_id NUMBER); CREATE TABLE useracct (name TEXT, u_id NUMBER);"
      },
      {
        "question": "List their names.",
        "query": "SELECT name FROM useracct WHERE u_id NOT IN (SELECT u_id FROM review)",
        "schema": "CREATE TABLE review (i_id NUMBER, u_id NUMBER, a_id NUMBER); CREATE TABLE useracct (name TEXT, u_id NUMBER);"
      }
    ]
  ],
  "customer_complaints": [
    [
      {
        "question": "Which cities have customer_type_code of \"Good Credit Rating\"?",
        "query": "SELECT DISTINCT town_city FROM customers WHERE customer_type_code = \"Good Credit Rating\"",
        "schema": "CREATE TABLE Customers (town_city TEXT, customer_id NUMBER, customer_type_code TEXT);"
      },
      {
        "question": "Which ones do not?",
        "query": "SELECT DISTINCT town_city FROM customers WHERE customer_type_code != \"Good Credit Rating\"",
        "schema": "CREATE TABLE Customers (town_city TEXT, customer_type_code TEXT, customer_id NUMBER);"
      },
      {
        "question": "Give the counts of the town city groups of customers in that first query.",
        "query": "SELECT town_city, count(*) FROM customers WHERE customer_type_code = \"Good Credit Rating\" GROUP BY town_city",
        "schema": "CREATE TABLE Customers (customer_id NUMBER, town_city TEXT, customer_type_code TEXT);"
      },
      {
        "question": "Just return the town city with the least number.",
        "query": "SELECT town_city FROM customers WHERE customer_type_code = \"Good Credit Rating\" GROUP BY town_city ORDER BY count(*) LIMIT 1",
        "schema": "CREATE TABLE Customers (customer_id NUMBER, town_city TEXT, customer_type_code TEXT);"
      }
    ],
    [
      {
        "question": "Which product ids have received complaints?",
        "query": "SELECT DISTINCT product_id FROM complaints",
        "schema": "CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Products (parent_product_id NUMBER, product_name TEXT, product_id NUMBER); CREATE TABLE Staff (staff_id NUMBER); CREATE TABLE Complaints (complaint_status_code TEXT, complaint_type_code TEXT, product_id NUMBER, complaint_id NUMBER, complaint_outcome_code TEXT, customer_id NUMBER, staff_id NUMBER);"
      },
      {
        "question": "What are the names of those products?",
        "query": "SELECT DISTINCT t1.product_name FROM products AS t1 JOIN complaints AS t2 ON t1.product_id = t2.product_id",
        "schema": "CREATE TABLE Staff (staff_id NUMBER); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Complaints (complaint_id NUMBER, complaint_status_code TEXT, complaint_type_code TEXT, customer_id NUMBER, complaint_outcome_code TEXT, product_id NUMBER, staff_id NUMBER); CREATE TABLE Products (product_name TEXT, product_id NUMBER, parent_product_id NUMBER);"
      },
      {
        "question": "Speaking of those names, count the number of complaints about them.",
        "query": "SELECT t1.product_name , count(*) FROM products AS t1 JOIN complaints AS t2 ON t1.product_id = t2.product_id GROUP BY t1.product_name",
        "schema": "CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Complaints (complaint_type_code TEXT, complaint_outcome_code TEXT, product_id NUMBER, customer_id NUMBER, complaint_status_code TEXT, complaint_id NUMBER, staff_id NUMBER); CREATE TABLE Products (product_name TEXT, parent_product_id NUMBER, product_id NUMBER); CREATE TABLE Staff (staff_id NUMBER);"
      }
    ],
    [
      {
        "question": "Which customer ids have filed complaints?",
        "query": "SELECT DISTINCT customer_id FROM complaints",
        "schema": "CREATE TABLE Customers (customer_type_code TEXT, customer_id NUMBER); CREATE TABLE Complaints (customer_id NUMBER, complaint_id NUMBER, complaint_outcome_code TEXT, complaint_type_code TEXT);"
      },
      {
        "question": "What are the emails of these customers?",
        "query": "SELECT DISTINCT t1.email_address FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id = t2.customer_id",
        "schema": "CREATE TABLE Complaints (complaint_type_code TEXT, complaint_outcome_code TEXT, customer_id NUMBER, complaint_id NUMBER); CREATE TABLE Staff (email_address TEXT); CREATE TABLE Customers (customer_id NUMBER, customer_type_code TEXT, email_address TEXT);"
      },
      {
        "question": "Sum the complaints of each customer email address.",
        "query": "SELECT t1.email_address, count(*) FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id = t2.customer_id GROUP BY t1.customer_id",
        "schema": "CREATE TABLE Staff (email_address TEXT); CREATE TABLE Customers (email_address TEXT, customer_id NUMBER, customer_type_code TEXT); CREATE TABLE Complaints (complaint_outcome_code TEXT, complaint_type_code TEXT, complaint_id NUMBER, customer_id NUMBER);"
      },
      {
        "question": "Find the email of the customer who has filed the most complaints.",
        "query": "SELECT t1.email_address FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id = t2.customer_id GROUP BY t1.customer_id ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Staff (email_address TEXT); CREATE TABLE Customers (email_address TEXT, customer_type_code TEXT, customer_id NUMBER); CREATE TABLE Complaints (complaint_outcome_code TEXT, customer_id NUMBER, complaint_type_code TEXT, complaint_id NUMBER);"
      }
    ],
    [
      {
        "question": "Which customer id filed the least number of complaints? How many?",
        "query": "SELECT customer_id, count(*) FROM complaints GROUP BY customer_id ORDER BY count(*) ASC LIMIT 1",
        "schema": "CREATE TABLE Customers (customer_type_code TEXT, customer_id NUMBER); CREATE TABLE Complaints (complaint_id NUMBER, complaint_type_code TEXT, customer_id NUMBER, complaint_outcome_code TEXT);"
      },
      {
        "question": "Which product names did this customer complain about?",
        "query": "SELECT DISTINCT t1.product_name FROM products AS t1 JOIN complaints AS t2 ON t1.product_id = t2.product_id JOIN customers AS t3 GROUP BY t3.customer_id ORDER BY count(*) LIMIT 1",
        "schema": "CREATE TABLE Products (product_name TEXT, product_id NUMBER); CREATE TABLE Customers (customer_type_code TEXT, customer_id NUMBER); CREATE TABLE Complaints (complaint_type_code TEXT, customer_id NUMBER, complaint_id NUMBER, product_id NUMBER, complaint_outcome_code TEXT);"
      }
    ],
    [
      {
        "question": "What is the customer id of the customer who has filed the most recent complaint?",
        "query": "SELECT customer_id FROM complaints ORDER BY date_complaint_raised DESC LIMIT 1",
        "schema": "CREATE TABLE Complaints (customer_id NUMBER, date_complaint_raised TIME, complaint_outcome_code TEXT, complaint_id NUMBER, date_complaint_closed TIME); CREATE TABLE Customers (customer_id NUMBER, customer_type_code TEXT);"
      },
      {
        "question": "What is this customers city?",
        "query": "SELECT t1.town_city FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id = t2.customer_id ORDER BY t2.date_complaint_raised DESC LIMIT 1",
        "schema": "CREATE TABLE Complaints (customer_id NUMBER, date_complaint_closed TIME, complaint_outcome_code TEXT, date_complaint_raised TIME, complaint_id NUMBER); CREATE TABLE Customers (customer_type_code TEXT, address_line_2 TEXT, address_line_1 TEXT, customer_id NUMBER, town_city TEXT);"
      },
      {
        "question": "How about their phone number?",
        "query": "SELECT t1.phone_number FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id = t2.customer_id ORDER BY t2.date_complaint_raised DESC LIMIT 1",
        "schema": "CREATE TABLE Staff (phone_number TEXT); CREATE TABLE Complaints (date_complaint_closed TIME, complaint_outcome_code TEXT, complaint_id NUMBER, customer_id NUMBER, date_complaint_raised TIME); CREATE TABLE Customers (customer_id NUMBER, customer_type_code TEXT, phone_number TEXT, address_line_1 TEXT, town_city TEXT, address_line_2 TEXT);"
      }
    ],
    [
      {
        "question": "Find the email of the customers who have never filed a complaint before.",
        "query": "SELECT email_address FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM complaints)",
        "schema": "CREATE TABLE Staff (email_address TEXT); CREATE TABLE Complaints (complaint_id NUMBER, customer_id NUMBER); CREATE TABLE Customers (email_address TEXT, customer_id NUMBER, customer_type_code TEXT);"
      },
      {
        "question": "Also the phone number.",
        "query": "SELECT email_address , phone_number FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM complaints)",
        "schema": "CREATE TABLE Staff (email_address TEXT, phone_number TEXT); CREATE TABLE Customers (phone_number TEXT, address_line_2 TEXT, email_address TEXT, customer_type_code TEXT, address_line_1 TEXT, customer_id NUMBER); CREATE TABLE Complaints (customer_id NUMBER, complaint_id NUMBER);"
      }
    ],
    [
      {
        "question": "What are the phone numbers of customers?",
        "query": "SELECT phone_number FROM customers",
        "schema": "CREATE TABLE Customers (customer_type_code TEXT, phone_number TEXT, address_line_2 TEXT, address_line_1 TEXT, customer_id NUMBER); CREATE TABLE Staff (phone_number TEXT);"
      },
      {
        "question": "How about staff?",
        "query": "SELECT phone_number FROM staff",
        "schema": "CREATE TABLE Complaints (staff_id NUMBER); CREATE TABLE Customers (phone_number TEXT, address_line_2 TEXT, customer_type_code TEXT, address_line_1 TEXT, customer_id NUMBER); CREATE TABLE Staff (first_name TEXT, phone_number TEXT, last_name TEXT, staff_id NUMBER);"
      },
      {
        "question": "Union those.",
        "query": "SELECT phone_number FROM customers UNION SELECT phone_number FROM staff",
        "schema": "CREATE TABLE Complaints (staff_id NUMBER); CREATE TABLE Customers (customer_type_code TEXT, customer_id NUMBER, phone_number TEXT, address_line_2 TEXT, address_line_1 TEXT); CREATE TABLE Staff (first_name TEXT, staff_id NUMBER, last_name TEXT, phone_number TEXT);"
      }
    ],
    [
      {
        "question": "Order the product records by descending price.",
        "query": "SELECT * FROM products ORDER BY product_price DESC",
        "schema": "CREATE TABLE Products (product_id NUMBER, product_name TEXT, product_price NUMBER);"
      },
      {
        "question": "Just show the product names and category codes.",
        "query": "SELECT product_name , product_category_code FROM products ORDER BY product_price DESC",
        "schema": "CREATE TABLE Products (product_id NUMBER, product_name TEXT, product_price NUMBER, product_category_code TEXT);"
      },
      {
        "question": "Only for the most expensive product.",
        "query": "SELECT product_name , product_category_code FROM products ORDER BY product_price DESC LIMIT 1",
        "schema": "CREATE TABLE Products (product_id NUMBER, product_price NUMBER, product_name TEXT, product_category_code TEXT);"
      }
    ],
    [
      {
        "question": "Which product ids have never been complained about?",
        "query": "SELECT product_id FROM products WHERE product_id NOT IN (SELECT product_id FROM complaints)",
        "schema": "CREATE TABLE Products (product_id NUMBER, product_name TEXT, parent_product_id NUMBER); CREATE TABLE Staff (staff_id NUMBER); CREATE TABLE Complaints (complaint_id NUMBER, complaint_type_code TEXT, customer_id NUMBER, product_id NUMBER); CREATE TABLE Customers (customer_id NUMBER);"
      },
      {
        "question": "Which ones have been complained about?",
        "query": "SELECT DISTINCT product_id FROM complaints",
        "schema": "CREATE TABLE Staff (staff_id NUMBER); CREATE TABLE Complaints (complaint_id NUMBER, customer_id NUMBER, product_id NUMBER, complaint_type_code TEXT); CREATE TABLE Products (parent_product_id NUMBER, product_name TEXT, product_id NUMBER); CREATE TABLE Customers (customer_id NUMBER);"
      },
      {
        "question": "Find the prices of products which has never received a single complaint.",
        "query": "SELECT product_price FROM products WHERE product_id NOT IN (SELECT product_id FROM complaints)",
        "schema": "CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Products (product_id NUMBER, product_price NUMBER, parent_product_id NUMBER, product_name TEXT); CREATE TABLE Complaints (complaint_id NUMBER, complaint_type_code TEXT, product_id NUMBER, complaint_outcome_code TEXT, customer_id NUMBER); CREATE TABLE Staff (staff_id NUMBER);"
      }
    ],
    [
      {
        "question": "What is the name of the cheapest product?",
        "query": "SELECT product_name FROM products ORDER BY product_price ASC LIMIT 1",
        "schema": "CREATE TABLE Products (product_id NUMBER, product_name TEXT, product_price NUMBER, product_category_code TEXT); CREATE TABLE Customers (customer_id NUMBER);"
      },
      {
        "question": "Show records where this product was complained about.",
        "query": "SELECT * FROM complaints WHERE product_id IN (SELECT product_id FROM products ORDER BY product_price ASC LIMIT 1)",
        "schema": "CREATE TABLE Products (product_category_code TEXT, product_price NUMBER, product_id NUMBER, product_name TEXT); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Complaints (complaint_id NUMBER, complaint_outcome_code TEXT, complaint_type_code TEXT, product_id NUMBER);"
      },
      {
        "question": "Find the last name of the staff member who processed a complaint of this cheapest product.",
        "query": "SELECT last_name FROM staff WHERE staff_id IN (SELECT staff_id FROM complaints WHERE product_id IN (SELECT product_id FROM products ORDER BY product_price ASC LIMIT 1))",
        "schema": "CREATE TABLE Products (product_category_code TEXT, product_price NUMBER, product_name TEXT, product_id NUMBER); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Complaints (staff_id NUMBER, complaint_id NUMBER, complaint_type_code TEXT, product_id NUMBER, complaint_outcome_code TEXT); CREATE TABLE Staff (first_name TEXT, staff_id NUMBER, last_name TEXT);"
      }
    ],
    [
      {
        "question": "Count the various complaint status codes.",
        "query": "SELECT complaint_status_code, count(*) FROM complaints GROUP BY complaint_status_code",
        "schema": "CREATE TABLE Staff (staff_id NUMBER); CREATE TABLE Complaints (complaint_outcome_code TEXT, complaint_status_code TEXT, complaint_id NUMBER, customer_id NUMBER, complaint_type_code TEXT); CREATE TABLE Customers (customer_id NUMBER);"
      },
      {
        "question": "Only show counts greater than 3.",
        "query": "SELECT complaint_status_code FROM complaints GROUP BY complaint_status_code HAVING count(*) > 3",
        "schema": "CREATE TABLE Complaints (complaint_outcome_code TEXT, customer_id NUMBER, complaint_type_code TEXT, complaint_id NUMBER, complaint_status_code TEXT); CREATE TABLE Staff (staff_id NUMBER); CREATE TABLE Customers (customer_id NUMBER);"
      }
    ],
    [
      {
        "question": "What are the email addresses of the staff?",
        "query": "SELECT email_address FROM staff",
        "schema": "CREATE TABLE Customers (email_address TEXT, customer_id NUMBER); CREATE TABLE Staff (staff_id NUMBER, last_name TEXT, email_address TEXT, first_name TEXT); CREATE TABLE Complaints (staff_id NUMBER);"
      },
      {
        "question": "Find the last name of the staff whose email address contains \"wrau\".",
        "query": "SELECT last_name FROM staff WHERE email_address LIKE \"%wrau%\"",
        "schema": "CREATE TABLE Staff (last_name TEXT, staff_id NUMBER, first_name TEXT, email_address TEXT); CREATE TABLE Customers (customer_id NUMBER, email_address TEXT); CREATE TABLE Complaints (staff_id NUMBER);"
      }
    ],
    [
      {
        "question": "What is the most common customer type?",
        "query": "SELECT customer_type_code FROM customers GROUP BY customer_type_code ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Customers (customer_id NUMBER, customer_type_code TEXT);"
      },
      {
        "question": "How many are there in this group?",
        "query": "SELECT count(*) FROM customers GROUP BY customer_type_code ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Customers (customer_type_code TEXT, customer_id NUMBER);"
      }
    ],
    [
      {
        "question": "What is the id of the first complaint?",
        "query": "SELECT complaint_id FROM complaints ORDER BY date_complaint_raised ASC LIMIT 1",
        "schema": "CREATE TABLE Complaints (product_id NUMBER, staff_id NUMBER, customer_id NUMBER, complaint_outcome_code TEXT, complaint_id NUMBER, date_complaint_raised TIME); CREATE TABLE Staff (staff_id NUMBER); CREATE TABLE Products (product_name TEXT, product_id NUMBER); CREATE TABLE Customers (customer_id NUMBER);"
      },
      {
        "question": "Which staff id was there for it?",
        "query": "SELECT staff_id FROM complaints ORDER BY date_complaint_raised ASC LIMIT 1",
        "schema": "CREATE TABLE Complaints (customer_id NUMBER, complaint_id NUMBER, staff_id NUMBER, product_id NUMBER, date_complaint_raised TIME, complaint_outcome_code TEXT); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Products (product_name TEXT, product_id NUMBER); CREATE TABLE Staff (last_name TEXT, staff_id NUMBER, first_name TEXT);"
      },
      {
        "question": "What was the last name of this staff member?",
        "query": "SELECT t1.last_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id = t2.staff_id ORDER BY t2.date_complaint_raised LIMIT 1",
        "schema": "CREATE TABLE Products (product_id NUMBER, product_name TEXT); CREATE TABLE Staff (first_name TEXT, staff_id NUMBER, last_name TEXT); CREATE TABLE Complaints (staff_id NUMBER, product_id NUMBER, customer_id NUMBER, complaint_id NUMBER, complaint_outcome_code TEXT, date_complaint_raised TIME); CREATE TABLE Customers (customer_id NUMBER);"
      }
    ],
    [
      {
        "question": "Which complaints have type Product Failure?",
        "query": "SELECT * FROM complaints WHERE complaint_type_code = \"Product Failure\"",
        "schema": "CREATE TABLE Products (product_id NUMBER); CREATE TABLE Customers (customer_type_code TEXT, customer_id NUMBER); CREATE TABLE Staff (staff_id NUMBER); CREATE TABLE Complaints (complaint_outcome_code TEXT, complaint_id NUMBER, customer_id NUMBER, product_id NUMBER, complaint_type_code TEXT);"
      },
      {
        "question": "Which complaint statuses are among those records?",
        "query": "SELECT DISTINCT complaint_status_code FROM complaints WHERE complaint_status_code IN (SELECT complaint_status_code FROM complaints WHERE complaint_type_code = \"Product Failure\")",
        "schema": "CREATE TABLE Products (product_id NUMBER); CREATE TABLE Staff (staff_id NUMBER); CREATE TABLE Customers (customer_id NUMBER, customer_type_code TEXT); CREATE TABLE Complaints (complaint_type_code TEXT, customer_id NUMBER, complaint_id NUMBER, product_id NUMBER, complaint_outcome_code TEXT, complaint_status_code TEXT);"
      },
      {
        "question": "Count the occurrences of each complaint status in the above.",
        "query": "SELECT complaint_status_code , count(*) FROM complaints WHERE complaint_type_code = \"Product Failure\" GROUP BY complaint_status_code",
        "schema": "CREATE TABLE Products (product_id NUMBER); CREATE TABLE Customers (customer_id NUMBER, customer_type_code TEXT); CREATE TABLE Complaints (customer_id NUMBER, complaint_status_code TEXT, product_id NUMBER, complaint_id NUMBER, complaint_type_code TEXT, complaint_outcome_code TEXT); CREATE TABLE Staff (staff_id NUMBER);"
      }
    ],
    [
      {
        "question": "What are the staff ids of the top 5 staff who have handled the greatest number of complaints?",
        "query": "SELECT staff_id FROM complaints GROUP BY staff_id ORDER BY count(*) LIMIT 5",
        "schema": "CREATE TABLE Complaints (complaint_id NUMBER, staff_id NUMBER, complaint_type_code TEXT); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Staff (last_name TEXT, staff_id NUMBER, first_name TEXT);"
      },
      {
        "question": "What are their first names?",
        "query": "SELECT t1.first_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id = t2.staff_id GROUP BY t2.staff_id ORDER BY count(*) LIMIT 5",
        "schema": "CREATE TABLE Complaints (staff_id NUMBER, complaint_id NUMBER, complaint_type_code TEXT); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Staff (staff_id NUMBER, last_name TEXT, first_name TEXT);"
      }
    ]
  ],
  "restaurant_1": [
    [
      {
        "question": "Give the names and ratings of Restaurants.",
        "query": "SELECT resname , rating FROM restaurant",
        "schema": "CREATE TABLE Type_Of_Restaurant (ResTypeID NUMBER, ResID NUMBER); CREATE TABLE Student (StuID NUMBER); CREATE TABLE Restaurant_Type (ResTypeName TEXT, ResTypeID NUMBER, ResTypeDescription TEXT); CREATE TABLE Restaurant (Rating NUMBER, ResID NUMBER, ResName TEXT);"
      },
      {
        "question": "Sort by descending order.",
        "query": "SELECT resname , rating FROM restaurant ORDER BY rating DESC",
        "schema": "CREATE TABLE Restaurant (ResID NUMBER, Rating NUMBER, ResName TEXT); CREATE TABLE Student (StuID NUMBER); CREATE TABLE Type_Of_Restaurant (ResID NUMBER, ResTypeID NUMBER); CREATE TABLE Restaurant_Type (ResTypeDescription TEXT, ResTypeID NUMBER, ResTypeName TEXT);"
      },
      {
        "question": "Just give the most highly rated restaurant name and rating.",
        "query": "SELECT resname , rating FROM restaurant ORDER BY rating DESC LIMIT 1;",
        "schema": "CREATE TABLE Restaurant_Type (ResTypeDescription TEXT, ResTypeID NUMBER, ResTypeName TEXT); CREATE TABLE Type_Of_Restaurant (ResTypeID NUMBER, ResID NUMBER); CREATE TABLE Restaurant (ResID NUMBER, ResName TEXT, Rating NUMBER); CREATE TABLE Student (StuID NUMBER);"
      }
    ],
    [
      {
        "question": "List the last names, first names, and ages of students.",
        "query": "SELECT lname, fname, age FROM student",
        "schema": "CREATE TABLE Student (LName TEXT, Age NUMBER, StuID NUMBER, Fname TEXT);"
      },
      {
        "question": "Narrow that down to last name \"Smith\" and first name \"Linda\"",
        "query": "SELECT lname, fname, age FROM student WHERE fname = \"Linda\" AND lname = \"Smith\";",
        "schema": "CREATE TABLE Student (Age NUMBER, StuID NUMBER, Fname TEXT, LName TEXT);"
      },
      {
        "question": "What is the age of student Linda Smith?",
        "query": "SELECT age FROM student WHERE fname = \"Linda\" AND lname = \"Smith\";",
        "schema": "CREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER);"
      }
    ],
    [
      {
        "question": "What is Linda Smith's Major?",
        "query": "SELECT major FROM student WHERE fname = \"Linda\" AND lname = \"Smith\";",
        "schema": "CREATE TABLE Restaurant_Type (ResTypeID NUMBER); CREATE TABLE Student (LName TEXT, Major NUMBER, Fname TEXT, StuID NUMBER); CREATE TABLE Restaurant (Address TEXT, ResID NUMBER, ResName TEXT, Rating NUMBER);"
      },
      {
        "question": "How about Linda Smith's Adivisor?",
        "query": "SELECT advisor FROM student WHERE fname = \"Linda\" AND lname = \"Smith\";",
        "schema": "CREATE TABLE Restaurant (Address TEXT, ResName TEXT, Rating NUMBER, ResID NUMBER); CREATE TABLE Type_Of_Restaurant (ResID NUMBER, ResTypeID NUMBER); CREATE TABLE Restaurant_Type (ResTypeID NUMBER, ResTypeName TEXT); CREATE TABLE Student (Major NUMBER, StuID NUMBER, LName TEXT, Fname TEXT, Advisor NUMBER);"
      },
      {
        "question": "Give her gender.",
        "query": "SELECT sex FROM student WHERE fname = \"Linda\" AND lname = \"Smith\";",
        "schema": "CREATE TABLE Restaurant (Address TEXT, ResName TEXT, Rating NUMBER, ResID NUMBER); CREATE TABLE Type_Of_Restaurant (ResID NUMBER, ResTypeID NUMBER); CREATE TABLE Student (LName TEXT, Major NUMBER, Sex TEXT, Fname TEXT, Advisor NUMBER, StuID NUMBER); CREATE TABLE Restaurant_Type (ResTypeName TEXT, ResTypeID NUMBER);"
      }
    ],
    [
      {
        "question": "Give the student id of linda smith.",
        "query": "SELECT stuid FROM student WHERE fname = \"Linda\" AND lname = \"Smith\";",
        "schema": "CREATE TABLE Student (StuID NUMBER, Fname TEXT, LName TEXT); CREATE TABLE Visits_Restaurant (StuID NUMBER);"
      },
      {
        "question": "Now for Tracy Kim.",
        "query": "SELECT stuid FROM student WHERE fname = \"Tracy\" AND lname = \"Kim\";",
        "schema": "CREATE TABLE Visits_Restaurant (StuID NUMBER); CREATE TABLE Student (StuID NUMBER, Fname TEXT, LName TEXT);"
      },
      {
        "question": "Which city does student Linda Smith live in?",
        "query": "SELECT city_code FROM student WHERE fname = \"Linda\" AND lname = \"Smith\";",
        "schema": "CREATE TABLE Restaurant (Address TEXT); CREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, city_code TEXT); CREATE TABLE Visits_Restaurant (StuID NUMBER);"
      }
    ],
    [
      {
        "question": "Give the distinct advisors of students.",
        "query": "SELECT DISTINCT advisor FROM student",
        "schema": "CREATE TABLE Student (StuID NUMBER, Advisor NUMBER);"
      },
      {
        "question": "Which of those advises the most students?",
        "query": "SELECT advisor FROM student GROUP BY advisor ORDER BY count(advisor) DESC LIMIT 1;",
        "schema": "CREATE TABLE Student (StuID NUMBER, Advisor NUMBER);"
      },
      {
        "question": "Give the count, too.",
        "query": "SELECT advisor , count(*) FROM student GROUP BY advisor ORDER BY count(advisor) DESC LIMIT 1;",
        "schema": "CREATE TABLE Student (StuID NUMBER, Advisor NUMBER);"
      }
    ],
    [
      {
        "question": "Give distinct majors.",
        "query": "SELECT DISTINCT major FROM student",
        "schema": "CREATE TABLE Student (Major NUMBER, StuID NUMBER); CREATE TABLE Restaurant (ResID NUMBER);"
      },
      {
        "question": "Which has the most number of students?",
        "query": "SELECT major FROM student GROUP BY major ORDER BY count(major) DESC LIMIT 1;",
        "schema": "CREATE TABLE Restaurant (ResID NUMBER); CREATE TABLE Student (LName TEXT, StuID NUMBER, Major NUMBER);"
      },
      {
        "question": "Which has the least?",
        "query": "SELECT major FROM student GROUP BY major ORDER BY count(major) ASC LIMIT 1;",
        "schema": "CREATE TABLE Restaurant (ResID NUMBER); CREATE TABLE Student (Major NUMBER, LName TEXT, StuID NUMBER);"
      },
      {
        "question": "Give the count to prove it.",
        "query": "SELECT major , count(*) FROM student GROUP BY major ORDER BY count(major) ASC LIMIT 1;",
        "schema": "CREATE TABLE Student (StuID NUMBER, LName TEXT, Major NUMBER); CREATE TABLE Restaurant (ResID NUMBER);"
      }
    ],
    [
      {
        "question": "Which major has between 2 and 30 number of students?",
        "query": "SELECT major FROM student GROUP BY major HAVING count(major) BETWEEN 2 AND 30;",
        "schema": "CREATE TABLE Student (StuID NUMBER, Major NUMBER, Age NUMBER);"
      },
      {
        "question": "Count that, too.",
        "query": "SELECT major , count(*) FROM student GROUP BY major HAVING count(major) BETWEEN 2 AND 30;",
        "schema": "CREATE TABLE Student (StuID NUMBER, Major NUMBER, Age NUMBER);"
      }
    ],
    [
      {
        "question": "What are the student ids of students majoring in 600?",
        "query": "SELECT stuid FROM student WHERE major = 600;",
        "schema": "CREATE TABLE Student (LName TEXT, StuID NUMBER, Major NUMBER);"
      },
      {
        "question": "Only show those whose age is 18.",
        "query": "SELECT stuid FROM student WHERE age > 18 AND major = 600;",
        "schema": "CREATE TABLE Student (StuID NUMBER, Major NUMBER, Sex TEXT, Age NUMBER, LName TEXT);"
      },
      {
        "question": "Just show the first and last names.",
        "query": "SELECT fname , lname FROM student WHERE age > 18 AND major = 600;",
        "schema": "CREATE TABLE Student (Major NUMBER, Sex TEXT, LName TEXT, Age NUMBER, Fname TEXT, StuID NUMBER);"
      }
    ],
    [
      {
        "question": "Give information for students older than 18.",
        "query": "SELECT * FROM student WHERE age > 18",
        "schema": "CREATE TABLE Student (StuID NUMBER, LName TEXT, Age NUMBER);"
      },
      {
        "question": "List all female students older than 18 who are not majoring in 600. List students' first name and last name.",
        "query": "SELECT fname , lname FROM student WHERE age > 18 AND major != 600 AND sex = 'F';",
        "schema": "CREATE TABLE Student (Sex TEXT, StuID NUMBER, Major NUMBER, Age NUMBER, LName TEXT, Fname TEXT);"
      }
    ],
    [
      {
        "question": "How many types of restaurant have the name \"Sandwich\"?",
        "query": "SELECT count(*) FROM restaurant_type WHERE restypename = \"Sandwich\"",
        "schema": "CREATE TABLE Student (StuID NUMBER); CREATE TABLE Restaurant_Type (ResTypeDescription TEXT, ResTypeName TEXT, ResTypeID NUMBER); CREATE TABLE Restaurant (ResID NUMBER, ResName TEXT); CREATE TABLE Type_Of_Restaurant (ResID NUMBER, ResTypeID NUMBER);"
      },
      {
        "question": "What are the names of restaurants with the type \"Sandwich\"?",
        "query": "SELECT restaurant.resname FROM restaurant JOIN type_of_restaurant ON restaurant.resid = type_of_restaurant.resid JOIN restaurant_type ON type_of_restaurant.restypeid = restaurant_type.restypeid GROUP BY type_of_restaurant.restypeid HAVING restaurant_type.restypename = 'Sandwich'",
        "schema": "CREATE TABLE Restaurant_Type (ResTypeName TEXT, ResTypeDescription TEXT, ResTypeID NUMBER); CREATE TABLE Student (StuID NUMBER); CREATE TABLE Type_Of_Restaurant (ResID NUMBER, ResTypeID NUMBER); CREATE TABLE Restaurant (ResID NUMBER, ResName TEXT);"
      },
      {
        "question": "Give the count of that.",
        "query": "SELECT count(*) FROM restaurant JOIN type_of_restaurant ON restaurant.resid = type_of_restaurant.resid JOIN restaurant_type ON type_of_restaurant.restypeid = restaurant_type.restypeid GROUP BY type_of_restaurant.restypeid HAVING restaurant_type.restypename = 'Sandwich'",
        "schema": "CREATE TABLE Restaurant_Type (ResTypeDescription TEXT, ResTypeName TEXT, ResTypeID NUMBER); CREATE TABLE Student (StuID NUMBER); CREATE TABLE Restaurant (ResName TEXT, ResID NUMBER); CREATE TABLE Type_Of_Restaurant (ResID NUMBER, ResTypeID NUMBER);"
      }
    ],
    [
      {
        "question": "How many times did Linda Smith visit a restaurant?",
        "query": "SELECT count(*) FROM student JOIN visits_restaurant ON student.stuid = visits_restaurant.stuid WHERE student.fname = \"Linda\" AND student.lname = \"Smith\";",
        "schema": "CREATE TABLE Student (StuID NUMBER, Fname TEXT, LName TEXT); CREATE TABLE Restaurant (ResID NUMBER, ResName TEXT); CREATE TABLE Visits_Restaurant (Spent NUMBER, Time TIME, ResID NUMBER, StuID NUMBER);"
      },
      {
        "question": "For those visits, how long did she spend?",
        "query": "SELECT sum(spent) FROM student JOIN visits_restaurant ON student.stuid = visits_restaurant.stuid WHERE student.fname = \"Linda\" AND student.lname = \"Smith\";",
        "schema": "CREATE TABLE Visits_Restaurant (Time TIME, StuID NUMBER, ResID NUMBER, Spent NUMBER); CREATE TABLE Student (StuID NUMBER, Age NUMBER, LName TEXT, Fname TEXT); CREATE TABLE Restaurant (ResID NUMBER, ResName TEXT);"
      }
    ],
    [
      {
        "question": "How many visits did Subway receive?",
        "query": "SELECT count(*) FROM visits_restaurant JOIN restaurant ON visits_restaurant.resid = restaurant.resid WHERE restaurant.resname = \"Subway\";",
        "schema": "CREATE TABLE Restaurant (ResID NUMBER, ResName TEXT); CREATE TABLE Visits_Restaurant (Spent NUMBER, Time TIME, StuID NUMBER, ResID NUMBER); CREATE TABLE Student (StuID NUMBER);"
      },
      {
        "question": "Give the student ids for these visits.",
        "query": "SELECT stuid FROM visits_restaurant JOIN restaurant ON visits_restaurant.resid = restaurant.resid WHERE restaurant.resname = \"Subway\";",
        "schema": "CREATE TABLE Visits_Restaurant (StuID NUMBER, Time TIME, ResID NUMBER, Spent NUMBER); CREATE TABLE Student (StuID NUMBER, Fname TEXT, LName TEXT); CREATE TABLE Restaurant (ResName TEXT, ResID NUMBER);"
      },
      {
        "question": "Do any of these correspond to the student Linda Smith? How many?",
        "query": "SELECT count(*) FROM student JOIN visits_restaurant ON student.stuid = visits_restaurant.stuid JOIN restaurant ON visits_restaurant.resid = restaurant.resid WHERE student.fname = \"Linda\" AND student.lname = \"Smith\" AND restaurant.resname = \"Subway\";",
        "schema": "CREATE TABLE Restaurant (ResID NUMBER, ResName TEXT); CREATE TABLE Student (LName TEXT, Fname TEXT, StuID NUMBER); CREATE TABLE Visits_Restaurant (Time TIME, Spent NUMBER, StuID NUMBER, ResID NUMBER);"
      }
    ],
    [
      {
        "question": "How long did Linda Smith spend at Subway?",
        "query": "SELECT spent FROM student JOIN visits_restaurant ON student.stuid = visits_restaurant.stuid JOIN restaurant ON visits_restaurant.resid = restaurant.resid WHERE student.fname = \"Linda\" AND student.lname = \"Smith\" AND restaurant.resname = \"Subway\";",
        "schema": "CREATE TABLE Type_Of_Restaurant (ResID NUMBER, ResTypeID NUMBER); CREATE TABLE Restaurant_Type (ResTypeName TEXT, ResTypeID NUMBER); CREATE TABLE Visits_Restaurant (Spent NUMBER, StuID NUMBER, ResID NUMBER, Time TIME); CREATE TABLE Student (StuID NUMBER, Fname TEXT, city_code TEXT, LName TEXT); CREATE TABLE Restaurant (ResName TEXT, ResID NUMBER, Address TEXT, Rating NUMBER);"
      },
      {
        "question": "What time did she arrive?",
        "query": "SELECT TIME FROM student JOIN visits_restaurant ON student.stuid = visits_restaurant.stuid JOIN restaurant ON visits_restaurant.resid = restaurant.resid WHERE student.fname = \"Linda\" AND student.lname = \"Smith\" AND restaurant.resname = \"Subway\";",
        "schema": "CREATE TABLE Student (city_code TEXT, StuID NUMBER, LName TEXT, Fname TEXT); CREATE TABLE Visits_Restaurant (Spent NUMBER, Time TIME, StuID NUMBER, ResID NUMBER); CREATE TABLE Restaurant_Type (ResTypeID NUMBER, ResTypeName TEXT); CREATE TABLE Restaurant (ResName TEXT, Address TEXT, Rating NUMBER, ResID NUMBER); CREATE TABLE Type_Of_Restaurant (ResTypeID NUMBER, ResID NUMBER);"
      }
    ],
    [
      {
        "question": "What was the restaraunt id with the least amount of time spent?",
        "query": "SELECT visits_restaurant.resid FROM visits_restaurant JOIN restaurant ON visits_restaurant.resid = restaurant.resid GROUP BY restaurant.resid ORDER BY sum(visits_restaurant.spent) ASC LIMIT 1;",
        "schema": "CREATE TABLE Restaurant_Type (ResTypeDescription TEXT, ResTypeName TEXT, ResTypeID NUMBER); CREATE TABLE Type_Of_Restaurant (ResTypeID NUMBER, ResID NUMBER); CREATE TABLE Visits_Restaurant (ResID NUMBER, Time TIME, Spent NUMBER, StuID NUMBER); CREATE TABLE Student (Fname TEXT, city_code TEXT, LName TEXT, StuID NUMBER); CREATE TABLE Restaurant (Rating NUMBER, Address TEXT, ResID NUMBER, ResName TEXT);"
      },
      {
        "question": "Give the name of this restaraunt and sum of time spent.",
        "query": "SELECT restaurant.resname , sum(visits_restaurant.spent) FROM visits_restaurant JOIN restaurant ON visits_restaurant.resid = restaurant.resid GROUP BY restaurant.resid ORDER BY sum(visits_restaurant.spent) ASC LIMIT 1;",
        "schema": "CREATE TABLE Type_Of_Restaurant (ResTypeID NUMBER, ResID NUMBER); CREATE TABLE Restaurant (Address TEXT, ResName TEXT, ResID NUMBER, Rating NUMBER); CREATE TABLE Student (city_code TEXT, LName TEXT, Fname TEXT, StuID NUMBER); CREATE TABLE Visits_Restaurant (Time TIME, StuID NUMBER, Spent NUMBER, ResID NUMBER); CREATE TABLE Restaurant_Type (ResTypeName TEXT, ResTypeID NUMBER, ResTypeDescription TEXT);"
      }
    ]
  ],
  "insurance_and_eClaims": [
    [
      {
        "question": "What is the start and end dates of all policies?",
        "query": "SELECT start_date, end_date FROM policies",
        "schema": "CREATE TABLE Policies (Start_Date TIME, Policy_ID NUMBER, End_Date TIME); CREATE TABLE Claim_Headers (Policy_ID NUMBER, Date_of_Settlement TIME, Date_of_Claim TIME);"
      },
      {
        "question": "For the policies of \"Dayana Robel\"?",
        "query": "SELECT start_date, end_date FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id WHERE t2.customer_details = \"Dayana Robel\"",
        "schema": "CREATE TABLE Customers (Customer_Details TEXT, Customer_ID NUMBER); CREATE TABLE Policies (Customer_ID NUMBER, Policy_ID NUMBER, End_Date TIME, Start_Date TIME); CREATE TABLE Claim_Headers (Policy_ID NUMBER, Date_of_Claim TIME, Date_of_Settlement TIME);"
      },
      {
        "question": "What about the policy type code instead.",
        "query": "SELECT policy_type_code FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id WHERE t2.customer_details = \"Dayana Robel\"",
        "schema": "CREATE TABLE Customers (Customer_ID NUMBER, Customer_Details TEXT); CREATE TABLE Claim_Headers (Policy_ID NUMBER, Date_of_Claim TIME, Date_of_Settlement TIME); CREATE TABLE Policies (Policy_ID NUMBER, Customer_ID NUMBER, Start_Date TIME, End_Date TIME, Policy_Type_Code TEXT);"
      }
    ],
    [
      {
        "question": "What are the policy type codes?",
        "query": "SELECT policy_type_code FROM policies",
        "schema": "CREATE TABLE Policies (Policy_ID NUMBER, Policy_Type_Code TEXT); CREATE TABLE Claims_Documents (Document_Type_Code TEXT); CREATE TABLE Claim_Headers (Policy_ID NUMBER, Claim_Type_Code TEXT);"
      },
      {
        "question": "What are the least frequent ones?",
        "query": "SELECT policy_type_code FROM policies GROUP BY policy_type_code ORDER BY count(*) ASC LIMIT 1",
        "schema": "CREATE TABLE Claims_Documents (Document_Type_Code TEXT); CREATE TABLE Claim_Headers (Claim_Type_Code TEXT, Policy_ID NUMBER); CREATE TABLE Policies (Policy_ID NUMBER, Policy_Type_Code TEXT);"
      },
      {
        "question": "Most frequent?",
        "query": "SELECT policy_type_code FROM policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Claims_Documents (Document_Type_Code TEXT); CREATE TABLE Policies (Policy_ID NUMBER, Policy_Type_Code TEXT); CREATE TABLE Claim_Headers (Policy_ID NUMBER, Claim_Type_Code TEXT);"
      }
    ],
    [
      {
        "question": "What are the policies?",
        "query": "SELECT * FROM policies",
        "schema": "CREATE TABLE Policies (Customer_ID NUMBER, Policy_Type_Code TEXT, Policy_ID NUMBER); CREATE TABLE Claim_Headers (Policy_ID NUMBER); CREATE TABLE Customers (Customer_ID NUMBER);"
      },
      {
        "question": "Which ones have been used only once?",
        "query": "SELECT policy_type_code FROM policies GROUP BY policy_type_code HAVING count(*) = 1",
        "schema": "CREATE TABLE Customers (Customer_ID NUMBER); CREATE TABLE Policies (Start_Date TIME, Policy_ID NUMBER, End_Date TIME, Policy_Type_Code TEXT, Customer_ID NUMBER); CREATE TABLE Claim_Headers (Policy_ID NUMBER);"
      },
      {
        "question": "How about more than twice?",
        "query": "SELECT policy_type_code FROM policies GROUP BY policy_type_code HAVING count(*) > 2",
        "schema": "CREATE TABLE Customers (Customer_ID NUMBER); CREATE TABLE Claim_Headers (Policy_ID NUMBER); CREATE TABLE Policies (Policy_Type_Code TEXT, Policy_ID NUMBER, End_Date TIME, Customer_ID NUMBER, Start_Date TIME);"
      }
    ],
    [
      {
        "question": "What are the claim type codes in the claim headers?",
        "query": "SELECT claim_type_code FROM claim_headers",
        "schema": "CREATE TABLE Claims_Documents (Claim_ID NUMBER, Document_Type_Code TEXT); CREATE TABLE Claim_Headers (Claim_Header_ID NUMBER, Claim_Type_Code TEXT, Policy_ID NUMBER, Claim_Status_Code TEXT); CREATE TABLE Policies (Policy_Type_Code TEXT, Policy_ID NUMBER);"
      },
      {
        "question": "The amounts paid?",
        "query": "SELECT amount_piad FROM claim_headers",
        "schema": "CREATE TABLE Claim_Headers (Claim_Header_ID NUMBER, Claim_Status_Code TEXT, Amount_Piad NUMBER, Claim_Type_Code TEXT, Policy_ID NUMBER, Amount_Claimed NUMBER); CREATE TABLE Claims_Documents (Document_Type_Code TEXT, Claim_ID NUMBER); CREATE TABLE Policies (Policy_ID NUMBER, Policy_Type_Code TEXT);"
      },
      {
        "question": "What is the sum of that?",
        "query": "SELECT sum(amount_piad) FROM claim_headers",
        "schema": "CREATE TABLE Claim_Headers (Policy_ID NUMBER, Amount_Piad NUMBER, Amount_Claimed NUMBER, Claim_Header_ID NUMBER, Claim_Status_Code TEXT, Claim_Type_Code TEXT); CREATE TABLE Policies (Policy_Type_Code TEXT, Policy_ID NUMBER); CREATE TABLE Claims_Documents (Document_Type_Code TEXT, Claim_ID NUMBER);"
      },
      {
        "question": "Show the average as well.",
        "query": "SELECT sum(amount_piad) , avg(amount_piad) FROM claim_headers",
        "schema": "CREATE TABLE Claims_Documents (Claim_ID NUMBER, Document_Type_Code TEXT); CREATE TABLE Policies (Policy_ID NUMBER, Policy_Type_Code TEXT); CREATE TABLE Claim_Headers (Claim_Status_Code TEXT, Claim_Type_Code TEXT, Amount_Piad NUMBER, Claim_Header_ID NUMBER, Policy_ID NUMBER, Amount_Claimed NUMBER);"
      }
    ],
    [
      {
        "question": "What are the claim documents?",
        "query": "SELECT * FROM claims_documents",
        "schema": "CREATE TABLE Claims_Documents (Document_Type_Code TEXT, Claim_ID NUMBER, Created_by_Staff_ID NUMBER); CREATE TABLE Claim_Headers (Claim_Type_Code TEXT, Claim_Header_ID NUMBER); CREATE TABLE Claims_Processing (Claim_ID NUMBER);"
      },
      {
        "question": "Which was created most recently?",
        "query": "SELECT * FROM claims_documents WHERE created_date = (SELECT created_date FROM claims_documents ORDER BY created_date LIMIT 1)",
        "schema": "CREATE TABLE Claims_Processing (Claim_ID NUMBER); CREATE TABLE Claims_Documents (Created_by_Staff_ID NUMBER, Claim_ID NUMBER, Document_Type_Code TEXT, Created_Date NUMBER); CREATE TABLE Claim_Headers (Date_of_Claim TIME, Claim_Header_ID NUMBER, Claim_Type_Code TEXT);"
      },
      {
        "question": "Show the claim headers for this as well.",
        "query": "SELECT * FROM claim_headers AS t1 JOIN claims_documents AS t2 ON t1.claim_header_id = t2.claim_id WHERE t2.created_date = (SELECT created_date FROM claims_documents ORDER BY created_date LIMIT 1)",
        "schema": "CREATE TABLE Claim_Headers (Claim_Header_ID NUMBER, Claim_Type_Code TEXT, Date_of_Claim TIME); CREATE TABLE Claims_Processing (Claim_ID NUMBER); CREATE TABLE Claims_Documents (Claim_ID NUMBER, Document_Type_Code TEXT, Created_by_Staff_ID NUMBER, Created_Date NUMBER);"
      },
      {
        "question": "What is the total claim amount for these?",
        "query": "SELECT sum(t1.amount_claimed) FROM claim_headers AS t1 JOIN claims_documents AS t2 ON t1.claim_header_id = t2.claim_id WHERE t2.created_date = (SELECT created_date FROM claims_documents ORDER BY created_date LIMIT 1)",
        "schema": "CREATE TABLE Claims_Processing (Claim_ID NUMBER); CREATE TABLE Claims_Documents (Document_Type_Code TEXT, Created_Date NUMBER, Created_by_Staff_ID NUMBER, Claim_ID NUMBER); CREATE TABLE Claim_Headers (Amount_Piad NUMBER, Claim_Header_ID NUMBER, Claim_Type_Code TEXT, Date_of_Claim TIME, Amount_Claimed NUMBER);"
      }
    ],
    [
      {
        "question": "What was the smallest policy amount paid?",
        "query": "SELECT min(amount_piad) FROM claim_headers",
        "schema": "CREATE TABLE Policies (Policy_ID NUMBER, Customer_ID NUMBER); CREATE TABLE Claim_Headers (Amount_Piad NUMBER, Amount_Claimed NUMBER, Policy_ID NUMBER);"
      },
      {
        "question": "Claim amount instead?",
        "query": "SELECT min(amount_claimed) FROM claim_headers",
        "schema": "CREATE TABLE Policies (Policy_ID NUMBER, Customer_ID NUMBER); CREATE TABLE Claim_Headers (Amount_Claimed NUMBER, Claim_Type_Code TEXT, Claim_Header_ID NUMBER, Amount_Piad NUMBER, Policy_ID NUMBER);"
      },
      {
        "question": "Which was the policy for this?",
        "query": "SELECT * FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id = t2.policy_id WHERE t1.amount_claimed = (SELECT min(amount_claimed) FROM claim_headers)",
        "schema": "CREATE TABLE Claim_Headers (Amount_Piad NUMBER, Claim_Header_ID NUMBER, Policy_ID NUMBER, Amount_Claimed NUMBER, Claim_Type_Code TEXT); CREATE TABLE Policies (Policy_ID NUMBER, Policy_Type_Code TEXT, Customer_ID NUMBER);"
      },
      {
        "question": "For the largest claim amount instead?",
        "query": "SELECT * FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id = t2.policy_id WHERE t1.amount_claimed = (SELECT max(amount_claimed) FROM claim_headers)",
        "schema": "CREATE TABLE Claim_Headers (Amount_Claimed NUMBER, Policy_ID NUMBER, Claim_Header_ID NUMBER, Amount_Piad NUMBER, Claim_Type_Code TEXT); CREATE TABLE Policies (Policy_ID NUMBER, Customer_ID NUMBER, Policy_Type_Code TEXT);"
      },
      {
        "question": "Which customer owns this policy?",
        "query": "SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id = t2.policy_id JOIN customers AS t3 ON t2.customer_id = t3.customer_id WHERE t1.amount_claimed = (SELECT max(amount_claimed) FROM claim_headers)",
        "schema": "CREATE TABLE Policies (Policy_Type_Code TEXT, Customer_ID NUMBER, Policy_ID NUMBER); CREATE TABLE Customers (Customer_Details TEXT, Customer_ID NUMBER); CREATE TABLE Claim_Headers (Claim_Type_Code TEXT, Claim_Header_ID NUMBER, Amount_Claimed NUMBER, Policy_ID NUMBER, Amount_Piad NUMBER);"
      }
    ],
    [
      {
        "question": "What is the largest claim amount?",
        "query": "SELECT max(amount_claimed) FROM claim_headers",
        "schema": "CREATE TABLE Claims_Documents (Claim_ID NUMBER); CREATE TABLE Claims_Processing (Claim_ID NUMBER); CREATE TABLE Policies (Policy_ID NUMBER); CREATE TABLE Claim_Headers (Amount_Claimed NUMBER, Amount_Piad NUMBER, Claim_Type_Code TEXT, Claim_Header_ID NUMBER);"
      },
      {
        "question": "What was the policy for this?",
        "query": "SELECT * FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id = t2.policy_id WHERE t1.amount_claimed = (SELECT max(amount_claimed) FROM claim_headers)",
        "schema": "CREATE TABLE Claims_Processing (Claim_ID NUMBER); CREATE TABLE Claims_Documents (Claim_ID NUMBER); CREATE TABLE Claim_Headers (Policy_ID NUMBER, Claim_Header_ID NUMBER, Amount_Piad NUMBER, Amount_Claimed NUMBER, Claim_Type_Code TEXT); CREATE TABLE Policies (Policy_Type_Code TEXT, Customer_ID NUMBER, Policy_ID NUMBER);"
      },
      {
        "question": "What about for the smallest payment amount instead?",
        "query": "SELECT * FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id = t2.policy_id WHERE t1.amount_piad = (SELECT min(amount_piad) FROM claim_headers)",
        "schema": "CREATE TABLE Claims_Processing (Claim_ID NUMBER); CREATE TABLE Policies (Customer_ID NUMBER, Policy_Type_Code TEXT, Policy_ID NUMBER); CREATE TABLE Claims_Documents (Claim_ID NUMBER); CREATE TABLE Claim_Headers (Policy_ID NUMBER, Claim_Header_ID NUMBER, Amount_Piad NUMBER, Amount_Claimed NUMBER, Claim_Type_Code TEXT);"
      },
      {
        "question": "Who owned this policy?",
        "query": "SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id = t2.policy_id JOIN customers AS t3 ON t2.customer_id = t3.customer_id WHERE t1.amount_piad = (SELECT min(amount_piad) FROM claim_headers)",
        "schema": "CREATE TABLE Claims_Processing (Claim_ID NUMBER); CREATE TABLE Claims_Documents (Claim_ID NUMBER); CREATE TABLE Policies (Customer_ID NUMBER, Policy_Type_Code TEXT, Policy_ID NUMBER); CREATE TABLE Customers (Customer_Details TEXT, Customer_ID NUMBER); CREATE TABLE Claim_Headers (Amount_Piad NUMBER, Claim_Type_Code TEXT, Policy_ID NUMBER, Amount_Claimed NUMBER, Claim_Header_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Who are the customers?",
        "query": "SELECT customer_details FROM customers",
        "schema": "CREATE TABLE Policies (Customer_ID NUMBER, Policy_ID NUMBER); CREATE TABLE Customers (Customer_ID NUMBER, Customer_Details TEXT);"
      },
      {
        "question": "What are their policies?",
        "query": "SELECT * FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id",
        "schema": "CREATE TABLE Policies (Policy_Type_Code TEXT, Policy_ID NUMBER, Customer_ID NUMBER); CREATE TABLE Customers (Customer_ID NUMBER, Customer_Details TEXT); CREATE TABLE Claim_Headers (Policy_ID NUMBER);"
      },
      {
        "question": "Who doesn't have policies?",
        "query": "SELECT customer_details FROM customers EXCEPT SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id",
        "schema": "CREATE TABLE Customers (Customer_Details TEXT, Customer_ID NUMBER); CREATE TABLE Claim_Headers (Policy_ID NUMBER); CREATE TABLE Policies (Policy_Type_Code TEXT, Customer_ID NUMBER, Policy_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What is the least frequent claim outcome?",
        "query": "SELECT claim_outcome_code FROM claims_processing GROUP BY claim_outcome_code ORDER BY count(claim_outcome_code) ASC LIMIT 1",
        "schema": "CREATE TABLE Claims_Documents (Claim_ID NUMBER); CREATE TABLE Claims_Processing (Claim_ID NUMBER, Claim_Outcome_Code TEXT, Claim_Stage_ID NUMBER, Claim_Processing_ID NUMBER); CREATE TABLE Claim_Headers (Policy_ID NUMBER, Claim_Header_ID NUMBER, Claim_Status_Code TEXT, Claim_Type_Code TEXT); CREATE TABLE Claims_Processing_Stages (Claim_Status_Name TEXT, Next_Claim_Stage_ID NUMBER, Claim_Status_Description TEXT, Claim_Stage_ID NUMBER); CREATE TABLE Policies (Policy_ID NUMBER);"
      },
      {
        "question": "Most frequent?",
        "query": "SELECT claim_outcome_code FROM claims_processing GROUP BY claim_outcome_code ORDER BY count(claim_outcome_code) DESC LIMIT 1",
        "schema": "CREATE TABLE Claims_Processing (Claim_Processing_ID NUMBER, Claim_Stage_ID NUMBER, Claim_Outcome_Code TEXT, Claim_ID NUMBER); CREATE TABLE Claims_Documents (Claim_ID NUMBER); CREATE TABLE Policies (Policy_ID NUMBER); CREATE TABLE Claim_Headers (Policy_ID NUMBER, Claim_Header_ID NUMBER, Claim_Status_Code TEXT, Claim_Type_Code TEXT); CREATE TABLE Claims_Processing_Stages (Claim_Status_Name TEXT, Next_Claim_Stage_ID NUMBER, Claim_Status_Description TEXT, Claim_Stage_ID NUMBER);"
      },
      {
        "question": "Show for claim status instead.",
        "query": "SELECT t2.claim_status_name FROM claims_processing AS t1 JOIN claims_processing_stages AS t2 ON t1.claim_stage_id = t2.claim_stage_id GROUP BY t1.claim_stage_id ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Claims_Processing_Stages (Claim_Stage_ID NUMBER, Next_Claim_Stage_ID NUMBER, Claim_Status_Name TEXT, Claim_Status_Description TEXT); CREATE TABLE Claims_Processing (Claim_Outcome_Code TEXT, Claim_ID NUMBER, Claim_Processing_ID NUMBER, Claim_Stage_ID NUMBER); CREATE TABLE Claims_Documents (Claim_ID NUMBER); CREATE TABLE Claim_Headers (Claim_Type_Code TEXT, Claim_Header_ID NUMBER, Claim_Status_Code TEXT, Policy_ID NUMBER); CREATE TABLE Policies (Policy_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Who are the customers?",
        "query": "SELECT * FROM customers",
        "schema": "CREATE TABLE Customers (Customer_Details TEXT, Customer_ID NUMBER); CREATE TABLE Policies (Customer_ID NUMBER);"
      },
      {
        "question": "Only show their names.",
        "query": "SELECT customer_details FROM customers",
        "schema": "CREATE TABLE Policies (Customer_ID NUMBER); CREATE TABLE Customers (Customer_Details TEXT, Customer_ID NUMBER);"
      },
      {
        "question": "Of these, which one contain \"III\"",
        "query": "SELECT customer_details FROM customers WHERE customer_details LIKE \"%III%\"",
        "schema": "CREATE TABLE Customers (Customer_ID NUMBER, Customer_Details TEXT); CREATE TABLE Policies (Customer_ID NUMBER);"
      },
      {
        "question": "Containing \"Diana\" instead?",
        "query": "SELECT customer_details FROM customers WHERE customer_details LIKE \"%Diana%\"",
        "schema": "CREATE TABLE Policies (Customer_ID NUMBER); CREATE TABLE Customers (Customer_Details TEXT, Customer_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What are all the start and end dates of the policies?",
        "query": "SELECT start_date, end_date FROM policies",
        "schema": "CREATE TABLE Claim_Headers (Date_of_Claim TIME, Date_of_Settlement TIME, Policy_ID NUMBER); CREATE TABLE Policies (End_Date TIME, Policy_ID NUMBER, Start_Date TIME);"
      },
      {
        "question": "Give me the policy types instead.",
        "query": "SELECT policy_type_code FROM policies",
        "schema": "CREATE TABLE Policies (Start_Date TIME, Policy_Type_Code TEXT, End_Date TIME, Policy_ID NUMBER); CREATE TABLE Claim_Headers (Policy_ID NUMBER, Date_of_Settlement TIME, Date_of_Claim TIME);"
      },
      {
        "question": "Just the deputy policies.",
        "query": "SELECT policy_type_code FROM policies WHERE policy_type_code = \"Deputy\"",
        "schema": "CREATE TABLE Claim_Headers (Date_of_Settlement TIME, Policy_ID NUMBER, Date_of_Claim TIME); CREATE TABLE Policies (Policy_ID NUMBER, Start_Date TIME, Policy_Type_Code TEXT, End_Date TIME);"
      },
      {
        "question": "Which customers have this policy? Give their names.",
        "query": "SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id WHERE t1.policy_type_code = \"Deputy\"",
        "schema": "CREATE TABLE Claim_Headers (Policy_ID NUMBER, Date_of_Claim TIME, Date_of_Settlement TIME); CREATE TABLE Customers (Customer_ID NUMBER, Customer_Details TEXT); CREATE TABLE Policies (Customer_ID NUMBER, Policy_Type_Code TEXT, Policy_ID NUMBER, Start_Date TIME, End_Date TIME);"
      }
    ],
    [
      {
        "question": "What are the policies of each customer? Give the names and policy type codes.",
        "query": "SELECT t2.customer_details, t1.policy_type_code FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id",
        "schema": "CREATE TABLE Policies (Policy_Type_Code TEXT, Customer_ID NUMBER, Policy_ID NUMBER); CREATE TABLE Customers (Customer_ID NUMBER, Customer_Details TEXT); CREATE TABLE Claim_Headers (Claim_Type_Code TEXT);"
      },
      {
        "question": "Of these, show only those with jurisdiction policies.",
        "query": "SELECT t2.customer_details, t1.policy_type_code FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id WHERE t1.policy_type_code = \"Jurisdiction\"",
        "schema": "CREATE TABLE Customers (Customer_ID NUMBER, Customer_Details TEXT); CREATE TABLE Claim_Headers (Claim_Type_Code TEXT); CREATE TABLE Policies (Customer_ID NUMBER, Policy_Type_Code TEXT, Policy_ID NUMBER);"
      },
      {
        "question": "How about either deputy policy or uniformed policy?",
        "query": "SELECT t2.customer_details, t1.policy_type_code FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id WHERE t1.policy_type_code = \"Deputy\" OR t1.policy_type_code = \"Uniformed\"",
        "schema": "CREATE TABLE Customers (Customer_Details TEXT, Customer_ID NUMBER); CREATE TABLE Policies (Customer_ID NUMBER, Policy_ID NUMBER, Policy_Type_Code TEXT); CREATE TABLE Claim_Headers (Claim_Type_Code TEXT);"
      },
      {
        "question": "Now show just the unique names for these.",
        "query": "SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id WHERE t1.policy_type_code = \"Deputy\" OR t1.policy_type_code = \"Uniformed\"",
        "schema": "CREATE TABLE Claim_Headers (Claim_Type_Code TEXT); CREATE TABLE Policies (Policy_Type_Code TEXT, Policy_ID NUMBER, Customer_ID NUMBER); CREATE TABLE Customers (Customer_ID NUMBER, Customer_Details TEXT);"
      }
    ],
    [
      {
        "question": "Who are the staff members?",
        "query": "SELECT staff_details FROM staff",
        "schema": "CREATE TABLE Claims_Processing (Staff_ID NUMBER); CREATE TABLE Staff (Staff_Details TEXT, Staff_ID NUMBER); CREATE TABLE Claims_Documents (Created_by_Staff_ID NUMBER);"
      },
      {
        "question": "Customers?",
        "query": "SELECT customer_details FROM customers",
        "schema": "CREATE TABLE Policies (Customer_ID NUMBER); CREATE TABLE Claims_Documents (Created_by_Staff_ID NUMBER); CREATE TABLE Claims_Processing (Staff_ID NUMBER); CREATE TABLE Customers (Customer_Details TEXT, Customer_ID NUMBER); CREATE TABLE Staff (Staff_ID NUMBER, Staff_Details TEXT);"
      },
      {
        "question": "Who are both customers and staff?",
        "query": "SELECT customer_details FROM customers INTERSECT SELECT staff_details FROM staff",
        "schema": "CREATE TABLE Staff (Staff_Details TEXT, Staff_ID NUMBER); CREATE TABLE Claims_Processing (Staff_ID NUMBER); CREATE TABLE Policies (Customer_ID NUMBER); CREATE TABLE Claims_Documents (Created_by_Staff_ID NUMBER); CREATE TABLE Customers (Customer_Details TEXT, Customer_ID NUMBER);"
      },
      {
        "question": "How about either of them?",
        "query": "SELECT customer_details FROM customers UNION SELECT staff_details FROM staff",
        "schema": "CREATE TABLE Customers (Customer_ID NUMBER, Customer_Details TEXT); CREATE TABLE Staff (Staff_Details TEXT, Staff_ID NUMBER); CREATE TABLE Claims_Processing (Staff_ID NUMBER); CREATE TABLE Policies (Customer_ID NUMBER); CREATE TABLE Claims_Documents (Created_by_Staff_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Who are the customers?",
        "query": "SELECT customer_details FROM customers",
        "schema": "CREATE TABLE Customers (Customer_Details TEXT, Customer_ID NUMBER); CREATE TABLE Policies (Customer_ID NUMBER);"
      },
      {
        "question": "Which customers have more than 1 policy?",
        "query": "SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id GROUP BY t2.customer_details HAVING count(*) > 1",
        "schema": "CREATE TABLE Customers (Customer_ID NUMBER, Customer_Details TEXT); CREATE TABLE Policies (Policy_ID NUMBER, Customer_ID NUMBER);"
      },
      {
        "question": "Who has the most?",
        "query": "SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id GROUP BY t2.customer_details ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Customers (Customer_ID NUMBER, Customer_Details TEXT); CREATE TABLE Policies (Customer_ID NUMBER, Policy_ID NUMBER);"
      }
    ]
  ],
  "aircraft": [
    [
      {
        "question": "How many total passengers are in any airport with the word London in its name?",
        "query": "SELECT sum(total_passengers) FROM airport WHERE airport_name LIKE \"%London%\"",
        "schema": "CREATE TABLE airport_aircraft (Airport_ID NUMBER); CREATE TABLE airport (Airport_ID NUMBER, Domestic_Passengers NUMBER, Total_Passengers NUMBER, Airport_Name TEXT, International_Passengers NUMBER);"
      },
      {
        "question": "How many International?",
        "query": "SELECT sum(international_passengers) FROM airport WHERE airport_name LIKE \"%London%\"",
        "schema": "CREATE TABLE airport_aircraft (Airport_ID NUMBER); CREATE TABLE match (Country TEXT); CREATE TABLE airport (Airport_Name TEXT, International_Passengers NUMBER, Total_Passengers NUMBER, Domestic_Passengers NUMBER, Airport_ID NUMBER);"
      },
      {
        "question": "How about Transit?",
        "query": "SELECT sum(transit_passengers) FROM airport WHERE airport_name LIKE \"%London%\"",
        "schema": "CREATE TABLE airport_aircraft (Airport_ID NUMBER); CREATE TABLE airport (Total_Passengers NUMBER, International_Passengers NUMBER, Transit_Passengers NUMBER, Airport_Name TEXT, Domestic_Passengers NUMBER, Airport_ID NUMBER); CREATE TABLE match (Country TEXT);"
      },
      {
        "question": "How about Domestic?",
        "query": "SELECT sum(domestic_passengers) FROM airport WHERE airport_name LIKE \"%London%\"",
        "schema": "CREATE TABLE match (Country TEXT); CREATE TABLE airport_aircraft (Airport_ID NUMBER); CREATE TABLE airport (International_Passengers NUMBER, Airport_Name TEXT, Airport_ID NUMBER, Transit_Passengers NUMBER, Domestic_Passengers NUMBER, Total_Passengers NUMBER);"
      }
    ],
    [
      {
        "question": "How many transit passengers does each airport have?",
        "query": "SELECT airport_id, transit_passengers FROM airport",
        "schema": "CREATE TABLE airport (Domestic_Passengers NUMBER, Airport_ID NUMBER, Airport_Name TEXT, International_Passengers NUMBER, Total_Passengers NUMBER, Transit_Passengers NUMBER); CREATE TABLE airport_aircraft (Airport_ID NUMBER);"
      },
      {
        "question": "What is the average number?",
        "query": "SELECT avg(transit_passengers) FROM airport",
        "schema": "CREATE TABLE airport (Transit_Passengers NUMBER, Airport_Name TEXT, Domestic_Passengers NUMBER, Airport_ID NUMBER, Total_Passengers NUMBER, International_Passengers NUMBER); CREATE TABLE airport_aircraft (Airport_ID NUMBER);"
      },
      {
        "question": "How about the maximum?",
        "query": "SELECT max(transit_passengers) FROM airport",
        "schema": "CREATE TABLE airport_aircraft (Airport_ID NUMBER); CREATE TABLE aircraft (Total_disk_area TEXT); CREATE TABLE airport (Airport_ID NUMBER, Airport_Name TEXT, International_Passengers NUMBER, Total_Passengers NUMBER, Transit_Passengers NUMBER, Domestic_Passengers NUMBER);"
      },
      {
        "question": "Please, show the minimum as well.",
        "query": "SELECT max(transit_passengers), min(transit_passengers) FROM airport",
        "schema": "CREATE TABLE airport_aircraft (Airport_ID NUMBER); CREATE TABLE aircraft (Total_disk_area TEXT); CREATE TABLE airport (Airport_Name TEXT, Domestic_Passengers NUMBER, Airport_ID NUMBER, Transit_Passengers NUMBER, Total_Passengers NUMBER, International_Passengers NUMBER);"
      }
    ],
    [
      {
        "question": "Show all the pilot names and ages?",
        "query": "SELECT name, age FROM pilot",
        "schema": "CREATE TABLE pilot (Pilot_Id NUMBER, Name TEXT, Age NUMBER); CREATE TABLE match (Winning_Pilot TEXT);"
      },
      {
        "question": "What are the names that are older younger than 50?",
        "query": "SELECT name FROM pilot WHERE age <= 50",
        "schema": "CREATE TABLE match (Winning_Pilot TEXT); CREATE TABLE pilot (Age NUMBER, Name TEXT, Pilot_Id NUMBER);"
      },
      {
        "question": "How about 30 or younger?",
        "query": "SELECT name FROM pilot WHERE age <= 30",
        "schema": "CREATE TABLE match (Winning_Pilot TEXT); CREATE TABLE pilot (Name TEXT, Age NUMBER, Pilot_Id NUMBER);"
      },
      {
        "question": "Sort them in reverse alphabetical order?",
        "query": "SELECT name FROM pilot WHERE age <= 50 ORDER BY name DESC",
        "schema": "CREATE TABLE match (Winning_Pilot TEXT); CREATE TABLE pilot (Pilot_Id NUMBER, Name TEXT, Age NUMBER);"
      }
    ],
    [
      {
        "question": "Is there an airport with the name \"London Gatwick\"?",
        "query": "SELECT * FROM airport WHERE airport_name = \"London Gatwick\"",
        "schema": "CREATE TABLE match (Location TEXT); CREATE TABLE airport_aircraft (Airport_ID NUMBER); CREATE TABLE airport (Airport_Name TEXT, Airport_ID NUMBER);"
      },
      {
        "question": "How many aircrafts movements happen at this airport?",
        "query": "SELECT aircraft_movements FROM airport WHERE airport_name = \"London Gatwick\"",
        "schema": "CREATE TABLE airport (Airport_Name TEXT, Airport_ID NUMBER, Aircraft_Movements NUMBER); CREATE TABLE airport_aircraft (ID NUMBER, Aircraft_ID NUMBER, Airport_ID NUMBER); CREATE TABLE match (Winning_Aircraft TEXT, Location TEXT); CREATE TABLE aircraft (Aircraft TEXT, Aircraft_ID NUMBER);"
      },
      {
        "question": "Also, how many aircrafts is the airport associated with?",
        "query": "SELECT count(*) FROM aircraft AS t1 JOIN airport_aircraft AS t2 ON t1.aircraft_id = t2.aircraft_id JOIN airport AS t3 ON t2.airport_id = t3.airport_id WHERE t3.airport_name = \"London Gatwick\"",
        "schema": "CREATE TABLE airport_aircraft (ID NUMBER, Airport_ID NUMBER, Aircraft_ID NUMBER); CREATE TABLE airport (Airport_Name TEXT, Airport_ID NUMBER, Aircraft_Movements NUMBER); CREATE TABLE aircraft (Aircraft TEXT, Aircraft_ID NUMBER); CREATE TABLE match (Location TEXT, Winning_Aircraft TEXT);"
      },
      {
        "question": "What is its name?",
        "query": "SELECT t1.aircraft FROM aircraft AS t1 JOIN airport_aircraft AS t2 ON t1.aircraft_id = t2.aircraft_id JOIN airport AS t3 ON t2.airport_id = t3.airport_id WHERE t3.airport_name = \"London Gatwick\"",
        "schema": "CREATE TABLE airport (Aircraft_Movements NUMBER, Airport_ID NUMBER, Airport_Name TEXT); CREATE TABLE match (Location TEXT, Winning_Aircraft TEXT); CREATE TABLE aircraft (Aircraft_ID NUMBER, Aircraft TEXT); CREATE TABLE airport_aircraft (ID NUMBER, Aircraft_ID NUMBER, Airport_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show me a list of all the different airports!",
        "query": "SELECT * FROM airport",
        "schema": "CREATE TABLE airport_aircraft (Airport_ID NUMBER); CREATE TABLE airport (Airport_ID NUMBER, Airport_Name TEXT); CREATE TABLE aircraft (Aircraft_ID NUMBER);"
      },
      {
        "question": "What ones have more than 10000000 total passengers?",
        "query": "SELECT * FROM airport WHERE total_passengers > 10000000",
        "schema": "CREATE TABLE airport_aircraft (Airport_ID NUMBER); CREATE TABLE airport (International_Passengers NUMBER, Total_Passengers NUMBER, Airport_Name TEXT, Airport_ID NUMBER, Domestic_Passengers NUMBER); CREATE TABLE aircraft (Aircraft_ID NUMBER);"
      },
      {
        "question": "Show all the aircrafts associated with each of these airports.",
        "query": "SELECT * FROM aircraft AS t1 JOIN airport_aircraft AS t2 ON t1.aircraft_id = t2.aircraft_id JOIN airport AS t3 ON t2.airport_id = t3.airport_id WHERE t3.total_passengers > 10000000",
        "schema": "CREATE TABLE airport_aircraft (ID NUMBER, Airport_ID NUMBER, Aircraft_ID NUMBER); CREATE TABLE airport (Domestic_Passengers NUMBER, Airport_Name TEXT, Total_Passengers NUMBER, Airport_ID NUMBER, International_Passengers NUMBER); CREATE TABLE aircraft (Aircraft TEXT, Aircraft_ID NUMBER); CREATE TABLE match (Winning_Aircraft TEXT);"
      },
      {
        "question": "Show only the names and descriptions.",
        "query": "SELECT t1.aircraft , t1.description FROM aircraft AS t1 JOIN airport_aircraft AS t2 ON t1.aircraft_id = t2.aircraft_id JOIN airport AS t3 ON t2.airport_id = t3.airport_id WHERE t3.total_passengers > 10000000",
        "schema": "CREATE TABLE match (Winning_Aircraft TEXT); CREATE TABLE airport (International_Passengers NUMBER, Airport_ID NUMBER, Total_Passengers NUMBER, Domestic_Passengers NUMBER, Airport_Name TEXT); CREATE TABLE aircraft (Aircraft TEXT, Description TEXT, Aircraft_ID NUMBER); CREATE TABLE airport_aircraft (Aircraft_ID NUMBER, ID NUMBER, Airport_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Tell me more information about the aircraft called \"Robinson R-22\"!",
        "query": "SELECT * FROM aircraft WHERE aircraft = \"Robinson R-22\"",
        "schema": "CREATE TABLE aircraft (Aircraft_ID NUMBER, Aircraft TEXT, Description TEXT); CREATE TABLE match (Winning_Aircraft TEXT); CREATE TABLE airport_aircraft (Aircraft_ID NUMBER);"
      },
      {
        "question": "How many airports use this aircraft?",
        "query": "SELECT * FROM aircraft AS t1 JOIN airport_aircraft AS t2 ON t1.aircraft_id = t2.aircraft_id JOIN airport AS t3 ON t2.airport_id = t3.airport_id WHERE t1.aircraft = \"Robinson R-22\"",
        "schema": "CREATE TABLE airport (Airport_Name TEXT, Airport_ID NUMBER); CREATE TABLE match (Winning_Aircraft TEXT); CREATE TABLE aircraft (Description TEXT, Aircraft_ID NUMBER, Aircraft TEXT); CREATE TABLE airport_aircraft (Aircraft_ID NUMBER, Airport_ID NUMBER, ID NUMBER);"
      },
      {
        "question": "What are their names, and total passengers?",
        "query": "SELECT t3.airport_name, t3.total_passengers FROM aircraft AS t1 JOIN airport_aircraft AS t2 ON t1.aircraft_id = t2.aircraft_id JOIN airport AS t3 ON t2.airport_id = t3.airport_id WHERE t1.aircraft = \"Robinson R-22\"",
        "schema": "CREATE TABLE match (Winning_Aircraft TEXT); CREATE TABLE airport_aircraft (ID NUMBER, Aircraft_ID NUMBER, Airport_ID NUMBER); CREATE TABLE airport (Total_Passengers NUMBER, Airport_ID NUMBER, International_Passengers NUMBER, Domestic_Passengers NUMBER, Airport_Name TEXT); CREATE TABLE aircraft (Aircraft_ID NUMBER, Aircraft TEXT, Description TEXT);"
      },
      {
        "question": "What is the average total number passengers?",
        "query": "SELECT avg(t3.total_passengers) FROM aircraft AS t1 JOIN airport_aircraft AS t2 ON t1.aircraft_id = t2.aircraft_id JOIN airport AS t3 ON t2.airport_id = t3.airport_id WHERE t1.aircraft = \"Robinson R-22\"",
        "schema": "CREATE TABLE aircraft (Aircraft TEXT, Description TEXT, Aircraft_ID NUMBER); CREATE TABLE airport (Airport_ID NUMBER, Airport_Name TEXT, International_Passengers NUMBER, Total_Passengers NUMBER, Domestic_Passengers NUMBER); CREATE TABLE airport_aircraft (ID NUMBER, Aircraft_ID NUMBER, Airport_ID NUMBER); CREATE TABLE match (Winning_Aircraft TEXT);"
      }
    ],
    [
      {
        "question": "What are the names of all the winning pilots?",
        "query": "SELECT t1.name FROM pilot AS t1 JOIN MATCH AS t2 ON t1.pilot_id = t2.winning_pilot",
        "schema": "CREATE TABLE pilot (Name TEXT, Pilot_Id NUMBER); CREATE TABLE match (Winning_Pilot TEXT, Winning_Aircraft TEXT);"
      },
      {
        "question": "What are the names of the aircrafts that they used?",
        "query": "SELECT t1.name, t3.aircraft FROM pilot AS t1 JOIN MATCH AS t2 ON t1.pilot_id = t2.winning_pilot JOIN aircraft AS t3 ON t2.winning_aircraft = t3.aircraft_id",
        "schema": "CREATE TABLE match (Winning_Aircraft TEXT, Winning_Pilot TEXT); CREATE TABLE aircraft (Aircraft_ID NUMBER, Aircraft TEXT); CREATE TABLE pilot (Pilot_Id NUMBER, Name TEXT); CREATE TABLE airport_aircraft (Aircraft_ID NUMBER);"
      },
      {
        "question": "What one of the aircrafts won the most?",
        "query": "SELECT t1.aircraft FROM aircraft AS t1 JOIN MATCH AS t2 ON t1.aircraft_id = t2.winning_aircraft GROUP BY t2.winning_aircraft ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE airport_aircraft (Aircraft_ID NUMBER); CREATE TABLE pilot (Pilot_Id NUMBER, Name TEXT); CREATE TABLE match (Winning_Pilot TEXT, Winning_Aircraft TEXT); CREATE TABLE aircraft (Aircraft_ID NUMBER, Aircraft TEXT);"
      }
    ],
    [
      {
        "question": "How many aircrafts are there?",
        "query": "SELECT count(*) FROM aircraft",
        "schema": "CREATE TABLE aircraft (Aircraft_ID NUMBER, Aircraft TEXT); CREATE TABLE match (Winning_Aircraft TEXT); CREATE TABLE airport (Airport_ID NUMBER); CREATE TABLE airport_aircraft (Aircraft_ID NUMBER, ID NUMBER, Airport_ID NUMBER);"
      },
      {
        "question": "What are their names?",
        "query": "SELECT aircraft FROM aircraft",
        "schema": "CREATE TABLE match (Winning_Aircraft TEXT); CREATE TABLE aircraft (Aircraft_ID NUMBER, Aircraft TEXT); CREATE TABLE airport_aircraft (Aircraft_ID NUMBER, Airport_ID NUMBER, ID NUMBER); CREATE TABLE airport (Airport_ID NUMBER, Airport_Name TEXT);"
      },
      {
        "question": "Which ones have won?",
        "query": "SELECT t1.aircraft FROM aircraft AS t1 JOIN MATCH AS t2 ON t1.aircraft_id = t2.winning_aircraft",
        "schema": "CREATE TABLE airport (Airport_Name TEXT, Airport_ID NUMBER); CREATE TABLE match (Winning_Aircraft TEXT); CREATE TABLE airport_aircraft (ID NUMBER, Airport_ID NUMBER, Aircraft_ID NUMBER); CREATE TABLE aircraft (Aircraft TEXT, Aircraft_ID NUMBER);"
      },
      {
        "question": "How any times have each won?",
        "query": "SELECT t1.aircraft, count(*) FROM aircraft AS t1 JOIN MATCH AS t2 ON t1.aircraft_id = t2.winning_aircraft GROUP BY t2.winning_aircraft",
        "schema": "CREATE TABLE airport_aircraft (ID NUMBER, Airport_ID NUMBER, Aircraft_ID NUMBER); CREATE TABLE match (Date TEXT, Winning_Aircraft TEXT); CREATE TABLE aircraft (Aircraft_ID NUMBER, Aircraft TEXT); CREATE TABLE airport (Airport_ID NUMBER, Airport_Name TEXT);"
      }
    ],
    [
      {
        "question": "How many matches have taken place?",
        "query": "SELECT count(*) FROM MATCH",
        "schema": "CREATE TABLE match (Location TEXT, Round NUMBER, Date TEXT);"
      },
      {
        "question": "How many of them have been won by the same aircraft?",
        "query": "SELECT count(*) FROM (SELECT t1.aircraft, count(*) FROM aircraft AS t1 JOIN MATCH AS t2 ON t1.aircraft_id = t2.winning_aircraft GROUP BY t2.winning_aircraft HAVING count(*) > 1)",
        "schema": "CREATE TABLE match (Winning_Aircraft TEXT, Date TEXT, Location TEXT, Round NUMBER); CREATE TABLE airport_aircraft (Aircraft_ID NUMBER); CREATE TABLE aircraft (Aircraft_ID NUMBER, Aircraft TEXT);"
      },
      {
        "question": "Which aircrafts?",
        "query": "SELECT t1.aircraft FROM aircraft AS t1 JOIN MATCH AS t2 ON t1.aircraft_id = t2.winning_aircraft GROUP BY t2.winning_aircraft HAVING count(*) >= 2",
        "schema": "CREATE TABLE aircraft (Aircraft_ID NUMBER, Aircraft TEXT); CREATE TABLE match (Location TEXT, Winning_Aircraft TEXT, Date TEXT, Round NUMBER); CREATE TABLE airport_aircraft (Aircraft_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What are all the aircraft names?",
        "query": "SELECT aircraft FROM aircraft",
        "schema": "CREATE TABLE match (Winning_Aircraft TEXT); CREATE TABLE pilot (Name TEXT); CREATE TABLE aircraft (Aircraft_ID NUMBER, Description TEXT, Aircraft TEXT); CREATE TABLE airport_aircraft (Aircraft_ID NUMBER);"
      },
      {
        "question": "How many matches have each won?",
        "query": "SELECT t1.aircraft, count(*) FROM aircraft AS t1 JOIN MATCH AS t2 ON t1.aircraft_id = t2.winning_aircraft GROUP BY t2.winning_aircraft",
        "schema": "CREATE TABLE match (Winning_Aircraft TEXT, Round NUMBER); CREATE TABLE airport_aircraft (Aircraft_ID NUMBER); CREATE TABLE pilot (Name TEXT); CREATE TABLE aircraft (Aircraft_ID NUMBER, Description TEXT, Aircraft TEXT);"
      },
      {
        "question": "How about those that have not won any matches?",
        "query": "SELECT aircraft FROM aircraft WHERE aircraft_id NOT IN (SELECT winning_aircraft FROM MATCH)",
        "schema": "CREATE TABLE match (Winning_Aircraft TEXT, Round NUMBER); CREATE TABLE pilot (Name TEXT); CREATE TABLE aircraft (Aircraft_ID NUMBER, Description TEXT, Aircraft TEXT); CREATE TABLE airport_aircraft (Aircraft_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What airports have \"London\" in its name?",
        "query": "SELECT airport_name FROM airport WHERE airport_name LIKE \"%London%\"",
        "schema": "CREATE TABLE airport (Airport_Name TEXT, Airport_ID NUMBER);"
      },
      {
        "question": "What aircraft names are associated with these airports?",
        "query": "SELECT t1.aircraft FROM aircraft AS t1 JOIN airport_aircraft AS t2 ON t1.aircraft_id = t2.aircraft_id JOIN airport AS t3 ON t2.airport_id = t3.airport_id WHERE t3.airport_name LIKE \"%London%\"",
        "schema": "CREATE TABLE airport_aircraft (Aircraft_ID NUMBER, Airport_ID NUMBER, ID NUMBER); CREATE TABLE aircraft (Aircraft_ID NUMBER, Aircraft TEXT); CREATE TABLE match (Winning_Aircraft TEXT); CREATE TABLE airport (Airport_Name TEXT, Airport_ID NUMBER);"
      },
      {
        "question": "Which ones are associated with an airport with \"London Heathrow\"",
        "query": "SELECT t1.aircraft FROM aircraft AS t1 JOIN airport_aircraft AS t2 ON t1.aircraft_id = t2.aircraft_id JOIN airport AS t3 ON t2.airport_id = t3.airport_id WHERE t3.airport_name = \"London Gatwick\"",
        "schema": "CREATE TABLE airport (Airport_Name TEXT, Airport_ID NUMBER); CREATE TABLE match (Winning_Aircraft TEXT); CREATE TABLE airport_aircraft (ID NUMBER, Airport_ID NUMBER, Aircraft_ID NUMBER); CREATE TABLE aircraft (Aircraft TEXT, Aircraft_ID NUMBER);"
      },
      {
        "question": "Which of these aircrafts are also associated with an airport named \"London Gatwick\"",
        "query": "SELECT t1.aircraft FROM aircraft AS t1 JOIN airport_aircraft AS t2 ON t1.aircraft_id = t2.aircraft_id JOIN airport AS t3 ON t2.airport_id = t3.airport_id WHERE t3.airport_name = \"London Heathrow\" INTERSECT SELECT t1.aircraft FROM aircraft AS t1 JOIN airport_aircraft AS t2 ON t1.aircraft_id = t2.aircraft_id JOIN airport AS t3 ON t2.airport_id = t3.airport_id WHERE t3.airport_name = \"London Gatwick\"",
        "schema": "CREATE TABLE airport (Airport_Name TEXT, Airport_ID NUMBER); CREATE TABLE airport_aircraft (Airport_ID NUMBER, ID NUMBER, Aircraft_ID NUMBER); CREATE TABLE aircraft (Aircraft_ID NUMBER, Aircraft TEXT); CREATE TABLE match (Winning_Aircraft TEXT);"
      }
    ],
    [
      {
        "question": "What are the number of international passengers per airport?",
        "query": "SELECT airport_id, international_passengers FROM airport",
        "schema": "CREATE TABLE match (Country TEXT); CREATE TABLE airport_aircraft (Airport_ID NUMBER); CREATE TABLE pilot (Name TEXT, Pilot_Id NUMBER); CREATE TABLE airport (Domestic_Passengers NUMBER, International_Passengers NUMBER, Airport_ID NUMBER, Airport_Name TEXT, Total_Passengers NUMBER);"
      },
      {
        "question": "What are all the airport details with the minimum?",
        "query": "SELECT * FROM airport ORDER BY international_passengers ASC LIMIT 1",
        "schema": "CREATE TABLE airport_aircraft (Airport_ID NUMBER); CREATE TABLE match (Country TEXT); CREATE TABLE airport (Airport_ID NUMBER, Total_Passengers NUMBER, Airport_Name TEXT, Domestic_Passengers NUMBER, International_Passengers NUMBER); CREATE TABLE pilot (Name TEXT, Pilot_Id NUMBER);"
      },
      {
        "question": "With the maximum?",
        "query": "SELECT * FROM airport ORDER BY international_passengers DESC LIMIT 1",
        "schema": "CREATE TABLE pilot (Pilot_Id NUMBER, Name TEXT); CREATE TABLE match (Country TEXT); CREATE TABLE airport (Airport_Name TEXT, International_Passengers NUMBER, Airport_ID NUMBER, Total_Passengers NUMBER, Domestic_Passengers NUMBER); CREATE TABLE airport_aircraft (Airport_ID NUMBER);"
      }
    ],
    [
      {
        "question": "How many pilots are under 30?",
        "query": "SELECT count(*) FROM pilot WHERE age < 30",
        "schema": "CREATE TABLE pilot (Age NUMBER, Pilot_Id NUMBER, Name TEXT); CREATE TABLE match (Winning_Pilot TEXT); CREATE TABLE airport (Airport_ID NUMBER);"
      },
      {
        "question": "What are their names and ages?",
        "query": "SELECT name, age FROM pilot WHERE age < 30",
        "schema": "CREATE TABLE pilot (Pilot_Id NUMBER, Name TEXT, Age NUMBER); CREATE TABLE match (Winning_Pilot TEXT); CREATE TABLE airport (Airport_ID NUMBER);"
      },
      {
        "question": "How many times have they each won?",
        "query": "SELECT t1.name, t1.age, count(*) FROM pilot AS t1 JOIN MATCH AS t2 ON t1.pilot_id = t2.winning_pilot GROUP BY t2.winning_pilot",
        "schema": "CREATE TABLE match (Winning_Pilot TEXT); CREATE TABLE airport (Airport_ID NUMBER); CREATE TABLE pilot (Pilot_Id NUMBER, Name TEXT, Age NUMBER);"
      },
      {
        "question": "Show me the name and age of the one that has won the most times.",
        "query": "SELECT t1.name, t1.age FROM pilot AS t1 JOIN MATCH AS t2 ON t1.pilot_id = t2.winning_pilot WHERE t1.age < 30 GROUP BY t2.winning_pilot ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE pilot (Name TEXT, Age NUMBER, Pilot_Id NUMBER); CREATE TABLE match (Winning_Pilot TEXT); CREATE TABLE airport (Airport_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show all the information for all the pilots!",
        "query": "SELECT * FROM pilot",
        "schema": "CREATE TABLE match (Winning_Pilot TEXT); CREATE TABLE pilot (Name TEXT, Pilot_Id NUMBER);"
      },
      {
        "question": "Show me only the winning-pilots!",
        "query": "SELECT * FROM pilot AS t1 JOIN MATCH AS t2 ON t1.pilot_id = t2.winning_pilot",
        "schema": "CREATE TABLE pilot (Pilot_Id NUMBER, Name TEXT); CREATE TABLE match (Winning_Pilot TEXT);"
      },
      {
        "question": "What is the name and age of the oldest one?",
        "query": "SELECT t1.name , t1.age FROM pilot AS t1 JOIN MATCH AS t2 ON t1.pilot_id = t2.winning_pilot ORDER BY t1.age DESC LIMIT 1",
        "schema": "CREATE TABLE match (Winning_Pilot TEXT); CREATE TABLE pilot (Name TEXT, Pilot_Id NUMBER, Age NUMBER);"
      },
      {
        "question": "How about the youngest one?",
        "query": "SELECT t1.name , t1.age FROM pilot AS t1 JOIN MATCH AS t2 ON t1.pilot_id = t2.winning_pilot ORDER BY t1.age ASC LIMIT 1",
        "schema": "CREATE TABLE match (Winning_Pilot TEXT); CREATE TABLE pilot (Name TEXT, Age NUMBER, Pilot_Id NUMBER);"
      }
    ]
  ],
  "cre_Docs_and_Epenses": [
    [
      {
        "question": "Show all account information.",
        "query": "SELECT * FROM accounts",
        "schema": "CREATE TABLE Accounts (Account_Details TEXT, Statement_ID NUMBER, Account_ID NUMBER);"
      },
      {
        "question": "Show the ids for them.",
        "query": "SELECT account_id FROM accounts",
        "schema": "CREATE TABLE Documents (Document_ID NUMBER); CREATE TABLE Accounts (Statement_ID NUMBER, Account_ID NUMBER, Account_Details TEXT);"
      },
      {
        "question": "Also show the account details.",
        "query": "SELECT account_id , account_details FROM accounts",
        "schema": "CREATE TABLE Accounts (Account_Details TEXT, Account_ID NUMBER, Statement_ID NUMBER); CREATE TABLE Documents (Document_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show the info for all statements.",
        "query": "SELECT * FROM statements",
        "schema": "CREATE TABLE Accounts (Statement_ID NUMBER); CREATE TABLE Statements (Statement_ID NUMBER, Statement_Details TEXT);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT count(*) FROM statements",
        "schema": "CREATE TABLE Statements (Statement_Details TEXT, Statement_ID NUMBER); CREATE TABLE Accounts (Statement_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show info for all statements.",
        "query": "SELECT * FROM statements",
        "schema": "CREATE TABLE Statements (Statement_ID NUMBER, Statement_Details TEXT); CREATE TABLE Accounts (Statement_ID NUMBER);"
      },
      {
        "question": "Show their ids and statement details.",
        "query": "SELECT STATEMENT_ID , statement_details FROM statements",
        "schema": "CREATE TABLE Accounts (Statement_ID NUMBER); CREATE TABLE Statements (Statement_ID NUMBER, Statement_Details TEXT);"
      }
    ],
    [
      {
        "question": "Show the details of each account.",
        "query": "SELECT account_details FROM accounts",
        "schema": "CREATE TABLE Accounts (Statement_ID NUMBER, Account_ID NUMBER, Account_Details TEXT);"
      },
      {
        "question": "Also show the statement ids and statement details for them.",
        "query": "SELECT t1.statement_id , t2.statement_details , t1.account_details FROM accounts AS t1 JOIN statements AS t2 ON t1.statement_id = t2.statement_id",
        "schema": "CREATE TABLE Statements (Statement_ID NUMBER, Statement_Details TEXT); CREATE TABLE Accounts (Statement_ID NUMBER, Account_Details TEXT, Account_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show the statement ids from all accounts.",
        "query": "SELECT STATEMENT_ID FROM accounts",
        "schema": "CREATE TABLE Statements (Statement_Details TEXT, Statement_ID NUMBER); CREATE TABLE Accounts (Account_ID NUMBER, Statement_ID NUMBER, Account_Details TEXT);"
      },
      {
        "question": "For each of them, also show the number of accounts.",
        "query": "SELECT STATEMENT_ID , count(*) FROM accounts GROUP BY STATEMENT_ID",
        "schema": "CREATE TABLE Accounts (Account_ID NUMBER, Account_Details TEXT, Statement_ID NUMBER); CREATE TABLE Statements (Statement_Details TEXT, Statement_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show the ids and details for statments.",
        "query": "SELECT STATEMENT_ID , statement_details FROM statements",
        "schema": "CREATE TABLE Statements (Statement_ID NUMBER, Statement_Details TEXT); CREATE TABLE Projects (Project_ID NUMBER, Project_Details TEXT); CREATE TABLE Documents (Document_ID NUMBER, Project_ID NUMBER); CREATE TABLE Accounts (Statement_ID NUMBER, Account_ID NUMBER, Account_Details TEXT);"
      },
      {
        "question": "For each of them, also show the number of accounts.",
        "query": "SELECT t1.statement_id , t2.statement_details, count(*) FROM accounts AS t1 JOIN statements AS t2 ON t1.statement_id = t2.statement_id GROUP BY t1.statement_id",
        "schema": "CREATE TABLE Statements (Statement_ID NUMBER, Statement_Details TEXT); CREATE TABLE Projects (Project_ID NUMBER, Project_Details TEXT); CREATE TABLE Accounts (Account_Details TEXT, Statement_ID NUMBER, Account_ID NUMBER); CREATE TABLE Documents (Document_ID NUMBER, Project_ID NUMBER);"
      },
      {
        "question": "Sort the results in the descending order of the number of accounts.",
        "query": "SELECT t1.statement_id , t2.statement_details FROM accounts AS t1 JOIN statements AS t2 ON t1.statement_id = t2.statement_id GROUP BY t1.statement_id ORDER BY count(*) DESC",
        "schema": "CREATE TABLE Statements (Statement_ID NUMBER, Statement_Details TEXT); CREATE TABLE Documents (Project_ID NUMBER, Document_ID NUMBER); CREATE TABLE Accounts (Statement_ID NUMBER, Account_Details TEXT, Account_ID NUMBER); CREATE TABLE Projects (Project_Details TEXT, Project_ID NUMBER);"
      },
      {
        "question": "Show the id and details for the statment with the most accounts.",
        "query": "SELECT t1.statement_id , t2.statement_details FROM accounts AS t1 JOIN statements AS t2 ON t1.statement_id = t2.statement_id GROUP BY t1.statement_id ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Statements (Statement_Details TEXT, Statement_ID NUMBER); CREATE TABLE Projects (Project_Details TEXT, Project_ID NUMBER); CREATE TABLE Documents (Document_ID NUMBER, Project_ID NUMBER); CREATE TABLE Accounts (Account_ID NUMBER, Account_Details TEXT, Statement_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show information for all documents.",
        "query": "SELECT * FROM documents",
        "schema": "CREATE TABLE Ref_Document_Types (Document_Type_Code TEXT); CREATE TABLE Documents (Document_Description TEXT, Document_Name TEXT, Document_Type_Code TEXT, Document_ID NUMBER);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT count(*) FROM documents",
        "schema": "CREATE TABLE Documents (Document_Description TEXT, Document_Name TEXT, Document_Type_Code TEXT, Document_ID NUMBER); CREATE TABLE Ref_Document_Types (Document_Type_Code TEXT);"
      }
    ],
    [
      {
        "question": "List the type codes, names, and descriptions for all documents.",
        "query": "SELECT document_type_code , document_name , document_description FROM documents",
        "schema": "CREATE TABLE Ref_Document_Types (Document_Type_Code TEXT, Document_Type_Description TEXT, Document_Type_Name TEXT); CREATE TABLE Documents (Document_Name TEXT, Document_Description TEXT, Document_Type_Code TEXT);"
      },
      {
        "question": "How about for the document named 'Noel CV'.",
        "query": "SELECT document_type_code , document_name , document_description FROM documents WHERE document_name = 'Noel CV'",
        "schema": "CREATE TABLE Documents (Document_Description TEXT, Document_ID NUMBER, Document_Name TEXT, Document_Type_Code TEXT); CREATE TABLE Ref_Document_Types (Document_Type_Name TEXT, Document_Type_Code TEXT, Document_Type_Description TEXT);"
      },
      {
        "question": "Also include results for the document named 'King Book'.",
        "query": "SELECT document_type_code , document_name , document_description FROM documents WHERE document_name = 'Noel CV' OR document_name = 'King Book'",
        "schema": "CREATE TABLE Ref_Document_Types (Document_Type_Description TEXT, Document_Type_Name TEXT, Document_Type_Code TEXT); CREATE TABLE Documents (Document_Type_Code TEXT, Document_Name TEXT, Document_Description TEXT, Document_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show all information for documents.",
        "query": "SELECT * FROM documents",
        "schema": "CREATE TABLE Ref_Document_Types (Document_Type_Code TEXT, Document_Type_Name TEXT); CREATE TABLE Documents (Document_Type_Code TEXT, Document_ID NUMBER, Document_Description TEXT, Document_Name TEXT);"
      },
      {
        "question": "Show just the ids.",
        "query": "SELECT document_id FROM documents",
        "schema": "CREATE TABLE Statements (Statement_ID NUMBER); CREATE TABLE Ref_Document_Types (Document_Type_Code TEXT, Document_Type_Name TEXT); CREATE TABLE Documents (Document_Type_Code TEXT, Document_Name TEXT, Document_Description TEXT, Document_ID NUMBER);"
      },
      {
        "question": "Also show their names.",
        "query": "SELECT document_id , document_name FROM documents",
        "schema": "CREATE TABLE Ref_Document_Types (Document_Type_Name TEXT, Document_Type_Code TEXT); CREATE TABLE Documents (Document_Name TEXT, Document_Type_Code TEXT, Document_Description TEXT, Document_ID NUMBER); CREATE TABLE Statements (Statement_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show all document names.",
        "query": "SELECT document_name FROM documents",
        "schema": "CREATE TABLE Documents (Document_Type_Code TEXT, Document_ID NUMBER, Document_Name TEXT, Document_Description TEXT); CREATE TABLE Ref_Document_Types (Document_Type_Code TEXT, Document_Type_Name TEXT);"
      },
      {
        "question": "What are the names for the documents with type code BK?",
        "query": "SELECT document_name FROM documents WHERE document_type_code = \"BK\"",
        "schema": "CREATE TABLE Documents (Document_Name TEXT, Document_Description TEXT, Document_Type_Code TEXT, Document_ID NUMBER); CREATE TABLE Ref_Document_Types (Document_Type_Code TEXT, Document_Type_Name TEXT);"
      },
      {
        "question": "Also find their ids.",
        "query": "SELECT document_name , document_id FROM documents WHERE document_type_code = \"BK\"",
        "schema": "CREATE TABLE Ref_Document_Types (Document_Type_Code TEXT, Document_Type_Name TEXT); CREATE TABLE Documents (Document_Description TEXT, Document_Name TEXT, Document_ID NUMBER, Document_Type_Code TEXT);"
      }
    ],
    [
      {
        "question": "Show the project id for documents.",
        "query": "SELECT project_id FROM documents",
        "schema": "CREATE TABLE Projects (Project_ID NUMBER, Project_Details TEXT); CREATE TABLE Documents (Project_ID NUMBER, Document_ID NUMBER, Document_Name TEXT);"
      },
      {
        "question": "Show the ids only for the documents with type code BK.",
        "query": "SELECT project_id FROM documents WHERE document_type_code = \"BK\"",
        "schema": "CREATE TABLE Ref_Document_Types (Document_Type_Code TEXT); CREATE TABLE Projects (Project_ID NUMBER, Project_Details TEXT); CREATE TABLE Documents (Project_ID NUMBER, Document_Type_Code TEXT, Document_Name TEXT, Document_ID NUMBER);"
      },
      {
        "question": "For each project id, show the number of such documents.",
        "query": "SELECT count(*) , project_id FROM documents WHERE document_type_code = \"BK\" GROUP BY project_id",
        "schema": "CREATE TABLE Documents (Document_Name TEXT, Document_Type_Code TEXT, Project_ID NUMBER, Document_ID NUMBER); CREATE TABLE Ref_Document_Types (Document_Type_Code TEXT); CREATE TABLE Projects (Project_ID NUMBER, Project_Details TEXT);"
      }
    ],
    [
      {
        "question": "Show the name and date for all documents.",
        "query": "SELECT document_name , document_date FROM documents",
        "schema": "CREATE TABLE Documents (Document_Name TEXT, Document_Date TIME, Document_ID NUMBER);"
      },
      {
        "question": "For those documents, also show their project details.",
        "query": "SELECT document_name , document_date, t2.project_details FROM documents AS t1 JOIN projects AS t2 ON t1.project_id = t2.project_id",
        "schema": "CREATE TABLE Projects (Project_ID NUMBER, Project_Details TEXT); CREATE TABLE Documents (Project_ID NUMBER, Document_Name TEXT, Document_Date TIME, Document_ID NUMBER);"
      },
      {
        "question": "What are the names and dates for documents with 'Graph Database project' as their details?",
        "query": "SELECT document_name , document_date FROM documents AS t1 JOIN projects AS t2 ON t1.project_id = t2.project_id WHERE t2.project_details = 'Graph Database project'",
        "schema": "CREATE TABLE Projects (Project_ID NUMBER, Project_Details TEXT); CREATE TABLE Documents (Document_Date TIME, Document_ID NUMBER, Document_Name TEXT, Project_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show the project id for the documents.",
        "query": "SELECT project_id FROM documents",
        "schema": "CREATE TABLE Projects (Project_ID NUMBER, Project_Details TEXT); CREATE TABLE Documents (Document_ID NUMBER, Document_Name TEXT, Project_ID NUMBER);"
      },
      {
        "question": "For each of id, count the number of documents.",
        "query": "SELECT project_id , count(*) FROM documents GROUP BY project_id",
        "schema": "CREATE TABLE Documents (Project_ID NUMBER, Document_Name TEXT, Document_ID NUMBER); CREATE TABLE Projects (Project_ID NUMBER, Project_Details TEXT);"
      }
    ],
    [
      {
        "question": "Show the project id for all documents.",
        "query": "SELECT project_id FROM documents",
        "schema": "CREATE TABLE Projects (Project_ID NUMBER, Project_Details TEXT); CREATE TABLE Documents (Project_ID NUMBER, Document_Name TEXT, Document_ID NUMBER);"
      },
      {
        "question": "For each of them, count the number of documents.",
        "query": "SELECT project_id, count(*) FROM documents GROUP BY project_id",
        "schema": "CREATE TABLE Documents (Project_ID NUMBER, Document_Name TEXT, Document_ID NUMBER); CREATE TABLE Projects (Project_ID NUMBER, Project_Details TEXT);"
      },
      {
        "question": "Sort the ids by these counts.",
        "query": "SELECT project_id FROM documents GROUP BY project_id ORDER BY count(*)",
        "schema": "CREATE TABLE Projects (Project_Details TEXT, Project_ID NUMBER); CREATE TABLE Documents (Document_Type_Code TEXT, Document_ID NUMBER, Document_Name TEXT, Project_ID NUMBER);"
      },
      {
        "question": "Which project id has the fewest?",
        "query": "SELECT project_id FROM documents GROUP BY project_id ORDER BY count(*) ASC LIMIT 1",
        "schema": "CREATE TABLE Documents (Document_Type_Code TEXT, Document_ID NUMBER, Project_ID NUMBER, Document_Name TEXT); CREATE TABLE Projects (Project_ID NUMBER, Project_Details TEXT);"
      }
    ],
    [
      {
        "question": "Show the project ids for documents.",
        "query": "SELECT project_id FROM documents",
        "schema": "CREATE TABLE Documents (Document_ID NUMBER, Project_ID NUMBER, Document_Name TEXT); CREATE TABLE Projects (Project_ID NUMBER, Project_Details TEXT);"
      },
      {
        "question": "For each of them, also show the number of documents.",
        "query": "SELECT project_id, count(*) FROM documents GROUP BY project_id",
        "schema": "CREATE TABLE Documents (Project_ID NUMBER, Document_Name TEXT, Document_ID NUMBER); CREATE TABLE Projects (Project_ID NUMBER, Project_Details TEXT);"
      },
      {
        "question": "Which of them have at least 2 documents?",
        "query": "SELECT project_id FROM documents GROUP BY project_id HAVING count(*) >= 2",
        "schema": "CREATE TABLE Documents (Document_ID NUMBER, Project_ID NUMBER, Document_Name TEXT); CREATE TABLE Projects (Project_ID NUMBER, Project_Details TEXT);"
      }
    ],
    [
      {
        "question": "Show the type code for all documents.",
        "query": "SELECT document_type_code FROM documents",
        "schema": "CREATE TABLE Ref_Document_Types (Document_Type_Code TEXT, Document_Type_Name TEXT); CREATE TABLE Documents (Document_Type_Code TEXT, Document_Name TEXT, Document_ID NUMBER);"
      },
      {
        "question": "For each of these codes, also show the number of documents.",
        "query": "SELECT document_type_code , count(*) FROM documents GROUP BY document_type_code",
        "schema": "CREATE TABLE Documents (Document_Type_Code TEXT, Document_Name TEXT, Document_ID NUMBER); CREATE TABLE Ref_Document_Types (Document_Type_Code TEXT, Document_Type_Name TEXT);"
      }
    ],
    [
      {
        "question": "Show the type codes for all documents.",
        "query": "SELECT document_type_code FROM documents",
        "schema": "CREATE TABLE Ref_Document_Types (Document_Type_Name TEXT, Document_Type_Code TEXT); CREATE TABLE Documents (Document_ID NUMBER, Document_Name TEXT, Document_Type_Code TEXT);"
      },
      {
        "question": "For each of the codes, count the number of documents.",
        "query": "SELECT document_type_code, count(*) FROM documents GROUP BY document_type_code",
        "schema": "CREATE TABLE Documents (Document_ID NUMBER, Document_Type_Code TEXT, Document_Name TEXT); CREATE TABLE Ref_Document_Types (Document_Type_Code TEXT, Document_Type_Name TEXT);"
      },
      {
        "question": "Which code has the most documents?",
        "query": "SELECT document_type_code FROM documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Documents (Document_Name TEXT, Document_Type_Code TEXT, Document_ID NUMBER); CREATE TABLE Ref_Document_Types (Document_Type_Code TEXT, Document_Type_Name TEXT);"
      }
    ],
    [
      {
        "question": "Show the type code for all documents.",
        "query": "SELECT document_type_code FROM documents",
        "schema": "CREATE TABLE Ref_Document_Types (Document_Type_Code TEXT, Document_Type_Name TEXT); CREATE TABLE Documents (Document_Type_Code TEXT, Document_Name TEXT, Document_ID NUMBER);"
      },
      {
        "question": "For each of the codes, also count the number of documents.",
        "query": "SELECT document_type_code, count(*) FROM documents GROUP BY document_type_code",
        "schema": "CREATE TABLE Ref_Document_Types (Document_Type_Name TEXT, Document_Type_Code TEXT); CREATE TABLE Documents (Document_Type_Code TEXT, Document_ID NUMBER, Document_Name TEXT);"
      },
      {
        "question": "Which codes have fewer than 3 documents?",
        "query": "SELECT document_type_code FROM documents GROUP BY document_type_code HAVING count(*) < 3",
        "schema": "CREATE TABLE Documents (Document_Type_Code TEXT, Document_Name TEXT, Document_ID NUMBER); CREATE TABLE Ref_Document_Types (Document_Type_Code TEXT, Document_Type_Name TEXT);"
      }
    ],
    [
      {
        "question": "Show the details for all statements.",
        "query": "SELECT statement_details FROM statements",
        "schema": "CREATE TABLE Accounts (Account_Details TEXT, Statement_ID NUMBER); CREATE TABLE Statements (Statement_Details TEXT, Statement_ID NUMBER);"
      },
      {
        "question": "Also show their corresponding document names.",
        "query": "SELECT t1.statement_details , t2.document_name FROM statements AS t1 JOIN documents AS t2 ON t1.statement_id = t2.document_id",
        "schema": "CREATE TABLE Accounts (Statement_ID NUMBER, Account_Details TEXT); CREATE TABLE Documents (Document_Type_Code TEXT, Document_ID NUMBER, Document_Name TEXT); CREATE TABLE Statements (Statement_ID NUMBER, Statement_Details TEXT); CREATE TABLE Ref_Document_Types (Document_Type_Name TEXT, Document_Type_Code TEXT);"
      },
      {
        "question": "Only show the results for the statement with detail 'Private Project'.",
        "query": "SELECT t1.statement_details , t2.document_name FROM statements AS t1 JOIN documents AS t2 ON t1.statement_id = t2.document_id WHERE t1.statement_details = 'Private Project'",
        "schema": "CREATE TABLE Ref_Document_Types (Document_Type_Name TEXT, Document_Type_Code TEXT); CREATE TABLE Accounts (Statement_ID NUMBER, Account_Details TEXT); CREATE TABLE Documents (Document_Type_Code TEXT, Document_ID NUMBER, Project_ID NUMBER, Document_Name TEXT); CREATE TABLE Statements (Statement_Details TEXT, Statement_ID NUMBER); CREATE TABLE Projects (Project_ID NUMBER, Project_Details TEXT);"
      }
    ],
    [
      {
        "question": "Show the type codes for all documents.",
        "query": "SELECT document_type_code FROM ref_document_types",
        "schema": "CREATE TABLE Ref_Document_Types (Document_Type_Code TEXT, Document_Type_Name TEXT); CREATE TABLE Documents (Document_ID NUMBER, Document_Type_Code TEXT, Document_Name TEXT);"
      },
      {
        "question": "Also show the document type names and descriptions.",
        "query": "SELECT document_type_code , document_type_name , document_type_description FROM ref_document_types",
        "schema": "CREATE TABLE Ref_Document_Types (Document_Type_Name TEXT, Document_Type_Code TEXT, Document_Type_Description TEXT); CREATE TABLE Documents (Document_Description TEXT, Document_Type_Code TEXT, Document_Name TEXT, Document_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show the descriptions for all document types.",
        "query": "SELECT document_type_description FROM ref_document_types",
        "schema": "CREATE TABLE Documents (Document_Description TEXT, Document_Type_Code TEXT); CREATE TABLE Ref_Document_Types (Document_Type_Code TEXT, Document_Type_Description TEXT, Document_Type_Name TEXT);"
      },
      {
        "question": "Only show the result for the document type \"Film\".",
        "query": "SELECT document_type_description FROM ref_document_types WHERE document_type_name = \"Film\"",
        "schema": "CREATE TABLE Ref_Document_Types (Document_Type_Name TEXT, Document_Type_Code TEXT, Document_Type_Description TEXT); CREATE TABLE Documents (Document_Type_Code TEXT, Document_Description TEXT);"
      }
    ],
    [
      {
        "question": "What are the creation dates for all documents?",
        "query": "SELECT document_date FROM documents",
        "schema": "CREATE TABLE Documents (Document_ID NUMBER, Document_Name TEXT, Document_Date TIME);"
      },
      {
        "question": "Also show their document type names and descriptions.",
        "query": "SELECT t1.document_type_name , t1.document_type_description , t2.document_date FROM ref_document_types AS t1 JOIN documents AS t2 ON t1.document_type_code = t2.document_type_code",
        "schema": "CREATE TABLE Documents (Document_Name TEXT, Document_Date TIME, Document_Description TEXT, Document_ID NUMBER, Document_Type_Code TEXT); CREATE TABLE Ref_Document_Types (Document_Type_Description TEXT, Document_Type_Code TEXT, Document_Type_Name TEXT);"
      }
    ],
    [
      {
        "question": "Show the information for all projects.",
        "query": "SELECT * FROM projects",
        "schema": "CREATE TABLE Documents (Project_ID NUMBER); CREATE TABLE Projects (Project_Details TEXT, Project_ID NUMBER);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT count(*) FROM projects",
        "schema": "CREATE TABLE Documents (Project_ID NUMBER); CREATE TABLE Projects (Project_Details TEXT, Project_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show the id for all projects.",
        "query": "SELECT project_id FROM projects",
        "schema": "CREATE TABLE Projects (Project_Details TEXT, Project_ID NUMBER); CREATE TABLE Documents (Project_ID NUMBER); CREATE TABLE Accounts (Account_ID NUMBER);"
      },
      {
        "question": "Also show their details.",
        "query": "SELECT project_id , project_details FROM projects",
        "schema": "CREATE TABLE Documents (Project_ID NUMBER); CREATE TABLE Projects (Project_Details TEXT, Project_ID NUMBER); CREATE TABLE Accounts (Account_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show the ids and details for all projects.",
        "query": "SELECT project_id , project_details FROM projects",
        "schema": "CREATE TABLE Accounts (Account_Details TEXT); CREATE TABLE Documents (Project_ID NUMBER, Document_ID NUMBER); CREATE TABLE Projects (Project_ID NUMBER, Project_Details TEXT);"
      },
      {
        "question": "For each of them, also show the number of documents.",
        "query": "SELECT t1.project_id , t1.project_details, count(*) FROM projects AS t1 JOIN documents AS t2 ON t1.project_id = t2.project_id GROUP BY t1.project_id",
        "schema": "CREATE TABLE Documents (Project_ID NUMBER, Document_Name TEXT, Document_ID NUMBER); CREATE TABLE Accounts (Account_Details TEXT); CREATE TABLE Projects (Project_Details TEXT, Project_ID NUMBER);"
      },
      {
        "question": "Which of them have at least two documents?",
        "query": "SELECT t1.project_id , t1.project_details FROM projects AS t1 JOIN documents AS t2 ON t1.project_id = t2.project_id GROUP BY t1.project_id HAVING count(*) > 2",
        "schema": "CREATE TABLE Projects (Project_ID NUMBER, Project_Details TEXT); CREATE TABLE Accounts (Account_Details TEXT); CREATE TABLE Documents (Project_ID NUMBER, Document_Name TEXT, Document_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What are all the details from projects?",
        "query": "SELECT project_details FROM projects",
        "schema": "CREATE TABLE Documents (Other_Details TEXT, Project_ID NUMBER); CREATE TABLE Projects (Project_Details TEXT, Project_ID NUMBER); CREATE TABLE Accounts (Account_Details TEXT);"
      },
      {
        "question": "Also show the document names corresponding to the projects.",
        "query": "SELECT t1.project_details, t2.document_name FROM projects AS t1 JOIN documents AS t2 ON t1.project_id = t2.project_id",
        "schema": "CREATE TABLE Projects (Project_ID NUMBER, Project_Details TEXT); CREATE TABLE Accounts (Account_Details TEXT); CREATE TABLE Ref_Document_Types (Document_Type_Name TEXT, Document_Type_Code TEXT); CREATE TABLE Documents (Other_Details TEXT, Document_ID NUMBER, Document_Name TEXT, Document_Description TEXT, Project_ID NUMBER);"
      },
      {
        "question": "Show those details only for projects with a document named \"King Book\".",
        "query": "SELECT t1.project_details FROM projects AS t1 JOIN documents AS t2 ON t1.project_id = t2.project_id WHERE t2.document_name = \"King Book\"",
        "schema": "CREATE TABLE Projects (Project_Details TEXT, Project_ID NUMBER); CREATE TABLE Accounts (Account_Details TEXT); CREATE TABLE Ref_Document_Types (Document_Type_Name TEXT, Document_Type_Code TEXT); CREATE TABLE Documents (Project_ID NUMBER, Document_Name TEXT, Document_Description TEXT, Document_ID NUMBER, Other_Details TEXT);"
      }
    ],
    [
      {
        "question": "Show the information for budget codes.",
        "query": "SELECT * FROM ref_budget_codes",
        "schema": "CREATE TABLE Ref_Budget_Codes (Budget_Type_Code TEXT, Budget_Type_Description TEXT); CREATE TABLE Documents_with_Expenses (Budget_Type_Code TEXT, Document_ID NUMBER, Document_Details TEXT);"
      },
      {
        "question": "How many of them do we have?",
        "query": "SELECT count(*) FROM ref_budget_codes",
        "schema": "CREATE TABLE Documents_with_Expenses (Document_ID NUMBER, Document_Details TEXT, Budget_Type_Code TEXT); CREATE TABLE Ref_Budget_Codes (Budget_Type_Code TEXT, Budget_Type_Description TEXT);"
      }
    ],
    [
      {
        "question": "List all budget type codes.",
        "query": "SELECT budget_type_code FROM ref_budget_codes",
        "schema": "CREATE TABLE Documents_with_Expenses (Document_ID NUMBER, Budget_Type_Code TEXT, Document_Details TEXT); CREATE TABLE Ref_Budget_Codes (Budget_Type_Description TEXT, Budget_Type_Code TEXT);"
      },
      {
        "question": "Add their descriptions.",
        "query": "SELECT budget_type_code , budget_type_description FROM ref_budget_codes",
        "schema": "CREATE TABLE Ref_Document_Types (Document_Type_Description TEXT, Document_Type_Code TEXT); CREATE TABLE Ref_Budget_Codes (Budget_Type_Code TEXT, Budget_Type_Description TEXT); CREATE TABLE Documents (Document_Description TEXT); CREATE TABLE Documents_with_Expenses (Budget_Type_Code TEXT, Document_ID NUMBER, Document_Details TEXT);"
      }
    ],
    [
      {
        "question": "What are the descriptions for the budget codes?",
        "query": "SELECT budget_type_description FROM ref_budget_codes",
        "schema": "CREATE TABLE Ref_Budget_Codes (Budget_Type_Code TEXT, Budget_Type_Description TEXT); CREATE TABLE Documents_with_Expenses (Document_ID NUMBER, Budget_Type_Code TEXT); CREATE TABLE Ref_Document_Types (Document_Type_Description TEXT); CREATE TABLE Documents (Document_Description TEXT, Document_ID NUMBER);"
      },
      {
        "question": "How about the description for the budget with code ORG?",
        "query": "SELECT budget_type_description FROM ref_budget_codes WHERE budget_type_code = \"ORG\"",
        "schema": "CREATE TABLE Ref_Document_Types (Document_Type_Description TEXT); CREATE TABLE Documents (Document_ID NUMBER, Document_Description TEXT); CREATE TABLE Documents_with_Expenses (Document_ID NUMBER, Budget_Type_Code TEXT); CREATE TABLE Ref_Budget_Codes (Budget_Type_Description TEXT, Budget_Type_Code TEXT);"
      }
    ],
    [
      {
        "question": "Show information for all documents with expenses.",
        "query": "SELECT * FROM documents_with_expenses",
        "schema": "CREATE TABLE Ref_Budget_Codes (Budget_Type_Code TEXT, Budget_Type_Description TEXT); CREATE TABLE Documents (Document_ID NUMBER, Document_Name TEXT); CREATE TABLE Documents_with_Expenses (Budget_Type_Code TEXT, Document_ID NUMBER, Document_Details TEXT);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT count(*) FROM documents_with_expenses",
        "schema": "CREATE TABLE Documents_with_Expenses (Document_Details TEXT, Budget_Type_Code TEXT, Document_ID NUMBER); CREATE TABLE Ref_Budget_Codes (Budget_Type_Description TEXT, Budget_Type_Code TEXT); CREATE TABLE Documents (Document_Type_Code TEXT, Document_ID NUMBER, Document_Name TEXT);"
      }
    ],
    [
      {
        "question": "Show the ids for documents with expenses.",
        "query": "SELECT document_id FROM documents_with_expenses",
        "schema": "CREATE TABLE Documents_with_Expenses (Budget_Type_Code TEXT, Document_ID NUMBER, Document_Details TEXT); CREATE TABLE Statements (Statement_ID NUMBER); CREATE TABLE Documents (Document_ID NUMBER);"
      },
      {
        "question": "Also show their budget type code.",
        "query": "SELECT document_id, budget_type_code FROM documents_with_expenses",
        "schema": "CREATE TABLE Statements (Statement_ID NUMBER); CREATE TABLE Documents (Document_ID NUMBER, Document_Type_Code TEXT); CREATE TABLE Documents_with_Expenses (Budget_Type_Code TEXT, Document_Details TEXT, Document_ID NUMBER); CREATE TABLE Ref_Budget_Codes (Budget_Type_Code TEXT, Budget_Type_Description TEXT);"
      },
      {
        "question": "What is the id for the documents with the budget type code 'SF'?",
        "query": "SELECT document_id FROM documents_with_expenses WHERE budget_type_code = 'SF'",
        "schema": "CREATE TABLE Statements (Statement_ID NUMBER); CREATE TABLE Documents_with_Expenses (Budget_Type_Code TEXT, Document_ID NUMBER, Document_Details TEXT); CREATE TABLE Documents (Document_Type_Code TEXT, Document_ID NUMBER); CREATE TABLE Ref_Budget_Codes (Budget_Type_Code TEXT, Budget_Type_Description TEXT);"
      }
    ],
    [
      {
        "question": "Show the budget type code and description for all budget types.",
        "query": "SELECT budget_type_code , budget_type_description FROM ref_budget_codes",
        "schema": "CREATE TABLE Documents (Document_Description TEXT); CREATE TABLE Ref_Budget_Codes (Budget_Type_Description TEXT, Budget_Type_Code TEXT); CREATE TABLE Documents_with_Expenses (Budget_Type_Code TEXT);"
      },
      {
        "question": "Also show the corresponding document ids for them.",
        "query": "SELECT t2.budget_type_code , t2.budget_type_description , t1.document_id FROM documents_with_expenses AS t1 JOIN ref_budget_codes AS t2 ON t1.budget_type_code = t2.budget_type_code",
        "schema": "CREATE TABLE Ref_Document_Types (Document_Type_Description TEXT, Document_Type_Code TEXT); CREATE TABLE Documents_with_Expenses (Document_ID NUMBER, Document_Details TEXT, Budget_Type_Code TEXT); CREATE TABLE Ref_Budget_Codes (Budget_Type_Description TEXT, Budget_Type_Code TEXT); CREATE TABLE Documents (Document_ID NUMBER, Document_Description TEXT, Document_Type_Code TEXT);"
      }
    ],
    [
      {
        "question": "Show ids for all documents.",
        "query": "SELECT document_id FROM documents_with_expenses",
        "schema": "CREATE TABLE Documents (Document_Type_Code TEXT, Document_Name TEXT, Project_ID NUMBER, Document_ID NUMBER); CREATE TABLE Statements (Statement_ID NUMBER); CREATE TABLE Accounts (Account_ID NUMBER); CREATE TABLE Documents_with_Expenses (Document_ID NUMBER);"
      },
      {
        "question": "Also show their budget type descriptions.",
        "query": "SELECT t1.document_id , t2.budget_type_description FROM documents_with_expenses AS t1 JOIN ref_budget_codes AS t2 ON t1.budget_type_code = t2.budget_type_code",
        "schema": "CREATE TABLE Ref_Budget_Codes (Budget_Type_Description TEXT, Budget_Type_Code TEXT); CREATE TABLE Accounts (Account_ID NUMBER); CREATE TABLE Statements (Statement_ID NUMBER); CREATE TABLE Documents_with_Expenses (Budget_Type_Code TEXT, Document_ID NUMBER, Document_Details TEXT); CREATE TABLE Documents (Document_Type_Code TEXT, Document_Description TEXT, Document_ID NUMBER, Document_Name TEXT, Project_ID NUMBER); CREATE TABLE Ref_Document_Types (Document_Type_Code TEXT);"
      },
      {
        "question": "Show ids for those documents with budget types described as 'Government'.",
        "query": "SELECT t1.document_id FROM documents_with_expenses AS t1 JOIN ref_budget_codes AS t2 ON t1.budget_type_code = t2.budget_type_code WHERE t2.budget_type_description = \"Government\"",
        "schema": "CREATE TABLE Statements (Statement_ID NUMBER); CREATE TABLE Documents (Document_Name TEXT, Document_ID NUMBER, Document_Description TEXT, Document_Type_Code TEXT, Project_ID NUMBER); CREATE TABLE Accounts (Account_ID NUMBER); CREATE TABLE Ref_Document_Types (Document_Type_Description TEXT, Document_Type_Code TEXT); CREATE TABLE Ref_Budget_Codes (Budget_Type_Description TEXT, Budget_Type_Code TEXT); CREATE TABLE Documents_with_Expenses (Document_ID NUMBER, Budget_Type_Code TEXT, Document_Details TEXT);"
      }
    ],
    [
      {
        "question": "Show all the budget type codes for documents with expenses.",
        "query": "SELECT budget_type_code FROM documents_with_expenses",
        "schema": "CREATE TABLE Documents_with_Expenses (Document_Details TEXT, Budget_Type_Code TEXT, Document_ID NUMBER); CREATE TABLE Ref_Document_Types (Document_Type_Code TEXT); CREATE TABLE Ref_Budget_Codes (Budget_Type_Description TEXT, Budget_Type_Code TEXT); CREATE TABLE Documents (Document_Type_Code TEXT, Document_ID NUMBER);"
      },
      {
        "question": "For each code, show the number of corresponding documents.",
        "query": "SELECT budget_type_code , count(*) FROM documents_with_expenses GROUP BY budget_type_code",
        "schema": "CREATE TABLE Ref_Document_Types (Document_Type_Code TEXT); CREATE TABLE Documents (Document_ID NUMBER, Document_Type_Code TEXT); CREATE TABLE Ref_Budget_Codes (Budget_Type_Code TEXT, Budget_Type_Description TEXT); CREATE TABLE Documents_with_Expenses (Document_ID NUMBER, Document_Details TEXT, Budget_Type_Code TEXT);"
      }
    ],
    [
      {
        "question": "Show all the budget type codes for documents with expenses.",
        "query": "SELECT budget_type_code FROM documents_with_expenses",
        "schema": "CREATE TABLE Documents_with_Expenses (Document_Details TEXT, Document_ID NUMBER, Budget_Type_Code TEXT); CREATE TABLE Ref_Document_Types (Document_Type_Code TEXT); CREATE TABLE Documents (Document_Type_Code TEXT, Document_ID NUMBER); CREATE TABLE Ref_Budget_Codes (Budget_Type_Description TEXT, Budget_Type_Code TEXT);"
      },
      {
        "question": "For each code, show the number of documents.",
        "query": "SELECT budget_type_code , count(*) FROM documents_with_expenses GROUP BY budget_type_code",
        "schema": "CREATE TABLE Ref_Document_Types (Document_Type_Code TEXT); CREATE TABLE Documents_with_Expenses (Document_ID NUMBER, Document_Details TEXT, Budget_Type_Code TEXT); CREATE TABLE Documents (Document_Type_Code TEXT, Document_ID NUMBER); CREATE TABLE Ref_Budget_Codes (Budget_Type_Code TEXT, Budget_Type_Description TEXT);"
      },
      {
        "question": "Sort the codes in descending order of the count.",
        "query": "SELECT budget_type_code FROM documents_with_expenses GROUP BY budget_type_code ORDER BY count(*) DESC",
        "schema": "CREATE TABLE Ref_Budget_Codes (Budget_Type_Description TEXT, Budget_Type_Code TEXT); CREATE TABLE Documents (Document_ID NUMBER, Document_Type_Code TEXT); CREATE TABLE Documents_with_Expenses (Document_ID NUMBER, Budget_Type_Code TEXT, Document_Details TEXT); CREATE TABLE Ref_Document_Types (Document_Type_Code TEXT);"
      },
      {
        "question": "Which has the most?",
        "query": "SELECT budget_type_code FROM documents_with_expenses GROUP BY budget_type_code ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Ref_Budget_Codes (Budget_Type_Code TEXT, Budget_Type_Description TEXT); CREATE TABLE Documents_with_Expenses (Document_ID NUMBER, Document_Details TEXT, Budget_Type_Code TEXT); CREATE TABLE Documents (Document_Type_Code TEXT, Document_ID NUMBER); CREATE TABLE Ref_Document_Types (Document_Type_Code TEXT);"
      }
    ],
    [
      {
        "question": "Show document ids with an expense budget.",
        "query": "SELECT document_id FROM documents_with_expenses",
        "schema": "CREATE TABLE Ref_Budget_Codes (Budget_Type_Code TEXT); CREATE TABLE Projects (Project_ID NUMBER); CREATE TABLE Documents (Document_ID NUMBER, Project_ID NUMBER); CREATE TABLE Statements (Statement_ID NUMBER); CREATE TABLE Documents_with_Expenses (Document_Details TEXT, Budget_Type_Code TEXT, Document_ID NUMBER);"
      },
      {
        "question": "Show all document ids.",
        "query": "SELECT document_id FROM documents",
        "schema": "CREATE TABLE Projects (Project_ID NUMBER); CREATE TABLE Ref_Budget_Codes (Budget_Type_Code TEXT); CREATE TABLE Documents_with_Expenses (Document_Details TEXT, Budget_Type_Code TEXT, Document_ID NUMBER); CREATE TABLE Documents (Document_ID NUMBER, Project_ID NUMBER); CREATE TABLE Statements (Statement_ID NUMBER);"
      },
      {
        "question": "Among them, which documents don't have expense budgets?",
        "query": "SELECT document_id FROM documents EXCEPT SELECT document_id FROM documents_with_expenses",
        "schema": "CREATE TABLE Statements (Statement_ID NUMBER); CREATE TABLE Documents (Document_ID NUMBER, Project_ID NUMBER); CREATE TABLE Ref_Budget_Codes (Budget_Type_Code TEXT); CREATE TABLE Documents_with_Expenses (Budget_Type_Code TEXT, Document_Details TEXT, Document_ID NUMBER); CREATE TABLE Projects (Project_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show all document ids with an expense budget.",
        "query": "SELECT document_id FROM documents_with_expenses",
        "schema": "CREATE TABLE Ref_Budget_Codes (Budget_Type_Code TEXT, Budget_Type_Description TEXT); CREATE TABLE Statements (Statement_ID NUMBER); CREATE TABLE Accounts (Account_ID NUMBER); CREATE TABLE Documents (Document_ID NUMBER); CREATE TABLE Documents_with_Expenses (Budget_Type_Code TEXT, Document_Details TEXT, Document_ID NUMBER); CREATE TABLE Projects (Project_ID NUMBER);"
      },
      {
        "question": "Show ids for all documents in type CV.",
        "query": "SELECT document_id FROM documents WHERE document_type_code = \"CV\"",
        "schema": "CREATE TABLE Ref_Budget_Codes (Budget_Type_Description TEXT, Budget_Type_Code TEXT); CREATE TABLE Documents (Document_ID NUMBER, Document_Type_Code TEXT); CREATE TABLE Ref_Document_Types (Document_Type_Code TEXT); CREATE TABLE Statements (Statement_ID NUMBER); CREATE TABLE Projects (Project_ID NUMBER); CREATE TABLE Documents_with_Expenses (Document_ID NUMBER, Budget_Type_Code TEXT, Document_Details TEXT); CREATE TABLE Accounts (Account_ID NUMBER);"
      },
      {
        "question": "Which of them don't have expense budgets?",
        "query": "SELECT document_id FROM documents WHERE document_type_code = \"CV\" EXCEPT SELECT document_id FROM documents_with_expenses",
        "schema": "CREATE TABLE Documents_with_Expenses (Document_ID NUMBER, Budget_Type_Code TEXT, Document_Details TEXT); CREATE TABLE Documents (Document_Type_Code TEXT, Document_ID NUMBER); CREATE TABLE Ref_Budget_Codes (Budget_Type_Description TEXT, Budget_Type_Code TEXT); CREATE TABLE Projects (Project_ID NUMBER); CREATE TABLE Ref_Document_Types (Document_Type_Code TEXT); CREATE TABLE Statements (Statement_ID NUMBER); CREATE TABLE Accounts (Account_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show ids for all documents.",
        "query": "SELECT document_id FROM documents",
        "schema": "CREATE TABLE Documents (Document_ID NUMBER, Project_ID NUMBER, Document_Type_Code TEXT, Document_Name TEXT); CREATE TABLE Statements (Statement_ID NUMBER); CREATE TABLE Accounts (Account_ID NUMBER);"
      },
      {
        "question": "How about those with the letter 's' in the name?",
        "query": "SELECT document_id FROM documents WHERE document_name LIKE '%s%'",
        "schema": "CREATE TABLE Documents (Document_Type_Code TEXT, Project_ID NUMBER, Document_ID NUMBER, Document_Name TEXT); CREATE TABLE Accounts (Account_ID NUMBER); CREATE TABLE Statements (Statement_ID NUMBER);"
      },
      {
        "question": "Which of them have any expense budgets.",
        "query": "SELECT t1.document_id FROM documents AS t1 JOIN documents_with_expenses AS t2 ON t1.document_id = t2.document_id WHERE t1.document_name LIKE '%s%'",
        "schema": "CREATE TABLE Accounts (Account_ID NUMBER); CREATE TABLE Documents_with_Expenses (Document_ID NUMBER, Budget_Type_Code TEXT, Document_Details TEXT); CREATE TABLE Documents (Document_Name TEXT, Document_ID NUMBER, Document_Type_Code TEXT, Project_ID NUMBER); CREATE TABLE Statements (Statement_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show the ids of documents with expenses.",
        "query": "SELECT document_id FROM documents_with_expenses",
        "schema": "CREATE TABLE Documents_with_Expenses (Document_Details TEXT, Budget_Type_Code TEXT, Document_ID NUMBER); CREATE TABLE Accounts (Account_ID NUMBER); CREATE TABLE Documents (Document_ID NUMBER); CREATE TABLE Statements (Statement_ID NUMBER);"
      },
      {
        "question": "Show ids for those which don't.",
        "query": "SELECT document_id FROM documents WHERE document_id NOT IN ( SELECT document_id FROM documents_with_expenses )",
        "schema": "CREATE TABLE Accounts (Account_ID NUMBER); CREATE TABLE Documents (Document_ID NUMBER); CREATE TABLE Statements (Statement_ID NUMBER); CREATE TABLE Documents_with_Expenses (Document_ID NUMBER, Budget_Type_Code TEXT, Document_Details TEXT);"
      },
      {
        "question": "How many of such documents are there?",
        "query": "SELECT count(*) FROM documents WHERE document_id NOT IN ( SELECT document_id FROM documents_with_expenses )",
        "schema": "CREATE TABLE Accounts (Account_ID NUMBER); CREATE TABLE Documents_with_Expenses (Budget_Type_Code TEXT, Document_ID NUMBER, Document_Details TEXT); CREATE TABLE Documents (Document_Name TEXT, Document_ID NUMBER); CREATE TABLE Statements (Statement_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What are the dates of all documents?",
        "query": "SELECT document_date FROM documents",
        "schema": "CREATE TABLE Documents (Document_Name TEXT, Document_Date TIME, Document_ID NUMBER);"
      },
      {
        "question": "What about those with 'GV' type expenses?",
        "query": "SELECT t1.document_date FROM documents AS t1 JOIN documents_with_expenses AS t2 ON t1.document_id = t2.document_id WHERE t2.budget_type_code = 'GV'",
        "schema": "CREATE TABLE Documents (Document_ID NUMBER, Document_Type_Code TEXT, Document_Name TEXT, Document_Date TIME); CREATE TABLE Documents_with_Expenses (Document_Details TEXT, Document_ID NUMBER, Budget_Type_Code TEXT); CREATE TABLE Ref_Budget_Codes (Budget_Type_Code TEXT, Budget_Type_Description TEXT);"
      },
      {
        "question": "What about those with 'SF' type expenses?",
        "query": "SELECT t1.document_date FROM documents AS t1 JOIN documents_with_expenses AS t2 ON t1.document_id = t2.document_id WHERE t2.budget_type_code = 'SF'",
        "schema": "CREATE TABLE Documents (Document_ID NUMBER, Document_Date TIME, Document_Type_Code TEXT, Document_Name TEXT); CREATE TABLE Documents_with_Expenses (Document_ID NUMBER, Budget_Type_Code TEXT, Document_Details TEXT); CREATE TABLE Ref_Budget_Codes (Budget_Type_Code TEXT, Budget_Type_Description TEXT);"
      },
      {
        "question": "Show the dates for the documents with both types.",
        "query": "SELECT t1.document_date FROM documents AS t1 JOIN documents_with_expenses AS t2 ON t1.document_id = t2.document_id WHERE t2.budget_type_code = 'GV' INTERSECT SELECT t1.document_date FROM documents AS t1 JOIN documents_with_expenses AS t2 ON t1.document_id = t2.document_id WHERE t2.budget_type_code = 'SF'",
        "schema": "CREATE TABLE Documents_with_Expenses (Document_Details TEXT, Document_ID NUMBER, Budget_Type_Code TEXT); CREATE TABLE Ref_Budget_Codes (Budget_Type_Description TEXT, Budget_Type_Code TEXT); CREATE TABLE Documents (Document_Type_Code TEXT, Document_Name TEXT, Document_ID NUMBER, Document_Date TIME);"
      }
    ]
  ],
  "manufactory_1": [
    [
      {
        "question": "show the name and revenue of all companies.",
        "query": "SELECT name, revenue FROM manufacturers",
        "schema": "CREATE TABLE Manufacturers (Name TEXT, Code NUMBER, Revenue NUMBER);"
      },
      {
        "question": "what is their average revenue?",
        "query": "SELECT avg(revenue) FROM manufacturers",
        "schema": "CREATE TABLE Manufacturers (Revenue NUMBER, Name TEXT, Code NUMBER);"
      },
      {
        "question": "please return maximum and total revenues too.",
        "query": "SELECT avg(revenue) , max(revenue) , sum(revenue) FROM manufacturers",
        "schema": "CREATE TABLE Manufacturers (Revenue NUMBER, Name TEXT, Code NUMBER);"
      }
    ],
    [
      {
        "question": "find the names of manufactures that are based in Tokyo.",
        "query": "SELECT name FROM manufacturers WHERE headquarter = 'Tokyo'",
        "schema": "CREATE TABLE Manufacturers (Headquarter TEXT, Code NUMBER, Name TEXT); CREATE TABLE Products (Manufacturer NUMBER);"
      },
      {
        "question": "how about in Beijing?",
        "query": "SELECT name FROM manufacturers WHERE headquarter = 'Beijing'",
        "schema": "CREATE TABLE Manufacturers (Headquarter TEXT, Name TEXT, Code NUMBER); CREATE TABLE Products (Manufacturer NUMBER);"
      },
      {
        "question": "what is the total number of companies based in these two places?",
        "query": "SELECT count(*) FROM manufacturers WHERE headquarter = 'Tokyo' OR headquarter = 'Beijing'",
        "schema": "CREATE TABLE Manufacturers (Code NUMBER, Headquarter TEXT, Name TEXT); CREATE TABLE Products (Manufacturer NUMBER);"
      }
    ],
    [
      {
        "question": "list the names of all manufacturers.",
        "query": "SELECT name FROM manufacturers",
        "schema": "CREATE TABLE Manufacturers (Headquarter TEXT, Name TEXT, Code NUMBER); CREATE TABLE Products (Manufacturer NUMBER);"
      },
      {
        "question": "show the names of manufacturers that begin with the letter 'S'.",
        "query": "SELECT name FROM manufacturers WHERE name LIKE 'S%'",
        "schema": "CREATE TABLE Products (Manufacturer NUMBER); CREATE TABLE Manufacturers (Name TEXT, Headquarter TEXT, Code NUMBER);"
      },
      {
        "question": "who are their founders?",
        "query": "SELECT founder FROM manufacturers WHERE name LIKE 'S%'",
        "schema": "CREATE TABLE Manufacturers (Code NUMBER, Headquarter TEXT, Name TEXT, Founder TEXT); CREATE TABLE Products (Manufacturer NUMBER);"
      }
    ],
    [
      {
        "question": "find the names of companies whose main office is in Tokyo.",
        "query": "SELECT name FROM manufacturers WHERE headquarter = 'Tokyo'",
        "schema": "CREATE TABLE Manufacturers (Code NUMBER, Name TEXT, Headquarter TEXT);"
      },
      {
        "question": "What is the total revenue of these companies?",
        "query": "SELECT sum(revenue) FROM manufacturers WHERE headquarter = 'Tokyo'",
        "schema": "CREATE TABLE Manufacturers (Revenue NUMBER, Headquarter TEXT, Name TEXT, Code NUMBER);"
      },
      {
        "question": "add the revenue of Taiwan companies too.",
        "query": "SELECT sum(revenue) FROM manufacturers WHERE headquarter = 'Tokyo' OR headquarter = 'Taiwan'",
        "schema": "CREATE TABLE Manufacturers (Headquarter TEXT, Name TEXT, Code NUMBER, Revenue NUMBER);"
      }
    ],
    [
      {
        "question": "list the names of all of the products.",
        "query": "SELECT name FROM products",
        "schema": "CREATE TABLE Products (Name TEXT, Code NUMBER);"
      },
      {
        "question": "which products are produced by the company Creative Labs?",
        "query": "SELECT t1.name FROM products AS t1 JOIN manufacturers AS t2 ON t1.manufacturer = t2.code WHERE t2.name = 'Creative Labs'",
        "schema": "CREATE TABLE Products (Code NUMBER, Manufacturer NUMBER, Name TEXT); CREATE TABLE Manufacturers (Code NUMBER, Name TEXT);"
      },
      {
        "question": "among them, find the products that Sony also produces.",
        "query": "SELECT t1.name FROM products AS t1 JOIN manufacturers AS t2 ON t1.manufacturer = t2.code WHERE t2.name = 'Creative Labs' INTERSECT SELECT t1.name FROM products AS t1 JOIN manufacturers AS t2 ON t1.manufacturer = t2.code WHERE t2.name = 'Sony'",
        "schema": "CREATE TABLE Manufacturers (Name TEXT, Code NUMBER, Headquarter TEXT); CREATE TABLE Products (Name TEXT, Code NUMBER, Manufacturer NUMBER);"
      }
    ],
    [
      {
        "question": "find the name of the company that earned the least revenue.",
        "query": "SELECT name FROM manufacturers ORDER BY revenue LIMIT 1",
        "schema": "CREATE TABLE Products (Name TEXT, Manufacturer NUMBER); CREATE TABLE Manufacturers (Name TEXT, Revenue NUMBER, Code NUMBER);"
      },
      {
        "question": "show its headquarter location and founder too.",
        "query": "SELECT name, headquarter, founder FROM manufacturers ORDER BY revenue LIMIT 1",
        "schema": "CREATE TABLE Products (Manufacturer NUMBER, Name TEXT); CREATE TABLE Manufacturers (Name TEXT, Code NUMBER, Founder TEXT, Headquarter TEXT, Revenue NUMBER);"
      },
      {
        "question": "what is the info for the company with the highest revenue?",
        "query": "SELECT name, headquarter, founder FROM manufacturers ORDER BY revenue DESC LIMIT 1",
        "schema": "CREATE TABLE Manufacturers (Name TEXT, Code NUMBER, Revenue NUMBER, Founder TEXT, Headquarter TEXT); CREATE TABLE Products (Name TEXT, Manufacturer NUMBER);"
      }
    ],
    [
      {
        "question": "how many companies are there?",
        "query": "SELECT count(*) FROM manufacturers",
        "schema": "CREATE TABLE Products (Manufacturer NUMBER); CREATE TABLE Manufacturers (Code NUMBER, Name TEXT, Headquarter TEXT);"
      },
      {
        "question": "What is their average revenue?",
        "query": "SELECT avg(revenue) FROM manufacturers",
        "schema": "CREATE TABLE Manufacturers (Name TEXT, Code NUMBER, Revenue NUMBER, Headquarter TEXT); CREATE TABLE Products (Manufacturer NUMBER);"
      },
      {
        "question": "Find the names of companies whose revenue is greater than the average.",
        "query": "SELECT name FROM manufacturers WHERE revenue > (SELECT avg(revenue) FROM manufacturers)",
        "schema": "CREATE TABLE Manufacturers (Headquarter TEXT, Revenue NUMBER, Code NUMBER, Name TEXT); CREATE TABLE Products (Manufacturer NUMBER);"
      }
    ],
    [
      {
        "question": "how many companies are based in Austin?",
        "query": "SELECT count(*) FROM manufacturers WHERE headquarter = 'Austin'",
        "schema": "CREATE TABLE Products (Manufacturer NUMBER); CREATE TABLE Manufacturers (Name TEXT, Code NUMBER, Headquarter TEXT);"
      },
      {
        "question": "show their revenues",
        "query": "SELECT revenue FROM manufacturers WHERE headquarter = 'Austin'",
        "schema": "CREATE TABLE Products (Manufacturer NUMBER); CREATE TABLE Manufacturers (Headquarter TEXT, Revenue NUMBER, Code NUMBER, Name TEXT);"
      },
      {
        "question": "Find the names of companies whose revenue is smaller than all of those revenues.",
        "query": "SELECT name FROM manufacturers WHERE revenue < (SELECT min(revenue) FROM manufacturers WHERE headquarter = 'Austin')",
        "schema": "CREATE TABLE Manufacturers (Revenue NUMBER, Code NUMBER, Headquarter TEXT, Name TEXT); CREATE TABLE Products (Manufacturer NUMBER);"
      }
    ],
    [
      {
        "question": "what are the names of the companies based in Austin?",
        "query": "SELECT name FROM manufacturers WHERE headquarter = 'Austin'",
        "schema": "CREATE TABLE Manufacturers (Code NUMBER, Headquarter TEXT, Name TEXT); CREATE TABLE Products (Manufacturer NUMBER);"
      },
      {
        "question": "find the names of companies whose revenue is larger than the largest revenue of those companies.",
        "query": "SELECT name FROM manufacturers WHERE revenue > (SELECT min(revenue) FROM manufacturers WHERE headquarter = 'Austin')",
        "schema": "CREATE TABLE Products (Manufacturer NUMBER); CREATE TABLE Manufacturers (Name TEXT, Code NUMBER, Headquarter TEXT, Revenue NUMBER);"
      },
      {
        "question": "return the total revenue of the resulting companies.",
        "query": "SELECT sum(revenue) FROM manufacturers WHERE revenue > (SELECT min(revenue) FROM manufacturers WHERE headquarter = 'Austin')",
        "schema": "CREATE TABLE Products (Manufacturer NUMBER); CREATE TABLE Manufacturers (Revenue NUMBER, Headquarter TEXT, Name TEXT, Code NUMBER);"
      }
    ],
    [
      {
        "question": "find the number of all products from each manufacture. list each company's name.",
        "query": "SELECT count(*), t2.name FROM products AS t1 JOIN manufacturers AS t2 ON t1.manufacturer = t2.code GROUP BY t2.name",
        "schema": "CREATE TABLE Products (Manufacturer NUMBER, Name TEXT); CREATE TABLE Manufacturers (Code NUMBER, Name TEXT);"
      },
      {
        "question": "show the average price of each company\u2019s products.",
        "query": "SELECT avg(t1.price), t2.name FROM products AS t1 JOIN manufacturers AS t2 ON t1.manufacturer = t2.code GROUP BY t2.name",
        "schema": "CREATE TABLE Manufacturers (Name TEXT, Code NUMBER); CREATE TABLE Products (Price NUMBER, Code NUMBER, Name TEXT, Manufacturer NUMBER);"
      }
    ],
    [
      {
        "question": "how many different headquarter cities are there?",
        "query": "SELECT count(DISTINCT headquarter) FROM manufacturers",
        "schema": "CREATE TABLE Manufacturers (Headquarter TEXT, Name TEXT, Code NUMBER);"
      },
      {
        "question": "Find the number of different products that are from companies at each headquarter.",
        "query": "SELECT count(DISTINCT t1.name), t2.headquarter FROM products AS t1 JOIN manufacturers AS t2 ON t1.manufacturer = t2.code GROUP BY t2.headquarter",
        "schema": "CREATE TABLE Products (Name TEXT, Manufacturer NUMBER, Code NUMBER); CREATE TABLE Manufacturers (Code NUMBER, Name TEXT, Headquarter TEXT);"
      }
    ],
    [
      {
        "question": "find the name of all products.",
        "query": "SELECT name FROM products",
        "schema": "CREATE TABLE Products (Name TEXT, Code NUMBER);"
      },
      {
        "question": "which of them does Sony make.",
        "query": "SELECT t1.name FROM products AS t1 JOIN manufacturers AS t2 ON t1.manufacturer = t2.code WHERE t2.name = 'Sony'",
        "schema": "CREATE TABLE Products (Manufacturer NUMBER, Code NUMBER, Name TEXT); CREATE TABLE Manufacturers (Headquarter TEXT, Name TEXT, Code NUMBER);"
      },
      {
        "question": "Find the number of products that Sony does not make.",
        "query": "SELECT count(DISTINCT name) FROM products WHERE name NOT IN (SELECT t1.name FROM products AS t1 JOIN manufacturers AS t2 ON t1.manufacturer = t2.code WHERE t2.name = 'Sony')",
        "schema": "CREATE TABLE Manufacturers (Code NUMBER, Name TEXT, Headquarter TEXT); CREATE TABLE Products (Code NUMBER, Manufacturer NUMBER, Name TEXT);"
      }
    ],
    [
      {
        "question": "Find the names of companies that produce DVD drives.",
        "query": "SELECT t2.name FROM products AS t1 JOIN manufacturers AS t2 ON t1.manufacturer = t2.code WHERE t1.name = 'DVD drive'",
        "schema": "CREATE TABLE Manufacturers (Name TEXT, Code NUMBER); CREATE TABLE Products (Name TEXT, Price NUMBER, Code NUMBER, Manufacturer NUMBER);"
      },
      {
        "question": "how about the companies that do not make them?",
        "query": "SELECT name FROM manufacturers EXCEPT SELECT t2.name FROM products AS t1 JOIN manufacturers AS t2 ON t1.manufacturer = t2.code WHERE t1.name = 'DVD drive'",
        "schema": "CREATE TABLE Manufacturers (Code NUMBER, Name TEXT); CREATE TABLE Products (Code NUMBER, Name TEXT, Manufacturer NUMBER, Price NUMBER);"
      }
    ],
    [
      {
        "question": "how many products are in the record?",
        "query": "SELECT count(*) FROM products",
        "schema": "CREATE TABLE Manufacturers (Code NUMBER); CREATE TABLE Products (Price NUMBER, Manufacturer NUMBER, Name TEXT, Code NUMBER);"
      },
      {
        "question": "find the number for each manufacturer, showing the name of each company.",
        "query": "SELECT count(*) , t2.name FROM products AS t1 JOIN manufacturers AS t2 ON t1.manufacturer = t2.code GROUP BY t2.name",
        "schema": "CREATE TABLE Manufacturers (Name TEXT, Code NUMBER); CREATE TABLE Products (Code NUMBER, Name TEXT, Manufacturer NUMBER, Price NUMBER);"
      }
    ],
    [
      {
        "question": "Select the name of all products.",
        "query": "SELECT name FROM products",
        "schema": "CREATE TABLE Products (Code NUMBER, Name TEXT);"
      },
      {
        "question": "which one is the most expensive?",
        "query": "SELECT name FROM products ORDER BY price DESC LIMIT 1",
        "schema": "CREATE TABLE Products (Name TEXT, Price NUMBER, Code NUMBER);"
      },
      {
        "question": "also show its price.",
        "query": "SELECT name, price FROM products ORDER BY price DESC LIMIT 1",
        "schema": "CREATE TABLE Products (Code NUMBER, Price NUMBER, Name TEXT);"
      },
      {
        "question": "how about the products with a price larger than or equal to 180?",
        "query": "SELECT name, price FROM products WHERE price >= 180",
        "schema": "CREATE TABLE Products (Name TEXT, Code NUMBER, Price NUMBER);"
      },
      {
        "question": "sort the result by price (in descending order).",
        "query": "SELECT name, price FROM products WHERE price >= 180 ORDER BY price DESC",
        "schema": "CREATE TABLE Products (Price NUMBER, Name TEXT, Code NUMBER);"
      },
      {
        "question": "then order by name  (in ascending order).",
        "query": "SELECT name, price FROM products WHERE price >= 180 ORDER BY price DESC , name ASC",
        "schema": "CREATE TABLE Products (Name TEXT, Price NUMBER, Code NUMBER);"
      }
    ],
    [
      {
        "question": "Show the names of all manufacturers.",
        "query": "SELECT name FROM manufacturers",
        "schema": "CREATE TABLE Manufacturers (Code NUMBER, Name TEXT, Headquarter TEXT); CREATE TABLE Products (Name TEXT, Manufacturer NUMBER);"
      },
      {
        "question": "how many products do each of them produce?",
        "query": "SELECT count(*), t2.name FROM products AS t1 JOIN manufacturers AS t2 ON t1.manufacturer = t2.code GROUP BY t2.name",
        "schema": "CREATE TABLE Products (Name TEXT, Code NUMBER, Manufacturer NUMBER); CREATE TABLE Manufacturers (Headquarter TEXT, Code NUMBER, Name TEXT);"
      },
      {
        "question": "what are their average prices?",
        "query": "SELECT avg(t1.price), t2.name FROM products AS t1 JOIN manufacturers AS t2 ON t1.manufacturer = t2.code GROUP BY t2.name",
        "schema": "CREATE TABLE Products (Manufacturer NUMBER, Price NUMBER, Name TEXT, Code NUMBER); CREATE TABLE Manufacturers (Name TEXT, Code NUMBER, Headquarter TEXT);"
      }
    ],
    [
      {
        "question": "find the name of products with a price higher than or equal to $150.",
        "query": "SELECT name FROM products WHERE price >= 150",
        "schema": "CREATE TABLE Products (Price NUMBER, Name TEXT, Code NUMBER);"
      },
      {
        "question": "what are the names of manufacturers that produce these products?",
        "query": "SELECT DISTINCT t2.name FROM products AS t1 JOIN manufacturers AS t2 ON t1.manufacturer = t2.code WHERE t1.price >= 150",
        "schema": "CREATE TABLE Products (Manufacturer NUMBER, Price NUMBER, Name TEXT, Code NUMBER); CREATE TABLE Manufacturers (Code NUMBER, Name TEXT);"
      },
      {
        "question": "Select the names of manufacturer whose products have an average price higher than or equal to $150.",
        "query": "SELECT avg(t1.price) , t2.name FROM products AS t1 JOIN manufacturers AS t2 ON t1.manufacturer = t2.code GROUP BY t2.name HAVING avg(t1.price) >= 150",
        "schema": "CREATE TABLE Products (Code NUMBER, Manufacturer NUMBER, Name TEXT, Price NUMBER); CREATE TABLE Manufacturers (Code NUMBER, Name TEXT);"
      }
    ],
    [
      {
        "question": "what is the name of the most expensive product?",
        "query": "SELECT name FROM products ORDER BY price DESC LIMIT 1",
        "schema": "CREATE TABLE Products (Price NUMBER, Code NUMBER, Name TEXT); CREATE TABLE Manufacturers (Code NUMBER);"
      },
      {
        "question": "how about the cheapest product?",
        "query": "SELECT name FROM products ORDER BY price ASC LIMIT 1",
        "schema": "CREATE TABLE Products (Code NUMBER, Name TEXT, Price NUMBER); CREATE TABLE Manufacturers (Code NUMBER);"
      },
      {
        "question": "show its price as well.",
        "query": "SELECT name , price FROM products ORDER BY price ASC LIMIT 1",
        "schema": "CREATE TABLE Products (Code NUMBER, Price NUMBER, Name TEXT); CREATE TABLE Manufacturers (Code NUMBER);"
      }
    ]
  ],
  "flight_4": [
    [
      {
        "question": "show all different countries that have airports in the record.",
        "query": "SELECT DISTINCT country FROM airports",
        "schema": "CREATE TABLE airports (country TEXT, name TEXT, apid NUMBER); CREATE TABLE airlines (country TEXT);"
      },
      {
        "question": "could you please list the names of airports in Cuba?",
        "query": "SELECT name FROM airports WHERE country = 'Cuba'",
        "schema": "CREATE TABLE airports (country TEXT, name TEXT, apid NUMBER); CREATE TABLE airlines (country TEXT);"
      },
      {
        "question": "also list Argentina's airports.",
        "query": "SELECT name FROM airports WHERE country = 'Cuba' OR country = 'Argentina'",
        "schema": "CREATE TABLE airports (name TEXT, apid NUMBER, country TEXT); CREATE TABLE airlines (country TEXT);"
      }
    ],
    [
      {
        "question": "what are all of the airline names?",
        "query": "SELECT DISTINCT name FROM airlines",
        "schema": "CREATE TABLE airports (apid NUMBER, name TEXT); CREATE TABLE airlines (callsign TEXT, alid NUMBER, name TEXT); CREATE TABLE routes (alid NUMBER, airline TEXT);"
      },
      {
        "question": "which of them start with 'Orbit'?",
        "query": "SELECT DISTINCT name FROM airlines WHERE name LIKE 'Orbit%'",
        "schema": "CREATE TABLE airlines (callsign TEXT, name TEXT, alid NUMBER); CREATE TABLE routes (airline TEXT, alid NUMBER); CREATE TABLE airports (apid NUMBER, name TEXT);"
      },
      {
        "question": "how many are there?",
        "query": "SELECT count(*) FROM airlines WHERE name LIKE 'Orbit%'",
        "schema": "CREATE TABLE airports (name TEXT, apid NUMBER); CREATE TABLE routes (airline TEXT, alid NUMBER); CREATE TABLE airlines (alid NUMBER, callsign TEXT, name TEXT);"
      },
      {
        "question": "Find the country of these airlines.",
        "query": "SELECT DISTINCT country FROM airlines WHERE name LIKE 'Orbit%'",
        "schema": "CREATE TABLE airports (apid NUMBER, name TEXT, country TEXT); CREATE TABLE routes (airline TEXT, alid NUMBER); CREATE TABLE airlines (callsign TEXT, alid NUMBER, country TEXT, name TEXT);"
      }
    ],
    [
      {
        "question": "how many airports are there?",
        "query": "SELECT count(*) FROM airports",
        "schema": "CREATE TABLE airports (apid NUMBER, name TEXT, country TEXT, city TEXT, x NUMBER, icao TEXT, y NUMBER);"
      },
      {
        "question": "which airport has the lowest elevation?",
        "query": "SELECT * FROM airports ORDER BY elevation LIMIT 1",
        "schema": "CREATE TABLE airports (city TEXT, country TEXT, y NUMBER, name TEXT, x NUMBER, apid NUMBER, elevation NUMBER, icao TEXT);"
      },
      {
        "question": "how about the one with the highest elevation?",
        "query": "SELECT * FROM airports ORDER BY elevation DESC LIMIT 1",
        "schema": "CREATE TABLE airports (x NUMBER, elevation NUMBER, country TEXT, name TEXT, y NUMBER, city TEXT, icao TEXT, apid NUMBER);"
      },
      {
        "question": "which country is it located in?",
        "query": "SELECT country FROM airports ORDER BY elevation DESC LIMIT 1",
        "schema": "CREATE TABLE airports (elevation NUMBER, country TEXT, y NUMBER, x NUMBER, name TEXT, apid NUMBER, icao TEXT, city TEXT);"
      }
    ],
    [
      {
        "question": "please show all airport names.",
        "query": "SELECT name FROM airports",
        "schema": "CREATE TABLE airports (name TEXT, city TEXT, apid NUMBER);"
      },
      {
        "question": "what is the total number of airports?",
        "query": "SELECT count(*) FROM airports",
        "schema": "CREATE TABLE airports (name TEXT, apid NUMBER, city TEXT);"
      },
      {
        "question": "among them, how many contain the word 'International' in their name?",
        "query": "SELECT count(*) FROM airports WHERE name LIKE '%International%'",
        "schema": "CREATE TABLE airports (city TEXT, apid NUMBER, name TEXT, country TEXT);"
      }
    ],
    [
      {
        "question": "what is the icao code for American Airlines?",
        "query": "SELECT icao FROM airlines WHERE name = 'American Airlines'",
        "schema": "CREATE TABLE airlines (alid NUMBER, name TEXT, country TEXT, callsign TEXT, icao TEXT); CREATE TABLE airports (icao TEXT, country TEXT, apid NUMBER, name TEXT);"
      },
      {
        "question": "which routes are operated by American Airlines?",
        "query": "SELECT * FROM airlines AS t1 JOIN routes AS t2 ON t1.alid = t2.alid WHERE t1.name = 'American Airlines'",
        "schema": "CREATE TABLE airports (name TEXT, apid NUMBER, country TEXT, icao TEXT); CREATE TABLE routes (src_apid NUMBER, dst_apid NUMBER, rid NUMBER, alid NUMBER, airline TEXT); CREATE TABLE airlines (name TEXT, callsign TEXT, icao TEXT, alid NUMBER, country TEXT);"
      },
      {
        "question": "please count the number of routes.",
        "query": "SELECT count(*) FROM airlines AS t1 JOIN routes AS t2 ON t1.alid = t2.alid WHERE t1.name = 'American Airlines'",
        "schema": "CREATE TABLE airports (name TEXT, country TEXT, icao TEXT, apid NUMBER); CREATE TABLE routes (alid NUMBER, rid NUMBER, dst_apid NUMBER, airline TEXT, src_apid NUMBER); CREATE TABLE airlines (alid NUMBER, name TEXT, icao TEXT, callsign TEXT, country TEXT);"
      }
    ],
    [
      {
        "question": "how many airports does each country have?",
        "query": "SELECT count(*), country FROM airports GROUP BY country",
        "schema": "CREATE TABLE airports (apid NUMBER, country TEXT, name TEXT); CREATE TABLE airlines (country TEXT);"
      },
      {
        "question": "how many does Canada have?",
        "query": "SELECT count(*) FROM airports WHERE country = 'Canada'",
        "schema": "CREATE TABLE airports (country TEXT, apid NUMBER, name TEXT); CREATE TABLE airlines (country TEXT);"
      },
      {
        "question": "what is the total number of routes that end there?",
        "query": "SELECT count(*) FROM airports AS t1 JOIN routes AS t2 ON t1.apid = t2.dst_apid WHERE country = 'Canada'",
        "schema": "CREATE TABLE airlines (country TEXT); CREATE TABLE routes (src_apid NUMBER, alid NUMBER, dst_apid NUMBER, rid NUMBER); CREATE TABLE airports (apid NUMBER, name TEXT, country TEXT);"
      }
    ],
    [
      {
        "question": "what is the lowest elevation of all airports?",
        "query": "SELECT min(elevation) FROM airports",
        "schema": "CREATE TABLE airports (elevation NUMBER, apid NUMBER, name TEXT);"
      },
      {
        "question": "what is the name of that airport?",
        "query": "SELECT name FROM airports ORDER BY elevation LIMIT 1",
        "schema": "CREATE TABLE airports (name TEXT, apid NUMBER, elevation NUMBER);"
      },
      {
        "question": "also show the city and country where it is located.",
        "query": "SELECT name , city , country FROM airports ORDER BY elevation LIMIT 1",
        "schema": "CREATE TABLE airports (elevation NUMBER, apid NUMBER, country TEXT, city TEXT, name TEXT);"
      }
    ],
    [
      {
        "question": "what is the average elevation of all airports?",
        "query": "SELECT avg(elevation) FROM airports",
        "schema": "CREATE TABLE airports (name TEXT, apid NUMBER, elevation NUMBER);"
      },
      {
        "question": "order the airport info by latitude from highest to lowest.",
        "query": "SELECT * FROM airports ORDER BY elevation DESC",
        "schema": "CREATE TABLE airports (apid NUMBER, name TEXT, elevation NUMBER);"
      },
      {
        "question": "just show name, city, and country of the highest one.",
        "query": "SELECT name , city , country FROM airports ORDER BY elevation DESC LIMIT 1",
        "schema": "CREATE TABLE airports (city TEXT, country TEXT, elevation NUMBER, apid NUMBER, name TEXT);"
      }
    ],
    [
      {
        "question": "how many routes are there?",
        "query": "SELECT count(*) FROM routes",
        "schema": "CREATE TABLE airlines (alid NUMBER); CREATE TABLE airports (apid NUMBER); CREATE TABLE routes (alid NUMBER, src_apid NUMBER, src_ap TEXT, codeshare TEXT, dst_apid NUMBER, airline TEXT, rid NUMBER);"
      },
      {
        "question": "find the number of routes for each destination.",
        "query": "SELECT count(*), dst_apid FROM routes GROUP BY dst_apid",
        "schema": "CREATE TABLE airlines (alid NUMBER); CREATE TABLE airports (apid NUMBER); CREATE TABLE routes (alid NUMBER, src_apid NUMBER, dst_apid NUMBER, codeshare TEXT, src_ap TEXT, airline TEXT, rid NUMBER);"
      },
      {
        "question": "what is the name and city of the destination airport that has the most routes ending there?",
        "query": "SELECT t1.name, t1.city FROM airports AS t1 JOIN routes AS t2 ON t1.apid = t2.dst_apid GROUP BY t2.dst_apid ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE routes (rid NUMBER, src_apid NUMBER, alid NUMBER, src_ap TEXT, codeshare TEXT, dst_apid NUMBER, airline TEXT); CREATE TABLE airlines (alid NUMBER); CREATE TABLE airports (name TEXT, city TEXT, apid NUMBER);"
      }
    ],
    [
      {
        "question": "Provide the names of all airlines.",
        "query": "SELECT name FROM airlines",
        "schema": "CREATE TABLE routes (alid NUMBER); CREATE TABLE airlines (name TEXT, alid NUMBER); CREATE TABLE airports (name TEXT, apid NUMBER);"
      },
      {
        "question": "Find the number of routes provided by each airline. Show airline name.",
        "query": "SELECT count(*), t1.name FROM airlines AS t1 JOIN routes AS t2 ON t1.alid = t2.alid GROUP BY t1.name",
        "schema": "CREATE TABLE airlines (name TEXT, alid NUMBER); CREATE TABLE airports (name TEXT, apid NUMBER); CREATE TABLE routes (rid NUMBER, airline TEXT, src_apid NUMBER, alid NUMBER, dst_apid NUMBER);"
      },
      {
        "question": "which airline operates the most routes?",
        "query": "SELECT t1.name FROM airlines AS t1 JOIN routes AS t2 ON t1.alid = t2.alid GROUP BY t2.alid ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE routes (src_apid NUMBER, alid NUMBER, airline TEXT, dst_apid NUMBER, rid NUMBER); CREATE TABLE airlines (name TEXT, alid NUMBER); CREATE TABLE airports (apid NUMBER, name TEXT);"
      },
      {
        "question": "what are the top 10 airlines?",
        "query": "SELECT t1.name FROM airlines AS t1 JOIN routes AS t2 ON t1.alid = t2.alid GROUP BY t2.alid ORDER BY count(*) DESC LIMIT 10",
        "schema": "CREATE TABLE airports (apid NUMBER, name TEXT); CREATE TABLE routes (src_apid NUMBER, dst_apid NUMBER, airline TEXT, alid NUMBER, rid NUMBER); CREATE TABLE airlines (name TEXT, alid NUMBER);"
      }
    ],
    [
      {
        "question": "Show the name and city of all airports.",
        "query": "SELECT name, city FROM airports",
        "schema": "CREATE TABLE airports (name TEXT, apid NUMBER, city TEXT);"
      },
      {
        "question": "Show the number of flight routes for each of them as a source airport.",
        "query": "SELECT t1.name, t1.city, count(*) FROM airports AS t1 JOIN routes AS t2 ON t1.apid = t2.src_apid GROUP BY t2.src_apid",
        "schema": "CREATE TABLE airports (apid NUMBER, name TEXT, city TEXT); CREATE TABLE routes (src_ap TEXT, rid NUMBER, alid NUMBER, src_apid NUMBER, dst_apid NUMBER);"
      },
      {
        "question": "which of them has the most routes?",
        "query": "SELECT t1.name, t1.city FROM airports AS t1 JOIN routes AS t2 ON t1.apid = t2.src_apid GROUP BY t2.src_apid ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE routes (rid NUMBER, dst_apid NUMBER, src_apid NUMBER, src_ap TEXT, alid NUMBER); CREATE TABLE airports (apid NUMBER, name TEXT, city TEXT);"
      }
    ],
    [
      {
        "question": "how many routes does American Airlines have?",
        "query": "SELECT count(*) FROM airlines AS t1 JOIN routes AS t2 ON t1.alid = t2.alid WHERE t1.name = 'American Airlines'",
        "schema": "CREATE TABLE airlines (name TEXT, alid NUMBER, callsign TEXT, icao TEXT); CREATE TABLE routes (alid NUMBER, rid NUMBER, dst_apid NUMBER, airline TEXT, src_apid NUMBER); CREATE TABLE airports (apid NUMBER);"
      },
      {
        "question": "How many destinations do these routes go to?",
        "query": "SELECT count(DISTINCT dst_apid) FROM airlines AS t1 JOIN routes AS t2 ON t1.alid = t2.alid WHERE t1.name = 'American Airlines'",
        "schema": "CREATE TABLE airlines (icao TEXT, alid NUMBER, name TEXT, callsign TEXT); CREATE TABLE routes (rid NUMBER, src_apid NUMBER, alid NUMBER, dst_apid NUMBER, airline TEXT); CREATE TABLE airports (apid NUMBER);"
      }
    ],
    [
      {
        "question": "how many countries have airlines?",
        "query": "SELECT count(DISTINCT country) FROM airlines",
        "schema": "CREATE TABLE airports (country TEXT, apid NUMBER); CREATE TABLE airlines (icao TEXT, alid NUMBER, country TEXT);"
      },
      {
        "question": "how many airlines does each country have?",
        "query": "SELECT count(*), country FROM airlines GROUP BY country",
        "schema": "CREATE TABLE airports (country TEXT, apid NUMBER); CREATE TABLE airlines (icao TEXT, country TEXT, name TEXT, alid NUMBER);"
      },
      {
        "question": "show the one that has the most.",
        "query": "SELECT country FROM airlines GROUP BY country ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE airlines (name TEXT, icao TEXT, alid NUMBER, country TEXT); CREATE TABLE airports (country TEXT, apid NUMBER);"
      }
    ],
    [
      {
        "question": "what are the different active codes?",
        "query": "SELECT DISTINCT active FROM airlines",
        "schema": "CREATE TABLE airlines (alid NUMBER, active TEXT); CREATE TABLE airports (apid NUMBER);"
      },
      {
        "question": "show the name of airlines whose active status is 'Y'.",
        "query": "SELECT name FROM airlines WHERE active = 'Y'",
        "schema": "CREATE TABLE airlines (active TEXT, name TEXT, alid NUMBER); CREATE TABLE airports (apid NUMBER, y NUMBER);"
      },
      {
        "question": "Which country has the largest number of these airlines?",
        "query": "SELECT country FROM airlines WHERE active = 'Y' GROUP BY country ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE airports (apid NUMBER, y NUMBER, country TEXT); CREATE TABLE airlines (name TEXT, country TEXT, alid NUMBER, active TEXT);"
      }
    ],
    [
      {
        "question": "List all countries and the number of airlines for each one.",
        "query": "SELECT country , count(*) FROM airlines GROUP BY country",
        "schema": "CREATE TABLE routes (airline TEXT); CREATE TABLE airlines (country TEXT, icao TEXT, name TEXT, alid NUMBER); CREATE TABLE airports (country TEXT);"
      },
      {
        "question": "list them in ascending order of number of airlines.",
        "query": "SELECT country , count(*) FROM airlines GROUP BY country ORDER BY count(*)",
        "schema": "CREATE TABLE airlines (country TEXT, alid NUMBER, name TEXT, icao TEXT); CREATE TABLE airports (country TEXT); CREATE TABLE routes (airline TEXT);"
      },
      {
        "question": "list in descending order.",
        "query": "SELECT country , count(*) FROM airlines GROUP BY country ORDER BY count(*) DESC",
        "schema": "CREATE TABLE airlines (icao TEXT, country TEXT, alid NUMBER, name TEXT); CREATE TABLE routes (airline TEXT); CREATE TABLE airports (country TEXT);"
      }
    ],
    [
      {
        "question": "how many airports are in the record?",
        "query": "SELECT count(*) FROM airports",
        "schema": "CREATE TABLE airports (apid NUMBER, name TEXT, city TEXT, x NUMBER);"
      },
      {
        "question": "how many airports are in each country?",
        "query": "SELECT count(*), country FROM airports GROUP BY country",
        "schema": "CREATE TABLE airlines (country TEXT); CREATE TABLE airports (name TEXT, apid NUMBER, country TEXT, city TEXT, x NUMBER);"
      },
      {
        "question": "order them by number of airports in decreasing order.",
        "query": "SELECT count(*), country FROM airports GROUP BY country ORDER BY count(*) DESC",
        "schema": "CREATE TABLE airports (city TEXT, apid NUMBER, x NUMBER, name TEXT, country TEXT); CREATE TABLE airlines (country TEXT);"
      }
    ],
    [
      {
        "question": "how many airports does the US has?",
        "query": "SELECT count(*) FROM airports WHERE country = 'United States'",
        "schema": "CREATE TABLE airlines (country TEXT); CREATE TABLE airports (country TEXT, apid NUMBER, name TEXT, city TEXT);"
      },
      {
        "question": "what is the number of airports in each city in the US?",
        "query": "SELECT count(*) , city FROM airports WHERE country = 'United States' GROUP BY city",
        "schema": "CREATE TABLE airlines (country TEXT); CREATE TABLE airports (city TEXT, name TEXT, apid NUMBER, country TEXT);"
      },
      {
        "question": "Order the cities by decreasing number of airports.",
        "query": "SELECT count(*) , city FROM airports WHERE country = 'United States' GROUP BY city ORDER BY count(*) DESC",
        "schema": "CREATE TABLE airlines (country TEXT); CREATE TABLE airports (country TEXT, name TEXT, apid NUMBER, city TEXT);"
      }
    ],
    [
      {
        "question": "show all cities that have an airport.",
        "query": "SELECT city FROM airports",
        "schema": "CREATE TABLE airports (city TEXT, apid NUMBER, name TEXT);"
      },
      {
        "question": "which of them are in the United States?",
        "query": "SELECT city FROM airports WHERE country = 'United States'",
        "schema": "CREATE TABLE airports (country TEXT, city TEXT, apid NUMBER, name TEXT);"
      },
      {
        "question": "just show cities that have more than 2 airports.",
        "query": "SELECT city FROM airports WHERE country = 'United States' GROUP BY city HAVING count(*) > 2",
        "schema": "CREATE TABLE airports (country TEXT, apid NUMBER, city TEXT, name TEXT);"
      },
      {
        "question": "how about more than 3?",
        "query": "SELECT city FROM airports WHERE country = 'United States' GROUP BY city HAVING count(*) > 3",
        "schema": "CREATE TABLE airports (city TEXT, apid NUMBER, country TEXT, name TEXT);"
      }
    ],
    [
      {
        "question": "which cities have more than 3 airports?",
        "query": "SELECT city FROM airports GROUP BY city HAVING count(*) > 3",
        "schema": "CREATE TABLE airports (apid NUMBER, city TEXT, name TEXT);"
      },
      {
        "question": "how many are there?",
        "query": "SELECT count(*) FROM (SELECT city FROM airports GROUP BY city HAVING count(*) > 3)",
        "schema": "CREATE TABLE airports (city TEXT, name TEXT, apid NUMBER);"
      }
    ],
    [
      {
        "question": "list all cities.",
        "query": "SELECT city FROM airports",
        "schema": "CREATE TABLE airports (city TEXT, apid NUMBER);"
      },
      {
        "question": "how many airports does each city have?",
        "query": "SELECT city , count(*) FROM airports GROUP BY city",
        "schema": "CREATE TABLE airports (city TEXT, name TEXT, apid NUMBER);"
      },
      {
        "question": "just show cities that have more than one airport.",
        "query": "SELECT city FROM airports GROUP BY city HAVING count(*) > 1",
        "schema": "CREATE TABLE airports (city TEXT, name TEXT, apid NUMBER);"
      },
      {
        "question": "include the number of airports per city.",
        "query": "SELECT city , count(*) FROM airports GROUP BY city HAVING count(*) > 1",
        "schema": "CREATE TABLE airports (city TEXT, apid NUMBER, name TEXT);"
      }
    ],
    [
      {
        "question": "how many cities have more than 2 airports?",
        "query": "SELECT count(*) FROM (SELECT city FROM airports GROUP BY city HAVING count(*) > 2)",
        "schema": "CREATE TABLE airports (apid NUMBER, name TEXT, city TEXT);"
      },
      {
        "question": "what are these cities?",
        "query": "SELECT city FROM airports GROUP BY city HAVING count(*) > 2",
        "schema": "CREATE TABLE airports (apid NUMBER, name TEXT, city TEXT);"
      },
      {
        "question": "sort the results by the number of airports.",
        "query": "SELECT city FROM airports GROUP BY city HAVING count(*) > 2 ORDER BY count(*)",
        "schema": "CREATE TABLE airports (name TEXT, apid NUMBER, city TEXT);"
      }
    ],
    [
      {
        "question": "list the names of all airports.",
        "query": "SELECT name FROM airports",
        "schema": "CREATE TABLE airports (apid NUMBER, city TEXT, name TEXT);"
      },
      {
        "question": "also list the number of routes that list them as the source airport.",
        "query": "SELECT count(*), t1.name FROM airports AS t1 JOIN routes AS t2 ON t1.apid = t2.src_apid GROUP BY t1.name",
        "schema": "CREATE TABLE airports (name TEXT, city TEXT, apid NUMBER); CREATE TABLE routes (src_apid NUMBER, rid NUMBER, src_ap TEXT, dst_ap TEXT, dst_apid NUMBER, alid NUMBER);"
      }
    ],
    [
      {
        "question": "how many routes are there?",
        "query": "SELECT count(*) FROM routes",
        "schema": "CREATE TABLE routes (airline TEXT, src_apid NUMBER, alid NUMBER, rid NUMBER, dst_apid NUMBER, codeshare TEXT); CREATE TABLE airports (apid NUMBER); CREATE TABLE airlines (alid NUMBER);"
      },
      {
        "question": "what are their source airports? List airport names.",
        "query": "SELECT t1.name FROM airports AS t1 JOIN routes AS t2 ON t1.apid = t2.src_apid",
        "schema": "CREATE TABLE airlines (alid NUMBER); CREATE TABLE airports (name TEXT, apid NUMBER); CREATE TABLE routes (src_ap TEXT, airline TEXT, alid NUMBER, src_apid NUMBER, codeshare TEXT, rid NUMBER, dst_apid NUMBER);"
      },
      {
        "question": "For each of those airports, how many routes does it have?",
        "query": "SELECT count(*) , t1.name FROM airports AS t1 JOIN routes AS t2 ON t1.apid = t2.src_apid GROUP BY t1.name",
        "schema": "CREATE TABLE routes (rid NUMBER, alid NUMBER, codeshare TEXT, src_apid NUMBER, src_ap TEXT, dst_apid NUMBER, airline TEXT); CREATE TABLE airports (apid NUMBER, name TEXT, country TEXT); CREATE TABLE airlines (alid NUMBER);"
      },
      {
        "question": "order the result by decreasing number of routes",
        "query": "SELECT count(*) , t1.name FROM airports AS t1 JOIN routes AS t2 ON t1.apid = t2.src_apid GROUP BY t1.name ORDER BY count(*) DESC",
        "schema": "CREATE TABLE airports (country TEXT, apid NUMBER, name TEXT); CREATE TABLE airlines (alid NUMBER); CREATE TABLE routes (rid NUMBER, dst_apid NUMBER, src_ap TEXT, airline TEXT, src_apid NUMBER, alid NUMBER, codeshare TEXT);"
      }
    ],
    [
      {
        "question": "which cities have more than one airport?",
        "query": "SELECT city FROM airports GROUP BY city HAVING count(*) > 1",
        "schema": "CREATE TABLE airports (apid NUMBER, name TEXT, city TEXT);"
      },
      {
        "question": "ok, which of them have exactly two?",
        "query": "SELECT city FROM airports GROUP BY city HAVING count(*) = 2",
        "schema": "CREATE TABLE airports (city TEXT, apid NUMBER, name TEXT);"
      }
    ],
    [
      {
        "question": "how many routes are there?",
        "query": "SELECT count(*) FROM routes",
        "schema": "CREATE TABLE airlines (alid NUMBER); CREATE TABLE routes (src_apid NUMBER, codeshare TEXT, rid NUMBER, alid NUMBER, dst_apid NUMBER, airline TEXT); CREATE TABLE airports (apid NUMBER);"
      },
      {
        "question": "please list the number of routes for each country and airline.",
        "query": "SELECT t1.country, t1.name, count(*) FROM airlines AS t1 JOIN routes AS t2 ON t1.alid = t2.alid GROUP BY t1.country, t1.name",
        "schema": "CREATE TABLE airlines (name TEXT, alid NUMBER, country TEXT); CREATE TABLE airports (country TEXT, apid NUMBER); CREATE TABLE routes (alid NUMBER, airline TEXT, dst_apid NUMBER, src_apid NUMBER, rid NUMBER, codeshare TEXT);"
      }
    ],
    [
      {
        "question": "how many airports are in Italy?",
        "query": "SELECT count(*) FROM airports WHERE country = 'Italy'",
        "schema": "CREATE TABLE airports (country TEXT, city TEXT, name TEXT, apid NUMBER); CREATE TABLE airlines (country TEXT);"
      },
      {
        "question": "show the info of routes listing those airports as destinations.",
        "query": "SELECT * FROM routes AS t1 JOIN airports AS t2 ON t1.dst_apid = t2.apid WHERE t2.country = 'Italy'",
        "schema": "CREATE TABLE routes (src_apid NUMBER, rid NUMBER, alid NUMBER, dst_apid NUMBER); CREATE TABLE airports (apid NUMBER, name TEXT, city TEXT, country TEXT); CREATE TABLE airlines (country TEXT);"
      },
      {
        "question": "count the total number.",
        "query": "SELECT count(*) FROM routes AS t1 JOIN airports AS t2 ON t1.dst_apid = t2.apid WHERE t2.country = 'Italy'",
        "schema": "CREATE TABLE routes (src_apid NUMBER, rid NUMBER, alid NUMBER, dst_apid NUMBER); CREATE TABLE airlines (country TEXT); CREATE TABLE airports (name TEXT, city TEXT, apid NUMBER, country TEXT);"
      }
    ],
    [
      {
        "question": "how many routes are operated by the airline with name 'American Airlines'.",
        "query": "SELECT count(*) FROM routes AS t1 JOIN airlines AS t2 ON t1.alid = t2.alid WHERE t2.name = 'American Airlines'",
        "schema": "CREATE TABLE routes (rid NUMBER, dst_apid NUMBER, alid NUMBER, airline TEXT, src_apid NUMBER); CREATE TABLE airports (name TEXT, apid NUMBER); CREATE TABLE airlines (name TEXT, alid NUMBER);"
      },
      {
        "question": "how many of them list the US as the destination?",
        "query": "SELECT count(*) FROM routes AS t1 JOIN airports AS t2 ON t1.dst_apid = t2.apid JOIN airlines AS t3 ON t1.alid = t3.alid WHERE t2.country = 'United States' AND t3.name = 'American Airlines'",
        "schema": "CREATE TABLE airlines (country TEXT, alid NUMBER, name TEXT); CREATE TABLE routes (src_apid NUMBER, airline TEXT, rid NUMBER, dst_apid NUMBER, alid NUMBER); CREATE TABLE airports (name TEXT, country TEXT, apid NUMBER);"
      },
      {
        "question": "how about for Italy?",
        "query": "SELECT count(*) FROM routes AS t1 JOIN airports AS t2 ON t1.dst_apid = t2.apid JOIN airlines AS t3 ON t1.alid = t3.alid WHERE t2.country = 'Italy' AND t3.name = 'American Airlines'",
        "schema": "CREATE TABLE airlines (country TEXT, name TEXT, alid NUMBER); CREATE TABLE airports (name TEXT, country TEXT, apid NUMBER); CREATE TABLE routes (src_apid NUMBER, dst_apid NUMBER, airline TEXT, rid NUMBER, alid NUMBER);"
      }
    ],
    [
      {
        "question": "which city is John F Kennedy International Airport located in?",
        "query": "SELECT city FROM airports WHERE name = 'John F Kennedy International Airport'",
        "schema": "CREATE TABLE airports (apid NUMBER, name TEXT, city TEXT);"
      },
      {
        "question": "which routes list it as a destination airport?",
        "query": "SELECT * FROM airports AS t1 JOIN routes AS t2 ON t1.apid = t2.dst_apid WHERE t1.name = 'John F Kennedy International Airport'",
        "schema": "CREATE TABLE airports (city TEXT, name TEXT, apid NUMBER); CREATE TABLE routes (dst_apid NUMBER, rid NUMBER, src_apid NUMBER, alid NUMBER);"
      },
      {
        "question": "how many of those routes are there?",
        "query": "SELECT count(*) FROM airports AS t1 JOIN routes AS t2 ON t1.apid = t2.dst_apid WHERE t1.name = 'John F Kennedy International Airport'",
        "schema": "CREATE TABLE routes (alid NUMBER, dst_apid NUMBER, rid NUMBER, src_apid NUMBER); CREATE TABLE airports (city TEXT, apid NUMBER, name TEXT);"
      }
    ],
    [
      {
        "question": "Find the number of routes from the United States.",
        "query": "SELECT count(*) FROM routes WHERE src_apid IN (SELECT apid FROM airports WHERE country = 'United States')",
        "schema": "CREATE TABLE airlines (country TEXT, alid NUMBER); CREATE TABLE airports (country TEXT, apid NUMBER); CREATE TABLE routes (src_apid NUMBER, dst_apid NUMBER, rid NUMBER, alid NUMBER);"
      },
      {
        "question": "how many of them end up in Canada?",
        "query": "SELECT count(*) FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country = 'Canada') AND src_apid IN (SELECT apid FROM airports WHERE country = 'United States')",
        "schema": "CREATE TABLE airlines (alid NUMBER, country TEXT); CREATE TABLE routes (alid NUMBER, src_apid NUMBER, dst_apid NUMBER, rid NUMBER); CREATE TABLE airports (apid NUMBER, country TEXT);"
      }
    ],
    [
      {
        "question": "how many routes end in the United States?",
        "query": "SELECT count(*) FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country = 'United States')",
        "schema": "CREATE TABLE routes (src_apid NUMBER, alid NUMBER, rid NUMBER, dst_apid NUMBER); CREATE TABLE airports (apid NUMBER, country TEXT); CREATE TABLE airlines (country TEXT);"
      },
      {
        "question": "among them, how many fly from the United States?",
        "query": "SELECT count(*) FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country = 'United States') AND src_apid IN (SELECT apid FROM airports WHERE country = 'United States')",
        "schema": "CREATE TABLE airports (apid NUMBER, country TEXT); CREATE TABLE routes (rid NUMBER, dst_apid NUMBER, src_apid NUMBER, alid NUMBER); CREATE TABLE airlines (country TEXT);"
      },
      {
        "question": "what are their ids?",
        "query": "SELECT rid FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country = 'United States') AND src_apid IN (SELECT apid FROM airports WHERE country = 'United States')",
        "schema": "CREATE TABLE routes (src_apid NUMBER, rid NUMBER, alid NUMBER, dst_apid NUMBER); CREATE TABLE airports (apid NUMBER, country TEXT, name TEXT); CREATE TABLE airlines (country TEXT);"
      }
    ],
    [
      {
        "question": "show info of all airlines.",
        "query": "SELECT * FROM airlines",
        "schema": "CREATE TABLE airports (apid NUMBER); CREATE TABLE routes (alid NUMBER, airline TEXT); CREATE TABLE airlines (icao TEXT, name TEXT, alid NUMBER);"
      },
      {
        "question": "find the number of routes for each airline. Show their names.",
        "query": "SELECT count(*), t1.name FROM airlines AS t1 JOIN routes AS t2 ON t1.alid = t2.alid GROUP BY t1.name",
        "schema": "CREATE TABLE airlines (name TEXT, alid NUMBER, icao TEXT); CREATE TABLE airports (name TEXT, apid NUMBER); CREATE TABLE routes (dst_apid NUMBER, rid NUMBER, airline TEXT, alid NUMBER, src_apid NUMBER);"
      },
      {
        "question": "which airline has the most routes?",
        "query": "SELECT t1.name FROM airlines AS t1 JOIN routes AS t2 ON t1.alid = t2.alid GROUP BY t1.name ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE airports (name TEXT, apid NUMBER); CREATE TABLE airlines (alid NUMBER, icao TEXT, name TEXT); CREATE TABLE routes (dst_apid NUMBER, rid NUMBER, alid NUMBER, src_apid NUMBER, airline TEXT);"
      }
    ],
    [
      {
        "question": "show all airports in China.",
        "query": "SELECT * FROM airports WHERE country = 'China'",
        "schema": "CREATE TABLE airports (icao TEXT, name TEXT, apid NUMBER, city TEXT, country TEXT); CREATE TABLE airlines (country TEXT);"
      },
      {
        "question": "which one is listed as the source airport of the most routes?",
        "query": "SELECT t1.name FROM airports AS t1 JOIN routes AS t2 ON t1.apid = t2.src_apid WHERE t1.country = 'China' GROUP BY t1.name ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE routes (dst_ap TEXT, alid NUMBER, rid NUMBER, src_ap TEXT, dst_apid NUMBER, src_apid NUMBER); CREATE TABLE airlines (country TEXT); CREATE TABLE airports (city TEXT, icao TEXT, country TEXT, apid NUMBER, name TEXT);"
      }
    ]
  ],
  "store_1": [
    [
      {
        "question": "Show me all the information from invoices!",
        "query": "SELECT * FROM invoices",
        "schema": "CREATE TABLE tracks (id NUMBER, album_id NUMBER, name TEXT); CREATE TABLE invoice_lines (track_id NUMBER, invoice_id NUMBER); CREATE TABLE invoices (customer_id NUMBER, billing_postal_code TEXT, total NUMBER, id NUMBER, billing_state TEXT); CREATE TABLE employees (reports_to NUMBER, id NUMBER); CREATE TABLE playlist_tracks (track_id NUMBER); CREATE TABLE customers (id NUMBER, last_name TEXT); CREATE TABLE albums (id NUMBER, title TEXT);"
      },
      {
        "question": "What is the country with the least number of invoices?",
        "query": "SELECT billing_country , count(*) FROM invoices GROUP BY billing_country ORDER BY count(*) ASC LIMIT 1;",
        "schema": "CREATE TABLE customers (state TEXT, id NUMBER, last_name TEXT, country TEXT); CREATE TABLE playlist_tracks (track_id NUMBER); CREATE TABLE invoices (billing_country TEXT, customer_id NUMBER, billing_postal_code TEXT, id NUMBER, total NUMBER, billing_state TEXT); CREATE TABLE employees (id NUMBER, reports_to NUMBER, country TEXT); CREATE TABLE tracks (name TEXT, id NUMBER, album_id NUMBER); CREATE TABLE albums (title TEXT, id NUMBER); CREATE TABLE invoice_lines (invoice_id NUMBER, track_id NUMBER);"
      },
      {
        "question": "How about the one with the most!",
        "query": "SELECT billing_country , count(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT 1;",
        "schema": "CREATE TABLE customers (state TEXT, id NUMBER, last_name TEXT, country TEXT); CREATE TABLE playlist_tracks (track_id NUMBER); CREATE TABLE tracks (album_id NUMBER, name TEXT, id NUMBER); CREATE TABLE albums (title TEXT, id NUMBER); CREATE TABLE invoice_lines (track_id NUMBER, invoice_id NUMBER); CREATE TABLE employees (id NUMBER, country TEXT, reports_to NUMBER); CREATE TABLE invoices (id NUMBER, total NUMBER, customer_id NUMBER, billing_postal_code TEXT, billing_country TEXT, billing_state TEXT);"
      },
      {
        "question": "How about the top 5?",
        "query": "SELECT billing_country , count(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT 5;",
        "schema": "CREATE TABLE invoice_lines (invoice_id NUMBER, track_id NUMBER); CREATE TABLE albums (id NUMBER, title TEXT); CREATE TABLE tracks (album_id NUMBER, name TEXT, id NUMBER); CREATE TABLE customers (id NUMBER, state TEXT, last_name TEXT, country TEXT); CREATE TABLE invoices (total NUMBER, billing_country TEXT, id NUMBER, billing_state TEXT, customer_id NUMBER, billing_postal_code TEXT); CREATE TABLE playlist_tracks (track_id NUMBER); CREATE TABLE employees (id NUMBER, country TEXT, reports_to NUMBER);"
      }
    ],
    [
      {
        "question": "Show me the number of invoices by country!",
        "query": "SELECT billing_country, count(*) FROM invoices GROUP BY billing_country;",
        "schema": "CREATE TABLE customers (country TEXT, id NUMBER, state TEXT); CREATE TABLE invoices (billing_city TEXT, total NUMBER, billing_state TEXT, billing_country TEXT, id NUMBER, customer_id NUMBER); CREATE TABLE tracks (id NUMBER); CREATE TABLE employees (id NUMBER, country TEXT); CREATE TABLE invoice_lines (invoice_id NUMBER);"
      },
      {
        "question": "What is the total invoice for each!",
        "query": "SELECT billing_country, count(*), sum(total) FROM invoices GROUP BY billing_country;",
        "schema": "CREATE TABLE employees (country TEXT, id NUMBER); CREATE TABLE invoices (billing_city TEXT, customer_id NUMBER, billing_state TEXT, id NUMBER, billing_country TEXT, total NUMBER); CREATE TABLE tracks (id NUMBER); CREATE TABLE customers (id NUMBER, country TEXT, state TEXT); CREATE TABLE invoice_lines (invoice_id NUMBER);"
      },
      {
        "question": "Can you show me this sorted from greatest to least by total invoice size!",
        "query": "SELECT billing_country, count(*), sum(total) FROM invoices GROUP BY billing_country ORDER BY sum(total) DESC;",
        "schema": "CREATE TABLE tracks (id NUMBER); CREATE TABLE invoice_lines (invoice_id NUMBER); CREATE TABLE invoices (customer_id NUMBER, total NUMBER, billing_state TEXT, id NUMBER, billing_city TEXT, billing_country TEXT); CREATE TABLE customers (id NUMBER, state TEXT, country TEXT); CREATE TABLE employees (country TEXT, id NUMBER);"
      },
      {
        "question": "Now, show me just the billing country and total for the top 8!",
        "query": "SELECT billing_country , sum(total) FROM invoices GROUP BY billing_country ORDER BY sum(total) DESC LIMIT 8;",
        "schema": "CREATE TABLE customers (state TEXT, country TEXT, id NUMBER); CREATE TABLE invoice_lines (invoice_id NUMBER); CREATE TABLE tracks (id NUMBER); CREATE TABLE employees (country TEXT, id NUMBER); CREATE TABLE invoices (billing_country TEXT, billing_state TEXT, total NUMBER, billing_city TEXT, id NUMBER, customer_id NUMBER);"
      }
    ],
    [
      {
        "question": "Can you show me the total invoice size per country!",
        "query": "SELECT billing_country , sum(total) FROM invoices GROUP BY billing_country;",
        "schema": "CREATE TABLE invoices (total NUMBER, id NUMBER, customer_id NUMBER, billing_state TEXT, billing_country TEXT); CREATE TABLE invoice_lines (invoice_id NUMBER, quantity NUMBER); CREATE TABLE employees (country TEXT); CREATE TABLE tracks (id NUMBER, unit_price NUMBER); CREATE TABLE customers (id NUMBER, country TEXT);"
      },
      {
        "question": "Instead, display the average per country!",
        "query": "SELECT billing_country , avg(total) FROM invoices GROUP BY billing_country;",
        "schema": "CREATE TABLE tracks (id NUMBER, unit_price NUMBER); CREATE TABLE employees (country TEXT); CREATE TABLE invoice_lines (invoice_id NUMBER, quantity NUMBER); CREATE TABLE invoices (billing_country TEXT, billing_state TEXT, total NUMBER, id NUMBER, customer_id NUMBER); CREATE TABLE customers (id NUMBER, country TEXT);"
      },
      {
        "question": "Just, show the top 15 by average invoice size.",
        "query": "SELECT billing_country , avg(total) FROM invoices GROUP BY billing_country ORDER BY avg(total) DESC LIMIT 15;",
        "schema": "CREATE TABLE invoice_lines (invoice_id NUMBER, quantity NUMBER); CREATE TABLE employees (country TEXT); CREATE TABLE invoices (id NUMBER, customer_id NUMBER, total NUMBER, billing_country TEXT, billing_state TEXT); CREATE TABLE tracks (id NUMBER, unit_price NUMBER); CREATE TABLE customers (country TEXT, id NUMBER);"
      },
      {
        "question": "Actually, just list the top 10!",
        "query": "SELECT billing_country , avg(total) FROM invoices GROUP BY billing_country ORDER BY avg(total) DESC LIMIT 10;",
        "schema": "CREATE TABLE tracks (unit_price NUMBER, id NUMBER); CREATE TABLE employees (country TEXT); CREATE TABLE invoices (total NUMBER, id NUMBER, billing_state TEXT, customer_id NUMBER, billing_country TEXT); CREATE TABLE customers (country TEXT, id NUMBER); CREATE TABLE invoice_lines (invoice_id NUMBER, quantity NUMBER);"
      }
    ],
    [
      {
        "question": "Show all the ids, customer ids, and invoice dates from invoices.",
        "query": "SELECT id, customer_id, invoice_date FROM invoices",
        "schema": "CREATE TABLE tracks (id NUMBER); CREATE TABLE invoices (invoice_date TIME, total NUMBER, id NUMBER, customer_id NUMBER); CREATE TABLE customers (id NUMBER, support_rep_id NUMBER, last_name TEXT, first_name TEXT); CREATE TABLE invoice_lines (invoice_id NUMBER, id NUMBER);"
      },
      {
        "question": "Could you show me them in order of most recently purchased?",
        "query": "SELECT id, customer_id, invoice_date FROM invoices ORDER BY invoice_date DESC;",
        "schema": "CREATE TABLE tracks (id NUMBER); CREATE TABLE invoice_lines (invoice_id NUMBER, id NUMBER); CREATE TABLE customers (first_name TEXT, support_rep_id NUMBER, last_name TEXT, id NUMBER); CREATE TABLE invoices (invoice_date TIME, total NUMBER, customer_id NUMBER, id NUMBER);"
      },
      {
        "question": "Also include the customer names of each purchase!!",
        "query": "SELECT t1.first_name , t1.last_name, t2.id, t2.customer_id, t2.invoice_date FROM customers AS t1 JOIN invoices AS t2 ON t2.customer_id = t1.id ORDER BY t2.invoice_date DESC;",
        "schema": "CREATE TABLE invoice_lines (id NUMBER, invoice_id NUMBER); CREATE TABLE invoices (id NUMBER, invoice_date TIME, customer_id NUMBER, total NUMBER); CREATE TABLE tracks (id NUMBER); CREATE TABLE customers (first_name TEXT, last_name TEXT, id NUMBER, support_rep_id NUMBER);"
      },
      {
        "question": "Show just the first name and last names of the 5 most recent purchases.",
        "query": "SELECT t1.first_name , t1.last_name FROM customers AS t1 JOIN invoices AS t2 ON t2.customer_id = t1.id ORDER BY t2.invoice_date DESC LIMIT 5;",
        "schema": "CREATE TABLE invoice_lines (invoice_id NUMBER, id NUMBER); CREATE TABLE tracks (id NUMBER); CREATE TABLE invoices (customer_id NUMBER, invoice_date TIME, id NUMBER, total NUMBER); CREATE TABLE customers (support_rep_id NUMBER, id NUMBER, first_name TEXT, last_name TEXT);"
      }
    ],
    [
      {
        "question": "How many orders have each customer created by customer name?",
        "query": "SELECT t1.first_name , t1.last_name , count(*) FROM customers AS t1 JOIN invoices AS t2 ON t2.customer_id = t1.id GROUP BY t1.id;",
        "schema": "CREATE TABLE customers (first_name TEXT, id NUMBER, last_name TEXT); CREATE TABLE invoices (id NUMBER, customer_id NUMBER);"
      },
      {
        "question": "Show the entry with the lowest?",
        "query": "SELECT t1.first_name , t1.last_name , count(*) FROM customers AS t1 JOIN invoices AS t2 ON t2.customer_id = t1.id GROUP BY t1.id ORDER BY count(*) ASC LIMIT 1;",
        "schema": "CREATE TABLE customers (id NUMBER, first_name TEXT, last_name TEXT); CREATE TABLE invoices (id NUMBER, total NUMBER, customer_id NUMBER);"
      },
      {
        "question": "How about the highest!",
        "query": "SELECT t1.first_name , t1.last_name , count(*) FROM customers AS t1 JOIN invoices AS t2 ON t2.customer_id = t1.id GROUP BY t1.id ORDER BY count(*) DESC LIMIT 1;",
        "schema": "CREATE TABLE customers (last_name TEXT, id NUMBER, first_name TEXT); CREATE TABLE invoices (total NUMBER, customer_id NUMBER, id NUMBER);"
      },
      {
        "question": "How about the top 10!",
        "query": "SELECT t1.first_name , t1.last_name , count(*) FROM customers AS t1 JOIN invoices AS t2 ON t2.customer_id = t1.id GROUP BY t1.id ORDER BY count(*) DESC LIMIT 10;",
        "schema": "CREATE TABLE invoices (id NUMBER, total NUMBER, customer_id NUMBER); CREATE TABLE customers (id NUMBER, first_name TEXT, last_name TEXT);"
      }
    ],
    [
      {
        "question": "Show all the customer ids, and names!",
        "query": "SELECT id, first_name, last_name FROM customers",
        "schema": "CREATE TABLE artists (name TEXT, id NUMBER); CREATE TABLE customers (id NUMBER, first_name TEXT, last_name TEXT, support_rep_id NUMBER); CREATE TABLE albums (title TEXT); CREATE TABLE employees (first_name TEXT, last_name TEXT); CREATE TABLE tracks (name TEXT); CREATE TABLE invoices (customer_id NUMBER, id NUMBER);"
      },
      {
        "question": "How any invoices do each of them have?",
        "query": "SELECT t1.id, t1.first_name , t1.last_name , count(*) FROM customers AS t1 JOIN invoices AS t2 ON t2.customer_id = t1.id GROUP BY t1.id;",
        "schema": "CREATE TABLE artists (id NUMBER, name TEXT); CREATE TABLE invoice_lines (invoice_id NUMBER); CREATE TABLE albums (title TEXT); CREATE TABLE tracks (name TEXT); CREATE TABLE customers (last_name TEXT, first_name TEXT, id NUMBER, support_rep_id NUMBER); CREATE TABLE invoices (total NUMBER, customer_id NUMBER, id NUMBER); CREATE TABLE employees (last_name TEXT, first_name TEXT);"
      },
      {
        "question": "What are their total gross sales?",
        "query": "SELECT t1.id, t1.first_name , t1.last_name , count(*), sum(t2.total) FROM customers AS t1 JOIN invoices AS t2 ON t2.customer_id = t1.id GROUP BY t1.id;",
        "schema": "CREATE TABLE tracks (name TEXT); CREATE TABLE employees (first_name TEXT, last_name TEXT); CREATE TABLE invoices (total NUMBER, id NUMBER, customer_id NUMBER); CREATE TABLE customers (support_rep_id NUMBER, last_name TEXT, first_name TEXT, id NUMBER); CREATE TABLE invoice_lines (unit_price NUMBER, invoice_id NUMBER, quantity NUMBER); CREATE TABLE albums (title TEXT); CREATE TABLE artists (id NUMBER, name TEXT);"
      },
      {
        "question": "Show just the names of the customers, and their total gross sales for the top 10 in gross sales!",
        "query": "SELECT t1.first_name , t1.last_name , sum(t2.total) FROM customers AS t1 JOIN invoices AS t2 ON t2.customer_id = t1.id GROUP BY t1.id ORDER BY sum(t2.total) DESC LIMIT 10;",
        "schema": "CREATE TABLE albums (title TEXT); CREATE TABLE tracks (name TEXT); CREATE TABLE invoices (id NUMBER, total NUMBER, customer_id NUMBER); CREATE TABLE customers (id NUMBER, first_name TEXT, last_name TEXT, support_rep_id NUMBER); CREATE TABLE employees (last_name TEXT, first_name TEXT); CREATE TABLE artists (id NUMBER, name TEXT); CREATE TABLE invoice_lines (unit_price NUMBER, invoice_id NUMBER, quantity NUMBER);"
      }
    ],
    [
      {
        "question": "How many tracks are there?",
        "query": "SELECT count(*) FROM tracks",
        "schema": "CREATE TABLE playlist_tracks (track_id NUMBER); CREATE TABLE invoices (id NUMBER); CREATE TABLE customers (id NUMBER); CREATE TABLE employees (id NUMBER); CREATE TABLE invoice_lines (track_id NUMBER); CREATE TABLE tracks (genre_id NUMBER, composer TEXT, milliseconds NUMBER, name TEXT, bytes NUMBER, id NUMBER, album_id NUMBER); CREATE TABLE albums (id NUMBER); CREATE TABLE genres (id NUMBER);"
      },
      {
        "question": "What are the names, composers, and genre names of each?",
        "query": "SELECT t2.name, t2.composer, t1.name FROM genres AS t1 JOIN tracks AS t2 ON t2.genre_id = t1.id;",
        "schema": "CREATE TABLE genres (id NUMBER, name TEXT); CREATE TABLE albums (id NUMBER); CREATE TABLE employees (id NUMBER); CREATE TABLE playlist_tracks (track_id NUMBER); CREATE TABLE invoices (id NUMBER); CREATE TABLE customers (id NUMBER); CREATE TABLE invoice_lines (track_id NUMBER); CREATE TABLE tracks (genre_id NUMBER, album_id NUMBER, id NUMBER, composer TEXT, name TEXT, bytes NUMBER, milliseconds NUMBER);"
      },
      {
        "question": "Show how many tracks there are per genre!",
        "query": "SELECT t1.name , count(*) FROM genres AS t1 JOIN tracks AS t2 ON t2.genre_id = t1.id GROUP BY t1.id;",
        "schema": "CREATE TABLE playlist_tracks (track_id NUMBER); CREATE TABLE tracks (bytes NUMBER, milliseconds NUMBER, album_id NUMBER, genre_id NUMBER, composer TEXT, name TEXT, id NUMBER); CREATE TABLE albums (id NUMBER); CREATE TABLE invoices (id NUMBER); CREATE TABLE genres (id NUMBER, name TEXT); CREATE TABLE employees (id NUMBER); CREATE TABLE invoice_lines (track_id NUMBER); CREATE TABLE customers (id NUMBER);"
      },
      {
        "question": "Show the genre names, and number of tracks of the top 5 by number of tracks!",
        "query": "SELECT t1.name , count(*) FROM genres AS t1 JOIN tracks AS t2 ON t2.genre_id = t1.id GROUP BY t1.id ORDER BY count(*) DESC LIMIT 5;",
        "schema": "CREATE TABLE employees (id NUMBER); CREATE TABLE albums (id NUMBER); CREATE TABLE invoice_lines (track_id NUMBER); CREATE TABLE playlist_tracks (track_id NUMBER); CREATE TABLE tracks (bytes NUMBER, name TEXT, composer TEXT, genre_id NUMBER, id NUMBER, milliseconds NUMBER, album_id NUMBER); CREATE TABLE genres (id NUMBER, name TEXT); CREATE TABLE invoices (id NUMBER); CREATE TABLE customers (id NUMBER);"
      }
    ],
    [
      {
        "question": "What are all the albums titles?",
        "query": "SELECT title FROM albums",
        "schema": "CREATE TABLE tracks (album_id NUMBER, id NUMBER, name TEXT); CREATE TABLE albums (id NUMBER, title TEXT);"
      },
      {
        "question": "Which ones start with A?",
        "query": "SELECT title FROM albums WHERE title LIKE 'A%'",
        "schema": "CREATE TABLE albums (title TEXT, id NUMBER); CREATE TABLE tracks (album_id NUMBER, id NUMBER, name TEXT);"
      },
      {
        "question": "Can you order them in alphabetical order?",
        "query": "SELECT title FROM albums WHERE title LIKE 'A%' ORDER BY title;",
        "schema": "CREATE TABLE albums (title TEXT, id NUMBER); CREATE TABLE tracks (name TEXT, album_id NUMBER, id NUMBER);"
      }
    ],
    [
      {
        "question": "What are the invoices of each customer?",
        "query": "SELECT *, t2.total FROM customers AS t1 JOIN invoices AS t2 ON t2.customer_id = t1.id;",
        "schema": "CREATE TABLE customers (last_name TEXT, first_name TEXT, support_rep_id NUMBER, id NUMBER); CREATE TABLE invoices (total NUMBER, customer_id NUMBER, id NUMBER); CREATE TABLE invoice_lines (invoice_id NUMBER);"
      },
      {
        "question": "Show me the names of the customers with the top 15 totals!",
        "query": "SELECT t1.first_name , t1.last_name FROM customers AS t1 JOIN invoices AS t2 ON t2.customer_id = t1.id ORDER BY total DESC LIMIT 15;",
        "schema": "CREATE TABLE invoice_lines (invoice_id NUMBER); CREATE TABLE invoices (customer_id NUMBER, total NUMBER, id NUMBER); CREATE TABLE customers (first_name TEXT, id NUMBER, last_name TEXT, support_rep_id NUMBER);"
      },
      {
        "question": "How about the bottom 15!",
        "query": "SELECT t1.first_name , t1.last_name FROM customers AS t1 JOIN invoices AS t2 ON t2.customer_id = t1.id ORDER BY total LIMIT 15;",
        "schema": "CREATE TABLE invoices (total NUMBER, id NUMBER, customer_id NUMBER); CREATE TABLE invoice_lines (invoice_id NUMBER); CREATE TABLE customers (id NUMBER, first_name TEXT, last_name TEXT, support_rep_id NUMBER);"
      },
      {
        "question": "How about the bottom 10!",
        "query": "SELECT t1.first_name , t1.last_name FROM customers AS t1 JOIN invoices AS t2 ON t2.customer_id = t1.id ORDER BY total LIMIT 10;",
        "schema": "CREATE TABLE invoices (id NUMBER, customer_id NUMBER, total NUMBER); CREATE TABLE invoice_lines (invoice_id NUMBER); CREATE TABLE customers (first_name TEXT, support_rep_id NUMBER, id NUMBER, last_name TEXT);"
      }
    ],
    [
      {
        "question": "What are the different cities, and states that have invoices?",
        "query": "SELECT DISTINCT billing_city, billing_state FROM invoices;",
        "schema": "CREATE TABLE employees (city TEXT, state TEXT); CREATE TABLE customers (city TEXT, state TEXT); CREATE TABLE invoices (billing_address TEXT, billing_state TEXT, id NUMBER, billing_city TEXT, billing_country TEXT);"
      },
      {
        "question": "What are the number of invoices for each city and state?",
        "query": "SELECT billing_city, billing_state, count(*) FROM invoices GROUP BY billing_city, billing_state;",
        "schema": "CREATE TABLE customers (state TEXT, city TEXT); CREATE TABLE invoices (billing_city TEXT, billing_address TEXT, billing_state TEXT, id NUMBER, billing_country TEXT, total NUMBER); CREATE TABLE employees (state TEXT, city TEXT);"
      },
      {
        "question": "Also provide the total invoice!",
        "query": "SELECT billing_city, billing_state, count(*), sum(total) FROM invoices GROUP BY billing_city, billing_state;",
        "schema": "CREATE TABLE invoices (billing_address TEXT, billing_country TEXT, total NUMBER, billing_state TEXT, billing_city TEXT, id NUMBER); CREATE TABLE invoice_lines (invoice_id NUMBER); CREATE TABLE customers (city TEXT, state TEXT); CREATE TABLE employees (city TEXT, state TEXT);"
      },
      {
        "question": "Can you how just the total invoice for the city Chicago in state IL?",
        "query": "SELECT sum(total) FROM invoices WHERE billing_city = \"Chicago\" AND billing_state = \"IL\";",
        "schema": "CREATE TABLE employees (state TEXT, city TEXT); CREATE TABLE invoice_lines (invoice_id NUMBER); CREATE TABLE invoices (billing_address TEXT, billing_country TEXT, id NUMBER, billing_state TEXT, billing_city TEXT, total NUMBER); CREATE TABLE customers (state TEXT, city TEXT);"
      }
    ],
    [
      {
        "question": "Show all the invoices for the city Chicago in the state Illinois!",
        "query": "SELECT * FROM invoices WHERE billing_city = \"Chicago\" AND billing_state = \"IL\";",
        "schema": "CREATE TABLE invoice_lines (invoice_id NUMBER); CREATE TABLE customers (state TEXT, id NUMBER, city TEXT); CREATE TABLE tracks (id NUMBER); CREATE TABLE employees (state TEXT, city TEXT, id NUMBER); CREATE TABLE invoices (billing_country TEXT, id NUMBER, billing_city TEXT, billing_state TEXT, total NUMBER, billing_address TEXT, customer_id NUMBER);"
      },
      {
        "question": "What is the total invoice?",
        "query": "SELECT sum(total) FROM invoices WHERE billing_city = \"Chicago\" AND billing_state = \"IL\";",
        "schema": "CREATE TABLE employees (id NUMBER, city TEXT, state TEXT); CREATE TABLE tracks (id NUMBER); CREATE TABLE invoice_lines (invoice_id NUMBER, quantity NUMBER); CREATE TABLE invoices (billing_address TEXT, id NUMBER, total NUMBER, billing_state TEXT, billing_city TEXT, billing_country TEXT, customer_id NUMBER); CREATE TABLE customers (id NUMBER, city TEXT, state TEXT);"
      },
      {
        "question": "How about the number of different customers?",
        "query": "SELECT count(DISTINCT customer_id) FROM invoices WHERE billing_city = \"Chicago\" AND billing_state = \"IL\";",
        "schema": "CREATE TABLE invoice_lines (invoice_id NUMBER, quantity NUMBER); CREATE TABLE tracks (id NUMBER); CREATE TABLE invoices (billing_country TEXT, customer_id NUMBER, total NUMBER, id NUMBER, billing_city TEXT, billing_state TEXT, billing_address TEXT); CREATE TABLE customers (last_name TEXT, first_name TEXT, state TEXT, company TEXT, address TEXT, city TEXT, id NUMBER); CREATE TABLE employees (id NUMBER, state TEXT, city TEXT);"
      },
      {
        "question": "How about the number of invoices?",
        "query": "SELECT count(*) FROM invoices WHERE billing_city = \"Chicago\" AND billing_state = \"IL\";",
        "schema": "CREATE TABLE tracks (id NUMBER); CREATE TABLE invoice_lines (quantity NUMBER, invoice_id NUMBER); CREATE TABLE employees (id NUMBER, state TEXT, city TEXT); CREATE TABLE invoices (total NUMBER, customer_id NUMBER, billing_address TEXT, billing_city TEXT, billing_country TEXT, id NUMBER, billing_state TEXT); CREATE TABLE customers (address TEXT, company TEXT, state TEXT, city TEXT, id NUMBER, first_name TEXT, last_name TEXT);"
      }
    ],
    [
      {
        "question": "Show me all the ids, country and states for all the invoices!",
        "query": "SELECT id, billing_country, billing_state FROM invoices;",
        "schema": "CREATE TABLE invoices (billing_state TEXT, billing_country TEXT, total NUMBER, customer_id NUMBER, id NUMBER); CREATE TABLE tracks (id NUMBER); CREATE TABLE employees (country TEXT, state TEXT, id NUMBER); CREATE TABLE customers (state TEXT, country TEXT, id NUMBER); CREATE TABLE invoice_lines (invoice_id NUMBER, track_id NUMBER);"
      },
      {
        "question": "Show me only those from the US?",
        "query": "SELECT id, billing_country, billing_state FROM invoices WHERE billing_country = \"USA\";",
        "schema": "CREATE TABLE invoice_lines (invoice_id NUMBER, track_id NUMBER); CREATE TABLE employees (state TEXT, country TEXT, id NUMBER); CREATE TABLE invoices (total NUMBER, id NUMBER, billing_country TEXT, customer_id NUMBER, billing_state TEXT); CREATE TABLE customers (id NUMBER, state TEXT, country TEXT); CREATE TABLE tracks (id NUMBER);"
      },
      {
        "question": "What are the different states these comes from?",
        "query": "SELECT DISTINCT billing_state FROM invoices WHERE billing_country = \"USA\";",
        "schema": "CREATE TABLE invoices (id NUMBER, billing_country TEXT, customer_id NUMBER, billing_state TEXT, total NUMBER); CREATE TABLE tracks (id NUMBER); CREATE TABLE invoice_lines (track_id NUMBER, invoice_id NUMBER); CREATE TABLE employees (state TEXT, id NUMBER, country TEXT); CREATE TABLE customers (id NUMBER, country TEXT, state TEXT);"
      },
      {
        "question": "How many USA invoices are from each of them!",
        "query": "SELECT billing_state, count(*) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state;",
        "schema": "CREATE TABLE employees (state TEXT, country TEXT, id NUMBER); CREATE TABLE invoice_lines (invoice_id NUMBER, track_id NUMBER); CREATE TABLE tracks (id NUMBER); CREATE TABLE customers (country TEXT, state TEXT, id NUMBER); CREATE TABLE invoices (total NUMBER, billing_country TEXT, customer_id NUMBER, id NUMBER, billing_state TEXT);"
      }
    ],
    [
      {
        "question": "What are the different states in the US that have invoices?",
        "query": "SELECT DISTINCT billing_state FROM invoices WHERE billing_country = \"USA\";",
        "schema": "CREATE TABLE employees (state TEXT); CREATE TABLE customers (state TEXT); CREATE TABLE invoices (billing_country TEXT, billing_address TEXT, id NUMBER, billing_state TEXT);"
      },
      {
        "question": "Which one has the least number of invoices?",
        "query": "SELECT billing_state , count(*) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state ORDER BY count(*) ASC LIMIT 1;",
        "schema": "CREATE TABLE customers (state TEXT); CREATE TABLE employees (state TEXT); CREATE TABLE invoices (billing_country TEXT, billing_state TEXT, id NUMBER, total NUMBER, billing_address TEXT);"
      },
      {
        "question": "How about the most?",
        "query": "SELECT billing_state , count(*) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state ORDER BY count(*) DESC LIMIT 1;",
        "schema": "CREATE TABLE invoices (id NUMBER, billing_country TEXT, total NUMBER, billing_state TEXT, billing_address TEXT); CREATE TABLE invoice_lines (quantity NUMBER); CREATE TABLE employees (state TEXT); CREATE TABLE customers (state TEXT);"
      }
    ],
    [
      {
        "question": "Show me all the information about the invoices in California!",
        "query": "SELECT * FROM invoices WHERE billing_state = \"CA\";",
        "schema": "CREATE TABLE employees (id NUMBER, state TEXT, country TEXT); CREATE TABLE invoices (billing_address TEXT, total NUMBER, billing_city TEXT, id NUMBER, billing_state TEXT, billing_postal_code TEXT, billing_country TEXT, customer_id NUMBER); CREATE TABLE invoice_lines (invoice_id NUMBER, track_id NUMBER); CREATE TABLE tracks (id NUMBER); CREATE TABLE customers (id NUMBER, country TEXT, state TEXT, city TEXT);"
      },
      {
        "question": "Actually just show the billing_state, billing_city, and billing_country.",
        "query": "SELECT billing_state, billing_city, billing_country FROM invoices WHERE billing_state = \"CA\";",
        "schema": "CREATE TABLE employees (state TEXT, id NUMBER, country TEXT); CREATE TABLE invoices (billing_state TEXT, billing_postal_code TEXT, billing_city TEXT, id NUMBER, customer_id NUMBER, billing_address TEXT, billing_country TEXT, total NUMBER); CREATE TABLE customers (id NUMBER, country TEXT, city TEXT, state TEXT); CREATE TABLE tracks (id NUMBER); CREATE TABLE invoice_lines (track_id NUMBER, invoice_id NUMBER);"
      },
      {
        "question": "Can you show the billing_state and the total invoice of these?",
        "query": "SELECT billing_state, sum(total) FROM invoices WHERE billing_state = \"CA\";",
        "schema": "CREATE TABLE tracks (id NUMBER); CREATE TABLE employees (id NUMBER, state TEXT, country TEXT); CREATE TABLE invoices (customer_id NUMBER, billing_postal_code TEXT, billing_address TEXT, billing_country TEXT, billing_city TEXT, total NUMBER, id NUMBER, billing_state TEXT); CREATE TABLE invoice_lines (track_id NUMBER, invoice_id NUMBER); CREATE TABLE customers (id NUMBER, city TEXT, country TEXT, state TEXT);"
      },
      {
        "question": "Also provide the number of invoices.",
        "query": "SELECT billing_state, count(*) , sum(total) FROM invoices WHERE billing_state = \"CA\";",
        "schema": "CREATE TABLE customers (id NUMBER, city TEXT, state TEXT, country TEXT); CREATE TABLE invoice_lines (track_id NUMBER, invoice_id NUMBER); CREATE TABLE invoices (billing_city TEXT, billing_address TEXT, billing_country TEXT, billing_state TEXT, id NUMBER, customer_id NUMBER, billing_postal_code TEXT, total NUMBER); CREATE TABLE tracks (id NUMBER); CREATE TABLE employees (country TEXT, id NUMBER, state TEXT);"
      }
    ],
    [
      {
        "question": "How many different albums are there?",
        "query": "SELECT count(*) FROM albums;",
        "schema": "CREATE TABLE customers (id NUMBER); CREATE TABLE tracks (id NUMBER, genre_id NUMBER, album_id NUMBER); CREATE TABLE employees (id NUMBER, last_name TEXT); CREATE TABLE artists (id NUMBER); CREATE TABLE albums (id NUMBER, title TEXT, artist_id NUMBER); CREATE TABLE genres (id NUMBER);"
      },
      {
        "question": "What are the titles of the albums?",
        "query": "SELECT title FROM albums;",
        "schema": "CREATE TABLE employees (id NUMBER, last_name TEXT); CREATE TABLE genres (id NUMBER); CREATE TABLE playlist_tracks (playlist_id NUMBER); CREATE TABLE customers (id NUMBER); CREATE TABLE tracks (name TEXT, genre_id NUMBER, id NUMBER, album_id NUMBER); CREATE TABLE artists (id NUMBER); CREATE TABLE albums (artist_id NUMBER, title TEXT, id NUMBER);"
      },
      {
        "question": "What are the names of the artists for each!",
        "query": "SELECT t1.title, t2.name FROM albums AS t1 JOIN artists AS t2 ON t1.artist_id = t2.id;",
        "schema": "CREATE TABLE employees (last_name TEXT, id NUMBER); CREATE TABLE artists (id NUMBER, name TEXT); CREATE TABLE playlist_tracks (playlist_id NUMBER); CREATE TABLE customers (id NUMBER); CREATE TABLE tracks (genre_id NUMBER, name TEXT, album_id NUMBER, id NUMBER); CREATE TABLE albums (id NUMBER, artist_id NUMBER, title TEXT); CREATE TABLE genres (id NUMBER);"
      },
      {
        "question": "Show me only the album titles by the artist named Aerosmith!",
        "query": "SELECT t1.title FROM albums AS t1 JOIN artists AS t2 ON t1.artist_id = t2.id WHERE t2.name = \"Aerosmith\";",
        "schema": "CREATE TABLE tracks (genre_id NUMBER, id NUMBER, album_id NUMBER, name TEXT); CREATE TABLE employees (last_name TEXT, id NUMBER); CREATE TABLE albums (artist_id NUMBER, title TEXT, id NUMBER); CREATE TABLE customers (id NUMBER); CREATE TABLE artists (name TEXT, id NUMBER); CREATE TABLE genres (id NUMBER); CREATE TABLE playlist_tracks (playlist_id NUMBER);"
      }
    ],
    [
      {
        "question": "How many albums are there?",
        "query": "SELECT count(*) FROM albums",
        "schema": "CREATE TABLE genres (id NUMBER); CREATE TABLE albums (title TEXT, artist_id NUMBER, id NUMBER); CREATE TABLE tracks (id NUMBER, album_id NUMBER); CREATE TABLE customers (first_name TEXT, id NUMBER, support_rep_id NUMBER, last_name TEXT); CREATE TABLE artists (id NUMBER, name TEXT); CREATE TABLE employees (id NUMBER, last_name TEXT);"
      },
      {
        "question": "What are they?",
        "query": "SELECT * FROM albums",
        "schema": "CREATE TABLE tracks (name TEXT, id NUMBER, album_id NUMBER, genre_id NUMBER); CREATE TABLE artists (id NUMBER, name TEXT); CREATE TABLE albums (artist_id NUMBER, id NUMBER, title TEXT); CREATE TABLE customers (last_name TEXT, first_name TEXT, support_rep_id NUMBER, id NUMBER); CREATE TABLE genres (id NUMBER); CREATE TABLE employees (id NUMBER, last_name TEXT);"
      },
      {
        "question": "Which ones are made by Billy Cobham?",
        "query": "SELECT * FROM albums AS t1 JOIN artists AS t2 ON t1.artist_id = t2.id WHERE t2.name = \"Billy Cobham\";",
        "schema": "CREATE TABLE employees (title TEXT, last_name TEXT, first_name TEXT, id NUMBER); CREATE TABLE artists (name TEXT, id NUMBER); CREATE TABLE genres (id NUMBER); CREATE TABLE albums (title TEXT, id NUMBER, artist_id NUMBER); CREATE TABLE tracks (name TEXT, genre_id NUMBER, composer TEXT, album_id NUMBER, id NUMBER); CREATE TABLE customers (id NUMBER, last_name TEXT, first_name TEXT, support_rep_id NUMBER);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT count(*) FROM albums AS t1 JOIN artists AS t2 ON t1.artist_id = t2.id WHERE t2.name = \"Billy Cobham\";",
        "schema": "CREATE TABLE customers (support_rep_id NUMBER, last_name TEXT, id NUMBER, first_name TEXT); CREATE TABLE albums (id NUMBER, artist_id NUMBER, title TEXT); CREATE TABLE genres (id NUMBER); CREATE TABLE tracks (id NUMBER, composer TEXT, name TEXT, genre_id NUMBER, album_id NUMBER); CREATE TABLE artists (name TEXT, id NUMBER); CREATE TABLE employees (first_name TEXT, id NUMBER, title TEXT, last_name TEXT);"
      }
    ],
    [
      {
        "question": "How many customers have the first name Eduardo and last name Martins?",
        "query": "SELECT count(*) FROM customers WHERE first_name = \"Eduardo\" AND last_name = \"Martins\";",
        "schema": "CREATE TABLE invoices (customer_id NUMBER); CREATE TABLE customers (first_name TEXT, id NUMBER, last_name TEXT);"
      },
      {
        "question": "Show me all his customer information!",
        "query": "SELECT * FROM customers WHERE first_name = \"Eduardo\" AND last_name = \"Martins\";",
        "schema": "CREATE TABLE invoices (customer_id NUMBER); CREATE TABLE customers (id NUMBER, last_name TEXT, first_name TEXT);"
      },
      {
        "question": "Just show the company!",
        "query": "SELECT company FROM customers WHERE first_name = \"Eduardo\" AND last_name = \"Martins\";",
        "schema": "CREATE TABLE invoices (customer_id NUMBER); CREATE TABLE customers (first_name TEXT, company TEXT, id NUMBER, last_name TEXT);"
      }
    ],
    [
      {
        "question": "Show me the id of customer with first name Astrid, and last name Gruber!",
        "query": "SELECT id FROM customers WHERE first_name = \"Astrid\" AND last_name = \"Gruber\";",
        "schema": "CREATE TABLE customers (support_rep_id NUMBER, last_name TEXT, id NUMBER, first_name TEXT); CREATE TABLE invoices (customer_id NUMBER, id NUMBER);"
      },
      {
        "question": "What is her address?",
        "query": "SELECT address FROM customers WHERE first_name = \"Astrid\" AND last_name = \"Gruber\";",
        "schema": "CREATE TABLE invoices (id NUMBER, customer_id NUMBER, billing_address TEXT); CREATE TABLE customers (address TEXT, id NUMBER, first_name TEXT, last_name TEXT, support_rep_id NUMBER);"
      },
      {
        "question": "How about her company?",
        "query": "SELECT company FROM customers WHERE first_name = \"Astrid\" AND last_name = \"Gruber\";",
        "schema": "CREATE TABLE invoices (id NUMBER, billing_address TEXT, customer_id NUMBER); CREATE TABLE customers (address TEXT, id NUMBER, last_name TEXT, support_rep_id NUMBER, company TEXT, first_name TEXT);"
      },
      {
        "question": "Just show me her email and phone number?",
        "query": "SELECT email , phone FROM customers WHERE first_name = \"Astrid\" AND last_name = \"Gruber\";",
        "schema": "CREATE TABLE invoices (id NUMBER, billing_address TEXT, customer_id NUMBER); CREATE TABLE customers (first_name TEXT, company TEXT, support_rep_id NUMBER, address TEXT, phone TEXT, email TEXT, id NUMBER, last_name TEXT); CREATE TABLE employees (phone TEXT);"
      }
    ],
    [
      {
        "question": "How many different countries are the customers from?",
        "query": "SELECT count(DISTINCT country) FROM customers;",
        "schema": "CREATE TABLE customers (city TEXT, company TEXT, address TEXT, id NUMBER, last_name TEXT, state TEXT, country TEXT); CREATE TABLE invoices (billing_country TEXT, customer_id NUMBER);"
      },
      {
        "question": "What are they?",
        "query": "SELECT DISTINCT country FROM customers;",
        "schema": "CREATE TABLE customers (address TEXT, last_name TEXT, id NUMBER, country TEXT, city TEXT, first_name TEXT, company TEXT, state TEXT); CREATE TABLE invoices (customer_id NUMBER, billing_country TEXT);"
      },
      {
        "question": "Show the customer names for each!",
        "query": "SELECT country, first_name, last_name FROM customers;",
        "schema": "CREATE TABLE customers (id NUMBER, city TEXT, address TEXT, country TEXT, state TEXT, first_name TEXT, company TEXT, last_name TEXT); CREATE TABLE invoices (billing_country TEXT, customer_id NUMBER);"
      },
      {
        "question": "Which country has name Roberto Almeida?",
        "query": "SELECT country FROM customers WHERE first_name = \"Roberto\" AND last_name = \"Almeida\";",
        "schema": "CREATE TABLE invoices (billing_country TEXT, customer_id NUMBER); CREATE TABLE customers (first_name TEXT, state TEXT, last_name TEXT, city TEXT, company TEXT, address TEXT, id NUMBER, country TEXT);"
      }
    ],
    [
      {
        "question": "How many different artists are there?",
        "query": "SELECT count(*) FROM artists",
        "schema": "CREATE TABLE artists (id NUMBER, name TEXT); CREATE TABLE tracks (album_id NUMBER, id NUMBER); CREATE TABLE customers (id NUMBER); CREATE TABLE albums (title TEXT, id NUMBER, artist_id NUMBER);"
      },
      {
        "question": "What are their names?",
        "query": "SELECT name FROM artists",
        "schema": "CREATE TABLE customers (last_name TEXT, first_name TEXT, id NUMBER); CREATE TABLE artists (name TEXT, id NUMBER); CREATE TABLE albums (title TEXT, artist_id NUMBER, id NUMBER); CREATE TABLE tracks (name TEXT, id NUMBER, album_id NUMBER);"
      },
      {
        "question": "Show all the album titles for the one named Led!",
        "query": "SELECT t2.title FROM artists AS t1 JOIN albums AS t2 ON t1.id = t2.artist_id WHERE t1.name LIKE '%Led%'",
        "schema": "CREATE TABLE albums (id NUMBER, title TEXT, artist_id NUMBER); CREATE TABLE artists (name TEXT, id NUMBER); CREATE TABLE customers (last_name TEXT, id NUMBER, first_name TEXT); CREATE TABLE tracks (name TEXT, id NUMBER, album_id NUMBER);"
      }
    ],
    [
      {
        "question": "What is the title of the employee with first name Steve and last name Johnson?",
        "query": "SELECT title FROM employees WHERE first_name = \"Steve\" AND last_name = \"Johnson\";",
        "schema": "CREATE TABLE employees (id NUMBER, last_name TEXT, title TEXT, first_name TEXT, reports_to NUMBER);"
      },
      {
        "question": "Who does he report to?",
        "query": "SELECT t2.first_name, t2.last_name FROM employees AS t1 JOIN employees AS t2 ON t1.reports_to = t2.id WHERE t1.first_name = \"Steve\" AND t1.last_name = \"Johnson\";",
        "schema": "CREATE TABLE employees (title TEXT, email TEXT, last_name TEXT, id NUMBER, first_name TEXT, reports_to NUMBER);"
      },
      {
        "question": "What customers does he support?",
        "query": "SELECT t2.first_name, t2.last_name FROM employees AS t1 JOIN customers AS t2 ON t2.support_rep_id = t1.id WHERE t1.first_name = \"Steve\" AND t1.last_name = \"Johnson\";",
        "schema": "CREATE TABLE invoices (customer_id NUMBER); CREATE TABLE customers (id NUMBER, last_name TEXT, support_rep_id NUMBER, company TEXT, first_name TEXT, phone TEXT); CREATE TABLE employees (first_name TEXT, title TEXT, reports_to NUMBER, email TEXT, last_name TEXT, id NUMBER);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT count(*) FROM employees AS t1 JOIN customers AS t2 ON t2.support_rep_id = t1.id WHERE t1.first_name = \"Steve\" AND t1.last_name = \"Johnson\";",
        "schema": "CREATE TABLE customers (id NUMBER, last_name TEXT, company TEXT, first_name TEXT, phone TEXT, support_rep_id NUMBER); CREATE TABLE employees (email TEXT, first_name TEXT, id NUMBER, reports_to NUMBER, title TEXT, last_name TEXT); CREATE TABLE invoices (customer_id NUMBER);"
      }
    ],
    [
      {
        "question": "Tell me the phone number and email of employee named Nancy Edwards?",
        "query": "SELECT phone , email FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";",
        "schema": "CREATE TABLE customers (phone TEXT, email TEXT); CREATE TABLE employees (id NUMBER, phone TEXT, address TEXT, first_name TEXT, title TEXT, reports_to NUMBER, last_name TEXT, email TEXT);"
      },
      {
        "question": "What is her birth date?",
        "query": "SELECT birth_date FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";",
        "schema": "CREATE TABLE customers (phone TEXT, email TEXT); CREATE TABLE employees (first_name TEXT, hire_date TIME, email TEXT, birth_date TIME, id NUMBER, phone TEXT, title TEXT, reports_to NUMBER, last_name TEXT, address TEXT);"
      },
      {
        "question": "How about her address?",
        "query": "SELECT address FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";",
        "schema": "CREATE TABLE customers (email TEXT, phone TEXT); CREATE TABLE employees (reports_to NUMBER, title TEXT, first_name TEXT, birth_date TIME, id NUMBER, hire_date TIME, email TEXT, phone TEXT, address TEXT, last_name TEXT);"
      },
      {
        "question": "Show her title, phone number, and hire date!",
        "query": "SELECT title , phone , hire_date FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";",
        "schema": "CREATE TABLE employees (hire_date TIME, last_name TEXT, title TEXT, reports_to NUMBER, address TEXT, first_name TEXT, phone TEXT, birth_date TIME, email TEXT, id NUMBER); CREATE TABLE customers (phone TEXT, email TEXT);"
      }
    ],
    [
      {
        "question": "What is the title of Nancy Edwards?",
        "query": "SELECT title FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";",
        "schema": "CREATE TABLE employees (first_name TEXT, id NUMBER, title TEXT, last_name TEXT, reports_to NUMBER); CREATE TABLE tracks (name TEXT); CREATE TABLE albums (artist_id NUMBER, title TEXT); CREATE TABLE customers (first_name TEXT, last_name TEXT, id NUMBER); CREATE TABLE artists (name TEXT, id NUMBER);"
      },
      {
        "question": "Who does she report to?",
        "query": "SELECT t2.first_name, t2.last_name FROM employees AS t1 JOIN employees AS t2 ON t1.reports_to = t2.id WHERE t1.first_name = \"Nancy\" AND t1.last_name = \"Edwards\";",
        "schema": "CREATE TABLE employees (first_name TEXT, title TEXT, id NUMBER, reports_to NUMBER, email TEXT, last_name TEXT); CREATE TABLE tracks (name TEXT); CREATE TABLE artists (name TEXT, id NUMBER); CREATE TABLE albums (artist_id NUMBER, title TEXT); CREATE TABLE customers (id NUMBER, first_name TEXT, last_name TEXT);"
      },
      {
        "question": "How many report to her?",
        "query": "SELECT count(*) FROM employees AS t1 JOIN employees AS t2 ON t1.id = t2.reports_to WHERE t1.first_name = \"Nancy\" AND t1.last_name = \"Edwards\";",
        "schema": "CREATE TABLE artists (id NUMBER, name TEXT); CREATE TABLE tracks (name TEXT); CREATE TABLE employees (first_name TEXT, email TEXT, title TEXT, last_name TEXT, id NUMBER, reports_to NUMBER); CREATE TABLE customers (first_name TEXT, id NUMBER, last_name TEXT); CREATE TABLE albums (title TEXT, artist_id NUMBER);"
      },
      {
        "question": "What are their names?",
        "query": "SELECT t2.first_name , t2.last_name FROM employees AS t1 JOIN employees AS t2 ON t1.id = t2.reports_to WHERE t1.first_name = \"Nancy\" AND t1.last_name = \"Edwards\";",
        "schema": "CREATE TABLE customers (first_name TEXT, last_name TEXT, id NUMBER); CREATE TABLE artists (id NUMBER, name TEXT); CREATE TABLE employees (first_name TEXT, email TEXT, title TEXT, id NUMBER, last_name TEXT, reports_to NUMBER); CREATE TABLE tracks (name TEXT); CREATE TABLE albums (title TEXT, artist_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show all the employee ids and addresses!",
        "query": "SELECT id, address FROM employees;",
        "schema": "CREATE TABLE employees (reports_to NUMBER, state TEXT, address TEXT, id NUMBER, postal_code TEXT, last_name TEXT, first_name TEXT, city TEXT, country TEXT, title TEXT); CREATE TABLE invoices (id NUMBER, billing_address TEXT); CREATE TABLE customers (id NUMBER, address TEXT); CREATE TABLE tracks (id NUMBER, name TEXT);"
      },
      {
        "question": "Order by country, state, and city!",
        "query": "SELECT id, address FROM employees ORDER BY country, state, city;",
        "schema": "CREATE TABLE employees (address TEXT, first_name TEXT, reports_to NUMBER, postal_code TEXT, title TEXT, id NUMBER, country TEXT, city TEXT, state TEXT, last_name TEXT); CREATE TABLE customers (id NUMBER, address TEXT); CREATE TABLE invoices (billing_city TEXT, billing_country TEXT, billing_address TEXT, id NUMBER); CREATE TABLE tracks (id NUMBER, name TEXT);"
      },
      {
        "question": "Also provide employee name!",
        "query": "SELECT first_name, last_name, id, address FROM employees ORDER BY country, state, city;",
        "schema": "CREATE TABLE invoices (id NUMBER, billing_city TEXT, billing_country TEXT, billing_address TEXT); CREATE TABLE employees (last_name TEXT, id NUMBER, postal_code TEXT, title TEXT, address TEXT, city TEXT, reports_to NUMBER, country TEXT, state TEXT, first_name TEXT); CREATE TABLE customers (address TEXT, id NUMBER); CREATE TABLE tracks (id NUMBER, name TEXT);"
      },
      {
        "question": "Just show the address of customer named Nancy Edwards!",
        "query": "SELECT address FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";",
        "schema": "CREATE TABLE invoices (customer_id NUMBER, id NUMBER, billing_address TEXT, billing_country TEXT, billing_city TEXT); CREATE TABLE customers (id NUMBER, company TEXT, support_rep_id NUMBER, address TEXT, city TEXT, last_name TEXT, state TEXT, first_name TEXT, country TEXT); CREATE TABLE tracks (name TEXT, id NUMBER); CREATE TABLE employees (postal_code TEXT, city TEXT, first_name TEXT, title TEXT, state TEXT, reports_to NUMBER, country TEXT, last_name TEXT, id NUMBER, address TEXT);"
      }
    ],
    [
      {
        "question": "Who are the employees that actually support customers?",
        "query": "SELECT t1.first_name, t2.last_name FROM employees AS t1 JOIN customers AS t2 ON t1.id = t2.support_rep_id",
        "schema": "CREATE TABLE invoices (customer_id NUMBER); CREATE TABLE customers (support_rep_id NUMBER, first_name TEXT, company TEXT, last_name TEXT, id NUMBER); CREATE TABLE employees (reports_to NUMBER, phone TEXT, state TEXT, title TEXT, last_name TEXT, id NUMBER, first_name TEXT);"
      },
      {
        "question": "How about the most?",
        "query": "SELECT count(*) FROM employees AS t1 JOIN customers AS t2 ON t1.id = t2.support_rep_id GROUP BY t1.id ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE employees (last_name TEXT, state TEXT, title TEXT, first_name TEXT, id NUMBER, phone TEXT, reports_to NUMBER); CREATE TABLE invoices (customer_id NUMBER); CREATE TABLE customers (company TEXT, first_name TEXT, id NUMBER, support_rep_id NUMBER, last_name TEXT);"
      },
      {
        "question": "What is the name of the employee that supports this many!",
        "query": "SELECT t1.first_name , t1.last_name FROM employees AS t1 JOIN customers AS t2 ON t1.id = t2.support_rep_id GROUP BY t1.id ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE employees (reports_to NUMBER, last_name TEXT, state TEXT, phone TEXT, id NUMBER, title TEXT, first_name TEXT); CREATE TABLE customers (id NUMBER, last_name TEXT, first_name TEXT, support_rep_id NUMBER, company TEXT); CREATE TABLE invoices (customer_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show the employee information on employee with name Nancy Edwards!",
        "query": "SELECT * FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";",
        "schema": "CREATE TABLE employees (id NUMBER, title TEXT, reports_to NUMBER, last_name TEXT, first_name TEXT); CREATE TABLE tracks (id NUMBER, name TEXT); CREATE TABLE invoices (id NUMBER); CREATE TABLE artists (name TEXT);"
      },
      {
        "question": "Show just her email!",
        "query": "SELECT email FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";",
        "schema": "CREATE TABLE invoices (id NUMBER); CREATE TABLE artists (name TEXT); CREATE TABLE tracks (name TEXT, id NUMBER); CREATE TABLE employees (id NUMBER, last_name TEXT, reports_to NUMBER, email TEXT, first_name TEXT, title TEXT);"
      },
      {
        "question": "Actually show just her phone!",
        "query": "SELECT phone FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";",
        "schema": "CREATE TABLE invoices (id NUMBER); CREATE TABLE tracks (id NUMBER, name TEXT); CREATE TABLE customers (phone TEXT); CREATE TABLE employees (title TEXT, reports_to NUMBER, last_name TEXT, id NUMBER, email TEXT, first_name TEXT, phone TEXT); CREATE TABLE artists (name TEXT);"
      }
    ],
    [
      {
        "question": "Show all the employe information ordered by oldest to youngest!",
        "query": "SELECT * FROM employees ORDER BY birth_date ASC;",
        "schema": "CREATE TABLE customers (id NUMBER, first_name TEXT); CREATE TABLE tracks (milliseconds NUMBER); CREATE TABLE employees (first_name TEXT, reports_to NUMBER, hire_date TIME, title TEXT, id NUMBER, state TEXT, birth_date TIME, last_name TEXT);"
      },
      {
        "question": "Just show the birthdate of the oldest!",
        "query": "SELECT birth_date FROM employees ORDER BY birth_date ASC LIMIT 1;",
        "schema": "CREATE TABLE tracks (milliseconds NUMBER); CREATE TABLE customers (first_name TEXT, id NUMBER); CREATE TABLE employees (hire_date TIME, reports_to NUMBER, title TEXT, state TEXT, id NUMBER, last_name TEXT, birth_date TIME, first_name TEXT);"
      },
      {
        "question": "How about that of the youngest!",
        "query": "SELECT birth_date FROM employees ORDER BY birth_date DESC LIMIT 1;",
        "schema": "CREATE TABLE customers (first_name TEXT, id NUMBER); CREATE TABLE tracks (milliseconds NUMBER); CREATE TABLE employees (hire_date TIME, birth_date TIME, title TEXT, first_name TEXT, id NUMBER, last_name TEXT, state TEXT, reports_to NUMBER);"
      },
      {
        "question": "What is the youngest's name?",
        "query": "SELECT first_name , last_name FROM employees ORDER BY birth_date DESC LIMIT 1;",
        "schema": "CREATE TABLE customers (id NUMBER, first_name TEXT); CREATE TABLE tracks (milliseconds NUMBER); CREATE TABLE employees (id NUMBER, first_name TEXT, last_name TEXT, hire_date TIME, birth_date TIME, title TEXT, state TEXT, reports_to NUMBER);"
      }
    ],
    [
      {
        "question": "What is the name of the most recent employee?",
        "query": "SELECT first_name , last_name FROM employees ORDER BY hire_date ASC LIMIT 1;",
        "schema": "CREATE TABLE invoices (invoice_date TIME); CREATE TABLE employees (birth_date TIME, last_name TEXT, title TEXT, id NUMBER, first_name TEXT, hire_date TIME, reports_to NUMBER);"
      },
      {
        "question": "How about the first employee?",
        "query": "SELECT first_name , last_name FROM employees ORDER BY hire_date DESC LIMIT 1;",
        "schema": "CREATE TABLE invoices (invoice_date TIME); CREATE TABLE employees (id NUMBER, birth_date TIME, first_name TEXT, hire_date TIME, reports_to NUMBER, last_name TEXT, title TEXT);"
      },
      {
        "question": "How about the most recent 10 most recent employees?",
        "query": "SELECT first_name , last_name FROM employees ORDER BY hire_date DESC LIMIT 10;",
        "schema": "CREATE TABLE employees (first_name TEXT, last_name TEXT, hire_date TIME, title TEXT, birth_date TIME, reports_to NUMBER, id NUMBER); CREATE TABLE invoices (invoice_date TIME);"
      },
      {
        "question": "List first 10 employees!",
        "query": "SELECT first_name , last_name FROM employees ORDER BY hire_date ASC LIMIT 10;",
        "schema": "CREATE TABLE invoices (invoice_date TIME); CREATE TABLE employees (last_name TEXT, reports_to NUMBER, hire_date TIME, title TEXT, first_name TEXT, id NUMBER, birth_date TIME);"
      }
    ],
    [
      {
        "question": "Show all the different cities that employees are from.",
        "query": "SELECT DISTINCT city FROM employees",
        "schema": "CREATE TABLE customers (city TEXT); CREATE TABLE invoices (billing_city TEXT); CREATE TABLE employees (id NUMBER, title TEXT, reports_to NUMBER, state TEXT, last_name TEXT, country TEXT, address TEXT, first_name TEXT, city TEXT);"
      },
      {
        "question": "How many are from each one!",
        "query": "SELECT count(*) , city FROM employees GROUP BY city",
        "schema": "CREATE TABLE employees (address TEXT, title TEXT, state TEXT, last_name TEXT, reports_to NUMBER, country TEXT, city TEXT, first_name TEXT, id NUMBER); CREATE TABLE invoices (billing_city TEXT); CREATE TABLE customers (city TEXT);"
      },
      {
        "question": "How many are of the title Sales Support Agent?",
        "query": "SELECT count(*) , city FROM employees WHERE title = 'Sales Support Agent' GROUP BY city",
        "schema": "CREATE TABLE employees (id NUMBER, reports_to NUMBER, last_name TEXT, city TEXT, state TEXT, address TEXT, first_name TEXT, title TEXT, country TEXT); CREATE TABLE albums (title TEXT); CREATE TABLE customers (city TEXT); CREATE TABLE invoices (billing_city TEXT);"
      },
      {
        "question": "How about IT Staff?",
        "query": "SELECT count(*) , city FROM employees WHERE title = 'IT Staff' GROUP BY city",
        "schema": "CREATE TABLE albums (title TEXT); CREATE TABLE customers (city TEXT); CREATE TABLE invoices (billing_city TEXT); CREATE TABLE employees (country TEXT, last_name TEXT, address TEXT, reports_to NUMBER, title TEXT, id NUMBER, first_name TEXT, state TEXT, city TEXT);"
      }
    ],
    [
      {
        "question": "What are the name of the employees that do not manage any other employees?",
        "query": "SELECT first_name, last_name FROM employees WHERE id IN (SELECT id FROM employees EXCEPT SELECT reports_to FROM employees)",
        "schema": "CREATE TABLE employees (last_name TEXT, reports_to NUMBER, id NUMBER, title TEXT, first_name TEXT); CREATE TABLE artists (name TEXT); CREATE TABLE tracks (name TEXT, id NUMBER);"
      },
      {
        "question": "Show me all the names of all the others!",
        "query": "SELECT t2.first_name , t2.last_name , count(t1.reports_to) FROM employees AS t1 JOIN employees AS t2 ON t1.reports_to = t2.id;",
        "schema": "CREATE TABLE tracks (id NUMBER, name TEXT); CREATE TABLE employees (reports_to NUMBER, id NUMBER, last_name TEXT, first_name TEXT, title TEXT); CREATE TABLE artists (name TEXT);"
      },
      {
        "question": "Who manages the max number of people?",
        "query": "SELECT t2.first_name , t2.last_name FROM employees AS t1 JOIN employees AS t2 ON t1.reports_to = t2.id GROUP BY t1.reports_to ORDER BY count(t1.reports_to) DESC LIMIT 1;",
        "schema": "CREATE TABLE employees (reports_to NUMBER, last_name TEXT, first_name TEXT, title TEXT, id NUMBER); CREATE TABLE tracks (name TEXT, id NUMBER); CREATE TABLE artists (name TEXT);"
      },
      {
        "question": "Also provide the number of people managed!",
        "query": "SELECT t2.first_name , t2.last_name , count(t1.reports_to) FROM employees AS t1 JOIN employees AS t2 ON t1.reports_to = t2.id GROUP BY t1.reports_to ORDER BY count(t1.reports_to) DESC LIMIT 1;",
        "schema": "CREATE TABLE artists (name TEXT); CREATE TABLE employees (title TEXT, id NUMBER, reports_to NUMBER, first_name TEXT, last_name TEXT); CREATE TABLE tracks (id NUMBER, name TEXT);"
      }
    ],
    [
      {
        "question": "For all the invoices, show the invoice ids and customer ids!",
        "query": "SELECT id, customer_id FROM invoices;",
        "schema": "CREATE TABLE customers (id NUMBER, support_rep_id NUMBER, first_name TEXT, last_name TEXT); CREATE TABLE tracks (id NUMBER); CREATE TABLE invoices (customer_id NUMBER, total NUMBER, id NUMBER); CREATE TABLE invoice_lines (id NUMBER, invoice_id NUMBER);"
      },
      {
        "question": "How many have each customer ordered!",
        "query": "SELECT t1.id, count(*) FROM customers AS t1 JOIN invoices AS t2 ON t1.id = t2.customer_id GROUP BY t1.id;",
        "schema": "CREATE TABLE tracks (id NUMBER); CREATE TABLE customers (support_rep_id NUMBER, last_name TEXT, id NUMBER, first_name TEXT); CREATE TABLE invoice_lines (id NUMBER, invoice_id NUMBER); CREATE TABLE invoices (id NUMBER, total NUMBER, customer_id NUMBER);"
      },
      {
        "question": "Show their names for each!",
        "query": "SELECT t1.first_name, t1.last_name, t1.id, count(*) FROM customers AS t1 JOIN invoices AS t2 ON t1.id = t2.customer_id GROUP BY t1.id;",
        "schema": "CREATE TABLE invoices (total NUMBER, customer_id NUMBER, id NUMBER); CREATE TABLE customers (last_name TEXT, support_rep_id NUMBER, id NUMBER, first_name TEXT); CREATE TABLE tracks (name TEXT, id NUMBER); CREATE TABLE invoice_lines (invoice_id NUMBER, id NUMBER);"
      },
      {
        "question": "Show the number for customer named Lucas Mancini!",
        "query": "SELECT count(*) FROM customers AS t1 JOIN invoices AS t2 ON t1.id = t2.customer_id WHERE t1.first_name = \"Lucas\" AND t1.last_name = \"Mancini\";",
        "schema": "CREATE TABLE customers (id NUMBER, first_name TEXT, support_rep_id NUMBER, last_name TEXT); CREATE TABLE invoices (id NUMBER, customer_id NUMBER, total NUMBER); CREATE TABLE tracks (name TEXT, id NUMBER); CREATE TABLE invoice_lines (invoice_id NUMBER, id NUMBER);"
      }
    ],
    [
      {
        "question": "Show the number of orders for each customer name!",
        "query": "SELECT count(*), t1.first_name, t1.last_name FROM customers AS t1 JOIN invoices AS t2 ON t1.id = t2.customer_id GROUP BY t1.id;",
        "schema": "CREATE TABLE customers (last_name TEXT, id NUMBER, first_name TEXT); CREATE TABLE invoices (total NUMBER, customer_id NUMBER, id NUMBER);"
      },
      {
        "question": "Also include the total amount each has spent!",
        "query": "SELECT sum(t2.total), count(*), t1.first_name, t1.last_name FROM customers AS t1 JOIN invoices AS t2 ON t1.id = t2.customer_id GROUP BY t1.id;",
        "schema": "CREATE TABLE invoice_lines (invoice_id NUMBER, quantity NUMBER); CREATE TABLE customers (id NUMBER, first_name TEXT, last_name TEXT); CREATE TABLE invoices (id NUMBER, customer_id NUMBER, total NUMBER);"
      },
      {
        "question": "Show the entry for customer named Lucas Mancini.",
        "query": "SELECT sum(t2.total), count(*), t1.first_name, t1.last_name FROM customers AS t1 JOIN invoices AS t2 ON t1.id = t2.customer_id WHERE t1.first_name = \"Lucas\" AND t1.last_name = \"Mancini\";",
        "schema": "CREATE TABLE customers (first_name TEXT, last_name TEXT, id NUMBER); CREATE TABLE invoice_lines (quantity NUMBER, invoice_id NUMBER); CREATE TABLE invoices (id NUMBER, customer_id NUMBER, total NUMBER);"
      },
      {
        "question": "Actually, just show the total amount of money!",
        "query": "SELECT sum(t2.total) FROM customers AS t1 JOIN invoices AS t2 ON t1.id = t2.customer_id WHERE t1.first_name = \"Lucas\" AND t1.last_name = \"Mancini\";",
        "schema": "CREATE TABLE customers (id NUMBER, first_name TEXT, last_name TEXT); CREATE TABLE invoice_lines (invoice_id NUMBER, quantity NUMBER); CREATE TABLE invoices (id NUMBER, customer_id NUMBER, total NUMBER);"
      }
    ],
    [
      {
        "question": "For each track, show the track name and album name!",
        "query": "SELECT t1.name, t2.title FROM tracks AS t1 JOIN albums AS t2 ON t1.album_id = t2.id;",
        "schema": "CREATE TABLE tracks (album_id NUMBER, id NUMBER, name TEXT); CREATE TABLE albums (title TEXT, id NUMBER);"
      },
      {
        "question": "Also include the genre name !",
        "query": "SELECT t3.name, t1.name, t2.title FROM tracks AS t1 JOIN albums AS t2 ON t1.album_id = t2.id JOIN genres AS t3 ON t1.genre_id = t3.id;",
        "schema": "CREATE TABLE tracks (id NUMBER, genre_id NUMBER, name TEXT, album_id NUMBER); CREATE TABLE albums (id NUMBER, title TEXT); CREATE TABLE genres (name TEXT, id NUMBER);"
      },
      {
        "question": "Show just the ones of the genre named Rock!",
        "query": "SELECT t3.name, t1.name, t2.title FROM tracks AS t1 JOIN albums AS t2 ON t1.album_id = t2.id JOIN genres AS t3 ON t1.genre_id = t3.id WHERE t3.name = \"Rock\";",
        "schema": "CREATE TABLE albums (id NUMBER, title TEXT); CREATE TABLE genres (id NUMBER, name TEXT); CREATE TABLE tracks (album_id NUMBER, genre_id NUMBER, id NUMBER, name TEXT);"
      },
      {
        "question": "Show just the track names!",
        "query": "SELECT t2.name FROM genres AS t1 JOIN tracks AS t2 ON t1.id = t2.genre_id WHERE t1.name = \"Rock\";",
        "schema": "CREATE TABLE tracks (genre_id NUMBER, album_id NUMBER, id NUMBER, name TEXT); CREATE TABLE albums (title TEXT, id NUMBER); CREATE TABLE genres (id NUMBER, name TEXT);"
      }
    ],
    [
      {
        "question": "Who is the composer for track named \"Balls to the Wall\";",
        "query": "SELECT composer FROM tracks WHERE name = \"Balls to the Wall\";",
        "schema": "CREATE TABLE tracks (id NUMBER, composer TEXT, name TEXT, genre_id NUMBER); CREATE TABLE genres (id NUMBER, name TEXT);"
      },
      {
        "question": "How long is it?",
        "query": "SELECT milliseconds FROM tracks WHERE name = \"Balls to the Wall\";",
        "schema": "CREATE TABLE tracks (bytes NUMBER, genre_id NUMBER, milliseconds NUMBER, id NUMBER, composer TEXT, name TEXT); CREATE TABLE genres (id NUMBER, name TEXT);"
      },
      {
        "question": "How about its price?",
        "query": "SELECT unit_price FROM tracks WHERE name = \"Balls to the Wall\";",
        "schema": "CREATE TABLE invoices (total NUMBER, id NUMBER, invoice_date TIME); CREATE TABLE genres (name TEXT, id NUMBER); CREATE TABLE tracks (composer TEXT, genre_id NUMBER, bytes NUMBER, name TEXT, unit_price NUMBER, milliseconds NUMBER, id NUMBER); CREATE TABLE invoice_lines (track_id NUMBER, unit_price NUMBER);"
      },
      {
        "question": "the title of the album it belongs to?",
        "query": "SELECT t1.title FROM albums AS t1 JOIN tracks AS t2 ON t1.id = t2.album_id WHERE t2.name = \"Balls to the Wall\";",
        "schema": "CREATE TABLE genres (name TEXT, id NUMBER); CREATE TABLE invoices (invoice_date TIME, total NUMBER, id NUMBER); CREATE TABLE tracks (composer TEXT, name TEXT, id NUMBER, genre_id NUMBER, milliseconds NUMBER, unit_price NUMBER, bytes NUMBER, album_id NUMBER); CREATE TABLE albums (title TEXT, id NUMBER); CREATE TABLE invoice_lines (track_id NUMBER, unit_price NUMBER);"
      }
    ],
    [
      {
        "question": "What are all the album names and respective track names?",
        "query": "SELECT t1.title, t2.name FROM albums AS t1 JOIN tracks AS t2 ON t1.id = t2.genre_id;",
        "schema": "CREATE TABLE tracks (id NUMBER, genre_id NUMBER, album_id NUMBER, name TEXT); CREATE TABLE albums (id NUMBER, title TEXT);"
      },
      {
        "question": "Show them ordered by album name!",
        "query": "SELECT t1.title, t2.name FROM albums AS t1 JOIN tracks AS t2 ON t1.id = t2.genre_id ORDER BY t1.title;",
        "schema": "CREATE TABLE albums (title TEXT, id NUMBER); CREATE TABLE tracks (id NUMBER, genre_id NUMBER, album_id NUMBER, name TEXT); CREATE TABLE genres (name TEXT, id NUMBER);"
      },
      {
        "question": "Show just the track names for album called \"Balls to the Wall\"",
        "query": "SELECT t2.name FROM albums AS t1 JOIN tracks AS t2 ON t1.id = t2.genre_id WHERE t1.title = \"Balls to the Wall\";",
        "schema": "CREATE TABLE tracks (id NUMBER, album_id NUMBER, genre_id NUMBER, name TEXT); CREATE TABLE genres (id NUMBER, name TEXT); CREATE TABLE albums (title TEXT, id NUMBER);"
      }
    ],
    [
      {
        "question": "How many have greater than 5?",
        "query": "SELECT count(*) FROM (SELECT * FROM albums AS t1 JOIN tracks AS t2 ON t1.id = t2.album_id GROUP BY t1.id HAVING count(t1.id) > 15);",
        "schema": "CREATE TABLE invoices (id NUMBER, customer_id NUMBER, total NUMBER); CREATE TABLE invoice_lines (track_id NUMBER, invoice_id NUMBER, quantity NUMBER); CREATE TABLE employees (reports_to NUMBER, id NUMBER, first_name TEXT, last_name TEXT, title TEXT); CREATE TABLE playlists (id NUMBER); CREATE TABLE genres (id NUMBER); CREATE TABLE albums (artist_id NUMBER, id NUMBER, title TEXT); CREATE TABLE media_types (id NUMBER); CREATE TABLE artists (id NUMBER, name TEXT); CREATE TABLE playlist_tracks (track_id NUMBER); CREATE TABLE tracks (genre_id NUMBER, album_id NUMBER, id NUMBER, milliseconds NUMBER, bytes NUMBER, name TEXT); CREATE TABLE customers (last_name TEXT, first_name TEXT, id NUMBER, support_rep_id NUMBER);"
      },
      {
        "question": "greater than 10?",
        "query": "SELECT count(*) FROM (SELECT * FROM albums AS t1 JOIN tracks AS t2 ON t1.id = t2.album_id GROUP BY t1.id HAVING count(t1.id) > 10);",
        "schema": "CREATE TABLE invoice_lines (invoice_id NUMBER, track_id NUMBER, quantity NUMBER); CREATE TABLE customers (first_name TEXT, support_rep_id NUMBER, last_name TEXT, id NUMBER); CREATE TABLE playlists (id NUMBER); CREATE TABLE genres (id NUMBER); CREATE TABLE tracks (milliseconds NUMBER, album_id NUMBER, genre_id NUMBER, bytes NUMBER, id NUMBER, name TEXT); CREATE TABLE artists (id NUMBER, name TEXT); CREATE TABLE employees (title TEXT, last_name TEXT, first_name TEXT, id NUMBER, reports_to NUMBER); CREATE TABLE invoices (total NUMBER, customer_id NUMBER, id NUMBER); CREATE TABLE albums (id NUMBER, artist_id NUMBER, title TEXT); CREATE TABLE media_types (id NUMBER); CREATE TABLE playlist_tracks (track_id NUMBER);"
      },
      {
        "question": "What are their titles?",
        "query": "SELECT t1.title FROM albums AS t1 JOIN tracks AS t2 ON t1.id = t2.album_id GROUP BY t1.id HAVING count(t1.id) > 10;",
        "schema": "CREATE TABLE invoices (total NUMBER, customer_id NUMBER, id NUMBER); CREATE TABLE playlists (id NUMBER); CREATE TABLE genres (id NUMBER); CREATE TABLE invoice_lines (invoice_id NUMBER, track_id NUMBER, quantity NUMBER); CREATE TABLE employees (first_name TEXT, last_name TEXT, title TEXT, reports_to NUMBER, id NUMBER); CREATE TABLE customers (id NUMBER, last_name TEXT, support_rep_id NUMBER, first_name TEXT); CREATE TABLE albums (title TEXT, id NUMBER, artist_id NUMBER); CREATE TABLE playlist_tracks (track_id NUMBER); CREATE TABLE tracks (id NUMBER, bytes NUMBER, milliseconds NUMBER, genre_id NUMBER, album_id NUMBER, name TEXT); CREATE TABLE artists (name TEXT, id NUMBER); CREATE TABLE media_types (id NUMBER);"
      }
    ],
    [
      {
        "question": "Show me all the tracks names and their media types!",
        "query": "SELECT t1.name, t2.name FROM tracks AS t1 JOIN media_types AS t2 ON t2.id = t1.media_type_id;",
        "schema": "CREATE TABLE media_types (name TEXT, id NUMBER); CREATE TABLE tracks (name TEXT, media_type_id NUMBER, album_id NUMBER, id NUMBER); CREATE TABLE genres (id NUMBER); CREATE TABLE albums (id NUMBER, title TEXT);"
      },
      {
        "question": "Which ones are MPEG files?",
        "query": "SELECT t1.name, t2.name FROM tracks AS t1 JOIN media_types AS t2 ON t2.id = t1.media_type_id WHERE t2.name = \"MPEG audio file\";",
        "schema": "CREATE TABLE albums (id NUMBER, title TEXT); CREATE TABLE genres (id NUMBER); CREATE TABLE tracks (name TEXT, media_type_id NUMBER, album_id NUMBER, milliseconds NUMBER, id NUMBER); CREATE TABLE media_types (id NUMBER, name TEXT);"
      },
      {
        "question": "Also provide the genres for each of these!!",
        "query": "SELECT t1.name, t2.name, t3.name FROM genres AS t1 JOIN tracks AS t2 ON t1.id = t2.genre_id JOIN media_types AS t3 ON t3.id = t2.media_type_id WHERE t3.name = \"MPEG audio file\";",
        "schema": "CREATE TABLE media_types (name TEXT, id NUMBER); CREATE TABLE albums (title TEXT, id NUMBER); CREATE TABLE tracks (name TEXT, album_id NUMBER, media_type_id NUMBER, milliseconds NUMBER, genre_id NUMBER, id NUMBER); CREATE TABLE genres (name TEXT, id NUMBER);"
      },
      {
        "question": "Which names of the ones are in the genre Rock?",
        "query": "SELECT t2.name FROM genres AS t1 JOIN tracks AS t2 ON t1.id = t2.genre_id JOIN media_types AS t3 ON t3.id = t2.media_type_id WHERE t1.name = \"Rock\" AND t3.name = \"MPEG audio file\";",
        "schema": "CREATE TABLE albums (id NUMBER, title TEXT); CREATE TABLE media_types (id NUMBER, name TEXT); CREATE TABLE tracks (id NUMBER, album_id NUMBER, milliseconds NUMBER, name TEXT, media_type_id NUMBER, genre_id NUMBER); CREATE TABLE genres (id NUMBER, name TEXT);"
      }
    ],
    [
      {
        "question": "Show the names of each track and their genre names!",
        "query": "SELECT t1.name, t2.name FROM tracks AS t1 JOIN genres AS t2 ON t1.genre_id = t2.id;",
        "schema": "CREATE TABLE tracks (genre_id NUMBER, id NUMBER, name TEXT); CREATE TABLE albums (id NUMBER); CREATE TABLE genres (id NUMBER, name TEXT);"
      },
      {
        "question": "Show me the names of the tracks that are in the genre Rock!",
        "query": "SELECT t1.name FROM tracks AS t1 JOIN genres AS t2 ON t1.genre_id = t2.id WHERE t2.name = \"Rock\";",
        "schema": "CREATE TABLE albums (id NUMBER); CREATE TABLE genres (id NUMBER, name TEXT); CREATE TABLE tracks (id NUMBER, genre_id NUMBER, name TEXT);"
      },
      {
        "question": "Show me any names of tracks whose media type is an MPEG audio file!",
        "query": "SELECT t1.name FROM tracks AS t1 JOIN media_types AS t2 ON t2.id = t1.media_type_id WHERE t2.name = \"MPEG audio file\";",
        "schema": "CREATE TABLE genres (id NUMBER, name TEXT); CREATE TABLE media_types (id NUMBER, name TEXT); CREATE TABLE albums (id NUMBER); CREATE TABLE tracks (id NUMBER, name TEXT, media_type_id NUMBER, genre_id NUMBER);"
      },
      {
        "question": "Can you show a list of both of these names?",
        "query": "SELECT t2.name FROM genres AS t1 JOIN tracks AS t2 ON t1.id = t2.genre_id JOIN media_types AS t3 ON t3.id = t2.media_type_id WHERE t1.name = \"Rock\" OR t3.name = \"MPEG audio file\";",
        "schema": "CREATE TABLE genres (name TEXT, id NUMBER); CREATE TABLE albums (id NUMBER); CREATE TABLE media_types (id NUMBER, name TEXT); CREATE TABLE tracks (genre_id NUMBER, name TEXT, media_type_id NUMBER, id NUMBER);"
      }
    ],
    [
      {
        "question": "What genre names for each track by track name!",
        "query": "SELECT t1.name, t2.name FROM genres AS t1 JOIN tracks AS t2 ON t1.id = t2.genre_id WHERE t1.name = \"Rock\"",
        "schema": "CREATE TABLE genres (id NUMBER, name TEXT); CREATE TABLE tracks (genre_id NUMBER, id NUMBER, name TEXT);"
      },
      {
        "question": "Show us all the tracks that belong to genre Rock.",
        "query": "SELECT t2.name FROM genres AS t1 JOIN tracks AS t2 ON t1.id = t2.genre_id WHERE t1.name = \"Rock\"",
        "schema": "CREATE TABLE genres (name TEXT, id NUMBER); CREATE TABLE tracks (genre_id NUMBER, id NUMBER, name TEXT);"
      },
      {
        "question": "How about those that belong to genre Jazz.",
        "query": "SELECT t2.name FROM genres AS t1 JOIN tracks AS t2 ON t1.id = t2.genre_id WHERE t1.name = \"Jazz\"",
        "schema": "CREATE TABLE genres (id NUMBER, name TEXT); CREATE TABLE tracks (name TEXT, id NUMBER, genre_id NUMBER);"
      },
      {
        "question": "Which ones belong to either one?",
        "query": "SELECT t2.name FROM genres AS t1 JOIN tracks AS t2 ON t1.id = t2.genre_id WHERE t1.name = \"Rock\" OR t1.name = \"Jazz\"",
        "schema": "CREATE TABLE genres (name TEXT, id NUMBER); CREATE TABLE tracks (id NUMBER, name TEXT, genre_id NUMBER);"
      }
    ],
    [
      {
        "question": "How many tracks are there?",
        "query": "SELECT count(*) FROM tracks;",
        "schema": "CREATE TABLE artists (id NUMBER); CREATE TABLE customers (id NUMBER); CREATE TABLE albums (id NUMBER); CREATE TABLE invoice_lines (track_id NUMBER); CREATE TABLE tracks (composer TEXT, name TEXT, media_type_id NUMBER, genre_id NUMBER, album_id NUMBER, id NUMBER, milliseconds NUMBER); CREATE TABLE playlist_tracks (track_id NUMBER); CREATE TABLE genres (id NUMBER); CREATE TABLE invoices (id NUMBER); CREATE TABLE employees (id NUMBER);"
      },
      {
        "question": "How many are in a playlist of a Movie?",
        "query": "SELECT count(*) FROM tracks AS t1 JOIN playlist_tracks AS t2 ON t1.id = t2.track_id JOIN playlists AS t3 ON t3.id = t2.playlist_id WHERE t3.name = \"Movies\";",
        "schema": "CREATE TABLE artists (id NUMBER); CREATE TABLE customers (id NUMBER); CREATE TABLE albums (id NUMBER); CREATE TABLE playlists (id NUMBER, name TEXT); CREATE TABLE genres (id NUMBER); CREATE TABLE playlist_tracks (playlist_id NUMBER, track_id NUMBER); CREATE TABLE invoices (id NUMBER); CREATE TABLE invoice_lines (track_id NUMBER); CREATE TABLE employees (id NUMBER); CREATE TABLE tracks (genre_id NUMBER, album_id NUMBER, media_type_id NUMBER, id NUMBER, milliseconds NUMBER, name TEXT, composer TEXT);"
      },
      {
        "question": "Which ones ?",
        "query": "SELECT t1.name FROM tracks AS t1 JOIN playlist_tracks AS t2 ON t1.id = t2.track_id JOIN playlists AS t3 ON t3.id = t2.playlist_id WHERE t3.name = \"Movies\";",
        "schema": "CREATE TABLE invoice_lines (track_id NUMBER); CREATE TABLE tracks (milliseconds NUMBER, media_type_id NUMBER, album_id NUMBER, genre_id NUMBER, composer TEXT, id NUMBER, name TEXT); CREATE TABLE invoices (id NUMBER); CREATE TABLE employees (id NUMBER); CREATE TABLE artists (id NUMBER); CREATE TABLE playlist_tracks (track_id NUMBER, playlist_id NUMBER); CREATE TABLE customers (id NUMBER); CREATE TABLE playlists (name TEXT, id NUMBER); CREATE TABLE genres (id NUMBER); CREATE TABLE albums (id NUMBER);"
      }
    ],
    [
      {
        "question": "What are the names of all the playlist?",
        "query": "SELECT name FROM playlists;",
        "schema": "CREATE TABLE artists (name TEXT, id NUMBER); CREATE TABLE media_types (id NUMBER); CREATE TABLE customers (id NUMBER, first_name TEXT, last_name TEXT); CREATE TABLE playlists (id NUMBER, name TEXT); CREATE TABLE playlist_tracks (playlist_id NUMBER, track_id NUMBER); CREATE TABLE tracks (id NUMBER, name TEXT, album_id NUMBER); CREATE TABLE genres (id NUMBER); CREATE TABLE sqlite_sequence (seq TEXT); CREATE TABLE albums (id NUMBER, title TEXT, artist_id NUMBER);"
      },
      {
        "question": "For each, what are the names of their tracks?",
        "query": "SELECT t3.name, t2.name FROM playlist_tracks AS t1 JOIN playlists AS t2 ON t2.id = t1.playlist_id JOIN tracks AS t3 ON t1.track_id = t3.id;",
        "schema": "CREATE TABLE albums (artist_id NUMBER, title TEXT, id NUMBER); CREATE TABLE genres (id NUMBER); CREATE TABLE playlists (name TEXT, id NUMBER); CREATE TABLE artists (id NUMBER, name TEXT); CREATE TABLE playlist_tracks (playlist_id NUMBER, track_id NUMBER); CREATE TABLE media_types (id NUMBER); CREATE TABLE tracks (album_id NUMBER, id NUMBER, name TEXT); CREATE TABLE sqlite_sequence (seq TEXT); CREATE TABLE customers (first_name TEXT, last_name TEXT, id NUMBER);"
      },
      {
        "question": "For each playlist name, count the number of tracks!",
        "query": "SELECT t2.name, count(t1.track_id) FROM playlist_tracks AS t1 JOIN playlists AS t2 ON t2.id = t1.playlist_id GROUP BY t1.playlist_id;",
        "schema": "CREATE TABLE artists (id NUMBER, name TEXT); CREATE TABLE tracks (album_id NUMBER, id NUMBER, milliseconds NUMBER, name TEXT); CREATE TABLE playlists (name TEXT, id NUMBER); CREATE TABLE albums (artist_id NUMBER, title TEXT, id NUMBER); CREATE TABLE genres (id NUMBER); CREATE TABLE sqlite_sequence (seq TEXT); CREATE TABLE playlist_tracks (playlist_id NUMBER, track_id NUMBER); CREATE TABLE media_types (id NUMBER); CREATE TABLE customers (last_name TEXT, id NUMBER, first_name TEXT);"
      },
      {
        "question": "Show the only the names of the playlists with more than 100!",
        "query": "SELECT t2.name FROM playlist_tracks AS t1 JOIN playlists AS t2 ON t2.id = t1.playlist_id GROUP BY t1.playlist_id HAVING count(t1.track_id) > 100;",
        "schema": "CREATE TABLE playlist_tracks (track_id NUMBER, playlist_id NUMBER); CREATE TABLE customers (last_name TEXT, id NUMBER, first_name TEXT); CREATE TABLE artists (id NUMBER, name TEXT); CREATE TABLE tracks (milliseconds NUMBER, album_id NUMBER, name TEXT, id NUMBER); CREATE TABLE genres (id NUMBER); CREATE TABLE playlists (id NUMBER, name TEXT); CREATE TABLE media_types (id NUMBER); CREATE TABLE albums (id NUMBER, artist_id NUMBER, title TEXT); CREATE TABLE sqlite_sequence (seq TEXT);"
      }
    ],
    [
      {
        "question": "Show me the customer information about a customer named Daan Peeters.",
        "query": "SELECT * FROM customers WHERE first_name = \"Daan\" AND last_name = \"Peeters\";",
        "schema": "CREATE TABLE invoices (customer_id NUMBER); CREATE TABLE customers (id NUMBER, last_name TEXT, support_rep_id NUMBER, first_name TEXT); CREATE TABLE employees (last_name TEXT, first_name TEXT);"
      },
      {
        "question": "How many invoices has he had?",
        "query": "SELECT count(*) FROM customers AS t1 JOIN invoices AS t2 ON t1.id = t2.customer_id WHERE t1.first_name = \"Daan\" AND t1.last_name = \"Peeters\";",
        "schema": "CREATE TABLE employees (last_name TEXT, first_name TEXT); CREATE TABLE invoices (customer_id NUMBER, billing_city TEXT, id NUMBER, total NUMBER); CREATE TABLE customers (last_name TEXT, first_name TEXT, support_rep_id NUMBER, id NUMBER);"
      },
      {
        "question": "In each invoice, how many tracks did he buy?",
        "query": "SELECT t2.id, count(*) FROM invoice_lines AS t1 JOIN invoices AS t2 ON t2.id = t1.invoice_id JOIN customers AS t3 ON t3.id = t2.customer_id WHERE t3.first_name = \"Daan\" AND t3.last_name = \"Peeters\" GROUP BY t2.id;",
        "schema": "CREATE TABLE customers (first_name TEXT, last_name TEXT, support_rep_id NUMBER, id NUMBER); CREATE TABLE tracks (name TEXT, unit_price NUMBER, id NUMBER); CREATE TABLE invoices (customer_id NUMBER, id NUMBER, billing_city TEXT, total NUMBER); CREATE TABLE employees (first_name TEXT, last_name TEXT); CREATE TABLE invoice_lines (unit_price NUMBER, invoice_id NUMBER, track_id NUMBER);"
      },
      {
        "question": "Can you show just all the names of these tracks!",
        "query": "SELECT t1.name FROM tracks AS t1 JOIN invoice_lines AS t2 ON t1.id = t2.track_id JOIN invoices AS t3 ON t3.id = t2.invoice_id JOIN customers AS t4 ON t4.id = t3.customer_id WHERE t4.first_name = \"Daan\" AND t4.last_name = \"Peeters\";",
        "schema": "CREATE TABLE tracks (id NUMBER, unit_price NUMBER, name TEXT); CREATE TABLE invoice_lines (track_id NUMBER, invoice_id NUMBER, id NUMBER, unit_price NUMBER); CREATE TABLE invoices (billing_city TEXT, customer_id NUMBER, total NUMBER, id NUMBER); CREATE TABLE customers (id NUMBER, first_name TEXT, support_rep_id NUMBER, last_name TEXT); CREATE TABLE employees (last_name TEXT, first_name TEXT);"
      }
    ],
    [
      {
        "question": "What different types of playlists are there?",
        "query": "SELECT name FROM playlists",
        "schema": "CREATE TABLE playlists (name TEXT, id NUMBER); CREATE TABLE albums (id NUMBER); CREATE TABLE tracks (media_type_id NUMBER, id NUMBER); CREATE TABLE playlist_tracks (track_id NUMBER, playlist_id NUMBER); CREATE TABLE genres (name TEXT, id NUMBER); CREATE TABLE media_types (name TEXT, id NUMBER);"
      },
      {
        "question": "What are the names of the tracks are in the movie playlist?",
        "query": "SELECT t1.name, t3.name FROM tracks AS t1 JOIN playlist_tracks AS t2 ON t1.id = t2.track_id JOIN playlists AS t3 ON t2.playlist_id = t3.id WHERE t3.name = 'Movies'",
        "schema": "CREATE TABLE albums (id NUMBER, title TEXT); CREATE TABLE media_types (id NUMBER, name TEXT); CREATE TABLE playlist_tracks (playlist_id NUMBER, track_id NUMBER); CREATE TABLE genres (id NUMBER, name TEXT); CREATE TABLE tracks (name TEXT, media_type_id NUMBER, id NUMBER, album_id NUMBER); CREATE TABLE playlists (name TEXT, id NUMBER);"
      },
      {
        "question": "Which of these are also in the music playl",
        "query": "SELECT t1.name FROM tracks AS t1 JOIN playlist_tracks AS t2 ON t1.id = t2.track_id JOIN playlists AS t3 ON t2.playlist_id = t3.id WHERE t3.name = 'Movies' INTERSECT SELECT t1.name FROM tracks AS t1 JOIN playlist_tracks AS t2 ON t1.id = t2.track_id JOIN playlists AS t3 ON t2.playlist_id = t3.id WHERE t3.name = 'Music';",
        "schema": "CREATE TABLE albums (title TEXT, id NUMBER); CREATE TABLE genres (name TEXT, id NUMBER); CREATE TABLE playlists (id NUMBER, name TEXT); CREATE TABLE tracks (id NUMBER, album_id NUMBER, name TEXT, media_type_id NUMBER); CREATE TABLE media_types (id NUMBER, name TEXT); CREATE TABLE playlist_tracks (track_id NUMBER, playlist_id NUMBER);"
      },
      {
        "question": "How about those that are not!",
        "query": "SELECT t1.name FROM tracks AS t1 JOIN playlist_tracks AS t2 ON t1.id = t2.track_id JOIN playlists AS t3 ON t2.playlist_id = t3.id WHERE t3.name = 'Movies' EXCEPT SELECT t1.name FROM tracks AS t1 JOIN playlist_tracks AS t2 ON t1.id = t2.track_id JOIN playlists AS t3 ON t2.playlist_id = t3.id WHERE t3.name = 'Music';",
        "schema": "CREATE TABLE albums (title TEXT, id NUMBER); CREATE TABLE genres (name TEXT, id NUMBER); CREATE TABLE media_types (name TEXT, id NUMBER); CREATE TABLE tracks (album_id NUMBER, media_type_id NUMBER, name TEXT, id NUMBER); CREATE TABLE playlists (id NUMBER, name TEXT); CREATE TABLE playlist_tracks (playlist_id NUMBER, track_id NUMBER);"
      }
    ],
    [
      {
        "question": "How many different playlist are there?",
        "query": "SELECT count(*) FROM playlists;",
        "schema": "CREATE TABLE tracks (name TEXT, album_id NUMBER, id NUMBER); CREATE TABLE playlists (id NUMBER, name TEXT); CREATE TABLE customers (id NUMBER); CREATE TABLE playlist_tracks (track_id NUMBER, playlist_id NUMBER); CREATE TABLE genres (id NUMBER); CREATE TABLE invoices (id NUMBER); CREATE TABLE artists (id NUMBER); CREATE TABLE albums (id NUMBER);"
      },
      {
        "question": "What are they?",
        "query": "SELECT name FROM playlists;",
        "schema": "CREATE TABLE invoices (id NUMBER); CREATE TABLE playlists (id NUMBER, name TEXT); CREATE TABLE artists (id NUMBER); CREATE TABLE playlist_tracks (playlist_id NUMBER, track_id NUMBER); CREATE TABLE tracks (album_id NUMBER, id NUMBER, name TEXT); CREATE TABLE genres (id NUMBER); CREATE TABLE albums (id NUMBER); CREATE TABLE customers (id NUMBER);"
      },
      {
        "question": "What are the tracks in each one?",
        "query": "SELECT t1.name, t3.name FROM tracks AS t1 JOIN playlist_tracks AS t2 ON t1.id = t2.track_id JOIN playlists AS t3 ON t2.playlist_id = t3.id;",
        "schema": "CREATE TABLE tracks (album_id NUMBER, name TEXT, id NUMBER); CREATE TABLE invoices (id NUMBER); CREATE TABLE genres (id NUMBER); CREATE TABLE albums (id NUMBER, title TEXT); CREATE TABLE playlists (id NUMBER, name TEXT); CREATE TABLE artists (id NUMBER); CREATE TABLE playlist_tracks (track_id NUMBER, playlist_id NUMBER); CREATE TABLE customers (id NUMBER);"
      },
      {
        "question": "What are the names of the ones are in both Movies and music!",
        "query": "SELECT t1.name FROM tracks AS t1 JOIN playlist_tracks AS t2 ON t1.id = t2.track_id JOIN playlists AS t3 ON t2.playlist_id = t3.id WHERE t3.name = 'Movies' INTERSECT SELECT t1.name FROM tracks AS t1 JOIN playlist_tracks AS t2 ON t1.id = t2.track_id JOIN playlists AS t3 ON t2.playlist_id = t3.id WHERE t3.name = 'Music'",
        "schema": "CREATE TABLE genres (id NUMBER); CREATE TABLE playlists (id NUMBER, name TEXT); CREATE TABLE invoices (id NUMBER); CREATE TABLE albums (title TEXT, id NUMBER); CREATE TABLE customers (id NUMBER); CREATE TABLE playlist_tracks (track_id NUMBER, playlist_id NUMBER); CREATE TABLE artists (id NUMBER); CREATE TABLE tracks (name TEXT, id NUMBER, album_id NUMBER);"
      }
    ]
  ],
  "protein_institute": [
    [
      {
        "question": "What are the heights of buildings?",
        "query": "SELECT height_feet FROM building",
        "schema": "CREATE TABLE protein (Institution_id TEXT); CREATE TABLE Institution (Institution_id TEXT, building_id TEXT); CREATE TABLE building (Years_as_tallest TEXT, Name TEXT, Height_feet NUMBER, building_id TEXT);"
      },
      {
        "question": "give the max.",
        "query": "SELECT max(height_feet) FROM building",
        "schema": "CREATE TABLE Institution (Institution_id TEXT, building_id TEXT); CREATE TABLE building (Height_feet NUMBER, Name TEXT, Years_as_tallest TEXT, building_id TEXT, Floors NUMBER); CREATE TABLE protein (Institution_id TEXT);"
      },
      {
        "question": "What is its name?",
        "query": "SELECT name FROM building ORDER BY height_feet DESC LIMIT 1",
        "schema": "CREATE TABLE Institution (Institution_id TEXT, building_id TEXT); CREATE TABLE protein (Institution_id TEXT); CREATE TABLE building (Height_feet NUMBER, Years_as_tallest TEXT, Floors NUMBER, Name TEXT, building_id TEXT);"
      }
    ],
    [
      {
        "question": "How many floors does each building name have?",
        "query": "SELECT name, floors FROM building",
        "schema": "CREATE TABLE building (Name TEXT, building_id TEXT, Floors NUMBER); CREATE TABLE Institution (building_id TEXT);"
      },
      {
        "question": "What is the average?",
        "query": "SELECT avg(floors) FROM building",
        "schema": "CREATE TABLE Institution (building_id TEXT); CREATE TABLE building (Name TEXT, Floors NUMBER, Height_feet NUMBER, building_id TEXT);"
      },
      {
        "question": "Give statistics about the avg, max, and min.",
        "query": "SELECT avg(floors) , max(floors) , min(floors) FROM building",
        "schema": "CREATE TABLE Institution (building_id TEXT); CREATE TABLE building (Floors NUMBER, Height_feet NUMBER, building_id TEXT, Name TEXT);"
      }
    ],
    [
      {
        "question": "How many buildings have height abouve average?",
        "query": "SELECT count(*) FROM building WHERE height_feet > (SELECT avg(height_feet) FROM building)",
        "schema": "CREATE TABLE Institution (building_id TEXT, Institution_id TEXT); CREATE TABLE building (building_id TEXT, Name TEXT, Height_feet NUMBER, Years_as_tallest TEXT); CREATE TABLE protein (Institution_id TEXT);"
      },
      {
        "question": "What about floors above average?",
        "query": "SELECT count(*) FROM building WHERE height_feet > (SELECT avg(floors) FROM building)",
        "schema": "CREATE TABLE protein (Institution_id TEXT); CREATE TABLE building (Name TEXT, Floors NUMBER, Years_as_tallest TEXT, Height_feet NUMBER, building_id TEXT); CREATE TABLE Institution (building_id TEXT, Institution_id TEXT);"
      },
      {
        "question": "Give the union of the above.",
        "query": "SELECT count(*) FROM building WHERE height_feet > (SELECT avg(height_feet) FROM building) OR floors > (SELECT avg(floors) FROM building)",
        "schema": "CREATE TABLE protein (Institution_id TEXT); CREATE TABLE building (Years_as_tallest TEXT, building_id TEXT, Name TEXT, Height_feet NUMBER, Floors NUMBER); CREATE TABLE Institution (building_id TEXT, Institution_id TEXT);"
      }
    ],
    [
      {
        "question": "Which buildings are taller than 200?",
        "query": "SELECT name FROM building WHERE height_feet >= 200",
        "schema": "CREATE TABLE building (Years_as_tallest TEXT, Floors NUMBER, Height_feet NUMBER, Name TEXT, building_id TEXT); CREATE TABLE Institution (building_id TEXT, Institution_id TEXT);"
      },
      {
        "question": "Which have floors greater or equal to 20?",
        "query": "SELECT name FROM building WHERE floors >= 20",
        "schema": "CREATE TABLE Institution (building_id TEXT, Institution_id TEXT); CREATE TABLE building (Floors NUMBER, Name TEXT, Height_feet NUMBER, building_id TEXT, Years_as_tallest TEXT);"
      },
      {
        "question": "Intersect those.",
        "query": "SELECT name FROM building WHERE height_feet >= 200 AND floors >= 20",
        "schema": "CREATE TABLE building (Name TEXT, building_id TEXT, Years_as_tallest TEXT, Height_feet NUMBER, Floors NUMBER); CREATE TABLE Institution (building_id TEXT, Institution_id TEXT);"
      }
    ],
    [
      {
        "question": "What are the names and founded dates for the institutions?",
        "query": "SELECT institution, founded FROM institution",
        "schema": "CREATE TABLE building (Name TEXT); CREATE TABLE protein (Institution_id TEXT); CREATE TABLE Institution (Type TEXT, Institution TEXT, Founded NUMBER, Institution_id TEXT);"
      },
      {
        "question": "Also show the private/public status.",
        "query": "SELECT institution, founded, TYPE FROM institution",
        "schema": "CREATE TABLE protein (Institution_id TEXT); CREATE TABLE Institution (Institution_id TEXT, Founded NUMBER, Type TEXT, Institution TEXT); CREATE TABLE building (Name TEXT);"
      },
      {
        "question": "Show the names and locations of institutions that are founded after 1990 and have the type \"Private\".",
        "query": "SELECT institution , LOCATION FROM institution WHERE founded > 1990 AND TYPE = 'Private'",
        "schema": "CREATE TABLE Institution (building_id TEXT, Type TEXT, Institution TEXT, Institution_id TEXT, Location TEXT, Founded NUMBER); CREATE TABLE building (Name TEXT); CREATE TABLE protein (Institution_id TEXT);"
      }
    ],
    [
      {
        "question": "What are the unique types of institution?",
        "query": "SELECT DISTINCT TYPE FROM institution",
        "schema": "CREATE TABLE protein (Institution_id TEXT); CREATE TABLE Institution (Institution TEXT, Institution_id TEXT, Type TEXT);"
      },
      {
        "question": "Count those.",
        "query": "SELECT TYPE, count(*) FROM institution GROUP BY TYPE",
        "schema": "CREATE TABLE Institution (Institution_id TEXT, Type TEXT, Institution TEXT); CREATE TABLE protein (Institution_id TEXT);"
      },
      {
        "question": "Also sum over enrollment.",
        "query": "SELECT TYPE , count(*) , sum(enrollment) FROM institution GROUP BY TYPE",
        "schema": "CREATE TABLE Institution (Institution_id TEXT, Type TEXT, Enrollment NUMBER, Institution TEXT); CREATE TABLE protein (Institution_id TEXT);"
      }
    ],
    [
      {
        "question": "How many institutions have type Tribal?",
        "query": "SELECT count(*) FROM institution WHERE TYPE = 'Tribal'",
        "schema": "CREATE TABLE protein (Institution_id TEXT); CREATE TABLE Institution (Institution TEXT, Institution_id TEXT, Type TEXT);"
      },
      {
        "question": "Show the institution type with the largest number of institutions.",
        "query": "SELECT TYPE FROM institution GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Institution (Type TEXT, Institution TEXT, Institution_id TEXT); CREATE TABLE protein (Institution_id TEXT);"
      }
    ],
    [
      {
        "question": "Which institutions were founded after 1990?",
        "query": "SELECT institution FROM institution WHERE founded > 1990",
        "schema": "CREATE TABLE Institution (Institution_id TEXT, Institution TEXT, Founded NUMBER, Type TEXT); CREATE TABLE protein (Institution_id TEXT);"
      },
      {
        "question": "What are their types?",
        "query": "SELECT institution, TYPE FROM institution WHERE founded > 1990",
        "schema": "CREATE TABLE protein (Institution_id TEXT); CREATE TABLE Institution (Type TEXT, Institution_id TEXT, Founded NUMBER, Institution TEXT);"
      },
      {
        "question": "Show the institution type with an institution founded after 1990 and an institution with at least 1000 enrollment.",
        "query": "SELECT TYPE FROM institution WHERE founded > 1990 AND enrollment >= 1000",
        "schema": "CREATE TABLE protein (Institution_id TEXT); CREATE TABLE Institution (Founded NUMBER, Enrollment NUMBER, Institution_id TEXT, Type TEXT, Institution TEXT);"
      }
    ],
    [
      {
        "question": "which building ids have an institution?",
        "query": "SELECT DISTINCT building_id FROM institution",
        "schema": "CREATE TABLE Institution (Type TEXT, building_id TEXT, Institution_id TEXT, Institution TEXT, Location TEXT); CREATE TABLE protein (Institution_id TEXT); CREATE TABLE building (Name TEXT, building_id TEXT);"
      },
      {
        "question": "Which do not?",
        "query": "SELECT building_id FROM building WHERE building_id NOT IN (SELECT building_id FROM institution)",
        "schema": "CREATE TABLE Institution (Location TEXT, Type TEXT, building_id TEXT, Institution_id TEXT, Institution TEXT); CREATE TABLE protein (Institution_id TEXT); CREATE TABLE building (building_id TEXT, Name TEXT);"
      },
      {
        "question": "Give just their names.",
        "query": "SELECT name FROM building WHERE building_id NOT IN (SELECT building_id FROM institution)",
        "schema": "CREATE TABLE building (Name TEXT, building_id TEXT); CREATE TABLE protein (Institution_id TEXT); CREATE TABLE Institution (Institution_id TEXT, building_id TEXT, Location TEXT, Institution TEXT, Type TEXT);"
      }
    ],
    [
      {
        "question": "Which institutions were founded in 2003?",
        "query": "SELECT institution FROM institution WHERE founded = 2003",
        "schema": "CREATE TABLE protein (Institution_id TEXT); CREATE TABLE Institution (Founded NUMBER, Type TEXT, Institution_id TEXT, Institution TEXT);"
      },
      {
        "question": "What are the corresponding building ids?",
        "query": "SELECT building_id FROM institution WHERE founded = 2003",
        "schema": "CREATE TABLE protein (Institution_id TEXT); CREATE TABLE Institution (Institution TEXT, Institution_id TEXT, Location TEXT, Type TEXT, Founded NUMBER, building_id TEXT); CREATE TABLE building (building_id TEXT, Name TEXT);"
      },
      {
        "question": "What are the names of these buildings?",
        "query": "SELECT t1.name FROM building AS t1 JOIN institution AS t2 ON t1.building_id = t2.building_id WHERE t2.founded = 2003",
        "schema": "CREATE TABLE Institution (Institution_id TEXT, Founded NUMBER, Location TEXT, building_id TEXT, Institution TEXT, Type TEXT); CREATE TABLE protein (Institution_id TEXT); CREATE TABLE building (building_id TEXT, Name TEXT);"
      },
      {
        "question": "Which building names are not in there?",
        "query": "SELECT name FROM building EXCEPT SELECT t1.name FROM building AS t1 JOIN institution AS t2 ON t1.building_id = t2.building_id WHERE t2.founded = 2003",
        "schema": "CREATE TABLE Institution (Institution_id TEXT, building_id TEXT, Type TEXT, Institution TEXT, Founded NUMBER, Location TEXT); CREATE TABLE building (Name TEXT, building_id TEXT); CREATE TABLE protein (Institution_id TEXT);"
      }
    ],
    [
      {
        "question": "How many institutions are in Citizens Bank Building?",
        "query": "SELECT count(*) FROM building AS t1 JOIN institution AS t2 ON t1.building_id = t2.building_id GROUP BY t1.building_id HAVING t1.name = 'Citizens Bank Building'",
        "schema": "CREATE TABLE building (building_id TEXT, Name TEXT); CREATE TABLE Institution (Type TEXT, building_id TEXT, Institution TEXT, Location TEXT, Institution_id TEXT); CREATE TABLE protein (Institution_id TEXT);"
      },
      {
        "question": "Generalize this process for all buildings.",
        "query": "SELECT t1.name , count(*) FROM building AS t1 JOIN institution AS t2 ON t1.building_id = t2.building_id GROUP BY t1.building_id",
        "schema": "CREATE TABLE Institution (building_id TEXT, Institution TEXT, Location TEXT, Type TEXT, Institution_id TEXT); CREATE TABLE building (building_id TEXT, Name TEXT); CREATE TABLE protein (Institution_id TEXT);"
      }
    ],
    [
      {
        "question": "Which institutions were founded after 1880?",
        "query": "SELECT institution FROM institution WHERE founded > 1880",
        "schema": "CREATE TABLE protein (Institution_id TEXT); CREATE TABLE Institution (Institution TEXT, Institution_id TEXT, Type TEXT, Founded NUMBER);"
      },
      {
        "question": "Give the building ids of these buildings.",
        "query": "SELECT building_id, institution FROM institution WHERE founded > 1880",
        "schema": "CREATE TABLE protein (Institution_id TEXT); CREATE TABLE Institution (Institution TEXT, Founded NUMBER, Type TEXT, building_id TEXT, Institution_id TEXT, Location TEXT); CREATE TABLE building (building_id TEXT, Name TEXT);"
      },
      {
        "question": "Only show the building ids that appear twice or more on that list.",
        "query": "SELECT building_id FROM institution WHERE founded > 1880 GROUP BY building_id HAVING count(*) >= 2",
        "schema": "CREATE TABLE Institution (Type TEXT, Founded NUMBER, Institution_id TEXT, building_id TEXT, Location TEXT, Institution TEXT); CREATE TABLE building (building_id TEXT, Name TEXT); CREATE TABLE protein (Institution_id TEXT);"
      },
      {
        "question": "Give the names and heights of those buildings.",
        "query": "SELECT t1.name , t1.height_feet FROM building AS t1 JOIN institution AS t2 ON t1.building_id = t2.building_id WHERE t2.founded > 1880 GROUP BY t1.building_id HAVING count(*) >= 2",
        "schema": "CREATE TABLE protein (Institution_id TEXT); CREATE TABLE building (building_id TEXT, Years_as_tallest TEXT, Height_feet NUMBER, Name TEXT); CREATE TABLE Institution (building_id TEXT, Institution TEXT, Type TEXT, Founded NUMBER, Location TEXT, Institution_id TEXT);"
      }
    ],
    [
      {
        "question": "Show the institution names joined with the protein names.",
        "query": "SELECT t1.institution , t2.protein_name FROM institution AS t1 JOIN protein AS t2 ON t1.institution_id = t2.institution_id",
        "schema": "CREATE TABLE protein (common_name TEXT, Institution_id TEXT, protein_name TEXT); CREATE TABLE Institution (Institution TEXT, Institution_id TEXT, Type TEXT);"
      },
      {
        "question": "Aggregate, count, over the institution names.",
        "query": "SELECT t1.institution , count(*) FROM institution AS t1 JOIN protein AS t2 ON t1.institution_id = t2.institution_id GROUP BY t1.institution_id",
        "schema": "CREATE TABLE Institution (Institution TEXT, Type TEXT, Institution_id TEXT); CREATE TABLE protein (common_name TEXT, Institution_id TEXT, protein_name TEXT);"
      }
    ],
    [
      {
        "question": "Which proteins are associated with institutions founded after 1880?",
        "query": "SELECT t2.protein_name FROM institution AS t1 JOIN protein AS t2 ON t1.institution_id = t2.institution_id WHERE t1.founded > 1880",
        "schema": "CREATE TABLE Institution (Founded NUMBER, Type TEXT, Institution TEXT, Institution_id TEXT); CREATE TABLE protein (common_name TEXT, Institution_id TEXT, protein_name TEXT);"
      },
      {
        "question": "And which are associated with an institution with type \"Private\"?",
        "query": "SELECT t2.protein_name FROM institution AS t1 JOIN protein AS t2 ON t1.institution_id = t2.institution_id WHERE t1.type = 'Private'",
        "schema": "CREATE TABLE Institution (Institution_id TEXT, Founded NUMBER, Institution TEXT, Type TEXT); CREATE TABLE protein (common_name TEXT, Institution_id TEXT, protein_name TEXT);"
      },
      {
        "question": "Union those.",
        "query": "SELECT t2.protein_name FROM institution AS t1 JOIN protein AS t2 ON t1.institution_id = t2.institution_id WHERE t1.founded > 1880 OR t1.type = 'Private'",
        "schema": "CREATE TABLE protein (common_name TEXT, protein_name TEXT, Institution_id TEXT); CREATE TABLE Institution (Institution_id TEXT, Founded NUMBER, Type TEXT, Institution TEXT);"
      },
      {
        "question": "Count the union.",
        "query": "SELECT count(*) FROM institution AS t1 JOIN protein AS t2 ON t1.institution_id = t2.institution_id WHERE t1.founded > 1880 OR t1.type = 'Private'",
        "schema": "CREATE TABLE protein (common_name TEXT, Institution_id TEXT, protein_name TEXT); CREATE TABLE Institution (Institution_id TEXT, Founded NUMBER, Institution TEXT, Type TEXT);"
      }
    ],
    [
      {
        "question": "Which protein names are associated with an institution in a building with at least 20 floors?",
        "query": "SELECT t2.protein_name FROM institution AS t1 JOIN protein AS t2 ON t1.institution_id = t2.institution_id JOIN building AS t3 ON t3.building_id = t1.building_id WHERE t3.floors >= 20",
        "schema": "CREATE TABLE Institution (Institution_id TEXT, building_id TEXT, Institution TEXT, Type TEXT, Location TEXT); CREATE TABLE protein (common_name TEXT, protein_name TEXT, Institution_id TEXT); CREATE TABLE building (Name TEXT, Floors NUMBER, building_id TEXT);"
      },
      {
        "question": "Which of those have common name equal to 'Tropical Clawed Frog'?",
        "query": "SELECT t2.protein_name FROM institution AS t1 JOIN protein AS t2 ON t1.institution_id = t2.institution_id JOIN building AS t3 ON t3.building_id = t1.building_id WHERE t3.floors >= 20 AND t2.common_name = 'Tropical Clawed Frog'",
        "schema": "CREATE TABLE protein (common_name TEXT, protein_name TEXT, Institution_id TEXT); CREATE TABLE building (Floors NUMBER, Name TEXT, building_id TEXT); CREATE TABLE Institution (Type TEXT, Location TEXT, Institution_id TEXT, building_id TEXT, Institution TEXT);"
      },
      {
        "question": "Give a count of the proteins in the first query.",
        "query": "SELECT count(*) FROM institution AS t1 JOIN protein AS t2 ON t1.institution_id = t2.institution_id JOIN building AS t3 ON t3.building_id = t1.building_id WHERE t3.floors >= 20",
        "schema": "CREATE TABLE Institution (Location TEXT, Institution_id TEXT, Type TEXT, Institution TEXT, building_id TEXT); CREATE TABLE building (Floors NUMBER, Name TEXT, building_id TEXT); CREATE TABLE protein (Institution_id TEXT, protein_name TEXT, common_name TEXT);"
      }
    ]
  ],
  "coffee_shop": [
    [
      {
        "question": "show all the different member addresses.",
        "query": "SELECT DISTINCT address FROM member",
        "schema": "CREATE TABLE shop (Address TEXT); CREATE TABLE member (Name TEXT, Address TEXT, Member_ID NUMBER);"
      },
      {
        "question": "who is living in Harford?",
        "query": "SELECT name FROM member WHERE address = 'Harford'",
        "schema": "CREATE TABLE member (Member_ID NUMBER, Name TEXT, Address TEXT); CREATE TABLE shop (Address TEXT);"
      },
      {
        "question": "also include the members living in Waterbury.",
        "query": "SELECT name FROM member WHERE address = 'Harford' OR address = 'Waterbury'",
        "schema": "CREATE TABLE member (Address TEXT, Member_ID NUMBER, Name TEXT); CREATE TABLE shop (Address TEXT);"
      }
    ],
    [
      {
        "question": "how many members are under age 30?",
        "query": "SELECT count(*) FROM member WHERE age < 30",
        "schema": "CREATE TABLE member (Member_ID NUMBER, Membership_card TEXT, Name TEXT, Level_of_membership NUMBER, Age NUMBER); CREATE TABLE happy_hour_member (Member_ID NUMBER);"
      },
      {
        "question": "how about the number of members with a black membership card?",
        "query": "SELECT count(*) FROM member WHERE membership_card = 'Black'",
        "schema": "CREATE TABLE happy_hour_member (Member_ID NUMBER); CREATE TABLE member (Member_ID NUMBER, Name TEXT, Age NUMBER, Level_of_membership NUMBER, Membership_card TEXT);"
      },
      {
        "question": "what is the total number between these two groups of members?",
        "query": "SELECT count(*) FROM member WHERE membership_card = 'Black' OR age < 30",
        "schema": "CREATE TABLE member (Level_of_membership NUMBER, Name TEXT, Member_ID NUMBER, Age NUMBER, Membership_card TEXT); CREATE TABLE happy_hour_member (Member_ID NUMBER, Total_amount NUMBER);"
      },
      {
        "question": "what are their ids and names?",
        "query": "SELECT name , member_id FROM member WHERE membership_card = 'Black' OR age < 30",
        "schema": "CREATE TABLE happy_hour_member (Member_ID NUMBER, Total_amount NUMBER); CREATE TABLE member (Age NUMBER, Level_of_membership NUMBER, Membership_card TEXT, Member_ID NUMBER, Name TEXT);"
      }
    ],
    [
      {
        "question": "what are all the different membership cards?",
        "query": "SELECT DISTINCT membership_card FROM member",
        "schema": "CREATE TABLE member (Membership_card TEXT, Member_ID NUMBER);"
      },
      {
        "question": "how many members does each of them have?",
        "query": "SELECT count(*), membership_card FROM member GROUP BY membership_card",
        "schema": "CREATE TABLE member (Member_ID NUMBER, Membership_card TEXT, Name TEXT); CREATE TABLE happy_hour_member (Member_ID NUMBER);"
      },
      {
        "question": "which ones have more than 3 members?",
        "query": "SELECT membership_card FROM member GROUP BY membership_card HAVING count(*) > 3",
        "schema": "CREATE TABLE happy_hour_member (Member_ID NUMBER); CREATE TABLE member (Membership_card TEXT, Name TEXT, Member_ID NUMBER);"
      },
      {
        "question": "how about 5?",
        "query": "SELECT membership_card FROM member GROUP BY membership_card HAVING count(*) > 5",
        "schema": "CREATE TABLE member (Member_ID NUMBER, Membership_card TEXT, Name TEXT); CREATE TABLE happy_hour_member (Member_ID NUMBER);"
      }
    ],
    [
      {
        "question": "show all info about members.",
        "query": "SELECT * FROM member",
        "schema": "CREATE TABLE member (Name TEXT, Member_ID NUMBER, Level_of_membership NUMBER, Membership_card TEXT); CREATE TABLE shop (Shop_ID NUMBER); CREATE TABLE happy_hour_member (Member_ID NUMBER);"
      },
      {
        "question": "which of them are older than 40?",
        "query": "SELECT * FROM member WHERE age > 40",
        "schema": "CREATE TABLE happy_hour_member (Member_ID NUMBER); CREATE TABLE shop (Shop_ID NUMBER); CREATE TABLE member (Member_ID NUMBER, Age NUMBER, Membership_card TEXT, Name TEXT, Level_of_membership NUMBER);"
      },
      {
        "question": "for those who are younger than 30?",
        "query": "SELECT * FROM member WHERE age < 30",
        "schema": "CREATE TABLE happy_hour_member (Member_ID NUMBER); CREATE TABLE shop (Shop_ID NUMBER); CREATE TABLE member (Age NUMBER, Name TEXT, Level_of_membership NUMBER, Membership_card TEXT, Member_ID NUMBER);"
      },
      {
        "question": "Which addresses have members in both groups?",
        "query": "SELECT address FROM member WHERE age < 30 INTERSECT SELECT address FROM member WHERE age > 40",
        "schema": "CREATE TABLE happy_hour_member (Member_ID NUMBER); CREATE TABLE member (Address TEXT, Member_ID NUMBER, Membership_card TEXT, Age NUMBER, Level_of_membership NUMBER, Name TEXT); CREATE TABLE shop (Address TEXT, Shop_ID NUMBER);"
      }
    ],
    [
      {
        "question": "show the names of members living in Hartford.",
        "query": "SELECT name FROM member WHERE address = 'Hartford'",
        "schema": "CREATE TABLE member (Name TEXT, Address TEXT, Member_ID NUMBER);"
      },
      {
        "question": "also those living in Waterbury.",
        "query": "SELECT name FROM member WHERE address = 'Waterbury'",
        "schema": "CREATE TABLE member (Name TEXT, Member_ID NUMBER, Address TEXT);"
      },
      {
        "question": "which membership cards are held by members living in these two places?",
        "query": "SELECT membership_card FROM member WHERE address = 'Hartford' INTERSECT SELECT membership_card FROM member WHERE address = 'Waterbury'",
        "schema": "CREATE TABLE member (Membership_card TEXT, Address TEXT, Name TEXT, Member_ID NUMBER);"
      }
    ],
    [
      {
        "question": "what are different membership cards?",
        "query": "SELECT DISTINCT membership_card FROM member",
        "schema": "CREATE TABLE member (Membership_card TEXT, Member_ID NUMBER);"
      },
      {
        "question": "how many black ones are there?",
        "query": "SELECT count(*) FROM member WHERE membership_card = 'Black'",
        "schema": "CREATE TABLE member (Membership_card TEXT, Member_ID NUMBER, Name TEXT);"
      },
      {
        "question": "show addresses for those who have one.",
        "query": "SELECT address FROM member WHERE membership_card = 'Black'",
        "schema": "CREATE TABLE member (Address TEXT, Name TEXT, Membership_card TEXT, Member_ID NUMBER); CREATE TABLE shop (Address TEXT);"
      },
      {
        "question": "how about those who do not have one?",
        "query": "SELECT address FROM member EXCEPT SELECT address FROM member WHERE membership_card = 'Black'",
        "schema": "CREATE TABLE shop (Address TEXT); CREATE TABLE member (Address TEXT, Membership_card TEXT, Name TEXT, Member_ID NUMBER);"
      }
    ],
    [
      {
        "question": "show the scores and staff numbers for all shops.",
        "query": "SELECT num_of_staff, score FROM shop",
        "schema": "CREATE TABLE shop (Score NUMBER, Num_of_staff TEXT, Shop_ID NUMBER); CREATE TABLE happy_hour (Shop_ID NUMBER);"
      },
      {
        "question": "what are the averages for these two columns?",
        "query": "SELECT avg(num_of_staff) , avg(score) FROM shop",
        "schema": "CREATE TABLE shop (Num_of_staff TEXT, Shop_ID NUMBER, Score NUMBER); CREATE TABLE happy_hour (Shop_ID NUMBER);"
      }
    ],
    [
      {
        "question": "what is the highest score for all shops?",
        "query": "SELECT max(score) FROM shop",
        "schema": "CREATE TABLE shop (Shop_ID NUMBER, Score NUMBER); CREATE TABLE happy_hour (Shop_ID NUMBER);"
      },
      {
        "question": "how about the average?",
        "query": "SELECT avg(score) FROM shop",
        "schema": "CREATE TABLE shop (Score NUMBER, Shop_ID NUMBER); CREATE TABLE happy_hour (Shop_ID NUMBER);"
      },
      {
        "question": "what are the id and addresses of the shops whose scores are below this?",
        "query": "SELECT shop_id, address FROM shop WHERE score < (SELECT avg(score) FROM shop)",
        "schema": "CREATE TABLE happy_hour (Shop_ID NUMBER); CREATE TABLE shop (Address TEXT, Shop_ID NUMBER, Score NUMBER);"
      }
    ],
    [
      {
        "question": "Find the addresses of the shops where they have happy hour.",
        "query": "SELECT t1.address FROM shop AS t1 JOIN happy_hour AS t2 ON t1.shop_id = t2.shop_id",
        "schema": "CREATE TABLE happy_hour (HH_ID NUMBER, Shop_ID NUMBER); CREATE TABLE shop (Address TEXT, Shop_ID NUMBER);"
      },
      {
        "question": "also return the staff numbers.",
        "query": "SELECT t1.address, t1.num_of_staff FROM shop AS t1 JOIN happy_hour AS t2 ON t1.shop_id = t2.shop_id",
        "schema": "CREATE TABLE happy_hour (Shop_ID NUMBER, HH_ID NUMBER); CREATE TABLE shop (Address TEXT, Shop_ID NUMBER, Num_of_staff TEXT);"
      },
      {
        "question": "how about those where there is no happy hour?",
        "query": "SELECT address , num_of_staff FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM happy_hour)",
        "schema": "CREATE TABLE shop (Num_of_staff TEXT, Address TEXT, Shop_ID NUMBER); CREATE TABLE happy_hour (HH_ID NUMBER, Shop_ID NUMBER);"
      }
    ],
    [
      {
        "question": "show the id of the shops that have a happy hour.",
        "query": "SELECT shop_id FROM happy_hour",
        "schema": "CREATE TABLE shop (Shop_ID NUMBER); CREATE TABLE happy_hour (HH_ID NUMBER, Shop_ID NUMBER);"
      },
      {
        "question": "just show those that have happy hours in May.",
        "query": "SELECT shop_id FROM happy_hour WHERE MONTH = 'May'",
        "schema": "CREATE TABLE happy_hour (HH_ID NUMBER, Month TEXT, Shop_ID NUMBER); CREATE TABLE shop (Shop_ID NUMBER);"
      },
      {
        "question": "return their addresses too.",
        "query": "SELECT t1.address, t1.shop_id FROM shop AS t1 JOIN happy_hour AS t2 ON t1.shop_id = t2.shop_id WHERE MONTH = 'May'",
        "schema": "CREATE TABLE happy_hour (Shop_ID NUMBER, Month TEXT, HH_ID NUMBER); CREATE TABLE shop (Shop_ID NUMBER, Address TEXT); CREATE TABLE member (Address TEXT);"
      }
    ],
    [
      {
        "question": "find the number of happy hours in each shop. Also show shop id.",
        "query": "SELECT shop_id, count(*) FROM happy_hour GROUP BY shop_id",
        "schema": "CREATE TABLE shop (Shop_ID NUMBER); CREATE TABLE happy_hour_member (Member_ID NUMBER); CREATE TABLE member (Member_ID NUMBER); CREATE TABLE happy_hour (HH_ID NUMBER, Shop_ID NUMBER);"
      },
      {
        "question": "which of them has happy hour most often?",
        "query": "SELECT shop_id FROM happy_hour GROUP BY shop_id ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE member (Member_ID NUMBER); CREATE TABLE happy_hour (HH_ID NUMBER, Shop_ID NUMBER); CREATE TABLE shop (Shop_ID NUMBER); CREATE TABLE happy_hour_member (Member_ID NUMBER);"
      }
    ],
    [
      {
        "question": "how many happy hour shops are there?",
        "query": "SELECT count(*) FROM happy_hour",
        "schema": "CREATE TABLE shop (Num_of_staff TEXT, Shop_ID NUMBER); CREATE TABLE happy_hour (Num_of_shaff_in_charge NUMBER, HH_ID NUMBER, Shop_ID NUMBER);"
      },
      {
        "question": "for each month?",
        "query": "SELECT count(*) FROM happy_hour GROUP BY MONTH",
        "schema": "CREATE TABLE happy_hour (Shop_ID NUMBER, HH_ID NUMBER, Num_of_shaff_in_charge NUMBER, Month TEXT); CREATE TABLE shop (Shop_ID NUMBER, Num_of_staff TEXT, Open_Year TEXT);"
      },
      {
        "question": "Which month has the most?",
        "query": "SELECT MONTH FROM happy_hour GROUP BY MONTH ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE happy_hour (Num_of_shaff_in_charge NUMBER, Month TEXT, HH_ID NUMBER, Shop_ID NUMBER); CREATE TABLE shop (Num_of_staff TEXT, Open_Year TEXT, Shop_ID NUMBER);"
      }
    ]
  ],
  "customers_campaigns_ecommerce": [
    [
      {
        "question": "Show information for all premises.",
        "query": "SELECT * FROM premises",
        "schema": "CREATE TABLE Premises (premise_details TEXT, premises_type TEXT, premise_id NUMBER); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Customer_Addresses (premise_id NUMBER);"
      },
      {
        "question": "How many of them are there?",
        "query": "SELECT count(*) FROM premises",
        "schema": "CREATE TABLE Customer_Addresses (premise_id NUMBER); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Premises (premise_id NUMBER, premise_details TEXT, premises_type TEXT);"
      }
    ],
    [
      {
        "question": "Show information for premises.",
        "query": "SELECT * FROM premises",
        "schema": "CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Premises (premise_id NUMBER, premise_details TEXT, premises_type TEXT); CREATE TABLE Customer_Addresses (premise_id NUMBER);"
      },
      {
        "question": "Only show the premise type for all of them.",
        "query": "SELECT premises_type FROM premises",
        "schema": "CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Customer_Addresses (premise_id NUMBER); CREATE TABLE Premises (premise_details TEXT, premise_id NUMBER, premises_type TEXT);"
      },
      {
        "question": "What are the distinct types among them?",
        "query": "SELECT DISTINCT premises_type FROM premises",
        "schema": "CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Premises (premise_details TEXT, premise_id NUMBER, premises_type TEXT); CREATE TABLE Customer_Addresses (premise_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show the type for all premises.",
        "query": "SELECT premises_type FROM premises",
        "schema": "CREATE TABLE Premises (premise_details TEXT, premises_type TEXT, premise_id NUMBER); CREATE TABLE Customer_Addresses (premise_id NUMBER, address_type_code TEXT); CREATE TABLE Customers (customer_id NUMBER);"
      },
      {
        "question": "Also add their details.",
        "query": "SELECT premises_type , premise_details FROM premises",
        "schema": "CREATE TABLE Premises (premise_id NUMBER, premises_type TEXT, premise_details TEXT); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Customer_Addresses (premise_id NUMBER, address_type_code TEXT);"
      },
      {
        "question": "Order them by the premise type.",
        "query": "SELECT premises_type , premise_details FROM premises ORDER BY premises_type",
        "schema": "CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Customer_Addresses (premise_id NUMBER, address_type_code TEXT); CREATE TABLE Premises (premises_type TEXT, premise_id NUMBER, premise_details TEXT);"
      }
    ],
    [
      {
        "question": "Show all premise types.",
        "query": "SELECT premises_type FROM premises",
        "schema": "CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Premises (premises_type TEXT, premise_id NUMBER, premise_details TEXT);"
      },
      {
        "question": "Show the number of premises in each type.",
        "query": "SELECT premises_type , count(*) FROM premises GROUP BY premises_type",
        "schema": "CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Premises (premise_id NUMBER, premise_details TEXT, premises_type TEXT);"
      }
    ],
    [
      {
        "question": "Show the number of mailshot campaigns.",
        "query": "SELECT count(*) FROM mailshot_campaigns",
        "schema": "CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Mailshot_Customers (outcome_code TEXT, mailshot_id NUMBER, customer_id NUMBER); CREATE TABLE Mailshot_Campaigns (mailshot_start_date TIME, mailshot_name TEXT, product_category TEXT, mailshot_id NUMBER);"
      },
      {
        "question": "Breakdown the number by product category.",
        "query": "SELECT product_category , count(*) FROM mailshot_campaigns GROUP BY product_category",
        "schema": "CREATE TABLE Products (product_category TEXT, product_name TEXT, product_id NUMBER); CREATE TABLE Mailshot_Customers (mailshot_id NUMBER, outcome_code TEXT, customer_id NUMBER); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Mailshot_Campaigns (product_category TEXT, mailshot_start_date TIME, mailshot_name TEXT, mailshot_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show all customers id with a mailshot.",
        "query": "SELECT customer_id FROM mailshot_customers",
        "schema": "CREATE TABLE Order_Items (order_id NUMBER); CREATE TABLE Customer_Orders (customer_id NUMBER); CREATE TABLE Mailshot_Customers (customer_id NUMBER, mailshot_id NUMBER); CREATE TABLE Mailshot_Campaigns (mailshot_id NUMBER); CREATE TABLE Customer_Addresses (customer_id NUMBER); CREATE TABLE Customers (customer_name TEXT, customer_id NUMBER);"
      },
      {
        "question": "How about customer ids without any?",
        "query": "SELECT customer_id FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM mailshot_customers)",
        "schema": "CREATE TABLE Customer_Addresses (customer_id NUMBER); CREATE TABLE Order_Items (order_id NUMBER); CREATE TABLE Customer_Orders (customer_id NUMBER); CREATE TABLE Mailshot_Campaigns (mailshot_id NUMBER); CREATE TABLE Customers (customer_id NUMBER, customer_name TEXT); CREATE TABLE Mailshot_Customers (customer_id NUMBER, mailshot_id NUMBER);"
      },
      {
        "question": "Display the name and phone number for those customers.",
        "query": "SELECT customer_name , customer_phone FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM mailshot_customers)",
        "schema": "CREATE TABLE Order_Items (order_id NUMBER); CREATE TABLE Mailshot_Customers (customer_id NUMBER, mailshot_id NUMBER); CREATE TABLE Customer_Addresses (customer_id NUMBER); CREATE TABLE Mailshot_Campaigns (mailshot_id NUMBER); CREATE TABLE Customers (customer_id NUMBER, customer_name TEXT, customer_phone TEXT); CREATE TABLE Customer_Orders (customer_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show the name and phone for all customers.",
        "query": "SELECT customer_name , customer_phone FROM customers",
        "schema": "CREATE TABLE Customer_Addresses (customer_id NUMBER); CREATE TABLE Customers (customer_id NUMBER, customer_name TEXT, customer_phone TEXT); CREATE TABLE Customer_Orders (customer_id NUMBER); CREATE TABLE Mailshot_Customers (customer_id NUMBER);"
      },
      {
        "question": "Only show the results for those customers with a mailshot.",
        "query": "SELECT t1.customer_name , t1.customer_phone FROM customers AS t1 JOIN mailshot_customers AS t2 ON t1.customer_id = t2.customer_id",
        "schema": "CREATE TABLE Customer_Addresses (customer_id NUMBER); CREATE TABLE Mailshot_Customers (customer_id NUMBER, mailshot_id NUMBER, outcome_code TEXT); CREATE TABLE Customers (customer_name TEXT, customer_email TEXT, customer_phone TEXT, customer_id NUMBER); CREATE TABLE Customer_Orders (customer_id NUMBER);"
      },
      {
        "question": "Among those, how about the results for customers also with the outcome code 'No Response'.",
        "query": "SELECT t1.customer_name , t1.customer_phone FROM customers AS t1 JOIN mailshot_customers AS t2 ON t1.customer_id = t2.customer_id WHERE t2.outcome_code = 'No Response'",
        "schema": "CREATE TABLE Mailshot_Customers (outcome_code TEXT, customer_id NUMBER, mailshot_id NUMBER); CREATE TABLE Customers (customer_email TEXT, customer_id NUMBER, customer_name TEXT, customer_phone TEXT); CREATE TABLE Customer_Addresses (customer_id NUMBER); CREATE TABLE Customer_Orders (customer_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show the outcome code for all mailshot customers.",
        "query": "SELECT outcome_code FROM mailshot_customers",
        "schema": "CREATE TABLE Mailshot_Campaigns (mailshot_id NUMBER); CREATE TABLE Customers (customer_id NUMBER, customer_name TEXT); CREATE TABLE Mailshot_Customers (outcome_code TEXT, customer_id NUMBER, mailshot_id NUMBER); CREATE TABLE Customer_Orders (customer_id NUMBER); CREATE TABLE Customer_Addresses (customer_id NUMBER);"
      },
      {
        "question": "Show the count of the number of mailshots in each of those codes.",
        "query": "SELECT outcome_code , count(*) FROM mailshot_customers GROUP BY outcome_code",
        "schema": "CREATE TABLE Customers (customer_id NUMBER, customer_name TEXT); CREATE TABLE Customer_Addresses (customer_id NUMBER); CREATE TABLE Customer_Orders (customer_id NUMBER); CREATE TABLE Mailshot_Customers (outcome_code TEXT, customer_id NUMBER, mailshot_id NUMBER); CREATE TABLE Mailshot_Campaigns (mailshot_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show the names of customers.",
        "query": "SELECT customer_name FROM customers",
        "schema": "CREATE TABLE Customers (customer_id NUMBER, customer_name TEXT); CREATE TABLE Customer_Addresses (customer_id NUMBER); CREATE TABLE Customer_Orders (customer_id NUMBER); CREATE TABLE Mailshot_Customers (customer_id NUMBER);"
      },
      {
        "question": "How about the names for those who have an outcome code 'Order' of mailshots.",
        "query": "SELECT t2.customer_name FROM mailshot_customers AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id WHERE outcome_code = 'Order'",
        "schema": "CREATE TABLE Customer_Addresses (customer_id NUMBER); CREATE TABLE Mailshot_Customers (customer_id NUMBER, outcome_code TEXT, mailshot_id NUMBER); CREATE TABLE Customers (customer_name TEXT, customer_id NUMBER); CREATE TABLE Customer_Orders (order_id NUMBER, customer_id NUMBER); CREATE TABLE Order_Items (order_id NUMBER);"
      },
      {
        "question": "Only show the names of those who have at least two such codes.",
        "query": "SELECT t2.customer_name FROM mailshot_customers AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id WHERE outcome_code = 'Order' GROUP BY t1.customer_id HAVING count(*) >= 2",
        "schema": "CREATE TABLE Customer_Orders (order_id NUMBER, customer_id NUMBER); CREATE TABLE Customers (customer_id NUMBER, customer_name TEXT); CREATE TABLE Order_Items (order_id NUMBER); CREATE TABLE Mailshot_Customers (outcome_code TEXT, customer_id NUMBER, mailshot_id NUMBER); CREATE TABLE Customer_Addresses (customer_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show the name of customers with a mailshot.",
        "query": "SELECT t2.customer_name FROM mailshot_customers AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id",
        "schema": "CREATE TABLE Mailshot_Campaigns (mailshot_id NUMBER); CREATE TABLE Customer_Addresses (customer_id NUMBER); CREATE TABLE Customer_Orders (customer_id NUMBER); CREATE TABLE Customers (customer_password TEXT, customer_name TEXT, customer_id NUMBER); CREATE TABLE Mailshot_Customers (customer_id NUMBER, mailshot_id NUMBER);"
      },
      {
        "question": "Order them by the number of mailshots in descending order.",
        "query": "SELECT t2.customer_name FROM mailshot_customers AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id GROUP BY t1.customer_id ORDER BY count(*) DESC",
        "schema": "CREATE TABLE Customers (customer_password TEXT, customer_name TEXT, customer_id NUMBER); CREATE TABLE Customer_Orders (order_id NUMBER, customer_id NUMBER); CREATE TABLE Customer_Addresses (customer_id NUMBER); CREATE TABLE Mailshot_Customers (mailshot_id NUMBER, customer_id NUMBER); CREATE TABLE Mailshot_Campaigns (mailshot_id NUMBER);"
      },
      {
        "question": "Who has the most mailshots among them?",
        "query": "SELECT t2.customer_name FROM mailshot_customers AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id GROUP BY t1.customer_id ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Customers (customer_id NUMBER, customer_password TEXT, customer_name TEXT); CREATE TABLE Mailshot_Campaigns (mailshot_id NUMBER); CREATE TABLE Mailshot_Customers (customer_id NUMBER, mailshot_id NUMBER); CREATE TABLE Customer_Orders (order_id NUMBER, customer_id NUMBER); CREATE TABLE Customer_Addresses (customer_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show the name for customers.",
        "query": "SELECT customer_name FROM customers",
        "schema": "CREATE TABLE Mailshot_Customers (customer_id NUMBER); CREATE TABLE Customers (customer_name TEXT, customer_id NUMBER); CREATE TABLE Customer_Addresses (customer_id NUMBER); CREATE TABLE Customer_Orders (customer_id NUMBER);"
      },
      {
        "question": "Also show their payment methods.",
        "query": "SELECT customer_name , payment_method FROM customers",
        "schema": "CREATE TABLE Customer_Orders (customer_id NUMBER); CREATE TABLE Mailshot_Customers (customer_id NUMBER); CREATE TABLE Customer_Addresses (customer_id NUMBER); CREATE TABLE Customers (customer_name TEXT, customer_id NUMBER, payment_method TEXT);"
      },
      {
        "question": "How about the results for those haing mailshots in 'Order' outcome",
        "query": "SELECT t2.customer_name , t2.payment_method FROM mailshot_customers AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id WHERE t1.outcome_code = 'Order'",
        "schema": "CREATE TABLE Customers (customer_email TEXT, customer_id NUMBER, payment_method TEXT, customer_name TEXT); CREATE TABLE Mailshot_Customers (outcome_code TEXT, customer_id NUMBER, mailshot_id NUMBER); CREATE TABLE Products (product_id NUMBER); CREATE TABLE Order_Items (order_id NUMBER); CREATE TABLE Mailshot_Campaigns (mailshot_id NUMBER); CREATE TABLE Customer_Orders (order_id NUMBER, customer_id NUMBER); CREATE TABLE Customer_Addresses (customer_id NUMBER);"
      },
      {
        "question": "What about those also having mailshots in 'No Response' outcome?",
        "query": "SELECT t2.customer_name , t2.payment_method FROM mailshot_customers AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id WHERE t1.outcome_code = 'Order' INTERSECT SELECT t2.customer_name , t2.payment_method FROM mailshot_customers AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id WHERE t1.outcome_code = 'No Response'",
        "schema": "CREATE TABLE Products (product_id NUMBER); CREATE TABLE Customer_Orders (customer_id NUMBER, order_id NUMBER); CREATE TABLE Mailshot_Customers (customer_id NUMBER, mailshot_id NUMBER, outcome_code TEXT); CREATE TABLE Order_Items (order_id NUMBER); CREATE TABLE Customers (customer_id NUMBER, customer_name TEXT, payment_method TEXT, customer_email TEXT); CREATE TABLE Mailshot_Campaigns (mailshot_id NUMBER); CREATE TABLE Customer_Addresses (customer_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show the address type code for all customer addresses.",
        "query": "SELECT address_type_code FROM customer_addresses",
        "schema": "CREATE TABLE Premises (premise_id NUMBER, premises_type TEXT); CREATE TABLE Customer_Addresses (customer_id NUMBER, address_type_code TEXT); CREATE TABLE Customers (customer_id NUMBER, customer_address TEXT);"
      },
      {
        "question": "For each of them, also show the premise type.",
        "query": "SELECT t2.premises_type , t1.address_type_code FROM customer_addresses AS t1 JOIN premises AS t2 ON t1.premise_id = t2.premise_id",
        "schema": "CREATE TABLE Customers (customer_id NUMBER, customer_address TEXT); CREATE TABLE Premises (premise_id NUMBER, premises_type TEXT); CREATE TABLE Customer_Addresses (address_type_code TEXT, customer_id NUMBER, premise_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show information for all customer addresses.",
        "query": "SELECT * FROM customer_addresses",
        "schema": "CREATE TABLE Mailshot_Customers (customer_id NUMBER); CREATE TABLE Customer_Addresses (address_type_code TEXT, premise_id NUMBER, customer_id NUMBER); CREATE TABLE Customers (customer_address TEXT, customer_id NUMBER);"
      },
      {
        "question": "Show the address type code for all customer addresses.",
        "query": "SELECT address_type_code FROM customer_addresses",
        "schema": "CREATE TABLE Mailshot_Customers (customer_id NUMBER); CREATE TABLE Customers (customer_id NUMBER, customer_address TEXT); CREATE TABLE Customer_Addresses (customer_id NUMBER, address_type_code TEXT, premise_id NUMBER);"
      },
      {
        "question": "Filter for distinctness.",
        "query": "SELECT DISTINCT address_type_code FROM customer_addresses",
        "schema": "CREATE TABLE Mailshot_Customers (customer_id NUMBER); CREATE TABLE Customer_Addresses (customer_id NUMBER, premise_id NUMBER, address_type_code TEXT); CREATE TABLE Customers (customer_address TEXT, customer_id NUMBER);"
      }
    ],
    [
      {
        "question": "List the shipping charge and customer id for all customer orders.",
        "query": "SELECT order_shipping_charges , customer_id FROM customer_orders",
        "schema": "CREATE TABLE Customers (customer_id NUMBER, customer_name TEXT); CREATE TABLE Customer_Addresses (customer_id NUMBER); CREATE TABLE Order_Items (order_id NUMBER); CREATE TABLE Mailshot_Customers (customer_id NUMBER); CREATE TABLE Customer_Orders (order_id NUMBER, order_shipping_charges TEXT, shipping_method_code TEXT, customer_id NUMBER);"
      },
      {
        "question": "How about the results with order status 'Cancelled'?",
        "query": "SELECT order_shipping_charges , customer_id FROM customer_orders WHERE order_status_code = 'Cancelled'",
        "schema": "CREATE TABLE Customer_Addresses (customer_id NUMBER); CREATE TABLE Order_Items (order_id NUMBER, order_item_status_code TEXT); CREATE TABLE Customers (customer_name TEXT, customer_id NUMBER); CREATE TABLE Mailshot_Customers (customer_id NUMBER, outcome_code TEXT); CREATE TABLE Customer_Orders (order_shipping_charges TEXT, order_id NUMBER, shipping_method_code TEXT, order_status_code TEXT, customer_id NUMBER);"
      },
      {
        "question": "How about the results with order status 'Paid'.",
        "query": "SELECT order_shipping_charges , customer_id FROM customer_orders WHERE order_status_code = 'Paid'",
        "schema": "CREATE TABLE Mailshot_Customers (customer_id NUMBER, outcome_code TEXT); CREATE TABLE Customers (customer_id NUMBER, customer_name TEXT, payment_method TEXT); CREATE TABLE Customer_Orders (order_id NUMBER, shipping_method_code TEXT, order_shipping_charges TEXT, customer_id NUMBER, order_status_code TEXT); CREATE TABLE Order_Items (order_id NUMBER, order_item_status_code TEXT); CREATE TABLE Customer_Addresses (customer_id NUMBER);"
      },
      {
        "question": "Show the results of both.",
        "query": "SELECT order_shipping_charges , customer_id FROM customer_orders WHERE order_status_code = 'Cancelled' OR order_status_code = 'Paid'",
        "schema": "CREATE TABLE Order_Items (order_item_status_code TEXT, order_id NUMBER); CREATE TABLE Customer_Orders (shipping_method_code TEXT, order_id NUMBER, customer_id NUMBER, order_shipping_charges TEXT, order_status_code TEXT); CREATE TABLE Customers (customer_id NUMBER, customer_name TEXT, payment_method TEXT); CREATE TABLE Customer_Addresses (customer_id NUMBER); CREATE TABLE Mailshot_Customers (outcome_code TEXT, customer_id NUMBER);"
      }
    ]
  ],
  "local_govt_mdm": [
    [
      {
        "question": "What are all the cross reference codes?",
        "query": "SELECT source_system_code FROM cmi_cross_references GROUP BY source_system_code",
        "schema": "CREATE TABLE CMI_Cross_References (cmi_cross_ref_id NUMBER, source_system_code TEXT, master_customer_id NUMBER);"
      },
      {
        "question": "Show me the cross references with code as Tax.",
        "query": "SELECT * FROM cmi_cross_references WHERE source_system_code = 'Tax'",
        "schema": "CREATE TABLE Council_Tax (cmi_cross_ref_id NUMBER); CREATE TABLE CMI_Cross_References (source_system_code TEXT, master_customer_id NUMBER, cmi_cross_ref_id NUMBER);"
      },
      {
        "question": "What are the details of the cmi masters of them?",
        "query": "SELECT t1.cmi_details FROM customer_master_index AS t1 JOIN cmi_cross_references AS t2 ON t1.master_customer_id = t2.master_customer_id WHERE t2.source_system_code = 'Tax'",
        "schema": "CREATE TABLE Customer_Master_Index (master_customer_id NUMBER, cmi_details TEXT); CREATE TABLE CMI_Cross_References (master_customer_id NUMBER, cmi_cross_ref_id NUMBER, source_system_code TEXT); CREATE TABLE Council_Tax (cmi_cross_ref_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show me all the council tax entries.",
        "query": "SELECT * FROM council_tax",
        "schema": "CREATE TABLE CMI_Cross_References (cmi_cross_ref_id NUMBER); CREATE TABLE Parking_Fines (council_tax_id NUMBER, cmi_cross_ref_id NUMBER); CREATE TABLE Council_Tax (cmi_cross_ref_id NUMBER, council_tax_id NUMBER);"
      },
      {
        "question": "Show me distinct cmi cross reference ids in those.",
        "query": "SELECT cmi_cross_ref_id FROM council_tax GROUP BY cmi_cross_ref_id",
        "schema": "CREATE TABLE CMI_Cross_References (source_system_code TEXT, cmi_cross_ref_id NUMBER, master_customer_id NUMBER); CREATE TABLE Parking_Fines (council_tax_id NUMBER, cmi_cross_ref_id NUMBER); CREATE TABLE Council_Tax (council_tax_id NUMBER, cmi_cross_ref_id NUMBER); CREATE TABLE Electoral_Register (cmi_cross_ref_id NUMBER);"
      },
      {
        "question": "What about their corresponding source system code?",
        "query": "SELECT t1.cmi_cross_ref_id , t1.source_system_code FROM cmi_cross_references AS t1 JOIN council_tax AS t2 ON t1.cmi_cross_ref_id = t2.cmi_cross_ref_id GROUP BY t1.cmi_cross_ref_id HAVING count(*) >= 1",
        "schema": "CREATE TABLE Parking_Fines (council_tax_id NUMBER, cmi_cross_ref_id NUMBER); CREATE TABLE Council_Tax (cmi_cross_ref_id NUMBER, council_tax_id NUMBER); CREATE TABLE CMI_Cross_References (source_system_code TEXT, master_customer_id NUMBER, cmi_cross_ref_id NUMBER); CREATE TABLE Electoral_Register (cmi_cross_ref_id NUMBER);"
      }
    ],
    [
      {
        "question": "How many business rates are there?",
        "query": "SELECT count(*) FROM business_rates",
        "schema": "CREATE TABLE Business_Rates (business_rates_id NUMBER, cmi_cross_ref_id NUMBER); CREATE TABLE CMI_Cross_References (cmi_cross_ref_id NUMBER);"
      },
      {
        "question": "What are the distinct cmi cross reference ids in those business rates?",
        "query": "SELECT cmi_cross_ref_id FROM business_rates GROUP BY cmi_cross_ref_id",
        "schema": "CREATE TABLE CMI_Cross_References (source_system_code TEXT, cmi_cross_ref_id NUMBER); CREATE TABLE Business_Rates (business_rates_id NUMBER, cmi_cross_ref_id NUMBER);"
      },
      {
        "question": "Show me the number of business rates related to each of them.",
        "query": "SELECT cmi_cross_ref_id,count(*) FROM business_rates GROUP BY cmi_cross_ref_id",
        "schema": "CREATE TABLE Business_Rates (business_rates_id NUMBER, cmi_cross_ref_id NUMBER); CREATE TABLE CMI_Cross_References (source_system_code TEXT, cmi_cross_ref_id NUMBER);"
      },
      {
        "question": "Include the master customer id too.",
        "query": "SELECT t2.cmi_cross_ref_id , t2.master_customer_id , count(*) FROM business_rates AS t1 JOIN cmi_cross_references AS t2 ON t1.cmi_cross_ref_id = t2.cmi_cross_ref_id GROUP BY t2.cmi_cross_ref_id",
        "schema": "CREATE TABLE CMI_Cross_References (master_customer_id NUMBER, source_system_code TEXT, cmi_cross_ref_id NUMBER); CREATE TABLE Customer_Master_Index (cmi_details TEXT, master_customer_id NUMBER); CREATE TABLE Business_Rates (cmi_cross_ref_id NUMBER, business_rates_id NUMBER);"
      }
    ],
    [
      {
        "question": "What are the cmi cross reference ids that are related to the benefits and overpayments.",
        "query": "SELECT cmi_cross_ref_id FROM benefits_overpayments",
        "schema": "CREATE TABLE Benefits_Overpayments (cmi_cross_ref_id NUMBER, council_tax_id NUMBER); CREATE TABLE Council_Tax (cmi_cross_ref_id NUMBER, council_tax_id NUMBER); CREATE TABLE CMI_Cross_References (source_system_code TEXT, cmi_cross_ref_id NUMBER, master_customer_id NUMBER);"
      },
      {
        "question": "Show me their source system codes along with the benefit id.",
        "query": "SELECT t1.source_system_code , t2.council_tax_id FROM cmi_cross_references AS t1 JOIN benefits_overpayments AS t2 ON t1.cmi_cross_ref_id = t2.cmi_cross_ref_id",
        "schema": "CREATE TABLE Council_Tax (cmi_cross_ref_id NUMBER, council_tax_id NUMBER); CREATE TABLE Benefits_Overpayments (council_tax_id NUMBER, cmi_cross_ref_id NUMBER); CREATE TABLE CMI_Cross_References (source_system_code TEXT, cmi_cross_ref_id NUMBER, master_customer_id NUMBER);"
      },
      {
        "question": "Order them by the benefit id.",
        "query": "SELECT t1.source_system_code , t2.council_tax_id FROM cmi_cross_references AS t1 JOIN benefits_overpayments AS t2 ON t1.cmi_cross_ref_id = t2.cmi_cross_ref_id ORDER BY t2.council_tax_id",
        "schema": "CREATE TABLE Benefits_Overpayments (cmi_cross_ref_id NUMBER, council_tax_id NUMBER); CREATE TABLE Council_Tax (cmi_cross_ref_id NUMBER, council_tax_id NUMBER); CREATE TABLE CMI_Cross_References (cmi_cross_ref_id NUMBER, master_customer_id NUMBER, source_system_code TEXT);"
      }
    ],
    [
      {
        "question": "Show me the detail of all the customer master indices.",
        "query": "SELECT cmi_details FROM customer_master_index",
        "schema": "CREATE TABLE CMI_Cross_References (cmi_cross_ref_id NUMBER, master_customer_id NUMBER); CREATE TABLE Customer_Master_Index (master_customer_id NUMBER, cmi_details TEXT);"
      },
      {
        "question": "Show me the id of those whose detial is not 'Schmidt, Kertzmann and Lubowitz'.",
        "query": "SELECT master_customer_id FROM customer_master_index WHERE cmi_details != 'Schmidt , Kertzmann and Lubowitz'",
        "schema": "CREATE TABLE CMI_Cross_References (cmi_cross_ref_id NUMBER, master_customer_id NUMBER); CREATE TABLE Customer_Master_Index (cmi_details TEXT, master_customer_id NUMBER);"
      },
      {
        "question": "What are the renting arears tax ids related to them?",
        "query": "SELECT t1.council_tax_id FROM rent_arrears AS t1 JOIN cmi_cross_references AS t2 ON t1.cmi_cross_ref_id = t2.cmi_cross_ref_id JOIN customer_master_index AS t3 ON t3.master_customer_id = t2.master_customer_id WHERE t3.cmi_details != 'Schmidt , Kertzmann and Lubowitz'",
        "schema": "CREATE TABLE Customer_Master_Index (master_customer_id NUMBER, cmi_details TEXT); CREATE TABLE Rent_Arrears (cmi_cross_ref_id NUMBER, council_tax_id NUMBER); CREATE TABLE CMI_Cross_References (cmi_cross_ref_id NUMBER, master_customer_id NUMBER);"
      }
    ],
    [
      {
        "question": "What are the ids of all the electoral register?",
        "query": "SELECT electoral_register_id FROM electoral_register",
        "schema": "CREATE TABLE Electoral_Register (cmi_cross_ref_id NUMBER, electoral_register_id NUMBER); CREATE TABLE CMI_Cross_References (cmi_cross_ref_id NUMBER);"
      },
      {
        "question": "What about their cross reference source system codes?",
        "query": "SELECT t1.electoral_register_id, t2.source_system_code FROM electoral_register AS t1 JOIN cmi_cross_references AS t2 ON t1.cmi_cross_ref_id = t2.cmi_cross_ref_id",
        "schema": "CREATE TABLE Electoral_Register (electoral_register_id NUMBER, cmi_cross_ref_id NUMBER); CREATE TABLE CMI_Cross_References (cmi_cross_ref_id NUMBER, source_system_code TEXT);"
      },
      {
        "question": "Show me those with source system code 'Electoral' or 'Tax'.",
        "query": "SELECT t1.electoral_register_id FROM electoral_register AS t1 JOIN cmi_cross_references AS t2 ON t1.cmi_cross_ref_id = t2.cmi_cross_ref_id WHERE t2.source_system_code = 'Electoral' OR t2.source_system_code = 'Tax'",
        "schema": "CREATE TABLE Council_Tax (council_tax_id NUMBER, cmi_cross_ref_id NUMBER); CREATE TABLE Electoral_Register (cmi_cross_ref_id NUMBER, electoral_register_id NUMBER); CREATE TABLE CMI_Cross_References (source_system_code TEXT, cmi_cross_ref_id NUMBER);"
      }
    ],
    [
      {
        "question": "What are the details of all the master customers?",
        "query": "SELECT cmi_details FROM customer_master_index",
        "schema": "CREATE TABLE Customer_Master_Index (cmi_details TEXT, master_customer_id NUMBER); CREATE TABLE CMI_Cross_References (cmi_cross_ref_id NUMBER, master_customer_id NUMBER);"
      },
      {
        "question": "Show me the id of one with details 'Gottlieb, Becker and Wyman'.",
        "query": "SELECT master_customer_id FROM customer_master_index WHERE cmi_details = 'Gottlieb, Becker and Wyman'",
        "schema": "CREATE TABLE Customer_Master_Index (cmi_details TEXT, master_customer_id NUMBER); CREATE TABLE CMI_Cross_References (cmi_cross_ref_id NUMBER, master_customer_id NUMBER);"
      },
      {
        "question": "Show me the distinct cross reference source system codes related to it.",
        "query": "SELECT DISTINCT t2.source_system_code FROM customer_master_index AS t1 JOIN cmi_cross_references AS t2 ON t1.master_customer_id = t2.master_customer_id WHERE t1.cmi_details = 'Gottlieb, Becker and Wyman'",
        "schema": "CREATE TABLE CMI_Cross_References (master_customer_id NUMBER, cmi_cross_ref_id NUMBER, source_system_code TEXT); CREATE TABLE Customer_Master_Index (master_customer_id NUMBER, cmi_details TEXT);"
      }
    ],
    [
      {
        "question": "Show me all the cmi cross reference ids.",
        "query": "SELECT cmi_cross_ref_id FROM cmi_cross_references",
        "schema": "CREATE TABLE Parking_Fines (cmi_cross_ref_id NUMBER); CREATE TABLE Council_Tax (cmi_cross_ref_id NUMBER); CREATE TABLE Electoral_Register (cmi_cross_ref_id NUMBER); CREATE TABLE CMI_Cross_References (master_customer_id NUMBER, cmi_cross_ref_id NUMBER, source_system_code TEXT); CREATE TABLE Customer_Master_Index (master_customer_id NUMBER);"
      },
      {
        "question": "What about those not related to any parking taxes?",
        "query": "SELECT cmi_cross_ref_id FROM cmi_cross_references EXCEPT SELECT cmi_cross_ref_id FROM parking_fines",
        "schema": "CREATE TABLE Electoral_Register (cmi_cross_ref_id NUMBER); CREATE TABLE Customer_Master_Index (master_customer_id NUMBER); CREATE TABLE CMI_Cross_References (cmi_cross_ref_id NUMBER, master_customer_id NUMBER, source_system_code TEXT); CREATE TABLE Council_Tax (council_tax_id NUMBER, cmi_cross_ref_id NUMBER); CREATE TABLE Parking_Fines (cmi_cross_ref_id NUMBER, council_tax_id NUMBER);"
      }
    ]
  ],
  "csu_1": [
    [
      {
        "question": "How many campuses opened after 1935?",
        "query": "SELECT count(*) FROM campuses WHERE YEAR >= 1935",
        "schema": "CREATE TABLE Campuses (Year NUMBER, Campus TEXT, Id NUMBER);"
      },
      {
        "question": "Among these campuses, how many of them opened before 1939?",
        "query": "SELECT count(*) FROM campuses WHERE YEAR >= 1935 AND YEAR <= 1939",
        "schema": "CREATE TABLE Campuses (Campus TEXT, Year NUMBER, Id NUMBER);"
      },
      {
        "question": "Show its name.",
        "query": "SELECT campus FROM campuses WHERE YEAR >= 1935 AND YEAR <= 1939",
        "schema": "CREATE TABLE Campuses (County TEXT, Campus TEXT, Location TEXT, Id NUMBER, Year NUMBER);"
      }
    ],
    [
      {
        "question": "Which campuses are in Northridge, Los Angeles?",
        "query": "SELECT campus FROM campuses WHERE LOCATION = \"Northridge\" AND county = \"Los Angeles\"",
        "schema": "CREATE TABLE degrees (Campus NUMBER, Degrees NUMBER); CREATE TABLE Campuses (Location TEXT, Campus TEXT, Id NUMBER, County TEXT);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT count(*) FROM campuses WHERE LOCATION = \"Northridge\" AND county = \"Los Angeles\"",
        "schema": "CREATE TABLE Campuses (Campus TEXT, Location TEXT, County TEXT, Id NUMBER); CREATE TABLE degrees (Degrees NUMBER, Campus NUMBER);"
      },
      {
        "question": "How about the number of campuses that are in San Francisco, San Francisco?",
        "query": "SELECT count(*) FROM campuses WHERE LOCATION = \"San Francisco\" AND county = \"San Francisco\"",
        "schema": "CREATE TABLE degrees (Campus NUMBER, Degrees NUMBER); CREATE TABLE Campuses (County TEXT, Campus TEXT, Id NUMBER, Location TEXT);"
      },
      {
        "question": "Please add them.",
        "query": "SELECT count(*) FROM (SELECT campus FROM campuses WHERE LOCATION = \"Northridge\" AND county = \"Los Angeles\" UNION SELECT campus FROM campuses WHERE LOCATION = \"San Francisco\" AND county = \"San Francisco\")",
        "schema": "CREATE TABLE Campuses (Id NUMBER, Location TEXT, Campus TEXT, County TEXT); CREATE TABLE degrees (Campus NUMBER, Degrees NUMBER);"
      },
      {
        "question": "Show the names of the campuses.",
        "query": "SELECT campus FROM campuses WHERE LOCATION = \"Northridge\" AND county = \"Los Angeles\" UNION SELECT campus FROM campuses WHERE LOCATION = \"San Francisco\" AND county = \"San Francisco\"",
        "schema": "CREATE TABLE Campuses (Campus TEXT, County TEXT, Id NUMBER, Location TEXT); CREATE TABLE degrees (Degrees NUMBER, Campus NUMBER);"
      }
    ],
    [
      {
        "question": "What is the campus fee of \"California State University-Channel Islands\" in year 2003?",
        "query": "SELECT campusfee FROM campuses AS t1 JOIN csu_fees AS t2 ON t1.id = t2.campus WHERE t1.campus = \"California State University-Channel Islands\" AND t2.year = 2003",
        "schema": "CREATE TABLE csu_fees (Campus NUMBER, Year NUMBER, CampusFee NUMBER); CREATE TABLE faculty (Campus NUMBER); CREATE TABLE Campuses (Campus TEXT, Year NUMBER, County TEXT, Id NUMBER);"
      },
      {
        "question": "How about \"San Jose State University\" in year 1995?",
        "query": "SELECT campusfee FROM campuses AS t1 JOIN csu_fees AS t2 ON t1.id = t2.campus WHERE t1.campus = \"San Jose State University\" AND t2.year = 1995",
        "schema": "CREATE TABLE Campuses (County TEXT, Id NUMBER, Campus TEXT, Year NUMBER); CREATE TABLE faculty (Campus NUMBER); CREATE TABLE csu_fees (Year NUMBER, Campus NUMBER, CampusFee NUMBER);"
      },
      {
        "question": "How about \"San Jose State University\" in year 1996?",
        "query": "SELECT campusfee FROM campuses AS t1 JOIN csu_fees AS t2 ON t1.id = t2.campus WHERE t1.campus = \"San Jose State University\" AND t2.year = 1996",
        "schema": "CREATE TABLE csu_fees (Year NUMBER, CampusFee NUMBER, Campus NUMBER); CREATE TABLE faculty (Campus NUMBER); CREATE TABLE Campuses (Year NUMBER, Campus TEXT, County TEXT, Id NUMBER);"
      }
    ],
    [
      {
        "question": "Show the campus fee of all campuses in year 1996.",
        "query": "SELECT campusfee FROM campuses AS t1 JOIN csu_fees AS t2 ON t1.id = t2.campus WHERE t2.year = 1996",
        "schema": "CREATE TABLE faculty (Year NUMBER, Campus NUMBER); CREATE TABLE csu_fees (CampusFee NUMBER, Campus NUMBER, Year NUMBER); CREATE TABLE Campuses (Year NUMBER, Campus TEXT, Id NUMBER); CREATE TABLE enrollments (Campus NUMBER); CREATE TABLE discipline_enrollments (Campus NUMBER);"
      },
      {
        "question": "What is the highest among them?",
        "query": "SELECT max(campusfee) FROM campuses AS t1 JOIN csu_fees AS t2 ON t1.id = t2.campus WHERE t2.year = 1996",
        "schema": "CREATE TABLE enrollments (Campus NUMBER); CREATE TABLE faculty (Campus NUMBER, Year NUMBER); CREATE TABLE csu_fees (Year NUMBER, Campus NUMBER, CampusFee NUMBER); CREATE TABLE Campuses (Year NUMBER, Campus TEXT, Id NUMBER); CREATE TABLE discipline_enrollments (Campus NUMBER);"
      },
      {
        "question": "What is the fee of \"San Francisco State University\"?",
        "query": "SELECT campusfee FROM campuses AS t1 JOIN csu_fees AS t2 ON t1.id = t2.campus WHERE t1.campus = \"San Francisco State University\" AND t2.year = 1996",
        "schema": "CREATE TABLE csu_fees (Year NUMBER, CampusFee NUMBER, Campus NUMBER); CREATE TABLE Campuses (County TEXT, Campus TEXT, Id NUMBER, Year NUMBER); CREATE TABLE enrollments (Campus NUMBER); CREATE TABLE discipline_enrollments (Campus NUMBER); CREATE TABLE faculty (Campus NUMBER, Year NUMBER);"
      }
    ],
    [
      {
        "question": "What is the maximum campus fee?",
        "query": "SELECT max(campusfee) FROM csu_fees",
        "schema": "CREATE TABLE enrollments (Campus NUMBER); CREATE TABLE Campuses (Id NUMBER, Campus TEXT); CREATE TABLE csu_fees (Campus NUMBER, CampusFee NUMBER, Year NUMBER); CREATE TABLE faculty (Campus NUMBER); CREATE TABLE discipline_enrollments (Campus NUMBER);"
      },
      {
        "question": "How many universities are there?",
        "query": "SELECT count(*) FROM csu_fees",
        "schema": "CREATE TABLE enrollments (Campus NUMBER); CREATE TABLE faculty (Campus NUMBER); CREATE TABLE discipline_enrollments (Campus NUMBER); CREATE TABLE Campuses (Campus TEXT, Id NUMBER); CREATE TABLE csu_fees (CampusFee NUMBER, Campus NUMBER, Year NUMBER);"
      },
      {
        "question": "How about the number of universities whose campus fee is greater than the average campus fee?",
        "query": "SELECT count(*) FROM csu_fees WHERE campusfee > (SELECT avg(campusfee) FROM csu_fees)",
        "schema": "CREATE TABLE discipline_enrollments (Campus NUMBER); CREATE TABLE enrollments (Campus NUMBER); CREATE TABLE faculty (Campus NUMBER); CREATE TABLE csu_fees (Year NUMBER, CampusFee NUMBER, Campus NUMBER); CREATE TABLE Campuses (Campus TEXT, Id NUMBER);"
      }
    ],
    [
      {
        "question": "How many universities are in Los Angeles?",
        "query": "SELECT count(campus) FROM campuses WHERE county = \"Los Angeles\"",
        "schema": "CREATE TABLE Campuses (Location TEXT, County TEXT, Campus TEXT, Id NUMBER); CREATE TABLE discipline_enrollments (Campus NUMBER); CREATE TABLE enrollments (Campus NUMBER); CREATE TABLE faculty (Campus NUMBER);"
      },
      {
        "question": "How many of them opened after 1950?",
        "query": "SELECT count(*) FROM campuses WHERE county = \"Los Angeles\" AND YEAR > 1950",
        "schema": "CREATE TABLE Campuses (County TEXT, Campus TEXT, Id NUMBER, Location TEXT, Year NUMBER); CREATE TABLE faculty (Campus NUMBER); CREATE TABLE enrollments (Campus NUMBER); CREATE TABLE discipline_enrollments (Campus NUMBER);"
      },
      {
        "question": "Please show their names.",
        "query": "SELECT campus FROM campuses WHERE county = \"Los Angeles\" AND YEAR > 1950",
        "schema": "CREATE TABLE enrollments (Campus NUMBER); CREATE TABLE faculty (Campus NUMBER); CREATE TABLE Campuses (Location TEXT, Id NUMBER, Campus TEXT, Year NUMBER, County TEXT); CREATE TABLE discipline_enrollments (Campus NUMBER);"
      }
    ],
    [
      {
        "question": "What is the total number of degrees conferred?",
        "query": "SELECT sum(degrees) FROM degrees",
        "schema": "CREATE TABLE degrees (Campus NUMBER, Degrees NUMBER, Year NUMBER); CREATE TABLE Campuses (Id NUMBER, Campus TEXT);"
      },
      {
        "question": "How many degrees are conferred in each year?",
        "query": "SELECT YEAR, count(*) FROM degrees GROUP BY YEAR",
        "schema": "CREATE TABLE Campuses (Campus TEXT, Id NUMBER, Year NUMBER); CREATE TABLE faculty (Year NUMBER, Faculty NUMBER); CREATE TABLE degrees (Year NUMBER, Degrees NUMBER, Campus NUMBER);"
      },
      {
        "question": "Which year has the most degrees conferred?",
        "query": "SELECT YEAR FROM degrees GROUP BY YEAR ORDER BY sum(degrees) DESC LIMIT 1",
        "schema": "CREATE TABLE faculty (Faculty NUMBER, Year NUMBER); CREATE TABLE degrees (Degrees NUMBER, Year NUMBER, Campus NUMBER); CREATE TABLE Campuses (Campus TEXT, Id NUMBER, Year NUMBER);"
      }
    ],
    [
      {
        "question": "How many campuses are there that have degrees conferred?",
        "query": "SELECT count(DISTINCT campus) FROM degrees",
        "schema": "CREATE TABLE Campuses (Campus TEXT, Id NUMBER); CREATE TABLE faculty (Campus NUMBER, Faculty NUMBER); CREATE TABLE degrees (Degrees NUMBER, Campus NUMBER, Year NUMBER); CREATE TABLE csu_fees (Campus NUMBER);"
      },
      {
        "question": "How many degrees does each campus confer?",
        "query": "SELECT campus, count(*) FROM degrees GROUP BY campus",
        "schema": "CREATE TABLE csu_fees (Campus NUMBER); CREATE TABLE Campuses (Campus TEXT, Id NUMBER); CREATE TABLE faculty (Faculty NUMBER, Campus NUMBER); CREATE TABLE degrees (Degrees NUMBER, Year NUMBER, Campus NUMBER);"
      },
      {
        "question": "Which campus had the most degrees conferred in 1990?",
        "query": "SELECT campus FROM degrees WHERE YEAR = 2002 GROUP BY campus ORDER BY sum(degrees) DESC LIMIT 1",
        "schema": "CREATE TABLE csu_fees (Campus NUMBER); CREATE TABLE Campuses (Year NUMBER, Campus TEXT, Id NUMBER); CREATE TABLE faculty (Faculty NUMBER, Campus NUMBER, Year NUMBER); CREATE TABLE degrees (Campus NUMBER, Year NUMBER, Degrees NUMBER);"
      },
      {
        "question": "How about overall?",
        "query": "SELECT campus FROM degrees GROUP BY campus ORDER BY sum(degrees) DESC LIMIT 1",
        "schema": "CREATE TABLE faculty (Campus NUMBER, Faculty NUMBER, Year NUMBER); CREATE TABLE Campuses (Campus TEXT, Id NUMBER, Year NUMBER); CREATE TABLE csu_fees (Campus NUMBER); CREATE TABLE degrees (Year NUMBER, Campus NUMBER, Degrees NUMBER);"
      }
    ],
    [
      {
        "question": "How many faculties are there in Campus 1 in year 2002?",
        "query": "SELECT faculty FROM faculty WHERE YEAR = 2002 AND campus = 1",
        "schema": "CREATE TABLE faculty (Year NUMBER, Faculty NUMBER, Campus NUMBER); CREATE TABLE Campuses (Year NUMBER, Id NUMBER, Campus TEXT); CREATE TABLE degrees (Campus NUMBER, Degrees NUMBER, Year NUMBER);"
      },
      {
        "question": "Which campus had the most faculty in year 2002?",
        "query": "SELECT t1.campus FROM campuses AS t1 JOIN faculty AS t2 ON t1.id = t2.campus WHERE t2.year = 2002 ORDER BY t2.faculty DESC LIMIT 1",
        "schema": "CREATE TABLE faculty (Year NUMBER, Faculty NUMBER, Campus NUMBER); CREATE TABLE Campuses (Id NUMBER, Year NUMBER, Campus TEXT); CREATE TABLE degrees (Degrees NUMBER, Year NUMBER, Campus NUMBER);"
      },
      {
        "question": "How about in year 2003?",
        "query": "SELECT t1.campus FROM campuses AS t1 JOIN faculty AS t2 ON t1.id = t2.campus WHERE t2.year = 2003 ORDER BY t2.faculty DESC LIMIT 1",
        "schema": "CREATE TABLE Campuses (Year NUMBER, Id NUMBER, Campus TEXT); CREATE TABLE degrees (Degrees NUMBER, Campus NUMBER, Year NUMBER); CREATE TABLE faculty (Campus NUMBER, Faculty NUMBER, Year NUMBER);"
      }
    ],
    [
      {
        "question": "How many different campuses are there?",
        "query": "SELECT count(*) FROM campuses",
        "schema": "CREATE TABLE Campuses (Id NUMBER, Location TEXT, Campus TEXT, County TEXT); CREATE TABLE faculty (Campus NUMBER); CREATE TABLE discipline_enrollments (Campus NUMBER); CREATE TABLE enrollments (Campus NUMBER); CREATE TABLE csu_fees (Campus NUMBER); CREATE TABLE degrees (Campus NUMBER);"
      },
      {
        "question": "How many degrees are granted in each campus over all years?",
        "query": "SELECT t1.campus , sum(t2.degrees) FROM campuses AS t1 JOIN degrees AS t2 ON t1.id = t2.campus GROUP BY t1.campus",
        "schema": "CREATE TABLE Campuses (County TEXT, Campus TEXT, Location TEXT, Id NUMBER, Year NUMBER); CREATE TABLE enrollments (Campus NUMBER); CREATE TABLE faculty (Campus NUMBER); CREATE TABLE degrees (Degrees NUMBER, Year NUMBER, Campus NUMBER); CREATE TABLE discipline_enrollments (Campus NUMBER); CREATE TABLE csu_fees (CampusFee NUMBER, Campus NUMBER);"
      },
      {
        "question": "How about between 1998 and 2002?",
        "query": "SELECT t1.campus , sum(t2.degrees) FROM campuses AS t1 JOIN degrees AS t2 ON t1.id = t2.campus WHERE t2.year >= 1998 AND t2.year <= 2002 GROUP BY t1.campus",
        "schema": "CREATE TABLE csu_fees (CampusFee NUMBER, Campus NUMBER); CREATE TABLE faculty (Campus NUMBER); CREATE TABLE degrees (Degrees NUMBER, Year NUMBER, Campus NUMBER); CREATE TABLE discipline_enrollments (Campus NUMBER); CREATE TABLE enrollments (Campus NUMBER); CREATE TABLE Campuses (Location TEXT, Year NUMBER, Campus TEXT, County TEXT, Id NUMBER);"
      }
    ],
    [
      {
        "question": "How many campuses are in Orange county?",
        "query": "SELECT count(*) FROM campuses WHERE county = \"Orange\"",
        "schema": "CREATE TABLE faculty (Campus NUMBER); CREATE TABLE enrollments (Campus NUMBER); CREATE TABLE discipline_enrollments (Campus NUMBER); CREATE TABLE Campuses (County TEXT, Location TEXT, Campus TEXT, Id NUMBER);"
      },
      {
        "question": "How many degrees have these campuses granted over all years?",
        "query": "SELECT t1.campus , sum(t2.degrees) FROM campuses AS t1 JOIN degrees AS t2 ON t1.id = t2.campus WHERE t1.county = \"Orange\" GROUP BY t1.campus",
        "schema": "CREATE TABLE enrollments (Campus NUMBER); CREATE TABLE degrees (Year NUMBER, Campus NUMBER, Degrees NUMBER); CREATE TABLE Campuses (Year NUMBER, Id NUMBER, Location TEXT, County TEXT, Campus TEXT); CREATE TABLE discipline_enrollments (Campus NUMBER); CREATE TABLE faculty (Campus NUMBER);"
      },
      {
        "question": "How about the number after year 2000?",
        "query": "SELECT t1.campus , sum(t2.degrees) FROM campuses AS t1 JOIN degrees AS t2 ON t1.id = t2.campus WHERE t1.county = \"Orange\" AND t2.year >= 2000 GROUP BY t1.campus",
        "schema": "CREATE TABLE Campuses (County TEXT, Campus TEXT, Year NUMBER, Location TEXT, Id NUMBER); CREATE TABLE discipline_enrollments (Campus NUMBER); CREATE TABLE degrees (Year NUMBER, Degrees NUMBER, Campus NUMBER); CREATE TABLE enrollments (Campus NUMBER); CREATE TABLE faculty (Campus NUMBER);"
      }
    ],
    [
      {
        "question": "How many campuses are there in Orange county?",
        "query": "SELECT count(*) FROM campuses WHERE county = \"Orange\"",
        "schema": "CREATE TABLE faculty (Campus NUMBER); CREATE TABLE enrollments (Campus NUMBER); CREATE TABLE discipline_enrollments (Campus NUMBER); CREATE TABLE Campuses (Id NUMBER, County TEXT, Location TEXT, Campus TEXT);"
      },
      {
        "question": "How many faculties are there in each campus in 2002?",
        "query": "SELECT t1.campus, t2.faculty FROM campuses AS t1 JOIN faculty AS t2 ON t1.id = t2.campus WHERE t2.year = 2002",
        "schema": "CREATE TABLE enrollments (Campus NUMBER); CREATE TABLE faculty (Campus NUMBER, Faculty NUMBER, Year NUMBER); CREATE TABLE degrees (Campus NUMBER, Year NUMBER, Degrees NUMBER); CREATE TABLE Campuses (Id NUMBER, Campus TEXT, Location TEXT, County TEXT, Year NUMBER); CREATE TABLE discipline_enrollments (Campus NUMBER);"
      },
      {
        "question": "What campus has the largest faculty in Orange county in year 2002?",
        "query": "SELECT max(faculty) FROM campuses AS t1 JOIN faculty AS t2 ON t1.id = t2.campus WHERE t2.year = 2002 AND t1.county = \"Orange\"",
        "schema": "CREATE TABLE enrollments (Campus NUMBER); CREATE TABLE faculty (Campus NUMBER, Faculty NUMBER, Year NUMBER); CREATE TABLE degrees (Campus NUMBER, Year NUMBER, Degrees NUMBER); CREATE TABLE Campuses (Year NUMBER, Campus TEXT, Id NUMBER, County TEXT, Location TEXT); CREATE TABLE discipline_enrollments (Campus NUMBER);"
      },
      {
        "question": "Which campus has more faculties than this number?",
        "query": "SELECT t1.campus FROM campuses AS t1 JOIN faculty AS t2 ON t1.id = t2.campus WHERE t2.year = 2002 AND faculty > (SELECT max(faculty) FROM campuses AS t1 JOIN faculty AS t2 ON t1.id = t2.campus WHERE t2.year = 2002 AND t1.county = \"Orange\")",
        "schema": "CREATE TABLE Campuses (Location TEXT, County TEXT, Year NUMBER, Campus TEXT, Id NUMBER); CREATE TABLE enrollments (Campus NUMBER); CREATE TABLE degrees (Year NUMBER, Degrees NUMBER, Campus NUMBER); CREATE TABLE discipline_enrollments (Campus NUMBER); CREATE TABLE faculty (Faculty NUMBER, Year NUMBER, Campus NUMBER);"
      }
    ],
    [
      {
        "question": "Show the total enrollment of campus with id 1 in each year.",
        "query": "SELECT totalenrollment_ay FROM enrollments WHERE campus = 1",
        "schema": "CREATE TABLE enrollments (FTE_AY NUMBER, Year NUMBER, Campus NUMBER, TotalEnrollment_AY NUMBER); CREATE TABLE discipline_enrollments (Discipline NUMBER, Undergraduate NUMBER, Year NUMBER, Campus NUMBER); CREATE TABLE Campuses (Id NUMBER, Year NUMBER, Campus TEXT);"
      },
      {
        "question": "What is the average of these numbers?",
        "query": "SELECT avg(totalenrollment_ay) FROM enrollments WHERE campus = 1",
        "schema": "CREATE TABLE Campuses (Campus TEXT, Id NUMBER, Year NUMBER); CREATE TABLE enrollments (Year NUMBER, Campus NUMBER, TotalEnrollment_AY NUMBER, FTE_AY NUMBER); CREATE TABLE discipline_enrollments (Undergraduate NUMBER, Discipline NUMBER, Year NUMBER, Campus NUMBER);"
      },
      {
        "question": "What campuses had more than 400 total enrollment in year 1956?",
        "query": "SELECT t1.campus FROM campuses AS t1 JOIN enrollments AS t2 ON t1.id = t2.campus WHERE t2.year = 1956 AND totalenrollment_ay > 400",
        "schema": "CREATE TABLE enrollments (TotalEnrollment_AY NUMBER, Year NUMBER, Campus NUMBER, FTE_AY NUMBER); CREATE TABLE Campuses (Campus TEXT, Year NUMBER, Id NUMBER, County TEXT); CREATE TABLE discipline_enrollments (Year NUMBER, Undergraduate NUMBER, Campus NUMBER, Discipline NUMBER);"
      },
      {
        "question": "Among them, which campuses have more than 200 full time enrollment?",
        "query": "SELECT t1.campus FROM campuses AS t1 JOIN enrollments AS t2 ON t1.id = t2.campus WHERE t2.year = 1956 AND totalenrollment_ay > 400 AND fte_ay > 200",
        "schema": "CREATE TABLE discipline_enrollments (Year NUMBER, Undergraduate NUMBER, Discipline NUMBER, Campus NUMBER); CREATE TABLE enrollments (Year NUMBER, Campus NUMBER, FTE_AY NUMBER, TotalEnrollment_AY NUMBER); CREATE TABLE Campuses (Year NUMBER, Id NUMBER, Campus TEXT, County TEXT);"
      }
    ],
    [
      {
        "question": "What is the total number of degrees that are conferred in \"California State University-Channel Islands\"?",
        "query": "SELECT sum(degrees) FROM campuses AS t1 JOIN degrees AS t2 ON t1.id = t2.campus WHERE t1.campus = \"California State University-Channel Islands\"",
        "schema": "CREATE TABLE degrees (Campus NUMBER, Degrees NUMBER, Year NUMBER); CREATE TABLE faculty (Faculty NUMBER, Campus NUMBER); CREATE TABLE Campuses (Id NUMBER, County TEXT, Campus TEXT);"
      },
      {
        "question": "How about \"San Jose State University\" over all years?",
        "query": "SELECT sum(degrees) FROM campuses AS t1 JOIN degrees AS t2 ON t1.id = t2.campus WHERE t1.campus = \"San Jose State University\"",
        "schema": "CREATE TABLE Campuses (Campus TEXT, Id NUMBER, County TEXT, Year NUMBER); CREATE TABLE faculty (Campus NUMBER, Faculty NUMBER, Year NUMBER); CREATE TABLE degrees (Degrees NUMBER, Campus NUMBER, Year NUMBER);"
      },
      {
        "question": "How about in year 2001?",
        "query": "SELECT degrees FROM campuses AS t1 JOIN degrees AS t2 ON t1.id = t2.campus WHERE t1.campus = \"San Jose State University\" AND t2.year = 2001",
        "schema": "CREATE TABLE faculty (Campus NUMBER, Year NUMBER, Faculty NUMBER); CREATE TABLE degrees (Campus NUMBER, Year NUMBER, Degrees NUMBER); CREATE TABLE Campuses (Id NUMBER, Year NUMBER, Campus TEXT, County TEXT);"
      },
      {
        "question": "How about in year 2000?",
        "query": "SELECT degrees FROM campuses AS t1 JOIN degrees AS t2 ON t1.id = t2.campus WHERE t1.campus = \"San Jose State University\" AND t2.year = 2000",
        "schema": "CREATE TABLE degrees (Year NUMBER, Degrees NUMBER, Campus NUMBER); CREATE TABLE faculty (Faculty NUMBER, Year NUMBER, Campus NUMBER); CREATE TABLE Campuses (Id NUMBER, Campus TEXT, Year NUMBER, County TEXT);"
      }
    ],
    [
      {
        "question": "Show the faculty lines in campus \"Humboldt State University\" in every year.",
        "query": "SELECT t1.year, t1.faculty FROM faculty AS t1 JOIN campuses AS t2 ON t1.campus = t2.id WHERE t2.campus = \"Humboldt State University\"",
        "schema": "CREATE TABLE Campuses (Campus TEXT, Year NUMBER, Location TEXT, Id NUMBER); CREATE TABLE faculty (Campus NUMBER, Year NUMBER, Faculty NUMBER);"
      },
      {
        "question": "How about those in campus \"Long Beach State University\"?",
        "query": "SELECT t1.year, t1.faculty FROM faculty AS t1 JOIN campuses AS t2 ON t1.campus = t2.id WHERE t2.campus = \"Long Beach State University\"",
        "schema": "CREATE TABLE Campuses (Year NUMBER, Campus TEXT, Location TEXT, Id NUMBER); CREATE TABLE degrees (Year NUMBER, Campus NUMBER); CREATE TABLE faculty (Year NUMBER, Campus NUMBER, Faculty NUMBER);"
      },
      {
        "question": "What is the number of faculty lines in this university in 2003?",
        "query": "SELECT faculty FROM faculty AS t1 JOIN campuses AS t2 ON t1.campus = t2.id WHERE t1.year = 2003 AND t2.campus = \"Long Beach State University\"",
        "schema": "CREATE TABLE faculty (Campus NUMBER, Year NUMBER, Faculty NUMBER); CREATE TABLE degrees (Year NUMBER, Campus NUMBER); CREATE TABLE Campuses (Id NUMBER, Year NUMBER, Campus TEXT, Location TEXT);"
      },
      {
        "question": "How about in 2002?",
        "query": "SELECT faculty FROM faculty AS t1 JOIN campuses AS t2 ON t1.campus = t2.id WHERE t1.year = 2002 AND t2.campus = \"Long Beach State University\"",
        "schema": "CREATE TABLE faculty (Faculty NUMBER, Year NUMBER, Campus NUMBER); CREATE TABLE degrees (Year NUMBER, Campus NUMBER); CREATE TABLE Campuses (County TEXT, Id NUMBER, Year NUMBER, Campus TEXT, Location TEXT);"
      }
    ],
    [
      {
        "question": "How many campuses have faculty lines?",
        "query": "SELECT count(DISTINCT t1.campus) FROM campuses AS t1 JOIN faculty AS t2 ON t1.id = t2.campus",
        "schema": "CREATE TABLE faculty (Campus NUMBER, Faculty NUMBER); CREATE TABLE Campuses (Campus TEXT, Id NUMBER);"
      },
      {
        "question": "Show their faculty lines in year 2004.",
        "query": "SELECT t2.faculty FROM campuses AS t1 JOIN faculty AS t2 ON t1.id = t2.campus WHERE t2.year = 2004",
        "schema": "CREATE TABLE Campuses (Campus TEXT, Year NUMBER, Id NUMBER); CREATE TABLE faculty (Year NUMBER, Campus NUMBER, Faculty NUMBER);"
      },
      {
        "question": "How many of them are between 600 and 1000?",
        "query": "SELECT count(*) FROM campuses AS t1 JOIN faculty AS t2 ON t1.id = t2.campus WHERE t2.faculty >= 600 AND t2.faculty <= 1000 AND t2.year = 2004",
        "schema": "CREATE TABLE Campuses (Year NUMBER, Id NUMBER, Campus TEXT, County TEXT); CREATE TABLE faculty (Year NUMBER, Faculty NUMBER, Campus NUMBER);"
      },
      {
        "question": "Show the names of these campuses.",
        "query": "SELECT t1.campus FROM campuses AS t1 JOIN faculty AS t2 ON t1.id = t2.campus WHERE t2.faculty >= 600 AND t2.faculty <= 1000 AND t2.year = 2004",
        "schema": "CREATE TABLE faculty (Year NUMBER, Faculty NUMBER, Campus NUMBER); CREATE TABLE Campuses (Campus TEXT, Year NUMBER, Id NUMBER, County TEXT);"
      }
    ],
    [
      {
        "question": "How many degrees were conferred in each university in year 2002?",
        "query": "SELECT t1.campus, degrees FROM campuses AS t1 JOIN faculty AS t2 ON t1.id = t2.campus JOIN degrees AS t3 ON t1.id = t3.campus AND t2.year = t3.year WHERE t2.year = 2002",
        "schema": "CREATE TABLE faculty (Year NUMBER, Campus NUMBER, Faculty NUMBER); CREATE TABLE Campuses (Id NUMBER, Campus TEXT, Year NUMBER); CREATE TABLE degrees (Year NUMBER, Degrees NUMBER, Campus NUMBER);"
      },
      {
        "question": "Among the results, which university conferred the most degrees?",
        "query": "SELECT t1.campus FROM campuses AS t1 JOIN faculty AS t2 ON t1.id = t2.campus JOIN degrees AS t3 ON t1.id = t3.campus AND t2.year = t3.year WHERE t2.year = 2002 ORDER BY t3.degrees DESC LIMIT 1",
        "schema": "CREATE TABLE degrees (Degrees NUMBER, Year NUMBER, Campus NUMBER); CREATE TABLE Campuses (Campus TEXT, Year NUMBER, Id NUMBER); CREATE TABLE faculty (Faculty NUMBER, Campus NUMBER, Year NUMBER);"
      },
      {
        "question": "What are its faculty lines?",
        "query": "SELECT t2.faculty FROM campuses AS t1 JOIN faculty AS t2 ON t1.id = t2.campus JOIN degrees AS t3 ON t1.id = t3.campus AND t2.year = t3.year WHERE t2.year = 2002 ORDER BY t3.degrees DESC LIMIT 1",
        "schema": "CREATE TABLE faculty (Campus NUMBER, Year NUMBER, Faculty NUMBER); CREATE TABLE degrees (Campus NUMBER, Year NUMBER, Degrees NUMBER); CREATE TABLE Campuses (Campus TEXT, Year NUMBER, Id NUMBER);"
      }
    ],
    [
      {
        "question": "When did \"San Jose State University\" open?",
        "query": "SELECT YEAR FROM campuses WHERE campus = \"San Jose State University\"",
        "schema": "CREATE TABLE Campuses (Id NUMBER, Location TEXT, Campus TEXT, Year NUMBER); CREATE TABLE faculty (Year NUMBER, Campus NUMBER);"
      },
      {
        "question": "How many undergraduates were there in \"San Jose State University\" in year 2000?",
        "query": "SELECT sum(t1.undergraduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus = t2.id WHERE t1.year = 2000 AND t2.campus = \"San Jose State University\"",
        "schema": "CREATE TABLE enrollments (FTE_AY NUMBER, Year NUMBER, TotalEnrollment_AY NUMBER, Campus NUMBER); CREATE TABLE discipline_enrollments (Graduate NUMBER, Undergraduate NUMBER, Discipline NUMBER, Campus NUMBER, Year NUMBER); CREATE TABLE Campuses (Campus TEXT, Location TEXT, Year NUMBER, Id NUMBER); CREATE TABLE faculty (Campus NUMBER, Year NUMBER);"
      },
      {
        "question": "How about in year 2004?",
        "query": "SELECT sum(t1.undergraduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus = t2.id WHERE t1.year = 2004 AND t2.campus = \"San Jose State University\"",
        "schema": "CREATE TABLE Campuses (Location TEXT, Campus TEXT, Id NUMBER, Year NUMBER); CREATE TABLE faculty (Campus NUMBER, Year NUMBER); CREATE TABLE discipline_enrollments (Undergraduate NUMBER, Year NUMBER, Graduate NUMBER, Campus NUMBER, Discipline NUMBER); CREATE TABLE enrollments (Year NUMBER, Campus NUMBER, TotalEnrollment_AY NUMBER, FTE_AY NUMBER);"
      }
    ],
    [
      {
        "question": "Which county is \"San Francisco State University\" located?",
        "query": "SELECT county FROM campuses WHERE campus = \"San Francisco State University\"",
        "schema": "CREATE TABLE Campuses (Campus TEXT, Location TEXT, Id NUMBER, County TEXT);"
      },
      {
        "question": "How many graduates were there in this university in year 2003?",
        "query": "SELECT sum(t1.graduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus = t2.id WHERE t1.year = 2003 AND t2.campus = \"San Francisco State University\"",
        "schema": "CREATE TABLE enrollments (TotalEnrollment_AY NUMBER, Year NUMBER, Campus NUMBER); CREATE TABLE Campuses (Location TEXT, County TEXT, Campus TEXT, Year NUMBER, Id NUMBER); CREATE TABLE discipline_enrollments (Campus NUMBER, Year NUMBER, Graduate NUMBER, Discipline NUMBER, Undergraduate NUMBER);"
      },
      {
        "question": "How about in 2004?",
        "query": "SELECT sum(t1.graduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus = t2.id WHERE t1.year = 2004 AND t2.campus = \"San Francisco State University\"",
        "schema": "CREATE TABLE discipline_enrollments (Graduate NUMBER, Year NUMBER, Undergraduate NUMBER, Discipline NUMBER, Campus NUMBER); CREATE TABLE enrollments (TotalEnrollment_AY NUMBER, Year NUMBER, FTE_AY NUMBER, Campus NUMBER); CREATE TABLE Campuses (Campus TEXT, Year NUMBER, County TEXT, Location TEXT, Id NUMBER); CREATE TABLE faculty (Year NUMBER, Campus NUMBER);"
      }
    ],
    [
      {
        "question": "What is the location of \"San Francisco State University\"?",
        "query": "SELECT LOCATION FROM campuses WHERE campus = \"San Francisco State University\"",
        "schema": "CREATE TABLE Campuses (Campus TEXT, Id NUMBER, Location TEXT); CREATE TABLE faculty (Campus NUMBER);"
      },
      {
        "question": "What are its campus fees over all years?",
        "query": "SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus = t2.id WHERE t2.campus = \"San Francisco State University\"",
        "schema": "CREATE TABLE csu_fees (Campus NUMBER, Year NUMBER, CampusFee NUMBER); CREATE TABLE Campuses (Campus TEXT, Id NUMBER, Location TEXT, Year NUMBER); CREATE TABLE faculty (Campus NUMBER);"
      },
      {
        "question": "How about in year 2000?",
        "query": "SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus = t2.id WHERE t2.campus = \"San Francisco State University\" AND t1.year = 2000",
        "schema": "CREATE TABLE Campuses (Location TEXT, Year NUMBER, Campus TEXT, Id NUMBER); CREATE TABLE csu_fees (Year NUMBER, Campus NUMBER, CampusFee NUMBER); CREATE TABLE faculty (Campus NUMBER);"
      }
    ]
  ],
  "activity_1": [
    [
      {
        "question": "Show the information for all faculty.",
        "query": "SELECT * FROM faculty",
        "schema": "CREATE TABLE Faculty (FacID NUMBER, Rank TEXT, Room TEXT, Fname TEXT, Lname TEXT);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT count(*) FROM faculty",
        "schema": "CREATE TABLE Faculty_Participates_in (FacID NUMBER); CREATE TABLE Faculty (Lname TEXT, Rank TEXT, FacID NUMBER, Room TEXT, Fname TEXT);"
      }
    ],
    [
      {
        "question": "Show the rank for each member of faculty.",
        "query": "SELECT rank FROM faculty",
        "schema": "CREATE TABLE Faculty (FacID NUMBER, Rank TEXT, Fname TEXT, Lname TEXT, Sex TEXT);"
      },
      {
        "question": "What different ranks are there?",
        "query": "SELECT DISTINCT rank FROM faculty",
        "schema": "CREATE TABLE Faculty (Fname TEXT, Sex TEXT, Rank TEXT, Lname TEXT, FacID NUMBER);"
      }
    ],
    [
      {
        "question": "Show the building for each faculty member.",
        "query": "SELECT building FROM faculty",
        "schema": "CREATE TABLE Faculty (Building TEXT, Lname TEXT, Room TEXT, Fname TEXT, FacID NUMBER, Rank TEXT, Sex TEXT);"
      },
      {
        "question": "Show the distinct results among these.",
        "query": "SELECT DISTINCT building FROM faculty",
        "schema": "CREATE TABLE Faculty (Lname TEXT, Fname TEXT, FacID NUMBER, Rank TEXT, Building TEXT, Room TEXT, Sex TEXT); CREATE TABLE Faculty_Participates_in (FacID NUMBER);"
      }
    ],
    [
      {
        "question": "Show the first name of faculty.",
        "query": "SELECT fname FROM faculty",
        "schema": "CREATE TABLE Faculty (Rank TEXT, Lname TEXT, FacID NUMBER, Fname TEXT);"
      },
      {
        "question": "Also show the last name for them.",
        "query": "SELECT fname , lname FROM faculty",
        "schema": "CREATE TABLE Faculty (Rank TEXT, Lname TEXT, FacID NUMBER, Fname TEXT);"
      },
      {
        "question": "Also show the rank for them.",
        "query": "SELECT rank , fname , lname FROM faculty",
        "schema": "CREATE TABLE Faculty (Lname TEXT, Rank TEXT, Fname TEXT, FacID NUMBER);"
      }
    ],
    [
      {
        "question": "Show the information for all faculty.",
        "query": "SELECT * FROM faculty",
        "schema": "CREATE TABLE Faculty (Room TEXT, Lname TEXT, FacID NUMBER, Fname TEXT, Rank TEXT);"
      },
      {
        "question": "Filter for female faculty members.",
        "query": "SELECT * FROM faculty WHERE sex = 'F'",
        "schema": "CREATE TABLE Faculty (Rank TEXT, Room TEXT, Lname TEXT, FacID NUMBER, Fname TEXT, Sex TEXT);"
      },
      {
        "question": "Only show the first name, last name, and phone number for them.",
        "query": "SELECT fname , lname , phone FROM faculty WHERE sex = 'F'",
        "schema": "CREATE TABLE Faculty (FacID NUMBER, Room TEXT, Rank TEXT, Phone NUMBER, Lname TEXT, Fname TEXT, Sex TEXT);"
      }
    ],
    [
      {
        "question": "Show ids for all faculty.",
        "query": "SELECT facid FROM faculty",
        "schema": "CREATE TABLE Faculty (FacID NUMBER, Fname TEXT, Lname TEXT, Rank TEXT); CREATE TABLE Faculty_Participates_in (FacID NUMBER);"
      },
      {
        "question": "Only show the ids for male.",
        "query": "SELECT facid FROM faculty WHERE sex = 'M'",
        "schema": "CREATE TABLE Faculty (Sex TEXT, Rank TEXT, FacID NUMBER, Fname TEXT, Lname TEXT); CREATE TABLE Faculty_Participates_in (FacID NUMBER); CREATE TABLE Student (Sex TEXT);"
      }
    ],
    [
      {
        "question": "How many faculty are there?",
        "query": "SELECT count(*) FROM faculty",
        "schema": "CREATE TABLE Faculty (Sex TEXT, Room TEXT, Fname TEXT, FacID NUMBER, Lname TEXT, Rank TEXT); CREATE TABLE Faculty_Participates_in (FacID NUMBER);"
      },
      {
        "question": "What about female ones?",
        "query": "SELECT count(*) FROM faculty WHERE sex = 'F'",
        "schema": "CREATE TABLE Student (Sex TEXT); CREATE TABLE Faculty_Participates_in (FacID NUMBER); CREATE TABLE Faculty (Fname TEXT, Sex TEXT, Room TEXT, Lname TEXT, FacID NUMBER, Rank TEXT);"
      },
      {
        "question": "What about female professors?",
        "query": "SELECT count(*) FROM faculty WHERE sex = 'F' AND rank = \"Professor\"",
        "schema": "CREATE TABLE Faculty (Fname TEXT, Rank TEXT, Sex TEXT, FacID NUMBER, Lname TEXT, Room TEXT); CREATE TABLE Student (Sex TEXT); CREATE TABLE Faculty_Participates_in (FacID NUMBER);"
      }
    ],
    [
      {
        "question": "Show the information for all faculty.",
        "query": "SELECT * FROM faculty",
        "schema": "CREATE TABLE Faculty (Lname TEXT, Room TEXT, Fname TEXT, Rank TEXT, FacID NUMBER);"
      },
      {
        "question": "Only show the information for the faculty named Jerry Prince.",
        "query": "SELECT * FROM faculty WHERE fname = \"Jerry\" AND lname = \"Prince\"",
        "schema": "CREATE TABLE Faculty (Room TEXT, FacID NUMBER, Lname TEXT, Rank TEXT, Fname TEXT);"
      },
      {
        "question": "Show the phone, room, and building for this person.",
        "query": "SELECT phone , room , building FROM faculty WHERE fname = \"Jerry\" AND lname = \"Prince\"",
        "schema": "CREATE TABLE Faculty (Building TEXT, Rank TEXT, Lname TEXT, Phone NUMBER, Fname TEXT, Room TEXT, FacID NUMBER);"
      }
    ],
    [
      {
        "question": "What is the total count of faculty members?",
        "query": "SELECT count(*) FROM faculty",
        "schema": "CREATE TABLE Faculty (Sex TEXT, Lname TEXT, Rank TEXT, Fname TEXT, FacID NUMBER);"
      },
      {
        "question": "How many are Professors?",
        "query": "SELECT count(*) FROM faculty WHERE rank = \"Professor\"",
        "schema": "CREATE TABLE Faculty (Rank TEXT, Fname TEXT, Sex TEXT, FacID NUMBER, Lname TEXT);"
      },
      {
        "question": "How many of these are in building NEB?",
        "query": "SELECT count(*) FROM faculty WHERE rank = \"Professor\" AND building = \"NEB\"",
        "schema": "CREATE TABLE Faculty (Building TEXT, Lname TEXT, Fname TEXT, Sex TEXT, FacID NUMBER, Room TEXT, Rank TEXT);"
      }
    ],
    [
      {
        "question": "Show the first name and last name for all faculty.",
        "query": "SELECT fname , lname FROM faculty",
        "schema": "CREATE TABLE Faculty (Lname TEXT, Rank TEXT, FacID NUMBER, Fname TEXT);"
      },
      {
        "question": "What about those with rank as Instructor?",
        "query": "SELECT fname , lname FROM faculty WHERE rank = \"Instructor\"",
        "schema": "CREATE TABLE Faculty (Fname TEXT, Rank TEXT, Lname TEXT, FacID NUMBER);"
      }
    ],
    [
      {
        "question": "Show the building for all Faculty.",
        "query": "SELECT building FROM faculty",
        "schema": "CREATE TABLE Faculty (Rank TEXT, Building TEXT, Room TEXT, FacID NUMBER);"
      },
      {
        "question": "Show how many faculty members each building houses.",
        "query": "SELECT building , count(*) FROM faculty GROUP BY building",
        "schema": "CREATE TABLE Faculty_Participates_in (FacID NUMBER); CREATE TABLE Faculty (Room TEXT, Rank TEXT, Building TEXT, FacID NUMBER);"
      }
    ],
    [
      {
        "question": "Show the building for all Faculty.",
        "query": "SELECT building FROM faculty",
        "schema": "CREATE TABLE Faculty (Building TEXT, Room TEXT, Rank TEXT, FacID NUMBER);"
      },
      {
        "question": "Show the number of faculty members for each of those buildings.",
        "query": "SELECT building, count(*) FROM faculty GROUP BY building",
        "schema": "CREATE TABLE Faculty_Participates_in (FacID NUMBER); CREATE TABLE Faculty (Room TEXT, FacID NUMBER, Rank TEXT, Building TEXT);"
      },
      {
        "question": "List them in descending order of the count.",
        "query": "SELECT building, count(*) FROM faculty GROUP BY building ORDER BY count(*) DESC",
        "schema": "CREATE TABLE Faculty_Participates_in (FacID NUMBER); CREATE TABLE Faculty (Room TEXT, FacID NUMBER, Rank TEXT, Building TEXT);"
      },
      {
        "question": "Which building has the most?",
        "query": "SELECT building FROM faculty GROUP BY building ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Faculty (Rank TEXT, Room TEXT, Building TEXT, FacID NUMBER); CREATE TABLE Faculty_Participates_in (FacID NUMBER);"
      }
    ],
    [
      {
        "question": "Show the building for all Faculty.",
        "query": "SELECT building FROM faculty",
        "schema": "CREATE TABLE Faculty (Room TEXT, FacID NUMBER, Rank TEXT, Building TEXT);"
      },
      {
        "question": "How about those for professors?",
        "query": "SELECT building FROM faculty WHERE rank = \"Professor\"",
        "schema": "CREATE TABLE Faculty (FacID NUMBER, Lname TEXT, Rank TEXT, Room TEXT, Building TEXT);"
      },
      {
        "question": "For each of the buildings, show the number of professors.",
        "query": "SELECT building, count(*) FROM faculty WHERE rank = \"Professor\" GROUP BY building",
        "schema": "CREATE TABLE Faculty (Building TEXT, Rank TEXT, FacID NUMBER, Room TEXT, Lname TEXT);"
      },
      {
        "question": "Which of them have at least 10?",
        "query": "SELECT building FROM faculty WHERE rank = \"Professor\" GROUP BY building HAVING count(*) >= 10",
        "schema": "CREATE TABLE Faculty (Lname TEXT, Building TEXT, Rank TEXT, FacID NUMBER, Room TEXT);"
      }
    ],
    [
      {
        "question": "Show the rank for all faculty members.",
        "query": "SELECT rank FROM faculty",
        "schema": "CREATE TABLE Faculty (Rank TEXT, FacID NUMBER, Lname TEXT);"
      },
      {
        "question": "For each of them, show the number of faculty members.",
        "query": "SELECT rank , count(*) FROM faculty GROUP BY rank",
        "schema": "CREATE TABLE Faculty (Lname TEXT, Rank TEXT, FacID NUMBER);"
      }
    ],
    [
      {
        "question": "Show all rank and sex for each faculty member.",
        "query": "SELECT rank , sex FROM faculty",
        "schema": "CREATE TABLE Student (Sex TEXT); CREATE TABLE Faculty (Lname TEXT, FacID NUMBER, Sex TEXT, Rank TEXT);"
      },
      {
        "question": "Show the counts of faculty grouped by both rank and sex.",
        "query": "SELECT rank , sex , count(*) FROM faculty GROUP BY rank , sex",
        "schema": "CREATE TABLE Student (Sex TEXT); CREATE TABLE Faculty (Rank TEXT, FacID NUMBER, Sex TEXT, Lname TEXT);"
      }
    ],
    [
      {
        "question": "Show the rank for all Faculty.",
        "query": "SELECT rank FROM faculty",
        "schema": "CREATE TABLE Faculty (Lname TEXT, FacID NUMBER, Rank TEXT);"
      },
      {
        "question": "For each of them, show the number of faculty members.",
        "query": "SELECT rank, count(*) FROM faculty GROUP BY rank",
        "schema": "CREATE TABLE Faculty (FacID NUMBER, Rank TEXT, Lname TEXT);"
      },
      {
        "question": "Order them by the number.",
        "query": "SELECT rank FROM faculty GROUP BY rank ORDER BY count(*)",
        "schema": "CREATE TABLE Faculty (FacID NUMBER, Rank TEXT, Lname TEXT);"
      },
      {
        "question": "Which rank has the smallest number?",
        "query": "SELECT rank FROM faculty GROUP BY rank ORDER BY count(*) ASC LIMIT 1",
        "schema": "CREATE TABLE Faculty (FacID NUMBER, Rank TEXT, Lname TEXT);"
      }
    ],
    [
      {
        "question": "Show the sex for each Faculty member.",
        "query": "SELECT sex FROM faculty",
        "schema": "CREATE TABLE Faculty (Rank TEXT, Lname TEXT, Fname TEXT, FacID NUMBER, Sex TEXT); CREATE TABLE Student (Sex TEXT);"
      },
      {
        "question": "Show the result for only assistant professors.",
        "query": "SELECT sex FROM faculty WHERE rank = \"AsstProf\"",
        "schema": "CREATE TABLE Faculty (Lname TEXT, Rank TEXT, Sex TEXT, Fname TEXT, FacID NUMBER); CREATE TABLE Student (Sex TEXT);"
      },
      {
        "question": "How many assistant professors are there of each sex?",
        "query": "SELECT sex , count(*) FROM faculty WHERE rank = \"AsstProf\" GROUP BY sex",
        "schema": "CREATE TABLE Student (Sex TEXT); CREATE TABLE Faculty (Sex TEXT, Fname TEXT, Rank TEXT, Lname TEXT, FacID NUMBER);"
      }
    ],
    [
      {
        "question": "Show the first name and last name for all Faculty.",
        "query": "SELECT fname , lname FROM faculty",
        "schema": "CREATE TABLE Faculty (Fname TEXT, FacID NUMBER, Rank TEXT, Lname TEXT);"
      },
      {
        "question": "Also show the names of students that each one advises.",
        "query": "SELECT t1.fname , t1.lname, t2.fname , t2.lname FROM faculty AS t1 JOIN student AS t2 ON t1.facid = t2.advisor",
        "schema": "CREATE TABLE Faculty (Rank TEXT, Lname TEXT, FacID NUMBER, Fname TEXT); CREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Advisor NUMBER);"
      },
      {
        "question": "Who is Linda Smith's advisor?",
        "query": "SELECT t1.fname , t1.lname FROM faculty AS t1 JOIN student AS t2 ON t1.facid = t2.advisor WHERE t2.fname = \"Linda\" AND t2.lname = \"Smith\"",
        "schema": "CREATE TABLE Faculty (FacID NUMBER, Fname TEXT, Rank TEXT, Lname TEXT); CREATE TABLE Student (LName TEXT, Advisor NUMBER, StuID NUMBER, Fname TEXT);"
      }
    ],
    [
      {
        "question": "Show the student ids.",
        "query": "SELECT stuid FROM student",
        "schema": "CREATE TABLE Student (LName TEXT, StuID NUMBER); CREATE TABLE Activity (actid NUMBER); CREATE TABLE Faculty (FacID NUMBER, Rank TEXT); CREATE TABLE Faculty_Participates_in (FacID NUMBER); CREATE TABLE Participates_in (stuid NUMBER);"
      },
      {
        "question": "Also show the ranks of their advisors.",
        "query": "SELECT t2.stuid, t1.rank FROM faculty AS t1 JOIN student AS t2 ON t1.facid = t2.advisor",
        "schema": "CREATE TABLE Faculty (Fname TEXT, Lname TEXT, FacID NUMBER, Rank TEXT); CREATE TABLE Faculty_Participates_in (FacID NUMBER); CREATE TABLE Activity (actid NUMBER); CREATE TABLE Student (Advisor NUMBER, StuID NUMBER, LName TEXT); CREATE TABLE Participates_in (stuid NUMBER);"
      },
      {
        "question": "Show the student id for those whose advisors are professors?",
        "query": "SELECT t2.stuid FROM faculty AS t1 JOIN student AS t2 ON t1.facid = t2.advisor WHERE t1.rank = \"Professor\"",
        "schema": "CREATE TABLE Faculty (Fname TEXT, Rank TEXT, FacID NUMBER, Lname TEXT); CREATE TABLE Student (LName TEXT, StuID NUMBER, Advisor NUMBER); CREATE TABLE Activity (actid NUMBER); CREATE TABLE Faculty_Participates_in (FacID NUMBER); CREATE TABLE Participates_in (stuid NUMBER);"
      }
    ],
    [
      {
        "question": "Show first name and last name for all the students.",
        "query": "SELECT fname , lname FROM student",
        "schema": "CREATE TABLE Student (StuID NUMBER, Fname TEXT, LName TEXT); CREATE TABLE Faculty (Lname TEXT, Fname TEXT);"
      },
      {
        "question": "Also show their advisor's first name and last name.",
        "query": "SELECT t2.fname , t2.lname, t1.fname , t1.lname FROM faculty AS t1 JOIN student AS t2 ON t1.facid = t2.advisor",
        "schema": "CREATE TABLE Student (StuID NUMBER, Advisor NUMBER, Fname TEXT, LName TEXT); CREATE TABLE Faculty_Participates_in (FacID NUMBER); CREATE TABLE Faculty (FacID NUMBER, Fname TEXT, Rank TEXT, Lname TEXT);"
      },
      {
        "question": "Who are advised by Michael Goodrich?",
        "query": "SELECT t2.fname , t2.lname FROM faculty AS t1 JOIN student AS t2 ON t1.facid = t2.advisor WHERE t1.fname = \"Michael\" AND t1.lname = \"Goodrich\"",
        "schema": "CREATE TABLE Faculty (Rank TEXT, Lname TEXT, FacID NUMBER, Fname TEXT); CREATE TABLE Faculty_Participates_in (FacID NUMBER); CREATE TABLE Student (LName TEXT, Advisor NUMBER, StuID NUMBER, Fname TEXT);"
      }
    ],
    [
      {
        "question": "Show the faculty id of each faculty member",
        "query": "SELECT facid FROM faculty",
        "schema": "CREATE TABLE Faculty (Lname TEXT, Fname TEXT, Rank TEXT, FacID NUMBER, Sex TEXT); CREATE TABLE Faculty_Participates_in (FacID NUMBER);"
      },
      {
        "question": "For each of them, also show the number of students he or she advises.",
        "query": "SELECT t1.facid , count(*) FROM faculty AS t1 JOIN student AS t2 ON t1.facid = t2.advisor GROUP BY t1.facid",
        "schema": "CREATE TABLE Faculty_Participates_in (FacID NUMBER); CREATE TABLE Faculty (Lname TEXT, Rank TEXT, Sex TEXT, Fname TEXT, FacID NUMBER); CREATE TABLE Student (StuID NUMBER, Advisor NUMBER, LName TEXT);"
      }
    ],
    [
      {
        "question": "Show all the faculty ranks",
        "query": "SELECT rank FROM faculty",
        "schema": "CREATE TABLE Faculty (Rank TEXT, Lname TEXT, FacID NUMBER);"
      },
      {
        "question": "For each of those ranks, show the number of students advised.",
        "query": "SELECT t1.rank , count(*) FROM faculty AS t1 JOIN student AS t2 ON t1.facid = t2.advisor GROUP BY t1.rank",
        "schema": "CREATE TABLE Student (Major NUMBER, LName TEXT, StuID NUMBER, Advisor NUMBER); CREATE TABLE Faculty (Rank TEXT, FacID NUMBER, Lname TEXT);"
      }
    ],
    [
      {
        "question": "Show the first and last name of the faculty.",
        "query": "SELECT fname , lname FROM faculty",
        "schema": "CREATE TABLE Faculty (Fname TEXT, Lname TEXT, FacID NUMBER, Rank TEXT);"
      },
      {
        "question": "For each faculty member, also count the number of students advised.",
        "query": "SELECT t1.fname , t1.lname, count(*) FROM faculty AS t1 JOIN student AS t2 ON t1.facid = t2.advisor GROUP BY t1.facid",
        "schema": "CREATE TABLE Student (Fname TEXT, LName TEXT, StuID NUMBER, Advisor NUMBER); CREATE TABLE Faculty (FacID NUMBER, Fname TEXT, Lname TEXT, Rank TEXT); CREATE TABLE Faculty_Participates_in (FacID NUMBER);"
      },
      {
        "question": "Show the names in descending order of the number.",
        "query": "SELECT t1.fname , t1.lname FROM faculty AS t1 JOIN student AS t2 ON t1.facid = t2.advisor GROUP BY t1.facid ORDER BY count(*) DESC",
        "schema": "CREATE TABLE Faculty_Participates_in (FacID NUMBER); CREATE TABLE Faculty (FacID NUMBER, Lname TEXT, Fname TEXT, Rank TEXT); CREATE TABLE Student (Fname TEXT, StuID NUMBER, Advisor NUMBER, LName TEXT);"
      },
      {
        "question": "Who has the most?",
        "query": "SELECT t1.fname , t1.lname FROM faculty AS t1 JOIN student AS t2 ON t1.facid = t2.advisor GROUP BY t1.facid ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Faculty_Participates_in (FacID NUMBER); CREATE TABLE Faculty (Rank TEXT, FacID NUMBER, Fname TEXT, Lname TEXT); CREATE TABLE Student (Advisor NUMBER, StuID NUMBER, Fname TEXT, LName TEXT);"
      }
    ],
    [
      {
        "question": "Show the ids for all the faculty members",
        "query": "SELECT facid FROM faculty",
        "schema": "CREATE TABLE Faculty (Fname TEXT, FacID NUMBER, Lname TEXT, Rank TEXT);"
      },
      {
        "question": "For each of them, also count the number of students advised.",
        "query": "SELECT t1.facid, count(*) FROM faculty AS t1 JOIN student AS t2 ON t1.facid = t2.advisor GROUP BY t1.facid",
        "schema": "CREATE TABLE Faculty (Lname TEXT, Rank TEXT, Fname TEXT, FacID NUMBER); CREATE TABLE Student (Advisor NUMBER, StuID NUMBER); CREATE TABLE Faculty_Participates_in (FacID NUMBER);"
      },
      {
        "question": "Who have at least 2 students?",
        "query": "SELECT t1.facid FROM faculty AS t1 JOIN student AS t2 ON t1.facid = t2.advisor GROUP BY t1.facid HAVING count(*) >= 2",
        "schema": "CREATE TABLE Faculty_Participates_in (FacID NUMBER); CREATE TABLE Student (StuID NUMBER, Advisor NUMBER, LName TEXT); CREATE TABLE Faculty (FacID NUMBER, Lname TEXT, Fname TEXT, Rank TEXT);"
      }
    ],
    [
      {
        "question": "Show all faculty members advising a student.",
        "query": "SELECT advisor FROM student",
        "schema": "CREATE TABLE Faculty (Rank TEXT, Lname TEXT, Sex TEXT, Fname TEXT, FacID NUMBER); CREATE TABLE Faculty_Participates_in (FacID NUMBER); CREATE TABLE Student (Advisor NUMBER, StuID NUMBER);"
      },
      {
        "question": "Show ids for those who don't.",
        "query": "SELECT facid FROM faculty EXCEPT SELECT advisor FROM student",
        "schema": "CREATE TABLE Faculty_Participates_in (FacID NUMBER); CREATE TABLE Student (LName TEXT, StuID NUMBER, Advisor NUMBER); CREATE TABLE Faculty (Fname TEXT, FacID NUMBER, Lname TEXT, Rank TEXT, Sex TEXT);"
      }
    ],
    [
      {
        "question": "Show information for all activities.",
        "query": "SELECT * FROM activity",
        "schema": "CREATE TABLE Faculty_Participates_in (actid NUMBER, FacID NUMBER); CREATE TABLE Student (StuID NUMBER); CREATE TABLE Participates_in (stuid NUMBER, actid NUMBER); CREATE TABLE Activity (actid NUMBER, activity_name TEXT); CREATE TABLE Faculty (FacID NUMBER);"
      },
      {
        "question": "Show the name for those.",
        "query": "SELECT activity_name FROM activity",
        "schema": "CREATE TABLE Student (StuID NUMBER); CREATE TABLE Participates_in (stuid NUMBER, actid NUMBER); CREATE TABLE Faculty (FacID NUMBER); CREATE TABLE Faculty_Participates_in (FacID NUMBER, actid NUMBER); CREATE TABLE Activity (actid NUMBER, activity_name TEXT);"
      }
    ],
    [
      {
        "question": "Show info for all activities.",
        "query": "SELECT * FROM activity",
        "schema": "CREATE TABLE Faculty_Participates_in (actid NUMBER, FacID NUMBER); CREATE TABLE Student (StuID NUMBER); CREATE TABLE Participates_in (stuid NUMBER, actid NUMBER); CREATE TABLE Faculty (FacID NUMBER); CREATE TABLE Activity (activity_name TEXT, actid NUMBER);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT count(*) FROM activity",
        "schema": "CREATE TABLE Student (StuID NUMBER); CREATE TABLE Participates_in (stuid NUMBER, actid NUMBER); CREATE TABLE Faculty (FacID NUMBER); CREATE TABLE Activity (activity_name TEXT, actid NUMBER); CREATE TABLE Faculty_Participates_in (actid NUMBER, FacID NUMBER);"
      }
    ],
    [
      {
        "question": "Show the faculty id of members participating in an activity.",
        "query": "SELECT facid FROM faculty_participates_in",
        "schema": "CREATE TABLE Activity (activity_name TEXT, actid NUMBER); CREATE TABLE Participates_in (actid NUMBER, stuid NUMBER); CREATE TABLE Student (StuID NUMBER); CREATE TABLE Faculty (FacID NUMBER, Rank TEXT); CREATE TABLE Faculty_Participates_in (actid NUMBER, FacID NUMBER);"
      },
      {
        "question": "How many such members are there?",
        "query": "SELECT count(DISTINCT facid) FROM faculty_participates_in",
        "schema": "CREATE TABLE Activity (actid NUMBER, activity_name TEXT); CREATE TABLE Student (StuID NUMBER); CREATE TABLE Participates_in (stuid NUMBER, actid NUMBER); CREATE TABLE Faculty (Lname TEXT, FacID NUMBER, Rank TEXT); CREATE TABLE Faculty_Participates_in (actid NUMBER, FacID NUMBER);"
      }
    ],
    [
      {
        "question": "Show the ids of the faculty who participate in an activity.",
        "query": "SELECT facid FROM faculty_participates_in",
        "schema": "CREATE TABLE Faculty (Rank TEXT, FacID NUMBER); CREATE TABLE Activity (actid NUMBER, activity_name TEXT); CREATE TABLE Student (StuID NUMBER); CREATE TABLE Participates_in (stuid NUMBER, actid NUMBER); CREATE TABLE Faculty_Participates_in (FacID NUMBER, actid NUMBER);"
      },
      {
        "question": "Show the ids for those who don't.",
        "query": "SELECT facid FROM faculty EXCEPT SELECT facid FROM faculty_participates_in",
        "schema": "CREATE TABLE Faculty_Participates_in (FacID NUMBER, actid NUMBER); CREATE TABLE Participates_in (actid NUMBER, stuid NUMBER); CREATE TABLE Student (StuID NUMBER); CREATE TABLE Faculty (Lname TEXT, FacID NUMBER, Rank TEXT); CREATE TABLE Activity (activity_name TEXT, actid NUMBER);"
      }
    ],
    [
      {
        "question": "Show the ids of all the faculty members who participate in an activity.",
        "query": "SELECT facid FROM faculty_participates_in",
        "schema": "CREATE TABLE Activity (actid NUMBER, activity_name TEXT); CREATE TABLE Faculty (Rank TEXT, FacID NUMBER); CREATE TABLE Participates_in (stuid NUMBER, actid NUMBER); CREATE TABLE Student (StuID NUMBER); CREATE TABLE Faculty_Participates_in (FacID NUMBER, actid NUMBER);"
      },
      {
        "question": "Show the ids of all the faculty members who advise a student.",
        "query": "SELECT advisor FROM student",
        "schema": "CREATE TABLE Participates_in (stuid NUMBER, actid NUMBER); CREATE TABLE Faculty_Participates_in (FacID NUMBER, actid NUMBER); CREATE TABLE Faculty (FacID NUMBER, Rank TEXT, Lname TEXT); CREATE TABLE Activity (actid NUMBER, activity_name TEXT); CREATE TABLE Student (Advisor NUMBER, StuID NUMBER);"
      },
      {
        "question": "Show the ids of all the faculty members who do both.",
        "query": "SELECT facid FROM faculty_participates_in INTERSECT SELECT advisor FROM student",
        "schema": "CREATE TABLE Participates_in (actid NUMBER, stuid NUMBER); CREATE TABLE Faculty_Participates_in (actid NUMBER, FacID NUMBER); CREATE TABLE Activity (actid NUMBER, activity_name TEXT); CREATE TABLE Faculty (Rank TEXT, FacID NUMBER, Lname TEXT); CREATE TABLE Student (Advisor NUMBER, StuID NUMBER);"
      }
    ],
    [
      {
        "question": "Show first and last name and activity ids for all faculty participating in activities.",
        "query": "SELECT t1.fname, t1.lname, t2.actid FROM faculty AS t1 JOIN faculty_participates_in AS t2 ON t1.facid = t2.facid",
        "schema": "CREATE TABLE Participates_in (actid NUMBER, stuid NUMBER); CREATE TABLE Faculty (Fname TEXT, FacID NUMBER, Lname TEXT); CREATE TABLE Faculty_Participates_in (FacID NUMBER, actid NUMBER); CREATE TABLE Activity (actid NUMBER, activity_name TEXT);"
      },
      {
        "question": "How many activities does Mark Giuliano participate in?",
        "query": "SELECT count(*) FROM faculty AS t1 JOIN faculty_participates_in AS t2 ON t1.facid = t2.facid WHERE t1.fname = \"Mark\" AND t1.lname = \"Giuliano\"",
        "schema": "CREATE TABLE Faculty_Participates_in (FacID NUMBER, actid NUMBER); CREATE TABLE Activity (activity_name TEXT, actid NUMBER); CREATE TABLE Participates_in (actid NUMBER, stuid NUMBER); CREATE TABLE Faculty (Fname TEXT, Lname TEXT, FacID NUMBER);"
      }
    ],
    [
      {
        "question": "Show the names of all the activities.",
        "query": "SELECT activity_name FROM activity",
        "schema": "CREATE TABLE Faculty (FacID NUMBER); CREATE TABLE Activity (activity_name TEXT, actid NUMBER); CREATE TABLE Student (StuID NUMBER); CREATE TABLE Participates_in (stuid NUMBER, actid NUMBER); CREATE TABLE Faculty_Participates_in (actid NUMBER, FacID NUMBER);"
      },
      {
        "question": "Show the names of those with faculty participation.",
        "query": "SELECT t3.activity_name, t1.fname, t1.lname FROM faculty AS t1 JOIN faculty_participates_in AS t2 ON t1.facid = t2.facid JOIN activity AS t3 ON t3.actid = t2.actid",
        "schema": "CREATE TABLE Faculty_Participates_in (actid NUMBER, FacID NUMBER); CREATE TABLE Faculty (FacID NUMBER, Fname TEXT, Lname TEXT); CREATE TABLE Participates_in (actid NUMBER, stuid NUMBER); CREATE TABLE Activity (actid NUMBER, activity_name TEXT); CREATE TABLE Student (StuID NUMBER);"
      },
      {
        "question": "What are those activities which Mark Giuliano participates in?",
        "query": "SELECT t3.activity_name FROM faculty AS t1 JOIN faculty_participates_in AS t2 ON t1.facid = t2.facid JOIN activity AS t3 ON t3.actid = t2.actid WHERE t1.fname = \"Mark\" AND t1.lname = \"Giuliano\"",
        "schema": "CREATE TABLE Participates_in (actid NUMBER, stuid NUMBER); CREATE TABLE Student (StuID NUMBER); CREATE TABLE Faculty (Lname TEXT, Fname TEXT, FacID NUMBER); CREATE TABLE Activity (actid NUMBER, activity_name TEXT); CREATE TABLE Faculty_Participates_in (FacID NUMBER, actid NUMBER);"
      }
    ],
    [
      {
        "question": "Show the first and last name of all the faculty members.",
        "query": "SELECT fname , lname FROM faculty",
        "schema": "CREATE TABLE Faculty (Fname TEXT, FacID NUMBER, Lname TEXT, Rank TEXT);"
      },
      {
        "question": "Which of those have participated in some activity?",
        "query": "SELECT t1.fname , t1.lname FROM faculty AS t1 JOIN faculty_participates_in AS t2 ON t1.facid = t2.facid",
        "schema": "CREATE TABLE Faculty (Lname TEXT, Rank TEXT, FacID NUMBER, Fname TEXT); CREATE TABLE Faculty_Participates_in (FacID NUMBER, actid NUMBER); CREATE TABLE Activity (actid NUMBER, activity_name TEXT);"
      },
      {
        "question": "For each of them, also show the number of activities they participated in.",
        "query": "SELECT t1.fname , t1.lname , count(*) FROM faculty AS t1 JOIN faculty_participates_in AS t2 ON t1.facid = t2.facid GROUP BY t1.facid",
        "schema": "CREATE TABLE Activity (activity_name TEXT, actid NUMBER); CREATE TABLE Faculty_Participates_in (actid NUMBER, FacID NUMBER); CREATE TABLE Faculty (FacID NUMBER, Fname TEXT, Rank TEXT, Lname TEXT);"
      }
    ],
    [
      {
        "question": "Show all the activity names.",
        "query": "SELECT activity_name FROM activity",
        "schema": "CREATE TABLE Activity (activity_name TEXT, actid NUMBER); CREATE TABLE Faculty (FacID NUMBER); CREATE TABLE Faculty_Participates_in (FacID NUMBER, actid NUMBER); CREATE TABLE Participates_in (stuid NUMBER, actid NUMBER); CREATE TABLE Student (StuID NUMBER);"
      },
      {
        "question": "For each of them, how many faculty are involved?",
        "query": "SELECT t1.activity_name , count(*) FROM activity AS t1 JOIN faculty_participates_in AS t2 ON t1.actid = t2.actid GROUP BY t1.actid",
        "schema": "CREATE TABLE Faculty (Fname TEXT, Lname TEXT, FacID NUMBER); CREATE TABLE Faculty_Participates_in (actid NUMBER, FacID NUMBER); CREATE TABLE Activity (activity_name TEXT, actid NUMBER); CREATE TABLE Student (StuID NUMBER); CREATE TABLE Participates_in (actid NUMBER, stuid NUMBER);"
      }
    ],
    [
      {
        "question": "Show the first and last name for all faculty.",
        "query": "SELECT fname , lname FROM faculty",
        "schema": "CREATE TABLE Faculty (Lname TEXT, Rank TEXT, Fname TEXT, FacID NUMBER);"
      },
      {
        "question": "For each of them, also count the number of activities they participate in.",
        "query": "SELECT t1.fname , t1.lname, count(*) FROM faculty AS t1 JOIN faculty_participates_in AS t2 ON t1.facid = t2.facid GROUP BY t1.facid",
        "schema": "CREATE TABLE Activity (activity_name TEXT, actid NUMBER); CREATE TABLE Faculty_Participates_in (actid NUMBER, FacID NUMBER); CREATE TABLE Participates_in (stuid NUMBER, actid NUMBER); CREATE TABLE Faculty (Lname TEXT, Rank TEXT, FacID NUMBER, Fname TEXT);"
      },
      {
        "question": "Sort the names in the descending order of this count.",
        "query": "SELECT t1.fname , t1.lname FROM faculty AS t1 JOIN faculty_participates_in AS t2 ON t1.facid = t2.facid GROUP BY t1.facid ORDER BY count(*) DESC",
        "schema": "CREATE TABLE Activity (activity_name TEXT, actid NUMBER); CREATE TABLE Participates_in (stuid NUMBER, actid NUMBER); CREATE TABLE Faculty_Participates_in (FacID NUMBER, actid NUMBER); CREATE TABLE Faculty (Lname TEXT, FacID NUMBER, Fname TEXT, Rank TEXT);"
      },
      {
        "question": "Who participates in the most activities?",
        "query": "SELECT t1.fname , t1.lname FROM faculty AS t1 JOIN faculty_participates_in AS t2 ON t1.facid = t2.facid GROUP BY t1.facid ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Activity (actid NUMBER, activity_name TEXT); CREATE TABLE Faculty (Rank TEXT, Fname TEXT, Lname TEXT, FacID NUMBER); CREATE TABLE Faculty_Participates_in (FacID NUMBER, actid NUMBER); CREATE TABLE Participates_in (stuid NUMBER, actid NUMBER);"
      }
    ],
    [
      {
        "question": "Show all activity names.",
        "query": "SELECT activity_name FROM activity",
        "schema": "CREATE TABLE Faculty_Participates_in (FacID NUMBER, actid NUMBER); CREATE TABLE Student (StuID NUMBER); CREATE TABLE Participates_in (stuid NUMBER, actid NUMBER); CREATE TABLE Faculty (FacID NUMBER); CREATE TABLE Activity (actid NUMBER, activity_name TEXT);"
      },
      {
        "question": "For each of them, also show the number of faculty members involved.",
        "query": "SELECT t1.activity_name, count(*) FROM activity AS t1 JOIN faculty_participates_in AS t2 ON t1.actid = t2.actid GROUP BY t1.actid",
        "schema": "CREATE TABLE Faculty (FacID NUMBER, Fname TEXT, Lname TEXT); CREATE TABLE Participates_in (actid NUMBER, stuid NUMBER); CREATE TABLE Faculty_Participates_in (FacID NUMBER, actid NUMBER); CREATE TABLE Student (StuID NUMBER); CREATE TABLE Activity (actid NUMBER, activity_name TEXT);"
      },
      {
        "question": "Sort the names in the descending order of the faculty counts.",
        "query": "SELECT t1.activity_name FROM activity AS t1 JOIN faculty_participates_in AS t2 ON t1.actid = t2.actid GROUP BY t1.actid ORDER BY count(*) DESC",
        "schema": "CREATE TABLE Participates_in (actid NUMBER, stuid NUMBER); CREATE TABLE Activity (actid NUMBER, activity_name TEXT); CREATE TABLE Student (StuID NUMBER); CREATE TABLE Faculty_Participates_in (actid NUMBER, FacID NUMBER); CREATE TABLE Faculty (FacID NUMBER, Fname TEXT, Lname TEXT);"
      },
      {
        "question": "Which activity has the most?",
        "query": "SELECT t1.activity_name FROM activity AS t1 JOIN faculty_participates_in AS t2 ON t1.actid = t2.actid GROUP BY t1.actid ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Participates_in (actid NUMBER, stuid NUMBER); CREATE TABLE Activity (actid NUMBER, activity_name TEXT); CREATE TABLE Student (StuID NUMBER); CREATE TABLE Faculty (FacID NUMBER, Fname TEXT, Lname TEXT); CREATE TABLE Faculty_Participates_in (actid NUMBER, FacID NUMBER);"
      }
    ],
    [
      {
        "question": "Show the student ids who participate in an activity.",
        "query": "SELECT stuid FROM participates_in",
        "schema": "CREATE TABLE Participates_in (actid NUMBER, stuid NUMBER); CREATE TABLE Student (StuID NUMBER); CREATE TABLE Faculty (FacID NUMBER); CREATE TABLE Activity (activity_name TEXT, actid NUMBER); CREATE TABLE Faculty_Participates_in (actid NUMBER, FacID NUMBER);"
      },
      {
        "question": "Show the ids of those who don't.",
        "query": "SELECT stuid FROM student EXCEPT SELECT stuid FROM participates_in",
        "schema": "CREATE TABLE Faculty (FacID NUMBER); CREATE TABLE Faculty_Participates_in (actid NUMBER, FacID NUMBER); CREATE TABLE Student (StuID NUMBER); CREATE TABLE Participates_in (stuid NUMBER, actid NUMBER); CREATE TABLE Activity (activity_name TEXT, actid NUMBER);"
      }
    ],
    [
      {
        "question": "Show the ids for the students who participate in an activity.",
        "query": "SELECT stuid FROM participates_in",
        "schema": "CREATE TABLE Student (StuID NUMBER); CREATE TABLE Faculty_Participates_in (FacID NUMBER); CREATE TABLE Activity (actid NUMBER, activity_name TEXT); CREATE TABLE Participates_in (actid NUMBER, stuid NUMBER);"
      },
      {
        "question": "Among those, who are under 20?",
        "query": "SELECT stuid FROM participates_in INTERSECT SELECT stuid FROM student WHERE age < 20",
        "schema": "CREATE TABLE Activity (actid NUMBER, activity_name TEXT); CREATE TABLE Student (Age NUMBER, StuID NUMBER); CREATE TABLE Participates_in (stuid NUMBER, actid NUMBER); CREATE TABLE Faculty_Participates_in (FacID NUMBER);"
      }
    ],
    [
      {
        "question": "Show the first and last name of the student.",
        "query": "SELECT fname , lname FROM student",
        "schema": "CREATE TABLE Student (LName TEXT, Fname TEXT, StuID NUMBER); CREATE TABLE Faculty (Lname TEXT, Fname TEXT);"
      },
      {
        "question": "For each of them, count the number of activities.",
        "query": "SELECT t1.fname , t1.lname, count(*) FROM student AS t1 JOIN participates_in AS t2 ON t1.stuid = t2.stuid GROUP BY t1.stuid",
        "schema": "CREATE TABLE Faculty (Fname TEXT, Lname TEXT); CREATE TABLE Activity (actid NUMBER, activity_name TEXT); CREATE TABLE Student (LName TEXT, StuID NUMBER, Fname TEXT); CREATE TABLE Faculty_Participates_in (actid NUMBER); CREATE TABLE Participates_in (stuid NUMBER, actid NUMBER);"
      },
      {
        "question": "Sort the names in descending order by the number of activities.",
        "query": "SELECT t1.fname , t1.lname FROM student AS t1 JOIN participates_in AS t2 ON t1.stuid = t2.stuid GROUP BY t1.stuid ORDER BY count(*) DESC",
        "schema": "CREATE TABLE Participates_in (stuid NUMBER, actid NUMBER); CREATE TABLE Faculty (Fname TEXT, Lname TEXT); CREATE TABLE Student (StuID NUMBER, Fname TEXT, LName TEXT); CREATE TABLE Activity (activity_name TEXT, actid NUMBER); CREATE TABLE Faculty_Participates_in (actid NUMBER);"
      },
      {
        "question": "Who has the most?",
        "query": "SELECT t1.fname , t1.lname FROM student AS t1 JOIN participates_in AS t2 ON t1.stuid = t2.stuid GROUP BY t1.stuid ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT); CREATE TABLE Faculty (Lname TEXT, Fname TEXT); CREATE TABLE Activity (actid NUMBER, activity_name TEXT); CREATE TABLE Faculty_Participates_in (actid NUMBER); CREATE TABLE Participates_in (stuid NUMBER, actid NUMBER);"
      }
    ],
    [
      {
        "question": "Show the names of activities.",
        "query": "SELECT activity_name FROM activity",
        "schema": "CREATE TABLE Faculty (FacID NUMBER); CREATE TABLE Activity (activity_name TEXT, actid NUMBER); CREATE TABLE Participates_in (actid NUMBER, stuid NUMBER); CREATE TABLE Student (StuID NUMBER); CREATE TABLE Faculty_Participates_in (FacID NUMBER, actid NUMBER);"
      },
      {
        "question": "For each of them, also show the number of students.",
        "query": "SELECT t1.activity_name, count(*) FROM activity AS t1 JOIN participates_in AS t2 ON t1.actid = t2.actid GROUP BY t1.actid",
        "schema": "CREATE TABLE Faculty (FacID NUMBER); CREATE TABLE Participates_in (stuid NUMBER, actid NUMBER); CREATE TABLE Student (LName TEXT, StuID NUMBER); CREATE TABLE Activity (actid NUMBER, activity_name TEXT); CREATE TABLE Faculty_Participates_in (FacID NUMBER, actid NUMBER);"
      },
      {
        "question": "Sort the names in descending order by this number.",
        "query": "SELECT t1.activity_name FROM activity AS t1 JOIN participates_in AS t2 ON t1.actid = t2.actid GROUP BY t1.actid ORDER BY count(*) DESC",
        "schema": "CREATE TABLE Participates_in (stuid NUMBER, actid NUMBER); CREATE TABLE Activity (activity_name TEXT, actid NUMBER); CREATE TABLE Student (StuID NUMBER, LName TEXT); CREATE TABLE Faculty (FacID NUMBER); CREATE TABLE Faculty_Participates_in (FacID NUMBER, actid NUMBER);"
      },
      {
        "question": "Which has the most?",
        "query": "SELECT t1.activity_name FROM activity AS t1 JOIN participates_in AS t2 ON t1.actid = t2.actid GROUP BY t1.actid ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Activity (activity_name TEXT, actid NUMBER); CREATE TABLE Participates_in (actid NUMBER, stuid NUMBER); CREATE TABLE Faculty_Participates_in (actid NUMBER, FacID NUMBER); CREATE TABLE Student (StuID NUMBER, LName TEXT); CREATE TABLE Faculty (FacID NUMBER);"
      }
    ],
    [
      {
        "question": "Show the first names of the faculty members.",
        "query": "SELECT fname FROM faculty",
        "schema": "CREATE TABLE Faculty (Lname TEXT, Rank TEXT, Fname TEXT, FacID NUMBER);"
      },
      {
        "question": "Which of them participate in canoeing?",
        "query": "SELECT DISTINCT t1.fname FROM faculty AS t1 JOIN faculty_participates_in AS t2 ON t1.facid = t2.facid JOIN activity AS t3 ON t2.actid = t2.actid WHERE t3.activity_name = 'Canoeing'",
        "schema": "CREATE TABLE Faculty_Participates_in (actid NUMBER, FacID NUMBER); CREATE TABLE Faculty (Building TEXT, Lname TEXT, FacID NUMBER, Rank TEXT, Fname TEXT); CREATE TABLE Participates_in (stuid NUMBER, actid NUMBER); CREATE TABLE Activity (activity_name TEXT, actid NUMBER);"
      },
      {
        "question": "How about Kayaking?",
        "query": "SELECT DISTINCT t1.fname FROM faculty AS t1 JOIN faculty_participates_in AS t2 ON t1.facid = t2.facid JOIN activity AS t3 ON t2.actid = t2.actid WHERE t3.activity_name = 'Kayaking'",
        "schema": "CREATE TABLE Participates_in (actid NUMBER, stuid NUMBER); CREATE TABLE Activity (actid NUMBER, activity_name TEXT); CREATE TABLE Faculty_Participates_in (FacID NUMBER, actid NUMBER); CREATE TABLE Faculty (Rank TEXT, FacID NUMBER, Lname TEXT, Building TEXT, Fname TEXT);"
      },
      {
        "question": "Show the first names for those participating in either of the two.",
        "query": "SELECT DISTINCT t1.fname FROM faculty AS t1 JOIN faculty_participates_in AS t2 ON t1.facid = t2.facid JOIN activity AS t3 ON t2.actid = t2.actid WHERE t3.activity_name = 'Canoeing' OR t3.activity_name = 'Kayaking'",
        "schema": "CREATE TABLE Participates_in (actid NUMBER, stuid NUMBER); CREATE TABLE Faculty_Participates_in (actid NUMBER, FacID NUMBER); CREATE TABLE Activity (activity_name TEXT, actid NUMBER); CREATE TABLE Faculty (Lname TEXT, Building TEXT, Rank TEXT, FacID NUMBER, Fname TEXT);"
      }
    ],
    [
      {
        "question": "Show the first name of faculty and their activity names.",
        "query": "SELECT t1.fname, t3.activity_name FROM faculty AS t1 JOIN faculty_participates_in AS t2 ON t1.facid = t2.facid JOIN activity AS t3 ON t2.actid = t2.actid",
        "schema": "CREATE TABLE Activity (actid NUMBER, activity_name TEXT); CREATE TABLE Participates_in (actid NUMBER); CREATE TABLE Faculty_Participates_in (FacID NUMBER, actid NUMBER); CREATE TABLE Faculty (Fname TEXT, FacID NUMBER, Rank TEXT, Lname TEXT);"
      },
      {
        "question": "Which of them practice canoeing or kayaking?",
        "query": "SELECT DISTINCT t1.fname FROM faculty AS t1 JOIN faculty_participates_in AS t2 ON t1.facid = t2.facid JOIN activity AS t3 ON t2.actid = t2.actid WHERE t3.activity_name = 'Canoeing' OR t3.activity_name = 'Kayaking'",
        "schema": "CREATE TABLE Faculty (Rank TEXT, FacID NUMBER, Lname TEXT, Fname TEXT); CREATE TABLE Participates_in (actid NUMBER, stuid NUMBER); CREATE TABLE Activity (actid NUMBER, activity_name TEXT); CREATE TABLE Faculty_Participates_in (FacID NUMBER, actid NUMBER);"
      },
      {
        "question": "Which of them do not?",
        "query": "SELECT fname FROM faculty EXCEPT SELECT DISTINCT t1.fname FROM faculty AS t1 JOIN faculty_participates_in AS t2 ON t1.facid = t2.facid JOIN activity AS t3 ON t2.actid = t2.actid WHERE t3.activity_name = 'Canoeing' OR t3.activity_name = 'Kayaking'",
        "schema": "CREATE TABLE Activity (actid NUMBER, activity_name TEXT); CREATE TABLE Faculty_Participates_in (FacID NUMBER, actid NUMBER); CREATE TABLE Faculty (FacID NUMBER, Lname TEXT, Fname TEXT, Rank TEXT); CREATE TABLE Participates_in (actid NUMBER, stuid NUMBER);"
      },
      {
        "question": "Who among these are professors?",
        "query": "SELECT fname FROM faculty WHERE rank = 'Professor' EXCEPT SELECT DISTINCT t1.fname FROM faculty AS t1 JOIN faculty_participates_in AS t2 ON t1.facid = t2.facid JOIN activity AS t3 ON t2.actid = t2.actid WHERE t3.activity_name = 'Canoeing' OR t3.activity_name = 'Kayaking'",
        "schema": "CREATE TABLE Activity (actid NUMBER, activity_name TEXT); CREATE TABLE Faculty (Fname TEXT, Rank TEXT, Lname TEXT, FacID NUMBER); CREATE TABLE Participates_in (actid NUMBER, stuid NUMBER); CREATE TABLE Faculty_Participates_in (actid NUMBER, FacID NUMBER);"
      }
    ],
    [
      {
        "question": "Find the first names of the faculty members",
        "query": "SELECT fname FROM faculty",
        "schema": "CREATE TABLE Faculty (FacID NUMBER, Lname TEXT, Fname TEXT, Rank TEXT);"
      },
      {
        "question": "Show the activity names for them.",
        "query": "SELECT t1.fname, t3.activity_name FROM faculty AS t1 JOIN faculty_participates_in AS t2 ON t1.facid = t2.facid JOIN activity AS t3 ON t2.actid = t2.actid",
        "schema": "CREATE TABLE Activity (actid NUMBER, activity_name TEXT); CREATE TABLE Faculty_Participates_in (FacID NUMBER, actid NUMBER); CREATE TABLE Faculty (Lname TEXT, Rank TEXT, Fname TEXT, FacID NUMBER); CREATE TABLE Participates_in (actid NUMBER);"
      },
      {
        "question": "Which of them participate in canoeing?",
        "query": "SELECT t1.fname FROM faculty AS t1 JOIN faculty_participates_in AS t2 ON t1.facid = t2.facid JOIN activity AS t3 ON t2.actid = t2.actid WHERE t3.activity_name = 'Canoeing'",
        "schema": "CREATE TABLE Faculty (FacID NUMBER, Fname TEXT, Lname TEXT, Rank TEXT); CREATE TABLE Participates_in (stuid NUMBER, actid NUMBER); CREATE TABLE Faculty_Participates_in (FacID NUMBER, actid NUMBER); CREATE TABLE Activity (actid NUMBER, activity_name TEXT);"
      },
      {
        "question": "Which of them participate in kayaking?",
        "query": "SELECT t1.fname FROM faculty AS t1 JOIN faculty_participates_in AS t2 ON t1.facid = t2.facid JOIN activity AS t3 ON t2.actid = t2.actid WHERE t3.activity_name = 'Kayaking'",
        "schema": "CREATE TABLE Faculty (Lname TEXT, Fname TEXT, Rank TEXT, FacID NUMBER); CREATE TABLE Activity (activity_name TEXT, actid NUMBER); CREATE TABLE Participates_in (stuid NUMBER, actid NUMBER); CREATE TABLE Faculty_Participates_in (FacID NUMBER, actid NUMBER);"
      },
      {
        "question": "Which of them participate in both.",
        "query": "SELECT t1.fname FROM faculty AS t1 JOIN faculty_participates_in AS t2 ON t1.facid = t2.facid JOIN activity AS t3 ON t2.actid = t2.actid WHERE t3.activity_name = 'Canoeing' INTERSECT SELECT t1.fname FROM faculty AS t1 JOIN faculty_participates_in AS t2 ON t1.facid = t2.facid JOIN activity AS t3 ON t2.actid = t2.actid WHERE t3.activity_name = 'Kayaking'",
        "schema": "CREATE TABLE Faculty (Lname TEXT, FacID NUMBER, Fname TEXT, Rank TEXT); CREATE TABLE Activity (activity_name TEXT, actid NUMBER); CREATE TABLE Faculty_Participates_in (actid NUMBER, FacID NUMBER); CREATE TABLE Participates_in (stuid NUMBER, actid NUMBER);"
      }
    ]
  ],
  "workshop_paper": [
    [
      {
        "question": "How many authors are from college \"Florida\"?",
        "query": "SELECT count(author) FROM submission WHERE college = \"Florida\"",
        "schema": "CREATE TABLE workshop (Name TEXT); CREATE TABLE submission (College TEXT, Author TEXT, Submission_ID NUMBER);"
      },
      {
        "question": "How about the college \"Temple\"?",
        "query": "SELECT count(author) FROM submission WHERE college = \"Temple\"",
        "schema": "CREATE TABLE submission (Author TEXT, Submission_ID NUMBER, College TEXT); CREATE TABLE workshop (Name TEXT);"
      },
      {
        "question": "What is the sum of the number of authors from these two colleges?",
        "query": "SELECT count(author) FROM submission WHERE college = \"Florida\" OR college = \"Temple\"",
        "schema": "CREATE TABLE workshop (Name TEXT); CREATE TABLE submission (College TEXT, Submission_ID NUMBER, Author TEXT);"
      },
      {
        "question": "Please show the authors' names.",
        "query": "SELECT author FROM submission WHERE college = \"Florida\" OR college = \"Temple\"",
        "schema": "CREATE TABLE workshop (Name TEXT); CREATE TABLE submission (College TEXT, Author TEXT, Submission_ID NUMBER);"
      }
    ],
    [
      {
        "question": "How many authors have sumbitted their work?",
        "query": "SELECT count(author) FROM submission",
        "schema": "CREATE TABLE submission (Submission_ID NUMBER, Author TEXT, Scores NUMBER);"
      },
      {
        "question": "Please show their names.",
        "query": "SELECT author FROM submission",
        "schema": "CREATE TABLE submission (Submission_ID NUMBER, Author TEXT, Scores NUMBER); CREATE TABLE Acceptance (Submission_ID NUMBER);"
      },
      {
        "question": "What is the author of the submission with the lowest score?",
        "query": "SELECT author FROM submission ORDER BY scores ASC LIMIT 1",
        "schema": "CREATE TABLE submission (Scores NUMBER, Submission_ID NUMBER, Author TEXT); CREATE TABLE Acceptance (Submission_ID NUMBER);"
      },
      {
        "question": "How about the highest score?",
        "query": "SELECT author FROM submission ORDER BY scores DESC LIMIT 1",
        "schema": "CREATE TABLE Acceptance (Submission_ID NUMBER); CREATE TABLE submission (Scores NUMBER, Submission_ID NUMBER, Author TEXT);"
      }
    ],
    [
      {
        "question": "How many authors have sumbitted their work?",
        "query": "SELECT count(author) FROM submission",
        "schema": "CREATE TABLE submission (Scores NUMBER, Author TEXT, Submission_ID NUMBER);"
      },
      {
        "question": "Please show their colleges.",
        "query": "SELECT college FROM submission",
        "schema": "CREATE TABLE submission (Scores NUMBER, Author TEXT, Submission_ID NUMBER, College TEXT);"
      },
      {
        "question": "How many unique colleges are there?",
        "query": "SELECT count(DISTINCT college) FROM submission",
        "schema": "CREATE TABLE submission (Submission_ID NUMBER, Author TEXT, Scores NUMBER, College TEXT);"
      },
      {
        "question": "Among these colleges, which one has the most submissions?",
        "query": "SELECT college FROM submission GROUP BY college ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE submission (Scores NUMBER, Author TEXT, College TEXT, Submission_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What is the largest submission score?",
        "query": "SELECT max(scores) FROM submission",
        "schema": "CREATE TABLE submission (Scores NUMBER, Submission_ID NUMBER);"
      },
      {
        "question": "How many submissions have a score larger than 90?",
        "query": "SELECT count(*) FROM submission WHERE scores > 90",
        "schema": "CREATE TABLE Acceptance (Submission_ID NUMBER); CREATE TABLE submission (Scores NUMBER, Submission_ID NUMBER);"
      },
      {
        "question": "How about the number of submissions with a score less than 80?",
        "query": "SELECT count(*) FROM submission WHERE scores < 80",
        "schema": "CREATE TABLE submission (Submission_ID NUMBER, Scores NUMBER); CREATE TABLE Acceptance (Submission_ID NUMBER);"
      },
      {
        "question": "What are the colleges that have both authors with submission score larger than 90 and authors with submission score smaller than 80?",
        "query": "SELECT college FROM submission WHERE scores > 90 INTERSECT SELECT college FROM submission WHERE scores < 80",
        "schema": "CREATE TABLE Acceptance (Submission_ID NUMBER); CREATE TABLE submission (Author TEXT, Scores NUMBER, College TEXT, Submission_ID NUMBER);"
      }
    ],
    [
      {
        "question": "How many submissions have been accepted?",
        "query": "SELECT count(*) FROM acceptance WHERE RESULT = \"Accepted\"",
        "schema": "CREATE TABLE submission (Submission_ID NUMBER, College TEXT); CREATE TABLE Acceptance (Result TEXT, Workshop_ID NUMBER, Submission_ID NUMBER);"
      },
      {
        "question": "What is the average submission score of these works?",
        "query": "SELECT avg(t2.scores) FROM acceptance AS t1 JOIN submission AS t2 ON t1.submission_id = t2.submission_id WHERE t1.result = \"Accepted\"",
        "schema": "CREATE TABLE submission (Scores NUMBER, College TEXT, Submission_ID NUMBER); CREATE TABLE Acceptance (Workshop_ID NUMBER, Submission_ID NUMBER, Result TEXT);"
      },
      {
        "question": "Which submission has the highest score? Show its submission ID.",
        "query": "SELECT t2.submission_id FROM acceptance AS t1 JOIN submission AS t2 ON t1.submission_id = t2.submission_id ORDER BY t2.scores DESC LIMIT 1",
        "schema": "CREATE TABLE submission (Scores NUMBER, College TEXT, Submission_ID NUMBER); CREATE TABLE Acceptance (Submission_ID NUMBER, Result TEXT, Workshop_ID NUMBER);"
      },
      {
        "question": "How about its submission result?",
        "query": "SELECT t1.result FROM acceptance AS t1 JOIN submission AS t2 ON t1.submission_id = t2.submission_id ORDER BY t2.scores DESC LIMIT 1",
        "schema": "CREATE TABLE Acceptance (Result TEXT, Submission_ID NUMBER, Workshop_ID NUMBER); CREATE TABLE submission (Scores NUMBER, College TEXT, Submission_ID NUMBER);"
      }
    ],
    [
      {
        "question": "How many different workshops are there?",
        "query": "SELECT count(*) FROM workshop",
        "schema": "CREATE TABLE submission (Submission_ID NUMBER); CREATE TABLE workshop (Name TEXT, Venue TEXT, Workshop_ID NUMBER); CREATE TABLE Acceptance (Workshop_ID NUMBER);"
      },
      {
        "question": "How many authors are there?",
        "query": "SELECT count(author) FROM submission",
        "schema": "CREATE TABLE workshop (Workshop_ID NUMBER, Venue TEXT, Name TEXT); CREATE TABLE submission (Submission_ID NUMBER, Author TEXT); CREATE TABLE Acceptance (Submission_ID NUMBER, Workshop_ID NUMBER);"
      },
      {
        "question": "Show each author and the number of workshops they submitted to.",
        "query": "SELECT t2.author , count(DISTINCT t1.workshop_id) FROM acceptance AS t1 JOIN submission AS t2 ON t1.submission_id = t2.submission_id GROUP BY t2.author",
        "schema": "CREATE TABLE Acceptance (Submission_ID NUMBER, Workshop_ID NUMBER); CREATE TABLE workshop (Venue TEXT, Name TEXT, Workshop_ID NUMBER); CREATE TABLE submission (Author TEXT, Submission_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Which workshops happened in New York USA?",
        "query": "SELECT name FROM workshop WHERE venue = \"New York USA\"",
        "schema": "CREATE TABLE Acceptance (Workshop_ID NUMBER); CREATE TABLE submission (Submission_ID NUMBER); CREATE TABLE workshop (Workshop_ID NUMBER, Name TEXT, Date TEXT, Venue TEXT);"
      },
      {
        "question": "How many workshops have been held?",
        "query": "SELECT count(*) FROM workshop",
        "schema": "CREATE TABLE Acceptance (Workshop_ID NUMBER); CREATE TABLE submission (Submission_ID NUMBER); CREATE TABLE workshop (Workshop_ID NUMBER, Venue TEXT, Date TEXT, Name TEXT);"
      },
      {
        "question": "How many authors have submitted to more than one workshop?",
        "query": "SELECT count(DISTINCT t2.author) FROM acceptance AS t1 JOIN submission AS t2 ON t1.submission_id = t2.submission_id GROUP BY t2.author HAVING count(DISTINCT t1.workshop_id) > 1",
        "schema": "CREATE TABLE submission (Submission_ID NUMBER, Author TEXT); CREATE TABLE workshop (Date TEXT, Venue TEXT, Workshop_ID NUMBER, Name TEXT); CREATE TABLE Acceptance (Workshop_ID NUMBER, Submission_ID NUMBER, Result TEXT);"
      },
      {
        "question": "Please show their names.",
        "query": "SELECT t2.author FROM acceptance AS t1 JOIN submission AS t2 ON t1.submission_id = t2.submission_id GROUP BY t2.author HAVING count(DISTINCT t1.workshop_id) > 1",
        "schema": "CREATE TABLE workshop (Date TEXT, Workshop_ID NUMBER, Name TEXT, Venue TEXT); CREATE TABLE submission (Author TEXT, Submission_ID NUMBER); CREATE TABLE Acceptance (Submission_ID NUMBER, Workshop_ID NUMBER, Result TEXT);"
      }
    ]
  ],
  "race_track": [
    [
      {
        "question": "List all the information about the tracks.",
        "query": "SELECT * FROM track",
        "schema": "CREATE TABLE track (Track_ID NUMBER, Name TEXT); CREATE TABLE race (Track_ID TEXT);"
      },
      {
        "question": "Which names and seatings of the tracks that are opened later than the year 1950 ?",
        "query": "SELECT name , seating FROM track WHERE year_opened > 1950",
        "schema": "CREATE TABLE race (Track_ID TEXT); CREATE TABLE track (Track_ID NUMBER, Seating NUMBER, Location TEXT, Year_Opened NUMBER, Name TEXT);"
      },
      {
        "question": "What about after the year 2000?",
        "query": "SELECT name , seating FROM track WHERE year_opened > 2000",
        "schema": "CREATE TABLE race (Track_ID TEXT); CREATE TABLE track (Location TEXT, Seating NUMBER, Track_ID NUMBER, Year_Opened NUMBER, Name TEXT);"
      },
      {
        "question": "Order them by seating.",
        "query": "SELECT name , seating FROM track WHERE year_opened > 2000 ORDER BY seating",
        "schema": "CREATE TABLE track (Track_ID NUMBER, Name TEXT, Year_Opened NUMBER, Seating NUMBER, Location TEXT); CREATE TABLE race (Track_ID TEXT);"
      }
    ],
    [
      {
        "question": "Order all the tracks by the year of opening, from the most recent to the least recent.",
        "query": "SELECT * FROM track ORDER BY year_opened DESC",
        "schema": "CREATE TABLE track (Year_Opened NUMBER, Track_ID NUMBER, Name TEXT);"
      },
      {
        "question": "Which 4 are the most recent ones? Show the name, location and seating.",
        "query": "SELECT name , LOCATION , seating FROM track ORDER BY year_opened DESC LIMIT 4",
        "schema": "CREATE TABLE track (Seating NUMBER, Location TEXT, Year_Opened NUMBER, Name TEXT, Track_ID NUMBER);"
      },
      {
        "question": "What about the most recent 1?",
        "query": "SELECT name , LOCATION , seating FROM track ORDER BY year_opened DESC LIMIT 1",
        "schema": "CREATE TABLE track (Location TEXT, Seating NUMBER, Track_ID NUMBER, Name TEXT, Year_Opened NUMBER);"
      }
    ],
    [
      {
        "question": "What is the total seating numbers from the track?",
        "query": "SELECT sum(seating) FROM track",
        "schema": "CREATE TABLE race (Track_ID TEXT); CREATE TABLE track (Name TEXT, Seating NUMBER, Track_ID NUMBER);"
      },
      {
        "question": "What about the minimum, maximum, and average?",
        "query": "SELECT min(seating) , max(seating) , avg(seating) FROM track",
        "schema": "CREATE TABLE race (Track_ID TEXT); CREATE TABLE track (Seating NUMBER, Track_ID NUMBER, Name TEXT);"
      }
    ],
    [
      {
        "question": "What is the total seating numbers from the track?",
        "query": "SELECT sum(seating) FROM track",
        "schema": "CREATE TABLE race (Track_ID TEXT); CREATE TABLE track (Name TEXT, Seating NUMBER, Track_ID NUMBER);"
      },
      {
        "question": "What about the average value?",
        "query": "SELECT avg(seating) FROM track",
        "schema": "CREATE TABLE track (Name TEXT, Track_ID NUMBER, Seating NUMBER); CREATE TABLE race (Track_ID TEXT);"
      },
      {
        "question": "Which tracks have a higher seating number than that?",
        "query": "SELECT * FROM track WHERE seating > (SELECT avg(seating) FROM track)",
        "schema": "CREATE TABLE race (Track_ID TEXT); CREATE TABLE track (Name TEXT, Seating NUMBER, Track_ID NUMBER);"
      },
      {
        "question": "Only keep the name, location, open year of them.",
        "query": "SELECT name , LOCATION , year_opened FROM track WHERE seating > (SELECT avg(seating) FROM track)",
        "schema": "CREATE TABLE track (Track_ID NUMBER, Year_Opened NUMBER, Name TEXT, Location TEXT, Seating NUMBER); CREATE TABLE race (Track_ID TEXT);"
      }
    ],
    [
      {
        "question": "Show all the classes from the race.",
        "query": "SELECT * FROM race",
        "schema": "CREATE TABLE race (Race_ID NUMBER, Class TEXT, Name TEXT); CREATE TABLE track (Track_ID NUMBER);"
      },
      {
        "question": "For each class, show the number of races for each.",
        "query": "SELECT CLASS, count(*) FROM race GROUP BY CLASS",
        "schema": "CREATE TABLE track (Track_ID NUMBER); CREATE TABLE race (Name TEXT, Race_ID NUMBER, Class TEXT);"
      },
      {
        "question": "How many are there for the class 'GT'?",
        "query": "SELECT CLASS, count(*) FROM race GROUP BY CLASS HAVING CLASS = 'GT'",
        "schema": "CREATE TABLE track (Track_ID NUMBER); CREATE TABLE race (Name TEXT, Race_ID NUMBER, Class TEXT);"
      },
      {
        "question": "Which one has the most number of races?",
        "query": "SELECT CLASS FROM race GROUP BY CLASS ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE race (Race_ID NUMBER, Name TEXT, Class TEXT); CREATE TABLE track (Track_ID NUMBER);"
      }
    ],
    [
      {
        "question": "For each class, show the number of races for each.",
        "query": "SELECT CLASS, count(*) FROM race GROUP BY CLASS",
        "schema": "CREATE TABLE race (Class TEXT, Race_ID NUMBER);"
      },
      {
        "question": "Which race classes have more than 3 races?",
        "query": "SELECT CLASS FROM race GROUP BY CLASS HAVING count(*) > 3",
        "schema": "CREATE TABLE race (Race_ID NUMBER, Class TEXT);"
      },
      {
        "question": "What about at least two?",
        "query": "SELECT CLASS FROM race GROUP BY CLASS HAVING count(*) >= 2",
        "schema": "CREATE TABLE race (Class TEXT, Name TEXT, Race_ID NUMBER);"
      }
    ],
    [
      {
        "question": "How many races has the class 'GT'?",
        "query": "SELECT count(*) FROM race WHERE CLASS = 'GT'",
        "schema": "CREATE TABLE track (Track_ID NUMBER); CREATE TABLE race (Class TEXT, Race_ID NUMBER, Name TEXT);"
      },
      {
        "question": "What about without that class?",
        "query": "SELECT count(*) FROM race WHERE CLASS != 'GT'",
        "schema": "CREATE TABLE track (Track_ID NUMBER); CREATE TABLE race (Race_ID NUMBER, Name TEXT, Class TEXT);"
      },
      {
        "question": "What are the track names of them?",
        "query": "SELECT name FROM track EXCEPT SELECT t2.name FROM race AS t1 JOIN track AS t2 ON t1.track_id = t2.track_id WHERE t1.class = 'GT'",
        "schema": "CREATE TABLE race (Class TEXT, Race_ID NUMBER, Track_ID TEXT, Name TEXT); CREATE TABLE track (Name TEXT, Track_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What are the names and locations of the tracks?",
        "query": "SELECT name,LOCATION FROM track",
        "schema": "CREATE TABLE track (Name TEXT, Location TEXT, Track_ID NUMBER);"
      },
      {
        "question": "Which names of the tracks have at least one race?",
        "query": "SELECT name FROM track WHERE track_id IN (SELECT track_id FROM race)",
        "schema": "CREATE TABLE track (Track_ID NUMBER, Location TEXT, Name TEXT); CREATE TABLE race (Track_ID TEXT, Name TEXT);"
      },
      {
        "question": "What about no races?",
        "query": "SELECT name FROM track WHERE track_id NOT IN (SELECT track_id FROM race)",
        "schema": "CREATE TABLE track (Location TEXT, Track_ID NUMBER, Name TEXT); CREATE TABLE race (Name TEXT, Track_ID TEXT);"
      }
    ],
    [
      {
        "question": "What are the names of the tracks for each race?",
        "query": "SELECT t2.name, t1.name FROM race AS t1 JOIN track AS t2 ON t1.track_id = t2.track_id",
        "schema": "CREATE TABLE track (Track_ID NUMBER, Name TEXT); CREATE TABLE race (Race_ID NUMBER, Track_ID TEXT, Name TEXT);"
      },
      {
        "question": "How many races for the track name 'Auto Club Speedway'?",
        "query": "SELECT t2.name,t1.name, count(*) FROM race AS t1 JOIN track AS t2 ON t1.track_id = t2.track_id GROUP BY t1.track_id HAVING t2.name = 'Auto Club Speedway'",
        "schema": "CREATE TABLE race (Name TEXT, Track_ID TEXT, Race_ID NUMBER); CREATE TABLE track (Track_ID NUMBER, Name TEXT);"
      },
      {
        "question": "For each track name, how many races are there?",
        "query": "SELECT t2.name , count(*) FROM race AS t1 JOIN track AS t2 ON t1.track_id = t2.track_id GROUP BY t1.track_id",
        "schema": "CREATE TABLE track (Name TEXT, Track_ID NUMBER); CREATE TABLE race (Name TEXT, Track_ID TEXT, Race_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What are the names of the tracks for each race?",
        "query": "SELECT t2.name,t1.name FROM race AS t1 JOIN track AS t2 ON t1.track_id = t2.track_id",
        "schema": "CREATE TABLE track (Name TEXT, Track_ID NUMBER); CREATE TABLE race (Name TEXT, Track_ID TEXT, Race_ID NUMBER);"
      },
      {
        "question": "For each track, what is the number of races?",
        "query": "SELECT t2.name,t1.name, count(*) FROM race AS t1 JOIN track AS t2 ON t1.track_id = t2.track_id GROUP BY t1.track_id",
        "schema": "CREATE TABLE track (Track_ID NUMBER, Name TEXT); CREATE TABLE race (Race_ID NUMBER, Name TEXT, Track_ID TEXT);"
      },
      {
        "question": "Which track name has the most number of races?",
        "query": "SELECT t2.name FROM race AS t1 JOIN track AS t2 ON t1.track_id = t2.track_id GROUP BY t1.track_id ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE track (Name TEXT, Track_ID NUMBER); CREATE TABLE race (Track_ID TEXT, Name TEXT, Race_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What are the names of the tracks for each race?",
        "query": "SELECT t2.name, t1.name FROM race AS t1 JOIN track AS t2 ON t1.track_id = t2.track_id",
        "schema": "CREATE TABLE track (Name TEXT, Track_ID NUMBER); CREATE TABLE race (Name TEXT, Race_ID NUMBER, Track_ID TEXT);"
      },
      {
        "question": "For each track name, how many races for each?",
        "query": "SELECT t2.name , count(*) FROM race AS t1 JOIN track AS t2 ON t1.track_id = t2.track_id GROUP BY t1.track_id",
        "schema": "CREATE TABLE track (Track_ID NUMBER, Name TEXT); CREATE TABLE race (Name TEXT, Track_ID TEXT, Race_ID NUMBER);"
      },
      {
        "question": "How many tracks have at least two races?",
        "query": "SELECT count(*) FROM race AS t1 JOIN track AS t2 ON t1.track_id = t2.track_id GROUP BY t1.track_id HAVING count(*) >= 2",
        "schema": "CREATE TABLE race (Race_ID NUMBER, Name TEXT, Track_ID TEXT); CREATE TABLE track (Track_ID NUMBER, Name TEXT);"
      },
      {
        "question": "What about only one race? Show the track name and location?",
        "query": "SELECT t2.name , t2.location FROM race AS t1 JOIN track AS t2 ON t1.track_id = t2.track_id GROUP BY t1.track_id HAVING count(*) = 1",
        "schema": "CREATE TABLE track (Track_ID NUMBER, Name TEXT, Location TEXT); CREATE TABLE race (Name TEXT, Track_ID TEXT, Race_ID NUMBER);"
      }
    ]
  ],
  "apartment_rentals": [
    [
      {
        "question": "List all the apartment booking records.",
        "query": "SELECT * FROM apartment_bookings",
        "schema": "CREATE TABLE Apartments (apt_id NUMBER); CREATE TABLE Apartment_Bookings (apt_booking_id NUMBER, booking_status_code TEXT, apt_id NUMBER);"
      },
      {
        "question": "How many are there in total?",
        "query": "SELECT count(*) FROM apartment_bookings",
        "schema": "CREATE TABLE Apartments (apt_id NUMBER, apt_number TEXT); CREATE TABLE Apartment_Bookings (apt_id NUMBER, apt_booking_id NUMBER, booking_status_code TEXT);"
      }
    ],
    [
      {
        "question": "List all the apartment booking records.",
        "query": "SELECT * FROM apartment_bookings",
        "schema": "CREATE TABLE Apartments (apt_id NUMBER); CREATE TABLE Apartment_Bookings (booking_status_code TEXT, apt_booking_id NUMBER, apt_id NUMBER);"
      },
      {
        "question": "How many in total?",
        "query": "SELECT count(*) FROM apartment_bookings",
        "schema": "CREATE TABLE Apartments (apt_id NUMBER, apt_number TEXT); CREATE TABLE Apartment_Bookings (apt_id NUMBER, apt_booking_id NUMBER, booking_status_code TEXT);"
      },
      {
        "question": "For each of the record, only show the start dates and end dates.",
        "query": "SELECT booking_start_date , booking_end_date FROM apartment_bookings",
        "schema": "CREATE TABLE Apartments (apt_number TEXT, apt_id NUMBER); CREATE TABLE Apartment_Bookings (apt_id NUMBER, apt_booking_id NUMBER, booking_start_date TIME, booking_status_code TEXT, booking_end_date TIME);"
      }
    ],
    [
      {
        "question": "What are the information about all the apartment buildings",
        "query": "SELECT * FROM apartment_buildings",
        "schema": "CREATE TABLE Apartment_Buildings (building_short_name TEXT, building_full_name TEXT, building_address TEXT, building_description TEXT, building_id NUMBER); CREATE TABLE Apartments (apt_number TEXT, apt_type_code TEXT, apt_id NUMBER, building_id NUMBER);"
      },
      {
        "question": "How many unique building descriptions are there?",
        "query": "SELECT count(DISTINCT building_description) FROM apartment_buildings",
        "schema": "CREATE TABLE Apartment_Buildings (building_description TEXT, building_short_name TEXT, building_address TEXT, building_id NUMBER, building_full_name TEXT); CREATE TABLE Apartments (apt_id NUMBER, apt_type_code TEXT, apt_number TEXT, building_id NUMBER);"
      },
      {
        "question": "Show their details.",
        "query": "SELECT DISTINCT building_description FROM apartment_buildings",
        "schema": "CREATE TABLE Apartment_Buildings (building_short_name TEXT, building_address TEXT, building_description TEXT, building_full_name TEXT, building_id NUMBER); CREATE TABLE Apartments (apt_type_code TEXT, apt_id NUMBER, apt_number TEXT, building_id NUMBER);"
      }
    ],
    [
      {
        "question": "List all the building manager names.",
        "query": "SELECT building_manager FROM apartment_buildings",
        "schema": "CREATE TABLE Apartment_Buildings (building_id NUMBER, building_manager TEXT); CREATE TABLE Apartments (building_id NUMBER);"
      },
      {
        "question": "How many are manged by \"Brenden\"?",
        "query": "SELECT count(building_manager) FROM apartment_buildings WHERE building_manager = \"Brenden\"",
        "schema": "CREATE TABLE Guests (guest_id NUMBER, guest_last_name TEXT, guest_first_name TEXT); CREATE TABLE Apartments (apt_id NUMBER, building_id NUMBER); CREATE TABLE Apartment_Buildings (building_short_name TEXT, building_id NUMBER, building_manager TEXT, building_full_name TEXT);"
      },
      {
        "question": "What about \"Emma\" ?",
        "query": "SELECT count(building_manager) FROM apartment_buildings WHERE building_manager = \"Brenden\"",
        "schema": "CREATE TABLE Guests (guest_last_name TEXT, guest_id NUMBER, guest_first_name TEXT); CREATE TABLE Apartment_Buildings (building_short_name TEXT, building_full_name TEXT, building_id NUMBER, building_manager TEXT); CREATE TABLE Apartments (apt_id NUMBER, building_id NUMBER);"
      },
      {
        "question": "List the short names of the buildings managed by her.",
        "query": "SELECT building_short_name FROM apartment_buildings WHERE building_manager = \"Emma\"",
        "schema": "CREATE TABLE Apartments (apt_id NUMBER, building_id NUMBER); CREATE TABLE Guests (guest_id NUMBER, guest_last_name TEXT, guest_first_name TEXT); CREATE TABLE Apartment_Buildings (building_short_name TEXT, building_manager TEXT, building_id NUMBER, building_full_name TEXT);"
      }
    ],
    [
      {
        "question": "List all the building manager names.",
        "query": "SELECT building_manager FROM apartment_buildings",
        "schema": "CREATE TABLE Apartments (building_id NUMBER, apt_id NUMBER); CREATE TABLE Apartment_Buildings (building_id NUMBER, building_manager TEXT);"
      },
      {
        "question": "How many are manged by \"Emma\"?",
        "query": "SELECT count(building_manager) FROM apartment_buildings WHERE building_manager = \"Emma\"",
        "schema": "CREATE TABLE Apartment_Buildings (building_short_name TEXT, building_full_name TEXT, building_id NUMBER, building_manager TEXT); CREATE TABLE Guests (guest_id NUMBER, guest_first_name TEXT); CREATE TABLE Apartments (building_id NUMBER, apt_id NUMBER);"
      },
      {
        "question": "What about \"Brenden\"?",
        "query": "SELECT count(building_manager) FROM apartment_buildings WHERE building_manager = \"Brenden\"",
        "schema": "CREATE TABLE Apartments (apt_id NUMBER, building_id NUMBER); CREATE TABLE Guests (guest_id NUMBER, guest_first_name TEXT); CREATE TABLE Apartment_Buildings (building_full_name TEXT, building_manager TEXT, building_short_name TEXT, building_id NUMBER);"
      },
      {
        "question": "What are the addresses and phones of all the buildings managed by him?",
        "query": "SELECT building_address , building_phone FROM apartment_buildings WHERE building_manager = \"Brenden\"",
        "schema": "CREATE TABLE Apartment_Buildings (building_id NUMBER, building_address TEXT, building_phone TEXT, building_short_name TEXT, building_manager TEXT, building_full_name TEXT); CREATE TABLE Apartments (building_id NUMBER, apt_id NUMBER); CREATE TABLE Guests (guest_first_name TEXT, guest_id NUMBER);"
      }
    ],
    [
      {
        "question": "List all the building full names.",
        "query": "SELECT building_full_name FROM apartment_buildings",
        "schema": "CREATE TABLE Apartment_Buildings (building_id NUMBER, building_short_name TEXT, building_full_name TEXT); CREATE TABLE Apartments (apt_id NUMBER, building_id NUMBER);"
      },
      {
        "question": "Show the ones if there is the full name with \"The Eugene\".",
        "query": "SELECT building_full_name FROM apartment_buildings WHERE building_full_name LIKE \"The Eugene\"",
        "schema": "CREATE TABLE Apartment_Buildings (building_full_name TEXT, building_short_name TEXT, building_id NUMBER); CREATE TABLE Apartments (building_id NUMBER, apt_id NUMBER);"
      },
      {
        "question": "What are the building full names which contain the word \"court\"?",
        "query": "SELECT building_full_name FROM apartment_buildings WHERE building_full_name LIKE \"%court%\"",
        "schema": "CREATE TABLE Apartments (building_id NUMBER, apt_id NUMBER); CREATE TABLE Apartment_Buildings (building_short_name TEXT, building_id NUMBER, building_full_name TEXT);"
      }
    ],
    [
      {
        "question": "List the number of bathrooms for each apartment.",
        "query": "SELECT bathroom_count FROM apartments",
        "schema": "CREATE TABLE Apartment_Facilities (apt_id NUMBER); CREATE TABLE Apartment_Bookings (apt_id NUMBER); CREATE TABLE Apartments (bedroom_count NUMBER, apt_id NUMBER, room_count TEXT, apt_type_code TEXT, bathroom_count NUMBER, apt_number TEXT); CREATE TABLE Apartment_Buildings (building_id NUMBER);"
      },
      {
        "question": "What is the average number of bathrooms?",
        "query": "SELECT avg(bathroom_count) FROM apartments",
        "schema": "CREATE TABLE Apartment_Facilities (apt_id NUMBER); CREATE TABLE Apartments (room_count TEXT, apt_id NUMBER, bathroom_count NUMBER, apt_type_code TEXT, bedroom_count NUMBER, apt_number TEXT); CREATE TABLE Apartment_Buildings (building_id NUMBER); CREATE TABLE Apartment_Bookings (apt_id NUMBER);"
      },
      {
        "question": "List the minimum and maximum number.",
        "query": "SELECT min(bathroom_count) , max(bathroom_count) FROM apartments",
        "schema": "CREATE TABLE Apartment_Bookings (apt_id NUMBER); CREATE TABLE Apartment_Buildings (building_id NUMBER); CREATE TABLE Apartment_Facilities (apt_id NUMBER); CREATE TABLE Apartments (apt_id NUMBER, room_count TEXT, apt_number TEXT, bedroom_count NUMBER, bathroom_count NUMBER, apt_type_code TEXT);"
      }
    ],
    [
      {
        "question": "List the number of bathrooms for each apartment.",
        "query": "SELECT bathroom_count FROM apartments",
        "schema": "CREATE TABLE Apartment_Bookings (apt_id NUMBER); CREATE TABLE Apartment_Facilities (facility_code TEXT, apt_id NUMBER); CREATE TABLE Apartments (bathroom_count NUMBER, apt_type_code TEXT, room_count TEXT, bedroom_count NUMBER, apt_number TEXT, apt_id NUMBER); CREATE TABLE Apartment_Buildings (building_id NUMBER);"
      },
      {
        "question": "What about the minimum and maximum number?",
        "query": "SELECT min(bathroom_count) , max(bathroom_count) FROM apartments",
        "schema": "CREATE TABLE Apartments (room_count TEXT, apt_number TEXT, apt_type_code TEXT, apt_id NUMBER, bathroom_count NUMBER, bedroom_count NUMBER); CREATE TABLE Apartment_Buildings (building_id NUMBER); CREATE TABLE Apartment_Bookings (apt_id NUMBER); CREATE TABLE Apartment_Facilities (apt_id NUMBER, facility_code TEXT);"
      },
      {
        "question": "How about the average?",
        "query": "SELECT avg(bedroom_count) FROM apartments",
        "schema": "CREATE TABLE Apartments (apt_number TEXT, apt_type_code TEXT, apt_id NUMBER, room_count TEXT, bedroom_count NUMBER, bathroom_count NUMBER); CREATE TABLE Apartment_Buildings (building_id NUMBER); CREATE TABLE Apartment_Bookings (apt_id NUMBER); CREATE TABLE Apartment_Facilities (apt_id NUMBER, facility_code TEXT);"
      }
    ],
    [
      {
        "question": "Show the number of rooms with each apartment number in the beginning.",
        "query": "SELECT apt_number , room_count FROM apartments",
        "schema": "CREATE TABLE Apartments (apt_id NUMBER, room_count TEXT, apt_number TEXT); CREATE TABLE Apartment_Bookings (apt_id NUMBER);"
      }
    ],
    [
      {
        "question": "How many type codes are there?",
        "query": "SELECT count(DISTINCT apt_type_code) FROM apartments",
        "schema": "CREATE TABLE Apartments (apt_id NUMBER, apt_type_code TEXT); CREATE TABLE Guests (guest_id NUMBER);"
      },
      {
        "question": "For each one, show how many apartments.",
        "query": "SELECT apt_type_code, count(*) FROM apartments GROUP BY apt_type_code",
        "schema": "CREATE TABLE Guests (guest_id NUMBER); CREATE TABLE Apartments (apt_number TEXT, apt_type_code TEXT, apt_id NUMBER);"
      },
      {
        "question": "How many apartments have the type code \"Studio\"?",
        "query": "SELECT count(*) FROM apartments WHERE apt_type_code = \"Studio\"",
        "schema": "CREATE TABLE Apartments (apt_type_code TEXT, apt_id NUMBER, apt_number TEXT); CREATE TABLE Guests (guest_id NUMBER);"
      },
      {
        "question": "Among those apartments, what is the average number of rooms?",
        "query": "SELECT avg(room_count) FROM apartments WHERE apt_type_code = \"Studio\"",
        "schema": "CREATE TABLE Apartments (apt_id NUMBER, apt_number TEXT, apt_type_code TEXT, room_count TEXT); CREATE TABLE Guests (guest_id NUMBER);"
      }
    ],
    [
      {
        "question": "How many type codes are there?",
        "query": "SELECT count(DISTINCT apt_type_code) FROM apartments",
        "schema": "CREATE TABLE Apartments (apt_id NUMBER, apt_type_code TEXT);"
      },
      {
        "question": "For each type code, show how many apartments.",
        "query": "SELECT apt_type_code, count(*) FROM apartments GROUP BY apt_type_code",
        "schema": "CREATE TABLE Apartments (apt_type_code TEXT, apt_id NUMBER);"
      },
      {
        "question": "What are the apartment numbers of the apartments with type code \"Studio\"?",
        "query": "SELECT apt_number FROM apartments WHERE apt_type_code = \"Studio\"",
        "schema": "CREATE TABLE Apartment_Bookings (apt_id NUMBER); CREATE TABLE Apartments (apt_id NUMBER, apt_type_code TEXT, apt_number TEXT);"
      },
      {
        "question": "What about type code \"Flat\"?",
        "query": "SELECT apt_number FROM apartments WHERE apt_type_code = \"Flat\"",
        "schema": "CREATE TABLE Apartments (apt_id NUMBER, apt_type_code TEXT, apt_number TEXT); CREATE TABLE Apartment_Bookings (apt_id NUMBER);"
      }
    ],
    [
      {
        "question": "How many guests are there?",
        "query": "SELECT count(*) FROM guests",
        "schema": "CREATE TABLE Guests (guest_first_name TEXT, gender_code TEXT, guest_id NUMBER, guest_last_name TEXT); CREATE TABLE Apartment_Bookings (guest_id NUMBER);"
      },
      {
        "question": "Keep the first and last names of them.",
        "query": "SELECT guest_first_name , guest_last_name FROM guests",
        "schema": "CREATE TABLE Guests (guest_last_name TEXT, guest_id NUMBER, gender_code TEXT, guest_first_name TEXT); CREATE TABLE Apartment_Bookings (guest_id NUMBER);"
      }
    ],
    [
      {
        "question": "How many female guests are there?",
        "query": "SELECT count(*) FROM guests WHERE gender_code = \"Female\"",
        "schema": "CREATE TABLE Apartment_Bookings (guest_id NUMBER); CREATE TABLE Guests (guest_id NUMBER, guest_last_name TEXT, gender_code TEXT, guest_first_name TEXT);"
      },
      {
        "question": "What about male?",
        "query": "SELECT count(*) FROM guests WHERE gender_code = \"Male\"",
        "schema": "CREATE TABLE Guests (guest_id NUMBER, guest_last_name TEXT, gender_code TEXT, guest_first_name TEXT); CREATE TABLE Apartment_Bookings (guest_id NUMBER);"
      },
      {
        "question": "What are the date of birth of them?",
        "query": "SELECT date_of_birth FROM guests WHERE gender_code = \"Male\"",
        "schema": "CREATE TABLE Guests (guest_last_name TEXT, guest_id NUMBER, guest_first_name TEXT, date_of_birth TIME, gender_code TEXT); CREATE TABLE Apartment_Bookings (guest_id NUMBER);"
      }
    ],
    [
      {
        "question": "For each apartment booking, show the start date, and end date.",
        "query": "SELECT booking_start_date , booking_start_date FROM apartment_bookings",
        "schema": "CREATE TABLE Apartments (apt_id NUMBER); CREATE TABLE Apartment_Bookings (apt_id NUMBER, apt_booking_id NUMBER, booking_start_date TIME, booking_end_date TIME, booking_status_code TEXT);"
      },
      {
        "question": "Also show the apartment numbers with each record.",
        "query": "SELECT t2.apt_number , t1.booking_start_date , t1.booking_start_date FROM apartment_bookings AS t1 JOIN apartments AS t2 ON t1.apt_id = t2.apt_id",
        "schema": "CREATE TABLE Apartment_Bookings (booking_start_date TIME, booking_status_code TEXT, booking_end_date TIME, apt_id NUMBER, apt_booking_id NUMBER); CREATE TABLE Apartments (apt_number TEXT, apt_id NUMBER);"
      }
    ],
    [
      {
        "question": "For each apartment booking, show the start date, and end date.",
        "query": "SELECT booking_start_date , booking_start_date FROM apartment_bookings",
        "schema": "CREATE TABLE Apartment_Bookings (apt_booking_id NUMBER, booking_end_date TIME, apt_id NUMBER, booking_status_code TEXT, booking_start_date TIME); CREATE TABLE Apartments (apt_id NUMBER);"
      },
      {
        "question": "Also show the type code with each record.",
        "query": "SELECT t2.apt_type_code , t1.booking_start_date , t1.booking_start_date FROM apartment_bookings AS t1 JOIN apartments AS t2 ON t1.apt_id = t2.apt_id",
        "schema": "CREATE TABLE Apartments (apt_type_code TEXT, apt_id NUMBER); CREATE TABLE Apartment_Bookings (booking_status_code TEXT, booking_start_date TIME, booking_end_date TIME, apt_booking_id NUMBER, apt_id NUMBER);"
      },
      {
        "question": "What are the booking start and end dates of the apartments with type code \"Studio\"?",
        "query": "SELECT t1.booking_start_date , t1.booking_start_date FROM apartment_bookings AS t1 JOIN apartments AS t2 ON t1.apt_id = t2.apt_id WHERE t2.apt_type_code = \"Studio\"",
        "schema": "CREATE TABLE Apartment_Bookings (apt_booking_id NUMBER, booking_status_code TEXT, booking_start_date TIME, booking_end_date TIME, apt_id NUMBER); CREATE TABLE Apartments (apt_id NUMBER, apt_type_code TEXT);"
      },
      {
        "question": "How about the type code \"Duplex\"?",
        "query": "SELECT t1.booking_start_date , t1.booking_start_date FROM apartment_bookings AS t1 JOIN apartments AS t2 ON t1.apt_id = t2.apt_id WHERE t2.apt_type_code = \"Duplex\"",
        "schema": "CREATE TABLE Apartment_Bookings (apt_id NUMBER, booking_status_code TEXT, booking_start_date TIME, booking_end_date TIME, apt_booking_id NUMBER); CREATE TABLE Apartments (apt_id NUMBER, apt_type_code TEXT);"
      }
    ],
    [
      {
        "question": "List all the booking start and end dates.",
        "query": "SELECT booking_start_date , booking_start_date FROM apartment_bookings",
        "schema": "CREATE TABLE Apartments (apt_id NUMBER); CREATE TABLE Apartment_Bookings (apt_id NUMBER, booking_start_date TIME, booking_end_date TIME);"
      },
      {
        "question": "Also show the bedroom number of each record.",
        "query": "SELECT t1.booking_start_date , t1.booking_start_date, t2.bedroom_count FROM apartment_bookings AS t1 JOIN apartments AS t2 ON t1.apt_id = t2.apt_id",
        "schema": "CREATE TABLE Apartments (apt_id NUMBER, bedroom_count NUMBER, bathroom_count NUMBER, apt_number TEXT); CREATE TABLE Apartment_Bookings (booking_start_date TIME, apt_id NUMBER, apt_booking_id NUMBER, booking_end_date TIME);"
      },
      {
        "question": "Keep the ones that have 3 bedrooms, show the booking start and end dates only?",
        "query": "SELECT t1.booking_start_date , t1.booking_start_date FROM apartment_bookings AS t1 JOIN apartments AS t2 ON t1.apt_id = t2.apt_id WHERE t2.bedroom_count = 3",
        "schema": "CREATE TABLE Apartment_Bookings (booking_start_date TIME, apt_id NUMBER, apt_booking_id NUMBER, booking_end_date TIME); CREATE TABLE Apartments (bedroom_count NUMBER, bathroom_count NUMBER, apt_number TEXT, apt_id NUMBER);"
      },
      {
        "question": "What about more than 2 bedrooms?",
        "query": "SELECT t1.booking_start_date , t1.booking_start_date FROM apartment_bookings AS t1 JOIN apartments AS t2 ON t1.apt_id = t2.apt_id WHERE t2.bedroom_count > 2",
        "schema": "CREATE TABLE Apartment_Bookings (booking_end_date TIME, booking_start_date TIME, apt_id NUMBER, apt_booking_id NUMBER); CREATE TABLE Apartments (apt_number TEXT, bathroom_count NUMBER, apt_id NUMBER, bedroom_count NUMBER);"
      }
    ],
    [
      {
        "question": "List all the unique booking status codes.",
        "query": "SELECT DISTINCT booking_status_code FROM apartment_bookings",
        "schema": "CREATE TABLE Apartment_Bookings (apt_id NUMBER, booking_status_code TEXT, apt_booking_id NUMBER); CREATE TABLE Apartments (apt_id NUMBER); CREATE TABLE View_Unit_Status (apt_booking_id NUMBER);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT count(DISTINCT booking_status_code) FROM apartment_bookings",
        "schema": "CREATE TABLE Apartment_Bookings (booking_status_code TEXT, apt_booking_id NUMBER, apt_id NUMBER); CREATE TABLE Apartments (apt_id NUMBER); CREATE TABLE View_Unit_Status (apt_booking_id NUMBER);"
      },
      {
        "question": "Show these codes with apartment numbers.",
        "query": "SELECT t1.booking_status_code, t2.apt_number FROM apartment_bookings AS t1 JOIN apartments AS t2 ON t1.apt_id = t2.apt_id",
        "schema": "CREATE TABLE Apartment_Bookings (apt_id NUMBER, apt_booking_id NUMBER, booking_status_code TEXT); CREATE TABLE Apartments (apt_number TEXT, apt_id NUMBER); CREATE TABLE View_Unit_Status (apt_booking_id NUMBER);"
      },
      {
        "question": "What is the code of the apartment with apartment number \"Suite 634\"?",
        "query": "SELECT t1.booking_status_code FROM apartment_bookings AS t1 JOIN apartments AS t2 ON t1.apt_id = t2.apt_id WHERE t2.apt_number = \"Suite 634\"",
        "schema": "CREATE TABLE Apartments (apt_number TEXT, apt_type_code TEXT, apt_id NUMBER); CREATE TABLE Apartment_Bookings (booking_status_code TEXT, apt_id NUMBER, apt_booking_id NUMBER); CREATE TABLE View_Unit_Status (apt_booking_id NUMBER);"
      }
    ],
    [
      {
        "question": "How many rooms are there in total?",
        "query": "SELECT sum(room_count) FROM apartments",
        "schema": "CREATE TABLE Apartments (building_id NUMBER, room_count TEXT, apt_type_code TEXT, apt_number TEXT, apt_id NUMBER);"
      },
      {
        "question": "What about apartments?",
        "query": "SELECT count(*) FROM apartments",
        "schema": "CREATE TABLE Apartments (building_id NUMBER, apt_type_code TEXT, room_count TEXT, apt_number TEXT, apt_id NUMBER);"
      },
      {
        "question": "Show all the apartment numbers and the status code for each one.",
        "query": "SELECT t2.apt_number, t1.booking_status_code FROM apartment_bookings AS t1 JOIN apartments AS t2 ON t1.apt_id = t2.apt_id",
        "schema": "CREATE TABLE Apartments (apt_id NUMBER, room_count TEXT, apt_number TEXT, apt_type_code TEXT, building_id NUMBER); CREATE TABLE Apartment_Bookings (booking_status_code TEXT, apt_id NUMBER);"
      },
      {
        "question": "Show the distinct apartment numbers of the apartments where the status code is not \"Confirmed\".",
        "query": "SELECT DISTINCT t2.apt_number FROM apartment_bookings AS t1 JOIN apartments AS t2 ON t1.apt_id = t2.apt_id WHERE t1.booking_status_code != \"Confirmed\"",
        "schema": "CREATE TABLE Apartment_Bookings (apt_booking_id NUMBER, booking_status_code TEXT, apt_id NUMBER); CREATE TABLE Apartments (apt_number TEXT, building_id NUMBER, room_count TEXT, apt_type_code TEXT, apt_id NUMBER);"
      },
      {
        "question": "How about the status code is \"Confirmed\".",
        "query": "SELECT DISTINCT t2.apt_number FROM apartment_bookings AS t1 JOIN apartments AS t2 ON t1.apt_id = t2.apt_id WHERE t1.booking_status_code = \"Confirmed\"",
        "schema": "CREATE TABLE Apartment_Bookings (apt_booking_id NUMBER, apt_id NUMBER, booking_status_code TEXT); CREATE TABLE Apartments (apt_id NUMBER, building_id NUMBER, room_count TEXT, apt_type_code TEXT, apt_number TEXT);"
      }
    ],
    [
      {
        "question": "How many rooms are there in total?",
        "query": "SELECT sum(room_count) FROM apartments",
        "schema": "CREATE TABLE Apartments (room_count TEXT, building_id NUMBER, apt_id NUMBER, apt_number TEXT, bathroom_count NUMBER, apt_type_code TEXT);"
      },
      {
        "question": "Show all the booking status codes and number of apartments for each.",
        "query": "SELECT booking_status_code, count(*) FROM apartment_bookings GROUP BY booking_status_code",
        "schema": "CREATE TABLE Apartment_Bookings (booking_status_code TEXT, apt_id NUMBER, apt_booking_id NUMBER); CREATE TABLE Apartments (apt_id NUMBER, apt_number TEXT, building_id NUMBER, bathroom_count NUMBER, apt_type_code TEXT, room_count TEXT);"
      },
      {
        "question": "What about the average room count of the apartments that have booking status code \"Confirmed\"?",
        "query": "SELECT avg(room_count) FROM apartment_bookings AS t1 JOIN apartments AS t2 ON t1.apt_id = t2.apt_id WHERE t1.booking_status_code = \"Confirmed\"",
        "schema": "CREATE TABLE Apartments (room_count TEXT, bathroom_count NUMBER, apt_id NUMBER, apt_type_code TEXT, apt_number TEXT, building_id NUMBER); CREATE TABLE Apartment_Bookings (apt_id NUMBER, apt_booking_id NUMBER, booking_status_code TEXT);"
      },
      {
        "question": "What about the booking status code \"Provisional\"?",
        "query": "SELECT avg(room_count) FROM apartment_bookings AS t1 JOIN apartments AS t2 ON t1.apt_id = t2.apt_id WHERE t1.booking_status_code = \"Provisional\"",
        "schema": "CREATE TABLE Apartments (apt_type_code TEXT, building_id NUMBER, apt_id NUMBER, room_count TEXT, apt_number TEXT, bathroom_count NUMBER); CREATE TABLE Apartment_Bookings (apt_id NUMBER, booking_status_code TEXT, apt_booking_id NUMBER);"
      }
    ],
    [
      {
        "question": "List all the guests' first and last names.",
        "query": "SELECT guest_first_name, guest_last_name FROM guests",
        "schema": "CREATE TABLE Guests (guest_last_name TEXT, guest_id NUMBER, guest_first_name TEXT);"
      },
      {
        "question": "Also show the booking status code of each one.",
        "query": "SELECT t2.guest_first_name , t2.guest_last_name, t1.booking_status_code FROM apartment_bookings AS t1 JOIN guests AS t2 ON t1.guest_id = t2.guest_id",
        "schema": "CREATE TABLE Guests (guest_id NUMBER, guest_first_name TEXT, guest_last_name TEXT); CREATE TABLE Apartment_Bookings (guest_id NUMBER, booking_status_code TEXT);"
      },
      {
        "question": "What are the first names, start dates, and end dates of all the apartment bookings?",
        "query": "SELECT t2.guest_first_name , t1.booking_start_date , t1.booking_start_date FROM apartment_bookings AS t1 JOIN guests AS t2 ON t1.guest_id = t2.guest_id",
        "schema": "CREATE TABLE Guests (guest_id NUMBER, guest_last_name TEXT, guest_first_name TEXT); CREATE TABLE Apartment_Bookings (booking_start_date TIME, booking_end_date TIME, guest_id NUMBER, booking_status_code TEXT);"
      }
    ],
    [
      {
        "question": "List all the booking start and end dates.",
        "query": "SELECT booking_start_date , booking_start_date FROM apartment_bookings",
        "schema": "CREATE TABLE Apartments (apt_id NUMBER); CREATE TABLE Apartment_Bookings (booking_start_date TIME, apt_id NUMBER, booking_end_date TIME);"
      },
      {
        "question": "Show the bedroom number of each record.",
        "query": "SELECT t1.booking_start_date , t1.booking_start_date, t2.bedroom_count FROM apartment_bookings AS t1 JOIN apartments AS t2 ON t1.apt_id = t2.apt_id",
        "schema": "CREATE TABLE Apartments (bedroom_count NUMBER, apt_number TEXT, apt_id NUMBER); CREATE TABLE Apartment_Bookings (apt_id NUMBER, booking_end_date TIME, booking_start_date TIME, apt_booking_id NUMBER);"
      },
      {
        "question": "Show the start and end dates of the apartment bookings made by male guests.",
        "query": "SELECT t1.booking_start_date , t1.booking_start_date FROM apartment_bookings AS t1 JOIN guests AS t2 ON t1.guest_id = t2.guest_id WHERE t2.gender_code = \"Male\"",
        "schema": "CREATE TABLE Apartments (bedroom_count NUMBER, apt_id NUMBER, apt_number TEXT); CREATE TABLE Apartment_Bookings (apt_id NUMBER, booking_start_date TIME, guest_id NUMBER, apt_booking_id NUMBER, booking_end_date TIME); CREATE TABLE Guests (guest_id NUMBER, gender_code TEXT, guest_last_name TEXT);"
      },
      {
        "question": "What about female guests?",
        "query": "SELECT t1.booking_start_date , t1.booking_start_date FROM apartment_bookings AS t1 JOIN guests AS t2 ON t1.guest_id = t2.guest_id WHERE t2.gender_code = \"Female\"",
        "schema": "CREATE TABLE Apartment_Bookings (apt_id NUMBER, booking_end_date TIME, guest_id NUMBER, apt_booking_id NUMBER, booking_start_date TIME); CREATE TABLE Apartments (apt_id NUMBER, apt_type_code TEXT, apt_number TEXT, bedroom_count NUMBER); CREATE TABLE Guests (guest_last_name TEXT, gender_code TEXT, guest_id NUMBER);"
      }
    ],
    [
      {
        "question": "List all the guests' first and last names.",
        "query": "SELECT guest_first_name, guest_last_name FROM guests",
        "schema": "CREATE TABLE Guests (guest_id NUMBER, guest_last_name TEXT, guest_first_name TEXT);"
      },
      {
        "question": "Among all the guests, which of them have \"Provisional\" the apartment bookings?",
        "query": "SELECT t2.guest_first_name , t2.guest_last_name FROM apartment_bookings AS t1 JOIN guests AS t2 ON t1.guest_id = t2.guest_id WHERE t1.booking_status_code = \"Provisional\"",
        "schema": "CREATE TABLE Apartments (apt_id NUMBER); CREATE TABLE Guests (guest_id NUMBER, guest_first_name TEXT, guest_last_name TEXT); CREATE TABLE Apartment_Bookings (apt_booking_id NUMBER, guest_id NUMBER, booking_status_code TEXT, apt_id NUMBER);"
      },
      {
        "question": "How about \"Confirmed\"?",
        "query": "SELECT t2.guest_first_name , t2.guest_last_name FROM apartment_bookings AS t1 JOIN guests AS t2 ON t1.guest_id = t2.guest_id WHERE t1.booking_status_code = \"Confirmed\"",
        "schema": "CREATE TABLE Apartments (apt_id NUMBER); CREATE TABLE Guests (guest_id NUMBER, guest_last_name TEXT, guest_first_name TEXT); CREATE TABLE Apartment_Bookings (apt_id NUMBER, guest_id NUMBER, apt_booking_id NUMBER, booking_status_code TEXT);"
      }
    ],
    [
      {
        "question": "List all the unique facility codes.",
        "query": "SELECT DISTINCT facility_code FROM apartment_facilities",
        "schema": "CREATE TABLE Apartment_Bookings (apt_id NUMBER); CREATE TABLE Apartment_Facilities (facility_code TEXT, apt_id NUMBER); CREATE TABLE Apartments (apt_id NUMBER);"
      },
      {
        "question": "List all the apartments and the facility codes of them.",
        "query": "SELECT * FROM apartment_facilities AS t1 JOIN apartments AS t2 ON t1.apt_id = t2.apt_id",
        "schema": "CREATE TABLE Apartment_Bookings (apt_id NUMBER); CREATE TABLE Apartments (apt_type_code TEXT, room_count TEXT, apt_id NUMBER); CREATE TABLE Apartment_Facilities (facility_code TEXT, apt_id NUMBER);"
      },
      {
        "question": "How many of them have more than 3 bedrooms?",
        "query": "SELECT count(*) FROM apartment_facilities AS t1 JOIN apartments AS t2 ON t1.apt_id = t2.apt_id WHERE t2.bedroom_count > 3",
        "schema": "CREATE TABLE Apartment_Bookings (apt_id NUMBER); CREATE TABLE Apartments (bedroom_count NUMBER, apt_type_code TEXT, apt_id NUMBER, apt_number TEXT, room_count TEXT); CREATE TABLE Apartment_Facilities (apt_id NUMBER, facility_code TEXT);"
      },
      {
        "question": "Show the facility codes of those where there are more than 4 bedrooms.",
        "query": "SELECT t1.facility_code FROM apartment_facilities AS t1 JOIN apartments AS t2 ON t1.apt_id = t2.apt_id WHERE t2.bedroom_count > 4",
        "schema": "CREATE TABLE Apartment_Facilities (apt_id NUMBER, facility_code TEXT); CREATE TABLE Apartment_Bookings (apt_id NUMBER); CREATE TABLE Apartments (apt_type_code TEXT, room_count TEXT, bedroom_count NUMBER, apt_number TEXT, apt_id NUMBER);"
      }
    ],
    [
      {
        "question": "List all unique facility codes.",
        "query": "SELECT DISTINCT facility_code FROM apartment_facilities",
        "schema": "CREATE TABLE Apartment_Facilities (facility_code TEXT, apt_id NUMBER); CREATE TABLE Apartments (apt_id NUMBER);"
      },
      {
        "question": "List all the apartments and the facility codes of them.",
        "query": "SELECT * FROM apartment_facilities AS t1 JOIN apartments AS t2 ON t1.apt_id = t2.apt_id",
        "schema": "CREATE TABLE Apartments (apt_id NUMBER); CREATE TABLE Apartment_Facilities (apt_id NUMBER, facility_code TEXT);"
      },
      {
        "question": "Calculate how many rooms are there for those apartments with facility code \"Gym\".",
        "query": "SELECT sum(t2.room_count) FROM apartment_facilities AS t1 JOIN apartments AS t2 ON t1.apt_id = t2.apt_id WHERE t1.facility_code = \"Gym\"",
        "schema": "CREATE TABLE Apartments (room_count TEXT, apt_id NUMBER); CREATE TABLE Apartment_Bookings (apt_id NUMBER); CREATE TABLE Apartment_Facilities (facility_code TEXT, apt_id NUMBER);"
      }
    ],
    [
      {
        "question": "What is the minimum number of rooms for the apartments?",
        "query": "SELECT min(room_count) FROM apartments",
        "schema": "CREATE TABLE Apartment_Bookings (apt_booking_id NUMBER, apt_id NUMBER); CREATE TABLE Apartment_Buildings (building_id NUMBER); CREATE TABLE Apartments (room_count TEXT, apt_number TEXT, bathroom_count NUMBER, bedroom_count NUMBER, apt_type_code TEXT, apt_id NUMBER);"
      },
      {
        "question": "List all the short names of each building.",
        "query": "SELECT building_short_name FROM apartment_buildings",
        "schema": "CREATE TABLE Apartments (building_id NUMBER, apt_number TEXT, bedroom_count NUMBER, bathroom_count NUMBER, apt_type_code TEXT, apt_id NUMBER, room_count TEXT); CREATE TABLE Apartment_Buildings (building_id NUMBER, building_short_name TEXT, building_description TEXT, building_full_name TEXT); CREATE TABLE Apartment_Bookings (apt_id NUMBER, apt_booking_id NUMBER);"
      },
      {
        "question": "For each short name, show the room count.",
        "query": "SELECT t1.building_short_name, t2.room_count FROM apartment_buildings AS t1 JOIN apartments AS t2 ON t1.building_id = t2.building_id",
        "schema": "CREATE TABLE Apartment_Buildings (building_description TEXT, building_id NUMBER, building_short_name TEXT, building_full_name TEXT); CREATE TABLE Apartment_Bookings (apt_booking_id NUMBER, apt_id NUMBER); CREATE TABLE Apartments (apt_number TEXT, room_count TEXT, bedroom_count NUMBER, bathroom_count NUMBER, apt_type_code TEXT, apt_id NUMBER, building_id NUMBER);"
      },
      {
        "question": "Only keep the result of \"Columbus Square\".",
        "query": "SELECT sum(t2.room_count) FROM apartment_buildings AS t1 JOIN apartments AS t2 ON t1.building_id = t2.building_id WHERE t1.building_short_name = \"Columbus Square\"",
        "schema": "CREATE TABLE Apartment_Bookings (apt_id NUMBER, apt_booking_id NUMBER); CREATE TABLE Apartment_Buildings (building_id NUMBER, building_description TEXT, building_short_name TEXT, building_full_name TEXT, building_address TEXT); CREATE TABLE Apartments (apt_type_code TEXT, bedroom_count NUMBER, room_count TEXT, apt_number TEXT, apt_id NUMBER, bathroom_count NUMBER, building_id NUMBER);"
      }
    ],
    [
      {
        "question": "List all the addresses of the buildings.",
        "query": "SELECT building_address FROM apartment_buildings",
        "schema": "CREATE TABLE Apartments (building_id NUMBER); CREATE TABLE Apartment_Buildings (building_full_name TEXT, building_short_name TEXT, building_address TEXT, building_id NUMBER);"
      },
      {
        "question": "Show the building address for each apartment id.",
        "query": "SELECT t1.building_address, t2.apt_id FROM apartment_buildings AS t1 JOIN apartments AS t2 ON t1.building_id = t2.building_id",
        "schema": "CREATE TABLE Apartment_Buildings (building_id NUMBER, building_short_name TEXT, building_address TEXT, building_full_name TEXT); CREATE TABLE Apartments (apt_id NUMBER, building_id NUMBER); CREATE TABLE Apartment_Bookings (apt_id NUMBER);"
      },
      {
        "question": "Only show the addresses of the buildings that have apartments with more than 3 bathrooms.",
        "query": "SELECT t1.building_address FROM apartment_buildings AS t1 JOIN apartments AS t2 ON t1.building_id = t2.building_id WHERE t2.bathroom_count > 3",
        "schema": "CREATE TABLE Apartment_Bookings (apt_id NUMBER); CREATE TABLE Apartment_Facilities (facility_code TEXT, apt_id NUMBER); CREATE TABLE Apartment_Buildings (building_short_name TEXT, building_id NUMBER, building_full_name TEXT, building_address TEXT); CREATE TABLE Apartments (bathroom_count NUMBER, building_id NUMBER, apt_id NUMBER);"
      },
      {
        "question": "How about more than 2?",
        "query": "SELECT t1.building_address FROM apartment_buildings AS t1 JOIN apartments AS t2 ON t1.building_id = t2.building_id WHERE t2.bathroom_count > 2",
        "schema": "CREATE TABLE Apartment_Buildings (building_address TEXT, building_id NUMBER, building_full_name TEXT, building_short_name TEXT); CREATE TABLE Apartments (building_id NUMBER, apt_number TEXT, bathroom_count NUMBER, apt_id NUMBER); CREATE TABLE Apartment_Bookings (apt_id NUMBER); CREATE TABLE Apartment_Facilities (apt_id NUMBER, facility_code TEXT);"
      }
    ],
    [
      {
        "question": "For each apartment booking, show the start date, and end date.",
        "query": "SELECT booking_start_date , booking_start_date FROM apartment_bookings",
        "schema": "CREATE TABLE Apartment_Bookings (booking_start_date TIME, apt_booking_id NUMBER, booking_end_date TIME, apt_id NUMBER); CREATE TABLE Apartments (apt_id NUMBER);"
      },
      {
        "question": "Also show the type code with each record.",
        "query": "SELECT t2.apt_type_code , t1.booking_start_date , t1.booking_start_date FROM apartment_bookings AS t1 JOIN apartments AS t2 ON t1.apt_id = t2.apt_id",
        "schema": "CREATE TABLE Apartment_Bookings (booking_end_date TIME, booking_start_date TIME, apt_booking_id NUMBER, apt_id NUMBER); CREATE TABLE Apartments (apt_type_code TEXT, apt_id NUMBER);"
      },
      {
        "question": "What the apartment type codes and apartment numbers in the buildings managed by \"Kyle\"?",
        "query": "SELECT t2.apt_type_code , t2.apt_number FROM apartment_buildings AS t1 JOIN apartments AS t2 ON t1.building_id = t2.building_id WHERE t1.building_manager = \"Kyle\"",
        "schema": "CREATE TABLE Apartments (apt_id NUMBER, apt_number TEXT, building_id NUMBER, apt_type_code TEXT); CREATE TABLE Apartment_Bookings (booking_start_date TIME, apt_booking_id NUMBER, apt_id NUMBER, booking_end_date TIME); CREATE TABLE Apartment_Buildings (building_full_name TEXT, building_id NUMBER, building_address TEXT, building_manager TEXT);"
      }
    ],
    [
      {
        "question": "List all the unique booking status codes.",
        "query": "SELECT DISTINCT booking_status_code FROM apartment_bookings",
        "schema": "CREATE TABLE Apartments (apt_id NUMBER); CREATE TABLE Apartment_Bookings (apt_booking_id NUMBER, apt_id NUMBER, booking_status_code TEXT); CREATE TABLE View_Unit_Status (apt_booking_id NUMBER);"
      },
      {
        "question": "How many apartments are there for each one?",
        "query": "SELECT booking_status_code , count(*) FROM apartment_bookings GROUP BY booking_status_code",
        "schema": "CREATE TABLE View_Unit_Status (apt_booking_id NUMBER); CREATE TABLE Apartments (apt_id NUMBER, apt_number TEXT); CREATE TABLE Apartment_Bookings (apt_id NUMBER, apt_booking_id NUMBER, booking_status_code TEXT);"
      }
    ],
    [
      {
        "question": "List all the apartment numbers.",
        "query": "SELECT apt_number FROM apartments",
        "schema": "CREATE TABLE Apartment_Bookings (apt_id NUMBER); CREATE TABLE Apartments (apt_type_code TEXT, apt_number TEXT, apt_id NUMBER);"
      },
      {
        "question": "Order those results by number of bedrooms in descending order.",
        "query": "SELECT apt_number FROM apartments ORDER BY bedroom_count DESC",
        "schema": "CREATE TABLE Apartments (apt_id NUMBER, apt_number TEXT, bedroom_count NUMBER, apt_type_code TEXT); CREATE TABLE Apartment_Bookings (apt_id NUMBER);"
      },
      {
        "question": "Order them by room count in descending order.",
        "query": "SELECT apt_number FROM apartments ORDER BY room_count ASC",
        "schema": "CREATE TABLE Apartment_Bookings (apt_id NUMBER); CREATE TABLE Apartments (room_count TEXT, apt_id NUMBER, bedroom_count NUMBER, apt_type_code TEXT, apt_number TEXT);"
      },
      {
        "question": "What about in ascending order?",
        "query": "SELECT apt_number FROM apartments ORDER BY room_count ASC",
        "schema": "CREATE TABLE Apartments (apt_id NUMBER, apt_type_code TEXT, apt_number TEXT, bedroom_count NUMBER, room_count TEXT); CREATE TABLE Apartment_Bookings (apt_id NUMBER);"
      }
    ],
    [
      {
        "question": "List all the apartment numbers.",
        "query": "SELECT apt_number FROM apartments",
        "schema": "CREATE TABLE Apartments (apt_number TEXT, apt_type_code TEXT, apt_id NUMBER); CREATE TABLE Apartment_Bookings (apt_id NUMBER);"
      },
      {
        "question": "Order them by the number of bedrooms in descending order.",
        "query": "SELECT apt_number FROM apartments ORDER BY bedroom_count DESC",
        "schema": "CREATE TABLE Apartment_Bookings (apt_id NUMBER); CREATE TABLE Apartments (apt_type_code TEXT, apt_number TEXT, bedroom_count NUMBER, apt_id NUMBER);"
      },
      {
        "question": "Which ones are top 4?",
        "query": "SELECT apt_number FROM apartments ORDER BY bedroom_count DESC LIMIT 4",
        "schema": "CREATE TABLE Apartment_Bookings (apt_id NUMBER); CREATE TABLE Apartments (apt_type_code TEXT, apt_id NUMBER, apt_number TEXT, bedroom_count NUMBER);"
      },
      {
        "question": "What about the top 1?",
        "query": "SELECT apt_number FROM apartments ORDER BY bedroom_count DESC LIMIT 1",
        "schema": "CREATE TABLE Apartment_Bookings (apt_id NUMBER); CREATE TABLE Apartments (apt_number TEXT, bedroom_count NUMBER, apt_id NUMBER, apt_type_code TEXT);"
      }
    ],
    [
      {
        "question": "List all the apartment type codes with the counts of apartments.",
        "query": "SELECT apt_type_code, count(*) FROM apartments GROUP BY apt_type_code",
        "schema": "CREATE TABLE Apartments (bedroom_count NUMBER, apt_type_code TEXT, apt_id NUMBER);"
      },
      {
        "question": "Order those results by the number of apartments in ascending order.",
        "query": "SELECT apt_type_code , count(*) FROM apartments GROUP BY apt_type_code ORDER BY count(*) ASC",
        "schema": "CREATE TABLE Apartments (apt_type_code TEXT, apt_id NUMBER, bedroom_count NUMBER, apt_number TEXT);"
      }
    ],
    [
      {
        "question": "List all the apartment type codes with the counts of apartments.",
        "query": "SELECT apt_type_code, count(*) FROM apartments GROUP BY apt_type_code",
        "schema": "CREATE TABLE Apartments (bedroom_count NUMBER, apt_id NUMBER, apt_type_code TEXT);"
      },
      {
        "question": "Order the apartments by the average number of rooms in descending order.",
        "query": "SELECT * FROM apartments GROUP BY apt_type_code ORDER BY avg(room_count) DESC",
        "schema": "CREATE TABLE Apartments (bedroom_count NUMBER, apt_number TEXT, apt_type_code TEXT, apt_id NUMBER, room_count TEXT);"
      },
      {
        "question": "From those results, only keep the top 5.",
        "query": "SELECT * FROM apartments GROUP BY apt_type_code ORDER BY avg(room_count) DESC LIMIT 5",
        "schema": "CREATE TABLE Apartments (apt_id NUMBER, room_count TEXT, bedroom_count NUMBER, apt_number TEXT, apt_type_code TEXT);"
      },
      {
        "question": "What about top 3?",
        "query": "SELECT * FROM apartments GROUP BY apt_type_code ORDER BY avg(room_count) DESC LIMIT 3",
        "schema": "CREATE TABLE Apartments (apt_id NUMBER, apt_number TEXT, bedroom_count NUMBER, apt_type_code TEXT, room_count TEXT);"
      },
      {
        "question": "What are the apartment type codes from those results?",
        "query": "SELECT apt_type_code FROM apartments GROUP BY apt_type_code ORDER BY avg(room_count) DESC LIMIT 3",
        "schema": "CREATE TABLE Apartments (apt_type_code TEXT, apt_id NUMBER, room_count TEXT, bedroom_count NUMBER, apt_number TEXT);"
      }
    ],
    [
      {
        "question": "What are all the information about the apartments.",
        "query": "SELECT * FROM apartments",
        "schema": "CREATE TABLE Apartments (apt_number TEXT, apt_type_code TEXT, apt_id NUMBER); CREATE TABLE Apartment_Bookings (apt_booking_id NUMBER, apt_id NUMBER);"
      },
      {
        "question": "Order those records by the number of total rooms.",
        "query": "SELECT * FROM apartments ORDER BY room_count",
        "schema": "CREATE TABLE Apartment_Bookings (apt_booking_id NUMBER, apt_id NUMBER); CREATE TABLE Apartments (room_count TEXT, apt_number TEXT, apt_type_code TEXT, apt_id NUMBER);"
      },
      {
        "question": "Which is the apartment type code that has the largest number of total rooms?",
        "query": "SELECT apt_type_code FROM apartments GROUP BY apt_type_code ORDER BY sum(room_count) DESC LIMIT 1",
        "schema": "CREATE TABLE Apartment_Bookings (apt_id NUMBER, apt_booking_id NUMBER); CREATE TABLE Apartments (apt_id NUMBER, apt_type_code TEXT, apt_number TEXT, room_count TEXT);"
      },
      {
        "question": "Order the apartment type code by the number of total rooms.",
        "query": "SELECT apt_type_code FROM apartments GROUP BY apt_type_code ORDER BY sum(room_count) DESC",
        "schema": "CREATE TABLE Apartment_Bookings (apt_id NUMBER, apt_booking_id NUMBER); CREATE TABLE Apartments (room_count TEXT, apt_id NUMBER, apt_number TEXT, apt_type_code TEXT);"
      },
      {
        "question": "Add the number of bathrooms and number of bedrooms to the results.",
        "query": "SELECT apt_type_code , bathroom_count , bedroom_count FROM apartments GROUP BY apt_type_code ORDER BY sum(room_count) DESC LIMIT 1",
        "schema": "CREATE TABLE Apartments (apt_type_code TEXT, bedroom_count NUMBER, apt_id NUMBER, room_count TEXT, apt_number TEXT, bathroom_count NUMBER); CREATE TABLE Apartment_Bookings (apt_booking_id NUMBER, apt_id NUMBER);"
      }
    ],
    [
      {
        "question": "How many unique apartment type codes are there?",
        "query": "SELECT count(DISTINCT apt_type_code) FROM apartments",
        "schema": "CREATE TABLE Apartments (apt_id NUMBER, apt_number TEXT, apt_type_code TEXT);"
      },
      {
        "question": "Show the number of apartments for each code.",
        "query": "SELECT apt_type_code, count(*) FROM apartments GROUP BY apt_type_code",
        "schema": "CREATE TABLE Apartments (apt_id NUMBER, apt_number TEXT, apt_type_code TEXT);"
      },
      {
        "question": "Which are the most two common apartment type codes?",
        "query": "SELECT apt_type_code FROM apartments GROUP BY apt_type_code ORDER BY count(*) DESC LIMIT 2",
        "schema": "CREATE TABLE Apartments (apt_type_code TEXT, apt_number TEXT, apt_id NUMBER);"
      },
      {
        "question": "How about the top 1?",
        "query": "SELECT apt_type_code FROM apartments GROUP BY apt_type_code ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Apartments (apt_id NUMBER, apt_type_code TEXT, apt_number TEXT);"
      }
    ],
    [
      {
        "question": "How many unique apartment type codes are there?",
        "query": "SELECT count(DISTINCT apt_type_code) FROM apartments",
        "schema": "CREATE TABLE Apartments (apt_type_code TEXT, apt_number TEXT, apt_id NUMBER);"
      },
      {
        "question": "What is the minimum room count for the departments?",
        "query": "SELECT min(room_count) FROM apartments",
        "schema": "CREATE TABLE Apartments (apt_id NUMBER, apt_type_code TEXT, apt_number TEXT, room_count TEXT);"
      },
      {
        "question": "What is the minimum bathroom count for the departments?",
        "query": "SELECT min(bathroom_count) FROM apartments",
        "schema": "CREATE TABLE Apartments (bedroom_count NUMBER, apt_number TEXT, bathroom_count NUMBER, room_count TEXT, apt_id NUMBER, apt_type_code TEXT);"
      },
      {
        "question": "How many apartments have more than 2 bathrooms?",
        "query": "SELECT count(*) FROM apartments WHERE bathroom_count > 2",
        "schema": "CREATE TABLE Apartments (bathroom_count NUMBER, apt_number TEXT, bedroom_count NUMBER, room_count TEXT, apt_type_code TEXT, apt_id NUMBER);"
      },
      {
        "question": "How about more than 1?",
        "query": "SELECT count(*) FROM apartments WHERE bathroom_count > 1",
        "schema": "CREATE TABLE Apartments (apt_id NUMBER, apt_number TEXT, bedroom_count NUMBER, bathroom_count NUMBER, apt_type_code TEXT, room_count TEXT);"
      },
      {
        "question": "Among those apartments, which apartment type is the most popular one?",
        "query": "SELECT apt_type_code FROM apartments WHERE bathroom_count > 1 GROUP BY apt_type_code ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Apartments (apt_id NUMBER, room_count TEXT, apt_type_code TEXT, bathroom_count NUMBER, bedroom_count NUMBER, apt_number TEXT);"
      }
    ],
    [
      {
        "question": "How many unique apartment type codes are there?",
        "query": "SELECT count(DISTINCT apt_type_code) FROM apartments",
        "schema": "CREATE TABLE Apartments (apt_id NUMBER, apt_type_code TEXT, apt_number TEXT);"
      },
      {
        "question": "What is the minimum room count for the departments?",
        "query": "SELECT min(room_count) FROM apartments",
        "schema": "CREATE TABLE Apartments (apt_type_code TEXT, room_count TEXT, apt_id NUMBER, apt_number TEXT);"
      },
      {
        "question": "List the apartment type code and the maximum and minimum number of rooms for each one.",
        "query": "SELECT apt_type_code , max(room_count) , min(room_count) FROM apartments GROUP BY apt_type_code",
        "schema": "CREATE TABLE Apartments (apt_number TEXT, apt_type_code TEXT, apt_id NUMBER, bedroom_count NUMBER, room_count TEXT);"
      }
    ],
    [
      {
        "question": "Show all the guests information.",
        "query": "SELECT * FROM guests",
        "schema": "CREATE TABLE Guests (guest_id NUMBER, guest_last_name TEXT, guest_first_name TEXT); CREATE TABLE Apartment_Bookings (guest_id NUMBER);"
      },
      {
        "question": "How many genders are there in total?",
        "query": "SELECT count(DISTINCT gender_code) FROM guests",
        "schema": "CREATE TABLE Guests (guest_last_name TEXT, guest_first_name TEXT, gender_code TEXT, guest_id NUMBER); CREATE TABLE Apartment_Bookings (guest_id NUMBER);"
      },
      {
        "question": "Has \"Rebeca\" ever visited, show the related information.",
        "query": "SELECT * FROM guests WHERE guest_first_name = \"Rebeca\"",
        "schema": "CREATE TABLE Apartment_Bookings (guest_id NUMBER); CREATE TABLE Guests (guest_last_name TEXT, date_of_birth TIME, gender_code TEXT, guest_first_name TEXT, guest_id NUMBER);"
      },
      {
        "question": "Count how many guests for each gender, and list them in descending order.",
        "query": "SELECT gender_code , count(*) FROM guests GROUP BY gender_code ORDER BY count(*) DESC",
        "schema": "CREATE TABLE Apartment_Bookings (guest_id NUMBER); CREATE TABLE Guests (gender_code TEXT, date_of_birth TIME, guest_id NUMBER, guest_last_name TEXT, guest_first_name TEXT);"
      }
    ],
    [
      {
        "question": "Show all the information about the facilities.",
        "query": "SELECT * FROM apartment_facilities",
        "schema": "CREATE TABLE Apartment_Facilities (apt_id NUMBER, facility_code TEXT); CREATE TABLE Apartments (apt_id NUMBER);"
      },
      {
        "question": "How many records are there?",
        "query": "SELECT count(*) FROM apartment_facilities",
        "schema": "CREATE TABLE Apartment_Bookings (apt_id NUMBER); CREATE TABLE Apartments (apt_id NUMBER, apt_number TEXT); CREATE TABLE Apartment_Facilities (apt_id NUMBER, facility_code TEXT);"
      },
      {
        "question": "Which apartments have no facility, show ids?",
        "query": "SELECT apt_id FROM apartments WHERE apt_id NOT IN (SELECT apt_id FROM apartment_facilities)",
        "schema": "CREATE TABLE Apartments (apt_type_code TEXT, apt_id NUMBER, building_id NUMBER, apt_number TEXT); CREATE TABLE Apartment_Facilities (facility_code TEXT, apt_id NUMBER); CREATE TABLE Apartment_Bookings (apt_id NUMBER, apt_booking_id NUMBER);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT count(*) FROM apartments WHERE apt_id NOT IN (SELECT apt_id FROM apartment_facilities)",
        "schema": "CREATE TABLE Apartment_Facilities (facility_code TEXT, apt_id NUMBER); CREATE TABLE Apartment_Bookings (apt_booking_id NUMBER, apt_id NUMBER); CREATE TABLE Apartments (building_id NUMBER, apt_id NUMBER, apt_type_code TEXT, apt_number TEXT);"
      }
    ],
    [
      {
        "question": "How many apartments are there?",
        "query": "SELECT count(apt_number) FROM apartments",
        "schema": "CREATE TABLE Apartment_Buildings (building_id NUMBER); CREATE TABLE Apartment_Facilities (apt_id NUMBER, facility_code TEXT); CREATE TABLE Apartment_Bookings (apt_booking_id NUMBER, apt_id NUMBER); CREATE TABLE Apartments (apt_type_code TEXT, building_id NUMBER, room_count TEXT, bathroom_count NUMBER, apt_number TEXT, apt_id NUMBER);"
      },
      {
        "question": "What are the status codes?",
        "query": "SELECT booking_status_code FROM apartment_bookings",
        "schema": "CREATE TABLE View_Unit_Status (apt_booking_id NUMBER, apt_id NUMBER); CREATE TABLE Apartments (apt_type_code TEXT, bathroom_count NUMBER, room_count TEXT, apt_number TEXT, building_id NUMBER, apt_id NUMBER); CREATE TABLE Apartment_Bookings (booking_status_code TEXT, apt_id NUMBER, apt_booking_id NUMBER); CREATE TABLE Apartment_Facilities (facility_code TEXT, apt_id NUMBER); CREATE TABLE Apartment_Buildings (building_id NUMBER);"
      },
      {
        "question": "How many apartments have the status code to be \"Confirmed\"?",
        "query": "SELECT count(t2.apt_number) FROM apartment_bookings AS t1 JOIN apartments AS t2 ON t1.apt_id = t2.apt_id WHERE t1.booking_status_code = \"Confirmed\"",
        "schema": "CREATE TABLE Apartment_Buildings (building_id NUMBER); CREATE TABLE Apartment_Bookings (booking_status_code TEXT, apt_booking_id NUMBER, apt_id NUMBER); CREATE TABLE Apartments (apt_id NUMBER, room_count TEXT, apt_number TEXT, building_id NUMBER, apt_type_code TEXT, bathroom_count NUMBER); CREATE TABLE Apartment_Facilities (facility_code TEXT, apt_id NUMBER); CREATE TABLE View_Unit_Status (apt_id NUMBER, apt_booking_id NUMBER);"
      },
      {
        "question": "What about that of \"Provisional\" or \"Confirmed\"?",
        "query": "SELECT t2.apt_number FROM apartment_bookings AS t1 JOIN apartments AS t2 ON t1.apt_id = t2.apt_id WHERE t1.booking_status_code = \"Confirmed\" INTERSECT SELECT t2.apt_number FROM apartment_bookings AS t1 JOIN apartments AS t2 ON t1.apt_id = t2.apt_id WHERE t1.booking_status_code = \"Provisional\"",
        "schema": "CREATE TABLE Apartment_Facilities (apt_id NUMBER, facility_code TEXT); CREATE TABLE Apartment_Bookings (booking_status_code TEXT, apt_booking_id NUMBER, apt_id NUMBER); CREATE TABLE Apartment_Buildings (building_id NUMBER); CREATE TABLE View_Unit_Status (apt_id NUMBER, apt_booking_id NUMBER); CREATE TABLE Apartments (bathroom_count NUMBER, apt_id NUMBER, room_count TEXT, building_id NUMBER, apt_number TEXT, apt_type_code TEXT);"
      }
    ]
  ],
  "match_season": [
    [
      {
        "question": "List all the country names and their languages.",
        "query": "SELECT country_name, official_native_language FROM country",
        "schema": "CREATE TABLE match_season (Country NUMBER); CREATE TABLE country (Country_name TEXT, Country_id NUMBER, Official_native_language TEXT);"
      },
      {
        "question": "How many official languages that contain the word \"English\"?",
        "query": "SELECT count(*) FROM country WHERE official_native_language LIKE \"%English%\"",
        "schema": "CREATE TABLE match_season (Country NUMBER); CREATE TABLE country (Country_id NUMBER, Country_name TEXT, Official_native_language TEXT);"
      },
      {
        "question": "Which countries are they?",
        "query": "SELECT official_native_language FROM country WHERE official_native_language LIKE \"%English%\"",
        "schema": "CREATE TABLE match_season (Country NUMBER); CREATE TABLE country (Official_native_language TEXT, Country_id NUMBER, Country_name TEXT);"
      }
    ],
    [
      {
        "question": "Show all the information about the match season.",
        "query": "SELECT * FROM match_season",
        "schema": "CREATE TABLE team (Team_id NUMBER); CREATE TABLE player (Player TEXT, Player_ID NUMBER); CREATE TABLE match_season (Season NUMBER, Player TEXT, Team NUMBER, College TEXT);"
      },
      {
        "question": "List the positions.",
        "query": "SELECT POSITION FROM match_season",
        "schema": "CREATE TABLE match_season (Team NUMBER, Player TEXT, Position TEXT, College TEXT, Season NUMBER); CREATE TABLE player (Player TEXT, Player_ID NUMBER); CREATE TABLE team (Team_id NUMBER);"
      },
      {
        "question": "How many distinct positions are there?",
        "query": "SELECT count(DISTINCT POSITION) FROM match_season",
        "schema": "CREATE TABLE player (Player TEXT, Player_ID NUMBER); CREATE TABLE team (Team_id NUMBER); CREATE TABLE match_season (Position TEXT, Player TEXT, Season NUMBER, College TEXT, Team NUMBER);"
      },
      {
        "question": "What are the distinct position of players from college Virginia?",
        "query": "SELECT DISTINCT POSITION FROM match_season WHERE college = \"Virginia\"",
        "schema": "CREATE TABLE match_season (College TEXT, Team NUMBER, Country NUMBER, Season NUMBER, Player TEXT, Position TEXT); CREATE TABLE team (Team_id NUMBER); CREATE TABLE player (Player_ID NUMBER, Player TEXT);"
      },
      {
        "question": "What about UCLA or Duke?",
        "query": "SELECT DISTINCT POSITION FROM match_season WHERE college = \"UCLA\" OR college = \"Duke\"",
        "schema": "CREATE TABLE match_season (Season NUMBER, Team NUMBER, Country NUMBER, Position TEXT, College TEXT, Player TEXT); CREATE TABLE player (Player TEXT, Player_ID NUMBER); CREATE TABLE team (Team_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show the match season and the corresponding country.",
        "query": "SELECT t2.season, t1.country_name FROM country AS t1 JOIN match_season AS t2 ON t1.country_id = t2.country",
        "schema": "CREATE TABLE country (Country_id NUMBER, Country_name TEXT); CREATE TABLE match_season (Season NUMBER, Country NUMBER);"
      },
      {
        "question": "How many distinct countries in total?",
        "query": "SELECT count(DISTINCT t1.country_name) FROM country AS t1 JOIN match_season AS t2 ON t1.country_id = t2.country",
        "schema": "CREATE TABLE match_season (Season NUMBER, Country NUMBER); CREATE TABLE country (Country_name TEXT, Country_id NUMBER);"
      },
      {
        "question": "List the player names who are from Ireland.",
        "query": "SELECT t2.player FROM country AS t1 JOIN match_season AS t2 ON t1.country_id = t2.country WHERE t1.country_name = \"Ireland\"",
        "schema": "CREATE TABLE match_season (Country NUMBER, Season NUMBER, Player TEXT); CREATE TABLE country (Country_name TEXT, Country_id NUMBER); CREATE TABLE player (Player TEXT, Player_ID NUMBER);"
      },
      {
        "question": "How about Indonesia?",
        "query": "SELECT t2.player FROM country AS t1 JOIN match_season AS t2 ON t1.country_id = t2.country WHERE t1.country_name = \"Indonesia\"",
        "schema": "CREATE TABLE player (Player_ID NUMBER, Player TEXT); CREATE TABLE country (Country_id NUMBER, Country_name TEXT); CREATE TABLE match_season (Season NUMBER, Country NUMBER, Player TEXT);"
      }
    ],
    [
      {
        "question": "Show the country whose capital is Baghdad.",
        "query": "SELECT country_name FROM country WHERE capital = 'Baghdad'",
        "schema": "CREATE TABLE country (Capital TEXT, Country_id NUMBER, Country_name TEXT); CREATE TABLE player (Player_ID NUMBER, Player TEXT); CREATE TABLE match_season (Country NUMBER);"
      },
      {
        "question": "What about Dublin?",
        "query": "SELECT country_name FROM country WHERE capital = 'Dublin'",
        "schema": "CREATE TABLE match_season (Country NUMBER); CREATE TABLE player (Player TEXT, Player_ID NUMBER); CREATE TABLE country (Country_id NUMBER, Capital TEXT, Country_name TEXT);"
      },
      {
        "question": "List all the positions corresponding to that country.",
        "query": "SELECT t2.position FROM country AS t1 JOIN match_season AS t2 ON t1.country_id = t2.country WHERE t1.capital = \"Dublin\"",
        "schema": "CREATE TABLE player (Player TEXT, Player_ID NUMBER); CREATE TABLE team (Name TEXT); CREATE TABLE country (Country_id NUMBER, Capital TEXT, Country_name TEXT); CREATE TABLE match_season (Country NUMBER, Position TEXT);"
      },
      {
        "question": "What about the distinct positions?",
        "query": "SELECT DISTINCT t2.position FROM country AS t1 JOIN match_season AS t2 ON t1.country_id = t2.country WHERE t1.capital = \"Dublin\"",
        "schema": "CREATE TABLE country (Capital TEXT, Country_id NUMBER, Country_name TEXT); CREATE TABLE player (Player_ID NUMBER, Player TEXT); CREATE TABLE team (Name TEXT); CREATE TABLE match_season (Position TEXT, Country NUMBER);"
      }
    ],
    [
      {
        "question": "What are the distinct position of players from college Furman?",
        "query": "SELECT DISTINCT POSITION FROM match_season WHERE college = \"Furman\"",
        "schema": "CREATE TABLE player (Player_ID NUMBER, Player TEXT); CREATE TABLE match_season (Player TEXT, Position TEXT, College TEXT);"
      },
      {
        "question": "What about the players who come from college of Maryland or Duke?",
        "query": "SELECT player FROM match_season WHERE college = \"Maryland\" OR college = \"Duke\"",
        "schema": "CREATE TABLE match_season (College TEXT, Player TEXT, Season NUMBER, Country NUMBER, Position TEXT); CREATE TABLE country (Country_name TEXT, Country_id NUMBER); CREATE TABLE player (Player TEXT, Player_ID NUMBER);"
      },
      {
        "question": "What are the official languages of them?",
        "query": "SELECT t1.official_native_language FROM country AS t1 JOIN match_season AS t2 ON t1.country_id = t2.country WHERE t2.college = \"Maryland\" OR t2.college = \"Duke\"",
        "schema": "CREATE TABLE match_season (College TEXT, Country NUMBER, Position TEXT, Season NUMBER, Player TEXT); CREATE TABLE country (Country_id NUMBER, Country_name TEXT, Official_native_language TEXT); CREATE TABLE player (Player_ID NUMBER, Player TEXT);"
      }
    ],
    [
      {
        "question": "List the players and their country names.",
        "query": "SELECT t2.player,t1.country_name FROM country AS t1 JOIN match_season AS t2 ON t1.country_id = t2.country WHERE t2.position = \"Defender\"",
        "schema": "CREATE TABLE country (Country_name TEXT, Country_id NUMBER); CREATE TABLE player (Player TEXT, Player_ID NUMBER, Team NUMBER); CREATE TABLE match_season (Position TEXT, Country NUMBER, Player TEXT); CREATE TABLE team (Name TEXT, Team_id NUMBER);"
      },
      {
        "question": "Which ones have the position of Forward?",
        "query": "SELECT t2.player,t1.country_name FROM country AS t1 JOIN match_season AS t2 ON t1.country_id = t2.country WHERE t2.position = \"Defender\" WHERE t2.position = \"Forward\"",
        "schema": "CREATE TABLE team (Team_id NUMBER, Name TEXT); CREATE TABLE player (Team NUMBER, Player_ID NUMBER, Player TEXT); CREATE TABLE match_season (Position TEXT, Player TEXT, Country NUMBER, Season NUMBER); CREATE TABLE country (Country_id NUMBER, Country_name TEXT);"
      },
      {
        "question": "What about the official languages of them?",
        "query": "SELECT t1.official_native_language FROM country AS t1 JOIN match_season AS t2 ON t1.country_id = t2.country WHERE t2.position = \"Defender\"",
        "schema": "CREATE TABLE player (Player TEXT, Player_ID NUMBER, Team NUMBER); CREATE TABLE country (Country_id NUMBER, Country_name TEXT, Official_native_language TEXT); CREATE TABLE team (Name TEXT, Team_id NUMBER); CREATE TABLE match_season (Season NUMBER, Player TEXT, Country NUMBER, Position TEXT);"
      },
      {
        "question": "How many official languages in total for the defenders?",
        "query": "SELECT count(DISTINCT t1.official_native_language) FROM country AS t1 JOIN match_season AS t2 ON t1.country_id = t2.country WHERE t2.position = \"Defender\"",
        "schema": "CREATE TABLE player (Player_ID NUMBER, Team NUMBER, Player TEXT); CREATE TABLE match_season (Player TEXT, Position TEXT, Season NUMBER, Country NUMBER); CREATE TABLE country (Official_native_language TEXT, Country_id NUMBER, Country_name TEXT); CREATE TABLE team (Name TEXT, Team_id NUMBER);"
      }
    ],
    [
      {
        "question": "List the player, position and the corresponding team for each player.",
        "query": "SELECT t1.player,t1.position, t2.name FROM match_season AS t1 JOIN team AS t2 ON t1.team = t2.team_id",
        "schema": "CREATE TABLE match_season (Player TEXT, Position TEXT, Team NUMBER); CREATE TABLE player (Player TEXT, Player_ID NUMBER, Team NUMBER); CREATE TABLE team (Team_id NUMBER, Name TEXT);"
      },
      {
        "question": "Which ones are from the team 'Evalyn Feil', show the positions only?",
        "query": "SELECT t1.position FROM match_season AS t1 JOIN team AS t2 ON t1.team = t2.team_id WHERE t2.name = 'Evalyn Feil'",
        "schema": "CREATE TABLE player (Team NUMBER, Player_ID NUMBER, Player TEXT); CREATE TABLE team (Team_id NUMBER, Name TEXT); CREATE TABLE match_season (Player TEXT, Team NUMBER, Position TEXT, Season NUMBER);"
      },
      {
        "question": "What about the team name \"Ryley Goldner\"?",
        "query": "SELECT t1.position FROM match_season AS t1 JOIN team AS t2 ON t1.team = t2.team_id WHERE t2.name = \"Ryley Goldner\"",
        "schema": "CREATE TABLE player (Player TEXT, Player_ID NUMBER, Team NUMBER); CREATE TABLE team (Name TEXT, Team_id NUMBER); CREATE TABLE match_season (Team NUMBER, Position TEXT, Season NUMBER, Player TEXT);"
      }
    ],
    [
      {
        "question": "List the college and the corresponding team name.",
        "query": "SELECT college,name FROM match_season AS t1 JOIN team AS t2 ON t1.team = t2.team_id",
        "schema": "CREATE TABLE team (Team_id NUMBER, Name TEXT); CREATE TABLE match_season (Season NUMBER, Team NUMBER, College TEXT); CREATE TABLE player (Team NUMBER, Player TEXT);"
      },
      {
        "question": "How many unique colleges are there for team 'Miami Fusion'?",
        "query": "SELECT count(DISTINCT college) FROM match_season AS t1 JOIN team AS t2 ON t1.team = t2.team_id WHERE t2.name = 'Miami Fusion'",
        "schema": "CREATE TABLE team (Name TEXT, Team_id NUMBER); CREATE TABLE player (Team NUMBER, Player TEXT); CREATE TABLE match_season (Team NUMBER, College TEXT, Season NUMBER);"
      },
      {
        "question": "What about the team \"Columbus Crew\"?",
        "query": "SELECT count(DISTINCT t1.college) FROM match_season AS t1 JOIN team AS t2 ON t1.team = t2.team_id WHERE t2.name = \"Columbus Crew\"",
        "schema": "CREATE TABLE team (Name TEXT, Team_id NUMBER); CREATE TABLE match_season (Season NUMBER, Team NUMBER, College TEXT); CREATE TABLE player (Team NUMBER, Player TEXT);"
      }
    ],
    [
      {
        "question": "For each player, show the name and the team.",
        "query": "SELECT player, years_played FROM player",
        "schema": "CREATE TABLE team (Name TEXT, Team_id NUMBER); CREATE TABLE match_season (Team NUMBER, Player TEXT); CREATE TABLE player (Team NUMBER, Years_Played TEXT, Player_ID NUMBER, Player TEXT);"
      },
      {
        "question": "What about adding the corresponding team name for each record?",
        "query": "SELECT t1.player, t1.years_played,t2.name FROM player AS t1 JOIN team AS t2 ON t1.team = t2.team_id WHERE t2.name = \"Columbus Crew\"",
        "schema": "CREATE TABLE team (Name TEXT, Team_id NUMBER); CREATE TABLE player (Player_ID NUMBER, Team NUMBER, Player TEXT, Total_WL TEXT, Years_Played TEXT); CREATE TABLE match_season (Season NUMBER, Player TEXT, Team NUMBER);"
      },
      {
        "question": "What are the players and years played for those who are from team \"Brown Erdman\"?",
        "query": "SELECT t1.player , t1.years_played FROM player AS t1 JOIN team AS t2 ON t1.team = t2.team_id WHERE t2.name = \"Brown Erdman\"",
        "schema": "CREATE TABLE player (Player_ID NUMBER, Team NUMBER, Player TEXT, Years_Played TEXT, Total_WL TEXT); CREATE TABLE team (Name TEXT, Team_id NUMBER); CREATE TABLE match_season (Player TEXT, Team NUMBER, Season NUMBER);"
      },
      {
        "question": "What about that of \"Columbus Crew\"?",
        "query": "SELECT t1.player , t1.years_played FROM player AS t1 JOIN team AS t2 ON t1.team = t2.team_id WHERE t2.name = \"Columbus Crew\"",
        "schema": "CREATE TABLE player (Years_Played TEXT, Player_ID NUMBER, Team NUMBER, Total_WL TEXT, Player TEXT); CREATE TABLE match_season (Season NUMBER, Team NUMBER, Player TEXT); CREATE TABLE team (Name TEXT, Team_id NUMBER);"
      }
    ],
    [
      {
        "question": "List all the country names.",
        "query": "SELECT country_name FROM country",
        "schema": "CREATE TABLE match_season (Country NUMBER); CREATE TABLE country (Country_id NUMBER, Country_name TEXT);"
      },
      {
        "question": "For all players, show their country names.",
        "query": "SELECT t2.player, country_name FROM country AS t1 JOIN match_season AS t2 ON t1.country_id = t2.country GROUP BY t1.country_name",
        "schema": "CREATE TABLE country (Country_id NUMBER, Country_name TEXT); CREATE TABLE match_season (Player TEXT, Country NUMBER); CREATE TABLE player (Player_ID NUMBER, Player TEXT);"
      },
      {
        "question": "For each country, how many players are there?",
        "query": "SELECT country_name , count(*) FROM country AS t1 JOIN match_season AS t2 ON t1.country_id = t2.country GROUP BY t1.country_name",
        "schema": "CREATE TABLE match_season (Season NUMBER, Player TEXT, Country NUMBER); CREATE TABLE country (Country_id NUMBER, Country_name TEXT); CREATE TABLE player (Player_ID NUMBER, Player TEXT);"
      }
    ],
    [
      {
        "question": "What are the number of the positions for each type?",
        "query": "SELECT POSITION, count(*) FROM match_season GROUP BY POSITION",
        "schema": "CREATE TABLE match_season (Position TEXT);"
      },
      {
        "question": "Among those, which one is the list popular one?",
        "query": "SELECT POSITION FROM match_season GROUP BY POSITION ORDER BY count(*) ASC LIMIT 1",
        "schema": "CREATE TABLE match_season (Season NUMBER, Position TEXT);"
      },
      {
        "question": "How about the most popular one?",
        "query": "SELECT POSITION FROM match_season GROUP BY POSITION ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE match_season (Season NUMBER, Position TEXT);"
      }
    ],
    [
      {
        "question": "What are the number of the players in the match season for each college?",
        "query": "SELECT college, count(*) FROM match_season GROUP BY college",
        "schema": "CREATE TABLE match_season (College TEXT, Team NUMBER, Season NUMBER, Draft_Class TEXT, Player TEXT); CREATE TABLE player (Player_ID NUMBER, Player TEXT, Total_WL TEXT); CREATE TABLE team (Team_id NUMBER);"
      },
      {
        "question": "Which ones have the least players, keep the least 5 colleges.",
        "query": "SELECT college FROM match_season GROUP BY college ORDER BY count(*) ASC LIMIT 5",
        "schema": "CREATE TABLE player (Player_ID NUMBER, Player TEXT, Total_WL TEXT); CREATE TABLE team (Team_id NUMBER); CREATE TABLE match_season (College TEXT, Draft_Class TEXT, Team NUMBER, Season NUMBER, Player TEXT);"
      },
      {
        "question": "What about the top 3?",
        "query": "SELECT college FROM match_season GROUP BY college ORDER BY count(*) DESC LIMIT 3",
        "schema": "CREATE TABLE match_season (Team NUMBER, Position TEXT, Season NUMBER, Draft_Class TEXT, College TEXT, Player TEXT); CREATE TABLE team (Team_id NUMBER); CREATE TABLE player (Player TEXT, Total_WL TEXT, Player_ID NUMBER);"
      }
    ],
    [
      {
        "question": "How many unique colleges are there in the match season?",
        "query": "SELECT count(DISTINCT college) FROM match_season",
        "schema": "CREATE TABLE match_season (Season NUMBER, College TEXT); CREATE TABLE player (Player TEXT, Player_ID NUMBER);"
      },
      {
        "question": "Which countries have only one player?",
        "query": "SELECT college FROM match_season GROUP BY college HAVING count(*) = 1",
        "schema": "CREATE TABLE player (Player TEXT, Player_ID NUMBER); CREATE TABLE match_season (Season NUMBER, Country NUMBER, Player TEXT, College TEXT); CREATE TABLE country (Country_name TEXT, Country_id NUMBER);"
      },
      {
        "question": "What about at least two?",
        "query": "SELECT college FROM match_season GROUP BY college HAVING count(*) >= 2",
        "schema": "CREATE TABLE country (Country_id NUMBER, Country_name TEXT); CREATE TABLE player (Player TEXT, Player_ID NUMBER); CREATE TABLE match_season (Country NUMBER, Season NUMBER, College TEXT, Player TEXT);"
      }
    ],
    [
      {
        "question": "How many distinct colleges are there in the match season?",
        "query": "SELECT count(DISTINCT college) FROM match_season",
        "schema": "CREATE TABLE match_season (Season NUMBER, College TEXT);"
      },
      {
        "question": "Which countries have only one player?",
        "query": "SELECT college FROM match_season GROUP BY college HAVING count(*) = 1",
        "schema": "CREATE TABLE match_season (Player TEXT, College TEXT, Season NUMBER, Country NUMBER); CREATE TABLE country (Country_id NUMBER, Country_name TEXT); CREATE TABLE player (Player_ID NUMBER, Player TEXT);"
      },
      {
        "question": "What about at least two?",
        "query": "SELECT college FROM match_season GROUP BY college HAVING count(*) >= 2",
        "schema": "CREATE TABLE match_season (Season NUMBER, Player TEXT, Country NUMBER, College TEXT); CREATE TABLE country (Country_id NUMBER, Country_name TEXT); CREATE TABLE player (Player_ID NUMBER, Player TEXT);"
      },
      {
        "question": "Show the result in descending alphabetical order.",
        "query": "SELECT college FROM match_season GROUP BY college HAVING count(*) >= 2 ORDER BY college DESC",
        "schema": "CREATE TABLE country (Country_id NUMBER, Country_name TEXT); CREATE TABLE match_season (Country NUMBER, Season NUMBER, Player TEXT, College TEXT); CREATE TABLE player (Player TEXT, Player_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show the team names.",
        "query": "SELECT name FROM team",
        "schema": "CREATE TABLE player (Player_ID NUMBER, Team NUMBER, Player TEXT); CREATE TABLE team (Team_id NUMBER, Name TEXT); CREATE TABLE match_season (Team NUMBER, Season NUMBER);"
      },
      {
        "question": "Which of them have at least one record in the match season?",
        "query": "SELECT name FROM team WHERE team_id IN (SELECT team FROM match_season)",
        "schema": "CREATE TABLE match_season (Season NUMBER, Team NUMBER); CREATE TABLE team (Name TEXT, Team_id NUMBER); CREATE TABLE player (Player_ID NUMBER, Player TEXT, Team NUMBER);"
      },
      {
        "question": "Which are not?",
        "query": "SELECT name FROM team WHERE team_id NOT IN (SELECT team FROM match_season)",
        "schema": "CREATE TABLE team (Team_id NUMBER, Name TEXT); CREATE TABLE match_season (Team NUMBER, Season NUMBER); CREATE TABLE player (Player TEXT, Team NUMBER, Player_ID NUMBER);"
      }
    ],
    [
      {
        "question": "List the positions from all seasons.",
        "query": "SELECT POSITION FROM match_season",
        "schema": "CREATE TABLE player (Player_ID NUMBER, Player TEXT); CREATE TABLE match_season (Player TEXT, Season NUMBER, Position TEXT);"
      },
      {
        "question": "How many are there for each position?",
        "query": "SELECT POSITION, count(*) FROM match_season GROUP BY POSITION",
        "schema": "CREATE TABLE match_season (Position TEXT, Player TEXT, Season NUMBER); CREATE TABLE player (Player_ID NUMBER, Player TEXT);"
      },
      {
        "question": "Show the positions and the corresponding country.",
        "query": "SELECT t2.position,t1.country_name FROM country AS t1 JOIN match_season AS t2 ON t1.country_id = t2.country",
        "schema": "CREATE TABLE match_season (Player TEXT, Position TEXT, Country NUMBER, Season NUMBER); CREATE TABLE player (Player TEXT, Player_ID NUMBER); CREATE TABLE country (Country_name TEXT, Country_id NUMBER);"
      },
      {
        "question": "Keep the country names that have both forward and defender as position.",
        "query": "SELECT t1.country_name FROM country AS t1 JOIN match_season AS t2 ON t1.country_id = t2.country WHERE t2.position = \"Forward\" INTERSECT SELECT t1.country_name FROM country AS t1 JOIN match_season AS t2 ON t1.country_id = t2.country WHERE t2.position = \"Defender\"",
        "schema": "CREATE TABLE country (Country_name TEXT, Country_id NUMBER); CREATE TABLE match_season (Position TEXT, Player TEXT, Country NUMBER, Season NUMBER); CREATE TABLE player (Player_ID NUMBER, Player TEXT);"
      }
    ]
  ],
  "music_1": [
    [
      {
        "question": "Show all the song names and their release date.",
        "query": "SELECT song_name , releasedate FROM song",
        "schema": "CREATE TABLE files (f_id NUMBER); CREATE TABLE song (releasedate TIME, f_id NUMBER, song_name TEXT);"
      },
      {
        "question": "How many different releasing dates are there?",
        "query": "SELECT count(DISTINCT releasedate) FROM song",
        "schema": "CREATE TABLE song (song_name TEXT, releasedate TIME, f_id NUMBER); CREATE TABLE files (f_id NUMBER);"
      },
      {
        "question": "From those songs, which ones are released in the most recent year?",
        "query": "SELECT song_name , releasedate FROM song ORDER BY releasedate DESC LIMIT 1",
        "schema": "CREATE TABLE song (f_id NUMBER, releasedate TIME, song_name TEXT); CREATE TABLE files (f_id NUMBER);"
      }
    ],
    [
      {
        "question": "Order the songs by their file size, from large to small.",
        "query": "SELECT * FROM files ORDER BY file_size DESC",
        "schema": "CREATE TABLE files (file_size TEXT, duration TEXT, f_id NUMBER); CREATE TABLE song (song_name TEXT, f_id NUMBER);"
      },
      {
        "question": "What about ordering by duration?",
        "query": "SELECT * FROM files ORDER BY duration DESC",
        "schema": "CREATE TABLE song (song_name TEXT, f_id NUMBER); CREATE TABLE files (duration TEXT, f_id NUMBER, file_size TEXT);"
      },
      {
        "question": "From those results, which one is the top 1, only keep the id of it.",
        "query": "SELECT f_id FROM files ORDER BY duration DESC LIMIT 1",
        "schema": "CREATE TABLE song (song_name TEXT, f_id NUMBER); CREATE TABLE files (duration TEXT, file_size TEXT, f_id NUMBER);"
      }
    ],
    [
      {
        "question": "What is the average rating for all the songs?",
        "query": "SELECT avg(rating) FROM song",
        "schema": "CREATE TABLE files (f_id NUMBER); CREATE TABLE genre (g_name TEXT); CREATE TABLE song (song_name TEXT, rating NUMBER, f_id NUMBER);"
      },
      {
        "question": "How many of the songs which rating is above 9?",
        "query": "SELECT count(*) FROM song WHERE rating > 9",
        "schema": "CREATE TABLE files (f_id NUMBER); CREATE TABLE song (rating NUMBER, song_name TEXT, f_id NUMBER); CREATE TABLE genre (g_name TEXT);"
      },
      {
        "question": "What are singer names and their countries of these songs?",
        "query": "SELECT DISTINCT t1.artist_name , t1.country FROM artist AS t1 JOIN song AS t2 ON t1.artist_name = t2.artist_name WHERE t2.rating > 9",
        "schema": "CREATE TABLE song (languages TEXT, country TEXT, artist_name TEXT, song_name TEXT, f_id NUMBER, rating NUMBER); CREATE TABLE artist (country TEXT, artist_name TEXT); CREATE TABLE genre (g_name TEXT); CREATE TABLE files (artist_name TEXT, f_id NUMBER);"
      }
    ],
    [
      {
        "question": "List all the song names by the resolution in ascending order.",
        "query": "SELECT song_name FROM song ORDER BY resolution DESC",
        "schema": "CREATE TABLE files (f_id NUMBER); CREATE TABLE song (song_name TEXT, resolution NUMBER, f_id NUMBER);"
      },
      {
        "question": "How many songs have resolution higher than 800?",
        "query": "SELECT count(song_name) FROM song WHERE resolution > 800",
        "schema": "CREATE TABLE files (f_id NUMBER); CREATE TABLE song (resolution NUMBER, f_id NUMBER, song_name TEXT);"
      },
      {
        "question": "What about lower?",
        "query": "SELECT count(song_name) FROM song WHERE resolution < 800",
        "schema": "CREATE TABLE files (f_id NUMBER, duration TEXT); CREATE TABLE song (f_id NUMBER, resolution NUMBER, song_name TEXT);"
      },
      {
        "question": "What are the file size and format of them?",
        "query": "SELECT DISTINCT t1.file_size , t1.formats FROM files AS t1 JOIN song AS t2 ON t1.f_id = t2.f_id WHERE t2.resolution < 800",
        "schema": "CREATE TABLE files (duration TEXT, f_id NUMBER, formats TEXT, file_size TEXT); CREATE TABLE song (f_id NUMBER, song_name TEXT, resolution NUMBER);"
      }
    ],
    [
      {
        "question": "Which song ids are the top three long ones?",
        "query": "SELECT f_id FROM files ORDER BY duration DESC LIMIT 3",
        "schema": "CREATE TABLE song (rating NUMBER, artist_name TEXT, f_id NUMBER, song_name TEXT); CREATE TABLE files (f_id NUMBER, duration TEXT); CREATE TABLE artist (artist_name TEXT);"
      },
      {
        "question": "What about the shortest one?",
        "query": "SELECT f_id FROM files ORDER BY duration ASC LIMIT 1",
        "schema": "CREATE TABLE artist (artist_name TEXT); CREATE TABLE song (song_name TEXT, rating NUMBER, f_id NUMBER, artist_name TEXT); CREATE TABLE files (duration TEXT, f_id NUMBER);"
      },
      {
        "question": "What is the artist name of it?",
        "query": "SELECT t1.artist_name FROM song AS t1 JOIN files AS t2 ON t1.f_id = t2.f_id ORDER BY t2.duration LIMIT 1",
        "schema": "CREATE TABLE artist (artist_name TEXT); CREATE TABLE files (f_id NUMBER, artist_name TEXT, duration TEXT); CREATE TABLE song (f_id NUMBER, artist_name TEXT, song_name TEXT, rating NUMBER);"
      }
    ],
    [
      {
        "question": "What is the maximum rating for all the songs?",
        "query": "SELECT max(rating) FROM song",
        "schema": "CREATE TABLE song (song_name TEXT, rating NUMBER, f_id NUMBER); CREATE TABLE files (duration TEXT, f_id NUMBER); CREATE TABLE genre (rating TEXT, g_name TEXT);"
      },
      {
        "question": "Which songs are the top 2 rating ones?",
        "query": "SELECT * FROM song ORDER BY rating DESC LIMIT 2",
        "schema": "CREATE TABLE genre (g_name TEXT, rating TEXT); CREATE TABLE files (duration TEXT, f_id NUMBER); CREATE TABLE song (rating NUMBER, song_name TEXT, f_id NUMBER);"
      },
      {
        "question": "What about top 3?",
        "query": "SELECT * FROM song ORDER BY rating DESC LIMIT 3",
        "schema": "CREATE TABLE song (languages TEXT, song_name TEXT, f_id NUMBER, rating NUMBER); CREATE TABLE files (duration TEXT, f_id NUMBER); CREATE TABLE genre (g_name TEXT, rating TEXT);"
      },
      {
        "question": "What are the names and countries of origin for the artists of these songs?",
        "query": "SELECT t1.artist_name , t1.country FROM artist AS t1 JOIN song AS t2 ON t1.artist_name = t2.artist_name ORDER BY t2.rating DESC LIMIT 3",
        "schema": "CREATE TABLE genre (g_name TEXT, rating TEXT); CREATE TABLE artist (artist_name TEXT, country TEXT); CREATE TABLE files (artist_name TEXT, duration TEXT, f_id NUMBER); CREATE TABLE song (rating NUMBER, languages TEXT, song_name TEXT, f_id NUMBER, country TEXT, artist_name TEXT);"
      }
    ],
    [
      {
        "question": "List all the durations of the songs.",
        "query": "SELECT duration FROM files",
        "schema": "CREATE TABLE files (duration TEXT, f_id NUMBER); CREATE TABLE song (f_id NUMBER, song_name TEXT);"
      },
      {
        "question": "How many are there if the duration is only 2 mins to 3 mins?",
        "query": "SELECT count(*) FROM files WHERE duration LIKE \"2:%\"",
        "schema": "CREATE TABLE song (f_id NUMBER, song_name TEXT); CREATE TABLE files (f_id NUMBER, duration TEXT);"
      },
      {
        "question": "What about 4 minutes long?",
        "query": "SELECT count(*) FROM files WHERE duration LIKE \"4:%\"",
        "schema": "CREATE TABLE files (f_id NUMBER, formats TEXT, duration TEXT); CREATE TABLE song (f_id NUMBER, song_name TEXT);"
      }
    ],
    [
      {
        "question": "How many songs are produced by female artists?",
        "query": "SELECT count(*) FROM artist AS t1 JOIN song AS t2 ON t1.artist_name = t2.artist_name WHERE t1.gender = \"Female\"",
        "schema": "CREATE TABLE files (artist_name TEXT, f_id NUMBER); CREATE TABLE song (genre_is TEXT, song_name TEXT, artist_name TEXT, f_id NUMBER); CREATE TABLE artist (artist_name TEXT, gender TEXT);"
      },
      {
        "question": "What is the maximum rating of these songs?",
        "query": "SELECT max(t2.rating) FROM artist AS t1 JOIN song AS t2 ON t1.artist_name = t2.artist_name WHERE t1.gender = \"Female\"",
        "schema": "CREATE TABLE song (artist_name TEXT, f_id NUMBER, genre_is TEXT, rating NUMBER, song_name TEXT); CREATE TABLE artist (artist_name TEXT, gender TEXT); CREATE TABLE files (artist_name TEXT, duration TEXT, f_id NUMBER);"
      },
      {
        "question": "How about average rating?",
        "query": "SELECT avg(t2.rating) FROM artist AS t1 JOIN song AS t2 ON t1.artist_name = t2.artist_name WHERE t1.gender = \"Female\"",
        "schema": "CREATE TABLE files (artist_name TEXT, duration TEXT, f_id NUMBER); CREATE TABLE song (rating NUMBER, artist_name TEXT, song_name TEXT, genre_is TEXT, f_id NUMBER); CREATE TABLE artist (artist_name TEXT, gender TEXT);"
      }
    ],
    [
      {
        "question": "For each format, how many files are there?",
        "query": "SELECT formats,count(*) FROM files GROUP BY formats",
        "schema": "CREATE TABLE song (f_id NUMBER); CREATE TABLE files (f_id NUMBER, file_size TEXT, formats TEXT);"
      },
      {
        "question": "So which format is the most common one?",
        "query": "SELECT formats FROM files GROUP BY formats ORDER BY COUNT (*) DESC LIMIT 1",
        "schema": "CREATE TABLE files (file_size TEXT, formats TEXT, f_id NUMBER); CREATE TABLE song (f_id NUMBER);"
      }
    ],
    [
      {
        "question": "How many distinct countries are there?",
        "query": "SELECT count(DISTINCT country) FROM artist",
        "schema": "CREATE TABLE artist (artist_name TEXT, country TEXT); CREATE TABLE song (country TEXT, languages TEXT);"
      },
      {
        "question": "How many artists come from India?",
        "query": "SELECT count(*) FROM artist WHERE country = 'India'",
        "schema": "CREATE TABLE artist (artist_name TEXT, country TEXT); CREATE TABLE song (artist_name TEXT, country TEXT, languages TEXT);"
      },
      {
        "question": "Which ones who come from UK and have songs in English?",
        "query": "SELECT artist_name FROM artist WHERE country = \"UK\" INTERSECT SELECT artist_name FROM song WHERE languages = \"english\"",
        "schema": "CREATE TABLE song (country TEXT, artist_name TEXT, languages TEXT); CREATE TABLE artist (country TEXT, artist_name TEXT); CREATE TABLE files (artist_name TEXT);"
      }
    ],
    [
      {
        "question": "List all the durations of the songs.",
        "query": "SELECT duration FROM files",
        "schema": "CREATE TABLE files (f_id NUMBER, duration TEXT); CREATE TABLE artist (artist_name TEXT); CREATE TABLE song (f_id NUMBER, song_name TEXT);"
      },
      {
        "question": "How many are there if the duration is only 3 mins to 4 mins?",
        "query": "SELECT count(*) FROM files WHERE duration LIKE \"3:%\"",
        "schema": "CREATE TABLE files (f_id NUMBER, duration TEXT); CREATE TABLE artist (artist_name TEXT); CREATE TABLE song (song_name TEXT, f_id NUMBER);"
      },
      {
        "question": "What about the ones which have the format to be mp4?",
        "query": "SELECT count(*) FROM files WHERE formats = \"mp4\"",
        "schema": "CREATE TABLE artist (artist_name TEXT); CREATE TABLE files (duration TEXT, formats TEXT, f_id NUMBER); CREATE TABLE song (song_name TEXT, f_id NUMBER);"
      },
      {
        "question": "Show the ids that the song is in mp4 and resolution is lower than 1000.",
        "query": "SELECT f_id FROM files WHERE formats = \"mp4\" INTERSECT SELECT f_id FROM song WHERE resolution < 1000",
        "schema": "CREATE TABLE song (song_name TEXT, resolution NUMBER, f_id NUMBER); CREATE TABLE files (f_id NUMBER, duration TEXT, formats TEXT); CREATE TABLE artist (artist_name TEXT);"
      }
    ],
    [
      {
        "question": "How many songs are produced by male artists?",
        "query": "SELECT count(*) FROM artist AS t1 JOIN song AS t2 ON t1.artist_name = t2.artist_name WHERE t1.gender = \"Male\"",
        "schema": "CREATE TABLE song (song_name TEXT, artist_name TEXT, f_id NUMBER, languages TEXT, genre_is TEXT); CREATE TABLE files (f_id NUMBER, artist_name TEXT); CREATE TABLE artist (artist_name TEXT, gender TEXT);"
      },
      {
        "question": "How about female artisits?",
        "query": "SELECT count(*) FROM artist AS t1 JOIN song AS t2 ON t1.artist_name = t2.artist_name WHERE t1.gender = \"Female\"",
        "schema": "CREATE TABLE song (languages TEXT, genre_is TEXT, f_id NUMBER, artist_name TEXT, song_name TEXT); CREATE TABLE artist (artist_name TEXT, gender TEXT); CREATE TABLE files (artist_name TEXT, f_id NUMBER);"
      },
      {
        "question": "Among those songs, which ones are in Bangla?",
        "query": "SELECT count(*) FROM artist AS t1 JOIN song AS t2 ON t1.artist_name = t2.artist_name WHERE t1.gender = \"Female\" AND languages = \"bangla\"",
        "schema": "CREATE TABLE artist (gender TEXT, artist_name TEXT, country TEXT); CREATE TABLE song (song_name TEXT, f_id NUMBER, languages TEXT, genre_is TEXT, artist_name TEXT); CREATE TABLE files (artist_name TEXT, f_id NUMBER);"
      },
      {
        "question": "What are the country of origin for the artists of these songs?",
        "query": "SELECT t1.country FROM artist AS t1 JOIN song AS t2 ON t1.artist_name = t2.artist_name WHERE t1.gender = \"Female\" AND t2.languages = \"bangla\"",
        "schema": "CREATE TABLE artist (gender TEXT, artist_name TEXT, country TEXT); CREATE TABLE files (artist_name TEXT, f_id NUMBER); CREATE TABLE song (song_name TEXT, country TEXT, genre_is TEXT, languages TEXT, artist_name TEXT, f_id NUMBER);"
      }
    ],
    [
      {
        "question": "List all the song names by the resolution in ascending order.",
        "query": "SELECT song_name FROM song ORDER BY resolution DESC",
        "schema": "CREATE TABLE files (f_id NUMBER); CREATE TABLE song (resolution NUMBER, song_name TEXT, f_id NUMBER);"
      },
      {
        "question": "How many songs have resolution higher than 900?",
        "query": "SELECT count(song_name) FROM song WHERE resolution > 900",
        "schema": "CREATE TABLE files (f_id NUMBER); CREATE TABLE song (f_id NUMBER, song_name TEXT, resolution NUMBER);"
      },
      {
        "question": "What about lower than 800?",
        "query": "SELECT count(song_name) FROM song WHERE resolution < 800",
        "schema": "CREATE TABLE files (duration TEXT, f_id NUMBER); CREATE TABLE song (f_id NUMBER, song_name TEXT, resolution NUMBER);"
      },
      {
        "question": "Among those results, how may have mp3 format?",
        "query": "SELECT count(*) FROM files AS t1 JOIN song AS t2 ON t1.f_id = t2.f_id WHERE t1.formats = \"mp3\" AND t2.resolution < 800",
        "schema": "CREATE TABLE song (resolution NUMBER, f_id NUMBER, languages TEXT, song_name TEXT); CREATE TABLE files (duration TEXT, f_id NUMBER, formats TEXT);"
      },
      {
        "question": "What is the average duration of those songs?",
        "query": "SELECT avg(t1.duration) FROM files AS t1 JOIN song AS t2 ON t1.f_id = t2.f_id WHERE t1.formats = \"mp3\" AND t2.resolution < 800",
        "schema": "CREATE TABLE song (languages TEXT, resolution NUMBER, song_name TEXT, f_id NUMBER); CREATE TABLE files (duration TEXT, formats TEXT, f_id NUMBER);"
      }
    ],
    [
      {
        "question": "List all the song names and the resolutions in descending order of resolution.",
        "query": "SELECT song_name, resolution FROM song ORDER BY resolution DESC",
        "schema": "CREATE TABLE files (f_id NUMBER); CREATE TABLE song (song_name TEXT, resolution NUMBER, f_id NUMBER);"
      },
      {
        "question": "Which one has the highest resolution?",
        "query": "SELECT song_name, resolution FROM song ORDER BY resolution DESC LIMIT 1",
        "schema": "CREATE TABLE files (f_id NUMBER); CREATE TABLE song (song_name TEXT, f_id NUMBER, resolution NUMBER, languages TEXT);"
      },
      {
        "question": "What about the lowest one?",
        "query": "SELECT song_name, resolution FROM song ORDER BY resolution ASC LIMIT 1",
        "schema": "CREATE TABLE song (song_name TEXT, resolution NUMBER, languages TEXT, f_id NUMBER); CREATE TABLE files (duration TEXT, f_id NUMBER);"
      },
      {
        "question": "What is the gender and name of the corresponding artist of that song?",
        "query": "SELECT t1.gender , t1.artist_name FROM artist AS t1 JOIN song AS t2 ON t1.artist_name = t2.artist_name ORDER BY t2.resolution LIMIT 1",
        "schema": "CREATE TABLE files (artist_name TEXT, duration TEXT, f_id NUMBER); CREATE TABLE artist (artist_name TEXT, gender TEXT); CREATE TABLE song (languages TEXT, f_id NUMBER, song_name TEXT, artist_name TEXT, resolution NUMBER);"
      }
    ],
    [
      {
        "question": "List all the song names and the resolutions in ascending order of resolution.",
        "query": "SELECT song_name, resolution FROM song ORDER BY resolution ASC",
        "schema": "CREATE TABLE files (f_id NUMBER); CREATE TABLE song (resolution NUMBER, song_name TEXT, f_id NUMBER);"
      },
      {
        "question": "Which ones are the top two of the resolution?",
        "query": "SELECT song_name, resolution FROM song ORDER BY resolution DESC LIMIT 2",
        "schema": "CREATE TABLE song (song_name TEXT, resolution NUMBER, f_id NUMBER); CREATE TABLE files (f_id NUMBER);"
      },
      {
        "question": "What is the average resolution for the English songs?",
        "query": "SELECT avg(resolution) FROM song WHERE languages = \"english\"",
        "schema": "CREATE TABLE files (f_id NUMBER); CREATE TABLE song (resolution NUMBER, song_name TEXT, f_id NUMBER, languages TEXT);"
      },
      {
        "question": "Which songs have a higher resolution than the English ones?",
        "query": "SELECT song_name FROM song WHERE resolution > (SELECT min(resolution) FROM song WHERE languages = \"english\")",
        "schema": "CREATE TABLE files (f_id NUMBER); CREATE TABLE song (resolution NUMBER, song_name TEXT, f_id NUMBER, languages TEXT);"
      },
      {
        "question": "What about the distinct song names of them?",
        "query": "SELECT DISTINCT song_name FROM song WHERE resolution > (SELECT min(resolution) FROM song WHERE languages = \"english\")",
        "schema": "CREATE TABLE files (f_id NUMBER); CREATE TABLE song (resolution NUMBER, song_name TEXT, languages TEXT, f_id NUMBER);"
      }
    ],
    [
      {
        "question": "List all the song names and the ratings.",
        "query": "SELECT song_name, rating FROM song",
        "schema": "CREATE TABLE genre (rating TEXT, g_name TEXT); CREATE TABLE files (f_id NUMBER); CREATE TABLE song (song_name TEXT, f_id NUMBER, rating NUMBER);"
      },
      {
        "question": "What is the maximum rating?",
        "query": "SELECT max(rating) FROM song",
        "schema": "CREATE TABLE song (rating NUMBER, song_name TEXT, f_id NUMBER); CREATE TABLE genre (rating TEXT, g_name TEXT); CREATE TABLE files (duration TEXT, f_id NUMBER);"
      },
      {
        "question": "Which songs have a lower rating than the average rating?",
        "query": "SELECT song_name FROM song WHERE rating < (SELECT avg(rating) FROM song)",
        "schema": "CREATE TABLE genre (g_name TEXT, rating TEXT); CREATE TABLE song (song_name TEXT, f_id NUMBER, rating NUMBER); CREATE TABLE files (duration TEXT, f_id NUMBER);"
      },
      {
        "question": "What about lower rating than that of blues genre ones?",
        "query": "SELECT song_name FROM song WHERE rating < (SELECT max(rating) FROM song WHERE genre_is = \"blues\")",
        "schema": "CREATE TABLE genre (rating TEXT, g_name TEXT); CREATE TABLE files (f_id NUMBER, duration TEXT); CREATE TABLE song (f_id NUMBER, rating NUMBER, genre_is TEXT, song_name TEXT);"
      }
    ],
    [
      {
        "question": "Show all the names of the song.",
        "query": "SELECT song_name FROM song",
        "schema": "CREATE TABLE song (languages TEXT, f_id NUMBER, song_name TEXT); CREATE TABLE files (f_id NUMBER);"
      },
      {
        "question": "How many of them contain the word 'robe'?",
        "query": "SELECT count(*) FROM song WHERE song_name LIKE \"%robe%\"",
        "schema": "CREATE TABLE song (f_id NUMBER, languages TEXT, song_name TEXT); CREATE TABLE files (f_id NUMBER);"
      },
      {
        "question": "How about the word 'love'?",
        "query": "SELECT count(*) FROM song WHERE song_name LIKE \"%love%\"",
        "schema": "CREATE TABLE files (f_id NUMBER); CREATE TABLE song (languages TEXT, f_id NUMBER, song_name TEXT);"
      },
      {
        "question": "What are the name and country of origin for the artists of these songs?",
        "query": "SELECT t1.artist_name , t1.country FROM artist AS t1 JOIN song AS t2 ON t1.artist_name = t2.artist_name WHERE t2.song_name LIKE \"%love%\"",
        "schema": "CREATE TABLE artist (artist_name TEXT, country TEXT); CREATE TABLE files (f_id NUMBER, artist_name TEXT); CREATE TABLE song (song_name TEXT, f_id NUMBER, artist_name TEXT, languages TEXT, country TEXT);"
      }
    ],
    [
      {
        "question": "How many songs are released in January?",
        "query": "SELECT count(*) FROM song WHERE releasedate LIKE \"%JAN%\"",
        "schema": "CREATE TABLE song (releasedate TIME, song_name TEXT, f_id NUMBER); CREATE TABLE files (f_id NUMBER);"
      },
      {
        "question": "Who are the artists of these songs, list the name and gender?",
        "query": "SELECT t1.artist_name , t1.gender FROM artist AS t1 JOIN song AS t2 ON t1.artist_name = t2.artist_name WHERE t2.releasedate LIKE \"%Mar%\"",
        "schema": "CREATE TABLE files (artist_name TEXT, f_id NUMBER); CREATE TABLE song (f_id NUMBER, artist_name TEXT, releasedate TIME, song_name TEXT); CREATE TABLE artist (gender TEXT, artist_name TEXT);"
      }
    ],
    [
      {
        "question": "How many songs have resolution higher than 1000?",
        "query": "SELECT count(song_name) FROM song WHERE resolution > 1000",
        "schema": "CREATE TABLE song (song_name TEXT, resolution NUMBER, f_id NUMBER); CREATE TABLE files (f_id NUMBER);"
      },
      {
        "question": "What about higher than 720?",
        "query": "SELECT count(song_name) FROM song WHERE resolution > 720",
        "schema": "CREATE TABLE files (f_id NUMBER); CREATE TABLE song (f_id NUMBER, song_name TEXT, resolution NUMBER);"
      },
      {
        "question": "Among those results, how may have mp4 format?",
        "query": "SELECT count(*) FROM files AS t1 JOIN song AS t2 ON t1.f_id = t2.f_id WHERE t1.formats = \"mp4\" AND t2.resolution > 720",
        "schema": "CREATE TABLE song (resolution NUMBER, song_name TEXT, f_id NUMBER); CREATE TABLE files (f_id NUMBER, formats TEXT);"
      },
      {
        "question": "List the ids of these songs.",
        "query": "SELECT f_id FROM files AS t1 JOIN song AS t2 ON t1.f_id = t2.f_id WHERE t1.formats = \"mp4\" AND t2.resolution > 720",
        "schema": "CREATE TABLE song (song_name TEXT, f_id NUMBER, resolution NUMBER); CREATE TABLE files (f_id NUMBER, formats TEXT);"
      },
      {
        "question": "What about the ids of the songs that in mp4 format or resolution above 720?",
        "query": "SELECT f_id FROM files WHERE formats = \"mp4\" UNION SELECT f_id FROM song WHERE resolution > 720",
        "schema": "CREATE TABLE files (formats TEXT, f_id NUMBER); CREATE TABLE song (song_name TEXT, resolution NUMBER, f_id NUMBER);"
      }
    ],
    [
      {
        "question": "List all the durations of the songs.",
        "query": "SELECT duration FROM files",
        "schema": "CREATE TABLE files (duration TEXT, f_id NUMBER); CREATE TABLE song (f_id NUMBER, song_name TEXT);"
      },
      {
        "question": "How many are there if the duration is 4 mins?",
        "query": "SELECT count(*) FROM files WHERE duration LIKE \"4:%\"",
        "schema": "CREATE TABLE song (song_name TEXT, f_id NUMBER); CREATE TABLE files (formats TEXT, f_id NUMBER, duration TEXT);"
      },
      {
        "question": "What are the names of those songs?",
        "query": "SELECT t2.song_name FROM files AS t1 JOIN song AS t2 ON t1.f_id = t2.f_id WHERE t1.duration LIKE \"4:%\"",
        "schema": "CREATE TABLE files (duration TEXT, f_id NUMBER, formats TEXT); CREATE TABLE song (f_id NUMBER, song_name TEXT);"
      },
      {
        "question": "What about the song names which has 4 minute duration or is in English?",
        "query": "SELECT t2.song_name FROM files AS t1 JOIN song AS t2 ON t1.f_id = t2.f_id WHERE t1.duration LIKE \"4:%\" UNION SELECT song_name FROM song WHERE languages = \"english\"",
        "schema": "CREATE TABLE files (duration TEXT, f_id NUMBER, formats TEXT); CREATE TABLE song (f_id NUMBER, song_name TEXT, languages TEXT);"
      }
    ],
    [
      {
        "question": "How many distinct languages are there for the songs?",
        "query": "SELECT count(DISTINCT languages) FROM song",
        "schema": "CREATE TABLE song (languages TEXT, song_name TEXT, f_id NUMBER); CREATE TABLE files (f_id NUMBER);"
      },
      {
        "question": "Among those languages, which one is the most popular one?",
        "query": "SELECT languages FROM song GROUP BY languages ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE genre (g_name TEXT, most_popular_in TEXT); CREATE TABLE files (f_id NUMBER); CREATE TABLE song (f_id NUMBER, languages TEXT, song_name TEXT);"
      }
    ],
    [
      {
        "question": "List each language and how many songs for each?",
        "query": "SELECT languages, count(*) FROM song GROUP BY languages",
        "schema": "CREATE TABLE song (languages TEXT, song_name TEXT, f_id NUMBER, country TEXT); CREATE TABLE files (f_id NUMBER);"
      },
      {
        "question": "Which one is the most popular language?",
        "query": "SELECT languages, count(*) FROM song GROUP BY languages DESC LIMIT 1",
        "schema": "CREATE TABLE song (country TEXT, languages TEXT, song_name TEXT, f_id NUMBER); CREATE TABLE files (f_id NUMBER); CREATE TABLE genre (g_name TEXT);"
      },
      {
        "question": "What about that for the songs which resolution are above 1000?",
        "query": "SELECT artist_name FROM song WHERE resolution > 1000 GROUP BY languages ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE files (f_id NUMBER); CREATE TABLE genre (g_name TEXT); CREATE TABLE song (artist_name TEXT, languages TEXT, country TEXT, f_id NUMBER, resolution NUMBER, song_name TEXT);"
      },
      {
        "question": "How about resolution are above 500?",
        "query": "SELECT artist_name FROM song WHERE resolution > 500 GROUP BY languages ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE genre (g_name TEXT); CREATE TABLE artist (artist_name TEXT, country TEXT); CREATE TABLE files (f_id NUMBER, artist_name TEXT); CREATE TABLE song (languages TEXT, song_name TEXT, f_id NUMBER, resolution NUMBER, artist_name TEXT, country TEXT);"
      }
    ],
    [
      {
        "question": "How many artists come from India?",
        "query": "SELECT count(*) FROM artist WHERE country = \"India\"",
        "schema": "CREATE TABLE song (artist_name TEXT, languages TEXT, country TEXT); CREATE TABLE artist (artist_name TEXT, country TEXT); CREATE TABLE files (artist_name TEXT);"
      },
      {
        "question": "How about UK?",
        "query": "SELECT count(*) FROM artist WHERE country = \"UK\"",
        "schema": "CREATE TABLE artist (artist_name TEXT, country TEXT); CREATE TABLE files (artist_name TEXT); CREATE TABLE song (country TEXT, languages TEXT, artist_name TEXT);"
      },
      {
        "question": "Among those artists, who are male?",
        "query": "SELECT artist_name FROM artist WHERE country = \"UK\" AND gender = \"Male\"",
        "schema": "CREATE TABLE artist (gender TEXT, country TEXT, artist_name TEXT); CREATE TABLE song (artist_name TEXT, country TEXT, languages TEXT); CREATE TABLE files (artist_name TEXT);"
      }
    ],
    [
      {
        "question": "Which songs have the genre to be blues?",
        "query": "SELECT song_name FROM song WHERE genre_is = \"blues\"",
        "schema": "CREATE TABLE genre (rating TEXT, g_name TEXT); CREATE TABLE song (f_id NUMBER, languages TEXT, song_name TEXT, genre_is TEXT); CREATE TABLE files (f_id NUMBER); CREATE TABLE artist (artist_name TEXT, preferred_genre TEXT);"
      },
      {
        "question": "How about folk?",
        "query": "SELECT song_name FROM song WHERE genre_is = \"folk\"",
        "schema": "CREATE TABLE files (f_id NUMBER); CREATE TABLE song (genre_is TEXT, languages TEXT, f_id NUMBER, song_name TEXT); CREATE TABLE artist (preferred_genre TEXT, artist_name TEXT); CREATE TABLE genre (rating TEXT, g_name TEXT);"
      },
      {
        "question": "What about the songs has genre to be modern OR the songs are in English?",
        "query": "SELECT song_name FROM song WHERE genre_is = \"modern\" OR languages = \"english\"",
        "schema": "CREATE TABLE files (f_id NUMBER); CREATE TABLE genre (g_name TEXT, rating TEXT); CREATE TABLE artist (preferred_genre TEXT, artist_name TEXT); CREATE TABLE song (song_name TEXT, languages TEXT, genre_is TEXT, f_id NUMBER);"
      }
    ],
    [
      {
        "question": "How many songs have a resolution below 900?",
        "query": "SELECT count(*) FROM song WHERE resolution < 900",
        "schema": "CREATE TABLE song (rating NUMBER, song_name TEXT, f_id NUMBER, resolution NUMBER); CREATE TABLE files (f_id NUMBER);"
      },
      {
        "question": "Among those songs, which ones have mp3 format, show the file size of them.",
        "query": "SELECT t1.file_size FROM files AS t1 JOIN song AS t2 ON t1.f_id = t2.f_id WHERE t1.formats = \"mp3\" AND t2.resolution < 900",
        "schema": "CREATE TABLE song (resolution NUMBER, f_id NUMBER, song_name TEXT, rating NUMBER); CREATE TABLE files (file_size TEXT, f_id NUMBER, formats TEXT);"
      },
      {
        "question": "What are the names of songs which have mp3 format and the resolution is below 1000.",
        "query": "SELECT t2.song_name FROM files AS t1 JOIN song AS t2 ON t1.f_id = t2.f_id WHERE t1.formats = \"mp3\" INTERSECT SELECT song_name FROM song WHERE resolution < 1000",
        "schema": "CREATE TABLE song (rating NUMBER, song_name TEXT, resolution NUMBER, f_id NUMBER); CREATE TABLE files (file_size TEXT, f_id NUMBER, formats TEXT);"
      }
    ],
    [
      {
        "question": "How many UK male artists?",
        "query": "SELECT artist_name FROM artist WHERE country = \"UK\" AND gender = 'Male'",
        "schema": "CREATE TABLE song (artist_name TEXT, country TEXT); CREATE TABLE files (artist_name TEXT); CREATE TABLE artist (country TEXT, artist_name TEXT, gender TEXT);"
      },
      {
        "question": "Which British artists have released English songs?",
        "query": "SELECT artist_name FROM artist WHERE country = \"UK\" INTERSECT SELECT t1.artist_name FROM artist AS t1 JOIN song AS t2 ON t1.artist_name = t2.artist_name WHERE t2.languages = \"english\"",
        "schema": "CREATE TABLE song (song_name TEXT, languages TEXT, country TEXT, artist_name TEXT, releasedate TIME); CREATE TABLE artist (gender TEXT, artist_name TEXT, country TEXT); CREATE TABLE files (artist_name TEXT);"
      }
    ],
    [
      {
        "question": "What is the maximum resolution for all the English songs?",
        "query": "SELECT max(resolution) FROM song WHERE languages = \"english\"",
        "schema": "CREATE TABLE song (f_id NUMBER, genre_is TEXT, song_name TEXT, languages TEXT, resolution NUMBER); CREATE TABLE files (f_id NUMBER, duration TEXT);"
      },
      {
        "question": "What about the average rating and resolution for songs in Bangla?",
        "query": "SELECT avg(rating) , avg(resolution) FROM song WHERE languages = \"bangla\"",
        "schema": "CREATE TABLE files (duration TEXT, f_id NUMBER); CREATE TABLE song (resolution NUMBER, rating NUMBER, genre_is TEXT, f_id NUMBER, languages TEXT, song_name TEXT);"
      }
    ],
    [
      {
        "question": "List all the durations of the songs.",
        "query": "SELECT duration FROM files",
        "schema": "CREATE TABLE files (f_id NUMBER, duration TEXT); CREATE TABLE song (f_id NUMBER, song_name TEXT);"
      },
      {
        "question": "How many are there when the duration is only 4 mins?",
        "query": "SELECT count(*) FROM files WHERE duration LIKE \"4:%\"",
        "schema": "CREATE TABLE files (duration TEXT, formats TEXT, f_id NUMBER); CREATE TABLE song (song_name TEXT, f_id NUMBER);"
      },
      {
        "question": "What about that of 3 mins?",
        "query": "SELECT count(*) FROM files WHERE duration LIKE \"3:%\"",
        "schema": "CREATE TABLE files (duration TEXT, f_id NUMBER, formats TEXT); CREATE TABLE song (f_id NUMBER, song_name TEXT);"
      },
      {
        "question": "How about the maximum and minimum resolutions of these songs?",
        "query": "SELECT max(t2.resolution) , min(t2.resolution) FROM files AS t1 JOIN song AS t2 ON t1.f_id = t2.f_id WHERE t1.duration LIKE \"3:%\"",
        "schema": "CREATE TABLE files (duration TEXT, f_id NUMBER, formats TEXT); CREATE TABLE song (resolution NUMBER, f_id NUMBER, song_name TEXT);"
      }
    ],
    [
      {
        "question": "For each language, how many songs are there?",
        "query": "SELECT languages,count(*) FROM song GROUP BY languages",
        "schema": "CREATE TABLE song (f_id NUMBER, languages TEXT, song_name TEXT, country TEXT); CREATE TABLE files (f_id NUMBER);"
      },
      {
        "question": "For each language group in order, what is the average duration value of the songs in the group?",
        "query": "SELECT avg(t1.duration) FROM files AS t1 JOIN song AS t2 ON t1.f_id = t2.f_id GROUP BY t2.languages ORDER BY t2.languages",
        "schema": "CREATE TABLE files (f_id NUMBER, duration TEXT); CREATE TABLE song (song_name TEXT, country TEXT, f_id NUMBER, languages TEXT);"
      },
      {
        "question": "How about the maximum duration and resolution?",
        "query": "SELECT max(t1.duration) , max(t2.resolution) , t2.languages FROM files AS t1 JOIN song AS t2 ON t1.f_id = t2.f_id GROUP BY t2.languages ORDER BY t2.languages",
        "schema": "CREATE TABLE song (song_name TEXT, country TEXT, resolution NUMBER, languages TEXT, f_id NUMBER); CREATE TABLE files (duration TEXT, f_id NUMBER);"
      }
    ],
    [
      {
        "question": "How many genres are there in total?",
        "query": "SELECT count(DISTINCT genre_is) FROM song",
        "schema": "CREATE TABLE genre (most_popular_in TEXT, g_name TEXT, rating TEXT); CREATE TABLE artist (artist_name TEXT, preferred_genre TEXT); CREATE TABLE song (genre_is TEXT, f_id NUMBER); CREATE TABLE files (f_id NUMBER);"
      },
      {
        "question": "How many songs for each of them, show the result in the order of genre?",
        "query": "SELECT genre_is,count(*) FROM song GROUP BY genre_is",
        "schema": "CREATE TABLE genre (most_popular_in TEXT, g_name TEXT, rating TEXT); CREATE TABLE files (f_id NUMBER); CREATE TABLE song (rating NUMBER, genre_is TEXT, song_name TEXT, f_id NUMBER); CREATE TABLE artist (artist_name TEXT, preferred_genre TEXT);"
      },
      {
        "question": "What are the shortest duration and lowest rating for each group?",
        "query": "SELECT min(t1.duration) , min(t2.rating) , t2.genre_is FROM files AS t1 JOIN song AS t2 ON t1.f_id = t2.f_id GROUP BY t2.genre_is ORDER BY t2.genre_is",
        "schema": "CREATE TABLE song (song_name TEXT, f_id NUMBER, genre_is TEXT, rating NUMBER); CREATE TABLE files (duration TEXT, f_id NUMBER); CREATE TABLE genre (rating TEXT, g_name TEXT, most_popular_in TEXT); CREATE TABLE artist (artist_name TEXT, preferred_genre TEXT);"
      }
    ],
    [
      {
        "question": "List the number of songs for each artist.",
        "query": "SELECT t1.artist_name , count(*) FROM artist AS t1 JOIN song AS t2 ON t1.artist_name = t2.artist_name GROUP BY t2.artist_name",
        "schema": "CREATE TABLE song (f_id NUMBER, artist_name TEXT, song_name TEXT); CREATE TABLE artist (artist_name TEXT); CREATE TABLE files (artist_name TEXT, f_id NUMBER);"
      },
      {
        "question": "How many songs does Farida has?",
        "query": "SELECT t1.artist_name , count(*) FROM artist AS t1 JOIN song AS t2 ON t1.artist_name = t2.artist_name GROUP BY t2.artist_name HAVING t1.artist_name = 'Farida'",
        "schema": "CREATE TABLE song (f_id NUMBER, artist_name TEXT, song_name TEXT); CREATE TABLE files (f_id NUMBER, artist_name TEXT); CREATE TABLE artist (artist_name TEXT);"
      },
      {
        "question": "How about Prity?",
        "query": "SELECT t1.artist_name , count(*) FROM artist AS t1 JOIN song AS t2 ON t1.artist_name = t2.artist_name GROUP BY t2.artist_name HAVING t1.artist_name = 'Prity'",
        "schema": "CREATE TABLE artist (gender TEXT, artist_name TEXT); CREATE TABLE files (artist_name TEXT, f_id NUMBER); CREATE TABLE song (song_name TEXT, f_id NUMBER, artist_name TEXT);"
      },
      {
        "question": "What about the people who has at least an English song?",
        "query": "SELECT t1.artist_name , count(*) FROM artist AS t1 JOIN song AS t2 ON t1.artist_name = t2.artist_name WHERE t2.languages = \"english\" GROUP BY t2.artist_name HAVING count(*) >= 1",
        "schema": "CREATE TABLE song (languages TEXT, song_name TEXT, f_id NUMBER, artist_name TEXT); CREATE TABLE files (artist_name TEXT, f_id NUMBER); CREATE TABLE artist (artist_name TEXT, gender TEXT, country TEXT);"
      }
    ],
    [
      {
        "question": "Which songs have a resolution to be lower than 800?",
        "query": "SELECT song_name FROM song WHERE resolution < 800",
        "schema": "CREATE TABLE song (song_name TEXT, artist_name TEXT, resolution NUMBER, f_id NUMBER, rating NUMBER); CREATE TABLE files (f_id NUMBER, duration TEXT);"
      },
      {
        "question": "List artist names and the countries of these songs?",
        "query": "SELECT t1.artist_name , t1.country FROM artist AS t1 JOIN song AS t2 ON t1.artist_name = t2.artist_name WHERE t2.resolution < 800",
        "schema": "CREATE TABLE song (languages TEXT, song_name TEXT, resolution NUMBER, artist_name TEXT, country TEXT, f_id NUMBER, rating NUMBER); CREATE TABLE artist (country TEXT, artist_name TEXT); CREATE TABLE files (f_id NUMBER, artist_name TEXT, duration TEXT);"
      },
      {
        "question": "What about the artist names and countries who have at least one song of resolution above 900?",
        "query": "SELECT t1.artist_name , t1.country FROM artist AS t1 JOIN song AS t2 ON t1.artist_name = t2.artist_name WHERE t2.resolution > 900 GROUP BY t2.artist_name HAVING count(*) >= 1",
        "schema": "CREATE TABLE song (rating NUMBER, song_name TEXT, artist_name TEXT, country TEXT, languages TEXT, f_id NUMBER, resolution NUMBER); CREATE TABLE files (f_id NUMBER, artist_name TEXT, duration TEXT); CREATE TABLE artist (artist_name TEXT, country TEXT);"
      }
    ],
    [
      {
        "question": "Order the artist names by the number of songs.",
        "query": "SELECT t1.artist_name FROM artist AS t1 JOIN song AS t2 ON t1.artist_name = t2.artist_name GROUP BY t2.artist_name ORDER BY count(*)",
        "schema": "CREATE TABLE files (f_id NUMBER, artist_name TEXT); CREATE TABLE artist (artist_name TEXT); CREATE TABLE song (f_id NUMBER, song_name TEXT, artist_name TEXT);"
      },
      {
        "question": "How about the names and the number of songs for the top one artist?",
        "query": "SELECT t1.artist_name , count(*) FROM artist AS t1 JOIN song AS t2 ON t1.artist_name = t2.artist_name GROUP BY t2.artist_name ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE artist (artist_name TEXT); CREATE TABLE song (song_name TEXT, f_id NUMBER, artist_name TEXT); CREATE TABLE files (f_id NUMBER, artist_name TEXT);"
      },
      {
        "question": "How about top three?",
        "query": "SELECT t1.artist_name , count(*) FROM artist AS t1 JOIN song AS t2 ON t1.artist_name = t2.artist_name GROUP BY t2.artist_name ORDER BY count(*) DESC LIMIT 3",
        "schema": "CREATE TABLE song (artist_name TEXT, languages TEXT, song_name TEXT, f_id NUMBER); CREATE TABLE artist (artist_name TEXT); CREATE TABLE files (artist_name TEXT, f_id NUMBER);"
      }
    ],
    [
      {
        "question": "For each artist, count how many songs.",
        "query": "SELECT t1.artist_name, count(*) FROM artist AS t1 JOIN song AS t2 ON t1.artist_name = t2.artist_name GROUP BY t1.artist_name",
        "schema": "CREATE TABLE song (artist_name TEXT, song_name TEXT, f_id NUMBER); CREATE TABLE artist (gender TEXT, artist_name TEXT); CREATE TABLE files (f_id NUMBER, artist_name TEXT);"
      },
      {
        "question": "What is the country of origin for the artist who made the least number of songs?",
        "query": "SELECT t1.country FROM artist AS t1 JOIN song AS t2 ON t1.artist_name = t2.artist_name GROUP BY t2.artist_name ORDER BY count(*) LIMIT 1",
        "schema": "CREATE TABLE artist (artist_name TEXT, country TEXT, gender TEXT); CREATE TABLE song (artist_name TEXT, languages TEXT, song_name TEXT, f_id NUMBER, country TEXT); CREATE TABLE files (f_id NUMBER, artist_name TEXT);"
      }
    ],
    [
      {
        "question": "What are the minimum, maximum and average values of the ratings?",
        "query": "SELECT min(rating), max(rating), avg(rating) FROM song",
        "schema": "CREATE TABLE genre (g_name TEXT, rating TEXT); CREATE TABLE files (duration TEXT, f_id NUMBER); CREATE TABLE song (rating NUMBER, f_id NUMBER);"
      },
      {
        "question": "Which songs have a higher rating than the average, list the song names.",
        "query": "SELECT song_name FROM song WHERE rating > (SELECT avg(rating) FROM song)",
        "schema": "CREATE TABLE song (f_id NUMBER, rating NUMBER, song_name TEXT); CREATE TABLE files (f_id NUMBER, duration TEXT); CREATE TABLE genre (g_name TEXT, rating TEXT);"
      },
      {
        "question": "What about the names which rating is higher than the rating of all songs in English?",
        "query": "SELECT song_name FROM song WHERE rating > (SELECT min(rating) FROM song WHERE languages = 'english')",
        "schema": "CREATE TABLE genre (g_name TEXT, rating TEXT); CREATE TABLE files (f_id NUMBER, duration TEXT); CREATE TABLE song (song_name TEXT, f_id NUMBER, rating NUMBER, languages TEXT);"
      },
      {
        "question": "How about lower?",
        "query": "SELECT song_name FROM song WHERE rating < (SELECT min(rating) FROM song WHERE languages = 'english')",
        "schema": "CREATE TABLE genre (g_name TEXT, rating TEXT); CREATE TABLE files (duration TEXT, f_id NUMBER); CREATE TABLE song (song_name TEXT, rating NUMBER, f_id NUMBER, languages TEXT);"
      }
    ],
    [
      {
        "question": "What are the minimum, maximum and average values of the ratings?",
        "query": "SELECT min(rating), max(rating), avg(rating) FROM song",
        "schema": "CREATE TABLE files (f_id NUMBER, duration TEXT); CREATE TABLE genre (rating TEXT, g_name TEXT); CREATE TABLE song (rating NUMBER, f_id NUMBER);"
      },
      {
        "question": "Which songs have a higher rating than the average, list the song ids.",
        "query": "SELECT f_id FROM song WHERE rating > (SELECT avg(rating) FROM song)",
        "schema": "CREATE TABLE files (duration TEXT, f_id NUMBER); CREATE TABLE song (rating NUMBER, song_name TEXT, f_id NUMBER); CREATE TABLE genre (g_name TEXT, rating TEXT);"
      },
      {
        "question": "What about the song ids whose resolution is higher than the resolution of any songs with rating lower than 8?",
        "query": "SELECT f_id FROM song WHERE resolution > (SELECT max(resolution) FROM song WHERE rating < 8)",
        "schema": "CREATE TABLE genre (rating TEXT, g_name TEXT); CREATE TABLE song (resolution NUMBER, song_name TEXT, rating NUMBER, f_id NUMBER); CREATE TABLE files (duration TEXT, f_id NUMBER);"
      }
    ],
    [
      {
        "question": "What are the minimum, maximum and average values of the resolution?",
        "query": "SELECT min(resolution), max(resolution), avg(resolution) FROM song",
        "schema": "CREATE TABLE song (f_id NUMBER, resolution NUMBER); CREATE TABLE files (duration TEXT, f_id NUMBER);"
      },
      {
        "question": "Which songs have a higher value than the average, list the song ids.",
        "query": "SELECT f_id FROM song WHERE resolution > (SELECT avg(resolution) FROM song)",
        "schema": "CREATE TABLE song (f_id NUMBER, song_name TEXT, rating NUMBER, resolution NUMBER); CREATE TABLE files (f_id NUMBER, duration TEXT);"
      },
      {
        "question": "How about the ones that is higher than the average resolution value for the modern genre songs?",
        "query": "SELECT f_id FROM song WHERE resolution > (SELECT avg(resolution) FROM song WHERE genre_is = \"modern\")",
        "schema": "CREATE TABLE song (f_id NUMBER, rating NUMBER, song_name TEXT, genre_is TEXT, resolution NUMBER); CREATE TABLE files (f_id NUMBER, duration TEXT); CREATE TABLE genre (g_name TEXT);"
      }
    ],
    [
      {
        "question": "For each artist, count how many songs.",
        "query": "SELECT t1.artist_name, count(*) FROM artist AS t1 JOIN song AS t2 ON t1.artist_name = t2.artist_name GROUP BY t2.artist_name",
        "schema": "CREATE TABLE files (f_id NUMBER, artist_name TEXT); CREATE TABLE song (song_name TEXT, artist_name TEXT, f_id NUMBER); CREATE TABLE artist (artist_name TEXT);"
      },
      {
        "question": "Among those, only count the Bangla songs.",
        "query": "SELECT t1.artist_name, count(*) FROM artist AS t1 JOIN song AS t2 ON t1.artist_name = t2.artist_name WHERE t2.languages = \"bangla\" GROUP BY t2.artist_name",
        "schema": "CREATE TABLE song (f_id NUMBER, song_name TEXT, artist_name TEXT, languages TEXT); CREATE TABLE artist (artist_name TEXT, country TEXT); CREATE TABLE files (f_id NUMBER, artist_name TEXT);"
      },
      {
        "question": "Which is the top one artist who has the most counts?",
        "query": "SELECT t1.artist_name FROM artist AS t1 JOIN song AS t2 ON t1.artist_name = t2.artist_name WHERE t2.languages = \"bangla\" GROUP BY t2.artist_name ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE artist (country TEXT, artist_name TEXT); CREATE TABLE song (f_id NUMBER, artist_name TEXT, song_name TEXT, languages TEXT); CREATE TABLE files (artist_name TEXT, f_id NUMBER);"
      },
      {
        "question": "How about top 3?",
        "query": "SELECT t1.artist_name FROM artist AS t1 JOIN song AS t2 ON t1.artist_name = t2.artist_name WHERE t2.languages = \"bangla\" GROUP BY t2.artist_name ORDER BY count(*) DESC LIMIT 3",
        "schema": "CREATE TABLE files (artist_name TEXT, f_id NUMBER); CREATE TABLE song (song_name TEXT, f_id NUMBER, languages TEXT, artist_name TEXT); CREATE TABLE artist (artist_name TEXT, country TEXT);"
      }
    ],
    [
      {
        "question": "What is the average rating of the Bangla songs?",
        "query": "SELECT avg(rating) FROM song WHERE languages = \"bangla\"",
        "schema": "CREATE TABLE files (f_id NUMBER); CREATE TABLE genre (g_name TEXT, rating TEXT); CREATE TABLE song (song_name TEXT, country TEXT, f_id NUMBER, languages TEXT, rating NUMBER, genre_is TEXT);"
      },
      {
        "question": "How about English songs?",
        "query": "SELECT avg(rating) FROM song WHERE languages = \"english\"",
        "schema": "CREATE TABLE files (f_id NUMBER); CREATE TABLE genre (g_name TEXT, rating TEXT); CREATE TABLE song (f_id NUMBER, country TEXT, song_name TEXT, rating NUMBER, languages TEXT, genre_is TEXT);"
      },
      {
        "question": "How many of them in total?",
        "query": "SELECT count(*) FROM song WHERE languages = \"english\"",
        "schema": "CREATE TABLE genre (rating TEXT, g_name TEXT); CREATE TABLE song (song_name TEXT, country TEXT, genre_is TEXT, rating NUMBER, f_id NUMBER, languages TEXT); CREATE TABLE files (f_id NUMBER);"
      },
      {
        "question": "What are the id, genre and artist name of these songs in the order of rating?",
        "query": "SELECT f_id , genre_is , artist_name FROM song WHERE languages = \"english\" ORDER BY rating",
        "schema": "CREATE TABLE files (artist_name TEXT, f_id NUMBER); CREATE TABLE song (artist_name TEXT, country TEXT, rating NUMBER, genre_is TEXT, languages TEXT, song_name TEXT, f_id NUMBER); CREATE TABLE artist (artist_name TEXT, preferred_genre TEXT); CREATE TABLE genre (rating TEXT, g_name TEXT);"
      }
    ],
    [
      {
        "question": "What is the average duration of the blues songs?",
        "query": "SELECT avg(t1.duration) FROM files AS t1 JOIN song AS t2 ON t1.f_id = t2.f_id WHERE t2.genre_is = \"blues\"",
        "schema": "CREATE TABLE genre (g_name TEXT, rating TEXT); CREATE TABLE files (duration TEXT, f_id NUMBER); CREATE TABLE song (rating NUMBER, song_name TEXT, genre_is TEXT, f_id NUMBER);"
      },
      {
        "question": "How about that of pop songs?",
        "query": "SELECT avg(t1.duration) FROM files AS t1 JOIN song AS t2 ON t1.f_id = t2.f_id WHERE t2.genre_is = \"pop\"",
        "schema": "CREATE TABLE genre (g_name TEXT, rating TEXT); CREATE TABLE files (duration TEXT, f_id NUMBER); CREATE TABLE song (f_id NUMBER, genre_is TEXT, rating NUMBER, song_name TEXT);"
      },
      {
        "question": "What about the duration, file size and format of those songs, order the results by title?",
        "query": "SELECT t1.duration , t1.file_size , t1.formats FROM files AS t1 JOIN song AS t2 ON t1.f_id = t2.f_id WHERE t2.genre_is = \"pop\" ORDER BY t2.song_name",
        "schema": "CREATE TABLE song (genre_is TEXT, f_id NUMBER, song_name TEXT, rating NUMBER); CREATE TABLE files (duration TEXT, f_id NUMBER, formats TEXT, file_size TEXT); CREATE TABLE genre (g_name TEXT, rating TEXT);"
      }
    ],
    [
      {
        "question": "How many artists have Bangla songs?",
        "query": "SELECT count(DISTINCT artist_name) FROM song WHERE languages = 'bangla'",
        "schema": "CREATE TABLE files (f_id NUMBER, artist_name TEXT); CREATE TABLE artist (artist_name TEXT, country TEXT); CREATE TABLE song (country TEXT, song_name TEXT, f_id NUMBER, artist_name TEXT, languages TEXT);"
      },
      {
        "question": "How about English?",
        "query": "SELECT count(DISTINCT artist_name) FROM song WHERE languages = 'bangla'",
        "schema": "CREATE TABLE files (f_id NUMBER, artist_name TEXT); CREATE TABLE song (languages TEXT, country TEXT, f_id NUMBER, song_name TEXT, artist_name TEXT); CREATE TABLE artist (country TEXT, artist_name TEXT);"
      },
      {
        "question": "What are the names of them?",
        "query": "SELECT artist_name FROM song WHERE languages = \"english\"",
        "schema": "CREATE TABLE artist (country TEXT, artist_name TEXT); CREATE TABLE files (f_id NUMBER, artist_name TEXT); CREATE TABLE song (song_name TEXT, languages TEXT, f_id NUMBER, country TEXT, artist_name TEXT);"
      },
      {
        "question": "Which of them have never received rating higher than 8.",
        "query": "SELECT DISTINCT artist_name FROM song WHERE languages = \"english\" EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating > 8",
        "schema": "CREATE TABLE artist (country TEXT, artist_name TEXT); CREATE TABLE files (artist_name TEXT, f_id NUMBER); CREATE TABLE song (languages TEXT, song_name TEXT, f_id NUMBER, artist_name TEXT, rating NUMBER, country TEXT);"
      }
    ]
  ],
  "machine_repair": [
    [
      {
        "question": "How many technicians are there?",
        "query": "SELECT count(*) FROM technician",
        "schema": "CREATE TABLE technician (technician_id NUMBER, Team TEXT, Name TEXT); CREATE TABLE repair_assignment (technician_id NUMBER, Machine_ID NUMBER, repair_ID NUMBER); CREATE TABLE machine (Machine_ID NUMBER); CREATE TABLE repair (repair_ID NUMBER);"
      },
      {
        "question": "Show me their names.",
        "query": "SELECT name FROM technician",
        "schema": "CREATE TABLE repair_assignment (technician_id NUMBER, repair_ID NUMBER, Machine_ID NUMBER); CREATE TABLE repair (repair_ID NUMBER, name TEXT); CREATE TABLE technician (Team TEXT, technician_id NUMBER, Name TEXT); CREATE TABLE machine (Machine_ID NUMBER);"
      },
      {
        "question": "What about those that are either 36 or 37 years old?",
        "query": "SELECT name FROM technician WHERE age = 36 OR age = 37",
        "schema": "CREATE TABLE technician (Starting_Year NUMBER, Age NUMBER, technician_id NUMBER, Name TEXT, Team TEXT); CREATE TABLE repair (name TEXT, repair_ID NUMBER); CREATE TABLE machine (Machine_ID NUMBER); CREATE TABLE repair_assignment (Machine_ID NUMBER, technician_id NUMBER, repair_ID NUMBER);"
      }
    ],
    [
      {
        "question": "How many technicians are there?",
        "query": "SELECT count(*) FROM technician",
        "schema": "CREATE TABLE repair (repair_ID NUMBER); CREATE TABLE technician (technician_id NUMBER, Team TEXT, Name TEXT); CREATE TABLE machine (Machine_ID NUMBER); CREATE TABLE repair_assignment (repair_ID NUMBER, technician_id NUMBER, Machine_ID NUMBER);"
      },
      {
        "question": "Show me the name of the oldest one.",
        "query": "SELECT name FROM technician ORDER BY age DESC LIMIT 1",
        "schema": "CREATE TABLE repair_assignment (repair_ID NUMBER, technician_id NUMBER, Machine_ID NUMBER); CREATE TABLE technician (Name TEXT, Starting_Year NUMBER, Team TEXT, Age NUMBER, technician_id NUMBER); CREATE TABLE machine (Machine_ID NUMBER); CREATE TABLE repair (repair_ID NUMBER, name TEXT);"
      },
      {
        "question": "What about his starting year?",
        "query": "SELECT starting_year FROM technician ORDER BY age DESC LIMIT 1",
        "schema": "CREATE TABLE repair (name TEXT, repair_ID NUMBER); CREATE TABLE technician (Name TEXT, Team TEXT, technician_id NUMBER, Age NUMBER, Starting_Year NUMBER); CREATE TABLE machine (Machine_ID NUMBER); CREATE TABLE repair_assignment (Machine_ID NUMBER, technician_id NUMBER, repair_ID NUMBER);"
      }
    ],
    [
      {
        "question": "How many technicians are there?",
        "query": "SELECT count(*) FROM technician",
        "schema": "CREATE TABLE technician (Name TEXT, technician_id NUMBER, Team TEXT); CREATE TABLE machine (Machine_ID NUMBER); CREATE TABLE repair_assignment (technician_id NUMBER, Machine_ID NUMBER, repair_ID NUMBER); CREATE TABLE repair (repair_ID NUMBER);"
      },
      {
        "question": "What about in terms of teams?",
        "query": "SELECT team, count(*) FROM technician GROUP BY team",
        "schema": "CREATE TABLE repair (repair_ID NUMBER); CREATE TABLE repair_assignment (Machine_ID NUMBER, technician_id NUMBER, repair_ID NUMBER); CREATE TABLE technician (technician_id NUMBER, Team TEXT, Name TEXT); CREATE TABLE machine (Machine_ID NUMBER, Team TEXT);"
      },
      {
        "question": "Show me the team with the most of them.",
        "query": "SELECT team FROM technician GROUP BY team ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE repair (repair_ID NUMBER); CREATE TABLE repair_assignment (Machine_ID NUMBER, repair_ID NUMBER, technician_id NUMBER); CREATE TABLE machine (Machine_ID NUMBER, Team TEXT); CREATE TABLE technician (Team TEXT, technician_id NUMBER, Name TEXT);"
      }
    ],
    [
      {
        "question": "How many technicians are there?",
        "query": "SELECT count(*) FROM technician",
        "schema": "CREATE TABLE repair_assignment (Machine_ID NUMBER, technician_id NUMBER, repair_ID NUMBER); CREATE TABLE repair (repair_ID NUMBER); CREATE TABLE technician (technician_id NUMBER, Team TEXT, Name TEXT); CREATE TABLE machine (Machine_ID NUMBER);"
      },
      {
        "question": "What about in terms of teams?",
        "query": "SELECT team, count(*) FROM technician GROUP BY team",
        "schema": "CREATE TABLE technician (Team TEXT, technician_id NUMBER, Name TEXT); CREATE TABLE machine (Machine_ID NUMBER, Team TEXT); CREATE TABLE repair (repair_ID NUMBER); CREATE TABLE repair_assignment (repair_ID NUMBER, Machine_ID NUMBER, technician_id NUMBER);"
      },
      {
        "question": "Show me the teams that have at least two.",
        "query": "SELECT team FROM technician GROUP BY team HAVING count(*) >= 2",
        "schema": "CREATE TABLE machine (Machine_ID NUMBER, Team TEXT); CREATE TABLE repair_assignment (repair_ID NUMBER, technician_id NUMBER, Machine_ID NUMBER); CREATE TABLE technician (Name TEXT, Team TEXT, technician_id NUMBER); CREATE TABLE repair (repair_ID NUMBER);"
      }
    ],
    [
      {
        "question": "How many repair assignments are there in file?",
        "query": "SELECT count(*) FROM repair_assignment",
        "schema": "CREATE TABLE technician (Name TEXT, technician_id NUMBER); CREATE TABLE repair_assignment (repair_ID NUMBER, technician_id NUMBER, Machine_ID NUMBER); CREATE TABLE machine (Machine_ID NUMBER); CREATE TABLE repair (repair_ID NUMBER);"
      },
      {
        "question": "Show me the name of technicians assigned to those repairs.",
        "query": "SELECT t2.name FROM repair_assignment AS t1 JOIN technician AS t2 ON t1.technician_id = t2.technician_id",
        "schema": "CREATE TABLE technician (Name TEXT, technician_id NUMBER); CREATE TABLE repair (repair_ID NUMBER, name TEXT); CREATE TABLE repair_assignment (repair_ID NUMBER, technician_id NUMBER, Machine_ID NUMBER); CREATE TABLE machine (Machine_ID NUMBER);"
      },
      {
        "question": "What about the series of machines they repaired?",
        "query": "SELECT t3.name , t2.machine_series FROM repair_assignment AS t1 JOIN machine AS t2 ON t1.machine_id = t2.machine_id JOIN technician AS t3 ON t1.technician_id = t3.technician_id",
        "schema": "CREATE TABLE repair_assignment (Machine_ID NUMBER, technician_id NUMBER, repair_ID NUMBER); CREATE TABLE repair (repair_ID NUMBER, name TEXT); CREATE TABLE technician (technician_id NUMBER, Name TEXT); CREATE TABLE machine (Machine_ID NUMBER, Machine_series TEXT);"
      }
    ],
    [
      {
        "question": "How many repair assignments are there in file?",
        "query": "SELECT count(*) FROM repair_assignment",
        "schema": "CREATE TABLE technician (technician_id NUMBER); CREATE TABLE repair_assignment (technician_id NUMBER, Machine_ID NUMBER, repair_ID NUMBER); CREATE TABLE machine (Machine_ID NUMBER); CREATE TABLE repair (repair_ID NUMBER);"
      },
      {
        "question": "Show me the name of technicians assigned to those repairs.",
        "query": "SELECT t2.name FROM repair_assignment AS t1 JOIN technician AS t2 ON t1.technician_id = t2.technician_id",
        "schema": "CREATE TABLE machine (Machine_ID NUMBER); CREATE TABLE repair_assignment (Machine_ID NUMBER, repair_ID NUMBER, technician_id NUMBER); CREATE TABLE repair (repair_ID NUMBER, name TEXT); CREATE TABLE technician (technician_id NUMBER, Name TEXT);"
      },
      {
        "question": "What about the series of machines they repaired?",
        "query": "SELECT t3.name , t2.machine_series FROM repair_assignment AS t1 JOIN machine AS t2 ON t1.machine_id = t2.machine_id JOIN technician AS t3 ON t1.technician_id = t3.technician_id",
        "schema": "CREATE TABLE repair_assignment (Machine_ID NUMBER, repair_ID NUMBER, technician_id NUMBER); CREATE TABLE repair (repair_ID NUMBER, name TEXT); CREATE TABLE machine (Machine_series TEXT, Machine_ID NUMBER); CREATE TABLE technician (Name TEXT, technician_id NUMBER);"
      },
      {
        "question": "Show me those machines' quality ranks.",
        "query": "SELECT t3.name , t2.machine_series, t2.quality_rank FROM repair_assignment AS t1 JOIN machine AS t2 ON t1.machine_id = t2.machine_id JOIN technician AS t3 ON t1.technician_id = t3.technician_id",
        "schema": "CREATE TABLE repair_assignment (Machine_ID NUMBER, technician_id NUMBER, repair_ID NUMBER); CREATE TABLE technician (Name TEXT, technician_id NUMBER); CREATE TABLE machine (quality_rank NUMBER, Machine_ID NUMBER, Machine_series TEXT); CREATE TABLE repair (name TEXT, repair_ID NUMBER);"
      },
      {
        "question": "Show them in ascending order of quality rank.",
        "query": "SELECT t3.name , t2.machine_series, t2.quality_rank FROM repair_assignment AS t1 JOIN machine AS t2 ON t1.machine_id = t2.machine_id JOIN technician AS t3 ON t1.technician_id = t3.technician_id ORDER BY t2.quality_rank",
        "schema": "CREATE TABLE repair (repair_ID NUMBER, name TEXT); CREATE TABLE repair_assignment (repair_ID NUMBER, technician_id NUMBER, Machine_ID NUMBER); CREATE TABLE machine (quality_rank NUMBER, Machine_series TEXT, Machine_ID NUMBER); CREATE TABLE technician (technician_id NUMBER, Name TEXT);"
      },
      {
        "question": "Only show me the names.",
        "query": "SELECT t3.name FROM repair_assignment AS t1 JOIN machine AS t2 ON t1.machine_id = t2.machine_id JOIN technician AS t3 ON t1.technician_id = t3.technician_id ORDER BY t2.quality_rank",
        "schema": "CREATE TABLE repair (repair_ID NUMBER, name TEXT); CREATE TABLE technician (Name TEXT, technician_id NUMBER); CREATE TABLE repair_assignment (technician_id NUMBER, repair_ID NUMBER, Machine_ID NUMBER); CREATE TABLE machine (quality_rank NUMBER, Machine_ID NUMBER, Machine_series TEXT);"
      }
    ],
    [
      {
        "question": "How many repair assignments are there in file?",
        "query": "SELECT count(*) FROM repair_assignment",
        "schema": "CREATE TABLE machine (Machine_ID NUMBER); CREATE TABLE repair_assignment (Machine_ID NUMBER, repair_ID NUMBER, technician_id NUMBER); CREATE TABLE technician (technician_id NUMBER); CREATE TABLE repair (repair_ID NUMBER);"
      },
      {
        "question": "Show me the name of technicians assigned to those repairs.",
        "query": "SELECT t2.name FROM repair_assignment AS t1 JOIN technician AS t2 ON t1.technician_id = t2.technician_id",
        "schema": "CREATE TABLE repair_assignment (technician_id NUMBER, repair_ID NUMBER, Machine_ID NUMBER); CREATE TABLE repair (name TEXT, repair_ID NUMBER); CREATE TABLE technician (technician_id NUMBER, Name TEXT); CREATE TABLE machine (Machine_ID NUMBER);"
      },
      {
        "question": "What about the series of machines they repaired?",
        "query": "SELECT t3.name , t2.machine_series FROM repair_assignment AS t1 JOIN machine AS t2 ON t1.machine_id = t2.machine_id JOIN technician AS t3 ON t1.technician_id = t3.technician_id",
        "schema": "CREATE TABLE machine (Machine_ID NUMBER, Machine_series TEXT); CREATE TABLE repair_assignment (technician_id NUMBER, repair_ID NUMBER, Machine_ID NUMBER); CREATE TABLE repair (repair_ID NUMBER, name TEXT); CREATE TABLE technician (Name TEXT, technician_id NUMBER);"
      },
      {
        "question": "Show me those with machine's value points higher than 70.",
        "query": "SELECT t3.name, t2.machine_series FROM repair_assignment AS t1 JOIN machine AS t2 ON t1.machine_id = t2.machine_id JOIN technician AS t3 ON t1.technician_id = t3.technician_id WHERE t2.value_points > 70",
        "schema": "CREATE TABLE repair_assignment (technician_id NUMBER, repair_ID NUMBER, Machine_ID NUMBER); CREATE TABLE technician (technician_id NUMBER, Name TEXT); CREATE TABLE repair (name TEXT, repair_ID NUMBER); CREATE TABLE machine (Machine_series TEXT, Machine_ID NUMBER, value_points NUMBER);"
      },
      {
        "question": "Only show me the names.",
        "query": "SELECT t3.name FROM repair_assignment AS t1 JOIN machine AS t2 ON t1.machine_id = t2.machine_id JOIN technician AS t3 ON t1.technician_id = t3.technician_id WHERE t2.value_points > 70",
        "schema": "CREATE TABLE repair_assignment (Machine_ID NUMBER, technician_id NUMBER, repair_ID NUMBER); CREATE TABLE repair (repair_ID NUMBER, name TEXT); CREATE TABLE machine (Machine_ID NUMBER, Machine_series TEXT, value_points NUMBER); CREATE TABLE technician (technician_id NUMBER, Name TEXT);"
      }
    ],
    [
      {
        "question": "How many repair assignments are there in file?",
        "query": "SELECT count(*) FROM repair_assignment",
        "schema": "CREATE TABLE technician (technician_id NUMBER, Team TEXT, Name TEXT); CREATE TABLE repair_assignment (technician_id NUMBER, repair_ID NUMBER, Machine_ID NUMBER); CREATE TABLE repair (repair_ID NUMBER); CREATE TABLE machine (Machine_ID NUMBER);"
      },
      {
        "question": "What about in terms of technicians?",
        "query": "SELECT technician_id, count(*) FROM repair_assignment GROUP BY technician_id",
        "schema": "CREATE TABLE repair_assignment (technician_id NUMBER, Machine_ID NUMBER, repair_ID NUMBER); CREATE TABLE repair (repair_ID NUMBER); CREATE TABLE machine (Machine_ID NUMBER); CREATE TABLE technician (Team TEXT, technician_id NUMBER, Name TEXT);"
      },
      {
        "question": "Show me their names instead of ids.",
        "query": "SELECT t2.name , count(*) FROM repair_assignment AS t1 JOIN technician AS t2 ON t1.technician_id = t2.technician_id GROUP BY t2.name",
        "schema": "CREATE TABLE technician (Team TEXT, technician_id NUMBER, Name TEXT); CREATE TABLE machine (Machine_ID NUMBER); CREATE TABLE repair (name TEXT, repair_ID NUMBER); CREATE TABLE repair_assignment (repair_ID NUMBER, technician_id NUMBER, Machine_ID NUMBER);"
      }
    ],
    [
      {
        "question": "How many repair assignments are there in file?",
        "query": "SELECT count(*) FROM repair_assignment",
        "schema": "CREATE TABLE repair_assignment (technician_id NUMBER, Machine_ID NUMBER, repair_ID NUMBER); CREATE TABLE technician (technician_id NUMBER, Team TEXT); CREATE TABLE repair (repair_ID NUMBER); CREATE TABLE machine (Machine_ID NUMBER);"
      },
      {
        "question": "Show me their names.",
        "query": "SELECT technician_id FROM repair_assignment",
        "schema": "CREATE TABLE repair_assignment (technician_id NUMBER, Machine_ID NUMBER, repair_ID NUMBER); CREATE TABLE technician (Team TEXT, Name TEXT, technician_id NUMBER); CREATE TABLE repair (name TEXT, repair_ID NUMBER); CREATE TABLE machine (Machine_ID NUMBER);"
      },
      {
        "question": "What about the technicians in file who are not one of those?",
        "query": "SELECT technician_id FROM technician WHERE technician_id NOT IN (SELECT technician_id FROM repair_assignment)",
        "schema": "CREATE TABLE machine (Machine_ID NUMBER); CREATE TABLE technician (Name TEXT, Team TEXT, technician_id NUMBER); CREATE TABLE repair (repair_ID NUMBER, name TEXT); CREATE TABLE repair_assignment (Machine_ID NUMBER, technician_id NUMBER, repair_ID NUMBER);"
      },
      {
        "question": "Show me their names.",
        "query": "SELECT name FROM technician WHERE technician_id NOT IN (SELECT technician_id FROM repair_assignment)",
        "schema": "CREATE TABLE technician (technician_id NUMBER, Team TEXT, Name TEXT); CREATE TABLE repair_assignment (Machine_ID NUMBER, repair_ID NUMBER, technician_id NUMBER); CREATE TABLE machine (Machine_ID NUMBER); CREATE TABLE repair (repair_ID NUMBER, name TEXT);"
      }
    ]
  ],
  "tracking_grants_for_research": [
    [
      {
        "question": "Show me the grant id for grants where the documents were sent before '1986-08-26 20:49:27'.",
        "query": "SELECT t1.grant_id FROM grants AS t1 JOIN documents AS t2 ON t1.grant_id = t2.grant_id WHERE t2.sent_date < '1986-08-26 20:49:27';",
        "schema": "CREATE TABLE Documents (sent_date TIME, response_received_date TIME, document_id NUMBER, grant_id NUMBER); CREATE TABLE Grants (grant_start_date TIME, grant_id NUMBER, grant_end_date TIME);"
      },
      {
        "question": "Which of those grant ended after '1989-03-16 18:27:16'? Show their id.",
        "query": "SELECT t1.grant_id FROM grants AS t1 JOIN documents AS t2 ON t1.grant_id = t2.grant_id WHERE t2.sent_date < '1986-08-26 20:49:27' INTERSECT SELECT grant_id FROM grants WHERE grant_end_date > '1989-03-16 18:27:16'",
        "schema": "CREATE TABLE Documents (grant_id NUMBER, document_id NUMBER, sent_date TIME, response_received_date TIME); CREATE TABLE Grants (grant_end_date TIME, grant_id NUMBER, grant_start_date TIME);"
      },
      {
        "question": "What are the distinct grant amount of these grants?",
        "query": "SELECT t1.grant_amount FROM grants AS t1 JOIN documents AS t2 ON t1.grant_id = t2.grant_id WHERE t2.sent_date < '1986-08-26 20:49:27' INTERSECT SELECT grant_amount FROM grants WHERE grant_end_date > '1989-03-16 18:27:16';",
        "schema": "CREATE TABLE Documents (document_id NUMBER, grant_id NUMBER, response_received_date TIME, sent_date TIME); CREATE TABLE Grants (grant_start_date TIME, grant_end_date TIME, grant_amount NUMBER, grant_id NUMBER);"
      }
    ],
    [
      {
        "question": "What are the project details of all projects?",
        "query": "SELECT project_details FROM projects;",
        "schema": "CREATE TABLE Tasks (project_id NUMBER); CREATE TABLE Project_Outcomes (project_id NUMBER); CREATE TABLE Project_Staff (project_id NUMBER); CREATE TABLE Projects (project_details TEXT, project_id NUMBER);"
      },
      {
        "question": "Which ones of the result produced patent?",
        "query": "SELECT t1.project_details FROM projects AS t1 JOIN project_outcomes AS t2 ON t1.project_id = t2.project_id WHERE t2.outcome_code = 'Patent';",
        "schema": "CREATE TABLE Project_Staff (project_id NUMBER); CREATE TABLE Project_Outcomes (outcome_details TEXT, outcome_code TEXT, project_id NUMBER); CREATE TABLE Research_Outcomes (outcome_description TEXT, outcome_code TEXT); CREATE TABLE Projects (project_id NUMBER, project_details TEXT); CREATE TABLE Tasks (project_id NUMBER);"
      },
      {
        "question": "Among the current result, which ones also had paper outcome?",
        "query": "SELECT t1.project_details FROM projects AS t1 JOIN project_outcomes AS t2 ON t1.project_id = t2.project_id WHERE t2.outcome_code = 'Paper' INTERSECT SELECT t1.project_details FROM projects AS t1 JOIN project_outcomes AS t2 ON t1.project_id = t2.project_id WHERE t2.outcome_code = 'Patent'",
        "schema": "CREATE TABLE Projects (project_details TEXT, project_id NUMBER); CREATE TABLE Project_Staff (project_id NUMBER); CREATE TABLE Tasks (project_id NUMBER); CREATE TABLE Research_Outcomes (outcome_code TEXT, outcome_description TEXT); CREATE TABLE Project_Outcomes (outcome_code TEXT, project_id NUMBER, outcome_details TEXT);"
      }
    ],
    [
      {
        "question": "Show me the grant amount of the organisations described as sponser?",
        "query": "SELECT grant_amount FROM grants AS t1 JOIN organisations AS t2 ON t1.organisation_id = t2.organisation_id JOIN organisation_types AS t3 ON t2.organisation_type = t3.organisation_type WHERE t3.organisation_type_description = 'Sponsor';",
        "schema": "CREATE TABLE Projects (organisation_id NUMBER, project_id NUMBER); CREATE TABLE Documents (grant_id NUMBER); CREATE TABLE Organisations (organisation_id NUMBER, organisation_details TEXT, organisation_type TEXT); CREATE TABLE Project_Staff (staff_id NUMBER, project_id NUMBER); CREATE TABLE Research_Staff (employer_organisation_id NUMBER); CREATE TABLE Grants (organisation_id NUMBER, grant_amount NUMBER, grant_id NUMBER); CREATE TABLE Organisation_Types (organisation_type TEXT, organisation_type_description TEXT);"
      },
      {
        "question": "How about the organisations described as research?",
        "query": "SELECT grant_amount FROM grants AS t1 JOIN organisations AS t2 ON t1.organisation_id = t2.organisation_id JOIN organisation_types AS t3 ON t2.organisation_type = t3.organisation_type WHERE t3.organisation_type_description = 'Research';",
        "schema": "CREATE TABLE Project_Staff (staff_id NUMBER, project_id NUMBER); CREATE TABLE Research_Staff (employer_organisation_id NUMBER); CREATE TABLE Grants (grant_amount NUMBER, organisation_id NUMBER, grant_id NUMBER); CREATE TABLE Organisation_Types (organisation_type_description TEXT, organisation_type TEXT); CREATE TABLE Projects (organisation_id NUMBER, project_id NUMBER); CREATE TABLE Documents (grant_id NUMBER); CREATE TABLE Organisations (organisation_id NUMBER, organisation_type TEXT, organisation_details TEXT);"
      },
      {
        "question": "Show me the sum of the result.",
        "query": "SELECT sum(grant_amount) FROM grants AS t1 JOIN organisations AS t2 ON t1.organisation_id = t2.organisation_id JOIN organisation_types AS t3 ON t2.organisation_type = t3.organisation_type WHERE t3.organisation_type_description = 'Research';",
        "schema": "CREATE TABLE Projects (project_id NUMBER, organisation_id NUMBER); CREATE TABLE Project_Staff (staff_id NUMBER, project_id NUMBER); CREATE TABLE Organisations (organisation_type TEXT, organisation_id NUMBER, organisation_details TEXT); CREATE TABLE Grants (organisation_id NUMBER, grant_id NUMBER, grant_amount NUMBER); CREATE TABLE Documents (grant_id NUMBER); CREATE TABLE Organisation_Types (organisation_type_description TEXT, organisation_type TEXT); CREATE TABLE Project_Outcomes (outcome_code TEXT); CREATE TABLE Research_Staff (employer_organisation_id NUMBER); CREATE TABLE Research_Outcomes (outcome_code TEXT, outcome_description TEXT);"
      }
    ],
    [
      {
        "question": "Which project hires the most staffs?",
        "query": "SELECT project_id FROM project_staff GROUP BY project_id ORDER BY count(*) DESC LIMIT 1;",
        "schema": "CREATE TABLE Organisations (organisation_id NUMBER); CREATE TABLE Research_Staff (employer_organisation_id NUMBER, staff_id NUMBER); CREATE TABLE Projects (project_details TEXT, project_id NUMBER, organisation_id NUMBER); CREATE TABLE Project_Staff (role_code TEXT, project_id NUMBER, staff_id NUMBER); CREATE TABLE Staff_Roles (role_description TEXT, role_code TEXT);"
      },
      {
        "question": "Who's the leader of this project? Show me the id.",
        "query": "SELECT staff_id FROM project_staff WHERE project_id IN( SELECT project_id FROM project_staff GROUP BY project_id ORDER BY count(*) DESC LIMIT 1 ) UNION SELECT date_from , date_to FROM project_staff WHERE role_code = 'leader';",
        "schema": "CREATE TABLE Project_Staff (role_code TEXT, staff_id NUMBER, date_to TIME, date_from TIME, project_id NUMBER); CREATE TABLE Research_Staff (staff_id NUMBER, employer_organisation_id NUMBER); CREATE TABLE Projects (organisation_id NUMBER, project_details TEXT, project_id NUMBER); CREATE TABLE Staff_Roles (role_description TEXT, role_code TEXT); CREATE TABLE Organisations (organisation_id NUMBER);"
      },
      {
        "question": "What's his from-date and to-date of working?",
        "query": "SELECT date_from , date_to FROM project_staff WHERE project_id IN( SELECT project_id FROM project_staff GROUP BY project_id ORDER BY count(*) DESC LIMIT 1 ) UNION SELECT date_from , date_to FROM project_staff WHERE role_code = 'leader';",
        "schema": "CREATE TABLE Staff_Roles (role_description TEXT, role_code TEXT); CREATE TABLE Research_Staff (staff_id NUMBER, employer_organisation_id NUMBER); CREATE TABLE Projects (organisation_id NUMBER, project_details TEXT, project_id NUMBER); CREATE TABLE Organisations (organisation_id NUMBER); CREATE TABLE Project_Staff (project_id NUMBER, date_from TIME, date_to TIME, staff_id NUMBER, role_code TEXT);"
      }
    ],
    [
      {
        "question": "Show me the id of organizations involved in less then 3000$ grant amount.",
        "query": "SELECT t2.organisation_id FROM grants AS t1 JOIN organisations AS t2 ON t1.organisation_id = t2.organisation_id GROUP BY t2.organisation_id HAVING sum(t1.grant_amount) < 3000;",
        "schema": "CREATE TABLE Tasks (project_id NUMBER); CREATE TABLE Grants (grant_id NUMBER, grant_amount NUMBER, organisation_id NUMBER); CREATE TABLE Organisation_Types (organisation_type_description TEXT, organisation_type TEXT); CREATE TABLE Project_Outcomes (project_id NUMBER); CREATE TABLE Organisations (organisation_id NUMBER, organisation_details TEXT, organisation_type TEXT); CREATE TABLE Documents (grant_id NUMBER); CREATE TABLE Project_Staff (staff_id NUMBER, project_id NUMBER); CREATE TABLE Projects (project_id NUMBER, organisation_id NUMBER); CREATE TABLE Research_Staff (employer_organisation_id NUMBER);"
      },
      {
        "question": "How about those with a total of more than 6000$ grants?",
        "query": "SELECT t2.organisation_id FROM grants AS t1 JOIN organisations AS t2 ON t1.organisation_id = t2.organisation_id GROUP BY t2.organisation_id HAVING sum(t1.grant_amount) > 6000;",
        "schema": "CREATE TABLE Organisations (organisation_id NUMBER, organisation_details TEXT, organisation_type TEXT); CREATE TABLE Project_Staff (project_id NUMBER, staff_id NUMBER); CREATE TABLE Project_Outcomes (project_id NUMBER); CREATE TABLE Documents (grant_id NUMBER); CREATE TABLE Tasks (project_id NUMBER); CREATE TABLE Grants (grant_amount NUMBER, organisation_id NUMBER, grant_id NUMBER); CREATE TABLE Research_Staff (employer_organisation_id NUMBER); CREATE TABLE Organisation_Types (organisation_type_description TEXT, organisation_type TEXT); CREATE TABLE Projects (project_id NUMBER, organisation_id NUMBER);"
      },
      {
        "question": "List their description as well.",
        "query": "SELECT t2.organisation_id , t2.organisation_details FROM grants AS t1 JOIN organisations AS t2 ON t1.organisation_id = t2.organisation_id GROUP BY t2.organisation_id HAVING sum(t1.grant_amount) > 6000;",
        "schema": "CREATE TABLE Project_Staff (project_id NUMBER, staff_id NUMBER); CREATE TABLE Project_Outcomes (project_id NUMBER); CREATE TABLE Document_Types (document_description TEXT); CREATE TABLE Documents (grant_id NUMBER); CREATE TABLE Projects (organisation_id NUMBER, project_id NUMBER); CREATE TABLE Grants (grant_amount NUMBER, grant_id NUMBER, organisation_id NUMBER); CREATE TABLE Tasks (project_id NUMBER); CREATE TABLE Organisations (organisation_id NUMBER, organisation_type TEXT, organisation_details TEXT); CREATE TABLE Research_Staff (employer_organisation_id NUMBER); CREATE TABLE Organisation_Types (organisation_type_description TEXT, organisation_type TEXT);"
      }
    ],
    [
      {
        "question": "Which organization has the least number of research staff?",
        "query": "SELECT t1.organisation_id FROM organisations AS t1 JOIN research_staff AS t2 ON t1.organisation_id = t2.employer_organisation_id GROUP BY t1.organisation_id ORDER BY count(*) ASC LIMIT 1;",
        "schema": "CREATE TABLE Organisation_Types (organisation_type_description TEXT, organisation_type TEXT); CREATE TABLE Projects (organisation_id NUMBER); CREATE TABLE Research_Staff (staff_details TEXT, employer_organisation_id NUMBER, staff_id NUMBER); CREATE TABLE Project_Staff (staff_id NUMBER, role_code TEXT); CREATE TABLE Grants (organisation_id NUMBER); CREATE TABLE Organisations (organisation_type TEXT, organisation_id NUMBER, organisation_details TEXT);"
      },
      {
        "question": "How about the one with the most number of research staff?",
        "query": "SELECT t1.organisation_id FROM organisations AS t1 JOIN research_staff AS t2 ON t1.organisation_id = t2.employer_organisation_id GROUP BY t1.organisation_id ORDER BY count(*) DESC LIMIT 1;",
        "schema": "CREATE TABLE Grants (organisation_id NUMBER); CREATE TABLE Research_Staff (employer_organisation_id NUMBER, staff_details TEXT, staff_id NUMBER); CREATE TABLE Project_Staff (staff_id NUMBER, role_code TEXT); CREATE TABLE Projects (organisation_id NUMBER); CREATE TABLE Organisation_Types (organisation_type TEXT, organisation_type_description TEXT); CREATE TABLE Organisations (organisation_details TEXT, organisation_type TEXT, organisation_id NUMBER);"
      },
      {
        "question": "List the organization type together with the result.",
        "query": "SELECT t1.organisation_type , t1.organisation_id FROM organisations AS t1 JOIN research_staff AS t2 ON t1.organisation_id = t2.employer_organisation_id GROUP BY t1.organisation_id ORDER BY count(*) DESC LIMIT 1;",
        "schema": "CREATE TABLE Grants (organisation_id NUMBER); CREATE TABLE Organisations (organisation_details TEXT, organisation_type TEXT, organisation_id NUMBER); CREATE TABLE Project_Staff (staff_id NUMBER, role_code TEXT); CREATE TABLE Organisation_Types (organisation_type TEXT, organisation_type_description TEXT); CREATE TABLE Projects (organisation_id NUMBER); CREATE TABLE Research_Staff (staff_id NUMBER, employer_organisation_id NUMBER, staff_details TEXT); CREATE TABLE Research_Outcomes (outcome_code TEXT);"
      }
    ],
    [
      {
        "question": "Show me all the organization types.",
        "query": "SELECT organisation_type FROM organisations;",
        "schema": "CREATE TABLE Organisation_Types (organisation_type_description TEXT, organisation_type TEXT); CREATE TABLE Document_Types (document_type_code TEXT); CREATE TABLE Project_Staff (staff_id NUMBER); CREATE TABLE Projects (organisation_id NUMBER, project_id NUMBER); CREATE TABLE Organisations (organisation_type TEXT, organisation_details TEXT, organisation_id NUMBER); CREATE TABLE Research_Staff (employer_organisation_id NUMBER); CREATE TABLE Documents (document_type_code TEXT);"
      },
      {
        "question": "Which of those hires the least research staff?",
        "query": "SELECT t1.organisation_type FROM organisations AS t1 JOIN research_staff AS t2 ON t1.organisation_id = t2.employer_organisation_id GROUP BY t1.organisation_type ORDER BY count(*) ASC LIMIT 1;",
        "schema": "CREATE TABLE Projects (project_id NUMBER, organisation_id NUMBER); CREATE TABLE Staff_Roles (role_code TEXT); CREATE TABLE Documents (document_type_code TEXT); CREATE TABLE Document_Types (document_type_code TEXT); CREATE TABLE Project_Staff (role_code TEXT, staff_id NUMBER); CREATE TABLE Organisation_Types (organisation_type TEXT, organisation_type_description TEXT); CREATE TABLE Organisations (organisation_id NUMBER, organisation_details TEXT, organisation_type TEXT); CREATE TABLE Research_Staff (staff_id NUMBER, employer_organisation_id NUMBER, staff_details TEXT);"
      },
      {
        "question": "How about the one hiring the most research staff?",
        "query": "SELECT t1.organisation_type FROM organisations AS t1 JOIN research_staff AS t2 ON t1.organisation_id = t2.employer_organisation_id GROUP BY t1.organisation_type ORDER BY count(*) DESC LIMIT 1;",
        "schema": "CREATE TABLE Documents (document_type_code TEXT); CREATE TABLE Project_Staff (staff_id NUMBER, role_code TEXT); CREATE TABLE Organisation_Types (organisation_type TEXT, organisation_type_description TEXT); CREATE TABLE Research_Staff (employer_organisation_id NUMBER, staff_details TEXT, staff_id NUMBER); CREATE TABLE Projects (organisation_id NUMBER, project_id NUMBER); CREATE TABLE Document_Types (document_type_code TEXT); CREATE TABLE Staff_Roles (role_code TEXT); CREATE TABLE Organisations (organisation_type TEXT, organisation_details TEXT, organisation_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show me the all documents with grant amount more than 5000 dollars.",
        "query": "SELECT * FROM documents AS t1 JOIN grants AS t2 ON t1.grant_id = t2.grant_id WHERE t2.grant_amount > 5000;",
        "schema": "CREATE TABLE Documents (document_id NUMBER, grant_id NUMBER); CREATE TABLE Grants (grant_id NUMBER, grant_amount NUMBER);"
      },
      {
        "question": "Which of the result were granted by organisation type described research.",
        "query": "SELECT * FROM documents AS t1 JOIN grants AS t2 ON t1.grant_id = t2.grant_id JOIN organisations AS t3 ON t2.organisation_id = t3.organisation_id JOIN organisation_types AS t4 ON t3.organisation_type = t4.organisation_type WHERE t2.grant_amount > 5000 AND t4.organisation_type_description = 'Research'",
        "schema": "CREATE TABLE Grants (grant_amount NUMBER, grant_id NUMBER, organisation_id NUMBER); CREATE TABLE Organisations (organisation_id NUMBER, organisation_type TEXT); CREATE TABLE Research_Outcomes (outcome_description TEXT, outcome_code TEXT); CREATE TABLE Organisation_Types (organisation_type_description TEXT, organisation_type TEXT); CREATE TABLE Document_Types (document_description TEXT, document_type_code TEXT); CREATE TABLE Documents (document_type_code TEXT, document_id NUMBER, grant_id NUMBER);"
      },
      {
        "question": "Show me their send dates.",
        "query": "SELECT t1.sent_date FROM documents AS t1 JOIN grants AS t2 ON t1.grant_id = t2.grant_id JOIN organisations AS t3 ON t2.organisation_id = t3.organisation_id JOIN organisation_types AS t4 ON t3.organisation_type = t4.organisation_type WHERE t2.grant_amount > 5000 AND t4.organisation_type_description = 'Research'",
        "schema": "CREATE TABLE Grants (organisation_id NUMBER, grant_start_date TIME, grant_amount NUMBER, grant_id NUMBER); CREATE TABLE Document_Types (document_type_code TEXT, document_description TEXT); CREATE TABLE Research_Outcomes (outcome_code TEXT, outcome_description TEXT); CREATE TABLE Organisations (organisation_type TEXT, organisation_id NUMBER); CREATE TABLE Organisation_Types (organisation_type TEXT, organisation_type_description TEXT); CREATE TABLE Documents (document_id NUMBER, sent_date TIME, document_type_code TEXT, grant_id NUMBER);"
      }
    ],
    [
      {
        "question": "What're the response received dates for the documents described as 'Initial Application'?",
        "query": "SELECT t1.response_received_date FROM documents AS t1 JOIN document_types AS t2 ON t1.document_type_code = t2.document_type_code WHERE t2.document_description = 'Initial Application';",
        "schema": "CREATE TABLE Grants (grant_id NUMBER, grant_start_date TIME, grant_end_date TIME); CREATE TABLE Document_Types (document_type_code TEXT, document_description TEXT); CREATE TABLE Documents (response_received_date TIME, document_type_code TEXT, document_id NUMBER, grant_id NUMBER, sent_date TIME);"
      },
      {
        "question": "How about those granted with more than 100?",
        "query": "SELECT t1.response_received_date FROM documents AS t1 JOIN grants AS t3 ON t1.grant_id = t3.grant_id WHERE t3.grant_amount > 100;",
        "schema": "CREATE TABLE Document_Types (document_description TEXT, document_type_code TEXT); CREATE TABLE Documents (grant_id NUMBER, sent_date TIME, document_type_code TEXT, document_id NUMBER, response_received_date TIME); CREATE TABLE Grants (grant_id NUMBER, grant_amount NUMBER, grant_start_date TIME, grant_end_date TIME);"
      },
      {
        "question": "What are the response received dates for the documents described as 'Regular' or granted with more than 100?",
        "query": "SELECT t1.response_received_date FROM documents AS t1 JOIN document_types AS t2 ON t1.document_type_code = t2.document_type_code JOIN grants AS t3 ON t1.grant_id = t3.grant_id WHERE t2.document_description = 'Regular' OR t3.grant_amount > 100",
        "schema": "CREATE TABLE Document_Types (document_type_code TEXT, document_description TEXT); CREATE TABLE Grants (grant_id NUMBER, grant_end_date TIME, grant_amount NUMBER, grant_start_date TIME); CREATE TABLE Documents (grant_id NUMBER, document_id NUMBER, document_type_code TEXT, sent_date TIME, response_received_date TIME);"
      }
    ],
    [
      {
        "question": "Show me the project ids of the projects which did not hire any staff for a leader role.",
        "query": "SELECT project_id FROM projects WHERE project_id NOT IN ( SELECT project_id FROM project_staff WHERE role_code = 'leader' )",
        "schema": "CREATE TABLE Staff_Roles (role_code TEXT); CREATE TABLE Organisations (organisation_id NUMBER); CREATE TABLE Research_Staff (staff_id NUMBER); CREATE TABLE Tasks (project_id NUMBER); CREATE TABLE Project_Outcomes (project_id NUMBER); CREATE TABLE Project_Staff (staff_id NUMBER, project_id NUMBER, role_code TEXT); CREATE TABLE Projects (project_details TEXT, organisation_id NUMBER, project_id NUMBER);"
      },
      {
        "question": "How about those without a researcher role?",
        "query": "SELECT project_id FROM projects WHERE project_id NOT IN ( SELECT project_id FROM project_staff WHERE role_code = 'researcher' )",
        "schema": "CREATE TABLE Staff_Roles (role_code TEXT); CREATE TABLE Research_Staff (staff_id NUMBER, staff_details TEXT); CREATE TABLE Organisations (organisation_id NUMBER); CREATE TABLE Tasks (project_id NUMBER); CREATE TABLE Project_Staff (staff_id NUMBER, role_code TEXT, project_id NUMBER); CREATE TABLE Project_Outcomes (project_id NUMBER); CREATE TABLE Projects (project_details TEXT, project_id NUMBER, organisation_id NUMBER);"
      },
      {
        "question": "What are their details?",
        "query": "SELECT project_details FROM projects WHERE project_id NOT IN ( SELECT project_id FROM project_staff WHERE role_code = 'researcher' )",
        "schema": "CREATE TABLE Tasks (project_id NUMBER); CREATE TABLE Organisations (organisation_id NUMBER); CREATE TABLE Project_Staff (other_details TEXT, project_id NUMBER, role_code TEXT, staff_id NUMBER); CREATE TABLE Project_Outcomes (project_id NUMBER); CREATE TABLE Projects (organisation_id NUMBER, project_id NUMBER, project_details TEXT); CREATE TABLE Staff_Roles (role_code TEXT, role_description TEXT); CREATE TABLE Research_Staff (staff_id NUMBER, staff_details TEXT);"
      }
    ],
    [
      {
        "question": "Show me the task ids for projects detailed as 'omnis'.",
        "query": "SELECT t1.task_id FROM tasks AS t1 JOIN projects AS t2 ON t1.project_id = t2.project_id WHERE t2.project_details = 'omnis';",
        "schema": "CREATE TABLE Project_Outcomes (project_id NUMBER); CREATE TABLE Project_Staff (staff_id NUMBER, project_id NUMBER); CREATE TABLE Organisations (organisation_id NUMBER, organisation_details TEXT); CREATE TABLE Projects (project_details TEXT, project_id NUMBER, organisation_id NUMBER); CREATE TABLE Tasks (task_details TEXT, task_id NUMBER, project_id NUMBER);"
      },
      {
        "question": "How about the project id for projects which are detailed as 'omnis' or  have more than 2 outcomes?",
        "query": "SELECT t2.project_id FROM tasks AS t1 JOIN projects AS t2 ON t1.project_id = t2.project_id WHERE t2.project_details = 'omnis' UNION SELECT t1.task_details , t1.task_id , t2.project_id FROM tasks AS t1 JOIN projects AS t2 ON t1.project_id = t2.project_id JOIN project_outcomes AS t3 ON t2.project_id = t3.project_id GROUP BY t2.project_id HAVING count(*) > 2",
        "schema": "CREATE TABLE Projects (project_details TEXT, project_id NUMBER, organisation_id NUMBER); CREATE TABLE Project_Staff (project_id NUMBER, staff_id NUMBER); CREATE TABLE Organisations (organisation_details TEXT, organisation_id NUMBER); CREATE TABLE Project_Outcomes (outcome_code TEXT, outcome_details TEXT, project_id NUMBER); CREATE TABLE Tasks (task_id NUMBER, project_id NUMBER, task_details TEXT);"
      },
      {
        "question": "List the corresponding task details and task id as well.",
        "query": "SELECT t1.task_details , t1.task_id , t2.project_id FROM tasks AS t1 JOIN projects AS t2 ON t1.project_id = t2.project_id WHERE t2.project_details = 'omnis' UNION SELECT t1.task_details , t1.task_id , t2.project_id FROM tasks AS t1 JOIN projects AS t2 ON t1.project_id = t2.project_id JOIN project_outcomes AS t3 ON t2.project_id = t3.project_id GROUP BY t2.project_id HAVING count(*) > 2",
        "schema": "CREATE TABLE Tasks (task_details TEXT, task_id NUMBER, project_id NUMBER); CREATE TABLE Project_Staff (project_id NUMBER, staff_id NUMBER); CREATE TABLE Project_Outcomes (outcome_details TEXT, project_id NUMBER, outcome_code TEXT); CREATE TABLE Projects (project_details TEXT, organisation_id NUMBER, project_id NUMBER); CREATE TABLE Organisations (organisation_details TEXT, organisation_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show me all the research outcome.",
        "query": "SELECT * FROM research_outcomes;",
        "schema": "CREATE TABLE Project_Outcomes (outcome_details TEXT, outcome_code TEXT); CREATE TABLE Project_Staff (staff_id NUMBER); CREATE TABLE Research_Outcomes (outcome_description TEXT, outcome_code TEXT); CREATE TABLE Research_Staff (staff_id NUMBER);"
      },
      {
        "question": "List those described with the substring 'Published' in the result.",
        "query": "SELECT * FROM research_outcomes WHERE outcome_description LIKE '%Published%';",
        "schema": "CREATE TABLE Project_Staff (staff_id NUMBER); CREATE TABLE Research_Outcomes (outcome_code TEXT, outcome_description TEXT); CREATE TABLE Document_Types (document_description TEXT, document_type_code TEXT); CREATE TABLE Project_Outcomes (outcome_details TEXT, outcome_code TEXT); CREATE TABLE Research_Staff (staff_id NUMBER);"
      },
      {
        "question": "How about the project details of the result?",
        "query": "SELECT t1.project_details FROM projects AS t1 JOIN project_outcomes AS t2 ON t1.project_id = t2.project_id JOIN research_outcomes AS t3 ON t2.outcome_code = t3.outcome_code WHERE t3.outcome_description LIKE '%Published%';",
        "schema": "CREATE TABLE Project_Staff (project_id NUMBER, staff_id NUMBER); CREATE TABLE Document_Types (document_type_code TEXT, document_description TEXT); CREATE TABLE Project_Outcomes (outcome_code TEXT, project_id NUMBER, outcome_details TEXT); CREATE TABLE Projects (project_id NUMBER, project_details TEXT); CREATE TABLE Research_Staff (staff_id NUMBER); CREATE TABLE Research_Outcomes (outcome_code TEXT, outcome_description TEXT);"
      }
    ],
    [
      {
        "question": "Show me the number of staff for project with id 1.",
        "query": "SELECT count(*) FROM project_staff WHERE project_id = 1;",
        "schema": "CREATE TABLE Research_Staff (staff_details TEXT, staff_id NUMBER, employer_organisation_id NUMBER); CREATE TABLE Project_Staff (project_id NUMBER, role_code TEXT, staff_id NUMBER); CREATE TABLE Organisations (organisation_id NUMBER); CREATE TABLE Staff_Roles (role_code TEXT); CREATE TABLE Project_Outcomes (project_id NUMBER); CREATE TABLE Tasks (project_id NUMBER); CREATE TABLE Projects (organisation_id NUMBER, project_id NUMBER, project_details TEXT);"
      },
      {
        "question": "How about the number of staff each project has? List the project id and the number.",
        "query": "SELECT t1.project_id , count(*) FROM project_staff AS t1 JOIN projects AS t2 ON t1.project_id = t2.project_id GROUP BY t1.project_id;",
        "schema": "CREATE TABLE Staff_Roles (role_code TEXT); CREATE TABLE Projects (project_id NUMBER, organisation_id NUMBER, project_details TEXT); CREATE TABLE Project_Staff (project_id NUMBER, staff_id NUMBER, role_code TEXT); CREATE TABLE Tasks (project_id NUMBER); CREATE TABLE Organisations (organisation_id NUMBER); CREATE TABLE Project_Outcomes (project_id NUMBER); CREATE TABLE Research_Staff (employer_organisation_id NUMBER, staff_details TEXT, staff_id NUMBER);"
      },
      {
        "question": "Order the result by ascending number of staff.",
        "query": "SELECT t1.project_id , count(*) FROM project_staff AS t1 JOIN projects AS t2 ON t1.project_id = t2.project_id GROUP BY t1.project_id ORDER BY count(*) ASC;",
        "schema": "CREATE TABLE Organisations (organisation_id NUMBER); CREATE TABLE Project_Staff (role_code TEXT, staff_id NUMBER, project_id NUMBER); CREATE TABLE Staff_Roles (role_code TEXT); CREATE TABLE Research_Outcomes (outcome_code TEXT); CREATE TABLE Projects (project_id NUMBER, project_details TEXT, organisation_id NUMBER); CREATE TABLE Tasks (project_id NUMBER); CREATE TABLE Project_Outcomes (project_id NUMBER, outcome_details TEXT, outcome_code TEXT); CREATE TABLE Research_Staff (staff_id NUMBER, staff_details TEXT, employer_organisation_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show me the end date of all projects staff.",
        "query": "SELECT date_to FROM project_staff;",
        "schema": "CREATE TABLE Project_Outcomes (project_id NUMBER); CREATE TABLE Tasks (project_id NUMBER); CREATE TABLE Project_Staff (role_code TEXT, date_from TIME, staff_id NUMBER, date_to TIME, project_id NUMBER); CREATE TABLE Projects (project_id NUMBER); CREATE TABLE Staff_Roles (role_description TEXT, role_code TEXT); CREATE TABLE Grants (grant_end_date TIME);"
      },
      {
        "question": "What about the start date?",
        "query": "SELECT date_from FROM project_staff;",
        "schema": "CREATE TABLE Staff_Roles (role_code TEXT, role_description TEXT); CREATE TABLE Project_Staff (staff_id NUMBER, project_id NUMBER, date_from TIME, role_code TEXT, date_to TIME); CREATE TABLE Grants (grant_start_date TIME, grant_end_date TIME); CREATE TABLE Tasks (project_id NUMBER); CREATE TABLE Project_Outcomes (project_id NUMBER); CREATE TABLE Projects (project_id NUMBER);"
      },
      {
        "question": "What's the earliest date among the result?",
        "query": "SELECT date_from FROM project_staff ORDER BY date_from ASC LIMIT 1;",
        "schema": "CREATE TABLE Project_Staff (date_from TIME, staff_id NUMBER, role_code TEXT, project_id NUMBER, date_to TIME); CREATE TABLE Research_Outcomes (outcome_code TEXT); CREATE TABLE Staff_Roles (role_description TEXT, role_code TEXT); CREATE TABLE Project_Outcomes (outcome_code TEXT, project_id NUMBER, outcome_details TEXT); CREATE TABLE Projects (project_id NUMBER); CREATE TABLE Tasks (project_id NUMBER); CREATE TABLE Grants (grant_start_date TIME, grant_end_date TIME);"
      }
    ],
    [
      {
        "question": "Show me the project ids of all projects.",
        "query": "SELECT project_id FROM projects;",
        "schema": "CREATE TABLE Project_Staff (project_id NUMBER); CREATE TABLE Projects (project_details TEXT, organisation_id NUMBER, project_id NUMBER); CREATE TABLE Tasks (project_id NUMBER); CREATE TABLE Project_Outcomes (project_id NUMBER);"
      },
      {
        "question": "Which of those had the most number of outcomes?",
        "query": "SELECT t1.project_id FROM projects AS t1 JOIN project_outcomes AS t2 ON t1.project_id = t2.project_id GROUP BY t1.project_id ORDER BY count(*) DESC LIMIT 1;",
        "schema": "CREATE TABLE Project_Staff (project_id NUMBER); CREATE TABLE Tasks (project_id NUMBER); CREATE TABLE Projects (project_details TEXT, project_id NUMBER, organisation_id NUMBER); CREATE TABLE Research_Outcomes (outcome_code TEXT); CREATE TABLE Project_Outcomes (outcome_details TEXT, outcome_code TEXT, project_id NUMBER);"
      },
      {
        "question": "Show me the project details as well.",
        "query": "SELECT t1.project_details , t1.project_id FROM projects AS t1 JOIN project_outcomes AS t2 ON t1.project_id = t2.project_id GROUP BY t1.project_id ORDER BY count(*) DESC LIMIT 1;",
        "schema": "CREATE TABLE Tasks (project_id NUMBER); CREATE TABLE Projects (project_id NUMBER, project_details TEXT, organisation_id NUMBER); CREATE TABLE Project_Staff (project_id NUMBER); CREATE TABLE Research_Outcomes (outcome_code TEXT); CREATE TABLE Project_Outcomes (outcome_details TEXT, project_id NUMBER, outcome_code TEXT);"
      }
    ],
    [
      {
        "question": "Show me all the ids of projects with outcomes.",
        "query": "SELECT project_id FROM project_outcomes;",
        "schema": "CREATE TABLE Research_Outcomes (outcome_code TEXT); CREATE TABLE Projects (project_details TEXT, project_id NUMBER, organisation_id NUMBER); CREATE TABLE Project_Outcomes (outcome_details TEXT, outcome_code TEXT, project_id NUMBER); CREATE TABLE Project_Staff (project_id NUMBER, staff_id NUMBER); CREATE TABLE Tasks (task_id NUMBER, project_id NUMBER);"
      },
      {
        "question": "How many projects do not have outcome?",
        "query": "SELECT count(*) FROM projects WHERE project_id NOT IN ( SELECT project_id FROM project_outcomes );",
        "schema": "CREATE TABLE Project_Staff (project_id NUMBER, staff_id NUMBER); CREATE TABLE Project_Outcomes (outcome_code TEXT, outcome_details TEXT, project_id NUMBER); CREATE TABLE Projects (organisation_id NUMBER, project_details TEXT, project_id NUMBER); CREATE TABLE Tasks (task_id NUMBER, project_id NUMBER); CREATE TABLE Research_Outcomes (outcome_code TEXT);"
      },
      {
        "question": "List their details.",
        "query": "SELECT project_details FROM projects WHERE project_id NOT IN ( SELECT project_id FROM project_outcomes );",
        "schema": "CREATE TABLE Project_Outcomes (outcome_details TEXT, outcome_code TEXT, project_id NUMBER); CREATE TABLE Tasks (task_id NUMBER, project_id NUMBER); CREATE TABLE Projects (project_details TEXT, project_id NUMBER, organisation_id NUMBER); CREATE TABLE Project_Staff (project_id NUMBER, staff_id NUMBER); CREATE TABLE Research_Outcomes (outcome_code TEXT);"
      }
    ],
    [
      {
        "question": "Show me the number of research staff each organisation hired.",
        "query": "SELECT count(*) FROM organisations AS t1 JOIN research_staff AS t2 ON t1.organisation_id = t2.employer_organisation_id GROUP BY t1.organisation_id;",
        "schema": "CREATE TABLE Research_Staff (staff_id NUMBER, staff_details TEXT, employer_organisation_id NUMBER); CREATE TABLE Project_Staff (role_code TEXT, staff_id NUMBER); CREATE TABLE Staff_Roles (role_code TEXT); CREATE TABLE Organisation_Types (organisation_type_description TEXT, organisation_type TEXT); CREATE TABLE Organisations (organisation_type TEXT, organisation_id NUMBER, organisation_details TEXT); CREATE TABLE Grants (organisation_id NUMBER);"
      },
      {
        "question": "Which organisation hired the least number? Show ids.",
        "query": "SELECT t1.organisation_id FROM organisations AS t1 JOIN research_staff AS t2 ON t1.organisation_id = t2.employer_organisation_id GROUP BY t1.organisation_id ORDER BY count(*) ASC LIMIT 1;",
        "schema": "CREATE TABLE Research_Staff (employer_organisation_id NUMBER, staff_details TEXT, staff_id NUMBER); CREATE TABLE Staff_Roles (role_code TEXT); CREATE TABLE Project_Staff (staff_id NUMBER, role_code TEXT); CREATE TABLE Organisations (organisation_details TEXT, organisation_id NUMBER, organisation_type TEXT); CREATE TABLE Organisation_Types (organisation_type TEXT, organisation_type_description TEXT); CREATE TABLE Grants (organisation_id NUMBER);"
      },
      {
        "question": "How about the most number of research staff. List the organisation id, type and detail.",
        "query": "SELECT t1.organisation_id , t1.organisation_type , t1.organisation_details FROM organisations AS t1 JOIN research_staff AS t2 ON t1.organisation_id = t2.employer_organisation_id GROUP BY t1.organisation_id ORDER BY count(*) DESC LIMIT 1;",
        "schema": "CREATE TABLE Research_Staff (staff_details TEXT, employer_organisation_id NUMBER, staff_id NUMBER); CREATE TABLE Organisation_Types (organisation_type TEXT, organisation_type_description TEXT); CREATE TABLE Grants (organisation_id NUMBER); CREATE TABLE Project_Staff (role_code TEXT, staff_id NUMBER); CREATE TABLE Staff_Roles (role_code TEXT); CREATE TABLE Organisations (organisation_id NUMBER, organisation_type TEXT, organisation_details TEXT);"
      }
    ],
    [
      {
        "question": "What are the number of project outcomes each project staff involved in?",
        "query": "SELECT count(*) FROM staff_roles AS t1 JOIN project_staff AS t2 ON t1.role_code = t2.role_code JOIN project_outcomes AS t3 ON t2.project_id = t3.project_id GROUP BY t2.staff_id;",
        "schema": "CREATE TABLE Staff_Roles (role_code TEXT, role_description TEXT); CREATE TABLE Project_Outcomes (outcome_details TEXT, outcome_code TEXT, project_id NUMBER); CREATE TABLE Research_Staff (staff_id NUMBER, staff_details TEXT); CREATE TABLE Tasks (project_id NUMBER); CREATE TABLE Projects (project_id NUMBER); CREATE TABLE Research_Outcomes (outcome_code TEXT); CREATE TABLE Project_Staff (project_id NUMBER, staff_id NUMBER, role_code TEXT);"
      },
      {
        "question": "Who is involved in the most number of project outcomes? Show ids.",
        "query": "SELECT t2.staff_id FROM staff_roles AS t1 JOIN project_staff AS t2 ON t1.role_code = t2.role_code JOIN project_outcomes AS t3 ON t2.project_id = t3.project_id GROUP BY t2.staff_id ORDER BY count(*) DESC LIMIT 1;",
        "schema": "CREATE TABLE Tasks (project_id NUMBER); CREATE TABLE Project_Staff (role_code TEXT, project_id NUMBER, staff_id NUMBER); CREATE TABLE Research_Outcomes (outcome_code TEXT); CREATE TABLE Staff_Roles (role_code TEXT, role_description TEXT); CREATE TABLE Projects (project_id NUMBER); CREATE TABLE Project_Outcomes (outcome_code TEXT, project_id NUMBER, outcome_details TEXT); CREATE TABLE Research_Staff (staff_details TEXT, staff_id NUMBER);"
      },
      {
        "question": "Give me the person's role description.",
        "query": "SELECT t1.role_description , t2.staff_id FROM staff_roles AS t1 JOIN project_staff AS t2 ON t1.role_code = t2.role_code JOIN project_outcomes AS t3 ON t2.project_id = t3.project_id GROUP BY t2.staff_id ORDER BY count(*) DESC LIMIT 1;",
        "schema": "CREATE TABLE Projects (project_id NUMBER); CREATE TABLE Research_Staff (staff_details TEXT, staff_id NUMBER); CREATE TABLE Tasks (project_id NUMBER); CREATE TABLE Research_Outcomes (outcome_code TEXT); CREATE TABLE Project_Staff (project_id NUMBER, staff_id NUMBER, role_code TEXT); CREATE TABLE Staff_Roles (role_description TEXT, role_code TEXT); CREATE TABLE Project_Outcomes (project_id NUMBER, outcome_code TEXT, outcome_details TEXT);"
      }
    ],
    [
      {
        "question": "Show me all the document type description.",
        "query": "SELECT document_description FROM document_types;",
        "schema": "CREATE TABLE Documents (document_type_code TEXT, document_id NUMBER); CREATE TABLE Organisation_Types (organisation_type_description TEXT, organisation_type TEXT); CREATE TABLE Document_Types (document_type_code TEXT, document_description TEXT);"
      },
      {
        "question": "How about document type code?",
        "query": "SELECT document_type_code FROM document_types ;",
        "schema": "CREATE TABLE Organisation_Types (organisation_type_description TEXT, organisation_type TEXT); CREATE TABLE Documents (document_id NUMBER, document_type_code TEXT); CREATE TABLE Document_Types (document_description TEXT, document_type_code TEXT);"
      },
      {
        "question": "Which one is described with the prefix 'Initial'?",
        "query": "SELECT document_type_code FROM document_types WHERE document_description LIKE 'Initial%';",
        "schema": "CREATE TABLE Document_Types (document_type_code TEXT, document_description TEXT); CREATE TABLE Documents (document_id NUMBER, document_type_code TEXT); CREATE TABLE Organisation_Types (organisation_type_description TEXT, organisation_type TEXT);"
      }
    ],
    [
      {
        "question": "Show me all the grants start dates.",
        "query": "SELECT grant_start_date FROM grants;",
        "schema": "CREATE TABLE Documents (grant_id NUMBER); CREATE TABLE Grants (grant_end_date TIME, grant_id NUMBER, grant_start_date TIME, organisation_id NUMBER); CREATE TABLE Project_Staff (date_to TIME);"
      },
      {
        "question": "Which ones of those have documents described as 'Regular'?",
        "query": "SELECT t1.grant_start_date FROM grants AS t1 JOIN documents AS t2 ON t1.grant_id = t2.grant_id JOIN document_types AS t3 ON t2.document_type_code = t3.document_type_code WHERE t3.document_description = 'Regular';",
        "schema": "CREATE TABLE Document_Types (document_type_code TEXT, document_description TEXT); CREATE TABLE Project_Staff (date_to TIME); CREATE TABLE Documents (document_type_code TEXT, grant_id NUMBER, document_id NUMBER); CREATE TABLE Grants (grant_start_date TIME, grant_end_date TIME, grant_id NUMBER, organisation_id NUMBER);"
      },
      {
        "question": "How about ones that have both documents described as 'Regular' and documents described as 'Initial Application'?",
        "query": "SELECT t1.grant_start_date FROM grants AS t1 JOIN documents AS t2 ON t1.grant_id = t2.grant_id JOIN document_types AS t3 ON t2.document_type_code = t3.document_type_code WHERE t3.document_description = 'Regular' INTERSECT SELECT t1.grant_start_date FROM grants AS t1 JOIN documents AS t2 ON t1.grant_id = t2.grant_id JOIN document_types AS t3 ON t2.document_type_code = t3.document_type_code WHERE t3.document_description = 'Initial Application'",
        "schema": "CREATE TABLE Document_Types (document_description TEXT, document_type_code TEXT); CREATE TABLE Grants (organisation_id NUMBER, grant_id NUMBER, grant_end_date TIME, grant_start_date TIME); CREATE TABLE Project_Staff (date_to TIME); CREATE TABLE Documents (grant_id NUMBER, document_type_code TEXT, document_id NUMBER);"
      }
    ],
    [
      {
        "question": "How many documents are there?",
        "query": "SELECT count(*) FROM documents;",
        "schema": "CREATE TABLE Documents (other_details TEXT, document_id NUMBER, document_type_code TEXT, grant_id NUMBER); CREATE TABLE Project_Staff (staff_id NUMBER); CREATE TABLE Grants (grant_id NUMBER); CREATE TABLE Document_Types (document_type_code TEXT, document_description TEXT);"
      },
      {
        "question": "How many documents does each grant have? List the grant id and number.",
        "query": "SELECT grant_id , count(*) FROM documents GROUP BY grant_id ;",
        "schema": "CREATE TABLE Documents (document_id NUMBER, other_details TEXT, grant_id NUMBER, document_type_code TEXT); CREATE TABLE Grants (grant_id NUMBER, organisation_id NUMBER, grant_amount NUMBER); CREATE TABLE Document_Types (document_description TEXT, document_type_code TEXT); CREATE TABLE Project_Staff (staff_id NUMBER);"
      },
      {
        "question": "Give me the one having the most documents.",
        "query": "SELECT grant_id , count(*) FROM documents GROUP BY grant_id ORDER BY count(*) DESC LIMIT 1;",
        "schema": "CREATE TABLE Project_Staff (staff_id NUMBER); CREATE TABLE Documents (document_id NUMBER, document_type_code TEXT, grant_id NUMBER, other_details TEXT); CREATE TABLE Grants (grant_id NUMBER, organisation_id NUMBER, grant_amount NUMBER); CREATE TABLE Document_Types (document_type_code TEXT, document_description TEXT);"
      }
    ],
    [
      {
        "question": "Show me the organisation types.",
        "query": "SELECT organisation_type FROM organisation_types;",
        "schema": "CREATE TABLE Projects (organisation_id NUMBER); CREATE TABLE Grants (organisation_id NUMBER); CREATE TABLE Project_Staff (staff_id NUMBER); CREATE TABLE Research_Staff (employer_organisation_id NUMBER); CREATE TABLE Documents (document_type_code TEXT); CREATE TABLE Organisation_Types (organisation_type TEXT, organisation_type_description TEXT); CREATE TABLE Document_Types (document_type_code TEXT); CREATE TABLE Organisations (organisation_type TEXT, organisation_id NUMBER, organisation_details TEXT);"
      },
      {
        "question": "How about the type description?",
        "query": "SELECT organisation_type_description FROM organisation_types;",
        "schema": "CREATE TABLE Organisation_Types (organisation_type TEXT, organisation_type_description TEXT); CREATE TABLE Project_Staff (staff_id NUMBER); CREATE TABLE Grants (organisation_id NUMBER); CREATE TABLE Document_Types (document_type_code TEXT, document_description TEXT); CREATE TABLE Research_Staff (employer_organisation_id NUMBER); CREATE TABLE Projects (organisation_id NUMBER); CREATE TABLE Documents (document_type_code TEXT); CREATE TABLE Organisations (organisation_id NUMBER, organisation_details TEXT, organisation_type TEXT);"
      },
      {
        "question": "Find the ones detailed as \"quo\".",
        "query": "SELECT t1.organisation_type_description FROM organisation_types AS t1 JOIN organisations AS t2 ON t1.organisation_type = t2.organisation_type WHERE t2.organisation_details = 'quo';",
        "schema": "CREATE TABLE Organisation_Types (organisation_type_description TEXT, organisation_type TEXT); CREATE TABLE Organisations (organisation_id NUMBER, organisation_details TEXT, organisation_type TEXT); CREATE TABLE Document_Types (document_type_code TEXT, document_description TEXT); CREATE TABLE Documents (document_type_code TEXT); CREATE TABLE Grants (organisation_id NUMBER); CREATE TABLE Projects (organisation_id NUMBER); CREATE TABLE Project_Staff (staff_id NUMBER); CREATE TABLE Research_Staff (employer_organisation_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show me all the details of organisations.",
        "query": "SELECT organisation_details FROM organisations;",
        "schema": "CREATE TABLE Projects (project_id NUMBER, organisation_id NUMBER); CREATE TABLE Organisations (organisation_details TEXT, organisation_id NUMBER, organisation_type TEXT); CREATE TABLE Organisation_Types (organisation_type TEXT, organisation_type_description TEXT); CREATE TABLE Tasks (task_details TEXT); CREATE TABLE Research_Staff (employer_organisation_id NUMBER, staff_details TEXT); CREATE TABLE Project_Staff (staff_id NUMBER, other_details TEXT, project_id NUMBER); CREATE TABLE Grants (organisation_id NUMBER);"
      },
      {
        "question": "Among the result, which ones are described as 'Sponsor'?",
        "query": "SELECT organisation_details FROM organisations AS t1 JOIN organisation_types AS t2 ON t1.organisation_type = t2.organisation_type WHERE t2.organisation_type_description = 'Sponsor';",
        "schema": "CREATE TABLE Projects (organisation_id NUMBER, project_id NUMBER); CREATE TABLE Research_Outcomes (outcome_code TEXT, outcome_description TEXT); CREATE TABLE Project_Outcomes (outcome_code TEXT, outcome_details TEXT); CREATE TABLE Tasks (task_details TEXT); CREATE TABLE Research_Staff (staff_details TEXT, employer_organisation_id NUMBER); CREATE TABLE Organisation_Types (organisation_type TEXT, organisation_type_description TEXT); CREATE TABLE Organisations (organisation_type TEXT, organisation_id NUMBER, organisation_details TEXT); CREATE TABLE Project_Staff (staff_id NUMBER, other_details TEXT, project_id NUMBER); CREATE TABLE Grants (organisation_id NUMBER);"
      },
      {
        "question": "Sort the result in an ascending order.",
        "query": "SELECT organisation_details FROM organisations AS t1 JOIN organisation_types AS t2 ON t1.organisation_type = t2.organisation_type WHERE t2.organisation_type_description = 'Sponsor' ORDER BY organisation_details ASC;",
        "schema": "CREATE TABLE Grants (organisation_id NUMBER); CREATE TABLE Research_Outcomes (outcome_code TEXT, outcome_description TEXT); CREATE TABLE Organisations (organisation_details TEXT, organisation_type TEXT, organisation_id NUMBER); CREATE TABLE Projects (project_id NUMBER, organisation_id NUMBER); CREATE TABLE Project_Outcomes (outcome_code TEXT, outcome_details TEXT); CREATE TABLE Research_Staff (staff_details TEXT, employer_organisation_id NUMBER); CREATE TABLE Organisation_Types (organisation_type TEXT, organisation_type_description TEXT); CREATE TABLE Project_Staff (other_details TEXT, project_id NUMBER, staff_id NUMBER); CREATE TABLE Tasks (task_details TEXT);"
      }
    ],
    [
      {
        "question": "Show me the number of project staffs.",
        "query": "SELECT count(*) FROM project_staff;",
        "schema": "CREATE TABLE Project_Staff (role_code TEXT, project_id NUMBER, staff_id NUMBER); CREATE TABLE Organisations (organisation_id NUMBER); CREATE TABLE Project_Outcomes (project_id NUMBER); CREATE TABLE Research_Staff (staff_details TEXT, staff_id NUMBER); CREATE TABLE Staff_Roles (role_code TEXT, role_description TEXT); CREATE TABLE Tasks (project_id NUMBER); CREATE TABLE Projects (organisation_id NUMBER, project_id NUMBER, project_details TEXT);"
      },
      {
        "question": "How many of those worked as leaders?",
        "query": "SELECT count(*) FROM project_staff WHERE role_code = 'leader';",
        "schema": "CREATE TABLE Project_Staff (project_id NUMBER, role_code TEXT, staff_id NUMBER); CREATE TABLE Tasks (project_id NUMBER); CREATE TABLE Staff_Roles (role_description TEXT, role_code TEXT); CREATE TABLE Research_Staff (staff_details TEXT, staff_id NUMBER); CREATE TABLE Project_Outcomes (project_id NUMBER); CREATE TABLE Organisations (organisation_id NUMBER); CREATE TABLE Projects (project_details TEXT, project_id NUMBER, organisation_id NUMBER);"
      },
      {
        "question": "How about the number of those who either worked as leaders or started working before '1989-04-24 23:51:54'?",
        "query": "SELECT count(*) FROM project_staff WHERE role_code = 'leader' OR date_from < '1989-04-24 23:51:54';",
        "schema": "CREATE TABLE Research_Staff (staff_id NUMBER, staff_details TEXT); CREATE TABLE Projects (project_details TEXT, project_id NUMBER, organisation_id NUMBER); CREATE TABLE Project_Outcomes (project_id NUMBER); CREATE TABLE Staff_Roles (role_code TEXT, role_description TEXT); CREATE TABLE Organisations (organisation_id NUMBER); CREATE TABLE Project_Staff (project_id NUMBER, date_from TIME, date_to TIME, staff_id NUMBER, role_code TEXT); CREATE TABLE Tasks (project_id NUMBER);"
      }
    ],
    [
      {
        "question": "What are the start dates of project staff?",
        "query": "SELECT date_from FROM project_staff;",
        "schema": "CREATE TABLE Grants (grant_start_date TIME); CREATE TABLE Project_Staff (project_id NUMBER, date_to TIME, staff_id NUMBER, date_from TIME, role_code TEXT); CREATE TABLE Projects (project_id NUMBER); CREATE TABLE Tasks (project_id NUMBER);"
      },
      {
        "question": "What about the end date of them?",
        "query": "SELECT date_to FROM project_staff;",
        "schema": "CREATE TABLE Grants (grant_start_date TIME, grant_end_date TIME); CREATE TABLE Tasks (project_id NUMBER); CREATE TABLE Projects (project_id NUMBER); CREATE TABLE Project_Staff (staff_id NUMBER, date_from TIME, date_to TIME, project_id NUMBER, role_code TEXT); CREATE TABLE Staff_Roles (role_description TEXT);"
      },
      {
        "question": "What's the last date among the result?",
        "query": "SELECT date_to FROM project_staff ORDER BY date_to DESC LIMIT 1;",
        "schema": "CREATE TABLE Tasks (project_id NUMBER); CREATE TABLE Projects (project_id NUMBER); CREATE TABLE Project_Outcomes (outcome_details TEXT, project_id NUMBER, outcome_code TEXT); CREATE TABLE Research_Outcomes (outcome_code TEXT); CREATE TABLE Project_Staff (role_code TEXT, project_id NUMBER, staff_id NUMBER, date_from TIME, date_to TIME); CREATE TABLE Staff_Roles (role_description TEXT); CREATE TABLE Grants (grant_end_date TIME, grant_start_date TIME);"
      }
    ],
    [
      {
        "question": "Give me the outcome descriptions of research outcomes.",
        "query": "SELECT outcome_description FROM research_outcomes;",
        "schema": "CREATE TABLE Project_Outcomes (outcome_code TEXT, outcome_details TEXT); CREATE TABLE Document_Types (document_description TEXT); CREATE TABLE Research_Outcomes (outcome_description TEXT, outcome_code TEXT);"
      },
      {
        "question": "What are the result description of the project whose detail is 'sed'?",
        "query": "SELECT t1.outcome_description FROM research_outcomes AS t1 JOIN project_outcomes AS t2 ON t1.outcome_code = t2.outcome_code JOIN projects AS t3 ON t2.project_id = t3.project_id WHERE t3.project_details = 'sed';",
        "schema": "CREATE TABLE Projects (project_details TEXT, project_id NUMBER); CREATE TABLE Project_Outcomes (outcome_code TEXT, project_id NUMBER, outcome_details TEXT); CREATE TABLE Document_Types (document_description TEXT); CREATE TABLE Research_Outcomes (outcome_code TEXT, outcome_description TEXT);"
      },
      {
        "question": "How about 'sint'?",
        "query": "SELECT t1.outcome_description FROM research_outcomes AS t1 JOIN project_outcomes AS t2 ON t1.outcome_code = t2.outcome_code JOIN projects AS t3 ON t2.project_id = t3.project_id WHERE t3.project_details = 'sint';",
        "schema": "CREATE TABLE Project_Outcomes (project_id NUMBER, outcome_code TEXT, outcome_details TEXT); CREATE TABLE Projects (project_id NUMBER, project_details TEXT); CREATE TABLE Document_Types (document_description TEXT); CREATE TABLE Research_Outcomes (outcome_code TEXT, outcome_description TEXT);"
      }
    ],
    [
      {
        "question": "Show me the outcome count for each organisation.",
        "query": "SELECT count(*) FROM projects AS t1 JOIN project_outcomes AS t2 ON t1.project_id = t2.project_id GROUP BY t1.organisation_id;",
        "schema": "CREATE TABLE Projects (project_id NUMBER, organisation_id NUMBER); CREATE TABLE Research_Staff (employer_organisation_id NUMBER); CREATE TABLE Grants (organisation_id NUMBER); CREATE TABLE Organisation_Types (organisation_type_description TEXT, organisation_type TEXT); CREATE TABLE Organisations (organisation_id NUMBER, organisation_type TEXT, organisation_details TEXT); CREATE TABLE Project_Outcomes (outcome_details TEXT, outcome_code TEXT, project_id NUMBER); CREATE TABLE Project_Staff (staff_id NUMBER, project_id NUMBER); CREATE TABLE Research_Outcomes (outcome_code TEXT);"
      },
      {
        "question": "Which organisation has the least number of outcome? Show ids.",
        "query": "SELECT t1.organisation_id FROM projects AS t1 JOIN project_outcomes AS t2 ON t1.project_id = t2.project_id GROUP BY t1.organisation_id ORDER BY count(*) ASC LIMIT 1;",
        "schema": "CREATE TABLE Organisation_Types (organisation_type_description TEXT, organisation_type TEXT); CREATE TABLE Projects (project_id NUMBER, organisation_id NUMBER); CREATE TABLE Project_Staff (staff_id NUMBER, project_id NUMBER); CREATE TABLE Grants (organisation_id NUMBER); CREATE TABLE Organisations (organisation_type TEXT, organisation_id NUMBER, organisation_details TEXT); CREATE TABLE Research_Staff (employer_organisation_id NUMBER); CREATE TABLE Research_Outcomes (outcome_code TEXT); CREATE TABLE Project_Outcomes (outcome_code TEXT, project_id NUMBER, outcome_details TEXT);"
      },
      {
        "question": "How about the one with the most outcome count? Show the count as well.",
        "query": "SELECT t1.organisation_id , count(*) FROM projects AS t1 JOIN project_outcomes AS t2 ON t1.project_id = t2.project_id GROUP BY t1.organisation_id ORDER BY count(*) DESC LIMIT 1;",
        "schema": "CREATE TABLE Organisations (organisation_type TEXT, organisation_id NUMBER, organisation_details TEXT); CREATE TABLE Organisation_Types (organisation_type TEXT, organisation_type_description TEXT); CREATE TABLE Project_Outcomes (outcome_details TEXT, outcome_code TEXT, project_id NUMBER); CREATE TABLE Projects (project_id NUMBER, organisation_id NUMBER); CREATE TABLE Research_Outcomes (outcome_code TEXT); CREATE TABLE Grants (organisation_id NUMBER); CREATE TABLE Research_Staff (employer_organisation_id NUMBER); CREATE TABLE Project_Staff (project_id NUMBER, staff_id NUMBER);"
      }
    ],
    [
      {
        "question": "What're the project details?",
        "query": "SELECT project_details FROM projects;",
        "schema": "CREATE TABLE Research_Staff (staff_details TEXT); CREATE TABLE Projects (project_id NUMBER, project_details TEXT); CREATE TABLE Project_Outcomes (project_id NUMBER); CREATE TABLE Documents (document_id NUMBER, other_details TEXT); CREATE TABLE Tasks (task_details TEXT, project_id NUMBER); CREATE TABLE Project_Staff (project_id NUMBER, staff_id NUMBER);"
      },
      {
        "question": "Show me only the one launched by the organisation with the most number of projects.",
        "query": "SELECT project_details FROM projects WHERE organisation_id IN ( SELECT organisation_id FROM projects GROUP BY organisation_id ORDER BY count(*) ASC LIMIT 1 );",
        "schema": "CREATE TABLE Tasks (task_details TEXT, project_id NUMBER); CREATE TABLE Project_Staff (staff_id NUMBER, project_id NUMBER); CREATE TABLE Projects (organisation_id NUMBER, project_details TEXT, project_id NUMBER); CREATE TABLE Documents (document_id NUMBER, other_details TEXT); CREATE TABLE Research_Staff (staff_details TEXT); CREATE TABLE Organisations (organisation_id NUMBER, organisation_details TEXT); CREATE TABLE Project_Outcomes (project_id NUMBER);"
      },
      {
        "question": "How about the one with most projects?",
        "query": "SELECT project_details FROM projects WHERE organisation_id IN ( SELECT organisation_id FROM projects GROUP BY organisation_id ORDER BY count(*) DESC LIMIT 1 );",
        "schema": "CREATE TABLE Documents (document_id NUMBER, other_details TEXT); CREATE TABLE Project_Staff (project_id NUMBER, staff_id NUMBER); CREATE TABLE Research_Staff (staff_details TEXT); CREATE TABLE Projects (project_id NUMBER, organisation_id NUMBER, project_details TEXT); CREATE TABLE Project_Outcomes (project_id NUMBER); CREATE TABLE Organisation_Types (organisation_type_description TEXT); CREATE TABLE Tasks (task_details TEXT, project_id NUMBER); CREATE TABLE Organisations (organisation_id NUMBER, organisation_details TEXT);"
      }
    ],
    [
      {
        "question": "How tasks are there?",
        "query": "SELECT count(*) FROM tasks;",
        "schema": "CREATE TABLE Tasks (task_id NUMBER, task_details TEXT, project_id NUMBER); CREATE TABLE Project_Staff (staff_id NUMBER);"
      },
      {
        "question": "How many tasks does each project have?",
        "query": "SELECT count(*) FROM projects AS t1 JOIN tasks AS t2 ON t1.project_id = t2.project_id GROUP BY t1.project_id;",
        "schema": "CREATE TABLE Tasks (task_details TEXT, task_id NUMBER, project_id NUMBER); CREATE TABLE Project_Staff (project_id NUMBER, staff_id NUMBER); CREATE TABLE Projects (project_details TEXT, project_id NUMBER);"
      },
      {
        "question": "Show the project details as well.",
        "query": "SELECT count(*) , t1.project_details FROM projects AS t1 JOIN tasks AS t2 ON t1.project_id = t2.project_id GROUP BY t1.project_id;",
        "schema": "CREATE TABLE Projects (project_details TEXT, project_id NUMBER); CREATE TABLE Tasks (project_id NUMBER, task_details TEXT, task_id NUMBER); CREATE TABLE Project_Staff (project_id NUMBER, staff_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show me all the role codes.",
        "query": "SELECT role_code FROM project_staff;",
        "schema": "CREATE TABLE Staff_Roles (role_description TEXT, role_code TEXT); CREATE TABLE Projects (project_id NUMBER); CREATE TABLE Project_Staff (role_code TEXT, project_id NUMBER, staff_id NUMBER); CREATE TABLE Organisations (organisation_id NUMBER);"
      },
      {
        "question": "How about those of staff who starts working after 2003-04-19 15:06:20?",
        "query": "SELECT role_code FROM project_staff WHERE date_from > '2003-04-19 15:06:20';",
        "schema": "CREATE TABLE Project_Staff (date_from TIME, staff_id NUMBER, role_code TEXT, project_id NUMBER, date_to TIME); CREATE TABLE Organisations (organisation_id NUMBER); CREATE TABLE Projects (project_id NUMBER); CREATE TABLE Staff_Roles (role_code TEXT, role_description TEXT);"
      },
      {
        "question": "List those of the staff who starts working after 2003-04-19 15:06:20 and ends working before 2016-03-15 00:33:18?",
        "query": "SELECT role_code FROM project_staff WHERE date_from > '2003-04-19 15:06:20' AND date_to < '2016-03-15 00:33:18'",
        "schema": "CREATE TABLE Projects (project_id NUMBER); CREATE TABLE Staff_Roles (role_description TEXT, role_code TEXT); CREATE TABLE Project_Staff (role_code TEXT, date_to TIME, project_id NUMBER, date_from TIME, staff_id NUMBER); CREATE TABLE Organisations (organisation_id NUMBER);"
      }
    ]
  ],
  "icfp_1": [
    [
      {
        "question": "What are all the papers?",
        "query": "SELECT * FROM papers",
        "schema": "CREATE TABLE Papers (paperID NUMBER, title TEXT); CREATE TABLE Authorship (paperID NUMBER);"
      },
      {
        "question": "Give me the titles of those who are published by \"Jeremy Gibbons\"?",
        "query": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE t1.fname = \"Jeremy\" AND t1.lname = \"Gibbons\"",
        "schema": "CREATE TABLE Papers (title TEXT, paperID NUMBER); CREATE TABLE Authors (authID NUMBER, lname TEXT, fname TEXT); CREATE TABLE Authorship (paperID NUMBER, authOrder NUMBER, authID NUMBER);"
      }
    ],
    [
      {
        "question": "What are all the papers?",
        "query": "SELECT * FROM papers",
        "schema": "CREATE TABLE Papers (title TEXT, paperID NUMBER); CREATE TABLE Authorship (paperID NUMBER);"
      },
      {
        "question": "Show me the ones that are published by \"Aaron Turon\".",
        "query": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE t1.fname = \"Aaron\" AND t1.lname = \"Turon\"",
        "schema": "CREATE TABLE Papers (title TEXT, paperID NUMBER); CREATE TABLE Authors (lname TEXT, fname TEXT, authID NUMBER); CREATE TABLE Authorship (instID NUMBER, paperID NUMBER, authID NUMBER);"
      }
    ],
    [
      {
        "question": "How many papers are there?",
        "query": "SELECT count(*) FROM papers",
        "schema": "CREATE TABLE Authors (authID NUMBER); CREATE TABLE Papers (paperID NUMBER, title TEXT); CREATE TABLE Authorship (authID NUMBER, paperID NUMBER, authOrder NUMBER);"
      },
      {
        "question": "How many authors are there?",
        "query": "SELECT count(*) FROM authors",
        "schema": "CREATE TABLE Authors (lname TEXT, fname TEXT, authID NUMBER); CREATE TABLE Authorship (authOrder NUMBER, instID NUMBER, authID NUMBER, paperID NUMBER); CREATE TABLE Papers (paperID NUMBER, title TEXT);"
      },
      {
        "question": "How many of those papers are published by \"Atsushi Ohori\"?",
        "query": "SELECT count(*) FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE t1.fname = \"Atsushi\" AND t1.lname = \"Ohori\"",
        "schema": "CREATE TABLE Authorship (paperID NUMBER, instID NUMBER, authOrder NUMBER, authID NUMBER); CREATE TABLE Papers (paperID NUMBER, title TEXT); CREATE TABLE Authors (fname TEXT, authID NUMBER, lname TEXT);"
      }
    ],
    [
      {
        "question": "What are the names of all the institutions?",
        "query": "SELECT name FROM inst",
        "schema": "CREATE TABLE Authorship (instID NUMBER); CREATE TABLE Inst (instID NUMBER, name TEXT);"
      },
      {
        "question": "Which one does \"Matthias Blume\" belong to?",
        "query": "SELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN inst AS t3 ON t2.instid = t3.instid WHERE t1.fname = \"Matthias\" AND t1.lname = \"Blume\"",
        "schema": "CREATE TABLE Authors (authID NUMBER, lname TEXT, fname TEXT); CREATE TABLE Inst (instID NUMBER, name TEXT); CREATE TABLE Authorship (instID NUMBER, authID NUMBER, paperID NUMBER, authOrder NUMBER); CREATE TABLE Papers (paperID NUMBER);"
      }
    ],
    [
      {
        "question": "What are all the institutions?",
        "query": "SELECT * FROM inst",
        "schema": "CREATE TABLE Authorship (instID NUMBER, paperID NUMBER); CREATE TABLE Inst (country TEXT, name TEXT, instID NUMBER);"
      },
      {
        "question": "Which one does \"Katsuhiro Ueno\" belong to?",
        "query": "SELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN inst AS t3 ON t2.instid = t3.instid WHERE t1.fname = \"Katsuhiro\" AND t1.lname = \"Ueno\"",
        "schema": "CREATE TABLE Inst (instID NUMBER, name TEXT, country TEXT); CREATE TABLE Authors (authID NUMBER, fname TEXT, lname TEXT); CREATE TABLE Papers (paperID NUMBER); CREATE TABLE Authorship (authID NUMBER, paperID NUMBER, instID NUMBER);"
      }
    ],
    [
      {
        "question": "Show me the name of all the institutions?",
        "query": "SELECT name FROM inst",
        "schema": "CREATE TABLE Authorship (instID NUMBER, paperID NUMBER); CREATE TABLE Inst (instID NUMBER, name TEXT);"
      },
      {
        "question": "show me the name of all the authors?",
        "query": "SELECT fname , lname FROM authors",
        "schema": "CREATE TABLE Papers (paperID NUMBER); CREATE TABLE Authors (lname TEXT, authID NUMBER, fname TEXT); CREATE TABLE Authorship (paperID NUMBER, authID NUMBER, instID NUMBER); CREATE TABLE Inst (name TEXT, instID NUMBER);"
      },
      {
        "question": "Give me the first names and last names of those belong to the \"University of Oxford\".",
        "query": "SELECT DISTINCT t1.fname , t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN inst AS t3 ON t2.instid = t3.instid WHERE t3.name = \"University of Oxford\"",
        "schema": "CREATE TABLE Inst (instID NUMBER, name TEXT); CREATE TABLE Authors (authID NUMBER, fname TEXT, lname TEXT); CREATE TABLE Papers (paperID NUMBER); CREATE TABLE Authorship (paperID NUMBER, authID NUMBER, instID NUMBER);"
      }
    ],
    [
      {
        "question": "What are the name of all the institutions?",
        "query": "SELECT name FROM inst",
        "schema": "CREATE TABLE Authorship (paperID NUMBER, instID NUMBER); CREATE TABLE Inst (instID NUMBER, name TEXT);"
      },
      {
        "question": "Who are the name of all the authors?",
        "query": "SELECT fname , lname FROM authors",
        "schema": "CREATE TABLE Papers (paperID NUMBER); CREATE TABLE Authors (authID NUMBER, fname TEXT, lname TEXT); CREATE TABLE Authorship (instID NUMBER, paperID NUMBER, authID NUMBER); CREATE TABLE Inst (instID NUMBER, name TEXT);"
      },
      {
        "question": "Give me those belong to \"Google\".",
        "query": "SELECT DISTINCT t1.fname , t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN inst AS t3 ON t2.instid = t3.instid WHERE t3.name = \"Google\"",
        "schema": "CREATE TABLE Papers (paperID NUMBER); CREATE TABLE Inst (instID NUMBER, country TEXT, name TEXT); CREATE TABLE Authors (fname TEXT, authID NUMBER, lname TEXT); CREATE TABLE Authorship (authID NUMBER, paperID NUMBER, instID NUMBER);"
      }
    ],
    [
      {
        "question": "What are the name of all the authors?",
        "query": "SELECT fname , lname FROM authors",
        "schema": "CREATE TABLE Authorship (authID NUMBER); CREATE TABLE Authors (fname TEXT, authID NUMBER, lname TEXT);"
      },
      {
        "question": "Who published the paper \"Binders Unbound\"?",
        "query": "SELECT t1.fname, t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE t3.title = \"Binders Unbound\"",
        "schema": "CREATE TABLE Authors (fname TEXT, lname TEXT, authID NUMBER); CREATE TABLE Papers (title TEXT, paperID NUMBER); CREATE TABLE Authorship (authID NUMBER, paperID NUMBER);"
      },
      {
        "question": "Give me only the last names.",
        "query": "SELECT t1.fname, t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE t3.title = \"Binders Unbound\"",
        "schema": "CREATE TABLE Authors (authID NUMBER, lname TEXT, fname TEXT); CREATE TABLE Papers (paperID NUMBER, title TEXT); CREATE TABLE Authorship (paperID NUMBER, authID NUMBER);"
      }
    ],
    [
      {
        "question": "What are all the papers?",
        "query": "SELECT * FROM papers",
        "schema": "CREATE TABLE Authorship (paperID NUMBER, authOrder NUMBER); CREATE TABLE Papers (title TEXT, paperID NUMBER);"
      },
      {
        "question": "What are the name of all the authors?",
        "query": "SELECT fname , lname FROM authors",
        "schema": "CREATE TABLE Papers (title TEXT, paperID NUMBER); CREATE TABLE Authors (lname TEXT, fname TEXT, authID NUMBER); CREATE TABLE Authorship (authOrder NUMBER, paperID NUMBER, authID NUMBER);"
      },
      {
        "question": "Who wrote the paper \"Nameless, Painless\"?",
        "query": "SELECT t1.fname , t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE t3.title = \"Nameless , Painless\"",
        "schema": "CREATE TABLE Authorship (authID NUMBER, authOrder NUMBER, paperID NUMBER); CREATE TABLE Authors (authID NUMBER, lname TEXT, fname TEXT); CREATE TABLE Papers (title TEXT, paperID NUMBER);"
      }
    ],
    [
      {
        "question": "What are all the papers?",
        "query": "SELECT * FROM papers",
        "schema": "CREATE TABLE Papers (title TEXT, paperID NUMBER); CREATE TABLE Authorship (paperID NUMBER);"
      },
      {
        "question": "What are the name of all the institutions?",
        "query": "SELECT name FROM inst",
        "schema": "CREATE TABLE Inst (name TEXT, instID NUMBER); CREATE TABLE Authorship (instID NUMBER, paperID NUMBER); CREATE TABLE Papers (title TEXT, paperID NUMBER);"
      },
      {
        "question": "Which papers are published under \"Indiana University\"?",
        "query": "SELECT DISTINCT t1.title FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid = t2.paperid JOIN inst AS t3 ON t2.instid = t3.instid WHERE t3.name = \"Indiana University\"",
        "schema": "CREATE TABLE Inst (country TEXT, name TEXT, instID NUMBER); CREATE TABLE Papers (title TEXT, paperID NUMBER); CREATE TABLE Authorship (instID NUMBER, paperID NUMBER);"
      }
    ],
    [
      {
        "question": "What are all the papers?",
        "query": "SELECT * FROM papers",
        "schema": "CREATE TABLE Authorship (paperID NUMBER); CREATE TABLE Papers (title TEXT, paperID NUMBER);"
      },
      {
        "question": "Give me information about the institution \"Google\".",
        "query": "SELECT * FROM inst WHERE name = \"Google\"",
        "schema": "CREATE TABLE Inst (instID NUMBER, name TEXT); CREATE TABLE Authorship (paperID NUMBER, instID NUMBER); CREATE TABLE Papers (title TEXT, paperID NUMBER);"
      },
      {
        "question": "Which papers did it publish?",
        "query": "SELECT DISTINCT t1.title FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid = t2.paperid JOIN inst AS t3 ON t2.instid = t3.instid WHERE t3.name = \"Google\"",
        "schema": "CREATE TABLE Inst (instID NUMBER, name TEXT); CREATE TABLE Papers (title TEXT, paperID NUMBER); CREATE TABLE Authorship (instID NUMBER, paperID NUMBER);"
      }
    ],
    [
      {
        "question": "How many papers are there?",
        "query": "SELECT count(*) FROM papers",
        "schema": "CREATE TABLE Authors (authID NUMBER); CREATE TABLE Papers (title TEXT, paperID NUMBER); CREATE TABLE Authorship (authID NUMBER, authOrder NUMBER, paperID NUMBER);"
      },
      {
        "question": "What are all the institutions?",
        "query": "SELECT * FROM inst",
        "schema": "CREATE TABLE Inst (name TEXT, instID NUMBER, country TEXT); CREATE TABLE Authors (authID NUMBER); CREATE TABLE Papers (title TEXT, paperID NUMBER); CREATE TABLE Authorship (paperID NUMBER, authID NUMBER, authOrder NUMBER, instID NUMBER);"
      },
      {
        "question": "How many papers are published by \"Tokohu University\"?",
        "query": "SELECT count(DISTINCT t1.title) FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid = t2.paperid JOIN inst AS t3 ON t2.instid = t3.instid WHERE t3.name = \"Tokohu University\"",
        "schema": "CREATE TABLE Papers (title TEXT, paperID NUMBER); CREATE TABLE Authors (authID NUMBER); CREATE TABLE Inst (instID NUMBER, country TEXT, name TEXT); CREATE TABLE Authorship (authID NUMBER, instID NUMBER, paperID NUMBER, authOrder NUMBER);"
      }
    ],
    [
      {
        "question": "How many papers are there?",
        "query": "SELECT count(*) FROM papers",
        "schema": "CREATE TABLE Papers (paperID NUMBER, title TEXT); CREATE TABLE Authors (authID NUMBER); CREATE TABLE Authorship (paperID NUMBER, authOrder NUMBER, authID NUMBER);"
      },
      {
        "question": "What are all the institutions?",
        "query": "SELECT * FROM inst",
        "schema": "CREATE TABLE Papers (paperID NUMBER, title TEXT); CREATE TABLE Authorship (instID NUMBER, authID NUMBER, paperID NUMBER, authOrder NUMBER); CREATE TABLE Inst (country TEXT, instID NUMBER, name TEXT); CREATE TABLE Authors (authID NUMBER);"
      },
      {
        "question": "Give me the number of papers published by \"\"University of Pennsylvania\"\".",
        "query": "SELECT count(DISTINCT t1.title) FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid = t2.paperid JOIN inst AS t3 ON t2.instid = t3.instid WHERE t3.name = \"University of Pennsylvania\"",
        "schema": "CREATE TABLE Inst (name TEXT, instID NUMBER, country TEXT); CREATE TABLE Papers (paperID NUMBER, title TEXT); CREATE TABLE Authors (authID NUMBER); CREATE TABLE Authorship (authID NUMBER, instID NUMBER, authOrder NUMBER, paperID NUMBER);"
      }
    ],
    [
      {
        "question": "What are all the papers?",
        "query": "SELECT * FROM papers",
        "schema": "CREATE TABLE Papers (paperID NUMBER, title TEXT); CREATE TABLE Authorship (paperID NUMBER);"
      },
      {
        "question": "What are the name of all the authors?",
        "query": "SELECT fname , lname FROM authors",
        "schema": "CREATE TABLE Authorship (paperID NUMBER, authID NUMBER); CREATE TABLE Papers (title TEXT, paperID NUMBER); CREATE TABLE Authors (authID NUMBER, lname TEXT, fname TEXT);"
      },
      {
        "question": "Which papers did \"Olin Shivers\" write?",
        "query": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE t1.fname = \"Olin\" AND t1.lname = \"Shivers\"",
        "schema": "CREATE TABLE Authors (lname TEXT, authID NUMBER, fname TEXT); CREATE TABLE Papers (title TEXT, paperID NUMBER); CREATE TABLE Authorship (authID NUMBER, paperID NUMBER, authOrder NUMBER);"
      }
    ],
    [
      {
        "question": "What are all the papers?",
        "query": "SELECT * FROM papers",
        "schema": "CREATE TABLE Papers (paperID NUMBER, title TEXT); CREATE TABLE Authorship (paperID NUMBER);"
      },
      {
        "question": "What are all the authors?",
        "query": "SELECT fname , lname FROM authors",
        "schema": "CREATE TABLE Authorship (authID NUMBER, paperID NUMBER, authOrder NUMBER); CREATE TABLE Papers (paperID NUMBER, title TEXT); CREATE TABLE Authors (authID NUMBER, lname TEXT, fname TEXT);"
      },
      {
        "question": "Which papers did \"Stephanie Weirich\" write?",
        "query": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE t1.fname = \"Stephanie\" AND t1.lname = \"Weirich\"",
        "schema": "CREATE TABLE Papers (title TEXT, paperID NUMBER); CREATE TABLE Authors (lname TEXT, authID NUMBER, fname TEXT); CREATE TABLE Authorship (authOrder NUMBER, paperID NUMBER, authID NUMBER);"
      }
    ],
    [
      {
        "question": "What are all institutions in \"USA\"?",
        "query": "SELECT * FROM inst WHERE country = \"USA\"",
        "schema": "CREATE TABLE Inst (name TEXT, instID NUMBER, country TEXT); CREATE TABLE Authorship (paperID NUMBER, instID NUMBER);"
      },
      {
        "question": "What papers did they publish?",
        "query": "SELECT DISTINCT t3.title FROM authorship AS t2 JOIN papers AS t3 ON t2.paperid = t3.paperid JOIN inst AS t4 ON t2.instid = t4.instid WHERE t4.country = \"USA\"",
        "schema": "CREATE TABLE Authorship (authID NUMBER, paperID NUMBER, instID NUMBER); CREATE TABLE Inst (name TEXT, country TEXT, instID NUMBER); CREATE TABLE Papers (paperID NUMBER, title TEXT);"
      },
      {
        "question": "Among those, which have \"Turon\" as its second author?",
        "query": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid JOIN inst AS t4 ON t2.instid = t4.instid WHERE t4.country = \"USA\" AND t2.authorder = 2 AND t1.lname = \"Turon\"",
        "schema": "CREATE TABLE Inst (instID NUMBER, country TEXT, name TEXT); CREATE TABLE Papers (paperID NUMBER, title TEXT); CREATE TABLE Authors (lname TEXT, authID NUMBER, fname TEXT); CREATE TABLE Authorship (authID NUMBER, paperID NUMBER, authOrder NUMBER, instID NUMBER);"
      }
    ],
    [
      {
        "question": "What are all institutions in \"Japan\"?",
        "query": "SELECT * FROM inst WHERE country = \"Japan\"",
        "schema": "CREATE TABLE Inst (name TEXT, country TEXT, instID NUMBER); CREATE TABLE Authorship (instID NUMBER, paperID NUMBER);"
      },
      {
        "question": "Which authors belong to them?",
        "query": "SELECT t1.fname, t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN inst AS t3 ON t2.instid = t3.instid WHERE t3.country = \"Japan\"",
        "schema": "CREATE TABLE Authorship (instID NUMBER, authID NUMBER, authOrder NUMBER, paperID NUMBER); CREATE TABLE Inst (name TEXT, instID NUMBER, country TEXT); CREATE TABLE Authors (lname TEXT, authID NUMBER, fname TEXT); CREATE TABLE Papers (paperID NUMBER);"
      },
      {
        "question": "Who has last name \"Ohori\"?",
        "query": "SELECT t1.fname, t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN inst AS t3 ON t2.instid = t3.instid WHERE t3.country = \"Japan\" AND t1.lname = \"Ohori\"",
        "schema": "CREATE TABLE Inst (instID NUMBER, country TEXT, name TEXT); CREATE TABLE Authorship (authOrder NUMBER, instID NUMBER, paperID NUMBER, authID NUMBER); CREATE TABLE Authors (authID NUMBER, fname TEXT, lname TEXT); CREATE TABLE Papers (paperID NUMBER);"
      },
      {
        "question": "Give me the titles of papers he wrote as the first author.",
        "query": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid JOIN inst AS t4 ON t2.instid = t4.instid WHERE t4.country = \"Japan\" AND t2.authorder = 1 AND t1.lname = \"Ohori\"",
        "schema": "CREATE TABLE Inst (country TEXT, instID NUMBER, name TEXT); CREATE TABLE Authorship (instID NUMBER, authID NUMBER, authOrder NUMBER, paperID NUMBER); CREATE TABLE Authors (lname TEXT, fname TEXT, authID NUMBER); CREATE TABLE Papers (title TEXT, paperID NUMBER);"
      }
    ],
    [
      {
        "question": "What are the name of all the authors?",
        "query": "SELECT fname, lname FROM authors",
        "schema": "CREATE TABLE Authorship (authID NUMBER); CREATE TABLE Authors (authID NUMBER, fname TEXT, lname TEXT);"
      },
      {
        "question": "How many papers did each of them publish?",
        "query": "SELECT t1.fname, t1.lname, count(*) FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid",
        "schema": "CREATE TABLE Papers (paperID NUMBER, title TEXT); CREATE TABLE Authorship (authOrder NUMBER, authID NUMBER, paperID NUMBER); CREATE TABLE Authors (authID NUMBER, fname TEXT, lname TEXT);"
      },
      {
        "question": "Who published the most? Give me the last name.",
        "query": "SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid GROUP BY t1.fname , t1.lname ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Authors (fname TEXT, authID NUMBER, lname TEXT); CREATE TABLE Authorship (paperID NUMBER, authID NUMBER, authOrder NUMBER); CREATE TABLE Papers (paperID NUMBER, title TEXT);"
      }
    ],
    [
      {
        "question": "What are all the countries?",
        "query": "SELECT country FROM inst",
        "schema": "CREATE TABLE Papers (paperID NUMBER); CREATE TABLE Inst (name TEXT, country TEXT, instID NUMBER); CREATE TABLE Authorship (paperID NUMBER);"
      },
      {
        "question": "How many papers did each of them publish?",
        "query": "SELECT country, count(*) FROM inst AS t1 JOIN authorship AS t2 ON t1.instid = t2.instid JOIN papers AS t3 ON t2.paperid = t3.paperid GROUP BY t1.country",
        "schema": "CREATE TABLE Inst (instID NUMBER, country TEXT, name TEXT); CREATE TABLE Authorship (instID NUMBER, paperID NUMBER); CREATE TABLE Papers (paperID NUMBER, title TEXT);"
      },
      {
        "question": "Which country published the most?",
        "query": "SELECT t1.country FROM inst AS t1 JOIN authorship AS t2 ON t1.instid = t2.instid JOIN papers AS t3 ON t2.paperid = t3.paperid GROUP BY t1.country ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Inst (name TEXT, country TEXT, instID NUMBER); CREATE TABLE Authorship (instID NUMBER, paperID NUMBER); CREATE TABLE Papers (paperID NUMBER, title TEXT);"
      }
    ],
    [
      {
        "question": "What are the name of all the organizations?",
        "query": "SELECT name FROM inst",
        "schema": "CREATE TABLE Inst (instID NUMBER, name TEXT); CREATE TABLE Authorship (authID NUMBER, instID NUMBER, paperID NUMBER); CREATE TABLE Papers (paperID NUMBER); CREATE TABLE Authors (authID NUMBER, lname TEXT, fname TEXT);"
      },
      {
        "question": "How many papers did each of them publish?",
        "query": "SELECT t1.name, count(*) FROM inst AS t1 JOIN authorship AS t2 ON t1.instid = t2.instid JOIN papers AS t3 ON t2.paperid = t3.paperid GROUP BY t1.name",
        "schema": "CREATE TABLE Papers (title TEXT, paperID NUMBER); CREATE TABLE Inst (name TEXT, instID NUMBER); CREATE TABLE Authorship (authID NUMBER, instID NUMBER, paperID NUMBER); CREATE TABLE Authors (lname TEXT, authID NUMBER, fname TEXT);"
      },
      {
        "question": "Give me the name of the one published the most.",
        "query": "SELECT t1.name FROM inst AS t1 JOIN authorship AS t2 ON t1.instid = t2.instid JOIN papers AS t3 ON t2.paperid = t3.paperid GROUP BY t1.name ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Papers (title TEXT, paperID NUMBER); CREATE TABLE Inst (name TEXT, instID NUMBER); CREATE TABLE Authorship (paperID NUMBER, authID NUMBER, instID NUMBER); CREATE TABLE Authors (authID NUMBER, fname TEXT, lname TEXT);"
      }
    ],
    [
      {
        "question": "What are all the papers?",
        "query": "SELECT * FROM papers",
        "schema": "CREATE TABLE Papers (paperID NUMBER, title TEXT); CREATE TABLE Authorship (paperID NUMBER);"
      },
      {
        "question": "Which contains the word \"ML\"? Give me the titles of them.",
        "query": "SELECT title FROM papers WHERE title LIKE \"%ML%\"",
        "schema": "CREATE TABLE Papers (title TEXT, paperID NUMBER); CREATE TABLE Authorship (paperID NUMBER);"
      }
    ],
    [
      {
        "question": "What are all the papers?",
        "query": "SELECT * FROM papers",
        "schema": "CREATE TABLE Papers (paperID NUMBER, title TEXT); CREATE TABLE Authorship (paperID NUMBER);"
      },
      {
        "question": "Which contains the word \"Database\"? Give me the titles of them.",
        "query": "SELECT title FROM papers WHERE title LIKE \"%Database%\"",
        "schema": "CREATE TABLE Authorship (paperID NUMBER); CREATE TABLE Papers (paperID NUMBER, title TEXT);"
      }
    ],
    [
      {
        "question": "What are all the papers?",
        "query": "SELECT * FROM papers",
        "schema": "CREATE TABLE Authorship (paperID NUMBER); CREATE TABLE Papers (title TEXT, paperID NUMBER);"
      },
      {
        "question": "Give me those whose title contains \"Functional\".",
        "query": "SELECT * FROM papers WHERE title LIKE \"%Functional%\"",
        "schema": "CREATE TABLE Authorship (paperID NUMBER); CREATE TABLE Papers (title TEXT, paperID NUMBER);"
      },
      {
        "question": "Who wrote any of those? Give me the first names only.",
        "query": "SELECT t1.fname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE t3.title LIKE \"%Functional%\"",
        "schema": "CREATE TABLE Authors (fname TEXT, authID NUMBER, lname TEXT); CREATE TABLE Authorship (authID NUMBER, paperID NUMBER); CREATE TABLE Papers (paperID NUMBER, title TEXT);"
      }
    ],
    [
      {
        "question": "What are all the papers?",
        "query": "SELECT * FROM papers",
        "schema": "CREATE TABLE Authorship (paperID NUMBER); CREATE TABLE Papers (title TEXT, paperID NUMBER);"
      },
      {
        "question": "Give me those whose title contains \"Monadic\".",
        "query": "SELECT * FROM papers WHERE title LIKE \"%Monadic%\"",
        "schema": "CREATE TABLE Authorship (paperID NUMBER); CREATE TABLE Papers (paperID NUMBER, title TEXT);"
      },
      {
        "question": "Who wrote any of those? Give me the last names only.",
        "query": "SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE t3.title LIKE \"%Monadic%\"",
        "schema": "CREATE TABLE Authors (fname TEXT, authID NUMBER, lname TEXT); CREATE TABLE Papers (title TEXT, paperID NUMBER); CREATE TABLE Authorship (authID NUMBER, paperID NUMBER);"
      }
    ]
  ],
  "customers_card_transactions": [
    [
      {
        "question": "How many custmers are there?",
        "query": "SELECT count(*) FROM customers",
        "schema": "CREATE TABLE Accounts (account_id NUMBER, account_name TEXT, customer_id NUMBER); CREATE TABLE Customers_Cards (customer_id NUMBER, card_type_code TEXT, card_id NUMBER); CREATE TABLE Customers (customer_last_name TEXT, other_customer_details TEXT, customer_first_name TEXT, customer_id NUMBER); CREATE TABLE Financial_Transactions (account_id NUMBER);"
      },
      {
        "question": "How many customers are there that have account name 162?",
        "query": "SELECT count(*) FROM accounts AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id WHERE t1.account_name = \"162\"",
        "schema": "CREATE TABLE Financial_Transactions (account_id NUMBER); CREATE TABLE Accounts (account_id NUMBER, account_name TEXT, customer_id NUMBER); CREATE TABLE Customers (other_customer_details TEXT, customer_last_name TEXT, customer_first_name TEXT, customer_address TEXT, customer_id NUMBER); CREATE TABLE Customers_Cards (card_id NUMBER, customer_id NUMBER, card_type_code TEXT);"
      },
      {
        "question": "Show his first name, last name, and phone.",
        "query": "SELECT t2.customer_first_name , t2.customer_last_name , t2.customer_phone FROM accounts AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id WHERE t1.account_name = \"162\"",
        "schema": "CREATE TABLE Customers (customer_address TEXT, customer_id NUMBER, other_customer_details TEXT, customer_phone TEXT, customer_last_name TEXT, customer_first_name TEXT); CREATE TABLE Financial_Transactions (account_id NUMBER); CREATE TABLE Customers_Cards (card_id NUMBER, card_type_code TEXT, customer_id NUMBER); CREATE TABLE Accounts (account_id NUMBER, customer_id NUMBER, account_name TEXT);"
      }
    ],
    [
      {
        "question": "Show the information of the customer with first name Art and last name Turcotte.",
        "query": "SELECT * FROM customers WHERE customer_first_name = \"Art\" AND customer_last_name = \"Turcotte\"",
        "schema": "CREATE TABLE Customers_Cards (customer_id NUMBER); CREATE TABLE Customers (customer_id NUMBER, customer_first_name TEXT, customer_last_name TEXT); CREATE TABLE Accounts (account_name TEXT, customer_id NUMBER);"
      },
      {
        "question": "Please show the account information of this customer.",
        "query": "SELECT * FROM accounts AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id WHERE t2.customer_first_name = \"Art\" AND t2.customer_last_name = \"Turcotte\"",
        "schema": "CREATE TABLE Accounts (account_id NUMBER, customer_id NUMBER, account_name TEXT); CREATE TABLE Customers (customer_first_name TEXT, customer_id NUMBER, customer_last_name TEXT); CREATE TABLE Customers_Cards (customer_id NUMBER);"
      },
      {
        "question": "How many accounts are there?",
        "query": "SELECT count(*) FROM accounts AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id WHERE t2.customer_first_name = \"Art\" AND t2.customer_last_name = \"Turcotte\"",
        "schema": "CREATE TABLE Accounts (account_id NUMBER, account_name TEXT, customer_id NUMBER); CREATE TABLE Customers_Cards (customer_id NUMBER); CREATE TABLE Customers (customer_first_name TEXT, customer_id NUMBER, customer_last_name TEXT);"
      }
    ],
    [
      {
        "question": "How many accounts are there?",
        "query": "SELECT count(*) FROM accounts",
        "schema": "CREATE TABLE Customers (customer_first_name TEXT, customer_id NUMBER, customer_last_name TEXT); CREATE TABLE Customers_Cards (customer_id NUMBER); CREATE TABLE Accounts (customer_id NUMBER, account_name TEXT, other_account_details TEXT, account_id NUMBER); CREATE TABLE Financial_Transactions (account_id NUMBER);"
      },
      {
        "question": "How many accounts does each customer have?",
        "query": "SELECT customer_id, count(*) FROM accounts GROUP BY customer_id",
        "schema": "CREATE TABLE Financial_Transactions (account_id NUMBER); CREATE TABLE Accounts (other_account_details TEXT, account_name TEXT, account_id NUMBER, customer_id NUMBER); CREATE TABLE Customers (customer_first_name TEXT, customer_id NUMBER, other_customer_details TEXT, customer_last_name TEXT); CREATE TABLE Customers_Cards (customer_id NUMBER);"
      },
      {
        "question": "Which customer has most accounts? Show its id.",
        "query": "SELECT customer_id FROM accounts GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Customers_Cards (customer_id NUMBER); CREATE TABLE Customers (other_customer_details TEXT, customer_last_name TEXT, customer_first_name TEXT, customer_id NUMBER); CREATE TABLE Financial_Transactions (account_id NUMBER); CREATE TABLE Accounts (account_name TEXT, customer_id NUMBER, account_id NUMBER, other_account_details TEXT);"
      },
      {
        "question": "Please also show the number of his accounts.",
        "query": "SELECT customer_id , count(*) FROM accounts GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Financial_Transactions (account_id NUMBER); CREATE TABLE Customers_Cards (customer_id NUMBER); CREATE TABLE Accounts (other_account_details TEXT, account_name TEXT, account_id NUMBER, customer_id NUMBER); CREATE TABLE Customers (other_customer_details TEXT, customer_first_name TEXT, customer_last_name TEXT, customer_id NUMBER);"
      }
    ],
    [
      {
        "question": "How many accounts are there?",
        "query": "SELECT count(*) FROM accounts",
        "schema": "CREATE TABLE Customers_Cards (customer_id NUMBER); CREATE TABLE Accounts (account_name TEXT, customer_id NUMBER, account_id NUMBER, other_account_details TEXT); CREATE TABLE Customers (customer_last_name TEXT, customer_id NUMBER, customer_first_name TEXT); CREATE TABLE Financial_Transactions (account_id NUMBER);"
      },
      {
        "question": "Which customer has least number of accounts?",
        "query": "SELECT t2.customer_first_name , t2.customer_last_name FROM accounts AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id GROUP BY t1.customer_id ORDER BY count(*) ASC LIMIT 1",
        "schema": "CREATE TABLE Customers_Cards (customer_id NUMBER); CREATE TABLE Financial_Transactions (account_id NUMBER); CREATE TABLE Accounts (account_id NUMBER, other_account_details TEXT, customer_id NUMBER, account_name TEXT); CREATE TABLE Customers (customer_phone TEXT, customer_last_name TEXT, customer_first_name TEXT, customer_id NUMBER, other_customer_details TEXT, customer_email TEXT);"
      },
      {
        "question": "Please also show his id.",
        "query": "SELECT t2.customer_first_name , t2.customer_last_name , t1.customer_id FROM accounts AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id GROUP BY t1.customer_id ORDER BY count(*) ASC LIMIT 1",
        "schema": "CREATE TABLE Accounts (account_name TEXT, customer_id NUMBER, account_id NUMBER, other_account_details TEXT); CREATE TABLE Financial_Transactions (account_id NUMBER); CREATE TABLE Customers_Cards (customer_id NUMBER); CREATE TABLE Customers (customer_phone TEXT, customer_id NUMBER, customer_email TEXT, other_customer_details TEXT, customer_first_name TEXT, customer_last_name TEXT);"
      }
    ],
    [
      {
        "question": "How many customer are there?",
        "query": "SELECT count(*) FROM customers",
        "schema": "CREATE TABLE Accounts (account_id NUMBER, customer_id NUMBER); CREATE TABLE Customers (customer_id NUMBER, customer_phone TEXT, other_customer_details TEXT, customer_address TEXT, customer_first_name TEXT, customer_last_name TEXT); CREATE TABLE Customers_Cards (customer_id NUMBER, card_number TEXT, card_type_code TEXT, card_id NUMBER, other_card_details TEXT);"
      },
      {
        "question": "How many accounts are there?",
        "query": "SELECT count(*) FROM accounts",
        "schema": "CREATE TABLE Customers (customer_phone TEXT, customer_last_name TEXT, customer_first_name TEXT, customer_id NUMBER, customer_address TEXT, other_customer_details TEXT); CREATE TABLE Customers_Cards (other_card_details TEXT, card_id NUMBER, card_type_code TEXT, customer_id NUMBER, card_number TEXT); CREATE TABLE Financial_Transactions (account_id NUMBER); CREATE TABLE Accounts (customer_id NUMBER, account_name TEXT, account_id NUMBER);"
      },
      {
        "question": "So, how many customers are there that does not have an account?",
        "query": "SELECT count(*) FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM accounts)",
        "schema": "CREATE TABLE Customers_Cards (card_type_code TEXT, customer_id NUMBER, card_number TEXT, other_card_details TEXT, card_id NUMBER); CREATE TABLE Accounts (account_id NUMBER, account_name TEXT, customer_id NUMBER); CREATE TABLE Customers (customer_last_name TEXT, customer_first_name TEXT, customer_address TEXT, customer_phone TEXT, other_customer_details TEXT, customer_id NUMBER); CREATE TABLE Financial_Transactions (account_id NUMBER);"
      }
    ],
    [
      {
        "question": "How many customers are there?",
        "query": "SELECT count(*) FROM customers",
        "schema": "CREATE TABLE Customers_Cards (other_card_details TEXT, customer_id NUMBER, card_type_code TEXT, card_id NUMBER, card_number TEXT); CREATE TABLE Customers (customer_id NUMBER, customer_last_name TEXT, customer_address TEXT, customer_phone TEXT, other_customer_details TEXT, customer_first_name TEXT); CREATE TABLE Accounts (account_name TEXT, account_id NUMBER, customer_id NUMBER);"
      },
      {
        "question": "Who have at least one accounts?",
        "query": "SELECT t1.customer_first_name , t1.customer_last_name FROM customers AS t1 JOIN accounts AS t2 ON t1.customer_id = t2.customer_id",
        "schema": "CREATE TABLE Accounts (customer_id NUMBER, account_id NUMBER, account_name TEXT); CREATE TABLE Customers (customer_phone TEXT, customer_last_name TEXT, other_customer_details TEXT, customer_address TEXT, customer_id NUMBER, customer_first_name TEXT); CREATE TABLE Customers_Cards (card_type_code TEXT, card_id NUMBER, customer_id NUMBER, other_card_details TEXT, card_number TEXT);"
      },
      {
        "question": "Who does not have any accounts?",
        "query": "SELECT customer_first_name , customer_last_name FROM customers EXCEPT SELECT t1.customer_first_name , t1.customer_last_name FROM customers AS t1 JOIN accounts AS t2 ON t1.customer_id = t2.customer_id",
        "schema": "CREATE TABLE Accounts (account_id NUMBER, account_name TEXT, customer_id NUMBER); CREATE TABLE Customers (customer_first_name TEXT, customer_address TEXT, other_customer_details TEXT, customer_last_name TEXT, customer_phone TEXT, customer_id NUMBER); CREATE TABLE Customers_Cards (other_card_details TEXT, customer_id NUMBER, card_type_code TEXT, card_id NUMBER, card_number TEXT);"
      },
      {
        "question": "Show his first names and last names.",
        "query": "SELECT customer_first_name , customer_last_name FROM customers EXCEPT SELECT t1.customer_first_name , t1.customer_last_name FROM customers AS t1 JOIN accounts AS t2 ON t1.customer_id = t2.customer_id",
        "schema": "CREATE TABLE Customers_Cards (card_id NUMBER, card_type_code TEXT, other_card_details TEXT, card_number TEXT, customer_id NUMBER); CREATE TABLE Customers (other_customer_details TEXT, customer_address TEXT, customer_first_name TEXT, customer_phone TEXT, customer_last_name TEXT, customer_id NUMBER); CREATE TABLE Accounts (account_id NUMBER, customer_id NUMBER, account_name TEXT);"
      }
    ],
    [
      {
        "question": "What information do you have for the customer  with first name Aniyah and last name Feest?",
        "query": "SELECT * FROM customers WHERE customer_first_name = \"Aniyah\" AND customer_last_name = \"Feest\"",
        "schema": "CREATE TABLE Customers_Cards (customer_id NUMBER); CREATE TABLE Customers (customer_first_name TEXT, other_customer_details TEXT, customer_address TEXT, customer_last_name TEXT, customer_id NUMBER); CREATE TABLE Accounts (account_name TEXT, customer_id NUMBER);"
      },
      {
        "question": "Show her address please.",
        "query": "SELECT customer_address FROM customers WHERE customer_first_name = \"Aniyah\" AND customer_last_name = \"Feest\"",
        "schema": "CREATE TABLE Customers (other_customer_details TEXT, customer_last_name TEXT, customer_first_name TEXT, customer_address TEXT, customer_id NUMBER); CREATE TABLE Accounts (customer_id NUMBER, account_name TEXT); CREATE TABLE Customers_Cards (customer_id NUMBER);"
      },
      {
        "question": "What is the phone and email for this customer?",
        "query": "SELECT customer_phone , customer_email FROM customers WHERE customer_first_name = \"Aniyah\" AND customer_last_name = \"Feest\"",
        "schema": "CREATE TABLE Customers (other_customer_details TEXT, customer_address TEXT, customer_last_name TEXT, customer_first_name TEXT, customer_id NUMBER, customer_phone TEXT, customer_email TEXT); CREATE TABLE Customers_Cards (customer_id NUMBER); CREATE TABLE Accounts (customer_id NUMBER, account_name TEXT);"
      }
    ],
    [
      {
        "question": "How many cards are there?",
        "query": "SELECT count(*) FROM customers_cards",
        "schema": "CREATE TABLE Financial_Transactions (card_id NUMBER); CREATE TABLE Accounts (customer_id NUMBER, account_id NUMBER); CREATE TABLE Customers (customer_first_name TEXT, customer_last_name TEXT, customer_id NUMBER); CREATE TABLE Customers_Cards (card_type_code TEXT, customer_id NUMBER, card_number TEXT, other_card_details TEXT, card_id NUMBER);"
      },
      {
        "question": "Who has the card 4560596484842? Show full name.",
        "query": "SELECT t2.customer_first_name , t2.customer_last_name FROM customers_cards AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id WHERE t1.card_number = \"4560596484842\"",
        "schema": "CREATE TABLE Customers (customer_last_name TEXT, customer_id NUMBER, customer_first_name TEXT); CREATE TABLE Financial_Transactions (card_id NUMBER); CREATE TABLE Accounts (account_id NUMBER, account_name TEXT, customer_id NUMBER); CREATE TABLE Customers_Cards (card_type_code TEXT, customer_id NUMBER, card_id NUMBER, other_card_details TEXT, card_number TEXT);"
      },
      {
        "question": "Please also show his phone number.",
        "query": "SELECT t2.customer_first_name , t2.customer_last_name , t2.customer_phone FROM customers_cards AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id WHERE t1.card_number = \"4560596484842\"",
        "schema": "CREATE TABLE Accounts (customer_id NUMBER, account_id NUMBER, account_name TEXT); CREATE TABLE Customers_Cards (other_card_details TEXT, card_number TEXT, card_type_code TEXT, customer_id NUMBER, card_id NUMBER); CREATE TABLE Financial_Transactions (card_id NUMBER); CREATE TABLE Customers (customer_id NUMBER, customer_phone TEXT, customer_first_name TEXT, customer_last_name TEXT);"
      }
    ],
    [
      {
        "question": "What information can you provide for the customer Art Turcotte?",
        "query": "SELECT * FROM customers WHERE customer_first_name = \"Art\" AND customer_last_name = \"Turcotte\"",
        "schema": "CREATE TABLE Customers_Cards (card_id NUMBER, customer_id NUMBER); CREATE TABLE Accounts (account_name TEXT, customer_id NUMBER); CREATE TABLE Customers (customer_last_name TEXT, customer_first_name TEXT, customer_id NUMBER, other_customer_details TEXT);"
      },
      {
        "question": "What is his phone number?",
        "query": "SELECT customer_phone FROM customers WHERE customer_first_name = \"Art\" AND customer_last_name = \"Turcotte\"",
        "schema": "CREATE TABLE Customers_Cards (card_id NUMBER, customer_id NUMBER); CREATE TABLE Customers (customer_address TEXT, customer_phone TEXT, customer_last_name TEXT, other_customer_details TEXT, customer_first_name TEXT, customer_id NUMBER); CREATE TABLE Accounts (account_name TEXT, customer_id NUMBER);"
      },
      {
        "question": "How many cards does he have?",
        "query": "SELECT count(*) FROM customers_cards AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id WHERE t2.customer_first_name = \"Art\" AND t2.customer_last_name = \"Turcotte\"",
        "schema": "CREATE TABLE Customers_Cards (card_id NUMBER, card_number TEXT, customer_id NUMBER, card_type_code TEXT); CREATE TABLE Customers (other_customer_details TEXT, customer_first_name TEXT, customer_phone TEXT, customer_id NUMBER, customer_last_name TEXT, customer_address TEXT); CREATE TABLE Accounts (customer_id NUMBER, account_name TEXT);"
      }
    ]
  ],
  "local_govt_in_alabama": [
    [
      {
        "question": "List all the event ids with the type code being \"Death Proof\".",
        "query": "SELECT t1.event_id FROM EVENTS AS t1 JOIN services AS t2 ON t1.service_id = t2.service_id WHERE t2.service_type_code = 'Death Proof'",
        "schema": "CREATE TABLE Participants_in_Events (Event_ID NUMBER, Participant_ID NUMBER); CREATE TABLE Events (Service_ID NUMBER, Event_ID NUMBER); CREATE TABLE Participants (Participant_ID NUMBER, Participant_Type_Code TEXT); CREATE TABLE Services (Service_Type_Code TEXT, Service_ID NUMBER);"
      },
      {
        "question": "What about 'Marriage'?",
        "query": "SELECT t1.event_id FROM EVENTS AS t1 JOIN services AS t2 ON t1.service_id = t2.service_id WHERE t2.service_type_code = 'Marriage'",
        "schema": "CREATE TABLE Events (Service_ID NUMBER, Event_ID NUMBER); CREATE TABLE Participants (Participant_ID NUMBER, Participant_Type_Code TEXT); CREATE TABLE Participants_in_Events (Event_ID NUMBER, Participant_ID NUMBER); CREATE TABLE Services (Service_Type_Code TEXT, Service_ID NUMBER);"
      },
      {
        "question": "What are the event details of them?",
        "query": "SELECT t1.event_details FROM EVENTS AS t1 JOIN services AS t2 ON t1.service_id = t2.service_id WHERE t2.service_type_code = 'Marriage'",
        "schema": "CREATE TABLE Participants (Participant_ID NUMBER, Participant_Type_Code TEXT); CREATE TABLE Events (Event_ID NUMBER, Service_ID NUMBER, Event_Details TEXT); CREATE TABLE Participants_in_Events (Event_ID NUMBER, Participant_ID NUMBER); CREATE TABLE Services (Service_Type_Code TEXT, Service_ID NUMBER);"
      }
    ],
    [
      {
        "question": "How many participants are there for event 3?",
        "query": "SELECT count(*) FROM EVENTS AS t1 JOIN participants_in_events AS t2 ON t1.event_id = t2.event_id WHERE t1.event_id = 3",
        "schema": "CREATE TABLE Participants (Participant_Type_Code TEXT, Participant_ID NUMBER); CREATE TABLE Events (Event_Details TEXT, Event_ID NUMBER); CREATE TABLE Participants_in_Events (Participant_ID NUMBER, Event_ID NUMBER);"
      },
      {
        "question": "How many events have 3 participants, list the event id and details.",
        "query": "SELECT t1.event_id , t1.event_details FROM EVENTS AS t1 JOIN participants_in_events AS t2 ON t1.event_id = t2.event_id GROUP BY t1.event_id HAVING count(*) = 3",
        "schema": "CREATE TABLE Participants_in_Events (Participant_ID NUMBER, Event_ID NUMBER); CREATE TABLE Events (Event_Details TEXT, Event_ID NUMBER); CREATE TABLE Participants (Participant_ID NUMBER, Participant_Type_Code TEXT, Participant_Details TEXT);"
      },
      {
        "question": "What about more than one participants?",
        "query": "SELECT t1.event_id , t1.event_details FROM EVENTS AS t1 JOIN participants_in_events AS t2 ON t1.event_id = t2.event_id GROUP BY t1.event_id HAVING count(*) > 1",
        "schema": "CREATE TABLE Events (Event_ID NUMBER, Event_Details TEXT); CREATE TABLE Participants_in_Events (Participant_ID NUMBER, Event_ID NUMBER); CREATE TABLE Participants (Participant_ID NUMBER, Participant_Details TEXT, Participant_Type_Code TEXT);"
      }
    ],
    [
      {
        "question": "List all the events that participant 66 has joined.",
        "query": "SELECT * FROM participants AS t1 JOIN participants_in_events AS t2 ON t1.participant_id = t2.participant_id WHERE t2.participant_id = 66",
        "schema": "CREATE TABLE Participants (Participant_ID NUMBER, Participant_Details TEXT); CREATE TABLE Events (Event_ID NUMBER, Event_Details TEXT); CREATE TABLE Participants_in_Events (Participant_ID NUMBER, Event_ID NUMBER);"
      },
      {
        "question": "How many events are there?",
        "query": "SELECT count(*) FROM participants AS t1 JOIN participants_in_events AS t2 ON t1.participant_id = t2.participant_id WHERE t2.participant_id = 66",
        "schema": "CREATE TABLE Events (Event_ID NUMBER, Event_Details TEXT); CREATE TABLE Participants_in_Events (Participant_ID NUMBER, Event_ID NUMBER); CREATE TABLE Participants (Participant_Details TEXT, Participant_ID NUMBER);"
      },
      {
        "question": "Show how many events for each participant that one has attended, keep the participant id, type and the count.",
        "query": "SELECT t1.participant_id , t1.participant_type_code , count(*) FROM participants AS t1 JOIN participants_in_events AS t2 ON t1.participant_id = t2.participant_id GROUP BY t1.participant_id",
        "schema": "CREATE TABLE Participants_in_Events (Event_ID NUMBER, Participant_ID NUMBER); CREATE TABLE Participants (Participant_Type_Code TEXT, Participant_ID NUMBER, Participant_Details TEXT); CREATE TABLE Events (Event_Details TEXT, Event_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show all the information about participants.",
        "query": "SELECT * FROM participants",
        "schema": "CREATE TABLE Participants_in_Events (Participant_ID NUMBER, Event_ID NUMBER); CREATE TABLE Participants (Participant_ID NUMBER, Participant_Type_Code TEXT, Participant_Details TEXT); CREATE TABLE Events (Event_ID NUMBER);"
      },
      {
        "question": "What are the participant ids, type code and details about them?",
        "query": "SELECT participant_id , participant_type_code , participant_details FROM participants",
        "schema": "CREATE TABLE Events (Event_ID NUMBER); CREATE TABLE Participants (Participant_Details TEXT, Participant_Type_Code TEXT, Participant_ID NUMBER); CREATE TABLE Participants_in_Events (Event_ID NUMBER, Participant_ID NUMBER);"
      }
    ],
    [
      {
        "question": "How many unique participant types are there?",
        "query": "SELECT count(DISTINCT participant_type_code) FROM participants",
        "schema": "CREATE TABLE Participants (Participant_Type_Code TEXT, Participant_Details TEXT, Participant_ID NUMBER);"
      },
      {
        "question": "How many people are with the type 'Participant'?",
        "query": "SELECT count(*) FROM participants WHERE participant_type_code = 'Participant'",
        "schema": "CREATE TABLE Participants (Participant_Details TEXT, Participant_ID NUMBER, Participant_Type_Code TEXT);"
      },
      {
        "question": "What about 'Organizer'?",
        "query": "SELECT count(*) FROM participants WHERE participant_type_code = 'Organizer'",
        "schema": "CREATE TABLE Participants (Participant_ID NUMBER, Participant_Details TEXT, Participant_Type_Code TEXT);"
      }
    ],
    [
      {
        "question": "How many service type codes are there?",
        "query": "SELECT count(service_type_code) FROM services",
        "schema": "CREATE TABLE Services (Service_Type_Code TEXT, Service_ID NUMBER); CREATE TABLE Events (Service_ID NUMBER); CREATE TABLE Participants (Participant_Type_Code TEXT);"
      },
      {
        "question": "Order them in alphabetical order.",
        "query": "SELECT service_type_code FROM services ORDER BY service_type_code",
        "schema": "CREATE TABLE Events (Service_ID NUMBER); CREATE TABLE Participants (Participant_Type_Code TEXT); CREATE TABLE Services (Service_ID NUMBER, Service_Type_Code TEXT);"
      }
    ],
    [
      {
        "question": "List all the information about events.",
        "query": "SELECT * FROM EVENTS",
        "schema": "CREATE TABLE Participants_in_Events (Event_ID NUMBER, Participant_ID NUMBER); CREATE TABLE Participants (Participant_ID NUMBER); CREATE TABLE Events (Event_ID NUMBER, Event_Details TEXT);"
      },
      {
        "question": "Only keep service id and details.",
        "query": "SELECT service_id , event_details FROM EVENTS",
        "schema": "CREATE TABLE Participants_in_Events (Participant_ID NUMBER, Event_ID NUMBER); CREATE TABLE Participants (Participant_ID NUMBER); CREATE TABLE Services (Service_Type_Code TEXT, Service_ID NUMBER); CREATE TABLE Events (Service_ID NUMBER, Event_ID NUMBER, Event_Details TEXT);"
      }
    ],
    [
      {
        "question": "How many events are there in total?",
        "query": "SELECT count(*) FROM participants",
        "schema": "CREATE TABLE Participants (Participant_ID NUMBER); CREATE TABLE Events (Event_Details TEXT, Event_ID NUMBER); CREATE TABLE Participants_in_Events (Participant_ID NUMBER, Event_ID NUMBER);"
      },
      {
        "question": "Among those, which of them had participants whose details had the substring 'Miss'",
        "query": "SELECT * FROM participants AS t1 JOIN participants_in_events AS t2 ON t1.participant_id = t2.participant_id WHERE t1.participant_details LIKE '%Miss%'",
        "schema": "CREATE TABLE Participants_in_Events (Participant_ID NUMBER, Event_ID NUMBER); CREATE TABLE Participants (Participant_Details TEXT, Participant_ID NUMBER, Participant_Type_Code TEXT); CREATE TABLE Events (Event_Details TEXT, Event_ID NUMBER);"
      },
      {
        "question": "What about 'Dr.'?",
        "query": "SELECT * FROM participants AS t1 JOIN participants_in_events AS t2 ON t1.participant_id = t2.participant_id WHERE t1.participant_details LIKE '%Dr.%'",
        "schema": "CREATE TABLE Participants (Participant_Type_Code TEXT, Participant_Details TEXT, Participant_ID NUMBER); CREATE TABLE Participants_in_Events (Event_ID NUMBER, Participant_ID NUMBER); CREATE TABLE Events (Event_ID NUMBER, Event_Details TEXT);"
      },
      {
        "question": "How many are there in total?",
        "query": "SELECT count(*) FROM participants AS t1 JOIN participants_in_events AS t2 ON t1.participant_id = t2.participant_id WHERE t1.participant_details LIKE '%Dr.%'",
        "schema": "CREATE TABLE Events (Event_Details TEXT, Event_ID NUMBER); CREATE TABLE Participants_in_Events (Event_ID NUMBER, Participant_ID NUMBER); CREATE TABLE Participants (Participant_ID NUMBER, Participant_Details TEXT, Participant_Type_Code TEXT);"
      }
    ],
    [
      {
        "question": "List all the participant types.",
        "query": "SELECT participant_type_code FROM participants",
        "schema": "CREATE TABLE Participants (Participant_Details TEXT, Participant_Type_Code TEXT, Participant_ID NUMBER);"
      },
      {
        "question": "How many unique participant types are there?",
        "query": "SELECT count(DISTINCT participant_type_code) FROM participants",
        "schema": "CREATE TABLE Participants (Participant_ID NUMBER, Participant_Details TEXT, Participant_Type_Code TEXT);"
      },
      {
        "question": "Among those which one is the most popular one?",
        "query": "SELECT participant_type_code FROM participants GROUP BY participant_type_code ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Participants (Participant_Type_Code TEXT, Participant_Details TEXT, Participant_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Count the number of participants for each event.",
        "query": "SELECT event_id,count(*) FROM participants_in_events GROUP BY event_id",
        "schema": "CREATE TABLE Participants (Participant_ID NUMBER); CREATE TABLE Participants_in_Events (Event_ID NUMBER, Participant_ID NUMBER); CREATE TABLE Events (Event_ID NUMBER, Event_Details TEXT);"
      },
      {
        "question": "Among those, which event id has the least participants?",
        "query": "SELECT event_id FROM participants_in_events GROUP BY event_id ORDER BY count(*) ASC LIMIT 1",
        "schema": "CREATE TABLE Participants (Participant_ID NUMBER); CREATE TABLE Events (Event_ID NUMBER, Event_Details TEXT); CREATE TABLE Participants_in_Events (Participant_ID NUMBER, Event_ID NUMBER);"
      },
      {
        "question": "What service id is it?",
        "query": "SELECT service_id FROM EVENTS WHERE event_id = (SELECT event_id FROM participants_in_events GROUP BY event_id ORDER BY count(*) ASC LIMIT 1)",
        "schema": "CREATE TABLE Participants (Participant_ID NUMBER); CREATE TABLE Events (Service_ID NUMBER, Event_ID NUMBER, Event_Details TEXT); CREATE TABLE Participants_in_Events (Event_ID NUMBER, Participant_ID NUMBER); CREATE TABLE Services (Service_Type_Code TEXT, Service_ID NUMBER);"
      },
      {
        "question": "Also list the service type of it.",
        "query": "SELECT t3.service_id , t4.service_type_code FROM participants AS t1 JOIN participants_in_events AS t2 ON t1.participant_id = t2.participant_id JOIN EVENTS AS t3 ON t2.event_id = t3.event_id JOIN services AS t4 ON t3.service_id = t4.service_id GROUP BY t3.service_id ORDER BY count(*) ASC LIMIT 1",
        "schema": "CREATE TABLE Services (Service_ID NUMBER, Service_Type_Code TEXT); CREATE TABLE Participants (Participant_ID NUMBER, Participant_Type_Code TEXT); CREATE TABLE Events (Service_ID NUMBER, Event_ID NUMBER, Event_Details TEXT); CREATE TABLE Participants_in_Events (Participant_ID NUMBER, Event_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Count the number of participants for each event.",
        "query": "SELECT event_id,count(*) FROM participants_in_events GROUP BY event_id",
        "schema": "CREATE TABLE Participants_in_Events (Participant_ID NUMBER, Event_ID NUMBER); CREATE TABLE Events (Event_Details TEXT, Event_ID NUMBER); CREATE TABLE Participants (Participant_ID NUMBER);"
      },
      {
        "question": "Among those, which event id has the least participants?",
        "query": "SELECT event_id FROM participants_in_events GROUP BY event_id ORDER BY count(*) ASC LIMIT 1",
        "schema": "CREATE TABLE Participants_in_Events (Event_ID NUMBER, Participant_ID NUMBER); CREATE TABLE Participants (Participant_ID NUMBER); CREATE TABLE Events (Event_ID NUMBER, Event_Details TEXT);"
      },
      {
        "question": "What about the one that has the mose participants?",
        "query": "SELECT event_id FROM participants_in_events GROUP BY event_id ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Participants (Participant_ID NUMBER); CREATE TABLE Participants_in_Events (Event_ID NUMBER, Participant_ID NUMBER); CREATE TABLE Events (Event_ID NUMBER, Event_Details TEXT);"
      }
    ],
    [
      {
        "question": "How many events are there?",
        "query": "SELECT count(*) FROM EVENTS",
        "schema": "CREATE TABLE Participants (Participant_ID NUMBER); CREATE TABLE Participants_in_Events (Participant_ID NUMBER, Event_ID NUMBER); CREATE TABLE Events (Event_Details TEXT, Event_ID NUMBER);"
      },
      {
        "question": "List the events that have participant details with 'Lupe Deckow'?",
        "query": "SELECT * FROM participants WHERE participant_details = 'Lupe Deckow'",
        "schema": "CREATE TABLE Events (Event_Details TEXT, Event_ID NUMBER); CREATE TABLE Participants_in_Events (Event_ID NUMBER, Participant_ID NUMBER); CREATE TABLE Participants (Participant_Details TEXT, Participant_Type_Code TEXT, Participant_ID NUMBER);"
      },
      {
        "question": "What about the ones with 'Kenyatta Kuhn'?",
        "query": "SELECT * FROM participants WHERE participant_details = 'Kenyatta Kuhn'",
        "schema": "CREATE TABLE Events (Event_ID NUMBER, Event_Details TEXT); CREATE TABLE Participants_in_Events (Participant_ID NUMBER, Event_ID NUMBER); CREATE TABLE Participants (Participant_Details TEXT, Participant_ID NUMBER, Participant_Type_Code TEXT);"
      },
      {
        "question": "Show the id of the events where the above participants did not participate.",
        "query": "SELECT event_id FROM EVENTS EXCEPT SELECT t1.event_id FROM participants_in_events AS t1 JOIN participants AS t2 ON t1.participant_id = t2.participant_id WHERE participant_details = 'Kenyatta Kuhn'",
        "schema": "CREATE TABLE Participants_in_Events (Participant_ID NUMBER, Event_ID NUMBER); CREATE TABLE Participants (Participant_ID NUMBER, Participant_Type_Code TEXT, Participant_Details TEXT); CREATE TABLE Events (Event_Details TEXT, Event_ID NUMBER);"
      }
    ],
    [
      {
        "question": "List all the service types.",
        "query": "SELECT service_type_code FROM services",
        "schema": "CREATE TABLE Services (Service_Type_Code TEXT, Service_ID NUMBER); CREATE TABLE Participants (Participant_Type_Code TEXT);"
      },
      {
        "question": "Which service code has successful details?",
        "query": "SELECT t1.service_type_code FROM services AS t1 JOIN EVENTS AS t2 ON t1.service_id = t2.service_id WHERE t2.event_details = 'Success'",
        "schema": "CREATE TABLE Participants (Participant_Type_Code TEXT); CREATE TABLE Services (Service_ID NUMBER, Service_Type_Code TEXT); CREATE TABLE Events (Service_ID NUMBER, Event_Details TEXT);"
      },
      {
        "question": "Then which has both successful and failure event details?",
        "query": "SELECT t1.service_type_code FROM services AS t1 JOIN EVENTS AS t2 ON t1.service_id = t2.service_id WHERE t2.event_details = 'Success' INTERSECT SELECT t1.service_type_code FROM services AS t1 JOIN EVENTS AS t2 ON t1.service_id = t2.service_id WHERE t2.event_details = 'Fail'",
        "schema": "CREATE TABLE Participants (Participant_Type_Code TEXT); CREATE TABLE Events (Event_Details TEXT, Event_ID NUMBER, Service_ID NUMBER); CREATE TABLE Services (Service_Type_Code TEXT, Service_ID NUMBER);"
      }
    ],
    [
      {
        "question": "How many events are there?",
        "query": "SELECT count(*) FROM EVENTS",
        "schema": "CREATE TABLE Events (Event_Details TEXT, Event_ID NUMBER); CREATE TABLE Participants (Participant_ID NUMBER); CREATE TABLE Participants_in_Events (Participant_ID NUMBER, Event_ID NUMBER);"
      },
      {
        "question": "List all the event ids.",
        "query": "SELECT event_id FROM participants_in_events",
        "schema": "CREATE TABLE Participants_in_Events (Participant_ID NUMBER, Event_ID NUMBER); CREATE TABLE Participants (Participant_ID NUMBER); CREATE TABLE Events (Event_ID NUMBER, Event_Details TEXT);"
      },
      {
        "question": "Show all the event information if the event has someone participated.",
        "query": "SELECT * FROM EVENTS WHERE event_id IN (SELECT event_id FROM participants_in_events)",
        "schema": "CREATE TABLE Participants_in_Events (Participant_ID NUMBER, Event_ID NUMBER); CREATE TABLE Events (Event_ID NUMBER, Event_Details TEXT); CREATE TABLE Participants (Participant_ID NUMBER);"
      },
      {
        "question": "How about nobody has participated?",
        "query": "SELECT * FROM EVENTS WHERE event_id NOT IN (SELECT event_id FROM participants_in_events)",
        "schema": "CREATE TABLE Participants (Participant_ID NUMBER); CREATE TABLE Participants_in_Events (Participant_ID NUMBER, Event_ID NUMBER); CREATE TABLE Events (Event_Details TEXT, Event_ID NUMBER);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT count(*) FROM EVENTS WHERE event_id NOT IN (SELECT event_id FROM participants_in_events)",
        "schema": "CREATE TABLE Participants_in_Events (Participant_ID NUMBER, Event_ID NUMBER); CREATE TABLE Events (Event_ID NUMBER, Event_Details TEXT); CREATE TABLE Participants (Participant_ID NUMBER);"
      }
    ]
  ],
  "body_builder": [
    [
      {
        "question": "Show all body builder information.",
        "query": "SELECT * FROM body_builder",
        "schema": "CREATE TABLE body_builder (Body_Builder_ID NUMBER, People_ID NUMBER, Total NUMBER); CREATE TABLE people (People_ID NUMBER);"
      },
      {
        "question": "Then how many are there?",
        "query": "SELECT count(*) FROM body_builder",
        "schema": "CREATE TABLE body_builder (Body_Builder_ID NUMBER, Total NUMBER, People_ID NUMBER); CREATE TABLE people (People_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What are the total scores for each body builder?",
        "query": "SELECT total FROM body_builder",
        "schema": "CREATE TABLE people (People_ID NUMBER); CREATE TABLE body_builder (Total NUMBER, People_ID NUMBER, Body_Builder_ID NUMBER);"
      },
      {
        "question": "How do you order them in ascending order?",
        "query": "SELECT total FROM body_builder ORDER BY total ASC",
        "schema": "CREATE TABLE body_builder (People_ID NUMBER, Body_Builder_ID NUMBER, Total NUMBER); CREATE TABLE people (People_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What are the snatch scores of each body builder?",
        "query": "SELECT snatch FROM body_builder",
        "schema": "CREATE TABLE people (Name TEXT, People_ID NUMBER); CREATE TABLE body_builder (Snatch NUMBER, Total NUMBER, People_ID NUMBER, Body_Builder_ID NUMBER);"
      },
      {
        "question": "What are the snatch score and clean jerk score of each body_builder?",
        "query": "SELECT snatch , clean_jerk FROM body_builder",
        "schema": "CREATE TABLE body_builder (Clean_Jerk NUMBER, Total NUMBER, Body_Builder_ID NUMBER, People_ID NUMBER, Snatch NUMBER); CREATE TABLE people (People_ID NUMBER, Name TEXT);"
      },
      {
        "question": "Order the results in ascending order of snatch score.",
        "query": "SELECT snatch , clean_jerk FROM body_builder ORDER BY snatch ASC",
        "schema": "CREATE TABLE people (Name TEXT, People_ID NUMBER); CREATE TABLE body_builder (Clean_Jerk NUMBER, Snatch NUMBER, Total NUMBER, People_ID NUMBER, Body_Builder_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What is the snatch score of each body builder?",
        "query": "SELECT snatch FROM body_builder",
        "schema": "CREATE TABLE body_builder (People_ID NUMBER, Snatch NUMBER, Body_Builder_ID NUMBER, Total NUMBER); CREATE TABLE people (People_ID NUMBER, Name TEXT);"
      },
      {
        "question": "What is the minimum value of the them?",
        "query": "SELECT min(snatch) FROM body_builder",
        "schema": "CREATE TABLE body_builder (People_ID NUMBER, Snatch NUMBER, Body_Builder_ID NUMBER, Total NUMBER); CREATE TABLE people (Name TEXT, Weight NUMBER, People_ID NUMBER);"
      },
      {
        "question": "What about the mean value?",
        "query": "SELECT avg(snatch) FROM body_builder",
        "schema": "CREATE TABLE body_builder (Total NUMBER, People_ID NUMBER, Snatch NUMBER, Body_Builder_ID NUMBER); CREATE TABLE people (Name TEXT, People_ID NUMBER, Weight NUMBER);"
      }
    ],
    [
      {
        "question": "What are all the information about the body builders?",
        "query": "SELECT * FROM body_builder",
        "schema": "CREATE TABLE body_builder (People_ID NUMBER, Body_Builder_ID NUMBER); CREATE TABLE people (People_ID NUMBER);"
      },
      {
        "question": "Which have the top three total score?",
        "query": "SELECT * FROM body_builder ORDER BY total DESC LIMIT 3",
        "schema": "CREATE TABLE body_builder (Total NUMBER, Body_Builder_ID NUMBER, People_ID NUMBER); CREATE TABLE people (People_ID NUMBER);"
      },
      {
        "question": "What about top one?",
        "query": "SELECT * FROM body_builder ORDER BY total DESC LIMIT 1",
        "schema": "CREATE TABLE body_builder (Total NUMBER, People_ID NUMBER, Body_Builder_ID NUMBER); CREATE TABLE people (People_ID NUMBER);"
      },
      {
        "question": "Show the clean and jerk score of it.",
        "query": "SELECT clean_jerk FROM body_builder ORDER BY total DESC LIMIT 1",
        "schema": "CREATE TABLE people (People_ID NUMBER); CREATE TABLE body_builder (Clean_Jerk NUMBER, Total NUMBER, People_ID NUMBER, Body_Builder_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show everything about the people.",
        "query": "SELECT * FROM people",
        "schema": "CREATE TABLE people (Name TEXT, People_ID NUMBER); CREATE TABLE body_builder (Body_Builder_ID NUMBER, People_ID NUMBER);"
      },
      {
        "question": "What are the birthdays?",
        "query": "SELECT birth_date FROM people",
        "schema": "CREATE TABLE people (Name TEXT, Birth_Date TEXT, People_ID NUMBER, Birth_Place TEXT); CREATE TABLE body_builder (People_ID NUMBER, Body_Builder_ID NUMBER);"
      },
      {
        "question": "Order the results in descending order of height.",
        "query": "SELECT birth_date FROM people ORDER BY height DESC",
        "schema": "CREATE TABLE body_builder (Body_Builder_ID NUMBER, People_ID NUMBER); CREATE TABLE people (People_ID NUMBER, Name TEXT, Birth_Date TEXT, Height NUMBER, Birth_Place TEXT);"
      },
      {
        "question": "What about ascending order?",
        "query": "SELECT birth_date FROM people ORDER BY height ASC",
        "schema": "CREATE TABLE people (Birth_Place TEXT, Birth_Date TEXT, Height NUMBER, People_ID NUMBER, Name TEXT); CREATE TABLE body_builder (People_ID NUMBER, Body_Builder_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What are the names of all the people?",
        "query": "SELECT name FROM people",
        "schema": "CREATE TABLE people (People_ID NUMBER, Name TEXT); CREATE TABLE body_builder (People_ID NUMBER);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT count(name) FROM people",
        "schema": "CREATE TABLE body_builder (People_ID NUMBER, Body_Builder_ID NUMBER); CREATE TABLE people (Name TEXT, People_ID NUMBER);"
      },
      {
        "question": "Show the names of body builders.",
        "query": "SELECT t2.name FROM body_builder AS t1 JOIN people AS t2 ON t1.people_id = t2.people_id",
        "schema": "CREATE TABLE body_builder (Body_Builder_ID NUMBER, People_ID NUMBER); CREATE TABLE people (People_ID NUMBER, Name TEXT);"
      }
    ],
    [
      {
        "question": "What are the names of all the people?",
        "query": "SELECT name FROM people",
        "schema": "CREATE TABLE body_builder (People_ID NUMBER); CREATE TABLE people (Name TEXT, People_ID NUMBER);"
      },
      {
        "question": "Show the names of body builders.",
        "query": "SELECT t2.name FROM body_builder AS t1 JOIN people AS t2 ON t1.people_id = t2.people_id",
        "schema": "CREATE TABLE body_builder (Body_Builder_ID NUMBER, People_ID NUMBER); CREATE TABLE people (People_ID NUMBER, Name TEXT);"
      },
      {
        "question": "Among those, which total score is higher than 200?",
        "query": "SELECT t2.name FROM body_builder AS t1 JOIN people AS t2 ON t1.people_id = t2.people_id WHERE t1.total > 200",
        "schema": "CREATE TABLE body_builder (Total NUMBER, Body_Builder_ID NUMBER, People_ID NUMBER); CREATE TABLE people (People_ID NUMBER, Height NUMBER, Name TEXT);"
      },
      {
        "question": "What about higher than 300?",
        "query": "SELECT t2.name FROM body_builder AS t1 JOIN people AS t2 ON t1.people_id = t2.people_id WHERE t1.total > 300",
        "schema": "CREATE TABLE body_builder (Total NUMBER, Body_Builder_ID NUMBER, People_ID NUMBER); CREATE TABLE people (Height NUMBER, Name TEXT, People_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What are the names of all the people?",
        "query": "SELECT name FROM people",
        "schema": "CREATE TABLE people (Name TEXT, People_ID NUMBER); CREATE TABLE body_builder (People_ID NUMBER);"
      },
      {
        "question": "Show the names of body builders.",
        "query": "SELECT t2.name FROM body_builder AS t1 JOIN people AS t2 ON t1.people_id = t2.people_id",
        "schema": "CREATE TABLE body_builder (People_ID NUMBER, Body_Builder_ID NUMBER); CREATE TABLE people (Name TEXT, People_ID NUMBER);"
      },
      {
        "question": "Show the names of them which has the greatest body weight.",
        "query": "SELECT t2.name FROM body_builder AS t1 JOIN people AS t2 ON t1.people_id = t2.people_id ORDER BY t2.weight DESC LIMIT 1",
        "schema": "CREATE TABLE people (People_ID NUMBER, Weight NUMBER, Name TEXT); CREATE TABLE body_builder (Total NUMBER, People_ID NUMBER, Body_Builder_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show the information of all the people.",
        "query": "SELECT * FROM people",
        "schema": "CREATE TABLE people (People_ID NUMBER, Name TEXT); CREATE TABLE body_builder (People_ID NUMBER, Body_Builder_ID NUMBER);"
      },
      {
        "question": "Show the Birth Date and Birth Place about each one.",
        "query": "SELECT birth_date, birth_place FROM people",
        "schema": "CREATE TABLE people (People_ID NUMBER, Birth_Date TEXT, Birth_Place TEXT, Name TEXT); CREATE TABLE body_builder (People_ID NUMBER, Body_Builder_ID NUMBER);"
      },
      {
        "question": "What about the body builders?",
        "query": "SELECT t2.birth_date , t2.birth_place FROM body_builder AS t1 JOIN people AS t2 ON t1.people_id = t2.people_id",
        "schema": "CREATE TABLE body_builder (Body_Builder_ID NUMBER, People_ID NUMBER); CREATE TABLE people (People_ID NUMBER, Birth_Place TEXT, Name TEXT, Birth_Date TEXT);"
      },
      {
        "question": "Among those, show the three which have the highest total points?",
        "query": "SELECT t2.birth_date , t2.birth_place FROM body_builder AS t1 JOIN people AS t2 ON t1.people_id = t2.people_id ORDER BY t1.total DESC LIMIT 3",
        "schema": "CREATE TABLE body_builder (Total NUMBER, People_ID NUMBER, Body_Builder_ID NUMBER); CREATE TABLE people (Birth_Place TEXT, Height NUMBER, Name TEXT, Birth_Date TEXT, People_ID NUMBER);"
      },
      {
        "question": "What about the highest total point?",
        "query": "SELECT t2.birth_date , t2.birth_place FROM body_builder AS t1 JOIN people AS t2 ON t1.people_id = t2.people_id ORDER BY t1.total DESC LIMIT 1",
        "schema": "CREATE TABLE body_builder (Body_Builder_ID NUMBER, People_ID NUMBER, Total NUMBER); CREATE TABLE people (Height NUMBER, Birth_Date TEXT, Name TEXT, People_ID NUMBER, Birth_Place TEXT);"
      }
    ],
    [
      {
        "question": "What are the heights of the people?",
        "query": "SELECT height FROM people",
        "schema": "CREATE TABLE body_builder (People_ID NUMBER); CREATE TABLE people (People_ID NUMBER, Name TEXT, Height NUMBER);"
      },
      {
        "question": "What is the average?",
        "query": "SELECT avg(height) FROM people",
        "schema": "CREATE TABLE body_builder (People_ID NUMBER, Total NUMBER); CREATE TABLE people (Name TEXT, Height NUMBER, People_ID NUMBER);"
      },
      {
        "question": "What are the heights of the body builders?",
        "query": "SELECT t2.height FROM body_builder AS t1 JOIN people AS t2 ON t1.people_id = t2.people_id",
        "schema": "CREATE TABLE body_builder (Body_Builder_ID NUMBER, Total NUMBER, People_ID NUMBER); CREATE TABLE people (Height NUMBER, Name TEXT, People_ID NUMBER);"
      },
      {
        "question": "For those results, which ones have weight larger than 91.0?",
        "query": "SELECT t2.height FROM body_builder AS t1 JOIN people AS t2 ON t1.people_id = t2.people_id WHERE t2.weight > 91.0",
        "schema": "CREATE TABLE body_builder (Body_Builder_ID NUMBER, People_ID NUMBER, Total NUMBER); CREATE TABLE people (Height NUMBER, Weight NUMBER, Name TEXT, People_ID NUMBER);"
      },
      {
        "question": "What about the total score is smaller than 315?",
        "query": "SELECT t2.height FROM body_builder AS t1 JOIN people AS t2 ON t1.people_id = t2.people_id WHERE t1.total < 315",
        "schema": "CREATE TABLE people (People_ID NUMBER, Weight NUMBER, Height NUMBER, Name TEXT); CREATE TABLE body_builder (People_ID NUMBER, Body_Builder_ID NUMBER, Total NUMBER);"
      }
    ],
    [
      {
        "question": "What are the total scores of body builder?",
        "query": "SELECT total FROM body_builder",
        "schema": "CREATE TABLE body_builder (People_ID NUMBER, Total NUMBER, Body_Builder_ID NUMBER); CREATE TABLE people (Name TEXT, People_ID NUMBER);"
      },
      {
        "question": "How about the average value of those scores?",
        "query": "SELECT avg(total) FROM body_builder",
        "schema": "CREATE TABLE people (People_ID NUMBER, Name TEXT); CREATE TABLE body_builder (People_ID NUMBER, Body_Builder_ID NUMBER, Total NUMBER);"
      },
      {
        "question": "What are the average scores of those results where the people weight is larger than 100.0?",
        "query": "SELECT avg(t1.total) FROM body_builder AS t1 JOIN people AS t2 ON t1.people_id = t2.people_id WHERE t2.weight > 100.0",
        "schema": "CREATE TABLE body_builder (Body_Builder_ID NUMBER, People_ID NUMBER, Total NUMBER); CREATE TABLE people (People_ID NUMBER, Name TEXT, Weight NUMBER);"
      },
      {
        "question": "What about the people height larger than 200?",
        "query": "SELECT avg(t1.total) FROM body_builder AS t1 JOIN people AS t2 ON t1.people_id = t2.people_id WHERE t2.height > 200",
        "schema": "CREATE TABLE body_builder (Total NUMBER, Body_Builder_ID NUMBER, People_ID NUMBER); CREATE TABLE people (Weight NUMBER, People_ID NUMBER, Name TEXT, Height NUMBER);"
      }
    ],
    [
      {
        "question": "What are the names of body builders?",
        "query": "SELECT t2.name FROM body_builder AS t1 JOIN people AS t2 ON t1.people_id = t2.people_id",
        "schema": "CREATE TABLE people (Name TEXT, People_ID NUMBER); CREATE TABLE body_builder (Body_Builder_ID NUMBER, People_ID NUMBER);"
      },
      {
        "question": "List these results in ascending order by the weight.",
        "query": "SELECT t2.name FROM body_builder AS t1 JOIN people AS t2 ON t1.people_id = t2.people_id ORDER BY t2.weight ASC",
        "schema": "CREATE TABLE body_builder (Body_Builder_ID NUMBER, Total NUMBER, People_ID NUMBER); CREATE TABLE people (Name TEXT, Weight NUMBER, People_ID NUMBER);"
      },
      {
        "question": "Now list them in descending order by the total score.",
        "query": "SELECT t2.name FROM body_builder AS t1 JOIN people AS t2 ON t1.people_id = t2.people_id ORDER BY t1.total DESC",
        "schema": "CREATE TABLE body_builder (Body_Builder_ID NUMBER, People_ID NUMBER, Total NUMBER); CREATE TABLE people (Weight NUMBER, Name TEXT, People_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What are the birth places?",
        "query": "SELECT birth_place FROM people",
        "schema": "CREATE TABLE people (People_ID NUMBER, Birth_Place TEXT, Birth_Date TEXT);"
      },
      {
        "question": "How many people in each birth place?",
        "query": "SELECT birth_place, count(*) FROM people GROUP BY birth_place",
        "schema": "CREATE TABLE people (Birth_Place TEXT, Name TEXT, Birth_Date TEXT, People_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What are the information of all the people?",
        "query": "SELECT * FROM people",
        "schema": "CREATE TABLE body_builder (Body_Builder_ID NUMBER, People_ID NUMBER); CREATE TABLE people (Name TEXT, People_ID NUMBER);"
      },
      {
        "question": "What are the birth places of all the people?",
        "query": "SELECT birth_place FROM people",
        "schema": "CREATE TABLE body_builder (People_ID NUMBER, Body_Builder_ID NUMBER); CREATE TABLE people (People_ID NUMBER, Birth_Place TEXT, Birth_Date TEXT, Name TEXT);"
      },
      {
        "question": "How many people in each of the birth place?",
        "query": "SELECT birth_place, count(*) FROM people GROUP BY birth_place",
        "schema": "CREATE TABLE body_builder (People_ID NUMBER, Body_Builder_ID NUMBER); CREATE TABLE people (Name TEXT, Birth_Place TEXT, People_ID NUMBER, Birth_Date TEXT);"
      },
      {
        "question": "What are the four most popular birth places?",
        "query": "SELECT birth_place FROM people GROUP BY birth_place ORDER BY count(*) DESC LIMIT 4",
        "schema": "CREATE TABLE people (Name TEXT, Birth_Date TEXT, People_ID NUMBER, Birth_Place TEXT); CREATE TABLE body_builder (People_ID NUMBER, Body_Builder_ID NUMBER);"
      },
      {
        "question": "What about top one?",
        "query": "SELECT birth_place FROM people GROUP BY birth_place ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE body_builder (Body_Builder_ID NUMBER, People_ID NUMBER); CREATE TABLE people (People_ID NUMBER, Height NUMBER, Birth_Place TEXT, Name TEXT, Birth_Date TEXT);"
      }
    ],
    [
      {
        "question": "What are the birth places of all the people?",
        "query": "SELECT birth_place FROM people",
        "schema": "CREATE TABLE body_builder (People_ID NUMBER); CREATE TABLE people (Name TEXT, Birth_Date TEXT, Birth_Place TEXT, People_ID NUMBER);"
      },
      {
        "question": "How many people in each of the birth place?",
        "query": "SELECT birth_place, count(*) FROM people GROUP BY birth_place",
        "schema": "CREATE TABLE body_builder (People_ID NUMBER); CREATE TABLE people (People_ID NUMBER, Birth_Place TEXT, Birth_Date TEXT, Name TEXT);"
      },
      {
        "question": "Keep the birth places where the birth place is only token by one person.",
        "query": "SELECT birth_place FROM people GROUP BY birth_place HAVING count(*) = 1",
        "schema": "CREATE TABLE body_builder (People_ID NUMBER); CREATE TABLE people (Birth_Place TEXT, People_ID NUMBER, Birth_Date TEXT, Name TEXT);"
      },
      {
        "question": "What about at least two people?",
        "query": "SELECT birth_place FROM people GROUP BY birth_place HAVING count(*) >= 2",
        "schema": "CREATE TABLE body_builder (People_ID NUMBER); CREATE TABLE people (Name TEXT, Birth_Date TEXT, People_ID NUMBER, Birth_Place TEXT);"
      }
    ],
    [
      {
        "question": "What are the heights and weights of all the people?",
        "query": "SELECT height , weight FROM people",
        "schema": "CREATE TABLE body_builder (People_ID NUMBER); CREATE TABLE people (Height NUMBER, Weight NUMBER, People_ID NUMBER);"
      },
      {
        "question": "Show those results in descending order?",
        "query": "SELECT height , weight FROM people ORDER BY height DESC",
        "schema": "CREATE TABLE body_builder (People_ID NUMBER); CREATE TABLE people (Height NUMBER, Weight NUMBER, People_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What information about all the body builders?",
        "query": "SELECT * FROM body_builder",
        "schema": "CREATE TABLE people (People_ID NUMBER); CREATE TABLE body_builder (Total NUMBER, People_ID NUMBER, Body_Builder_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show the name and birth place about the people.",
        "query": "SELECT name , birth_place FROM people",
        "schema": "CREATE TABLE people (Birth_Place TEXT, People_ID NUMBER, Birth_Date TEXT, Name TEXT);"
      },
      {
        "question": "Show that of all the body builders",
        "query": "SELECT t1.name , t1.birth_place FROM people AS t1 JOIN body_builder AS t2 ON t1.people_id = t2.people_id",
        "schema": "CREATE TABLE people (Birth_Place TEXT, Birth_Date TEXT, Name TEXT, People_ID NUMBER); CREATE TABLE body_builder (Body_Builder_ID NUMBER, People_ID NUMBER);"
      },
      {
        "question": "What are the name and birth place of people who are not body builders?",
        "query": "SELECT name , birth_place FROM people EXCEPT SELECT t1.name , t1.birth_place FROM people AS t1 JOIN body_builder AS t2 ON t1.people_id = t2.people_id",
        "schema": "CREATE TABLE body_builder (People_ID NUMBER, Body_Builder_ID NUMBER); CREATE TABLE people (Birth_Place TEXT, Birth_Date TEXT, People_ID NUMBER, Name TEXT);"
      }
    ],
    [
      {
        "question": "What are the birth places are there?",
        "query": "SELECT birth_place FROM people",
        "schema": "CREATE TABLE people (Birth_Place TEXT, Birth_Date TEXT, People_ID NUMBER);"
      },
      {
        "question": "What are the unique birth places?",
        "query": "SELECT DISTINCT birth_place FROM people",
        "schema": "CREATE TABLE people (Birth_Date TEXT, People_ID NUMBER, Birth_Place TEXT);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT count(DISTINCT birth_place) FROM people",
        "schema": "CREATE TABLE people (Birth_Place TEXT, People_ID NUMBER, Birth_Date TEXT, Name TEXT);"
      }
    ],
    [
      {
        "question": "Show the people Id of the body builders.",
        "query": "SELECT people_id FROM body_builder",
        "schema": "CREATE TABLE body_builder (Body_Builder_ID NUMBER, People_ID NUMBER); CREATE TABLE people (People_ID NUMBER);"
      },
      {
        "question": "Which people are there?",
        "query": "SELECT * FROM people WHERE people_id IN (SELECT people_id FROM body_builder)",
        "schema": "CREATE TABLE people (Name TEXT, People_ID NUMBER); CREATE TABLE body_builder (Body_Builder_ID NUMBER, People_ID NUMBER);"
      },
      {
        "question": "What about people who are not there?",
        "query": "SELECT * FROM people WHERE people_id NOT IN (SELECT people_id FROM body_builder)",
        "schema": "CREATE TABLE body_builder (Body_Builder_ID NUMBER, People_ID NUMBER); CREATE TABLE people (Name TEXT, People_ID NUMBER);"
      },
      {
        "question": "How many such people in total?",
        "query": "SELECT count(*) FROM people WHERE people_id NOT IN (SELECT people_id FROM body_builder)",
        "schema": "CREATE TABLE body_builder (People_ID NUMBER, Total NUMBER, Body_Builder_ID NUMBER); CREATE TABLE people (Name TEXT, People_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What are the weights of the body builders?",
        "query": "SELECT t2.weight FROM body_builder AS t1 JOIN people AS t2 ON t1.people_id = t2.people_id",
        "schema": "CREATE TABLE body_builder (Total NUMBER, Body_Builder_ID NUMBER, People_ID NUMBER); CREATE TABLE people (Weight NUMBER, People_ID NUMBER);"
      },
      {
        "question": "With those weights, keep the ones whose snatch score is higher 180.",
        "query": "SELECT t2.weight FROM body_builder AS t1 JOIN people AS t2 ON t1.people_id = t2.people_id WHERE t1.snatch > 180",
        "schema": "CREATE TABLE people (Height NUMBER, Weight NUMBER, People_ID NUMBER); CREATE TABLE body_builder (Total NUMBER, Body_Builder_ID NUMBER, People_ID NUMBER, Snatch NUMBER);"
      },
      {
        "question": "What about higher than 140 or the height is greater than 200?",
        "query": "SELECT t2.weight FROM body_builder AS t1 JOIN people AS t2 ON t1.people_id = t2.people_id WHERE t1.snatch > 140 OR t2.height > 200;",
        "schema": "CREATE TABLE people (Weight NUMBER, Height NUMBER, People_ID NUMBER); CREATE TABLE body_builder (Snatch NUMBER, People_ID NUMBER, Body_Builder_ID NUMBER, Total NUMBER);"
      }
    ],
    [
      {
        "question": "What are the total scores of the body builders",
        "query": "SELECT total FROM body_builder",
        "schema": "CREATE TABLE body_builder (Total NUMBER, People_ID NUMBER, Body_Builder_ID NUMBER); CREATE TABLE people (People_ID NUMBER);"
      },
      {
        "question": "Among those, show the one who was born in May.",
        "query": "SELECT t1.total FROM body_builder AS t1 JOIN people AS t2 ON t1.people_id = t2.people_id WHERE t2.birth_date LIKE \"%May%\";",
        "schema": "CREATE TABLE body_builder (People_ID NUMBER, Total NUMBER, Body_Builder_ID NUMBER); CREATE TABLE people (People_ID NUMBER, Birth_Date TEXT, Birth_Place TEXT, Name TEXT);"
      },
      {
        "question": "What about born in January?",
        "query": "SELECT t1.total FROM body_builder AS t1 JOIN people AS t2 ON t1.people_id = t2.people_id WHERE t2.birth_date LIKE \"%January%\";",
        "schema": "CREATE TABLE body_builder (Total NUMBER, Body_Builder_ID NUMBER, People_ID NUMBER); CREATE TABLE people (People_ID NUMBER, Name TEXT, Birth_Place TEXT, Birth_Date TEXT);"
      }
    ]
  ],
  "pilot_record": [
    [
      {
        "question": "List all the pilots.",
        "query": "SELECT * FROM pilot",
        "schema": "CREATE TABLE pilot_record (Pilot_ID NUMBER); CREATE TABLE pilot (Pilot_ID NUMBER, Rank NUMBER, Pilot_name TEXT);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT count(*) FROM pilot",
        "schema": "CREATE TABLE pilot_record (Pilot_ID NUMBER, Record_ID NUMBER); CREATE TABLE pilot (Rank NUMBER, Pilot_name TEXT, Pilot_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show all the pilot names",
        "query": "SELECT pilot_name FROM pilot",
        "schema": "CREATE TABLE pilot (Pilot_name TEXT, Pilot_ID NUMBER); CREATE TABLE pilot_record (Pilot_ID NUMBER);"
      },
      {
        "question": "How many in total?",
        "query": "SELECT count(pilot_name) FROM pilot",
        "schema": "CREATE TABLE pilot (Pilot_name TEXT, Pilot_ID NUMBER); CREATE TABLE pilot_record (Pilot_ID NUMBER);"
      },
      {
        "question": "Order them in ascending order of the rank.",
        "query": "SELECT pilot_name FROM pilot ORDER BY rank ASC",
        "schema": "CREATE TABLE pilot_record (Pilot_ID NUMBER); CREATE TABLE pilot (Pilot_name TEXT, Pilot_ID NUMBER, Rank NUMBER);"
      }
    ],
    [
      {
        "question": "Show all the pilot names and positions.",
        "query": "SELECT pilot_name, POSITION FROM pilot",
        "schema": "CREATE TABLE pilot (Pilot_name TEXT, Position TEXT, Pilot_ID NUMBER); CREATE TABLE pilot_record (Pilot_ID NUMBER);"
      },
      {
        "question": "What about the pilot names and their teams?",
        "query": "SELECT POSITION , team FROM pilot",
        "schema": "CREATE TABLE pilot_record (Pilot_ID NUMBER); CREATE TABLE pilot (Position TEXT, Pilot_name TEXT, Team TEXT, Pilot_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show all the pilot names and positions",
        "query": "SELECT pilot_name, POSITION FROM pilot",
        "schema": "CREATE TABLE pilot (Pilot_ID NUMBER, Position TEXT, Pilot_name TEXT); CREATE TABLE pilot_record (Pilot_ID NUMBER);"
      },
      {
        "question": "Show all the names and their age?",
        "query": "SELECT pilot_name, age FROM pilot",
        "schema": "CREATE TABLE pilot (Pilot_name TEXT, Pilot_ID NUMBER, Position TEXT, Age NUMBER); CREATE TABLE pilot_record (Pilot_ID NUMBER);"
      },
      {
        "question": "Keep those who are 37 years old.",
        "query": "SELECT pilot_name, age FROM pilot WHERE age = 37",
        "schema": "CREATE TABLE pilot_record (Pilot_ID NUMBER); CREATE TABLE pilot (Age NUMBER, Position TEXT, Pilot_name TEXT, Pilot_ID NUMBER);"
      },
      {
        "question": "Show the distinct positions of pilots older than 30.",
        "query": "SELECT DISTINCT POSITION FROM pilot WHERE age > 30",
        "schema": "CREATE TABLE pilot_record (Pilot_ID NUMBER); CREATE TABLE pilot (Age NUMBER, Pilot_ID NUMBER, Position TEXT, Pilot_name TEXT);"
      }
    ],
    [
      {
        "question": "List all pilot names with there team name.",
        "query": "SELECT pilot_name, team FROM pilot",
        "schema": "CREATE TABLE aircraft (Aircraft_ID NUMBER); CREATE TABLE pilot_record (Pilot_ID NUMBER); CREATE TABLE pilot (Team TEXT, Pilot_ID NUMBER, Pilot_name TEXT);"
      },
      {
        "question": "Among those, which are from the Team \"Bradley\"?",
        "query": "SELECT pilot_name FROM pilot WHERE team = \"Bradley\"",
        "schema": "CREATE TABLE aircraft (Aircraft_ID NUMBER); CREATE TABLE pilot (Pilot_name TEXT, Pilot_ID NUMBER, Team TEXT); CREATE TABLE pilot_record (Pilot_ID NUMBER);"
      },
      {
        "question": "What about \"Eau Claire High School\"?",
        "query": "SELECT pilot_name FROM pilot WHERE team = \"Eau Claire High School\"",
        "schema": "CREATE TABLE pilot_record (Pilot_ID NUMBER); CREATE TABLE aircraft (Aircraft_ID NUMBER); CREATE TABLE pilot (Pilot_name TEXT, Team TEXT, Pilot_ID NUMBER);"
      },
      {
        "question": "What about \"Bradley\" or \"Fordham\"?",
        "query": "SELECT pilot_name FROM pilot WHERE team = \"Bradley\" OR team = \"Fordham\"",
        "schema": "CREATE TABLE pilot (Pilot_name TEXT, Team TEXT, Pilot_ID NUMBER); CREATE TABLE aircraft (Aircraft_ID NUMBER); CREATE TABLE pilot_record (Pilot_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show all the pilot names and the join years.",
        "query": "SELECT pilot_name, join_year FROM pilot",
        "schema": "CREATE TABLE pilot (Join_Year NUMBER, Pilot_ID NUMBER, Pilot_name TEXT); CREATE TABLE aircraft (Order_Year NUMBER); CREATE TABLE pilot_record (Pilot_ID NUMBER);"
      },
      {
        "question": "How many unique years are there?",
        "query": "SELECT count(join_year) FROM pilot",
        "schema": "CREATE TABLE aircraft (Order_Year NUMBER); CREATE TABLE pilot_record (Pilot_ID NUMBER); CREATE TABLE pilot (Pilot_name TEXT, Pilot_ID NUMBER, Join_Year NUMBER);"
      },
      {
        "question": "List the years by the pilot rank in ascending order.",
        "query": "SELECT join_year FROM pilot ORDER BY rank ASC",
        "schema": "CREATE TABLE pilot_record (Pilot_ID NUMBER); CREATE TABLE aircraft (Order_Year NUMBER); CREATE TABLE pilot (Pilot_name TEXT, Pilot_ID NUMBER, Join_Year NUMBER, Rank NUMBER);"
      },
      {
        "question": "In which join year, the pilot has the highest rank?",
        "query": "SELECT join_year FROM pilot ORDER BY rank ASC LIMIT 1",
        "schema": "CREATE TABLE pilot (Pilot_ID NUMBER, Join_Year NUMBER, Rank NUMBER, Pilot_name TEXT); CREATE TABLE pilot_record (Pilot_ID NUMBER); CREATE TABLE aircraft (Order_Year NUMBER);"
      }
    ],
    [
      {
        "question": "Show the pilot names and their nationalities.",
        "query": "SELECT pilot_name, nationality FROM pilot",
        "schema": "CREATE TABLE pilot_record (Pilot_ID NUMBER); CREATE TABLE pilot (Nationality TEXT, Pilot_ID NUMBER, Pilot_name TEXT);"
      },
      {
        "question": "Which nationalities have the pilots whose position is \"Center Team\"?",
        "query": "SELECT nationality FROM pilot WHERE POSITION = \"Center Team\"",
        "schema": "CREATE TABLE pilot_record (Pilot_ID NUMBER); CREATE TABLE pilot (Pilot_name TEXT, Pilot_ID NUMBER, Nationality TEXT, Position TEXT, Team TEXT);"
      },
      {
        "question": "Show the nationalities and the number of pilots for each.",
        "query": "SELECT nationality, count(*) FROM pilot GROUP BY nationality",
        "schema": "CREATE TABLE pilot_record (Pilot_ID NUMBER); CREATE TABLE pilot (Pilot_ID NUMBER, Nationality TEXT, Position TEXT, Team TEXT, Pilot_name TEXT);"
      }
    ],
    [
      {
        "question": "Show the pilot names and their nationalities.",
        "query": "SELECT pilot_name, nationality FROM pilot",
        "schema": "CREATE TABLE pilot_record (Pilot_ID NUMBER); CREATE TABLE pilot (Pilot_ID NUMBER, Nationality TEXT, Pilot_name TEXT);"
      },
      {
        "question": "Which nationalities have the pilots who is younger than 34?",
        "query": "SELECT nationality FROM pilot WHERE age < 34",
        "schema": "CREATE TABLE pilot_record (Pilot_ID NUMBER); CREATE TABLE pilot (Pilot_name TEXT, Nationality TEXT, Age NUMBER, Pilot_ID NUMBER);"
      },
      {
        "question": "Show each one and the number of pilots.",
        "query": "SELECT nationality, count(*) FROM pilot GROUP BY nationality",
        "schema": "CREATE TABLE pilot (Pilot_ID NUMBER, Nationality TEXT, Age NUMBER, Pilot_name TEXT); CREATE TABLE pilot_record (Pilot_ID NUMBER);"
      },
      {
        "question": "Among those, which one is the most popular one?",
        "query": "SELECT nationality FROM pilot GROUP BY nationality ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE pilot_record (Pilot_ID NUMBER); CREATE TABLE pilot (Pilot_name TEXT, Nationality TEXT, Age NUMBER, Pilot_ID NUMBER);"
      }
    ],
    [
      {
        "question": "List all the  pilot positions.",
        "query": "SELECT POSITION FROM pilot",
        "schema": "CREATE TABLE aircraft (Aircraft_ID NUMBER); CREATE TABLE pilot (Pilot_ID NUMBER, Position TEXT); CREATE TABLE pilot_record (Pilot_ID NUMBER);"
      },
      {
        "question": "Keep the ones whose age is younger than 35",
        "query": "SELECT POSITION FROM pilot WHERE age < 35",
        "schema": "CREATE TABLE pilot (Position TEXT, Age NUMBER, Pilot_ID NUMBER); CREATE TABLE pilot_record (Pilot_ID NUMBER); CREATE TABLE aircraft (Aircraft_ID NUMBER);"
      },
      {
        "question": "What about the join year is early than 2000?",
        "query": "SELECT POSITION FROM pilot WHERE join_year < 2000",
        "schema": "CREATE TABLE aircraft (Aircraft_ID NUMBER); CREATE TABLE pilot_record (Pilot_ID NUMBER, Date TEXT); CREATE TABLE pilot (Age NUMBER, Position TEXT, Join_Year NUMBER, Pilot_ID NUMBER);"
      },
      {
        "question": "What about in the range of year f2000 and 2005?",
        "query": "SELECT POSITION FROM pilot WHERE join_year < 2000 INTERSECT SELECT POSITION FROM pilot WHERE join_year > 2005",
        "schema": "CREATE TABLE pilot_record (Date TEXT, Pilot_ID NUMBER); CREATE TABLE aircraft (Aircraft_ID NUMBER); CREATE TABLE pilot (Join_Year NUMBER, Age NUMBER, Position TEXT, Pilot_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What are all the information about the pilots?",
        "query": "SELECT * FROM pilot",
        "schema": "CREATE TABLE pilot (Pilot_ID NUMBER, Pilot_name TEXT, Rank NUMBER); CREATE TABLE aircraft (Aircraft_ID NUMBER); CREATE TABLE pilot_record (Pilot_ID NUMBER);"
      },
      {
        "question": "What about the fleet series?",
        "query": "SELECT fleet_series FROM aircraft",
        "schema": "CREATE TABLE pilot (Pilot_ID NUMBER, Rank NUMBER, Pilot_name TEXT); CREATE TABLE aircraft (Fleet_Series TEXT, Aircraft_ID NUMBER); CREATE TABLE pilot_record (Aircraft_ID NUMBER, Pilot_ID NUMBER);"
      },
      {
        "question": "How about the aircraft models?",
        "query": "SELECT model FROM aircraft",
        "schema": "CREATE TABLE aircraft (Fleet_Series TEXT, Model TEXT, Aircraft_ID NUMBER); CREATE TABLE pilot_record (Aircraft_ID NUMBER, Pilot_ID NUMBER); CREATE TABLE pilot (Pilot_name TEXT, Rank NUMBER, Pilot_ID NUMBER);"
      },
      {
        "question": "Show all the flying records with the pilot names and the aircraft's models.",
        "query": "SELECT t3.pilot_name , t2.model FROM pilot_record AS t1 JOIN aircraft AS t2 ON t1.aircraft_id = t2.aircraft_id JOIN pilot AS t3 ON t1.pilot_id = t3.pilot_id",
        "schema": "CREATE TABLE aircraft (Aircraft_ID NUMBER, Fleet_Series TEXT, Model TEXT); CREATE TABLE pilot_record (Record_ID NUMBER, Pilot_ID NUMBER, Aircraft_ID NUMBER); CREATE TABLE pilot (Rank NUMBER, Pilot_ID NUMBER, Pilot_name TEXT);"
      }
    ],
    [
      {
        "question": "What are all the information about the pilots?",
        "query": "SELECT * FROM pilot",
        "schema": "CREATE TABLE pilot_record (Pilot_ID NUMBER); CREATE TABLE pilot (Rank NUMBER, Pilot_name TEXT, Pilot_ID NUMBER);"
      },
      {
        "question": "What about the fleet series?",
        "query": "SELECT fleet_series FROM aircraft",
        "schema": "CREATE TABLE pilot_record (Aircraft_ID NUMBER, Pilot_ID NUMBER); CREATE TABLE pilot (Pilot_ID NUMBER, Rank NUMBER, Pilot_name TEXT); CREATE TABLE aircraft (Fleet_Series TEXT, Aircraft_ID NUMBER);"
      },
      {
        "question": "Show all the flying records with the pilot names and the aircraft's sleet series.",
        "query": "SELECT t3.pilot_name , t2.fleet_series FROM pilot_record AS t1 JOIN aircraft AS t2 ON t1.aircraft_id = t2.aircraft_id JOIN pilot AS t3 ON t1.pilot_id = t3.pilot_id",
        "schema": "CREATE TABLE aircraft (Aircraft_ID NUMBER, Fleet_Series TEXT); CREATE TABLE pilot (Pilot_name TEXT, Rank NUMBER, Pilot_ID NUMBER); CREATE TABLE pilot_record (Record_ID NUMBER, Pilot_ID NUMBER, Aircraft_ID NUMBER);"
      },
      {
        "question": "Now show those results in ascending order of the pilot age.",
        "query": "SELECT t3.pilot_name , t2.fleet_series FROM pilot_record AS t1 JOIN aircraft AS t2 ON t1.aircraft_id = t2.aircraft_id JOIN pilot AS t3 ON t1.pilot_id = t3.pilot_id ORDER BY t3.age",
        "schema": "CREATE TABLE pilot (Age NUMBER, Rank NUMBER, Pilot_ID NUMBER, Pilot_name TEXT); CREATE TABLE pilot_record (Aircraft_ID NUMBER, Record_ID NUMBER, Pilot_ID NUMBER); CREATE TABLE aircraft (Fleet_Series TEXT, Aircraft_ID NUMBER);"
      },
      {
        "question": "What about in ascending order of the pilot rank?",
        "query": "SELECT t3.pilot_name , t2.fleet_series FROM pilot_record AS t1 JOIN aircraft AS t2 ON t1.aircraft_id = t2.aircraft_id JOIN pilot AS t3 ON t1.pilot_id = t3.pilot_id ORDER BY t3.rank",
        "schema": "CREATE TABLE pilot_record (Pilot_ID NUMBER, Aircraft_ID NUMBER, Record_ID NUMBER); CREATE TABLE pilot (Age NUMBER, Pilot_name TEXT, Rank NUMBER, Pilot_ID NUMBER); CREATE TABLE aircraft (Fleet_Series TEXT, Aircraft_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show all the fleet series?",
        "query": "SELECT fleet_series FROM aircraft",
        "schema": "CREATE TABLE aircraft (Fleet_Series TEXT, Aircraft_ID NUMBER);"
      },
      {
        "question": "Which aircrafts have been flied by pilot whose name is \"Charles Oakley\"?",
        "query": "SELECT t2.fleet_series FROM pilot_record AS t1 JOIN aircraft AS t2 ON t1.aircraft_id = t2.aircraft_id JOIN pilot AS t3 ON t1.pilot_id = t3.pilot_id WHERE t3.pilot_name = \"Charles Oakley\"",
        "schema": "CREATE TABLE pilot_record (Pilot_ID NUMBER, Aircraft_ID NUMBER); CREATE TABLE aircraft (Model TEXT, Aircraft_ID NUMBER, Manufacturer TEXT, Fleet_Series TEXT); CREATE TABLE pilot (Pilot_name TEXT, Pilot_ID NUMBER);"
      },
      {
        "question": "What about the ones that have been flied by pilots younger than 34",
        "query": "SELECT t2.fleet_series FROM pilot_record AS t1 JOIN aircraft AS t2 ON t1.aircraft_id = t2.aircraft_id JOIN pilot AS t3 ON t1.pilot_id = t3.pilot_id WHERE t3.age < 34",
        "schema": "CREATE TABLE pilot (Pilot_ID NUMBER, Pilot_name TEXT, Age NUMBER, Join_Year NUMBER); CREATE TABLE pilot_record (Record_ID NUMBER, Pilot_ID NUMBER, Aircraft_ID NUMBER); CREATE TABLE aircraft (Aircraft_ID NUMBER, Fleet_Series TEXT, Model TEXT, Manufacturer TEXT);"
      }
    ],
    [
      {
        "question": "How many records in total?",
        "query": "SELECT count(*) FROM pilot_record",
        "schema": "CREATE TABLE pilot_record (Pilot_ID NUMBER, Aircraft_ID NUMBER, Record_ID NUMBER); CREATE TABLE aircraft (Aircraft_ID NUMBER); CREATE TABLE pilot (Pilot_ID NUMBER);"
      },
      {
        "question": "Show the pilot names where there is at lease one record.",
        "query": "SELECT t2.pilot_name FROM pilot_record AS t1 JOIN pilot AS t2 ON t1.pilot_id = t2.pilot_id GROUP BY t2.pilot_name",
        "schema": "CREATE TABLE pilot (Pilot_name TEXT, Pilot_ID NUMBER); CREATE TABLE aircraft (Aircraft_ID NUMBER); CREATE TABLE pilot_record (Pilot_ID NUMBER, Aircraft_ID NUMBER, Record_ID NUMBER);"
      },
      {
        "question": "Show the names and the corresponding number of records.",
        "query": "SELECT t2.pilot_name , count(*) FROM pilot_record AS t1 JOIN pilot AS t2 ON t1.pilot_id = t2.pilot_id GROUP BY t2.pilot_name",
        "schema": "CREATE TABLE pilot (Pilot_name TEXT, Pilot_ID NUMBER); CREATE TABLE aircraft (Aircraft_ID NUMBER); CREATE TABLE pilot_record (Record_ID NUMBER, Aircraft_ID NUMBER, Pilot_ID NUMBER);"
      }
    ],
    [
      {
        "question": "How many records are there?",
        "query": "SELECT count(*) FROM pilot_record",
        "schema": "CREATE TABLE pilot (Pilot_ID NUMBER); CREATE TABLE aircraft (Aircraft_ID NUMBER); CREATE TABLE pilot_record (Pilot_ID NUMBER, Record_ID NUMBER, Aircraft_ID NUMBER);"
      },
      {
        "question": "Show the pilot names where there is at lease one record.",
        "query": "SELECT t2.pilot_name FROM pilot_record AS t1 JOIN pilot AS t2 ON t1.pilot_id = t2.pilot_id GROUP BY t2.pilot_name",
        "schema": "CREATE TABLE pilot (Pilot_name TEXT, Pilot_ID NUMBER); CREATE TABLE aircraft (Aircraft_ID NUMBER); CREATE TABLE pilot_record (Pilot_ID NUMBER, Aircraft_ID NUMBER, Record_ID NUMBER);"
      },
      {
        "question": "Which pilot has only one record?",
        "query": "SELECT t2.pilot_name , count(*) FROM pilot_record AS t1 JOIN pilot AS t2 ON t1.pilot_id = t2.pilot_id GROUP BY t2.pilot_name HAVING count(*) = 1",
        "schema": "CREATE TABLE pilot (Pilot_name TEXT, Pilot_ID NUMBER); CREATE TABLE aircraft (Aircraft_ID NUMBER); CREATE TABLE pilot_record (Record_ID NUMBER, Aircraft_ID NUMBER, Pilot_ID NUMBER);"
      },
      {
        "question": "What about the ones who have more than one record?",
        "query": "SELECT t2.pilot_name , count(*) FROM pilot_record AS t1 JOIN pilot AS t2 ON t1.pilot_id = t2.pilot_id GROUP BY t2.pilot_name HAVING count(*) > 1",
        "schema": "CREATE TABLE pilot_record (Record_ID NUMBER, Aircraft_ID NUMBER, Pilot_ID NUMBER); CREATE TABLE pilot (Pilot_ID NUMBER, Pilot_name TEXT); CREATE TABLE aircraft (Aircraft_ID NUMBER);"
      }
    ]
  ],
  "bike_1": [
    [
      {
        "question": "Which trips have the oldest ids? Limit it to 3.",
        "query": "SELECT * FROM trip ORDER BY id LIMIT 3",
        "schema": "CREATE TABLE trip (start_date TEXT, start_station_id NUMBER, start_station_name TEXT, duration NUMBER, bike_id NUMBER, id NUMBER, end_date TEXT); CREATE TABLE station (id NUMBER);"
      },
      {
        "question": "Just show information on the start station and end station for those.",
        "query": "SELECT start_station_name , end_station_name FROM trip ORDER BY id LIMIT 3",
        "schema": "CREATE TABLE station (long NUMBER, id NUMBER, name TEXT); CREATE TABLE status (station_id NUMBER); CREATE TABLE trip (start_date TEXT, id NUMBER, bike_id NUMBER, end_station_name TEXT, end_date TEXT, duration NUMBER, start_station_name TEXT, end_station_id NUMBER, start_station_id NUMBER);"
      }
    ],
    [
      {
        "question": "Which stations are located in San Jose City?",
        "query": "SELECT name FROM station WHERE city = \"San Jose\"",
        "schema": "CREATE TABLE station (long NUMBER, name TEXT, city TEXT, lat NUMBER, id NUMBER); CREATE TABLE status (station_id NUMBER);"
      },
      {
        "question": "For those, which are their latitude and longitude?",
        "query": "SELECT lat, long FROM station WHERE city = \"San Jose\"",
        "schema": "CREATE TABLE status (station_id NUMBER); CREATE TABLE station (long NUMBER, name TEXT, lat NUMBER, id NUMBER, city TEXT);"
      },
      {
        "question": "Take averages.",
        "query": "SELECT avg(lat) , avg(long) FROM station WHERE city = \"San Jose\"",
        "schema": "CREATE TABLE status (station_id NUMBER); CREATE TABLE station (city TEXT, name TEXT, long NUMBER, id NUMBER, lat NUMBER);"
      }
    ],
    [
      {
        "question": "Order the trips by duration, ascending.",
        "query": "SELECT * FROM trip ORDER BY duration",
        "schema": "CREATE TABLE trip (bike_id NUMBER, id NUMBER, duration NUMBER, end_date TEXT, start_date TEXT);"
      },
      {
        "question": "Limit it to the ids.",
        "query": "SELECT id FROM trip ORDER BY duration",
        "schema": "CREATE TABLE trip (bike_id NUMBER, end_date TEXT, duration NUMBER, start_date TEXT, id NUMBER);"
      },
      {
        "question": "Limit it to the shortest duration.",
        "query": "SELECT id FROM trip ORDER BY duration LIMIT 1",
        "schema": "CREATE TABLE trip (start_date TEXT, bike_id NUMBER, duration NUMBER, id NUMBER, end_date TEXT);"
      }
    ],
    [
      {
        "question": "Show records of trips with bike id 636.",
        "query": "SELECT * FROM trip WHERE bike_id = 636",
        "schema": "CREATE TABLE trip (id NUMBER, bike_id NUMBER, duration NUMBER); CREATE TABLE station (id NUMBER);"
      },
      {
        "question": "just show the durations.",
        "query": "SELECT duration FROM trip WHERE bike_id = 636",
        "schema": "CREATE TABLE trip (bike_id NUMBER, start_date TEXT, id NUMBER, duration NUMBER); CREATE TABLE station (id NUMBER);"
      },
      {
        "question": "Take a sum and max.",
        "query": "SELECT sum(duration) , max(duration) FROM trip WHERE bike_id = 636",
        "schema": "CREATE TABLE trip (duration NUMBER, bike_id NUMBER, start_date TEXT, id NUMBER); CREATE TABLE station (id NUMBER);"
      }
    ],
    [
      {
        "question": "Show weather records from August.",
        "query": "SELECT * FROM weather WHERE date LIKE \"8/%\"",
        "schema": "CREATE TABLE weather (events TEXT, date TEXT, max_temperature_f NUMBER, max_humidity NUMBER);"
      },
      {
        "question": "Just show the mean temperature in those records.",
        "query": "SELECT mean_temperature_f FROM weather WHERE date LIKE \"8/%\"",
        "schema": "CREATE TABLE weather (mean_visibility_miles NUMBER, max_humidity NUMBER, mean_wind_speed_mph NUMBER, date TEXT, mean_temperature_f NUMBER, cloud_cover NUMBER, precipitation_inches NUMBER, max_gust_speed_mph NUMBER, min_dew_point_f NUMBER, max_visibility_miles NUMBER, min_humidity NUMBER, min_visibility_miles NUMBER, min_sea_level_pressure_inches NUMBER, wind_dir_degrees NUMBER, mean_sea_level_pressure_inches NUMBER, min_temperature_f NUMBER, max_sea_level_pressure_inches NUMBER, mean_humidity NUMBER, max_temperature_f NUMBER, zip_code NUMBER, max_wind_Speed_mph NUMBER, mean_dew_point_f NUMBER, events TEXT, max_dew_point_f NUMBER);"
      },
      {
        "question": "Group by zipcode and average those records.",
        "query": "SELECT zip_code , avg(mean_temperature_f) FROM weather WHERE date LIKE \"8/%\" GROUP BY zip_code",
        "schema": "CREATE TABLE weather (date TEXT, mean_wind_speed_mph NUMBER, wind_dir_degrees NUMBER, precipitation_inches NUMBER, zip_code NUMBER, max_gust_speed_mph NUMBER, mean_visibility_miles NUMBER, mean_temperature_f NUMBER, min_dew_point_f NUMBER, cloud_cover NUMBER, max_temperature_f NUMBER, max_humidity NUMBER, mean_sea_level_pressure_inches NUMBER, max_wind_Speed_mph NUMBER, max_dew_point_f NUMBER, mean_humidity NUMBER, min_sea_level_pressure_inches NUMBER, max_sea_level_pressure_inches NUMBER, min_temperature_f NUMBER, max_visibility_miles NUMBER, min_visibility_miles NUMBER, min_humidity NUMBER, mean_dew_point_f NUMBER, events TEXT); CREATE TABLE station (lat NUMBER); CREATE TABLE trip (zip_code NUMBER);"
      }
    ],
    [
      {
        "question": "Which station ids ever had 7 bikes available?",
        "query": "SELECT DISTINCT station_id FROM status WHERE bikes_available = 7",
        "schema": "CREATE TABLE station (city TEXT, id NUMBER, name TEXT, long NUMBER); CREATE TABLE trip (end_station_id NUMBER, start_station_id NUMBER); CREATE TABLE status (station_id NUMBER, bikes_available NUMBER);"
      },
      {
        "question": "Give the names for those stations.",
        "query": "SELECT DISTINCT t1.name FROM station AS t1 JOIN status AS t2 ON t1.id = t2.station_id WHERE t2.bikes_available = 7",
        "schema": "CREATE TABLE trip (start_station_id NUMBER, end_station_id NUMBER); CREATE TABLE station (id NUMBER, city TEXT, name TEXT, long NUMBER); CREATE TABLE status (bikes_available NUMBER, station_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show trip records from August.",
        "query": "SELECT * FROM trip WHERE start_date LIKE \"8/%\"",
        "schema": "CREATE TABLE trip (id NUMBER, end_date TEXT, duration NUMBER, start_date TEXT);"
      },
      {
        "question": "Limit that to the start station name and id.",
        "query": "SELECT start_station_name , start_station_id FROM trip WHERE start_date LIKE \"8/%\"",
        "schema": "CREATE TABLE status (station_id NUMBER); CREATE TABLE trip (start_station_id NUMBER, end_station_name TEXT, duration NUMBER, end_station_id NUMBER, start_date TEXT, id NUMBER, start_station_name TEXT, end_date TEXT); CREATE TABLE station (name TEXT, id NUMBER);"
      },
      {
        "question": "Which start station had the most trips starting from August? Give me the name and id of the station.",
        "query": "SELECT start_station_name , start_station_id FROM trip WHERE start_date LIKE \"8/%\" GROUP BY start_station_name ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE trip (id NUMBER, start_station_id NUMBER, end_station_name TEXT, end_station_id NUMBER, duration NUMBER, start_date TEXT, end_date TEXT, start_station_name TEXT); CREATE TABLE station (id NUMBER, name TEXT); CREATE TABLE status (station_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show bike ids that traveled in zip code 94002.",
        "query": "SELECT DISTINCT bike_id FROM trip WHERE zip_code = 94002",
        "schema": "CREATE TABLE trip (zip_code NUMBER, bike_id NUMBER, id NUMBER, duration NUMBER); CREATE TABLE station (name TEXT, id NUMBER); CREATE TABLE weather (zip_code NUMBER);"
      },
      {
        "question": "Which traveled there most often?",
        "query": "SELECT bike_id FROM trip WHERE zip_code = 94002 GROUP BY bike_id ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE station (name TEXT, id NUMBER); CREATE TABLE trip (zip_code NUMBER, bike_id NUMBER, id NUMBER, duration NUMBER); CREATE TABLE weather (zip_code NUMBER);"
      }
    ],
    [
      {
        "question": "Show the records of weather events with both mean humidity above 50 and mean visibility above 8.",
        "query": "SELECT * FROM weather WHERE mean_humidity > 50 AND mean_visibility_miles > 8",
        "schema": "CREATE TABLE weather (max_visibility_miles NUMBER, max_humidity NUMBER, mean_humidity NUMBER, min_temperature_f NUMBER, mean_wind_speed_mph NUMBER, max_gust_speed_mph NUMBER, mean_temperature_f NUMBER, date TEXT, min_humidity NUMBER, max_temperature_f NUMBER, max_dew_point_f NUMBER, events TEXT, wind_dir_degrees NUMBER, mean_dew_point_f NUMBER, cloud_cover NUMBER, min_dew_point_f NUMBER, precipitation_inches NUMBER, mean_sea_level_pressure_inches NUMBER, zip_code NUMBER, mean_visibility_miles NUMBER, min_visibility_miles NUMBER, max_sea_level_pressure_inches NUMBER, min_sea_level_pressure_inches NUMBER, max_wind_Speed_mph NUMBER);"
      },
      {
        "question": "Count those days.",
        "query": "SELECT count(*) FROM weather WHERE mean_humidity > 50 AND mean_visibility_miles > 8",
        "schema": "CREATE TABLE weather (mean_dew_point_f NUMBER, min_humidity NUMBER, min_temperature_f NUMBER, max_temperature_f NUMBER, min_sea_level_pressure_inches NUMBER, max_humidity NUMBER, mean_sea_level_pressure_inches NUMBER, mean_temperature_f NUMBER, max_wind_Speed_mph NUMBER, precipitation_inches NUMBER, max_sea_level_pressure_inches NUMBER, max_gust_speed_mph NUMBER, events TEXT, zip_code NUMBER, mean_visibility_miles NUMBER, cloud_cover NUMBER, max_dew_point_f NUMBER, mean_humidity NUMBER, min_visibility_miles NUMBER, max_visibility_miles NUMBER, min_dew_point_f NUMBER, date TEXT, mean_wind_speed_mph NUMBER, wind_dir_degrees NUMBER);"
      }
    ],
    [
      {
        "question": "Give records on the lengths of trips.",
        "query": "SELECT duration FROM trip",
        "schema": "CREATE TABLE station (long NUMBER); CREATE TABLE trip (id NUMBER, start_date TEXT, start_station_id NUMBER, end_date TEXT, bike_id NUMBER, duration NUMBER);"
      },
      {
        "question": "Give records on the shortest trip.",
        "query": "SELECT * FROM trip ORDER BY duration LIMIT 1",
        "schema": "CREATE TABLE station (long NUMBER); CREATE TABLE trip (bike_id NUMBER, id NUMBER, duration NUMBER, start_station_id NUMBER, start_date TEXT, end_date TEXT);"
      },
      {
        "question": "From which station id did it originate?",
        "query": "SELECT start_station_id FROM trip ORDER BY duration LIMIT 1",
        "schema": "CREATE TABLE station (id NUMBER, long NUMBER, name TEXT); CREATE TABLE trip (start_date TEXT, bike_id NUMBER, start_station_name TEXT, end_date TEXT, duration NUMBER, id NUMBER, start_station_id NUMBER); CREATE TABLE status (station_id NUMBER);"
      },
      {
        "question": "For that start station id, give latitude, longitude, and city.",
        "query": "SELECT t1.lat , t1.long , t1.city FROM station AS t1 JOIN trip AS t2 ON t1.id = t2.start_station_id ORDER BY t2.duration LIMIT 1",
        "schema": "CREATE TABLE trip (start_station_name TEXT, bike_id NUMBER, duration NUMBER, start_date TEXT, end_date TEXT, id NUMBER, start_station_id NUMBER); CREATE TABLE station (name TEXT, id NUMBER, lat NUMBER, city TEXT, long NUMBER); CREATE TABLE status (station_id NUMBER);"
      }
    ],
    [
      {
        "question": "Which station ids have average availability above 10?",
        "query": "SELECT DISTINCT station_id FROM status GROUP BY station_id HAVING avg(bikes_available) > 10",
        "schema": "CREATE TABLE station (name TEXT, id NUMBER); CREATE TABLE status (station_id NUMBER, docks_available NUMBER, bikes_available NUMBER);"
      },
      {
        "question": "And which are located in San Francisco?",
        "query": "SELECT DISTINCT id FROM station WHERE city = \"San Francisco\"",
        "schema": "CREATE TABLE station (id NUMBER, lat NUMBER, city TEXT, name TEXT); CREATE TABLE status (bikes_available NUMBER, docks_available NUMBER, station_id NUMBER);"
      },
      {
        "question": "Which pass both conditions?",
        "query": "SELECT id FROM station WHERE city = \"San Francisco\" INTERSECT SELECT station_id FROM status GROUP BY station_id HAVING avg(bikes_available) > 10",
        "schema": "CREATE TABLE status (station_id NUMBER, bikes_available NUMBER, docks_available NUMBER); CREATE TABLE station (city TEXT, id NUMBER, name TEXT, lat NUMBER);"
      }
    ],
    [
      {
        "question": "Show records (name and id) of stations installed in December.",
        "query": "SELECT name , id FROM station WHERE installation_date LIKE \"12/%\"",
        "schema": "CREATE TABLE station (name TEXT, id NUMBER, installation_date TEXT); CREATE TABLE status (station_id NUMBER);"
      },
      {
        "question": "Which had more than 14 bikes available?",
        "query": "SELECT t1.name , t1.id FROM station AS t1 JOIN status AS t2 ON t1.id = t2.station_id GROUP BY t2.station_id HAVING avg(t2.bikes_available) > 14",
        "schema": "CREATE TABLE status (station_id NUMBER, bikes_available NUMBER); CREATE TABLE station (name TEXT, id NUMBER, installation_date TEXT);"
      },
      {
        "question": "Union those two.",
        "query": "SELECT t1.name , t1.id FROM station AS t1 JOIN status AS t2 ON t1.id = t2.station_id GROUP BY t2.station_id HAVING avg(t2.bikes_available) > 14 UNION SELECT name , id FROM station WHERE installation_date LIKE \"12/%\"",
        "schema": "CREATE TABLE station (name TEXT, installation_date TEXT, id NUMBER); CREATE TABLE status (station_id NUMBER, bikes_available NUMBER);"
      }
    ],
    [
      {
        "question": "Show records on cloud cover?",
        "query": "SELECT cloud_cover FROM weather",
        "schema": "CREATE TABLE station (id NUMBER); CREATE TABLE weather (max_visibility_miles NUMBER, max_sea_level_pressure_inches NUMBER, min_humidity NUMBER, max_humidity NUMBER, min_dew_point_f NUMBER, max_temperature_f NUMBER, mean_wind_speed_mph NUMBER, min_sea_level_pressure_inches NUMBER, min_temperature_f NUMBER, precipitation_inches NUMBER, mean_humidity NUMBER, max_gust_speed_mph NUMBER, mean_dew_point_f NUMBER, date TEXT, zip_code NUMBER, mean_visibility_miles NUMBER, mean_temperature_f NUMBER, max_wind_Speed_mph NUMBER, events TEXT, min_visibility_miles NUMBER, mean_sea_level_pressure_inches NUMBER, wind_dir_degrees NUMBER, max_dew_point_f NUMBER, cloud_cover NUMBER);"
      },
      {
        "question": "Just for the zip code 94107.",
        "query": "SELECT cloud_cover FROM weather WHERE zip_code = 94107",
        "schema": "CREATE TABLE weather (min_visibility_miles NUMBER, max_temperature_f NUMBER, max_dew_point_f NUMBER, mean_wind_speed_mph NUMBER, max_wind_Speed_mph NUMBER, max_humidity NUMBER, mean_dew_point_f NUMBER, min_dew_point_f NUMBER, max_gust_speed_mph NUMBER, mean_humidity NUMBER, max_sea_level_pressure_inches NUMBER, max_visibility_miles NUMBER, mean_sea_level_pressure_inches NUMBER, date TEXT, events TEXT, zip_code NUMBER, precipitation_inches NUMBER, mean_visibility_miles NUMBER, min_temperature_f NUMBER, min_humidity NUMBER, wind_dir_degrees NUMBER, min_sea_level_pressure_inches NUMBER, mean_temperature_f NUMBER, cloud_cover NUMBER); CREATE TABLE station (id NUMBER); CREATE TABLE trip (zip_code NUMBER);"
      },
      {
        "question": "What is the 3 most common cloud cover rates in the region of zip code 94107?",
        "query": "SELECT cloud_cover FROM weather WHERE zip_code = 94107 GROUP BY cloud_cover ORDER BY COUNT (*) DESC LIMIT 3",
        "schema": "CREATE TABLE station (id NUMBER); CREATE TABLE trip (zip_code NUMBER); CREATE TABLE weather (min_sea_level_pressure_inches NUMBER, min_visibility_miles NUMBER, cloud_cover NUMBER, max_visibility_miles NUMBER, mean_wind_speed_mph NUMBER, mean_humidity NUMBER, mean_visibility_miles NUMBER, precipitation_inches NUMBER, min_temperature_f NUMBER, wind_dir_degrees NUMBER, events TEXT, max_sea_level_pressure_inches NUMBER, zip_code NUMBER, mean_temperature_f NUMBER, max_temperature_f NUMBER, date TEXT, min_dew_point_f NUMBER, max_gust_speed_mph NUMBER, mean_dew_point_f NUMBER, min_humidity NUMBER, max_humidity NUMBER, max_wind_Speed_mph NUMBER, mean_sea_level_pressure_inches NUMBER, max_dew_point_f NUMBER);"
      }
    ],
    [
      {
        "question": "Show the records on mean sea level pressure by zip code.",
        "query": "SELECT zip_code, mean_sea_level_pressure_inches FROM weather GROUP BY zip_code",
        "schema": "CREATE TABLE station (lat NUMBER, long NUMBER); CREATE TABLE weather (max_gust_speed_mph NUMBER, max_temperature_f NUMBER, max_visibility_miles NUMBER, mean_temperature_f NUMBER, zip_code NUMBER, mean_dew_point_f NUMBER, min_dew_point_f NUMBER, min_sea_level_pressure_inches NUMBER, max_wind_Speed_mph NUMBER, mean_humidity NUMBER, max_humidity NUMBER, precipitation_inches NUMBER, cloud_cover NUMBER, max_sea_level_pressure_inches NUMBER, mean_visibility_miles NUMBER, min_humidity NUMBER, min_temperature_f NUMBER, mean_wind_speed_mph NUMBER, min_visibility_miles NUMBER, max_dew_point_f NUMBER, mean_sea_level_pressure_inches NUMBER, events TEXT); CREATE TABLE trip (zip_code NUMBER);"
      },
      {
        "question": "Now group by zip code and average over the pressure.",
        "query": "SELECT zip_code, avg(mean_sea_level_pressure_inches) FROM weather GROUP BY zip_code",
        "schema": "CREATE TABLE trip (zip_code NUMBER); CREATE TABLE station (long NUMBER, lat NUMBER); CREATE TABLE weather (min_sea_level_pressure_inches NUMBER, min_humidity NUMBER, mean_sea_level_pressure_inches NUMBER, max_sea_level_pressure_inches NUMBER, max_temperature_f NUMBER, min_visibility_miles NUMBER, mean_dew_point_f NUMBER, date TEXT, min_temperature_f NUMBER, zip_code NUMBER, precipitation_inches NUMBER, events TEXT, min_dew_point_f NUMBER, mean_wind_speed_mph NUMBER, cloud_cover NUMBER, max_dew_point_f NUMBER, mean_humidity NUMBER, wind_dir_degrees NUMBER, max_visibility_miles NUMBER, max_gust_speed_mph NUMBER, mean_temperature_f NUMBER, max_wind_Speed_mph NUMBER, mean_visibility_miles NUMBER, max_humidity NUMBER);"
      },
      {
        "question": "Which zip code has the lowest of those?",
        "query": "SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT 1",
        "schema": "CREATE TABLE trip (zip_code NUMBER); CREATE TABLE weather (mean_dew_point_f NUMBER, min_temperature_f NUMBER, min_dew_point_f NUMBER, precipitation_inches NUMBER, max_gust_speed_mph NUMBER, max_visibility_miles NUMBER, min_humidity NUMBER, mean_humidity NUMBER, max_wind_Speed_mph NUMBER, wind_dir_degrees NUMBER, mean_temperature_f NUMBER, mean_visibility_miles NUMBER, max_sea_level_pressure_inches NUMBER, cloud_cover NUMBER, zip_code NUMBER, min_sea_level_pressure_inches NUMBER, min_visibility_miles NUMBER, max_humidity NUMBER, max_dew_point_f NUMBER, mean_sea_level_pressure_inches NUMBER, date TEXT, events TEXT, max_temperature_f NUMBER, mean_wind_speed_mph NUMBER); CREATE TABLE station (long NUMBER, lat NUMBER);"
      }
    ],
    [
      {
        "question": "Which stations are located in \"Palo Alto\"?",
        "query": "SELECT id FROM station WHERE city = \"Palo Alto\"",
        "schema": "CREATE TABLE station (city TEXT, long NUMBER, name TEXT, lat NUMBER, id NUMBER); CREATE TABLE status (station_id NUMBER);"
      },
      {
        "question": "What is the average bike availability in stations that are not located in Palo Alto?",
        "query": "SELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city = \"Palo Alto\")",
        "schema": "CREATE TABLE station (lat NUMBER, long NUMBER, city TEXT, name TEXT, id NUMBER); CREATE TABLE status (station_id NUMBER, bikes_available NUMBER);"
      }
    ],
    [
      {
        "question": "Which station ids ever had bike availability more than 10?",
        "query": "SELECT DISTINCT station_id FROM status GROUP BY station_id HAVING max(bikes_available) > 10",
        "schema": "CREATE TABLE station (name TEXT, city TEXT, long NUMBER, id NUMBER); CREATE TABLE status (docks_available NUMBER, station_id NUMBER, bikes_available NUMBER); CREATE TABLE trip (bike_id NUMBER, end_station_name TEXT, end_station_id NUMBER, start_station_id NUMBER, start_station_name TEXT);"
      },
      {
        "question": "Which did not?",
        "query": "SELECT id FROM station WHERE id NOT IN (SELECT station_id FROM status GROUP BY station_id HAVING max(bikes_available) > 10)",
        "schema": "CREATE TABLE trip (end_station_name TEXT, start_station_id NUMBER, bike_id NUMBER, start_station_name TEXT, end_station_id NUMBER); CREATE TABLE status (bikes_available NUMBER, docks_available NUMBER, station_id NUMBER); CREATE TABLE station (city TEXT, id NUMBER, long NUMBER, name TEXT);"
      },
      {
        "question": "For those, take the average longitude.",
        "query": "SELECT avg(long) FROM station WHERE id NOT IN (SELECT station_id FROM status GROUP BY station_id HAVING max(bikes_available) > 10)",
        "schema": "CREATE TABLE trip (start_station_name TEXT, start_station_id NUMBER, end_station_id NUMBER, end_station_name TEXT, bike_id NUMBER); CREATE TABLE station (long NUMBER, lat NUMBER, id NUMBER, city TEXT, name TEXT); CREATE TABLE status (time TEXT, bikes_available NUMBER, station_id NUMBER, docks_available NUMBER);"
      }
    ],
    [
      {
        "question": "Give zip codes from trips.",
        "query": "SELECT DISTINCT zip_code FROM trip",
        "schema": "CREATE TABLE weather (zip_code NUMBER); CREATE TABLE trip (zip_code NUMBER, id NUMBER);"
      },
      {
        "question": "Which zip codes had an average mean temperature greater than 60?",
        "query": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_temperature_f) > 60",
        "schema": "CREATE TABLE weather (min_temperature_f NUMBER, mean_sea_level_pressure_inches NUMBER, date TEXT, mean_visibility_miles NUMBER, precipitation_inches NUMBER, min_dew_point_f NUMBER, mean_wind_speed_mph NUMBER, cloud_cover NUMBER, events TEXT, max_sea_level_pressure_inches NUMBER, mean_temperature_f NUMBER, max_temperature_f NUMBER, zip_code NUMBER, mean_humidity NUMBER, max_dew_point_f NUMBER, min_humidity NUMBER, max_visibility_miles NUMBER, max_humidity NUMBER, max_wind_Speed_mph NUMBER, max_gust_speed_mph NUMBER, min_visibility_miles NUMBER, wind_dir_degrees NUMBER, min_sea_level_pressure_inches NUMBER, mean_dew_point_f NUMBER); CREATE TABLE trip (zip_code NUMBER, id NUMBER);"
      },
      {
        "question": "Give me ids for all the trip that took place in a zip code area with average mean temperature above 60.",
        "query": "SELECT t1.id FROM trip AS t1 JOIN weather AS t2 ON t1.zip_code = t2.zip_code GROUP BY t2.zip_code HAVING avg(t2.mean_temperature_f) > 60",
        "schema": "CREATE TABLE weather (min_temperature_f NUMBER, min_dew_point_f NUMBER, wind_dir_degrees NUMBER, max_temperature_f NUMBER, events TEXT, min_sea_level_pressure_inches NUMBER, mean_visibility_miles NUMBER, precipitation_inches NUMBER, max_dew_point_f NUMBER, max_humidity NUMBER, cloud_cover NUMBER, min_visibility_miles NUMBER, max_wind_Speed_mph NUMBER, date TEXT, max_gust_speed_mph NUMBER, zip_code NUMBER, max_visibility_miles NUMBER, mean_humidity NUMBER, max_sea_level_pressure_inches NUMBER, mean_sea_level_pressure_inches NUMBER, mean_wind_speed_mph NUMBER, mean_dew_point_f NUMBER, mean_temperature_f NUMBER, min_humidity NUMBER); CREATE TABLE trip (id NUMBER, zip_code NUMBER);"
      }
    ],
    [
      {
        "question": "Give weather records with max wind speed greater than or equal to 25.",
        "query": "SELECT * FROM weather WHERE max_wind_speed_mph >= 25",
        "schema": "CREATE TABLE weather (mean_visibility_miles NUMBER, max_dew_point_f NUMBER, mean_humidity NUMBER, mean_dew_point_f NUMBER, min_dew_point_f NUMBER, min_sea_level_pressure_inches NUMBER, cloud_cover NUMBER, max_temperature_f NUMBER, min_temperature_f NUMBER, min_visibility_miles NUMBER, max_wind_Speed_mph NUMBER, wind_dir_degrees NUMBER, mean_wind_speed_mph NUMBER, mean_temperature_f NUMBER, precipitation_inches NUMBER, max_sea_level_pressure_inches NUMBER, max_visibility_miles NUMBER, date TEXT, min_humidity NUMBER, mean_sea_level_pressure_inches NUMBER, max_humidity NUMBER, zip_code NUMBER, max_gust_speed_mph NUMBER, events TEXT);"
      },
      {
        "question": "Count the times that event occurred by zip code.",
        "query": "SELECT zip_code , count(*) FROM weather WHERE max_wind_speed_mph >= 25 GROUP BY zip_code",
        "schema": "CREATE TABLE trip (zip_code NUMBER); CREATE TABLE weather (mean_visibility_miles NUMBER, mean_dew_point_f NUMBER, max_gust_speed_mph NUMBER, max_wind_Speed_mph NUMBER, min_dew_point_f NUMBER, min_visibility_miles NUMBER, precipitation_inches NUMBER, min_sea_level_pressure_inches NUMBER, mean_wind_speed_mph NUMBER, max_visibility_miles NUMBER, mean_humidity NUMBER, max_sea_level_pressure_inches NUMBER, date TEXT, mean_sea_level_pressure_inches NUMBER, mean_temperature_f NUMBER, min_temperature_f NUMBER, max_temperature_f NUMBER, wind_dir_degrees NUMBER, max_humidity NUMBER, events TEXT, zip_code NUMBER, min_humidity NUMBER, cloud_cover NUMBER, max_dew_point_f NUMBER); CREATE TABLE station (lat NUMBER);"
      }
    ],
    [
      {
        "question": "What is the minimum min dew point in zip code 94107?",
        "query": "SELECT min(min_dew_point_f) FROM weather WHERE zip_code = 94107",
        "schema": "CREATE TABLE station (id NUMBER, name TEXT, lat NUMBER); CREATE TABLE trip (zip_code NUMBER); CREATE TABLE weather (min_dew_point_f NUMBER, min_sea_level_pressure_inches NUMBER, mean_wind_speed_mph NUMBER, mean_temperature_f NUMBER, max_dew_point_f NUMBER, mean_visibility_miles NUMBER, mean_humidity NUMBER, events TEXT, max_visibility_miles NUMBER, cloud_cover NUMBER, max_gust_speed_mph NUMBER, max_humidity NUMBER, mean_sea_level_pressure_inches NUMBER, precipitation_inches NUMBER, max_temperature_f NUMBER, max_wind_Speed_mph NUMBER, wind_dir_degrees NUMBER, mean_dew_point_f NUMBER, date TEXT, min_humidity NUMBER, max_sea_level_pressure_inches NUMBER, min_temperature_f NUMBER, min_visibility_miles NUMBER, zip_code NUMBER);"
      },
      {
        "question": "Give dates and zip codes with lower min dew points than that, even.",
        "query": "SELECT date , zip_code FROM weather WHERE min_dew_point_f < (SELECT min(min_dew_point_f) FROM weather WHERE zip_code = 94107)",
        "schema": "CREATE TABLE trip (zip_code NUMBER); CREATE TABLE weather (max_gust_speed_mph NUMBER, mean_temperature_f NUMBER, max_sea_level_pressure_inches NUMBER, date TEXT, min_visibility_miles NUMBER, mean_wind_speed_mph NUMBER, wind_dir_degrees NUMBER, max_dew_point_f NUMBER, max_humidity NUMBER, zip_code NUMBER, max_wind_Speed_mph NUMBER, mean_humidity NUMBER, events TEXT, max_visibility_miles NUMBER, min_sea_level_pressure_inches NUMBER, mean_dew_point_f NUMBER, min_temperature_f NUMBER, mean_visibility_miles NUMBER, min_humidity NUMBER, precipitation_inches NUMBER, cloud_cover NUMBER, mean_sea_level_pressure_inches NUMBER, max_temperature_f NUMBER, min_dew_point_f NUMBER); CREATE TABLE station (name TEXT, lat NUMBER, id NUMBER);"
      }
    ],
    [
      {
        "question": "Show the dock counts of stations.",
        "query": "SELECT name, dock_count FROM station",
        "schema": "CREATE TABLE station (id NUMBER, city TEXT, name TEXT, dock_count NUMBER, long NUMBER); CREATE TABLE status (station_id NUMBER);"
      },
      {
        "question": "Which dock count is largest?",
        "query": "SELECT name, dock_count FROM station ORDER BY dock_count DESC LIMIT 1",
        "schema": "CREATE TABLE status (station_id NUMBER); CREATE TABLE station (id NUMBER, dock_count NUMBER, long NUMBER, lat NUMBER, city TEXT, name TEXT);"
      },
      {
        "question": "Give the trip id of the trip that started there.",
        "query": "SELECT t1.id FROM trip AS t1 JOIN station AS t2 ON t1.start_station_id = t2.id ORDER BY t2.dock_count DESC LIMIT 1",
        "schema": "CREATE TABLE trip (end_station_name TEXT, bike_id NUMBER, start_date TEXT, end_station_id NUMBER, duration NUMBER, start_station_name TEXT, id NUMBER, start_station_id NUMBER); CREATE TABLE station (city TEXT, long NUMBER, dock_count NUMBER, name TEXT, id NUMBER, lat NUMBER); CREATE TABLE status (station_id NUMBER);"
      }
    ],
    [
      {
        "question": "Which trips ended in San Francisco?",
        "query": "SELECT t1.id FROM trip AS t1 JOIN station AS t2 ON t1.end_station_id = t2.id WHERE t2.city = \"San Francisco\"",
        "schema": "CREATE TABLE trip (duration NUMBER, start_station_name TEXT, end_station_name TEXT, start_date TEXT, end_date TEXT, end_station_id NUMBER, start_station_id NUMBER, id NUMBER); CREATE TABLE station (city TEXT, long NUMBER, id NUMBER, name TEXT);"
      },
      {
        "question": "Which did not?",
        "query": "SELECT t1.id FROM trip AS t1 JOIN station AS t2 ON t1.end_station_id = t2.id WHERE t2.city != \"San Francisco\"",
        "schema": "CREATE TABLE trip (start_station_name TEXT, start_station_id NUMBER, end_station_name TEXT, id NUMBER, end_date TEXT, start_date TEXT, duration NUMBER, end_station_id NUMBER); CREATE TABLE station (long NUMBER, city TEXT, name TEXT, id NUMBER); CREATE TABLE status (station_id NUMBER);"
      },
      {
        "question": "Count them.",
        "query": "SELECT count(*) FROM trip AS t1 JOIN station AS t2 ON t1.end_station_id = t2.id WHERE t2.city != \"San Francisco\"",
        "schema": "CREATE TABLE status (station_id NUMBER); CREATE TABLE station (id NUMBER, city TEXT, name TEXT, long NUMBER); CREATE TABLE trip (start_station_name TEXT, end_date TEXT, end_station_id NUMBER, start_station_id NUMBER, id NUMBER, end_station_name TEXT, duration NUMBER, start_date TEXT);"
      }
    ],
    [
      {
        "question": "Which weather events had Fog or Rain?",
        "query": "SELECT * FROM weather WHERE EVENTS = \"Fog\" OR EVENTS = \"Rain\"",
        "schema": "CREATE TABLE weather (max_wind_Speed_mph NUMBER, precipitation_inches NUMBER, events TEXT, mean_temperature_f NUMBER, min_sea_level_pressure_inches NUMBER, zip_code NUMBER, min_humidity NUMBER, mean_dew_point_f NUMBER, max_visibility_miles NUMBER, min_visibility_miles NUMBER, mean_humidity NUMBER, min_temperature_f NUMBER, mean_visibility_miles NUMBER, max_dew_point_f NUMBER, max_gust_speed_mph NUMBER, max_sea_level_pressure_inches NUMBER, mean_sea_level_pressure_inches NUMBER, wind_dir_degrees NUMBER, min_dew_point_f NUMBER, mean_wind_speed_mph NUMBER, date TEXT, max_temperature_f NUMBER, max_humidity NUMBER, cloud_cover NUMBER); CREATE TABLE station (id NUMBER);"
      },
      {
        "question": "Which had neither?",
        "query": "SELECT * FROM weather WHERE EVENTS != \"Fog\" AND EVENTS != \"Rain\"",
        "schema": "CREATE TABLE weather (max_dew_point_f NUMBER, max_sea_level_pressure_inches NUMBER, events TEXT, precipitation_inches NUMBER, max_wind_Speed_mph NUMBER, min_sea_level_pressure_inches NUMBER, max_humidity NUMBER, min_dew_point_f NUMBER, min_humidity NUMBER, min_visibility_miles NUMBER, cloud_cover NUMBER, mean_humidity NUMBER, max_visibility_miles NUMBER, max_temperature_f NUMBER, mean_wind_speed_mph NUMBER, wind_dir_degrees NUMBER, mean_dew_point_f NUMBER, max_gust_speed_mph NUMBER, mean_visibility_miles NUMBER, min_temperature_f NUMBER, zip_code NUMBER, mean_temperature_f NUMBER, date TEXT, mean_sea_level_pressure_inches NUMBER); CREATE TABLE station (id NUMBER);"
      },
      {
        "question": "Limit the search to zip code 94107.",
        "query": "SELECT * FROM weather WHERE zip_code = 94107 AND EVENTS != \"Fog\" AND EVENTS != \"Rain\"",
        "schema": "CREATE TABLE trip (zip_code NUMBER); CREATE TABLE station (id NUMBER); CREATE TABLE weather (max_sea_level_pressure_inches NUMBER, min_sea_level_pressure_inches NUMBER, mean_dew_point_f NUMBER, mean_temperature_f NUMBER, max_gust_speed_mph NUMBER, min_temperature_f NUMBER, mean_sea_level_pressure_inches NUMBER, wind_dir_degrees NUMBER, mean_humidity NUMBER, min_dew_point_f NUMBER, precipitation_inches NUMBER, max_temperature_f NUMBER, max_wind_Speed_mph NUMBER, cloud_cover NUMBER, min_humidity NUMBER, mean_wind_speed_mph NUMBER, events TEXT, max_visibility_miles NUMBER, max_dew_point_f NUMBER, max_humidity NUMBER, mean_visibility_miles NUMBER, zip_code NUMBER, date TEXT, min_visibility_miles NUMBER);"
      },
      {
        "question": "Just give the date.",
        "query": "SELECT date FROM weather WHERE zip_code = 94107 AND EVENTS != \"Fog\" AND EVENTS != \"Rain\"",
        "schema": "CREATE TABLE trip (zip_code NUMBER, start_date TEXT); CREATE TABLE weather (max_dew_point_f NUMBER, precipitation_inches NUMBER, max_visibility_miles NUMBER, max_gust_speed_mph NUMBER, wind_dir_degrees NUMBER, max_wind_Speed_mph NUMBER, date TEXT, max_humidity NUMBER, events TEXT, mean_humidity NUMBER, mean_wind_speed_mph NUMBER, mean_dew_point_f NUMBER, cloud_cover NUMBER, min_temperature_f NUMBER, max_temperature_f NUMBER, min_dew_point_f NUMBER, min_sea_level_pressure_inches NUMBER, max_sea_level_pressure_inches NUMBER, mean_visibility_miles NUMBER, mean_temperature_f NUMBER, zip_code NUMBER, min_visibility_miles NUMBER, min_humidity NUMBER, mean_sea_level_pressure_inches NUMBER); CREATE TABLE station (id NUMBER);"
      }
    ],
    [
      {
        "question": "Which station ids ever had bike availability below 7?",
        "query": "SELECT DISTINCT station_id FROM status GROUP BY station_id HAVING min(bikes_available) < 7",
        "schema": "CREATE TABLE trip (start_station_id NUMBER, end_station_id NUMBER); CREATE TABLE station (name TEXT, id NUMBER, long NUMBER, city TEXT, lat NUMBER); CREATE TABLE status (bikes_available NUMBER, station_id NUMBER, docks_available NUMBER);"
      },
      {
        "question": "Which did not?",
        "query": "SELECT id FROM station EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING min(bikes_available) < 7",
        "schema": "CREATE TABLE status (station_id NUMBER, docks_available NUMBER, bikes_available NUMBER); CREATE TABLE trip (start_station_id NUMBER, end_station_id NUMBER); CREATE TABLE station (name TEXT, id NUMBER, city TEXT, lat NUMBER, long NUMBER);"
      },
      {
        "question": "Force those stations to additionally have latitude above 37.4.",
        "query": "SELECT id FROM station WHERE lat > 37.4 EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING min(bikes_available) < 7",
        "schema": "CREATE TABLE trip (end_station_id NUMBER, start_station_id NUMBER); CREATE TABLE station (id NUMBER, long NUMBER, lat NUMBER, city TEXT, name TEXT); CREATE TABLE status (bikes_available NUMBER, docks_available NUMBER, station_id NUMBER);"
      }
    ],
    [
      {
        "question": "Which stations are located in San Jose?",
        "query": "SELECT name FROM station WHERE city = \"San Jose\"",
        "schema": "CREATE TABLE station (lat NUMBER, name TEXT, id NUMBER, city TEXT, long NUMBER); CREATE TABLE status (station_id NUMBER);"
      },
      {
        "question": "What are names of stations that have average bike availability above 10 and are not located in San Jose city?",
        "query": "SELECT t1.name FROM station AS t1 JOIN status AS t2 ON t1.id = t2.station_id GROUP BY t2.station_id HAVING avg(bikes_available) > 10 EXCEPT SELECT name FROM station WHERE city = \"San Jose\"",
        "schema": "CREATE TABLE status (station_id NUMBER, bikes_available NUMBER); CREATE TABLE station (id NUMBER, long NUMBER, lat NUMBER, city TEXT, name TEXT);"
      }
    ],
    [
      {
        "question": "Give name, latitude, and city from stations.",
        "query": "SELECT name , lat , city FROM station",
        "schema": "CREATE TABLE station (id NUMBER, long NUMBER, city TEXT, name TEXT, lat NUMBER); CREATE TABLE status (station_id NUMBER);"
      },
      {
        "question": "Order that by latitude ascending.",
        "query": "SELECT name , lat , city FROM station ORDER BY lat",
        "schema": "CREATE TABLE station (id NUMBER, name TEXT, city TEXT, lat NUMBER, long NUMBER); CREATE TABLE status (station_id NUMBER);"
      },
      {
        "question": "Just limit it to the lowest latitude.",
        "query": "SELECT name , lat , city FROM station ORDER BY lat LIMIT 1",
        "schema": "CREATE TABLE station (long NUMBER, lat NUMBER, id NUMBER, city TEXT, name TEXT); CREATE TABLE status (station_id NUMBER);"
      }
    ],
    [
      {
        "question": "Which dates had the largest max gust speed?",
        "query": "SELECT date FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 1",
        "schema": "CREATE TABLE station (installation_date TEXT); CREATE TABLE weather (min_sea_level_pressure_inches NUMBER, mean_dew_point_f NUMBER, events TEXT, date TEXT, max_visibility_miles NUMBER, max_wind_Speed_mph NUMBER, mean_visibility_miles NUMBER, precipitation_inches NUMBER, min_visibility_miles NUMBER, min_temperature_f NUMBER, mean_sea_level_pressure_inches NUMBER, max_humidity NUMBER, max_dew_point_f NUMBER, min_humidity NUMBER, min_dew_point_f NUMBER, zip_code NUMBER, max_sea_level_pressure_inches NUMBER, mean_humidity NUMBER, wind_dir_degrees NUMBER, mean_wind_speed_mph NUMBER, cloud_cover NUMBER, max_temperature_f NUMBER, mean_temperature_f NUMBER, max_gust_speed_mph NUMBER); CREATE TABLE trip (start_date TEXT, end_date TEXT);"
      },
      {
        "question": "Also give mean temperature and mean humidity.",
        "query": "SELECT date , mean_temperature_f , mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 1",
        "schema": "CREATE TABLE station (installation_date TEXT); CREATE TABLE trip (end_date TEXT, start_date TEXT); CREATE TABLE weather (max_temperature_f NUMBER, mean_dew_point_f NUMBER, max_visibility_miles NUMBER, precipitation_inches NUMBER, mean_wind_speed_mph NUMBER, mean_temperature_f NUMBER, min_sea_level_pressure_inches NUMBER, mean_visibility_miles NUMBER, max_dew_point_f NUMBER, events TEXT, min_temperature_f NUMBER, max_sea_level_pressure_inches NUMBER, date TEXT, min_humidity NUMBER, max_gust_speed_mph NUMBER, cloud_cover NUMBER, max_humidity NUMBER, wind_dir_degrees NUMBER, mean_sea_level_pressure_inches NUMBER, min_visibility_miles NUMBER, max_wind_Speed_mph NUMBER, mean_humidity NUMBER, zip_code NUMBER, min_dew_point_f NUMBER);"
      },
      {
        "question": "Give the top 3 days instead.",
        "query": "SELECT date , mean_temperature_f , mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3",
        "schema": "CREATE TABLE weather (min_sea_level_pressure_inches NUMBER, mean_sea_level_pressure_inches NUMBER, max_dew_point_f NUMBER, max_humidity NUMBER, max_visibility_miles NUMBER, max_wind_Speed_mph NUMBER, min_humidity NUMBER, wind_dir_degrees NUMBER, min_visibility_miles NUMBER, mean_dew_point_f NUMBER, mean_temperature_f NUMBER, min_temperature_f NUMBER, date TEXT, mean_visibility_miles NUMBER, cloud_cover NUMBER, mean_wind_speed_mph NUMBER, events TEXT, mean_humidity NUMBER, max_temperature_f NUMBER, min_dew_point_f NUMBER, max_gust_speed_mph NUMBER, zip_code NUMBER, max_sea_level_pressure_inches NUMBER, precipitation_inches NUMBER); CREATE TABLE station (installation_date TEXT); CREATE TABLE trip (end_date TEXT, start_date TEXT);"
      }
    ],
    [
      {
        "question": "Which city has the most stations?",
        "query": "SELECT city FROM station GROUP BY city ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE station (id NUMBER, city TEXT, long NUMBER, lat NUMBER, name TEXT);"
      },
      {
        "question": "List the name and the number of stations for all the cities that have at least 15 stations.",
        "query": "SELECT city , count(*) FROM station GROUP BY city HAVING count(*) >= 15",
        "schema": "CREATE TABLE station (lat NUMBER, name TEXT, city TEXT, id NUMBER, long NUMBER);"
      }
    ],
    [
      {
        "question": "Give the ids of start stations together with the count of trips originated there.",
        "query": "SELECT start_station_id, count(*) FROM trip GROUP BY start_station_id",
        "schema": "CREATE TABLE station (name TEXT, long NUMBER, id NUMBER, city TEXT, dock_count NUMBER); CREATE TABLE trip (start_date TEXT, end_station_id NUMBER, start_station_id NUMBER, id NUMBER, start_station_name TEXT, end_station_name TEXT); CREATE TABLE status (station_id NUMBER);"
      },
      {
        "question": "Show the id and name for those with count at least 200.",
        "query": "SELECT start_station_id , start_station_name FROM trip GROUP BY start_station_id HAVING count(*) >= 200",
        "schema": "CREATE TABLE status (station_id NUMBER); CREATE TABLE station (name TEXT, dock_count NUMBER, long NUMBER, id NUMBER, city TEXT); CREATE TABLE trip (end_station_id NUMBER, start_date TEXT, start_station_id NUMBER, id NUMBER, start_station_name TEXT, end_station_name TEXT);"
      }
    ],
    [
      {
        "question": "Show the zip codes and average mean visibilities.",
        "query": "SELECT zip_code, mean_visibility_miles FROM weather",
        "schema": "CREATE TABLE weather (precipitation_inches NUMBER, max_sea_level_pressure_inches NUMBER, zip_code NUMBER, min_dew_point_f NUMBER, min_visibility_miles NUMBER, mean_temperature_f NUMBER, max_humidity NUMBER, mean_visibility_miles NUMBER, mean_dew_point_f NUMBER, events TEXT, max_dew_point_f NUMBER, mean_wind_speed_mph NUMBER, min_sea_level_pressure_inches NUMBER, mean_humidity NUMBER, date TEXT, wind_dir_degrees NUMBER, cloud_cover NUMBER, max_wind_Speed_mph NUMBER, max_visibility_miles NUMBER, min_temperature_f NUMBER, max_gust_speed_mph NUMBER, min_humidity NUMBER, mean_sea_level_pressure_inches NUMBER, max_temperature_f NUMBER); CREATE TABLE station (id NUMBER, lat NUMBER); CREATE TABLE trip (zip_code NUMBER);"
      },
      {
        "question": "Find the zip code in which the average mean visibility is lower than 10.",
        "query": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles) < 10",
        "schema": "CREATE TABLE trip (zip_code NUMBER); CREATE TABLE weather (zip_code NUMBER, cloud_cover NUMBER, mean_humidity NUMBER, wind_dir_degrees NUMBER, min_sea_level_pressure_inches NUMBER, min_visibility_miles NUMBER, max_gust_speed_mph NUMBER, mean_wind_speed_mph NUMBER, max_humidity NUMBER, max_temperature_f NUMBER, max_visibility_miles NUMBER, min_dew_point_f NUMBER, mean_visibility_miles NUMBER, mean_dew_point_f NUMBER, mean_temperature_f NUMBER, max_dew_point_f NUMBER, min_temperature_f NUMBER, events TEXT, min_humidity NUMBER, max_sea_level_pressure_inches NUMBER, date TEXT, precipitation_inches NUMBER, max_wind_Speed_mph NUMBER, mean_sea_level_pressure_inches NUMBER); CREATE TABLE station (id NUMBER, lat NUMBER);"
      }
    ],
    [
      {
        "question": "What is the highest latitude of any station?",
        "query": "SELECT max(lat) FROM station",
        "schema": "CREATE TABLE status (station_id NUMBER); CREATE TABLE station (long NUMBER, id NUMBER, name TEXT, lat NUMBER);"
      },
      {
        "question": "Show that for each city",
        "query": "SELECT city, max(lat) FROM station GROUP BY city",
        "schema": "CREATE TABLE station (long NUMBER, id NUMBER, city TEXT, lat NUMBER, name TEXT); CREATE TABLE status (station_id NUMBER);"
      },
      {
        "question": "List all the cities in a decreasing order of each city's stations' highest latitude.",
        "query": "SELECT city FROM station GROUP BY city ORDER BY max(lat) DESC",
        "schema": "CREATE TABLE status (station_id NUMBER); CREATE TABLE station (city TEXT, long NUMBER, id NUMBER, name TEXT, lat NUMBER);"
      }
    ],
    [
      {
        "question": "Show dates ordered by descending cloud cover rate.",
        "query": "SELECT date FROM weather ORDER BY cloud_cover",
        "schema": "CREATE TABLE weather (min_dew_point_f NUMBER, mean_humidity NUMBER, min_sea_level_pressure_inches NUMBER, cloud_cover NUMBER, mean_wind_speed_mph NUMBER, max_wind_Speed_mph NUMBER, mean_visibility_miles NUMBER, events TEXT, wind_dir_degrees NUMBER, min_visibility_miles NUMBER, mean_sea_level_pressure_inches NUMBER, mean_dew_point_f NUMBER, precipitation_inches NUMBER, max_sea_level_pressure_inches NUMBER, max_dew_point_f NUMBER, max_humidity NUMBER, max_temperature_f NUMBER, zip_code NUMBER, min_humidity NUMBER, date TEXT, mean_temperature_f NUMBER, max_visibility_miles NUMBER, min_temperature_f NUMBER, max_gust_speed_mph NUMBER); CREATE TABLE trip (start_date TEXT);"
      },
      {
        "question": "Also show me the cloud cover rate.",
        "query": "SELECT date , cloud_cover FROM weather ORDER BY cloud_cover",
        "schema": "CREATE TABLE weather (zip_code NUMBER, min_sea_level_pressure_inches NUMBER, mean_dew_point_f NUMBER, min_dew_point_f NUMBER, mean_sea_level_pressure_inches NUMBER, max_sea_level_pressure_inches NUMBER, mean_temperature_f NUMBER, wind_dir_degrees NUMBER, min_visibility_miles NUMBER, max_dew_point_f NUMBER, max_humidity NUMBER, max_temperature_f NUMBER, date TEXT, max_gust_speed_mph NUMBER, mean_wind_speed_mph NUMBER, precipitation_inches NUMBER, min_temperature_f NUMBER, events TEXT, mean_visibility_miles NUMBER, min_humidity NUMBER, cloud_cover NUMBER, max_wind_Speed_mph NUMBER, mean_humidity NUMBER, max_visibility_miles NUMBER); CREATE TABLE trip (start_date TEXT);"
      },
      {
        "question": "Only the top 5.",
        "query": "SELECT date , cloud_cover FROM weather ORDER BY cloud_cover DESC LIMIT 5",
        "schema": "CREATE TABLE trip (start_date TEXT); CREATE TABLE weather (mean_temperature_f NUMBER, mean_dew_point_f NUMBER, zip_code NUMBER, min_dew_point_f NUMBER, date TEXT, max_wind_Speed_mph NUMBER, min_sea_level_pressure_inches NUMBER, wind_dir_degrees NUMBER, min_visibility_miles NUMBER, max_dew_point_f NUMBER, max_temperature_f NUMBER, cloud_cover NUMBER, events TEXT, max_visibility_miles NUMBER, max_humidity NUMBER, mean_visibility_miles NUMBER, max_sea_level_pressure_inches NUMBER, max_gust_speed_mph NUMBER, mean_wind_speed_mph NUMBER, min_temperature_f NUMBER, mean_sea_level_pressure_inches NUMBER, min_humidity NUMBER, mean_humidity NUMBER, precipitation_inches NUMBER);"
      }
    ],
    [
      {
        "question": "Show trip durations.",
        "query": "SELECT duration FROM trip",
        "schema": "CREATE TABLE station (long NUMBER, id NUMBER); CREATE TABLE trip (bike_id NUMBER, duration NUMBER, start_station_id NUMBER, start_station_name TEXT, end_station_id NUMBER, id NUMBER);"
      },
      {
        "question": "What are the ids and durations of the trips with the top 3 durations?",
        "query": "SELECT id , duration FROM trip ORDER BY duration DESC LIMIT 3",
        "schema": "CREATE TABLE station (long NUMBER, id NUMBER); CREATE TABLE trip (start_station_name TEXT, end_station_id NUMBER, start_station_id NUMBER, bike_id NUMBER, id NUMBER, duration NUMBER);"
      }
    ],
    [
      {
        "question": "Show the average duration of trips starting from each station id.",
        "query": "SELECT start_station_id, avg(duration) FROM trip GROUP BY start_station_id",
        "schema": "CREATE TABLE station (long NUMBER, id NUMBER, name TEXT, lat NUMBER); CREATE TABLE trip (duration NUMBER, start_date TEXT, id NUMBER, bike_id NUMBER, end_station_name TEXT, end_station_id NUMBER, start_station_name TEXT, start_station_id NUMBER); CREATE TABLE status (station_id NUMBER);"
      },
      {
        "question": "For each station, return its longitude and the average duration of trips that started from the station.",
        "query": "SELECT t1.name , t1.long , avg(t2.duration) FROM station AS t1 JOIN trip AS t2 ON t1.id = t2.start_station_id GROUP BY t2.start_station_id",
        "schema": "CREATE TABLE trip (id NUMBER, end_station_id NUMBER, start_station_name TEXT, end_station_name TEXT, start_date TEXT, duration NUMBER, start_station_id NUMBER, bike_id NUMBER); CREATE TABLE station (id NUMBER, name TEXT, long NUMBER, lat NUMBER); CREATE TABLE status (station_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show the average duration of trips ending at each station id.",
        "query": "SELECT end_station_id, avg(duration) FROM trip GROUP BY end_station_id",
        "schema": "CREATE TABLE status (station_id NUMBER); CREATE TABLE station (name TEXT, lat NUMBER, dock_count NUMBER, id NUMBER, long NUMBER); CREATE TABLE trip (end_station_id NUMBER, bike_id NUMBER, duration NUMBER, end_station_name TEXT, id NUMBER, end_date TEXT, start_station_id NUMBER, start_station_name TEXT);"
      },
      {
        "question": "For each station, find its latitude and the minimum duration of trips that ended at the station.",
        "query": "SELECT t1.name , t1.lat , min(t2.duration) FROM station AS t1 JOIN trip AS t2 ON t1.id = t2.end_station_id GROUP BY t2.end_station_id",
        "schema": "CREATE TABLE station (long NUMBER, dock_count NUMBER, id NUMBER, name TEXT, lat NUMBER); CREATE TABLE trip (id NUMBER, duration NUMBER, start_station_id NUMBER, end_station_id NUMBER, end_station_name TEXT, end_date TEXT, bike_id NUMBER, start_station_name TEXT); CREATE TABLE status (station_id NUMBER);"
      }
    ],
    [
      {
        "question": "Which zip codes ever had a max dew point reaching 70?",
        "query": "SELECT DISTINCT zip_code FROM weather WHERE max_dew_point_f >= 70",
        "schema": "CREATE TABLE weather (zip_code NUMBER, min_humidity NUMBER, mean_dew_point_f NUMBER, mean_visibility_miles NUMBER, min_temperature_f NUMBER, min_sea_level_pressure_inches NUMBER, max_sea_level_pressure_inches NUMBER, max_wind_Speed_mph NUMBER, cloud_cover NUMBER, mean_sea_level_pressure_inches NUMBER, max_gust_speed_mph NUMBER, mean_temperature_f NUMBER, mean_wind_speed_mph NUMBER, max_visibility_miles NUMBER, max_dew_point_f NUMBER, precipitation_inches NUMBER, date TEXT, wind_dir_degrees NUMBER, min_visibility_miles NUMBER, max_humidity NUMBER, mean_humidity NUMBER, events TEXT, max_temperature_f NUMBER, min_dew_point_f NUMBER); CREATE TABLE trip (zip_code NUMBER); CREATE TABLE station (lat NUMBER);"
      },
      {
        "question": "Which did not?",
        "query": "SELECT DISTINCT zip_code FROM weather EXCEPT SELECT DISTINCT zip_code FROM weather WHERE max_dew_point_f >= 70",
        "schema": "CREATE TABLE station (lat NUMBER); CREATE TABLE trip (zip_code NUMBER); CREATE TABLE weather (zip_code NUMBER, min_temperature_f NUMBER, events TEXT, min_sea_level_pressure_inches NUMBER, cloud_cover NUMBER, mean_visibility_miles NUMBER, precipitation_inches NUMBER, mean_dew_point_f NUMBER, max_dew_point_f NUMBER, mean_humidity NUMBER, max_sea_level_pressure_inches NUMBER, mean_sea_level_pressure_inches NUMBER, min_visibility_miles NUMBER, max_temperature_f NUMBER, max_humidity NUMBER, min_humidity NUMBER, max_gust_speed_mph NUMBER, max_wind_Speed_mph NUMBER, mean_temperature_f NUMBER, mean_wind_speed_mph NUMBER, wind_dir_degrees NUMBER, min_dew_point_f NUMBER, date TEXT, max_visibility_miles NUMBER);"
      }
    ],
    [
      {
        "question": "What was the average duration of trips in zip code 94103?",
        "query": "SELECT avg(duration) FROM trip WHERE zip_code = 94103",
        "schema": "CREATE TABLE trip (zip_code NUMBER, duration NUMBER, bike_id NUMBER, id NUMBER); CREATE TABLE weather (zip_code NUMBER); CREATE TABLE station (lat NUMBER, long NUMBER, id NUMBER);"
      },
      {
        "question": "Which ids of trips lasted at least that long?",
        "query": "SELECT id FROM trip WHERE duration >= (SELECT avg(duration) FROM trip WHERE zip_code = 94103)",
        "schema": "CREATE TABLE trip (start_date TEXT, duration NUMBER, end_date TEXT, bike_id NUMBER, zip_code NUMBER, id NUMBER); CREATE TABLE weather (zip_code NUMBER); CREATE TABLE station (long NUMBER, id NUMBER, lat NUMBER);"
      }
    ],
    [
      {
        "question": "Show the min temperature and max temperature for each day.",
        "query": "SELECT date, max_temperature_f, min_temperature_f FROM weather",
        "schema": "CREATE TABLE weather (min_sea_level_pressure_inches NUMBER, cloud_cover NUMBER, min_temperature_f NUMBER, min_visibility_miles NUMBER, max_sea_level_pressure_inches NUMBER, max_dew_point_f NUMBER, events TEXT, max_humidity NUMBER, max_visibility_miles NUMBER, min_humidity NUMBER, mean_temperature_f NUMBER, wind_dir_degrees NUMBER, precipitation_inches NUMBER, min_dew_point_f NUMBER, max_wind_Speed_mph NUMBER, date TEXT, zip_code NUMBER, mean_visibility_miles NUMBER, mean_sea_level_pressure_inches NUMBER, max_gust_speed_mph NUMBER, mean_dew_point_f NUMBER, max_temperature_f NUMBER, mean_wind_speed_mph NUMBER, mean_humidity NUMBER); CREATE TABLE station (id NUMBER);"
      },
      {
        "question": "Order that by ascending order of difference between the max and min temperatures.",
        "query": "SELECT date, max_temperature_f, min_temperature_f FROM weather ORDER BY max_temperature_f - min_temperature_f",
        "schema": "CREATE TABLE weather (min_visibility_miles NUMBER, max_dew_point_f NUMBER, wind_dir_degrees NUMBER, mean_temperature_f NUMBER, cloud_cover NUMBER, min_dew_point_f NUMBER, precipitation_inches NUMBER, mean_wind_speed_mph NUMBER, max_temperature_f NUMBER, min_temperature_f NUMBER, min_humidity NUMBER, min_sea_level_pressure_inches NUMBER, max_wind_Speed_mph NUMBER, zip_code NUMBER, max_visibility_miles NUMBER, max_humidity NUMBER, mean_dew_point_f NUMBER, max_sea_level_pressure_inches NUMBER, date TEXT, mean_visibility_miles NUMBER, events TEXT, max_gust_speed_mph NUMBER, mean_sea_level_pressure_inches NUMBER, mean_humidity NUMBER); CREATE TABLE station (id NUMBER);"
      },
      {
        "question": "Find the day in which the difference between the max temperature and min temperature was the smallest. Also report the difference.",
        "query": "SELECT date , max_temperature_f - min_temperature_f FROM weather ORDER BY max_temperature_f - min_temperature_f LIMIT 1",
        "schema": "CREATE TABLE weather (max_wind_Speed_mph NUMBER, min_temperature_f NUMBER, wind_dir_degrees NUMBER, max_visibility_miles NUMBER, date TEXT, mean_wind_speed_mph NUMBER, precipitation_inches NUMBER, mean_visibility_miles NUMBER, min_dew_point_f NUMBER, max_humidity NUMBER, mean_dew_point_f NUMBER, min_sea_level_pressure_inches NUMBER, max_dew_point_f NUMBER, cloud_cover NUMBER, max_sea_level_pressure_inches NUMBER, max_temperature_f NUMBER, min_humidity NUMBER, zip_code NUMBER, mean_sea_level_pressure_inches NUMBER, mean_temperature_f NUMBER, events TEXT, max_gust_speed_mph NUMBER, min_visibility_miles NUMBER, mean_humidity NUMBER); CREATE TABLE station (id NUMBER);"
      }
    ],
    [
      {
        "question": "Which station ids never had more than 12 bikes available?",
        "query": "SELECT DISTINCT station_id FROM status WHERE station_id NOT IN (SELECT station_id FROM status WHERE bikes_available > 12)",
        "schema": "CREATE TABLE status (station_id NUMBER, bikes_available NUMBER); CREATE TABLE station (name TEXT, id NUMBER, city TEXT); CREATE TABLE trip (start_station_name TEXT);"
      },
      {
        "question": "Which ones ever had more than 12 bikes available?",
        "query": "SELECT DISTINCT station_id FROM status WHERE bikes_available > 12",
        "schema": "CREATE TABLE station (city TEXT, id NUMBER, name TEXT); CREATE TABLE trip (start_station_name TEXT); CREATE TABLE status (station_id NUMBER, bikes_available NUMBER);"
      },
      {
        "question": "What are the id and name of the stations that have ever had more than 12 bikes available?",
        "query": "SELECT DISTINCT t1.id , t1.name FROM station AS t1 JOIN status AS t2 ON t1.id = t2.station_id WHERE t2.bikes_available > 12",
        "schema": "CREATE TABLE status (bikes_available NUMBER, station_id NUMBER); CREATE TABLE station (city TEXT, name TEXT, id NUMBER); CREATE TABLE trip (start_station_name TEXT);"
      }
    ],
    [
      {
        "question": "Which zip code had at least 100 trips taking place there?",
        "query": "SELECT DISTINCT zip_code FROM trip GROUP BY zip_code HAVING count(*) >= 100",
        "schema": "CREATE TABLE station (name TEXT); CREATE TABLE weather (zip_code NUMBER); CREATE TABLE trip (id NUMBER, start_station_id NUMBER, zip_code NUMBER, bike_id NUMBER, start_station_name TEXT, duration NUMBER);"
      },
      {
        "question": "Give me the zip code where the average mean humidity is below 70",
        "query": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_humidity) < 70",
        "schema": "CREATE TABLE weather (min_sea_level_pressure_inches NUMBER, max_wind_Speed_mph NUMBER, mean_wind_speed_mph NUMBER, max_gust_speed_mph NUMBER, max_humidity NUMBER, min_humidity NUMBER, max_visibility_miles NUMBER, mean_visibility_miles NUMBER, mean_dew_point_f NUMBER, min_temperature_f NUMBER, events TEXT, wind_dir_degrees NUMBER, mean_sea_level_pressure_inches NUMBER, precipitation_inches NUMBER, zip_code NUMBER, mean_temperature_f NUMBER, max_sea_level_pressure_inches NUMBER, min_dew_point_f NUMBER, cloud_cover NUMBER, max_temperature_f NUMBER, date TEXT, mean_humidity NUMBER, min_visibility_miles NUMBER, max_dew_point_f NUMBER); CREATE TABLE trip (start_station_id NUMBER, start_station_name TEXT, zip_code NUMBER, bike_id NUMBER, id NUMBER, duration NUMBER); CREATE TABLE station (name TEXT);"
      },
      {
        "question": "Intersect those.",
        "query": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_humidity) < 70 INTERSECT SELECT zip_code FROM trip GROUP BY zip_code HAVING count(*) >= 100",
        "schema": "CREATE TABLE weather (mean_temperature_f NUMBER, zip_code NUMBER, min_dew_point_f NUMBER, mean_visibility_miles NUMBER, wind_dir_degrees NUMBER, max_visibility_miles NUMBER, date TEXT, mean_dew_point_f NUMBER, min_sea_level_pressure_inches NUMBER, cloud_cover NUMBER, events TEXT, min_visibility_miles NUMBER, max_humidity NUMBER, max_wind_Speed_mph NUMBER, max_sea_level_pressure_inches NUMBER, min_temperature_f NUMBER, max_dew_point_f NUMBER, max_temperature_f NUMBER, max_gust_speed_mph NUMBER, precipitation_inches NUMBER, mean_wind_speed_mph NUMBER, mean_sea_level_pressure_inches NUMBER, mean_humidity NUMBER, min_humidity NUMBER); CREATE TABLE station (name TEXT); CREATE TABLE trip (duration NUMBER, start_station_name TEXT, bike_id NUMBER, zip_code NUMBER, start_station_id NUMBER, id NUMBER);"
      }
    ],
    [
      {
        "question": "Which end station names have more than 100 trips ending there?",
        "query": "SELECT DISTINCT end_station_name FROM trip GROUP BY end_station_name HAVING count(*) > 100",
        "schema": "CREATE TABLE trip (end_station_name TEXT, start_station_id NUMBER, duration NUMBER, id NUMBER, end_station_id NUMBER, start_station_name TEXT); CREATE TABLE station (id NUMBER, city TEXT, long NUMBER, lat NUMBER, name TEXT); CREATE TABLE status (station_id NUMBER);"
      },
      {
        "question": "Which station names are in city \"Palo Alto\"?",
        "query": "SELECT name FROM station WHERE city = \"Palo Alto\"",
        "schema": "CREATE TABLE station (name TEXT, id NUMBER, long NUMBER, lat NUMBER, city TEXT); CREATE TABLE status (station_id NUMBER); CREATE TABLE trip (end_station_id NUMBER, duration NUMBER, end_station_name TEXT, start_station_name TEXT, start_station_id NUMBER, id NUMBER);"
      },
      {
        "question": "Take set minus on the last two results: what are the names of stations that are located in Palo Alto city but have never been the ending point of trips more than 100 times?",
        "query": "SELECT name FROM station WHERE city = \"Palo Alto\" EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*) > 100",
        "schema": "CREATE TABLE trip (start_station_name TEXT, end_date TEXT, duration NUMBER, id NUMBER, end_station_name TEXT, end_station_id NUMBER, start_station_id NUMBER); CREATE TABLE status (station_id NUMBER); CREATE TABLE station (name TEXT, long NUMBER, id NUMBER, lat NUMBER, city TEXT);"
      }
    ],
    [
      {
        "question": "How many trips started from Mountain View city",
        "query": "SELECT count(*) FROM station AS t1 JOIN trip AS t2 JOIN station AS t3 JOIN trip AS t4 ON t1.id = t2.start_station_id AND t2.id = t4.id AND t3.id = t4.end_station_id WHERE t1.city = \"Mountain View\"",
        "schema": "CREATE TABLE trip (start_date TEXT, id NUMBER, zip_code NUMBER, bike_id NUMBER, duration NUMBER, end_station_name TEXT, end_station_id NUMBER, start_station_name TEXT, start_station_id NUMBER); CREATE TABLE station (long NUMBER, name TEXT, id NUMBER, city TEXT);"
      },
      {
        "question": "How many trips started from Mountain View city and ended at Palo Alto city?",
        "query": "SELECT count(*) FROM station AS t1 JOIN trip AS t2 JOIN station AS t3 JOIN trip AS t4 ON t1.id = t2.start_station_id AND t2.id = t4.id AND t3.id = t4.end_station_id WHERE t1.city = \"Mountain View\" AND t3.city = \"Palo Alto\"",
        "schema": "CREATE TABLE status (station_id NUMBER); CREATE TABLE station (name TEXT, city TEXT, lat NUMBER, long NUMBER, id NUMBER); CREATE TABLE trip (id NUMBER, start_station_name TEXT, start_station_id NUMBER, bike_id NUMBER, start_date TEXT, zip_code NUMBER, duration NUMBER, end_station_name TEXT, end_station_id NUMBER);"
      }
    ]
  ],
  "riding_club": [
    [
      {
        "question": "Show all the information about the players.",
        "query": "SELECT * FROM player",
        "schema": "CREATE TABLE player_coach (Coach_ID NUMBER, Player_ID NUMBER); CREATE TABLE player (Player_name TEXT, Player_ID NUMBER, Rank TEXT, Gender TEXT, Occupation TEXT); CREATE TABLE coach (Coach_ID NUMBER);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT count(*) FROM player",
        "schema": "CREATE TABLE player_coach (Coach_ID NUMBER, Player_ID NUMBER); CREATE TABLE coach (Coach_ID NUMBER); CREATE TABLE player (Player_name TEXT, Rank TEXT, Occupation TEXT, Gender TEXT, Player_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What are the player names?",
        "query": "SELECT player_name FROM player",
        "schema": "CREATE TABLE player (Player_ID NUMBER, Player_name TEXT, Sponsor_name TEXT); CREATE TABLE coach (Coach_name TEXT);"
      },
      {
        "question": "How many vote does each player has?",
        "query": "SELECT player_name,votes FROM player",
        "schema": "CREATE TABLE player (Sponsor_name TEXT, Votes NUMBER, Player_name TEXT, Player_ID NUMBER); CREATE TABLE coach (Coach_name TEXT);"
      },
      {
        "question": "Who has the maximum vote?",
        "query": "SELECT player_name FROM player ORDER BY votes DESC LIMIT 1",
        "schema": "CREATE TABLE player (Player_ID NUMBER, Sponsor_name TEXT, Player_name TEXT, Votes NUMBER); CREATE TABLE coach (Coach_name TEXT);"
      },
      {
        "question": "Order the names by number of vote in ascending order.",
        "query": "SELECT player_name FROM player ORDER BY votes ASC",
        "schema": "CREATE TABLE player (Votes NUMBER, Player_ID NUMBER, Player_name TEXT, Sponsor_name TEXT); CREATE TABLE coach (Coach_name TEXT);"
      }
    ],
    [
      {
        "question": "Show the player names and the residences.",
        "query": "SELECT player_name , residence FROM player",
        "schema": "CREATE TABLE player (Residence TEXT, Player_name TEXT, Player_ID NUMBER, Sponsor_name TEXT); CREATE TABLE club (Club_ID NUMBER);"
      },
      {
        "question": "Show the names and the occupation of each them.",
        "query": "SELECT gender , occupation FROM player",
        "schema": "CREATE TABLE club (Club_ID NUMBER); CREATE TABLE player (Gender TEXT, Occupation TEXT, Residence TEXT, Player_ID NUMBER, Sponsor_name TEXT, Player_name TEXT);"
      }
    ],
    [
      {
        "question": "Show the player names and the residences.",
        "query": "SELECT player_name , residence FROM player",
        "schema": "CREATE TABLE player (Player_name TEXT, Residence TEXT, Sponsor_name TEXT, Player_ID NUMBER); CREATE TABLE club (Club_ID NUMBER);"
      },
      {
        "question": "Only keep those whose gender is male.",
        "query": "SELECT player_name , residence FROM player WHERE gender = \"M\"",
        "schema": "CREATE TABLE coach (Gender TEXT); CREATE TABLE player (Player_name TEXT, Gender TEXT, Residence TEXT, Player_ID NUMBER, Sponsor_name TEXT); CREATE TABLE club (Club_ID NUMBER);"
      },
      {
        "question": "Show the player names and the residences whose occupation is not \"Researcher\".",
        "query": "SELECT player_name , residence FROM player WHERE occupation != \"Researcher\"",
        "schema": "CREATE TABLE coach (Gender TEXT); CREATE TABLE club (Club_ID NUMBER); CREATE TABLE player (Player_ID NUMBER, Residence TEXT, Occupation TEXT, Sponsor_name TEXT, Gender TEXT, Player_name TEXT);"
      }
    ],
    [
      {
        "question": "List the name and the sponsor name of each player.",
        "query": "SELECT player_name, sponsor_name FROM player",
        "schema": "CREATE TABLE player (Player_ID NUMBER, Sponsor_name TEXT, Player_name TEXT);"
      },
      {
        "question": "How many unique sponsor names are there?",
        "query": "SELECT count(DISTINCT sponsor_name) FROM player",
        "schema": "CREATE TABLE player (Player_name TEXT, Player_ID NUMBER, Sponsor_name TEXT);"
      },
      {
        "question": "Which sponsor names support female players?",
        "query": "SELECT sponsor_name FROM player WHERE gender = \"F\"",
        "schema": "CREATE TABLE player (Gender TEXT, Player_ID NUMBER, Player_name TEXT, Sponsor_name TEXT);"
      },
      {
        "question": "What about supporting players whose residence is \"Brandon\" or \"Birtle\"?",
        "query": "SELECT sponsor_name FROM player WHERE residence = \"Brandon\" OR residence = \"Birtle\"",
        "schema": "CREATE TABLE player (Sponsor_name TEXT, Player_ID NUMBER, Player_name TEXT, Residence TEXT, Gender TEXT);"
      }
    ],
    [
      {
        "question": "What are the player names and their number of votes?",
        "query": "SELECT player_name, votes FROM player",
        "schema": "CREATE TABLE player (Player_ID NUMBER, Votes NUMBER, Player_name TEXT); CREATE TABLE coach (Coach_name TEXT);"
      },
      {
        "question": "Which one has the minimum vote?",
        "query": "SELECT player_name FROM player ORDER BY votes ASC LIMIT 1",
        "schema": "CREATE TABLE player (Player_name TEXT, Player_ID NUMBER, Votes NUMBER); CREATE TABLE coach (Coach_name TEXT);"
      },
      {
        "question": "What about the one with the maximum vote?",
        "query": "SELECT player_name FROM player ORDER BY votes DESC LIMIT 1",
        "schema": "CREATE TABLE coach (Coach_name TEXT); CREATE TABLE player (Votes NUMBER, Player_name TEXT, Player_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show the unique occupation for the players?",
        "query": "SELECT DISTINCT occupation FROM player",
        "schema": "CREATE TABLE club (Club_ID NUMBER); CREATE TABLE player (Occupation TEXT, Player_ID NUMBER, Player_name TEXT);"
      },
      {
        "question": "How many in total?",
        "query": "SELECT count(DISTINCT occupation) FROM player",
        "schema": "CREATE TABLE player (Player_name TEXT, Player_ID NUMBER, Occupation TEXT); CREATE TABLE club (Club_ID NUMBER);"
      },
      {
        "question": "How many are there in each occupation?",
        "query": "SELECT occupation , count(*) FROM player GROUP BY occupation",
        "schema": "CREATE TABLE club (Club_ID NUMBER); CREATE TABLE player (Player_ID NUMBER, Player_name TEXT, Occupation TEXT);"
      }
    ],
    [
      {
        "question": "Show the unique occupation for the players?",
        "query": "SELECT DISTINCT occupation FROM player",
        "schema": "CREATE TABLE club (Club_ID NUMBER); CREATE TABLE player (Player_ID NUMBER, Player_name TEXT, Occupation TEXT);"
      },
      {
        "question": "How many in total?",
        "query": "SELECT count(DISTINCT occupation) FROM player",
        "schema": "CREATE TABLE player (Player_name TEXT, Occupation TEXT, Player_ID NUMBER); CREATE TABLE club (Club_ID NUMBER);"
      },
      {
        "question": "Which is the most popular occupation?",
        "query": "SELECT occupation FROM player GROUP BY occupation ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE club (Club_ID NUMBER); CREATE TABLE player (Player_name TEXT, Occupation TEXT, Player_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show the unique residences for the players?",
        "query": "SELECT DISTINCT residence FROM player",
        "schema": "CREATE TABLE player (Player_name TEXT, Player_ID NUMBER, Occupation TEXT, Residence TEXT);"
      },
      {
        "question": "How many in total?",
        "query": "SELECT count(DISTINCT residence) FROM player",
        "schema": "CREATE TABLE player (Player_ID NUMBER, Player_name TEXT, Occupation TEXT, Residence TEXT);"
      },
      {
        "question": "Which residences have only one player?",
        "query": "SELECT residence FROM player GROUP BY residence HAVING count(*) = 1",
        "schema": "CREATE TABLE player (Player_ID NUMBER, Residence TEXT, Occupation TEXT, Player_name TEXT);"
      },
      {
        "question": "What about at least two?",
        "query": "SELECT residence FROM player GROUP BY residence HAVING count(*) >= 2",
        "schema": "CREATE TABLE player (Player_ID NUMBER, Residence TEXT, Player_name TEXT, Occupation TEXT);"
      }
    ],
    [
      {
        "question": "List the name and gender of players",
        "query": "SELECT player_name, gender FROM player",
        "schema": "CREATE TABLE coach (Gender TEXT); CREATE TABLE player (Gender TEXT, Player_name TEXT, Player_ID NUMBER);"
      },
      {
        "question": "How many coaches are there?",
        "query": "SELECT count(*) FROM coach",
        "schema": "CREATE TABLE coach (Coach_ID NUMBER, Coach_name TEXT, Gender TEXT, Club_ID NUMBER); CREATE TABLE player_coach (Player_ID NUMBER, Coach_ID NUMBER); CREATE TABLE player (Gender TEXT, Player_ID NUMBER, Player_name TEXT);"
      },
      {
        "question": "Show the name of each player and also the corresponding coach name of each.",
        "query": "SELECT t3.player_name , t2.coach_name FROM player_coach AS t1 JOIN coach AS t2 ON t1.coach_id = t2.coach_id JOIN player AS t3 ON t1.player_id = t3.player_id",
        "schema": "CREATE TABLE player (Player_ID NUMBER, Gender TEXT, Player_name TEXT); CREATE TABLE coach (Gender TEXT, Club_ID NUMBER, Coach_ID NUMBER, Coach_name TEXT); CREATE TABLE player_coach (Player_ID NUMBER, Coach_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Which coaches are rank in the 1st and 2nd place?",
        "query": "SELECT coach_name FROM coach WHERE rank < 3",
        "schema": "CREATE TABLE coach (Rank NUMBER, Coach_name TEXT, Coach_ID NUMBER); CREATE TABLE match_result (Rank NUMBER); CREATE TABLE player_coach (Player_ID NUMBER, Coach_ID NUMBER); CREATE TABLE player (Rank TEXT, Player_ID NUMBER);"
      },
      {
        "question": "Which coach is the 1st, show the name of the coach?",
        "query": "SELECT coach_name FROM coach WHERE rank = 1",
        "schema": "CREATE TABLE match_result (Rank NUMBER); CREATE TABLE coach (Coach_ID NUMBER, Coach_name TEXT, Rank NUMBER); CREATE TABLE player (Player_ID NUMBER, Rank TEXT, Player_name TEXT); CREATE TABLE player_coach (Coach_ID NUMBER, Player_ID NUMBER);"
      },
      {
        "question": "What are the names of players of that coach?",
        "query": "SELECT t3.player_name FROM player_coach AS t1 JOIN coach AS t2 ON t1.coach_id = t2.coach_id JOIN player AS t3 ON t1.player_id = t3.player_id WHERE t2.rank = 1",
        "schema": "CREATE TABLE player_coach (Coach_ID NUMBER, Player_ID NUMBER); CREATE TABLE match_result (Rank NUMBER); CREATE TABLE player (Player_ID NUMBER, Rank TEXT, Player_name TEXT); CREATE TABLE coach (Coach_name TEXT, Rank NUMBER, Coach_ID NUMBER);"
      }
    ],
    [
      {
        "question": "List the name of players",
        "query": "SELECT player_name FROM player",
        "schema": "CREATE TABLE coach (Coach_name TEXT, Coach_ID NUMBER); CREATE TABLE player (Player_ID NUMBER, Player_name TEXT);"
      },
      {
        "question": "Show the name of each player and also the corresponding coach name.",
        "query": "SELECT t3.player_name , t2.coach_name FROM player_coach AS t1 JOIN coach AS t2 ON t1.coach_id = t2.coach_id JOIN player AS t3 ON t1.player_id = t3.player_id",
        "schema": "CREATE TABLE coach (Coach_ID NUMBER, Coach_name TEXT); CREATE TABLE player (Player_ID NUMBER, Player_name TEXT); CREATE TABLE player_coach (Player_ID NUMBER, Coach_ID NUMBER);"
      },
      {
        "question": "Which pair starts before 2012?",
        "query": "SELECT t3.player_name , t2.coach_name FROM player_coach AS t1 JOIN coach AS t2 ON t1.coach_id = t2.coach_id JOIN player AS t3 ON t1.player_id = t3.player_id WHERE t1.starting_year < 2012",
        "schema": "CREATE TABLE player_coach (Starting_year NUMBER, Player_ID NUMBER, Coach_ID NUMBER); CREATE TABLE player (Player_name TEXT, Player_ID NUMBER); CREATE TABLE coach (Coach_ID NUMBER, Coach_name TEXT);"
      },
      {
        "question": "What about after 2011?",
        "query": "SELECT t3.player_name , t2.coach_name FROM player_coach AS t1 JOIN coach AS t2 ON t1.coach_id = t2.coach_id JOIN player AS t3 ON t1.player_id = t3.player_id WHERE t1.starting_year > 2011",
        "schema": "CREATE TABLE coach (Coach_name TEXT, Coach_ID NUMBER); CREATE TABLE player (Player_name TEXT, Player_ID NUMBER); CREATE TABLE club (Start_year NUMBER); CREATE TABLE player_coach (Coach_ID NUMBER, Player_ID NUMBER, Starting_year NUMBER);"
      },
      {
        "question": "Only show the player names and genders of those results.",
        "query": "SELECT t3.player_name , t3.gender FROM player_coach AS t1 JOIN coach AS t2 ON t1.coach_id = t2.coach_id JOIN player AS t3 ON t1.player_id = t3.player_id WHERE t1.starting_year > 2011",
        "schema": "CREATE TABLE coach (Gender TEXT, Coach_name TEXT, Coach_ID NUMBER); CREATE TABLE player_coach (Starting_year NUMBER, Coach_ID NUMBER, Player_ID NUMBER); CREATE TABLE club (Start_year NUMBER); CREATE TABLE player (Player_ID NUMBER, Gender TEXT, Player_name TEXT);"
      }
    ],
    [
      {
        "question": "List the name of players",
        "query": "SELECT player_name FROM player",
        "schema": "CREATE TABLE coach (Coach_name TEXT, Coach_ID NUMBER); CREATE TABLE player (Player_ID NUMBER, Player_name TEXT);"
      },
      {
        "question": "How many coaches in total?",
        "query": "SELECT count(*) FROM coach",
        "schema": "CREATE TABLE coach (Coach_name TEXT, Coach_ID NUMBER, Rank NUMBER); CREATE TABLE player (Player_name TEXT, Player_ID NUMBER); CREATE TABLE player_coach (Player_ID NUMBER, Coach_ID NUMBER);"
      },
      {
        "question": "Show the name of each player and also the corresponding coach name of each.",
        "query": "SELECT t3.player_name , t2.coach_name FROM player_coach AS t1 JOIN coach AS t2 ON t1.coach_id = t2.coach_id JOIN player AS t3 ON t1.player_id = t3.player_id",
        "schema": "CREATE TABLE player_coach (Coach_ID NUMBER, Player_ID NUMBER); CREATE TABLE coach (Coach_ID NUMBER, Rank NUMBER, Coach_name TEXT); CREATE TABLE player (Player_name TEXT, Player_ID NUMBER);"
      },
      {
        "question": "Who is Ross Eadie's coach?",
        "query": "SELECT t2.coach_name FROM player_coach AS t1 JOIN coach AS t2 ON t1.coach_id = t2.coach_id JOIN player AS t3 ON t1.player_id = t3.player_id WHERE t3.player_name = 'Ross Eadie'",
        "schema": "CREATE TABLE coach (Coach_name TEXT, Rank NUMBER, Coach_ID NUMBER); CREATE TABLE player (Player_ID NUMBER, Player_name TEXT); CREATE TABLE player_coach (Player_ID NUMBER, Coach_ID NUMBER);"
      },
      {
        "question": "List all the player-coach name pair with the vote of players, in descending order.",
        "query": "SELECT t3.player_name , t2.coach_name FROM player_coach AS t1 JOIN coach AS t2 ON t1.coach_id = t2.coach_id JOIN player AS t3 ON t1.player_id = t3.player_id ORDER BY t3.votes DESC",
        "schema": "CREATE TABLE coach (Coach_ID NUMBER, Coach_name TEXT, Rank NUMBER); CREATE TABLE player (Player_name TEXT, Votes NUMBER, Player_ID NUMBER); CREATE TABLE player_coach (Player_ID NUMBER, Coach_ID NUMBER);"
      }
    ],
    [
      {
        "question": "How many players are there?",
        "query": "SELECT count(*) FROM player",
        "schema": "CREATE TABLE player (Player_name TEXT, Occupation TEXT, Votes NUMBER, Rank TEXT, Player_ID NUMBER, Residence TEXT); CREATE TABLE club (Club_ID NUMBER); CREATE TABLE coach (Coach_ID NUMBER, Club_ID NUMBER); CREATE TABLE player_coach (Player_ID NUMBER, Coach_ID NUMBER); CREATE TABLE match_result (Club_ID NUMBER);"
      },
      {
        "question": "What about coaches?",
        "query": "SELECT count(*) FROM coach",
        "schema": "CREATE TABLE match_result (Club_ID NUMBER); CREATE TABLE club (Club_ID NUMBER); CREATE TABLE player (Player_name TEXT, Occupation TEXT, Rank TEXT, Votes NUMBER, Residence TEXT, Player_ID NUMBER); CREATE TABLE player_coach (Coach_ID NUMBER, Player_ID NUMBER); CREATE TABLE coach (Coach_ID NUMBER, Rank NUMBER, Club_ID NUMBER, Coach_name TEXT);"
      },
      {
        "question": "Which players do not have a coach?",
        "query": "SELECT player_name FROM player WHERE player_id NOT IN (SELECT player_id FROM player_coach)",
        "schema": "CREATE TABLE match_result (Club_ID NUMBER); CREATE TABLE coach (Rank NUMBER, Coach_name TEXT, Coach_ID NUMBER, Club_ID NUMBER); CREATE TABLE player_coach (Coach_ID NUMBER, Player_ID NUMBER); CREATE TABLE club (Club_ID NUMBER); CREATE TABLE player (Residence TEXT, Votes NUMBER, Player_name TEXT, Player_ID NUMBER, Occupation TEXT, Rank TEXT);"
      }
    ],
    [
      {
        "question": "How many female players are there?",
        "query": "SELECT count(*) FROM player WHERE gender = 'F'",
        "schema": "CREATE TABLE coach (Coach_ID NUMBER, Gender TEXT); CREATE TABLE player_coach (Coach_ID NUMBER, Player_ID NUMBER); CREATE TABLE player (Rank TEXT, Player_name TEXT, Occupation TEXT, Player_ID NUMBER, Gender TEXT);"
      },
      {
        "question": "What about male players?",
        "query": "SELECT count(*) FROM player WHERE gender = 'M'",
        "schema": "CREATE TABLE player_coach (Coach_ID NUMBER, Player_ID NUMBER); CREATE TABLE coach (Coach_ID NUMBER, Gender TEXT); CREATE TABLE player (Rank TEXT, Occupation TEXT, Player_name TEXT, Player_ID NUMBER, Gender TEXT);"
      },
      {
        "question": "What are the residences of them?",
        "query": "SELECT residence FROM player WHERE gender = 'M'",
        "schema": "CREATE TABLE player (Rank TEXT, Gender TEXT, Occupation TEXT, Player_name TEXT, Residence TEXT, Player_ID NUMBER); CREATE TABLE coach (Coach_ID NUMBER, Gender TEXT); CREATE TABLE player_coach (Coach_ID NUMBER, Player_ID NUMBER);"
      },
      {
        "question": "Which residences have both female and male players?",
        "query": "SELECT residence FROM player WHERE gender = \"M\" INTERSECT SELECT residence FROM player WHERE gender = \"F\"",
        "schema": "CREATE TABLE player (Player_name TEXT, Gender TEXT, Residence TEXT, Rank TEXT, Player_ID NUMBER, Occupation TEXT); CREATE TABLE player_coach (Player_ID NUMBER, Coach_ID NUMBER); CREATE TABLE coach (Gender TEXT, Coach_ID NUMBER);"
      }
    ],
    [
      {
        "question": "How many clubs are there?",
        "query": "SELECT count(club_id) FROM club",
        "schema": "CREATE TABLE coach (Coach_ID NUMBER, Club_ID NUMBER); CREATE TABLE player (Player_name TEXT, Player_ID NUMBER); CREATE TABLE club (Club_name TEXT, Club_ID NUMBER); CREATE TABLE match_result (Club_ID NUMBER); CREATE TABLE player_coach (Coach_ID NUMBER, Player_ID NUMBER);"
      },
      {
        "question": "How many coaches in total?",
        "query": "SELECT count(*) FROM coach",
        "schema": "CREATE TABLE match_result (Club_ID NUMBER); CREATE TABLE club (Club_name TEXT, Club_ID NUMBER); CREATE TABLE player_coach (Player_ID NUMBER, Coach_ID NUMBER); CREATE TABLE coach (Rank NUMBER, Club_ID NUMBER, Coach_ID NUMBER, Coach_name TEXT); CREATE TABLE player (Player_name TEXT, Player_ID NUMBER);"
      },
      {
        "question": "How many coaches are there from 'AIK' club?",
        "query": "SELECT count(*) FROM coach AS t1 JOIN club AS t2 ON t1.club_id = t2.club_id WHERE t2.club_name = \"AIK\"",
        "schema": "CREATE TABLE player (Player_ID NUMBER, Player_name TEXT); CREATE TABLE coach (Club_ID NUMBER, Coach_name TEXT, Rank NUMBER, Coach_ID NUMBER); CREATE TABLE club (Club_name TEXT, Club_ID NUMBER); CREATE TABLE match_result (Club_ID NUMBER); CREATE TABLE player_coach (Player_ID NUMBER, Coach_ID NUMBER);"
      },
      {
        "question": "How many coaches in each club, give the club id, club name and number of coaches.",
        "query": "SELECT t1.club_id , t1.club_name, count(*) FROM club AS t1 JOIN coach AS t2 ON t1.club_id = t2.club_id GROUP BY t1.club_id",
        "schema": "CREATE TABLE club (Club_name TEXT, Club_ID NUMBER); CREATE TABLE match_result (Club_ID NUMBER); CREATE TABLE player_coach (Coach_ID NUMBER, Player_ID NUMBER); CREATE TABLE player (Player_ID NUMBER, Player_name TEXT); CREATE TABLE coach (Rank NUMBER, Coach_ID NUMBER, Club_ID NUMBER, Coach_name TEXT);"
      }
    ]
  ],
  "railway": [
    [
      {
        "question": "List all the railways.",
        "query": "SELECT * FROM railway",
        "schema": "CREATE TABLE railway_manage (Railway_ID NUMBER); CREATE TABLE train (Railway_ID NUMBER); CREATE TABLE railway (Railway_ID NUMBER, Railway TEXT);"
      },
      {
        "question": "How many in total?",
        "query": "SELECT count(*) FROM railway",
        "schema": "CREATE TABLE train (From TEXT, Railway_ID NUMBER); CREATE TABLE railway_manage (Railway_ID NUMBER); CREATE TABLE railway (Railway_ID NUMBER, Railway TEXT);"
      }
    ],
    [
      {
        "question": "Show all the builders of the railway.",
        "query": "SELECT builder FROM railway",
        "schema": "CREATE TABLE train (Railway_ID NUMBER, Name TEXT); CREATE TABLE railway (Railway TEXT, Railway_ID NUMBER, Built TEXT, Builder TEXT);"
      },
      {
        "question": "Order them in ascending alphabetical order.",
        "query": "SELECT builder FROM railway ORDER BY builder ASC",
        "schema": "CREATE TABLE railway (Builder TEXT, Built TEXT, Railway_ID NUMBER, Railway TEXT); CREATE TABLE train (Railway_ID NUMBER, Name TEXT);"
      }
    ],
    [
      {
        "question": "Show the wheels and also locations of each railway.",
        "query": "SELECT wheels , LOCATION FROM railway",
        "schema": "CREATE TABLE railway (Location TEXT, ObjectNumber TEXT, Wheels TEXT, Railway TEXT, Railway_ID NUMBER); CREATE TABLE train (Name TEXT, Railway_ID NUMBER, Train_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show all the level of managers.",
        "query": "SELECT LEVEL FROM manager",
        "schema": "CREATE TABLE railway (Railway_ID NUMBER); CREATE TABLE railway_manage (Railway_ID NUMBER, Manager_ID NUMBER); CREATE TABLE manager (Age NUMBER, Manager_ID NUMBER, Level NUMBER, Name TEXT);"
      },
      {
        "question": "What is the average level?",
        "query": "SELECT avg(LEVEL) FROM manager",
        "schema": "CREATE TABLE manager (Age NUMBER, Manager_ID NUMBER, Level NUMBER, Name TEXT); CREATE TABLE railway_manage (Railway_ID NUMBER, Manager_ID NUMBER); CREATE TABLE railway (Railway_ID NUMBER);"
      },
      {
        "question": "What is that of the managers that come from \"United States\"?",
        "query": "SELECT avg(LEVEL) FROM manager WHERE country != \"United States\"",
        "schema": "CREATE TABLE railway (Railway_ID NUMBER); CREATE TABLE manager (Level NUMBER, Country TEXT, Age NUMBER, Name TEXT, Manager_ID NUMBER); CREATE TABLE railway_manage (Manager_ID NUMBER, Railway_ID NUMBER);"
      },
      {
        "question": "What is the maximum level of managers that do not come from \"Australia\"?",
        "query": "SELECT max(LEVEL) FROM manager WHERE country != \"Australia \"",
        "schema": "CREATE TABLE railway (Railway_ID NUMBER); CREATE TABLE railway_manage (Railway_ID NUMBER, Manager_ID NUMBER); CREATE TABLE manager (Country TEXT, Name TEXT, Age NUMBER, Level NUMBER, Manager_ID NUMBER);"
      }
    ],
    [
      {
        "question": "List all the ages of the managers",
        "query": "SELECT age FROM manager",
        "schema": "CREATE TABLE railway (Railway_ID NUMBER); CREATE TABLE railway_manage (Railway_ID NUMBER, Manager_ID NUMBER); CREATE TABLE manager (Manager_ID NUMBER, Age NUMBER, Name TEXT);"
      },
      {
        "question": "What is the maximum value of it?",
        "query": "SELECT max(age) FROM manager",
        "schema": "CREATE TABLE manager (Name TEXT, Manager_ID NUMBER, Age NUMBER); CREATE TABLE railway (Railway_ID NUMBER); CREATE TABLE railway_manage (Manager_ID NUMBER, Railway_ID NUMBER);"
      },
      {
        "question": "How about the average?",
        "query": "SELECT avg(age) FROM manager",
        "schema": "CREATE TABLE railway_manage (Manager_ID NUMBER, Railway_ID NUMBER); CREATE TABLE manager (Age NUMBER, Name TEXT, Manager_ID NUMBER); CREATE TABLE railway (Railway_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show the names and levels of all managers.",
        "query": "SELECT name, LEVEL FROM manager",
        "schema": "CREATE TABLE railway (Railway_ID NUMBER); CREATE TABLE manager (Level NUMBER, Name TEXT, Manager_ID NUMBER);"
      },
      {
        "question": "Only keep the name whose level is at least 7",
        "query": "SELECT name FROM manager WHERE LEVEL >= 7",
        "schema": "CREATE TABLE manager (Name TEXT, Manager_ID NUMBER, Level NUMBER); CREATE TABLE railway (Railway_ID NUMBER);"
      },
      {
        "question": "Order all the names in ascending order of level.",
        "query": "SELECT name FROM manager ORDER BY LEVEL ASC",
        "schema": "CREATE TABLE manager (Name TEXT, Manager_ID NUMBER, Level NUMBER); CREATE TABLE railway (Railway_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show the names of the trains.",
        "query": "SELECT name FROM train",
        "schema": "CREATE TABLE railway (Railway_ID NUMBER, Railway TEXT); CREATE TABLE train (Name TEXT, Train_Num TEXT, Train_ID NUMBER, Railway_ID NUMBER);"
      },
      {
        "question": "Add the arrival time for each of them.",
        "query": "SELECT name , arrival FROM train",
        "schema": "CREATE TABLE train (Railway_ID NUMBER, Train_Num TEXT, Train_ID NUMBER, From TEXT, Arrival TEXT, Name TEXT); CREATE TABLE railway (Railway TEXT, Railway_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show the names and ages of all managers.",
        "query": "SELECT name, age FROM manager",
        "schema": "CREATE TABLE manager (Manager_ID NUMBER, Age NUMBER, Name TEXT); CREATE TABLE railway_manage (Railway_ID NUMBER, Manager_ID NUMBER); CREATE TABLE railway (Railway_ID NUMBER);"
      },
      {
        "question": "Only keep the ones whose level is at least 5.",
        "query": "SELECT name FROM manager WHERE LEVEL >= 5",
        "schema": "CREATE TABLE railway_manage (Railway_ID NUMBER, Manager_ID NUMBER); CREATE TABLE railway (Railway_ID NUMBER); CREATE TABLE manager (Name TEXT, Manager_ID NUMBER, Level NUMBER, Age NUMBER);"
      },
      {
        "question": "Order all the names in descending order of the age.",
        "query": "SELECT name FROM manager ORDER BY age DESC",
        "schema": "CREATE TABLE manager (Level NUMBER, Name TEXT, Age NUMBER, Manager_ID NUMBER); CREATE TABLE railway_manage (Manager_ID NUMBER, Railway_ID NUMBER); CREATE TABLE railway (Railway_ID NUMBER);"
      },
      {
        "question": "Who is the oldest manager?",
        "query": "SELECT name FROM manager ORDER BY age DESC LIMIT 1",
        "schema": "CREATE TABLE railway_manage (Manager_ID NUMBER, Railway_ID NUMBER); CREATE TABLE manager (Age NUMBER, Level NUMBER, Name TEXT, Manager_ID NUMBER); CREATE TABLE railway (Railway_ID NUMBER);"
      }
    ],
    [
      {
        "question": "List the names of the trains.",
        "query": "SELECT name FROM train",
        "schema": "CREATE TABLE train (Train_ID NUMBER, Train_Num TEXT, Name TEXT, Railway_ID NUMBER); CREATE TABLE railway (Railway TEXT, Railway_ID NUMBER);"
      },
      {
        "question": "Add the locations to each.",
        "query": "SELECT t2.name , t1.location FROM railway AS t1 JOIN train AS t2 ON t1.railway_id = t2.railway_id",
        "schema": "CREATE TABLE railway (Location TEXT, Railway_ID NUMBER, Railway TEXT); CREATE TABLE train (Train_Num TEXT, From TEXT, Train_ID NUMBER, Name TEXT, Railway_ID NUMBER);"
      }
    ],
    [
      {
        "question": "List the train information with the name \"Andaman Exp\".",
        "query": "SELECT * FROM train WHERE name = \"Andaman Exp\"",
        "schema": "CREATE TABLE railway (Railway_ID NUMBER, Railway TEXT); CREATE TABLE train (Train_Num TEXT, Railway_ID NUMBER, Name TEXT, Train_ID NUMBER); CREATE TABLE manager (Country TEXT);"
      },
      {
        "question": "Which railway is it? Show the railway name.",
        "query": "SELECT t1.railway FROM railway AS t1 JOIN train AS t2 ON t1.railway_id = t2.railway_id WHERE t2.name = \"Andaman Exp\"",
        "schema": "CREATE TABLE train (Train_ID NUMBER, From TEXT, Railway_ID NUMBER, Name TEXT, Train_Num TEXT); CREATE TABLE manager (Country TEXT); CREATE TABLE railway (Railway TEXT, Railway_ID NUMBER);"
      },
      {
        "question": "And which builder is it?",
        "query": "SELECT t1.builder FROM railway AS t1 JOIN train AS t2 ON t1.railway_id = t2.railway_id WHERE t2.name = \"Andaman Exp\"",
        "schema": "CREATE TABLE train (Name TEXT, Train_Num TEXT, Train_ID NUMBER, Railway_ID NUMBER, From TEXT); CREATE TABLE manager (Country TEXT); CREATE TABLE railway (Railway TEXT, Built TEXT, Builder TEXT, Railway_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show the builders of the railways.",
        "query": "SELECT builder FROM railway",
        "schema": "CREATE TABLE railway (Built TEXT, Railway_ID NUMBER, Builder TEXT, Railway TEXT); CREATE TABLE train (Railway_ID NUMBER);"
      },
      {
        "question": "List the railway id and the location of each railway.",
        "query": "SELECT t2.railway_id , t1.location FROM railway AS t1 JOIN train AS t2 ON t1.railway_id = t2.railway_id",
        "schema": "CREATE TABLE train (Railway_ID NUMBER); CREATE TABLE railway (ObjectNumber TEXT, Railway TEXT, Location TEXT, Builder TEXT, Railway_ID NUMBER, Built TEXT);"
      },
      {
        "question": "Only keep the ones that are associated with more than one train.",
        "query": "SELECT t2.railway_id , t1.location FROM railway AS t1 JOIN train AS t2 ON t1.railway_id = t2.railway_id GROUP BY t2.railway_id HAVING count(*) > 1",
        "schema": "CREATE TABLE railway (ObjectNumber TEXT, Railway_ID NUMBER, Builder TEXT, Location TEXT, Built TEXT, Railway TEXT); CREATE TABLE train (Train_ID NUMBER, Railway_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show the builders of the railways.",
        "query": "SELECT builder FROM railway",
        "schema": "CREATE TABLE railway (Builder TEXT, Railway_ID NUMBER, Built TEXT, Railway TEXT); CREATE TABLE train (Railway_ID NUMBER);"
      },
      {
        "question": "List the railway id and the builder for each one.",
        "query": "SELECT t2.railway_id , t1.builder FROM railway AS t1 JOIN train AS t2 ON t1.railway_id = t2.railway_id",
        "schema": "CREATE TABLE railway_manage (Railway_ID NUMBER); CREATE TABLE train (Railway_ID NUMBER); CREATE TABLE railway (Builder TEXT, Railway_ID NUMBER, Built TEXT, Railway TEXT);"
      },
      {
        "question": "Among those results, keep the one that associated with the most trains.",
        "query": "SELECT t2.railway_id , t1.builder FROM railway AS t1 JOIN train AS t2 ON t1.railway_id = t2.railway_id GROUP BY t2.railway_id ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE train (Train_ID NUMBER, Railway_ID NUMBER, From TEXT); CREATE TABLE railway_manage (Railway_ID NUMBER); CREATE TABLE railway (Builder TEXT, Railway TEXT, Built TEXT, Railway_ID NUMBER);"
      }
    ],
    [
      {
        "question": "List all the builders about the railways.",
        "query": "SELECT builder FROM railway",
        "schema": "CREATE TABLE train (Railway_ID NUMBER); CREATE TABLE railway (Built TEXT, Railway_ID NUMBER, Railway TEXT, ObjectNumber TEXT, Builder TEXT);"
      },
      {
        "question": "Show each one and the corresponding counts of railways.",
        "query": "SELECT builder, count(*) FROM railway GROUP BY LOCATION",
        "schema": "CREATE TABLE train (Railway_ID NUMBER); CREATE TABLE railway (ObjectNumber TEXT, Built TEXT, Location TEXT, Railway TEXT, Railway_ID NUMBER, Builder TEXT);"
      }
    ],
    [
      {
        "question": "List all the builders.",
        "query": "SELECT builder FROM railway",
        "schema": "CREATE TABLE railway (Builder TEXT, Built TEXT);"
      },
      {
        "question": "Show the builders and the corresponding counts of each.",
        "query": "SELECT builder, count(*) FROM railway GROUP BY LOCATION",
        "schema": "CREATE TABLE railway (Location TEXT, Builder TEXT, Built TEXT);"
      },
      {
        "question": "Which one is the most popular one?",
        "query": "SELECT builder FROM railway GROUP BY builder ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE railway (Builder TEXT, Location TEXT, Built TEXT);"
      }
    ],
    [
      {
        "question": "List all the locations.",
        "query": "SELECT LOCATION FROM railway",
        "schema": "CREATE TABLE railway (Location TEXT);"
      },
      {
        "question": "Which ones have more than one railways?",
        "query": "SELECT LOCATION FROM railway GROUP BY LOCATION HAVING count(*) > 1",
        "schema": "CREATE TABLE railway (Location TEXT, Railway TEXT, Railway_ID NUMBER, ObjectNumber TEXT);"
      },
      {
        "question": "Show the locations and the corresponding counts of each.",
        "query": "SELECT LOCATION, count(*) FROM railway GROUP BY LOCATION",
        "schema": "CREATE TABLE railway (Railway TEXT, Location TEXT, ObjectNumber TEXT, Railway_ID NUMBER);"
      }
    ],
    [
      {
        "question": "List all the locations.",
        "query": "SELECT LOCATION FROM railway",
        "schema": "CREATE TABLE railway (Location TEXT);"
      },
      {
        "question": "What are the corresponding counts of railways?",
        "query": "SELECT LOCATION, count(*) FROM railway GROUP BY LOCATION",
        "schema": "CREATE TABLE train (Railway_ID NUMBER); CREATE TABLE railway (ObjectNumber TEXT, Railway_ID NUMBER, Location TEXT, Railway TEXT);"
      },
      {
        "question": "Which locations have more than one railways?",
        "query": "SELECT LOCATION FROM railway GROUP BY LOCATION HAVING count(*) > 1",
        "schema": "CREATE TABLE train (Railway_ID NUMBER); CREATE TABLE railway (Railway TEXT, ObjectNumber TEXT, Railway_ID NUMBER, Location TEXT);"
      }
    ],
    [
      {
        "question": "Show all the information about each railway.",
        "query": "SELECT * FROM railway",
        "schema": "CREATE TABLE railway_manage (Railway_ID NUMBER); CREATE TABLE railway (Railway TEXT, Railway_ID NUMBER, ObjectNumber TEXT); CREATE TABLE train (Train_ID NUMBER, Name TEXT, Railway_ID NUMBER, Train_Num TEXT);"
      },
      {
        "question": "What are the object numbers?",
        "query": "SELECT objectnumber FROM railway",
        "schema": "CREATE TABLE railway (Railway_ID NUMBER, Railway TEXT, ObjectNumber TEXT); CREATE TABLE train (Name TEXT, Train_Num TEXT, Train_ID NUMBER, Railway_ID NUMBER); CREATE TABLE railway_manage (Railway_ID NUMBER);"
      },
      {
        "question": "Which of the railway has no trains, keep the object number.",
        "query": "SELECT objectnumber FROM railway WHERE railway_id NOT IN (SELECT railway_id FROM train)",
        "schema": "CREATE TABLE railway (Railway_ID NUMBER, ObjectNumber TEXT, Railway TEXT); CREATE TABLE train (Train_Num TEXT, Railway_ID NUMBER, Name TEXT, Train_ID NUMBER); CREATE TABLE railway_manage (Railway_ID NUMBER);"
      }
    ],
    [
      {
        "question": "List all the countries of the managers.",
        "query": "SELECT country FROM manager",
        "schema": "CREATE TABLE manager (Manager_ID NUMBER, Name TEXT, Country TEXT); CREATE TABLE railway_manage (Manager_ID NUMBER);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT COUNT (DISTINCT country) FROM manager",
        "schema": "CREATE TABLE manager (Name TEXT, Manager_ID NUMBER, Country TEXT); CREATE TABLE railway_manage (Manager_ID NUMBER);"
      },
      {
        "question": "Keep the ones where the manager age is in the range of 50 and 46",
        "query": "SELECT country FROM manager WHERE age < 50 INTERSECT SELECT country FROM manager WHERE age > 46",
        "schema": "CREATE TABLE manager (Manager_ID NUMBER, Country TEXT, Name TEXT, Age NUMBER); CREATE TABLE railway_manage (Manager_ID NUMBER);"
      },
      {
        "question": "What about the other countries?",
        "query": "SELECT country FROM manager WHERE age > 50 INTERSECT SELECT country FROM manager WHERE age < 46",
        "schema": "CREATE TABLE manager (Name TEXT, Country TEXT, Manager_ID NUMBER, Age NUMBER); CREATE TABLE railway_manage (Manager_ID NUMBER);"
      }
    ],
    [
      {
        "question": "List all the countries of the managers.",
        "query": "SELECT country FROM manager",
        "schema": "CREATE TABLE railway_manage (Manager_ID NUMBER); CREATE TABLE manager (Country TEXT, Manager_ID NUMBER, Name TEXT);"
      },
      {
        "question": "How many unique ones are there?",
        "query": "SELECT COUNT (DISTINCT country) FROM manager",
        "schema": "CREATE TABLE railway_manage (Manager_ID NUMBER); CREATE TABLE manager (Name TEXT, Country TEXT, Manager_ID NUMBER);"
      }
    ],
    [
      {
        "question": "List the manager names and the working years.",
        "query": "SELECT name, working_year_starts FROM manager",
        "schema": "CREATE TABLE manager (Working_year_starts TEXT, Manager_ID NUMBER, Age NUMBER, Name TEXT); CREATE TABLE railway (Railway_ID NUMBER); CREATE TABLE railway_manage (From_Year TEXT, Manager_ID NUMBER);"
      },
      {
        "question": "Which is the maximum working years?",
        "query": "SELECT max(working_year_starts) FROM manager",
        "schema": "CREATE TABLE railway_manage (Manager_ID NUMBER, From_Year TEXT); CREATE TABLE railway (Railway_ID NUMBER); CREATE TABLE manager (Age NUMBER, Name TEXT, Manager_ID NUMBER, Working_year_starts TEXT);"
      },
      {
        "question": "Order the working years by the manager level.",
        "query": "SELECT working_year_starts FROM manager ORDER BY LEVEL DESC",
        "schema": "CREATE TABLE railway (Railway_ID NUMBER); CREATE TABLE railway_manage (Manager_ID NUMBER, From_Year TEXT); CREATE TABLE manager (Name TEXT, Level NUMBER, Working_year_starts TEXT, Manager_ID NUMBER, Age NUMBER);"
      }
    ]
  ],
  "climbing": [
    [
      {
        "question": "List all the climber information.",
        "query": "SELECT * FROM climber",
        "schema": "CREATE TABLE climber (Climber_ID NUMBER, Points NUMBER, Name TEXT);"
      },
      {
        "question": "How many records are there?",
        "query": "SELECT count(*) FROM climber",
        "schema": "CREATE TABLE climber (Points NUMBER, Name TEXT, Climber_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What are the names of the climbers?",
        "query": "SELECT name FROM climber",
        "schema": "CREATE TABLE climber (Name TEXT, Climber_ID NUMBER);"
      },
      {
        "question": "Keep the ones whose point is at least 6?",
        "query": "SELECT name FROM climber WHERE points >= 6",
        "schema": "CREATE TABLE climber (Name TEXT, Climber_ID NUMBER, Points NUMBER);"
      },
      {
        "question": "Order all the climber names in descending order of points.",
        "query": "SELECT name FROM climber ORDER BY points DESC",
        "schema": "CREATE TABLE climber (Name TEXT, Climber_ID NUMBER, Points NUMBER);"
      }
    ],
    [
      {
        "question": "What are the names of the climbers?",
        "query": "SELECT name FROM climber",
        "schema": "CREATE TABLE climber (Climber_ID NUMBER, Name TEXT);"
      },
      {
        "question": "Keep the ones whose point is at least 4.6?",
        "query": "SELECT name FROM climber WHERE points >= 4.6",
        "schema": "CREATE TABLE climber (Name TEXT, Points NUMBER, Climber_ID NUMBER);"
      },
      {
        "question": "Keep the ones whose country is \"West Germany\".",
        "query": "SELECT name FROM climber WHERE country = \"West Germany\"",
        "schema": "CREATE TABLE mountain (Country TEXT); CREATE TABLE climber (Climber_ID NUMBER, Name TEXT, Points NUMBER, Country TEXT);"
      },
      {
        "question": "What about the ones whose country is not \"Switzerland\"?",
        "query": "SELECT name FROM climber WHERE country != \"Switzerland\"",
        "schema": "CREATE TABLE climber (Climber_ID NUMBER, Name TEXT, Points NUMBER, Country TEXT); CREATE TABLE mountain (Country TEXT);"
      }
    ],
    [
      {
        "question": "Which climber comes from Switzerland?",
        "query": "SELECT name FROM climber WHERE country = \"Switzerland\"",
        "schema": "CREATE TABLE climber (Name TEXT, Climber_ID NUMBER, Country TEXT); CREATE TABLE mountain (Country TEXT, Mountain_ID NUMBER);"
      },
      {
        "question": "What about United Kingdom?",
        "query": "SELECT name FROM climber WHERE country != \"United Kingdom\"",
        "schema": "CREATE TABLE climber (Name TEXT, Climber_ID NUMBER, Country TEXT); CREATE TABLE mountain (Mountain_ID NUMBER, Country TEXT);"
      },
      {
        "question": "List all the points of those climber.",
        "query": "SELECT points FROM climber WHERE country != \"United Kingdom\"",
        "schema": "CREATE TABLE climber (Points NUMBER, Climber_ID NUMBER, Country TEXT, Name TEXT); CREATE TABLE mountain (Mountain_ID NUMBER, Country TEXT);"
      },
      {
        "question": "What is the maximum point number?",
        "query": "SELECT max(points) FROM climber WHERE country = \"United Kingdom\"",
        "schema": "CREATE TABLE climber (Name TEXT, Climber_ID NUMBER, Points NUMBER, Country TEXT); CREATE TABLE mountain (Country TEXT, Mountain_ID NUMBER);"
      }
    ],
    [
      {
        "question": "List all the countries of the climbers.",
        "query": "SELECT country FROM climber",
        "schema": "CREATE TABLE climber (Name TEXT, Country TEXT, Climber_ID NUMBER); CREATE TABLE mountain (Country TEXT);"
      },
      {
        "question": "How many unique countries are there?",
        "query": "SELECT count(DISTINCT country) FROM climber",
        "schema": "CREATE TABLE climber (Name TEXT, Climber_ID NUMBER, Country TEXT); CREATE TABLE mountain (Country TEXT);"
      }
    ],
    [
      {
        "question": "Show all the information about the mountains.",
        "query": "SELECT * FROM mountain",
        "schema": "CREATE TABLE climber (Mountain_ID NUMBER); CREATE TABLE mountain (Mountain_ID NUMBER, Name TEXT);"
      },
      {
        "question": "List those results in ascending alphabetical order by the mountain names.",
        "query": "SELECT * FROM mountain ORDER BY name ASC",
        "schema": "CREATE TABLE mountain (Name TEXT, Mountain_ID NUMBER); CREATE TABLE climber (Mountain_ID NUMBER);"
      },
      {
        "question": "What are the mountain names from those results?",
        "query": "SELECT name FROM mountain ORDER BY name ASC",
        "schema": "CREATE TABLE mountain (Mountain_ID NUMBER, Name TEXT); CREATE TABLE climber (Mountain_ID NUMBER);"
      }
    ],
    [
      {
        "question": "List all the countries of the mountains.",
        "query": "SELECT country FROM mountain",
        "schema": "CREATE TABLE climber (Country TEXT); CREATE TABLE mountain (Country TEXT, Mountain_ID NUMBER, Name TEXT);"
      },
      {
        "question": "Keep the ones that the mountain height is more than 4985.0.",
        "query": "SELECT country FROM mountain WHERE height > 4985.0",
        "schema": "CREATE TABLE mountain (Country TEXT, Name TEXT, Mountain_ID NUMBER, Prominence NUMBER, Height NUMBER); CREATE TABLE climber (Country TEXT);"
      },
      {
        "question": "What about the height is more than 5000?",
        "query": "SELECT country FROM mountain WHERE height > 5000",
        "schema": "CREATE TABLE mountain (Name TEXT, Height NUMBER, Mountain_ID NUMBER, Prominence NUMBER, Country TEXT); CREATE TABLE climber (Country TEXT);"
      }
    ],
    [
      {
        "question": "List all the names of the mountains.",
        "query": "SELECT name FROM mountain",
        "schema": "CREATE TABLE mountain (Height NUMBER, Name TEXT, Mountain_ID NUMBER); CREATE TABLE climber (Name TEXT, Mountain_ID NUMBER);"
      },
      {
        "question": "Keep the ones that the mountain Prominence is more than 900.0.",
        "query": "SELECT name FROM mountain WHERE prominence > 900.0",
        "schema": "CREATE TABLE mountain (Mountain_ID NUMBER, Height NUMBER, Name TEXT, Prominence NUMBER); CREATE TABLE climber (Mountain_ID NUMBER, Name TEXT);"
      },
      {
        "question": "So which mountain is the highest one?",
        "query": "SELECT name FROM mountain ORDER BY height DESC LIMIT 1",
        "schema": "CREATE TABLE mountain (Height NUMBER, Mountain_ID NUMBER, Name TEXT, Prominence NUMBER); CREATE TABLE climber (Name TEXT, Mountain_ID NUMBER);"
      }
    ],
    [
      {
        "question": "List all the ranges of the mountains.",
        "query": "SELECT RANGE FROM mountain",
        "schema": "CREATE TABLE mountain (Name TEXT, Range TEXT, Mountain_ID NUMBER);"
      },
      {
        "question": "Order those results by Prominence in descending order.",
        "query": "SELECT DISTINCT RANGE FROM mountain ORDER BY prominence DESC",
        "schema": "CREATE TABLE mountain (Name TEXT, Mountain_ID NUMBER, Prominence NUMBER, Height NUMBER, Range TEXT);"
      },
      {
        "question": "Which one is the top one?",
        "query": "SELECT DISTINCT RANGE FROM mountain ORDER BY prominence DESC LIMIT 1",
        "schema": "CREATE TABLE mountain (Prominence NUMBER, Range TEXT, Mountain_ID NUMBER, Height NUMBER, Name TEXT);"
      },
      {
        "question": "What about top 3?",
        "query": "SELECT DISTINCT RANGE FROM mountain ORDER BY prominence DESC LIMIT 3",
        "schema": "CREATE TABLE mountain (Prominence NUMBER, Mountain_ID NUMBER, Height NUMBER, Name TEXT, Range TEXT);"
      }
    ],
    [
      {
        "question": "List all the climber names",
        "query": "SELECT name FROM climber mountain",
        "schema": "CREATE TABLE climber (Climber_ID NUMBER, Name TEXT);"
      },
      {
        "question": "Show the mountain names for those climbers.",
        "query": "SELECT t1.name , t2.name FROM climber AS t1 JOIN mountain AS t2 ON t1.mountain_id = t2.mountain_id",
        "schema": "CREATE TABLE mountain (Name TEXT, Mountain_ID NUMBER); CREATE TABLE climber (Mountain_ID NUMBER, Climber_ID NUMBER, Name TEXT);"
      }
    ],
    [
      {
        "question": "Show all the climber names",
        "query": "SELECT name FROM climber mountain",
        "schema": "CREATE TABLE climber (Name TEXT, Climber_ID NUMBER);"
      },
      {
        "question": "Also show the mountain height for those climbers.",
        "query": "SELECT t1.name , t2.height FROM climber AS t1 JOIN mountain AS t2 ON t1.mountain_id = t2.mountain_id",
        "schema": "CREATE TABLE mountain (Name TEXT, Prominence NUMBER, Height NUMBER, Mountain_ID NUMBER); CREATE TABLE climber (Name TEXT, Mountain_ID NUMBER, Climber_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Which climbers have the point to be 8.0",
        "query": "SELECT name FROM climber WHERE points = 8.0",
        "schema": "CREATE TABLE mountain (Mountain_ID NUMBER); CREATE TABLE climber (Name TEXT, Climber_ID NUMBER, Points NUMBER);"
      },
      {
        "question": "Which one has the minimum point?",
        "query": "SELECT name FROM climber ORDER BY points ASC LIMIT 1",
        "schema": "CREATE TABLE mountain (Mountain_ID NUMBER); CREATE TABLE climber (Points NUMBER, Name TEXT, Climber_ID NUMBER);"
      },
      {
        "question": "What about the maximum?",
        "query": "SELECT name FROM climber ORDER BY points DESC LIMIT 1",
        "schema": "CREATE TABLE mountain (Prominence NUMBER, Mountain_ID NUMBER); CREATE TABLE climber (Name TEXT, Points NUMBER, Climber_ID NUMBER);"
      },
      {
        "question": "Show the mountain height of the mountain that climber has climbed.",
        "query": "SELECT t2.height FROM climber AS t1 JOIN mountain AS t2 ON t1.mountain_id = t2.mountain_id ORDER BY t1.points DESC LIMIT 1",
        "schema": "CREATE TABLE climber (Mountain_ID NUMBER, Points NUMBER, Climber_ID NUMBER, Name TEXT); CREATE TABLE mountain (Prominence NUMBER, Range TEXT, Height NUMBER, Name TEXT, Mountain_ID NUMBER);"
      }
    ],
    [
      {
        "question": "List all the climber names who come from \"United Kingdom\".",
        "query": "SELECT name FROM climber WHERE country = \"United Kingdom\"",
        "schema": "CREATE TABLE mountain (Country TEXT); CREATE TABLE climber (Country TEXT, Name TEXT, Climber_ID NUMBER);"
      },
      {
        "question": "What about from \"West Germany\"",
        "query": "SELECT name FROM climber WHERE country = \"West Germany\"",
        "schema": "CREATE TABLE climber (Country TEXT, Climber_ID NUMBER, Name TEXT); CREATE TABLE mountain (Country TEXT);"
      },
      {
        "question": "Show the mountains they have climbed.",
        "query": "SELECT DISTINCT t2.name FROM climber AS t1 JOIN mountain AS t2 ON t1.mountain_id = t2.mountain_id WHERE t1.country = \"West Germany\"",
        "schema": "CREATE TABLE climber (Climber_ID NUMBER, Name TEXT, Country TEXT, Mountain_ID NUMBER); CREATE TABLE mountain (Height NUMBER, Range TEXT, Country TEXT, Mountain_ID NUMBER, Name TEXT);"
      }
    ],
    [
      {
        "question": "How many countries are there?",
        "query": "SELECT count(*) FROM mountain",
        "schema": "CREATE TABLE mountain (Mountain_ID NUMBER, Country TEXT); CREATE TABLE climber (Country TEXT, Mountain_ID NUMBER);"
      },
      {
        "question": "How many mountains are there in Tanzania?",
        "query": "SELECT count(*) FROM mountain WHERE country = 'Tanzania'",
        "schema": "CREATE TABLE mountain (Country TEXT, Mountain_ID NUMBER, Range TEXT, Name TEXT); CREATE TABLE climber (Mountain_ID NUMBER, Country TEXT);"
      },
      {
        "question": "What about in Uganda?",
        "query": "SELECT count(*) FROM mountain WHERE country = 'Uganda'",
        "schema": "CREATE TABLE mountain (Country TEXT, Mountain_ID NUMBER, Range TEXT, Name TEXT); CREATE TABLE climber (Mountain_ID NUMBER, Country TEXT);"
      },
      {
        "question": "List the times used by the climbers for those mountains.",
        "query": "SELECT t1.time FROM climber AS t1 JOIN mountain AS t2 ON t1.mountain_id = t2.mountain_id WHERE t2.country = \"Uganda\"",
        "schema": "CREATE TABLE climber (Time TEXT, Country TEXT, Climber_ID NUMBER, Mountain_ID NUMBER); CREATE TABLE mountain (Name TEXT, Range TEXT, Country TEXT, Mountain_ID NUMBER);"
      }
    ],
    [
      {
        "question": "How many unique countries in total?",
        "query": "SELECT count( DISTINCT country) FROM mountain",
        "schema": "CREATE TABLE climber (Country TEXT); CREATE TABLE mountain (Country TEXT, Mountain_ID NUMBER);"
      },
      {
        "question": "Show the countries with the number of mountains for each of them.",
        "query": "SELECT country, count(*) FROM mountain GROUP BY country",
        "schema": "CREATE TABLE climber (Country TEXT); CREATE TABLE mountain (Country TEXT, Mountain_ID NUMBER);"
      }
    ],
    [
      {
        "question": "How many countries in total?",
        "query": "SELECT count( DISTINCT country) FROM mountain",
        "schema": "CREATE TABLE mountain (Mountain_ID NUMBER, Country TEXT); CREATE TABLE climber (Country TEXT);"
      },
      {
        "question": "List the countries with the number of mountains for each.",
        "query": "SELECT country, count(*) FROM mountain GROUP BY country",
        "schema": "CREATE TABLE climber (Country TEXT); CREATE TABLE mountain (Country TEXT, Mountain_ID NUMBER);"
      },
      {
        "question": "Keep the country names that have only one mountain.",
        "query": "SELECT country FROM mountain GROUP BY country HAVING count(*) = 1",
        "schema": "CREATE TABLE climber (Country TEXT); CREATE TABLE mountain (Mountain_ID NUMBER, Country TEXT, Name TEXT);"
      },
      {
        "question": "How about more than one mountain?",
        "query": "SELECT country FROM mountain GROUP BY country HAVING count(*) > 1",
        "schema": "CREATE TABLE climber (Country TEXT); CREATE TABLE mountain (Country TEXT, Mountain_ID NUMBER, Name TEXT);"
      }
    ],
    [
      {
        "question": "List the names of all the mountains",
        "query": "SELECT name FROM mountain",
        "schema": "CREATE TABLE climber (Mountain_ID NUMBER, Name TEXT); CREATE TABLE mountain (Mountain_ID NUMBER, Name TEXT);"
      },
      {
        "question": "Which of those has no climbers?",
        "query": "SELECT name FROM mountain WHERE mountain_id NOT IN (SELECT mountain_id FROM climber)",
        "schema": "CREATE TABLE mountain (Name TEXT, Mountain_ID NUMBER); CREATE TABLE climber (Name TEXT, Mountain_ID NUMBER);"
      }
    ],
    [
      {
        "question": "List all the countries of the mountains.",
        "query": "SELECT country FROM mountain",
        "schema": "CREATE TABLE mountain (Range TEXT, Mountain_ID NUMBER, Name TEXT, Country TEXT); CREATE TABLE climber (Country TEXT);"
      },
      {
        "question": "Keep the ones that the mountain height is more than 4985.0.",
        "query": "SELECT country FROM mountain WHERE height > 4985.0",
        "schema": "CREATE TABLE mountain (Mountain_ID NUMBER, Country TEXT, Name TEXT, Height NUMBER, Range TEXT, Prominence NUMBER); CREATE TABLE climber (Mountain_ID NUMBER, Country TEXT);"
      },
      {
        "question": "What about the height is more than 5600?",
        "query": "SELECT country FROM mountain WHERE height > 5600",
        "schema": "CREATE TABLE climber (Country TEXT, Mountain_ID NUMBER); CREATE TABLE mountain (Mountain_ID NUMBER, Country TEXT, Prominence NUMBER, Name TEXT, Height NUMBER, Range TEXT);"
      },
      {
        "question": "Keep the country names where the mountain height is within the range of 5200 to 5600.",
        "query": "SELECT country FROM mountain WHERE height > 5600 INTERSECT SELECT country FROM mountain WHERE height < 5200",
        "schema": "CREATE TABLE mountain (Prominence NUMBER, Mountain_ID NUMBER, Country TEXT, Range TEXT, Height NUMBER, Name TEXT); CREATE TABLE climber (Country TEXT, Mountain_ID NUMBER);"
      }
    ],
    [
      {
        "question": "List all the ranges of mountains.",
        "query": "SELECT RANGE FROM mountain",
        "schema": "CREATE TABLE mountain (Range TEXT, Mountain_ID NUMBER, Name TEXT);"
      },
      {
        "question": "How many unique ranges are there?",
        "query": "SELECT count(DISTINCT RANGE) FROM mountain",
        "schema": "CREATE TABLE mountain (Range TEXT, Name TEXT, Mountain_ID NUMBER);"
      },
      {
        "question": "How many mountains in each range?",
        "query": "SELECT RANGE, COUNT (*) FROM mountain GROUP BY RANGE",
        "schema": "CREATE TABLE mountain (Mountain_ID NUMBER, Name TEXT, Range TEXT);"
      },
      {
        "question": "Which one has the largest number of mountains?",
        "query": "SELECT RANGE FROM mountain GROUP BY RANGE ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE mountain (Range TEXT, Mountain_ID NUMBER, Name TEXT);"
      }
    ]
  ],
  "device": [
    [
      {
        "question": "List all the devices",
        "query": "SELECT * FROM device",
        "schema": "CREATE TABLE stock (Device_ID NUMBER); CREATE TABLE device (Device TEXT, Device_ID NUMBER, Package_Version TEXT);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT count(*) FROM device",
        "schema": "CREATE TABLE device (Device TEXT, Device_ID NUMBER, Package_Version TEXT); CREATE TABLE stock (Device_ID NUMBER);"
      }
    ],
    [
      {
        "question": "List all the carrier names of each device",
        "query": "SELECT carrier FROM device",
        "schema": "CREATE TABLE device (Carrier TEXT, Device TEXT, Device_ID NUMBER);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT COUNT (DISTINCT carrier) FROM device",
        "schema": "CREATE TABLE device (Device TEXT, Carrier TEXT, Device_ID NUMBER);"
      },
      {
        "question": "Order the carrier names in ascending order.",
        "query": "SELECT carrier FROM device ORDER BY carrier ASC",
        "schema": "CREATE TABLE device (Carrier TEXT, Device_ID NUMBER, Device TEXT);"
      }
    ],
    [
      {
        "question": "List the carrier name and software platform of each device",
        "query": "SELECT carrier, software_platform FROM device",
        "schema": "CREATE TABLE device (Software_Platform TEXT, Carrier TEXT, Device TEXT);"
      },
      {
        "question": "How many of them use Android as software platform?",
        "query": "SELECT count(*) FROM device WHERE software_platform = 'Android'",
        "schema": "CREATE TABLE device (Software_Platform TEXT, Device TEXT, Carrier TEXT);"
      },
      {
        "question": "What about not Android?",
        "query": "SELECT count(*) FROM device WHERE software_platform != 'Android'",
        "schema": "CREATE TABLE device (Device TEXT, Carrier TEXT, Device_ID NUMBER, Software_Platform TEXT);"
      },
      {
        "question": "What are the carrier names of them?",
        "query": "SELECT carrier FROM device WHERE software_platform != 'Android'",
        "schema": "CREATE TABLE device (Software_Platform TEXT, Device TEXT, Carrier TEXT, Device_ID NUMBER);"
      }
    ],
    [
      {
        "question": "List the shop names and their open year.",
        "query": "SELECT shop_name, open_year FROM shop",
        "schema": "CREATE TABLE shop (Shop_ID NUMBER, Open_Date TEXT, Shop_Name TEXT, Open_Year NUMBER);"
      },
      {
        "question": "Keep the shop names, then show those names in ascending order of open year.",
        "query": "SELECT shop_name FROM shop ORDER BY open_year ASC",
        "schema": "CREATE TABLE shop (Open_Year NUMBER, Open_Date TEXT, Shop_ID NUMBER, Shop_Name TEXT);"
      }
    ],
    [
      {
        "question": "What is the minimum quantity of stocks?",
        "query": "SELECT min(quantity) FROM stock",
        "schema": "CREATE TABLE stock (Quantity NUMBER, Shop_ID NUMBER, Device_ID NUMBER); CREATE TABLE shop (Shop_ID NUMBER);"
      },
      {
        "question": "What about the average value?",
        "query": "SELECT avg(quantity) FROM stock",
        "schema": "CREATE TABLE stock (Device_ID NUMBER, Shop_ID NUMBER, Quantity NUMBER); CREATE TABLE shop (Shop_ID NUMBER);"
      }
    ],
    [
      {
        "question": "List all the names of the shop and their locations",
        "query": "SELECT shop_name , LOCATION FROM shop",
        "schema": "CREATE TABLE shop (Shop_Name TEXT, Shop_ID NUMBER, Location TEXT);"
      },
      {
        "question": "Order those results in ascending alphabetical order of name.",
        "query": "SELECT shop_name , LOCATION FROM shop ORDER BY shop_name ASC",
        "schema": "CREATE TABLE shop (Location TEXT, Shop_ID NUMBER, Shop_Name TEXT);"
      }
    ],
    [
      {
        "question": "Show all in the information about devices.",
        "query": "SELECT * FROM device",
        "schema": "CREATE TABLE device (Applications TEXT, Package_Version TEXT, Device_ID NUMBER, Device TEXT);"
      },
      {
        "question": "What are the unique software platforms",
        "query": "SELECT DISTINCT software_platform FROM device",
        "schema": "CREATE TABLE device (Device TEXT, Applications TEXT, Software_Platform TEXT, Device_ID NUMBER, Package_Version TEXT);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT count(DISTINCT software_platform) FROM device",
        "schema": "CREATE TABLE device (Device TEXT, Package_Version TEXT, Device_ID NUMBER, Applications TEXT, Software_Platform TEXT);"
      }
    ],
    [
      {
        "question": "Show the information about the shops that are not \"Apple\".",
        "query": "SELECT * FROM shop WHERE shop_name != \"Apple\"",
        "schema": "CREATE TABLE stock (Shop_ID NUMBER); CREATE TABLE shop (Shop_Name TEXT, Shop_ID NUMBER); CREATE TABLE device (Device_ID NUMBER);"
      },
      {
        "question": "How about the shops are \"Apple\"?",
        "query": "SELECT * FROM shop WHERE shop_name = \"Apple\"",
        "schema": "CREATE TABLE stock (Shop_ID NUMBER); CREATE TABLE shop (Shop_ID NUMBER, Location TEXT, Shop_Name TEXT); CREATE TABLE device (Device_ID NUMBER);"
      },
      {
        "question": "What are the open dates and open years of them?",
        "query": "SELECT open_date , open_year FROM shop WHERE shop_name = \"Apple\"",
        "schema": "CREATE TABLE shop (Open_Year NUMBER, Shop_ID NUMBER, Shop_Name TEXT, Location TEXT, Open_Date TEXT); CREATE TABLE device (Device_ID NUMBER); CREATE TABLE stock (Shop_ID NUMBER);"
      }
    ],
    [
      {
        "question": "List the names and open year of all the shops.",
        "query": "SELECT shop_name, open_year FROM shop",
        "schema": "CREATE TABLE shop (Open_Date TEXT, Location TEXT, Open_Year NUMBER, Shop_Name TEXT, Shop_ID NUMBER);"
      },
      {
        "question": "Keep those opens later than 2010?",
        "query": "SELECT shop_name, open_year FROM shop WHERE open_year > 2010",
        "schema": "CREATE TABLE shop (Open_Date TEXT, Shop_ID NUMBER, Shop_Name TEXT, Location TEXT, Open_Year NUMBER);"
      },
      {
        "question": "Order all the shop names by the open year, from early to late.",
        "query": "SELECT shop_name, open_year FROM shop ORDER BY open_year",
        "schema": "CREATE TABLE shop (Open_Year NUMBER, Open_Date TEXT, Location TEXT, Shop_Name TEXT, Shop_ID NUMBER);"
      },
      {
        "question": "Show the name of the shop with the latest open year.",
        "query": "SELECT shop_name FROM shop ORDER BY open_year DESC LIMIT 1",
        "schema": "CREATE TABLE shop (Open_Date TEXT, Shop_Name TEXT, Shop_ID NUMBER, Location TEXT, Open_Year NUMBER);"
      }
    ],
    [
      {
        "question": "List the shop names.",
        "query": "SELECT shop_name FROM shop",
        "schema": "CREATE TABLE shop (Shop_Name TEXT, Shop_ID NUMBER);"
      },
      {
        "question": "Keep the names where there is a stock",
        "query": "SELECT t1.shop_name FROM shop AS t1 JOIN stock AS t2 ON t1.shop_id = t2.shop_id",
        "schema": "CREATE TABLE shop (Shop_ID NUMBER, Location TEXT, Shop_Name TEXT); CREATE TABLE stock (Shop_ID NUMBER, Quantity NUMBER);"
      },
      {
        "question": "Keep the names of shops and the carriers of devices where there is a stock.",
        "query": "SELECT t3.shop_name , t2.carrier FROM stock AS t1 JOIN device AS t2 ON t1.device_id = t2.device_id JOIN shop AS t3 ON t1.shop_id = t3.shop_id",
        "schema": "CREATE TABLE shop (Shop_ID NUMBER, Shop_Name TEXT, Location TEXT); CREATE TABLE stock (Quantity NUMBER, Shop_ID NUMBER, Device_ID NUMBER); CREATE TABLE device (Device_ID NUMBER, Device TEXT, Carrier TEXT);"
      }
    ],
    [
      {
        "question": "List all the shop names.",
        "query": "SELECT shop_name FROM shop",
        "schema": "CREATE TABLE shop (Shop_ID NUMBER, Shop_Name TEXT);"
      },
      {
        "question": "List all the shop names that has stock in the shops.",
        "query": "SELECT t2.shop_name FROM stock AS t1 JOIN shop AS t2 ON t1.shop_id = t2.shop_id GROUP BY t1.shop_id",
        "schema": "CREATE TABLE shop (Shop_ID NUMBER, Shop_Name TEXT); CREATE TABLE stock (Quantity NUMBER, Shop_ID NUMBER);"
      },
      {
        "question": "Among those, keep the shop names whose open year is later than 2010",
        "query": "SELECT t2.shop_name FROM stock AS t1 JOIN shop AS t2 ON t1.shop_id = t2.shop_id GROUP BY t1.shop_id HAVING t2.open_year > 2010",
        "schema": "CREATE TABLE stock (Shop_ID NUMBER, Quantity NUMBER); CREATE TABLE shop (Open_Year NUMBER, Open_Date TEXT, Shop_ID NUMBER, Shop_Name TEXT);"
      },
      {
        "question": "List the names of shops that have more than one kind of device in stock.",
        "query": "SELECT t2.shop_name FROM stock AS t1 JOIN shop AS t2 ON t1.shop_id = t2.shop_id GROUP BY t1.shop_id HAVING count(*) > 1",
        "schema": "CREATE TABLE stock (Shop_ID NUMBER, Quantity NUMBER); CREATE TABLE shop (Open_Date TEXT, Open_Year NUMBER, Shop_Name TEXT, Shop_ID NUMBER);"
      }
    ],
    [
      {
        "question": "List all the shop names.",
        "query": "SELECT shop_name FROM shop",
        "schema": "CREATE TABLE shop (Shop_Name TEXT, Shop_ID NUMBER);"
      },
      {
        "question": "Which shop has the least quantity of devices, show the shop name.",
        "query": "SELECT t2.shop_name FROM stock AS t1 JOIN shop AS t2 ON t1.shop_id = t2.shop_id GROUP BY t1.shop_id ORDER BY sum(t1.quantity) ASC LIMIT 1",
        "schema": "CREATE TABLE shop (Shop_ID NUMBER, Shop_Name TEXT); CREATE TABLE stock (Quantity NUMBER, Shop_ID NUMBER);"
      },
      {
        "question": "What about the shop that has the most kind of devices in stock?",
        "query": "SELECT t2.shop_name FROM stock AS t1 JOIN shop AS t2 ON t1.shop_id = t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE stock (Shop_ID NUMBER, Quantity NUMBER); CREATE TABLE shop (Shop_ID NUMBER, Shop_Name TEXT);"
      }
    ],
    [
      {
        "question": "List all the shop names.",
        "query": "SELECT shop_name FROM shop",
        "schema": "CREATE TABLE shop (Shop_Name TEXT, Shop_ID NUMBER);"
      },
      {
        "question": "Which shop has the least quantity of devices, show the shop name.",
        "query": "SELECT t2.shop_name FROM stock AS t1 JOIN shop AS t2 ON t1.shop_id = t2.shop_id GROUP BY t1.shop_id ORDER BY sum(t1.quantity) ASC LIMIT 1",
        "schema": "CREATE TABLE stock (Shop_ID NUMBER, Quantity NUMBER); CREATE TABLE shop (Shop_ID NUMBER, Shop_Name TEXT);"
      },
      {
        "question": "What about the largest quantity one?",
        "query": "SELECT t2.shop_name FROM stock AS t1 JOIN shop AS t2 ON t1.shop_id = t2.shop_id GROUP BY t1.shop_id ORDER BY sum(t1.quantity) DESC LIMIT 1",
        "schema": "CREATE TABLE stock (Quantity NUMBER, Shop_ID NUMBER); CREATE TABLE shop (Shop_ID NUMBER, Shop_Name TEXT);"
      }
    ],
    [
      {
        "question": "Show all the software platforms",
        "query": "SELECT software_platform FROM device",
        "schema": "CREATE TABLE device (Software_Platform TEXT);"
      },
      {
        "question": "How many for each?",
        "query": "SELECT software_platform, count(*) FROM device GROUP BY software_platform",
        "schema": "CREATE TABLE device (Device TEXT, Software_Platform TEXT, Device_ID NUMBER, Carrier TEXT);"
      }
    ],
    [
      {
        "question": "Show all the software platforms",
        "query": "SELECT software_platform FROM device",
        "schema": "CREATE TABLE device (Software_Platform TEXT);"
      },
      {
        "question": "How many device for each?",
        "query": "SELECT software_platform, count(*) FROM device GROUP BY software_platform",
        "schema": "CREATE TABLE device (Device TEXT, Software_Platform TEXT, Device_ID NUMBER);"
      },
      {
        "question": "Order the software platforms by popularity, from the most to the least?",
        "query": "SELECT software_platform FROM device GROUP BY software_platform ORDER BY count(*) DESC",
        "schema": "CREATE TABLE device (Device_ID NUMBER, Software_Platform TEXT, Device TEXT);"
      }
    ],
    [
      {
        "question": "Show all the software platforms",
        "query": "SELECT software_platform FROM device",
        "schema": "CREATE TABLE device (Software_Platform TEXT);"
      },
      {
        "question": "How many for each?",
        "query": "SELECT software_platform, count(*) FROM device GROUP BY software_platform",
        "schema": "CREATE TABLE device (Device TEXT, Carrier TEXT, Device_ID NUMBER, Software_Platform TEXT);"
      },
      {
        "question": "Which two are the most popular software platform?",
        "query": "SELECT software_platform FROM device GROUP BY software_platform ORDER BY count(*) DESC LIMIT 2",
        "schema": "CREATE TABLE device (Device TEXT, Device_ID NUMBER, Carrier TEXT, Software_Platform TEXT);"
      },
      {
        "question": "What about top 1?",
        "query": "SELECT software_platform FROM device GROUP BY software_platform ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE device (Device_ID NUMBER, Software_Platform TEXT, Carrier TEXT, Device TEXT);"
      }
    ],
    [
      {
        "question": "What are the names of the shops?",
        "query": "SELECT shop_name FROM shop",
        "schema": "CREATE TABLE shop (Shop_Name TEXT, Shop_ID NUMBER);"
      },
      {
        "question": "Which shop has some devices in stock?",
        "query": "SELECT shop_name FROM shop WHERE shop_id IN (SELECT shop_id FROM stock)",
        "schema": "CREATE TABLE shop (Shop_ID NUMBER, Shop_Name TEXT); CREATE TABLE stock (Quantity NUMBER, Shop_ID NUMBER, Device_ID NUMBER);"
      },
      {
        "question": "What about no device at all?",
        "query": "SELECT shop_name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM stock)",
        "schema": "CREATE TABLE stock (Quantity NUMBER, Shop_ID NUMBER, Device_ID NUMBER); CREATE TABLE device (Device_ID NUMBER); CREATE TABLE shop (Shop_ID NUMBER, Shop_Name TEXT);"
      }
    ],
    [
      {
        "question": "Show all the shop names and the location",
        "query": "SELECT shop_name, LOCATION FROM shop",
        "schema": "CREATE TABLE shop (Shop_ID NUMBER, Location TEXT, Shop_Name TEXT);"
      },
      {
        "question": "Keep those shops which opened in January.",
        "query": "SELECT shop_name, LOCATION FROM shop WHERE open_date like \"%Jan%\"",
        "schema": "CREATE TABLE shop (Shop_Name TEXT, Open_Date TEXT, Location TEXT, Open_Year NUMBER, Shop_ID NUMBER);"
      },
      {
        "question": "Keep the locations shared by shops with open year later than 2012 and shops with open year before 2008.",
        "query": "SELECT LOCATION FROM shop WHERE open_year > 2012 INTERSECT SELECT LOCATION FROM shop WHERE open_year < 2008",
        "schema": "CREATE TABLE shop (Shop_ID NUMBER, Open_Date TEXT, Location TEXT, Shop_Name TEXT, Open_Year NUMBER);"
      }
    ],
    [
      {
        "question": "List all the carriers",
        "query": "SELECT carrier FROM device",
        "schema": "CREATE TABLE device (Carrier TEXT);"
      },
      {
        "question": "Show all the unique carriers of the devices in the stock.",
        "query": "SELECT DISTINCT t2.carrier FROM stock AS t1 JOIN device AS t2 ON t1.device_id = t2.device_id",
        "schema": "CREATE TABLE stock (Device_ID NUMBER); CREATE TABLE device (Device TEXT, Carrier TEXT, Device_ID NUMBER);"
      },
      {
        "question": "Which carriers have no devices in stock?",
        "query": "SELECT carrier FROM device WHERE device_id NOT IN (SELECT device_id FROM stock)",
        "schema": "CREATE TABLE device (Device TEXT, Device_ID NUMBER, Carrier TEXT); CREATE TABLE stock (Device_ID NUMBER);"
      }
    ]
  ],
  "musical": [
    [
      {
        "question": "List all the actors.",
        "query": "SELECT * FROM actor",
        "schema": "CREATE TABLE actor (Character TEXT, Name TEXT, Actor_ID NUMBER, Musical_ID NUMBER);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT count(*) FROM actor",
        "schema": "CREATE TABLE actor (Name TEXT, Actor_ID NUMBER, Character TEXT, Musical_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show all the names of the actors.",
        "query": "SELECT name FROM actor",
        "schema": "CREATE TABLE actor (Character TEXT, Name TEXT, Musical_ID NUMBER, Actor_ID NUMBER);"
      },
      {
        "question": "List them in ascending alphabetical order.",
        "query": "SELECT name FROM actor ORDER BY name ASC",
        "schema": "CREATE TABLE actor (Character TEXT, Actor_ID NUMBER, Name TEXT, Musical_ID NUMBER);"
      }
    ],
    [
      {
        "question": "List all the actors.",
        "query": "SELECT * FROM actor",
        "schema": "CREATE TABLE actor (Actor_ID NUMBER, Name TEXT, Musical_ID NUMBER);"
      },
      {
        "question": "How many in total?",
        "query": "SELECT count(*) FROM actor",
        "schema": "CREATE TABLE actor (Musical_ID NUMBER, Actor_ID NUMBER, Name TEXT);"
      },
      {
        "question": "What are the characters and duration of them?",
        "query": "SELECT CHARACTER , duration FROM actor",
        "schema": "CREATE TABLE actor (Character TEXT, Musical_ID NUMBER, Name TEXT, Duration TEXT, Actor_ID NUMBER);"
      }
    ],
    [
      {
        "question": "List all the names and ages.",
        "query": "SELECT name, age FROM actor",
        "schema": "CREATE TABLE musical (Name TEXT); CREATE TABLE actor (Name TEXT, Actor_ID NUMBER, Character TEXT, age NUMBER, Musical_ID NUMBER);"
      },
      {
        "question": "Keep the names who are younger than 21.",
        "query": "SELECT name FROM actor WHERE age < 21",
        "schema": "CREATE TABLE actor (age NUMBER, Actor_ID NUMBER, Musical_ID NUMBER, Character TEXT, Name TEXT); CREATE TABLE musical (Name TEXT);"
      },
      {
        "question": "What about the names of actors whose age is not 20.",
        "query": "SELECT name FROM actor WHERE age != 20",
        "schema": "CREATE TABLE musical (Name TEXT); CREATE TABLE actor (Actor_ID NUMBER, Musical_ID NUMBER, Name TEXT, Character TEXT, age NUMBER);"
      }
    ],
    [
      {
        "question": "Show the characters of actors.",
        "query": "SELECT CHARACTER FROM actor",
        "schema": "CREATE TABLE actor (Character TEXT, Name TEXT, Musical_ID NUMBER, Actor_ID NUMBER);"
      },
      {
        "question": "List them in descending order of age.",
        "query": "SELECT CHARACTER FROM actor ORDER BY age DESC",
        "schema": "CREATE TABLE actor (age NUMBER, Musical_ID NUMBER, Character TEXT, Name TEXT, Actor_ID NUMBER);"
      }
    ],
    [
      {
        "question": "List the durations of all actors.",
        "query": "SELECT duration FROM actor",
        "schema": "CREATE TABLE actor (Actor_ID NUMBER, Duration TEXT, Musical_ID NUMBER);"
      },
      {
        "question": "What is the duration of 'Lynne McGranger'?",
        "query": "SELECT duration FROM actor WHERE name = 'Lynne McGranger'",
        "schema": "CREATE TABLE actor (Musical_ID NUMBER, Character TEXT, Name TEXT, Duration TEXT, Actor_ID NUMBER);"
      },
      {
        "question": "What about the oldest actor?",
        "query": "SELECT duration FROM actor ORDER BY age DESC LIMIT 1",
        "schema": "CREATE TABLE actor (Duration TEXT, Name TEXT, Actor_ID NUMBER, Character TEXT, Musical_ID NUMBER, age NUMBER);"
      }
    ],
    [
      {
        "question": "Show all the musical names information.",
        "query": "SELECT name FROM musical",
        "schema": "CREATE TABLE musical (Musical_ID NUMBER, Name TEXT); CREATE TABLE actor (Musical_ID NUMBER, Actor_ID NUMBER);"
      },
      {
        "question": "Which of them has the award of 'Tony Award'?",
        "query": "SELECT name FROM musical WHERE award = 'Tony Award'",
        "schema": "CREATE TABLE actor (Musical_ID NUMBER, Actor_ID NUMBER); CREATE TABLE musical (Name TEXT, Musical_ID NUMBER, Result TEXT, Award TEXT, Nominee TEXT);"
      },
      {
        "question": "What about having the nominee of \"Bob Fosse\"?",
        "query": "SELECT name FROM musical WHERE nominee = \"Bob Fosse\"",
        "schema": "CREATE TABLE actor (Actor_ID NUMBER, Name TEXT, Musical_ID NUMBER); CREATE TABLE musical (Name TEXT, Nominee TEXT, Result TEXT, Musical_ID NUMBER, Award TEXT);"
      }
    ],
    [
      {
        "question": "Show all the musical names information.",
        "query": "SELECT name FROM musical",
        "schema": "CREATE TABLE actor (Actor_ID NUMBER, Musical_ID NUMBER); CREATE TABLE musical (Musical_ID NUMBER, Name TEXT);"
      },
      {
        "question": "Which of them has the nominee of \"Bob Fosse\"?",
        "query": "SELECT name FROM musical WHERE nominee = \"Bob Fosse\"",
        "schema": "CREATE TABLE musical (Result TEXT, Award TEXT, Musical_ID NUMBER, Nominee TEXT, Name TEXT); CREATE TABLE actor (Character TEXT, Actor_ID NUMBER, Musical_ID NUMBER, Name TEXT);"
      },
      {
        "question": "How about the award of 'Tony Award'?",
        "query": "SELECT name FROM musical WHERE award = 'Tony Award'",
        "schema": "CREATE TABLE musical (Musical_ID NUMBER, Award TEXT, Nominee TEXT, Result TEXT, Name TEXT); CREATE TABLE actor (Musical_ID NUMBER, Actor_ID NUMBER, Name TEXT, Character TEXT);"
      },
      {
        "question": "What about the distinct nominees of the musicals with the award that is not that award?",
        "query": "SELECT DISTINCT nominee FROM musical WHERE award != \"Tony Award\"",
        "schema": "CREATE TABLE musical (Name TEXT, Musical_ID NUMBER, Nominee TEXT, Award TEXT, Result TEXT); CREATE TABLE actor (Name TEXT, Musical_ID NUMBER, Character TEXT, Actor_ID NUMBER);"
      }
    ],
    [
      {
        "question": "List all the names of actors.",
        "query": "SELECT * FROM actor",
        "schema": "CREATE TABLE actor (Actor_ID NUMBER, Character TEXT, Musical_ID NUMBER, Name TEXT);"
      },
      {
        "question": "Show the names of actors and their corresponding musical names.",
        "query": "SELECT t1.name , t2.name FROM actor AS t1 JOIN musical AS t2 ON t1.musical_id = t2.musical_id",
        "schema": "CREATE TABLE actor (Actor_ID NUMBER, Musical_ID NUMBER, Character TEXT, Name TEXT); CREATE TABLE musical (Name TEXT, Musical_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Which actors appeared in musical with name \"Wicked\"?",
        "query": "SELECT t1.name FROM actor AS t1 JOIN musical AS t2 ON t1.musical_id = t2.musical_id WHERE t2.name = \"Wicked\"",
        "schema": "CREATE TABLE actor (Character TEXT, Actor_ID NUMBER, Musical_ID NUMBER, Name TEXT); CREATE TABLE musical (Musical_ID NUMBER, Name TEXT);"
      },
      {
        "question": "What about \"The Phantom of the Opera\"?",
        "query": "SELECT t1.name FROM actor AS t1 JOIN musical AS t2 ON t1.musical_id = t2.musical_id WHERE t2.name = \"The Phantom of the Opera\"",
        "schema": "CREATE TABLE musical (Name TEXT, Musical_ID NUMBER); CREATE TABLE actor (Musical_ID NUMBER, Name TEXT, Character TEXT, Actor_ID NUMBER);"
      }
    ],
    [
      {
        "question": "List the names of actors and their musical names.",
        "query": "SELECT t1.name,t2.name FROM actor AS t1 JOIN musical AS t2 ON t1.musical_id = t2.musical_id",
        "schema": "CREATE TABLE musical (Name TEXT, Musical_ID NUMBER); CREATE TABLE actor (Actor_ID NUMBER, Character TEXT, Name TEXT, Musical_ID NUMBER);"
      },
      {
        "question": "Order the names of actors in in descending order of the year their musical is awarded.",
        "query": "SELECT t1.name FROM actor AS t1 JOIN musical AS t2 ON t1.musical_id = t2.musical_id ORDER BY t2.year DESC",
        "schema": "CREATE TABLE actor (Character TEXT, Name TEXT, Actor_ID NUMBER, Musical_ID NUMBER); CREATE TABLE musical (Result TEXT, Nominee TEXT, Year NUMBER, Award TEXT, Musical_ID NUMBER, Name TEXT);"
      }
    ],
    [
      {
        "question": "Which musical name has two actors?",
        "query": "SELECT t2.name FROM actor AS t1 JOIN musical AS t2 ON t1.musical_id = t2.musical_id GROUP BY t1.musical_id HAVING count(*) = 2",
        "schema": "CREATE TABLE actor (Actor_ID NUMBER, Name TEXT, Musical_ID NUMBER); CREATE TABLE musical (Musical_ID NUMBER, Name TEXT);"
      },
      {
        "question": "Show each musical name and the number of actors.",
        "query": "SELECT t2.name , count(*) FROM actor AS t1 JOIN musical AS t2 ON t1.musical_id = t2.musical_id",
        "schema": "CREATE TABLE actor (Musical_ID NUMBER, Name TEXT, Actor_ID NUMBER); CREATE TABLE musical (Musical_ID NUMBER, Name TEXT);"
      }
    ],
    [
      {
        "question": "List the names of actors and their musical names.",
        "query": "SELECT t1.name,t2.name FROM actor AS t1 JOIN musical AS t2 ON t1.musical_id = t2.musical_id",
        "schema": "CREATE TABLE actor (Musical_ID NUMBER, Actor_ID NUMBER, Character TEXT, Name TEXT); CREATE TABLE musical (Name TEXT, Musical_ID NUMBER);"
      },
      {
        "question": "What are the musical names that have two actors?",
        "query": "SELECT t2.name FROM actor AS t1 JOIN musical AS t2 ON t1.musical_id = t2.musical_id GROUP BY t1.musical_id HAVING count(*) = 2",
        "schema": "CREATE TABLE musical (Year NUMBER, Name TEXT, Musical_ID NUMBER); CREATE TABLE actor (Character TEXT, Name TEXT, Musical_ID NUMBER, Actor_ID NUMBER);"
      },
      {
        "question": "What about at least three actors?",
        "query": "SELECT t2.name FROM actor AS t1 JOIN musical AS t2 ON t1.musical_id = t2.musical_id GROUP BY t1.musical_id HAVING count(*) >= 3",
        "schema": "CREATE TABLE actor (Actor_ID NUMBER, Name TEXT, Character TEXT, Musical_ID NUMBER); CREATE TABLE musical (Name TEXT, Year NUMBER, Musical_ID NUMBER);"
      }
    ],
    [
      {
        "question": "List all the nominee names.",
        "query": "SELECT nominee FROM musical",
        "schema": "CREATE TABLE actor (Name TEXT); CREATE TABLE musical (Award TEXT, Nominee TEXT);"
      },
      {
        "question": "Count how many musicals for each.",
        "query": "SELECT nominee, count(*) FROM musical GROUP BY nominee",
        "schema": "CREATE TABLE musical (Award TEXT, Nominee TEXT, Musical_ID NUMBER, Result TEXT, Category TEXT, Name TEXT); CREATE TABLE actor (Musical_ID NUMBER, Name TEXT);"
      }
    ],
    [
      {
        "question": "Count how many musicals for each one.",
        "query": "SELECT nominee, count(*) FROM musical GROUP BY nominee",
        "schema": "CREATE TABLE actor (Musical_ID NUMBER, Actor_ID NUMBER); CREATE TABLE musical (Name TEXT, Musical_ID NUMBER, Category TEXT, Nominee TEXT, Result TEXT, Award TEXT);"
      },
      {
        "question": "Which nominee has 2 musicals?",
        "query": "SELECT nominee FROM musical GROUP BY nominee HAVING count(*) = 2",
        "schema": "CREATE TABLE musical (Musical_ID NUMBER, Nominee TEXT, Category TEXT, Award TEXT, Result TEXT, Name TEXT); CREATE TABLE actor (Actor_ID NUMBER, Musical_ID NUMBER);"
      },
      {
        "question": "Who has been nominated the greatest number of times?",
        "query": "SELECT nominee FROM musical GROUP BY nominee ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE musical (Result TEXT, Nominee TEXT, Musical_ID NUMBER, Name TEXT, Category TEXT, Year NUMBER, Award TEXT); CREATE TABLE actor (Musical_ID NUMBER, Actor_ID NUMBER);"
      }
    ],
    [
      {
        "question": "List all the results from the musicals.",
        "query": "SELECT RESULT FROM musical",
        "schema": "CREATE TABLE musical (Name TEXT, Musical_ID NUMBER, Nominee TEXT, Award TEXT, Result TEXT); CREATE TABLE actor (Actor_ID NUMBER, Musical_ID NUMBER);"
      },
      {
        "question": "How many are there for each result type?",
        "query": "SELECT RESULT, count(*) FROM musical GROUP BY RESULT",
        "schema": "CREATE TABLE musical (Result TEXT, Musical_ID NUMBER, Award TEXT, Name TEXT, Nominee TEXT); CREATE TABLE actor (Actor_ID NUMBER, Musical_ID NUMBER);"
      },
      {
        "question": "Which one is the most popular result?",
        "query": "SELECT RESULT FROM musical GROUP BY RESULT ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE musical (Result TEXT, Musical_ID NUMBER, Award TEXT, Nominee TEXT, Name TEXT); CREATE TABLE actor (Actor_ID NUMBER, Musical_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show all the nominees.",
        "query": "SELECT nominee FROM musical",
        "schema": "CREATE TABLE musical (Nominee TEXT, Award TEXT); CREATE TABLE actor (Actor_ID NUMBER);"
      },
      {
        "question": "Count how many musicals for each one.",
        "query": "SELECT nominee, count(*) FROM musical GROUP BY nominee",
        "schema": "CREATE TABLE actor (Musical_ID NUMBER, Actor_ID NUMBER); CREATE TABLE musical (Award TEXT, Category TEXT, Result TEXT, Musical_ID NUMBER, Name TEXT, Nominee TEXT);"
      },
      {
        "question": "Which nominee has 5 musicals?",
        "query": "SELECT nominee FROM musical GROUP BY nominee HAVING count(*) = 5",
        "schema": "CREATE TABLE actor (Musical_ID NUMBER, Actor_ID NUMBER); CREATE TABLE musical (Category TEXT, Nominee TEXT, Result TEXT, Name TEXT, Award TEXT, Musical_ID NUMBER);"
      },
      {
        "question": "How about more than two musicals?",
        "query": "SELECT nominee FROM musical GROUP BY nominee HAVING count(*) > 2",
        "schema": "CREATE TABLE actor (Actor_ID NUMBER, Musical_ID NUMBER); CREATE TABLE musical (Result TEXT, Category TEXT, Musical_ID NUMBER, Award TEXT, Nominee TEXT, Name TEXT);"
      }
    ],
    [
      {
        "question": "List all the information about musicals.",
        "query": "SELECT * FROM musical",
        "schema": "CREATE TABLE actor (Actor_ID NUMBER, Musical_ID NUMBER); CREATE TABLE musical (Name TEXT, Musical_ID NUMBER, Category TEXT);"
      },
      {
        "question": "Show all the names of musicals which have actors.",
        "query": "SELECT name FROM musical WHERE musical_id IN (SELECT musical_id FROM actor)",
        "schema": "CREATE TABLE musical (Name TEXT, Category TEXT, Musical_ID NUMBER); CREATE TABLE actor (Musical_ID NUMBER, Actor_ID NUMBER, Name TEXT);"
      },
      {
        "question": "What about having no actors?",
        "query": "SELECT name FROM musical WHERE musical_id NOT IN (SELECT musical_id FROM actor)",
        "schema": "CREATE TABLE musical (Musical_ID NUMBER, Category TEXT, Name TEXT); CREATE TABLE actor (Name TEXT, Musical_ID NUMBER, Actor_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show all the information about the musical that has the award of 'Tony Award'?",
        "query": "SELECT * FROM musical WHERE award = 'Tony Award'",
        "schema": "CREATE TABLE actor (Musical_ID NUMBER, Actor_ID NUMBER); CREATE TABLE musical (Musical_ID NUMBER, Result TEXT, Nominee TEXT, Award TEXT, Name TEXT, Category TEXT);"
      },
      {
        "question": "What are the nominees with award \"Bob Fosse\" or \"Cleavant Derricks\"?",
        "query": "SELECT nominee FROM musical WHERE award = \"Tony Award\" OR award = \"Cleavant Derricks\"",
        "schema": "CREATE TABLE musical (Nominee TEXT, Musical_ID NUMBER, Name TEXT, Result TEXT, Category TEXT, Award TEXT); CREATE TABLE actor (Actor_ID NUMBER, Musical_ID NUMBER, Name TEXT);"
      },
      {
        "question": "What about both \"Tony Award\" and \"Drama Desk Award\"?",
        "query": "SELECT nominee FROM musical WHERE award = \"Tony Award\" INTERSECT SELECT nominee FROM musical WHERE award = \"Drama Desk Award\"",
        "schema": "CREATE TABLE actor (Name TEXT, Actor_ID NUMBER, Musical_ID NUMBER); CREATE TABLE musical (Result TEXT, Nominee TEXT, Musical_ID NUMBER, Name TEXT, Category TEXT, Award TEXT);"
      }
    ]
  ]
}