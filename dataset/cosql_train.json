{
  "college_2": [
    [
      {
        "question": "Find out the average salary of professors?",
        "query": "SELECT AVG ( salary ) FROM instructor",
        "schema": "CREATE TABLE department (dept_name TEXT); CREATE TABLE instructor (salary NUMBER, ID TEXT, dept_name TEXT, name TEXT); CREATE TABLE advisor (i_ID TEXT);"
      },
      {
        "question": "Find the average salary of the professors of each department?",
        "query": "SELECT AVG ( salary ) , dept_name FROM instructor GROUP BY dept_name",
        "schema": "CREATE TABLE teaches (ID TEXT); CREATE TABLE advisor (i_ID TEXT); CREATE TABLE department (dept_name TEXT); CREATE TABLE instructor (ID TEXT, salary NUMBER, name TEXT, dept_name TEXT);"
      },
      {
        "question": "Which department has the highest average salary of professors?",
        "query": "SELECT dept_name FROM instructor GROUP BY dept_name ORDER BY AVG ( salary ) DESC LIMIT 1",
        "schema": "CREATE TABLE teaches (ID TEXT); CREATE TABLE advisor (i_ID TEXT); CREATE TABLE instructor (name TEXT, salary NUMBER, ID TEXT, dept_name TEXT); CREATE TABLE department (dept_name TEXT);"
      },
      {
        "question": "Which department has the lowest average salary of professors?",
        "query": "SELECT dept_name FROM instructor GROUP BY dept_name ORDER BY AVG ( salary ) LIMIT 1",
        "schema": "CREATE TABLE instructor (salary NUMBER, ID TEXT, name TEXT, dept_name TEXT); CREATE TABLE department (dept_name TEXT); CREATE TABLE teaches (ID TEXT); CREATE TABLE advisor (i_ID TEXT);"
      },
      {
        "question": "In which department Mr. Mird work for?",
        "query": "SELECT dept_name FROM instructor WHERE name = 'Mird'",
        "schema": "CREATE TABLE advisor (i_ID TEXT); CREATE TABLE teaches (ID TEXT); CREATE TABLE instructor (ID TEXT, name TEXT, salary NUMBER, dept_name TEXT); CREATE TABLE department (dept_name TEXT);"
      },
      {
        "question": "How much is the salary Mr. Mird earns currently?",
        "query": "SELECT salary FROM instructor WHERE name = 'Mird'",
        "schema": "CREATE TABLE instructor (salary NUMBER, dept_name TEXT, ID TEXT, name TEXT); CREATE TABLE advisor (i_ID TEXT); CREATE TABLE department (dept_name TEXT); CREATE TABLE teaches (ID TEXT);"
      }
    ],
    [
      {
        "question": "What is the maximum capacity in Lambert? | Did you mean Lamberton? | yes. my apologies.",
        "query": "SELECT MAX ( capacity ) FROM classroom WHERE building = \"Lamberton\"",
        "schema": "CREATE TABLE instructor (ID TEXT); CREATE TABLE department (dept_name TEXT); CREATE TABLE classroom (room_number TEXT, building TEXT, capacity NUMBER); CREATE TABLE student (tot_cred NUMBER, ID TEXT, dept_name TEXT, name TEXT);"
      },
      {
        "question": "What is the maximum capacity of all of the rooms?",
        "query": "SELECT MAX ( capacity ) FROM classroom",
        "schema": "CREATE TABLE classroom (building TEXT, capacity NUMBER, room_number TEXT); CREATE TABLE section (building TEXT); CREATE TABLE student (ID TEXT, dept_name TEXT, name TEXT, tot_cred NUMBER); CREATE TABLE instructor (ID TEXT); CREATE TABLE department (dept_name TEXT);"
      },
      {
        "question": "How many rooms are there?",
        "query": "SELECT SUM ( room_number ) FROM classroom",
        "schema": "CREATE TABLE classroom (capacity NUMBER, building TEXT, room_number TEXT); CREATE TABLE section (building TEXT, room_number TEXT); CREATE TABLE instructor (ID TEXT); CREATE TABLE department (dept_name TEXT); CREATE TABLE student (tot_cred NUMBER, name TEXT, dept_name TEXT, ID TEXT);"
      },
      {
        "question": "What is the average capacity of the rooms?",
        "query": "SELECT AVG ( capacity ) FROM classroom",
        "schema": "CREATE TABLE instructor (ID TEXT); CREATE TABLE classroom (room_number TEXT, capacity NUMBER, building TEXT); CREATE TABLE student (ID TEXT, dept_name TEXT, tot_cred NUMBER, name TEXT); CREATE TABLE section (building TEXT, room_number TEXT); CREATE TABLE department (dept_name TEXT);"
      },
      {
        "question": "Which classroom is the smallest?",
        "query": "SELECT * FROM classroom ORDER BY capacity LIMIT 1",
        "schema": "CREATE TABLE instructor (ID TEXT); CREATE TABLE department (dept_name TEXT); CREATE TABLE section (building TEXT, room_number TEXT); CREATE TABLE classroom (capacity NUMBER, room_number TEXT, building TEXT); CREATE TABLE student (ID TEXT, dept_name TEXT, tot_cred NUMBER, name TEXT);"
      },
      {
        "question": "What room seats 120 people?",
        "query": "SELECT * FROM classroom WHERE capacity = 120",
        "schema": "CREATE TABLE classroom (building TEXT, room_number TEXT, capacity NUMBER); CREATE TABLE section (building TEXT, room_number TEXT); CREATE TABLE student (name TEXT, ID TEXT, dept_name TEXT, tot_cred NUMBER); CREATE TABLE department (dept_name TEXT); CREATE TABLE instructor (ID TEXT);"
      }
    ],
    [
      {
        "question": "Can you list the names and ids of courses?",
        "query": "SELECT course_id,title FROM course",
        "schema": "CREATE TABLE instructor (dept_name TEXT, ID TEXT, name TEXT); CREATE TABLE department (dept_name TEXT); CREATE TABLE course (title TEXT, course_id TEXT, dept_name TEXT); CREATE TABLE prereq (course_id TEXT, prereq_id TEXT); CREATE TABLE student (dept_name TEXT, name TEXT, ID TEXT); CREATE TABLE section (course_id TEXT); CREATE TABLE teaches (ID TEXT, course_id TEXT);"
      },
      {
        "question": "I want to know the course names and the prerequisite ids.",
        "query": "SELECT t1.title,t2.prereq_id FROM course AS t1 JOIN prereq AS t2 WHERE t1.course_id = t2.course_id",
        "schema": "CREATE TABLE section (course_id TEXT); CREATE TABLE course (title TEXT, dept_name TEXT, course_id TEXT); CREATE TABLE instructor (dept_name TEXT, name TEXT, ID TEXT); CREATE TABLE department (dept_name TEXT); CREATE TABLE prereq (course_id TEXT, prereq_id TEXT); CREATE TABLE teaches (ID TEXT, course_id TEXT); CREATE TABLE student (ID TEXT, name TEXT, dept_name TEXT);"
      },
      {
        "question": "Hmm, please tell me the course ids that do not have any prerequisite.",
        "query": "SELECT course_id FROM course EXCEPT SELECT course_id FROM prereq",
        "schema": "CREATE TABLE instructor (name TEXT, ID TEXT, dept_name TEXT); CREATE TABLE teaches (ID TEXT, course_id TEXT); CREATE TABLE section (course_id TEXT); CREATE TABLE prereq (course_id TEXT, prereq_id TEXT); CREATE TABLE course (course_id TEXT, dept_name TEXT, title TEXT); CREATE TABLE department (dept_name TEXT); CREATE TABLE student (name TEXT, ID TEXT, dept_name TEXT);"
      }
    ],
    [
      {
        "question": "What is the average salary for the physics department?",
        "query": "SELECT AVG ( salary ) FROM instructor WHERE dept_name = 'Physics'",
        "schema": "CREATE TABLE department (dept_name TEXT, budget NUMBER); CREATE TABLE course (course_id TEXT, dept_name TEXT); CREATE TABLE student (tot_cred NUMBER, dept_name TEXT, ID TEXT); CREATE TABLE instructor (ID TEXT, dept_name TEXT, salary NUMBER);"
      },
      {
        "question": "How many instructors in the physics department make less than that?",
        "query": "SELECT COUNT ( * ) FROM instructor WHERE dept_name = 'Physics' AND salary < ( SELECT AVG ( salary ) FROM instructor WHERE dept_name = 'Physics' )",
        "schema": "CREATE TABLE teaches (ID TEXT); CREATE TABLE advisor (i_ID TEXT, s_ID TEXT); CREATE TABLE course (course_id TEXT, dept_name TEXT); CREATE TABLE instructor (ID TEXT, salary NUMBER, dept_name TEXT, name TEXT); CREATE TABLE department (budget NUMBER, dept_name TEXT); CREATE TABLE student (ID TEXT, tot_cred NUMBER, dept_name TEXT);"
      },
      {
        "question": "What is the name and salary of that instructor?",
        "query": "SELECT name, salary FROM instructor WHERE dept_name = 'Physics' AND salary < ( SELECT AVG ( salary ) FROM instructor WHERE dept_name = 'Physics' )",
        "schema": "CREATE TABLE student (ID TEXT, tot_cred NUMBER, dept_name TEXT); CREATE TABLE department (dept_name TEXT, budget NUMBER); CREATE TABLE advisor (i_ID TEXT, s_ID TEXT); CREATE TABLE instructor (dept_name TEXT, salary NUMBER, name TEXT, ID TEXT); CREATE TABLE teaches (ID TEXT); CREATE TABLE course (dept_name TEXT, course_id TEXT);"
      }
    ],
    [
      {
        "question": "Find the year that offers the largest number of courses?",
        "query": "SELECT YEAR FROM SECTION GROUP BY semester , YEAR ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE student (dept_name TEXT, tot_cred NUMBER, ID TEXT); CREATE TABLE course (title TEXT, course_id TEXT, dept_name TEXT); CREATE TABLE section (semester TEXT, year NUMBER, course_id TEXT); CREATE TABLE instructor (dept_name TEXT, ID TEXT); CREATE TABLE teaches (semester TEXT, year NUMBER); CREATE TABLE department (dept_name TEXT); CREATE TABLE takes (semester TEXT, year NUMBER);"
      },
      {
        "question": "What semester in that year offers the largest number of courses?",
        "query": "SELECT semester FROM SECTION WHERE YEAR = 2002 GROUP BY semester ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE instructor (dept_name TEXT, ID TEXT); CREATE TABLE takes (semester TEXT, year NUMBER); CREATE TABLE student (dept_name TEXT, tot_cred NUMBER, ID TEXT); CREATE TABLE teaches (semester TEXT, year NUMBER); CREATE TABLE course (title TEXT, dept_name TEXT, course_id TEXT); CREATE TABLE section (year NUMBER, course_id TEXT, semester TEXT); CREATE TABLE department (dept_name TEXT);"
      },
      {
        "question": "What buildings have course sections offered then?",
        "query": "SELECT building FROM SECTION WHERE semester = 'Fall' AND YEAR = 2002",
        "schema": "CREATE TABLE instructor (ID TEXT, dept_name TEXT); CREATE TABLE takes (semester TEXT, year NUMBER); CREATE TABLE classroom (room_number TEXT, building TEXT); CREATE TABLE teaches (year NUMBER, semester TEXT); CREATE TABLE course (dept_name TEXT, course_id TEXT, title TEXT); CREATE TABLE section (year NUMBER, course_id TEXT, building TEXT, semester TEXT, room_number TEXT); CREATE TABLE department (building TEXT, dept_name TEXT); CREATE TABLE student (ID TEXT, tot_cred NUMBER, dept_name TEXT);"
      }
    ],
    [
      {
        "question": "Who is the instructor of the statistics department?",
        "query": "SELECT name FROM instructor WHERE dept_name = \"Statistics\"",
        "schema": "CREATE TABLE teaches (ID TEXT); CREATE TABLE advisor (i_ID TEXT, s_ID TEXT); CREATE TABLE student (ID TEXT); CREATE TABLE instructor (ID TEXT, dept_name TEXT, name TEXT); CREATE TABLE department (dept_name TEXT); CREATE TABLE course (dept_name TEXT);"
      },
      {
        "question": "What is their average salary?",
        "query": "SELECT AVG ( salary ) FROM instructor WHERE dept_name = \"Statistics\"",
        "schema": "CREATE TABLE department (dept_name TEXT); CREATE TABLE course (dept_name TEXT); CREATE TABLE advisor (s_ID TEXT, i_ID TEXT); CREATE TABLE student (ID TEXT); CREATE TABLE teaches (ID TEXT); CREATE TABLE instructor (dept_name TEXT, ID TEXT, name TEXT, salary NUMBER);"
      },
      {
        "question": "Who in the statistics department has the highest salary?",
        "query": "SELECT name FROM instructor WHERE dept_name = \"Statistics\" ORDER BY salary DESC LIMIT 1",
        "schema": "CREATE TABLE advisor (s_ID TEXT, i_ID TEXT); CREATE TABLE department (dept_name TEXT); CREATE TABLE student (ID TEXT); CREATE TABLE instructor (ID TEXT, dept_name TEXT, name TEXT, salary NUMBER); CREATE TABLE course (dept_name TEXT); CREATE TABLE teaches (ID TEXT);"
      },
      {
        "question": "How much is his salary?",
        "query": "SELECT salary FROM instructor WHERE dept_name = \"Statistics\" ORDER BY salary DESC LIMIT 1",
        "schema": "CREATE TABLE student (ID TEXT); CREATE TABLE department (dept_name TEXT); CREATE TABLE advisor (i_ID TEXT, s_ID TEXT); CREATE TABLE instructor (name TEXT, ID TEXT, dept_name TEXT, salary NUMBER); CREATE TABLE course (dept_name TEXT); CREATE TABLE teaches (ID TEXT);"
      }
    ],
    [
      {
        "question": "Find the names of top 3 departments? | What do you mean by top? | Top three departments that provide the largest amount of courses?",
        "query": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY COUNT ( * ) DESC LIMIT 3",
        "schema": "CREATE TABLE student (dept_name TEXT); CREATE TABLE instructor (name TEXT, dept_name TEXT, ID TEXT); CREATE TABLE course (credits NUMBER, course_id TEXT, dept_name TEXT, title TEXT); CREATE TABLE classroom (capacity NUMBER); CREATE TABLE section (course_id TEXT); CREATE TABLE teaches (course_id TEXT); CREATE TABLE department (dept_name TEXT);"
      },
      {
        "question": "Find the names of top 3 departments that provide the lowest amount of courses?",
        "query": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY COUNT ( * ) LIMIT 3",
        "schema": "CREATE TABLE section (course_id TEXT); CREATE TABLE classroom (capacity NUMBER); CREATE TABLE course (course_id TEXT, title TEXT, dept_name TEXT, credits NUMBER); CREATE TABLE department (dept_name TEXT); CREATE TABLE instructor (name TEXT, dept_name TEXT, ID TEXT); CREATE TABLE teaches (course_id TEXT); CREATE TABLE student (dept_name TEXT);"
      }
    ],
    [
      {
        "question": "How many courses are offered?",
        "query": "SELECT COUNT ( course_id ) FROM course",
        "schema": "CREATE TABLE instructor (ID TEXT); CREATE TABLE section (course_id TEXT); CREATE TABLE course (title TEXT, course_id TEXT, dept_name TEXT); CREATE TABLE teaches (ID TEXT, course_id TEXT); CREATE TABLE department (dept_name TEXT); CREATE TABLE student (dept_name TEXT, tot_cred NUMBER, ID TEXT); CREATE TABLE prereq (course_id TEXT, prereq_id TEXT);"
      },
      {
        "question": "How many courses have more than one prerequisite?",
        "query": "SELECT COUNT ( * ) FROM ( SELECT t1.title FROM course AS t1 JOIN prereq AS t2 ON t1.course_id = t2.course_id GROUP BY t2.course_id HAVING COUNT ( * ) > 1 )",
        "schema": "CREATE TABLE course (title TEXT, dept_name TEXT, course_id TEXT); CREATE TABLE section (course_id TEXT); CREATE TABLE prereq (prereq_id TEXT, course_id TEXT); CREATE TABLE teaches (course_id TEXT, ID TEXT); CREATE TABLE department (dept_name TEXT); CREATE TABLE instructor (ID TEXT); CREATE TABLE student (ID TEXT, dept_name TEXT, tot_cred NUMBER);"
      },
      {
        "question": "Can you tell me the titles of those courses?",
        "query": "SELECT t1.title FROM course AS t1 JOIN prereq AS t2 ON t1.course_id = t2.course_id GROUP BY t2.course_id HAVING COUNT ( * ) > 1",
        "schema": "CREATE TABLE student (tot_cred NUMBER, ID TEXT, dept_name TEXT); CREATE TABLE instructor (ID TEXT); CREATE TABLE teaches (course_id TEXT, ID TEXT); CREATE TABLE course (course_id TEXT, title TEXT, dept_name TEXT); CREATE TABLE department (dept_name TEXT); CREATE TABLE prereq (prereq_id TEXT, course_id TEXT); CREATE TABLE section (course_id TEXT);"
      },
      {
        "question": "What departments are those courses in?",
        "query": "SELECT t1.dept_name,t1.course_id FROM course AS t1 JOIN prereq AS t2 ON t1.course_id = t2.course_id GROUP BY t2.course_id HAVING COUNT ( * ) > 1",
        "schema": "CREATE TABLE prereq (course_id TEXT, prereq_id TEXT); CREATE TABLE section (course_id TEXT); CREATE TABLE department (dept_name TEXT); CREATE TABLE course (course_id TEXT, title TEXT, dept_name TEXT); CREATE TABLE instructor (ID TEXT); CREATE TABLE teaches (course_id TEXT, ID TEXT); CREATE TABLE student (tot_cred NUMBER, dept_name TEXT, ID TEXT);"
      },
      {
        "question": "Can you also provide the number of credits for each of those courses?",
        "query": "SELECT t1.credits,t1.course_id FROM course AS t1 JOIN prereq AS t2 ON t1.course_id = t2.course_id GROUP BY t2.course_id HAVING COUNT ( * ) > 1",
        "schema": "CREATE TABLE section (course_id TEXT); CREATE TABLE prereq (course_id TEXT, prereq_id TEXT); CREATE TABLE course (course_id TEXT, title TEXT, dept_name TEXT, credits NUMBER); CREATE TABLE teaches (ID TEXT, course_id TEXT); CREATE TABLE department (dept_name TEXT); CREATE TABLE instructor (ID TEXT); CREATE TABLE student (tot_cred NUMBER, dept_name TEXT, ID TEXT);"
      }
    ],
    [
      {
        "question": "can you show me the name and salary of all instructors?",
        "query": "SELECT name, salary FROM instructor",
        "schema": "CREATE TABLE teaches (ID TEXT); CREATE TABLE instructor (dept_name TEXT, name TEXT, ID TEXT, salary NUMBER); CREATE TABLE department (dept_name TEXT); CREATE TABLE course (dept_name TEXT); CREATE TABLE advisor (i_ID TEXT);"
      },
      {
        "question": "How much does the biology professor make?",
        "query": "SELECT name, salary FROM instructor WHERE dept_name = \"Biology\"",
        "schema": "CREATE TABLE instructor (dept_name TEXT, ID TEXT, salary NUMBER, name TEXT); CREATE TABLE department (dept_name TEXT); CREATE TABLE advisor (i_ID TEXT, s_ID TEXT); CREATE TABLE teaches (ID TEXT); CREATE TABLE course (dept_name TEXT);"
      },
      {
        "question": "How many professors make more than Valtchev?",
        "query": "SELECT COUNT ( * ) FROM instructor WHERE salary > ( SELECT salary FROM instructor WHERE name = \"Valtchev\" )",
        "schema": "CREATE TABLE instructor (dept_name TEXT, salary NUMBER, ID TEXT, name TEXT); CREATE TABLE department (dept_name TEXT); CREATE TABLE teaches (ID TEXT); CREATE TABLE advisor (i_ID TEXT, s_ID TEXT); CREATE TABLE course (dept_name TEXT);"
      },
      {
        "question": "Can you tell me the names of the professors that make more than Valtchev?",
        "query": "SELECT name FROM instructor WHERE salary > ( SELECT salary FROM instructor WHERE name = \"Valtchev\" )",
        "schema": "CREATE TABLE course (dept_name TEXT); CREATE TABLE teaches (ID TEXT); CREATE TABLE instructor (ID TEXT, dept_name TEXT, salary NUMBER, name TEXT); CREATE TABLE department (dept_name TEXT); CREATE TABLE advisor (s_ID TEXT, i_ID TEXT);"
      }
    ],
    [
      {
        "question": "Whsts the name of the student thst took prerequisite course  title internatoinal finance?",
        "query": "SELECT t1.name FROM student AS t1 JOIN takes AS t2 ON t1.id = t2.id WHERE t2.course_id IN ( SELECT t4.prereq_id FROM course AS t3 JOIN prereq AS t4 ON t3.course_id = t4.course_id WHERE t3.title = 'International Finance' )",
        "schema": "CREATE TABLE department (dept_name TEXT); CREATE TABLE section (semester TEXT, course_id TEXT); CREATE TABLE prereq (course_id TEXT, prereq_id TEXT); CREATE TABLE instructor (name TEXT, dept_name TEXT); CREATE TABLE takes (course_id TEXT, sec_id TEXT, ID TEXT, semester TEXT); CREATE TABLE student (tot_cred NUMBER, name TEXT, ID TEXT, dept_name TEXT); CREATE TABLE course (title TEXT, course_id TEXT, dept_name TEXT);"
      },
      {
        "question": "What is the  title of course id 787?",
        "query": "SELECT title FROM course WHERE course_id = 787",
        "schema": "CREATE TABLE department (dept_name TEXT); CREATE TABLE instructor (dept_name TEXT, name TEXT); CREATE TABLE course (title TEXT, dept_name TEXT, course_id TEXT); CREATE TABLE takes (semester TEXT, sec_id TEXT, ID TEXT, course_id TEXT); CREATE TABLE student (dept_name TEXT, tot_cred NUMBER, ID TEXT, name TEXT); CREATE TABLE section (semester TEXT, course_id TEXT); CREATE TABLE prereq (prereq_id TEXT, course_id TEXT);"
      },
      {
        "question": "What is the department name of course id 787?",
        "query": "SELECT dept_name FROM course WHERE course_id = 787",
        "schema": "CREATE TABLE instructor (name TEXT, dept_name TEXT); CREATE TABLE prereq (course_id TEXT, prereq_id TEXT); CREATE TABLE department (dept_name TEXT); CREATE TABLE course (dept_name TEXT, course_id TEXT, title TEXT); CREATE TABLE takes (course_id TEXT, ID TEXT, sec_id TEXT, semester TEXT); CREATE TABLE student (name TEXT, tot_cred NUMBER, dept_name TEXT, ID TEXT); CREATE TABLE section (course_id TEXT, semester TEXT);"
      }
    ],
    [
      {
        "question": "Can you tell me which room number has a capacity higher than the average capacity?",
        "query": "SELECT room_number FROM classroom WHERE capacity > ( SELECT AVG ( capacity ) FROM classroom )",
        "schema": "CREATE TABLE department (dept_name TEXT); CREATE TABLE course (title TEXT, course_id TEXT); CREATE TABLE classroom (room_number TEXT, capacity NUMBER, building TEXT); CREATE TABLE section (building TEXT, room_number TEXT); CREATE TABLE instructor (ID TEXT);"
      },
      {
        "question": "What is the range of capacity among rooms in each building?",
        "query": "SELECT MAX ( capacity ) , MIN ( capacity ) , building FROM classroom GROUP BY building",
        "schema": "CREATE TABLE section (building TEXT, room_number TEXT); CREATE TABLE instructor (ID TEXT); CREATE TABLE course (title TEXT, course_id TEXT); CREATE TABLE department (building TEXT, dept_name TEXT); CREATE TABLE classroom (room_number TEXT, building TEXT, capacity NUMBER);"
      },
      {
        "question": "Which building houses the room that has the maximum capacity?",
        "query": "SELECT building FROM classroom ORDER BY capacity DESC LIMIT 1",
        "schema": "CREATE TABLE course (title TEXT, course_id TEXT); CREATE TABLE department (building TEXT, dept_name TEXT); CREATE TABLE classroom (room_number TEXT, building TEXT, capacity NUMBER); CREATE TABLE instructor (ID TEXT); CREATE TABLE section (building TEXT, room_number TEXT);"
      },
      {
        "question": "Which building houses the room that has the minimum capacity?",
        "query": "SELECT building FROM classroom ORDER BY capacity LIMIT 1",
        "schema": "CREATE TABLE course (title TEXT, course_id TEXT); CREATE TABLE classroom (capacity NUMBER, building TEXT, room_number TEXT); CREATE TABLE section (building TEXT, room_number TEXT); CREATE TABLE department (dept_name TEXT, building TEXT); CREATE TABLE instructor (ID TEXT);"
      }
    ],
    [
      {
        "question": "Find the name of instructors who are advisors of students from the Math department, and sort the results by students' total credit.",
        "query": "SELECT t2.name FROM advisor AS t1 JOIN instructor AS t2 ON t1.i_id = t2.id JOIN student AS t3 ON t1.s_id = t3.id WHERE t3.dept_name = 'Math' ORDER BY t3.tot_cred",
        "schema": "CREATE TABLE department (dept_name TEXT); CREATE TABLE teaches (ID TEXT); CREATE TABLE instructor (ID TEXT, dept_name TEXT, name TEXT); CREATE TABLE student (dept_name TEXT, tot_cred NUMBER, name TEXT, ID TEXT); CREATE TABLE takes (ID TEXT); CREATE TABLE course (course_id TEXT, dept_name TEXT, credits NUMBER); CREATE TABLE advisor (s_ID TEXT, i_ID TEXT);"
      },
      {
        "question": "Find name of students in the Math department",
        "query": "SELECT name FROM student WHERE dept_name = 'Math'",
        "schema": "CREATE TABLE advisor (s_ID TEXT, i_ID TEXT); CREATE TABLE student (name TEXT, tot_cred NUMBER, ID TEXT, dept_name TEXT); CREATE TABLE course (credits NUMBER, course_id TEXT, dept_name TEXT); CREATE TABLE department (dept_name TEXT); CREATE TABLE instructor (name TEXT, ID TEXT, dept_name TEXT); CREATE TABLE takes (ID TEXT); CREATE TABLE teaches (ID TEXT);"
      },
      {
        "question": "Give me IDs of instructors in the Marketing department",
        "query": "SELECT id FROM instructor WHERE dept_name = 'Marketing'",
        "schema": "CREATE TABLE department (dept_name TEXT); CREATE TABLE advisor (s_ID TEXT, i_ID TEXT); CREATE TABLE teaches (ID TEXT); CREATE TABLE takes (ID TEXT); CREATE TABLE instructor (dept_name TEXT, name TEXT, ID TEXT); CREATE TABLE student (name TEXT, dept_name TEXT, tot_cred NUMBER, ID TEXT); CREATE TABLE course (credits NUMBER, course_id TEXT, dept_name TEXT);"
      }
    ],
    [
      {
        "question": "Who are the students that have more than one advisor?",
        "query": "SELECT t1.name FROM student AS t1 JOIN advisor AS t2 ON t1.id = t2.s_id GROUP BY t2.s_id HAVING COUNT ( * ) > 1",
        "schema": "CREATE TABLE section (course_id TEXT); CREATE TABLE instructor (ID TEXT); CREATE TABLE teaches (ID TEXT); CREATE TABLE course (course_id TEXT); CREATE TABLE advisor (s_ID TEXT, i_ID TEXT); CREATE TABLE takes (ID TEXT); CREATE TABLE student (tot_cred NUMBER, name TEXT, dept_name TEXT, ID TEXT);"
      },
      {
        "question": "How many students have more than one credit?",
        "query": "SELECT t1.name FROM student AS t1 JOIN advisor AS t2 ON t1.id = t2.s_id GROUP BY t2.s_id HAVING t1.tot_cred > 1",
        "schema": "CREATE TABLE teaches (ID TEXT); CREATE TABLE course (course_id TEXT, credits NUMBER); CREATE TABLE takes (ID TEXT); CREATE TABLE student (name TEXT, ID TEXT, tot_cred NUMBER, dept_name TEXT); CREATE TABLE advisor (i_ID TEXT, s_ID TEXT); CREATE TABLE section (course_id TEXT); CREATE TABLE instructor (ID TEXT);"
      },
      {
        "question": "How many students have more than 115 credits?",
        "query": "SELECT t1.name FROM student AS t1 JOIN advisor AS t2 ON t1.id = t2.s_id GROUP BY t2.s_id HAVING t1.tot_cred > 115",
        "schema": "CREATE TABLE student (name TEXT, ID TEXT, tot_cred NUMBER, dept_name TEXT); CREATE TABLE course (course_id TEXT, credits NUMBER); CREATE TABLE takes (ID TEXT); CREATE TABLE section (course_id TEXT); CREATE TABLE instructor (ID TEXT); CREATE TABLE advisor (i_ID TEXT, s_ID TEXT); CREATE TABLE teaches (ID TEXT);"
      }
    ],
    [
      {
        "question": "how many courses have prerequisite?",
        "query": "SELECT COUNT ( * ) FROM course WHERE course_id IN ( SELECT course_id FROM prereq )",
        "schema": "CREATE TABLE teaches (course_id TEXT); CREATE TABLE department (dept_name TEXT); CREATE TABLE instructor (ID TEXT); CREATE TABLE course (title TEXT, dept_name TEXT, course_id TEXT); CREATE TABLE student (tot_cred NUMBER, ID TEXT); CREATE TABLE prereq (course_id TEXT, prereq_id TEXT); CREATE TABLE section (course_id TEXT);"
      },
      {
        "question": "how many courses are there?",
        "query": "SELECT COUNT ( * ) FROM course",
        "schema": "CREATE TABLE prereq (course_id TEXT, prereq_id TEXT); CREATE TABLE student (ID TEXT, tot_cred NUMBER); CREATE TABLE course (course_id TEXT, title TEXT, dept_name TEXT); CREATE TABLE teaches (course_id TEXT); CREATE TABLE instructor (ID TEXT); CREATE TABLE department (dept_name TEXT); CREATE TABLE section (course_id TEXT);"
      },
      {
        "question": "How many courses that do not have prerequisite?",
        "query": "SELECT COUNT ( * ) FROM course WHERE course_id NOT IN ( SELECT course_id FROM prereq )",
        "schema": "CREATE TABLE section (course_id TEXT); CREATE TABLE department (dept_name TEXT); CREATE TABLE student (ID TEXT, tot_cred NUMBER); CREATE TABLE prereq (prereq_id TEXT, course_id TEXT); CREATE TABLE instructor (ID TEXT); CREATE TABLE course (title TEXT, course_id TEXT, dept_name TEXT); CREATE TABLE teaches (course_id TEXT);"
      }
    ],
    [
      {
        "question": "How many instructors are there?",
        "query": "SELECT COUNT ( * ) FROM instructor",
        "schema": "CREATE TABLE student (ID TEXT); CREATE TABLE course (course_id TEXT); CREATE TABLE teaches (ID TEXT); CREATE TABLE advisor (i_ID TEXT, s_ID TEXT); CREATE TABLE department (dept_name TEXT); CREATE TABLE instructor (dept_name TEXT, ID TEXT, name TEXT);"
      },
      {
        "question": "OK. Which instructor ids appear more than once in the advisor table",
        "query": "SELECT t1.id FROM instructor AS t1 JOIN advisor AS t2 ON t1.id = t2.i_id GROUP BY t2.i_id HAVING COUNT ( * ) > 1",
        "schema": "CREATE TABLE advisor (i_ID TEXT, s_ID TEXT); CREATE TABLE teaches (ID TEXT); CREATE TABLE department (dept_name TEXT); CREATE TABLE course (course_id TEXT); CREATE TABLE student (ID TEXT); CREATE TABLE instructor (name TEXT, ID TEXT, dept_name TEXT);"
      },
      {
        "question": "What are the instructors name for each of those ids the are advising more than one student?",
        "query": "SELECT t1.name FROM instructor AS t1 JOIN advisor AS t2 ON t1.id = t2.i_id GROUP BY t2.i_id HAVING COUNT ( * ) > 1",
        "schema": "CREATE TABLE department (dept_name TEXT); CREATE TABLE instructor (name TEXT, ID TEXT, dept_name TEXT); CREATE TABLE teaches (ID TEXT); CREATE TABLE student (ID TEXT); CREATE TABLE course (course_id TEXT); CREATE TABLE advisor (i_ID TEXT, s_ID TEXT);"
      }
    ],
    [
      {
        "question": "What are the names of all students who took any course in the fall semester of the year 2003?",
        "query": "SELECT name FROM student WHERE id IN ( SELECT id FROM takes WHERE semester = 'Fall' AND YEAR = 2003 )",
        "schema": "CREATE TABLE takes (year NUMBER, ID TEXT, course_id TEXT, semester TEXT); CREATE TABLE student (name TEXT, ID TEXT, tot_cred NUMBER); CREATE TABLE course (course_id TEXT); CREATE TABLE section (semester TEXT, year NUMBER, course_id TEXT);"
      },
      {
        "question": "What about in the spring semester?",
        "query": "SELECT name FROM student WHERE id IN ( SELECT id FROM takes WHERE semester = 'Spring' AND YEAR = 2003 )",
        "schema": "CREATE TABLE student (name TEXT, ID TEXT, dept_name TEXT, tot_cred NUMBER); CREATE TABLE course (course_id TEXT); CREATE TABLE section (semester TEXT, year NUMBER, course_id TEXT); CREATE TABLE takes (ID TEXT, course_id TEXT, semester TEXT, year NUMBER);"
      },
      {
        "question": "What about in 2004?",
        "query": "SELECT name FROM student WHERE id IN ( SELECT id FROM takes WHERE semester = 'Spring' AND YEAR = 2004 )",
        "schema": "CREATE TABLE takes (year NUMBER, ID TEXT, semester TEXT, course_id TEXT); CREATE TABLE section (semester TEXT, year NUMBER, course_id TEXT); CREATE TABLE course (course_id TEXT); CREATE TABLE student (dept_name TEXT, name TEXT, ID TEXT, tot_cred NUMBER);"
      },
      {
        "question": "What course id were offered in that semester?",
        "query": "SELECT DISTINCT id FROM takes WHERE semester = 'Spring' AND YEAR = 2004",
        "schema": "CREATE TABLE course (dept_name TEXT, title TEXT, course_id TEXT); CREATE TABLE section (semester TEXT, course_id TEXT, year NUMBER); CREATE TABLE takes (year NUMBER, semester TEXT, course_id TEXT, ID TEXT); CREATE TABLE student (name TEXT, dept_name TEXT, tot_cred NUMBER, ID TEXT);"
      },
      {
        "question": "What's the grade of 10838?",
        "query": "SELECT grade FROM takes WHERE semester = 'Spring' AND YEAR = 2004 AND id = 10838",
        "schema": "CREATE TABLE takes (year NUMBER, ID TEXT, semester TEXT, course_id TEXT, grade TEXT); CREATE TABLE section (course_id TEXT, year NUMBER, semester TEXT); CREATE TABLE student (name TEXT, tot_cred NUMBER, ID TEXT, dept_name TEXT); CREATE TABLE course (dept_name TEXT, course_id TEXT, credits NUMBER, title TEXT);"
      }
    ],
    [
      {
        "question": "How many instructors are in the statistics department?",
        "query": "SELECT COUNT ( * ) FROM instructor WHERE dept_name = 'Statistics'",
        "schema": "CREATE TABLE course (dept_name TEXT, course_id TEXT); CREATE TABLE advisor (i_ID TEXT, s_ID TEXT); CREATE TABLE teaches (ID TEXT); CREATE TABLE department (dept_name TEXT); CREATE TABLE student (ID TEXT); CREATE TABLE instructor (name TEXT, dept_name TEXT, ID TEXT);"
      },
      {
        "question": "What is the lowest salary of the instructors in the statistics department?",
        "query": "SELECT MIN ( salary ) FROM instructor WHERE dept_name = 'Statistics'",
        "schema": "CREATE TABLE advisor (i_ID TEXT, s_ID TEXT); CREATE TABLE instructor (ID TEXT, name TEXT, dept_name TEXT, salary NUMBER); CREATE TABLE teaches (ID TEXT); CREATE TABLE course (course_id TEXT, dept_name TEXT); CREATE TABLE student (ID TEXT); CREATE TABLE department (dept_name TEXT);"
      },
      {
        "question": "And what is the name of the instructor that earns that salary?",
        "query": "SELECT name FROM instructor WHERE dept_name = 'Statistics' ORDER BY salary ASC LIMIT 1",
        "schema": "CREATE TABLE advisor (i_ID TEXT, s_ID TEXT); CREATE TABLE teaches (ID TEXT); CREATE TABLE student (ID TEXT); CREATE TABLE course (dept_name TEXT, course_id TEXT); CREATE TABLE instructor (dept_name TEXT, ID TEXT, name TEXT, salary NUMBER); CREATE TABLE department (dept_name TEXT);"
      }
    ],
    [
      {
        "question": "How many courses do not have a prerequisite?",
        "query": "SELECT COUNT ( * ) FROM course WHERE course_id NOT IN ( SELECT course_id FROM prereq )",
        "schema": "CREATE TABLE department (dept_name TEXT); CREATE TABLE teaches (ID TEXT); CREATE TABLE student (tot_cred NUMBER, ID TEXT); CREATE TABLE instructor (ID TEXT); CREATE TABLE prereq (course_id TEXT, prereq_id TEXT); CREATE TABLE takes (course_id TEXT); CREATE TABLE section (course_id TEXT); CREATE TABLE course (title TEXT, dept_name TEXT, course_id TEXT);"
      },
      {
        "question": "Which of those courses has the most number of credits?",
        "query": "SELECT * FROM course WHERE course_id NOT IN ( SELECT course_id FROM prereq ) ORDER BY credits DESC LIMIT 1",
        "schema": "CREATE TABLE teaches (ID TEXT); CREATE TABLE instructor (ID TEXT); CREATE TABLE student (ID TEXT, tot_cred NUMBER); CREATE TABLE takes (course_id TEXT); CREATE TABLE department (dept_name TEXT); CREATE TABLE course (course_id TEXT, title TEXT, credits NUMBER, dept_name TEXT); CREATE TABLE section (course_id TEXT); CREATE TABLE prereq (course_id TEXT, prereq_id TEXT);"
      },
      {
        "question": "How many courses are there?",
        "query": "SELECT COUNT ( * ) FROM course",
        "schema": "CREATE TABLE prereq (course_id TEXT, prereq_id TEXT); CREATE TABLE department (dept_name TEXT); CREATE TABLE takes (course_id TEXT); CREATE TABLE course (credits NUMBER, title TEXT, dept_name TEXT, course_id TEXT); CREATE TABLE section (course_id TEXT); CREATE TABLE teaches (ID TEXT); CREATE TABLE instructor (ID TEXT); CREATE TABLE student (ID TEXT, tot_cred NUMBER);"
      }
    ],
    [
      {
        "question": "What is the course id for the International Finance course?",
        "query": "SELECT course_id FROM course WHERE title = 'International Finance'",
        "schema": "CREATE TABLE prereq (prereq_id TEXT, course_id TEXT); CREATE TABLE student (dept_name TEXT, ID TEXT, tot_cred NUMBER); CREATE TABLE department (dept_name TEXT); CREATE TABLE section (course_id TEXT); CREATE TABLE teaches (course_id TEXT); CREATE TABLE course (course_id TEXT, title TEXT, dept_name TEXT); CREATE TABLE instructor (dept_name TEXT, ID TEXT);"
      },
      {
        "question": "What is the course id for the prerequisite of that course?",
        "query": "SELECT course_id FROM course WHERE course_id IN ( SELECT t1.prereq_id FROM prereq AS t1 JOIN course AS t2 ON t1.course_id = t2.course_id WHERE t2.title = 'International Finance' )",
        "schema": "CREATE TABLE section (course_id TEXT); CREATE TABLE prereq (course_id TEXT, prereq_id TEXT); CREATE TABLE teaches (course_id TEXT); CREATE TABLE course (dept_name TEXT, course_id TEXT, title TEXT); CREATE TABLE instructor (dept_name TEXT, ID TEXT); CREATE TABLE student (tot_cred NUMBER, ID TEXT, dept_name TEXT); CREATE TABLE department (dept_name TEXT);"
      },
      {
        "question": "What is the title of that course?",
        "query": "SELECT title FROM course WHERE course_id IN ( SELECT t1.prereq_id FROM prereq AS t1 JOIN course AS t2 ON t1.course_id = t2.course_id WHERE t2.title = 'International Finance' )",
        "schema": "CREATE TABLE student (tot_cred NUMBER, dept_name TEXT, ID TEXT); CREATE TABLE department (dept_name TEXT); CREATE TABLE section (course_id TEXT); CREATE TABLE instructor (ID TEXT, dept_name TEXT); CREATE TABLE course (dept_name TEXT, title TEXT, course_id TEXT); CREATE TABLE prereq (prereq_id TEXT, course_id TEXT); CREATE TABLE teaches (course_id TEXT);"
      }
    ],
    [
      {
        "question": "How many buildings are in the list?",
        "query": "SELECT COUNT ( DISTINCT building ) FROM classroom",
        "schema": "CREATE TABLE department (building TEXT, dept_name TEXT, budget NUMBER); CREATE TABLE classroom (room_number TEXT, building TEXT); CREATE TABLE section (building TEXT, room_number TEXT); CREATE TABLE student (dept_name TEXT);"
      },
      {
        "question": "What are the buildings that have more than 50 capacity?",
        "query": "SELECT building FROM classroom WHERE capacity > 50 GROUP BY building",
        "schema": "CREATE TABLE department (dept_name TEXT, budget NUMBER, building TEXT); CREATE TABLE classroom (capacity NUMBER, building TEXT, room_number TEXT); CREATE TABLE student (dept_name TEXT); CREATE TABLE section (room_number TEXT, building TEXT);"
      },
      {
        "question": "Can you rind me the number of rooms with more than 50 capacity for those 20 buildings?",
        "query": "SELECT COUNT ( room_number ) FROM classroom WHERE capacity > 50",
        "schema": "CREATE TABLE classroom (capacity NUMBER, room_number TEXT, building TEXT); CREATE TABLE department (budget NUMBER, dept_name TEXT, building TEXT); CREATE TABLE student (dept_name TEXT); CREATE TABLE section (building TEXT, room_number TEXT);"
      },
      {
        "question": "Can you show me the number of rooms with capacity greater than 50 for each building?",
        "query": "SELECT building, COUNT ( room_number ) FROM classroom WHERE capacity > 50 GROUP BY building",
        "schema": "CREATE TABLE department (building TEXT, budget NUMBER, dept_name TEXT); CREATE TABLE section (building TEXT, room_number TEXT); CREATE TABLE student (dept_name TEXT); CREATE TABLE classroom (capacity NUMBER, building TEXT, room_number TEXT);"
      }
    ],
    [
      {
        "question": "Which department has the highest amount of students?",
        "query": "SELECT dept_name FROM student GROUP BY dept_name ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE takes (ID TEXT); CREATE TABLE instructor (dept_name TEXT, ID TEXT); CREATE TABLE course (dept_name TEXT, course_id TEXT); CREATE TABLE department (dept_name TEXT, budget NUMBER); CREATE TABLE classroom (room_number TEXT); CREATE TABLE student (tot_cred NUMBER, dept_name TEXT, ID TEXT); CREATE TABLE section (sec_id TEXT, course_id TEXT); CREATE TABLE advisor (s_ID TEXT);"
      },
      {
        "question": "Do you know the total credits for the Civil Eng. Department? | Did you want the sum of total credits across all students in the Civil Eng. department? | Sure.",
        "query": "SELECT SUM ( tot_cred ) FROM student WHERE dept_name = \"Civil Eng.\"",
        "schema": "CREATE TABLE department (budget NUMBER, dept_name TEXT); CREATE TABLE student (dept_name TEXT, tot_cred NUMBER, name TEXT, ID TEXT); CREATE TABLE advisor (s_ID TEXT); CREATE TABLE instructor (ID TEXT, dept_name TEXT); CREATE TABLE classroom (room_number TEXT); CREATE TABLE takes (ID TEXT); CREATE TABLE course (dept_name TEXT, credits NUMBER, course_id TEXT); CREATE TABLE teaches (ID TEXT); CREATE TABLE section (sec_id TEXT, course_id TEXT);"
      },
      {
        "question": "Ok, do you know the ID number for the department? | Did you want the ID numbers for the students in the Civil Eng. department? | please",
        "query": "SELECT id FROM student WHERE dept_name = \"Civil Eng.\"",
        "schema": "CREATE TABLE teaches (ID TEXT); CREATE TABLE section (course_id TEXT, sec_id TEXT); CREATE TABLE department (budget NUMBER, dept_name TEXT); CREATE TABLE classroom (room_number TEXT); CREATE TABLE student (name TEXT, ID TEXT, tot_cred NUMBER, dept_name TEXT); CREATE TABLE course (dept_name TEXT, course_id TEXT, credits NUMBER); CREATE TABLE advisor (s_ID TEXT); CREATE TABLE takes (ID TEXT); CREATE TABLE instructor (ID TEXT, dept_name TEXT);"
      }
    ],
    [
      {
        "question": "List all instructors who taught a class in Fall 2009 | Did you  mean the  instructor IDs who taught a class in Fall 2009 | yes",
        "query": "SELECT id FROM teaches WHERE semester = 'Fall' AND YEAR = 2009",
        "schema": "CREATE TABLE instructor (dept_name TEXT, name TEXT, ID TEXT); CREATE TABLE teaches (ID TEXT, semester TEXT, course_id TEXT, year NUMBER); CREATE TABLE section (year NUMBER, semester TEXT); CREATE TABLE advisor (i_ID TEXT, s_ID TEXT);"
      },
      {
        "question": "Remove all instructor IDs who did not teach in Spring 2010 from the list. | Did  you  mean  retain  the instructor IDs who  both teach in Spring 2010   and  in Fall 2009 | Retain the instructor IDs who did not teach in Spring 2010 but did teach in Fall 2009",
        "query": "SELECT id FROM teaches WHERE semester = 'Fall' AND YEAR = 2009 EXCEPT SELECT id FROM teaches WHERE semester = 'Spring' AND YEAR = 2010",
        "schema": "CREATE TABLE section (semester TEXT, year NUMBER); CREATE TABLE advisor (i_ID TEXT, s_ID TEXT); CREATE TABLE instructor (name TEXT, ID TEXT, dept_name TEXT); CREATE TABLE teaches (semester TEXT, course_id TEXT, ID TEXT, year NUMBER);"
      }
    ],
    [
      {
        "question": "What are the names of the different departments?",
        "query": "SELECT DISTINCT dept_name FROM course",
        "schema": "CREATE TABLE section (course_id TEXT); CREATE TABLE department (dept_name TEXT); CREATE TABLE student (ID TEXT, name TEXT, dept_name TEXT, tot_cred NUMBER); CREATE TABLE instructor (name TEXT, dept_name TEXT, ID TEXT); CREATE TABLE course (course_id TEXT, dept_name TEXT);"
      },
      {
        "question": "What are the names of all Statistics courses ?",
        "query": "SELECT title FROM course WHERE dept_name = \"Statistics\"",
        "schema": "CREATE TABLE student (ID TEXT, tot_cred NUMBER, name TEXT, dept_name TEXT); CREATE TABLE section (course_id TEXT); CREATE TABLE department (dept_name TEXT); CREATE TABLE course (title TEXT, course_id TEXT, dept_name TEXT); CREATE TABLE instructor (ID TEXT, name TEXT, dept_name TEXT);"
      }
    ],
    [
      {
        "question": "what is the highest salary?",
        "query": "SELECT MAX ( salary ) FROM instructor",
        "schema": "CREATE TABLE student (tot_cred NUMBER, ID TEXT); CREATE TABLE instructor (dept_name TEXT, name TEXT, salary NUMBER, ID TEXT);"
      },
      {
        "question": "what is the salary of instructor in math department?",
        "query": "SELECT t2.salary FROM advisor AS t1 JOIN instructor AS t2 ON t1.i_id = t2.id JOIN student AS t3 ON t1.s_id = t3.id WHERE t3.dept_name = 'Math'",
        "schema": "CREATE TABLE teaches (ID TEXT); CREATE TABLE instructor (salary NUMBER, dept_name TEXT, name TEXT, ID TEXT); CREATE TABLE student (tot_cred NUMBER, ID TEXT, dept_name TEXT); CREATE TABLE advisor (s_ID TEXT, i_ID TEXT); CREATE TABLE department (dept_name TEXT);"
      },
      {
        "question": "what is McKinnon salary?",
        "query": "SELECT salary FROM instructor WHERE name = 'McKinnon'",
        "schema": "CREATE TABLE department (dept_name TEXT); CREATE TABLE advisor (i_ID TEXT, s_ID TEXT); CREATE TABLE instructor (ID TEXT, salary NUMBER, dept_name TEXT, name TEXT); CREATE TABLE teaches (ID TEXT); CREATE TABLE student (ID TEXT, name TEXT, dept_name TEXT, tot_cred NUMBER);"
      },
      {
        "question": "what department is McKinnon?",
        "query": "SELECT dept_name FROM instructor WHERE name = 'McKinnon'",
        "schema": "CREATE TABLE department (dept_name TEXT); CREATE TABLE advisor (i_ID TEXT, s_ID TEXT); CREATE TABLE teaches (ID TEXT); CREATE TABLE student (dept_name TEXT, name TEXT, tot_cred NUMBER, ID TEXT); CREATE TABLE instructor (name TEXT, ID TEXT, salary NUMBER, dept_name TEXT);"
      }
    ],
    [
      {
        "question": "I'd like to know about the prerequisites for courses",
        "query": "SELECT course_id, prereq_id FROM prereq",
        "schema": "CREATE TABLE department (dept_name TEXT); CREATE TABLE student (tot_cred NUMBER, ID TEXT); CREATE TABLE prereq (prereq_id TEXT, course_id TEXT); CREATE TABLE section (course_id TEXT); CREATE TABLE course (dept_name TEXT, course_id TEXT, title TEXT); CREATE TABLE instructor (ID TEXT); CREATE TABLE teaches (ID TEXT, course_id TEXT); CREATE TABLE advisor (s_ID TEXT); CREATE TABLE takes (course_id TEXT);"
      },
      {
        "question": "What courses have more than one prerequisite?",
        "query": "SELECT course_id FROM prereq GROUP BY course_id HAVING COUNT ( * ) > 1",
        "schema": "CREATE TABLE section (course_id TEXT); CREATE TABLE takes (course_id TEXT); CREATE TABLE advisor (s_ID TEXT); CREATE TABLE course (title TEXT, dept_name TEXT, course_id TEXT); CREATE TABLE prereq (prereq_id TEXT, course_id TEXT); CREATE TABLE student (ID TEXT, tot_cred NUMBER); CREATE TABLE teaches (course_id TEXT, ID TEXT); CREATE TABLE department (dept_name TEXT); CREATE TABLE instructor (ID TEXT);"
      },
      {
        "question": "What are the title, credit and department of these courses?",
        "query": "SELECT t1.title , t1.credits , t1.dept_name FROM course AS t1 JOIN prereq AS t2 ON t1.course_id = t2.course_id GROUP BY t2.course_id HAVING COUNT ( * ) > 1",
        "schema": "CREATE TABLE prereq (course_id TEXT, prereq_id TEXT); CREATE TABLE instructor (ID TEXT); CREATE TABLE advisor (s_ID TEXT); CREATE TABLE course (course_id TEXT, dept_name TEXT, title TEXT, credits NUMBER); CREATE TABLE student (tot_cred NUMBER, ID TEXT); CREATE TABLE teaches (ID TEXT, course_id TEXT); CREATE TABLE takes (course_id TEXT); CREATE TABLE department (dept_name TEXT); CREATE TABLE section (course_id TEXT);"
      },
      {
        "question": "how many prerequisite credits are needed? | Which course? | Game programming",
        "query": "SELECT SUM ( t3.credits ) FROM course AS t1 JOIN prereq AS t2 ON t1.course_id = t2.course_id JOIN course AS t3 ON t3.course_id = t2.prereq_id WHERE t1.title = \"Game Programming\"",
        "schema": "CREATE TABLE takes (course_id TEXT); CREATE TABLE student (ID TEXT, tot_cred NUMBER); CREATE TABLE instructor (ID TEXT); CREATE TABLE section (course_id TEXT); CREATE TABLE department (dept_name TEXT); CREATE TABLE prereq (prereq_id TEXT, course_id TEXT); CREATE TABLE teaches (ID TEXT, course_id TEXT); CREATE TABLE advisor (s_ID TEXT); CREATE TABLE course (credits NUMBER, course_id TEXT, dept_name TEXT, title TEXT);"
      }
    ],
    [
      {
        "question": "How many courses are there?",
        "query": "SELECT COUNT ( * ) FROM course",
        "schema": "CREATE TABLE instructor (ID TEXT); CREATE TABLE department (dept_name TEXT); CREATE TABLE student (tot_cred NUMBER, ID TEXT); CREATE TABLE course (course_id TEXT, title TEXT, dept_name TEXT); CREATE TABLE takes (ID TEXT, course_id TEXT); CREATE TABLE section (semester TEXT, sec_id TEXT, course_id TEXT); CREATE TABLE prereq (course_id TEXT, prereq_id TEXT); CREATE TABLE teaches (ID TEXT, course_id TEXT);"
      },
      {
        "question": "How many courses are in Mech. eng?",
        "query": "SELECT COUNT ( * ) FROM course WHERE dept_name = 'Mech. Eng.'",
        "schema": "CREATE TABLE student (tot_cred NUMBER, ID TEXT); CREATE TABLE prereq (prereq_id TEXT, course_id TEXT); CREATE TABLE takes (course_id TEXT, ID TEXT); CREATE TABLE section (sec_id TEXT, building TEXT, course_id TEXT, semester TEXT); CREATE TABLE course (dept_name TEXT, title TEXT, course_id TEXT); CREATE TABLE teaches (course_id TEXT, ID TEXT); CREATE TABLE instructor (ID TEXT); CREATE TABLE department (dept_name TEXT);"
      },
      {
        "question": "Out of those 12 how many of them are more than 3 credits?",
        "query": "SELECT COUNT ( * ) FROM course WHERE dept_name = 'Mech. Eng.' AND credits > 3",
        "schema": "CREATE TABLE prereq (course_id TEXT, prereq_id TEXT); CREATE TABLE instructor (dept_name TEXT, ID TEXT); CREATE TABLE section (sec_id TEXT, semester TEXT, building TEXT, course_id TEXT); CREATE TABLE department (dept_name TEXT); CREATE TABLE teaches (course_id TEXT, ID TEXT); CREATE TABLE takes (course_id TEXT, ID TEXT); CREATE TABLE course (title TEXT, dept_name TEXT, course_id TEXT, credits NUMBER); CREATE TABLE student (ID TEXT, tot_cred NUMBER, dept_name TEXT);"
      },
      {
        "question": "Are any of these courses offered by more than one department? | Did you mean the same course titles? | Yes are there any courses \"same title\" in the list that are offered by more than one department?",
        "query": "SELECT DISTINCT ( dept_name ) FROM course WHERE title IN ( SELECT title FROM course WHERE dept_name = 'Mech. Eng.' AND credits > 3 ) AND dept_name ! = 'Mech. Eng.'",
        "schema": "CREATE TABLE instructor (ID TEXT, dept_name TEXT); CREATE TABLE teaches (ID TEXT, course_id TEXT); CREATE TABLE student (ID TEXT, tot_cred NUMBER, dept_name TEXT); CREATE TABLE course (dept_name TEXT, course_id TEXT, title TEXT, credits NUMBER); CREATE TABLE department (dept_name TEXT); CREATE TABLE prereq (prereq_id TEXT, course_id TEXT); CREATE TABLE takes (course_id TEXT, ID TEXT); CREATE TABLE section (building TEXT, course_id TEXT, semester TEXT, sec_id TEXT);"
      },
      {
        "question": "How many of those courses are there?",
        "query": "SELECT COUNT ( * ) FROM course WHERE title IN ( SELECT title FROM course WHERE dept_name = 'Mech. Eng.' AND credits > 3 ) AND dept_name ! = 'Mech. Eng.'",
        "schema": "CREATE TABLE instructor (dept_name TEXT, ID TEXT); CREATE TABLE course (title TEXT, course_id TEXT, dept_name TEXT, credits NUMBER); CREATE TABLE prereq (prereq_id TEXT, course_id TEXT); CREATE TABLE student (ID TEXT, tot_cred NUMBER, dept_name TEXT); CREATE TABLE teaches (course_id TEXT, ID TEXT); CREATE TABLE section (semester TEXT, course_id TEXT, building TEXT, sec_id TEXT); CREATE TABLE takes (course_id TEXT, ID TEXT); CREATE TABLE department (dept_name TEXT);"
      }
    ],
    [
      {
        "question": "Hello!  Can you provide me with a list of Instructor IDs for those who did not teach any courses?",
        "query": "SELECT id FROM instructor WHERE id NOT IN ( SELECT id FROM teaches )",
        "schema": "CREATE TABLE student (ID TEXT); CREATE TABLE section (course_id TEXT); CREATE TABLE course (course_id TEXT); CREATE TABLE instructor (ID TEXT, dept_name TEXT, name TEXT); CREATE TABLE teaches (course_id TEXT, ID TEXT); CREATE TABLE advisor (i_ID TEXT, s_ID TEXT);"
      },
      {
        "question": "Thank you!  Can you update that list with the professors' names?",
        "query": "SELECT id, name FROM instructor WHERE id NOT IN ( SELECT id FROM teaches )",
        "schema": "CREATE TABLE student (ID TEXT); CREATE TABLE section (course_id TEXT); CREATE TABLE teaches (ID TEXT, course_id TEXT); CREATE TABLE instructor (name TEXT, ID TEXT, dept_name TEXT); CREATE TABLE advisor (s_ID TEXT, i_ID TEXT); CREATE TABLE course (course_id TEXT);"
      },
      {
        "question": "Thank you!  Can you update that list to include the instructor names and which departments they are in?",
        "query": "SELECT name, dept_name FROM instructor WHERE id NOT IN ( SELECT id FROM teaches )",
        "schema": "CREATE TABLE instructor (ID TEXT, name TEXT, dept_name TEXT); CREATE TABLE student (ID TEXT); CREATE TABLE advisor (i_ID TEXT, s_ID TEXT); CREATE TABLE course (course_id TEXT, dept_name TEXT); CREATE TABLE section (course_id TEXT); CREATE TABLE department (dept_name TEXT); CREATE TABLE teaches (course_id TEXT, ID TEXT);"
      }
    ],
    [
      {
        "question": "in what department is Rumat? | Do you want the name of the department? | Yes!",
        "query": "SELECT dept_name FROM student WHERE name = \"Rumat\"",
        "schema": "CREATE TABLE section (course_id TEXT); CREATE TABLE course (title TEXT, dept_name TEXT, course_id TEXT); CREATE TABLE teaches (ID TEXT); CREATE TABLE student (name TEXT, tot_cred NUMBER, dept_name TEXT, ID TEXT); CREATE TABLE instructor (dept_name TEXT, name TEXT, ID TEXT); CREATE TABLE department (dept_name TEXT);"
      }
    ],
    [
      {
        "question": "Show the average salary of all departments. | Would you like to the know the average  salary grouped over each department name? | Yes show average salary grouped over each department name.",
        "query": "SELECT dept_name, AVG ( salary ) FROM instructor GROUP BY dept_name",
        "schema": "CREATE TABLE department (dept_name TEXT); CREATE TABLE student (dept_name TEXT); CREATE TABLE instructor (dept_name TEXT, salary NUMBER);"
      },
      {
        "question": "Show the department with the lowest average salary.",
        "query": "SELECT dept_name FROM instructor GROUP BY dept_name ORDER BY AVG ( salary ) ASC LIMIT 1",
        "schema": "CREATE TABLE teaches (ID TEXT); CREATE TABLE instructor (ID TEXT, name TEXT, dept_name TEXT, salary NUMBER); CREATE TABLE department (dept_name TEXT); CREATE TABLE student (dept_name TEXT); CREATE TABLE advisor (i_ID TEXT);"
      }
    ],
    [
      {
        "question": "Hi, could you please let me know the name of instructors in Comp. Sci. department whose salary is higher than 80000?",
        "query": "SELECT name FROM instructor WHERE dept_name = 'Comp. Sci.' AND salary > 80000",
        "schema": "CREATE TABLE teaches (ID TEXT); CREATE TABLE instructor (name TEXT, dept_name TEXT, ID TEXT, salary NUMBER); CREATE TABLE course (dept_name TEXT); CREATE TABLE advisor (i_ID TEXT, s_ID TEXT); CREATE TABLE department (dept_name TEXT); CREATE TABLE student (ID TEXT);"
      },
      {
        "question": "Oh only two of them. Thank you :) Then could you please let me  know the name of the instructor whose salary is the highest in the table?",
        "query": "SELECT name FROM instructor ORDER BY salary DESC LIMIT 1",
        "schema": "CREATE TABLE instructor (dept_name TEXT, name TEXT, salary NUMBER, ID TEXT); CREATE TABLE teaches (ID TEXT); CREATE TABLE student (ID TEXT); CREATE TABLE department (dept_name TEXT); CREATE TABLE advisor (s_ID TEXT, i_ID TEXT); CREATE TABLE course (dept_name TEXT);"
      },
      {
        "question": "That was quick, thank you again. Then could you please tell me the department name of instructor Wieland?",
        "query": "SELECT dept_name FROM instructor WHERE name = \"Wieland\"",
        "schema": "CREATE TABLE student (ID TEXT); CREATE TABLE course (dept_name TEXT); CREATE TABLE department (dept_name TEXT); CREATE TABLE instructor (salary NUMBER, name TEXT, dept_name TEXT, ID TEXT); CREATE TABLE advisor (i_ID TEXT, s_ID TEXT); CREATE TABLE teaches (ID TEXT);"
      },
      {
        "question": "Thank you :) If it is not too bothersome, could you please let me know the average salary of the instructors in Pol. Sci.?",
        "query": "SELECT AVG ( salary ) FROM instructor WHERE dept_name = \"Pol. Sci.\"",
        "schema": "CREATE TABLE course (dept_name TEXT); CREATE TABLE department (dept_name TEXT); CREATE TABLE instructor (ID TEXT, dept_name TEXT, name TEXT, salary NUMBER); CREATE TABLE advisor (s_ID TEXT, i_ID TEXT); CREATE TABLE teaches (ID TEXT); CREATE TABLE student (ID TEXT);"
      },
      {
        "question": "Thank you, then could you please tell me what would be the average salary of instructors for Cybernetics?",
        "query": "SELECT AVG ( salary ) FROM instructor WHERE dept_name = \"Cybernetics\"",
        "schema": "CREATE TABLE course (dept_name TEXT); CREATE TABLE teaches (ID TEXT); CREATE TABLE department (dept_name TEXT); CREATE TABLE advisor (i_ID TEXT, s_ID TEXT); CREATE TABLE instructor (name TEXT, dept_name TEXT, ID TEXT, salary NUMBER); CREATE TABLE student (ID TEXT);"
      },
      {
        "question": "Thank you :) This will be my last question, could you please let me know the name and ID of the instructor whose salary is the lowest?",
        "query": "SELECT name, id FROM instructor ORDER BY salary ASC LIMIT 1",
        "schema": "CREATE TABLE advisor (i_ID TEXT, s_ID TEXT); CREATE TABLE department (dept_name TEXT); CREATE TABLE course (dept_name TEXT); CREATE TABLE instructor (name TEXT, dept_name TEXT, ID TEXT, salary NUMBER); CREATE TABLE student (ID TEXT); CREATE TABLE teaches (ID TEXT);"
      }
    ],
    [
      {
        "question": "Hi, show me the instructors",
        "query": "SELECT name FROM instructor",
        "schema": "CREATE TABLE course (course_id TEXT, dept_name TEXT); CREATE TABLE teaches (ID TEXT); CREATE TABLE instructor (name TEXT, ID TEXT, dept_name TEXT); CREATE TABLE advisor (i_ID TEXT, s_ID TEXT); CREATE TABLE department (dept_name TEXT); CREATE TABLE student (ID TEXT);"
      },
      {
        "question": "Nice. What is their average salary?",
        "query": "SELECT AVG ( salary ) FROM instructor",
        "schema": "CREATE TABLE instructor (salary NUMBER, ID TEXT, name TEXT, dept_name TEXT); CREATE TABLE teaches (ID TEXT); CREATE TABLE course (dept_name TEXT, course_id TEXT); CREATE TABLE department (dept_name TEXT); CREATE TABLE advisor (s_ID TEXT, i_ID TEXT); CREATE TABLE student (ID TEXT);"
      },
      {
        "question": "Who earns the highest salary?",
        "query": "SELECT name FROM instructor ORDER BY salary DESC LIMIT 1",
        "schema": "CREATE TABLE instructor (ID TEXT, dept_name TEXT, name TEXT, salary NUMBER); CREATE TABLE student (ID TEXT); CREATE TABLE advisor (s_ID TEXT, i_ID TEXT); CREATE TABLE department (dept_name TEXT); CREATE TABLE teaches (ID TEXT); CREATE TABLE course (course_id TEXT, dept_name TEXT);"
      }
    ],
    [
      {
        "question": "Find the title of course that is provided by Statistics but not Psychology departments.",
        "query": "SELECT title FROM course WHERE dept_name = 'Statistics' EXCEPT SELECT title FROM course WHERE dept_name = 'Psychology'",
        "schema": "CREATE TABLE course (title TEXT, course_id TEXT, dept_name TEXT); CREATE TABLE student (dept_name TEXT); CREATE TABLE section (course_id TEXT); CREATE TABLE department (dept_name TEXT);"
      },
      {
        "question": "How many credits is Care and Feeding of Cats?",
        "query": "SELECT credits FROM course WHERE title = 'Care and Feeding of Cats'",
        "schema": "CREATE TABLE department (dept_name TEXT); CREATE TABLE section (course_id TEXT); CREATE TABLE course (credits NUMBER, course_id TEXT, title TEXT, dept_name TEXT); CREATE TABLE student (dept_name TEXT);"
      },
      {
        "question": "What is the course id of that?",
        "query": "SELECT course_id FROM course WHERE title = 'Care and Feeding of Cats'",
        "schema": "CREATE TABLE course (credits NUMBER, course_id TEXT, dept_name TEXT, title TEXT); CREATE TABLE section (course_id TEXT); CREATE TABLE student (dept_name TEXT); CREATE TABLE department (dept_name TEXT);"
      }
    ],
    [
      {
        "question": "Find the department name of the instructor whose name contains 'Soisalon'",
        "query": "SELECT dept_name FROM instructor WHERE name LIKE '%Soisalon%'",
        "schema": "CREATE TABLE teaches (ID TEXT); CREATE TABLE department (dept_name TEXT); CREATE TABLE advisor (i_ID TEXT, s_ID TEXT); CREATE TABLE instructor (ID TEXT, dept_name TEXT, name TEXT); CREATE TABLE course (course_id TEXT, dept_name TEXT); CREATE TABLE student (ID TEXT, dept_name TEXT);"
      },
      {
        "question": "Sorry, what is the id number of the instructor for psychology?",
        "query": "SELECT id FROM instructor WHERE dept_name = \"Psychology\"",
        "schema": "CREATE TABLE student (ID TEXT, dept_name TEXT); CREATE TABLE teaches (ID TEXT); CREATE TABLE instructor (dept_name TEXT, name TEXT, ID TEXT); CREATE TABLE course (dept_name TEXT, course_id TEXT); CREATE TABLE department (dept_name TEXT); CREATE TABLE advisor (i_ID TEXT, s_ID TEXT);"
      },
      {
        "question": "What is the salary of the instructor with id number 22591?",
        "query": "SELECT salary FROM instructor WHERE id = 22591",
        "schema": "CREATE TABLE instructor (dept_name TEXT, name TEXT, salary NUMBER, ID TEXT); CREATE TABLE department (dept_name TEXT); CREATE TABLE teaches (ID TEXT); CREATE TABLE advisor (s_ID TEXT, i_ID TEXT); CREATE TABLE student (ID TEXT, dept_name TEXT); CREATE TABLE course (dept_name TEXT, course_id TEXT);"
      },
      {
        "question": "And what about the salary of the instructor with id number 96895?",
        "query": "SELECT salary FROM instructor WHERE id = 96895",
        "schema": "CREATE TABLE teaches (ID TEXT); CREATE TABLE advisor (i_ID TEXT, s_ID TEXT); CREATE TABLE department (dept_name TEXT); CREATE TABLE course (dept_name TEXT, course_id TEXT); CREATE TABLE instructor (ID TEXT, name TEXT, salary NUMBER, dept_name TEXT); CREATE TABLE student (dept_name TEXT, ID TEXT);"
      }
    ],
    [
      {
        "question": "What are the total number of students in each department?",
        "query": "SELECT COUNT ( DISTINCT t2.id ) , t3.dept_name FROM department AS t1 JOIN student AS t2 ON t1.dept_name = t2.dept_name JOIN instructor AS t3 ON t1.dept_name = t3.dept_name GROUP BY t3.dept_name",
        "schema": "CREATE TABLE instructor (dept_name TEXT, ID TEXT); CREATE TABLE course (course_id TEXT, dept_name TEXT); CREATE TABLE student (tot_cred NUMBER, dept_name TEXT, ID TEXT, name TEXT); CREATE TABLE department (dept_name TEXT); CREATE TABLE section (course_id TEXT); CREATE TABLE classroom (building TEXT);"
      },
      {
        "question": "And, do you also have information on the total number of instructors in each department?",
        "query": "SELECT COUNT ( DISTINCT t2.id ) , COUNT ( DISTINCT t3.id ) , t3.dept_name FROM department AS t1 JOIN student AS t2 ON t1.dept_name = t2.dept_name JOIN instructor AS t3 ON t1.dept_name = t3.dept_name GROUP BY t3.dept_name",
        "schema": "CREATE TABLE student (dept_name TEXT, name TEXT, tot_cred NUMBER, ID TEXT); CREATE TABLE section (course_id TEXT); CREATE TABLE classroom (building TEXT); CREATE TABLE teaches (ID TEXT); CREATE TABLE course (course_id TEXT, dept_name TEXT); CREATE TABLE department (dept_name TEXT); CREATE TABLE advisor (s_ID TEXT, i_ID TEXT); CREATE TABLE instructor (dept_name TEXT, name TEXT, ID TEXT);"
      },
      {
        "question": "Do you also have a total enrollment? | What do you mean by enrollment? | Total number of students.",
        "query": "SELECT COUNT ( * ) FROM student",
        "schema": "CREATE TABLE department (dept_name TEXT); CREATE TABLE student (dept_name TEXT, name TEXT, tot_cred NUMBER, ID TEXT); CREATE TABLE classroom (building TEXT); CREATE TABLE instructor (name TEXT, ID TEXT, dept_name TEXT); CREATE TABLE section (course_id TEXT); CREATE TABLE teaches (ID TEXT); CREATE TABLE advisor (s_ID TEXT, i_ID TEXT); CREATE TABLE course (dept_name TEXT, course_id TEXT);"
      },
      {
        "question": "Do you know the name of the Astronomy instructor?",
        "query": "SELECT t2.name FROM department AS t1 JOIN instructor AS t2 ON t1.dept_name = t2.dept_name WHERE t1.dept_name = 'Astronomy'",
        "schema": "CREATE TABLE section (course_id TEXT); CREATE TABLE department (dept_name TEXT); CREATE TABLE student (dept_name TEXT, ID TEXT, name TEXT, tot_cred NUMBER); CREATE TABLE course (course_id TEXT, dept_name TEXT); CREATE TABLE classroom (building TEXT); CREATE TABLE teaches (ID TEXT); CREATE TABLE instructor (ID TEXT, dept_name TEXT, name TEXT); CREATE TABLE advisor (s_ID TEXT, i_ID TEXT);"
      },
      {
        "question": "Lastly, do you have his salary?",
        "query": "SELECT t2.name,t2.salary FROM department AS t1 JOIN instructor AS t2 ON t1.dept_name = t2.dept_name WHERE t1.dept_name = 'Astronomy'",
        "schema": "CREATE TABLE advisor (i_ID TEXT, s_ID TEXT); CREATE TABLE course (dept_name TEXT, course_id TEXT); CREATE TABLE classroom (building TEXT); CREATE TABLE instructor (name TEXT, ID TEXT, salary NUMBER, dept_name TEXT); CREATE TABLE student (ID TEXT, name TEXT, tot_cred NUMBER, dept_name TEXT); CREATE TABLE teaches (ID TEXT); CREATE TABLE section (course_id TEXT); CREATE TABLE department (dept_name TEXT);"
      }
    ],
    [
      {
        "question": "What are the names of all of the instructors who are advisors?",
        "query": "SELECT t2.name FROM advisor AS t1 JOIN instructor AS t2 ON t1.i_id = t2.id",
        "schema": "CREATE TABLE instructor (ID TEXT, name TEXT, dept_name TEXT); CREATE TABLE teaches (ID TEXT); CREATE TABLE student (ID TEXT); CREATE TABLE advisor (i_ID TEXT, s_ID TEXT);"
      },
      {
        "question": "Could you narrow it down to just the names of instructors who are advisors to students from the Math department?",
        "query": "SELECT t2.name FROM advisor AS t1 JOIN instructor AS t2 ON t1.i_id = t2.id JOIN student AS t3 ON t1.s_id = t3.id WHERE t3.dept_name = 'Math'",
        "schema": "CREATE TABLE instructor (ID TEXT, dept_name TEXT, name TEXT); CREATE TABLE student (ID TEXT, name TEXT, dept_name TEXT, tot_cred NUMBER); CREATE TABLE teaches (ID TEXT); CREATE TABLE department (dept_name TEXT); CREATE TABLE advisor (s_ID TEXT, i_ID TEXT);"
      },
      {
        "question": "What are all of their salaries?",
        "query": "SELECT t2.name, t2.salary FROM advisor AS t1 JOIN instructor AS t2 ON t1.i_id = t2.id JOIN student AS t3 ON t1.s_id = t3.id WHERE t3.dept_name = 'Math'",
        "schema": "CREATE TABLE student (tot_cred NUMBER, dept_name TEXT, ID TEXT, name TEXT); CREATE TABLE teaches (ID TEXT); CREATE TABLE instructor (name TEXT, salary NUMBER, dept_name TEXT, ID TEXT); CREATE TABLE department (dept_name TEXT); CREATE TABLE advisor (i_ID TEXT, s_ID TEXT);"
      },
      {
        "question": "What are the names and salaries of the instructors who are advisors to students from the History department?",
        "query": "SELECT t2.name , t2.salary FROM advisor AS t1 JOIN instructor AS t2 ON t1.i_id = t2.id JOIN student AS t3 ON t1.s_id = t3.id WHERE t3.dept_name = 'History'",
        "schema": "CREATE TABLE instructor (ID TEXT, name TEXT, salary NUMBER, dept_name TEXT); CREATE TABLE student (ID TEXT, tot_cred NUMBER, name TEXT, dept_name TEXT); CREATE TABLE teaches (ID TEXT); CREATE TABLE advisor (i_ID TEXT, s_ID TEXT); CREATE TABLE department (dept_name TEXT);"
      }
    ],
    [
      {
        "question": "Hello!  Can you show me a list of all course IDs?",
        "query": "SELECT course_id FROM takes",
        "schema": "CREATE TABLE course (course_id TEXT, title TEXT, dept_name TEXT); CREATE TABLE takes (ID TEXT, course_id TEXT); CREATE TABLE section (sec_id TEXT, course_id TEXT); CREATE TABLE instructor (ID TEXT); CREATE TABLE teaches (ID TEXT, course_id TEXT); CREATE TABLE prereq (prereq_id TEXT); CREATE TABLE department (dept_name TEXT); CREATE TABLE student (ID TEXT, tot_cred NUMBER, dept_name TEXT);"
      },
      {
        "question": "Wow that's a lot!  Can you update that list to show me the semester and year which have the fewest number of students taking any class?",
        "query": "SELECT semester , YEAR FROM takes GROUP BY semester , YEAR ORDER BY COUNT ( * ) LIMIT 1",
        "schema": "CREATE TABLE department (dept_name TEXT); CREATE TABLE course (title TEXT, dept_name TEXT, course_id TEXT); CREATE TABLE takes (semester TEXT, year NUMBER, course_id TEXT, ID TEXT); CREATE TABLE prereq (prereq_id TEXT); CREATE TABLE section (course_id TEXT, semester TEXT, sec_id TEXT, year NUMBER); CREATE TABLE instructor (ID TEXT); CREATE TABLE student (dept_name TEXT, tot_cred NUMBER, ID TEXT); CREATE TABLE teaches (ID TEXT, year NUMBER, course_id TEXT, semester TEXT);"
      },
      {
        "question": "Excellent!  Can you update this list to show many total classes were taken in Fall of 2008? | Do you mean how many total classes were taken in Fall of 2008? | Yes!  That is what I meant!  Sorry!  How many total classes were taken in Fall of 2008?",
        "query": "SELECT COUNT ( * ) FROM takes WHERE semester = 'Fall' AND YEAR = '2008'",
        "schema": "CREATE TABLE prereq (prereq_id TEXT); CREATE TABLE takes (course_id TEXT, ID TEXT, year NUMBER, semester TEXT); CREATE TABLE course (title TEXT, dept_name TEXT, course_id TEXT); CREATE TABLE teaches (year NUMBER, semester TEXT, course_id TEXT, ID TEXT); CREATE TABLE student (tot_cred NUMBER, dept_name TEXT, ID TEXT); CREATE TABLE department (dept_name TEXT); CREATE TABLE section (course_id TEXT, sec_id TEXT, year NUMBER, semester TEXT); CREATE TABLE instructor (ID TEXT);"
      }
    ],
    [
      {
        "question": "what is the budget for chandler?",
        "query": "SELECT budget FROM department WHERE building = \"Chandler\"",
        "schema": "CREATE TABLE student (ID TEXT, name TEXT); CREATE TABLE instructor (name TEXT, salary NUMBER, ID TEXT, dept_name TEXT); CREATE TABLE department (building TEXT, budget NUMBER, dept_name TEXT); CREATE TABLE teaches (ID TEXT); CREATE TABLE course (title TEXT, dept_name TEXT); CREATE TABLE advisor (s_ID TEXT, i_ID TEXT);"
      },
      {
        "question": "how many departments are in table?",
        "query": "SELECT COUNT ( * ) FROM department",
        "schema": "CREATE TABLE teaches (ID TEXT); CREATE TABLE section (building TEXT); CREATE TABLE student (ID TEXT, name TEXT); CREATE TABLE advisor (s_ID TEXT, i_ID TEXT); CREATE TABLE department (dept_name TEXT, budget NUMBER, building TEXT); CREATE TABLE instructor (dept_name TEXT, ID TEXT, salary NUMBER, name TEXT); CREATE TABLE course (title TEXT, dept_name TEXT); CREATE TABLE classroom (building TEXT);"
      },
      {
        "question": "how many buildings are available?",
        "query": "SELECT COUNT ( DISTINCT building ) FROM department",
        "schema": "CREATE TABLE instructor (name TEXT, salary NUMBER, ID TEXT, dept_name TEXT); CREATE TABLE teaches (ID TEXT); CREATE TABLE student (name TEXT, ID TEXT); CREATE TABLE classroom (building TEXT); CREATE TABLE advisor (i_ID TEXT, s_ID TEXT); CREATE TABLE section (building TEXT); CREATE TABLE department (budget NUMBER, building TEXT, dept_name TEXT); CREATE TABLE course (dept_name TEXT, title TEXT);"
      },
      {
        "question": "which department is managed by taylor?",
        "query": "SELECT dept_name FROM department WHERE building = \"Taylor\"",
        "schema": "CREATE TABLE classroom (building TEXT); CREATE TABLE advisor (i_ID TEXT, s_ID TEXT); CREATE TABLE section (building TEXT); CREATE TABLE teaches (ID TEXT); CREATE TABLE department (dept_name TEXT, building TEXT, budget NUMBER); CREATE TABLE course (dept_name TEXT, title TEXT); CREATE TABLE student (ID TEXT, name TEXT); CREATE TABLE instructor (dept_name TEXT, name TEXT, ID TEXT, salary NUMBER);"
      },
      {
        "question": "how much budget is taking biology department?",
        "query": "SELECT budget FROM department WHERE dept_name = \"Biology\"",
        "schema": "CREATE TABLE teaches (ID TEXT); CREATE TABLE advisor (i_ID TEXT, s_ID TEXT); CREATE TABLE course (title TEXT, dept_name TEXT); CREATE TABLE student (ID TEXT, name TEXT); CREATE TABLE takes (course_id TEXT, ID TEXT); CREATE TABLE classroom (building TEXT); CREATE TABLE section (building TEXT); CREATE TABLE department (building TEXT, budget NUMBER, dept_name TEXT); CREATE TABLE instructor (ID TEXT, name TEXT, salary NUMBER, dept_name TEXT);"
      }
    ],
    [
      {
        "question": "Tell me title name for all course ids....",
        "query": "SELECT course_id, title FROM course",
        "schema": "CREATE TABLE student (ID TEXT, tot_cred NUMBER, dept_name TEXT, name TEXT); CREATE TABLE takes (ID TEXT); CREATE TABLE course (course_id TEXT, title TEXT, dept_name TEXT); CREATE TABLE prereq (prereq_id TEXT, course_id TEXT); CREATE TABLE teaches (course_id TEXT, ID TEXT); CREATE TABLE instructor (dept_name TEXT, ID TEXT, name TEXT); CREATE TABLE section (course_id TEXT); CREATE TABLE department (dept_name TEXT);"
      },
      {
        "question": "Tell me the name of the instructor who getting high salary...And tell his department name too... | How do you define a high salary? | Higher than 80000.....",
        "query": "SELECT name FROM instructor WHERE salary > 80000",
        "schema": "CREATE TABLE takes (ID TEXT); CREATE TABLE course (course_id TEXT, credits NUMBER, title TEXT, dept_name TEXT); CREATE TABLE student (dept_name TEXT, ID TEXT, name TEXT, tot_cred NUMBER); CREATE TABLE teaches (course_id TEXT, ID TEXT); CREATE TABLE department (dept_name TEXT); CREATE TABLE section (course_id TEXT); CREATE TABLE prereq (prereq_id TEXT, course_id TEXT); CREATE TABLE advisor (s_ID TEXT, i_ID TEXT); CREATE TABLE instructor (ID TEXT, name TEXT, dept_name TEXT, salary NUMBER);"
      },
      {
        "question": "Find the name of the instructors who taught C programming course before..",
        "query": "SELECT t1.name FROM instructor AS t1 JOIN teaches AS t2 ON t1.id = t2.id JOIN course AS t3 ON t2.course_id = t3.course_id WHERE t3.title = 'C Programming'",
        "schema": "CREATE TABLE advisor (i_ID TEXT, s_ID TEXT); CREATE TABLE section (course_id TEXT); CREATE TABLE teaches (ID TEXT, course_id TEXT, year NUMBER); CREATE TABLE student (dept_name TEXT, tot_cred NUMBER, ID TEXT, name TEXT); CREATE TABLE course (title TEXT, dept_name TEXT, course_id TEXT, credits NUMBER); CREATE TABLE takes (ID TEXT); CREATE TABLE prereq (course_id TEXT, prereq_id TEXT); CREATE TABLE department (dept_name TEXT); CREATE TABLE instructor (salary NUMBER, name TEXT, dept_name TEXT, ID TEXT);"
      }
    ],
    [
      {
        "question": "Which building has a room with highest capacity?",
        "query": "SELECT building FROM classroom ORDER BY capacity DESC LIMIT 1",
        "schema": "CREATE TABLE student (ID TEXT); CREATE TABLE classroom (capacity NUMBER, room_number TEXT, building TEXT); CREATE TABLE department (dept_name TEXT, building TEXT); CREATE TABLE section (building TEXT, room_number TEXT);"
      },
      {
        "question": "How many credits is \"Accounting\" worth?",
        "query": "SELECT credits FROM course WHERE title = 'Accounting'",
        "schema": "CREATE TABLE classroom (building TEXT, room_number TEXT, capacity NUMBER); CREATE TABLE student (ID TEXT, dept_name TEXT, name TEXT, tot_cred NUMBER); CREATE TABLE section (course_id TEXT, room_number TEXT, building TEXT); CREATE TABLE instructor (ID TEXT); CREATE TABLE course (dept_name TEXT, course_id TEXT, credits NUMBER, title TEXT); CREATE TABLE department (dept_name TEXT, budget NUMBER, building TEXT);"
      },
      {
        "question": "And what is the capacity of the Whitman room?",
        "query": "SELECT capacity FROM classroom WHERE building = 'Whitman'",
        "schema": "CREATE TABLE course (dept_name TEXT, credits NUMBER, course_id TEXT, title TEXT); CREATE TABLE teaches (course_id TEXT); CREATE TABLE instructor (dept_name TEXT, name TEXT, ID TEXT); CREATE TABLE department (dept_name TEXT, building TEXT, budget NUMBER); CREATE TABLE section (building TEXT, course_id TEXT, semester TEXT, year NUMBER, room_number TEXT); CREATE TABLE classroom (room_number TEXT, building TEXT, capacity NUMBER); CREATE TABLE student (ID TEXT, tot_cred NUMBER, dept_name TEXT, name TEXT);"
      }
    ],
    [
      {
        "question": "Show me the instructor ID associated with the History department. | Do you mean the ids of the instructors who advises of all students from History department? | Yes, what is the answer to your question?",
        "query": "SELECT i_id FROM advisor AS t1 JOIN student AS t2 ON t1.s_id = t2.id WHERE t2.dept_name = 'History'",
        "schema": "CREATE TABLE advisor (i_ID TEXT, s_ID TEXT); CREATE TABLE teaches (ID TEXT); CREATE TABLE instructor (dept_name TEXT, name TEXT, ID TEXT); CREATE TABLE student (dept_name TEXT, ID TEXT, tot_cred NUMBER); CREATE TABLE department (dept_name TEXT);"
      },
      {
        "question": "How many instructors advising of students from the history department?",
        "query": "SELECT COUNT ( i_id ) FROM advisor AS t1 JOIN student AS t2 ON t1.s_id = t2.id WHERE t2.dept_name = 'History'",
        "schema": "CREATE TABLE instructor (name TEXT, dept_name TEXT, ID TEXT); CREATE TABLE student (name TEXT, tot_cred NUMBER, ID TEXT, dept_name TEXT); CREATE TABLE department (dept_name TEXT); CREATE TABLE teaches (ID TEXT); CREATE TABLE advisor (s_ID TEXT, i_ID TEXT);"
      }
    ],
    [
      {
        "question": "Find the names of all instructors in the Art department who have taught some course and the course id.",
        "query": "SELECT t1.name , t2.course_id FROM instructor AS t1 JOIN teaches AS t2 ON t1.id = t2.id WHERE t1.dept_name = 'Art'",
        "schema": "CREATE TABLE teaches (ID TEXT, course_id TEXT); CREATE TABLE advisor (i_ID TEXT, s_ID TEXT); CREATE TABLE course (dept_name TEXT, course_id TEXT, title TEXT); CREATE TABLE instructor (dept_name TEXT, name TEXT, ID TEXT); CREATE TABLE student (ID TEXT); CREATE TABLE section (course_id TEXT); CREATE TABLE department (dept_name TEXT);"
      },
      {
        "question": "Find the names of all instructors in the Art department",
        "query": "SELECT name FROM instructor WHERE dept_name = 'Art'",
        "schema": "CREATE TABLE instructor (ID TEXT, dept_name TEXT, name TEXT); CREATE TABLE section (course_id TEXT); CREATE TABLE advisor (s_ID TEXT, i_ID TEXT); CREATE TABLE teaches (course_id TEXT, ID TEXT); CREATE TABLE student (ID TEXT); CREATE TABLE course (title TEXT, course_id TEXT, dept_name TEXT); CREATE TABLE department (dept_name TEXT);"
      },
      {
        "question": "Find the instructor id of all instructors in the Statistics department",
        "query": "SELECT id FROM instructor WHERE dept_name = 'Statistics'",
        "schema": "CREATE TABLE department (dept_name TEXT); CREATE TABLE teaches (course_id TEXT, ID TEXT); CREATE TABLE student (ID TEXT); CREATE TABLE section (course_id TEXT); CREATE TABLE advisor (s_ID TEXT, i_ID TEXT); CREATE TABLE course (dept_name TEXT, title TEXT, course_id TEXT); CREATE TABLE instructor (dept_name TEXT, name TEXT, ID TEXT);"
      }
    ],
    [
      {
        "question": "Which courses ran in Fall 2009 and in Spring 2010?",
        "query": "SELECT * FROM SECTION WHERE semester = 'Fall' AND YEAR = 2009 INTERSECT SELECT course_id FROM SECTION WHERE semester = 'Spring' AND YEAR = 2010",
        "schema": "CREATE TABLE section (year NUMBER, semester TEXT, sec_id TEXT, course_id TEXT); CREATE TABLE teaches (semester TEXT, year NUMBER); CREATE TABLE takes (year NUMBER, semester TEXT); CREATE TABLE course (course_id TEXT, title TEXT, dept_name TEXT); CREATE TABLE student (ID TEXT);"
      },
      {
        "question": "What building is the Spring 2010 course located?",
        "query": "SELECT building FROM SECTION WHERE semester = 'Spring' AND YEAR = 2010",
        "schema": "CREATE TABLE teaches (semester TEXT, year NUMBER); CREATE TABLE student (ID TEXT); CREATE TABLE course (title TEXT, dept_name TEXT, course_id TEXT); CREATE TABLE section (semester TEXT, course_id TEXT, year NUMBER, room_number TEXT, building TEXT, sec_id TEXT); CREATE TABLE takes (semester TEXT, year NUMBER); CREATE TABLE department (building TEXT, dept_name TEXT); CREATE TABLE classroom (room_number TEXT, building TEXT);"
      },
      {
        "question": "Which building housed section ID 443? | You mean course id or section id? | Section ID",
        "query": "SELECT building FROM SECTION WHERE sec_id = 443",
        "schema": "CREATE TABLE section (course_id TEXT, room_number TEXT, sec_id TEXT, semester TEXT, building TEXT, year NUMBER); CREATE TABLE classroom (room_number TEXT, building TEXT); CREATE TABLE course (dept_name TEXT, title TEXT, course_id TEXT); CREATE TABLE student (ID TEXT); CREATE TABLE takes (year NUMBER, semester TEXT); CREATE TABLE department (building TEXT, dept_name TEXT); CREATE TABLE teaches (year NUMBER, semester TEXT);"
      },
      {
        "question": "Which building housed course ID 443?",
        "query": "SELECT building FROM SECTION WHERE course_id = 443",
        "schema": "CREATE TABLE section (room_number TEXT, semester TEXT, building TEXT, course_id TEXT, year NUMBER, sec_id TEXT); CREATE TABLE teaches (semester TEXT, year NUMBER); CREATE TABLE classroom (building TEXT, room_number TEXT); CREATE TABLE course (course_id TEXT, dept_name TEXT, title TEXT); CREATE TABLE student (ID TEXT); CREATE TABLE takes (semester TEXT, year NUMBER); CREATE TABLE department (dept_name TEXT, building TEXT);"
      }
    ],
    [
      {
        "question": "Can you show me how many departments there are? | Did you mean the number of distinct department names? | Yes, please",
        "query": "SELECT COUNT ( DISTINCT dept_name ) FROM student",
        "schema": "CREATE TABLE department (dept_name TEXT); CREATE TABLE instructor (ID TEXT, name TEXT, dept_name TEXT); CREATE TABLE student (dept_name TEXT, ID TEXT); CREATE TABLE course (course_id TEXT, dept_name TEXT, title TEXT);"
      },
      {
        "question": "Can you also show me the total number of instructers? | what  did  you  mean by instructers?  can  you  give  more  info? | Sorry, I meant instructors",
        "query": "SELECT COUNT ( i_id ) FROM advisor",
        "schema": "CREATE TABLE instructor (name TEXT, ID TEXT, dept_name TEXT); CREATE TABLE student (dept_name TEXT, tot_cred NUMBER, name TEXT, ID TEXT); CREATE TABLE course (dept_name TEXT, course_id TEXT, title TEXT); CREATE TABLE department (dept_name TEXT); CREATE TABLE advisor (i_ID TEXT, s_ID TEXT); CREATE TABLE teaches (ID TEXT);"
      },
      {
        "question": "Can you show me the id of the instructor who is from the History department?",
        "query": "SELECT i_id FROM advisor AS t1 JOIN student AS t2 ON t1.s_id = t2.id WHERE t2.dept_name = 'History'",
        "schema": "CREATE TABLE advisor (s_ID TEXT, i_ID TEXT); CREATE TABLE course (title TEXT, course_id TEXT, dept_name TEXT); CREATE TABLE student (tot_cred NUMBER, name TEXT, dept_name TEXT, ID TEXT); CREATE TABLE instructor (ID TEXT, dept_name TEXT, name TEXT); CREATE TABLE department (dept_name TEXT); CREATE TABLE teaches (ID TEXT);"
      }
    ],
    [
      {
        "question": "what is the name of dept of statistics | Do you mean the name of instructors from the statistics department? | yes",
        "query": "SELECT name FROM instructor WHERE dept_name = 'Statistics'",
        "schema": "CREATE TABLE instructor (dept_name TEXT, ID TEXT, name TEXT); CREATE TABLE teaches (ID TEXT); CREATE TABLE course (dept_name TEXT); CREATE TABLE department (dept_name TEXT); CREATE TABLE advisor (i_ID TEXT, s_ID TEXT);"
      },
      {
        "question": "show the total no. of ID",
        "query": "SELECT COUNT ( id ) FROM instructor",
        "schema": "CREATE TABLE teaches (ID TEXT); CREATE TABLE course (dept_name TEXT); CREATE TABLE student (ID TEXT); CREATE TABLE advisor (i_ID TEXT, s_ID TEXT); CREATE TABLE department (dept_name TEXT); CREATE TABLE instructor (dept_name TEXT, ID TEXT, name TEXT);"
      },
      {
        "question": "what is the salary of the the ID 78699",
        "query": "SELECT salary FROM instructor WHERE id = 78699",
        "schema": "CREATE TABLE advisor (s_ID TEXT, i_ID TEXT); CREATE TABLE instructor (name TEXT, dept_name TEXT, ID TEXT, salary NUMBER); CREATE TABLE department (dept_name TEXT); CREATE TABLE student (ID TEXT); CREATE TABLE course (dept_name TEXT); CREATE TABLE teaches (ID TEXT);"
      },
      {
        "question": "what is the dept. name of the \tMcKinnon",
        "query": "SELECT dept_name FROM instructor WHERE name = 'McKinnon'",
        "schema": "CREATE TABLE advisor (i_ID TEXT, s_ID TEXT); CREATE TABLE student (ID TEXT); CREATE TABLE teaches (ID TEXT); CREATE TABLE course (dept_name TEXT); CREATE TABLE department (dept_name TEXT); CREATE TABLE instructor (name TEXT, salary NUMBER, dept_name TEXT, ID TEXT);"
      }
    ],
    [
      {
        "question": "What is the name of the student who has the highest total credits in the History department?",
        "query": "SELECT name FROM student WHERE dept_name = 'History' ORDER BY tot_cred DESC LIMIT 1",
        "schema": "CREATE TABLE course (title TEXT, credits NUMBER, course_id TEXT, dept_name TEXT); CREATE TABLE student (dept_name TEXT, ID TEXT, tot_cred NUMBER, name TEXT); CREATE TABLE instructor (dept_name TEXT, ID TEXT); CREATE TABLE takes (grade TEXT, ID TEXT); CREATE TABLE section (course_id TEXT); CREATE TABLE department (dept_name TEXT);"
      },
      {
        "question": "how many students are in the history department?",
        "query": "SELECT COUNT ( name ) FROM student WHERE dept_name = 'History'",
        "schema": "CREATE TABLE student (name TEXT, tot_cred NUMBER, ID TEXT, dept_name TEXT); CREATE TABLE instructor (ID TEXT, dept_name TEXT); CREATE TABLE takes (grade TEXT, ID TEXT); CREATE TABLE section (course_id TEXT); CREATE TABLE department (dept_name TEXT); CREATE TABLE course (course_id TEXT, title TEXT, credits NUMBER, dept_name TEXT);"
      },
      {
        "question": "what is the average total credits in the history department?",
        "query": "SELECT AVG ( tot_cred ) FROM student WHERE dept_name = 'History'",
        "schema": "CREATE TABLE student (name TEXT, ID TEXT, dept_name TEXT, tot_cred NUMBER); CREATE TABLE department (dept_name TEXT); CREATE TABLE takes (ID TEXT, grade TEXT); CREATE TABLE instructor (dept_name TEXT, ID TEXT); CREATE TABLE section (course_id TEXT); CREATE TABLE course (dept_name TEXT, title TEXT, credits NUMBER, course_id TEXT);"
      }
    ],
    [
      {
        "question": "Find the name of the department which has the highest average salary of professors",
        "query": "SELECT dept_name FROM instructor GROUP BY dept_name ORDER BY AVG ( salary ) DESC LIMIT 1",
        "schema": "CREATE TABLE instructor (dept_name TEXT, ID TEXT, name TEXT, salary NUMBER); CREATE TABLE department (dept_name TEXT, budget NUMBER); CREATE TABLE advisor (i_ID TEXT, s_ID TEXT); CREATE TABLE student (ID TEXT, dept_name TEXT); CREATE TABLE course (course_id TEXT, dept_name TEXT); CREATE TABLE teaches (ID TEXT);"
      },
      {
        "question": "what is the average salary of a physics professor?",
        "query": "SELECT AVG ( salary ) FROM instructor WHERE dept_name = 'Physics'",
        "schema": "CREATE TABLE advisor (s_ID TEXT, i_ID TEXT); CREATE TABLE teaches (ID TEXT); CREATE TABLE student (ID TEXT, dept_name TEXT); CREATE TABLE department (dept_name TEXT, budget NUMBER); CREATE TABLE instructor (ID TEXT, dept_name TEXT, name TEXT, salary NUMBER); CREATE TABLE course (course_id TEXT, dept_name TEXT);"
      },
      {
        "question": "find the department name which has the lowest average salary of professors",
        "query": "SELECT dept_name FROM instructor GROUP BY dept_name ORDER BY AVG ( salary ) ASC LIMIT 1",
        "schema": "CREATE TABLE department (budget NUMBER, dept_name TEXT); CREATE TABLE student (ID TEXT, dept_name TEXT); CREATE TABLE course (course_id TEXT, dept_name TEXT); CREATE TABLE advisor (s_ID TEXT, i_ID TEXT); CREATE TABLE instructor (dept_name TEXT, salary NUMBER, name TEXT, ID TEXT); CREATE TABLE teaches (ID TEXT);"
      }
    ],
    [
      {
        "question": "how many course are presented on the table | Did you mean to ask for the number of entries in the table course? | exactly",
        "query": "SELECT COUNT ( * ) FROM course",
        "schema": "CREATE TABLE teaches (course_id TEXT); CREATE TABLE takes (course_id TEXT); CREATE TABLE course (title TEXT, dept_name TEXT, course_id TEXT); CREATE TABLE student (ID TEXT); CREATE TABLE section (room_number TEXT, course_id TEXT);"
      },
      {
        "question": "what are all the title are on the table | Did you mean to ask for the titles in the table course? | yeah correct",
        "query": "SELECT title FROM course",
        "schema": "CREATE TABLE teaches (course_id TEXT); CREATE TABLE section (course_id TEXT, room_number TEXT); CREATE TABLE student (ID TEXT); CREATE TABLE takes (course_id TEXT); CREATE TABLE course (course_id TEXT, dept_name TEXT, title TEXT);"
      },
      {
        "question": "what is the credits of C Programming",
        "query": "SELECT credits FROM course WHERE title = \"C Programming\"",
        "schema": "CREATE TABLE course (title TEXT, course_id TEXT, dept_name TEXT, credits NUMBER); CREATE TABLE section (course_id TEXT, room_number TEXT); CREATE TABLE student (ID TEXT); CREATE TABLE teaches (course_id TEXT); CREATE TABLE takes (course_id TEXT);"
      },
      {
        "question": "list out the student name",
        "query": "SELECT name FROM student",
        "schema": "CREATE TABLE teaches (course_id TEXT); CREATE TABLE takes (course_id TEXT); CREATE TABLE student (ID TEXT, name TEXT, tot_cred NUMBER, dept_name TEXT); CREATE TABLE section (room_number TEXT, course_id TEXT); CREATE TABLE course (course_id TEXT, dept_name TEXT, title TEXT, credits NUMBER);"
      }
    ],
    [
      {
        "question": "What are courses provided by Statistics deparment?",
        "query": "SELECT title FROM course WHERE dept_name = 'Statistics'",
        "schema": "CREATE TABLE student (dept_name TEXT, ID TEXT, tot_cred NUMBER); CREATE TABLE department (dept_name TEXT); CREATE TABLE course (dept_name TEXT, title TEXT, course_id TEXT); CREATE TABLE instructor (ID TEXT, name TEXT, dept_name TEXT); CREATE TABLE section (course_id TEXT); CREATE TABLE teaches (ID TEXT, course_id TEXT); CREATE TABLE advisor (s_ID TEXT);"
      },
      {
        "question": "What are courses provided by Psychology department?",
        "query": "SELECT title FROM course WHERE dept_name = 'Psychology'",
        "schema": "CREATE TABLE instructor (name TEXT, dept_name TEXT, ID TEXT); CREATE TABLE advisor (s_ID TEXT); CREATE TABLE course (course_id TEXT, dept_name TEXT, title TEXT); CREATE TABLE teaches (ID TEXT, course_id TEXT); CREATE TABLE department (dept_name TEXT); CREATE TABLE student (tot_cred NUMBER, ID TEXT, dept_name TEXT); CREATE TABLE section (course_id TEXT);"
      },
      {
        "question": "Which Statistics courses are not provided by Psychology department?",
        "query": "SELECT title FROM course WHERE dept_name = 'Statistics' EXCEPT SELECT title FROM course WHERE dept_name = 'Psychology'",
        "schema": "CREATE TABLE instructor (name TEXT, dept_name TEXT, ID TEXT); CREATE TABLE advisor (s_ID TEXT); CREATE TABLE section (course_id TEXT); CREATE TABLE teaches (ID TEXT, course_id TEXT); CREATE TABLE course (title TEXT, dept_name TEXT, course_id TEXT); CREATE TABLE student (ID TEXT, tot_cred NUMBER, dept_name TEXT); CREATE TABLE department (dept_name TEXT);"
      }
    ],
    [
      {
        "question": "Hello!  Can you show me a list of all courses that were offered in the Chandler building? | Do you want just their titles, or all the course information? | I would like both please!",
        "query": "SELECT * FROM course AS t1 JOIN SECTION AS t2 ON t1.course_id = t2.course_id WHERE building = 'Chandler'",
        "schema": "CREATE TABLE course (dept_name TEXT, course_id TEXT, title TEXT); CREATE TABLE section (room_number TEXT, course_id TEXT, building TEXT); CREATE TABLE prereq (course_id TEXT); CREATE TABLE department (building TEXT, dept_name TEXT); CREATE TABLE classroom (room_number TEXT, building TEXT); CREATE TABLE teaches (course_id TEXT); CREATE TABLE instructor (dept_name TEXT, ID TEXT);"
      },
      {
        "question": "Thank you for that!  Can you filter that list to show only the rows that correspond to Fall of 2010?",
        "query": "SELECT * FROM course AS t1 JOIN SECTION AS t2 ON t1.course_id = t2.course_id WHERE building = 'Chandler' AND semester = 'Fall' AND YEAR = 2010",
        "schema": "CREATE TABLE department (dept_name TEXT, building TEXT); CREATE TABLE section (year NUMBER, room_number TEXT, building TEXT, sec_id TEXT, semester TEXT, course_id TEXT); CREATE TABLE teaches (course_id TEXT); CREATE TABLE instructor (dept_name TEXT, ID TEXT); CREATE TABLE course (title TEXT, dept_name TEXT, course_id TEXT); CREATE TABLE prereq (course_id TEXT); CREATE TABLE classroom (room_number TEXT, building TEXT);"
      },
      {
        "question": "Can you please tell me how many credits that course was worth?",
        "query": "SELECT credits FROM course AS t1 JOIN SECTION AS t2 ON t1.course_id = t2.course_id WHERE building = 'Chandler' AND semester = 'Fall' AND YEAR = 2010",
        "schema": "CREATE TABLE classroom (building TEXT, room_number TEXT); CREATE TABLE section (building TEXT, semester TEXT, sec_id TEXT, course_id TEXT, year NUMBER, room_number TEXT); CREATE TABLE course (course_id TEXT, dept_name TEXT, credits NUMBER, title TEXT); CREATE TABLE teaches (course_id TEXT); CREATE TABLE department (dept_name TEXT, building TEXT); CREATE TABLE prereq (course_id TEXT); CREATE TABLE instructor (ID TEXT, dept_name TEXT); CREATE TABLE takes (semester TEXT);"
      }
    ],
    [
      {
        "question": "What is the prerequisite for Mobile computing?",
        "query": "SELECT title FROM course WHERE course_id IN ( SELECT t1.prereq_id FROM prereq AS t1 JOIN course AS t2 ON t1.course_id = t2.course_id WHERE t2.title = 'Mobile Computing' )",
        "schema": "CREATE TABLE course (dept_name TEXT, course_id TEXT, title TEXT); CREATE TABLE department (dept_name TEXT); CREATE TABLE student (ID TEXT, tot_cred NUMBER); CREATE TABLE section (course_id TEXT); CREATE TABLE prereq (prereq_id TEXT, course_id TEXT);"
      },
      {
        "question": "What is the department name for these courses?",
        "query": "SELECT dept_name FROM course WHERE course_id IN ( SELECT t1.prereq_id FROM prereq AS t1 JOIN course AS t2 ON t1.course_id = t2.course_id WHERE t2.title = 'Mobile Computing' )",
        "schema": "CREATE TABLE course (course_id TEXT, title TEXT, dept_name TEXT); CREATE TABLE prereq (prereq_id TEXT, course_id TEXT); CREATE TABLE section (course_id TEXT); CREATE TABLE department (dept_name TEXT); CREATE TABLE student (ID TEXT, tot_cred NUMBER);"
      },
      {
        "question": "How many courses are there in the History Department?",
        "query": "SELECT COUNT ( * ) FROM course WHERE dept_name = \"History\"",
        "schema": "CREATE TABLE student (ID TEXT, tot_cred NUMBER); CREATE TABLE course (course_id TEXT, title TEXT, dept_name TEXT); CREATE TABLE department (dept_name TEXT); CREATE TABLE section (course_id TEXT); CREATE TABLE prereq (prereq_id TEXT, course_id TEXT);"
      }
    ],
    [
      {
        "question": "Hello there!  Can you show me a list of all of the departments and the budgets?",
        "query": "SELECT dept_name,budget FROM department",
        "schema": "CREATE TABLE course (course_id TEXT, dept_name TEXT); CREATE TABLE student (ID TEXT, dept_name TEXT); CREATE TABLE section (course_id TEXT); CREATE TABLE instructor (ID TEXT, dept_name TEXT); CREATE TABLE department (dept_name TEXT, budget NUMBER);"
      },
      {
        "question": "Thank you!  Can you filter that list to show only the department with the lowest budget?",
        "query": "SELECT dept_name,budget FROM department ORDER BY budget LIMIT 1",
        "schema": "CREATE TABLE course (course_id TEXT, dept_name TEXT); CREATE TABLE student (dept_name TEXT, ID TEXT); CREATE TABLE instructor (dept_name TEXT, ID TEXT); CREATE TABLE section (course_id TEXT); CREATE TABLE department (budget NUMBER, dept_name TEXT);"
      },
      {
        "question": "Awesome!  Can you add the building of the Comp Sci department to that list as well?",
        "query": "SELECT dept_name,building, budget FROM department ORDER BY budget LIMIT 1",
        "schema": "CREATE TABLE department (budget NUMBER, dept_name TEXT, building TEXT); CREATE TABLE course (dept_name TEXT, course_id TEXT); CREATE TABLE section (course_id TEXT, building TEXT); CREATE TABLE instructor (ID TEXT, dept_name TEXT); CREATE TABLE classroom (room_number TEXT, building TEXT); CREATE TABLE student (dept_name TEXT, ID TEXT);"
      }
    ],
    [
      {
        "question": "How many teachers are there?",
        "query": "SELECT COUNT ( name ) FROM instructor WHERE id IN ( SELECT id FROM teaches )",
        "schema": "CREATE TABLE advisor (i_ID TEXT, s_ID TEXT); CREATE TABLE teaches (ID TEXT); CREATE TABLE student (ID TEXT); CREATE TABLE instructor (name TEXT, dept_name TEXT, ID TEXT); CREATE TABLE department (dept_name TEXT);"
      },
      {
        "question": "How many teachers didn't teach at all?",
        "query": "SELECT COUNT ( name ) FROM instructor WHERE id NOT IN ( SELECT id FROM teaches )",
        "schema": "CREATE TABLE instructor (name TEXT, dept_name TEXT, ID TEXT); CREATE TABLE student (ID TEXT); CREATE TABLE teaches (ID TEXT); CREATE TABLE department (dept_name TEXT); CREATE TABLE advisor (i_ID TEXT, s_ID TEXT);"
      },
      {
        "question": "WHAT ARE THEIR NAMES?",
        "query": "SELECT name FROM instructor WHERE id NOT IN ( SELECT id FROM teaches )",
        "schema": "CREATE TABLE student (ID TEXT); CREATE TABLE department (dept_name TEXT); CREATE TABLE advisor (s_ID TEXT, i_ID TEXT); CREATE TABLE instructor (name TEXT, ID TEXT, dept_name TEXT); CREATE TABLE teaches (ID TEXT);"
      }
    ],
    [
      {
        "question": "Can you show all rooms with a capacity larger than 50?",
        "query": "SELECT * FROM classroom WHERE capacity > 50",
        "schema": "CREATE TABLE classroom (capacity NUMBER, room_number TEXT, building TEXT);"
      },
      {
        "question": "Can you display only the number of rooms currently in the table?",
        "query": "SELECT room_number FROM classroom WHERE capacity > 50",
        "schema": "CREATE TABLE section (building TEXT, room_number TEXT); CREATE TABLE classroom (capacity NUMBER, room_number TEXT, building TEXT);"
      },
      {
        "question": "How many unique room numbers are currently in the table?",
        "query": "SELECT COUNT ( DISTINCT room_number ) FROM classroom WHERE capacity > 50",
        "schema": "CREATE TABLE classroom (room_number TEXT, capacity NUMBER, building TEXT); CREATE TABLE section (room_number TEXT, building TEXT);"
      }
    ]
  ],
  "train_station": [
    [
      {
        "question": "What is the station ID for London Waterloo",
        "query": "SELECT station_id FROM station WHERE name = \"London Waterloo\"",
        "schema": "CREATE TABLE train_station (Train_ID NUMBER, Station_ID NUMBER); CREATE TABLE station (Name TEXT, Location TEXT, Station_ID NUMBER);"
      },
      {
        "question": "What trains go to station ID 1?",
        "query": "SELECT * FROM train_station AS t1 JOIN station AS t2 ON t1.station_id = t2.station_id JOIN train AS t3 ON t3.train_id = t1.train_id WHERE t1.station_id = 1",
        "schema": "CREATE TABLE train (Train_ID NUMBER, Name TEXT, Time TEXT); CREATE TABLE train_station (Train_ID NUMBER, Station_ID NUMBER); CREATE TABLE station (Station_ID NUMBER, Location TEXT, Name TEXT);"
      },
      {
        "question": "Can you give me the names of those trains and tell me when they have service",
        "query": "SELECT t3.name, t3.time FROM train_station AS t1 JOIN station AS t2 ON t1.station_id = t2.station_id JOIN train AS t3 ON t3.train_id = t1.train_id WHERE t1.station_id = 1",
        "schema": "CREATE TABLE train (Train_ID NUMBER, Service TEXT, Name TEXT, Time TEXT); CREATE TABLE station (Main_Services TEXT, Location TEXT, Station_ID NUMBER, Name TEXT); CREATE TABLE train_station (Train_ID NUMBER, Station_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Find the station id of Ananthapuri Express? | the station ids that serve the train Ananthapuri Express are 1 and 2 | What are the annual entry exit of station id 1?",
        "query": "SELECT annual_entry_exit FROM station WHERE station_id = \"1\"",
        "schema": "CREATE TABLE train_station (Train_ID NUMBER, Station_ID NUMBER); CREATE TABLE train (Train_ID NUMBER, Name TEXT); CREATE TABLE station (Annual_entry_exit NUMBER, Name TEXT, Station_ID NUMBER, Annual_interchanges NUMBER);"
      },
      {
        "question": "Find the total passengers of station id 1 and 2?",
        "query": "SELECT total_passengers FROM station WHERE station_id = \"1\" OR station_id = \"2\"",
        "schema": "CREATE TABLE train (Name TEXT, Train_ID NUMBER); CREATE TABLE train_station (Station_ID NUMBER, Train_ID NUMBER); CREATE TABLE station (Name TEXT, Total_Passengers NUMBER, Annual_entry_exit NUMBER, Station_ID NUMBER, Annual_interchanges NUMBER);"
      },
      {
        "question": "What are the names of the stations which serve both \"Ananthapuri Express\" and \"Guruvayur Express\" train?",
        "query": "SELECT t2.name FROM train_station AS t1 JOIN station AS t2 ON t1.station_id = t2.station_id JOIN train AS t3 ON t3.train_id = t1.train_id WHERE t3.name = \"Ananthapuri Express\" INTERSECT SELECT t2.name FROM train_station AS t1 JOIN station AS t2 ON t1.station_id = t2.station_id JOIN train AS t3 ON t3.train_id = t1.train_id WHERE t3.name = \"Guruvayur Express\"",
        "schema": "CREATE TABLE train (Train_ID NUMBER, Name TEXT, Service TEXT); CREATE TABLE station (Name TEXT, Station_ID NUMBER, Total_Passengers NUMBER, Annual_entry_exit NUMBER, Annual_interchanges NUMBER); CREATE TABLE train_station (Train_ID NUMBER, Station_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show the train name and station name for each train",
        "query": "SELECT t2.name , t3.name FROM train_station AS t1 JOIN station AS t2 ON t1.station_id = t2.station_id JOIN train AS t3 ON t3.train_id = t1.train_id",
        "schema": "CREATE TABLE train_station (Station_ID NUMBER, Train_ID NUMBER); CREATE TABLE train (Train_ID NUMBER, Name TEXT); CREATE TABLE station (Station_ID NUMBER, Name TEXT);"
      },
      {
        "question": "Give me total passengers on each station",
        "query": "SELECT total_passengers FROM station",
        "schema": "CREATE TABLE train_station (Station_ID NUMBER, Train_ID NUMBER); CREATE TABLE station (Name TEXT, Station_ID NUMBER, Total_Passengers NUMBER); CREATE TABLE train (Train_ID NUMBER, Name TEXT);"
      },
      {
        "question": "Give me main services for each station",
        "query": "SELECT main_services FROM station",
        "schema": "CREATE TABLE train_station (Station_ID NUMBER, Train_ID NUMBER); CREATE TABLE train (Service TEXT, Name TEXT, Train_ID NUMBER); CREATE TABLE station (Main_Services TEXT, Station_ID NUMBER, Name TEXT, Total_Passengers NUMBER);"
      }
    ],
    [
      {
        "question": "what is the highest annual interchanges\t?",
        "query": "SELECT annual_interchanges FROM station ORDER BY annual_interchanges DESC LIMIT 1",
        "schema": "CREATE TABLE station (Annual_entry_exit NUMBER, Annual_interchanges NUMBER);"
      },
      {
        "question": "what is stations' total passengers? | Do you mean sum of total passengers in all stations? | yes",
        "query": "SELECT SUM ( total_passengers ) FROM station",
        "schema": "CREATE TABLE station (Station_ID NUMBER, Annual_interchanges NUMBER, Annual_entry_exit NUMBER, Total_Passengers NUMBER, Name TEXT);"
      },
      {
        "question": "show all locations with only 1 station.",
        "query": "SELECT LOCATION FROM station GROUP BY LOCATION HAVING COUNT ( * ) = 1",
        "schema": "CREATE TABLE station (Annual_entry_exit NUMBER, Annual_interchanges NUMBER, Location TEXT, Station_ID NUMBER, Total_Passengers NUMBER, Name TEXT);"
      }
    ],
    [
      {
        "question": "Hello there!  Can you show me a list of all of the train station names?",
        "query": "SELECT name FROM station",
        "schema": "CREATE TABLE station (Station_ID NUMBER, Name TEXT); CREATE TABLE train (Name TEXT); CREATE TABLE train_station (Station_ID NUMBER);"
      }
    ],
    [
      {
        "question": "what is the \tNumber_of_Platforms does Main_Services South Western Main Line West of England Main Line have?",
        "query": "SELECT number_of_platforms FROM station WHERE main_services = \"South Western Main Line West of England Main Line\"",
        "schema": "CREATE TABLE station (Number_of_Platforms NUMBER, Main_Services TEXT, Name TEXT); CREATE TABLE train (Service TEXT);"
      },
      {
        "question": "how many passengers are in the London Waterloo?",
        "query": "SELECT total_passengers FROM station WHERE name = \"London Waterloo\"",
        "schema": "CREATE TABLE station (Main_Services TEXT, Number_of_Platforms NUMBER, Total_Passengers NUMBER, Station_ID NUMBER, Location TEXT, Name TEXT); CREATE TABLE train (Service TEXT);"
      },
      {
        "question": "can you help me with the Annual interchanges for London Bridge",
        "query": "SELECT annual_interchanges FROM station WHERE name = \"London Bridge\"",
        "schema": "CREATE TABLE station (Annual_interchanges NUMBER, Number_of_Platforms NUMBER, Total_Passengers NUMBER, Location TEXT, Annual_entry_exit NUMBER, Main_Services TEXT, Name TEXT, Station_ID NUMBER); CREATE TABLE train (Service TEXT);"
      }
    ],
    [
      {
        "question": "Show the station name with the greatest number of trains, please.",
        "query": "SELECT t2.name FROM train_station AS t1 JOIN station AS t2 ON t1.station_id = t2.station_id GROUP BY t1.station_id ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE train_station (Station_ID NUMBER, Train_ID NUMBER); CREATE TABLE station (Name TEXT, Station_ID NUMBER); CREATE TABLE train (Train_ID NUMBER, Name TEXT);"
      },
      {
        "question": "What is the location of that station?",
        "query": "SELECT t2.location FROM train_station AS t1 JOIN station AS t2 ON t1.station_id = t2.station_id GROUP BY t1.station_id ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE train_station (Train_ID NUMBER, Station_ID NUMBER); CREATE TABLE train (Name TEXT, Train_ID NUMBER); CREATE TABLE station (Station_ID NUMBER, Location TEXT, Name TEXT);"
      },
      {
        "question": "What are the main services of that station?",
        "query": "SELECT t2.main_services FROM train_station AS t1 JOIN station AS t2 ON t1.station_id = t2.station_id GROUP BY t1.station_id ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE train (Service TEXT, Train_ID NUMBER, Name TEXT); CREATE TABLE train_station (Train_ID NUMBER, Station_ID NUMBER); CREATE TABLE station (Name TEXT, Station_ID NUMBER, Main_Services TEXT, Location TEXT);"
      },
      {
        "question": "What is the station id of that station?",
        "query": "SELECT t2.station_id FROM train_station AS t1 JOIN station AS t2 ON t1.station_id = t2.station_id GROUP BY t1.station_id ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE train_station (Train_ID NUMBER, Station_ID NUMBER); CREATE TABLE station (Location TEXT, Name TEXT, Main_Services TEXT, Station_ID NUMBER); CREATE TABLE train (Train_ID NUMBER, Service TEXT, Name TEXT);"
      },
      {
        "question": "How many annual interchanges are at that station?",
        "query": "SELECT t2.annual_interchanges FROM train_station AS t1 JOIN station AS t2 ON t1.station_id = t2.station_id GROUP BY t1.station_id ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE train (Train_ID NUMBER, Name TEXT, Service TEXT); CREATE TABLE train_station (Station_ID NUMBER, Train_ID NUMBER); CREATE TABLE station (Location TEXT, Main_Services TEXT, Name TEXT, Annual_interchanges NUMBER, Station_ID NUMBER);"
      },
      {
        "question": "What is the name of the station with station id 3?",
        "query": "SELECT name FROM station WHERE station_id = 3",
        "schema": "CREATE TABLE train (Name TEXT, Service TEXT, Train_ID NUMBER); CREATE TABLE station (Station_ID NUMBER, Annual_interchanges NUMBER, Location TEXT, Name TEXT, Main_Services TEXT); CREATE TABLE train_station (Station_ID NUMBER, Train_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Which location has the most number of train stations?",
        "query": "SELECT LOCATION, COUNT ( * ) FROM station GROUP BY LOCATION ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE station (Number_of_Platforms NUMBER, Station_ID NUMBER, Location TEXT, Name TEXT); CREATE TABLE train_station (Station_ID NUMBER);"
      },
      {
        "question": "What is the total number of passengers do train station in london has ?",
        "query": "SELECT SUM ( total_passengers ) FROM station WHERE LOCATION = 'London'",
        "schema": "CREATE TABLE train_station (Station_ID NUMBER); CREATE TABLE station (Name TEXT, Location TEXT, Number_of_Platforms NUMBER, Station_ID NUMBER, Total_Passengers NUMBER);"
      },
      {
        "question": "How many number of platforms do they have? | could you give more info of your problem? it the \"they\" station id or location? | What is the number of platforms does train station in london has?",
        "query": "SELECT SUM ( number_of_platforms ) FROM station WHERE LOCATION = 'London'",
        "schema": "CREATE TABLE train_station (Station_ID NUMBER); CREATE TABLE station (Number_of_Platforms NUMBER, Name TEXT, Station_ID NUMBER, Location TEXT, Total_Passengers NUMBER);"
      },
      {
        "question": "What is the name of the train station in londom?",
        "query": "SELECT name FROM station WHERE LOCATION = 'London'",
        "schema": "CREATE TABLE train_station (Station_ID NUMBER, Train_ID NUMBER); CREATE TABLE station (Number_of_Platforms NUMBER, Station_ID NUMBER, Total_Passengers NUMBER, Name TEXT, Location TEXT);"
      },
      {
        "question": "What is the main service of  train station in london?",
        "query": "SELECT main_services FROM station WHERE LOCATION = 'London'",
        "schema": "CREATE TABLE train_station (Station_ID NUMBER, Train_ID NUMBER); CREATE TABLE train (Train_ID NUMBER, Service TEXT); CREATE TABLE station (Name TEXT, Station_ID NUMBER, Main_Services TEXT, Total_Passengers NUMBER, Location TEXT, Number_of_Platforms NUMBER);"
      }
    ],
    [
      {
        "question": "Find the total passengers of London Waterloo?",
        "query": "SELECT total_passengers FROM station WHERE name = \"London Waterloo\"",
        "schema": "CREATE TABLE station (Total_Passengers NUMBER, Station_ID NUMBER, Name TEXT, Location TEXT); CREATE TABLE train (Train_ID NUMBER, Name TEXT); CREATE TABLE train_station (Train_ID NUMBER, Station_ID NUMBER);"
      },
      {
        "question": "How many Number of Platforms in station id 2?",
        "query": "SELECT number_of_platforms FROM station WHERE station_id = 2",
        "schema": "CREATE TABLE train_station (Station_ID NUMBER, Train_ID NUMBER); CREATE TABLE train (Name TEXT, Train_ID NUMBER); CREATE TABLE station (Number_of_Platforms NUMBER, Name TEXT, Station_ID NUMBER, Total_Passengers NUMBER, Location TEXT);"
      },
      {
        "question": "What are the Main Services of station id 3?",
        "query": "SELECT main_services FROM station WHERE station_id = 3",
        "schema": "CREATE TABLE station (Total_Passengers NUMBER, Name TEXT, Station_ID NUMBER, Main_Services TEXT, Location TEXT, Number_of_Platforms NUMBER); CREATE TABLE train_station (Station_ID NUMBER, Train_ID NUMBER); CREATE TABLE train (Train_ID NUMBER, Service TEXT, Name TEXT);"
      },
      {
        "question": "Show all locations which don't have a train station with at least 15 platforms.",
        "query": "SELECT LOCATION FROM station EXCEPT SELECT LOCATION FROM station WHERE number_of_platforms > = 15",
        "schema": "CREATE TABLE station (Main_Services TEXT, Total_Passengers NUMBER, Location TEXT, Station_ID NUMBER, Name TEXT, Number_of_Platforms NUMBER); CREATE TABLE train (Train_ID NUMBER, Service TEXT, Name TEXT); CREATE TABLE train_station (Station_ID NUMBER, Train_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Which station has the greatest number of traims?",
        "query": "SELECT * FROM train_station AS t1 JOIN station AS t2 ON t1.station_id = t2.station_id GROUP BY t1.station_id ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE train_station (Station_ID NUMBER, Train_ID NUMBER); CREATE TABLE station (Total_Passengers NUMBER, Location TEXT, Main_Services TEXT, Number_of_Platforms NUMBER, Station_ID NUMBER, Name TEXT);"
      },
      {
        "question": "Whats the total passengers london waterloo has?",
        "query": "SELECT total_passengers FROM station WHERE name = \"London Waterloo\"",
        "schema": "CREATE TABLE train_station (Train_ID NUMBER, Station_ID NUMBER); CREATE TABLE station (Station_ID NUMBER, Name TEXT, Location TEXT, Total_Passengers NUMBER, Number_of_Platforms NUMBER, Main_Services TEXT);"
      },
      {
        "question": "Whats the number of platforms do london waterloo has ?",
        "query": "SELECT number_of_platforms FROM station WHERE name = \"London Waterloo\"",
        "schema": "CREATE TABLE station (Location TEXT, Total_Passengers NUMBER, Station_ID NUMBER, Number_of_Platforms NUMBER, Name TEXT, Main_Services TEXT); CREATE TABLE train_station (Station_ID NUMBER, Train_ID NUMBER);"
      },
      {
        "question": "Where is it located?",
        "query": "SELECT LOCATION FROM station WHERE name = \"London Waterloo\"",
        "schema": "CREATE TABLE train_station (Station_ID NUMBER, Train_ID NUMBER); CREATE TABLE station (Number_of_Platforms NUMBER, Main_Services TEXT, Name TEXT, Station_ID NUMBER, Total_Passengers NUMBER, Location TEXT);"
      }
    ],
    [
      {
        "question": "What are the top three total number of passengers?",
        "query": "SELECT total_passengers FROM station ORDER BY total_passengers DESC LIMIT 3",
        "schema": "CREATE TABLE station (Total_Passengers NUMBER);"
      },
      {
        "question": "What are the names and main services for train stations for these?",
        "query": "SELECT name, main_services FROM station ORDER BY total_passengers DESC LIMIT 3",
        "schema": "CREATE TABLE train (Service TEXT, Train_ID NUMBER, Name TEXT); CREATE TABLE train_station (Station_ID NUMBER, Train_ID NUMBER); CREATE TABLE station (Station_ID NUMBER, Name TEXT, Total_Passengers NUMBER, Main_Services TEXT);"
      },
      {
        "question": "What about the names and main services for the train stations with the least 3 number of passengers?",
        "query": "SELECT name, main_services FROM station ORDER BY total_passengers ASC LIMIT 3",
        "schema": "CREATE TABLE station (Total_Passengers NUMBER, Main_Services TEXT, Station_ID NUMBER, Name TEXT); CREATE TABLE train_station (Train_ID NUMBER, Station_ID NUMBER); CREATE TABLE train (Service TEXT, Name TEXT, Train_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Could you show me all the locations that have train stations with at least 15 platforms?",
        "query": "SELECT DISTINCT LOCATION FROM station WHERE number_of_platforms > = 15",
        "schema": "CREATE TABLE train_station (Station_ID NUMBER); CREATE TABLE station (Name TEXT, Location TEXT, Station_ID NUMBER, Number_of_Platforms NUMBER);"
      },
      {
        "question": "Could you show me all the locations that have train stations with more than 25 total passengers?",
        "query": "SELECT DISTINCT LOCATION FROM station WHERE total_passengers > 25",
        "schema": "CREATE TABLE train_station (Station_ID NUMBER); CREATE TABLE station (Number_of_Platforms NUMBER, Location TEXT, Station_ID NUMBER, Name TEXT, Total_Passengers NUMBER);"
      },
      {
        "question": "Could you show me all the locations that have train stations with exactly 19 platforms?",
        "query": "SELECT DISTINCT LOCATION FROM station WHERE number_of_platforms = 19",
        "schema": "CREATE TABLE station (Name TEXT, Location TEXT, Total_Passengers NUMBER, Station_ID NUMBER, Number_of_Platforms NUMBER); CREATE TABLE train_station (Station_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Can you please list all of the locations with only one station?",
        "query": "SELECT LOCATION FROM station GROUP BY LOCATION HAVING COUNT ( * ) = 1",
        "schema": "CREATE TABLE station (Location TEXT, Station_ID NUMBER, Name TEXT);"
      },
      {
        "question": "What is the name of the station in Glasgow?",
        "query": "SELECT name FROM station WHERE LOCATION = \"Glasgow\"",
        "schema": "CREATE TABLE station (Location TEXT, Name TEXT, Station_ID NUMBER);"
      },
      {
        "question": "How many platforms does Glasgow Central have?",
        "query": "SELECT number_of_platforms FROM station WHERE name = \"Glasgow Central\"",
        "schema": "CREATE TABLE station (Name TEXT, Number_of_Platforms NUMBER, Station_ID NUMBER, Location TEXT);"
      }
    ]
  ],
  "performance_attendance": [
    [
      {
        "question": "When did the violin players perform?",
        "query": "SELECT t3.date FROM member_attendance AS t1 JOIN member AS t2 ON t1.member_id = t2.member_id JOIN performance AS t3 ON t1.performance_id = t3.performance_id WHERE t2.role = \"Violin\"",
        "schema": "CREATE TABLE member (Role TEXT, Name TEXT, Member_ID TEXT); CREATE TABLE performance (Date TEXT, Host TEXT, Performance_ID NUMBER, Location TEXT, Attendance NUMBER); CREATE TABLE member_attendance (Member_ID NUMBER, Performance_ID NUMBER);"
      },
      {
        "question": "Which violin player attended the most? | Do you mean the name of the violin player that attended the most number of performances? | Yes, what is the name of the violin player who attended the most number of performances?",
        "query": "SELECT t1.name FROM member AS t1 JOIN member_attendance AS t2 ON t1.member_id = t2.member_id GROUP BY t2.member_id ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE performance (Host TEXT, Date TEXT, Attendance NUMBER, Location TEXT, Performance_ID NUMBER); CREATE TABLE member (Member_ID TEXT, Role TEXT, Name TEXT); CREATE TABLE member_attendance (Member_ID NUMBER, Performance_ID NUMBER);"
      },
      {
        "question": "What about the violin player who attended the least performances?",
        "query": "SELECT t1.name FROM member AS t1 JOIN member_attendance AS t2 ON t1.member_id = t2.member_id GROUP BY t2.member_id ORDER BY COUNT ( * ) ASC LIMIT 1",
        "schema": "CREATE TABLE performance (Attendance NUMBER, Date TEXT, Performance_ID NUMBER, Location TEXT, Host TEXT); CREATE TABLE member_attendance (Performance_ID NUMBER, Member_ID NUMBER); CREATE TABLE member (Role TEXT, Name TEXT, Member_ID TEXT);"
      }
    ],
    [
      {
        "question": "can you show me a list of locations?",
        "query": "SELECT LOCATION FROM performance",
        "schema": "CREATE TABLE performance (Location TEXT);"
      },
      {
        "question": "what is the average of attendance?",
        "query": "SELECT AVG ( attendance ) FROM performance",
        "schema": "CREATE TABLE member_attendance (Performance_ID NUMBER); CREATE TABLE performance (Attendance NUMBER, Performance_ID NUMBER, Location TEXT);"
      },
      {
        "question": "what is the highest attendance's ?",
        "query": "SELECT MAX ( attendance ) FROM performance",
        "schema": "CREATE TABLE performance (Performance_ID NUMBER, Location TEXT, Attendance NUMBER); CREATE TABLE member_attendance (Performance_ID NUMBER);"
      },
      {
        "question": "what is the lowest attendance's ?",
        "query": "SELECT MIN ( attendance ) FROM performance",
        "schema": "CREATE TABLE member_attendance (Performance_ID NUMBER); CREATE TABLE performance (Attendance NUMBER, Location TEXT, Performance_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Hello, how many members are there?",
        "query": "SELECT COUNT ( * ) FROM member",
        "schema": "CREATE TABLE member (Role TEXT, Name TEXT, Member_ID TEXT); CREATE TABLE performance (Performance_ID NUMBER); CREATE TABLE member_attendance (Num_of_Pieces NUMBER, Member_ID NUMBER, Performance_ID NUMBER);"
      },
      {
        "question": "What is the Nationality of the id number 4.",
        "query": "SELECT nationality FROM member WHERE member_id = 4",
        "schema": "CREATE TABLE member (Name TEXT, Member_ID TEXT, Role TEXT, Nationality TEXT); CREATE TABLE performance (Performance_ID NUMBER); CREATE TABLE member_attendance (Performance_ID NUMBER, Member_ID NUMBER, Num_of_Pieces NUMBER);"
      },
      {
        "question": "What is the most common nationality?",
        "query": "SELECT nationality FROM member GROUP BY nationality ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE member_attendance (Performance_ID NUMBER, Member_ID NUMBER, Num_of_Pieces NUMBER); CREATE TABLE member (Name TEXT, Member_ID TEXT, Role TEXT, Nationality TEXT); CREATE TABLE performance (Performance_ID NUMBER);"
      }
    ],
    [
      {
        "question": "How many performances are listed? | Did you mean the count of Performance ID in the member attendance table \uff1f | Yes",
        "query": "SELECT COUNT ( DISTINCT performance_id ) FROM member_attendance",
        "schema": "CREATE TABLE performance (Attendance NUMBER, Performance_ID NUMBER); CREATE TABLE member (Member_ID TEXT); CREATE TABLE member_attendance (Performance_ID NUMBER, Num_of_Pieces NUMBER, Member_ID NUMBER);"
      },
      {
        "question": "What are the roles for each performance?",
        "query": "SELECT t2.performance_id,t1.role FROM member AS t1 JOIN member_attendance AS t2 ON t1.member_id = t2.member_id GROUP BY t2.performance_id",
        "schema": "CREATE TABLE member (Member_ID TEXT, Role TEXT); CREATE TABLE performance (Attendance NUMBER, Performance_ID NUMBER); CREATE TABLE member_attendance (Performance_ID NUMBER, Member_ID NUMBER, Num_of_Pieces NUMBER);"
      },
      {
        "question": "What country is each member from? | Did  you  mean  show  the name of member  and the related\tNationality? | yes",
        "query": "SELECT name ,nationality FROM member",
        "schema": "CREATE TABLE performance (Attendance NUMBER, Performance_ID NUMBER); CREATE TABLE member (Member_ID TEXT, Role TEXT, Name TEXT, Nationality TEXT); CREATE TABLE member_attendance (Member_ID NUMBER, Performance_ID NUMBER, Num_of_Pieces NUMBER);"
      }
    ],
    [
      {
        "question": "list all dates available",
        "query": "SELECT Date FROM performance",
        "schema": "CREATE TABLE member (Member_ID TEXT); CREATE TABLE performance (Date TEXT);"
      },
      {
        "question": "on what date of the performance with the highest number of attendees?",
        "query": "SELECT Date FROM performance ORDER BY attendance DESC LIMIT 1",
        "schema": "CREATE TABLE member (Member_ID TEXT); CREATE TABLE performance (Attendance NUMBER, Performance_ID NUMBER, Date TEXT);"
      },
      {
        "question": "of the highest number of attendees | Did you mean to ask for the performance id of the performance with the highest number of attendees? | yes",
        "query": "SELECT performance_id FROM performance ORDER BY attendance DESC LIMIT 1",
        "schema": "CREATE TABLE performance (Date TEXT, Attendance NUMBER, Performance_ID NUMBER); CREATE TABLE member (Member_ID TEXT);"
      }
    ]
  ],
  "cinema": [
    [
      {
        "question": "what is the films title that direct by Bill Schreiner?",
        "query": "SELECT title FROM film WHERE directed_by = \"Bill Schreiner\"",
        "schema": "CREATE TABLE film (Directed_by TEXT, Film_ID NUMBER, Title TEXT); CREATE TABLE cinema (Name TEXT); CREATE TABLE schedule (Film_ID NUMBER);"
      },
      {
        "question": "show director with the largest number of show times in total",
        "query": "SELECT t2.directed_by FROM schedule AS t1 JOIN film AS t2 ON t1.film_id = t2.film_id GROUP BY t2.directed_by ORDER BY SUM ( t1.show_times_per_day ) DESC LIMIT 1",
        "schema": "CREATE TABLE schedule (Film_ID NUMBER, Show_times_per_day NUMBER); CREATE TABLE cinema (Name TEXT); CREATE TABLE film (Film_ID NUMBER, Title TEXT, Directed_by TEXT);"
      },
      {
        "question": "show me a list of original air date?",
        "query": "SELECT original_air_date FROM film",
        "schema": "CREATE TABLE cinema (Name TEXT); CREATE TABLE film (Original_air_date TEXT, Film_ID NUMBER, Directed_by TEXT, Title TEXT); CREATE TABLE schedule (Date TEXT, Show_times_per_day NUMBER, Film_ID NUMBER);"
      }
    ],
    [
      {
        "question": "How many cinemas are there in total?",
        "query": "SELECT COUNT ( * ) FROM cinema",
        "schema": "CREATE TABLE cinema (Name TEXT, Capacity NUMBER, Cinema_ID NUMBER); CREATE TABLE schedule (Film_ID NUMBER, Cinema_ID NUMBER); CREATE TABLE film (Film_ID NUMBER);"
      },
      {
        "question": "What is the average capacity?",
        "query": "SELECT AVG ( capacity ) FROM cinema",
        "schema": "CREATE TABLE film (Film_ID NUMBER); CREATE TABLE schedule (Film_ID NUMBER, Cinema_ID NUMBER); CREATE TABLE cinema (Name TEXT, Capacity NUMBER, Cinema_ID NUMBER);"
      },
      {
        "question": "How many cinemas have above average capacity?",
        "query": "SELECT COUNT ( * ) FROM cinema WHERE capacity > ( SELECT AVG ( capacity ) FROM cinema )",
        "schema": "CREATE TABLE film (Film_ID NUMBER); CREATE TABLE schedule (Film_ID NUMBER, Cinema_ID NUMBER); CREATE TABLE cinema (Cinema_ID NUMBER, Name TEXT, Capacity NUMBER);"
      },
      {
        "question": "What is the name and location of the 2 cinemas with above average capacity?",
        "query": "SELECT name, LOCATION FROM cinema WHERE capacity > ( SELECT AVG ( capacity ) FROM cinema )",
        "schema": "CREATE TABLE cinema (Name TEXT, Capacity NUMBER, Location TEXT, Cinema_ID NUMBER); CREATE TABLE film (Film_ID NUMBER); CREATE TABLE schedule (Film_ID NUMBER, Cinema_ID NUMBER);"
      }
    ],
    [
      {
        "question": "what is the capacity of county wicklow",
        "query": "SELECT capacity FROM cinema WHERE LOCATION = \"County Wicklow\"",
        "schema": "CREATE TABLE cinema (Cinema_ID NUMBER, Capacity NUMBER, Name TEXT, Location TEXT); CREATE TABLE film (Film_ID NUMBER);"
      },
      {
        "question": "what is the average capacity",
        "query": "SELECT AVG ( capacity ) FROM cinema",
        "schema": "CREATE TABLE film (Film_ID NUMBER); CREATE TABLE cinema (Name TEXT, Capacity NUMBER, Cinema_ID NUMBER, Location TEXT);"
      },
      {
        "question": "find the locations that have more than one movie theater with capacity above 300",
        "query": "SELECT LOCATION FROM cinema WHERE capacity > 300 GROUP BY LOCATION HAVING COUNT ( * ) > 1",
        "schema": "CREATE TABLE cinema (Cinema_ID NUMBER, Location TEXT, Capacity NUMBER, Name TEXT); CREATE TABLE film (Film_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What are the names of each of the films?",
        "query": "SELECT title FROM film",
        "schema": "CREATE TABLE film (Film_ID NUMBER, Title TEXT, Directed_by TEXT); CREATE TABLE cinema (Name TEXT);"
      }
    ],
    [
      {
        "question": "what is the highest price?",
        "query": "SELECT MAX ( price ) FROM schedule",
        "schema": "CREATE TABLE cinema (Cinema_ID NUMBER); CREATE TABLE schedule (Price NUMBER); CREATE TABLE film (Film_ID NUMBER);"
      },
      {
        "question": "what is the average of prices*",
        "query": "SELECT AVG ( price ) FROM schedule",
        "schema": "CREATE TABLE schedule (Price NUMBER); CREATE TABLE cinema (Cinema_ID NUMBER); CREATE TABLE film (Film_ID NUMBER);"
      },
      {
        "question": "what is the average of rank in series?",
        "query": "SELECT AVG ( rank_in_series ) FROM film",
        "schema": "CREATE TABLE cinema (Cinema_ID NUMBER); CREATE TABLE film (Rank_in_series NUMBER, Film_ID NUMBER); CREATE TABLE schedule (Film_ID NUMBER, Price NUMBER);"
      }
    ],
    [
      {
        "question": "How many film titles are there?",
        "query": "SELECT COUNT ( DISTINCT title ) FROM film",
        "schema": "CREATE TABLE schedule (Film_ID NUMBER); CREATE TABLE cinema (Name TEXT); CREATE TABLE film (Title TEXT, Film_ID NUMBER);"
      },
      {
        "question": "Please list all the film titles.",
        "query": "SELECT title FROM film",
        "schema": "CREATE TABLE schedule (Film_ID NUMBER); CREATE TABLE cinema (Name TEXT); CREATE TABLE film (Title TEXT, Film_ID NUMBER);"
      },
      {
        "question": "Please list each title with its maximum price.",
        "query": "SELECT t1.title, MAX ( price ) FROM film AS t1 JOIN schedule AS t2 ON t1.film_id = t2.film_id GROUP BY t1.film_id",
        "schema": "CREATE TABLE film (Title TEXT, Film_ID NUMBER); CREATE TABLE cinema (Name TEXT); CREATE TABLE schedule (Price NUMBER, Film_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show all the locations where some cinemas were opened in year 2010",
        "query": "SELECT LOCATION FROM cinema WHERE openning_year = 2010",
        "schema": "CREATE TABLE cinema (Location TEXT, Openning_year NUMBER, Name TEXT);"
      },
      {
        "question": "Show all the locations where some cinemas were opened in year 2011",
        "query": "SELECT LOCATION FROM cinema WHERE openning_year = 2011",
        "schema": "CREATE TABLE cinema (Location TEXT, Name TEXT, Openning_year NUMBER);"
      },
      {
        "question": "How many locations where cinemas were opened in both year 2010 and 2011?",
        "query": "SELECT COUNT ( * ) FROM ( SELECT LOCATION FROM cinema WHERE openning_year = 2010 INTERSECT SELECT LOCATION FROM cinema WHERE openning_year = 2011 )",
        "schema": "CREATE TABLE cinema (Name TEXT, Location TEXT, Openning_year NUMBER);"
      }
    ],
    [
      {
        "question": "How many different cinemas are on the list?",
        "query": "SELECT COUNT ( DISTINCT cinema_id ) FROM cinema",
        "schema": "CREATE TABLE schedule (Cinema_ID NUMBER); CREATE TABLE cinema (Name TEXT, Cinema_ID NUMBER); CREATE TABLE film (Film_ID NUMBER);"
      },
      {
        "question": "What is the average capacity of each cinema?",
        "query": "SELECT AVG ( capacity ) FROM cinema",
        "schema": "CREATE TABLE cinema (Name TEXT, Cinema_ID NUMBER, Capacity NUMBER); CREATE TABLE film (Film_ID NUMBER); CREATE TABLE schedule (Cinema_ID NUMBER);"
      },
      {
        "question": "Which cinema has the highest capacity, and which has the lowest capacity?",
        "query": "SELECT name FROM cinema WHERE capacity = ( SELECT MIN ( capacity ) FROM cinema ) OR capacity = ( SELECT MAX ( capacity ) FROM cinema )",
        "schema": "CREATE TABLE schedule (Cinema_ID NUMBER); CREATE TABLE cinema (Name TEXT, Cinema_ID NUMBER, Capacity NUMBER); CREATE TABLE film (Film_ID NUMBER);"
      },
      {
        "question": "Which locations have the most cinemas?",
        "query": "SELECT LOCATION FROM cinema GROUP BY LOCATION ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE film (Film_ID NUMBER); CREATE TABLE cinema (Capacity NUMBER, Name TEXT, Cinema_ID NUMBER, Location TEXT); CREATE TABLE schedule (Cinema_ID NUMBER);"
      },
      {
        "question": "Which location has the most cinemas opened in 2010 or later?",
        "query": "SELECT LOCATION FROM cinema WHERE openning_year > = 2010 GROUP BY LOCATION ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE cinema (Name TEXT, Cinema_ID NUMBER, Openning_year NUMBER, Location TEXT, Capacity NUMBER); CREATE TABLE film (Film_ID NUMBER); CREATE TABLE schedule (Cinema_ID NUMBER);"
      }
    ],
    [
      {
        "question": "can you show me a list of cinema names?",
        "query": "SELECT name FROM cinema",
        "schema": "CREATE TABLE film (Film_ID NUMBER, Title TEXT); CREATE TABLE cinema (Cinema_ID NUMBER, Name TEXT);"
      },
      {
        "question": "which one is the opened first?",
        "query": "SELECT name FROM cinema ORDER BY openning_year ASC LIMIT 1",
        "schema": "CREATE TABLE film (Film_ID NUMBER, Title TEXT); CREATE TABLE cinema (Cinema_ID NUMBER, Openning_year NUMBER, Name TEXT);"
      },
      {
        "question": "what is  the average of capacities?",
        "query": "SELECT AVG ( capacity ) FROM cinema",
        "schema": "CREATE TABLE cinema (Openning_year NUMBER, Capacity NUMBER, Name TEXT, Cinema_ID NUMBER); CREATE TABLE film (Title TEXT, Film_ID NUMBER);"
      },
      {
        "question": "show all the locations where no cinema has capacity over 800.",
        "query": "SELECT LOCATION FROM cinema EXCEPT SELECT LOCATION FROM cinema WHERE capacity > 800",
        "schema": "CREATE TABLE cinema (Capacity NUMBER, Openning_year NUMBER, Cinema_ID NUMBER, Location TEXT, Name TEXT); CREATE TABLE film (Film_ID NUMBER, Title TEXT);"
      }
    ],
    [
      {
        "question": "what is the capacity of Codling? | Did you mean the capacity of the cinema with a name of Coding? | yes",
        "query": "SELECT capacity FROM cinema WHERE name = \"Codling\"",
        "schema": "CREATE TABLE cinema (Name TEXT, Cinema_ID NUMBER, Capacity NUMBER); CREATE TABLE film (Film_ID NUMBER, Title TEXT);"
      },
      {
        "question": "Which is the largest capacity of cinema?",
        "query": "SELECT MAX ( capacity ) FROM cinema",
        "schema": "CREATE TABLE cinema (Name TEXT, Cinema_ID NUMBER, Capacity NUMBER, Location TEXT); CREATE TABLE film (Title TEXT, Film_ID NUMBER);"
      },
      {
        "question": "where is the location of Codling?",
        "query": "SELECT LOCATION FROM cinema WHERE name = \"Codling\"",
        "schema": "CREATE TABLE cinema (Location TEXT, Capacity NUMBER, Name TEXT, Cinema_ID NUMBER); CREATE TABLE film (Film_ID NUMBER, Title TEXT);"
      }
    ],
    [
      {
        "question": "How many movie theatres have a capacity of at least 300 people?",
        "query": "SELECT COUNT ( * ) FROM cinema WHERE capacity > = 300",
        "schema": "CREATE TABLE film (Film_ID NUMBER); CREATE TABLE cinema (Cinema_ID NUMBER, Capacity NUMBER, Name TEXT);"
      },
      {
        "question": "What are their names?",
        "query": "SELECT name FROM cinema WHERE capacity > = 300",
        "schema": "CREATE TABLE film (Film_ID NUMBER); CREATE TABLE cinema (Capacity NUMBER, Name TEXT, Cinema_ID NUMBER);"
      },
      {
        "question": "What are their specific locations?",
        "query": "SELECT LOCATION FROM cinema WHERE capacity > = 300",
        "schema": "CREATE TABLE film (Film_ID NUMBER); CREATE TABLE cinema (Capacity NUMBER, Location TEXT, Name TEXT, Cinema_ID NUMBER);"
      },
      {
        "question": "Which theatre has the largest capacity?",
        "query": "SELECT * FROM cinema ORDER BY capacity DESC LIMIT 1",
        "schema": "CREATE TABLE film (Film_ID NUMBER); CREATE TABLE cinema (Name TEXT, Location TEXT, Capacity NUMBER, Cinema_ID NUMBER);"
      },
      {
        "question": "Which year was Codling open?",
        "query": "SELECT openning_year FROM cinema WHERE name = \"Codling\"",
        "schema": "CREATE TABLE film (Film_ID NUMBER); CREATE TABLE cinema (Openning_year NUMBER, Location TEXT, Name TEXT, Cinema_ID NUMBER, Capacity NUMBER); CREATE TABLE schedule (Date TEXT);"
      }
    ],
    [
      {
        "question": "what is the total number of showtimes at each cinema?",
        "query": "SELECT t2.name , SUM ( t1.show_times_per_day ) FROM schedule AS t1 JOIN cinema AS t2 ON t1.cinema_id = t2.cinema_id GROUP BY t1.cinema_id",
        "schema": "CREATE TABLE film (Film_ID NUMBER); CREATE TABLE cinema (Cinema_ID NUMBER, Name TEXT, Location TEXT); CREATE TABLE schedule (Film_ID NUMBER, Cinema_ID NUMBER, Show_times_per_day NUMBER);"
      },
      {
        "question": "what cinema has the most showings in one day?",
        "query": "SELECT t2.name FROM schedule AS t1 JOIN cinema AS t2 ON t1.cinema_id = t2.cinema_id GROUP BY t1.cinema_id ORDER BY SUM ( t1.show_times_per_day ) DESC LIMIT 1",
        "schema": "CREATE TABLE cinema (Cinema_ID NUMBER, Location TEXT, Name TEXT); CREATE TABLE film (Film_ID NUMBER); CREATE TABLE schedule (Show_times_per_day NUMBER, Date TEXT, Cinema_ID NUMBER, Film_ID NUMBER);"
      },
      {
        "question": "What cinema has the highest capacity?",
        "query": "SELECT name FROM cinema ORDER BY capacity DESC LIMIT 1",
        "schema": "CREATE TABLE cinema (Capacity NUMBER, Name TEXT, Location TEXT, Cinema_ID NUMBER); CREATE TABLE film (Film_ID NUMBER); CREATE TABLE schedule (Date TEXT, Cinema_ID NUMBER, Show_times_per_day NUMBER, Film_ID NUMBER);"
      },
      {
        "question": "what cinema is in Cork county?",
        "query": "SELECT name FROM cinema WHERE LOCATION = \"County Cork\"",
        "schema": "CREATE TABLE cinema (Cinema_ID NUMBER, Name TEXT, Capacity NUMBER, Location TEXT); CREATE TABLE schedule (Film_ID NUMBER, Show_times_per_day NUMBER, Date TEXT, Cinema_ID NUMBER); CREATE TABLE film (Film_ID NUMBER);"
      }
    ],
    [
      {
        "question": "what is the capacity of Codling Cinema",
        "query": "SELECT capacity FROM cinema WHERE name = \"Codling\"",
        "schema": "CREATE TABLE cinema (Capacity NUMBER, Name TEXT, Cinema_ID NUMBER, Location TEXT); CREATE TABLE film (Title TEXT, Film_ID NUMBER, Directed_by TEXT);"
      },
      {
        "question": "what year was it opened?",
        "query": "SELECT openning_year FROM cinema WHERE name = \"Codling\"",
        "schema": "CREATE TABLE film (Film_ID NUMBER, Title TEXT, Directed_by TEXT); CREATE TABLE cinema (Cinema_ID NUMBER, Openning_year NUMBER, Location TEXT, Name TEXT, Capacity NUMBER);"
      },
      {
        "question": "where is it located?",
        "query": "SELECT LOCATION FROM cinema WHERE name = \"Codling\"",
        "schema": "CREATE TABLE cinema (Location TEXT, Name TEXT, Openning_year NUMBER, Cinema_ID NUMBER, Capacity NUMBER); CREATE TABLE film (Film_ID NUMBER, Directed_by TEXT, Title TEXT);"
      }
    ],
    [
      {
        "question": "How many directors have multiple show times?",
        "query": "SELECT COUNT ( DISTINCT t2.directed_by ) FROM schedule AS t1 JOIN film AS t2 ON t1.film_id = t2.film_id WHERE t1.show_times_per_day>1",
        "schema": "CREATE TABLE film (Film_ID NUMBER, Directed_by TEXT, Production_code TEXT); CREATE TABLE schedule (Film_ID NUMBER, Show_times_per_day NUMBER, Cinema_ID NUMBER); CREATE TABLE cinema (Cinema_ID NUMBER);"
      },
      {
        "question": "What are the names of the two directors who have multiple show times?",
        "query": "SELECT DISTINCT t2.directed_by FROM schedule AS t1 JOIN film AS t2 ON t1.film_id = t2.film_id WHERE t1.show_times_per_day>1",
        "schema": "CREATE TABLE cinema (Cinema_ID NUMBER); CREATE TABLE schedule (Show_times_per_day NUMBER, Cinema_ID NUMBER, Film_ID NUMBER); CREATE TABLE film (Film_ID NUMBER, Production_code TEXT, Title TEXT, Directed_by TEXT);"
      },
      {
        "question": "How many show times does BIll Schreiner have",
        "query": "SELECT SUM ( t1.show_times_per_day ) FROM schedule AS t1 JOIN film AS t2 ON t1.film_id = t2.film_id WHERE t2.directed_by = 'Bill Schreiner' GROUP BY t2.directed_by",
        "schema": "CREATE TABLE schedule (Cinema_ID NUMBER, Show_times_per_day NUMBER, Film_ID NUMBER); CREATE TABLE cinema (Cinema_ID NUMBER); CREATE TABLE film (Title TEXT, Production_code TEXT, Film_ID NUMBER, Directed_by TEXT);"
      },
      {
        "question": "How many show times does Jesus Salvador Trevino have?",
        "query": "SELECT SUM ( t1.show_times_per_day ) FROM schedule AS t1 JOIN film AS t2 ON t1.film_id = t2.film_id WHERE t2.directed_by = 'Jesus Salvador Trevi\u00f1o' GROUP BY t2.directed_by",
        "schema": "CREATE TABLE film (Directed_by TEXT, Film_ID NUMBER, Title TEXT, Production_code TEXT); CREATE TABLE cinema (Cinema_ID NUMBER); CREATE TABLE schedule (Film_ID NUMBER, Cinema_ID NUMBER, Show_times_per_day NUMBER);"
      },
      {
        "question": "Which show director has the largest number of show times in total?",
        "query": "SELECT t2.directed_by FROM schedule AS t1 JOIN film AS t2 ON t1.film_id = t2.film_id GROUP BY t2.directed_by ORDER BY SUM ( t1.show_times_per_day ) DESC LIMIT 1",
        "schema": "CREATE TABLE cinema (Cinema_ID NUMBER); CREATE TABLE schedule (Show_times_per_day NUMBER, Film_ID NUMBER, Cinema_ID NUMBER); CREATE TABLE film (Production_code TEXT, Title TEXT, Film_ID NUMBER, Directed_by TEXT);"
      }
    ]
  ],
  "ship_1": [
    [
      {
        "question": "Show me the captain ranks",
        "query": "SELECT rank FROM captain",
        "schema": "CREATE TABLE captain (Rank TEXT, Name TEXT, Captain_ID NUMBER); CREATE TABLE Ship (Ship_ID NUMBER);"
      },
      {
        "question": "Show me the captain rank that has no captain in Third-rate ship of the line class",
        "query": "SELECT rank FROM captain WHERE CLASS ! = \"Third-rate ship of the line\"",
        "schema": "CREATE TABLE captain (Rank TEXT, Captain_ID NUMBER, Ship_ID NUMBER, Name TEXT, Class TEXT); CREATE TABLE Ship (Class TEXT, Ship_ID NUMBER, Type TEXT);"
      }
    ],
    [
      {
        "question": "What are the ship id of HM Cutter Avenger?",
        "query": "SELECT ship_id FROM ship WHERE name = \"HM Cutter Avenger\"",
        "schema": "CREATE TABLE Ship (Name TEXT, Ship_ID NUMBER); CREATE TABLE captain (Ship_ID NUMBER);"
      },
      {
        "question": "what type of Flag is used by HMS Manxman?",
        "query": "SELECT flag FROM ship WHERE name = \"HMS Manxman\"",
        "schema": "CREATE TABLE Ship (Ship_ID NUMBER, Flag TEXT, Type TEXT, Name TEXT); CREATE TABLE captain (Name TEXT, Ship_ID NUMBER);"
      },
      {
        "question": "what are the Built Year of HMS Gorgon?",
        "query": "SELECT built_year FROM ship WHERE name = \"HMS Gorgon\"",
        "schema": "CREATE TABLE Ship (Name TEXT, Ship_ID NUMBER, Flag TEXT, Type TEXT, Built_Year NUMBER); CREATE TABLE captain (Name TEXT, Ship_ID NUMBER);"
      },
      {
        "question": "Find the ship type that are used by both ships with Panama and Malta flags?",
        "query": "SELECT TYPE FROM ship WHERE flag = 'Panama' INTERSECT SELECT TYPE FROM ship WHERE flag = 'Malta'",
        "schema": "CREATE TABLE captain (Ship_ID NUMBER, Name TEXT); CREATE TABLE Ship (Name TEXT, Built_Year NUMBER, Ship_ID NUMBER, Flag TEXT, Type TEXT);"
      }
    ],
    [
      {
        "question": "what ship is steered by a captain with lieutenant rank? | do you want to return the names of these ships? | yes",
        "query": "SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id = t2.ship_id WHERE t2.rank = 'Lieutenant'",
        "schema": "CREATE TABLE Ship (Ship_ID NUMBER, Name TEXT); CREATE TABLE captain (Rank TEXT, Name TEXT, Ship_ID NUMBER);"
      },
      {
        "question": "give me the ship id",
        "query": "SELECT t1.ship_id FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id = t2.ship_id WHERE t2.rank = 'Lieutenant'",
        "schema": "CREATE TABLE Ship (Ship_ID NUMBER, Name TEXT); CREATE TABLE captain (Captain_ID NUMBER, Ship_ID NUMBER, Rank TEXT, Name TEXT);"
      },
      {
        "question": "what is the captain's age?",
        "query": "SELECT t2.age FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id = t2.ship_id WHERE t2.rank = 'Lieutenant'",
        "schema": "CREATE TABLE Ship (Ship_ID NUMBER, Name TEXT); CREATE TABLE captain (Name TEXT, Ship_ID NUMBER, Captain_ID NUMBER, age TEXT, Rank TEXT);"
      }
    ],
    [
      {
        "question": "Which flag is least widely used among all ships?",
        "query": "SELECT flag FROM ship GROUP BY flag ORDER BY COUNT ( * ) LIMIT 1",
        "schema": "CREATE TABLE Ship (Ship_ID NUMBER, Flag TEXT); CREATE TABLE captain (Ship_ID NUMBER);"
      },
      {
        "question": "How many flags in this table?",
        "query": "SELECT COUNT ( flag ) FROM ship",
        "schema": "CREATE TABLE Ship (Ship_ID NUMBER, Flag TEXT); CREATE TABLE captain (Ship_ID NUMBER);"
      },
      {
        "question": "How many built year same in this table? | did you mean 'How many built year saved this table'? | Yes.",
        "query": "SELECT COUNT ( DISTINCT built_year ) FROM ship",
        "schema": "CREATE TABLE captain (Ship_ID NUMBER); CREATE TABLE Ship (Flag TEXT, Built_Year NUMBER, Ship_ID NUMBER);"
      },
      {
        "question": "How many names in this table?",
        "query": "SELECT COUNT ( DISTINCT name ) FROM ship",
        "schema": "CREATE TABLE captain (Ship_ID NUMBER); CREATE TABLE Ship (Name TEXT, Ship_ID NUMBER, Built_Year NUMBER, Flag TEXT);"
      },
      {
        "question": "How many types in this table?",
        "query": "SELECT COUNT ( DISTINCT TYPE ) FROM ship",
        "schema": "CREATE TABLE captain (Ship_ID NUMBER); CREATE TABLE Ship (Flag TEXT, Ship_ID NUMBER, Built_Year NUMBER, Type TEXT, Name TEXT);"
      }
    ],
    [
      {
        "question": "what are the names and classes of the ships that do not have any captain yet?",
        "query": "SELECT name , CLASS FROM ship WHERE ship_id NOT IN ( SELECT ship_id FROM captain )",
        "schema": "CREATE TABLE captain (Ship_ID NUMBER, Class TEXT, Name TEXT); CREATE TABLE Ship (Ship_ID NUMBER, Type TEXT, Name TEXT, Class TEXT);"
      },
      {
        "question": "What are the names of the captains that have classes?",
        "query": "SELECT name FROM captain WHERE CLASS ! = 'NULL'",
        "schema": "CREATE TABLE captain (Ship_ID NUMBER, Captain_ID NUMBER, Class TEXT, Name TEXT); CREATE TABLE Ship (Class TEXT, Name TEXT, Type TEXT, Ship_ID NUMBER);"
      },
      {
        "question": "What is the id for HMS Gorgon? | Did  you mean  ship  id? | yes",
        "query": "SELECT ship_id FROM ship WHERE name = \"HMS Gorgon\"",
        "schema": "CREATE TABLE captain (Captain_ID NUMBER, Class TEXT, Ship_ID NUMBER, Name TEXT); CREATE TABLE Ship (Class TEXT, Type TEXT, Ship_ID NUMBER, Name TEXT);"
      },
      {
        "question": "How many classes are there? | Did  you  mean  the number of distinct  type classes of ships? | yes",
        "query": "SELECT COUNT ( DISTINCT CLASS ) FROM ship",
        "schema": "CREATE TABLE captain (Name TEXT, Class TEXT, Captain_ID NUMBER, Ship_ID NUMBER); CREATE TABLE Ship (Name TEXT, Class TEXT, Ship_ID NUMBER, Type TEXT);"
      },
      {
        "question": "What is HMS Gorgon's rank?",
        "query": "SELECT t1.rank FROM captain AS t1 JOIN ship AS t2 ON t1.ship_id = t2.ship_id WHERE t2.name = \"HMS Gorgon\"",
        "schema": "CREATE TABLE Ship (Type TEXT, Class TEXT, Ship_ID NUMBER, Name TEXT); CREATE TABLE captain (Class TEXT, Name TEXT, Rank TEXT, Captain_ID NUMBER, Ship_ID NUMBER);"
      }
    ],
    [
      {
        "question": "How many ships in this table?",
        "query": "SELECT COUNT ( * ) FROM ship",
        "schema": "CREATE TABLE captain (Ship_ID NUMBER); CREATE TABLE Ship (Ship_ID NUMBER, Type TEXT, Name TEXT, Class TEXT);"
      },
      {
        "question": "How many captains in this table?",
        "query": "SELECT COUNT ( * ) FROM captain",
        "schema": "CREATE TABLE Ship (Type TEXT, Name TEXT, Class TEXT, Ship_ID NUMBER); CREATE TABLE captain (Captain_ID NUMBER, Ship_ID NUMBER, Name TEXT, Rank TEXT);"
      },
      {
        "question": "Who is the most aged captain in this table?",
        "query": "SELECT captain_id FROM captain ORDER BY age DESC LIMIT 1",
        "schema": "CREATE TABLE captain (Name TEXT, Captain_ID NUMBER, age TEXT, Ship_ID NUMBER, Rank TEXT); CREATE TABLE Ship (Type TEXT, Ship_ID NUMBER, Class TEXT, Name TEXT);"
      },
      {
        "question": "How many different ranks in this table?",
        "query": "SELECT COUNT ( DISTINCT rank ) FROM captain",
        "schema": "CREATE TABLE captain (Captain_ID NUMBER, age TEXT, Name TEXT, Ship_ID NUMBER, Rank TEXT); CREATE TABLE Ship (Class TEXT, Type TEXT, Ship_ID NUMBER, Name TEXT);"
      }
    ],
    [
      {
        "question": "How many captains does third-rate ship of the line have?",
        "query": "SELECT COUNT ( * ) FROM captain WHERE CLASS = 'Third-rate ship of the line'",
        "schema": "CREATE TABLE captain (Rank TEXT, Class TEXT, Captain_ID NUMBER, Ship_ID NUMBER); CREATE TABLE Ship (Ship_ID NUMBER, Name TEXT, Type TEXT, Class TEXT);"
      }
    ],
    [
      {
        "question": "What are the names of all ships?",
        "query": "SELECT name FROM ship",
        "schema": "CREATE TABLE Ship (Name TEXT, Ship_ID NUMBER, Type TEXT); CREATE TABLE captain (Ship_ID NUMBER);"
      },
      {
        "question": "And what about all the classes?",
        "query": "SELECT CLASS FROM ship",
        "schema": "CREATE TABLE Ship (Class TEXT, Name TEXT, Ship_ID NUMBER, Type TEXT); CREATE TABLE captain (Class TEXT, Ship_ID NUMBER);"
      },
      {
        "question": "Can I see list of names and classes of ships that don't have any captain?",
        "query": "SELECT name , CLASS FROM ship WHERE ship_id NOT IN ( SELECT ship_id FROM captain )",
        "schema": "CREATE TABLE Ship (Ship_ID NUMBER, Class TEXT, Type TEXT, Name TEXT); CREATE TABLE captain (Name TEXT, Ship_ID NUMBER, Class TEXT);"
      }
    ],
    [
      {
        "question": "how many ships have more than one captain?",
        "query": "SELECT COUNT ( * ) FROM ( SELECT * FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id = t2.ship_id GROUP BY t2.ship_id HAVING COUNT ( * ) > 1 )",
        "schema": "CREATE TABLE captain (Ship_ID NUMBER); CREATE TABLE Ship (Class TEXT, Ship_ID NUMBER, Name TEXT, Type TEXT);"
      },
      {
        "question": "how many ships have a single captain?",
        "query": "SELECT COUNT ( * ) FROM ( SELECT * FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id = t2.ship_id GROUP BY t2.ship_id HAVING COUNT ( * ) = 1 )",
        "schema": "CREATE TABLE captain (Ship_ID NUMBER, Captain_ID NUMBER); CREATE TABLE Ship (Class TEXT, Name TEXT, Type TEXT, Ship_ID NUMBER);"
      },
      {
        "question": "what is the age of the oldest captain?",
        "query": "SELECT age FROM captain ORDER BY age DESC LIMIT 1",
        "schema": "CREATE TABLE Ship (Name TEXT, Type TEXT, Ship_ID NUMBER, Class TEXT); CREATE TABLE captain (Ship_ID NUMBER, Captain_ID NUMBER, Name TEXT, age TEXT);"
      },
      {
        "question": "what about the youngest?",
        "query": "SELECT age FROM captain ORDER BY age LIMIT 1",
        "schema": "CREATE TABLE Ship (Ship_ID NUMBER, Name TEXT, Class TEXT, Type TEXT); CREATE TABLE captain (Name TEXT, age TEXT, Ship_ID NUMBER, Captain_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Who is the oldest in the list?",
        "query": "SELECT name FROM captain ORDER BY age DESC LIMIT 1",
        "schema": "CREATE TABLE Ship (Name TEXT, Ship_ID NUMBER); CREATE TABLE captain (Captain_ID NUMBER, Name TEXT, age TEXT);"
      },
      {
        "question": "what is the rank of Captain Gilbert Pears?",
        "query": "SELECT rank FROM captain WHERE name = \"Captain Gilbert Pears\"",
        "schema": "CREATE TABLE Ship (Ship_ID NUMBER, Name TEXT); CREATE TABLE captain (Name TEXT, age TEXT, Rank TEXT, Captain_ID NUMBER);"
      },
      {
        "question": "What's about Captain Sir Henry Langford?",
        "query": "SELECT rank FROM captain WHERE name = \"Captain Henry Dumaresq\"",
        "schema": "CREATE TABLE Ship (Name TEXT, Ship_ID NUMBER); CREATE TABLE captain (age TEXT, Captain_ID NUMBER, Name TEXT, Rank TEXT);"
      }
    ],
    [
      {
        "question": "List name of ships?",
        "query": "SELECT name FROM ship",
        "schema": "CREATE TABLE Ship (Type TEXT, Name TEXT, Ship_ID NUMBER); CREATE TABLE captain (Ship_ID NUMBER);"
      },
      {
        "question": "Show flags of ships?",
        "query": "SELECT name, flag FROM ship",
        "schema": "CREATE TABLE captain (Ship_ID NUMBER); CREATE TABLE Ship (Name TEXT, Flag TEXT, Type TEXT, Ship_ID NUMBER);"
      },
      {
        "question": "Name of ships not steered by by any captain with Midshipman rank?",
        "query": "SELECT name FROM ship WHERE ship_id NOT IN ( SELECT ship_id FROM captain WHERE rank = 'Midshipman' )",
        "schema": "CREATE TABLE Ship (Name TEXT, Flag TEXT, Type TEXT, Ship_ID NUMBER); CREATE TABLE captain (Rank TEXT, Ship_ID NUMBER, Name TEXT);"
      },
      {
        "question": "Flags of ships not steered by any captain with Midshipman rank?",
        "query": "SELECT flag FROM ship WHERE ship_id NOT IN ( SELECT ship_id FROM captain WHERE rank = 'Midshipman' )",
        "schema": "CREATE TABLE captain (Captain_ID NUMBER, Rank TEXT, Ship_ID NUMBER, Name TEXT); CREATE TABLE Ship (Type TEXT, Ship_ID NUMBER, Name TEXT, Flag TEXT);"
      },
      {
        "question": "Okay. Name and flags of ships not steered by any captain of Midshipman rank?",
        "query": "SELECT name, flag FROM ship WHERE ship_id NOT IN ( SELECT ship_id FROM captain WHERE rank = 'Midshipman' )",
        "schema": "CREATE TABLE Ship (Flag TEXT, Ship_ID NUMBER, Name TEXT, Type TEXT); CREATE TABLE captain (Ship_ID NUMBER, Name TEXT, Captain_ID NUMBER, Rank TEXT);"
      }
    ],
    [
      {
        "question": "Who is the oldest captain?",
        "query": "SELECT name FROM captain ORDER BY age DESC LIMIT 1",
        "schema": "CREATE TABLE captain (age TEXT, Rank TEXT, Name TEXT, Captain_ID NUMBER);"
      },
      {
        "question": "What about the youngest captain?",
        "query": "SELECT name FROM captain ORDER BY age ASC LIMIT 1",
        "schema": "CREATE TABLE captain (Captain_ID NUMBER, Name TEXT, age TEXT, Rank TEXT);"
      },
      {
        "question": "How many captains are there younger than 50 in each rank?",
        "query": "SELECT COUNT ( * ) , rank FROM captain WHERE age < 50 GROUP BY rank",
        "schema": "CREATE TABLE captain (Name TEXT, Rank TEXT, age TEXT, Captain_ID NUMBER);"
      }
    ],
    [
      {
        "question": "let me know the name of the youngest captain",
        "query": "SELECT name FROM captain ORDER BY age LIMIT 1",
        "schema": "CREATE TABLE captain (Rank TEXT, Name TEXT, age TEXT, Captain_ID NUMBER);"
      },
      {
        "question": "How young is he?",
        "query": "SELECT age FROM captain ORDER BY age LIMIT 1",
        "schema": "CREATE TABLE captain (Rank TEXT, age TEXT, Captain_ID NUMBER, Name TEXT);"
      },
      {
        "question": "Now who is the oldest captain?",
        "query": "SELECT name FROM captain ORDER BY age DESC LIMIT 1",
        "schema": "CREATE TABLE captain (Rank TEXT, age TEXT, Name TEXT, Captain_ID NUMBER);"
      }
    ],
    [
      {
        "question": "How many ships are there?",
        "query": "SELECT COUNT ( * ) FROM ship",
        "schema": "CREATE TABLE Ship (Ship_ID NUMBER, Name TEXT, Class TEXT, Type TEXT); CREATE TABLE captain (Ship_ID NUMBER);"
      },
      {
        "question": "Out of them which ship names have more than one captain?",
        "query": "SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id = t2.ship_id GROUP BY t2.ship_id HAVING COUNT ( * ) > 1",
        "schema": "CREATE TABLE Ship (Type TEXT, Name TEXT, Class TEXT, Ship_ID NUMBER); CREATE TABLE captain (Name TEXT, Ship_ID NUMBER);"
      },
      {
        "question": "How about ship names with only one captain?",
        "query": "SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id = t2.ship_id GROUP BY t2.ship_id HAVING COUNT ( * ) = 1",
        "schema": "CREATE TABLE captain (Name TEXT, Ship_ID NUMBER); CREATE TABLE Ship (Ship_ID NUMBER, Name TEXT, Type TEXT, Class TEXT);"
      }
    ],
    [
      {
        "question": "What are the ships that are steered by a captain with Midshipman rank?",
        "query": "SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id = t2.ship_id WHERE t2.rank = 'Midshipman'",
        "schema": "CREATE TABLE Ship (Type TEXT, Ship_ID NUMBER, Name TEXT, Flag TEXT); CREATE TABLE captain (Rank TEXT, Ship_ID NUMBER);"
      },
      {
        "question": "What are the ships that are steered by a captain with Lieutenant rank?",
        "query": "SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id = t2.ship_id WHERE t2.rank = 'Lieutenant'",
        "schema": "CREATE TABLE Ship (Flag TEXT, Name TEXT, Ship_ID NUMBER, Type TEXT); CREATE TABLE captain (Rank TEXT, Captain_ID NUMBER, Name TEXT, Ship_ID NUMBER);"
      },
      {
        "question": "Are there any captains that are included in both lists? | Did you mean ships that are included in both lists? | Oh sorry, yes ships that are included in both lists",
        "query": "SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id = t2.ship_id WHERE t2.rank = 'Midshipman' INTERSECT SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id = t2.ship_id WHERE t2.rank = 'Lieutenant'",
        "schema": "CREATE TABLE captain (Captain_ID NUMBER, Rank TEXT, Name TEXT, Ship_ID NUMBER); CREATE TABLE Ship (Name TEXT, Flag TEXT, Type TEXT, Ship_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What rank is Captain Conway?",
        "query": "SELECT rank FROM captain WHERE name like '%Conway%'",
        "schema": "CREATE TABLE captain (Captain_ID NUMBER, Name TEXT, Rank TEXT);"
      },
      {
        "question": "What is the average age of the midshipmans",
        "query": "SELECT AVG ( age ) FROM captain WHERE rank = 'Midshipman'",
        "schema": "CREATE TABLE captain (Name TEXT, age TEXT, Captain_ID NUMBER, Rank TEXT);"
      },
      {
        "question": "What class of captain named Lieutenant Hugh Bolitho?",
        "query": "SELECT CLASS FROM captain WHERE name = 'Lieutenant Hugh Bolitho'",
        "schema": "CREATE TABLE captain (Rank TEXT, Name TEXT, Class TEXT, age TEXT, Captain_ID NUMBER); CREATE TABLE Ship (Class TEXT, Name TEXT);"
      }
    ],
    [
      {
        "question": "how many ship there",
        "query": "SELECT COUNT ( * ) FROM ship",
        "schema": "CREATE TABLE Ship (Name TEXT, Type TEXT, Class TEXT, Ship_ID NUMBER); CREATE TABLE captain (Ship_ID NUMBER);"
      },
      {
        "question": "what is the name of ship id 2",
        "query": "SELECT name FROM ship WHERE ship_id = 2",
        "schema": "CREATE TABLE captain (Ship_ID NUMBER); CREATE TABLE Ship (Ship_ID NUMBER, Name TEXT, Type TEXT, Class TEXT);"
      },
      {
        "question": "what is the built year of the ship id 3",
        "query": "SELECT built_year FROM ship WHERE ship_id = 3",
        "schema": "CREATE TABLE captain (Ship_ID NUMBER); CREATE TABLE Ship (Ship_ID NUMBER, Class TEXT, Built_Year NUMBER, Name TEXT, Type TEXT);"
      },
      {
        "question": "what is the class of the ship id 1",
        "query": "SELECT CLASS FROM ship WHERE ship_id = 1",
        "schema": "CREATE TABLE captain (Class TEXT, Ship_ID NUMBER); CREATE TABLE Ship (Class TEXT, Ship_ID NUMBER, Name TEXT, Built_Year NUMBER, Type TEXT);"
      },
      {
        "question": "what is the flag of the ship id 1",
        "query": "SELECT flag FROM ship WHERE ship_id = 1",
        "schema": "CREATE TABLE captain (Class TEXT, Ship_ID NUMBER); CREATE TABLE Ship (Type TEXT, Name TEXT, Built_Year NUMBER, Ship_ID NUMBER, Flag TEXT, Class TEXT);"
      }
    ],
    [
      {
        "question": "Who are the captains? | Do you mean you want the name of captain? | Yes, what are the captains names",
        "query": "SELECT t1.name FROM captain AS t1",
        "schema": "CREATE TABLE captain (Name TEXT, Captain_ID NUMBER);"
      },
      {
        "question": "Who is the youngest captain?",
        "query": "SELECT t1.name FROM captain AS t1 ORDER BY t1.age LIMIT 1",
        "schema": "CREATE TABLE captain (Captain_ID NUMBER, Rank TEXT, age TEXT, Name TEXT);"
      },
      {
        "question": "What ship does Captain Henry steer? | Do you mean the name of ships of Captain Henry? | Yes the name of the ship of Captain Henry",
        "query": "SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id = t2.ship_id WHERE t2.name like '%Henry%'",
        "schema": "CREATE TABLE captain (Rank TEXT, Ship_ID NUMBER, age TEXT, Name TEXT, Captain_ID NUMBER); CREATE TABLE Ship (Name TEXT, Ship_ID NUMBER);"
      },
      {
        "question": "Which is the ship of Captain Henry Dumaresq?",
        "query": "SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id = t2.ship_id WHERE t2.name like '%Henry Dumaresq%'",
        "schema": "CREATE TABLE captain (Name TEXT, age TEXT, Captain_ID NUMBER, Rank TEXT, Ship_ID NUMBER); CREATE TABLE Ship (Ship_ID NUMBER, Name TEXT);"
      }
    ]
  ],
  "machine_repair": [
    [
      {
        "question": "Who are the technicians from team \"CLE\" and \"CWS\"?",
        "query": "SELECT name FROM technician WHERE team = 'CLE' OR team = 'CWS'",
        "schema": "CREATE TABLE repair (repair_ID NUMBER); CREATE TABLE technician (Name TEXT, technician_id NUMBER, Team TEXT); CREATE TABLE machine (Team TEXT, Machine_ID NUMBER); CREATE TABLE repair_assignment (technician_id NUMBER);"
      },
      {
        "question": "Please show me the starting years for them",
        "query": "SELECT starting_year FROM technician WHERE team = 'CLE' OR team = 'CWS'",
        "schema": "CREATE TABLE machine (Machine_ID NUMBER, Team TEXT, Making_Year NUMBER); CREATE TABLE technician (technician_id NUMBER, Team TEXT, Name TEXT, Starting_Year NUMBER); CREATE TABLE repair (repair_ID NUMBER); CREATE TABLE repair_assignment (technician_id NUMBER);"
      },
      {
        "question": "What years are shared?",
        "query": "SELECT starting_year FROM technician WHERE team = \"CLE\" INTERSECT SELECT starting_year FROM technician WHERE team = \"CWS\"",
        "schema": "CREATE TABLE technician (Team TEXT, Starting_Year NUMBER, Name TEXT, technician_id NUMBER); CREATE TABLE repair_assignment (technician_id NUMBER); CREATE TABLE repair (repair_ID NUMBER); CREATE TABLE machine (Making_Year NUMBER, Machine_ID NUMBER, Team TEXT);"
      },
      {
        "question": "Can you also give me the minimum and maximum starting years?",
        "query": "SELECT MAX ( starting_year ) ,MIN ( starting_year ) FROM technician",
        "schema": "CREATE TABLE technician (Starting_Year NUMBER, technician_id NUMBER, Team TEXT, Name TEXT); CREATE TABLE machine (Machine_ID NUMBER, Making_Year NUMBER, Team TEXT); CREATE TABLE repair_assignment (technician_id NUMBER); CREATE TABLE repair (repair_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Who are the technicians?",
        "query": "SELECT name FROM technician",
        "schema": "CREATE TABLE machine (Machine_ID NUMBER); CREATE TABLE technician (technician_id NUMBER, Name TEXT); CREATE TABLE repair_assignment (technician_id NUMBER);"
      },
      {
        "question": "Show me which team of machine each technician is assigned.",
        "query": "SELECT t3.name , t2.team FROM repair_assignment AS t1 JOIN machine AS t2 ON t1.machine_id = t2.machine_id JOIN technician AS t3 ON t1.technician_id = t3.technician_id",
        "schema": "CREATE TABLE repair_assignment (Machine_ID NUMBER, technician_id NUMBER); CREATE TABLE technician (Name TEXT, technician_id NUMBER, Team TEXT); CREATE TABLE machine (Machine_ID NUMBER, Team TEXT);"
      }
    ],
    [
      {
        "question": "show names of technicians by order of quality rank of machine they are assigned from worst to best",
        "query": "SELECT t3.name FROM repair_assignment AS t1 JOIN machine AS t2 ON t1.machine_id = t2.machine_id JOIN technician AS t3 ON t1.technician_id = t3.technician_id ORDER BY t2.quality_rank",
        "schema": "CREATE TABLE technician (Name TEXT, technician_id NUMBER); CREATE TABLE machine (quality_rank NUMBER, Machine_ID NUMBER); CREATE TABLE repair_assignment (technician_id NUMBER, Machine_ID NUMBER);"
      },
      {
        "question": "Which technician is the oldest? | Do you mean the id of the oldest technician? | What is the Name of the oldest technician?",
        "query": "SELECT name FROM technician ORDER BY age DESC LIMIT 1",
        "schema": "CREATE TABLE technician (Age NUMBER, Name TEXT, technician_id NUMBER); CREATE TABLE repair_assignment (technician_id NUMBER, Machine_ID NUMBER); CREATE TABLE repair (repair_ID NUMBER, name TEXT); CREATE TABLE machine (quality_rank NUMBER, Machine_ID NUMBER);"
      },
      {
        "question": "What is the name of the Team with the most number of value points?",
        "query": "SELECT team FROM machine ORDER BY value_points DESC LIMIT 1",
        "schema": "CREATE TABLE repair_assignment (Machine_ID NUMBER, technician_id NUMBER); CREATE TABLE machine (value_points NUMBER, quality_rank NUMBER, Team TEXT, Machine_ID NUMBER); CREATE TABLE technician (Age NUMBER, technician_id NUMBER, Team TEXT, Name TEXT); CREATE TABLE repair (repair_ID NUMBER, name TEXT);"
      },
      {
        "question": "What was the Making Year of the Machine series With the lowest quality rank?",
        "query": "SELECT making_year FROM machine ORDER BY quality_rank LIMIT 1",
        "schema": "CREATE TABLE repair (repair_ID NUMBER, name TEXT); CREATE TABLE machine (quality_rank NUMBER, Team TEXT, Making_Year NUMBER, Machine_series TEXT, value_points NUMBER, Machine_ID NUMBER); CREATE TABLE repair_assignment (technician_id NUMBER, Machine_ID NUMBER); CREATE TABLE technician (technician_id NUMBER, Age NUMBER, Starting_Year NUMBER, Name TEXT, Team TEXT);"
      }
    ],
    [
      {
        "question": "Hello!  How many technicians are there in total?",
        "query": "SELECT COUNT ( * ) FROM technician",
        "schema": "CREATE TABLE machine (Machine_ID NUMBER); CREATE TABLE technician (Name TEXT, technician_id NUMBER, Team TEXT); CREATE TABLE repair_assignment (Machine_ID NUMBER, repair_ID NUMBER, technician_id NUMBER); CREATE TABLE repair (repair_ID NUMBER);"
      },
      {
        "question": "Can you show me a list of all of the technicians names the machines they are assigned to repair? | Did you want the names of technicians and the ids of machines they are assigned to repair? | Yes!  Can you show me their names and their machine ids that they are assigned to repair?",
        "query": "SELECT t2.name , t1.machine_id FROM repair_assignment AS t1 JOIN technician AS t2 ON t1.technician_id = t2.technician_id",
        "schema": "CREATE TABLE technician (Name TEXT, technician_id NUMBER, Team TEXT); CREATE TABLE repair (repair_ID NUMBER, name TEXT); CREATE TABLE machine (Machine_ID NUMBER); CREATE TABLE repair_assignment (repair_ID NUMBER, technician_id NUMBER, Machine_ID NUMBER);"
      },
      {
        "question": "Great!  Also add to that list the starting year and age of each technician?",
        "query": "SELECT t2.name , t1.machine_id,t2.starting_year,t2.age FROM repair_assignment AS t1 JOIN technician AS t2 ON t1.technician_id = t2.technician_id",
        "schema": "CREATE TABLE technician (Starting_Year NUMBER, Age NUMBER, technician_id NUMBER, Name TEXT, Team TEXT); CREATE TABLE repair (name TEXT, repair_ID NUMBER); CREATE TABLE machine (Machine_ID NUMBER); CREATE TABLE repair_assignment (technician_id NUMBER, Machine_ID NUMBER, repair_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What are the names of technicians from \"CLE\"?",
        "query": "SELECT name FROM technician WHERE team = \"CLE\"",
        "schema": "CREATE TABLE technician (technician_id NUMBER, Team TEXT, Name TEXT); CREATE TABLE repair (name TEXT);"
      },
      {
        "question": "What about names from \"CWS\"?",
        "query": "SELECT name FROM technician WHERE team = \"CWS\"",
        "schema": "CREATE TABLE repair (name TEXT); CREATE TABLE technician (technician_id NUMBER, Team TEXT, Name TEXT);"
      },
      {
        "question": "And what are starting years shared by technicians from both teams?",
        "query": "SELECT starting_year FROM technician WHERE team = \"CLE\" INTERSECT SELECT starting_year FROM technician WHERE team = \"CWS\"",
        "schema": "CREATE TABLE repair (name TEXT); CREATE TABLE technician (Team TEXT, Starting_Year NUMBER, Name TEXT, technician_id NUMBER);"
      }
    ],
    [
      {
        "question": "List out the all technician name",
        "query": "SELECT name FROM technician",
        "schema": "CREATE TABLE repair (name TEXT, repair_ID NUMBER); CREATE TABLE technician (Name TEXT, technician_id NUMBER); CREATE TABLE repair_assignment (technician_id NUMBER, repair_ID NUMBER); CREATE TABLE machine (Machine_ID NUMBER);"
      },
      {
        "question": "list out the all machine id",
        "query": "SELECT machine_id FROM repair_assignment",
        "schema": "CREATE TABLE technician (technician_id NUMBER, Name TEXT); CREATE TABLE repair (name TEXT, repair_ID NUMBER); CREATE TABLE machine (Machine_ID NUMBER); CREATE TABLE repair_assignment (Machine_ID NUMBER, technician_id NUMBER, repair_ID NUMBER);"
      },
      {
        "question": "list out the all technician age",
        "query": "SELECT technician_id, age FROM technician",
        "schema": "CREATE TABLE technician (Name TEXT, technician_id NUMBER, Age NUMBER); CREATE TABLE machine (Machine_ID NUMBER); CREATE TABLE repair_assignment (technician_id NUMBER, Machine_ID NUMBER, repair_ID NUMBER); CREATE TABLE repair (repair_ID NUMBER, name TEXT);"
      },
      {
        "question": "list the name of technician who have not been assigned to repair machines",
        "query": "SELECT name FROM technician WHERE technician_id NOT IN ( SELECT technician_id FROM repair_assignment )",
        "schema": "CREATE TABLE repair_assignment (repair_ID NUMBER, Machine_ID NUMBER, technician_id NUMBER); CREATE TABLE repair (name TEXT, repair_ID NUMBER); CREATE TABLE technician (Age NUMBER, technician_id NUMBER, Name TEXT); CREATE TABLE machine (Machine_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show the names of all technicians.",
        "query": "SELECT name FROM technician",
        "schema": "CREATE TABLE repair (repair_ID NUMBER, name TEXT); CREATE TABLE technician (technician_id NUMBER, Name TEXT); CREATE TABLE repair_assignment (technician_id NUMBER); CREATE TABLE machine (Machine_ID NUMBER);"
      },
      {
        "question": "Show the names of all technicians and the machines they are assigned to.",
        "query": "SELECT t3.name, t1.machine_id FROM repair_assignment AS t1 JOIN machine AS t2 ON t1.machine_id = t2.machine_id JOIN technician AS t3 ON t1.technician_id = t3.technician_id",
        "schema": "CREATE TABLE repair_assignment (technician_id NUMBER, Machine_ID NUMBER); CREATE TABLE technician (technician_id NUMBER, Name TEXT); CREATE TABLE repair (name TEXT, repair_ID NUMBER); CREATE TABLE machine (Machine_ID NUMBER);"
      },
      {
        "question": "Show the names of all technicians assigned to the machine with ID 2.",
        "query": "SELECT t3.name, t1.machine_id FROM repair_assignment AS t1 JOIN machine AS t2 ON t1.machine_id = t2.machine_id JOIN technician AS t3 ON t1.technician_id = t3.technician_id AND t1.machine_id = 2",
        "schema": "CREATE TABLE repair (repair_ID NUMBER, name TEXT); CREATE TABLE repair_assignment (repair_ID NUMBER, technician_id NUMBER, Machine_ID NUMBER); CREATE TABLE machine (Machine_ID NUMBER); CREATE TABLE technician (technician_id NUMBER, Name TEXT);"
      },
      {
        "question": "Show the names of all technicians in ascending order of quality rank assigned to the machine with ID 2.",
        "query": "SELECT t3.name, t1.machine_id, quality_rank FROM repair_assignment AS t1 JOIN machine AS t2 ON t1.machine_id = t2.machine_id JOIN technician AS t3 ON t1.technician_id = t3.technician_id AND t1.machine_id = 2 ORDER BY quality_rank",
        "schema": "CREATE TABLE technician (technician_id NUMBER, Name TEXT); CREATE TABLE machine (Machine_ID NUMBER, quality_rank NUMBER); CREATE TABLE repair (repair_ID NUMBER, name TEXT); CREATE TABLE repair_assignment (repair_ID NUMBER, Machine_ID NUMBER, technician_id NUMBER);"
      },
      {
        "question": "Show the names of all technicians in ascending order of quality rank assigned to the machine with ID 1.",
        "query": "SELECT t3.name, t1.machine_id, quality_rank FROM repair_assignment AS t1 JOIN machine AS t2 ON t1.machine_id = t2.machine_id JOIN technician AS t3 ON t1.technician_id = t3.technician_id AND t1.machine_id = 1 ORDER BY quality_rank",
        "schema": "CREATE TABLE technician (Name TEXT, technician_id NUMBER); CREATE TABLE repair_assignment (Machine_ID NUMBER, repair_ID NUMBER, technician_id NUMBER); CREATE TABLE machine (quality_rank NUMBER, Machine_ID NUMBER); CREATE TABLE repair (name TEXT, repair_ID NUMBER);"
      },
      {
        "question": "Show the names of technicians in ascending order of quality rank of the machine they are assigned.",
        "query": "SELECT t3.name FROM repair_assignment AS t1 JOIN machine AS t2 ON t1.machine_id = t2.machine_id JOIN technician AS t3 ON t1.technician_id = t3.technician_id ORDER BY t2.quality_rank",
        "schema": "CREATE TABLE repair_assignment (Machine_ID NUMBER, repair_ID NUMBER, technician_id NUMBER); CREATE TABLE repair (repair_ID NUMBER, name TEXT); CREATE TABLE technician (Name TEXT, technician_id NUMBER); CREATE TABLE machine (quality_rank NUMBER, Machine_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What is the starting year of the oldest technician?",
        "query": "SELECT starting_year FROM technician ORDER BY age DESC LIMIT 1",
        "schema": "CREATE TABLE repair (repair_ID NUMBER); CREATE TABLE technician (technician_id NUMBER, Age NUMBER, Starting_Year NUMBER, Name TEXT); CREATE TABLE repair_assignment (technician_id NUMBER); CREATE TABLE machine (Making_Year NUMBER, Machine_ID NUMBER);"
      },
      {
        "question": "What is their name and team? | what  do  you mean  their?could  you  give  more  info ? | What is the name of the oldest technician?",
        "query": "SELECT name FROM technician ORDER BY age DESC LIMIT 1",
        "schema": "CREATE TABLE repair_assignment (technician_id NUMBER); CREATE TABLE machine (Machine_ID NUMBER, Making_Year NUMBER); CREATE TABLE repair (repair_ID NUMBER); CREATE TABLE technician (technician_id NUMBER, Starting_Year NUMBER, Age NUMBER, Team TEXT, Name TEXT);"
      }
    ]
  ],
  "student_1": [
    [
      {
        "question": "Can you list the class room associated with the name Loria Ondersma in the teachers table?",
        "query": "SELECT classroom FROM teachers WHERE lastname = \"ONDERSMA\"",
        "schema": "CREATE TABLE teachers (Classroom NUMBER, LastName TEXT, FirstName TEXT); CREATE TABLE list (LastName TEXT, FirstName TEXT, Classroom NUMBER);"
      },
      {
        "question": "Can you show me all first and last names from the list table that have a classroom id of 108?",
        "query": "SELECT firstname, lastname FROM teachers WHERE classroom = 108",
        "schema": "CREATE TABLE teachers (LastName TEXT, Classroom NUMBER, FirstName TEXT); CREATE TABLE list (LastName TEXT, Classroom NUMBER, FirstName TEXT);"
      },
      {
        "question": "Can you tell me how many unique names are currently in the table?",
        "query": "SELECT COUNT ( DISTINCT firstname ) FROM teachers",
        "schema": "CREATE TABLE list (LastName TEXT, FirstName TEXT, Classroom NUMBER); CREATE TABLE teachers (FirstName TEXT, Classroom NUMBER, LastName TEXT);"
      },
      {
        "question": "How many unique names in the list table have a classroom id of 108?",
        "query": "SELECT COUNT ( DISTINCT firstname ) FROM teachers WHERE classroom = 108",
        "schema": "CREATE TABLE list (Classroom NUMBER, FirstName TEXT, LastName TEXT); CREATE TABLE teachers (Classroom NUMBER, LastName TEXT, FirstName TEXT);"
      }
    ],
    [
      {
        "question": "Hello! Can you please list all of the first and last names for all of the students in the database?",
        "query": "SELECT lastname,firstname FROM list",
        "schema": "CREATE TABLE list (Classroom NUMBER, FirstName TEXT, LastName TEXT);"
      },
      {
        "question": "Excellent!  Could you filter that list to show only the students who were taught by the teacher with the last name Moyer?",
        "query": "SELECT t1.firstname , t1.lastname FROM list AS t1 JOIN teachers AS t2 ON t1.classroom = t2.classroom WHERE t2.lastname = \"MOYER\"",
        "schema": "CREATE TABLE list (FirstName TEXT, LastName TEXT, Classroom NUMBER); CREATE TABLE teachers (LastName TEXT, FirstName TEXT, Classroom NUMBER);"
      },
      {
        "question": "Great!  Could you update this list to include the grade of each student?",
        "query": "SELECT t1.firstname , t1.lastname,grade FROM list AS t1 JOIN teachers AS t2 ON t1.classroom = t2.classroom WHERE t2.lastname = \"MOYER\"",
        "schema": "CREATE TABLE teachers (Classroom NUMBER, LastName TEXT, FirstName TEXT); CREATE TABLE list (LastName TEXT, Grade NUMBER, FirstName TEXT, Classroom NUMBER);"
      }
    ],
    [
      {
        "question": "what is the lname of grade 2 | Do you mean what are the last names of the students in grade 2? | what is the lname of classroom 101",
        "query": "SELECT lastname FROM list WHERE classroom = 101",
        "schema": "CREATE TABLE list (LastName TEXT, Classroom NUMBER, Grade NUMBER, FirstName TEXT);"
      },
      {
        "question": "what is the fname of class room 102",
        "query": "SELECT firstname FROM list WHERE classroom = 102",
        "schema": "CREATE TABLE list (Grade NUMBER, LastName TEXT, FirstName TEXT, Classroom NUMBER);"
      }
    ],
    [
      {
        "question": "What are the names of all of the students?",
        "query": "SELECT lastname,firstname FROM list",
        "schema": "CREATE TABLE teachers (FirstName TEXT); CREATE TABLE list (LastName TEXT, Classroom NUMBER, FirstName TEXT);"
      },
      {
        "question": "How many students are in that classroom?",
        "query": "SELECT COUNT ( * ) FROM list GROUP BY classroom ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE teachers (Classroom NUMBER, FirstName TEXT); CREATE TABLE list (Classroom NUMBER, FirstName TEXT, LastName TEXT);"
      },
      {
        "question": "What is the name of the teacher who teaches in that classroom?",
        "query": "SELECT t2.firstname , t2.lastname FROM list AS t1 JOIN teachers AS t2 ON t1.classroom = t2.classroom GROUP BY t2.firstname , t2.lastname ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE list (LastName TEXT, FirstName TEXT, Classroom NUMBER); CREATE TABLE teachers (LastName TEXT, Classroom NUMBER, FirstName TEXT);"
      }
    ],
    [
      {
        "question": "can you show me a list of grades?",
        "query": "SELECT grade FROM list",
        "schema": "CREATE TABLE list (LastName TEXT, FirstName TEXT, Grade NUMBER, Classroom NUMBER);"
      },
      {
        "question": "can you show me a list of first name that starting with 'J'?",
        "query": "SELECT firstname FROM list WHERE firstname LIKE \"J%\"",
        "schema": "CREATE TABLE list (Grade NUMBER, LastName TEXT, Classroom NUMBER, FirstName TEXT);"
      },
      {
        "question": "can you show me a list of last name that starting with 'J'?",
        "query": "SELECT lastname FROM list WHERE lastname LIKE \"J%\"",
        "schema": "CREATE TABLE list (FirstName TEXT, Classroom NUMBER, LastName TEXT, Grade NUMBER);"
      },
      {
        "question": "can you show me a list of teacher class room?",
        "query": "SELECT classroom FROM teachers",
        "schema": "CREATE TABLE teachers (FirstName TEXT, LastName TEXT, Classroom NUMBER); CREATE TABLE list (FirstName TEXT, Grade NUMBER, Classroom NUMBER, LastName TEXT);"
      },
      {
        "question": "\"Find the last names of all the teachers that teach GELL TAMI.",
        "query": "SELECT t2.lastname FROM list AS t1 JOIN teachers AS t2 ON t1.classroom = t2.classroom WHERE t1.firstname = \"GELL\" AND t1.lastname = \"TAMI\"",
        "schema": "CREATE TABLE teachers (FirstName TEXT, LastName TEXT, Classroom NUMBER); CREATE TABLE list (Classroom NUMBER, Grade NUMBER, LastName TEXT, FirstName TEXT);"
      }
    ],
    [
      {
        "question": "Which classroom has the most students?",
        "query": "SELECT classroom FROM list GROUP BY classroom ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE list (Classroom NUMBER); CREATE TABLE teachers (Classroom NUMBER);"
      },
      {
        "question": "Could you tell me what grade that is, please?",
        "query": "SELECT classroom, grade FROM list GROUP BY classroom ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE teachers (Classroom NUMBER); CREATE TABLE list (Grade NUMBER, Classroom NUMBER, FirstName TEXT);"
      },
      {
        "question": "What are the first names of the students in that classroom that begin with the letter \"S\"?",
        "query": "SELECT firstname FROM list WHERE firstname like \" S%\" AND classroom IN ( SELECT classroom FROM list GROUP BY classroom ORDER BY COUNT ( * ) DESC LIMIT 1 )",
        "schema": "CREATE TABLE teachers (Classroom NUMBER); CREATE TABLE list (FirstName TEXT, LastName TEXT, Classroom NUMBER, Grade NUMBER);"
      }
    ],
    [
      {
        "question": "Which classroom has the most students?",
        "query": "SELECT classroom FROM list GROUP BY classroom ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE list (LastName TEXT, Classroom NUMBER); CREATE TABLE teachers (Classroom NUMBER);"
      },
      {
        "question": "what grade is that classroom?",
        "query": "SELECT grade FROM list GROUP BY classroom ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE teachers (Classroom NUMBER); CREATE TABLE list (Grade NUMBER, Classroom NUMBER, LastName TEXT);"
      },
      {
        "question": "What is the teacher's last name?",
        "query": "SELECT lastname FROM list GROUP BY classroom ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE teachers (LastName TEXT, FirstName TEXT, Classroom NUMBER); CREATE TABLE list (FirstName TEXT, Classroom NUMBER, Grade NUMBER, LastName TEXT);"
      }
    ],
    [
      {
        "question": "how many classrooms are available?",
        "query": "SELECT COUNT ( DISTINCT classroom ) FROM list",
        "schema": "CREATE TABLE teachers (Classroom NUMBER); CREATE TABLE list (Classroom NUMBER);"
      },
      {
        "question": "how many grades are available?",
        "query": "SELECT COUNT ( DISTINCT grade ) FROM list",
        "schema": "CREATE TABLE teachers (Classroom NUMBER); CREATE TABLE list (Classroom NUMBER, Grade NUMBER);"
      },
      {
        "question": "yes | LastName or FirstName? | lastname",
        "query": "SELECT COUNT ( DISTINCT lastname ) FROM list",
        "schema": "CREATE TABLE list (FirstName TEXT, Classroom NUMBER, Grade NUMBER, LastName TEXT); CREATE TABLE teachers (Classroom NUMBER);"
      },
      {
        "question": "how many firstnames are available?",
        "query": "SELECT COUNT ( DISTINCT firstname ) FROM list",
        "schema": "CREATE TABLE teachers (Classroom NUMBER); CREATE TABLE list (Classroom NUMBER, LastName TEXT, FirstName TEXT, Grade NUMBER);"
      },
      {
        "question": "what was the car grade?",
        "query": "SELECT grade FROM list WHERE lastname = 'CAR'",
        "schema": "CREATE TABLE list (LastName TEXT, Classroom NUMBER, Grade NUMBER, FirstName TEXT); CREATE TABLE teachers (Classroom NUMBER);"
      }
    ],
    [
      {
        "question": "What students aren't taught by Otha Moyer? | Did you want to return their full names? | Yes please",
        "query": "SELECT DISTINCT t1.firstname , t1.lastname FROM list AS t1 JOIN teachers AS t2 ON t1.classroom = t2.classroom EXCEPT SELECT t1.firstname , t1.lastname FROM list AS t1 JOIN teachers AS t2 ON t1.classroom = t2.classroom WHERE t2.firstname = \"OTHA\" AND t2.lastname = \"MOYER\"",
        "schema": "CREATE TABLE teachers (Classroom NUMBER, LastName TEXT, FirstName TEXT); CREATE TABLE list (FirstName TEXT, LastName TEXT, Classroom NUMBER);"
      },
      {
        "question": "Could you limit it to all first graders?",
        "query": "SELECT DISTINCT t1.firstname , t1.lastname FROM list AS t1 JOIN teachers AS t2 ON t1.classroom = t2.classroom WHERE t1.grade = 1 EXCEPT SELECT t1.firstname , t1.lastname FROM list AS t1 JOIN teachers AS t2 ON t1.classroom = t2.classroom WHERE t2.firstname = \"OTHA\" AND t2.lastname = \"MOYER\"",
        "schema": "CREATE TABLE teachers (FirstName TEXT, LastName TEXT, Classroom NUMBER); CREATE TABLE list (FirstName TEXT, Grade NUMBER, LastName TEXT, Classroom NUMBER);"
      }
    ],
    [
      {
        "question": "what is the average of grades?",
        "query": "SELECT AVG ( grade ) FROM list",
        "schema": "CREATE TABLE list (Classroom NUMBER, Grade NUMBER);"
      },
      {
        "question": "can you show me a list of teacchers first name?",
        "query": "SELECT firstname FROM teachers",
        "schema": "CREATE TABLE list (LastName TEXT, Classroom NUMBER, Grade NUMBER, FirstName TEXT); CREATE TABLE teachers (FirstName TEXT, LastName TEXT);"
      },
      {
        "question": "can you show me a list of teachers first name that starting with 'M'?",
        "query": "SELECT firstname FROM teachers WHERE firstname LIKE \"M%\"",
        "schema": "CREATE TABLE list (LastName TEXT, FirstName TEXT, Grade NUMBER, Classroom NUMBER); CREATE TABLE teachers (LastName TEXT, Classroom NUMBER, FirstName TEXT);"
      },
      {
        "question": "find all first-grade students who are not taught by otha moyer. | Do you mean First or Last names? | first",
        "query": "SELECT DISTINCT t1.firstname FROM list AS t1 JOIN teachers AS t2 ON t1.classroom = t2.classroom WHERE t1.grade = 1 EXCEPT SELECT t1.firstname , t1.lastname FROM list AS t1 JOIN teachers AS t2 ON t1.classroom = t2.classroom WHERE t2.firstname = \"OTHA\" AND t2.lastname = \"MOYER\"",
        "schema": "CREATE TABLE list (Classroom NUMBER, LastName TEXT, Grade NUMBER, FirstName TEXT); CREATE TABLE teachers (FirstName TEXT, Classroom NUMBER, LastName TEXT);"
      }
    ],
    [
      {
        "question": "How many teachers in this table?",
        "query": "SELECT COUNT ( * ) FROM teachers",
        "schema": "CREATE TABLE teachers (FirstName TEXT, Classroom NUMBER, LastName TEXT); CREATE TABLE list (LastName TEXT, FirstName TEXT);"
      },
      {
        "question": "Yes.",
        "query": "SELECT grade FROM list WHERE firstname like \"%MAUDE%\"",
        "schema": "CREATE TABLE teachers (LastName TEXT, Classroom NUMBER, FirstName TEXT); CREATE TABLE list (Grade NUMBER, FirstName TEXT, LastName TEXT, Classroom NUMBER);"
      },
      {
        "question": "Find the last name of Mr.STORMY",
        "query": "SELECT lastname FROM list WHERE firstname like \"%STORMY%\"",
        "schema": "CREATE TABLE list (Grade NUMBER, Classroom NUMBER, FirstName TEXT, LastName TEXT); CREATE TABLE teachers (FirstName TEXT, LastName TEXT, Classroom NUMBER);"
      },
      {
        "question": "How many students in this table?",
        "query": "SELECT COUNT ( * ) FROM list",
        "schema": "CREATE TABLE list (LastName TEXT, FirstName TEXT, Grade NUMBER, Classroom NUMBER); CREATE TABLE teachers (FirstName TEXT, Classroom NUMBER, LastName TEXT);"
      }
    ],
    [
      {
        "question": "Find the name of the teacher who teaches the largest number of students.",
        "query": "SELECT t2.firstname , t2.lastname FROM list AS t1 JOIN teachers AS t2 ON t1.classroom = t2.classroom GROUP BY t2.firstname , t2.lastname ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE teachers (Classroom NUMBER, LastName TEXT, FirstName TEXT); CREATE TABLE list (LastName TEXT, FirstName TEXT, Classroom NUMBER);"
      },
      {
        "question": "What grade do they teach? | Here are the grades of the students taught by the teacher who teaches the largest number of students. | What is their class room?",
        "query": "SELECT t1.classroom FROM list AS t1 JOIN teachers AS t2 ON t1.classroom = t2.classroom GROUP BY t2.firstname , t2.lastname ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE list (LastName TEXT, Grade NUMBER, FirstName TEXT, Classroom NUMBER); CREATE TABLE teachers (Classroom NUMBER, LastName TEXT, FirstName TEXT);"
      }
    ],
    [
      {
        "question": "How many students does KAWA GORDON teaches?",
        "query": "SELECT COUNT ( * ) FROM list AS t1 JOIN teachers AS t2 ON t1.classroom = t2.classroom WHERE t2.firstname = \"KAWA\" AND t2.lastname = \"GORDON\"",
        "schema": "CREATE TABLE teachers (FirstName TEXT, LastName TEXT, Classroom NUMBER); CREATE TABLE list (FirstName TEXT, Classroom NUMBER, LastName TEXT);"
      },
      {
        "question": "How many students does MIN MACROSTIE teaches?",
        "query": "SELECT COUNT ( * ) FROM list AS t1 JOIN teachers AS t2 ON t1.classroom = t2.classroom WHERE t2.firstname like \"%MIN%\" AND t2.lastname like \"%MACROSTIE%\"",
        "schema": "CREATE TABLE teachers (LastName TEXT, Classroom NUMBER, FirstName TEXT); CREATE TABLE list (FirstName TEXT, LastName TEXT, Classroom NUMBER);"
      },
      {
        "question": "What are the first and last names of the teachers that teach STORMY CHRISTENSEN?",
        "query": "SELECT t2.firstname, t2.lastname FROM list AS t1 JOIN teachers AS t2 ON t1.classroom = t2.classroom WHERE t1.firstname like \"%STORMY%\" AND t1.lastname like \"%CHRISTENSEN%\"",
        "schema": "CREATE TABLE list (Classroom NUMBER, LastName TEXT, FirstName TEXT); CREATE TABLE teachers (FirstName TEXT, LastName TEXT, Classroom NUMBER);"
      }
    ],
    [
      {
        "question": "Can you tell me how many teachers teach fifth grade?",
        "query": "SELECT COUNT ( DISTINCT t2.lastname ) FROM list AS t1 JOIN teachers AS t2 ON t1.classroom = t2.classroom WHERE grade = 5",
        "schema": "CREATE TABLE teachers (Classroom NUMBER, LastName TEXT, FirstName TEXT); CREATE TABLE list (Grade NUMBER, Classroom NUMBER);"
      },
      {
        "question": "What is that teacher's last name?",
        "query": "SELECT DISTINCT t2.lastname FROM list AS t1 JOIN teachers AS t2 ON t1.classroom = t2.classroom WHERE grade = 5",
        "schema": "CREATE TABLE list (LastName TEXT, Classroom NUMBER, Grade NUMBER); CREATE TABLE teachers (Classroom NUMBER, FirstName TEXT, LastName TEXT);"
      },
      {
        "question": "What classroom does this teacher teach in?",
        "query": "SELECT DISTINCT t2.classroom FROM list AS t1 JOIN teachers AS t2 ON t1.classroom = t2.classroom WHERE grade = 5",
        "schema": "CREATE TABLE teachers (Classroom NUMBER, FirstName TEXT, LastName TEXT); CREATE TABLE list (Classroom NUMBER, LastName TEXT, Grade NUMBER);"
      }
    ]
  ],
  "chinook_1": [
    [
      {
        "question": "What are the duration's of the longest and shortest track in milliseconds.",
        "query": "SELECT MAX ( milliseconds ) , MIN ( milliseconds ) FROM track",
        "schema": "CREATE TABLE Track (AlbumId NUMBER, Milliseconds NUMBER, Bytes NUMBER, TrackId NUMBER, Name TEXT); CREATE TABLE Album (AlbumId NUMBER, Title TEXT); CREATE TABLE Employee (EmployeeId NUMBER);"
      },
      {
        "question": "What is the name of the longest track?",
        "query": "SELECT name FROM track WHERE milliseconds = ( SELECT MAX ( milliseconds ) FROM track )",
        "schema": "CREATE TABLE Album (AlbumId NUMBER, Title TEXT); CREATE TABLE Employee (EmployeeId NUMBER); CREATE TABLE Track (AlbumId NUMBER, TrackId NUMBER, Milliseconds NUMBER, Bytes NUMBER, Name TEXT);"
      },
      {
        "question": "Who was the longest track written by?",
        "query": "SELECT composer FROM track WHERE milliseconds = ( SELECT MAX ( milliseconds ) FROM track )",
        "schema": "CREATE TABLE Album (AlbumId NUMBER, Title TEXT); CREATE TABLE Artist (ArtistId NUMBER, Name TEXT); CREATE TABLE Employee (EmployeeId NUMBER); CREATE TABLE Track (AlbumId NUMBER, Bytes NUMBER, Composer TEXT, Milliseconds NUMBER, Name TEXT, TrackId NUMBER);"
      }
    ],
    [
      {
        "question": "how many artists do you have?",
        "query": "SELECT COUNT ( DISTINCT artistid ) FROM artist",
        "schema": "CREATE TABLE Album (ArtistId NUMBER, AlbumId NUMBER); CREATE TABLE Employee (EmployeeId NUMBER); CREATE TABLE Customer (CustomerId NUMBER); CREATE TABLE Invoice (CustomerId NUMBER); CREATE TABLE Track (AlbumId NUMBER, TrackId NUMBER); CREATE TABLE Artist (ArtistId NUMBER, Name TEXT);"
      },
      {
        "question": "What are their names?",
        "query": "SELECT name FROM artist",
        "schema": "CREATE TABLE Artist (ArtistId NUMBER, Name TEXT); CREATE TABLE Invoice (CustomerId NUMBER); CREATE TABLE Track (AlbumId NUMBER, Name TEXT, TrackId NUMBER); CREATE TABLE Employee (EmployeeId NUMBER); CREATE TABLE Customer (CustomerId NUMBER); CREATE TABLE Album (AlbumId NUMBER, Title TEXT, ArtistId NUMBER);"
      },
      {
        "question": "how many albums does AC/DC have?",
        "query": "SELECT COUNT ( * ) FROM album AS t1 JOIN artist AS t2 ON t1.artistid = t2.artistid WHERE t2.name = \"AC/DC\"",
        "schema": "CREATE TABLE Track (AlbumId NUMBER, TrackId NUMBER, Name TEXT); CREATE TABLE Employee (EmployeeId NUMBER); CREATE TABLE Customer (LastName TEXT, FirstName TEXT, CustomerId NUMBER); CREATE TABLE Invoice (CustomerId NUMBER); CREATE TABLE Album (ArtistId NUMBER, Title TEXT, AlbumId NUMBER); CREATE TABLE Artist (ArtistId NUMBER, Name TEXT);"
      },
      {
        "question": "And for Metallica?",
        "query": "SELECT COUNT ( * ) FROM album AS t1 JOIN artist AS t2 ON t1.artistid = t2.artistid WHERE t2.name = \"Metallica\"",
        "schema": "CREATE TABLE Invoice (CustomerId NUMBER); CREATE TABLE Artist (Name TEXT, ArtistId NUMBER); CREATE TABLE Employee (EmployeeId NUMBER); CREATE TABLE Track (Name TEXT, TrackId NUMBER, AlbumId NUMBER); CREATE TABLE Customer (FirstName TEXT, CustomerId NUMBER, LastName TEXT); CREATE TABLE Album (Title TEXT, AlbumId NUMBER, ArtistId NUMBER);"
      }
    ],
    [
      {
        "question": "Tell me the artist id and album id for title Balls to the Wall ?",
        "query": "SELECT albumid, artistid FROM album WHERE title = 'Balls to the Wall'",
        "schema": "CREATE TABLE Track (Name TEXT, TrackId NUMBER, AlbumId NUMBER, GenreId NUMBER); CREATE TABLE Album (Title TEXT, ArtistId NUMBER, AlbumId NUMBER); CREATE TABLE Artist (Name TEXT, ArtistId NUMBER); CREATE TABLE Genre (Name TEXT, GenreId NUMBER);"
      },
      {
        "question": "k. Who is the composer for For Those About To Rock (We Salute You) ?",
        "query": "SELECT DISTINCT t2.composer FROM album AS t1 JOIN track AS t2 ON t1.albumid = t2.albumid WHERE t1.title = 'For Those About To Rock We Salute You'",
        "schema": "CREATE TABLE Album (Title TEXT, ArtistId NUMBER, AlbumId NUMBER); CREATE TABLE Artist (ArtistId NUMBER, Name TEXT); CREATE TABLE Genre (GenreId NUMBER, Name TEXT); CREATE TABLE Track (GenreId NUMBER, AlbumId NUMBER, TrackId NUMBER, Composer TEXT, Name TEXT);"
      },
      {
        "question": "k. Who is the composer for Balls to the Wall ?",
        "query": "SELECT DISTINCT t2.composer FROM album AS t1 JOIN track AS t2 ON t1.albumid = t2.albumid WHERE t1.title = 'Balls to the Wall'",
        "schema": "CREATE TABLE Track (Name TEXT, AlbumId NUMBER, GenreId NUMBER, Composer TEXT, TrackId NUMBER); CREATE TABLE Artist (ArtistId NUMBER, Name TEXT); CREATE TABLE Album (ArtistId NUMBER, Title TEXT, AlbumId NUMBER); CREATE TABLE Genre (Name TEXT, GenreId NUMBER);"
      },
      {
        "question": "* I have left the chat *",
        "query": "SELECT t1.title , t2.albumid , COUNT ( * ) FROM album AS t1 JOIN track AS t2 ON t1.albumid = t2.albumid GROUP BY t2.albumid",
        "schema": "CREATE TABLE Genre (Name TEXT, GenreId NUMBER); CREATE TABLE Track (Composer TEXT, Name TEXT, AlbumId NUMBER, GenreId NUMBER, TrackId NUMBER); CREATE TABLE Album (ArtistId NUMBER, Title TEXT, AlbumId NUMBER); CREATE TABLE Artist (ArtistId NUMBER, Name TEXT);"
      }
    ],
    [
      {
        "question": "List album titles for albums containing Reggae genre tracks. | Did  you  mean   both contain  'Reggae' and 'Rock' genre tracks? | yes",
        "query": "SELECT t1.title FROM album AS t1 JOIN track AS t2 ON t1.albumid = t2.albumid JOIN genre AS t3 ON t2.genreid = t3.genreid WHERE t3.name = 'Reggae' INTERSECT SELECT t1.title FROM album AS t1 JOIN track AS t2 ON t1.albumid = t2.albumid JOIN genre AS t3 ON t2.genreid = t3.genreid WHERE t3.name = 'Rock'",
        "schema": "CREATE TABLE Track (AlbumId NUMBER, GenreId NUMBER, TrackId NUMBER, Name TEXT); CREATE TABLE Album (Title TEXT, AlbumId NUMBER); CREATE TABLE Genre (Name TEXT, GenreId NUMBER);"
      },
      {
        "question": "List album titles for albums containing Rock genre tracks",
        "query": "SELECT t1.title FROM album AS t1 JOIN track AS t2 ON t1.albumid = t2.albumid JOIN genre AS t3 ON t2.genreid = t3.genreid WHERE t3.name = 'Reggae' INTERSECT SELECT t1.title FROM album AS t1 JOIN track AS t2 ON t1.albumid = t2.albumid JOIN genre AS t3 ON t2.genreid = t3.genreid WHERE t3.name = 'Rock'",
        "schema": "CREATE TABLE Track (GenreId NUMBER, AlbumId NUMBER, Name TEXT, TrackId NUMBER); CREATE TABLE Genre (GenreId NUMBER, Name TEXT); CREATE TABLE Album (AlbumId NUMBER, Title TEXT);"
      },
      {
        "question": "List album titles for albums containing Metal genre tracks",
        "query": "SELECT DISTINCT t1.title FROM album AS t1 JOIN track AS t2 ON t1.albumid = t2.albumid JOIN genre AS t3 ON t2.genreid = t3.genreid WHERE t3.name = 'Metal'",
        "schema": "CREATE TABLE Album (AlbumId NUMBER, Title TEXT); CREATE TABLE Track (AlbumId NUMBER, GenreId NUMBER, Name TEXT, TrackId NUMBER); CREATE TABLE Genre (GenreId NUMBER, Name TEXT);"
      },
      {
        "question": "How many albums contain 'Metal' genre tracks?",
        "query": "SELECT COUNT ( DISTINCT t1.title ) FROM album AS t1 JOIN track AS t2 ON t1.albumid = t2.albumid JOIN genre AS t3 ON t2.genreid = t3.genreid WHERE t3.name = 'Metal'",
        "schema": "CREATE TABLE Genre (GenreId NUMBER, Name TEXT); CREATE TABLE Track (TrackId NUMBER, AlbumId NUMBER, Name TEXT, GenreId NUMBER); CREATE TABLE Album (AlbumId NUMBER, Title TEXT);"
      }
    ],
    [
      {
        "question": "Hi, could you please let me know the genre ID for Latin and Pop?",
        "query": "SELECT genreid FROM genre WHERE name = \"Latin\" OR name = \"Pop\"",
        "schema": "CREATE TABLE Genre (GenreId NUMBER, Name TEXT); CREATE TABLE Album (AlbumId NUMBER); CREATE TABLE MediaType (Name TEXT, MediaTypeId NUMBER); CREATE TABLE Track (Name TEXT, MediaTypeId NUMBER, AlbumId NUMBER, TrackId NUMBER, GenreId NUMBER);"
      },
      {
        "question": "That was very quick, thank you very much :) Then, could you please let me know the average duration (milliseconds) of Latin and Pop?",
        "query": "SELECT AVG ( milliseconds ) FROM genre AS t1 JOIN track AS t2 ON t1.genreid = t2.genreid WHERE t1.name = \"Latin\" OR t1.name = \"Pop\"",
        "schema": "CREATE TABLE MediaType (Name TEXT, MediaTypeId NUMBER); CREATE TABLE Track (AlbumId NUMBER, Milliseconds NUMBER, TrackId NUMBER, Name TEXT, MediaTypeId NUMBER, GenreId NUMBER); CREATE TABLE Genre (Name TEXT, GenreId NUMBER); CREATE TABLE Album (Title TEXT, AlbumId NUMBER);"
      },
      {
        "question": "That's an amazingly precise number, thank you again. Then what about the average unit price of Latin and Pop?",
        "query": "SELECT AVG ( unitprice ) FROM genre AS t1 JOIN track AS t2 ON t1.genreid = t2.genreid WHERE t1.name = \"Latin\" OR t1.name = \"Pop\"",
        "schema": "CREATE TABLE InvoiceLine (UnitPrice NUMBER, Quantity NUMBER); CREATE TABLE Genre (GenreId NUMBER, Name TEXT); CREATE TABLE Invoice (Total NUMBER); CREATE TABLE MediaType (Name TEXT, MediaTypeId NUMBER); CREATE TABLE Album (AlbumId NUMBER, Title TEXT); CREATE TABLE Track (Name TEXT, MediaTypeId NUMBER, Milliseconds NUMBER, AlbumId NUMBER, UnitPrice NUMBER, GenreId NUMBER, TrackId NUMBER);"
      }
    ],
    [
      {
        "question": "State the email id of custormer id 1?",
        "query": "SELECT email FROM customer WHERE customerid = '1'",
        "schema": "CREATE TABLE Genre (Name TEXT, GenreId NUMBER); CREATE TABLE Artist (Name TEXT, ArtistId NUMBER); CREATE TABLE Track (AlbumId NUMBER, Name TEXT, TrackId NUMBER, Composer TEXT); CREATE TABLE Invoice (CustomerId NUMBER); CREATE TABLE Customer (CustomerId NUMBER, Phone TEXT, Address TEXT, LastName TEXT, FirstName TEXT, Email TEXT, SupportRepId NUMBER, State TEXT); CREATE TABLE Album (AlbumId NUMBER, ArtistId NUMBER, Title TEXT); CREATE TABLE Employee (EmployeeId NUMBER, LastName TEXT, Email TEXT, ReportsTo NUMBER);"
      },
      {
        "question": "How many employees are from Calgary city?",
        "query": "SELECT COUNT ( * ) FROM employee WHERE city = 'Calgary'",
        "schema": "CREATE TABLE Artist (Name TEXT, ArtistId NUMBER); CREATE TABLE Album (AlbumId NUMBER, ArtistId NUMBER, Title TEXT); CREATE TABLE Invoice (CustomerId NUMBER); CREATE TABLE Customer (FirstName TEXT, Email TEXT, Address TEXT, Company TEXT, SupportRepId NUMBER, LastName TEXT, Phone TEXT, City TEXT, CustomerId NUMBER, State TEXT); CREATE TABLE Employee (Country TEXT, LastName TEXT, City TEXT, HireDate TIME, Address TEXT, FirstName TEXT, State TEXT, Email TEXT, ReportsTo NUMBER, EmployeeId NUMBER, Title TEXT); CREATE TABLE Track (AlbumId NUMBER, TrackId NUMBER, Name TEXT, Composer TEXT); CREATE TABLE Genre (GenreId NUMBER, Name TEXT);"
      },
      {
        "question": "Please show the employee first names and ids of employees who serve at least 10 customers?",
        "query": "SELECT t1.firstname , t1.supportrepid FROM customer AS t1 JOIN employee AS t2 ON t1.supportrepid = t2.employeeid GROUP BY t1.supportrepid HAVING COUNT ( * ) > = 10",
        "schema": "CREATE TABLE Invoice (CustomerId NUMBER); CREATE TABLE Artist (Name TEXT, ArtistId NUMBER); CREATE TABLE Genre (GenreId NUMBER, Name TEXT); CREATE TABLE Track (Composer TEXT, AlbumId NUMBER, Name TEXT, TrackId NUMBER); CREATE TABLE Customer (City TEXT, Company TEXT, LastName TEXT, CustomerId NUMBER, FirstName TEXT, Email TEXT, Phone TEXT, SupportRepId NUMBER, State TEXT, Address TEXT); CREATE TABLE Album (ArtistId NUMBER, AlbumId NUMBER, Title TEXT); CREATE TABLE Employee (Email TEXT, HireDate TIME, Title TEXT, LastName TEXT, ReportsTo NUMBER, City TEXT, Address TEXT, State TEXT, EmployeeId NUMBER, FirstName TEXT, Country TEXT);"
      },
      {
        "question": "State the title of employee id 2?",
        "query": "SELECT title FROM employee WHERE employeeid = 2",
        "schema": "CREATE TABLE Invoice (CustomerId NUMBER); CREATE TABLE Track (AlbumId NUMBER, Composer TEXT, TrackId NUMBER, Name TEXT); CREATE TABLE Customer (City TEXT, CustomerId NUMBER, Email TEXT, State TEXT, Company TEXT, LastName TEXT, Phone TEXT, Country TEXT, FirstName TEXT, Address TEXT, SupportRepId NUMBER); CREATE TABLE Employee (EmployeeId NUMBER, State TEXT, Country TEXT, City TEXT, Address TEXT, Title TEXT, FirstName TEXT, ReportsTo NUMBER, LastName TEXT, HireDate TIME, Email TEXT); CREATE TABLE Genre (GenreId NUMBER, Name TEXT); CREATE TABLE Artist (ArtistId NUMBER, Name TEXT); CREATE TABLE Album (ArtistId NUMBER, Title TEXT, AlbumId NUMBER);"
      }
    ],
    [
      {
        "question": "In the rock genre, how many tracks are there?",
        "query": "SELECT COUNT ( * ) FROM genre AS t1 JOIN track AS t2 ON t1.genreid = t2.genreid WHERE t1.name = \"Rock\"",
        "schema": "CREATE TABLE Genre (GenreId NUMBER, Name TEXT); CREATE TABLE Track (Name TEXT, TrackId NUMBER, AlbumId NUMBER, GenreId NUMBER);"
      },
      {
        "question": "What about jazz?",
        "query": "SELECT COUNT ( * ) FROM genre AS t1 JOIN track AS t2 ON t1.genreid = t2.genreid WHERE t1.name = \"Jazz\"",
        "schema": "CREATE TABLE Track (TrackId NUMBER, AlbumId NUMBER, GenreId NUMBER, Name TEXT); CREATE TABLE Genre (Name TEXT, GenreId NUMBER);"
      },
      {
        "question": "Can you list the composer who wrote the most rock genre songs?",
        "query": "SELECT composer FROM genre AS t1 JOIN track AS t2 ON t1.genreid = t2.genreid WHERE t1.name = \"Rock\" GROUP BY composer ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Track (GenreId NUMBER, AlbumId NUMBER, Name TEXT, TrackId NUMBER, Composer TEXT); CREATE TABLE Genre (Name TEXT, GenreId NUMBER);"
      },
      {
        "question": "Can you list all composers who wrote tracks with the letter B in their name?",
        "query": "SELECT composer FROM track WHERE name like \"%B%\"",
        "schema": "CREATE TABLE Track (GenreId NUMBER, TrackId NUMBER, Composer TEXT, Name TEXT, AlbumId NUMBER); CREATE TABLE Genre (GenreId NUMBER, Name TEXT);"
      }
    ],
    [
      {
        "question": "What is the title of AC/DC's albums?",
        "query": "SELECT title FROM album AS t1 JOIN artist AS t2 ON t1.artistid = t2.artistid WHERE t2.name = \"AC/DC\"",
        "schema": "CREATE TABLE Genre (Name TEXT, GenreId NUMBER); CREATE TABLE Album (AlbumId NUMBER, Title TEXT, ArtistId NUMBER); CREATE TABLE Track (Name TEXT, GenreId NUMBER, TrackId NUMBER, AlbumId NUMBER); CREATE TABLE Artist (ArtistId NUMBER, Name TEXT);"
      }
    ],
    [
      {
        "question": "What is the average unit price of Rock tracks?",
        "query": "SELECT AVG ( t2.unitprice ) FROM genre AS t1 JOIN track AS t2 ON t1.genreid = t2.genreid WHERE t1.name = \"Rock\"",
        "schema": "CREATE TABLE Invoice (InvoiceId NUMBER, Total NUMBER); CREATE TABLE Album (Title TEXT, AlbumId NUMBER); CREATE TABLE InvoiceLine (TrackId NUMBER, UnitPrice NUMBER); CREATE TABLE Genre (Name TEXT, GenreId NUMBER); CREATE TABLE Track (UnitPrice NUMBER, TrackId NUMBER, GenreId NUMBER, AlbumId NUMBER, Name TEXT);"
      },
      {
        "question": "What's the average milliseconds of the Rock Tracks?",
        "query": "SELECT AVG ( t2.milliseconds ) FROM genre AS t1 JOIN track AS t2 ON t1.genreid = t2.genreid WHERE t1.name = \"Rock\"",
        "schema": "CREATE TABLE Genre (GenreId NUMBER, Name TEXT); CREATE TABLE InvoiceLine (TrackId NUMBER, UnitPrice NUMBER); CREATE TABLE Track (UnitPrice NUMBER, Name TEXT, GenreId NUMBER, TrackId NUMBER, AlbumId NUMBER, Milliseconds NUMBER); CREATE TABLE Invoice (Total NUMBER, InvoiceId NUMBER); CREATE TABLE Album (Title TEXT, AlbumId NUMBER);"
      },
      {
        "question": "and for the Jazz tracks?",
        "query": "SELECT AVG ( t2.milliseconds ) FROM genre AS t1 JOIN track AS t2 ON t1.genreid = t2.genreid WHERE t1.name = \"Jazz\"",
        "schema": "CREATE TABLE Track (AlbumId NUMBER, UnitPrice NUMBER, GenreId NUMBER, Milliseconds NUMBER, TrackId NUMBER, Name TEXT); CREATE TABLE InvoiceLine (TrackId NUMBER, UnitPrice NUMBER); CREATE TABLE Album (Title TEXT, AlbumId NUMBER); CREATE TABLE Invoice (Total NUMBER, InvoiceId NUMBER); CREATE TABLE Genre (Name TEXT, GenreId NUMBER);"
      }
    ],
    [
      {
        "question": "How many artists have album?",
        "query": "SELECT COUNT ( DISTINCT artistid ) FROM album",
        "schema": "CREATE TABLE Employee (EmployeeId NUMBER); CREATE TABLE Track (AlbumId NUMBER); CREATE TABLE Artist (Name TEXT, ArtistId NUMBER); CREATE TABLE Album (ArtistId NUMBER, Title TEXT, AlbumId NUMBER); CREATE TABLE Customer (FirstName TEXT, CustomerId NUMBER);"
      },
      {
        "question": "Find the album id of  accept? | The album ids of the artist named 'Accept' are 2 and 3. | How many artists in this table?",
        "query": "SELECT COUNT ( DISTINCT t1.artistid ) FROM artist AS t1 JOIN album AS t2 ON t1.artistid = t2.artistid WHERE t1.name = 'Accept'",
        "schema": "CREATE TABLE Album (Title TEXT, ArtistId NUMBER, AlbumId NUMBER); CREATE TABLE Employee (EmployeeId NUMBER); CREATE TABLE Track (AlbumId NUMBER); CREATE TABLE Artist (Name TEXT, ArtistId NUMBER); CREATE TABLE Customer (CustomerId NUMBER, FirstName TEXT);"
      },
      {
        "question": "How many albums in this table? | did you mean the number of all the albums shown in the table? | Yes.",
        "query": "SELECT COUNT ( * ) FROM album",
        "schema": "CREATE TABLE Employee (EmployeeId NUMBER); CREATE TABLE Track (AlbumId NUMBER); CREATE TABLE Album (ArtistId NUMBER, Title TEXT, AlbumId NUMBER); CREATE TABLE Artist (Name TEXT, ArtistId NUMBER); CREATE TABLE Customer (CustomerId NUMBER, FirstName TEXT);"
      }
    ],
    [
      {
        "question": "I want to know the invoice dates corresponding to customers",
        "query": "SELECT t1.firstname, t1.lastname, t2.invoicedate FROM customer AS t1 JOIN invoice AS t2 ON t1.customerid = t2.customerid",
        "schema": "CREATE TABLE Customer (FirstName TEXT, LastName TEXT, CustomerId NUMBER); CREATE TABLE InvoiceLine (InvoiceId NUMBER); CREATE TABLE Invoice (BillingCountry TEXT, Total NUMBER, CustomerId NUMBER, InvoiceDate TIME, BillingAddress TEXT, InvoiceId NUMBER); CREATE TABLE Track (Milliseconds NUMBER, UnitPrice NUMBER);"
      },
      {
        "question": "Could you please help me with the billing addresses of the named customers?",
        "query": "SELECT t1.firstname, t1.lastname, t2.billingaddress FROM customer AS t1 JOIN invoice AS t2 ON t1.customerid = t2.customerid",
        "schema": "CREATE TABLE Track (UnitPrice NUMBER, Milliseconds NUMBER); CREATE TABLE Customer (CustomerId NUMBER, LastName TEXT, Address TEXT, FirstName TEXT); CREATE TABLE InvoiceLine (InvoiceId NUMBER); CREATE TABLE Invoice (InvoiceId NUMBER, BillingPostalCode TEXT, InvoiceDate TIME, BillingAddress TEXT, CustomerId NUMBER, BillingCity TEXT, Total NUMBER, BillingCountry TEXT);"
      },
      {
        "question": "Ok, I will also want to know the billing countries of the named customers",
        "query": "SELECT t1.firstname, t1.lastname, t2.billingcountry FROM customer AS t1 JOIN invoice AS t2 ON t1.customerid = t2.customerid",
        "schema": "CREATE TABLE Track (Milliseconds NUMBER, UnitPrice NUMBER); CREATE TABLE Customer (Address TEXT, State TEXT, Company TEXT, CustomerId NUMBER, Country TEXT, FirstName TEXT, LastName TEXT); CREATE TABLE InvoiceLine (InvoiceId NUMBER); CREATE TABLE Invoice (BillingCity TEXT, BillingAddress TEXT, BillingPostalCode TEXT, Total NUMBER, BillingState TEXT, CustomerId NUMBER, InvoiceDate TIME, BillingCountry TEXT, InvoiceId NUMBER);"
      },
      {
        "question": "OK, I will like to know the billing city of the names customers please.",
        "query": "SELECT t1.firstname, t1.lastname, t2.billingcity FROM customer AS t1 JOIN invoice AS t2 ON t1.customerid = t2.customerid",
        "schema": "CREATE TABLE Customer (CustomerId NUMBER, Company TEXT, Address TEXT, Country TEXT, LastName TEXT, FirstName TEXT, State TEXT, City TEXT); CREATE TABLE Invoice (InvoiceDate TIME, BillingPostalCode TEXT, BillingCountry TEXT, InvoiceId NUMBER, Total NUMBER, CustomerId NUMBER, BillingCity TEXT, BillingAddress TEXT, BillingState TEXT); CREATE TABLE Track (Milliseconds NUMBER, UnitPrice NUMBER); CREATE TABLE InvoiceLine (InvoiceId NUMBER);"
      }
    ],
    [
      {
        "question": "Find the titles of all the albums of the artist AC/DC?",
        "query": "SELECT title FROM album AS t1 JOIN artist AS t2 ON t1.artistid = t2.artistid WHERE t2.name = \"AC/DC\"",
        "schema": "CREATE TABLE Artist (ArtistId NUMBER, Name TEXT); CREATE TABLE Album (Title TEXT, AlbumId NUMBER, ArtistId NUMBER); CREATE TABLE Genre (Name TEXT, GenreId NUMBER); CREATE TABLE Track (AlbumId NUMBER);"
      },
      {
        "question": "Find the titles of all the albums of the artist Aerosmith please?",
        "query": "SELECT title FROM album AS t1 JOIN artist AS t2 ON t1.artistid = t2.artistid WHERE t2.name = \"Aerosmith\"",
        "schema": "CREATE TABLE Artist (Name TEXT, ArtistId NUMBER); CREATE TABLE Track (AlbumId NUMBER); CREATE TABLE Genre (Name TEXT, GenreId NUMBER); CREATE TABLE Album (ArtistId NUMBER, Title TEXT, AlbumId NUMBER);"
      },
      {
        "question": "What are the titles of all the albums by artist id 4?",
        "query": "SELECT title FROM album WHERE artistid = 4",
        "schema": "CREATE TABLE Genre (Name TEXT, GenreId NUMBER); CREATE TABLE Artist (Name TEXT, ArtistId NUMBER); CREATE TABLE Album (AlbumId NUMBER, ArtistId NUMBER, Title TEXT); CREATE TABLE Track (AlbumId NUMBER, Name TEXT);"
      }
    ],
    [
      {
        "question": "Show me the title of album id 1?",
        "query": "SELECT t1.title FROM album AS t1 JOIN artist AS t2 ON t1.artistid = t2.artistid WHERE t1.albumid = 1",
        "schema": "CREATE TABLE Track (Name TEXT, TrackId NUMBER, AlbumId NUMBER); CREATE TABLE Artist (Name TEXT, ArtistId NUMBER); CREATE TABLE Employee (EmployeeId NUMBER); CREATE TABLE Album (ArtistId NUMBER, Title TEXT, AlbumId NUMBER);"
      },
      {
        "question": "Show me the name of artist with artist id 3?",
        "query": "SELECT name FROM artist WHERE artistid = 3",
        "schema": "CREATE TABLE Album (ArtistId NUMBER, AlbumId NUMBER, Title TEXT); CREATE TABLE Artist (ArtistId NUMBER, Name TEXT); CREATE TABLE Track (TrackId NUMBER, Name TEXT, AlbumId NUMBER); CREATE TABLE Employee (EmployeeId NUMBER);"
      },
      {
        "question": "Show me the names of all artist?",
        "query": "SELECT name FROM artist",
        "schema": "CREATE TABLE Employee (EmployeeId NUMBER); CREATE TABLE Artist (Name TEXT, ArtistId NUMBER); CREATE TABLE Album (Title TEXT, AlbumId NUMBER, ArtistId NUMBER); CREATE TABLE Track (AlbumId NUMBER, Name TEXT, TrackId NUMBER);"
      },
      {
        "question": "Show me the list of all id and names of all artists that have at least 3 albums in alphabetical order?",
        "query": "SELECT t2.name , t1.artistid FROM album AS t1 JOIN artist AS t2 ON t1.artistid = t2.artistid GROUP BY t1.artistid HAVING COUNT ( * ) > = 3 ORDER BY t2.name",
        "schema": "CREATE TABLE Track (AlbumId NUMBER, TrackId NUMBER, Name TEXT); CREATE TABLE Employee (EmployeeId NUMBER); CREATE TABLE Album (Title TEXT, AlbumId NUMBER, ArtistId NUMBER); CREATE TABLE Artist (Name TEXT, ArtistId NUMBER);"
      }
    ],
    [
      {
        "question": "How many customers are there?",
        "query": "SELECT COUNT ( * ) FROM customer",
        "schema": "CREATE TABLE Invoice (CustomerId NUMBER); CREATE TABLE Customer (State TEXT, City TEXT, Phone TEXT, CustomerId NUMBER, FirstName TEXT, Address TEXT, Country TEXT, SupportRepId NUMBER, Company TEXT, LastName TEXT);"
      },
      {
        "question": "What is the most popular company?",
        "query": "SELECT company FROM customer GROUP BY company ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Invoice (CustomerId NUMBER); CREATE TABLE Customer (LastName TEXT, SupportRepId NUMBER, State TEXT, Phone TEXT, CustomerId NUMBER, City TEXT, Address TEXT, Country TEXT, FirstName TEXT, Company TEXT);"
      },
      {
        "question": "How many customers have gmail emails?",
        "query": "SELECT COUNT ( * ) FROM customer WHERE email LIKE \"%gmail.com%\"",
        "schema": "CREATE TABLE Invoice (CustomerId NUMBER); CREATE TABLE Customer (State TEXT, Company TEXT, Country TEXT, LastName TEXT, Address TEXT, CustomerId NUMBER, Phone TEXT, Email TEXT, City TEXT, SupportRepId NUMBER, FirstName TEXT);"
      }
    ],
    [
      {
        "question": "I am interested in learning who the artist is.",
        "query": "SELECT t2.name FROM album AS t1 JOIN artist AS t2 ON t1.artistid = t2.artistid WHERE t1.title = \"Balls to the Wall\"",
        "schema": "CREATE TABLE Album (AlbumId NUMBER, ArtistId NUMBER, Title TEXT); CREATE TABLE Artist (Name TEXT, ArtistId NUMBER);"
      },
      {
        "question": "That's okay. What are some of Accept's other albums?",
        "query": "SELECT t1.title FROM album AS t1 JOIN artist AS t2 ON t1.artistid = t2.artistid WHERE t2.name = \"Accept\" AND t1.title ! = \"Balls to the Wall\"",
        "schema": "CREATE TABLE Album (ArtistId NUMBER, AlbumId NUMBER, Title TEXT); CREATE TABLE Artist (Name TEXT, ArtistId NUMBER); CREATE TABLE Genre (Name TEXT); CREATE TABLE Track (AlbumId NUMBER, Name TEXT, TrackId NUMBER);"
      },
      {
        "question": "That sounds good. What about the album \"For Those About To Rock, We Salute You\"? Which artist produced that one?",
        "query": "SELECT t2.name FROM album AS t1 JOIN artist AS t2 ON t1.artistid = t2.artistid WHERE t1.title = \"For Those About To Rock We Salute You\"",
        "schema": "CREATE TABLE Artist (Name TEXT, ArtistId NUMBER); CREATE TABLE Track (GenreId NUMBER, TrackId NUMBER, Composer TEXT, AlbumId NUMBER, Name TEXT); CREATE TABLE Genre (Name TEXT, GenreId NUMBER); CREATE TABLE Album (ArtistId NUMBER, Title TEXT, AlbumId NUMBER);"
      }
    ],
    [
      {
        "question": "Hello there!  Can you tell me, which media type is the least common associated with all tracks?",
        "query": "SELECT t1.name FROM mediatype AS t1 JOIN track AS t2 ON t1.mediatypeid = t2.mediatypeid GROUP BY t2.mediatypeid ORDER BY COUNT ( * ) ASC LIMIT 1",
        "schema": "CREATE TABLE Album (AlbumId NUMBER); CREATE TABLE Genre (GenreId NUMBER); CREATE TABLE MediaType (MediaTypeId NUMBER, Name TEXT); CREATE TABLE Track (GenreId NUMBER, Name TEXT, TrackId NUMBER, MediaTypeId NUMBER);"
      },
      {
        "question": "Thank you!  Can you show me the total number of occurrences for Purchased AAC as the media type?",
        "query": "SELECT t1.name,COUNT ( * ) FROM mediatype AS t1 JOIN track AS t2 ON t1.mediatypeid = t2.mediatypeid GROUP BY t2.mediatypeid ORDER BY COUNT ( * ) ASC LIMIT 1",
        "schema": "CREATE TABLE Genre (GenreId NUMBER); CREATE TABLE MediaType (Name TEXT, MediaTypeId NUMBER); CREATE TABLE Track (GenreId NUMBER, TrackId NUMBER, Milliseconds NUMBER, Name TEXT, MediaTypeId NUMBER); CREATE TABLE Album (AlbumId NUMBER);"
      }
    ],
    [
      {
        "question": "find the name of the Track 2?",
        "query": "SELECT name FROM track WHERE trackid = '2'",
        "schema": "CREATE TABLE InvoiceLine (TrackId NUMBER); CREATE TABLE Album (Title TEXT, AlbumId NUMBER); CREATE TABLE Employee (EmployeeId NUMBER); CREATE TABLE Artist (ArtistId NUMBER); CREATE TABLE Track (Name TEXT, TrackId NUMBER, AlbumId NUMBER);"
      },
      {
        "question": "what is the unit price of the Fast as a shark?",
        "query": "SELECT unitprice FROM track WHERE name = 'Fast As a Shark'",
        "schema": "CREATE TABLE Employee (EmployeeId NUMBER); CREATE TABLE Album (AlbumId NUMBER, Title TEXT); CREATE TABLE Invoice (Total NUMBER, InvoiceId NUMBER); CREATE TABLE Artist (ArtistId NUMBER); CREATE TABLE Track (TrackId NUMBER, Milliseconds NUMBER, Name TEXT, AlbumId NUMBER, UnitPrice NUMBER); CREATE TABLE InvoiceLine (UnitPrice NUMBER, TrackId NUMBER);"
      },
      {
        "question": "Find the milliseconds of Track id 1?",
        "query": "SELECT milliseconds FROM track WHERE trackid = 1",
        "schema": "CREATE TABLE Employee (EmployeeId NUMBER); CREATE TABLE Invoice (InvoiceId NUMBER, Total NUMBER); CREATE TABLE Track (TrackId NUMBER, UnitPrice NUMBER, AlbumId NUMBER, Milliseconds NUMBER, Name TEXT); CREATE TABLE Album (AlbumId NUMBER, Title TEXT); CREATE TABLE InvoiceLine (TrackId NUMBER, UnitPrice NUMBER); CREATE TABLE Artist (ArtistId NUMBER);"
      },
      {
        "question": "how many genre in the list?",
        "query": "SELECT COUNT ( * ) FROM genre",
        "schema": "CREATE TABLE Track (Milliseconds NUMBER, UnitPrice NUMBER, Name TEXT, GenreId NUMBER, TrackId NUMBER, AlbumId NUMBER); CREATE TABLE Employee (EmployeeId NUMBER); CREATE TABLE Album (Title TEXT, AlbumId NUMBER); CREATE TABLE Invoice (InvoiceId NUMBER, Total NUMBER); CREATE TABLE Artist (ArtistId NUMBER); CREATE TABLE Genre (GenreId NUMBER, Name TEXT); CREATE TABLE InvoiceLine (UnitPrice NUMBER, TrackId NUMBER);"
      }
    ],
    [
      {
        "question": "How many employees serve at least 10 customers?",
        "query": "SELECT COUNT ( * ) FROM customer AS t1 JOIN employee AS t2 ON t1.supportrepid = t2.employeeid GROUP BY t1.supportrepid HAVING COUNT ( * ) > = 10",
        "schema": "CREATE TABLE Invoice (CustomerId NUMBER); CREATE TABLE Customer (City TEXT, CustomerId NUMBER, Company TEXT, FirstName TEXT, SupportRepId NUMBER, LastName TEXT, State TEXT); CREATE TABLE Employee (Phone TEXT, FirstName TEXT, HireDate TIME, Title TEXT, LastName TEXT, EmployeeId NUMBER, State TEXT, ReportsTo NUMBER);"
      },
      {
        "question": "What are the first names of employees that serve at least 10 customers?",
        "query": "SELECT t1.firstname FROM customer AS t1 JOIN employee AS t2 ON t1.supportrepid = t2.employeeid GROUP BY t1.supportrepid HAVING COUNT ( * ) > = 10",
        "schema": "CREATE TABLE Customer (City TEXT, State TEXT, LastName TEXT, CustomerId NUMBER, SupportRepId NUMBER, Company TEXT, FirstName TEXT); CREATE TABLE Employee (Phone TEXT, FirstName TEXT, EmployeeId NUMBER, State TEXT, LastName TEXT, ReportsTo NUMBER, HireDate TIME, Title TEXT); CREATE TABLE Invoice (CustomerId NUMBER);"
      },
      {
        "question": "What is diego  work title? | is Diego the employee first name? | Yes",
        "query": "SELECT company FROM customer WHERE firstname = \"Diego\"",
        "schema": "CREATE TABLE Customer (State TEXT, CustomerId NUMBER, City TEXT, FirstName TEXT, LastName TEXT, Company TEXT, SupportRepId NUMBER); CREATE TABLE Invoice (CustomerId NUMBER); CREATE TABLE Employee (LastName TEXT, EmployeeId NUMBER, ReportsTo NUMBER, Title TEXT, FirstName TEXT, State TEXT, Phone TEXT, HireDate TIME);"
      }
    ],
    [
      {
        "question": "how many customers are  there",
        "query": "SELECT COUNT ( * ) FROM customer",
        "schema": "CREATE TABLE Invoice (CustomerId NUMBER); CREATE TABLE Customer (CustomerId NUMBER, Country TEXT, State TEXT, LastName TEXT, SupportRepId NUMBER, FirstName TEXT, Address TEXT, Company TEXT, Phone TEXT, City TEXT);"
      },
      {
        "question": "what is the email id of fran\u00e7ois tremblay | ftremblay@gmail.com is the email of the customer with first and last names fran\u00e7ois tremblay. | what is the birth date of Adams Andrew",
        "query": "SELECT birthdate FROM employee WHERE firstname IS 'Andrew' AND lastname IS 'Adams'",
        "schema": "CREATE TABLE Artist (Name TEXT); CREATE TABLE Invoice (CustomerId NUMBER); CREATE TABLE Employee (ReportsTo NUMBER, LastName TEXT, Email TEXT, BirthDate TIME, FirstName TEXT, EmployeeId NUMBER); CREATE TABLE Customer (Email TEXT, City TEXT, State TEXT, SupportRepId NUMBER, LastName TEXT, CustomerId NUMBER, Country TEXT, Phone TEXT, Company TEXT, FirstName TEXT, Address TEXT);"
      }
    ],
    [
      {
        "question": "how many customers live in germany and have invoice",
        "query": "SELECT COUNT ( * ) FROM customer AS t1 JOIN invoice AS t2 ON t1.customerid = t2.customerid WHERE t1.country = \"Germany\"",
        "schema": "CREATE TABLE Invoice (BillingCountry TEXT, CustomerId NUMBER, InvoiceId NUMBER, BillingCity TEXT, Total NUMBER); CREATE TABLE Employee (Country TEXT); CREATE TABLE Customer (City TEXT, State TEXT, CustomerId NUMBER, PostalCode TEXT, Address TEXT, Country TEXT);"
      },
      {
        "question": "* I have left the chat *",
        "query": "SELECT t1.address FROM customer AS t1 JOIN invoice AS t2 ON t1.customerid = t2.customerid WHERE t1.country = \"Germany\"",
        "schema": "CREATE TABLE Invoice (InvoiceId NUMBER, Total NUMBER, BillingCity TEXT, BillingCountry TEXT, CustomerId NUMBER); CREATE TABLE Customer (City TEXT, PostalCode TEXT, Country TEXT, FirstName TEXT, Address TEXT, LastName TEXT, State TEXT, CustomerId NUMBER); CREATE TABLE Employee (Country TEXT);"
      },
      {
        "question": "include the first and last name of customers of this address in the table",
        "query": "SELECT t1.address,t1.firstname,t1.lastname FROM customer AS t1 JOIN invoice AS t2 ON t1.customerid = t2.customerid WHERE t1.country = \"Germany\"",
        "schema": "CREATE TABLE Employee (Country TEXT); CREATE TABLE Customer (FirstName TEXT, City TEXT, CustomerId NUMBER, State TEXT, LastName TEXT, Address TEXT, PostalCode TEXT, Country TEXT); CREATE TABLE Invoice (Total NUMBER, CustomerId NUMBER, BillingCity TEXT, BillingCountry TEXT, InvoiceId NUMBER);"
      }
    ],
    [
      {
        "question": "Which artist has the most albums?",
        "query": "SELECT t2.name FROM album AS t1 JOIN artist AS t2 ON t1.artistid = t2.artistid GROUP BY t2.name ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Customer (FirstName TEXT); CREATE TABLE Album (ArtistId NUMBER, AlbumId NUMBER, Title TEXT); CREATE TABLE Artist (ArtistId NUMBER, Name TEXT); CREATE TABLE Track (AlbumId NUMBER);"
      },
      {
        "question": "Which artist has the lowest albums? | Did you mean which artist has the least number of albums? | Yes, I mean it.\nwhich artist has the least number of albums?",
        "query": "SELECT t2.name FROM album AS t1 JOIN artist AS t2 ON t1.artistid = t2.artistid GROUP BY t2.name ORDER BY COUNT ( * ) ASC LIMIT 1",
        "schema": "CREATE TABLE Artist (Name TEXT, ArtistId NUMBER); CREATE TABLE Track (AlbumId NUMBER); CREATE TABLE Customer (FirstName TEXT); CREATE TABLE Album (AlbumId NUMBER, Title TEXT, ArtistId NUMBER);"
      },
      {
        "question": "Can you tell me the artist ID number of the Iron Maiden?",
        "query": "SELECT t1.artistid FROM album AS t1 JOIN artist AS t2 ON t1.artistid = t2.artistid GROUP BY t2.name ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Track (AlbumId NUMBER); CREATE TABLE Album (AlbumId NUMBER, Title TEXT, ArtistId NUMBER); CREATE TABLE Customer (FirstName TEXT); CREATE TABLE Artist (ArtistId NUMBER, Name TEXT);"
      },
      {
        "question": "Can you tell me the artist ID number of the Aaron Copland & London Symphony Orchestra.",
        "query": "SELECT t1.artistid FROM album AS t1 JOIN artist AS t2 ON t1.artistid = t2.artistid GROUP BY t2.name ORDER BY COUNT ( * ) ASC LIMIT 1",
        "schema": "CREATE TABLE Customer (FirstName TEXT); CREATE TABLE Album (AlbumId NUMBER, ArtistId NUMBER, Title TEXT); CREATE TABLE Artist (ArtistId NUMBER, Name TEXT); CREATE TABLE Track (AlbumId NUMBER);"
      }
    ],
    [
      {
        "question": "Can you show me the customer names that have an invoice?",
        "query": "SELECT firstname, lastname FROM customer WHERE customerid IN ( SELECT customerid FROM customer INTERSECT SELECT customerid FROM invoice )",
        "schema": "CREATE TABLE Invoice (InvoiceId NUMBER, BillingAddress TEXT, CustomerId NUMBER); CREATE TABLE Customer (CustomerId NUMBER, FirstName TEXT, SupportRepId NUMBER, LastName TEXT); CREATE TABLE InvoiceLine (InvoiceId NUMBER);"
      },
      {
        "question": "Hmm, I want to know all the customer names that live in Brazil and have an invoice. | Here are the distinct first names of all the customer that live in Brazil and have an invoice. | Can you also list their customer ids?",
        "query": "SELECT DISTINCT t1.firstname, t1.customerid FROM customer AS t1 JOIN invoice AS t2 ON t1.customerid = t2.customerid WHERE t1.country = \"Brazil\"",
        "schema": "CREATE TABLE Invoice (InvoiceId NUMBER, CustomerId NUMBER, BillingAddress TEXT); CREATE TABLE InvoiceLine (InvoiceId NUMBER); CREATE TABLE Customer (FirstName TEXT, State TEXT, Address TEXT, SupportRepId NUMBER, LastName TEXT, City TEXT, CustomerId NUMBER, Country TEXT);"
      }
    ],
    [
      {
        "question": "How many composers do you have recorded in the system ?",
        "query": "SELECT COUNT ( DISTINCT composer ) FROM track",
        "schema": "CREATE TABLE Artist (ArtistId NUMBER); CREATE TABLE Track (AlbumId NUMBER, GenreId NUMBER, TrackId NUMBER, Composer TEXT, MediaTypeId NUMBER); CREATE TABLE MediaType (MediaTypeId NUMBER); CREATE TABLE Genre (Name TEXT, GenreId NUMBER); CREATE TABLE Album (ArtistId NUMBER, AlbumId NUMBER);"
      },
      {
        "question": "Have many MPEG media audio files are in the system ?",
        "query": "SELECT COUNT ( * ) FROM mediatype AS t1 JOIN track AS t2 ON t1.mediatypeid = t2.mediatypeid WHERE t1.name = \"MPEG audio file\"",
        "schema": "CREATE TABLE Album (AlbumId NUMBER, ArtistId NUMBER); CREATE TABLE Genre (Name TEXT, GenreId NUMBER); CREATE TABLE Artist (ArtistId NUMBER); CREATE TABLE Track (TrackId NUMBER, AlbumId NUMBER, MediaTypeId NUMBER, Composer TEXT, Name TEXT, GenreId NUMBER, Milliseconds NUMBER); CREATE TABLE MediaType (MediaTypeId NUMBER, Name TEXT);"
      },
      {
        "question": "What is the highest recorded millisecond for a single track ?",
        "query": "SELECT MAX ( milliseconds ) FROM track",
        "schema": "CREATE TABLE Artist (ArtistId NUMBER); CREATE TABLE Genre (Name TEXT, GenreId NUMBER); CREATE TABLE Album (AlbumId NUMBER, ArtistId NUMBER); CREATE TABLE MediaType (MediaTypeId NUMBER, Name TEXT); CREATE TABLE Track (TrackId NUMBER, GenreId NUMBER, Bytes NUMBER, Composer TEXT, AlbumId NUMBER, Name TEXT, MediaTypeId NUMBER, Milliseconds NUMBER);"
      },
      {
        "question": "What is the title name for the highest recorded single track ?",
        "query": "SELECT name FROM track ORDER BY milliseconds DESC LIMIT 1",
        "schema": "CREATE TABLE Genre (Name TEXT, GenreId NUMBER); CREATE TABLE Album (AlbumId NUMBER, Title TEXT, ArtistId NUMBER); CREATE TABLE Artist (ArtistId NUMBER); CREATE TABLE Track (Composer TEXT, TrackId NUMBER, MediaTypeId NUMBER, GenreId NUMBER, AlbumId NUMBER, Name TEXT, Milliseconds NUMBER, Bytes NUMBER); CREATE TABLE MediaType (Name TEXT, MediaTypeId NUMBER);"
      },
      {
        "question": "What is the Album Id for Occupation / Precipice ?",
        "query": "SELECT albumid FROM track WHERE name = \"Occupation / Precipice\"",
        "schema": "CREATE TABLE Artist (ArtistId NUMBER); CREATE TABLE Genre (Name TEXT, GenreId NUMBER); CREATE TABLE Track (Composer TEXT, MediaTypeId NUMBER, Milliseconds NUMBER, AlbumId NUMBER, GenreId NUMBER, Bytes NUMBER, Name TEXT, TrackId NUMBER); CREATE TABLE Album (Title TEXT, ArtistId NUMBER, AlbumId NUMBER); CREATE TABLE Employee (HireDate TIME); CREATE TABLE MediaType (Name TEXT, MediaTypeId NUMBER);"
      }
    ],
    [
      {
        "question": "Filter the track table to show only those records with unit price bigger than 1",
        "query": "SELECT * FROM track WHERE unitprice>1",
        "schema": "CREATE TABLE Album (AlbumId NUMBER); CREATE TABLE InvoiceLine (TrackId NUMBER, UnitPrice NUMBER); CREATE TABLE Track (UnitPrice NUMBER, AlbumId NUMBER, Name TEXT, TrackId NUMBER, Milliseconds NUMBER, GenreId NUMBER);"
      },
      {
        "question": "Count the number of records in the previous table.",
        "query": "SELECT COUNT ( * ) FROM track",
        "schema": "CREATE TABLE Track (Name TEXT, TrackId NUMBER, UnitPrice NUMBER, GenreId NUMBER, Milliseconds NUMBER, AlbumId NUMBER); CREATE TABLE Album (AlbumId NUMBER); CREATE TABLE InvoiceLine (UnitPrice NUMBER, TrackId NUMBER); CREATE TABLE Invoice (Total NUMBER);"
      },
      {
        "question": "Calculate average price for all tracks",
        "query": "SELECT AVG ( unitprice ) FROM track",
        "schema": "CREATE TABLE Album (AlbumId NUMBER); CREATE TABLE Track (Name TEXT, AlbumId NUMBER, Milliseconds NUMBER, UnitPrice NUMBER, GenreId NUMBER, TrackId NUMBER); CREATE TABLE InvoiceLine (TrackId NUMBER, UnitPrice NUMBER); CREATE TABLE Invoice (Total NUMBER);"
      }
    ],
    [
      {
        "question": "what is the average of the milliseconds?",
        "query": "SELECT AVG ( milliseconds ) FROM track",
        "schema": "CREATE TABLE Track (Milliseconds NUMBER, TrackId NUMBER, GenreId NUMBER, UnitPrice NUMBER, AlbumId NUMBER, Name TEXT, Bytes NUMBER); CREATE TABLE Customer (CustomerId NUMBER, SupportRepId NUMBER); CREATE TABLE Album (AlbumId NUMBER, ArtistId NUMBER); CREATE TABLE Genre (GenreId NUMBER); CREATE TABLE InvoiceLine (Quantity NUMBER, InvoiceId NUMBER, TrackId NUMBER); CREATE TABLE Invoice (BillingCountry TEXT, CustomerId NUMBER, Total NUMBER, InvoiceId NUMBER); CREATE TABLE PlaylistTrack (TrackId NUMBER); CREATE TABLE MediaType (MediaTypeId NUMBER); CREATE TABLE Employee (EmployeeId NUMBER, ReportsTo NUMBER); CREATE TABLE Artist (ArtistId NUMBER);"
      },
      {
        "question": "what is the average of the bytes?",
        "query": "SELECT AVG ( bytes ) FROM track",
        "schema": "CREATE TABLE MediaType (MediaTypeId NUMBER); CREATE TABLE Invoice (CustomerId NUMBER, InvoiceId NUMBER, Total NUMBER, BillingCountry TEXT); CREATE TABLE PlaylistTrack (TrackId NUMBER); CREATE TABLE Employee (ReportsTo NUMBER, EmployeeId NUMBER); CREATE TABLE Artist (ArtistId NUMBER); CREATE TABLE InvoiceLine (Quantity NUMBER, TrackId NUMBER, InvoiceId NUMBER); CREATE TABLE Genre (GenreId NUMBER); CREATE TABLE Album (AlbumId NUMBER, ArtistId NUMBER); CREATE TABLE Customer (CustomerId NUMBER, SupportRepId NUMBER); CREATE TABLE Track (GenreId NUMBER, TrackId NUMBER, UnitPrice NUMBER, Bytes NUMBER, AlbumId NUMBER, Milliseconds NUMBER, Name TEXT);"
      },
      {
        "question": "what is the highest unit price?",
        "query": "SELECT MAX ( unitprice ) FROM track",
        "schema": "CREATE TABLE Artist (ArtistId NUMBER); CREATE TABLE PlaylistTrack (TrackId NUMBER); CREATE TABLE Album (ArtistId NUMBER, AlbumId NUMBER); CREATE TABLE Genre (GenreId NUMBER); CREATE TABLE Track (AlbumId NUMBER, UnitPrice NUMBER, GenreId NUMBER, TrackId NUMBER, Bytes NUMBER, Name TEXT, Milliseconds NUMBER); CREATE TABLE Invoice (Total NUMBER, InvoiceId NUMBER, CustomerId NUMBER, BillingCountry TEXT); CREATE TABLE InvoiceLine (UnitPrice NUMBER, InvoiceId NUMBER, TrackId NUMBER, Quantity NUMBER); CREATE TABLE Employee (EmployeeId NUMBER, ReportsTo NUMBER); CREATE TABLE MediaType (MediaTypeId NUMBER); CREATE TABLE Customer (CustomerId NUMBER, SupportRepId NUMBER);"
      }
    ],
    [
      {
        "question": "What is the least common media type in all tracks",
        "query": "SELECT t1.name FROM mediatype AS t1 JOIN track AS t2 ON t1.mediatypeid = t2.mediatypeid GROUP BY t2.mediatypeid ORDER BY COUNT ( * ) ASC LIMIT 1",
        "schema": "CREATE TABLE MediaType (MediaTypeId NUMBER, Name TEXT); CREATE TABLE Track (MediaTypeId NUMBER, TrackId NUMBER);"
      },
      {
        "question": "How many different kinds of media types are there?",
        "query": "SELECT COUNT ( * ) FROM ( SELECT t2.mediatypeid FROM mediatype AS t1 JOIN track AS t2 ON t1.mediatypeid = t2.mediatypeid GROUP BY t2.mediatypeid )",
        "schema": "CREATE TABLE Track (MediaTypeId NUMBER, TrackId NUMBER, Name TEXT); CREATE TABLE MediaType (MediaTypeId NUMBER, Name TEXT);"
      },
      {
        "question": "What is the most common media type?",
        "query": "SELECT t1.name FROM mediatype AS t1 JOIN track AS t2 ON t1.mediatypeid = t2.mediatypeid GROUP BY t2.mediatypeid ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE MediaType (Name TEXT, MediaTypeId NUMBER); CREATE TABLE Track (MediaTypeId NUMBER, Name TEXT, TrackId NUMBER);"
      },
      {
        "question": "How many tracks are there?",
        "query": "SELECT COUNT ( * ) FROM track",
        "schema": "CREATE TABLE MediaType (MediaTypeId NUMBER, Name TEXT); CREATE TABLE Track (MediaTypeId NUMBER, Milliseconds NUMBER, TrackId NUMBER, Name TEXT);"
      }
    ],
    [
      {
        "question": "what are the durations of the longest tracts?",
        "query": "SELECT MAX ( milliseconds ) FROM track",
        "schema": "CREATE TABLE Genre (GenreId NUMBER, Name TEXT); CREATE TABLE Employee (EmployeeId NUMBER); CREATE TABLE Track (AlbumId NUMBER, Bytes NUMBER, TrackId NUMBER, Milliseconds NUMBER, GenreId NUMBER, Name TEXT); CREATE TABLE Album (Title TEXT, ArtistId NUMBER, AlbumId NUMBER); CREATE TABLE Artist (ArtistId NUMBER, Name TEXT);"
      },
      {
        "question": "what are the shortest tracks?",
        "query": "SELECT MIN ( milliseconds ) FROM track",
        "schema": "CREATE TABLE Artist (ArtistId NUMBER, Name TEXT); CREATE TABLE Album (Title TEXT, AlbumId NUMBER, ArtistId NUMBER); CREATE TABLE Track (Name TEXT, AlbumId NUMBER, TrackId NUMBER, Milliseconds NUMBER, GenreId NUMBER, Bytes NUMBER); CREATE TABLE Genre (GenreId NUMBER, Name TEXT); CREATE TABLE Employee (EmployeeId NUMBER);"
      },
      {
        "question": "How many composer are there?",
        "query": "SELECT COUNT ( composer ) FROM track",
        "schema": "CREATE TABLE Employee (EmployeeId NUMBER); CREATE TABLE Album (ArtistId NUMBER, AlbumId NUMBER, Title TEXT); CREATE TABLE Track (AlbumId NUMBER, TrackId NUMBER, Composer TEXT, Milliseconds NUMBER, Name TEXT, Bytes NUMBER, GenreId NUMBER); CREATE TABLE Artist (Name TEXT, ArtistId NUMBER); CREATE TABLE Genre (GenreId NUMBER, Name TEXT);"
      }
    ]
  ],
  "music_1": [
    [
      {
        "question": "Provide all the details of the song Tumi robe nirobe?",
        "query": "SELECT * FROM song WHERE song_name = \"Tumi robe nirobe\"",
        "schema": "CREATE TABLE files (artist_name TEXT, f_id NUMBER); CREATE TABLE artist (artist_name TEXT); CREATE TABLE song (song_name TEXT, f_id NUMBER, languages TEXT, artist_name TEXT, rating NUMBER);"
      },
      {
        "question": "What are the maximum and minimum resolution of songs whose duration in 3 minutes?",
        "query": "SELECT MAX ( t2.resolution ) , MIN ( t2.resolution ) FROM files AS t1 JOIN song AS t2 ON t1.f_id = t2.f_id WHERE t1.duration LIKE \"3:%\"",
        "schema": "CREATE TABLE artist (artist_name TEXT); CREATE TABLE files (artist_name TEXT, duration TEXT, f_id NUMBER); CREATE TABLE song (artist_name TEXT, f_id NUMBER, song_name TEXT, languages TEXT, rating NUMBER, resolution NUMBER);"
      },
      {
        "question": "List the songs with size more than 4MB ?",
        "query": "SELECT * FROM files AS t1 JOIN song AS t2 ON t1.f_id = t2.f_id WHERE file_size > 4",
        "schema": "CREATE TABLE song (languages TEXT, song_name TEXT, artist_name TEXT, resolution NUMBER, f_id NUMBER, rating NUMBER); CREATE TABLE files (f_id NUMBER, file_size TEXT, artist_name TEXT, duration TEXT); CREATE TABLE artist (artist_name TEXT);"
      }
    ],
    [
      {
        "question": "What are the names of the artists from Bangladesh?",
        "query": "SELECT artist_name FROM artist WHERE country = \"Bangladesh\"",
        "schema": "CREATE TABLE artist (artist_name TEXT, country TEXT); CREATE TABLE files (f_id NUMBER, artist_name TEXT); CREATE TABLE song (country TEXT, languages TEXT, artist_name TEXT);"
      },
      {
        "question": "Which artists from Bangladesh have never received a rating higher that 7?",
        "query": "SELECT DISTINCT artist_name FROM artist WHERE country = \"Bangladesh\" EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating > 7",
        "schema": "CREATE TABLE files (artist_name TEXT, f_id NUMBER); CREATE TABLE song (rating NUMBER, country TEXT, languages TEXT, artist_name TEXT); CREATE TABLE artist (country TEXT, artist_name TEXT);"
      },
      {
        "question": "Can you add their genders into the table please?",
        "query": "SELECT artist_name, gender FROM artist WHERE artist_name IN ( SELECT DISTINCT artist_name FROM artist WHERE country = \"Bangladesh\" EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating > 7 )",
        "schema": "CREATE TABLE files (f_id NUMBER, artist_name TEXT); CREATE TABLE song (artist_name TEXT, country TEXT, languages TEXT, rating NUMBER, song_name TEXT); CREATE TABLE artist (country TEXT, artist_name TEXT, gender TEXT);"
      },
      {
        "question": "What are their preferred genres?",
        "query": "SELECT preferred_genre FROM artist WHERE artist_name IN ( SELECT DISTINCT artist_name FROM artist WHERE country = \"Bangladesh\" EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating > 7 )",
        "schema": "CREATE TABLE files (artist_name TEXT, f_id NUMBER); CREATE TABLE artist (preferred_genre TEXT, country TEXT, artist_name TEXT, gender TEXT); CREATE TABLE genre (rating TEXT, g_name TEXT, most_popular_in TEXT); CREATE TABLE song (song_name TEXT, languages TEXT, genre_is TEXT, artist_name TEXT, rating NUMBER, country TEXT);"
      },
      {
        "question": "What are the names of the songs they have sung?",
        "query": "SELECT song_name FROM song WHERE artist_name IN ( SELECT DISTINCT artist_name FROM artist WHERE country = \"Bangladesh\" EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating > 7 )",
        "schema": "CREATE TABLE genre (rating TEXT, most_popular_in TEXT, g_name TEXT); CREATE TABLE files (f_id NUMBER, artist_name TEXT); CREATE TABLE artist (country TEXT, preferred_genre TEXT, artist_name TEXT, gender TEXT); CREATE TABLE song (rating NUMBER, languages TEXT, genre_is TEXT, song_name TEXT, artist_name TEXT, country TEXT);"
      }
    ],
    [
      {
        "question": "Give me the names of the English Artist",
        "query": "SELECT DISTINCT artist_name FROM song WHERE languages = \"english\"",
        "schema": "CREATE TABLE song (languages TEXT, artist_name TEXT, f_id NUMBER, song_name TEXT); CREATE TABLE artist (country TEXT, artist_name TEXT); CREATE TABLE files (artist_name TEXT, f_id NUMBER);"
      },
      {
        "question": "List the names of the English Artist whose song's rating is not 10",
        "query": "SELECT DISTINCT artist_name FROM song WHERE languages = \"english\" EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating = 10",
        "schema": "CREATE TABLE song (languages TEXT, rating NUMBER, artist_name TEXT, song_name TEXT, f_id NUMBER); CREATE TABLE files (artist_name TEXT, f_id NUMBER); CREATE TABLE artist (artist_name TEXT, country TEXT);"
      }
    ],
    [
      {
        "question": "Can you show the artist name of f id 2?",
        "query": "SELECT artist_name FROM files WHERE f_id = '2'",
        "schema": "CREATE TABLE song (song_name TEXT, f_id NUMBER, artist_name TEXT); CREATE TABLE files (artist_name TEXT, f_id NUMBER); CREATE TABLE artist (artist_name TEXT);"
      },
      {
        "question": "Can you show the ids of songs that are available in either mp4 format or have resolution above 720?",
        "query": "SELECT f_id FROM files WHERE formats = \"mp4\" UNION SELECT f_id FROM song WHERE resolution > 720",
        "schema": "CREATE TABLE artist (artist_name TEXT); CREATE TABLE song (resolution NUMBER, f_id NUMBER, song_name TEXT, artist_name TEXT); CREATE TABLE files (formats TEXT, f_id NUMBER, artist_name TEXT);"
      },
      {
        "question": "Can you the artist name of Song Tum robe nirobe?",
        "query": "SELECT artist_name FROM song WHERE song_name = 'Tumi robe nirobe'",
        "schema": "CREATE TABLE files (formats TEXT, f_id NUMBER, artist_name TEXT); CREATE TABLE song (f_id NUMBER, artist_name TEXT, song_name TEXT, resolution NUMBER); CREATE TABLE artist (artist_name TEXT);"
      }
    ],
    [
      {
        "question": "How many songs are there?",
        "query": "SELECT COUNT ( * ) FROM files",
        "schema": "CREATE TABLE artist (artist_name TEXT); CREATE TABLE files (f_id NUMBER); CREATE TABLE song (f_id NUMBER, rating NUMBER, genre_is TEXT, artist_name TEXT, song_name TEXT, languages TEXT);"
      },
      {
        "question": "Who sings the song with a length of 5minutes and 23 seconds?",
        "query": "SELECT artist_name FROM files WHERE duration = \"5:23\"",
        "schema": "CREATE TABLE files (duration TEXT, f_id NUMBER, artist_name TEXT); CREATE TABLE artist (artist_name TEXT); CREATE TABLE song (languages TEXT, rating NUMBER, artist_name TEXT, f_id NUMBER, genre_is TEXT, song_name TEXT);"
      },
      {
        "question": "what's the id of that song?",
        "query": "SELECT f_id FROM files WHERE duration = \"5:23\"",
        "schema": "CREATE TABLE song (rating NUMBER, artist_name TEXT, song_name TEXT, languages TEXT, f_id NUMBER, genre_is TEXT); CREATE TABLE artist (artist_name TEXT); CREATE TABLE files (duration TEXT, artist_name TEXT, f_id NUMBER);"
      }
    ],
    [
      {
        "question": "What are the names of the top 3 artists with the largest number of songs?",
        "query": "SELECT t1.artist_name FROM artist AS t1 JOIN song AS t2 ON t1.artist_name = t2.artist_name GROUP BY t2.artist_name ORDER BY COUNT ( * ) DESC LIMIT 3",
        "schema": "CREATE TABLE artist (artist_name TEXT); CREATE TABLE files (artist_name TEXT, f_id NUMBER); CREATE TABLE song (song_name TEXT, rating NUMBER, f_id NUMBER, artist_name TEXT);"
      },
      {
        "question": "What about the top 3 artists with the largest number of songs whose language is Bangla?",
        "query": "SELECT t1.artist_name FROM artist AS t1 JOIN song AS t2 ON t1.artist_name = t2.artist_name WHERE t2.languages = \"bangla\" GROUP BY t2.artist_name ORDER BY COUNT ( * ) DESC LIMIT 3",
        "schema": "CREATE TABLE artist (country TEXT, artist_name TEXT); CREATE TABLE song (song_name TEXT, rating NUMBER, f_id NUMBER, languages TEXT, artist_name TEXT); CREATE TABLE files (f_id NUMBER, artist_name TEXT);"
      },
      {
        "question": "What are their preferred genres?",
        "query": "SELECT t1.preferred_genre FROM artist AS t1 JOIN song AS t2 ON t1.artist_name = t2.artist_name WHERE t2.languages = \"bangla\" GROUP BY t2.artist_name ORDER BY COUNT ( * ) DESC LIMIT 3",
        "schema": "CREATE TABLE song (genre_is TEXT, artist_name TEXT, rating NUMBER, f_id NUMBER, song_name TEXT, languages TEXT); CREATE TABLE artist (preferred_genre TEXT, artist_name TEXT, country TEXT); CREATE TABLE genre (g_name TEXT); CREATE TABLE files (artist_name TEXT, f_id NUMBER);"
      },
      {
        "question": "Could you list the names of all artists that prefer the genre folk and speak the language Bangla?",
        "query": "SELECT t1.artist_name FROM artist AS t1 JOIN song AS t2 ON t1.artist_name = t2.artist_name WHERE t2.languages = \"bangla\" AND t1.preferred_genre = \"folk\"",
        "schema": "CREATE TABLE files (artist_name TEXT, f_id NUMBER); CREATE TABLE song (f_id NUMBER, song_name TEXT, rating NUMBER, languages TEXT, artist_name TEXT, genre_is TEXT); CREATE TABLE artist (preferred_genre TEXT, country TEXT, artist_name TEXT); CREATE TABLE genre (g_name TEXT);"
      },
      {
        "question": "How about the names of all artists that prefer the genre folk?",
        "query": "SELECT artist_name FROM artist WHERE preferred_genre = \"folk\"",
        "schema": "CREATE TABLE artist (preferred_genre TEXT, country TEXT, artist_name TEXT); CREATE TABLE song (genre_is TEXT, languages TEXT, f_id NUMBER, rating NUMBER, song_name TEXT, artist_name TEXT); CREATE TABLE files (artist_name TEXT, f_id NUMBER); CREATE TABLE genre (g_name TEXT);"
      },
      {
        "question": "How about the names of all artists that prefer the genre tagore?",
        "query": "SELECT artist_name FROM artist WHERE preferred_genre = \"tagore\"",
        "schema": "CREATE TABLE files (f_id NUMBER, artist_name TEXT); CREATE TABLE artist (preferred_genre TEXT, country TEXT, artist_name TEXT); CREATE TABLE genre (g_name TEXT); CREATE TABLE song (f_id NUMBER, song_name TEXT, artist_name TEXT, genre_is TEXT, rating NUMBER, languages TEXT);"
      }
    ],
    [
      {
        "question": "What is the name of the newest song?",
        "query": "SELECT song_name FROM song ORDER BY releasedate DESC LIMIT 1",
        "schema": "CREATE TABLE song (f_id NUMBER, song_name TEXT, releasedate TIME); CREATE TABLE files (f_id NUMBER);"
      },
      {
        "question": "And the oldest song?",
        "query": "SELECT song_name FROM song ORDER BY releasedate LIMIT 1",
        "schema": "CREATE TABLE song (releasedate TIME, song_name TEXT, f_id NUMBER); CREATE TABLE files (f_id NUMBER, duration TEXT);"
      },
      {
        "question": "What are the names of the artists that released the oldest song on the list?",
        "query": "SELECT artist_name FROM song ORDER BY releasedate LIMIT 1",
        "schema": "CREATE TABLE song (song_name TEXT, f_id NUMBER, artist_name TEXT, releasedate TIME); CREATE TABLE artist (artist_name TEXT); CREATE TABLE files (f_id NUMBER, artist_name TEXT, duration TEXT);"
      }
    ],
    [
      {
        "question": "Find the distinct names of all songs that have a higher resolution than some songs in English.",
        "query": "SELECT DISTINCT song_name FROM song WHERE resolution > ( SELECT MIN ( resolution ) FROM song WHERE languages = \"english\" )",
        "schema": "CREATE TABLE song (song_name TEXT, f_id NUMBER, resolution NUMBER, languages TEXT); CREATE TABLE files (f_id NUMBER);"
      },
      {
        "question": "what is the total number of songs?",
        "query": "SELECT COUNT ( * ) FROM song",
        "schema": "CREATE TABLE song (languages TEXT, f_id NUMBER, song_name TEXT, resolution NUMBER); CREATE TABLE files (f_id NUMBER);"
      }
    ],
    [
      {
        "question": "Which artist made the most songs? | did you want to return his/her name? | Yes",
        "query": "SELECT artist_name FROM song GROUP BY artist_name ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE artist (artist_name TEXT); CREATE TABLE files (f_id NUMBER, artist_name TEXT); CREATE TABLE song (f_id NUMBER, artist_name TEXT, song_name TEXT);"
      },
      {
        "question": "What about the name of artist with least number of songs?",
        "query": "SELECT artist_name FROM song GROUP BY artist_name ORDER BY COUNT ( * ) LIMIT 1",
        "schema": "CREATE TABLE artist (artist_name TEXT); CREATE TABLE song (artist_name TEXT, f_id NUMBER, song_name TEXT); CREATE TABLE files (f_id NUMBER, artist_name TEXT);"
      },
      {
        "question": "Ok, then what is the country of origin of Enrique?",
        "query": "SELECT country FROM artist WHERE artist_name = 'Enrique'",
        "schema": "CREATE TABLE song (artist_name TEXT, song_name TEXT, country TEXT, languages TEXT, f_id NUMBER); CREATE TABLE files (artist_name TEXT, f_id NUMBER); CREATE TABLE artist (artist_name TEXT, country TEXT);"
      }
    ],
    [
      {
        "question": "What's the rating of all songs in English?",
        "query": "SELECT rating FROM song WHERE languages = 'english'",
        "schema": "CREATE TABLE genre (g_name TEXT, rating TEXT); CREATE TABLE song (rating NUMBER, f_id NUMBER, song_name TEXT, languages TEXT); CREATE TABLE files (f_id NUMBER);"
      },
      {
        "question": "What are the names of all the songs?",
        "query": "SELECT song_name FROM song",
        "schema": "CREATE TABLE genre (g_name TEXT, rating TEXT); CREATE TABLE files (f_id NUMBER); CREATE TABLE song (rating NUMBER, languages TEXT, f_id NUMBER, song_name TEXT);"
      },
      {
        "question": "Which of those have rating below that of all songs in English?",
        "query": "SELECT song_name FROM song WHERE rating < ( SELECT MIN ( rating ) FROM song WHERE languages = 'english' )",
        "schema": "CREATE TABLE song (song_name TEXT, rating NUMBER, languages TEXT, f_id NUMBER); CREATE TABLE files (f_id NUMBER); CREATE TABLE genre (rating TEXT, g_name TEXT);"
      }
    ],
    [
      {
        "question": "Can you show the artist name of song Tumi robe nirobe?",
        "query": "SELECT artist_name FROM song WHERE song_name = \"Tumi robe nirobe\"",
        "schema": "CREATE TABLE files (artist_name TEXT, f_id NUMBER); CREATE TABLE song (country TEXT, artist_name TEXT, languages TEXT, song_name TEXT, f_id NUMBER); CREATE TABLE artist (artist_name TEXT);"
      },
      {
        "question": "Can you show the rating of the song Tumi robe nirobe?",
        "query": "SELECT rating FROM song WHERE song_name = \"Tumi robe nirobe\"",
        "schema": "CREATE TABLE song (languages TEXT, rating NUMBER, artist_name TEXT, f_id NUMBER, song_name TEXT, country TEXT); CREATE TABLE files (artist_name TEXT, f_id NUMBER); CREATE TABLE artist (artist_name TEXT);"
      },
      {
        "question": "What is the genre of the song Tumi robe nirobe?",
        "query": "SELECT genre_is FROM song WHERE song_name = \"Tumi robe nirobe\"",
        "schema": "CREATE TABLE files (artist_name TEXT, f_id NUMBER); CREATE TABLE artist (artist_name TEXT, preferred_genre TEXT); CREATE TABLE genre (rating TEXT, g_name TEXT); CREATE TABLE song (artist_name TEXT, languages TEXT, genre_is TEXT, rating NUMBER, f_id NUMBER, country TEXT, song_name TEXT);"
      },
      {
        "question": "Can you show the names of songs whose genre is modern or language is English?",
        "query": "SELECT song_name FROM song WHERE genre_is = \"modern\" OR languages = \"english\"",
        "schema": "CREATE TABLE song (genre_is TEXT, country TEXT, rating NUMBER, f_id NUMBER, song_name TEXT, languages TEXT, artist_name TEXT); CREATE TABLE files (f_id NUMBER, artist_name TEXT); CREATE TABLE genre (g_name TEXT, rating TEXT); CREATE TABLE artist (preferred_genre TEXT, artist_name TEXT);"
      }
    ],
    [
      {
        "question": "Hello!  Can you provide me with the song name for the song with the lowest resolution?",
        "query": "SELECT t2.song_name FROM artist AS t1 JOIN song AS t2 ON t1.artist_name = t2.artist_name ORDER BY t2.resolution LIMIT 1",
        "schema": "CREATE TABLE artist (artist_name TEXT); CREATE TABLE song (artist_name TEXT, f_id NUMBER, rating NUMBER, resolution NUMBER, song_name TEXT); CREATE TABLE files (f_id NUMBER);"
      },
      {
        "question": "Thanks!  What is the name of the artist who produced the song with the lowest resolution?",
        "query": "SELECT t1.artist_name FROM artist AS t1 JOIN song AS t2 ON t1.artist_name = t2.artist_name ORDER BY t2.resolution LIMIT 1",
        "schema": "CREATE TABLE artist (artist_name TEXT); CREATE TABLE song (f_id NUMBER, song_name TEXT, resolution NUMBER, rating NUMBER, artist_name TEXT); CREATE TABLE files (f_id NUMBER, artist_name TEXT);"
      },
      {
        "question": "Thank you very much!  Can you please tell me what the gender of the artist is?",
        "query": "SELECT t1.gender FROM artist AS t1 JOIN song AS t2 ON t1.artist_name = t2.artist_name ORDER BY t2.resolution LIMIT 1",
        "schema": "CREATE TABLE song (artist_name TEXT, rating NUMBER, f_id NUMBER, resolution NUMBER, song_name TEXT); CREATE TABLE files (artist_name TEXT, f_id NUMBER); CREATE TABLE artist (artist_name TEXT, gender TEXT);"
      }
    ],
    [
      {
        "question": "How many songs have a resolution below 800?",
        "query": "SELECT COUNT ( t2.song_name ) FROM files AS t1 JOIN song AS t2 ON t1.f_id = t2.f_id WHERE t2.resolution < 800",
        "schema": "CREATE TABLE files (duration TEXT, f_id NUMBER); CREATE TABLE song (song_name TEXT, f_id NUMBER, resolution NUMBER, rating NUMBER);"
      },
      {
        "question": "What are the file sizes of those songs?",
        "query": "SELECT t1.file_size FROM files AS t1 JOIN song AS t2 ON t1.f_id = t2.f_id WHERE t2.resolution < 800",
        "schema": "CREATE TABLE song (resolution NUMBER, rating NUMBER, f_id NUMBER, song_name TEXT); CREATE TABLE files (f_id NUMBER, file_size TEXT, duration TEXT);"
      },
      {
        "question": "What are the formats for the songs with a resolution below 800?",
        "query": "SELECT t1.formats FROM files AS t1 JOIN song AS t2 ON t1.f_id = t2.f_id WHERE t2.resolution < 800",
        "schema": "CREATE TABLE files (file_size TEXT, duration TEXT, f_id NUMBER, formats TEXT); CREATE TABLE song (resolution NUMBER, f_id NUMBER, song_name TEXT, rating NUMBER);"
      }
    ],
    [
      {
        "question": "hi. how many countries of origin are represented by the artists?",
        "query": "SELECT COUNT ( country ) FROM artist",
        "schema": "CREATE TABLE files (artist_name TEXT); CREATE TABLE artist (country TEXT, artist_name TEXT); CREATE TABLE song (languages TEXT, artist_name TEXT, country TEXT);"
      },
      {
        "question": "and which artist has made the least number of songs?",
        "query": "SELECT artist_name FROM song GROUP BY artist_name ORDER BY COUNT ( * ) LIMIT 1",
        "schema": "CREATE TABLE files (artist_name TEXT); CREATE TABLE artist (country TEXT, artist_name TEXT); CREATE TABLE song (country TEXT, languages TEXT, f_id NUMBER, song_name TEXT, artist_name TEXT);"
      },
      {
        "question": "OK.  and what is that artist's country of origin? | Do you mean the country of the artist named Enrique? | yes",
        "query": "SELECT country FROM artist WHERE artist_name = 'Enrique'",
        "schema": "CREATE TABLE song (country TEXT, languages TEXT, song_name TEXT, f_id NUMBER, artist_name TEXT); CREATE TABLE files (artist_name TEXT); CREATE TABLE artist (artist_name TEXT, country TEXT);"
      }
    ],
    [
      {
        "question": "Hello there!  How are you doing tonight!?  Can you provide me with a list of all of the artist names in this database?",
        "query": "SELECT artist_name FROM artist",
        "schema": "CREATE TABLE song (artist_name TEXT, f_id NUMBER); CREATE TABLE artist (artist_name TEXT); CREATE TABLE files (f_id NUMBER, artist_name TEXT);"
      },
      {
        "question": "Thank you very much!  Can you filter that list to show only the artist_names who have song for which the country code is the UK?",
        "query": "SELECT artist_name FROM artist WHERE country = \"UK\" INTERSECT SELECT t1.artist_name FROM artist AS t1 JOIN song AS t2 ON t1.artist_name = t2.artist_name",
        "schema": "CREATE TABLE files (artist_name TEXT, f_id NUMBER); CREATE TABLE artist (artist_name TEXT, country TEXT); CREATE TABLE song (artist_name TEXT, song_name TEXT, languages TEXT, f_id NUMBER, country TEXT);"
      }
    ],
    [
      {
        "question": "What are the names of all the songs that have a lower rating than some song of the blues genre?",
        "query": "SELECT song_name FROM song WHERE rating < ( SELECT MAX ( rating ) FROM song WHERE genre_is = \"blues\" )",
        "schema": "CREATE TABLE files (f_id NUMBER); CREATE TABLE genre (rating TEXT, g_name TEXT); CREATE TABLE song (f_id NUMBER, rating NUMBER, genre_is TEXT, song_name TEXT);"
      },
      {
        "question": "What are the names of all the songs that have a higher rating than some song of the blues genre?",
        "query": "SELECT song_name FROM song WHERE rating > ( SELECT MAX ( rating ) FROM song WHERE genre_is = \"blues\" )",
        "schema": "CREATE TABLE files (f_id NUMBER); CREATE TABLE genre (g_name TEXT, rating TEXT); CREATE TABLE song (song_name TEXT, genre_is TEXT, rating NUMBER, f_id NUMBER);"
      },
      {
        "question": "What are the names and ratings of all songs of the blues genre?",
        "query": "SELECT song_name,rating FROM song WHERE genre_is = \"blues\"",
        "schema": "CREATE TABLE song (genre_is TEXT, f_id NUMBER, rating NUMBER, song_name TEXT); CREATE TABLE files (f_id NUMBER); CREATE TABLE genre (g_name TEXT, rating TEXT);"
      }
    ],
    [
      {
        "question": "What are the resolutions of all songs with a rating lower than 8?",
        "query": "SELECT resolution FROM song WHERE rating < 8",
        "schema": "CREATE TABLE files (f_id NUMBER); CREATE TABLE song (f_id NUMBER, resolution NUMBER, rating NUMBER, song_name TEXT);"
      },
      {
        "question": "What are the IDs and resolutions of all the songs with resolutions higher than those?",
        "query": "SELECT f_id,resolution FROM song WHERE resolution > ( SELECT MAX ( resolution ) FROM song WHERE rating < 8 )",
        "schema": "CREATE TABLE files (f_id NUMBER); CREATE TABLE song (rating NUMBER, resolution NUMBER, f_id NUMBER, song_name TEXT);"
      },
      {
        "question": "What are the IDs and resolutions of all the songs with resolutions higher than or equal to 1080?",
        "query": "SELECT f_id,resolution FROM song WHERE resolution > = 1080",
        "schema": "CREATE TABLE files (f_id NUMBER); CREATE TABLE song (rating NUMBER, f_id NUMBER, resolution NUMBER, song_name TEXT);"
      },
      {
        "question": "What are the song names and ratings of those songs?",
        "query": "SELECT song_name,rating FROM song WHERE resolution > = 1080",
        "schema": "CREATE TABLE files (f_id NUMBER); CREATE TABLE song (f_id NUMBER, resolution NUMBER, rating NUMBER, song_name TEXT);"
      }
    ],
    [
      {
        "question": "what are the shortest duration and lowest rating of songs grouped by genre and ordered by genre?",
        "query": "SELECT MIN ( t1.duration ) , MIN ( t2.rating ) , t2.genre_is FROM files AS t1 JOIN song AS t2 ON t1.f_id = t2.f_id GROUP BY t2.genre_is ORDER BY t2.genre_is",
        "schema": "CREATE TABLE files (f_id NUMBER, duration TEXT); CREATE TABLE song (rating NUMBER, genre_is TEXT, f_id NUMBER, song_name TEXT); CREATE TABLE genre (g_name TEXT, rating TEXT);"
      },
      {
        "question": "WHICH ARTISTS SUNG THE SONGS?",
        "query": "SELECT artist_name FROM song",
        "schema": "CREATE TABLE song (song_name TEXT, f_id NUMBER, rating NUMBER, genre_is TEXT, artist_name TEXT); CREATE TABLE files (f_id NUMBER, artist_name TEXT, duration TEXT); CREATE TABLE genre (g_name TEXT, rating TEXT); CREATE TABLE artist (preferred_genre TEXT, artist_name TEXT);"
      },
      {
        "question": "how many songs has Enrique produced?",
        "query": "SELECT COUNT ( * ) FROM song WHERE artist_name = \"Enrique\"",
        "schema": "CREATE TABLE song (f_id NUMBER, song_name TEXT, rating NUMBER, country TEXT, artist_name TEXT, genre_is TEXT); CREATE TABLE artist (preferred_genre TEXT, artist_name TEXT); CREATE TABLE files (duration TEXT, artist_name TEXT, f_id NUMBER); CREATE TABLE genre (rating TEXT, g_name TEXT);"
      }
    ],
    [
      {
        "question": "How many artists have recorded at least one song in English?",
        "query": "SELECT COUNT ( * ) FROM ( SELECT * FROM artist AS t1 JOIN song AS t2 ON t1.artist_name = t2.artist_name WHERE t2.languages = \"english\" GROUP BY t2.artist_name HAVING COUNT ( * ) > = 1 )",
        "schema": "CREATE TABLE song (song_name TEXT, artist_name TEXT, f_id NUMBER, country TEXT, languages TEXT); CREATE TABLE files (artist_name TEXT, f_id NUMBER); CREATE TABLE artist (artist_name TEXT, country TEXT);"
      },
      {
        "question": "What are the names of the artists?",
        "query": "SELECT t1.artist_name FROM artist AS t1 JOIN song AS t2 ON t1.artist_name = t2.artist_name WHERE t2.languages = \"english\" GROUP BY t2.artist_name HAVING COUNT ( * ) > = 1",
        "schema": "CREATE TABLE artist (artist_name TEXT, country TEXT); CREATE TABLE files (artist_name TEXT, f_id NUMBER); CREATE TABLE song (artist_name TEXT, f_id NUMBER, song_name TEXT, languages TEXT, country TEXT);"
      },
      {
        "question": "How many songs has Enrique recorded?",
        "query": "SELECT COUNT ( * ) FROM artist AS t1 JOIN song AS t2 ON t1.artist_name = t2.artist_name WHERE t1.artist_name = \"Enrique\"",
        "schema": "CREATE TABLE artist (country TEXT, artist_name TEXT); CREATE TABLE song (song_name TEXT, f_id NUMBER, artist_name TEXT, country TEXT, languages TEXT); CREATE TABLE files (f_id NUMBER, artist_name TEXT);"
      },
      {
        "question": "What about the other artist?",
        "query": "SELECT COUNT ( * ) FROM artist AS t1 JOIN song AS t2 ON t1.artist_name = t2.artist_name WHERE t1.artist_name = ( SELECT t1.artist_name FROM artist AS t1 JOIN song AS t2 ON t1.artist_name = t2.artist_name WHERE t2.languages = \"english\" AND t1.artist_name ! = \"Enrique\" GROUP BY t2.artist_name HAVING COUNT ( * ) > = 1 )",
        "schema": "CREATE TABLE artist (country TEXT, artist_name TEXT); CREATE TABLE files (artist_name TEXT, f_id NUMBER); CREATE TABLE song (languages TEXT, f_id NUMBER, song_name TEXT, artist_name TEXT, country TEXT);"
      }
    ],
    [
      {
        "question": "how many artist are there in total?",
        "query": "SELECT COUNT ( * ) FROM artist",
        "schema": "CREATE TABLE artist (preferred_genre TEXT, gender TEXT, country TEXT, artist_name TEXT); CREATE TABLE files (f_id NUMBER, artist_name TEXT); CREATE TABLE song (artist_name TEXT, f_id NUMBER);"
      },
      {
        "question": "How about the total number of songs?",
        "query": "SELECT COUNT ( * ) FROM song",
        "schema": "CREATE TABLE files (artist_name TEXT, f_id NUMBER); CREATE TABLE artist (gender TEXT, preferred_genre TEXT, artist_name TEXT, country TEXT); CREATE TABLE song (song_name TEXT, artist_name TEXT, f_id NUMBER, rating NUMBER, genre_is TEXT);"
      },
      {
        "question": "Can you list the songs' names?",
        "query": "SELECT song_name FROM song",
        "schema": "CREATE TABLE files (f_id NUMBER, artist_name TEXT); CREATE TABLE song (genre_is TEXT, song_name TEXT, f_id NUMBER, rating NUMBER, artist_name TEXT); CREATE TABLE artist (preferred_genre TEXT, country TEXT, artist_name TEXT, gender TEXT);"
      },
      {
        "question": "Who was the singer for the song My love?",
        "query": "SELECT artist_name FROM song WHERE song_name = \"My love\"",
        "schema": "CREATE TABLE song (rating NUMBER, f_id NUMBER, artist_name TEXT, genre_is TEXT, song_name TEXT); CREATE TABLE files (artist_name TEXT, f_id NUMBER); CREATE TABLE artist (preferred_genre TEXT, gender TEXT, country TEXT, artist_name TEXT);"
      },
      {
        "question": "Where was the singer from? | Do you mean Enrique? | Yes",
        "query": "SELECT country FROM song WHERE artist_name = \"Enrique\"",
        "schema": "CREATE TABLE artist (country TEXT, gender TEXT, preferred_genre TEXT, artist_name TEXT); CREATE TABLE song (genre_is TEXT, country TEXT, f_id NUMBER, song_name TEXT, rating NUMBER, languages TEXT, artist_name TEXT); CREATE TABLE files (artist_name TEXT, f_id NUMBER);"
      }
    ],
    [
      {
        "question": "Which are the male artists?",
        "query": "SELECT * FROM artist WHERE gender = \"Male\"",
        "schema": "CREATE TABLE files (artist_name TEXT); CREATE TABLE song (artist_name TEXT); CREATE TABLE artist (artist_name TEXT, gender TEXT);"
      },
      {
        "question": "And which of them are from the UK?",
        "query": "SELECT artist_name FROM artist WHERE country = \"UK\" AND gender = \"Male\"",
        "schema": "CREATE TABLE artist (gender TEXT, country TEXT, artist_name TEXT); CREATE TABLE song (country TEXT, artist_name TEXT); CREATE TABLE files (artist_name TEXT);"
      },
      {
        "question": "Okay, and what genre does Michel prefer?",
        "query": "SELECT preferred_genre FROM artist WHERE artist_name = \"Michel\"",
        "schema": "CREATE TABLE files (artist_name TEXT); CREATE TABLE genre (rating TEXT, g_name TEXT); CREATE TABLE artist (country TEXT, artist_name TEXT, gender TEXT, preferred_genre TEXT); CREATE TABLE song (artist_name TEXT, genre_is TEXT, country TEXT);"
      },
      {
        "question": "Alright, and how many male artists who prefer pop are there in the entire world, according to the table?",
        "query": "SELECT COUNT ( * ) FROM artist WHERE preferred_genre = \"pop\" AND gender = \"Male\"",
        "schema": "CREATE TABLE song (artist_name TEXT, genre_is TEXT, country TEXT); CREATE TABLE files (artist_name TEXT); CREATE TABLE artist (gender TEXT, country TEXT, artist_name TEXT, preferred_genre TEXT); CREATE TABLE genre (g_name TEXT, rating TEXT);"
      },
      {
        "question": "How many female artists prefer pop?",
        "query": "SELECT COUNT ( * ) FROM artist WHERE preferred_genre = \"pop\" AND gender = \"Female\"",
        "schema": "CREATE TABLE files (artist_name TEXT); CREATE TABLE song (country TEXT, genre_is TEXT, artist_name TEXT); CREATE TABLE artist (artist_name TEXT, country TEXT, preferred_genre TEXT, gender TEXT); CREATE TABLE genre (rating TEXT, g_name TEXT);"
      },
      {
        "question": "Finally, what is the most preferred genre in the entire world?",
        "query": "SELECT preferred_genre FROM artist GROUP BY preferred_genre ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE genre (rating TEXT, g_name TEXT); CREATE TABLE song (country TEXT, artist_name TEXT, genre_is TEXT); CREATE TABLE files (artist_name TEXT); CREATE TABLE artist (country TEXT, artist_name TEXT, gender TEXT, preferred_genre TEXT);"
      }
    ],
    [
      {
        "question": "What language is used most often in songs?",
        "query": "SELECT languages FROM song GROUP BY languages ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE song (f_id NUMBER, song_name TEXT, languages TEXT); CREATE TABLE files (formats TEXT, f_id NUMBER);"
      },
      {
        "question": "And what is the range of resolution in songs?",
        "query": "SELECT MIN ( resolution ) , MAX ( resolution ) FROM song",
        "schema": "CREATE TABLE files (formats TEXT, f_id NUMBER); CREATE TABLE song (resolution NUMBER, languages TEXT, song_name TEXT, f_id NUMBER);"
      },
      {
        "question": "What is the range of ratings for those songs?",
        "query": "SELECT MIN ( rating ) , MAX ( rating ) FROM song",
        "schema": "CREATE TABLE files (formats TEXT, f_id NUMBER); CREATE TABLE song (rating NUMBER, f_id NUMBER, resolution NUMBER, song_name TEXT, languages TEXT);"
      },
      {
        "question": "What is the language most often used in songs with resolution below 500?",
        "query": "SELECT languages FROM song WHERE resolution < 500 GROUP BY languages ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE files (f_id NUMBER, formats TEXT); CREATE TABLE song (rating NUMBER, song_name TEXT, resolution NUMBER, languages TEXT, f_id NUMBER);"
      },
      {
        "question": "And what language is most often used in songs with resolution above 500?",
        "query": "SELECT languages FROM song WHERE resolution > 500 GROUP BY languages ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE song (rating NUMBER, resolution NUMBER, f_id NUMBER, song_name TEXT, languages TEXT); CREATE TABLE files (f_id NUMBER, formats TEXT);"
      }
    ],
    [
      {
        "question": "Which songs are in mp3 format?",
        "query": "SELECT t2.song_name FROM files AS t1 JOIN song AS t2 ON t1.f_id = t2.f_id WHERE t1.formats = \"mp3\"",
        "schema": "CREATE TABLE files (formats TEXT, f_id NUMBER); CREATE TABLE song (f_id NUMBER, languages TEXT, genre_is TEXT, song_name TEXT);"
      },
      {
        "question": "Of the which have resolution below 1000?",
        "query": "SELECT t2.song_name FROM files AS t1 JOIN song AS t2 ON t1.f_id = t2.f_id WHERE t1.formats = \"mp3\" INTERSECT SELECT song_name FROM song WHERE resolution < 1000",
        "schema": "CREATE TABLE song (song_name TEXT, languages TEXT, f_id NUMBER, resolution NUMBER, genre_is TEXT); CREATE TABLE files (f_id NUMBER, formats TEXT);"
      },
      {
        "question": "What is their actual resolution?",
        "query": "SELECT song_name, resolution FROM song WHERE song_name IN ( SELECT t2.song_name FROM files AS t1 JOIN song AS t2 ON t1.f_id = t2.f_id WHERE t1.formats = \"mp3\" INTERSECT SELECT song_name FROM song WHERE resolution < 1000 )",
        "schema": "CREATE TABLE files (formats TEXT, f_id NUMBER); CREATE TABLE song (languages TEXT, song_name TEXT, genre_is TEXT, f_id NUMBER, resolution NUMBER);"
      }
    ],
    [
      {
        "question": "How many file formats are supported?",
        "query": "SELECT COUNT ( DISTINCT formats ) FROM files",
        "schema": "CREATE TABLE files (formats TEXT, f_id NUMBER); CREATE TABLE song (f_id NUMBER);"
      },
      {
        "question": "How many songs are available in each format?",
        "query": "SELECT formats, COUNT ( * ) FROM files GROUP BY formats",
        "schema": "CREATE TABLE files (formats TEXT, f_id NUMBER); CREATE TABLE song (song_name TEXT, f_id NUMBER);"
      },
      {
        "question": "Is MP4 the most popular format?",
        "query": "SELECT formats FROM files GROUP BY formats ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE song (f_id NUMBER, song_name TEXT); CREATE TABLE genre (most_popular_in TEXT); CREATE TABLE files (f_id NUMBER, formats TEXT);"
      }
    ],
    [
      {
        "question": "what is the artist name of india",
        "query": "SELECT artist_name FROM song WHERE country = 'India'",
        "schema": "CREATE TABLE song (song_name TEXT, artist_name TEXT, languages TEXT, country TEXT); CREATE TABLE files (f_id NUMBER, artist_name TEXT); CREATE TABLE artist (country TEXT, artist_name TEXT);"
      },
      {
        "question": "what is the f id of bangala",
        "query": "SELECT f_id FROM song WHERE languages = 'bangla'",
        "schema": "CREATE TABLE song (genre_is TEXT, country TEXT, languages TEXT, song_name TEXT, artist_name TEXT, f_id NUMBER); CREATE TABLE artist (country TEXT, artist_name TEXT); CREATE TABLE genre (g_name TEXT); CREATE TABLE files (f_id NUMBER, artist_name TEXT);"
      },
      {
        "question": "what is the rating of resolution 512",
        "query": "SELECT rating FROM song WHERE resolution = 512",
        "schema": "CREATE TABLE genre (g_name TEXT); CREATE TABLE artist (country TEXT, artist_name TEXT); CREATE TABLE song (resolution NUMBER, rating NUMBER, f_id NUMBER, song_name TEXT, artist_name TEXT, country TEXT, genre_is TEXT, languages TEXT); CREATE TABLE files (artist_name TEXT, f_id NUMBER);"
      },
      {
        "question": "what is the song name of tagore",
        "query": "SELECT song_name FROM song WHERE genre_is = 'tagore'",
        "schema": "CREATE TABLE song (country TEXT, artist_name TEXT, genre_is TEXT, languages TEXT, f_id NUMBER, resolution NUMBER, rating NUMBER, song_name TEXT); CREATE TABLE genre (g_name TEXT, rating TEXT); CREATE TABLE artist (artist_name TEXT, country TEXT); CREATE TABLE files (f_id NUMBER, artist_name TEXT);"
      },
      {
        "question": "what is the song name of bangladesh",
        "query": "SELECT song_name FROM song WHERE country = 'Bangladesh'",
        "schema": "CREATE TABLE song (resolution NUMBER, languages TEXT, f_id NUMBER, song_name TEXT, rating NUMBER, artist_name TEXT, country TEXT, genre_is TEXT); CREATE TABLE artist (country TEXT, artist_name TEXT); CREATE TABLE files (f_id NUMBER, artist_name TEXT); CREATE TABLE genre (rating TEXT, g_name TEXT);"
      }
    ],
    [
      {
        "question": "Find the distinct names of all the songs that have a higher resolution than some songs in English, please?",
        "query": "SELECT DISTINCT song_name FROM song WHERE resolution > ( SELECT MIN ( resolution ) FROM song WHERE languages = \"english\" )",
        "schema": "CREATE TABLE song (f_id NUMBER, resolution NUMBER, languages TEXT, song_name TEXT); CREATE TABLE files (f_id NUMBER);"
      },
      {
        "question": "What countries are those songs from?",
        "query": "SELECT country FROM song WHERE resolution > ( SELECT MIN ( resolution ) FROM song WHERE languages = \"english\" )",
        "schema": "CREATE TABLE song (languages TEXT, song_name TEXT, country TEXT, resolution NUMBER, f_id NUMBER); CREATE TABLE files (f_id NUMBER); CREATE TABLE artist (country TEXT);"
      },
      {
        "question": "Can you add the songs' names and resolutions to the table?",
        "query": "SELECT country,song_name, resolution FROM song WHERE resolution > ( SELECT MIN ( resolution ) FROM song WHERE languages = \"english\" )",
        "schema": "CREATE TABLE song (languages TEXT, song_name TEXT, country TEXT, resolution NUMBER, f_id NUMBER); CREATE TABLE artist (country TEXT); CREATE TABLE files (f_id NUMBER);"
      },
      {
        "question": "What are the names of the top 3 rated songs?",
        "query": "SELECT song_name FROM song ORDER BY rating DESC LIMIT 3",
        "schema": "CREATE TABLE song (resolution NUMBER, rating NUMBER, song_name TEXT, languages TEXT, f_id NUMBER, country TEXT); CREATE TABLE files (f_id NUMBER); CREATE TABLE artist (country TEXT);"
      },
      {
        "question": "Could you add the artists' names to the table?",
        "query": "SELECT song_name,artist_name FROM song ORDER BY rating DESC LIMIT 3",
        "schema": "CREATE TABLE song (resolution NUMBER, artist_name TEXT, rating NUMBER, languages TEXT, f_id NUMBER, country TEXT, song_name TEXT); CREATE TABLE artist (country TEXT, artist_name TEXT); CREATE TABLE files (artist_name TEXT, f_id NUMBER);"
      }
    ],
    [
      {
        "question": "What are the maximum duration and resolution of songs grouped and ordered by languages?",
        "query": "SELECT MAX ( t1.duration ) , MAX ( t2.resolution ) , t2.languages FROM files AS t1 JOIN song AS t2 ON t1.f_id = t2.f_id GROUP BY t2.languages ORDER BY t2.languages",
        "schema": "CREATE TABLE files (duration TEXT, f_id NUMBER); CREATE TABLE song (song_name TEXT, f_id NUMBER, resolution NUMBER, languages TEXT);"
      },
      {
        "question": "* I have left the chat *",
        "query": "SELECT file_size,formats FROM files AS t1 JOIN song AS t2 ON t1.f_id = t2.f_id GROUP BY t2.languages ORDER BY t2.languages",
        "schema": "CREATE TABLE files (file_size TEXT, f_id NUMBER, formats TEXT, duration TEXT); CREATE TABLE song (f_id NUMBER, song_name TEXT, resolution NUMBER, languages TEXT);"
      },
      {
        "question": "What are the maximum duration and resolution of songs grouped and ordered by country?",
        "query": "SELECT MAX ( t1.duration ) , MAX ( t2.resolution ) FROM files AS t1 JOIN song AS t2 ON t1.f_id = t2.f_id GROUP BY t2.country ORDER BY t2.country",
        "schema": "CREATE TABLE song (languages TEXT, f_id NUMBER, resolution NUMBER, song_name TEXT, country TEXT); CREATE TABLE files (f_id NUMBER, file_size TEXT, formats TEXT, duration TEXT);"
      },
      {
        "question": "What are the the file size and fomats of songs grouped and ordered by country for each file?",
        "query": "SELECT file_size,formats FROM files AS t1 JOIN song AS t2 ON t1.f_id = t2.f_id GROUP BY t2.country ORDER BY t2.country",
        "schema": "CREATE TABLE song (song_name TEXT, country TEXT, resolution NUMBER, f_id NUMBER, languages TEXT); CREATE TABLE files (f_id NUMBER, formats TEXT, file_size TEXT, duration TEXT);"
      }
    ],
    [
      {
        "question": "how many artist_name in the song table",
        "query": "SELECT COUNT ( * ) FROM song",
        "schema": "CREATE TABLE files (artist_name TEXT, f_id NUMBER); CREATE TABLE artist (artist_name TEXT); CREATE TABLE song (song_name TEXT, f_id NUMBER, artist_name TEXT);"
      },
      {
        "question": "ok i want to highest rating in the song table",
        "query": "SELECT rating FROM song ORDER BY rating DESC LIMIT 1",
        "schema": "CREATE TABLE song (rating NUMBER, f_id NUMBER, artist_name TEXT, song_name TEXT); CREATE TABLE artist (artist_name TEXT); CREATE TABLE files (artist_name TEXT, f_id NUMBER);"
      },
      {
        "question": "how many song_name in the song table",
        "query": "SELECT COUNT ( * ) FROM song",
        "schema": "CREATE TABLE song (rating NUMBER, song_name TEXT, f_id NUMBER, artist_name TEXT); CREATE TABLE files (artist_name TEXT, f_id NUMBER); CREATE TABLE artist (artist_name TEXT);"
      },
      {
        "question": "i want to highest resolution in the song table",
        "query": "SELECT resolution FROM song ORDER BY resolution DESC LIMIT 1",
        "schema": "CREATE TABLE song (resolution NUMBER, song_name TEXT, f_id NUMBER, rating NUMBER, artist_name TEXT); CREATE TABLE files (f_id NUMBER, artist_name TEXT); CREATE TABLE artist (artist_name TEXT);"
      }
    ],
    [
      {
        "question": "What is the longest duration?",
        "query": "SELECT duration FROM files ORDER BY duration DESC LIMIT 1",
        "schema": "CREATE TABLE song (f_id NUMBER); CREATE TABLE artist (artist_name TEXT); CREATE TABLE files (f_id NUMBER, duration TEXT);"
      },
      {
        "question": "What is the shortest duration?",
        "query": "SELECT duration FROM files ORDER BY duration LIMIT 1",
        "schema": "CREATE TABLE song (f_id NUMBER); CREATE TABLE artist (artist_name TEXT); CREATE TABLE files (duration TEXT, f_id NUMBER, formats TEXT);"
      },
      {
        "question": "How many songs have a short duration less than 4 minutes?",
        "query": "SELECT COUNT ( * ) FROM files WHERE duration < 4",
        "schema": "CREATE TABLE artist (artist_name TEXT); CREATE TABLE song (song_name TEXT, f_id NUMBER); CREATE TABLE files (f_id NUMBER, formats TEXT, duration TEXT);"
      }
    ],
    [
      {
        "question": "how artist are from India",
        "query": "SELECT COUNT ( * ) FROM artist WHERE country = \"India\"",
        "schema": "CREATE TABLE song (artist_name TEXT, languages TEXT, country TEXT); CREATE TABLE artist (artist_name TEXT, country TEXT); CREATE TABLE files (f_id NUMBER, artist_name TEXT);"
      },
      {
        "question": "how many persons are from folk genre",
        "query": "SELECT COUNT ( * ) FROM artist WHERE preferred_genre = \"folk\"",
        "schema": "CREATE TABLE genre (g_name TEXT); CREATE TABLE artist (preferred_genre TEXT, country TEXT, artist_name TEXT); CREATE TABLE song (genre_is TEXT, artist_name TEXT, country TEXT, languages TEXT); CREATE TABLE files (artist_name TEXT, f_id NUMBER);"
      },
      {
        "question": "how many artists are from Bangladesh",
        "query": "SELECT COUNT ( * ) FROM artist WHERE country = \"Bangladesh\"",
        "schema": "CREATE TABLE genre (g_name TEXT); CREATE TABLE files (artist_name TEXT, f_id NUMBER); CREATE TABLE song (artist_name TEXT, country TEXT, genre_is TEXT, languages TEXT); CREATE TABLE artist (artist_name TEXT, preferred_genre TEXT, country TEXT);"
      }
    ],
    [
      {
        "question": "I need to know the names of artists with at least one English Song",
        "query": "SELECT t1.artist_name FROM artist AS t1 JOIN song AS t2 ON t1.artist_name = t2.artist_name WHERE t2.languages = \"english\" GROUP BY t2.artist_name HAVING COUNT ( * ) > = 1",
        "schema": "CREATE TABLE artist (artist_name TEXT); CREATE TABLE files (f_id NUMBER, artist_name TEXT); CREATE TABLE song (genre_is TEXT, languages TEXT, f_id NUMBER, song_name TEXT, artist_name TEXT);"
      },
      {
        "question": "What is the country of origin of artists with at least one English song",
        "query": "SELECT t1.country FROM artist AS t1 JOIN song AS t2 ON t1.artist_name = t2.artist_name WHERE t2.languages = 'english' GROUP BY t1.artist_name HAVING COUNT ( * ) > = 1",
        "schema": "CREATE TABLE files (f_id NUMBER, artist_name TEXT); CREATE TABLE song (genre_is TEXT, f_id NUMBER, country TEXT, languages TEXT, artist_name TEXT, song_name TEXT); CREATE TABLE artist (artist_name TEXT, country TEXT);"
      },
      {
        "question": "What is the gender of artists with at least one English song?",
        "query": "SELECT t1.gender FROM artist AS t1 JOIN song AS t2 ON t1.artist_name = t2.artist_name WHERE t2.languages = 'english' GROUP BY t1.artist_name HAVING COUNT ( * ) > = 1",
        "schema": "CREATE TABLE song (country TEXT, genre_is TEXT, song_name TEXT, languages TEXT, f_id NUMBER, artist_name TEXT); CREATE TABLE artist (country TEXT, artist_name TEXT, gender TEXT); CREATE TABLE files (artist_name TEXT, f_id NUMBER);"
      },
      {
        "question": "What is the rating of artists with at least one English song?",
        "query": "SELECT t2.rating FROM artist AS t1 JOIN song AS t2 ON t1.artist_name = t2.artist_name WHERE t2.languages = 'english' GROUP BY t1.artist_name HAVING COUNT ( * ) > = 1",
        "schema": "CREATE TABLE files (f_id NUMBER, artist_name TEXT); CREATE TABLE artist (gender TEXT, artist_name TEXT, country TEXT); CREATE TABLE song (rating NUMBER, genre_is TEXT, country TEXT, languages TEXT, song_name TEXT, f_id NUMBER, artist_name TEXT);"
      }
    ],
    [
      {
        "question": "How many artist are there?",
        "query": "SELECT COUNT ( artist_name ) FROM artist",
        "schema": "CREATE TABLE artist (artist_name TEXT); CREATE TABLE song (artist_name TEXT, f_id NUMBER); CREATE TABLE files (artist_name TEXT, f_id NUMBER);"
      },
      {
        "question": "Can you list all songs that were released in March? | Do  you mean  the  songs  name? | Yes",
        "query": "SELECT t2.song_name FROM song AS t2 WHERE t2.releasedate LIKE \"%Mar%\"",
        "schema": "CREATE TABLE song (f_id NUMBER, song_name TEXT, artist_name TEXT, releasedate TIME); CREATE TABLE files (artist_name TEXT, f_id NUMBER); CREATE TABLE artist (artist_name TEXT);"
      },
      {
        "question": "Can you include the artist names and their genders too?",
        "query": "SELECT t1.artist_name , t1.gender,t2.song_name FROM artist AS t1 JOIN song AS t2 ON t1.artist_name = t2.artist_name WHERE t2.releasedate LIKE \"%Mar%\"",
        "schema": "CREATE TABLE files (f_id NUMBER, artist_name TEXT); CREATE TABLE song (releasedate TIME, f_id NUMBER, artist_name TEXT, song_name TEXT); CREATE TABLE artist (gender TEXT, artist_name TEXT);"
      }
    ],
    [
      {
        "question": "What is the lowest duration of songs that have mp3 format and resolution below 800?",
        "query": "SELECT MIN ( t1.duration ) FROM files AS t1 JOIN song AS t2 ON t1.f_id = t2.f_id WHERE t1.formats = \"mp3\" AND t2.resolution < 800",
        "schema": "CREATE TABLE files (duration TEXT, formats TEXT, f_id NUMBER); CREATE TABLE song (song_name TEXT, rating NUMBER, resolution NUMBER, f_id NUMBER);"
      },
      {
        "question": "What is the highest duration of songs that have mp3 format and resolution below 800?",
        "query": "SELECT MAX ( t1.duration ) FROM files AS t1 JOIN song AS t2 ON t1.f_id = t2.f_id WHERE t1.formats = \"mp3\" AND t2.resolution < 800",
        "schema": "CREATE TABLE song (f_id NUMBER, resolution NUMBER, song_name TEXT, rating NUMBER); CREATE TABLE files (f_id NUMBER, duration TEXT, formats TEXT);"
      },
      {
        "question": "What is the average duration of songs that have mp3 format and resolution below 800?",
        "query": "SELECT AVG ( t1.duration ) FROM files AS t1 JOIN song AS t2 ON t1.f_id = t2.f_id WHERE t1.formats = \"mp3\" AND t2.resolution < 800",
        "schema": "CREATE TABLE files (formats TEXT, f_id NUMBER, duration TEXT); CREATE TABLE song (rating NUMBER, f_id NUMBER, resolution NUMBER, song_name TEXT);"
      }
    ],
    [
      {
        "question": "can you how me a list of artists?",
        "query": "SELECT artist_name FROM artist",
        "schema": "CREATE TABLE song (artist_name TEXT, f_id NUMBER); CREATE TABLE artist (artist_name TEXT); CREATE TABLE files (artist_name TEXT, f_id NUMBER);"
      },
      {
        "question": "can you show me their ratings?",
        "query": "SELECT artist_name, rating FROM song",
        "schema": "CREATE TABLE genre (rating TEXT, g_name TEXT); CREATE TABLE files (f_id NUMBER, artist_name TEXT); CREATE TABLE song (f_id NUMBER, rating NUMBER, artist_name TEXT); CREATE TABLE artist (artist_name TEXT);"
      },
      {
        "question": "can you show me song's language?",
        "query": "SELECT song_name, languages FROM song",
        "schema": "CREATE TABLE files (artist_name TEXT, f_id NUMBER); CREATE TABLE genre (rating TEXT, g_name TEXT); CREATE TABLE song (song_name TEXT, rating NUMBER, f_id NUMBER, artist_name TEXT, languages TEXT); CREATE TABLE artist (artist_name TEXT);"
      }
    ],
    [
      {
        "question": "Return the names of songs for which the format is mp3 and resolution is below 1000.",
        "query": "SELECT t2.song_name FROM files AS t1 JOIN song AS t2 ON t1.f_id = t2.f_id WHERE t1.formats = \"mp3\" INTERSECT SELECT song_name FROM song WHERE resolution < 1000",
        "schema": "CREATE TABLE files (formats TEXT, f_id NUMBER); CREATE TABLE song (song_name TEXT, f_id NUMBER, languages TEXT, resolution NUMBER);"
      },
      {
        "question": "Please also show me names of songs for which the format is mp3 and resolution is above 1000. | Do you mean the names of songs for which the format is mp3? | Yes",
        "query": "SELECT t2.song_name FROM files AS t1 JOIN song AS t2 ON t1.f_id = t2.f_id WHERE t1.formats = \"mp3\"",
        "schema": "CREATE TABLE files (f_id NUMBER, formats TEXT); CREATE TABLE song (song_name TEXT, languages TEXT, f_id NUMBER, resolution NUMBER);"
      },
      {
        "question": "What is the resolution for song name \"Just beat it\"?",
        "query": "SELECT resolution FROM song WHERE song_name = \"Just beat it\"",
        "schema": "CREATE TABLE files (formats TEXT, f_id NUMBER); CREATE TABLE song (resolution NUMBER, languages TEXT, f_id NUMBER, song_name TEXT);"
      },
      {
        "question": "Please show me the names of songs for which the format is mp4 and resolution is below 1000.",
        "query": "SELECT t2.song_name FROM files AS t1 JOIN song AS t2 ON t1.f_id = t2.f_id WHERE t1.formats = \"mp4\" INTERSECT SELECT song_name FROM song WHERE resolution < 1000",
        "schema": "CREATE TABLE song (song_name TEXT, f_id NUMBER, languages TEXT, resolution NUMBER); CREATE TABLE files (f_id NUMBER, formats TEXT);"
      },
      {
        "question": "Can you show me the resolution for song name \"Aj ei Akash\"?",
        "query": "SELECT resolution FROM song WHERE song_name = 'Aj ei akash'",
        "schema": "CREATE TABLE files (formats TEXT, duration TEXT, f_id NUMBER); CREATE TABLE song (song_name TEXT, f_id NUMBER, languages TEXT, resolution NUMBER);"
      },
      {
        "question": "Can you please show me the song name with highest resolution?",
        "query": "SELECT song_name FROM song ORDER BY resolution DESC LIMIT 1",
        "schema": "CREATE TABLE song (song_name TEXT, languages TEXT, resolution NUMBER, f_id NUMBER); CREATE TABLE files (formats TEXT, f_id NUMBER, duration TEXT);"
      },
      {
        "question": "And what was the resolution for this song name?",
        "query": "SELECT resolution FROM song WHERE song_name = 'Tumi robe nirobe'",
        "schema": "CREATE TABLE files (formats TEXT, f_id NUMBER, duration TEXT); CREATE TABLE song (languages TEXT, song_name TEXT, resolution NUMBER, f_id NUMBER);"
      }
    ],
    [
      {
        "question": "What is the ID of the longest song, please?",
        "query": "SELECT f_id FROM files ORDER BY duration DESC LIMIT 1",
        "schema": "CREATE TABLE song (song_name TEXT, f_id NUMBER); CREATE TABLE files (f_id NUMBER, duration TEXT); CREATE TABLE artist (artist_name TEXT);"
      },
      {
        "question": "What is the artist name of that song?",
        "query": "SELECT artist_name FROM files ORDER BY duration DESC LIMIT 1",
        "schema": "CREATE TABLE artist (artist_name TEXT); CREATE TABLE files (duration TEXT, artist_name TEXT, f_id NUMBER); CREATE TABLE song (artist_name TEXT, f_id NUMBER, song_name TEXT);"
      },
      {
        "question": "What is the duration of that song?",
        "query": "SELECT duration FROM files ORDER BY duration DESC LIMIT 1",
        "schema": "CREATE TABLE song (artist_name TEXT, song_name TEXT, f_id NUMBER); CREATE TABLE files (artist_name TEXT, duration TEXT, f_id NUMBER); CREATE TABLE artist (artist_name TEXT);"
      },
      {
        "question": "What about the shortest song?",
        "query": "SELECT duration FROM files ORDER BY duration LIMIT 1",
        "schema": "CREATE TABLE files (f_id NUMBER, artist_name TEXT, duration TEXT); CREATE TABLE artist (artist_name TEXT); CREATE TABLE song (song_name TEXT, f_id NUMBER, artist_name TEXT);"
      },
      {
        "question": "What is the average duration of all songs?",
        "query": "SELECT AVG ( duration ) FROM files",
        "schema": "CREATE TABLE song (f_id NUMBER, artist_name TEXT, song_name TEXT); CREATE TABLE artist (artist_name TEXT); CREATE TABLE files (artist_name TEXT, duration TEXT, f_id NUMBER);"
      }
    ],
    [
      {
        "question": "how many file ids?",
        "query": "SELECT COUNT ( DISTINCT f_id ) FROM files",
        "schema": "CREATE TABLE song (f_id NUMBER); CREATE TABLE files (f_id NUMBER); CREATE TABLE artist (artist_name TEXT);"
      },
      {
        "question": "what is country for Shrikanta?",
        "query": "SELECT t2.country FROM files AS t1 JOIN song AS t2 ON t1.f_id = t2.f_id WHERE t1.artist_name = \"Shrikanta\"",
        "schema": "CREATE TABLE artist (artist_name TEXT, country TEXT); CREATE TABLE song (artist_name TEXT, languages TEXT, f_id NUMBER, country TEXT); CREATE TABLE files (f_id NUMBER, artist_name TEXT);"
      },
      {
        "question": "who is highest rating?",
        "query": "SELECT artist_name FROM song ORDER BY rating DESC LIMIT 1",
        "schema": "CREATE TABLE files (f_id NUMBER, artist_name TEXT); CREATE TABLE artist (country TEXT, artist_name TEXT); CREATE TABLE song (song_name TEXT, languages TEXT, rating NUMBER, artist_name TEXT, country TEXT, f_id NUMBER);"
      },
      {
        "question": "what is languages for Prity and genre? | Do you mean the song with the artist name Prity? | yes",
        "query": "SELECT languages, genre_is FROM song WHERE artist_name = \"Prity\"",
        "schema": "CREATE TABLE song (artist_name TEXT, languages TEXT, f_id NUMBER, genre_is TEXT, rating NUMBER, song_name TEXT, country TEXT); CREATE TABLE genre (rating TEXT, g_name TEXT); CREATE TABLE files (artist_name TEXT, f_id NUMBER); CREATE TABLE artist (country TEXT, artist_name TEXT, preferred_genre TEXT);"
      },
      {
        "question": "find the file size for Farida?",
        "query": "SELECT file_size FROM files WHERE artist_name = \"Farida\"",
        "schema": "CREATE TABLE files (f_id NUMBER, file_size TEXT, artist_name TEXT); CREATE TABLE artist (artist_name TEXT, preferred_genre TEXT, country TEXT); CREATE TABLE genre (g_name TEXT, rating TEXT); CREATE TABLE song (languages TEXT, rating NUMBER, artist_name TEXT, song_name TEXT, country TEXT, f_id NUMBER, genre_is TEXT);"
      }
    ],
    [
      {
        "question": "what is the duration of the longest song grouped by genre?",
        "query": "SELECT MAX ( t1.duration ) , t2.genre_is FROM files AS t1 JOIN song AS t2 ON t1.f_id = t2.f_id GROUP BY t2.genre_is",
        "schema": "CREATE TABLE song (f_id NUMBER, song_name TEXT, genre_is TEXT); CREATE TABLE files (duration TEXT, f_id NUMBER); CREATE TABLE genre (g_name TEXT, rating TEXT);"
      },
      {
        "question": "How about the shortest?",
        "query": "SELECT MIN ( t1.duration ) , t2.genre_is FROM files AS t1 JOIN song AS t2 ON t1.f_id = t2.f_id GROUP BY t2.genre_is",
        "schema": "CREATE TABLE genre (g_name TEXT, rating TEXT); CREATE TABLE song (f_id NUMBER, genre_is TEXT, song_name TEXT); CREATE TABLE files (f_id NUMBER, duration TEXT);"
      },
      {
        "question": "Can you order them by genre?",
        "query": "SELECT MIN ( t1.duration ) , t2.genre_is FROM files AS t1 JOIN song AS t2 ON t1.f_id = t2.f_id GROUP BY t2.genre_is ORDER BY t2.genre_is",
        "schema": "CREATE TABLE files (duration TEXT, f_id NUMBER); CREATE TABLE song (f_id NUMBER, song_name TEXT, genre_is TEXT); CREATE TABLE genre (rating TEXT, g_name TEXT);"
      },
      {
        "question": "Can you also show me the lowest rating of songs for each genre? | do you want to order them by genre as well? | Yes please",
        "query": "SELECT MIN ( t1.duration ) , MIN ( t2.rating ) , t2.genre_is FROM files AS t1 JOIN song AS t2 ON t1.f_id = t2.f_id GROUP BY t2.genre_is ORDER BY t2.genre_is",
        "schema": "CREATE TABLE files (duration TEXT, f_id NUMBER); CREATE TABLE song (genre_is TEXT, rating NUMBER, f_id NUMBER, song_name TEXT); CREATE TABLE genre (rating TEXT, g_name TEXT);"
      }
    ]
  ],
  "apartment_rentals": [
    [
      {
        "question": "Please list each gender code with its corresponding amount of guests and sort it in descending order by that count?",
        "query": "SELECT gender_code , COUNT ( * ) FROM guests GROUP BY gender_code ORDER BY COUNT ( * ) DESC",
        "schema": "CREATE TABLE Guests (guest_first_name TEXT, guest_last_name TEXT, gender_code TEXT, guest_id NUMBER);"
      },
      {
        "question": "What are the full names of all the people with unknown genders?",
        "query": "SELECT guest_first_name, guest_last_name FROM guests WHERE gender_code = \"Unknown\"",
        "schema": "CREATE TABLE Guests (guest_last_name TEXT, guest_id NUMBER, guest_first_name TEXT, gender_code TEXT);"
      },
      {
        "question": "What were their birth dates?",
        "query": "SELECT date_of_birth FROM guests WHERE gender_code = \"Unknown\"",
        "schema": "CREATE TABLE Guests (guest_first_name TEXT, date_of_birth TIME, gender_code TEXT, guest_last_name TEXT, guest_id NUMBER);"
      },
      {
        "question": "What are the birth dates of all guests with the letter M in their first or last name?",
        "query": "SELECT date_of_birth FROM guests WHERE guest_first_name like '%M%' OR guest_last_name like '%M%'",
        "schema": "CREATE TABLE Guests (guest_last_name TEXT, gender_code TEXT, date_of_birth TIME, guest_id NUMBER, guest_first_name TEXT);"
      }
    ],
    [
      {
        "question": "What are the first names of all guest with apartment booking status \"Confirmed\" ?",
        "query": "SELECT t2.guest_first_name FROM apartment_bookings AS t1 JOIN guests AS t2 ON t1.guest_id = t2.guest_id WHERE t1.booking_status_code = \"Confirmed\"",
        "schema": "CREATE TABLE Apartments (apt_id NUMBER); CREATE TABLE Guests (guest_first_name TEXT, guest_id NUMBER, guest_last_name TEXT); CREATE TABLE Apartment_Bookings (guest_id NUMBER, booking_status_code TEXT, apt_id NUMBER, apt_booking_id NUMBER);"
      },
      {
        "question": "And how about their last names?",
        "query": "SELECT t2.guest_last_name FROM apartment_bookings AS t1 JOIN guests AS t2 ON t1.guest_id = t2.guest_id WHERE t1.booking_status_code = \"Confirmed\"",
        "schema": "CREATE TABLE Apartment_Bookings (apt_id NUMBER, apt_booking_id NUMBER, guest_id NUMBER, booking_status_code TEXT); CREATE TABLE Guests (guest_first_name TEXT, guest_id NUMBER, guest_last_name TEXT); CREATE TABLE Apartments (apt_id NUMBER);"
      },
      {
        "question": "And what about guests with \"Provisional\" status?",
        "query": "SELECT t2.guest_last_name FROM apartment_bookings AS t1 JOIN guests AS t2 ON t1.guest_id = t2.guest_id WHERE t1.booking_status_code = \"Provisional\"",
        "schema": "CREATE TABLE Apartments (apt_id NUMBER); CREATE TABLE Guests (guest_first_name TEXT, guest_last_name TEXT, guest_id NUMBER); CREATE TABLE Apartment_Bookings (apt_id NUMBER, guest_id NUMBER, booking_status_code TEXT, apt_booking_id NUMBER);"
      }
    ],
    [
      {
        "question": "Can you list all of the apartments with more than 4 bedrooms? | do you mean the apartment ids of apartments with more than 4 bedrooms? | Yes, please!  I believe that's the only discrete identifier of the apartments (at least that I can see)...",
        "query": "SELECT apt_id FROM apartments WHERE bedroom_count > 4",
        "schema": "CREATE TABLE Apartment_Bookings (apt_id NUMBER); CREATE TABLE Apartment_Facilities (apt_id NUMBER); CREATE TABLE Apartments (apt_id NUMBER, bathroom_count NUMBER, bedroom_count NUMBER, apt_type_code TEXT, apt_number TEXT);"
      },
      {
        "question": "Thank you!  Can you list the facility codes for each of those apartment IDs (3 4 6 11 12 13 15)?",
        "query": "SELECT t2.facility_code FROM apartments AS t1 JOIN apartment_facilities AS t2 ON t1.apt_id = t2.apt_id WHERE t1.bedroom_count > 4",
        "schema": "CREATE TABLE Apartment_Bookings (apt_id NUMBER); CREATE TABLE Apartment_Facilities (apt_id NUMBER, facility_code TEXT); CREATE TABLE Apartments (apt_type_code TEXT, apt_number TEXT, apt_id NUMBER, bathroom_count NUMBER, bedroom_count NUMBER);"
      },
      {
        "question": "Can you please list the 'building id', 'apartment type code' and 'apartment number' for all apartment IDs with more than 4 bedrooms?",
        "query": "SELECT building_id,apt_type_code,apt_number FROM apartments WHERE bedroom_count > 4",
        "schema": "CREATE TABLE Apartments (apt_number TEXT, bathroom_count NUMBER, bedroom_count NUMBER, apt_type_code TEXT, apt_id NUMBER, building_id NUMBER); CREATE TABLE Apartment_Bookings (apt_id NUMBER); CREATE TABLE Apartment_Facilities (facility_code TEXT, apt_id NUMBER); CREATE TABLE Apartment_Buildings (building_id NUMBER);"
      }
    ],
    [
      {
        "question": "How many apartments are there?",
        "query": "SELECT COUNT ( * ) FROM apartments",
        "schema": "CREATE TABLE Apartments (apt_type_code TEXT, building_id NUMBER, apt_id NUMBER, apt_number TEXT, room_count TEXT, bathroom_count NUMBER); CREATE TABLE Apartment_Buildings (building_id NUMBER); CREATE TABLE Apartment_Facilities (facility_code TEXT, apt_id NUMBER); CREATE TABLE Apartment_Bookings (apt_id NUMBER, apt_booking_id NUMBER);"
      },
      {
        "question": "How many different facilities are there?",
        "query": "SELECT COUNT ( * ) FROM apartment_facilities",
        "schema": "CREATE TABLE Apartment_Facilities (facility_code TEXT, apt_id NUMBER); CREATE TABLE Apartments (building_id NUMBER, room_count TEXT, apt_type_code TEXT, apt_id NUMBER, bathroom_count NUMBER, apt_number TEXT); CREATE TABLE Apartment_Bookings (apt_booking_id NUMBER, apt_id NUMBER); CREATE TABLE Apartment_Buildings (building_id NUMBER);"
      },
      {
        "question": "Can you list the different facilities?",
        "query": "SELECT * FROM apartment_facilities",
        "schema": "CREATE TABLE Apartment_Buildings (building_id NUMBER); CREATE TABLE Apartment_Bookings (apt_booking_id NUMBER, apt_id NUMBER); CREATE TABLE Apartment_Facilities (apt_id NUMBER, facility_code TEXT); CREATE TABLE Apartments (apt_id NUMBER, room_count TEXT, building_id NUMBER, bathroom_count NUMBER, apt_number TEXT, apt_type_code TEXT);"
      },
      {
        "question": "How many apartments have facilities?",
        "query": "SELECT COUNT ( * ) FROM apartments WHERE apt_id IN ( SELECT apt_id FROM apartment_facilities )",
        "schema": "CREATE TABLE Apartment_Bookings (apt_booking_id NUMBER, apt_id NUMBER); CREATE TABLE Apartment_Facilities (facility_code TEXT, apt_id NUMBER); CREATE TABLE Apartment_Buildings (building_id NUMBER); CREATE TABLE Apartments (room_count TEXT, apt_number TEXT, building_id NUMBER, apt_id NUMBER, apt_type_code TEXT, bathroom_count NUMBER);"
      },
      {
        "question": "How many apartments have no facilities?",
        "query": "SELECT COUNT ( * ) FROM apartments WHERE apt_id NOT IN ( SELECT apt_id FROM apartment_facilities )",
        "schema": "CREATE TABLE Apartment_Buildings (building_id NUMBER); CREATE TABLE Apartments (room_count TEXT, apt_id NUMBER, building_id NUMBER, bathroom_count NUMBER, apt_number TEXT, apt_type_code TEXT); CREATE TABLE Apartment_Facilities (apt_id NUMBER, facility_code TEXT); CREATE TABLE Apartment_Bookings (apt_id NUMBER, apt_booking_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show me the addresses of the buildings.",
        "query": "SELECT building_address FROM apartment_buildings",
        "schema": "CREATE TABLE Apartments (building_id NUMBER, apt_id NUMBER); CREATE TABLE Apartment_Buildings (building_full_name TEXT, building_short_name TEXT, building_id NUMBER, building_address TEXT);"
      },
      {
        "question": "Any of those have apartments with more than 1 bedrooms? | Sorry, do you want me to list apartments with more than 1 bedrooms? | Yes",
        "query": "SELECT t1.building_address FROM apartment_buildings AS t1 JOIN apartments AS t2 ON t1.building_id = t2.building_id WHERE t2.bedroom_count > 1",
        "schema": "CREATE TABLE Apartment_Buildings (building_short_name TEXT, building_id NUMBER, building_address TEXT, building_full_name TEXT); CREATE TABLE Apartments (bathroom_count NUMBER, bedroom_count NUMBER, building_id NUMBER, apt_id NUMBER, apt_number TEXT);"
      },
      {
        "question": "How about more than 2 bathrooms?",
        "query": "SELECT t1.building_address FROM apartment_buildings AS t1 JOIN apartments AS t2 ON t1.building_id = t2.building_id WHERE t2.bathroom_count > 2",
        "schema": "CREATE TABLE Apartments (bathroom_count NUMBER, apt_number TEXT, bedroom_count NUMBER, building_id NUMBER, apt_id NUMBER); CREATE TABLE Apartment_Buildings (building_address TEXT, building_short_name TEXT, building_full_name TEXT, building_id NUMBER);"
      }
    ],
    [
      {
        "question": "What about the code with the least rooms?",
        "query": "SELECT apt_type_code FROM apartments ORDER BY room_count LIMIT 1",
        "schema": "CREATE TABLE Apartments (apt_type_code TEXT, apt_id NUMBER, room_count TEXT);"
      },
      {
        "question": "What is the building ID  with  apartment Suite 645?",
        "query": "SELECT building_id FROM apartments WHERE apt_number = 'Suite 645'",
        "schema": "CREATE TABLE Apartment_Buildings (building_full_name TEXT, building_id NUMBER); CREATE TABLE Apartments (apt_id NUMBER, room_count TEXT, apt_type_code TEXT, building_id NUMBER, apt_number TEXT); CREATE TABLE Apartment_Bookings (apt_id NUMBER);"
      }
    ],
    [
      {
        "question": "what is the building id for the apt number suite 645",
        "query": "SELECT building_id FROM apartments WHERE apt_number = \"Suite 645\"",
        "schema": "CREATE TABLE Apartment_Buildings (building_short_name TEXT, building_id NUMBER, building_full_name TEXT); CREATE TABLE Apartment_Bookings (apt_id NUMBER); CREATE TABLE Apartments (apt_number TEXT, apt_id NUMBER, building_id NUMBER);"
      },
      {
        "question": "what is the bathroom count and bedroom count of the apartment number suite 645?",
        "query": "SELECT bathroom_count, bedroom_count FROM apartments WHERE apt_number = \"Suite 645\"",
        "schema": "CREATE TABLE Apartment_Buildings (building_short_name TEXT, building_full_name TEXT, building_id NUMBER); CREATE TABLE Apartment_Bookings (apt_id NUMBER); CREATE TABLE Apartments (bathroom_count NUMBER, apt_number TEXT, building_id NUMBER, bedroom_count NUMBER, apt_id NUMBER);"
      },
      {
        "question": "what is the room count in the building 624?",
        "query": "SELECT room_count FROM apartments WHERE building_id = 624",
        "schema": "CREATE TABLE Apartments (bedroom_count NUMBER, building_id NUMBER, bathroom_count NUMBER, apt_number TEXT, apt_id NUMBER, room_count TEXT); CREATE TABLE Apartment_Bookings (apt_id NUMBER); CREATE TABLE Apartment_Buildings (building_full_name TEXT, building_short_name TEXT, building_address TEXT, building_id NUMBER);"
      },
      {
        "question": "what is minimum and maximum number of bathrooms and bedrooms of all the apartments?",
        "query": "SELECT MIN ( bathroom_count ) , MAX ( bathroom_count ) , MIN ( bedroom_count ) , MAX ( bedroom_count ) FROM apartments",
        "schema": "CREATE TABLE Apartment_Buildings (building_address TEXT, building_short_name TEXT, building_full_name TEXT, building_id NUMBER); CREATE TABLE Apartment_Bookings (apt_id NUMBER); CREATE TABLE Apartments (apt_number TEXT, building_id NUMBER, room_count TEXT, bathroom_count NUMBER, bedroom_count NUMBER, apt_id NUMBER);"
      },
      {
        "question": "what is the building_id of the apartment apt.908?",
        "query": "SELECT building_id FROM apartments WHERE apt_number = \"Apt. 908\"",
        "schema": "CREATE TABLE Apartment_Bookings (apt_id NUMBER); CREATE TABLE Apartments (bedroom_count NUMBER, room_count TEXT, bathroom_count NUMBER, building_id NUMBER, apt_number TEXT, apt_id NUMBER); CREATE TABLE Apartment_Buildings (building_short_name TEXT, building_id NUMBER, building_full_name TEXT, building_address TEXT);"
      }
    ],
    [
      {
        "question": "how many apartments have bookings with status code \"confirmed\"?",
        "query": "SELECT COUNT ( * ) FROM apartment_bookings AS t1 JOIN apartments AS t2 ON t1.apt_id = t2.apt_id WHERE t1.booking_status_code = \"Confirmed\"",
        "schema": "CREATE TABLE Apartment_Facilities (apt_id NUMBER); CREATE TABLE Apartments (apt_number TEXT, apt_type_code TEXT, apt_id NUMBER); CREATE TABLE Apartment_Bookings (apt_id NUMBER, apt_booking_id NUMBER, booking_status_code TEXT); CREATE TABLE View_Unit_Status (apt_booking_id NUMBER);"
      },
      {
        "question": "show me the apartment type for the 7 apartments",
        "query": "SELECT t2.apt_type_code FROM apartment_bookings AS t1 JOIN apartments AS t2 ON t1.apt_id = t2.apt_id WHERE t1.booking_status_code = \"Confirmed\"",
        "schema": "CREATE TABLE Apartment_Bookings (booking_status_code TEXT, apt_id NUMBER, apt_booking_id NUMBER); CREATE TABLE View_Unit_Status (apt_booking_id NUMBER); CREATE TABLE Apartments (apt_id NUMBER, apt_number TEXT, apt_type_code TEXT); CREATE TABLE Apartment_Facilities (apt_id NUMBER);"
      },
      {
        "question": "what are the apartment numbers for those 7?",
        "query": "SELECT DISTINCT t2.apt_number FROM apartment_bookings AS t1 JOIN apartments AS t2 ON t1.apt_id = t2.apt_id WHERE t1.booking_status_code = \"Confirmed\"",
        "schema": "CREATE TABLE Apartments (apt_number TEXT, apt_type_code TEXT, apt_id NUMBER); CREATE TABLE Apartment_Facilities (apt_id NUMBER); CREATE TABLE Apartment_Bookings (apt_booking_id NUMBER, booking_status_code TEXT, apt_id NUMBER); CREATE TABLE View_Unit_Status (apt_booking_id NUMBER);"
      }
    ],
    [
      {
        "question": "how many different types of apartments are there?",
        "query": "SELECT COUNT ( DISTINCT apt_type_code ) FROM apartments",
        "schema": "CREATE TABLE Apartments (apt_id NUMBER, apt_type_code TEXT, apt_number TEXT);"
      },
      {
        "question": "what are they?",
        "query": "SELECT DISTINCT apt_type_code FROM apartments",
        "schema": "CREATE TABLE Apartments (bedroom_count NUMBER, apt_number TEXT, apt_id NUMBER, apt_type_code TEXT);"
      },
      {
        "question": "Great! how many apartments does each of them have?",
        "query": "SELECT COUNT ( * ) , apt_type_code FROM apartments GROUP BY apt_type_code",
        "schema": "CREATE TABLE Apartments (apt_id NUMBER, apt_number TEXT, apt_type_code TEXT, bedroom_count NUMBER);"
      },
      {
        "question": "could you please show their names as well? | Do you mean the apartment type code? | yes!",
        "query": "SELECT apt_type_code, COUNT ( * ) FROM apartments GROUP BY apt_type_code",
        "schema": "CREATE TABLE Apartments (apt_type_code TEXT, bedroom_count NUMBER, apt_id NUMBER, apt_number TEXT);"
      },
      {
        "question": "ok, which of them is the most common one?",
        "query": "SELECT apt_type_code FROM apartments GROUP BY apt_type_code ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Apartments (apt_number TEXT, bedroom_count NUMBER, apt_type_code TEXT, apt_id NUMBER);"
      }
    ],
    [
      {
        "question": "What are the booking start and end dates of the apartments with more than 2 bedrooms ?",
        "query": "SELECT t1.booking_start_date , t1.booking_start_date FROM apartment_bookings AS t1 JOIN apartments AS t2 ON t1.apt_id = t2.apt_id WHERE t2.bedroom_count > 2",
        "schema": "CREATE TABLE Apartments (apt_id NUMBER, apt_number TEXT, bedroom_count NUMBER, apt_type_code TEXT); CREATE TABLE Apartment_Bookings (booking_status_code TEXT, booking_start_date TIME, apt_booking_id NUMBER, booking_end_date TIME, apt_id NUMBER);"
      },
      {
        "question": "What are the dates for apartment 585 ? | Did you mean the booking start and end dates of the apartments with id 585? | Yes",
        "query": "SELECT t1.booking_start_date , t1.booking_start_date FROM apartment_bookings AS t1 JOIN apartments AS t2 ON t1.apt_id = t2.apt_id WHERE t2.apt_number = \"Apt. 585\"",
        "schema": "CREATE TABLE Apartments (bedroom_count NUMBER, apt_type_code TEXT, apt_id NUMBER, apt_number TEXT); CREATE TABLE Apartment_Bookings (booking_start_date TIME, booking_status_code TEXT, apt_id NUMBER, booking_end_date TIME, apt_booking_id NUMBER);"
      },
      {
        "question": "Okay, what are the dates for the apartment in building 225 ?",
        "query": "SELECT t1.booking_start_date , t1.booking_start_date FROM apartment_bookings AS t1 JOIN apartments AS t2 ON t1.apt_id = t2.apt_id WHERE t2.building_id = \"225\"",
        "schema": "CREATE TABLE Apartment_Bookings (apt_id NUMBER, booking_status_code TEXT, booking_start_date TIME, booking_end_date TIME, apt_booking_id NUMBER); CREATE TABLE Apartments (apt_type_code TEXT, building_id NUMBER, bedroom_count NUMBER, apt_number TEXT, apt_id NUMBER); CREATE TABLE Apartment_Buildings (building_address TEXT, building_id NUMBER, building_full_name TEXT);"
      },
      {
        "question": "What are the apartment numbers of all apartments with more than 2 bedrooms ?",
        "query": "SELECT t2.apt_number FROM apartment_bookings AS t1 JOIN apartments AS t2 ON t1.apt_id = t2.apt_id WHERE t2.bedroom_count > 2",
        "schema": "CREATE TABLE Apartment_Buildings (building_id NUMBER, building_address TEXT, building_full_name TEXT); CREATE TABLE Apartments (apt_number TEXT, building_id NUMBER, apt_id NUMBER, apt_type_code TEXT, bedroom_count NUMBER); CREATE TABLE Apartment_Bookings (booking_end_date TIME, apt_id NUMBER, booking_status_code TEXT, booking_start_date TIME, apt_booking_id NUMBER);"
      }
    ],
    [
      {
        "question": "What is the booking status of the apartment with number \"Suite 634\"?",
        "query": "SELECT t1.booking_status_code FROM apartment_bookings AS t1 JOIN apartments AS t2 ON t1.apt_id = t2.apt_id WHERE t2.apt_number = \"Suite 634\"",
        "schema": "CREATE TABLE View_Unit_Status (apt_booking_id NUMBER); CREATE TABLE Apartment_Bookings (booking_status_code TEXT, apt_booking_id NUMBER, apt_id NUMBER); CREATE TABLE Apartments (apt_type_code TEXT, apt_number TEXT, apt_id NUMBER);"
      },
      {
        "question": "What is the bathroom count for \"Suite 643\"?",
        "query": "SELECT t2.bathroom_count FROM apartment_bookings AS t1 JOIN apartments AS t2 ON t1.apt_id = t2.apt_id WHERE t2.apt_number = \"Suite 634\"",
        "schema": "CREATE TABLE Apartment_Facilities (apt_id NUMBER); CREATE TABLE Apartment_Bookings (apt_booking_id NUMBER, apt_id NUMBER, booking_status_code TEXT); CREATE TABLE View_Unit_Status (apt_booking_id NUMBER); CREATE TABLE Apartments (bedroom_count NUMBER, apt_number TEXT, apt_type_code TEXT, apt_id NUMBER, bathroom_count NUMBER);"
      },
      {
        "question": "What is the apartment type code for \"Suite 643\"?",
        "query": "SELECT t2.apt_type_code FROM apartment_bookings AS t1 JOIN apartments AS t2 ON t1.apt_id = t2.apt_id WHERE t2.apt_number = \"Suite 634\"",
        "schema": "CREATE TABLE View_Unit_Status (apt_booking_id NUMBER); CREATE TABLE Apartments (bedroom_count NUMBER, apt_id NUMBER, apt_type_code TEXT, apt_number TEXT, bathroom_count NUMBER); CREATE TABLE Apartment_Bookings (booking_status_code TEXT, apt_booking_id NUMBER, apt_id NUMBER); CREATE TABLE Apartment_Facilities (apt_id NUMBER);"
      }
    ],
    [
      {
        "question": "What is the number of the apartment with the greatest number of bedrooms?",
        "query": "SELECT apt_number FROM apartments ORDER BY bedroom_count DESC LIMIT 1",
        "schema": "CREATE TABLE Apartments (apt_id NUMBER, apt_type_code TEXT, room_count TEXT, bedroom_count NUMBER, apt_number TEXT); CREATE TABLE Apartment_Bookings (apt_id NUMBER);"
      },
      {
        "question": "What is the number of the apartment with the least number of bedrooms?",
        "query": "SELECT apt_number FROM apartments ORDER BY bedroom_count LIMIT 1",
        "schema": "CREATE TABLE Apartments (room_count TEXT, apt_type_code TEXT, apt_number TEXT, bedroom_count NUMBER, apt_id NUMBER); CREATE TABLE Apartment_Bookings (apt_id NUMBER);"
      },
      {
        "question": "What is the apartment type code of the apartment with the greatest number of bathrooms?",
        "query": "SELECT apt_type_code FROM apartments ORDER BY bathroom_count DESC LIMIT 1",
        "schema": "CREATE TABLE Apartments (apt_id NUMBER, bedroom_count NUMBER, apt_number TEXT, room_count TEXT, bathroom_count NUMBER, apt_type_code TEXT); CREATE TABLE Apartment_Bookings (apt_id NUMBER);"
      },
      {
        "question": "How many rooms does that apartment have, and what is the number of that apartment?",
        "query": "SELECT room_count, apt_number FROM apartments ORDER BY bathroom_count DESC LIMIT 1",
        "schema": "CREATE TABLE Apartment_Bookings (apt_id NUMBER); CREATE TABLE Apartments (room_count TEXT, bathroom_count NUMBER, apt_type_code TEXT, apt_number TEXT, bedroom_count NUMBER, apt_id NUMBER);"
      }
    ],
    [
      {
        "question": "How many different apartment building are there?",
        "query": "SELECT COUNT ( DISTINCT building_id ) FROM apartment_buildings",
        "schema": "CREATE TABLE Apartments (apt_id NUMBER, building_id NUMBER, apt_number TEXT, apt_type_code TEXT); CREATE TABLE Apartment_Buildings (building_short_name TEXT, building_id NUMBER, building_phone TEXT, building_full_name TEXT, building_address TEXT, building_description TEXT); CREATE TABLE Apartment_Bookings (apt_id NUMBER);"
      },
      {
        "question": "How many of those apartment building are managed by Kyle?",
        "query": "SELECT COUNT ( * ) FROM apartment_buildings AS t1 JOIN apartments AS t2 ON t1.building_id = t2.building_id WHERE t1.building_manager = \"Kyle\"",
        "schema": "CREATE TABLE Apartments (building_id NUMBER, apt_type_code TEXT, apt_number TEXT, apt_id NUMBER); CREATE TABLE Apartment_Buildings (building_full_name TEXT, building_short_name TEXT, building_address TEXT, building_manager TEXT, building_phone TEXT, building_description TEXT, building_id NUMBER); CREATE TABLE Apartment_Bookings (apt_id NUMBER);"
      },
      {
        "question": "How many apartment type codes are there?",
        "query": "SELECT COUNT ( DISTINCT apt_type_code ) FROM apartments",
        "schema": "CREATE TABLE Apartments (apt_id NUMBER, apt_number TEXT, building_id NUMBER, apt_type_code TEXT); CREATE TABLE Apartment_Bookings (apt_id NUMBER); CREATE TABLE Apartment_Buildings (building_description TEXT, building_phone TEXT, building_manager TEXT, building_short_name TEXT, building_address TEXT, building_full_name TEXT, building_id NUMBER);"
      },
      {
        "question": "Show the apartment types codes in buildings managed by Kyle?",
        "query": "SELECT t2.apt_type_code FROM apartment_buildings AS t1 JOIN apartments AS t2 ON t1.building_id = t2.building_id WHERE t1.building_manager = \"Kyle\"",
        "schema": "CREATE TABLE Apartment_Buildings (building_manager TEXT, building_description TEXT, building_id NUMBER, building_phone TEXT, building_full_name TEXT, building_address TEXT, building_short_name TEXT); CREATE TABLE Apartments (apt_id NUMBER, apt_number TEXT, building_id NUMBER, apt_type_code TEXT); CREATE TABLE Apartment_Bookings (apt_id NUMBER);"
      },
      {
        "question": "Show the apartment numbers in the buildings managed by Kyle.",
        "query": "SELECT t2.apt_number FROM apartment_buildings AS t1 JOIN apartments AS t2 ON t1.building_id = t2.building_id WHERE t1.building_manager = \"Kyle\"",
        "schema": "CREATE TABLE Apartment_Buildings (building_manager TEXT, building_phone TEXT, building_description TEXT, building_short_name TEXT, building_address TEXT, building_id NUMBER, building_full_name TEXT); CREATE TABLE Apartments (apt_number TEXT, apt_id NUMBER, building_id NUMBER, apt_type_code TEXT); CREATE TABLE Apartment_Bookings (apt_id NUMBER);"
      }
    ],
    [
      {
        "question": "how many rooms are available in the apartment with short name columbus square",
        "query": "SELECT SUM ( t2.room_count ) FROM apartment_buildings AS t1 JOIN apartments AS t2 ON t1.building_id = t2.building_id WHERE t1.building_short_name = \"Columbus Square\"",
        "schema": "CREATE TABLE Apartment_Facilities (apt_id NUMBER, facility_code TEXT); CREATE TABLE Apartment_Bookings (apt_id NUMBER); CREATE TABLE Apartments (room_count TEXT, apt_id NUMBER, building_id NUMBER, apt_number TEXT); CREATE TABLE Apartment_Buildings (building_full_name TEXT, building_address TEXT, building_short_name TEXT, building_description TEXT, building_id NUMBER);"
      },
      {
        "question": "how many bathrooms are there in these 2 rooms | Did  you mean the number of bathrooms in the  apartment with id  is  2? | yes, thanks",
        "query": "SELECT bathroom_count FROM apartments WHERE apt_id = 2",
        "schema": "CREATE TABLE Apartment_Buildings (building_id NUMBER, building_description TEXT, building_full_name TEXT, building_address TEXT, building_short_name TEXT); CREATE TABLE Apartments (apt_id NUMBER, building_id NUMBER, room_count TEXT, bathroom_count NUMBER, apt_number TEXT); CREATE TABLE Apartment_Facilities (apt_id NUMBER, facility_code TEXT); CREATE TABLE Apartment_Bookings (apt_id NUMBER);"
      }
    ],
    [
      {
        "question": "What are the building short name of building id 133?",
        "query": "SELECT building_short_name FROM apartment_buildings WHERE building_id = 133",
        "schema": "CREATE TABLE Apartment_Bookings (apt_id NUMBER); CREATE TABLE Apartments (apt_id NUMBER, building_id NUMBER, apt_number TEXT); CREATE TABLE Apartment_Buildings (building_full_name TEXT, building_id NUMBER, building_short_name TEXT);"
      },
      {
        "question": "Who is building manager of Mercedes House?",
        "query": "SELECT building_manager FROM apartment_buildings WHERE building_full_name = \"Mercedes House\"",
        "schema": "CREATE TABLE Apartment_Buildings (building_id NUMBER, building_full_name TEXT, building_short_name TEXT, building_manager TEXT); CREATE TABLE Apartments (apt_id NUMBER, building_id NUMBER, apt_number TEXT); CREATE TABLE Apartment_Bookings (apt_id NUMBER);"
      },
      {
        "question": "Find the building address of building manager Melyssa.",
        "query": "SELECT building_address FROM apartment_buildings WHERE building_manager = \"Melyssa\"",
        "schema": "CREATE TABLE Apartments (apt_id NUMBER, building_id NUMBER, apt_number TEXT); CREATE TABLE Apartment_Buildings (building_full_name TEXT, building_short_name TEXT, building_address TEXT, building_manager TEXT, building_id NUMBER); CREATE TABLE Apartment_Bookings (apt_id NUMBER);"
      },
      {
        "question": "What are the building full names that contain the word \"court\"?",
        "query": "SELECT building_full_name FROM apartment_buildings WHERE building_full_name LIKE \"%court%\"",
        "schema": "CREATE TABLE Apartments (apt_number TEXT, building_id NUMBER, apt_id NUMBER); CREATE TABLE Apartment_Bookings (apt_id NUMBER); CREATE TABLE Apartment_Buildings (building_manager TEXT, building_short_name TEXT, building_full_name TEXT, building_id NUMBER, building_address TEXT);"
      }
    ],
    [
      {
        "question": "How many apartments are there?",
        "query": "SELECT COUNT ( * ) FROM apartments",
        "schema": "CREATE TABLE Apartments (apt_type_code TEXT, building_id NUMBER, apt_id NUMBER, room_count TEXT, bathroom_count NUMBER, apt_number TEXT); CREATE TABLE Apartment_Bookings (apt_id NUMBER, apt_booking_id NUMBER); CREATE TABLE Apartment_Buildings (building_id NUMBER); CREATE TABLE Apartment_Facilities (apt_id NUMBER, facility_code TEXT);"
      },
      {
        "question": "Which apartments has the largest number of total rooms? | what attribute did you want me to return for the apartment with the largest number of total rooms? the apartment type code? | The apt ID first.",
        "query": "SELECT apt_id FROM apartments GROUP BY apt_id ORDER BY SUM ( room_count ) DESC LIMIT 1",
        "schema": "CREATE TABLE Apartment_Bookings (apt_id NUMBER, apt_booking_id NUMBER); CREATE TABLE Apartment_Buildings (building_id NUMBER); CREATE TABLE Apartment_Facilities (facility_code TEXT, apt_id NUMBER); CREATE TABLE Apartments (apt_id NUMBER, apt_type_code TEXT, bathroom_count NUMBER, room_count TEXT, apt_number TEXT, building_id NUMBER);"
      },
      {
        "question": "Now what is the apartment type code of that apartment.",
        "query": "SELECT apt_type_code FROM apartments GROUP BY apt_type_code ORDER BY SUM ( room_count ) DESC LIMIT 1",
        "schema": "CREATE TABLE Apartment_Facilities (apt_id NUMBER, facility_code TEXT); CREATE TABLE Apartment_Bookings (apt_booking_id NUMBER, apt_id NUMBER); CREATE TABLE Apartment_Buildings (building_id NUMBER); CREATE TABLE Apartments (building_id NUMBER, apt_type_code TEXT, bathroom_count NUMBER, room_count TEXT, apt_number TEXT, apt_id NUMBER);"
      }
    ],
    [
      {
        "question": "Can you show me the numbers of the apartments?",
        "query": "SELECT COUNT ( * ) FROM apartments",
        "schema": "CREATE TABLE Apartments (apt_id NUMBER, apt_type_code TEXT, room_count TEXT, bedroom_count NUMBER, bathroom_count NUMBER, apt_number TEXT); CREATE TABLE Apartment_Bookings (apt_id NUMBER);"
      },
      {
        "question": "Of those apartments, which ones have more than 2 bedrooms?",
        "query": "SELECT COUNT ( * ) FROM apartment_bookings AS t1 JOIN apartments AS t2 ON t1.apt_id = t2.apt_id WHERE t2.bedroom_count > 2",
        "schema": "CREATE TABLE Apartment_Bookings (apt_id NUMBER); CREATE TABLE Apartments (bedroom_count NUMBER, apt_number TEXT, apt_type_code TEXT, apt_id NUMBER, bathroom_count NUMBER, room_count TEXT);"
      },
      {
        "question": "Can you provide the booking start dates and end dates, for all the apartments with more than 2 bedrooms?",
        "query": "SELECT t1.booking_start_date , t1.booking_start_date FROM apartment_bookings AS t1 JOIN apartments AS t2 ON t1.apt_id = t2.apt_id WHERE t2.bedroom_count > 2",
        "schema": "CREATE TABLE Apartment_Bookings (booking_end_date TIME, apt_booking_id NUMBER, booking_start_date TIME, apt_id NUMBER, booking_status_code TEXT); CREATE TABLE Apartments (apt_id NUMBER, apt_number TEXT, bedroom_count NUMBER, apt_type_code TEXT, bathroom_count NUMBER, room_count TEXT);"
      }
    ],
    [
      {
        "question": "Hello!  How many different Apartment Type Codes are there?",
        "query": "SELECT COUNT ( apt_type_code ) FROM apartments",
        "schema": "CREATE TABLE Apartments (apt_id NUMBER, apt_type_code TEXT, apt_number TEXT);"
      },
      {
        "question": "Can you provide me with the most common apartment type code among all of the apartments with at least 1 bathroom?",
        "query": "SELECT apt_type_code FROM apartments WHERE bathroom_count > = 1 GROUP BY apt_type_code ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Apartments (apt_type_code TEXT, apt_id NUMBER, bathroom_count NUMBER, apt_number TEXT, bedroom_count NUMBER);"
      },
      {
        "question": "Can you list all apartment IDs with \"Flat\" as the apartment type?",
        "query": "SELECT apt_id FROM apartments WHERE apt_type_code = 'Flat'",
        "schema": "CREATE TABLE Apartments (apt_number TEXT, bedroom_count NUMBER, bathroom_count NUMBER, apt_id NUMBER, apt_type_code TEXT); CREATE TABLE Apartment_Bookings (apt_id NUMBER);"
      },
      {
        "question": "Thank you! Can you update that list to include the building ID for each of those apartment IDs?",
        "query": "SELECT building_id, apt_id FROM apartments WHERE apt_type_code = 'Flat'",
        "schema": "CREATE TABLE Apartment_Bookings (apt_id NUMBER); CREATE TABLE Apartment_Buildings (building_id NUMBER); CREATE TABLE Apartments (apt_id NUMBER, bathroom_count NUMBER, apt_type_code TEXT, building_id NUMBER, bedroom_count NUMBER, apt_number TEXT);"
      }
    ],
    [
      {
        "question": "Can you list the apartment type code for each entry?",
        "query": "SELECT apt_type_code FROM apartments",
        "schema": "CREATE TABLE Apartments (apt_type_code TEXT, apt_id NUMBER);"
      },
      {
        "question": "Can you add to the table the room count for each entry?",
        "query": "SELECT apt_type_code,room_count FROM apartments",
        "schema": "CREATE TABLE Apartments (apt_id NUMBER, room_count TEXT, apt_type_code TEXT);"
      },
      {
        "question": "Can you find the entries with the highest room count and only keep those in the table? | And still return the apartment type code and the room count? | Yes, only for those entries with the highest room count.",
        "query": "SELECT apt_type_code,room_count FROM apartments ORDER BY room_count DESC LIMIT 1",
        "schema": "CREATE TABLE Apartments (apt_type_code TEXT, room_count TEXT, apt_id NUMBER);"
      },
      {
        "question": "Sorry, I think I misunderstood the question. Can you display only the apartment type codes again for each entry?",
        "query": "SELECT apt_type_code FROM apartments",
        "schema": "CREATE TABLE Apartments (room_count TEXT, apt_id NUMBER, apt_type_code TEXT);"
      },
      {
        "question": "Can you add up the room counts for each distinct apartment type code and display those values along with their respective department type codes?",
        "query": "SELECT apt_type_code , SUM ( room_count ) FROM apartments GROUP BY apt_type_code",
        "schema": "CREATE TABLE Apartments (apt_number TEXT, room_count TEXT, apt_id NUMBER, apt_type_code TEXT);"
      },
      {
        "question": "Amazing! Can you do add up the bathroom counts and bedroom counts for the department type Flat and add those to the table?",
        "query": "SELECT apt_type_code , SUM ( room_count ) , SUM ( bathroom_count ) ,SUM ( bedroom_count ) FROM apartments WHERE apt_type_code = \"Flat\"",
        "schema": "CREATE TABLE Apartments (room_count TEXT, apt_number TEXT, apt_id NUMBER, bedroom_count NUMBER, bathroom_count NUMBER, apt_type_code TEXT);"
      }
    ],
    [
      {
        "question": "How many apartments in this table?",
        "query": "SELECT COUNT ( * ) FROM apartments",
        "schema": "CREATE TABLE Apartment_Bookings (apt_id NUMBER); CREATE TABLE Apartments (apt_type_code TEXT, apt_number TEXT, apt_id NUMBER, room_count TEXT);"
      },
      {
        "question": "How many flats in this table? | Do you mean the number of apartments whose type code is Flat? | Yes.",
        "query": "SELECT COUNT ( * ) FROM apartments WHERE apt_type_code = 'Flat'",
        "schema": "CREATE TABLE Apartment_Bookings (apt_id NUMBER); CREATE TABLE Apartments (apt_id NUMBER, apt_type_code TEXT, room_count TEXT, bedroom_count NUMBER, apt_number TEXT);"
      },
      {
        "question": "What is the number of apartments whose type code is studio?",
        "query": "SELECT COUNT ( * ) FROM apartments WHERE apt_type_code = 'Studio'",
        "schema": "CREATE TABLE Apartments (apt_type_code TEXT, apt_id NUMBER, bedroom_count NUMBER, apt_number TEXT, room_count TEXT); CREATE TABLE Apartment_Bookings (apt_id NUMBER);"
      }
    ],
    [
      {
        "question": "How many bathroom count those building 809 has? | The total number of bathrooms building 809 has is NULL. | How about building 808?",
        "query": "SELECT SUM ( bathroom_count ) FROM apartments WHERE building_id = 808",
        "schema": "CREATE TABLE Apartment_Buildings (building_id NUMBER, building_full_name TEXT); CREATE TABLE Apartment_Facilities (apt_id NUMBER); CREATE TABLE Apartments (bedroom_count NUMBER, apt_id NUMBER, apt_number TEXT, room_count TEXT, building_id NUMBER, bathroom_count NUMBER);"
      },
      {
        "question": "How about the total number of rooms it has?",
        "query": "SELECT SUM ( room_count ) FROM apartments WHERE building_id = 808",
        "schema": "CREATE TABLE Apartments (room_count TEXT, apt_id NUMBER, apt_number TEXT, bathroom_count NUMBER, building_id NUMBER, bedroom_count NUMBER); CREATE TABLE Apartment_Facilities (apt_id NUMBER); CREATE TABLE Apartment_Buildings (building_id NUMBER, building_full_name TEXT);"
      }
    ],
    [
      {
        "question": "What building has a gym? | Do you mean the building ids of buildings with apartments that have gyms? | Yes please.",
        "query": "SELECT t2.building_id FROM apartment_facilities AS t1 JOIN apartments AS t2 ON t1.apt_id = t2.apt_id WHERE t1.facility_code = \"Gym\"",
        "schema": "CREATE TABLE Apartment_Facilities (apt_id NUMBER, facility_code TEXT); CREATE TABLE Apartments (apt_type_code TEXT, building_id NUMBER, apt_number TEXT, apt_id NUMBER); CREATE TABLE Apartment_Bookings (apt_id NUMBER); CREATE TABLE Apartment_Buildings (building_id NUMBER, building_short_name TEXT, building_full_name TEXT);"
      },
      {
        "question": "How many bathrooms are there in those buildings?",
        "query": "SELECT SUM ( t2.bathroom_count ) FROM apartment_facilities AS t1 JOIN apartments AS t2 ON t1.apt_id = t2.apt_id WHERE t1.facility_code = \"Gym\"",
        "schema": "CREATE TABLE Apartment_Buildings (building_short_name TEXT, building_id NUMBER, building_full_name TEXT); CREATE TABLE Apartment_Facilities (apt_id NUMBER, facility_code TEXT); CREATE TABLE Apartment_Bookings (apt_id NUMBER); CREATE TABLE Apartments (apt_type_code TEXT, apt_number TEXT, apt_id NUMBER, bathroom_count NUMBER, building_id NUMBER);"
      },
      {
        "question": "How many bedrooms are there in those buildings?",
        "query": "SELECT SUM ( t2.bedroom_count ) FROM apartment_facilities AS t1 JOIN apartments AS t2 ON t1.apt_id = t2.apt_id WHERE t1.facility_code = \"Gym\"",
        "schema": "CREATE TABLE Apartments (building_id NUMBER, apt_id NUMBER, bedroom_count NUMBER, apt_type_code TEXT, bathroom_count NUMBER, apt_number TEXT); CREATE TABLE Apartment_Facilities (facility_code TEXT, apt_id NUMBER); CREATE TABLE Apartment_Bookings (apt_id NUMBER); CREATE TABLE Apartment_Buildings (building_id NUMBER, building_full_name TEXT, building_short_name TEXT);"
      },
      {
        "question": "What is the total number of rooms in those buildings?",
        "query": "SELECT SUM ( t2.room_count ) FROM apartment_facilities AS t1 JOIN apartments AS t2 ON t1.apt_id = t2.apt_id WHERE t1.facility_code = \"Gym\"",
        "schema": "CREATE TABLE Apartments (apt_id NUMBER, room_count TEXT, apt_type_code TEXT, building_id NUMBER, bathroom_count NUMBER, apt_number TEXT, bedroom_count NUMBER); CREATE TABLE Apartment_Buildings (building_short_name TEXT, building_full_name TEXT, building_id NUMBER); CREATE TABLE Apartment_Facilities (facility_code TEXT, apt_id NUMBER); CREATE TABLE Apartment_Bookings (apt_id NUMBER);"
      }
    ],
    [
      {
        "question": "Please show me all the information about each apartment",
        "query": "SELECT * FROM apartments",
        "schema": "CREATE TABLE Apartment_Bookings (apt_booking_id NUMBER, apt_id NUMBER); CREATE TABLE Apartment_Buildings (building_description TEXT, building_short_name TEXT, building_id NUMBER, building_full_name TEXT); CREATE TABLE Apartments (apt_number TEXT, apt_id NUMBER, apt_type_code TEXT);"
      },
      {
        "question": "Now just the info for Suite 634",
        "query": "SELECT * FROM apartment_bookings AS t1 JOIN apartments AS t2 ON t1.apt_id = t2.apt_id WHERE t2.apt_number = \"Suite 634\"",
        "schema": "CREATE TABLE Apartment_Bookings (apt_id NUMBER, apt_booking_id NUMBER); CREATE TABLE Apartments (apt_number TEXT, apt_id NUMBER, apt_type_code TEXT); CREATE TABLE Apartment_Buildings (building_description TEXT, building_full_name TEXT, building_short_name TEXT, building_id NUMBER);"
      },
      {
        "question": "and now just show the booking status code for that suite",
        "query": "SELECT t1.booking_status_code FROM apartment_bookings AS t1 JOIN apartments AS t2 ON t1.apt_id = t2.apt_id WHERE t2.apt_number = \"Suite 634\"",
        "schema": "CREATE TABLE Apartments (apt_type_code TEXT, apt_number TEXT, apt_id NUMBER); CREATE TABLE Apartment_Bookings (booking_status_code TEXT, apt_booking_id NUMBER, apt_id NUMBER); CREATE TABLE Apartment_Buildings (building_full_name TEXT, building_short_name TEXT, building_description TEXT, building_id NUMBER);"
      }
    ],
    [
      {
        "question": "Which buildings are in a studio?",
        "query": "SELECT building_full_name FROM apartment_buildings WHERE building_description = 'Studio'",
        "schema": "CREATE TABLE Apartment_Buildings (building_description TEXT, building_id NUMBER, building_short_name TEXT, building_address TEXT, building_full_name TEXT); CREATE TABLE Apartments (apt_type_code TEXT, apt_id NUMBER, building_id NUMBER);"
      },
      {
        "question": "What are their managers?",
        "query": "SELECT building_manager FROM apartment_buildings WHERE building_description = 'Studio'",
        "schema": "CREATE TABLE Apartments (building_id NUMBER, apt_type_code TEXT, apt_id NUMBER); CREATE TABLE Apartment_Buildings (building_manager TEXT, building_address TEXT, building_short_name TEXT, building_description TEXT, building_id NUMBER, building_full_name TEXT);"
      },
      {
        "question": "Which of the building full names have the word \"court\" in it?",
        "query": "SELECT building_full_name FROM apartment_buildings WHERE building_full_name like '%Court%'",
        "schema": "CREATE TABLE Apartments (apt_type_code TEXT, building_id NUMBER, apt_id NUMBER); CREATE TABLE Apartment_Buildings (building_address TEXT, building_id NUMBER, building_full_name TEXT, building_short_name TEXT, building_description TEXT, building_manager TEXT);"
      }
    ],
    [
      {
        "question": "What dates are these apartments booked for?",
        "query": "SELECT t2.apt_number, t1.booking_start_date, t1.booking_end_date FROM apartment_bookings AS t1 JOIN apartments AS t2 ON t1.apt_id = t2.apt_id WHERE t1.booking_status_code = \"Confirmed\"",
        "schema": "CREATE TABLE Apartments (apt_number TEXT, apt_id NUMBER); CREATE TABLE Apartment_Bookings (apt_id NUMBER, apt_booking_id NUMBER, booking_end_date TIME, booking_start_date TIME, booking_status_code TEXT);"
      },
      {
        "question": "How many of these apartments have 3 bedrooms?",
        "query": "SELECT COUNT ( * ) FROM apartments WHERE apt_number IN ( SELECT DISTINCT t2.apt_number FROM apartment_bookings AS t1 JOIN apartments AS t2 ON t1.apt_id = t2.apt_id WHERE t1.booking_status_code = \"Confirmed\" ) AND bedroom_count = 3",
        "schema": "CREATE TABLE Apartment_Bookings (booking_start_date TIME, booking_end_date TIME, apt_booking_id NUMBER, booking_status_code TEXT, apt_id NUMBER); CREATE TABLE Apartments (bedroom_count NUMBER, apt_number TEXT, apt_id NUMBER);"
      },
      {
        "question": "How many bathrooms are in each of these apartments?",
        "query": "SELECT bathroom_count FROM apartments WHERE apt_number IN ( SELECT DISTINCT t2.apt_number FROM apartment_bookings AS t1 JOIN apartments AS t2 ON t1.apt_id = t2.apt_id WHERE t1.booking_status_code = \"Confirmed\" ) AND bedroom_count = 3",
        "schema": "CREATE TABLE Apartment_Bookings (apt_booking_id NUMBER, booking_end_date TIME, booking_status_code TEXT, booking_start_date TIME, apt_id NUMBER); CREATE TABLE Apartments (bedroom_count NUMBER, bathroom_count NUMBER, apt_id NUMBER, apt_number TEXT, apt_type_code TEXT); CREATE TABLE Apartment_Facilities (apt_id NUMBER);"
      }
    ],
    [
      {
        "question": "How many rooms are in the apartment number suite 645?",
        "query": "SELECT COUNT ( * ) FROM apartments WHERE apt_number = \"Suite 645\"",
        "schema": "CREATE TABLE Apartment_Buildings (building_full_name TEXT, building_id NUMBER); CREATE TABLE Apartment_Bookings (apt_id NUMBER); CREATE TABLE Apartments (room_count TEXT, apt_number TEXT, building_id NUMBER, apt_id NUMBER);"
      },
      {
        "question": "What is the building id of apartment Apt 585?",
        "query": "SELECT building_id FROM apartments WHERE apt_number = \"Apt. 585\"",
        "schema": "CREATE TABLE Apartment_Bookings (apt_id NUMBER); CREATE TABLE Apartment_Buildings (building_short_name TEXT, building_id NUMBER, building_address TEXT, building_full_name TEXT); CREATE TABLE Apartments (apt_number TEXT, apt_id NUMBER, building_id NUMBER, room_count TEXT);"
      },
      {
        "question": "What is the minimum and maximum number of bathrooms of all the departments?",
        "query": "SELECT MIN ( bathroom_count ) , MAX ( bathroom_count ) FROM apartments",
        "schema": "CREATE TABLE Apartments (building_id NUMBER, apt_number TEXT, room_count TEXT, apt_id NUMBER, bathroom_count NUMBER); CREATE TABLE Apartment_Facilities (facility_code TEXT, apt_id NUMBER); CREATE TABLE Apartment_Bookings (apt_id NUMBER); CREATE TABLE Apartment_Buildings (building_address TEXT, building_id NUMBER, building_short_name TEXT, building_full_name TEXT);"
      }
    ],
    [
      {
        "question": "Hello. What are the IDs of guests with gender code Female?",
        "query": "SELECT guest_id FROM guests WHERE gender_code = \"Female\"",
        "schema": "CREATE TABLE Guests (gender_code TEXT, guest_last_name TEXT, guest_first_name TEXT, guest_id NUMBER); CREATE TABLE Apartment_Bookings (guest_id NUMBER);"
      },
      {
        "question": "Show me the start dates of apartment bookings by these IDs please.",
        "query": "SELECT t1.booking_start_date FROM apartment_bookings AS t1 JOIN guests AS t2 ON t1.guest_id = t2.guest_id WHERE t2.gender_code = \"Female\"",
        "schema": "CREATE TABLE Guests (guest_id NUMBER, guest_last_name TEXT, gender_code TEXT, guest_first_name TEXT); CREATE TABLE Apartment_Bookings (apt_id NUMBER, booking_start_date TIME, guest_id NUMBER, apt_booking_id NUMBER); CREATE TABLE Apartments (apt_id NUMBER);"
      },
      {
        "question": "Show me the start dates and end dates of apartment bookings by these IDs please.",
        "query": "SELECT t1.booking_start_date , t1.booking_end_date FROM apartment_bookings AS t1 JOIN guests AS t2 ON t1.guest_id = t2.guest_id WHERE t2.gender_code = \"Female\"",
        "schema": "CREATE TABLE Apartment_Bookings (apt_id NUMBER, apt_booking_id NUMBER, booking_end_date TIME, guest_id NUMBER, booking_start_date TIME); CREATE TABLE Apartments (apt_id NUMBER); CREATE TABLE Guests (guest_id NUMBER, guest_first_name TEXT, gender_code TEXT, guest_last_name TEXT);"
      },
      {
        "question": "Can you give me the apartment ids for the same list?",
        "query": "SELECT t1.apt_id FROM apartment_bookings AS t1 JOIN guests AS t2 ON t1.guest_id = t2.guest_id WHERE t2.gender_code = \"Female\"",
        "schema": "CREATE TABLE Apartment_Bookings (booking_end_date TIME, apt_id NUMBER, apt_booking_id NUMBER, booking_start_date TIME, guest_id NUMBER); CREATE TABLE Guests (guest_id NUMBER, guest_last_name TEXT, gender_code TEXT, guest_first_name TEXT); CREATE TABLE Apartments (apt_id NUMBER);"
      }
    ],
    [
      {
        "question": "Hi - can you please tell me the average room count of all Provisional bookings?",
        "query": "SELECT AVG ( room_count ) FROM apartment_bookings AS t1 JOIN apartments AS t2 ON t1.apt_id = t2.apt_id WHERE t1.booking_status_code = \"Provisional\"",
        "schema": "CREATE TABLE Apartment_Bookings (booking_status_code TEXT, apt_booking_id NUMBER, apt_id NUMBER); CREATE TABLE View_Unit_Status (apt_id NUMBER, apt_booking_id NUMBER); CREATE TABLE Apartments (room_count TEXT, apt_id NUMBER, apt_type_code TEXT, apt_number TEXT);"
      },
      {
        "question": "Great - can you list all apartments with more than one bathroom and more than three bedrooms?",
        "query": "SELECT * FROM apartments WHERE bathroom_count > 1 AND bedroom_count > 3",
        "schema": "CREATE TABLE View_Unit_Status (apt_booking_id NUMBER, apt_id NUMBER); CREATE TABLE Apartment_Bookings (booking_status_code TEXT, apt_booking_id NUMBER, apt_id NUMBER); CREATE TABLE Apartments (apt_number TEXT, room_count TEXT, bathroom_count NUMBER, apt_type_code TEXT, bedroom_count NUMBER, apt_id NUMBER); CREATE TABLE Apartment_Facilities (apt_id NUMBER);"
      },
      {
        "question": "Which apartment has the most bedrooms?",
        "query": "SELECT * FROM apartments ORDER BY bedroom_count DESC LIMIT 1",
        "schema": "CREATE TABLE Apartments (bedroom_count NUMBER, apt_number TEXT, apt_id NUMBER, apt_type_code TEXT, room_count TEXT, bathroom_count NUMBER); CREATE TABLE Apartment_Bookings (apt_id NUMBER, apt_booking_id NUMBER, booking_status_code TEXT); CREATE TABLE View_Unit_Status (apt_booking_id NUMBER, apt_id NUMBER); CREATE TABLE Apartment_Facilities (apt_id NUMBER);"
      },
      {
        "question": "OK - what was the total number of bookings in 2016?",
        "query": "SELECT COUNT ( * ) FROM apartment_bookings WHERE booking_start_date like \"%2016%\"",
        "schema": "CREATE TABLE Apartment_Bookings (booking_status_code TEXT, apt_id NUMBER, booking_start_date TIME, booking_end_date TIME, apt_booking_id NUMBER); CREATE TABLE View_Unit_Status (apt_booking_id NUMBER, apt_id NUMBER); CREATE TABLE Apartment_Facilities (apt_id NUMBER); CREATE TABLE Apartments (apt_id NUMBER, room_count TEXT, apt_type_code TEXT, apt_number TEXT, bedroom_count NUMBER, bathroom_count NUMBER);"
      },
      {
        "question": "How many of those bookings were studio apartments?",
        "query": "SELECT COUNT ( * ) FROM apartment_bookings AS t1 JOIN apartments AS t2 ON t1.apt_id = t2.apt_id WHERE t1.booking_start_date like \"%2016%\" AND t2.apt_type_code = \"Studio\"",
        "schema": "CREATE TABLE Apartment_Facilities (apt_id NUMBER); CREATE TABLE Apartments (apt_type_code TEXT, bathroom_count NUMBER, room_count TEXT, apt_number TEXT, apt_id NUMBER, bedroom_count NUMBER); CREATE TABLE View_Unit_Status (apt_booking_id NUMBER, apt_id NUMBER); CREATE TABLE Apartment_Bookings (apt_id NUMBER, booking_status_code TEXT, booking_start_date TIME, apt_booking_id NUMBER, booking_end_date TIME);"
      }
    ],
    [
      {
        "question": "Can you show me the top 3 highest room counts?",
        "query": "SELECT room_count FROM apartments ORDER BY room_count DESC LIMIT 3",
        "schema": "CREATE TABLE Apartments (bedroom_count NUMBER, room_count TEXT, apt_id NUMBER, bathroom_count NUMBER, apt_number TEXT);"
      },
      {
        "question": "For each apartment, can you tell me the average of the bedroom count, bathroom count, and room count? | Do you mean for each apartment type, find the average of the bedroom count, bathroom count, and room count? | yes",
        "query": "SELECT apt_type_code, AVG ( bathroom_count ) , AVG ( bedroom_count ) , AVG ( room_count ) FROM apartments GROUP BY apt_type_code",
        "schema": "CREATE TABLE Apartments (apt_type_code TEXT, room_count TEXT, bathroom_count NUMBER, bedroom_count NUMBER, apt_number TEXT, apt_id NUMBER);"
      },
      {
        "question": "Can you tell me the average number of rooms for each apartment type code?",
        "query": "SELECT apt_type_code, AVG ( room_count ) FROM apartments GROUP BY apt_type_code",
        "schema": "CREATE TABLE Apartments (apt_number TEXT, bathroom_count NUMBER, apt_type_code TEXT, room_count TEXT, apt_id NUMBER, bedroom_count NUMBER);"
      },
      {
        "question": "Can you sort them in descending order?",
        "query": "SELECT apt_type_code, AVG ( room_count ) FROM apartments GROUP BY apt_type_code ORDER BY AVG ( room_count ) DESC",
        "schema": "CREATE TABLE Apartments (bathroom_count NUMBER, apt_id NUMBER, room_count TEXT, bedroom_count NUMBER, apt_number TEXT, apt_type_code TEXT);"
      },
      {
        "question": "Can you show me just the apartment type codes of the top 3?",
        "query": "SELECT apt_type_code FROM apartments GROUP BY apt_type_code ORDER BY AVG ( room_count ) DESC",
        "schema": "CREATE TABLE Apartments (bedroom_count NUMBER, apt_number TEXT, room_count TEXT, apt_type_code TEXT, bathroom_count NUMBER, apt_id NUMBER);"
      }
    ],
    [
      {
        "question": "What are the apartment type codes?",
        "query": "SELECT apt_type_code FROM apartments",
        "schema": "CREATE TABLE Apartments (apt_id NUMBER, apt_type_code TEXT);"
      },
      {
        "question": "What are the Maximum rooms for each Apartment type code?",
        "query": "SELECT apt_type_code , MAX ( room_count ) FROM apartments GROUP BY apt_type_code",
        "schema": "CREATE TABLE Apartments (apt_id NUMBER, room_count TEXT, apt_type_code TEXT);"
      },
      {
        "question": "What are the Minimum rooms for each Apartment type code?",
        "query": "SELECT apt_type_code , MIN ( room_count ) FROM apartments GROUP BY apt_type_code",
        "schema": "CREATE TABLE Apartments (apt_type_code TEXT, room_count TEXT, apt_id NUMBER);"
      },
      {
        "question": "What is the Apartment type code of building id 808?",
        "query": "SELECT apt_type_code FROM apartments WHERE building_id = 808",
        "schema": "CREATE TABLE Apartments (room_count TEXT, apt_id NUMBER, building_id NUMBER, apt_type_code TEXT); CREATE TABLE Apartment_Buildings (building_id NUMBER);"
      }
    ],
    [
      {
        "question": "What are the facility codes of all the apartments that have more than 4 bedrooms?",
        "query": "SELECT t1.facility_code FROM apartment_facilities AS t1 JOIN apartments AS t2 ON t1.apt_id = t2.apt_id WHERE t2.bedroom_count > 4",
        "schema": "CREATE TABLE Apartments (bedroom_count NUMBER, apt_id NUMBER, apt_type_code TEXT, apt_number TEXT); CREATE TABLE Apartment_Facilities (apt_id NUMBER, facility_code TEXT); CREATE TABLE Apartment_Bookings (apt_id NUMBER);"
      },
      {
        "question": "What are the apartment numbers of those?",
        "query": "SELECT t2.apt_number FROM apartment_facilities AS t1 JOIN apartments AS t2 ON t1.apt_id = t2.apt_id WHERE t2.bedroom_count > 4",
        "schema": "CREATE TABLE Apartment_Bookings (apt_id NUMBER); CREATE TABLE Apartments (bedroom_count NUMBER, apt_number TEXT, apt_id NUMBER, apt_type_code TEXT); CREATE TABLE Apartment_Facilities (facility_code TEXT, apt_id NUMBER);"
      },
      {
        "question": "How many bathrooms do each of those have?",
        "query": "SELECT t2.bathroom_count FROM apartment_facilities AS t1 JOIN apartments AS t2 ON t1.apt_id = t2.apt_id WHERE t2.bedroom_count > 4",
        "schema": "CREATE TABLE Apartment_Bookings (apt_id NUMBER); CREATE TABLE Apartments (apt_number TEXT, apt_id NUMBER, bathroom_count NUMBER, bedroom_count NUMBER, apt_type_code TEXT); CREATE TABLE Apartment_Facilities (facility_code TEXT, apt_id NUMBER);"
      }
    ]
  ],
  "tracking_grants_for_research": [
    [
      {
        "question": "What is the total grant amount of the organizations described as research?",
        "query": "SELECT SUM ( grant_amount ) FROM grants AS t1 JOIN organisations AS t2 ON t1.organisation_id = t2.organisation_id JOIN organisation_types AS t3 ON t2.organisation_type = t3.organisation_type WHERE t3.organisation_type_description = 'Research'",
        "schema": "CREATE TABLE Grants (organisation_id NUMBER, grant_id NUMBER, grant_amount NUMBER); CREATE TABLE Organisations (organisation_details TEXT, organisation_id NUMBER, organisation_type TEXT); CREATE TABLE Projects (organisation_id NUMBER); CREATE TABLE Documents (grant_id NUMBER); CREATE TABLE Organisation_Types (organisation_type TEXT, organisation_type_description TEXT);"
      },
      {
        "question": "What is the grant start date of the organizations described as research?",
        "query": "SELECT grant_start_date FROM grants AS t1 JOIN organisations AS t2 ON t1.organisation_id = t2.organisation_id JOIN organisation_types AS t3 ON t2.organisation_type = t3.organisation_type WHERE t3.organisation_type_description = 'Research'",
        "schema": "CREATE TABLE Organisation_Types (organisation_type_description TEXT, organisation_type TEXT); CREATE TABLE Organisations (organisation_details TEXT, organisation_type TEXT, organisation_id NUMBER); CREATE TABLE Grants (grant_amount NUMBER, organisation_id NUMBER, grant_id NUMBER, grant_start_date TIME); CREATE TABLE Projects (organisation_id NUMBER); CREATE TABLE Documents (grant_id NUMBER);"
      },
      {
        "question": "Show me organization ids for organizations described as research",
        "query": "SELECT t1.organisation_id FROM grants AS t1 JOIN organisations AS t2 ON t1.organisation_id = t2.organisation_id JOIN organisation_types AS t3 ON t2.organisation_type = t3.organisation_type WHERE t3.organisation_type_description = 'Research'",
        "schema": "CREATE TABLE Projects (organisation_id NUMBER); CREATE TABLE Documents (grant_id NUMBER); CREATE TABLE Organisation_Types (organisation_type_description TEXT, organisation_type TEXT); CREATE TABLE Organisations (organisation_id NUMBER, organisation_type TEXT, organisation_details TEXT); CREATE TABLE Grants (grant_start_date TIME, organisation_id NUMBER, grant_id NUMBER, grant_amount NUMBER);"
      }
    ],
    [
      {
        "question": "Which of the document is described with the prefix initial? | Document with type code APP is described with the prefix initial. | Whats is APP document description?",
        "query": "SELECT document_description FROM document_types WHERE document_type_code = \"APP\"",
        "schema": "CREATE TABLE Document_Types (document_description TEXT, document_type_code TEXT); CREATE TABLE Documents (document_id NUMBER, document_type_code TEXT);"
      }
    ],
    [
      {
        "question": "list the \norganisation type",
        "query": "SELECT organisation_type FROM organisation_types",
        "schema": "CREATE TABLE Documents (document_type_code TEXT); CREATE TABLE Organisation_Types (organisation_type TEXT, organisation_type_description TEXT); CREATE TABLE Projects (organisation_id NUMBER); CREATE TABLE Document_Types (document_type_code TEXT); CREATE TABLE Research_Staff (employer_organisation_id NUMBER); CREATE TABLE Organisations (organisation_details TEXT, organisation_id NUMBER, organisation_type TEXT);"
      },
      {
        "question": "how much grant amount in organisation id 10",
        "query": "SELECT COUNT ( grant_id ) FROM grants WHERE organisation_id = 10",
        "schema": "CREATE TABLE Organisation_Types (organisation_type_description TEXT, organisation_type TEXT); CREATE TABLE Documents (grant_id NUMBER, document_type_code TEXT); CREATE TABLE Grants (grant_id NUMBER, grant_amount NUMBER, organisation_id NUMBER); CREATE TABLE Projects (organisation_id NUMBER); CREATE TABLE Research_Staff (employer_organisation_id NUMBER); CREATE TABLE Document_Types (document_type_code TEXT); CREATE TABLE Organisations (organisation_details TEXT, organisation_type TEXT, organisation_id NUMBER);"
      }
    ],
    [
      {
        "question": "What are the result descriptions of the project whose detail is \"sint\"?",
        "query": "SELECT t1.outcome_description FROM research_outcomes AS t1 JOIN project_outcomes AS t2 ON t1.outcome_code = t2.outcome_code JOIN projects AS t3 ON t2.project_id = t3.project_id WHERE t3.project_details = 'sint'",
        "schema": "CREATE TABLE Project_Outcomes (outcome_code TEXT, project_id NUMBER, outcome_details TEXT); CREATE TABLE Project_Staff (project_id NUMBER, staff_id NUMBER); CREATE TABLE Projects (project_details TEXT, organisation_id NUMBER, project_id NUMBER); CREATE TABLE Tasks (project_id NUMBER); CREATE TABLE Research_Outcomes (outcome_description TEXT, outcome_code TEXT);"
      },
      {
        "question": "What are the project details of all of those project ids?",
        "query": "SELECT t2.project_id, t3.project_details FROM research_outcomes AS t1 JOIN project_outcomes AS t2 ON t1.outcome_code = t2.outcome_code JOIN projects AS t3 ON t2.project_id = t3.project_id WHERE t2.outcome_code = 'Patent'",
        "schema": "CREATE TABLE Project_Staff (staff_id NUMBER, project_id NUMBER); CREATE TABLE Project_Outcomes (outcome_code TEXT, project_id NUMBER, outcome_details TEXT); CREATE TABLE Tasks (project_id NUMBER); CREATE TABLE Research_Outcomes (outcome_code TEXT, outcome_description TEXT); CREATE TABLE Projects (project_id NUMBER, project_details TEXT, organisation_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show the role description of the project staff involved in the most number of project outcomes?",
        "query": "SELECT t1.role_description FROM staff_roles AS t1 JOIN project_staff AS t2 ON t1.role_code = t2.role_code JOIN project_outcomes AS t3 ON t2.project_id = t3.project_id GROUP BY t2.staff_id ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Research_Staff (staff_id NUMBER); CREATE TABLE Project_Outcomes (project_id NUMBER, outcome_code TEXT, outcome_details TEXT); CREATE TABLE Staff_Roles (role_description TEXT, role_code TEXT); CREATE TABLE Project_Staff (project_id NUMBER, staff_id NUMBER, role_code TEXT); CREATE TABLE Tasks (project_id NUMBER); CREATE TABLE Projects (project_id NUMBER, project_details TEXT); CREATE TABLE Research_Outcomes (outcome_description TEXT, outcome_code TEXT);"
      },
      {
        "question": "Show the staff ids of the project staff involved in the most number of project outcomes?",
        "query": "SELECT t2.staff_id FROM staff_roles AS t1 JOIN project_staff AS t2 ON t1.role_code = t2.role_code JOIN project_outcomes AS t3 ON t2.project_id = t3.project_id GROUP BY t2.staff_id ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Projects (project_id NUMBER, project_details TEXT); CREATE TABLE Tasks (project_id NUMBER); CREATE TABLE Staff_Roles (role_code TEXT, role_description TEXT); CREATE TABLE Project_Outcomes (project_id NUMBER, outcome_details TEXT, outcome_code TEXT); CREATE TABLE Research_Staff (staff_id NUMBER); CREATE TABLE Project_Staff (staff_id NUMBER, project_id NUMBER, role_code TEXT); CREATE TABLE Research_Outcomes (outcome_code TEXT, outcome_description TEXT);"
      },
      {
        "question": "What are the project ids that staff member worked on?",
        "query": "SELECT project_id FROM project_staff WHERE staff_id = '5137097.0'",
        "schema": "CREATE TABLE Tasks (project_id NUMBER); CREATE TABLE Projects (project_id NUMBER, project_details TEXT); CREATE TABLE Project_Outcomes (project_id NUMBER, outcome_code TEXT, outcome_details TEXT); CREATE TABLE Project_Staff (project_id NUMBER, role_code TEXT, staff_id NUMBER); CREATE TABLE Research_Outcomes (outcome_code TEXT, outcome_description TEXT); CREATE TABLE Research_Staff (staff_id NUMBER); CREATE TABLE Staff_Roles (role_code TEXT, role_description TEXT);"
      },
      {
        "question": "What are the date from and date to of that project?",
        "query": "SELECT date_from, date_to FROM project_staff WHERE project_id = '7'",
        "schema": "CREATE TABLE Research_Outcomes (outcome_description TEXT, outcome_code TEXT); CREATE TABLE Tasks (project_id NUMBER); CREATE TABLE Research_Staff (staff_id NUMBER); CREATE TABLE Project_Staff (role_code TEXT, date_from TIME, date_to TIME, staff_id NUMBER, project_id NUMBER); CREATE TABLE Projects (project_details TEXT, project_id NUMBER); CREATE TABLE Staff_Roles (role_description TEXT, role_code TEXT); CREATE TABLE Project_Outcomes (outcome_details TEXT, outcome_code TEXT, project_id NUMBER);"
      },
      {
        "question": "What is the outcome code for that project?",
        "query": "SELECT outcome_code FROM project_outcomes WHERE project_id = '7'",
        "schema": "CREATE TABLE Project_Staff (staff_id NUMBER, project_id NUMBER, date_to TIME, date_from TIME, role_code TEXT); CREATE TABLE Research_Outcomes (outcome_description TEXT, outcome_code TEXT); CREATE TABLE Tasks (project_id NUMBER); CREATE TABLE Research_Staff (staff_id NUMBER); CREATE TABLE Staff_Roles (role_description TEXT, role_code TEXT); CREATE TABLE Project_Outcomes (outcome_code TEXT, outcome_details TEXT, project_id NUMBER); CREATE TABLE Projects (project_id NUMBER, project_details TEXT);"
      }
    ],
    [
      {
        "question": "tell me the staff details of staff id 1 ?",
        "query": "SELECT staff_details FROM research_staff WHERE staff_id = 1",
        "schema": "CREATE TABLE Research_Staff (staff_details TEXT, staff_id NUMBER); CREATE TABLE Tasks (project_id NUMBER, task_details TEXT); CREATE TABLE Staff_Roles (role_code TEXT, role_description TEXT); CREATE TABLE Projects (project_id NUMBER, project_details TEXT); CREATE TABLE Project_Staff (staff_id NUMBER, other_details TEXT, project_id NUMBER, role_code TEXT);"
      },
      {
        "question": "Tell me the organization type of organisation_id 1?",
        "query": "SELECT organisation_type FROM organisations WHERE organisation_id = 1",
        "schema": "CREATE TABLE Project_Staff (staff_id NUMBER, other_details TEXT, project_id NUMBER, role_code TEXT); CREATE TABLE Tasks (task_details TEXT, project_id NUMBER); CREATE TABLE Grants (organisation_id NUMBER); CREATE TABLE Organisation_Types (organisation_type TEXT, organisation_type_description TEXT); CREATE TABLE Projects (project_details TEXT, project_id NUMBER); CREATE TABLE Staff_Roles (role_description TEXT, role_code TEXT); CREATE TABLE Research_Staff (staff_id NUMBER, staff_details TEXT, employer_organisation_id NUMBER); CREATE TABLE Organisations (organisation_details TEXT, organisation_id NUMBER, organisation_type TEXT);"
      },
      {
        "question": "Which organisation type hires most research staff ?",
        "query": "SELECT t1.organisation_type FROM organisations AS t1 JOIN research_staff AS t2 ON t1.organisation_id = t2.employer_organisation_id GROUP BY t1.organisation_type ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Grants (organisation_id NUMBER); CREATE TABLE Organisations (organisation_details TEXT, organisation_type TEXT, organisation_id NUMBER); CREATE TABLE Project_Staff (project_id NUMBER, role_code TEXT, other_details TEXT, staff_id NUMBER); CREATE TABLE Staff_Roles (role_code TEXT, role_description TEXT); CREATE TABLE Tasks (project_id NUMBER, task_details TEXT); CREATE TABLE Research_Staff (staff_details TEXT, staff_id NUMBER, employer_organisation_id NUMBER); CREATE TABLE Organisation_Types (organisation_type_description TEXT, organisation_type TEXT); CREATE TABLE Projects (project_details TEXT, project_id NUMBER);"
      }
    ],
    [
      {
        "question": "What is the send date of document Id 2?",
        "query": "SELECT sent_date FROM documents WHERE document_id = 2",
        "schema": "CREATE TABLE Project_Staff (date_to TIME); CREATE TABLE Documents (response_received_date TIME, sent_date TIME, document_id NUMBER);"
      },
      {
        "question": "What is the organisation details of Id 3? | Do you mean the organisation id of grant id 3? | yes",
        "query": "SELECT organisation_id FROM grants WHERE grant_id = 3",
        "schema": "CREATE TABLE Organisation_Types (organisation_type TEXT, organisation_type_description TEXT); CREATE TABLE Grants (grant_id NUMBER, organisation_id NUMBER); CREATE TABLE Organisations (organisation_id NUMBER, organisation_details TEXT, organisation_type TEXT); CREATE TABLE Projects (organisation_id NUMBER); CREATE TABLE Project_Staff (date_to TIME); CREATE TABLE Documents (grant_id NUMBER, sent_date TIME, response_received_date TIME, document_id NUMBER);"
      },
      {
        "question": "What is the grant end date of grant id 3?",
        "query": "SELECT grant_end_date FROM grants WHERE grant_id = 3",
        "schema": "CREATE TABLE Project_Staff (date_to TIME); CREATE TABLE Projects (organisation_id NUMBER); CREATE TABLE Documents (document_id NUMBER, grant_id NUMBER, sent_date TIME, response_received_date TIME); CREATE TABLE Organisation_Types (organisation_type_description TEXT, organisation_type TEXT); CREATE TABLE Grants (organisation_id NUMBER, grant_id NUMBER, grant_end_date TIME, grant_start_date TIME); CREATE TABLE Organisations (organisation_details TEXT, organisation_id NUMBER, organisation_type TEXT);"
      }
    ],
    [
      {
        "question": "What is the organisation ID of the organisation with grant amount of 4094.542??",
        "query": "SELECT organisation_id FROM grants WHERE grant_amount = 4094.542",
        "schema": "CREATE TABLE Organisation_Types (organisation_type TEXT); CREATE TABLE Project_Staff (project_id NUMBER, staff_id NUMBER); CREATE TABLE Documents (grant_id NUMBER); CREATE TABLE Tasks (project_id NUMBER); CREATE TABLE Grants (organisation_id NUMBER, grant_id NUMBER, grant_amount NUMBER); CREATE TABLE Organisations (organisation_details TEXT, organisation_type TEXT, organisation_id NUMBER); CREATE TABLE Projects (organisation_id NUMBER, project_id NUMBER); CREATE TABLE Research_Staff (employer_organisation_id NUMBER);"
      },
      {
        "question": "What is its grant start date?",
        "query": "SELECT grant_start_date FROM grants WHERE grant_amount = 4094.542",
        "schema": "CREATE TABLE Documents (grant_id NUMBER); CREATE TABLE Projects (project_id NUMBER, organisation_id NUMBER); CREATE TABLE Grants (organisation_id NUMBER, grant_amount NUMBER, grant_id NUMBER, grant_start_date TIME); CREATE TABLE Organisations (organisation_details TEXT, organisation_id NUMBER, organisation_type TEXT); CREATE TABLE Project_Staff (staff_id NUMBER, project_id NUMBER); CREATE TABLE Tasks (project_id NUMBER); CREATE TABLE Organisation_Types (organisation_type TEXT); CREATE TABLE Research_Staff (employer_organisation_id NUMBER);"
      },
      {
        "question": "What about its end date?",
        "query": "SELECT grant_end_date FROM grants WHERE grant_amount = 4094.542",
        "schema": "CREATE TABLE Project_Staff (staff_id NUMBER, project_id NUMBER); CREATE TABLE Organisation_Types (organisation_type TEXT); CREATE TABLE Projects (organisation_id NUMBER, project_id NUMBER); CREATE TABLE Documents (grant_id NUMBER); CREATE TABLE Grants (grant_start_date TIME, grant_id NUMBER, organisation_id NUMBER, grant_end_date TIME, grant_amount NUMBER); CREATE TABLE Organisations (organisation_details TEXT, organisation_id NUMBER, organisation_type TEXT); CREATE TABLE Tasks (project_id NUMBER); CREATE TABLE Research_Staff (employer_organisation_id NUMBER);"
      },
      {
        "question": "What is the grant amount of the organisation with the id 14?",
        "query": "SELECT grant_amount FROM grants WHERE organisation_id = 14",
        "schema": "CREATE TABLE Tasks (project_id NUMBER); CREATE TABLE Organisations (organisation_type TEXT, organisation_id NUMBER, organisation_details TEXT); CREATE TABLE Research_Staff (employer_organisation_id NUMBER); CREATE TABLE Projects (project_id NUMBER, organisation_id NUMBER); CREATE TABLE Organisation_Types (organisation_type TEXT); CREATE TABLE Project_Staff (staff_id NUMBER, project_id NUMBER); CREATE TABLE Grants (grant_end_date TIME, organisation_id NUMBER, grant_id NUMBER, grant_start_date TIME, grant_amount NUMBER); CREATE TABLE Documents (grant_id NUMBER);"
      }
    ],
    [
      {
        "question": "Which grants are described as 'regular'?",
        "query": "SELECT * FROM grants AS t1 JOIN documents AS t2 ON t1.grant_id = t2.grant_id JOIN document_types AS t3 ON t2.document_type_code = t3.document_type_code WHERE t3.document_description = 'Regular'",
        "schema": "CREATE TABLE Organisation_Types (organisation_type TEXT, organisation_type_description TEXT); CREATE TABLE Grants (organisation_id NUMBER, other_details TEXT, grant_id NUMBER); CREATE TABLE Documents (document_type_code TEXT, grant_id NUMBER); CREATE TABLE Document_Types (document_description TEXT, document_type_code TEXT);"
      },
      {
        "question": "Which grants are described both 'regular' and 'initial application'?",
        "query": "SELECT * FROM grants AS t1 JOIN documents AS t2 ON t1.grant_id = t2.grant_id JOIN document_types AS t3 ON t2.document_type_code = t3.document_type_code WHERE t3.document_description = 'Regular' INTERSECT SELECT * FROM grants AS t1 JOIN documents AS t2 ON t1.grant_id = t2.grant_id JOIN document_types AS t3 ON t2.document_type_code = t3.document_type_code WHERE t3.document_description = 'Initial Application'",
        "schema": "CREATE TABLE Grants (other_details TEXT, organisation_id NUMBER, grant_id NUMBER); CREATE TABLE Organisation_Types (organisation_type_description TEXT, organisation_type TEXT); CREATE TABLE Documents (document_type_code TEXT, document_id NUMBER, grant_id NUMBER); CREATE TABLE Document_Types (document_description TEXT, document_type_code TEXT);"
      },
      {
        "question": "Can you show me the start date for all these grants?",
        "query": "SELECT t1.grant_start_date FROM grants AS t1 JOIN documents AS t2 ON t1.grant_id = t2.grant_id JOIN document_types AS t3 ON t2.document_type_code = t3.document_type_code WHERE t3.document_description = 'Regular' INTERSECT SELECT t1.grant_start_date FROM grants AS t1 JOIN documents AS t2 ON t1.grant_id = t2.grant_id JOIN document_types AS t3 ON t2.document_type_code = t3.document_type_code WHERE t3.document_description = 'Initial Application'",
        "schema": "CREATE TABLE Organisation_Types (organisation_type TEXT, organisation_type_description TEXT); CREATE TABLE Documents (document_type_code TEXT, grant_id NUMBER, document_id NUMBER); CREATE TABLE Grants (organisation_id NUMBER, grant_id NUMBER, other_details TEXT, grant_start_date TIME); CREATE TABLE Document_Types (document_type_code TEXT, document_description TEXT);"
      }
    ],
    [
      {
        "question": "Can you list all document descriptions that contain the word \"Initial\"?",
        "query": "SELECT document_description FROM document_types WHERE document_description LIKE 'Initial%'",
        "schema": "CREATE TABLE Documents (document_type_code TEXT, grant_id NUMBER, document_id NUMBER); CREATE TABLE Document_Types (document_type_code TEXT, document_description TEXT);"
      },
      {
        "question": "Can you list the document type code associated with that document description?",
        "query": "SELECT document_type_code FROM document_types WHERE document_description LIKE 'Initial%'",
        "schema": "CREATE TABLE Documents (grant_id NUMBER, document_type_code TEXT, document_id NUMBER); CREATE TABLE Document_Types (document_type_code TEXT, document_description TEXT);"
      },
      {
        "question": "Are there any other document type codes associated with a description that contains the word \"initial\"?",
        "query": "SELECT document_type_code FROM document_types WHERE document_description LIKE 'Initial%'",
        "schema": "CREATE TABLE Document_Types (document_type_code TEXT, document_description TEXT); CREATE TABLE Documents (grant_id NUMBER, document_id NUMBER, document_type_code TEXT);"
      }
    ],
    [
      {
        "question": "Hello there!  Which roll code on this list is the most common?",
        "query": "SELECT role_code FROM project_staff GROUP BY role_code ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Project_Staff (role_code TEXT, staff_id NUMBER, project_id NUMBER); CREATE TABLE Projects (project_id NUMBER);"
      },
      {
        "question": "Great!  Can you tell me how many instances of role code \"researcher\" there are?",
        "query": "SELECT COUNT ( * ) FROM project_staff WHERE role_code = 'researcher'",
        "schema": "CREATE TABLE Projects (project_id NUMBER); CREATE TABLE Project_Staff (role_code TEXT, project_id NUMBER, staff_id NUMBER); CREATE TABLE Staff_Roles (role_description TEXT, role_code TEXT); CREATE TABLE Research_Staff (staff_details TEXT, staff_id NUMBER);"
      },
      {
        "question": "Excellent!  Can you now list for me all of the staff IDs that have researcher as their role code?",
        "query": "SELECT staff_id FROM project_staff WHERE role_code = 'researcher'",
        "schema": "CREATE TABLE Research_Staff (staff_details TEXT, staff_id NUMBER); CREATE TABLE Staff_Roles (role_code TEXT, role_description TEXT); CREATE TABLE Projects (project_id NUMBER); CREATE TABLE Project_Staff (project_id NUMBER, staff_id NUMBER, role_code TEXT);"
      }
    ],
    [
      {
        "question": "What were the dates that APP sent their grants?",
        "query": "SELECT sent_date FROM documents WHERE document_type_code = \"APP\"",
        "schema": "CREATE TABLE Documents (grant_id NUMBER, response_received_date TIME, sent_date TIME, document_type_code TEXT); CREATE TABLE Project_Staff (date_to TIME); CREATE TABLE Grants (grant_start_date TIME, grant_end_date TIME, organisation_id NUMBER, grant_id NUMBER);"
      },
      {
        "question": "Ah. And how many grants can APP have total?",
        "query": "SELECT COUNT ( grant_id ) FROM documents WHERE document_type_code = \"APP\"",
        "schema": "CREATE TABLE Project_Staff (date_to TIME); CREATE TABLE Document_Types (document_type_code TEXT); CREATE TABLE Documents (document_type_code TEXT, sent_date TIME, document_id NUMBER, response_received_date TIME, grant_id NUMBER); CREATE TABLE Grants (organisation_id NUMBER, grant_start_date TIME, grant_id NUMBER, grant_amount NUMBER, grant_end_date TIME);"
      },
      {
        "question": "No, I mean what is the maximum number of grants that APP can have?",
        "query": "SELECT MAX ( grant_id ) FROM documents WHERE document_type_code = \"APP\"",
        "schema": "CREATE TABLE Project_Staff (date_to TIME); CREATE TABLE Documents (document_type_code TEXT, response_received_date TIME, grant_id NUMBER, sent_date TIME, document_id NUMBER); CREATE TABLE Grants (grant_end_date TIME, grant_amount NUMBER, grant_id NUMBER, grant_start_date TIME, organisation_id NUMBER); CREATE TABLE Document_Types (document_type_code TEXT);"
      },
      {
        "question": "I see. Can you list the id and number for every grand that APP has?",
        "query": "SELECT grant_id FROM documents WHERE document_type_code = \"APP\"",
        "schema": "CREATE TABLE Documents (grant_id NUMBER, response_received_date TIME, document_id NUMBER, sent_date TIME, document_type_code TEXT); CREATE TABLE Project_Staff (date_to TIME); CREATE TABLE Document_Types (document_type_code TEXT); CREATE TABLE Grants (grant_start_date TIME, grant_end_date TIME, grant_id NUMBER, grant_amount NUMBER, organisation_id NUMBER);"
      }
    ],
    [
      {
        "question": "What type of organizations are there?",
        "query": "SELECT organisation_type FROM organisation_types",
        "schema": "CREATE TABLE Organisations (organisation_type TEXT, organisation_id NUMBER, organisation_details TEXT); CREATE TABLE Projects (organisation_id NUMBER, project_id NUMBER); CREATE TABLE Research_Staff (employer_organisation_id NUMBER); CREATE TABLE Grants (organisation_id NUMBER); CREATE TABLE Project_Staff (staff_id NUMBER, project_id NUMBER); CREATE TABLE Organisation_Types (organisation_type TEXT, organisation_type_description TEXT); CREATE TABLE Document_Types (document_type_code TEXT); CREATE TABLE Documents (document_type_code TEXT);"
      },
      {
        "question": "And what is the organization ids detailed as \"quo\"?",
        "query": "SELECT organisation_id FROM organisations WHERE organisation_details = 'quo'",
        "schema": "CREATE TABLE Research_Staff (employer_organisation_id NUMBER); CREATE TABLE Grants (organisation_id NUMBER); CREATE TABLE Organisation_Types (organisation_type_description TEXT, organisation_type TEXT); CREATE TABLE Documents (document_type_code TEXT); CREATE TABLE Document_Types (document_type_code TEXT); CREATE TABLE Project_Staff (project_id NUMBER, staff_id NUMBER); CREATE TABLE Projects (project_id NUMBER, organisation_id NUMBER); CREATE TABLE Organisations (organisation_type TEXT, organisation_id NUMBER, organisation_details TEXT);"
      },
      {
        "question": "And what is this organization's type?",
        "query": "SELECT t1.organisation_type FROM organisation_types AS t1 JOIN organisations AS t2 ON t1.organisation_type = t2.organisation_type WHERE t2.organisation_details = 'quo'",
        "schema": "CREATE TABLE Document_Types (document_type_code TEXT); CREATE TABLE Grants (organisation_id NUMBER); CREATE TABLE Research_Staff (employer_organisation_id NUMBER); CREATE TABLE Organisation_Types (organisation_type_description TEXT, organisation_type TEXT); CREATE TABLE Documents (document_type_code TEXT); CREATE TABLE Projects (organisation_id NUMBER, project_id NUMBER); CREATE TABLE Project_Staff (project_id NUMBER, staff_id NUMBER); CREATE TABLE Organisations (organisation_details TEXT, organisation_id NUMBER, organisation_type TEXT);"
      },
      {
        "question": "And what is the total number of  RES organizations?",
        "query": "SELECT COUNT ( * ) FROM organisations WHERE organisation_type = 'RES'",
        "schema": "CREATE TABLE Research_Staff (employer_organisation_id NUMBER); CREATE TABLE Project_Staff (project_id NUMBER, staff_id NUMBER); CREATE TABLE Documents (document_type_code TEXT); CREATE TABLE Organisations (organisation_id NUMBER, organisation_details TEXT, organisation_type TEXT); CREATE TABLE Projects (organisation_id NUMBER, project_id NUMBER); CREATE TABLE Organisation_Types (organisation_type TEXT, organisation_type_description TEXT); CREATE TABLE Grants (organisation_id NUMBER); CREATE TABLE Document_Types (document_type_code TEXT);"
      }
    ],
    [
      {
        "question": "How many projects are there?",
        "query": "SELECT COUNT ( * ) FROM projects",
        "schema": "CREATE TABLE Research_Staff (staff_id NUMBER); CREATE TABLE Project_Outcomes (project_id NUMBER); CREATE TABLE Projects (project_id NUMBER, organisation_id NUMBER, project_details TEXT); CREATE TABLE Organisations (organisation_id NUMBER); CREATE TABLE Tasks (task_id NUMBER, project_id NUMBER); CREATE TABLE Project_Staff (role_code TEXT, staff_id NUMBER, project_id NUMBER);"
      },
      {
        "question": "How many of those projects did not hire anyone for a researcher role?",
        "query": "SELECT COUNT ( project_id ) FROM projects WHERE project_id NOT IN ( SELECT project_id FROM project_staff WHERE role_code = 'researcher' )",
        "schema": "CREATE TABLE Tasks (project_id NUMBER, task_id NUMBER); CREATE TABLE Staff_Roles (role_code TEXT); CREATE TABLE Project_Staff (role_code TEXT, staff_id NUMBER, project_id NUMBER); CREATE TABLE Projects (project_details TEXT, organisation_id NUMBER, project_id NUMBER); CREATE TABLE Research_Staff (staff_id NUMBER); CREATE TABLE Project_Outcomes (project_id NUMBER); CREATE TABLE Organisations (organisation_id NUMBER);"
      },
      {
        "question": "What are the details of those projects?",
        "query": "SELECT project_details FROM projects WHERE project_id NOT IN ( SELECT project_id FROM project_staff WHERE role_code = 'researcher' )",
        "schema": "CREATE TABLE Staff_Roles (role_code TEXT); CREATE TABLE Tasks (project_id NUMBER, task_id NUMBER); CREATE TABLE Projects (project_id NUMBER, organisation_id NUMBER, project_details TEXT); CREATE TABLE Project_Outcomes (project_id NUMBER); CREATE TABLE Project_Staff (project_id NUMBER, staff_id NUMBER, other_details TEXT, role_code TEXT); CREATE TABLE Research_Staff (staff_id NUMBER, staff_details TEXT); CREATE TABLE Organisations (organisation_id NUMBER);"
      }
    ],
    [
      {
        "question": "Can you tell me the number of research staff in each organisation?",
        "query": "SELECT employer_organisation_id , COUNT ( * ) FROM research_staff GROUP BY employer_organisation_id",
        "schema": "CREATE TABLE Staff_Roles (role_code TEXT); CREATE TABLE Organisation_Types (organisation_type_description TEXT, organisation_type TEXT); CREATE TABLE Grants (organisation_id NUMBER); CREATE TABLE Project_Staff (role_code TEXT, staff_id NUMBER); CREATE TABLE Organisations (organisation_id NUMBER, organisation_details TEXT, organisation_type TEXT); CREATE TABLE Research_Staff (staff_id NUMBER, staff_details TEXT, employer_organisation_id NUMBER);"
      },
      {
        "question": "What is the organisation type for each organisation?",
        "query": "SELECT organisation_type FROM organisations",
        "schema": "CREATE TABLE Research_Staff (staff_id NUMBER, staff_details TEXT, employer_organisation_id NUMBER); CREATE TABLE Project_Staff (role_code TEXT, staff_id NUMBER); CREATE TABLE Organisation_Types (organisation_type TEXT, organisation_type_description TEXT); CREATE TABLE Grants (organisation_id NUMBER); CREATE TABLE Organisations (organisation_id NUMBER, organisation_type TEXT, organisation_details TEXT); CREATE TABLE Staff_Roles (role_code TEXT);"
      },
      {
        "question": "Who are the staff for the organisation with id 5? | Do you mean the id of the staffs for orginisation with id 5? | Yes, that would be fine.",
        "query": "SELECT staff_id FROM research_staff WHERE employer_organisation_id = 5",
        "schema": "CREATE TABLE Staff_Roles (role_code TEXT); CREATE TABLE Organisations (organisation_type TEXT, organisation_id NUMBER, organisation_details TEXT); CREATE TABLE Grants (organisation_id NUMBER); CREATE TABLE Project_Staff (staff_id NUMBER, role_code TEXT); CREATE TABLE Research_Staff (staff_details TEXT, employer_organisation_id NUMBER, staff_id NUMBER); CREATE TABLE Organisation_Types (organisation_type TEXT, organisation_type_description TEXT);"
      }
    ],
    [
      {
        "question": "Which organization hired the most research staff?",
        "query": "SELECT * FROM organisations AS t1 JOIN research_staff AS t2 ON t1.organisation_id = t2.employer_organisation_id GROUP BY t1.organisation_id ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Grants (organisation_id NUMBER); CREATE TABLE Research_Staff (employer_organisation_id NUMBER, staff_details TEXT, staff_id NUMBER); CREATE TABLE Organisation_Types (organisation_type TEXT, organisation_type_description TEXT); CREATE TABLE Organisations (organisation_type TEXT, organisation_details TEXT, organisation_id NUMBER); CREATE TABLE Project_Staff (role_code TEXT, staff_id NUMBER);"
      },
      {
        "question": "Can you give me just the organization id?",
        "query": "SELECT t1.organisation_id FROM organisations AS t1 JOIN research_staff AS t2 ON t1.organisation_id = t2.employer_organisation_id GROUP BY t1.organisation_id ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Organisations (organisation_id NUMBER, organisation_details TEXT, organisation_type TEXT); CREATE TABLE Project_Staff (staff_id NUMBER, role_code TEXT); CREATE TABLE Organisation_Types (organisation_type TEXT, organisation_type_description TEXT); CREATE TABLE Grants (organisation_id NUMBER); CREATE TABLE Research_Staff (staff_details TEXT, staff_id NUMBER, employer_organisation_id NUMBER);"
      },
      {
        "question": "great, can you give me the organization type and detail too?",
        "query": "SELECT t1.organisation_id , t1.organisation_type , t1.organisation_details FROM organisations AS t1 JOIN research_staff AS t2 ON t1.organisation_id = t2.employer_organisation_id GROUP BY t1.organisation_id ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Grants (organisation_id NUMBER); CREATE TABLE Project_Staff (role_code TEXT, staff_id NUMBER); CREATE TABLE Research_Staff (staff_id NUMBER, employer_organisation_id NUMBER, staff_details TEXT); CREATE TABLE Organisation_Types (organisation_type TEXT, organisation_type_description TEXT); CREATE TABLE Organisations (organisation_id NUMBER, organisation_details TEXT, organisation_type TEXT);"
      }
    ],
    [
      {
        "question": "Project details of project ID 1?",
        "query": "SELECT project_details FROM projects WHERE project_id = 1",
        "schema": "CREATE TABLE Grants (other_details TEXT); CREATE TABLE Research_Staff (staff_details TEXT, staff_id NUMBER); CREATE TABLE Projects (organisation_id NUMBER, project_details TEXT, project_id NUMBER); CREATE TABLE Project_Staff (project_id NUMBER, staff_id NUMBER); CREATE TABLE Project_Outcomes (outcome_details TEXT, project_id NUMBER); CREATE TABLE Documents (document_id NUMBER, other_details TEXT); CREATE TABLE Tasks (task_details TEXT, project_id NUMBER);"
      },
      {
        "question": "Which project have no outcome? | so  what would  you  want  to  know about the project have no outcome | List the project details of above?",
        "query": "SELECT project_details FROM projects WHERE project_id NOT IN ( SELECT project_id FROM project_outcomes )",
        "schema": "CREATE TABLE Project_Staff (project_id NUMBER, staff_id NUMBER); CREATE TABLE Research_Staff (staff_details TEXT, staff_id NUMBER); CREATE TABLE Grants (other_details TEXT); CREATE TABLE Project_Outcomes (outcome_details TEXT, project_id NUMBER); CREATE TABLE Documents (document_id NUMBER, other_details TEXT); CREATE TABLE Projects (project_details TEXT, organisation_id NUMBER, project_id NUMBER); CREATE TABLE Tasks (project_id NUMBER, task_details TEXT);"
      },
      {
        "question": "Organisation ID of project ID 2?",
        "query": "SELECT organisation_id FROM projects WHERE project_id = 2",
        "schema": "CREATE TABLE Documents (other_details TEXT, document_id NUMBER); CREATE TABLE Project_Outcomes (outcome_details TEXT, outcome_code TEXT, project_id NUMBER); CREATE TABLE Projects (project_details TEXT, organisation_id NUMBER, project_id NUMBER); CREATE TABLE Project_Staff (project_id NUMBER, staff_id NUMBER); CREATE TABLE Research_Staff (staff_details TEXT, staff_id NUMBER); CREATE TABLE Grants (organisation_id NUMBER, other_details TEXT); CREATE TABLE Organisations (organisation_id NUMBER, organisation_details TEXT, organisation_type TEXT); CREATE TABLE Tasks (task_details TEXT, project_id NUMBER);"
      }
    ],
    [
      {
        "question": "show the outcome code in the Table Name: Project Outcomes",
        "query": "SELECT DISTINCT outcome_code FROM project_outcomes",
        "schema": "CREATE TABLE Projects (project_id NUMBER); CREATE TABLE Project_Outcomes (project_id NUMBER, outcome_code TEXT, outcome_details TEXT); CREATE TABLE Project_Staff (project_id NUMBER); CREATE TABLE Tasks (project_id NUMBER); CREATE TABLE Research_Outcomes (outcome_code TEXT);"
      },
      {
        "question": "Show the outcome description of the Table Name: Research Outcomes",
        "query": "SELECT outcome_description FROM research_outcomes",
        "schema": "CREATE TABLE Tasks (project_id NUMBER); CREATE TABLE Research_Outcomes (outcome_code TEXT, outcome_description TEXT); CREATE TABLE Projects (project_id NUMBER); CREATE TABLE Project_Staff (project_id NUMBER); CREATE TABLE Project_Outcomes (outcome_details TEXT, project_id NUMBER, outcome_code TEXT);"
      },
      {
        "question": "Show the project details of the Table Name: Projects",
        "query": "SELECT project_details FROM projects",
        "schema": "CREATE TABLE Tasks (project_id NUMBER); CREATE TABLE Research_Outcomes (outcome_description TEXT, outcome_code TEXT); CREATE TABLE Projects (project_id NUMBER, project_details TEXT); CREATE TABLE Project_Staff (project_id NUMBER); CREATE TABLE Project_Outcomes (outcome_code TEXT, project_id NUMBER, outcome_details TEXT);"
      },
      {
        "question": "Show the\toutcome details of the Table Name: Project Outcomes",
        "query": "SELECT outcome_details FROM project_outcomes",
        "schema": "CREATE TABLE Projects (project_details TEXT, project_id NUMBER); CREATE TABLE Research_Outcomes (outcome_description TEXT, outcome_code TEXT); CREATE TABLE Project_Staff (project_id NUMBER); CREATE TABLE Tasks (project_id NUMBER); CREATE TABLE Project_Outcomes (project_id NUMBER, outcome_details TEXT, outcome_code TEXT);"
      },
      {
        "question": "List the project details of the projects with the research outcome described with substring 'published'.",
        "query": "SELECT t1.project_details FROM projects AS t1 JOIN project_outcomes AS t2 ON t1.project_id = t2.project_id JOIN research_outcomes AS t3 ON t2.outcome_code = t3.outcome_code WHERE t3.outcome_description LIKE '%Published%'",
        "schema": "CREATE TABLE Project_Outcomes (project_id NUMBER, outcome_details TEXT, outcome_code TEXT); CREATE TABLE Tasks (project_id NUMBER); CREATE TABLE Project_Staff (project_id NUMBER); CREATE TABLE Projects (project_id NUMBER, project_details TEXT); CREATE TABLE Research_Outcomes (outcome_code TEXT, outcome_description TEXT);"
      }
    ],
    [
      {
        "question": "For the documents with the description \"Regular\", what are all of their response received dates?",
        "query": "SELECT t1.response_received_date FROM documents AS t1 JOIN document_types AS t2 ON t1.document_type_code = t2.document_type_code JOIN grants AS t3 ON t1.grant_id = t3.grant_id WHERE t2.document_description = 'Regular'",
        "schema": "CREATE TABLE Organisation_Types (organisation_type_description TEXT); CREATE TABLE Documents (document_type_code TEXT, response_received_date TIME, document_id NUMBER, sent_date TIME, grant_id NUMBER); CREATE TABLE Document_Types (document_description TEXT, document_type_code TEXT); CREATE TABLE Research_Outcomes (outcome_description TEXT); CREATE TABLE Grants (grant_id NUMBER);"
      },
      {
        "question": "What are the grant amounts for those?",
        "query": "SELECT t3.grant_amount FROM documents AS t1 JOIN document_types AS t2 ON t1.document_type_code = t2.document_type_code JOIN grants AS t3 ON t1.grant_id = t3.grant_id WHERE t2.document_description = 'Regular'",
        "schema": "CREATE TABLE Organisation_Types (organisation_type_description TEXT); CREATE TABLE Document_Types (document_description TEXT, document_type_code TEXT); CREATE TABLE Grants (grant_id NUMBER, grant_amount NUMBER); CREATE TABLE Documents (grant_id NUMBER, document_id NUMBER, document_type_code TEXT, response_received_date TIME, sent_date TIME); CREATE TABLE Research_Outcomes (outcome_description TEXT);"
      },
      {
        "question": "Can you find the response received dates for all grants that were over 100?",
        "query": "SELECT t1.response_received_date FROM documents AS t1 JOIN grants AS t2 ON t1.grant_id = t2.grant_id WHERE t2.grant_amount > 100",
        "schema": "CREATE TABLE Grants (grant_amount NUMBER, grant_start_date TIME, grant_id NUMBER); CREATE TABLE Research_Outcomes (outcome_description TEXT); CREATE TABLE Documents (grant_id NUMBER, response_received_date TIME, document_id NUMBER, sent_date TIME, document_type_code TEXT); CREATE TABLE Document_Types (document_type_code TEXT, document_description TEXT); CREATE TABLE Organisation_Types (organisation_type_description TEXT);"
      }
    ],
    [
      {
        "question": "Give me the details of the organizations described as \"Sponsor\" in alphabetical order",
        "query": "SELECT organisation_details FROM organisations AS t1 JOIN organisation_types AS t2 ON t1.organisation_type = t2.organisation_type WHERE t2.organisation_type_description = 'Sponsor' ORDER BY organisation_details",
        "schema": "CREATE TABLE Grants (other_details TEXT); CREATE TABLE Documents (other_details TEXT); CREATE TABLE Research_Staff (employer_organisation_id NUMBER); CREATE TABLE Organisations (organisation_id NUMBER, organisation_details TEXT, organisation_type TEXT); CREATE TABLE Project_Staff (staff_id NUMBER); CREATE TABLE Organisation_Types (organisation_type TEXT, organisation_type_description TEXT); CREATE TABLE Document_Types (document_type_code TEXT); CREATE TABLE Projects (project_id NUMBER, organisation_id NUMBER); CREATE TABLE Tasks (task_details TEXT);"
      },
      {
        "question": "What about their IDs?",
        "query": "SELECT organisation_id FROM organisations AS t1 JOIN organisation_types AS t2 ON t1.organisation_type = t2.organisation_type WHERE t2.organisation_type_description = 'Sponsor' ORDER BY organisation_details",
        "schema": "CREATE TABLE Documents (other_details TEXT); CREATE TABLE Organisations (organisation_type TEXT, organisation_id NUMBER, organisation_details TEXT); CREATE TABLE Organisation_Types (organisation_type TEXT, organisation_type_description TEXT); CREATE TABLE Projects (organisation_id NUMBER, project_id NUMBER); CREATE TABLE Document_Types (document_type_code TEXT); CREATE TABLE Research_Staff (employer_organisation_id NUMBER); CREATE TABLE Grants (other_details TEXT, organisation_id NUMBER); CREATE TABLE Project_Staff (staff_id NUMBER); CREATE TABLE Tasks (task_details TEXT);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT COUNT ( organisation_id ) FROM organisations AS t1 JOIN organisation_types AS t2 ON t1.organisation_type = t2.organisation_type WHERE t2.organisation_type_description = 'Sponsor' ORDER BY organisation_details",
        "schema": "CREATE TABLE Organisation_Types (organisation_type_description TEXT, organisation_type TEXT); CREATE TABLE Project_Staff (staff_id NUMBER); CREATE TABLE Documents (other_details TEXT); CREATE TABLE Document_Types (document_type_code TEXT); CREATE TABLE Organisations (organisation_type TEXT, organisation_id NUMBER, organisation_details TEXT); CREATE TABLE Grants (other_details TEXT, organisation_id NUMBER); CREATE TABLE Tasks (task_details TEXT); CREATE TABLE Research_Staff (employer_organisation_id NUMBER); CREATE TABLE Projects (organisation_id NUMBER, project_id NUMBER);"
      }
    ],
    [
      {
        "question": "Could you list the project details of the projects launched by the most popular organization?",
        "query": "SELECT project_details FROM projects WHERE organisation_id IN ( SELECT organisation_id FROM projects GROUP BY organisation_id ORDER BY COUNT ( * ) DESC LIMIT 1 )",
        "schema": "CREATE TABLE Tasks (project_id NUMBER); CREATE TABLE Project_Outcomes (outcome_details TEXT, project_id NUMBER); CREATE TABLE Project_Staff (project_id NUMBER); CREATE TABLE Organisations (organisation_type TEXT, organisation_id NUMBER, organisation_details TEXT); CREATE TABLE Projects (organisation_id NUMBER, project_id NUMBER, project_details TEXT);"
      },
      {
        "question": "What are the ids of those?",
        "query": "SELECT project_id FROM projects WHERE organisation_id IN ( SELECT organisation_id FROM projects GROUP BY organisation_id ORDER BY COUNT ( * ) DESC LIMIT 1 )",
        "schema": "CREATE TABLE Projects (project_details TEXT, organisation_id NUMBER, project_id NUMBER); CREATE TABLE Project_Outcomes (project_id NUMBER, outcome_details TEXT); CREATE TABLE Organisations (organisation_type TEXT, organisation_details TEXT, organisation_id NUMBER); CREATE TABLE Tasks (project_id NUMBER); CREATE TABLE Project_Staff (project_id NUMBER);"
      },
      {
        "question": "What are their organization ids?",
        "query": "SELECT organisation_id FROM projects GROUP BY organisation_id ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Projects (project_id NUMBER, organisation_id NUMBER, project_details TEXT); CREATE TABLE Organisation_Types (organisation_type_description TEXT); CREATE TABLE Project_Staff (project_id NUMBER); CREATE TABLE Organisations (organisation_id NUMBER, organisation_type TEXT, organisation_details TEXT); CREATE TABLE Project_Outcomes (outcome_details TEXT, project_id NUMBER); CREATE TABLE Tasks (project_id NUMBER);"
      },
      {
        "question": "Can you tell me the project details of the lowest numbered project id?",
        "query": "SELECT project_details FROM projects ORDER BY project_id LIMIT 1",
        "schema": "CREATE TABLE Project_Staff (project_id NUMBER); CREATE TABLE Tasks (project_id NUMBER); CREATE TABLE Organisation_Types (organisation_type_description TEXT); CREATE TABLE Organisations (organisation_id NUMBER, organisation_details TEXT, organisation_type TEXT); CREATE TABLE Projects (project_details TEXT, organisation_id NUMBER, project_id NUMBER); CREATE TABLE Project_Outcomes (project_id NUMBER, outcome_details TEXT);"
      }
    ],
    [
      {
        "question": "give me the organization id then",
        "query": "SELECT t1.organisation_id FROM projects AS t1 JOIN project_outcomes AS t2 ON t1.project_id = t2.project_id GROUP BY t1.organisation_id ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Organisation_Types (organisation_type_description TEXT, organisation_type TEXT); CREATE TABLE Projects (organisation_id NUMBER, project_id NUMBER); CREATE TABLE Tasks (task_id NUMBER, project_id NUMBER); CREATE TABLE Grants (organisation_id NUMBER, grant_id NUMBER); CREATE TABLE Organisations (organisation_id NUMBER, organisation_details TEXT, organisation_type TEXT); CREATE TABLE Documents (grant_id NUMBER, document_id NUMBER); CREATE TABLE Project_Outcomes (project_id NUMBER); CREATE TABLE Research_Staff (employer_organisation_id NUMBER, staff_id NUMBER); CREATE TABLE Project_Staff (project_id NUMBER, staff_id NUMBER);"
      },
      {
        "question": "give me its project details.",
        "query": "SELECT t1.organisation_id, t1.project_details FROM projects AS t1 JOIN project_outcomes AS t2 ON t1.project_id = t2.project_id GROUP BY t1.organisation_id ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Projects (project_details TEXT, project_id NUMBER, organisation_id NUMBER); CREATE TABLE Grants (organisation_id NUMBER, grant_id NUMBER); CREATE TABLE Project_Staff (staff_id NUMBER, project_id NUMBER); CREATE TABLE Organisations (organisation_id NUMBER, organisation_details TEXT, organisation_type TEXT); CREATE TABLE Documents (grant_id NUMBER, document_id NUMBER); CREATE TABLE Organisation_Types (organisation_type_description TEXT, organisation_type TEXT); CREATE TABLE Project_Outcomes (project_id NUMBER, outcome_details TEXT); CREATE TABLE Tasks (task_id NUMBER, project_id NUMBER); CREATE TABLE Research_Staff (staff_id NUMBER, employer_organisation_id NUMBER);"
      },
      {
        "question": "what is the outcome code? | Whose outcome code do you want? | for `deleniti",
        "query": "SELECT t2.outcome_code FROM projects AS t1 JOIN project_outcomes AS t2 ON t1.project_id = t2.project_id WHERE t1.project_details = \"deleniti\"",
        "schema": "CREATE TABLE Research_Outcomes (outcome_code TEXT); CREATE TABLE Research_Staff (employer_organisation_id NUMBER, staff_id NUMBER); CREATE TABLE Grants (grant_id NUMBER, organisation_id NUMBER); CREATE TABLE Documents (grant_id NUMBER, document_id NUMBER); CREATE TABLE Projects (organisation_id NUMBER, project_id NUMBER, project_details TEXT); CREATE TABLE Organisation_Types (organisation_type TEXT, organisation_type_description TEXT); CREATE TABLE Tasks (project_id NUMBER, task_id NUMBER); CREATE TABLE Organisations (organisation_id NUMBER, organisation_type TEXT, organisation_details TEXT); CREATE TABLE Project_Staff (staff_id NUMBER, project_id NUMBER); CREATE TABLE Project_Outcomes (project_id NUMBER, outcome_details TEXT, outcome_code TEXT);"
      }
    ],
    [
      {
        "question": "how many projects has stuff worked as leaders total?",
        "query": "SELECT COUNT ( DISTINCT project_id ) FROM project_staff WHERE role_code = 'leader'",
        "schema": "CREATE TABLE Staff_Roles (role_description TEXT, role_code TEXT); CREATE TABLE Projects (project_id NUMBER, project_details TEXT, organisation_id NUMBER); CREATE TABLE Project_Staff (staff_id NUMBER, role_code TEXT, other_details TEXT, project_id NUMBER); CREATE TABLE Organisations (organisation_id NUMBER); CREATE TABLE Project_Outcomes (outcome_code TEXT, project_id NUMBER); CREATE TABLE Research_Staff (staff_details TEXT, staff_id NUMBER); CREATE TABLE Tasks (task_id NUMBER, project_id NUMBER);"
      },
      {
        "question": "How about the number of projects they worked before 1989-04-24 23:51:54'? | The total number of distinct projects that have some project staffs worked as a leader and worked before 1989-04-24 23:51:54' is 2 | What are other detail about those projects?",
        "query": "SELECT other_details FROM project_staff WHERE role_code = 'leader' AND date_from < '1989-04-24 23:51:54'",
        "schema": "CREATE TABLE Organisations (organisation_id NUMBER); CREATE TABLE Projects (project_details TEXT, organisation_id NUMBER, project_id NUMBER); CREATE TABLE Documents (other_details TEXT); CREATE TABLE Project_Outcomes (project_id NUMBER, outcome_code TEXT); CREATE TABLE Project_Staff (staff_id NUMBER, project_id NUMBER, date_to TIME, role_code TEXT, other_details TEXT, date_from TIME); CREATE TABLE Research_Staff (staff_details TEXT, staff_id NUMBER); CREATE TABLE Tasks (project_id NUMBER, task_id NUMBER); CREATE TABLE Staff_Roles (role_code TEXT, role_description TEXT);"
      }
    ],
    [
      {
        "question": "List out projects which did not hire staff for researcher role ?",
        "query": "SELECT project_id FROM projects WHERE project_id NOT IN ( SELECT project_id FROM project_staff WHERE role_code = 'researcher' )",
        "schema": "CREATE TABLE Organisations (organisation_id NUMBER); CREATE TABLE Research_Staff (employer_organisation_id NUMBER, staff_id NUMBER, staff_details TEXT); CREATE TABLE Tasks (project_id NUMBER); CREATE TABLE Projects (project_details TEXT, project_id NUMBER, organisation_id NUMBER); CREATE TABLE Project_Outcomes (project_id NUMBER); CREATE TABLE Staff_Roles (role_code TEXT, role_description TEXT); CREATE TABLE Project_Staff (project_id NUMBER, staff_id NUMBER, role_code TEXT);"
      },
      {
        "question": "what is the role of the project id 5?",
        "query": "SELECT role_code FROM project_staff WHERE project_id = 5",
        "schema": "CREATE TABLE Tasks (project_id NUMBER); CREATE TABLE Projects (organisation_id NUMBER, project_details TEXT, project_id NUMBER); CREATE TABLE Staff_Roles (role_description TEXT, role_code TEXT); CREATE TABLE Project_Outcomes (project_id NUMBER); CREATE TABLE Organisations (organisation_id NUMBER); CREATE TABLE Research_Staff (staff_id NUMBER, employer_organisation_id NUMBER, staff_details TEXT); CREATE TABLE Project_Staff (role_code TEXT, staff_id NUMBER, project_id NUMBER);"
      },
      {
        "question": "Can you tell me the role of project id 1 ?",
        "query": "SELECT role_code FROM project_staff WHERE project_id = 1",
        "schema": "CREATE TABLE Projects (project_id NUMBER, project_details TEXT, organisation_id NUMBER); CREATE TABLE Organisations (organisation_id NUMBER); CREATE TABLE Staff_Roles (role_code TEXT, role_description TEXT); CREATE TABLE Project_Outcomes (project_id NUMBER); CREATE TABLE Tasks (project_id NUMBER); CREATE TABLE Project_Staff (project_id NUMBER, role_code TEXT, staff_id NUMBER); CREATE TABLE Research_Staff (staff_id NUMBER, employer_organisation_id NUMBER, staff_details TEXT);"
      },
      {
        "question": "List out projects which has staff for researcher role ?",
        "query": "SELECT project_id FROM project_staff WHERE role_code = 'researcher'",
        "schema": "CREATE TABLE Research_Staff (staff_details TEXT, staff_id NUMBER, employer_organisation_id NUMBER); CREATE TABLE Projects (organisation_id NUMBER, project_id NUMBER, project_details TEXT); CREATE TABLE Project_Outcomes (project_id NUMBER); CREATE TABLE Staff_Roles (role_description TEXT, role_code TEXT); CREATE TABLE Project_Staff (staff_id NUMBER, role_code TEXT, project_id NUMBER); CREATE TABLE Tasks (project_id NUMBER); CREATE TABLE Organisations (organisation_id NUMBER);"
      },
      {
        "question": "Can you tell me the organization id for the project id 1 ?",
        "query": "SELECT organisation_id FROM projects WHERE project_id = 1",
        "schema": "CREATE TABLE Project_Outcomes (project_id NUMBER); CREATE TABLE Research_Staff (employer_organisation_id NUMBER, staff_details TEXT, staff_id NUMBER); CREATE TABLE Project_Staff (project_id NUMBER, role_code TEXT, staff_id NUMBER); CREATE TABLE Organisations (organisation_type TEXT, organisation_id NUMBER); CREATE TABLE Organisation_Types (organisation_type TEXT); CREATE TABLE Staff_Roles (role_description TEXT, role_code TEXT); CREATE TABLE Tasks (project_id NUMBER); CREATE TABLE Projects (project_id NUMBER, organisation_id NUMBER, project_details TEXT);"
      },
      {
        "question": "can you tell me the staff id of the project which did not have researcher role ?",
        "query": "SELECT t1.staff_id FROM project_staff AS t1 JOIN projects AS t2 WHERE t1.project_id NOT IN ( SELECT project_id FROM project_staff WHERE role_code = 'researcher' )",
        "schema": "CREATE TABLE Staff_Roles (role_code TEXT, role_description TEXT); CREATE TABLE Project_Outcomes (project_id NUMBER); CREATE TABLE Research_Staff (staff_details TEXT, staff_id NUMBER, employer_organisation_id NUMBER); CREATE TABLE Projects (project_id NUMBER, organisation_id NUMBER, project_details TEXT); CREATE TABLE Tasks (project_id NUMBER); CREATE TABLE Project_Staff (staff_id NUMBER, role_code TEXT, project_id NUMBER); CREATE TABLE Organisations (organisation_id NUMBER, organisation_type TEXT); CREATE TABLE Organisation_Types (organisation_type TEXT);"
      },
      {
        "question": "tell me project details about the project id 1 ?",
        "query": "SELECT project_details FROM projects WHERE project_id = 1",
        "schema": "CREATE TABLE Organisation_Types (organisation_type TEXT); CREATE TABLE Projects (project_id NUMBER, organisation_id NUMBER, project_details TEXT); CREATE TABLE Organisations (organisation_id NUMBER, organisation_type TEXT); CREATE TABLE Project_Outcomes (project_id NUMBER); CREATE TABLE Tasks (project_id NUMBER); CREATE TABLE Research_Staff (staff_details TEXT, staff_id NUMBER, employer_organisation_id NUMBER); CREATE TABLE Project_Staff (project_id NUMBER, role_code TEXT, staff_id NUMBER); CREATE TABLE Staff_Roles (role_code TEXT, role_description TEXT);"
      },
      {
        "question": "List out total number of projects which has no staff for researcher role ?",
        "query": "SELECT COUNT ( * ) FROM projects WHERE project_id NOT IN ( SELECT project_id FROM project_staff WHERE role_code = 'researcher' )",
        "schema": "CREATE TABLE Tasks (project_id NUMBER); CREATE TABLE Project_Outcomes (project_id NUMBER); CREATE TABLE Staff_Roles (role_description TEXT, role_code TEXT); CREATE TABLE Organisations (organisation_type TEXT, organisation_id NUMBER); CREATE TABLE Projects (project_id NUMBER, project_details TEXT, organisation_id NUMBER); CREATE TABLE Project_Staff (staff_id NUMBER, project_id NUMBER, role_code TEXT); CREATE TABLE Organisation_Types (organisation_type TEXT); CREATE TABLE Research_Staff (employer_organisation_id NUMBER, staff_id NUMBER, staff_details TEXT);"
      },
      {
        "question": "List the project details of the projects which did not hire any staff for a researcher role ?",
        "query": "SELECT project_details FROM projects WHERE project_id NOT IN ( SELECT project_id FROM project_staff WHERE role_code = 'researcher' )",
        "schema": "CREATE TABLE Project_Outcomes (project_id NUMBER); CREATE TABLE Projects (project_id NUMBER, project_details TEXT, organisation_id NUMBER); CREATE TABLE Project_Staff (role_code TEXT, project_id NUMBER, staff_id NUMBER); CREATE TABLE Tasks (project_id NUMBER); CREATE TABLE Staff_Roles (role_code TEXT, role_description TEXT); CREATE TABLE Organisation_Types (organisation_type TEXT); CREATE TABLE Organisations (organisation_type TEXT, organisation_id NUMBER); CREATE TABLE Research_Staff (employer_organisation_id NUMBER, staff_details TEXT, staff_id NUMBER);"
      }
    ],
    [
      {
        "question": "how many project staff there",
        "query": "SELECT COUNT ( * ) FROM project_staff",
        "schema": "CREATE TABLE Tasks (project_id NUMBER); CREATE TABLE Projects (organisation_id NUMBER, project_id NUMBER, project_details TEXT); CREATE TABLE Project_Staff (role_code TEXT, staff_id NUMBER, date_from TIME, other_details TEXT, project_id NUMBER); CREATE TABLE Research_Staff (staff_details TEXT, staff_id NUMBER, employer_organisation_id NUMBER); CREATE TABLE Staff_Roles (role_code TEXT, role_description TEXT); CREATE TABLE Project_Outcomes (project_id NUMBER); CREATE TABLE Organisations (organisation_id NUMBER);"
      },
      {
        "question": "what is the date from of staff id 779.0",
        "query": "SELECT date_from FROM project_staff WHERE staff_id = 779.0",
        "schema": "CREATE TABLE Projects (project_details TEXT, organisation_id NUMBER, project_id NUMBER); CREATE TABLE Project_Staff (project_id NUMBER, other_details TEXT, staff_id NUMBER, date_to TIME, date_from TIME, role_code TEXT); CREATE TABLE Tasks (project_id NUMBER); CREATE TABLE Research_Staff (employer_organisation_id NUMBER, staff_id NUMBER, staff_details TEXT); CREATE TABLE Staff_Roles (role_description TEXT, role_code TEXT); CREATE TABLE Organisations (organisation_id NUMBER); CREATE TABLE Project_Outcomes (project_id NUMBER);"
      },
      {
        "question": "what is the role code of staff id 674810.0",
        "query": "SELECT role_code FROM project_staff WHERE staff_id = 674810.0",
        "schema": "CREATE TABLE Organisations (organisation_id NUMBER); CREATE TABLE Research_Staff (staff_details TEXT, staff_id NUMBER, employer_organisation_id NUMBER); CREATE TABLE Tasks (project_id NUMBER); CREATE TABLE Project_Staff (date_from TIME, role_code TEXT, project_id NUMBER, staff_id NUMBER, other_details TEXT, date_to TIME); CREATE TABLE Projects (organisation_id NUMBER, project_id NUMBER, project_details TEXT); CREATE TABLE Staff_Roles (role_description TEXT, role_code TEXT); CREATE TABLE Project_Outcomes (project_id NUMBER);"
      }
    ],
    [
      {
        "question": "What are the response received dates for the documents described as 'Regular'?",
        "query": "SELECT t1.response_received_date FROM documents AS t1 JOIN document_types AS t2 ON t1.document_type_code = t2.document_type_code JOIN grants AS t3 ON t1.grant_id = t3.grant_id WHERE t2.document_description = 'Regular'",
        "schema": "CREATE TABLE Document_Types (document_description TEXT, document_type_code TEXT); CREATE TABLE Documents (document_type_code TEXT, response_received_date TIME, document_id NUMBER, sent_date TIME, grant_id NUMBER); CREATE TABLE Grants (grant_end_date TIME, grant_id NUMBER);"
      },
      {
        "question": "What are the response received dates for the documents with a grant amount more than 100?",
        "query": "SELECT t1.response_received_date FROM documents AS t1 JOIN document_types AS t2 ON t1.document_type_code = t2.document_type_code JOIN grants AS t3 ON t1.grant_id = t3.grant_id WHERE t3.grant_amount > 100",
        "schema": "CREATE TABLE Grants (grant_id NUMBER, grant_end_date TIME, grant_amount NUMBER); CREATE TABLE Document_Types (document_description TEXT, document_type_code TEXT); CREATE TABLE Documents (document_id NUMBER, sent_date TIME, document_type_code TEXT, grant_id NUMBER, response_received_date TIME);"
      },
      {
        "question": "How many documents have the document description \"Initial Application\"?",
        "query": "SELECT COUNT ( * ) FROM documents AS t1 JOIN document_types AS t2 ON t1.document_type_code = t2.document_type_code JOIN grants AS t3 ON t1.grant_id = t3.grant_id WHERE t2.document_description = 'Initial Application'",
        "schema": "CREATE TABLE Grants (grant_id NUMBER, grant_end_date TIME, grant_amount NUMBER, grant_start_date TIME); CREATE TABLE Document_Types (document_description TEXT, document_type_code TEXT); CREATE TABLE Documents (sent_date TIME, grant_id NUMBER, response_received_date TIME, document_type_code TEXT, document_id NUMBER);"
      },
      {
        "question": "Can you list all of the grant start dates of those documents please?",
        "query": "SELECT t3.grant_start_date FROM documents AS t1 JOIN document_types AS t2 ON t1.document_type_code = t2.document_type_code JOIN grants AS t3 ON t1.grant_id = t3.grant_id WHERE t2.document_description = 'Initial Application'",
        "schema": "CREATE TABLE Grants (grant_end_date TIME, grant_amount NUMBER, grant_id NUMBER, grant_start_date TIME); CREATE TABLE Documents (grant_id NUMBER, response_received_date TIME, document_type_code TEXT, sent_date TIME, document_id NUMBER); CREATE TABLE Document_Types (document_description TEXT, document_type_code TEXT);"
      },
      {
        "question": "What are the grant amounts of those?",
        "query": "SELECT t3.grant_amount FROM documents AS t1 JOIN document_types AS t2 ON t1.document_type_code = t2.document_type_code JOIN grants AS t3 ON t1.grant_id = t3.grant_id WHERE t2.document_description = 'Initial Application'",
        "schema": "CREATE TABLE Documents (grant_id NUMBER, response_received_date TIME, document_id NUMBER, sent_date TIME, document_type_code TEXT); CREATE TABLE Document_Types (document_description TEXT, document_type_code TEXT); CREATE TABLE Grants (grant_start_date TIME, grant_end_date TIME, grant_amount NUMBER, grant_id NUMBER);"
      }
    ],
    [
      {
        "question": "What projects are detailed as 'omnis'?",
        "query": "SELECT * FROM tasks AS t1 JOIN projects AS t2 ON t1.project_id = t2.project_id WHERE t2.project_details = 'omnis'",
        "schema": "CREATE TABLE Project_Staff (project_id NUMBER); CREATE TABLE Tasks (task_details TEXT, project_id NUMBER); CREATE TABLE Projects (organisation_id NUMBER, project_details TEXT, project_id NUMBER);"
      },
      {
        "question": "How many of these have more than 2 outcomes?",
        "query": "SELECT COUNT ( * ) FROM ( SELECT t2.project_id FROM tasks AS t1 JOIN projects AS t2 ON t1.project_id = t2.project_id WHERE t2.project_details = 'omnis' INTERSECT SELECT t2.project_id FROM tasks AS t1 JOIN projects AS t2 ON t1.project_id = t2.project_id JOIN project_outcomes AS t3 ON t2.project_id = t3.project_id GROUP BY t2.project_id HAVING COUNT ( * ) > 2 )",
        "schema": "CREATE TABLE Tasks (task_id NUMBER, project_id NUMBER, task_details TEXT); CREATE TABLE Project_Outcomes (outcome_details TEXT, project_id NUMBER, outcome_code TEXT); CREATE TABLE Project_Staff (project_id NUMBER); CREATE TABLE Projects (project_details TEXT, project_id NUMBER, organisation_id NUMBER);"
      },
      {
        "question": "How many projects (not labeled omnis) have two or more outcomes?",
        "query": "SELECT COUNT ( t2.project_id ) FROM tasks AS t1 JOIN projects AS t2 ON t1.project_id = t2.project_id JOIN project_outcomes AS t3 ON t2.project_id = t3.project_id GROUP BY t2.project_id HAVING COUNT ( * ) > 2",
        "schema": "CREATE TABLE Project_Staff (project_id NUMBER); CREATE TABLE Tasks (task_id NUMBER, project_id NUMBER, task_details TEXT); CREATE TABLE Project_Outcomes (outcome_details TEXT, outcome_code TEXT, project_id NUMBER); CREATE TABLE Projects (project_id NUMBER, project_details TEXT, organisation_id NUMBER);"
      }
    ],
    [
      {
        "question": "How many projects are there?",
        "query": "SELECT COUNT ( project_id ) FROM project_staff",
        "schema": "CREATE TABLE Projects (project_details TEXT, organisation_id NUMBER, project_id NUMBER); CREATE TABLE Organisations (organisation_id NUMBER); CREATE TABLE Project_Staff (staff_id NUMBER, role_code TEXT, project_id NUMBER); CREATE TABLE Project_Outcomes (project_id NUMBER); CREATE TABLE Research_Staff (staff_id NUMBER); CREATE TABLE Tasks (task_id NUMBER, project_id NUMBER);"
      },
      {
        "question": "How many staff are there?",
        "query": "SELECT COUNT ( staff_id ) FROM project_staff",
        "schema": "CREATE TABLE Tasks (project_id NUMBER, task_id NUMBER); CREATE TABLE Project_Outcomes (project_id NUMBER); CREATE TABLE Research_Staff (employer_organisation_id NUMBER, staff_details TEXT, staff_id NUMBER); CREATE TABLE Staff_Roles (role_description TEXT, role_code TEXT); CREATE TABLE Organisations (organisation_id NUMBER); CREATE TABLE Projects (project_details TEXT, organisation_id NUMBER, project_id NUMBER); CREATE TABLE Project_Staff (role_code TEXT, project_id NUMBER, staff_id NUMBER);"
      },
      {
        "question": "What project has the most staff?",
        "query": "SELECT project_id FROM project_staff GROUP BY project_id ORDER BY COUNT ( staff_id ) DESC LIMIT 1",
        "schema": "CREATE TABLE Project_Staff (role_code TEXT, project_id NUMBER, staff_id NUMBER); CREATE TABLE Research_Staff (employer_organisation_id NUMBER, staff_details TEXT, staff_id NUMBER); CREATE TABLE Tasks (task_id NUMBER, project_id NUMBER); CREATE TABLE Project_Outcomes (project_id NUMBER); CREATE TABLE Projects (organisation_id NUMBER, project_details TEXT, project_id NUMBER); CREATE TABLE Organisations (organisation_id NUMBER); CREATE TABLE Staff_Roles (role_description TEXT, role_code TEXT);"
      },
      {
        "question": "Which staff started the earliest?",
        "query": "SELECT staff_id FROM project_staff ORDER BY date_from LIMIT 1",
        "schema": "CREATE TABLE Organisations (organisation_id NUMBER); CREATE TABLE Staff_Roles (role_code TEXT, role_description TEXT); CREATE TABLE Tasks (project_id NUMBER, task_id NUMBER); CREATE TABLE Projects (project_details TEXT, project_id NUMBER, organisation_id NUMBER); CREATE TABLE Project_Outcomes (project_id NUMBER); CREATE TABLE Project_Staff (date_from TIME, project_id NUMBER, date_to TIME, staff_id NUMBER, role_code TEXT); CREATE TABLE Research_Staff (employer_organisation_id NUMBER, staff_details TEXT, staff_id NUMBER);"
      },
      {
        "question": "When did they first start working on the projects? | Do you mean the date when the staff with id 56.0 started the project? | Yes.",
        "query": "SELECT date_from FROM project_staff WHERE staff_id = 56.0",
        "schema": "CREATE TABLE Staff_Roles (role_description TEXT, role_code TEXT); CREATE TABLE Project_Staff (date_to TIME, role_code TEXT, project_id NUMBER, staff_id NUMBER, date_from TIME); CREATE TABLE Organisations (organisation_id NUMBER); CREATE TABLE Projects (project_id NUMBER, project_details TEXT, organisation_id NUMBER); CREATE TABLE Project_Outcomes (project_id NUMBER); CREATE TABLE Tasks (project_id NUMBER, task_id NUMBER); CREATE TABLE Research_Staff (staff_id NUMBER, employer_organisation_id NUMBER, staff_details TEXT);"
      }
    ],
    [
      {
        "question": "Show the role description of the project staff involved in the most number of project outcomes",
        "query": "SELECT t1.role_description FROM staff_roles AS t1 JOIN project_staff AS t2 ON t1.role_code = t2.role_code JOIN project_outcomes AS t3 ON t2.project_id = t3.project_id GROUP BY t2.staff_id ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Projects (project_id NUMBER, project_details TEXT); CREATE TABLE Project_Outcomes (project_id NUMBER, outcome_code TEXT, outcome_details TEXT); CREATE TABLE Research_Staff (staff_details TEXT, staff_id NUMBER); CREATE TABLE Tasks (project_id NUMBER); CREATE TABLE Staff_Roles (role_description TEXT, role_code TEXT); CREATE TABLE Project_Staff (staff_id NUMBER, role_code TEXT, project_id NUMBER); CREATE TABLE Research_Outcomes (outcome_code TEXT, outcome_description TEXT);"
      },
      {
        "question": "Show the role code of the project staff involved in the most number of project outcomes",
        "query": "SELECT t1.role_code FROM staff_roles AS t1 JOIN project_staff AS t2 ON t1.role_code = t2.role_code JOIN project_outcomes AS t3 ON t2.project_id = t3.project_id GROUP BY t2.staff_id ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Staff_Roles (role_description TEXT, role_code TEXT); CREATE TABLE Research_Outcomes (outcome_description TEXT, outcome_code TEXT); CREATE TABLE Project_Staff (staff_id NUMBER, project_id NUMBER, role_code TEXT); CREATE TABLE Project_Outcomes (project_id NUMBER, outcome_code TEXT, outcome_details TEXT); CREATE TABLE Projects (project_details TEXT, project_id NUMBER); CREATE TABLE Research_Staff (staff_id NUMBER, staff_details TEXT); CREATE TABLE Tasks (project_id NUMBER);"
      },
      {
        "question": "Show me other details of the project staff involved in the most number of project outcomes",
        "query": "SELECT t2.other_details FROM staff_roles AS t1 JOIN project_staff AS t2 ON t1.role_code = t2.role_code JOIN project_outcomes AS t3 ON t2.project_id = t3.project_id GROUP BY t2.staff_id ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Tasks (project_id NUMBER); CREATE TABLE Documents (other_details TEXT); CREATE TABLE Projects (project_id NUMBER, project_details TEXT); CREATE TABLE Research_Outcomes (outcome_description TEXT, outcome_code TEXT); CREATE TABLE Research_Staff (staff_id NUMBER, staff_details TEXT); CREATE TABLE Project_Staff (staff_id NUMBER, role_code TEXT, other_details TEXT, project_id NUMBER); CREATE TABLE Staff_Roles (role_code TEXT, role_description TEXT); CREATE TABLE Project_Outcomes (outcome_code TEXT, project_id NUMBER, outcome_details TEXT);"
      }
    ],
    [
      {
        "question": "hi. can you tell me which product made the highest number of outcomes? | What attributes of the product that made the highest number of outcomes would you like to know? | I would like to know the most number of outcomes for all outcome codes",
        "query": "SELECT COUNT ( outcome_code ) FROM project_outcomes GROUP BY outcome_code ORDER BY COUNT ( outcome_code ) DESC LIMIT 1",
        "schema": "CREATE TABLE Project_Outcomes (outcome_code TEXT, project_id NUMBER, outcome_details TEXT); CREATE TABLE Research_Outcomes (outcome_code TEXT);"
      },
      {
        "question": "can you give me the project ID? | Sorry, what would you like the project id for? | the project that had the highest number of outcomes",
        "query": "SELECT t1.project_id FROM projects AS t1 JOIN project_outcomes AS t2 ON t1.project_id = t2.project_id GROUP BY t1.project_id ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Research_Outcomes (outcome_code TEXT); CREATE TABLE Project_Outcomes (outcome_code TEXT, outcome_details TEXT, project_id NUMBER); CREATE TABLE Projects (project_id NUMBER);"
      },
      {
        "question": "and can you please also give me the project details?",
        "query": "SELECT t1.project_details , t1.project_id FROM projects AS t1 JOIN project_outcomes AS t2 ON t1.project_id = t2.project_id GROUP BY t1.project_id ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Project_Outcomes (outcome_details TEXT, outcome_code TEXT, project_id NUMBER); CREATE TABLE Projects (project_details TEXT, project_id NUMBER); CREATE TABLE Research_Outcomes (outcome_code TEXT);"
      }
    ]
  ],
  "race_track": [
    [
      {
        "question": "Can you show me all tracks which were opened after 2000? | Do you mean the names of all the tracks which were opened after 2000? | Yes.",
        "query": "SELECT name FROM track WHERE year_opened > 2000",
        "schema": "CREATE TABLE track (Year_Opened NUMBER, Name TEXT, Track_ID NUMBER);"
      },
      {
        "question": "Hmm, I want to know the seatings for all the tracks opened after 2000.",
        "query": "SELECT seating FROM track WHERE year_opened > 2000",
        "schema": "CREATE TABLE track (Year_Opened NUMBER, Name TEXT, Track_ID NUMBER, Location TEXT, Seating NUMBER);"
      },
      {
        "question": "Please list the names and seatings for all the tracks opened after 2000, ordered by seating.",
        "query": "SELECT name , seating FROM track WHERE year_opened > 2000 ORDER BY seating",
        "schema": "CREATE TABLE track (Location TEXT, Seating NUMBER, Track_ID NUMBER, Year_Opened NUMBER, Name TEXT);"
      }
    ],
    [
      {
        "question": "can you show me names of races?",
        "query": "SELECT name FROM race",
        "schema": "CREATE TABLE race (Track_ID TEXT, Class TEXT, Race_ID NUMBER, Name TEXT); CREATE TABLE track (Name TEXT, Track_ID NUMBER);"
      },
      {
        "question": "what is the Mexico City 250's date?",
        "query": "SELECT date FROM race WHERE name = \"Mexico City 250\"",
        "schema": "CREATE TABLE race (Class TEXT, Name TEXT, Date TEXT, Track_ID TEXT, Race_ID NUMBER); CREATE TABLE track (Track_ID NUMBER, Name TEXT, Location TEXT);"
      },
      {
        "question": "can you show me class of race?",
        "query": "SELECT CLASS FROM race",
        "schema": "CREATE TABLE track (Name TEXT, Track_ID NUMBER, Location TEXT); CREATE TABLE race (Name TEXT, Race_ID NUMBER, Date TEXT, Track_ID TEXT, Class TEXT);"
      }
    ],
    [
      {
        "question": "Which was the most recently opened track?",
        "query": "SELECT name FROM track ORDER BY year_opened DESC LIMIT 1",
        "schema": "CREATE TABLE track (Track_ID NUMBER, Year_Opened NUMBER, Name TEXT, Location TEXT); CREATE TABLE race (Track_ID TEXT);"
      },
      {
        "question": "What is the seating capacity for Chicagoland Speedway?",
        "query": "SELECT seating FROM track WHERE name = 'Chicagoland Speedway'",
        "schema": "CREATE TABLE track (Seating NUMBER, Track_ID NUMBER, Location TEXT, Year_Opened NUMBER, Name TEXT); CREATE TABLE race (Track_ID TEXT);"
      },
      {
        "question": "What is the location of the Chicagoland Speedway tract?",
        "query": "SELECT LOCATION FROM track WHERE name = 'Chicagoland Speedway'",
        "schema": "CREATE TABLE race (Track_ID TEXT); CREATE TABLE track (Location TEXT, Track_ID NUMBER, Seating NUMBER, Year_Opened NUMBER, Name TEXT);"
      }
    ],
    [
      {
        "question": "give me the race class with the most number of races",
        "query": "SELECT CLASS FROM race GROUP BY CLASS ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE race (Race_ID NUMBER, Name TEXT, Class TEXT); CREATE TABLE track (Track_ID NUMBER);"
      },
      {
        "question": "on what date is it?",
        "query": "SELECT Date FROM race WHERE CLASS = ( SELECT CLASS FROM race GROUP BY CLASS ORDER BY COUNT ( * ) DESC LIMIT 1 )",
        "schema": "CREATE TABLE track (Track_ID NUMBER); CREATE TABLE race (Name TEXT, Class TEXT, Date TEXT, Race_ID NUMBER);"
      },
      {
        "question": "list the race id",
        "query": "SELECT race_id FROM race WHERE CLASS = ( SELECT CLASS FROM race GROUP BY CLASS ORDER BY COUNT ( * ) DESC LIMIT 1 )",
        "schema": "CREATE TABLE race (Date TEXT, Name TEXT, Class TEXT, Race_ID NUMBER); CREATE TABLE track (Track_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What are the names of those tracks?",
        "query": "SELECT name FROM track WHERE track_id NOT IN ( SELECT track_id FROM race )",
        "schema": "CREATE TABLE race (Track_ID TEXT); CREATE TABLE track (Location TEXT, Track_ID NUMBER, Name TEXT);"
      },
      {
        "question": "Can you show me the location and year opened for these tracks?",
        "query": "SELECT LOCATION, year_opened FROM track WHERE track_id NOT IN ( SELECT track_id FROM race )",
        "schema": "CREATE TABLE race (Name TEXT, Track_ID TEXT); CREATE TABLE track (Location TEXT, Name TEXT, Track_ID NUMBER, Year_Opened NUMBER);"
      }
    ],
    [
      {
        "question": "which track has the highest number of race?",
        "query": "SELECT t2.name FROM race AS t1 JOIN track AS t2 ON t1.track_id = t2.track_id GROUP BY t1.track_id ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE race (Race_ID NUMBER, Name TEXT, Track_ID TEXT); CREATE TABLE track (Track_ID NUMBER, Name TEXT);"
      },
      {
        "question": "where is Auto Club Speedway located?",
        "query": "SELECT t2.location FROM race AS t1 JOIN track AS t2 ON t1.track_id = t2.track_id WHERE t2.name = 'Auto Club Speedway'",
        "schema": "CREATE TABLE race (Track_ID TEXT, Name TEXT, Race_ID NUMBER); CREATE TABLE track (Location TEXT, Name TEXT, Track_ID NUMBER);"
      },
      {
        "question": "where is Chicagoland Speedway located?",
        "query": "SELECT t2.location FROM race AS t1 JOIN track AS t2 ON t1.track_id = t2.track_id WHERE t2.name = 'Chicagoland Speedway'",
        "schema": "CREATE TABLE track (Name TEXT, Location TEXT, Track_ID NUMBER); CREATE TABLE race (Race_ID NUMBER, Name TEXT, Track_ID TEXT);"
      },
      {
        "question": "how many seating does Chicagoland Speedway have?",
        "query": "SELECT t2.seating FROM race AS t1 JOIN track AS t2 ON t1.track_id = t2.track_id WHERE t2.name = 'Chicagoland Speedway'",
        "schema": "CREATE TABLE track (Location TEXT, Name TEXT, Seating NUMBER, Track_ID NUMBER); CREATE TABLE race (Name TEXT, Race_ID NUMBER, Track_ID TEXT);"
      }
    ],
    [
      {
        "question": "Which tracks were opened after year 2000? | Here are the ids for tracks that were opened after year 2000, including 2 and 6. | What are their names?",
        "query": "SELECT name FROM track WHERE year_opened > 2000",
        "schema": "CREATE TABLE race (Track_ID TEXT); CREATE TABLE track (Track_ID NUMBER, Name TEXT, Year_Opened NUMBER);"
      },
      {
        "question": "And what are their seating capacity?",
        "query": "SELECT name, seating FROM track WHERE year_opened > 2000",
        "schema": "CREATE TABLE track (Name TEXT, Seating NUMBER, Year_Opened NUMBER, Track_ID NUMBER, Location TEXT); CREATE TABLE race (Track_ID TEXT);"
      },
      {
        "question": "Yes, what are their locations?",
        "query": "SELECT name,LOCATION FROM track WHERE year_opened > 2000",
        "schema": "CREATE TABLE track (Name TEXT, Location TEXT, Track_ID NUMBER, Seating NUMBER, Year_Opened NUMBER); CREATE TABLE race (Track_ID TEXT);"
      }
    ],
    [
      {
        "question": "count the number of records for each track id | do you mean count the number of race ids for each track id? | How about this--list all track Ids",
        "query": "SELECT track_id FROM track",
        "schema": "CREATE TABLE track (Track_ID NUMBER, Name TEXT); CREATE TABLE race (Race_ID NUMBER, Track_ID TEXT);"
      },
      {
        "question": "add a column for track name",
        "query": "SELECT track_id,name FROM track",
        "schema": "CREATE TABLE race (Track_ID TEXT, Race_ID NUMBER); CREATE TABLE track (Name TEXT, Track_ID NUMBER);"
      },
      {
        "question": "add a column showing the total number of rows in the table race that contain each of the Track_IDs",
        "query": "SELECT t2.track_id,t2.name,COUNT ( * ) FROM race AS t1 JOIN track AS t2 ON t1.track_id = t2.track_id GROUP BY t1.track_id",
        "schema": "CREATE TABLE track (Name TEXT, Track_ID NUMBER); CREATE TABLE race (Track_ID TEXT, Race_ID NUMBER);"
      },
      {
        "question": "Filter the list to show only those rows with a number in the count column that is greater than 1",
        "query": "SELECT t2.track_id,t2.name,COUNT ( * ) FROM race AS t1 JOIN track AS t2 ON t1.track_id = t2.track_id GROUP BY t1.track_id HAVING COUNT ( * ) > 1",
        "schema": "CREATE TABLE race (Race_ID NUMBER, Track_ID TEXT); CREATE TABLE track (Name TEXT, Track_ID NUMBER);"
      }
    ]
  ],
  "film_rank": [
    [
      {
        "question": "Hey there!  How're you!  Can you provide me with a list of all of the different movie studios?",
        "query": "SELECT DISTINCT studio FROM film",
        "schema": "CREATE TABLE film (Film_ID NUMBER, Title TEXT, Studio TEXT, Director TEXT);"
      },
      {
        "question": "Could you filter this list to show just the movie studio which has the largest number of movies?",
        "query": "SELECT studio FROM film GROUP BY studio ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE film (Film_ID NUMBER, Director TEXT, Studio TEXT, Title TEXT);"
      },
      {
        "question": "Great!  Can you please provide me with the total number of films by 20th Century Fox?",
        "query": "SELECT COUNT ( * ) FROM film WHERE studio = \"20th Century Fox\"",
        "schema": "CREATE TABLE film (Studio TEXT, Director TEXT, Title TEXT, Film_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What is the average gross amount of money made in dollars?",
        "query": "SELECT AVG ( gross_in_dollar ) FROM film",
        "schema": "CREATE TABLE film (Film_ID NUMBER, Title TEXT, Gross_in_dollar NUMBER);"
      },
      {
        "question": "What films did Nicholas Meyer direct?",
        "query": "SELECT title FROM film WHERE director = \"Nicholas Meyer\"",
        "schema": "CREATE TABLE film (Gross_in_dollar NUMBER, Title TEXT, Film_ID NUMBER, Director TEXT);"
      },
      {
        "question": "What were those movies directed by Walter Hill?",
        "query": "SELECT title FROM film WHERE director = \"Walter Hill\"",
        "schema": "CREATE TABLE film (Film_ID NUMBER, Title TEXT, Gross_in_dollar NUMBER, Director TEXT);"
      },
      {
        "question": "What studio produced that movie with name 48 Hrs?",
        "query": "SELECT studio FROM film WHERE title = \"48 Hrs\"",
        "schema": "CREATE TABLE film (Title TEXT, Gross_in_dollar NUMBER, Studio TEXT, Film_ID NUMBER, Director TEXT);"
      },
      {
        "question": "What studio produced Star Trek II: The Wrath of Khan?",
        "query": "SELECT studio FROM film WHERE title = \"Star Trek II: The Wrath of Khan\"",
        "schema": "CREATE TABLE film (Gross_in_dollar NUMBER, Director TEXT, Film_ID NUMBER, Title TEXT, Studio TEXT);"
      }
    ],
    [
      {
        "question": "Who is the director of \"walter hill\"? | do you mean which film is directed by the director of \"walter hill\"? | yes.",
        "query": "SELECT title FROM film WHERE director = \"Walter Hill\"",
        "schema": "CREATE TABLE film (Film_ID NUMBER, Title TEXT, Director TEXT); CREATE TABLE film_market_estimation (Film_ID NUMBER);"
      },
      {
        "question": "Which studios have produced films with the director \"Walter Hill\"?",
        "query": "SELECT studio FROM film WHERE director = \"Walter Hill\"",
        "schema": "CREATE TABLE film (Film_ID NUMBER, Director TEXT, Studio TEXT, Title TEXT); CREATE TABLE film_market_estimation (Film_ID NUMBER);"
      },
      {
        "question": "What about the ones that haven't?",
        "query": "SELECT studio FROM film WHERE director ! = \"Walter Hill\"",
        "schema": "CREATE TABLE film (Director TEXT, Film_ID NUMBER, Studio TEXT, Title TEXT); CREATE TABLE film_market_estimation (Film_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Can you list the titles of the films without any market estimations?",
        "query": "SELECT title FROM film WHERE film_id NOT IN ( SELECT film_id FROM film_market_estimation )",
        "schema": "CREATE TABLE film_market_estimation (Estimation_ID NUMBER, Film_ID NUMBER, Type TEXT); CREATE TABLE film (Title TEXT, Film_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Find the number of cities in USA country?",
        "query": "SELECT number_cities FROM market WHERE country = \"USA\"",
        "schema": "CREATE TABLE market (Market_ID NUMBER, Country TEXT, Number_cities NUMBER);"
      },
      {
        "question": "How many country's located in the world?",
        "query": "SELECT COUNT ( country ) FROM market",
        "schema": "CREATE TABLE market (Number_cities NUMBER, Market_ID NUMBER, Country TEXT);"
      },
      {
        "question": "What are the market id of china?",
        "query": "SELECT market_id FROM market WHERE country = \"China\"",
        "schema": "CREATE TABLE film_market_estimation (Market_ID NUMBER); CREATE TABLE market (Country TEXT, Number_cities NUMBER, Market_ID NUMBER);"
      },
      {
        "question": "What are the maximum and minimum number of cities in all markets.",
        "query": "SELECT MAX ( number_cities ) , MIN ( number_cities ) FROM market",
        "schema": "CREATE TABLE market (Market_ID NUMBER, Country TEXT, Number_cities NUMBER); CREATE TABLE film_market_estimation (Market_ID NUMBER);"
      }
    ],
    [
      {
        "question": "How many films are there in total?",
        "query": "SELECT COUNT ( DISTINCT title ) FROM film",
        "schema": "CREATE TABLE film (Film_ID NUMBER, Title TEXT); CREATE TABLE film_market_estimation (Film_ID NUMBER, Market_ID NUMBER, Type TEXT);"
      },
      {
        "question": "How many of those films do not have any market estimation?",
        "query": "SELECT COUNT ( title ) FROM film WHERE film_id NOT IN ( SELECT film_id FROM film_market_estimation )",
        "schema": "CREATE TABLE film_market_estimation (Estimation_ID NUMBER, Market_ID NUMBER, Type TEXT, Film_ID NUMBER); CREATE TABLE film (Title TEXT, Film_ID NUMBER);"
      },
      {
        "question": "What about film IDs? | Do you mean the film IDs of the 9 films that do not have market estimations? | Yes, could you tell me those films' IDs?",
        "query": "SELECT film_id FROM film WHERE film_id NOT IN ( SELECT film_id FROM film_market_estimation )",
        "schema": "CREATE TABLE film_market_estimation (Film_ID NUMBER, Estimation_ID NUMBER, Type TEXT, Market_ID NUMBER); CREATE TABLE film (Film_ID NUMBER, Title TEXT);"
      },
      {
        "question": "What are the titles of the films with those IDs?",
        "query": "SELECT title FROM film WHERE film_id IN ( SELECT film_id FROM film WHERE film_id NOT IN ( SELECT film_id FROM film_market_estimation ) )",
        "schema": "CREATE TABLE film (Film_ID NUMBER, Title TEXT); CREATE TABLE film_market_estimation (Film_ID NUMBER, Estimation_ID NUMBER, Market_ID NUMBER, Type TEXT);"
      }
    ],
    [
      {
        "question": "Which studio has the highest gross?",
        "query": "SELECT studio FROM film ORDER BY gross_in_dollar DESC LIMIT 1",
        "schema": "CREATE TABLE film (Gross_in_dollar NUMBER, Studio TEXT, Film_ID NUMBER); CREATE TABLE film_market_estimation (High_Estimate NUMBER);"
      },
      {
        "question": "How many studios have average gross higher than 4500000",
        "query": "SELECT studio FROM film GROUP BY studio HAVING AVG ( gross_in_dollar ) > = 4500000",
        "schema": "CREATE TABLE film_market_estimation (High_Estimate NUMBER); CREATE TABLE film (Film_ID NUMBER, Studio TEXT, Gross_in_dollar NUMBER);"
      },
      {
        "question": "List them please",
        "query": "SELECT studio FROM film GROUP BY studio HAVING AVG ( gross_in_dollar ) > = 4500000",
        "schema": "CREATE TABLE film_market_estimation (High_Estimate NUMBER); CREATE TABLE film (Gross_in_dollar NUMBER, Film_ID NUMBER, Studio TEXT);"
      }
    ],
    [
      {
        "question": "please list the years of film market estimations in descending order.",
        "query": "SELECT YEAR FROM film_market_estimation ORDER BY YEAR DESC",
        "schema": "CREATE TABLE film (Film_ID NUMBER, Title TEXT); CREATE TABLE market (Market_ID NUMBER); CREATE TABLE film_market_estimation (Film_ID NUMBER, Market_ID NUMBER, Estimation_ID NUMBER, Year NUMBER, Type TEXT);"
      },
      {
        "question": "please list the years of film market estimations from Japan.",
        "query": "SELECT t1.year FROM film_market_estimation AS t1 JOIN market AS t2 ON t1.market_id = t2.market_id WHERE t2.country = \"Japan\"",
        "schema": "CREATE TABLE film_market_estimation (Market_ID NUMBER, Year NUMBER, Type TEXT, Estimation_ID NUMBER, Film_ID NUMBER); CREATE TABLE film (Title TEXT, Film_ID NUMBER); CREATE TABLE market (Country TEXT, Market_ID NUMBER);"
      },
      {
        "question": "please list the years of film market estimations when the market is in country \"Japan\" in descending order.",
        "query": "SELECT t1.year FROM film_market_estimation AS t1 JOIN market AS t2 ON t1.market_id = t2.market_id WHERE t2.country = \"Japan\" ORDER BY t1.year DESC",
        "schema": "CREATE TABLE market (Market_ID NUMBER, Country TEXT); CREATE TABLE film_market_estimation (Estimation_ID NUMBER, Film_ID NUMBER, Year NUMBER, Market_ID NUMBER, Type TEXT); CREATE TABLE film (Title TEXT, Film_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Hello, which films where made in 1995?",
        "query": "SELECT * FROM film AS t1 JOIN film_market_estimation AS t2 ON t1.film_id = t2.film_id WHERE t2.year = 1995",
        "schema": "CREATE TABLE film_market_estimation (Year NUMBER, Film_ID NUMBER); CREATE TABLE film (Film_ID NUMBER, Title TEXT, Studio TEXT);"
      },
      {
        "question": "Who was the distinct director of ET the Extra-Terrestrial?",
        "query": "SELECT director FROM film WHERE title = 'ET the Extra-Terrestrial'",
        "schema": "CREATE TABLE film (Director TEXT, Film_ID NUMBER, Studio TEXT, Title TEXT); CREATE TABLE film_market_estimation (Market_ID NUMBER, Year NUMBER, Film_ID NUMBER, Estimation_ID NUMBER);"
      },
      {
        "question": "Can you show me Market estimation for the year 1995?",
        "query": "SELECT low_estimate, high_estimate FROM film_market_estimation WHERE YEAR = 1995",
        "schema": "CREATE TABLE market (Market_ID NUMBER); CREATE TABLE film (Film_ID NUMBER, Director TEXT, Title TEXT, Studio TEXT); CREATE TABLE film_market_estimation (Low_Estimate NUMBER, Year NUMBER, High_Estimate NUMBER, Estimation_ID NUMBER, Film_ID NUMBER, Market_ID NUMBER);"
      }
    ],
    [
      {
        "question": "how many country participate in the market?",
        "query": "SELECT COUNT ( DISTINCT country ) FROM market",
        "schema": "CREATE TABLE film_market_estimation (Market_ID NUMBER); CREATE TABLE market (Market_ID NUMBER, Country TEXT);"
      },
      {
        "question": "how many directors of the films never presented in china?",
        "query": "SELECT COUNT ( director ) FROM film WHERE film_id NOT IN ( SELECT film_id FROM film_market_estimation AS t1 JOIN market AS t2 ON t1.market_id = t2.market_id WHERE country = 'China' )",
        "schema": "CREATE TABLE market (Country TEXT, Market_ID NUMBER, Number_cities NUMBER); CREATE TABLE film (Title TEXT, Film_ID NUMBER, Director TEXT); CREATE TABLE film_market_estimation (Market_ID NUMBER, Film_ID NUMBER);"
      },
      {
        "question": "how many titles were never presented in china?",
        "query": "SELECT COUNT ( title ) FROM film WHERE film_id NOT IN ( SELECT film_id FROM film_market_estimation AS t1 JOIN market AS t2 ON t1.market_id = t2.market_id WHERE country = 'China' )",
        "schema": "CREATE TABLE film_market_estimation (Market_ID NUMBER, Film_ID NUMBER, Estimation_ID NUMBER); CREATE TABLE film (Director TEXT, Title TEXT, Film_ID NUMBER); CREATE TABLE market (Number_cities NUMBER, Market_ID NUMBER, Country TEXT);"
      }
    ]
  ],
  "department_store": [
    [
      {
        "question": "how many order items there",
        "query": "SELECT COUNT ( * ) FROM order_items",
        "schema": "CREATE TABLE Products (product_type_code TEXT, product_id NUMBER, product_name TEXT); CREATE TABLE Customer_Orders (customer_id NUMBER, order_id NUMBER); CREATE TABLE Order_Items (order_id NUMBER, product_id NUMBER, order_item_id NUMBER); CREATE TABLE Product_Suppliers (product_id NUMBER); CREATE TABLE Customers (customer_id NUMBER, customer_code TEXT); CREATE TABLE Departments (department_id NUMBER); CREATE TABLE Department_Stores (dept_store_id NUMBER); CREATE TABLE Staff (staff_id NUMBER); CREATE TABLE Staff_Department_Assignments (department_id NUMBER, staff_id NUMBER);"
      },
      {
        "question": "how many order id from product id 7",
        "query": "SELECT COUNT ( * ) FROM order_items WHERE product_id = 7",
        "schema": "CREATE TABLE Staff_Department_Assignments (staff_id NUMBER, department_id NUMBER); CREATE TABLE Departments (department_id NUMBER); CREATE TABLE Staff (staff_id NUMBER); CREATE TABLE Order_Items (product_id NUMBER, order_item_id NUMBER, order_id NUMBER); CREATE TABLE Product_Suppliers (product_id NUMBER); CREATE TABLE Department_Stores (dept_store_id NUMBER); CREATE TABLE Customers (customer_id NUMBER, customer_code TEXT); CREATE TABLE Products (product_name TEXT, product_type_code TEXT, product_id NUMBER); CREATE TABLE Customer_Orders (customer_id NUMBER, order_id NUMBER);"
      },
      {
        "question": "how many order id from order item id 2",
        "query": "SELECT COUNT ( * ) FROM order_items WHERE order_item_id = 2",
        "schema": "CREATE TABLE Department_Stores (dept_store_id NUMBER); CREATE TABLE Staff_Department_Assignments (department_id NUMBER, staff_id NUMBER); CREATE TABLE Products (product_name TEXT, product_type_code TEXT, product_id NUMBER); CREATE TABLE Customer_Orders (order_id NUMBER, customer_id NUMBER); CREATE TABLE Departments (department_id NUMBER); CREATE TABLE Product_Suppliers (product_id NUMBER); CREATE TABLE Customers (customer_code TEXT, customer_id NUMBER); CREATE TABLE Order_Items (order_id NUMBER, product_id NUMBER, order_item_id NUMBER); CREATE TABLE Staff (staff_id NUMBER);"
      }
    ],
    [
      {
        "question": "What are id and name of the products whose price is lower than 600?",
        "query": "SELECT product_id , product_name FROM products WHERE product_price < 600",
        "schema": "CREATE TABLE Customers (customer_name TEXT, customer_id NUMBER); CREATE TABLE Products (product_id NUMBER, product_name TEXT, product_price NUMBER); CREATE TABLE Product_Suppliers (product_id NUMBER, total_value_purchased NUMBER); CREATE TABLE Order_Items (product_id NUMBER);"
      },
      {
        "question": "What are id and name of the products whose price is higher than 900?",
        "query": "SELECT product_id , product_name FROM products WHERE product_price > 900",
        "schema": "CREATE TABLE Products (product_name TEXT, product_price NUMBER, product_id NUMBER); CREATE TABLE Product_Suppliers (product_id NUMBER, total_value_purchased NUMBER); CREATE TABLE Order_Items (product_id NUMBER); CREATE TABLE Customers (customer_id NUMBER, customer_name TEXT);"
      },
      {
        "question": "How many products have price lower than 600 or higher than 900?",
        "query": "SELECT COUNT ( * ) FROM products WHERE product_price < 600 OR product_price > 900",
        "schema": "CREATE TABLE Customers (customer_name TEXT, customer_id NUMBER); CREATE TABLE Order_Items (product_id NUMBER); CREATE TABLE Product_Suppliers (product_id NUMBER, total_value_purchased NUMBER); CREATE TABLE Products (product_price NUMBER, product_id NUMBER, product_name TEXT);"
      }
    ],
    [
      {
        "question": "what is the name of the customer of customer code 401",
        "query": "SELECT customer_name FROM customers WHERE customer_code = 401",
        "schema": "CREATE TABLE Customer_Addresses (customer_id NUMBER); CREATE TABLE Customers (customer_code TEXT, customer_id NUMBER, customer_name TEXT);"
      },
      {
        "question": "what is address of the customer Ahmed?",
        "query": "SELECT customer_address FROM customers WHERE customer_name = 'Ahmed'",
        "schema": "CREATE TABLE Customers (customer_name TEXT, customer_address TEXT, customer_code TEXT, customer_id NUMBER); CREATE TABLE Addresses (address_id NUMBER, address_details TEXT); CREATE TABLE Customer_Addresses (customer_id NUMBER, address_id NUMBER); CREATE TABLE Department_Stores (store_address TEXT);"
      },
      {
        "question": "what is the address of the customer lukas?",
        "query": "SELECT customer_address FROM customers WHERE customer_name = 'Lukas'",
        "schema": "CREATE TABLE Customers (customer_name TEXT, customer_code TEXT, customer_id NUMBER, customer_address TEXT); CREATE TABLE Addresses (address_id NUMBER, address_details TEXT); CREATE TABLE Customer_Addresses (customer_id NUMBER, address_id NUMBER); CREATE TABLE Department_Stores (store_address TEXT);"
      },
      {
        "question": "what is customer code of lukas?",
        "query": "SELECT customer_code FROM customers WHERE customer_name = 'Lukas'",
        "schema": "CREATE TABLE Department_Stores (store_address TEXT); CREATE TABLE Customers (customer_id NUMBER, customer_name TEXT, customer_address TEXT, customer_code TEXT); CREATE TABLE Addresses (address_id NUMBER, address_details TEXT); CREATE TABLE Customer_Addresses (customer_id NUMBER, address_id NUMBER);"
      }
    ],
    [
      {
        "question": "List the name of all suppliers in alphabetical order of their addresses.",
        "query": "SELECT t1.supplier_name FROM suppliers AS t1 JOIN supplier_addresses AS t2 ON t1.supplier_id = t2.supplier_id JOIN addresses AS t3 ON t2.address_id = t3.address_id ORDER BY t3.address_details",
        "schema": "CREATE TABLE Addresses (address_details TEXT, address_id NUMBER); CREATE TABLE Customers (customer_name TEXT, customer_address TEXT, customer_id NUMBER); CREATE TABLE Product_Suppliers (supplier_id NUMBER); CREATE TABLE Suppliers (supplier_phone TEXT, supplier_id NUMBER, supplier_name TEXT); CREATE TABLE Supplier_Addresses (supplier_id NUMBER, address_id NUMBER); CREATE TABLE Department_Stores (store_address TEXT); CREATE TABLE Customer_Addresses (address_id NUMBER, customer_id NUMBER);"
      },
      {
        "question": "And their phone numbers?",
        "query": "SELECT t1.supplier_phone FROM suppliers AS t1 JOIN supplier_addresses AS t2 ON t1.supplier_id = t2.supplier_id JOIN addresses AS t3 ON t2.address_id = t3.address_id ORDER BY t3.address_details",
        "schema": "CREATE TABLE Product_Suppliers (supplier_id NUMBER); CREATE TABLE Department_Stores (store_address TEXT); CREATE TABLE Supplier_Addresses (address_id NUMBER, supplier_id NUMBER); CREATE TABLE Addresses (address_id NUMBER, address_details TEXT); CREATE TABLE Suppliers (supplier_phone TEXT, supplier_id NUMBER, supplier_name TEXT); CREATE TABLE Customer_Addresses (address_id NUMBER, customer_id NUMBER); CREATE TABLE Customers (customer_phone TEXT, customer_id NUMBER, customer_name TEXT, customer_address TEXT);"
      },
      {
        "question": "What states is Tesco located in? | do you mean the address id or the address details? | The address details.",
        "query": "SELECT t3.address_details FROM suppliers AS t1 JOIN supplier_addresses AS t2 ON t1.supplier_id = t2.supplier_id JOIN addresses AS t3 ON t2.address_id = t3.address_id WHERE t1.supplier_name = 'Tesco'",
        "schema": "CREATE TABLE Addresses (address_id NUMBER, address_details TEXT); CREATE TABLE Product_Suppliers (supplier_id NUMBER); CREATE TABLE Department_Stores (store_name TEXT, store_address TEXT, store_phone TEXT); CREATE TABLE Supplier_Addresses (supplier_id NUMBER, address_id NUMBER); CREATE TABLE Customer_Addresses (customer_id NUMBER, address_id NUMBER); CREATE TABLE Suppliers (supplier_name TEXT, supplier_id NUMBER, supplier_phone TEXT); CREATE TABLE Customers (customer_id NUMBER, customer_phone TEXT, customer_address TEXT, customer_name TEXT);"
      },
      {
        "question": "How about Lidl?",
        "query": "SELECT t3.address_details FROM suppliers AS t1 JOIN supplier_addresses AS t2 ON t1.supplier_id = t2.supplier_id JOIN addresses AS t3 ON t2.address_id = t3.address_id WHERE t1.supplier_name = 'Lidl'",
        "schema": "CREATE TABLE Customers (customer_id NUMBER, customer_phone TEXT, customer_address TEXT, customer_name TEXT); CREATE TABLE Supplier_Addresses (supplier_id NUMBER, address_id NUMBER); CREATE TABLE Suppliers (supplier_phone TEXT, supplier_name TEXT, supplier_id NUMBER); CREATE TABLE Customer_Addresses (address_id NUMBER, customer_id NUMBER); CREATE TABLE Department_Stores (store_name TEXT, store_address TEXT, store_phone TEXT); CREATE TABLE Addresses (address_id NUMBER, address_details TEXT); CREATE TABLE Product_Suppliers (supplier_id NUMBER);"
      }
    ],
    [
      {
        "question": "What are the average amount purchased and value purchased for the supplier who supplies the most products",
        "query": "SELECT AVG ( total_amount_purchased ) , AVG ( total_value_purchased ) FROM product_suppliers WHERE supplier_id = ( SELECT supplier_id FROM product_suppliers GROUP BY supplier_id ORDER BY COUNT ( * ) DESC LIMIT 1 )",
        "schema": "CREATE TABLE Product_Suppliers (supplier_id NUMBER, total_amount_purchased TEXT, product_id NUMBER, total_value_purchased NUMBER); CREATE TABLE Customer_Orders (customer_id NUMBER, order_id NUMBER); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Suppliers (supplier_id NUMBER, supplier_name TEXT); CREATE TABLE Products (product_price NUMBER, product_id NUMBER); CREATE TABLE Order_Items (order_id NUMBER, order_item_id NUMBER, product_id NUMBER);"
      },
      {
        "question": "How about for the supplier who supplies the least products? | Did  you  want to get the supplier id  who supplies the least products? | I want the average amount purchased and value purchased for the supplier who supplies the least products",
        "query": "SELECT AVG ( total_amount_purchased ) , AVG ( total_value_purchased ) FROM product_suppliers WHERE supplier_id = ( SELECT supplier_id FROM product_suppliers GROUP BY supplier_id ORDER BY COUNT ( * ) LIMIT 1 )",
        "schema": "CREATE TABLE Customer_Orders (customer_id NUMBER, order_id NUMBER); CREATE TABLE Order_Items (order_id NUMBER, order_item_id NUMBER, product_id NUMBER); CREATE TABLE Products (product_id NUMBER, product_price NUMBER); CREATE TABLE Product_Suppliers (product_id NUMBER, total_value_purchased NUMBER, total_amount_purchased TEXT, supplier_id NUMBER); CREATE TABLE Suppliers (supplier_name TEXT, supplier_id NUMBER); CREATE TABLE Customers (customer_id NUMBER);"
      },
      {
        "question": "What is the supplier id who supplies the least products?",
        "query": "SELECT DISTINCT supplier_id FROM product_suppliers WHERE supplier_id = ( SELECT supplier_id FROM product_suppliers GROUP BY supplier_id ORDER BY COUNT ( * ) LIMIT 1 )",
        "schema": "CREATE TABLE Customer_Orders (order_id NUMBER, customer_id NUMBER); CREATE TABLE Suppliers (supplier_name TEXT, supplier_id NUMBER); CREATE TABLE Order_Items (product_id NUMBER, order_item_id NUMBER, order_id NUMBER); CREATE TABLE Product_Suppliers (total_value_purchased NUMBER, product_id NUMBER, supplier_id NUMBER, total_amount_purchased TEXT); CREATE TABLE Products (product_price NUMBER, product_id NUMBER); CREATE TABLE Customers (customer_id NUMBER);"
      },
      {
        "question": "What is the total value purchased for supplier id 3",
        "query": "SELECT SUM ( total_value_purchased ) FROM product_suppliers WHERE supplier_id = 3",
        "schema": "CREATE TABLE Suppliers (supplier_name TEXT, supplier_id NUMBER); CREATE TABLE Product_Suppliers (supplier_id NUMBER, total_amount_purchased TEXT, product_id NUMBER, total_value_purchased NUMBER); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Customer_Orders (order_id NUMBER, customer_id NUMBER); CREATE TABLE Products (product_id NUMBER, product_price NUMBER); CREATE TABLE Order_Items (product_id NUMBER, order_id NUMBER, order_item_id NUMBER);"
      },
      {
        "question": "What is the \"date supplied to\" of supplier id 3?",
        "query": "SELECT date_supplied_to FROM product_suppliers WHERE supplier_id = 3",
        "schema": "CREATE TABLE Customer_Orders (order_id NUMBER, customer_id NUMBER); CREATE TABLE Products (product_price NUMBER, product_id NUMBER); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Suppliers (supplier_name TEXT, supplier_id NUMBER); CREATE TABLE Product_Suppliers (product_id NUMBER, total_amount_purchased TEXT, date_supplied_from TIME, total_value_purchased NUMBER, date_supplied_to TIME, supplier_id NUMBER); CREATE TABLE Order_Items (order_item_id NUMBER, order_id NUMBER, product_id NUMBER);"
      }
    ],
    [
      {
        "question": "Find the id of suppliers whose average amount purchased for each product is above 50000 or below 30000",
        "query": "SELECT supplier_id FROM product_suppliers GROUP BY supplier_id HAVING AVG ( total_amount_purchased ) > 50000 OR AVG ( total_amount_purchased ) < 30000",
        "schema": "CREATE TABLE Order_Items (order_item_id NUMBER, order_id NUMBER, product_id NUMBER); CREATE TABLE Products (product_price NUMBER, product_name TEXT, product_id NUMBER); CREATE TABLE Suppliers (supplier_id NUMBER, supplier_name TEXT); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Product_Suppliers (product_id NUMBER, supplier_id NUMBER, total_value_purchased NUMBER, total_amount_purchased TEXT); CREATE TABLE Supplier_Addresses (supplier_id NUMBER); CREATE TABLE Customer_Orders (customer_id NUMBER, order_id NUMBER);"
      },
      {
        "question": "Which of those suppliers purchased less than 30000?",
        "query": "SELECT supplier_id FROM product_suppliers GROUP BY supplier_id HAVING AVG ( total_amount_purchased ) < 30000",
        "schema": "CREATE TABLE Order_Items (order_item_id NUMBER, order_id NUMBER, product_id NUMBER); CREATE TABLE Suppliers (supplier_name TEXT, supplier_id NUMBER); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Supplier_Addresses (supplier_id NUMBER); CREATE TABLE Customer_Orders (order_id NUMBER, customer_id NUMBER); CREATE TABLE Product_Suppliers (total_amount_purchased TEXT, total_value_purchased NUMBER, product_id NUMBER, supplier_id NUMBER); CREATE TABLE Products (product_id NUMBER, product_price NUMBER, product_name TEXT);"
      },
      {
        "question": "And how much was their average amount purchased for each product?",
        "query": "SELECT product_id, AVG ( total_amount_purchased ) FROM product_suppliers GROUP BY product_id",
        "schema": "CREATE TABLE Product_Suppliers (product_id NUMBER, supplier_id NUMBER, total_value_purchased NUMBER, total_amount_purchased TEXT); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Suppliers (supplier_id NUMBER, supplier_name TEXT); CREATE TABLE Supplier_Addresses (supplier_id NUMBER); CREATE TABLE Order_Items (product_id NUMBER, order_item_id NUMBER, order_id NUMBER); CREATE TABLE Products (product_id NUMBER, product_name TEXT, product_price NUMBER); CREATE TABLE Customer_Orders (order_id NUMBER, customer_id NUMBER);"
      },
      {
        "question": "What was their most recent date_supplied_to?",
        "query": "SELECT date_supplied_to FROM product_suppliers ORDER BY date_supplied_to DESC LIMIT 1",
        "schema": "CREATE TABLE Products (product_id NUMBER, product_name TEXT, product_price NUMBER); CREATE TABLE Supplier_Addresses (supplier_id NUMBER); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Product_Suppliers (date_supplied_from TIME, supplier_id NUMBER, total_value_purchased NUMBER, date_supplied_to TIME, product_id NUMBER, total_amount_purchased TEXT); CREATE TABLE Suppliers (supplier_id NUMBER, supplier_name TEXT); CREATE TABLE Customer_Orders (customer_id NUMBER, order_id NUMBER); CREATE TABLE Order_Items (order_id NUMBER, order_item_id NUMBER, product_id NUMBER);"
      }
    ],
    [
      {
        "question": "who is the department manager? | Do you want the ids of staffs who are department managers? | yes",
        "query": "SELECT staff_id FROM staff_department_assignments WHERE job_title_code = \"Department Manager\"",
        "schema": "CREATE TABLE Departments (department_name TEXT, department_id NUMBER); CREATE TABLE Staff_Department_Assignments (department_id NUMBER, job_title_code TEXT, staff_id NUMBER); CREATE TABLE Staff (staff_name TEXT, staff_id NUMBER);"
      },
      {
        "question": "which department id has the least amount of staff?",
        "query": "SELECT department_id FROM staff_department_assignments GROUP BY department_id ORDER BY COUNT ( * ) LIMIT 1",
        "schema": "CREATE TABLE Departments (department_id NUMBER, department_name TEXT); CREATE TABLE Staff (staff_id NUMBER, staff_name TEXT); CREATE TABLE Staff_Department_Assignments (department_id NUMBER, staff_id NUMBER, job_title_code TEXT);"
      }
    ],
    [
      {
        "question": "Show me id of all departments.",
        "query": "SELECT DISTINCT department_id FROM staff_department_assignments",
        "schema": "CREATE TABLE Addresses (address_id NUMBER); CREATE TABLE Staff (staff_name TEXT, staff_id NUMBER); CREATE TABLE Customers (customer_name TEXT, customer_code TEXT, customer_id NUMBER); CREATE TABLE Department_Stores (dept_store_id NUMBER, dept_store_chain_id NUMBER); CREATE TABLE Department_Store_Chain (dept_store_chain_id NUMBER); CREATE TABLE Customer_Orders (customer_id NUMBER, order_id NUMBER); CREATE TABLE Customer_Addresses (customer_id NUMBER); CREATE TABLE Staff_Department_Assignments (staff_id NUMBER, job_title_code TEXT, department_id NUMBER); CREATE TABLE Supplier_Addresses (supplier_id NUMBER, address_id NUMBER); CREATE TABLE Departments (department_id NUMBER, department_name TEXT, dept_store_id NUMBER); CREATE TABLE Products (product_id NUMBER); CREATE TABLE Product_Suppliers (supplier_id NUMBER, product_id NUMBER); CREATE TABLE Suppliers (supplier_id NUMBER);"
      },
      {
        "question": "show me the number of staff of all departments.",
        "query": "SELECT department_id,COUNT ( staff_id ) FROM staff_department_assignments GROUP BY department_id ORDER BY COUNT ( * )",
        "schema": "CREATE TABLE Customers (customer_name TEXT, customer_code TEXT, customer_id NUMBER); CREATE TABLE Supplier_Addresses (address_id NUMBER, supplier_id NUMBER); CREATE TABLE Products (product_id NUMBER); CREATE TABLE Suppliers (supplier_id NUMBER); CREATE TABLE Department_Store_Chain (dept_store_chain_id NUMBER); CREATE TABLE Staff_Department_Assignments (job_title_code TEXT, staff_id NUMBER, department_id NUMBER); CREATE TABLE Customer_Addresses (customer_id NUMBER); CREATE TABLE Addresses (address_id NUMBER); CREATE TABLE Departments (dept_store_id NUMBER, department_id NUMBER, department_name TEXT); CREATE TABLE Customer_Orders (customer_id NUMBER, order_id NUMBER); CREATE TABLE Department_Stores (dept_store_id NUMBER, dept_store_chain_id NUMBER); CREATE TABLE Staff (staff_name TEXT, staff_id NUMBER); CREATE TABLE Product_Suppliers (supplier_id NUMBER, product_id NUMBER);"
      },
      {
        "question": "show me the department with lowest staff",
        "query": "SELECT department_id FROM staff_department_assignments GROUP BY department_id ORDER BY COUNT ( * ) LIMIT 1",
        "schema": "CREATE TABLE Department_Stores (dept_store_id NUMBER, dept_store_chain_id NUMBER); CREATE TABLE Customer_Orders (order_id NUMBER, customer_id NUMBER); CREATE TABLE Addresses (address_id NUMBER); CREATE TABLE Departments (department_name TEXT, department_id NUMBER, dept_store_id NUMBER); CREATE TABLE Staff_Department_Assignments (staff_id NUMBER, job_title_code TEXT, department_id NUMBER); CREATE TABLE Department_Store_Chain (dept_store_chain_id NUMBER); CREATE TABLE Staff (staff_id NUMBER, staff_name TEXT); CREATE TABLE Customer_Addresses (customer_id NUMBER); CREATE TABLE Product_Suppliers (supplier_id NUMBER, product_id NUMBER); CREATE TABLE Products (product_id NUMBER); CREATE TABLE Customers (customer_name TEXT, customer_id NUMBER, customer_code TEXT); CREATE TABLE Supplier_Addresses (supplier_id NUMBER, address_id NUMBER); CREATE TABLE Suppliers (supplier_id NUMBER);"
      }
    ],
    [
      {
        "question": "What are the staff names with job title code Sales Person?",
        "query": "SELECT t1.staff_name FROM staff AS t1 JOIN staff_department_assignments AS t2 ON t1.staff_id = t2.staff_id WHERE t2.job_title_code = \"Sales Person\"",
        "schema": "CREATE TABLE Staff (staff_id NUMBER, staff_name TEXT); CREATE TABLE Staff_Department_Assignments (staff_id NUMBER, department_id NUMBER, job_title_code TEXT);"
      },
      {
        "question": "What are their genders? | Would you like their names and their genders? | Yes.",
        "query": "SELECT t1.staff_name , t1.staff_gender FROM staff AS t1 JOIN staff_department_assignments AS t2 ON t1.staff_id = t2.staff_id WHERE t2.job_title_code = \"Sales Person\" EXCEPT SELECT t1.staff_name , t1.staff_gender FROM staff AS t1 JOIN staff_department_assignments AS t2 ON t1.staff_id = t2.staff_id WHERE t2.job_title_code = \"Clerical Staff\"",
        "schema": "CREATE TABLE Staff (staff_id NUMBER, staff_gender TEXT, staff_name TEXT); CREATE TABLE Staff_Department_Assignments (department_id NUMBER, staff_id NUMBER, job_title_code TEXT);"
      },
      {
        "question": "What are the staff names and genders for people with job title code Sales Person?",
        "query": "SELECT t1.staff_name , t1.staff_gender FROM staff AS t1 JOIN staff_department_assignments AS t2 ON t1.staff_id = t2.staff_id WHERE t2.job_title_code = \"Sales Person\"",
        "schema": "CREATE TABLE Staff (staff_id NUMBER, staff_gender TEXT, staff_name TEXT); CREATE TABLE Departments (department_name TEXT, department_id NUMBER); CREATE TABLE Staff_Department_Assignments (job_title_code TEXT, staff_id NUMBER, department_id NUMBER);"
      },
      {
        "question": "How about with job title code Clerical Staff?",
        "query": "SELECT t1.staff_name , t1.staff_gender FROM staff AS t1 JOIN staff_department_assignments AS t2 ON t1.staff_id = t2.staff_id WHERE t2.job_title_code = \"Clerical Staff\"",
        "schema": "CREATE TABLE Staff_Department_Assignments (staff_id NUMBER, job_title_code TEXT, department_id NUMBER); CREATE TABLE Staff (staff_gender TEXT, staff_id NUMBER, staff_name TEXT); CREATE TABLE Departments (department_name TEXT, department_id NUMBER);"
      },
      {
        "question": "Which of the people with job title code Sales Person are not Clerical Staff?",
        "query": "SELECT t1.staff_name , t1.staff_gender FROM staff AS t1 JOIN staff_department_assignments AS t2 ON t1.staff_id = t2.staff_id WHERE t2.job_title_code = \"Sales Person\" EXCEPT SELECT t1.staff_name , t1.staff_gender FROM staff AS t1 JOIN staff_department_assignments AS t2 ON t1.staff_id = t2.staff_id WHERE t2.job_title_code = \"Clerical Staff\"",
        "schema": "CREATE TABLE Departments (department_name TEXT, department_id NUMBER); CREATE TABLE Staff (staff_name TEXT, staff_gender TEXT, staff_id NUMBER); CREATE TABLE Staff_Department_Assignments (job_title_code TEXT, department_id NUMBER, staff_id NUMBER);"
      }
    ],
    [
      {
        "question": "Hello there!  Can you provide me with a list of all customer names and addresses?",
        "query": "SELECT customer_name,customer_address FROM customers",
        "schema": "CREATE TABLE Addresses (address_id NUMBER, address_details TEXT); CREATE TABLE Customers (customer_name TEXT, customer_code TEXT, customer_id NUMBER, customer_address TEXT); CREATE TABLE Customer_Addresses (address_id NUMBER, customer_id NUMBER);"
      }
    ],
    [
      {
        "question": "Which items were ordered four or more times? | There is no item that was ordered four or more times | What is the id of products supplied more than 80000?",
        "query": "SELECT product_id FROM product_suppliers GROUP BY product_id HAVING SUM ( total_amount_purchased ) > 80000",
        "schema": "CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Order_Items (order_item_id NUMBER, order_id NUMBER, product_id NUMBER); CREATE TABLE Customer_Orders (order_id NUMBER, customer_id NUMBER, order_date TIME); CREATE TABLE Suppliers (supplier_name TEXT, supplier_id NUMBER); CREATE TABLE Products (product_name TEXT, product_id NUMBER, product_price NUMBER); CREATE TABLE Product_Suppliers (date_supplied_from TIME, supplier_id NUMBER, total_amount_purchased TEXT, date_supplied_to TIME, product_id NUMBER, total_value_purchased NUMBER);"
      },
      {
        "question": "What is the latest date that orders were sent by supplier id 4? | Did you mean date of supplied from or to? | Supplied to.",
        "query": "SELECT date_supplied_to FROM product_suppliers WHERE supplier_id = 4 ORDER BY date_supplied_to DESC LIMIT 1",
        "schema": "CREATE TABLE Suppliers (supplier_name TEXT, supplier_id NUMBER); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Product_Suppliers (product_id NUMBER, date_supplied_to TIME, supplier_id NUMBER, date_supplied_from TIME, total_amount_purchased TEXT, total_value_purchased NUMBER); CREATE TABLE Order_Items (product_id NUMBER, order_id NUMBER, order_item_id NUMBER); CREATE TABLE Products (product_name TEXT, product_id NUMBER, product_price NUMBER); CREATE TABLE Customer_Orders (order_id NUMBER, customer_id NUMBER, order_status_code TEXT, order_date TIME);"
      }
    ],
    [
      {
        "question": "What is the average price of all products?",
        "query": "SELECT AVG ( product_price ) FROM products",
        "schema": "CREATE TABLE Product_Suppliers (product_id NUMBER, total_value_purchased NUMBER); CREATE TABLE Products (product_type_code TEXT, product_name TEXT, product_price NUMBER, product_id NUMBER);"
      },
      {
        "question": "What is the product type of the product whose average price is greater than the average price of all products?",
        "query": "SELECT product_type_code FROM products GROUP BY product_type_code HAVING AVG ( product_price ) > ( SELECT AVG ( product_price ) FROM products )",
        "schema": "CREATE TABLE Product_Suppliers (product_id NUMBER, total_value_purchased NUMBER); CREATE TABLE Products (product_name TEXT, product_id NUMBER, product_price NUMBER, product_type_code TEXT);"
      },
      {
        "question": "What is the average price of that product with type code Hardware?",
        "query": "SELECT AVG ( product_price ) FROM products WHERE product_type_code = \"Hardware\"",
        "schema": "CREATE TABLE Products (product_price NUMBER, product_id NUMBER, product_name TEXT, product_type_code TEXT); CREATE TABLE Product_Suppliers (total_value_purchased NUMBER, product_id NUMBER);"
      },
      {
        "question": "What is the average price of all products with the type code \"clothes\"?",
        "query": "SELECT AVG ( product_price ) FROM products WHERE product_type_code = \"Clothes\"",
        "schema": "CREATE TABLE Products (product_id NUMBER, product_price NUMBER, product_name TEXT, product_type_code TEXT); CREATE TABLE Product_Suppliers (total_value_purchased NUMBER, product_id NUMBER);"
      }
    ],
    [
      {
        "question": "what is the date assigned to of the department managers?",
        "query": "SELECT date_assigned_to FROM staff_department_assignments WHERE job_title_code = 'Department Manager'",
        "schema": "CREATE TABLE Staff_Department_Assignments (date_assigned_from TIME, department_id NUMBER, date_assigned_to TIME, job_title_code TEXT, staff_id NUMBER); CREATE TABLE Customer_Addresses (date_to TIME); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Departments (department_id NUMBER, department_name TEXT); CREATE TABLE Staff (staff_id NUMBER, staff_name TEXT);"
      },
      {
        "question": "list the name of staff who has been assigned multiple jobs?",
        "query": "SELECT t1.staff_name FROM staff AS t1 JOIN staff_department_assignments AS t2 ON t1.staff_id = t2.staff_id GROUP BY t2.staff_id HAVING COUNT ( * ) > 1",
        "schema": "CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Departments (department_id NUMBER, department_name TEXT); CREATE TABLE Staff_Department_Assignments (staff_id NUMBER, job_title_code TEXT, department_id NUMBER, date_assigned_from TIME, date_assigned_to TIME); CREATE TABLE Customer_Addresses (date_to TIME); CREATE TABLE Staff (staff_id NUMBER, staff_name TEXT);"
      },
      {
        "question": "what is the date assigned from sales person?",
        "query": "SELECT date_assigned_from FROM staff_department_assignments WHERE job_title_code = 'Sales Person'",
        "schema": "CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Staff (staff_name TEXT, staff_id NUMBER); CREATE TABLE Departments (department_name TEXT, department_id NUMBER); CREATE TABLE Customer_Addresses (date_to TIME); CREATE TABLE Staff_Department_Assignments (date_assigned_to TIME, job_title_code TEXT, staff_id NUMBER, date_assigned_from TIME, department_id NUMBER);"
      }
    ],
    [
      {
        "question": "Hi there!  Can you show me a list of all of the customer IDs and the corresponding customer names?",
        "query": "SELECT customer_name , customer_id FROM customers",
        "schema": "CREATE TABLE Customers (customer_name TEXT, customer_id NUMBER, customer_code TEXT); CREATE TABLE Customer_Addresses (customer_id NUMBER); CREATE TABLE Customer_Orders (customer_id NUMBER);"
      },
      {
        "question": "Thanks!  Can you filter this list to show only the rows for customers who have an address in the state of TN?",
        "query": "SELECT customer_name , customer_id FROM customers WHERE customer_address LIKE \"%TN%\"",
        "schema": "CREATE TABLE Customers (customer_code TEXT, customer_id NUMBER, customer_name TEXT, customer_address TEXT); CREATE TABLE Customer_Addresses (customer_id NUMBER, address_id NUMBER); CREATE TABLE Addresses (address_id NUMBER); CREATE TABLE Customer_Orders (customer_id NUMBER);"
      },
      {
        "question": "Great!  Can you provide me with the customer addresses for those two customers?",
        "query": "SELECT customer_address FROM customers WHERE customer_address LIKE \"%TN%\"",
        "schema": "CREATE TABLE Addresses (address_id NUMBER, address_details TEXT); CREATE TABLE Customers (customer_code TEXT, customer_id NUMBER, customer_name TEXT, customer_address TEXT); CREATE TABLE Customer_Orders (customer_id NUMBER); CREATE TABLE Customer_Addresses (customer_id NUMBER, address_id NUMBER);"
      }
    ],
    [
      {
        "question": "Details of staff id 1? | Do you mean the staff gender and staff name of staff id 1? | yes",
        "query": "SELECT staff_gender, staff_name FROM staff WHERE staff_id = 1",
        "schema": "CREATE TABLE Staff (staff_gender TEXT, staff_name TEXT, staff_id NUMBER); CREATE TABLE Staff_Department_Assignments (department_id NUMBER, staff_id NUMBER);"
      },
      {
        "question": "Give the id and name of the staff who has been assigned for the shortest period?",
        "query": "SELECT t1.staff_id , t1.staff_name FROM staff AS t1 JOIN staff_department_assignments AS t2 ON t1.staff_id = t2.staff_id ORDER BY date_assigned_to - date_assigned_from LIMIT 1",
        "schema": "CREATE TABLE Staff_Department_Assignments (date_assigned_from TIME, staff_id NUMBER, department_id NUMBER, date_assigned_to TIME, job_title_code TEXT); CREATE TABLE Staff (staff_gender TEXT, staff_id NUMBER, staff_name TEXT);"
      },
      {
        "question": "job title code for staff id? | Do you mean all the job title codes for all the staff ids? | yes",
        "query": "SELECT job_title_code FROM staff_department_assignments",
        "schema": "CREATE TABLE Staff (staff_id NUMBER, staff_gender TEXT, staff_name TEXT); CREATE TABLE Staff_Department_Assignments (date_assigned_to TIME, date_assigned_from TIME, staff_id NUMBER, job_title_code TEXT, department_id NUMBER);"
      }
    ],
    [
      {
        "question": "Find the id of customers whose address contains WY state and do not use credit card for payment.",
        "query": "SELECT customer_id FROM customers WHERE customer_address LIKE \"%WY%\" AND payment_method_code ! = \"Credit Card\"",
        "schema": "CREATE TABLE Customers (customer_name TEXT, customer_address TEXT, payment_method_code TEXT, customer_code TEXT, customer_id NUMBER); CREATE TABLE Customer_Addresses (customer_id NUMBER, address_id NUMBER); CREATE TABLE Customer_Orders (customer_id NUMBER); CREATE TABLE Addresses (address_details TEXT, address_id NUMBER);"
      },
      {
        "question": "Can I have the customer's name please?",
        "query": "SELECT customer_name FROM customers WHERE customer_address LIKE \"%WY%\" AND payment_method_code ! = \"Credit Card\"",
        "schema": "CREATE TABLE Addresses (address_details TEXT, address_id NUMBER); CREATE TABLE Customer_Orders (customer_id NUMBER); CREATE TABLE Customers (payment_method_code TEXT, customer_address TEXT, customer_name TEXT, customer_id NUMBER, customer_code TEXT); CREATE TABLE Customer_Addresses (address_id NUMBER, customer_id NUMBER);"
      },
      {
        "question": "Please find the id and name of customers whose address contains WY state and use credit card for payment.",
        "query": "SELECT customer_id , customer_name FROM customers WHERE customer_address LIKE \"%WY%\" AND payment_method_code ! = \"Credit Card\"",
        "schema": "CREATE TABLE Customers (payment_method_code TEXT, customer_code TEXT, customer_name TEXT, customer_id NUMBER, customer_address TEXT); CREATE TABLE Addresses (address_id NUMBER, address_details TEXT); CREATE TABLE Customer_Addresses (customer_id NUMBER, address_id NUMBER); CREATE TABLE Customer_Orders (customer_id NUMBER);"
      },
      {
        "question": "Hmm. Can you please give me his email address and phone?",
        "query": "SELECT customer_email, customer_phone FROM customers WHERE customer_address LIKE \"%WY%\" AND payment_method_code ! = \"Credit Card\"",
        "schema": "CREATE TABLE Addresses (address_id NUMBER, address_details TEXT); CREATE TABLE Customer_Addresses (address_id NUMBER, customer_id NUMBER); CREATE TABLE Customer_Orders (customer_id NUMBER); CREATE TABLE Customers (customer_phone TEXT, customer_address TEXT, customer_code TEXT, payment_method_code TEXT, customer_id NUMBER, customer_email TEXT, customer_name TEXT);"
      }
    ],
    [
      {
        "question": "Hello!  Can you provide me with a list of all the different product types?",
        "query": "SELECT DISTINCT product_type_code FROM products GROUP BY product_type_code",
        "schema": "CREATE TABLE Customers (customer_code TEXT, customer_id NUMBER); CREATE TABLE Products (product_id NUMBER, product_name TEXT, product_type_code TEXT); CREATE TABLE Product_Suppliers (product_id NUMBER);"
      },
      {
        "question": "Sweet!  Can you update this list to show what the maximum product price is for both Clothes and Hardware, and include the minimum product price for each?",
        "query": "SELECT product_type_code , MAX ( product_price ) , MIN ( product_price ) FROM products GROUP BY product_type_code",
        "schema": "CREATE TABLE Products (product_price NUMBER, product_name TEXT, product_type_code TEXT, product_id NUMBER); CREATE TABLE Customers (customer_id NUMBER, customer_code TEXT); CREATE TABLE Product_Suppliers (product_id NUMBER);"
      },
      {
        "question": "Cool!  Can you show me a list of all of the different product names?",
        "query": "SELECT DISTINCT product_name FROM products",
        "schema": "CREATE TABLE Product_Suppliers (product_id NUMBER); CREATE TABLE Products (product_price NUMBER, product_id NUMBER, product_name TEXT, product_type_code TEXT); CREATE TABLE Customers (customer_code TEXT, customer_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show me all products supplied by supplier id 2. | Do you mean the product ID of all products supplied by supplier id 2? | Yes",
        "query": "SELECT product_id FROM product_suppliers WHERE supplier_id = 2",
        "schema": "CREATE TABLE Suppliers (supplier_id NUMBER, supplier_name TEXT); CREATE TABLE Products (product_id NUMBER, product_name TEXT); CREATE TABLE Product_Suppliers (supplier_id NUMBER, product_id NUMBER);"
      },
      {
        "question": "What is the average price of all products?",
        "query": "SELECT AVG ( product_price ) FROM products",
        "schema": "CREATE TABLE Products (product_id NUMBER, product_name TEXT, product_price NUMBER); CREATE TABLE Suppliers (supplier_id NUMBER, supplier_name TEXT); CREATE TABLE Product_Suppliers (supplier_id NUMBER, total_value_purchased NUMBER, product_id NUMBER);"
      },
      {
        "question": "Which of the previous products are more expensive than the average price of all products? | Do you mean to find the names of those products that are more expensive than the average price of all products? | Only the names of those products supplied by supplier id 2.",
        "query": "SELECT t1.product_id FROM product_suppliers AS t1 JOIN products AS t2 ON t1.product_id = t2.product_id WHERE t1.supplier_id = 2 AND t2.product_price > ( SELECT AVG ( product_price ) FROM products )",
        "schema": "CREATE TABLE Suppliers (supplier_id NUMBER, supplier_name TEXT); CREATE TABLE Product_Suppliers (total_value_purchased NUMBER, supplier_id NUMBER, product_id NUMBER); CREATE TABLE Products (product_id NUMBER, product_price NUMBER, product_name TEXT);"
      },
      {
        "question": "How much does product ID 8 cost?",
        "query": "SELECT product_price FROM products WHERE product_id = 8",
        "schema": "CREATE TABLE Product_Suppliers (total_value_purchased NUMBER, product_id NUMBER, supplier_id NUMBER); CREATE TABLE Suppliers (supplier_name TEXT, supplier_id NUMBER); CREATE TABLE Products (product_name TEXT, product_id NUMBER, product_price NUMBER);"
      },
      {
        "question": "And product ID 15?",
        "query": "SELECT product_price FROM products WHERE product_id = 15",
        "schema": "CREATE TABLE Suppliers (supplier_id NUMBER, supplier_name TEXT); CREATE TABLE Product_Suppliers (total_value_purchased NUMBER, supplier_id NUMBER, product_id NUMBER); CREATE TABLE Products (product_price NUMBER, product_name TEXT, product_id NUMBER);"
      }
    ],
    [
      {
        "question": "how many products on the table",
        "query": "SELECT COUNT ( * ) FROM products",
        "schema": "CREATE TABLE Order_Items (product_id NUMBER); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Product_Suppliers (product_id NUMBER); CREATE TABLE Products (product_price NUMBER, product_id NUMBER, product_name TEXT, product_type_code TEXT);"
      },
      {
        "question": "what are all the products name on this table",
        "query": "SELECT product_name FROM products",
        "schema": "CREATE TABLE Order_Items (product_id NUMBER); CREATE TABLE Product_Suppliers (product_id NUMBER); CREATE TABLE Products (product_type_code TEXT, product_id NUMBER, product_name TEXT, product_price NUMBER); CREATE TABLE Customers (customer_id NUMBER);"
      },
      {
        "question": "what is the product price of red jeans",
        "query": "SELECT product_price FROM products WHERE product_name = \"red jeans\"",
        "schema": "CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Products (product_price NUMBER, product_type_code TEXT, product_name TEXT, product_id NUMBER); CREATE TABLE Order_Items (product_id NUMBER); CREATE TABLE Product_Suppliers (total_value_purchased NUMBER, product_id NUMBER);"
      },
      {
        "question": "which product is highest price on the table | Which kinds of product information do you want? | i want to the black jeans product price",
        "query": "SELECT product_price FROM products WHERE product_name = \"black jeans\"",
        "schema": "CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Product_Suppliers (product_id NUMBER, total_value_purchased NUMBER); CREATE TABLE Products (product_price NUMBER, product_type_code TEXT, product_id NUMBER, product_name TEXT); CREATE TABLE Order_Items (product_id NUMBER);"
      }
    ],
    [
      {
        "question": "how many customers are presented on the table",
        "query": "SELECT COUNT ( * ) FROM customers",
        "schema": "CREATE TABLE Customers (customer_code TEXT, customer_id NUMBER, customer_name TEXT); CREATE TABLE Customer_Orders (order_id NUMBER, customer_id NUMBER); CREATE TABLE Customer_Addresses (customer_id NUMBER);"
      },
      {
        "question": "please list out the customers name",
        "query": "SELECT customer_name FROM customers",
        "schema": "CREATE TABLE Customer_Addresses (customer_id NUMBER); CREATE TABLE Customer_Orders (order_id NUMBER, customer_id NUMBER); CREATE TABLE Customers (customer_id NUMBER, customer_code TEXT, customer_name TEXT);"
      },
      {
        "question": "what is the highest customer code on the table",
        "query": "SELECT MAX ( customer_code ) FROM customers",
        "schema": "CREATE TABLE Customers (customer_code TEXT, customer_id NUMBER, customer_name TEXT); CREATE TABLE Customer_Orders (order_id NUMBER, customer_id NUMBER); CREATE TABLE Customer_Addresses (customer_id NUMBER);"
      },
      {
        "question": "what is the address of Ahmed",
        "query": "SELECT customer_address FROM customers WHERE customer_name = \"Ahmed\"",
        "schema": "CREATE TABLE Customer_Addresses (customer_id NUMBER, address_id NUMBER); CREATE TABLE Customer_Orders (order_id NUMBER, customer_id NUMBER); CREATE TABLE Department_Stores (store_address TEXT); CREATE TABLE Supplier_Addresses (address_id NUMBER); CREATE TABLE Customers (customer_code TEXT, customer_address TEXT, customer_name TEXT, customer_id NUMBER); CREATE TABLE Staff (staff_name TEXT); CREATE TABLE Addresses (address_id NUMBER, address_details TEXT);"
      }
    ],
    [
      {
        "question": "Can you find the name of the most expensive hardware product please?",
        "query": "SELECT product_name FROM products WHERE product_type_code = 'Hardware' ORDER BY product_price DESC LIMIT 1",
        "schema": "CREATE TABLE Products (product_id NUMBER, product_price NUMBER, product_type_code TEXT, product_name TEXT); CREATE TABLE Customers (customer_code TEXT, customer_name TEXT, customer_id NUMBER); CREATE TABLE Customer_Orders (customer_id NUMBER); CREATE TABLE Product_Suppliers (product_id NUMBER, total_value_purchased NUMBER);"
      },
      {
        "question": "What is its product price?",
        "query": "SELECT product_price FROM products WHERE product_type_code = 'Hardware' ORDER BY product_price DESC LIMIT 1",
        "schema": "CREATE TABLE Customers (customer_id NUMBER, customer_code TEXT, customer_name TEXT); CREATE TABLE Order_Items (product_id NUMBER); CREATE TABLE Customer_Orders (customer_id NUMBER); CREATE TABLE Product_Suppliers (total_value_purchased NUMBER, product_id NUMBER); CREATE TABLE Products (product_name TEXT, product_id NUMBER, product_type_code TEXT, product_price NUMBER);"
      },
      {
        "question": "What is the product name and price for the least expensive hardware product?",
        "query": "SELECT product_name,product_price FROM products WHERE product_type_code = 'Hardware' ORDER BY product_price ASC LIMIT 1",
        "schema": "CREATE TABLE Customer_Orders (customer_id NUMBER); CREATE TABLE Customers (customer_name TEXT, customer_id NUMBER, customer_code TEXT); CREATE TABLE Products (product_id NUMBER, product_type_code TEXT, product_name TEXT, product_price NUMBER); CREATE TABLE Order_Items (product_id NUMBER); CREATE TABLE Product_Suppliers (product_id NUMBER, total_value_purchased NUMBER);"
      },
      {
        "question": "What is the average price of all hardware products?",
        "query": "SELECT AVG ( product_price ) FROM products WHERE product_type_code = 'Hardware'",
        "schema": "CREATE TABLE Order_Items (product_id NUMBER); CREATE TABLE Products (product_id NUMBER, product_price NUMBER, product_name TEXT, product_type_code TEXT); CREATE TABLE Customer_Orders (customer_id NUMBER); CREATE TABLE Product_Suppliers (total_value_purchased NUMBER, product_id NUMBER); CREATE TABLE Customers (customer_name TEXT, customer_code TEXT, customer_id NUMBER);"
      },
      {
        "question": "What is the average price of all clothes products?",
        "query": "SELECT AVG ( product_price ) FROM products WHERE product_type_code = 'Clothes'",
        "schema": "CREATE TABLE Customer_Orders (customer_id NUMBER); CREATE TABLE Products (product_id NUMBER, product_price NUMBER, product_name TEXT, product_type_code TEXT); CREATE TABLE Product_Suppliers (product_id NUMBER, total_value_purchased NUMBER); CREATE TABLE Customers (customer_name TEXT, customer_id NUMBER, customer_code TEXT); CREATE TABLE Order_Items (product_id NUMBER);"
      }
    ],
    [
      {
        "question": "What is the name and gender of the staff who has been assigned the job of Sales Person but never Clerical Staff?",
        "query": "SELECT t1.staff_name , t1.staff_gender FROM staff AS t1 JOIN staff_department_assignments AS t2 ON t1.staff_id = t2.staff_id WHERE t2.job_title_code = \"Sales Person\" EXCEPT SELECT t1.staff_name , t1.staff_gender FROM staff AS t1 JOIN staff_department_assignments AS t2 ON t1.staff_id = t2.staff_id WHERE t2.job_title_code = \"Clerical Staff\"",
        "schema": "CREATE TABLE Departments (department_name TEXT, department_id NUMBER); CREATE TABLE Staff_Department_Assignments (department_id NUMBER, date_assigned_to TIME, date_assigned_from TIME, staff_id NUMBER, job_title_code TEXT); CREATE TABLE Staff (staff_gender TEXT, staff_name TEXT, staff_id NUMBER);"
      },
      {
        "question": "What's the name and gender of the staff with the job of Sales Person?",
        "query": "SELECT t1.staff_name , t1.staff_gender FROM staff AS t1 JOIN staff_department_assignments AS t2 ON t1.staff_id = t2.staff_id WHERE t2.job_title_code = \"Sales Person\"",
        "schema": "CREATE TABLE Staff (staff_gender TEXT, staff_name TEXT, staff_id NUMBER); CREATE TABLE Departments (department_name TEXT, department_id NUMBER); CREATE TABLE Staff_Department_Assignments (department_id NUMBER, date_assigned_from TIME, job_title_code TEXT, date_assigned_to TIME, staff_id NUMBER);"
      },
      {
        "question": "What's the name and gender of the staff who was never assigned to Clerical Staff.",
        "query": "SELECT t1.staff_name , t1.staff_gender FROM staff AS t1 JOIN staff_department_assignments AS t2 ON t1.staff_id = t2.staff_id EXCEPT SELECT t1.staff_name , t1.staff_gender FROM staff AS t1 JOIN staff_department_assignments AS t2 ON t1.staff_id = t2.staff_id WHERE t2.job_title_code = \"Clerical Staff\"",
        "schema": "CREATE TABLE Staff (staff_gender TEXT, staff_name TEXT, staff_id NUMBER); CREATE TABLE Departments (department_id NUMBER, department_name TEXT); CREATE TABLE Staff_Department_Assignments (staff_id NUMBER, job_title_code TEXT, date_assigned_to TIME, department_id NUMBER, date_assigned_from TIME);"
      }
    ],
    [
      {
        "question": "List all staff names with their gender...",
        "query": "SELECT staff_name, staff_gender FROM staff",
        "schema": "CREATE TABLE Staff (staff_id NUMBER, staff_gender TEXT, staff_name TEXT); CREATE TABLE Staff_Department_Assignments (staff_id NUMBER);"
      },
      {
        "question": "List all department id's with their corresponding job title code.",
        "query": "SELECT department_id, job_title_code FROM staff_department_assignments",
        "schema": "CREATE TABLE Departments (department_id NUMBER, department_name TEXT); CREATE TABLE Staff_Department_Assignments (job_title_code TEXT, department_id NUMBER, staff_id NUMBER); CREATE TABLE Staff (staff_name TEXT, staff_id NUMBER, staff_gender TEXT);"
      },
      {
        "question": "How many staffs are working as Sales Person or Clerical Staff?",
        "query": "SELECT COUNT ( * ) FROM staff AS t1 JOIN staff_department_assignments AS t2 ON t1.staff_id = t2.staff_id WHERE t2.job_title_code = \"Sales Person\" OR t2.job_title_code = \"Clerical Staff\"",
        "schema": "CREATE TABLE Departments (department_name TEXT, department_id NUMBER); CREATE TABLE Staff (staff_name TEXT, staff_gender TEXT, staff_id NUMBER); CREATE TABLE Staff_Department_Assignments (job_title_code TEXT, staff_id NUMBER, department_id NUMBER);"
      },
      {
        "question": "Find the id and name of the staff who has been assigned for the shortest period.",
        "query": "SELECT t1.staff_id , t1.staff_name FROM staff AS t1 JOIN staff_department_assignments AS t2 ON t1.staff_id = t2.staff_id ORDER BY date_assigned_to - date_assigned_from LIMIT 1",
        "schema": "CREATE TABLE Staff_Department_Assignments (date_assigned_from TIME, staff_id NUMBER, job_title_code TEXT, department_id NUMBER, date_assigned_to TIME); CREATE TABLE Departments (department_name TEXT, department_id NUMBER); CREATE TABLE Staff (staff_id NUMBER, staff_name TEXT, staff_gender TEXT);"
      }
    ],
    [
      {
        "question": "What are the names of all the products supplied by supplier id 3, please?",
        "query": "SELECT t2.product_name FROM product_suppliers AS t1 JOIN products AS t2 ON t1.product_id = t2.product_id WHERE t1.supplier_id = 3",
        "schema": "CREATE TABLE Suppliers (supplier_name TEXT, supplier_id NUMBER); CREATE TABLE Customers (customer_name TEXT); CREATE TABLE Product_Suppliers (product_id NUMBER, supplier_id NUMBER); CREATE TABLE Products (product_name TEXT, product_id NUMBER, product_type_code TEXT);"
      },
      {
        "question": "What are the product types of those?",
        "query": "SELECT t2.product_type_code FROM product_suppliers AS t1 JOIN products AS t2 ON t1.product_id = t2.product_id WHERE t1.supplier_id = 3",
        "schema": "CREATE TABLE Suppliers (supplier_name TEXT, supplier_id NUMBER); CREATE TABLE Product_Suppliers (product_id NUMBER, supplier_id NUMBER); CREATE TABLE Products (product_name TEXT, product_type_code TEXT, product_id NUMBER); CREATE TABLE Customers (customer_name TEXT);"
      },
      {
        "question": "What are the prices of those?",
        "query": "SELECT t2.product_price FROM product_suppliers AS t1 JOIN products AS t2 ON t1.product_id = t2.product_id WHERE t1.supplier_id = 3",
        "schema": "CREATE TABLE Suppliers (supplier_name TEXT, supplier_id NUMBER); CREATE TABLE Customers (customer_name TEXT); CREATE TABLE Products (product_type_code TEXT, product_name TEXT, product_id NUMBER, product_price NUMBER); CREATE TABLE Product_Suppliers (product_id NUMBER, supplier_id NUMBER, total_value_purchased NUMBER);"
      },
      {
        "question": "What are the prices of those?",
        "query": "SELECT t2.product_price FROM product_suppliers AS t1 JOIN products AS t2 ON t1.product_id = t2.product_id WHERE t1.supplier_id = 3",
        "schema": "CREATE TABLE Suppliers (supplier_name TEXT, supplier_id NUMBER); CREATE TABLE Products (product_id NUMBER, product_type_code TEXT, product_price NUMBER, product_name TEXT); CREATE TABLE Product_Suppliers (total_value_purchased NUMBER, supplier_id NUMBER, product_id NUMBER); CREATE TABLE Customers (customer_name TEXT);"
      },
      {
        "question": "What supplier id carries the product name red jeans?",
        "query": "SELECT t1.supplier_id FROM product_suppliers AS t1 JOIN products AS t2 ON t1.product_id = t2.product_id WHERE t2.product_name = 'red jeans'",
        "schema": "CREATE TABLE Customers (customer_name TEXT); CREATE TABLE Products (product_name TEXT, product_price NUMBER, product_type_code TEXT, product_id NUMBER); CREATE TABLE Product_Suppliers (supplier_id NUMBER, product_id NUMBER, total_value_purchased NUMBER); CREATE TABLE Suppliers (supplier_name TEXT, supplier_id NUMBER);"
      },
      {
        "question": "What is the total amount purchased of those?",
        "query": "SELECT t1.supplier_id,t1.total_amount_purchased FROM product_suppliers AS t1 JOIN products AS t2 ON t1.product_id = t2.product_id WHERE t2.product_name = 'red jeans'",
        "schema": "CREATE TABLE Customers (customer_name TEXT); CREATE TABLE Products (product_type_code TEXT, product_name TEXT, product_id NUMBER, product_price NUMBER); CREATE TABLE Suppliers (supplier_id NUMBER, supplier_name TEXT); CREATE TABLE Product_Suppliers (product_id NUMBER, supplier_id NUMBER, total_amount_purchased TEXT, total_value_purchased NUMBER);"
      }
    ],
    [
      {
        "question": "What product id was ordered most often?",
        "query": "SELECT product_id FROM order_items GROUP BY product_id ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Order_Items (product_id NUMBER, order_item_id NUMBER, order_id NUMBER); CREATE TABLE Products (product_name TEXT, product_id NUMBER); CREATE TABLE Customer_Orders (order_id NUMBER, customer_id NUMBER); CREATE TABLE Product_Suppliers (product_id NUMBER, supplier_id NUMBER); CREATE TABLE Customers (customer_id NUMBER);"
      },
      {
        "question": "and the product ID that was ordered least often?",
        "query": "SELECT product_id FROM order_items GROUP BY product_id ORDER BY COUNT ( * ) LIMIT 1",
        "schema": "CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Product_Suppliers (supplier_id NUMBER, product_id NUMBER); CREATE TABLE Customer_Orders (customer_id NUMBER, order_id NUMBER); CREATE TABLE Order_Items (order_item_id NUMBER, product_id NUMBER, order_id NUMBER); CREATE TABLE Products (product_id NUMBER, product_name TEXT);"
      },
      {
        "question": "How many times was product id 2 ordered?",
        "query": "SELECT COUNT ( * ) FROM order_items GROUP BY product_id HAVING product_id = \"2\"",
        "schema": "CREATE TABLE Products (product_id NUMBER, product_name TEXT); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Order_Items (order_item_id NUMBER, product_id NUMBER, order_id NUMBER); CREATE TABLE Product_Suppliers (supplier_id NUMBER, product_id NUMBER); CREATE TABLE Customer_Orders (order_id NUMBER, customer_id NUMBER);"
      },
      {
        "question": "How many times was product id 13 ordered?",
        "query": "SELECT COUNT ( * ) FROM order_items GROUP BY product_id HAVING product_id = \"13\"",
        "schema": "CREATE TABLE Order_Items (order_item_id NUMBER, product_id NUMBER, order_id NUMBER); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Products (product_name TEXT, product_id NUMBER); CREATE TABLE Product_Suppliers (supplier_id NUMBER, product_id NUMBER); CREATE TABLE Customer_Orders (customer_id NUMBER, order_id NUMBER);"
      }
    ],
    [
      {
        "question": "Who placed order after having order cancelled?",
        "query": "SELECT DISTINCT customer_id FROM customer_orders WHERE order_date > ( SELECT MIN ( order_date ) FROM customer_orders WHERE order_status_code = \"Cancelled\" )",
        "schema": "CREATE TABLE Staff (staff_id NUMBER); CREATE TABLE Customers (customer_name TEXT, customer_code TEXT, customer_id NUMBER); CREATE TABLE Customer_Orders (order_status_code TEXT, customer_id NUMBER, order_id NUMBER, order_date TIME); CREATE TABLE Order_Items (order_item_id NUMBER, order_id NUMBER);"
      },
      {
        "question": "What is the order status for order 3",
        "query": "SELECT order_status_code FROM customer_orders WHERE order_id = 3",
        "schema": "CREATE TABLE Customer_Orders (order_id NUMBER, order_date TIME, customer_id NUMBER, order_status_code TEXT); CREATE TABLE Customers (customer_id NUMBER, customer_name TEXT, customer_code TEXT); CREATE TABLE Staff (staff_id NUMBER); CREATE TABLE Order_Items (order_item_id NUMBER, order_id NUMBER);"
      }
    ],
    [
      {
        "question": "Can you please list the product which has the lowest value for product price?",
        "query": "SELECT * FROM products ORDER BY product_price LIMIT 1",
        "schema": "CREATE TABLE Product_Suppliers (total_value_purchased NUMBER, product_id NUMBER); CREATE TABLE Products (product_price NUMBER, product_type_code TEXT, product_name TEXT, product_id NUMBER); CREATE TABLE Customers (customer_id NUMBER);"
      },
      {
        "question": "Can you list only the product id and the product type please?",
        "query": "SELECT product_id , product_type_code FROM products ORDER BY product_price LIMIT 1",
        "schema": "CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Order_Items (product_id NUMBER); CREATE TABLE Products (product_price NUMBER, product_id NUMBER, product_name TEXT, product_type_code TEXT); CREATE TABLE Product_Suppliers (total_value_purchased NUMBER, product_id NUMBER);"
      }
    ],
    [
      {
        "question": "What is the id of the department store that has both marketing and managing department?",
        "query": "SELECT t2.dept_store_id FROM departments AS t1 JOIN department_stores AS t2 ON t1.dept_store_id = t2.dept_store_id WHERE t1.department_name = \"marketing\" INTERSECT SELECT t2.dept_store_id FROM departments AS t1 JOIN department_stores AS t2 ON t1.dept_store_id = t2.dept_store_id WHERE t1.department_name = \"managing\"",
        "schema": "CREATE TABLE Product_Suppliers (supplier_id NUMBER, product_id NUMBER); CREATE TABLE Customer_Addresses (customer_id NUMBER); CREATE TABLE Staff_Department_Assignments (department_id NUMBER); CREATE TABLE Suppliers (supplier_id NUMBER); CREATE TABLE Departments (department_name TEXT, department_id NUMBER, dept_store_id NUMBER); CREATE TABLE Department_Stores (dept_store_id NUMBER, dept_store_chain_id NUMBER, store_name TEXT); CREATE TABLE Products (product_id NUMBER); CREATE TABLE Customers (customer_code TEXT, customer_id NUMBER); CREATE TABLE Customer_Orders (order_id NUMBER, customer_id NUMBER); CREATE TABLE Department_Store_Chain (dept_store_chain_name TEXT, dept_store_chain_id NUMBER);"
      },
      {
        "question": "What is the name of the department store that has both marketing and managing department?",
        "query": "SELECT t2.store_name FROM departments AS t1 JOIN department_stores AS t2 ON t1.dept_store_id = t2.dept_store_id WHERE t1.department_name = \"marketing\" INTERSECT SELECT t2.store_name FROM departments AS t1 JOIN department_stores AS t2 ON t1.dept_store_id = t2.dept_store_id WHERE t1.department_name = \"managing\"",
        "schema": "CREATE TABLE Product_Suppliers (supplier_id NUMBER, product_id NUMBER); CREATE TABLE Customers (customer_code TEXT, customer_id NUMBER); CREATE TABLE Staff_Department_Assignments (department_id NUMBER); CREATE TABLE Departments (department_name TEXT, dept_store_id NUMBER, department_id NUMBER); CREATE TABLE Department_Stores (dept_store_chain_id NUMBER, dept_store_id NUMBER, store_name TEXT); CREATE TABLE Customer_Addresses (customer_id NUMBER); CREATE TABLE Customer_Orders (customer_id NUMBER, order_id NUMBER); CREATE TABLE Suppliers (supplier_id NUMBER); CREATE TABLE Products (product_id NUMBER); CREATE TABLE Department_Store_Chain (dept_store_chain_id NUMBER, dept_store_chain_name TEXT);"
      },
      {
        "question": "Can you show me all the id of the department store that has both marketing and managing department?",
        "query": "SELECT t2.dept_store_id , t2.store_name FROM departments AS t1 JOIN department_stores AS t2 ON t1.dept_store_id = t2.dept_store_id WHERE t1.department_name = \"marketing\" INTERSECT SELECT t2.dept_store_id , t2.store_name FROM departments AS t1 JOIN department_stores AS t2 ON t1.dept_store_id = t2.dept_store_id WHERE t1.department_name = \"managing\"",
        "schema": "CREATE TABLE Suppliers (supplier_id NUMBER); CREATE TABLE Staff_Department_Assignments (department_id NUMBER); CREATE TABLE Products (product_id NUMBER); CREATE TABLE Department_Store_Chain (dept_store_chain_name TEXT, dept_store_chain_id NUMBER); CREATE TABLE Product_Suppliers (supplier_id NUMBER, product_id NUMBER); CREATE TABLE Customer_Orders (order_id NUMBER, customer_id NUMBER); CREATE TABLE Departments (department_id NUMBER, department_name TEXT, dept_store_id NUMBER); CREATE TABLE Customer_Addresses (customer_id NUMBER); CREATE TABLE Customers (customer_code TEXT, customer_id NUMBER); CREATE TABLE Department_Stores (dept_store_id NUMBER, dept_store_chain_id NUMBER, store_name TEXT);"
      }
    ],
    [
      {
        "question": "what is the name of the most expensive hardware product?",
        "query": "SELECT product_name FROM products WHERE product_type_code = 'Hardware' ORDER BY product_price DESC LIMIT 1",
        "schema": "CREATE TABLE Product_Suppliers (total_value_purchased NUMBER, product_id NUMBER); CREATE TABLE Products (product_name TEXT, product_type_code TEXT, product_id NUMBER, product_price NUMBER);"
      },
      {
        "question": "what is the product price?",
        "query": "SELECT product_price FROM products WHERE product_type_code = 'Hardware' ORDER BY product_price DESC LIMIT 1",
        "schema": "CREATE TABLE Order_Items (product_id NUMBER); CREATE TABLE Products (product_type_code TEXT, product_id NUMBER, product_name TEXT, product_price NUMBER); CREATE TABLE Product_Suppliers (product_id NUMBER, total_value_purchased NUMBER);"
      },
      {
        "question": "what is the product id  for red jeans?",
        "query": "SELECT product_id FROM products WHERE product_name = \"red jeans\"",
        "schema": "CREATE TABLE Order_Items (order_item_id NUMBER, product_id NUMBER); CREATE TABLE Product_Suppliers (total_value_purchased NUMBER, product_id NUMBER); CREATE TABLE Products (product_name TEXT, product_id NUMBER, product_type_code TEXT, product_price NUMBER);"
      },
      {
        "question": "what is the product type code for red jeans",
        "query": "SELECT DISTINCT ( product_type_code ) FROM products WHERE product_name = \"red jeans\"",
        "schema": "CREATE TABLE Order_Items (order_item_id NUMBER, product_id NUMBER); CREATE TABLE Product_Suppliers (product_id NUMBER, total_value_purchased NUMBER); CREATE TABLE Products (product_id NUMBER, product_price NUMBER, product_name TEXT, product_type_code TEXT);"
      }
    ],
    [
      {
        "question": "what product Id has the highest price? | Do you mean the id of the product which has the highest price? | yes",
        "query": "SELECT product_id FROM products ORDER BY product_price DESC LIMIT 1",
        "schema": "CREATE TABLE Product_Suppliers (product_id NUMBER, total_value_purchased NUMBER); CREATE TABLE Customer_Orders (customer_id NUMBER); CREATE TABLE Products (product_name TEXT, product_type_code TEXT, product_id NUMBER, product_price NUMBER); CREATE TABLE Customers (customer_id NUMBER, customer_code TEXT);"
      },
      {
        "question": "what is the product name? | Do you mean the product name of the product which has the highest price? | yes",
        "query": "SELECT product_name FROM products ORDER BY product_price DESC LIMIT 1",
        "schema": "CREATE TABLE Products (product_price NUMBER, product_id NUMBER, product_name TEXT, product_type_code TEXT); CREATE TABLE Customer_Orders (customer_id NUMBER); CREATE TABLE Order_Items (product_id NUMBER); CREATE TABLE Product_Suppliers (product_id NUMBER, total_value_purchased NUMBER); CREATE TABLE Customers (customer_id NUMBER, customer_code TEXT);"
      },
      {
        "question": "what is the name of the product with the lowest price?",
        "query": "SELECT product_name FROM products ORDER BY product_price LIMIT 1",
        "schema": "CREATE TABLE Customers (customer_id NUMBER, customer_code TEXT); CREATE TABLE Products (product_name TEXT, product_type_code TEXT, product_id NUMBER, product_price NUMBER); CREATE TABLE Product_Suppliers (product_id NUMBER, total_value_purchased NUMBER); CREATE TABLE Customer_Orders (customer_id NUMBER); CREATE TABLE Order_Items (product_id NUMBER);"
      }
    ],
    [
      {
        "question": "How many department stores does the store chain South have?",
        "query": "SELECT COUNT ( * ) FROM department_stores AS t1 JOIN department_store_chain AS t2 ON t1.dept_store_chain_id = t2.dept_store_chain_id WHERE t2.dept_store_chain_name = \"South\"",
        "schema": "CREATE TABLE Staff_Department_Assignments (department_id NUMBER); CREATE TABLE Suppliers (supplier_id NUMBER); CREATE TABLE Department_Store_Chain (dept_store_chain_id NUMBER, dept_store_chain_name TEXT); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Departments (dept_store_id NUMBER, department_name TEXT, department_id NUMBER); CREATE TABLE Department_Stores (dept_store_chain_id NUMBER, store_name TEXT, dept_store_id NUMBER);"
      },
      {
        "question": "How many department stores does the store chain West have?",
        "query": "SELECT COUNT ( * ) FROM department_stores AS t1 JOIN department_store_chain AS t2 ON t1.dept_store_chain_id = t2.dept_store_chain_id WHERE t2.dept_store_chain_name = \"West\"",
        "schema": "CREATE TABLE Staff_Department_Assignments (department_id NUMBER); CREATE TABLE Suppliers (supplier_id NUMBER); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Department_Stores (store_name TEXT, dept_store_id NUMBER, dept_store_chain_id NUMBER); CREATE TABLE Departments (department_id NUMBER, department_name TEXT, dept_store_id NUMBER); CREATE TABLE Department_Store_Chain (dept_store_chain_id NUMBER, dept_store_chain_name TEXT);"
      },
      {
        "question": "What is the store address of the store chain East?",
        "query": "SELECT t1.store_address FROM department_stores AS t1 JOIN department_store_chain AS t2 ON t1.dept_store_chain_id = t2.dept_store_chain_id WHERE t2.dept_store_chain_name = \"East\"",
        "schema": "CREATE TABLE Addresses (address_details TEXT, address_id NUMBER); CREATE TABLE Department_Store_Chain (dept_store_chain_name TEXT, dept_store_chain_id NUMBER); CREATE TABLE Suppliers (supplier_id NUMBER); CREATE TABLE Department_Stores (dept_store_id NUMBER, store_address TEXT, dept_store_chain_id NUMBER, store_name TEXT); CREATE TABLE Staff_Department_Assignments (department_id NUMBER); CREATE TABLE Departments (dept_store_id NUMBER, department_id NUMBER, department_name TEXT); CREATE TABLE Customers (customer_id NUMBER);"
      },
      {
        "question": "What is the store phone of the store chain West?",
        "query": "SELECT t1.store_phone FROM department_stores AS t1 JOIN department_store_chain AS t2 ON t1.dept_store_chain_id = t2.dept_store_chain_id WHERE t2.dept_store_chain_name = \"West\"",
        "schema": "CREATE TABLE Staff_Department_Assignments (department_id NUMBER); CREATE TABLE Department_Store_Chain (dept_store_chain_id NUMBER, dept_store_chain_name TEXT); CREATE TABLE Departments (department_id NUMBER, dept_store_id NUMBER, department_name TEXT); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Addresses (address_id NUMBER, address_details TEXT); CREATE TABLE Suppliers (supplier_id NUMBER); CREATE TABLE Department_Stores (store_name TEXT, store_address TEXT, dept_store_id NUMBER, dept_store_chain_id NUMBER, store_phone TEXT);"
      },
      {
        "question": "What is the store email of the store chain South?",
        "query": "SELECT t1.store_email FROM department_stores AS t1 JOIN department_store_chain AS t2 ON t1.dept_store_chain_id = t2.dept_store_chain_id WHERE t2.dept_store_chain_name = \"West\"",
        "schema": "CREATE TABLE Addresses (address_id NUMBER, address_details TEXT); CREATE TABLE Suppliers (supplier_id NUMBER); CREATE TABLE Department_Stores (store_address TEXT, dept_store_chain_id NUMBER, dept_store_id NUMBER, store_name TEXT, store_phone TEXT, store_email TEXT); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Staff_Department_Assignments (department_id NUMBER); CREATE TABLE Departments (dept_store_id NUMBER, department_name TEXT, department_id NUMBER); CREATE TABLE Department_Store_Chain (dept_store_chain_name TEXT, dept_store_chain_id NUMBER);"
      }
    ],
    [
      {
        "question": "What are the highest and lowest prices of products, grouped by and alphabetically ordered by product type?",
        "query": "SELECT MAX ( product_price ) , MIN ( product_price ) FROM products GROUP BY product_type_code ORDER BY product_type_code",
        "schema": "CREATE TABLE Order_Items (product_id NUMBER); CREATE TABLE Product_Suppliers (total_value_purchased NUMBER, product_id NUMBER); CREATE TABLE Products (product_price NUMBER, product_name TEXT, product_id NUMBER, product_type_code TEXT);"
      },
      {
        "question": "What are the all product names",
        "query": "SELECT product_name FROM products",
        "schema": "CREATE TABLE Products (product_id NUMBER, product_name TEXT, product_price NUMBER, product_type_code TEXT); CREATE TABLE Order_Items (product_id NUMBER); CREATE TABLE Product_Suppliers (product_id NUMBER, total_value_purchased NUMBER);"
      }
    ],
    [
      {
        "question": "Can you show me the phone numbers of all customers?",
        "query": "SELECT customer_phone FROM customers",
        "schema": "CREATE TABLE Customers (customer_id NUMBER, customer_name TEXT, customer_address TEXT, customer_phone TEXT, customer_code TEXT); CREATE TABLE Customer_Addresses (customer_id NUMBER); CREATE TABLE Suppliers (supplier_phone TEXT); CREATE TABLE Department_Stores (store_phone TEXT);"
      },
      {
        "question": "Hmm, I also want to know the phone numbers of all suppliers please.",
        "query": "SELECT supplier_phone FROM suppliers",
        "schema": "CREATE TABLE Product_Suppliers (supplier_id NUMBER); CREATE TABLE Customer_Addresses (customer_id NUMBER); CREATE TABLE Department_Stores (store_phone TEXT); CREATE TABLE Customers (customer_name TEXT, customer_code TEXT, customer_phone TEXT, customer_id NUMBER, customer_address TEXT); CREATE TABLE Suppliers (supplier_phone TEXT, supplier_name TEXT, supplier_id NUMBER);"
      },
      {
        "question": "Please list the phone numbers of all customers and suppliers.",
        "query": "SELECT customer_phone FROM customers UNION SELECT supplier_phone FROM suppliers",
        "schema": "CREATE TABLE Department_Stores (store_phone TEXT); CREATE TABLE Suppliers (supplier_phone TEXT, supplier_id NUMBER, supplier_name TEXT); CREATE TABLE Customer_Addresses (customer_id NUMBER); CREATE TABLE Customers (customer_code TEXT, customer_phone TEXT, customer_address TEXT, customer_name TEXT, customer_id NUMBER); CREATE TABLE Product_Suppliers (supplier_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show me the name of the store name with dept store id 1? | Do you  mean  dept  store  chain name? | yes",
        "query": "SELECT dept_store_chain_name FROM department_store_chain WHERE dept_store_chain_id = 1",
        "schema": "CREATE TABLE Department_Stores (dept_store_chain_id NUMBER, dept_store_id NUMBER, store_name TEXT); CREATE TABLE Departments (dept_store_id NUMBER, department_name TEXT); CREATE TABLE Customers (customer_name TEXT, customer_id NUMBER); CREATE TABLE Department_Store_Chain (dept_store_chain_id NUMBER, dept_store_chain_name TEXT);"
      },
      {
        "question": "Show me the name of all department stores? | Do  you  mean  the store name ? | yes",
        "query": "SELECT store_name FROM department_stores",
        "schema": "CREATE TABLE Customers (customer_id NUMBER, customer_name TEXT); CREATE TABLE Department_Stores (dept_store_id NUMBER, dept_store_chain_id NUMBER, store_name TEXT); CREATE TABLE Department_Store_Chain (dept_store_chain_name TEXT, dept_store_chain_id NUMBER); CREATE TABLE Departments (department_name TEXT, dept_store_id NUMBER);"
      },
      {
        "question": "Show how many department stores does the store chain South have?",
        "query": "SELECT COUNT ( * ) FROM department_stores AS t1 JOIN department_store_chain AS t2 ON t1.dept_store_chain_id = t2.dept_store_chain_id WHERE t2.dept_store_chain_name = \"South\"",
        "schema": "CREATE TABLE Departments (dept_store_id NUMBER, department_name TEXT); CREATE TABLE Department_Store_Chain (dept_store_chain_name TEXT, dept_store_chain_id NUMBER); CREATE TABLE Customers (customer_id NUMBER, customer_name TEXT); CREATE TABLE Department_Stores (dept_store_id NUMBER, dept_store_chain_id NUMBER, store_name TEXT);"
      }
    ],
    [
      {
        "question": "What is the Job title code of department id 4?",
        "query": "SELECT job_title_code FROM staff_department_assignments WHERE department_id = 4",
        "schema": "CREATE TABLE Department_Stores (dept_store_id NUMBER, dept_store_chain_id NUMBER); CREATE TABLE Staff_Department_Assignments (job_title_code TEXT, department_id NUMBER, staff_id NUMBER); CREATE TABLE Department_Store_Chain (dept_store_chain_id NUMBER, dept_store_chain_name TEXT); CREATE TABLE Staff (staff_id NUMBER); CREATE TABLE Departments (department_id NUMBER, dept_store_id NUMBER, department_name TEXT); CREATE TABLE Customers (customer_code TEXT, customer_id NUMBER); CREATE TABLE Customer_Addresses (customer_id NUMBER);"
      },
      {
        "question": "What is the date assigned from and of the staff id 1?",
        "query": "SELECT date_assigned_from FROM staff_department_assignments WHERE staff_id = 1",
        "schema": "CREATE TABLE Customer_Addresses (customer_id NUMBER); CREATE TABLE Department_Store_Chain (dept_store_chain_name TEXT, dept_store_chain_id NUMBER); CREATE TABLE Staff (staff_id NUMBER, staff_name TEXT); CREATE TABLE Staff_Department_Assignments (date_assigned_to TIME, department_id NUMBER, date_assigned_from TIME, staff_id NUMBER, job_title_code TEXT); CREATE TABLE Customers (customer_code TEXT, customer_id NUMBER); CREATE TABLE Department_Stores (dept_store_id NUMBER, dept_store_chain_id NUMBER); CREATE TABLE Departments (department_name TEXT, department_id NUMBER, dept_store_id NUMBER);"
      },
      {
        "question": "What is the department Id of sales person?",
        "query": "SELECT DISTINCT department_id FROM staff_department_assignments WHERE job_title_code = \"Sales Person\"",
        "schema": "CREATE TABLE Staff (staff_id NUMBER, staff_name TEXT); CREATE TABLE Customer_Addresses (customer_id NUMBER); CREATE TABLE Staff_Department_Assignments (job_title_code TEXT, department_id NUMBER, date_assigned_from TIME, staff_id NUMBER, date_assigned_to TIME); CREATE TABLE Customers (customer_code TEXT, customer_id NUMBER); CREATE TABLE Departments (department_name TEXT, dept_store_id NUMBER, department_id NUMBER); CREATE TABLE Department_Store_Chain (dept_store_chain_name TEXT, dept_store_chain_id NUMBER); CREATE TABLE Department_Stores (dept_store_chain_id NUMBER, dept_store_id NUMBER);"
      },
      {
        "question": "What is the date assigned to clerical staff?",
        "query": "SELECT date_assigned_to FROM staff_department_assignments WHERE job_title_code = \"Clerical Staff\"",
        "schema": "CREATE TABLE Staff_Department_Assignments (department_id NUMBER, date_assigned_from TIME, date_assigned_to TIME, job_title_code TEXT, staff_id NUMBER); CREATE TABLE Customers (customer_code TEXT, customer_id NUMBER); CREATE TABLE Customer_Addresses (customer_id NUMBER); CREATE TABLE Department_Stores (dept_store_id NUMBER, dept_store_chain_id NUMBER); CREATE TABLE Departments (dept_store_id NUMBER, department_name TEXT, department_id NUMBER); CREATE TABLE Department_Store_Chain (dept_store_chain_id NUMBER, dept_store_chain_name TEXT); CREATE TABLE Staff (staff_name TEXT, staff_id NUMBER);"
      },
      {
        "question": "What is the date assigned from and date assigned to sales person?",
        "query": "SELECT date_assigned_from,date_assigned_to FROM staff_department_assignments WHERE job_title_code = \"Sales Person\"",
        "schema": "CREATE TABLE Customers (customer_id NUMBER, customer_code TEXT); CREATE TABLE Customer_Addresses (customer_id NUMBER); CREATE TABLE Staff (staff_name TEXT, staff_id NUMBER); CREATE TABLE Department_Stores (dept_store_id NUMBER, dept_store_chain_id NUMBER); CREATE TABLE Department_Store_Chain (dept_store_chain_name TEXT, dept_store_chain_id NUMBER); CREATE TABLE Staff_Department_Assignments (date_assigned_from TIME, staff_id NUMBER, department_id NUMBER, job_title_code TEXT, date_assigned_to TIME); CREATE TABLE Departments (department_id NUMBER, dept_store_id NUMBER, department_name TEXT);"
      }
    ],
    [
      {
        "question": "how many departments are there",
        "query": "SELECT COUNT ( DISTINCT department_id ) FROM staff_department_assignments",
        "schema": "CREATE TABLE Addresses (address_details TEXT, address_id NUMBER); CREATE TABLE Suppliers (supplier_id NUMBER); CREATE TABLE Product_Suppliers (supplier_id NUMBER); CREATE TABLE Staff_Department_Assignments (department_id NUMBER, job_title_code TEXT, staff_id NUMBER); CREATE TABLE Customer_Orders (order_id NUMBER, customer_id NUMBER); CREATE TABLE Department_Store_Chain (dept_store_chain_id NUMBER, dept_store_chain_name TEXT); CREATE TABLE Department_Stores (store_name TEXT, dept_store_chain_id NUMBER, dept_store_id NUMBER); CREATE TABLE Staff (staff_id NUMBER, staff_name TEXT); CREATE TABLE Departments (department_name TEXT, department_id NUMBER, dept_store_id NUMBER); CREATE TABLE Customer_Addresses (customer_id NUMBER); CREATE TABLE Customers (customer_id NUMBER, customer_name TEXT, customer_code TEXT);"
      },
      {
        "question": "what is the jobe title code of department id 5",
        "query": "SELECT job_title_code FROM staff_department_assignments WHERE department_id = 5",
        "schema": "CREATE TABLE Departments (department_name TEXT, department_id NUMBER, dept_store_id NUMBER); CREATE TABLE Staff (staff_id NUMBER, staff_name TEXT); CREATE TABLE Customer_Orders (order_id NUMBER, customer_id NUMBER); CREATE TABLE Addresses (address_details TEXT, address_id NUMBER); CREATE TABLE Staff_Department_Assignments (staff_id NUMBER, job_title_code TEXT, department_id NUMBER); CREATE TABLE Product_Suppliers (supplier_id NUMBER); CREATE TABLE Department_Stores (store_name TEXT, dept_store_id NUMBER, dept_store_chain_id NUMBER); CREATE TABLE Department_Store_Chain (dept_store_chain_name TEXT, dept_store_chain_id NUMBER); CREATE TABLE Suppliers (supplier_id NUMBER); CREATE TABLE Customers (customer_name TEXT, customer_code TEXT, customer_id NUMBER); CREATE TABLE Customer_Addresses (customer_id NUMBER);"
      },
      {
        "question": "how many persons in department manger",
        "query": "SELECT COUNT ( * ) FROM staff_department_assignments WHERE job_title_code = \"Department Manager\"",
        "schema": "CREATE TABLE Department_Stores (store_name TEXT, dept_store_chain_id NUMBER, dept_store_id NUMBER); CREATE TABLE Product_Suppliers (supplier_id NUMBER); CREATE TABLE Departments (department_name TEXT, dept_store_id NUMBER, department_id NUMBER); CREATE TABLE Suppliers (supplier_id NUMBER); CREATE TABLE Staff (staff_id NUMBER, staff_name TEXT); CREATE TABLE Staff_Department_Assignments (job_title_code TEXT, staff_id NUMBER, department_id NUMBER); CREATE TABLE Customers (customer_id NUMBER, customer_code TEXT, customer_name TEXT); CREATE TABLE Customer_Orders (order_id NUMBER, customer_id NUMBER); CREATE TABLE Addresses (address_details TEXT, address_id NUMBER); CREATE TABLE Department_Store_Chain (dept_store_chain_name TEXT, dept_store_chain_id NUMBER); CREATE TABLE Customer_Addresses (customer_id NUMBER);"
      }
    ],
    [
      {
        "question": "can you show a list of customer address?",
        "query": "SELECT customer_address FROM customers",
        "schema": "CREATE TABLE Addresses (address_details TEXT, address_id NUMBER); CREATE TABLE Customer_Addresses (address_id NUMBER, customer_id NUMBER); CREATE TABLE Customers (customer_id NUMBER, customer_address TEXT, customer_code TEXT);"
      },
      {
        "question": "can you show a list of order date?",
        "query": "SELECT order_date FROM customer_orders",
        "schema": "CREATE TABLE Customers (customer_address TEXT, customer_id NUMBER, customer_code TEXT); CREATE TABLE Customer_Orders (customer_id NUMBER, order_id NUMBER, order_date TIME); CREATE TABLE Addresses (address_details TEXT, address_id NUMBER); CREATE TABLE Customer_Addresses (address_id NUMBER, date_from TIME, customer_id NUMBER, date_to TIME);"
      },
      {
        "question": "can you show a list of  customer phone?",
        "query": "SELECT customer_phone FROM customers",
        "schema": "CREATE TABLE Customers (customer_code TEXT, customer_address TEXT, customer_id NUMBER, customer_phone TEXT); CREATE TABLE Addresses (address_id NUMBER, address_details TEXT); CREATE TABLE Suppliers (supplier_phone TEXT); CREATE TABLE Customer_Addresses (date_from TIME, address_id NUMBER, date_to TIME, customer_id NUMBER); CREATE TABLE Customer_Orders (order_date TIME, order_id NUMBER, customer_id NUMBER);"
      }
    ],
    [
      {
        "question": "Which products were purchased in the largest amount? | 4 is the id of product that was purchased in the largest amount. | What about top 3 largest?",
        "query": "SELECT product_id FROM product_suppliers ORDER BY total_amount_purchased DESC LIMIT 3",
        "schema": "CREATE TABLE Product_Suppliers (product_id NUMBER, total_value_purchased NUMBER, total_amount_purchased TEXT); CREATE TABLE Products (product_id NUMBER, product_name TEXT); CREATE TABLE Order_Items (product_id NUMBER, order_item_id NUMBER, order_id NUMBER); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Customer_Orders (customer_id NUMBER, order_id NUMBER);"
      },
      {
        "question": "And what about the lowest 3?",
        "query": "SELECT product_id FROM product_suppliers ORDER BY total_amount_purchased ASC LIMIT 3",
        "schema": "CREATE TABLE Customer_Orders (order_id NUMBER, customer_id NUMBER); CREATE TABLE Product_Suppliers (total_amount_purchased TEXT, total_value_purchased NUMBER, product_id NUMBER, supplier_id NUMBER); CREATE TABLE Order_Items (order_id NUMBER, product_id NUMBER, order_item_id NUMBER); CREATE TABLE Suppliers (supplier_name TEXT, supplier_id NUMBER); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Products (product_price NUMBER, product_id NUMBER, product_name TEXT);"
      }
    ],
    [
      {
        "question": "Hello!  Can you provide me with a list of all Job Title Codes present on this list?",
        "query": "SELECT job_title_code FROM staff_department_assignments",
        "schema": "CREATE TABLE Departments (department_id NUMBER); CREATE TABLE Customer_Addresses (customer_id NUMBER); CREATE TABLE Customers (customer_name TEXT, customer_code TEXT, customer_id NUMBER); CREATE TABLE Staff (staff_id NUMBER); CREATE TABLE Staff_Department_Assignments (department_id NUMBER, staff_id NUMBER, job_title_code TEXT); CREATE TABLE Department_Stores (dept_store_id NUMBER);"
      },
      {
        "question": "Great!  Can you please show me a list of Staff IDs for those who have the job_title_code of Department Manager?",
        "query": "SELECT t1.staff_id FROM staff AS t1 JOIN staff_department_assignments AS t2 ON t1.staff_id = t2.staff_id WHERE t2.job_title_code = \"Department Manager\"",
        "schema": "CREATE TABLE Departments (department_id NUMBER, department_name TEXT); CREATE TABLE Customer_Addresses (customer_id NUMBER); CREATE TABLE Department_Stores (dept_store_id NUMBER); CREATE TABLE Staff (staff_name TEXT, staff_id NUMBER); CREATE TABLE Customers (customer_id NUMBER, customer_name TEXT, customer_code TEXT); CREATE TABLE Staff_Department_Assignments (department_id NUMBER, staff_id NUMBER, job_title_code TEXT);"
      },
      {
        "question": "Great!  Now can you update this list to include the genders of all of these individuals?",
        "query": "SELECT t1.staff_id , t1.staff_gender FROM staff AS t1 JOIN staff_department_assignments AS t2 ON t1.staff_id = t2.staff_id WHERE t2.job_title_code = \"Department Manager\"",
        "schema": "CREATE TABLE Department_Stores (dept_store_id NUMBER); CREATE TABLE Staff (staff_name TEXT, staff_id NUMBER, staff_gender TEXT); CREATE TABLE Departments (department_name TEXT, department_id NUMBER); CREATE TABLE Staff_Department_Assignments (department_id NUMBER, job_title_code TEXT, staff_id NUMBER); CREATE TABLE Customers (customer_id NUMBER, customer_code TEXT, customer_name TEXT); CREATE TABLE Customer_Addresses (customer_id NUMBER);"
      }
    ],
    [
      {
        "question": "What are the IDs of all the products supplied by supplier 2?",
        "query": "SELECT t1.product_id FROM product_suppliers AS t1 JOIN products AS t2 ON t1.product_id = t2.product_id WHERE t1.supplier_id = 2",
        "schema": "CREATE TABLE Order_Items (product_id NUMBER); CREATE TABLE Customer_Orders (customer_id NUMBER, order_id NUMBER); CREATE TABLE Products (product_name TEXT, product_id NUMBER); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Product_Suppliers (supplier_id NUMBER, product_id NUMBER); CREATE TABLE Suppliers (supplier_name TEXT, supplier_id NUMBER);"
      },
      {
        "question": "What is the average price of these products?",
        "query": "SELECT AVG ( t2.product_price ) FROM product_suppliers AS t1 JOIN products AS t2 ON t1.product_id = t2.product_id WHERE t1.supplier_id = 2",
        "schema": "CREATE TABLE Product_Suppliers (supplier_id NUMBER, product_id NUMBER, total_value_purchased NUMBER); CREATE TABLE Suppliers (supplier_name TEXT, supplier_id NUMBER); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Order_Items (product_id NUMBER); CREATE TABLE Products (product_price NUMBER, product_id NUMBER, product_name TEXT); CREATE TABLE Customer_Orders (order_id NUMBER, customer_id NUMBER);"
      },
      {
        "question": "Show me the ID's from the products from supplier number 2 that are more expensive than this average, please.",
        "query": "SELECT t1.product_id FROM product_suppliers AS t1 JOIN products AS t2 ON t1.product_id = t2.product_id WHERE t1.supplier_id = 2 AND t2.product_price > ( SELECT AVG ( t2.product_price ) FROM product_suppliers AS t1 JOIN products AS t2 ON t1.product_id = t2.product_id WHERE t1.supplier_id = 2 )",
        "schema": "CREATE TABLE Suppliers (supplier_name TEXT, supplier_id NUMBER); CREATE TABLE Products (product_id NUMBER, product_name TEXT, product_price NUMBER); CREATE TABLE Customer_Orders (customer_id NUMBER, order_id NUMBER); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Product_Suppliers (product_id NUMBER, total_value_purchased NUMBER, supplier_id NUMBER); CREATE TABLE Order_Items (product_id NUMBER);"
      }
    ],
    [
      {
        "question": "how many customer orders there",
        "query": "SELECT COUNT ( * ) FROM customer_orders",
        "schema": "CREATE TABLE Order_Items (order_id NUMBER, product_id NUMBER); CREATE TABLE Customer_Addresses (address_id NUMBER, customer_id NUMBER); CREATE TABLE Products (product_id NUMBER); CREATE TABLE Customer_Orders (order_id NUMBER, order_status_code TEXT, order_date TIME, customer_id NUMBER); CREATE TABLE Suppliers (supplier_id NUMBER); CREATE TABLE Customers (customer_address TEXT, customer_name TEXT, customer_code TEXT, customer_id NUMBER);"
      },
      {
        "question": "what is the customer id of  order id 2",
        "query": "SELECT customer_id FROM customer_orders WHERE order_id = 2",
        "schema": "CREATE TABLE Order_Items (order_id NUMBER, product_id NUMBER); CREATE TABLE Customer_Addresses (customer_id NUMBER, address_id NUMBER); CREATE TABLE Customers (customer_code TEXT, customer_id NUMBER, customer_address TEXT, customer_name TEXT); CREATE TABLE Customer_Orders (order_id NUMBER, order_status_code TEXT, order_date TIME, customer_id NUMBER); CREATE TABLE Products (product_id NUMBER); CREATE TABLE Suppliers (supplier_id NUMBER);"
      },
      {
        "question": "what is the  order date of order id 1",
        "query": "SELECT order_date FROM customer_orders WHERE order_id = 1",
        "schema": "CREATE TABLE Products (product_id NUMBER); CREATE TABLE Customer_Orders (customer_id NUMBER, order_id NUMBER, order_status_code TEXT, order_date TIME); CREATE TABLE Suppliers (supplier_id NUMBER); CREATE TABLE Customer_Addresses (address_id NUMBER, customer_id NUMBER); CREATE TABLE Order_Items (product_id NUMBER, order_id NUMBER); CREATE TABLE Customers (customer_code TEXT, customer_name TEXT, customer_address TEXT, customer_id NUMBER);"
      }
    ],
    [
      {
        "question": "I want to know the store chains with the largest department stores",
        "query": "SELECT dept_store_chain_id FROM department_stores GROUP BY dept_store_chain_id ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Department_Store_Chain (dept_store_chain_id NUMBER, dept_store_chain_name TEXT); CREATE TABLE Department_Stores (store_name TEXT, dept_store_id NUMBER, dept_store_chain_id NUMBER); CREATE TABLE Departments (department_id NUMBER, dept_store_id NUMBER, department_name TEXT); CREATE TABLE Staff_Department_Assignments (department_id NUMBER);"
      },
      {
        "question": "What about the ID of the department store chain that has the second largest number of department stores?",
        "query": "SELECT dept_store_chain_id FROM department_stores GROUP BY dept_store_chain_id ORDER BY COUNT ( * ) DESC LIMIT 2 EXCEPT SELECT dept_store_chain_id FROM department_stores GROUP BY dept_store_chain_id ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Departments (dept_store_id NUMBER, department_name TEXT, department_id NUMBER); CREATE TABLE Staff_Department_Assignments (department_id NUMBER); CREATE TABLE Department_Store_Chain (dept_store_chain_name TEXT, dept_store_chain_id NUMBER); CREATE TABLE Department_Stores (dept_store_id NUMBER, dept_store_chain_id NUMBER, store_name TEXT);"
      },
      {
        "question": "OK, do you have the names of the above stores?",
        "query": "SELECT store_name FROM department_stores GROUP BY dept_store_chain_id ORDER BY COUNT ( * ) DESC LIMIT 2",
        "schema": "CREATE TABLE Department_Store_Chain (dept_store_chain_id NUMBER, dept_store_chain_name TEXT); CREATE TABLE Departments (department_name TEXT, department_id NUMBER, dept_store_id NUMBER); CREATE TABLE Staff_Department_Assignments (department_id NUMBER); CREATE TABLE Department_Stores (dept_store_id NUMBER, store_name TEXT, dept_store_chain_id NUMBER);"
      },
      {
        "question": "What about their store address?",
        "query": "SELECT store_address FROM department_stores GROUP BY dept_store_chain_id ORDER BY COUNT ( * ) DESC LIMIT 2",
        "schema": "CREATE TABLE Department_Stores (store_address TEXT, dept_store_chain_id NUMBER, store_name TEXT, dept_store_id NUMBER); CREATE TABLE Department_Store_Chain (dept_store_chain_id NUMBER, dept_store_chain_name TEXT); CREATE TABLE Departments (dept_store_id NUMBER, department_name TEXT, department_id NUMBER); CREATE TABLE Staff_Department_Assignments (department_id NUMBER); CREATE TABLE Addresses (address_id NUMBER, address_details TEXT);"
      },
      {
        "question": "Kindly let me know the store emails of the above stores",
        "query": "SELECT store_email FROM department_stores GROUP BY dept_store_chain_id ORDER BY COUNT ( * ) DESC LIMIT 2",
        "schema": "CREATE TABLE Department_Store_Chain (dept_store_chain_name TEXT, dept_store_chain_id NUMBER); CREATE TABLE Departments (department_name TEXT, department_id NUMBER, dept_store_id NUMBER); CREATE TABLE Addresses (address_details TEXT, address_id NUMBER); CREATE TABLE Staff_Department_Assignments (department_id NUMBER); CREATE TABLE Department_Stores (store_name TEXT, store_address TEXT, store_email TEXT, dept_store_id NUMBER, dept_store_chain_id NUMBER);"
      }
    ],
    [
      {
        "question": "What is the average price of all products?",
        "query": "SELECT AVG ( product_price ) FROM products",
        "schema": "CREATE TABLE Products (product_price NUMBER, product_name TEXT, product_type_code TEXT, product_id NUMBER); CREATE TABLE Product_Suppliers (product_id NUMBER, total_value_purchased NUMBER); CREATE TABLE Customers (customer_id NUMBER);"
      },
      {
        "question": "Find the product type whose average price is higher than the average price of all products.",
        "query": "SELECT product_type_code FROM products GROUP BY product_type_code HAVING AVG ( product_price ) > ( SELECT AVG ( product_price ) FROM products )",
        "schema": "CREATE TABLE Product_Suppliers (total_value_purchased NUMBER, product_id NUMBER); CREATE TABLE Products (product_price NUMBER, product_name TEXT, product_id NUMBER, product_type_code TEXT); CREATE TABLE Customers (customer_id NUMBER);"
      },
      {
        "question": "What is the product name of that?",
        "query": "SELECT product_name FROM products WHERE product_type_code = ( SELECT product_type_code FROM products GROUP BY product_type_code HAVING AVG ( product_price ) > ( SELECT AVG ( product_price ) FROM products ) )",
        "schema": "CREATE TABLE Product_Suppliers (total_value_purchased NUMBER, product_id NUMBER); CREATE TABLE Products (product_type_code TEXT, product_id NUMBER, product_name TEXT, product_price NUMBER); CREATE TABLE Customers (customer_id NUMBER);"
      },
      {
        "question": "Find the product type whose average price is lower than the average price of all products.",
        "query": "SELECT product_type_code FROM products GROUP BY product_type_code HAVING AVG ( product_price ) < ( SELECT AVG ( product_price ) FROM products )",
        "schema": "CREATE TABLE Products (product_price NUMBER, product_name TEXT, product_id NUMBER, product_type_code TEXT); CREATE TABLE Product_Suppliers (total_value_purchased NUMBER, product_id NUMBER); CREATE TABLE Customers (customer_id NUMBER);"
      },
      {
        "question": "What are the product names?",
        "query": "SELECT product_name FROM products WHERE product_type_code = ( SELECT product_type_code FROM products GROUP BY product_type_code HAVING AVG ( product_price ) < ( SELECT AVG ( product_price ) FROM products ) )",
        "schema": "CREATE TABLE Product_Suppliers (product_id NUMBER, total_value_purchased NUMBER); CREATE TABLE Products (product_id NUMBER, product_price NUMBER, product_type_code TEXT, product_name TEXT); CREATE TABLE Customers (customer_id NUMBER);"
      },
      {
        "question": "What are the prices of them?",
        "query": "SELECT product_price FROM products WHERE product_type_code = ( SELECT product_type_code FROM products GROUP BY product_type_code HAVING AVG ( product_price ) < ( SELECT AVG ( product_price ) FROM products ) )",
        "schema": "CREATE TABLE Products (product_type_code TEXT, product_price NUMBER, product_id NUMBER, product_name TEXT); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Product_Suppliers (total_value_purchased NUMBER, product_id NUMBER);"
      }
    ],
    [
      {
        "question": "Hi there!  Can you provide me with a list of all Staff Department Assignments \"date assigned to\" values?",
        "query": "SELECT date_assigned_to FROM staff_department_assignments",
        "schema": "CREATE TABLE Departments (department_name TEXT, department_id NUMBER); CREATE TABLE Staff (staff_name TEXT, staff_id NUMBER); CREATE TABLE Staff_Department_Assignments (date_assigned_from TIME, staff_id NUMBER, department_id NUMBER, date_assigned_to TIME, job_title_code TEXT);"
      },
      {
        "question": "Thank you!  Now I realize that I should probably be asking for the date assigned from values... Therefore, can you provide me with a list of all staff IDs and their corresponding \"date assigned from\" values?",
        "query": "SELECT staff_id, date_assigned_from FROM staff_department_assignments",
        "schema": "CREATE TABLE Staff (staff_name TEXT, staff_id NUMBER); CREATE TABLE Departments (department_id NUMBER, department_name TEXT); CREATE TABLE Staff_Department_Assignments (date_assigned_from TIME, department_id NUMBER, date_assigned_to TIME, job_title_code TEXT, staff_id NUMBER);"
      },
      {
        "question": "Thank you for that!  Can you please filter this list to show only the row of the staff member who has the most recent date_assigned_from value?",
        "query": "SELECT staff_id, date_assigned_from FROM staff_department_assignments ORDER BY date_assigned_from DESC LIMIT 1",
        "schema": "CREATE TABLE Staff (staff_name TEXT, staff_id NUMBER); CREATE TABLE Staff_Department_Assignments (department_id NUMBER, date_assigned_to TIME, staff_id NUMBER, job_title_code TEXT, date_assigned_from TIME); CREATE TABLE Departments (department_name TEXT, department_id NUMBER);"
      },
      {
        "question": "Thank you!  Could you please display the name and job title of this staff person?",
        "query": "SELECT staff_name,job_title_code FROM staff_department_assignments AS t1 JOIN staff AS t2 ON t1.staff_id = t2.staff_id WHERE t1.staff_id = '1'",
        "schema": "CREATE TABLE Departments (department_id NUMBER, department_name TEXT); CREATE TABLE Staff (staff_id NUMBER, staff_name TEXT); CREATE TABLE Staff_Department_Assignments (job_title_code TEXT, date_assigned_from TIME, date_assigned_to TIME, department_id NUMBER, staff_id NUMBER);"
      }
    ]
  ],
  "club_1": [
    [
      {
        "question": "Hello, what is the name of the student with student id 1008? | The first and last name of the student with student id 1008 is Jandy Nelson. | What is her major?",
        "query": "SELECT major FROM student WHERE stuid = 1008",
        "schema": "CREATE TABLE Student (StuID NUMBER, Fname TEXT, Major NUMBER, LName TEXT);"
      },
      {
        "question": "Apologies, I meant to ask his/her major; what is the student's sex?",
        "query": "SELECT sex FROM student WHERE stuid = 1008",
        "schema": "CREATE TABLE Student (LName TEXT, Fname TEXT, Sex TEXT, Major NUMBER, StuID NUMBER);"
      },
      {
        "question": "How old is the student with student id 1008?",
        "query": "SELECT age FROM student WHERE stuid = 1008",
        "schema": "CREATE TABLE Student (Fname TEXT, Sex TEXT, StuID NUMBER, LName TEXT, Major NUMBER, Age NUMBER);"
      }
    ],
    [
      {
        "question": "what is the location of Bootup Baltimore",
        "query": "SELECT clublocation FROM club WHERE clubname = 'Bootup Baltimore'",
        "schema": "CREATE TABLE Club (ClubName TEXT, ClubDesc TEXT, ClubLocation TEXT, ClubID NUMBER); CREATE TABLE Member_of_club (ClubID NUMBER, StuID NUMBER); CREATE TABLE Student (city_code TEXT);"
      },
      {
        "question": "how many female students are presented on the table",
        "query": "SELECT COUNT ( stuid ) FROM student WHERE sex = 'F'",
        "schema": "CREATE TABLE Student (LName TEXT, StuID NUMBER, Sex TEXT, Fname TEXT, city_code TEXT); CREATE TABLE Member_of_club (ClubID NUMBER, StuID NUMBER); CREATE TABLE Club (ClubName TEXT, ClubLocation TEXT, ClubDesc TEXT, ClubID NUMBER);"
      },
      {
        "question": "what is the major of Tracy",
        "query": "SELECT major FROM student WHERE fname = 'Tracy'",
        "schema": "CREATE TABLE Member_of_club (ClubID NUMBER, StuID NUMBER); CREATE TABLE Student (Major NUMBER, StuID NUMBER, LName TEXT, city_code TEXT, Fname TEXT, Sex TEXT); CREATE TABLE Club (ClubDesc TEXT, ClubLocation TEXT, ClubID NUMBER, ClubName TEXT);"
      }
    ],
    [
      {
        "question": "How many clubs do you have?",
        "query": "SELECT COUNT ( * ) FROM club",
        "schema": "CREATE TABLE Student (StuID NUMBER, LName TEXT); CREATE TABLE Club (ClubDesc TEXT, ClubID NUMBER, ClubName TEXT); CREATE TABLE Member_of_club (StuID NUMBER, ClubID NUMBER);"
      },
      {
        "question": "How many members does each club have?",
        "query": "SELECT clubid, COUNT ( stuid ) FROM member_of_club GROUP BY clubid",
        "schema": "CREATE TABLE Student (LName TEXT, StuID NUMBER); CREATE TABLE Club (ClubDesc TEXT, ClubName TEXT, ClubID NUMBER); CREATE TABLE Member_of_club (StuID NUMBER, ClubID NUMBER);"
      },
      {
        "question": "Finally, can you list the clubs that have \"Davis Steven\" as a member?",
        "query": "SELECT t1.clubid FROM member_of_club AS t1 JOIN student AS t2 ON t1.stuid = t2.stuid WHERE t2.lname = 'Davis' AND t2.fname = 'Steven'",
        "schema": "CREATE TABLE Student (StuID NUMBER, Fname TEXT, LName TEXT); CREATE TABLE Member_of_club (ClubID NUMBER, StuID NUMBER); CREATE TABLE Club (ClubName TEXT, ClubID NUMBER, ClubDesc TEXT);"
      }
    ],
    [
      {
        "question": "What are the average age of all the members of the tennis club",
        "query": "SELECT AVG ( t3.age ) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = \"Tennis Club\"",
        "schema": "CREATE TABLE Member_of_club (StuID NUMBER, ClubID NUMBER); CREATE TABLE Club (ClubName TEXT, ClubDesc TEXT, ClubID NUMBER); CREATE TABLE Student (StuID NUMBER, Age NUMBER);"
      },
      {
        "question": "Give me the first names and last names of all the members of the tennis club",
        "query": "SELECT t3.fname, t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = \"Tennis Club\"",
        "schema": "CREATE TABLE Club (ClubName TEXT, ClubID NUMBER, ClubDesc TEXT); CREATE TABLE Student (StuID NUMBER, Age NUMBER, LName TEXT, Fname TEXT); CREATE TABLE Member_of_club (StuID NUMBER, ClubID NUMBER);"
      },
      {
        "question": "Can i have the city code of all members of the tennis club",
        "query": "SELECT t3.city_code FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = \"Tennis Club\"",
        "schema": "CREATE TABLE Club (ClubLocation TEXT, ClubName TEXT, ClubID NUMBER, ClubDesc TEXT); CREATE TABLE Student (city_code TEXT, StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER); CREATE TABLE Member_of_club (StuID NUMBER, ClubID NUMBER);"
      },
      {
        "question": "Give me the position of the member in the tennis club",
        "query": "SELECT t2.position FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = \"Tennis Club\"",
        "schema": "CREATE TABLE Club (ClubDesc TEXT, ClubLocation TEXT, ClubID NUMBER, ClubName TEXT); CREATE TABLE Student (Age NUMBER, StuID NUMBER, LName TEXT, city_code TEXT, Fname TEXT); CREATE TABLE Member_of_club (ClubID NUMBER, StuID NUMBER, Position TEXT);"
      }
    ],
    [
      {
        "question": "How many students are majoring in \"600\"?",
        "query": "SELECT COUNT ( stuid ) FROM student WHERE major = 600",
        "schema": "CREATE TABLE Member_of_club (StuID NUMBER, ClubID NUMBER); CREATE TABLE Student (StuID NUMBER, Major NUMBER, LName TEXT); CREATE TABLE Club (ClubID NUMBER);"
      },
      {
        "question": "Can you show me only those students?",
        "query": "SELECT stuid FROM student WHERE major = 600",
        "schema": "CREATE TABLE Student (StuID NUMBER, LName TEXT, Major NUMBER); CREATE TABLE Member_of_club (ClubID NUMBER, StuID NUMBER); CREATE TABLE Club (ClubID NUMBER);"
      },
      {
        "question": "Can you also show me what clubs they are in?",
        "query": "SELECT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.major = \"600\" GROUP BY t1.clubname",
        "schema": "CREATE TABLE Member_of_club (StuID NUMBER, ClubID NUMBER); CREATE TABLE Club (ClubID NUMBER, ClubName TEXT); CREATE TABLE Student (LName TEXT, Major NUMBER, StuID NUMBER);"
      },
      {
        "question": "How many students who are majoring in 600 are in each of those clubs?",
        "query": "SELECT t1.clubname,COUNT ( * ) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.major = \"600\" GROUP BY t1.clubname ORDER BY COUNT ( * )",
        "schema": "CREATE TABLE Student (LName TEXT, Fname TEXT, StuID NUMBER, Major NUMBER); CREATE TABLE Club (ClubID NUMBER, ClubName TEXT); CREATE TABLE Member_of_club (ClubID NUMBER, StuID NUMBER);"
      }
    ],
    [
      {
        "question": "Hi. How many different clubs are there in total?",
        "query": "SELECT COUNT ( * ) FROM club",
        "schema": "CREATE TABLE Student (StuID NUMBER); CREATE TABLE Club (ClubID NUMBER, ClubDesc TEXT, ClubLocation TEXT, ClubName TEXT); CREATE TABLE Member_of_club (ClubID NUMBER, StuID NUMBER);"
      },
      {
        "question": "What are the names of the 4 clubs?",
        "query": "SELECT clubname FROM club",
        "schema": "CREATE TABLE Student (StuID NUMBER); CREATE TABLE Club (ClubID NUMBER, ClubName TEXT, ClubDesc TEXT, ClubLocation TEXT); CREATE TABLE Member_of_club (StuID NUMBER, ClubID NUMBER);"
      },
      {
        "question": "Among the 4 clubs, how many members are there in total?",
        "query": "SELECT COUNT ( * ) FROM member_of_club",
        "schema": "CREATE TABLE Club (ClubLocation TEXT, ClubName TEXT, ClubID NUMBER, ClubDesc TEXT); CREATE TABLE Student (Fname TEXT, StuID NUMBER, LName TEXT); CREATE TABLE Member_of_club (ClubID NUMBER, StuID NUMBER);"
      },
      {
        "question": "Of the 4 members, how many of them are members of the club \"Pen and Paper Gaming\"?",
        "query": "SELECT COUNT ( * ) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = \"Pen and Paper Gaming\"",
        "schema": "CREATE TABLE Member_of_club (ClubID NUMBER, StuID NUMBER); CREATE TABLE Student (LName TEXT, StuID NUMBER, Fname TEXT); CREATE TABLE Club (ClubID NUMBER, ClubLocation TEXT, ClubDesc TEXT, ClubName TEXT);"
      }
    ],
    [
      {
        "question": "Tell me the club description for club id 1 ?",
        "query": "SELECT clubdesc FROM club WHERE clubid = 1",
        "schema": "CREATE TABLE Member_of_club (ClubID NUMBER, StuID NUMBER); CREATE TABLE Club (ClubName TEXT, ClubID NUMBER, ClubDesc TEXT); CREATE TABLE Student (StuID NUMBER);"
      },
      {
        "question": "Tell me the position for the student id 1001 ? | Do you mean the city code for students? | yes",
        "query": "SELECT city_code FROM student WHERE stuid = 1001",
        "schema": "CREATE TABLE Student (StuID NUMBER, city_code TEXT); CREATE TABLE Member_of_club (ClubID NUMBER, StuID NUMBER, Position TEXT); CREATE TABLE Club (ClubName TEXT, ClubLocation TEXT, ClubID NUMBER, ClubDesc TEXT);"
      },
      {
        "question": "How many clubs does the student named 'Eric TAI' belong to ?",
        "query": "SELECT COUNT ( DISTINCT t1.clubname ) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.fname = \"Eric\" AND t3.lname = \"Tai\"",
        "schema": "CREATE TABLE Club (ClubLocation TEXT, ClubName TEXT, ClubDesc TEXT, ClubID NUMBER); CREATE TABLE Member_of_club (Position TEXT, StuID NUMBER, ClubID NUMBER); CREATE TABLE Student (city_code TEXT, StuID NUMBER, Fname TEXT, LName TEXT);"
      }
    ],
    [
      {
        "question": "Yes please",
        "query": "SELECT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid GROUP BY t2.clubid ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Member_of_club (ClubID NUMBER, StuID NUMBER); CREATE TABLE Club (ClubID NUMBER, ClubName TEXT, ClubDesc TEXT, ClubLocation TEXT); CREATE TABLE Student (StuID NUMBER, Fname TEXT, LName TEXT, city_code TEXT);"
      },
      {
        "question": "How many members are in theat club?",
        "query": "SELECT COUNT ( * ) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid GROUP BY t2.clubid ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Student (StuID NUMBER, LName TEXT, city_code TEXT, Fname TEXT); CREATE TABLE Member_of_club (StuID NUMBER, ClubID NUMBER); CREATE TABLE Club (ClubLocation TEXT, ClubName TEXT, ClubDesc TEXT, ClubID NUMBER);"
      },
      {
        "question": "How many roles are in that club?",
        "query": "SELECT COUNT ( POSITION ) FROM member_of_club WHERE clubid = ( SELECT t2.clubid FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid GROUP BY t2.clubid ORDER BY COUNT ( * ) DESC LIMIT 1 )",
        "schema": "CREATE TABLE Student (city_code TEXT, StuID NUMBER, Fname TEXT, LName TEXT); CREATE TABLE Club (ClubName TEXT, ClubDesc TEXT, ClubID NUMBER, ClubLocation TEXT); CREATE TABLE Member_of_club (ClubID NUMBER, StuID NUMBER, Position TEXT);"
      }
    ],
    [
      {
        "question": "Who are the members of  Bootup Baltimore? | Here are the first names and last names of members of Bootup Baltimore | What are there major's?",
        "query": "SELECT t3.major FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = \"Bootup Baltimore\"",
        "schema": "CREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Major NUMBER, city_code TEXT); CREATE TABLE Member_of_club (ClubID NUMBER, StuID NUMBER); CREATE TABLE Club (ClubName TEXT, ClubDesc TEXT, ClubLocation TEXT, ClubID NUMBER);"
      },
      {
        "question": "How many members are there total?",
        "query": "SELECT COUNT ( * ) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid",
        "schema": "CREATE TABLE Club (ClubName TEXT, ClubID NUMBER, ClubLocation TEXT, ClubDesc TEXT); CREATE TABLE Student (StuID NUMBER, city_code TEXT, Major NUMBER, Fname TEXT, LName TEXT); CREATE TABLE Member_of_club (ClubID NUMBER, StuID NUMBER);"
      },
      {
        "question": "Can you list all of the members?",
        "query": "SELECT * FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid",
        "schema": "CREATE TABLE Member_of_club (StuID NUMBER, ClubID NUMBER); CREATE TABLE Student (city_code TEXT, StuID NUMBER, Fname TEXT, LName TEXT, Major NUMBER); CREATE TABLE Club (ClubLocation TEXT, ClubName TEXT, ClubDesc TEXT, ClubID NUMBER);"
      },
      {
        "question": "How many members are female?",
        "query": "SELECT COUNT ( * ) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.sex = \"F\"",
        "schema": "CREATE TABLE Club (ClubLocation TEXT, ClubName TEXT, ClubID NUMBER, ClubDesc TEXT); CREATE TABLE Member_of_club (ClubID NUMBER, StuID NUMBER); CREATE TABLE Student (city_code TEXT, Fname TEXT, Major NUMBER, Sex TEXT, StuID NUMBER, LName TEXT);"
      }
    ],
    [
      {
        "question": "How many students are members of the club \"Bootup Baltimore\"?",
        "query": "SELECT COUNT ( * ) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid WHERE t1.clubname = \"Bootup Baltimore\"",
        "schema": "CREATE TABLE Member_of_club (ClubID NUMBER, StuID NUMBER); CREATE TABLE Student (LName TEXT, Fname TEXT, StuID NUMBER); CREATE TABLE Club (ClubDesc TEXT, ClubID NUMBER, ClubName TEXT);"
      },
      {
        "question": "Please provide the ages of the two members.",
        "query": "SELECT t3.age FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = \"Bootup Baltimore\"",
        "schema": "CREATE TABLE Member_of_club (StuID NUMBER, ClubID NUMBER); CREATE TABLE Club (ClubDesc TEXT, ClubName TEXT, ClubID NUMBER); CREATE TABLE Student (Age NUMBER, StuID NUMBER, LName TEXT, Fname TEXT);"
      },
      {
        "question": "What is the average age of the two members of the club Bootup Baltimore?",
        "query": "SELECT AVG ( t3.age ) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = \"Bootup Baltimore\"",
        "schema": "CREATE TABLE Club (ClubLocation TEXT, ClubName TEXT, ClubID NUMBER, ClubDesc TEXT); CREATE TABLE Student (LName TEXT, Fname TEXT, Age NUMBER, StuID NUMBER); CREATE TABLE Member_of_club (StuID NUMBER, ClubID NUMBER);"
      },
      {
        "question": "Could you please tell me who is President of the club Bootup Baltimore. | Do you want the first and last name of him? | Yes, please provide first and last name of the President of the club Bootup Baltimore.",
        "query": "SELECT t3.fname, t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = \"Bootup Baltimore\" AND t2.position = \"President\"",
        "schema": "CREATE TABLE Member_of_club (Position TEXT, ClubID NUMBER, StuID NUMBER); CREATE TABLE Student (StuID NUMBER, Fname TEXT, Age NUMBER, LName TEXT); CREATE TABLE Club (ClubLocation TEXT, ClubID NUMBER, ClubDesc TEXT, ClubName TEXT);"
      },
      {
        "question": "Thanks.  Could you please tell me the Club Location?",
        "query": "SELECT clublocation FROM club WHERE clubname = \"Bootup Baltimore\"",
        "schema": "CREATE TABLE Club (ClubLocation TEXT, ClubID NUMBER, ClubName TEXT, ClubDesc TEXT); CREATE TABLE Member_of_club (ClubID NUMBER, StuID NUMBER, Position TEXT); CREATE TABLE Student (StuID NUMBER, Age NUMBER, Fname TEXT, LName TEXT, city_code TEXT);"
      }
    ],
    [
      {
        "question": "where is the location of club \"Hopkins Student Enterprises\"?",
        "query": "SELECT clublocation FROM club WHERE clubname = \"Hopkins Student Enterprises\"",
        "schema": "CREATE TABLE Student (city_code TEXT, StuID NUMBER); CREATE TABLE Club (ClubDesc TEXT, ClubID NUMBER, ClubName TEXT, ClubLocation TEXT);"
      },
      {
        "question": "Show the first name of the \"CTO\" of club \"Hopkins Student Enterprises\"",
        "query": "SELECT t3.fname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = \"Hopkins Student Enterprises\" AND t2.position = \"CTO\"",
        "schema": "CREATE TABLE Student (LName TEXT, city_code TEXT, StuID NUMBER, Fname TEXT); CREATE TABLE Club (ClubName TEXT, ClubDesc TEXT, ClubID NUMBER, ClubLocation TEXT); CREATE TABLE Member_of_club (ClubID NUMBER, StuID NUMBER, Position TEXT);"
      },
      {
        "question": "Who is the \"CTO\" of club \"Hopkins Student Enterprises\"? show the first name and the last name.",
        "query": "SELECT t3.fname , t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = \"Hopkins Student Enterprises\" AND t2.position = \"CTO\"",
        "schema": "CREATE TABLE Member_of_club (Position TEXT, StuID NUMBER, ClubID NUMBER); CREATE TABLE Club (ClubLocation TEXT, ClubDesc TEXT, ClubID NUMBER, ClubName TEXT); CREATE TABLE Student (city_code TEXT, StuID NUMBER, LName TEXT, Fname TEXT);"
      }
    ],
    [
      {
        "question": "What is the average age of students?",
        "query": "SELECT AVG ( age ) FROM student",
        "schema": "CREATE TABLE Club (ClubID NUMBER); CREATE TABLE Member_of_club (ClubID NUMBER, StuID NUMBER); CREATE TABLE Student (StuID NUMBER, Sex TEXT, Age NUMBER);"
      },
      {
        "question": "And what is the average gender wise? | sorry,i cant understand your question | What is the average age of students as per the \"Sex\" of the students?",
        "query": "SELECT sex,AVG ( age ) FROM student GROUP BY sex",
        "schema": "CREATE TABLE Student (Sex TEXT, Age NUMBER, StuID NUMBER); CREATE TABLE Member_of_club (StuID NUMBER, ClubID NUMBER); CREATE TABLE Club (ClubID NUMBER);"
      },
      {
        "question": "How many Students are below the age of 17?",
        "query": "SELECT COUNT ( stuid ) FROM student WHERE age<17",
        "schema": "CREATE TABLE Student (Age NUMBER, Sex TEXT, StuID NUMBER); CREATE TABLE Member_of_club (StuID NUMBER, ClubID NUMBER); CREATE TABLE Club (ClubID NUMBER);"
      },
      {
        "question": "How many students have the same Fname?",
        "query": "SELECT COUNT ( stuid ) FROM student WHERE fname IN ( SELECT fname FROM student GROUP BY fname HAVING COUNT ( * ) >1 )",
        "schema": "CREATE TABLE Club (ClubID NUMBER); CREATE TABLE Member_of_club (StuID NUMBER, ClubID NUMBER); CREATE TABLE Student (Age NUMBER, Fname TEXT, LName TEXT, StuID NUMBER, Sex TEXT);"
      },
      {
        "question": "How many clubs are located in city code \"AKW\"",
        "query": "SELECT COUNT ( clubid ) FROM club WHERE clublocation = 'AKW'",
        "schema": "CREATE TABLE Student (StuID NUMBER, LName TEXT, city_code TEXT, Age NUMBER, Fname TEXT, Sex TEXT); CREATE TABLE Club (ClubID NUMBER, ClubName TEXT, ClubDesc TEXT, ClubLocation TEXT); CREATE TABLE Member_of_club (ClubID NUMBER, StuID NUMBER);"
      },
      {
        "question": "and how many in city code \"HHH\"",
        "query": "SELECT COUNT ( clubid ) FROM club WHERE clublocation = 'HHH'",
        "schema": "CREATE TABLE Club (ClubLocation TEXT, ClubDesc TEXT, ClubID NUMBER, ClubName TEXT); CREATE TABLE Member_of_club (StuID NUMBER, ClubID NUMBER); CREATE TABLE Student (Fname TEXT, StuID NUMBER, LName TEXT, Sex TEXT, city_code TEXT, Age NUMBER);"
      }
    ],
    [
      {
        "question": "what is the club id of stud 1001",
        "query": "SELECT clubid FROM member_of_club WHERE stuid = 1001",
        "schema": "CREATE TABLE Club (ClubLocation TEXT, ClubName TEXT, ClubID NUMBER, ClubDesc TEXT); CREATE TABLE Student (StuID NUMBER); CREATE TABLE Member_of_club (StuID NUMBER, ClubID NUMBER);"
      },
      {
        "question": "what is the club name of AKW",
        "query": "SELECT clubname FROM club WHERE clublocation = \"AKW\"",
        "schema": "CREATE TABLE Student (StuID NUMBER); CREATE TABLE Club (ClubName TEXT, ClubLocation TEXT, ClubDesc TEXT, ClubID NUMBER); CREATE TABLE Member_of_club (ClubID NUMBER, StuID NUMBER);"
      },
      {
        "question": "what is the position of club id 1 | What do you mean by the position of club id 1 | in the table member of club",
        "query": "SELECT POSITION FROM member_of_club WHERE clubid = 1",
        "schema": "CREATE TABLE Club (ClubName TEXT, ClubDesc TEXT, ClubLocation TEXT, ClubID NUMBER); CREATE TABLE Member_of_club (Position TEXT, ClubID NUMBER, StuID NUMBER); CREATE TABLE Student (StuID NUMBER);"
      },
      {
        "question": "what is the club name of HHH",
        "query": "SELECT clubname FROM club WHERE clublocation = \"HHH\"",
        "schema": "CREATE TABLE Member_of_club (Position TEXT, StuID NUMBER, ClubID NUMBER); CREATE TABLE Club (ClubLocation TEXT, ClubDesc TEXT, ClubName TEXT, ClubID NUMBER); CREATE TABLE Student (StuID NUMBER);"
      }
    ],
    [
      {
        "question": "what is last name of the members in club?",
        "query": "SELECT t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid",
        "schema": "CREATE TABLE Member_of_club (ClubID NUMBER, StuID NUMBER); CREATE TABLE Club (ClubName TEXT, ClubID NUMBER, ClubDesc TEXT); CREATE TABLE Student (Fname TEXT, StuID NUMBER, LName TEXT);"
      },
      {
        "question": "what is the first name of the student with last name smith?",
        "query": "SELECT fname FROM student WHERE lname = \"Smith\"",
        "schema": "CREATE TABLE Club (ClubID NUMBER, ClubName TEXT, ClubDesc TEXT); CREATE TABLE Member_of_club (ClubID NUMBER, StuID NUMBER); CREATE TABLE Student (Fname TEXT, StuID NUMBER, LName TEXT);"
      }
    ],
    [
      {
        "question": "What is the average age of all of the members of the club called \"Bootup Baltimore\"?",
        "query": "SELECT AVG ( t3.age ) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = \"Bootup Baltimore\"",
        "schema": "CREATE TABLE Club (ClubName TEXT, ClubID NUMBER, ClubDesc TEXT); CREATE TABLE Member_of_club (ClubID NUMBER, StuID NUMBER); CREATE TABLE Student (StuID NUMBER, Age NUMBER);"
      },
      {
        "question": "How many people with sex \"M\" and sex \"F\" are in that club?",
        "query": "SELECT COUNT ( * ) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = \"Bootup Baltimore\"",
        "schema": "CREATE TABLE Student (LName TEXT, Age NUMBER, Fname TEXT, StuID NUMBER, Sex TEXT); CREATE TABLE Club (ClubName TEXT, ClubDesc TEXT, ClubID NUMBER); CREATE TABLE Member_of_club (ClubID NUMBER, StuID NUMBER);"
      },
      {
        "question": "Who is the president of that club?",
        "query": "SELECT t3.fname, t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = \"Bootup Baltimore\" AND t2.position = \"President\"",
        "schema": "CREATE TABLE Member_of_club (ClubID NUMBER, Position TEXT, StuID NUMBER); CREATE TABLE Student (Advisor NUMBER, LName TEXT, Fname TEXT, Sex TEXT, StuID NUMBER, Age NUMBER); CREATE TABLE Club (ClubDesc TEXT, ClubName TEXT, ClubID NUMBER);"
      }
    ],
    [
      {
        "question": "How many clubs does the student Eric Tai belong to?",
        "query": "SELECT COUNT ( DISTINCT t1.clubname ) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.fname = \"Eric\" AND t3.lname = \"Tai\"",
        "schema": "CREATE TABLE Member_of_club (ClubID NUMBER, StuID NUMBER); CREATE TABLE Student (Fname TEXT, StuID NUMBER, LName TEXT, city_code TEXT); CREATE TABLE Club (ClubName TEXT, ClubDesc TEXT, ClubID NUMBER);"
      },
      {
        "question": "How many other students belong in 0 clubs?",
        "query": "SELECT COUNT ( * ) FROM student WHERE stuid NOT IN ( SELECT t3.stuid FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid )",
        "schema": "CREATE TABLE Student (city_code TEXT, StuID NUMBER, LName TEXT, Fname TEXT); CREATE TABLE Club (ClubID NUMBER, ClubName TEXT, ClubDesc TEXT); CREATE TABLE Member_of_club (StuID NUMBER, ClubID NUMBER);"
      },
      {
        "question": "How many students belong to 1 club?",
        "query": "SELECT COUNT ( * ) FROM ( SELECT stuid FROM member_of_club GROUP BY stuid HAVING COUNT ( * ) = 1 )",
        "schema": "CREATE TABLE Member_of_club (StuID NUMBER, ClubID NUMBER); CREATE TABLE Student (Fname TEXT, StuID NUMBER, LName TEXT, city_code TEXT); CREATE TABLE Club (ClubDesc TEXT, ClubID NUMBER, ClubName TEXT);"
      },
      {
        "question": "What are their names?",
        "query": "SELECT lname,fname FROM student WHERE stuid IN ( SELECT stuid FROM member_of_club GROUP BY stuid HAVING COUNT ( * ) = 1 )",
        "schema": "CREATE TABLE Club (ClubName TEXT, ClubDesc TEXT, ClubID NUMBER); CREATE TABLE Student (StuID NUMBER, city_code TEXT, LName TEXT, Fname TEXT); CREATE TABLE Member_of_club (StuID NUMBER, ClubID NUMBER);"
      },
      {
        "question": "What are the club names of the clubs they belong to, please?",
        "query": "SELECT clubname FROM club WHERE clubid IN ( SELECT DISTINCT clubid FROM member_of_club GROUP BY stuid HAVING COUNT ( * ) = 1 )",
        "schema": "CREATE TABLE Member_of_club (StuID NUMBER, ClubID NUMBER); CREATE TABLE Club (ClubName TEXT, ClubDesc TEXT, ClubID NUMBER); CREATE TABLE Student (StuID NUMBER, city_code TEXT, Fname TEXT, LName TEXT);"
      }
    ]
  ],
  "flight_1": [
    [
      {
        "question": "Can you show me the origins, the destinations and the flight numbers?",
        "query": "SELECT origin, destination, flno FROM flight GROUP BY destination",
        "schema": "CREATE TABLE flight (distance NUMBER, origin TEXT, aid NUMBER, flno NUMBER, destination TEXT);"
      },
      {
        "question": "Hmm, I want to know just the destinations and the flight numbers please.",
        "query": "SELECT destination, flno FROM flight GROUP BY destination",
        "schema": "CREATE TABLE flight (aid NUMBER, flno NUMBER, destination TEXT, origin TEXT, distance NUMBER);"
      },
      {
        "question": "Please show me the destinations and the number of flights they have.",
        "query": "SELECT destination, COUNT ( * ) FROM flight GROUP BY destination",
        "schema": "CREATE TABLE flight (aid NUMBER, flno NUMBER, destination TEXT, distance NUMBER, origin TEXT);"
      },
      {
        "question": "Which destination has the least number of flights?",
        "query": "SELECT destination, COUNT ( * ) FROM flight GROUP BY destination ORDER BY COUNT ( * ) LIMIT 1",
        "schema": "CREATE TABLE flight (flno NUMBER, aid NUMBER, destination TEXT, origin TEXT, distance NUMBER);"
      }
    ],
    [
      {
        "question": "What are the names and distances of aircraft that have more than 5000 distance?",
        "query": "SELECT t2.name FROM certificate AS t1 JOIN aircraft AS t2 ON t2.aid = t1.aid WHERE t2.distance > 5000",
        "schema": "CREATE TABLE aircraft (distance NUMBER, name TEXT, aid NUMBER); CREATE TABLE certificate (aid NUMBER);"
      },
      {
        "question": "What are the names and distances of aircraft that have more than 5000 distance and there are at least 5 people who have its certificate?",
        "query": "SELECT t2.name FROM certificate AS t1 JOIN aircraft AS t2 ON t2.aid = t1.aid WHERE t2.distance > 5000 GROUP BY t1.aid ORDER BY COUNT ( * ) > = 5",
        "schema": "CREATE TABLE certificate (aid NUMBER, eid NUMBER); CREATE TABLE aircraft (name TEXT, distance NUMBER, aid NUMBER);"
      },
      {
        "question": "What is the employee ID of the employee who flew the longest distance?",
        "query": "SELECT t1.eid FROM certificate AS t1 JOIN aircraft AS t2 ON t2.aid = t1.aid ORDER BY t2.distance DESC LIMIT 1",
        "schema": "CREATE TABLE employee (name TEXT, eid NUMBER); CREATE TABLE certificate (aid NUMBER, eid NUMBER); CREATE TABLE aircraft (aid NUMBER, distance NUMBER, name TEXT);"
      }
    ],
    [
      {
        "question": "What is average and maximum salary of all employees.",
        "query": "SELECT AVG ( salary ) , MAX ( salary ) FROM employee",
        "schema": "CREATE TABLE employee (eid NUMBER, name TEXT, salary NUMBER);"
      },
      {
        "question": "What name has the highest salary?",
        "query": "SELECT name FROM employee ORDER BY salary DESC LIMIT 1",
        "schema": "CREATE TABLE employee (name TEXT, eid NUMBER, salary NUMBER);"
      },
      {
        "question": "What is the employee id and salary of George Wright?",
        "query": "SELECT eid , salary FROM employee WHERE name = \"George Wright\"",
        "schema": "CREATE TABLE employee (name TEXT, eid NUMBER, salary NUMBER);"
      },
      {
        "question": "What is the name and employee id of the person with the lowest salary",
        "query": "SELECT name , eid FROM employee ORDER BY salary LIMIT 1",
        "schema": "CREATE TABLE employee (salary NUMBER, eid NUMBER, name TEXT);"
      }
    ],
    [
      {
        "question": "Can you display the salary and name of the employees?",
        "query": "SELECT salary, name FROM employee",
        "schema": "CREATE TABLE employee (salary NUMBER, name TEXT, eid NUMBER);"
      },
      {
        "question": "What is the name of the employee who has the most number of aircraft certificates?",
        "query": "SELECT t1.name FROM employee AS t1 JOIN certificate AS t2 ON t1.eid = t2.eid GROUP BY t1.eid ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE certificate (eid NUMBER, aid NUMBER); CREATE TABLE aircraft (aid NUMBER, name TEXT); CREATE TABLE employee (salary NUMBER, eid NUMBER, name TEXT);"
      },
      {
        "question": "Hmm, can you just list his salary?",
        "query": "SELECT t1.salary FROM employee AS t1 JOIN certificate AS t2 ON t1.eid = t2.eid GROUP BY t1.eid ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE aircraft (aid NUMBER, name TEXT); CREATE TABLE employee (name TEXT, eid NUMBER, salary NUMBER); CREATE TABLE certificate (aid NUMBER, eid NUMBER);"
      }
    ],
    [
      {
        "question": "show names of all aircrafts?",
        "query": "SELECT name FROM aircraft",
        "schema": "CREATE TABLE aircraft (aid NUMBER, name TEXT);"
      },
      {
        "question": "in which aircraft does John Williams have a certificate",
        "query": "SELECT t3.name FROM employee AS t1 JOIN certificate AS t2 ON t1.eid = t2.eid JOIN aircraft AS t3 ON t3.aid = t2.aid WHERE t1.name = \"John Williams\"",
        "schema": "CREATE TABLE aircraft (aid NUMBER, name TEXT); CREATE TABLE certificate (aid NUMBER, eid NUMBER); CREATE TABLE employee (name TEXT, eid NUMBER);"
      },
      {
        "question": "give me the airline id to that",
        "query": "SELECT t3.aid FROM employee AS t1 JOIN certificate AS t2 ON t1.eid = t2.eid JOIN aircraft AS t3 ON t3.aid = t2.aid WHERE t1.name = \"John Williams\"",
        "schema": "CREATE TABLE employee (name TEXT, eid NUMBER); CREATE TABLE aircraft (aid NUMBER, name TEXT); CREATE TABLE certificate (eid NUMBER, aid NUMBER);"
      }
    ],
    [
      {
        "question": "Show names for all employees with a salary greater than average",
        "query": "SELECT name FROM employee WHERE salary > ( SELECT AVG ( salary ) FROM employee )",
        "schema": "CREATE TABLE employee (eid NUMBER, name TEXT, salary NUMBER);"
      },
      {
        "question": "Great, could you tell me the average salary?",
        "query": "SELECT AVG ( salary ) FROM employee",
        "schema": "CREATE TABLE employee (salary NUMBER, eid NUMBER, name TEXT);"
      },
      {
        "question": "Could you show me a list of employees with a salary less than the average?",
        "query": "SELECT name FROM employee WHERE salary < ( SELECT AVG ( salary ) FROM employee )",
        "schema": "CREATE TABLE employee (salary NUMBER, name TEXT, eid NUMBER);"
      },
      {
        "question": "how many employees earn above the average salary?",
        "query": "SELECT COUNT ( * ) FROM employee WHERE salary > ( SELECT AVG ( salary ) FROM employee )",
        "schema": "CREATE TABLE employee (salary NUMBER, eid NUMBER, name TEXT);"
      },
      {
        "question": "how many earn below the average?",
        "query": "SELECT COUNT ( * ) FROM employee WHERE salary < ( SELECT AVG ( salary ) FROM employee )",
        "schema": "CREATE TABLE employee (eid NUMBER, salary NUMBER, name TEXT);"
      }
    ],
    [
      {
        "question": "can you show me average of the distances?",
        "query": "SELECT AVG ( distance ) FROM flight",
        "schema": "CREATE TABLE employee (eid NUMBER); CREATE TABLE aircraft (aid NUMBER, distance NUMBER); CREATE TABLE flight (aid NUMBER, distance NUMBER);"
      },
      {
        "question": "which one is the longest distance?",
        "query": "SELECT MAX ( distance ) FROM flight",
        "schema": "CREATE TABLE employee (eid NUMBER); CREATE TABLE flight (distance NUMBER, flno NUMBER, aid NUMBER); CREATE TABLE aircraft (distance NUMBER, aid NUMBER);"
      },
      {
        "question": "what is the highest price?",
        "query": "SELECT MAX ( price ) FROM flight",
        "schema": "CREATE TABLE employee (eid NUMBER); CREATE TABLE aircraft (distance NUMBER, aid NUMBER); CREATE TABLE flight (price NUMBER, aid NUMBER, flno NUMBER, distance NUMBER);"
      }
    ],
    [
      {
        "question": "How many flights have an origin of Los Angeles?",
        "query": "SELECT COUNT ( * ) FROM flight WHERE origin = \"Los Angeles\"",
        "schema": "CREATE TABLE flight (flno NUMBER, origin TEXT, destination TEXT, aid NUMBER);"
      },
      {
        "question": "How many of those are going to Honolulu?",
        "query": "SELECT COUNT ( * ) FROM flight WHERE origin = \"Los Angeles\" AND destination = \"Honolulu\"",
        "schema": "CREATE TABLE flight (destination TEXT, flno NUMBER, origin TEXT, aid NUMBER);"
      },
      {
        "question": "What is their departure date and arrival date?",
        "query": "SELECT departure_date , arrival_date FROM flight WHERE origin = \"Los Angeles\" AND destination = \"Honolulu\"",
        "schema": "CREATE TABLE flight (arrival_date TIME, aid NUMBER, origin TEXT, flno NUMBER, departure_date TIME, destination TEXT);"
      }
    ],
    [
      {
        "question": "list the salaries in ascending order",
        "query": "SELECT salary FROM employee ORDER BY salary ASC",
        "schema": "CREATE TABLE employee (eid NUMBER, name TEXT, salary NUMBER);"
      },
      {
        "question": "show the least three salaries in the table",
        "query": "SELECT salary FROM employee ORDER BY salary ASC LIMIT 3",
        "schema": "CREATE TABLE employee (eid NUMBER, name TEXT, salary NUMBER);"
      },
      {
        "question": "list the name of the employees with the lowest salaries",
        "query": "SELECT name FROM employee ORDER BY salary ASC LIMIT 1",
        "schema": "CREATE TABLE employee (name TEXT, salary NUMBER, eid NUMBER);"
      },
      {
        "question": "what is the id of him?",
        "query": "SELECT eid FROM employee ORDER BY salary ASC LIMIT 1",
        "schema": "CREATE TABLE employee (name TEXT, eid NUMBER, salary NUMBER);"
      }
    ],
    [
      {
        "question": "LIST THE NAME OF THE AIRCRAFTS",
        "query": "SELECT name FROM aircraft",
        "schema": "CREATE TABLE aircraft (aid NUMBER, name TEXT);"
      },
      {
        "question": "WHAT ARE THE NAMES OF AIRCRAFT WHICH FEWEST PEOPLE HAVE ITS CERTIFICATE",
        "query": "SELECT t2.name FROM certificate AS t1 JOIN aircraft AS t2 ON t2.aid = t1.aid GROUP BY t1.aid ORDER BY COUNT ( * ) ASC LIMIT 1",
        "schema": "CREATE TABLE certificate (eid NUMBER, aid NUMBER); CREATE TABLE aircraft (name TEXT, aid NUMBER);"
      },
      {
        "question": "WHAT IS THE ID OF THE AIRCRAFT | Do you mean the aircraft id of the aircraft named Boeing 727? | YES",
        "query": "SELECT aid FROM aircraft WHERE name = 'Boeing 727'",
        "schema": "CREATE TABLE aircraft (name TEXT, aid NUMBER); CREATE TABLE certificate (eid NUMBER, aid NUMBER);"
      }
    ],
    [
      {
        "question": "How many flights are arriving in Washington DC today? | Sorry, what is the date you meant by today? | I am sorry I meant on April/12/2005",
        "query": "SELECT COUNT ( * ) FROM flight WHERE destination = \"Washington D.C.\" AND arrival_date Like \"%04/12/2005%\"",
        "schema": "CREATE TABLE flight (arrival_date TIME, origin TEXT, departure_date TIME, flno NUMBER, destination TEXT);"
      },
      {
        "question": "How many flights are arriving in Dallas?",
        "query": "SELECT COUNT ( * ) FROM flight WHERE destination = \"Dallas\"",
        "schema": "CREATE TABLE flight (departure_date TIME, destination TEXT, arrival_date TIME, origin TEXT, flno NUMBER);"
      }
    ],
    [
      {
        "question": "What is the salary and name of the employee who has the least number of certificates on aircrafts with distance more than 5000?",
        "query": "SELECT t1.salary, t1.name FROM employee AS t1 JOIN certificate AS t2 ON t1.eid = t2.eid JOIN aircraft AS t3 ON t3.aid = t2.aid WHERE t3.distance > 5000 GROUP BY t1.eid ORDER BY COUNT ( * ) ASC LIMIT 1",
        "schema": "CREATE TABLE employee (name TEXT, salary NUMBER, eid NUMBER); CREATE TABLE certificate (eid NUMBER, aid NUMBER); CREATE TABLE aircraft (aid NUMBER, name TEXT, distance NUMBER);"
      },
      {
        "question": "Okay. What is the salary and name of the employee who has the most number of certificates on aircrafts with distance more than 5000?",
        "query": "SELECT t1.salary, t1.name FROM employee AS t1 JOIN certificate AS t2 ON t1.eid = t2.eid JOIN aircraft AS t3 ON t3.aid = t2.aid WHERE t3.distance > 5000 GROUP BY t1.eid ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE employee (eid NUMBER, salary NUMBER, name TEXT); CREATE TABLE aircraft (aid NUMBER, name TEXT, distance NUMBER); CREATE TABLE certificate (aid NUMBER, eid NUMBER);"
      },
      {
        "question": "What is the salary and name of the employee who has the most number of certificates on aircraft with distance less than 5000?",
        "query": "SELECT t1.salary, t1.name FROM employee AS t1 JOIN certificate AS t2 ON t1.eid = t2.eid JOIN aircraft AS t3 ON t3.aid = t2.aid WHERE t3.distance < 5000 GROUP BY t1.eid ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE certificate (aid NUMBER, eid NUMBER); CREATE TABLE aircraft (aid NUMBER, name TEXT, distance NUMBER); CREATE TABLE employee (name TEXT, salary NUMBER, eid NUMBER);"
      }
    ],
    [
      {
        "question": "What are the departure dates for all flights from Los Angeles to Honolulu?",
        "query": "SELECT departure_date FROM flight WHERE origin = \"Los Angeles\" AND destination = \"Honolulu\"",
        "schema": "CREATE TABLE flight (departure_date TIME, destination TEXT, origin TEXT, arrival_date TIME, flno NUMBER);"
      },
      {
        "question": "What are the arrival dates for all flights from Los Angeles to Honolulu?",
        "query": "SELECT arrival_date FROM flight WHERE origin = \"Los Angeles\" AND destination = \"Honolulu\"",
        "schema": "CREATE TABLE flight (origin TEXT, destination TEXT, departure_date TIME, arrival_date TIME, flno NUMBER);"
      },
      {
        "question": "What are the prices of those flights?",
        "query": "SELECT price FROM flight WHERE origin = \"Los Angeles\" AND destination = \"Honolulu\"",
        "schema": "CREATE TABLE flight (arrival_date TIME, origin TEXT, destination TEXT, departure_date TIME, flno NUMBER, price NUMBER);"
      },
      {
        "question": "What about the flight numbers?",
        "query": "SELECT flno FROM flight WHERE origin = \"Los Angeles\" AND destination = \"Honolulu\"",
        "schema": "CREATE TABLE flight (departure_date TIME, destination TEXT, flno NUMBER, origin TEXT, arrival_date TIME, price NUMBER);"
      }
    ],
    [
      {
        "question": "Hi can you tell me what is the average salary?",
        "query": "SELECT AVG ( salary ) FROM employee",
        "schema": "CREATE TABLE employee (salary NUMBER, name TEXT, eid NUMBER); CREATE TABLE aircraft (aid NUMBER);"
      },
      {
        "question": "What is the name of employees with three lowest salaries?",
        "query": "SELECT name FROM employee ORDER BY salary ASC LIMIT 3",
        "schema": "CREATE TABLE employee (name TEXT, salary NUMBER, eid NUMBER); CREATE TABLE aircraft (aid NUMBER);"
      },
      {
        "question": "What is the highest salary in the company?",
        "query": "SELECT MAX ( salary ) FROM employee",
        "schema": "CREATE TABLE aircraft (aid NUMBER); CREATE TABLE employee (eid NUMBER, name TEXT, salary NUMBER);"
      }
    ],
    [
      {
        "question": "Which employees don't have certificates?",
        "query": "SELECT eid FROM employee EXCEPT SELECT eid FROM certificate",
        "schema": "CREATE TABLE employee (name TEXT, eid NUMBER); CREATE TABLE aircraft (aid NUMBER); CREATE TABLE certificate (eid NUMBER, aid NUMBER);"
      },
      {
        "question": "What are their names?",
        "query": "SELECT name FROM employee EXCEPT SELECT eid FROM certificate",
        "schema": "CREATE TABLE employee (eid NUMBER, name TEXT); CREATE TABLE aircraft (aid NUMBER); CREATE TABLE certificate (eid NUMBER, aid NUMBER);"
      },
      {
        "question": "How many employees don't have certificates?",
        "query": "SELECT COUNT ( * ) FROM employee EXCEPT SELECT aid FROM certificate",
        "schema": "CREATE TABLE aircraft (aid NUMBER); CREATE TABLE certificate (eid NUMBER, aid NUMBER); CREATE TABLE employee (name TEXT, eid NUMBER);"
      }
    ],
    [
      {
        "question": "What are the IDs of the aircrafts with name Airbus A340-300?",
        "query": "SELECT DISTINCT aid FROM aircraft WHERE name = \"Airbus A340-300\"",
        "schema": "CREATE TABLE aircraft (aid NUMBER, name TEXT); CREATE TABLE employee (eid NUMBER);"
      },
      {
        "question": "What distance does aircraft ID fly? | Do you mean aircraft id 3? And want me to return the sum of all the distances it flew? | Yes please.",
        "query": "SELECT SUM ( distance ) FROM flight WHERE aid = ( SELECT DISTINCT aid FROM aircraft WHERE name = \"Airbus A340-300\" )",
        "schema": "CREATE TABLE employee (eid NUMBER); CREATE TABLE flight (aid NUMBER, distance NUMBER); CREATE TABLE aircraft (distance NUMBER, aid NUMBER, name TEXT);"
      },
      {
        "question": "WHat flight numbers have that aid?",
        "query": "SELECT t1.flno FROM flight AS t1 JOIN aircraft AS t2 ON t1.aid = t2.aid WHERE t2.name = \"Airbus A340-300\"",
        "schema": "CREATE TABLE aircraft (distance NUMBER, name TEXT, aid NUMBER); CREATE TABLE flight (distance NUMBER, aid NUMBER, flno NUMBER); CREATE TABLE employee (eid NUMBER);"
      }
    ],
    [
      {
        "question": "How many different aircrafts are there? | Do  you mean  different \tnames of  aircrafts? | Yes, how many different names.",
        "query": "SELECT COUNT ( DISTINCT name ) FROM aircraft",
        "schema": "CREATE TABLE aircraft (aid NUMBER, name TEXT);"
      },
      {
        "question": "Show me the name of the aircraft with the fewest people who have its certificate",
        "query": "SELECT t2.name FROM certificate AS t1 JOIN aircraft AS t2 ON t2.aid = t1.aid GROUP BY t1.aid ORDER BY COUNT ( * ) ASC LIMIT 1",
        "schema": "CREATE TABLE certificate (aid NUMBER, eid NUMBER); CREATE TABLE aircraft (aid NUMBER, name TEXT);"
      },
      {
        "question": "How many people have the 747-400 certificate? | Do you  mean \tthe  name  of  Boeing 747-400 in the \tBoeing 747-400 table ? | yes",
        "query": "SELECT COUNT ( * ) FROM certificate AS t1 JOIN aircraft AS t2 ON t2.aid = t1.aid WHERE t2.name = \"Boeing 747-400\"",
        "schema": "CREATE TABLE certificate (aid NUMBER, eid NUMBER); CREATE TABLE aircraft (aid NUMBER, name TEXT);"
      },
      {
        "question": "how far is its distance? | Did   you  mean  the  distance of \tBoeing 747-400? | Yes",
        "query": "SELECT distance FROM aircraft WHERE name = \"Boeing 747-400\"",
        "schema": "CREATE TABLE certificate (eid NUMBER, aid NUMBER); CREATE TABLE aircraft (distance NUMBER, aid NUMBER, name TEXT);"
      },
      {
        "question": "and the Boeing 737-800? | And  what  do  you  want  to  know  about the  Boeing 737-800? | What is the distance of the Boeing 737-800?",
        "query": "SELECT distance FROM aircraft WHERE name = \"Boeing 737-800\"",
        "schema": "CREATE TABLE aircraft (distance NUMBER, aid NUMBER, name TEXT); CREATE TABLE certificate (eid NUMBER, aid NUMBER);"
      }
    ],
    [
      {
        "question": "What is the distance of the name Boeing 747-400? | did you mean the distance of the aircraft with the name Boeing 747-400? | yes",
        "query": "SELECT distance FROM aircraft WHERE name = 'Boeing 747-400'",
        "schema": "CREATE TABLE aircraft (aid NUMBER, name TEXT, distance NUMBER);"
      },
      {
        "question": "What is the distance of the aircraft with the name Boeing 737-800?",
        "query": "SELECT distance FROM aircraft WHERE name = 'Boeing 737-800'",
        "schema": "CREATE TABLE aircraft (aid NUMBER, name TEXT, distance NUMBER);"
      },
      {
        "question": "What is the name of the aircraft with distance 7120?",
        "query": "SELECT name FROM aircraft WHERE distance = 7120",
        "schema": "CREATE TABLE aircraft (aid NUMBER, name TEXT, distance NUMBER);"
      },
      {
        "question": "What is the id of the aircraft with the maximum distance?",
        "query": "SELECT aid FROM aircraft ORDER BY distance DESC LIMIT 1",
        "schema": "CREATE TABLE aircraft (aid NUMBER, name TEXT, distance NUMBER);"
      },
      {
        "question": "Which is the aircraft that have the maximum distance? | Did you mean the name of the aircraft? | yes",
        "query": "SELECT name FROM aircraft ORDER BY distance DESC LIMIT 1",
        "schema": "CREATE TABLE aircraft (distance NUMBER, name TEXT, aid NUMBER);"
      }
    ],
    [
      {
        "question": "What is the average price for flights from Los Angeles to Honolulu",
        "query": "SELECT AVG ( price ) FROM flight WHERE origin = \"Los Angeles\" AND destination = \"Honolulu\"",
        "schema": "CREATE TABLE flight (flno NUMBER, destination TEXT, price NUMBER, aid NUMBER, distance NUMBER, origin TEXT);"
      },
      {
        "question": "What is the average price for flights from Los Angeles to Chicago",
        "query": "SELECT AVG ( price ) FROM flight WHERE origin = \"Los Angeles\" AND destination = \"Chicago\"",
        "schema": "CREATE TABLE flight (origin TEXT, aid NUMBER, destination TEXT, price NUMBER, flno NUMBER, distance NUMBER);"
      },
      {
        "question": "What is the average price for flights from Los Angeles to Washington D.C.",
        "query": "SELECT AVG ( price ) FROM flight WHERE origin = \"Los Angeles\" AND destination = \"Washington D.C.\"",
        "schema": "CREATE TABLE flight (destination TEXT, distance NUMBER, aid NUMBER, price NUMBER, flno NUMBER, origin TEXT);"
      }
    ],
    [
      {
        "question": "what was the destination of flight 99 ?",
        "query": "SELECT destination FROM flight WHERE flno = 99",
        "schema": "CREATE TABLE flight (arrival_date TIME, origin TEXT, destination TEXT, flno NUMBER, aid NUMBER);"
      },
      {
        "question": "How far did flight 99 fly ?",
        "query": "SELECT distance FROM flight WHERE flno = 99",
        "schema": "CREATE TABLE aircraft (aid NUMBER, distance NUMBER); CREATE TABLE flight (origin TEXT, aid NUMBER, arrival_date TIME, distance NUMBER, destination TEXT, flno NUMBER);"
      },
      {
        "question": "What was the name of the airplane from flight 99 ?",
        "query": "SELECT t2.name FROM flight AS t1 JOIN aircraft AS t2 ON t1.aid = t2.aid WHERE t1.flno = 99",
        "schema": "CREATE TABLE aircraft (name TEXT, distance NUMBER, aid NUMBER); CREATE TABLE flight (origin TEXT, flno NUMBER, distance NUMBER, aid NUMBER, arrival_date TIME, destination TEXT);"
      }
    ],
    [
      {
        "question": "How many origin are there?",
        "query": "SELECT COUNT ( DISTINCT origin ) FROM flight",
        "schema": "CREATE TABLE flight (origin TEXT);"
      },
      {
        "question": "How many flights are there?",
        "query": "SELECT COUNT ( * ) FROM flight",
        "schema": "CREATE TABLE flight (origin TEXT, aid NUMBER, flno NUMBER);"
      },
      {
        "question": "Which origin has least number of flights?",
        "query": "SELECT origin FROM flight GROUP BY origin ORDER BY COUNT ( * ) ASC LIMIT 1",
        "schema": "CREATE TABLE flight (origin TEXT, aid NUMBER, flno NUMBER);"
      }
    ]
  ],
  "dorm_1": [
    [
      {
        "question": "Can you provide me with the names of the dorms that have both TV Lounge and Study Room as amenities?",
        "query": "SELECT t1.dorm_name FROM dorm AS t1 JOIN has_amenity AS t2 ON t1.dormid = t2.dormid JOIN dorm_amenity AS t3 ON t2.amenid = t3.amenid WHERE t3.amenity_name = 'TV Lounge' INTERSECT SELECT t1.dorm_name FROM dorm AS t1 JOIN has_amenity AS t2 ON t1.dormid = t2.dormid JOIN dorm_amenity AS t3 ON t2.amenid = t3.amenid WHERE t3.amenity_name = 'Study Room'",
        "schema": "CREATE TABLE Student (StuID NUMBER); CREATE TABLE Lives_in (stuid NUMBER); CREATE TABLE Has_amenity (dormid NUMBER, amenid NUMBER); CREATE TABLE Dorm_amenity (amenity_name TEXT, amenid NUMBER); CREATE TABLE Dorm (dormid NUMBER, dorm_name TEXT);"
      },
      {
        "question": "What is the Dorm ID of Dorm-plex 2000?",
        "query": "SELECT dormid FROM dorm WHERE dorm_name = \"Dorm-plex 2000\"",
        "schema": "CREATE TABLE Dorm (dormid NUMBER, dorm_name TEXT); CREATE TABLE Has_amenity (dormid NUMBER, amenid NUMBER); CREATE TABLE Student (StuID NUMBER); CREATE TABLE Lives_in (stuid NUMBER); CREATE TABLE Dorm_amenity (amenity_name TEXT, amenid NUMBER);"
      },
      {
        "question": "What is the student capacity of Dorm-plex 2000?",
        "query": "SELECT student_capacity FROM dorm WHERE dorm_name = \"Dorm-plex 2000\"",
        "schema": "CREATE TABLE Lives_in (stuid NUMBER, dormid NUMBER); CREATE TABLE Student (StuID NUMBER); CREATE TABLE Has_amenity (amenid NUMBER, dormid NUMBER); CREATE TABLE Dorm_amenity (amenity_name TEXT, amenid NUMBER); CREATE TABLE Dorm (student_capacity NUMBER, dorm_name TEXT, dormid NUMBER);"
      },
      {
        "question": "What genders can be residents of Dorm-plex 2000?",
        "query": "SELECT gender FROM dorm WHERE dorm_name = \"Dorm-plex 2000\"",
        "schema": "CREATE TABLE Dorm_amenity (amenid NUMBER, amenity_name TEXT); CREATE TABLE Student (Sex TEXT, LName TEXT, StuID NUMBER); CREATE TABLE Dorm (dormid NUMBER, student_capacity NUMBER, dorm_name TEXT, gender TEXT); CREATE TABLE Lives_in (dormid NUMBER, stuid NUMBER, room_number NUMBER); CREATE TABLE Has_amenity (amenid NUMBER, dormid NUMBER);"
      }
    ],
    [
      {
        "question": "What are the First names of students living in smith hall?",
        "query": "SELECT t1.fname FROM student AS t1 JOIN lives_in AS t2 ON t1.stuid = t2.stuid JOIN dorm AS t3 ON t3.dormid = t2.dormid WHERE t3.dorm_name = 'Smith Hall'",
        "schema": "CREATE TABLE Student (LName TEXT, city_code TEXT, StuID NUMBER, Fname TEXT); CREATE TABLE Dorm_amenity (amenity_name TEXT, amenid NUMBER); CREATE TABLE Dorm (dormid NUMBER, dorm_name TEXT); CREATE TABLE Has_amenity (dormid NUMBER); CREATE TABLE Lives_in (dormid NUMBER, room_number NUMBER, stuid NUMBER);"
      },
      {
        "question": "Last name of Tracy | Did you want the last name of the student with first name Tracy? | Yes",
        "query": "SELECT lname FROM student WHERE fname = \"Tracy\"",
        "schema": "CREATE TABLE Has_amenity (dormid NUMBER); CREATE TABLE Student (city_code TEXT, StuID NUMBER, Fname TEXT, LName TEXT); CREATE TABLE Dorm_amenity (amenid NUMBER, amenity_name TEXT); CREATE TABLE Lives_in (stuid NUMBER, room_number NUMBER, dormid NUMBER); CREATE TABLE Dorm (dorm_name TEXT, dormid NUMBER);"
      },
      {
        "question": "What is the city code of student Tracy kim?",
        "query": "SELECT city_code FROM student WHERE fname = \"Tracy\" AND lname = \"Kim\"",
        "schema": "CREATE TABLE Dorm (dormid NUMBER, dorm_name TEXT); CREATE TABLE Lives_in (dormid NUMBER, room_number NUMBER, stuid NUMBER); CREATE TABLE Has_amenity (dormid NUMBER); CREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, city_code TEXT); CREATE TABLE Dorm_amenity (amenid NUMBER, amenity_name TEXT);"
      },
      {
        "question": "What is the Student capacity of Smith Hall?",
        "query": "SELECT student_capacity FROM dorm WHERE dorm_name = \"Smith Hall\"",
        "schema": "CREATE TABLE Lives_in (room_number NUMBER, dormid NUMBER, stuid NUMBER); CREATE TABLE Has_amenity (dormid NUMBER); CREATE TABLE Dorm_amenity (amenid NUMBER, amenity_name TEXT); CREATE TABLE Dorm (dormid NUMBER, dorm_name TEXT, student_capacity NUMBER); CREATE TABLE Student (LName TEXT, Fname TEXT, StuID NUMBER, city_code TEXT);"
      }
    ],
    [
      {
        "question": "Which dorm has the largest capacity? | Hi do you need the dorm name or dorm id ? | dorm id , please.",
        "query": "SELECT dormid FROM dorm ORDER BY student_capacity DESC LIMIT 1",
        "schema": "CREATE TABLE Dorm (student_capacity NUMBER, dorm_name TEXT, dormid NUMBER); CREATE TABLE Lives_in (stuid NUMBER); CREATE TABLE Student (StuID NUMBER);"
      },
      {
        "question": "How many students live there?",
        "query": "SELECT COUNT ( t1.stuid ) FROM lives_in AS t1 JOIN dorm AS t2 ON t1.dormid = t2.dormid WHERE t2.student_capacity = ( SELECT MAX ( student_capacity ) FROM dorm )",
        "schema": "CREATE TABLE Dorm (dorm_name TEXT, dormid NUMBER, student_capacity NUMBER); CREATE TABLE Lives_in (dormid NUMBER, stuid NUMBER); CREATE TABLE Student (city_code TEXT, StuID NUMBER);"
      },
      {
        "question": "What is their average age?",
        "query": "SELECT AVG ( t1.age ) FROM student AS t1 JOIN lives_in AS t2 ON t1.stuid = t2.stuid JOIN dorm AS t3 ON t3.dormid = t2.dormid WHERE t3.student_capacity = ( SELECT MAX ( student_capacity ) FROM dorm )",
        "schema": "CREATE TABLE Student (LName TEXT, StuID NUMBER, Age NUMBER, city_code TEXT); CREATE TABLE Dorm (student_capacity NUMBER, dormid NUMBER, dorm_name TEXT); CREATE TABLE Lives_in (dormid NUMBER, stuid NUMBER);"
      }
    ],
    [
      {
        "question": "Please show me how many female students have the major 600",
        "query": "SELECT COUNT ( * ) FROM student WHERE sex = 'F' AND major = 600",
        "schema": "CREATE TABLE Dorm (gender TEXT); CREATE TABLE Student (StuID NUMBER, Sex TEXT, Major NUMBER);"
      },
      {
        "question": "How many female students are there total?",
        "query": "SELECT COUNT ( * ) FROM student WHERE sex = 'F'",
        "schema": "CREATE TABLE Dorm (gender TEXT); CREATE TABLE Student (Major NUMBER, Sex TEXT, LName TEXT, StuID NUMBER, city_code TEXT); CREATE TABLE Lives_in (stuid NUMBER);"
      },
      {
        "question": "How many of these women are under 25 years old?",
        "query": "SELECT COUNT ( * ) FROM student WHERE sex = 'F' AND age < 25",
        "schema": "CREATE TABLE Dorm (gender TEXT); CREATE TABLE Lives_in (stuid NUMBER); CREATE TABLE Student (Sex TEXT, StuID NUMBER, Major NUMBER, LName TEXT, Age NUMBER, city_code TEXT);"
      },
      {
        "question": "Show me the ages of the 9 female students with ages under 25 years.",
        "query": "SELECT age FROM student WHERE sex = 'F' AND age < 25",
        "schema": "CREATE TABLE Dorm (gender TEXT); CREATE TABLE Lives_in (stuid NUMBER); CREATE TABLE Student (LName TEXT, Age NUMBER, Sex TEXT, city_code TEXT, Major NUMBER, StuID NUMBER);"
      },
      {
        "question": "Of all the students under 25, how many are female?",
        "query": "SELECT COUNT ( * ) FROM student WHERE sex = 'F' AND age < 25",
        "schema": "CREATE TABLE Student (Major NUMBER, city_code TEXT, StuID NUMBER, LName TEXT, Sex TEXT, Age NUMBER); CREATE TABLE Lives_in (stuid NUMBER); CREATE TABLE Dorm (gender TEXT);"
      },
      {
        "question": "What are the names of the female students that are under 25?",
        "query": "SELECT fname,lname FROM student WHERE sex = 'F' AND age < 25",
        "schema": "CREATE TABLE Student (StuID NUMBER, Sex TEXT, LName TEXT, Age NUMBER, Major NUMBER, Fname TEXT, city_code TEXT); CREATE TABLE Dorm (gender TEXT); CREATE TABLE Lives_in (stuid NUMBER);"
      }
    ],
    [
      {
        "question": "Oh, sorry. I meant to ask what dorm does the student with the last name of Smith live in?",
        "query": "SELECT t1.dorm_name FROM dorm AS t1 JOIN lives_in AS t4 ON t4.dormid = t1.dormid JOIN student AS t5 ON t5.stuid = t4.stuid WHERE t5.lname = 'Smith'",
        "schema": "CREATE TABLE Lives_in (stuid NUMBER, dormid NUMBER); CREATE TABLE Dorm (dormid NUMBER, dorm_name TEXT); CREATE TABLE Student (LName TEXT, Fname TEXT, city_code TEXT, StuID NUMBER);"
      },
      {
        "question": "What are the amenities of those dorms?",
        "query": "SELECT t3.amenity_name FROM dorm AS t1 JOIN has_amenity AS t2 ON t1.dormid = t2.dormid JOIN dorm_amenity AS t3 ON t2.amenid = t3.amenid JOIN lives_in AS t4 ON t4.dormid = t1.dormid JOIN student AS t5 ON t5.stuid = t4.stuid WHERE t5.lname = 'Smith'",
        "schema": "CREATE TABLE Dorm_amenity (amenid NUMBER, amenity_name TEXT); CREATE TABLE Dorm (dorm_name TEXT, dormid NUMBER); CREATE TABLE Lives_in (dormid NUMBER, stuid NUMBER); CREATE TABLE Has_amenity (amenid NUMBER, dormid NUMBER); CREATE TABLE Student (Fname TEXT, StuID NUMBER, LName TEXT, city_code TEXT);"
      },
      {
        "question": "What are the amenities of the dorm that the student with the last name of Jones lives in?",
        "query": "SELECT t3.amenity_name FROM dorm AS t1 JOIN has_amenity AS t2 ON t1.dormid = t2.dormid JOIN dorm_amenity AS t3 ON t2.amenid = t3.amenid JOIN lives_in AS t4 ON t4.dormid = t1.dormid JOIN student AS t5 ON t5.stuid = t4.stuid WHERE t5.lname = 'Jones'",
        "schema": "CREATE TABLE Dorm_amenity (amenid NUMBER, amenity_name TEXT); CREATE TABLE Student (city_code TEXT, LName TEXT, StuID NUMBER, Fname TEXT); CREATE TABLE Lives_in (dormid NUMBER, stuid NUMBER); CREATE TABLE Has_amenity (amenid NUMBER, dormid NUMBER); CREATE TABLE Dorm (dorm_name TEXT, dormid NUMBER);"
      },
      {
        "question": "What are the amenities of the dorm that the oldest student lives in?",
        "query": "SELECT t3.amenity_name FROM dorm AS t1 JOIN has_amenity AS t2 ON t1.dormid = t2.dormid JOIN dorm_amenity AS t3 ON t2.amenid = t3.amenid JOIN lives_in AS t4 ON t4.dormid = t1.dormid JOIN student AS t5 ON t5.stuid = t4.stuid WHERE t5.age = ( SELECT MAX ( age ) FROM student )",
        "schema": "CREATE TABLE Dorm (dormid NUMBER, dorm_name TEXT); CREATE TABLE Student (city_code TEXT, StuID NUMBER, Age NUMBER, LName TEXT, Fname TEXT); CREATE TABLE Lives_in (dormid NUMBER, stuid NUMBER); CREATE TABLE Has_amenity (amenid NUMBER, dormid NUMBER); CREATE TABLE Dorm_amenity (amenity_name TEXT, amenid NUMBER);"
      },
      {
        "question": "What are the amenities of the dorm that has the most female students living in it?",
        "query": "SELECT t3.amenity_name FROM dorm AS t1 JOIN has_amenity AS t2 ON t1.dormid = t2.dormid JOIN dorm_amenity AS t3 ON t2.amenid = t3.amenid JOIN lives_in AS t4 ON t4.dormid = t1.dormid JOIN student AS t5 ON t5.stuid = t4.stuid WHERE t1.dormid = ( SELECT t1.dormid FROM dorm AS t1 JOIN lives_in AS t4 ON t1.dormid = t4.dormid JOIN student AS t5 ON t4.stuid = t5.stuid WHERE t5.sex = \"F\" GROUP BY t1.dormid ORDER BY COUNT ( * ) DESC LIMIT 1 )",
        "schema": "CREATE TABLE Dorm (dormid NUMBER, dorm_name TEXT, gender TEXT); CREATE TABLE Lives_in (dormid NUMBER, stuid NUMBER); CREATE TABLE Has_amenity (dormid NUMBER, amenid NUMBER); CREATE TABLE Student (city_code TEXT, Fname TEXT, StuID NUMBER, Sex TEXT, Age NUMBER, LName TEXT); CREATE TABLE Dorm_amenity (amenid NUMBER, amenity_name TEXT);"
      },
      {
        "question": "What are the amenities of the dorm that has the smallest student capacity?",
        "query": "SELECT t3.amenity_name FROM dorm AS t1 JOIN has_amenity AS t2 ON t1.dormid = t2.dormid JOIN dorm_amenity AS t3 ON t2.amenid = t3.amenid WHERE t1.student_capacity = ( SELECT MIN ( student_capacity ) FROM dorm )",
        "schema": "CREATE TABLE Dorm (student_capacity NUMBER, dormid NUMBER, dorm_name TEXT, gender TEXT); CREATE TABLE Has_amenity (amenid NUMBER, dormid NUMBER); CREATE TABLE Student (Age NUMBER, city_code TEXT, Sex TEXT, LName TEXT, StuID NUMBER, Fname TEXT); CREATE TABLE Dorm_amenity (amenid NUMBER, amenity_name TEXT); CREATE TABLE Lives_in (dormid NUMBER, stuid NUMBER);"
      }
    ],
    [
      {
        "question": "how many names or student in the table | Do  you  mean  the  LName  or  Fname ? | how many count in male or female in the student table",
        "query": "SELECT COUNT ( * ) , sex FROM student GROUP BY sex",
        "schema": "CREATE TABLE Student (Fname TEXT, Sex TEXT, LName TEXT, StuID NUMBER);"
      }
    ],
    [
      {
        "question": "Show me the number of students of all cities | Do you  mean  the  total  count of  students | Yes",
        "query": "SELECT COUNT ( * ) FROM student",
        "schema": "CREATE TABLE Lives_in (stuid NUMBER); CREATE TABLE Student (LName TEXT, StuID NUMBER, Age NUMBER, city_code TEXT);"
      },
      {
        "question": "Show me the count of students for each city",
        "query": "SELECT city_code, COUNT ( * ) FROM student GROUP BY city_code",
        "schema": "CREATE TABLE Lives_in (stuid NUMBER); CREATE TABLE Student (Age NUMBER, StuID NUMBER, LName TEXT, city_code TEXT);"
      },
      {
        "question": "Show me the count of students for the cities where have more than one student",
        "query": "SELECT city_code, COUNT ( * ) FROM student GROUP BY city_code HAVING COUNT ( * ) >1",
        "schema": "CREATE TABLE Lives_in (stuid NUMBER); CREATE TABLE Student (city_code TEXT, LName TEXT, StuID NUMBER, Age NUMBER);"
      }
    ],
    [
      {
        "question": "what's Smith Hall student capacity?",
        "query": "SELECT DISTINCT ( t1.student_capacity ) FROM dorm AS t1 JOIN has_amenity AS t2 ON t1.dormid = t2.dormid JOIN dorm_amenity AS t3 ON t2.amenid = t3.amenid WHERE t1.dorm_name = \"Smith Hall\"",
        "schema": "CREATE TABLE Dorm_amenity (amenity_name TEXT, amenid NUMBER); CREATE TABLE Has_amenity (amenid NUMBER, dormid NUMBER); CREATE TABLE Lives_in (stuid NUMBER, dormid NUMBER); CREATE TABLE Dorm (dorm_name TEXT, dormid NUMBER, student_capacity NUMBER); CREATE TABLE Student (StuID NUMBER);"
      },
      {
        "question": "sorry meant least number of amenities",
        "query": "SELECT t1.dorm_name FROM dorm AS t1 JOIN has_amenity AS t2 ON t1.dormid = t2.dormid JOIN dorm_amenity AS t3 ON t2.amenid = t3.amenid GROUP BY t2.dormid ORDER BY COUNT ( * ) LIMIT 1",
        "schema": "CREATE TABLE Dorm (dorm_name TEXT, dormid NUMBER, student_capacity NUMBER); CREATE TABLE Dorm_amenity (amenity_name TEXT, amenid NUMBER); CREATE TABLE Has_amenity (amenid NUMBER, dormid NUMBER); CREATE TABLE Student (LName TEXT, Fname TEXT, StuID NUMBER); CREATE TABLE Lives_in (stuid NUMBER, dormid NUMBER);"
      },
      {
        "question": "what's the name of the dorm with the highest amenities?",
        "query": "SELECT t1.dorm_name FROM dorm AS t1 JOIN has_amenity AS t2 ON t1.dormid = t2.dormid JOIN dorm_amenity AS t3 ON t2.amenid = t3.amenid GROUP BY t2.dormid ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Dorm (dorm_name TEXT, student_capacity NUMBER, dormid NUMBER); CREATE TABLE Has_amenity (dormid NUMBER, amenid NUMBER); CREATE TABLE Lives_in (stuid NUMBER, dormid NUMBER); CREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT); CREATE TABLE Dorm_amenity (amenid NUMBER, amenity_name TEXT);"
      },
      {
        "question": "which of this dorm has student capacity of 355?",
        "query": "SELECT dorm_name FROM dorm WHERE student_capacity = 355",
        "schema": "CREATE TABLE Dorm_amenity (amenity_name TEXT, amenid NUMBER); CREATE TABLE Lives_in (dormid NUMBER, stuid NUMBER); CREATE TABLE Dorm (dormid NUMBER, student_capacity NUMBER, dorm_name TEXT); CREATE TABLE Student (StuID NUMBER, Fname TEXT, LName TEXT); CREATE TABLE Has_amenity (amenid NUMBER, dormid NUMBER);"
      }
    ],
    [
      {
        "question": "How many students are living in the dorms?",
        "query": "SELECT COUNT ( * ) FROM student",
        "schema": "CREATE TABLE Student (StuID NUMBER, city_code TEXT); CREATE TABLE Lives_in (stuid NUMBER, dormid NUMBER); CREATE TABLE Dorm (dormid NUMBER);"
      },
      {
        "question": "Do they all have all amenities? | Did you mean whether all dorms have all amenities? | Yes.",
        "query": "SELECT DISTINCT dormid FROM has_amenity",
        "schema": "CREATE TABLE Student (city_code TEXT, StuID NUMBER); CREATE TABLE Lives_in (dormid NUMBER, stuid NUMBER); CREATE TABLE Dorm (dormid NUMBER); CREATE TABLE Has_amenity (amenid NUMBER, dormid NUMBER); CREATE TABLE Dorm_amenity (amenid NUMBER, amenity_name TEXT);"
      },
      {
        "question": "How many dorms do not have a TV lounge?",
        "query": "SELECT t3.dormid FROM has_amenity AS t3 JOIN dorm_amenity AS t4 ON t3.amenid = t4.amenid WHERE t4.amenity_name = 'TV Lounge'",
        "schema": "CREATE TABLE Student (city_code TEXT, StuID NUMBER); CREATE TABLE Lives_in (dormid NUMBER, stuid NUMBER); CREATE TABLE Has_amenity (dormid NUMBER, amenid NUMBER); CREATE TABLE Dorm (dormid NUMBER); CREATE TABLE Dorm_amenity (amenity_name TEXT, amenid NUMBER);"
      },
      {
        "question": "How many students are in those four dorms?",
        "query": "SELECT COUNT ( * ) FROM student AS t1 JOIN lives_in AS t2 ON t1.stuid = t2.stuid WHERE t2.dormid NOT IN ( SELECT t3.dormid FROM has_amenity AS t3 JOIN dorm_amenity AS t4 ON t3.amenid = t4.amenid WHERE t4.amenity_name = 'TV Lounge' )",
        "schema": "CREATE TABLE Student (Fname TEXT, StuID NUMBER, LName TEXT, Age NUMBER, city_code TEXT); CREATE TABLE Dorm_amenity (amenid NUMBER, amenity_name TEXT); CREATE TABLE Has_amenity (dormid NUMBER, amenid NUMBER); CREATE TABLE Lives_in (stuid NUMBER, dormid NUMBER); CREATE TABLE Dorm (student_capacity NUMBER, dormid NUMBER, dorm_name TEXT);"
      },
      {
        "question": "What are the first names of those nine students?",
        "query": "SELECT t1.fname FROM student AS t1 JOIN lives_in AS t2 ON t1.stuid = t2.stuid WHERE t2.dormid NOT IN ( SELECT t3.dormid FROM has_amenity AS t3 JOIN dorm_amenity AS t4 ON t3.amenid = t4.amenid WHERE t4.amenity_name = 'TV Lounge' )",
        "schema": "CREATE TABLE Dorm (student_capacity NUMBER, dorm_name TEXT, dormid NUMBER); CREATE TABLE Has_amenity (dormid NUMBER, amenid NUMBER); CREATE TABLE Dorm_amenity (amenid NUMBER, amenity_name TEXT); CREATE TABLE Lives_in (dormid NUMBER, stuid NUMBER); CREATE TABLE Student (city_code TEXT, Fname TEXT, StuID NUMBER, LName TEXT, Age NUMBER);"
      },
      {
        "question": "What are their ages?",
        "query": "SELECT t1.age FROM student AS t1 JOIN lives_in AS t2 ON t1.stuid = t2.stuid WHERE t2.dormid NOT IN ( SELECT t3.dormid FROM has_amenity AS t3 JOIN dorm_amenity AS t4 ON t3.amenid = t4.amenid WHERE t4.amenity_name = 'TV Lounge' )",
        "schema": "CREATE TABLE Lives_in (dormid NUMBER, stuid NUMBER); CREATE TABLE Has_amenity (amenid NUMBER, dormid NUMBER); CREATE TABLE Dorm (dormid NUMBER, student_capacity NUMBER, dorm_name TEXT); CREATE TABLE Dorm_amenity (amenity_name TEXT, amenid NUMBER); CREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER, city_code TEXT);"
      }
    ],
    [
      {
        "question": "Who are the students that are between 20 and 25 years of age? | Do you mean the last name or the first name of the students between 20 and 25 years of age? | What are the first names of the students who are between 20 and 25 years of age?",
        "query": "SELECT fname FROM student WHERE age BETWEEN 20 AND 25",
        "schema": "CREATE TABLE Student (StuID NUMBER, Age NUMBER, LName TEXT, Fname TEXT);"
      },
      {
        "question": "what are the student names who are in PHL city and are between 20 and 25 years of age | First name or last name? | first",
        "query": "SELECT fname FROM student WHERE city_code = 'PHL' AND age BETWEEN 20 AND 25",
        "schema": "CREATE TABLE Student (Fname TEXT, LName TEXT, StuID NUMBER, city_code TEXT, Age NUMBER); CREATE TABLE Lives_in (stuid NUMBER);"
      }
    ],
    [
      {
        "question": "How many amenities are offered in all dorms?",
        "query": "SELECT COUNT ( * ) FROM dorm_amenity",
        "schema": "CREATE TABLE Has_amenity (amenid NUMBER, dormid NUMBER); CREATE TABLE Dorm (dormid NUMBER, dorm_name TEXT); CREATE TABLE Dorm_amenity (amenid NUMBER, amenity_name TEXT);"
      },
      {
        "question": "Could you tell me the names of these amenities?",
        "query": "SELECT amenity_name FROM dorm_amenity",
        "schema": "CREATE TABLE Dorm (dorm_name TEXT, dormid NUMBER); CREATE TABLE Dorm_amenity (amenity_name TEXT, amenid NUMBER); CREATE TABLE Has_amenity (dormid NUMBER, amenid NUMBER);"
      },
      {
        "question": "What is the name of the most common amenity in all dorms?",
        "query": "SELECT t1.amenity_name FROM dorm_amenity AS t1 JOIN has_amenity AS t2 ON t1.amenid = t2.amenid GROUP BY t2.amenid ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Dorm_amenity (amenid NUMBER, amenity_name TEXT); CREATE TABLE Has_amenity (amenid NUMBER, dormid NUMBER); CREATE TABLE Dorm (dorm_name TEXT, dormid NUMBER);"
      }
    ],
    [
      {
        "question": "Can you show me the dorms with female only students?",
        "query": "SELECT * FROM dorm WHERE gender = \"F\"",
        "schema": "CREATE TABLE Student (Sex TEXT, StuID NUMBER); CREATE TABLE Dorm (dormid NUMBER, gender TEXT, student_capacity NUMBER, dorm_name TEXT); CREATE TABLE Lives_in (dormid NUMBER, stuid NUMBER);"
      },
      {
        "question": "okay, can you show me all the names of dorm with male only students?",
        "query": "SELECT * FROM dorm WHERE gender = \"M\"",
        "schema": "CREATE TABLE Student (StuID NUMBER, Sex TEXT, Fname TEXT, LName TEXT); CREATE TABLE Lives_in (stuid NUMBER, dormid NUMBER); CREATE TABLE Dorm (gender TEXT, dormid NUMBER, student_capacity NUMBER, dorm_name TEXT);"
      },
      {
        "question": "what about the name of the dorms that are both male and female?",
        "query": "SELECT * FROM dorm WHERE gender = \"M\" OR gender = \"F\"",
        "schema": "CREATE TABLE Student (LName TEXT, Sex TEXT, StuID NUMBER, Fname TEXT); CREATE TABLE Lives_in (dormid NUMBER, stuid NUMBER); CREATE TABLE Dorm (dormid NUMBER, gender TEXT, student_capacity NUMBER, dorm_name TEXT);"
      },
      {
        "question": "show me the name of dorms that are no gender specific?",
        "query": "SELECT dorm_name FROM dorm WHERE gender = \"X\"",
        "schema": "CREATE TABLE Dorm (gender TEXT, student_capacity NUMBER, dormid NUMBER, dorm_name TEXT); CREATE TABLE Lives_in (dormid NUMBER, stuid NUMBER); CREATE TABLE Student (Sex TEXT, LName TEXT, StuID NUMBER, Fname TEXT);"
      },
      {
        "question": "Show me all dorm names",
        "query": "SELECT dorm_name FROM dorm",
        "schema": "CREATE TABLE Lives_in (stuid NUMBER, dormid NUMBER); CREATE TABLE Dorm (student_capacity NUMBER, dormid NUMBER, dorm_name TEXT, gender TEXT); CREATE TABLE Student (LName TEXT, StuID NUMBER, Fname TEXT, Sex TEXT);"
      },
      {
        "question": "Can you tell me which one of them do not have TV Lounge?",
        "query": "SELECT dorm_name FROM dorm EXCEPT SELECT t1.dorm_name FROM dorm AS t1 JOIN has_amenity AS t2 ON t1.dormid = t2.dormid JOIN dorm_amenity AS t3 ON t2.amenid = t3.amenid WHERE t3.amenity_name = 'TV Lounge'",
        "schema": "CREATE TABLE Has_amenity (dormid NUMBER, amenid NUMBER); CREATE TABLE Lives_in (stuid NUMBER, dormid NUMBER); CREATE TABLE Dorm (gender TEXT, student_capacity NUMBER, dormid NUMBER, dorm_name TEXT); CREATE TABLE Student (StuID NUMBER, Fname TEXT, LName TEXT, Sex TEXT); CREATE TABLE Dorm_amenity (amenity_name TEXT, amenid NUMBER);"
      },
      {
        "question": "and which one DO have TV Lounge?",
        "query": "SELECT t1.dorm_name FROM dorm AS t1 JOIN has_amenity AS t2 ON t1.dormid = t2.dormid JOIN dorm_amenity AS t3 ON t2.amenid = t3.amenid WHERE t3.amenity_name = 'TV Lounge'",
        "schema": "CREATE TABLE Dorm (student_capacity NUMBER, gender TEXT, dorm_name TEXT, dormid NUMBER); CREATE TABLE Lives_in (stuid NUMBER, dormid NUMBER); CREATE TABLE Has_amenity (amenid NUMBER, dormid NUMBER); CREATE TABLE Dorm_amenity (amenity_name TEXT, amenid NUMBER); CREATE TABLE Student (Fname TEXT, Sex TEXT, StuID NUMBER, LName TEXT);"
      }
    ],
    [
      {
        "question": "What is the average oldest students with different sex? | Do you mean what is the average age of students? | What is the average and oldest age for students with different sex?",
        "query": "SELECT AVG ( age ) , MAX ( age ) , sex FROM student GROUP BY sex",
        "schema": "CREATE TABLE Student (Sex TEXT, StuID NUMBER, Age NUMBER);"
      }
    ],
    [
      {
        "question": "What is the student_capacity of Smith Hall? | Are you asking about the student capacity of the dorm named Smith Hall? | Yes",
        "query": "SELECT student_capacity FROM dorm WHERE dorm_name = \"Smith Hall\"",
        "schema": "CREATE TABLE Student (StuID NUMBER); CREATE TABLE Dorm (student_capacity NUMBER, dormid NUMBER, dorm_name TEXT);"
      },
      {
        "question": "How May female Dorm are there?",
        "query": "SELECT COUNT ( * ) FROM dorm WHERE gender = \"F\"",
        "schema": "CREATE TABLE Lives_in (dormid NUMBER, stuid NUMBER); CREATE TABLE Dorm (gender TEXT, student_capacity NUMBER, dormid NUMBER, dorm_name TEXT); CREATE TABLE Student (StuID NUMBER, Fname TEXT, Sex TEXT);"
      },
      {
        "question": "What is the amenity_name of Dorm_amenity? | Did you want all amenity names for dorms? | Yes",
        "query": "SELECT amenity_name FROM dorm_amenity",
        "schema": "CREATE TABLE Student (Fname TEXT, Sex TEXT, StuID NUMBER); CREATE TABLE Has_amenity (dormid NUMBER, amenid NUMBER); CREATE TABLE Dorm_amenity (amenity_name TEXT, amenid NUMBER); CREATE TABLE Dorm (student_capacity NUMBER, dorm_name TEXT, gender TEXT, dormid NUMBER); CREATE TABLE Lives_in (dormid NUMBER, stuid NUMBER);"
      },
      {
        "question": "List name of all amenities which Anonymous Donor Hall has, and sort the result in alphabetic order.",
        "query": "SELECT t1.amenity_name FROM dorm_amenity AS t1 JOIN has_amenity AS t2 ON t2.amenid = t1.amenid JOIN dorm AS t3 ON t2.dormid = t3.dormid WHERE t3.dorm_name = 'Anonymous Donor Hall' ORDER BY t1.amenity_name",
        "schema": "CREATE TABLE Lives_in (dormid NUMBER, stuid NUMBER); CREATE TABLE Has_amenity (dormid NUMBER, amenid NUMBER); CREATE TABLE Dorm (student_capacity NUMBER, dormid NUMBER, dorm_name TEXT, gender TEXT); CREATE TABLE Student (Sex TEXT, LName TEXT, StuID NUMBER, Fname TEXT); CREATE TABLE Dorm_amenity (amenity_name TEXT, amenid NUMBER);"
      }
    ],
    [
      {
        "question": "Show me the names of students | Do you mean full names of all the students? | Yes",
        "query": "SELECT fname , lname FROM student",
        "schema": "CREATE TABLE Student (Fname TEXT, StuID NUMBER, LName TEXT); CREATE TABLE Lives_in (stuid NUMBER);"
      },
      {
        "question": "Show me the Age list of all students",
        "query": "SELECT age FROM student",
        "schema": "CREATE TABLE Lives_in (stuid NUMBER); CREATE TABLE Student (Age NUMBER, StuID NUMBER, LName TEXT, Fname TEXT);"
      },
      {
        "question": "Show me the first and last name of students whose age is younger than the average age",
        "query": "SELECT fname , lname FROM student WHERE age < ( SELECT AVG ( age ) FROM student )",
        "schema": "CREATE TABLE Student (Age NUMBER, Fname TEXT, StuID NUMBER, LName TEXT); CREATE TABLE Lives_in (stuid NUMBER);"
      }
    ],
    [
      {
        "question": "How many students live in each dorm?",
        "query": "SELECT COUNT ( * ) , t3.dorm_name FROM student AS t1 JOIN lives_in AS t2 ON t1.stuid = t2.stuid JOIN dorm AS t3 ON t3.dormid = t2.dormid GROUP BY t3.dorm_name",
        "schema": "CREATE TABLE Student (StuID NUMBER, city_code TEXT); CREATE TABLE Dorm (dorm_name TEXT, dormid NUMBER); CREATE TABLE Lives_in (dormid NUMBER, stuid NUMBER);"
      },
      {
        "question": "What is the average age of the students living in each dorm?",
        "query": "SELECT AVG ( t1.age ) , t3.dorm_name FROM student AS t1 JOIN lives_in AS t2 ON t1.stuid = t2.stuid JOIN dorm AS t3 ON t3.dormid = t2.dormid GROUP BY t3.dorm_name",
        "schema": "CREATE TABLE Student (StuID NUMBER, city_code TEXT, Age NUMBER); CREATE TABLE Lives_in (stuid NUMBER, dormid NUMBER); CREATE TABLE Dorm (dormid NUMBER, dorm_name TEXT);"
      }
    ],
    [
      {
        "question": "Please find the names of the dorms that do not have any amenities?",
        "query": "SELECT dorm_name FROM dorm WHERE dormid NOT IN ( SELECT dormid FROM has_amenity )",
        "schema": "CREATE TABLE Student (Fname TEXT, StuID NUMBER); CREATE TABLE Lives_in (stuid NUMBER, dormid NUMBER); CREATE TABLE Has_amenity (amenid NUMBER, dormid NUMBER); CREATE TABLE Dorm (dormid NUMBER, dorm_name TEXT); CREATE TABLE Dorm_amenity (amenity_name TEXT, amenid NUMBER);"
      },
      {
        "question": "Which dorm has the highest student capacity?",
        "query": "SELECT dorm_name FROM dorm ORDER BY student_capacity DESC LIMIT 1",
        "schema": "CREATE TABLE Dorm_amenity (amenid NUMBER, amenity_name TEXT); CREATE TABLE Dorm (dormid NUMBER, student_capacity NUMBER, dorm_name TEXT); CREATE TABLE Has_amenity (amenid NUMBER, dormid NUMBER); CREATE TABLE Student (StuID NUMBER, Fname TEXT); CREATE TABLE Lives_in (dormid NUMBER, stuid NUMBER);"
      },
      {
        "question": "What about the lowest student capacity?",
        "query": "SELECT dorm_name FROM dorm ORDER BY student_capacity ASC LIMIT 1",
        "schema": "CREATE TABLE Dorm_amenity (amenity_name TEXT, amenid NUMBER); CREATE TABLE Dorm (dormid NUMBER, dorm_name TEXT, student_capacity NUMBER); CREATE TABLE Has_amenity (amenid NUMBER, dormid NUMBER); CREATE TABLE Lives_in (stuid NUMBER, dormid NUMBER); CREATE TABLE Student (Fname TEXT, StuID NUMBER, LName TEXT);"
      },
      {
        "question": "What is the average student capacity of all dorms?",
        "query": "SELECT AVG ( student_capacity ) FROM dorm",
        "schema": "CREATE TABLE Lives_in (stuid NUMBER, dormid NUMBER); CREATE TABLE Dorm (dorm_name TEXT, dormid NUMBER, student_capacity NUMBER); CREATE TABLE Student (LName TEXT, StuID NUMBER, Fname TEXT); CREATE TABLE Has_amenity (amenid NUMBER, dormid NUMBER); CREATE TABLE Dorm_amenity (amenity_name TEXT, amenid NUMBER);"
      },
      {
        "question": "What is the dorm ID of the dorm with the lowest student capacity?",
        "query": "SELECT dormid FROM dorm ORDER BY student_capacity ASC LIMIT 1",
        "schema": "CREATE TABLE Student (LName TEXT, StuID NUMBER, Fname TEXT); CREATE TABLE Dorm_amenity (amenid NUMBER, amenity_name TEXT); CREATE TABLE Has_amenity (amenid NUMBER, dormid NUMBER); CREATE TABLE Lives_in (dormid NUMBER, stuid NUMBER); CREATE TABLE Dorm (student_capacity NUMBER, dormid NUMBER, dorm_name TEXT);"
      }
    ],
    [
      {
        "question": "How many female students (sex is F) live in BAL",
        "query": "SELECT COUNT ( * ) FROM student WHERE sex = 'F' AND city_code = 'BAL'",
        "schema": "CREATE TABLE Lives_in (stuid NUMBER, dormid NUMBER); CREATE TABLE Dorm (dormid NUMBER, dorm_name TEXT, gender TEXT); CREATE TABLE Student (city_code TEXT, StuID NUMBER, Sex TEXT);"
      },
      {
        "question": "What are their last names?",
        "query": "SELECT lname FROM student WHERE sex = 'F' AND city_code = 'BAL'",
        "schema": "CREATE TABLE Lives_in (dormid NUMBER, stuid NUMBER); CREATE TABLE Student (Fname TEXT, StuID NUMBER, city_code TEXT, Sex TEXT, LName TEXT); CREATE TABLE Dorm (dormid NUMBER, dorm_name TEXT, gender TEXT);"
      },
      {
        "question": "Can you also show me the last names of any male students (sex is M) who are below the age of 20?",
        "query": "SELECT lname FROM student WHERE sex = 'M' AND age < 20",
        "schema": "CREATE TABLE Lives_in (stuid NUMBER, dormid NUMBER); CREATE TABLE Dorm (gender TEXT, dormid NUMBER, dorm_name TEXT); CREATE TABLE Student (LName TEXT, Fname TEXT, city_code TEXT, Sex TEXT, StuID NUMBER, Age NUMBER);"
      }
    ],
    [
      {
        "question": "The most common amenity in all dorms is what?",
        "query": "SELECT t1.amenity_name FROM dorm_amenity AS t1 JOIN has_amenity AS t2 ON t1.amenid = t2.amenid GROUP BY t2.amenid ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Has_amenity (dormid NUMBER, amenid NUMBER); CREATE TABLE Dorm (dormid NUMBER); CREATE TABLE Dorm_amenity (amenid NUMBER, amenity_name TEXT); CREATE TABLE Lives_in (dormid NUMBER, stuid NUMBER); CREATE TABLE Student (StuID NUMBER);"
      },
      {
        "question": "what's Roof dorm id?",
        "query": "SELECT dormid FROM has_amenity WHERE amenid = ( SELECT t1.amenid FROM dorm_amenity AS t1 JOIN has_amenity AS t2 ON t1.amenid = t2.amenid GROUP BY t2.amenid ORDER BY COUNT ( * ) DESC LIMIT 1 )",
        "schema": "CREATE TABLE Lives_in (dormid NUMBER, stuid NUMBER); CREATE TABLE Student (StuID NUMBER); CREATE TABLE Dorm_amenity (amenid NUMBER, amenity_name TEXT); CREATE TABLE Has_amenity (dormid NUMBER, amenid NUMBER); CREATE TABLE Dorm (dorm_name TEXT, dormid NUMBER);"
      },
      {
        "question": "what is TV Lounge amenity id?",
        "query": "SELECT t1.amenid FROM dorm_amenity AS t1 WHERE t1.amenity_name = 'TV Lounge'",
        "schema": "CREATE TABLE Dorm (dormid NUMBER, dorm_name TEXT); CREATE TABLE Has_amenity (amenid NUMBER, dormid NUMBER); CREATE TABLE Lives_in (stuid NUMBER, dormid NUMBER); CREATE TABLE Student (StuID NUMBER); CREATE TABLE Dorm_amenity (amenity_name TEXT, amenid NUMBER);"
      }
    ],
    [
      {
        "question": "Hello!  Can you list the dorm names of the various different dorms?",
        "query": "SELECT dorm_name FROM dorm",
        "schema": "CREATE TABLE Student (LName TEXT, Fname TEXT, StuID NUMBER); CREATE TABLE Dorm (dorm_name TEXT, dormid NUMBER); CREATE TABLE Lives_in (dormid NUMBER, stuid NUMBER);"
      },
      {
        "question": "Thanks!  Can you show me the average age of the students living in each of these dorms?",
        "query": "SELECT AVG ( t1.age ) , t3.dorm_name FROM student AS t1 JOIN lives_in AS t2 ON t1.stuid = t2.stuid JOIN dorm AS t3 ON t3.dormid = t2.dormid GROUP BY t3.dorm_name",
        "schema": "CREATE TABLE Student (Fname TEXT, city_code TEXT, LName TEXT, Age NUMBER, StuID NUMBER); CREATE TABLE Lives_in (dormid NUMBER, stuid NUMBER); CREATE TABLE Dorm (dorm_name TEXT, dormid NUMBER);"
      },
      {
        "question": "Thanks!  Now can you add to that list the student capacity of each of those dormitories?",
        "query": "SELECT AVG ( t1.age ) , t3.dorm_name, t3.student_capacity FROM student AS t1 JOIN lives_in AS t2 ON t1.stuid = t2.stuid JOIN dorm AS t3 ON t3.dormid = t2.dormid GROUP BY t3.dorm_name",
        "schema": "CREATE TABLE Student (city_code TEXT, StuID NUMBER, Fname TEXT, LName TEXT, Age NUMBER); CREATE TABLE Lives_in (stuid NUMBER, dormid NUMBER); CREATE TABLE Dorm (student_capacity NUMBER, dorm_name TEXT, dormid NUMBER);"
      }
    ],
    [
      {
        "question": "What are the names of the students who live in the city with code HKG? | Do  you  mean the full name | Yes please",
        "query": "SELECT fname , lname FROM student WHERE city_code = 'HKG'",
        "schema": "CREATE TABLE Student (city_code TEXT, LName TEXT, Fname TEXT, StuID NUMBER); CREATE TABLE Lives_in (stuid NUMBER);"
      },
      {
        "question": "Who are not living in that city with code HKG?",
        "query": "SELECT fname , lname FROM student WHERE city_code ! = 'HKG'",
        "schema": "CREATE TABLE Student (city_code TEXT, StuID NUMBER, LName TEXT, Fname TEXT); CREATE TABLE Lives_in (stuid NUMBER);"
      },
      {
        "question": "What is the average age of those who don't live in that city?",
        "query": "SELECT AVG ( age ) FROM student WHERE city_code ! = 'HKG'",
        "schema": "CREATE TABLE Student (StuID NUMBER, Age NUMBER, LName TEXT, city_code TEXT, Fname TEXT); CREATE TABLE Lives_in (stuid NUMBER);"
      }
    ],
    [
      {
        "question": "Please show me the information of all students who are under 25 years old",
        "query": "SELECT * FROM student WHERE age < 25",
        "schema": "CREATE TABLE Student (Sex TEXT, LName TEXT, StuID NUMBER, Age NUMBER); CREATE TABLE Lives_in (stuid NUMBER);"
      },
      {
        "question": "and of those, please now just show the female students",
        "query": "SELECT * FROM student WHERE sex = 'F' AND age < 25",
        "schema": "CREATE TABLE Lives_in (stuid NUMBER); CREATE TABLE Student (Sex TEXT, Age NUMBER, LName TEXT, StuID NUMBER);"
      },
      {
        "question": "Please return a count of how many there are left | I don't understand. Do you mean the count of students not in the previous result? | Only those in the previous results",
        "query": "SELECT COUNT ( * ) FROM student WHERE sex = 'F' AND age < 25",
        "schema": "CREATE TABLE Student (LName TEXT, StuID NUMBER, Sex TEXT, Age NUMBER); CREATE TABLE Lives_in (stuid NUMBER);"
      }
    ],
    [
      {
        "question": "Can you list the number of amenity ids associated with each distinct dorm id and display both of those results (dorm id and number of amenity ids)?",
        "query": "SELECT t3.dormid, COUNT ( t4.amenid ) FROM dorm AS t3 JOIN has_amenity AS t4 ON t3.dormid = t4.dormid JOIN dorm_amenity AS t5 ON t4.amenid = t5.amenid GROUP BY t3.dormid",
        "schema": "CREATE TABLE Dorm (dormid NUMBER); CREATE TABLE Dorm_amenity (amenity_name TEXT, amenid NUMBER); CREATE TABLE Has_amenity (dormid NUMBER, amenid NUMBER); CREATE TABLE Student (StuID NUMBER);"
      },
      {
        "question": "Wonderful, can you remove that information and instead display every student id that has a dorm id of 160?",
        "query": "SELECT t1.stuid FROM student AS t1 JOIN lives_in AS t2 ON t1.stuid = t2.stuid WHERE t2.dormid = 160",
        "schema": "CREATE TABLE Dorm (dorm_name TEXT, dormid NUMBER); CREATE TABLE Dorm_amenity (amenity_name TEXT, amenid NUMBER); CREATE TABLE Student (StuID NUMBER, LName TEXT); CREATE TABLE Has_amenity (dormid NUMBER, amenid NUMBER); CREATE TABLE Lives_in (stuid NUMBER, dormid NUMBER);"
      },
      {
        "question": "Can you show only the first names?",
        "query": "SELECT t1.fname FROM student AS t1 JOIN lives_in AS t2 ON t1.stuid = t2.stuid WHERE t2.dormid = 160",
        "schema": "CREATE TABLE Has_amenity (dormid NUMBER, amenid NUMBER); CREATE TABLE Dorm_amenity (amenid NUMBER, amenity_name TEXT); CREATE TABLE Lives_in (stuid NUMBER, dormid NUMBER); CREATE TABLE Student (Fname TEXT, StuID NUMBER, LName TEXT); CREATE TABLE Dorm (dormid NUMBER, dorm_name TEXT);"
      }
    ],
    [
      {
        "question": "Could you give me the number of dorms for each gender?",
        "query": "SELECT COUNT ( * ) , gender FROM dorm GROUP BY gender",
        "schema": "CREATE TABLE Student (StuID NUMBER, Sex TEXT); CREATE TABLE Dorm (dormid NUMBER, dorm_name TEXT, gender TEXT); CREATE TABLE Lives_in (stuid NUMBER, dormid NUMBER);"
      },
      {
        "question": "What are the names of those dorms?",
        "query": "SELECT dorm_name FROM dorm",
        "schema": "CREATE TABLE Student (StuID NUMBER, Sex TEXT); CREATE TABLE Dorm (dorm_name TEXT, dormid NUMBER, gender TEXT); CREATE TABLE Lives_in (dormid NUMBER, stuid NUMBER);"
      },
      {
        "question": "What is the dorm name of the dorm with the smallest capacity?",
        "query": "SELECT dorm_name FROM dorm ORDER BY student_capacity DESC LIMIT 1",
        "schema": "CREATE TABLE Lives_in (stuid NUMBER, dormid NUMBER); CREATE TABLE Student (StuID NUMBER, Sex TEXT); CREATE TABLE Dorm (dormid NUMBER, student_capacity NUMBER, gender TEXT, dorm_name TEXT);"
      }
    ],
    [
      {
        "question": "What is the average age of all the male students (sex with M) from each city?",
        "query": "SELECT AVG ( age ) , city_code FROM student WHERE sex = 'M' GROUP BY city_code",
        "schema": "CREATE TABLE Lives_in (stuid NUMBER); CREATE TABLE Student (Sex TEXT, StuID NUMBER, city_code TEXT, Age NUMBER);"
      },
      {
        "question": "What are the average number of all the male students (sex with M) from each city?",
        "query": "SELECT COUNT ( * ) , city_code FROM student WHERE sex = 'M' GROUP BY city_code",
        "schema": "CREATE TABLE Student (city_code TEXT, Sex TEXT, Age NUMBER, StuID NUMBER); CREATE TABLE Lives_in (stuid NUMBER);"
      },
      {
        "question": "What are the names of the students from ATL? | Here are the first and last names of the student from ATL | What is his age?",
        "query": "SELECT age FROM student WHERE city_code = 'ATL'",
        "schema": "CREATE TABLE Lives_in (stuid NUMBER); CREATE TABLE Student (city_code TEXT, LName TEXT, StuID NUMBER, Sex TEXT, Age NUMBER, Fname TEXT);"
      },
      {
        "question": "What is the average age of all the female students (sex with F) from each city?",
        "query": "SELECT AVG ( age ) , city_code FROM student WHERE sex = 'F' GROUP BY city_code",
        "schema": "CREATE TABLE Lives_in (stuid NUMBER); CREATE TABLE Student (Sex TEXT, LName TEXT, city_code TEXT, Fname TEXT, StuID NUMBER, Age NUMBER);"
      }
    ],
    [
      {
        "question": "what is the name of the dorms with capacity of greeter than  300",
        "query": "SELECT dorm_name FROM dorm WHERE student_capacity > 300",
        "schema": "CREATE TABLE Dorm (student_capacity NUMBER, dorm_name TEXT, dormid NUMBER); CREATE TABLE Dorm_amenity (amenid NUMBER); CREATE TABLE Student (StuID NUMBER);"
      },
      {
        "question": "what are  the dorm ids?",
        "query": "SELECT dormid FROM dorm WHERE student_capacity > 300",
        "schema": "CREATE TABLE Lives_in (stuid NUMBER, dormid NUMBER); CREATE TABLE Dorm (dorm_name TEXT, student_capacity NUMBER, dormid NUMBER); CREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT); CREATE TABLE Dorm_amenity (amenid NUMBER);"
      },
      {
        "question": "whats the student capacity?",
        "query": "SELECT student_capacity FROM dorm WHERE student_capacity > 300",
        "schema": "CREATE TABLE Dorm_amenity (amenid NUMBER); CREATE TABLE Lives_in (dormid NUMBER, stuid NUMBER); CREATE TABLE Student (Fname TEXT, LName TEXT, StuID NUMBER); CREATE TABLE Dorm (dormid NUMBER, dorm_name TEXT, student_capacity NUMBER);"
      }
    ],
    [
      {
        "question": "Find the name of the amenities that Smith Hall dorm has.",
        "query": "SELECT t3.amenity_name FROM dorm AS t1 JOIN has_amenity AS t2 ON t1.dormid = t2.dormid JOIN dorm_amenity AS t3 ON t2.amenid = t3.amenid WHERE t1.dorm_name = 'Smith Hall'",
        "schema": "CREATE TABLE Has_amenity (amenid NUMBER, dormid NUMBER); CREATE TABLE Dorm_amenity (amenity_name TEXT, amenid NUMBER); CREATE TABLE Student (StuID NUMBER); CREATE TABLE Lives_in (stuid NUMBER, dormid NUMBER); CREATE TABLE Dorm (dorm_name TEXT, dormid NUMBER);"
      },
      {
        "question": "Order that by amenity name please?",
        "query": "SELECT t3.amenity_name FROM dorm AS t1 JOIN has_amenity AS t2 ON t1.dormid = t2.dormid JOIN dorm_amenity AS t3 ON t2.amenid = t3.amenid WHERE t1.dorm_name = 'Smith Hall' ORDER BY t3.amenity_name",
        "schema": "CREATE TABLE Has_amenity (amenid NUMBER, dormid NUMBER); CREATE TABLE Dorm (dorm_name TEXT, dormid NUMBER); CREATE TABLE Lives_in (stuid NUMBER, dormid NUMBER); CREATE TABLE Dorm_amenity (amenid NUMBER, amenity_name TEXT); CREATE TABLE Student (StuID NUMBER);"
      },
      {
        "question": "What are the amenity id of those?",
        "query": "SELECT t2.amenid FROM dorm AS t1 JOIN has_amenity AS t2 ON t1.dormid = t2.dormid JOIN dorm_amenity AS t3 ON t2.amenid = t3.amenid WHERE t1.dorm_name = 'Smith Hall' ORDER BY t3.amenity_name",
        "schema": "CREATE TABLE Has_amenity (dormid NUMBER, amenid NUMBER); CREATE TABLE Dorm_amenity (amenid NUMBER, amenity_name TEXT); CREATE TABLE Dorm (dormid NUMBER, dorm_name TEXT); CREATE TABLE Student (StuID NUMBER); CREATE TABLE Lives_in (stuid NUMBER, dormid NUMBER);"
      },
      {
        "question": "What dorm id have the amenity id 901?",
        "query": "SELECT t2.dormid FROM has_amenity AS t2 WHERE t2.amenid = 901",
        "schema": "CREATE TABLE Student (StuID NUMBER); CREATE TABLE Has_amenity (dormid NUMBER, amenid NUMBER); CREATE TABLE Dorm_amenity (amenid NUMBER, amenity_name TEXT); CREATE TABLE Lives_in (dormid NUMBER, stuid NUMBER); CREATE TABLE Dorm (dorm_name TEXT, dormid NUMBER);"
      },
      {
        "question": "What dorm id have the amenity id 904?",
        "query": "SELECT t2.dormid FROM has_amenity AS t2 WHERE t2.amenid = 904",
        "schema": "CREATE TABLE Lives_in (stuid NUMBER, dormid NUMBER); CREATE TABLE Has_amenity (amenid NUMBER, dormid NUMBER); CREATE TABLE Dorm_amenity (amenid NUMBER, amenity_name TEXT); CREATE TABLE Student (StuID NUMBER); CREATE TABLE Dorm (dorm_name TEXT, dormid NUMBER);"
      },
      {
        "question": "What dorm id have the amenity id 922?",
        "query": "SELECT t2.dormid FROM has_amenity AS t2 WHERE t2.amenid = 922",
        "schema": "CREATE TABLE Has_amenity (dormid NUMBER, amenid NUMBER); CREATE TABLE Lives_in (stuid NUMBER, dormid NUMBER); CREATE TABLE Dorm_amenity (amenid NUMBER, amenity_name TEXT); CREATE TABLE Dorm (dormid NUMBER, dorm_name TEXT); CREATE TABLE Student (StuID NUMBER);"
      }
    ],
    [
      {
        "question": "I need the number of amenities for the dorms that can accommodate more than 100 students | Are you asking for the number of distinct amenities for dorms whose student capacity is greater than 100? | yes",
        "query": "SELECT COUNT ( DISTINCT t2.amenid ) , t1.dormid FROM dorm AS t1 JOIN has_amenity AS t2 ON t1.dormid = t2.dormid WHERE t1.student_capacity > 100 GROUP BY t1.dormid",
        "schema": "CREATE TABLE Student (StuID NUMBER); CREATE TABLE Has_amenity (amenid NUMBER, dormid NUMBER); CREATE TABLE Dorm (dorm_name TEXT, student_capacity NUMBER, dormid NUMBER); CREATE TABLE Dorm_amenity (amenity_name TEXT, amenid NUMBER);"
      }
    ],
    [
      {
        "question": "How many students are there?",
        "query": "SELECT COUNT ( * ) FROM student",
        "schema": "CREATE TABLE Dorm (dormid NUMBER, student_capacity NUMBER); CREATE TABLE Lives_in (dormid NUMBER, stuid NUMBER); CREATE TABLE Student (LName TEXT, Major NUMBER, Age NUMBER, city_code TEXT, Sex TEXT, Advisor NUMBER, StuID NUMBER, Fname TEXT);"
      },
      {
        "question": "How about the total number of dorms?",
        "query": "SELECT COUNT ( * ) FROM dorm",
        "schema": "CREATE TABLE Dorm (dorm_name TEXT, student_capacity NUMBER, dormid NUMBER); CREATE TABLE Student (Major NUMBER, city_code TEXT, Age NUMBER, StuID NUMBER, Fname TEXT, Advisor NUMBER, LName TEXT, Sex TEXT); CREATE TABLE Lives_in (dormid NUMBER, stuid NUMBER);"
      },
      {
        "question": "Can you list their names?",
        "query": "SELECT dorm_name FROM dorm",
        "schema": "CREATE TABLE Lives_in (stuid NUMBER, dormid NUMBER); CREATE TABLE Student (Fname TEXT, StuID NUMBER, Sex TEXT, Major NUMBER, city_code TEXT, Age NUMBER, Advisor NUMBER, LName TEXT); CREATE TABLE Dorm (dorm_name TEXT, student_capacity NUMBER, dormid NUMBER);"
      },
      {
        "question": "How many students live in Smith Hall?",
        "query": "SELECT COUNT ( * ) FROM student AS t1 JOIN lives_in AS t2 ON t1.stuid = t2.stuid JOIN dorm AS t3 ON t3.dormid = t2.dormid WHERE t3.dorm_name = 'Smith Hall'",
        "schema": "CREATE TABLE Dorm (dormid NUMBER, student_capacity NUMBER, dorm_name TEXT); CREATE TABLE Lives_in (stuid NUMBER, dormid NUMBER); CREATE TABLE Student (Fname TEXT, city_code TEXT, LName TEXT, Sex TEXT, Advisor NUMBER, Major NUMBER, Age NUMBER, StuID NUMBER);"
      },
      {
        "question": "How many of them are females?",
        "query": "SELECT COUNT ( * ) FROM student AS t1 JOIN lives_in AS t2 ON t1.stuid = t2.stuid JOIN dorm AS t3 ON t3.dormid = t2.dormid WHERE t3.dorm_name = 'Smith Hall' AND t1.sex = 'F'",
        "schema": "CREATE TABLE Lives_in (stuid NUMBER, dormid NUMBER); CREATE TABLE Student (city_code TEXT, LName TEXT, Sex TEXT, StuID NUMBER, Major NUMBER, Fname TEXT, Advisor NUMBER, Age NUMBER); CREATE TABLE Dorm (gender TEXT, dorm_name TEXT, student_capacity NUMBER, dormid NUMBER);"
      }
    ],
    [
      {
        "question": "What are the names of all the dorms?",
        "query": "SELECT dorm_name FROM dorm",
        "schema": "CREATE TABLE Dorm (dorm_name TEXT, dormid NUMBER); CREATE TABLE Student (LName TEXT, StuID NUMBER, Fname TEXT); CREATE TABLE Lives_in (stuid NUMBER, dormid NUMBER);"
      },
      {
        "question": "Which of those dorms have a TV Lounge?",
        "query": "SELECT t1.dorm_name FROM dorm AS t1 JOIN has_amenity AS t2 ON t1.dormid = t2.dormid JOIN dorm_amenity AS t3 ON t2.amenid = t3.amenid WHERE t3.amenity_name = 'TV Lounge'",
        "schema": "CREATE TABLE Lives_in (stuid NUMBER, dormid NUMBER); CREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT); CREATE TABLE Dorm_amenity (amenid NUMBER, amenity_name TEXT); CREATE TABLE Has_amenity (amenid NUMBER, dormid NUMBER); CREATE TABLE Dorm (dorm_name TEXT, dormid NUMBER);"
      },
      {
        "question": "What dorms have no Study Room as an amenity? | Do you mean among those with a TV Lounge? | Yes.",
        "query": "SELECT t1.dorm_name FROM dorm AS t1 JOIN has_amenity AS t2 ON t1.dormid = t2.dormid JOIN dorm_amenity AS t3 ON t2.amenid = t3.amenid WHERE t3.amenity_name = 'TV Lounge' EXCEPT SELECT t1.dorm_name FROM dorm AS t1 JOIN has_amenity AS t2 ON t1.dormid = t2.dormid JOIN dorm_amenity AS t3 ON t2.amenid = t3.amenid WHERE t3.amenity_name = 'Study Room'",
        "schema": "CREATE TABLE Student (Fname TEXT, StuID NUMBER, LName TEXT); CREATE TABLE Has_amenity (dormid NUMBER, amenid NUMBER); CREATE TABLE Dorm_amenity (amenity_name TEXT, amenid NUMBER); CREATE TABLE Lives_in (dormid NUMBER, stuid NUMBER); CREATE TABLE Dorm (dormid NUMBER, dorm_name TEXT);"
      },
      {
        "question": "And the gender that is housed?",
        "query": "SELECT t1.dorm_name,t1.gender FROM dorm AS t1 JOIN has_amenity AS t2 ON t1.dormid = t2.dormid JOIN dorm_amenity AS t3 ON t2.amenid = t3.amenid WHERE t3.amenity_name = 'TV Lounge' EXCEPT SELECT t1.dorm_name,t1.gender FROM dorm AS t1 JOIN has_amenity AS t2 ON t1.dormid = t2.dormid JOIN dorm_amenity AS t3 ON t2.amenid = t3.amenid WHERE t3.amenity_name = 'Study Room'",
        "schema": "CREATE TABLE Lives_in (stuid NUMBER, dormid NUMBER); CREATE TABLE Dorm (gender TEXT, dormid NUMBER, dorm_name TEXT); CREATE TABLE Student (StuID NUMBER, Sex TEXT, LName TEXT, Fname TEXT); CREATE TABLE Has_amenity (dormid NUMBER, amenid NUMBER); CREATE TABLE Dorm_amenity (amenid NUMBER, amenity_name TEXT);"
      },
      {
        "question": "Are there any other amenities that the dorm features? | For this dorm? Or for all dorms? | For this dorm.",
        "query": "SELECT t1.dorm_name,t3.amenity_name FROM dorm AS t1 JOIN has_amenity AS t2 ON t1.dormid = t2.dormid JOIN dorm_amenity AS t3 ON t2.amenid = t3.amenid WHERE t1.dorm_name = 'Fawlty Towers'",
        "schema": "CREATE TABLE Student (Fname TEXT, StuID NUMBER, Sex TEXT, LName TEXT); CREATE TABLE Has_amenity (dormid NUMBER, amenid NUMBER); CREATE TABLE Dorm (gender TEXT, dormid NUMBER, dorm_name TEXT); CREATE TABLE Lives_in (dormid NUMBER, stuid NUMBER); CREATE TABLE Dorm_amenity (amenid NUMBER, amenity_name TEXT);"
      }
    ]
  ],
  "hr_1": [
    [
      {
        "question": "list all job ids",
        "query": "SELECT DISTINCT job_id FROM employees",
        "schema": "CREATE TABLE locations (COUNTRY_ID TEXT); CREATE TABLE countries (COUNTRY_ID TEXT); CREATE TABLE jobs (JOB_ID TEXT, JOB_TITLE TEXT); CREATE TABLE job_history (DEPARTMENT_ID NUMBER, JOB_ID TEXT, EMPLOYEE_ID NUMBER); CREATE TABLE employees (EMPLOYEE_ID NUMBER, FIRST_NAME TEXT, MANAGER_ID NUMBER, COMMISSION_PCT NUMBER, JOB_ID TEXT, DEPARTMENT_ID NUMBER, LAST_NAME TEXT); CREATE TABLE departments (DEPARTMENT_ID NUMBER);"
      },
      {
        "question": "what are the hire dates for all the jobs?",
        "query": "SELECT hire_date FROM employees",
        "schema": "CREATE TABLE locations (COUNTRY_ID TEXT); CREATE TABLE countries (COUNTRY_ID TEXT); CREATE TABLE departments (DEPARTMENT_ID NUMBER); CREATE TABLE job_history (END_DATE TIME, START_DATE TIME, EMPLOYEE_ID NUMBER, DEPARTMENT_ID NUMBER, JOB_ID TEXT); CREATE TABLE employees (DEPARTMENT_ID NUMBER, JOB_ID TEXT, MANAGER_ID NUMBER, LAST_NAME TEXT, EMPLOYEE_ID NUMBER, FIRST_NAME TEXT, HIRE_DATE TIME, COMMISSION_PCT NUMBER); CREATE TABLE jobs (JOB_ID TEXT, JOB_TITLE TEXT);"
      },
      {
        "question": "list all the phone numbers",
        "query": "SELECT DISTINCT phone_number FROM employees",
        "schema": "CREATE TABLE locations (COUNTRY_ID TEXT); CREATE TABLE employees (EMPLOYEE_ID NUMBER, DEPARTMENT_ID NUMBER, FIRST_NAME TEXT, HIRE_DATE TIME, COMMISSION_PCT NUMBER, JOB_ID TEXT, PHONE_NUMBER TEXT, LAST_NAME TEXT, MANAGER_ID NUMBER); CREATE TABLE countries (COUNTRY_ID TEXT); CREATE TABLE jobs (JOB_TITLE TEXT, JOB_ID TEXT); CREATE TABLE departments (DEPARTMENT_ID NUMBER); CREATE TABLE job_history (START_DATE TIME, END_DATE TIME, EMPLOYEE_ID NUMBER, JOB_ID TEXT, DEPARTMENT_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Which departments get a commission percentage?",
        "query": "SELECT * FROM employees WHERE commission_pct ! = \"null\"",
        "schema": "CREATE TABLE job_history (DEPARTMENT_ID NUMBER); CREATE TABLE countries (COUNTRY_NAME TEXT); CREATE TABLE departments (DEPARTMENT_NAME TEXT, DEPARTMENT_ID NUMBER, MANAGER_ID NUMBER); CREATE TABLE employees (DEPARTMENT_ID NUMBER, COMMISSION_PCT NUMBER, EMPLOYEE_ID NUMBER);"
      },
      {
        "question": "How many employees in these departments get a commission percentage?",
        "query": "SELECT COUNT ( * ) FROM employees WHERE commission_pct ! = \"null\"",
        "schema": "CREATE TABLE employees (COMMISSION_PCT NUMBER, EMPLOYEE_ID NUMBER, DEPARTMENT_ID NUMBER, LAST_NAME TEXT); CREATE TABLE job_history (DEPARTMENT_ID NUMBER); CREATE TABLE departments (DEPARTMENT_ID NUMBER, MANAGER_ID NUMBER, DEPARTMENT_NAME TEXT); CREATE TABLE countries (COUNTRY_NAME TEXT);"
      },
      {
        "question": "By department, display average salary of employees who get a commission percentage",
        "query": "SELECT department_id , AVG ( salary ) FROM employees WHERE commission_pct ! = \"null\" GROUP BY department_id",
        "schema": "CREATE TABLE countries (COUNTRY_NAME TEXT); CREATE TABLE employees (SALARY NUMBER, COMMISSION_PCT NUMBER, LAST_NAME TEXT, EMPLOYEE_ID NUMBER, DEPARTMENT_ID NUMBER); CREATE TABLE departments (DEPARTMENT_ID NUMBER, DEPARTMENT_NAME TEXT, MANAGER_ID NUMBER); CREATE TABLE job_history (DEPARTMENT_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Hello!  Can you provide me with a list of all employee IDs and their corresponding salaries?",
        "query": "SELECT employee_id , salary FROM employees",
        "schema": "CREATE TABLE employees (FIRST_NAME TEXT, SALARY NUMBER, JOB_ID TEXT, LAST_NAME TEXT, DEPARTMENT_ID NUMBER, MANAGER_ID NUMBER, EMPLOYEE_ID NUMBER); CREATE TABLE jobs (MAX_SALARY NUMBER, MIN_SALARY NUMBER); CREATE TABLE departments (DEPARTMENT_NAME TEXT, DEPARTMENT_ID NUMBER);"
      },
      {
        "question": "Awesome!  That's great! Can you filter this list to show only the employee IDs and correpsonding salaries that are above the average salary?",
        "query": "SELECT employee_id , salary FROM employees WHERE salary > ( SELECT AVG ( salary ) FROM employees )",
        "schema": "CREATE TABLE jobs (MAX_SALARY NUMBER, MIN_SALARY NUMBER); CREATE TABLE departments (DEPARTMENT_ID NUMBER, DEPARTMENT_NAME TEXT); CREATE TABLE employees (JOB_ID TEXT, EMPLOYEE_ID NUMBER, DEPARTMENT_ID NUMBER, SALARY NUMBER, LAST_NAME TEXT, MANAGER_ID NUMBER, FIRST_NAME TEXT);"
      },
      {
        "question": "Great!  Now can you display this list to include both the first and last name corresponding to each employee ID?",
        "query": "SELECT employee_id , first_name , last_name , salary FROM employees WHERE salary > ( SELECT AVG ( salary ) FROM employees )",
        "schema": "CREATE TABLE departments (DEPARTMENT_ID NUMBER, DEPARTMENT_NAME TEXT); CREATE TABLE employees (SALARY NUMBER, FIRST_NAME TEXT, MANAGER_ID NUMBER, JOB_ID TEXT, DEPARTMENT_ID NUMBER, EMPLOYEE_ID NUMBER, LAST_NAME TEXT); CREATE TABLE jobs (MAX_SALARY NUMBER, MIN_SALARY NUMBER);"
      },
      {
        "question": "Thank you so much for that! Can you filter this list to show only the rows in which the employee works in a department which has an employee with the letter J in their name?",
        "query": "SELECT employee_id , first_name , last_name , salary FROM employees WHERE salary > ( SELECT AVG ( salary ) FROM employees ) AND department_id IN ( SELECT department_id FROM employees WHERE first_name LIKE '%J%' )",
        "schema": "CREATE TABLE employees (DEPARTMENT_ID NUMBER, EMPLOYEE_ID NUMBER, SALARY NUMBER, JOB_ID TEXT, MANAGER_ID NUMBER, LAST_NAME TEXT, FIRST_NAME TEXT); CREATE TABLE departments (DEPARTMENT_NAME TEXT, DEPARTMENT_ID NUMBER); CREATE TABLE jobs (MAX_SALARY NUMBER, MIN_SALARY NUMBER);"
      }
    ],
    [
      {
        "question": "Display the first name of all employees.",
        "query": "SELECT first_name FROM employees",
        "schema": "CREATE TABLE employees (LAST_NAME TEXT, FIRST_NAME TEXT, DEPARTMENT_ID NUMBER, EMPLOYEE_ID NUMBER); CREATE TABLE departments (DEPARTMENT_ID NUMBER);"
      },
      {
        "question": "Show the first name of all employees and their salary.",
        "query": "SELECT first_name, salary FROM employees",
        "schema": "CREATE TABLE employees (SALARY NUMBER, LAST_NAME TEXT, EMPLOYEE_ID NUMBER, DEPARTMENT_ID NUMBER, FIRST_NAME TEXT); CREATE TABLE jobs (MIN_SALARY NUMBER, MAX_SALARY NUMBER); CREATE TABLE departments (DEPARTMENT_ID NUMBER);"
      },
      {
        "question": "Show the first name of all employees and their salary for employees whose first name does not contain the letter M.",
        "query": "SELECT first_name, salary FROM employees WHERE first_name NOT LIKE '%M%'",
        "schema": "CREATE TABLE departments (DEPARTMENT_ID NUMBER); CREATE TABLE employees (DEPARTMENT_ID NUMBER, EMPLOYEE_ID NUMBER, LAST_NAME TEXT, FIRST_NAME TEXT, SALARY NUMBER); CREATE TABLE jobs (MIN_SALARY NUMBER, MAX_SALARY NUMBER);"
      },
      {
        "question": "Show the first name of all employees and list their salary in descending order for employees whose first name does not contain the letter M.",
        "query": "SELECT first_name, salary FROM employees WHERE first_name NOT LIKE '%M%' ORDER BY salary DESC",
        "schema": "CREATE TABLE jobs (MAX_SALARY NUMBER, MIN_SALARY NUMBER); CREATE TABLE departments (DEPARTMENT_ID NUMBER); CREATE TABLE employees (LAST_NAME TEXT, FIRST_NAME TEXT, SALARY NUMBER, EMPLOYEE_ID NUMBER, DEPARTMENT_ID NUMBER);"
      },
      {
        "question": "Out of these employees what is the phone number for the employee with the highest salary.",
        "query": "SELECT phone_number FROM employees WHERE first_name NOT LIKE '%M%' ORDER BY salary DESC LIMIT 1",
        "schema": "CREATE TABLE jobs (MIN_SALARY NUMBER, MAX_SALARY NUMBER); CREATE TABLE departments (DEPARTMENT_ID NUMBER); CREATE TABLE employees (DEPARTMENT_ID NUMBER, PHONE_NUMBER TEXT, EMPLOYEE_ID NUMBER, LAST_NAME TEXT, FIRST_NAME TEXT, SALARY NUMBER);"
      },
      {
        "question": "What is the email for the employee whose first name does not contain the letter M with the highest salary.",
        "query": "SELECT email FROM employees WHERE first_name NOT LIKE '%M%' ORDER BY salary DESC LIMIT 1",
        "schema": "CREATE TABLE employees (EMPLOYEE_ID NUMBER, SALARY NUMBER, EMAIL TEXT, LAST_NAME TEXT, DEPARTMENT_ID NUMBER, PHONE_NUMBER TEXT, FIRST_NAME TEXT); CREATE TABLE departments (DEPARTMENT_ID NUMBER); CREATE TABLE jobs (MAX_SALARY NUMBER, MIN_SALARY NUMBER);"
      }
    ],
    [
      {
        "question": "How much is the salary for employee id 163?",
        "query": "SELECT salary FROM employees WHERE employee_id = 163",
        "schema": "CREATE TABLE jobs (JOB_TITLE TEXT, MAX_SALARY NUMBER, MIN_SALARY NUMBER, JOB_ID TEXT); CREATE TABLE employees (JOB_ID TEXT, DEPARTMENT_ID NUMBER, MANAGER_ID NUMBER, LAST_NAME TEXT, FIRST_NAME TEXT, EMPLOYEE_ID NUMBER, SALARY NUMBER); CREATE TABLE job_history (EMPLOYEE_ID NUMBER); CREATE TABLE departments (DEPARTMENT_ID NUMBER);"
      },
      {
        "question": "What is employee id 163 full name?",
        "query": "SELECT first_name, last_name FROM employees WHERE employee_id = 163",
        "schema": "CREATE TABLE jobs (JOB_ID TEXT, MIN_SALARY NUMBER, MAX_SALARY NUMBER, JOB_TITLE TEXT); CREATE TABLE job_history (EMPLOYEE_ID NUMBER); CREATE TABLE departments (DEPARTMENT_ID NUMBER); CREATE TABLE employees (FIRST_NAME TEXT, JOB_ID TEXT, SALARY NUMBER, DEPARTMENT_ID NUMBER, MANAGER_ID NUMBER, LAST_NAME TEXT, EMPLOYEE_ID NUMBER);"
      },
      {
        "question": "Show me the full name for the employees that get more salary then employee 163?",
        "query": "SELECT first_name , last_name FROM employees WHERE salary > ( SELECT salary FROM employees WHERE employee_id = 163 )",
        "schema": "CREATE TABLE jobs (JOB_ID TEXT, MIN_SALARY NUMBER, JOB_TITLE TEXT, MAX_SALARY NUMBER); CREATE TABLE job_history (EMPLOYEE_ID NUMBER); CREATE TABLE departments (DEPARTMENT_ID NUMBER); CREATE TABLE employees (SALARY NUMBER, MANAGER_ID NUMBER, EMPLOYEE_ID NUMBER, LAST_NAME TEXT, JOB_ID TEXT, DEPARTMENT_ID NUMBER, FIRST_NAME TEXT);"
      },
      {
        "question": "What department does employee 163 work under?",
        "query": "SELECT department_id FROM employees WHERE employee_id = 163",
        "schema": "CREATE TABLE employees (JOB_ID TEXT, SALARY NUMBER, MANAGER_ID NUMBER, LAST_NAME TEXT, FIRST_NAME TEXT, DEPARTMENT_ID NUMBER, EMPLOYEE_ID NUMBER); CREATE TABLE jobs (JOB_ID TEXT, JOB_TITLE TEXT, MAX_SALARY NUMBER, MIN_SALARY NUMBER); CREATE TABLE job_history (EMPLOYEE_ID NUMBER); CREATE TABLE departments (DEPARTMENT_ID NUMBER, DEPARTMENT_NAME TEXT);"
      },
      {
        "question": "How many employee's work for employee's 163 department?",
        "query": "SELECT COUNT ( * ) FROM employees WHERE department_id = ( SELECT department_id FROM employees WHERE employee_id = 163 )",
        "schema": "CREATE TABLE employees (DEPARTMENT_ID NUMBER, MANAGER_ID NUMBER, LAST_NAME TEXT, JOB_ID TEXT, FIRST_NAME TEXT, SALARY NUMBER, EMPLOYEE_ID NUMBER); CREATE TABLE jobs (MIN_SALARY NUMBER, JOB_TITLE TEXT, MAX_SALARY NUMBER, JOB_ID TEXT); CREATE TABLE departments (DEPARTMENT_NAME TEXT, DEPARTMENT_ID NUMBER); CREATE TABLE job_history (EMPLOYEE_ID NUMBER);"
      },
      {
        "question": "Who is the head of this department?",
        "query": "SELECT DISTINCT manager_id FROM employees WHERE department_id = ( SELECT department_id FROM employees WHERE employee_id = 163 )",
        "schema": "CREATE TABLE job_history (EMPLOYEE_ID NUMBER); CREATE TABLE jobs (MAX_SALARY NUMBER, JOB_TITLE TEXT, MIN_SALARY NUMBER, JOB_ID TEXT); CREATE TABLE employees (SALARY NUMBER, LAST_NAME TEXT, MANAGER_ID NUMBER, DEPARTMENT_ID NUMBER, FIRST_NAME TEXT, EMPLOYEE_ID NUMBER, JOB_ID TEXT); CREATE TABLE departments (DEPARTMENT_ID NUMBER, DEPARTMENT_NAME TEXT);"
      }
    ],
    [
      {
        "question": "Show me all the employees in the same department as Clara. | Here is all the information of all the employees in the same department as the employee with a first name Clara. | Can you show me their hire dates?",
        "query": "SELECT hire_date FROM employees WHERE department_id = ( SELECT department_id FROM employees WHERE first_name = \"Clara\" )",
        "schema": "CREATE TABLE departments (DEPARTMENT_NAME TEXT, DEPARTMENT_ID NUMBER); CREATE TABLE employees (EMPLOYEE_ID NUMBER, FIRST_NAME TEXT, LAST_NAME TEXT, DEPARTMENT_ID NUMBER, HIRE_DATE TIME);"
      },
      {
        "question": "What is their average salary?",
        "query": "SELECT AVG ( salary ) FROM employees WHERE department_id = ( SELECT department_id FROM employees WHERE first_name = \"Clara\" )",
        "schema": "CREATE TABLE jobs (MAX_SALARY NUMBER, MIN_SALARY NUMBER); CREATE TABLE departments (DEPARTMENT_ID NUMBER, DEPARTMENT_NAME TEXT); CREATE TABLE employees (DEPARTMENT_ID NUMBER, HIRE_DATE TIME, LAST_NAME TEXT, FIRST_NAME TEXT, SALARY NUMBER, EMPLOYEE_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Can you show me the first and last names of all employees who work in any department located in London please?",
        "query": "SELECT first_name , last_name FROM employees AS t1 JOIN departments AS t2 ON t1.department_id = t2.department_id JOIN locations AS t3 ON t2.location_id = t3.location_id WHERE t3.city = 'London'",
        "schema": "CREATE TABLE countries (COUNTRY_ID TEXT, COUNTRY_NAME TEXT); CREATE TABLE employees (DEPARTMENT_ID NUMBER, LAST_NAME TEXT, JOB_ID TEXT, FIRST_NAME TEXT, EMPLOYEE_ID NUMBER, MANAGER_ID NUMBER); CREATE TABLE job_history (DEPARTMENT_ID NUMBER); CREATE TABLE locations (CITY TEXT, STATE_PROVINCE TEXT, COUNTRY_ID TEXT, STREET_ADDRESS TEXT, LOCATION_ID NUMBER); CREATE TABLE departments (DEPARTMENT_ID NUMBER, DEPARTMENT_NAME TEXT, LOCATION_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What is the department id for the Finance department?",
        "query": "SELECT department_id FROM departments WHERE department_name = 'Finance'",
        "schema": "CREATE TABLE employees (EMPLOYEE_ID NUMBER, DEPARTMENT_ID NUMBER, LAST_NAME TEXT); CREATE TABLE departments (DEPARTMENT_ID NUMBER, DEPARTMENT_NAME TEXT, MANAGER_ID NUMBER);"
      },
      {
        "question": "How many employees work in that department?",
        "query": "SELECT COUNT ( * ) FROM employees AS t1 JOIN departments AS t2 ON t1.department_id = t2.department_id WHERE t2.department_name = 'Finance'",
        "schema": "CREATE TABLE jobs (JOB_ID TEXT); CREATE TABLE employees (LAST_NAME TEXT, MANAGER_ID NUMBER, FIRST_NAME TEXT, EMPLOYEE_ID NUMBER, JOB_ID TEXT, DEPARTMENT_ID NUMBER); CREATE TABLE departments (DEPARTMENT_NAME TEXT, DEPARTMENT_ID NUMBER, MANAGER_ID NUMBER);"
      },
      {
        "question": "What are their first names?",
        "query": "SELECT t1.first_name FROM employees AS t1 JOIN departments AS t2 ON t1.department_id = t2.department_id WHERE t2.department_name = 'Finance'",
        "schema": "CREATE TABLE employees (LAST_NAME TEXT, EMPLOYEE_ID NUMBER, DEPARTMENT_ID NUMBER, MANAGER_ID NUMBER, FIRST_NAME TEXT, JOB_ID TEXT); CREATE TABLE jobs (JOB_ID TEXT); CREATE TABLE departments (DEPARTMENT_ID NUMBER, DEPARTMENT_NAME TEXT, MANAGER_ID NUMBER);"
      },
      {
        "question": "What is the job id for each employee in the Finance department?",
        "query": "SELECT t1.job_id FROM employees AS t1 JOIN departments AS t2 ON t1.department_id = t2.department_id WHERE t2.department_name = 'Finance'",
        "schema": "CREATE TABLE employees (DEPARTMENT_ID NUMBER, LAST_NAME TEXT, JOB_ID TEXT, MANAGER_ID NUMBER, EMPLOYEE_ID NUMBER, FIRST_NAME TEXT); CREATE TABLE jobs (JOB_TITLE TEXT, JOB_ID TEXT); CREATE TABLE departments (DEPARTMENT_NAME TEXT, MANAGER_ID NUMBER, DEPARTMENT_ID NUMBER);"
      },
      {
        "question": "What are their employee IDs?",
        "query": "SELECT t1.employee_id FROM employees AS t1 JOIN departments AS t2 ON t1.department_id = t2.department_id WHERE t2.department_name = 'Finance'",
        "schema": "CREATE TABLE departments (DEPARTMENT_NAME TEXT, DEPARTMENT_ID NUMBER, MANAGER_ID NUMBER); CREATE TABLE jobs (JOB_ID TEXT, JOB_TITLE TEXT); CREATE TABLE employees (LAST_NAME TEXT, EMPLOYEE_ID NUMBER, DEPARTMENT_ID NUMBER, FIRST_NAME TEXT, MANAGER_ID NUMBER, JOB_ID TEXT);"
      }
    ],
    [
      {
        "question": "List all employees?",
        "query": "SELECT first_name, last_name FROM employees",
        "schema": "CREATE TABLE employees (EMPLOYEE_ID NUMBER, JOB_ID TEXT, DEPARTMENT_ID NUMBER, LAST_NAME TEXT, MANAGER_ID NUMBER, FIRST_NAME TEXT); CREATE TABLE departments (DEPARTMENT_ID NUMBER); CREATE TABLE job_history (EMPLOYEE_ID NUMBER);"
      },
      {
        "question": "Of these employees, how many did not have a job in the past?",
        "query": "SELECT COUNT ( * ) FROM employees WHERE employee_id NOT IN ( SELECT employee_id FROM job_history )",
        "schema": "CREATE TABLE jobs (JOB_TITLE TEXT, JOB_ID TEXT); CREATE TABLE job_history (JOB_ID TEXT, START_DATE TIME, EMPLOYEE_ID NUMBER, END_DATE TIME); CREATE TABLE employees (HIRE_DATE TIME, JOB_ID TEXT, MANAGER_ID NUMBER, FIRST_NAME TEXT, EMPLOYEE_ID NUMBER, DEPARTMENT_ID NUMBER, LAST_NAME TEXT); CREATE TABLE departments (DEPARTMENT_ID NUMBER);"
      },
      {
        "question": "Okay. How many had jobs in the past?",
        "query": "SELECT COUNT ( * ) FROM employees WHERE employee_id IN ( SELECT employee_id FROM job_history )",
        "schema": "CREATE TABLE jobs (JOB_ID TEXT, JOB_TITLE TEXT); CREATE TABLE job_history (END_DATE TIME, EMPLOYEE_ID NUMBER, START_DATE TIME, JOB_ID TEXT, DEPARTMENT_ID NUMBER); CREATE TABLE employees (FIRST_NAME TEXT, LAST_NAME TEXT, DEPARTMENT_ID NUMBER, MANAGER_ID NUMBER, JOB_ID TEXT, HIRE_DATE TIME, EMPLOYEE_ID NUMBER); CREATE TABLE departments (DEPARTMENT_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Find the first name and last name and department id for those employees who earn such amount of salary which is the smallest salary of any of the departments.",
        "query": "SELECT first_name , last_name , department_id FROM employees WHERE salary IN ( SELECT MIN ( salary ) FROM employees GROUP BY department_id )",
        "schema": "CREATE TABLE departments (DEPARTMENT_ID NUMBER, DEPARTMENT_NAME TEXT); CREATE TABLE employees (SALARY NUMBER, EMPLOYEE_ID NUMBER, FIRST_NAME TEXT, LAST_NAME TEXT, DEPARTMENT_ID NUMBER);"
      },
      {
        "question": "Which of those has the highest salary?",
        "query": "SELECT first_name , last_name , department_id FROM employees WHERE salary IN ( SELECT MAX ( salary ) FROM employees GROUP BY department_id )",
        "schema": "CREATE TABLE departments (DEPARTMENT_NAME TEXT, DEPARTMENT_ID NUMBER); CREATE TABLE employees (SALARY NUMBER, EMPLOYEE_ID NUMBER, LAST_NAME TEXT, FIRST_NAME TEXT, DEPARTMENT_ID NUMBER);"
      },
      {
        "question": "Of the people who earn the smallest salary in each department, who has the highest salary? | do you mean the first name and last name and department id for the people? | yes",
        "query": "SELECT first_name,last_name FROM employees ORDER BY salary DESC LIMIT 1",
        "schema": "CREATE TABLE employees (SALARY NUMBER, LAST_NAME TEXT, FIRST_NAME TEXT, DEPARTMENT_ID NUMBER, EMPLOYEE_ID NUMBER); CREATE TABLE departments (DEPARTMENT_NAME TEXT, DEPARTMENT_ID NUMBER);"
      },
      {
        "question": "Give me their salary and their manager's salary | do you mean the salary and manager's salary of all people? | Give me the name and salary of the highest paid employee and their manager",
        "query": "SELECT first_name,last_name,salary,manager_id FROM employees ORDER BY salary DESC LIMIT 1",
        "schema": "CREATE TABLE departments (DEPARTMENT_ID NUMBER, MANAGER_ID NUMBER, DEPARTMENT_NAME TEXT); CREATE TABLE employees (MANAGER_ID NUMBER, DEPARTMENT_ID NUMBER, LAST_NAME TEXT, SALARY NUMBER, EMPLOYEE_ID NUMBER, FIRST_NAME TEXT);"
      }
    ],
    [
      {
        "question": "display the emails of the employees who have no commission percentage and salary within the range 7000 to 12000 and works in that department which number is 50.",
        "query": "SELECT email FROM employees WHERE commission_pct = \"null\" AND salary BETWEEN 7000 AND 12000 AND department_id = 50",
        "schema": "CREATE TABLE jobs (JOB_ID TEXT, MIN_SALARY NUMBER, MAX_SALARY NUMBER); CREATE TABLE locations (LOCATION_ID NUMBER); CREATE TABLE job_history (DEPARTMENT_ID NUMBER); CREATE TABLE departments (MANAGER_ID NUMBER, DEPARTMENT_ID NUMBER, LOCATION_ID NUMBER, DEPARTMENT_NAME TEXT); CREATE TABLE employees (EMPLOYEE_ID NUMBER, DEPARTMENT_ID NUMBER, EMAIL TEXT, LAST_NAME TEXT, JOB_ID TEXT, PHONE_NUMBER TEXT, MANAGER_ID NUMBER, SALARY NUMBER, COMMISSION_PCT NUMBER, FIRST_NAME TEXT);"
      },
      {
        "question": "display the emails of the employees who have no commission percentage",
        "query": "SELECT email FROM employees WHERE commission_pct = \"null\"",
        "schema": "CREATE TABLE departments (DEPARTMENT_NAME TEXT, MANAGER_ID NUMBER, LOCATION_ID NUMBER, DEPARTMENT_ID NUMBER); CREATE TABLE employees (LAST_NAME TEXT, SALARY NUMBER, PHONE_NUMBER TEXT, EMAIL TEXT, DEPARTMENT_ID NUMBER, JOB_ID TEXT, FIRST_NAME TEXT, MANAGER_ID NUMBER, COMMISSION_PCT NUMBER, EMPLOYEE_ID NUMBER); CREATE TABLE locations (LOCATION_ID NUMBER); CREATE TABLE jobs (MAX_SALARY NUMBER, MIN_SALARY NUMBER, JOB_ID TEXT); CREATE TABLE job_history (DEPARTMENT_ID NUMBER);"
      },
      {
        "question": "display the emails of the employees who have a commission percentage | Did you mean the employees who have commission percentage more than 0? | yes",
        "query": "SELECT email FROM employees WHERE commission_pct > 0",
        "schema": "CREATE TABLE job_history (DEPARTMENT_ID NUMBER); CREATE TABLE employees (FIRST_NAME TEXT, DEPARTMENT_ID NUMBER, PHONE_NUMBER TEXT, JOB_ID TEXT, LAST_NAME TEXT, COMMISSION_PCT NUMBER, EMAIL TEXT, MANAGER_ID NUMBER, SALARY NUMBER, EMPLOYEE_ID NUMBER); CREATE TABLE locations (LOCATION_ID NUMBER); CREATE TABLE jobs (MAX_SALARY NUMBER, JOB_ID TEXT, MIN_SALARY NUMBER); CREATE TABLE departments (MANAGER_ID NUMBER, DEPARTMENT_ID NUMBER, LOCATION_ID NUMBER, DEPARTMENT_NAME TEXT);"
      },
      {
        "question": "How many employees with salary above 12000 are there?",
        "query": "SELECT COUNT ( * ) FROM employees WHERE salary >12000",
        "schema": "CREATE TABLE employees (PHONE_NUMBER TEXT, EMAIL TEXT, SALARY NUMBER, JOB_ID TEXT, DEPARTMENT_ID NUMBER, MANAGER_ID NUMBER, FIRST_NAME TEXT, EMPLOYEE_ID NUMBER, COMMISSION_PCT NUMBER, LAST_NAME TEXT); CREATE TABLE job_history (DEPARTMENT_ID NUMBER); CREATE TABLE departments (LOCATION_ID NUMBER, DEPARTMENT_NAME TEXT, DEPARTMENT_ID NUMBER, MANAGER_ID NUMBER); CREATE TABLE locations (LOCATION_ID NUMBER); CREATE TABLE jobs (JOB_ID TEXT, MAX_SALARY NUMBER, MIN_SALARY NUMBER);"
      },
      {
        "question": "List their names please | Did you mean their FIRST NAME\tand LAST NAME? | yes",
        "query": "SELECT first_name,last_name FROM employees WHERE salary >12000",
        "schema": "CREATE TABLE locations (LOCATION_ID NUMBER); CREATE TABLE employees (SALARY NUMBER, EMPLOYEE_ID NUMBER, JOB_ID TEXT, COMMISSION_PCT NUMBER, FIRST_NAME TEXT, EMAIL TEXT, DEPARTMENT_ID NUMBER, LAST_NAME TEXT, PHONE_NUMBER TEXT, MANAGER_ID NUMBER); CREATE TABLE jobs (JOB_ID TEXT, MAX_SALARY NUMBER, MIN_SALARY NUMBER); CREATE TABLE departments (LOCATION_ID NUMBER, DEPARTMENT_ID NUMBER, MANAGER_ID NUMBER, DEPARTMENT_NAME TEXT); CREATE TABLE job_history (DEPARTMENT_ID NUMBER);"
      }
    ],
    [
      {
        "question": "create a table with a column for department id and a column for department name",
        "query": "SELECT department_id,department_name FROM departments",
        "schema": "CREATE TABLE departments (DEPARTMENT_NAME TEXT, DEPARTMENT_ID NUMBER); CREATE TABLE employees (DEPARTMENT_ID NUMBER, EMPLOYEE_ID NUMBER); CREATE TABLE job_history (DEPARTMENT_ID NUMBER); CREATE TABLE jobs (JOB_ID TEXT, JOB_TITLE TEXT);"
      },
      {
        "question": "Show the total number of employee ids for each department id",
        "query": "SELECT t1.department_id, COUNT ( * ) FROM departments AS t1 JOIN employees AS t2 WHERE t1.department_id = t2.department_id GROUP BY t1.department_id",
        "schema": "CREATE TABLE jobs (JOB_TITLE TEXT, JOB_ID TEXT); CREATE TABLE job_history (DEPARTMENT_ID NUMBER); CREATE TABLE employees (DEPARTMENT_ID NUMBER, EMPLOYEE_ID NUMBER, MANAGER_ID NUMBER, LAST_NAME TEXT, FIRST_NAME TEXT); CREATE TABLE departments (MANAGER_ID NUMBER, DEPARTMENT_NAME TEXT, DEPARTMENT_ID NUMBER);"
      },
      {
        "question": "Add a column with department name",
        "query": "SELECT t1.department_id, t1.department_name, COUNT ( * ) FROM departments AS t1 JOIN employees AS t2 WHERE t1.department_id = t2.department_id GROUP BY t1.department_id",
        "schema": "CREATE TABLE job_history (DEPARTMENT_ID NUMBER); CREATE TABLE departments (DEPARTMENT_NAME TEXT, MANAGER_ID NUMBER, DEPARTMENT_ID NUMBER); CREATE TABLE jobs (JOB_ID TEXT, JOB_TITLE TEXT); CREATE TABLE employees (EMPLOYEE_ID NUMBER, DEPARTMENT_ID NUMBER, FIRST_NAME TEXT, LAST_NAME TEXT, MANAGER_ID NUMBER);"
      }
    ],
    [
      {
        "question": "How many employees first names contain the letter M?",
        "query": "SELECT COUNT ( * ) FROM employees WHERE first_name LIKE '%M%'",
        "schema": "CREATE TABLE employees (EMPLOYEE_ID NUMBER, FIRST_NAME TEXT, LAST_NAME TEXT);"
      },
      {
        "question": "What are the names of those employees? | Do you mean the first name and last name of those employees? | Yes.",
        "query": "SELECT first_name, last_name FROM employees WHERE first_name LIKE '%M%'",
        "schema": "CREATE TABLE employees (FIRST_NAME TEXT, EMPLOYEE_ID NUMBER, LAST_NAME TEXT);"
      },
      {
        "question": "How many employees first names do not contain the letter M?",
        "query": "SELECT COUNT ( * ) FROM employees WHERE first_name NOT LIKE '%M%'",
        "schema": "CREATE TABLE employees (FIRST_NAME TEXT, LAST_NAME TEXT, EMPLOYEE_ID NUMBER);"
      },
      {
        "question": "What are their full names?",
        "query": "SELECT first_name, last_name FROM employees WHERE first_name NOT LIKE '%M%'",
        "schema": "CREATE TABLE employees (LAST_NAME TEXT, FIRST_NAME TEXT, EMPLOYEE_ID NUMBER);"
      },
      {
        "question": "When were they hired?",
        "query": "SELECT hire_date FROM employees WHERE first_name NOT LIKE '%M%'",
        "schema": "CREATE TABLE employees (FIRST_NAME TEXT, LAST_NAME TEXT, EMPLOYEE_ID NUMBER, HIRE_DATE TIME); CREATE TABLE job_history (EMPLOYEE_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Which department IDs have manager ids that are from 0-100?",
        "query": "SELECT department_id FROM departments WHERE manager_id > = 0 AND manager_id < = 100",
        "schema": "CREATE TABLE job_history (DEPARTMENT_ID NUMBER); CREATE TABLE employees (EMPLOYEE_ID NUMBER, DEPARTMENT_ID NUMBER, MANAGER_ID NUMBER); CREATE TABLE departments (DEPARTMENT_NAME TEXT, MANAGER_ID NUMBER, DEPARTMENT_ID NUMBER);"
      },
      {
        "question": "What about from 100 - 200?",
        "query": "SELECT department_id FROM departments WHERE manager_id > = 100 AND manager_id < = 200",
        "schema": "CREATE TABLE departments (DEPARTMENT_NAME TEXT, MANAGER_ID NUMBER, DEPARTMENT_ID NUMBER); CREATE TABLE employees (DEPARTMENT_ID NUMBER, EMPLOYEE_ID NUMBER, MANAGER_ID NUMBER); CREATE TABLE job_history (DEPARTMENT_ID NUMBER);"
      },
      {
        "question": "What are the employee ids who work in those departments?",
        "query": "SELECT employee_id FROM employees WHERE department_id IN ( SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200 )",
        "schema": "CREATE TABLE employees (MANAGER_ID NUMBER, JOB_ID TEXT, EMPLOYEE_ID NUMBER, DEPARTMENT_ID NUMBER); CREATE TABLE job_history (DEPARTMENT_ID NUMBER); CREATE TABLE departments (DEPARTMENT_ID NUMBER, DEPARTMENT_NAME TEXT, MANAGER_ID NUMBER);"
      },
      {
        "question": "What about employees who don't work with employees in those departments?",
        "query": "SELECT * FROM employees WHERE department_id NOT IN ( SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200 )",
        "schema": "CREATE TABLE employees (JOB_ID TEXT, MANAGER_ID NUMBER, DEPARTMENT_ID NUMBER, LAST_NAME TEXT, EMPLOYEE_ID NUMBER); CREATE TABLE job_history (DEPARTMENT_ID NUMBER); CREATE TABLE departments (DEPARTMENT_ID NUMBER, DEPARTMENT_NAME TEXT, MANAGER_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Which employee is the highest paid?",
        "query": "SELECT * FROM employees ORDER BY salary DESC LIMIT 1",
        "schema": "CREATE TABLE employees (DEPARTMENT_ID NUMBER, SALARY NUMBER, FIRST_NAME TEXT, MANAGER_ID NUMBER, LAST_NAME TEXT, EMPLOYEE_ID NUMBER, COMMISSION_PCT NUMBER, JOB_ID TEXT); CREATE TABLE jobs (JOB_ID TEXT, MIN_SALARY NUMBER, MAX_SALARY NUMBER);"
      },
      {
        "question": "Which is the employee with the lowest pay?",
        "query": "SELECT * FROM employees ORDER BY salary LIMIT 1",
        "schema": "CREATE TABLE jobs (MAX_SALARY NUMBER, JOB_ID TEXT, MIN_SALARY NUMBER); CREATE TABLE employees (EMPLOYEE_ID NUMBER, SALARY NUMBER, LAST_NAME TEXT, COMMISSION_PCT NUMBER, JOB_ID TEXT, DEPARTMENT_ID NUMBER, FIRST_NAME TEXT, MANAGER_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Could you please display the first and last names of all employees whose first names end in the letter \"m\"?",
        "query": "SELECT first_name , last_name FROM employees WHERE first_name LIKE '%m'",
        "schema": "CREATE TABLE employees (EMPLOYEE_ID NUMBER, LAST_NAME TEXT, FIRST_NAME TEXT);"
      },
      {
        "question": "What are their hire dates?",
        "query": "SELECT first_name ,hire_date FROM employees WHERE first_name LIKE '%m'",
        "schema": "CREATE TABLE employees (EMPLOYEE_ID NUMBER, FIRST_NAME TEXT, HIRE_DATE TIME, LAST_NAME TEXT);"
      },
      {
        "question": "What commission pct do they get?",
        "query": "SELECT commission_pct FROM employees WHERE first_name LIKE '%m'",
        "schema": "CREATE TABLE employees (FIRST_NAME TEXT, EMPLOYEE_ID NUMBER, LAST_NAME TEXT, HIRE_DATE TIME, COMMISSION_PCT NUMBER, SALARY NUMBER);"
      },
      {
        "question": "What is the name of the person who gets the highest pct commission?",
        "query": "SELECT first_name, last_name FROM employees ORDER BY commission_pct DESC LIMIT 1",
        "schema": "CREATE TABLE employees (HIRE_DATE TIME, FIRST_NAME TEXT, EMPLOYEE_ID NUMBER, SALARY NUMBER, LAST_NAME TEXT, COMMISSION_PCT NUMBER);"
      },
      {
        "question": "What is the hire date of the person who gets the lowest pct commission?",
        "query": "SELECT hire_date FROM employees ORDER BY commission_pct ASC LIMIT 1",
        "schema": "CREATE TABLE employees (LAST_NAME TEXT, SALARY NUMBER, COMMISSION_PCT NUMBER, HIRE_DATE TIME, FIRST_NAME TEXT, EMPLOYEE_ID NUMBER);"
      }
    ],
    [
      {
        "question": "display the department id and the total salary for those departments which contains at least two employees.",
        "query": "SELECT department_id , SUM ( salary ) FROM employees GROUP BY department_id HAVING COUNT ( * ) > = 2",
        "schema": "CREATE TABLE jobs (MAX_SALARY NUMBER, JOB_ID TEXT, MIN_SALARY NUMBER); CREATE TABLE departments (MANAGER_ID NUMBER, DEPARTMENT_ID NUMBER, DEPARTMENT_NAME TEXT); CREATE TABLE employees (LAST_NAME TEXT, SALARY NUMBER, DEPARTMENT_ID NUMBER, EMPLOYEE_ID NUMBER); CREATE TABLE job_history (DEPARTMENT_ID NUMBER);"
      },
      {
        "question": "What are the first and last names of employees in department id 90?",
        "query": "SELECT first_name , last_name FROM employees WHERE department_id = 90",
        "schema": "CREATE TABLE jobs (JOB_ID TEXT, MAX_SALARY NUMBER, MIN_SALARY NUMBER); CREATE TABLE job_history (DEPARTMENT_ID NUMBER); CREATE TABLE employees (FIRST_NAME TEXT, LAST_NAME TEXT, SALARY NUMBER, EMPLOYEE_ID NUMBER, DEPARTMENT_ID NUMBER); CREATE TABLE departments (MANAGER_ID NUMBER, DEPARTMENT_ID NUMBER, DEPARTMENT_NAME TEXT);"
      },
      {
        "question": "What department id is Steven King in?",
        "query": "SELECT department_id FROM employees WHERE first_name = 'Steven' AND last_name = 'King'",
        "schema": "CREATE TABLE employees (LAST_NAME TEXT, SALARY NUMBER, FIRST_NAME TEXT, DEPARTMENT_ID NUMBER, EMPLOYEE_ID NUMBER); CREATE TABLE jobs (MIN_SALARY NUMBER, MAX_SALARY NUMBER, JOB_ID TEXT); CREATE TABLE departments (MANAGER_ID NUMBER, DEPARTMENT_NAME TEXT, DEPARTMENT_ID NUMBER); CREATE TABLE job_history (DEPARTMENT_ID NUMBER);"
      },
      {
        "question": "What is Steven King's Salary and Job id?",
        "query": "SELECT job_id,salary FROM employees WHERE first_name = 'Steven' AND last_name = 'King'",
        "schema": "CREATE TABLE employees (EMPLOYEE_ID NUMBER, JOB_ID TEXT, FIRST_NAME TEXT, SALARY NUMBER, DEPARTMENT_ID NUMBER, LAST_NAME TEXT); CREATE TABLE job_history (DEPARTMENT_ID NUMBER, JOB_ID TEXT); CREATE TABLE departments (DEPARTMENT_ID NUMBER, DEPARTMENT_NAME TEXT, MANAGER_ID NUMBER); CREATE TABLE jobs (MIN_SALARY NUMBER, JOB_ID TEXT, MAX_SALARY NUMBER, JOB_TITLE TEXT);"
      },
      {
        "question": "What is the highest salary and what employee id has it?",
        "query": "SELECT employee_id,salary FROM employees ORDER BY salary DESC LIMIT 1",
        "schema": "CREATE TABLE job_history (JOB_ID TEXT, DEPARTMENT_ID NUMBER); CREATE TABLE jobs (JOB_TITLE TEXT, MIN_SALARY NUMBER, MAX_SALARY NUMBER, JOB_ID TEXT); CREATE TABLE departments (MANAGER_ID NUMBER, DEPARTMENT_NAME TEXT, DEPARTMENT_ID NUMBER); CREATE TABLE employees (EMPLOYEE_ID NUMBER, DEPARTMENT_ID NUMBER, SALARY NUMBER, JOB_ID TEXT, FIRST_NAME TEXT, LAST_NAME TEXT);"
      }
    ],
    [
      {
        "question": "HoW MANY employees have the letter z in their first name?",
        "query": "SELECT COUNT ( * ) FROM employees WHERE first_name LIKE '%z%'",
        "schema": "CREATE TABLE departments (DEPARTMENT_ID NUMBER); CREATE TABLE job_history (EMPLOYEE_ID NUMBER); CREATE TABLE employees (FIRST_NAME TEXT, LAST_NAME TEXT, DEPARTMENT_ID NUMBER, EMPLOYEE_ID NUMBER);"
      },
      {
        "question": "What are their first names?",
        "query": "SELECT first_name FROM employees WHERE first_name LIKE '%z%'",
        "schema": "CREATE TABLE employees (LAST_NAME TEXT, EMPLOYEE_ID NUMBER, DEPARTMENT_ID NUMBER, FIRST_NAME TEXT); CREATE TABLE job_history (EMPLOYEE_ID NUMBER); CREATE TABLE departments (DEPARTMENT_ID NUMBER);"
      },
      {
        "question": "What about their last names?",
        "query": "SELECT first_name,last_name FROM employees WHERE first_name LIKE '%z%'",
        "schema": "CREATE TABLE departments (DEPARTMENT_ID NUMBER); CREATE TABLE employees (EMPLOYEE_ID NUMBER, FIRST_NAME TEXT, LAST_NAME TEXT, DEPARTMENT_ID NUMBER); CREATE TABLE job_history (EMPLOYEE_ID NUMBER);"
      },
      {
        "question": "Can you also show their cities?",
        "query": "SELECT t1.first_name , t1.last_name , t3.city FROM employees AS t1 JOIN departments AS t2 ON t1.department_id = t2.department_id JOIN locations AS t3 ON t2.location_id = t3.location_id WHERE t1.first_name LIKE '%z%'",
        "schema": "CREATE TABLE employees (EMPLOYEE_ID NUMBER, LAST_NAME TEXT, FIRST_NAME TEXT, DEPARTMENT_ID NUMBER); CREATE TABLE departments (DEPARTMENT_ID NUMBER, DEPARTMENT_NAME TEXT, LOCATION_ID NUMBER); CREATE TABLE job_history (EMPLOYEE_ID NUMBER); CREATE TABLE locations (CITY TEXT, STREET_ADDRESS TEXT, STATE_PROVINCE TEXT, LOCATION_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Could you please display the first name and last name of each employee?",
        "query": "SELECT first_name , last_name FROM employees",
        "schema": "CREATE TABLE employees (EMPLOYEE_ID NUMBER, FIRST_NAME TEXT, LAST_NAME TEXT);"
      },
      {
        "question": "Could you add in their departments please?",
        "query": "SELECT t1.first_name , t1.last_name , t2.department_name FROM employees AS t1 JOIN departments AS t2 ON t1.department_id = t2.department_id",
        "schema": "CREATE TABLE departments (DEPARTMENT_NAME TEXT, DEPARTMENT_ID NUMBER); CREATE TABLE employees (EMPLOYEE_ID NUMBER, LAST_NAME TEXT, FIRST_NAME TEXT, DEPARTMENT_ID NUMBER);"
      },
      {
        "question": "Could you also list their cities and state provinces?",
        "query": "SELECT t1.first_name , t1.last_name , t2.department_name , t3.city , t3.state_province FROM employees AS t1 JOIN departments AS t2 ON t1.department_id = t2.department_id JOIN locations AS t3 ON t2.location_id = t3.location_id",
        "schema": "CREATE TABLE departments (DEPARTMENT_ID NUMBER, DEPARTMENT_NAME TEXT, LOCATION_ID NUMBER); CREATE TABLE countries (COUNTRY_ID TEXT, COUNTRY_NAME TEXT); CREATE TABLE locations (CITY TEXT, LOCATION_ID NUMBER, STATE_PROVINCE TEXT, COUNTRY_ID TEXT); CREATE TABLE employees (EMPLOYEE_ID NUMBER, LAST_NAME TEXT, DEPARTMENT_ID NUMBER, FIRST_NAME TEXT);"
      }
    ],
    [
      {
        "question": "hi! how many employees are there that get a commission percentage?",
        "query": "SELECT COUNT ( DISTINCT employee_id ) FROM employees WHERE commission_pct > 0",
        "schema": "CREATE TABLE employees (JOB_ID TEXT, EMPLOYEE_ID NUMBER, DEPARTMENT_ID NUMBER, FIRST_NAME TEXT, MANAGER_ID NUMBER, SALARY NUMBER, COMMISSION_PCT NUMBER, LAST_NAME TEXT); CREATE TABLE job_history (EMPLOYEE_ID NUMBER); CREATE TABLE departments (DEPARTMENT_NAME TEXT, DEPARTMENT_ID NUMBER); CREATE TABLE jobs (JOB_ID TEXT);"
      },
      {
        "question": "How many departments have more than ten employees who got a commission?",
        "query": "SELECT COUNT ( * ) FROM ( SELECT department_id FROM employees GROUP BY department_id HAVING COUNT ( commission_pct ) > 10 )",
        "schema": "CREATE TABLE departments (DEPARTMENT_ID NUMBER, DEPARTMENT_NAME TEXT); CREATE TABLE employees (JOB_ID TEXT, FIRST_NAME TEXT, DEPARTMENT_ID NUMBER, COMMISSION_PCT NUMBER, MANAGER_ID NUMBER, SALARY NUMBER, LAST_NAME TEXT, EMPLOYEE_ID NUMBER); CREATE TABLE jobs (JOB_ID TEXT); CREATE TABLE job_history (EMPLOYEE_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Could you tell me how many employees have the job title PU_MAN?",
        "query": "SELECT COUNT ( * ) FROM employees WHERE job_id = 'PU_MAN'",
        "schema": "CREATE TABLE jobs (JOB_ID TEXT, JOB_TITLE TEXT); CREATE TABLE departments (DEPARTMENT_ID NUMBER, DEPARTMENT_NAME TEXT); CREATE TABLE employees (FIRST_NAME TEXT, EMPLOYEE_ID NUMBER, MANAGER_ID NUMBER, JOB_ID TEXT, LAST_NAME TEXT, DEPARTMENT_ID NUMBER); CREATE TABLE job_history (JOB_ID TEXT, EMPLOYEE_ID NUMBER);"
      },
      {
        "question": "What is the salary of that employee?",
        "query": "SELECT salary FROM employees WHERE job_id = 'PU_MAN'",
        "schema": "CREATE TABLE job_history (JOB_ID TEXT, EMPLOYEE_ID NUMBER); CREATE TABLE departments (DEPARTMENT_NAME TEXT, DEPARTMENT_ID NUMBER); CREATE TABLE employees (LAST_NAME TEXT, EMPLOYEE_ID NUMBER, SALARY NUMBER, FIRST_NAME TEXT, MANAGER_ID NUMBER, DEPARTMENT_ID NUMBER, JOB_ID TEXT); CREATE TABLE jobs (MAX_SALARY NUMBER, MIN_SALARY NUMBER, JOB_ID TEXT, JOB_TITLE TEXT);"
      },
      {
        "question": "How many employees have a higher salary than that?",
        "query": "SELECT COUNT ( * ) FROM employees WHERE salary > ( SELECT salary FROM employees WHERE job_id = 'PU_MAN' )",
        "schema": "CREATE TABLE job_history (JOB_ID TEXT, EMPLOYEE_ID NUMBER); CREATE TABLE employees (JOB_ID TEXT, FIRST_NAME TEXT, DEPARTMENT_ID NUMBER, SALARY NUMBER, LAST_NAME TEXT, EMPLOYEE_ID NUMBER, MANAGER_ID NUMBER); CREATE TABLE jobs (JOB_TITLE TEXT, MAX_SALARY NUMBER, MIN_SALARY NUMBER, JOB_ID TEXT); CREATE TABLE departments (DEPARTMENT_NAME TEXT, DEPARTMENT_ID NUMBER);"
      },
      {
        "question": "Tell me their employee numbers, first and last names, and job titles, please.",
        "query": "SELECT employee_id , first_name , last_name , job_id FROM employees WHERE salary > ( SELECT MAX ( salary ) FROM employees WHERE job_id = 'PU_MAN' )",
        "schema": "CREATE TABLE employees (SALARY NUMBER, EMPLOYEE_ID NUMBER, LAST_NAME TEXT, DEPARTMENT_ID NUMBER, MANAGER_ID NUMBER, JOB_ID TEXT, FIRST_NAME TEXT); CREATE TABLE jobs (MIN_SALARY NUMBER, JOB_TITLE TEXT, MAX_SALARY NUMBER, JOB_ID TEXT); CREATE TABLE departments (DEPARTMENT_NAME TEXT, DEPARTMENT_ID NUMBER); CREATE TABLE job_history (JOB_ID TEXT, EMPLOYEE_ID NUMBER);"
      }
    ],
    [
      {
        "question": "show me the first and last names of employees whose first name does not contain letter M",
        "query": "SELECT first_name , last_name FROM employees WHERE first_name NOT LIKE '%M%'",
        "schema": "CREATE TABLE employees (DEPARTMENT_ID NUMBER, LAST_NAME TEXT, EMPLOYEE_ID NUMBER, FIRST_NAME TEXT); CREATE TABLE departments (DEPARTMENT_ID NUMBER);"
      },
      {
        "question": "show me the full name, hire date, salary and department number of these employees",
        "query": "SELECT first_name , last_name , hire_date , salary , department_id FROM employees WHERE first_name NOT LIKE '%M%'",
        "schema": "CREATE TABLE employees (FIRST_NAME TEXT, EMPLOYEE_ID NUMBER, HIRE_DATE TIME, LAST_NAME TEXT, DEPARTMENT_ID NUMBER, SALARY NUMBER); CREATE TABLE jobs (MAX_SALARY NUMBER, MIN_SALARY NUMBER); CREATE TABLE departments (DEPARTMENT_ID NUMBER, DEPARTMENT_NAME TEXT);"
      },
      {
        "question": "Set this result in ascending order of department number",
        "query": "SELECT first_name , last_name , hire_date , salary , department_id FROM employees WHERE first_name NOT LIKE '%M%' ORDER BY department_id",
        "schema": "CREATE TABLE employees (FIRST_NAME TEXT, DEPARTMENT_ID NUMBER, EMPLOYEE_ID NUMBER, HIRE_DATE TIME, LAST_NAME TEXT, SALARY NUMBER); CREATE TABLE jobs (MAX_SALARY NUMBER, MIN_SALARY NUMBER); CREATE TABLE departments (DEPARTMENT_ID NUMBER, DEPARTMENT_NAME TEXT);"
      }
    ],
    [
      {
        "question": "hi,what is the president min salary?",
        "query": "SELECT min_salary FROM jobs WHERE job_title = 'president'",
        "schema": "CREATE TABLE employees (FIRST_NAME TEXT, LAST_NAME TEXT, EMPLOYEE_ID NUMBER, MANAGER_ID NUMBER, DEPARTMENT_ID NUMBER, JOB_ID TEXT, SALARY NUMBER); CREATE TABLE jobs (MAX_SALARY NUMBER, MIN_SALARY NUMBER, JOB_ID TEXT, JOB_TITLE TEXT); CREATE TABLE departments (DEPARTMENT_ID NUMBER);"
      },
      {
        "question": "what is the president max salary?",
        "query": "SELECT max_salary FROM jobs WHERE job_title = 'President'",
        "schema": "CREATE TABLE jobs (MAX_SALARY NUMBER, MIN_SALARY NUMBER, JOB_TITLE TEXT, JOB_ID TEXT); CREATE TABLE employees (JOB_ID TEXT, DEPARTMENT_ID NUMBER, MANAGER_ID NUMBER, EMPLOYEE_ID NUMBER, SALARY NUMBER, LAST_NAME TEXT, FIRST_NAME TEXT); CREATE TABLE departments (DEPARTMENT_ID NUMBER);"
      },
      {
        "question": "what is name of employee id 100? | Did you mean the first name or last name of employee id 100? | first",
        "query": "SELECT first_name FROM employees WHERE employee_id = 100",
        "schema": "CREATE TABLE departments (DEPARTMENT_ID NUMBER); CREATE TABLE employees (FIRST_NAME TEXT, DEPARTMENT_ID NUMBER, JOB_ID TEXT, MANAGER_ID NUMBER, SALARY NUMBER, LAST_NAME TEXT, EMPLOYEE_ID NUMBER); CREATE TABLE jobs (MIN_SALARY NUMBER, MAX_SALARY NUMBER, JOB_TITLE TEXT, JOB_ID TEXT);"
      }
    ],
    [
      {
        "question": "Hi what are the first and last name for those employees who works either in department 70 or 90?",
        "query": "SELECT first_name , last_name FROM employees WHERE department_id = 70 OR department_id = 90",
        "schema": "CREATE TABLE departments (DEPARTMENT_NAME TEXT, DEPARTMENT_ID NUMBER); CREATE TABLE employees (LAST_NAME TEXT, EMPLOYEE_ID NUMBER, JOB_ID TEXT, FIRST_NAME TEXT, MANAGER_ID NUMBER, DEPARTMENT_ID NUMBER); CREATE TABLE job_history (DEPARTMENT_ID NUMBER); CREATE TABLE locations (LOCATION_ID NUMBER);"
      },
      {
        "question": "What is steven king's phone number",
        "query": "SELECT phone_number FROM employees WHERE first_name = 'Steven' AND last_name = 'King'",
        "schema": "CREATE TABLE locations (LOCATION_ID NUMBER); CREATE TABLE employees (DEPARTMENT_ID NUMBER, EMPLOYEE_ID NUMBER, PHONE_NUMBER TEXT, JOB_ID TEXT, FIRST_NAME TEXT, MANAGER_ID NUMBER, LAST_NAME TEXT); CREATE TABLE departments (DEPARTMENT_NAME TEXT, DEPARTMENT_ID NUMBER, LOCATION_ID NUMBER); CREATE TABLE job_history (DEPARTMENT_ID NUMBER);"
      },
      {
        "question": "What is Steven King Employee ID number",
        "query": "SELECT employee_id FROM employees WHERE first_name = 'Steven' AND last_name = 'King'",
        "schema": "CREATE TABLE job_history (DEPARTMENT_ID NUMBER); CREATE TABLE locations (LOCATION_ID NUMBER); CREATE TABLE departments (DEPARTMENT_ID NUMBER, LOCATION_ID NUMBER, DEPARTMENT_NAME TEXT); CREATE TABLE employees (JOB_ID TEXT, FIRST_NAME TEXT, PHONE_NUMBER TEXT, EMPLOYEE_ID NUMBER, MANAGER_ID NUMBER, DEPARTMENT_ID NUMBER, LAST_NAME TEXT);"
      }
    ],
    [
      {
        "question": "how many employees there",
        "query": "SELECT COUNT ( * ) FROM employees",
        "schema": "CREATE TABLE locations (LOCATION_ID NUMBER); CREATE TABLE jobs (JOB_ID TEXT); CREATE TABLE employees (EMPLOYEE_ID NUMBER, JOB_ID TEXT, COMMISSION_PCT NUMBER, LAST_NAME TEXT, FIRST_NAME TEXT, MANAGER_ID NUMBER, DEPARTMENT_ID NUMBER, SALARY NUMBER); CREATE TABLE departments (MANAGER_ID NUMBER, DEPARTMENT_NAME TEXT, DEPARTMENT_ID NUMBER, LOCATION_ID NUMBER); CREATE TABLE job_history (EMPLOYEE_ID NUMBER, DEPARTMENT_ID NUMBER);"
      },
      {
        "question": "what is the salary of the employee id 101",
        "query": "SELECT salary FROM employees WHERE employee_id = 101",
        "schema": "CREATE TABLE locations (LOCATION_ID NUMBER); CREATE TABLE job_history (DEPARTMENT_ID NUMBER, EMPLOYEE_ID NUMBER); CREATE TABLE jobs (MIN_SALARY NUMBER, MAX_SALARY NUMBER, JOB_ID TEXT); CREATE TABLE employees (LAST_NAME TEXT, DEPARTMENT_ID NUMBER, COMMISSION_PCT NUMBER, JOB_ID TEXT, EMPLOYEE_ID NUMBER, MANAGER_ID NUMBER, FIRST_NAME TEXT, SALARY NUMBER); CREATE TABLE departments (LOCATION_ID NUMBER, DEPARTMENT_NAME TEXT, DEPARTMENT_ID NUMBER, MANAGER_ID NUMBER);"
      },
      {
        "question": "what is the phone number of 102",
        "query": "SELECT phone_number FROM employees WHERE employee_id = 102",
        "schema": "CREATE TABLE departments (LOCATION_ID NUMBER, MANAGER_ID NUMBER, DEPARTMENT_NAME TEXT, DEPARTMENT_ID NUMBER); CREATE TABLE locations (LOCATION_ID NUMBER); CREATE TABLE employees (EMPLOYEE_ID NUMBER, SALARY NUMBER, JOB_ID TEXT, FIRST_NAME TEXT, LAST_NAME TEXT, COMMISSION_PCT NUMBER, DEPARTMENT_ID NUMBER, MANAGER_ID NUMBER, PHONE_NUMBER TEXT); CREATE TABLE jobs (JOB_ID TEXT, MIN_SALARY NUMBER, MAX_SALARY NUMBER); CREATE TABLE job_history (EMPLOYEE_ID NUMBER, DEPARTMENT_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Everything, please. I can see it in the table there. It's correct. Can you order it by salary in descending order? | Do you mean the employees who have the letters D or S in their first names? | In their first name, yes. Sorry. I misunderstood.",
        "query": "SELECT * FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'",
        "schema": "CREATE TABLE employees (LAST_NAME TEXT, SALARY NUMBER, EMPLOYEE_ID NUMBER, FIRST_NAME TEXT); CREATE TABLE jobs (MAX_SALARY NUMBER, MIN_SALARY NUMBER);"
      },
      {
        "question": "Can you organize the list by salary in descending order?",
        "query": "SELECT * FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY salary DESC",
        "schema": "CREATE TABLE jobs (MIN_SALARY NUMBER, MAX_SALARY NUMBER); CREATE TABLE employees (FIRST_NAME TEXT, EMPLOYEE_ID NUMBER, LAST_NAME TEXT, SALARY NUMBER);"
      },
      {
        "question": "Can you list the first and last names of employees who were hired after 1987?",
        "query": "SELECT first_name,last_name FROM employees WHERE hire_date > 1987",
        "schema": "CREATE TABLE employees (FIRST_NAME TEXT, LAST_NAME TEXT, HIRE_DATE TIME, SALARY NUMBER, EMPLOYEE_ID NUMBER); CREATE TABLE jobs (MAX_SALARY NUMBER, MIN_SALARY NUMBER);"
      },
      {
        "question": "What are their salaries? Please order the table in ascending order by salary,",
        "query": "SELECT salary FROM employees WHERE hire_date > 1987 ORDER BY salary",
        "schema": "CREATE TABLE jobs (MIN_SALARY NUMBER, MAX_SALARY NUMBER); CREATE TABLE employees (HIRE_DATE TIME, SALARY NUMBER, FIRST_NAME TEXT, EMPLOYEE_ID NUMBER, LAST_NAME TEXT);"
      }
    ],
    [
      {
        "question": "What are the first and last name for those employees who works either in department  70 or 90?",
        "query": "SELECT first_name , last_name FROM employees WHERE department_id = 70 OR department_id = 90",
        "schema": "CREATE TABLE job_history (DEPARTMENT_ID NUMBER); CREATE TABLE locations (LOCATION_ID NUMBER); CREATE TABLE employees (EMPLOYEE_ID NUMBER, DEPARTMENT_ID NUMBER, LAST_NAME TEXT, MANAGER_ID NUMBER, JOB_ID TEXT, FIRST_NAME TEXT); CREATE TABLE departments (DEPARTMENT_NAME TEXT, DEPARTMENT_ID NUMBER);"
      },
      {
        "question": "Please show me the list of the department",
        "query": "SELECT DISTINCT department_id FROM employees",
        "schema": "CREATE TABLE departments (DEPARTMENT_ID NUMBER, DEPARTMENT_NAME TEXT); CREATE TABLE employees (LAST_NAME TEXT, DEPARTMENT_ID NUMBER, JOB_ID TEXT, MANAGER_ID NUMBER, EMPLOYEE_ID NUMBER, FIRST_NAME TEXT); CREATE TABLE job_history (DEPARTMENT_ID NUMBER); CREATE TABLE locations (LOCATION_ID NUMBER);"
      },
      {
        "question": "Who make  the highest  salary  on the department?",
        "query": "SELECT first_name , last_name FROM employees ORDER BY salary DESC LIMIT 1",
        "schema": "CREATE TABLE locations (LOCATION_ID NUMBER); CREATE TABLE employees (MANAGER_ID NUMBER, LAST_NAME TEXT, DEPARTMENT_ID NUMBER, JOB_ID TEXT, FIRST_NAME TEXT, EMPLOYEE_ID NUMBER, SALARY NUMBER); CREATE TABLE job_history (DEPARTMENT_ID NUMBER); CREATE TABLE departments (DEPARTMENT_NAME TEXT, DEPARTMENT_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What are the employees whose first name does not containing the letter M?",
        "query": "SELECT first_name FROM employees WHERE first_name NOT LIKE '%M%'",
        "schema": "CREATE TABLE employees (EMPLOYEE_ID NUMBER, LAST_NAME TEXT, FIRST_NAME TEXT, DEPARTMENT_ID NUMBER); CREATE TABLE departments (DEPARTMENT_ID NUMBER);"
      },
      {
        "question": "Display the full name , hire date , salaer, and  department member of the above results.",
        "query": "SELECT first_name , last_name , hire_date , salary , department_id FROM employees WHERE first_name NOT LIKE '%M%'",
        "schema": "CREATE TABLE employees (LAST_NAME TEXT, DEPARTMENT_ID NUMBER, HIRE_DATE TIME, SALARY NUMBER, FIRST_NAME TEXT, EMPLOYEE_ID NUMBER); CREATE TABLE departments (DEPARTMENT_ID NUMBER, DEPARTMENT_NAME TEXT);"
      },
      {
        "question": "Sort the results in ascending order by department. number.",
        "query": "SELECT first_name , last_name , hire_date , salary , department_id FROM employees WHERE first_name NOT LIKE '%M%' ORDER BY department_id",
        "schema": "CREATE TABLE departments (DEPARTMENT_NAME TEXT, DEPARTMENT_ID NUMBER); CREATE TABLE employees (DEPARTMENT_ID NUMBER, HIRE_DATE TIME, SALARY NUMBER, FIRST_NAME TEXT, LAST_NAME TEXT, EMPLOYEE_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Hello! Can you tell me how many total employees are on this list?",
        "query": "SELECT COUNT ( DISTINCT employee_id ) FROM employees",
        "schema": "CREATE TABLE employees (MANAGER_ID NUMBER, FIRST_NAME TEXT, JOB_ID TEXT, LAST_NAME TEXT, EMPLOYEE_ID NUMBER, DEPARTMENT_ID NUMBER); CREATE TABLE departments (DEPARTMENT_ID NUMBER); CREATE TABLE job_history (EMPLOYEE_ID NUMBER);"
      },
      {
        "question": "Very good!  Can display a list of all of the employees first names which contain a letter Z in their first name? | which colums to return? | Oh thanks! You went ahead and added the last name and city!  Could you also add to this list which country each of these people live in?",
        "query": "SELECT t1.first_name , t1.last_name , t3.city ,t3.country_id FROM employees AS t1 JOIN departments AS t2 ON t1.department_id = t2.department_id JOIN locations AS t3 ON t2.location_id = t3.location_id WHERE t1.first_name LIKE '%z%'",
        "schema": "CREATE TABLE job_history (EMPLOYEE_ID NUMBER); CREATE TABLE countries (COUNTRY_NAME TEXT, REGION_ID NUMBER, COUNTRY_ID TEXT); CREATE TABLE locations (COUNTRY_ID TEXT, CITY TEXT, STREET_ADDRESS TEXT, LOCATION_ID NUMBER, STATE_PROVINCE TEXT); CREATE TABLE departments (DEPARTMENT_ID NUMBER, LOCATION_ID NUMBER); CREATE TABLE employees (JOB_ID TEXT, DEPARTMENT_ID NUMBER, LAST_NAME TEXT, FIRST_NAME TEXT, EMPLOYEE_ID NUMBER, MANAGER_ID NUMBER);"
      },
      {
        "question": "Thanks!  That City and Country ID for Elizabeth is unusual...  Can you please show her street address and state province?",
        "query": "SELECT t1.first_name , t1.last_name , t3.city ,t3.country_id,t3.street_address,t3.state_province FROM employees AS t1 JOIN departments AS t2 ON t1.department_id = t2.department_id JOIN locations AS t3 ON t2.location_id = t3.location_id WHERE t1.first_name LIKE '%z%' AND t1.first_name = 'Elizabeth'",
        "schema": "CREATE TABLE employees (LAST_NAME TEXT, JOB_ID TEXT, MANAGER_ID NUMBER, FIRST_NAME TEXT, DEPARTMENT_ID NUMBER, EMPLOYEE_ID NUMBER); CREATE TABLE job_history (EMPLOYEE_ID NUMBER); CREATE TABLE locations (CITY TEXT, LOCATION_ID NUMBER, STATE_PROVINCE TEXT, STREET_ADDRESS TEXT, COUNTRY_ID TEXT); CREATE TABLE countries (REGION_ID NUMBER, COUNTRY_ID TEXT, COUNTRY_NAME TEXT); CREATE TABLE departments (LOCATION_ID NUMBER, DEPARTMENT_ID NUMBER, DEPARTMENT_NAME TEXT);"
      }
    ],
    [
      {
        "question": "Display the employee ID and salary of all employees who report to payam (First name)",
        "query": "SELECT employee_id , salary FROM employees WHERE manager_id = ( SELECT employee_id FROM employees WHERE first_name = 'Payam' )",
        "schema": "CREATE TABLE employees (EMPLOYEE_ID NUMBER, LAST_NAME TEXT, FIRST_NAME TEXT, SALARY NUMBER, MANAGER_ID NUMBER, DEPARTMENT_ID NUMBER, JOB_ID TEXT); CREATE TABLE jobs (MIN_SALARY NUMBER, MAX_SALARY NUMBER, JOB_ID TEXT); CREATE TABLE departments (DEPARTMENT_ID NUMBER);"
      },
      {
        "question": "What is the highest salary? who did earn it",
        "query": "SELECT * FROM employees ORDER BY salary DESC LIMIT 1",
        "schema": "CREATE TABLE departments (DEPARTMENT_ID NUMBER); CREATE TABLE jobs (JOB_ID TEXT, MIN_SALARY NUMBER, MAX_SALARY NUMBER); CREATE TABLE employees (JOB_ID TEXT, EMPLOYEE_ID NUMBER, SALARY NUMBER, DEPARTMENT_ID NUMBER, LAST_NAME TEXT, FIRST_NAME TEXT, MANAGER_ID NUMBER);"
      },
      {
        "question": "What is the lowest salary? who did earn it",
        "query": "SELECT * FROM employees ORDER BY salary LIMIT 1",
        "schema": "CREATE TABLE departments (DEPARTMENT_ID NUMBER); CREATE TABLE jobs (MAX_SALARY NUMBER, MIN_SALARY NUMBER, JOB_ID TEXT); CREATE TABLE employees (JOB_ID TEXT, FIRST_NAME TEXT, DEPARTMENT_ID NUMBER, EMPLOYEE_ID NUMBER, MANAGER_ID NUMBER, SALARY NUMBER, LAST_NAME TEXT);"
      },
      {
        "question": "What is the name of the following phone number 515.123.4569? Tell me Employer ID",
        "query": "SELECT employee_id, first_name, last_name FROM employees WHERE phone_number = \"515.123.4569\"",
        "schema": "CREATE TABLE jobs (JOB_ID TEXT, MAX_SALARY NUMBER, MIN_SALARY NUMBER); CREATE TABLE departments (DEPARTMENT_ID NUMBER); CREATE TABLE employees (PHONE_NUMBER TEXT, LAST_NAME TEXT, MANAGER_ID NUMBER, JOB_ID TEXT, SALARY NUMBER, DEPARTMENT_ID NUMBER, EMPLOYEE_ID NUMBER, FIRST_NAME TEXT);"
      },
      {
        "question": "Who is the senior employee and tell me first name? Tell me the hire date | What do you mean by senior employee? | What is the lowest hire date? tell me the first name.",
        "query": "SELECT first_name, hire_date FROM employees ORDER BY hire_date LIMIT 1",
        "schema": "CREATE TABLE jobs (MIN_SALARY NUMBER, JOB_ID TEXT, MAX_SALARY NUMBER); CREATE TABLE departments (DEPARTMENT_ID NUMBER); CREATE TABLE employees (DEPARTMENT_ID NUMBER, HIRE_DATE TIME, FIRST_NAME TEXT, PHONE_NUMBER TEXT, LAST_NAME TEXT, EMPLOYEE_ID NUMBER, SALARY NUMBER, MANAGER_ID NUMBER, JOB_ID TEXT);"
      }
    ],
    [
      {
        "question": "hi. show me the names of all of the departments",
        "query": "SELECT department_name FROM departments",
        "schema": "CREATE TABLE countries (COUNTRY_NAME TEXT); CREATE TABLE locations (LOCATION_ID NUMBER); CREATE TABLE employees (LAST_NAME TEXT, EMPLOYEE_ID NUMBER, FIRST_NAME TEXT, DEPARTMENT_ID NUMBER); CREATE TABLE job_history (DEPARTMENT_ID NUMBER); CREATE TABLE departments (LOCATION_ID NUMBER, MANAGER_ID NUMBER, DEPARTMENT_NAME TEXT, DEPARTMENT_ID NUMBER);"
      },
      {
        "question": "can you please display only the department names with the number of employees in each one?",
        "query": "SELECT department_name , COUNT ( * ) FROM employees AS t1 JOIN departments AS t2 ON t1.department_id = t2.department_id GROUP BY department_name",
        "schema": "CREATE TABLE countries (COUNTRY_NAME TEXT); CREATE TABLE job_history (DEPARTMENT_ID NUMBER); CREATE TABLE employees (DEPARTMENT_ID NUMBER, FIRST_NAME TEXT, LAST_NAME TEXT, EMPLOYEE_ID NUMBER); CREATE TABLE departments (DEPARTMENT_NAME TEXT, DEPARTMENT_ID NUMBER, MANAGER_ID NUMBER, LOCATION_ID NUMBER); CREATE TABLE locations (LOCATION_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Display the employee number and job id for all employees whose salary is smaller than any salary of those employees whose job title is MK_MAN",
        "query": "SELECT employee_id , job_id FROM employees WHERE salary < ( SELECT MIN ( salary ) FROM employees WHERE job_id = 'MK_MAN' )",
        "schema": "CREATE TABLE job_history (JOB_ID TEXT, EMPLOYEE_ID NUMBER); CREATE TABLE jobs (JOB_TITLE TEXT, JOB_ID TEXT, MAX_SALARY NUMBER, MIN_SALARY NUMBER); CREATE TABLE employees (EMPLOYEE_ID NUMBER, LAST_NAME TEXT, DEPARTMENT_ID NUMBER, SALARY NUMBER, JOB_ID TEXT, FIRST_NAME TEXT);"
      },
      {
        "question": "Show me salaries for those employees",
        "query": "SELECT salary FROM employees WHERE salary < ( SELECT MIN ( salary ) FROM employees WHERE job_id = 'MK_MAN' )",
        "schema": "CREATE TABLE jobs (JOB_TITLE TEXT, MIN_SALARY NUMBER, JOB_ID TEXT, MAX_SALARY NUMBER); CREATE TABLE job_history (EMPLOYEE_ID NUMBER, JOB_ID TEXT); CREATE TABLE employees (DEPARTMENT_ID NUMBER, JOB_ID TEXT, LAST_NAME TEXT, SALARY NUMBER, FIRST_NAME TEXT, EMPLOYEE_ID NUMBER);"
      }
    ]
  ],
  "tracking_orders": [
    [
      {
        "question": "Which customers have ordered \"food\"? | ok, did you want to just return their names? | Yes. I just want to know the names of which customers have placed orders under the category \"food\"",
        "query": "SELECT t1.customer_name FROM customers AS t1 JOIN orders AS t2 JOIN order_items AS t3 JOIN products AS t4 ON t1.customer_id = t2.customer_id AND t2.order_id = t3.order_id AND t3.product_id = t4.product_id WHERE t4.product_name = \"food\"",
        "schema": "CREATE TABLE Products (product_id NUMBER, product_name TEXT); CREATE TABLE Order_Items (order_item_id NUMBER, order_id NUMBER, order_item_details TEXT, product_id NUMBER); CREATE TABLE Orders (order_id NUMBER, customer_id NUMBER, order_status TEXT); CREATE TABLE Customers (customer_id NUMBER, customer_name TEXT, customer_details TEXT);"
      },
      {
        "question": "Of the names listed in the table, which of them have an item status listed as \"cancel\"?",
        "query": "SELECT t1.customer_name FROM customers AS t1 JOIN orders AS t2 JOIN order_items AS t3 JOIN products AS t4 ON t1.customer_id = t2.customer_id AND t2.order_id = t3.order_id AND t3.product_id = t4.product_id WHERE t3.order_item_status = \"Cancel\" AND t4.product_name = \"food\" GROUP BY t1.customer_id HAVING COUNT ( * ) > = 1",
        "schema": "CREATE TABLE Products (product_name TEXT, product_id NUMBER); CREATE TABLE Order_Items (order_id NUMBER, order_item_details TEXT, order_item_status TEXT, product_id NUMBER, order_item_id NUMBER); CREATE TABLE Customers (customer_details TEXT, customer_id NUMBER, customer_name TEXT); CREATE TABLE Orders (order_status TEXT, order_id NUMBER, customer_id NUMBER);"
      },
      {
        "question": "How many customers have cancelled orders? | Do you mean the customers in the previous result? | yes",
        "query": "SELECT COUNT ( t1.customer_name ) FROM customers AS t1 JOIN orders AS t2 JOIN order_items AS t3 JOIN products AS t4 ON t1.customer_id = t2.customer_id AND t2.order_id = t3.order_id AND t3.product_id = t4.product_id WHERE t3.order_item_status = \"Cancel\" AND t4.product_name = \"food\"",
        "schema": "CREATE TABLE Customers (customer_details TEXT, customer_id NUMBER, customer_name TEXT); CREATE TABLE Order_Items (order_item_status TEXT, order_item_id NUMBER, order_item_details TEXT, product_id NUMBER, order_id NUMBER); CREATE TABLE Products (product_name TEXT, product_id NUMBER); CREATE TABLE Orders (order_status TEXT, date_order_placed TIME, order_id NUMBER, customer_id NUMBER);"
      }
    ],
    [
      {
        "question": "How many orders are there?",
        "query": "SELECT COUNT ( * ) FROM orders",
        "schema": "CREATE TABLE Orders (order_status TEXT, order_details TEXT, order_id NUMBER, customer_id NUMBER); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Shipments (order_id NUMBER); CREATE TABLE Products (product_id NUMBER); CREATE TABLE Order_Items (order_id NUMBER, order_item_id NUMBER, product_id NUMBER);"
      },
      {
        "question": "How many different customers are there?",
        "query": "SELECT COUNT ( * ) FROM customers",
        "schema": "CREATE TABLE Customers (customer_details TEXT, customer_id NUMBER, customer_name TEXT); CREATE TABLE Products (product_id NUMBER); CREATE TABLE Shipments (order_id NUMBER); CREATE TABLE Order_Items (order_id NUMBER, product_id NUMBER, order_item_id NUMBER); CREATE TABLE Orders (order_details TEXT, order_id NUMBER, order_status TEXT, customer_id NUMBER);"
      },
      {
        "question": "What is the name of the customer who has the largest number of orders?",
        "query": "SELECT t1.customer_name FROM customers AS t1 JOIN orders AS t2 ON t1.customer_id = t2.customer_id GROUP BY t1.customer_id ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Customers (customer_name TEXT, customer_id NUMBER, customer_details TEXT); CREATE TABLE Orders (order_status TEXT, order_id NUMBER, order_details TEXT, customer_id NUMBER); CREATE TABLE Products (product_id NUMBER); CREATE TABLE Shipments (order_id NUMBER); CREATE TABLE Order_Items (product_id NUMBER, order_item_id NUMBER, order_id NUMBER);"
      }
    ],
    [
      {
        "question": "Can you tell me which customers placed orders between 2009-01-01 and 2010-0101? | do you want the id or the name of the customer? | The names",
        "query": "SELECT t1.customer_name FROM customers AS t1 JOIN orders AS t2 ON t1.customer_id = t2.customer_id WHERE t2.date_order_placed > = \"2009-01-01\" AND t2.date_order_placed < = \"2010-01-01\"",
        "schema": "CREATE TABLE Order_Items (order_id NUMBER); CREATE TABLE Orders (order_details TEXT, customer_id NUMBER, date_order_placed TIME, order_id NUMBER, order_status TEXT); CREATE TABLE Customers (customer_id NUMBER, customer_name TEXT, customer_details TEXT);"
      },
      {
        "question": "How many customers placed orders before George?",
        "query": "SELECT COUNT ( t1.customer_name ) FROM customers AS t1 JOIN orders AS t2 ON t1.customer_id = t2.customer_id WHERE t2.date_order_placed < ( SELECT t2.date_order_placed FROM customers AS t1 JOIN orders AS t2 ON t1.customer_id = t2.customer_id WHERE t1.customer_name = 'George' ORDER BY t2.date_order_placed LIMIT 1 )",
        "schema": "CREATE TABLE Customers (customer_details TEXT, customer_name TEXT, customer_id NUMBER); CREATE TABLE Order_Items (order_id NUMBER); CREATE TABLE Orders (customer_id NUMBER, order_id NUMBER, order_details TEXT, order_status TEXT, date_order_placed TIME);"
      },
      {
        "question": "What is the status of George's order?",
        "query": "SELECT t2.order_status FROM customers AS t1 JOIN orders AS t2 ON t1.customer_id = t2.customer_id WHERE t1.customer_name = 'George'",
        "schema": "CREATE TABLE Orders (order_status TEXT, order_id NUMBER, date_order_placed TIME, order_details TEXT, customer_id NUMBER); CREATE TABLE Order_Items (order_id NUMBER); CREATE TABLE Customers (customer_details TEXT, customer_id NUMBER, customer_name TEXT);"
      }
    ],
    [
      {
        "question": "which customers placed an order",
        "query": "SELECT * FROM customers WHERE customer_id IN ( SELECT customer_id FROM orders )",
        "schema": "CREATE TABLE Orders (customer_id NUMBER, order_details TEXT, order_id NUMBER, date_order_placed TIME, order_status TEXT); CREATE TABLE Customers (customer_name TEXT, customer_id NUMBER, customer_details TEXT); CREATE TABLE Order_Items (order_id NUMBER);"
      },
      {
        "question": "who has the most orders? | Do you want just the customer name? | yes",
        "query": "SELECT t1.customer_name FROM customers AS t1 JOIN orders AS t2 ON t1.customer_id = t2.customer_id GROUP BY t1.customer_id ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Orders (order_status TEXT, date_order_placed TIME, customer_id NUMBER, order_details TEXT, order_id NUMBER); CREATE TABLE Customers (customer_details TEXT, customer_id NUMBER, customer_name TEXT); CREATE TABLE Order_Items (order_id NUMBER);"
      }
    ],
    [
      {
        "question": "Yes, from that list can I have it sorted by order ID? | Did  you  mean  in the Order  table  order  by \norder id ? desc  or asc? | My apologies, I meant can I have list of orders which includes the product ids from the orders placed?",
        "query": "SELECT t1.order_id ,t2.product_id FROM orders AS t1 JOIN order_items AS t2 ON t1.order_id = t2.order_id",
        "schema": "CREATE TABLE Products (product_name TEXT, product_id NUMBER); CREATE TABLE Order_Items (order_item_id NUMBER, order_id NUMBER, product_id NUMBER); CREATE TABLE Orders (order_status TEXT, order_id NUMBER);"
      },
      {
        "question": "Yes, can I narrow the table based on the date order was placed? | Did  you  mean  you just  want only \tdate order placed? | No. Is it possible to only receive results from orders placed from 1975-01-01 to 1976-01-01?",
        "query": "SELECT t1.order_id ,t2.product_id,t1.date_order_placed FROM orders AS t1 JOIN order_items AS t2 ON t1.order_id = t2.order_id WHERE t1.date_order_placed > = \"1975-01-01\" AND t1.date_order_placed < = \"1976-01-01\"",
        "schema": "CREATE TABLE Order_Items (order_id NUMBER, product_id NUMBER, order_item_id NUMBER); CREATE TABLE Orders (order_id NUMBER, order_status TEXT, date_order_placed TIME); CREATE TABLE Products (product_name TEXT, product_id NUMBER);"
      }
    ],
    [
      {
        "question": "Can I have the dates for all the shipments?",
        "query": "SELECT shipment_date FROM shipments",
        "schema": "CREATE TABLE Shipments (shipment_date TIME, shipment_tracking_number TEXT, shipment_id NUMBER, order_id NUMBER); CREATE TABLE Invoices (invoice_date TIME, invoice_number NUMBER); CREATE TABLE Shipment_Items (shipment_id NUMBER); CREATE TABLE Orders (date_order_placed TIME, order_id NUMBER); CREATE TABLE Order_Items (order_item_id NUMBER);"
      },
      {
        "question": "Which of these dates occurred most recently?",
        "query": "SELECT shipment_date FROM shipments ORDER BY shipment_date DESC LIMIT 1",
        "schema": "CREATE TABLE Shipments (shipment_date TIME, shipment_id NUMBER, shipment_tracking_number TEXT, order_id NUMBER); CREATE TABLE Invoices (invoice_number NUMBER, invoice_date TIME); CREATE TABLE Shipment_Items (shipment_id NUMBER); CREATE TABLE Orders (order_id NUMBER, date_order_placed TIME); CREATE TABLE Order_Items (order_item_id NUMBER);"
      },
      {
        "question": "What is the shipment id for the shipment with this shipment date?",
        "query": "SELECT shipment_id FROM shipments WHERE shipment_date = ( SELECT MAX ( shipment_date ) FROM shipments )",
        "schema": "CREATE TABLE Shipments (order_id NUMBER, shipment_date TIME, shipment_tracking_number TEXT, shipment_id NUMBER); CREATE TABLE Invoices (invoice_date TIME, invoice_number NUMBER); CREATE TABLE Shipment_Items (shipment_id NUMBER); CREATE TABLE Orders (date_order_placed TIME, order_id NUMBER); CREATE TABLE Order_Items (order_item_id NUMBER);"
      }
    ],
    [
      {
        "question": "How many customers have two orders or less",
        "query": "SELECT COUNT ( * ) FROM ( SELECT t2.customer_name FROM orders AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id GROUP BY t2.customer_id HAVING COUNT ( * ) < = 2 )",
        "schema": "CREATE TABLE Orders (order_id NUMBER, customer_id NUMBER, order_details TEXT); CREATE TABLE Customers (customer_name TEXT, customer_id NUMBER, customer_details TEXT); CREATE TABLE Order_Items (order_id NUMBER);"
      },
      {
        "question": "How many total customer are there?",
        "query": "SELECT COUNT ( * ) FROM customers",
        "schema": "CREATE TABLE Customers (customer_details TEXT, customer_name TEXT, customer_id NUMBER); CREATE TABLE Order_Items (order_id NUMBER); CREATE TABLE Orders (order_id NUMBER, customer_id NUMBER, order_details TEXT);"
      },
      {
        "question": "Of the customers with two orders or less, what are their names?",
        "query": "SELECT t2.customer_name FROM orders AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id GROUP BY t2.customer_id HAVING COUNT ( * ) < = 2",
        "schema": "CREATE TABLE Products (product_name TEXT); CREATE TABLE Customers (customer_id NUMBER, customer_name TEXT, customer_details TEXT); CREATE TABLE Orders (customer_id NUMBER, order_id NUMBER, order_details TEXT); CREATE TABLE Order_Items (order_id NUMBER);"
      }
    ],
    [
      {
        "question": "Can you show me the invoice numbers which are created before 1989-09-03?",
        "query": "SELECT invoice_number FROM invoices WHERE invoice_date < \"1989-09-03\"",
        "schema": "CREATE TABLE Orders (order_id NUMBER); CREATE TABLE Invoices (invoice_number NUMBER, invoice_details TEXT, invoice_date TIME); CREATE TABLE Shipments (invoice_number NUMBER); CREATE TABLE Order_Items (order_item_id NUMBER); CREATE TABLE Customers (customer_id NUMBER);"
      },
      {
        "question": "What about the invoice numbers which are created after 2007-12-25?",
        "query": "SELECT invoice_number FROM invoices WHERE invoice_date > \"2007-12-25\"",
        "schema": "CREATE TABLE Shipments (invoice_number NUMBER); CREATE TABLE Invoices (invoice_number NUMBER, invoice_date TIME, invoice_details TEXT); CREATE TABLE Orders (order_id NUMBER); CREATE TABLE Order_Items (order_item_id NUMBER); CREATE TABLE Customers (customer_id NUMBER);"
      },
      {
        "question": "Hmm, can you list the invoice numbers which are created before 1989-09-03 or after 2007-12-25?",
        "query": "SELECT invoice_number FROM invoices WHERE invoice_date < \"1989-09-03\" OR invoice_date > \"2007-12-25\"",
        "schema": "CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Invoices (invoice_date TIME, invoice_number NUMBER, invoice_details TEXT); CREATE TABLE Shipments (invoice_number NUMBER); CREATE TABLE Orders (order_id NUMBER); CREATE TABLE Order_Items (order_item_id NUMBER);"
      }
    ],
    [
      {
        "question": "How many total orders do we have?",
        "query": "SELECT COUNT ( * ) FROM orders",
        "schema": "CREATE TABLE Shipments (order_id NUMBER); CREATE TABLE Orders (order_id NUMBER, order_status TEXT, customer_id NUMBER, order_details TEXT); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Order_Items (order_id NUMBER, order_item_id NUMBER);"
      },
      {
        "question": "What is the total number of customers?",
        "query": "SELECT COUNT ( * ) FROM customers",
        "schema": "CREATE TABLE Order_Items (order_id NUMBER, order_item_id NUMBER); CREATE TABLE Customers (customer_name TEXT, customer_id NUMBER); CREATE TABLE Orders (order_details TEXT, customer_id NUMBER, order_status TEXT, order_id NUMBER); CREATE TABLE Shipments (order_id NUMBER);"
      },
      {
        "question": "What are their customer id's?",
        "query": "SELECT customer_id FROM customers",
        "schema": "CREATE TABLE Customers (customer_name TEXT, customer_id NUMBER); CREATE TABLE Order_Items (order_id NUMBER, order_item_id NUMBER); CREATE TABLE Orders (order_status TEXT, customer_id NUMBER, order_id NUMBER, order_details TEXT); CREATE TABLE Shipments (order_id NUMBER);"
      },
      {
        "question": "What was the amount of orders for the customer that had that most orders?",
        "query": "SELECT COUNT ( * ) FROM customers AS t1 JOIN orders AS t2 ON t1.customer_id = t2.customer_id GROUP BY t1.customer_id ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Customers (customer_id NUMBER, customer_name TEXT); CREATE TABLE Orders (order_status TEXT, customer_id NUMBER, order_details TEXT, order_id NUMBER); CREATE TABLE Shipments (order_id NUMBER); CREATE TABLE Order_Items (order_item_id NUMBER, order_id NUMBER);"
      },
      {
        "question": "Which customer had 3 orders?",
        "query": "SELECT * FROM customers AS t1 JOIN orders AS t2 ON t1.customer_id = t2.customer_id GROUP BY t1.customer_id HAVING COUNT ( * ) = 3",
        "schema": "CREATE TABLE Customers (customer_id NUMBER, customer_name TEXT); CREATE TABLE Orders (order_id NUMBER, order_details TEXT, order_status TEXT, customer_id NUMBER); CREATE TABLE Shipments (order_id NUMBER); CREATE TABLE Order_Items (order_id NUMBER, order_item_id NUMBER);"
      },
      {
        "question": "What is the customer id for George?",
        "query": "SELECT customer_id FROM customers WHERE customer_name = \"George\"",
        "schema": "CREATE TABLE Customers (customer_name TEXT, customer_id NUMBER); CREATE TABLE Orders (order_id NUMBER, order_status TEXT, customer_id NUMBER, order_details TEXT); CREATE TABLE Order_Items (order_item_id NUMBER, order_id NUMBER); CREATE TABLE Shipments (order_id NUMBER);"
      },
      {
        "question": "And for Jeramie?",
        "query": "SELECT customer_id FROM customers WHERE customer_name = \"Jeramie\"",
        "schema": "CREATE TABLE Order_Items (order_id NUMBER, order_item_id NUMBER); CREATE TABLE Customers (customer_name TEXT, customer_id NUMBER); CREATE TABLE Orders (order_details TEXT, customer_id NUMBER, order_id NUMBER, order_status TEXT); CREATE TABLE Shipments (order_id NUMBER);"
      }
    ],
    [
      {
        "question": "What is the order status of the most recent order?",
        "query": "SELECT order_status FROM orders ORDER BY date_order_placed DESC LIMIT 1",
        "schema": "CREATE TABLE Invoices (invoice_date TIME); CREATE TABLE Orders (order_id NUMBER, date_order_placed TIME, order_status TEXT); CREATE TABLE Shipments (order_id NUMBER); CREATE TABLE Order_Items (order_item_id NUMBER, order_id NUMBER, order_item_status TEXT);"
      },
      {
        "question": "Can you just list the id of the most recent order?",
        "query": "SELECT order_id FROM orders ORDER BY date_order_placed DESC LIMIT 1",
        "schema": "CREATE TABLE Order_Items (order_item_id NUMBER, order_item_status TEXT, order_id NUMBER); CREATE TABLE Invoices (invoice_date TIME); CREATE TABLE Shipments (order_id NUMBER); CREATE TABLE Orders (order_id NUMBER, date_order_placed TIME, order_status TEXT);"
      }
    ],
    [
      {
        "question": "what is the customer name of customer id 1",
        "query": "SELECT customer_name FROM customers WHERE customer_id = 1",
        "schema": "CREATE TABLE Orders (customer_id NUMBER); CREATE TABLE Customers (customer_id NUMBER, customer_details TEXT, customer_name TEXT);"
      },
      {
        "question": "what is the customer name of customer id 2",
        "query": "SELECT customer_name FROM customers WHERE customer_id = 2",
        "schema": "CREATE TABLE Orders (customer_id NUMBER); CREATE TABLE Customers (customer_name TEXT, customer_id NUMBER, customer_details TEXT);"
      },
      {
        "question": "what is the customer name of customer id 3",
        "query": "SELECT customer_name FROM customers WHERE customer_id = 3",
        "schema": "CREATE TABLE Orders (customer_id NUMBER); CREATE TABLE Customers (customer_id NUMBER, customer_details TEXT, customer_name TEXT);"
      },
      {
        "question": "find the name of the customers who have at most two orders",
        "query": "SELECT t2.customer_name FROM orders AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id GROUP BY t2.customer_id HAVING COUNT ( * ) < = 2",
        "schema": "CREATE TABLE Orders (customer_id NUMBER, order_id NUMBER); CREATE TABLE Customers (customer_id NUMBER, customer_details TEXT, customer_name TEXT);"
      }
    ],
    [
      {
        "question": "Hello!  How many customers have an order status of \"On Road\"?",
        "query": "SELECT COUNT ( * ) FROM customers AS t1 JOIN orders AS t2 ON t1.customer_id = t2.customer_id WHERE t2.order_status = \"On Road\"",
        "schema": "CREATE TABLE Orders (order_status TEXT, customer_id NUMBER, order_id NUMBER); CREATE TABLE Order_Items (order_item_status TEXT, order_id NUMBER); CREATE TABLE Customers (customer_name TEXT, customer_id NUMBER, customer_details TEXT);"
      },
      {
        "question": "Great! Of those 8 customers, how many also have the status of \"Shipped\"?",
        "query": "SELECT COUNT ( * ) FROM ( SELECT t1.customer_name FROM customers AS t1 JOIN orders AS t2 ON t1.customer_id = t2.customer_id WHERE t2.order_status = \"On Road\" INTERSECT SELECT t1.customer_name FROM customers AS t1 JOIN orders AS t2 ON t1.customer_id = t2.customer_id WHERE t2.order_status = \"Shipped\" )",
        "schema": "CREATE TABLE Order_Items (order_item_status TEXT, order_id NUMBER); CREATE TABLE Orders (customer_id NUMBER, order_status TEXT, order_id NUMBER); CREATE TABLE Customers (customer_details TEXT, customer_name TEXT, customer_id NUMBER);"
      },
      {
        "question": "Can you please list the name of that 1 customer please?",
        "query": "SELECT t1.customer_name FROM customers AS t1 JOIN orders AS t2 ON t1.customer_id = t2.customer_id WHERE t2.order_status = \"On Road\" INTERSECT SELECT t1.customer_name FROM customers AS t1 JOIN orders AS t2 ON t1.customer_id = t2.customer_id WHERE t2.order_status = \"Shipped\"",
        "schema": "CREATE TABLE Customers (customer_details TEXT, customer_name TEXT, customer_id NUMBER); CREATE TABLE Orders (order_status TEXT, order_id NUMBER, customer_id NUMBER); CREATE TABLE Order_Items (order_item_status TEXT, order_id NUMBER);"
      }
    ],
    [
      {
        "question": "Find the customer id of Savannah?",
        "query": "SELECT customer_id FROM customers WHERE customer_name = \"Savannah\"",
        "schema": "CREATE TABLE Orders (order_id NUMBER, customer_id NUMBER, order_details TEXT); CREATE TABLE Products (product_name TEXT, product_details TEXT, product_id NUMBER); CREATE TABLE Order_Items (order_id NUMBER); CREATE TABLE Customers (customer_id NUMBER, customer_details TEXT, customer_name TEXT);"
      },
      {
        "question": "Which date of order placed in Alberto?",
        "query": "SELECT t2.date_order_placed FROM customers AS t1 JOIN orders AS t2 ON t1.customer_id = t2.customer_id WHERE t1.customer_name = \"Alberto\"",
        "schema": "CREATE TABLE Invoices (invoice_date TIME); CREATE TABLE Customers (customer_name TEXT, customer_details TEXT, customer_id NUMBER); CREATE TABLE Order_Items (order_item_id NUMBER, order_id NUMBER); CREATE TABLE Orders (order_id NUMBER, customer_id NUMBER, order_status TEXT, order_details TEXT, date_order_placed TIME); CREATE TABLE Products (product_name TEXT, product_id NUMBER, product_details TEXT);"
      },
      {
        "question": "What are the customer details of order id 2?",
        "query": "SELECT customer_details FROM customers WHERE customer_id = \"2\"",
        "schema": "CREATE TABLE Customers (customer_id NUMBER, customer_details TEXT, customer_name TEXT); CREATE TABLE Products (product_id NUMBER, product_name TEXT, product_details TEXT); CREATE TABLE Invoices (invoice_date TIME); CREATE TABLE Order_Items (order_id NUMBER, order_item_id NUMBER); CREATE TABLE Orders (date_order_placed TIME, order_details TEXT, customer_id NUMBER, order_id NUMBER, order_status TEXT);"
      },
      {
        "question": "Find the details of all distinct customers who have orders with status \"On Road\".",
        "query": "SELECT DISTINCT t1.customer_details FROM customers AS t1 JOIN orders AS t2 ON t1.customer_id = t2.customer_id WHERE t2.order_status = \"On Road\"",
        "schema": "CREATE TABLE Orders (order_details TEXT, customer_id NUMBER, date_order_placed TIME, order_status TEXT, order_id NUMBER); CREATE TABLE Products (product_details TEXT, product_id NUMBER, product_name TEXT); CREATE TABLE Invoices (invoice_date TIME); CREATE TABLE Order_Items (order_id NUMBER, order_item_id NUMBER); CREATE TABLE Customers (customer_id NUMBER, customer_details TEXT, customer_name TEXT);"
      }
    ],
    [
      {
        "question": "How many customers are there?",
        "query": "SELECT COUNT ( * ) FROM customers",
        "schema": "CREATE TABLE Customers (customer_details TEXT, customer_name TEXT, customer_id NUMBER); CREATE TABLE Orders (customer_id NUMBER);"
      },
      {
        "question": "How many orders each customer have?",
        "query": "SELECT customer_id, COUNT ( * ) FROM orders GROUP BY customer_id",
        "schema": "CREATE TABLE Customers (customer_name TEXT, customer_id NUMBER, customer_details TEXT); CREATE TABLE Orders (order_id NUMBER, customer_id NUMBER); CREATE TABLE Order_Items (order_id NUMBER);"
      },
      {
        "question": "Can you provide me with the list of id and status of orders of the customer named \"Jeramie\"?",
        "query": "SELECT t2.order_id , t2.order_status FROM customers AS t1 JOIN orders AS t2 ON t1.customer_id = t2.customer_id WHERE t1.customer_name = \"Jeramie\"",
        "schema": "CREATE TABLE Orders (order_status TEXT, order_id NUMBER, customer_id NUMBER); CREATE TABLE Order_Items (order_id NUMBER, order_item_status TEXT); CREATE TABLE Customers (customer_name TEXT, customer_id NUMBER, customer_details TEXT);"
      }
    ],
    [
      {
        "question": "When was the order with the tracking number 3452 placed? | Did you want the order id of the order with shipment tracking number 3452? | Okay, tell me the order ID of that tracking number.",
        "query": "SELECT t1.order_id FROM orders AS t1 JOIN shipments AS t2 ON t1.order_id = t2.order_id WHERE t2.shipment_tracking_number = 3452",
        "schema": "CREATE TABLE Orders (order_id NUMBER, date_order_placed TIME); CREATE TABLE Shipments (shipment_id NUMBER, shipment_tracking_number TEXT, order_id NUMBER); CREATE TABLE Order_Items (order_id NUMBER, order_item_id NUMBER); CREATE TABLE Shipment_Items (shipment_id NUMBER, order_item_id NUMBER);"
      },
      {
        "question": "Thank you, what is the shipment date of order id 5?",
        "query": "SELECT shipment_date FROM shipments WHERE order_id = 5",
        "schema": "CREATE TABLE Shipment_Items (shipment_id NUMBER, order_item_id NUMBER); CREATE TABLE Orders (date_order_placed TIME, order_id NUMBER); CREATE TABLE Shipments (shipment_date TIME, shipment_tracking_number TEXT, shipment_id NUMBER, order_id NUMBER); CREATE TABLE Order_Items (order_item_id NUMBER, order_id NUMBER);"
      },
      {
        "question": "What was the date when order id 5 was placed?",
        "query": "SELECT date_order_placed FROM orders WHERE order_id = 5",
        "schema": "CREATE TABLE Order_Items (order_item_id NUMBER, order_id NUMBER); CREATE TABLE Shipments (order_id NUMBER, shipment_date TIME, shipment_tracking_number TEXT, shipment_id NUMBER); CREATE TABLE Orders (order_id NUMBER, date_order_placed TIME); CREATE TABLE Shipment_Items (order_item_id NUMBER, shipment_id NUMBER);"
      },
      {
        "question": "How about the order with invoice number 13, when was that order placed?",
        "query": "SELECT t1.date_order_placed FROM orders AS t1 JOIN shipments AS t2 ON t1.order_id = t2.order_id WHERE t2.invoice_number = 13",
        "schema": "CREATE TABLE Orders (date_order_placed TIME, order_id NUMBER); CREATE TABLE Shipment_Items (order_item_id NUMBER, shipment_id NUMBER); CREATE TABLE Invoices (invoice_number NUMBER, invoice_date TIME); CREATE TABLE Order_Items (order_item_id NUMBER, order_id NUMBER); CREATE TABLE Shipments (shipment_id NUMBER, shipment_tracking_number TEXT, order_id NUMBER, invoice_number NUMBER, shipment_date TIME);"
      }
    ],
    [
      {
        "question": "What is the product ID for food?",
        "query": "SELECT product_id FROM products WHERE product_name = 'food'",
        "schema": "CREATE TABLE Products (product_name TEXT, product_id NUMBER); CREATE TABLE Order_Items (order_item_id NUMBER, product_id NUMBER);"
      },
      {
        "question": "What are the order IDs that have those product IDs?",
        "query": "SELECT t2.order_id FROM products AS t1 JOIN order_items AS t2 WHERE t1.product_id = t2.product_id AND t1.product_name = 'food'",
        "schema": "CREATE TABLE Products (product_id NUMBER, product_name TEXT); CREATE TABLE Order_Items (product_id NUMBER, order_item_id NUMBER, order_id NUMBER); CREATE TABLE Orders (order_id NUMBER, customer_id NUMBER); CREATE TABLE Shipments (order_id NUMBER);"
      },
      {
        "question": "What customer IDs have those order IDs?",
        "query": "SELECT t3.customer_id FROM products AS t1 JOIN order_items AS t2 JOIN orders AS t3 WHERE t1.product_id = t2.product_id AND t1.product_name = 'food' AND t3.order_id = t2.order_id",
        "schema": "CREATE TABLE Order_Items (order_item_id NUMBER, order_id NUMBER, product_id NUMBER); CREATE TABLE Orders (customer_id NUMBER, order_id NUMBER); CREATE TABLE Products (product_id NUMBER, product_name TEXT); CREATE TABLE Shipments (order_id NUMBER); CREATE TABLE Customers (customer_name TEXT, customer_id NUMBER);"
      }
    ],
    [
      {
        "question": "show a list of the invoice numbers",
        "query": "SELECT invoice_number FROM shipments",
        "schema": "CREATE TABLE Orders (order_id NUMBER, customer_id NUMBER); CREATE TABLE Invoices (invoice_number NUMBER, invoice_details TEXT); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Shipments (invoice_number NUMBER);"
      },
      {
        "question": "add a column for order id",
        "query": "SELECT invoice_number, order_id FROM shipments",
        "schema": "CREATE TABLE Shipment_Items (shipment_id NUMBER, order_item_id NUMBER); CREATE TABLE Order_Items (order_item_details TEXT, order_id NUMBER, order_item_id NUMBER); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Shipments (invoice_number NUMBER, shipment_id NUMBER, order_id NUMBER); CREATE TABLE Orders (order_id NUMBER, customer_id NUMBER, order_details TEXT); CREATE TABLE Invoices (invoice_details TEXT, invoice_number NUMBER);"
      },
      {
        "question": "show the date order placed for order id 9",
        "query": "SELECT date_order_placed FROM orders WHERE order_id = 9",
        "schema": "CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Shipments (invoice_number NUMBER, shipment_date TIME, shipment_id NUMBER, order_id NUMBER); CREATE TABLE Shipment_Items (order_item_id NUMBER, shipment_id NUMBER); CREATE TABLE Orders (customer_id NUMBER, order_id NUMBER, order_details TEXT, date_order_placed TIME); CREATE TABLE Order_Items (order_id NUMBER, order_item_id NUMBER, order_item_details TEXT); CREATE TABLE Invoices (invoice_number NUMBER, invoice_details TEXT, invoice_date TIME);"
      }
    ],
    [
      {
        "question": "how many customers are presented on the table",
        "query": "SELECT COUNT ( * ) FROM customers",
        "schema": "CREATE TABLE Customers (customer_details TEXT, customer_id NUMBER, customer_name TEXT); CREATE TABLE Orders (customer_id NUMBER);"
      },
      {
        "question": "list out the customers name",
        "query": "SELECT customer_name FROM customers",
        "schema": "CREATE TABLE Orders (customer_id NUMBER); CREATE TABLE Customers (customer_name TEXT, customer_id NUMBER, customer_details TEXT);"
      },
      {
        "question": "show all the customer details",
        "query": "SELECT customer_details FROM customers",
        "schema": "CREATE TABLE Orders (customer_id NUMBER); CREATE TABLE Customers (customer_id NUMBER, customer_name TEXT, customer_details TEXT);"
      },
      {
        "question": "what is the order status of George",
        "query": "SELECT t2.order_status FROM customers AS t1 JOIN orders AS t2 JOIN order_items AS t3 JOIN products AS t4 ON t1.customer_id = t2.customer_id AND t2.order_id = t3.order_id AND t3.product_id = t4.product_id WHERE t1.customer_name = \"George\"",
        "schema": "CREATE TABLE Orders (order_status TEXT, customer_id NUMBER, order_details TEXT, order_id NUMBER); CREATE TABLE Customers (customer_id NUMBER, customer_name TEXT, customer_details TEXT); CREATE TABLE Order_Items (order_item_status TEXT, order_id NUMBER, product_id NUMBER); CREATE TABLE Products (product_id NUMBER);"
      }
    ],
    [
      {
        "question": "List the name of all the distinct customers who have ordered with status \"packing\"",
        "query": "SELECT DISTINCT t1.customer_name FROM customers AS t1 JOIN orders AS t2 ON t1.customer_id = t2.customer_id WHERE t2.order_status = \"Packing\"",
        "schema": "CREATE TABLE Order_Items (order_id NUMBER, order_item_status TEXT); CREATE TABLE Customers (customer_details TEXT, customer_name TEXT, customer_id NUMBER); CREATE TABLE Orders (order_status TEXT, order_id NUMBER, customer_id NUMBER);"
      },
      {
        "question": "may i have the dates of their orders please?",
        "query": "SELECT DISTINCT t2.date_order_placed FROM customers AS t1 JOIN orders AS t2 ON t1.customer_id = t2.customer_id WHERE t2.order_status = \"Packing\"",
        "schema": "CREATE TABLE Orders (customer_id NUMBER, date_order_placed TIME, order_status TEXT, order_id NUMBER); CREATE TABLE Invoices (invoice_date TIME); CREATE TABLE Customers (customer_name TEXT, customer_details TEXT, customer_id NUMBER); CREATE TABLE Order_Items (order_id NUMBER, order_item_status TEXT);"
      },
      {
        "question": "may i have the order ids please",
        "query": "SELECT order_id FROM orders WHERE order_status = \"Packing\"",
        "schema": "CREATE TABLE Customers (customer_name TEXT, customer_details TEXT, customer_id NUMBER); CREATE TABLE Order_Items (order_item_status TEXT, order_id NUMBER); CREATE TABLE Orders (order_status TEXT, order_id NUMBER, customer_id NUMBER, date_order_placed TIME); CREATE TABLE Invoices (invoice_date TIME);"
      },
      {
        "question": "may i have the customer ids please",
        "query": "SELECT customer_id FROM orders WHERE order_status = \"Packing\"",
        "schema": "CREATE TABLE Customers (customer_details TEXT, customer_id NUMBER, customer_name TEXT); CREATE TABLE Invoices (invoice_date TIME); CREATE TABLE Orders (order_id NUMBER, order_status TEXT, customer_id NUMBER, date_order_placed TIME); CREATE TABLE Order_Items (order_id NUMBER, order_item_status TEXT);"
      },
      {
        "question": "may i have the order ids please? | Did you mean their order ids? | yes",
        "query": "SELECT order_id FROM orders WHERE order_status = \"On Road\"",
        "schema": "CREATE TABLE Invoices (invoice_date TIME); CREATE TABLE Order_Items (order_item_status TEXT, order_id NUMBER); CREATE TABLE Customers (customer_details TEXT, customer_name TEXT, customer_id NUMBER); CREATE TABLE Orders (order_status TEXT, order_id NUMBER, date_order_placed TIME, customer_id NUMBER);"
      }
    ],
    [
      {
        "question": "Which customers made at least two orders?",
        "query": "SELECT * , COUNT ( * ) FROM orders AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id GROUP BY t2.customer_id HAVING COUNT ( * ) > = 2",
        "schema": "CREATE TABLE Order_Items (order_id NUMBER); CREATE TABLE Customers (customer_details TEXT, customer_id NUMBER, customer_name TEXT); CREATE TABLE Orders (order_id NUMBER, customer_id NUMBER, order_details TEXT, order_status TEXT);"
      },
      {
        "question": "How many orders did George make?",
        "query": "SELECT COUNT ( * ) FROM orders AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id WHERE t2.customer_name = \"George\"",
        "schema": "CREATE TABLE Customers (customer_name TEXT, customer_details TEXT, customer_id NUMBER); CREATE TABLE Order_Items (order_id NUMBER); CREATE TABLE Orders (order_id NUMBER, order_details TEXT, customer_id NUMBER, order_status TEXT);"
      },
      {
        "question": "How many did Beulah make?",
        "query": "SELECT COUNT ( * ) FROM orders AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id WHERE t2.customer_name = \"Beulah\"",
        "schema": "CREATE TABLE Customers (customer_id NUMBER, customer_name TEXT, customer_details TEXT); CREATE TABLE Orders (order_status TEXT, order_id NUMBER, customer_id NUMBER, order_details TEXT); CREATE TABLE Order_Items (order_id NUMBER);"
      }
    ],
    [
      {
        "question": "how many products there",
        "query": "SELECT COUNT ( * ) FROM products",
        "schema": "CREATE TABLE Products (product_id NUMBER, product_name TEXT, product_details TEXT); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Order_Items (order_id NUMBER, order_item_id NUMBER, product_id NUMBER); CREATE TABLE Orders (order_id NUMBER);"
      },
      {
        "question": "how many orders there",
        "query": "SELECT COUNT ( * ) FROM orders",
        "schema": "CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Shipments (order_id NUMBER); CREATE TABLE Order_Items (product_id NUMBER, order_item_status TEXT, order_id NUMBER, order_item_id NUMBER); CREATE TABLE Orders (customer_id NUMBER, order_status TEXT, order_id NUMBER); CREATE TABLE Products (product_details TEXT, product_id NUMBER, product_name TEXT);"
      },
      {
        "question": "what is the name of product id 1",
        "query": "SELECT product_name FROM products WHERE product_id = 1",
        "schema": "CREATE TABLE Orders (order_status TEXT, order_id NUMBER, customer_id NUMBER); CREATE TABLE Order_Items (product_id NUMBER, order_id NUMBER, order_item_id NUMBER, order_item_status TEXT); CREATE TABLE Shipments (order_id NUMBER); CREATE TABLE Products (product_name TEXT, product_id NUMBER, product_details TEXT); CREATE TABLE Customers (customer_id NUMBER);"
      }
    ],
    [
      {
        "question": "how many orders there",
        "query": "SELECT COUNT ( * ) FROM orders",
        "schema": "CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Order_Items (order_item_details TEXT, order_id NUMBER, order_item_id NUMBER, product_id NUMBER); CREATE TABLE Shipments (order_id NUMBER); CREATE TABLE Orders (order_status TEXT, order_id NUMBER, customer_id NUMBER, order_details TEXT); CREATE TABLE Shipment_Items (order_item_id NUMBER);"
      },
      {
        "question": "what is the date order placed of order id 2",
        "query": "SELECT date_order_placed FROM orders WHERE order_id = 2",
        "schema": "CREATE TABLE Shipment_Items (order_item_id NUMBER); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Orders (order_id NUMBER, date_order_placed TIME, customer_id NUMBER, order_details TEXT, order_status TEXT); CREATE TABLE Order_Items (order_item_details TEXT, product_id NUMBER, order_item_id NUMBER, order_id NUMBER); CREATE TABLE Invoices (invoice_date TIME); CREATE TABLE Shipments (order_id NUMBER);"
      },
      {
        "question": "how many order Items there",
        "query": "SELECT COUNT ( * ) FROM order_items",
        "schema": "CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Products (product_id NUMBER, product_name TEXT); CREATE TABLE Shipments (order_id NUMBER); CREATE TABLE Shipment_Items (order_item_id NUMBER); CREATE TABLE Orders (order_details TEXT, order_status TEXT, order_id NUMBER, customer_id NUMBER, date_order_placed TIME); CREATE TABLE Invoices (invoice_date TIME); CREATE TABLE Order_Items (order_id NUMBER, order_item_id NUMBER, order_item_details TEXT, product_id NUMBER, order_item_status TEXT);"
      }
    ],
    [
      {
        "question": "What is the ID of the oldest customer?",
        "query": "SELECT customer_id FROM orders ORDER BY date_order_placed LIMIT 1",
        "schema": "CREATE TABLE Order_Items (order_id NUMBER); CREATE TABLE Customers (customer_details TEXT, customer_name TEXT, customer_id NUMBER); CREATE TABLE Orders (date_order_placed TIME, customer_id NUMBER, order_id NUMBER); CREATE TABLE Invoices (invoice_date TIME);"
      },
      {
        "question": "what about the newest customer?",
        "query": "SELECT customer_id FROM orders ORDER BY date_order_placed DESC LIMIT 1",
        "schema": "CREATE TABLE Customers (customer_name TEXT, customer_id NUMBER, customer_details TEXT); CREATE TABLE Invoices (invoice_date TIME); CREATE TABLE Orders (customer_id NUMBER, date_order_placed TIME, order_id NUMBER); CREATE TABLE Order_Items (order_id NUMBER);"
      },
      {
        "question": "What is the order status of the order for customer with ID 11",
        "query": "SELECT order_status FROM orders WHERE customer_id = 11",
        "schema": "CREATE TABLE Customers (customer_details TEXT, customer_name TEXT, customer_id NUMBER); CREATE TABLE Orders (order_id NUMBER, date_order_placed TIME, customer_id NUMBER, order_status TEXT); CREATE TABLE Order_Items (order_id NUMBER); CREATE TABLE Invoices (invoice_date TIME);"
      },
      {
        "question": "What date did customer with ID 11 place an order?",
        "query": "SELECT date_order_placed FROM orders WHERE customer_id = 11",
        "schema": "CREATE TABLE Order_Items (order_id NUMBER); CREATE TABLE Invoices (invoice_date TIME); CREATE TABLE Customers (customer_name TEXT, customer_id NUMBER, customer_details TEXT); CREATE TABLE Orders (customer_id NUMBER, date_order_placed TIME, order_status TEXT, order_id NUMBER);"
      }
    ]
  ],
  "manufactory_1": [
    [
      {
        "question": "What is the average price of all products?",
        "query": "SELECT AVG ( price ) FROM products",
        "schema": "CREATE TABLE Manufacturers (Code NUMBER); CREATE TABLE Products (Price NUMBER, Code NUMBER, Name TEXT);"
      },
      {
        "question": "And what is the average price for each company?",
        "query": "SELECT AVG ( price ) , manufacturer FROM products GROUP BY manufacturer",
        "schema": "CREATE TABLE Products (Price NUMBER, Manufacturer NUMBER, Name TEXT, Code NUMBER); CREATE TABLE Manufacturers (Name TEXT, Code NUMBER);"
      },
      {
        "question": "What are all companies names?",
        "query": "SELECT name FROM manufacturers",
        "schema": "CREATE TABLE Products (Code NUMBER, Name TEXT, Price NUMBER, Manufacturer NUMBER); CREATE TABLE Manufacturers (Code NUMBER, Name TEXT);"
      },
      {
        "question": "And what are their headquarters?",
        "query": "SELECT name, headquarter FROM manufacturers",
        "schema": "CREATE TABLE Manufacturers (Name TEXT, Code NUMBER, Headquarter TEXT); CREATE TABLE Products (Manufacturer NUMBER, Name TEXT, Price NUMBER, Code NUMBER);"
      }
    ],
    [
      {
        "question": "How many companies are there?",
        "query": "SELECT COUNT ( * ) FROM manufacturers",
        "schema": "CREATE TABLE Products (Manufacturer NUMBER); CREATE TABLE Manufacturers (Code NUMBER, Name TEXT, Headquarter TEXT);"
      },
      {
        "question": "What are their founder names?",
        "query": "SELECT name FROM manufacturers",
        "schema": "CREATE TABLE Products (Manufacturer NUMBER); CREATE TABLE Manufacturers (Name TEXT, Headquarter TEXT, Code NUMBER, Founder TEXT);"
      },
      {
        "question": "Show founder names that begin with letter \"S\" | Did you mean founder\u2018s name that begin with letter 'S'? | yes",
        "query": "SELECT founder FROM manufacturers WHERE founder LIKE 'S%'",
        "schema": "CREATE TABLE Products (Manufacturer NUMBER); CREATE TABLE Manufacturers (Name TEXT, Founder TEXT, Headquarter TEXT, Code NUMBER);"
      },
      {
        "question": "Ok, than show all companies headquarters",
        "query": "SELECT headquarter FROM manufacturers",
        "schema": "CREATE TABLE Products (Manufacturer NUMBER); CREATE TABLE Manufacturers (Code NUMBER, Name TEXT, Headquarter TEXT, Founder TEXT);"
      }
    ],
    [
      {
        "question": "Hello!  Can you please provide me with the name of the founder for Sony?",
        "query": "SELECT founder FROM manufacturers WHERE name = 'Sony'",
        "schema": "CREATE TABLE Products (Manufacturer NUMBER, Name TEXT); CREATE TABLE Manufacturers (Founder TEXT, Headquarter TEXT, Name TEXT, Code NUMBER);"
      },
      {
        "question": "Thanks!  What city is the headquarters of Sony located in?",
        "query": "SELECT headquarter FROM manufacturers WHERE name = 'Sony'",
        "schema": "CREATE TABLE Manufacturers (Headquarter TEXT, Code NUMBER, Founder TEXT, Name TEXT); CREATE TABLE Products (Name TEXT, Manufacturer NUMBER);"
      },
      {
        "question": "What was Sony's revenue?",
        "query": "SELECT revenue FROM manufacturers WHERE name = 'Sony'",
        "schema": "CREATE TABLE Products (Manufacturer NUMBER, Name TEXT); CREATE TABLE Manufacturers (Founder TEXT, Headquarter TEXT, Code NUMBER, Name TEXT, Revenue NUMBER);"
      }
    ],
    [
      {
        "question": "What are the names of all companies whose revenue is smaller than the revenue of all companies based in Austin?",
        "query": "SELECT name FROM manufacturers WHERE revenue < ( SELECT MIN ( revenue ) FROM manufacturers WHERE headquarter = 'Austin' )",
        "schema": "CREATE TABLE Manufacturers (Revenue NUMBER, Code NUMBER, Name TEXT, Headquarter TEXT);"
      },
      {
        "question": "What are the companies' revenues whose revenue is smaller than the revenue of all companies based in Austin?",
        "query": "SELECT revenue FROM manufacturers WHERE revenue < ( SELECT MIN ( revenue ) FROM manufacturers WHERE headquarter = 'Austin' )",
        "schema": "CREATE TABLE Manufacturers (Name TEXT, Code NUMBER, Headquarter TEXT, Revenue NUMBER);"
      },
      {
        "question": "What is the numerical value of those two companies' revenues?",
        "query": "SELECT name,revenue FROM manufacturers WHERE revenue < ( SELECT MIN ( revenue ) FROM manufacturers WHERE headquarter = 'Austin' )",
        "schema": "CREATE TABLE Manufacturers (Name TEXT, Code NUMBER, Headquarter TEXT, Revenue NUMBER);"
      },
      {
        "question": "What are the names of all companies whose revenue is larger than the revenue of all companies based in Austin?",
        "query": "SELECT name FROM manufacturers WHERE revenue > ( SELECT MIN ( revenue ) FROM manufacturers WHERE headquarter = 'Austin' )",
        "schema": "CREATE TABLE Manufacturers (Code NUMBER, Revenue NUMBER, Name TEXT, Headquarter TEXT);"
      },
      {
        "question": "What are the numerical values of their revenues, please?",
        "query": "SELECT name,revenue FROM manufacturers WHERE revenue > ( SELECT MIN ( revenue ) FROM manufacturers WHERE headquarter = 'Austin' )",
        "schema": "CREATE TABLE Manufacturers (Headquarter TEXT, Name TEXT, Revenue NUMBER, Code NUMBER);"
      }
    ],
    [
      {
        "question": "how many names or products in the table | Do  you  mean  the  names of products in the products table | how many headquarter in the Manufacturers table",
        "query": "SELECT COUNT ( headquarter ) FROM manufacturers",
        "schema": "CREATE TABLE Manufacturers (Headquarter TEXT, Code NUMBER, Name TEXT); CREATE TABLE Products (Name TEXT, Manufacturer NUMBER);"
      },
      {
        "question": "how many revenue in the Manufacturers table | Do you  mean  the  sum of  revenue in the Manufacturers table | what highest price in the Products table",
        "query": "SELECT MAX ( price ) FROM products",
        "schema": "CREATE TABLE Manufacturers (Revenue NUMBER, Headquarter TEXT, Name TEXT, Code NUMBER); CREATE TABLE Products (Price NUMBER, Name TEXT, Manufacturer NUMBER);"
      }
    ],
    [
      {
        "question": "Can you list all companies based in Austin and their revenues?",
        "query": "SELECT name,revenue FROM manufacturers WHERE headquarter = 'Austin'",
        "schema": "CREATE TABLE Manufacturers (Headquarter TEXT, Revenue NUMBER, Name TEXT, Code NUMBER);"
      },
      {
        "question": "Can you list all companies whose revenue is less than 100?",
        "query": "SELECT name FROM manufacturers WHERE revenue<100",
        "schema": "CREATE TABLE Manufacturers (Code NUMBER, Revenue NUMBER, Headquarter TEXT, Name TEXT);"
      },
      {
        "question": "Thanks! What is the respective revenues of Hewlett-Packard and Winchester?",
        "query": "SELECT name,revenue FROM manufacturers WHERE revenue<100",
        "schema": "CREATE TABLE Manufacturers (Headquarter TEXT, Revenue NUMBER, Name TEXT, Code NUMBER);"
      }
    ],
    [
      {
        "question": "Who the founder of Sony? | Did you mean the founder of the manufacturer named Sony? | Yes",
        "query": "SELECT founder FROM manufacturers WHERE name = \"Sony\"",
        "schema": "CREATE TABLE Manufacturers (Code NUMBER, Headquarter TEXT, Name TEXT, Founder TEXT); CREATE TABLE Products (Manufacturer NUMBER);"
      },
      {
        "question": "Which company is headed by Austin city? | Did you mean the name of manufacturers whose headquarters are Austin? | Yes",
        "query": "SELECT name FROM manufacturers WHERE headquarter = \"Austin\"",
        "schema": "CREATE TABLE Products (Manufacturer NUMBER); CREATE TABLE Manufacturers (Name TEXT, Headquarter TEXT, Code NUMBER, Founder TEXT);"
      },
      {
        "question": "What are the revenue of manufacture name Hewlett-Packard?",
        "query": "SELECT revenue FROM manufacturers WHERE name = \"Hewlett-Packard\"",
        "schema": "CREATE TABLE Manufacturers (Founder TEXT, Revenue NUMBER, Headquarter TEXT, Code NUMBER, Name TEXT); CREATE TABLE Products (Manufacturer NUMBER);"
      },
      {
        "question": "Find the number of manufactures that are based in Tokyo or Beijing.",
        "query": "SELECT COUNT ( * ) FROM manufacturers WHERE headquarter = 'Tokyo' OR headquarter = 'Beijing'",
        "schema": "CREATE TABLE Manufacturers (Headquarter TEXT, Name TEXT, Founder TEXT, Code NUMBER, Revenue NUMBER); CREATE TABLE Products (Manufacturer NUMBER);"
      }
    ],
    [
      {
        "question": "what are the average revenues of all compaies?",
        "query": "SELECT AVG ( revenue ) FROM manufacturers",
        "schema": "CREATE TABLE Manufacturers (Revenue NUMBER, Name TEXT, Code NUMBER, Headquarter TEXT);"
      },
      {
        "question": "what are the maximum revenues of all companies?",
        "query": "SELECT MAX ( revenue ) FROM manufacturers",
        "schema": "CREATE TABLE Manufacturers (Headquarter TEXT, Code NUMBER, Revenue NUMBER, Name TEXT);"
      },
      {
        "question": "what are the total revenues of all companies?",
        "query": "SELECT SUM ( revenue ) FROM manufacturers",
        "schema": "CREATE TABLE Manufacturers (Code NUMBER, Headquarter TEXT, Revenue NUMBER, Name TEXT);"
      }
    ],
    [
      {
        "question": "List names of each manufacturer?",
        "query": "SELECT name FROM manufacturers",
        "schema": "CREATE TABLE Manufacturers (Name TEXT, Code NUMBER); CREATE TABLE Products (Manufacturer NUMBER);"
      },
      {
        "question": "Name of each manufacturer's product?",
        "query": "SELECT t1.name, t2.name FROM products AS t1 JOIN manufacturers AS t2 ON t1.manufacturer = t2.code",
        "schema": "CREATE TABLE Products (Name TEXT, Manufacturer NUMBER); CREATE TABLE Manufacturers (Code NUMBER, Name TEXT);"
      },
      {
        "question": "Price of each manufacturer's product?",
        "query": "SELECT t1.price FROM products AS t1 JOIN manufacturers AS t2 ON t1.manufacturer = t2.code",
        "schema": "CREATE TABLE Manufacturers (Name TEXT, Code NUMBER); CREATE TABLE Products (Manufacturer NUMBER, Price NUMBER, Name TEXT, Code NUMBER);"
      },
      {
        "question": "Which product is the most expensive?",
        "query": "SELECT name FROM products ORDER BY price DESC LIMIT 1",
        "schema": "CREATE TABLE Manufacturers (Code NUMBER, Name TEXT); CREATE TABLE Products (Price NUMBER, Name TEXT, Manufacturer NUMBER, Code NUMBER);"
      },
      {
        "question": "Name of each manufacturer along with the name and price of its most expensive product?",
        "query": "SELECT t1.name , MAX ( t1.price ) , t2.name FROM products AS t1 JOIN manufacturers AS t2 ON t1.manufacturer = t2.code GROUP BY t2.name",
        "schema": "CREATE TABLE Products (Code NUMBER, Manufacturer NUMBER, Price NUMBER, Name TEXT); CREATE TABLE Manufacturers (Name TEXT, Code NUMBER);"
      },
      {
        "question": "What of their least expensive product?",
        "query": "SELECT t1.name , MIN ( t1.price ) , t2.name FROM products AS t1 JOIN manufacturers AS t2 ON t1.manufacturer = t2.code GROUP BY t2.name",
        "schema": "CREATE TABLE Products (Code NUMBER, Name TEXT, Manufacturer NUMBER, Price NUMBER); CREATE TABLE Manufacturers (Name TEXT, Code NUMBER);"
      }
    ],
    [
      {
        "question": "what is the average price among all products?",
        "query": "SELECT AVG ( price ) FROM products",
        "schema": "CREATE TABLE Manufacturers (Code NUMBER); CREATE TABLE Products (Code NUMBER, Name TEXT, Price NUMBER);"
      },
      {
        "question": "which products have a price higher than or equal to $150?",
        "query": "SELECT * FROM products WHERE price > = 150",
        "schema": "CREATE TABLE Products (Price NUMBER, Name TEXT, Code NUMBER); CREATE TABLE Manufacturers (Code NUMBER);"
      },
      {
        "question": "what are the names of the manufacturers of those products?",
        "query": "SELECT t2.name FROM products AS t1 JOIN manufacturers AS t2 ON t1.manufacturer = t2.code WHERE t1.price > = 150",
        "schema": "CREATE TABLE Manufacturers (Name TEXT, Code NUMBER); CREATE TABLE Products (Manufacturer NUMBER, Code NUMBER, Price NUMBER, Name TEXT);"
      }
    ],
    [
      {
        "question": "can you show me a list of headquarters?",
        "query": "SELECT headquarter FROM manufacturers",
        "schema": "CREATE TABLE Manufacturers (Name TEXT, Code NUMBER, Headquarter TEXT);"
      },
      {
        "question": "can you show me list of founders?",
        "query": "SELECT founder FROM manufacturers",
        "schema": "CREATE TABLE Manufacturers (Headquarter TEXT, Code NUMBER, Name TEXT, Founder TEXT);"
      },
      {
        "question": "can you show me an average of revenue?",
        "query": "SELECT AVG ( revenue ) FROM manufacturers",
        "schema": "CREATE TABLE Manufacturers (Revenue NUMBER, Headquarter TEXT, Name TEXT, Founder TEXT, Code NUMBER);"
      }
    ],
    [
      {
        "question": "What is the name of the manufacturer that has the highest revenue?",
        "query": "SELECT name FROM manufacturers ORDER BY revenue DESC LIMIT 1",
        "schema": "CREATE TABLE Products (Manufacturer NUMBER); CREATE TABLE Manufacturers (Code NUMBER, Name TEXT, Revenue NUMBER);"
      },
      {
        "question": "What is the name of the manufacturer that has the third lowest revenue?",
        "query": "SELECT name FROM manufacturers ORDER BY revenue ASC LIMIT 2,1",
        "schema": "CREATE TABLE Manufacturers (Name TEXT, Revenue NUMBER, Code NUMBER); CREATE TABLE Products (Manufacturer NUMBER);"
      },
      {
        "question": "Who is the founder of Creative Labs?",
        "query": "SELECT founder FROM manufacturers WHERE name = \"Creative Labs\"",
        "schema": "CREATE TABLE Products (Manufacturer NUMBER); CREATE TABLE Manufacturers (Code NUMBER, Founder TEXT, Revenue NUMBER, Name TEXT);"
      },
      {
        "question": "What is the average revenue of all manufacturers?",
        "query": "SELECT AVG ( revenue ) FROM manufacturers",
        "schema": "CREATE TABLE Products (Manufacturer NUMBER); CREATE TABLE Manufacturers (Revenue NUMBER, Name TEXT, Code NUMBER, Founder TEXT);"
      },
      {
        "question": "What is the name of the founder of the manufacturer that has the highest revenue?",
        "query": "SELECT founder FROM manufacturers ORDER BY revenue DESC LIMIT 1",
        "schema": "CREATE TABLE Manufacturers (Revenue NUMBER, Headquarter TEXT, Name TEXT, Founder TEXT, Code NUMBER); CREATE TABLE Products (Manufacturer NUMBER);"
      }
    ],
    [
      {
        "question": "Yes. Can you please provide the name in alphabetical order?",
        "query": "SELECT name FROM products WHERE price > = 180 ORDER BY name ASC",
        "schema": "CREATE TABLE Products (Manufacturer NUMBER, Price NUMBER, Code NUMBER, Name TEXT); CREATE TABLE Manufacturers (Code NUMBER, Name TEXT);"
      },
      {
        "question": "Thank you. Can you please provide the price of each of these items as well sorted by lowest price first?",
        "query": "SELECT name, price FROM products WHERE price > = 180 ORDER BY price ASC",
        "schema": "CREATE TABLE Products (Manufacturer NUMBER, Code NUMBER, Name TEXT, Price NUMBER); CREATE TABLE Manufacturers (Name TEXT, Code NUMBER);"
      },
      {
        "question": "Can you please also provide the manufacturer on these products?",
        "query": "SELECT name, price, manufacturer FROM products WHERE price > = 180 ORDER BY price ASC",
        "schema": "CREATE TABLE Manufacturers (Code NUMBER, Name TEXT); CREATE TABLE Products (Manufacturer NUMBER, Code NUMBER, Price NUMBER, Name TEXT);"
      }
    ],
    [
      {
        "question": "What manufacturer has the highest revenue?",
        "query": "SELECT name FROM manufacturers ORDER BY revenue DESC LIMIT 1",
        "schema": "CREATE TABLE Manufacturers (Revenue NUMBER, Name TEXT, Code NUMBER);"
      },
      {
        "question": "Where is Iomega located?",
        "query": "SELECT headquarter FROM manufacturers WHERE name = 'Iomega'",
        "schema": "CREATE TABLE Manufacturers (Code NUMBER, Name TEXT, Headquarter TEXT, Revenue NUMBER);"
      },
      {
        "question": "What manufacturers on the list are located in Austin?",
        "query": "SELECT name FROM manufacturers WHERE headquarter = 'Austin'",
        "schema": "CREATE TABLE Manufacturers (Headquarter TEXT, Revenue NUMBER, Name TEXT, Code NUMBER);"
      },
      {
        "question": "What is Creative labs revenue?",
        "query": "SELECT revenue FROM manufacturers WHERE name = 'Creative Labs'",
        "schema": "CREATE TABLE Manufacturers (Headquarter TEXT, Revenue NUMBER, Code NUMBER, Name TEXT);"
      },
      {
        "question": "How many companies have a revenue greater than 100.0?",
        "query": "SELECT COUNT ( * ) FROM manufacturers WHERE revenue>100.0",
        "schema": "CREATE TABLE Manufacturers (Name TEXT, Code NUMBER, Headquarter TEXT, Revenue NUMBER);"
      },
      {
        "question": "What is the total revue of those 3 companies?",
        "query": "SELECT SUM ( revenue ) FROM manufacturers WHERE revenue>100.0",
        "schema": "CREATE TABLE Manufacturers (Code NUMBER, Name TEXT, Headquarter TEXT, Revenue NUMBER);"
      }
    ],
    [
      {
        "question": "What is the number of projects that Sony doesn't manufacture?",
        "query": "SELECT COUNT ( DISTINCT name ) FROM products WHERE name NOT IN ( SELECT t1.name FROM products AS t1 JOIN manufacturers AS t2 ON t1.manufacturer = t2.code WHERE t2.name = 'Sony' )",
        "schema": "CREATE TABLE Products (Manufacturer NUMBER, Code NUMBER, Name TEXT); CREATE TABLE Manufacturers (Headquarter TEXT, Code NUMBER, Name TEXT);"
      },
      {
        "question": "What is the number of products that Creative Labs does manufacture?",
        "query": "SELECT COUNT ( DISTINCT name ) FROM products WHERE name IN ( SELECT t1.name FROM products AS t1 JOIN manufacturers AS t2 ON t1.manufacturer = t2.code WHERE t2.name = 'Creative Labs' )",
        "schema": "CREATE TABLE Manufacturers (Name TEXT, Headquarter TEXT, Code NUMBER); CREATE TABLE Products (Name TEXT, Manufacturer NUMBER, Code NUMBER);"
      }
    ],
    [
      {
        "question": "hi. How many products are there?",
        "query": "SELECT COUNT ( * ) FROM products",
        "schema": "CREATE TABLE Manufacturers (Name TEXT, Code NUMBER); CREATE TABLE Products (Code NUMBER, Name TEXT, Price NUMBER, Manufacturer NUMBER);"
      },
      {
        "question": "excellent. and how much is the cheapest priced product?",
        "query": "SELECT MIN ( price ) FROM products",
        "schema": "CREATE TABLE Products (Code NUMBER, Manufacturer NUMBER, Name TEXT, Price NUMBER); CREATE TABLE Manufacturers (Name TEXT, Code NUMBER);"
      },
      {
        "question": "and can you tell me the name of that product?",
        "query": "SELECT name FROM products WHERE price = ( SELECT MIN ( price ) FROM products )",
        "schema": "CREATE TABLE Manufacturers (Name TEXT, Code NUMBER); CREATE TABLE Products (Manufacturer NUMBER, Name TEXT, Price NUMBER, Code NUMBER);"
      }
    ],
    [
      {
        "question": "How much does the cheapest Hard drive go for? | 240 is the price of the cheapest product whose name is Hard drive | and what of the cheapest memory?",
        "query": "SELECT price FROM products WHERE name = 'Memory' ORDER BY price LIMIT 1",
        "schema": "CREATE TABLE Products (Code NUMBER, Price NUMBER, Name TEXT);"
      },
      {
        "question": "Who is the manufacturer of the zip drive?",
        "query": "SELECT manufacturer FROM products WHERE name = 'ZIP drive'",
        "schema": "CREATE TABLE Manufacturers (Name TEXT, Code NUMBER); CREATE TABLE Products (Manufacturer NUMBER, Price NUMBER, Name TEXT, Code NUMBER);"
      },
      {
        "question": "And who manufactures the Hard drive?",
        "query": "SELECT manufacturer FROM products WHERE name = 'Hard drive'",
        "schema": "CREATE TABLE Products (Name TEXT, Manufacturer NUMBER, Price NUMBER, Code NUMBER); CREATE TABLE Manufacturers (Name TEXT, Code NUMBER);"
      }
    ],
    [
      {
        "question": "where is the Headquarter of Sony?",
        "query": "SELECT headquarter FROM manufacturers WHERE name = \"Sony\"",
        "schema": "CREATE TABLE Manufacturers (Code NUMBER, Founder TEXT, Name TEXT, Headquarter TEXT); CREATE TABLE Products (Manufacturer NUMBER);"
      },
      {
        "question": "how much is Creative Labs revenue?",
        "query": "SELECT revenue FROM manufacturers WHERE name = \"Creative Labs\"",
        "schema": "CREATE TABLE Manufacturers (Code NUMBER, Name TEXT, Revenue NUMBER, Founder TEXT, Headquarter TEXT); CREATE TABLE Products (Manufacturer NUMBER);"
      },
      {
        "question": "what is the name of the manufacturer whose headquarter is in Los Angeles?",
        "query": "SELECT name FROM manufacturers WHERE headquarter = \"Los Angeles\"",
        "schema": "CREATE TABLE Manufacturers (Name TEXT, Revenue NUMBER, Headquarter TEXT, Founder TEXT, Code NUMBER); CREATE TABLE Products (Manufacturer NUMBER);"
      },
      {
        "question": "which manufacturer has the least revenue? | Did   you mean  to get  the name  of manufacturer has the least revenue | name the  manufacturer with the least revenue",
        "query": "SELECT name FROM manufacturers ORDER BY revenue LIMIT 1",
        "schema": "CREATE TABLE Products (Manufacturer NUMBER); CREATE TABLE Manufacturers (Founder TEXT, Name TEXT, Headquarter TEXT, Revenue NUMBER, Code NUMBER);"
      }
    ],
    [
      {
        "question": "Can you show the Name of the Products of Code 1?",
        "query": "SELECT name FROM products WHERE code = 1",
        "schema": "CREATE TABLE Manufacturers (Name TEXT, Code NUMBER); CREATE TABLE Products (Name TEXT, Code NUMBER, Manufacturer NUMBER);"
      },
      {
        "question": "Can you show the Price of the Product Code 1?",
        "query": "SELECT price FROM products WHERE code = 1",
        "schema": "CREATE TABLE Products (Code NUMBER, Price NUMBER, Manufacturer NUMBER, Name TEXT); CREATE TABLE Manufacturers (Code NUMBER, Name TEXT);"
      },
      {
        "question": "Can you show the number of different products that are produced by companies at different headquarter cities?",
        "query": "SELECT COUNT ( DISTINCT t1.name ) , t2.headquarter FROM products AS t1 JOIN manufacturers AS t2 ON t1.manufacturer = t2.code GROUP BY t2.headquarter",
        "schema": "CREATE TABLE Manufacturers (Headquarter TEXT, Code NUMBER, Name TEXT); CREATE TABLE Products (Price NUMBER, Code NUMBER, Name TEXT, Manufacturer NUMBER);"
      }
    ]
  ],
  "game_injury": [
    [
      {
        "question": "what are all games are presented on the table | What kind of infromation for the games do you want ? | i want to how many teams on the game",
        "query": "SELECT COUNT ( DISTINCT home_team ) FROM game",
        "schema": "CREATE TABLE stadium (id NUMBER); CREATE TABLE game (Home_team TEXT, id NUMBER, stadium_id NUMBER, Competition TEXT, Away_team TEXT);"
      },
      {
        "question": "which player are played in highest number of matches",
        "query": "SELECT player FROM injury_accident ORDER BY number_of_matches DESC LIMIT 1",
        "schema": "CREATE TABLE stadium (id NUMBER); CREATE TABLE game (id NUMBER, Home_team TEXT, stadium_id NUMBER, Competition TEXT, Away_team TEXT); CREATE TABLE injury_accident (Player TEXT, Number_of_matches TEXT, game_id NUMBER);"
      }
    ],
    [
      {
        "question": "How many stadiums are there?",
        "query": "SELECT COUNT ( * ) FROM stadium",
        "schema": "CREATE TABLE game (id NUMBER, stadium_id NUMBER); CREATE TABLE stadium (Home_Games NUMBER, Total_Attendance NUMBER, id NUMBER, Average_Attendance NUMBER, Capacity_Percentage NUMBER, name TEXT);"
      },
      {
        "question": "How many games has each stadium held?",
        "query": "SELECT t1.id , COUNT ( * ) FROM stadium AS t1 JOIN game AS t2 ON t1.id = t2.stadium_id GROUP BY t1.id",
        "schema": "CREATE TABLE game (stadium_id NUMBER, id NUMBER); CREATE TABLE stadium (Average_Attendance NUMBER, Total_Attendance NUMBER, id NUMBER, name TEXT, Home_Games NUMBER, Capacity_Percentage NUMBER);"
      },
      {
        "question": "What is the total attendance of each stadium?",
        "query": "SELECT t1.id , SUM ( total_attendance ) FROM stadium AS t1 JOIN game AS t2 ON t1.id = t2.stadium_id GROUP BY t1.id",
        "schema": "CREATE TABLE stadium (id NUMBER, name TEXT, Home_Games NUMBER, Capacity_Percentage NUMBER, Average_Attendance NUMBER, Total_Attendance NUMBER); CREATE TABLE game (stadium_id NUMBER, id NUMBER);"
      }
    ],
    [
      {
        "question": "How many games has each stadium held?",
        "query": "SELECT t1.id , COUNT ( * ) FROM stadium AS t1 JOIN game AS t2 ON t1.id = t2.stadium_id GROUP BY t1.id",
        "schema": "CREATE TABLE stadium (Average_Attendance NUMBER, Total_Attendance NUMBER, id NUMBER, Home_Games NUMBER, name TEXT); CREATE TABLE game (id NUMBER, stadium_id NUMBER);"
      },
      {
        "question": "So how many total games were there?",
        "query": "SELECT COUNT ( * ) FROM game",
        "schema": "CREATE TABLE game (stadium_id NUMBER, id NUMBER); CREATE TABLE stadium (Home_Games NUMBER, Total_Attendance NUMBER, id NUMBER, Average_Attendance NUMBER, name TEXT);"
      }
    ],
    [
      {
        "question": "what is the average attendance of Cowboys Stadium?",
        "query": "SELECT average_attendance FROM stadium WHERE name = \"Cowboys Stadium\"",
        "schema": "CREATE TABLE game (id NUMBER, stadium_id NUMBER); CREATE TABLE stadium (Home_Games NUMBER, Average_Attendance NUMBER, id NUMBER, name TEXT, Total_Attendance NUMBER, Capacity_Percentage NUMBER);"
      },
      {
        "question": "give the total  attendance Cowboys Stadium",
        "query": "SELECT total_attendance FROM stadium WHERE name = \"Cowboys Stadium\"",
        "schema": "CREATE TABLE game (stadium_id NUMBER, id NUMBER); CREATE TABLE stadium (Capacity_Percentage NUMBER, Home_Games NUMBER, Total_Attendance NUMBER, Average_Attendance NUMBER, id NUMBER, name TEXT);"
      },
      {
        "question": "what is the capacity percentage of New Meadowlands Stadium",
        "query": "SELECT capacity_percentage FROM stadium WHERE name = \"New Meadowlands Stadium\"",
        "schema": "CREATE TABLE stadium (name TEXT, Home_Games NUMBER, Average_Attendance NUMBER, Capacity_Percentage NUMBER, id NUMBER, Total_Attendance NUMBER); CREATE TABLE game (stadium_id NUMBER, id NUMBER);"
      }
    ],
    [
      {
        "question": "how many game are there",
        "query": "SELECT COUNT ( * ) FROM game",
        "schema": "CREATE TABLE injury_accident (Player TEXT, game_id NUMBER); CREATE TABLE game (id NUMBER, stadium_id NUMBER, Season NUMBER, Competition TEXT); CREATE TABLE stadium (id NUMBER, Home_Games NUMBER);"
      },
      {
        "question": "What injury had maicon | Maicon had the injury Knee problem. | how may total attendance have fedexfield",
        "query": "SELECT total_attendance FROM stadium WHERE name = \"FedExField\"",
        "schema": "CREATE TABLE injury_accident (Injury TEXT, Number_of_matches TEXT, id NUMBER, Player TEXT, game_id NUMBER); CREATE TABLE game (id NUMBER, Competition TEXT, stadium_id NUMBER, Season NUMBER); CREATE TABLE stadium (id NUMBER, Average_Attendance NUMBER, name TEXT, Home_Games NUMBER, Total_Attendance NUMBER);"
      }
    ],
    [
      {
        "question": "how many stadium are presented on the table",
        "query": "SELECT COUNT ( * ) FROM stadium",
        "schema": "CREATE TABLE game (stadium_id NUMBER, id NUMBER); CREATE TABLE stadium (name TEXT, Average_Attendance NUMBER, id NUMBER, Home_Games NUMBER);"
      },
      {
        "question": "list out the stadium names",
        "query": "SELECT name FROM stadium",
        "schema": "CREATE TABLE game (stadium_id NUMBER, id NUMBER); CREATE TABLE stadium (Home_Games NUMBER, id NUMBER, name TEXT, Average_Attendance NUMBER);"
      },
      {
        "question": "what is the average attendance of Cowboys Stadium",
        "query": "SELECT average_attendance FROM stadium WHERE name = \"Cowboys Stadium\"",
        "schema": "CREATE TABLE stadium (name TEXT, Average_Attendance NUMBER, Total_Attendance NUMBER, id NUMBER, Home_Games NUMBER); CREATE TABLE game (id NUMBER, stadium_id NUMBER);"
      },
      {
        "question": "what is the capacity percentage of FedExField",
        "query": "SELECT capacity_percentage FROM stadium WHERE name = \"FedExField\"",
        "schema": "CREATE TABLE stadium (Total_Attendance NUMBER, Home_Games NUMBER, name TEXT, Capacity_Percentage NUMBER, Average_Attendance NUMBER, id NUMBER); CREATE TABLE game (id NUMBER, stadium_id NUMBER);"
      }
    ],
    [
      {
        "question": "Hi! May i ask how many total games were played?",
        "query": "SELECT COUNT ( * ) FROM game",
        "schema": "CREATE TABLE stadium (Home_Games NUMBER, Total_Attendance NUMBER, id NUMBER); CREATE TABLE injury_accident (Number_of_matches TEXT, game_id NUMBER); CREATE TABLE game (id NUMBER, Competition TEXT, stadium_id NUMBER, Score TEXT);"
      },
      {
        "question": "Okay. How many games were without injuries?",
        "query": "SELECT COUNT ( * ) FROM game WHERE id NOT IN ( SELECT game_id FROM injury_accident )",
        "schema": "CREATE TABLE stadium (Total_Attendance NUMBER, Home_Games NUMBER, id NUMBER); CREATE TABLE injury_accident (game_id NUMBER, Number_of_matches TEXT, id NUMBER, Player TEXT, Injury TEXT); CREATE TABLE game (Score TEXT, stadium_id NUMBER, Competition TEXT, id NUMBER);"
      },
      {
        "question": "How many were with injuries?",
        "query": "SELECT COUNT ( * ) FROM game WHERE id IN ( SELECT game_id FROM injury_accident )",
        "schema": "CREATE TABLE game (Score TEXT, id NUMBER, Competition TEXT, stadium_id NUMBER); CREATE TABLE stadium (Home_Games NUMBER, Total_Attendance NUMBER, id NUMBER); CREATE TABLE injury_accident (Injury TEXT, Player TEXT, game_id NUMBER, Number_of_matches TEXT, id NUMBER);"
      },
      {
        "question": "Okay that's fine. Do you know the stadium ID for games without injuries?",
        "query": "SELECT stadium_id FROM game WHERE id NOT IN ( SELECT game_id FROM injury_accident )",
        "schema": "CREATE TABLE stadium (Total_Attendance NUMBER, id NUMBER, Home_Games NUMBER, name TEXT); CREATE TABLE injury_accident (id NUMBER, game_id NUMBER, Injury TEXT, Player TEXT, Number_of_matches TEXT); CREATE TABLE game (Competition TEXT, stadium_id NUMBER, Score TEXT, id NUMBER);"
      }
    ],
    [
      {
        "question": "What are the ids, scores, and dates of the games which caused at most two injury accidents?",
        "query": "SELECT t1.id , t1.score , t1.date FROM game AS t1 JOIN injury_accident AS t2 ON t2.game_id = t1.id GROUP BY t1.id HAVING COUNT ( * ) < = 2",
        "schema": "CREATE TABLE injury_accident (Player TEXT, Number_of_matches TEXT, Injury TEXT, game_id NUMBER, id NUMBER); CREATE TABLE stadium (id NUMBER); CREATE TABLE game (Score TEXT, id NUMBER, Date TEXT);"
      },
      {
        "question": "How many competitions in this table? | Did you mean the number of different competitions? | Yes.",
        "query": "SELECT COUNT ( DISTINCT competition ) FROM game",
        "schema": "CREATE TABLE stadium (id NUMBER); CREATE TABLE game (Score TEXT, Competition TEXT, id NUMBER, Date TEXT); CREATE TABLE injury_accident (Player TEXT, game_id NUMBER, Number_of_matches TEXT, id NUMBER, Injury TEXT);"
      },
      {
        "question": "How many number of different home teams?",
        "query": "SELECT COUNT ( DISTINCT home_team ) FROM game",
        "schema": "CREATE TABLE stadium (Home_Games NUMBER, id NUMBER); CREATE TABLE injury_accident (Injury TEXT, Player TEXT, id NUMBER, game_id NUMBER, Number_of_matches TEXT); CREATE TABLE game (Away_team TEXT, Date TEXT, Score TEXT, Home_team TEXT, id NUMBER, stadium_id NUMBER, Competition TEXT);"
      }
    ],
    [
      {
        "question": "After season 2010 how many different kinds of injuries were there?",
        "query": "SELECT COUNT ( DISTINCT t1.injury ) FROM injury_accident AS t1 JOIN game AS t2 ON t1.game_id = t2.id WHERE t2.season > 2010",
        "schema": "CREATE TABLE game (Season NUMBER, id NUMBER); CREATE TABLE injury_accident (Injury TEXT, Number_of_matches TEXT, game_id NUMBER, Source TEXT, Player TEXT, id NUMBER); CREATE TABLE stadium (id NUMBER);"
      },
      {
        "question": "What player received the injury? | You mean all the players having injuries? | What player received the Hamstring muscle strain in his left thigh?",
        "query": "SELECT player FROM injury_accident WHERE injury = \"Hamstring muscle strain in his left thigh\"",
        "schema": "CREATE TABLE stadium (id NUMBER); CREATE TABLE injury_accident (Source TEXT, Injury TEXT, Number_of_matches TEXT, game_id NUMBER, Player TEXT, id NUMBER); CREATE TABLE game (Season NUMBER, id NUMBER);"
      }
    ],
    [
      {
        "question": "How many injury accidents are there in total?",
        "query": "SELECT COUNT ( * ) FROM injury_accident",
        "schema": "CREATE TABLE injury_accident (game_id NUMBER, Injury TEXT, Source TEXT, id NUMBER, Player TEXT, Number_of_matches TEXT); CREATE TABLE game (id NUMBER); CREATE TABLE stadium (id NUMBER);"
      },
      {
        "question": "Can you list them with the date  of the game and the name of the player who got injured?",
        "query": "SELECT t1.date , t2.player FROM game AS t1 JOIN injury_accident AS t2 ON t1.id = t2.game_id",
        "schema": "CREATE TABLE injury_accident (Player TEXT, Injury TEXT, Source TEXT, game_id NUMBER, Number_of_matches TEXT, id NUMBER); CREATE TABLE game (id NUMBER, Date TEXT); CREATE TABLE stadium (id NUMBER);"
      },
      {
        "question": "Can you please also sort thw result by decending order of game seasons?",
        "query": "SELECT t1.date , t2.player FROM game AS t1 JOIN injury_accident AS t2 ON t1.id = t2.game_id ORDER BY t1.season DESC",
        "schema": "CREATE TABLE stadium (id NUMBER); CREATE TABLE injury_accident (game_id NUMBER, Source TEXT, Injury TEXT, Number_of_matches TEXT, id NUMBER, Player TEXT); CREATE TABLE game (Season NUMBER, Competition TEXT, Date TEXT, id NUMBER);"
      }
    ],
    [
      {
        "question": "What game id did the player Walter Samuel get injured during, please?",
        "query": "SELECT game_id FROM injury_accident WHERE player = 'Walter Samuel'",
        "schema": "CREATE TABLE injury_accident (Injury TEXT, game_id NUMBER, Player TEXT, id NUMBER); CREATE TABLE game (id NUMBER, stadium_id NUMBER); CREATE TABLE stadium (id NUMBER);"
      }
    ]
  ],
  "document_management": [
    [
      {
        "question": "Can you give me a list of documents that don't have any images? | Do you want document code? | I'd like both the document code and document name, please.",
        "query": "SELECT document_name, document_code FROM documents EXCEPT SELECT t1.document_name, t1.document_code FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code = t2.document_code JOIN document_sections_images AS t3 ON t2.section_id = t3.section_id",
        "schema": "CREATE TABLE Documents (document_type_code TEXT, document_name TEXT, document_code TEXT); CREATE TABLE Document_Sections (document_code TEXT, section_title TEXT, section_id NUMBER); CREATE TABLE Users (user_name TEXT); CREATE TABLE Document_Sections_Images (section_id NUMBER, image_id NUMBER); CREATE TABLE Images (image_name TEXT, image_id NUMBER);"
      },
      {
        "question": "That's great. Can you tell me the total number of documents that do have images?",
        "query": "SELECT COUNT ( * ) FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code = t2.document_code JOIN document_sections_images AS t3 ON t2.section_id = t3.section_id",
        "schema": "CREATE TABLE Images (image_id NUMBER, image_name TEXT); CREATE TABLE Document_Sections (section_id NUMBER, section_title TEXT, section_code TEXT, document_code TEXT); CREATE TABLE Documents (document_type_code TEXT, document_name TEXT, document_code TEXT); CREATE TABLE Users (user_name TEXT); CREATE TABLE Document_Sections_Images (section_id NUMBER, image_id NUMBER);"
      },
      {
        "question": "What types of documents are these?",
        "query": "SELECT document_type_code FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code = t2.document_code JOIN document_sections_images AS t3 ON t2.section_id = t3.section_id",
        "schema": "CREATE TABLE Users (user_name TEXT); CREATE TABLE Document_Sections (section_title TEXT, section_id NUMBER, section_code TEXT, document_code TEXT); CREATE TABLE Document_Sections_Images (section_id NUMBER, image_id NUMBER); CREATE TABLE Documents (document_code TEXT, document_type_code TEXT, document_name TEXT); CREATE TABLE Images (image_id NUMBER, image_name TEXT);"
      }
    ],
    [
      {
        "question": "Show the Document code for document type code Book?",
        "query": "SELECT document_code FROM documents WHERE document_type_code = 'Book'",
        "schema": "CREATE TABLE Users (user_id NUMBER); CREATE TABLE Document_Sections (document_code TEXT); CREATE TABLE Documents (document_type_code TEXT, document_code TEXT, document_name TEXT);"
      },
      {
        "question": "Show the name of the document that has been accessed the greatest number of times?",
        "query": "SELECT document_name FROM documents ORDER BY access_count DESC LIMIT 1",
        "schema": "CREATE TABLE Document_Sections (document_code TEXT, section_title TEXT, section_id NUMBER); CREATE TABLE Documents (document_type_code TEXT, document_name TEXT, access_count NUMBER, document_code TEXT); CREATE TABLE Users (user_id NUMBER);"
      },
      {
        "question": "Show the name of the documents and the count of how many times each has been accessed?",
        "query": "SELECT document_name , access_count FROM documents ORDER BY access_count DESC LIMIT 1",
        "schema": "CREATE TABLE Document_Sections (section_id NUMBER, section_title TEXT, document_code TEXT); CREATE TABLE Documents (access_count NUMBER, document_type_code TEXT, document_name TEXT, document_code TEXT); CREATE TABLE Users (user_id NUMBER);"
      }
    ],
    [
      {
        "question": "Hello! How many documents are there total?",
        "query": "SELECT COUNT ( document_name ) FROM documents",
        "schema": "CREATE TABLE Images (image_id NUMBER); CREATE TABLE Document_Functional_Areas (document_code TEXT); CREATE TABLE Documents (access_count NUMBER, document_structure_code TEXT, document_code TEXT, document_name TEXT, document_type_code TEXT); CREATE TABLE Document_Structures (document_structure_code TEXT); CREATE TABLE Document_Sections (section_id NUMBER, document_code TEXT, section_code TEXT); CREATE TABLE Users (user_id NUMBER, user_name TEXT);"
      },
      {
        "question": "Perfect, thanks for that. Now, how many documents don't have images?",
        "query": "SELECT COUNT ( * ) FROM ( SELECT document_name FROM documents EXCEPT SELECT t1.document_name FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code = t2.document_code JOIN document_sections_images AS t3 ON t2.section_id = t3.section_id )",
        "schema": "CREATE TABLE Documents (document_code TEXT, document_name TEXT, document_type_code TEXT, access_count NUMBER, document_structure_code TEXT); CREATE TABLE Document_Sections_Images (image_id NUMBER, section_id NUMBER); CREATE TABLE Document_Functional_Areas (document_code TEXT); CREATE TABLE Document_Structures (document_structure_code TEXT); CREATE TABLE Users (user_id NUMBER, user_name TEXT); CREATE TABLE Document_Sections (section_id NUMBER, section_title TEXT, document_code TEXT, section_code TEXT); CREATE TABLE Images (image_name TEXT, image_alt_text TEXT, image_id NUMBER);"
      },
      {
        "question": "Can you give me the names of those documents?",
        "query": "SELECT document_name FROM documents EXCEPT SELECT t1.document_name FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code = t2.document_code JOIN document_sections_images AS t3 ON t2.section_id = t3.section_id",
        "schema": "CREATE TABLE Document_Sections_Images (image_id NUMBER, section_id NUMBER); CREATE TABLE Images (image_id NUMBER, image_name TEXT, image_alt_text TEXT); CREATE TABLE Document_Sections (section_title TEXT, section_id NUMBER, document_code TEXT, section_code TEXT); CREATE TABLE Documents (document_name TEXT, document_structure_code TEXT, document_type_code TEXT, access_count NUMBER, document_code TEXT); CREATE TABLE Users (user_name TEXT, user_id NUMBER); CREATE TABLE Document_Structures (document_structure_code TEXT); CREATE TABLE Document_Functional_Areas (document_code TEXT);"
      }
    ],
    [
      {
        "question": "can you please list the document types with the count of document structure code?",
        "query": "SELECT COUNT ( document_structure_code ) , document_type_code FROM documents GROUP BY document_type_code",
        "schema": "CREATE TABLE Documents (document_type_code TEXT, document_structure_code TEXT, document_code TEXT); CREATE TABLE Document_Sections (document_code TEXT); CREATE TABLE Users (user_id NUMBER); CREATE TABLE Document_Structures (document_structure_description TEXT, document_structure_code TEXT);"
      },
      {
        "question": "can you filter out the results where count less than 4 and only show more than 4",
        "query": "SELECT COUNT ( document_structure_code ) , document_type_code FROM documents GROUP BY document_type_code HAVING COUNT ( * ) > 4",
        "schema": "CREATE TABLE Users (user_id NUMBER); CREATE TABLE Document_Structures (document_structure_code TEXT, document_structure_description TEXT); CREATE TABLE Document_Sections (document_code TEXT); CREATE TABLE Documents (document_type_code TEXT, document_code TEXT, document_structure_code TEXT);"
      }
    ],
    [
      {
        "question": "What documents types have more than 2 corresponding documents?",
        "query": "SELECT document_type_code FROM documents GROUP BY document_type_code HAVING COUNT ( * ) > 2",
        "schema": "CREATE TABLE Users (user_id NUMBER); CREATE TABLE Document_Sections (document_code TEXT); CREATE TABLE Documents (document_name TEXT, document_code TEXT, document_type_code TEXT);"
      },
      {
        "question": "What is the document type for document name Learning English?",
        "query": "SELECT document_type_code FROM documents WHERE document_name = \"Learning English\"",
        "schema": "CREATE TABLE Documents (document_code TEXT, document_type_code TEXT, document_name TEXT); CREATE TABLE Document_Sections (document_code TEXT); CREATE TABLE Users (user_id NUMBER);"
      },
      {
        "question": "What documents types have more than 2 corresponding documents?",
        "query": "SELECT document_type_code FROM documents GROUP BY document_type_code HAVING COUNT ( * ) > 2",
        "schema": "CREATE TABLE Documents (document_type_code TEXT, document_code TEXT, document_name TEXT); CREATE TABLE Document_Sections (document_code TEXT); CREATE TABLE Users (user_id NUMBER);"
      },
      {
        "question": "List all the document name?",
        "query": "SELECT document_name FROM documents",
        "schema": "CREATE TABLE Document_Sections (document_code TEXT); CREATE TABLE Documents (document_type_code TEXT, document_code TEXT, document_name TEXT); CREATE TABLE Users (user_id NUMBER);"
      }
    ],
    [
      {
        "question": "hi, can you list me the user name and the password of the most popular role user?",
        "query": "SELECT user_name , password FROM users GROUP BY role_code ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Users (password TEXT, user_name TEXT, role_code TEXT, user_id NUMBER); CREATE TABLE Roles (role_code TEXT);"
      },
      {
        "question": "great, how many popular role users are?",
        "query": "SELECT COUNT ( * ) FROM users GROUP BY role_code ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Users (role_code TEXT, user_name TEXT, user_id NUMBER, password TEXT); CREATE TABLE Roles (role_code TEXT);"
      },
      {
        "question": "Can you list me all the username of users with the most popular role?",
        "query": "SELECT user_name FROM users GROUP BY role_code ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Roles (role_code TEXT); CREATE TABLE Users (password TEXT, user_id NUMBER, role_code TEXT, user_name TEXT);"
      },
      {
        "question": "Ok,  show me the username of an unpopular user.",
        "query": "SELECT user_name FROM users WHERE user_name NOT IN ( SELECT user_name FROM users GROUP BY role_code ORDER BY COUNT ( * ) DESC LIMIT 1 )",
        "schema": "CREATE TABLE Roles (role_code TEXT); CREATE TABLE Users (user_name TEXT, user_id NUMBER, password TEXT, role_code TEXT);"
      }
    ],
    [
      {
        "question": "Can you show me how many documents there are in total?",
        "query": "SELECT COUNT ( * ) FROM documents",
        "schema": "CREATE TABLE Document_Sections_Images (section_id NUMBER); CREATE TABLE Document_Structures (document_structure_code TEXT); CREATE TABLE Document_Functional_Areas (document_code TEXT); CREATE TABLE Users (user_name TEXT, user_id NUMBER); CREATE TABLE Documents (document_code TEXT, document_name TEXT, access_count NUMBER, document_type_code TEXT, document_structure_code TEXT); CREATE TABLE Document_Sections (section_code TEXT, document_code TEXT, section_id NUMBER, section_title TEXT);"
      },
      {
        "question": "What's the name of the document that was accessed the least amount of times?",
        "query": "SELECT document_name FROM documents ORDER BY access_count ASC LIMIT 1",
        "schema": "CREATE TABLE Documents (access_count NUMBER, document_name TEXT, document_structure_code TEXT, document_code TEXT, document_type_code TEXT); CREATE TABLE Document_Functional_Areas (document_code TEXT); CREATE TABLE Users (user_name TEXT, user_id NUMBER); CREATE TABLE Document_Structures (document_structure_code TEXT); CREATE TABLE Document_Sections (section_title TEXT, document_code TEXT, section_code TEXT, section_id NUMBER); CREATE TABLE Document_Sections_Images (section_id NUMBER);"
      },
      {
        "question": "How about the name of the document that was accessed the most amount of times?",
        "query": "SELECT document_name FROM documents ORDER BY access_count DESC LIMIT 1",
        "schema": "CREATE TABLE Users (user_id NUMBER, user_name TEXT); CREATE TABLE Documents (document_type_code TEXT, document_name TEXT, document_structure_code TEXT, access_count NUMBER, document_code TEXT); CREATE TABLE Document_Structures (document_structure_code TEXT); CREATE TABLE Document_Sections (section_code TEXT, document_code TEXT, section_id NUMBER, section_title TEXT); CREATE TABLE Document_Functional_Areas (document_code TEXT); CREATE TABLE Document_Sections_Images (section_id NUMBER);"
      },
      {
        "question": "How many times has that document been accessed?",
        "query": "SELECT access_count FROM documents ORDER BY access_count DESC LIMIT 1",
        "schema": "CREATE TABLE Users (user_name TEXT, user_id NUMBER); CREATE TABLE Documents (access_count NUMBER, document_code TEXT, document_name TEXT, document_type_code TEXT, document_structure_code TEXT); CREATE TABLE Document_Functional_Areas (document_code TEXT); CREATE TABLE Document_Structures (document_structure_code TEXT); CREATE TABLE Document_Sections_Images (section_id NUMBER); CREATE TABLE Document_Sections (document_code TEXT, section_title TEXT, section_code TEXT, section_id NUMBER);"
      },
      {
        "question": "What type of document is that?",
        "query": "SELECT document_type_code FROM documents ORDER BY access_count DESC LIMIT 1",
        "schema": "CREATE TABLE Documents (document_name TEXT, document_code TEXT, document_structure_code TEXT, document_type_code TEXT, access_count NUMBER); CREATE TABLE Users (user_id NUMBER, user_name TEXT); CREATE TABLE Document_Sections_Images (section_id NUMBER); CREATE TABLE Document_Structures (document_structure_code TEXT); CREATE TABLE Document_Functional_Areas (document_code TEXT); CREATE TABLE Document_Sections (section_title TEXT, section_code TEXT, section_id NUMBER, document_code TEXT);"
      }
    ],
    [
      {
        "question": "Find the total access count of all documents in the most popular document type.",
        "query": "SELECT SUM ( access_count ) FROM documents GROUP BY document_type_code ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Users (user_id NUMBER); CREATE TABLE Documents (document_code TEXT, access_count NUMBER, document_type_code TEXT, document_name TEXT);"
      },
      {
        "question": "Show me the access count for books?",
        "query": "SELECT access_count FROM documents WHERE document_type_code = 'Book'",
        "schema": "CREATE TABLE Users (user_id NUMBER); CREATE TABLE Documents (document_code TEXT, document_name TEXT, document_type_code TEXT, access_count NUMBER);"
      },
      {
        "question": "How about in paper?",
        "query": "SELECT access_count FROM documents WHERE document_type_code = 'Paper'",
        "schema": "CREATE TABLE Documents (document_name TEXT, document_code TEXT, access_count NUMBER, document_type_code TEXT); CREATE TABLE Users (user_id NUMBER);"
      }
    ],
    [
      {
        "question": "how many Document Sections on the table?",
        "query": "SELECT COUNT ( * ) FROM document_sections",
        "schema": "CREATE TABLE Document_Sections_Images (image_id NUMBER, section_id NUMBER); CREATE TABLE Images (image_id NUMBER); CREATE TABLE Documents (document_code TEXT, document_type_code TEXT); CREATE TABLE Document_Sections (section_id NUMBER, document_code TEXT, section_sequence NUMBER, section_code TEXT, section_title TEXT); CREATE TABLE Users (user_id NUMBER);"
      },
      {
        "question": "what are highest access count on the table?",
        "query": "SELECT access_count FROM documents ORDER BY access_count DESC LIMIT 1",
        "schema": "CREATE TABLE Document_Sections_Images (image_id NUMBER, section_id NUMBER); CREATE TABLE Documents (document_code TEXT, document_type_code TEXT, access_count NUMBER); CREATE TABLE Images (image_id NUMBER); CREATE TABLE Document_Sections (section_title TEXT, document_code TEXT, section_id NUMBER, section_code TEXT, section_sequence NUMBER); CREATE TABLE Users (user_id NUMBER);"
      },
      {
        "question": "how many type of section title on the table?",
        "query": "SELECT COUNT ( DISTINCT section_title ) FROM document_sections",
        "schema": "CREATE TABLE Documents (access_count NUMBER, document_code TEXT, document_type_code TEXT); CREATE TABLE Document_Sections (section_sequence NUMBER, section_title TEXT, section_code TEXT, section_id NUMBER, document_code TEXT); CREATE TABLE Images (image_id NUMBER); CREATE TABLE Users (user_id NUMBER); CREATE TABLE Document_Sections_Images (image_id NUMBER, section_id NUMBER);"
      }
    ],
    [
      {
        "question": "How many section titles are there for the document \"David CV\"?",
        "query": "SELECT COUNT ( t2.section_title ) FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code = t2.document_code WHERE t1.document_name = \"David CV\"",
        "schema": "CREATE TABLE Document_Sections_Images (section_id NUMBER); CREATE TABLE Documents (document_name TEXT, document_type_code TEXT, document_code TEXT); CREATE TABLE Users (user_name TEXT); CREATE TABLE Document_Sections (document_code TEXT, section_id NUMBER, section_sequence NUMBER, section_code TEXT, section_title TEXT);"
      },
      {
        "question": "Please list the section titles for the document \"David CV\"",
        "query": "SELECT t2.section_title FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code = t2.document_code WHERE t1.document_name = \"David CV\"",
        "schema": "CREATE TABLE Document_Sections (section_id NUMBER, section_code TEXT, section_sequence NUMBER, document_code TEXT, section_title TEXT); CREATE TABLE Document_Sections_Images (section_id NUMBER); CREATE TABLE Users (user_name TEXT); CREATE TABLE Documents (document_name TEXT, document_type_code TEXT, document_code TEXT);"
      },
      {
        "question": "what is the section code for the section title \"after\" for the document \"David CV\"?",
        "query": "SELECT t2.section_code FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code = t2.document_code WHERE t1.document_name = \"David CV\" AND t2.section_title = \"after\"",
        "schema": "CREATE TABLE Users (user_name TEXT); CREATE TABLE Documents (document_code TEXT, document_type_code TEXT, document_name TEXT); CREATE TABLE Document_Sections_Images (section_id NUMBER); CREATE TABLE Document_Sections (section_id NUMBER, document_code TEXT, section_sequence NUMBER, section_title TEXT, section_code TEXT);"
      },
      {
        "question": "what is the document code for the section title \"after\" for the document \"David CV\"?",
        "query": "SELECT t2.document_code FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code = t2.document_code WHERE t1.document_name = \"David CV\" AND t2.section_title = \"after\"",
        "schema": "CREATE TABLE Documents (document_type_code TEXT, document_code TEXT, document_name TEXT); CREATE TABLE Users (user_name TEXT); CREATE TABLE Document_Sections (section_title TEXT, document_code TEXT, section_code TEXT, section_sequence NUMBER, section_id NUMBER); CREATE TABLE Document_Sections_Images (section_id NUMBER);"
      }
    ],
    [
      {
        "question": "Which users have the most popular role? | Do you mean the user name of the users who have the most popular role? | Yes, can you list all the usernames and passwords of the users who have the most popular role?",
        "query": "SELECT user_name , password FROM users GROUP BY role_code ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Roles (role_code TEXT); CREATE TABLE Users (user_id NUMBER, user_name TEXT, password TEXT, role_code TEXT);"
      },
      {
        "question": "Can you also tell me the role code?",
        "query": "SELECT role_code FROM users GROUP BY role_code ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Users (user_name TEXT, user_id NUMBER, password TEXT, role_code TEXT); CREATE TABLE Roles (role_code TEXT);"
      },
      {
        "question": "How many times has this user logged in?",
        "query": "SELECT user_login FROM users GROUP BY role_code ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Users (user_name TEXT, password TEXT, user_id NUMBER, user_login TEXT, role_code TEXT); CREATE TABLE Roles (role_code TEXT);"
      }
    ],
    [
      {
        "question": "Hi there!  Can you show me a list of all of the different document names and the associated access count for each of them?",
        "query": "SELECT document_name, access_count FROM documents",
        "schema": "CREATE TABLE Users (user_id NUMBER, user_name TEXT); CREATE TABLE Document_Sections (section_title TEXT, document_code TEXT); CREATE TABLE Documents (document_code TEXT, document_type_code TEXT, access_count NUMBER, document_name TEXT);"
      },
      {
        "question": "Wonderful!  Can you show me the associated structure code for each of those document names?",
        "query": "SELECT document_structure_code FROM documents",
        "schema": "CREATE TABLE Document_Structures (document_structure_code TEXT); CREATE TABLE Document_Sections (document_code TEXT, section_title TEXT); CREATE TABLE Documents (document_name TEXT, document_code TEXT, access_count NUMBER, document_type_code TEXT, document_structure_code TEXT); CREATE TABLE Users (user_name TEXT, user_id NUMBER);"
      },
      {
        "question": "Can you filter that list to show the document name and document structure code with the fewest document structure code entries, or in other words, the least popular structure?",
        "query": "SELECT document_name,document_structure_code FROM documents WHERE document_structure_code = ( SELECT MIN ( document_structure_code ) FROM documents )",
        "schema": "CREATE TABLE Users (user_name TEXT, user_id NUMBER); CREATE TABLE Document_Structures (document_structure_code TEXT); CREATE TABLE Document_Sections (section_title TEXT, document_code TEXT); CREATE TABLE Documents (document_code TEXT, document_name TEXT, access_count NUMBER, document_type_code TEXT, document_structure_code TEXT);"
      },
      {
        "question": "Very nice!  Finally, could you update this list to show the average access count for these two documents?",
        "query": "SELECT AVG ( access_count ) FROM documents WHERE document_structure_code = ( SELECT MIN ( document_structure_code ) FROM documents ) GROUP BY document_name",
        "schema": "CREATE TABLE Documents (document_type_code TEXT, document_code TEXT, access_count NUMBER, document_name TEXT, document_structure_code TEXT); CREATE TABLE Users (user_name TEXT, user_id NUMBER); CREATE TABLE Document_Sections (section_title TEXT, document_code TEXT); CREATE TABLE Document_Structures (document_structure_code TEXT);"
      }
    ],
    [
      {
        "question": "Show me the documents | did you mean all the info of the documents? | no, the name of the documents",
        "query": "SELECT document_name FROM documents",
        "schema": "CREATE TABLE Documents (document_type_code TEXT, document_code TEXT, document_name TEXT); CREATE TABLE Document_Sections (section_title TEXT, document_code TEXT); CREATE TABLE Users (user_name TEXT, user_id NUMBER);"
      },
      {
        "question": "Show me the names containing cv",
        "query": "SELECT document_name FROM documents WHERE document_name LIKE \"%CV%\"",
        "schema": "CREATE TABLE Documents (document_code TEXT, document_name TEXT, document_type_code TEXT); CREATE TABLE Document_Sections (section_title TEXT, document_code TEXT); CREATE TABLE Users (user_id NUMBER, user_name TEXT);"
      }
    ]
  ],
  "movie_1": [
    [
      {
        "question": "What is the lowest and highest rating star?",
        "query": "SELECT MAX ( stars ) , MIN ( stars ) FROM rating",
        "schema": "CREATE TABLE Reviewer (rID NUMBER); CREATE TABLE Movie (mID NUMBER); CREATE TABLE Rating (mID NUMBER, rID NUMBER, stars NUMBER);"
      },
      {
        "question": "What is the movie id and rating date of the movie with 5 stars?",
        "query": "SELECT mid , ratingdate FROM rating WHERE stars = 5",
        "schema": "CREATE TABLE Movie (mID NUMBER, year NUMBER, title TEXT); CREATE TABLE Rating (mID NUMBER, rID NUMBER, ratingDate TIME, stars NUMBER); CREATE TABLE Reviewer (rID NUMBER);"
      },
      {
        "question": "Now show me the movie id and rating dates of the movie with 2 stars?",
        "query": "SELECT mid , ratingdate FROM rating WHERE stars = 2",
        "schema": "CREATE TABLE Movie (title TEXT, year NUMBER, mID NUMBER); CREATE TABLE Rating (ratingDate TIME, stars NUMBER, mID NUMBER, rID NUMBER); CREATE TABLE Reviewer (rID NUMBER);"
      },
      {
        "question": "What is the earliest rating date?",
        "query": "SELECT ratingdate FROM rating WHERE ratingdate ! = 'NULL' ORDER BY ratingdate LIMIT 1",
        "schema": "CREATE TABLE Rating (stars NUMBER, ratingDate TIME, mID NUMBER, rID NUMBER); CREATE TABLE Reviewer (rID NUMBER); CREATE TABLE Movie (title TEXT, mID NUMBER, year NUMBER);"
      },
      {
        "question": "What is the most recent rating date?",
        "query": "SELECT ratingdate FROM rating ORDER BY ratingdate DESC LIMIT 1",
        "schema": "CREATE TABLE Movie (year NUMBER, mID NUMBER, title TEXT); CREATE TABLE Reviewer (rID NUMBER); CREATE TABLE Rating (rID NUMBER, stars NUMBER, ratingDate TIME, mID NUMBER);"
      }
    ],
    [
      {
        "question": "Hello, how many ratings have the same reviewer and director name?",
        "query": "SELECT COUNT ( * ) FROM rating AS t1 JOIN movie AS t2 ON t1.mid = t2.mid JOIN reviewer AS t3 ON t1.rid = t3.rid WHERE t2.director = t3.name",
        "schema": "CREATE TABLE Reviewer (name TEXT, rID NUMBER); CREATE TABLE Rating (mID NUMBER, rID NUMBER, stars NUMBER); CREATE TABLE Movie (director TEXT, mID NUMBER, title TEXT);"
      },
      {
        "question": "What is the reviewer name associated with that rating?",
        "query": "SELECT DISTINCT t3.name FROM rating AS t1 JOIN movie AS t2 ON t1.mid = t2.mid JOIN reviewer AS t3 ON t1.rid = t3.rid WHERE t2.director = t3.name",
        "schema": "CREATE TABLE Movie (director TEXT, mID NUMBER, title TEXT); CREATE TABLE Reviewer (name TEXT, rID NUMBER); CREATE TABLE Rating (stars NUMBER, rID NUMBER, mID NUMBER);"
      },
      {
        "question": "What about the number of stars it received?",
        "query": "SELECT DISTINCT t1.stars FROM rating AS t1 JOIN movie AS t2 ON t1.mid = t2.mid JOIN reviewer AS t3 ON t1.rid = t3.rid WHERE t2.director = t3.name",
        "schema": "CREATE TABLE Reviewer (name TEXT, rID NUMBER); CREATE TABLE Rating (stars NUMBER, rID NUMBER, mID NUMBER); CREATE TABLE Movie (director TEXT, mID NUMBER, title TEXT);"
      }
    ],
    [
      {
        "question": "list the names of all movies",
        "query": "SELECT title FROM movie",
        "schema": "CREATE TABLE Movie (title TEXT, mID NUMBER);"
      },
      {
        "question": "list the year each movie was released",
        "query": "SELECT title, YEAR FROM movie",
        "schema": "CREATE TABLE Movie (year NUMBER, mID NUMBER, title TEXT);"
      },
      {
        "question": "list the titles of all movies",
        "query": "SELECT title FROM movie",
        "schema": "CREATE TABLE Movie (title TEXT, mID NUMBER, year NUMBER);"
      }
    ],
    [
      {
        "question": "What are the movie titles and average rating of the movies with the lowest average rating?",
        "query": "SELECT t2.title , AVG ( t1.stars ) FROM rating AS t1 JOIN movie AS t2 ON t1.mid = t2.mid GROUP BY t1.mid ORDER BY AVG ( t1.stars ) LIMIT 1",
        "schema": "CREATE TABLE Movie (mID NUMBER, title TEXT); CREATE TABLE Rating (rID NUMBER, stars NUMBER, mID NUMBER);"
      },
      {
        "question": "What year did the sound of music come out and who was the director? | Do you mean the year of the movie whose title is The Sound of Music came out and the director of it? | yes",
        "query": "SELECT YEAR , director FROM movie WHERE title = 'The Sound of Music'",
        "schema": "CREATE TABLE Movie (title TEXT, year NUMBER, mID NUMBER, director TEXT); CREATE TABLE Rating (mID NUMBER, stars NUMBER, rID NUMBER);"
      },
      {
        "question": "What movie title has the highest rating? | Do you mean the title of the movie with the highest stars? | Yes",
        "query": "SELECT t2.title FROM rating AS t1 JOIN movie AS t2 ON t1.mid = t2.mid GROUP BY t1.mid ORDER BY t1.stars DESC LIMIT 1",
        "schema": "CREATE TABLE Rating (rID NUMBER, mID NUMBER, stars NUMBER); CREATE TABLE Movie (director TEXT, year NUMBER, title TEXT, mID NUMBER);"
      }
    ],
    [
      {
        "question": "what is the highest rating star?",
        "query": "SELECT MAX ( stars ) FROM rating",
        "schema": "CREATE TABLE Reviewer (rID NUMBER); CREATE TABLE Rating (stars NUMBER, mID NUMBER, rID NUMBER); CREATE TABLE Movie (mID NUMBER);"
      },
      {
        "question": "what is the average of rating stars?",
        "query": "SELECT AVG ( stars ) FROM rating",
        "schema": "CREATE TABLE Movie (mID NUMBER); CREATE TABLE Rating (rID NUMBER, stars NUMBER, mID NUMBER); CREATE TABLE Reviewer (rID NUMBER);"
      },
      {
        "question": "what is the first movie's year? | What do you mean by \"first\"? Do you mean the earliest movie? | yes",
        "query": "SELECT MIN ( YEAR ) FROM movie",
        "schema": "CREATE TABLE Movie (mID NUMBER, year NUMBER, title TEXT); CREATE TABLE Reviewer (rID NUMBER); CREATE TABLE Rating (stars NUMBER, mID NUMBER, rID NUMBER);"
      }
    ],
    [
      {
        "question": "how many movies are there in total?",
        "query": "SELECT COUNT ( * ) FROM movie",
        "schema": "CREATE TABLE Rating (mID NUMBER, rID NUMBER); CREATE TABLE Movie (mID NUMBER, title TEXT);"
      },
      {
        "question": "What year did the oldest movie come out?",
        "query": "SELECT YEAR FROM movie ORDER BY YEAR LIMIT 1",
        "schema": "CREATE TABLE Rating (mID NUMBER, rID NUMBER); CREATE TABLE Movie (title TEXT, year NUMBER, mID NUMBER);"
      },
      {
        "question": "How about the most recent one?",
        "query": "SELECT YEAR FROM movie ORDER BY YEAR DESC LIMIT 1",
        "schema": "CREATE TABLE Rating (rID NUMBER, mID NUMBER); CREATE TABLE Movie (title TEXT, mID NUMBER, year NUMBER);"
      },
      {
        "question": "What's the name of that movie?",
        "query": "SELECT title FROM movie WHERE YEAR = ( SELECT MAX ( YEAR ) FROM movie )",
        "schema": "CREATE TABLE Movie (title TEXT, year NUMBER, mID NUMBER); CREATE TABLE Rating (rID NUMBER, mID NUMBER);"
      },
      {
        "question": "How about the name of the director? | Do you mean the name of the director of Avatar? | yes",
        "query": "SELECT director FROM movie WHERE title = \"Avatar\"",
        "schema": "CREATE TABLE Rating (mID NUMBER, rID NUMBER); CREATE TABLE Movie (year NUMBER, title TEXT, director TEXT, mID NUMBER);"
      }
    ],
    [
      {
        "question": "How many movies altogether do you have?",
        "query": "SELECT COUNT ( DISTINCT mid ) FROM rating",
        "schema": "CREATE TABLE Movie (title TEXT, mID NUMBER); CREATE TABLE Reviewer (rID NUMBER); CREATE TABLE Rating (stars NUMBER, mID NUMBER, rID NUMBER);"
      },
      {
        "question": "What is the number of reviewers?",
        "query": "SELECT COUNT ( * ) FROM reviewer",
        "schema": "CREATE TABLE Reviewer (name TEXT, rID NUMBER); CREATE TABLE Movie (title TEXT, mID NUMBER); CREATE TABLE Rating (rID NUMBER, mID NUMBER, stars NUMBER);"
      },
      {
        "question": "Can you tell me the ids of the movies not reviewed by Brittany Harris?",
        "query": "SELECT mid FROM rating EXCEPT SELECT t1.mid FROM rating AS t1 JOIN reviewer AS t2 ON t1.rid = t2.rid WHERE t2.name = \"Brittany Harris\"",
        "schema": "CREATE TABLE Reviewer (name TEXT, rID NUMBER); CREATE TABLE Movie (mID NUMBER, title TEXT); CREATE TABLE Rating (mID NUMBER, rID NUMBER, stars NUMBER);"
      }
    ],
    [
      {
        "question": "what are the name of the reviewers?",
        "query": "SELECT name FROM reviewer",
        "schema": "CREATE TABLE Reviewer (name TEXT, rID NUMBER); CREATE TABLE Rating (rID NUMBER);"
      },
      {
        "question": "how many of them have given ratings higher than 3?",
        "query": "SELECT COUNT ( t2.rid ) FROM rating AS t1 JOIN reviewer AS t2 ON t1.rid = t2.rid WHERE t1.stars > 3",
        "schema": "CREATE TABLE Rating (stars NUMBER, rID NUMBER, mID NUMBER); CREATE TABLE Reviewer (rID NUMBER, name TEXT);"
      },
      {
        "question": "can you tell me their names?",
        "query": "SELECT t2.name FROM rating AS t1 JOIN reviewer AS t2 ON t1.rid = t2.rid WHERE t1.stars > 3",
        "schema": "CREATE TABLE Rating (stars NUMBER, mID NUMBER, rID NUMBER); CREATE TABLE Reviewer (name TEXT, rID NUMBER);"
      }
    ],
    [
      {
        "question": "what is the name of the movie without any ratings?",
        "query": "SELECT title FROM movie WHERE mid NOT IN ( SELECT mid FROM rating )",
        "schema": "CREATE TABLE Rating (stars NUMBER, rID NUMBER, mID NUMBER); CREATE TABLE Movie (mID NUMBER, title TEXT);"
      },
      {
        "question": "who is the director of star wars?",
        "query": "SELECT director FROM movie WHERE title = \"Star Wars\"",
        "schema": "CREATE TABLE Movie (title TEXT, mID NUMBER, director TEXT); CREATE TABLE Rating (stars NUMBER, rID NUMBER, mID NUMBER);"
      }
    ],
    [
      {
        "question": "What are the names of the movies that was reviewed by brittany harris?",
        "query": "SELECT DISTINCT t2.title FROM rating AS t1 JOIN movie AS t2 ON t1.mid = t2.mid JOIN reviewer AS t3 ON t1.rid = t3.rid WHERE t3.name = 'Brittany Harris'",
        "schema": "CREATE TABLE Reviewer (name TEXT, rID NUMBER); CREATE TABLE Movie (mID NUMBER, title TEXT, director TEXT); CREATE TABLE Rating (mID NUMBER, stars NUMBER, rID NUMBER);"
      },
      {
        "question": "What are the names of movies made after 2000?",
        "query": "SELECT DISTINCT t2.title FROM rating AS t1 JOIN movie AS t2 ON t1.mid = t2.mid JOIN reviewer AS t3 ON t1.rid = t3.rid WHERE t2.year > 2000",
        "schema": "CREATE TABLE Movie (year NUMBER, director TEXT, mID NUMBER, title TEXT); CREATE TABLE Rating (stars NUMBER, rID NUMBER, mID NUMBER); CREATE TABLE Reviewer (rID NUMBER, name TEXT);"
      },
      {
        "question": "How many rating  stars did Avatar had?",
        "query": "SELECT t1.stars FROM rating AS t1 JOIN movie AS t2 ON t1.mid = t2.mid WHERE t2.title = 'Avatar'",
        "schema": "CREATE TABLE Reviewer (name TEXT, rID NUMBER); CREATE TABLE Rating (mID NUMBER, rID NUMBER, stars NUMBER); CREATE TABLE Movie (director TEXT, year NUMBER, title TEXT, mID NUMBER);"
      }
    ],
    [
      {
        "question": "Hello!  Can you show me a list of all director names who have directed more than one movie?",
        "query": "SELECT DISTINCT t1.director FROM movie AS t1 JOIN movie AS t2 ON t1.director = t2.director WHERE t1.title ! = t2.title",
        "schema": "CREATE TABLE Movie (title TEXT, director TEXT, mID NUMBER);"
      },
      {
        "question": "This is great!  Can you please update the list to show each of the films directed by each director and keep the director names in the list?",
        "query": "SELECT t1.director , t1.title FROM movie AS t1 JOIN movie AS t2 ON t1.director = t2.director WHERE t1.title ! = t2.title",
        "schema": "CREATE TABLE Movie (title TEXT, director TEXT, mID NUMBER);"
      },
      {
        "question": "Wonderful!  Can you please sort this list by the director name, and then sort by movie title?",
        "query": "SELECT t1.title , t1.director FROM movie AS t1 JOIN movie AS t2 ON t1.director = t2.director WHERE t1.title ! = t2.title ORDER BY t1.director , t1.title",
        "schema": "CREATE TABLE Movie (title TEXT, director TEXT, mID NUMBER);"
      },
      {
        "question": "Excellent!  Would you be able to update that list to also include the year each film was released?",
        "query": "SELECT t1.title , t1.director, t1.year FROM movie AS t1 JOIN movie AS t2 ON t1.director = t2.director WHERE t1.title ! = t2.title ORDER BY t1.director , t1.title",
        "schema": "CREATE TABLE Movie (director TEXT, mID NUMBER, title TEXT, year NUMBER);"
      }
    ],
    [
      {
        "question": "What are the names of the movies?",
        "query": "SELECT title FROM movie",
        "schema": "CREATE TABLE Movie (title TEXT, mID NUMBER);"
      },
      {
        "question": "Which are made before 1980?",
        "query": "SELECT title FROM movie WHERE YEAR < 1980",
        "schema": "CREATE TABLE Movie (mID NUMBER, year NUMBER, title TEXT);"
      },
      {
        "question": "From the list of all movies, which were directed by James Cameron?",
        "query": "SELECT title FROM movie WHERE director = \"James Cameron\"",
        "schema": "CREATE TABLE Movie (director TEXT, mID NUMBER, title TEXT, year NUMBER);"
      }
    ],
    [
      {
        "question": "Which movie has the highest average rating? | The title of the movie that has the highest average rating is Snow White | What is it's rating?",
        "query": "SELECT AVG ( t1.stars ) FROM rating AS t1 JOIN movie AS t2 ON t1.mid = t2.mid GROUP BY t1.mid ORDER BY AVG ( t1.stars ) DESC LIMIT 1",
        "schema": "CREATE TABLE Rating (rID NUMBER, stars NUMBER, mID NUMBER); CREATE TABLE Movie (title TEXT, mID NUMBER);"
      },
      {
        "question": "What is the average rating for all movies?",
        "query": "SELECT t2.title ,AVG ( t1.stars ) FROM rating AS t1 JOIN movie AS t2 ON t1.mid = t2.mid GROUP BY t1.mid",
        "schema": "CREATE TABLE Rating (mID NUMBER, rID NUMBER, stars NUMBER); CREATE TABLE Movie (title TEXT, mID NUMBER);"
      },
      {
        "question": "Which movie has the lowest rating?",
        "query": "SELECT t2.title FROM rating AS t1 JOIN movie AS t2 ON t1.mid = t2.mid WHERE t1.stars = ( SELECT MIN ( stars ) FROM rating )",
        "schema": "CREATE TABLE Rating (rID NUMBER, mID NUMBER, stars NUMBER); CREATE TABLE Movie (mID NUMBER, title TEXT);"
      }
    ],
    [
      {
        "question": "How many movies are in the list?",
        "query": "SELECT COUNT ( * ) FROM movie",
        "schema": "CREATE TABLE Rating (rID NUMBER, mID NUMBER); CREATE TABLE Movie (mID NUMBER, title TEXT);"
      },
      {
        "question": "How many directors are on the list?",
        "query": "SELECT COUNT ( director ) FROM movie",
        "schema": "CREATE TABLE Rating (mID NUMBER, rID NUMBER); CREATE TABLE Movie (director TEXT, title TEXT, mID NUMBER);"
      },
      {
        "question": "How many of the directors have more than 1 film?",
        "query": "SELECT COUNT ( DISTINCT t1.director ) FROM movie AS t1 JOIN movie AS t2 ON t1.director = t2.director WHERE t1.title ! = t2.title",
        "schema": "CREATE TABLE Rating (rID NUMBER, mID NUMBER); CREATE TABLE Movie (director TEXT, mID NUMBER, title TEXT);"
      },
      {
        "question": "What are the titles from those 2 directors?",
        "query": "SELECT t1.title FROM movie AS t1 JOIN movie AS t2 ON t1.director = t2.director WHERE t1.title ! = t2.title",
        "schema": "CREATE TABLE Rating (mID NUMBER, rID NUMBER); CREATE TABLE Movie (director TEXT, mID NUMBER, title TEXT);"
      },
      {
        "question": "What are the years each of these movies were produced?",
        "query": "SELECT t1.year FROM movie AS t1 JOIN movie AS t2 ON t1.director = t2.director WHERE t1.title ! = t2.title",
        "schema": "CREATE TABLE Movie (title TEXT, mID NUMBER, year NUMBER, director TEXT); CREATE TABLE Rating (rID NUMBER, mID NUMBER);"
      }
    ],
    [
      {
        "question": "How many reviewers are there?",
        "query": "SELECT COUNT ( DISTINCT rid ) FROM rating",
        "schema": "CREATE TABLE Rating (rID NUMBER, mID NUMBER); CREATE TABLE Reviewer (name TEXT, rID NUMBER); CREATE TABLE Movie (mID NUMBER);"
      },
      {
        "question": "What are their id numbers?",
        "query": "SELECT DISTINCT rid FROM rating",
        "schema": "CREATE TABLE Rating (mID NUMBER, rID NUMBER, stars NUMBER); CREATE TABLE Movie (mID NUMBER); CREATE TABLE Reviewer (rID NUMBER, name TEXT);"
      },
      {
        "question": "What is the average rating of the reviewers?",
        "query": "SELECT AVG ( stars ) FROM rating",
        "schema": "CREATE TABLE Movie (mID NUMBER); CREATE TABLE Reviewer (name TEXT, rID NUMBER); CREATE TABLE Rating (stars NUMBER, rID NUMBER, mID NUMBER);"
      },
      {
        "question": "How many raters gave reviews less than 4 stars?",
        "query": "SELECT COUNT ( DISTINCT rid ) FROM rating WHERE stars < 4",
        "schema": "CREATE TABLE Rating (stars NUMBER, rID NUMBER, mID NUMBER); CREATE TABLE Movie (mID NUMBER); CREATE TABLE Reviewer (rID NUMBER, name TEXT);"
      },
      {
        "question": "What are their ids?",
        "query": "SELECT DISTINCT rid FROM rating WHERE stars < 4",
        "schema": "CREATE TABLE Reviewer (rID NUMBER, name TEXT); CREATE TABLE Movie (mID NUMBER); CREATE TABLE Rating (rID NUMBER, stars NUMBER, mID NUMBER);"
      }
    ],
    [
      {
        "question": "How many total movie ratings are there?",
        "query": "SELECT COUNT ( * ) FROM rating",
        "schema": "CREATE TABLE Movie (mID NUMBER); CREATE TABLE Reviewer (rID NUMBER); CREATE TABLE Rating (mID NUMBER, rID NUMBER, stars NUMBER);"
      },
      {
        "question": "How many of those movies received less than 2 ratings?",
        "query": "SELECT COUNT ( * ) FROM ( SELECT * FROM rating GROUP BY mid HAVING COUNT ( * ) < 2 )",
        "schema": "CREATE TABLE Rating (stars NUMBER, mID NUMBER, rID NUMBER); CREATE TABLE Movie (mID NUMBER, title TEXT); CREATE TABLE Reviewer (rID NUMBER);"
      },
      {
        "question": "Of the 14 ratings, what was the highest rating?",
        "query": "SELECT stars FROM rating ORDER BY stars DESC LIMIT 1",
        "schema": "CREATE TABLE Reviewer (rID NUMBER); CREATE TABLE Rating (mID NUMBER, rID NUMBER, stars NUMBER); CREATE TABLE Movie (title TEXT, mID NUMBER);"
      },
      {
        "question": "And the lowest?",
        "query": "SELECT stars FROM rating ORDER BY stars ASC LIMIT 1",
        "schema": "CREATE TABLE Reviewer (rID NUMBER); CREATE TABLE Movie (mID NUMBER, title TEXT); CREATE TABLE Rating (stars NUMBER, mID NUMBER, rID NUMBER);"
      },
      {
        "question": "And the average?",
        "query": "SELECT AVG ( stars ) FROM rating ORDER BY stars ASC LIMIT 1",
        "schema": "CREATE TABLE Movie (title TEXT, mID NUMBER); CREATE TABLE Reviewer (rID NUMBER); CREATE TABLE Rating (stars NUMBER, mID NUMBER, rID NUMBER);"
      }
    ],
    [
      {
        "question": "Find the movie id of Gone with the Wind?",
        "query": "SELECT mid FROM movie WHERE title = 'Gone with the Wind'",
        "schema": "CREATE TABLE Rating (mID NUMBER); CREATE TABLE Movie (title TEXT, mID NUMBER);"
      },
      {
        "question": "Which year Star Wars movie is released?",
        "query": "SELECT YEAR FROM movie WHERE title = 'Star Wars'",
        "schema": "CREATE TABLE Movie (year NUMBER, mID NUMBER, title TEXT); CREATE TABLE Rating (mID NUMBER);"
      },
      {
        "question": "Who is directed by The Sound of Music?",
        "query": "SELECT director FROM movie WHERE title = 'The Sound of Music'",
        "schema": "CREATE TABLE Movie (year NUMBER, title TEXT, mID NUMBER, director TEXT); CREATE TABLE Rating (mID NUMBER);"
      },
      {
        "question": "What is the name of the movie produced after 2000 and directed by James Cameron?",
        "query": "SELECT title FROM movie WHERE director = 'James Cameron' AND YEAR > 2000",
        "schema": "CREATE TABLE Movie (mID NUMBER, title TEXT, year NUMBER, director TEXT); CREATE TABLE Rating (mID NUMBER);"
      }
    ],
    [
      {
        "question": "Find the names of all directors whose movies are rated by Sarah Martinez",
        "query": "SELECT DISTINCT t2.director FROM rating AS t1 JOIN movie AS t2 ON t1.mid = t2.mid JOIN reviewer AS t3 ON t1.rid = t3.rid WHERE t3.name = 'Sarah Martinez'",
        "schema": "CREATE TABLE Movie (mID NUMBER, title TEXT, director TEXT); CREATE TABLE Rating (stars NUMBER, mID NUMBER, rID NUMBER); CREATE TABLE Reviewer (name TEXT, rID NUMBER);"
      },
      {
        "question": "list the other directors against the movies they directed.",
        "query": "SELECT director, title FROM movie WHERE director ! = \"Victor Fleming\"",
        "schema": "CREATE TABLE Movie (title TEXT, mID NUMBER, director TEXT); CREATE TABLE Rating (mID NUMBER, stars NUMBER, rID NUMBER); CREATE TABLE Reviewer (rID NUMBER, name TEXT);"
      },
      {
        "question": "what is the general ratings for those movies?",
        "query": "SELECT t1.director, t1.title, t2.stars FROM movie AS t1 JOIN rating AS t2 ON t1.mid = t2.mid WHERE t1.mid IN ( SELECT mid FROM movie WHERE director ! = \"Victor Fleming\" )",
        "schema": "CREATE TABLE Reviewer (name TEXT, rID NUMBER); CREATE TABLE Rating (rID NUMBER, stars NUMBER, mID NUMBER); CREATE TABLE Movie (director TEXT, title TEXT, mID NUMBER);"
      }
    ],
    [
      {
        "question": "Can you give me the names of the movies that has the top 3 highest rating star?",
        "query": "SELECT t2.title FROM rating AS t1 JOIN movie AS t2 ON t1.mid = t2.mid ORDER BY t1.stars DESC LIMIT 3",
        "schema": "CREATE TABLE Movie (mID NUMBER, title TEXT); CREATE TABLE Rating (stars NUMBER, mID NUMBER);"
      },
      {
        "question": "Can you show me the years of those movies as well?",
        "query": "SELECT t2.title , t2.year FROM rating AS t1 JOIN movie AS t2 ON t1.mid = t2.mid ORDER BY t1.stars DESC LIMIT 3",
        "schema": "CREATE TABLE Rating (mID NUMBER, stars NUMBER); CREATE TABLE Movie (mID NUMBER, year NUMBER, title TEXT);"
      },
      {
        "question": "How about their directors?",
        "query": "SELECT t2.title , t2.year, t2.director FROM rating AS t1 JOIN movie AS t2 ON t1.mid = t2.mid ORDER BY t1.stars DESC LIMIT 3",
        "schema": "CREATE TABLE Movie (title TEXT, year NUMBER, mID NUMBER, director TEXT); CREATE TABLE Rating (stars NUMBER, mID NUMBER);"
      },
      {
        "question": "Can you add rating stars too?",
        "query": "SELECT t2.title , t2.year, t2.director, t1.stars FROM rating AS t1 JOIN movie AS t2 ON t1.mid = t2.mid ORDER BY t1.stars DESC LIMIT 3",
        "schema": "CREATE TABLE Movie (title TEXT, mID NUMBER, year NUMBER, director TEXT); CREATE TABLE Rating (mID NUMBER, stars NUMBER);"
      },
      {
        "question": "Can you please tell me the average stars as well?",
        "query": "SELECT AVG ( stars ) FROM rating",
        "schema": "CREATE TABLE Movie (title TEXT, year NUMBER, mID NUMBER, director TEXT); CREATE TABLE Rating (stars NUMBER, mID NUMBER);"
      }
    ],
    [
      {
        "question": "How many directors are there?",
        "query": "SELECT COUNT ( DISTINCT director ) FROM movie",
        "schema": "CREATE TABLE Movie (director TEXT, title TEXT, mID NUMBER);"
      },
      {
        "question": "How many of them only made one movie?",
        "query": "SELECT COUNT ( * ) FROM ( SELECT director FROM movie GROUP BY director HAVING COUNT ( * ) = 1 )",
        "schema": "CREATE TABLE Movie (mID NUMBER, director TEXT, title TEXT);"
      },
      {
        "question": "What are the names of those directors?",
        "query": "SELECT director FROM movie GROUP BY director HAVING COUNT ( * ) = 1",
        "schema": "CREATE TABLE Movie (title TEXT, director TEXT, mID NUMBER);"
      }
    ],
    [
      {
        "question": "Show the names of all reviewers.",
        "query": "SELECT t2.name FROM rating AS t1 JOIN reviewer AS t2 ON t1.rid = t2.rid GROUP BY t2.name",
        "schema": "CREATE TABLE Rating (rID NUMBER); CREATE TABLE Movie (mID NUMBER); CREATE TABLE Reviewer (name TEXT, rID NUMBER);"
      },
      {
        "question": "What is the average rating of each reviewer.",
        "query": "SELECT t2.name , AVG ( t1.stars ) FROM rating AS t1 JOIN reviewer AS t2 ON t1.rid = t2.rid GROUP BY t2.name",
        "schema": "CREATE TABLE Reviewer (name TEXT, rID NUMBER); CREATE TABLE Rating (stars NUMBER, mID NUMBER, rID NUMBER); CREATE TABLE Movie (mID NUMBER);"
      },
      {
        "question": "List the names of all reviewers based on their average rating in ascending order.",
        "query": "SELECT t2.name FROM rating AS t1 JOIN reviewer AS t2 ON t1.rid = t2.rid GROUP BY t2.name ORDER BY AVG ( t1.stars ) ASC",
        "schema": "CREATE TABLE Reviewer (rID NUMBER, name TEXT); CREATE TABLE Rating (mID NUMBER, stars NUMBER, rID NUMBER); CREATE TABLE Movie (mID NUMBER);"
      },
      {
        "question": "List all movie id associated with Brittany Harris.",
        "query": "SELECT t1.mid FROM rating AS t1 JOIN reviewer AS t2 ON t1.rid = t2.rid WHERE t2.name = \"Brittany Harris\"",
        "schema": "CREATE TABLE Movie (mID NUMBER, title TEXT); CREATE TABLE Rating (rID NUMBER, stars NUMBER, mID NUMBER); CREATE TABLE Reviewer (name TEXT, rID NUMBER);"
      },
      {
        "question": "List all movie id associated with Brittany Harris and their rating date.",
        "query": "SELECT t1.mid, t1.ratingdate FROM rating AS t1 JOIN reviewer AS t2 ON t1.rid = t2.rid WHERE t2.name = \"Brittany Harris\"",
        "schema": "CREATE TABLE Rating (stars NUMBER, ratingDate TIME, rID NUMBER, mID NUMBER); CREATE TABLE Movie (year NUMBER, mID NUMBER, title TEXT); CREATE TABLE Reviewer (name TEXT, rID NUMBER);"
      },
      {
        "question": "What is the average rating of all movies reviewed by Brittany Harris.",
        "query": "SELECT AVG ( t1.stars ) FROM rating AS t1 JOIN reviewer AS t2 ON t1.rid = t2.rid WHERE t2.name = \"Brittany Harris\"",
        "schema": "CREATE TABLE Movie (mID NUMBER, year NUMBER, title TEXT); CREATE TABLE Rating (mID NUMBER, rID NUMBER, stars NUMBER, ratingDate TIME); CREATE TABLE Reviewer (rID NUMBER, name TEXT);"
      }
    ],
    [
      {
        "question": "What are the ratingDate of mID 101?",
        "query": "SELECT ratingdate FROM rating WHERE mid = 101",
        "schema": "CREATE TABLE Movie (mID NUMBER, title TEXT); CREATE TABLE Rating (mID NUMBER, ratingDate TIME, stars NUMBER);"
      },
      {
        "question": "Find The releasing year of The Sound of Music.",
        "query": "SELECT YEAR FROM movie WHERE title = \"The Sound of Music\"",
        "schema": "CREATE TABLE Movie (mID NUMBER, title TEXT, year NUMBER); CREATE TABLE Rating (mID NUMBER, ratingDate TIME, stars NUMBER);"
      },
      {
        "question": "Who is directed by Star Wars? | Did you mean to ask for the name of the director who directed Star Wars? | Yes",
        "query": "SELECT director FROM movie WHERE title = \"Star Wars\"",
        "schema": "CREATE TABLE Rating (mID NUMBER, ratingDate TIME, stars NUMBER); CREATE TABLE Movie (director TEXT, mID NUMBER, year NUMBER, title TEXT);"
      },
      {
        "question": "What is the average rating stars and title for the oldest movie?",
        "query": "SELECT AVG ( t1.stars ) , t2.title FROM rating AS t1 JOIN movie AS t2 ON t1.mid = t2.mid WHERE t2.year = ( SELECT MIN ( YEAR ) FROM movie )",
        "schema": "CREATE TABLE Movie (director TEXT, mID NUMBER, year NUMBER, title TEXT); CREATE TABLE Rating (mID NUMBER, ratingDate TIME, stars NUMBER);"
      }
    ],
    [
      {
        "question": "list out the movies on the table",
        "query": "SELECT * FROM movie",
        "schema": "CREATE TABLE Movie (mID NUMBER, title TEXT); CREATE TABLE Rating (mID NUMBER, rID NUMBER);"
      },
      {
        "question": "what is the director name of Star Wars",
        "query": "SELECT director FROM movie WHERE title = 'Star Wars'",
        "schema": "CREATE TABLE Rating (rID NUMBER, mID NUMBER); CREATE TABLE Movie (title TEXT, mID NUMBER, director TEXT);"
      },
      {
        "question": "actually i mean which movie rating is high | Would you like the movie with the greatest number of rating stars? | exactly",
        "query": "SELECT * FROM rating AS t1 JOIN movie AS t2 ON t1.mid = t2.mid ORDER BY t1.stars DESC LIMIT 1",
        "schema": "CREATE TABLE Rating (mID NUMBER, stars NUMBER, rID NUMBER); CREATE TABLE Movie (title TEXT, director TEXT, mID NUMBER);"
      },
      {
        "question": "what is the year of Gone with the Wind",
        "query": "SELECT YEAR FROM movie WHERE title = 'Gone with the Wind'",
        "schema": "CREATE TABLE Rating (stars NUMBER, mID NUMBER, rID NUMBER); CREATE TABLE Movie (director TEXT, title TEXT, year NUMBER, mID NUMBER);"
      }
    ],
    [
      {
        "question": "ids of reviewers who did not give 4 star?",
        "query": "SELECT rid FROM rating EXCEPT SELECT rid FROM rating WHERE stars = 4",
        "schema": "CREATE TABLE Reviewer (name TEXT, rID NUMBER); CREATE TABLE Movie (mID NUMBER); CREATE TABLE Rating (mID NUMBER, rID NUMBER, stars NUMBER);"
      },
      {
        "question": "Stars for rID 201?",
        "query": "SELECT stars FROM rating WHERE rid = 201",
        "schema": "CREATE TABLE Movie (mID NUMBER); CREATE TABLE Rating (rID NUMBER, mID NUMBER, stars NUMBER); CREATE TABLE Reviewer (name TEXT, rID NUMBER);"
      }
    ],
    [
      {
        "question": "Please show me the names and years of the movies that has the top 3 highest rating stars",
        "query": "SELECT t2.title , t2.year FROM rating AS t1 JOIN movie AS t2 ON t1.mid = t2.mid ORDER BY t1.stars DESC LIMIT 3",
        "schema": "CREATE TABLE Rating (mID NUMBER, rID NUMBER, stars NUMBER); CREATE TABLE Movie (mID NUMBER, year NUMBER, title TEXT);"
      },
      {
        "question": "Can you show me the director names together with the name and years? | Did you mean the directors of the movies that have the top 3 highest rating stars? | Yes, director names, movie names and years please.",
        "query": "SELECT t2.title , t2.year, t2.director FROM rating AS t1 JOIN movie AS t2 ON t1.mid = t2.mid ORDER BY t1.stars DESC LIMIT 3",
        "schema": "CREATE TABLE Movie (mID NUMBER, director TEXT, title TEXT, year NUMBER); CREATE TABLE Rating (stars NUMBER, rID NUMBER, mID NUMBER);"
      },
      {
        "question": "Please give me the same information for the movies that have the 3 lowest rating stars.",
        "query": "SELECT t2.title , t2.year, t2.director FROM rating AS t1 JOIN movie AS t2 ON t1.mid = t2.mid ORDER BY t1.stars LIMIT 3",
        "schema": "CREATE TABLE Rating (rID NUMBER, stars NUMBER, mID NUMBER); CREATE TABLE Movie (mID NUMBER, director TEXT, year NUMBER, title TEXT);"
      }
    ]
  ],
  "wrestler": [
    [
      {
        "question": "what are the elimination time of wrestlers",
        "query": "SELECT TIME FROM elimination",
        "schema": "CREATE TABLE Elimination (Wrestler_ID TEXT, Time TEXT, Eliminated_By TEXT, Elimination_ID TEXT); CREATE TABLE wrestler (Wrestler_ID NUMBER);"
      },
      {
        "question": "What are the names of the wrestlers and their elimination times?",
        "query": "SELECT t1.time,t2.name FROM elimination AS t1 JOIN wrestler AS t2 ON t1.wrestler_id = t2.wrestler_id",
        "schema": "CREATE TABLE wrestler (Wrestler_ID NUMBER, Name TEXT); CREATE TABLE Elimination (Wrestler_ID TEXT, Time TEXT, Eliminated_By TEXT, Elimination_ID TEXT);"
      },
      {
        "question": "What are the names of wresters and their elimination times whose days held is greater than 50?",
        "query": "SELECT t2.name, t1.time FROM elimination AS t1 JOIN wrestler AS t2 ON t1.wrestler_id = t2.wrestler_id WHERE t2.days_held > 50",
        "schema": "CREATE TABLE Elimination (Eliminated_By TEXT, Elimination_ID TEXT, Time TEXT, Wrestler_ID TEXT); CREATE TABLE wrestler (Name TEXT, Days_held TEXT, Wrestler_ID NUMBER);"
      }
    ],
    [
      {
        "question": "hi. can you tell me how many wrestlers were eliminated?",
        "query": "SELECT COUNT ( * ) FROM elimination",
        "schema": "CREATE TABLE wrestler (Name TEXT, Wrestler_ID NUMBER); CREATE TABLE Elimination (Wrestler_ID TEXT, Elimination_Move TEXT, Elimination_ID TEXT, Eliminated_By TEXT);"
      },
      {
        "question": "can you list the elimination times of those with the largest days held? | Again, there can only be one with the largest days held, would you like that one? There are  not multiple that can be \"largest\" | yes, please",
        "query": "SELECT t1.time FROM elimination AS t1 JOIN wrestler AS t2 ON t1.wrestler_id = t2.wrestler_id ORDER BY t2.days_held DESC LIMIT 1",
        "schema": "CREATE TABLE Elimination (Eliminated_By TEXT, Elimination_Move TEXT, Wrestler_ID TEXT, Time TEXT, Elimination_ID TEXT); CREATE TABLE wrestler (Days_held TEXT, Name TEXT, Wrestler_ID NUMBER);"
      }
    ],
    [
      {
        "question": "list the location that was share by more than two wrestler",
        "query": "SELECT LOCATION FROM wrestler GROUP BY LOCATION HAVING COUNT ( * ) > 2",
        "schema": "CREATE TABLE wrestler (Location TEXT);"
      },
      {
        "question": "which of them has the highest days held",
        "query": "SELECT LOCATION FROM wrestler GROUP BY LOCATION HAVING COUNT ( * ) > 2 ORDER BY days_held DESC LIMIT 1",
        "schema": "CREATE TABLE wrestler (Location TEXT, Days_held TEXT);"
      },
      {
        "question": "what are the name of the wrestler | Would you like to know the names of all wrestlers with location Tokyo, Japan? | yes",
        "query": "SELECT name FROM wrestler WHERE LOCATION = 'Tokyo , Japan'",
        "schema": "CREATE TABLE wrestler (Name TEXT, Wrestler_ID NUMBER, Location TEXT, Days_held TEXT);"
      }
    ],
    [
      {
        "question": "How many wrestlers are there?",
        "query": "SELECT COUNT ( * ) FROM wrestler",
        "schema": "CREATE TABLE wrestler (Wrestler_ID NUMBER, Name TEXT); CREATE TABLE Elimination (Wrestler_ID TEXT);"
      },
      {
        "question": "just locations",
        "query": "SELECT DISTINCT LOCATION FROM wrestler",
        "schema": "CREATE TABLE Elimination (Wrestler_ID TEXT); CREATE TABLE wrestler (Location TEXT, Name TEXT, Wrestler_ID NUMBER);"
      },
      {
        "question": "What are their ids?",
        "query": "SELECT wrestler_id FROM wrestler",
        "schema": "CREATE TABLE wrestler (Location TEXT, Wrestler_ID NUMBER, Name TEXT); CREATE TABLE Elimination (Wrestler_ID TEXT);"
      },
      {
        "question": "What are the most common reigns of wrestlers?",
        "query": "SELECT reign FROM wrestler GROUP BY reign ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Elimination (Wrestler_ID TEXT); CREATE TABLE wrestler (Name TEXT, Wrestler_ID NUMBER, Reign TEXT, Location TEXT);"
      }
    ],
    [
      {
        "question": "Show the teams that have wrestlers eliminated by \"Orton\".",
        "query": "SELECT team FROM elimination WHERE eliminated_by = \"Orton\"",
        "schema": "CREATE TABLE wrestler (Wrestler_ID NUMBER); CREATE TABLE Elimination (Team TEXT, Eliminated_By TEXT, Wrestler_ID TEXT, Elimination_Move TEXT, Elimination_ID TEXT);"
      },
      {
        "question": "Show me the teams that have wrestlers eliminated by \"Benjamin\".",
        "query": "SELECT team FROM elimination WHERE eliminated_by = \"Benjamin\"",
        "schema": "CREATE TABLE Elimination (Elimination_ID TEXT, Elimination_Move TEXT, Wrestler_ID TEXT, Eliminated_By TEXT, Team TEXT); CREATE TABLE wrestler (Wrestler_ID NUMBER);"
      },
      {
        "question": "What was the elimination move when the wrestlers in team Batista were eliminated by \"Benjamin\".",
        "query": "SELECT elimination_move FROM elimination WHERE eliminated_by = \"Benjamin\" AND team = 'Team Batista'",
        "schema": "CREATE TABLE wrestler (Wrestler_ID NUMBER); CREATE TABLE Elimination (Eliminated_By TEXT, Elimination_Move TEXT, Time TEXT, Team TEXT, Wrestler_ID TEXT, Elimination_ID TEXT);"
      },
      {
        "question": "And what was the time duration in this case?",
        "query": "SELECT TIME FROM elimination WHERE eliminated_by = \"Benjamin\" AND team = 'Team Batista'",
        "schema": "CREATE TABLE wrestler (Wrestler_ID NUMBER); CREATE TABLE Elimination (Time TEXT, Eliminated_By TEXT, Team TEXT, Wrestler_ID TEXT, Elimination_ID TEXT, Elimination_Move TEXT);"
      },
      {
        "question": "Show me the teams that have wrestlers eliminated by \"Punk\".",
        "query": "SELECT team FROM elimination WHERE eliminated_by = \"Punk\"",
        "schema": "CREATE TABLE wrestler (Wrestler_ID NUMBER); CREATE TABLE Elimination (Team TEXT, Wrestler_ID TEXT, Elimination_Move TEXT, Elimination_ID TEXT, Time TEXT, Eliminated_By TEXT);"
      },
      {
        "question": "Hmmm. And what was the elimination move used?",
        "query": "SELECT elimination_move FROM elimination WHERE eliminated_by = \"Punk\"",
        "schema": "CREATE TABLE Elimination (Team TEXT, Elimination_Move TEXT, Wrestler_ID TEXT, Elimination_ID TEXT, Eliminated_By TEXT, Time TEXT); CREATE TABLE wrestler (Wrestler_ID NUMBER);"
      }
    ],
    [
      {
        "question": "what is the average number of days | did you mean the average days held by all wrestlers? | yes",
        "query": "SELECT AVG ( days_held ) FROM wrestler",
        "schema": "CREATE TABLE Elimination (Wrestler_ID TEXT); CREATE TABLE wrestler (Days_held TEXT, Wrestler_ID NUMBER);"
      },
      {
        "question": "what is the name of the wrestler with the fewest days held",
        "query": "SELECT name FROM wrestler ORDER BY days_held LIMIT 1",
        "schema": "CREATE TABLE Elimination (Wrestler_ID TEXT); CREATE TABLE wrestler (Wrestler_ID NUMBER, Name TEXT, Days_held TEXT);"
      },
      {
        "question": "what is the name of the first wrestler id | did you mean the name of the wrestler with id 1? | first wrestler",
        "query": "SELECT name FROM wrestler WHERE wrestler_id = 1",
        "schema": "CREATE TABLE Elimination (Wrestler_ID TEXT); CREATE TABLE wrestler (Name TEXT, Wrestler_ID NUMBER, Days_held TEXT);"
      }
    ],
    [
      {
        "question": "What are names of all the wrestlers?",
        "query": "SELECT name FROM wrestler",
        "schema": "CREATE TABLE wrestler (Wrestler_ID NUMBER, Name TEXT); CREATE TABLE Elimination (Wrestler_ID TEXT);"
      },
      {
        "question": "And what about teams in elimination?",
        "query": "SELECT team FROM elimination",
        "schema": "CREATE TABLE Elimination (Elimination_ID TEXT, Team TEXT, Wrestler_ID TEXT); CREATE TABLE wrestler (Wrestler_ID NUMBER, Name TEXT);"
      },
      {
        "question": "Can I see a list with wrestler names and teams in elimination in descending order based on days held?",
        "query": "SELECT t2.name , t1.team FROM elimination AS t1 JOIN wrestler AS t2 ON t1.wrestler_id = t2.wrestler_id ORDER BY t2.days_held DESC",
        "schema": "CREATE TABLE Elimination (Elimination_ID TEXT, Time TEXT, Wrestler_ID TEXT, Team TEXT); CREATE TABLE wrestler (Wrestler_ID NUMBER, Name TEXT, Days_held TEXT);"
      }
    ],
    [
      {
        "question": "Show the times of elimination by \"Punk\" or \"Orton\".",
        "query": "SELECT TIME FROM elimination WHERE eliminated_by = \"Punk\" OR eliminated_by = \"Orton\"",
        "schema": "CREATE TABLE Elimination (Elimination_Move TEXT, Time TEXT, Wrestler_ID TEXT, Elimination_ID TEXT, Eliminated_By TEXT); CREATE TABLE wrestler (Name TEXT, Wrestler_ID NUMBER);"
      },
      {
        "question": "And by \"Benjamin\"?",
        "query": "SELECT TIME FROM elimination WHERE eliminated_by = \"Benjamin\"",
        "schema": "CREATE TABLE wrestler (Wrestler_ID NUMBER, Name TEXT); CREATE TABLE Elimination (Time TEXT, Eliminated_By TEXT, Wrestler_ID TEXT, Elimination_Move TEXT, Elimination_ID TEXT);"
      },
      {
        "question": "What was the average elimination time of all teams?",
        "query": "SELECT AVG ( TIME ) FROM elimination",
        "schema": "CREATE TABLE Elimination (Team TEXT, Wrestler_ID TEXT, Elimination_ID TEXT, Time TEXT, Elimination_Move TEXT, Eliminated_By TEXT); CREATE TABLE wrestler (Name TEXT, Wrestler_ID NUMBER);"
      }
    ]
  ],
  "soccer_2": [
    [
      {
        "question": "List the state and enrollment of all the colleges where any students got accepted in the tryout decision.",
        "query": "SELECT DISTINCT t1.state , t1.enr FROM college AS t1 JOIN tryout AS t2 ON t1.cname = t2.cname WHERE t2.decision = 'yes'",
        "schema": "CREATE TABLE Tryout (pPos TEXT, decision TEXT, cName TEXT); CREATE TABLE College (enr NUMBER, cName TEXT, state TEXT);"
      },
      {
        "question": "What are the states and names of the colleges that all the goalies tried out for?",
        "query": "SELECT DISTINCT t1.state , t1.enr FROM college AS t1 JOIN tryout AS t2 ON t1.cname = t2.cname WHERE t2.ppos = \"goalie\"",
        "schema": "CREATE TABLE College (enr NUMBER, state TEXT, cName TEXT); CREATE TABLE Tryout (cName TEXT, pPos TEXT, decision TEXT);"
      },
      {
        "question": "What are the states and names of all colleges that didn't accept students in the tryout decision?",
        "query": "SELECT state, enr FROM college WHERE cname NOT IN ( SELECT DISTINCT t1.cname FROM college AS t1 JOIN tryout AS t2 ON t1.cname = t2.cname WHERE t2.decision = \"yes\" )",
        "schema": "CREATE TABLE Tryout (decision TEXT, cName TEXT, pPos TEXT); CREATE TABLE College (enr NUMBER, cName TEXT, state TEXT);"
      }
    ],
    [
      {
        "question": "Which colleges students played in the try out in striker position?",
        "query": "SELECT cname FROM tryout WHERE ppos = 'striker'",
        "schema": "CREATE TABLE Tryout (cName TEXT, pID NUMBER, pPos TEXT); CREATE TABLE Player (pID NUMBER); CREATE TABLE College (cName TEXT);"
      },
      {
        "question": "And in which state is it located?",
        "query": "SELECT t1.state FROM college AS t1 JOIN tryout AS t2 ON t1.cname = t2.cname WHERE t2.ppos = 'striker'",
        "schema": "CREATE TABLE College (cName TEXT, state TEXT); CREATE TABLE Tryout (pID NUMBER, cName TEXT, pPos TEXT); CREATE TABLE Player (pID NUMBER);"
      },
      {
        "question": "How about it's enrollment number?",
        "query": "SELECT t1.enr FROM college AS t1 JOIN tryout AS t2 ON t1.cname = t2.cname WHERE t2.ppos = 'striker'",
        "schema": "CREATE TABLE College (cName TEXT, state TEXT, enr NUMBER); CREATE TABLE Player (pID NUMBER); CREATE TABLE Tryout (cName TEXT, pID NUMBER, pPos TEXT);"
      }
    ],
    [
      {
        "question": "can you show me a list of player position?",
        "query": "SELECT ppos FROM tryout",
        "schema": "CREATE TABLE Player (pID NUMBER, HS NUMBER); CREATE TABLE Tryout (cName TEXT, pID NUMBER, pPos TEXT);"
      },
      {
        "question": "can you show me a list of college name?",
        "query": "SELECT cname FROM college",
        "schema": "CREATE TABLE Player (HS NUMBER, pID NUMBER, pName TEXT); CREATE TABLE College (cName TEXT); CREATE TABLE Tryout (cName TEXT, pID NUMBER, pPos TEXT);"
      },
      {
        "question": "what is the average of enrollments?",
        "query": "SELECT AVG ( enr ) FROM college",
        "schema": "CREATE TABLE Tryout (cName TEXT, pPos TEXT, pID NUMBER); CREATE TABLE College (enr NUMBER, cName TEXT); CREATE TABLE Player (pID NUMBER, pName TEXT, HS NUMBER);"
      },
      {
        "question": "what is the colleges' states?",
        "query": "SELECT state FROM college",
        "schema": "CREATE TABLE Player (pID NUMBER, pName TEXT, HS NUMBER); CREATE TABLE College (enr NUMBER, cName TEXT, state TEXT); CREATE TABLE Tryout (pID NUMBER, pPos TEXT, cName TEXT);"
      },
      {
        "question": "find the names of states that have some collage plating in goalie and mid positions.",
        "query": "SELECT t1.state FROM college AS t1 JOIN tryout AS t2 ON t1.cname = t2.cname WHERE t2.ppos = 'goalie' INTERSECT SELECT t1.state FROM college AS t1 JOIN tryout AS t2 ON t1.cname = t2.cname WHERE t2.ppos = 'mid'",
        "schema": "CREATE TABLE College (state TEXT, cName TEXT, enr NUMBER); CREATE TABLE Player (pName TEXT, pID NUMBER, HS NUMBER); CREATE TABLE Tryout (cName TEXT, pPos TEXT, decision TEXT, pID NUMBER);"
      }
    ],
    [
      {
        "question": "Hi there! Can you provide me with a list of all of the player names?",
        "query": "SELECT pname FROM player",
        "schema": "CREATE TABLE Player (pName TEXT, pID NUMBER); CREATE TABLE Tryout (pID NUMBER);"
      },
      {
        "question": "Thank you for that! Can you filter the list to show the names of only the players whose decision is \"yes\"?",
        "query": "SELECT t1.pname FROM player AS t1 JOIN tryout AS t2 ON t1.pid = t2.pid WHERE t2.decision = 'yes'",
        "schema": "CREATE TABLE Tryout (cName TEXT, pID NUMBER, pPos TEXT, decision TEXT); CREATE TABLE Player (pID NUMBER, pName TEXT);"
      },
      {
        "question": "Perfect!  Can you update this list to show the college names associated with each of these 2 players?",
        "query": "SELECT t1.pname ,t2.cname FROM player AS t1 JOIN tryout AS t2 ON t1.pid = t2.pid WHERE t2.decision = 'yes'",
        "schema": "CREATE TABLE Player (pName TEXT, pID NUMBER); CREATE TABLE Tryout (pPos TEXT, cName TEXT, decision TEXT, pID NUMBER); CREATE TABLE College (cName TEXT);"
      }
    ],
    [
      {
        "question": "What is the name of the college whos size is bigger than 10000?",
        "query": "SELECT cname FROM college WHERE enr > 10000",
        "schema": "CREATE TABLE Tryout (cName TEXT); CREATE TABLE College (enr NUMBER, cName TEXT); CREATE TABLE Player (HS NUMBER, pID NUMBER);"
      },
      {
        "question": "Which of those colleges are located in LA?",
        "query": "SELECT * FROM college WHERE enr > 10000 AND state = \"LA\"",
        "schema": "CREATE TABLE Tryout (cName TEXT); CREATE TABLE College (cName TEXT, enr NUMBER, state TEXT); CREATE TABLE Player (pID NUMBER, HS NUMBER);"
      },
      {
        "question": "What is the enrollment of that college?",
        "query": "SELECT enr FROM college WHERE enr > 10000 AND state = \"LA\"",
        "schema": "CREATE TABLE Player (HS NUMBER, pID NUMBER); CREATE TABLE Tryout (cName TEXT); CREATE TABLE College (enr NUMBER, state TEXT, cName TEXT);"
      }
    ],
    [
      {
        "question": "Can you list all the colleges and their enrollments?",
        "query": "SELECT cname, enr FROM college",
        "schema": "CREATE TABLE College (cName TEXT, enr NUMBER);"
      },
      {
        "question": "Which college has the largest enrollment?",
        "query": "SELECT cname FROM college WHERE enr = ( SELECT MAX ( enr ) FROM college )",
        "schema": "CREATE TABLE College (enr NUMBER, cName TEXT);"
      },
      {
        "question": "Hmm, I also want to know which colleges have enrollments that are less than the largest size.",
        "query": "SELECT cname FROM college WHERE enr < ( SELECT MAX ( enr ) FROM college )",
        "schema": "CREATE TABLE College (enr NUMBER, cName TEXT);"
      },
      {
        "question": "Can you list the states of those colleges?",
        "query": "SELECT cname, state FROM college WHERE enr < ( SELECT MAX ( enr ) FROM college )",
        "schema": "CREATE TABLE College (cName TEXT, state TEXT, enr NUMBER);"
      }
    ],
    [
      {
        "question": "What are the names of the states that have some college students playing in the mid position but not the goalie position?",
        "query": "SELECT t1.state FROM college AS t1 JOIN tryout AS t2 ON t1.cname = t2.cname WHERE t2.ppos = 'mid' EXCEPT SELECT t1.state FROM college AS t1 JOIN tryout AS t2 ON t1.cname = t2.cname WHERE t2.ppos = 'goalie'",
        "schema": "CREATE TABLE College (cName TEXT, state TEXT); CREATE TABLE Tryout (pID NUMBER, pPos TEXT, cName TEXT);"
      },
      {
        "question": "What about states that have some college students playing in the goalie position?",
        "query": "SELECT t1.state FROM college AS t1 JOIN tryout AS t2 ON t1.cname = t2.cname WHERE t2.ppos = 'goalie'",
        "schema": "CREATE TABLE Tryout (cName TEXT, pPos TEXT, pID NUMBER); CREATE TABLE College (state TEXT, cName TEXT);"
      },
      {
        "question": "What about in the striker position?",
        "query": "SELECT t1.state FROM college AS t1 JOIN tryout AS t2 ON t1.cname = t2.cname WHERE t2.ppos = 'striker'",
        "schema": "CREATE TABLE Tryout (pID NUMBER, pPos TEXT, cName TEXT); CREATE TABLE College (cName TEXT, state TEXT);"
      },
      {
        "question": "What is the college name for that one?",
        "query": "SELECT t1.cname FROM college AS t1 JOIN tryout AS t2 ON t1.cname = t2.cname WHERE t2.ppos = 'striker'",
        "schema": "CREATE TABLE Tryout (cName TEXT, pID NUMBER, pPos TEXT); CREATE TABLE College (cName TEXT, state TEXT);"
      },
      {
        "question": "Was there a decision on that position?",
        "query": "SELECT decision FROM tryout WHERE ppos = 'striker'",
        "schema": "CREATE TABLE College (state TEXT, cName TEXT); CREATE TABLE Tryout (decision TEXT, pPos TEXT, cName TEXT, pID NUMBER);"
      }
    ],
    [
      {
        "question": "How many players have a yCard?",
        "query": "SELECT COUNT ( * ) FROM player WHERE ycard = \"yes\"",
        "schema": "CREATE TABLE Tryout (pID NUMBER, pPos TEXT); CREATE TABLE Player (pID NUMBER, HS NUMBER, yCard TEXT, pName TEXT);"
      },
      {
        "question": "What is the average HS score of all players?",
        "query": "SELECT AVG ( hs ) FROM player",
        "schema": "CREATE TABLE Tryout (pPos TEXT, pID NUMBER); CREATE TABLE Player (HS NUMBER, pName TEXT, yCard TEXT, pID NUMBER);"
      },
      {
        "question": "Which player has the lowest HS score?",
        "query": "SELECT pname FROM player ORDER BY hs ASC LIMIT 1",
        "schema": "CREATE TABLE Player (HS NUMBER, yCard TEXT, pName TEXT, pID NUMBER); CREATE TABLE Tryout (pID NUMBER, pPos TEXT);"
      },
      {
        "question": "What is the pID for Andrew?",
        "query": "SELECT pid FROM player WHERE pname = \"Andrew\"",
        "schema": "CREATE TABLE Player (pID NUMBER, HS NUMBER, yCard TEXT, pName TEXT); CREATE TABLE Tryout (pPos TEXT, pID NUMBER);"
      },
      {
        "question": "And for Blake?",
        "query": "SELECT pid FROM player WHERE pname = \"Blake\"",
        "schema": "CREATE TABLE Player (HS NUMBER, pName TEXT, yCard TEXT, pID NUMBER); CREATE TABLE Tryout (pPos TEXT, pID NUMBER);"
      },
      {
        "question": "How many players are there?",
        "query": "SELECT COUNT ( * ) FROM player",
        "schema": "CREATE TABLE Tryout (pID NUMBER, pPos TEXT); CREATE TABLE Player (pID NUMBER, HS NUMBER, yCard TEXT, pName TEXT);"
      },
      {
        "question": "What are there names?",
        "query": "SELECT pname FROM player",
        "schema": "CREATE TABLE Player (HS NUMBER, pName TEXT, yCard TEXT, pID NUMBER); CREATE TABLE Tryout (pID NUMBER, pPos TEXT);"
      }
    ],
    [
      {
        "question": "What are the top 3 enrollment numbers among the schools?",
        "query": "SELECT enr FROM college ORDER BY enr DESC LIMIT 3",
        "schema": "CREATE TABLE Player (HS NUMBER); CREATE TABLE College (cName TEXT, enr NUMBER);"
      },
      {
        "question": "Hmm, I want to know the states of the schools with the top 3 largest size.",
        "query": "SELECT state FROM college ORDER BY enr DESC LIMIT 3",
        "schema": "CREATE TABLE Player (HS NUMBER); CREATE TABLE College (cName TEXT, enr NUMBER, state TEXT);"
      },
      {
        "question": "Can you tell me the names of the schools with the top 3 largest size?",
        "query": "SELECT cname FROM college ORDER BY enr DESC LIMIT 3",
        "schema": "CREATE TABLE Player (HS NUMBER); CREATE TABLE College (state TEXT, enr NUMBER, cName TEXT);"
      }
    ],
    [
      {
        "question": "Which schools have goalie player?",
        "query": "SELECT cname FROM tryout WHERE ppos = \"goalie\"",
        "schema": "CREATE TABLE Tryout (pID NUMBER, cName TEXT, pPos TEXT); CREATE TABLE College (cName TEXT); CREATE TABLE Player (pID NUMBER);"
      },
      {
        "question": "And which schools don't have a goalie player?",
        "query": "SELECT cname FROM tryout WHERE ppos ! = \"goalie\"",
        "schema": "CREATE TABLE Player (pID NUMBER); CREATE TABLE College (cName TEXT); CREATE TABLE Tryout (pID NUMBER, pPos TEXT, cName TEXT);"
      }
    ],
    [
      {
        "question": "Hello!  Can you provide me with a list of all of the colleges located in the state of LA?",
        "query": "SELECT cname FROM college WHERE state = \"LA\"",
        "schema": "CREATE TABLE Tryout (cName TEXT); CREATE TABLE College (enr NUMBER, cName TEXT, state TEXT);"
      },
      {
        "question": "Awesome! Can you show me a list that contains both the colleges in LA and those located in AZ?",
        "query": "SELECT cname FROM college WHERE state = \"LA\" OR state = \"AZ\"",
        "schema": "CREATE TABLE College (enr NUMBER, state TEXT, cName TEXT); CREATE TABLE Tryout (cName TEXT);"
      },
      {
        "question": "Sure!  What is the average enrollment of ASU and LSU?",
        "query": "SELECT AVG ( enr ) FROM college WHERE cname = \"ASU\" OR cname = \"LSU\"",
        "schema": "CREATE TABLE College (cName TEXT, enr NUMBER, state TEXT); CREATE TABLE Tryout (cName TEXT);"
      }
    ],
    [
      {
        "question": "Which position is the most popular among players in the tryout?",
        "query": "SELECT ppos FROM tryout GROUP BY ppos ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Tryout (pID NUMBER, pPos TEXT, cName TEXT); CREATE TABLE Player (pID NUMBER);"
      },
      {
        "question": "What were the names of the colleges for that position?",
        "query": "SELECT cname FROM tryout WHERE ppos = ( SELECT ppos FROM tryout GROUP BY ppos ORDER BY COUNT ( * ) DESC LIMIT 1 )",
        "schema": "CREATE TABLE Tryout (cName TEXT, pID NUMBER, pPos TEXT); CREATE TABLE College (cName TEXT); CREATE TABLE Player (pID NUMBER);"
      },
      {
        "question": "And what decisions resulted from those tryouts?",
        "query": "SELECT decision FROM tryout WHERE ppos = ( SELECT ppos FROM tryout GROUP BY ppos ORDER BY COUNT ( * ) DESC LIMIT 1 )",
        "schema": "CREATE TABLE Player (pID NUMBER); CREATE TABLE College (cName TEXT); CREATE TABLE Tryout (pPos TEXT, pID NUMBER, decision TEXT, cName TEXT);"
      },
      {
        "question": "Were there any other position in the try outs other than goalie position?",
        "query": "SELECT ppos FROM tryout WHERE ppos ! = \"goalie\"",
        "schema": "CREATE TABLE Player (pID NUMBER); CREATE TABLE College (cName TEXT); CREATE TABLE Tryout (cName TEXT, decision TEXT, pPos TEXT, pID NUMBER);"
      },
      {
        "question": "Which colleges were those positions for?",
        "query": "SELECT cname FROM tryout WHERE ppos ! = \"goalie\"",
        "schema": "CREATE TABLE Player (pID NUMBER); CREATE TABLE Tryout (pPos TEXT, pID NUMBER, cName TEXT, decision TEXT); CREATE TABLE College (cName TEXT);"
      }
    ],
    [
      {
        "question": "What is the player id for Charles?",
        "query": "SELECT pid FROM player WHERE pname = \"Charles\"",
        "schema": "CREATE TABLE Player (pID NUMBER, pName TEXT); CREATE TABLE Tryout (pID NUMBER);"
      },
      {
        "question": "What the college Charles is attending?",
        "query": "SELECT t1.cname FROM college AS t1 JOIN tryout AS t2 ON t1.cname = t2.cname JOIN player AS t3 ON t2.pid = t3.pid WHERE t3.pname = 'Charles'",
        "schema": "CREATE TABLE Player (pName TEXT, pID NUMBER); CREATE TABLE Tryout (pPos TEXT, pID NUMBER, cName TEXT); CREATE TABLE College (cName TEXT);"
      },
      {
        "question": "What is the state of the college OU?",
        "query": "SELECT t1.state FROM college AS t1 JOIN tryout AS t2 ON t1.cname = t2.cname JOIN player AS t3 ON t2.pid = t3.pid WHERE t1.cname = 'OU'",
        "schema": "CREATE TABLE Tryout (cName TEXT, pID NUMBER, pPos TEXT); CREATE TABLE Player (pName TEXT, pID NUMBER); CREATE TABLE College (state TEXT, cName TEXT);"
      }
    ],
    [
      {
        "question": "What is the max training hours of all players, please?",
        "query": "SELECT MAX ( hs ) FROM player",
        "schema": "CREATE TABLE Player (pID NUMBER, pName TEXT, HS NUMBER); CREATE TABLE Tryout (pID NUMBER, pPos TEXT); CREATE TABLE College (cName TEXT);"
      },
      {
        "question": "What about the min?",
        "query": "SELECT MIN ( hs ) FROM player",
        "schema": "CREATE TABLE College (cName TEXT); CREATE TABLE Player (HS NUMBER, pID NUMBER, pName TEXT); CREATE TABLE Tryout (pID NUMBER, pPos TEXT);"
      },
      {
        "question": "How about the average?",
        "query": "SELECT AVG ( hs ) FROM player",
        "schema": "CREATE TABLE College (cName TEXT); CREATE TABLE Tryout (pPos TEXT, pID NUMBER); CREATE TABLE Player (pName TEXT, HS NUMBER, pID NUMBER);"
      },
      {
        "question": "Who is the player with the lowest training hours?",
        "query": "SELECT pname FROM player ORDER BY hs LIMIT 1",
        "schema": "CREATE TABLE Player (HS NUMBER, pName TEXT, pID NUMBER); CREATE TABLE Tryout (pPos TEXT, pID NUMBER); CREATE TABLE College (cName TEXT);"
      },
      {
        "question": "What about the highest training hours, please?",
        "query": "SELECT pname FROM player ORDER BY hs DESC LIMIT 1",
        "schema": "CREATE TABLE Tryout (pID NUMBER, pPos TEXT); CREATE TABLE College (cName TEXT); CREATE TABLE Player (HS NUMBER, pName TEXT, pID NUMBER);"
      }
    ],
    [
      {
        "question": "what is average of training hours?",
        "query": "SELECT AVG ( hs ) FROM player",
        "schema": "CREATE TABLE College (enr NUMBER, cName TEXT); CREATE TABLE Tryout (pPos TEXT, cName TEXT, pID NUMBER); CREATE TABLE Player (pName TEXT, pID NUMBER, HS NUMBER);"
      },
      {
        "question": "can you show me player names that starting with 'A'?",
        "query": "SELECT pname FROM player WHERE pname like 'A%'",
        "schema": "CREATE TABLE Tryout (pID NUMBER, pPos TEXT, cName TEXT); CREATE TABLE College (enr NUMBER, cName TEXT); CREATE TABLE Player (HS NUMBER, pName TEXT, pID NUMBER);"
      },
      {
        "question": "can you show me a list of college name?",
        "query": "SELECT DISTINCT cname FROM tryout",
        "schema": "CREATE TABLE Tryout (cName TEXT, pID NUMBER, pPos TEXT); CREATE TABLE College (enr NUMBER, cName TEXT); CREATE TABLE Player (pID NUMBER, HS NUMBER, pName TEXT);"
      }
    ],
    [
      {
        "question": "Find the names of either colleges in LA with greater than 15000 size or in state AZ with less than 13000 enrollment.",
        "query": "SELECT cname FROM college WHERE enr < 13000 AND state = \"AZ\" UNION SELECT cname FROM college WHERE enr > 15000 AND state = \"LA\"",
        "schema": "CREATE TABLE College (enr NUMBER, state TEXT, cName TEXT);"
      },
      {
        "question": "OK! please give me the names of the colleges where enrollment is greater than 20000",
        "query": "SELECT cname FROM college WHERE enr>20000",
        "schema": "CREATE TABLE Tryout (cName TEXT); CREATE TABLE College (cName TEXT, state TEXT, enr NUMBER);"
      },
      {
        "question": "Also give me the names of the colleges where enrollment is between 10000 and 20000.",
        "query": "SELECT cname FROM college WHERE enr<20000 AND enr>10000",
        "schema": "CREATE TABLE College (state TEXT, cName TEXT, enr NUMBER); CREATE TABLE Tryout (cName TEXT);"
      },
      {
        "question": "Ok. Can you please tell me which college has the lowest enrollment.",
        "query": "SELECT cname FROM college ORDER BY enr LIMIT 1",
        "schema": "CREATE TABLE College (state TEXT, cName TEXT, enr NUMBER); CREATE TABLE Tryout (cName TEXT);"
      },
      {
        "question": "And which college has the highest enrollment?",
        "query": "SELECT cname FROM college ORDER BY enr DESC LIMIT 1",
        "schema": "CREATE TABLE College (state TEXT, cName TEXT, enr NUMBER); CREATE TABLE Tryout (cName TEXT);"
      }
    ],
    [
      {
        "question": "How many different positions are there?",
        "query": "SELECT COUNT ( DISTINCT ppos ) FROM tryout",
        "schema": "CREATE TABLE Player (pID NUMBER); CREATE TABLE Tryout (cName TEXT, pID NUMBER, pPos TEXT);"
      },
      {
        "question": "How many students have more than 1000 hours of training?",
        "query": "SELECT * FROM player WHERE hs > 1000",
        "schema": "CREATE TABLE Player (HS NUMBER, pID NUMBER); CREATE TABLE Tryout (pPos TEXT, pID NUMBER, cName TEXT, decision TEXT);"
      },
      {
        "question": "How many hours of training has the student with the most hours completed?",
        "query": "SELECT hs FROM player ORDER BY hs DESC LIMIT 1",
        "schema": "CREATE TABLE Player (pName TEXT, pID NUMBER, HS NUMBER); CREATE TABLE Tryout (decision TEXT, cName TEXT, pID NUMBER, pPos TEXT);"
      }
    ],
    [
      {
        "question": "How many colleges have enrollment greater than 18000?",
        "query": "SELECT COUNT ( * ) FROM college WHERE enr > 18000",
        "schema": "CREATE TABLE College (enr NUMBER, cName TEXT);"
      },
      {
        "question": "What are their names?",
        "query": "SELECT cname FROM college WHERE enr > 18000",
        "schema": "CREATE TABLE College (enr NUMBER, cName TEXT);"
      },
      {
        "question": "What is the enrollment for OU?",
        "query": "SELECT enr FROM college WHERE cname = 'OU'",
        "schema": "CREATE TABLE College (enr NUMBER, cName TEXT);"
      },
      {
        "question": "And for LSU? | Would you like to know the enrollment for the college named LSU? | Yes I would.",
        "query": "SELECT enr FROM college WHERE cname = 'LSU'",
        "schema": "CREATE TABLE College (enr NUMBER, cName TEXT); CREATE TABLE Tryout (cName TEXT);"
      },
      {
        "question": "In which state is LSU located?",
        "query": "SELECT state FROM college WHERE cname = 'LSU'",
        "schema": "CREATE TABLE Tryout (cName TEXT); CREATE TABLE College (cName TEXT, state TEXT, enr NUMBER);"
      },
      {
        "question": "And the state for OU?",
        "query": "SELECT state FROM college WHERE cname = 'OU'",
        "schema": "CREATE TABLE College (enr NUMBER, cName TEXT, state TEXT); CREATE TABLE Tryout (cName TEXT);"
      }
    ],
    [
      {
        "question": "how many hours does each player get to be active for?",
        "query": "SELECT pid,hs FROM player",
        "schema": "CREATE TABLE Player (pName TEXT, HS NUMBER, pID NUMBER); CREATE TABLE Tryout (pPos TEXT, pID NUMBER);"
      },
      {
        "question": "what position requires the least playing time?",
        "query": "SELECT ppos FROM tryout AS t1 JOIN player AS t2 ON t1.pid = t2.pid GROUP BY t1.ppos ORDER BY MIN ( t2.hs ) LIMIT 1",
        "schema": "CREATE TABLE Tryout (pPos TEXT, cName TEXT, pID NUMBER); CREATE TABLE Player (HS NUMBER, pID NUMBER, pName TEXT);"
      },
      {
        "question": "what is the the playing time of the mid player ?",
        "query": "SELECT MIN ( t2.hs ) , t1.ppos FROM tryout AS t1 JOIN player AS t2 ON t1.pid = t2.pid WHERE ppos = 'mid' GROUP BY t1.ppos",
        "schema": "CREATE TABLE Player (pID NUMBER, HS NUMBER, pName TEXT); CREATE TABLE Tryout (pPos TEXT, cName TEXT, pID NUMBER);"
      }
    ],
    [
      {
        "question": "How many players are there?",
        "query": "SELECT COUNT ( * ) FROM player",
        "schema": "CREATE TABLE Tryout (pID NUMBER, pPos TEXT); CREATE TABLE Player (pID NUMBER, pName TEXT, HS NUMBER);"
      },
      {
        "question": "What is the max of those players? | what  did  you  mean  the  max  ? | Sorry, the max training hours of those players.",
        "query": "SELECT MAX ( hs ) FROM player",
        "schema": "CREATE TABLE Player (pID NUMBER, pName TEXT, HS NUMBER); CREATE TABLE Tryout (pID NUMBER, pPos TEXT);"
      },
      {
        "question": "And the min training hours of those players?",
        "query": "SELECT MIN ( hs ) FROM player",
        "schema": "CREATE TABLE Tryout (pPos TEXT, pID NUMBER); CREATE TABLE Player (pID NUMBER, HS NUMBER, pName TEXT);"
      },
      {
        "question": "How about the average?",
        "query": "SELECT AVG ( hs ) FROM player",
        "schema": "CREATE TABLE Tryout (pID NUMBER, pPos TEXT); CREATE TABLE Player (HS NUMBER, pName TEXT, pID NUMBER);"
      }
    ],
    [
      {
        "question": "How many student in total participate in the tryout?",
        "query": "SELECT COUNT ( * ) FROM tryout",
        "schema": "CREATE TABLE Tryout (pPos TEXT, pID NUMBER, cName TEXT, decision TEXT); CREATE TABLE Player (pID NUMBER, pName TEXT);"
      },
      {
        "question": "For which colleges?",
        "query": "SELECT COUNT ( * ) , cname FROM tryout GROUP BY cname",
        "schema": "CREATE TABLE Player (pID NUMBER, pName TEXT); CREATE TABLE College (cName TEXT); CREATE TABLE Tryout (pID NUMBER, pPos TEXT, decision TEXT, cName TEXT);"
      },
      {
        "question": "Can I see that list in a descending order based on student count?",
        "query": "SELECT COUNT ( * ) , cname FROM tryout GROUP BY cname ORDER BY COUNT ( * ) DESC",
        "schema": "CREATE TABLE College (cName TEXT); CREATE TABLE Tryout (decision TEXT, pPos TEXT, cName TEXT, pID NUMBER); CREATE TABLE Player (pName TEXT, pID NUMBER);"
      }
    ],
    [
      {
        "question": "I want to know the states and the college names which have some college students in tryout.",
        "query": "SELECT t1.state, t1.cname FROM college AS t1 JOIN tryout AS t2 ON t1.cname = t2.cname",
        "schema": "CREATE TABLE Tryout (pPos TEXT, cName TEXT, pID NUMBER); CREATE TABLE Player (pID NUMBER); CREATE TABLE College (cName TEXT, state TEXT);"
      },
      {
        "question": "Hmm, can you show me the college names with players whose decisions are yes?",
        "query": "SELECT cname FROM tryout WHERE decision = \"yes\"",
        "schema": "CREATE TABLE College (cName TEXT, state TEXT); CREATE TABLE Tryout (pID NUMBER, cName TEXT, pPos TEXT, decision TEXT); CREATE TABLE Player (pID NUMBER, pName TEXT);"
      },
      {
        "question": "Can you list just the states which have college students in tryout and their decisions are yes?",
        "query": "SELECT DISTINCT t1.state FROM college AS t1 JOIN tryout AS t2 ON t1.cname = t2.cname WHERE t2.decision = 'yes'",
        "schema": "CREATE TABLE Tryout (decision TEXT, cName TEXT, pID NUMBER, pPos TEXT); CREATE TABLE College (state TEXT, cName TEXT); CREATE TABLE Player (pID NUMBER, pName TEXT);"
      }
    ],
    [
      {
        "question": "find the state of the college which player Charles is attending",
        "query": "SELECT t1.state FROM college AS t1 JOIN tryout AS t2 ON t1.cname = t2.cname JOIN player AS t3 ON t2.pid = t3.pid WHERE t3.pname = 'Charles'",
        "schema": "CREATE TABLE Tryout (pPos TEXT, pID NUMBER, cName TEXT); CREATE TABLE Player (pID NUMBER, pName TEXT, HS NUMBER); CREATE TABLE College (cName TEXT, state TEXT);"
      },
      {
        "question": "OK,List out the all player id and college name",
        "query": "SELECT t1.cname, t3.pid FROM college AS t1 JOIN tryout AS t2 ON t1.cname = t2.cname JOIN player AS t3 ON t2.pid = t3.pid",
        "schema": "CREATE TABLE Tryout (cName TEXT, pID NUMBER, pPos TEXT); CREATE TABLE Player (HS NUMBER, pName TEXT, pID NUMBER); CREATE TABLE College (cName TEXT, state TEXT);"
      },
      {
        "question": "find the training hours of the player Charles",
        "query": "SELECT hs FROM player WHERE pname = 'Charles'",
        "schema": "CREATE TABLE Tryout (pPos TEXT, cName TEXT, pID NUMBER); CREATE TABLE College (enr NUMBER, cName TEXT, state TEXT); CREATE TABLE Player (pID NUMBER, HS NUMBER, pName TEXT);"
      },
      {
        "question": "ok, list out all college name",
        "query": "SELECT cname FROM college",
        "schema": "CREATE TABLE Player (HS NUMBER, pID NUMBER, pName TEXT); CREATE TABLE Tryout (pID NUMBER, pPos TEXT, cName TEXT); CREATE TABLE College (cName TEXT, enr NUMBER, state TEXT);"
      }
    ],
    [
      {
        "question": "list the name of college in az?",
        "query": "SELECT cname FROM college WHERE state = 'AZ'",
        "schema": "CREATE TABLE Tryout (cName TEXT); CREATE TABLE College (state TEXT, cName TEXT, enr NUMBER);"
      },
      {
        "question": "list the name of the colleges whose enrollment is lesser than 18000 sorted by the college's name?",
        "query": "SELECT cname FROM college WHERE enr > 18000 ORDER BY cname",
        "schema": "CREATE TABLE College (state TEXT, cName TEXT, enr NUMBER); CREATE TABLE Tryout (cName TEXT);"
      },
      {
        "question": "which college enrollment is 22000?",
        "query": "SELECT cname FROM college WHERE enr = 22000",
        "schema": "CREATE TABLE Tryout (cName TEXT); CREATE TABLE College (cName TEXT, enr NUMBER, state TEXT);"
      },
      {
        "question": "list the name of the colleges whose enrollment is greater than 12000 sorted by the college's name and state?",
        "query": "SELECT cname FROM college WHERE enr > 12000 ORDER BY cname , state",
        "schema": "CREATE TABLE Tryout (cName TEXT); CREATE TABLE College (cName TEXT, state TEXT, enr NUMBER);"
      }
    ],
    [
      {
        "question": "Can you list all the names of the students who have the position of striker?",
        "query": "SELECT t1.pname FROM player AS t1 JOIN tryout AS t2 ON t1.pid = t2.pid WHERE t2.ppos = 'striker'",
        "schema": "CREATE TABLE Player (pName TEXT, pID NUMBER); CREATE TABLE Tryout (cName TEXT, pID NUMBER, pPos TEXT);"
      },
      {
        "question": "Can you also list the tryout decision they got please?",
        "query": "SELECT t1.pname,t2.decision FROM player AS t1 JOIN tryout AS t2 ON t1.pid = t2.pid WHERE t2.ppos = 'striker'",
        "schema": "CREATE TABLE Player (pID NUMBER, pName TEXT); CREATE TABLE Tryout (pPos TEXT, pID NUMBER, decision TEXT, cName TEXT);"
      },
      {
        "question": "What are the names and positions of all players who got a no for their tryout decision?",
        "query": "SELECT t1.pname,t2.ppos FROM player AS t1 JOIN tryout AS t2 ON t1.pid = t2.pid WHERE t2.decision = \"no\"",
        "schema": "CREATE TABLE Tryout (pPos TEXT, pID NUMBER, cName TEXT, decision TEXT); CREATE TABLE Player (pName TEXT, pID NUMBER);"
      },
      {
        "question": "What are the names and college names of all players who have over 700 training hours?",
        "query": "SELECT t1.pname,t2.cname FROM player AS t1 JOIN tryout AS t2 ON t1.pid = t2.pid WHERE t1.hs > 700",
        "schema": "CREATE TABLE Tryout (cName TEXT, pID NUMBER, pPos TEXT, decision TEXT); CREATE TABLE Player (pID NUMBER, HS NUMBER, pName TEXT); CREATE TABLE College (cName TEXT);"
      },
      {
        "question": "Can you add their positions into the table please?",
        "query": "SELECT t1.pname,t2.cname,t2.ppos FROM player AS t1 JOIN tryout AS t2 ON t1.pid = t2.pid WHERE t1.hs > 700",
        "schema": "CREATE TABLE College (cName TEXT); CREATE TABLE Tryout (pID NUMBER, cName TEXT, pPos TEXT, decision TEXT); CREATE TABLE Player (pName TEXT, HS NUMBER, pID NUMBER);"
      }
    ],
    [
      {
        "question": "hi. can you tell me how many players are from OU College?",
        "query": "SELECT COUNT ( * ) FROM tryout AS t1 JOIN player AS t2 ON t1.pid = t2.pid WHERE t1.cname = \"OU\"",
        "schema": "CREATE TABLE College (cName TEXT, state TEXT, enr NUMBER); CREATE TABLE Player (HS NUMBER, pName TEXT, pID NUMBER); CREATE TABLE Tryout (pPos TEXT, pID NUMBER, cName TEXT);"
      },
      {
        "question": "and can you tell me if OU is the college with the largest size?",
        "query": "SELECT cname FROM college ORDER BY enr DESC LIMIT 1",
        "schema": "CREATE TABLE Player (pID NUMBER, HS NUMBER, pName TEXT); CREATE TABLE Tryout (pPos TEXT, cName TEXT, pID NUMBER); CREATE TABLE College (state TEXT, cName TEXT, enr NUMBER);"
      },
      {
        "question": "and what is the name of that tryout player from OU?",
        "query": "SELECT t2.pname FROM tryout AS t1 JOIN player AS t2 ON t1.pid = t2.pid WHERE t1.cname = \"OU\"",
        "schema": "CREATE TABLE Tryout (cName TEXT, pPos TEXT, pID NUMBER); CREATE TABLE College (state TEXT, cName TEXT, enr NUMBER); CREATE TABLE Player (pName TEXT, HS NUMBER, pID NUMBER);"
      }
    ],
    [
      {
        "question": "find the name and college of students whose player position are goalie in the tryout",
        "query": "SELECT t1.pname , t2.cname FROM player AS t1 JOIN tryout AS t2 ON t1.pid = t2.pid WHERE t2.ppos = 'goalie'",
        "schema": "CREATE TABLE Tryout (pID NUMBER, cName TEXT, pPos TEXT); CREATE TABLE Player (pName TEXT, pID NUMBER); CREATE TABLE College (cName TEXT);"
      },
      {
        "question": "find the training hours for the player id 10001",
        "query": "SELECT hs FROM player WHERE pid = \"10001\"",
        "schema": "CREATE TABLE Tryout (pID NUMBER, pPos TEXT, cName TEXT); CREATE TABLE Player (HS NUMBER, pName TEXT, pID NUMBER); CREATE TABLE College (cName TEXT);"
      },
      {
        "question": "find the college name for the player id 10001",
        "query": "SELECT t2.cname FROM player AS t1 JOIN tryout AS t2 ON t1.pid = t2.pid WHERE t2.pid = '10001'",
        "schema": "CREATE TABLE Tryout (pID NUMBER, cName TEXT, pPos TEXT); CREATE TABLE College (cName TEXT); CREATE TABLE Player (HS NUMBER, pID NUMBER, pName TEXT);"
      }
    ],
    [
      {
        "question": "hello there!  Can you please provide me with a list of all college names?",
        "query": "SELECT cname FROM college",
        "schema": "CREATE TABLE Player (pName TEXT, pID NUMBER); CREATE TABLE College (cName TEXT); CREATE TABLE Tryout (cName TEXT);"
      },
      {
        "question": "Thank you for that!  Can you show me the names of all colleges with an enrollment value that is greater than the total enrollment of all of the colleges in the state of FL?",
        "query": "SELECT cname FROM college",
        "schema": "CREATE TABLE Player (pName TEXT, pID NUMBER); CREATE TABLE Tryout (cName TEXT); CREATE TABLE College (enr NUMBER, cName TEXT, state TEXT);"
      },
      {
        "question": "Excellent!  Can you update this list to show me the enrollment quantity associated with each college?",
        "query": "SELECT cname, enr FROM college WHERE enr > ( SELECT MAX ( enr ) FROM college WHERE state = 'FL' )",
        "schema": "CREATE TABLE Player (pID NUMBER, pName TEXT); CREATE TABLE Tryout (cName TEXT); CREATE TABLE College (enr NUMBER, cName TEXT, state TEXT);"
      }
    ],
    [
      {
        "question": "How many states that have some college students playing in the mid position?",
        "query": "SELECT COUNT ( * ) FROM ( SELECT t1.state FROM college AS t1 JOIN tryout AS t2 ON t1.cname = t2.cname WHERE t2.ppos = 'mid' )",
        "schema": "CREATE TABLE Tryout (pID NUMBER, cName TEXT, pPos TEXT); CREATE TABLE Player (pID NUMBER); CREATE TABLE College (cName TEXT, state TEXT);"
      },
      {
        "question": "How many states that have some college students not playing in the goalie position?",
        "query": "SELECT COUNT ( * ) FROM ( SELECT t1.state FROM college AS t1 JOIN tryout AS t2 ON t1.cname = t2.cname WHERE t2.ppos ! = 'goalie' )",
        "schema": "CREATE TABLE Tryout (pPos TEXT, pID NUMBER, decision TEXT, cName TEXT); CREATE TABLE College (state TEXT, cName TEXT); CREATE TABLE Player (pID NUMBER);"
      },
      {
        "question": "Find college names with students playing in the goalie position",
        "query": "SELECT cname FROM tryout WHERE ppos = \"goalie\"",
        "schema": "CREATE TABLE Player (pName TEXT, pID NUMBER); CREATE TABLE College (state TEXT, cName TEXT); CREATE TABLE Tryout (cName TEXT, pPos TEXT, pID NUMBER, decision TEXT);"
      }
    ],
    [
      {
        "question": "How many hours does a goalie need to play to meet the minimum?",
        "query": "SELECT MIN ( t2.hs ) FROM tryout AS t1 JOIN player AS t2 ON t1.pid = t2.pid AND t1.ppos = 'goalie' GROUP BY t1.ppos",
        "schema": "CREATE TABLE Player (HS NUMBER, pID NUMBER, yCard TEXT, pName TEXT); CREATE TABLE College (cName TEXT); CREATE TABLE Tryout (pID NUMBER, cName TEXT, pPos TEXT, decision TEXT);"
      },
      {
        "question": "How many hours does a striker need to play to meet the minimum?",
        "query": "SELECT MIN ( t2.hs ) FROM tryout AS t1 JOIN player AS t2 ON t1.pid = t2.pid AND t1.ppos = 'striker' GROUP BY t1.ppos",
        "schema": "CREATE TABLE Player (pID NUMBER, yCard TEXT, HS NUMBER, pName TEXT); CREATE TABLE Tryout (pID NUMBER, cName TEXT, decision TEXT, pPos TEXT); CREATE TABLE College (cName TEXT);"
      },
      {
        "question": "How many hours does a mid need to play to meet the minimum?",
        "query": "SELECT MIN ( t2.hs ) FROM tryout AS t1 JOIN player AS t2 ON t1.pid = t2.pid WHERE t1.ppos = \"mid\" GROUP BY t1.ppos",
        "schema": "CREATE TABLE Tryout (pID NUMBER, decision TEXT, cName TEXT, pPos TEXT); CREATE TABLE College (cName TEXT); CREATE TABLE Player (HS NUMBER, yCard TEXT, pID NUMBER, pName TEXT);"
      }
    ],
    [
      {
        "question": "Can you tell me the player id of each player with the letter 'a' in their name?",
        "query": "SELECT pid FROM player WHERE pname LIKE '%a%'",
        "schema": "CREATE TABLE Tryout (pID NUMBER); CREATE TABLE Player (pName TEXT, pID NUMBER);"
      },
      {
        "question": "How many of those players have a yes card?",
        "query": "SELECT COUNT ( * ) FROM player WHERE pname LIKE '%a%' AND ycard = \"yes\"",
        "schema": "CREATE TABLE Tryout (pID NUMBER); CREATE TABLE Player (pID NUMBER, HS NUMBER, pName TEXT, yCard TEXT);"
      },
      {
        "question": "What are those players' names?",
        "query": "SELECT DISTINCT pname FROM player WHERE pname LIKE '%a%' AND ycard = \"yes\"",
        "schema": "CREATE TABLE Player (pID NUMBER, yCard TEXT, pName TEXT, HS NUMBER); CREATE TABLE Tryout (pID NUMBER);"
      }
    ],
    [
      {
        "question": "What are the enrollments of all colleges in the state of FL?",
        "query": "SELECT SUM ( enr ) FROM college WHERE state = 'FL'",
        "schema": "CREATE TABLE College (cName TEXT, enr NUMBER, state TEXT); CREATE TABLE Tryout (cName TEXT);"
      },
      {
        "question": "What are the names of all colleges that have an enrollment greater than at least one of the colleges in FL?",
        "query": "SELECT DISTINCT cname FROM college WHERE enr > ( SELECT MIN ( enr ) FROM college WHERE state = 'FL' )",
        "schema": "CREATE TABLE Tryout (cName TEXT); CREATE TABLE College (state TEXT, cName TEXT, enr NUMBER);"
      },
      {
        "question": "What are the names of all colleges that have an enrollment greater than at least one of the colleges in OK?",
        "query": "SELECT DISTINCT cname FROM college WHERE enr > ( SELECT MIN ( enr ) FROM college WHERE state = 'OK' )",
        "schema": "CREATE TABLE College (enr NUMBER, cName TEXT, state TEXT); CREATE TABLE Tryout (cName TEXT);"
      },
      {
        "question": "How about the names of all colleges that have an enrollment less than at least one of the colleges in OK?",
        "query": "SELECT DISTINCT cname FROM college WHERE enr < ( SELECT MAX ( enr ) FROM college WHERE state = 'OK' )",
        "schema": "CREATE TABLE Tryout (cName TEXT); CREATE TABLE College (cName TEXT, state TEXT, enr NUMBER);"
      },
      {
        "question": "What are the names of all colleges that have an enrollment less than at least one of the colleges in FL?",
        "query": "SELECT DISTINCT cname FROM college WHERE enr < ( SELECT MAX ( enr ) FROM college WHERE state = 'FL' )",
        "schema": "CREATE TABLE Tryout (cName TEXT); CREATE TABLE College (state TEXT, enr NUMBER, cName TEXT);"
      }
    ],
    [
      {
        "question": "what are the college names of the students whose tryout decision is yes",
        "query": "SELECT cname FROM tryout WHERE decision = \"yes\"",
        "schema": "CREATE TABLE Tryout (pID NUMBER, pPos TEXT, cName TEXT, decision TEXT); CREATE TABLE College (cName TEXT); CREATE TABLE Player (pID NUMBER);"
      },
      {
        "question": "what is the average and maximum hours for these students",
        "query": "SELECT AVG ( t1.hs ) , MAX ( t1.hs ) FROM player AS t1 JOIN tryout AS t2 ON t1.pid = t2.pid WHERE t2.decision = 'yes'",
        "schema": "CREATE TABLE Tryout (decision TEXT, pID NUMBER, pPos TEXT, cName TEXT); CREATE TABLE Player (HS NUMBER, pID NUMBER); CREATE TABLE College (enr NUMBER, cName TEXT);"
      },
      {
        "question": "add the player id and college names in the same list",
        "query": "SELECT AVG ( t1.hs ) , MAX ( t1.hs ) , t1.pid, t2.cname FROM player AS t1 JOIN tryout AS t2 ON t1.pid = t2.pid WHERE t2.decision = 'yes'",
        "schema": "CREATE TABLE Player (HS NUMBER, pID NUMBER, pName TEXT); CREATE TABLE College (cName TEXT, enr NUMBER); CREATE TABLE Tryout (pID NUMBER, decision TEXT, pPos TEXT, cName TEXT);"
      }
    ],
    [
      {
        "question": "What is the average enrollment?",
        "query": "SELECT AVG ( enr ) FROM college",
        "schema": "CREATE TABLE Player (pID NUMBER, HS NUMBER); CREATE TABLE College (enr NUMBER, cName TEXT);"
      },
      {
        "question": "Now please list all colleges that have enrollment higher than the average. | LSU, OU, and FSU have enrollment higher than the average. | Please list the states where LSU, OU, and FSU are located.",
        "query": "SELECT DISTINCT state FROM college WHERE enr > ( SELECT AVG ( enr ) FROM college )",
        "schema": "CREATE TABLE College (cName TEXT, enr NUMBER, state TEXT); CREATE TABLE Player (HS NUMBER, pID NUMBER);"
      },
      {
        "question": "How many total states are in the table?",
        "query": "SELECT COUNT ( DISTINCT state ) FROM college WHERE enr > ( SELECT AVG ( enr ) FROM college )",
        "schema": "CREATE TABLE Player (HS NUMBER, pID NUMBER); CREATE TABLE College (cName TEXT, state TEXT, enr NUMBER);"
      }
    ]
  ],
  "products_gen_characteristics": [
    [
      {
        "question": "How many distinct characteristic names does the product \"cumin\" have?",
        "query": "SELECT COUNT ( DISTINCT t3.characteristic_name ) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE t1.product_name = \"cumin\"",
        "schema": "CREATE TABLE Characteristics (characteristic_name TEXT, characteristic_id NUMBER, characteristic_type_code TEXT); CREATE TABLE Product_Characteristics (product_characteristic_value TEXT, product_id NUMBER, characteristic_id NUMBER); CREATE TABLE Products (product_name TEXT, product_id NUMBER); CREATE TABLE Ref_Characteristic_Types (characteristic_type_code TEXT, characteristic_type_description TEXT);"
      },
      {
        "question": "How many distinct characteristic names does the product \"basil\" have?",
        "query": "SELECT COUNT ( DISTINCT t3.characteristic_name ) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE t1.product_name = \"basil\"",
        "schema": "CREATE TABLE Products (product_name TEXT, product_id NUMBER); CREATE TABLE Ref_Characteristic_Types (characteristic_type_description TEXT, characteristic_type_code TEXT); CREATE TABLE Characteristics (characteristic_type_code TEXT, characteristic_name TEXT, characteristic_id NUMBER); CREATE TABLE Product_Characteristics (product_id NUMBER, characteristic_id NUMBER, product_characteristic_value TEXT);"
      },
      {
        "question": "Sure thing! Whats the typical selling price of cumin?",
        "query": "SELECT typical_selling_price FROM products WHERE product_name = \"cumin\"",
        "schema": "CREATE TABLE Characteristics (characteristic_type_code TEXT, characteristic_name TEXT, characteristic_id NUMBER); CREATE TABLE Ref_Characteristic_Types (characteristic_type_code TEXT, characteristic_type_description TEXT); CREATE TABLE Product_Characteristics (product_id NUMBER, characteristic_id NUMBER, product_characteristic_value TEXT); CREATE TABLE Products (typical_buying_price TEXT, typical_selling_price TEXT, product_name TEXT, product_id NUMBER);"
      }
    ],
    [
      {
        "question": "How many characteristics does the product named \"sesame\" have?",
        "query": "SELECT COUNT ( * ) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id WHERE t1.product_name = \"sesame\"",
        "schema": "CREATE TABLE Products (product_id NUMBER, product_name TEXT); CREATE TABLE Product_Characteristics (product_id NUMBER, product_characteristic_value TEXT, characteristic_id NUMBER); CREATE TABLE Characteristics (characteristic_id NUMBER, characteristic_type_code TEXT, characteristic_name TEXT);"
      },
      {
        "question": "What are the characteristic ids of those? Sorry!",
        "query": "SELECT characteristic_id FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id WHERE t1.product_name = \"sesame\"",
        "schema": "CREATE TABLE Characteristics (characteristic_name TEXT, characteristic_type_code TEXT, characteristic_id NUMBER); CREATE TABLE Products (product_id NUMBER, product_name TEXT); CREATE TABLE Product_Characteristics (characteristic_id NUMBER, product_id NUMBER, product_characteristic_value TEXT);"
      },
      {
        "question": "What is sesame's typical selling price?",
        "query": "SELECT typical_selling_price FROM products WHERE product_name = \"sesame\"",
        "schema": "CREATE TABLE Product_Characteristics (product_characteristic_value TEXT, characteristic_id NUMBER, product_id NUMBER); CREATE TABLE Products (typical_buying_price TEXT, product_name TEXT, product_id NUMBER, typical_selling_price TEXT); CREATE TABLE Characteristics (characteristic_type_code TEXT, characteristic_name TEXT, characteristic_id NUMBER);"
      },
      {
        "question": "What the most common characteristic id?",
        "query": "SELECT characteristic_id FROM product_characteristics GROUP BY characteristic_id ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Products (product_id NUMBER, typical_selling_price TEXT, product_name TEXT, typical_buying_price TEXT); CREATE TABLE Product_Characteristics (product_characteristic_value TEXT, product_id NUMBER, characteristic_id NUMBER); CREATE TABLE Characteristics (characteristic_id NUMBER, characteristic_name TEXT, characteristic_type_code TEXT);"
      },
      {
        "question": "What is the least common product category code?",
        "query": "SELECT product_category_code FROM products GROUP BY product_category_code ORDER BY COUNT ( * ) LIMIT 1",
        "schema": "CREATE TABLE Ref_Product_Categories (product_category_code TEXT); CREATE TABLE Product_Characteristics (characteristic_id NUMBER, product_characteristic_value TEXT, product_id NUMBER); CREATE TABLE Products (product_id NUMBER, typical_buying_price TEXT, typical_selling_price TEXT, product_name TEXT, product_category_code TEXT); CREATE TABLE Characteristics (characteristic_type_code TEXT, characteristic_id NUMBER, characteristic_name TEXT);"
      }
    ],
    [
      {
        "question": "hi,List out the all color description",
        "query": "SELECT color_description FROM ref_colors",
        "schema": "CREATE TABLE Products (product_description TEXT, color_code TEXT); CREATE TABLE Ref_Colors (color_code TEXT, color_description TEXT);"
      },
      {
        "question": "list out the color code for all the product name",
        "query": "SELECT color_code, product_name FROM products",
        "schema": "CREATE TABLE Ref_Colors (color_description TEXT, color_code TEXT); CREATE TABLE Products (color_code TEXT, product_description TEXT, product_name TEXT, product_id NUMBER);"
      },
      {
        "question": "list out the typical selling price for all product name",
        "query": "SELECT typical_selling_price, product_name FROM products",
        "schema": "CREATE TABLE Ref_Colors (color_code TEXT, color_description TEXT); CREATE TABLE Products (color_code TEXT, product_description TEXT, product_id NUMBER, product_name TEXT, typical_selling_price TEXT, typical_buying_price TEXT);"
      }
    ],
    [
      {
        "question": "what are the characteristic names of \"Cumin\"?",
        "query": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE t1.product_name = \"cumin\"",
        "schema": "CREATE TABLE Products (product_name TEXT, product_id NUMBER); CREATE TABLE Product_Characteristics (product_id NUMBER, characteristic_id NUMBER); CREATE TABLE Ref_Characteristic_Types (characteristic_type_description TEXT); CREATE TABLE Characteristics (characteristic_name TEXT, characteristic_id NUMBER, characteristic_type_code TEXT);"
      },
      {
        "question": "\"Cumin\" data types",
        "query": "SELECT t3.characteristic_data_type FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE t1.product_name = \"cumin\"",
        "schema": "CREATE TABLE Products (product_id NUMBER, product_name TEXT); CREATE TABLE Product_Characteristics (product_id NUMBER, characteristic_id NUMBER); CREATE TABLE Ref_Characteristic_Types (characteristic_type_description TEXT); CREATE TABLE Characteristics (characteristic_type_code TEXT, characteristic_data_type TEXT, characteristic_id NUMBER, characteristic_name TEXT);"
      },
      {
        "question": "what is the product id of \"cumin\"?",
        "query": "SELECT product_id FROM products WHERE product_name = 'cumin'",
        "schema": "CREATE TABLE Products (product_id NUMBER, product_name TEXT); CREATE TABLE Ref_Characteristic_Types (characteristic_type_description TEXT); CREATE TABLE Product_Characteristics (product_id NUMBER, characteristic_id NUMBER); CREATE TABLE Characteristics (characteristic_type_code TEXT, characteristic_id NUMBER, characteristic_name TEXT, characteristic_data_type TEXT);"
      },
      {
        "question": "what is the product_category_code for product id 1?",
        "query": "SELECT product_category_code FROM products WHERE product_id = '1'",
        "schema": "CREATE TABLE Product_Characteristics (characteristic_id NUMBER, product_id NUMBER); CREATE TABLE Ref_Product_Categories (product_category_code TEXT); CREATE TABLE Characteristics (characteristic_data_type TEXT, characteristic_type_code TEXT, characteristic_id NUMBER, characteristic_name TEXT); CREATE TABLE Ref_Characteristic_Types (characteristic_type_description TEXT); CREATE TABLE Products (product_id NUMBER, product_category_code TEXT, product_name TEXT);"
      },
      {
        "question": "what is the typical_selling_price of product id 1?",
        "query": "SELECT typical_selling_price FROM products WHERE product_id = '1'",
        "schema": "CREATE TABLE Ref_Product_Categories (product_category_code TEXT); CREATE TABLE Characteristics (characteristic_id NUMBER, characteristic_data_type TEXT, characteristic_type_code TEXT, characteristic_name TEXT); CREATE TABLE Product_Characteristics (product_id NUMBER, characteristic_id NUMBER, product_characteristic_value TEXT); CREATE TABLE Ref_Characteristic_Types (characteristic_type_description TEXT); CREATE TABLE Products (product_id NUMBER, typical_selling_price TEXT, product_name TEXT, product_category_code TEXT, typical_buying_price TEXT);"
      }
    ],
    [
      {
        "question": "how many colors are in list in the description?",
        "query": "SELECT COUNT ( * ) FROM ref_colors",
        "schema": "CREATE TABLE Products (color_code TEXT, product_description TEXT); CREATE TABLE Ref_Product_Categories (product_category_code TEXT); CREATE TABLE Ref_Colors (color_code TEXT, color_description TEXT);"
      },
      {
        "question": "Find the product list of the product name?",
        "query": "SELECT product_name FROM products",
        "schema": "CREATE TABLE Ref_Colors (color_description TEXT, color_code TEXT); CREATE TABLE Ref_Product_Categories (product_category_code TEXT); CREATE TABLE Products (color_code TEXT, product_id NUMBER, product_name TEXT, product_description TEXT);"
      },
      {
        "question": "Find the color of the product id 2?",
        "query": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code WHERE product_id = \"2\"",
        "schema": "CREATE TABLE Ref_Colors (color_code TEXT, color_description TEXT); CREATE TABLE Products (product_id NUMBER, product_name TEXT, color_code TEXT, product_description TEXT); CREATE TABLE Ref_Product_Categories (product_category_code TEXT);"
      },
      {
        "question": "how many herbs in the product category code?",
        "query": "SELECT COUNT ( * ) FROM products WHERE product_category_code = \"Herbs\"",
        "schema": "CREATE TABLE Ref_Product_Categories (product_category_description TEXT, product_category_code TEXT); CREATE TABLE Ref_Colors (color_description TEXT, color_code TEXT); CREATE TABLE Products (product_description TEXT, product_category_code TEXT, product_name TEXT, color_code TEXT, product_id NUMBER);"
      }
    ],
    [
      {
        "question": "Can you list the color code that has a color description of 'white'?",
        "query": "SELECT color_code FROM ref_colors WHERE color_description = 'white'",
        "schema": "CREATE TABLE Products (color_code TEXT, product_description TEXT, product_id NUMBER, product_name TEXT); CREATE TABLE Ref_Colors (color_code TEXT, color_description TEXT);"
      },
      {
        "question": "Can you list all product ids and their associated product category codes that have a color code value of 2?",
        "query": "SELECT product_id,product_category_code FROM products WHERE color_code = '2'",
        "schema": "CREATE TABLE Products (product_description TEXT, color_code TEXT, product_id NUMBER, product_category_code TEXT, product_name TEXT); CREATE TABLE Ref_Product_Categories (product_category_code TEXT, product_category_description TEXT); CREATE TABLE Product_Characteristics (product_id NUMBER, product_characteristic_value TEXT); CREATE TABLE Ref_Colors (color_code TEXT, color_description TEXT);"
      },
      {
        "question": "Sure, can you add to the table the unit of measure values for the product category codes of Spices and Herbs?",
        "query": "SELECT unit_of_measure FROM ref_product_categories WHERE product_category_code = 'Herbs' OR product_category_code = 'Spices'",
        "schema": "CREATE TABLE Ref_Colors (color_code TEXT, color_description TEXT); CREATE TABLE Products (product_category_code TEXT, product_id NUMBER, product_name TEXT, product_description TEXT, color_code TEXT); CREATE TABLE Ref_Product_Categories (product_category_code TEXT, product_category_description TEXT, unit_of_measure TEXT); CREATE TABLE Product_Characteristics (product_id NUMBER, product_characteristic_value TEXT);"
      },
      {
        "question": "Please delete that information and only show the product name for the product with a product id of 2.",
        "query": "SELECT product_name FROM products WHERE product_id = '2'",
        "schema": "CREATE TABLE Product_Characteristics (product_id NUMBER, product_characteristic_value TEXT); CREATE TABLE Ref_Colors (color_description TEXT, color_code TEXT); CREATE TABLE Ref_Product_Categories (product_category_description TEXT, product_category_code TEXT, unit_of_measure TEXT); CREATE TABLE Products (color_code TEXT, product_category_code TEXT, product_id NUMBER, product_description TEXT, product_name TEXT);"
      }
    ],
    [
      {
        "question": "Can you show me all the product names, codes and ids? | Do you mean the product names, color codes and ids? | Yes please.",
        "query": "SELECT product_name,color_code,product_id FROM products",
        "schema": "CREATE TABLE Products (color_code TEXT, product_name TEXT, product_id NUMBER); CREATE TABLE Ref_Colors (color_description TEXT, color_code TEXT);"
      },
      {
        "question": "I want to know the the product names and their color descriptions.",
        "query": "SELECT t1.product_name , t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code",
        "schema": "CREATE TABLE Ref_Colors (color_description TEXT, color_code TEXT); CREATE TABLE Products (product_id NUMBER, product_name TEXT, product_description TEXT, color_code TEXT);"
      },
      {
        "question": "Hmm, can you tell me the color description of the product with the name \u201ccatnip\u201d?",
        "query": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code WHERE t1.product_name = \"catnip\"",
        "schema": "CREATE TABLE Products (product_id NUMBER, product_name TEXT, color_code TEXT, product_description TEXT); CREATE TABLE Ref_Colors (color_description TEXT, color_code TEXT);"
      }
    ],
    [
      {
        "question": "Can you please show me name of the products?",
        "query": "SELECT DISTINCT product_name FROM products",
        "schema": "CREATE TABLE Products (product_description TEXT, product_id NUMBER, product_name TEXT);"
      },
      {
        "question": "Can you please show me the characteristic name used by least number of products?",
        "query": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id GROUP BY t3.characteristic_name ORDER BY COUNT ( * ) LIMIT 1",
        "schema": "CREATE TABLE Characteristics (characteristic_id NUMBER, characteristic_type_code TEXT, characteristic_name TEXT); CREATE TABLE Products (product_id NUMBER, product_name TEXT, product_description TEXT); CREATE TABLE Product_Characteristics (product_id NUMBER, product_characteristic_value TEXT, characteristic_id NUMBER);"
      },
      {
        "question": "Can you please show me the characteristic name used by most number of products?",
        "query": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id GROUP BY t3.characteristic_name ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Characteristics (characteristic_type_code TEXT, characteristic_name TEXT, characteristic_id NUMBER); CREATE TABLE Products (product_name TEXT, product_id NUMBER, product_description TEXT); CREATE TABLE Product_Characteristics (characteristic_id NUMBER, product_characteristic_value TEXT, product_id NUMBER);"
      }
    ],
    [
      {
        "question": "what are the names of the products with category \"Herbs\"",
        "query": "SELECT t1.product_name FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code WHERE product_category_code = \"Herbs\"",
        "schema": "CREATE TABLE Ref_Product_Categories (product_category_description TEXT, product_category_code TEXT); CREATE TABLE Ref_Colors (color_code TEXT); CREATE TABLE Products (product_id NUMBER, product_name TEXT, product_category_code TEXT, color_code TEXT);"
      },
      {
        "question": "what are the color descriptions for the products? | Do you want both the names and the color descriptions? | yes",
        "query": "SELECT t1.product_name , t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code WHERE product_category_code = \"Herbs\"",
        "schema": "CREATE TABLE Ref_Colors (color_description TEXT, color_code TEXT); CREATE TABLE Ref_Product_Categories (product_category_code TEXT, product_category_description TEXT); CREATE TABLE Products (product_id NUMBER, product_category_code TEXT, product_description TEXT, color_code TEXT, product_name TEXT);"
      },
      {
        "question": "list down all the product ids",
        "query": "SELECT product_id FROM products",
        "schema": "CREATE TABLE Products (color_code TEXT, product_description TEXT, product_name TEXT, product_id NUMBER, product_category_code TEXT); CREATE TABLE Ref_Colors (color_code TEXT, color_description TEXT); CREATE TABLE Ref_Product_Categories (product_category_code TEXT, product_category_description TEXT);"
      }
    ],
    [
      {
        "question": "how many products are there",
        "query": "SELECT COUNT ( * ) FROM products",
        "schema": "CREATE TABLE Ref_Product_Categories (product_category_code TEXT); CREATE TABLE Characteristics (characteristic_id NUMBER); CREATE TABLE Products (other_product_details TEXT, product_name TEXT, typical_selling_price TEXT, product_id NUMBER, product_description TEXT, product_category_code TEXT, typical_buying_price TEXT); CREATE TABLE Product_Characteristics (product_id NUMBER);"
      },
      {
        "question": "what is the product name of color code 2",
        "query": "SELECT product_name FROM products WHERE color_code = 2",
        "schema": "CREATE TABLE Ref_Colors (color_description TEXT, color_code TEXT); CREATE TABLE Products (other_product_details TEXT, typical_buying_price TEXT, typical_selling_price TEXT, product_description TEXT, product_category_code TEXT, color_code TEXT, product_id NUMBER, product_name TEXT); CREATE TABLE Characteristics (characteristic_id NUMBER); CREATE TABLE Ref_Product_Categories (product_category_code TEXT); CREATE TABLE Product_Characteristics (product_id NUMBER);"
      },
      {
        "question": "what is the characteristic data type of characteristic id 1",
        "query": "SELECT characteristic_data_type FROM CHARACTERISTICS WHERE characteristic_id = 1",
        "schema": "CREATE TABLE Products (product_category_code TEXT, product_name TEXT, product_id NUMBER, product_description TEXT, typical_selling_price TEXT, color_code TEXT, other_product_details TEXT, typical_buying_price TEXT); CREATE TABLE Characteristics (characteristic_id NUMBER, characteristic_name TEXT, characteristic_data_type TEXT, characteristic_type_code TEXT); CREATE TABLE Product_Characteristics (characteristic_id NUMBER, product_id NUMBER); CREATE TABLE Ref_Characteristic_Types (characteristic_type_code TEXT); CREATE TABLE Ref_Product_Categories (product_category_code TEXT); CREATE TABLE Ref_Colors (color_description TEXT, color_code TEXT);"
      }
    ],
    [
      {
        "question": "what is the color code of basil?",
        "query": "SELECT color_code FROM products WHERE product_name = 'basil'",
        "schema": "CREATE TABLE Products (product_category_code TEXT, product_id NUMBER, product_name TEXT, color_code TEXT); CREATE TABLE Ref_Colors (color_code TEXT, color_description TEXT);"
      },
      {
        "question": "what is the color with least products?",
        "query": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code GROUP BY t2.color_description ORDER BY COUNT ( * ) ASC LIMIT 1",
        "schema": "CREATE TABLE Ref_Colors (color_code TEXT, color_description TEXT); CREATE TABLE Products (color_code TEXT, product_id NUMBER, product_category_code TEXT, product_name TEXT);"
      },
      {
        "question": "what is the name of the product with color code 4?",
        "query": "SELECT product_name FROM products WHERE color_code = 4",
        "schema": "CREATE TABLE Ref_Colors (color_description TEXT, color_code TEXT); CREATE TABLE Products (product_description TEXT, product_id NUMBER, product_name TEXT, color_code TEXT, product_category_code TEXT);"
      },
      {
        "question": "What is the typical selling price of product paper?",
        "query": "SELECT typical_selling_price FROM products WHERE product_name = 'peper'",
        "schema": "CREATE TABLE Products (product_category_code TEXT, typical_selling_price TEXT, product_name TEXT, typical_buying_price TEXT, color_code TEXT, product_description TEXT, product_id NUMBER); CREATE TABLE Product_Characteristics (product_id NUMBER, product_characteristic_value TEXT); CREATE TABLE Ref_Colors (color_code TEXT, color_description TEXT);"
      }
    ],
    [
      {
        "question": "What is the product category of \"laurel\"? | Did you mean the product category of the product named \"laurel\"? | yes",
        "query": "SELECT product_category_code FROM products WHERE product_name = \"laurel\"",
        "schema": "CREATE TABLE Ref_Product_Categories (product_category_code TEXT); CREATE TABLE Products (product_name TEXT, product_category_code TEXT, product_id NUMBER);"
      },
      {
        "question": "And how many characteristics does this product have?",
        "query": "SELECT COUNT ( * ) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE t1.product_name = \"laurel\"",
        "schema": "CREATE TABLE Ref_Product_Categories (product_category_code TEXT); CREATE TABLE Characteristics (characteristic_type_code TEXT, characteristic_id NUMBER, characteristic_name TEXT); CREATE TABLE Products (product_category_code TEXT, product_id NUMBER, product_name TEXT); CREATE TABLE Product_Characteristics (product_id NUMBER, product_characteristic_value TEXT, characteristic_id NUMBER);"
      },
      {
        "question": "Than what is it's typical selling price?",
        "query": "SELECT typical_selling_price FROM products WHERE product_name = \"laurel\"",
        "schema": "CREATE TABLE Products (typical_buying_price TEXT, typical_selling_price TEXT, product_id NUMBER, product_name TEXT, product_category_code TEXT); CREATE TABLE Product_Characteristics (product_characteristic_value TEXT, product_id NUMBER, characteristic_id NUMBER); CREATE TABLE Characteristics (characteristic_name TEXT, characteristic_type_code TEXT, characteristic_id NUMBER); CREATE TABLE Ref_Product_Categories (product_category_code TEXT);"
      }
    ],
    [
      {
        "question": "How many products have the characteristic named \"hot\"",
        "query": "SELECT COUNT ( * ) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE t3.characteristic_name = \"hot\"",
        "schema": "CREATE TABLE Product_Characteristics (characteristic_id NUMBER, product_id NUMBER); CREATE TABLE Characteristics (characteristic_name TEXT, characteristic_type_code TEXT, characteristic_id NUMBER); CREATE TABLE Products (product_id NUMBER, product_name TEXT);"
      },
      {
        "question": "what is the name of the product with the characteristic \"hot\"?",
        "query": "SELECT t1.product_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE t3.characteristic_name = \"hot\"",
        "schema": "CREATE TABLE Characteristics (characteristic_name TEXT, characteristic_id NUMBER, characteristic_type_code TEXT); CREATE TABLE Product_Characteristics (product_id NUMBER, characteristic_id NUMBER); CREATE TABLE Products (product_id NUMBER, product_name TEXT);"
      },
      {
        "question": "what is the selling price of lotus?",
        "query": "SELECT t1.typical_selling_price FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE t1.product_name = \"lotus\"",
        "schema": "CREATE TABLE Product_Characteristics (product_characteristic_value TEXT, product_id NUMBER, characteristic_id NUMBER); CREATE TABLE Characteristics (characteristic_id NUMBER, characteristic_type_code TEXT, characteristic_name TEXT); CREATE TABLE Products (product_id NUMBER, typical_buying_price TEXT, product_name TEXT, typical_selling_price TEXT);"
      }
    ],
    [
      {
        "question": "how many distinct names of the products have characteristc name warm?",
        "query": "SELECT COUNT ( DISTINCT t1.product_name ) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE t3.characteristic_name = \"warm\"",
        "schema": "CREATE TABLE Product_Characteristics (characteristic_id NUMBER, product_id NUMBER); CREATE TABLE Products (product_id NUMBER, product_name TEXT); CREATE TABLE Characteristics (characteristic_name TEXT, characteristic_id NUMBER);"
      },
      {
        "question": "Which distinct name is that?",
        "query": "SELECT DISTINCT t1.product_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE t3.characteristic_name = \"warm\"",
        "schema": "CREATE TABLE Characteristics (characteristic_name TEXT, characteristic_id NUMBER); CREATE TABLE Product_Characteristics (characteristic_id NUMBER, product_id NUMBER); CREATE TABLE Products (product_name TEXT, product_id NUMBER);"
      },
      {
        "question": "What is the name of a spice with buying price of 352447.2874677?",
        "query": "SELECT product_name FROM products WHERE typical_buying_price = 352447.2874677",
        "schema": "CREATE TABLE Products (typical_buying_price TEXT, typical_selling_price TEXT, product_id NUMBER, product_name TEXT); CREATE TABLE Product_Characteristics (product_characteristic_value TEXT, characteristic_id NUMBER, product_id NUMBER); CREATE TABLE Characteristics (characteristic_name TEXT, characteristic_id NUMBER);"
      },
      {
        "question": "What is its color code?",
        "query": "SELECT color_code FROM products WHERE typical_buying_price = 352447.2874677",
        "schema": "CREATE TABLE Product_Characteristics (product_characteristic_value TEXT, product_id NUMBER, characteristic_id NUMBER); CREATE TABLE Characteristics (characteristic_name TEXT, characteristic_id NUMBER); CREATE TABLE Ref_Colors (color_description TEXT, color_code TEXT); CREATE TABLE Products (product_id NUMBER, typical_buying_price TEXT, product_name TEXT, typical_selling_price TEXT, color_code TEXT);"
      }
    ],
    [
      {
        "question": "What is the product description for this product?",
        "query": "SELECT product_description FROM products WHERE product_name = \"chervil\"",
        "schema": "CREATE TABLE Products (product_name TEXT, product_description TEXT, product_id NUMBER, other_product_details TEXT); CREATE TABLE Ref_Product_Categories (product_category_description TEXT, product_category_code TEXT);"
      },
      {
        "question": "Also, what is the color code?",
        "query": "SELECT t1.color_code , t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code WHERE t1.product_name = \"chervil\"",
        "schema": "CREATE TABLE Ref_Product_Categories (product_category_description TEXT, product_category_code TEXT); CREATE TABLE Products (other_product_details TEXT, product_name TEXT, product_id NUMBER, product_description TEXT, color_code TEXT); CREATE TABLE Ref_Colors (color_code TEXT, color_description TEXT);"
      },
      {
        "question": "Great, what is the typical product price for this product?",
        "query": "SELECT typical_buying_price FROM products WHERE product_name = \"chervil\"",
        "schema": "CREATE TABLE Ref_Product_Categories (product_category_code TEXT, product_category_description TEXT); CREATE TABLE Products (typical_buying_price TEXT, typical_selling_price TEXT, product_id NUMBER, other_product_details TEXT, color_code TEXT, product_name TEXT, product_description TEXT); CREATE TABLE Ref_Colors (color_description TEXT, color_code TEXT);"
      },
      {
        "question": "No worries, are there any other product details that I should know about?",
        "query": "SELECT other_product_details FROM products WHERE product_name = \"chervil\"",
        "schema": "CREATE TABLE Characteristics (other_characteristic_details TEXT); CREATE TABLE Ref_Colors (color_code TEXT, color_description TEXT); CREATE TABLE Ref_Product_Categories (product_category_description TEXT, product_category_code TEXT); CREATE TABLE Products (product_name TEXT, product_id NUMBER, typical_selling_price TEXT, product_description TEXT, color_code TEXT, typical_buying_price TEXT, other_product_details TEXT);"
      }
    ],
    [
      {
        "question": "what are the characteristics of the product name 'sesame'?",
        "query": "SELECT t2.characteristic_id FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id WHERE t1.product_name = \"sesame\"",
        "schema": "CREATE TABLE Characteristics (characteristic_type_code TEXT, characteristic_id NUMBER, characteristic_name TEXT); CREATE TABLE Products (product_id NUMBER, product_name TEXT); CREATE TABLE Product_Characteristics (product_characteristic_value TEXT, characteristic_id NUMBER, product_id NUMBER); CREATE TABLE Ref_Characteristic_Types (characteristic_type_description TEXT, characteristic_type_code TEXT);"
      },
      {
        "question": "how many characteristics does the product name 'sesame' have?",
        "query": "SELECT COUNT ( * ) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id WHERE t1.product_name = \"sesame\"",
        "schema": "CREATE TABLE Product_Characteristics (characteristic_id NUMBER, product_id NUMBER, product_characteristic_value TEXT); CREATE TABLE Characteristics (characteristic_type_code TEXT, characteristic_id NUMBER, characteristic_name TEXT); CREATE TABLE Products (product_id NUMBER, product_name TEXT); CREATE TABLE Ref_Characteristic_Types (characteristic_type_description TEXT, characteristic_type_code TEXT);"
      },
      {
        "question": "what is the product category code for product name 'sesame'",
        "query": "SELECT product_category_code FROM products WHERE product_name = 'sesame'",
        "schema": "CREATE TABLE Ref_Product_Categories (product_category_code TEXT); CREATE TABLE Product_Characteristics (product_id NUMBER, product_characteristic_value TEXT, characteristic_id NUMBER); CREATE TABLE Ref_Characteristic_Types (characteristic_type_description TEXT, characteristic_type_code TEXT); CREATE TABLE Characteristics (characteristic_name TEXT, characteristic_id NUMBER, characteristic_type_code TEXT); CREATE TABLE Products (product_id NUMBER, product_category_code TEXT, product_name TEXT);"
      },
      {
        "question": "what is the product characteristic value for product name 'sesame'",
        "query": "SELECT t2.product_characteristic_value FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id WHERE t1.product_name = \"sesame\"",
        "schema": "CREATE TABLE Ref_Product_Categories (product_category_code TEXT, unit_of_measure TEXT); CREATE TABLE Products (product_category_code TEXT, product_id NUMBER, product_name TEXT); CREATE TABLE Product_Characteristics (product_characteristic_value TEXT, product_id NUMBER, characteristic_id NUMBER); CREATE TABLE Ref_Characteristic_Types (characteristic_type_description TEXT, characteristic_type_code TEXT); CREATE TABLE Characteristics (characteristic_type_code TEXT, characteristic_name TEXT, characteristic_id NUMBER);"
      }
    ],
    [
      {
        "question": "How many different product categories are there?",
        "query": "SELECT DISTINCT product_category_code FROM products",
        "schema": "CREATE TABLE Products (product_id NUMBER, product_name TEXT, product_category_code TEXT); CREATE TABLE Ref_Product_Categories (unit_of_measure TEXT, product_category_code TEXT, product_category_description TEXT);"
      },
      {
        "question": "What units of measurement are used? | can you give more information about you question? | What unit of measurement is used for seeds category?",
        "query": "SELECT unit_of_measure FROM ref_product_categories WHERE product_category_code = 'Seeds'",
        "schema": "CREATE TABLE Products (product_category_code TEXT, product_name TEXT, product_id NUMBER); CREATE TABLE Ref_Product_Categories (unit_of_measure TEXT, product_category_description TEXT, product_category_code TEXT);"
      },
      {
        "question": "What is the measurement used for chervil?",
        "query": "SELECT t2.unit_of_measure FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code = t2.product_category_code WHERE t1.product_name = \"chervil\"",
        "schema": "CREATE TABLE Products (product_category_code TEXT, product_name TEXT, product_id NUMBER); CREATE TABLE Ref_Product_Categories (product_category_code TEXT, unit_of_measure TEXT, product_category_description TEXT);"
      }
    ],
    [
      {
        "question": "How many products do you have?",
        "query": "SELECT COUNT ( * ) FROM products",
        "schema": "CREATE TABLE Products (other_product_details TEXT, product_id NUMBER, typical_buying_price TEXT, product_name TEXT); CREATE TABLE Characteristics (characteristic_id NUMBER); CREATE TABLE Ref_Product_Categories (product_category_code TEXT); CREATE TABLE Product_Characteristics (characteristic_id NUMBER, product_id NUMBER);"
      },
      {
        "question": "Find the number of characteristics that the product \"caraway\" has.",
        "query": "SELECT COUNT ( * ) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE t1.product_name = \"caraway\"",
        "schema": "CREATE TABLE Products (other_product_details TEXT, product_id NUMBER, product_name TEXT, typical_buying_price TEXT); CREATE TABLE Characteristics (characteristic_name TEXT, characteristic_type_code TEXT, characteristic_id NUMBER); CREATE TABLE Ref_Product_Categories (product_category_code TEXT); CREATE TABLE Product_Characteristics (characteristic_id NUMBER, product_id NUMBER, product_characteristic_value TEXT);"
      },
      {
        "question": "Finally, can you provide the number of characteristics of the product with the name \"flax\"?",
        "query": "SELECT COUNT ( * ) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE t1.product_name = \"flax\"",
        "schema": "CREATE TABLE Products (typical_buying_price TEXT, product_id NUMBER, other_product_details TEXT, product_name TEXT); CREATE TABLE Characteristics (characteristic_type_code TEXT, characteristic_name TEXT, characteristic_id NUMBER); CREATE TABLE Ref_Product_Categories (product_category_code TEXT); CREATE TABLE Product_Characteristics (product_id NUMBER, characteristic_id NUMBER, product_characteristic_value TEXT);"
      }
    ],
    [
      {
        "question": "Show the name of the product with product id 1?",
        "query": "SELECT product_name FROM products WHERE product_id = '1'",
        "schema": "CREATE TABLE Products (product_name TEXT, product_id NUMBER); CREATE TABLE Product_Characteristics (product_id NUMBER);"
      },
      {
        "question": "show the number of products with category Spices?",
        "query": "SELECT COUNT ( * ) FROM products WHERE product_category_code = 'Spices'",
        "schema": "CREATE TABLE Products (product_name TEXT, product_category_code TEXT, product_id NUMBER); CREATE TABLE Product_Characteristics (product_id NUMBER); CREATE TABLE Ref_Product_Categories (product_category_description TEXT, product_category_code TEXT);"
      },
      {
        "question": "Show the number of products with category Spices and typically sold above 1000?",
        "query": "SELECT COUNT ( * ) FROM products WHERE product_category_code = \"Spices\" AND typical_buying_price > 1000",
        "schema": "CREATE TABLE Ref_Product_Categories (product_category_description TEXT, product_category_code TEXT); CREATE TABLE Product_Characteristics (product_id NUMBER); CREATE TABLE Products (product_name TEXT, typical_buying_price TEXT, typical_selling_price TEXT, product_category_code TEXT, product_id NUMBER);"
      }
    ],
    [
      {
        "question": "Can you please list all the characteristics of the product named sesame?",
        "query": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE t1.product_name = \"sesame\"",
        "schema": "CREATE TABLE Characteristics (characteristic_name TEXT, characteristic_type_code TEXT, characteristic_id NUMBER); CREATE TABLE Product_Characteristics (product_id NUMBER, characteristic_id NUMBER); CREATE TABLE Ref_Characteristic_Types (characteristic_type_code TEXT, characteristic_type_description TEXT); CREATE TABLE Products (product_name TEXT, product_id NUMBER);"
      },
      {
        "question": "Can you please list all the characteristics of the product named sesame with the type code \"Grade\"?",
        "query": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE t1.product_name = \"sesame\" AND t3.characteristic_type_code = \"Grade\"",
        "schema": "CREATE TABLE Product_Characteristics (product_id NUMBER, characteristic_id NUMBER); CREATE TABLE Products (product_id NUMBER, product_name TEXT); CREATE TABLE Characteristics (characteristic_name TEXT, characteristic_id NUMBER, characteristic_type_code TEXT); CREATE TABLE Ref_Characteristic_Types (characteristic_type_code TEXT, characteristic_type_description TEXT);"
      },
      {
        "question": "What is the characteristic name of the product with the highest typical selling price?",
        "query": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id ORDER BY t1.typical_selling_price DESC LIMIT 1",
        "schema": "CREATE TABLE Ref_Characteristic_Types (characteristic_type_code TEXT, characteristic_type_description TEXT); CREATE TABLE Characteristics (characteristic_type_code TEXT, characteristic_id NUMBER, characteristic_name TEXT); CREATE TABLE Products (product_id NUMBER, typical_buying_price TEXT, product_name TEXT, typical_selling_price TEXT); CREATE TABLE Product_Characteristics (characteristic_id NUMBER, product_characteristic_value TEXT, product_id NUMBER);"
      }
    ],
    [
      {
        "question": "Which product descriptions contain the letter t?",
        "query": "SELECT t2.product_name FROM ref_product_categories AS t1 JOIN products AS t2 ON t1.product_category_code = t2.product_category_code WHERE t2.product_description LIKE '%t%'",
        "schema": "CREATE TABLE Ref_Product_Categories (product_category_description TEXT, product_category_code TEXT); CREATE TABLE Products (product_name TEXT, product_description TEXT, product_category_code TEXT, product_id NUMBER);"
      },
      {
        "question": "What are their prices? | Do you mean typical buying price or typical selling price? | Buying price.",
        "query": "SELECT t2.typical_buying_price FROM ref_product_categories AS t1 JOIN products AS t2 ON t1.product_category_code = t2.product_category_code WHERE t2.product_description LIKE '%t%'",
        "schema": "CREATE TABLE Ref_Product_Categories (product_category_code TEXT, product_category_description TEXT); CREATE TABLE Products (product_category_code TEXT, product_id NUMBER, typical_buying_price TEXT, typical_selling_price TEXT, product_description TEXT, product_name TEXT);"
      },
      {
        "question": "What is the average buying price?",
        "query": "SELECT AVG ( t2.typical_buying_price ) FROM ref_product_categories AS t1 JOIN products AS t2 ON t1.product_category_code = t2.product_category_code WHERE t2.product_description LIKE '%t%'",
        "schema": "CREATE TABLE Ref_Product_Categories (product_category_code TEXT, product_category_description TEXT); CREATE TABLE Products (typical_selling_price TEXT, product_id NUMBER, product_category_code TEXT, product_name TEXT, typical_buying_price TEXT, product_description TEXT);"
      },
      {
        "question": "Which of those products does not have a buying price?",
        "query": "SELECT t2.product_name FROM ref_product_categories AS t1 JOIN products AS t2 ON t1.product_category_code = t2.product_category_code WHERE t2.product_description LIKE '%t%' AND t2.typical_buying_price = \"\"",
        "schema": "CREATE TABLE Ref_Product_Categories (product_category_description TEXT, product_category_code TEXT); CREATE TABLE Products (product_id NUMBER, product_description TEXT, product_category_code TEXT, product_name TEXT, typical_selling_price TEXT, typical_buying_price TEXT);"
      }
    ],
    [
      {
        "question": "Hello!  Can you please list all of the product names that have the color description of \"white\"?",
        "query": "SELECT t1.product_name FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code WHERE t2.color_description = \"white\"",
        "schema": "CREATE TABLE Ref_Colors (color_code TEXT, color_description TEXT); CREATE TABLE Products (product_description TEXT, color_code TEXT, product_name TEXT, product_id NUMBER);"
      },
      {
        "question": "Thank you for that! Can you update this list to show the typical selling price for each?",
        "query": "SELECT t1.product_name,t1.typical_selling_price FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code WHERE t2.color_description = \"white\"",
        "schema": "CREATE TABLE Products (color_code TEXT, product_name TEXT, typical_selling_price TEXT, product_description TEXT, typical_buying_price TEXT, product_id NUMBER); CREATE TABLE Ref_Colors (color_description TEXT, color_code TEXT);"
      },
      {
        "question": "Thank you!  Can you tell me what the average typical selling price is of all of the product types? | do you mean the average typical selling price of all product category code? | Yes!  Can you provide me with the average typical selling price of all product category code?",
        "query": "SELECT product_category_code, AVG ( typical_buying_price ) FROM products GROUP BY product_category_code",
        "schema": "CREATE TABLE Ref_Product_Categories (product_category_description TEXT, product_category_code TEXT); CREATE TABLE Products (product_description TEXT, product_category_code TEXT, color_code TEXT, typical_buying_price TEXT, product_id NUMBER, product_name TEXT, typical_selling_price TEXT); CREATE TABLE Ref_Colors (color_code TEXT, color_description TEXT);"
      }
    ],
    [
      {
        "question": "What are the names of the products with the color description \"red\"?",
        "query": "SELECT product_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code = t4.color_code WHERE t4.color_description = \"red\"",
        "schema": "CREATE TABLE Products (color_code TEXT, product_description TEXT, product_name TEXT, product_id NUMBER); CREATE TABLE Ref_Colors (color_description TEXT, color_code TEXT); CREATE TABLE Characteristics (characteristic_id NUMBER); CREATE TABLE Product_Characteristics (characteristic_id NUMBER, product_id NUMBER);"
      },
      {
        "question": "What are the names of the products that have the characteristic name \"fast\"?",
        "query": "SELECT product_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code = t4.color_code WHERE t3.characteristic_name = \"fast\"",
        "schema": "CREATE TABLE Characteristics (characteristic_id NUMBER, characteristic_name TEXT); CREATE TABLE Products (product_name TEXT, product_description TEXT, product_id NUMBER, color_code TEXT); CREATE TABLE Ref_Colors (color_code TEXT, color_description TEXT); CREATE TABLE Product_Characteristics (product_id NUMBER, characteristic_id NUMBER);"
      },
      {
        "question": "What are the names of the products that have the characteristic name \"fast\" and the color description \"red\"?",
        "query": "SELECT product_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code = t4.color_code WHERE t4.color_description = \"red\" AND t3.characteristic_name = \"fast\"",
        "schema": "CREATE TABLE Product_Characteristics (characteristic_id NUMBER, product_id NUMBER); CREATE TABLE Products (product_name TEXT, product_description TEXT, color_code TEXT, product_id NUMBER); CREATE TABLE Characteristics (characteristic_id NUMBER, characteristic_name TEXT); CREATE TABLE Ref_Colors (color_code TEXT, color_description TEXT);"
      },
      {
        "question": "What about products with the characteristic name \"slow\"?",
        "query": "SELECT product_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code = t4.color_code WHERE t3.characteristic_name = \"slow\"",
        "schema": "CREATE TABLE Products (product_description TEXT, product_id NUMBER, color_code TEXT, product_name TEXT); CREATE TABLE Characteristics (characteristic_name TEXT, characteristic_id NUMBER); CREATE TABLE Ref_Colors (color_code TEXT, color_description TEXT); CREATE TABLE Product_Characteristics (characteristic_id NUMBER, product_id NUMBER);"
      },
      {
        "question": "What are the color descriptions of those?",
        "query": "SELECT t4.color_description FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code = t4.color_code WHERE t3.characteristic_name = \"slow\"",
        "schema": "CREATE TABLE Products (product_id NUMBER, product_description TEXT, product_name TEXT, color_code TEXT); CREATE TABLE Ref_Colors (color_code TEXT, color_description TEXT); CREATE TABLE Product_Characteristics (product_id NUMBER, characteristic_id NUMBER); CREATE TABLE Characteristics (characteristic_id NUMBER, characteristic_name TEXT);"
      }
    ],
    [
      {
        "question": "what is the color code of product name \"chervil\"?",
        "query": "SELECT t1.color_code FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code WHERE t1.product_name = \"chervil\"",
        "schema": "CREATE TABLE Products (color_code TEXT, product_id NUMBER, product_name TEXT); CREATE TABLE Ref_Colors (color_description TEXT, color_code TEXT);"
      },
      {
        "question": "what is the color description of it?",
        "query": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code WHERE t1.product_name = \"chervil\"",
        "schema": "CREATE TABLE Products (color_code TEXT, product_description TEXT, product_name TEXT, product_id NUMBER); CREATE TABLE Ref_Colors (color_description TEXT, color_code TEXT);"
      },
      {
        "question": "What is the product id of it?",
        "query": "SELECT t1.product_id FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code WHERE t1.product_name = \"chervil\"",
        "schema": "CREATE TABLE Products (color_code TEXT, product_id NUMBER, product_name TEXT, product_description TEXT); CREATE TABLE Ref_Colors (color_code TEXT, color_description TEXT);"
      }
    ],
    [
      {
        "question": "What are the names of the products with the category \"Herbs\" please?",
        "query": "SELECT t1.product_name FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code WHERE product_category_code = \"Herbs\"",
        "schema": "CREATE TABLE Ref_Product_Categories (product_category_code TEXT, product_category_description TEXT); CREATE TABLE Products (product_id NUMBER, product_category_code TEXT, product_name TEXT, color_code TEXT); CREATE TABLE Ref_Colors (color_code TEXT);"
      },
      {
        "question": "What are their color descriptions?",
        "query": "SELECT t1.product_name , t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code WHERE product_category_code = \"Herbs\"",
        "schema": "CREATE TABLE Ref_Colors (color_description TEXT, color_code TEXT); CREATE TABLE Products (product_name TEXT, product_description TEXT, product_category_code TEXT, product_id NUMBER, color_code TEXT); CREATE TABLE Ref_Product_Categories (product_category_code TEXT, product_category_description TEXT);"
      },
      {
        "question": "What are their product descriptions?",
        "query": "SELECT t1.product_name , t2.color_description , t1.product_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code WHERE product_category_code = \"Herbs\"",
        "schema": "CREATE TABLE Products (product_description TEXT, product_name TEXT, product_category_code TEXT, product_id NUMBER, color_code TEXT); CREATE TABLE Ref_Product_Categories (product_category_description TEXT, product_category_code TEXT); CREATE TABLE Ref_Colors (color_code TEXT, color_description TEXT);"
      },
      {
        "question": "What are their typical selling prices?",
        "query": "SELECT t1.typical_selling_price FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code WHERE product_category_code = \"Herbs\"",
        "schema": "CREATE TABLE Products (typical_buying_price TEXT, product_name TEXT, product_category_code TEXT, product_description TEXT, color_code TEXT, typical_selling_price TEXT, product_id NUMBER); CREATE TABLE Ref_Colors (color_description TEXT, color_code TEXT); CREATE TABLE Ref_Product_Categories (product_category_code TEXT, product_category_description TEXT);"
      },
      {
        "question": "What is the average typical buying price?",
        "query": "SELECT AVG ( typical_buying_price ) FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code WHERE product_category_code = \"Herbs\"",
        "schema": "CREATE TABLE Products (typical_selling_price TEXT, product_description TEXT, color_code TEXT, typical_buying_price TEXT, product_id NUMBER, product_category_code TEXT, product_name TEXT); CREATE TABLE Ref_Colors (color_description TEXT, color_code TEXT); CREATE TABLE Ref_Product_Categories (product_category_description TEXT, product_category_code TEXT); CREATE TABLE Product_Characteristics (product_id NUMBER, product_characteristic_value TEXT);"
      }
    ],
    [
      {
        "question": "What is the color description of the product with the name \"catnip\"?",
        "query": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code WHERE t1.product_name = \"catnip\"",
        "schema": "CREATE TABLE Products (product_name TEXT, product_description TEXT, color_code TEXT, product_id NUMBER); CREATE TABLE Ref_Colors (color_description TEXT, color_code TEXT);"
      },
      {
        "question": "What are the product names of all products with the color description red?",
        "query": "SELECT t1.product_name FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code WHERE t2.color_description = \"red\"",
        "schema": "CREATE TABLE Products (product_name TEXT, product_description TEXT, color_code TEXT, product_id NUMBER); CREATE TABLE Ref_Colors (color_description TEXT, color_code TEXT);"
      },
      {
        "question": "Could you add in the typical buying price of each of those please? | The price of basil is 503.8431967. The price of sesame is 1284268.0659 and price of caraway is 24493 | What are the product descriptions of all products with the color description green?",
        "query": "SELECT t1.product_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code WHERE t2.color_description = \"green\"",
        "schema": "CREATE TABLE Ref_Colors (color_description TEXT, color_code TEXT); CREATE TABLE Products (product_description TEXT, typical_buying_price TEXT, color_code TEXT, product_id NUMBER, typical_selling_price TEXT, product_name TEXT);"
      },
      {
        "question": "Can you add into the table their product names, please?",
        "query": "SELECT t1.product_name, t1.product_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code WHERE t2.color_description = \"green\"",
        "schema": "CREATE TABLE Ref_Colors (color_description TEXT, color_code TEXT); CREATE TABLE Products (typical_buying_price TEXT, typical_selling_price TEXT, product_name TEXT, product_id NUMBER, product_description TEXT, color_code TEXT);"
      }
    ],
    [
      {
        "question": "Hello!  Can you please show me a list of all of the product names and their associated product IDs?",
        "query": "SELECT t1.product_id,t1.product_name FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code = t2.product_category_code",
        "schema": "CREATE TABLE Product_Characteristics (product_id NUMBER); CREATE TABLE Ref_Product_Categories (product_category_code TEXT); CREATE TABLE Products (product_name TEXT, product_category_code TEXT, product_id NUMBER);"
      },
      {
        "question": "Thank you very much!  Can you filter this list to show only the item with the product id of 11, and show me the associated product category code?",
        "query": "SELECT t1.product_id,t1.product_name,t1.product_category_code FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code = t2.product_category_code WHERE t1.product_id = 11",
        "schema": "CREATE TABLE Product_Characteristics (product_id NUMBER); CREATE TABLE Ref_Product_Categories (product_category_code TEXT); CREATE TABLE Products (product_name TEXT, product_category_code TEXT, product_id NUMBER);"
      },
      {
        "question": "Thank you very much!  Can you update this to display the product category code, product category description, and unit of measure?",
        "query": "SELECT t2.product_category_code,t2.product_category_description, t2.unit_of_measure FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code = t2.product_category_code WHERE t1.product_id = 11",
        "schema": "CREATE TABLE Product_Characteristics (product_id NUMBER); CREATE TABLE Products (product_name TEXT, product_id NUMBER, product_description TEXT, product_category_code TEXT); CREATE TABLE Ref_Product_Categories (product_category_description TEXT, product_category_code TEXT, unit_of_measure TEXT);"
      }
    ],
    [
      {
        "question": "how many ref colors are on the table",
        "query": "SELECT COUNT ( DISTINCT color_description ) FROM ref_colors",
        "schema": "CREATE TABLE Ref_Colors (color_description TEXT, color_code TEXT); CREATE TABLE Products (color_code TEXT, product_id NUMBER);"
      },
      {
        "question": "list out the product names",
        "query": "SELECT product_name FROM products",
        "schema": "CREATE TABLE Ref_Colors (color_description TEXT, color_code TEXT); CREATE TABLE Products (product_description TEXT, product_name TEXT, product_id NUMBER, color_code TEXT);"
      },
      {
        "question": "what is typical selling price of cumin",
        "query": "SELECT typical_selling_price FROM products WHERE product_name = \"cumin\"",
        "schema": "CREATE TABLE Ref_Colors (color_description TEXT, color_code TEXT); CREATE TABLE Products (color_code TEXT, typical_selling_price TEXT, product_id NUMBER, product_description TEXT, typical_buying_price TEXT, product_name TEXT); CREATE TABLE Product_Characteristics (product_id NUMBER);"
      }
    ]
  ],
  "network_2": [
    [
      {
        "question": "How long is the longest relationship?",
        "query": "SELECT MAX ( YEAR ) FROM personfriend",
        "schema": "CREATE TABLE PersonFriend (year NUMBER, friend TEXT, name TEXT); CREATE TABLE Person (name TEXT);"
      },
      {
        "question": "What is the name of that person?",
        "query": "SELECT name FROM personfriend WHERE YEAR = ( SELECT MAX ( YEAR ) FROM personfriend )",
        "schema": "CREATE TABLE Person (name TEXT); CREATE TABLE PersonFriend (year NUMBER, name TEXT, friend TEXT);"
      },
      {
        "question": "Who is his friend?",
        "query": "SELECT friend FROM personfriend WHERE name = \"Zach\" AND YEAR = 12",
        "schema": "CREATE TABLE PersonFriend (name TEXT, friend TEXT, year NUMBER); CREATE TABLE Person (name TEXT);"
      }
    ],
    [
      {
        "question": "Can you list the person names and their friends?",
        "query": "SELECT name, friend FROM personfriend",
        "schema": "CREATE TABLE PersonFriend (name TEXT, friend TEXT); CREATE TABLE Person (name TEXT);"
      },
      {
        "question": "Hmm, I want to know which friends are above 40 years old or below 30 years old. | do you mean the name of the person who has friends with age above 40 and under age 30? | I want to know the ages of the friends first, please.",
        "query": "SELECT t2.friend, t1.age FROM person AS t1 JOIN personfriend AS t2 ON t1.name = t2.friend",
        "schema": "CREATE TABLE Person (name TEXT, age NUMBER); CREATE TABLE PersonFriend (friend TEXT, name TEXT);"
      },
      {
        "question": "Please tell me the names of the person who has friends with age above 40 and under age 30.",
        "query": "SELECT t1.name FROM person AS t1 JOIN personfriend AS t2 ON t1.name = t2.name WHERE t2.friend IN ( SELECT name FROM person WHERE age > 40 ) INTERSECT SELECT t1.name FROM person AS t1 JOIN personfriend AS t2 ON t1.name = t2.name WHERE t2.friend IN ( SELECT name FROM person WHERE age < 30 )",
        "schema": "CREATE TABLE Person (name TEXT, age NUMBER); CREATE TABLE PersonFriend (year NUMBER, name TEXT, friend TEXT);"
      },
      {
        "question": "How about the names of different persons who have friends with age above 40 and under age 30?",
        "query": "SELECT t1.name FROM person AS t1 JOIN personfriend AS t2 ON t1.name = t2.name WHERE t2.friend IN ( SELECT name FROM person WHERE age > 40 ) UNION SELECT t1.name FROM person AS t1 JOIN personfriend AS t2 ON t1.name = t2.name WHERE t2.friend IN ( SELECT name FROM person WHERE age < 30 )",
        "schema": "CREATE TABLE Person (name TEXT, age NUMBER); CREATE TABLE PersonFriend (friend TEXT, name TEXT, year NUMBER);"
      }
    ],
    [
      {
        "question": "how many female persons are in the table",
        "query": "SELECT COUNT ( * ) FROM person WHERE gender = \"female\"",
        "schema": "CREATE TABLE Person (name TEXT, job TEXT, gender TEXT);"
      },
      {
        "question": "please tell me alice friend name",
        "query": "SELECT t2.friend FROM person AS t1 JOIN personfriend AS t2 ON t1.name = t2.name WHERE t1.name = 'Alice'",
        "schema": "CREATE TABLE PersonFriend (name TEXT, friend TEXT); CREATE TABLE Person (job TEXT, name TEXT, gender TEXT);"
      },
      {
        "question": "what is the age of bob",
        "query": "SELECT age FROM person WHERE name = \"Bob\"",
        "schema": "CREATE TABLE Person (job TEXT, gender TEXT, age NUMBER, name TEXT); CREATE TABLE PersonFriend (name TEXT, friend TEXT);"
      }
    ],
    [
      {
        "question": "How many friends does Zach have?",
        "query": "SELECT COUNT ( friend ) FROM personfriend WHERE name = 'Zach'",
        "schema": "CREATE TABLE Person (name TEXT); CREATE TABLE PersonFriend (friend TEXT, name TEXT);"
      },
      {
        "question": "How long has zach been friends with each of them?",
        "query": "SELECT name,friend,YEAR FROM personfriend WHERE name = 'Zach'",
        "schema": "CREATE TABLE Person (name TEXT); CREATE TABLE PersonFriend (year NUMBER, name TEXT, friend TEXT);"
      },
      {
        "question": "What are the ages of Zach's friends?",
        "query": "SELECT t1.name,friend,YEAR,age FROM personfriend AS t1 JOIN person AS t2 ON t1.friend = t2.name WHERE t1.name = 'Zach'",
        "schema": "CREATE TABLE PersonFriend (year NUMBER, friend TEXT, name TEXT); CREATE TABLE Person (name TEXT, age NUMBER);"
      },
      {
        "question": "Which person has zach been friends with the longest?",
        "query": "SELECT t1.age FROM person AS t1 JOIN personfriend AS t2 ON t1.name = t2.friend WHERE t2.name = 'Zach' AND t2.year = ( SELECT MAX ( YEAR ) FROM personfriend WHERE name = 'Zach' )",
        "schema": "CREATE TABLE PersonFriend (year NUMBER, friend TEXT, name TEXT); CREATE TABLE Person (age NUMBER, name TEXT);"
      },
      {
        "question": "What does dan do for work?",
        "query": "SELECT job FROM person WHERE name = 'Dan'",
        "schema": "CREATE TABLE PersonFriend (year NUMBER, name TEXT, friend TEXT); CREATE TABLE Person (age NUMBER, job TEXT, name TEXT);"
      },
      {
        "question": "How old is dan?",
        "query": "SELECT age FROM person WHERE name = 'Dan'",
        "schema": "CREATE TABLE Person (name TEXT, age NUMBER, job TEXT); CREATE TABLE PersonFriend (friend TEXT, name TEXT, year NUMBER);"
      }
    ],
    [
      {
        "question": "which friend of zachs has the longest year relationship?",
        "query": "SELECT t1.name FROM person AS t1 JOIN personfriend AS t2 ON t1.name = t2.friend WHERE t2.name = 'Zach' AND t2.year = ( SELECT MAX ( YEAR ) FROM personfriend WHERE name = 'Zach' )",
        "schema": "CREATE TABLE PersonFriend (year NUMBER, friend TEXT, name TEXT); CREATE TABLE Person (name TEXT);"
      },
      {
        "question": "how old is dan?",
        "query": "SELECT age FROM person WHERE name = \"Dan\"",
        "schema": "CREATE TABLE Person (name TEXT, age NUMBER); CREATE TABLE PersonFriend (year NUMBER, friend TEXT, name TEXT);"
      },
      {
        "question": "what city does Zach live?",
        "query": "SELECT city FROM person WHERE name = 'Zach'",
        "schema": "CREATE TABLE PersonFriend (year NUMBER, friend TEXT, name TEXT); CREATE TABLE Person (city TEXT, age NUMBER, name TEXT);"
      },
      {
        "question": "what age is zach?",
        "query": "SELECT age FROM person WHERE name = 'Zach'",
        "schema": "CREATE TABLE PersonFriend (friend TEXT, year NUMBER, name TEXT); CREATE TABLE Person (name TEXT, age NUMBER, city TEXT);"
      },
      {
        "question": "what is zach's job?",
        "query": "SELECT job FROM person WHERE name = 'Zach'",
        "schema": "CREATE TABLE PersonFriend (year NUMBER, name TEXT, friend TEXT); CREATE TABLE Person (job TEXT, city TEXT, name TEXT, age NUMBER);"
      }
    ],
    [
      {
        "question": "What are the names of all the persons who are friends with Alice?",
        "query": "SELECT t1.name FROM person AS t1 JOIN personfriend AS t2 ON t1.name = t2.name WHERE t2.friend = 'Alice'",
        "schema": "CREATE TABLE PersonFriend (name TEXT, friend TEXT); CREATE TABLE Person (name TEXT);"
      },
      {
        "question": "Okay, could you show me Zach's job?",
        "query": "SELECT job FROM person WHERE name = \"Zach\"",
        "schema": "CREATE TABLE PersonFriend (name TEXT, friend TEXT); CREATE TABLE Person (name TEXT, job TEXT);"
      },
      {
        "question": "How old is Zach?",
        "query": "SELECT age FROM person WHERE name = \"Zach\"",
        "schema": "CREATE TABLE Person (job TEXT, age NUMBER, name TEXT); CREATE TABLE PersonFriend (name TEXT, friend TEXT);"
      },
      {
        "question": "How many years has Zach been friends with Alice?",
        "query": "SELECT YEAR FROM personfriend WHERE friend = \"Alice\" AND name = \"Zach\"",
        "schema": "CREATE TABLE PersonFriend (name TEXT, friend TEXT, year NUMBER); CREATE TABLE Person (job TEXT, age NUMBER, name TEXT);"
      }
    ],
    [
      {
        "question": "how many person there",
        "query": "SELECT COUNT ( * ) FROM person",
        "schema": "CREATE TABLE PersonFriend (friend TEXT, name TEXT); CREATE TABLE Person (age NUMBER, city TEXT, job TEXT, name TEXT);"
      },
      {
        "question": "what is the age of Bob",
        "query": "SELECT age FROM person WHERE name = 'Bob'",
        "schema": "CREATE TABLE Person (name TEXT, city TEXT, job TEXT, age NUMBER); CREATE TABLE PersonFriend (friend TEXT, name TEXT);"
      },
      {
        "question": "what is the city of Alice",
        "query": "SELECT city FROM person WHERE name = 'Alice'",
        "schema": "CREATE TABLE Person (name TEXT, city TEXT, age NUMBER, job TEXT); CREATE TABLE PersonFriend (friend TEXT, name TEXT);"
      }
    ],
    [
      {
        "question": "what is the name of all males?",
        "query": "SELECT name FROM person WHERE gender = 'male'",
        "schema": "CREATE TABLE Person (gender TEXT, name TEXT); CREATE TABLE PersonFriend (name TEXT);"
      },
      {
        "question": "what is the age of Bob?",
        "query": "SELECT age FROM person WHERE name = 'Bob'",
        "schema": "CREATE TABLE Person (age NUMBER, name TEXT, gender TEXT); CREATE TABLE PersonFriend (name TEXT);"
      },
      {
        "question": "who is a doctor?",
        "query": "SELECT name FROM person WHERE job = 'doctor'",
        "schema": "CREATE TABLE Person (name TEXT, age NUMBER, job TEXT, gender TEXT); CREATE TABLE PersonFriend (name TEXT);"
      }
    ],
    [
      {
        "question": "How many persons are on the list?",
        "query": "SELECT COUNT ( * ) FROM person",
        "schema": "CREATE TABLE Person (job TEXT, age NUMBER, name TEXT, gender TEXT);"
      },
      {
        "question": "Who is the least aged person on the list?",
        "query": "SELECT name FROM person ORDER BY age LIMIT 1",
        "schema": "CREATE TABLE Person (name TEXT, age NUMBER, gender TEXT, job TEXT);"
      },
      {
        "question": "How many people whose age is greater 30 and job is engineer?",
        "query": "SELECT COUNT ( * ) FROM person WHERE age > 30 AND job = 'engineer'",
        "schema": "CREATE TABLE Person (job TEXT, name TEXT, age NUMBER, gender TEXT);"
      },
      {
        "question": "How many female people are on the list?",
        "query": "SELECT COUNT ( * ) FROM person WHERE gender = 'female'",
        "schema": "CREATE TABLE Person (name TEXT, gender TEXT, job TEXT, age NUMBER);"
      }
    ],
    [
      {
        "question": "Show me the names | Do you mean the name of all the person? | name of all the persons",
        "query": "SELECT name FROM person",
        "schema": "CREATE TABLE PersonFriend (friend TEXT); CREATE TABLE Person (name TEXT);"
      },
      {
        "question": "show me the name of persons | The names of persons are Alice, Bob, Dan and Zach | Who has a friend from New York?",
        "query": "SELECT t2.name FROM person AS t1 JOIN personfriend AS t2 ON t1.name = t2.friend WHERE t1.city = 'new york city'",
        "schema": "CREATE TABLE Person (name TEXT, city TEXT); CREATE TABLE PersonFriend (friend TEXT, year NUMBER, name TEXT);"
      }
    ],
    [
      {
        "question": "Hello, could you find how many friends Alice has?",
        "query": "SELECT COUNT ( * ) FROM personfriend WHERE name = 'Alice'",
        "schema": "CREATE TABLE Person (name TEXT); CREATE TABLE PersonFriend (name TEXT, friend TEXT);"
      },
      {
        "question": "What is the name of Alice's friend?",
        "query": "SELECT friend FROM personfriend WHERE name = \"Alice\"",
        "schema": "CREATE TABLE PersonFriend (friend TEXT, name TEXT); CREATE TABLE Person (name TEXT);"
      },
      {
        "question": "What are the names of Bob's friends?",
        "query": "SELECT friend FROM personfriend WHERE name = \"Bob\"",
        "schema": "CREATE TABLE Person (name TEXT); CREATE TABLE PersonFriend (friend TEXT, name TEXT);"
      },
      {
        "question": "Is Zach also a male?",
        "query": "SELECT gender FROM person WHERE name = \"Zach\"",
        "schema": "CREATE TABLE Person (name TEXT, gender TEXT); CREATE TABLE PersonFriend (name TEXT, friend TEXT);"
      }
    ],
    [
      {
        "question": "can you please tell me if Alice is friends with Bob?",
        "query": "SELECT t1.name FROM person AS t1 JOIN personfriend AS t2 ON t1.name = t2.name WHERE t2.friend = 'Bob'",
        "schema": "CREATE TABLE PersonFriend (friend TEXT, name TEXT); CREATE TABLE Person (name TEXT);"
      },
      {
        "question": "great. and who are Zach's friends?",
        "query": "SELECT * FROM person AS t1 JOIN personfriend AS t2 ON t1.name = t2.name WHERE t2.friend = 'Zach'",
        "schema": "CREATE TABLE PersonFriend (name TEXT, friend TEXT); CREATE TABLE Person (name TEXT);"
      },
      {
        "question": "and can you tell me, besides Alice and Zach, is there anyone else who is friends with Bob?",
        "query": "SELECT t1.name FROM person AS t1 JOIN personfriend AS t2 ON t1.name = t2.name WHERE t2.friend = 'Bob' AND t1.name ! = \"Alice\" AND t1.name ! = \"Zach\"",
        "schema": "CREATE TABLE Person (job TEXT, name TEXT); CREATE TABLE PersonFriend (name TEXT, friend TEXT);"
      }
    ],
    [
      {
        "question": "Hi can you tell me in witch city does Alice live?",
        "query": "SELECT city FROM person WHERE name = \"Alice\"",
        "schema": "CREATE TABLE Person (city TEXT, job TEXT, name TEXT); CREATE TABLE PersonFriend (friend TEXT, name TEXT);"
      },
      {
        "question": "Great, how many males friends does she have?",
        "query": "SELECT COUNT ( * ) FROM person AS t1 JOIN personfriend AS t2 ON t1.name = t2.friend WHERE t2.name = 'Alice' AND t1.gender = 'male'",
        "schema": "CREATE TABLE PersonFriend (name TEXT, friend TEXT); CREATE TABLE Person (name TEXT, job TEXT, city TEXT, gender TEXT);"
      },
      {
        "question": "What job does he have?",
        "query": "SELECT job FROM person AS t1 JOIN personfriend AS t2 ON t1.name = t2.friend WHERE t2.name = 'Alice' AND t1.gender = 'male'",
        "schema": "CREATE TABLE PersonFriend (friend TEXT, name TEXT); CREATE TABLE Person (job TEXT, gender TEXT, name TEXT, city TEXT);"
      }
    ],
    [
      {
        "question": "Who is the oldest person? | What attributes do you want for this person, name or something else? | name",
        "query": "SELECT name FROM person ORDER BY age DESC LIMIT 1",
        "schema": "CREATE TABLE PersonFriend (friend TEXT, name TEXT); CREATE TABLE Person (name TEXT, age NUMBER);"
      },
      {
        "question": "How many friends does Alice have?",
        "query": "SELECT COUNT ( t2.friend ) FROM person AS t1 JOIN personfriend AS t2 ON t1.name = t2.friend WHERE t2.name = 'Alice'",
        "schema": "CREATE TABLE Person (name TEXT, age NUMBER); CREATE TABLE PersonFriend (friend TEXT, name TEXT);"
      },
      {
        "question": "How many of those are women?",
        "query": "SELECT COUNT ( t2.friend ) FROM person AS t1 JOIN personfriend AS t2 ON t1.name = t2.friend WHERE t2.name = 'Alice' AND t1.gender = 'female'",
        "schema": "CREATE TABLE Person (age NUMBER, name TEXT, gender TEXT); CREATE TABLE PersonFriend (friend TEXT, name TEXT);"
      }
    ],
    [
      {
        "question": "Who is the person that has no friend?",
        "query": "SELECT name FROM person EXCEPT SELECT name FROM personfriend",
        "schema": "CREATE TABLE PersonFriend (friend TEXT, name TEXT); CREATE TABLE Person (name TEXT, gender TEXT, job TEXT);"
      },
      {
        "question": "What is the job occupation of Zach?",
        "query": "SELECT job FROM person WHERE name = 'Zach'",
        "schema": "CREATE TABLE Person (job TEXT, gender TEXT, name TEXT); CREATE TABLE PersonFriend (name TEXT, friend TEXT);"
      }
    ],
    [
      {
        "question": "What is the average age of all males?",
        "query": "SELECT AVG ( age ) FROM person WHERE gender = 'male'",
        "schema": "CREATE TABLE Person (gender TEXT, age NUMBER);"
      },
      {
        "question": "What are all the jobs of males?",
        "query": "SELECT job FROM person WHERE gender = 'male'",
        "schema": "CREATE TABLE Person (age NUMBER, job TEXT, gender TEXT);"
      },
      {
        "question": "What are the average ages of male engineers and male doctors?",
        "query": "SELECT AVG ( age ) , job FROM person WHERE gender = 'male' GROUP BY job",
        "schema": "CREATE TABLE Person (gender TEXT, job TEXT, age NUMBER);"
      }
    ],
    [
      {
        "question": "Hi, how many people have friends with ages above 40?",
        "query": "SELECT COUNT ( * ) FROM person AS t1 JOIN personfriend AS t2 ON t1.name = t2.name WHERE t2.friend IN ( SELECT name FROM person WHERE age > 40 )",
        "schema": "CREATE TABLE PersonFriend (friend TEXT, name TEXT); CREATE TABLE Person (name TEXT, age NUMBER, job TEXT);"
      },
      {
        "question": "Great. What is that person's name?",
        "query": "SELECT t1.name FROM person AS t1 JOIN personfriend AS t2 ON t1.name = t2.name WHERE t2.friend IN ( SELECT name FROM person WHERE age > 40 )",
        "schema": "CREATE TABLE PersonFriend (name TEXT, friend TEXT); CREATE TABLE Person (age NUMBER, job TEXT, name TEXT);"
      }
    ],
    [
      {
        "question": "How old is the student? | Which student are you referring to? | A better question is, how many students are there?",
        "query": "SELECT COUNT ( * ) FROM person WHERE job = \"student\"",
        "schema": "CREATE TABLE Person (age NUMBER, name TEXT, job TEXT, city TEXT);"
      },
      {
        "question": "What about the number of people with occupations? | By occupations, do you mean people who are not students? | Yes",
        "query": "SELECT COUNT ( * ) FROM person WHERE job ! = \"student\"",
        "schema": "CREATE TABLE Person (city TEXT, name TEXT, age NUMBER, job TEXT);"
      },
      {
        "question": "What are their names?",
        "query": "SELECT name FROM person WHERE job ! = \"student\"",
        "schema": "CREATE TABLE PersonFriend (name TEXT, friend TEXT); CREATE TABLE Person (job TEXT, name TEXT, age NUMBER, city TEXT);"
      },
      {
        "question": "And the names of the people who are not students?",
        "query": "SELECT name FROM person WHERE job ! = \"student\"",
        "schema": "CREATE TABLE PersonFriend (friend TEXT, name TEXT); CREATE TABLE Person (city TEXT, age NUMBER, job TEXT, name TEXT);"
      },
      {
        "question": "I need to know how many people there are whose age is greater than 30 and job is an engineer.",
        "query": "SELECT COUNT ( * ) FROM person WHERE age > 30 AND job = 'engineer'",
        "schema": "CREATE TABLE Person (name TEXT, job TEXT, city TEXT, age NUMBER); CREATE TABLE PersonFriend (name TEXT, friend TEXT);"
      }
    ],
    [
      {
        "question": "Who is the youngest male?",
        "query": "SELECT name FROM person WHERE gender = 'male' AND age = ( SELECT MIN ( age ) FROM person WHERE gender = 'male' )",
        "schema": "CREATE TABLE Person (gender TEXT, name TEXT, age NUMBER);"
      },
      {
        "question": "What is his age?",
        "query": "SELECT age FROM person WHERE gender = 'male' AND age = ( SELECT MIN ( age ) FROM person WHERE gender = 'male' )",
        "schema": "CREATE TABLE Person (gender TEXT, name TEXT, age NUMBER);"
      },
      {
        "question": "What is his job?",
        "query": "SELECT job FROM person WHERE gender = 'male' AND age = ( SELECT MIN ( age ) FROM person WHERE gender = 'male' )",
        "schema": "CREATE TABLE Person (gender TEXT, name TEXT, job TEXT, age NUMBER);"
      }
    ],
    [
      {
        "question": "What is the name that only has one friend pairing?",
        "query": "SELECT name FROM personfriend GROUP BY name HAVING COUNT ( * ) = 1",
        "schema": "CREATE TABLE Person (name TEXT); CREATE TABLE PersonFriend (friend TEXT, name TEXT);"
      },
      {
        "question": "How many times does Alice show up in the friend column?",
        "query": "SELECT COUNT ( * ) FROM personfriend WHERE friend = 'Alice'",
        "schema": "CREATE TABLE Person (name TEXT); CREATE TABLE PersonFriend (year NUMBER, name TEXT, friend TEXT);"
      },
      {
        "question": "How many times does Bob show up in the friend column?",
        "query": "SELECT COUNT ( * ) FROM personfriend WHERE friend = 'Bob'",
        "schema": "CREATE TABLE PersonFriend (friend TEXT, name TEXT, year NUMBER); CREATE TABLE Person (name TEXT);"
      },
      {
        "question": "who is Bob's friend?",
        "query": "SELECT friend FROM personfriend WHERE name = 'Bob'",
        "schema": "CREATE TABLE PersonFriend (year NUMBER, name TEXT, friend TEXT); CREATE TABLE Person (name TEXT);"
      },
      {
        "question": "who is Zach's friend?",
        "query": "SELECT friend FROM personfriend WHERE name = 'Zach'",
        "schema": "CREATE TABLE PersonFriend (name TEXT, year NUMBER, friend TEXT); CREATE TABLE Person (name TEXT);"
      },
      {
        "question": "How many names are in the name column?",
        "query": "SELECT COUNT ( DISTINCT name ) FROM personfriend",
        "schema": "CREATE TABLE PersonFriend (friend TEXT, year NUMBER, name TEXT); CREATE TABLE Person (name TEXT);"
      },
      {
        "question": "how many names are in the friends column?",
        "query": "SELECT COUNT ( DISTINCT friend ) FROM personfriend",
        "schema": "CREATE TABLE Person (name TEXT); CREATE TABLE PersonFriend (name TEXT, friend TEXT, year NUMBER);"
      }
    ],
    [
      {
        "question": "find the average age",
        "query": "SELECT AVG ( age ) FROM person",
        "schema": "CREATE TABLE Person (age NUMBER, name TEXT);"
      },
      {
        "question": "how many are female",
        "query": "SELECT COUNT ( * ) FROM person WHERE gender = \"female\"",
        "schema": "CREATE TABLE Person (name TEXT, age NUMBER, gender TEXT);"
      },
      {
        "question": "find the number of people whose age is greater than all engineers",
        "query": "SELECT COUNT ( * ) FROM person WHERE age > ( SELECT MAX ( age ) FROM person WHERE job = 'engineer' )",
        "schema": "CREATE TABLE Person (gender TEXT, name TEXT, age NUMBER, job TEXT);"
      }
    ],
    [
      {
        "question": "who are Dan's friends?",
        "query": "SELECT DISTINCT t1.name FROM person AS t1 JOIN personfriend AS t2 ON t1.name = t2.name WHERE t2.friend = 'Dan'",
        "schema": "CREATE TABLE PersonFriend (name TEXT, friend TEXT); CREATE TABLE Person (name TEXT);"
      },
      {
        "question": "what is Dan's friend's name and age?",
        "query": "SELECT DISTINCT t1.name, t1.age FROM person AS t1 JOIN personfriend AS t2 ON t1.name = t2.name WHERE t2.friend = 'Dan'",
        "schema": "CREATE TABLE PersonFriend (friend TEXT, name TEXT); CREATE TABLE Person (name TEXT, age NUMBER);"
      }
    ],
    [
      {
        "question": "What is Zach age?",
        "query": "SELECT age FROM person WHERE name = \"Zach\"",
        "schema": "CREATE TABLE Person (name TEXT, age NUMBER);"
      },
      {
        "question": "Who is the doctor works? | Do you mean whose job is \"doctor\"? | Yes",
        "query": "SELECT name FROM person WHERE job = \"doctor\"",
        "schema": "CREATE TABLE Person (name TEXT, age NUMBER, city TEXT, job TEXT);"
      },
      {
        "question": "Who is in the town of new york?",
        "query": "SELECT name FROM person WHERE city = \"new york city\"",
        "schema": "CREATE TABLE Person (city TEXT, name TEXT, job TEXT, age NUMBER);"
      },
      {
        "question": "Who has friends that are younger than the average age?",
        "query": "SELECT DISTINCT t2.name FROM person AS t1 JOIN personfriend AS t2 ON t1.name = t2.friend WHERE t1.age < ( SELECT AVG ( age ) FROM person )",
        "schema": "CREATE TABLE PersonFriend (name TEXT, friend TEXT); CREATE TABLE Person (job TEXT, age NUMBER, name TEXT, city TEXT);"
      }
    ],
    [
      {
        "question": "Can you please tell me who the friends of Alice's friends are?",
        "query": "SELECT DISTINCT t4.name FROM personfriend AS t1 JOIN person AS t2 ON t1.name = t2.name JOIN personfriend AS t3 ON t1.friend = t3.name JOIN personfriend AS t4 ON t3.friend = t4.name WHERE t2.name = 'Alice' AND t4.name ! = 'Alice'",
        "schema": "CREATE TABLE Person (name TEXT); CREATE TABLE PersonFriend (friend TEXT, name TEXT);"
      },
      {
        "question": "What city does Zach live in?",
        "query": "SELECT city FROM person WHERE name = \"Zach\"",
        "schema": "CREATE TABLE PersonFriend (friend TEXT, name TEXT); CREATE TABLE Person (city TEXT, name TEXT);"
      },
      {
        "question": "What are the names of everyone else who lives in Austin?",
        "query": "SELECT name FROM person WHERE city = \"austin\"",
        "schema": "CREATE TABLE PersonFriend (friend TEXT, name TEXT); CREATE TABLE Person (name TEXT, city TEXT);"
      },
      {
        "question": "Who are Zach's friends?",
        "query": "SELECT friend FROM personfriend WHERE name = \"Zach\"",
        "schema": "CREATE TABLE PersonFriend (friend TEXT, name TEXT); CREATE TABLE Person (name TEXT, city TEXT);"
      },
      {
        "question": "What are their jobs?",
        "query": "SELECT name, job FROM person WHERE name IN ( SELECT friend FROM personfriend WHERE name = \"Zach\" )",
        "schema": "CREATE TABLE PersonFriend (name TEXT, friend TEXT); CREATE TABLE Person (job TEXT, city TEXT, name TEXT);"
      }
    ],
    [
      {
        "question": "How many people are from Austin ?",
        "query": "SELECT COUNT ( * ) FROM person WHERE city = \"austin\"",
        "schema": "CREATE TABLE Person (name TEXT, job TEXT, city TEXT);"
      },
      {
        "question": "How many friends do Alice and Bob have combined ?",
        "query": "SELECT COUNT ( * ) FROM personfriend WHERE name = \"Alice\" OR name = \"Bob\"",
        "schema": "CREATE TABLE PersonFriend (friend TEXT, name TEXT); CREATE TABLE Person (name TEXT, city TEXT, job TEXT);"
      },
      {
        "question": "Okay, so who has a friend in Austin ?",
        "query": "SELECT name FROM personfriend WHERE friend IN ( SELECT name FROM person WHERE city = 'austin' )",
        "schema": "CREATE TABLE Person (job TEXT, city TEXT, name TEXT); CREATE TABLE PersonFriend (friend TEXT, name TEXT);"
      }
    ],
    [
      {
        "question": "How many people are in New York City?",
        "query": "SELECT COUNT ( * ) FROM person WHERE city = \"new york city\"",
        "schema": "CREATE TABLE Person (city TEXT, name TEXT, job TEXT);"
      },
      {
        "question": "How many friends does Bob have?",
        "query": "SELECT COUNT ( * ) FROM ( SELECT t2.friend FROM person AS t1 JOIN personfriend AS t2 ON t1.name = t2.name WHERE t1.name = 'Bob' )",
        "schema": "CREATE TABLE Person (job TEXT, name TEXT, city TEXT); CREATE TABLE PersonFriend (friend TEXT, name TEXT);"
      },
      {
        "question": "What is Bob's friend's name?",
        "query": "SELECT t2.friend FROM person AS t1 JOIN personfriend AS t2 ON t1.name = t2.name WHERE t1.name = 'Bob'",
        "schema": "CREATE TABLE Person (city TEXT, name TEXT, job TEXT); CREATE TABLE PersonFriend (friend TEXT, name TEXT);"
      }
    ],
    [
      {
        "question": "How many students are there?",
        "query": "SELECT COUNT ( * ) FROM person WHERE job = \"student\"",
        "schema": "CREATE TABLE Person (name TEXT, job TEXT, age NUMBER);"
      },
      {
        "question": "How many persons are there?",
        "query": "SELECT COUNT ( * ) FROM person",
        "schema": "CREATE TABLE Person (job TEXT, age NUMBER, name TEXT);"
      },
      {
        "question": "How many friends are there?",
        "query": "SELECT COUNT ( DISTINCT friend ) FROM personfriend",
        "schema": "CREATE TABLE Person (job TEXT, age NUMBER, name TEXT); CREATE TABLE PersonFriend (name TEXT, friend TEXT);"
      },
      {
        "question": "How many of them are friends with Bob?",
        "query": "SELECT COUNT ( * ) FROM person AS t1 JOIN personfriend AS t2 ON t1.name = t2.name WHERE t2.friend = 'Bob'",
        "schema": "CREATE TABLE Person (job TEXT, age NUMBER, name TEXT); CREATE TABLE PersonFriend (name TEXT, friend TEXT);"
      },
      {
        "question": "What is their name?",
        "query": "SELECT t1.name FROM person AS t1 JOIN personfriend AS t2 ON t1.name = t2.name WHERE t2.friend = 'Bob'",
        "schema": "CREATE TABLE PersonFriend (name TEXT, friend TEXT); CREATE TABLE Person (age NUMBER, name TEXT, job TEXT);"
      },
      {
        "question": "Who is Bob's friend?",
        "query": "SELECT t1.name FROM person AS t1 JOIN personfriend AS t2 ON t1.name = t2.name WHERE t2.friend = 'Bob'",
        "schema": "CREATE TABLE Person (age NUMBER, name TEXT, job TEXT); CREATE TABLE PersonFriend (name TEXT, friend TEXT);"
      },
      {
        "question": "What person has Zach as a friend?",
        "query": "SELECT t1.name FROM person AS t1 JOIN personfriend AS t2 ON t1.name = t2.name WHERE t2.friend = 'Zach'",
        "schema": "CREATE TABLE Person (age NUMBER, job TEXT, name TEXT); CREATE TABLE PersonFriend (friend TEXT, name TEXT);"
      }
    ],
    [
      {
        "question": "What is the total number of people who has no friend living in the city of Austin?",
        "query": "SELECT COUNT ( DISTINCT name ) FROM personfriend WHERE friend NOT IN ( SELECT name FROM person WHERE city = 'Austin' )",
        "schema": "CREATE TABLE Person (job TEXT, gender TEXT, city TEXT, name TEXT); CREATE TABLE PersonFriend (friend TEXT, name TEXT);"
      },
      {
        "question": "What about in New York City?",
        "query": "SELECT COUNT ( DISTINCT name ) FROM personfriend WHERE friend NOT IN ( SELECT name FROM person WHERE city = 'new york city' )",
        "schema": "CREATE TABLE Person (job TEXT, gender TEXT, city TEXT, name TEXT); CREATE TABLE PersonFriend (friend TEXT, name TEXT);"
      },
      {
        "question": "What about Salt Lake City?",
        "query": "SELECT COUNT ( DISTINCT name ) FROM personfriend WHERE friend NOT IN ( SELECT name FROM person WHERE city = 'salt lake city' )",
        "schema": "CREATE TABLE Person (gender TEXT, city TEXT, job TEXT, name TEXT); CREATE TABLE PersonFriend (friend TEXT, name TEXT);"
      },
      {
        "question": "What are their names?",
        "query": "SELECT DISTINCT name FROM personfriend WHERE friend NOT IN ( SELECT name FROM person WHERE city = 'salt lake city' )",
        "schema": "CREATE TABLE PersonFriend (friend TEXT, name TEXT); CREATE TABLE Person (job TEXT, gender TEXT, city TEXT, name TEXT);"
      },
      {
        "question": "What are the names of the people with no friends in New York City?",
        "query": "SELECT DISTINCT name FROM personfriend WHERE friend NOT IN ( SELECT name FROM person WHERE city = 'new york city' )",
        "schema": "CREATE TABLE PersonFriend (friend TEXT, name TEXT); CREATE TABLE Person (name TEXT, gender TEXT, city TEXT, job TEXT);"
      },
      {
        "question": "How many people in New York City have friends?",
        "query": "SELECT COUNT ( * ) FROM person AS t1 JOIN personfriend AS t2 ON t1.name = t2.name WHERE person.city = 'new york city'",
        "schema": "CREATE TABLE Person (city TEXT, job TEXT, name TEXT, gender TEXT); CREATE TABLE PersonFriend (name TEXT, friend TEXT);"
      }
    ],
    [
      {
        "question": "is there any person who has no student friends",
        "query": "SELECT * FROM person EXCEPT SELECT * FROM person AS t1 JOIN personfriend AS t2 ON t1.name = t2.friend WHERE t1.job = 'student'",
        "schema": "CREATE TABLE PersonFriend (name TEXT, friend TEXT); CREATE TABLE Person (gender TEXT, name TEXT, job TEXT);"
      },
      {
        "question": "is there any person friend for this persons",
        "query": "SELECT name FROM person EXCEPT SELECT t2.name FROM person AS t1 JOIN personfriend AS t2 ON t1.name = t2.friend WHERE t1.job = 'student' INTERSECT SELECT t3.name FROM person AS t4 JOIN personfriend AS t3 ON t4.name = t3.friend",
        "schema": "CREATE TABLE Person (gender TEXT, name TEXT, job TEXT); CREATE TABLE PersonFriend (name TEXT, friend TEXT);"
      },
      {
        "question": "ok, list the name of the person who has no student friend in ascending order",
        "query": "SELECT name FROM person EXCEPT SELECT t2.name FROM person AS t1 JOIN personfriend AS t2 ON t1.name = t2.friend ORDER BY name DESC",
        "schema": "CREATE TABLE Person (job TEXT, name TEXT, gender TEXT); CREATE TABLE PersonFriend (name TEXT, friend TEXT);"
      }
    ],
    [
      {
        "question": "Hi there!  Can you provide me with a list of all of the names of people on this list?",
        "query": "SELECT name FROM person",
        "schema": "CREATE TABLE Person (name TEXT);"
      },
      {
        "question": "Thank you for that!  Can you update the list with the job of each person as well? | Would you like me to show you the names of all persons and also their corresponding job? | Yes please!",
        "query": "SELECT name, job FROM person",
        "schema": "CREATE TABLE Person (job TEXT, name TEXT); CREATE TABLE PersonFriend (name TEXT, friend TEXT);"
      },
      {
        "question": "Can you filter this list to show only the students? | Would you like me to show you a list of names and corresponding jobs for people whose job is student? | Yes please!",
        "query": "SELECT name, job FROM person WHERE job = 'student'",
        "schema": "CREATE TABLE Person (job TEXT, name TEXT); CREATE TABLE PersonFriend (name TEXT, friend TEXT);"
      },
      {
        "question": "Alright!  Can you filter that list to show only the individual who is the oldest?",
        "query": "SELECT name, job FROM person WHERE job = 'student' ORDER BY age DESC LIMIT 1",
        "schema": "CREATE TABLE PersonFriend (friend TEXT, name TEXT); CREATE TABLE Person (age NUMBER, name TEXT, job TEXT);"
      }
    ],
    [
      {
        "question": "What is Alice friend name?",
        "query": "SELECT friend FROM personfriend WHERE name = 'Alice'",
        "schema": "CREATE TABLE Person (name TEXT); CREATE TABLE PersonFriend (name TEXT, friend TEXT);"
      },
      {
        "question": "How old is Alice friend?",
        "query": "SELECT age FROM person AS t1 WHERE name = ( SELECT friend FROM personfriend WHERE name = 'Alice' )",
        "schema": "CREATE TABLE PersonFriend (name TEXT, year NUMBER, friend TEXT); CREATE TABLE Person (age NUMBER, name TEXT);"
      }
    ],
    [
      {
        "question": "What city does Alice live in?",
        "query": "SELECT city FROM person WHERE name = \"Alice\"",
        "schema": "CREATE TABLE Person (city TEXT, name TEXT); CREATE TABLE PersonFriend (friend TEXT, name TEXT);"
      },
      {
        "question": "What gender is Alice?",
        "query": "SELECT gender FROM person WHERE name = \"Alice\"",
        "schema": "CREATE TABLE Person (name TEXT, gender TEXT, city TEXT); CREATE TABLE PersonFriend (friend TEXT, name TEXT);"
      },
      {
        "question": "What job does Bob do?",
        "query": "SELECT job FROM person WHERE name = \"Bob\"",
        "schema": "CREATE TABLE Person (city TEXT, gender TEXT, job TEXT, name TEXT); CREATE TABLE PersonFriend (friend TEXT, name TEXT);"
      },
      {
        "question": "How old is Bob?",
        "query": "SELECT age FROM person WHERE name = \"Bob\"",
        "schema": "CREATE TABLE Person (gender TEXT, name TEXT, city TEXT, age NUMBER, job TEXT); CREATE TABLE PersonFriend (name TEXT, friend TEXT);"
      },
      {
        "question": "Where does he live?",
        "query": "SELECT city FROM person WHERE name = \"Bob\"",
        "schema": "CREATE TABLE PersonFriend (name TEXT, friend TEXT); CREATE TABLE Person (city TEXT, name TEXT, gender TEXT, age NUMBER, job TEXT);"
      },
      {
        "question": "How many males are there?",
        "query": "SELECT COUNT ( * ) FROM person WHERE gender = \"male\"",
        "schema": "CREATE TABLE Person (job TEXT, name TEXT, city TEXT, age NUMBER, gender TEXT); CREATE TABLE PersonFriend (name TEXT, friend TEXT);"
      },
      {
        "question": "How about Salt Lake City? | Would you like a list of the names of all the people who live in Salt Lake City? | Who is the oldest person?",
        "query": "SELECT name FROM person ORDER BY age DESC LIMIT 1",
        "schema": "CREATE TABLE PersonFriend (name TEXT, friend TEXT); CREATE TABLE Person (city TEXT, gender TEXT, job TEXT, name TEXT, age NUMBER);"
      },
      {
        "question": "How old is the doctor named Zach?",
        "query": "SELECT age FROM person WHERE name = \"Zach\"",
        "schema": "CREATE TABLE PersonFriend (name TEXT, friend TEXT); CREATE TABLE Person (job TEXT, gender TEXT, name TEXT, age NUMBER, city TEXT);"
      },
      {
        "question": "How many male engineers are there?",
        "query": "SELECT COUNT ( * ) FROM person WHERE gender = \"male\" AND job = \"engineer\"",
        "schema": "CREATE TABLE PersonFriend (friend TEXT, name TEXT); CREATE TABLE Person (city TEXT, gender TEXT, name TEXT, job TEXT, age NUMBER);"
      }
    ],
    [
      {
        "question": "In which city do Dan friends reside",
        "query": "SELECT t1.city FROM person AS t1 JOIN personfriend AS t2 ON t1.name = t2.name WHERE t1.name = 'Dan'",
        "schema": "CREATE TABLE Person (name TEXT, city TEXT); CREATE TABLE PersonFriend (friend TEXT, name TEXT);"
      },
      {
        "question": "Give me the full details of Zach",
        "query": "SELECT * FROM person WHERE name = 'Zach'",
        "schema": "CREATE TABLE PersonFriend (name TEXT, friend TEXT); CREATE TABLE Person (city TEXT, name TEXT);"
      }
    ],
    [
      {
        "question": "How many females are under age 40?",
        "query": "SELECT COUNT ( * ) FROM person WHERE gender = 'female' AND age < 40",
        "schema": "CREATE TABLE Person (age NUMBER, gender TEXT, name TEXT);"
      },
      {
        "question": "How many males do we have data for?",
        "query": "SELECT COUNT ( * ) FROM person WHERE gender = 'male'",
        "schema": "CREATE TABLE Person (age NUMBER, gender TEXT, name TEXT);"
      },
      {
        "question": "And how many of them are under age 40?",
        "query": "SELECT COUNT ( * ) FROM person WHERE age < 40 AND gender = 'male'",
        "schema": "CREATE TABLE Person (age NUMBER, name TEXT, gender TEXT);"
      }
    ],
    [
      {
        "question": "Find the name and age of the person who is a friend of both Dan and Alice.",
        "query": "SELECT t1.name , t1.age FROM person AS t1 JOIN personfriend AS t2 ON t1.name = t2.name WHERE t2.friend = 'Dan' INTERSECT SELECT t1.name , t1.age FROM person AS t1 JOIN personfriend AS t2 ON t1.name = t2.name WHERE t2.friend = 'Alice'",
        "schema": "CREATE TABLE Person (age NUMBER, name TEXT); CREATE TABLE PersonFriend (friend TEXT, name TEXT);"
      },
      {
        "question": "Find the name and age of the person who is a friend of both Dan and Zach",
        "query": "SELECT t1.name , t1.age FROM person AS t1 JOIN personfriend AS t2 ON t1.name = t2.name WHERE t2.friend = 'Dan' INTERSECT SELECT t1.name , t1.age FROM person AS t1 JOIN personfriend AS t2 ON t1.name = t2.name WHERE t2.friend = 'Zach'",
        "schema": "CREATE TABLE PersonFriend (name TEXT, friend TEXT); CREATE TABLE Person (age NUMBER, name TEXT);"
      },
      {
        "question": "Find the name and age of the person who is a friend of both Dan and Bob.",
        "query": "SELECT t1.name , t1.age FROM person AS t1 JOIN personfriend AS t2 ON t1.name = t2.name WHERE t2.friend = 'Dan' INTERSECT SELECT t1.name , t1.age FROM person AS t1 JOIN personfriend AS t2 ON t1.name = t2.name WHERE t2.friend = 'Bob'",
        "schema": "CREATE TABLE PersonFriend (name TEXT, friend TEXT); CREATE TABLE Person (name TEXT, age NUMBER);"
      },
      {
        "question": "Find the name and age of the person who is a friend of both Bob and Zach.",
        "query": "SELECT t1.name , t1.age FROM person AS t1 JOIN personfriend AS t2 ON t1.name = t2.name WHERE t2.friend = 'Zach' INTERSECT SELECT t1.name , t1.age FROM person AS t1 JOIN personfriend AS t2 ON t1.name = t2.name WHERE t2.friend = 'Bob'",
        "schema": "CREATE TABLE Person (name TEXT, age NUMBER); CREATE TABLE PersonFriend (name TEXT, friend TEXT);"
      }
    ]
  ],
  "department_management": [
    [
      {
        "question": "Which head's name has the substring 'Ha'? List the id and name",
        "query": "SELECT head_id , name FROM head WHERE name LIKE '%Ha%'",
        "schema": "CREATE TABLE management (head_ID NUMBER, department_ID NUMBER); CREATE TABLE department (Name TEXT, Department_ID NUMBER); CREATE TABLE head (name TEXT, head_ID NUMBER);"
      },
      {
        "question": "Who is head id 1?",
        "query": "SELECT name FROM head WHERE head_id = 1",
        "schema": "CREATE TABLE head (name TEXT, head_ID NUMBER); CREATE TABLE management (head_ID NUMBER, department_ID NUMBER); CREATE TABLE department (Department_ID NUMBER, Name TEXT);"
      },
      {
        "question": "What is Tiger woods's born state",
        "query": "SELECT born_state FROM head WHERE name = \"Tiger Woods\"",
        "schema": "CREATE TABLE department (Name TEXT, Department_ID NUMBER); CREATE TABLE head (head_ID NUMBER, born_state TEXT, name TEXT, age NUMBER); CREATE TABLE management (department_ID NUMBER, head_ID NUMBER);"
      },
      {
        "question": "what is Tiger woods's age",
        "query": "SELECT age FROM head WHERE name = \"Tiger Woods\"",
        "schema": "CREATE TABLE head (age NUMBER, name TEXT, head_ID NUMBER, born_state TEXT); CREATE TABLE department (Name TEXT, Department_ID NUMBER); CREATE TABLE management (head_ID NUMBER, department_ID NUMBER);"
      },
      {
        "question": "who is the oldest head",
        "query": "SELECT * FROM head ORDER BY age DESC LIMIT 1",
        "schema": "CREATE TABLE department (Department_ID NUMBER, Name TEXT); CREATE TABLE management (department_ID NUMBER, head_ID NUMBER); CREATE TABLE head (born_state TEXT, name TEXT, age NUMBER, head_ID NUMBER);"
      },
      {
        "question": "how many heads from Alabama?",
        "query": "SELECT COUNT ( * ) FROM head WHERE born_state = \"Alabama\"",
        "schema": "CREATE TABLE management (department_ID NUMBER, head_ID NUMBER); CREATE TABLE department (Department_ID NUMBER, Name TEXT); CREATE TABLE head (name TEXT, born_state TEXT, age NUMBER, head_ID NUMBER);"
      }
    ],
    [
      {
        "question": "How many heads are temporary acting?",
        "query": "SELECT COUNT ( * ) FROM management WHERE temporary_acting = 'Yes'",
        "schema": "CREATE TABLE department (Department_ID NUMBER, Num_Employees NUMBER); CREATE TABLE head (name TEXT, head_ID NUMBER); CREATE TABLE management (head_ID NUMBER, department_ID NUMBER, temporary_acting TEXT);"
      },
      {
        "question": "What are their names?",
        "query": "SELECT t1.name FROM management AS t2 JOIN head AS t1 ON t1.head_id = t2.head_id WHERE t2.temporary_acting = 'Yes'",
        "schema": "CREATE TABLE management (head_ID NUMBER, temporary_acting TEXT, department_ID NUMBER); CREATE TABLE department (Name TEXT, Num_Employees NUMBER, Department_ID NUMBER); CREATE TABLE head (name TEXT, head_ID NUMBER);"
      },
      {
        "question": "What are their distinct ages?",
        "query": "SELECT DISTINCT t1.age FROM management AS t2 JOIN head AS t1 ON t1.head_id = t2.head_id WHERE t2.temporary_acting = 'Yes'",
        "schema": "CREATE TABLE head (name TEXT, age NUMBER, head_ID NUMBER); CREATE TABLE department (Num_Employees NUMBER, Name TEXT, Department_ID NUMBER); CREATE TABLE management (temporary_acting TEXT, department_ID NUMBER, head_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Hello!  How are you?  Can you please provide me with a list of all department IDs, department names, and their respective years of creation?",
        "query": "SELECT department_id, name, creation FROM department",
        "schema": "CREATE TABLE department (Num_Employees NUMBER, Department_ID NUMBER, Creation TEXT, Name TEXT); CREATE TABLE head (name TEXT, head_ID NUMBER);"
      },
      {
        "question": "Excellent!  Can you filter this list to include only the rows that contain the most common (most frequently occurring) year of creation?",
        "query": "SELECT department_id, name, creation FROM department WHERE creation = ( SELECT creation FROM department GROUP BY creation ORDER BY COUNT ( * ) DESC LIMIT 1 )",
        "schema": "CREATE TABLE department (Num_Employees NUMBER, Name TEXT, Creation TEXT, Department_ID NUMBER); CREATE TABLE head (name TEXT, head_ID NUMBER);"
      },
      {
        "question": "Perfect! Can you tell me what is the total combined budget of these two departments?",
        "query": "SELECT SUM ( budget_in_billions ) FROM department WHERE creation = ( SELECT creation FROM department GROUP BY creation ORDER BY COUNT ( * ) DESC LIMIT 1 )",
        "schema": "CREATE TABLE department (Num_Employees NUMBER, Name TEXT, Budget_in_Billions NUMBER, Department_ID NUMBER, Creation TEXT); CREATE TABLE head (name TEXT, head_ID NUMBER);"
      }
    ],
    [
      {
        "question": "tell me the name of head id  1",
        "query": "SELECT name FROM head WHERE head_id = 1",
        "schema": "CREATE TABLE department (Department_ID NUMBER, Name TEXT); CREATE TABLE management (head_ID NUMBER, department_ID NUMBER); CREATE TABLE head (name TEXT, head_ID NUMBER);"
      },
      {
        "question": "Tell me the born state and age for head id 3",
        "query": "SELECT born_state, age FROM head WHERE head_id = 3",
        "schema": "CREATE TABLE head (head_ID NUMBER, name TEXT, age NUMBER, born_state TEXT); CREATE TABLE management (department_ID NUMBER, head_ID NUMBER); CREATE TABLE department (Name TEXT, Department_ID NUMBER);"
      },
      {
        "question": "Which head's name has the substring 'Ha' ? List the id and name.",
        "query": "SELECT head_id , name FROM head WHERE name LIKE '%Ha%'",
        "schema": "CREATE TABLE department (Department_ID NUMBER, Name TEXT); CREATE TABLE head (name TEXT, head_ID NUMBER, born_state TEXT, age NUMBER); CREATE TABLE management (department_ID NUMBER, head_ID NUMBER);"
      }
    ],
    [
      {
        "question": "how many departments are there?",
        "query": "SELECT COUNT ( * ) FROM department",
        "schema": "CREATE TABLE department (Ranking NUMBER, Department_ID NUMBER, Name TEXT, Num_Employees NUMBER, Creation TEXT); CREATE TABLE head (head_ID NUMBER); CREATE TABLE management (department_ID NUMBER, head_ID NUMBER);"
      },
      {
        "question": "how many employees are there in Department ID 2",
        "query": "SELECT num_employees FROM department WHERE department_id = 2",
        "schema": "CREATE TABLE department (Name TEXT, Department_ID NUMBER, Creation TEXT, Ranking NUMBER, Num_Employees NUMBER); CREATE TABLE management (head_ID NUMBER, department_ID NUMBER); CREATE TABLE head (head_ID NUMBER);"
      },
      {
        "question": "what is the name of Department ID 3",
        "query": "SELECT name FROM department WHERE department_id = 3",
        "schema": "CREATE TABLE department (Department_ID NUMBER, Num_Employees NUMBER, Name TEXT, Creation TEXT, Ranking NUMBER); CREATE TABLE management (department_ID NUMBER, head_ID NUMBER); CREATE TABLE head (head_ID NUMBER);"
      }
    ],
    [
      {
        "question": "where is Sergio Garc\u00eda born",
        "query": "SELECT born_state FROM head WHERE name = \"Sergio Garc\u00eda\"",
        "schema": "CREATE TABLE head (born_state TEXT, name TEXT, head_ID NUMBER); CREATE TABLE department (Name TEXT);"
      },
      {
        "question": "what is the highest head id in the management",
        "query": "SELECT MAX ( head_id ) FROM head",
        "schema": "CREATE TABLE head (born_state TEXT, name TEXT, head_ID NUMBER); CREATE TABLE management (head_ID NUMBER, department_ID NUMBER); CREATE TABLE department (Num_Employees NUMBER, Department_ID NUMBER, Name TEXT);"
      },
      {
        "question": "give me the age of all the people in the mangement",
        "query": "SELECT t1.age FROM head AS t1 JOIN management AS t2 ON t1.head_id = t2.head_id",
        "schema": "CREATE TABLE management (head_ID NUMBER, department_ID NUMBER); CREATE TABLE head (age NUMBER, head_ID NUMBER, born_state TEXT, name TEXT); CREATE TABLE department (Name TEXT, Department_ID NUMBER, Num_Employees NUMBER);"
      }
    ],
    [
      {
        "question": "Show me the departments managed by heads whose temporary acting value is 'Yes', please | The table shows the ids of departments managed by heads whose temporary acting value is 'Yes'. | Great, could you tell me the name and number of employees within those departments?",
        "query": "SELECT t1.name , t1.num_employees FROM department AS t1 JOIN management AS t2 ON t1.department_id = t2.department_id WHERE t2.temporary_acting = 'Yes'",
        "schema": "CREATE TABLE head (name TEXT, head_ID NUMBER); CREATE TABLE management (temporary_acting TEXT, head_ID NUMBER, department_ID NUMBER); CREATE TABLE department (Department_ID NUMBER, Num_Employees NUMBER, Name TEXT);"
      },
      {
        "question": "Awesome, could you show me the budget of those departments?",
        "query": "SELECT budget_in_billions FROM department AS t1 JOIN management AS t2 ON t1.department_id = t2.department_id WHERE t2.temporary_acting = 'Yes'",
        "schema": "CREATE TABLE management (head_ID NUMBER, temporary_acting TEXT, department_ID NUMBER); CREATE TABLE department (Department_ID NUMBER, Num_Employees NUMBER, Budget_in_Billions NUMBER, Name TEXT); CREATE TABLE head (head_ID NUMBER, name TEXT);"
      },
      {
        "question": "Could you tell me when those departments were founded, and display the name next to each founding year?",
        "query": "SELECT creation, name FROM department AS t1 JOIN management AS t2 ON t1.department_id = t2.department_id WHERE t2.temporary_acting = 'Yes'",
        "schema": "CREATE TABLE department (Num_Employees NUMBER, Budget_in_Billions NUMBER, Creation TEXT, Department_ID NUMBER, Name TEXT); CREATE TABLE head (name TEXT, head_ID NUMBER); CREATE TABLE management (department_ID NUMBER, temporary_acting TEXT, head_ID NUMBER);"
      },
      {
        "question": "Could you tell me how many departments have a head whose temporary acting value is 'no'?",
        "query": "SELECT COUNT ( * ) FROM management WHERE temporary_acting = 'No'",
        "schema": "CREATE TABLE management (department_ID NUMBER, temporary_acting TEXT, head_ID NUMBER); CREATE TABLE head (head_ID NUMBER, name TEXT); CREATE TABLE department (Budget_in_Billions NUMBER, Creation TEXT, Num_Employees NUMBER, Department_ID NUMBER, Name TEXT);"
      }
    ],
    [
      {
        "question": "What are the departments managed by heads whose temporary acting value is \"yes\"? | The following table shows the names of departments managed by heads whose temporary acting value is \"yes\". | Show me the name and number of employees for the Treasury department.",
        "query": "SELECT name , num_employees FROM department WHERE name = \"Treasury\"",
        "schema": "CREATE TABLE head (name TEXT, head_ID NUMBER); CREATE TABLE management (head_ID NUMBER, temporary_acting TEXT, department_ID NUMBER); CREATE TABLE department (Department_ID NUMBER, Num_Employees NUMBER, Name TEXT);"
      },
      {
        "question": "Show me the number of employees for the Homeland Security department.",
        "query": "SELECT name , num_employees FROM department WHERE name = \"Homeland Security\"",
        "schema": "CREATE TABLE department (Creation TEXT, Name TEXT, Department_ID NUMBER, Num_Employees NUMBER); CREATE TABLE management (department_ID NUMBER, temporary_acting TEXT, head_ID NUMBER); CREATE TABLE head (head_ID NUMBER, name TEXT);"
      }
    ],
    [
      {
        "question": "Which department has more than 1 head at a time? List the ID, Name  and the number of heads.",
        "query": "SELECT t1.department_id , t1.name , COUNT ( * ) FROM management AS t2 JOIN department AS t1 ON t1.department_id = t2.department_id GROUP BY t1.department_id HAVING COUNT ( * ) > 1",
        "schema": "CREATE TABLE management (department_ID NUMBER, head_ID NUMBER); CREATE TABLE department (Department_ID NUMBER, Name TEXT, Creation TEXT, Num_Employees NUMBER); CREATE TABLE head (head_ID NUMBER, name TEXT);"
      },
      {
        "question": "Which Department has the most number of employee? tell me the rank and creation year.",
        "query": "SELECT ranking, creation FROM department WHERE num_employees = ( SELECT MAX ( num_employees ) FROM department )",
        "schema": "CREATE TABLE management (head_ID NUMBER, department_ID NUMBER); CREATE TABLE department (Creation TEXT, Ranking NUMBER, Num_Employees NUMBER, Department_ID NUMBER, Name TEXT); CREATE TABLE head (head_ID NUMBER, name TEXT);"
      },
      {
        "question": "Which Department has the least number of employee? tell me the rank and creation year.",
        "query": "SELECT ranking, creation FROM department WHERE num_employees = ( SELECT MIN ( num_employees ) FROM department )",
        "schema": "CREATE TABLE department (Department_ID NUMBER, Creation TEXT, Name TEXT, Num_Employees NUMBER, Ranking NUMBER); CREATE TABLE management (department_ID NUMBER, head_ID NUMBER); CREATE TABLE head (head_ID NUMBER, name TEXT);"
      },
      {
        "question": "Which Department has the highest Budget value? tell me the rank and creation year.",
        "query": "SELECT ranking, creation FROM department WHERE budget_in_billions = ( SELECT MAX ( budget_in_billions ) FROM department )",
        "schema": "CREATE TABLE department (Budget_in_Billions NUMBER, Creation TEXT, Num_Employees NUMBER, Department_ID NUMBER, Name TEXT, Ranking NUMBER); CREATE TABLE head (name TEXT, head_ID NUMBER); CREATE TABLE management (department_ID NUMBER, head_ID NUMBER);"
      }
    ],
    [
      {
        "question": "In which year were most departments established?",
        "query": "SELECT creation FROM department GROUP BY creation ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE department (Name TEXT, Creation TEXT, Department_ID NUMBER);"
      },
      {
        "question": "How many different departments were created in 1789?",
        "query": "SELECT COUNT ( * ) FROM department GROUP BY creation ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE department (Department_ID NUMBER, Creation TEXT, Name TEXT);"
      },
      {
        "question": "What are the names of those two departments?",
        "query": "SELECT name FROM department GROUP BY creation ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE department (Department_ID NUMBER, Creation TEXT, Name TEXT);"
      },
      {
        "question": "How many employees does the Treasury Department have?",
        "query": "SELECT num_employees FROM department WHERE name = \"Treasury\"",
        "schema": "CREATE TABLE department (Name TEXT, Num_Employees NUMBER, Creation TEXT, Department_ID NUMBER); CREATE TABLE head (head_ID NUMBER);"
      },
      {
        "question": "What is the budget in billions of the Treasury Department?",
        "query": "SELECT budget_in_billions FROM department WHERE name = \"Treasury\"",
        "schema": "CREATE TABLE head (head_ID NUMBER); CREATE TABLE department (Creation TEXT, Num_Employees NUMBER, Name TEXT, Budget_in_Billions NUMBER, Department_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Can you list the states where the secretaries of the Treasury department were born?",
        "query": "SELECT t3.born_state FROM department AS t1 JOIN management AS t2 ON t1.department_id = t2.department_id JOIN head AS t3 ON t2.head_id = t3.head_id WHERE t1.name = 'Treasury'",
        "schema": "CREATE TABLE head (name TEXT, head_ID NUMBER, age NUMBER, born_state TEXT); CREATE TABLE management (department_ID NUMBER, head_ID NUMBER); CREATE TABLE department (Name TEXT, Creation TEXT, Department_ID NUMBER, Num_Employees NUMBER);"
      },
      {
        "question": "Can you list the states where the secretaries of the Homeland Security department were born?",
        "query": "SELECT t3.born_state FROM department AS t1 JOIN management AS t2 ON t1.department_id = t2.department_id JOIN head AS t3 ON t2.head_id = t3.head_id WHERE t1.name = 'Homeland Security'",
        "schema": "CREATE TABLE management (head_ID NUMBER, department_ID NUMBER); CREATE TABLE head (head_ID NUMBER, age NUMBER, name TEXT, born_state TEXT); CREATE TABLE department (Name TEXT, Creation TEXT, Department_ID NUMBER, Num_Employees NUMBER);"
      },
      {
        "question": "What departments employ more than 100,000 employees?",
        "query": "SELECT * FROM department WHERE num_employees > 100000",
        "schema": "CREATE TABLE department (Creation TEXT, Department_ID NUMBER, Num_Employees NUMBER, Name TEXT); CREATE TABLE head (born_state TEXT, head_ID NUMBER, age NUMBER, name TEXT); CREATE TABLE management (head_ID NUMBER, department_ID NUMBER);"
      }
    ]
  ],
  "cre_Doc_Tracking_DB": [
    [
      {
        "question": "Hello!  Can you tell me which role code has the largest number of employees associated with it?",
        "query": "SELECT role_code FROM employees GROUP BY role_code ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Roles (Role_Description TEXT, Role_Name TEXT, Role_Code TEXT); CREATE TABLE Employees (Employee_Name TEXT, Employee_ID NUMBER, Role_Code TEXT);"
      },
      {
        "question": "Great!  Can you tell me how many employees have ED as their Role_code?",
        "query": "SELECT COUNT ( * ) FROM employees WHERE role_code = \"ED\"",
        "schema": "CREATE TABLE Employees (Role_Code TEXT, Employee_Name TEXT, Employee_ID NUMBER); CREATE TABLE Roles (Role_Name TEXT, Role_Code TEXT, Role_Description TEXT);"
      },
      {
        "question": "Excellent!  Would you be able to provide me with a list of the names and genders of those 7 employees?",
        "query": "SELECT employee_name,gender_mfu FROM employees WHERE role_code = \"ED\"",
        "schema": "CREATE TABLE Employees (Employee_ID NUMBER, Gender_MFU TEXT, Employee_Name TEXT, Role_Code TEXT); CREATE TABLE Roles (Role_Code TEXT, Role_Name TEXT, Role_Description TEXT);"
      }
    ],
    [
      {
        "question": "How many employees are there?",
        "query": "SELECT COUNT ( * ) FROM employees",
        "schema": "CREATE TABLE Roles (Role_Code TEXT); CREATE TABLE All_Documents (Document_ID NUMBER); CREATE TABLE Documents_to_be_Destroyed (Destroyed_by_Employee_ID NUMBER, Destruction_Authorised_by_Employee_ID NUMBER); CREATE TABLE Employees (Role_Code TEXT, Other_Details TEXT, Gender_MFU TEXT, Employee_Name TEXT, Employee_ID NUMBER);"
      },
      {
        "question": "Which of the role codes has the most employees?",
        "query": "SELECT role_code FROM employees GROUP BY role_code ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Employees (Employee_ID NUMBER, Gender_MFU TEXT, Employee_Name TEXT, Other_Details TEXT, Role_Code TEXT); CREATE TABLE All_Documents (Document_ID NUMBER); CREATE TABLE Roles (Role_Code TEXT, Role_Description TEXT, Role_Name TEXT); CREATE TABLE Documents_to_be_Destroyed (Destruction_Authorised_by_Employee_ID NUMBER, Destroyed_by_Employee_ID NUMBER);"
      },
      {
        "question": "How many employees does role code ED have?",
        "query": "SELECT COUNT ( * ) FROM employees WHERE role_code = \"ED\"",
        "schema": "CREATE TABLE Roles (Role_Code TEXT, Role_Description TEXT, Role_Name TEXT); CREATE TABLE Employees (Role_Code TEXT, Gender_MFU TEXT, Employee_ID NUMBER, Employee_Name TEXT, Other_Details TEXT); CREATE TABLE All_Documents (Document_ID NUMBER); CREATE TABLE Documents_to_be_Destroyed (Destroyed_by_Employee_ID NUMBER, Destruction_Authorised_by_Employee_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Hi, can you tell me the name of an HR employee?",
        "query": "SELECT employee_name FROM employees WHERE role_code = \"HR\"",
        "schema": "CREATE TABLE Employees (Role_Code TEXT, Gender_MFU TEXT, Employee_ID NUMBER, Employee_Name TEXT); CREATE TABLE Roles (Role_Name TEXT, Role_Code TEXT);"
      },
      {
        "question": "Great, can you show the role code with the last employees? | Did you mean the employee with the largest id? | yes",
        "query": "SELECT role_code FROM employees ORDER BY employee_id DESC LIMIT 1",
        "schema": "CREATE TABLE Employees (Role_Code TEXT, Employee_ID NUMBER, Gender_MFU TEXT, Employee_Name TEXT); CREATE TABLE Roles (Role_Name TEXT, Role_Code TEXT);"
      },
      {
        "question": "and the role code with the least employees?",
        "query": "SELECT role_code FROM employees GROUP BY role_code ORDER BY COUNT ( * ) ASC LIMIT 1",
        "schema": "CREATE TABLE Employees (Employee_ID NUMBER, Role_Code TEXT, Employee_Name TEXT, Gender_MFU TEXT); CREATE TABLE Roles (Role_Code TEXT, Role_Name TEXT);"
      }
    ],
    [
      {
        "question": "Would you please show me the ids of all employees who don't destroy any documents?",
        "query": "SELECT employee_id FROM employees EXCEPT SELECT destroyed_by_employee_id FROM documents_to_be_destroyed",
        "schema": "CREATE TABLE Roles (Role_Code TEXT); CREATE TABLE All_Documents (Document_ID NUMBER); CREATE TABLE Employees (Employee_ID NUMBER, Employee_Name TEXT, Role_Code TEXT); CREATE TABLE Documents_to_be_Destroyed (Destruction_Authorised_by_Employee_ID NUMBER, Destroyed_by_Employee_ID NUMBER, Document_ID NUMBER);"
      },
      {
        "question": "What are their names?",
        "query": "SELECT employee_name FROM employees EXCEPT SELECT destroyed_by_employee_id FROM documents_to_be_destroyed",
        "schema": "CREATE TABLE All_Documents (Document_ID NUMBER, Document_Name TEXT); CREATE TABLE Roles (Role_Code TEXT, Role_Name TEXT); CREATE TABLE Documents_to_be_Destroyed (Destroyed_by_Employee_ID NUMBER, Document_ID NUMBER, Destruction_Authorised_by_Employee_ID NUMBER); CREATE TABLE Employees (Employee_ID NUMBER, Employee_Name TEXT, Role_Code TEXT);"
      },
      {
        "question": "Would you please show me the ids of all employees who do destroy any documents?",
        "query": "SELECT employee_id FROM employees AS t1 JOIN documents_to_be_destroyed AS t2 ON t1.employee_id = t2.destroyed_by_employee_id",
        "schema": "CREATE TABLE All_Documents (Document_ID NUMBER, Document_Name TEXT); CREATE TABLE Employees (Employee_ID NUMBER, Role_Code TEXT, Employee_Name TEXT); CREATE TABLE Roles (Role_Name TEXT, Role_Code TEXT); CREATE TABLE Documents_to_be_Destroyed (Destroyed_by_Employee_ID NUMBER, Destruction_Authorised_by_Employee_ID NUMBER, Document_ID NUMBER);"
      }
    ],
    [
      {
        "question": "How many documents are named \"Robin CV\"?",
        "query": "SELECT COUNT ( * ) FROM all_documents WHERE document_name = \"Robin CV\"",
        "schema": "CREATE TABLE All_Documents (Document_Name TEXT, Document_Type_Code TEXT, Document_ID NUMBER); CREATE TABLE Employees (Employee_Name TEXT, Employee_ID NUMBER); CREATE TABLE Roles (Role_Name TEXT, Role_Code TEXT); CREATE TABLE Ref_Document_Types (Document_Type_Code TEXT);"
      },
      {
        "question": "What is the document id of that document?",
        "query": "SELECT document_id FROM all_documents WHERE document_name = \"Robin CV\"",
        "schema": "CREATE TABLE Documents_to_be_Destroyed (Document_ID NUMBER); CREATE TABLE Ref_Document_Types (Document_Type_Code TEXT); CREATE TABLE All_Documents (Document_Name TEXT, Document_Type_Code TEXT, Document_ID NUMBER); CREATE TABLE Document_Locations (Document_ID NUMBER); CREATE TABLE Employees (Employee_ID NUMBER, Employee_Name TEXT); CREATE TABLE Roles (Role_Code TEXT, Role_Name TEXT);"
      },
      {
        "question": "What is the date in location from for this document?",
        "query": "SELECT t2.date_in_location_from FROM all_documents AS t1 JOIN document_locations AS t2 ON t1.document_id = t2.document_id WHERE t1.document_name = \"Robin CV\"",
        "schema": "CREATE TABLE All_Documents (Document_Name TEXT, Document_Type_Code TEXT, Document_ID NUMBER); CREATE TABLE Documents_to_be_Destroyed (Document_ID NUMBER); CREATE TABLE Roles (Role_Code TEXT, Role_Name TEXT); CREATE TABLE Ref_Locations (Location_Name TEXT, Location_Description TEXT, Location_Code TEXT); CREATE TABLE Document_Locations (Location_Code TEXT, Date_in_Location_From TIME, Date_in_Locaton_To TIME, Document_ID NUMBER); CREATE TABLE Employees (Employee_Name TEXT, Employee_ID NUMBER); CREATE TABLE Ref_Document_Types (Document_Type_Code TEXT); CREATE TABLE Ref_Calendar (Calendar_Date TIME);"
      },
      {
        "question": "What is the date in location to date?",
        "query": "SELECT t2.date_in_locaton_to FROM all_documents AS t1 JOIN document_locations AS t2 ON t1.document_id = t2.document_id WHERE t1.document_name = \"Robin CV\"",
        "schema": "CREATE TABLE Employees (Employee_ID NUMBER, Employee_Name TEXT); CREATE TABLE Document_Locations (Date_in_Location_From TIME, Date_in_Locaton_To TIME, Document_ID NUMBER, Location_Code TEXT); CREATE TABLE Ref_Document_Types (Document_Type_Code TEXT); CREATE TABLE Documents_to_be_Destroyed (Document_ID NUMBER); CREATE TABLE All_Documents (Document_ID NUMBER, Document_Name TEXT, Document_Type_Code TEXT); CREATE TABLE Ref_Locations (Location_Name TEXT, Location_Code TEXT, Location_Description TEXT); CREATE TABLE Ref_Calendar (Calendar_Date TIME); CREATE TABLE Roles (Role_Name TEXT, Role_Code TEXT);"
      }
    ],
    [
      {
        "question": "Which employees did not destroy any documents? | Do you want the ids of all the employees who did not destroy any documents? | Yes.  Show the IDs of all employees who didn't destroy any documents please.",
        "query": "SELECT employee_id FROM employees EXCEPT SELECT destroyed_by_employee_id FROM documents_to_be_destroyed",
        "schema": "CREATE TABLE Employees (Employee_Name TEXT, Role_Code TEXT, Employee_ID NUMBER); CREATE TABLE Documents_to_be_Destroyed (Destroyed_by_Employee_ID NUMBER, Destruction_Authorised_by_Employee_ID NUMBER, Document_ID NUMBER); CREATE TABLE All_Documents (Document_ID NUMBER);"
      },
      {
        "question": "Thank you.  What are their names?",
        "query": "SELECT employee_name FROM employees WHERE employee_id IN ( SELECT employee_id FROM employees EXCEPT SELECT destroyed_by_employee_id FROM documents_to_be_destroyed )",
        "schema": "CREATE TABLE Documents_to_be_Destroyed (Destroyed_by_Employee_ID NUMBER, Destruction_Authorised_by_Employee_ID NUMBER, Document_ID NUMBER); CREATE TABLE All_Documents (Document_ID NUMBER, Document_Name TEXT); CREATE TABLE Roles (Role_Name TEXT, Role_Code TEXT); CREATE TABLE Employees (Employee_Name TEXT, Role_Code TEXT, Employee_ID NUMBER);"
      },
      {
        "question": "Thank you.  What are their roles?",
        "query": "SELECT role_code FROM employees WHERE employee_id IN ( SELECT employee_id FROM employees EXCEPT SELECT destroyed_by_employee_id FROM documents_to_be_destroyed )",
        "schema": "CREATE TABLE All_Documents (Document_Name TEXT, Document_ID NUMBER); CREATE TABLE Documents_to_be_Destroyed (Destroyed_by_Employee_ID NUMBER, Document_ID NUMBER, Destruction_Authorised_by_Employee_ID NUMBER); CREATE TABLE Roles (Role_Name TEXT, Role_Description TEXT, Role_Code TEXT); CREATE TABLE Employees (Employee_ID NUMBER, Employee_Name TEXT, Role_Code TEXT);"
      },
      {
        "question": "Yes.  What is their date of birth?",
        "query": "SELECT date_of_birth FROM employees WHERE employee_id IN ( SELECT employee_id FROM employees EXCEPT SELECT destroyed_by_employee_id FROM documents_to_be_destroyed )",
        "schema": "CREATE TABLE All_Documents (Document_ID NUMBER, Document_Name TEXT); CREATE TABLE Employees (Employee_Name TEXT, Role_Code TEXT, Date_of_Birth TIME, Employee_ID NUMBER); CREATE TABLE Roles (Role_Description TEXT, Role_Code TEXT, Role_Name TEXT); CREATE TABLE Documents_to_be_Destroyed (Document_ID NUMBER, Destruction_Authorised_by_Employee_ID NUMBER, Actual_Destruction_Date TIME, Destroyed_by_Employee_ID NUMBER); CREATE TABLE Ref_Calendar (Calendar_Date TIME);"
      }
    ],
    [
      {
        "question": "How many employees are there?",
        "query": "SELECT COUNT ( employee_id ) FROM employees",
        "schema": "CREATE TABLE Employees (Other_Details TEXT, Gender_MFU TEXT, Employee_Name TEXT, Role_Code TEXT, Employee_ID NUMBER); CREATE TABLE Roles (Role_Code TEXT); CREATE TABLE Documents_to_be_Destroyed (Destruction_Authorised_by_Employee_ID NUMBER, Destroyed_by_Employee_ID NUMBER); CREATE TABLE All_Documents (Document_ID NUMBER);"
      },
      {
        "question": "How many employee have the ability to authorize the destruction of documents?",
        "query": "SELECT COUNT ( destruction_authorised_by_employee_id ) FROM documents_to_be_destroyed",
        "schema": "CREATE TABLE Documents_to_be_Destroyed (Document_ID NUMBER, Destruction_Authorised_by_Employee_ID NUMBER, Destroyed_by_Employee_ID NUMBER); CREATE TABLE All_Documents (Document_ID NUMBER); CREATE TABLE Employees (Gender_MFU TEXT, Employee_Name TEXT, Role_Code TEXT, Employee_ID NUMBER, Other_Details TEXT); CREATE TABLE Roles (Role_Code TEXT);"
      },
      {
        "question": "What are the ids of those particular employees?",
        "query": "SELECT destruction_authorised_by_employee_id FROM documents_to_be_destroyed",
        "schema": "CREATE TABLE Employees (Employee_Name TEXT, Employee_ID NUMBER, Gender_MFU TEXT, Other_Details TEXT, Role_Code TEXT); CREATE TABLE All_Documents (Document_ID NUMBER); CREATE TABLE Roles (Role_Code TEXT); CREATE TABLE Documents_to_be_Destroyed (Destroyed_by_Employee_ID NUMBER, Document_ID NUMBER, Destruction_Authorised_by_Employee_ID NUMBER);"
      },
      {
        "question": "Now how many employees can't authorize the destruction of documents.",
        "query": "SELECT SUM ( employee_id ) FROM employees EXCEPT SELECT destruction_authorised_by_employee_id FROM documents_to_be_destroyed",
        "schema": "CREATE TABLE Employees (Employee_ID NUMBER, Role_Code TEXT, Gender_MFU TEXT, Other_Details TEXT, Employee_Name TEXT); CREATE TABLE Roles (Role_Code TEXT); CREATE TABLE Documents_to_be_Destroyed (Destruction_Authorised_by_Employee_ID NUMBER, Document_ID NUMBER, Destroyed_by_Employee_ID NUMBER); CREATE TABLE All_Documents (Document_ID NUMBER);"
      },
      {
        "question": "May I have the ids of those employees who cant authorize the destruction of documents?",
        "query": "SELECT employee_id FROM employees EXCEPT SELECT destruction_authorised_by_employee_id FROM documents_to_be_destroyed",
        "schema": "CREATE TABLE Employees (Role_Code TEXT, Employee_ID NUMBER, Employee_Name TEXT, Gender_MFU TEXT, Other_Details TEXT); CREATE TABLE Documents_to_be_Destroyed (Destruction_Authorised_by_Employee_ID NUMBER, Destroyed_by_Employee_ID NUMBER, Document_ID NUMBER); CREATE TABLE All_Documents (Document_ID NUMBER); CREATE TABLE Roles (Role_Code TEXT);"
      }
    ],
    [
      {
        "question": "Can you tell me the location code with the most documents?",
        "query": "SELECT location_code FROM document_locations GROUP BY location_code ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Document_Locations (Location_Code TEXT, Document_ID NUMBER); CREATE TABLE Ref_Locations (Location_Name TEXT, Location_Code TEXT); CREATE TABLE All_Documents (Document_ID NUMBER);"
      },
      {
        "question": "Can you also tell me how many documents are there for that location? | Do you mean the number of documents in the location with code x? | Yes, please.",
        "query": "SELECT COUNT ( * ) FROM document_locations WHERE location_code = 'x'",
        "schema": "CREATE TABLE Ref_Calendar (Calendar_Date TIME); CREATE TABLE Document_Locations (Date_in_Location_From TIME, Document_ID NUMBER, Location_Code TEXT); CREATE TABLE All_Documents (Document_ID NUMBER); CREATE TABLE Ref_Locations (Location_Code TEXT, Location_Name TEXT);"
      },
      {
        "question": "How about the location code with the least documents?",
        "query": "SELECT location_code FROM document_locations GROUP BY location_code ORDER BY COUNT ( * ) LIMIT 1",
        "schema": "CREATE TABLE Document_Locations (Document_ID NUMBER, Location_Code TEXT, Date_in_Location_From TIME); CREATE TABLE Ref_Calendar (Calendar_Date TIME); CREATE TABLE Ref_Locations (Location_Name TEXT, Location_Code TEXT); CREATE TABLE All_Documents (Document_ID NUMBER);"
      }
    ],
    [
      {
        "question": "How many employees have the role name Editor?",
        "query": "SELECT t1.employee_name FROM employees AS t1 JOIN ROLES AS t2 ON t1.role_code = t2.role_code WHERE t2.role_name = \"Editor\"",
        "schema": "CREATE TABLE Employees (Role_Code TEXT, Employee_Name TEXT, Employee_ID NUMBER); CREATE TABLE Roles (Role_Code TEXT, Role_Name TEXT);"
      },
      {
        "question": "Can you list their names in this chat box?",
        "query": "SELECT t1.employee_name FROM employees AS t1 JOIN ROLES AS t2 ON t1.role_code = t2.role_code WHERE t2.role_name = \"Editor\"",
        "schema": "CREATE TABLE Employees (Employee_ID NUMBER, Employee_Name TEXT, Role_Code TEXT); CREATE TABLE Roles (Role_Name TEXT, Role_Code TEXT);"
      },
      {
        "question": "How many have a DOB after 1978?",
        "query": "SELECT COUNT ( * ) FROM employees AS t1 JOIN ROLES AS t2 ON t1.role_code = t2.role_code WHERE t2.role_name = \"Editor\" AND t1.date_of_birth > 1978",
        "schema": "CREATE TABLE Roles (Role_Name TEXT, Role_Code TEXT); CREATE TABLE Employees (Date_of_Birth TIME, Employee_ID NUMBER, Employee_Name TEXT, Role_Code TEXT); CREATE TABLE Ref_Calendar (Calendar_Date TIME, Day_Number NUMBER);"
      }
    ],
    [
      {
        "question": "how many employees there",
        "query": "SELECT COUNT ( * ) FROM employees",
        "schema": "CREATE TABLE Documents_to_be_Destroyed (Destruction_Authorised_by_Employee_ID NUMBER, Destroyed_by_Employee_ID NUMBER); CREATE TABLE Employees (Employee_ID NUMBER, Gender_MFU TEXT, Other_Details TEXT, Role_Code TEXT, Employee_Name TEXT); CREATE TABLE All_Documents (Document_ID NUMBER); CREATE TABLE Ref_Locations (Location_Code TEXT); CREATE TABLE Roles (Role_Code TEXT);"
      },
      {
        "question": "what is the planned destruction date of document ID 11",
        "query": "SELECT planned_destruction_date FROM documents_to_be_destroyed WHERE document_id = 11",
        "schema": "CREATE TABLE Roles (Role_Code TEXT); CREATE TABLE Ref_Calendar (Calendar_Date TIME); CREATE TABLE Employees (Employee_Name TEXT, Role_Code TEXT, Other_Details TEXT, Employee_ID NUMBER, Gender_MFU TEXT); CREATE TABLE Document_Locations (Document_ID NUMBER); CREATE TABLE Ref_Locations (Location_Code TEXT); CREATE TABLE Documents_to_be_Destroyed (Actual_Destruction_Date TIME, Planned_Destruction_Date TIME, Destroyed_by_Employee_ID NUMBER, Destruction_Authorised_by_Employee_ID NUMBER, Document_ID NUMBER); CREATE TABLE All_Documents (Document_Name TEXT, Document_ID NUMBER);"
      },
      {
        "question": "what is the  employee name of employee ID 30",
        "query": "SELECT employee_name FROM employees WHERE employee_id = 30",
        "schema": "CREATE TABLE Roles (Role_Code TEXT); CREATE TABLE Document_Locations (Document_ID NUMBER); CREATE TABLE Documents_to_be_Destroyed (Planned_Destruction_Date TIME, Actual_Destruction_Date TIME, Destruction_Authorised_by_Employee_ID NUMBER, Document_ID NUMBER, Destroyed_by_Employee_ID NUMBER); CREATE TABLE Ref_Calendar (Calendar_Date TIME); CREATE TABLE Employees (Gender_MFU TEXT, Employee_Name TEXT, Employee_ID NUMBER, Role_Code TEXT, Other_Details TEXT); CREATE TABLE Ref_Locations (Location_Code TEXT); CREATE TABLE All_Documents (Document_Name TEXT, Document_ID NUMBER);"
      }
    ],
    [
      {
        "question": "How about for all employees with the role name \"Human Resource\"?",
        "query": "SELECT t1.employee_id FROM employees AS t1 JOIN ROLES AS t2 ON t1.role_code = t2.role_code WHERE t2.role_name = \"Human Resource\"",
        "schema": "CREATE TABLE Employees (Employee_ID NUMBER, Employee_Name TEXT, Role_Code TEXT); CREATE TABLE Roles (Role_Description TEXT, Role_Name TEXT, Role_Code TEXT);"
      },
      {
        "question": "What is that employee's name?",
        "query": "SELECT t1.employee_name FROM employees AS t1 JOIN ROLES AS t2 ON t1.role_code = t2.role_code WHERE t2.role_name = \"Human Resource\"",
        "schema": "CREATE TABLE Employees (Role_Code TEXT, Employee_Name TEXT, Employee_ID NUMBER); CREATE TABLE Roles (Role_Code TEXT, Role_Name TEXT, Role_Description TEXT);"
      },
      {
        "question": "What is the name of the employee whose role name is Manager?",
        "query": "SELECT t1.employee_name FROM employees AS t1 JOIN ROLES AS t2 ON t1.role_code = t2.role_code WHERE t2.role_name = \"Manager\"",
        "schema": "CREATE TABLE Roles (Role_Code TEXT, Role_Description TEXT, Role_Name TEXT); CREATE TABLE Employees (Role_Code TEXT, Employee_Name TEXT, Employee_ID NUMBER);"
      },
      {
        "question": "What is the name of the employee whose role name is Human Resources?",
        "query": "SELECT t1.employee_name FROM employees AS t1 JOIN ROLES AS t2 ON t1.role_code = t2.role_code WHERE t2.role_name = \"Human Resource\"",
        "schema": "CREATE TABLE Employees (Employee_ID NUMBER, Role_Code TEXT, Employee_Name TEXT); CREATE TABLE Roles (Role_Name TEXT, Role_Description TEXT, Role_Code TEXT);"
      }
    ],
    [
      {
        "question": "What is the location code that has the largest number of documents?",
        "query": "SELECT location_code FROM document_locations GROUP BY location_code ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Ref_Locations (Location_Code TEXT, Location_Name TEXT); CREATE TABLE Document_Locations (Location_Code TEXT, Document_ID NUMBER); CREATE TABLE All_Documents (Document_ID NUMBER);"
      },
      {
        "question": "What about the least number of documents?",
        "query": "SELECT location_code FROM document_locations GROUP BY location_code ORDER BY COUNT ( * ) ASC LIMIT 1",
        "schema": "CREATE TABLE Ref_Locations (Location_Code TEXT, Location_Name TEXT); CREATE TABLE Document_Locations (Date_in_Location_From TIME, Location_Code TEXT, Document_ID NUMBER); CREATE TABLE All_Documents (Document_ID NUMBER);"
      },
      {
        "question": "How about date in location from, then?",
        "query": "SELECT location_code FROM document_locations ORDER BY date_in_location_from DESC LIMIT 1",
        "schema": "CREATE TABLE Ref_Calendar (Calendar_Date TIME); CREATE TABLE All_Documents (Document_ID NUMBER); CREATE TABLE Ref_Locations (Location_Code TEXT, Location_Name TEXT); CREATE TABLE Document_Locations (Date_in_Location_From TIME, Document_ID NUMBER, Date_in_Locaton_To TIME, Location_Code TEXT);"
      }
    ],
    [
      {
        "question": "Show the names of employees with role name Editor.",
        "query": "SELECT t1.employee_name FROM employees AS t1 JOIN ROLES AS t2 ON t1.role_code = t2.role_code WHERE t2.role_name = \"Editor\"",
        "schema": "CREATE TABLE Employees (Employee_ID NUMBER, Employee_Name TEXT, Role_Code TEXT); CREATE TABLE Roles (Role_Code TEXT, Role_Name TEXT);"
      },
      {
        "question": "Show the names of roles with role code..",
        "query": "SELECT role_code,role_name FROM ROLES",
        "schema": "CREATE TABLE Employees (Employee_ID NUMBER, Employee_Name TEXT, Role_Code TEXT); CREATE TABLE Roles (Role_Name TEXT, Role_Code TEXT);"
      },
      {
        "question": "Show the id of employees with role Role_Code",
        "query": "SELECT employee_id,role_code FROM employees",
        "schema": "CREATE TABLE Roles (Role_Code TEXT, Role_Name TEXT); CREATE TABLE Employees (Employee_Name TEXT, Role_Code TEXT, Employee_ID NUMBER);"
      },
      {
        "question": "Show the Role_Code of roles with Role_Description.",
        "query": "SELECT role_code,role_description FROM ROLES",
        "schema": "CREATE TABLE Employees (Employee_ID NUMBER, Employee_Name TEXT, Role_Code TEXT); CREATE TABLE Roles (Role_Description TEXT, Role_Name TEXT, Role_Code TEXT);"
      }
    ],
    [
      {
        "question": "What are the location codes of all the documents?",
        "query": "SELECT DISTINCT location_code FROM document_locations",
        "schema": "CREATE TABLE All_Documents (Document_Name TEXT, Document_ID NUMBER); CREATE TABLE Ref_Locations (Location_Code TEXT, Location_Name TEXT, Location_Description TEXT); CREATE TABLE Document_Locations (Document_ID NUMBER, Location_Code TEXT);"
      },
      {
        "question": "What are the document id of all the location code? | Do you mean you wanna see the whole document ids or see the document id and its location codes at the same time. | Whole document ids",
        "query": "SELECT DISTINCT document_id FROM document_locations",
        "schema": "CREATE TABLE Document_Locations (Date_in_Locaton_To TIME, Location_Code TEXT, Date_in_Location_From TIME, Document_ID NUMBER); CREATE TABLE Ref_Locations (Location_Code TEXT, Location_Name TEXT, Location_Description TEXT); CREATE TABLE All_Documents (Document_ID NUMBER, Document_Name TEXT);"
      },
      {
        "question": "What is the date in location from of document id 81?",
        "query": "SELECT date_in_location_from FROM document_locations WHERE document_id = '81'",
        "schema": "CREATE TABLE Ref_Locations (Location_Code TEXT, Location_Description TEXT, Location_Name TEXT); CREATE TABLE Ref_Calendar (Calendar_Date TIME); CREATE TABLE All_Documents (Document_Name TEXT, Document_ID NUMBER); CREATE TABLE Document_Locations (Document_ID NUMBER, Date_in_Location_From TIME, Location_Code TEXT, Date_in_Locaton_To TIME);"
      }
    ],
    [
      {
        "question": "how many employees are there?",
        "query": "SELECT COUNT ( * ) FROM employees",
        "schema": "CREATE TABLE All_Documents (Document_ID NUMBER); CREATE TABLE Employees (Employee_Name TEXT, Other_Details TEXT, Role_Code TEXT, Employee_ID NUMBER, Gender_MFU TEXT); CREATE TABLE Documents_to_be_Destroyed (Destroyed_by_Employee_ID NUMBER, Destruction_Authorised_by_Employee_ID NUMBER); CREATE TABLE Roles (Role_Code TEXT);"
      },
      {
        "question": "show their names please.",
        "query": "SELECT employee_name FROM employees",
        "schema": "CREATE TABLE Documents_to_be_Destroyed (Destruction_Authorised_by_Employee_ID NUMBER, Destroyed_by_Employee_ID NUMBER); CREATE TABLE Employees (Other_Details TEXT, Gender_MFU TEXT, Role_Code TEXT, Employee_ID NUMBER, Employee_Name TEXT); CREATE TABLE All_Documents (Document_ID NUMBER); CREATE TABLE Roles (Role_Code TEXT);"
      },
      {
        "question": "what is the date of birth of the employee named Ebba?",
        "query": "SELECT date_of_birth FROM employees WHERE employee_name = \"Ebba\"",
        "schema": "CREATE TABLE Employees (Employee_Name TEXT, Date_of_Birth TIME, Employee_ID NUMBER, Gender_MFU TEXT, Role_Code TEXT, Other_Details TEXT); CREATE TABLE Documents_to_be_Destroyed (Destruction_Authorised_by_Employee_ID NUMBER, Destroyed_by_Employee_ID NUMBER); CREATE TABLE Ref_Calendar (Calendar_Date TIME); CREATE TABLE Roles (Role_Code TEXT); CREATE TABLE All_Documents (Document_ID NUMBER);"
      },
      {
        "question": "ok, what are her role name and description?",
        "query": "SELECT t2.role_name , t2.role_description FROM employees AS t1 JOIN ROLES AS t2 ON t1.role_code = t2.role_code WHERE t1.employee_name = \"Ebba\"",
        "schema": "CREATE TABLE Ref_Calendar (Calendar_Date TIME); CREATE TABLE Documents_to_be_Destroyed (Destruction_Authorised_by_Employee_ID NUMBER, Destroyed_by_Employee_ID NUMBER); CREATE TABLE Roles (Role_Name TEXT, Role_Description TEXT, Role_Code TEXT); CREATE TABLE All_Documents (Document_ID NUMBER); CREATE TABLE Employees (Gender_MFU TEXT, Date_of_Birth TIME, Employee_Name TEXT, Other_Details TEXT, Employee_ID NUMBER, Role_Code TEXT);"
      }
    ],
    [
      {
        "question": "can you show me a list of location name?",
        "query": "SELECT location_name FROM ref_locations",
        "schema": "CREATE TABLE Document_Locations (Location_Code TEXT); CREATE TABLE Ref_Locations (Location_Description TEXT, Location_Code TEXT, Location_Name TEXT);"
      },
      {
        "question": "can you show me a list of date in location to? | Do you mean list of \"date in location to\" from the document locations table? | yes",
        "query": "SELECT date_in_locaton_to FROM document_locations",
        "schema": "CREATE TABLE Ref_Calendar (Calendar_Date TIME); CREATE TABLE All_Documents (Document_Name TEXT, Document_ID NUMBER); CREATE TABLE Ref_Locations (Location_Code TEXT, Location_Name TEXT, Location_Description TEXT); CREATE TABLE Document_Locations (Document_ID NUMBER, Location_Code TEXT, Date_in_Location_From TIME, Date_in_Locaton_To TIME);"
      },
      {
        "question": "show the location name and code with the least documents.",
        "query": "SELECT t2.location_name , t1.location_code FROM document_locations AS t1 JOIN ref_locations AS t2 ON t1.location_code = t2.location_code GROUP BY t1.location_code ORDER BY COUNT ( * ) ASC LIMIT 1",
        "schema": "CREATE TABLE Ref_Locations (Location_Description TEXT, Location_Code TEXT, Location_Name TEXT); CREATE TABLE All_Documents (Document_ID NUMBER, Document_Name TEXT); CREATE TABLE Ref_Calendar (Calendar_Date TIME); CREATE TABLE Document_Locations (Date_in_Location_From TIME, Location_Code TEXT, Date_in_Locaton_To TIME, Document_ID NUMBER);"
      }
    ]
  ],
  "small_bank_1": [
    [
      {
        "question": "What is the savings balance for Wang?",
        "query": "SELECT SUM ( t2.balance ) FROM accounts AS t1 JOIN savings AS t2 ON t1.custid = t2.custid WHERE t1.name = \"Wang\"",
        "schema": "CREATE TABLE SAVINGS (custid NUMBER, balance NUMBER); CREATE TABLE ACCOUNTS (name TEXT, custid NUMBER);"
      }
    ],
    [
      {
        "question": "what is the savings balance of  id 1? | Did you mean the saving balance of the customer with id 1? | yes",
        "query": "SELECT balance FROM savings WHERE custid = 1",
        "schema": "CREATE TABLE ACCOUNTS (custid NUMBER); CREATE TABLE SAVINGS (custid NUMBER, balance NUMBER);"
      },
      {
        "question": "what is the total checking and saving balance of all accounts?",
        "query": "SELECT t1.balance + t2.balance FROM checking AS t1 JOIN savings AS t2 ON t1.custid = t2.custid",
        "schema": "CREATE TABLE SAVINGS (balance NUMBER, custid NUMBER); CREATE TABLE CHECKING (custid NUMBER, balance NUMBER); CREATE TABLE ACCOUNTS (custid NUMBER, name TEXT);"
      },
      {
        "question": "what is the sorted list of total checking and savings balance by ascending order?",
        "query": "SELECT t1.balance + t2.balance FROM checking AS t1 JOIN savings AS t2 ON t1.custid = t2.custid ORDER BY t1.balance + t2.balance",
        "schema": "CREATE TABLE ACCOUNTS (name TEXT, custid NUMBER); CREATE TABLE CHECKING (balance NUMBER, custid NUMBER); CREATE TABLE SAVINGS (custid NUMBER, balance NUMBER);"
      }
    ],
    [
      {
        "question": "What is the average savings account balance?",
        "query": "SELECT AVG ( balance ) FROM savings",
        "schema": "CREATE TABLE ACCOUNTS (custid NUMBER); CREATE TABLE SAVINGS (custid NUMBER, balance NUMBER);"
      },
      {
        "question": "Which accounts with checking accounts have savings account balances higher than the average savings balance?",
        "query": "SELECT t1.name FROM accounts AS t1 JOIN checking AS t2 ON t1.custid = t2.custid WHERE t1.name IN ( SELECT t1.name FROM accounts AS t1 JOIN savings AS t2 ON t1.custid = t2.custid WHERE t2.balance > ( SELECT AVG ( balance ) FROM savings ) )",
        "schema": "CREATE TABLE CHECKING (balance NUMBER, custid NUMBER); CREATE TABLE ACCOUNTS (name TEXT, custid NUMBER); CREATE TABLE SAVINGS (custid NUMBER, balance NUMBER);"
      },
      {
        "question": "What is its checking account balance?",
        "query": "SELECT t2.balance FROM accounts AS t1 JOIN checking AS t2 ON t1.custid = t2.custid WHERE t1.name IN ( SELECT t1.name FROM accounts AS t1 JOIN savings AS t2 ON t1.custid = t2.custid WHERE t2.balance > ( SELECT AVG ( balance ) FROM savings ) )",
        "schema": "CREATE TABLE SAVINGS (balance NUMBER, custid NUMBER); CREATE TABLE ACCOUNTS (custid NUMBER, name TEXT); CREATE TABLE CHECKING (custid NUMBER, balance NUMBER);"
      }
    ],
    [
      {
        "question": "How many balance of customer id 1? | Do you want the saving balance of the customer with id 1? | Yes",
        "query": "SELECT balance FROM savings WHERE custid = 1",
        "schema": "CREATE TABLE SAVINGS (custid NUMBER, balance NUMBER); CREATE TABLE ACCOUNTS (custid NUMBER);"
      },
      {
        "question": "Find the savings balance of Wang?",
        "query": "SELECT t2.balance FROM accounts AS t1 JOIN savings AS t2 ON t1.custid = t2.custid WHERE t1.name = \"Wang\"",
        "schema": "CREATE TABLE ACCOUNTS (name TEXT, custid NUMBER); CREATE TABLE SAVINGS (custid NUMBER, balance NUMBER);"
      },
      {
        "question": "What are the accountant name of customer id 3?",
        "query": "SELECT name FROM accounts WHERE custid = 3",
        "schema": "CREATE TABLE ACCOUNTS (custid NUMBER, name TEXT); CREATE TABLE SAVINGS (balance NUMBER, custid NUMBER);"
      },
      {
        "question": "Find the checking balance of the accounts whose savings balance is higher than the average savings balance.",
        "query": "SELECT t2.balance FROM accounts AS t1 JOIN checking AS t2 ON t1.custid = t2.custid WHERE t1.name IN ( SELECT t1.name FROM accounts AS t1 JOIN savings AS t2 ON t1.custid = t2.custid WHERE t2.balance > ( SELECT AVG ( balance ) FROM savings ) )",
        "schema": "CREATE TABLE CHECKING (custid NUMBER, balance NUMBER); CREATE TABLE SAVINGS (custid NUMBER, balance NUMBER); CREATE TABLE ACCOUNTS (custid NUMBER, name TEXT);"
      }
    ],
    [
      {
        "question": "Hi, could you please let me know what is the average savings balance of all customers?",
        "query": "SELECT AVG ( balance ) FROM savings",
        "schema": "CREATE TABLE SAVINGS (balance NUMBER, custid NUMBER); CREATE TABLE ACCOUNTS (custid NUMBER);"
      },
      {
        "question": "Awesome, thank you. Then could you please show me the ID of the customers who have higher balance than this average?",
        "query": "SELECT custid FROM savings WHERE balance > ( SELECT AVG ( balance ) FROM savings )",
        "schema": "CREATE TABLE SAVINGS (custid NUMBER, balance NUMBER); CREATE TABLE ACCOUNTS (custid NUMBER);"
      },
      {
        "question": "oh that's a bit surprising, maybe this person is elevating the average a lot. Thank you, then could you please show me this customer's balance on both CHECKING and SAVINGS table?",
        "query": "SELECT t2.balance, t3.balance FROM accounts AS t1 JOIN checking AS t2 ON t1.custid = t2.custid JOIN savings AS t3 ON t1.custid = t3.custid WHERE t3.balance > ( SELECT AVG ( balance ) FROM savings )",
        "schema": "CREATE TABLE ACCOUNTS (custid NUMBER, name TEXT); CREATE TABLE CHECKING (custid NUMBER, balance NUMBER); CREATE TABLE SAVINGS (balance NUMBER, custid NUMBER);"
      },
      {
        "question": "That's great, thank you. Then could you please let me know what is the sum of those two accounts?",
        "query": "SELECT t2.balance + t3.balance FROM accounts AS t1 JOIN checking AS t2 ON t1.custid = t2.custid JOIN savings AS t3 ON t1.custid = t3.custid WHERE t3.balance > ( SELECT AVG ( balance ) FROM savings )",
        "schema": "CREATE TABLE CHECKING (balance NUMBER, custid NUMBER); CREATE TABLE SAVINGS (balance NUMBER, custid NUMBER); CREATE TABLE ACCOUNTS (name TEXT, custid NUMBER);"
      },
      {
        "question": "Thank you. Then could you please let me know what would be the difference between the balances of the two accounts?",
        "query": "SELECT t3.balance - t2.balance FROM accounts AS t1 JOIN checking AS t2 ON t1.custid = t2.custid JOIN savings AS t3 ON t1.custid = t3.custid WHERE t3.balance > ( SELECT AVG ( balance ) FROM savings )",
        "schema": "CREATE TABLE SAVINGS (custid NUMBER, balance NUMBER); CREATE TABLE CHECKING (custid NUMBER, balance NUMBER); CREATE TABLE ACCOUNTS (custid NUMBER, name TEXT);"
      }
    ],
    [
      {
        "question": "Whose savings balance is lower than their checking balance?",
        "query": "SELECT t1.name FROM accounts AS t1 JOIN checking AS t2 ON t1.custid = t2.custid JOIN savings AS t3 ON t1.custid = t3.custid WHERE t3.balance < t2.balance",
        "schema": "CREATE TABLE ACCOUNTS (custid NUMBER, name TEXT); CREATE TABLE CHECKING (custid NUMBER, balance NUMBER); CREATE TABLE SAVINGS (custid NUMBER, balance NUMBER);"
      },
      {
        "question": "What is the total balance of \"Weeks\" Checking and savings.",
        "query": "SELECT t3.balance + t2.balance FROM accounts AS t1 JOIN checking AS t2 ON t1.custid = t2.custid JOIN savings AS t3 ON t1.custid = t3.custid WHERE t1.name = \"Weeks\"",
        "schema": "CREATE TABLE ACCOUNTS (custid NUMBER, name TEXT); CREATE TABLE CHECKING (balance NUMBER, custid NUMBER); CREATE TABLE SAVINGS (custid NUMBER, balance NUMBER);"
      },
      {
        "question": "Also, what is their customer ID? | Weeks's id? | yes, Weeks' ID, please.",
        "query": "SELECT custid FROM accounts WHERE name = \"Weeks\"",
        "schema": "CREATE TABLE SAVINGS (custid NUMBER, balance NUMBER); CREATE TABLE ACCOUNTS (name TEXT, custid NUMBER); CREATE TABLE CHECKING (balance NUMBER, custid NUMBER);"
      }
    ],
    [
      {
        "question": "Find the saving balance of the account with the highest checking balance.",
        "query": "SELECT t3.balance FROM accounts AS t1 JOIN checking AS t2 ON t1.custid = t2.custid JOIN savings AS t3 ON t1.custid = t3.custid ORDER BY t2.balance DESC LIMIT 1",
        "schema": "CREATE TABLE ACCOUNTS (custid NUMBER, name TEXT); CREATE TABLE SAVINGS (balance NUMBER, custid NUMBER); CREATE TABLE CHECKING (balance NUMBER, custid NUMBER);"
      },
      {
        "question": "And how about the lowest?",
        "query": "SELECT t3.balance FROM accounts AS t1 JOIN checking AS t2 ON t1.custid = t2.custid JOIN savings AS t3 ON t1.custid = t3.custid ORDER BY t2.balance LIMIT 1",
        "schema": "CREATE TABLE ACCOUNTS (name TEXT, custid NUMBER); CREATE TABLE SAVINGS (custid NUMBER, balance NUMBER); CREATE TABLE CHECKING (balance NUMBER, custid NUMBER);"
      },
      {
        "question": "Checking balance of Customer id 3",
        "query": "SELECT balance FROM checking WHERE custid = '3'",
        "schema": "CREATE TABLE SAVINGS (balance NUMBER, custid NUMBER); CREATE TABLE ACCOUNTS (custid NUMBER, name TEXT); CREATE TABLE CHECKING (custid NUMBER, balance NUMBER);"
      }
    ],
    [
      {
        "question": "what is the highest saving balance?",
        "query": "SELECT MAX ( balance ) FROM savings",
        "schema": "CREATE TABLE SAVINGS (balance NUMBER, custid NUMBER);"
      },
      {
        "question": "what is the lowest saving balance?",
        "query": "SELECT MIN ( balance ) FROM savings",
        "schema": "CREATE TABLE SAVINGS (balance NUMBER, custid NUMBER);"
      },
      {
        "question": "can you show me a list of accounts name?",
        "query": "SELECT name FROM accounts",
        "schema": "CREATE TABLE SAVINGS (custid NUMBER, balance NUMBER); CREATE TABLE ACCOUNTS (custid NUMBER, name TEXT);"
      }
    ],
    [
      {
        "question": "Can you show me the number of customers?",
        "query": "SELECT COUNT ( DISTINCT custid ) FROM accounts",
        "schema": "CREATE TABLE SAVINGS (custid NUMBER); CREATE TABLE ACCOUNTS (custid NUMBER, name TEXT);"
      },
      {
        "question": "how about the number of checking accounts?",
        "query": "SELECT COUNT ( * ) FROM checking",
        "schema": "CREATE TABLE CHECKING (balance NUMBER, custid NUMBER); CREATE TABLE SAVINGS (custid NUMBER); CREATE TABLE ACCOUNTS (name TEXT, custid NUMBER);"
      },
      {
        "question": "what's the lowest balance of a savings account?",
        "query": "SELECT MIN ( balance ) FROM savings",
        "schema": "CREATE TABLE CHECKING (custid NUMBER, balance NUMBER); CREATE TABLE SAVINGS (custid NUMBER, balance NUMBER); CREATE TABLE ACCOUNTS (name TEXT, custid NUMBER);"
      },
      {
        "question": "who owns that account?",
        "query": "SELECT t2.custid FROM accounts AS t1 JOIN savings AS t2 ON t1.custid = t2.custid ORDER BY t2.balance LIMIT 1",
        "schema": "CREATE TABLE ACCOUNTS (name TEXT, custid NUMBER); CREATE TABLE SAVINGS (custid NUMBER, balance NUMBER); CREATE TABLE CHECKING (balance NUMBER, custid NUMBER);"
      },
      {
        "question": "what's the checking balance of that person?",
        "query": "SELECT t2.balance FROM accounts AS t1 JOIN checking AS t2 ON t1.custid = t2.custid JOIN savings AS t3 ON t1.custid = t3.custid ORDER BY t3.balance LIMIT 1",
        "schema": "CREATE TABLE CHECKING (balance NUMBER, custid NUMBER); CREATE TABLE ACCOUNTS (custid NUMBER, name TEXT); CREATE TABLE SAVINGS (custid NUMBER, balance NUMBER);"
      }
    ],
    [
      {
        "question": "Can you tell me the average checking balance of all checking accounts?",
        "query": "SELECT AVG ( balance ) FROM checking",
        "schema": "CREATE TABLE ACCOUNTS (name TEXT, custid NUMBER); CREATE TABLE CHECKING (balance NUMBER, custid NUMBER);"
      },
      {
        "question": "Hmm, I also want to know the average savings balance of all savings accounts.",
        "query": "SELECT AVG ( balance ) FROM savings",
        "schema": "CREATE TABLE SAVINGS (balance NUMBER, custid NUMBER); CREATE TABLE ACCOUNTS (custid NUMBER, name TEXT); CREATE TABLE CHECKING (balance NUMBER, custid NUMBER);"
      },
      {
        "question": "Can you list the names of accounts whose checking balance is above the average checking balance, but savings balance is below the average savings balance?",
        "query": "SELECT t1.name FROM accounts AS t1 JOIN checking AS t2 ON t1.custid = t2.custid WHERE t2.balance > ( SELECT AVG ( balance ) FROM checking ) INTERSECT SELECT t1.name FROM accounts AS t1 JOIN savings AS t2 ON t1.custid = t2.custid WHERE t2.balance < ( SELECT AVG ( balance ) FROM savings )",
        "schema": "CREATE TABLE CHECKING (custid NUMBER, balance NUMBER); CREATE TABLE SAVINGS (custid NUMBER, balance NUMBER); CREATE TABLE ACCOUNTS (name TEXT, custid NUMBER);"
      }
    ],
    [
      {
        "question": "Hello!  Can you display a list of all of the Savings Account customer IDs and the associated balances?",
        "query": "SELECT custid,balance FROM savings",
        "schema": "CREATE TABLE SAVINGS (custid NUMBER, balance NUMBER); CREATE TABLE ACCOUNTS (name TEXT, custid NUMBER);"
      },
      {
        "question": "Thanks!  Can you also update that list to show the checking balance for each customer?",
        "query": "SELECT balance FROM checking",
        "schema": "CREATE TABLE CHECKING (balance NUMBER, custid NUMBER); CREATE TABLE SAVINGS (custid NUMBER, balance NUMBER); CREATE TABLE ACCOUNTS (name TEXT, custid NUMBER);"
      },
      {
        "question": "Okay!  Can you show me the customer name that is associate with the lowest savings account balance?",
        "query": "SELECT t1.name FROM accounts AS t1 JOIN checking AS t2 ON t1.custid = t2.custid JOIN savings AS t3 ON t1.custid = t3.custid ORDER BY t3.balance LIMIT 1",
        "schema": "CREATE TABLE CHECKING (balance NUMBER, custid NUMBER); CREATE TABLE SAVINGS (custid NUMBER, balance NUMBER); CREATE TABLE ACCOUNTS (name TEXT, custid NUMBER);"
      },
      {
        "question": "Alright!  Can you now show me his checking account balance?",
        "query": "SELECT t2.balance FROM accounts AS t1 JOIN checking AS t2 ON t1.custid = t2.custid JOIN savings AS t3 ON t1.custid = t3.custid WHERE t1.name = \"Weeks\"",
        "schema": "CREATE TABLE SAVINGS (balance NUMBER, custid NUMBER); CREATE TABLE ACCOUNTS (name TEXT, custid NUMBER); CREATE TABLE CHECKING (custid NUMBER, balance NUMBER);"
      }
    ],
    [
      {
        "question": "yes | Please clarify which one do you need | I need the Checking balance",
        "query": "SELECT balance FROM checking WHERE custid = 2",
        "schema": "CREATE TABLE CHECKING (balance NUMBER, custid NUMBER); CREATE TABLE ACCOUNTS (custid NUMBER, name TEXT);"
      },
      {
        "question": "what is the name of the custid 2 in Table  name: ACCOUNTS",
        "query": "SELECT name FROM accounts WHERE custid = 2",
        "schema": "CREATE TABLE ACCOUNTS (name TEXT, custid NUMBER); CREATE TABLE CHECKING (balance NUMBER, custid NUMBER);"
      },
      {
        "question": "what is the saving Balance Amount of the custid 2",
        "query": "SELECT balance FROM savings WHERE custid = 2",
        "schema": "CREATE TABLE ACCOUNTS (custid NUMBER, name TEXT); CREATE TABLE SAVINGS (custid NUMBER, balance NUMBER); CREATE TABLE CHECKING (custid NUMBER, balance NUMBER);"
      },
      {
        "question": "Finding the checking balance and saving balance in the Brown's account",
        "query": "SELECT t2.balance , t3.balance FROM accounts AS t1 JOIN checking AS t2 ON t1.custid = t2.custid JOIN savings AS t3 ON t1.custid = t3.custid WHERE t1.name = 'Brown'",
        "schema": "CREATE TABLE CHECKING (balance NUMBER, custid NUMBER); CREATE TABLE ACCOUNTS (custid NUMBER, name TEXT); CREATE TABLE SAVINGS (balance NUMBER, custid NUMBER);"
      }
    ],
    [
      {
        "question": "FIND THE all CHECKING BALANCE OF ALL ACCOUNTS",
        "query": "SELECT balance FROM checking",
        "schema": "CREATE TABLE CHECKING (custid NUMBER, balance NUMBER); CREATE TABLE ACCOUNTS (custid NUMBER, name TEXT);"
      },
      {
        "question": "FIND THE SAVING BALANCE OF ALL ACCOUNTS",
        "query": "SELECT balance FROM savings",
        "schema": "CREATE TABLE CHECKING (custid NUMBER, balance NUMBER); CREATE TABLE ACCOUNTS (name TEXT, custid NUMBER); CREATE TABLE SAVINGS (custid NUMBER, balance NUMBER);"
      },
      {
        "question": "SORT ALL THE TOTAL BALANCE OF CHECKING AND SAVING ACCOUNT IN ASCENDING ORDER",
        "query": "SELECT t1.balance + t2.balance FROM checking AS t1 JOIN savings AS t2 ON t1.custid = t2.custid ORDER BY t1.balance + t2.balance",
        "schema": "CREATE TABLE CHECKING (balance NUMBER, custid NUMBER); CREATE TABLE SAVINGS (balance NUMBER, custid NUMBER); CREATE TABLE ACCOUNTS (name TEXT, custid NUMBER);"
      }
    ],
    [
      {
        "question": "What is the customer name with the highest bank balance? | Do you mean his savings balance? | yes savings balance?",
        "query": "SELECT t1.name FROM accounts AS t1 JOIN savings AS t2 ON t1.custid = t2.custid ORDER BY t2.balance DESC LIMIT 1",
        "schema": "CREATE TABLE SAVINGS (custid NUMBER, balance NUMBER); CREATE TABLE ACCOUNTS (custid NUMBER, name TEXT);"
      },
      {
        "question": "What is his customer id?",
        "query": "SELECT t1.custid FROM accounts AS t1 JOIN savings AS t2 ON t1.custid = t2.custid ORDER BY t2.balance DESC LIMIT 1",
        "schema": "CREATE TABLE SAVINGS (custid NUMBER, balance NUMBER); CREATE TABLE ACCOUNTS (custid NUMBER, name TEXT);"
      },
      {
        "question": "What is the customer ID with lowest saving balance?",
        "query": "SELECT custid FROM savings ORDER BY balance ASC LIMIT 1",
        "schema": "CREATE TABLE ACCOUNTS (custid NUMBER, name TEXT); CREATE TABLE SAVINGS (custid NUMBER, balance NUMBER);"
      },
      {
        "question": "How many customers have a minimum balance of atleast 30, 000? | Do you mean the saving balance or the checking balance or the sum of the two? | I want saving balance.",
        "query": "SELECT COUNT ( * ) FROM savings WHERE balance > = 30000",
        "schema": "CREATE TABLE SAVINGS (balance NUMBER, custid NUMBER); CREATE TABLE ACCOUNTS (name TEXT, custid NUMBER); CREATE TABLE CHECKING (balance NUMBER, custid NUMBER);"
      }
    ],
    [
      {
        "question": "Find the name of account that has the lowest total checking and saving balance.",
        "query": "SELECT t1.name FROM accounts AS t1 JOIN checking AS t2 ON t1.custid = t2.custid JOIN savings AS t3 ON t1.custid = t3.custid ORDER BY t2.balance + t3.balance LIMIT 1",
        "schema": "CREATE TABLE SAVINGS (balance NUMBER, custid NUMBER); CREATE TABLE CHECKING (balance NUMBER, custid NUMBER); CREATE TABLE ACCOUNTS (name TEXT, custid NUMBER);"
      },
      {
        "question": "Ok!. Can you please give me the names of the accounts where the checking balance is more than 3000",
        "query": "SELECT t1.name FROM accounts AS t1 JOIN checking AS t2 ON t1.custid = t2.custid JOIN savings AS t3 ON t1.custid = t3.custid WHERE t2.balance>3000",
        "schema": "CREATE TABLE ACCOUNTS (name TEXT, custid NUMBER); CREATE TABLE SAVINGS (balance NUMBER, custid NUMBER); CREATE TABLE CHECKING (balance NUMBER, custid NUMBER);"
      },
      {
        "question": "Give me the names of the accounts where the savings balance is more than 20000",
        "query": "SELECT t1.name FROM accounts AS t1 JOIN checking AS t2 ON t1.custid = t2.custid JOIN savings AS t3 ON t1.custid = t3.custid WHERE t3.balance>20000",
        "schema": "CREATE TABLE ACCOUNTS (custid NUMBER, name TEXT); CREATE TABLE CHECKING (balance NUMBER, custid NUMBER); CREATE TABLE SAVINGS (balance NUMBER, custid NUMBER);"
      },
      {
        "question": "What is the highest balance in the savings account?",
        "query": "SELECT balance FROM savings ORDER BY balance DESC LIMIT 1",
        "schema": "CREATE TABLE ACCOUNTS (name TEXT, custid NUMBER); CREATE TABLE CHECKING (custid NUMBER, balance NUMBER); CREATE TABLE SAVINGS (custid NUMBER, balance NUMBER);"
      },
      {
        "question": "Hmmm. Please tell me what is the lowest balance in the savings account.",
        "query": "SELECT MIN ( balance ) FROM savings",
        "schema": "CREATE TABLE SAVINGS (custid NUMBER, balance NUMBER); CREATE TABLE CHECKING (custid NUMBER, balance NUMBER); CREATE TABLE ACCOUNTS (name TEXT, custid NUMBER);"
      },
      {
        "question": "Can you also give me the lowest and the highest balance for checking account.",
        "query": "SELECT MAX ( balance ) ,MIN ( balance ) FROM checking",
        "schema": "CREATE TABLE SAVINGS (custid NUMBER, balance NUMBER); CREATE TABLE ACCOUNTS (custid NUMBER, name TEXT); CREATE TABLE CHECKING (balance NUMBER, custid NUMBER);"
      }
    ],
    [
      {
        "question": "I need to know the number of checking accounts for each account name.",
        "query": "SELECT COUNT ( * ) , t1.name FROM accounts AS t1 JOIN checking AS t2 ON t1.custid = t2.custid GROUP BY t1.name",
        "schema": "CREATE TABLE ACCOUNTS (name TEXT, custid NUMBER); CREATE TABLE CHECKING (custid NUMBER, balance NUMBER);"
      },
      {
        "question": "What is the highest account balance of customers with checking accounts?",
        "query": "SELECT MAX ( balance ) FROM checking",
        "schema": "CREATE TABLE CHECKING (custid NUMBER, balance NUMBER); CREATE TABLE ACCOUNTS (name TEXT, custid NUMBER);"
      },
      {
        "question": "What about the lowest account balance with customers with checking accounts?",
        "query": "SELECT MIN ( balance ) FROM checking",
        "schema": "CREATE TABLE ACCOUNTS (name TEXT, custid NUMBER); CREATE TABLE CHECKING (balance NUMBER, custid NUMBER);"
      }
    ],
    [
      {
        "question": "can you show me a list of checking balance?",
        "query": "SELECT * FROM checking",
        "schema": "CREATE TABLE ACCOUNTS (custid NUMBER, name TEXT); CREATE TABLE CHECKING (custid NUMBER, balance NUMBER);"
      },
      {
        "question": "can you show me a list of saving balance?",
        "query": "SELECT * FROM savings",
        "schema": "CREATE TABLE ACCOUNTS (custid NUMBER, name TEXT); CREATE TABLE CHECKING (balance NUMBER, custid NUMBER); CREATE TABLE SAVINGS (custid NUMBER, balance NUMBER);"
      },
      {
        "question": "can you show me a list of ACCOUNTS name?",
        "query": "SELECT * FROM accounts",
        "schema": "CREATE TABLE CHECKING (custid NUMBER, balance NUMBER); CREATE TABLE SAVINGS (balance NUMBER, custid NUMBER); CREATE TABLE ACCOUNTS (custid NUMBER, name TEXT);"
      },
      {
        "question": "find the saving balance of the account with the highest checking balance?",
        "query": "SELECT t3.balance FROM accounts AS t1 JOIN checking AS t2 ON t1.custid = t2.custid JOIN savings AS t3 ON t1.custid = t3.custid ORDER BY t2.balance DESC LIMIT 1",
        "schema": "CREATE TABLE CHECKING (custid NUMBER, balance NUMBER); CREATE TABLE ACCOUNTS (custid NUMBER, name TEXT); CREATE TABLE SAVINGS (balance NUMBER, custid NUMBER);"
      }
    ],
    [
      {
        "question": "how many accounts have a savings balance above the average savings balance?",
        "query": "SELECT COUNT ( * ) FROM savings WHERE balance > ( SELECT AVG ( balance ) FROM savings )",
        "schema": "CREATE TABLE ACCOUNTS (custid NUMBER, name TEXT); CREATE TABLE SAVINGS (custid NUMBER, balance NUMBER);"
      },
      {
        "question": "what was my savings amount balance? | Sorry, what is your customer id? | 1339",
        "query": "SELECT * FROM savings WHERE custid = 1339",
        "schema": "CREATE TABLE ACCOUNTS (name TEXT, custid NUMBER); CREATE TABLE SAVINGS (balance NUMBER, custid NUMBER);"
      }
    ],
    [
      {
        "question": "What is the highest balance?",
        "query": "SELECT MAX ( balance ) FROM savings",
        "schema": "CREATE TABLE CHECKING (balance NUMBER); CREATE TABLE SAVINGS (balance NUMBER, custid NUMBER);"
      },
      {
        "question": "How about the lowest?",
        "query": "SELECT MIN ( balance ) FROM savings",
        "schema": "CREATE TABLE CHECKING (balance NUMBER); CREATE TABLE SAVINGS (custid NUMBER, balance NUMBER);"
      },
      {
        "question": "List all the people with accounts",
        "query": "SELECT name FROM accounts",
        "schema": "CREATE TABLE SAVINGS (balance NUMBER, custid NUMBER); CREATE TABLE ACCOUNTS (custid NUMBER, name TEXT); CREATE TABLE CHECKING (balance NUMBER);"
      },
      {
        "question": "And how much money does each one have saved?",
        "query": "SELECT SUM ( t2.balance ) , t1.name FROM accounts AS t1 JOIN savings AS t2 ON t1.custid = t2.custid GROUP BY t1.name",
        "schema": "CREATE TABLE CHECKING (balance NUMBER); CREATE TABLE ACCOUNTS (name TEXT, custid NUMBER); CREATE TABLE SAVINGS (balance NUMBER, custid NUMBER);"
      }
    ],
    [
      {
        "question": "Can you show me the names and total checking and savings account balances?",
        "query": "SELECT t1.name , t2.balance + t3.balance FROM accounts AS t1 JOIN checking AS t2 ON t1.custid = t2.custid JOIN savings AS t3 ON t1.custid = t3.custid",
        "schema": "CREATE TABLE ACCOUNTS (custid NUMBER, name TEXT); CREATE TABLE CHECKING (custid NUMBER, balance NUMBER); CREATE TABLE SAVINGS (balance NUMBER, custid NUMBER);"
      },
      {
        "question": "I want to know the average savings balance of all accounts.",
        "query": "SELECT AVG ( balance ) FROM savings",
        "schema": "CREATE TABLE SAVINGS (custid NUMBER, balance NUMBER); CREATE TABLE CHECKING (balance NUMBER, custid NUMBER); CREATE TABLE ACCOUNTS (custid NUMBER, name TEXT);"
      },
      {
        "question": "Hmm, can you list the names of customers whose savings account balances are higher than the average savings balance?",
        "query": "SELECT t1.name FROM accounts AS t1 JOIN savings AS t2 ON t1.custid = t2.custid WHERE t2.balance > ( SELECT AVG ( balance ) FROM savings )",
        "schema": "CREATE TABLE SAVINGS (balance NUMBER, custid NUMBER); CREATE TABLE ACCOUNTS (name TEXT, custid NUMBER); CREATE TABLE CHECKING (custid NUMBER, balance NUMBER);"
      }
    ],
    [
      {
        "question": "Could you please tell me the names on all accounts in the bank?",
        "query": "SELECT name FROM accounts",
        "schema": "CREATE TABLE ACCOUNTS (name TEXT, custid NUMBER); CREATE TABLE CHECKING (custid NUMBER);"
      },
      {
        "question": "What are the checking and savings balances on those accounts? Could you please sort them by their total balances in descending order?",
        "query": "SELECT t2.balance , t3.balance FROM accounts AS t1 JOIN checking AS t2 ON t1.custid = t2.custid JOIN savings AS t3 ON t1.custid = t3.custid ORDER BY t2.balance + t3.balance DESC",
        "schema": "CREATE TABLE ACCOUNTS (name TEXT, custid NUMBER); CREATE TABLE SAVINGS (balance NUMBER, custid NUMBER); CREATE TABLE CHECKING (balance NUMBER, custid NUMBER);"
      }
    ],
    [
      {
        "question": "Find the name of the top 3 accounts with the highest saving balance sorted by savings balance in descending order.",
        "query": "SELECT t1.name FROM accounts AS t1 JOIN savings AS t2 ON t1.custid = t2.custid ORDER BY t2.balance DESC LIMIT 3",
        "schema": "CREATE TABLE ACCOUNTS (name TEXT, custid NUMBER); CREATE TABLE SAVINGS (custid NUMBER, balance NUMBER);"
      },
      {
        "question": "Can you add in their customer IDs to the table please?",
        "query": "SELECT t1.name , t2.custid FROM accounts AS t1 JOIN savings AS t2 ON t1.custid = t2.custid ORDER BY t2.balance DESC LIMIT 3",
        "schema": "CREATE TABLE ACCOUNTS (name TEXT, custid NUMBER); CREATE TABLE SAVINGS (custid NUMBER, balance NUMBER);"
      },
      {
        "question": "What is the average balance of all accounts?",
        "query": "SELECT AVG ( t2.balance ) FROM accounts AS t1 JOIN savings AS t2 ON t1.custid = t2.custid",
        "schema": "CREATE TABLE SAVINGS (balance NUMBER, custid NUMBER); CREATE TABLE ACCOUNTS (name TEXT, custid NUMBER);"
      },
      {
        "question": "What is the name on the account with the lowest balance? | The name of the account with the lowest saving balance is Weeks | What is the name on the account with the third highest saving balance?",
        "query": "SELECT t1.name FROM accounts AS t1 JOIN savings AS t2 ON t1.custid = t2.custid ORDER BY t2.balance DESC LIMIT 3",
        "schema": "CREATE TABLE ACCOUNTS (custid NUMBER, name TEXT); CREATE TABLE SAVINGS (balance NUMBER, custid NUMBER);"
      }
    ]
  ],
  "party_host": [
    [
      {
        "question": "Which nations have hosts older than 45?",
        "query": "SELECT DISTINCT nationality FROM HOST WHERE age > 45",
        "schema": "CREATE TABLE host (Host_ID NUMBER, Age TEXT, Nationality TEXT);"
      },
      {
        "question": "Which nations have hosts younger than 35?",
        "query": "SELECT DISTINCT nationality FROM HOST WHERE age < 35",
        "schema": "CREATE TABLE host (Age TEXT, Host_ID NUMBER, Nationality TEXT);"
      },
      {
        "question": "Which nation has hosts both older than 45 and younger than 35?",
        "query": "SELECT nationality FROM HOST WHERE age > 45 INTERSECT SELECT nationality FROM HOST WHERE age < 35",
        "schema": "CREATE TABLE host (Host_ID NUMBER, Age TEXT, Nationality TEXT);"
      }
    ],
    [
      {
        "question": "What are the names of the hosts that held parties with more than 20 hosts?",
        "query": "SELECT t2.name FROM party_host AS t1 JOIN HOST AS t2 ON t1.host_id = t2.host_id JOIN party AS t3 ON t1.party_id = t3.party_id WHERE t3.number_of_hosts > 20",
        "schema": "CREATE TABLE host (Age TEXT, Host_ID NUMBER, Name TEXT); CREATE TABLE party_host (Party_ID NUMBER, Host_ID NUMBER); CREATE TABLE party (Number_of_hosts NUMBER, Party_ID NUMBER);"
      },
      {
        "question": "What are the names of the hosts that held parties with the least number of hosts?",
        "query": "SELECT t2.name FROM party_host AS t1 JOIN HOST AS t2 ON t1.host_id = t2.host_id JOIN party AS t3 ON t1.party_id = t3.party_id ORDER BY t3.number_of_hosts ASC LIMIT 1",
        "schema": "CREATE TABLE host (Host_ID NUMBER, Age TEXT, Name TEXT); CREATE TABLE party (Party_ID NUMBER, Number_of_hosts NUMBER); CREATE TABLE party_host (Host_ID NUMBER, Party_ID NUMBER);"
      },
      {
        "question": "What is the location of the party with the oldest host?",
        "query": "SELECT t3.location FROM party_host AS t1 JOIN HOST AS t2 ON t1.host_id = t2.host_id JOIN party AS t3 ON t1.party_id = t3.party_id ORDER BY t2.age DESC LIMIT 1",
        "schema": "CREATE TABLE party_host (Party_ID NUMBER, Host_ID NUMBER); CREATE TABLE host (Name TEXT, Host_ID NUMBER, Age TEXT); CREATE TABLE party (Last_year TEXT, Number_of_hosts NUMBER, Party_ID NUMBER, Location TEXT);"
      }
    ],
    [
      {
        "question": "Can you list the themes of the parties with the names of the party hosts?",
        "query": "SELECT t3.party_theme , t2.name FROM party_host AS t1 JOIN HOST AS t2 ON t1.host_id = t2.host_id JOIN party AS t3 ON t1.party_id = t3.party_id",
        "schema": "CREATE TABLE party_host (Host_ID NUMBER, Party_ID NUMBER); CREATE TABLE host (Name TEXT, Host_ID NUMBER); CREATE TABLE party (Number_of_hosts NUMBER, Party_Theme TEXT, Party_ID NUMBER);"
      },
      {
        "question": "What are the nationalities of the party hosts?",
        "query": "SELECT t2.nationality FROM party_host AS t1 JOIN HOST AS t2 ON t1.host_id = t2.host_id JOIN party AS t3 ON t1.party_id = t3.party_id",
        "schema": "CREATE TABLE party_host (Party_ID NUMBER, Host_ID NUMBER); CREATE TABLE party (Party_ID NUMBER, Number_of_hosts NUMBER, Party_Theme TEXT); CREATE TABLE host (Host_ID NUMBER, Nationality TEXT, Name TEXT);"
      },
      {
        "question": "Who was the host of the earliest party listed? | The host of the earliest party listed is the host with id 7. | What was their name?",
        "query": "SELECT t2.name FROM party_host AS t1 JOIN HOST AS t2 ON t1.host_id = t2.host_id JOIN party AS t3 ON t1.party_id = t3.party_id ORDER BY t3.first_year LIMIT 1",
        "schema": "CREATE TABLE party (First_year TEXT, Number_of_hosts NUMBER, Party_ID NUMBER, Last_year TEXT, Party_Theme TEXT); CREATE TABLE party_host (Host_ID NUMBER, Party_ID NUMBER); CREATE TABLE host (Age TEXT, Name TEXT, Nationality TEXT, Host_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show me a list of party themes",
        "query": "SELECT party_theme FROM party",
        "schema": "CREATE TABLE host (Host_ID NUMBER); CREATE TABLE party (Party_Theme TEXT, Party_ID NUMBER); CREATE TABLE party_host (Party_ID NUMBER);"
      },
      {
        "question": "Can you show me the corresponding party id and host id to each theme?",
        "query": "SELECT t1.party_id , t1.host_id, t3.party_theme FROM party_host AS t1 JOIN HOST AS t2 ON t1.host_id = t2.host_id JOIN party AS t3 ON t1.party_id = t3.party_id",
        "schema": "CREATE TABLE party_host (Party_ID NUMBER, Host_ID NUMBER); CREATE TABLE party (Party_ID NUMBER, Party_Theme TEXT); CREATE TABLE host (Host_ID NUMBER);"
      },
      {
        "question": "Can you add host names to that table?",
        "query": "SELECT t2.name, t1.party_id , t1.host_id, t3.party_theme FROM party_host AS t1 JOIN HOST AS t2 ON t1.host_id = t2.host_id JOIN party AS t3 ON t1.party_id = t3.party_id",
        "schema": "CREATE TABLE host (Host_ID NUMBER, Name TEXT); CREATE TABLE party_host (Party_ID NUMBER, Host_ID NUMBER); CREATE TABLE party (Number_of_hosts NUMBER, Party_ID NUMBER, Party_Theme TEXT);"
      }
    ],
    [
      {
        "question": "whats the average age of the hosts?",
        "query": "SELECT AVG ( age ) FROM HOST",
        "schema": "CREATE TABLE host (Age TEXT, Name TEXT, Host_ID NUMBER); CREATE TABLE party (Number_of_hosts NUMBER);"
      },
      {
        "question": "and how many of those 8 hosts are younger than 40?",
        "query": "SELECT COUNT ( * ) FROM HOST WHERE nationality = \"United States\" AND age < 40",
        "schema": "CREATE TABLE party (Number_of_hosts NUMBER); CREATE TABLE host (Name TEXT, Host_ID NUMBER, Age TEXT, Nationality TEXT);"
      }
    ],
    [
      {
        "question": "What are some parties with theme \"Spring\"?",
        "query": "SELECT * FROM party WHERE party_theme = \"Spring\"",
        "schema": "CREATE TABLE party_host (Party_ID NUMBER); CREATE TABLE party (Party_Theme TEXT, Last_year TEXT, Party_ID NUMBER);"
      },
      {
        "question": "What are the first year and last year of the parties with theme \"Teqnology\"",
        "query": "SELECT first_year , last_year FROM party WHERE party_theme = \"Teqnology\"",
        "schema": "CREATE TABLE party (Last_year TEXT, Party_Theme TEXT, Party_ID NUMBER, First_year TEXT); CREATE TABLE party_host (Party_ID NUMBER);"
      },
      {
        "question": "OK, can you show me the first year and last year of parties with theme of both \" Spring\" and \"Teqnology\"?",
        "query": "SELECT first_year , last_year FROM party WHERE party_theme = \"Spring\" OR party_theme = \"Teqnology\"",
        "schema": "CREATE TABLE party (First_year TEXT, Party_Theme TEXT, Last_year TEXT, Party_ID NUMBER); CREATE TABLE party_host (Party_ID NUMBER);"
      }
    ],
    [
      {
        "question": "which locations of parties have hosts older than 50?",
        "query": "SELECT t3.location FROM party_host AS t1 JOIN HOST AS t2 ON t1.host_id = t2.host_id JOIN party AS t3 ON t1.party_id = t3.party_id WHERE t2.age > 50",
        "schema": "CREATE TABLE party_host (Host_ID NUMBER, Party_ID NUMBER); CREATE TABLE party (Number_of_hosts NUMBER, Location TEXT, First_year TEXT, Party_ID NUMBER); CREATE TABLE host (Age TEXT, Name TEXT, Host_ID NUMBER);"
      },
      {
        "question": "How many hosts does party theme spring have?",
        "query": "SELECT number_of_hosts FROM party WHERE party_theme = \"Spring\"",
        "schema": "CREATE TABLE party_host (Host_ID NUMBER, Party_ID NUMBER); CREATE TABLE party (Last_year TEXT, Party_Theme TEXT, Number_of_hosts NUMBER, Party_ID NUMBER, First_year TEXT, Location TEXT); CREATE TABLE host (Host_ID NUMBER, Name TEXT, Age TEXT);"
      },
      {
        "question": "How many parties are hosted in Hemkade 48 Zaandam?",
        "query": "SELECT COUNT ( * ) FROM party WHERE LOCATION = \"Hemkade 48 Zaandam\"",
        "schema": "CREATE TABLE party (Number_of_hosts NUMBER, Party_ID NUMBER, Party_Theme TEXT, Last_year TEXT, First_year TEXT, Location TEXT); CREATE TABLE host (Host_ID NUMBER, Age TEXT, Name TEXT); CREATE TABLE party_host (Party_ID NUMBER, Host_ID NUMBER);"
      },
      {
        "question": "How many hosts have the nationality united states?",
        "query": "SELECT COUNT ( * ) FROM HOST WHERE nationality = \"United States\"",
        "schema": "CREATE TABLE party (Party_Theme TEXT, Location TEXT, Last_year TEXT, Number_of_hosts NUMBER, First_year TEXT, Party_ID NUMBER); CREATE TABLE party_host (Party_ID NUMBER, Host_ID NUMBER); CREATE TABLE host (Name TEXT, Nationality TEXT, Age TEXT, Host_ID NUMBER);"
      }
    ],
    [
      {
        "question": "what is the average age",
        "query": "SELECT AVG ( age ) FROM HOST",
        "schema": "CREATE TABLE party (Party_ID NUMBER, First_year TEXT); CREATE TABLE host (Host_ID NUMBER, Age TEXT, Name TEXT);"
      },
      {
        "question": "who is the youngest",
        "query": "SELECT name FROM HOST ORDER BY age LIMIT 1",
        "schema": "CREATE TABLE host (Age TEXT, Host_ID NUMBER, Name TEXT); CREATE TABLE party (First_year TEXT, Party_ID NUMBER);"
      },
      {
        "question": "show the most common nationality of hosts",
        "query": "SELECT nationality FROM HOST GROUP BY nationality ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE party (Party_ID NUMBER, First_year TEXT); CREATE TABLE host (Age TEXT, Nationality TEXT, Name TEXT, Host_ID NUMBER);"
      }
    ],
    [
      {
        "question": "list the locations available?",
        "query": "SELECT LOCATION FROM party",
        "schema": "CREATE TABLE party (Location TEXT);"
      },
      {
        "question": "what locations of the party have the most hosts?",
        "query": "SELECT LOCATION FROM party ORDER BY number_of_hosts DESC LIMIT 1",
        "schema": "CREATE TABLE party_host (Party_ID NUMBER); CREATE TABLE party (Party_ID NUMBER, Location TEXT, Number_of_hosts NUMBER);"
      },
      {
        "question": "list the party themes available",
        "query": "SELECT party_theme FROM party",
        "schema": "CREATE TABLE party_host (Host_ID NUMBER, Party_ID NUMBER); CREATE TABLE party (Number_of_hosts NUMBER, Party_Theme TEXT, Location TEXT, Party_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What is the location of the Id no-1?",
        "query": "SELECT LOCATION FROM party WHERE party_id = 1",
        "schema": "CREATE TABLE host (Host_ID NUMBER); CREATE TABLE party (Location TEXT, Party_ID NUMBER);"
      },
      {
        "question": "how many host in the id no_3?",
        "query": "SELECT number_of_hosts FROM party WHERE party_id = 3",
        "schema": "CREATE TABLE party (Location TEXT, Number_of_hosts NUMBER, Party_ID NUMBER); CREATE TABLE host (Host_ID NUMBER); CREATE TABLE party_host (Party_ID NUMBER, Host_ID NUMBER);"
      },
      {
        "question": "what is the age of the host id 3?",
        "query": "SELECT age FROM HOST WHERE host_id = 3",
        "schema": "CREATE TABLE party_host (Host_ID NUMBER, Party_ID NUMBER); CREATE TABLE party (Location TEXT, Number_of_hosts NUMBER, Party_ID NUMBER); CREATE TABLE host (Host_ID NUMBER, Age TEXT, Name TEXT);"
      },
      {
        "question": "which nationality of host id no-3?",
        "query": "SELECT nationality FROM HOST WHERE host_id = 3",
        "schema": "CREATE TABLE party (Party_ID NUMBER, Number_of_hosts NUMBER, Location TEXT); CREATE TABLE host (Name TEXT, Nationality TEXT, Host_ID NUMBER, Age TEXT); CREATE TABLE party_host (Host_ID NUMBER, Party_ID NUMBER);"
      }
    ]
  ],
  "driving_school": [
    [
      {
        "question": "What is the total number of staff members?",
        "query": "SELECT COUNT ( * ) FROM staff",
        "schema": "CREATE TABLE Staff (staff_id NUMBER, last_name TEXT, first_name TEXT, middle_name TEXT); CREATE TABLE Lessons (staff_id NUMBER);"
      },
      {
        "question": "What is the last name of the staff member with the first name \"Janessa\"?",
        "query": "SELECT last_name FROM staff WHERE first_name = \"Janessa\"",
        "schema": "CREATE TABLE Lessons (staff_id NUMBER); CREATE TABLE Staff (first_name TEXT, last_name TEXT, middle_name TEXT, staff_id NUMBER, nickname TEXT);"
      },
      {
        "question": "What is the birthday of the staff member with the first and last name as Janessa and Sawayn?",
        "query": "SELECT date_of_birth FROM staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\"",
        "schema": "CREATE TABLE Staff (last_name TEXT, nickname TEXT, staff_id NUMBER, middle_name TEXT, first_name TEXT, date_joined_staff TIME, date_left_staff TIME, date_of_birth TIME); CREATE TABLE Lessons (staff_id NUMBER);"
      }
    ],
    [
      {
        "question": "Which city has most number of customers?",
        "query": "SELECT t2.city FROM customers AS t1 JOIN addresses AS t2 ON t1.customer_address_id = t2.address_id GROUP BY t2.city ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Customers (amount_outstanding NUMBER, last_name TEXT, customer_address_id NUMBER, customer_id NUMBER); CREATE TABLE Addresses (city TEXT, address_id NUMBER);"
      },
      {
        "question": "How many customers does it have?",
        "query": "SELECT COUNT ( * ) FROM customers AS t1 JOIN addresses AS t2 ON t1.customer_address_id = t2.address_id GROUP BY t2.city ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Addresses (address_id NUMBER, city TEXT); CREATE TABLE Customers (customer_id NUMBER, amount_outstanding NUMBER, customer_address_id NUMBER, last_name TEXT);"
      },
      {
        "question": "Give me the names of those customers",
        "query": "SELECT t1.first_name, t1.last_name FROM customers AS t1 JOIN addresses AS t2 ON t2.address_id = t1.customer_address_id WHERE t2.city = ( SELECT t2.city FROM customers AS t1 JOIN addresses AS t2 ON t1.customer_address_id = t2.address_id GROUP BY t2.city ORDER BY COUNT ( * ) DESC LIMIT 1 )",
        "schema": "CREATE TABLE Addresses (city TEXT, address_id NUMBER); CREATE TABLE Customers (first_name TEXT, last_name TEXT, customer_address_id NUMBER, customer_id NUMBER, amount_outstanding NUMBER);"
      }
    ],
    [
      {
        "question": "How many people are in the staff?",
        "query": "SELECT COUNT ( * ) FROM staff",
        "schema": "CREATE TABLE Staff (nickname TEXT, middle_name TEXT, staff_id NUMBER, staff_address_id NUMBER, last_name TEXT, first_name TEXT); CREATE TABLE Lessons (staff_id NUMBER); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Addresses (address_id NUMBER);"
      },
      {
        "question": "How many of these people cancelled their lesson?",
        "query": "SELECT COUNT ( DISTINCT t2.staff_id ) FROM lessons AS t1 JOIN staff AS t2 ON t1.staff_id = t2.staff_id WHERE t1.lesson_status_code = \"Cancelled\"",
        "schema": "CREATE TABLE Addresses (address_id NUMBER); CREATE TABLE Staff (date_left_staff TIME, last_name TEXT, staff_address_id NUMBER, first_name TEXT, middle_name TEXT, nickname TEXT, staff_id NUMBER); CREATE TABLE Lessons (lesson_time TEXT, lesson_date TIME, lesson_status_code TEXT, staff_id NUMBER, lesson_id NUMBER); CREATE TABLE Customers (customer_id NUMBER);"
      },
      {
        "question": "What is the first name of these people?",
        "query": "SELECT t2.first_name FROM lessons AS t1 JOIN staff AS t2 ON t1.staff_id = t2.staff_id WHERE t1.lesson_status_code = \"Cancelled\" GROUP BY t2.first_name",
        "schema": "CREATE TABLE Staff (date_left_staff TIME, first_name TEXT, last_name TEXT, staff_address_id NUMBER, middle_name TEXT, staff_id NUMBER, nickname TEXT); CREATE TABLE Addresses (address_id NUMBER); CREATE TABLE Lessons (staff_id NUMBER, lesson_date TIME, lesson_time TEXT, lesson_status_code TEXT, lesson_id NUMBER); CREATE TABLE Customers (customer_id NUMBER);"
      }
    ],
    [
      {
        "question": "How many people are named Janessa? | Do you mean the number of people whose first name is Janessa? | Yes",
        "query": "SELECT COUNT ( * ) FROM addresses AS t1 JOIN staff AS t2 ON t1.address_id = t2.staff_address_id WHERE t2.first_name = \"Janessa\"",
        "schema": "CREATE TABLE Staff (last_name TEXT, middle_name TEXT, staff_id NUMBER, first_name TEXT, staff_address_id NUMBER); CREATE TABLE Addresses (address_id NUMBER); CREATE TABLE Customers (last_name TEXT, first_name TEXT, customer_id NUMBER);"
      },
      {
        "question": "What is the Zip Code where Janessa Lived? | Do you mean the zip postcode in the address where Janessa lived? | Yes",
        "query": "SELECT t1.zip_postcode FROM addresses AS t1 JOIN staff AS t2 ON t1.address_id = t2.staff_address_id WHERE t2.first_name = \"Janessa\"",
        "schema": "CREATE TABLE Addresses (address_id NUMBER, zip_postcode TEXT); CREATE TABLE Staff (first_name TEXT, last_name TEXT, staff_address_id NUMBER, staff_id NUMBER, middle_name TEXT); CREATE TABLE Customers (last_name TEXT, customer_id NUMBER, first_name TEXT);"
      },
      {
        "question": "and Camylle? | Do you mean the zip postcode in the area where the person with first name Camylle lived? | Yes",
        "query": "SELECT t1.zip_postcode FROM addresses AS t1 JOIN staff AS t2 ON t1.address_id = t2.staff_address_id WHERE t2.first_name = \"Camylle\"",
        "schema": "CREATE TABLE Addresses (zip_postcode TEXT, address_id NUMBER); CREATE TABLE Staff (staff_id NUMBER, staff_address_id NUMBER, last_name TEXT, first_name TEXT, middle_name TEXT); CREATE TABLE Customers (first_name TEXT, last_name TEXT, customer_id NUMBER);"
      },
      {
        "question": "What is the zip postcode where Kaitlin lived? | Do you mean the zip postcode in the ares where the staff with first name Kaitlin lived? | Yes",
        "query": "SELECT t1.zip_postcode FROM addresses AS t1 JOIN staff AS t2 ON t1.address_id = t2.staff_address_id WHERE t2.first_name = \"Kaitlin\"",
        "schema": "CREATE TABLE Customers (last_name TEXT, customer_id NUMBER, first_name TEXT); CREATE TABLE Staff (staff_id NUMBER, last_name TEXT, staff_address_id NUMBER, first_name TEXT, middle_name TEXT); CREATE TABLE Addresses (zip_postcode TEXT, address_id NUMBER);"
      },
      {
        "question": "What is Kaitlin's last name? | Do you mean the last name of the staff whose first name is Kaitlin? | Yes",
        "query": "SELECT last_name FROM staff WHERE first_name = 'Kaitlin'",
        "schema": "CREATE TABLE Staff (staff_id NUMBER, staff_address_id NUMBER, first_name TEXT, last_name TEXT, middle_name TEXT); CREATE TABLE Customers (customer_id NUMBER, last_name TEXT, first_name TEXT); CREATE TABLE Addresses (zip_postcode TEXT, address_id NUMBER);"
      },
      {
        "question": "and Janessa? | Do you mean the last name of the staff whose first name is Janessa? | Yes",
        "query": "SELECT last_name FROM staff WHERE first_name = 'Janessa'",
        "schema": "CREATE TABLE Staff (first_name TEXT, last_name TEXT, staff_id NUMBER, middle_name TEXT, staff_address_id NUMBER); CREATE TABLE Addresses (address_id NUMBER, zip_postcode TEXT); CREATE TABLE Customers (customer_id NUMBER, first_name TEXT, last_name TEXT);"
      },
      {
        "question": "What is the zip postcode where staff named Janessa Sawayn lived? | Do you mean the zip code of staff with first name Janessa and last name Sawayn lived? | Yes",
        "query": "SELECT t1.zip_postcode FROM addresses AS t1 JOIN staff AS t2 ON t1.address_id = t2.staff_address_id WHERE t2.first_name = \"Janessa\" AND t2.last_name = \"Sawayn\"",
        "schema": "CREATE TABLE Customers (first_name TEXT, customer_id NUMBER, last_name TEXT); CREATE TABLE Addresses (address_id NUMBER, zip_postcode TEXT); CREATE TABLE Staff (staff_id NUMBER, first_name TEXT, middle_name TEXT, staff_address_id NUMBER, last_name TEXT);"
      }
    ],
    [
      {
        "question": "What state or province has the most staff living in it?",
        "query": "SELECT t1.state_province_county FROM addresses AS t1 JOIN staff AS t2 ON t1.address_id = t2.staff_address_id GROUP BY t1.state_province_county ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Staff (staff_address_id NUMBER, staff_id NUMBER); CREATE TABLE Addresses (city TEXT, state_province_county TEXT, address_id NUMBER, country TEXT);"
      },
      {
        "question": "What is the number of staff living in Georgia?",
        "query": "SELECT COUNT ( * ) FROM addresses AS t1 JOIN staff AS t2 ON t1.address_id = t2.staff_address_id GROUP BY t1.state_province_county ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Staff (staff_id NUMBER, staff_address_id NUMBER); CREATE TABLE Addresses (address_id NUMBER, state_province_county TEXT, country TEXT, city TEXT);"
      },
      {
        "question": "What city in Georgia has the most staff living in it?",
        "query": "SELECT t1.city FROM addresses AS t1 JOIN staff AS t2 ON t1.address_id = t2.staff_address_id WHERE t1.state_province_county = \"Georgia\" GROUP BY t1.city ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Staff (staff_id NUMBER, staff_address_id NUMBER); CREATE TABLE Addresses (state_province_county TEXT, city TEXT, country TEXT, address_id NUMBER);"
      },
      {
        "question": "What is the number of staff living in Port Melyssa and what are their names? | first name or last name? | both please",
        "query": "SELECT t2.first_name, t2.last_name FROM addresses AS t1 JOIN staff AS t2 ON t1.address_id = t2.staff_address_id WHERE t1.city = \"Port Melyssa\"",
        "schema": "CREATE TABLE Addresses (state_province_county TEXT, country TEXT, address_id NUMBER, city TEXT); CREATE TABLE Staff (staff_address_id NUMBER, middle_name TEXT, first_name TEXT, last_name TEXT, staff_id NUMBER);"
      },
      {
        "question": "What are all their birthdays?",
        "query": "SELECT t2.date_of_birth FROM addresses AS t1 JOIN staff AS t2 ON t1.address_id = t2.staff_address_id WHERE t1.city = \"Port Melyssa\"",
        "schema": "CREATE TABLE Staff (first_name TEXT, staff_id NUMBER, middle_name TEXT, date_of_birth TIME, date_joined_staff TIME, staff_address_id NUMBER, last_name TEXT); CREATE TABLE Addresses (country TEXT, city TEXT, state_province_county TEXT, address_id NUMBER);"
      }
    ],
    [
      {
        "question": "How long is the total lesson time took by customer with first name Rylan and last name Goodwin?",
        "query": "SELECT SUM ( t1.lesson_time ) FROM lessons AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id WHERE t2.first_name = \"Rylan\" AND t2.last_name = \"Goodwin\"",
        "schema": "CREATE TABLE Lessons (lesson_date TIME, lesson_status_code TEXT, customer_id NUMBER, lesson_time TEXT, lesson_id NUMBER); CREATE TABLE Customers (customer_id NUMBER, last_name TEXT, first_name TEXT);"
      },
      {
        "question": "What's the status of the lesson by the customer with first name Rylan and last name Goodwin",
        "query": "SELECT t1.lesson_status_code FROM lessons AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id WHERE t2.first_name = \"Rylan\" AND t2.last_name = \"Goodwin\"",
        "schema": "CREATE TABLE Lessons (lesson_id NUMBER, lesson_status_code TEXT, lesson_time TEXT, customer_id NUMBER, lesson_date TIME); CREATE TABLE Customers (first_name TEXT, last_name TEXT, customer_status_code TEXT, customer_id NUMBER);"
      },
      {
        "question": "What's the customer id of the customer with first name Rylan and last name Goodwin?",
        "query": "SELECT customer_id FROM customers WHERE first_name = \"Rylan\" AND last_name = \"Goodwin\"",
        "schema": "CREATE TABLE Customers (first_name TEXT, customer_status_code TEXT, last_name TEXT, customer_id NUMBER); CREATE TABLE Lessons (lesson_id NUMBER, lesson_status_code TEXT, lesson_date TIME, customer_id NUMBER, lesson_time TEXT);"
      }
    ],
    [
      {
        "question": "how many customers are presented on the table",
        "query": "SELECT COUNT ( customer_id ) FROM customers",
        "schema": "CREATE TABLE Customer_Payments (customer_id NUMBER); CREATE TABLE Customers (customer_address_id NUMBER, amount_outstanding NUMBER, customer_id NUMBER, first_name TEXT, customer_status_code TEXT, last_name TEXT); CREATE TABLE Lessons (customer_id NUMBER);"
      },
      {
        "question": "please tell me Clara phone number",
        "query": "SELECT phone_number FROM customers WHERE first_name = \"Clara\"",
        "schema": "CREATE TABLE Lessons (customer_id NUMBER); CREATE TABLE Customer_Payments (customer_id NUMBER); CREATE TABLE Customers (customer_status_code TEXT, amount_outstanding NUMBER, last_name TEXT, customer_id NUMBER, cell_mobile_phone_number TEXT, customer_address_id NUMBER, first_name TEXT, phone_number TEXT);"
      }
    ],
    [
      {
        "question": "What is the status code of the customer with the last name Kohler or first name Marina?",
        "query": "SELECT customer_status_code FROM customers WHERE first_name = \"Marina\" OR last_name = \"Kohler\"",
        "schema": "CREATE TABLE Customers (first_name TEXT, last_name TEXT, customer_id NUMBER, customer_status_code TEXT); CREATE TABLE Lessons (customer_id NUMBER, lesson_status_code TEXT);"
      },
      {
        "question": "What is the mobile phone number of the customer with the last name Kohler or first name Marina?",
        "query": "SELECT phone_number FROM customers WHERE first_name = \"Marina\" OR last_name = \"Kohler\"",
        "schema": "CREATE TABLE Lessons (customer_id NUMBER, lesson_status_code TEXT); CREATE TABLE Customers (customer_status_code TEXT, phone_number TEXT, cell_mobile_phone_number TEXT, customer_id NUMBER, last_name TEXT, first_name TEXT);"
      },
      {
        "question": "How about their email addresses?",
        "query": "SELECT email_address FROM customers WHERE first_name = \"Marina\" OR last_name = \"Kohler\"",
        "schema": "CREATE TABLE Addresses (address_id NUMBER); CREATE TABLE Lessons (lesson_status_code TEXT, customer_id NUMBER); CREATE TABLE Customers (cell_mobile_phone_number TEXT, customer_status_code TEXT, email_address TEXT, first_name TEXT, phone_number TEXT, customer_id NUMBER, customer_address_id NUMBER, last_name TEXT);"
      }
    ],
    [
      {
        "question": "Hi there!  Can you provide me with the country and state province county information for the staff member named Janessa Sawayn? | Are you referring to the staff member having first name Janessa and last name Sawayn? | Yes, that is correct!",
        "query": "SELECT t1.country , t1.state_province_county FROM addresses AS t1 JOIN staff AS t2 ON t1.address_id = t2.staff_address_id WHERE t2.first_name = \"Janessa\" AND t2.last_name = \"Sawayn\"",
        "schema": "CREATE TABLE Addresses (address_id NUMBER, state_province_county TEXT, country TEXT); CREATE TABLE Staff (nickname TEXT, first_name TEXT, middle_name TEXT, staff_address_id NUMBER, staff_id NUMBER, last_name TEXT);"
      }
    ],
    [
      {
        "question": "can you show me a list of lesson date?",
        "query": "SELECT lesson_date FROM lessons",
        "schema": "CREATE TABLE Lessons (lesson_id NUMBER, customer_id NUMBER, staff_id NUMBER, lesson_time TEXT, lesson_status_code TEXT, lesson_date TIME); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Addresses (address_id NUMBER); CREATE TABLE Staff (staff_id NUMBER);"
      },
      {
        "question": "what is the average of lesson time?",
        "query": "SELECT AVG ( lesson_time ) FROM lessons",
        "schema": "CREATE TABLE Staff (staff_id NUMBER); CREATE TABLE Lessons (lesson_id NUMBER, lesson_time TEXT, lesson_status_code TEXT, staff_id NUMBER, customer_id NUMBER, lesson_date TIME); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Addresses (address_id NUMBER);"
      },
      {
        "question": "what is the highest price?",
        "query": "SELECT price FROM lessons ORDER BY price DESC LIMIT 1",
        "schema": "CREATE TABLE Addresses (address_id NUMBER); CREATE TABLE Staff (staff_id NUMBER); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Lessons (price NUMBER, lesson_time TEXT, lesson_status_code TEXT, lesson_date TIME, customer_id NUMBER, lesson_id NUMBER, staff_id NUMBER);"
      },
      {
        "question": "how many lessons does customer with first name ray took?",
        "query": "SELECT COUNT ( * ) FROM lessons AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id WHERE t2.first_name = \"Ray\"",
        "schema": "CREATE TABLE Staff (last_name TEXT, staff_id NUMBER, first_name TEXT); CREATE TABLE Lessons (customer_id NUMBER, lesson_id NUMBER, lesson_time TEXT, staff_id NUMBER, price NUMBER, lesson_date TIME, lesson_status_code TEXT); CREATE TABLE Addresses (address_id NUMBER); CREATE TABLE Customers (last_name TEXT, date_became_customer TIME, customer_id NUMBER, first_name TEXT);"
      }
    ],
    [
      {
        "question": "how many address are presented on the table",
        "query": "SELECT COUNT ( * ) FROM addresses",
        "schema": "CREATE TABLE Customers (customer_address_id NUMBER); CREATE TABLE Staff (staff_address_id NUMBER); CREATE TABLE Addresses (address_id NUMBER, city TEXT, state_province_county TEXT);"
      },
      {
        "question": "list out the staff first name on the table",
        "query": "SELECT first_name FROM staff",
        "schema": "CREATE TABLE Addresses (city TEXT, state_province_county TEXT, address_id NUMBER); CREATE TABLE Staff (last_name TEXT, first_name TEXT, nickname TEXT, staff_address_id NUMBER, staff_id NUMBER, middle_name TEXT); CREATE TABLE Customers (first_name TEXT, customer_address_id NUMBER);"
      },
      {
        "question": "what is the city of Janessa",
        "query": "SELECT t1.city FROM addresses AS t1 JOIN staff AS t2 ON t1.address_id = t2.staff_address_id WHERE t2.first_name = \"Janessa\"",
        "schema": "CREATE TABLE Staff (nickname TEXT, staff_id NUMBER, middle_name TEXT, last_name TEXT, first_name TEXT, staff_address_id NUMBER); CREATE TABLE Customers (first_name TEXT, customer_address_id NUMBER); CREATE TABLE Addresses (city TEXT, state_province_county TEXT, address_id NUMBER);"
      },
      {
        "question": "exactly",
        "query": "SELECT * FROM addresses AS t1 JOIN staff AS t2 ON t1.address_id = t2.staff_address_id WHERE t2.first_name = \"Kaitlin\"",
        "schema": "CREATE TABLE Staff (last_name TEXT, staff_address_id NUMBER, middle_name TEXT, first_name TEXT, nickname TEXT, staff_id NUMBER); CREATE TABLE Addresses (city TEXT, state_province_county TEXT, address_id NUMBER); CREATE TABLE Customers (first_name TEXT, customer_address_id NUMBER);"
      }
    ],
    [
      {
        "question": "What are the lessons thought by jenessa",
        "query": "SELECT t1.lesson_id FROM lessons AS t1 JOIN staff AS t2 ON t1.staff_id = t2.staff_id WHERE t2.first_name = \"Janessa\"",
        "schema": "CREATE TABLE Customers (first_name TEXT, customer_id NUMBER, last_name TEXT); CREATE TABLE Addresses (address_id NUMBER); CREATE TABLE Lessons (customer_id NUMBER, staff_id NUMBER, lesson_status_code TEXT, lesson_id NUMBER); CREATE TABLE Staff (middle_name TEXT, staff_id NUMBER, nickname TEXT, first_name TEXT, last_name TEXT);"
      },
      {
        "question": "yes i need details",
        "query": "SELECT * FROM lessons WHERE lesson_id = 4",
        "schema": "CREATE TABLE Staff (first_name TEXT, middle_name TEXT, staff_address_id NUMBER, staff_id NUMBER, last_name TEXT, nickname TEXT); CREATE TABLE Addresses (address_id NUMBER); CREATE TABLE Lessons (customer_id NUMBER, lesson_status_code TEXT, lesson_time TEXT, staff_id NUMBER, lesson_id NUMBER); CREATE TABLE Customers (last_name TEXT, first_name TEXT, customer_id NUMBER);"
      },
      {
        "question": "What was the lesson date",
        "query": "SELECT lesson_date FROM lessons WHERE lesson_id = 4",
        "schema": "CREATE TABLE Customers (customer_id NUMBER, first_name TEXT, last_name TEXT); CREATE TABLE Addresses (address_id NUMBER); CREATE TABLE Staff (last_name TEXT, staff_id NUMBER, first_name TEXT, middle_name TEXT, date_joined_staff TIME, staff_address_id NUMBER, nickname TEXT); CREATE TABLE Lessons (lesson_date TIME, lesson_status_code TEXT, lesson_id NUMBER, staff_id NUMBER, customer_id NUMBER, lesson_time TEXT);"
      },
      {
        "question": "What was the lesson timing",
        "query": "SELECT lesson_time FROM lessons WHERE lesson_id = 4",
        "schema": "CREATE TABLE Customers (last_name TEXT, customer_id NUMBER, first_name TEXT); CREATE TABLE Lessons (lesson_status_code TEXT, lesson_date TIME, staff_id NUMBER, customer_id NUMBER, lesson_time TEXT, lesson_id NUMBER); CREATE TABLE Staff (staff_address_id NUMBER, date_joined_staff TIME, nickname TEXT, last_name TEXT, first_name TEXT, staff_id NUMBER, middle_name TEXT); CREATE TABLE Addresses (address_id NUMBER);"
      }
    ],
    [
      {
        "question": "how many Lessons there",
        "query": "SELECT COUNT ( * ) FROM lessons",
        "schema": "CREATE TABLE Customer_Payments (customer_id NUMBER); CREATE TABLE Customers (last_name TEXT, customer_id NUMBER, first_name TEXT); CREATE TABLE Lessons (vehicle_id NUMBER, staff_id NUMBER, lesson_status_code TEXT, lesson_id NUMBER, customer_id NUMBER, lesson_time TEXT); CREATE TABLE Vehicles (vehicle_id NUMBER); CREATE TABLE Addresses (address_id NUMBER); CREATE TABLE Staff (staff_id NUMBER, first_name TEXT, last_name TEXT);"
      },
      {
        "question": "what is the nickname of staff id 3",
        "query": "SELECT nickname FROM staff WHERE staff_id = 3",
        "schema": "CREATE TABLE Customer_Payments (customer_id NUMBER); CREATE TABLE Vehicles (vehicle_id NUMBER); CREATE TABLE Lessons (customer_id NUMBER, lesson_id NUMBER, staff_id NUMBER, lesson_status_code TEXT, lesson_time TEXT, vehicle_id NUMBER); CREATE TABLE Staff (first_name TEXT, last_name TEXT, staff_id NUMBER, nickname TEXT); CREATE TABLE Customers (customer_id NUMBER, last_name TEXT, first_name TEXT); CREATE TABLE Addresses (address_id NUMBER);"
      },
      {
        "question": "what is the middle name if staff with id 2",
        "query": "SELECT middle_name FROM staff WHERE staff_id = 2",
        "schema": "CREATE TABLE Lessons (lesson_id NUMBER, lesson_time TEXT, staff_id NUMBER, vehicle_id NUMBER, lesson_status_code TEXT, customer_id NUMBER); CREATE TABLE Addresses (address_id NUMBER); CREATE TABLE Customers (customer_id NUMBER, first_name TEXT, last_name TEXT); CREATE TABLE Customer_Payments (customer_id NUMBER); CREATE TABLE Vehicles (vehicle_id NUMBER); CREATE TABLE Staff (staff_id NUMBER, last_name TEXT, nickname TEXT, middle_name TEXT, first_name TEXT);"
      }
    ],
    [
      {
        "question": "Which state have more than 2 staff members living there?",
        "query": "SELECT t1.state_province_county FROM addresses AS t1 JOIN staff AS t2 ON t1.address_id = t2.staff_address_id GROUP BY t1.state_province_county HAVING COUNT ( * ) > 2",
        "schema": "CREATE TABLE Customers (customer_address_id NUMBER); CREATE TABLE Staff (staff_id NUMBER, staff_address_id NUMBER, last_name TEXT); CREATE TABLE Addresses (country TEXT, state_province_county TEXT, address_id NUMBER);"
      },
      {
        "question": "Of those 2 states, which ones have less than 4 staff members living there?",
        "query": "SELECT t1.state_province_county FROM addresses AS t1 JOIN staff AS t2 ON t1.address_id = t2.staff_address_id GROUP BY t1.state_province_county HAVING COUNT ( * ) > 2 AND COUNT ( * ) < 4",
        "schema": "CREATE TABLE Customers (customer_address_id NUMBER); CREATE TABLE Staff (staff_id NUMBER, staff_address_id NUMBER, last_name TEXT); CREATE TABLE Addresses (country TEXT, address_id NUMBER, state_province_county TEXT);"
      },
      {
        "question": "Precisely how many staff members live in Connecticut?",
        "query": "SELECT COUNT ( * ) FROM addresses AS t1 JOIN staff AS t2 ON t1.address_id = t2.staff_address_id WHERE t1.state_province_county = \"Connecticut\"",
        "schema": "CREATE TABLE Addresses (country TEXT, state_province_county TEXT, address_id NUMBER); CREATE TABLE Staff (staff_address_id NUMBER, staff_id NUMBER, last_name TEXT); CREATE TABLE Customers (customer_address_id NUMBER);"
      },
      {
        "question": "Can you list the first names of these 3 staff members?",
        "query": "SELECT t2.first_name FROM addresses AS t1 JOIN staff AS t2 ON t1.address_id = t2.staff_address_id WHERE t1.state_province_county = \"Connecticut\"",
        "schema": "CREATE TABLE Customers (customer_address_id NUMBER); CREATE TABLE Staff (last_name TEXT, staff_address_id NUMBER, staff_id NUMBER, first_name TEXT); CREATE TABLE Addresses (country TEXT, address_id NUMBER, state_province_county TEXT);"
      },
      {
        "question": "Can you provide me with the nickname of Janessa?",
        "query": "SELECT nickname FROM staff WHERE first_name = \"Janessa\"",
        "schema": "CREATE TABLE Addresses (country TEXT, state_province_county TEXT, city TEXT, address_id NUMBER); CREATE TABLE Customers (customer_address_id NUMBER); CREATE TABLE Staff (staff_id NUMBER, first_name TEXT, middle_name TEXT, nickname TEXT, staff_address_id NUMBER, last_name TEXT);"
      },
      {
        "question": "Of the 3 staff members living in Connecticut, can you tell me which one joined the staff first?",
        "query": "SELECT t2.first_name FROM addresses AS t1 JOIN staff AS t2 ON t1.address_id = t2.staff_address_id WHERE t1.state_province_county = \"Connecticut\" ORDER BY date_joined_staff ASC LIMIT 1",
        "schema": "CREATE TABLE Addresses (state_province_county TEXT, city TEXT, address_id NUMBER, country TEXT); CREATE TABLE Staff (staff_id NUMBER, last_name TEXT, first_name TEXT, nickname TEXT, middle_name TEXT, date_joined_staff TIME, staff_address_id NUMBER); CREATE TABLE Customers (customer_address_id NUMBER);"
      }
    ],
    [
      {
        "question": "Tell me the vehicle id and staff id for all lesson id's...",
        "query": "SELECT t1.vehicle_id , t2.staff_id FROM vehicles AS t1 JOIN lessons AS t2 ON t1.vehicle_id = t2.vehicle_id",
        "schema": "CREATE TABLE Lessons (vehicle_id NUMBER, lesson_id NUMBER, staff_id NUMBER, customer_id NUMBER); CREATE TABLE Staff (last_name TEXT, staff_id NUMBER); CREATE TABLE Vehicles (vehicle_id NUMBER, vehicle_details TEXT); CREATE TABLE Customers (customer_id NUMBER);"
      },
      {
        "question": "What is the vehicle details of vehicle id 1 and 2 ?",
        "query": "SELECT vehicle_details FROM vehicles WHERE vehicle_id = \"1\" OR vehicle_id = \"2\"",
        "schema": "CREATE TABLE Vehicles (vehicle_details TEXT, vehicle_id NUMBER); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Lessons (staff_id NUMBER, vehicle_id NUMBER, customer_id NUMBER, lesson_id NUMBER); CREATE TABLE Staff (last_name TEXT, staff_id NUMBER);"
      },
      {
        "question": "What is the price of vehicle id 2 ?",
        "query": "SELECT price FROM lessons WHERE vehicle_id = \"2\"",
        "schema": "CREATE TABLE Staff (last_name TEXT, staff_id NUMBER); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Lessons (price NUMBER, vehicle_id NUMBER, lesson_id NUMBER, customer_id NUMBER, staff_id NUMBER); CREATE TABLE Vehicles (vehicle_id NUMBER, vehicle_details TEXT);"
      },
      {
        "question": "What is the id and detail of the vehicle used in lessons for most of the times ?",
        "query": "SELECT t1.vehicle_id , t1.vehicle_details FROM vehicles AS t1 JOIN lessons AS t2 ON t1.vehicle_id = t2.vehicle_id GROUP BY t1.vehicle_id ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Vehicles (vehicle_details TEXT, vehicle_id NUMBER); CREATE TABLE Lessons (customer_id NUMBER, staff_id NUMBER, lesson_id NUMBER, vehicle_id NUMBER, price NUMBER, lesson_date TIME, lesson_time TEXT); CREATE TABLE Staff (last_name TEXT, staff_id NUMBER);"
      }
    ],
    [
      {
        "question": "Which city has the most number of customers?",
        "query": "SELECT t2.city FROM customers AS t1 JOIN addresses AS t2 ON t1.customer_address_id = t2.address_id GROUP BY t2.city ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Customers (customer_id NUMBER, customer_address_id NUMBER, amount_outstanding NUMBER, customer_status_code TEXT); CREATE TABLE Addresses (city TEXT, address_id NUMBER);"
      },
      {
        "question": "Which city has the least number of customers?",
        "query": "SELECT t2.city FROM customers AS t1 JOIN addresses AS t2 ON t1.customer_address_id = t2.address_id GROUP BY t2.city ORDER BY COUNT ( * ) LIMIT 1",
        "schema": "CREATE TABLE Addresses (address_id NUMBER, city TEXT); CREATE TABLE Customers (customer_address_id NUMBER, amount_outstanding NUMBER, customer_id NUMBER, customer_status_code TEXT);"
      },
      {
        "question": "What is the most common city of all customers with the customer status code \"Bad Customer\"? | What do you mean by saying the most common city? | The city name that appears the most",
        "query": "SELECT t2.city FROM customers AS t1 JOIN addresses AS t2 ON t1.customer_address_id = t2.address_id WHERE t1.customer_status_code = 'Bad Customer' GROUP BY t2.city ORDER BY COUNT ( * ) LIMIT 1",
        "schema": "CREATE TABLE Customers (customer_address_id NUMBER, customer_status_code TEXT, amount_outstanding NUMBER, customer_id NUMBER, first_name TEXT, last_name TEXT); CREATE TABLE Addresses (city TEXT, address_id NUMBER);"
      },
      {
        "question": "What is the country of Ericamouth?",
        "query": "SELECT country FROM addresses WHERE city = 'Ericamouth'",
        "schema": "CREATE TABLE Customers (last_name TEXT, customer_status_code TEXT, amount_outstanding NUMBER, customer_id NUMBER, customer_address_id NUMBER, first_name TEXT); CREATE TABLE Addresses (city TEXT, country TEXT, address_id NUMBER, state_province_county TEXT);"
      }
    ],
    [
      {
        "question": "Can you display the address id associated with the city of Damianfort?",
        "query": "SELECT address_id FROM addresses WHERE city = \"Damianfort\"",
        "schema": "CREATE TABLE Customers (customer_address_id NUMBER); CREATE TABLE Staff (staff_address_id NUMBER); CREATE TABLE Addresses (address_id NUMBER, city TEXT);"
      },
      {
        "question": "Can you display all staff ids that contain a staff address id of 14?",
        "query": "SELECT staff_id FROM staff WHERE staff_address_id = 14",
        "schema": "CREATE TABLE Customers (customer_address_id NUMBER); CREATE TABLE Addresses (city TEXT, address_id NUMBER); CREATE TABLE Staff (staff_id NUMBER, last_name TEXT, staff_address_id NUMBER);"
      },
      {
        "question": "Can you display the first and last names associated with those staff ids?",
        "query": "SELECT staff_id,first_name, last_name FROM staff WHERE staff_address_id = 14",
        "schema": "CREATE TABLE Staff (last_name TEXT, staff_id NUMBER, staff_address_id NUMBER, first_name TEXT); CREATE TABLE Addresses (city TEXT, address_id NUMBER); CREATE TABLE Customers (customer_address_id NUMBER);"
      }
    ],
    [
      {
        "question": "Can you list all of the staff first names please?",
        "query": "SELECT first_name FROM staff",
        "schema": "CREATE TABLE Lessons (staff_id NUMBER); CREATE TABLE Addresses (address_id NUMBER); CREATE TABLE Staff (middle_name TEXT, last_name TEXT, first_name TEXT, staff_id NUMBER, nickname TEXT);"
      },
      {
        "question": "Can you filter that list to show only the staff with the letter 'a' in their names?",
        "query": "SELECT first_name FROM staff WHERE first_name LIKE \"%a%\"",
        "schema": "CREATE TABLE Addresses (address_id NUMBER); CREATE TABLE Staff (middle_name TEXT, nickname TEXT, first_name TEXT, staff_id NUMBER, last_name TEXT); CREATE TABLE Lessons (staff_id NUMBER);"
      },
      {
        "question": "Thank you!  Can you list how many lessons each of those individuals taught?",
        "query": "SELECT COUNT ( * ) , t2.first_name FROM lessons AS t1 JOIN staff AS t2 ON t1.staff_id = t2.staff_id WHERE t2.first_name LIKE \"%a%\"",
        "schema": "CREATE TABLE Lessons (lesson_status_code TEXT, lesson_id NUMBER, staff_id NUMBER); CREATE TABLE Addresses (address_id NUMBER); CREATE TABLE Staff (nickname TEXT, staff_id NUMBER, last_name TEXT, middle_name TEXT, first_name TEXT);"
      }
    ],
    [
      {
        "question": "Hello, how many customers are there?",
        "query": "SELECT COUNT ( * ) FROM customers",
        "schema": "CREATE TABLE Lessons (customer_id NUMBER); CREATE TABLE Customer_Payments (customer_id NUMBER); CREATE TABLE Customers (customer_status_code TEXT, cell_mobile_phone_number TEXT, last_name TEXT, customer_address_id NUMBER, amount_outstanding NUMBER, customer_id NUMBER, email_address TEXT, first_name TEXT, phone_number TEXT);"
      }
    ],
    [
      {
        "question": "can you show me a list of nicknames?",
        "query": "SELECT nickname FROM staff",
        "schema": "CREATE TABLE Customers (first_name TEXT, last_name TEXT, customer_id NUMBER); CREATE TABLE Staff (last_name TEXT, nickname TEXT, staff_id NUMBER, first_name TEXT); CREATE TABLE Lessons (customer_id NUMBER);"
      },
      {
        "question": "who is the first joined staff? | Which information do you want to know about the first joined staff? | can you show me a list of date joined staff?",
        "query": "SELECT date_joined_staff FROM staff",
        "schema": "CREATE TABLE Customers (first_name TEXT, customer_id NUMBER, last_name TEXT); CREATE TABLE Staff (first_name TEXT, nickname TEXT, date_joined_staff TIME, date_of_birth TIME, last_name TEXT, date_left_staff TIME, staff_id NUMBER); CREATE TABLE Lessons (customer_id NUMBER);"
      },
      {
        "question": "can you shoe me customers' phone numbers? | Do you mean cell mobile phone number or phone number? | phone number",
        "query": "SELECT phone_number FROM customers",
        "schema": "CREATE TABLE Lessons (customer_id NUMBER); CREATE TABLE Customers (date_became_customer TIME, customer_status_code TEXT, last_name TEXT, cell_mobile_phone_number TEXT, phone_number TEXT, first_name TEXT, customer_id NUMBER); CREATE TABLE Staff (date_of_birth TIME, first_name TEXT, nickname TEXT, staff_id NUMBER, date_left_staff TIME, date_joined_staff TIME, last_name TEXT);"
      },
      {
        "question": "which last names are both used by customers and by staff?",
        "query": "SELECT last_name FROM customers INTERSECT SELECT last_name FROM staff",
        "schema": "CREATE TABLE Customers (phone_number TEXT, last_name TEXT, cell_mobile_phone_number TEXT, date_became_customer TIME, customer_status_code TEXT, customer_id NUMBER, first_name TEXT); CREATE TABLE Staff (last_name TEXT, date_left_staff TIME, nickname TEXT, staff_id NUMBER, date_of_birth TIME, date_joined_staff TIME, first_name TEXT); CREATE TABLE Lessons (customer_id NUMBER);"
      }
    ],
    [
      {
        "question": "What is the date the customer with first name Carole and last Name Bernhard become a customer?",
        "query": "SELECT date_became_customer FROM customers WHERE first_name = \"Carole\" AND last_name = \"Bernhard\"",
        "schema": "CREATE TABLE Customers (date_of_birth TIME, customer_id NUMBER, date_became_customer TIME, customer_status_code TEXT, last_name TEXT, first_name TEXT);"
      },
      {
        "question": "What is the amount outstanding for this customer?",
        "query": "SELECT amount_outstanding FROM customers WHERE first_name = \"Carole\" AND last_name = \"Bernhard\"",
        "schema": "CREATE TABLE Customer_Payments (customer_id NUMBER, amount_payment NUMBER); CREATE TABLE Customers (customer_id NUMBER, amount_outstanding NUMBER, last_name TEXT, first_name TEXT, customer_status_code TEXT, date_of_birth TIME, date_became_customer TIME);"
      },
      {
        "question": "What is the customer status code for this customer?",
        "query": "SELECT customer_status_code FROM customers WHERE first_name = \"Carole\" AND last_name = \"Bernhard\"",
        "schema": "CREATE TABLE Customers (customer_id NUMBER, customer_status_code TEXT, date_became_customer TIME, amount_outstanding NUMBER, date_of_birth TIME, last_name TEXT, first_name TEXT); CREATE TABLE Customer_Payments (amount_payment NUMBER, customer_id NUMBER);"
      },
      {
        "question": "What is the date the customer with last name Bernhard become a customer?",
        "query": "SELECT date_became_customer FROM customers WHERE last_name = \"Bernhard\"",
        "schema": "CREATE TABLE Customer_Payments (customer_id NUMBER, amount_payment NUMBER); CREATE TABLE Customers (customer_status_code TEXT, customer_id NUMBER, date_became_customer TIME, first_name TEXT, date_of_birth TIME, amount_outstanding NUMBER, last_name TEXT);"
      }
    ],
    [
      {
        "question": "Which last names are both used by customers and staff?",
        "query": "SELECT last_name FROM customers INTERSECT SELECT last_name FROM staff",
        "schema": "CREATE TABLE Lessons (customer_id NUMBER); CREATE TABLE Staff (first_name TEXT, nickname TEXT, last_name TEXT, staff_id NUMBER); CREATE TABLE Customers (last_name TEXT, customer_id NUMBER, first_name TEXT); CREATE TABLE Customer_Payments (customer_id NUMBER);"
      },
      {
        "question": "What is the most common first name of staff?",
        "query": "SELECT first_name FROM staff GROUP BY first_name ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Staff (last_name TEXT, nickname TEXT, first_name TEXT, staff_id NUMBER); CREATE TABLE Lessons (customer_id NUMBER); CREATE TABLE Customer_Payments (customer_id NUMBER); CREATE TABLE Customers (last_name TEXT, customer_id NUMBER, first_name TEXT);"
      },
      {
        "question": "What's the most common last name of staff?",
        "query": "SELECT last_name FROM staff GROUP BY first_name ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Staff (nickname TEXT, last_name TEXT, first_name TEXT, staff_id NUMBER); CREATE TABLE Customers (customer_id NUMBER, first_name TEXT, last_name TEXT); CREATE TABLE Lessons (customer_id NUMBER); CREATE TABLE Customer_Payments (customer_id NUMBER);"
      },
      {
        "question": "What are the first names of the customers with the last name Mertz?",
        "query": "SELECT first_name FROM staff WHERE last_name = 'Mertz'",
        "schema": "CREATE TABLE Customer_Payments (customer_id NUMBER); CREATE TABLE Lessons (customer_id NUMBER); CREATE TABLE Customers (customer_address_id NUMBER, customer_id NUMBER, last_name TEXT, customer_status_code TEXT, first_name TEXT); CREATE TABLE Staff (staff_id NUMBER, nickname TEXT, first_name TEXT, last_name TEXT);"
      },
      {
        "question": "What about the staff?",
        "query": "SELECT first_name FROM staff WHERE last_name = 'Mertz'",
        "schema": "CREATE TABLE Customer_Payments (customer_id NUMBER); CREATE TABLE Staff (staff_id NUMBER, first_name TEXT, nickname TEXT, last_name TEXT); CREATE TABLE Customers (customer_id NUMBER, customer_address_id NUMBER, customer_status_code TEXT, last_name TEXT, first_name TEXT); CREATE TABLE Lessons (customer_id NUMBER);"
      }
    ],
    [
      {
        "question": "Can you list the address id of all customers who lived in Lockmanfurt?",
        "query": "SELECT t2.address_id FROM customers AS t1 JOIN addresses AS t2 ON t1.customer_address_id = t2.address_id WHERE t2.city = \"Lockmanfurt\"",
        "schema": "CREATE TABLE Addresses (city TEXT, state_province_county TEXT, address_id NUMBER); CREATE TABLE Customers (customer_address_id NUMBER, first_name TEXT, last_name TEXT, customer_id NUMBER);"
      },
      {
        "question": "Can you list all other related information for Sigrid Schmeler?",
        "query": "SELECT * FROM customers WHERE first_name = \"Sigrid\" AND last_name = \"Schmeler\"",
        "schema": "CREATE TABLE Staff (last_name TEXT, first_name TEXT); CREATE TABLE Customers (last_name TEXT, first_name TEXT, customer_id NUMBER, customer_address_id NUMBER); CREATE TABLE Addresses (city TEXT, state_province_county TEXT, address_id NUMBER);"
      }
    ],
    [
      {
        "question": "How many lessons taken by customer with first name as Ryan and last name as Goodwin were completed?",
        "query": "SELECT COUNT ( * ) FROM lessons AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id WHERE t2.first_name = \"Rylan\" AND t2.last_name = \"Goodwin\" AND t1.lesson_status_code = \"Completed\"",
        "schema": "CREATE TABLE Lessons (customer_id NUMBER, lesson_time TEXT, lesson_id NUMBER, lesson_status_code TEXT); CREATE TABLE Customers (customer_id NUMBER, last_name TEXT, customer_status_code TEXT, first_name TEXT);"
      },
      {
        "question": "What customer status code does Ryan Goodwin have?",
        "query": "SELECT customer_status_code FROM customers WHERE first_name = \"Rylan\" AND last_name = \"Goodwin\"",
        "schema": "CREATE TABLE Customers (first_name TEXT, customer_status_code TEXT, last_name TEXT, customer_id NUMBER); CREATE TABLE Lessons (customer_id NUMBER, lesson_id NUMBER, lesson_time TEXT, lesson_status_code TEXT);"
      },
      {
        "question": "What is Ryan Goodwin's date of birth?",
        "query": "SELECT date_of_birth FROM customers WHERE first_name = \"Rylan\" AND last_name = \"Goodwin\"",
        "schema": "CREATE TABLE Customers (date_became_customer TIME, first_name TEXT, last_name TEXT, customer_status_code TEXT, customer_id NUMBER, date_of_birth TIME); CREATE TABLE Lessons (lesson_status_code TEXT, customer_id NUMBER, lesson_id NUMBER, lesson_time TEXT, lesson_date TIME);"
      }
    ]
  ],
  "workshop_paper": [
    [
      {
        "question": "list the authors have submissions",
        "query": "SELECT author FROM submission",
        "schema": "CREATE TABLE Acceptance (Submission_ID NUMBER); CREATE TABLE submission (Author TEXT, Submission_ID NUMBER);"
      },
      {
        "question": "show me the list of authors who have submissions to workshop.",
        "query": "SELECT DISTINCT t2.author FROM acceptance AS t1 JOIN submission AS t2 ON t1.submission_id = t2.submission_id",
        "schema": "CREATE TABLE submission (Submission_ID NUMBER, Author TEXT); CREATE TABLE workshop (Workshop_ID NUMBER); CREATE TABLE Acceptance (Workshop_ID NUMBER, Submission_ID NUMBER);"
      },
      {
        "question": "list the authors who have submissions to more than one workshop.",
        "query": "SELECT t2.author FROM acceptance AS t1 JOIN submission AS t2 ON t1.submission_id = t2.submission_id GROUP BY t2.author HAVING COUNT ( DISTINCT t1.workshop_id ) > 1",
        "schema": "CREATE TABLE submission (Author TEXT, Submission_ID NUMBER); CREATE TABLE workshop (Workshop_ID NUMBER); CREATE TABLE Acceptance (Submission_ID NUMBER, Workshop_ID NUMBER);"
      }
    ],
    [
      {
        "question": "May I have a list of authors?",
        "query": "SELECT author FROM submission",
        "schema": "CREATE TABLE submission (Author TEXT, Submission_ID NUMBER);"
      },
      {
        "question": "Can you give me a list of all authors from Florida, or Temple? | Do you mean the authors whose college is Florida or Temple? | Yes I did.",
        "query": "SELECT author FROM submission WHERE college = 'Florida' OR college = 'Temple'",
        "schema": "CREATE TABLE submission (College TEXT, Author TEXT, Submission_ID NUMBER);"
      }
    ],
    [
      {
        "question": "how many acceptance are presented on the table",
        "query": "SELECT COUNT ( * ) FROM acceptance",
        "schema": "CREATE TABLE Acceptance (Result TEXT, Workshop_ID NUMBER, Submission_ID NUMBER); CREATE TABLE submission (Submission_ID NUMBER);"
      },
      {
        "question": "what is highest score of submission",
        "query": "SELECT scores FROM submission ORDER BY scores DESC LIMIT 1",
        "schema": "CREATE TABLE Acceptance (Result TEXT, Submission_ID NUMBER, Workshop_ID NUMBER); CREATE TABLE submission (Submission_ID NUMBER, Scores NUMBER, College TEXT);"
      },
      {
        "question": "list out the authors",
        "query": "SELECT author FROM submission",
        "schema": "CREATE TABLE submission (Scores NUMBER, College TEXT, Author TEXT, Submission_ID NUMBER); CREATE TABLE Acceptance (Workshop_ID NUMBER, Submission_ID NUMBER, Result TEXT);"
      },
      {
        "question": "what is the college of Steve Niehaus",
        "query": "SELECT college FROM submission WHERE author = \"Steve Niehaus\"",
        "schema": "CREATE TABLE Acceptance (Submission_ID NUMBER, Result TEXT, Workshop_ID NUMBER); CREATE TABLE submission (Author TEXT, Submission_ID NUMBER, College TEXT, Scores NUMBER);"
      },
      {
        "question": "list the authors who do not have submission to any workshop",
        "query": "SELECT author FROM submission WHERE submission_id NOT IN ( SELECT submission_id FROM acceptance )",
        "schema": "CREATE TABLE submission (College TEXT, Submission_ID NUMBER, Scores NUMBER, Author TEXT); CREATE TABLE Acceptance (Workshop_ID NUMBER, Submission_ID NUMBER, Result TEXT); CREATE TABLE workshop (Name TEXT, Venue TEXT, Workshop_ID NUMBER);"
      }
    ],
    [
      {
        "question": "How many author are in the workshop altogether",
        "query": "SELECT COUNT ( DISTINCT author ) FROM submission",
        "schema": "CREATE TABLE workshop (Workshop_ID NUMBER, Name TEXT); CREATE TABLE submission (Submission_ID NUMBER, Author TEXT); CREATE TABLE Acceptance (Workshop_ID NUMBER);"
      },
      {
        "question": "Give me the names of all the authors.",
        "query": "SELECT DISTINCT author FROM submission",
        "schema": "CREATE TABLE workshop (Name TEXT, Workshop_ID NUMBER); CREATE TABLE submission (Submission_ID NUMBER, Author TEXT); CREATE TABLE Acceptance (Submission_ID NUMBER, Workshop_ID NUMBER);"
      },
      {
        "question": "How many workshops did each author submitted to",
        "query": "SELECT t2.author , COUNT ( DISTINCT t1.workshop_id ) FROM acceptance AS t1 JOIN submission AS t2 ON t1.submission_id = t2.submission_id GROUP BY t2.author",
        "schema": "CREATE TABLE Acceptance (Submission_ID NUMBER, Workshop_ID NUMBER); CREATE TABLE workshop (Name TEXT, Workshop_ID NUMBER); CREATE TABLE submission (Submission_ID NUMBER, Author TEXT);"
      }
    ]
  ],
  "wine_1": [
    [
      {
        "question": "Show the country of appelations Alexander Valley?",
        "query": "SELECT county FROM appellations WHERE appelation = 'Alexander Valley'",
        "schema": "CREATE TABLE wine (State TEXT, Winery TEXT, Appelation TEXT); CREATE TABLE appellations (County TEXT, Appelation TEXT, Area TEXT, State TEXT);"
      },
      {
        "question": "Show the maximum price of wins from the appelations in central Coast area and produced before thebyear of 2005?",
        "query": "SELECT MAX ( t2.price ) FROM appellations AS t1 JOIN wine AS t2 ON t1.appelation = t2.appelation WHERE t1.area = \"Central Coast\" AND t2.year < 2005",
        "schema": "CREATE TABLE wine (Name TEXT, Appelation TEXT, Year NUMBER, Winery TEXT, State TEXT, Price NUMBER); CREATE TABLE appellations (State TEXT, Appelation TEXT, Area TEXT, County TEXT);"
      },
      {
        "question": "Show the country of appelations Amador County?",
        "query": "SELECT county FROM appellations WHERE appelation = 'Amador County'",
        "schema": "CREATE TABLE appellations (Appelation TEXT, Area TEXT, State TEXT, County TEXT); CREATE TABLE wine (Winery TEXT, Price NUMBER, State TEXT, Appelation TEXT, Year NUMBER, Name TEXT);"
      }
    ],
    [
      {
        "question": "out of those show me prices higher than 30 | The names of all wines that have prices both higher than some wines from John Anthony winery  and  higher  than  30 are shown in the table | One last question. out of those show me cases higher than 300",
        "query": "SELECT DISTINCT name FROM wine WHERE price > ( SELECT MIN ( price ) FROM wine WHERE winery = \"John Anthony\" ) AND price>300",
        "schema": "CREATE TABLE wine (Price NUMBER, Cases NUMBER, Winery TEXT, Name TEXT); CREATE TABLE appellations (Appelation TEXT);"
      }
    ],
    [
      {
        "question": "Find the distinct names of all wines that have prices higher than some wines from John Anthony winery.",
        "query": "SELECT DISTINCT name FROM wine WHERE price > ( SELECT MIN ( price ) FROM wine WHERE winery = \"John Anthony\" )",
        "schema": "CREATE TABLE appellations (Appelation TEXT); CREATE TABLE wine (Price NUMBER, Winery TEXT, Name TEXT, Appelation TEXT);"
      },
      {
        "question": "Find the price of all wines that have prices higher than some wines from John Anthony winery.",
        "query": "SELECT price FROM wine WHERE price > ( SELECT MIN ( price ) FROM wine WHERE winery = \"John Anthony\" )",
        "schema": "CREATE TABLE appellations (Appelation TEXT); CREATE TABLE wine (Price NUMBER, Winery TEXT, Name TEXT, Appelation TEXT);"
      },
      {
        "question": "Find the score of all wines that have prices higher than some wines from John Anthony winery.",
        "query": "SELECT score FROM wine WHERE price > ( SELECT MIN ( price ) FROM wine WHERE winery = \"John Anthony\" )",
        "schema": "CREATE TABLE appellations (Appelation TEXT); CREATE TABLE wine (Price NUMBER, Name TEXT, Score NUMBER, Appelation TEXT, Winery TEXT);"
      }
    ],
    [
      {
        "question": "Hi, could you please show me the list of all appellations those produce wine after 2008?",
        "query": "SELECT appelation FROM wine WHERE YEAR > 2008",
        "schema": "CREATE TABLE wine (Name TEXT, Appelation TEXT, Year NUMBER, Winery TEXT); CREATE TABLE appellations (Appelation TEXT);"
      },
      {
        "question": "That's a big list, thank you. Then could you please exclude Central Coast area from them?",
        "query": "SELECT appelation FROM wine WHERE YEAR > 2008 EXCEPT SELECT appelation FROM appellations WHERE area = \"Central Coast\"",
        "schema": "CREATE TABLE appellations (State TEXT, Appelation TEXT, Area TEXT, County TEXT); CREATE TABLE wine (State TEXT, Appelation TEXT, Winery TEXT, Name TEXT, Year NUMBER);"
      },
      {
        "question": "That's great, thank you. Could you please show me the list of states where these appellations are located at?",
        "query": "SELECT state FROM appellations WHERE appelation IN ( SELECT appelation FROM wine WHERE YEAR > 2008 EXCEPT SELECT appelation FROM appellations WHERE area = \"Central Coast\" )",
        "schema": "CREATE TABLE wine (Name TEXT, Winery TEXT, State TEXT, Year NUMBER, Appelation TEXT); CREATE TABLE appellations (State TEXT, Area TEXT, County TEXT, Appelation TEXT);"
      },
      {
        "question": "Oh.. actually somewhat expected that. Thank you, then could you please let me know the average price of all wines?",
        "query": "SELECT AVG ( price ) FROM wine",
        "schema": "CREATE TABLE wine (State TEXT, Name TEXT, Appelation TEXT, Price NUMBER, Winery TEXT, Year NUMBER); CREATE TABLE appellations (Appelation TEXT, Area TEXT, State TEXT, County TEXT);"
      },
      {
        "question": "Then could you please show me the list of wines those are more expensive than the average?",
        "query": "SELECT * FROM wine WHERE price > ( SELECT AVG ( price ) FROM wine )",
        "schema": "CREATE TABLE wine (Winery TEXT, Appelation TEXT, Year NUMBER, Name TEXT, Price NUMBER, State TEXT); CREATE TABLE appellations (State TEXT, Area TEXT, County TEXT, Appelation TEXT);"
      }
    ],
    [
      {
        "question": "Can you show me the most expensive wine made in the year 2006?",
        "query": "SELECT * FROM wine WHERE YEAR = 2006 ORDER BY price DESC LIMIT 1",
        "schema": "CREATE TABLE wine (Price NUMBER, Name TEXT, Year NUMBER, Winery TEXT); CREATE TABLE appellations (Appelation TEXT);"
      },
      {
        "question": "Great, can you show me all wines that have a higher price than the one currently in the table?",
        "query": "SELECT * FROM wine WHERE price > ( SELECT MAX ( price ) FROM wine WHERE YEAR = 2006 )",
        "schema": "CREATE TABLE appellations (Appelation TEXT); CREATE TABLE wine (Year NUMBER, Price NUMBER, Name TEXT, Winery TEXT);"
      },
      {
        "question": "Can you show only the name?",
        "query": "SELECT name FROM wine WHERE price > ( SELECT MAX ( price ) FROM wine WHERE YEAR = 2006 )",
        "schema": "CREATE TABLE wine (Name TEXT, Year NUMBER, Winery TEXT, Price NUMBER); CREATE TABLE appellations (Appelation TEXT);"
      }
    ],
    [
      {
        "question": "Which is the most expensive wine?",
        "query": "SELECT * FROM wine ORDER BY price DESC LIMIT 1",
        "schema": "CREATE TABLE appellations (Appelation TEXT); CREATE TABLE wine (Name TEXT, Price NUMBER, Appelation TEXT, Winery TEXT, Year NUMBER, No NUMBER);"
      },
      {
        "question": "From which year is it?",
        "query": "SELECT YEAR FROM wine ORDER BY price DESC LIMIT 1",
        "schema": "CREATE TABLE wine (Name TEXT, Appelation TEXT, No NUMBER, Price NUMBER, Year NUMBER, Winery TEXT); CREATE TABLE appellations (Appelation TEXT);"
      },
      {
        "question": "What is the appelation of Giana | What is Giana? | Sorry Giana is the name of wine",
        "query": "SELECT appelation FROM wine WHERE name = 'Giana'",
        "schema": "CREATE TABLE appellations (Appelation TEXT); CREATE TABLE wine (Year NUMBER, No NUMBER, Price NUMBER, Appelation TEXT, Name TEXT, Winery TEXT);"
      },
      {
        "question": "Which wine has a score of 91?",
        "query": "SELECT * FROM wine WHERE score = 91",
        "schema": "CREATE TABLE appellations (Appelation TEXT); CREATE TABLE wine (No NUMBER, Winery TEXT, Year NUMBER, Name TEXT, Price NUMBER, Appelation TEXT, Score NUMBER);"
      }
    ],
    [
      {
        "question": "Please show me the type of grape available at Old Kraft Vineyard | The type of grape in the wine with a name of Old Kraft Vineyard is Zinfandel. | What are other wineries that also have Zinfandel?",
        "query": "SELECT winery FROM wine WHERE grape = \"Zinfandel\"",
        "schema": "CREATE TABLE appellations (Appelation TEXT); CREATE TABLE wine (Winery TEXT, Grape TEXT, Appelation TEXT, Name TEXT); CREATE TABLE grapes (ID NUMBER, Grape TEXT);"
      },
      {
        "question": "Can you give me the top three wineries with the most white wines?",
        "query": "SELECT t2.winery FROM grapes AS t1 JOIN wine AS t2 ON t1.grape = t2.grape WHERE t1.color = \"White\" GROUP BY t2.winery ORDER BY COUNT ( * ) DESC LIMIT 3",
        "schema": "CREATE TABLE wine (Grape TEXT, Winery TEXT, Appelation TEXT, Name TEXT); CREATE TABLE grapes (ID NUMBER, Color TEXT, Grape TEXT); CREATE TABLE appellations (Appelation TEXT);"
      },
      {
        "question": "Which of these have the most white wines?",
        "query": "SELECT t2.winery FROM grapes AS t1 JOIN wine AS t2 ON t1.grape = t2.grape WHERE t1.color = \"White\" GROUP BY t2.winery ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE appellations (Appelation TEXT); CREATE TABLE wine (Grape TEXT, Winery TEXT, Appelation TEXT, Name TEXT); CREATE TABLE grapes (Color TEXT, Grape TEXT, ID NUMBER);"
      }
    ],
    [
      {
        "question": "Which appelation produces the most expensive wine?",
        "query": "SELECT t1.appelation FROM appellations AS t1 JOIN wine AS t2 ON t1.appelation = t2.appelation WHERE t2.price = ( SELECT MAX ( price ) FROM wine )",
        "schema": "CREATE TABLE wine (Price NUMBER, Appelation TEXT, Name TEXT, Winery TEXT); CREATE TABLE appellations (Appelation TEXT);"
      },
      {
        "question": "How much is the most expensive wine produced in Sonoma County?",
        "query": "SELECT MAX ( t2.price ) FROM appellations AS t1 JOIN wine AS t2 ON t1.appelation = t2.appelation WHERE t1.county = \"Sonoma\"",
        "schema": "CREATE TABLE wine (Winery TEXT, Appelation TEXT, Name TEXT, State TEXT, Price NUMBER); CREATE TABLE appellations (Appelation TEXT, County TEXT, State TEXT);"
      },
      {
        "question": "How many wines are produced in Sonoma County?",
        "query": "SELECT COUNT ( * ) FROM appellations AS t1 JOIN wine AS t2 ON t1.appelation = t2.appelation WHERE t1.county = \"Sonoma\"",
        "schema": "CREATE TABLE wine (Winery TEXT, Appelation TEXT, Name TEXT, State TEXT, Price NUMBER); CREATE TABLE appellations (State TEXT, Appelation TEXT, County TEXT);"
      },
      {
        "question": "What is the price of the least expensive wine produced in Sonoma County?",
        "query": "SELECT MIN ( t2.price ) FROM appellations AS t1 JOIN wine AS t2 ON t1.appelation = t2.appelation WHERE t1.county = \"Sonoma\"",
        "schema": "CREATE TABLE wine (State TEXT, Winery TEXT, Appelation TEXT, Price NUMBER, Name TEXT); CREATE TABLE appellations (State TEXT, County TEXT, Appelation TEXT);"
      },
      {
        "question": "What is the median price of wines produced in Sonoma County? | Did you mean the average price of wines produced in Sonoma County? | Yes, what is the average price of wines produced in Sonoma County?",
        "query": "SELECT AVG ( t2.price ) FROM appellations AS t1 JOIN wine AS t2 ON t1.appelation = t2.appelation WHERE t1.county = \"Sonoma\"",
        "schema": "CREATE TABLE wine (Appelation TEXT, State TEXT, Name TEXT, Winery TEXT, Price NUMBER); CREATE TABLE appellations (State TEXT, Appelation TEXT, County TEXT);"
      }
    ],
    [
      {
        "question": "Which wine has the highest price?",
        "query": "SELECT * FROM wine ORDER BY price DESC LIMIT 1",
        "schema": "CREATE TABLE appellations (Appelation TEXT); CREATE TABLE wine (Winery TEXT, Name TEXT, No NUMBER, Appelation TEXT, Price NUMBER);"
      },
      {
        "question": "Which wine has the highest score?",
        "query": "SELECT * FROM wine ORDER BY score DESC LIMIT 1",
        "schema": "CREATE TABLE wine (Appelation TEXT, Price NUMBER, Score NUMBER, Name TEXT, Winery TEXT, No NUMBER); CREATE TABLE appellations (Appelation TEXT);"
      },
      {
        "question": "Which wine has the most cases available?",
        "query": "SELECT * FROM wine ORDER BY cases DESC LIMIT 1",
        "schema": "CREATE TABLE appellations (Appelation TEXT); CREATE TABLE wine (Appelation TEXT, Cases NUMBER, Winery TEXT, Price NUMBER, Score NUMBER, Name TEXT, No NUMBER);"
      },
      {
        "question": "How about winery with the least cases?",
        "query": "SELECT winery FROM wine ORDER BY cases ASC LIMIT 1",
        "schema": "CREATE TABLE wine (No NUMBER, Score NUMBER, Price NUMBER, Appelation TEXT, Winery TEXT, Cases NUMBER, Name TEXT); CREATE TABLE appellations (Appelation TEXT);"
      }
    ],
    [
      {
        "question": "Which kinds of grapes are white?",
        "query": "SELECT grape FROM grapes WHERE color = \"White\"",
        "schema": "CREATE TABLE grapes (ID NUMBER, Grape TEXT, Color TEXT); CREATE TABLE wine (Grape TEXT, Name TEXT);"
      },
      {
        "question": "List all the wines that use color white grapes. | What kinds of attributes of wines do you want? | List wines made with white grapes.",
        "query": "SELECT * FROM grapes AS t1 JOIN wine AS t2 ON t1.grape = t2.grape WHERE t1.color = \"White\"",
        "schema": "CREATE TABLE grapes (Color TEXT, Grape TEXT, ID NUMBER); CREATE TABLE wine (Name TEXT, Grape TEXT);"
      },
      {
        "question": "Excellent. What is their average score?",
        "query": "SELECT AVG ( score ) FROM grapes AS t1 JOIN wine AS t2 ON t1.grape = t2.grape WHERE t1.color = \"White\"",
        "schema": "CREATE TABLE wine (Grape TEXT, Name TEXT, Score NUMBER); CREATE TABLE grapes (Grape TEXT, ID NUMBER, Color TEXT);"
      },
      {
        "question": "What is the average score of wines not made with white grapes?",
        "query": "SELECT AVG ( score ) FROM grapes AS t1 JOIN wine AS t2 ON t1.grape = t2.grape WHERE t1.color ! = \"White\"",
        "schema": "CREATE TABLE grapes (ID NUMBER, Grape TEXT, Color TEXT); CREATE TABLE wine (Score NUMBER, Grape TEXT, Name TEXT);"
      },
      {
        "question": "List only the names and scores of wines made with white grapes.",
        "query": "SELECT t2.name , t2.score FROM grapes AS t1 JOIN wine AS t2 ON t1.grape = t2.grape WHERE t1.color = \"White\"",
        "schema": "CREATE TABLE grapes (Color TEXT, Grape TEXT, ID NUMBER); CREATE TABLE wine (Score NUMBER, Name TEXT, Grape TEXT);"
      },
      {
        "question": "What is the maximum, minimum, and average price of these wines?",
        "query": "SELECT MAX ( price ) , MIN ( price ) ,AVG ( price ) FROM grapes AS t1 JOIN wine AS t2 ON t1.grape = t2.grape WHERE t1.color = \"White\"",
        "schema": "CREATE TABLE wine (Score NUMBER, Name TEXT, Grape TEXT, Price NUMBER); CREATE TABLE grapes (Color TEXT, ID NUMBER, Grape TEXT);"
      }
    ],
    [
      {
        "question": "What grapes have a score higher than 93?",
        "query": "SELECT DISTINCT grape FROM wine WHERE score > 93",
        "schema": "CREATE TABLE wine (Score NUMBER, Grape TEXT, Name TEXT); CREATE TABLE appellations (Appelation TEXT); CREATE TABLE grapes (ID NUMBER, Grape TEXT);"
      },
      {
        "question": "What are the appellations whose score is higher than 93?",
        "query": "SELECT DISTINCT appelation FROM wine WHERE score > 93",
        "schema": "CREATE TABLE wine (Name TEXT, Appelation TEXT, Grape TEXT, Score NUMBER); CREATE TABLE appellations (Appelation TEXT); CREATE TABLE grapes (Grape TEXT, ID NUMBER);"
      },
      {
        "question": "What are the names of wines whose score is higher than 93?",
        "query": "SELECT name FROM wine WHERE score > 93",
        "schema": "CREATE TABLE grapes (Grape TEXT, ID NUMBER); CREATE TABLE wine (Grape TEXT, Appelation TEXT, Score NUMBER, Name TEXT); CREATE TABLE appellations (Appelation TEXT);"
      },
      {
        "question": "Can you please list the grapes, appellations, and names of wines whose score is higher than 93?",
        "query": "SELECT grape , appelation , name FROM wine WHERE score > 93",
        "schema": "CREATE TABLE wine (Score NUMBER, Name TEXT, Appelation TEXT, Grape TEXT); CREATE TABLE appellations (Appelation TEXT); CREATE TABLE grapes (ID NUMBER, Grape TEXT);"
      }
    ],
    [
      {
        "question": "Please show me the names of wines by Brander winery.",
        "query": "SELECT name FROM wine WHERE winery = \"Brander\"",
        "schema": "CREATE TABLE wine (Winery TEXT, Name TEXT, Appelation TEXT); CREATE TABLE appellations (Appelation TEXT);"
      },
      {
        "question": "Hmm, can you add the production years?",
        "query": "SELECT name,YEAR FROM wine WHERE winery = \"Brander\"",
        "schema": "CREATE TABLE wine (Appelation TEXT, Year NUMBER, Name TEXT, Winery TEXT); CREATE TABLE appellations (Appelation TEXT);"
      },
      {
        "question": "What are the names of wines whose production year are before the year of all wines by Brander winery?",
        "query": "SELECT name FROM wine WHERE YEAR < ( SELECT MIN ( YEAR ) FROM wine WHERE winery = \"Brander\" )",
        "schema": "CREATE TABLE wine (Appelation TEXT, Year NUMBER, Name TEXT, Winery TEXT); CREATE TABLE appellations (Appelation TEXT);"
      }
    ],
    [
      {
        "question": "Hi, could you find the appellations that produce wines after the year of 2008 but not in Central Coast area.",
        "query": "SELECT appelation FROM wine WHERE YEAR > 2008 EXCEPT SELECT appelation FROM appellations WHERE area = \"Central Coast\"",
        "schema": "CREATE TABLE wine (Appelation TEXT, Year NUMBER, Name TEXT, Winery TEXT, State TEXT); CREATE TABLE appellations (State TEXT, Area TEXT, County TEXT, Appelation TEXT);"
      },
      {
        "question": "How many produce in the sierra foothills? | Did you want the number of appelations that produce wine in the Sierra Foothills? | yes",
        "query": "SELECT COUNT ( * ) FROM appellations WHERE area = \"Sierra Foothills\"",
        "schema": "CREATE TABLE wine (Year NUMBER, Winery TEXT, Appelation TEXT, State TEXT, Name TEXT); CREATE TABLE appellations (Appelation TEXT, County TEXT, Area TEXT, State TEXT);"
      },
      {
        "question": "How many appellations produce wine in Napa Valley?",
        "query": "SELECT COUNT ( * ) FROM appellations WHERE county = \"Napa\"",
        "schema": "CREATE TABLE wine (Year NUMBER, Name TEXT, Winery TEXT, State TEXT, Appelation TEXT); CREATE TABLE appellations (State TEXT, Area TEXT, County TEXT, Appelation TEXT);"
      },
      {
        "question": "How many appellations produce wine in St. Helena?",
        "query": "SELECT COUNT ( * ) FROM wine WHERE appelation = \"St. Helena\"",
        "schema": "CREATE TABLE wine (State TEXT, Appelation TEXT, Name TEXT, Year NUMBER, Winery TEXT); CREATE TABLE appellations (County TEXT, State TEXT, Appelation TEXT, Area TEXT);"
      }
    ],
    [
      {
        "question": "What is the average price of all wine products?",
        "query": "SELECT AVG ( price ) FROM wine",
        "schema": "CREATE TABLE wine (Price NUMBER, Appelation TEXT, Name TEXT); CREATE TABLE appellations (Appelation TEXT);"
      },
      {
        "question": "Which wine product has the highest price?",
        "query": "SELECT * FROM wine WHERE price = ( SELECT MAX ( price ) FROM wine )",
        "schema": "CREATE TABLE wine (Name TEXT, Price NUMBER, Appelation TEXT); CREATE TABLE appellations (Appelation TEXT);"
      },
      {
        "question": "Which wine products have the highest average price? | Do you mean which grape whose wine products has the highest average price? | Yes, Which grapes are in the wine products that have the highest average price?",
        "query": "SELECT t1.grape FROM grapes AS t1 JOIN wine AS t2 ON t1.grape = t2.grape GROUP BY t2.grape ORDER BY AVG ( price ) DESC LIMIT 1",
        "schema": "CREATE TABLE appellations (Appelation TEXT); CREATE TABLE wine (Grape TEXT, Price NUMBER, Appelation TEXT, Name TEXT); CREATE TABLE grapes (Grape TEXT, ID NUMBER);"
      },
      {
        "question": "What is the average price of the products that Roussanne is in?",
        "query": "SELECT AVG ( price ) FROM grapes AS t1 JOIN wine AS t2 ON t1.grape = t2.grape GROUP BY t2.grape ORDER BY AVG ( price ) DESC LIMIT 1",
        "schema": "CREATE TABLE grapes (ID NUMBER, Grape TEXT); CREATE TABLE wine (Name TEXT, Price NUMBER, Appelation TEXT, Grape TEXT); CREATE TABLE appellations (Appelation TEXT);"
      },
      {
        "question": "What color of grape is Roussanne?",
        "query": "SELECT color FROM grapes WHERE grape = \"Roussanne\"",
        "schema": "CREATE TABLE grapes (ID NUMBER, Grape TEXT, Color TEXT); CREATE TABLE appellations (Appelation TEXT); CREATE TABLE wine (Grape TEXT, Name TEXT, Appelation TEXT, Price NUMBER);"
      }
    ],
    [
      {
        "question": "hello,\nwhat are the maximum price and score of wines in each year?",
        "query": "SELECT MAX ( price ) , MAX ( score ) , YEAR FROM wine GROUP BY YEAR",
        "schema": "CREATE TABLE appellations (Appelation TEXT); CREATE TABLE wine (Year NUMBER, Name TEXT, Score NUMBER, Price NUMBER);"
      },
      {
        "question": "yes | Did  you  mean  the No  in  the wine  table which  is  best liked? | yes that is what i meant",
        "query": "SELECT NO FROM wine ORDER BY score DESC LIMIT 1",
        "schema": "CREATE TABLE wine (Score NUMBER, Name TEXT, Year NUMBER, No NUMBER, Price NUMBER); CREATE TABLE appellations (Appelation TEXT, No NUMBER);"
      }
    ],
    [
      {
        "question": "Which wines were produced before 2000?",
        "query": "SELECT DISTINCT name FROM wine WHERE YEAR < 2000",
        "schema": "CREATE TABLE wine (Winery TEXT, Appelation TEXT, Name TEXT, No NUMBER, Year NUMBER); CREATE TABLE appellations (Appelation TEXT);"
      },
      {
        "question": "What is the most common year of production?",
        "query": "SELECT YEAR FROM wine GROUP BY YEAR ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE appellations (Appelation TEXT); CREATE TABLE wine (Year NUMBER, Winery TEXT, Name TEXT, Appelation TEXT, No NUMBER);"
      },
      {
        "question": "Which wines were produced in 2007?",
        "query": "SELECT winery FROM wine WHERE YEAR = 2007",
        "schema": "CREATE TABLE appellations (Appelation TEXT); CREATE TABLE wine (Year NUMBER, No NUMBER, Name TEXT, Winery TEXT, Appelation TEXT);"
      },
      {
        "question": "What about the ones after the year 2010?",
        "query": "SELECT DISTINCT name FROM wine WHERE YEAR > 2010",
        "schema": "CREATE TABLE appellations (Appelation TEXT); CREATE TABLE wine (Winery TEXT, Name TEXT, Year NUMBER, Appelation TEXT, No NUMBER);"
      }
    ],
    [
      {
        "question": "what is the average price of wine not produced in Sanoma county",
        "query": "SELECT AVG ( t2.price ) FROM appellations AS t1 JOIN wine AS t2 ON t1.appelation = t2.appelation WHERE t1.county ! = 'Sonoma'",
        "schema": "CREATE TABLE wine (Winery TEXT, Name TEXT, No NUMBER, Appelation TEXT, Price NUMBER, State TEXT); CREATE TABLE appellations (Appelation TEXT, State TEXT, County TEXT, Area TEXT);"
      },
      {
        "question": "list all wineries available.",
        "query": "SELECT DISTINCT winery FROM wine",
        "schema": "CREATE TABLE wine (Appelation TEXT, Price NUMBER, State TEXT, Name TEXT, No NUMBER, Winery TEXT); CREATE TABLE appellations (Area TEXT, County TEXT, State TEXT, Appelation TEXT);"
      },
      {
        "question": "list the all their prices",
        "query": "SELECT DISTINCT winery, price FROM wine",
        "schema": "CREATE TABLE wine (Appelation TEXT, State TEXT, Winery TEXT, Name TEXT, No NUMBER, Price NUMBER); CREATE TABLE appellations (State TEXT, County TEXT, Appelation TEXT, Area TEXT);"
      }
    ],
    [
      {
        "question": "Show me all the wine names made in the year 2006.",
        "query": "SELECT name FROM wine WHERE YEAR = 2006",
        "schema": "CREATE TABLE appellations (Appelation TEXT); CREATE TABLE wine (Year NUMBER, Name TEXT, Appelation TEXT);"
      },
      {
        "question": "Show me their prices.",
        "query": "SELECT price FROM wine WHERE YEAR = 2006",
        "schema": "CREATE TABLE wine (Name TEXT, Winery TEXT, Year NUMBER, Price NUMBER, Appelation TEXT); CREATE TABLE appellations (Appelation TEXT);"
      },
      {
        "question": "What is the maximum of these prices?",
        "query": "SELECT MAX ( price ) FROM wine WHERE YEAR = 2006",
        "schema": "CREATE TABLE appellations (Appelation TEXT); CREATE TABLE wine (Year NUMBER, Winery TEXT, Appelation TEXT, Name TEXT, Price NUMBER);"
      },
      {
        "question": "Show me all the wine names that have a price higher than 200.",
        "query": "SELECT name FROM wine WHERE price>200",
        "schema": "CREATE TABLE wine (Name TEXT, Price NUMBER, Year NUMBER, Appelation TEXT, Winery TEXT); CREATE TABLE appellations (Appelation TEXT);"
      }
    ],
    [
      {
        "question": "Show the color of Barbera Grape?",
        "query": "SELECT color FROM grapes WHERE grape = \"Barbera\"",
        "schema": "CREATE TABLE wine (Name TEXT, Winery TEXT, Grape TEXT); CREATE TABLE grapes (Color TEXT, ID NUMBER, Grape TEXT); CREATE TABLE appellations (Appelation TEXT);"
      },
      {
        "question": "Show the grape which scores higher than 90?",
        "query": "SELECT DISTINCT grape FROM wine WHERE score > 90",
        "schema": "CREATE TABLE wine (Grape TEXT, Winery TEXT, Score NUMBER, Name TEXT); CREATE TABLE grapes (Grape TEXT, ID NUMBER, Color TEXT); CREATE TABLE appellations (Appelation TEXT);"
      },
      {
        "question": "Show the grape whose white color grapes are used to produce wines?",
        "query": "SELECT DISTINCT t1.grape FROM grapes AS t1 JOIN wine AS t2 ON t1.grape = t2.grape WHERE t1.color = \"White\"",
        "schema": "CREATE TABLE grapes (ID NUMBER, Grape TEXT, Color TEXT); CREATE TABLE appellations (Appelation TEXT); CREATE TABLE wine (Grape TEXT, Score NUMBER, Winery TEXT, Name TEXT);"
      }
    ],
    [
      {
        "question": "Which wines are made of Red color grapes? | Here are the wine names for wine made of Red color grapes. | Out of them which have prices higher than 50?",
        "query": "SELECT t2.name FROM grapes AS t1 JOIN wine AS t2 ON t1.grape = t2.grape WHERE t1.color = \"Red\" AND t2.price > 50",
        "schema": "CREATE TABLE grapes (Color TEXT, Grape TEXT, ID NUMBER); CREATE TABLE wine (Grape TEXT, Winery TEXT, Name TEXT, Price NUMBER);"
      },
      {
        "question": "And where are they located?",
        "query": "SELECT t2.state FROM grapes AS t1 JOIN wine AS t2 ON t1.grape = t2.grape WHERE t1.color = \"Red\" AND t2.price > 50",
        "schema": "CREATE TABLE grapes (ID NUMBER, Grape TEXT, Color TEXT); CREATE TABLE wine (State TEXT, Appelation TEXT, Grape TEXT, Winery TEXT, Name TEXT, Price NUMBER); CREATE TABLE appellations (County TEXT, Appelation TEXT);"
      }
    ],
    [
      {
        "question": "Which wine uses Cabernet Franc grapes",
        "query": "SELECT t2.name FROM grapes AS t1 JOIN wine AS t2 ON t1.grape = t2.grape WHERE t1.grape = \"Cabernet Franc\"",
        "schema": "CREATE TABLE wine (Winery TEXT, Grape TEXT, Appelation TEXT, Name TEXT); CREATE TABLE grapes (Grape TEXT, ID NUMBER); CREATE TABLE appellations (Appelation TEXT);"
      },
      {
        "question": "What are the wines that have prices higher than 50?",
        "query": "SELECT * FROM grapes AS t1 JOIN wine AS t2 ON t1.grape = t2.grape WHERE t2.price > 50",
        "schema": "CREATE TABLE appellations (Appelation TEXT); CREATE TABLE wine (Name TEXT, Grape TEXT, Price NUMBER, Appelation TEXT, Winery TEXT); CREATE TABLE grapes (Grape TEXT, ID NUMBER);"
      },
      {
        "question": "What grapes are red color?",
        "query": "SELECT grape FROM grapes WHERE color = \"Red\"",
        "schema": "CREATE TABLE appellations (Appelation TEXT); CREATE TABLE wine (Appelation TEXT, Grape TEXT, Price NUMBER, Winery TEXT, Name TEXT); CREATE TABLE grapes (ID NUMBER, Grape TEXT, Color TEXT);"
      },
      {
        "question": "Among the wines that have prices higher than 50, which ones use red color grapes?",
        "query": "SELECT t2.name FROM grapes AS t1 JOIN wine AS t2 ON t1.grape = t2.grape WHERE t1.color = \"Red\" AND t2.price > 50",
        "schema": "CREATE TABLE appellations (Appelation TEXT); CREATE TABLE grapes (Color TEXT, ID NUMBER, Grape TEXT); CREATE TABLE wine (Grape TEXT, Price NUMBER, Winery TEXT, Appelation TEXT, Name TEXT);"
      }
    ],
    [
      {
        "question": "give me the name of the wineries",
        "query": "SELECT winery FROM wine",
        "schema": "CREATE TABLE wine (Appelation TEXT, Winery TEXT, Name TEXT); CREATE TABLE appellations (Appelation TEXT);"
      },
      {
        "question": "how many wineries have at least 4 wines?",
        "query": "SELECT COUNT ( * ) FROM ( SELECT winery FROM wine GROUP BY winery HAVING COUNT ( * ) > = 4 )",
        "schema": "CREATE TABLE wine (Winery TEXT, Name TEXT, Appelation TEXT); CREATE TABLE appellations (Appelation TEXT);"
      },
      {
        "question": "can you tell me the names of those wineries?",
        "query": "SELECT winery FROM wine GROUP BY winery HAVING COUNT ( * ) > = 4",
        "schema": "CREATE TABLE wine (Name TEXT, Winery TEXT, Appelation TEXT); CREATE TABLE appellations (Appelation TEXT);"
      }
    ],
    [
      {
        "question": "What is the name of the grape whose wine products had the highest average price?",
        "query": "SELECT t1.grape FROM grapes AS t1 JOIN wine AS t2 ON t1.grape = t2.grape GROUP BY t2.grape ORDER BY AVG ( price ) DESC LIMIT 1",
        "schema": "CREATE TABLE grapes (ID NUMBER, Grape TEXT); CREATE TABLE appellations (Appelation TEXT); CREATE TABLE wine (Grape TEXT, Appelation TEXT, Name TEXT, Price NUMBER);"
      },
      {
        "question": "What is the color of that grape?",
        "query": "SELECT t1.color FROM grapes AS t1 JOIN wine AS t2 ON t1.grape = t2.grape GROUP BY t2.grape ORDER BY AVG ( price ) DESC LIMIT 1",
        "schema": "CREATE TABLE appellations (Appelation TEXT); CREATE TABLE wine (Name TEXT, Price NUMBER, Appelation TEXT, Grape TEXT); CREATE TABLE grapes (Color TEXT, Grape TEXT, ID NUMBER);"
      },
      {
        "question": "What is the color of the grape whose wine products had the lowest average price?",
        "query": "SELECT t1.color FROM grapes AS t1 JOIN wine AS t2 ON t1.grape = t2.grape GROUP BY t2.grape ORDER BY AVG ( price ) LIMIT 1",
        "schema": "CREATE TABLE wine (Grape TEXT, Name TEXT, Appelation TEXT, Price NUMBER); CREATE TABLE grapes (Color TEXT, ID NUMBER, Grape TEXT); CREATE TABLE appellations (Appelation TEXT);"
      }
    ],
    [
      {
        "question": "List the grape of the wines whose score is higher than 93 ordered by Name.",
        "query": "SELECT grape , appelation , name FROM wine WHERE score > 93 ORDER BY name",
        "schema": "CREATE TABLE appellations (Appelation TEXT); CREATE TABLE wine (Name TEXT, Appelation TEXT, Score NUMBER, Grape TEXT); CREATE TABLE grapes (Grape TEXT, ID NUMBER);"
      },
      {
        "question": "Show me the winery they are from",
        "query": "SELECT DISTINCT appelation FROM wine WHERE score > 93",
        "schema": "CREATE TABLE appellations (Appelation TEXT); CREATE TABLE grapes (Grape TEXT, ID NUMBER); CREATE TABLE wine (Appelation TEXT, Score NUMBER, Winery TEXT, Grape TEXT, Name TEXT);"
      },
      {
        "question": "Which states are they from?",
        "query": "SELECT DISTINCT state FROM wine WHERE score > 93",
        "schema": "CREATE TABLE wine (Score NUMBER, Appelation TEXT, State TEXT, Grape TEXT, Winery TEXT, Name TEXT); CREATE TABLE appellations (State TEXT, Appelation TEXT, County TEXT); CREATE TABLE grapes (Grape TEXT, ID NUMBER);"
      }
    ]
  ],
  "roller_coaster": [
    [
      {
        "question": "How many length of park Kemah Boardwalk? | Did you mean to ask for the length of the park with name Kemah Boardwalk? | Yes",
        "query": "SELECT LENGTH FROM roller_coaster WHERE park = \"Kemah Boardwalk\"",
        "schema": "CREATE TABLE roller_coaster (Length NUMBER, Park TEXT);"
      },
      {
        "question": "Find the status of Happy Valley.",
        "query": "SELECT status FROM roller_coaster WHERE park = \"Happy Valley\"",
        "schema": "CREATE TABLE roller_coaster (Name TEXT, Park TEXT, Status TEXT, Length NUMBER);"
      },
      {
        "question": "What are the country id of Hades 360?",
        "query": "SELECT country_id FROM roller_coaster WHERE name = \"Hades 360\"",
        "schema": "CREATE TABLE roller_coaster (Park TEXT, Country_ID NUMBER, Roller_Coaster_ID NUMBER, Name TEXT, Status TEXT, Length NUMBER); CREATE TABLE country (Languages TEXT, Country_ID NUMBER, Name TEXT);"
      },
      {
        "question": "What are the speeds of the longest roller coaster?",
        "query": "SELECT speed FROM roller_coaster ORDER BY LENGTH DESC LIMIT 1",
        "schema": "CREATE TABLE roller_coaster (Country_ID NUMBER, Name TEXT, Roller_Coaster_ID NUMBER, Status TEXT, Speed TEXT, Park TEXT, Length NUMBER); CREATE TABLE country (Country_ID NUMBER, Languages TEXT, Name TEXT);"
      }
    ],
    [
      {
        "question": "How many countries have roller coaster?",
        "query": "SELECT COUNT ( DISTINCT t1.name ) FROM country AS t1 JOIN roller_coaster AS t2 ON t1.country_id = t2.country_id",
        "schema": "CREATE TABLE country (Name TEXT, Country_ID NUMBER); CREATE TABLE roller_coaster (Roller_Coaster_ID NUMBER, Name TEXT, Country_ID NUMBER);"
      },
      {
        "question": "How many countries have more than one roller coaster?",
        "query": "SELECT COUNT ( * ) FROM ( SELECT t1.name FROM country AS t1 JOIN roller_coaster AS t2 ON t1.country_id = t2.country_id GROUP BY t1.name HAVING COUNT ( * ) > 1 )",
        "schema": "CREATE TABLE roller_coaster (Name TEXT, Roller_Coaster_ID NUMBER, Country_ID NUMBER); CREATE TABLE country (Name TEXT, Country_ID NUMBER);"
      },
      {
        "question": "Show the names of the countries that have more than one roller coaster.",
        "query": "SELECT t1.name FROM country AS t1 JOIN roller_coaster AS t2 ON t1.country_id = t2.country_id GROUP BY t1.name HAVING COUNT ( * ) > 1",
        "schema": "CREATE TABLE roller_coaster (Roller_Coaster_ID NUMBER, Country_ID NUMBER, Name TEXT); CREATE TABLE country (Country_ID NUMBER, Name TEXT);"
      },
      {
        "question": "Show the number of roller coasters of Australia and Finland.",
        "query": "SELECT t1.name,COUNT ( * ) FROM country AS t1 JOIN roller_coaster AS t2 ON t1.country_id = t2.country_id GROUP BY t1.name HAVING COUNT ( * ) > 1",
        "schema": "CREATE TABLE country (Country_ID NUMBER, Name TEXT); CREATE TABLE roller_coaster (Roller_Coaster_ID NUMBER, Country_ID NUMBER, Name TEXT);"
      },
      {
        "question": "Show the names of roller coasters of Australia and Finland in separate table",
        "query": "SELECT t2.name FROM country AS t1 JOIN roller_coaster AS t2 ON t1.country_id = t2.country_id WHERE t1.name = 'Austria' OR t1.name = 'Finland'",
        "schema": "CREATE TABLE roller_coaster (Name TEXT, Roller_Coaster_ID NUMBER, Country_ID NUMBER); CREATE TABLE country (Country_ID NUMBER, Languages TEXT, Name TEXT);"
      }
    ],
    [
      {
        "question": "how many  country there",
        "query": "SELECT COUNT ( * ) FROM country",
        "schema": "CREATE TABLE roller_coaster (Country_ID NUMBER); CREATE TABLE country (Area NUMBER, Name TEXT, Country_ID NUMBER, Languages TEXT, Population NUMBER);"
      },
      {
        "question": "what is the languages of Finland",
        "query": "SELECT languages FROM country WHERE name = \"Finland\"",
        "schema": "CREATE TABLE country (Area NUMBER, Languages TEXT, Country_ID NUMBER, Population NUMBER, Name TEXT); CREATE TABLE roller_coaster (Country_ID NUMBER);"
      },
      {
        "question": "what is the speed of Dauling Dragon",
        "query": "SELECT speed FROM roller_coaster WHERE name = \"Dauling Dragon\"",
        "schema": "CREATE TABLE country (Population NUMBER, Country_ID NUMBER, Area NUMBER, Languages TEXT, Name TEXT); CREATE TABLE roller_coaster (Speed TEXT, Country_ID NUMBER, Name TEXT);"
      }
    ],
    [
      {
        "question": "What is the  height of the highest roller coaster?",
        "query": "SELECT MAX ( height ) FROM roller_coaster",
        "schema": "CREATE TABLE roller_coaster (Name TEXT, Length NUMBER, Roller_Coaster_ID NUMBER, Height NUMBER);"
      },
      {
        "question": "Which park is this roller coaster located at?",
        "query": "SELECT park FROM roller_coaster WHERE height = ( SELECT MAX ( height ) FROM roller_coaster )",
        "schema": "CREATE TABLE roller_coaster (Name TEXT, Height NUMBER, Length NUMBER, Roller_Coaster_ID NUMBER, Park TEXT);"
      },
      {
        "question": "What is the name of the country that has the highest roller coaster?",
        "query": "SELECT t2.name FROM roller_coaster AS t1 JOIN country AS t2 ON t1.country_id = t2.country_id WHERE t1.height = ( SELECT MAX ( height ) FROM roller_coaster )",
        "schema": "CREATE TABLE roller_coaster (Country_ID NUMBER, Park TEXT, Roller_Coaster_ID NUMBER, Height NUMBER, Length NUMBER, Name TEXT); CREATE TABLE country (Languages TEXT, Country_ID NUMBER, Name TEXT);"
      },
      {
        "question": "Hmm, I also want to know the population of this country.",
        "query": "SELECT t2.name, t2.population FROM roller_coaster AS t1 JOIN country AS t2 ON t1.country_id = t2.country_id WHERE t1.height = ( SELECT MAX ( height ) FROM roller_coaster )",
        "schema": "CREATE TABLE roller_coaster (Length NUMBER, Name TEXT, Height NUMBER, Roller_Coaster_ID NUMBER, Park TEXT, Country_ID NUMBER); CREATE TABLE country (Languages TEXT, Country_ID NUMBER, Name TEXT, Population NUMBER);"
      }
    ],
    [
      {
        "question": "Which roller coasters are longer than 3300?",
        "query": "SELECT roller_coaster_id FROM roller_coaster WHERE LENGTH > 3300",
        "schema": "CREATE TABLE roller_coaster (Length NUMBER, Height NUMBER, Speed TEXT, Roller_Coaster_ID NUMBER, Name TEXT);"
      },
      {
        "question": "Which of them are higher than 100? | Do you mean among all roller costers or among the those longer than 3300? | Among those longer than 3300",
        "query": "SELECT roller_coaster_id FROM roller_coaster WHERE LENGTH > 3300 AND height > 100",
        "schema": "CREATE TABLE roller_coaster (Length NUMBER, Speed TEXT, Roller_Coaster_ID NUMBER, Name TEXT, Height NUMBER);"
      },
      {
        "question": "And what are their status?",
        "query": "SELECT roller_coaster_id , status FROM roller_coaster WHERE LENGTH > 3300 AND height > 100",
        "schema": "CREATE TABLE roller_coaster (Length NUMBER, Name TEXT, Height NUMBER, Speed TEXT, Status TEXT, Roller_Coaster_ID NUMBER);"
      },
      {
        "question": "Yes, what is their speed?",
        "query": "SELECT roller_coaster_id , status, speed FROM roller_coaster WHERE LENGTH > 3300 AND height > 100",
        "schema": "CREATE TABLE roller_coaster (Speed TEXT, Length NUMBER, Height NUMBER, Status TEXT, Roller_Coaster_ID NUMBER, Name TEXT);"
      }
    ],
    [
      {
        "question": "HOW MANY COUNTRIES DO NOT HAVE AN ROLLER COASTER LONGER THAN 3000?",
        "query": "SELECT COUNT ( * ) FROM country WHERE country_id NOT IN ( SELECT country_id FROM roller_coaster WHERE LENGTH > 3000 )",
        "schema": "CREATE TABLE roller_coaster (Height NUMBER, Country_ID NUMBER, Length NUMBER); CREATE TABLE country (Country_ID NUMBER, Name TEXT);"
      },
      {
        "question": "WHICH COUNTRY HAVE A ROLLER COASTER LONGER THAN 5000",
        "query": "SELECT t2.name FROM roller_coaster AS t1 JOIN country AS t2 ON t1.country_id = t2.country_id WHERE t1.length > 5000",
        "schema": "CREATE TABLE country (Country_ID NUMBER, Name TEXT); CREATE TABLE roller_coaster (Height NUMBER, Length NUMBER, Country_ID NUMBER);"
      },
      {
        "question": "WHAT IS THE HIGHEST LENGTH OF ROLL COASTER",
        "query": "SELECT MAX ( LENGTH ) FROM roller_coaster",
        "schema": "CREATE TABLE country (Country_ID NUMBER, Name TEXT); CREATE TABLE roller_coaster (Height NUMBER, Name TEXT, Length NUMBER, Country_ID NUMBER);"
      },
      {
        "question": "WHICH PARK HAS HIGHEST SPEED OF ROLL COASTER",
        "query": "SELECT park FROM roller_coaster ORDER BY speed DESC LIMIT 1",
        "schema": "CREATE TABLE country (Country_ID NUMBER, Name TEXT); CREATE TABLE roller_coaster (Country_ID NUMBER, Roller_Coaster_ID NUMBER, Height NUMBER, Length NUMBER, Speed TEXT, Park TEXT, Name TEXT);"
      }
    ],
    [
      {
        "question": "Hi I was wondering if you could tell me what the fastest roller coaster is?",
        "query": "SELECT name FROM roller_coaster ORDER BY speed DESC LIMIT 1",
        "schema": "CREATE TABLE roller_coaster (Name TEXT, Speed TEXT, Length NUMBER, Roller_Coaster_ID NUMBER);"
      },
      {
        "question": "cool can you tell me what that roller coaster's height is too?",
        "query": "SELECT height FROM roller_coaster ORDER BY speed DESC LIMIT 1",
        "schema": "CREATE TABLE roller_coaster (Height NUMBER, Length NUMBER, Roller_Coaster_ID NUMBER, Name TEXT, Speed TEXT);"
      },
      {
        "question": "great - do you know what its status is?",
        "query": "SELECT status FROM roller_coaster ORDER BY speed DESC LIMIT 1",
        "schema": "CREATE TABLE roller_coaster (Name TEXT, Speed TEXT, Length NUMBER, Height NUMBER, Roller_Coaster_ID NUMBER, Status TEXT);"
      },
      {
        "question": "can you tell me the status that is shared by more than two roller coasters?",
        "query": "SELECT status FROM roller_coaster GROUP BY status HAVING COUNT ( * ) > 2",
        "schema": "CREATE TABLE roller_coaster (Length NUMBER, Speed TEXT, Roller_Coaster_ID NUMBER, Status TEXT, Name TEXT, Height NUMBER);"
      }
    ],
    [
      {
        "question": "Hi! How are you?  Can you show me a list of all of the country names?",
        "query": "SELECT name FROM country",
        "schema": "CREATE TABLE roller_coaster (Country_ID NUMBER); CREATE TABLE country (Country_ID NUMBER, Languages TEXT, Name TEXT);"
      },
      {
        "question": "Great!  Can you update this list to include the average roller coaster speed for each of these three countries?",
        "query": "SELECT t1.name , AVG ( t2.speed ) FROM country AS t1 JOIN roller_coaster AS t2 ON t1.country_id = t2.country_id GROUP BY t1.name",
        "schema": "CREATE TABLE roller_coaster (Speed TEXT, Name TEXT, Country_ID NUMBER); CREATE TABLE country (Languages TEXT, Name TEXT, Country_ID NUMBER);"
      },
      {
        "question": "Thank you for that!  Would you be able to show me the roller coaster names associated with just Sweden?",
        "query": "SELECT t2.name FROM country AS t1 JOIN roller_coaster AS t2 ON t1.country_id = t2.country_id WHERE t1.name = 'Sweden'",
        "schema": "CREATE TABLE country (Name TEXT, Country_ID NUMBER, Languages TEXT); CREATE TABLE roller_coaster (Roller_Coaster_ID NUMBER, Name TEXT, Country_ID NUMBER, Speed TEXT);"
      }
    ],
    [
      {
        "question": "How fast are roller coasters in Austria?",
        "query": "SELECT t2.speed FROM country AS t1 JOIN roller_coaster AS t2 ON t1.country_id = t2.country_id WHERE t1.name = \"Austria\"",
        "schema": "CREATE TABLE country (Languages TEXT, Name TEXT, Country_ID NUMBER); CREATE TABLE roller_coaster (Length NUMBER, Roller_Coaster_ID NUMBER, Country_ID NUMBER, Speed TEXT, Name TEXT);"
      },
      {
        "question": "When did the fastest roller coaster in Austria open?",
        "query": "SELECT t2.opened FROM country AS t1 JOIN roller_coaster AS t2 ON t1.country_id = t2.country_id WHERE t1.name = \"Austria\" ORDER BY t2.speed DESC LIMIT 1",
        "schema": "CREATE TABLE roller_coaster (Roller_Coaster_ID NUMBER, Country_ID NUMBER, Opened TEXT, Name TEXT, Length NUMBER, Speed TEXT); CREATE TABLE country (Country_ID NUMBER, Languages TEXT, Name TEXT);"
      },
      {
        "question": "What is the name of the fastest roller coaster in Austria?",
        "query": "SELECT t2.name FROM country AS t1 JOIN roller_coaster AS t2 ON t1.country_id = t2.country_id WHERE t1.name = \"Austria\" ORDER BY t2.speed DESC LIMIT 1",
        "schema": "CREATE TABLE roller_coaster (Length NUMBER, Country_ID NUMBER, Name TEXT, Opened TEXT, Speed TEXT, Roller_Coaster_ID NUMBER); CREATE TABLE country (Country_ID NUMBER, Name TEXT, Languages TEXT);"
      },
      {
        "question": "What park in Austria has the fastest roller coaster?",
        "query": "SELECT t2.park FROM country AS t1 JOIN roller_coaster AS t2 ON t1.country_id = t2.country_id WHERE t1.name = \"Austria\" ORDER BY t2.speed DESC LIMIT 1",
        "schema": "CREATE TABLE country (Name TEXT, Languages TEXT, Country_ID NUMBER); CREATE TABLE roller_coaster (Roller_Coaster_ID NUMBER, Opened TEXT, Country_ID NUMBER, Name TEXT, Park TEXT, Length NUMBER, Speed TEXT);"
      },
      {
        "question": "What is the height of the fastest roller coaster in Austria?",
        "query": "SELECT t2.height FROM country AS t1 JOIN roller_coaster AS t2 ON t1.country_id = t2.country_id WHERE t1.name = \"Austria\" ORDER BY t2.speed DESC LIMIT 1",
        "schema": "CREATE TABLE country (Languages TEXT, Country_ID NUMBER, Name TEXT); CREATE TABLE roller_coaster (Name TEXT, Height NUMBER, Speed TEXT, Country_ID NUMBER, Roller_Coaster_ID NUMBER, Park TEXT, Opened TEXT, Length NUMBER);"
      },
      {
        "question": "What is the length of the fastest roller coaster in Austria?",
        "query": "SELECT t2.length FROM country AS t1 JOIN roller_coaster AS t2 ON t1.country_id = t2.country_id WHERE t1.name = \"Austria\" ORDER BY t2.speed DESC LIMIT 1",
        "schema": "CREATE TABLE roller_coaster (Roller_Coaster_ID NUMBER, Length NUMBER, Country_ID NUMBER, Speed TEXT, Name TEXT, Park TEXT, Opened TEXT, Height NUMBER); CREATE TABLE country (Languages TEXT, Country_ID NUMBER, Name TEXT);"
      }
    ],
    [
      {
        "question": "what is the highest length of coaster",
        "query": "SELECT MAX ( LENGTH ) FROM roller_coaster",
        "schema": "CREATE TABLE roller_coaster (Length NUMBER, Roller_Coaster_ID NUMBER, Height NUMBER, Name TEXT);"
      },
      {
        "question": "which roller coaster are top speed",
        "query": "SELECT * FROM roller_coaster ORDER BY speed DESC LIMIT 1",
        "schema": "CREATE TABLE roller_coaster (Roller_Coaster_ID NUMBER, Length NUMBER, Height NUMBER, Speed TEXT, Name TEXT);"
      },
      {
        "question": "what is the height of Boardwalk Bullet",
        "query": "SELECT height FROM roller_coaster WHERE name = 'Boardwalk Bullet'",
        "schema": "CREATE TABLE roller_coaster (Height NUMBER, Speed TEXT, Name TEXT, Length NUMBER, Roller_Coaster_ID NUMBER);"
      }
    ],
    [
      {
        "question": "what is the country name? | what  did  you  want  to  konw  the country name ?give  more  info about this  question | what are the country names which has both roller coasters with speed higher than 60 and roller coasters with speed lower than 55?",
        "query": "SELECT t1.name FROM country AS t1 JOIN roller_coaster AS t2 ON t1.country_id = t2.country_id WHERE t2.speed > 60 INTERSECT SELECT t1.name FROM country AS t1 JOIN roller_coaster AS t2 ON t1.country_id = t2.country_id WHERE t2.speed < 55",
        "schema": "CREATE TABLE roller_coaster (Speed TEXT, Name TEXT, Country_ID NUMBER, Height NUMBER); CREATE TABLE country (Name TEXT, Country_ID NUMBER);"
      },
      {
        "question": "what are the country id ? | Did  you  mean country id which has both roller coasters with speed higher than 60 and roller coasters with speed lower than 55? | Yes!",
        "query": "SELECT t1.country_id FROM country AS t1 JOIN roller_coaster AS t2 ON t1.country_id = t2.country_id WHERE t2.speed > 60 INTERSECT SELECT t1.country_id FROM country AS t1 JOIN roller_coaster AS t2 ON t1.country_id = t2.country_id WHERE t2.speed < 55",
        "schema": "CREATE TABLE roller_coaster (Speed TEXT, Country_ID NUMBER, Name TEXT, Height NUMBER, Roller_Coaster_ID NUMBER); CREATE TABLE country (Name TEXT, Country_ID NUMBER);"
      }
    ]
  ],
  "gas_company": [
    [
      {
        "question": "Please show me the headquarters with at least two companies in the banking industry?",
        "query": "SELECT headquarters FROM company WHERE main_industry = 'Banking' GROUP BY headquarters HAVING COUNT ( * ) > = 2",
        "schema": "CREATE TABLE company (Headquarters TEXT, Company TEXT, Main_Industry TEXT, Company_ID NUMBER);"
      },
      {
        "question": "What companies are in the banking industry?",
        "query": "SELECT company FROM company WHERE main_industry = \"Banking\"",
        "schema": "CREATE TABLE company (Headquarters TEXT, Company TEXT, Main_Industry TEXT, Company_ID NUMBER);"
      },
      {
        "question": "Where are those companies' headquarters located?",
        "query": "SELECT company,headquarters FROM company WHERE main_industry = \"Banking\"",
        "schema": "CREATE TABLE company (Company TEXT, Company_ID NUMBER, Headquarters TEXT, Main_Industry TEXT);"
      }
    ],
    [
      {
        "question": "Hi can you show me all the headquarters of a company in backing industry? | Do you mean banking, not backing? | Sorry, yes banking!",
        "query": "SELECT headquarters FROM company WHERE main_industry = 'Banking'",
        "schema": "CREATE TABLE company (Main_Industry TEXT, Headquarters TEXT, Company_ID NUMBER, Company TEXT);"
      },
      {
        "question": "Thank you! Can you now tell me the all the headquarters of a company in Oil and gas?",
        "query": "SELECT headquarters FROM company WHERE main_industry = 'Oil and gas'",
        "schema": "CREATE TABLE company (Main_Industry TEXT, Company TEXT, Headquarters TEXT, Company_ID NUMBER);"
      },
      {
        "question": "Great, what about all the headquarters with both a company in oil and gas and a company in banking?",
        "query": "SELECT headquarters FROM company WHERE main_industry = 'Banking' INTERSECT SELECT headquarters FROM company WHERE main_industry = 'Oil and gas'",
        "schema": "CREATE TABLE company (Company TEXT, Company_ID NUMBER, Headquarters TEXT, Main_Industry TEXT);"
      }
    ],
    [
      {
        "question": "Show all locations and the number of gas stations in each location ordered by the count, please?",
        "query": "SELECT LOCATION , COUNT ( * ) FROM gas_station GROUP BY LOCATION ORDER BY COUNT ( * )",
        "schema": "CREATE TABLE gas_station (Station_ID NUMBER, Location TEXT);"
      },
      {
        "question": "What is the name of the location that has more than one gas station?",
        "query": "SELECT LOCATION FROM gas_station GROUP BY LOCATION HAVING COUNT ( * ) > 1",
        "schema": "CREATE TABLE gas_station (Representative_Name TEXT, Location TEXT, Station_ID NUMBER);"
      },
      {
        "question": "What year was more than one gas station opened in?",
        "query": "SELECT open_year FROM gas_station GROUP BY open_year HAVING COUNT ( * ) > 1",
        "schema": "CREATE TABLE gas_station (Open_Year NUMBER, Station_ID NUMBER, Location TEXT, Representative_Name TEXT);"
      }
    ],
    [
      {
        "question": "what is the average of market value?",
        "query": "SELECT AVG ( market_value ) FROM company",
        "schema": "CREATE TABLE company (Market_Value NUMBER);"
      },
      {
        "question": "what is the average of assets billion?",
        "query": "SELECT AVG ( assets_billion ) FROM company",
        "schema": "CREATE TABLE company (Company TEXT, Market_Value NUMBER, Company_ID NUMBER, Assets_billion NUMBER);"
      },
      {
        "question": "what is companies headquarters?",
        "query": "SELECT headquarters FROM company",
        "schema": "CREATE TABLE station_company (Company_ID NUMBER); CREATE TABLE company (Company TEXT, Market_Value NUMBER, Assets_billion NUMBER, Company_ID NUMBER, Headquarters TEXT);"
      },
      {
        "question": "show all headquarters without a company in banking industry.",
        "query": "SELECT headquarters FROM company EXCEPT SELECT headquarters FROM company WHERE main_industry = 'Banking'",
        "schema": "CREATE TABLE station_company (Company_ID NUMBER); CREATE TABLE company (Headquarters TEXT, Assets_billion NUMBER, Company_ID NUMBER, Market_Value NUMBER, Main_Industry TEXT, Company TEXT);"
      }
    ],
    [
      {
        "question": "What is the average market value",
        "query": "SELECT AVG ( market_value ) FROM company",
        "schema": "CREATE TABLE company (Market_Value NUMBER);"
      },
      {
        "question": "Which location is most profitable? | What do you mean by location? We have different companies in different countries. | Which company is the most profitable?",
        "query": "SELECT company FROM company ORDER BY assets_billion DESC LIMIT 1",
        "schema": "CREATE TABLE company (Headquarters TEXT, Profits_billion NUMBER, Company_ID NUMBER, Market_Value NUMBER, Assets_billion NUMBER, Sales_billion NUMBER, Company TEXT); CREATE TABLE station_company (Company_ID NUMBER); CREATE TABLE gas_station (Location TEXT);"
      },
      {
        "question": "What is the average sales of the companies ranked 1, 2 and 3?",
        "query": "SELECT AVG ( sales_billion ) FROM company WHERE rank = 1 OR rank = 2 OR rank = 3",
        "schema": "CREATE TABLE company (Assets_billion NUMBER, Rank NUMBER, Company TEXT, Market_Value NUMBER, Company_ID NUMBER, Sales_billion NUMBER, Headquarters TEXT, Profits_billion NUMBER); CREATE TABLE station_company (Company_ID NUMBER); CREATE TABLE gas_station (Location TEXT);"
      }
    ],
    [
      {
        "question": "What is the profits billion of Company ExonMobil?",
        "query": "SELECT profits_billion FROM company WHERE company = \"ExxonMobil\"",
        "schema": "CREATE TABLE gas_station (Station_ID NUMBER); CREATE TABLE company (Sales_billion NUMBER, Company_ID NUMBER, Headquarters TEXT, Company TEXT, Assets_billion NUMBER, Profits_billion NUMBER); CREATE TABLE station_company (Company_ID NUMBER, Station_ID NUMBER);"
      },
      {
        "question": "What is the name of the company which has market value 213.7?",
        "query": "SELECT company FROM company WHERE market_value = 213.7",
        "schema": "CREATE TABLE gas_station (Station_ID NUMBER); CREATE TABLE station_company (Company_ID NUMBER, Station_ID NUMBER); CREATE TABLE company (Company TEXT, Assets_billion NUMBER, Company_ID NUMBER, Headquarters TEXT, Market_Value NUMBER, Profits_billion NUMBER, Sales_billion NUMBER);"
      },
      {
        "question": "Where is the headquarters  of the company general electric?",
        "query": "SELECT headquarters FROM company WHERE company = \"General Electric\"",
        "schema": "CREATE TABLE company (Headquarters TEXT, Company TEXT, Profits_billion NUMBER, Company_ID NUMBER, Market_Value NUMBER, Assets_billion NUMBER, Sales_billion NUMBER); CREATE TABLE station_company (Station_ID NUMBER, Company_ID NUMBER); CREATE TABLE gas_station (Station_ID NUMBER, Location TEXT);"
      }
    ],
    [
      {
        "question": "Show the name of the company with company id 1?",
        "query": "SELECT company FROM company WHERE company_id = '1'",
        "schema": "CREATE TABLE company (Company TEXT, Company_ID NUMBER); CREATE TABLE gas_station (Manager_Name TEXT, Station_ID NUMBER); CREATE TABLE station_company (Company_ID NUMBER, Station_ID NUMBER);"
      },
      {
        "question": "Show all company name and main industry with gas station?",
        "query": "SELECT company , main_industry FROM company WHERE company_id IN ( SELECT company_id FROM station_company )",
        "schema": "CREATE TABLE gas_station (Manager_Name TEXT, Station_ID NUMBER); CREATE TABLE company (Company TEXT, Company_ID NUMBER, Main_Industry TEXT); CREATE TABLE station_company (Station_ID NUMBER, Company_ID NUMBER);"
      },
      {
        "question": "Show all company name and main industry without a gas station?",
        "query": "SELECT company , main_industry FROM company WHERE company_id NOT IN ( SELECT company_id FROM station_company )",
        "schema": "CREATE TABLE company (Main_Industry TEXT, Company TEXT, Company_ID NUMBER); CREATE TABLE station_company (Company_ID NUMBER, Station_ID NUMBER); CREATE TABLE gas_station (Manager_Name TEXT, Station_ID NUMBER);"
      }
    ],
    [
      {
        "question": "find the rank, company names, market values of the companies in the banking industry order by their sales and profits in billion.",
        "query": "SELECT rank , company , market_value FROM company WHERE main_industry = 'Banking' ORDER BY sales_billion , profits_billion",
        "schema": "CREATE TABLE company (Main_Industry TEXT, Profits_billion NUMBER, Company TEXT, Sales_billion NUMBER, Rank NUMBER, Market_Value NUMBER, Company_ID NUMBER);"
      },
      {
        "question": "Which company has the biggest market value in billion?",
        "query": "SELECT company FROM company ORDER BY market_value LIMIT 1",
        "schema": "CREATE TABLE company (Company_ID NUMBER, Company TEXT, Market_Value NUMBER, Profits_billion NUMBER, Main_Industry TEXT, Rank NUMBER, Sales_billion NUMBER);"
      },
      {
        "question": "what is BP's market value?",
        "query": "SELECT market_value FROM company WHERE company = \"BP\"",
        "schema": "CREATE TABLE company (Market_Value NUMBER, Company TEXT, Company_ID NUMBER, Main_Industry TEXT, Profits_billion NUMBER, Sales_billion NUMBER, Rank NUMBER);"
      }
    ],
    [
      {
        "question": "find the location and Representative name of the gas stations owned by the companies with top 3 Asset amounts.",
        "query": "SELECT t3.location , t3.representative_name FROM station_company AS t1 JOIN company AS t2 ON t1.company_id = t2.company_id JOIN gas_station AS t3 ON t1.station_id = t3.station_id ORDER BY t2.assets_billion DESC LIMIT 3",
        "schema": "CREATE TABLE company (Assets_billion NUMBER, Headquarters TEXT, Company TEXT, Company_ID NUMBER); CREATE TABLE station_company (Company_ID NUMBER, Station_ID NUMBER); CREATE TABLE gas_station (Location TEXT, Station_ID NUMBER, Representative_Name TEXT);"
      },
      {
        "question": "What is the representative name of Newport Rd?",
        "query": "SELECT representative_name FROM gas_station WHERE LOCATION = \"Newport Rd\"",
        "schema": "CREATE TABLE gas_station (Representative_Name TEXT, Station_ID NUMBER, Location TEXT); CREATE TABLE company (Assets_billion NUMBER, Headquarters TEXT, Company_ID NUMBER, Company TEXT); CREATE TABLE station_company (Company_ID NUMBER, Station_ID NUMBER);"
      },
      {
        "question": "Find the location and Representative name of the gas stations owned by the companies with top 3 Asset amounts.",
        "query": "SELECT t3.location , t3.representative_name FROM station_company AS t1 JOIN company AS t2 ON t1.company_id = t2.company_id JOIN gas_station AS t3 ON t1.station_id = t3.station_id ORDER BY t2.assets_billion DESC LIMIT 3",
        "schema": "CREATE TABLE station_company (Company_ID NUMBER, Station_ID NUMBER); CREATE TABLE gas_station (Location TEXT, Station_ID NUMBER, Representative_Name TEXT); CREATE TABLE company (Headquarters TEXT, Company TEXT, Company_ID NUMBER, Assets_billion NUMBER);"
      },
      {
        "question": "What gas station is the oldest one based on open year | Which kind of information about this gas station do you want? | Which gas station location is the oldest based on its open year.",
        "query": "SELECT LOCATION FROM gas_station ORDER BY open_year LIMIT 1",
        "schema": "CREATE TABLE company (Headquarters TEXT, Assets_billion NUMBER, Company TEXT, Company_ID NUMBER); CREATE TABLE gas_station (Station_ID NUMBER, Open_Year NUMBER, Location TEXT, Representative_Name TEXT); CREATE TABLE station_company (Station_ID NUMBER, Company_ID NUMBER);"
      }
    ],
    [
      {
        "question": "How many gas stations opened after 2000?",
        "query": "SELECT COUNT ( * ) FROM gas_station WHERE open_year > 2000",
        "schema": "CREATE TABLE gas_station (Station_ID NUMBER, Open_Year NUMBER); CREATE TABLE station_company (Station_ID NUMBER);"
      },
      {
        "question": "What's the name of the manager that opened the most gas stations after 2000?",
        "query": "SELECT manager_name FROM gas_station WHERE open_year > 2000 GROUP BY manager_name ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE station_company (Station_ID NUMBER); CREATE TABLE gas_station (Open_Year NUMBER, Manager_Name TEXT, Station_ID NUMBER);"
      },
      {
        "question": "What are the locations of those?",
        "query": "SELECT LOCATION FROM gas_station WHERE manager_name = ( SELECT manager_name FROM gas_station WHERE open_year > 2000 GROUP BY manager_name ORDER BY COUNT ( * ) DESC LIMIT 1 )",
        "schema": "CREATE TABLE gas_station (Station_ID NUMBER, Location TEXT, Manager_Name TEXT, Open_Year NUMBER); CREATE TABLE station_company (Station_ID NUMBER);"
      },
      {
        "question": "What are the vice manager names of those locations?",
        "query": "SELECT LOCATION, vice_manager_name FROM gas_station WHERE manager_name = ( SELECT manager_name FROM gas_station WHERE open_year > 2000 GROUP BY manager_name ORDER BY COUNT ( * ) DESC LIMIT 1 )",
        "schema": "CREATE TABLE station_company (Station_ID NUMBER); CREATE TABLE gas_station (Manager_Name TEXT, Vice_Manager_Name TEXT, Location TEXT, Station_ID NUMBER, Open_Year NUMBER);"
      },
      {
        "question": "What years did those open?",
        "query": "SELECT LOCATION, open_year FROM gas_station WHERE manager_name = ( SELECT manager_name FROM gas_station WHERE open_year > 2000 GROUP BY manager_name ORDER BY COUNT ( * ) DESC LIMIT 1 )",
        "schema": "CREATE TABLE gas_station (Station_ID NUMBER, Open_Year NUMBER, Vice_Manager_Name TEXT, Location TEXT, Manager_Name TEXT); CREATE TABLE station_company (Station_ID NUMBER);"
      }
    ]
  ],
  "insurance_and_eClaims": [
    [
      {
        "question": "What is the name of the customer who has made the minimum amount of payment in one claim?",
        "query": "SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id = t2.policy_id JOIN customers AS t3 ON t2.customer_id = t3.customer_id WHERE t1.amount_piad = ( SELECT MIN ( amount_piad ) FROM claim_headers )",
        "schema": "CREATE TABLE Customers (Customer_ID NUMBER, Customer_Details TEXT); CREATE TABLE Policies (Policy_ID NUMBER, Customer_ID NUMBER); CREATE TABLE Claim_Headers (Claim_Header_ID NUMBER, Amount_Piad NUMBER, Amount_Claimed NUMBER, Policy_ID NUMBER); CREATE TABLE Claims_Processing (Claim_ID NUMBER);"
      },
      {
        "question": "What is the amount claimed for this customer?",
        "query": "SELECT t1.amount_claimed FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id = t2.policy_id JOIN customers AS t3 ON t2.customer_id = t3.customer_id WHERE t1.amount_piad = ( SELECT MIN ( amount_piad ) FROM claim_headers )",
        "schema": "CREATE TABLE Customers (Customer_Details TEXT, Customer_ID NUMBER); CREATE TABLE Claim_Headers (Policy_ID NUMBER, Amount_Piad NUMBER, Amount_Claimed NUMBER, Claim_Header_ID NUMBER); CREATE TABLE Policies (Policy_ID NUMBER, Customer_ID NUMBER); CREATE TABLE Claims_Processing (Claim_ID NUMBER);"
      },
      {
        "question": "Can you also give me  the name of the customer who has made the maximum amount of payment in one claim?",
        "query": "SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id = t2.policy_id JOIN customers AS t3 ON t2.customer_id = t3.customer_id WHERE t1.amount_piad = ( SELECT MAX ( amount_piad ) FROM claim_headers )",
        "schema": "CREATE TABLE Policies (Customer_ID NUMBER, Policy_ID NUMBER); CREATE TABLE Claim_Headers (Amount_Claimed NUMBER, Amount_Piad NUMBER, Policy_ID NUMBER, Claim_Header_ID NUMBER); CREATE TABLE Claims_Processing (Claim_ID NUMBER); CREATE TABLE Customers (Customer_Details TEXT, Customer_ID NUMBER);"
      },
      {
        "question": "Hmmm. Can you please give me the claimed amount for this customer",
        "query": "SELECT t1.amount_claimed FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id = t2.policy_id JOIN customers AS t3 ON t2.customer_id = t3.customer_id WHERE t1.amount_piad = ( SELECT MAX ( amount_piad ) FROM claim_headers )",
        "schema": "CREATE TABLE Customers (Customer_Details TEXT, Customer_ID NUMBER); CREATE TABLE Claims_Processing (Claim_ID NUMBER); CREATE TABLE Claim_Headers (Policy_ID NUMBER, Amount_Piad NUMBER, Amount_Claimed NUMBER, Claim_Header_ID NUMBER); CREATE TABLE Policies (Customer_ID NUMBER, Policy_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show me all the claims that are documents.",
        "query": "SELECT t1.claim_header_id FROM claim_headers AS t1 JOIN claims_documents AS t2 ON t1.claim_header_id = t2.claim_id WHERE t2.document_type_code = \"Document\"",
        "schema": "CREATE TABLE Policies (Policy_ID NUMBER); CREATE TABLE Claims_Processing_Stages (Claim_Stage_ID NUMBER, Next_Claim_Stage_ID NUMBER, Claim_Status_Name TEXT); CREATE TABLE Claims_Documents (Claim_ID NUMBER, Document_Type_Code TEXT, Created_by_Staff_ID NUMBER); CREATE TABLE Claim_Headers (Claim_Header_ID NUMBER, Claim_Type_Code TEXT); CREATE TABLE Claims_Processing (Claim_Processing_ID NUMBER, Claim_ID NUMBER, Claim_Stage_ID NUMBER); CREATE TABLE Staff (Staff_ID NUMBER);"
      },
      {
        "question": "Which of these claims is most recently created?",
        "query": "SELECT t1.claim_header_id FROM claim_headers AS t1 JOIN claims_documents AS t2 ON t1.claim_header_id = t2.claim_id WHERE t2.document_type_code = \"Document\" ORDER BY created_date LIMIT 1",
        "schema": "CREATE TABLE Claims_Processing_Stages (Claim_Status_Name TEXT, Claim_Stage_ID NUMBER, Next_Claim_Stage_ID NUMBER); CREATE TABLE Policies (Policy_ID NUMBER); CREATE TABLE Claims_Processing (Claim_ID NUMBER, Claim_Processing_ID NUMBER, Claim_Stage_ID NUMBER); CREATE TABLE Claim_Headers (Claim_Type_Code TEXT, Claim_Status_Code TEXT, Date_of_Claim TIME, Claim_Header_ID NUMBER); CREATE TABLE Staff (Staff_ID NUMBER); CREATE TABLE Claims_Documents (Created_by_Staff_ID NUMBER, Claim_ID NUMBER, Document_Type_Code TEXT, Created_Date NUMBER);"
      },
      {
        "question": "What is the amount claimed for this claim?",
        "query": "SELECT t1.amount_claimed FROM claim_headers AS t1 JOIN claims_documents AS t2 ON t1.claim_header_id = t2.claim_id WHERE t2.created_date = ( SELECT created_date FROM claims_documents ORDER BY created_date LIMIT 1 )",
        "schema": "CREATE TABLE Policies (Policy_ID NUMBER); CREATE TABLE Staff (Staff_ID NUMBER); CREATE TABLE Claims_Documents (Document_Type_Code TEXT, Claim_ID NUMBER, Created_by_Staff_ID NUMBER, Created_Date NUMBER); CREATE TABLE Claims_Processing_Stages (Claim_Status_Name TEXT, Next_Claim_Stage_ID NUMBER, Claim_Stage_ID NUMBER); CREATE TABLE Claims_Processing (Claim_ID NUMBER, Claim_Stage_ID NUMBER, Claim_Processing_ID NUMBER); CREATE TABLE Claim_Headers (Claim_Status_Code TEXT, Date_of_Claim TIME, Claim_Type_Code TEXT, Amount_Piad NUMBER, Amount_Claimed NUMBER, Claim_Header_ID NUMBER);"
      },
      {
        "question": "Please give me the sum of these amounts.",
        "query": "SELECT SUM ( t1.amount_claimed ) FROM claim_headers AS t1 JOIN claims_documents AS t2 ON t1.claim_header_id = t2.claim_id WHERE t2.created_date = ( SELECT created_date FROM claims_documents ORDER BY created_date LIMIT 1 )",
        "schema": "CREATE TABLE Claims_Processing_Stages (Next_Claim_Stage_ID NUMBER, Claim_Stage_ID NUMBER, Claim_Status_Name TEXT); CREATE TABLE Claim_Headers (Date_of_Claim TIME, Claim_Header_ID NUMBER, Amount_Piad NUMBER, Amount_Claimed NUMBER, Claim_Type_Code TEXT, Claim_Status_Code TEXT); CREATE TABLE Staff (Staff_ID NUMBER); CREATE TABLE Claims_Processing (Claim_ID NUMBER, Claim_Processing_ID NUMBER, Claim_Stage_ID NUMBER); CREATE TABLE Policies (Policy_ID NUMBER); CREATE TABLE Claims_Documents (Claim_ID NUMBER, Document_Type_Code TEXT, Created_Date NUMBER, Created_by_Staff_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Hi, can I see the list of customers?",
        "query": "SELECT * FROM customers",
        "schema": "CREATE TABLE Policies (Customer_ID NUMBER); CREATE TABLE Customers (Customer_Details TEXT, Customer_ID NUMBER);"
      },
      {
        "question": "What customers have a policy?",
        "query": "SELECT * FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id",
        "schema": "CREATE TABLE Policies (Customer_ID NUMBER, Policy_Type_Code TEXT, Policy_ID NUMBER); CREATE TABLE Customers (Customer_ID NUMBER, Customer_Details TEXT);"
      },
      {
        "question": "What customers don't have a policy?",
        "query": "SELECT * FROM customers EXCEPT SELECT * FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id",
        "schema": "CREATE TABLE Policies (Customer_ID NUMBER, Policy_Type_Code TEXT, Policy_ID NUMBER); CREATE TABLE Customers (Customer_ID NUMBER, Customer_Details TEXT);"
      },
      {
        "question": "When did they get a policy? | Who are they? | When did the policy holders get their policy?",
        "query": "SELECT start_date FROM policies",
        "schema": "CREATE TABLE Customers (Customer_ID NUMBER, Customer_Details TEXT); CREATE TABLE Policies (End_Date TIME, Start_Date TIME, Policy_Type_Code TEXT, Policy_ID NUMBER, Customer_ID NUMBER);"
      }
    ],
    [
      {
        "question": "How many claim stage ids in this table?",
        "query": "SELECT COUNT ( claim_stage_id ) FROM claims_processing_stages",
        "schema": "CREATE TABLE Claims_Documents (Claim_ID NUMBER); CREATE TABLE Policies (Policy_ID NUMBER, Customer_ID NUMBER); CREATE TABLE Claims_Processing (Claim_Processing_ID NUMBER, Claim_ID NUMBER, Claim_Stage_ID NUMBER, Claim_Outcome_Code TEXT); CREATE TABLE Customers (Customer_ID NUMBER); CREATE TABLE Claim_Headers (Claim_Header_ID NUMBER, Policy_ID NUMBER); CREATE TABLE Claims_Processing_Stages (Claim_Stage_ID NUMBER, Claim_Status_Name TEXT, Next_Claim_Stage_ID NUMBER, Claim_Status_Description TEXT);"
      },
      {
        "question": "How many different staff ids in this table?",
        "query": "SELECT COUNT ( DISTINCT staff_id ) FROM claims_processing",
        "schema": "CREATE TABLE Claim_Headers (Claim_Header_ID NUMBER, Policy_ID NUMBER); CREATE TABLE Customers (Customer_ID NUMBER); CREATE TABLE Claims_Processing (Claim_Outcome_Code TEXT, Claim_Processing_ID NUMBER, Claim_ID NUMBER, Claim_Stage_ID NUMBER, Staff_ID NUMBER); CREATE TABLE Claims_Documents (Claim_ID NUMBER, Created_by_Staff_ID NUMBER); CREATE TABLE Policies (Policy_ID NUMBER, Customer_ID NUMBER); CREATE TABLE Staff (Staff_ID NUMBER, Staff_Details TEXT); CREATE TABLE Claims_Processing_Stages (Claim_Status_Name TEXT, Claim_Status_Description TEXT, Next_Claim_Stage_ID NUMBER, Claim_Stage_ID NUMBER);"
      }
    ],
    [
      {
        "question": "how many claim headers on the table",
        "query": "SELECT COUNT ( * ) FROM claim_headers",
        "schema": "CREATE TABLE Claims_Documents (Claim_ID NUMBER); CREATE TABLE Customers (Customer_ID NUMBER); CREATE TABLE Claims_Processing_Stages (Claim_Stage_ID NUMBER, Next_Claim_Stage_ID NUMBER); CREATE TABLE Claim_Headers (Claim_Header_ID NUMBER, Policy_ID NUMBER, Amount_Claimed NUMBER, Claim_Status_Code TEXT, Amount_Piad NUMBER, Claim_Type_Code TEXT); CREATE TABLE Policies (Policy_ID NUMBER); CREATE TABLE Claims_Processing (Claim_ID NUMBER);"
      },
      {
        "question": "what is the highest amount claimed on the claim headers",
        "query": "SELECT MAX ( amount_claimed ) FROM claim_headers",
        "schema": "CREATE TABLE Claim_Headers (Claim_Type_Code TEXT, Amount_Claimed NUMBER, Claim_Header_ID NUMBER, Policy_ID NUMBER, Amount_Piad NUMBER, Claim_Status_Code TEXT); CREATE TABLE Policies (Policy_ID NUMBER); CREATE TABLE Claims_Documents (Claim_ID NUMBER); CREATE TABLE Claims_Processing (Claim_ID NUMBER); CREATE TABLE Customers (Customer_ID NUMBER); CREATE TABLE Claims_Processing_Stages (Next_Claim_Stage_ID NUMBER, Claim_Stage_ID NUMBER);"
      },
      {
        "question": "what is the least paid amount on the table",
        "query": "SELECT MIN ( amount_piad ) FROM claim_headers",
        "schema": "CREATE TABLE Claims_Processing_Stages (Next_Claim_Stage_ID NUMBER, Claim_Stage_ID NUMBER); CREATE TABLE Claims_Documents (Claim_ID NUMBER); CREATE TABLE Claim_Headers (Amount_Piad NUMBER, Policy_ID NUMBER, Amount_Claimed NUMBER, Claim_Type_Code TEXT, Claim_Status_Code TEXT, Claim_Header_ID NUMBER); CREATE TABLE Customers (Customer_ID NUMBER); CREATE TABLE Claims_Processing (Claim_ID NUMBER); CREATE TABLE Policies (Policy_ID NUMBER);"
      },
      {
        "question": "what is the date of settlement on Overtime Meal Subsidy | Did you want the date of settlement of claim headers with a type code Overtime Meal Subsidy? | exactly",
        "query": "SELECT date_of_settlement FROM claim_headers WHERE claim_type_code = \"Overtime Meal Subsidy\"",
        "schema": "CREATE TABLE Policies (Policy_ID NUMBER, Policy_Type_Code TEXT); CREATE TABLE Claims_Processing (Claim_ID NUMBER); CREATE TABLE Claim_Headers (Date_of_Claim TIME, Policy_ID NUMBER, Date_of_Settlement TIME, Claim_Status_Code TEXT, Amount_Piad NUMBER, Amount_Claimed NUMBER, Claim_Type_Code TEXT, Claim_Header_ID NUMBER); CREATE TABLE Claims_Documents (Claim_ID NUMBER); CREATE TABLE Customers (Customer_ID NUMBER); CREATE TABLE Claims_Processing_Stages (Next_Claim_Stage_ID NUMBER, Claim_Stage_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Can you show me the policy ids, customer ids and policy type codes of all policies?",
        "query": "SELECT policy_id,customer_id,policy_type_code FROM policies",
        "schema": "CREATE TABLE Policies (Policy_Type_Code TEXT, Policy_ID NUMBER, Customer_ID NUMBER); CREATE TABLE Claim_Headers (Policy_ID NUMBER); CREATE TABLE Customers (Customer_ID NUMBER, Customer_Details TEXT);"
      },
      {
        "question": "Can you list the policy type codes of all the policies used?",
        "query": "SELECT policy_type_code FROM policies",
        "schema": "CREATE TABLE Claim_Headers (Policy_ID NUMBER); CREATE TABLE Policies (Policy_ID NUMBER, Policy_Type_Code TEXT, Customer_ID NUMBER); CREATE TABLE Customers (Customer_ID NUMBER, Customer_Details TEXT);"
      },
      {
        "question": "Which type of policy is most frequently used? Can you give me the policy type code?",
        "query": "SELECT policy_type_code FROM policies GROUP BY policy_type_code ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Policies (Policy_Type_Code TEXT, Customer_ID NUMBER, Policy_ID NUMBER); CREATE TABLE Claim_Headers (Policy_ID NUMBER); CREATE TABLE Customers (Customer_Details TEXT, Customer_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What is the customer ID who is associated with the latest policy?",
        "query": "SELECT t2.customer_id FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id WHERE t1.start_date = ( SELECT MAX ( start_date ) FROM policies )",
        "schema": "CREATE TABLE Customers (Customer_Details TEXT, Customer_ID NUMBER); CREATE TABLE Claim_Headers (Date_of_Claim TIME, Policy_ID NUMBER); CREATE TABLE Policies (Policy_ID NUMBER, End_Date TIME, Start_Date TIME, Customer_ID NUMBER);"
      },
      {
        "question": "what is the name of the customer associated with customer ID 263?",
        "query": "SELECT customer_details FROM customers WHERE customer_id = 263",
        "schema": "CREATE TABLE Customers (Customer_ID NUMBER, Customer_Details TEXT); CREATE TABLE Claim_Headers (Date_of_Claim TIME, Policy_ID NUMBER); CREATE TABLE Policies (End_Date TIME, Customer_ID NUMBER, Policy_ID NUMBER, Start_Date TIME);"
      },
      {
        "question": "What is the policy type code of customer with ID 334?",
        "query": "SELECT policy_type_code FROM policies WHERE customer_id = 334",
        "schema": "CREATE TABLE Claim_Headers (Policy_ID NUMBER, Date_of_Claim TIME); CREATE TABLE Policies (Customer_ID NUMBER, Start_Date TIME, End_Date TIME, Policy_Type_Code TEXT, Policy_ID NUMBER); CREATE TABLE Customers (Customer_Details TEXT, Customer_ID NUMBER);"
      }
    ],
    [
      {
        "question": "How many customers are there?",
        "query": "SELECT COUNT ( * ) FROM customers",
        "schema": "CREATE TABLE Policies (Customer_ID NUMBER); CREATE TABLE Customers (Customer_Details TEXT, Customer_ID NUMBER);"
      },
      {
        "question": "How many of them have \"Diana\" anywhere in their name?",
        "query": "SELECT COUNT ( customer_details ) FROM customers WHERE customer_details LIKE \"%Diana%\"",
        "schema": "CREATE TABLE Policies (Customer_ID NUMBER); CREATE TABLE Customers (Customer_ID NUMBER, Customer_Details TEXT);"
      },
      {
        "question": "What is her full name?",
        "query": "SELECT customer_details FROM customers WHERE customer_details LIKE \"%Diana%\"",
        "schema": "CREATE TABLE Policies (Customer_ID NUMBER); CREATE TABLE Customers (Customer_ID NUMBER, Customer_Details TEXT);"
      }
    ],
    [
      {
        "question": "Could you please tell me the total amount paid in claim headers?",
        "query": "SELECT SUM ( amount_piad ) FROM claim_headers",
        "schema": "CREATE TABLE Policies (Policy_ID NUMBER); CREATE TABLE Claim_Headers (Amount_Piad NUMBER, Policy_ID NUMBER, Claim_Header_ID NUMBER, Claim_Type_Code TEXT, Amount_Claimed NUMBER);"
      },
      {
        "question": "Could you please tell me the average amount paid in claim headers?",
        "query": "SELECT AVG ( amount_piad ) FROM claim_headers",
        "schema": "CREATE TABLE Policies (Policy_ID NUMBER); CREATE TABLE Claim_Headers (Amount_Claimed NUMBER, Policy_ID NUMBER, Claim_Type_Code TEXT, Claim_Header_ID NUMBER, Amount_Piad NUMBER);"
      },
      {
        "question": "Could you please tell me the total amount claimed?",
        "query": "SELECT SUM ( amount_claimed ) FROM claim_headers",
        "schema": "CREATE TABLE Policies (Policy_ID NUMBER); CREATE TABLE Claim_Headers (Amount_Piad NUMBER, Claim_Header_ID NUMBER, Amount_Claimed NUMBER, Policy_ID NUMBER, Claim_Type_Code TEXT);"
      },
      {
        "question": "What is the date of the largest amount claimed?",
        "query": "SELECT date_of_claim FROM claim_headers ORDER BY amount_claimed DESC LIMIT 1",
        "schema": "CREATE TABLE Policies (Policy_ID NUMBER); CREATE TABLE Claims_Documents (Created_Date NUMBER); CREATE TABLE Claim_Headers (Date_of_Claim TIME, Amount_Claimed NUMBER, Date_of_Settlement TIME, Amount_Piad NUMBER, Claim_Header_ID NUMBER, Claim_Type_Code TEXT, Policy_ID NUMBER);"
      },
      {
        "question": "What is the date of the smallest amount paid?",
        "query": "SELECT date_of_claim FROM claim_headers ORDER BY amount_claimed LIMIT 1",
        "schema": "CREATE TABLE Policies (Policy_ID NUMBER); CREATE TABLE Claims_Documents (Created_Date NUMBER); CREATE TABLE Claim_Headers (Claim_Header_ID NUMBER, Date_of_Settlement TIME, Date_of_Claim TIME, Claim_Type_Code TEXT, Amount_Piad NUMBER, Amount_Claimed NUMBER, Policy_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What is Dayana Robel policy id?",
        "query": "SELECT policy_id FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id WHERE t2.customer_details = \"Dayana Robel\"",
        "schema": "CREATE TABLE Customers (Customer_Details TEXT, Customer_ID NUMBER); CREATE TABLE Policies (Customer_ID NUMBER, Policy_ID NUMBER); CREATE TABLE Staff (Staff_ID NUMBER, Staff_Details TEXT); CREATE TABLE Claim_Headers (Policy_ID NUMBER);"
      },
      {
        "question": "And what are policy type code associated with this id?",
        "query": "SELECT policy_type_code FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id WHERE t2.customer_details = \"Dayana Robel\"",
        "schema": "CREATE TABLE Policies (Policy_ID NUMBER, Customer_ID NUMBER, Policy_Type_Code TEXT); CREATE TABLE Staff (Staff_Details TEXT, Staff_ID NUMBER); CREATE TABLE Claim_Headers (Policy_ID NUMBER); CREATE TABLE Customers (Customer_ID NUMBER, Customer_Details TEXT);"
      },
      {
        "question": "On which date did this policy start?",
        "query": "SELECT start_date FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id WHERE t2.customer_details = \"Dayana Robel\"",
        "schema": "CREATE TABLE Policies (Customer_ID NUMBER, Policy_ID NUMBER, Start_Date TIME, Policy_Type_Code TEXT); CREATE TABLE Claim_Headers (Policy_ID NUMBER); CREATE TABLE Staff (Staff_Details TEXT, Staff_ID NUMBER); CREATE TABLE Customers (Customer_Details TEXT, Customer_ID NUMBER);"
      },
      {
        "question": "And on which date did it end?",
        "query": "SELECT end_date FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id WHERE t2.customer_details = \"Dayana Robel\"",
        "schema": "CREATE TABLE Customers (Customer_ID NUMBER, Customer_Details TEXT); CREATE TABLE Claim_Headers (Date_of_Claim TIME, Policy_ID NUMBER); CREATE TABLE Staff (Staff_ID NUMBER, Staff_Details TEXT); CREATE TABLE Policies (Policy_ID NUMBER, Policy_Type_Code TEXT, Start_Date TIME, End_Date TIME, Customer_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Who does have a deputy policy?",
        "query": "SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id WHERE t1.policy_type_code = \"Deputy\"",
        "schema": "CREATE TABLE Policies (Policy_Type_Code TEXT, Policy_ID NUMBER, Customer_ID NUMBER); CREATE TABLE Staff (Staff_ID NUMBER, Staff_Details TEXT); CREATE TABLE Claim_Headers (Policy_ID NUMBER, Claim_Header_ID NUMBER); CREATE TABLE Customers (Customer_Details TEXT, Customer_ID NUMBER);"
      }
    ],
    [
      {
        "question": "list the name of the claim processing stage that most of the claims are on",
        "query": "SELECT t2.claim_status_name FROM claims_processing AS t1 JOIN claims_processing_stages AS t2 ON t1.claim_stage_id = t2.claim_stage_id GROUP BY t1.claim_stage_id ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Claims_Documents (Claim_ID NUMBER); CREATE TABLE Claims_Processing (Claim_ID NUMBER, Claim_Processing_ID NUMBER, Claim_Stage_ID NUMBER, Claim_Outcome_Code TEXT); CREATE TABLE Claim_Headers (Claim_Header_ID NUMBER); CREATE TABLE Claims_Processing_Stages (Next_Claim_Stage_ID NUMBER, Claim_Stage_ID NUMBER, Claim_Status_Name TEXT, Claim_Status_Description TEXT);"
      },
      {
        "question": "what is the claim id of open",
        "query": "SELECT claim_id FROM claims_processing_stages AS t1 JOIN claims_processing AS t2 ON t1.claim_stage_id = t2.claim_stage_id whereclaim_status_name = 'Open'",
        "schema": "CREATE TABLE Claim_Headers (Claim_Header_ID NUMBER, Claim_Status_Code TEXT); CREATE TABLE Claims_Processing_Stages (Claim_Status_Description TEXT, Claim_Stage_ID NUMBER, Next_Claim_Stage_ID NUMBER, Claim_Status_Name TEXT); CREATE TABLE Claims_Documents (Claim_ID NUMBER); CREATE TABLE Claims_Processing (Claim_ID NUMBER, Claim_Outcome_Code TEXT, Claim_Processing_ID NUMBER, Claim_Stage_ID NUMBER);"
      },
      {
        "question": "include claim stage id in the table | Do you wanna see all the claim stage ids? | yes please",
        "query": "SELECT DISTINCT claim_stage_id FROM claims_processing",
        "schema": "CREATE TABLE Claims_Processing (Claim_Processing_ID NUMBER, Claim_ID NUMBER, Claim_Outcome_Code TEXT, Claim_Stage_ID NUMBER); CREATE TABLE Claim_Headers (Claim_Header_ID NUMBER, Claim_Status_Code TEXT); CREATE TABLE Claims_Documents (Claim_ID NUMBER); CREATE TABLE Claims_Processing_Stages (Claim_Status_Description TEXT, Claim_Stage_ID NUMBER, Next_Claim_Stage_ID NUMBER, Claim_Status_Name TEXT);"
      }
    ],
    [
      {
        "question": "What is the name of the customer who was involved in the most policies, please?",
        "query": "SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id GROUP BY t2.customer_details ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Policies (Policy_Type_Code TEXT, Customer_ID NUMBER, Policy_ID NUMBER); CREATE TABLE Claim_Headers (Policy_ID NUMBER); CREATE TABLE Customers (Customer_Details TEXT, Customer_ID NUMBER);"
      },
      {
        "question": "What is her customer id?",
        "query": "SELECT t2.customer_id, t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id GROUP BY t2.customer_details ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Policies (Policy_Type_Code TEXT, Customer_ID NUMBER, Policy_ID NUMBER); CREATE TABLE Customers (Customer_ID NUMBER, Customer_Details TEXT); CREATE TABLE Claim_Headers (Policy_ID NUMBER);"
      },
      {
        "question": "What are her customer details, please?",
        "query": "SELECT t2.customer_id, t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id GROUP BY t2.customer_details ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Policies (Policy_ID NUMBER, Policy_Type_Code TEXT, Customer_ID NUMBER); CREATE TABLE Customers (Customer_ID NUMBER, Customer_Details TEXT); CREATE TABLE Claim_Headers (Policy_ID NUMBER);"
      },
      {
        "question": "What is her policy type code?",
        "query": "SELECT policy_type_code FROM policies WHERE customer_id = 380",
        "schema": "CREATE TABLE Customers (Customer_Details TEXT, Customer_ID NUMBER); CREATE TABLE Policies (Policy_ID NUMBER, Customer_ID NUMBER, Policy_Type_Code TEXT); CREATE TABLE Claim_Headers (Policy_ID NUMBER);"
      },
      {
        "question": "What is her start date for each of those?",
        "query": "SELECT policy_type_code,start_date FROM policies WHERE customer_id = 380",
        "schema": "CREATE TABLE Policies (Customer_ID NUMBER, Start_Date TIME, Policy_Type_Code TEXT, Policy_ID NUMBER); CREATE TABLE Claim_Headers (Policy_ID NUMBER); CREATE TABLE Customers (Customer_ID NUMBER, Customer_Details TEXT);"
      },
      {
        "question": "How about the end date, please?",
        "query": "SELECT policy_type_code,start_date,end_date FROM policies WHERE customer_id = 380",
        "schema": "CREATE TABLE Customers (Customer_ID NUMBER, Customer_Details TEXT); CREATE TABLE Claim_Headers (Policy_ID NUMBER); CREATE TABLE Policies (Policy_ID NUMBER, Start_Date TIME, End_Date TIME, Customer_ID NUMBER, Policy_Type_Code TEXT);"
      }
    ],
    [
      {
        "question": "how many staffs are on the table",
        "query": "SELECT COUNT ( staff_id ) FROM staff",
        "schema": "CREATE TABLE Claims_Processing (Staff_ID NUMBER); CREATE TABLE Policies (Policy_ID NUMBER); CREATE TABLE Staff (Staff_Details TEXT, Staff_ID NUMBER); CREATE TABLE Customers (Customer_ID NUMBER); CREATE TABLE Claim_Headers (Claim_Header_ID NUMBER); CREATE TABLE Claims_Documents (Created_by_Staff_ID NUMBER);"
      },
      {
        "question": "how many members are on the table? | do you mean the customers? | how many customers are on the table?",
        "query": "SELECT COUNT ( customer_id ) FROM customers",
        "schema": "CREATE TABLE Customers (Customer_ID NUMBER, Customer_Details TEXT); CREATE TABLE Claims_Processing (Staff_ID NUMBER); CREATE TABLE Staff (Staff_ID NUMBER, Staff_Details TEXT); CREATE TABLE Claims_Documents (Created_by_Staff_ID NUMBER); CREATE TABLE Claim_Headers (Claim_Header_ID NUMBER); CREATE TABLE Policies (Policy_ID NUMBER, Customer_ID NUMBER);"
      },
      {
        "question": "Find the names for all the customers and staff members",
        "query": "SELECT customer_details FROM customers UNION SELECT staff_details FROM staff",
        "schema": "CREATE TABLE Staff (Staff_ID NUMBER, Staff_Details TEXT); CREATE TABLE Policies (Customer_ID NUMBER, Policy_ID NUMBER); CREATE TABLE Claims_Documents (Created_by_Staff_ID NUMBER); CREATE TABLE Customers (Customer_ID NUMBER, Customer_Details TEXT); CREATE TABLE Claims_Processing (Staff_ID NUMBER); CREATE TABLE Claim_Headers (Claim_Header_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What is the name of the customer who has been involved in most policies?",
        "query": "SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id GROUP BY t2.customer_details ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Policies (Policy_Type_Code TEXT, Customer_ID NUMBER, Policy_ID NUMBER); CREATE TABLE Claim_Headers (Policy_ID NUMBER); CREATE TABLE Customers (Customer_ID NUMBER, Customer_Details TEXT);"
      },
      {
        "question": "What is her ID?",
        "query": "SELECT t2.customer_id FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id GROUP BY t2.customer_details ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Claim_Headers (Policy_ID NUMBER); CREATE TABLE Customers (Customer_Details TEXT, Customer_ID NUMBER); CREATE TABLE Policies (Policy_ID NUMBER, Policy_Type_Code TEXT, Customer_ID NUMBER);"
      },
      {
        "question": "How many policies has she been involved in ?",
        "query": "SELECT COUNT ( * ) FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id GROUP BY t2.customer_details ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Policies (Policy_Type_Code TEXT, Policy_ID NUMBER, Customer_ID NUMBER); CREATE TABLE Claim_Headers (Policy_ID NUMBER); CREATE TABLE Customers (Customer_ID NUMBER, Customer_Details TEXT);"
      }
    ],
    [
      {
        "question": "How many customer ids are on the list?",
        "query": "SELECT COUNT ( DISTINCT customer_id ) FROM customers",
        "schema": "CREATE TABLE Claim_Headers (Policy_ID NUMBER); CREATE TABLE Customers (Customer_ID NUMBER, Customer_Details TEXT); CREATE TABLE Policies (Customer_ID NUMBER, Policy_ID NUMBER);"
      },
      {
        "question": "Find the details of customers which contain \"Diana\"?",
        "query": "SELECT * FROM customers WHERE customer_details like \"%Diana%\"",
        "schema": "CREATE TABLE Policies (Customer_ID NUMBER, Policy_ID NUMBER); CREATE TABLE Customers (Customer_Details TEXT, Customer_ID NUMBER); CREATE TABLE Claim_Headers (Policy_ID NUMBER);"
      },
      {
        "question": "State the customer details of customer id 263?",
        "query": "SELECT customer_details FROM customers WHERE customer_id = 263",
        "schema": "CREATE TABLE Claim_Headers (Policy_ID NUMBER); CREATE TABLE Policies (Customer_ID NUMBER, Policy_ID NUMBER); CREATE TABLE Customers (Customer_ID NUMBER, Customer_Details TEXT);"
      }
    ],
    [
      {
        "question": "Can you list the details of all the customers please?",
        "query": "SELECT customer_details FROM customers",
        "schema": "CREATE TABLE Policies (Customer_ID NUMBER); CREATE TABLE Customers (Customer_Details TEXT, Customer_ID NUMBER);"
      },
      {
        "question": "Can you list the names of all the customers who have the letter \"B\" in their name, please? | The details of the customers with a letter \"B\" in their customer details are listed. | Can you list the details and IDs of all the staff in a table, please?",
        "query": "SELECT staff_id,staff_details FROM staff",
        "schema": "CREATE TABLE Policies (Customer_ID NUMBER); CREATE TABLE Customers (Customer_Details TEXT, Customer_ID NUMBER); CREATE TABLE Staff (Staff_Details TEXT, Staff_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What are all the names of the customers? | Did you mean customer details in the table? | Yes",
        "query": "SELECT customer_details FROM customers",
        "schema": "CREATE TABLE Policies (Customer_ID NUMBER); CREATE TABLE Customers (Customer_Details TEXT, Customer_ID NUMBER);"
      },
      {
        "question": "Show the ID of the customers without policies",
        "query": "SELECT customer_id FROM customers EXCEPT SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id",
        "schema": "CREATE TABLE Customers (Customer_ID NUMBER, Customer_Details TEXT); CREATE TABLE Policies (Policy_Type_Code TEXT, Policy_ID NUMBER, Customer_ID NUMBER);"
      },
      {
        "question": "What are the customer details with those customers",
        "query": "SELECT customer_details FROM customers EXCEPT SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id",
        "schema": "CREATE TABLE Customers (Customer_ID NUMBER, Customer_Details TEXT); CREATE TABLE Policies (Customer_ID NUMBER, Policy_Type_Code TEXT, Policy_ID NUMBER);"
      }
    ],
    [
      {
        "question": "what is the name of the policy types used by more than 2 customers?",
        "query": "SELECT policy_type_code FROM policies GROUP BY policy_type_code HAVING COUNT ( * ) > 2",
        "schema": "CREATE TABLE Claim_Headers (Claim_Type_Code TEXT); CREATE TABLE Policies (Customer_ID NUMBER, Policy_ID NUMBER, Policy_Type_Code TEXT); CREATE TABLE Customers (Customer_ID NUMBER);"
      },
      {
        "question": "what is the start date of Jurisdiction?",
        "query": "SELECT start_date FROM policies WHERE policy_type_code = 'Jurisdiction'",
        "schema": "CREATE TABLE Policies (Policy_ID NUMBER, Customer_ID NUMBER, Policy_Type_Code TEXT, Start_Date TIME); CREATE TABLE Customers (Customer_ID NUMBER); CREATE TABLE Claim_Headers (Claim_Type_Code TEXT);"
      },
      {
        "question": "what is the end date of Deputy?",
        "query": "SELECT end_date FROM policies WHERE policy_type_code = 'Deputy'",
        "schema": "CREATE TABLE Customers (Customer_Details TEXT, Customer_ID NUMBER); CREATE TABLE Policies (Policy_ID NUMBER, Start_Date TIME, Customer_ID NUMBER, Policy_Type_Code TEXT, End_Date TIME); CREATE TABLE Claim_Headers (Claim_Type_Code TEXT, Date_of_Claim TIME);"
      }
    ],
    [
      {
        "question": "Hello!  Can you provide me with a list of all customer ids and their associated policy type codes?",
        "query": "SELECT t2.customer_id, t1.policy_type_code FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id",
        "schema": "CREATE TABLE Policies (Policy_ID NUMBER, Policy_Type_Code TEXT, Customer_ID NUMBER); CREATE TABLE Customers (Customer_Details TEXT, Customer_ID NUMBER); CREATE TABLE Claim_Headers (Policy_ID NUMBER, Claim_Type_Code TEXT);"
      },
      {
        "question": "Great!  Can you update this list to include the customer details values for each customer_ID?",
        "query": "SELECT t2.customer_id, t1.policy_type_code, t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id",
        "schema": "CREATE TABLE Policies (Policy_Type_Code TEXT, Policy_ID NUMBER, Customer_ID NUMBER); CREATE TABLE Claim_Headers (Claim_Type_Code TEXT, Policy_ID NUMBER); CREATE TABLE Customers (Customer_ID NUMBER, Customer_Details TEXT);"
      },
      {
        "question": "Awesome! Can you filter this list to show only the customer IDs  and customer names associated with either a deputy policy or an uninformed policy?",
        "query": "SELECT t2.customer_id, t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id WHERE t1.policy_type_code = \"Deputy\" OR t1.policy_type_code = \"Uniform\"",
        "schema": "CREATE TABLE Policies (Policy_Type_Code TEXT, Customer_ID NUMBER, Policy_ID NUMBER); CREATE TABLE Claim_Headers (Claim_Type_Code TEXT, Policy_ID NUMBER); CREATE TABLE Customers (Customer_Details TEXT, Customer_ID NUMBER);"
      }
    ]
  ],
  "local_govt_mdm": [
    [
      {
        "question": "How many master customer ID numbers are there?",
        "query": "SELECT COUNT ( master_customer_id ) FROM customer_master_index",
        "schema": "CREATE TABLE Customer_Master_Index (master_customer_id NUMBER, cmi_details TEXT); CREATE TABLE CMI_Cross_References (master_customer_id NUMBER, cmi_cross_ref_id NUMBER);"
      },
      {
        "question": "What are the master index IDs for all except whose detail includes Schmidt, Kertzmann and Lubowitz?",
        "query": "SELECT master_customer_id FROM customer_master_index WHERE cmi_details ! = ( 'Schmidt, Kertzmann and Lubowitz' )",
        "schema": "CREATE TABLE Customer_Master_Index (cmi_details TEXT, master_customer_id NUMBER); CREATE TABLE CMI_Cross_References (master_customer_id NUMBER, cmi_cross_ref_id NUMBER);"
      },
      {
        "question": "What are their cmi cross reference IDs?",
        "query": "SELECT t1.master_customer_id,cmi_cross_ref_id FROM customer_master_index AS t1 JOIN cmi_cross_references AS t2 ON t1.master_customer_id = t2.master_customer_id WHERE t1.cmi_details NOT IN ( 'Schmidt, Kertzmann and Lubowitz' )",
        "schema": "CREATE TABLE Customer_Master_Index (master_customer_id NUMBER, cmi_details TEXT); CREATE TABLE CMI_Cross_References (source_system_code TEXT, cmi_cross_ref_id NUMBER, master_customer_id NUMBER);"
      },
      {
        "question": "What are their respective source system codes?",
        "query": "SELECT t1.master_customer_id,cmi_cross_ref_id,source_system_code FROM customer_master_index AS t1 JOIN cmi_cross_references AS t2 ON t1.master_customer_id = t2.master_customer_id WHERE t1.cmi_details ! = ( 'Schmidt, Kertzmann and Lubowitz' )",
        "schema": "CREATE TABLE CMI_Cross_References (cmi_cross_ref_id NUMBER, source_system_code TEXT, master_customer_id NUMBER); CREATE TABLE Customer_Master_Index (cmi_details TEXT, master_customer_id NUMBER);"
      },
      {
        "question": "What are the renters arrears tax IDs associated with them?",
        "query": "SELECT t1.council_tax_id FROM rent_arrears AS t1 JOIN cmi_cross_references AS t2 ON t1.cmi_cross_ref_id = t2.cmi_cross_ref_id JOIN customer_master_index AS t3 ON t3.master_customer_id = t2.master_customer_id WHERE t3.cmi_details ! = 'Schmidt , Kertzmann and Lubowitz'",
        "schema": "CREATE TABLE Customer_Master_Index (cmi_details TEXT, master_customer_id NUMBER); CREATE TABLE CMI_Cross_References (master_customer_id NUMBER, cmi_cross_ref_id NUMBER, source_system_code TEXT); CREATE TABLE Rent_Arrears (cmi_cross_ref_id NUMBER, council_tax_id NUMBER);"
      }
    ],
    [
      {
        "question": "Can you list all the cmi cross reference id on here",
        "query": "SELECT cmi_cross_ref_id FROM cmi_cross_references",
        "schema": "CREATE TABLE CMI_Cross_References (cmi_cross_ref_id NUMBER, master_customer_id NUMBER, source_system_code TEXT); CREATE TABLE Customer_Master_Index (master_customer_id NUMBER); CREATE TABLE Parking_Fines (cmi_cross_ref_id NUMBER); CREATE TABLE Electoral_Register (cmi_cross_ref_id NUMBER); CREATE TABLE Council_Tax (cmi_cross_ref_id NUMBER);"
      },
      {
        "question": "can i have the master customer id",
        "query": "SELECT master_customer_id FROM cmi_cross_references",
        "schema": "CREATE TABLE Parking_Fines (cmi_cross_ref_id NUMBER); CREATE TABLE CMI_Cross_References (master_customer_id NUMBER, source_system_code TEXT, cmi_cross_ref_id NUMBER); CREATE TABLE Electoral_Register (cmi_cross_ref_id NUMBER); CREATE TABLE Customer_Master_Index (master_customer_id NUMBER, cmi_details TEXT); CREATE TABLE Council_Tax (cmi_cross_ref_id NUMBER);"
      },
      {
        "question": "What Are the source system code of  CMI_Cross_References",
        "query": "SELECT source_system_code FROM cmi_cross_references",
        "schema": "CREATE TABLE Parking_Fines (cmi_cross_ref_id NUMBER); CREATE TABLE Electoral_Register (cmi_cross_ref_id NUMBER); CREATE TABLE Council_Tax (cmi_cross_ref_id NUMBER); CREATE TABLE CMI_Cross_References (source_system_code TEXT, master_customer_id NUMBER, cmi_cross_ref_id NUMBER); CREATE TABLE Customer_Master_Index (master_customer_id NUMBER, cmi_details TEXT);"
      }
    ],
    [
      {
        "question": "Show me the list of cmi cross reference ids please!",
        "query": "SELECT cmi_cross_ref_id FROM cmi_cross_references",
        "schema": "CREATE TABLE Council_Tax (cmi_cross_ref_id NUMBER); CREATE TABLE Customer_Master_Index (master_customer_id NUMBER); CREATE TABLE CMI_Cross_References (source_system_code TEXT, cmi_cross_ref_id NUMBER, master_customer_id NUMBER);"
      },
      {
        "question": "Which of those cmi cross reference ids are related to parking taxes?",
        "query": "SELECT t1.cmi_cross_ref_id FROM cmi_cross_references AS t1 JOIN parking_fines AS t2 ON t1.cmi_cross_ref_id = t2.cmi_cross_ref_id",
        "schema": "CREATE TABLE Customer_Master_Index (master_customer_id NUMBER); CREATE TABLE CMI_Cross_References (source_system_code TEXT, master_customer_id NUMBER, cmi_cross_ref_id NUMBER); CREATE TABLE Parking_Fines (cmi_cross_ref_id NUMBER, council_tax_id NUMBER); CREATE TABLE Council_Tax (cmi_cross_ref_id NUMBER, council_tax_id NUMBER);"
      },
      {
        "question": "What about cmi cross reference ids that not related?",
        "query": "SELECT cmi_cross_ref_id FROM cmi_cross_references WHERE cmi_cross_ref_id NOT IN ( SELECT t1.cmi_cross_ref_id FROM cmi_cross_references AS t1 JOIN parking_fines AS t2 ON t1.cmi_cross_ref_id = t2.cmi_cross_ref_id )",
        "schema": "CREATE TABLE Customer_Master_Index (master_customer_id NUMBER); CREATE TABLE Parking_Fines (council_tax_id NUMBER, cmi_cross_ref_id NUMBER); CREATE TABLE Council_Tax (cmi_cross_ref_id NUMBER, council_tax_id NUMBER); CREATE TABLE CMI_Cross_References (master_customer_id NUMBER, source_system_code TEXT, cmi_cross_ref_id NUMBER);"
      }
    ],
    [
      {
        "question": "What is the tax source system code for benefits and overpayments?",
        "query": "SELECT t1.source_system_code FROM cmi_cross_references AS t1 JOIN benefits_overpayments AS t2 ON t1.cmi_cross_ref_id = t2.cmi_cross_ref_id",
        "schema": "CREATE TABLE CMI_Cross_References (cmi_cross_ref_id NUMBER, source_system_code TEXT); CREATE TABLE Benefits_Overpayments (cmi_cross_ref_id NUMBER, council_tax_id NUMBER);"
      },
      {
        "question": "List benefit ID, please.",
        "query": "SELECT t1.source_system_code , t2.council_tax_id FROM cmi_cross_references AS t1 JOIN benefits_overpayments AS t2 ON t1.cmi_cross_ref_id = t2.cmi_cross_ref_id",
        "schema": "CREATE TABLE Benefits_Overpayments (council_tax_id NUMBER, cmi_cross_ref_id NUMBER); CREATE TABLE CMI_Cross_References (cmi_cross_ref_id NUMBER, source_system_code TEXT); CREATE TABLE Council_Tax (council_tax_id NUMBER, cmi_cross_ref_id NUMBER);"
      },
      {
        "question": "Order them by benefit ID, Please.",
        "query": "SELECT t1.source_system_code , t2.council_tax_id FROM cmi_cross_references AS t1 JOIN benefits_overpayments AS t2 ON t1.cmi_cross_ref_id = t2.cmi_cross_ref_id ORDER BY t2.council_tax_id",
        "schema": "CREATE TABLE Council_Tax (cmi_cross_ref_id NUMBER, council_tax_id NUMBER); CREATE TABLE Benefits_Overpayments (council_tax_id NUMBER, cmi_cross_ref_id NUMBER); CREATE TABLE CMI_Cross_References (cmi_cross_ref_id NUMBER, source_system_code TEXT);"
      },
      {
        "question": "Ok, can you show me the list of the source system codes?",
        "query": "SELECT source_system_code FROM cmi_cross_references",
        "schema": "CREATE TABLE CMI_Cross_References (source_system_code TEXT, cmi_cross_ref_id NUMBER); CREATE TABLE Council_Tax (council_tax_id NUMBER, cmi_cross_ref_id NUMBER); CREATE TABLE Benefits_Overpayments (cmi_cross_ref_id NUMBER, council_tax_id NUMBER);"
      }
    ],
    [
      {
        "question": "How are you!  Can you provide me with a list of all of the \nmaster customer ids and corresponding cmi details?",
        "query": "SELECT master_customer_id, cmi_details FROM customer_master_index",
        "schema": "CREATE TABLE Customer_Master_Index (cmi_details TEXT, master_customer_id NUMBER); CREATE TABLE CMI_Cross_References (master_customer_id NUMBER, source_system_code TEXT, cmi_cross_ref_id NUMBER);"
      },
      {
        "question": "This is great!  Can you update this list to also show the corresponding  cmi cross reference ids for each line of this list?",
        "query": "SELECT t1.master_customer_id, t1.cmi_details, t2.cmi_cross_ref_id FROM customer_master_index AS t1 JOIN cmi_cross_references AS t2 ON t1.master_customer_id = t2.master_customer_id",
        "schema": "CREATE TABLE CMI_Cross_References (cmi_cross_ref_id NUMBER, source_system_code TEXT, master_customer_id NUMBER); CREATE TABLE Customer_Master_Index (master_customer_id NUMBER, cmi_details TEXT);"
      },
      {
        "question": "Can you filter this list so that the only rows that are displayed are those containing \"Gottlieb, Becker and Wyman\"?",
        "query": "SELECT t1.master_customer_id, t1.cmi_details, t2.cmi_cross_ref_id FROM customer_master_index AS t1 JOIN cmi_cross_references AS t2 ON t1.master_customer_id = t2.master_customer_id WHERE t1.cmi_details = 'Gottlieb, Becker and Wyman'",
        "schema": "CREATE TABLE CMI_Cross_References (master_customer_id NUMBER, source_system_code TEXT, cmi_cross_ref_id NUMBER); CREATE TABLE Customer_Master_Index (master_customer_id NUMBER, cmi_details TEXT);"
      }
    ],
    [
      {
        "question": "What source system code includes the sub string 'en'?",
        "query": "SELECT DISTINCT source_system_code FROM cmi_cross_references WHERE source_system_code LIKE '%en%'",
        "schema": "CREATE TABLE CMI_Cross_References (source_system_code TEXT, cmi_cross_ref_id NUMBER);"
      },
      {
        "question": "What are the other sub strings, that do not contain 'en'?",
        "query": "SELECT DISTINCT source_system_code FROM cmi_cross_references WHERE source_system_code not LIKE '%en%'",
        "schema": "CREATE TABLE CMI_Cross_References (source_system_code TEXT, cmi_cross_ref_id NUMBER);"
      },
      {
        "question": "what is the ID for electoral code? | which columns return? | What is the master id please.",
        "query": "SELECT master_customer_id FROM cmi_cross_references WHERE source_system_code = 'Electoral'",
        "schema": "CREATE TABLE Customer_Master_Index (master_customer_id NUMBER, cmi_details TEXT); CREATE TABLE CMI_Cross_References (master_customer_id NUMBER, cmi_cross_ref_id NUMBER, source_system_code TEXT);"
      }
    ]
  ],
  "store_product": [
    [
      {
        "question": "Could you please find the products with the max page size as \"A4\"?",
        "query": "SELECT product FROM product WHERE max_page_size = \"A4\"",
        "schema": "CREATE TABLE product (max_page_size TEXT, product TEXT, product_id NUMBER);"
      },
      {
        "question": "Could you please find the products with the pages per minute color smaller than 5?",
        "query": "SELECT product FROM product WHERE pages_per_minute_color < 5",
        "schema": "CREATE TABLE product (product TEXT, max_page_size TEXT, pages_per_minute_color NUMBER, product_id NUMBER);"
      },
      {
        "question": "Could you please find the products with the max page size as \"A4\" and with the pages per minute color smaller than 5?",
        "query": "SELECT product FROM product WHERE max_page_size = \"A4\" AND pages_per_minute_color < 5",
        "schema": "CREATE TABLE product (product_id NUMBER, pages_per_minute_color NUMBER, product TEXT, max_page_size TEXT);"
      },
      {
        "question": "What are the interfaces of those products?",
        "query": "SELECT product,interface FROM product WHERE max_page_size = \"A4\" AND pages_per_minute_color < 5",
        "schema": "CREATE TABLE product (product TEXT, pages_per_minute_color NUMBER, product_id NUMBER, interface TEXT, max_page_size TEXT);"
      },
      {
        "question": "What are the dimensions of those products?",
        "query": "SELECT product,dimensions FROM product WHERE max_page_size = \"A4\" AND pages_per_minute_color < 5",
        "schema": "CREATE TABLE product (dimensions TEXT, max_page_size TEXT, product_id NUMBER, product TEXT, interface TEXT, pages_per_minute_color NUMBER);"
      },
      {
        "question": "Could you please find the products with the pages per minute color larger than 5?",
        "query": "SELECT product FROM product WHERE pages_per_minute_color > 5",
        "schema": "CREATE TABLE product (max_page_size TEXT, interface TEXT, product TEXT, dimensions TEXT, pages_per_minute_color NUMBER, product_id NUMBER);"
      }
    ],
    [
      {
        "question": "what is the dimenson of Plustek MobileOffice D28 Corporate?",
        "query": "SELECT dimensions FROM product WHERE product = \"Plustek MobileOffice D28 Corporate\"",
        "schema": "CREATE TABLE district (District_name TEXT); CREATE TABLE store (Store_ID NUMBER, Type TEXT, Ranking NUMBER, Store_Name TEXT, Number_of_product_category NUMBER); CREATE TABLE store_district (Store_ID NUMBER); CREATE TABLE store_product (Store_ID NUMBER, Product_ID NUMBER); CREATE TABLE product (interface TEXT, dimensions TEXT, product_id NUMBER, product TEXT, dpi NUMBER);"
      },
      {
        "question": "how many pages per  minute colored in Xerox Travel Scanner 100?",
        "query": "SELECT pages_per_minute_color FROM product WHERE product = \"Xerox Travel Scanner 100\"",
        "schema": "CREATE TABLE store (Ranking NUMBER, Store_ID NUMBER, Number_of_product_category NUMBER, Type TEXT, Store_Name TEXT); CREATE TABLE store_product (Product_ID NUMBER, Store_ID NUMBER); CREATE TABLE district (District_name TEXT); CREATE TABLE store_district (Store_ID NUMBER); CREATE TABLE product (dimensions TEXT, pages_per_minute_color NUMBER, product TEXT, dpi NUMBER, max_page_size TEXT, product_id NUMBER, interface TEXT);"
      },
      {
        "question": "what is the max page size can be used in Plustek MobileOffice D28 Corporate?",
        "query": "SELECT max_page_size FROM product WHERE product = \"Plustek MobileOffice D28 Corporate\"",
        "schema": "CREATE TABLE store_product (Product_ID NUMBER, Store_ID NUMBER); CREATE TABLE product (product TEXT, dpi NUMBER, max_page_size TEXT, dimensions TEXT, pages_per_minute_color NUMBER, product_id NUMBER, interface TEXT); CREATE TABLE store_district (Store_ID NUMBER); CREATE TABLE store (Number_of_product_category NUMBER, Store_Name TEXT, Store_ID NUMBER, Type TEXT, Ranking NUMBER); CREATE TABLE district (District_name TEXT);"
      },
      {
        "question": "what is the dpi of Fujitsu fi-6130 A4 Series Scanner?",
        "query": "SELECT dpi FROM product WHERE product = \"Fujitsu fi-6130 A4 Series Scanner\"",
        "schema": "CREATE TABLE store (Number_of_product_category NUMBER, Store_Name TEXT, Type TEXT, Store_ID NUMBER, Ranking NUMBER); CREATE TABLE district (District_name TEXT); CREATE TABLE product (max_page_size TEXT, pages_per_minute_color NUMBER, product_id NUMBER, dimensions TEXT, product TEXT, dpi NUMBER, interface TEXT); CREATE TABLE store_district (Store_ID NUMBER); CREATE TABLE store_product (Product_ID NUMBER, Store_ID NUMBER);"
      },
      {
        "question": "which product coloured the highest pages in a minute?",
        "query": "SELECT product,pages_per_minute_color FROM product ORDER BY pages_per_minute_color DESC LIMIT 1",
        "schema": "CREATE TABLE store (Type TEXT, Store_Name TEXT, Store_ID NUMBER, Number_of_product_category NUMBER, Ranking NUMBER); CREATE TABLE store_district (Store_ID NUMBER); CREATE TABLE store_product (Product_ID NUMBER, Store_ID NUMBER); CREATE TABLE product (max_page_size TEXT, product_id NUMBER, pages_per_minute_color NUMBER, product TEXT, dimensions TEXT, dpi NUMBER, interface TEXT); CREATE TABLE district (District_name TEXT);"
      }
    ],
    [
      {
        "question": "Find all stores in the Attock district | Do you want the id or the name of these stores? | The name",
        "query": "SELECT t1.store_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id = t2.store_id JOIN district AS t3 ON t3.district_id = t2.district_id WHERE t3.district_name = \"Attock District\"",
        "schema": "CREATE TABLE store_product (Product_ID NUMBER, Store_ID NUMBER); CREATE TABLE store_district (Store_ID NUMBER, District_ID NUMBER); CREATE TABLE product (product_id NUMBER); CREATE TABLE district (District_ID NUMBER, District_name TEXT, Headquartered_City TEXT); CREATE TABLE store (Store_ID NUMBER, Store_Name TEXT);"
      },
      {
        "question": "Find all the store names in the district with the lowest population.",
        "query": "SELECT t1.store_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id = t2.store_id WHERE district_id = ( SELECT district_id FROM district ORDER BY city_population ASC LIMIT 1 )",
        "schema": "CREATE TABLE store_product (Product_ID NUMBER, Store_ID NUMBER); CREATE TABLE store_district (Store_ID NUMBER, District_ID NUMBER); CREATE TABLE product (product_id NUMBER); CREATE TABLE district (District_name TEXT, City_Population NUMBER, Headquartered_City TEXT, District_ID NUMBER); CREATE TABLE store (Store_Name TEXT, Store_ID NUMBER);"
      },
      {
        "question": "Find all the store names in the district with the highest population.",
        "query": "SELECT t1.store_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id = t2.store_id WHERE district_id = ( SELECT district_id FROM district ORDER BY city_population DESC LIMIT 1 )",
        "schema": "CREATE TABLE store_district (District_ID NUMBER, Store_ID NUMBER); CREATE TABLE store (Store_Name TEXT, Store_ID NUMBER); CREATE TABLE store_product (Store_ID NUMBER, Product_ID NUMBER); CREATE TABLE district (District_ID NUMBER, District_name TEXT, Headquartered_City TEXT, City_Population NUMBER); CREATE TABLE product (product_id NUMBER);"
      },
      {
        "question": "What is the city area of the district with the highest population.",
        "query": "SELECT city_area FROM district ORDER BY city_population DESC LIMIT 1",
        "schema": "CREATE TABLE store (Area_size NUMBER, Store_ID NUMBER, Store_Name TEXT); CREATE TABLE district (City_Area NUMBER, District_name TEXT, District_ID NUMBER, Headquartered_City TEXT, City_Population NUMBER); CREATE TABLE store_district (Store_ID NUMBER, District_ID NUMBER); CREATE TABLE store_product (Product_ID NUMBER, Store_ID NUMBER); CREATE TABLE product (product_id NUMBER);"
      }
    ],
    [
      {
        "question": "What are the names of each district?",
        "query": "SELECT district_name FROM district",
        "schema": "CREATE TABLE district (District_ID NUMBER, District_name TEXT, Headquartered_City TEXT, City_Area NUMBER); CREATE TABLE store_district (District_ID NUMBER);"
      },
      {
        "question": "What are the total population of the districts whose area is larger than the average city area?",
        "query": "SELECT SUM ( city_population ) FROM district WHERE city_area > ( SELECT AVG ( city_area ) FROM district )",
        "schema": "CREATE TABLE store_district (District_ID NUMBER); CREATE TABLE district (City_Area NUMBER, District_name TEXT, Headquartered_City TEXT, District_ID NUMBER, City_Population NUMBER);"
      }
    ],
    [
      {
        "question": "Hello there!  Can you tell me what is the sum total of the populations of the three districts with the largest area?",
        "query": "SELECT SUM ( city_population ) FROM district ORDER BY city_area DESC LIMIT 3",
        "schema": "CREATE TABLE district (District_ID NUMBER, City_Population NUMBER, District_name TEXT, Headquartered_City TEXT, City_Area NUMBER);"
      },
      {
        "question": "Excellent!  Can you tell me the district name associated with the largest population?",
        "query": "SELECT district_name FROM district WHERE city_population = ( SELECT MAX ( city_population ) FROM district )",
        "schema": "CREATE TABLE district (District_ID NUMBER, City_Population NUMBER, City_Area NUMBER, Headquartered_City TEXT, District_name TEXT);"
      },
      {
        "question": "Wonderful!  Can you show me the city's population total and the city's area?",
        "query": "SELECT city_population, city_area FROM district WHERE city_population = ( SELECT MAX ( city_population ) FROM district )",
        "schema": "CREATE TABLE district (District_name TEXT, City_Area NUMBER, District_ID NUMBER, City_Population NUMBER, Headquartered_City TEXT);"
      }
    ],
    [
      {
        "question": "What is the district name for district id 15?",
        "query": "SELECT district_name FROM district WHERE district_id = 15",
        "schema": "CREATE TABLE store_district (District_ID NUMBER); CREATE TABLE district (District_name TEXT, District_ID NUMBER);"
      },
      {
        "question": "What is the district name for District id 11?",
        "query": "SELECT district_name FROM district WHERE district_id = 11",
        "schema": "CREATE TABLE district (District_ID NUMBER, District_name TEXT); CREATE TABLE store_district (District_ID NUMBER);"
      },
      {
        "question": "How many store are located in district 15?",
        "query": "SELECT COUNT ( * ) FROM store AS t1 JOIN store_district AS t2 ON t1.store_id = t2.store_id JOIN district AS t3 ON t2.district_id = t3.district_id WHERE t3.district_id = 15",
        "schema": "CREATE TABLE store (Store_ID NUMBER, Store_Name TEXT); CREATE TABLE district (District_name TEXT, District_ID NUMBER); CREATE TABLE store_district (Store_ID NUMBER, District_ID NUMBER);"
      },
      {
        "question": "What are their names?",
        "query": "SELECT t1.store_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id = t2.store_id JOIN district AS t3 ON t2.district_id = t3.district_id WHERE t3.district_id = 15",
        "schema": "CREATE TABLE store (Store_Name TEXT, Store_ID NUMBER); CREATE TABLE store_district (District_ID NUMBER, Store_ID NUMBER); CREATE TABLE district (District_name TEXT, District_ID NUMBER);"
      },
      {
        "question": "What is the name of the store in district 11?",
        "query": "SELECT t1.store_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id = t2.store_id JOIN district AS t3 ON t2.district_id = t3.district_id WHERE t3.district_id = 11",
        "schema": "CREATE TABLE store_district (District_ID NUMBER, Store_ID NUMBER); CREATE TABLE store (Store_Name TEXT, Store_ID NUMBER); CREATE TABLE district (District_name TEXT, District_ID NUMBER);"
      }
    ],
    [
      {
        "question": "what are the districts that have city mall.",
        "query": "SELECT t3.district_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id = t2.store_id JOIN district AS t3 ON t2.district_id = t3.district_id WHERE t1.type = \"City Mall\"",
        "schema": "CREATE TABLE store_district (District_ID NUMBER, Store_ID NUMBER); CREATE TABLE district (District_ID NUMBER, District_name TEXT, Headquartered_City TEXT, City_Area NUMBER); CREATE TABLE store (Store_ID NUMBER, Store_Name TEXT, Type TEXT);"
      },
      {
        "question": "what are the names of the districts where both city mall and village store type stores.",
        "query": "SELECT t3.district_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id = t2.store_id JOIN district AS t3 ON t2.district_id = t3.district_id WHERE t1.type = \"City Mall\" INTERSECT SELECT t3.district_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id = t2.store_id JOIN district AS t3 ON t2.district_id = t3.district_id WHERE t1.type = \"Village Store\"",
        "schema": "CREATE TABLE district (District_name TEXT, City_Area NUMBER, Headquartered_City TEXT, District_ID NUMBER); CREATE TABLE store (Type TEXT, Store_Name TEXT, Store_ID NUMBER); CREATE TABLE store_district (Store_ID NUMBER, District_ID NUMBER);"
      }
    ],
    [
      {
        "question": "what is the average of city populations?",
        "query": "SELECT AVG ( city_population ) FROM district",
        "schema": "CREATE TABLE district (City_Area NUMBER, District_ID NUMBER, Headquartered_City TEXT, District_name TEXT, City_Population NUMBER);"
      },
      {
        "question": "what is the highest city population?",
        "query": "SELECT MAX ( city_population ) FROM district",
        "schema": "CREATE TABLE district (District_name TEXT, City_Area NUMBER, District_ID NUMBER, City_Population NUMBER, Headquartered_City TEXT);"
      },
      {
        "question": "which district has the least area?",
        "query": "SELECT district_name FROM district ORDER BY city_area ASC LIMIT 1",
        "schema": "CREATE TABLE district (District_ID NUMBER, District_name TEXT, City_Population NUMBER, Headquartered_City TEXT, City_Area NUMBER);"
      }
    ],
    [
      {
        "question": "What page size do those products use?",
        "query": "SELECT max_page_size FROM product WHERE max_page_size ! = 'A4'",
        "schema": "CREATE TABLE product (pages_per_minute_color NUMBER, product TEXT, max_page_size TEXT, product_id NUMBER);"
      }
    ],
    [
      {
        "question": "Hi there!  Can you show me a list of all store IDs along with the associated store names?",
        "query": "SELECT store_id, store_name FROM store",
        "schema": "CREATE TABLE store_district (District_ID NUMBER, Store_ID NUMBER); CREATE TABLE store (Store_ID NUMBER, Store_Name TEXT); CREATE TABLE store_product (Store_ID NUMBER, Product_ID NUMBER);"
      },
      {
        "question": "Thanks for that!  Can you filter this list to show only the Store ID and Store Name for stores with a district name of Khanewal District?",
        "query": "SELECT t1.store_id, t1.store_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id = t2.store_id JOIN district AS t3 ON t2.district_id = t3.district_id WHERE t3.district_name = \"Khanewal District\"",
        "schema": "CREATE TABLE store_district (District_ID NUMBER, Store_ID NUMBER); CREATE TABLE store_product (Store_ID NUMBER, Product_ID NUMBER); CREATE TABLE district (Headquartered_City TEXT, District_ID NUMBER, District_name TEXT, City_Area NUMBER); CREATE TABLE store (Store_Name TEXT, Store_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Which district has the largest population?",
        "query": "SELECT district_name FROM district ORDER BY city_population DESC LIMIT 1",
        "schema": "CREATE TABLE district (City_Population NUMBER, City_Area NUMBER, Headquartered_City TEXT, District_ID NUMBER, District_name TEXT);"
      },
      {
        "question": "What is its headquartered city?",
        "query": "SELECT headquartered_city FROM district ORDER BY city_population DESC LIMIT 1",
        "schema": "CREATE TABLE district (City_Area NUMBER, District_ID NUMBER, City_Population NUMBER, District_name TEXT, Headquartered_City TEXT);"
      },
      {
        "question": "What is that city's area?",
        "query": "SELECT city_area FROM district ORDER BY city_population DESC LIMIT 1",
        "schema": "CREATE TABLE district (District_name TEXT, City_Population NUMBER, District_ID NUMBER, Headquartered_City TEXT, City_Area NUMBER);"
      },
      {
        "question": "How many cities have a population over 500,000?",
        "query": "SELECT COUNT ( * ) FROM district WHERE city_population > 500000",
        "schema": "CREATE TABLE district (Headquartered_City TEXT, City_Population NUMBER, District_ID NUMBER, District_name TEXT, City_Area NUMBER);"
      },
      {
        "question": "What are the names of those cities?",
        "query": "SELECT headquartered_city FROM district WHERE city_population > 500000",
        "schema": "CREATE TABLE district (District_ID NUMBER, District_name TEXT, City_Area NUMBER, City_Population NUMBER, Headquartered_City TEXT);"
      }
    ],
    [
      {
        "question": "how many store are presented on the table",
        "query": "SELECT COUNT ( * ) FROM store",
        "schema": "CREATE TABLE store_product (Product_ID NUMBER, Store_ID NUMBER); CREATE TABLE store_district (Store_ID NUMBER); CREATE TABLE store (Type TEXT, Store_Name TEXT, Ranking NUMBER, Store_ID NUMBER);"
      },
      {
        "question": "list out the store name",
        "query": "SELECT store_name FROM store",
        "schema": "CREATE TABLE store_district (Store_ID NUMBER); CREATE TABLE store_product (Store_ID NUMBER, Product_ID NUMBER); CREATE TABLE store (Store_ID NUMBER, Type TEXT, Store_Name TEXT, Ranking NUMBER);"
      },
      {
        "question": "what is the city population of Attock District",
        "query": "SELECT city_population FROM district WHERE headquartered_city = \"Attock City\"",
        "schema": "CREATE TABLE store (Ranking NUMBER, Type TEXT, Store_ID NUMBER, Store_Name TEXT); CREATE TABLE store_district (District_ID NUMBER, Store_ID NUMBER); CREATE TABLE store_product (Product_ID NUMBER, Store_ID NUMBER); CREATE TABLE district (Headquartered_City TEXT, District_name TEXT, City_Area NUMBER, District_ID NUMBER, City_Population NUMBER);"
      },
      {
        "question": "what is the area size of Neguac",
        "query": "SELECT area_size FROM store WHERE store_name = \"Neguac\"",
        "schema": "CREATE TABLE store_district (District_ID NUMBER, Store_ID NUMBER); CREATE TABLE store (Store_Name TEXT, Area_size NUMBER, Store_ID NUMBER, Type TEXT, Ranking NUMBER); CREATE TABLE district (City_Population NUMBER, District_ID NUMBER, District_name TEXT, Headquartered_City TEXT, City_Area NUMBER); CREATE TABLE store_product (Product_ID NUMBER, Store_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Please list the headquarters of the store that is called Blackville?",
        "query": "SELECT t3.headquartered_city FROM store AS t1 JOIN store_district AS t2 ON t1.store_id = t2.store_id JOIN district AS t3 ON t2.district_id = t3.district_id WHERE t1.store_name = \"Blackville\"",
        "schema": "CREATE TABLE store (Store_ID NUMBER, Store_Name TEXT); CREATE TABLE store_district (District_ID NUMBER, Store_ID NUMBER); CREATE TABLE district (Headquartered_City TEXT, District_name TEXT, District_ID NUMBER);"
      },
      {
        "question": "What is the population of that city?",
        "query": "SELECT t3.city_population FROM store AS t1 JOIN store_district AS t2 ON t1.store_id = t2.store_id JOIN district AS t3 ON t2.district_id = t3.district_id WHERE t1.store_name = \"Blackville\"",
        "schema": "CREATE TABLE store (Store_Name TEXT, Store_ID NUMBER); CREATE TABLE store_district (Store_ID NUMBER, District_ID NUMBER); CREATE TABLE district (City_Population NUMBER, District_ID NUMBER, City_Area NUMBER, District_name TEXT, Headquartered_City TEXT);"
      },
      {
        "question": "What is the name of the store in the city with the greatest population?",
        "query": "SELECT t1.store_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id = t2.store_id JOIN district AS t3 ON t2.district_id = t3.district_id ORDER BY t3.city_population DESC LIMIT 1",
        "schema": "CREATE TABLE store (Store_ID NUMBER, Store_Name TEXT); CREATE TABLE district (District_name TEXT, City_Population NUMBER, District_ID NUMBER, Headquartered_City TEXT, City_Area NUMBER); CREATE TABLE store_district (District_ID NUMBER, Store_ID NUMBER);"
      }
    ],
    [
      {
        "question": "how many district there",
        "query": "SELECT COUNT ( * ) FROM district",
        "schema": "CREATE TABLE district (City_Population NUMBER, District_name TEXT, City_Area NUMBER, Headquartered_City TEXT, District_ID NUMBER); CREATE TABLE store (Store_ID NUMBER); CREATE TABLE store_district (Store_ID NUMBER, District_ID NUMBER);"
      },
      {
        "question": "what is the city area of Bahawalnagar District",
        "query": "SELECT city_area FROM district WHERE district_name = \"Bahawalnagar District\"",
        "schema": "CREATE TABLE district (City_Population NUMBER, District_ID NUMBER, Headquartered_City TEXT, District_name TEXT, City_Area NUMBER); CREATE TABLE store_district (District_ID NUMBER, Store_ID NUMBER); CREATE TABLE store (Store_ID NUMBER);"
      },
      {
        "question": "what is the City Population of Attock District",
        "query": "SELECT city_population FROM district WHERE district_name = \"Attock District\"",
        "schema": "CREATE TABLE store_district (Store_ID NUMBER, District_ID NUMBER); CREATE TABLE district (District_name TEXT, Headquartered_City TEXT, District_ID NUMBER, City_Area NUMBER, City_Population NUMBER); CREATE TABLE store (Store_ID NUMBER);"
      }
    ]
  ],
  "tracking_share_transactions": [
    [
      {
        "question": "What are all of the lots?",
        "query": "SELECT * FROM lots",
        "schema": "CREATE TABLE Purchases (purchase_details TEXT); CREATE TABLE Lots (lot_id NUMBER, lot_details TEXT); CREATE TABLE Transactions_Lots (transaction_id NUMBER, lot_id NUMBER);"
      },
      {
        "question": "Which lots are not used in any transactions? | do you mean the id of lots or the details of lot | The id of the lots please.",
        "query": "SELECT lot_id FROM lots EXCEPT SELECT t1.lot_id FROM lots AS t1 JOIN transactions_lots AS t2 ON t1.lot_id = t2.lot_id",
        "schema": "CREATE TABLE Transactions_Lots (lot_id NUMBER, transaction_id NUMBER); CREATE TABLE Purchases (purchase_details TEXT); CREATE TABLE Transactions (transaction_id NUMBER); CREATE TABLE Lots (lot_details TEXT, lot_id NUMBER);"
      },
      {
        "question": "What are the details of the lots which aren't used in any transactions?",
        "query": "SELECT lot_details FROM lots EXCEPT SELECT t1.lot_details FROM lots AS t1 JOIN transactions_lots AS t2 ON t1.lot_id = t2.lot_id",
        "schema": "CREATE TABLE Purchases (purchase_details TEXT); CREATE TABLE Transactions (transaction_id NUMBER); CREATE TABLE Lots (lot_details TEXT, lot_id NUMBER); CREATE TABLE Transactions_Lots (lot_id NUMBER, transaction_id NUMBER);"
      }
    ],
    [
      {
        "question": "when did the transactions that were less that 3000 occur?",
        "query": "SELECT t2.date_of_transaction FROM sales AS t1 JOIN transactions AS t2 ON t1.sales_transaction_id = t2.transaction_id WHERE t2.amount_of_transaction < 3000",
        "schema": "CREATE TABLE Transactions_Lots (transaction_id NUMBER); CREATE TABLE Sales (sales_transaction_id NUMBER, sales_details TEXT); CREATE TABLE Transactions (transaction_id NUMBER, date_of_transaction TIME, amount_of_transaction NUMBER, transaction_type_code TEXT);"
      },
      {
        "question": "which transactions were sales?",
        "query": "SELECT transaction_id FROM transactions WHERE transaction_type_code = 'SALE'",
        "schema": "CREATE TABLE Transactions_Lots (transaction_id NUMBER); CREATE TABLE Transactions (amount_of_transaction NUMBER, transaction_id NUMBER, date_of_transaction TIME, transaction_type_code TEXT); CREATE TABLE Sales (sales_transaction_id NUMBER, sales_details TEXT);"
      },
      {
        "question": "ok i see the transactions of the sales. and then what are the ones that were purchases?",
        "query": "SELECT transaction_id FROM transactions WHERE transaction_type_code = 'PUR'",
        "schema": "CREATE TABLE Purchases (purchase_details TEXT, purchase_transaction_id NUMBER); CREATE TABLE Sales (sales_details TEXT, sales_transaction_id NUMBER); CREATE TABLE Transactions (transaction_type_code TEXT, amount_of_transaction NUMBER, date_of_transaction TIME, transaction_id NUMBER); CREATE TABLE Ref_Transaction_Types (transaction_type_code TEXT); CREATE TABLE Transactions_Lots (transaction_id NUMBER);"
      },
      {
        "question": "what investors were involved with those transactions that were under 3000?",
        "query": "SELECT t2.investor_id FROM sales AS t1 JOIN transactions AS t2 ON t1.sales_transaction_id = t2.transaction_id WHERE t2.amount_of_transaction < 3000",
        "schema": "CREATE TABLE Sales (sales_details TEXT, sales_transaction_id NUMBER); CREATE TABLE Ref_Transaction_Types (transaction_type_code TEXT); CREATE TABLE Transactions_Lots (transaction_id NUMBER); CREATE TABLE Purchases (purchase_transaction_id NUMBER, purchase_details TEXT); CREATE TABLE Investors (Investor_details TEXT, investor_id NUMBER); CREATE TABLE Transactions (amount_of_transaction NUMBER, transaction_type_code TEXT, investor_id NUMBER, transaction_id NUMBER, date_of_transaction TIME);"
      }
    ],
    [
      {
        "question": "Could you please show me the average share count of transactions of each investor?",
        "query": "SELECT investor_id , AVG ( share_count ) FROM transactions GROUP BY investor_id",
        "schema": "CREATE TABLE Investors (Investor_details TEXT, investor_id NUMBER); CREATE TABLE Transactions (transaction_id NUMBER, amount_of_transaction NUMBER, share_count TEXT, investor_id NUMBER);"
      },
      {
        "question": "Could you order those by average share count, please?",
        "query": "SELECT investor_id , AVG ( share_count ) FROM transactions GROUP BY investor_id ORDER BY AVG ( share_count )",
        "schema": "CREATE TABLE Transactions (investor_id NUMBER, amount_of_transaction NUMBER, transaction_id NUMBER, share_count TEXT); CREATE TABLE Investors (investor_id NUMBER, Investor_details TEXT);"
      },
      {
        "question": "What are the dates of those transactions?",
        "query": "SELECT date_of_transaction FROM transactions",
        "schema": "CREATE TABLE Investors (investor_id NUMBER, Investor_details TEXT); CREATE TABLE Transactions (date_of_transaction TIME, share_count TEXT, investor_id NUMBER, transaction_id NUMBER, amount_of_transaction NUMBER);"
      },
      {
        "question": "What about just the ones with the transaction type code SALE?",
        "query": "SELECT date_of_transaction FROM transactions WHERE transaction_type_code = \"SALE\"",
        "schema": "CREATE TABLE Purchases (purchase_transaction_id NUMBER, purchase_details TEXT); CREATE TABLE Transactions (share_count TEXT, transaction_type_code TEXT, investor_id NUMBER, transaction_id NUMBER, date_of_transaction TIME, amount_of_transaction NUMBER); CREATE TABLE Investors (Investor_details TEXT, investor_id NUMBER); CREATE TABLE Sales (sales_transaction_id NUMBER); CREATE TABLE Ref_Transaction_Types (transaction_type_code TEXT);"
      },
      {
        "question": "What about transactions with type code PUR?",
        "query": "SELECT date_of_transaction FROM transactions WHERE transaction_type_code = \"PUR\"",
        "schema": "CREATE TABLE Purchases (purchase_details TEXT, purchase_transaction_id NUMBER); CREATE TABLE Transactions (transaction_type_code TEXT, amount_of_transaction NUMBER, investor_id NUMBER, date_of_transaction TIME, share_count TEXT, transaction_id NUMBER); CREATE TABLE Ref_Transaction_Types (transaction_type_code TEXT); CREATE TABLE Investors (Investor_details TEXT, investor_id NUMBER); CREATE TABLE Sales (sales_transaction_id NUMBER);"
      }
    ],
    [
      {
        "question": "Can you show the dates of transactions with at least 100 share count?",
        "query": "SELECT date_of_transaction FROM transactions WHERE share_count > = 100",
        "schema": "CREATE TABLE Transactions (transaction_id NUMBER, share_count TEXT, amount_of_transaction NUMBER, date_of_transaction TIME);"
      },
      {
        "question": "Hmm, I want to know the dates of transactions with amount bigger than 100 please.",
        "query": "SELECT date_of_transaction FROM transactions WHERE amount_of_transaction > 100",
        "schema": "CREATE TABLE Transactions (transaction_id NUMBER, date_of_transaction TIME, share_count TEXT, amount_of_transaction NUMBER);"
      },
      {
        "question": "Can you list the dates of transactions for all of them?",
        "query": "SELECT date_of_transaction FROM transactions WHERE share_count > = 100 OR amount_of_transaction > 100",
        "schema": "CREATE TABLE Transactions (share_count TEXT, date_of_transaction TIME, transaction_id NUMBER, amount_of_transaction NUMBER);"
      }
    ],
    [
      {
        "question": "What is the maximum share count of all of the different transaction type codes?",
        "query": "SELECT transaction_type_code , MAX ( share_count ) FROM transactions GROUP BY transaction_type_code",
        "schema": "CREATE TABLE Ref_Transaction_Types (transaction_type_code TEXT, transaction_type_description TEXT); CREATE TABLE Transactions (share_count TEXT, transaction_type_code TEXT, transaction_id NUMBER, amount_of_transaction NUMBER);"
      },
      {
        "question": "What is the minimum share count of the transaction type code PUR?",
        "query": "SELECT share_count FROM transactions WHERE transaction_type_code = 'PUR' AND share_count ! = \"\" ORDER BY share_count LIMIT 1",
        "schema": "CREATE TABLE Transactions (amount_of_transaction NUMBER, transaction_type_code TEXT, transaction_id NUMBER, share_count TEXT); CREATE TABLE Ref_Transaction_Types (transaction_type_description TEXT, transaction_type_code TEXT);"
      },
      {
        "question": "What is the share count of transaction id 2?",
        "query": "SELECT share_count FROM transactions WHERE transaction_id = 2",
        "schema": "CREATE TABLE Transactions (transaction_id NUMBER, share_count TEXT, amount_of_transaction NUMBER, transaction_type_code TEXT); CREATE TABLE Ref_Transaction_Types (transaction_type_description TEXT, transaction_type_code TEXT);"
      },
      {
        "question": "What is the lowest share count?",
        "query": "SELECT share_count FROM transactions WHERE share_count ! = \"\" ORDER BY share_count LIMIT 1",
        "schema": "CREATE TABLE Transactions (amount_of_transaction NUMBER, transaction_type_code TEXT, share_count TEXT, transaction_id NUMBER); CREATE TABLE Ref_Transaction_Types (transaction_type_code TEXT, transaction_type_description TEXT);"
      }
    ],
    [
      {
        "question": "Show details of all investors that made transactions with sgare greater than 100?",
        "query": "SELECT t1.investor_details FROM investors AS t1 JOIN transactions AS t2 ON t1.investor_id = t2.investor_id WHERE t2.share_count > 100",
        "schema": "CREATE TABLE Transactions (investor_id NUMBER, amount_of_transaction NUMBER, other_details TEXT, share_count TEXT, transaction_id NUMBER); CREATE TABLE Lots (investor_id NUMBER); CREATE TABLE Investors (investor_id NUMBER, Investor_details TEXT);"
      },
      {
        "question": "What is the transaction id of all investors that made transactions with sgare greater than 100?",
        "query": "SELECT t2.transaction_id FROM investors AS t1 JOIN transactions AS t2 ON t1.investor_id = t2.investor_id WHERE t2.share_count > 100",
        "schema": "CREATE TABLE Lots (investor_id NUMBER); CREATE TABLE Investors (investor_id NUMBER, Investor_details TEXT); CREATE TABLE Transactions (amount_of_transaction NUMBER, other_details TEXT, share_count TEXT, investor_id NUMBER, transaction_id NUMBER); CREATE TABLE Transactions_Lots (transaction_id NUMBER);"
      },
      {
        "question": "What is the transaction type code of transaction id 2?",
        "query": "SELECT t2.transaction_type_code FROM investors AS t1 JOIN transactions AS t2 ON t1.investor_id = t2.investor_id WHERE t2.transaction_id = 2",
        "schema": "CREATE TABLE Lots (investor_id NUMBER); CREATE TABLE Investors (investor_id NUMBER, Investor_details TEXT); CREATE TABLE Ref_Transaction_Types (transaction_type_code TEXT); CREATE TABLE Transactions (share_count TEXT, transaction_type_code TEXT, investor_id NUMBER, transaction_id NUMBER, other_details TEXT, amount_of_transaction NUMBER); CREATE TABLE Transactions_Lots (transaction_id NUMBER);"
      }
    ],
    [
      {
        "question": "How many transactions share a count smaller than 50?",
        "query": "SELECT COUNT ( * ) FROM transactions WHERE share_count < 50",
        "schema": "CREATE TABLE Transactions_Lots (transaction_id NUMBER); CREATE TABLE Transactions (amount_of_transaction NUMBER, transaction_type_code TEXT, transaction_id NUMBER, share_count TEXT);"
      },
      {
        "question": "What lots are associate with those transactions with a count smaller than 50? | Do you mean all the information about lots or some specific attributes? | What are all of the details about the lots?",
        "query": "SELECT t1.lot_details FROM lots AS t1 JOIN transactions_lots AS t2 ON t1.lot_id = t2.transaction_id JOIN transactions AS t3 ON t2.transaction_id = t3.transaction_id WHERE t3.share_count < 50",
        "schema": "CREATE TABLE Transactions_Lots (transaction_id NUMBER, lot_id NUMBER); CREATE TABLE Lots (lot_details TEXT, lot_id NUMBER); CREATE TABLE Transactions (other_details TEXT, share_count TEXT, amount_of_transaction NUMBER, transaction_id NUMBER, transaction_type_code TEXT);"
      }
    ],
    [
      {
        "question": "How many transactions have the type code PUR?",
        "query": "SELECT COUNT ( * ) FROM transactions WHERE transaction_type_code = \"PUR\"",
        "schema": "CREATE TABLE Transactions (transaction_id NUMBER, transaction_type_code TEXT); CREATE TABLE Ref_Transaction_Types (transaction_type_code TEXT, transaction_type_description TEXT);"
      },
      {
        "question": "How many transactions have a share count larger than 50?",
        "query": "SELECT COUNT ( * ) FROM transactions WHERE share_count >50",
        "schema": "CREATE TABLE Transactions (share_count TEXT, transaction_type_code TEXT, amount_of_transaction NUMBER, transaction_id NUMBER); CREATE TABLE Ref_Transaction_Types (transaction_type_description TEXT, transaction_type_code TEXT);"
      },
      {
        "question": "What is the least amount of transactions that have both a type code of PUR and a share count larger than 50?",
        "query": "SELECT MIN ( amount_of_transaction ) FROM transactions WHERE transaction_type_code = \"PUR\" AND share_count > 50",
        "schema": "CREATE TABLE Ref_Transaction_Types (transaction_type_code TEXT, transaction_type_description TEXT); CREATE TABLE Transactions (transaction_id NUMBER, transaction_type_code TEXT, amount_of_transaction NUMBER, share_count TEXT);"
      },
      {
        "question": "How many transactions have the type code PUR and a share count larger than 50?",
        "query": "SELECT COUNT ( * ) FROM transactions WHERE transaction_type_code = \"PUR\" AND share_count > 50",
        "schema": "CREATE TABLE Ref_Transaction_Types (transaction_type_code TEXT, transaction_type_description TEXT); CREATE TABLE Transactions (amount_of_transaction NUMBER, share_count TEXT, transaction_id NUMBER, transaction_type_code TEXT);"
      }
    ],
    [
      {
        "question": "Would you show the transaction type descriptions if the share count is smaller than 10?",
        "query": "SELECT t1.transaction_type_description FROM ref_transaction_types AS t1 JOIN transactions AS t2 ON t1.transaction_type_code = t2.transaction_type_code WHERE t2.share_count < 10",
        "schema": "CREATE TABLE Ref_Transaction_Types (transaction_type_code TEXT, transaction_type_description TEXT); CREATE TABLE Transactions (transaction_id NUMBER, share_count TEXT, transaction_type_code TEXT);"
      },
      {
        "question": "What are the dates of those?",
        "query": "SELECT t2.date_of_transaction FROM ref_transaction_types AS t1 JOIN transactions AS t2 ON t1.transaction_type_code = t2.transaction_type_code WHERE t2.share_count < 10",
        "schema": "CREATE TABLE Ref_Transaction_Types (transaction_type_code TEXT, transaction_type_description TEXT); CREATE TABLE Transactions (share_count TEXT, transaction_id NUMBER, date_of_transaction TIME, transaction_type_code TEXT);"
      },
      {
        "question": "What were the amounts of those transactions?",
        "query": "SELECT t2.amount_of_transaction FROM ref_transaction_types AS t1 JOIN transactions AS t2 ON t1.transaction_type_code = t2.transaction_type_code WHERE t2.share_count < 10",
        "schema": "CREATE TABLE Transactions (transaction_id NUMBER, share_count TEXT, transaction_type_code TEXT, date_of_transaction TIME, amount_of_transaction NUMBER); CREATE TABLE Ref_Transaction_Types (transaction_type_code TEXT, transaction_type_description TEXT);"
      },
      {
        "question": "Would you show the transaction type descriptions if the share count is equal to or larger than 10?",
        "query": "SELECT t1.transaction_type_description FROM ref_transaction_types AS t1 JOIN transactions AS t2 ON t1.transaction_type_code = t2.transaction_type_code WHERE t2.share_count > = 10",
        "schema": "CREATE TABLE Ref_Transaction_Types (transaction_type_code TEXT, transaction_type_description TEXT); CREATE TABLE Transactions (transaction_type_code TEXT, transaction_id NUMBER, date_of_transaction TIME, amount_of_transaction NUMBER, share_count TEXT);"
      },
      {
        "question": "What were the dates of those transactions? | Do you mean the transactions with share count equal to or larger than 10? | Yes please, if you don't mind?",
        "query": "SELECT t2.date_of_transaction FROM ref_transaction_types AS t1 JOIN transactions AS t2 ON t1.transaction_type_code = t2.transaction_type_code WHERE t2.share_count > = 10",
        "schema": "CREATE TABLE Transactions (date_of_transaction TIME, transaction_id NUMBER, share_count TEXT, transaction_type_code TEXT, amount_of_transaction NUMBER); CREATE TABLE Ref_Transaction_Types (transaction_type_code TEXT, transaction_type_description TEXT);"
      }
    ],
    [
      {
        "question": "what are the sale?",
        "query": "SELECT * FROM transactions",
        "schema": "CREATE TABLE Purchases (purchase_details TEXT, purchase_transaction_id NUMBER); CREATE TABLE Sales (sales_transaction_id NUMBER, sales_details TEXT); CREATE TABLE Transactions (transaction_id NUMBER);"
      },
      {
        "question": "How many purchase in this above the table",
        "query": "SELECT COUNT ( * ) FROM transactions",
        "schema": "CREATE TABLE Transactions_Lots (lot_id NUMBER, transaction_id NUMBER); CREATE TABLE Sales (sales_transaction_id NUMBER, sales_details TEXT); CREATE TABLE Purchases (purchase_transaction_id NUMBER, purchase_details TEXT); CREATE TABLE Transactions (transaction_id NUMBER, amount_of_transaction NUMBER);"
      },
      {
        "question": "what is the purchase investor Id?",
        "query": "SELECT investor_id FROM transactions",
        "schema": "CREATE TABLE Transactions (investor_id NUMBER, transaction_id NUMBER, amount_of_transaction NUMBER); CREATE TABLE Purchases (purchase_transaction_id NUMBER, purchase_details TEXT); CREATE TABLE Sales (sales_transaction_id NUMBER, sales_details TEXT); CREATE TABLE Investors (investor_id NUMBER); CREATE TABLE Transactions_Lots (transaction_id NUMBER, lot_id NUMBER); CREATE TABLE Lots (investor_id NUMBER, lot_id NUMBER);"
      }
    ],
    [
      {
        "question": "What is the transaction type code that occurs most often?",
        "query": "SELECT transaction_type_code FROM transactions GROUP BY transaction_type_code ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Ref_Transaction_Types (transaction_type_description TEXT, transaction_type_code TEXT); CREATE TABLE Transactions (transaction_id NUMBER, transaction_type_code TEXT);"
      },
      {
        "question": "What is the transaction type code that occurs least often?",
        "query": "SELECT transaction_type_code FROM transactions GROUP BY transaction_type_code ORDER BY COUNT ( * ) LIMIT 1",
        "schema": "CREATE TABLE Ref_Transaction_Types (transaction_type_code TEXT, transaction_type_description TEXT); CREATE TABLE Transactions (transaction_type_code TEXT, transaction_id NUMBER);"
      },
      {
        "question": "What is the average of all transactions? | The average of all transactions is 11198167.237771427 | What is the average of all transactions with the transaction type code \"PUR\"?",
        "query": "SELECT AVG ( amount_of_transaction ) FROM transactions WHERE transaction_type_code = \"PUR\"",
        "schema": "CREATE TABLE Transactions (transaction_type_code TEXT, amount_of_transaction NUMBER, transaction_id NUMBER); CREATE TABLE Ref_Transaction_Types (transaction_type_code TEXT, transaction_type_description TEXT);"
      },
      {
        "question": "What is the average of all transactions with the transaction type code \"SALE\"?",
        "query": "SELECT AVG ( amount_of_transaction ) FROM transactions WHERE transaction_type_code = \"SALE\"",
        "schema": "CREATE TABLE Sales (sales_transaction_id NUMBER); CREATE TABLE Purchases (purchase_transaction_id NUMBER); CREATE TABLE Ref_Transaction_Types (transaction_type_code TEXT, transaction_type_description TEXT); CREATE TABLE Transactions (amount_of_transaction NUMBER, transaction_type_code TEXT, transaction_id NUMBER);"
      }
    ],
    [
      {
        "question": "what is the transaction type code for the investor with id 18",
        "query": "SELECT transaction_type_code FROM transactions WHERE investor_id = 18",
        "schema": "CREATE TABLE Lots (investor_id NUMBER); CREATE TABLE Transactions (transaction_id NUMBER, transaction_type_code TEXT, investor_id NUMBER); CREATE TABLE Investors (Investor_details TEXT, investor_id NUMBER); CREATE TABLE Ref_Transaction_Types (transaction_type_code TEXT);"
      },
      {
        "question": "How much is the amount of transaction for transaction with id 3",
        "query": "SELECT amount_of_transaction FROM transactions WHERE transaction_id = 3",
        "schema": "CREATE TABLE Lots (investor_id NUMBER); CREATE TABLE Investors (investor_id NUMBER, Investor_details TEXT); CREATE TABLE Ref_Transaction_Types (transaction_type_code TEXT); CREATE TABLE Transactions (transaction_type_code TEXT, transaction_id NUMBER, investor_id NUMBER, amount_of_transaction NUMBER);"
      }
    ],
    [
      {
        "question": "Show the date of transaction where share count is larger than 100",
        "query": "SELECT date_of_transaction FROM transactions WHERE share_count > 100",
        "schema": "CREATE TABLE Transactions (amount_of_transaction NUMBER, transaction_id NUMBER, share_count TEXT, date_of_transaction TIME);"
      },
      {
        "question": "What are the transaction IDs of those results?",
        "query": "SELECT transaction_id FROM transactions WHERE share_count > 100",
        "schema": "CREATE TABLE Transactions (date_of_transaction TIME, amount_of_transaction NUMBER, transaction_id NUMBER, share_count TEXT);"
      },
      {
        "question": "Show date of transaction where amount of transaction larger than 1000",
        "query": "SELECT date_of_transaction FROM transactions WHERE amount_of_transaction > 1000",
        "schema": "CREATE TABLE Transactions (amount_of_transaction NUMBER, transaction_id NUMBER, date_of_transaction TIME, share_count TEXT);"
      }
    ],
    [
      {
        "question": "Could you show me the IDs for the investors who have the top 3 number of transactions?",
        "query": "SELECT t2.investor_id FROM investors AS t1 JOIN transactions AS t2 ON t1.investor_id = t2.investor_id GROUP BY t2.investor_id ORDER BY COUNT ( * ) DESC LIMIT 3",
        "schema": "CREATE TABLE Investors (investor_id NUMBER, Investor_details TEXT); CREATE TABLE Lots (investor_id NUMBER); CREATE TABLE Transactions (transaction_id NUMBER, amount_of_transaction NUMBER, investor_id NUMBER);"
      },
      {
        "question": "Could you add in the investor details to the table please?",
        "query": "SELECT t2.investor_id , t1.investor_details FROM investors AS t1 JOIN transactions AS t2 ON t1.investor_id = t2.investor_id GROUP BY t2.investor_id ORDER BY COUNT ( * ) DESC LIMIT 3",
        "schema": "CREATE TABLE Transactions (investor_id NUMBER, transaction_id NUMBER, amount_of_transaction NUMBER); CREATE TABLE Lots (investor_id NUMBER); CREATE TABLE Investors (investor_id NUMBER, Investor_details TEXT);"
      },
      {
        "question": "Could you show me the IDs for the investors who have the bottom 3 number of transactions?",
        "query": "SELECT t2.investor_id FROM investors AS t1 JOIN transactions AS t2 ON t1.investor_id = t2.investor_id GROUP BY t2.investor_id ORDER BY COUNT ( * ) ASC LIMIT 3",
        "schema": "CREATE TABLE Lots (investor_id NUMBER); CREATE TABLE Investors (Investor_details TEXT, investor_id NUMBER); CREATE TABLE Transactions (amount_of_transaction NUMBER, investor_id NUMBER, transaction_id NUMBER);"
      },
      {
        "question": "What are the investor ID and details for the investor who had the earliest transaction date?",
        "query": "SELECT t2.investor_id , t1.investor_details FROM investors AS t1 JOIN transactions AS t2 ON t1.investor_id = t2.investor_id GROUP BY t2.investor_id ORDER BY t2.date_of_transaction ASC LIMIT 1",
        "schema": "CREATE TABLE Investors (Investor_details TEXT, investor_id NUMBER); CREATE TABLE Transactions (transaction_id NUMBER, investor_id NUMBER, amount_of_transaction NUMBER, date_of_transaction TIME); CREATE TABLE Lots (investor_id NUMBER);"
      }
    ],
    [
      {
        "question": "How many investors are there?",
        "query": "SELECT COUNT ( * ) FROM investors",
        "schema": "CREATE TABLE Transactions (investor_id NUMBER, transaction_id NUMBER); CREATE TABLE Investors (Investor_details TEXT, investor_id NUMBER); CREATE TABLE Lots (investor_id NUMBER);"
      },
      {
        "question": "How many investors have at least two transactions?",
        "query": "SELECT COUNT ( * ) FROM ( SELECT t2.investor_id FROM investors AS t1 JOIN transactions AS t2 ON t1.investor_id = t2.investor_id GROUP BY t2.investor_id HAVING COUNT ( * ) > = 2 )",
        "schema": "CREATE TABLE Transactions (investor_id NUMBER, transaction_id NUMBER); CREATE TABLE Lots (investor_id NUMBER); CREATE TABLE Investors (investor_id NUMBER, Investor_details TEXT);"
      },
      {
        "question": "Show me their Ids.",
        "query": "SELECT t2.investor_id FROM investors AS t1 JOIN transactions AS t2 ON t1.investor_id = t2.investor_id GROUP BY t2.investor_id HAVING COUNT ( * ) > = 2",
        "schema": "CREATE TABLE Lots (investor_id NUMBER); CREATE TABLE Investors (Investor_details TEXT, investor_id NUMBER); CREATE TABLE Transactions (investor_id NUMBER, transaction_id NUMBER);"
      }
    ],
    [
      {
        "question": "hi! How many transactions have greater than 10 share count?",
        "query": "SELECT COUNT ( * ) FROM transactions WHERE share_count > 10",
        "schema": "CREATE TABLE Investors (investor_id NUMBER); CREATE TABLE Transactions_Lots (transaction_id NUMBER); CREATE TABLE Transactions (share_count TEXT, transaction_id NUMBER, amount_of_transaction NUMBER, transaction_type_code TEXT, investor_id NUMBER);"
      },
      {
        "question": "What are their transaction type descriptions?",
        "query": "SELECT t1.transaction_type_description FROM ref_transaction_types AS t1 JOIN transactions AS t2 ON t1.transaction_type_code = t2.transaction_type_code WHERE t2.share_count < 10",
        "schema": "CREATE TABLE Transactions (transaction_id NUMBER, share_count TEXT, transaction_type_code TEXT, investor_id NUMBER, amount_of_transaction NUMBER); CREATE TABLE Transactions_Lots (transaction_id NUMBER); CREATE TABLE Investors (investor_id NUMBER); CREATE TABLE Ref_Transaction_Types (transaction_type_description TEXT, transaction_type_code TEXT);"
      },
      {
        "question": "What about their date?",
        "query": "SELECT t2.date_of_transaction FROM ref_transaction_types AS t1 JOIN transactions AS t2 ON t1.transaction_type_code = t2.transaction_type_code WHERE t2.share_count < 10",
        "schema": "CREATE TABLE Transactions_Lots (transaction_id NUMBER); CREATE TABLE Transactions (date_of_transaction TIME, transaction_id NUMBER, share_count TEXT, investor_id NUMBER, transaction_type_code TEXT, amount_of_transaction NUMBER); CREATE TABLE Ref_Transaction_Types (transaction_type_code TEXT, transaction_type_description TEXT); CREATE TABLE Investors (investor_id NUMBER);"
      }
    ],
    [
      {
        "question": "What are the lot details of lots associated with transactions whose share count is bigger than 100 and whose type code is \"PUR\"?",
        "query": "SELECT t1.lot_details FROM lots AS t1 JOIN transactions_lots AS t2 ON t1.lot_id = t2.transaction_id JOIN transactions AS t3 ON t2.transaction_id = t3.transaction_id WHERE t3.share_count > 100 AND t3.transaction_type_code = \"PUR\"",
        "schema": "CREATE TABLE Transactions_Lots (lot_id NUMBER, transaction_id NUMBER); CREATE TABLE Purchases (purchase_transaction_id NUMBER); CREATE TABLE Transactions (share_count TEXT, transaction_id NUMBER, transaction_type_code TEXT, amount_of_transaction NUMBER); CREATE TABLE Lots (lot_id NUMBER, lot_details TEXT); CREATE TABLE Ref_Transaction_Types (transaction_type_code TEXT);"
      },
      {
        "question": "Which has the highest amount of transaction?",
        "query": "SELECT t1.lot_details FROM lots AS t1 JOIN transactions_lots AS t2 ON t1.lot_id = t2.transaction_id JOIN transactions AS t3 ON t2.transaction_id = t3.transaction_id WHERE t3.share_count > 100 AND t3.transaction_type_code = \"PUR\" ORDER BY t3.amount_of_transaction DESC LIMIT 1",
        "schema": "CREATE TABLE Transactions (amount_of_transaction NUMBER, transaction_type_code TEXT, share_count TEXT, transaction_id NUMBER); CREATE TABLE Transactions_Lots (lot_id NUMBER, transaction_id NUMBER); CREATE TABLE Lots (lot_id NUMBER, lot_details TEXT); CREATE TABLE Ref_Transaction_Types (transaction_type_code TEXT); CREATE TABLE Purchases (purchase_transaction_id NUMBER);"
      },
      {
        "question": "what was the date of that transaction?",
        "query": "SELECT t3.date_of_transaction FROM lots AS t1 JOIN transactions_lots AS t2 ON t1.lot_id = t2.transaction_id JOIN transactions AS t3 ON t2.transaction_id = t3.transaction_id WHERE t3.share_count > 100 AND t3.transaction_type_code = \"PUR\" ORDER BY t3.amount_of_transaction DESC LIMIT 1",
        "schema": "CREATE TABLE Lots (lot_id NUMBER, lot_details TEXT); CREATE TABLE Transactions (amount_of_transaction NUMBER, transaction_id NUMBER, transaction_type_code TEXT, share_count TEXT, date_of_transaction TIME); CREATE TABLE Ref_Transaction_Types (transaction_type_code TEXT); CREATE TABLE Purchases (purchase_transaction_id NUMBER); CREATE TABLE Transactions_Lots (transaction_id NUMBER, lot_id NUMBER);"
      },
      {
        "question": "What  transaction type code did that have?",
        "query": "SELECT t3.transaction_type_code FROM lots AS t1 JOIN transactions_lots AS t2 ON t1.lot_id = t2.transaction_id JOIN transactions AS t3 ON t2.transaction_id = t3.transaction_id WHERE t3.share_count > 100 AND t3.transaction_type_code = \"PUR\" ORDER BY t3.amount_of_transaction DESC LIMIT 1",
        "schema": "CREATE TABLE Lots (lot_details TEXT, lot_id NUMBER); CREATE TABLE Ref_Transaction_Types (transaction_type_code TEXT); CREATE TABLE Purchases (purchase_transaction_id NUMBER); CREATE TABLE Transactions (transaction_id NUMBER, date_of_transaction TIME, share_count TEXT, transaction_type_code TEXT, amount_of_transaction NUMBER); CREATE TABLE Transactions_Lots (lot_id NUMBER, transaction_id NUMBER);"
      }
    ],
    [
      {
        "question": "Can you show me a list of all of the lots that belong to category 'i' within the 'lot details' column?",
        "query": "SELECT * FROM lots WHERE lot_details = \"i\"",
        "schema": "CREATE TABLE Transactions_Lots (lot_id NUMBER); CREATE TABLE Lots (lot_id NUMBER, lot_details TEXT);"
      },
      {
        "question": "My apologies!  I mean ask for \"l\" or lower-case L...  Therefore, can you list the lots that belong to category \"l\" in the 'lot details' column?",
        "query": "SELECT * FROM lots WHERE lot_details = \"l\"",
        "schema": "CREATE TABLE Lots (lot_id NUMBER, lot_details TEXT); CREATE TABLE Transactions_Lots (lot_id NUMBER);"
      },
      {
        "question": "Oh sorry!  I am all mixed up!  Third time's a charm!  Can you provide me with the lot details for all lots that belong to investors which belong to the 'investor id' category of \"l\"?",
        "query": "SELECT t2.lot_details FROM investors AS t1 JOIN lots AS t2 ON t1.investor_id = t2.investor_id WHERE t1.investor_details = \"l\"",
        "schema": "CREATE TABLE Transactions_Lots (lot_id NUMBER); CREATE TABLE Investors (Investor_details TEXT, investor_id NUMBER); CREATE TABLE Lots (lot_details TEXT, lot_id NUMBER, investor_id NUMBER);"
      },
      {
        "question": "Excellent! Can you list the investor IDs that correspond to each of these lot_details?",
        "query": "SELECT t1.investor_id, t2.lot_details FROM investors AS t1 JOIN lots AS t2 ON t1.investor_id = t2.investor_id WHERE t1.investor_details = \"l\"",
        "schema": "CREATE TABLE Transactions_Lots (lot_id NUMBER); CREATE TABLE Investors (Investor_details TEXT, investor_id NUMBER); CREATE TABLE Lots (lot_details TEXT, investor_id NUMBER, lot_id NUMBER);"
      }
    ],
    [
      {
        "question": "what is transactions type code? | Did you want all of the transactions type code? | yes",
        "query": "SELECT DISTINCT transaction_type_code FROM transactions",
        "schema": "CREATE TABLE Ref_Transaction_Types (transaction_type_code TEXT, transaction_type_description TEXT); CREATE TABLE Transactions (transaction_id NUMBER, transaction_type_code TEXT);"
      },
      {
        "question": "what is the share count?",
        "query": "SELECT DISTINCT share_count FROM transactions",
        "schema": "CREATE TABLE Transactions (transaction_id NUMBER, share_count TEXT, transaction_type_code TEXT); CREATE TABLE Ref_Transaction_Types (transaction_type_code TEXT, transaction_type_description TEXT);"
      }
    ],
    [
      {
        "question": "What is the overall average amount of transactions?",
        "query": "SELECT AVG ( amount_of_transaction ) FROM transactions",
        "schema": "CREATE TABLE Transactions (amount_of_transaction NUMBER, transaction_type_code TEXT, transaction_id NUMBER, share_count TEXT); CREATE TABLE Transactions_Lots (transaction_id NUMBER);"
      },
      {
        "question": "How about average amount of transaction for different lots?",
        "query": "SELECT t2.lot_id , AVG ( amount_of_transaction ) FROM transactions AS t1 JOIN transactions_lots AS t2 ON t1.transaction_id = t2.transaction_id GROUP BY t2.lot_id",
        "schema": "CREATE TABLE Lots (lot_details TEXT, lot_id NUMBER); CREATE TABLE Transactions (amount_of_transaction NUMBER, share_count TEXT, transaction_id NUMBER, transaction_type_code TEXT); CREATE TABLE Transactions_Lots (transaction_id NUMBER, lot_id NUMBER);"
      },
      {
        "question": "Which lot has the highest average transaction amount?",
        "query": "SELECT t2.lot_id , AVG ( amount_of_transaction ) FROM transactions AS t1 JOIN transactions_lots AS t2 ON t1.transaction_id = t2.transaction_id GROUP BY t2.lot_id ORDER BY AVG ( amount_of_transaction ) DESC LIMIT 1",
        "schema": "CREATE TABLE Transactions (transaction_type_code TEXT, amount_of_transaction NUMBER, transaction_id NUMBER, share_count TEXT); CREATE TABLE Lots (lot_id NUMBER, lot_details TEXT); CREATE TABLE Transactions_Lots (transaction_id NUMBER, lot_id NUMBER);"
      },
      {
        "question": "What about the lowest average?",
        "query": "SELECT t2.lot_id , AVG ( amount_of_transaction ) FROM transactions AS t1 JOIN transactions_lots AS t2 ON t1.transaction_id = t2.transaction_id GROUP BY t2.lot_id ORDER BY AVG ( amount_of_transaction ) LIMIT 1",
        "schema": "CREATE TABLE Lots (lot_details TEXT, lot_id NUMBER); CREATE TABLE Transactions_Lots (lot_id NUMBER, transaction_id NUMBER); CREATE TABLE Transactions (transaction_type_code TEXT, share_count TEXT, transaction_id NUMBER, amount_of_transaction NUMBER);"
      }
    ],
    [
      {
        "question": "list all the sales details",
        "query": "SELECT sales_details FROM sales",
        "schema": "CREATE TABLE Purchases (purchase_details TEXT, purchase_transaction_id NUMBER); CREATE TABLE Transactions (transaction_id NUMBER); CREATE TABLE Sales (sales_transaction_id NUMBER, sales_details TEXT);"
      },
      {
        "question": "list the details of the purchases",
        "query": "SELECT purchase_details FROM purchases",
        "schema": "CREATE TABLE Transactions (other_details TEXT, transaction_id NUMBER); CREATE TABLE Purchases (purchase_details TEXT, purchase_transaction_id NUMBER); CREATE TABLE Sales (sales_transaction_id NUMBER, sales_details TEXT);"
      },
      {
        "question": "prepare a table with both the sales and purchase details",
        "query": "SELECT sales_details FROM sales UNION SELECT purchase_details FROM purchases",
        "schema": "CREATE TABLE Purchases (purchase_details TEXT, purchase_transaction_id NUMBER); CREATE TABLE Transactions (transaction_id NUMBER, other_details TEXT); CREATE TABLE Sales (sales_details TEXT, sales_transaction_id NUMBER);"
      },
      {
        "question": "include sales and purchase id in the list",
        "query": "SELECT sales_transaction_id, sales_details FROM sales UNION SELECT purchase_transaction_id, purchase_details FROM purchases",
        "schema": "CREATE TABLE Transactions (transaction_id NUMBER, other_details TEXT); CREATE TABLE Sales (sales_transaction_id NUMBER, sales_details TEXT); CREATE TABLE Transactions_Lots (transaction_id NUMBER); CREATE TABLE Purchases (purchase_details TEXT, purchase_transaction_id NUMBER);"
      }
    ],
    [
      {
        "question": "what are the details of the lots which are not used in any transactions?",
        "query": "SELECT lot_details FROM lots EXCEPT SELECT t1.lot_details FROM lots AS t1 JOIN transactions_lots AS t2 ON t1.lot_id = t2.lot_id",
        "schema": "CREATE TABLE Transactions (transaction_id NUMBER, transaction_type_code TEXT, other_details TEXT); CREATE TABLE Lots (lot_details TEXT, lot_id NUMBER); CREATE TABLE Transactions_Lots (transaction_id NUMBER, lot_id NUMBER);"
      },
      {
        "question": "what is the transaction id of lot id 11",
        "query": "SELECT transaction_id FROM transactions_lots WHERE lot_id = 11",
        "schema": "CREATE TABLE Lots (lot_id NUMBER, lot_details TEXT); CREATE TABLE Transactions (other_details TEXT, transaction_type_code TEXT, transaction_id NUMBER); CREATE TABLE Transactions_Lots (transaction_id NUMBER, lot_id NUMBER);"
      },
      {
        "question": "what is the investor id of  transaction id 3?",
        "query": "SELECT t1.investor_id FROM lots AS t1 JOIN transactions_lots AS t2 ON t1.lot_id = t2.lot_id WHERE t2.transaction_id = 3",
        "schema": "CREATE TABLE Transactions_Lots (lot_id NUMBER, transaction_id NUMBER); CREATE TABLE Lots (investor_id NUMBER, lot_id NUMBER, lot_details TEXT); CREATE TABLE Transactions (investor_id NUMBER, transaction_id NUMBER, transaction_type_code TEXT, other_details TEXT); CREATE TABLE Investors (Investor_details TEXT, investor_id NUMBER);"
      }
    ],
    [
      {
        "question": "can you show me a list of transaction type code?",
        "query": "SELECT transaction_type_code FROM transactions",
        "schema": "CREATE TABLE Ref_Transaction_Types (transaction_type_code TEXT, transaction_type_description TEXT); CREATE TABLE Transactions (transaction_id NUMBER, transaction_type_code TEXT);"
      },
      {
        "question": "what is the average of amount of transaction?",
        "query": "SELECT AVG ( amount_of_transaction ) FROM transactions",
        "schema": "CREATE TABLE Transactions (transaction_id NUMBER, amount_of_transaction NUMBER, transaction_type_code TEXT); CREATE TABLE Ref_Transaction_Types (transaction_type_description TEXT, transaction_type_code TEXT);"
      },
      {
        "question": "can you show me a list of share count?",
        "query": "SELECT share_count FROM transactions",
        "schema": "CREATE TABLE Transactions (share_count TEXT, transaction_id NUMBER, transaction_type_code TEXT, amount_of_transaction NUMBER); CREATE TABLE Ref_Transaction_Types (transaction_type_code TEXT, transaction_type_description TEXT);"
      },
      {
        "question": "show the transaction type code that occurs the fewest times.",
        "query": "SELECT transaction_type_code FROM transactions GROUP BY transaction_type_code ORDER BY COUNT ( * ) ASC LIMIT 1",
        "schema": "CREATE TABLE Transactions (amount_of_transaction NUMBER, transaction_id NUMBER, transaction_type_code TEXT, share_count TEXT); CREATE TABLE Ref_Transaction_Types (transaction_type_description TEXT, transaction_type_code TEXT);"
      }
    ],
    [
      {
        "question": "Can you list the share counts for all transactions?",
        "query": "SELECT share_count FROM transactions",
        "schema": "CREATE TABLE Transactions (amount_of_transaction NUMBER, transaction_id NUMBER, investor_id NUMBER, share_count TEXT);"
      },
      {
        "question": "Can you add to the table the amount of transaction associated with each share count?",
        "query": "SELECT share_count, amount_of_transaction FROM transactions",
        "schema": "CREATE TABLE Transactions (share_count TEXT, investor_id NUMBER, amount_of_transaction NUMBER, transaction_id NUMBER);"
      },
      {
        "question": "Can you filter the table to only include transactions with share counts that are at least 100, or with amounts bigger than 100?",
        "query": "SELECT share_count, amount_of_transaction FROM transactions WHERE share_count > = 100 OR amount_of_transaction > = 100",
        "schema": "CREATE TABLE Transactions (amount_of_transaction NUMBER, share_count TEXT, transaction_id NUMBER, investor_id NUMBER);"
      },
      {
        "question": "Can you add to the table the dates of those transactions?",
        "query": "SELECT date_of_transaction,share_count, amount_of_transaction FROM transactions WHERE share_count > = 100 OR amount_of_transaction > = 100",
        "schema": "CREATE TABLE Transactions (investor_id NUMBER, amount_of_transaction NUMBER, share_count TEXT, date_of_transaction TIME, transaction_id NUMBER);"
      },
      {
        "question": "Can you filter the table to only include the dates?",
        "query": "SELECT date_of_transaction FROM transactions WHERE share_count > = 100 OR amount_of_transaction > = 100",
        "schema": "CREATE TABLE Transactions (amount_of_transaction NUMBER, transaction_id NUMBER, share_count TEXT, investor_id NUMBER, date_of_transaction TIME);"
      }
    ],
    [
      {
        "question": "What are the lot details associated with these lot ids?",
        "query": "SELECT t1.lot_id, t1.lot_details FROM lots AS t1 JOIN transactions_lots AS t2 ON t1.lot_id = t2.transaction_id JOIN transactions AS t3 ON t2.transaction_id = t3.transaction_id WHERE t3.share_count < 50",
        "schema": "CREATE TABLE Transactions_Lots (transaction_id NUMBER, lot_id NUMBER); CREATE TABLE Lots (lot_details TEXT, lot_id NUMBER); CREATE TABLE Transactions (share_count TEXT, other_details TEXT, transaction_id NUMBER);"
      },
      {
        "question": "How many lots have share count smaller than 50?",
        "query": "SELECT COUNT ( t1.lot_id ) FROM lots AS t1 JOIN transactions_lots AS t2 ON t1.lot_id = t2.transaction_id JOIN transactions AS t3 ON t2.transaction_id = t3.transaction_id WHERE t3.share_count < 50",
        "schema": "CREATE TABLE Transactions (transaction_id NUMBER, other_details TEXT, share_count TEXT); CREATE TABLE Lots (lot_id NUMBER, lot_details TEXT); CREATE TABLE Sales (sales_transaction_id NUMBER); CREATE TABLE Transactions_Lots (lot_id NUMBER, transaction_id NUMBER);"
      }
    ],
    [
      {
        "question": "What are the dates of transactions with amount smaller than 3000?",
        "query": "SELECT t2.date_of_transaction FROM sales AS t1 JOIN transactions AS t2 ON t1.sales_transaction_id = t2.transaction_id WHERE t2.amount_of_transaction < 3000",
        "schema": "CREATE TABLE Sales (sales_transaction_id NUMBER); CREATE TABLE Transactions (date_of_transaction TIME, amount_of_transaction NUMBER, transaction_id NUMBER);"
      },
      {
        "question": "What are the transaction ids of those? | Here is the table of the transaction ids of transcation with an amount smaller than 3000. For example, they are  2, 4 , 5 | What are the transaction type codes of those?",
        "query": "SELECT t2.transaction_type_code FROM sales AS t1 JOIN transactions AS t2 ON t1.sales_transaction_id = t2.transaction_id WHERE t2.amount_of_transaction < 3000",
        "schema": "CREATE TABLE Sales (sales_transaction_id NUMBER); CREATE TABLE Ref_Transaction_Types (transaction_type_code TEXT); CREATE TABLE Transactions (date_of_transaction TIME, transaction_type_code TEXT, transaction_id NUMBER, amount_of_transaction NUMBER);"
      }
    ]
  ],
  "election": [
    [
      {
        "question": "Who are the delegates on the Appropriations committee?",
        "query": "SELECT delegate FROM election WHERE committee = 'Appropriations'",
        "schema": "CREATE TABLE election (Election_ID NUMBER, Committee TEXT, Delegate TEXT);"
      },
      {
        "question": "What counties are they from?",
        "query": "SELECT t1.county_name FROM county AS t1 JOIN election AS t2 WHERE t1.county_id = district AND t2.committee = 'Appropriations'",
        "schema": "CREATE TABLE county (County_Id NUMBER, County_name TEXT); CREATE TABLE election (Election_ID NUMBER, District NUMBER, Counties_Represented TEXT, Delegate TEXT, Committee TEXT);"
      },
      {
        "question": "What districts are they from?",
        "query": "SELECT district FROM election WHERE committee = 'Appropriations'",
        "schema": "CREATE TABLE county (County_name TEXT, County_Id NUMBER); CREATE TABLE election (District NUMBER, Election_ID NUMBER, Counties_Represented TEXT, Committee TEXT, Delegate TEXT);"
      },
      {
        "question": "What are the populations of the counties they come from, please?",
        "query": "SELECT t1.population FROM county AS t1 JOIN election AS t2 WHERE t1.county_id = district AND t2.committee = 'Appropriations'",
        "schema": "CREATE TABLE election (District NUMBER, Committee TEXT, Election_ID NUMBER, Delegate TEXT, Counties_Represented TEXT); CREATE TABLE county (County_name TEXT, Population NUMBER, County_Id NUMBER);"
      }
    ],
    [
      {
        "question": "How many parties in this table?",
        "query": "SELECT COUNT ( DISTINCT party ) FROM party",
        "schema": "CREATE TABLE election (Party NUMBER); CREATE TABLE party (Party TEXT, Party_ID NUMBER);"
      },
      {
        "question": "Peter Vallone\tin which party?",
        "query": "SELECT party FROM party WHERE governor = \"Peter Vallone\"",
        "schema": "CREATE TABLE party (Party_ID NUMBER, Governor TEXT, Party TEXT); CREATE TABLE election (Party NUMBER);"
      },
      {
        "question": "How many elections in this table?",
        "query": "SELECT COUNT ( * ) FROM election",
        "schema": "CREATE TABLE election (Party NUMBER, Election_ID NUMBER); CREATE TABLE party (Governor TEXT, Party_ID NUMBER, Party TEXT);"
      },
      {
        "question": "Carl McCall in which party?",
        "query": "SELECT party FROM party WHERE governor = \"Carl McCall\"",
        "schema": "CREATE TABLE election (Election_ID NUMBER, Delegate TEXT, Party NUMBER, District NUMBER); CREATE TABLE party (Governor TEXT, Party TEXT, Party_ID NUMBER);"
      },
      {
        "question": "What are the names of parties that have both delegates on \"Appropriations\"?",
        "query": "SELECT t2.party FROM election AS t1 JOIN party AS t2 ON t1.party = t2.party_id WHERE t1.committee = \"Appropriations\" INTERSECT SELECT t2.party FROM election AS t1 JOIN party AS t2 ON t1.party = t2.party_id WHERE t1.committee = \"Economic Matters\"",
        "schema": "CREATE TABLE party (Governor TEXT, Party TEXT, Year NUMBER, Party_ID NUMBER); CREATE TABLE election (Delegate TEXT, Party NUMBER, Committee TEXT, Election_ID NUMBER, District NUMBER);"
      }
    ],
    [
      {
        "question": "Which delegates are from countries with population smaller than 100000?",
        "query": "SELECT t2.delegate FROM county AS t1 JOIN election AS t2 ON t1.county_id = t2.district WHERE t1.population < 100000",
        "schema": "CREATE TABLE election (Delegate TEXT, District NUMBER); CREATE TABLE county (County_name TEXT, Population NUMBER, County_Id NUMBER);"
      },
      {
        "question": "Can you give the name of the countries with population smaller than 100000?",
        "query": "SELECT county_name FROM county WHERE population < 100000",
        "schema": "CREATE TABLE election (District NUMBER, Delegate TEXT); CREATE TABLE county (Population NUMBER, County_Id NUMBER, County_name TEXT);"
      },
      {
        "question": "What is the number of counties with population greater than 100000?",
        "query": "SELECT COUNT ( county_name ) FROM county WHERE population > 100000",
        "schema": "CREATE TABLE county (Population NUMBER, County_Id NUMBER, County_name TEXT); CREATE TABLE election (District NUMBER, Delegate TEXT);"
      },
      {
        "question": "Can you give me the name of the counties with population between 50000 and 100000?",
        "query": "SELECT county_name FROM county WHERE population < 100000 AND population > 50000",
        "schema": "CREATE TABLE election (District NUMBER, Delegate TEXT); CREATE TABLE county (Population NUMBER, County_name TEXT, County_Id NUMBER);"
      },
      {
        "question": "What are the committee names for the counties with population smaller than 100000?",
        "query": "SELECT t2.committee FROM county AS t1 JOIN election AS t2 ON t1.county_id = t2.district WHERE t1.population < 100000",
        "schema": "CREATE TABLE election (Committee TEXT, District NUMBER, Delegate TEXT); CREATE TABLE county (Population NUMBER, County_name TEXT, County_Id NUMBER);"
      },
      {
        "question": "What are the committee names for the counties with population between 50000-100000?",
        "query": "SELECT t2.committee FROM county AS t1 JOIN election AS t2 ON t1.county_id = t2.district WHERE t1.population < 100000 AND t1.population > 50000",
        "schema": "CREATE TABLE election (Committee TEXT, District NUMBER, Delegate TEXT); CREATE TABLE county (County_Id NUMBER, County_name TEXT, Population NUMBER);"
      }
    ],
    [
      {
        "question": "How many parties are there?",
        "query": "SELECT COUNT ( * ) FROM party",
        "schema": "CREATE TABLE county (County_Id NUMBER); CREATE TABLE election (Committee TEXT, Party NUMBER); CREATE TABLE party (Comptroller TEXT, Party_ID NUMBER, Attorney_General TEXT, Party TEXT, Governor TEXT);"
      },
      {
        "question": "What are their names?",
        "query": "SELECT party FROM party",
        "schema": "CREATE TABLE party (Governor TEXT, Comptroller TEXT, Party TEXT, Party_ID NUMBER, Attorney_General TEXT); CREATE TABLE county (County_name TEXT, County_Id NUMBER); CREATE TABLE election (Committee TEXT, Party NUMBER);"
      },
      {
        "question": "Is there any party that has at least two records?",
        "query": "SELECT party FROM party GROUP BY party HAVING COUNT ( * ) > 1",
        "schema": "CREATE TABLE election (Party NUMBER, Committee TEXT); CREATE TABLE party (Attorney_General TEXT, Party_ID NUMBER, Governor TEXT, Comptroller TEXT, Party TEXT); CREATE TABLE county (County_name TEXT, County_Id NUMBER);"
      },
      {
        "question": "Yes, can you show me all the attorney generals from democratic party?",
        "query": "SELECT attorney_general FROM party WHERE party = 'Democratic'",
        "schema": "CREATE TABLE party (Party TEXT, Governor TEXT, Party_ID NUMBER, Comptroller TEXT, Attorney_General TEXT); CREATE TABLE election (Party NUMBER, Committee TEXT); CREATE TABLE county (County_name TEXT, County_Id NUMBER);"
      }
    ],
    [
      {
        "question": "How many parties have at least two records?",
        "query": "SELECT COUNT ( * ) FROM ( SELECT party FROM party GROUP BY party HAVING COUNT ( * ) > = 2 )",
        "schema": "CREATE TABLE election (Party NUMBER); CREATE TABLE party (Party TEXT, Party_ID NUMBER);"
      },
      {
        "question": "What are those parties?",
        "query": "SELECT party FROM party GROUP BY party HAVING COUNT ( * ) > = 2",
        "schema": "CREATE TABLE party (Party_ID NUMBER, Party TEXT); CREATE TABLE election (Party NUMBER);"
      },
      {
        "question": "Who are the comptroller of those individuals?",
        "query": "SELECT comptroller FROM party WHERE us_senate IN ( SELECT us_senate FROM party WHERE party IN ( SELECT party FROM party GROUP BY party HAVING COUNT ( * ) > = 2 ) )",
        "schema": "CREATE TABLE party (Comptroller TEXT, Party TEXT, Party_ID NUMBER, US_Senate TEXT); CREATE TABLE election (Party NUMBER);"
      }
    ],
    [
      {
        "question": "Which committees have delegates from the democratic party?",
        "query": "SELECT t1.committee FROM election AS t1 JOIN party AS t2 ON t1.party = t2.party_id WHERE t2.party = \"Democratic\"",
        "schema": "CREATE TABLE party (Party TEXT, Party_ID NUMBER); CREATE TABLE election (Committee TEXT, Party NUMBER, Delegate TEXT);"
      },
      {
        "question": "Which committees have delegates from the liberal party?",
        "query": "SELECT t1.committee FROM election AS t1 JOIN party AS t2 ON t1.party = t2.party_id WHERE t2.party = \"Liberal\"",
        "schema": "CREATE TABLE election (Party NUMBER, Committee TEXT, Delegate TEXT); CREATE TABLE party (Party_ID NUMBER, Party TEXT);"
      },
      {
        "question": "Which committees have delegates from both parties, please?",
        "query": "SELECT t1.committee FROM election AS t1 JOIN party AS t2 ON t1.party = t2.party_id WHERE t2.party = \"Democratic\" INTERSECT SELECT t1.committee FROM election AS t1 JOIN party AS t2 ON t1.party = t2.party_id WHERE t2.party = \"Liberal\"",
        "schema": "CREATE TABLE election (Committee TEXT, Party NUMBER, Delegate TEXT); CREATE TABLE party (Party_ID NUMBER, Party TEXT);"
      }
    ],
    [
      {
        "question": "What is the average population across the counties?",
        "query": "SELECT AVG ( population ) FROM county",
        "schema": "CREATE TABLE county (Population NUMBER, County_Id NUMBER, County_name TEXT); CREATE TABLE election (District NUMBER);"
      },
      {
        "question": "Which county's population is lowest?",
        "query": "SELECT county_name FROM county ORDER BY population ASC LIMIT 1",
        "schema": "CREATE TABLE election (District NUMBER); CREATE TABLE county (County_name TEXT, Population NUMBER, County_Id NUMBER);"
      },
      {
        "question": "What county has the highest population?",
        "query": "SELECT county_name FROM county ORDER BY population DESC LIMIT 1",
        "schema": "CREATE TABLE election (District NUMBER); CREATE TABLE county (Population NUMBER, County_Id NUMBER, County_name TEXT);"
      },
      {
        "question": "And what is its zip code?",
        "query": "SELECT zip_code FROM county ORDER BY population DESC LIMIT 1",
        "schema": "CREATE TABLE county (Population NUMBER, County_Id NUMBER, County_name TEXT, Zip_code TEXT); CREATE TABLE election (District NUMBER);"
      }
    ],
    [
      {
        "question": "Could you list the names of all counties in ascending alphabetical order?",
        "query": "SELECT county_name FROM county ORDER BY county_name",
        "schema": "CREATE TABLE election (District NUMBER); CREATE TABLE county (County_Id NUMBER, County_name TEXT);"
      },
      {
        "question": "How many delegates do each of these counties have?",
        "query": "SELECT t1.county_name,COUNT ( * ) FROM county AS t1 JOIN election AS t2 ON t1.county_id = t2.district GROUP BY t1.county_id",
        "schema": "CREATE TABLE election (District NUMBER, Delegate TEXT); CREATE TABLE county (County_Id NUMBER, County_name TEXT);"
      },
      {
        "question": "Could you only show the counties that have at least two delegates?",
        "query": "SELECT t1.county_name FROM county AS t1 JOIN election AS t2 ON t1.county_id = t2.district GROUP BY t1.county_id HAVING COUNT ( * ) > = 2",
        "schema": "CREATE TABLE election (District NUMBER, Delegate TEXT); CREATE TABLE county (County_Id NUMBER, County_name TEXT);"
      }
    ],
    [
      {
        "question": "What is the zip code of county id of 2",
        "query": "SELECT zip_code FROM county WHERE county_id = 2",
        "schema": "CREATE TABLE county (Zip_code TEXT, County_name TEXT, County_Id NUMBER);"
      },
      {
        "question": "how much population of zip code D21?",
        "query": "SELECT population FROM county WHERE zip_code = \"D21\"",
        "schema": "CREATE TABLE county (Zip_code TEXT, County_name TEXT, Population NUMBER, County_Id NUMBER);"
      },
      {
        "question": "what is the county name zip code D02?",
        "query": "SELECT county_name FROM county WHERE zip_code = \"D02\"",
        "schema": "CREATE TABLE county (Population NUMBER, Zip_code TEXT, County_name TEXT, County_Id NUMBER);"
      },
      {
        "question": "what is election id of district 2?",
        "query": "SELECT election_id FROM election WHERE district = 2",
        "schema": "CREATE TABLE election (District NUMBER, Election_ID NUMBER); CREATE TABLE county (Population NUMBER, Zip_code TEXT, County_Id NUMBER, County_name TEXT);"
      },
      {
        "question": "how many distinct delegates are from counties with population larger than 50000",
        "query": "SELECT COUNT ( DISTINCT t2.delegate ) FROM county AS t1 JOIN election AS t2 ON t1.county_id = t2.district WHERE t1.population > 50000",
        "schema": "CREATE TABLE county (County_name TEXT, Population NUMBER, Zip_code TEXT, County_Id NUMBER); CREATE TABLE election (Election_ID NUMBER, Delegate TEXT, District NUMBER);"
      }
    ],
    [
      {
        "question": "how many zip codes in the county table",
        "query": "SELECT COUNT ( zip_code ) FROM county",
        "schema": "CREATE TABLE county (Zip_code TEXT, County_Id NUMBER, County_name TEXT);"
      },
      {
        "question": "how many county id in the county table",
        "query": "SELECT COUNT ( county_id ) FROM county",
        "schema": "CREATE TABLE county (County_Id NUMBER, County_name TEXT, Zip_code TEXT);"
      }
    ],
    [
      {
        "question": "Return all the committees that have delegates from Democratic Party.",
        "query": "SELECT t1.committee FROM election AS t1 JOIN party AS t2 ON t1.party = t2.party_id WHERE t2.party = \"Democratic\"",
        "schema": "CREATE TABLE party (Party_ID NUMBER, Party TEXT); CREATE TABLE election (Committee TEXT, Party NUMBER, Delegate TEXT);"
      },
      {
        "question": "Hmm. Please return all the committees that have delegates from Liberal party.",
        "query": "SELECT t1.committee FROM election AS t1 JOIN party AS t2 ON t1.party = t2.party_id WHERE t2.party = \"Liberal\"",
        "schema": "CREATE TABLE party (Party_ID NUMBER, Party TEXT); CREATE TABLE election (Delegate TEXT, Party NUMBER, Committee TEXT);"
      },
      {
        "question": "Please give me all the delegates's names from Liberal party in Appropriations committee",
        "query": "SELECT t1.delegate FROM election AS t1 JOIN party AS t2 ON t1.party = t2.party_id WHERE t2.party = \"Liberal\" AND t1.committee = \"Appropriations\"",
        "schema": "CREATE TABLE party (Party TEXT, Party_ID NUMBER); CREATE TABLE election (Committee TEXT, Party NUMBER, Delegate TEXT);"
      },
      {
        "question": "Can you also give me all the delegate's name from Liberal party in Economic Matters committee.",
        "query": "SELECT t1.delegate FROM election AS t1 JOIN party AS t2 ON t1.party = t2.party_id WHERE t2.party = \"Liberal\" AND t1.committee = \"Economic Matters\"",
        "schema": "CREATE TABLE election (Committee TEXT, Party NUMBER, Delegate TEXT); CREATE TABLE party (Party TEXT, Party_ID NUMBER);"
      },
      {
        "question": "Can you please give the delegates name from Democratic Party in economic matters committee?",
        "query": "SELECT t1.delegate FROM election AS t1 JOIN party AS t2 ON t1.party = t2.party_id WHERE t2.party = \"Democratic\" AND t1.committee = \"Economic Matters\"",
        "schema": "CREATE TABLE party (Party_ID NUMBER, Party TEXT); CREATE TABLE election (Delegate TEXT, Committee TEXT, Party NUMBER);"
      }
    ],
    [
      {
        "question": "Tell me the Lieutenant Governor name for the year 1998 ?",
        "query": "SELECT lieutenant_governor FROM party WHERE YEAR = \"1998.0\"",
        "schema": "CREATE TABLE party (Lieutenant_Governor TEXT, Year NUMBER, Governor TEXT); CREATE TABLE county (County_name TEXT);"
      },
      {
        "question": "Who is the Delegate for the election id 1 ?",
        "query": "SELECT delegate FROM election WHERE election_id = \"1\"",
        "schema": "CREATE TABLE county (County_name TEXT); CREATE TABLE election (Party NUMBER, Election_ID NUMBER, Delegate TEXT); CREATE TABLE party (Lieutenant_Governor TEXT, Party_ID NUMBER, Year NUMBER, Governor TEXT, Party TEXT);"
      },
      {
        "question": "Show the name of the party that has the most delegates ?",
        "query": "SELECT t2.party FROM election AS t1 JOIN party AS t2 ON t1.party = t2.party_id GROUP BY t1.party ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE county (County_name TEXT); CREATE TABLE election (Election_ID NUMBER, Delegate TEXT, Party NUMBER); CREATE TABLE party (Party TEXT, Party_ID NUMBER, Governor TEXT, Year NUMBER, Lieutenant_Governor TEXT);"
      }
    ],
    [
      {
        "question": "Yes, what's the name of the county with the biggest population?",
        "query": "SELECT county_name FROM county ORDER BY population DESC LIMIT 1",
        "schema": "CREATE TABLE county (County_name TEXT, County_Id NUMBER, Population NUMBER); CREATE TABLE election (District NUMBER);"
      },
      {
        "question": "And the name with the smallest population?",
        "query": "SELECT county_name FROM county ORDER BY population ASC LIMIT 1",
        "schema": "CREATE TABLE county (County_name TEXT, County_Id NUMBER, Population NUMBER); CREATE TABLE election (District NUMBER);"
      },
      {
        "question": "What is the population of Baltimore County?",
        "query": "SELECT population FROM county WHERE county_name = \"Baltimore County\"",
        "schema": "CREATE TABLE election (District NUMBER); CREATE TABLE county (County_Id NUMBER, County_name TEXT, Population NUMBER);"
      },
      {
        "question": "What is its zip code?",
        "query": "SELECT zip_code FROM county WHERE county_name = \"Baltimore County\"",
        "schema": "CREATE TABLE election (District NUMBER); CREATE TABLE county (Population NUMBER, County_name TEXT, County_Id NUMBER, Zip_code TEXT);"
      }
    ]
  ],
  "phone_market": [
    [
      {
        "question": "How many different markets are there?",
        "query": "SELECT COUNT ( DISTINCT market_id ) FROM phone_market",
        "schema": "CREATE TABLE market (Num_of_employees NUMBER, District TEXT, Market_ID NUMBER, Num_of_shops NUMBER); CREATE TABLE phone_market (Market_ID NUMBER);"
      },
      {
        "question": "How many different phones are there?",
        "query": "SELECT COUNT ( DISTINCT name ) FROM phone",
        "schema": "CREATE TABLE phone (Phone_ID NUMBER, Carrier TEXT, Name TEXT); CREATE TABLE market (Market_ID NUMBER, Num_of_employees NUMBER, District TEXT, Num_of_shops NUMBER); CREATE TABLE phone_market (Phone_ID TEXT, Market_ID NUMBER);"
      },
      {
        "question": "Which phone is sold in the most different markets?",
        "query": "SELECT t1.name FROM phone AS t1 JOIN phone_market AS t2 ON t1.phone_id = t2.phone_id GROUP BY t1.phone_id ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE market (District TEXT, Num_of_employees NUMBER, Num_of_shops NUMBER, Market_ID NUMBER); CREATE TABLE phone (Phone_ID NUMBER, Price NUMBER, Carrier TEXT, Name TEXT); CREATE TABLE phone_market (Market_ID NUMBER, Phone_ID TEXT);"
      },
      {
        "question": "How many phones are not available in any markets?",
        "query": "SELECT COUNT ( name ) FROM phone WHERE phone_id NOT IN ( SELECT phone_id FROM phone_market )",
        "schema": "CREATE TABLE phone_market (Phone_ID TEXT, Market_ID NUMBER); CREATE TABLE market (Num_of_shops NUMBER, Market_ID NUMBER, District TEXT, Num_of_employees NUMBER); CREATE TABLE phone (Phone_ID NUMBER, Name TEXT, Carrier TEXT, Price NUMBER);"
      },
      {
        "question": "What is the name of that phone?",
        "query": "SELECT name FROM phone WHERE phone_id NOT IN ( SELECT phone_id FROM phone_market )",
        "schema": "CREATE TABLE market (Num_of_employees NUMBER, District TEXT, Market_ID NUMBER, Num_of_shops NUMBER); CREATE TABLE phone_market (Phone_ID TEXT, Market_ID NUMBER); CREATE TABLE phone (Carrier TEXT, Price NUMBER, Name TEXT, Phone_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show the names of phones and the districts of markets they are on, in ascending order of the ranking of the market.",
        "query": "SELECT t3.name , t2.district FROM phone_market AS t1 JOIN market AS t2 ON t1.market_id = t2.market_id JOIN phone AS t3 ON t1.phone_id = t3.phone_id ORDER BY t2.ranking",
        "schema": "CREATE TABLE market (Ranking NUMBER, District TEXT, Market_ID NUMBER); CREATE TABLE phone (Name TEXT, Phone_ID NUMBER); CREATE TABLE phone_market (Market_ID NUMBER, Phone_ID TEXT);"
      },
      {
        "question": "Which carriers are active in Alberta?",
        "query": "SELECT t3.carrier FROM phone_market AS t1 JOIN market AS t2 ON t1.market_id = t2.market_id JOIN phone AS t3 ON t1.phone_id = t3.phone_id WHERE t2.district = \"Alberta\"",
        "schema": "CREATE TABLE phone (Name TEXT, Phone_ID NUMBER, Carrier TEXT); CREATE TABLE phone_market (Phone_ID TEXT, Market_ID NUMBER); CREATE TABLE market (Market_ID NUMBER, Ranking NUMBER, District TEXT);"
      },
      {
        "question": "Where else is TMobile active?",
        "query": "SELECT t2.district FROM phone_market AS t1 JOIN market AS t2 ON t1.market_id = t2.market_id JOIN phone AS t3 ON t1.phone_id = t3.phone_id WHERE t3.carrier = \"TMobile\" AND t2.district ! = \"Alberta\"",
        "schema": "CREATE TABLE phone (Name TEXT, Phone_ID NUMBER, Carrier TEXT); CREATE TABLE phone_market (Phone_ID TEXT, Market_ID NUMBER); CREATE TABLE market (Market_ID NUMBER, District TEXT, Ranking NUMBER);"
      },
      {
        "question": "Which phones does TMobile support?",
        "query": "SELECT name FROM phone WHERE carrier = \"TMobile\"",
        "schema": "CREATE TABLE market (Ranking NUMBER, District TEXT, Market_ID NUMBER); CREATE TABLE phone_market (Phone_ID TEXT, Market_ID NUMBER); CREATE TABLE phone (Carrier TEXT, Phone_ID NUMBER, Name TEXT);"
      }
    ],
    [
      {
        "question": "State the phone name which has the least price on the list?",
        "query": "SELECT name FROM phone AS t2 ORDER BY price ASC LIMIT 1",
        "schema": "CREATE TABLE phone (Name TEXT, Phone_ID NUMBER, Price NUMBER);"
      },
      {
        "question": "Which phone id has the highest stock on the list?",
        "query": "SELECT phone_id FROM phone_market ORDER BY num_of_stock DESC LIMIT 1",
        "schema": "CREATE TABLE phone_market (Num_of_stock NUMBER, Phone_ID TEXT); CREATE TABLE phone (Price NUMBER, Phone_ID NUMBER, Name TEXT);"
      },
      {
        "question": "For each phone, show its names and total number of stocks?",
        "query": "SELECT t2.name , SUM ( t1.num_of_stock ) FROM phone_market AS t1 JOIN phone AS t2 ON t1.phone_id = t2.phone_id GROUP BY t2.name",
        "schema": "CREATE TABLE phone_market (Num_of_stock NUMBER, Phone_ID TEXT); CREATE TABLE phone (Price NUMBER, Phone_ID NUMBER, Name TEXT);"
      },
      {
        "question": "State the name of the Carrier of Iphone 6s?",
        "query": "SELECT carrier FROM phone WHERE name = \"IPhone 6s\"",
        "schema": "CREATE TABLE phone (Phone_ID NUMBER, Name TEXT, Price NUMBER, Carrier TEXT); CREATE TABLE phone_market (Num_of_stock NUMBER, Phone_ID TEXT);"
      }
    ],
    [
      {
        "question": "Can you list all market ids and the names of the districts associated with them?",
        "query": "SELECT market_id, district FROM market",
        "schema": "CREATE TABLE phone_market (Market_ID NUMBER); CREATE TABLE market (Market_ID NUMBER, District TEXT);"
      },
      {
        "question": "Can you add to the table the phone ids from the table phone market that are associated with each market id?",
        "query": "SELECT t1.market_id,t1.district,t2.phone_id FROM market AS t1 JOIN phone_market AS t2 ON t1.market_id = t2.market_id",
        "schema": "CREATE TABLE market (Market_ID NUMBER, District TEXT); CREATE TABLE phone_market (Market_ID NUMBER, Phone_ID TEXT); CREATE TABLE phone (Phone_ID NUMBER, Name TEXT);"
      },
      {
        "question": "Can you add to the table the name of the phones associated with each of the phone ids?",
        "query": "SELECT t2.market_id, t2.district,t1.phone_id,t3.name FROM phone_market AS t1 JOIN market AS t2 ON t1.market_id = t2.market_id JOIN phone AS t3 ON t1.phone_id = t3.phone_id",
        "schema": "CREATE TABLE phone_market (Phone_ID TEXT, Market_ID NUMBER); CREATE TABLE phone (Name TEXT, Phone_ID NUMBER); CREATE TABLE market (Market_ID NUMBER, District TEXT);"
      },
      {
        "question": "Can you sort the table by phone id, but still retain all information within the table?",
        "query": "SELECT t2.market_id, t2.district,t1.phone_id,t3.name FROM phone_market AS t1 JOIN market AS t2 ON t1.market_id = t2.market_id JOIN phone AS t3 ON t1.phone_id = t3.phone_id ORDER BY t1.phone_id",
        "schema": "CREATE TABLE phone (Phone_ID NUMBER, Name TEXT); CREATE TABLE market (Market_ID NUMBER, District TEXT); CREATE TABLE phone_market (Phone_ID TEXT, Market_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Could you give me the names of all phones?",
        "query": "SELECT DISTINCT ( name ) FROM phone",
        "schema": "CREATE TABLE phone (Name TEXT, Phone_ID NUMBER);"
      },
      {
        "question": "How about only the phones with more than 2000 units in stock?",
        "query": "SELECT t2.name FROM phone_market AS t1 JOIN phone AS t2 ON t1.phone_id = t2.phone_id GROUP BY t2.name HAVING SUM ( t1.num_of_stock ) > 2000",
        "schema": "CREATE TABLE phone (Phone_ID NUMBER, Name TEXT); CREATE TABLE phone_market (Num_of_stock NUMBER, Phone_ID TEXT);"
      },
      {
        "question": "Great! Can you put them in descending order of total number of stock?",
        "query": "SELECT t2.name FROM phone_market AS t1 JOIN phone AS t2 ON t1.phone_id = t2.phone_id GROUP BY t2.name HAVING SUM ( t1.num_of_stock ) > 2000 ORDER BY SUM ( t1.num_of_stock ) DESC",
        "schema": "CREATE TABLE market (Market_ID NUMBER); CREATE TABLE phone (Phone_ID NUMBER, Name TEXT); CREATE TABLE phone_market (Num_of_stock NUMBER, Phone_ID TEXT);"
      }
    ],
    [
      {
        "question": "Can you show me the carriers that have phones with memories smaller than 32?",
        "query": "SELECT carrier FROM phone WHERE memory_in_g < 32",
        "schema": "CREATE TABLE phone (Memory_in_G NUMBER, Phone_ID NUMBER, Carrier TEXT);"
      },
      {
        "question": "Can you show me the carriers that have phones with memories bigger than 64?",
        "query": "SELECT carrier FROM phone WHERE memory_in_g > 64",
        "schema": "CREATE TABLE phone (Memory_in_G NUMBER, Carrier TEXT, Phone_ID NUMBER);"
      },
      {
        "question": "Can you show me the carriers that have phones with memories smaller than 32 and bigger than 64?",
        "query": "SELECT carrier FROM phone WHERE memory_in_g < 32 INTERSECT SELECT carrier FROM phone WHERE memory_in_g > 64",
        "schema": "CREATE TABLE phone (Phone_ID NUMBER, Carrier TEXT, Memory_in_G NUMBER);"
      }
    ],
    [
      {
        "question": "Can you show me the total number of phones?",
        "query": "SELECT COUNT ( * ) FROM phone",
        "schema": "CREATE TABLE phone_market (Num_of_stock NUMBER, Phone_ID TEXT, Market_ID NUMBER); CREATE TABLE phone (Phone_ID NUMBER, Carrier TEXT, Memory_in_G NUMBER, Name TEXT);"
      },
      {
        "question": "how about the total number of different carriers?",
        "query": "SELECT COUNT ( DISTINCT carrier ) FROM phone",
        "schema": "CREATE TABLE phone (Phone_ID NUMBER, Memory_in_G NUMBER, Carrier TEXT, Name TEXT); CREATE TABLE phone_market (Market_ID NUMBER, Num_of_stock NUMBER, Phone_ID TEXT);"
      },
      {
        "question": "Can you list the phones with carrier either Sprint or TMobile?",
        "query": "SELECT phone_id FROM phone WHERE carrier = 'Sprint' OR carrier = 'TMobile'",
        "schema": "CREATE TABLE phone (Carrier TEXT, Phone_ID NUMBER, Memory_in_G NUMBER, Name TEXT); CREATE TABLE phone_market (Phone_ID TEXT, Num_of_stock NUMBER, Market_ID NUMBER);"
      },
      {
        "question": "Can you please include their names?",
        "query": "SELECT phone_id, name FROM phone WHERE carrier = 'Sprint' OR carrier = 'TMobile'",
        "schema": "CREATE TABLE phone_market (Num_of_stock NUMBER, Phone_ID TEXT, Market_ID NUMBER); CREATE TABLE phone (Memory_in_G NUMBER, Phone_ID NUMBER, Name TEXT, Carrier TEXT);"
      }
    ]
  ],
  "school_finance": [
    [
      {
        "question": "Hello, can you provide me with the names of the donors?",
        "query": "SELECT donator_name FROM endowment",
        "schema": "CREATE TABLE endowment (School_id NUMBER, donator_name TEXT, endowment_id NUMBER);"
      },
      {
        "question": "How many donors were there total?",
        "query": "SELECT COUNT ( DISTINCT donator_name ) FROM endowment",
        "schema": "CREATE TABLE endowment (School_id NUMBER, amount NUMBER, donator_name TEXT, endowment_id NUMBER);"
      }
    ],
    [
      {
        "question": "List the name of the school with the highest enrollment?",
        "query": "SELECT school_name FROM school ORDER BY enrollment DESC LIMIT 1",
        "schema": "CREATE TABLE School (Enrollment NUMBER, School_id TEXT, School_name TEXT);"
      },
      {
        "question": "Which school is the top enrollment?",
        "query": "SELECT school_name FROM school ORDER BY enrollment DESC LIMIT 1",
        "schema": "CREATE TABLE School (Enrollment NUMBER, School_id TEXT, School_name TEXT);"
      }
    ],
    [
      {
        "question": "How many schools are in Walkerton?",
        "query": "SELECT COUNT ( * ) FROM school WHERE LOCATION = \"Walkerton\"",
        "schema": "CREATE TABLE School (IHSAA_Football_Class TEXT, Location TEXT, School_id TEXT, School_name TEXT, IHSAA_Class TEXT, County TEXT);"
      },
      {
        "question": "How many donors have endowment for the school named Glenn?",
        "query": "SELECT COUNT ( DISTINCT t1.donator_name ) FROM endowment AS t1 JOIN school AS t2 ON t1.school_id = t2.school_id WHERE t2.school_name = \"Glenn\"",
        "schema": "CREATE TABLE School (IHSAA_Class TEXT, Location TEXT, School_name TEXT, County TEXT, School_id TEXT, IHSAA_Football_Class TEXT); CREATE TABLE endowment (School_id NUMBER, donator_name TEXT, amount NUMBER, endowment_id NUMBER);"
      }
    ],
    [
      {
        "question": "Which donators have a donation amount above 8.5?",
        "query": "SELECT donator_name FROM endowment WHERE amount > 8.5",
        "schema": "CREATE TABLE endowment (amount NUMBER, donator_name TEXT, endowment_id NUMBER);"
      },
      {
        "question": "Which school ids have at least two of those donators?",
        "query": "SELECT t2.school_id FROM endowment AS t1 JOIN school AS t2 ON t1.school_id = t2.school_id WHERE t1.amount > 8.5 GROUP BY t1.school_id HAVING COUNT ( * ) > 1",
        "schema": "CREATE TABLE budget (School_id NUMBER); CREATE TABLE endowment (endowment_id NUMBER, amount NUMBER, School_id NUMBER, donator_name TEXT); CREATE TABLE School (School_name TEXT, School_id TEXT);"
      },
      {
        "question": "What are the schools names?",
        "query": "SELECT t2.school_name FROM endowment AS t1 JOIN school AS t2 ON t1.school_id = t2.school_id WHERE t1.amount > 8.5 GROUP BY t1.school_id HAVING COUNT ( * ) > 1",
        "schema": "CREATE TABLE endowment (endowment_id NUMBER, amount NUMBER, School_id NUMBER, donator_name TEXT); CREATE TABLE School (School_name TEXT, School_id TEXT); CREATE TABLE budget (School_id NUMBER);"
      }
    ],
    [
      {
        "question": "What location of school name Bremen?",
        "query": "SELECT LOCATION FROM school WHERE school_name = \"Bremen\"",
        "schema": "CREATE TABLE endowment (School_id NUMBER); CREATE TABLE School (School_name TEXT, Location TEXT, School_id TEXT);"
      },
      {
        "question": "How many enrollment of school id 2?",
        "query": "SELECT enrollment FROM school WHERE school_id = \"2\"",
        "schema": "CREATE TABLE School (School_id TEXT, Location TEXT, Enrollment NUMBER, School_name TEXT); CREATE TABLE endowment (School_id NUMBER); CREATE TABLE budget (School_id NUMBER);"
      },
      {
        "question": "How many invested in the school with mascot Falcons?",
        "query": "SELECT invested FROM school AS t1 JOIN budget AS t2 ON t1.school_id = t2.school_id WHERE t1.mascot = \"Falcons\"",
        "schema": "CREATE TABLE School (School_name TEXT, Mascot TEXT, Enrollment NUMBER, School_id TEXT, Location TEXT); CREATE TABLE endowment (School_id NUMBER); CREATE TABLE budget (Invested NUMBER, total_budget_percent_invested NUMBER, Budgeted NUMBER, Budget_invested_percent TEXT, School_id NUMBER);"
      },
      {
        "question": "List the name, IHSAA Football Class, and Mascot of the schools that have more than 6000 of budgeted amount or were founded before 2003, in the order of percent of total invested budget and total budgeted budget.",
        "query": "SELECT t1.school_name , t1.mascot , t1.ihsaa_football_class FROM school AS t1 JOIN budget AS t2 ON t1.school_id = t2.school_id WHERE budgeted > 6000 OR YEAR < 2003 ORDER BY t2.total_budget_percent_invested , t2.total_budget_percent_budgeted",
        "schema": "CREATE TABLE budget (Year NUMBER, total_budget_percent_invested NUMBER, School_id NUMBER, total_budget_percent_budgeted NUMBER, Budgeted NUMBER, Invested NUMBER, Budget_invested_percent TEXT); CREATE TABLE endowment (School_id NUMBER, amount NUMBER); CREATE TABLE School (Mascot TEXT, School_id TEXT, Location TEXT, IHSAA_Class TEXT, School_name TEXT, Enrollment NUMBER, IHSAA_Football_Class TEXT);"
      }
    ],
    [
      {
        "question": "Show the names of schools",
        "query": "SELECT school_name FROM school",
        "schema": "CREATE TABLE School (School_id TEXT, School_name TEXT);"
      },
      {
        "question": "Show the names of schools with a total budget amount greater than 100 or a total endowment greater than 10",
        "query": "SELECT t2.school_name FROM budget AS t1 JOIN school AS t2 ON t1.school_id = t2.school_id JOIN endowment AS t3 ON t2.school_id = t3.school_id GROUP BY t2.school_name HAVING SUM ( t1.budgeted ) > 100 OR SUM ( t3.amount ) > 10",
        "schema": "CREATE TABLE School (School_id TEXT, School_name TEXT); CREATE TABLE endowment (amount NUMBER, donator_name TEXT, endowment_id NUMBER, School_id NUMBER); CREATE TABLE budget (School_id NUMBER, Budgeted NUMBER, total_budget_percent_budgeted NUMBER);"
      }
    ],
    [
      {
        "question": "List each donator name and the amount of endowment in descending order of the amount of endorsement.",
        "query": "SELECT donator_name , SUM ( amount ) FROM endowment GROUP BY donator_name ORDER BY SUM ( amount ) DESC",
        "schema": "CREATE TABLE endowment (amount NUMBER, endowment_id NUMBER, donator_name TEXT);"
      },
      {
        "question": "which donator has the highest endowment? | Did you mean endowment id? | which donator has the highest amount of endowment?",
        "query": "SELECT donator_name , SUM ( amount ) FROM endowment GROUP BY donator_name ORDER BY SUM ( amount ) DESC LIMIT 1",
        "schema": "CREATE TABLE endowment (donator_name TEXT, endowment_id NUMBER, amount NUMBER);"
      },
      {
        "question": "which donator has the lowest endowment amount?",
        "query": "SELECT donator_name , SUM ( amount ) FROM endowment GROUP BY donator_name ORDER BY SUM ( amount ) ASC LIMIT 1",
        "schema": "CREATE TABLE endowment (amount NUMBER, donator_name TEXT, endowment_id NUMBER);"
      }
    ],
    [
      {
        "question": "what is the location of School id 1",
        "query": "SELECT LOCATION FROM school WHERE school_id = 1",
        "schema": "CREATE TABLE School (School_name TEXT, Location TEXT, School_id TEXT); CREATE TABLE endowment (School_id NUMBER);"
      },
      {
        "question": "What is the amount for donator name Distrito Nacional?",
        "query": "SELECT amount FROM endowment WHERE donator_name = \"Distrito Nacional\"",
        "schema": "CREATE TABLE budget (School_id NUMBER); CREATE TABLE endowment (School_id NUMBER, donator_name TEXT, amount NUMBER); CREATE TABLE School (School_name TEXT, School_id TEXT, Location TEXT);"
      }
    ],
    [
      {
        "question": "how many school are presented on the table",
        "query": "SELECT COUNT ( * ) FROM school",
        "schema": "CREATE TABLE endowment (School_id NUMBER); CREATE TABLE budget (School_id NUMBER); CREATE TABLE School (IHSAA_Class TEXT, IHSAA_Football_Class TEXT, School_id TEXT, Enrollment NUMBER, School_name TEXT);"
      },
      {
        "question": "list out the school name",
        "query": "SELECT school_name FROM school",
        "schema": "CREATE TABLE endowment (School_id NUMBER); CREATE TABLE budget (School_id NUMBER); CREATE TABLE School (IHSAA_Football_Class TEXT, School_name TEXT, IHSAA_Class TEXT, School_id TEXT, Enrollment NUMBER);"
      },
      {
        "question": "what is the location of bremen",
        "query": "SELECT LOCATION FROM school WHERE school_name = \"Bremen\"",
        "schema": "CREATE TABLE School (School_id TEXT, IHSAA_Football_Class TEXT, IHSAA_Class TEXT, Enrollment NUMBER, School_name TEXT, Location TEXT); CREATE TABLE endowment (School_id NUMBER); CREATE TABLE budget (School_id NUMBER);"
      }
    ],
    [
      {
        "question": "yes, i want to know about the mascots for schools. | What about the mascot for schools do you want to know? | I want to know that what are the mascots for schools with enrollments above the average?",
        "query": "SELECT mascot FROM school WHERE enrollment > ( SELECT AVG ( enrollment ) FROM school )",
        "schema": "CREATE TABLE School (School_name TEXT, Mascot TEXT, School_id TEXT, Enrollment NUMBER);"
      },
      {
        "question": "but i want above average list only.",
        "query": "SELECT mascot FROM school WHERE enrollment > ( SELECT AVG ( enrollment ) FROM school )",
        "schema": "CREATE TABLE School (Enrollment NUMBER, Mascot TEXT, School_name TEXT, School_id TEXT);"
      }
    ],
    [
      {
        "question": "Can you show me the average enrollment of all schools?",
        "query": "SELECT AVG ( enrollment ) FROM school",
        "schema": "CREATE TABLE School (IHSAA_Football_Class TEXT, Enrollment NUMBER, IHSAA_Class TEXT, School_id TEXT, School_name TEXT);"
      },
      {
        "question": "Can you show me the maximum enrollment of all schools?",
        "query": "SELECT MAX ( enrollment ) FROM school",
        "schema": "CREATE TABLE School (School_name TEXT, IHSAA_Football_Class TEXT, School_id TEXT, Enrollment NUMBER, IHSAA_Class TEXT);"
      },
      {
        "question": "Can you show me the minimum enrollment of all schools?",
        "query": "SELECT MIN ( enrollment ) FROM school",
        "schema": "CREATE TABLE School (IHSAA_Class TEXT, School_id TEXT, Enrollment NUMBER, School_name TEXT, IHSAA_Football_Class TEXT);"
      },
      {
        "question": "What is the name of the school with the maximum enrollment?",
        "query": "SELECT school_name FROM school ORDER BY enrollment DESC LIMIT 1",
        "schema": "CREATE TABLE School (IHSAA_Class TEXT, School_name TEXT, IHSAA_Football_Class TEXT, School_id TEXT, Enrollment NUMBER);"
      },
      {
        "question": "What is the name of the school with the minimum enrollment?",
        "query": "SELECT school_name FROM school ORDER BY enrollment LIMIT 1",
        "schema": "CREATE TABLE School (IHSAA_Class TEXT, IHSAA_Football_Class TEXT, Enrollment NUMBER, School_id TEXT, School_name TEXT);"
      }
    ],
    [
      {
        "question": "list the amount for the largest donation",
        "query": "SELECT amount FROM endowment ORDER BY amount DESC LIMIT 1",
        "schema": "CREATE TABLE endowment (endowment_id NUMBER, amount NUMBER, donator_name TEXT);"
      },
      {
        "question": "list the name for the largest amount of donation",
        "query": "SELECT donator_name FROM endowment ORDER BY amount DESC LIMIT 1",
        "schema": "CREATE TABLE endowment (amount NUMBER, endowment_id NUMBER, donator_name TEXT);"
      },
      {
        "question": "what is the name for the smallest amount of donation",
        "query": "SELECT donator_name FROM endowment ORDER BY amount ASC LIMIT 1",
        "schema": "CREATE TABLE endowment (amount NUMBER, endowment_id NUMBER, donator_name TEXT);"
      }
    ],
    [
      {
        "question": "WHAT ARE THE MASCOTS FOR THE SCHOOLS ENROLLMENTS ABOVE THE AVERAGE",
        "query": "SELECT mascot FROM school WHERE enrollment > ( SELECT AVG ( enrollment ) FROM school )",
        "schema": "CREATE TABLE School (Mascot TEXT, School_id TEXT, Enrollment NUMBER);"
      },
      {
        "question": "TELL ME THE LOCATION OF GLENN | Do you mean the location of the school named \"Glenn\"? | YES",
        "query": "SELECT LOCATION FROM school WHERE school_name = \"Glenn\"",
        "schema": "CREATE TABLE School (Mascot TEXT, School_name TEXT, Enrollment NUMBER, School_id TEXT, Location TEXT);"
      },
      {
        "question": "TELL ME THE ENROLLMENT OF CULVER COMMUNITY",
        "query": "SELECT enrollment FROM school WHERE school_name = \"Culver Community\"",
        "schema": "CREATE TABLE School (School_id TEXT, Location TEXT, School_name TEXT, Enrollment NUMBER, Mascot TEXT);"
      }
    ]
  ],
  "city_record": [
    [
      {
        "question": "What is the venue of the competition \"1994 FIFA World cup qualification\" hosted by \"Hangzou\"?",
        "query": "SELECT t3.venue FROM city AS t1 JOIN hosting_city AS t2 ON t1.city_id = t2.host_city JOIN MATCH AS t3 ON t2.match_id = t3.match_id WHERE t1.city = \"Hangzhou ( Zhejiang ) \" AND t3.competition = \"1994 FIFA World Cup qualification\"",
        "schema": "CREATE TABLE hosting_city (Match_ID NUMBER, Host_City TEXT, Year NUMBER); CREATE TABLE city (City TEXT, City_ID NUMBER); CREATE TABLE match (Venue TEXT, Competition TEXT, Match_ID NUMBER);"
      },
      {
        "question": "ok. What is the venue of the competition \"1994 FIFA World Cup qualification\" hosted by \"Nanjing\" ( Jiangsu )\"?",
        "query": "SELECT t3.venue FROM city AS t1 JOIN hosting_city AS t2 ON t1.city_id = t2.host_city JOIN MATCH AS t3 ON t2.match_id = t3.match_id WHERE t1.city = \"Nanjing ( Jiangsu ) \" AND t3.competition = \"1994 FIFA World Cup qualification\"",
        "schema": "CREATE TABLE hosting_city (Year NUMBER, Host_City TEXT, Match_ID NUMBER); CREATE TABLE city (City_ID NUMBER, City TEXT); CREATE TABLE match (Venue TEXT, Competition TEXT, Match_ID NUMBER);"
      },
      {
        "question": "What is the GDP of the city Shanghai in the table?",
        "query": "SELECT gdp FROM city WHERE city = \"Shanghai\"",
        "schema": "CREATE TABLE hosting_city (Match_ID NUMBER, Year NUMBER, Host_City TEXT); CREATE TABLE city (City TEXT, City_ID NUMBER, GDP NUMBER); CREATE TABLE match (Match_ID NUMBER, Competition TEXT, Venue TEXT);"
      }
    ],
    [
      {
        "question": "Could you list all the cities in ascending alphabetical order?",
        "query": "SELECT city FROM city ORDER BY city ASC",
        "schema": "CREATE TABLE hosting_city (Host_City TEXT); CREATE TABLE temperature (City_ID NUMBER); CREATE TABLE city (City_ID NUMBER, City TEXT);"
      },
      {
        "question": "Which cities were once host cities?",
        "query": "SELECT t3.city FROM city AS t3 JOIN hosting_city AS t4 ON t3.city_id = t4.host_city",
        "schema": "CREATE TABLE temperature (City_ID NUMBER); CREATE TABLE city (City_ID NUMBER, City TEXT); CREATE TABLE hosting_city (Host_City TEXT, Match_ID NUMBER);"
      },
      {
        "question": "Which cities had a higher temperature in Feb than in Jun or were a host city?",
        "query": "SELECT t1.city FROM city AS t1 JOIN temperature AS t2 ON t1.city_id = t2.city_id WHERE t2.feb > t2.jun UNION SELECT t3.city FROM city AS t3 JOIN hosting_city AS t4 ON t3.city_id = t4.host_city",
        "schema": "CREATE TABLE city (City_ID NUMBER, City TEXT); CREATE TABLE hosting_city (Match_ID NUMBER, Host_City TEXT, Year NUMBER); CREATE TABLE temperature (Feb NUMBER, Jun NUMBER, Aug NUMBER, City_ID NUMBER, Mar NUMBER, Apr NUMBER);"
      }
    ],
    [
      {
        "question": "What is the largest population among the cities?",
        "query": "SELECT regional_population FROM city ORDER BY regional_population DESC LIMIT 1",
        "schema": "CREATE TABLE match (Match_ID NUMBER); CREATE TABLE temperature (City_ID NUMBER); CREATE TABLE hosting_city (Match_ID NUMBER, Host_City TEXT); CREATE TABLE city (GDP NUMBER, City_ID NUMBER, Regional_Population NUMBER, City TEXT);"
      },
      {
        "question": "Hmm, I want to know the name of the city with this population.",
        "query": "SELECT city FROM city ORDER BY regional_population DESC LIMIT 1",
        "schema": "CREATE TABLE match (Match_ID NUMBER); CREATE TABLE city (Regional_Population NUMBER, City TEXT, GDP NUMBER, City_ID NUMBER); CREATE TABLE hosting_city (Host_City TEXT, Match_ID NUMBER); CREATE TABLE temperature (City_ID NUMBER);"
      },
      {
        "question": "What is the GDP of Shanghai?",
        "query": "SELECT gdp FROM city WHERE city = \"Shanghai\"",
        "schema": "CREATE TABLE temperature (City_ID NUMBER); CREATE TABLE match (Match_ID NUMBER); CREATE TABLE hosting_city (Match_ID NUMBER, Host_City TEXT); CREATE TABLE city (City_ID NUMBER, Regional_Population NUMBER, City TEXT, GDP NUMBER);"
      }
    ],
    [
      {
        "question": "How many cities have a regional population over 8000000?",
        "query": "SELECT COUNT ( city ) FROM city WHERE regional_population > 8000000",
        "schema": "CREATE TABLE temperature (City_ID NUMBER); CREATE TABLE city (Regional_Population NUMBER, City TEXT, City_ID NUMBER); CREATE TABLE hosting_city (Host_City TEXT);"
      },
      {
        "question": "How many cities have a population under 5000000?",
        "query": "SELECT COUNT ( city ) FROM city WHERE regional_population < 5000000",
        "schema": "CREATE TABLE city (City TEXT, City_ID NUMBER, Regional_Population NUMBER); CREATE TABLE temperature (City_ID NUMBER); CREATE TABLE hosting_city (Host_City TEXT);"
      },
      {
        "question": "What are the names of those cities?",
        "query": "SELECT city FROM city WHERE regional_population < 5000000",
        "schema": "CREATE TABLE temperature (City_ID NUMBER); CREATE TABLE hosting_city (Host_City TEXT); CREATE TABLE city (City_ID NUMBER, City TEXT, Regional_Population NUMBER);"
      }
    ],
    [
      {
        "question": "Which cities have served as host cities? | Do you want the names of the cities who served as host cities? | Yes.",
        "query": "SELECT DISTINCT t1.city FROM city AS t1 JOIN hosting_city AS t2 ON t1.city_id = t2.host_city",
        "schema": "CREATE TABLE city (City TEXT, City_ID NUMBER); CREATE TABLE hosting_city (Match_ID NUMBER, Host_City TEXT); CREATE TABLE match (Match_ID NUMBER);"
      },
      {
        "question": "Which of these host cities has a lower temperature in March than July.",
        "query": "SELECT t1.city FROM city AS t1 JOIN temperature AS t2 ON t1.city_id = t2.city_id WHERE t2.mar < t2.jul INTERSECT SELECT t3.city FROM city AS t3 JOIN hosting_city AS t4 ON t3.city_id = t4.host_city",
        "schema": "CREATE TABLE city (City_ID NUMBER, City TEXT); CREATE TABLE temperature (Apr NUMBER, Nov NUMBER, Feb NUMBER, Aug NUMBER, Mar NUMBER, City_ID NUMBER); CREATE TABLE hosting_city (Match_ID NUMBER, Host_City TEXT); CREATE TABLE match (Competition TEXT, Match_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Tell me Regional Population and GDP for City ID 2 ?",
        "query": "SELECT regional_population, gdp FROM city WHERE city_id = 2",
        "schema": "CREATE TABLE city (City TEXT, GDP NUMBER, Regional_Population NUMBER, City_ID NUMBER);"
      },
      {
        "question": "Tell me temperature for City ID 2 for Jan, Apr and Oct",
        "query": "SELECT jan, apr, oct FROM temperature WHERE city_id = 2",
        "schema": "CREATE TABLE temperature (Mar NUMBER, Aug NUMBER, Oct NUMBER, Apr NUMBER, City_ID NUMBER, Jul NUMBER, Jan NUMBER, Feb NUMBER); CREATE TABLE city (City TEXT, Regional_Population NUMBER, GDP NUMBER, City_ID NUMBER);"
      },
      {
        "question": "high value of temperature... | I mean how high is high? You can say temperature higher than a certain number. | Higher than 21",
        "query": "SELECT t1.city FROM city AS t1 JOIN temperature AS t2 ON t1.city_id = t2.city_id WHERE t2.mar > 21",
        "schema": "CREATE TABLE city (City_ID NUMBER, GDP NUMBER, City TEXT, Regional_Population NUMBER); CREATE TABLE temperature (Feb NUMBER, City_ID NUMBER, Apr NUMBER, Oct NUMBER, Aug NUMBER, Jan NUMBER, Mar NUMBER, Jul NUMBER);"
      },
      {
        "question": "Give me a list of cities whose temperature in Mar is lower than that in July and which have also served as host cities ?",
        "query": "SELECT t1.city FROM city AS t1 JOIN temperature AS t2 ON t1.city_id = t2.city_id WHERE t2.mar < t2.jul INTERSECT SELECT t3.city FROM city AS t3 JOIN hosting_city AS t4 ON t3.city_id = t4.host_city",
        "schema": "CREATE TABLE city (Regional_Population NUMBER, City_ID NUMBER, GDP NUMBER, City TEXT); CREATE TABLE hosting_city (Host_City TEXT); CREATE TABLE temperature (Jul NUMBER, Aug NUMBER, Oct NUMBER, Feb NUMBER, Apr NUMBER, City_ID NUMBER, Jan NUMBER, Mar NUMBER);"
      }
    ],
    [
      {
        "question": "Hi there! Can you tell me which three cities have the highest regional populations, and list the population totals too?",
        "query": "SELECT city, regional_population FROM city ORDER BY regional_population DESC LIMIT 3",
        "schema": "CREATE TABLE hosting_city (Host_City TEXT); CREATE TABLE city (Regional_Population NUMBER, City TEXT, City_ID NUMBER);"
      },
      {
        "question": "Great!  And what is the average GDP among all of the cities?",
        "query": "SELECT AVG ( gdp ) FROM city",
        "schema": "CREATE TABLE city (City_ID NUMBER, GDP NUMBER, City TEXT, Regional_Population NUMBER); CREATE TABLE hosting_city (Host_City TEXT);"
      }
    ],
    [
      {
        "question": "What is the name of the city that already served as host more than once? | The names in English or Hanzi? | English, please.",
        "query": "SELECT t1.city FROM city AS t1 JOIN hosting_city AS t2 ON t1.city_id = t2.host_city GROUP BY t2.host_city HAVING COUNT ( * ) > 1",
        "schema": "CREATE TABLE city (City TEXT, Hanyu_Pinyin TEXT, Hanzi TEXT, City_ID NUMBER); CREATE TABLE match (Match_ID NUMBER); CREATE TABLE hosting_city (Match_ID NUMBER, Host_City TEXT, Year NUMBER);"
      },
      {
        "question": "What is the GDP and population of Nanjing \uff08Jiangsu\uff09?",
        "query": "SELECT DISTINCT t1.gdp , t1.regional_population FROM city AS t1 JOIN hosting_city AS t2 ON t1.city_id = t2.host_city WHERE t1.city = 'Nanjing ( Jiangsu ) '",
        "schema": "CREATE TABLE city (City TEXT, Hanzi TEXT, Regional_Population NUMBER, GDP NUMBER, Hanyu_Pinyin TEXT, City_ID NUMBER); CREATE TABLE match (Match_ID NUMBER); CREATE TABLE hosting_city (Host_City TEXT, Match_ID NUMBER, Year NUMBER);"
      },
      {
        "question": "What is the name of the city in English and Hanzi that hosted in 2011?",
        "query": "SELECT t1.city ,t1.hanzi FROM city AS t1 JOIN hosting_city AS t2 ON t1.city_id = t2.host_city WHERE t2.year = 2011",
        "schema": "CREATE TABLE hosting_city (Match_ID NUMBER, Host_City TEXT, Year NUMBER); CREATE TABLE match (Match_ID NUMBER); CREATE TABLE city (City_ID NUMBER, Hanyu_Pinyin TEXT, GDP NUMBER, Regional_Population NUMBER, Hanzi TEXT, City TEXT);"
      }
    ],
    [
      {
        "question": "Hello, can you tell me which city hosted events in the most recent year? | Which attribute of the city do you want? | How about, what is the most recent year?",
        "query": "SELECT YEAR FROM hosting_city ORDER BY YEAR DESC LIMIT 1",
        "schema": "CREATE TABLE match (Date TEXT, Match_ID NUMBER, Competition TEXT); CREATE TABLE city (City TEXT, City_ID NUMBER); CREATE TABLE hosting_city (Host_City TEXT, Match_ID NUMBER, Year NUMBER);"
      },
      {
        "question": "What was the match id in 2013?",
        "query": "SELECT match_id FROM hosting_city WHERE YEAR = 2013",
        "schema": "CREATE TABLE city (City TEXT, City_ID NUMBER); CREATE TABLE hosting_city (Host_City TEXT, Match_ID NUMBER, Year NUMBER); CREATE TABLE match (Competition TEXT, Match_ID NUMBER, Date TEXT);"
      },
      {
        "question": "What is the city id that is associated with match id 6 in 2013?",
        "query": "SELECT host_city FROM hosting_city WHERE YEAR = 2013",
        "schema": "CREATE TABLE hosting_city (Host_City TEXT, Match_ID NUMBER, Year NUMBER); CREATE TABLE match (Competition TEXT, Date TEXT, Match_ID NUMBER); CREATE TABLE city (City_ID NUMBER, City TEXT);"
      }
    ],
    [
      {
        "question": "How many regional population of match id 1?",
        "query": "SELECT t1.regional_population FROM city AS t1 JOIN hosting_city AS t2 ON t1.city_id = t2.host_city WHERE t2.match_id = 1",
        "schema": "CREATE TABLE match (Match_ID NUMBER); CREATE TABLE hosting_city (Match_ID NUMBER, Host_City TEXT); CREATE TABLE city (City TEXT, City_ID NUMBER, Regional_Population NUMBER);"
      },
      {
        "question": "Find the gdp of host city 2.",
        "query": "SELECT gdp FROM city WHERE city_id = 2",
        "schema": "CREATE TABLE city (GDP NUMBER, City TEXT, Regional_Population NUMBER, City_ID NUMBER); CREATE TABLE match (Match_ID NUMBER); CREATE TABLE hosting_city (Match_ID NUMBER, Host_City TEXT);"
      },
      {
        "question": "Ok, What are the hanyu pinyin of Nanjing ( Jiangsu ) ?",
        "query": "SELECT hanyu_pinyin FROM city WHERE city = \"Nanjing ( Jiangsu ) \"",
        "schema": "CREATE TABLE city (Hanzi TEXT, City_ID NUMBER, Regional_Population NUMBER, GDP NUMBER, City TEXT, Hanyu_Pinyin TEXT); CREATE TABLE hosting_city (Match_ID NUMBER, Host_City TEXT); CREATE TABLE match (Match_ID NUMBER);"
      },
      {
        "question": "What is the host year of city \"Taizhou (Zhejiang)\"?",
        "query": "SELECT t2.year FROM city AS t1 JOIN hosting_city AS t2 ON t1.city_id = t2.host_city WHERE t1.city = \"Taizhou ( Zhejiang ) \"",
        "schema": "CREATE TABLE match (Match_ID NUMBER); CREATE TABLE hosting_city (Match_ID NUMBER, Year NUMBER, Host_City TEXT); CREATE TABLE city (Regional_Population NUMBER, City TEXT, Hanyu_Pinyin TEXT, Hanzi TEXT, City_ID NUMBER, GDP NUMBER);"
      }
    ],
    [
      {
        "question": "What cities had the lowest temperature in March? | what did  you  want to get ?city ID  or  city name\uff1f | City name please.",
        "query": "SELECT t1.city FROM city AS t1 JOIN temperature AS t2 ON t1.city_id = t2.city_id ORDER BY mar LIMIT 1",
        "schema": "CREATE TABLE city (City_ID NUMBER, City TEXT); CREATE TABLE temperature (City_ID NUMBER, Jan NUMBER, Mar NUMBER, Oct NUMBER, Nov NUMBER, Aug NUMBER, Jun NUMBER, Feb NUMBER); CREATE TABLE hosting_city (Host_City TEXT);"
      },
      {
        "question": "What was the name of the city whose temperature in March was lower than that in July?",
        "query": "SELECT t1.city FROM city AS t1 JOIN temperature AS t2 ON t1.city_id = t2.city_id WHERE t2.mar < t2.jul",
        "schema": "CREATE TABLE city (City TEXT, City_ID NUMBER); CREATE TABLE hosting_city (Host_City TEXT); CREATE TABLE temperature (Jul NUMBER, Jan NUMBER, Mar NUMBER, Feb NUMBER, Aug NUMBER, Jun NUMBER, Nov NUMBER, Oct NUMBER, City_ID NUMBER);"
      },
      {
        "question": "What was the name of the city whose temperature in March was higher than that in October?",
        "query": "SELECT t1.city FROM city AS t1 JOIN temperature AS t2 ON t1.city_id = t2.city_id WHERE t2.mar > t2.oct",
        "schema": "CREATE TABLE hosting_city (Host_City TEXT); CREATE TABLE city (City TEXT, City_ID NUMBER); CREATE TABLE temperature (Nov NUMBER, Aug NUMBER, City_ID NUMBER, Jun NUMBER, Jan NUMBER, Mar NUMBER, Jul NUMBER, Feb NUMBER, Oct NUMBER);"
      }
    ],
    [
      {
        "question": "Find the cities which were once a host city after 2009?",
        "query": "SELECT t1.city FROM city AS t1 JOIN hosting_city AS t2 ON t1.city_id = t2.host_city WHERE t2.year > 2009",
        "schema": "CREATE TABLE hosting_city (Host_City TEXT, Year NUMBER, Match_ID NUMBER); CREATE TABLE city (City_ID NUMBER, City TEXT); CREATE TABLE temperature (City_ID NUMBER); CREATE TABLE match (Match_ID NUMBER);"
      },
      {
        "question": "How many cities in this table?",
        "query": "SELECT COUNT ( DISTINCT city ) FROM city",
        "schema": "CREATE TABLE hosting_city (Year NUMBER, Host_City TEXT, Match_ID NUMBER); CREATE TABLE city (City_ID NUMBER, City TEXT); CREATE TABLE match (Match_ID NUMBER); CREATE TABLE temperature (City_ID NUMBER);"
      },
      {
        "question": "Find average GDP of this table?",
        "query": "SELECT AVG ( gdp ) FROM city",
        "schema": "CREATE TABLE hosting_city (Year NUMBER, Match_ID NUMBER, Host_City TEXT); CREATE TABLE city (City TEXT, City_ID NUMBER, GDP NUMBER); CREATE TABLE temperature (City_ID NUMBER); CREATE TABLE match (Match_ID NUMBER);"
      },
      {
        "question": "Most GDP in this table? | Do  you  mean  the max  GDP | Yes.",
        "query": "SELECT MAX ( gdp ) FROM city",
        "schema": "CREATE TABLE city (City TEXT, City_ID NUMBER, GDP NUMBER); CREATE TABLE match (Match_ID NUMBER); CREATE TABLE hosting_city (Match_ID NUMBER, Host_City TEXT, Year NUMBER); CREATE TABLE temperature (City_ID NUMBER);"
      }
    ],
    [
      {
        "question": "how many city there",
        "query": "SELECT COUNT ( DISTINCT city ) FROM city",
        "schema": "CREATE TABLE temperature (City_ID NUMBER); CREATE TABLE match (Match_ID NUMBER); CREATE TABLE city (Hanzi TEXT, Regional_Population NUMBER, City TEXT, City_ID NUMBER); CREATE TABLE hosting_city (Host_City TEXT, Match_ID NUMBER);"
      },
      {
        "question": "how many regional population in Hangzhou city",
        "query": "SELECT regional_population FROM city WHERE city = \"Hangzhou ( Zhejiang ) \"",
        "schema": "CREATE TABLE hosting_city (Host_City TEXT, Match_ID NUMBER); CREATE TABLE match (Match_ID NUMBER); CREATE TABLE temperature (City_ID NUMBER); CREATE TABLE city (City TEXT, City_ID NUMBER, Hanzi TEXT, Regional_Population NUMBER);"
      },
      {
        "question": "what is the city id of Nanjing",
        "query": "SELECT city_id FROM city WHERE city = \"Nanjing ( Jiangsu ) \"",
        "schema": "CREATE TABLE city (City_ID NUMBER, Hanzi TEXT, Regional_Population NUMBER, City TEXT); CREATE TABLE match (Match_ID NUMBER); CREATE TABLE temperature (City_ID NUMBER); CREATE TABLE hosting_city (Match_ID NUMBER, Host_City TEXT);"
      }
    ],
    [
      {
        "question": "Which cities are host cities?",
        "query": "SELECT t1.city FROM city AS t1 JOIN hosting_city AS t4 ON t1.city_id = t4.host_city",
        "schema": "CREATE TABLE city (City_ID NUMBER, City TEXT); CREATE TABLE temperature (City_ID NUMBER); CREATE TABLE hosting_city (Match_ID NUMBER, Host_City TEXT); CREATE TABLE match (Match_ID NUMBER);"
      },
      {
        "question": "Okay, which cities have not hosted?",
        "query": "SELECT city FROM city WHERE city_id NOT IN ( SELECT host_city FROM hosting_city )",
        "schema": "CREATE TABLE temperature (City_ID NUMBER); CREATE TABLE city (City TEXT, City_ID NUMBER); CREATE TABLE hosting_city (Host_City TEXT, Match_ID NUMBER); CREATE TABLE match (Match_ID NUMBER);"
      },
      {
        "question": "Great! Out of those cities, which ones have temperatures lower in March compared to their December temperature?",
        "query": "SELECT t1.city FROM city AS t1 JOIN temperature AS t2 ON t1.city_id = t2.city_id WHERE t2.mar < t2.dec EXCEPT SELECT t3.city FROM city AS t3 JOIN hosting_city AS t4 ON t3.city_id = t4.host_city",
        "schema": "CREATE TABLE match (Match_ID NUMBER); CREATE TABLE temperature (Feb NUMBER, Apr NUMBER, Mar NUMBER, Oct NUMBER, Jan NUMBER, Nov NUMBER, City_ID NUMBER); CREATE TABLE hosting_city (Match_ID NUMBER, Host_City TEXT); CREATE TABLE city (City_ID NUMBER, City TEXT);"
      },
      {
        "question": "Fantastic! Between Hangzhou and Nantong, which city has the cooler weather? | Did  you  mean what  time  to compare the  weather ? | Oh, sorry! Yes, which city has the lowest temperature in March?",
        "query": "SELECT t2.mar,t1.city FROM city AS t1 JOIN temperature AS t2 ON t1.city_id = t2.city_id WHERE t1.city = \"Hangzhou ( Zhejiang ) \" OR t1.city = \"Nantong ( Jiangsu ) \"",
        "schema": "CREATE TABLE match (Match_ID NUMBER); CREATE TABLE city (City TEXT, City_ID NUMBER); CREATE TABLE temperature (Dec NUMBER, Apr NUMBER, Oct NUMBER, Nov NUMBER, Jan NUMBER, Feb NUMBER, City_ID NUMBER, Mar NUMBER, Aug NUMBER); CREATE TABLE hosting_city (Match_ID NUMBER, Host_City TEXT, Year NUMBER);"
      }
    ]
  ],
  "protein_institute": [
    [
      {
        "question": "Hello!  Can you provide me with a list of all building names?",
        "query": "SELECT name FROM building",
        "schema": "CREATE TABLE Institution (building_id TEXT); CREATE TABLE building (Name TEXT, building_id TEXT);"
      },
      {
        "question": "Great!  Can you update the list to show the number of different institutions in each building?",
        "query": "SELECT t1.name , COUNT ( * ) FROM building AS t1 JOIN institution AS t2 ON t1.building_id = t2.building_id GROUP BY t1.building_id",
        "schema": "CREATE TABLE building (building_id TEXT, Name TEXT); CREATE TABLE Institution (Location TEXT, Institution_id TEXT, Type TEXT, building_id TEXT, Institution TEXT); CREATE TABLE protein (Institution_id TEXT);"
      },
      {
        "question": "Thanks! I would be fine just know which is the tallest building. | Do you mean you want to know the name of the tallest building? Or anything else? | Yes!  I want to know the name of the tallest building please.",
        "query": "SELECT name FROM building ORDER BY height_feet DESC LIMIT 1",
        "schema": "CREATE TABLE building (building_id TEXT, Name TEXT, Height_feet NUMBER); CREATE TABLE protein (Institution_id TEXT); CREATE TABLE Institution (Institution_id TEXT, Type TEXT, building_id TEXT, Institution TEXT, Location TEXT);"
      }
    ],
    [
      {
        "question": "Can you list all the institution types with the number of institutions of each type?",
        "query": "SELECT TYPE , COUNT ( * ) FROM institution GROUP BY TYPE",
        "schema": "CREATE TABLE Institution (Institution TEXT, Institution_id TEXT, Type TEXT);"
      },
      {
        "question": "Could you also show me the total enrollment for each type of institution?",
        "query": "SELECT TYPE , COUNT ( * ) , SUM ( enrollment ) FROM institution GROUP BY TYPE",
        "schema": "CREATE TABLE Institution (Type TEXT, Institution_id TEXT, Institution TEXT, Enrollment NUMBER);"
      }
    ],
    [
      {
        "question": "what are the names of the institution and building here",
        "query": "SELECT t1.name , t2.institution FROM building AS t1 JOIN institution AS t2 ON t1.building_id = t2.building_id GROUP BY t1.building_id",
        "schema": "CREATE TABLE building (Name TEXT, building_id TEXT); CREATE TABLE Institution (Institution_id TEXT, Institution TEXT, Location TEXT, building_id TEXT); CREATE TABLE protein (Institution_id TEXT);"
      },
      {
        "question": "In what year was Ave Maria University created and where is the  current location",
        "query": "SELECT founded, LOCATION FROM institution WHERE institution = \"Ave Maria University\"",
        "schema": "CREATE TABLE Institution (Location TEXT, Institution_id TEXT, Founded NUMBER, Institution TEXT, building_id TEXT); CREATE TABLE building (Street_address TEXT, Name TEXT, building_id TEXT); CREATE TABLE protein (Institution_id TEXT);"
      },
      {
        "question": "How many enrollement  does Dakota State University have",
        "query": "SELECT enrollment FROM institution WHERE institution = \"Dakota State University\"",
        "schema": "CREATE TABLE protein (Institution_id TEXT); CREATE TABLE building (building_id TEXT, Street_address TEXT, Name TEXT); CREATE TABLE Institution (Location TEXT, Institution TEXT, Founded NUMBER, building_id TEXT, Enrollment NUMBER, Institution_id TEXT);"
      }
    ],
    [
      {
        "question": "show the maximum number of floors for all buildings?",
        "query": "SELECT MAX ( floors ) FROM building",
        "schema": "CREATE TABLE building (building_id TEXT, Floors NUMBER, Height_feet NUMBER, Name TEXT); CREATE TABLE Institution (Institution_id TEXT, building_id TEXT);"
      },
      {
        "question": "Show me the name of the building with building id 1?",
        "query": "SELECT name FROM building WHERE building_id = '1'",
        "schema": "CREATE TABLE Institution (building_id TEXT, Institution_id TEXT); CREATE TABLE building (building_id TEXT, Name TEXT, Height_feet NUMBER, Floors NUMBER);"
      },
      {
        "question": "Show me the name of the building with 12 floors?",
        "query": "SELECT name FROM building WHERE floors = 12",
        "schema": "CREATE TABLE Institution (Institution_id TEXT, building_id TEXT); CREATE TABLE building (Name TEXT, Height_feet NUMBER, building_id TEXT, Floors NUMBER);"
      },
      {
        "question": "Show me the average and minimum number of floors for all buildings?",
        "query": "SELECT AVG ( floors ) , MIN ( floors ) FROM building",
        "schema": "CREATE TABLE building (Height_feet NUMBER, building_id TEXT, Floors NUMBER, Name TEXT); CREATE TABLE Institution (building_id TEXT, Institution_id TEXT);"
      }
    ],
    [
      {
        "question": "Show institution names along with the number of proteins for each institution",
        "query": "SELECT t1.institution , COUNT ( * ) FROM institution AS t1 JOIN protein AS t2 ON t1.institution_id = t2.institution_id GROUP BY t1.institution_id",
        "schema": "CREATE TABLE protein (protein_name TEXT, Institution_id TEXT); CREATE TABLE Institution (Institution TEXT, Institution_id TEXT, Type TEXT);"
      },
      {
        "question": "What proteins are associated with Lindenwood University-Belleville?",
        "query": "SELECT t2.protein_name FROM institution AS t1 JOIN protein AS t2 ON t1.institution_id = t2.institution_id WHERE t1.institution = \"Lindenwood University\u2013Belleville\"",
        "schema": "CREATE TABLE Institution (Location TEXT, building_id TEXT, Institution TEXT, Institution_id TEXT, Type TEXT); CREATE TABLE building (building_id TEXT, Name TEXT); CREATE TABLE protein (protein_name TEXT, Institution_id TEXT, common_name TEXT);"
      },
      {
        "question": "Between Centromeric protein E, putative and conserved hypothetical protein, which has the highest divergence from human lineage?",
        "query": "SELECT divergence_from_human_lineage FROM protein WHERE protein_name = \"Centromeric protein E, putative\" OR protein_name = \"conserved hypothetical protein\"",
        "schema": "CREATE TABLE protein (sequence_identity_to_human_protein TEXT, Institution_id TEXT, protein_name TEXT, divergence_from_human_lineage NUMBER, common_name TEXT); CREATE TABLE building (Name TEXT, building_id TEXT); CREATE TABLE Institution (Location TEXT, building_id TEXT, Type TEXT, Institution_id TEXT, Institution TEXT);"
      },
      {
        "question": "What is the accession number for Centromeric protein E?",
        "query": "SELECT accession_number FROM protein WHERE protein_name = \"Centromeric protein E, putative\"",
        "schema": "CREATE TABLE building (Name TEXT, building_id TEXT); CREATE TABLE Institution (building_id TEXT, Institution TEXT, Institution_id TEXT, Location TEXT, Type TEXT); CREATE TABLE protein (accession_number TEXT, divergence_from_human_lineage NUMBER, sequence_identity_to_human_protein TEXT, Institution_id TEXT, protein_name TEXT, common_name TEXT);"
      },
      {
        "question": "What is the sequence identity to human protein value associated with accession number XP_002429877.1",
        "query": "SELECT sequence_identity_to_human_protein FROM protein WHERE accession_number = \"XP_002429877.1\"",
        "schema": "CREATE TABLE protein (protein_name TEXT, common_name TEXT, sequence_length NUMBER, divergence_from_human_lineage NUMBER, sequence_identity_to_human_protein TEXT, Institution_id TEXT, accession_number TEXT); CREATE TABLE Institution (building_id TEXT, Institution TEXT, Type TEXT, Institution_id TEXT, Location TEXT); CREATE TABLE building (building_id TEXT, Name TEXT);"
      },
      {
        "question": "Which protein has the highest sequence identity to human protein value?",
        "query": "SELECT protein_name FROM protein ORDER BY sequence_identity_to_human_protein DESC LIMIT 1",
        "schema": "CREATE TABLE Institution (Institution TEXT, Type TEXT, building_id TEXT, Location TEXT, Institution_id TEXT); CREATE TABLE protein (protein_name TEXT, Institution_id TEXT, common_name TEXT, sequence_identity_to_human_protein TEXT, accession_number TEXT, sequence_length NUMBER, divergence_from_human_lineage NUMBER); CREATE TABLE building (Name TEXT, building_id TEXT);"
      }
    ],
    [
      {
        "question": "What buildings were founded in 2003?",
        "query": "SELECT institution FROM institution WHERE founded = 2003",
        "schema": "CREATE TABLE building (building_id TEXT, Name TEXT); CREATE TABLE protein (Institution_id TEXT); CREATE TABLE Institution (Founded NUMBER, Institution_id TEXT, building_id TEXT, Type TEXT, Institution TEXT);"
      },
      {
        "question": "what are the names of the buildings with institutions founded after 2003?",
        "query": "SELECT t1.name FROM building AS t1 JOIN institution AS t2 ON t1.building_id = t2.building_id WHERE t2.founded > 2003",
        "schema": "CREATE TABLE Institution (Founded NUMBER, Type TEXT, Institution_id TEXT, Institution TEXT, building_id TEXT); CREATE TABLE building (building_id TEXT, Name TEXT); CREATE TABLE protein (Institution_id TEXT);"
      },
      {
        "question": "what are the names of the buildings with institutions founded before\n 2003?",
        "query": "SELECT t1.name FROM building AS t1 JOIN institution AS t2 ON t1.building_id = t2.building_id WHERE t2.founded < 2003",
        "schema": "CREATE TABLE building (building_id TEXT, Name TEXT); CREATE TABLE protein (Institution_id TEXT); CREATE TABLE Institution (Institution TEXT, Founded NUMBER, Type TEXT, building_id TEXT, Institution_id TEXT);"
      }
    ],
    [
      {
        "question": "show the institute type with lowest number of institutions",
        "query": "SELECT TYPE FROM institution GROUP BY TYPE ORDER BY COUNT ( * ) LIMIT 1",
        "schema": "CREATE TABLE protein (Institution_id TEXT); CREATE TABLE Institution (Institution TEXT, Type TEXT, Institution_id TEXT);"
      },
      {
        "question": "show the institute type with highest number of institutions",
        "query": "SELECT TYPE FROM institution GROUP BY TYPE ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Institution (Institution TEXT, Type TEXT, Institution_id TEXT); CREATE TABLE protein (Institution_id TEXT);"
      },
      {
        "question": "which university is founded first",
        "query": "SELECT institution FROM institution ORDER BY founded LIMIT 1",
        "schema": "CREATE TABLE Institution (Institution_id TEXT, Type TEXT, Founded NUMBER, Institution TEXT); CREATE TABLE protein (Institution_id TEXT);"
      }
    ],
    [
      {
        "question": "which team performed in Ave Maria university ?",
        "query": "SELECT team FROM institution WHERE institution = 'Ave Maria University'",
        "schema": "CREATE TABLE building (building_id TEXT, Name TEXT); CREATE TABLE protein (Institution_id TEXT); CREATE TABLE Institution (building_id TEXT, Location TEXT, Type TEXT, Institution_id TEXT, Founded NUMBER, Institution TEXT, Team TEXT);"
      },
      {
        "question": "How many number of floors are in Tampa City Hall ?",
        "query": "SELECT floors FROM building WHERE name = 'Tampa City Hall'",
        "schema": "CREATE TABLE Institution (Team TEXT, Institution TEXT, Type TEXT, Location TEXT, building_id TEXT, Institution_id TEXT, Founded NUMBER); CREATE TABLE building (Floors NUMBER, Name TEXT, building_id TEXT); CREATE TABLE protein (Institution_id TEXT);"
      },
      {
        "question": "How can i reach at Tampa city Hall can you send me the address ?",
        "query": "SELECT street_address FROM building WHERE name = 'Tampa City Hall'",
        "schema": "CREATE TABLE Institution (Institution TEXT, Founded NUMBER, Location TEXT, building_id TEXT, Type TEXT, Team TEXT, Institution_id TEXT); CREATE TABLE building (Floors NUMBER, Street_address TEXT, building_id TEXT, Name TEXT); CREATE TABLE protein (Institution_id TEXT);"
      },
      {
        "question": "which type of university is Ave Maria University ?",
        "query": "SELECT TYPE FROM institution WHERE institution = 'Ave Maria University'",
        "schema": "CREATE TABLE Institution (Team TEXT, building_id TEXT, Location TEXT, Institution_id TEXT, Institution TEXT, Type TEXT, Founded NUMBER); CREATE TABLE protein (Institution_id TEXT); CREATE TABLE building (Floors NUMBER, building_id TEXT, Name TEXT, Street_address TEXT);"
      },
      {
        "question": "where is Dakota State University situated ? | Did you mean the location or the street address of its building? | yes, location of Dakota state University?",
        "query": "SELECT LOCATION FROM institution WHERE institution = 'Dakota State University'",
        "schema": "CREATE TABLE Institution (Institution TEXT, Location TEXT, Team TEXT, Institution_id TEXT, Type TEXT, Founded NUMBER, building_id TEXT); CREATE TABLE protein (Institution_id TEXT); CREATE TABLE building (building_id TEXT, Floors NUMBER, Street_address TEXT, Name TEXT);"
      }
    ],
    [
      {
        "question": "How many institutions in this table?",
        "query": "SELECT COUNT ( * ) FROM institution",
        "schema": "CREATE TABLE Institution (Institution TEXT, Type TEXT, Institution_id TEXT); CREATE TABLE protein (Institution_id TEXT);"
      },
      {
        "question": "How many buildings in this table?",
        "query": "SELECT COUNT ( * ) FROM building",
        "schema": "CREATE TABLE Institution (Type TEXT, Institution TEXT, Institution_id TEXT, building_id TEXT); CREATE TABLE building (building_id TEXT, Name TEXT); CREATE TABLE protein (Institution_id TEXT);"
      },
      {
        "question": "How many type of institutions in this table? | There are 3 different types of institutions in the table. | How many different teams in this institution table?",
        "query": "SELECT COUNT ( DISTINCT team ) FROM institution",
        "schema": "CREATE TABLE building (building_id TEXT, Name TEXT); CREATE TABLE Institution (Team TEXT, Institution TEXT, Type TEXT, Institution_id TEXT, building_id TEXT); CREATE TABLE protein (Institution_id TEXT);"
      }
    ],
    [
      {
        "question": "Show the names of all the buildings.",
        "query": "SELECT name FROM building",
        "schema": "CREATE TABLE building (Name TEXT, building_id TEXT); CREATE TABLE Institution (building_id TEXT);"
      },
      {
        "question": "Show the names of all buildings that have an institution.",
        "query": "SELECT name FROM building WHERE building_id IN ( SELECT building_id FROM institution )",
        "schema": "CREATE TABLE building (Name TEXT, building_id TEXT); CREATE TABLE protein (Institution_id TEXT); CREATE TABLE Institution (Institution TEXT, Institution_id TEXT, Type TEXT, building_id TEXT);"
      },
      {
        "question": "Show the number of floors for each of the buildings that have an institution.",
        "query": "SELECT floors FROM building WHERE building_id IN ( SELECT building_id FROM institution )",
        "schema": "CREATE TABLE Institution (building_id TEXT, Type TEXT, Institution_id TEXT, Institution TEXT); CREATE TABLE building (Name TEXT, Floors NUMBER, building_id TEXT); CREATE TABLE protein (Institution_id TEXT);"
      },
      {
        "question": "Show the name of buildings that do not have an institution.",
        "query": "SELECT name FROM building WHERE building_id NOT IN ( SELECT building_id FROM institution )",
        "schema": "CREATE TABLE Institution (Institution_id TEXT, Type TEXT, Institution TEXT, building_id TEXT); CREATE TABLE protein (Institution_id TEXT); CREATE TABLE building (building_id TEXT, Name TEXT, Floors NUMBER);"
      },
      {
        "question": "What is the street address of the Bank of America Tower.",
        "query": "SELECT street_address FROM building WHERE name = \"Bank of America Tower\"",
        "schema": "CREATE TABLE Institution (building_id TEXT, Institution_id TEXT, Type TEXT, Institution TEXT, Location TEXT); CREATE TABLE protein (Institution_id TEXT); CREATE TABLE building (Street_address TEXT, building_id TEXT, Floors NUMBER, Name TEXT);"
      },
      {
        "question": "List the buildings that have an institution and their street address.",
        "query": "SELECT name, street_address FROM building WHERE building_id IN ( SELECT building_id FROM institution )",
        "schema": "CREATE TABLE Institution (Institution TEXT, Type TEXT, building_id TEXT, Institution_id TEXT, Location TEXT); CREATE TABLE protein (Institution_id TEXT); CREATE TABLE building (building_id TEXT, Name TEXT, Street_address TEXT, Floors NUMBER);"
      }
    ],
    [
      {
        "question": "Which institution type has the largest number of institutions?",
        "query": "SELECT TYPE FROM institution GROUP BY TYPE ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Institution (Type TEXT, Institution TEXT, Institution_id TEXT); CREATE TABLE protein (Institution_id TEXT);"
      },
      {
        "question": "Which institution type has the smallest number of institutions?",
        "query": "SELECT TYPE FROM institution GROUP BY TYPE ORDER BY COUNT ( * ) ASC LIMIT 1",
        "schema": "CREATE TABLE protein (Institution_id TEXT); CREATE TABLE Institution (Type TEXT, Institution TEXT, Institution_id TEXT);"
      },
      {
        "question": "What is the average number of institutions? | Average number of institutions over what? | What is the institution type with the largest number of institutions?",
        "query": "SELECT TYPE FROM institution GROUP BY TYPE ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Institution (Institution TEXT, Institution_id TEXT, Type TEXT); CREATE TABLE protein (Institution_id TEXT);"
      }
    ],
    [
      {
        "question": "what are the names of the institutions?",
        "query": "SELECT institution FROM institution",
        "schema": "CREATE TABLE protein (Institution_id TEXT); CREATE TABLE Institution (Institution_id TEXT, Founded NUMBER, Institution TEXT, Type TEXT);"
      },
      {
        "question": "what is the number of proteins for each institution?",
        "query": "SELECT t1.institution , COUNT ( * ) FROM institution AS t1 JOIN protein AS t2 ON t1.institution_id = t2.institution_id GROUP BY t1.institution_id",
        "schema": "CREATE TABLE protein (Institution_id TEXT, protein_name TEXT, accession_number TEXT); CREATE TABLE Institution (Institution TEXT, Founded NUMBER, Type TEXT, Institution_id TEXT);"
      },
      {
        "question": "what location is each institution in?",
        "query": "SELECT institution, LOCATION FROM institution",
        "schema": "CREATE TABLE Institution (Location TEXT, Institution TEXT, Type TEXT, Institution_id TEXT, Founded NUMBER); CREATE TABLE protein (protein_name TEXT, Institution_id TEXT, accession_number TEXT);"
      }
    ]
  ],
  "college_1": [
    [
      {
        "question": "Hello, what courses are currently being taught?",
        "query": "SELECT * FROM course",
        "schema": "CREATE TABLE COURSE (CRS_CODE TEXT, DEPT_CODE TEXT, CRS_DESCRIPTION TEXT); CREATE TABLE CLASS (CLASS_TIME TEXT, CRS_CODE TEXT, CLASS_CODE TEXT, CLASS_SECTION TEXT, CLASS_ROOM TEXT); CREATE TABLE DEPARTMENT (EMP_NUM NUMBER, DEPT_NAME TEXT, DEPT_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER);"
      },
      {
        "question": "Can you please show which instructors are teaching those courses?",
        "query": "SELECT t2.emp_fname FROM CLASS AS t1 JOIN employee AS t2 ON t1.prof_num = t2.emp_num JOIN course AS t3 ON t1.crs_code = t3.crs_code",
        "schema": "CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_DESCRIPTION TEXT, CRS_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_JOBCODE TEXT, EMP_HIREDATE TIME, EMP_NUM NUMBER, EMP_FNAME TEXT, EMP_INITIAL TEXT, EMP_DOB TIME, EMP_LNAME TEXT); CREATE TABLE DEPARTMENT (EMP_NUM NUMBER, DEPT_NAME TEXT, DEPT_CODE TEXT); CREATE TABLE CLASS (CLASS_ROOM TEXT, CLASS_TIME TEXT, CLASS_SECTION TEXT, CLASS_CODE TEXT, CRS_CODE TEXT, PROF_NUM NUMBER); CREATE TABLE PROFESSOR (EMP_NUM NUMBER, PROF_OFFICE TEXT, PROF_EXTENSION TEXT, DEPT_CODE TEXT);"
      },
      {
        "question": "Can you please show me the current courses being taught with the last name of the instructor teaching them?",
        "query": "SELECT t2.emp_lname , t3.crs_description FROM CLASS AS t1 JOIN employee AS t2 ON t1.prof_num = t2.emp_num JOIN course AS t3 ON t1.crs_code = t3.crs_code",
        "schema": "CREATE TABLE PROFESSOR (PROF_OFFICE TEXT, DEPT_CODE TEXT, PROF_EXTENSION TEXT, EMP_NUM NUMBER); CREATE TABLE EMPLOYEE (EMP_FNAME TEXT, EMP_DOB TIME, EMP_JOBCODE TEXT, EMP_INITIAL TEXT, EMP_LNAME TEXT, EMP_NUM NUMBER, EMP_HIREDATE TIME); CREATE TABLE COURSE (CRS_CODE TEXT, CRS_DESCRIPTION TEXT, DEPT_CODE TEXT); CREATE TABLE CLASS (CLASS_SECTION TEXT, CLASS_CODE TEXT, CRS_CODE TEXT, PROF_NUM NUMBER, CLASS_TIME TEXT, CLASS_ROOM TEXT); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT, EMP_NUM NUMBER, DEPT_NAME TEXT);"
      }
    ],
    [
      {
        "question": "What is the average GPA of all students?",
        "query": "SELECT AVG ( t2.stu_gpa ) FROM enroll AS t1 JOIN student AS t2 ON t1.stu_num = t2.stu_num JOIN CLASS AS t3 ON t1.class_code = t3.class_code",
        "schema": "CREATE TABLE DEPARTMENT (SCHOOL_CODE TEXT, DEPT_CODE TEXT); CREATE TABLE ENROLL (CLASS_CODE TEXT, STU_NUM NUMBER); CREATE TABLE COURSE (CRS_CODE TEXT, DEPT_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE STUDENT (DEPT_CODE TEXT, STU_DOB TIME, STU_GPA NUMBER, STU_NUM NUMBER, PROF_NUM NUMBER, STU_INIT TEXT); CREATE TABLE CLASS (CRS_CODE TEXT, CLASS_CODE TEXT);"
      },
      {
        "question": "What is the average GPA of all students enrolled in the course that has the code ACCT-211?",
        "query": "SELECT AVG ( t2.stu_gpa ) FROM enroll AS t1 JOIN student AS t2 ON t1.stu_num = t2.stu_num JOIN CLASS AS t3 ON t1.class_code = t3.class_code WHERE t3.crs_code = 'ACCT-211'",
        "schema": "CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_CODE TEXT); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT, SCHOOL_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE STUDENT (STU_CLASS TEXT, DEPT_CODE TEXT, STU_GPA NUMBER, STU_NUM NUMBER, PROF_NUM NUMBER, STU_DOB TIME, STU_INIT TEXT); CREATE TABLE CLASS (CRS_CODE TEXT, CLASS_CODE TEXT); CREATE TABLE ENROLL (CLASS_CODE TEXT, STU_NUM NUMBER);"
      },
      {
        "question": "What are the grades of all the students in that course?",
        "query": "SELECT t1.enroll_grade FROM enroll AS t1 JOIN student AS t2 ON t1.stu_num = t2.stu_num JOIN CLASS AS t3 ON t1.class_code = t3.class_code WHERE t3.crs_code = 'ACCT-211'",
        "schema": "CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE CLASS (CLASS_CODE TEXT, CRS_CODE TEXT); CREATE TABLE ENROLL (ENROLL_GRADE TEXT, CLASS_CODE TEXT, STU_NUM NUMBER); CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_CODE TEXT, CRS_CREDIT NUMBER); CREATE TABLE DEPARTMENT (SCHOOL_CODE TEXT, DEPT_CODE TEXT); CREATE TABLE STUDENT (DEPT_CODE TEXT, STU_CLASS TEXT, STU_DOB TIME, STU_NUM NUMBER, STU_GPA NUMBER, STU_INIT TEXT, PROF_NUM NUMBER);"
      }
    ],
    [
      {
        "question": "how many employees there",
        "query": "SELECT COUNT ( * ) FROM employee",
        "schema": "CREATE TABLE EMPLOYEE (EMP_INITIAL TEXT, EMP_HIREDATE TIME, EMP_NUM NUMBER, EMP_FNAME TEXT, EMP_JOBCODE TEXT, EMP_LNAME TEXT, EMP_DOB TIME); CREATE TABLE CLASS (PROF_NUM NUMBER, CRS_CODE TEXT); CREATE TABLE DEPARTMENT (EMP_NUM NUMBER, DEPT_EXTENSION TEXT, DEPT_CODE TEXT, DEPT_ADDRESS TEXT, DEPT_NAME TEXT); CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_CODE TEXT); CREATE TABLE PROFESSOR (DEPT_CODE TEXT, PROF_OFFICE TEXT, EMP_NUM NUMBER); CREATE TABLE STUDENT (DEPT_CODE TEXT);"
      },
      {
        "question": "what is the employee DOB of  employee no 101",
        "query": "SELECT emp_dob FROM employee WHERE emp_num = 101",
        "schema": "CREATE TABLE STUDENT (DEPT_CODE TEXT); CREATE TABLE DEPARTMENT (DEPT_NAME TEXT, EMP_NUM NUMBER, DEPT_ADDRESS TEXT, DEPT_EXTENSION TEXT, DEPT_CODE TEXT); CREATE TABLE PROFESSOR (EMP_NUM NUMBER, PROF_OFFICE TEXT, DEPT_CODE TEXT); CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_FNAME TEXT, EMP_DOB TIME, EMP_JOBCODE TEXT, EMP_NUM NUMBER, EMP_INITIAL TEXT, EMP_HIREDATE TIME, EMP_LNAME TEXT); CREATE TABLE CLASS (PROF_NUM NUMBER, CRS_CODE TEXT);"
      },
      {
        "question": "how many class is there",
        "query": "SELECT COUNT ( * ) FROM CLASS",
        "schema": "CREATE TABLE STUDENT (DEPT_CODE TEXT, STU_CLASS TEXT); CREATE TABLE PROFESSOR (DEPT_CODE TEXT, EMP_NUM NUMBER, PROF_OFFICE TEXT); CREATE TABLE CLASS (CLASS_ROOM TEXT, CLASS_CODE TEXT, PROF_NUM NUMBER, CRS_CODE TEXT, CLASS_SECTION TEXT); CREATE TABLE EMPLOYEE (EMP_JOBCODE TEXT, EMP_INITIAL TEXT, EMP_LNAME TEXT, EMP_NUM NUMBER, EMP_HIREDATE TIME, EMP_DOB TIME, EMP_FNAME TEXT); CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_CODE TEXT); CREATE TABLE DEPARTMENT (DEPT_ADDRESS TEXT, DEPT_EXTENSION TEXT, DEPT_CODE TEXT, EMP_NUM NUMBER, DEPT_NAME TEXT);"
      }
    ],
    [
      {
        "question": "what is the school code of emp num 114",
        "query": "SELECT school_code FROM department WHERE emp_num = 114",
        "schema": "CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE STUDENT (DEPT_CODE TEXT); CREATE TABLE COURSE (CRS_CODE TEXT, DEPT_CODE TEXT); CREATE TABLE CLASS (CRS_CODE TEXT, CLASS_CODE TEXT, PROF_NUM NUMBER); CREATE TABLE DEPARTMENT (EMP_NUM NUMBER, DEPT_ADDRESS TEXT, SCHOOL_CODE TEXT, DEPT_CODE TEXT, DEPT_NAME TEXT); CREATE TABLE PROFESSOR (DEPT_CODE TEXT, EMP_NUM NUMBER);"
      },
      {
        "question": "what is the school code of fine arts",
        "query": "SELECT school_code FROM department WHERE dept_name = 'Fine Arts'",
        "schema": "CREATE TABLE CLASS (CRS_CODE TEXT, PROF_NUM NUMBER, CLASS_CODE TEXT); CREATE TABLE STUDENT (DEPT_CODE TEXT); CREATE TABLE DEPARTMENT (DEPT_NAME TEXT, DEPT_ADDRESS TEXT, EMP_NUM NUMBER, SCHOOL_CODE TEXT, DEPT_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE PROFESSOR (EMP_NUM NUMBER, DEPT_CODE TEXT); CREATE TABLE COURSE (CRS_CODE TEXT, DEPT_CODE TEXT);"
      },
      {
        "question": "what is the dept address of accounting",
        "query": "SELECT dept_address FROM department WHERE dept_name = 'Accounting'",
        "schema": "CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_CODE TEXT); CREATE TABLE PROFESSOR (EMP_NUM NUMBER, DEPT_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT, EMP_NUM NUMBER, DEPT_ADDRESS TEXT, SCHOOL_CODE TEXT, DEPT_NAME TEXT); CREATE TABLE CLASS (PROF_NUM NUMBER, CLASS_CODE TEXT, CRS_CODE TEXT); CREATE TABLE STUDENT (DEPT_CODE TEXT);"
      },
      {
        "question": "what is the prof extension of hist",
        "query": "SELECT prof_extension FROM professor WHERE dept_code = 'HIST'",
        "schema": "CREATE TABLE COURSE (CRS_CODE TEXT, DEPT_CODE TEXT); CREATE TABLE PROFESSOR (EMP_NUM NUMBER, PROF_OFFICE TEXT, DEPT_CODE TEXT, PROF_EXTENSION TEXT); CREATE TABLE DEPARTMENT (DEPT_EXTENSION TEXT, DEPT_NAME TEXT, SCHOOL_CODE TEXT, DEPT_CODE TEXT, DEPT_ADDRESS TEXT, EMP_NUM NUMBER); CREATE TABLE STUDENT (DEPT_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_LNAME TEXT, EMP_JOBCODE TEXT, EMP_NUM NUMBER, EMP_FNAME TEXT, EMP_DOB TIME); CREATE TABLE CLASS (PROF_NUM NUMBER, CLASS_CODE TEXT, CRS_CODE TEXT);"
      }
    ],
    [
      {
        "question": "show the info of students whose GPA is below 3?",
        "query": "SELECT * FROM student WHERE stu_gpa < 3",
        "schema": "CREATE TABLE STUDENT (STU_FNAME TEXT, STU_DOB TIME, DEPT_CODE TEXT, STU_CLASS TEXT, STU_LNAME TEXT, STU_INIT TEXT, STU_NUM NUMBER, PROF_NUM NUMBER, STU_GPA NUMBER); CREATE TABLE CLASS (CLASS_CODE TEXT, CRS_CODE TEXT); CREATE TABLE ENROLL (STU_NUM NUMBER, CLASS_CODE TEXT); CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_CODE TEXT); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER);"
      },
      {
        "question": "how about those whose GPA is greater than 3?",
        "query": "SELECT * FROM student WHERE stu_gpa > 3",
        "schema": "CREATE TABLE STUDENT (PROF_NUM NUMBER, STU_NUM NUMBER, STU_CLASS TEXT, STU_FNAME TEXT, STU_LNAME TEXT, STU_DOB TIME, DEPT_CODE TEXT, STU_INIT TEXT, STU_GPA NUMBER); CREATE TABLE CLASS (CRS_CODE TEXT, CLASS_CODE TEXT); CREATE TABLE COURSE (CRS_CODE TEXT, DEPT_CODE TEXT); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE ENROLL (CLASS_CODE TEXT, STU_NUM NUMBER);"
      },
      {
        "question": "Who is the youngest? | Did you mean the youngest students whose GPA is higher than 3? | Yes, please.",
        "query": "SELECT * FROM student WHERE stu_gpa > 3 ORDER BY stu_dob DESC LIMIT 1",
        "schema": "CREATE TABLE DEPARTMENT (DEPT_CODE TEXT); CREATE TABLE CLASS (CRS_CODE TEXT, CLASS_CODE TEXT); CREATE TABLE ENROLL (CLASS_CODE TEXT, STU_NUM NUMBER); CREATE TABLE PROFESSOR (PROF_HIGH_DEGREE TEXT); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE STUDENT (STU_FNAME TEXT, PROF_NUM NUMBER, STU_GPA NUMBER, STU_DOB TIME, STU_INIT TEXT, STU_CLASS TEXT, STU_LNAME TEXT, DEPT_CODE TEXT, STU_NUM NUMBER); CREATE TABLE COURSE (CRS_CODE TEXT, DEPT_CODE TEXT);"
      },
      {
        "question": "please just show the first, last name, and gpa.",
        "query": "SELECT stu_fname , stu_lname , stu_gpa FROM student WHERE stu_gpa > 3 ORDER BY stu_dob DESC LIMIT 1",
        "schema": "CREATE TABLE PROFESSOR (PROF_HIGH_DEGREE TEXT); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE COURSE (CRS_CODE TEXT, DEPT_CODE TEXT); CREATE TABLE STUDENT (STU_INIT TEXT, STU_CLASS TEXT, STU_NUM NUMBER, PROF_NUM NUMBER, STU_GPA NUMBER, DEPT_CODE TEXT, STU_FNAME TEXT, STU_LNAME TEXT, STU_DOB TIME); CREATE TABLE CLASS (CLASS_CODE TEXT, CRS_CODE TEXT); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT); CREATE TABLE ENROLL (STU_NUM NUMBER, CLASS_CODE TEXT);"
      }
    ],
    [
      {
        "question": "What is the first name of each student entrolled in class ACCT-211?",
        "query": "SELECT t3.stu_fname FROM CLASS AS t1 JOIN enroll AS t2 ON t1.class_code = t2.class_code JOIN student AS t3 ON t2.stu_num = t3.stu_num WHERE t1.crs_code = 'ACCT-211'",
        "schema": "CREATE TABLE STUDENT (PROF_NUM NUMBER, STU_INIT TEXT, STU_CLASS TEXT, STU_LNAME TEXT, DEPT_CODE TEXT, STU_DOB TIME, STU_NUM NUMBER, STU_FNAME TEXT); CREATE TABLE COURSE (CRS_CODE TEXT); CREATE TABLE CLASS (PROF_NUM NUMBER, CLASS_CODE TEXT, CRS_CODE TEXT); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE ENROLL (STU_NUM NUMBER, CLASS_CODE TEXT);"
      },
      {
        "question": "How many class sections?",
        "query": "SELECT COUNT ( DISTINCT class_section ) FROM CLASS",
        "schema": "CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE CLASS (PROF_NUM NUMBER, CLASS_CODE TEXT, CLASS_SECTION TEXT, CRS_CODE TEXT); CREATE TABLE STUDENT (STU_INIT TEXT, STU_CLASS TEXT, STU_NUM NUMBER, PROF_NUM NUMBER, STU_FNAME TEXT, DEPT_CODE TEXT, STU_DOB TIME, STU_LNAME TEXT); CREATE TABLE COURSE (CRS_CODE TEXT); CREATE TABLE ENROLL (STU_NUM NUMBER, CLASS_CODE TEXT); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT);"
      },
      {
        "question": "What is the class time of ACCT-211? | There are multiple class times for ACCT-211, would you like all of them? | Yes",
        "query": "SELECT class_time FROM CLASS WHERE crs_code = \"ACCT-211\"",
        "schema": "CREATE TABLE COURSE (CRS_CODE TEXT); CREATE TABLE ENROLL (STU_NUM NUMBER, CLASS_CODE TEXT); CREATE TABLE CLASS (CLASS_SECTION TEXT, CLASS_TIME TEXT, CRS_CODE TEXT, CLASS_CODE TEXT, PROF_NUM NUMBER); CREATE TABLE STUDENT (STU_INIT TEXT, STU_LNAME TEXT, STU_NUM NUMBER, DEPT_CODE TEXT, STU_DOB TIME, STU_HRS NUMBER, STU_CLASS TEXT, PROF_NUM NUMBER, STU_FNAME TEXT); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER);"
      }
    ],
    [
      {
        "question": "list all department code and department name",
        "query": "SELECT dept_code, dept_name FROM department",
        "schema": "CREATE TABLE DEPARTMENT (DEPT_CODE TEXT, SCHOOL_CODE TEXT, EMP_NUM NUMBER, DEPT_NAME TEXT); CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE STUDENT (DEPT_CODE TEXT); CREATE TABLE PROFESSOR (DEPT_CODE TEXT);"
      },
      {
        "question": "Sorry, I meant to show me all the course codes where department code is \"CIS\"",
        "query": "SELECT t2.crs_code FROM department AS t1 JOIN course AS t2 ON t1.dept_code = t2.dept_code WHERE t1.dept_code = \"CIS\"",
        "schema": "CREATE TABLE STUDENT (DEPT_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE PROFESSOR (DEPT_CODE TEXT); CREATE TABLE DEPARTMENT (DEPT_NAME TEXT, EMP_NUM NUMBER, DEPT_CODE TEXT, SCHOOL_CODE TEXT); CREATE TABLE COURSE (CRS_CODE TEXT, DEPT_CODE TEXT); CREATE TABLE CLASS (CRS_CODE TEXT);"
      },
      {
        "question": "can I get a count of these courses where department code is \"CIS\"?",
        "query": "SELECT COUNT ( * ) FROM department AS t1 JOIN course AS t2 ON t1.dept_code = t2.dept_code WHERE t1.dept_code = \"CIS\"",
        "schema": "CREATE TABLE PROFESSOR (DEPT_CODE TEXT); CREATE TABLE DEPARTMENT (DEPT_NAME TEXT, DEPT_CODE TEXT, EMP_NUM NUMBER, SCHOOL_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_CODE TEXT); CREATE TABLE CLASS (CRS_CODE TEXT); CREATE TABLE STUDENT (DEPT_CODE TEXT);"
      }
    ],
    [
      {
        "question": "how many students enrolled for the accounting department",
        "query": "SELECT COUNT ( * ) FROM CLASS AS t1 JOIN enroll AS t2 ON t1.class_code = t2.class_code JOIN course AS t3 ON t1.crs_code = t3.crs_code JOIN department AS t4 ON t3.dept_code = t4.dept_code WHERE t4.dept_name = 'Accounting'",
        "schema": "CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_CODE TEXT); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT, EMP_NUM NUMBER, DEPT_NAME TEXT, SCHOOL_CODE TEXT); CREATE TABLE CLASS (CLASS_CODE TEXT, CRS_CODE TEXT); CREATE TABLE PROFESSOR (DEPT_CODE TEXT); CREATE TABLE STUDENT (STU_NUM NUMBER, STU_INIT TEXT, STU_CLASS TEXT, STU_DOB TIME, DEPT_CODE TEXT); CREATE TABLE ENROLL (CLASS_CODE TEXT, STU_NUM NUMBER); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER);"
      },
      {
        "question": "what is the school code for accounting?",
        "query": "SELECT school_code FROM department WHERE dept_name = \"Accounting\"",
        "schema": "CREATE TABLE CLASS (CRS_CODE TEXT, CLASS_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE PROFESSOR (DEPT_CODE TEXT); CREATE TABLE STUDENT (DEPT_CODE TEXT, STU_NUM NUMBER, STU_INIT TEXT, STU_DOB TIME, STU_CLASS TEXT); CREATE TABLE ENROLL (STU_NUM NUMBER, CLASS_CODE TEXT); CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_CODE TEXT); CREATE TABLE DEPARTMENT (SCHOOL_CODE TEXT, EMP_NUM NUMBER, DEPT_CODE TEXT, DEPT_NAME TEXT);"
      },
      {
        "question": "what is the emplotyee number for accounting?",
        "query": "SELECT emp_num FROM department WHERE dept_name = \"Accounting\"",
        "schema": "CREATE TABLE ENROLL (CLASS_CODE TEXT, STU_NUM NUMBER); CREATE TABLE CLASS (CRS_CODE TEXT, CLASS_CODE TEXT); CREATE TABLE PROFESSOR (DEPT_CODE TEXT); CREATE TABLE STUDENT (STU_CLASS TEXT, STU_INIT TEXT, STU_NUM NUMBER, STU_DOB TIME, DEPT_CODE TEXT); CREATE TABLE COURSE (CRS_CODE TEXT, DEPT_CODE TEXT); CREATE TABLE DEPARTMENT (EMP_NUM NUMBER, DEPT_NAME TEXT, SCHOOL_CODE TEXT, DEPT_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER);"
      }
    ],
    [
      {
        "question": "How many departments do you have?",
        "query": "SELECT COUNT ( * ) FROM department",
        "schema": "CREATE TABLE COURSE (CRS_CODE TEXT, DEPT_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_HIREDATE TIME, EMP_DOB TIME, EMP_INITIAL TEXT, EMP_NUM NUMBER, EMP_JOBCODE TEXT); CREATE TABLE CLASS (PROF_NUM NUMBER, CRS_CODE TEXT, CLASS_CODE TEXT); CREATE TABLE DEPARTMENT (DEPT_EXTENSION TEXT, DEPT_CODE TEXT, EMP_NUM NUMBER, DEPT_ADDRESS TEXT, DEPT_NAME TEXT, SCHOOL_CODE TEXT); CREATE TABLE STUDENT (STU_NUM NUMBER, PROF_NUM NUMBER, STU_DOB TIME, STU_INIT TEXT, DEPT_CODE TEXT); CREATE TABLE PROFESSOR (DEPT_CODE TEXT, EMP_NUM NUMBER);"
      },
      {
        "question": "What are the first names of professors in the history department?",
        "query": "SELECT t1.emp_fname FROM employee AS t1 JOIN professor AS t2 ON t1.emp_num = t2.emp_num WHERE t2.dept_code = 'HIST'",
        "schema": "CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_CODE TEXT); CREATE TABLE DEPARTMENT (DEPT_ADDRESS TEXT, DEPT_CODE TEXT, DEPT_NAME TEXT, EMP_NUM NUMBER, SCHOOL_CODE TEXT, DEPT_EXTENSION TEXT); CREATE TABLE CLASS (CLASS_CODE TEXT, PROF_NUM NUMBER, CRS_CODE TEXT); CREATE TABLE PROFESSOR (EMP_NUM NUMBER, DEPT_CODE TEXT, PROF_OFFICE TEXT); CREATE TABLE EMPLOYEE (EMP_JOBCODE TEXT, EMP_LNAME TEXT, EMP_FNAME TEXT, EMP_INITIAL TEXT, EMP_HIREDATE TIME, EMP_NUM NUMBER, EMP_DOB TIME); CREATE TABLE STUDENT (DEPT_CODE TEXT, STU_NUM NUMBER, PROF_NUM NUMBER, STU_DOB TIME, STU_INIT TEXT);"
      },
      {
        "question": "What are the offices of these professors?",
        "query": "SELECT t2.prof_office FROM employee AS t1 JOIN professor AS t2 ON t1.emp_num = t2.emp_num WHERE t2.dept_code = 'HIST'",
        "schema": "CREATE TABLE PROFESSOR (DEPT_CODE TEXT, PROF_OFFICE TEXT, EMP_NUM NUMBER); CREATE TABLE EMPLOYEE (EMP_LNAME TEXT, EMP_FNAME TEXT, EMP_JOBCODE TEXT, EMP_NUM NUMBER, EMP_DOB TIME, EMP_HIREDATE TIME, EMP_INITIAL TEXT); CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_CODE TEXT); CREATE TABLE CLASS (CRS_CODE TEXT, PROF_NUM NUMBER, CLASS_CODE TEXT); CREATE TABLE STUDENT (DEPT_CODE TEXT, STU_NUM NUMBER, STU_INIT TEXT, STU_DOB TIME, PROF_NUM NUMBER); CREATE TABLE DEPARTMENT (DEPT_NAME TEXT, EMP_NUM NUMBER, DEPT_CODE TEXT, SCHOOL_CODE TEXT, DEPT_ADDRESS TEXT, DEPT_EXTENSION TEXT);"
      },
      {
        "question": "Can you tell me the first name and office of the professor in the history department who has a Ph.D. degree?",
        "query": "SELECT t1.emp_fname, t2.prof_office FROM employee AS t1 JOIN professor AS t2 ON t1.emp_num = t2.emp_num WHERE t2.dept_code = 'HIST' AND t2.prof_high_degree = 'Ph.D.'",
        "schema": "CREATE TABLE STUDENT (DEPT_CODE TEXT, STU_INIT TEXT, PROF_NUM NUMBER, STU_DOB TIME, STU_NUM NUMBER); CREATE TABLE CLASS (CLASS_CODE TEXT, CRS_CODE TEXT, PROF_NUM NUMBER); CREATE TABLE COURSE (CRS_CODE TEXT, DEPT_CODE TEXT); CREATE TABLE DEPARTMENT (DEPT_EXTENSION TEXT, DEPT_CODE TEXT, EMP_NUM NUMBER, SCHOOL_CODE TEXT, DEPT_NAME TEXT, DEPT_ADDRESS TEXT); CREATE TABLE EMPLOYEE (EMP_FNAME TEXT, EMP_DOB TIME, EMP_INITIAL TEXT, EMP_HIREDATE TIME, EMP_LNAME TEXT, EMP_NUM NUMBER, EMP_JOBCODE TEXT); CREATE TABLE PROFESSOR (EMP_NUM NUMBER, PROF_HIGH_DEGREE TEXT, DEPT_CODE TEXT, PROF_OFFICE TEXT);"
      }
    ],
    [
      {
        "question": "what is employee number of james ? | Is James a first name or last name? | first name",
        "query": "SELECT emp_num FROM employee WHERE emp_fname = \"James\"",
        "schema": "CREATE TABLE DEPARTMENT (DEPT_CODE TEXT, DEPT_NAME TEXT, EMP_NUM NUMBER); CREATE TABLE EMPLOYEE (EMP_FNAME TEXT, EMP_NUM NUMBER, EMP_LNAME TEXT, EMP_DOB TIME, EMP_HIREDATE TIME); CREATE TABLE PROFESSOR (PROF_OFFICE TEXT, DEPT_CODE TEXT, EMP_NUM NUMBER); CREATE TABLE CLASS (PROF_NUM NUMBER);"
      },
      {
        "question": "please show me the DOB OF EMPLOYEE WHO HAS THIS AS HIS FIRST NAME | Do you mean the first name \"James\"? | yeah",
        "query": "SELECT emp_dob FROM employee WHERE emp_fname = \"James\"",
        "schema": "CREATE TABLE CLASS (PROF_NUM NUMBER); CREATE TABLE PROFESSOR (PROF_OFFICE TEXT, DEPT_CODE TEXT, EMP_NUM NUMBER); CREATE TABLE EMPLOYEE (EMP_LNAME TEXT, EMP_NUM NUMBER, EMP_HIREDATE TIME, EMP_DOB TIME, EMP_FNAME TEXT); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT, EMP_NUM NUMBER, DEPT_NAME TEXT);"
      },
      {
        "question": "SHOW ME THE  hire date OF THE EMPLOYEE WHO HAS THE FIRST NAME AS JAMES",
        "query": "SELECT emp_hiredate FROM employee WHERE emp_fname = \"James\"",
        "schema": "CREATE TABLE DEPARTMENT (DEPT_CODE TEXT, EMP_NUM NUMBER, DEPT_NAME TEXT); CREATE TABLE CLASS (PROF_NUM NUMBER); CREATE TABLE PROFESSOR (PROF_OFFICE TEXT, EMP_NUM NUMBER, DEPT_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_DOB TIME, EMP_FNAME TEXT, EMP_NUM NUMBER, EMP_HIREDATE TIME, EMP_LNAME TEXT);"
      }
    ],
    [
      {
        "question": "what is the first and last name of the profesor in biology department?",
        "query": "SELECT t3.emp_fname , t3.emp_lname FROM professor AS t1 JOIN department AS t2 ON t1.dept_code = t2.dept_code JOIN employee AS t3 ON t1.emp_num = t3.emp_num WHERE dept_name = \"Biology\"",
        "schema": "CREATE TABLE STUDENT (PROF_NUM NUMBER, DEPT_CODE TEXT, STU_LNAME TEXT, STU_FNAME TEXT); CREATE TABLE EMPLOYEE (EMP_LNAME TEXT, EMP_FNAME TEXT, EMP_DOB TIME, EMP_HIREDATE TIME, EMP_NUM NUMBER, EMP_JOBCODE TEXT); CREATE TABLE PROFESSOR (EMP_NUM NUMBER, DEPT_CODE TEXT, PROF_OFFICE TEXT); CREATE TABLE DEPARTMENT (DEPT_NAME TEXT, SCHOOL_CODE TEXT, EMP_NUM NUMBER, DEPT_CODE TEXT); CREATE TABLE CLASS (PROF_NUM NUMBER); CREATE TABLE COURSE (DEPT_CODE TEXT);"
      },
      {
        "question": "how many employee in table?",
        "query": "SELECT COUNT ( * ) FROM employee",
        "schema": "CREATE TABLE STUDENT (DEPT_CODE TEXT, STU_FNAME TEXT, PROF_NUM NUMBER, STU_LNAME TEXT); CREATE TABLE CLASS (PROF_NUM NUMBER); CREATE TABLE COURSE (DEPT_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_FNAME TEXT, EMP_LNAME TEXT, EMP_JOBCODE TEXT, EMP_NUM NUMBER, EMP_HIREDATE TIME, EMP_DOB TIME); CREATE TABLE DEPARTMENT (DEPT_NAME TEXT, EMP_NUM NUMBER, DEPT_CODE TEXT, SCHOOL_CODE TEXT); CREATE TABLE PROFESSOR (EMP_NUM NUMBER, PROF_OFFICE TEXT, DEPT_CODE TEXT);"
      },
      {
        "question": "what is the highest professor extension in the table?",
        "query": "SELECT MAX ( prof_extension ) FROM professor",
        "schema": "CREATE TABLE STUDENT (STU_FNAME TEXT, PROF_NUM NUMBER, STU_LNAME TEXT, DEPT_CODE TEXT); CREATE TABLE CLASS (PROF_NUM NUMBER); CREATE TABLE DEPARTMENT (EMP_NUM NUMBER, DEPT_EXTENSION TEXT, DEPT_CODE TEXT, DEPT_NAME TEXT, SCHOOL_CODE TEXT); CREATE TABLE COURSE (DEPT_CODE TEXT); CREATE TABLE PROFESSOR (EMP_NUM NUMBER, DEPT_CODE TEXT, PROF_HIGH_DEGREE TEXT, PROF_EXTENSION TEXT, PROF_OFFICE TEXT); CREATE TABLE EMPLOYEE (EMP_JOBCODE TEXT, EMP_NUM NUMBER, EMP_DOB TIME, EMP_LNAME TEXT, EMP_FNAME TEXT, EMP_HIREDATE TIME);"
      },
      {
        "question": "what is least employee number in the table?",
        "query": "SELECT MIN ( emp_num ) FROM employee",
        "schema": "CREATE TABLE CLASS (PROF_NUM NUMBER); CREATE TABLE STUDENT (PROF_NUM NUMBER, STU_FNAME TEXT, STU_LNAME TEXT, DEPT_CODE TEXT); CREATE TABLE COURSE (DEPT_CODE TEXT); CREATE TABLE DEPARTMENT (DEPT_NAME TEXT, DEPT_CODE TEXT, DEPT_EXTENSION TEXT, SCHOOL_CODE TEXT, EMP_NUM NUMBER); CREATE TABLE PROFESSOR (PROF_EXTENSION TEXT, PROF_HIGH_DEGREE TEXT, DEPT_CODE TEXT, EMP_NUM NUMBER, PROF_OFFICE TEXT); CREATE TABLE EMPLOYEE (EMP_FNAME TEXT, EMP_JOBCODE TEXT, EMP_NUM NUMBER, EMP_DOB TIME, EMP_HIREDATE TIME, EMP_LNAME TEXT);"
      }
    ],
    [
      {
        "question": "Can you Please list all departments?",
        "query": "SELECT dept_name FROM department",
        "schema": "CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE PROFESSOR (EMP_NUM NUMBER, DEPT_CODE TEXT); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT, DEPT_EXTENSION TEXT, SCHOOL_CODE TEXT, DEPT_NAME TEXT, EMP_NUM NUMBER, DEPT_ADDRESS TEXT); CREATE TABLE STUDENT (DEPT_CODE TEXT); CREATE TABLE CLASS (PROF_NUM NUMBER); CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_CODE TEXT);"
      },
      {
        "question": "Thank You.  Can you provide the department code for each of these?",
        "query": "SELECT DISTINCT ( dept_code ) FROM department",
        "schema": "CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE STUDENT (DEPT_CODE TEXT); CREATE TABLE COURSE (CRS_CODE TEXT, DEPT_CODE TEXT); CREATE TABLE CLASS (CRS_CODE TEXT, PROF_NUM NUMBER); CREATE TABLE PROFESSOR (DEPT_CODE TEXT, EMP_NUM NUMBER); CREATE TABLE DEPARTMENT (DEPT_EXTENSION TEXT, DEPT_NAME TEXT, DEPT_CODE TEXT, DEPT_ADDRESS TEXT, SCHOOL_CODE TEXT, EMP_NUM NUMBER);"
      },
      {
        "question": "Thank you.  Can you provide the names of students taking classes in CIS?",
        "query": "SELECT t1.stu_fname, t1.stu_lname FROM student AS t1 JOIN enroll AS t2 ON t1.stu_num = t2.stu_num JOIN CLASS AS t3 ON t2.class_code = t3.class_code JOIN course AS t4 ON t3.crs_code = t4.crs_code JOIN department AS t5 ON t5.dept_code = t4.dept_code WHERE t5.dept_name = 'Computer Info. Systems'",
        "schema": "CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE ENROLL (STU_NUM NUMBER, CLASS_CODE TEXT); CREATE TABLE PROFESSOR (DEPT_CODE TEXT, EMP_NUM NUMBER); CREATE TABLE CLASS (CLASS_CODE TEXT, CRS_CODE TEXT, PROF_NUM NUMBER); CREATE TABLE DEPARTMENT (SCHOOL_CODE TEXT, EMP_NUM NUMBER, DEPT_CODE TEXT, DEPT_ADDRESS TEXT, DEPT_EXTENSION TEXT, DEPT_NAME TEXT); CREATE TABLE STUDENT (STU_INIT TEXT, STU_CLASS TEXT, STU_NUM NUMBER, STU_FNAME TEXT, DEPT_CODE TEXT, STU_LNAME TEXT, STU_DOB TIME, PROF_NUM NUMBER); CREATE TABLE COURSE (CRS_CODE TEXT, DEPT_CODE TEXT);"
      },
      {
        "question": "Just the First name?",
        "query": "SELECT t1.stu_fname FROM student AS t1 JOIN enroll AS t2 ON t1.stu_num = t2.stu_num JOIN CLASS AS t3 ON t2.class_code = t3.class_code JOIN course AS t4 ON t3.crs_code = t4.crs_code JOIN department AS t5 ON t5.dept_code = t4.dept_code WHERE t5.dept_name = 'Computer Info. Systems'",
        "schema": "CREATE TABLE STUDENT (STU_DOB TIME, STU_LNAME TEXT, STU_INIT TEXT, DEPT_CODE TEXT, PROF_NUM NUMBER, STU_CLASS TEXT, STU_NUM NUMBER, STU_FNAME TEXT); CREATE TABLE ENROLL (CLASS_CODE TEXT, STU_NUM NUMBER); CREATE TABLE COURSE (CRS_CODE TEXT, DEPT_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE PROFESSOR (EMP_NUM NUMBER, DEPT_CODE TEXT); CREATE TABLE DEPARTMENT (DEPT_EXTENSION TEXT, SCHOOL_CODE TEXT, DEPT_NAME TEXT, DEPT_ADDRESS TEXT, EMP_NUM NUMBER, DEPT_CODE TEXT); CREATE TABLE CLASS (CRS_CODE TEXT, PROF_NUM NUMBER, CLASS_CODE TEXT);"
      },
      {
        "question": "Which one of these students also has a class in ACCT?",
        "query": "SELECT t1.stu_fname FROM student AS t1 JOIN enroll AS t2 ON t1.stu_num = t2.stu_num JOIN CLASS AS t3 ON t2.class_code = t3.class_code JOIN course AS t4 ON t3.crs_code = t4.crs_code JOIN department AS t5 ON t5.dept_code = t4.dept_code WHERE t5.dept_name = 'Accounting' INTERSECT SELECT t1.stu_fname FROM student AS t1 JOIN enroll AS t2 ON t1.stu_num = t2.stu_num JOIN CLASS AS t3 ON t2.class_code = t3.class_code JOIN course AS t4 ON t3.crs_code = t4.crs_code JOIN department AS t5 ON t5.dept_code = t4.dept_code WHERE t5.dept_name = 'Computer Info. Systems'",
        "schema": "CREATE TABLE COURSE (CRS_CODE TEXT, DEPT_CODE TEXT); CREATE TABLE CLASS (CLASS_CODE TEXT, PROF_NUM NUMBER, CRS_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT, DEPT_EXTENSION TEXT, SCHOOL_CODE TEXT, EMP_NUM NUMBER, DEPT_NAME TEXT, DEPT_ADDRESS TEXT); CREATE TABLE STUDENT (STU_LNAME TEXT, DEPT_CODE TEXT, STU_CLASS TEXT, STU_NUM NUMBER, STU_INIT TEXT, PROF_NUM NUMBER, STU_FNAME TEXT, STU_DOB TIME); CREATE TABLE ENROLL (CLASS_CODE TEXT, STU_NUM NUMBER); CREATE TABLE PROFESSOR (EMP_NUM NUMBER, DEPT_CODE TEXT);"
      }
    ],
    [
      {
        "question": "may i know the class room for the class section 1 | ok, so which column info do you want to return for these classes? | i want to know the class room column",
        "query": "SELECT class_room FROM CLASS WHERE class_section = 1",
        "schema": "CREATE TABLE DEPARTMENT (SCHOOL_CODE TEXT, DEPT_CODE TEXT, DEPT_NAME TEXT); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE STUDENT (STU_CLASS TEXT, DEPT_CODE TEXT); CREATE TABLE CLASS (CLASS_CODE TEXT, CLASS_SECTION TEXT, PROF_NUM NUMBER, CLASS_ROOM TEXT, CLASS_TIME TEXT, CRS_CODE TEXT); CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_CODE TEXT);"
      }
    ],
    [
      {
        "question": "How many professors in this table?",
        "query": "SELECT COUNT ( * ) FROM professor",
        "schema": "CREATE TABLE EMPLOYEE (EMP_HIREDATE TIME, EMP_LNAME TEXT, EMP_JOBCODE TEXT, EMP_FNAME TEXT, EMP_NUM NUMBER, EMP_DOB TIME, EMP_INITIAL TEXT); CREATE TABLE CLASS (PROF_NUM NUMBER); CREATE TABLE PROFESSOR (PROF_HIGH_DEGREE TEXT, PROF_OFFICE TEXT, PROF_EXTENSION TEXT, EMP_NUM NUMBER, DEPT_CODE TEXT); CREATE TABLE DEPARTMENT (EMP_NUM NUMBER, DEPT_CODE TEXT);"
      },
      {
        "question": "How many department names in this table?",
        "query": "SELECT COUNT ( DISTINCT dept_name ) FROM department",
        "schema": "CREATE TABLE PROFESSOR (PROF_EXTENSION TEXT, DEPT_CODE TEXT, PROF_HIGH_DEGREE TEXT, PROF_OFFICE TEXT, EMP_NUM NUMBER); CREATE TABLE EMPLOYEE (EMP_DOB TIME, EMP_INITIAL TEXT, EMP_NUM NUMBER, EMP_FNAME TEXT, EMP_JOBCODE TEXT, EMP_HIREDATE TIME, EMP_LNAME TEXT); CREATE TABLE DEPARTMENT (DEPT_NAME TEXT, DEPT_CODE TEXT, EMP_NUM NUMBER); CREATE TABLE CLASS (PROF_NUM NUMBER);"
      }
    ],
    [
      {
        "question": "Can you tell me the amount and code of the job with the most employees?",
        "query": "SELECT emp_jobcode , COUNT ( * ) FROM employee GROUP BY emp_jobcode ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE COURSE (CRS_CODE TEXT, DEPT_CODE TEXT); CREATE TABLE CLASS (PROF_NUM NUMBER); CREATE TABLE PROFESSOR (EMP_NUM NUMBER, DEPT_CODE TEXT); CREATE TABLE DEPARTMENT (EMP_NUM NUMBER, DEPT_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_DOB TIME, EMP_HIREDATE TIME, EMP_NUM NUMBER, EMP_JOBCODE TEXT);"
      },
      {
        "question": "And the hire dates of those 22 employees?",
        "query": "SELECT emp_hiredate FROM employee WHERE emp_jobcode IN ( SELECT emp_jobcode FROM employee GROUP BY emp_jobcode ORDER BY COUNT ( * ) DESC LIMIT 1 )",
        "schema": "CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_CODE TEXT); CREATE TABLE PROFESSOR (EMP_NUM NUMBER, DEPT_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_LNAME TEXT, EMP_JOBCODE TEXT, EMP_DOB TIME, EMP_NUM NUMBER, EMP_HIREDATE TIME); CREATE TABLE CLASS (PROF_NUM NUMBER); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT, EMP_NUM NUMBER);"
      }
    ],
    [
      {
        "question": "Hello!  How many students are enrolled in the class with the course code of ACCT-211?",
        "query": "SELECT COUNT ( * ) FROM CLASS AS t1 JOIN enroll AS t2 ON t1.class_code = t2.class_code WHERE t1.crs_code = 'ACCT-211'",
        "schema": "CREATE TABLE CLASS (CRS_CODE TEXT, CLASS_CODE TEXT); CREATE TABLE STUDENT (STU_DOB TIME, STU_CLASS TEXT, DEPT_CODE TEXT, STU_INIT TEXT, STU_LNAME TEXT, STU_NUM NUMBER); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE ENROLL (CLASS_CODE TEXT, STU_NUM NUMBER); CREATE TABLE COURSE (CRS_CODE TEXT, DEPT_CODE TEXT); CREATE TABLE DEPARTMENT (SCHOOL_CODE TEXT, DEPT_CODE TEXT);"
      },
      {
        "question": "Excellent!  Can you show the class time and class room for ACCt-211?",
        "query": "SELECT class_time,class_room FROM CLASS WHERE crs_code = 'ACCT-211'",
        "schema": "CREATE TABLE ENROLL (STU_NUM NUMBER, CLASS_CODE TEXT); CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_CODE TEXT); CREATE TABLE CLASS (CRS_CODE TEXT, CLASS_CODE TEXT, CLASS_SECTION TEXT, CLASS_ROOM TEXT, CLASS_TIME TEXT); CREATE TABLE STUDENT (DEPT_CODE TEXT, STU_INIT TEXT, STU_NUM NUMBER, STU_LNAME TEXT, STU_HRS NUMBER, STU_CLASS TEXT, STU_DOB TIME); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT, SCHOOL_CODE TEXT);"
      },
      {
        "question": "Thank you!  I thought there might be more to that table...  Can you provide me with a list of all of the different course codes?",
        "query": "SELECT DISTINCT crs_code FROM CLASS",
        "schema": "CREATE TABLE DEPARTMENT (DEPT_CODE TEXT, SCHOOL_CODE TEXT); CREATE TABLE ENROLL (CLASS_CODE TEXT, STU_NUM NUMBER); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE CLASS (CLASS_TIME TEXT, CLASS_SECTION TEXT, CLASS_ROOM TEXT, CLASS_CODE TEXT, CRS_CODE TEXT); CREATE TABLE COURSE (CRS_CODE TEXT, DEPT_CODE TEXT); CREATE TABLE STUDENT (STU_LNAME TEXT, STU_DOB TIME, STU_CLASS TEXT, STU_HRS NUMBER, STU_NUM NUMBER, STU_INIT TEXT, DEPT_CODE TEXT);"
      }
    ],
    [
      {
        "question": "How many students took any course? | Did you mean how many students there are? | Yes, sorry!",
        "query": "SELECT COUNT ( * ) FROM student",
        "schema": "CREATE TABLE CLASS (CLASS_CODE TEXT, CRS_CODE TEXT); CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_CODE TEXT); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE ENROLL (ENROLL_GRADE TEXT, STU_NUM NUMBER, CLASS_CODE TEXT); CREATE TABLE STUDENT (STU_NUM NUMBER, STU_DOB TIME, STU_LNAME TEXT, DEPT_CODE TEXT, PROF_NUM NUMBER, STU_INIT TEXT, STU_FNAME TEXT, STU_CLASS TEXT);"
      },
      {
        "question": "How many students got an A?",
        "query": "SELECT COUNT ( t1.stu_fname ) FROM student AS t1 JOIN enroll AS t2 ON t1.stu_num = t2.stu_num WHERE t2.enroll_grade = 'A'",
        "schema": "CREATE TABLE DEPARTMENT (DEPT_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE CLASS (CRS_CODE TEXT, CLASS_CODE TEXT); CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_CODE TEXT); CREATE TABLE STUDENT (STU_INIT TEXT, STU_NUM NUMBER, STU_FNAME TEXT, STU_GPA NUMBER, DEPT_CODE TEXT, STU_CLASS TEXT, STU_LNAME TEXT, STU_DOB TIME, STU_HRS NUMBER, PROF_NUM NUMBER); CREATE TABLE ENROLL (ENROLL_GRADE TEXT, CLASS_CODE TEXT, STU_NUM NUMBER);"
      },
      {
        "question": "or a C? | You want the students just with grade \"C\" or including \"A\" | Who got either an A or a C?",
        "query": "SELECT COUNT ( t1.stu_fname ) FROM student AS t1 JOIN enroll AS t2 ON t1.stu_num = t2.stu_num WHERE t2.enroll_grade = 'C' OR t2.enroll_grade = 'A'",
        "schema": "CREATE TABLE STUDENT (STU_HRS NUMBER, STU_DOB TIME, STU_FNAME TEXT, STU_CLASS TEXT, PROF_NUM NUMBER, STU_INIT TEXT, DEPT_CODE TEXT, STU_NUM NUMBER, STU_LNAME TEXT, STU_GPA NUMBER); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE CLASS (CLASS_CODE TEXT, CRS_CODE TEXT); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT); CREATE TABLE COURSE (CRS_CODE TEXT, DEPT_CODE TEXT); CREATE TABLE ENROLL (STU_NUM NUMBER, ENROLL_GRADE TEXT, CLASS_CODE TEXT);"
      }
    ],
    [
      {
        "question": "How many schools are there?",
        "query": "SELECT COUNT ( DISTINCT school_code ) FROM department",
        "schema": "CREATE TABLE ENROLL (CLASS_CODE TEXT); CREATE TABLE STUDENT (STU_NUM NUMBER, DEPT_CODE TEXT); CREATE TABLE CLASS (CLASS_CODE TEXT, PROF_NUM NUMBER, CRS_CODE TEXT); CREATE TABLE PROFESSOR (EMP_NUM NUMBER, DEPT_CODE TEXT); CREATE TABLE DEPARTMENT (DEPT_ADDRESS TEXT, SCHOOL_CODE TEXT, DEPT_NAME TEXT, DEPT_CODE TEXT, EMP_NUM NUMBER); CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER);"
      },
      {
        "question": "What classes did each school offer?",
        "query": "SELECT * , t3.school_code FROM CLASS AS t1 JOIN course AS t2 ON t1.crs_code = t2.crs_code JOIN department AS t3 ON t2.dept_code = t3.dept_code GROUP BY t3.school_code",
        "schema": "CREATE TABLE STUDENT (DEPT_CODE TEXT, STU_NUM NUMBER, STU_CLASS TEXT); CREATE TABLE DEPARTMENT (SCHOOL_CODE TEXT, DEPT_CODE TEXT, DEPT_NAME TEXT, EMP_NUM NUMBER, DEPT_ADDRESS TEXT); CREATE TABLE ENROLL (CLASS_CODE TEXT); CREATE TABLE CLASS (PROF_NUM NUMBER, CLASS_SECTION TEXT, CLASS_CODE TEXT, CRS_CODE TEXT); CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_CODE TEXT); CREATE TABLE PROFESSOR (EMP_NUM NUMBER, DEPT_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER);"
      },
      {
        "question": "What is the number of classes offered by each school?",
        "query": "SELECT COUNT ( * ) , t3.school_code FROM CLASS AS t1 JOIN course AS t2 ON t1.crs_code = t2.crs_code JOIN department AS t3 ON t2.dept_code = t3.dept_code GROUP BY t3.school_code",
        "schema": "CREATE TABLE ENROLL (CLASS_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE DEPARTMENT (SCHOOL_CODE TEXT, DEPT_ADDRESS TEXT, EMP_NUM NUMBER, DEPT_NAME TEXT, DEPT_CODE TEXT); CREATE TABLE STUDENT (STU_NUM NUMBER, DEPT_CODE TEXT, STU_CLASS TEXT); CREATE TABLE PROFESSOR (DEPT_CODE TEXT, EMP_NUM NUMBER); CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_CODE TEXT); CREATE TABLE CLASS (CRS_CODE TEXT, CLASS_CODE TEXT, CLASS_SECTION TEXT, PROF_NUM NUMBER);"
      }
    ],
    [
      {
        "question": "How many professors have either a Ph.D. or a MA degree?",
        "query": "SELECT COUNT ( * ) FROM professor WHERE prof_high_degree = 'Ph.D.' OR prof_high_degree = 'MA'",
        "schema": "CREATE TABLE CLASS (PROF_NUM NUMBER); CREATE TABLE DEPARTMENT (EMP_NUM NUMBER, DEPT_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_LNAME TEXT, EMP_NUM NUMBER, EMP_DOB TIME, EMP_JOBCODE TEXT); CREATE TABLE PROFESSOR (PROF_HIGH_DEGREE TEXT, EMP_NUM NUMBER, PROF_OFFICE TEXT, DEPT_CODE TEXT);"
      },
      {
        "question": "Show me employee number for professors with a Ph.D. degree",
        "query": "SELECT emp_num FROM professor WHERE prof_high_degree = 'Ph.D.'",
        "schema": "CREATE TABLE EMPLOYEE (EMP_LNAME TEXT, EMP_HIREDATE TIME, EMP_DOB TIME, EMP_NUM NUMBER, EMP_FNAME TEXT, EMP_JOBCODE TEXT); CREATE TABLE PROFESSOR (PROF_OFFICE TEXT, DEPT_CODE TEXT, PROF_HIGH_DEGREE TEXT, EMP_NUM NUMBER); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT, EMP_NUM NUMBER); CREATE TABLE CLASS (PROF_NUM NUMBER);"
      },
      {
        "question": "Show me professor office for professors with a MA degree",
        "query": "SELECT prof_office FROM professor WHERE prof_high_degree = 'MA'",
        "schema": "CREATE TABLE PROFESSOR (EMP_NUM NUMBER, PROF_OFFICE TEXT, DEPT_CODE TEXT, PROF_HIGH_DEGREE TEXT); CREATE TABLE DEPARTMENT (EMP_NUM NUMBER, DEPT_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_JOBCODE TEXT, EMP_HIREDATE TIME, EMP_DOB TIME, EMP_NUM NUMBER, EMP_FNAME TEXT, EMP_LNAME TEXT); CREATE TABLE CLASS (PROF_NUM NUMBER);"
      }
    ],
    [
      {
        "question": "What is the name of the department that has the largest number of students enrolled?",
        "query": "SELECT t4.dept_name FROM CLASS AS t1 JOIN enroll AS t2 ON t1.class_code = t2.class_code JOIN course AS t3 ON t1.crs_code = t3.crs_code JOIN department AS t4 ON t3.dept_code = t4.dept_code GROUP BY t3.dept_code ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE CLASS (CRS_CODE TEXT, CLASS_CODE TEXT); CREATE TABLE STUDENT (STU_FNAME TEXT, STU_CLASS TEXT, PROF_NUM NUMBER, STU_NUM NUMBER, DEPT_CODE TEXT, STU_LNAME TEXT, STU_INIT TEXT, STU_DOB TIME); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT, DEPT_EXTENSION TEXT, EMP_NUM NUMBER, SCHOOL_CODE TEXT, DEPT_NAME TEXT); CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE ENROLL (CLASS_CODE TEXT, STU_NUM NUMBER); CREATE TABLE PROFESSOR (DEPT_CODE TEXT);"
      },
      {
        "question": "What's that department's address?",
        "query": "SELECT t4.dept_address FROM CLASS AS t1 JOIN enroll AS t2 ON t1.class_code = t2.class_code JOIN course AS t3 ON t1.crs_code = t3.crs_code JOIN department AS t4 ON t3.dept_code = t4.dept_code GROUP BY t3.dept_code ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_CODE TEXT); CREATE TABLE CLASS (CRS_CODE TEXT, CLASS_CODE TEXT); CREATE TABLE DEPARTMENT (SCHOOL_CODE TEXT, DEPT_EXTENSION TEXT, EMP_NUM NUMBER, DEPT_NAME TEXT, DEPT_CODE TEXT, DEPT_ADDRESS TEXT); CREATE TABLE ENROLL (STU_NUM NUMBER, CLASS_CODE TEXT); CREATE TABLE STUDENT (STU_NUM NUMBER, STU_CLASS TEXT, STU_LNAME TEXT, STU_FNAME TEXT, STU_INIT TEXT, PROF_NUM NUMBER, STU_DOB TIME, DEPT_CODE TEXT); CREATE TABLE PROFESSOR (DEPT_CODE TEXT);"
      },
      {
        "question": "How about employee number?",
        "query": "SELECT t4.emp_num FROM CLASS AS t1 JOIN enroll AS t2 ON t1.class_code = t2.class_code JOIN course AS t3 ON t1.crs_code = t3.crs_code JOIN department AS t4 ON t3.dept_code = t4.dept_code GROUP BY t3.dept_code ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_CODE TEXT); CREATE TABLE STUDENT (STU_DOB TIME, PROF_NUM NUMBER, STU_CLASS TEXT, STU_NUM NUMBER, STU_FNAME TEXT, STU_LNAME TEXT, STU_INIT TEXT, DEPT_CODE TEXT); CREATE TABLE DEPARTMENT (DEPT_EXTENSION TEXT, EMP_NUM NUMBER, DEPT_NAME TEXT, SCHOOL_CODE TEXT, DEPT_CODE TEXT, DEPT_ADDRESS TEXT); CREATE TABLE ENROLL (STU_NUM NUMBER, CLASS_CODE TEXT); CREATE TABLE PROFESSOR (EMP_NUM NUMBER, PROF_OFFICE TEXT, DEPT_CODE TEXT); CREATE TABLE CLASS (CLASS_CODE TEXT, CRS_CODE TEXT, PROF_NUM NUMBER); CREATE TABLE EMPLOYEE (EMP_LNAME TEXT, EMP_NUM NUMBER, EMP_DOB TIME, EMP_JOBCODE TEXT);"
      }
    ],
    [
      {
        "question": "What are the first names of all students who are taking classes from the accounting department?",
        "query": "SELECT t1.stu_fname FROM student AS t1 JOIN enroll AS t2 ON t1.stu_num = t2.stu_num JOIN CLASS AS t3 ON t2.class_code = t3.class_code JOIN course AS t4 ON t3.crs_code = t4.crs_code JOIN department AS t5 ON t5.dept_code = t4.dept_code WHERE t5.dept_name = 'Accounting'",
        "schema": "CREATE TABLE ENROLL (STU_NUM NUMBER, CLASS_CODE TEXT); CREATE TABLE DEPARTMENT (SCHOOL_CODE TEXT, EMP_NUM NUMBER, DEPT_CODE TEXT, DEPT_NAME TEXT); CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE STUDENT (PROF_NUM NUMBER, STU_FNAME TEXT, DEPT_CODE TEXT, STU_INIT TEXT, STU_CLASS TEXT, STU_DOB TIME, STU_NUM NUMBER, STU_LNAME TEXT); CREATE TABLE PROFESSOR (DEPT_CODE TEXT); CREATE TABLE CLASS (CRS_CODE TEXT, CLASS_CODE TEXT, PROF_NUM NUMBER);"
      },
      {
        "question": "What are the first names of all students who are taking classes from the Computer Info. Systems department?",
        "query": "SELECT t1.stu_fname FROM student AS t1 JOIN enroll AS t2 ON t1.stu_num = t2.stu_num JOIN CLASS AS t3 ON t2.class_code = t3.class_code JOIN course AS t4 ON t3.crs_code = t4.crs_code JOIN department AS t5 ON t5.dept_code = t4.dept_code WHERE t5.dept_name = 'Computer Info. Systems'",
        "schema": "CREATE TABLE STUDENT (STU_INIT TEXT, STU_DOB TIME, STU_CLASS TEXT, DEPT_CODE TEXT, STU_LNAME TEXT, STU_FNAME TEXT, PROF_NUM NUMBER, STU_NUM NUMBER); CREATE TABLE ENROLL (STU_NUM NUMBER, CLASS_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE CLASS (CLASS_CODE TEXT, CRS_CODE TEXT, PROF_NUM NUMBER); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT, EMP_NUM NUMBER, DEPT_NAME TEXT, SCHOOL_CODE TEXT); CREATE TABLE PROFESSOR (DEPT_CODE TEXT); CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_CODE TEXT);"
      },
      {
        "question": "What are the first names of all students who are taking classes from both the accounting department and the Computer Info. Systems department?",
        "query": "SELECT t1.stu_fname FROM student AS t1 JOIN enroll AS t2 ON t1.stu_num = t2.stu_num JOIN CLASS AS t3 ON t2.class_code = t3.class_code JOIN course AS t4 ON t3.crs_code = t4.crs_code JOIN department AS t5 ON t5.dept_code = t4.dept_code WHERE t5.dept_name = 'Accounting' INTERSECT SELECT t1.stu_fname FROM student AS t1 JOIN enroll AS t2 ON t1.stu_num = t2.stu_num JOIN CLASS AS t3 ON t2.class_code = t3.class_code JOIN course AS t4 ON t3.crs_code = t4.crs_code JOIN department AS t5 ON t5.dept_code = t4.dept_code WHERE t5.dept_name = 'Computer Info. Systems'",
        "schema": "CREATE TABLE DEPARTMENT (SCHOOL_CODE TEXT, DEPT_CODE TEXT, DEPT_NAME TEXT, EMP_NUM NUMBER); CREATE TABLE PROFESSOR (DEPT_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE ENROLL (CLASS_CODE TEXT, STU_NUM NUMBER); CREATE TABLE COURSE (CRS_CODE TEXT, DEPT_CODE TEXT); CREATE TABLE STUDENT (DEPT_CODE TEXT, STU_CLASS TEXT, STU_FNAME TEXT, STU_INIT TEXT, PROF_NUM NUMBER, STU_NUM NUMBER, STU_LNAME TEXT, STU_DOB TIME); CREATE TABLE CLASS (CRS_CODE TEXT, CLASS_CODE TEXT, PROF_NUM NUMBER);"
      }
    ],
    [
      {
        "question": "Could you please find all the names of the students who took some course and got an A?",
        "query": "SELECT t1.stu_fname , t1.stu_lname FROM student AS t1 JOIN enroll AS t2 ON t1.stu_num = t2.stu_num WHERE t2.enroll_grade = 'A'",
        "schema": "CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT); CREATE TABLE COURSE (CRS_CODE TEXT); CREATE TABLE CLASS (CRS_CODE TEXT, CLASS_CODE TEXT); CREATE TABLE ENROLL (ENROLL_GRADE TEXT, STU_NUM NUMBER, CLASS_CODE TEXT); CREATE TABLE STUDENT (STU_CLASS TEXT, STU_NUM NUMBER, STU_GPA NUMBER, STU_FNAME TEXT, STU_LNAME TEXT, STU_INIT TEXT, DEPT_CODE TEXT, STU_DOB TIME, PROF_NUM NUMBER);"
      },
      {
        "question": "Could you please find all the names of the students who took some course and got a C?",
        "query": "SELECT t1.stu_fname , t1.stu_lname FROM student AS t1 JOIN enroll AS t2 ON t1.stu_num = t2.stu_num WHERE t2.enroll_grade = 'C'",
        "schema": "CREATE TABLE ENROLL (STU_NUM NUMBER, ENROLL_GRADE TEXT, CLASS_CODE TEXT); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT); CREATE TABLE STUDENT (STU_CLASS TEXT, STU_DOB TIME, PROF_NUM NUMBER, DEPT_CODE TEXT, STU_FNAME TEXT, STU_NUM NUMBER, STU_LNAME TEXT, STU_INIT TEXT, STU_GPA NUMBER); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE CLASS (CRS_CODE TEXT, CLASS_CODE TEXT); CREATE TABLE COURSE (CRS_CODE TEXT);"
      },
      {
        "question": "What are their student numbers?",
        "query": "SELECT t1.stu_num FROM student AS t1 JOIN enroll AS t2 ON t1.stu_num = t2.stu_num WHERE t2.enroll_grade = 'C'",
        "schema": "CREATE TABLE STUDENT (STU_GPA NUMBER, STU_NUM NUMBER, PROF_NUM NUMBER, STU_FNAME TEXT, STU_CLASS TEXT, STU_INIT TEXT, STU_DOB TIME, DEPT_CODE TEXT, STU_LNAME TEXT); CREATE TABLE CLASS (CRS_CODE TEXT, CLASS_CODE TEXT); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE ENROLL (STU_NUM NUMBER, ENROLL_GRADE TEXT, CLASS_CODE TEXT); CREATE TABLE COURSE (CRS_CODE TEXT);"
      },
      {
        "question": "What are the class codes for the students who took some course and got a C?",
        "query": "SELECT t2.class_code FROM student AS t1 JOIN enroll AS t2 ON t1.stu_num = t2.stu_num WHERE t2.enroll_grade = 'C'",
        "schema": "CREATE TABLE DEPARTMENT (DEPT_CODE TEXT); CREATE TABLE COURSE (CRS_CODE TEXT); CREATE TABLE CLASS (CLASS_CODE TEXT, PROF_NUM NUMBER, CRS_CODE TEXT); CREATE TABLE ENROLL (CLASS_CODE TEXT, STU_NUM NUMBER, ENROLL_GRADE TEXT); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE STUDENT (PROF_NUM NUMBER, STU_GPA NUMBER, STU_INIT TEXT, STU_NUM NUMBER, STU_FNAME TEXT, DEPT_CODE TEXT, STU_LNAME TEXT, STU_DOB TIME, STU_CLASS TEXT);"
      },
      {
        "question": "What are the student class and gpa of each of those students?",
        "query": "SELECT stu_class, stu_gpa FROM student AS t1 JOIN enroll AS t2 ON t1.stu_num = t2.stu_num WHERE t2.enroll_grade = 'C'",
        "schema": "CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE CLASS (CLASS_CODE TEXT, CRS_CODE TEXT, PROF_NUM NUMBER); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT); CREATE TABLE ENROLL (CLASS_CODE TEXT, STU_NUM NUMBER, ENROLL_GRADE TEXT); CREATE TABLE COURSE (CRS_CODE TEXT, CRS_CREDIT NUMBER); CREATE TABLE STUDENT (PROF_NUM NUMBER, STU_INIT TEXT, STU_CLASS TEXT, STU_NUM NUMBER, STU_FNAME TEXT, STU_LNAME TEXT, DEPT_CODE TEXT, STU_DOB TIME, STU_GPA NUMBER);"
      }
    ],
    [
      {
        "question": "Hello  Can you provide me with a list of all of the different department names?",
        "query": "SELECT dept_name FROM department",
        "schema": "CREATE TABLE DEPARTMENT (DEPT_CODE TEXT, DEPT_NAME TEXT, DEPT_EXTENSION TEXT, SCHOOL_CODE TEXT, EMP_NUM NUMBER); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE STUDENT (PROF_NUM NUMBER, DEPT_CODE TEXT); CREATE TABLE PROFESSOR (EMP_NUM NUMBER, DEPT_CODE TEXT); CREATE TABLE CLASS (PROF_NUM NUMBER); CREATE TABLE COURSE (CRS_CODE TEXT, DEPT_CODE TEXT);"
      },
      {
        "question": "That's great!  Now can you update this list to include the total number of students for each department?",
        "query": "SELECT t2.dept_name, COUNT ( * ) FROM student AS t1 JOIN department AS t2 ON t1.dept_code = t2.dept_code GROUP BY t1.dept_code",
        "schema": "CREATE TABLE COURSE (CRS_CODE TEXT, DEPT_CODE TEXT); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT, SCHOOL_CODE TEXT, DEPT_EXTENSION TEXT, DEPT_NAME TEXT, EMP_NUM NUMBER); CREATE TABLE STUDENT (STU_INIT TEXT, STU_DOB TIME, STU_GPA NUMBER, STU_LNAME TEXT, STU_NUM NUMBER, PROF_NUM NUMBER, STU_CLASS TEXT, DEPT_CODE TEXT, STU_HRS NUMBER); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE ENROLL (CLASS_CODE TEXT); CREATE TABLE CLASS (CRS_CODE TEXT, CLASS_CODE TEXT, PROF_NUM NUMBER); CREATE TABLE PROFESSOR (DEPT_CODE TEXT, EMP_NUM NUMBER);"
      },
      {
        "question": "Can you update this list to show the Department Name, Department Address, and number of students for the 3 departments with the highest number of students?",
        "query": "SELECT t2.dept_name , t2.dept_address , COUNT ( * ) FROM student AS t1 JOIN department AS t2 ON t1.dept_code = t2.dept_code GROUP BY t1.dept_code ORDER BY COUNT ( * ) DESC LIMIT 3",
        "schema": "CREATE TABLE PROFESSOR (DEPT_CODE TEXT, EMP_NUM NUMBER); CREATE TABLE CLASS (PROF_NUM NUMBER, CLASS_CODE TEXT, CRS_CODE TEXT); CREATE TABLE DEPARTMENT (SCHOOL_CODE TEXT, DEPT_NAME TEXT, DEPT_ADDRESS TEXT, EMP_NUM NUMBER, DEPT_EXTENSION TEXT, DEPT_CODE TEXT); CREATE TABLE STUDENT (STU_HRS NUMBER, STU_DOB TIME, STU_CLASS TEXT, STU_INIT TEXT, DEPT_CODE TEXT, STU_NUM NUMBER, STU_GPA NUMBER, PROF_NUM NUMBER, STU_LNAME TEXT); CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_CODE TEXT); CREATE TABLE ENROLL (CLASS_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER);"
      }
    ],
    [
      {
        "question": "How many students are enrolled in any type of accounting course? | Do you mean the course taught by some professor from the accounting department? | Yes",
        "query": "SELECT COUNT ( * ) FROM CLASS AS t1 JOIN enroll AS t2 ON t1.class_code = t2.class_code JOIN course AS t3 ON t1.crs_code = t3.crs_code JOIN department AS t4 ON t3.dept_code = t4.dept_code WHERE t4.dept_name = 'Accounting'",
        "schema": "CREATE TABLE CLASS (PROF_NUM NUMBER, CLASS_SECTION TEXT, CLASS_CODE TEXT, CRS_CODE TEXT); CREATE TABLE STUDENT (STU_NUM NUMBER, STU_INIT TEXT, DEPT_CODE TEXT, STU_DOB TIME, PROF_NUM NUMBER, STU_CLASS TEXT); CREATE TABLE PROFESSOR (DEPT_CODE TEXT, PROF_OFFICE TEXT, EMP_NUM NUMBER); CREATE TABLE DEPARTMENT (DEPT_NAME TEXT, DEPT_CODE TEXT, SCHOOL_CODE TEXT, EMP_NUM NUMBER); CREATE TABLE EMPLOYEE (EMP_DOB TIME, EMP_HIREDATE TIME, EMP_JOBCODE TEXT, EMP_INITIAL TEXT, EMP_LNAME TEXT, EMP_NUM NUMBER); CREATE TABLE COURSE (CRS_CODE TEXT, DEPT_CODE TEXT); CREATE TABLE ENROLL (CLASS_CODE TEXT, STU_NUM NUMBER);"
      },
      {
        "question": "And what are their student numbers?",
        "query": "SELECT t2.stu_num FROM CLASS AS t1 JOIN enroll AS t2 ON t1.class_code = t2.class_code JOIN course AS t3 ON t1.crs_code = t3.crs_code JOIN department AS t4 ON t3.dept_code = t4.dept_code WHERE t4.dept_name = 'Accounting'",
        "schema": "CREATE TABLE DEPARTMENT (SCHOOL_CODE TEXT, DEPT_CODE TEXT, DEPT_NAME TEXT, EMP_NUM NUMBER); CREATE TABLE STUDENT (STU_LNAME TEXT, STU_NUM NUMBER, PROF_NUM NUMBER, STU_DOB TIME, STU_INIT TEXT, DEPT_CODE TEXT, STU_FNAME TEXT, STU_CLASS TEXT); CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_INITIAL TEXT, EMP_JOBCODE TEXT, EMP_HIREDATE TIME, EMP_NUM NUMBER, EMP_DOB TIME, EMP_LNAME TEXT); CREATE TABLE ENROLL (STU_NUM NUMBER, CLASS_CODE TEXT); CREATE TABLE CLASS (CLASS_SECTION TEXT, CRS_CODE TEXT, CLASS_CODE TEXT, PROF_NUM NUMBER); CREATE TABLE PROFESSOR (EMP_NUM NUMBER, PROF_OFFICE TEXT, DEPT_CODE TEXT);"
      },
      {
        "question": "And what about the course code that they are enrolled in?",
        "query": "SELECT t3.crs_code FROM CLASS AS t1 JOIN enroll AS t2 ON t1.class_code = t2.class_code JOIN course AS t3 ON t1.crs_code = t3.crs_code JOIN department AS t4 ON t3.dept_code = t4.dept_code WHERE t4.dept_name = 'Accounting'",
        "schema": "CREATE TABLE ENROLL (CLASS_CODE TEXT, STU_NUM NUMBER); CREATE TABLE PROFESSOR (DEPT_CODE TEXT, EMP_NUM NUMBER, PROF_OFFICE TEXT); CREATE TABLE CLASS (CLASS_CODE TEXT, PROF_NUM NUMBER, CLASS_SECTION TEXT, CRS_CODE TEXT); CREATE TABLE DEPARTMENT (EMP_NUM NUMBER, SCHOOL_CODE TEXT, DEPT_CODE TEXT, DEPT_NAME TEXT); CREATE TABLE COURSE (CRS_CODE TEXT, DEPT_CODE TEXT); CREATE TABLE STUDENT (STU_FNAME TEXT, STU_DOB TIME, STU_INIT TEXT, STU_NUM NUMBER, STU_LNAME TEXT, DEPT_CODE TEXT, STU_CLASS TEXT, PROF_NUM NUMBER); CREATE TABLE EMPLOYEE (EMP_HIREDATE TIME, EMP_JOBCODE TEXT, EMP_INITIAL TEXT, EMP_NUM NUMBER, EMP_LNAME TEXT, EMP_DOB TIME);"
      },
      {
        "question": "Yes, what is the class time? | Do you want to know all class time? | NO, only for ACCT-211",
        "query": "SELECT class_time FROM CLASS WHERE crs_code = \"ACCT-211\"",
        "schema": "CREATE TABLE CLASS (PROF_NUM NUMBER, CLASS_SECTION TEXT, CLASS_TIME TEXT, CLASS_CODE TEXT, CRS_CODE TEXT); CREATE TABLE ENROLL (STU_NUM NUMBER, CLASS_CODE TEXT); CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_HIREDATE TIME, EMP_NUM NUMBER, EMP_INITIAL TEXT, EMP_JOBCODE TEXT, EMP_LNAME TEXT, EMP_DOB TIME); CREATE TABLE STUDENT (STU_INIT TEXT, STU_CLASS TEXT, STU_LNAME TEXT, STU_FNAME TEXT, STU_DOB TIME, STU_NUM NUMBER, DEPT_CODE TEXT, PROF_NUM NUMBER); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT, SCHOOL_CODE TEXT, DEPT_NAME TEXT, EMP_NUM NUMBER); CREATE TABLE PROFESSOR (EMP_NUM NUMBER, DEPT_CODE TEXT, PROF_OFFICE TEXT);"
      }
    ],
    [
      {
        "question": "Could you find the names of all the departments, please?",
        "query": "SELECT dept_name FROM department",
        "schema": "CREATE TABLE DEPARTMENT (DEPT_NAME TEXT, SCHOOL_CODE TEXT, DEPT_CODE TEXT, EMP_NUM NUMBER); CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_CODE TEXT); CREATE TABLE STUDENT (DEPT_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE CLASS (PROF_NUM NUMBER, CRS_CODE TEXT); CREATE TABLE PROFESSOR (EMP_NUM NUMBER, DEPT_CODE TEXT);"
      },
      {
        "question": "What about classes with the course description \"Statistics\"?",
        "query": "SELECT * FROM course WHERE crs_description LIKE '%Statistics%'",
        "schema": "CREATE TABLE DEPARTMENT (DEPT_NAME TEXT, SCHOOL_CODE TEXT, DEPT_CODE TEXT, EMP_NUM NUMBER); CREATE TABLE CLASS (PROF_NUM NUMBER, CRS_CODE TEXT, CLASS_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE STUDENT (DEPT_CODE TEXT); CREATE TABLE PROFESSOR (DEPT_CODE TEXT, EMP_NUM NUMBER); CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_CODE TEXT, CRS_DESCRIPTION TEXT);"
      },
      {
        "question": "What department name offers that course description?",
        "query": "SELECT t2.dept_name FROM course AS t1 JOIN department AS t2 ON t1.dept_code = t2.dept_code WHERE t1.crs_description LIKE '%Statistics%'",
        "schema": "CREATE TABLE STUDENT (DEPT_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE PROFESSOR (DEPT_CODE TEXT, EMP_NUM NUMBER); CREATE TABLE CLASS (CLASS_CODE TEXT, CRS_CODE TEXT, PROF_NUM NUMBER); CREATE TABLE DEPARTMENT (SCHOOL_CODE TEXT, EMP_NUM NUMBER, DEPT_CODE TEXT, DEPT_NAME TEXT); CREATE TABLE COURSE (CRS_DESCRIPTION TEXT, CRS_CODE TEXT, DEPT_CODE TEXT);"
      },
      {
        "question": "How many course credits are each of those worth?",
        "query": "SELECT crs_credit FROM course WHERE crs_code IN ( SELECT t1.crs_code FROM course AS t1 JOIN department AS t2 ON t1.dept_code = t2.dept_code WHERE t2.dept_name = \"Computer Info. Systems\" )",
        "schema": "CREATE TABLE DEPARTMENT (SCHOOL_CODE TEXT, DEPT_CODE TEXT, EMP_NUM NUMBER, DEPT_NAME TEXT); CREATE TABLE COURSE (CRS_DESCRIPTION TEXT, CRS_CREDIT NUMBER, CRS_CODE TEXT, DEPT_CODE TEXT); CREATE TABLE CLASS (CLASS_CODE TEXT, CRS_CODE TEXT, PROF_NUM NUMBER); CREATE TABLE PROFESSOR (DEPT_CODE TEXT, EMP_NUM NUMBER); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE STUDENT (DEPT_CODE TEXT);"
      }
    ],
    [
      {
        "question": "How many students in this table?",
        "query": "SELECT COUNT ( * ) FROM student",
        "schema": "CREATE TABLE DEPARTMENT (DEPT_CODE TEXT); CREATE TABLE STUDENT (STU_DOB TIME, PROF_NUM NUMBER, STU_NUM NUMBER, STU_CLASS TEXT, STU_FNAME TEXT, STU_GPA NUMBER, STU_INIT TEXT, STU_LNAME TEXT, DEPT_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE PROFESSOR (DEPT_CODE TEXT); CREATE TABLE COURSE (CRS_CODE TEXT); CREATE TABLE CLASS (CLASS_CODE TEXT, CRS_CODE TEXT, PROF_NUM NUMBER); CREATE TABLE ENROLL (STU_NUM NUMBER, CLASS_CODE TEXT);"
      },
      {
        "question": "Find name of all students? | Do you mean First or Last name of the students? | Find the average student GPA?",
        "query": "SELECT AVG ( stu_gpa ) FROM student",
        "schema": "CREATE TABLE ENROLL (CLASS_CODE TEXT, STU_NUM NUMBER); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE COURSE (CRS_CODE TEXT); CREATE TABLE STUDENT (STU_INIT TEXT, STU_CLASS TEXT, STU_LNAME TEXT, STU_FNAME TEXT, STU_NUM NUMBER, PROF_NUM NUMBER, STU_DOB TIME, STU_GPA NUMBER, DEPT_CODE TEXT); CREATE TABLE PROFESSOR (DEPT_CODE TEXT); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT); CREATE TABLE CLASS (PROF_NUM NUMBER, CLASS_CODE TEXT, CRS_CODE TEXT);"
      },
      {
        "question": "Find top enroll grade?",
        "query": "SELECT enroll_grade FROM enroll ORDER BY enroll_grade ASC LIMIT 1",
        "schema": "CREATE TABLE STUDENT (STU_FNAME TEXT, STU_DOB TIME, STU_LNAME TEXT, STU_CLASS TEXT, STU_GPA NUMBER, PROF_NUM NUMBER, STU_NUM NUMBER, DEPT_CODE TEXT, STU_INIT TEXT); CREATE TABLE CLASS (CRS_CODE TEXT, PROF_NUM NUMBER, CLASS_CODE TEXT); CREATE TABLE COURSE (CRS_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE PROFESSOR (DEPT_CODE TEXT); CREATE TABLE ENROLL (ENROLL_GRADE TEXT, STU_NUM NUMBER, CLASS_CODE TEXT); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT);"
      },
      {
        "question": "Find the names of all students who took some course and the course description?",
        "query": "SELECT t1.stu_fname , t1.stu_lname , t4.crs_description FROM student AS t1 JOIN enroll AS t2 ON t1.stu_num = t2.stu_num JOIN CLASS AS t3 ON t2.class_code = t3.class_code JOIN course AS t4 ON t3.crs_code = t4.crs_code",
        "schema": "CREATE TABLE PROFESSOR (DEPT_CODE TEXT); CREATE TABLE STUDENT (STU_NUM NUMBER, STU_DOB TIME, STU_FNAME TEXT, STU_INIT TEXT, STU_LNAME TEXT, STU_GPA NUMBER, STU_CLASS TEXT, PROF_NUM NUMBER, DEPT_CODE TEXT); CREATE TABLE COURSE (CRS_CODE TEXT, CRS_DESCRIPTION TEXT); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE ENROLL (ENROLL_GRADE TEXT, CLASS_CODE TEXT, STU_NUM NUMBER); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT); CREATE TABLE CLASS (CLASS_CODE TEXT, PROF_NUM NUMBER, CRS_CODE TEXT);"
      }
    ],
    [
      {
        "question": "Hello. How many classes are there?",
        "query": "SELECT COUNT ( * ) FROM CLASS",
        "schema": "CREATE TABLE DEPARTMENT (DEPT_NAME TEXT, DEPT_CODE TEXT, EMP_NUM NUMBER, SCHOOL_CODE TEXT); CREATE TABLE STUDENT (STU_CLASS TEXT, STU_NUM NUMBER, STU_DOB TIME, STU_INIT TEXT, DEPT_CODE TEXT); CREATE TABLE PROFESSOR (EMP_NUM NUMBER, DEPT_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE ENROLL (STU_NUM NUMBER, CLASS_CODE TEXT); CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_CODE TEXT); CREATE TABLE CLASS (CLASS_CODE TEXT, CRS_CODE TEXT, CLASS_ROOM TEXT, PROF_NUM NUMBER, CLASS_SECTION TEXT);"
      },
      {
        "question": "How many different professors are there?",
        "query": "SELECT COUNT ( DISTINCT emp_num ) FROM employee WHERE emp_jobcode = 'PROF'",
        "schema": "CREATE TABLE CLASS (CRS_CODE TEXT, CLASS_SECTION TEXT, CLASS_ROOM TEXT, CLASS_CODE TEXT, PROF_NUM NUMBER); CREATE TABLE DEPARTMENT (DEPT_NAME TEXT, DEPT_CODE TEXT, EMP_NUM NUMBER, SCHOOL_CODE TEXT); CREATE TABLE PROFESSOR (EMP_NUM NUMBER, PROF_OFFICE TEXT, PROF_HIGH_DEGREE TEXT, PROF_EXTENSION TEXT, DEPT_CODE TEXT); CREATE TABLE COURSE (CRS_CODE TEXT, DEPT_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_INITIAL TEXT, EMP_DOB TIME, EMP_HIREDATE TIME, EMP_NUM NUMBER, EMP_LNAME TEXT, EMP_FNAME TEXT, EMP_JOBCODE TEXT); CREATE TABLE STUDENT (DEPT_CODE TEXT, STU_INIT TEXT, STU_CLASS TEXT, STU_NUM NUMBER, STU_DOB TIME); CREATE TABLE ENROLL (CLASS_CODE TEXT, STU_NUM NUMBER);"
      }
    ],
    [
      {
        "question": "Can you list all the schools that have less than 5 different departments? | BUS is the school code for schools with less than 5 different departments. | Can you list the number of departments with school code BUS?",
        "query": "SELECT COUNT ( DISTINCT dept_name ) FROM department WHERE school_code = \"BUS\"",
        "schema": "CREATE TABLE STUDENT (DEPT_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT, EMP_NUM NUMBER, SCHOOL_CODE TEXT, DEPT_NAME TEXT); CREATE TABLE PROFESSOR (DEPT_CODE TEXT); CREATE TABLE CLASS (CRS_CODE TEXT); CREATE TABLE COURSE (CRS_CODE TEXT, DEPT_CODE TEXT);"
      }
    ],
    [
      {
        "question": "Tell me class code for class room BUS311 ?",
        "query": "SELECT class_code FROM CLASS WHERE class_room = 'BUS311'",
        "schema": "CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE DEPARTMENT (DEPT_NAME TEXT, SCHOOL_CODE TEXT, DEPT_CODE TEXT); CREATE TABLE PROFESSOR (DEPT_CODE TEXT); CREATE TABLE CLASS (CLASS_ROOM TEXT, CLASS_CODE TEXT, CRS_CODE TEXT); CREATE TABLE STUDENT (DEPT_CODE TEXT, STU_CLASS TEXT); CREATE TABLE COURSE (CRS_CODE TEXT, DEPT_CODE TEXT);"
      },
      {
        "question": "Tell me professor employee number for course code ACCT-211 ?",
        "query": "SELECT prof_num FROM CLASS WHERE crs_code = 'ACCT-211'",
        "schema": "CREATE TABLE CLASS (CLASS_CODE TEXT, CLASS_ROOM TEXT, PROF_NUM NUMBER, CRS_CODE TEXT); CREATE TABLE STUDENT (STU_CLASS TEXT, DEPT_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_HIREDATE TIME, EMP_LNAME TEXT, EMP_DOB TIME, EMP_JOBCODE TEXT, EMP_FNAME TEXT, EMP_NUM NUMBER); CREATE TABLE DEPARTMENT (EMP_NUM NUMBER, DEPT_NAME TEXT, DEPT_CODE TEXT, SCHOOL_CODE TEXT); CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_CODE TEXT); CREATE TABLE PROFESSOR (PROF_OFFICE TEXT, DEPT_CODE TEXT, EMP_NUM NUMBER);"
      },
      {
        "question": "Tell me the class time for class section 3 ?",
        "query": "SELECT class_time FROM CLASS WHERE class_section = 3",
        "schema": "CREATE TABLE STUDENT (DEPT_CODE TEXT, STU_HRS NUMBER, STU_CLASS TEXT); CREATE TABLE EMPLOYEE (EMP_FNAME TEXT, EMP_LNAME TEXT, EMP_HIREDATE TIME, EMP_DOB TIME, EMP_NUM NUMBER, EMP_JOBCODE TEXT); CREATE TABLE COURSE (CRS_CODE TEXT, DEPT_CODE TEXT); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT, DEPT_NAME TEXT, SCHOOL_CODE TEXT, EMP_NUM NUMBER); CREATE TABLE PROFESSOR (DEPT_CODE TEXT, EMP_NUM NUMBER, PROF_OFFICE TEXT); CREATE TABLE CLASS (PROF_NUM NUMBER, CLASS_CODE TEXT, CLASS_ROOM TEXT, CLASS_TIME TEXT, CRS_CODE TEXT, CLASS_SECTION TEXT);"
      },
      {
        "question": "Find the number of classes offered for all class rooms that held at least 2 classes ?",
        "query": "SELECT COUNT ( * ) , class_room FROM CLASS GROUP BY class_room HAVING COUNT ( * ) > = 2",
        "schema": "CREATE TABLE EMPLOYEE (EMP_LNAME TEXT, EMP_NUM NUMBER, EMP_JOBCODE TEXT, EMP_FNAME TEXT, EMP_DOB TIME, EMP_HIREDATE TIME); CREATE TABLE STUDENT (STU_HRS NUMBER, STU_CLASS TEXT, DEPT_CODE TEXT); CREATE TABLE DEPARTMENT (EMP_NUM NUMBER, DEPT_CODE TEXT, DEPT_NAME TEXT, SCHOOL_CODE TEXT); CREATE TABLE PROFESSOR (PROF_OFFICE TEXT, EMP_NUM NUMBER, DEPT_CODE TEXT); CREATE TABLE CLASS (CLASS_TIME TEXT, PROF_NUM NUMBER, CLASS_ROOM TEXT, CLASS_SECTION TEXT, CLASS_CODE TEXT, CRS_CODE TEXT); CREATE TABLE COURSE (CRS_CODE TEXT, DEPT_CODE TEXT);"
      }
    ],
    [
      {
        "question": "How many professors in the school?",
        "query": "SELECT COUNT ( * ) FROM professor",
        "schema": "CREATE TABLE EMPLOYEE (EMP_DOB TIME, EMP_NUM NUMBER); CREATE TABLE CLASS (PROF_NUM NUMBER, CRS_CODE TEXT, CLASS_CODE TEXT); CREATE TABLE PROFESSOR (PROF_HIGH_DEGREE TEXT, PROF_OFFICE TEXT, EMP_NUM NUMBER, DEPT_CODE TEXT); CREATE TABLE DEPARTMENT (EMP_NUM NUMBER, DEPT_NAME TEXT, SCHOOL_CODE TEXT, DEPT_CODE TEXT); CREATE TABLE STUDENT (DEPT_CODE TEXT);"
      },
      {
        "question": "And what about the accounting department?",
        "query": "SELECT COUNT ( * ) FROM professor AS t1 JOIN department AS t2 ON t1.dept_code = t2.dept_code WHERE dept_name = \"Accounting\"",
        "schema": "CREATE TABLE EMPLOYEE (EMP_DOB TIME, EMP_NUM NUMBER); CREATE TABLE STUDENT (DEPT_CODE TEXT); CREATE TABLE CLASS (CRS_CODE TEXT, PROF_NUM NUMBER, CLASS_CODE TEXT); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT, EMP_NUM NUMBER, DEPT_NAME TEXT, SCHOOL_CODE TEXT); CREATE TABLE PROFESSOR (DEPT_CODE TEXT, EMP_NUM NUMBER, PROF_OFFICE TEXT, PROF_HIGH_DEGREE TEXT);"
      }
    ],
    [
      {
        "question": "How many courses does the Computer Info. Systems department offer?",
        "query": "SELECT COUNT ( * ) FROM department AS t1 JOIN course AS t2 ON t1.dept_code = t2.dept_code WHERE dept_name = \"Computer Info. Systems\"",
        "schema": "CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE CLASS (CRS_CODE TEXT); CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_DESCRIPTION TEXT, CRS_CODE TEXT); CREATE TABLE DEPARTMENT (EMP_NUM NUMBER, DEPT_CODE TEXT, DEPT_EXTENSION TEXT, DEPT_NAME TEXT, SCHOOL_CODE TEXT); CREATE TABLE STUDENT (DEPT_CODE TEXT); CREATE TABLE PROFESSOR (DEPT_CODE TEXT);"
      },
      {
        "question": "What are the descriptions of those courses?",
        "query": "SELECT crs_description FROM department AS t1 JOIN course AS t2 ON t1.dept_code = t2.dept_code WHERE dept_name = \"Computer Info. Systems\"",
        "schema": "CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE STUDENT (DEPT_CODE TEXT); CREATE TABLE DEPARTMENT (DEPT_NAME TEXT, DEPT_EXTENSION TEXT, SCHOOL_CODE TEXT, EMP_NUM NUMBER, DEPT_CODE TEXT); CREATE TABLE COURSE (CRS_DESCRIPTION TEXT, DEPT_CODE TEXT, CRS_CODE TEXT); CREATE TABLE CLASS (CRS_CODE TEXT); CREATE TABLE PROFESSOR (DEPT_CODE TEXT);"
      },
      {
        "question": "How many courses does the Biology department offer?",
        "query": "SELECT COUNT ( * ) FROM department AS t1 JOIN course AS t2 ON t1.dept_code = t2.dept_code WHERE dept_name = \"Biology\"",
        "schema": "CREATE TABLE STUDENT (DEPT_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE CLASS (CRS_CODE TEXT); CREATE TABLE PROFESSOR (DEPT_CODE TEXT); CREATE TABLE DEPARTMENT (EMP_NUM NUMBER, DEPT_NAME TEXT, SCHOOL_CODE TEXT, DEPT_CODE TEXT, DEPT_EXTENSION TEXT); CREATE TABLE COURSE (CRS_DESCRIPTION TEXT, DEPT_CODE TEXT, CRS_CODE TEXT);"
      },
      {
        "question": "What about the Accounting department?",
        "query": "SELECT COUNT ( * ) FROM department AS t1 JOIN course AS t2 ON t1.dept_code = t2.dept_code WHERE dept_name = \"Accounting\"",
        "schema": "CREATE TABLE PROFESSOR (DEPT_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE CLASS (CRS_CODE TEXT); CREATE TABLE STUDENT (DEPT_CODE TEXT); CREATE TABLE COURSE (CRS_CODE TEXT, DEPT_CODE TEXT, CRS_DESCRIPTION TEXT); CREATE TABLE DEPARTMENT (SCHOOL_CODE TEXT, EMP_NUM NUMBER, DEPT_CODE TEXT, DEPT_NAME TEXT, DEPT_EXTENSION TEXT);"
      },
      {
        "question": "What are the course credits of those courses?",
        "query": "SELECT t2.crs_credit FROM department AS t1 JOIN course AS t2 ON t1.dept_code = t2.dept_code WHERE dept_name = \"Accounting\"",
        "schema": "CREATE TABLE DEPARTMENT (DEPT_CODE TEXT, DEPT_EXTENSION TEXT, DEPT_NAME TEXT, EMP_NUM NUMBER, SCHOOL_CODE TEXT); CREATE TABLE PROFESSOR (DEPT_CODE TEXT); CREATE TABLE COURSE (CRS_CODE TEXT, DEPT_CODE TEXT, CRS_CREDIT NUMBER, CRS_DESCRIPTION TEXT); CREATE TABLE CLASS (CRS_CODE TEXT); CREATE TABLE STUDENT (DEPT_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER);"
      }
    ],
    [
      {
        "question": "Hi - Can you tell me which department has the most students?",
        "query": "SELECT t2.dept_name FROM student AS t1 JOIN department AS t2 ON t1.dept_code = t2.dept_code GROUP BY t1.dept_code ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE ENROLL (CLASS_CODE TEXT, STU_NUM NUMBER); CREATE TABLE CLASS (PROF_NUM NUMBER, CRS_CODE TEXT, CLASS_CODE TEXT); CREATE TABLE PROFESSOR (DEPT_CODE TEXT, EMP_NUM NUMBER); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE DEPARTMENT (DEPT_ADDRESS TEXT, EMP_NUM NUMBER, DEPT_NAME TEXT, SCHOOL_CODE TEXT, DEPT_EXTENSION TEXT, DEPT_CODE TEXT); CREATE TABLE STUDENT (STU_CLASS TEXT, STU_NUM NUMBER, DEPT_CODE TEXT, STU_FNAME TEXT, STU_DOB TIME, STU_LNAME TEXT, PROF_NUM NUMBER, STU_INIT TEXT); CREATE TABLE COURSE (CRS_DESCRIPTION TEXT, CRS_CODE TEXT, DEPT_CODE TEXT);"
      },
      {
        "question": "How many students are in the Accounting department?",
        "query": "SELECT COUNT ( * ) FROM student AS t1 JOIN department AS t2 ON t1.dept_code = t2.dept_code GROUP BY t1.dept_code ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE CLASS (CRS_CODE TEXT, CLASS_CODE TEXT, PROF_NUM NUMBER); CREATE TABLE ENROLL (CLASS_CODE TEXT, STU_NUM NUMBER); CREATE TABLE DEPARTMENT (DEPT_ADDRESS TEXT, EMP_NUM NUMBER, SCHOOL_CODE TEXT, DEPT_CODE TEXT, DEPT_NAME TEXT, DEPT_EXTENSION TEXT); CREATE TABLE PROFESSOR (DEPT_CODE TEXT, EMP_NUM NUMBER); CREATE TABLE STUDENT (STU_NUM NUMBER, STU_CLASS TEXT, STU_DOB TIME, PROF_NUM NUMBER, STU_FNAME TEXT, DEPT_CODE TEXT, STU_LNAME TEXT, STU_INIT TEXT); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_DESCRIPTION TEXT, CRS_CODE TEXT);"
      },
      {
        "question": "Please tell me the address of the Accounting department.",
        "query": "SELECT dept_address FROM department WHERE dept_name = \"Accounting\"",
        "schema": "CREATE TABLE DEPARTMENT (EMP_NUM NUMBER, SCHOOL_CODE TEXT, DEPT_CODE TEXT, DEPT_EXTENSION TEXT, DEPT_ADDRESS TEXT, DEPT_NAME TEXT); CREATE TABLE STUDENT (STU_FNAME TEXT, STU_INIT TEXT, STU_NUM NUMBER, PROF_NUM NUMBER, STU_DOB TIME, STU_LNAME TEXT, DEPT_CODE TEXT, STU_CLASS TEXT); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE ENROLL (CLASS_CODE TEXT, STU_NUM NUMBER); CREATE TABLE COURSE (CRS_DESCRIPTION TEXT, CRS_CODE TEXT, DEPT_CODE TEXT); CREATE TABLE CLASS (CRS_CODE TEXT, CLASS_CODE TEXT, PROF_NUM NUMBER); CREATE TABLE PROFESSOR (DEPT_CODE TEXT, EMP_NUM NUMBER);"
      },
      {
        "question": "Great - can you tell me the names of students in the Accounting department with a GPA above 3.0?",
        "query": "SELECT t2.stu_fname, t2.stu_lname FROM department AS t1 JOIN student AS t2 ON t1.dept_code = t2.dept_code WHERE t1.dept_name = \"Accounting\" AND t2.stu_gpa > 3.0",
        "schema": "CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_DESCRIPTION TEXT, CRS_CODE TEXT); CREATE TABLE ENROLL (STU_NUM NUMBER, CLASS_CODE TEXT); CREATE TABLE PROFESSOR (EMP_NUM NUMBER, DEPT_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT, EMP_NUM NUMBER, DEPT_ADDRESS TEXT, DEPT_EXTENSION TEXT, SCHOOL_CODE TEXT, DEPT_NAME TEXT); CREATE TABLE CLASS (CRS_CODE TEXT, PROF_NUM NUMBER, CLASS_CODE TEXT); CREATE TABLE STUDENT (STU_NUM NUMBER, STU_FNAME TEXT, STU_LNAME TEXT, STU_CLASS TEXT, DEPT_CODE TEXT, STU_INIT TEXT, STU_GPA NUMBER, PROF_NUM NUMBER, STU_DOB TIME);"
      },
      {
        "question": "What is the total number of transfer students in all departments?",
        "query": "SELECT SUM ( stu_transfer ) FROM student",
        "schema": "CREATE TABLE STUDENT (STU_FNAME TEXT, STU_DOB TIME, STU_GPA NUMBER, STU_LNAME TEXT, STU_CLASS TEXT, STU_INIT TEXT, STU_TRANSFER NUMBER, PROF_NUM NUMBER, DEPT_CODE TEXT, STU_NUM NUMBER); CREATE TABLE DEPARTMENT (DEPT_NAME TEXT, DEPT_ADDRESS TEXT, EMP_NUM NUMBER, SCHOOL_CODE TEXT, DEPT_CODE TEXT, DEPT_EXTENSION TEXT); CREATE TABLE CLASS (PROF_NUM NUMBER, CRS_CODE TEXT, CLASS_CODE TEXT); CREATE TABLE ENROLL (STU_NUM NUMBER, CLASS_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE COURSE (CRS_DESCRIPTION TEXT, DEPT_CODE TEXT, CRS_CODE TEXT); CREATE TABLE PROFESSOR (DEPT_CODE TEXT, EMP_NUM NUMBER);"
      }
    ],
    [
      {
        "question": "Can you list all schools with less than 5 different departments?",
        "query": "SELECT school_code FROM department GROUP BY school_code HAVING COUNT ( DISTINCT dept_name ) < 5",
        "schema": "CREATE TABLE PROFESSOR (DEPT_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE DEPARTMENT (SCHOOL_CODE TEXT, EMP_NUM NUMBER, DEPT_NAME TEXT, DEPT_EXTENSION TEXT, DEPT_CODE TEXT); CREATE TABLE COURSE (CRS_CODE TEXT, DEPT_CODE TEXT); CREATE TABLE STUDENT (DEPT_CODE TEXT); CREATE TABLE CLASS (CRS_CODE TEXT);"
      },
      {
        "question": "Can you list all the departments with the school code BUS?",
        "query": "SELECT * FROM department WHERE school_code = \"BUS\"",
        "schema": "CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE DEPARTMENT (EMP_NUM NUMBER, DEPT_CODE TEXT, DEPT_NAME TEXT, SCHOOL_CODE TEXT, DEPT_EXTENSION TEXT); CREATE TABLE PROFESSOR (DEPT_CODE TEXT); CREATE TABLE STUDENT (DEPT_CODE TEXT); CREATE TABLE CLASS (CRS_CODE TEXT); CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_CODE TEXT);"
      },
      {
        "question": "Thanks, can you just show the number of different departments in the table?",
        "query": "SELECT COUNT ( DISTINCT dept_name ) , school_code FROM department GROUP BY school_code HAVING COUNT ( DISTINCT dept_name ) < 5",
        "schema": "CREATE TABLE CLASS (CRS_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE STUDENT (DEPT_CODE TEXT); CREATE TABLE DEPARTMENT (DEPT_NAME TEXT, DEPT_EXTENSION TEXT, SCHOOL_CODE TEXT, DEPT_CODE TEXT, EMP_NUM NUMBER); CREATE TABLE PROFESSOR (DEPT_CODE TEXT); CREATE TABLE COURSE (CRS_CODE TEXT, DEPT_CODE TEXT);"
      }
    ],
    [
      {
        "question": "how many instructors have taught ACCT-211?",
        "query": "SELECT COUNT ( DISTINCT prof_num ) FROM CLASS WHERE crs_code = \"ACCT-211\"",
        "schema": "CREATE TABLE STUDENT (STU_CLASS TEXT); CREATE TABLE PROFESSOR (EMP_NUM NUMBER, DEPT_CODE TEXT); CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_CODE TEXT); CREATE TABLE CLASS (CRS_CODE TEXT, PROF_NUM NUMBER, CLASS_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_LNAME TEXT, EMP_HIREDATE TIME, EMP_JOBCODE TEXT, EMP_DOB TIME, EMP_INITIAL TEXT, EMP_NUM NUMBER); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT, EMP_NUM NUMBER);"
      },
      {
        "question": "can you tell me their first names and offices, please?",
        "query": "SELECT emp_fname, prof_office FROM CLASS AS t1 JOIN employee AS t2 ON t1.prof_num = t2.emp_num JOIN course AS t3 ON t1.crs_code = t3.crs_code JOIN professor AS t4 ON t2.emp_num = t4.emp_num WHERE t1.crs_code = \"ACCT-211\"",
        "schema": "CREATE TABLE EMPLOYEE (EMP_LNAME TEXT, EMP_JOBCODE TEXT, EMP_DOB TIME, EMP_INITIAL TEXT, EMP_HIREDATE TIME, EMP_NUM NUMBER, EMP_FNAME TEXT); CREATE TABLE PROFESSOR (PROF_OFFICE TEXT, DEPT_CODE TEXT, EMP_NUM NUMBER); CREATE TABLE DEPARTMENT (DEPT_NAME TEXT, DEPT_CODE TEXT, EMP_NUM NUMBER); CREATE TABLE CLASS (CLASS_CODE TEXT, PROF_NUM NUMBER, CRS_CODE TEXT); CREATE TABLE COURSE (CRS_CODE TEXT, DEPT_CODE TEXT); CREATE TABLE STUDENT (STU_CLASS TEXT);"
      },
      {
        "question": "excellent. can you also give me the course description for ACCT-211?",
        "query": "SELECT crs_description FROM course WHERE crs_code = \"ACCT-211\"",
        "schema": "CREATE TABLE DEPARTMENT (DEPT_NAME TEXT, DEPT_CODE TEXT, EMP_NUM NUMBER); CREATE TABLE STUDENT (STU_CLASS TEXT); CREATE TABLE COURSE (CRS_DESCRIPTION TEXT, DEPT_CODE TEXT, CRS_CODE TEXT); CREATE TABLE CLASS (CLASS_CODE TEXT, CRS_CODE TEXT, PROF_NUM NUMBER); CREATE TABLE PROFESSOR (EMP_NUM NUMBER, DEPT_CODE TEXT, PROF_OFFICE TEXT); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER, EMP_INITIAL TEXT, EMP_HIREDATE TIME, EMP_LNAME TEXT, EMP_DOB TIME, EMP_JOBCODE TEXT, EMP_FNAME TEXT);"
      }
    ],
    [
      {
        "question": "Yes, hi, I'd like to know how many professors are in the history department?",
        "query": "SELECT COUNT ( * ) FROM professor WHERE dept_code = \"HIST\"",
        "schema": "CREATE TABLE CLASS (PROF_NUM NUMBER, CRS_CODE TEXT); CREATE TABLE COURSE (CRS_CODE TEXT, DEPT_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_FNAME TEXT, EMP_JOBCODE TEXT, EMP_NUM NUMBER, EMP_INITIAL TEXT, EMP_HIREDATE TIME, EMP_DOB TIME, EMP_LNAME TEXT); CREATE TABLE PROFESSOR (EMP_NUM NUMBER, PROF_OFFICE TEXT, DEPT_CODE TEXT); CREATE TABLE DEPARTMENT (EMP_NUM NUMBER, DEPT_NAME TEXT, DEPT_CODE TEXT, SCHOOL_CODE TEXT);"
      },
      {
        "question": "Do both of them have doctorates?",
        "query": "SELECT COUNT ( * ) FROM professor WHERE dept_code = \"HIST\" AND prof_high_degree = \"Ph.D.\"",
        "schema": "CREATE TABLE PROFESSOR (EMP_NUM NUMBER, PROF_OFFICE TEXT, PROF_HIGH_DEGREE TEXT, DEPT_CODE TEXT); CREATE TABLE COURSE (CRS_CODE TEXT, DEPT_CODE TEXT); CREATE TABLE DEPARTMENT (EMP_NUM NUMBER, SCHOOL_CODE TEXT, DEPT_CODE TEXT, DEPT_NAME TEXT); CREATE TABLE CLASS (PROF_NUM NUMBER, CRS_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER, EMP_JOBCODE TEXT, EMP_FNAME TEXT, EMP_HIREDATE TIME, EMP_LNAME TEXT, EMP_DOB TIME, EMP_INITIAL TEXT);"
      },
      {
        "question": "How many departments are there total?",
        "query": "SELECT COUNT ( DISTINCT dept_code ) FROM professor",
        "schema": "CREATE TABLE CLASS (PROF_NUM NUMBER, CRS_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_INITIAL TEXT, EMP_JOBCODE TEXT, EMP_HIREDATE TIME, EMP_DOB TIME, EMP_LNAME TEXT, EMP_FNAME TEXT, EMP_NUM NUMBER); CREATE TABLE PROFESSOR (EMP_NUM NUMBER, PROF_HIGH_DEGREE TEXT, PROF_OFFICE TEXT, DEPT_CODE TEXT); CREATE TABLE DEPARTMENT (SCHOOL_CODE TEXT, DEPT_CODE TEXT, DEPT_NAME TEXT, EMP_NUM NUMBER); CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_CODE TEXT);"
      },
      {
        "question": "Is English one of them?",
        "query": "SELECT DISTINCT dept_code FROM professor WHERE dept_code = \"ENG\"",
        "schema": "CREATE TABLE COURSE (CRS_CODE TEXT, DEPT_CODE TEXT); CREATE TABLE PROFESSOR (PROF_HIGH_DEGREE TEXT, DEPT_CODE TEXT, EMP_NUM NUMBER, PROF_OFFICE TEXT); CREATE TABLE CLASS (CRS_CODE TEXT, PROF_NUM NUMBER); CREATE TABLE EMPLOYEE (EMP_INITIAL TEXT, EMP_LNAME TEXT, EMP_JOBCODE TEXT, EMP_DOB TIME, EMP_FNAME TEXT, EMP_HIREDATE TIME, EMP_NUM NUMBER); CREATE TABLE DEPARTMENT (SCHOOL_CODE TEXT, EMP_NUM NUMBER, DEPT_CODE TEXT, DEPT_NAME TEXT);"
      },
      {
        "question": "Do any of the English professors have a PhD?",
        "query": "SELECT COUNT ( * ) FROM professor WHERE dept_code = \"ENG\" AND prof_high_degree = \"Ph.D.\"",
        "schema": "CREATE TABLE DEPARTMENT (DEPT_NAME TEXT, SCHOOL_CODE TEXT, EMP_NUM NUMBER, DEPT_CODE TEXT); CREATE TABLE PROFESSOR (DEPT_CODE TEXT, PROF_OFFICE TEXT, EMP_NUM NUMBER, PROF_HIGH_DEGREE TEXT); CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_CODE TEXT); CREATE TABLE CLASS (PROF_NUM NUMBER, CRS_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER, EMP_INITIAL TEXT, EMP_DOB TIME, EMP_FNAME TEXT, EMP_JOBCODE TEXT, EMP_LNAME TEXT, EMP_HIREDATE TIME);"
      },
      {
        "question": "Can you tell me where the history Doctorate's office is?",
        "query": "SELECT prof_office FROM professor WHERE dept_code = \"HIST\" AND prof_high_degree = \"Ph.D.\"",
        "schema": "CREATE TABLE CLASS (PROF_NUM NUMBER, CRS_CODE TEXT); CREATE TABLE DEPARTMENT (SCHOOL_CODE TEXT, DEPT_CODE TEXT, EMP_NUM NUMBER, DEPT_ADDRESS TEXT, DEPT_NAME TEXT); CREATE TABLE PROFESSOR (EMP_NUM NUMBER, PROF_OFFICE TEXT, PROF_HIGH_DEGREE TEXT, DEPT_CODE TEXT); CREATE TABLE COURSE (CRS_CODE TEXT, DEPT_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_HIREDATE TIME, EMP_FNAME TEXT, EMP_JOBCODE TEXT, EMP_DOB TIME, EMP_INITIAL TEXT, EMP_LNAME TEXT, EMP_NUM NUMBER);"
      },
      {
        "question": "What is the total number professors with doctorates employed by the 11 departments?",
        "query": "SELECT COUNT ( * ) FROM professor WHERE prof_high_degree = \"Ph.D.\"",
        "schema": "CREATE TABLE EMPLOYEE (EMP_LNAME TEXT, EMP_NUM NUMBER, EMP_FNAME TEXT, EMP_JOBCODE TEXT, EMP_DOB TIME, EMP_HIREDATE TIME, EMP_INITIAL TEXT); CREATE TABLE PROFESSOR (PROF_OFFICE TEXT, EMP_NUM NUMBER, PROF_HIGH_DEGREE TEXT, DEPT_CODE TEXT); CREATE TABLE CLASS (CRS_CODE TEXT, PROF_NUM NUMBER); CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_CODE TEXT); CREATE TABLE DEPARTMENT (DEPT_ADDRESS TEXT, EMP_NUM NUMBER, SCHOOL_CODE TEXT, DEPT_NAME TEXT, DEPT_CODE TEXT);"
      },
      {
        "question": "Of those 18, how many doctorates are employed by the accounting department?",
        "query": "SELECT COUNT ( * ) FROM professor WHERE prof_high_degree = \"Ph.D.\" AND dept_code = \"ACCT\"",
        "schema": "CREATE TABLE EMPLOYEE (EMP_LNAME TEXT, EMP_HIREDATE TIME, EMP_NUM NUMBER, EMP_FNAME TEXT, EMP_DOB TIME, EMP_JOBCODE TEXT, EMP_INITIAL TEXT); CREATE TABLE PROFESSOR (EMP_NUM NUMBER, PROF_OFFICE TEXT, PROF_HIGH_DEGREE TEXT, DEPT_CODE TEXT); CREATE TABLE CLASS (CRS_CODE TEXT, PROF_NUM NUMBER); CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_CODE TEXT); CREATE TABLE DEPARTMENT (SCHOOL_CODE TEXT, DEPT_NAME TEXT, DEPT_CODE TEXT, DEPT_ADDRESS TEXT, EMP_NUM NUMBER);"
      },
      {
        "question": "Can you tell me where their offices are?",
        "query": "SELECT prof_office FROM professor WHERE prof_high_degree = \"Ph.D.\" AND dept_code = \"ACCT\"",
        "schema": "CREATE TABLE PROFESSOR (DEPT_CODE TEXT, EMP_NUM NUMBER, PROF_HIGH_DEGREE TEXT, PROF_OFFICE TEXT); CREATE TABLE EMPLOYEE (EMP_JOBCODE TEXT, EMP_LNAME TEXT, EMP_DOB TIME, EMP_FNAME TEXT, EMP_NUM NUMBER, EMP_HIREDATE TIME, EMP_INITIAL TEXT); CREATE TABLE COURSE (CRS_CODE TEXT, DEPT_CODE TEXT); CREATE TABLE CLASS (PROF_NUM NUMBER, CRS_CODE TEXT); CREATE TABLE DEPARTMENT (SCHOOL_CODE TEXT, DEPT_CODE TEXT, EMP_NUM NUMBER, DEPT_NAME TEXT, DEPT_ADDRESS TEXT);"
      },
      {
        "question": "Can you tell me the extension for the professor in office KLR229D, please?",
        "query": "SELECT prof_extension FROM professor WHERE prof_high_degree = \"Ph.D.\" AND dept_code = \"ACCT\" AND prof_office = \"KLR 229D\"",
        "schema": "CREATE TABLE EMPLOYEE (EMP_HIREDATE TIME, EMP_JOBCODE TEXT, EMP_DOB TIME, EMP_LNAME TEXT, EMP_NUM NUMBER, EMP_FNAME TEXT, EMP_INITIAL TEXT); CREATE TABLE CLASS (CRS_CODE TEXT, PROF_NUM NUMBER); CREATE TABLE PROFESSOR (PROF_OFFICE TEXT, EMP_NUM NUMBER, PROF_HIGH_DEGREE TEXT, DEPT_CODE TEXT, PROF_EXTENSION TEXT); CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_CODE TEXT); CREATE TABLE DEPARTMENT (DEPT_ADDRESS TEXT, DEPT_NAME TEXT, DEPT_CODE TEXT, DEPT_EXTENSION TEXT, EMP_NUM NUMBER, SCHOOL_CODE TEXT);"
      }
    ],
    [
      {
        "question": "Can you please give me the names of all of the professors sorted in alphabetical order of their first name? | Do you want to first name of all the professors, or last name or both? | Both, please",
        "query": "SELECT t2.emp_fname , t2.emp_lname FROM professor AS t1 JOIN employee AS t2 ON t1.emp_num = t2.emp_num ORDER BY t2.emp_fname",
        "schema": "CREATE TABLE CLASS (PROF_NUM NUMBER); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT); CREATE TABLE PROFESSOR (DEPT_CODE TEXT, PROF_OFFICE TEXT, EMP_NUM NUMBER); CREATE TABLE EMPLOYEE (EMP_DOB TIME, EMP_LNAME TEXT, EMP_NUM NUMBER, EMP_FNAME TEXT);"
      },
      {
        "question": "Where are their offices, if you don't mind?",
        "query": "SELECT t1.prof_office FROM professor AS t1 JOIN employee AS t2 ON t1.emp_num = t2.emp_num ORDER BY t2.emp_fname",
        "schema": "CREATE TABLE EMPLOYEE (EMP_JOBCODE TEXT, EMP_HIREDATE TIME, EMP_LNAME TEXT, EMP_FNAME TEXT, EMP_NUM NUMBER, EMP_DOB TIME); CREATE TABLE DEPARTMENT (DEPT_ADDRESS TEXT, EMP_NUM NUMBER, DEPT_CODE TEXT); CREATE TABLE CLASS (PROF_NUM NUMBER); CREATE TABLE PROFESSOR (EMP_NUM NUMBER, PROF_OFFICE TEXT, DEPT_CODE TEXT);"
      },
      {
        "question": "What are all of their professor high degree?",
        "query": "SELECT prof_high_degree FROM professor",
        "schema": "CREATE TABLE CLASS (PROF_NUM NUMBER); CREATE TABLE PROFESSOR (PROF_OFFICE TEXT, EMP_NUM NUMBER, PROF_HIGH_DEGREE TEXT, DEPT_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_DOB TIME, EMP_FNAME TEXT, EMP_HIREDATE TIME, EMP_LNAME TEXT, EMP_NUM NUMBER, EMP_JOBCODE TEXT); CREATE TABLE DEPARTMENT (DEPT_ADDRESS TEXT, DEPT_CODE TEXT, EMP_NUM NUMBER);"
      }
    ],
    [
      {
        "question": "How many different courses are there?",
        "query": "SELECT COUNT ( DISTINCT crs_code ) FROM course",
        "schema": "CREATE TABLE DEPARTMENT (SCHOOL_CODE TEXT, EMP_NUM NUMBER, DEPT_CODE TEXT); CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_CODE TEXT, CRS_DESCRIPTION TEXT); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE STUDENT (STU_DOB TIME, DEPT_CODE TEXT, STU_NUM NUMBER); CREATE TABLE CLASS (CLASS_SECTION TEXT, CRS_CODE TEXT, CLASS_CODE TEXT); CREATE TABLE PROFESSOR (EMP_NUM NUMBER, DEPT_CODE TEXT);"
      },
      {
        "question": "How many departments are there?",
        "query": "SELECT COUNT ( dept_code ) FROM department",
        "schema": "CREATE TABLE DEPARTMENT (DEPT_ADDRESS TEXT, EMP_NUM NUMBER, DEPT_NAME TEXT, DEPT_EXTENSION TEXT, DEPT_CODE TEXT, SCHOOL_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE COURSE (CRS_CODE TEXT, DEPT_CODE TEXT, CRS_DESCRIPTION TEXT); CREATE TABLE CLASS (CLASS_CODE TEXT, CLASS_SECTION TEXT, CRS_CODE TEXT); CREATE TABLE STUDENT (STU_DOB TIME, DEPT_CODE TEXT, STU_NUM NUMBER); CREATE TABLE PROFESSOR (EMP_NUM NUMBER, DEPT_CODE TEXT);"
      },
      {
        "question": "What is the course code for the class named Statistics? | Do you mean the course code for the course whose description is Statistics? | yes.",
        "query": "SELECT crs_code FROM course WHERE crs_description = 'Statistics'",
        "schema": "CREATE TABLE COURSE (CRS_CODE TEXT, DEPT_CODE TEXT, CRS_DESCRIPTION TEXT); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE PROFESSOR (DEPT_CODE TEXT, EMP_NUM NUMBER); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT, DEPT_ADDRESS TEXT, SCHOOL_CODE TEXT, EMP_NUM NUMBER, DEPT_NAME TEXT, DEPT_EXTENSION TEXT); CREATE TABLE CLASS (CLASS_SECTION TEXT, CLASS_CODE TEXT, CRS_CODE TEXT); CREATE TABLE STUDENT (DEPT_CODE TEXT, STU_DOB TIME, STU_NUM NUMBER);"
      },
      {
        "question": "Can you show me a list of all the course descriptions?",
        "query": "SELECT crs_description FROM course",
        "schema": "CREATE TABLE DEPARTMENT (EMP_NUM NUMBER, SCHOOL_CODE TEXT, DEPT_CODE TEXT, DEPT_NAME TEXT, DEPT_ADDRESS TEXT, DEPT_EXTENSION TEXT); CREATE TABLE STUDENT (STU_DOB TIME, DEPT_CODE TEXT, STU_NUM NUMBER); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_DESCRIPTION TEXT, CRS_CODE TEXT); CREATE TABLE PROFESSOR (DEPT_CODE TEXT, EMP_NUM NUMBER); CREATE TABLE CLASS (CLASS_CODE TEXT, CRS_CODE TEXT, CLASS_SECTION TEXT);"
      },
      {
        "question": "Can you tell me the course code for the class with the Intro. to Statistics description?",
        "query": "SELECT crs_code FROM course WHERE crs_description = 'Intro. to Statistics'",
        "schema": "CREATE TABLE CLASS (CLASS_CODE TEXT, CLASS_ROOM TEXT, CLASS_TIME TEXT, CLASS_SECTION TEXT, CRS_CODE TEXT); CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_CODE TEXT, CRS_DESCRIPTION TEXT); CREATE TABLE STUDENT (STU_NUM NUMBER, DEPT_CODE TEXT, STU_DOB TIME); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE PROFESSOR (EMP_NUM NUMBER, DEPT_CODE TEXT); CREATE TABLE DEPARTMENT (DEPT_ADDRESS TEXT, DEPT_EXTENSION TEXT, EMP_NUM NUMBER, DEPT_NAME TEXT, DEPT_CODE TEXT, SCHOOL_CODE TEXT);"
      },
      {
        "question": "What is the name of the department that course is in? | Do you mean the name of the department which the course named 'Intro. to Statistics' is in? | yes.",
        "query": "SELECT t2.dept_name FROM course AS t1 JOIN department AS t2 ON t1.dept_code = t2.dept_code WHERE t1.crs_description = 'Intro. to Statistics'",
        "schema": "CREATE TABLE PROFESSOR (EMP_NUM NUMBER, DEPT_CODE TEXT); CREATE TABLE STUDENT (STU_NUM NUMBER, DEPT_CODE TEXT, STU_DOB TIME); CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_DESCRIPTION TEXT, CRS_CODE TEXT); CREATE TABLE DEPARTMENT (EMP_NUM NUMBER, DEPT_EXTENSION TEXT, SCHOOL_CODE TEXT, DEPT_ADDRESS TEXT, DEPT_CODE TEXT, DEPT_NAME TEXT); CREATE TABLE CLASS (CLASS_CODE TEXT, CLASS_ROOM TEXT, CRS_CODE TEXT, CLASS_TIME TEXT, PROF_NUM NUMBER, CLASS_SECTION TEXT); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER);"
      }
    ],
    [
      {
        "question": "what is the enroll grade of 324257",
        "query": "SELECT enroll_grade FROM enroll WHERE stu_num = 324257",
        "schema": "CREATE TABLE ENROLL (ENROLL_GRADE TEXT, STU_NUM NUMBER, CLASS_CODE TEXT); CREATE TABLE PROFESSOR (DEPT_CODE TEXT); CREATE TABLE CLASS (CLASS_CODE TEXT, CRS_CODE TEXT); CREATE TABLE STUDENT (STU_GPA NUMBER, STU_DOB TIME, STU_CLASS TEXT, DEPT_CODE TEXT, STU_NUM NUMBER, STU_INIT TEXT); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE DEPARTMENT (EMP_NUM NUMBER, DEPT_CODE TEXT); CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_CODE TEXT);"
      },
      {
        "question": "how many class there",
        "query": "SELECT COUNT ( * ) FROM CLASS",
        "schema": "CREATE TABLE ENROLL (CLASS_CODE TEXT, ENROLL_GRADE TEXT, STU_NUM NUMBER); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE PROFESSOR (DEPT_CODE TEXT); CREATE TABLE CLASS (CLASS_ROOM TEXT, PROF_NUM NUMBER, CLASS_CODE TEXT, CRS_CODE TEXT, CLASS_SECTION TEXT); CREATE TABLE STUDENT (STU_GPA NUMBER, STU_CLASS TEXT, DEPT_CODE TEXT, STU_INIT TEXT, STU_DOB TIME, STU_NUM NUMBER); CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_CODE TEXT); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT, EMP_NUM NUMBER);"
      },
      {
        "question": "how many students there",
        "query": "SELECT COUNT ( * ) FROM student",
        "schema": "CREATE TABLE STUDENT (STU_DOB TIME, PROF_NUM NUMBER, STU_INIT TEXT, DEPT_CODE TEXT, STU_NUM NUMBER, STU_CLASS TEXT, STU_GPA NUMBER); CREATE TABLE ENROLL (ENROLL_GRADE TEXT, STU_NUM NUMBER, CLASS_CODE TEXT); CREATE TABLE DEPARTMENT (EMP_NUM NUMBER, DEPT_CODE TEXT); CREATE TABLE CLASS (CLASS_CODE TEXT, CLASS_ROOM TEXT, PROF_NUM NUMBER, CLASS_SECTION TEXT, CRS_CODE TEXT); CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_CODE TEXT); CREATE TABLE PROFESSOR (DEPT_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER);"
      },
      {
        "question": "what is the dept-code of student number 324257",
        "query": "SELECT dept_code FROM student WHERE stu_num = 324257",
        "schema": "CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE CLASS (CLASS_ROOM TEXT, PROF_NUM NUMBER, CRS_CODE TEXT, CLASS_SECTION TEXT, CLASS_CODE TEXT); CREATE TABLE PROFESSOR (DEPT_CODE TEXT); CREATE TABLE DEPARTMENT (SCHOOL_CODE TEXT, EMP_NUM NUMBER, DEPT_CODE TEXT, DEPT_NAME TEXT); CREATE TABLE COURSE (CRS_CODE TEXT, DEPT_CODE TEXT); CREATE TABLE STUDENT (DEPT_CODE TEXT, STU_NUM NUMBER, STU_INIT TEXT, STU_GPA NUMBER, STU_LNAME TEXT, STU_CLASS TEXT, PROF_NUM NUMBER, STU_DOB TIME); CREATE TABLE ENROLL (CLASS_CODE TEXT, STU_NUM NUMBER, ENROLL_GRADE TEXT);"
      }
    ],
    [
      {
        "question": "How many professors are there?",
        "query": "SELECT COUNT ( * ) FROM professor",
        "schema": "CREATE TABLE DEPARTMENT (DEPT_NAME TEXT, EMP_NUM NUMBER, DEPT_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_LNAME TEXT, EMP_INITIAL TEXT, EMP_JOBCODE TEXT, EMP_NUM NUMBER, EMP_FNAME TEXT, EMP_HIREDATE TIME, EMP_DOB TIME); CREATE TABLE PROFESSOR (PROF_HIGH_DEGREE TEXT, PROF_OFFICE TEXT, EMP_NUM NUMBER, PROF_EXTENSION TEXT, DEPT_CODE TEXT); CREATE TABLE COURSE (DEPT_CODE TEXT); CREATE TABLE STUDENT (PROF_NUM NUMBER); CREATE TABLE CLASS (PROF_NUM NUMBER);"
      },
      {
        "question": "which department has the most professors?",
        "query": "SELECT * FROM professor AS t1 JOIN department AS t2 ON t1.dept_code = t2.dept_code GROUP BY t1.dept_code ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE COURSE (DEPT_CODE TEXT); CREATE TABLE DEPARTMENT (EMP_NUM NUMBER, DEPT_CODE TEXT, DEPT_NAME TEXT); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER, EMP_HIREDATE TIME, EMP_JOBCODE TEXT, EMP_LNAME TEXT, EMP_INITIAL TEXT, EMP_DOB TIME, EMP_FNAME TEXT); CREATE TABLE PROFESSOR (PROF_HIGH_DEGREE TEXT, DEPT_CODE TEXT, PROF_OFFICE TEXT, PROF_EXTENSION TEXT, EMP_NUM NUMBER); CREATE TABLE STUDENT (PROF_NUM NUMBER); CREATE TABLE CLASS (PROF_NUM NUMBER);"
      },
      {
        "question": "What about the smallest?",
        "query": "SELECT * FROM professor AS t1 JOIN department AS t2 ON t1.dept_code = t2.dept_code GROUP BY t1.dept_code ORDER BY COUNT ( * ) LIMIT 1",
        "schema": "CREATE TABLE PROFESSOR (DEPT_CODE TEXT, PROF_HIGH_DEGREE TEXT, PROF_EXTENSION TEXT, PROF_OFFICE TEXT, EMP_NUM NUMBER); CREATE TABLE DEPARTMENT (EMP_NUM NUMBER, DEPT_NAME TEXT, DEPT_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_FNAME TEXT, EMP_INITIAL TEXT, EMP_DOB TIME, EMP_JOBCODE TEXT, EMP_NUM NUMBER, EMP_LNAME TEXT, EMP_HIREDATE TIME); CREATE TABLE COURSE (DEPT_CODE TEXT); CREATE TABLE CLASS (PROF_NUM NUMBER); CREATE TABLE STUDENT (PROF_NUM NUMBER);"
      }
    ],
    [
      {
        "question": "What is the school code for the accounting department?",
        "query": "SELECT school_code FROM department WHERE dept_name = 'Accounting'",
        "schema": "CREATE TABLE STUDENT (DEPT_CODE TEXT); CREATE TABLE PROFESSOR (DEPT_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT, SCHOOL_CODE TEXT, EMP_NUM NUMBER, DEPT_NAME TEXT); CREATE TABLE COURSE (CRS_CODE TEXT, DEPT_CODE TEXT); CREATE TABLE CLASS (CRS_CODE TEXT, CLASS_CODE TEXT);"
      },
      {
        "question": "What is the accounting department's address?",
        "query": "SELECT dept_address FROM department WHERE dept_name = 'Accounting'",
        "schema": "CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE STUDENT (DEPT_CODE TEXT); CREATE TABLE COURSE (CRS_CODE TEXT, DEPT_CODE TEXT); CREATE TABLE PROFESSOR (DEPT_CODE TEXT); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT, DEPT_ADDRESS TEXT, EMP_NUM NUMBER, SCHOOL_CODE TEXT, DEPT_NAME TEXT); CREATE TABLE CLASS (CRS_CODE TEXT, CLASS_CODE TEXT);"
      },
      {
        "question": "Where is the professor of accounting's office?",
        "query": "SELECT t3.prof_office FROM professor AS t3 JOIN department AS t4 ON t4.dept_code = t3.dept_code WHERE t4.dept_name = 'Accounting'",
        "schema": "CREATE TABLE STUDENT (DEPT_CODE TEXT); CREATE TABLE PROFESSOR (PROF_OFFICE TEXT, DEPT_CODE TEXT, EMP_NUM NUMBER); CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_CODE TEXT); CREATE TABLE DEPARTMENT (DEPT_NAME TEXT, SCHOOL_CODE TEXT, EMP_NUM NUMBER, DEPT_CODE TEXT, DEPT_ADDRESS TEXT); CREATE TABLE CLASS (PROF_NUM NUMBER, CRS_CODE TEXT, CLASS_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_LNAME TEXT, EMP_HIREDATE TIME, EMP_FNAME TEXT, EMP_NUM NUMBER, EMP_DOB TIME);"
      },
      {
        "question": "What degree does the professor of account hold?",
        "query": "SELECT t3.prof_high_degree FROM professor AS t3 JOIN department AS t4 ON t4.dept_code = t3.dept_code WHERE t4.dept_name = 'Accounting'",
        "schema": "CREATE TABLE STUDENT (DEPT_CODE TEXT); CREATE TABLE DEPARTMENT (DEPT_ADDRESS TEXT, DEPT_CODE TEXT, EMP_NUM NUMBER, DEPT_NAME TEXT, SCHOOL_CODE TEXT); CREATE TABLE PROFESSOR (EMP_NUM NUMBER, DEPT_CODE TEXT, PROF_OFFICE TEXT, PROF_HIGH_DEGREE TEXT); CREATE TABLE CLASS (CRS_CODE TEXT, CLASS_CODE TEXT, PROF_NUM NUMBER); CREATE TABLE COURSE (CRS_CODE TEXT, DEPT_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_FNAME TEXT, EMP_NUM NUMBER, EMP_HIREDATE TIME, EMP_DOB TIME, EMP_LNAME TEXT);"
      },
      {
        "question": "Where is the classroom located?",
        "query": "SELECT class_room FROM CLASS AS t1 JOIN employee AS t2 ON t1.prof_num = t2.emp_num JOIN professor AS t3 ON t2.emp_num = t3.emp_num JOIN department AS t4 ON t4.dept_code = t3.dept_code WHERE t1.crs_code = \"ACCT-211\" AND t1.class_time LIKE '%T%'",
        "schema": "CREATE TABLE EMPLOYEE (EMP_NUM NUMBER, EMP_JOBCODE TEXT, EMP_DOB TIME, EMP_LNAME TEXT, EMP_HIREDATE TIME, EMP_FNAME TEXT); CREATE TABLE COURSE (CRS_CODE TEXT, DEPT_CODE TEXT); CREATE TABLE DEPARTMENT (DEPT_ADDRESS TEXT, SCHOOL_CODE TEXT, DEPT_NAME TEXT, EMP_NUM NUMBER, DEPT_CODE TEXT); CREATE TABLE PROFESSOR (PROF_HIGH_DEGREE TEXT, DEPT_CODE TEXT, PROF_OFFICE TEXT, EMP_NUM NUMBER); CREATE TABLE STUDENT (STU_LNAME TEXT, STU_FNAME TEXT, STU_PHONE TEXT, STU_GPA NUMBER, DEPT_CODE TEXT, STU_DOB TIME, STU_INIT TEXT, STU_CLASS TEXT, STU_HRS NUMBER, STU_NUM NUMBER, PROF_NUM NUMBER); CREATE TABLE ENROLL (STU_NUM NUMBER, CLASS_CODE TEXT); CREATE TABLE CLASS (CLASS_SECTION TEXT, PROF_NUM NUMBER, CLASS_TIME TEXT, CLASS_ROOM TEXT, CLASS_CODE TEXT, CRS_CODE TEXT);"
      }
    ],
    [
      {
        "question": "how many employees there",
        "query": "SELECT COUNT ( * ) FROM employee",
        "schema": "CREATE TABLE EMPLOYEE (EMP_DOB TIME, EMP_INITIAL TEXT, EMP_FNAME TEXT, EMP_JOBCODE TEXT, EMP_HIREDATE TIME, EMP_LNAME TEXT, EMP_NUM NUMBER); CREATE TABLE CLASS (PROF_NUM NUMBER); CREATE TABLE DEPARTMENT (DEPT_ADDRESS TEXT, EMP_NUM NUMBER, DEPT_NAME TEXT, DEPT_EXTENSION TEXT, DEPT_CODE TEXT); CREATE TABLE PROFESSOR (DEPT_CODE TEXT, PROF_OFFICE TEXT, EMP_NUM NUMBER); CREATE TABLE COURSE (CRS_CODE TEXT, DEPT_CODE TEXT);"
      },
      {
        "question": "how many English professors there",
        "query": "SELECT COUNT ( * ) FROM professor WHERE dept_code = \"ENG\"",
        "schema": "CREATE TABLE CLASS (PROF_NUM NUMBER); CREATE TABLE PROFESSOR (DEPT_CODE TEXT, PROF_EXTENSION TEXT, PROF_HIGH_DEGREE TEXT, EMP_NUM NUMBER, PROF_OFFICE TEXT); CREATE TABLE COURSE (CRS_CODE TEXT, DEPT_CODE TEXT); CREATE TABLE DEPARTMENT (DEPT_NAME TEXT, DEPT_EXTENSION TEXT, DEPT_ADDRESS TEXT, EMP_NUM NUMBER, DEPT_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_INITIAL TEXT, EMP_JOBCODE TEXT, EMP_LNAME TEXT, EMP_HIREDATE TIME, EMP_FNAME TEXT, EMP_DOB TIME, EMP_NUM NUMBER);"
      },
      {
        "question": "what is the prof high degree of department HIST",
        "query": "SELECT prof_high_degree FROM professor WHERE dept_code = \"HIST\"",
        "schema": "CREATE TABLE DEPARTMENT (DEPT_EXTENSION TEXT, DEPT_CODE TEXT, DEPT_NAME TEXT, EMP_NUM NUMBER, DEPT_ADDRESS TEXT); CREATE TABLE PROFESSOR (PROF_EXTENSION TEXT, PROF_OFFICE TEXT, PROF_HIGH_DEGREE TEXT, EMP_NUM NUMBER, DEPT_CODE TEXT); CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_JOBCODE TEXT, EMP_INITIAL TEXT, EMP_HIREDATE TIME, EMP_LNAME TEXT, EMP_FNAME TEXT, EMP_DOB TIME, EMP_NUM NUMBER); CREATE TABLE CLASS (PROF_NUM NUMBER);"
      }
    ],
    [
      {
        "question": "How many professors are there in total?",
        "query": "SELECT COUNT ( * ) FROM professor",
        "schema": "CREATE TABLE CLASS (PROF_NUM NUMBER, CRS_CODE TEXT); CREATE TABLE DEPARTMENT (EMP_NUM NUMBER, DEPT_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_INITIAL TEXT, EMP_LNAME TEXT, EMP_NUM NUMBER, EMP_FNAME TEXT, EMP_JOBCODE TEXT, EMP_DOB TIME, EMP_HIREDATE TIME); CREATE TABLE PROFESSOR (EMP_NUM NUMBER, DEPT_CODE TEXT, PROF_OFFICE TEXT, PROF_EXTENSION TEXT, PROF_HIGH_DEGREE TEXT);"
      },
      {
        "question": "What are the names of the departments they teach classes for?",
        "query": "SELECT DISTINCT t4.dept_name FROM CLASS AS t1 JOIN employee AS t2 ON t1.prof_num = t2.emp_num JOIN professor AS t3 ON t2.emp_num = t3.emp_num JOIN department AS t4 ON t4.dept_code = t3.dept_code",
        "schema": "CREATE TABLE PROFESSOR (PROF_OFFICE TEXT, DEPT_CODE TEXT, EMP_NUM NUMBER, PROF_HIGH_DEGREE TEXT, PROF_EXTENSION TEXT); CREATE TABLE COURSE (CRS_CODE TEXT, DEPT_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_JOBCODE TEXT, EMP_LNAME TEXT, EMP_FNAME TEXT, EMP_INITIAL TEXT, EMP_HIREDATE TIME, EMP_NUM NUMBER, EMP_DOB TIME); CREATE TABLE DEPARTMENT (DEPT_NAME TEXT, SCHOOL_CODE TEXT, EMP_NUM NUMBER, DEPT_CODE TEXT); CREATE TABLE CLASS (CLASS_CODE TEXT, PROF_NUM NUMBER, CRS_CODE TEXT);"
      },
      {
        "question": "How many of the 22 professors are part of the Accounting department?",
        "query": "SELECT COUNT ( * ) FROM professor WHERE dept_code = \"ACCT\"",
        "schema": "CREATE TABLE DEPARTMENT (DEPT_CODE TEXT, SCHOOL_CODE TEXT, DEPT_NAME TEXT, EMP_NUM NUMBER); CREATE TABLE PROFESSOR (DEPT_CODE TEXT, PROF_EXTENSION TEXT, PROF_HIGH_DEGREE TEXT, PROF_OFFICE TEXT, EMP_NUM NUMBER); CREATE TABLE CLASS (CRS_CODE TEXT, PROF_NUM NUMBER, CLASS_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_DOB TIME, EMP_NUM NUMBER, EMP_JOBCODE TEXT, EMP_LNAME TEXT, EMP_INITIAL TEXT, EMP_FNAME TEXT, EMP_HIREDATE TIME); CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_CODE TEXT);"
      },
      {
        "question": "How many of those 3 are currently teaching courses?",
        "query": "SELECT COUNT ( DISTINCT t3.emp_num ) FROM CLASS AS t1 JOIN employee AS t2 ON t1.prof_num = t2.emp_num JOIN professor AS t3 ON t2.emp_num = t3.emp_num JOIN department AS t4 ON t4.dept_code = t3.dept_code WHERE t3.dept_code = 'ACCT'",
        "schema": "CREATE TABLE EMPLOYEE (EMP_NUM NUMBER, EMP_FNAME TEXT, EMP_DOB TIME, EMP_JOBCODE TEXT, EMP_LNAME TEXT, EMP_HIREDATE TIME, EMP_INITIAL TEXT); CREATE TABLE CLASS (CLASS_CODE TEXT, PROF_NUM NUMBER, CRS_CODE TEXT); CREATE TABLE DEPARTMENT (DEPT_NAME TEXT, SCHOOL_CODE TEXT, EMP_NUM NUMBER, DEPT_CODE TEXT); CREATE TABLE PROFESSOR (PROF_EXTENSION TEXT, DEPT_CODE TEXT, PROF_HIGH_DEGREE TEXT, EMP_NUM NUMBER, PROF_OFFICE TEXT); CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_CODE TEXT);"
      },
      {
        "question": "Could you tell me the number of them that are teaching in a physical class room instead of through online classes?",
        "query": "SELECT COUNT ( DISTINCT t3.emp_num ) FROM CLASS AS t1 JOIN employee AS t2 ON t1.prof_num = t2.emp_num JOIN professor AS t3 ON t2.emp_num = t3.emp_num JOIN department AS t4 ON t4.dept_code = t3.dept_code WHERE t3.dept_code = 'ACCT'",
        "schema": "CREATE TABLE EMPLOYEE (EMP_NUM NUMBER, EMP_DOB TIME, EMP_HIREDATE TIME, EMP_LNAME TEXT, EMP_FNAME TEXT, EMP_INITIAL TEXT, EMP_JOBCODE TEXT); CREATE TABLE DEPARTMENT (SCHOOL_CODE TEXT, DEPT_NAME TEXT, EMP_NUM NUMBER, DEPT_CODE TEXT); CREATE TABLE PROFESSOR (DEPT_CODE TEXT, PROF_OFFICE TEXT, PROF_HIGH_DEGREE TEXT, PROF_EXTENSION TEXT, EMP_NUM NUMBER); CREATE TABLE CLASS (CLASS_SECTION TEXT, CLASS_ROOM TEXT, PROF_NUM NUMBER, CRS_CODE TEXT, CLASS_CODE TEXT); CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_CODE TEXT);"
      },
      {
        "question": "What are their first names and the class rooms where they teach?",
        "query": "SELECT t2.emp_fname , t1.class_room FROM CLASS AS t1 JOIN employee AS t2 ON t1.prof_num = t2.emp_num JOIN professor AS t3 ON t2.emp_num = t3.emp_num JOIN department AS t4 ON t4.dept_code = t3.dept_code WHERE t4.dept_name = 'Accounting'",
        "schema": "CREATE TABLE PROFESSOR (DEPT_CODE TEXT, PROF_HIGH_DEGREE TEXT, EMP_NUM NUMBER, PROF_EXTENSION TEXT, PROF_OFFICE TEXT); CREATE TABLE COURSE (CRS_CODE TEXT, DEPT_CODE TEXT); CREATE TABLE CLASS (CLASS_ROOM TEXT, CLASS_SECTION TEXT, CLASS_CODE TEXT, CRS_CODE TEXT, PROF_NUM NUMBER); CREATE TABLE EMPLOYEE (EMP_LNAME TEXT, EMP_FNAME TEXT, EMP_JOBCODE TEXT, EMP_HIREDATE TIME, EMP_INITIAL TEXT, EMP_NUM NUMBER, EMP_DOB TIME); CREATE TABLE STUDENT (STU_FNAME TEXT); CREATE TABLE DEPARTMENT (DEPT_NAME TEXT, SCHOOL_CODE TEXT, DEPT_CODE TEXT, EMP_NUM NUMBER);"
      }
    ],
    [
      {
        "question": "Who is the professor in the office DRE 102? | Do you want their first name, last name, or initial? | last name and hire date please.",
        "query": "SELECT t1.emp_lname , t1.emp_hiredate FROM employee AS t1 JOIN professor AS t2 ON t1.emp_num = t2.emp_num WHERE t2.prof_office = 'DRE 102'",
        "schema": "CREATE TABLE EMPLOYEE (EMP_NUM NUMBER, EMP_JOBCODE TEXT, EMP_FNAME TEXT, EMP_LNAME TEXT, EMP_HIREDATE TIME, EMP_DOB TIME, EMP_INITIAL TEXT); CREATE TABLE PROFESSOR (EMP_NUM NUMBER, DEPT_CODE TEXT, PROF_OFFICE TEXT); CREATE TABLE CLASS (PROF_NUM NUMBER); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT);"
      },
      {
        "question": "Thanks. What are those professors' degree?",
        "query": "SELECT t1.emp_lname , t2.prof_high_degree FROM employee AS t1 JOIN professor AS t2 ON t1.emp_num = t2.emp_num WHERE t2.prof_office = 'DRE 102'",
        "schema": "CREATE TABLE PROFESSOR (PROF_OFFICE TEXT, PROF_HIGH_DEGREE TEXT, EMP_NUM NUMBER, DEPT_CODE TEXT); CREATE TABLE CLASS (PROF_NUM NUMBER); CREATE TABLE DEPARTMENT (EMP_NUM NUMBER, DEPT_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_LNAME TEXT, EMP_FNAME TEXT, EMP_INITIAL TEXT, EMP_HIREDATE TIME, EMP_NUM NUMBER, EMP_DOB TIME, EMP_JOBCODE TEXT);"
      }
    ],
    [
      {
        "question": "how many professors there",
        "query": "SELECT COUNT ( * ) FROM professor",
        "schema": "CREATE TABLE CLASS (PROF_NUM NUMBER); CREATE TABLE COURSE (DEPT_CODE TEXT); CREATE TABLE STUDENT (PROF_NUM NUMBER, DEPT_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_JOBCODE TEXT, EMP_DOB TIME, EMP_NUM NUMBER, EMP_LNAME TEXT, EMP_INITIAL TEXT, EMP_HIREDATE TIME, EMP_FNAME TEXT); CREATE TABLE DEPARTMENT (EMP_NUM NUMBER, DEPT_NAME TEXT, DEPT_CODE TEXT); CREATE TABLE PROFESSOR (PROF_OFFICE TEXT, PROF_EXTENSION TEXT, EMP_NUM NUMBER, DEPT_CODE TEXT, PROF_HIGH_DEGREE TEXT);"
      },
      {
        "question": "how many English professors there",
        "query": "SELECT COUNT ( * ) FROM professor WHERE dept_code = \"ENG\"",
        "schema": "CREATE TABLE EMPLOYEE (EMP_FNAME TEXT, EMP_DOB TIME, EMP_HIREDATE TIME, EMP_JOBCODE TEXT, EMP_LNAME TEXT, EMP_NUM NUMBER, EMP_INITIAL TEXT); CREATE TABLE COURSE (DEPT_CODE TEXT); CREATE TABLE PROFESSOR (PROF_HIGH_DEGREE TEXT, PROF_EXTENSION TEXT, DEPT_CODE TEXT, EMP_NUM NUMBER, PROF_OFFICE TEXT); CREATE TABLE DEPARTMENT (DEPT_NAME TEXT, EMP_NUM NUMBER, DEPT_CODE TEXT); CREATE TABLE CLASS (PROF_NUM NUMBER); CREATE TABLE STUDENT (PROF_NUM NUMBER, DEPT_CODE TEXT);"
      },
      {
        "question": "what is the department code of 103 | Do you mean the department code of professor with emp number 103? | yes sir",
        "query": "SELECT dept_code FROM professor WHERE emp_num = 103",
        "schema": "CREATE TABLE PROFESSOR (EMP_NUM NUMBER, PROF_HIGH_DEGREE TEXT, DEPT_CODE TEXT, PROF_OFFICE TEXT, PROF_EXTENSION TEXT); CREATE TABLE EMPLOYEE (EMP_DOB TIME, EMP_HIREDATE TIME, EMP_LNAME TEXT, EMP_NUM NUMBER, EMP_INITIAL TEXT, EMP_FNAME TEXT, EMP_JOBCODE TEXT); CREATE TABLE STUDENT (PROF_NUM NUMBER, DEPT_CODE TEXT); CREATE TABLE CLASS (PROF_NUM NUMBER); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT, DEPT_NAME TEXT, SCHOOL_CODE TEXT, EMP_NUM NUMBER); CREATE TABLE COURSE (DEPT_CODE TEXT);"
      }
    ],
    [
      {
        "question": "First names of the proffesors teaching course ACCT-211?",
        "query": "SELECT DISTINCT t1.emp_fname FROM employee AS t1 JOIN CLASS AS t2 ON t1.emp_num = t2.prof_num WHERE crs_code = \"ACCT-211\"",
        "schema": "CREATE TABLE CLASS (PROF_NUM NUMBER, CRS_CODE TEXT, CLASS_CODE TEXT); CREATE TABLE COURSE (CRS_CODE TEXT, DEPT_CODE TEXT); CREATE TABLE DEPARTMENT (EMP_NUM NUMBER, DEPT_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_LNAME TEXT, EMP_NUM NUMBER, EMP_JOBCODE TEXT, EMP_INITIAL TEXT, EMP_HIREDATE TIME, EMP_DOB TIME, EMP_FNAME TEXT); CREATE TABLE STUDENT (PROF_NUM NUMBER, STU_LNAME TEXT, STU_FNAME TEXT); CREATE TABLE PROFESSOR (DEPT_CODE TEXT, PROF_OFFICE TEXT, EMP_NUM NUMBER);"
      },
      {
        "question": "what are their birth dates?",
        "query": "SELECT DISTINCT t1.emp_dob FROM employee AS t1 JOIN CLASS AS t2 ON t1.emp_num = t2.prof_num WHERE crs_code = \"ACCT-211\"",
        "schema": "CREATE TABLE PROFESSOR (EMP_NUM NUMBER, DEPT_CODE TEXT, PROF_OFFICE TEXT); CREATE TABLE EMPLOYEE (EMP_DOB TIME, EMP_FNAME TEXT, EMP_JOBCODE TEXT, EMP_INITIAL TEXT, EMP_NUM NUMBER, EMP_HIREDATE TIME, EMP_LNAME TEXT); CREATE TABLE STUDENT (PROF_NUM NUMBER, STU_FNAME TEXT, STU_LNAME TEXT); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT, EMP_NUM NUMBER); CREATE TABLE CLASS (PROF_NUM NUMBER, CLASS_TIME TEXT, CRS_CODE TEXT, CLASS_CODE TEXT); CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_CODE TEXT);"
      }
    ],
    [
      {
        "question": "I'd like to know how many professors have a Ph.D. or MA?",
        "query": "SELECT COUNT ( * ) FROM professor WHERE prof_high_degree = 'Ph.D.' OR prof_high_degree = 'MA'",
        "schema": "CREATE TABLE CLASS (PROF_NUM NUMBER, CRS_CODE TEXT); CREATE TABLE COURSE (CRS_CODE TEXT, DEPT_CODE TEXT); CREATE TABLE PROFESSOR (PROF_OFFICE TEXT, DEPT_CODE TEXT, PROF_HIGH_DEGREE TEXT, EMP_NUM NUMBER); CREATE TABLE EMPLOYEE (EMP_INITIAL TEXT, EMP_NUM NUMBER, EMP_HIREDATE TIME, EMP_LNAME TEXT, EMP_DOB TIME, EMP_JOBCODE TEXT, EMP_FNAME TEXT); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT, EMP_NUM NUMBER, DEPT_NAME TEXT);"
      },
      {
        "question": "How many of them are Ph.D. degrees?",
        "query": "SELECT COUNT ( * ) FROM professor WHERE prof_high_degree = 'Ph.D.'",
        "schema": "CREATE TABLE CLASS (PROF_NUM NUMBER, CRS_CODE TEXT); CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_INITIAL TEXT, EMP_HIREDATE TIME, EMP_FNAME TEXT, EMP_DOB TIME, EMP_JOBCODE TEXT, EMP_NUM NUMBER, EMP_LNAME TEXT); CREATE TABLE PROFESSOR (EMP_NUM NUMBER, DEPT_CODE TEXT, PROF_HIGH_DEGREE TEXT, PROF_OFFICE TEXT); CREATE TABLE DEPARTMENT (EMP_NUM NUMBER, DEPT_CODE TEXT, DEPT_NAME TEXT);"
      }
    ],
    [
      {
        "question": "How many students number in this table?",
        "query": "SELECT COUNT ( * ) FROM student",
        "schema": "CREATE TABLE ENROLL (STU_NUM NUMBER, CLASS_CODE TEXT); CREATE TABLE STUDENT (STU_INIT TEXT, STU_LNAME TEXT, STU_CLASS TEXT, STU_DOB TIME, STU_GPA NUMBER, STU_NUM NUMBER, DEPT_CODE TEXT, STU_HRS NUMBER, PROF_NUM NUMBER); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE COURSE (CRS_CODE TEXT); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT); CREATE TABLE CLASS (CLASS_CODE TEXT, CRS_CODE TEXT);"
      },
      {
        "question": "How many class rooms in this table?",
        "query": "SELECT COUNT ( class_room ) FROM CLASS",
        "schema": "CREATE TABLE DEPARTMENT (DEPT_CODE TEXT); CREATE TABLE COURSE (CRS_CODE TEXT, DEPT_CODE TEXT); CREATE TABLE STUDENT (STU_NUM NUMBER, STU_LNAME TEXT, STU_CLASS TEXT, STU_HRS NUMBER, STU_GPA NUMBER, PROF_NUM NUMBER, STU_INIT TEXT, DEPT_CODE TEXT, STU_DOB TIME); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE ENROLL (STU_NUM NUMBER, CLASS_CODE TEXT); CREATE TABLE CLASS (CRS_CODE TEXT, CLASS_SECTION TEXT, PROF_NUM NUMBER, CLASS_CODE TEXT, CLASS_ROOM TEXT);"
      },
      {
        "question": "Find the average gpa of the students?",
        "query": "SELECT AVG ( stu_gpa ) FROM student",
        "schema": "CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_CODE TEXT); CREATE TABLE STUDENT (STU_INIT TEXT, STU_DOB TIME, DEPT_CODE TEXT, STU_NUM NUMBER, STU_CLASS TEXT, PROF_NUM NUMBER, STU_HRS NUMBER, STU_GPA NUMBER, STU_LNAME TEXT); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT); CREATE TABLE ENROLL (STU_NUM NUMBER, CLASS_CODE TEXT); CREATE TABLE CLASS (CLASS_CODE TEXT, CLASS_ROOM TEXT, CLASS_SECTION TEXT, CRS_CODE TEXT, PROF_NUM NUMBER);"
      },
      {
        "question": "What is last name of William?",
        "query": "SELECT stu_lname FROM student WHERE stu_fname = \"William\"",
        "schema": "CREATE TABLE ENROLL (CLASS_CODE TEXT, STU_NUM NUMBER); CREATE TABLE COURSE (CRS_CODE TEXT, DEPT_CODE TEXT); CREATE TABLE STUDENT (STU_FNAME TEXT, STU_NUM NUMBER, STU_DOB TIME, STU_CLASS TEXT, STU_GPA NUMBER, DEPT_CODE TEXT, STU_LNAME TEXT, STU_HRS NUMBER, PROF_NUM NUMBER, STU_INIT TEXT); CREATE TABLE CLASS (CRS_CODE TEXT, CLASS_SECTION TEXT, CLASS_ROOM TEXT, CLASS_CODE TEXT, PROF_NUM NUMBER); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT);"
      }
    ],
    [
      {
        "question": "what instructors teach courses? | Do you mean the first names of instructors who teach courses? | Yes, the first names of all instructors who teach courses,",
        "query": "SELECT t2.emp_fname FROM CLASS AS t1 JOIN employee AS t2 ON t1.prof_num = t2.emp_num JOIN course AS t3 ON t1.crs_code = t3.crs_code JOIN professor AS t4 ON t2.emp_num = t4.emp_num",
        "schema": "CREATE TABLE DEPARTMENT (DEPT_CODE TEXT); CREATE TABLE CLASS (CLASS_CODE TEXT, CRS_CODE TEXT, PROF_NUM NUMBER); CREATE TABLE EMPLOYEE (EMP_FNAME TEXT, EMP_HIREDATE TIME, EMP_LNAME TEXT, EMP_JOBCODE TEXT, EMP_DOB TIME, EMP_NUM NUMBER); CREATE TABLE PROFESSOR (DEPT_CODE TEXT, EMP_NUM NUMBER); CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_CODE TEXT);"
      },
      {
        "question": "Great. I need to know which first name of the instructor goes with each class and class description.",
        "query": "SELECT t2.emp_fname , t3.crs_description FROM CLASS AS t1 JOIN employee AS t2 ON t1.prof_num = t2.emp_num JOIN course AS t3 ON t1.crs_code = t3.crs_code JOIN professor AS t4 ON t2.emp_num = t4.emp_num",
        "schema": "CREATE TABLE EMPLOYEE (EMP_DOB TIME, EMP_NUM NUMBER, EMP_JOBCODE TEXT, EMP_LNAME TEXT, EMP_FNAME TEXT, EMP_HIREDATE TIME); CREATE TABLE PROFESSOR (EMP_NUM NUMBER, DEPT_CODE TEXT); CREATE TABLE CLASS (CLASS_CODE TEXT, PROF_NUM NUMBER, CRS_CODE TEXT); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT); CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_DESCRIPTION TEXT, CRS_CODE TEXT);"
      },
      {
        "question": "great, I also need to know the first name of each instructor with the course name, and where their office is located.",
        "query": "SELECT t2.emp_fname , t4.prof_office , t3.crs_description FROM CLASS AS t1 JOIN employee AS t2 ON t1.prof_num = t2.emp_num JOIN course AS t3 ON t1.crs_code = t3.crs_code JOIN professor AS t4 ON t2.emp_num = t4.emp_num",
        "schema": "CREATE TABLE CLASS (CRS_CODE TEXT, CLASS_CODE TEXT, PROF_NUM NUMBER); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_LNAME TEXT, EMP_NUM NUMBER, EMP_HIREDATE TIME, EMP_DOB TIME, EMP_FNAME TEXT, EMP_JOBCODE TEXT); CREATE TABLE PROFESSOR (EMP_NUM NUMBER, PROF_OFFICE TEXT, DEPT_CODE TEXT); CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_DESCRIPTION TEXT, CRS_CODE TEXT);"
      }
    ],
    [
      {
        "question": "How many schools are there?",
        "query": "SELECT COUNT ( school_code ) FROM department",
        "schema": "CREATE TABLE DEPARTMENT (EMP_NUM NUMBER, DEPT_NAME TEXT, DEPT_CODE TEXT, DEPT_ADDRESS TEXT, SCHOOL_CODE TEXT); CREATE TABLE STUDENT (STU_NUM NUMBER, STU_DOB TIME, DEPT_CODE TEXT); CREATE TABLE ENROLL (STU_NUM NUMBER, CLASS_CODE TEXT); CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_CODE TEXT); CREATE TABLE CLASS (CLASS_CODE TEXT, PROF_NUM NUMBER, CRS_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER); CREATE TABLE PROFESSOR (EMP_NUM NUMBER, DEPT_CODE TEXT);"
      },
      {
        "question": "How many professors are there in total?",
        "query": "SELECT COUNT ( * ) FROM professor",
        "schema": "CREATE TABLE PROFESSOR (EMP_NUM NUMBER, DEPT_CODE TEXT, PROF_OFFICE TEXT, PROF_EXTENSION TEXT); CREATE TABLE STUDENT (DEPT_CODE TEXT, STU_NUM NUMBER, STU_DOB TIME); CREATE TABLE ENROLL (STU_NUM NUMBER, CLASS_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_JOBCODE TEXT, EMP_HIREDATE TIME, EMP_LNAME TEXT, EMP_FNAME TEXT, EMP_DOB TIME, EMP_INITIAL TEXT, EMP_NUM NUMBER); CREATE TABLE CLASS (PROF_NUM NUMBER, CLASS_CODE TEXT, CRS_CODE TEXT); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT, DEPT_ADDRESS TEXT, EMP_NUM NUMBER, DEPT_NAME TEXT, SCHOOL_CODE TEXT); CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_CODE TEXT);"
      },
      {
        "question": "Which school has the most professors?",
        "query": "SELECT t1.school_code FROM department AS t1 JOIN professor AS t2 ON t1.dept_code = t2.dept_code GROUP BY t1.school_code ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE PROFESSOR (DEPT_CODE TEXT, PROF_OFFICE TEXT, EMP_NUM NUMBER, PROF_EXTENSION TEXT); CREATE TABLE STUDENT (DEPT_CODE TEXT, STU_DOB TIME, STU_NUM NUMBER); CREATE TABLE EMPLOYEE (EMP_INITIAL TEXT, EMP_HIREDATE TIME, EMP_LNAME TEXT, EMP_NUM NUMBER, EMP_JOBCODE TEXT, EMP_FNAME TEXT, EMP_DOB TIME); CREATE TABLE ENROLL (STU_NUM NUMBER, CLASS_CODE TEXT); CREATE TABLE COURSE (CRS_CODE TEXT, DEPT_CODE TEXT); CREATE TABLE CLASS (PROF_NUM NUMBER, CLASS_CODE TEXT, CRS_CODE TEXT); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT, SCHOOL_CODE TEXT, DEPT_ADDRESS TEXT, DEPT_NAME TEXT, EMP_NUM NUMBER);"
      },
      {
        "question": "How about the school with the least amount of professors?",
        "query": "SELECT t1.school_code FROM department AS t1 JOIN professor AS t2 ON t1.dept_code = t2.dept_code GROUP BY t1.school_code ORDER BY COUNT ( * ) LIMIT 1",
        "schema": "CREATE TABLE COURSE (DEPT_CODE TEXT, CRS_CODE TEXT); CREATE TABLE DEPARTMENT (SCHOOL_CODE TEXT, DEPT_ADDRESS TEXT, EMP_NUM NUMBER, DEPT_NAME TEXT, DEPT_CODE TEXT); CREATE TABLE PROFESSOR (PROF_EXTENSION TEXT, EMP_NUM NUMBER, DEPT_CODE TEXT, PROF_OFFICE TEXT); CREATE TABLE STUDENT (DEPT_CODE TEXT, STU_NUM NUMBER, STU_DOB TIME); CREATE TABLE ENROLL (CLASS_CODE TEXT, STU_NUM NUMBER); CREATE TABLE CLASS (CLASS_CODE TEXT, PROF_NUM NUMBER, CRS_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_HIREDATE TIME, EMP_LNAME TEXT, EMP_NUM NUMBER, EMP_JOBCODE TEXT, EMP_INITIAL TEXT, EMP_FNAME TEXT, EMP_DOB TIME);"
      },
      {
        "question": "What departments does this school have?",
        "query": "SELECT dept_name FROM department WHERE school_code IN ( SELECT t1.school_code FROM department AS t1 JOIN professor AS t2 ON t1.dept_code = t2.dept_code GROUP BY t1.school_code ORDER BY COUNT ( * ) LIMIT 1 )",
        "schema": "CREATE TABLE PROFESSOR (DEPT_CODE TEXT, PROF_OFFICE TEXT, PROF_EXTENSION TEXT, EMP_NUM NUMBER); CREATE TABLE COURSE (CRS_CODE TEXT, DEPT_CODE TEXT); CREATE TABLE ENROLL (STU_NUM NUMBER, CLASS_CODE TEXT); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT, DEPT_NAME TEXT, EMP_NUM NUMBER, DEPT_ADDRESS TEXT, SCHOOL_CODE TEXT); CREATE TABLE CLASS (CRS_CODE TEXT, PROF_NUM NUMBER, CLASS_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_FNAME TEXT, EMP_NUM NUMBER, EMP_HIREDATE TIME, EMP_INITIAL TEXT, EMP_DOB TIME, EMP_JOBCODE TEXT, EMP_LNAME TEXT); CREATE TABLE STUDENT (DEPT_CODE TEXT, STU_NUM NUMBER, STU_DOB TIME);"
      }
    ],
    [
      {
        "question": "How many professors are there?",
        "query": "SELECT COUNT ( * ) FROM professor",
        "schema": "CREATE TABLE CLASS (PROF_NUM NUMBER); CREATE TABLE STUDENT (DEPT_CODE TEXT); CREATE TABLE PROFESSOR (EMP_NUM NUMBER, PROF_OFFICE TEXT, PROF_EXTENSION TEXT, PROF_HIGH_DEGREE TEXT, DEPT_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_HIREDATE TIME, EMP_INITIAL TEXT, EMP_DOB TIME, EMP_FNAME TEXT, EMP_LNAME TEXT, EMP_JOBCODE TEXT, EMP_NUM NUMBER); CREATE TABLE COURSE (DEPT_CODE TEXT); CREATE TABLE DEPARTMENT (DEPT_NAME TEXT, EMP_NUM NUMBER, DEPT_CODE TEXT);"
      },
      {
        "question": "How many have a Ph.D. degree?",
        "query": "SELECT COUNT ( * ) FROM professor WHERE prof_high_degree = \"Ph.D.\"",
        "schema": "CREATE TABLE PROFESSOR (PROF_EXTENSION TEXT, EMP_NUM NUMBER, PROF_OFFICE TEXT, PROF_HIGH_DEGREE TEXT, DEPT_CODE TEXT); CREATE TABLE CLASS (PROF_NUM NUMBER); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER, EMP_INITIAL TEXT, EMP_HIREDATE TIME, EMP_LNAME TEXT, EMP_FNAME TEXT, EMP_JOBCODE TEXT, EMP_DOB TIME); CREATE TABLE COURSE (DEPT_CODE TEXT); CREATE TABLE STUDENT (DEPT_CODE TEXT); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT, DEPT_NAME TEXT, EMP_NUM NUMBER);"
      },
      {
        "question": "Yes",
        "query": "SELECT t2.dept_name FROM professor AS t1 JOIN department AS t2 ON t1.dept_code = t2.dept_code WHERE t1.prof_high_degree = 'Ph.D.' GROUP BY t1.dept_code ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE CLASS (PROF_NUM NUMBER); CREATE TABLE COURSE (DEPT_CODE TEXT); CREATE TABLE DEPARTMENT (EMP_NUM NUMBER, DEPT_NAME TEXT, DEPT_CODE TEXT); CREATE TABLE STUDENT (DEPT_CODE TEXT); CREATE TABLE EMPLOYEE (EMP_DOB TIME, EMP_HIREDATE TIME, EMP_JOBCODE TEXT, EMP_FNAME TEXT, EMP_LNAME TEXT, EMP_NUM NUMBER, EMP_INITIAL TEXT); CREATE TABLE PROFESSOR (DEPT_CODE TEXT, PROF_OFFICE TEXT, PROF_EXTENSION TEXT, PROF_HIGH_DEGREE TEXT, EMP_NUM NUMBER);"
      }
    ],
    [
      {
        "question": "What is the first name of the oldest employee?",
        "query": "SELECT emp_fname FROM employee ORDER BY emp_dob LIMIT 1",
        "schema": "CREATE TABLE PROFESSOR (EMP_NUM NUMBER, DEPT_CODE TEXT); CREATE TABLE DEPARTMENT (EMP_NUM NUMBER, DEPT_CODE TEXT); CREATE TABLE CLASS (PROF_NUM NUMBER); CREATE TABLE STUDENT (STU_LNAME TEXT, STU_FNAME TEXT); CREATE TABLE EMPLOYEE (EMP_LNAME TEXT, EMP_FNAME TEXT, EMP_DOB TIME, EMP_NUM NUMBER);"
      },
      {
        "question": "What is his last name?",
        "query": "SELECT emp_lname FROM employee ORDER BY emp_dob LIMIT 1",
        "schema": "CREATE TABLE EMPLOYEE (EMP_HIREDATE TIME, EMP_NUM NUMBER, EMP_FNAME TEXT, EMP_LNAME TEXT, EMP_DOB TIME); CREATE TABLE DEPARTMENT (EMP_NUM NUMBER, DEPT_CODE TEXT); CREATE TABLE CLASS (PROF_NUM NUMBER); CREATE TABLE STUDENT (STU_LNAME TEXT, STU_FNAME TEXT); CREATE TABLE PROFESSOR (DEPT_CODE TEXT, EMP_NUM NUMBER);"
      },
      {
        "question": "What was his employee hire date?",
        "query": "SELECT emp_hiredate FROM employee ORDER BY emp_dob LIMIT 1",
        "schema": "CREATE TABLE CLASS (PROF_NUM NUMBER); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER, EMP_DOB TIME, EMP_HIREDATE TIME, EMP_LNAME TEXT, EMP_FNAME TEXT); CREATE TABLE PROFESSOR (EMP_NUM NUMBER, DEPT_CODE TEXT); CREATE TABLE DEPARTMENT (EMP_NUM NUMBER, DEPT_CODE TEXT); CREATE TABLE STUDENT (STU_LNAME TEXT, STU_FNAME TEXT);"
      },
      {
        "question": "What was his date of birth?",
        "query": "SELECT emp_dob FROM employee ORDER BY emp_dob LIMIT 1",
        "schema": "CREATE TABLE STUDENT (STU_LNAME TEXT, STU_FNAME TEXT); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT, EMP_NUM NUMBER); CREATE TABLE PROFESSOR (DEPT_CODE TEXT, EMP_NUM NUMBER); CREATE TABLE CLASS (PROF_NUM NUMBER); CREATE TABLE EMPLOYEE (EMP_LNAME TEXT, EMP_DOB TIME, EMP_NUM NUMBER, EMP_FNAME TEXT, EMP_HIREDATE TIME);"
      }
    ],
    [
      {
        "question": "What is the first name and last name of the youngest student whose GPA is above 3?",
        "query": "SELECT stu_fname , stu_lname FROM student WHERE stu_gpa > 3 ORDER BY stu_dob DESC LIMIT 1",
        "schema": "CREATE TABLE STUDENT (STU_GPA NUMBER, PROF_NUM NUMBER, STU_DOB TIME, STU_FNAME TEXT, STU_LNAME TEXT, STU_NUM NUMBER);"
      },
      {
        "question": "What is her GPA?",
        "query": "SELECT stu_gpa FROM student WHERE stu_gpa > 3 ORDER BY stu_dob DESC LIMIT 1",
        "schema": "CREATE TABLE STUDENT (STU_GPA NUMBER, STU_DOB TIME, STU_LNAME TEXT, PROF_NUM NUMBER, STU_NUM NUMBER, STU_FNAME TEXT);"
      },
      {
        "question": "What are the full name and GPA of the oldest student whose GPA is below 3?",
        "query": "SELECT stu_fname , stu_lname , stu_gpa FROM student WHERE stu_gpa < 3 ORDER BY stu_dob ASC LIMIT 1",
        "schema": "CREATE TABLE STUDENT (STU_FNAME TEXT, STU_LNAME TEXT, PROF_NUM NUMBER, STU_DOB TIME, STU_NUM NUMBER, STU_GPA NUMBER);"
      }
    ],
    [
      {
        "question": "Thank you. What are the office extensions numbers of professor Donelly and Blalock please?",
        "query": "SELECT t3.dept_extension FROM employee AS t1 JOIN professor AS t2 ON t1.emp_num = t2.emp_num JOIN department AS t3 ON t2.dept_code = t3.dept_code WHERE emp_lname = \"Donelly\" OR emp_lname = \"Blalock\"",
        "schema": "CREATE TABLE PROFESSOR (PROF_EXTENSION TEXT, PROF_OFFICE TEXT, DEPT_CODE TEXT, EMP_NUM NUMBER); CREATE TABLE CLASS (PROF_NUM NUMBER); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER, EMP_DOB TIME, EMP_JOBCODE TEXT, EMP_INITIAL TEXT, EMP_HIREDATE TIME, EMP_LNAME TEXT, EMP_FNAME TEXT); CREATE TABLE STUDENT (DEPT_CODE TEXT, STU_LNAME TEXT, PROF_NUM NUMBER, STU_FNAME TEXT); CREATE TABLE DEPARTMENT (EMP_NUM NUMBER, DEPT_NAME TEXT, DEPT_EXTENSION TEXT, DEPT_CODE TEXT);"
      },
      {
        "question": "Thank you! Can you please confirm the school code of the History Department?",
        "query": "SELECT t3.school_code FROM employee AS t1 JOIN professor AS t2 ON t1.emp_num = t2.emp_num JOIN department AS t3 ON t2.dept_code = t3.dept_code WHERE t3.dept_name = 'History'",
        "schema": "CREATE TABLE CLASS (CRS_CODE TEXT, CLASS_CODE TEXT, PROF_NUM NUMBER); CREATE TABLE COURSE (DEPT_CODE TEXT); CREATE TABLE PROFESSOR (DEPT_CODE TEXT, PROF_EXTENSION TEXT, PROF_OFFICE TEXT, EMP_NUM NUMBER); CREATE TABLE EMPLOYEE (EMP_NUM NUMBER, EMP_INITIAL TEXT, EMP_HIREDATE TIME, EMP_DOB TIME, EMP_FNAME TEXT, EMP_LNAME TEXT, EMP_JOBCODE TEXT); CREATE TABLE STUDENT (PROF_NUM NUMBER, STU_LNAME TEXT, DEPT_CODE TEXT, STU_FNAME TEXT); CREATE TABLE DEPARTMENT (DEPT_CODE TEXT, EMP_NUM NUMBER, DEPT_EXTENSION TEXT, DEPT_NAME TEXT, SCHOOL_CODE TEXT);"
      }
    ]
  ],
  "customers_and_addresses": [
    [
      {
        "question": "can you show me a list of active from date?",
        "query": "SELECT active_from_date FROM customer_contact_channels",
        "schema": "CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Customer_Contact_Channels (active_to_date TIME, active_from_date TIME);"
      },
      {
        "question": "can you show me a list of  active to date?",
        "query": "SELECT active_to_date FROM customer_contact_channels",
        "schema": "CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Customer_Contact_Channels (active_to_date TIME, active_from_date TIME, channel_code TEXT, contact_number TEXT, customer_id NUMBER);"
      },
      {
        "question": "which one the first active to date?",
        "query": "SELECT * FROM customer_contact_channels ORDER BY active_to_date LIMIT 1",
        "schema": "CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Customer_Contact_Channels (contact_number TEXT, customer_id NUMBER, active_from_date TIME, active_to_date TIME, channel_code TEXT);"
      }
    ],
    [
      {
        "question": "show me the customer name of the order that have the status \"cancelled\"",
        "query": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id WHERE order_status = \"Cancelled\"",
        "schema": "CREATE TABLE Order_Items (order_id NUMBER); CREATE TABLE Customers (customer_id NUMBER, date_became_customer TIME, customer_name TEXT, other_customer_details TEXT); CREATE TABLE Customer_Orders (order_details TEXT, customer_id NUMBER, order_status TEXT, order_id NUMBER); CREATE TABLE Customer_Addresses (customer_id NUMBER);"
      },
      {
        "question": "name the customer which have  15 as customer id?",
        "query": "SELECT customer_name FROM customers WHERE customer_id = 15",
        "schema": "CREATE TABLE Customer_Orders (customer_id NUMBER, order_id NUMBER, order_status TEXT, order_details TEXT, order_date TIME); CREATE TABLE Customers (customer_id NUMBER, customer_name TEXT, date_became_customer TIME, other_customer_details TEXT); CREATE TABLE Order_Items (order_id NUMBER); CREATE TABLE Customer_Addresses (customer_id NUMBER);"
      },
      {
        "question": "find the customer name of the order that have status \"delivered\"",
        "query": "SELECT t1.customer_name , t2.order_date FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id WHERE order_status = \"Delivered\"",
        "schema": "CREATE TABLE Customer_Addresses (customer_id NUMBER); CREATE TABLE Customers (customer_id NUMBER, customer_name TEXT, date_became_customer TIME, other_customer_details TEXT); CREATE TABLE Customer_Orders (customer_id NUMBER, order_details TEXT, order_id NUMBER, order_date TIME, order_status TEXT); CREATE TABLE Order_Items (order_id NUMBER);"
      },
      {
        "question": "find the customer date of the orders that have the status\" delivered\" | did you mean the order date? | yes",
        "query": "SELECT t2.order_date FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id WHERE order_status = \"Delivered\"",
        "schema": "CREATE TABLE Customer_Addresses (customer_id NUMBER); CREATE TABLE Customers (customer_name TEXT, other_customer_details TEXT, customer_id NUMBER, date_became_customer TIME); CREATE TABLE Order_Items (order_id NUMBER); CREATE TABLE Customer_Orders (customer_id NUMBER, order_details TEXT, order_id NUMBER, order_status TEXT, order_date TIME);"
      }
    ],
    [
      {
        "question": "Please show me all customers and their contact channels | Do you want the names of customers or id? | names please",
        "query": "SELECT DISTINCT customer_name, channel_code FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id = t2.customer_id",
        "schema": "CREATE TABLE Customer_Contact_Channels (customer_id NUMBER, active_to_date TIME, channel_code TEXT, contact_number TEXT); CREATE TABLE Customers (customer_id NUMBER, customer_name TEXT); CREATE TABLE Customer_Addresses (customer_id NUMBER);"
      },
      {
        "question": "please show just those customers who's channel code was email",
        "query": "SELECT DISTINCT customer_name FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id = t2.customer_id WHERE channel_code = \"Email\"",
        "schema": "CREATE TABLE Customer_Contact_Channels (contact_number TEXT, channel_code TEXT, active_to_date TIME, customer_id NUMBER); CREATE TABLE Customers (customer_id NUMBER, customer_name TEXT); CREATE TABLE Customer_Addresses (customer_id NUMBER);"
      },
      {
        "question": "Please list just Tillman Ernsers contact channel",
        "query": "SELECT DISTINCT channel_code FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id = t2.customer_id WHERE customer_name = \"Tillman Ernser\"",
        "schema": "CREATE TABLE Customers (customer_id NUMBER, customer_name TEXT); CREATE TABLE Customer_Contact_Channels (channel_code TEXT, active_to_date TIME, contact_number TEXT, customer_id NUMBER); CREATE TABLE Customer_Addresses (customer_id NUMBER);"
      }
    ],
    [
      {
        "question": "What is the customer name of customer id 9?",
        "query": "SELECT customer_name FROM customers WHERE customer_id = 9",
        "schema": "CREATE TABLE Customer_Orders (customer_id NUMBER, order_details TEXT, order_id NUMBER); CREATE TABLE Customers (customer_id NUMBER, other_customer_details TEXT, customer_name TEXT); CREATE TABLE Customer_Addresses (customer_id NUMBER);"
      },
      {
        "question": "Find the payment method of Tillman Ernser.",
        "query": "SELECT payment_method FROM customers WHERE customer_name = \"Tillman Ernser\"",
        "schema": "CREATE TABLE Products (product_details TEXT, product_id NUMBER); CREATE TABLE Customers (other_customer_details TEXT, payment_method TEXT, customer_name TEXT, customer_id NUMBER); CREATE TABLE Customer_Addresses (customer_id NUMBER); CREATE TABLE Customer_Orders (order_id NUMBER, order_details TEXT, customer_id NUMBER);"
      },
      {
        "question": "What are the contact number of customer id 3?",
        "query": "SELECT contact_number FROM customer_contact_channels WHERE customer_id = 3",
        "schema": "CREATE TABLE Products (product_id NUMBER, product_details TEXT); CREATE TABLE Customers (payment_method TEXT, customer_id NUMBER, other_customer_details TEXT, customer_name TEXT); CREATE TABLE Customer_Contact_Channels (contact_number TEXT, customer_id NUMBER, channel_code TEXT); CREATE TABLE Customer_Orders (order_id NUMBER, customer_id NUMBER, order_details TEXT); CREATE TABLE Customer_Addresses (customer_id NUMBER);"
      },
      {
        "question": "What is the \"active to date\" of the latest contact channel used by \"Tillman Ernser\"?",
        "query": "SELECT MAX ( t2.active_to_date ) FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id = t2.customer_id WHERE t1.customer_name = \"Tillman Ernser\"",
        "schema": "CREATE TABLE Products (product_id NUMBER, product_details TEXT); CREATE TABLE Customers (date_became_customer TIME, customer_id NUMBER, payment_method TEXT, other_customer_details TEXT, customer_name TEXT); CREATE TABLE Customer_Contact_Channels (active_from_date TIME, channel_code TEXT, active_to_date TIME, customer_id NUMBER, contact_number TEXT); CREATE TABLE Customer_Orders (order_details TEXT, customer_id NUMBER, order_id NUMBER); CREATE TABLE Customer_Addresses (customer_id NUMBER);"
      }
    ],
    [
      {
        "question": "What was the least quantity of items purchased? | do you mean the id of product or the id of order? | ID of the order please.",
        "query": "SELECT order_id FROM order_items ORDER BY order_quantity LIMIT 1",
        "schema": "CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Customer_Orders (customer_id NUMBER, order_id NUMBER); CREATE TABLE Products (product_id NUMBER); CREATE TABLE Order_Items (order_quantity TEXT, order_id NUMBER, product_id NUMBER);"
      },
      {
        "question": "What is the payment method of the order with an id of 11?",
        "query": "SELECT t1.payment_method FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id WHERE t2.order_id = 11",
        "schema": "CREATE TABLE Customer_Orders (customer_id NUMBER, order_id NUMBER); CREATE TABLE Customers (payment_method TEXT, customer_id NUMBER); CREATE TABLE Products (product_id NUMBER); CREATE TABLE Order_Items (order_quantity TEXT, product_id NUMBER, order_id NUMBER);"
      }
    ],
    [
      {
        "question": "List the names of all the customers that use email as a contact channel.",
        "query": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id = t2.customer_id WHERE t2.channel_code = 'Email'",
        "schema": "CREATE TABLE Customers (customer_id NUMBER, other_customer_details TEXT, customer_name TEXT); CREATE TABLE Customer_Contact_Channels (customer_id NUMBER, contact_number TEXT, channel_code TEXT); CREATE TABLE Customer_Addresses (customer_id NUMBER);"
      },
      {
        "question": "List the names of all the customers that use email as a contact channel and the date they became a member.",
        "query": "SELECT t1.customer_name, t1.date_became_customer FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id = t2.customer_id WHERE t2.channel_code = 'Email'",
        "schema": "CREATE TABLE Customers (other_customer_details TEXT, date_became_customer TIME, customer_name TEXT, customer_id NUMBER); CREATE TABLE Customer_Addresses (customer_id NUMBER); CREATE TABLE Customer_Contact_Channels (contact_number TEXT, channel_code TEXT, customer_id NUMBER);"
      },
      {
        "question": "Find the name and active to date of the customers that use email as the contact channel.",
        "query": "SELECT t1.customer_name , t2.active_to_date FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id = t2.customer_id WHERE t2.channel_code = 'Email'",
        "schema": "CREATE TABLE Customers (date_became_customer TIME, customer_name TEXT, other_customer_details TEXT, customer_id NUMBER); CREATE TABLE Customer_Contact_Channels (channel_code TEXT, active_from_date TIME, customer_id NUMBER, contact_number TEXT, active_to_date TIME); CREATE TABLE Customer_Addresses (customer_id NUMBER);"
      },
      {
        "question": "What is the payment method of Devin Mills.",
        "query": "SELECT DISTINCT t1.payment_method FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id = t2.customer_id WHERE t1.customer_name = \"Devin Mills\"",
        "schema": "CREATE TABLE Customer_Addresses (customer_id NUMBER); CREATE TABLE Customers (customer_name TEXT, payment_method TEXT, customer_id NUMBER, other_customer_details TEXT, date_became_customer TIME); CREATE TABLE Customer_Contact_Channels (channel_code TEXT, active_from_date TIME, active_to_date TIME, customer_id NUMBER, contact_number TEXT);"
      },
      {
        "question": "What is the customer id of Devin Mills.",
        "query": "SELECT DISTINCT t1.customer_id FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id = t2.customer_id WHERE t1.customer_name = \"Devin Mills\"",
        "schema": "CREATE TABLE Customers (payment_method TEXT, customer_name TEXT, date_became_customer TIME, customer_id NUMBER, other_customer_details TEXT); CREATE TABLE Customer_Addresses (customer_id NUMBER); CREATE TABLE Customer_Contact_Channels (active_to_date TIME, active_from_date TIME, customer_id NUMBER, contact_number TEXT, channel_code TEXT);"
      },
      {
        "question": "List the names of all the customers with the same payment method as Devin Mills.",
        "query": "SELECT DISTINCT t1.customer_name FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id = t2.customer_id WHERE t1.payment_method = ( SELECT DISTINCT t1.payment_method FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id = t2.customer_id WHERE t1.customer_name = \"Devin Mills\" )",
        "schema": "CREATE TABLE Customer_Addresses (customer_id NUMBER); CREATE TABLE Customer_Contact_Channels (customer_id NUMBER, active_from_date TIME, channel_code TEXT, contact_number TEXT, active_to_date TIME); CREATE TABLE Customers (customer_name TEXT, payment_method TEXT, customer_id NUMBER, other_customer_details TEXT, date_became_customer TIME);"
      }
    ],
    [
      {
        "question": "what is the country of zip postcode 416?",
        "query": "SELECT country FROM addresses WHERE zip_postcode = 416",
        "schema": "CREATE TABLE Addresses (country TEXT, zip_postcode TEXT, state_province_county TEXT);"
      },
      {
        "question": "what is the city of south california",
        "query": "SELECT city FROM addresses WHERE state_province_county = \"SouthCarolina\"",
        "schema": "CREATE TABLE Addresses (city TEXT, zip_postcode TEXT, country TEXT, address_id NUMBER, state_province_county TEXT);"
      },
      {
        "question": "what is the address content of colorando?",
        "query": "SELECT address_content FROM addresses WHERE state_province_county = \"Colorado\"",
        "schema": "CREATE TABLE Products (product_id NUMBER); CREATE TABLE Addresses (country TEXT, state_province_county TEXT, city TEXT, address_id NUMBER, zip_postcode TEXT, address_content TEXT);"
      },
      {
        "question": "what is the city of new jersey",
        "query": "SELECT city FROM addresses WHERE state_province_county = \"NewJersey\"",
        "schema": "CREATE TABLE Addresses (city TEXT, address_id NUMBER, address_content TEXT, country TEXT, zip_postcode TEXT, state_province_county TEXT); CREATE TABLE Products (product_id NUMBER);"
      },
      {
        "question": "list the city of country USA?",
        "query": "SELECT city FROM addresses WHERE country = \"USA\"",
        "schema": "CREATE TABLE Addresses (address_content TEXT, zip_postcode TEXT, country TEXT, address_id NUMBER, city TEXT, state_province_county TEXT); CREATE TABLE Products (product_id NUMBER);"
      }
    ],
    [
      {
        "question": "What kind of payment methods are there? | Do you mean the number of payment kinds? | yes",
        "query": "SELECT COUNT ( DISTINCT payment_method ) FROM customers",
        "schema": "CREATE TABLE Customers (payment_method TEXT, customer_id NUMBER);"
      },
      {
        "question": "And can you show me how many customers there are?",
        "query": "SELECT COUNT ( * ) FROM customers",
        "schema": "CREATE TABLE Customer_Orders (customer_id NUMBER); CREATE TABLE Customer_Addresses (customer_id NUMBER); CREATE TABLE Customers (customer_id NUMBER, customer_name TEXT, payment_method TEXT);"
      },
      {
        "question": "Can you show me the name of the customer who purchased the least quantity of items?",
        "query": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id GROUP BY t1.customer_name ORDER BY SUM ( t3.order_quantity ) LIMIT 1",
        "schema": "CREATE TABLE Order_Items (product_id NUMBER, order_id NUMBER, order_quantity TEXT); CREATE TABLE Customer_Orders (order_id NUMBER, customer_id NUMBER); CREATE TABLE Products (product_id NUMBER); CREATE TABLE Customers (customer_id NUMBER, customer_name TEXT, payment_method TEXT); CREATE TABLE Customer_Addresses (customer_id NUMBER);"
      },
      {
        "question": "What payment method did that customer use?",
        "query": "SELECT t1.payment_method FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id GROUP BY t1.customer_name ORDER BY SUM ( t3.order_quantity ) LIMIT 1",
        "schema": "CREATE TABLE Customer_Addresses (customer_id NUMBER); CREATE TABLE Customers (customer_id NUMBER, payment_method TEXT, customer_name TEXT); CREATE TABLE Customer_Orders (customer_id NUMBER, order_id NUMBER); CREATE TABLE Products (product_id NUMBER); CREATE TABLE Order_Items (product_id NUMBER, order_quantity TEXT, order_id NUMBER);"
      },
      {
        "question": "How many items did that customer buy?",
        "query": "SELECT SUM ( t3.order_quantity ) FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id GROUP BY t1.customer_name ORDER BY SUM ( t3.order_quantity ) LIMIT 1",
        "schema": "CREATE TABLE Products (product_id NUMBER); CREATE TABLE Customer_Orders (order_id NUMBER, customer_id NUMBER); CREATE TABLE Customer_Addresses (customer_id NUMBER); CREATE TABLE Order_Items (product_id NUMBER, order_quantity TEXT, order_id NUMBER); CREATE TABLE Customers (payment_method TEXT, customer_name TEXT, customer_id NUMBER);"
      }
    ],
    [
      {
        "question": "Which customer bought the most items? | Do you want the name of the customer? | That would be lovely.",
        "query": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id GROUP BY t1.customer_name ORDER BY SUM ( t3.order_quantity ) DESC LIMIT 1",
        "schema": "CREATE TABLE Customer_Addresses (customer_id NUMBER); CREATE TABLE Order_Items (order_quantity TEXT, product_id NUMBER, order_id NUMBER); CREATE TABLE Customers (customer_name TEXT, customer_id NUMBER, payment_method TEXT); CREATE TABLE Customer_Orders (order_details TEXT, order_id NUMBER, customer_id NUMBER); CREATE TABLE Products (product_id NUMBER, product_details TEXT);"
      },
      {
        "question": "How many did he purchase?",
        "query": "SELECT SUM ( t3.order_quantity ) FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id GROUP BY t1.customer_name ORDER BY SUM ( t3.order_quantity ) DESC LIMIT 1",
        "schema": "CREATE TABLE Customer_Orders (customer_id NUMBER, order_details TEXT, order_id NUMBER); CREATE TABLE Customers (customer_name TEXT, payment_method TEXT, customer_id NUMBER); CREATE TABLE Customer_Addresses (customer_id NUMBER); CREATE TABLE Products (product_details TEXT, product_id NUMBER); CREATE TABLE Order_Items (order_quantity TEXT, order_id NUMBER, product_id NUMBER);"
      },
      {
        "question": "How did he pay?",
        "query": "SELECT t1.payment_method FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id GROUP BY t1.customer_name ORDER BY SUM ( t3.order_quantity ) DESC LIMIT 1",
        "schema": "CREATE TABLE Customer_Orders (order_id NUMBER, customer_id NUMBER, order_details TEXT); CREATE TABLE Order_Items (order_id NUMBER, product_id NUMBER, order_quantity TEXT); CREATE TABLE Customers (payment_method TEXT, customer_id NUMBER, customer_name TEXT); CREATE TABLE Customer_Addresses (customer_id NUMBER); CREATE TABLE Products (product_details TEXT, product_id NUMBER);"
      },
      {
        "question": "When did he become a customer?",
        "query": "SELECT t1.date_became_customer FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id GROUP BY t1.customer_name ORDER BY SUM ( t3.order_quantity ) DESC LIMIT 1",
        "schema": "CREATE TABLE Products (product_details TEXT, product_id NUMBER); CREATE TABLE Customer_Orders (order_details TEXT, order_id NUMBER, order_date TIME, customer_id NUMBER); CREATE TABLE Customer_Addresses (customer_id NUMBER); CREATE TABLE Customers (payment_method TEXT, date_became_customer TIME, customer_id NUMBER, customer_name TEXT); CREATE TABLE Order_Items (order_quantity TEXT, product_id NUMBER, order_id NUMBER);"
      },
      {
        "question": "How many became customers before that?",
        "query": "SELECT COUNT ( * ) FROM customers WHERE date_became_customer < ( SELECT t1.date_became_customer FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id GROUP BY t1.customer_name ORDER BY SUM ( t3.order_quantity ) DESC LIMIT 1 )",
        "schema": "CREATE TABLE Customers (customer_name TEXT, customer_id NUMBER, date_became_customer TIME, payment_method TEXT); CREATE TABLE Customer_Orders (order_status TEXT, order_date TIME, order_details TEXT, customer_id NUMBER, order_id NUMBER); CREATE TABLE Products (product_id NUMBER, product_details TEXT); CREATE TABLE Customer_Addresses (customer_id NUMBER); CREATE TABLE Order_Items (product_id NUMBER, order_id NUMBER, order_quantity TEXT);"
      }
    ],
    [
      {
        "question": "how many  Customers are there",
        "query": "SELECT COUNT ( * ) FROM customers",
        "schema": "CREATE TABLE Customer_Contact_Channels (customer_id NUMBER); CREATE TABLE Customer_Addresses (address_id NUMBER, address_type TEXT, customer_id NUMBER); CREATE TABLE Customer_Orders (order_id NUMBER, customer_id NUMBER); CREATE TABLE Customers (other_customer_details TEXT, customer_name TEXT, customer_id NUMBER);"
      },
      {
        "question": "how may customer payment cash method",
        "query": "SELECT COUNT ( * ) FROM customers WHERE payment_method = \"Cash\"",
        "schema": "CREATE TABLE Customer_Orders (order_id NUMBER, customer_id NUMBER); CREATE TABLE Customers (payment_method TEXT, other_customer_details TEXT, customer_id NUMBER, customer_name TEXT); CREATE TABLE Customer_Contact_Channels (customer_id NUMBER); CREATE TABLE Customer_Addresses (customer_id NUMBER, address_id NUMBER, address_type TEXT);"
      },
      {
        "question": "what is the name of customer id 2",
        "query": "SELECT customer_name FROM customers WHERE customer_id = 2",
        "schema": "CREATE TABLE Customer_Orders (order_id NUMBER, customer_id NUMBER); CREATE TABLE Customer_Addresses (address_type TEXT, customer_id NUMBER, address_id NUMBER); CREATE TABLE Customer_Contact_Channels (customer_id NUMBER); CREATE TABLE Customers (customer_name TEXT, other_customer_details TEXT, customer_id NUMBER, payment_method TEXT);"
      }
    ],
    [
      {
        "question": "What is the total number of products?",
        "query": "SELECT SUM ( t2.order_quantity ) FROM customer_orders AS t1 JOIN order_items AS t2 ON t1.order_id = t2.order_id",
        "schema": "CREATE TABLE Customer_Orders (order_id NUMBER); CREATE TABLE Products (product_details TEXT, product_id NUMBER); CREATE TABLE Order_Items (product_id NUMBER, order_id NUMBER, order_quantity TEXT); CREATE TABLE Customers (customer_id NUMBER);"
      },
      {
        "question": "What is the total number of products that are in orders with status \"Delivered\"?",
        "query": "SELECT SUM ( t2.order_quantity ) FROM customer_orders AS t1 JOIN order_items AS t2 ON t1.order_id = t2.order_id WHERE t1.order_status = \"Delivered\"",
        "schema": "CREATE TABLE Order_Items (order_quantity TEXT, product_id NUMBER, order_id NUMBER); CREATE TABLE Products (product_details TEXT, product_id NUMBER); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Customer_Orders (customer_id NUMBER, order_status TEXT, order_id NUMBER);"
      },
      {
        "question": "What is the total number of products that are in orders with status \"Cancelled\"?",
        "query": "SELECT SUM ( t2.order_quantity ) FROM customer_orders AS t1 JOIN order_items AS t2 ON t1.order_id = t2.order_id WHERE t1.order_status = \"Cancelled\"",
        "schema": "CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Order_Items (product_id NUMBER, order_quantity TEXT, order_id NUMBER); CREATE TABLE Products (product_details TEXT, product_id NUMBER); CREATE TABLE Customer_Orders (customer_id NUMBER, order_status TEXT, order_id NUMBER);"
      }
    ],
    [
      {
        "question": "List the order cancelled customer id from the table?",
        "query": "SELECT order_id ,customer_id FROM customer_orders WHERE order_status = 'Cancelled'",
        "schema": "CREATE TABLE Customers (date_became_customer TIME, customer_name TEXT, customer_id NUMBER); CREATE TABLE Order_Items (order_id NUMBER); CREATE TABLE Customer_Addresses (customer_id NUMBER); CREATE TABLE Customer_Orders (order_details TEXT, customer_id NUMBER, order_id NUMBER, order_status TEXT, order_date TIME);"
      },
      {
        "question": "Which order id has the least quantity on the list?",
        "query": "SELECT order_id FROM order_items ORDER BY order_quantity LIMIT 1",
        "schema": "CREATE TABLE Order_Items (order_id NUMBER, order_quantity TEXT); CREATE TABLE Customer_Orders (customer_id NUMBER, order_date TIME, order_details TEXT, order_id NUMBER, order_status TEXT); CREATE TABLE Customers (customer_name TEXT, date_became_customer TIME, customer_id NUMBER); CREATE TABLE Customer_Addresses (customer_id NUMBER);"
      },
      {
        "question": "How many customer ids has the \"delivered\" status on the list?",
        "query": "SELECT COUNT ( customer_id ) FROM customer_orders WHERE order_status = 'Delivered'",
        "schema": "CREATE TABLE Customer_Addresses (customer_id NUMBER); CREATE TABLE Order_Items (order_id NUMBER, order_quantity TEXT); CREATE TABLE Customers (date_became_customer TIME, customer_name TEXT, customer_id NUMBER); CREATE TABLE Customer_Orders (order_details TEXT, order_date TIME, order_status TEXT, customer_id NUMBER, order_id NUMBER);"
      }
    ],
    [
      {
        "question": "Hello There! Can you provide me with a list of all customer names?",
        "query": "SELECT customer_name FROM customers",
        "schema": "CREATE TABLE Customer_Orders (customer_id NUMBER); CREATE TABLE Customer_Addresses (customer_id NUMBER); CREATE TABLE Customers (other_customer_details TEXT, customer_name TEXT, customer_id NUMBER); CREATE TABLE Customer_Contact_Channels (customer_id NUMBER);"
      },
      {
        "question": "Thank you for that!  Can you filter that list to show only the customers living in Colorado?",
        "query": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id WHERE t3.state_province_county = \"Colorado\"",
        "schema": "CREATE TABLE Addresses (city TEXT, address_id NUMBER, country TEXT, state_province_county TEXT); CREATE TABLE Customers (other_customer_details TEXT, customer_id NUMBER, customer_name TEXT); CREATE TABLE Customer_Addresses (customer_id NUMBER, address_id NUMBER, address_type TEXT); CREATE TABLE Customer_Orders (customer_id NUMBER); CREATE TABLE Customer_Contact_Channels (customer_id NUMBER);"
      },
      {
        "question": "Great!  Can you update this list to show their address content, city, and zip code?",
        "query": "SELECT t1.customer_name, t3.address_content, t3.city, t3.zip_postcode FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id WHERE t3.state_province_county = \"Colorado\"",
        "schema": "CREATE TABLE Customer_Contact_Channels (customer_id NUMBER); CREATE TABLE Customer_Orders (customer_id NUMBER); CREATE TABLE Addresses (address_id NUMBER, state_province_county TEXT, zip_postcode TEXT, city TEXT, address_content TEXT, country TEXT); CREATE TABLE Customers (customer_name TEXT, other_customer_details TEXT, customer_id NUMBER); CREATE TABLE Customer_Addresses (address_type TEXT, customer_id NUMBER, address_id NUMBER);"
      }
    ],
    [
      {
        "question": "Hello there!  Can you provide me with a list of all of the customer names and their corresponding payment methods?",
        "query": "SELECT customer_name, payment_method FROM customers",
        "schema": "CREATE TABLE Customers (customer_name TEXT, payment_method TEXT, customer_id NUMBER); CREATE TABLE Customer_Orders (customer_id NUMBER);"
      },
      {
        "question": "Thank you for that!  Can you tell me what the most popular payment method is?",
        "query": "SELECT payment_method FROM customers GROUP BY payment_method ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Customer_Orders (customer_id NUMBER); CREATE TABLE Customers (customer_id NUMBER, customer_name TEXT, payment_method TEXT);"
      }
    ],
    [
      {
        "question": "FIND THE CUSTOMER NAME AND DATE OF THE ORDERS THAT HAVE THE STATUS \"DELIVERED\"",
        "query": "SELECT t1.customer_name , t2.order_date FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id WHERE order_status = \"Delivered\"",
        "schema": "CREATE TABLE Customer_Orders (order_details TEXT, customer_id NUMBER, order_date TIME, order_status TEXT, order_id NUMBER); CREATE TABLE Customer_Addresses (customer_id NUMBER); CREATE TABLE Customers (customer_name TEXT, customer_id NUMBER, date_became_customer TIME);"
      },
      {
        "question": "WHAT ARE THE CUSTOMER ID FOR ALL THE CUSTOMERS WHOSE ORDERS WERE CANCELLED?",
        "query": "SELECT DISTINCT customer_id FROM customer_orders WHERE order_status = 'Cancelled'",
        "schema": "CREATE TABLE Customer_Orders (order_date TIME, order_details TEXT, customer_id NUMBER, order_status TEXT, order_id NUMBER); CREATE TABLE Customer_Addresses (customer_id NUMBER); CREATE TABLE Customers (customer_id NUMBER, date_became_customer TIME, customer_name TEXT);"
      },
      {
        "question": "what are the names of the customers whose customer details are null?",
        "query": "SELECT DISTINCT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id WHERE order_details = 'NULL'",
        "schema": "CREATE TABLE Customer_Addresses (customer_id NUMBER); CREATE TABLE Customer_Orders (order_date TIME, order_details TEXT, order_status TEXT, customer_id NUMBER, order_id NUMBER); CREATE TABLE Customers (date_became_customer TIME, other_customer_details TEXT, customer_name TEXT, customer_id NUMBER);"
      }
    ],
    [
      {
        "question": "Find the state and country of all cities with post code starting with 4.",
        "query": "SELECT state_province_county , country FROM addresses WHERE zip_postcode LIKE \"4%\"",
        "schema": "CREATE TABLE Addresses (country TEXT, address_id NUMBER, zip_postcode TEXT, state_province_county TEXT, city TEXT); CREATE TABLE Customers (customer_id NUMBER);"
      },
      {
        "question": "What are the cities in Colorado that have post codes starting with 4.",
        "query": "SELECT city FROM addresses WHERE zip_postcode LIKE \"4%\" AND state_province_county = \"Colorado\"",
        "schema": "CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Addresses (address_id NUMBER, state_province_county TEXT, country TEXT, zip_postcode TEXT, city TEXT);"
      },
      {
        "question": "How about cities in Texas that have post codes starting with 4?",
        "query": "SELECT city FROM addresses WHERE zip_postcode LIKE \"4%\" AND state_province_county = \"Texas\"",
        "schema": "CREATE TABLE Addresses (address_id NUMBER, state_province_county TEXT, zip_postcode TEXT, country TEXT, city TEXT); CREATE TABLE Customers (customer_id NUMBER);"
      },
      {
        "question": "How many cities in total with post code starting with 4?",
        "query": "SELECT COUNT ( DISTINCT city ) FROM addresses WHERE zip_postcode LIKE \"4%\"",
        "schema": "CREATE TABLE Addresses (state_province_county TEXT, zip_postcode TEXT, address_id NUMBER, city TEXT, country TEXT); CREATE TABLE Customers (customer_id NUMBER);"
      }
    ],
    [
      {
        "question": "list the canceled product customer id?",
        "query": "SELECT product_id FROM customer_orders AS t1 JOIN order_items AS t2 ON t1.order_id = t2.order_id WHERE order_status = 'Cancelled'",
        "schema": "CREATE TABLE Order_Items (order_id NUMBER, product_id NUMBER); CREATE TABLE Customers (customer_id NUMBER, date_became_customer TIME, customer_name TEXT); CREATE TABLE Customer_Orders (order_id NUMBER, order_date TIME, customer_id NUMBER, order_status TEXT); CREATE TABLE Products (product_details TEXT, product_id NUMBER); CREATE TABLE Customer_Addresses (customer_id NUMBER);"
      },
      {
        "question": "which is the order date of customer id 5?",
        "query": "SELECT order_date FROM customer_orders WHERE customer_id = 5",
        "schema": "CREATE TABLE Customer_Orders (customer_id NUMBER, order_id NUMBER, order_date TIME, order_status TEXT); CREATE TABLE Customer_Addresses (customer_id NUMBER); CREATE TABLE Order_Items (product_id NUMBER, order_id NUMBER); CREATE TABLE Customers (date_became_customer TIME, customer_id NUMBER, customer_name TEXT); CREATE TABLE Products (product_id NUMBER, product_details TEXT);"
      },
      {
        "question": "what the average order quantity for all the order items?",
        "query": "SELECT AVG ( order_quantity ) FROM order_items",
        "schema": "CREATE TABLE Customer_Addresses (customer_id NUMBER); CREATE TABLE Customers (customer_name TEXT, date_became_customer TIME, customer_id NUMBER); CREATE TABLE Order_Items (order_quantity TEXT, product_id NUMBER, order_id NUMBER); CREATE TABLE Products (product_id NUMBER, product_details TEXT); CREATE TABLE Customer_Orders (order_id NUMBER, order_status TEXT, order_date TIME, customer_id NUMBER);"
      }
    ],
    [
      {
        "question": "List the countries having more than 4 addresses listed.",
        "query": "SELECT country FROM addresses GROUP BY country HAVING COUNT ( address_id ) > 4",
        "schema": "CREATE TABLE Customer_Addresses (address_id NUMBER); CREATE TABLE Addresses (address_id NUMBER, country TEXT, state_province_county TEXT);"
      },
      {
        "question": "What is zip postcode of the lucasville city?",
        "query": "SELECT zip_postcode FROM addresses WHERE city = 'Lucasville'",
        "schema": "CREATE TABLE Addresses (zip_postcode TEXT, city TEXT, state_province_county TEXT, address_id NUMBER, country TEXT); CREATE TABLE Customer_Addresses (address_id NUMBER);"
      },
      {
        "question": "Final question is How many Address ids in the table?",
        "query": "SELECT COUNT ( address_id ) FROM addresses",
        "schema": "CREATE TABLE Addresses (address_id NUMBER, zip_postcode TEXT, country TEXT, state_province_county TEXT, city TEXT); CREATE TABLE Customer_Addresses (address_id NUMBER);"
      }
    ],
    [
      {
        "question": "Hi who made the latest order?",
        "query": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id ORDER BY t2.order_date DESC LIMIT 1",
        "schema": "CREATE TABLE Customer_Addresses (date_address_from TIME, customer_id NUMBER); CREATE TABLE Order_Items (order_id NUMBER, order_quantity TEXT); CREATE TABLE Customers (date_became_customer TIME, customer_id NUMBER, customer_name TEXT); CREATE TABLE Customer_Orders (order_details TEXT, order_date TIME, order_status TEXT, order_id NUMBER, customer_id NUMBER);"
      },
      {
        "question": "How many people canceled their orders",
        "query": "SELECT COUNT ( DISTINCT customer_id ) FROM customer_orders WHERE order_status = 'Cancelled'",
        "schema": "CREATE TABLE Customer_Addresses (date_address_from TIME, customer_id NUMBER); CREATE TABLE Customer_Orders (order_status TEXT, customer_id NUMBER, order_id NUMBER, order_date TIME, order_details TEXT); CREATE TABLE Order_Items (order_id NUMBER, order_quantity TEXT); CREATE TABLE Customers (customer_name TEXT, date_became_customer TIME, customer_id NUMBER);"
      },
      {
        "question": "How many times has Eunice Morar placed an order",
        "query": "SELECT COUNT ( * ) FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id WHERE t1.customer_name = \"Eunice Morar\"",
        "schema": "CREATE TABLE Order_Items (order_id NUMBER, order_quantity TEXT); CREATE TABLE Customers (customer_name TEXT, customer_id NUMBER, date_became_customer TIME); CREATE TABLE Customer_Addresses (customer_id NUMBER, date_address_from TIME); CREATE TABLE Customer_Orders (order_details TEXT, order_id NUMBER, order_date TIME, order_status TEXT, customer_id NUMBER);"
      },
      {
        "question": "How did Eunic Morar pay?",
        "query": "SELECT payment_method FROM customers WHERE customer_name = \"Eunice Morar\"",
        "schema": "CREATE TABLE Customer_Addresses (date_address_from TIME, customer_id NUMBER); CREATE TABLE Order_Items (order_quantity TEXT, order_id NUMBER); CREATE TABLE Customers (customer_id NUMBER, customer_name TEXT, payment_method TEXT, date_became_customer TIME); CREATE TABLE Customer_Orders (order_details TEXT, order_status TEXT, order_date TIME, customer_id NUMBER, order_id NUMBER);"
      }
    ],
    [
      {
        "question": "In which city are the most customers living in?",
        "query": "SELECT t3.city FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id GROUP BY t3.city ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Customer_Addresses (address_id NUMBER, customer_id NUMBER, address_type TEXT); CREATE TABLE Customers (customer_id NUMBER, customer_name TEXT); CREATE TABLE Addresses (address_id NUMBER, zip_postcode TEXT, city TEXT);"
      },
      {
        "question": "What about the city with least customers?",
        "query": "SELECT t3.city FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id GROUP BY t3.city ORDER BY COUNT ( * ) LIMIT 1",
        "schema": "CREATE TABLE Customer_Addresses (address_type TEXT, address_id NUMBER, customer_id NUMBER); CREATE TABLE Addresses (zip_postcode TEXT, city TEXT, address_id NUMBER); CREATE TABLE Customers (customer_id NUMBER, customer_name TEXT);"
      },
      {
        "question": "And in which state is it located?",
        "query": "SELECT t3.state_province_county FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id GROUP BY t3.city ORDER BY COUNT ( * ) LIMIT 1",
        "schema": "CREATE TABLE Addresses (state_province_county TEXT, zip_postcode TEXT, city TEXT, country TEXT, address_id NUMBER); CREATE TABLE Customer_Orders (customer_id NUMBER); CREATE TABLE Customer_Addresses (address_id NUMBER, address_type TEXT, customer_id NUMBER); CREATE TABLE Customers (customer_name TEXT, customer_id NUMBER);"
      }
    ],
    [
      {
        "question": "Could you tell me the name of the customer that made the order that had the largest quantity of items in it?",
        "query": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id WHERE t3.order_quantity = ( SELECT MAX ( order_quantity ) FROM order_items )",
        "schema": "CREATE TABLE Customer_Addresses (customer_id NUMBER); CREATE TABLE Customers (customer_name TEXT, customer_id NUMBER, other_customer_details TEXT); CREATE TABLE Order_Items (order_quantity TEXT, product_id NUMBER, order_id NUMBER); CREATE TABLE Customer_Orders (order_id NUMBER, order_details TEXT, customer_id NUMBER);"
      },
      {
        "question": "What dates did they become customers?",
        "query": "SELECT t1.customer_name, t1.date_became_customer FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id WHERE t3.order_quantity = ( SELECT MAX ( order_quantity ) FROM order_items )",
        "schema": "CREATE TABLE Order_Items (order_id NUMBER, order_quantity TEXT, product_id NUMBER); CREATE TABLE Customers (customer_id NUMBER, customer_name TEXT, date_became_customer TIME, other_customer_details TEXT); CREATE TABLE Customer_Addresses (customer_id NUMBER); CREATE TABLE Customer_Orders (customer_id NUMBER, order_date TIME, order_id NUMBER, order_details TEXT);"
      },
      {
        "question": "Can you list the names of all customers who cancelled at least one order as well as the order dates of those cancelled orders?",
        "query": "SELECT t1.customer_name, t2.order_date FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id WHERE t2.order_status = \"Cancelled\"",
        "schema": "CREATE TABLE Customer_Addresses (customer_id NUMBER); CREATE TABLE Customer_Orders (order_date TIME, order_status TEXT, customer_id NUMBER, order_details TEXT, order_id NUMBER); CREATE TABLE Order_Items (product_id NUMBER, order_quantity TEXT, order_id NUMBER); CREATE TABLE Customers (date_became_customer TIME, other_customer_details TEXT, customer_name TEXT, customer_id NUMBER);"
      },
      {
        "question": "What are the order quantities and dates for all orders that were paid for with cash?",
        "query": "SELECT t3.order_quantity, t2.order_date FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id WHERE t1.payment_method = \"Cash\"",
        "schema": "CREATE TABLE Customer_Orders (order_id NUMBER, customer_id NUMBER, order_details TEXT, order_status TEXT, order_date TIME); CREATE TABLE Customers (customer_name TEXT, date_became_customer TIME, other_customer_details TEXT, payment_method TEXT, customer_id NUMBER); CREATE TABLE Order_Items (order_quantity TEXT, product_id NUMBER, order_id NUMBER); CREATE TABLE Customer_Addresses (customer_id NUMBER);"
      }
    ],
    [
      {
        "question": "which order has high quantity",
        "query": "SELECT order_id, FROM order_items GROUP BY order_id ORDER BY SUM ( order_quantity ) DESC LIMIT 1",
        "schema": "CREATE TABLE Order_Items (product_id NUMBER, order_id NUMBER, order_quantity TEXT); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Customer_Orders (order_id NUMBER, order_details TEXT);"
      },
      {
        "question": "how many types of products have rodrick heaney bought in total?",
        "query": "SELECT COUNT ( DISTINCT t3.product_id ) FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id WHERE t1.customer_name = \"Rodrick Heaney\"",
        "schema": "CREATE TABLE Customer_Addresses (customer_id NUMBER); CREATE TABLE Order_Items (order_quantity TEXT, order_id NUMBER, product_id NUMBER); CREATE TABLE Products (product_id NUMBER); CREATE TABLE Customers (customer_id NUMBER, customer_name TEXT, other_customer_details TEXT); CREATE TABLE Customer_Orders (order_status TEXT, order_id NUMBER, customer_id NUMBER, order_details TEXT);"
      },
      {
        "question": "which person had order high amount of products | What attributes do you want to know about the customer who ordered the highest amount of products? | I want everything about it.",
        "query": "SELECT * FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id GROUP BY t2.customer_id ORDER BY SUM ( t3.order_quantity ) DESC LIMIT 1",
        "schema": "CREATE TABLE Order_Items (product_id NUMBER, order_quantity TEXT, order_id NUMBER); CREATE TABLE Products (product_id NUMBER); CREATE TABLE Customers (other_customer_details TEXT, customer_name TEXT, customer_id NUMBER); CREATE TABLE Customer_Addresses (customer_id NUMBER); CREATE TABLE Customer_Orders (order_id NUMBER, order_status TEXT, customer_id NUMBER, order_details TEXT);"
      }
    ],
    [
      {
        "question": "how many customers are there?",
        "query": "SELECT COUNT ( * ) FROM customers",
        "schema": "CREATE TABLE Customers (customer_id NUMBER, other_customer_details TEXT, customer_name TEXT); CREATE TABLE Customer_Contact_Channels (customer_id NUMBER); CREATE TABLE Customer_Orders (customer_id NUMBER, order_id NUMBER); CREATE TABLE Customer_Addresses (customer_id NUMBER);"
      },
      {
        "question": "show all their names.",
        "query": "SELECT customer_name FROM customers",
        "schema": "CREATE TABLE Customer_Contact_Channels (customer_id NUMBER); CREATE TABLE Customer_Addresses (customer_id NUMBER); CREATE TABLE Customers (customer_id NUMBER, other_customer_details TEXT, customer_name TEXT); CREATE TABLE Customer_Orders (customer_id NUMBER, order_id NUMBER);"
      },
      {
        "question": "please order them in alphabetical order.",
        "query": "SELECT customer_name FROM customers ORDER BY customer_name",
        "schema": "CREATE TABLE Customer_Contact_Channels (customer_id NUMBER); CREATE TABLE Customer_Orders (order_id NUMBER, customer_id NUMBER); CREATE TABLE Customers (other_customer_details TEXT, customer_id NUMBER, customer_name TEXT); CREATE TABLE Customer_Addresses (customer_id NUMBER);"
      }
    ],
    [
      {
        "question": "I want to know the payment methods available",
        "query": "SELECT DISTINCT payment_method FROM customers",
        "schema": "CREATE TABLE Customers (payment_method TEXT, customer_name TEXT, customer_id NUMBER);"
      },
      {
        "question": "How many customers use credit credit card as a means of payment?",
        "query": "SELECT COUNT ( * ) FROM customers WHERE payment_method = \"Credit Card\"",
        "schema": "CREATE TABLE Customers (payment_method TEXT, customer_name TEXT, customer_id NUMBER);"
      },
      {
        "question": "What about Cash?",
        "query": "SELECT COUNT ( * ) FROM customers WHERE payment_method = \"Cash\"",
        "schema": "CREATE TABLE Customers (customer_id NUMBER, customer_name TEXT, payment_method TEXT);"
      },
      {
        "question": "And Cheque?",
        "query": "SELECT COUNT ( * ) FROM customers WHERE payment_method = \"Cheque\"",
        "schema": "CREATE TABLE Customers (payment_method TEXT, customer_name TEXT, customer_id NUMBER);"
      }
    ],
    [
      {
        "question": "What payment method did Dr. Julia Wuckert MD use?",
        "query": "SELECT payment_method FROM customers WHERE customer_name = \"Dr. Julia Wuckert MD\"",
        "schema": "CREATE TABLE Customers (payment_method TEXT, customer_name TEXT, customer_id NUMBER); CREATE TABLE Customer_Addresses (customer_id NUMBER, address_id NUMBER); CREATE TABLE Customer_Orders (customer_id NUMBER);"
      },
      {
        "question": "How many customers used credit cards?\n?",
        "query": "SELECT COUNT ( customer_id ) FROM customers WHERE payment_method = \"Credit Card\"",
        "schema": "CREATE TABLE Customer_Addresses (customer_id NUMBER, address_id NUMBER); CREATE TABLE Customers (customer_name TEXT, payment_method TEXT, customer_id NUMBER); CREATE TABLE Customer_Orders (customer_id NUMBER);"
      },
      {
        "question": "From when did Rodrick Heaney became a customer?",
        "query": "SELECT t1.active_from_date FROM customer_contact_channels AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id WHERE t2.customer_name = \"Rodrick Heaney\"",
        "schema": "CREATE TABLE Customer_Addresses (customer_id NUMBER, address_id NUMBER); CREATE TABLE Customer_Contact_Channels (customer_id NUMBER, active_from_date TIME); CREATE TABLE Customer_Orders (customer_id NUMBER); CREATE TABLE Customers (date_became_customer TIME, customer_id NUMBER, customer_name TEXT, payment_method TEXT);"
      }
    ],
    [
      {
        "question": "Can you give me a list of all products?",
        "query": "SELECT * FROM products",
        "schema": "CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Order_Items (product_id NUMBER); CREATE TABLE Products (product_details TEXT, product_id NUMBER);"
      },
      {
        "question": "Could you order them by order quantity? | From small to large? | large to small",
        "query": "SELECT * FROM order_items AS t1 JOIN products AS t2 ON t1.product_id = t2.product_id GROUP BY t1.product_id ORDER BY SUM ( order_quantity ) DESC",
        "schema": "CREATE TABLE Products (product_details TEXT, product_id NUMBER); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Customer_Orders (order_id NUMBER); CREATE TABLE Order_Items (order_id NUMBER, product_id NUMBER, order_quantity TEXT);"
      }
    ],
    [
      {
        "question": "Can you list the names of all the customers who never placed a single order?",
        "query": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id",
        "schema": "CREATE TABLE Order_Items (order_id NUMBER); CREATE TABLE Customer_Orders (order_details TEXT, customer_id NUMBER, order_id NUMBER); CREATE TABLE Customers (customer_id NUMBER, other_customer_details TEXT, customer_name TEXT); CREATE TABLE Customer_Addresses (customer_id NUMBER);"
      },
      {
        "question": "What date did they each become customers?",
        "query": "SELECT date_became_customer FROM customers WHERE customer_name IN ( SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id )",
        "schema": "CREATE TABLE Order_Items (order_id NUMBER); CREATE TABLE Customer_Orders (order_date TIME, customer_id NUMBER, order_id NUMBER, order_details TEXT); CREATE TABLE Customer_Addresses (customer_id NUMBER); CREATE TABLE Customers (date_became_customer TIME, customer_id NUMBER, other_customer_details TEXT, customer_name TEXT);"
      },
      {
        "question": "What are the names of the customers who cancelled their orders?",
        "query": "SELECT DISTINCT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id WHERE t2.order_status = \"Cancelled\"",
        "schema": "CREATE TABLE Customer_Addresses (customer_id NUMBER); CREATE TABLE Customer_Orders (order_status TEXT, order_details TEXT, order_id NUMBER, order_date TIME, customer_id NUMBER); CREATE TABLE Order_Items (order_id NUMBER); CREATE TABLE Customers (customer_name TEXT, date_became_customer TIME, other_customer_details TEXT, customer_id NUMBER);"
      }
    ],
    [
      {
        "question": "Can you show me all the addresses with cities? | Did  you  mean  the address content? | Yes, and also the cities.",
        "query": "SELECT address_content,city FROM addresses",
        "schema": "CREATE TABLE Addresses (address_id NUMBER, city TEXT, address_content TEXT); CREATE TABLE Customer_Addresses (address_id NUMBER);"
      },
      {
        "question": "Hmm, I want to know the cities with customers living in.",
        "query": "SELECT city FROM addresses WHERE city IN ( SELECT DISTINCT t3.city FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id )",
        "schema": "CREATE TABLE Addresses (address_content TEXT, address_id NUMBER, city TEXT); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Customer_Addresses (address_id NUMBER, address_type TEXT, customer_id NUMBER);"
      },
      {
        "question": "Hmm, please list the cities that no customer is living in.",
        "query": "SELECT city FROM addresses WHERE city NOT IN ( SELECT DISTINCT t3.city FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id )",
        "schema": "CREATE TABLE Customer_Addresses (address_id NUMBER, customer_id NUMBER, address_type TEXT); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Addresses (city TEXT, address_id NUMBER, address_content TEXT);"
      }
    ],
    [
      {
        "question": "Please tell me the product names and ids. | Did you mean all the product details and ids? | Yes please.",
        "query": "SELECT product_details, product_id FROM products",
        "schema": "CREATE TABLE Order_Items (product_id NUMBER); CREATE TABLE Customers (customer_name TEXT, customer_id NUMBER); CREATE TABLE Products (product_details TEXT, product_id NUMBER);"
      },
      {
        "question": "Hmm, I want to know the product names and the order quantities. | Did  you  mean  the \tproduct details as product names? | Yes.",
        "query": "SELECT t1.product_details,t2.order_quantity FROM products AS t1 JOIN order_items AS t2 ON t1.product_id = t2.product_id",
        "schema": "CREATE TABLE Customer_Orders (order_id NUMBER); CREATE TABLE Order_Items (product_id NUMBER, order_quantity TEXT, order_id NUMBER); CREATE TABLE Products (product_details TEXT, product_id NUMBER); CREATE TABLE Customers (customer_name TEXT, customer_id NUMBER);"
      },
      {
        "question": "Can you tell which product has been ordered the most number of times?",
        "query": "SELECT t2.product_details FROM order_items AS t1 JOIN products AS t2 ON t1.product_id = t2.product_id GROUP BY t1.product_id ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Customer_Orders (order_id NUMBER); CREATE TABLE Products (product_details TEXT, product_id NUMBER); CREATE TABLE Customers (customer_id NUMBER, customer_name TEXT); CREATE TABLE Order_Items (order_quantity TEXT, product_id NUMBER, order_id NUMBER);"
      }
    ],
    [
      {
        "question": "what are the different type of payement method?",
        "query": "SELECT DISTINCT payment_method FROM customers",
        "schema": "CREATE TABLE Customers (customer_id NUMBER, payment_method TEXT); CREATE TABLE Customer_Addresses (address_type TEXT);"
      },
      {
        "question": "what are the different address type?",
        "query": "SELECT DISTINCT address_type FROM customer_addresses",
        "schema": "CREATE TABLE Customers (customer_id NUMBER, customer_name TEXT, payment_method TEXT); CREATE TABLE Customer_Addresses (address_type TEXT, address_id NUMBER, customer_id NUMBER); CREATE TABLE Addresses (address_id NUMBER);"
      },
      {
        "question": "which city in Dr. Julia Wuckert MD? | What you mean? | how many customer id?",
        "query": "SELECT COUNT ( customer_id ) FROM customers",
        "schema": "CREATE TABLE Customers (customer_name TEXT, customer_id NUMBER, payment_method TEXT); CREATE TABLE Customer_Orders (customer_id NUMBER); CREATE TABLE Customer_Addresses (customer_id NUMBER, address_type TEXT, address_id NUMBER); CREATE TABLE Addresses (city TEXT, address_id NUMBER);"
      }
    ],
    [
      {
        "question": "Which contact codes were used for less than 5 minutes?",
        "query": "SELECT channel_code FROM customer_contact_channels GROUP BY channel_code HAVING COUNT ( customer_id ) < 5",
        "schema": "CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Customer_Contact_Channels (contact_number TEXT, active_to_date TIME, customer_id NUMBER, active_from_date TIME, channel_code TEXT);"
      },
      {
        "question": "What are their contact numbers?",
        "query": "SELECT channel_code,contact_number FROM customer_contact_channels GROUP BY channel_code HAVING COUNT ( customer_id ) < 5",
        "schema": "CREATE TABLE Customer_Contact_Channels (active_to_date TIME, contact_number TEXT, channel_code TEXT, active_from_date TIME, customer_id NUMBER); CREATE TABLE Customers (customer_id NUMBER);"
      },
      {
        "question": "What was their activation dates? | do you want the active_from_date or active_to_date or both of them? | Both of them",
        "query": "SELECT channel_code,active_from_date,active_to_date FROM customer_contact_channels GROUP BY channel_code HAVING COUNT ( customer_id ) < 5",
        "schema": "CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Customer_Contact_Channels (channel_code TEXT, active_to_date TIME, customer_id NUMBER, active_from_date TIME, contact_number TEXT);"
      }
    ],
    [
      {
        "question": "Find the state of all cities with post code starting with 4.",
        "query": "SELECT state_province_county FROM addresses WHERE zip_postcode LIKE \"4%\"",
        "schema": "CREATE TABLE Addresses (country TEXT, state_province_county TEXT, address_id NUMBER, city TEXT, zip_postcode TEXT);"
      },
      {
        "question": "Find the country of all cities with post code starting with 4.",
        "query": "SELECT country FROM addresses WHERE zip_postcode LIKE \"4%\"",
        "schema": "CREATE TABLE Addresses (zip_postcode TEXT, city TEXT, address_id NUMBER, state_province_county TEXT, country TEXT);"
      },
      {
        "question": "List all the post codes starting with 4.",
        "query": "SELECT zip_postcode FROM addresses WHERE zip_postcode LIKE \"4%\"",
        "schema": "CREATE TABLE Addresses (country TEXT, zip_postcode TEXT, state_province_county TEXT, address_id NUMBER, city TEXT);"
      }
    ]
  ],
  "bike_1": [
    [
      {
        "question": "What are the dock count of San Jose Diridon Caltrain Station?",
        "query": "SELECT dock_count FROM station WHERE name = \"San Jose Diridon Caltrain Station\"",
        "schema": "CREATE TABLE status (station_id NUMBER, docks_available NUMBER); CREATE TABLE station (id NUMBER, long NUMBER, dock_count NUMBER, city TEXT, name TEXT); CREATE TABLE trip (end_station_name TEXT, start_station_name TEXT);"
      },
      {
        "question": "What are the bike id of zip code 94041?",
        "query": "SELECT bike_id FROM trip WHERE zip_code = 94041",
        "schema": "CREATE TABLE weather (zip_code NUMBER); CREATE TABLE station (dock_count NUMBER, id NUMBER, name TEXT, city TEXT, long NUMBER, lat NUMBER); CREATE TABLE trip (end_station_name TEXT, start_station_name TEXT, bike_id NUMBER, zip_code NUMBER); CREATE TABLE status (docks_available NUMBER, station_id NUMBER);"
      },
      {
        "question": "How many dock stations are there in San Jose? | Do you mean the total dock counts of all stations in city San Jose? | Yes",
        "query": "SELECT SUM ( dock_count ) FROM station WHERE city = \"San Jose\"",
        "schema": "CREATE TABLE status (docks_available NUMBER, station_id NUMBER); CREATE TABLE station (dock_count NUMBER, lat NUMBER, city TEXT, name TEXT, long NUMBER, id NUMBER); CREATE TABLE weather (zip_code NUMBER); CREATE TABLE trip (zip_code NUMBER, end_station_name TEXT, start_station_name TEXT, id NUMBER, bike_id NUMBER);"
      },
      {
        "question": "For each station, return its longitude and the average duration of trips that started from the station.",
        "query": "SELECT t1.name , t1.long , AVG ( t2.duration ) FROM station AS t1 JOIN trip AS t2 ON t1.id = t2.start_station_id GROUP BY t1.name",
        "schema": "CREATE TABLE trip (start_station_id NUMBER, zip_code NUMBER, id NUMBER, duration NUMBER, start_station_name TEXT, bike_id NUMBER, start_date TEXT, end_station_name TEXT); CREATE TABLE weather (zip_code NUMBER); CREATE TABLE station (long NUMBER, lat NUMBER, id NUMBER, city TEXT, dock_count NUMBER, name TEXT); CREATE TABLE status (docks_available NUMBER, station_id NUMBER);"
      }
    ],
    [
      {
        "question": "what is the zip code of the highest number of trips taken | What do you mean by \"highest number of trips taken\"? | i would like to know the zip code of trips taken above 200 with humidity below 70",
        "query": "SELECT zip_code FROM weather GROUP BY zip_code HAVING AVG ( mean_humidity ) < 70 INTERSECT SELECT zip_code FROM trip GROUP BY zip_code HAVING COUNT ( * ) > = 200",
        "schema": "CREATE TABLE weather (mean_humidity NUMBER, max_temperature_f NUMBER, zip_code NUMBER, max_humidity NUMBER, min_temperature_f NUMBER, mean_temperature_f NUMBER, min_humidity NUMBER); CREATE TABLE trip (duration NUMBER, id NUMBER, zip_code NUMBER);"
      },
      {
        "question": "what end station name has the least amount of trips taken but still above 100 trips",
        "query": "SELECT end_station_name FROM trip GROUP BY zip_code HAVING COUNT ( * ) > = 100 ORDER BY COUNT ( * ) ASC LIMIT 1",
        "schema": "CREATE TABLE weather (mean_temperature_f NUMBER, min_temperature_f NUMBER, min_humidity NUMBER, max_humidity NUMBER, zip_code NUMBER, mean_humidity NUMBER, max_temperature_f NUMBER); CREATE TABLE status (station_id NUMBER); CREATE TABLE station (long NUMBER, name TEXT, lat NUMBER, id NUMBER); CREATE TABLE trip (start_station_name TEXT, start_station_id NUMBER, zip_code NUMBER, duration NUMBER, id NUMBER, end_station_id NUMBER, end_station_name TEXT);"
      },
      {
        "question": "the zip code 94107 what is the humidity?",
        "query": "SELECT ( mean_humidity ) FROM weather WHERE zip_code = 94107",
        "schema": "CREATE TABLE status (station_id NUMBER); CREATE TABLE weather (mean_temperature_f NUMBER, max_humidity NUMBER, min_temperature_f NUMBER, zip_code NUMBER, max_temperature_f NUMBER, mean_humidity NUMBER, min_humidity NUMBER); CREATE TABLE station (long NUMBER, name TEXT, lat NUMBER, id NUMBER); CREATE TABLE trip (start_station_id NUMBER, duration NUMBER, start_station_name TEXT, end_station_name TEXT, end_station_id NUMBER, zip_code NUMBER, id NUMBER);"
      }
    ],
    [
      {
        "question": "What are the names of station with lowest lattitude?",
        "query": "SELECT name FROM station ORDER BY lat LIMIT 1",
        "schema": "CREATE TABLE trip (end_station_name TEXT, start_station_name TEXT); CREATE TABLE status (station_id NUMBER); CREATE TABLE station (city TEXT, name TEXT, lat NUMBER, long NUMBER, id NUMBER);"
      },
      {
        "question": "What is the latitude of the station with the lowest latitude?",
        "query": "SELECT lat FROM station ORDER BY lat LIMIT 1",
        "schema": "CREATE TABLE status (station_id NUMBER); CREATE TABLE station (id NUMBER, city TEXT, name TEXT, long NUMBER, lat NUMBER); CREATE TABLE trip (end_station_name TEXT, start_station_name TEXT);"
      },
      {
        "question": "Which city is san jose diridon caltrain station located?",
        "query": "SELECT city FROM station WHERE name = \"San Jose Diridon Caltrain Station\"",
        "schema": "CREATE TABLE station (lat NUMBER, city TEXT, name TEXT, id NUMBER, long NUMBER); CREATE TABLE trip (start_station_name TEXT, end_station_name TEXT); CREATE TABLE status (station_id NUMBER);"
      }
    ],
    [
      {
        "question": "how many stations are presented on the table",
        "query": "SELECT DISTINCT COUNT ( * ) FROM station",
        "schema": "CREATE TABLE station (id NUMBER, dock_count NUMBER, name TEXT, lat NUMBER, city TEXT, long NUMBER); CREATE TABLE status (station_id NUMBER);"
      },
      {
        "question": "list out the station names",
        "query": "SELECT DISTINCT name FROM station",
        "schema": "CREATE TABLE station (id NUMBER, dock_count NUMBER, lat NUMBER, long NUMBER, city TEXT, name TEXT); CREATE TABLE status (station_id NUMBER);"
      },
      {
        "question": "what is the city of San Jose Civic Center",
        "query": "SELECT city FROM station WHERE name = \"San Jose Civic Center\"",
        "schema": "CREATE TABLE station (city TEXT, id NUMBER, long NUMBER, name TEXT, dock_count NUMBER, lat NUMBER); CREATE TABLE status (station_id NUMBER);"
      }
    ],
    [
      {
        "question": "how many trip are presented on the table",
        "query": "SELECT COUNT ( * ) FROM trip",
        "schema": "CREATE TABLE trip (start_station_name TEXT, duration NUMBER, end_station_id NUMBER, start_station_id NUMBER, id NUMBER, subscription_type TEXT, end_station_name TEXT, bike_id NUMBER, start_date TEXT);"
      },
      {
        "question": "show all the start station name",
        "query": "SELECT start_station_name FROM trip",
        "schema": "CREATE TABLE trip (end_station_name TEXT, start_station_name TEXT, subscription_type TEXT, end_station_id NUMBER, id NUMBER, bike_id NUMBER, duration NUMBER, start_station_id NUMBER, start_date TEXT); CREATE TABLE station (name TEXT, id NUMBER, dock_count NUMBER);"
      },
      {
        "question": "what is the start date of Howard at 2nd | Do you mean its start station is Howard at 2nd? | exactly",
        "query": "SELECT start_date FROM trip WHERE start_station_name = \"Howard at 2nd\"",
        "schema": "CREATE TABLE trip (duration NUMBER, bike_id NUMBER, subscription_type TEXT, start_station_id NUMBER, start_station_name TEXT, start_date TEXT, end_station_name TEXT, id NUMBER, end_station_id NUMBER); CREATE TABLE station (city TEXT, dock_count NUMBER, lat NUMBER, name TEXT, id NUMBER, long NUMBER);"
      }
    ],
    [
      {
        "question": "what is the total duration of trips with bike id 636?",
        "query": "SELECT SUM ( duration ) FROM trip WHERE bike_id = 636",
        "schema": "CREATE TABLE station (id NUMBER, long NUMBER); CREATE TABLE trip (duration NUMBER, id NUMBER, start_date TEXT, bike_id NUMBER);"
      },
      {
        "question": "ok,what is the maximum duration of trip with bike id 636?",
        "query": "SELECT MAX ( duration ) FROM trip WHERE bike_id = 636",
        "schema": "CREATE TABLE trip (start_date TEXT, duration NUMBER, id NUMBER, bike_id NUMBER); CREATE TABLE station (long NUMBER, id NUMBER);"
      },
      {
        "question": "ok,what is the maximum duration of trip with bike id 454?",
        "query": "SELECT MAX ( duration ) FROM trip WHERE bike_id = 454",
        "schema": "CREATE TABLE station (long NUMBER, id NUMBER); CREATE TABLE trip (start_date TEXT, bike_id NUMBER, id NUMBER, duration NUMBER);"
      }
    ],
    [
      {
        "question": "Good morning, could you please let me know the IDs of the stations those are located in San Francisco?",
        "query": "SELECT id FROM station WHERE city = \"San Francisco\"",
        "schema": "CREATE TABLE station (name TEXT, id NUMBER, lat NUMBER, city TEXT); CREATE TABLE status (station_id NUMBER);"
      },
      {
        "question": "That's a big list, thank you. Then could you please let me know which of these stations has more than 10 bikes available?",
        "query": "SELECT id FROM station WHERE city = \"San Francisco\" INTERSECT SELECT station_id FROM status GROUP BY station_id HAVING bikes_available > 10",
        "schema": "CREATE TABLE station (lat NUMBER, city TEXT, long NUMBER, id NUMBER, name TEXT); CREATE TABLE status (bikes_available NUMBER, station_id NUMBER);"
      },
      {
        "question": "That was fast, thank you again :) Could you please let me know which station is located in the highest latitude?",
        "query": "SELECT name FROM station ORDER BY lat DESC LIMIT 1",
        "schema": "CREATE TABLE station (lat NUMBER, name TEXT, city TEXT, id NUMBER, long NUMBER); CREATE TABLE status (bikes_available NUMBER, station_id NUMBER);"
      },
      {
        "question": "Awesome, then could you please let me know the installation date of the station?",
        "query": "SELECT installation_date FROM station ORDER BY lat DESC LIMIT 1",
        "schema": "CREATE TABLE station (city TEXT, name TEXT, long NUMBER, id NUMBER, lat NUMBER, installation_date TEXT); CREATE TABLE status (station_id NUMBER, bikes_available NUMBER);"
      },
      {
        "question": "Wow that's a lot. Thank you again, this will be my last question :) Could you please let me know the ID of the station which has the biggest number of docks available among these 61 stations?",
        "query": "SELECT id FROM station WHERE installation_date<'8/6/2013' ORDER BY dock_count DESC LIMIT 1",
        "schema": "CREATE TABLE station (lat NUMBER, id NUMBER, city TEXT, long NUMBER, name TEXT, dock_count NUMBER, installation_date TEXT); CREATE TABLE status (docks_available NUMBER, bikes_available NUMBER, station_id NUMBER);"
      }
    ],
    [
      {
        "question": "Hi, can you tell me how many trips there have been, starting from\n August?",
        "query": "SELECT COUNT ( * ) FROM trip WHERE start_date LIKE \"8/%\"",
        "schema": "CREATE TABLE trip (bike_id NUMBER, id NUMBER, start_date TEXT, start_station_id NUMBER, start_station_name TEXT, duration NUMBER, end_date TEXT);"
      },
      {
        "question": "oh wow that's a lot! and how many stations have those started from?",
        "query": "SELECT COUNT ( DISTINCT start_station_name ) FROM trip WHERE start_date LIKE \"8/%\"",
        "schema": "CREATE TABLE status (station_id NUMBER); CREATE TABLE trip (duration NUMBER, start_date TEXT, id NUMBER, end_date TEXT, end_station_name TEXT, end_station_id NUMBER, bike_id NUMBER, start_station_name TEXT, start_station_id NUMBER); CREATE TABLE station (id NUMBER, dock_count NUMBER, lat NUMBER, long NUMBER, installation_date TEXT, name TEXT);"
      },
      {
        "question": "how many trips started from there?",
        "query": "SELECT COUNT ( * ) FROM trip WHERE start_station_name = ( SELECT start_station_name FROM trip WHERE start_date LIKE \"8/%\" GROUP BY start_station_name ORDER BY COUNT ( * ) DESC LIMIT 1 )",
        "schema": "CREATE TABLE station (long NUMBER, dock_count NUMBER, name TEXT, id NUMBER, lat NUMBER, installation_date TEXT); CREATE TABLE trip (start_station_id NUMBER, end_station_id NUMBER, duration NUMBER, end_station_name TEXT, id NUMBER, end_date TEXT, start_station_name TEXT, bike_id NUMBER, start_date TEXT); CREATE TABLE status (station_id NUMBER);"
      },
      {
        "question": "Could you tell me the ID and name of the San Francisco station?",
        "query": "SELECT DISTINCT start_station_name , start_station_id FROM trip WHERE start_station_name = 'San Francisco Caltrain 2 ( 330 Townsend ) '",
        "schema": "CREATE TABLE trip (bike_id NUMBER, end_date TEXT, start_station_name TEXT, start_date TEXT, duration NUMBER, id NUMBER, end_station_name TEXT, start_station_id NUMBER, end_station_id NUMBER); CREATE TABLE status (station_id NUMBER); CREATE TABLE station (installation_date TEXT, city TEXT, dock_count NUMBER, name TEXT, long NUMBER, id NUMBER, lat NUMBER);"
      }
    ],
    [
      {
        "question": "What is the latitude of each station, please?",
        "query": "SELECT name,lat FROM station",
        "schema": "CREATE TABLE station (id NUMBER, lat NUMBER, long NUMBER, name TEXT, city TEXT); CREATE TABLE status (station_id NUMBER);"
      },
      {
        "question": "What are the minimum durations of all trips that end in those stations?",
        "query": "SELECT t1.name , t1.lat , MIN ( t2.duration ) FROM station AS t1 JOIN trip AS t2 ON t1.id = t2.end_station_id GROUP BY t2.end_station_id",
        "schema": "CREATE TABLE station (long NUMBER, id NUMBER, city TEXT, lat NUMBER, name TEXT); CREATE TABLE status (station_id NUMBER); CREATE TABLE trip (start_station_name TEXT, end_station_name TEXT, end_station_id NUMBER, id NUMBER, end_date TEXT, start_station_id NUMBER, duration NUMBER);"
      },
      {
        "question": "What dates were all the stations installed?",
        "query": "SELECT name, installation_date FROM station",
        "schema": "CREATE TABLE trip (end_station_name TEXT, start_station_name TEXT, start_station_id NUMBER, end_station_id NUMBER, id NUMBER, start_date TEXT, end_date TEXT, duration NUMBER); CREATE TABLE station (city TEXT, name TEXT, long NUMBER, id NUMBER, lat NUMBER, installation_date TEXT); CREATE TABLE status (station_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show me the start station id for all trips.",
        "query": "SELECT start_station_id FROM trip",
        "schema": "CREATE TABLE trip (bike_id NUMBER, end_station_name TEXT, end_station_id NUMBER, start_station_name TEXT, start_date TEXT, id NUMBER, start_station_id NUMBER); CREATE TABLE station (name TEXT, id NUMBER, long NUMBER); CREATE TABLE status (station_id NUMBER);"
      },
      {
        "question": "How many of these occur at least 200 times?",
        "query": "SELECT COUNT ( DISTINCT start_station_id ) FROM trip WHERE start_station_id IN ( SELECT start_station_id FROM trip GROUP BY start_station_name HAVING COUNT ( * ) > = 200 )",
        "schema": "CREATE TABLE trip (start_date TEXT, duration NUMBER, end_date TEXT, id NUMBER, start_station_id NUMBER, end_station_name TEXT, end_station_id NUMBER, start_station_name TEXT, bike_id NUMBER); CREATE TABLE station (id NUMBER, long NUMBER, name TEXT); CREATE TABLE status (station_id NUMBER);"
      },
      {
        "question": "Show me the ids and names of these stations.",
        "query": "SELECT start_station_id , start_station_name FROM trip GROUP BY start_station_name HAVING COUNT ( * ) > = 200",
        "schema": "CREATE TABLE station (long NUMBER, name TEXT, id NUMBER); CREATE TABLE status (station_id NUMBER); CREATE TABLE trip (duration NUMBER, start_date TEXT, end_station_id NUMBER, end_station_name TEXT, end_date TEXT, start_station_name TEXT, bike_id NUMBER, id NUMBER, start_station_id NUMBER);"
      }
    ],
    [
      {
        "question": "What is the average latitude of stations located in San Jose city?",
        "query": "SELECT AVG ( lat ) FROM station WHERE city = \"San Jose\"",
        "schema": "CREATE TABLE station (long NUMBER, lat NUMBER, name TEXT, city TEXT, id NUMBER);"
      },
      {
        "question": "What is the average longitude of stations located in San Jose city?",
        "query": "SELECT AVG ( long ) FROM station WHERE city = \"San Jose\"",
        "schema": "CREATE TABLE station (city TEXT, id NUMBER, name TEXT, lat NUMBER, long NUMBER);"
      },
      {
        "question": "What are the installation dates for all stations in San Jose city?",
        "query": "SELECT installation_date FROM station WHERE city = \"San Jose\"",
        "schema": "CREATE TABLE station (city TEXT, installation_date TEXT, lat NUMBER, name TEXT, long NUMBER, id NUMBER);"
      },
      {
        "question": "What are the names of each of those?",
        "query": "SELECT name,installation_date FROM station WHERE city = \"San Jose\"",
        "schema": "CREATE TABLE station (installation_date TEXT, long NUMBER, id NUMBER, city TEXT, name TEXT, lat NUMBER);"
      },
      {
        "question": "What are the dock counts of each of those?",
        "query": "SELECT name,dock_count FROM station WHERE city = \"San Jose\"",
        "schema": "CREATE TABLE station (long NUMBER, id NUMBER, dock_count NUMBER, installation_date TEXT, lat NUMBER, city TEXT, name TEXT);"
      }
    ],
    [
      {
        "question": "What is the station name for the id's 1 and  2 ?",
        "query": "SELECT name, id FROM station WHERE id = 1 OR id = 2",
        "schema": "CREATE TABLE status (station_id NUMBER); CREATE TABLE station (id NUMBER, city TEXT, name TEXT);"
      },
      {
        "question": "Which station has dock count higher than 15... | Would you like to know the station name or all the information? | What are the ids of station that have latitude above 37.4 and never had bike availability below 7 ?",
        "query": "SELECT id FROM station WHERE lat > 37.4 EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING MIN ( bikes_available ) < 7",
        "schema": "CREATE TABLE station (name TEXT, long NUMBER, id NUMBER, city TEXT, lat NUMBER, dock_count NUMBER); CREATE TABLE status (bikes_available NUMBER, docks_available NUMBER, station_id NUMBER);"
      },
      {
        "question": "Tell me the installation date for the station id 4 ?",
        "query": "SELECT installation_date FROM station WHERE id = 4",
        "schema": "CREATE TABLE station (city TEXT, name TEXT, long NUMBER, installation_date TEXT, dock_count NUMBER, lat NUMBER, id NUMBER); CREATE TABLE status (docks_available NUMBER, bikes_available NUMBER, station_id NUMBER);"
      }
    ],
    [
      {
        "question": "how many statuses are there",
        "query": "SELECT COUNT ( * ) FROM status",
        "schema": "CREATE TABLE status (bikes_available NUMBER, station_id NUMBER, docks_available NUMBER); CREATE TABLE station (id NUMBER);"
      },
      {
        "question": "what is the city of San Jose Civic Center",
        "query": "SELECT city FROM station WHERE name = \"San Jose Civic Center\"",
        "schema": "CREATE TABLE station (city TEXT, name TEXT, id NUMBER); CREATE TABLE status (bikes_available NUMBER, station_id NUMBER, docks_available NUMBER);"
      },
      {
        "question": "how many stations there",
        "query": "SELECT COUNT ( * ) FROM station",
        "schema": "CREATE TABLE status (station_id NUMBER, docks_available NUMBER, bikes_available NUMBER); CREATE TABLE station (city TEXT, id NUMBER, name TEXT);"
      }
    ],
    [
      {
        "question": "How many trips lasted at least that long? | Do you mean the number of trips whose duration is longer than the average duration of trips in zip code 94103? | yes",
        "query": "SELECT COUNT ( * ) FROM trip WHERE duration > = ( SELECT AVG ( duration ) FROM trip WHERE zip_code = 94103 )",
        "schema": "CREATE TABLE weather (zip_code NUMBER); CREATE TABLE station (long NUMBER); CREATE TABLE trip (zip_code NUMBER, duration NUMBER, end_date TEXT, bike_id NUMBER, id NUMBER);"
      }
    ],
    [
      {
        "question": "what is the city of the station from which the shortest trip started? | trip cannot be described by distance | what is the latitude of San Jose Diridon Caltrain Station?",
        "query": "SELECT DISTINCT t1.lat FROM station AS t1 JOIN trip AS t2 WHERE t1.name = 'San Jose Diridon Caltrain Station'",
        "schema": "CREATE TABLE status (station_id NUMBER); CREATE TABLE trip (start_station_id NUMBER, id NUMBER, end_station_name TEXT, start_station_name TEXT, duration NUMBER); CREATE TABLE station (name TEXT, city TEXT, long NUMBER, lat NUMBER, id NUMBER);"
      },
      {
        "question": "what is the longitude of Santa Clara at Almaden?",
        "query": "SELECT DISTINCT t1.long FROM station AS t1 JOIN trip AS t2 WHERE t1.name = 'Santa Clara at Almaden'",
        "schema": "CREATE TABLE station (lat NUMBER, long NUMBER, name TEXT, id NUMBER, city TEXT); CREATE TABLE trip (start_station_id NUMBER, id NUMBER, duration NUMBER, start_station_name TEXT, end_station_name TEXT); CREATE TABLE status (station_id NUMBER);"
      },
      {
        "question": "what is the latitude of San Jose Civic Center?",
        "query": "SELECT DISTINCT t1.lat FROM station AS t1 JOIN trip AS t2 WHERE t1.name = 'San Jose Civic Center'",
        "schema": "CREATE TABLE status (station_id NUMBER); CREATE TABLE station (lat NUMBER, name TEXT, id NUMBER, long NUMBER, city TEXT); CREATE TABLE trip (id NUMBER, duration NUMBER, start_station_id NUMBER, start_station_name TEXT, end_station_name TEXT);"
      }
    ],
    [
      {
        "question": "how many trips started from howard and ended at san fransisco",
        "query": "SELECT COUNT ( * ) FROM station AS t1 JOIN trip AS t2 JOIN station AS t3 JOIN trip AS t4 ON t1.id = t2.start_station_id AND t2.id = t4.id AND t3.id = t4.end_station_id WHERE t1.city = \"Howard\" AND t3.city = \"San Fransisco\"",
        "schema": "CREATE TABLE trip (duration NUMBER, id NUMBER, start_station_name TEXT, end_date TEXT, start_date TEXT, bike_id NUMBER, end_station_name TEXT, zip_code NUMBER, end_station_id NUMBER, start_station_id NUMBER); CREATE TABLE station (long NUMBER, city TEXT, id NUMBER, name TEXT);"
      },
      {
        "question": "how many trips started from south van ness and ended at san fransisco",
        "query": "SELECT COUNT ( * ) FROM station AS t1 JOIN trip AS t2 JOIN station AS t3 JOIN trip AS t4 ON t1.id = t2.start_station_id AND t2.id = t4.id AND t3.id = t4.end_station_id WHERE t1.city = \"South Van Ness\" AND t3.city = \"San Fransisco\"",
        "schema": "CREATE TABLE status (station_id NUMBER); CREATE TABLE trip (duration NUMBER, id NUMBER, end_date TEXT, end_station_id NUMBER, zip_code NUMBER, end_station_name TEXT, bike_id NUMBER, start_date TEXT, start_station_id NUMBER, start_station_name TEXT); CREATE TABLE station (name TEXT, id NUMBER, long NUMBER, city TEXT);"
      },
      {
        "question": "how many trips started from mountain view city and ended in palo alto city",
        "query": "SELECT COUNT ( * ) FROM station AS t1 JOIN trip AS t2 JOIN station AS t3 JOIN trip AS t4 ON t1.id = t2.start_station_id AND t2.id = t4.id AND t3.id = t4.end_station_id WHERE t1.city = \"Mountain View\" AND t3.city = \"Palo Alto\"",
        "schema": "CREATE TABLE station (long NUMBER, name TEXT, city TEXT, id NUMBER); CREATE TABLE status (station_id NUMBER); CREATE TABLE trip (start_station_name TEXT, start_station_id NUMBER, end_date TEXT, end_station_name TEXT, zip_code NUMBER, duration NUMBER, end_station_id NUMBER, bike_id NUMBER, id NUMBER, start_date TEXT);"
      }
    ],
    [
      {
        "question": "show me the names and ids of all stations",
        "query": "SELECT name , id FROM station",
        "schema": "CREATE TABLE trip (start_station_name TEXT); CREATE TABLE status (station_id NUMBER); CREATE TABLE station (name TEXT, id NUMBER);"
      },
      {
        "question": "How many stations had more than 14 bikes available on average or were installed in december?",
        "query": "SELECT COUNT ( * ) FROM ( SELECT t1.name FROM station AS t1 JOIN status AS t2 ON t1.id = t2.station_id GROUP BY t2.station_id HAVING AVG ( t2.bikes_available ) > 14 UNION SELECT name FROM station WHERE installation_date LIKE \"12/%\" )",
        "schema": "CREATE TABLE status (station_id NUMBER, bikes_available NUMBER); CREATE TABLE station (installation_date TEXT, id NUMBER, name TEXT); CREATE TABLE trip (start_station_name TEXT);"
      },
      {
        "question": "show me the name and ids of these stations",
        "query": "SELECT t1.name , t1.id FROM station AS t1 JOIN status AS t2 ON t1.id = t2.station_id GROUP BY t2.station_id HAVING AVG ( t2.bikes_available ) > 14 UNION SELECT name , id FROM station WHERE installation_date LIKE \"12/%\"",
        "schema": "CREATE TABLE status (bikes_available NUMBER, station_id NUMBER); CREATE TABLE station (name TEXT, installation_date TEXT, id NUMBER); CREATE TABLE trip (start_station_name TEXT);"
      }
    ],
    [
      {
        "question": "How many stations have an average bike availability above 10?",
        "query": "SELECT COUNT ( * ) FROM ( SELECT * FROM station AS t1 JOIN status AS t2 ON t1.id = t2.station_id GROUP BY t2.station_id HAVING AVG ( bikes_available ) > 10 )",
        "schema": "CREATE TABLE status (docks_available NUMBER, station_id NUMBER, bikes_available NUMBER); CREATE TABLE station (id NUMBER, lat NUMBER, name TEXT, dock_count NUMBER, city TEXT, long NUMBER); CREATE TABLE trip (end_station_id NUMBER, start_station_id NUMBER);"
      },
      {
        "question": "How many of those are not in San Jose City?",
        "query": "SELECT COUNT ( * ) FROM ( SELECT t1.name FROM station AS t1 JOIN status AS t2 ON t1.id = t2.station_id GROUP BY t2.station_id HAVING AVG ( bikes_available ) > 10 EXCEPT SELECT name FROM station WHERE city = \"San Jose\" )",
        "schema": "CREATE TABLE station (long NUMBER, dock_count NUMBER, city TEXT, name TEXT, lat NUMBER, id NUMBER); CREATE TABLE trip (start_station_id NUMBER, end_station_id NUMBER); CREATE TABLE status (docks_available NUMBER, station_id NUMBER, bikes_available NUMBER);"
      },
      {
        "question": "What are the names of those stations?",
        "query": "SELECT t1.name FROM station AS t1 JOIN status AS t2 ON t1.id = t2.station_id GROUP BY t2.station_id HAVING AVG ( bikes_available ) > 10 EXCEPT SELECT name FROM station WHERE city = \"San Jose\"",
        "schema": "CREATE TABLE station (lat NUMBER, dock_count NUMBER, city TEXT, id NUMBER, name TEXT, long NUMBER); CREATE TABLE status (station_id NUMBER, docks_available NUMBER, bikes_available NUMBER); CREATE TABLE trip (start_station_id NUMBER, end_station_id NUMBER);"
      }
    ],
    [
      {
        "question": "Hello there!  How are you?  Could you please provide me with a list of all trip IDs for the zip code 94002?",
        "query": "SELECT id FROM trip WHERE zip_code = 94002",
        "schema": "CREATE TABLE trip (bike_id NUMBER, zip_code NUMBER, id NUMBER); CREATE TABLE weather (zip_code NUMBER);"
      },
      {
        "question": "Great! Can you tell me which bike id has the most trips within the area with the zipcode 94002?",
        "query": "SELECT bike_id FROM trip WHERE zip_code = 94002 GROUP BY bike_id ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE weather (zip_code NUMBER); CREATE TABLE trip (zip_code NUMBER, id NUMBER, bike_id NUMBER);"
      },
      {
        "question": "Excellent!  Can you tell me what the total number of trips is, within zip code 94002, for bike 252?",
        "query": "SELECT COUNT ( * ) FROM trip WHERE zip_code = 94002 AND bike_id = '252'",
        "schema": "CREATE TABLE weather (zip_code NUMBER); CREATE TABLE trip (zip_code NUMBER, id NUMBER, bike_id NUMBER);"
      }
    ],
    [
      {
        "question": "Where do the trips end?",
        "query": "SELECT DISTINCT t2.city FROM trip AS t1 JOIN station AS t2 ON t1.end_station_id = t2.id",
        "schema": "CREATE TABLE trip (start_station_name TEXT, end_date TEXT, end_station_name TEXT, start_station_id NUMBER, duration NUMBER, start_date TEXT, end_station_id NUMBER, id NUMBER, zip_code NUMBER); CREATE TABLE station (city TEXT, id NUMBER, name TEXT, long NUMBER, lat NUMBER);"
      },
      {
        "question": "How many trips are there?",
        "query": "SELECT COUNT ( * ) FROM trip AS t1 JOIN station AS t2 ON t1.end_station_id = t2.id",
        "schema": "CREATE TABLE trip (id NUMBER, end_date TEXT, start_date TEXT, duration NUMBER, start_station_name TEXT, end_station_name TEXT, end_station_id NUMBER, zip_code NUMBER, start_station_id NUMBER, bike_id NUMBER); CREATE TABLE status (station_id NUMBER); CREATE TABLE station (id NUMBER, long NUMBER, lat NUMBER, name TEXT, city TEXT);"
      },
      {
        "question": "How many of these end in San Francisco?",
        "query": "SELECT COUNT ( * ) FROM trip AS t1 JOIN station AS t2 ON t1.end_station_id = t2.id WHERE t2.city = \"San Francisco\"",
        "schema": "CREATE TABLE status (station_id NUMBER); CREATE TABLE station (city TEXT, long NUMBER, name TEXT, id NUMBER, lat NUMBER); CREATE TABLE trip (end_station_name TEXT, start_station_name TEXT, start_station_id NUMBER, bike_id NUMBER, duration NUMBER, end_station_id NUMBER, id NUMBER, zip_code NUMBER, start_date TEXT, end_date TEXT);"
      },
      {
        "question": "How many end somewhere else?",
        "query": "SELECT COUNT ( * ) FROM trip AS t1 JOIN station AS t2 ON t1.end_station_id = t2.id WHERE t2.city ! = \"San Francisco\"",
        "schema": "CREATE TABLE status (station_id NUMBER); CREATE TABLE station (long NUMBER, id NUMBER, name TEXT, city TEXT, lat NUMBER); CREATE TABLE trip (id NUMBER, duration NUMBER, end_station_name TEXT, start_date TEXT, start_station_name TEXT, start_station_id NUMBER, zip_code NUMBER, bike_id NUMBER, end_date TEXT, end_station_id NUMBER);"
      }
    ],
    [
      {
        "question": "Tell me the start date and start station id for id 900504?",
        "query": "SELECT start_date, start_station_name FROM trip WHERE id = 900504",
        "schema": "CREATE TABLE status (station_id NUMBER); CREATE TABLE trip (start_station_name TEXT, id NUMBER, end_station_id NUMBER, start_date TEXT, start_station_id NUMBER); CREATE TABLE station (id NUMBER, long NUMBER, name TEXT, installation_date TEXT);"
      },
      {
        "question": "Tell me the zip code for bike id 454 and 574 ?",
        "query": "SELECT DISTINCT zip_code, bike_id FROM trip WHERE bike_id = 454 OR bike_id = 574",
        "schema": "CREATE TABLE status (station_id NUMBER); CREATE TABLE weather (zip_code NUMBER); CREATE TABLE trip (id NUMBER, start_station_id NUMBER, start_station_name TEXT, bike_id NUMBER, start_date TEXT, end_station_id NUMBER, zip_code NUMBER); CREATE TABLE station (long NUMBER, id NUMBER, lat NUMBER, installation_date TEXT, name TEXT);"
      },
      {
        "question": "What is the id of the trip that has the shortest duration ?",
        "query": "SELECT id FROM trip ORDER BY duration LIMIT 1",
        "schema": "CREATE TABLE weather (zip_code NUMBER); CREATE TABLE station (installation_date TEXT, name TEXT, id NUMBER, long NUMBER, lat NUMBER); CREATE TABLE trip (id NUMBER, zip_code NUMBER, start_station_id NUMBER, start_station_name TEXT, bike_id NUMBER, start_date TEXT, duration NUMBER, end_station_id NUMBER); CREATE TABLE status (station_id NUMBER);"
      }
    ],
    [
      {
        "question": "What are the station ids for San Francisco? | Do you mean the city San Francisco? | Yes.",
        "query": "SELECT id FROM station WHERE city = \"San Francisco\"",
        "schema": "CREATE TABLE status (station_id NUMBER); CREATE TABLE station (lat NUMBER, name TEXT, city TEXT, id NUMBER);"
      },
      {
        "question": "Which of these have bikes?",
        "query": "SELECT id FROM station WHERE city = \"San Francisco\" INTERSECT SELECT station_id FROM status WHERE bikes_available > 0",
        "schema": "CREATE TABLE status (bikes_available NUMBER, station_id NUMBER); CREATE TABLE station (lat NUMBER, id NUMBER, city TEXT, name TEXT);"
      },
      {
        "question": "Which of these have an average bike availability above 10?",
        "query": "SELECT id FROM station WHERE city = \"San Francisco\" INTERSECT SELECT station_id FROM status GROUP BY station_id HAVING AVG ( bikes_available ) > 10",
        "schema": "CREATE TABLE status (bikes_available NUMBER, station_id NUMBER); CREATE TABLE station (name TEXT, id NUMBER, lat NUMBER, city TEXT);"
      }
    ]
  ],
  "culture_company": [
    [
      {
        "question": "Hello!  Can you show a list of all publishers who did not publish any books in 1989?",
        "query": "SELECT publisher FROM book_club EXCEPT SELECT publisher FROM book_club WHERE YEAR = 1989",
        "schema": "CREATE TABLE book_club (Publisher TEXT, Year NUMBER); CREATE TABLE movie (Year NUMBER);"
      },
      {
        "question": "Thank you!  Can you show me a list of all of the book titles published by Alyson?",
        "query": "SELECT book_title FROM book_club WHERE publisher = 'Alyson'",
        "schema": "CREATE TABLE culture_company (book_club_id TEXT); CREATE TABLE movie (Year NUMBER); CREATE TABLE book_club (Publisher TEXT, Year NUMBER, book_club_id NUMBER, Book_Title TEXT);"
      },
      {
        "question": "Thanks!  Can you update that list to show the years that those 3 books were published and  what category they fall under?",
        "query": "SELECT book_title,YEAR,category FROM book_club WHERE publisher = 'Alyson'",
        "schema": "CREATE TABLE movie (Year NUMBER); CREATE TABLE book_club (Book_Title TEXT, Category TEXT, Publisher TEXT, Year NUMBER, book_club_id NUMBER); CREATE TABLE culture_company (book_club_id TEXT);"
      }
    ],
    [
      {
        "question": "Are there any other categories? | Do you mean the other category has books after year 1989? Gay SF/F is the only one category has books after year 1989 | Yes, that's what I meant. How many books does Gay SF/F have after 1989?",
        "query": "SELECT COUNT ( * ) FROM book_club WHERE category = 'Gay SF/F' AND YEAR>'1989'",
        "schema": "CREATE TABLE book_club (Category TEXT, Book_Title TEXT, Year NUMBER, book_club_id NUMBER);"
      }
    ],
    [
      {
        "question": "how manty editors are there?",
        "query": "SELECT COUNT ( author_or_editor ) FROM book_club",
        "schema": "CREATE TABLE book_club (Author_or_Editor TEXT, Publisher TEXT, book_club_id NUMBER); CREATE TABLE culture_company (book_club_id TEXT); CREATE TABLE movie (movie_id NUMBER, Director TEXT);"
      },
      {
        "question": "how about the total number of companies?",
        "query": "SELECT COUNT ( * ) FROM culture_company",
        "schema": "CREATE TABLE culture_company (Company_name TEXT, book_club_id TEXT); CREATE TABLE book_club (book_club_id NUMBER, Author_or_Editor TEXT, Publisher TEXT); CREATE TABLE movie (Director TEXT, movie_id NUMBER);"
      },
      {
        "question": "which company did Alyson published a book for?",
        "query": "SELECT t1.company_name FROM culture_company AS t1 JOIN book_club AS t2 ON t1.book_club_id = t2.book_club_id WHERE t2.publisher = 'Alyson'",
        "schema": "CREATE TABLE culture_company (book_club_id TEXT, Type TEXT, Incorporated_in TEXT, Company_name TEXT); CREATE TABLE book_club (Category TEXT, Book_Title TEXT, Author_or_Editor TEXT, book_club_id NUMBER, Publisher TEXT); CREATE TABLE movie (Director TEXT, movie_id NUMBER);"
      }
    ],
    [
      {
        "question": "Could you please show me the publishers with a book published in 1989?",
        "query": "SELECT publisher FROM book_club WHERE YEAR = 1989",
        "schema": "CREATE TABLE book_club (book_club_id NUMBER, Year NUMBER, Publisher TEXT, Author_or_Editor TEXT, Book_Title TEXT); CREATE TABLE movie (Year NUMBER); CREATE TABLE culture_company (book_club_id TEXT);"
      },
      {
        "question": "Could you please show me the publishers with a book published in 1990?",
        "query": "SELECT publisher FROM book_club WHERE YEAR = 1990",
        "schema": "CREATE TABLE book_club (book_club_id NUMBER, Year NUMBER, Book_Title TEXT, Publisher TEXT, Author_or_Editor TEXT); CREATE TABLE culture_company (book_club_id TEXT); CREATE TABLE movie (Year NUMBER);"
      },
      {
        "question": "Which publishers published books in 1989 and 1990?",
        "query": "SELECT publisher FROM book_club WHERE YEAR = 1989 INTERSECT SELECT publisher FROM book_club WHERE YEAR = 1990",
        "schema": "CREATE TABLE movie (Year NUMBER); CREATE TABLE culture_company (book_club_id TEXT); CREATE TABLE book_club (Publisher TEXT, Author_or_Editor TEXT, Book_Title TEXT, book_club_id NUMBER, Year NUMBER);"
      }
    ],
    [
      {
        "question": "What is the publisher with most number of books?",
        "query": "SELECT publisher FROM book_club GROUP BY publisher ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE book_club (Publisher TEXT, Author_or_Editor TEXT, book_club_id NUMBER); CREATE TABLE culture_company (book_club_id TEXT);"
      },
      {
        "question": "Who is the author of Unicorn Mountain?",
        "query": "SELECT author_or_editor FROM book_club WHERE book_title = 'Unicorn Mountain'",
        "schema": "CREATE TABLE culture_company (book_club_id TEXT); CREATE TABLE book_club (Author_or_Editor TEXT, Publisher TEXT, Book_Title TEXT, book_club_id NUMBER); CREATE TABLE movie (Title TEXT, Director TEXT);"
      },
      {
        "question": "Who is the author of Death Takes the Stage?",
        "query": "SELECT author_or_editor FROM book_club WHERE book_title = 'Death Takes the Stage'",
        "schema": "CREATE TABLE movie (Director TEXT, Title TEXT); CREATE TABLE book_club (Book_Title TEXT, Publisher TEXT, book_club_id NUMBER, Year NUMBER, Author_or_Editor TEXT); CREATE TABLE culture_company (book_club_id TEXT);"
      }
    ],
    [
      {
        "question": "can you now just show the director and movie title for the highest grossing movie for the year 2000 or earlier. One result please",
        "query": "SELECT title , director FROM movie WHERE YEAR < = 2000 ORDER BY gross_worldwide DESC LIMIT 1",
        "schema": "CREATE TABLE movie (Budget_million NUMBER, Gross_worldwide NUMBER, Director TEXT, movie_id NUMBER, Title TEXT, Year NUMBER); CREATE TABLE book_club (Year NUMBER, Result TEXT, Book_Title TEXT);"
      }
    ],
    [
      {
        "question": "What is the average for all movies? | average what? | Sorry, the average budget for all movies?",
        "query": "SELECT AVG ( budget_million ) FROM movie",
        "schema": "CREATE TABLE movie (Budget_million NUMBER, Title TEXT, Gross_worldwide NUMBER, movie_id NUMBER);"
      },
      {
        "question": "Okay. What is the average budget for all movies before 2000?",
        "query": "SELECT AVG ( budget_million ) FROM movie WHERE YEAR < 2000",
        "schema": "CREATE TABLE book_club (Year NUMBER); CREATE TABLE movie (Year NUMBER, Budget_million NUMBER, Title TEXT, Gross_worldwide NUMBER, movie_id NUMBER);"
      },
      {
        "question": "Finally, what is the average budget, the maximum budget, and the minimum budget for all movies before 2000?",
        "query": "SELECT AVG ( budget_million ) , MAX ( budget_million ) , MIN ( budget_million ) FROM movie WHERE YEAR < 2000",
        "schema": "CREATE TABLE book_club (Year NUMBER); CREATE TABLE movie (Year NUMBER, Title TEXT, Gross_worldwide NUMBER, Budget_million NUMBER, movie_id NUMBER);"
      }
    ],
    [
      {
        "question": "HOW MANY DIRECTORE IN MOVIE TABLE ? List them.",
        "query": "SELECT DISTINCT director FROM movie GROUP BY director",
        "schema": "CREATE TABLE culture_company (movie_id TEXT); CREATE TABLE movie (Title TEXT, movie_id NUMBER, Director TEXT); CREATE TABLE book_club (book_club_id NUMBER, Author_or_Editor TEXT);"
      },
      {
        "question": "WHAT IS THE BUDGET OF THE BOONDOCK SAINTS?",
        "query": "SELECT budget_million FROM movie WHERE title = 'The Boondock Saints'",
        "schema": "CREATE TABLE culture_company (movie_id TEXT); CREATE TABLE movie (Budget_million NUMBER, movie_id NUMBER, Director TEXT, Title TEXT); CREATE TABLE book_club (book_club_id NUMBER, Book_Title TEXT, Author_or_Editor TEXT);"
      },
      {
        "question": "WHAT IS THE BIGGEST BUDGET OF MOVIE TABLE?",
        "query": "SELECT budget_million FROM movie ORDER BY budget_million DESC LIMIT 1",
        "schema": "CREATE TABLE movie (Title TEXT, Director TEXT, Budget_million NUMBER, movie_id NUMBER); CREATE TABLE culture_company (movie_id TEXT); CREATE TABLE book_club (book_club_id NUMBER, Author_or_Editor TEXT, Book_Title TEXT);"
      }
    ]
  ],
  "medicine_enzyme_interaction": [
    [
      {
        "question": "What are the ids and names of the medicine that can interact with two or more enzymes?",
        "query": "SELECT t1.id , t1.name FROM medicine AS t1 JOIN medicine_enzyme_interaction AS t2 ON t2.medicine_id = t1.id GROUP BY t1.id HAVING COUNT ( * ) > = 2",
        "schema": "CREATE TABLE medicine (id NUMBER, Trade_Name TEXT, name TEXT); CREATE TABLE medicine_enzyme_interaction (enzyme_id NUMBER, medicine_id NUMBER, interaction_type TEXT); CREATE TABLE enzyme (id NUMBER);"
      },
      {
        "question": "How many enzymes can Aripiprazole interact with?",
        "query": "SELECT COUNT ( DISTINCT t2.enzyme_id ) FROM medicine AS t1 JOIN medicine_enzyme_interaction AS t2 ON t2.medicine_id = t1.id WHERE name = \"Aripiprazole\"",
        "schema": "CREATE TABLE enzyme (name TEXT, id NUMBER); CREATE TABLE medicine (id NUMBER, Trade_Name TEXT, name TEXT); CREATE TABLE medicine_enzyme_interaction (medicine_id NUMBER, interaction_type TEXT, enzyme_id NUMBER);"
      },
      {
        "question": "* I have left the chat *",
        "query": "SELECT COUNT ( DISTINCT t2.enzyme_id ) FROM medicine AS t1 JOIN medicine_enzyme_interaction AS t2 ON t2.medicine_id = t1.id WHERE name = \"Asenapine\"",
        "schema": "CREATE TABLE medicine_enzyme_interaction (interaction_type TEXT, medicine_id NUMBER, enzyme_id NUMBER); CREATE TABLE medicine (id NUMBER, Trade_Name TEXT, name TEXT); CREATE TABLE enzyme (name TEXT, id NUMBER);"
      }
    ],
    [
      {
        "question": "can you tell me all the enzymes that work in the cytosol?",
        "query": "SELECT name FROM enzyme WHERE LOCATION = \"Cytosol\"",
        "schema": "CREATE TABLE enzyme (name TEXT, Location TEXT, id NUMBER, Porphyria TEXT); CREATE TABLE medicine (id NUMBER); CREATE TABLE medicine_enzyme_interaction (medicine_id NUMBER, interaction_type TEXT, enzyme_id NUMBER);"
      },
      {
        "question": "which of those enzymes is in the medicine with the name Aripiprazole?",
        "query": "SELECT t3.name FROM medicine_enzyme_interaction AS t1 JOIN medicine AS t2 ON t1.medicine_id = t2.id JOIN enzyme AS t3 ON t1.enzyme_id = t3.id WHERE t2.name = 'Aripiprazole' AND t3.location = \"Cytosol\"",
        "schema": "CREATE TABLE enzyme (Product TEXT, id NUMBER, Location TEXT, Porphyria TEXT, name TEXT); CREATE TABLE medicine (name TEXT, id NUMBER, Trade_Name TEXT); CREATE TABLE medicine_enzyme_interaction (enzyme_id NUMBER, medicine_id NUMBER, interaction_type TEXT);"
      },
      {
        "question": "are there any other enzymes that are not in the cytosol that have the name Aripiprazole?",
        "query": "SELECT t3.name FROM medicine_enzyme_interaction AS t1 JOIN medicine AS t2 ON t1.medicine_id = t2.id JOIN enzyme AS t3 ON t1.enzyme_id = t3.id WHERE t2.name = 'Aripiprazole' AND t3.location ! = \"Cytosol\"",
        "schema": "CREATE TABLE medicine_enzyme_interaction (medicine_id NUMBER, enzyme_id NUMBER, interaction_type TEXT); CREATE TABLE medicine (id NUMBER, name TEXT, Trade_Name TEXT); CREATE TABLE enzyme (name TEXT, id NUMBER, Porphyria TEXT, Product TEXT, Location TEXT);"
      },
      {
        "question": "and can you tell me what the interaction type is for ALA synthase?",
        "query": "SELECT DISTINCT ( t1.interaction_type ) FROM medicine_enzyme_interaction AS t1 JOIN enzyme AS t2 ON t1.enzyme_id = t2.id WHERE t2.name = 'ALA synthase'",
        "schema": "CREATE TABLE enzyme (id NUMBER, Location TEXT, Porphyria TEXT, Product TEXT, name TEXT); CREATE TABLE medicine_enzyme_interaction (enzyme_id NUMBER, interaction_type TEXT, medicine_id NUMBER); CREATE TABLE medicine (name TEXT, id NUMBER, Trade_Name TEXT);"
      }
    ],
    [
      {
        "question": "What're the names of the enzymes in the medicine \"Amisulpride\"?",
        "query": "SELECT t1.name FROM enzyme AS t1 JOIN medicine_enzyme_interaction AS t2 ON t1.id = t2.enzyme_id JOIN medicine AS t3 ON t2.medicine_id = t3.id WHERE t3.name = 'Amisulpride'",
        "schema": "CREATE TABLE medicine_enzyme_interaction (interaction_type TEXT, enzyme_id NUMBER, medicine_id NUMBER); CREATE TABLE enzyme (id NUMBER, Product TEXT, Location TEXT, name TEXT); CREATE TABLE medicine (name TEXT, id NUMBER);"
      },
      {
        "question": "What're the names of the enzymes in the medicine \"Amisulpride\" that can serve as an inhibitor?",
        "query": "SELECT t1.name FROM enzyme AS t1 JOIN medicine_enzyme_interaction AS t2 ON t1.id = t2.enzyme_id JOIN medicine AS t3 ON t2.medicine_id = t3.id WHERE t3.name = 'Amisulpride' AND t2.interaction_type = 'inhibitor'",
        "schema": "CREATE TABLE medicine (id NUMBER, name TEXT); CREATE TABLE medicine_enzyme_interaction (interaction_type TEXT, medicine_id NUMBER, enzyme_id NUMBER); CREATE TABLE enzyme (Product TEXT, name TEXT, Location TEXT, id NUMBER);"
      },
      {
        "question": "What are the names of all enzymes that can serve as inhibitors?",
        "query": "SELECT DISTINCT ( t1.name ) FROM enzyme AS t1 JOIN medicine_enzyme_interaction AS t2 ON t1.id = t2.enzyme_id JOIN medicine AS t3 ON t2.medicine_id = t3.id WHERE t2.interaction_type = 'inhibitor'",
        "schema": "CREATE TABLE medicine_enzyme_interaction (enzyme_id NUMBER, interaction_type TEXT, medicine_id NUMBER); CREATE TABLE medicine (id NUMBER, name TEXT); CREATE TABLE enzyme (id NUMBER, Product TEXT, Location TEXT, name TEXT);"
      }
    ],
    [
      {
        "question": "Hello!  Can you please list the different interaction types for me?",
        "query": "SELECT DISTINCT interaction_type FROM medicine_enzyme_interaction",
        "schema": "CREATE TABLE medicine_enzyme_interaction (medicine_id NUMBER, enzyme_id NUMBER, interaction_type TEXT); CREATE TABLE enzyme (id NUMBER);"
      },
      {
        "question": "Great!  Can you provide me with the name, location, and product for each enzyme that is associated with the \"inhibitor\" interaction type?",
        "query": "SELECT DISTINCT t1.name , t1.location , t1.product FROM enzyme AS t1 JOIN medicine_enzyme_interaction AS t2 ON t2.enzyme_id = t1.id WHERE t2.interaction_type = 'inhibitor'",
        "schema": "CREATE TABLE enzyme (name TEXT, Product TEXT, Location TEXT, id NUMBER); CREATE TABLE medicine_enzyme_interaction (enzyme_id NUMBER, medicine_id NUMBER, interaction_type TEXT); CREATE TABLE medicine (name TEXT, id NUMBER);"
      },
      {
        "question": "Great!  Can you update this list to show the chromosome associated with each enzyme on this list?",
        "query": "SELECT DISTINCT t1.name , t1.location , t1.product, t1.chromosome FROM enzyme AS t1 JOIN medicine_enzyme_interaction AS t2 ON t2.enzyme_id = t1.id WHERE t2.interaction_type = 'inhibitor'",
        "schema": "CREATE TABLE medicine (name TEXT, id NUMBER); CREATE TABLE medicine_enzyme_interaction (enzyme_id NUMBER, interaction_type TEXT, medicine_id NUMBER); CREATE TABLE enzyme (Product TEXT, Chromosome TEXT, name TEXT, id NUMBER, Location TEXT);"
      }
    ],
    [
      {
        "question": "what are the location of the enzymes?",
        "query": "SELECT DISTINCT LOCATION FROM enzyme",
        "schema": "CREATE TABLE medicine_enzyme_interaction (enzyme_id NUMBER); CREATE TABLE enzyme (Location TEXT, name TEXT, id NUMBER);"
      },
      {
        "question": "i mean chromosome value ? | You mean PBG deaminase? | yes",
        "query": "SELECT chromosome FROM enzyme WHERE name = \"PBG deaminase\"",
        "schema": "CREATE TABLE medicine_enzyme_interaction (enzyme_id NUMBER); CREATE TABLE enzyme (Chromosome TEXT, name TEXT, Location TEXT, id NUMBER, Product TEXT);"
      },
      {
        "question": "Find the product name of the ALA synthase?",
        "query": "SELECT product FROM enzyme WHERE name = \"ALA synthase\"",
        "schema": "CREATE TABLE enzyme (Chromosome TEXT, Product TEXT, name TEXT, id NUMBER, Location TEXT); CREATE TABLE medicine_enzyme_interaction (enzyme_id NUMBER);"
      },
      {
        "question": "Find the enzyme name of medicine id 3?",
        "query": "SELECT DISTINCT t1.name FROM enzyme AS t1 JOIN medicine_enzyme_interaction AS t2 ON t2.enzyme_id = t1.id WHERE t2.medicine_id = 3",
        "schema": "CREATE TABLE enzyme (Chromosome TEXT, Location TEXT, name TEXT, id NUMBER, Product TEXT); CREATE TABLE medicine (id NUMBER, name TEXT); CREATE TABLE medicine_enzyme_interaction (medicine_id NUMBER, enzyme_id NUMBER);"
      }
    ],
    [
      {
        "question": "What are medicine names and trade names?",
        "query": "SELECT name , trade_name FROM medicine",
        "schema": "CREATE TABLE medicine (name TEXT, Trade_Name TEXT, id NUMBER);"
      }
    ],
    [
      {
        "question": "What are the interaction types between enzymes and medicine?",
        "query": "SELECT DISTINCT interaction_type FROM medicine_enzyme_interaction",
        "schema": "CREATE TABLE medicine_enzyme_interaction (medicine_id NUMBER, enzyme_id NUMBER, interaction_type TEXT); CREATE TABLE enzyme (name TEXT, id NUMBER, Product TEXT); CREATE TABLE medicine (id NUMBER, name TEXT);"
      },
      {
        "question": "What is the most common interaction type between enzymes and medicine?",
        "query": "SELECT interaction_type FROM medicine_enzyme_interaction GROUP BY interaction_type ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE enzyme (name TEXT, id NUMBER, Product TEXT); CREATE TABLE medicine (name TEXT, id NUMBER); CREATE TABLE medicine_enzyme_interaction (medicine_id NUMBER, interaction_type TEXT, enzyme_id NUMBER);"
      },
      {
        "question": "How many types are available?",
        "query": "SELECT COUNT ( DISTINCT interaction_type ) FROM medicine_enzyme_interaction",
        "schema": "CREATE TABLE enzyme (id NUMBER, Product TEXT, name TEXT); CREATE TABLE medicine (name TEXT, id NUMBER); CREATE TABLE medicine_enzyme_interaction (interaction_type TEXT, medicine_id NUMBER, enzyme_id NUMBER);"
      }
    ],
    [
      {
        "question": "How many enzymes are there?",
        "query": "SELECT COUNT ( * ) FROM enzyme",
        "schema": "CREATE TABLE enzyme (name TEXT, id NUMBER, Porphyria TEXT); CREATE TABLE medicine (id NUMBER); CREATE TABLE medicine_enzyme_interaction (interaction_type TEXT, enzyme_id NUMBER, medicine_id NUMBER);"
      },
      {
        "question": "How many have interactions with medicines?",
        "query": "SELECT COUNT ( DISTINCT enzyme_id ) FROM medicine_enzyme_interaction",
        "schema": "CREATE TABLE medicine_enzyme_interaction (enzyme_id NUMBER, medicine_id NUMBER, interaction_type TEXT); CREATE TABLE enzyme (id NUMBER, name TEXT, Product TEXT, Porphyria TEXT); CREATE TABLE medicine (id NUMBER, name TEXT);"
      }
    ],
    [
      {
        "question": "Which enzyme names have the substring \"PBG\"?",
        "query": "SELECT name FROM enzyme WHERE name LIKE \"%PBG%\"",
        "schema": "CREATE TABLE medicine_enzyme_interaction (enzyme_id NUMBER); CREATE TABLE enzyme (name TEXT, id NUMBER);"
      },
      {
        "question": "What is the product name of ALA synthase?",
        "query": "SELECT product FROM enzyme WHERE name = \"ALA synthase\"",
        "schema": "CREATE TABLE enzyme (Product TEXT, name TEXT, id NUMBER); CREATE TABLE medicine_enzyme_interaction (enzyme_id NUMBER); CREATE TABLE medicine (name TEXT, id NUMBER);"
      }
    ],
    [
      {
        "question": "Show me the medicine name which can interact as 'inhibitor'?",
        "query": "SELECT t1.name FROM medicine AS t1 JOIN medicine_enzyme_interaction AS t2 ON t2.medicine_id = t1.id WHERE interaction_type = 'inhibitor'",
        "schema": "CREATE TABLE enzyme (id NUMBER); CREATE TABLE medicine_enzyme_interaction (enzyme_id NUMBER, medicine_id NUMBER, interaction_type TEXT); CREATE TABLE medicine (id NUMBER, name TEXT, Trade_Name TEXT);"
      },
      {
        "question": "Show me the medicine name which can interact as 'activitor' with enzymes?",
        "query": "SELECT t1.name FROM medicine AS t1 JOIN medicine_enzyme_interaction AS t2 ON t2.medicine_id = t1.id WHERE interaction_type = 'activitor'",
        "schema": "CREATE TABLE medicine (name TEXT, Trade_Name TEXT, id NUMBER); CREATE TABLE medicine_enzyme_interaction (medicine_id NUMBER, enzyme_id NUMBER, interaction_type TEXT); CREATE TABLE enzyme (id NUMBER);"
      },
      {
        "question": "Show me the name of the medicines that are present in both the tables?",
        "query": "SELECT t1.name FROM medicine AS t1 JOIN medicine_enzyme_interaction AS t2 ON t2.medicine_id = t1.id WHERE interaction_type = 'inhibitor' INTERSECT SELECT t1.name FROM medicine AS t1 JOIN medicine_enzyme_interaction AS t2 ON t2.medicine_id = t1.id WHERE interaction_type = 'activitor'",
        "schema": "CREATE TABLE medicine_enzyme_interaction (medicine_id NUMBER, interaction_type TEXT, enzyme_id NUMBER); CREATE TABLE enzyme (id NUMBER, name TEXT); CREATE TABLE medicine (id NUMBER, Trade_Name TEXT, name TEXT);"
      }
    ],
    [
      {
        "question": "What are the interaction type of ALA synthase?",
        "query": "SELECT t2.interaction_type FROM enzyme AS t1 JOIN medicine_enzyme_interaction AS t2 ON t1.id = t2.enzyme_id WHERE name = \"ALA synthase\"",
        "schema": "CREATE TABLE enzyme (id NUMBER, Product TEXT, name TEXT); CREATE TABLE medicine_enzyme_interaction (medicine_id NUMBER, interaction_type TEXT, enzyme_id NUMBER); CREATE TABLE medicine (name TEXT, id NUMBER);"
      },
      {
        "question": "Find the product of enzyme id 1?",
        "query": "SELECT product FROM enzyme WHERE id = 1",
        "schema": "CREATE TABLE medicine_enzyme_interaction (medicine_id NUMBER, interaction_type TEXT, enzyme_id NUMBER); CREATE TABLE medicine (id NUMBER, name TEXT); CREATE TABLE enzyme (name TEXT, id NUMBER, Product TEXT);"
      },
      {
        "question": "What is the id and name of the enzyme with most number of medicines that can interact as 'activator'?",
        "query": "SELECT t1.id , t1.name FROM enzyme AS t1 JOIN medicine_enzyme_interaction AS t2 ON t1.id = t2.enzyme_id WHERE t2.interaction_type = 'activitor' GROUP BY t1.id ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE enzyme (id NUMBER, name TEXT, Product TEXT); CREATE TABLE medicine_enzyme_interaction (enzyme_id NUMBER, medicine_id NUMBER, interaction_type TEXT); CREATE TABLE medicine (id NUMBER, name TEXT);"
      }
    ],
    [
      {
        "question": "How many enzymes do not have any interactions?",
        "query": "SELECT COUNT ( * ) FROM enzyme WHERE id NOT IN ( SELECT enzyme_id FROM medicine_enzyme_interaction )",
        "schema": "CREATE TABLE enzyme (id NUMBER, name TEXT); CREATE TABLE medicine_enzyme_interaction (enzyme_id NUMBER, medicine_id NUMBER, interaction_type TEXT);"
      },
      {
        "question": "List enzyme names in alphabetical order",
        "query": "SELECT name FROM enzyme ORDER BY name",
        "schema": "CREATE TABLE medicine_enzyme_interaction (medicine_id NUMBER, enzyme_id NUMBER, interaction_type TEXT); CREATE TABLE medicine (id NUMBER); CREATE TABLE enzyme (name TEXT, id NUMBER);"
      },
      {
        "question": "Give me enzymes with interaction type \"inhibitor\"",
        "query": "SELECT DISTINCT name FROM enzyme AS t1 JOIN medicine_enzyme_interaction AS t2 ON t2.enzyme_id = t1.id WHERE interaction_type = 'inhibitor'",
        "schema": "CREATE TABLE medicine_enzyme_interaction (interaction_type TEXT, enzyme_id NUMBER, medicine_id NUMBER); CREATE TABLE medicine (id NUMBER); CREATE TABLE enzyme (name TEXT, id NUMBER);"
      }
    ]
  ],
  "twitter_1": [
    [
      {
        "question": "hi. I would like to know how many users are followed by Mary?",
        "query": "SELECT COUNT ( t2.f1 ) FROM user_profiles AS t1 JOIN follows AS t2 ON t1.uid = t2.f2 WHERE t1.name = \"Mary\"",
        "schema": "CREATE TABLE user_profiles (name TEXT, followers NUMBER, uid NUMBER); CREATE TABLE follows (f2 NUMBER, f1 NUMBER);"
      },
      {
        "question": "and how many are followed by Susan?",
        "query": "SELECT COUNT ( t2.f1 ) FROM user_profiles AS t1 JOIN follows AS t2 ON t1.uid = t2.f2 WHERE t1.name = \"Susan\"",
        "schema": "CREATE TABLE follows (f2 NUMBER, f1 NUMBER); CREATE TABLE user_profiles (uid NUMBER, name TEXT, followers NUMBER);"
      },
      {
        "question": "can you tell me the Id of these users?",
        "query": "SELECT t2.f1 FROM user_profiles AS t1 JOIN follows AS t2 ON t1.uid = t2.f2 WHERE t1.name = \"Susan\"",
        "schema": "CREATE TABLE follows (f1 NUMBER, f2 NUMBER); CREATE TABLE user_profiles (followers NUMBER, name TEXT, uid NUMBER);"
      },
      {
        "question": "and the user id followed by Mary?",
        "query": "SELECT t2.f1 FROM user_profiles AS t1 JOIN follows AS t2 ON t1.uid = t2.f2 WHERE t1.name = \"Susan\" OR t1.name = \"Mary\"",
        "schema": "CREATE TABLE user_profiles (name TEXT, uid NUMBER, followers NUMBER); CREATE TABLE follows (f2 NUMBER, f1 NUMBER);"
      }
    ],
    [
      {
        "question": "Which users had some tweets?",
        "query": "SELECT name FROM user_profiles WHERE UID IN ( SELECT UID FROM tweets )",
        "schema": "CREATE TABLE follows (f2 NUMBER, f1 NUMBER); CREATE TABLE tweets (createdate TIME, id NUMBER, text TEXT, uid NUMBER); CREATE TABLE user_profiles (partitionid NUMBER, uid NUMBER, followers NUMBER, name TEXT);"
      },
      {
        "question": "Can you find me the average number of followers for these users?",
        "query": "SELECT AVG ( followers ) FROM user_profiles WHERE UID IN ( SELECT UID FROM tweets )",
        "schema": "CREATE TABLE user_profiles (partitionid NUMBER, name TEXT, uid NUMBER, followers NUMBER); CREATE TABLE tweets (createdate TIME, uid NUMBER, text TEXT, id NUMBER); CREATE TABLE follows (f1 NUMBER, f2 NUMBER);"
      }
    ],
    [
      {
        "question": "List the names of 5 users followed by the largest number of other users.",
        "query": "SELECT name FROM user_profiles ORDER BY followers DESC LIMIT 5",
        "schema": "CREATE TABLE follows (f2 NUMBER, f1 NUMBER); CREATE TABLE user_profiles (partitionid NUMBER, followers NUMBER, uid NUMBER, name TEXT);"
      },
      {
        "question": "What is the email and followers of Iron Man?",
        "query": "SELECT email,followers FROM user_profiles WHERE name = \"Iron Man\"",
        "schema": "CREATE TABLE follows (f1 NUMBER, f2 NUMBER); CREATE TABLE user_profiles (email TEXT, name TEXT, followers NUMBER, uid NUMBER, partitionid NUMBER);"
      },
      {
        "question": "What name has the highest followers?",
        "query": "SELECT name FROM user_profiles ORDER BY followers DESC LIMIT 1",
        "schema": "CREATE TABLE follows (f2 NUMBER, f1 NUMBER); CREATE TABLE user_profiles (partitionid NUMBER, name TEXT, email TEXT, followers NUMBER, uid NUMBER);"
      },
      {
        "question": "How many followers does Tyler Swift have?",
        "query": "SELECT followers FROM user_profiles WHERE name = \"Tyler Swift\"",
        "schema": "CREATE TABLE user_profiles (uid NUMBER, followers NUMBER, partitionid NUMBER, name TEXT, email TEXT); CREATE TABLE follows (f1 NUMBER, f2 NUMBER);"
      },
      {
        "question": "What is the email and partition id of Tyler Swift?",
        "query": "SELECT email,partitionid FROM user_profiles WHERE name = \"Tyler Swift\"",
        "schema": "CREATE TABLE user_profiles (partitionid NUMBER, followers NUMBER, uid NUMBER, email TEXT, name TEXT); CREATE TABLE follows (f2 NUMBER, f1 NUMBER);"
      }
    ],
    [
      {
        "question": "Can you list the uids and names of all users?",
        "query": "SELECT UID, name FROM user_profiles",
        "schema": "CREATE TABLE user_profiles (uid NUMBER, name TEXT); CREATE TABLE follows (f2 NUMBER, f1 NUMBER);"
      },
      {
        "question": "Hmm, I want to know the number of followers of each user.",
        "query": "SELECT name, followers FROM user_profiles",
        "schema": "CREATE TABLE follows (f1 NUMBER, f2 NUMBER); CREATE TABLE user_profiles (uid NUMBER, name TEXT, followers NUMBER);"
      },
      {
        "question": "What is the maximum number of followers of all users?",
        "query": "SELECT MAX ( followers ) FROM user_profiles",
        "schema": "CREATE TABLE user_profiles (followers NUMBER, uid NUMBER, name TEXT); CREATE TABLE follows (f2 NUMBER, f1 NUMBER);"
      },
      {
        "question": "What is the total number of followers of all users?",
        "query": "SELECT SUM ( followers ) FROM user_profiles",
        "schema": "CREATE TABLE follows (f2 NUMBER, f1 NUMBER); CREATE TABLE user_profiles (uid NUMBER, followers NUMBER, name TEXT);"
      }
    ],
    [
      {
        "question": "how many  tweets there",
        "query": "SELECT COUNT ( * ) FROM tweets",
        "schema": "CREATE TABLE tweets (text TEXT, uid NUMBER, id NUMBER, createdate TIME); CREATE TABLE user_profiles (uid NUMBER);"
      },
      {
        "question": "what is email id of Mary | Did you mean what is the email of Mary or uid or her? | yes  user profiles email id of mary",
        "query": "SELECT email FROM user_profiles WHERE name = \"Mary\"",
        "schema": "CREATE TABLE tweets (id NUMBER, uid NUMBER, text TEXT, createdate TIME); CREATE TABLE follows (f1 NUMBER, f2 NUMBER); CREATE TABLE user_profiles (uid NUMBER, email TEXT, name TEXT);"
      },
      {
        "question": "how many followers in Iron Man",
        "query": "SELECT followers FROM user_profiles WHERE name = \"Iron Man\"",
        "schema": "CREATE TABLE user_profiles (name TEXT, uid NUMBER, followers NUMBER, email TEXT); CREATE TABLE tweets (createdate TIME, text TEXT, id NUMBER, uid NUMBER); CREATE TABLE follows (f2 NUMBER, f1 NUMBER);"
      }
    ],
    [
      {
        "question": "How many tweets in this table?",
        "query": "SELECT COUNT ( * ) FROM tweets",
        "schema": "CREATE TABLE user_profiles (uid NUMBER); CREATE TABLE tweets (text TEXT, createdate TIME, uid NUMBER, id NUMBER);"
      },
      {
        "question": "How many user profiles in this table?",
        "query": "SELECT COUNT ( * ) FROM user_profiles",
        "schema": "CREATE TABLE follows (f2 NUMBER, f1 NUMBER); CREATE TABLE tweets (id NUMBER, text TEXT, uid NUMBER, createdate TIME); CREATE TABLE user_profiles (uid NUMBER, name TEXT, partitionid NUMBER);"
      },
      {
        "question": "What is the email id of Iron Man?",
        "query": "SELECT email FROM user_profiles WHERE name = \"Iron Man\"",
        "schema": "CREATE TABLE tweets (id NUMBER, createdate TIME, uid NUMBER, text TEXT); CREATE TABLE follows (f1 NUMBER, f2 NUMBER); CREATE TABLE user_profiles (name TEXT, partitionid NUMBER, email TEXT, uid NUMBER);"
      },
      {
        "question": "What is the text tweet of Iron Man?",
        "query": "SELECT t2.text FROM user_profiles AS t1 JOIN tweets AS t2 ON t1.uid = t2.uid WHERE t1.name = \"Iron Man\"",
        "schema": "CREATE TABLE tweets (text TEXT, uid NUMBER, createdate TIME, id NUMBER); CREATE TABLE follows (f1 NUMBER, f2 NUMBER); CREATE TABLE user_profiles (name TEXT, partitionid NUMBER, email TEXT, uid NUMBER);"
      }
    ],
    [
      {
        "question": "How many users are followed by Mary?",
        "query": "SELECT COUNT ( * ) FROM user_profiles AS t1 JOIN follows AS t2 ON t1.uid = t2.f2 WHERE t1.name = \"Mary\"",
        "schema": "CREATE TABLE user_profiles (followers NUMBER, uid NUMBER, name TEXT); CREATE TABLE follows (f1 NUMBER, f2 NUMBER);"
      },
      {
        "question": "What about by Susan?",
        "query": "SELECT COUNT ( * ) FROM user_profiles AS t1 JOIN follows AS t2 ON t1.uid = t2.f2 WHERE t1.name = \"Susan\"",
        "schema": "CREATE TABLE user_profiles (followers NUMBER, name TEXT, uid NUMBER); CREATE TABLE follows (f1 NUMBER, f2 NUMBER);"
      },
      {
        "question": "What is the id for those users? | Do you mean users followed by only Mary, or only Susan, or by either? | I mean the users followed by either.",
        "query": "SELECT t2.f1 FROM user_profiles AS t1 JOIN follows AS t2 ON t1.uid = t2.f2 WHERE t1.name = \"Mary\" OR t1.name = \"Susan\"",
        "schema": "CREATE TABLE follows (f1 NUMBER, f2 NUMBER); CREATE TABLE user_profiles (followers NUMBER, name TEXT, uid NUMBER);"
      },
      {
        "question": "What are the names of those users?",
        "query": "SELECT UID, name FROM user_profiles WHERE UID IN ( SELECT t2.f1 FROM user_profiles AS t1 JOIN follows AS t2 ON t1.uid = t2.f2 WHERE t1.name = \"Mary\" OR t1.name = \"Susan\" )",
        "schema": "CREATE TABLE follows (f1 NUMBER, f2 NUMBER); CREATE TABLE user_profiles (uid NUMBER, followers NUMBER, name TEXT);"
      }
    ],
    [
      {
        "question": "What are the total number of followers for all users?",
        "query": "SELECT SUM ( followers ) FROM user_profiles",
        "schema": "CREATE TABLE user_profiles (name TEXT, uid NUMBER, followers NUMBER); CREATE TABLE follows (f1 NUMBER, f2 NUMBER);"
      },
      {
        "question": "What are the lowest number of followers?",
        "query": "SELECT MIN ( followers ) FROM user_profiles",
        "schema": "CREATE TABLE user_profiles (name TEXT, followers NUMBER, uid NUMBER); CREATE TABLE follows (f2 NUMBER, f1 NUMBER);"
      },
      {
        "question": "Yes, please.",
        "query": "SELECT name FROM user_profiles WHERE followers = ( SELECT MAX ( followers ) FROM user_profiles )",
        "schema": "CREATE TABLE follows (f2 NUMBER, f1 NUMBER); CREATE TABLE user_profiles (name TEXT, followers NUMBER, uid NUMBER);"
      }
    ],
    [
      {
        "question": "Hi, I was wondering how many users do not have tweets?",
        "query": "SELECT COUNT ( * ) FROM user_profiles WHERE UID NOT IN ( SELECT UID FROM tweets )",
        "schema": "CREATE TABLE follows (f1 NUMBER, f2 NUMBER); CREATE TABLE user_profiles (uid NUMBER, partitionid NUMBER, name TEXT); CREATE TABLE tweets (createdate TIME, id NUMBER, uid NUMBER, text TEXT);"
      },
      {
        "question": "Great, what is the average number of followers for everyone in the data set?",
        "query": "SELECT AVG ( followers ) FROM user_profiles",
        "schema": "CREATE TABLE user_profiles (followers NUMBER, partitionid NUMBER, name TEXT, uid NUMBER); CREATE TABLE follows (f1 NUMBER, f2 NUMBER); CREATE TABLE tweets (createdate TIME, uid NUMBER, id NUMBER, text TEXT);"
      },
      {
        "question": "Okay, and what about the average followers for those who do have tweets?",
        "query": "SELECT AVG ( followers ) FROM user_profiles WHERE UID IN ( SELECT UID FROM tweets )",
        "schema": "CREATE TABLE follows (f2 NUMBER, f1 NUMBER); CREATE TABLE user_profiles (partitionid NUMBER, followers NUMBER, name TEXT, uid NUMBER); CREATE TABLE tweets (text TEXT, id NUMBER, uid NUMBER, createdate TIME);"
      },
      {
        "question": "And what was the average followers for those who do not have any tweets?",
        "query": "SELECT AVG ( followers ) FROM user_profiles WHERE UID NOT IN ( SELECT UID FROM tweets )",
        "schema": "CREATE TABLE follows (f1 NUMBER, f2 NUMBER); CREATE TABLE tweets (text TEXT, uid NUMBER, createdate TIME, id NUMBER); CREATE TABLE user_profiles (partitionid NUMBER, followers NUMBER, uid NUMBER, name TEXT);"
      }
    ],
    [
      {
        "question": "what is the users' name?",
        "query": "SELECT name FROM user_profiles",
        "schema": "CREATE TABLE user_profiles (name TEXT, uid NUMBER); CREATE TABLE follows (f2 NUMBER, f1 NUMBER);"
      },
      {
        "question": "which one has the most followers?",
        "query": "SELECT name FROM user_profiles ORDER BY followers DESC LIMIT 1",
        "schema": "CREATE TABLE user_profiles (name TEXT, followers NUMBER, partitionid NUMBER, uid NUMBER); CREATE TABLE follows (f1 NUMBER, f2 NUMBER);"
      },
      {
        "question": "what is her email?",
        "query": "SELECT email FROM user_profiles ORDER BY followers DESC LIMIT 1",
        "schema": "CREATE TABLE follows (f1 NUMBER, f2 NUMBER); CREATE TABLE user_profiles (followers NUMBER, uid NUMBER, partitionid NUMBER, email TEXT, name TEXT);"
      },
      {
        "question": "find the id of users who are followed by mary and susan.",
        "query": "SELECT t2.f1 FROM user_profiles AS t1 JOIN follows AS t2 ON t1.uid = t2.f2 WHERE t1.name = \"Mary\" INTERSECT SELECT t2.f1 FROM user_profiles AS t1 JOIN follows AS t2 ON t1.uid = t2.f2 WHERE t1.name = \"Susan\"",
        "schema": "CREATE TABLE follows (f1 NUMBER, f2 NUMBER); CREATE TABLE user_profiles (partitionid NUMBER, followers NUMBER, uid NUMBER, name TEXT, email TEXT);"
      }
    ],
    [
      {
        "question": "What is the name of uid 1 ?",
        "query": "SELECT name FROM user_profiles WHERE UID = 1",
        "schema": "CREATE TABLE tweets (uid NUMBER); CREATE TABLE user_profiles (name TEXT, partitionid NUMBER, uid NUMBER); CREATE TABLE follows (f2 NUMBER, f1 NUMBER);"
      },
      {
        "question": "How many followers does Mary have ?",
        "query": "SELECT followers FROM user_profiles WHERE name = 'Mary'",
        "schema": "CREATE TABLE follows (f2 NUMBER, f1 NUMBER); CREATE TABLE tweets (uid NUMBER); CREATE TABLE user_profiles (name TEXT, partitionid NUMBER, uid NUMBER, followers NUMBER);"
      },
      {
        "question": "Find the name and partition id for users who tweeted less than twice ?",
        "query": "SELECT t1.partitionid, t1.name FROM user_profiles AS t1 JOIN tweets AS t2 WHERE t1.uid = t2.uid GROUP BY t2.uid HAVING COUNT ( * ) <2",
        "schema": "CREATE TABLE user_profiles (name TEXT, partitionid NUMBER, uid NUMBER, followers NUMBER); CREATE TABLE tweets (uid NUMBER, id NUMBER); CREATE TABLE follows (f1 NUMBER, f2 NUMBER);"
      }
    ],
    [
      {
        "question": "What are the names of all the individuals in the table?",
        "query": "SELECT name FROM user_profiles",
        "schema": "CREATE TABLE user_profiles (uid NUMBER, name TEXT);"
      },
      {
        "question": "How many followers does Celine Dion have?",
        "query": "SELECT followers FROM user_profiles WHERE name = \"Celine Dion\"",
        "schema": "CREATE TABLE user_profiles (name TEXT, followers NUMBER, uid NUMBER);"
      },
      {
        "question": "How about Tyler Swift?",
        "query": "SELECT followers FROM user_profiles WHERE name = \"Tyler Swift\"",
        "schema": "CREATE TABLE follows (f2 NUMBER, f1 NUMBER); CREATE TABLE user_profiles (followers NUMBER, uid NUMBER, name TEXT);"
      },
      {
        "question": "What is Tyler Swift's email?",
        "query": "SELECT email FROM user_profiles WHERE name = \"Tyler Swift\"",
        "schema": "CREATE TABLE follows (f2 NUMBER, f1 NUMBER); CREATE TABLE user_profiles (uid NUMBER, followers NUMBER, name TEXT, email TEXT);"
      }
    ],
    [
      {
        "question": "show me the name of the users.",
        "query": "SELECT name FROM user_profiles",
        "schema": "CREATE TABLE user_profiles (partitionid NUMBER, uid NUMBER, name TEXT); CREATE TABLE follows (f1 NUMBER, f2 NUMBER);"
      },
      {
        "question": "show me the tweets tweeted by them. | do you want to show all the info of the tweets? | yes",
        "query": "SELECT * FROM user_profiles AS t1 JOIN tweets AS t2 ON t1.uid = t2.uid",
        "schema": "CREATE TABLE user_profiles (uid NUMBER, partitionid NUMBER, name TEXT); CREATE TABLE tweets (text TEXT, id NUMBER, uid NUMBER); CREATE TABLE follows (f1 NUMBER, f2 NUMBER);"
      },
      {
        "question": "show me the number of tweets of each user",
        "query": "SELECT t1.name , COUNT ( * ) FROM user_profiles AS t1 JOIN tweets AS t2 ON t1.uid = t2.uid GROUP BY t2.uid",
        "schema": "CREATE TABLE user_profiles (uid NUMBER, name TEXT, partitionid NUMBER); CREATE TABLE tweets (uid NUMBER, id NUMBER, text TEXT); CREATE TABLE follows (f2 NUMBER, f1 NUMBER);"
      }
    ],
    [
      {
        "question": "How many tweets are on the topic intern",
        "query": "SELECT COUNT ( * ) FROM tweets WHERE text LIKE '%intern%'",
        "schema": "CREATE TABLE user_profiles (uid NUMBER); CREATE TABLE tweets (createdate TIME, id NUMBER, text TEXT, uid NUMBER);"
      },
      {
        "question": "which tweet has the newest creation date?",
        "query": "SELECT * FROM tweets ORDER BY createdate DESC LIMIT 1",
        "schema": "CREATE TABLE user_profiles (uid NUMBER); CREATE TABLE tweets (text TEXT, id NUMBER, uid NUMBER, createdate TIME);"
      },
      {
        "question": "what about the oldest tweet?",
        "query": "SELECT * FROM tweets ORDER BY createdate LIMIT 1",
        "schema": "CREATE TABLE tweets (id NUMBER, createdate TIME, text TEXT, uid NUMBER); CREATE TABLE user_profiles (uid NUMBER);"
      }
    ],
    [
      {
        "question": "Find the email of the user whose name contains the word \"Swift\"",
        "query": "SELECT email FROM user_profiles WHERE name LIKE '%Swift%'",
        "schema": "CREATE TABLE user_profiles (uid NUMBER, name TEXT, email TEXT); CREATE TABLE follows (f2 NUMBER, f1 NUMBER);"
      },
      {
        "question": "What is his name?",
        "query": "SELECT name FROM user_profiles WHERE name LIKE '%Swift%'",
        "schema": "CREATE TABLE user_profiles (name TEXT, uid NUMBER, email TEXT); CREATE TABLE follows (f2 NUMBER, f1 NUMBER);"
      }
    ],
    [
      {
        "question": "Can you show all user ids that have more than 1 tweet?",
        "query": "SELECT t1.uid FROM user_profiles AS t1 JOIN tweets AS t2 ON t1.uid = t2.uid GROUP BY t2.uid HAVING COUNT ( * ) > 1",
        "schema": "CREATE TABLE user_profiles (name TEXT, uid NUMBER); CREATE TABLE follows (f1 NUMBER, f2 NUMBER); CREATE TABLE tweets (text TEXT, createdate TIME, id NUMBER, uid NUMBER);"
      },
      {
        "question": "Thanks, can you show the names associated with those user ids?",
        "query": "SELECT t1.name FROM user_profiles AS t1 JOIN tweets AS t2 ON t1.uid = t2.uid GROUP BY t2.uid HAVING COUNT ( * ) > 1",
        "schema": "CREATE TABLE user_profiles (name TEXT, uid NUMBER); CREATE TABLE follows (f1 NUMBER, f2 NUMBER); CREATE TABLE tweets (text TEXT, createdate TIME, id NUMBER, uid NUMBER);"
      },
      {
        "question": "Can you list the names in alphabetical order from top to bottom?",
        "query": "SELECT t1.name FROM user_profiles AS t1 JOIN tweets AS t2 ON t1.uid = t2.uid GROUP BY t2.uid HAVING COUNT ( * ) > 1 ORDER BY t1.name",
        "schema": "CREATE TABLE follows (f2 NUMBER, f1 NUMBER); CREATE TABLE user_profiles (name TEXT, uid NUMBER); CREATE TABLE tweets (id NUMBER, createdate TIME, text TEXT, uid NUMBER);"
      }
    ],
    [
      {
        "question": "What is his tweeter account? | can you give more details? who is \"he\" | The user who tweeted more than once",
        "query": "SELECT * FROM user_profiles AS t1 JOIN tweets AS t2 ON t1.uid = t2.uid GROUP BY t2.uid HAVING COUNT ( * ) > 1",
        "schema": "CREATE TABLE user_profiles (uid NUMBER, followers NUMBER, name TEXT); CREATE TABLE tweets (uid NUMBER, createdate TIME, text TEXT, id NUMBER); CREATE TABLE follows (f1 NUMBER, f2 NUMBER);"
      },
      {
        "question": "What are his tweets? | do you mean the text of tweets | Yes",
        "query": "SELECT t1.name, t2.text FROM user_profiles AS t1 JOIN tweets AS t2 ON t1.uid = t2.uid GROUP BY t2.uid HAVING COUNT ( * ) > 1",
        "schema": "CREATE TABLE tweets (id NUMBER, createdate TIME, text TEXT, uid NUMBER); CREATE TABLE user_profiles (name TEXT, followers NUMBER, uid NUMBER); CREATE TABLE follows (f2 NUMBER, f1 NUMBER);"
      },
      {
        "question": "How many tweets did Iron man tweet?",
        "query": "SELECT COUNT ( * ) FROM user_profiles AS t1 JOIN tweets AS t2 ON t1.uid = t2.uid AND t1.name = 'Iron Man'",
        "schema": "CREATE TABLE follows (f1 NUMBER, f2 NUMBER); CREATE TABLE tweets (createdate TIME, text TEXT, id NUMBER, uid NUMBER); CREATE TABLE user_profiles (name TEXT, followers NUMBER, uid NUMBER);"
      },
      {
        "question": "What about Celine?",
        "query": "SELECT COUNT ( * ) FROM user_profiles AS t1 JOIN tweets AS t2 ON t1.uid = t2.uid AND t1.name = 'Celine Dion'",
        "schema": "CREATE TABLE follows (f1 NUMBER, f2 NUMBER); CREATE TABLE user_profiles (name TEXT, followers NUMBER, uid NUMBER); CREATE TABLE tweets (uid NUMBER, createdate TIME, id NUMBER, text TEXT);"
      }
    ],
    [
      {
        "question": "Show me all the users.",
        "query": "SELECT name FROM user_profiles",
        "schema": "CREATE TABLE follows (f2 NUMBER, f1 NUMBER); CREATE TABLE user_profiles (followers NUMBER, name TEXT, partitionid NUMBER, uid NUMBER);"
      },
      {
        "question": "Which of these users have more than one tweet?",
        "query": "SELECT t1.name FROM user_profiles AS t1 JOIN tweets AS t2 ON t1.uid = t2.uid GROUP BY t2.uid HAVING COUNT ( * ) > 1",
        "schema": "CREATE TABLE user_profiles (partitionid NUMBER, uid NUMBER, followers NUMBER, name TEXT); CREATE TABLE tweets (uid NUMBER, createdate TIME, id NUMBER); CREATE TABLE follows (f1 NUMBER, f2 NUMBER);"
      },
      {
        "question": "Show me the number of tweets for each of these users.",
        "query": "SELECT t1.name, COUNT ( * ) FROM user_profiles AS t1 JOIN tweets AS t2 ON t1.uid = t2.uid GROUP BY t2.uid HAVING COUNT ( * ) > 1",
        "schema": "CREATE TABLE tweets (id NUMBER, uid NUMBER, createdate TIME); CREATE TABLE user_profiles (name TEXT, uid NUMBER, partitionid NUMBER, followers NUMBER); CREATE TABLE follows (f2 NUMBER, f1 NUMBER);"
      }
    ],
    [
      {
        "question": "Can you please tell me how many users there are?",
        "query": "SELECT COUNT ( * ) FROM user_profiles",
        "schema": "CREATE TABLE follows (f2 NUMBER, f1 NUMBER); CREATE TABLE user_profiles (name TEXT, uid NUMBER, followers NUMBER, partitionid NUMBER);"
      },
      {
        "question": "Which user has the most followers?",
        "query": "SELECT name FROM user_profiles ORDER BY followers DESC LIMIT 1",
        "schema": "CREATE TABLE user_profiles (name TEXT, followers NUMBER, partitionid NUMBER, uid NUMBER); CREATE TABLE follows (f1 NUMBER, f2 NUMBER);"
      },
      {
        "question": "And how many followers does Tyler have? | Tyler Swift has 99999998 followers | That's 99999998 followers out of how many total followers for all users?",
        "query": "SELECT SUM ( followers ) FROM user_profiles",
        "schema": "CREATE TABLE follows (f2 NUMBER, f1 NUMBER); CREATE TABLE user_profiles (uid NUMBER, partitionid NUMBER, followers NUMBER, name TEXT);"
      },
      {
        "question": "Can you please also provide the number of followers for the remaining users?",
        "query": "SELECT followers FROM user_profiles WHERE name ! = \"Tyler Swift\"",
        "schema": "CREATE TABLE user_profiles (followers NUMBER, name TEXT, partitionid NUMBER, uid NUMBER); CREATE TABLE follows (f1 NUMBER, f2 NUMBER);"
      }
    ]
  ],
  "hospital_1": [
    [
      {
        "question": "What is the name of the nurse who has the most appointments?",
        "query": "SELECT t1.name FROM nurse AS t1 JOIN appointment AS t2 ON t1.employeeid = t2.prepnurse GROUP BY t1.employeeid ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Undergoes (AssistingNurse NUMBER); CREATE TABLE Nurse (Registered BOOLEAN, SSN NUMBER, EmployeeID NUMBER, Name TEXT, Position TEXT); CREATE TABLE On_Call (Nurse NUMBER); CREATE TABLE Prescribes (Appointment NUMBER); CREATE TABLE Appointment (PrepNurse NUMBER, AppointmentID NUMBER, Patient NUMBER); CREATE TABLE Stay (StayID NUMBER, Patient NUMBER); CREATE TABLE Physician (EmployeeID NUMBER, Name TEXT); CREATE TABLE Patient (SSN NUMBER, Name TEXT);"
      },
      {
        "question": "What is her employee ID?",
        "query": "SELECT employeeid FROM nurse AS t1 JOIN appointment AS t2 ON t1.employeeid = t2.prepnurse GROUP BY t1.employeeid ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Patient (Name TEXT, SSN NUMBER); CREATE TABLE Prescribes (Appointment NUMBER); CREATE TABLE Undergoes (AssistingNurse NUMBER); CREATE TABLE Nurse (Name TEXT, SSN NUMBER, EmployeeID NUMBER, Registered BOOLEAN, Position TEXT); CREATE TABLE On_Call (Nurse NUMBER); CREATE TABLE Stay (Patient NUMBER, StayID NUMBER); CREATE TABLE Appointment (Physician NUMBER, PrepNurse NUMBER, Patient NUMBER, AppointmentID NUMBER); CREATE TABLE Physician (EmployeeID NUMBER, Name TEXT);"
      },
      {
        "question": "List all nurses names in alphabetical order",
        "query": "SELECT name FROM nurse ORDER BY name",
        "schema": "CREATE TABLE On_Call (Nurse NUMBER); CREATE TABLE Undergoes (AssistingNurse NUMBER); CREATE TABLE Appointment (AppointmentID NUMBER, Patient NUMBER, Physician NUMBER, PrepNurse NUMBER); CREATE TABLE Stay (Patient NUMBER, StayID NUMBER); CREATE TABLE Physician (Name TEXT, EmployeeID NUMBER); CREATE TABLE Nurse (SSN NUMBER, Registered BOOLEAN, Name TEXT, Position TEXT, EmployeeID NUMBER); CREATE TABLE Patient (SSN NUMBER, Name TEXT); CREATE TABLE Prescribes (Appointment NUMBER);"
      }
    ],
    [
      {
        "question": "What are all the names of the departments?",
        "query": "SELECT name FROM department",
        "schema": "CREATE TABLE Medication (Name TEXT); CREATE TABLE Stay (Patient NUMBER); CREATE TABLE Patient (PCP NUMBER, SSN NUMBER, Name TEXT); CREATE TABLE Nurse (Name TEXT, EmployeeID NUMBER); CREATE TABLE Affiliated_With (Department NUMBER, Physician NUMBER); CREATE TABLE Procedures (Name TEXT); CREATE TABLE Department (Name TEXT, Head NUMBER, DepartmentID NUMBER); CREATE TABLE Appointment (Patient NUMBER); CREATE TABLE Physician (EmployeeID NUMBER, Name TEXT);"
      },
      {
        "question": "How many employees are in the General Medicine department?",
        "query": "SELECT head FROM department WHERE name = 'General Medicine'",
        "schema": "CREATE TABLE Medication (Name TEXT); CREATE TABLE Affiliated_With (Department NUMBER, Physician NUMBER); CREATE TABLE Department (Head NUMBER, Name TEXT, DepartmentID NUMBER); CREATE TABLE Physician (SSN NUMBER, Position TEXT, Name TEXT, EmployeeID NUMBER); CREATE TABLE Nurse (EmployeeID NUMBER, Name TEXT); CREATE TABLE Stay (StayEnd TIME, StayStart TIME, StayID NUMBER, Patient NUMBER); CREATE TABLE Appointment (Physician NUMBER, Patient NUMBER, AppointmentID NUMBER); CREATE TABLE Procedures (Name TEXT); CREATE TABLE Patient (Name TEXT, PCP NUMBER, SSN NUMBER);"
      },
      {
        "question": "Please show which departments have greater than 4 employees",
        "query": "SELECT name FROM department WHERE head>4",
        "schema": "CREATE TABLE Medication (Name TEXT); CREATE TABLE Department (Name TEXT, Head NUMBER, DepartmentID NUMBER); CREATE TABLE Appointment (AppointmentID NUMBER, Physician NUMBER, Patient NUMBER); CREATE TABLE Patient (SSN NUMBER, Name TEXT, PCP NUMBER); CREATE TABLE Stay (StayEnd TIME, StayID NUMBER, StayStart TIME, Patient NUMBER); CREATE TABLE Nurse (EmployeeID NUMBER, Name TEXT); CREATE TABLE Procedures (Name TEXT); CREATE TABLE Affiliated_With (Department NUMBER, Physician NUMBER); CREATE TABLE Physician (EmployeeID NUMBER, Name TEXT, SSN NUMBER, Position TEXT);"
      },
      {
        "question": "Which of these has the largest number of employees?",
        "query": "SELECT name FROM department ORDER BY head DESC LIMIT 1",
        "schema": "CREATE TABLE Physician (Name TEXT, EmployeeID NUMBER, Position TEXT, SSN NUMBER); CREATE TABLE Nurse (EmployeeID NUMBER, Name TEXT); CREATE TABLE Affiliated_With (Physician NUMBER, Department NUMBER); CREATE TABLE Procedures (Name TEXT); CREATE TABLE Appointment (Patient NUMBER, Physician NUMBER, AppointmentID NUMBER); CREATE TABLE Patient (SSN NUMBER, Name TEXT, PCP NUMBER); CREATE TABLE Medication (Name TEXT); CREATE TABLE Stay (StayStart TIME, Patient NUMBER, StayEnd TIME, StayID NUMBER); CREATE TABLE Department (Name TEXT, Head NUMBER, DepartmentID NUMBER);"
      }
    ],
    [
      {
        "question": "Find the name of Physicians who are affiliate with surgery or Psychiatry department.",
        "query": "SELECT t1.name FROM physician AS t1 JOIN affiliated_with AS t2 ON t1.employeeid = t2.physician JOIN department AS t3 ON t2.department = t3.departmentid WHERE t3.name = 'Surgery' OR t3.name = 'Psychiatry'",
        "schema": "CREATE TABLE Department (Head NUMBER, Name TEXT, DepartmentID NUMBER); CREATE TABLE Patient (Name TEXT, PCP NUMBER, SSN NUMBER); CREATE TABLE Nurse (Name TEXT, EmployeeID NUMBER); CREATE TABLE Physician (Position TEXT, SSN NUMBER, EmployeeID NUMBER, Name TEXT); CREATE TABLE Stay (StayID NUMBER); CREATE TABLE Trained_In (Physician NUMBER); CREATE TABLE Affiliated_With (Department NUMBER, Physician NUMBER, PrimaryAffiliation BOOLEAN); CREATE TABLE Appointment (Physician NUMBER);"
      },
      {
        "question": "What is the Physician name of the following Employee ID?  tell me the SSN. | Sorry what employee IDs are you talking about? | Sorry for my mistake. \nWhat is the Physician name of the following Employee ID 2? tell me the SSN.",
        "query": "SELECT name,ssn FROM physician WHERE employeeid = 2",
        "schema": "CREATE TABLE Trained_In (Physician NUMBER); CREATE TABLE Physician (Position TEXT, EmployeeID NUMBER, SSN NUMBER, Name TEXT); CREATE TABLE Patient (PCP NUMBER, SSN NUMBER, Name TEXT); CREATE TABLE Appointment (Physician NUMBER); CREATE TABLE Stay (StayID NUMBER); CREATE TABLE Nurse (EmployeeID NUMBER, Name TEXT); CREATE TABLE Affiliated_With (PrimaryAffiliation BOOLEAN, Department NUMBER, Physician NUMBER); CREATE TABLE Department (DepartmentID NUMBER, Name TEXT, Head NUMBER);"
      },
      {
        "question": "What is the Physician name of the following Position Staff Internist ? tell me the SSN, and Employee ID, | Do you want the name, SSN, and employee ID? | yes",
        "query": "SELECT name,ssn,employeeid FROM physician WHERE POSITION = \"Staff Internist\"",
        "schema": "CREATE TABLE Physician (EmployeeID NUMBER, Name TEXT, SSN NUMBER, Position TEXT); CREATE TABLE Nurse (EmployeeID NUMBER, Name TEXT); CREATE TABLE Patient (Name TEXT, PCP NUMBER, SSN NUMBER); CREATE TABLE Stay (StayID NUMBER); CREATE TABLE Appointment (Physician NUMBER); CREATE TABLE Affiliated_With (Physician NUMBER, Department NUMBER, PrimaryAffiliation BOOLEAN); CREATE TABLE Department (Head NUMBER, Name TEXT, DepartmentID NUMBER); CREATE TABLE Trained_In (Physician NUMBER);"
      },
      {
        "question": "which department has most number of head? tell me department ID,",
        "query": "SELECT departmentid FROM department ORDER BY head DESC LIMIT 1",
        "schema": "CREATE TABLE Patient (PCP NUMBER, SSN NUMBER, Name TEXT); CREATE TABLE Physician (EmployeeID NUMBER, Position TEXT, Name TEXT, SSN NUMBER); CREATE TABLE Stay (StayID NUMBER); CREATE TABLE Appointment (Physician NUMBER); CREATE TABLE Department (Head NUMBER, Name TEXT, DepartmentID NUMBER); CREATE TABLE Nurse (EmployeeID NUMBER, Name TEXT); CREATE TABLE Trained_In (Physician NUMBER); CREATE TABLE Affiliated_With (Physician NUMBER, Department NUMBER, PrimaryAffiliation BOOLEAN);"
      },
      {
        "question": "which department has least number of head? tell me department ID,And department name?",
        "query": "SELECT departmentid,name FROM department ORDER BY head LIMIT 1",
        "schema": "CREATE TABLE Affiliated_With (Physician NUMBER, PrimaryAffiliation BOOLEAN, Department NUMBER); CREATE TABLE Department (Head NUMBER, Name TEXT, DepartmentID NUMBER); CREATE TABLE Nurse (Name TEXT, EmployeeID NUMBER); CREATE TABLE Physician (Name TEXT, Position TEXT, EmployeeID NUMBER, SSN NUMBER); CREATE TABLE Patient (Name TEXT, PCP NUMBER, SSN NUMBER); CREATE TABLE Appointment (Physician NUMBER); CREATE TABLE Stay (StayID NUMBER); CREATE TABLE Trained_In (Physician NUMBER);"
      }
    ],
    [
      {
        "question": "Which procedure has the highest cost? | Do you mean the name of the procedure that has the highest cost? | Yes. What is the name of the procedure that has the highest cost?",
        "query": "SELECT name FROM procedures ORDER BY cost DESC LIMIT 1",
        "schema": "CREATE TABLE Physician (EmployeeID NUMBER, Name TEXT); CREATE TABLE Procedures (Name TEXT, Cost NUMBER, Code NUMBER); CREATE TABLE Nurse (EmployeeID NUMBER); CREATE TABLE Patient (PCP NUMBER, SSN NUMBER, Name TEXT);"
      },
      {
        "question": "What is the name of the procedure that has the lowest cost?",
        "query": "SELECT name FROM procedures ORDER BY cost ASC LIMIT 1",
        "schema": "CREATE TABLE Patient (Name TEXT, SSN NUMBER, PCP NUMBER); CREATE TABLE Physician (EmployeeID NUMBER, Name TEXT); CREATE TABLE Procedures (Cost NUMBER, Name TEXT, Code NUMBER); CREATE TABLE Nurse (EmployeeID NUMBER);"
      },
      {
        "question": "What are the highest cost, lowest cost and average cost of procedures?",
        "query": "SELECT MAX ( cost ) , MIN ( cost ) , AVG ( cost ) FROM procedures",
        "schema": "CREATE TABLE Patient (Name TEXT, PCP NUMBER, SSN NUMBER); CREATE TABLE Physician (EmployeeID NUMBER, Name TEXT); CREATE TABLE Procedures (Cost NUMBER, Name TEXT, Code NUMBER); CREATE TABLE Nurse (EmployeeID NUMBER);"
      }
    ],
    [
      {
        "question": "Which department has the least number of employees?",
        "query": "SELECT * FROM department AS t1 JOIN physician AS t2 ON t1.head = t2.employeeid GROUP BY departmentid ORDER BY COUNT ( departmentid ) LIMIT 1",
        "schema": "CREATE TABLE Department (Name TEXT, DepartmentID NUMBER, Head NUMBER); CREATE TABLE Room (RoomNumber NUMBER); CREATE TABLE Physician (EmployeeID NUMBER); CREATE TABLE Nurse (EmployeeID NUMBER); CREATE TABLE Procedures (Code NUMBER); CREATE TABLE Stay (StayID NUMBER); CREATE TABLE Patient (SSN NUMBER); CREATE TABLE Appointment (AppointmentID NUMBER); CREATE TABLE Affiliated_With (Physician NUMBER, Department NUMBER);"
      },
      {
        "question": "What is the name of the department head of General Medicine?",
        "query": "SELECT t2.name FROM department AS t1 JOIN physician AS t2 ON t1.head = t2.employeeid WHERE t1.name = 'General Medicine'",
        "schema": "CREATE TABLE Nurse (EmployeeID NUMBER); CREATE TABLE Affiliated_With (Physician NUMBER, Department NUMBER); CREATE TABLE Department (Head NUMBER, Name TEXT, DepartmentID NUMBER); CREATE TABLE Room (RoomNumber NUMBER); CREATE TABLE Stay (StayID NUMBER); CREATE TABLE Patient (SSN NUMBER); CREATE TABLE Physician (Name TEXT, EmployeeID NUMBER); CREATE TABLE Procedures (Code NUMBER); CREATE TABLE Appointment (AppointmentID NUMBER);"
      },
      {
        "question": "Thank you!  What is Percival Cox's position?",
        "query": "SELECT POSITION FROM physician WHERE name = \"Percival Cox\"",
        "schema": "CREATE TABLE Procedures (Code NUMBER); CREATE TABLE Physician (Position TEXT, SSN NUMBER, Name TEXT, EmployeeID NUMBER); CREATE TABLE Nurse (EmployeeID NUMBER, Position TEXT); CREATE TABLE Appointment (AppointmentID NUMBER, Physician NUMBER); CREATE TABLE Stay (StayID NUMBER); CREATE TABLE Affiliated_With (Department NUMBER, Physician NUMBER); CREATE TABLE Patient (SSN NUMBER); CREATE TABLE Department (Head NUMBER, Name TEXT, DepartmentID NUMBER); CREATE TABLE Room (RoomNumber NUMBER);"
      }
    ],
    [
      {
        "question": "Could you please find all the procedures that cost more than 1000?",
        "query": "SELECT * FROM procedures WHERE cost > 1000",
        "schema": "CREATE TABLE Undergoes (Procedures NUMBER); CREATE TABLE Procedures (Name TEXT, Code NUMBER, Cost NUMBER); CREATE TABLE Physician (EmployeeID NUMBER); CREATE TABLE Medication (Code NUMBER); CREATE TABLE Patient (PCP NUMBER, InsuranceID NUMBER, SSN NUMBER); CREATE TABLE Nurse (EmployeeID NUMBER);"
      },
      {
        "question": "Could you please find all the procedure that Jon Wen was trained in?",
        "query": "SELECT * FROM physician AS t1 JOIN trained_in AS t2 ON t1.employeeid = t2.physician JOIN procedures AS t3 ON t3.code = t2.treatment WHERE t1.name = \"John Wen\"",
        "schema": "CREATE TABLE Procedures (Name TEXT, Cost NUMBER, Code NUMBER); CREATE TABLE Physician (EmployeeID NUMBER, Name TEXT, SSN NUMBER, Position TEXT); CREATE TABLE Medication (Code NUMBER); CREATE TABLE Undergoes (Procedures NUMBER); CREATE TABLE Nurse (EmployeeID NUMBER, Name TEXT, SSN NUMBER); CREATE TABLE Trained_In (Physician NUMBER, Treatment NUMBER, CertificationExpires TIME); CREATE TABLE Patient (SSN NUMBER, Name TEXT, InsuranceID NUMBER, PCP NUMBER);"
      },
      {
        "question": "What are the names of the procedures that cost more than 1000 and are procedures John Wen was trained in?",
        "query": "SELECT name FROM procedures WHERE cost > 1000 INTERSECT SELECT t3.name FROM physician AS t1 JOIN trained_in AS t2 ON t1.employeeid = t2.physician JOIN procedures AS t3 ON t3.code = t2.treatment WHERE t1.name = \"John Wen\"",
        "schema": "CREATE TABLE Procedures (Cost NUMBER, Name TEXT, Code NUMBER); CREATE TABLE Medication (Code NUMBER); CREATE TABLE Undergoes (Procedures NUMBER); CREATE TABLE Physician (SSN NUMBER, Position TEXT, EmployeeID NUMBER, Name TEXT); CREATE TABLE Trained_In (Treatment NUMBER, CertificationExpires TIME, Physician NUMBER); CREATE TABLE Patient (PCP NUMBER, SSN NUMBER, Name TEXT, InsuranceID NUMBER); CREATE TABLE Nurse (SSN NUMBER, Name TEXT, EmployeeID NUMBER);"
      },
      {
        "question": "When do all of John Wen's certifications expire?",
        "query": "SELECT t2.certificationexpires FROM physician AS t1 JOIN trained_in AS t2 ON t1.employeeid = t2.physician JOIN procedures AS t3 ON t3.code = t2.treatment WHERE t1.name = \"John Wen\"",
        "schema": "CREATE TABLE Patient (InsuranceID NUMBER, PCP NUMBER, SSN NUMBER, Name TEXT); CREATE TABLE Medication (Code NUMBER); CREATE TABLE Undergoes (Procedures NUMBER); CREATE TABLE Procedures (Cost NUMBER, Code NUMBER, Name TEXT); CREATE TABLE Nurse (Name TEXT, EmployeeID NUMBER, SSN NUMBER); CREATE TABLE Trained_In (CertificationExpires TIME, Treatment NUMBER, CertificationDate TIME, Physician NUMBER); CREATE TABLE Physician (Name TEXT, EmployeeID NUMBER, SSN NUMBER, Position TEXT);"
      }
    ],
    [
      {
        "question": "What are the names and positions of all physicians who prescribed brand X medications?",
        "query": "SELECT DISTINCT t1.name , t1.position FROM physician AS t1 JOIN prescribes AS t2 ON t1.employeeid = t2.physician JOIN medication AS t3 ON t3.code = t2.medication WHERE t3.brand = \"X\"",
        "schema": "CREATE TABLE Physician (Position TEXT, EmployeeID NUMBER, Name TEXT, SSN NUMBER); CREATE TABLE Trained_In (Physician NUMBER); CREATE TABLE Medication (Brand TEXT, Code NUMBER, Name TEXT); CREATE TABLE Procedures (Code NUMBER); CREATE TABLE Appointment (AppointmentID NUMBER, Physician NUMBER); CREATE TABLE Patient (SSN NUMBER, PCP NUMBER); CREATE TABLE Prescribes (Medication NUMBER, Dose TEXT, Physician NUMBER, Appointment NUMBER, Patient NUMBER); CREATE TABLE Nurse (EmployeeID NUMBER, Position TEXT);"
      },
      {
        "question": "What were the dates he prescribed those medications?",
        "query": "SELECT DISTINCT t2.date FROM physician AS t1 JOIN prescribes AS t2 ON t1.employeeid = t2.physician JOIN medication AS t3 ON t3.code = t2.medication WHERE t3.brand = \"X\"",
        "schema": "CREATE TABLE Trained_In (Physician NUMBER); CREATE TABLE Patient (PCP NUMBER, SSN NUMBER); CREATE TABLE Prescribes (Physician NUMBER, Dose TEXT, Appointment NUMBER, Medication NUMBER, Date TIME, Patient NUMBER); CREATE TABLE Procedures (Code NUMBER); CREATE TABLE Medication (Code NUMBER, Name TEXT, Brand TEXT); CREATE TABLE Nurse (Position TEXT, EmployeeID NUMBER); CREATE TABLE Appointment (AppointmentID NUMBER, Physician NUMBER); CREATE TABLE Physician (Name TEXT, EmployeeID NUMBER, Position TEXT, SSN NUMBER);"
      },
      {
        "question": "What was the dose of that medication?",
        "query": "SELECT dose FROM physician AS t1 JOIN prescribes AS t2 ON t1.employeeid = t2.physician JOIN medication AS t3 ON t3.code = t2.medication WHERE t3.brand = \"X\"",
        "schema": "CREATE TABLE Trained_In (Physician NUMBER); CREATE TABLE Patient (PCP NUMBER, SSN NUMBER); CREATE TABLE Procedures (Code NUMBER); CREATE TABLE Prescribes (Physician NUMBER, Patient NUMBER, Dose TEXT, Medication NUMBER, Appointment NUMBER, Date TIME); CREATE TABLE Appointment (AppointmentID NUMBER, Physician NUMBER); CREATE TABLE Medication (Code NUMBER, Name TEXT, Brand TEXT); CREATE TABLE Physician (SSN NUMBER, EmployeeID NUMBER, Name TEXT, Position TEXT); CREATE TABLE Nurse (Position TEXT, EmployeeID NUMBER);"
      }
    ],
    [
      {
        "question": "Can you list the highest dose prescribed for any medication? | What information do you want for the prescriptions? Do you want all information or just the dose amount? | I wanted the name of the physician that prescribed the highest dose, but I believe you've already provided that information?",
        "query": "SELECT t1.name FROM physician AS t1 JOIN prescribes AS t2 ON t1.employeeid = t2.physician ORDER BY t2.dose DESC LIMIT 1",
        "schema": "CREATE TABLE Physician (EmployeeID NUMBER, SSN NUMBER, Name TEXT, Position TEXT); CREATE TABLE Prescribes (Medication NUMBER, Physician NUMBER, Dose TEXT); CREATE TABLE Patient (SSN NUMBER, Name TEXT); CREATE TABLE Medication (Name TEXT, Code NUMBER);"
      }
    ],
    [
      {
        "question": "What is is the number of patients who are not using Procrastin-X?",
        "query": "SELECT COUNT ( * ) FROM patient WHERE ssn NOT IN ( SELECT t1.patient FROM prescribes AS t1 JOIN medication AS t2 ON t1.medication = t2.code WHERE t2.name = 'Procrastin-X' )",
        "schema": "CREATE TABLE Physician (EmployeeID NUMBER); CREATE TABLE Undergoes (Patient NUMBER); CREATE TABLE Patient (InsuranceID NUMBER, Phone TEXT, PCP NUMBER, Name TEXT, SSN NUMBER); CREATE TABLE Prescribes (Medication NUMBER, Patient NUMBER); CREATE TABLE Stay (Patient NUMBER, StayID NUMBER); CREATE TABLE Appointment (Patient NUMBER); CREATE TABLE Medication (Code NUMBER, Name TEXT);"
      },
      {
        "question": "What are their names?",
        "query": "SELECT name FROM patient WHERE ssn NOT IN ( SELECT t1.patient FROM prescribes AS t1 JOIN medication AS t2 ON t1.medication = t2.code WHERE t2.name = 'Procrastin-X' )",
        "schema": "CREATE TABLE Department (Name TEXT); CREATE TABLE Appointment (Patient NUMBER); CREATE TABLE Undergoes (Patient NUMBER); CREATE TABLE Prescribes (Dose TEXT, Medication NUMBER, Patient NUMBER); CREATE TABLE Medication (Name TEXT, Code NUMBER); CREATE TABLE Stay (StayID NUMBER, Patient NUMBER); CREATE TABLE Physician (EmployeeID NUMBER, Name TEXT); CREATE TABLE Patient (SSN NUMBER, Name TEXT, InsuranceID NUMBER, PCP NUMBER, Phone TEXT);"
      },
      {
        "question": "And what is their address?",
        "query": "SELECT address FROM patient WHERE ssn NOT IN ( SELECT t1.patient FROM prescribes AS t1 JOIN medication AS t2 ON t1.medication = t2.code WHERE t2.name = 'Procrastin-X' )",
        "schema": "CREATE TABLE Physician (EmployeeID NUMBER, Name TEXT); CREATE TABLE Appointment (Patient NUMBER); CREATE TABLE Prescribes (Dose TEXT, Patient NUMBER, Medication NUMBER); CREATE TABLE Medication (Name TEXT, Code NUMBER); CREATE TABLE Undergoes (Patient NUMBER); CREATE TABLE Stay (StayID NUMBER, Patient NUMBER); CREATE TABLE Patient (Name TEXT, InsuranceID NUMBER, Address TEXT, Phone TEXT, SSN NUMBER, PCP NUMBER); CREATE TABLE Department (Name TEXT);"
      }
    ],
    [
      {
        "question": "Which department has the least number of employees?",
        "query": "SELECT * FROM department GROUP BY departmentid ORDER BY COUNT ( * ) LIMIT 1",
        "schema": "CREATE TABLE Physician (EmployeeID NUMBER); CREATE TABLE Stay (StayID NUMBER); CREATE TABLE Nurse (EmployeeID NUMBER); CREATE TABLE Affiliated_With (Physician NUMBER, Department NUMBER); CREATE TABLE Room (RoomNumber NUMBER); CREATE TABLE Patient (PCP NUMBER, SSN NUMBER); CREATE TABLE Department (Head NUMBER, DepartmentID NUMBER, Name TEXT);"
      },
      {
        "question": "What is the head of that department?",
        "query": "SELECT head FROM department GROUP BY departmentid ORDER BY COUNT ( departmentid ) LIMIT 1",
        "schema": "CREATE TABLE Affiliated_With (Department NUMBER, Physician NUMBER); CREATE TABLE Physician (EmployeeID NUMBER, Name TEXT); CREATE TABLE Department (Name TEXT, DepartmentID NUMBER, Head NUMBER); CREATE TABLE Room (RoomNumber NUMBER); CREATE TABLE Patient (SSN NUMBER, PCP NUMBER); CREATE TABLE Nurse (EmployeeID NUMBER); CREATE TABLE Stay (StayID NUMBER);"
      }
    ],
    [
      {
        "question": "what are the departments? | Do you want the names of all department? | yes",
        "query": "SELECT name FROM department",
        "schema": "CREATE TABLE Affiliated_With (Department NUMBER); CREATE TABLE Stay (StayID NUMBER); CREATE TABLE Medication (Name TEXT); CREATE TABLE Physician (EmployeeID NUMBER, Name TEXT); CREATE TABLE Nurse (EmployeeID NUMBER, Name TEXT); CREATE TABLE Patient (PCP NUMBER, Name TEXT, SSN NUMBER); CREATE TABLE Procedures (Name TEXT); CREATE TABLE Department (DepartmentID NUMBER, Head NUMBER, Name TEXT);"
      },
      {
        "question": "which department has the most employees?",
        "query": "SELECT name FROM department GROUP BY departmentid ORDER BY COUNT ( departmentid ) DESC LIMIT 1",
        "schema": "CREATE TABLE Physician (Name TEXT, EmployeeID NUMBER); CREATE TABLE Patient (PCP NUMBER, Name TEXT, SSN NUMBER); CREATE TABLE Nurse (EmployeeID NUMBER, Name TEXT); CREATE TABLE Medication (Name TEXT); CREATE TABLE Department (Head NUMBER, Name TEXT, DepartmentID NUMBER); CREATE TABLE Affiliated_With (Department NUMBER, Physician NUMBER); CREATE TABLE Procedures (Name TEXT); CREATE TABLE Stay (StayID NUMBER);"
      },
      {
        "question": "how many employees does Psychiatry have?",
        "query": "SELECT head FROM department WHERE name = \"Psychiatry\"",
        "schema": "CREATE TABLE Stay (StayID NUMBER); CREATE TABLE Patient (Name TEXT, SSN NUMBER, PCP NUMBER); CREATE TABLE Nurse (EmployeeID NUMBER, Name TEXT); CREATE TABLE Procedures (Name TEXT); CREATE TABLE Medication (Name TEXT); CREATE TABLE Appointment (Physician NUMBER); CREATE TABLE Physician (SSN NUMBER, EmployeeID NUMBER, Name TEXT); CREATE TABLE Affiliated_With (Department NUMBER, Physician NUMBER); CREATE TABLE Department (Head NUMBER, DepartmentID NUMBER, Name TEXT);"
      },
      {
        "question": "how many employees does surgery have?",
        "query": "SELECT head FROM department WHERE name = \"Surgery\"",
        "schema": "CREATE TABLE Affiliated_With (Physician NUMBER, Department NUMBER); CREATE TABLE Stay (StayID NUMBER); CREATE TABLE Appointment (Physician NUMBER); CREATE TABLE Patient (SSN NUMBER, PCP NUMBER, Name TEXT); CREATE TABLE Procedures (Name TEXT); CREATE TABLE Medication (Name TEXT); CREATE TABLE Physician (Name TEXT, EmployeeID NUMBER, SSN NUMBER); CREATE TABLE Nurse (Name TEXT, EmployeeID NUMBER); CREATE TABLE Department (Name TEXT, Head NUMBER, DepartmentID NUMBER);"
      },
      {
        "question": "what about general medicine?",
        "query": "SELECT head FROM department WHERE name = \"General Medicine\"",
        "schema": "CREATE TABLE Appointment (Physician NUMBER); CREATE TABLE Physician (EmployeeID NUMBER, SSN NUMBER, Name TEXT); CREATE TABLE Patient (SSN NUMBER, Name TEXT, PCP NUMBER); CREATE TABLE Department (DepartmentID NUMBER, Name TEXT, Head NUMBER); CREATE TABLE Stay (StayID NUMBER); CREATE TABLE Procedures (Name TEXT); CREATE TABLE Affiliated_With (Physician NUMBER, Department NUMBER); CREATE TABLE Prescribes (Medication NUMBER); CREATE TABLE Nurse (EmployeeID NUMBER, Name TEXT); CREATE TABLE Medication (Name TEXT, Code NUMBER);"
      }
    ],
    [
      {
        "question": "find the names of all patients who have an undergoing treatment and are staying in room 111",
        "query": "SELECT DISTINCT t2.name FROM undergoes AS t1 JOIN patient AS t2 ON t1.patient = t2.ssn JOIN stay AS t3 ON t1.stay = t3.stayid WHERE t3.room = 111",
        "schema": "CREATE TABLE Physician (EmployeeID NUMBER); CREATE TABLE Appointment (Patient NUMBER); CREATE TABLE Room (RoomType TEXT, RoomNumber NUMBER); CREATE TABLE Stay (StayID NUMBER, Patient NUMBER, StayStart TIME, Room NUMBER, StayEnd TIME); CREATE TABLE Prescribes (Patient NUMBER); CREATE TABLE Patient (SSN NUMBER, PCP NUMBER, Name TEXT); CREATE TABLE Undergoes (Patient NUMBER, Stay NUMBER);"
      },
      {
        "question": "find the name of the patient who have an insurance id 68476213",
        "query": "SELECT name FROM patient WHERE insuranceid = 68476213",
        "schema": "CREATE TABLE Prescribes (Patient NUMBER); CREATE TABLE Room (RoomNumber NUMBER, RoomType TEXT); CREATE TABLE Appointment (Patient NUMBER); CREATE TABLE Physician (EmployeeID NUMBER); CREATE TABLE Undergoes (Patient NUMBER, Stay NUMBER); CREATE TABLE Stay (StayEnd TIME, Room NUMBER, StayID NUMBER, Patient NUMBER, StayStart TIME); CREATE TABLE Patient (SSN NUMBER, Name TEXT, PCP NUMBER, InsuranceID NUMBER);"
      },
      {
        "question": "find the name of physician who have seen the patient 100000001",
        "query": "SELECT DISTINCT physician FROM undergoes WHERE patient = 100000001",
        "schema": "CREATE TABLE Stay (StayStart TIME, Room NUMBER, StayEnd TIME, Patient NUMBER, StayID NUMBER); CREATE TABLE Appointment (Physician NUMBER, Patient NUMBER); CREATE TABLE Prescribes (Patient NUMBER); CREATE TABLE Patient (Name TEXT, PCP NUMBER, InsuranceID NUMBER, SSN NUMBER); CREATE TABLE Undergoes (Patient NUMBER, Physician NUMBER, Stay NUMBER); CREATE TABLE Physician (EmployeeID NUMBER, SSN NUMBER, Name TEXT, Position TEXT); CREATE TABLE Room (RoomType TEXT, RoomNumber NUMBER);"
      }
    ],
    [
      {
        "question": "How many patients in this table?",
        "query": "SELECT COUNT ( patient ) FROM stay",
        "schema": "CREATE TABLE Physician (EmployeeID NUMBER); CREATE TABLE Patient (PCP NUMBER, InsuranceID NUMBER, Name TEXT, SSN NUMBER); CREATE TABLE Stay (StayID NUMBER, Patient NUMBER); CREATE TABLE Prescribes (Patient NUMBER); CREATE TABLE Appointment (Patient NUMBER); CREATE TABLE Undergoes (Patient NUMBER);"
      },
      {
        "question": "Find the patient who most recently stayed in room 112?",
        "query": "SELECT patient FROM stay WHERE room = 112 ORDER BY staystart DESC LIMIT 1",
        "schema": "CREATE TABLE Physician (EmployeeID NUMBER); CREATE TABLE Prescribes (Patient NUMBER); CREATE TABLE Appointment (Patient NUMBER); CREATE TABLE Room (RoomNumber NUMBER); CREATE TABLE Stay (StayEnd TIME, Patient NUMBER, Room NUMBER, StayID NUMBER, StayStart TIME); CREATE TABLE Patient (SSN NUMBER, Name TEXT, InsuranceID NUMBER, PCP NUMBER); CREATE TABLE Undergoes (Patient NUMBER, Stay NUMBER);"
      },
      {
        "question": "How many rooms in this table?",
        "query": "SELECT COUNT ( DISTINCT room ) FROM stay",
        "schema": "CREATE TABLE Prescribes (Patient NUMBER); CREATE TABLE Patient (PCP NUMBER, SSN NUMBER, InsuranceID NUMBER, Name TEXT); CREATE TABLE Appointment (Patient NUMBER); CREATE TABLE Undergoes (Stay NUMBER, Patient NUMBER); CREATE TABLE Stay (StayID NUMBER, StayEnd TIME, StayStart TIME, Room NUMBER, Patient NUMBER); CREATE TABLE Physician (EmployeeID NUMBER); CREATE TABLE Room (RoomType TEXT, RoomNumber NUMBER);"
      }
    ],
    [
      {
        "question": "How many patients are there?",
        "query": "SELECT COUNT ( * ) FROM patient",
        "schema": "CREATE TABLE Medication (Code NUMBER); CREATE TABLE Prescribes (Patient NUMBER); CREATE TABLE Trained_In (Treatment NUMBER); CREATE TABLE Stay (StayStart TIME, Patient NUMBER, StayID NUMBER); CREATE TABLE Patient (Address TEXT, Name TEXT, InsuranceID NUMBER, SSN NUMBER, PCP NUMBER); CREATE TABLE Physician (EmployeeID NUMBER); CREATE TABLE Nurse (EmployeeID NUMBER); CREATE TABLE Appointment (Patient NUMBER); CREATE TABLE Undergoes (Stay NUMBER, Patient NUMBER);"
      },
      {
        "question": "Can you show me the name of the patient who stays in room 111?",
        "query": "SELECT t2.name FROM stay AS t1 JOIN patient AS t2 ON t1.patient = t2.ssn JOIN prescribes AS t3 ON t3.patient = t2.ssn JOIN medication AS t4 ON t3.medication = t4.code WHERE room = 111",
        "schema": "CREATE TABLE Stay (StayStart TIME, Patient NUMBER, Room NUMBER, StayID NUMBER, StayEnd TIME); CREATE TABLE Room (RoomNumber NUMBER); CREATE TABLE Undergoes (Stay NUMBER, Patient NUMBER); CREATE TABLE Physician (EmployeeID NUMBER); CREATE TABLE Nurse (EmployeeID NUMBER); CREATE TABLE Medication (Code NUMBER); CREATE TABLE Patient (PCP NUMBER, Name TEXT, SSN NUMBER, InsuranceID NUMBER, Address TEXT); CREATE TABLE Prescribes (Patient NUMBER, Medication NUMBER); CREATE TABLE Trained_In (Treatment NUMBER); CREATE TABLE Appointment (Patient NUMBER);"
      },
      {
        "question": "Can you show me the insurance id of the patient who stays in room 111?",
        "query": "SELECT t2.insuranceid FROM stay AS t1 JOIN patient AS t2 ON t1.patient = t2.ssn JOIN prescribes AS t3 ON t3.patient = t2.ssn JOIN medication AS t4 ON t3.medication = t4.code WHERE room = 111",
        "schema": "CREATE TABLE Undergoes (Patient NUMBER, Stay NUMBER); CREATE TABLE Medication (Code NUMBER, Name TEXT); CREATE TABLE Appointment (Patient NUMBER); CREATE TABLE Prescribes (Patient NUMBER, Medication NUMBER); CREATE TABLE Nurse (EmployeeID NUMBER); CREATE TABLE Physician (EmployeeID NUMBER); CREATE TABLE Patient (Name TEXT, PCP NUMBER, SSN NUMBER, Address TEXT, InsuranceID NUMBER); CREATE TABLE Trained_In (Treatment NUMBER); CREATE TABLE Room (RoomNumber NUMBER); CREATE TABLE Stay (Patient NUMBER, StayEnd TIME, StayID NUMBER, StayStart TIME, Room NUMBER);"
      }
    ],
    [
      {
        "question": "What is the most expensive procedure? | Do you mean the name of the procedure with the highest cost? | Yes.",
        "query": "SELECT name FROM procedures ORDER BY cost DESC LIMIT 1",
        "schema": "CREATE TABLE Procedures (Code NUMBER, Cost NUMBER, Name TEXT); CREATE TABLE Stay (Patient NUMBER); CREATE TABLE Physician (Name TEXT, EmployeeID NUMBER); CREATE TABLE Undergoes (Procedures NUMBER); CREATE TABLE Appointment (Physician NUMBER); CREATE TABLE Medication (Name TEXT, Code NUMBER); CREATE TABLE Patient (PCP NUMBER, SSN NUMBER, Name TEXT); CREATE TABLE Nurse (EmployeeID NUMBER);"
      },
      {
        "question": "How many physicians are trained in Complete Walletectomy?",
        "query": "SELECT COUNT ( * ) FROM physician AS t1 JOIN trained_in AS t2 ON t1.employeeid = t2.physician JOIN procedures AS t3 ON t3.code = t2.treatment WHERE t3.name = 'Complete Walletectomy'",
        "schema": "CREATE TABLE Stay (Patient NUMBER); CREATE TABLE Undergoes (Procedures NUMBER); CREATE TABLE Procedures (Name TEXT, Cost NUMBER, Code NUMBER); CREATE TABLE Trained_In (Physician NUMBER, CertificationExpires TIME, Treatment NUMBER); CREATE TABLE Appointment (Physician NUMBER); CREATE TABLE Patient (Name TEXT, SSN NUMBER, PCP NUMBER); CREATE TABLE Physician (EmployeeID NUMBER, SSN NUMBER, Name TEXT); CREATE TABLE Medication (Name TEXT, Code NUMBER); CREATE TABLE Nurse (EmployeeID NUMBER);"
      },
      {
        "question": "What is that physician's name?",
        "query": "SELECT t1.name FROM physician AS t1 JOIN trained_in AS t2 ON t1.employeeid = t2.physician JOIN procedures AS t3 ON t3.code = t2.treatment WHERE t3.name = 'Complete Walletectomy'",
        "schema": "CREATE TABLE Undergoes (Procedures NUMBER); CREATE TABLE Physician (Name TEXT, SSN NUMBER, EmployeeID NUMBER); CREATE TABLE Appointment (Physician NUMBER); CREATE TABLE Patient (SSN NUMBER, PCP NUMBER, Name TEXT); CREATE TABLE Medication (Code NUMBER, Name TEXT); CREATE TABLE Stay (Patient NUMBER); CREATE TABLE Procedures (Code NUMBER, Cost NUMBER, Name TEXT); CREATE TABLE Nurse (EmployeeID NUMBER); CREATE TABLE Trained_In (CertificationExpires TIME, Treatment NUMBER, Physician NUMBER);"
      },
      {
        "question": "When were they trained in that procedure? | Do you mean the certification date and the expired date of the procedure named Complete Walletectomy? | The certification date.",
        "query": "SELECT t2.certificationdate FROM physician AS t1 JOIN trained_in AS t2 ON t1.employeeid = t2.physician JOIN procedures AS t3 ON t3.code = t2.treatment WHERE t3.name = 'Complete Walletectomy'",
        "schema": "CREATE TABLE Undergoes (Procedures NUMBER); CREATE TABLE Nurse (EmployeeID NUMBER); CREATE TABLE Trained_In (Treatment NUMBER, CertificationDate TIME, Physician NUMBER, CertificationExpires TIME); CREATE TABLE Patient (SSN NUMBER, Name TEXT, PCP NUMBER); CREATE TABLE Physician (SSN NUMBER, EmployeeID NUMBER, Name TEXT, Position TEXT); CREATE TABLE Appointment (Physician NUMBER); CREATE TABLE Stay (Patient NUMBER); CREATE TABLE Procedures (Cost NUMBER, Code NUMBER, Name TEXT); CREATE TABLE Medication (Name TEXT, Code NUMBER);"
      }
    ],
    [
      {
        "question": "What are the names of the patients who had more than one appointment?",
        "query": "SELECT name FROM appointment AS t1 JOIN patient AS t2 ON t1.patient = t2.ssn GROUP BY t1.patient HAVING COUNT ( * ) > 1",
        "schema": "CREATE TABLE Stay (Patient NUMBER, StayID NUMBER); CREATE TABLE Undergoes (Patient NUMBER); CREATE TABLE Appointment (Patient NUMBER, AppointmentID NUMBER, PrepNurse NUMBER); CREATE TABLE Prescribes (Patient NUMBER); CREATE TABLE Patient (SSN NUMBER, PCP NUMBER, InsuranceID NUMBER, Name TEXT); CREATE TABLE Physician (EmployeeID NUMBER);"
      },
      {
        "question": "What are their phone numbers, please?",
        "query": "SELECT phone FROM appointment AS t1 JOIN patient AS t2 ON t1.patient = t2.ssn GROUP BY t1.patient HAVING COUNT ( * ) > 1",
        "schema": "CREATE TABLE Physician (EmployeeID NUMBER); CREATE TABLE Prescribes (Patient NUMBER); CREATE TABLE Patient (PCP NUMBER, SSN NUMBER, Name TEXT, InsuranceID NUMBER, Phone TEXT); CREATE TABLE Stay (StayID NUMBER, Patient NUMBER); CREATE TABLE Undergoes (Patient NUMBER); CREATE TABLE Appointment (Patient NUMBER, AppointmentID NUMBER, PrepNurse NUMBER);"
      },
      {
        "question": "What are the pcp's of those patients?",
        "query": "SELECT pcp FROM appointment AS t1 JOIN patient AS t2 ON t1.patient = t2.ssn GROUP BY t1.patient HAVING COUNT ( * ) > 1",
        "schema": "CREATE TABLE Prescribes (Patient NUMBER); CREATE TABLE Patient (PCP NUMBER, Phone TEXT, SSN NUMBER, InsuranceID NUMBER, Name TEXT); CREATE TABLE Physician (EmployeeID NUMBER); CREATE TABLE Appointment (AppointmentID NUMBER, Patient NUMBER, PrepNurse NUMBER); CREATE TABLE Stay (StayID NUMBER, Patient NUMBER); CREATE TABLE Undergoes (Patient NUMBER);"
      },
      {
        "question": "What are the names of the patients who only had one appointment?",
        "query": "SELECT name FROM appointment AS t1 JOIN patient AS t2 ON t1.patient = t2.ssn GROUP BY t1.patient HAVING COUNT ( * ) = 1",
        "schema": "CREATE TABLE Stay (Patient NUMBER, StayID NUMBER); CREATE TABLE Physician (EmployeeID NUMBER); CREATE TABLE Appointment (Patient NUMBER, AppointmentID NUMBER, PrepNurse NUMBER); CREATE TABLE Patient (Phone TEXT, SSN NUMBER, PCP NUMBER, InsuranceID NUMBER, Name TEXT); CREATE TABLE Prescribes (Patient NUMBER); CREATE TABLE Undergoes (Patient NUMBER);"
      },
      {
        "question": "When did his appointment start and end?",
        "query": "SELECT t1.start,t1.end FROM appointment AS t1 JOIN patient AS t2 ON t1.patient = t2.ssn GROUP BY t1.patient HAVING COUNT ( * ) = 1",
        "schema": "CREATE TABLE Stay (StayID NUMBER, Patient NUMBER); CREATE TABLE Appointment (Start TIME, End TIME, Patient NUMBER, AppointmentID NUMBER, PrepNurse NUMBER); CREATE TABLE Undergoes (Patient NUMBER); CREATE TABLE Patient (Name TEXT, PCP NUMBER, SSN NUMBER, Phone TEXT, InsuranceID NUMBER); CREATE TABLE Prescribes (Patient NUMBER); CREATE TABLE Physician (EmployeeID NUMBER);"
      }
    ],
    [
      {
        "question": "What are the number of rooms for block code 1?",
        "query": "SELECT COUNT ( * ) FROM BLOCK AS t1 JOIN room AS t2 ON t1.blockfloor = t2.blockfloor AND t1.blockcode = t2.blockcode WHERE t1.blockcode = 1",
        "schema": "CREATE TABLE Department (Head NUMBER, Name TEXT, DepartmentID NUMBER); CREATE TABLE Room (BlockFloor NUMBER, RoomNumber NUMBER, RoomType TEXT, BlockCode NUMBER); CREATE TABLE Physician (EmployeeID NUMBER); CREATE TABLE Stay (Room NUMBER); CREATE TABLE Block (BlockFloor NUMBER, BlockCode NUMBER); CREATE TABLE Appointment (ExaminationRoom TEXT);"
      },
      {
        "question": "What are the room numbers for Block Code 1?",
        "query": "SELECT t2.roomnumber FROM BLOCK AS t1 JOIN room AS t2 ON t1.blockfloor = t2.blockfloor AND t1.blockcode = t2.blockcode WHERE t1.blockcode = 1",
        "schema": "CREATE TABLE Physician (EmployeeID NUMBER); CREATE TABLE Room (BlockFloor NUMBER, RoomType TEXT, RoomNumber NUMBER, BlockCode NUMBER); CREATE TABLE Stay (Room NUMBER); CREATE TABLE Department (Name TEXT, Head NUMBER, DepartmentID NUMBER); CREATE TABLE Block (BlockFloor NUMBER, BlockCode NUMBER); CREATE TABLE Appointment (ExaminationRoom TEXT);"
      },
      {
        "question": "What is the block code for room 201?",
        "query": "SELECT t1.blockcode FROM BLOCK AS t1 JOIN room AS t2 ON t1.blockfloor = t2.blockfloor AND t1.blockcode = t2.blockcode WHERE t2.roomnumber = 201",
        "schema": "CREATE TABLE Block (BlockFloor NUMBER, BlockCode NUMBER); CREATE TABLE Room (RoomType TEXT, BlockFloor NUMBER, RoomNumber NUMBER, BlockCode NUMBER); CREATE TABLE Appointment (ExaminationRoom TEXT); CREATE TABLE Physician (EmployeeID NUMBER); CREATE TABLE Department (Head NUMBER, DepartmentID NUMBER, Name TEXT); CREATE TABLE Stay (Room NUMBER);"
      },
      {
        "question": "What is the room type for room 101?",
        "query": "SELECT roomtype FROM room WHERE roomnumber = 101",
        "schema": "CREATE TABLE Stay (Room NUMBER); CREATE TABLE Department (Head NUMBER, Name TEXT, DepartmentID NUMBER); CREATE TABLE Physician (EmployeeID NUMBER); CREATE TABLE Block (BlockFloor NUMBER, BlockCode NUMBER); CREATE TABLE Room (RoomType TEXT, RoomNumber NUMBER, BlockFloor NUMBER, BlockCode NUMBER); CREATE TABLE Appointment (ExaminationRoom TEXT);"
      }
    ],
    [
      {
        "question": "how many physicians are presented on the table",
        "query": "SELECT COUNT ( * ) FROM physician",
        "schema": "CREATE TABLE Prescribes (Physician NUMBER); CREATE TABLE Undergoes (Physician NUMBER); CREATE TABLE Stay (Patient NUMBER); CREATE TABLE Nurse (EmployeeID NUMBER); CREATE TABLE Patient (PCP NUMBER, SSN NUMBER); CREATE TABLE Physician (SSN NUMBER, Position TEXT, Name TEXT, EmployeeID NUMBER); CREATE TABLE Trained_In (Physician NUMBER); CREATE TABLE Appointment (Physician NUMBER);"
      },
      {
        "question": "show all the procedures on the table | Did you want all the procedure names? | exactly",
        "query": "SELECT name FROM procedures",
        "schema": "CREATE TABLE Nurse (EmployeeID NUMBER); CREATE TABLE Undergoes (Physician NUMBER); CREATE TABLE Prescribes (Physician NUMBER); CREATE TABLE Stay (Patient NUMBER); CREATE TABLE Patient (Name TEXT, PCP NUMBER, SSN NUMBER); CREATE TABLE Appointment (Physician NUMBER); CREATE TABLE Physician (Position TEXT, Name TEXT, SSN NUMBER, EmployeeID NUMBER); CREATE TABLE Procedures (Code NUMBER, Cost NUMBER, Name TEXT); CREATE TABLE Trained_In (Physician NUMBER);"
      },
      {
        "question": "what is the position of John Dorian",
        "query": "SELECT POSITION FROM physician WHERE name = \"John Dorian\"",
        "schema": "CREATE TABLE Undergoes (Physician NUMBER); CREATE TABLE Patient (SSN NUMBER, PCP NUMBER, Name TEXT); CREATE TABLE Stay (Patient NUMBER); CREATE TABLE Prescribes (Physician NUMBER); CREATE TABLE Physician (Name TEXT, SSN NUMBER, EmployeeID NUMBER, Position TEXT); CREATE TABLE Nurse (Name TEXT, EmployeeID NUMBER, Position TEXT); CREATE TABLE Trained_In (Physician NUMBER); CREATE TABLE Appointment (Physician NUMBER); CREATE TABLE Procedures (Cost NUMBER, Code NUMBER, Name TEXT);"
      },
      {
        "question": "what is the cost of Reverse Rhinopodoplasty",
        "query": "SELECT cost FROM procedures WHERE name = \"Reverse Rhinopodoplasty\"",
        "schema": "CREATE TABLE Physician (Name TEXT, EmployeeID NUMBER, SSN NUMBER, Position TEXT); CREATE TABLE Procedures (Code NUMBER, Cost NUMBER, Name TEXT); CREATE TABLE Trained_In (Physician NUMBER); CREATE TABLE Medication (Name TEXT); CREATE TABLE Patient (SSN NUMBER, PCP NUMBER, Name TEXT); CREATE TABLE Appointment (Physician NUMBER); CREATE TABLE Prescribes (Physician NUMBER); CREATE TABLE Undergoes (Physician NUMBER); CREATE TABLE Nurse (EmployeeID NUMBER, Position TEXT, Name TEXT); CREATE TABLE Department (Name TEXT, Head NUMBER); CREATE TABLE Stay (Patient NUMBER);"
      }
    ],
    [
      {
        "question": "what departments are some physicians primarily affiliated with?",
        "query": "SELECT DISTINCT t2.name FROM affiliated_with AS t1 JOIN department AS t2 ON t1.department = t2.departmentid WHERE primaryaffiliation = 1",
        "schema": "CREATE TABLE Stay (StayID NUMBER); CREATE TABLE Physician (SSN NUMBER, Name TEXT, EmployeeID NUMBER); CREATE TABLE Appointment (Physician NUMBER); CREATE TABLE Affiliated_With (Department NUMBER, Physician NUMBER, PrimaryAffiliation BOOLEAN); CREATE TABLE Department (DepartmentID NUMBER, Name TEXT, Head NUMBER); CREATE TABLE Trained_In (Physician NUMBER); CREATE TABLE Patient (SSN NUMBER); CREATE TABLE Nurse (EmployeeID NUMBER);"
      },
      {
        "question": "what is the department id for surgery?",
        "query": "SELECT departmentid FROM department WHERE name = \"Surgery\"",
        "schema": "CREATE TABLE Affiliated_With (Physician NUMBER, Department NUMBER, PrimaryAffiliation BOOLEAN); CREATE TABLE Appointment (Physician NUMBER); CREATE TABLE Stay (StayID NUMBER); CREATE TABLE Nurse (EmployeeID NUMBER); CREATE TABLE Trained_In (Physician NUMBER); CREATE TABLE Physician (Name TEXT, SSN NUMBER, EmployeeID NUMBER); CREATE TABLE Department (Head NUMBER, Name TEXT, DepartmentID NUMBER); CREATE TABLE Patient (SSN NUMBER);"
      }
    ],
    [
      {
        "question": "Can you show me how many rooms are there in total?",
        "query": "SELECT COUNT ( * ) FROM room",
        "schema": "CREATE TABLE Appointment (ExaminationRoom TEXT); CREATE TABLE Stay (Room NUMBER); CREATE TABLE Physician (EmployeeID NUMBER); CREATE TABLE Room (RoomType TEXT, RoomNumber NUMBER); CREATE TABLE Department (DepartmentID NUMBER); CREATE TABLE Patient (SSN NUMBER, PCP NUMBER); CREATE TABLE Nurse (EmployeeID NUMBER);"
      },
      {
        "question": "How about the total number of block codes?",
        "query": "SELECT COUNT ( DISTINCT blockcode ) FROM room",
        "schema": "CREATE TABLE Room (RoomType TEXT, BlockFloor NUMBER, BlockCode NUMBER, RoomNumber NUMBER); CREATE TABLE Patient (SSN NUMBER, PCP NUMBER); CREATE TABLE Physician (EmployeeID NUMBER); CREATE TABLE Stay (Room NUMBER); CREATE TABLE Nurse (EmployeeID NUMBER); CREATE TABLE Department (DepartmentID NUMBER); CREATE TABLE Appointment (ExaminationRoom TEXT); CREATE TABLE Block (BlockFloor NUMBER, BlockCode NUMBER);"
      },
      {
        "question": "Can you list them by the number of rooms in decending order? | Do you mean roomnumber? | Yes",
        "query": "SELECT blockcode FROM room ORDER BY roomnumber DESC",
        "schema": "CREATE TABLE Room (BlockFloor NUMBER, RoomType TEXT, BlockCode NUMBER, RoomNumber NUMBER); CREATE TABLE Patient (SSN NUMBER, PCP NUMBER); CREATE TABLE Block (BlockCode NUMBER, BlockFloor NUMBER); CREATE TABLE Appointment (ExaminationRoom TEXT); CREATE TABLE Nurse (EmployeeID NUMBER); CREATE TABLE Department (DepartmentID NUMBER); CREATE TABLE Physician (EmployeeID NUMBER); CREATE TABLE Stay (Room NUMBER);"
      }
    ],
    [
      {
        "question": "I'm looking for a patient. | What feature do you want? | I want to know their room number.",
        "query": "SELECT room FROM stay",
        "schema": "CREATE TABLE Room (RoomNumber NUMBER, BlockFloor NUMBER, BlockCode NUMBER); CREATE TABLE Physician (EmployeeID NUMBER); CREATE TABLE Prescribes (Patient NUMBER); CREATE TABLE Undergoes (Patient NUMBER); CREATE TABLE Stay (StayID NUMBER, Room NUMBER, Patient NUMBER); CREATE TABLE Appointment (ExaminationRoom TEXT, Patient NUMBER); CREATE TABLE Patient (SSN NUMBER, Name TEXT, PCP NUMBER, Address TEXT); CREATE TABLE Nurse (EmployeeID NUMBER);"
      },
      {
        "question": "What is the patient's name in room 111?",
        "query": "SELECT t1.name FROM stay AS t4 JOIN patient AS t1 WHERE t4.patient = t1.ssn AND t4.room = 111",
        "schema": "CREATE TABLE Nurse (EmployeeID NUMBER); CREATE TABLE Room (BlockFloor NUMBER, RoomNumber NUMBER, RoomType TEXT, BlockCode NUMBER); CREATE TABLE Stay (Patient NUMBER, Room NUMBER, StayID NUMBER, StayStart TIME); CREATE TABLE Appointment (Patient NUMBER, ExaminationRoom TEXT); CREATE TABLE Prescribes (Patient NUMBER); CREATE TABLE Undergoes (Patient NUMBER); CREATE TABLE Physician (EmployeeID NUMBER); CREATE TABLE Patient (Address TEXT, PCP NUMBER, SSN NUMBER, Name TEXT);"
      },
      {
        "question": "What is the name and dose of the medication?",
        "query": "SELECT DISTINCT t4.name, t3.dose FROM stay AS t1 JOIN patient AS t2 ON t1.patient = t2.ssn JOIN prescribes AS t3 ON t3.patient = t2.ssn JOIN medication AS t4 ON t3.medication = t4.code WHERE t2.name = 'John Smith'",
        "schema": "CREATE TABLE Undergoes (Patient NUMBER); CREATE TABLE Appointment (Patient NUMBER, ExaminationRoom TEXT); CREATE TABLE Nurse (EmployeeID NUMBER); CREATE TABLE Medication (Brand TEXT, Code NUMBER, Name TEXT); CREATE TABLE Patient (Name TEXT, Address TEXT, SSN NUMBER, PCP NUMBER); CREATE TABLE Room (BlockFloor NUMBER, BlockCode NUMBER, RoomNumber NUMBER, RoomType TEXT); CREATE TABLE Physician (EmployeeID NUMBER); CREATE TABLE Prescribes (Dose TEXT, Medication NUMBER, Patient NUMBER); CREATE TABLE Stay (StayID NUMBER, Room NUMBER, Patient NUMBER, StayStart TIME);"
      }
    ],
    [
      {
        "question": "I would like to know the names of all the physicians",
        "query": "SELECT name FROM physician",
        "schema": "CREATE TABLE Undergoes (Physician NUMBER); CREATE TABLE Stay (Patient NUMBER, StayID NUMBER); CREATE TABLE Patient (PCP NUMBER, Name TEXT, SSN NUMBER); CREATE TABLE Physician (SSN NUMBER, EmployeeID NUMBER, Name TEXT, Position TEXT); CREATE TABLE Nurse (EmployeeID NUMBER, Name TEXT); CREATE TABLE Medication (Name TEXT); CREATE TABLE Trained_In (Physician NUMBER); CREATE TABLE Appointment (Physician NUMBER);"
      },
      {
        "question": "wonderful, looks like nine total.  approximately how many patients do each of them take care of? | Would you like to know average patients corresponding to each physician? | if you could please share the average total patient per physician the would be helpful.",
        "query": "SELECT t1.name , COUNT ( * ) FROM physician AS t1 JOIN patient AS t2 ON t1.employeeid = t2.pcp GROUP BY t1.employeeid",
        "schema": "CREATE TABLE Medication (Name TEXT); CREATE TABLE Patient (SSN NUMBER, PCP NUMBER, Name TEXT); CREATE TABLE Stay (StayID NUMBER, Patient NUMBER); CREATE TABLE Nurse (Name TEXT, EmployeeID NUMBER); CREATE TABLE Trained_In (Physician NUMBER); CREATE TABLE Undergoes (Physician NUMBER); CREATE TABLE Prescribes (Patient NUMBER); CREATE TABLE Physician (Name TEXT, SSN NUMBER, Position TEXT, EmployeeID NUMBER); CREATE TABLE Appointment (Physician NUMBER, Patient NUMBER);"
      },
      {
        "question": "which of the physicians have zero patients?",
        "query": "SELECT name FROM physician WHERE name NOT IN ( SELECT t1.name FROM physician AS t1 JOIN patient AS t2 ON t1.employeeid = t2.pcp )",
        "schema": "CREATE TABLE Undergoes (Physician NUMBER); CREATE TABLE Nurse (Name TEXT, EmployeeID NUMBER); CREATE TABLE Medication (Name TEXT); CREATE TABLE Trained_In (Physician NUMBER); CREATE TABLE Stay (Patient NUMBER, StayID NUMBER); CREATE TABLE Prescribes (Patient NUMBER); CREATE TABLE Patient (SSN NUMBER, PCP NUMBER, Name TEXT); CREATE TABLE Physician (Position TEXT, EmployeeID NUMBER, Name TEXT, SSN NUMBER); CREATE TABLE Appointment (Physician NUMBER, Patient NUMBER);"
      }
    ],
    [
      {
        "question": "Hello!  How are you!  Can you provide me with a list of all patient names?",
        "query": "SELECT name FROM patient",
        "schema": "CREATE TABLE Undergoes (Patient NUMBER); CREATE TABLE Prescribes (Patient NUMBER); CREATE TABLE Physician (EmployeeID NUMBER); CREATE TABLE Stay (StayID NUMBER, Patient NUMBER); CREATE TABLE Appointment (Patient NUMBER); CREATE TABLE Patient (Name TEXT, SSN NUMBER, PCP NUMBER); CREATE TABLE Nurse (EmployeeID NUMBER, Name TEXT);"
      },
      {
        "question": "Thank you so much!  Can you filter this list to show only the patients who had more than one appointment?",
        "query": "SELECT name FROM appointment AS t1 JOIN patient AS t2 ON t1.patient = t2.ssn GROUP BY t1.patient HAVING COUNT ( * ) > 1",
        "schema": "CREATE TABLE Nurse (EmployeeID NUMBER, Name TEXT); CREATE TABLE Physician (EmployeeID NUMBER); CREATE TABLE Stay (Patient NUMBER, StayID NUMBER); CREATE TABLE Patient (PCP NUMBER, SSN NUMBER, Name TEXT); CREATE TABLE Prescribes (Appointment NUMBER, Patient NUMBER); CREATE TABLE Appointment (Start TIME, AppointmentID NUMBER, Patient NUMBER, PrepNurse NUMBER); CREATE TABLE Undergoes (Patient NUMBER);"
      },
      {
        "question": "Great! Can you update this list to include the phone number of each of these patients?",
        "query": "SELECT name , phone FROM appointment AS t1 JOIN patient AS t2 ON t1.patient = t2.ssn GROUP BY t1.patient HAVING COUNT ( * ) > 1",
        "schema": "CREATE TABLE Stay (StayID NUMBER, Patient NUMBER); CREATE TABLE Nurse (Name TEXT, EmployeeID NUMBER); CREATE TABLE Patient (Name TEXT, Phone TEXT, SSN NUMBER, PCP NUMBER); CREATE TABLE Prescribes (Patient NUMBER, Appointment NUMBER); CREATE TABLE Physician (EmployeeID NUMBER); CREATE TABLE Appointment (Patient NUMBER, PrepNurse NUMBER, Start TIME, AppointmentID NUMBER); CREATE TABLE Undergoes (Patient NUMBER);"
      }
    ],
    [
      {
        "question": "What was the start date of the most recent appointment?",
        "query": "SELECT START FROM appointment ORDER BY START ASC LIMIT 1",
        "schema": "CREATE TABLE Appointment (Physician NUMBER, Start TIME, End TIME, AppointmentID NUMBER, PrepNurse NUMBER); CREATE TABLE Patient (SSN NUMBER); CREATE TABLE Physician (EmployeeID NUMBER); CREATE TABLE Prescribes (Appointment NUMBER, Date TIME);"
      },
      {
        "question": "What is the patient associated with the appointment on 2008-04-24 10:00?",
        "query": "SELECT patient FROM appointment WHERE START = '2008-04-24 10:00'",
        "schema": "CREATE TABLE Stay (Patient NUMBER); CREATE TABLE Patient (Name TEXT, PCP NUMBER, SSN NUMBER); CREATE TABLE Prescribes (Date TIME, Appointment NUMBER); CREATE TABLE Physician (EmployeeID NUMBER); CREATE TABLE Appointment (Start TIME, Patient NUMBER, AppointmentID NUMBER, PrepNurse NUMBER, End TIME, Physician NUMBER);"
      },
      {
        "question": "Can you list the patient IDs associated with appointment IDs 93216548 and 86213939?",
        "query": "SELECT patient FROM appointment WHERE appointmentid = 93216548 OR appointmentid = 86213939",
        "schema": "CREATE TABLE Prescribes (Date TIME, Appointment NUMBER); CREATE TABLE Patient (PCP NUMBER, SSN NUMBER, Name TEXT); CREATE TABLE Stay (Patient NUMBER); CREATE TABLE Physician (EmployeeID NUMBER); CREATE TABLE Appointment (End TIME, Start TIME, Physician NUMBER, PrepNurse NUMBER, Patient NUMBER, AppointmentID NUMBER);"
      },
      {
        "question": "Can you list the names associated with those patient ID 100000004 and 100000002?",
        "query": "SELECT DISTINCT ( t1.name ) FROM patient AS t1 JOIN appointment AS t2 ON t1.ssn = t2.patient WHERE t2.patient = 100000004 OR t2.patient = 100000002",
        "schema": "CREATE TABLE Appointment (Physician NUMBER, Start TIME, PrepNurse NUMBER, Patient NUMBER, End TIME, AppointmentID NUMBER); CREATE TABLE Prescribes (Date TIME, Appointment NUMBER); CREATE TABLE Patient (Name TEXT, SSN NUMBER, PCP NUMBER); CREATE TABLE Stay (Patient NUMBER); CREATE TABLE Physician (EmployeeID NUMBER);"
      }
    ],
    [
      {
        "question": "When was the most recent appointment? | do you want the most recent start or end of appointment | Start",
        "query": "SELECT appointmentid FROM appointment ORDER BY START DESC LIMIT 1",
        "schema": "CREATE TABLE Prescribes (Appointment NUMBER); CREATE TABLE Physician (EmployeeID NUMBER); CREATE TABLE Appointment (Start TIME, AppointmentID NUMBER, PrepNurse NUMBER, Physician NUMBER, End TIME);"
      },
      {
        "question": "What is the patient id of that appointment?",
        "query": "SELECT patient FROM appointment ORDER BY START DESC LIMIT 1",
        "schema": "CREATE TABLE Physician (EmployeeID NUMBER); CREATE TABLE Stay (Patient NUMBER); CREATE TABLE Prescribes (Patient NUMBER, Appointment NUMBER); CREATE TABLE Patient (PCP NUMBER, SSN NUMBER); CREATE TABLE Appointment (Physician NUMBER, AppointmentID NUMBER, Start TIME, PrepNurse NUMBER, Patient NUMBER, End TIME);"
      },
      {
        "question": "What is their name?",
        "query": "SELECT t1.name FROM patient AS t1 JOIN appointment AS t2 ON t1.ssn = t2.patient ORDER BY t2.start DESC LIMIT 1",
        "schema": "CREATE TABLE Stay (Patient NUMBER); CREATE TABLE Prescribes (Patient NUMBER, Appointment NUMBER); CREATE TABLE Physician (Name TEXT, EmployeeID NUMBER); CREATE TABLE Department (Head NUMBER, Name TEXT); CREATE TABLE Appointment (Start TIME, Patient NUMBER, AppointmentID NUMBER, End TIME, Physician NUMBER, PrepNurse NUMBER); CREATE TABLE Patient (SSN NUMBER, Name TEXT, PCP NUMBER); CREATE TABLE Nurse (Name TEXT);"
      }
    ],
    [
      {
        "question": "Show me the names of all the physicians?",
        "query": "SELECT name FROM physician",
        "schema": "CREATE TABLE Physician (Position TEXT, EmployeeID NUMBER, SSN NUMBER, Name TEXT); CREATE TABLE Medication (Name TEXT); CREATE TABLE Nurse (Name TEXT, EmployeeID NUMBER); CREATE TABLE Appointment (Physician NUMBER); CREATE TABLE Undergoes (Physician NUMBER); CREATE TABLE Patient (SSN NUMBER, PCP NUMBER, Name TEXT);"
      },
      {
        "question": "Show me the ssn of the physician named John Dorian?",
        "query": "SELECT ssn FROM physician WHERE name = 'John Dorian'",
        "schema": "CREATE TABLE Medication (Name TEXT); CREATE TABLE Undergoes (Physician NUMBER); CREATE TABLE Trained_In (Physician NUMBER); CREATE TABLE Nurse (Name TEXT, SSN NUMBER, EmployeeID NUMBER); CREATE TABLE Physician (Position TEXT, EmployeeID NUMBER, SSN NUMBER, Name TEXT); CREATE TABLE Patient (SSN NUMBER, PCP NUMBER, Name TEXT); CREATE TABLE Appointment (Physician NUMBER);"
      },
      {
        "question": "Show me the name of the physician with employee id 2?",
        "query": "SELECT name FROM physician WHERE employeeid = 2",
        "schema": "CREATE TABLE Patient (SSN NUMBER, Name TEXT, PCP NUMBER); CREATE TABLE Appointment (Physician NUMBER); CREATE TABLE Undergoes (Physician NUMBER); CREATE TABLE Physician (Name TEXT, EmployeeID NUMBER, SSN NUMBER, Position TEXT); CREATE TABLE Medication (Name TEXT); CREATE TABLE Trained_In (Physician NUMBER); CREATE TABLE Nurse (SSN NUMBER, Name TEXT, EmployeeID NUMBER);"
      },
      {
        "question": "Show me the names of the physician who prescribed the highest dose?",
        "query": "SELECT t1.name FROM physician AS t1 JOIN prescribes AS t2 ON t1.employeeid = t2.physician ORDER BY t2.dose DESC LIMIT 1",
        "schema": "CREATE TABLE Patient (Name TEXT, PCP NUMBER, SSN NUMBER); CREATE TABLE Appointment (Physician NUMBER); CREATE TABLE Prescribes (Medication NUMBER, Physician NUMBER, Dose TEXT); CREATE TABLE Medication (Name TEXT); CREATE TABLE Trained_In (Physician NUMBER); CREATE TABLE Nurse (Name TEXT, SSN NUMBER, EmployeeID NUMBER); CREATE TABLE Physician (Name TEXT, EmployeeID NUMBER, SSN NUMBER, Position TEXT); CREATE TABLE Undergoes (Physician NUMBER);"
      }
    ],
    [
      {
        "question": "How many physicians are there in total?",
        "query": "SELECT COUNT ( * ) FROM physician",
        "schema": "CREATE TABLE Prescribes (Physician NUMBER); CREATE TABLE Appointment (Physician NUMBER, AppointmentID NUMBER); CREATE TABLE Nurse (EmployeeID NUMBER); CREATE TABLE Patient (SSN NUMBER, PCP NUMBER); CREATE TABLE Undergoes (Physician NUMBER); CREATE TABLE Trained_In (Physician NUMBER, CertificationExpires TIME, Treatment NUMBER); CREATE TABLE Department (DepartmentID NUMBER, Head NUMBER); CREATE TABLE Affiliated_With (Physician NUMBER); CREATE TABLE Stay (StayID NUMBER, Patient NUMBER); CREATE TABLE Physician (EmployeeID NUMBER, Name TEXT, Position TEXT, SSN NUMBER);"
      },
      {
        "question": "What are their names?",
        "query": "SELECT name FROM physician",
        "schema": "CREATE TABLE Stay (StayID NUMBER, Patient NUMBER); CREATE TABLE Patient (PCP NUMBER, Name TEXT, SSN NUMBER); CREATE TABLE Appointment (AppointmentID NUMBER, Physician NUMBER); CREATE TABLE Nurse (EmployeeID NUMBER, Name TEXT); CREATE TABLE Undergoes (Physician NUMBER); CREATE TABLE Prescribes (Physician NUMBER); CREATE TABLE Affiliated_With (Physician NUMBER); CREATE TABLE Department (DepartmentID NUMBER, Head NUMBER); CREATE TABLE Trained_In (Treatment NUMBER, Physician NUMBER, CertificationExpires TIME); CREATE TABLE Physician (SSN NUMBER, EmployeeID NUMBER, Position TEXT, Name TEXT);"
      },
      {
        "question": "Which of their position titles contain the word senior in it?",
        "query": "SELECT POSITION FROM physician WHERE POSITION LIKE '%senior%'",
        "schema": "CREATE TABLE Appointment (AppointmentID NUMBER, Physician NUMBER); CREATE TABLE Patient (SSN NUMBER, PCP NUMBER, Name TEXT); CREATE TABLE Stay (Patient NUMBER, StayID NUMBER); CREATE TABLE Prescribes (Physician NUMBER); CREATE TABLE Department (Head NUMBER, DepartmentID NUMBER); CREATE TABLE Physician (Name TEXT, SSN NUMBER, Position TEXT, EmployeeID NUMBER); CREATE TABLE Undergoes (Physician NUMBER); CREATE TABLE Trained_In (Treatment NUMBER, Physician NUMBER, CertificationExpires TIME); CREATE TABLE Affiliated_With (Physician NUMBER); CREATE TABLE Nurse (Name TEXT, Position TEXT, EmployeeID NUMBER);"
      },
      {
        "question": "What is the name of that physician who has the Senior Attending Physician title?",
        "query": "SELECT name FROM physician WHERE POSITION LIKE '%senior%'",
        "schema": "CREATE TABLE Undergoes (Physician NUMBER); CREATE TABLE Stay (StayID NUMBER, Patient NUMBER); CREATE TABLE Nurse (Position TEXT, EmployeeID NUMBER, Name TEXT); CREATE TABLE Appointment (Physician NUMBER, AppointmentID NUMBER); CREATE TABLE Department (DepartmentID NUMBER, Head NUMBER); CREATE TABLE Affiliated_With (Physician NUMBER); CREATE TABLE Prescribes (Physician NUMBER); CREATE TABLE Trained_In (Physician NUMBER, Treatment NUMBER, CertificationExpires TIME); CREATE TABLE Patient (SSN NUMBER, PCP NUMBER, Name TEXT); CREATE TABLE Physician (Position TEXT, SSN NUMBER, Name TEXT, EmployeeID NUMBER);"
      }
    ],
    [
      {
        "question": "What procedures is John Wen trained in? | Do you mean the name of the procedure that John Wen is trained in? | Yes.",
        "query": "SELECT t3.name FROM physician AS t1 JOIN trained_in AS t2 ON t1.employeeid = t2.physician JOIN procedures AS t3 ON t3.code = t2.treatment WHERE t1.name = \"John Wen\"",
        "schema": "CREATE TABLE Patient (PCP NUMBER, Name TEXT, SSN NUMBER); CREATE TABLE Undergoes (Procedures NUMBER); CREATE TABLE Physician (EmployeeID NUMBER, Name TEXT, SSN NUMBER, Position TEXT); CREATE TABLE Nurse (SSN NUMBER, Name TEXT, EmployeeID NUMBER); CREATE TABLE Trained_In (Treatment NUMBER, CertificationExpires TIME, Physician NUMBER); CREATE TABLE Procedures (Name TEXT, Code NUMBER, Cost NUMBER);"
      }
    ],
    [
      {
        "question": "What is the id of the appointment with the most recent start date?",
        "query": "SELECT appointmentid FROM appointment ORDER BY START DESC LIMIT 1",
        "schema": "CREATE TABLE Prescribes (Appointment NUMBER); CREATE TABLE Physician (EmployeeID NUMBER); CREATE TABLE Undergoes (DateUndergoes TIME); CREATE TABLE Patient (SSN NUMBER); CREATE TABLE Appointment (AppointmentID NUMBER, PrepNurse NUMBER, Start TIME, Physician NUMBER); CREATE TABLE Nurse (EmployeeID NUMBER); CREATE TABLE Procedures (Code NUMBER); CREATE TABLE Stay (Patient NUMBER, StayID NUMBER);"
      },
      {
        "question": "What was the end time of that appointment?",
        "query": "SELECT END FROM appointment ORDER BY START DESC LIMIT 1",
        "schema": "CREATE TABLE Stay (StayID NUMBER, Patient NUMBER); CREATE TABLE Appointment (AppointmentID NUMBER, Start TIME, End TIME, Physician NUMBER, PrepNurse NUMBER); CREATE TABLE Undergoes (DateUndergoes TIME); CREATE TABLE Physician (EmployeeID NUMBER); CREATE TABLE Prescribes (Appointment NUMBER); CREATE TABLE Procedures (Code NUMBER); CREATE TABLE Nurse (EmployeeID NUMBER); CREATE TABLE Patient (SSN NUMBER);"
      },
      {
        "question": "Who was the prep nurse of that appointment?",
        "query": "SELECT prepnurse FROM appointment ORDER BY START DESC LIMIT 1",
        "schema": "CREATE TABLE Appointment (PrepNurse NUMBER, Physician NUMBER, End TIME, Start TIME, AppointmentID NUMBER); CREATE TABLE On_Call (Nurse NUMBER); CREATE TABLE Physician (EmployeeID NUMBER); CREATE TABLE Nurse (Position TEXT, SSN NUMBER, Name TEXT, EmployeeID NUMBER); CREATE TABLE Stay (Patient NUMBER, StayID NUMBER); CREATE TABLE Undergoes (DateUndergoes TIME, AssistingNurse NUMBER); CREATE TABLE Procedures (Code NUMBER); CREATE TABLE Patient (SSN NUMBER); CREATE TABLE Prescribes (Appointment NUMBER);"
      }
    ],
    [
      {
        "question": "Find the patient order by the date they underwent treatment. Recent first.",
        "query": "SELECT patient FROM undergoes ORDER BY dateundergoes DESC",
        "schema": "CREATE TABLE Appointment (Patient NUMBER); CREATE TABLE Undergoes (Physician NUMBER, Patient NUMBER, DateUndergoes TIME, Stay NUMBER); CREATE TABLE Physician (EmployeeID NUMBER); CREATE TABLE Patient (Name TEXT, SSN NUMBER, PCP NUMBER); CREATE TABLE Stay (StayID NUMBER, Patient NUMBER);"
      },
      {
        "question": "Only show the first result.",
        "query": "SELECT patient FROM undergoes ORDER BY dateundergoes DESC LIMIT 1",
        "schema": "CREATE TABLE Stay (StayID NUMBER, Patient NUMBER); CREATE TABLE Appointment (Patient NUMBER); CREATE TABLE Undergoes (DateUndergoes TIME, Patient NUMBER, Stay NUMBER, Physician NUMBER); CREATE TABLE Patient (Name TEXT, PCP NUMBER, SSN NUMBER); CREATE TABLE Physician (EmployeeID NUMBER);"
      }
    ]
  ],
  "assets_maintenance": [
    [
      {
        "question": "Can you list all the unique fault log entry ids?",
        "query": "SELECT DISTINCT fault_log_entry_id FROM fault_log",
        "schema": "CREATE TABLE Part_Faults (part_fault_id NUMBER, fault_short_name TEXT); CREATE TABLE Engineer_Visits (fault_log_entry_id NUMBER); CREATE TABLE Fault_Log (fault_log_entry_id NUMBER, asset_id NUMBER); CREATE TABLE Fault_Log_Parts (part_fault_id NUMBER, fault_status TEXT, fault_log_entry_id NUMBER);"
      },
      {
        "question": "Can you count the number of unique part fault ids that belong to each unique fault log entry id, and then add those values to the table?",
        "query": "SELECT fault_log_entry_id, COUNT ( * ) FROM fault_log_parts GROUP BY fault_log_entry_id",
        "schema": "CREATE TABLE Engineer_Visits (fault_log_entry_id NUMBER); CREATE TABLE Fault_Log_Parts (fault_log_entry_id NUMBER, part_fault_id NUMBER, fault_status TEXT); CREATE TABLE Fault_Log (fault_log_entry_id NUMBER, asset_id NUMBER); CREATE TABLE Part_Faults (fault_short_name TEXT, part_fault_id NUMBER, part_id NUMBER); CREATE TABLE Parts (part_id NUMBER);"
      },
      {
        "question": "Amazing, can you display only the entry with a fault log id of 1 as well as the description and record time for that entry with a fault log id of 1?",
        "query": "SELECT COUNT ( * ) , *, t1.fault_description , t1.fault_log_entry_datetime FROM fault_log AS t1 JOIN fault_log_parts AS t2 ON t1.fault_log_entry_id = t2.fault_log_entry_id WHERE t1.fault_log_entry_id = 1 GROUP BY t1.fault_log_entry_id ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Fault_Log (fault_description TEXT, asset_id NUMBER, fault_log_entry_datetime TIME, fault_log_entry_id NUMBER); CREATE TABLE Fault_Log_Parts (fault_log_entry_id NUMBER, part_fault_id NUMBER, fault_status TEXT); CREATE TABLE Part_Faults (fault_short_name TEXT, part_id NUMBER, part_fault_id NUMBER, fault_description TEXT); CREATE TABLE Parts (part_id NUMBER); CREATE TABLE Engineer_Visits (fault_log_entry_id NUMBER);"
      }
    ],
    [
      {
        "question": "which engineer made the least number of visits? | Here are the id, first, and last names of the engineer who has the least number of visits. | how many visits did each engineer have?",
        "query": "SELECT COUNT ( * ) ,t1.engineer_id FROM maintenance_engineers AS t1 JOIN engineer_visits AS t2 ON t1.engineer_id = t2.engineer_id GROUP BY t1.engineer_id",
        "schema": "CREATE TABLE Engineer_Skills (engineer_id NUMBER); CREATE TABLE Engineer_Visits (engineer_visit_id NUMBER, other_visit_details TEXT, contact_staff_id NUMBER, engineer_id NUMBER); CREATE TABLE Maintenance_Engineers (last_name TEXT, first_name TEXT, engineer_id NUMBER);"
      },
      {
        "question": "can you list the engineer id, first name, and last name of the engineer who had the least number of visits?",
        "query": "SELECT t1.engineer_id , t1.first_name , t1.last_name ,COUNT ( * ) FROM maintenance_engineers AS t1 JOIN engineer_visits AS t2 ON t1.engineer_id = t2.engineer_id GROUP BY t1.engineer_id ORDER BY COUNT ( * ) LIMIT 1",
        "schema": "CREATE TABLE Engineer_Skills (engineer_id NUMBER); CREATE TABLE Maintenance_Engineers (company_id NUMBER, last_name TEXT, engineer_id NUMBER, first_name TEXT); CREATE TABLE Engineer_Visits (engineer_id NUMBER, engineer_visit_id NUMBER, contact_staff_id NUMBER, other_visit_details TEXT);"
      }
    ],
    [
      {
        "question": "Which part has the least faults?",
        "query": "SELECT t1.part_name FROM parts AS t1 JOIN part_faults AS t2 ON t1.part_id = t2.part_id GROUP BY t1.part_name ORDER BY COUNT ( * ) ASC LIMIT 1",
        "schema": "CREATE TABLE Parts (part_id NUMBER, part_name TEXT, other_part_details TEXT); CREATE TABLE Fault_Log_Parts (fault_log_entry_id NUMBER, part_fault_id NUMBER); CREATE TABLE Part_Faults (part_id NUMBER, other_fault_details TEXT, fault_short_name TEXT, part_fault_id NUMBER, fault_description TEXT); CREATE TABLE Asset_Parts (asset_id NUMBER, part_id NUMBER); CREATE TABLE Fault_Log (fault_log_entry_id NUMBER); CREATE TABLE Skills (skill_id NUMBER); CREATE TABLE Maintenance_Engineers (engineer_id NUMBER); CREATE TABLE Assets (asset_id NUMBER); CREATE TABLE Skills_Required_To_Fix (part_fault_id NUMBER, skill_id NUMBER);"
      },
      {
        "question": "How many faults does the middle have?",
        "query": "SELECT t1.part_name, COUNT ( * ) FROM parts AS t1 JOIN part_faults AS t2 ON t1.part_id = t2.part_id WHERE t1.part_name = \"middle\"",
        "schema": "CREATE TABLE Parts (part_id NUMBER, part_name TEXT, other_part_details TEXT); CREATE TABLE Maintenance_Engineers (engineer_id NUMBER); CREATE TABLE Assets (asset_id NUMBER); CREATE TABLE Skills_Required_To_Fix (part_fault_id NUMBER, skill_id NUMBER); CREATE TABLE Part_Faults (part_fault_id NUMBER, fault_short_name TEXT, other_fault_details TEXT, part_id NUMBER, fault_description TEXT); CREATE TABLE Asset_Parts (part_id NUMBER, asset_id NUMBER); CREATE TABLE Fault_Log (fault_log_entry_id NUMBER); CREATE TABLE Skills (skill_id NUMBER); CREATE TABLE Fault_Log_Parts (part_fault_id NUMBER, fault_log_entry_id NUMBER);"
      },
      {
        "question": "What faults does the middle have?",
        "query": "SELECT fault_short_name FROM part_faults WHERE part_id IN ( SELECT t2.part_id FROM parts AS t1 JOIN part_faults AS t2 ON t1.part_id = t2.part_id GROUP BY t1.part_name ORDER BY COUNT ( * ) ASC LIMIT 1 )",
        "schema": "CREATE TABLE Fault_Log (fault_log_entry_id NUMBER); CREATE TABLE Assets (asset_id NUMBER); CREATE TABLE Asset_Parts (asset_id NUMBER, part_id NUMBER); CREATE TABLE Skills_Required_To_Fix (skill_id NUMBER, part_fault_id NUMBER); CREATE TABLE Parts (part_name TEXT, other_part_details TEXT, part_id NUMBER); CREATE TABLE Maintenance_Engineers (engineer_id NUMBER); CREATE TABLE Part_Faults (other_fault_details TEXT, part_id NUMBER, fault_short_name TEXT, fault_description TEXT, part_fault_id NUMBER); CREATE TABLE Skills (skill_id NUMBER); CREATE TABLE Fault_Log_Parts (fault_log_entry_id NUMBER, part_fault_id NUMBER);"
      }
    ],
    [
      {
        "question": "What is the skill code for skill id 1, 2 and 3 ?",
        "query": "SELECT skill_id, skill_code FROM skills WHERE skill_id = 1 OR skill_id = 2 OR skill_id = 3",
        "schema": "CREATE TABLE Maintenance_Engineers (engineer_id NUMBER); CREATE TABLE Skills_Required_To_Fix (skill_id NUMBER); CREATE TABLE Staff (staff_id NUMBER); CREATE TABLE Engineer_Skills (engineer_id NUMBER, skill_id NUMBER); CREATE TABLE Skills (skill_id NUMBER, skill_code TEXT, skill_description TEXT);"
      },
      {
        "question": "How many ids are in part_fault_id...Tell me total number",
        "query": "SELECT COUNT ( DISTINCT part_fault_id ) FROM skills_required_to_fix",
        "schema": "CREATE TABLE Fault_Log_Parts (part_fault_id NUMBER); CREATE TABLE Staff (staff_id NUMBER); CREATE TABLE Parts (part_id NUMBER); CREATE TABLE Skills (skill_code TEXT, skill_id NUMBER, skill_description TEXT); CREATE TABLE Skills_Required_To_Fix (part_fault_id NUMBER, skill_id NUMBER); CREATE TABLE Engineer_Skills (engineer_id NUMBER, skill_id NUMBER); CREATE TABLE Maintenance_Engineers (engineer_id NUMBER); CREATE TABLE Part_Faults (part_fault_id NUMBER, part_id NUMBER);"
      },
      {
        "question": "What is the skill description for skill id 3 ?",
        "query": "SELECT skill_description FROM skills WHERE skill_id = 3",
        "schema": "CREATE TABLE Skills (skill_description TEXT, skill_code TEXT, skill_id NUMBER); CREATE TABLE Skills_Required_To_Fix (part_fault_id NUMBER, skill_id NUMBER); CREATE TABLE Fault_Log_Parts (part_fault_id NUMBER); CREATE TABLE Maintenance_Engineers (engineer_id NUMBER); CREATE TABLE Engineer_Skills (engineer_id NUMBER, skill_id NUMBER); CREATE TABLE Fault_Log (fault_description TEXT); CREATE TABLE Part_Faults (fault_description TEXT, part_id NUMBER, part_fault_id NUMBER); CREATE TABLE Staff (staff_id NUMBER); CREATE TABLE Parts (part_id NUMBER);"
      },
      {
        "question": "Which skill is used in fixing the most number of faults ? List the skill id and description",
        "query": "SELECT t1.skill_id , t1.skill_description FROM skills AS t1 JOIN skills_required_to_fix AS t2 ON t1.skill_id = t2.skill_id GROUP BY t1.skill_id ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Parts (part_id NUMBER); CREATE TABLE Engineer_Skills (engineer_id NUMBER, skill_id NUMBER); CREATE TABLE Part_Faults (part_id NUMBER, fault_description TEXT, part_fault_id NUMBER); CREATE TABLE Skills_Required_To_Fix (part_fault_id NUMBER, skill_id NUMBER); CREATE TABLE Skills (skill_code TEXT, skill_id NUMBER, skill_description TEXT); CREATE TABLE Fault_Log_Parts (part_fault_id NUMBER); CREATE TABLE Maintenance_Engineers (engineer_id NUMBER); CREATE TABLE Fault_Log (fault_description TEXT); CREATE TABLE Staff (staff_id NUMBER);"
      }
    ],
    [
      {
        "question": "How many parts have more than 2 faults?",
        "query": "SELECT COUNT ( * ) FROM ( SELECT t1.part_name , t1.part_id FROM parts AS t1 JOIN part_faults AS t2 ON t1.part_id = t2.part_id GROUP BY t1.part_id HAVING COUNT ( * ) > 2 )",
        "schema": "CREATE TABLE Engineer_Visits (fault_log_entry_id NUMBER); CREATE TABLE Maintenance_Engineers (engineer_id NUMBER); CREATE TABLE Parts (part_id NUMBER, part_name TEXT); CREATE TABLE Skills_Required_To_Fix (part_fault_id NUMBER, skill_id NUMBER); CREATE TABLE Skills (skill_id NUMBER); CREATE TABLE Third_Party_Companies (company_id NUMBER); CREATE TABLE Staff (staff_id NUMBER); CREATE TABLE Fault_Log (fault_log_entry_id NUMBER); CREATE TABLE Asset_Parts (asset_id NUMBER, part_id NUMBER); CREATE TABLE Assets (asset_id NUMBER); CREATE TABLE Part_Faults (fault_short_name TEXT, part_id NUMBER, fault_description TEXT, part_fault_id NUMBER, other_fault_details TEXT); CREATE TABLE Fault_Log_Parts (part_fault_id NUMBER, fault_log_entry_id NUMBER); CREATE TABLE Engineer_Skills (engineer_id NUMBER);"
      },
      {
        "question": "What are the parts with more than 2 faults? | Here are the names of the parts with more than 2 faults | What are the name's and id's of the parts with more than 2 faults?",
        "query": "SELECT t1.part_name , t1.part_id FROM parts AS t1 JOIN part_faults AS t2 ON t1.part_id = t2.part_id GROUP BY t1.part_id HAVING COUNT ( * ) > 2",
        "schema": "CREATE TABLE Assets (asset_id NUMBER); CREATE TABLE Maintenance_Engineers (engineer_id NUMBER); CREATE TABLE Fault_Log (fault_log_entry_id NUMBER); CREATE TABLE Parts (part_id NUMBER, part_name TEXT); CREATE TABLE Skills (skill_id NUMBER); CREATE TABLE Part_Faults (fault_short_name TEXT, part_id NUMBER, other_fault_details TEXT, fault_description TEXT, part_fault_id NUMBER); CREATE TABLE Staff (staff_id NUMBER); CREATE TABLE Asset_Parts (asset_id NUMBER, part_id NUMBER); CREATE TABLE Fault_Log_Parts (fault_log_entry_id NUMBER, part_fault_id NUMBER); CREATE TABLE Engineer_Skills (engineer_id NUMBER); CREATE TABLE Engineer_Visits (fault_log_entry_id NUMBER); CREATE TABLE Skills_Required_To_Fix (part_fault_id NUMBER, skill_id NUMBER); CREATE TABLE Third_Party_Companies (company_id NUMBER);"
      }
    ],
    [
      {
        "question": "what is the fault status of engineer visit id 1?",
        "query": "SELECT fault_status FROM engineer_visits WHERE engineer_visit_id = 1",
        "schema": "CREATE TABLE Staff (staff_id NUMBER); CREATE TABLE Engineer_Visits (contact_staff_id NUMBER, fault_log_entry_id NUMBER, engineer_id NUMBER, engineer_visit_id NUMBER, fault_status TEXT); CREATE TABLE Fault_Log (fault_log_entry_id NUMBER); CREATE TABLE Fault_Log_Parts (fault_status TEXT, part_fault_id NUMBER, fault_log_entry_id NUMBER); CREATE TABLE Maintenance_Engineers (engineer_id NUMBER, last_name TEXT); CREATE TABLE Parts (part_name TEXT, part_id NUMBER); CREATE TABLE Part_Faults (part_fault_id NUMBER);"
      },
      {
        "question": "what is fault status of engineer id 8?",
        "query": "SELECT fault_status FROM engineer_visits WHERE engineer_id = 8",
        "schema": "CREATE TABLE Engineer_Visits (contact_staff_id NUMBER, fault_log_entry_id NUMBER, engineer_id NUMBER, fault_status TEXT, engineer_visit_id NUMBER); CREATE TABLE Maintenance_Engineers (engineer_id NUMBER, last_name TEXT); CREATE TABLE Parts (part_name TEXT, part_id NUMBER); CREATE TABLE Fault_Log_Parts (fault_log_entry_id NUMBER, part_fault_id NUMBER, fault_status TEXT); CREATE TABLE Staff (staff_id NUMBER); CREATE TABLE Part_Faults (part_fault_id NUMBER); CREATE TABLE Fault_Log (fault_log_entry_id NUMBER);"
      },
      {
        "question": "what about the other visit details of engineer id 8?",
        "query": "SELECT other_visit_details FROM engineer_visits WHERE engineer_id = 8",
        "schema": "CREATE TABLE Staff (staff_id NUMBER); CREATE TABLE Part_Faults (part_fault_id NUMBER); CREATE TABLE Fault_Log (other_fault_details TEXT, fault_log_entry_id NUMBER); CREATE TABLE Parts (part_id NUMBER, part_name TEXT); CREATE TABLE Fault_Log_Parts (part_fault_id NUMBER, fault_log_entry_id NUMBER, fault_status TEXT); CREATE TABLE Maintenance_Engineers (other_details TEXT, last_name TEXT, engineer_id NUMBER); CREATE TABLE Engineer_Visits (engineer_id NUMBER, fault_status TEXT, contact_staff_id NUMBER, fault_log_entry_id NUMBER, other_visit_details TEXT, engineer_visit_id NUMBER);"
      }
    ],
    [
      {
        "question": "Which gender makes up the majority of the staff?",
        "query": "SELECT gender FROM staff GROUP BY gender ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Staff (staff_name TEXT, staff_id NUMBER, other_staff_details TEXT, gender TEXT);"
      },
      {
        "question": "how many staff are gender 1?",
        "query": "SELECT COUNT ( * ) FROM staff WHERE gender = 1",
        "schema": "CREATE TABLE Staff (staff_name TEXT, other_staff_details TEXT, gender TEXT, staff_id NUMBER);"
      },
      {
        "question": "how many staff are not gender 1?",
        "query": "SELECT COUNT ( * ) FROM staff WHERE gender ! = 1",
        "schema": "CREATE TABLE Staff (staff_id NUMBER, staff_name TEXT, gender TEXT, other_staff_details TEXT);"
      }
    ],
    [
      {
        "question": "Can you list the asset ids, the fault log entry ids and the fault descriptions?",
        "query": "SELECT asset_id, fault_log_entry_id, fault_description FROM fault_log",
        "schema": "CREATE TABLE Part_Faults (part_fault_id NUMBER, fault_description TEXT); CREATE TABLE Fault_Log_Parts (part_fault_id NUMBER, fault_status TEXT, fault_log_entry_id NUMBER); CREATE TABLE Fault_Log (fault_description TEXT, fault_log_entry_id NUMBER, asset_id NUMBER); CREATE TABLE Asset_Parts (asset_id NUMBER); CREATE TABLE Engineer_Visits (fault_log_entry_id NUMBER); CREATE TABLE Assets (asset_details TEXT, asset_model TEXT, asset_make TEXT, asset_id NUMBER);"
      },
      {
        "question": "Hmm, I want to know the asset ids that did not incur any fault log.",
        "query": "SELECT asset_id FROM assets WHERE asset_id NOT IN ( SELECT asset_id FROM fault_log )",
        "schema": "CREATE TABLE Assets (asset_model TEXT, asset_make TEXT, asset_id NUMBER, asset_details TEXT); CREATE TABLE Asset_Parts (asset_id NUMBER); CREATE TABLE Engineer_Visits (fault_log_entry_id NUMBER); CREATE TABLE Part_Faults (part_fault_id NUMBER, fault_description TEXT); CREATE TABLE Fault_Log_Parts (fault_status TEXT, fault_log_entry_id NUMBER, part_fault_id NUMBER); CREATE TABLE Fault_Log (fault_log_entry_id NUMBER, fault_description TEXT, asset_id NUMBER);"
      },
      {
        "question": "Please just list the asset model of those assets.",
        "query": "SELECT asset_model FROM assets WHERE asset_id NOT IN ( SELECT asset_id FROM fault_log )",
        "schema": "CREATE TABLE Fault_Log_Parts (fault_status TEXT, fault_log_entry_id NUMBER, part_fault_id NUMBER); CREATE TABLE Part_Faults (part_fault_id NUMBER, fault_description TEXT); CREATE TABLE Asset_Parts (asset_id NUMBER); CREATE TABLE Assets (asset_details TEXT, asset_model TEXT, asset_make TEXT, asset_id NUMBER); CREATE TABLE Fault_Log (fault_log_entry_id NUMBER, asset_id NUMBER, fault_description TEXT); CREATE TABLE Engineer_Visits (fault_log_entry_id NUMBER);"
      }
    ],
    [
      {
        "question": "How many fault logs are there in total?",
        "query": "SELECT COUNT ( fault_log_entry_id ) FROM fault_log",
        "schema": "CREATE TABLE Engineer_Skills (engineer_id NUMBER); CREATE TABLE Fault_Log (fault_log_entry_id NUMBER, fault_description TEXT, asset_id NUMBER, recorded_by_staff_id NUMBER); CREATE TABLE Engineer_Visits (fault_log_entry_id NUMBER, engineer_id NUMBER); CREATE TABLE Maintenance_Engineers (engineer_id NUMBER); CREATE TABLE Part_Faults (part_fault_id NUMBER); CREATE TABLE Staff (staff_id NUMBER); CREATE TABLE Assets (asset_id NUMBER); CREATE TABLE Fault_Log_Parts (fault_log_entry_id NUMBER, part_fault_id NUMBER, fault_status TEXT); CREATE TABLE Skills_Required_To_Fix (part_fault_id NUMBER);"
      },
      {
        "question": "How many of those fault logs had faulty parts?",
        "query": "SELECT COUNT ( * ) FROM ( SELECT fault_log_entry_id FROM fault_log WHERE fault_log_entry_id IN ( SELECT fault_log_entry_id FROM fault_log_parts ) )",
        "schema": "CREATE TABLE Fault_Log (recorded_by_staff_id NUMBER, asset_id NUMBER, fault_description TEXT, fault_log_entry_id NUMBER); CREATE TABLE Parts (part_id NUMBER); CREATE TABLE Staff (staff_id NUMBER); CREATE TABLE Skills_Required_To_Fix (part_fault_id NUMBER); CREATE TABLE Fault_Log_Parts (fault_log_entry_id NUMBER, part_fault_id NUMBER, fault_status TEXT); CREATE TABLE Assets (asset_id NUMBER); CREATE TABLE Engineer_Skills (engineer_id NUMBER); CREATE TABLE Engineer_Visits (engineer_id NUMBER, fault_log_entry_id NUMBER); CREATE TABLE Part_Faults (part_fault_id NUMBER); CREATE TABLE Maintenance_Engineers (engineer_id NUMBER);"
      },
      {
        "question": "What was the fault log ID with the least number of faulty parts?",
        "query": "SELECT t1.fault_log_entry_id FROM fault_log AS t1 JOIN fault_log_parts AS t2 ON t1.fault_log_entry_id = t2.fault_log_entry_id GROUP BY t1.fault_log_entry_id ORDER BY COUNT ( * ) ASC LIMIT 1",
        "schema": "CREATE TABLE Parts (part_id NUMBER); CREATE TABLE Maintenance_Engineers (engineer_id NUMBER); CREATE TABLE Part_Faults (part_fault_id NUMBER); CREATE TABLE Fault_Log (recorded_by_staff_id NUMBER, fault_log_entry_id NUMBER, fault_description TEXT, asset_id NUMBER); CREATE TABLE Engineer_Visits (engineer_id NUMBER, fault_log_entry_id NUMBER); CREATE TABLE Fault_Log_Parts (fault_log_entry_id NUMBER, fault_status TEXT, part_fault_id NUMBER); CREATE TABLE Engineer_Skills (engineer_id NUMBER); CREATE TABLE Assets (asset_id NUMBER); CREATE TABLE Skills_Required_To_Fix (part_fault_id NUMBER); CREATE TABLE Staff (staff_id NUMBER);"
      },
      {
        "question": "What was its description?",
        "query": "SELECT t1.fault_log_entry_id , t1.fault_description FROM fault_log AS t1 JOIN fault_log_parts AS t2 ON t1.fault_log_entry_id = t2.fault_log_entry_id GROUP BY t1.fault_log_entry_id ORDER BY COUNT ( * ) ASC LIMIT 1",
        "schema": "CREATE TABLE Skills_Required_To_Fix (part_fault_id NUMBER); CREATE TABLE Fault_Log_Parts (part_fault_id NUMBER, fault_log_entry_id NUMBER, fault_status TEXT); CREATE TABLE Staff (staff_id NUMBER); CREATE TABLE Assets (asset_id NUMBER); CREATE TABLE Engineer_Visits (engineer_id NUMBER, fault_log_entry_id NUMBER); CREATE TABLE Part_Faults (fault_description TEXT, part_fault_id NUMBER); CREATE TABLE Maintenance_Engineers (engineer_id NUMBER); CREATE TABLE Parts (part_id NUMBER); CREATE TABLE Engineer_Skills (engineer_id NUMBER); CREATE TABLE Fault_Log (asset_id NUMBER, fault_description TEXT, recorded_by_staff_id NUMBER, fault_log_entry_id NUMBER);"
      },
      {
        "question": "What was the fault log ID with the most number of faulty parts?",
        "query": "SELECT t1.fault_log_entry_id FROM fault_log AS t1 JOIN fault_log_parts AS t2 ON t1.fault_log_entry_id = t2.fault_log_entry_id GROUP BY t1.fault_log_entry_id ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Engineer_Visits (engineer_id NUMBER, fault_log_entry_id NUMBER); CREATE TABLE Engineer_Skills (engineer_id NUMBER); CREATE TABLE Maintenance_Engineers (engineer_id NUMBER); CREATE TABLE Part_Faults (part_fault_id NUMBER, fault_description TEXT); CREATE TABLE Staff (staff_id NUMBER); CREATE TABLE Parts (part_id NUMBER); CREATE TABLE Skills_Required_To_Fix (part_fault_id NUMBER); CREATE TABLE Assets (asset_id NUMBER); CREATE TABLE Fault_Log_Parts (fault_status TEXT, fault_log_entry_id NUMBER, part_fault_id NUMBER); CREATE TABLE Fault_Log (asset_id NUMBER, recorded_by_staff_id NUMBER, fault_description TEXT, fault_log_entry_id NUMBER);"
      },
      {
        "question": "What was its description?",
        "query": "SELECT t1.fault_log_entry_id , t1.fault_description FROM fault_log AS t1 JOIN fault_log_parts AS t2 ON t1.fault_log_entry_id = t2.fault_log_entry_id GROUP BY t1.fault_log_entry_id ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Engineer_Visits (engineer_id NUMBER, fault_log_entry_id NUMBER); CREATE TABLE Engineer_Skills (engineer_id NUMBER); CREATE TABLE Maintenance_Engineers (engineer_id NUMBER); CREATE TABLE Parts (part_id NUMBER); CREATE TABLE Staff (staff_id NUMBER); CREATE TABLE Skills_Required_To_Fix (part_fault_id NUMBER); CREATE TABLE Fault_Log_Parts (fault_log_entry_id NUMBER, part_fault_id NUMBER, fault_status TEXT); CREATE TABLE Fault_Log (asset_id NUMBER, recorded_by_staff_id NUMBER, fault_log_entry_id NUMBER, fault_description TEXT); CREATE TABLE Part_Faults (part_fault_id NUMBER, fault_description TEXT); CREATE TABLE Assets (asset_id NUMBER);"
      },
      {
        "question": "How about the record time?",
        "query": "SELECT t1.fault_log_entry_id , t1.fault_description , t1.fault_log_entry_datetime FROM fault_log AS t1 JOIN fault_log_parts AS t2 ON t1.fault_log_entry_id = t2.fault_log_entry_id GROUP BY t1.fault_log_entry_id ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Parts (part_id NUMBER); CREATE TABLE Staff (staff_id NUMBER); CREATE TABLE Maintenance_Engineers (engineer_id NUMBER); CREATE TABLE Fault_Log_Parts (part_fault_id NUMBER, fault_log_entry_id NUMBER, fault_status TEXT); CREATE TABLE Skills_Required_To_Fix (part_fault_id NUMBER); CREATE TABLE Engineer_Skills (engineer_id NUMBER); CREATE TABLE Fault_Log (fault_log_entry_id NUMBER, asset_id NUMBER, fault_description TEXT, fault_log_entry_datetime TIME, recorded_by_staff_id NUMBER); CREATE TABLE Assets (asset_id NUMBER); CREATE TABLE Part_Faults (fault_description TEXT, part_fault_id NUMBER); CREATE TABLE Engineer_Visits (engineer_id NUMBER, fault_log_entry_id NUMBER);"
      }
    ],
    [
      {
        "question": "What are the engineers first names? | Do you mean the first name of all the engineers? | Yes please",
        "query": "SELECT first_name FROM maintenance_engineers",
        "schema": "CREATE TABLE Staff (staff_id NUMBER, staff_name TEXT); CREATE TABLE Engineer_Visits (engineer_id NUMBER); CREATE TABLE Maintenance_Engineers (engineer_id NUMBER, last_name TEXT, first_name TEXT, company_id NUMBER);"
      },
      {
        "question": "I want to know all the engineers corresponding skill description? | Do you mean the corresponding skill description for all the engineers? | Yes please",
        "query": "SELECT t3.skill_description FROM maintenance_engineers AS t1 JOIN engineer_skills AS t2 ON t1.engineer_id = t2.engineer_id JOIN skills AS t3 ON t2.skill_id = t3.skill_id",
        "schema": "CREATE TABLE Engineer_Visits (engineer_id NUMBER); CREATE TABLE Maintenance_Engineers (engineer_id NUMBER, first_name TEXT, company_id NUMBER, last_name TEXT); CREATE TABLE Engineer_Skills (engineer_id NUMBER, skill_id NUMBER); CREATE TABLE Skills (skill_id NUMBER, skill_code TEXT, skill_description TEXT); CREATE TABLE Staff (staff_name TEXT, staff_id NUMBER);"
      },
      {
        "question": "What are the details for all the engineers? | Do you mean the other details for all the engineers? | Yes please",
        "query": "SELECT other_details FROM maintenance_engineers",
        "schema": "CREATE TABLE Engineer_Skills (skill_id NUMBER, engineer_id NUMBER); CREATE TABLE Maintenance_Engineers (last_name TEXT, other_details TEXT, first_name TEXT, company_id NUMBER, engineer_id NUMBER); CREATE TABLE Skills (skill_description TEXT, skill_code TEXT, skill_id NUMBER); CREATE TABLE Staff (staff_name TEXT, staff_id NUMBER); CREATE TABLE Engineer_Visits (engineer_id NUMBER);"
      },
      {
        "question": "Lastly, i will like to know the last name of all the engineers?",
        "query": "SELECT last_name FROM maintenance_engineers",
        "schema": "CREATE TABLE Maintenance_Engineers (first_name TEXT, last_name TEXT, other_details TEXT, company_id NUMBER, engineer_id NUMBER); CREATE TABLE Staff (staff_id NUMBER, staff_name TEXT); CREATE TABLE Skills (skill_id NUMBER, skill_code TEXT, skill_description TEXT); CREATE TABLE Engineer_Skills (skill_id NUMBER, engineer_id NUMBER); CREATE TABLE Engineer_Visits (engineer_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show ID and first and last name of Engineer who has visited the most times.",
        "query": "SELECT t1.engineer_id , t1.first_name , t1.last_name FROM maintenance_engineers AS t1 JOIN engineer_visits AS t2 ON t1.engineer_id = t2.engineer_id GROUP BY t1.engineer_id ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Engineer_Visits (other_visit_details TEXT, contact_staff_id NUMBER, visit_start_datetime TIME, visit_end_datetime TIME, engineer_id NUMBER, engineer_visit_id NUMBER); CREATE TABLE Maintenance_Engineers (last_name TEXT, first_name TEXT, engineer_id NUMBER); CREATE TABLE Staff (staff_id NUMBER); CREATE TABLE Engineer_Skills (engineer_id NUMBER);"
      },
      {
        "question": "what is the fault status of Engineer with the first name Etha?",
        "query": "SELECT t2.fault_status FROM maintenance_engineers AS t1 JOIN engineer_visits AS t2 ON t1.engineer_id = t2.engineer_id WHERE t1.first_name = \"Etha\"",
        "schema": "CREATE TABLE Staff (staff_id NUMBER); CREATE TABLE Engineer_Visits (contact_staff_id NUMBER, engineer_visit_id NUMBER, other_visit_details TEXT, visit_end_datetime TIME, engineer_id NUMBER, visit_start_datetime TIME, fault_status TEXT); CREATE TABLE Fault_Log_Parts (fault_status TEXT); CREATE TABLE Maintenance_Engineers (last_name TEXT, first_name TEXT, engineer_id NUMBER); CREATE TABLE Engineer_Skills (engineer_id NUMBER);"
      },
      {
        "question": "What is the visit start DateTime of Engineer with the first name Etha?",
        "query": "SELECT t2.visit_start_datetime FROM maintenance_engineers AS t1 JOIN engineer_visits AS t2 ON t1.engineer_id = t2.engineer_id WHERE t1.first_name = \"Etha\"",
        "schema": "CREATE TABLE Staff (staff_id NUMBER); CREATE TABLE Engineer_Skills (engineer_id NUMBER); CREATE TABLE Maintenance_Contracts (contract_start_date TIME); CREATE TABLE Engineer_Visits (other_visit_details TEXT, contact_staff_id NUMBER, fault_status TEXT, engineer_visit_id NUMBER, engineer_id NUMBER, visit_start_datetime TIME, visit_end_datetime TIME); CREATE TABLE Fault_Log_Parts (fault_status TEXT); CREATE TABLE Maintenance_Engineers (last_name TEXT, engineer_id NUMBER, first_name TEXT);"
      },
      {
        "question": "What is the visit end datetime of Engineer with the first name Etha?",
        "query": "SELECT t2.visit_end_datetime FROM maintenance_engineers AS t1 JOIN engineer_visits AS t2 ON t1.engineer_id = t2.engineer_id WHERE t1.first_name = \"Etha\"",
        "schema": "CREATE TABLE Staff (staff_id NUMBER); CREATE TABLE Fault_Log_Parts (fault_status TEXT); CREATE TABLE Engineer_Visits (visit_start_datetime TIME, engineer_visit_id NUMBER, other_visit_details TEXT, visit_end_datetime TIME, contact_staff_id NUMBER, fault_status TEXT, engineer_id NUMBER); CREATE TABLE Maintenance_Engineers (last_name TEXT, engineer_id NUMBER, first_name TEXT); CREATE TABLE Maintenance_Contracts (contract_start_date TIME); CREATE TABLE Engineer_Skills (engineer_id NUMBER);"
      }
    ],
    [
      {
        "question": "What assets have been aquired? | What kind of information about the assets do you want me to return? | Can you tell me the date each asset was aquired?",
        "query": "SELECT asset_acquired_date FROM assets",
        "schema": "CREATE TABLE Fault_Log (asset_id NUMBER); CREATE TABLE Asset_Parts (asset_id NUMBER); CREATE TABLE Assets (other_asset_details TEXT, asset_acquired_date TIME, asset_details TEXT, asset_id NUMBER, asset_make TEXT, asset_model TEXT, asset_disposed_date TIME);"
      },
      {
        "question": "Now i would like to know what the earliest date is?",
        "query": "SELECT asset_acquired_date FROM assets ORDER BY asset_acquired_date ASC LIMIT 1",
        "schema": "CREATE TABLE Assets (other_asset_details TEXT, asset_details TEXT, asset_disposed_date TIME, asset_make TEXT, asset_id NUMBER, asset_model TEXT, asset_acquired_date TIME); CREATE TABLE Asset_Parts (asset_id NUMBER); CREATE TABLE Fault_Log (asset_id NUMBER);"
      }
    ],
    [
      {
        "question": "Tell me the chargeable amount for part id 1 ?",
        "query": "SELECT chargeable_amount FROM parts WHERE part_id = \"1\"",
        "schema": "CREATE TABLE Fault_Log_Parts (part_fault_id NUMBER); CREATE TABLE Parts (part_name TEXT, chargeable_amount TEXT, chargeable_yn TEXT, part_id NUMBER); CREATE TABLE Asset_Parts (asset_id NUMBER, part_id NUMBER); CREATE TABLE Part_Faults (fault_short_name TEXT, part_fault_id NUMBER, part_id NUMBER);"
      },
      {
        "question": "Tell me the part name of the part id 3 ?",
        "query": "SELECT part_name FROM parts WHERE part_id = \"3\"",
        "schema": "CREATE TABLE Part_Faults (part_fault_id NUMBER, fault_short_name TEXT, part_id NUMBER); CREATE TABLE Parts (part_id NUMBER, part_name TEXT, chargeable_amount TEXT, chargeable_yn TEXT); CREATE TABLE Fault_Log_Parts (part_fault_id NUMBER); CREATE TABLE Asset_Parts (part_id NUMBER, asset_id NUMBER);"
      },
      {
        "question": "Tell me the part name of the part id 2 ?",
        "query": "SELECT part_name FROM parts WHERE part_id = \"2\"",
        "schema": "CREATE TABLE Asset_Parts (part_id NUMBER, asset_id NUMBER); CREATE TABLE Parts (chargeable_yn TEXT, part_id NUMBER, part_name TEXT, chargeable_amount TEXT); CREATE TABLE Part_Faults (part_id NUMBER, part_fault_id NUMBER, fault_short_name TEXT); CREATE TABLE Fault_Log_Parts (part_fault_id NUMBER);"
      },
      {
        "question": "Which part has the least chargeable amount ? List the part id and amount.",
        "query": "SELECT part_id , chargeable_amount FROM parts ORDER BY chargeable_amount ASC LIMIT 1",
        "schema": "CREATE TABLE Fault_Log_Parts (part_fault_id NUMBER); CREATE TABLE Part_Faults (part_fault_id NUMBER, part_id NUMBER, fault_short_name TEXT); CREATE TABLE Parts (part_name TEXT, chargeable_yn TEXT, chargeable_amount TEXT, part_id NUMBER); CREATE TABLE Asset_Parts (asset_id NUMBER, part_id NUMBER);"
      }
    ],
    [
      {
        "question": "How many engineer visits are required at most for a single fault log? List the number and the log entry id.",
        "query": "SELECT COUNT ( * ) , t1.fault_log_entry_id FROM fault_log AS t1 JOIN engineer_visits AS t2 ON t1.fault_log_entry_id = t2.fault_log_entry_id GROUP BY t1.fault_log_entry_id ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Fault_Log_Parts (fault_status TEXT, part_fault_id NUMBER, fault_log_entry_id NUMBER); CREATE TABLE Fault_Log (fault_log_entry_id NUMBER); CREATE TABLE Maintenance_Engineers (engineer_id NUMBER); CREATE TABLE Part_Faults (part_fault_id NUMBER); CREATE TABLE Engineer_Visits (engineer_id NUMBER, fault_log_entry_id NUMBER, engineer_visit_id NUMBER, fault_status TEXT);"
      },
      {
        "question": "What is the engineer visit id of that fault log entry id?",
        "query": "SELECT t2.engineer_visit_id FROM fault_log AS t1 JOIN engineer_visits AS t2 ON t1.fault_log_entry_id = t2.fault_log_entry_id WHERE t2.fault_log_entry_id = ( SELECT t1.fault_log_entry_id FROM fault_log AS t1 JOIN engineer_visits AS t2 ON t1.fault_log_entry_id = t2.fault_log_entry_id GROUP BY t1.fault_log_entry_id ORDER BY COUNT ( * ) DESC LIMIT 1 )",
        "schema": "CREATE TABLE Engineer_Visits (engineer_visit_id NUMBER, fault_status TEXT, engineer_id NUMBER, fault_log_entry_id NUMBER); CREATE TABLE Maintenance_Engineers (engineer_id NUMBER); CREATE TABLE Fault_Log_Parts (part_fault_id NUMBER, fault_log_entry_id NUMBER, fault_status TEXT); CREATE TABLE Fault_Log (fault_log_entry_id NUMBER); CREATE TABLE Part_Faults (part_fault_id NUMBER);"
      },
      {
        "question": "What is the contact staff id for that?",
        "query": "SELECT t2.contact_staff_id FROM fault_log AS t1 JOIN engineer_visits AS t2 ON t1.fault_log_entry_id = t2.fault_log_entry_id WHERE t2.fault_log_entry_id = ( SELECT t1.fault_log_entry_id FROM fault_log AS t1 JOIN engineer_visits AS t2 ON t1.fault_log_entry_id = t2.fault_log_entry_id GROUP BY t1.fault_log_entry_id ORDER BY COUNT ( * ) DESC LIMIT 1 )",
        "schema": "CREATE TABLE Fault_Log_Parts (fault_status TEXT, part_fault_id NUMBER, fault_log_entry_id NUMBER); CREATE TABLE Part_Faults (part_fault_id NUMBER); CREATE TABLE Staff (staff_id NUMBER); CREATE TABLE Engineer_Visits (contact_staff_id NUMBER, engineer_id NUMBER, engineer_visit_id NUMBER, fault_status TEXT, fault_log_entry_id NUMBER); CREATE TABLE Fault_Log (recorded_by_staff_id NUMBER, fault_log_entry_id NUMBER); CREATE TABLE Maintenance_Engineers (engineer_id NUMBER);"
      },
      {
        "question": "What is the fault status of that?",
        "query": "SELECT t2.fault_status FROM fault_log AS t1 JOIN engineer_visits AS t2 ON t1.fault_log_entry_id = t2.fault_log_entry_id WHERE t2.fault_log_entry_id = ( SELECT t1.fault_log_entry_id FROM fault_log AS t1 JOIN engineer_visits AS t2 ON t1.fault_log_entry_id = t2.fault_log_entry_id GROUP BY t1.fault_log_entry_id ORDER BY COUNT ( * ) DESC LIMIT 1 )",
        "schema": "CREATE TABLE Part_Faults (part_fault_id NUMBER); CREATE TABLE Engineer_Visits (engineer_visit_id NUMBER, fault_status TEXT, engineer_id NUMBER, contact_staff_id NUMBER, fault_log_entry_id NUMBER); CREATE TABLE Staff (staff_id NUMBER); CREATE TABLE Fault_Log (recorded_by_staff_id NUMBER, fault_log_entry_id NUMBER); CREATE TABLE Fault_Log_Parts (part_fault_id NUMBER, fault_status TEXT, fault_log_entry_id NUMBER); CREATE TABLE Maintenance_Engineers (engineer_id NUMBER);"
      },
      {
        "question": "What's the fault description for that?",
        "query": "SELECT t1.fault_description FROM fault_log AS t1 JOIN engineer_visits AS t2 ON t1.fault_log_entry_id = t2.fault_log_entry_id GROUP BY t1.fault_log_entry_id ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Staff (staff_id NUMBER); CREATE TABLE Engineer_Visits (engineer_visit_id NUMBER, contact_staff_id NUMBER, fault_status TEXT, engineer_id NUMBER, fault_log_entry_id NUMBER); CREATE TABLE Part_Faults (part_fault_id NUMBER); CREATE TABLE Fault_Log_Parts (fault_status TEXT, part_fault_id NUMBER, fault_log_entry_id NUMBER); CREATE TABLE Fault_Log (fault_log_entry_id NUMBER, recorded_by_staff_id NUMBER, fault_description TEXT, fault_log_entry_datetime TIME); CREATE TABLE Maintenance_Engineers (engineer_id NUMBER);"
      },
      {
        "question": "Tell me what the other fault details for that are, please?",
        "query": "SELECT t1.other_fault_details FROM fault_log AS t1 JOIN engineer_visits AS t2 ON t1.fault_log_entry_id = t2.fault_log_entry_id GROUP BY t1.fault_log_entry_id ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Engineer_Visits (fault_log_entry_id NUMBER, contact_staff_id NUMBER, engineer_id NUMBER, other_visit_details TEXT, engineer_visit_id NUMBER, fault_status TEXT); CREATE TABLE Part_Faults (part_fault_id NUMBER, fault_description TEXT); CREATE TABLE Fault_Log (other_fault_details TEXT, fault_description TEXT, recorded_by_staff_id NUMBER, fault_log_entry_id NUMBER, fault_log_entry_datetime TIME); CREATE TABLE Maintenance_Engineers (engineer_id NUMBER, other_details TEXT); CREATE TABLE Fault_Log_Parts (fault_log_entry_id NUMBER, fault_status TEXT, part_fault_id NUMBER); CREATE TABLE Staff (other_staff_details TEXT, staff_id NUMBER);"
      }
    ],
    [
      {
        "question": "How many assets does each third party company supply? | Here is the result table of third-party companies and the number of ASSETS they held. For EXAMPLE, COMPANY 1 HELD 1 ASSET. | How many total assets are there?",
        "query": "SELECT COUNT ( * ) FROM assets",
        "schema": "CREATE TABLE Assets (asset_model TEXT, asset_make TEXT, asset_details TEXT, supplier_company_id NUMBER, asset_id NUMBER); CREATE TABLE Third_Party_Companies (company_id NUMBER, company_name TEXT, company_type TEXT);"
      },
      {
        "question": "How many third party companies are there?",
        "query": "SELECT COUNT ( * ) FROM third_party_companies",
        "schema": "CREATE TABLE Assets (asset_details TEXT, asset_model TEXT, supplier_company_id NUMBER, asset_id NUMBER, asset_make TEXT); CREATE TABLE Maintenance_Contracts (maintenance_contract_company_id NUMBER); CREATE TABLE Third_Party_Companies (company_name TEXT, company_id NUMBER, company_type TEXT); CREATE TABLE Maintenance_Engineers (company_id NUMBER);"
      }
    ],
    [
      {
        "question": "What is the highest number of skills needed to fix a part fault? | what  did  you want  to get  about the highest number of skills needed to fix a part fault | What is the name of the part that requires the most amount of skills to fix?",
        "query": "SELECT t1.part_name FROM parts AS t1 JOIN part_faults AS t2 ON t1.part_id = t2.part_id JOIN skills_required_to_fix AS t3 ON t2.part_fault_id = t3.part_fault_id GROUP BY t1.part_id ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Asset_Parts (part_id NUMBER); CREATE TABLE Skills (skill_id NUMBER, skill_code TEXT); CREATE TABLE Part_Faults (fault_short_name TEXT, part_fault_id NUMBER, part_id NUMBER); CREATE TABLE Skills_Required_To_Fix (part_fault_id NUMBER, skill_id NUMBER); CREATE TABLE Fault_Log_Parts (part_fault_id NUMBER); CREATE TABLE Parts (part_id NUMBER, part_name TEXT, chargeable_amount TEXT);"
      },
      {
        "question": "How many skills does it need?",
        "query": "SELECT COUNT ( * ) FROM parts AS t1 JOIN part_faults AS t2 ON t1.part_id = t2.part_id JOIN skills_required_to_fix AS t3 ON t2.part_fault_id = t3.part_fault_id GROUP BY t1.part_id ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Skills (skill_code TEXT, skill_id NUMBER); CREATE TABLE Parts (part_id NUMBER, chargeable_amount TEXT, part_name TEXT); CREATE TABLE Part_Faults (part_id NUMBER, part_fault_id NUMBER, fault_short_name TEXT); CREATE TABLE Fault_Log_Parts (part_fault_id NUMBER); CREATE TABLE Skills_Required_To_Fix (part_fault_id NUMBER, skill_id NUMBER); CREATE TABLE Asset_Parts (part_id NUMBER);"
      }
    ],
    [
      {
        "question": "How many assets can each part be used in? | Here is the result table of the part names and the number of assets that each of them can use. For example, the middle part can use 5 assets. | what is the part ID's for these?",
        "query": "SELECT t1.part_id FROM parts AS t1 JOIN asset_parts AS t2 ON t1.part_id = t2.part_id GROUP BY t1.part_name",
        "schema": "CREATE TABLE Part_Faults (part_id NUMBER, fault_short_name TEXT, part_fault_id NUMBER); CREATE TABLE Assets (asset_id NUMBER, asset_details TEXT, asset_make TEXT, asset_model TEXT); CREATE TABLE Asset_Parts (asset_id NUMBER, part_id NUMBER); CREATE TABLE Parts (part_id NUMBER, part_name TEXT);"
      },
      {
        "question": "and the chargeable amount for these?",
        "query": "SELECT chargeable_amount FROM parts AS t1 JOIN asset_parts AS t2 ON t1.part_id = t2.part_id GROUP BY t1.part_name",
        "schema": "CREATE TABLE Parts (part_name TEXT, chargeable_yn TEXT, chargeable_amount TEXT, part_id NUMBER); CREATE TABLE Asset_Parts (part_id NUMBER, asset_id NUMBER); CREATE TABLE Part_Faults (part_id NUMBER, fault_short_name TEXT, part_fault_id NUMBER); CREATE TABLE Assets (asset_details TEXT, asset_id NUMBER, asset_make TEXT, asset_model TEXT);"
      }
    ],
    [
      {
        "question": "How many assets have fault logs?",
        "query": "SELECT COUNT ( * ) FROM ( SELECT * FROM assets AS t1 JOIN fault_log AS t2 ON t1.asset_id = t2.asset_id GROUP BY t1.asset_id HAVING COUNT ( * ) > = 1 )",
        "schema": "CREATE TABLE Assets (asset_model TEXT, asset_details TEXT, asset_make TEXT, asset_id NUMBER); CREATE TABLE Skills (skill_id NUMBER); CREATE TABLE Part_Faults (part_fault_id NUMBER); CREATE TABLE Engineer_Visits (fault_log_entry_id NUMBER); CREATE TABLE Maintenance_Engineers (engineer_id NUMBER); CREATE TABLE Fault_Log_Parts (fault_log_entry_id NUMBER, part_fault_id NUMBER); CREATE TABLE Fault_Log (fault_log_entry_id NUMBER, fault_description TEXT, asset_id NUMBER); CREATE TABLE Asset_Parts (asset_id NUMBER);"
      },
      {
        "question": "How many of those 9 assets have 2 parts?",
        "query": "SELECT COUNT ( * ) FROM ( SELECT t1.asset_id , t1.asset_details FROM assets AS t1 JOIN asset_parts AS t2 ON t1.asset_id = t2.asset_id GROUP BY t1.asset_id HAVING COUNT ( * ) = 2 INTERSECT SELECT t1.asset_id , t1.asset_details FROM assets AS t1 JOIN fault_log AS t2 ON t1.asset_id = t2.asset_id GROUP BY t1.asset_id HAVING COUNT ( * ) > = 1 )",
        "schema": "CREATE TABLE Engineer_Visits (fault_log_entry_id NUMBER); CREATE TABLE Asset_Parts (asset_id NUMBER, part_id NUMBER); CREATE TABLE Assets (asset_details TEXT, asset_model TEXT, asset_id NUMBER, asset_make TEXT); CREATE TABLE Part_Faults (part_fault_id NUMBER, part_id NUMBER); CREATE TABLE Fault_Log_Parts (fault_log_entry_id NUMBER, part_fault_id NUMBER); CREATE TABLE Parts (part_id NUMBER); CREATE TABLE Maintenance_Engineers (engineer_id NUMBER); CREATE TABLE Fault_Log (fault_log_entry_id NUMBER, fault_description TEXT, asset_id NUMBER); CREATE TABLE Skills (skill_id NUMBER);"
      },
      {
        "question": "Out of those 2 which has less than 2 fault logs?",
        "query": "SELECT t1.asset_id , t1.asset_details FROM assets AS t1 JOIN asset_parts AS t2 ON t1.asset_id = t2.asset_id GROUP BY t1.asset_id HAVING COUNT ( * ) = 2 INTERSECT SELECT t1.asset_id , t1.asset_details FROM assets AS t1 JOIN fault_log AS t2 ON t1.asset_id = t2.asset_id GROUP BY t1.asset_id HAVING COUNT ( * ) < 2",
        "schema": "CREATE TABLE Engineer_Visits (fault_log_entry_id NUMBER); CREATE TABLE Parts (part_id NUMBER); CREATE TABLE Fault_Log (asset_id NUMBER, fault_description TEXT, other_fault_details TEXT, fault_log_entry_id NUMBER); CREATE TABLE Skills (skill_id NUMBER); CREATE TABLE Part_Faults (part_fault_id NUMBER, part_id NUMBER); CREATE TABLE Asset_Parts (part_id NUMBER, asset_id NUMBER); CREATE TABLE Maintenance_Engineers (engineer_id NUMBER); CREATE TABLE Assets (asset_model TEXT, other_asset_details TEXT, asset_id NUMBER, asset_make TEXT, asset_details TEXT); CREATE TABLE Fault_Log_Parts (part_fault_id NUMBER, fault_log_entry_id NUMBER);"
      }
    ],
    [
      {
        "question": "Hi! Can you show me a list of all of the product part names?",
        "query": "SELECT part_name FROM parts",
        "schema": "CREATE TABLE Staff (staff_id NUMBER); CREATE TABLE Part_Faults (part_id NUMBER, part_fault_id NUMBER); CREATE TABLE Parts (part_id NUMBER, part_name TEXT); CREATE TABLE Asset_Parts (part_id NUMBER);"
      },
      {
        "question": "Can you now show me the list of all part IDs?",
        "query": "SELECT part_id FROM parts",
        "schema": "CREATE TABLE Part_Faults (part_fault_id NUMBER, part_id NUMBER); CREATE TABLE Asset_Parts (part_id NUMBER); CREATE TABLE Staff (staff_id NUMBER); CREATE TABLE Parts (part_id NUMBER, part_name TEXT);"
      },
      {
        "question": "Thanks!  Can you please list the part id and the corresponding price of the part with the lowest chargeable amount? | We don't have price. Do you mean want the part ids and corresponding chargeable amount of the part with the lowest chargeable amount? | I'm sorry, yes that is what I meant.  The one with the lower chargeable amount!",
        "query": "SELECT part_id , chargeable_amount FROM parts ORDER BY chargeable_amount ASC LIMIT 1",
        "schema": "CREATE TABLE Parts (part_name TEXT, part_id NUMBER, chargeable_yn TEXT, chargeable_amount TEXT); CREATE TABLE Asset_Parts (part_id NUMBER); CREATE TABLE Staff (staff_id NUMBER); CREATE TABLE Part_Faults (part_fault_id NUMBER, part_id NUMBER);"
      }
    ],
    [
      {
        "question": "Hi! Which engineer has visited the most times? | What information about the engineer you want? | Which engineer id has visited the most?",
        "query": "SELECT t1.engineer_id FROM maintenance_engineers AS t1 JOIN engineer_visits AS t2 GROUP BY t1.engineer_id ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Maintenance_Engineers (first_name TEXT, company_id NUMBER, engineer_id NUMBER, last_name TEXT); CREATE TABLE Engineer_Visits (engineer_id NUMBER, engineer_visit_id NUMBER, visit_start_datetime TIME, other_visit_details TEXT, visit_end_datetime TIME, fault_status TEXT); CREATE TABLE Engineer_Skills (engineer_id NUMBER, skill_id NUMBER);"
      },
      {
        "question": "What is that engineer's full name, please?",
        "query": "SELECT t1.engineer_id , t1.first_name , t1.last_name FROM maintenance_engineers AS t1 JOIN engineer_visits AS t2 GROUP BY t1.engineer_id ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Maintenance_Engineers (engineer_id NUMBER, last_name TEXT, company_id NUMBER, first_name TEXT); CREATE TABLE Engineer_Visits (engineer_visit_id NUMBER, visit_end_datetime TIME, other_visit_details TEXT, visit_start_datetime TIME, fault_status TEXT, engineer_id NUMBER); CREATE TABLE Engineer_Skills (engineer_id NUMBER, skill_id NUMBER);"
      },
      {
        "question": "What are all of her visit start datetimes and visit end datetimes?",
        "query": "SELECT visit_start_datetime, visit_end_datetime FROM engineer_visits WHERE engineer_id = ( SELECT t1.engineer_id FROM maintenance_engineers AS t1 JOIN engineer_visits AS t2 GROUP BY t1.engineer_id ORDER BY COUNT ( * ) DESC LIMIT 1 )",
        "schema": "CREATE TABLE Engineer_Visits (fault_status TEXT, engineer_visit_id NUMBER, other_visit_details TEXT, visit_start_datetime TIME, engineer_id NUMBER, visit_end_datetime TIME); CREATE TABLE Maintenance_Engineers (engineer_id NUMBER, first_name TEXT, company_id NUMBER, last_name TEXT); CREATE TABLE Engineer_Skills (skill_id NUMBER, engineer_id NUMBER);"
      }
    ],
    [
      {
        "question": "can you show me companies name?",
        "query": "SELECT company_name FROM third_party_companies",
        "schema": "CREATE TABLE Maintenance_Engineers (first_name TEXT, last_name TEXT, company_id NUMBER); CREATE TABLE Third_Party_Companies (company_id NUMBER, company_name TEXT, company_type TEXT); CREATE TABLE Maintenance_Contracts (maintenance_contract_company_id NUMBER); CREATE TABLE Parts (part_name TEXT); CREATE TABLE Staff (staff_id NUMBER, staff_name TEXT);"
      },
      {
        "question": "can you show me Dooley and Sons's address?",
        "query": "SELECT company_address FROM third_party_companies WHERE company_name = \"Dooley and Sons\"",
        "schema": "CREATE TABLE Maintenance_Contracts (maintenance_contract_company_id NUMBER); CREATE TABLE Third_Party_Companies (company_id NUMBER, company_address TEXT, company_type TEXT, company_name TEXT); CREATE TABLE Maintenance_Engineers (last_name TEXT, first_name TEXT, company_id NUMBER); CREATE TABLE Staff (staff_name TEXT, staff_id NUMBER); CREATE TABLE Parts (part_name TEXT);"
      },
      {
        "question": "what is the engineer's first name that starting with 'E'?",
        "query": "SELECT first_name FROM maintenance_engineers WHERE first_name like \"E%\"",
        "schema": "CREATE TABLE Maintenance_Contracts (maintenance_contract_company_id NUMBER); CREATE TABLE Parts (part_name TEXT); CREATE TABLE Maintenance_Engineers (company_id NUMBER, last_name TEXT, first_name TEXT, engineer_id NUMBER); CREATE TABLE Third_Party_Companies (company_address TEXT, company_id NUMBER, company_name TEXT, company_type TEXT); CREATE TABLE Staff (staff_id NUMBER, staff_name TEXT);"
      }
    ],
    [
      {
        "question": "What are all the contract ids",
        "query": "SELECT maintenance_contract_id FROM maintenance_contracts",
        "schema": "CREATE TABLE Engineer_Skills (engineer_id NUMBER); CREATE TABLE Maintenance_Contracts (maintenance_contract_id NUMBER, maintenance_contract_company_id NUMBER); CREATE TABLE Maintenance_Engineers (engineer_id NUMBER); CREATE TABLE Staff (staff_id NUMBER); CREATE TABLE Skills (skill_id NUMBER); CREATE TABLE Assets (maintenance_contract_id NUMBER); CREATE TABLE Third_Party_Companies (company_id NUMBER);"
      },
      {
        "question": "Can I also get the numbers of assets for each of these contracts",
        "query": "SELECT t1.maintenance_contract_id, t2.asset_id FROM maintenance_contracts AS t1 JOIN assets AS t2 ON t1.maintenance_contract_id = t2.maintenance_contract_id",
        "schema": "CREATE TABLE Staff (staff_id NUMBER); CREATE TABLE Assets (asset_id NUMBER, asset_make TEXT, maintenance_contract_id NUMBER, asset_model TEXT); CREATE TABLE Fault_Log (asset_id NUMBER); CREATE TABLE Engineer_Skills (engineer_id NUMBER); CREATE TABLE Third_Party_Companies (company_id NUMBER); CREATE TABLE Maintenance_Engineers (engineer_id NUMBER); CREATE TABLE Skills (skill_id NUMBER); CREATE TABLE Maintenance_Contracts (maintenance_contract_id NUMBER, maintenance_contract_company_id NUMBER);"
      },
      {
        "question": "What I meant was the asset counts for each of these contracts",
        "query": "SELECT COUNT ( * ) , t1.maintenance_contract_id FROM maintenance_contracts AS t1 JOIN assets AS t2 ON t1.maintenance_contract_id = t2.maintenance_contract_id GROUP BY t1.maintenance_contract_id",
        "schema": "CREATE TABLE Skills (skill_id NUMBER); CREATE TABLE Staff (staff_id NUMBER); CREATE TABLE Fault_Log (asset_id NUMBER); CREATE TABLE Maintenance_Engineers (engineer_id NUMBER); CREATE TABLE Engineer_Skills (engineer_id NUMBER); CREATE TABLE Third_Party_Companies (company_id NUMBER); CREATE TABLE Maintenance_Contracts (maintenance_contract_id NUMBER, maintenance_contract_company_id NUMBER); CREATE TABLE Assets (maintenance_contract_id NUMBER, asset_make TEXT, asset_id NUMBER, asset_model TEXT);"
      }
    ],
    [
      {
        "question": "what is the date of the earliest contract?",
        "query": "SELECT t2.contract_start_date FROM third_party_companies AS t1 JOIN maintenance_contracts AS t2 ON t1.company_id = t2.maintenance_contract_company_id ORDER BY t2.contract_start_date ASC LIMIT 1",
        "schema": "CREATE TABLE Assets (maintenance_contract_id NUMBER); CREATE TABLE Fault_Log (fault_log_entry_datetime TIME); CREATE TABLE Third_Party_Companies (company_id NUMBER, company_type TEXT); CREATE TABLE Engineer_Visits (visit_start_datetime TIME); CREATE TABLE Maintenance_Contracts (contract_start_date TIME, maintenance_contract_id NUMBER, maintenance_contract_company_id NUMBER, contract_end_date TIME);"
      },
      {
        "question": "and which contract id is associated with that contract",
        "query": "SELECT t2.maintenance_contract_id FROM third_party_companies AS t1 JOIN maintenance_contracts AS t2 ON t1.company_id = t2.maintenance_contract_company_id ORDER BY t2.contract_start_date ASC LIMIT 1",
        "schema": "CREATE TABLE Maintenance_Engineers (company_id NUMBER); CREATE TABLE Engineer_Visits (visit_start_datetime TIME); CREATE TABLE Fault_Log (fault_log_entry_datetime TIME); CREATE TABLE Third_Party_Companies (company_type TEXT, company_id NUMBER, company_name TEXT); CREATE TABLE Assets (maintenance_contract_id NUMBER); CREATE TABLE Maintenance_Contracts (maintenance_contract_id NUMBER, maintenance_contract_company_id NUMBER, contract_end_date TIME, contract_start_date TIME);"
      },
      {
        "question": "and what is the company name associated with ID 9?",
        "query": "SELECT t1.company_name FROM third_party_companies AS t1 JOIN maintenance_contracts AS t2 ON t1.company_id = t2.maintenance_contract_company_id WHERE t2.maintenance_contract_id = 9",
        "schema": "CREATE TABLE Fault_Log (fault_log_entry_datetime TIME); CREATE TABLE Maintenance_Engineers (company_id NUMBER); CREATE TABLE Third_Party_Companies (company_type TEXT, company_name TEXT, company_id NUMBER); CREATE TABLE Engineer_Visits (visit_start_datetime TIME); CREATE TABLE Maintenance_Contracts (contract_start_date TIME, maintenance_contract_id NUMBER, contract_end_date TIME, maintenance_contract_company_id NUMBER); CREATE TABLE Assets (maintenance_contract_id NUMBER);"
      }
    ],
    [
      {
        "question": "Which assets have 2 parts and have less than 2 fault logs? List the asset id and detail.",
        "query": "SELECT t1.asset_id , t1.asset_details FROM assets AS t1 JOIN asset_parts AS t2 ON t1.asset_id = t2.asset_id GROUP BY t1.asset_id HAVING COUNT ( * ) = 2 INTERSECT SELECT t1.asset_id , t1.asset_details FROM assets AS t1 JOIN fault_log AS t2 ON t1.asset_id = t2.asset_id GROUP BY t1.asset_id HAVING COUNT ( * ) < 2",
        "schema": "CREATE TABLE Fault_Log (other_fault_details TEXT, asset_id NUMBER, fault_log_entry_id NUMBER); CREATE TABLE Part_Faults (part_fault_id NUMBER, part_id NUMBER); CREATE TABLE Fault_Log_Parts (fault_log_entry_id NUMBER, part_fault_id NUMBER); CREATE TABLE Engineer_Visits (fault_log_entry_id NUMBER); CREATE TABLE Asset_Parts (asset_id NUMBER, part_id NUMBER); CREATE TABLE Assets (asset_details TEXT, asset_make TEXT, other_asset_details TEXT, asset_model TEXT, asset_id NUMBER); CREATE TABLE Parts (part_id NUMBER);"
      },
      {
        "question": "What is the asset make and asset model for asset id 2?",
        "query": "SELECT asset_make,asset_model FROM assets WHERE asset_id = 2",
        "schema": "CREATE TABLE Part_Faults (part_fault_id NUMBER, part_id NUMBER); CREATE TABLE Engineer_Visits (fault_log_entry_id NUMBER); CREATE TABLE Assets (asset_details TEXT, other_asset_details TEXT, asset_model TEXT, asset_make TEXT, asset_id NUMBER); CREATE TABLE Asset_Parts (part_id NUMBER, asset_id NUMBER); CREATE TABLE Fault_Log_Parts (fault_log_entry_id NUMBER, part_fault_id NUMBER); CREATE TABLE Fault_Log (fault_log_entry_id NUMBER, asset_id NUMBER, other_fault_details TEXT); CREATE TABLE Parts (part_id NUMBER);"
      },
      {
        "question": "What are the asset acquired date and asset disposed date for asset id 2?",
        "query": "SELECT asset_acquired_date,asset_disposed_date FROM assets WHERE asset_id = 2",
        "schema": "CREATE TABLE Engineer_Visits (fault_log_entry_id NUMBER); CREATE TABLE Asset_Parts (part_id NUMBER, asset_id NUMBER); CREATE TABLE Assets (asset_disposed_date TIME, asset_make TEXT, asset_model TEXT, asset_acquired_date TIME, other_asset_details TEXT, asset_details TEXT, asset_id NUMBER); CREATE TABLE Fault_Log (asset_id NUMBER, other_fault_details TEXT, fault_log_entry_id NUMBER, fault_log_entry_datetime TIME); CREATE TABLE Part_Faults (part_fault_id NUMBER, part_id NUMBER); CREATE TABLE Fault_Log_Parts (part_fault_id NUMBER, fault_log_entry_id NUMBER); CREATE TABLE Parts (part_id NUMBER);"
      },
      {
        "question": "How many other asset details are there labeled in Bad condition?",
        "query": "SELECT COUNT ( * ) FROM assets WHERE other_asset_details = \"Bad condition\"",
        "schema": "CREATE TABLE Asset_Parts (part_id NUMBER, asset_id NUMBER); CREATE TABLE Assets (asset_model TEXT, asset_details TEXT, asset_acquired_date TIME, asset_id NUMBER, asset_disposed_date TIME, other_asset_details TEXT, asset_make TEXT); CREATE TABLE Fault_Log (fault_log_entry_datetime TIME, other_fault_details TEXT, fault_log_entry_id NUMBER, asset_id NUMBER); CREATE TABLE Engineer_Visits (fault_log_entry_id NUMBER); CREATE TABLE Part_Faults (part_id NUMBER, part_fault_id NUMBER, other_fault_details TEXT); CREATE TABLE Parts (other_part_details TEXT, part_id NUMBER); CREATE TABLE Fault_Log_Parts (part_fault_id NUMBER, fault_log_entry_id NUMBER);"
      },
      {
        "question": "What is the maintenance contract id and supplier company id for asset id 2?",
        "query": "SELECT maintenance_contract_id,supplier_company_id FROM assets WHERE asset_id = 2",
        "schema": "CREATE TABLE Assets (asset_details TEXT, asset_model TEXT, supplier_company_id NUMBER, asset_disposed_date TIME, asset_acquired_date TIME, asset_id NUMBER, asset_make TEXT, other_asset_details TEXT, maintenance_contract_id NUMBER); CREATE TABLE Parts (other_part_details TEXT, part_id NUMBER); CREATE TABLE Third_Party_Companies (other_company_details TEXT, company_name TEXT, company_type TEXT, company_id NUMBER); CREATE TABLE Fault_Log (other_fault_details TEXT, fault_log_entry_datetime TIME, fault_log_entry_id NUMBER, asset_id NUMBER); CREATE TABLE Part_Faults (other_fault_details TEXT, part_fault_id NUMBER, part_id NUMBER); CREATE TABLE Fault_Log_Parts (part_fault_id NUMBER, fault_log_entry_id NUMBER); CREATE TABLE Maintenance_Contracts (other_contract_details TEXT, contract_start_date TIME, maintenance_contract_id NUMBER, maintenance_contract_company_id NUMBER); CREATE TABLE Maintenance_Engineers (other_details TEXT, company_id NUMBER); CREATE TABLE Engineer_Visits (fault_log_entry_id NUMBER); CREATE TABLE Asset_Parts (asset_id NUMBER, part_id NUMBER);"
      }
    ],
    [
      {
        "question": "how many skills are presented on the table",
        "query": "SELECT COUNT ( * ) FROM skills",
        "schema": "CREATE TABLE Engineer_Skills (skill_id NUMBER, engineer_id NUMBER); CREATE TABLE Assets (asset_id NUMBER); CREATE TABLE Skills_Required_To_Fix (part_fault_id NUMBER, skill_id NUMBER); CREATE TABLE Parts (part_id NUMBER); CREATE TABLE Staff (staff_id NUMBER); CREATE TABLE Fault_Log (asset_id NUMBER, fault_log_entry_id NUMBER, recorded_by_staff_id NUMBER); CREATE TABLE Skills (skill_id NUMBER, skill_description TEXT, skill_code TEXT); CREATE TABLE Maintenance_Engineers (engineer_id NUMBER); CREATE TABLE Part_Faults (part_fault_id NUMBER);"
      },
      {
        "question": "show all the skill descriptions.",
        "query": "SELECT skill_description FROM skills",
        "schema": "CREATE TABLE Maintenance_Engineers (engineer_id NUMBER); CREATE TABLE Part_Faults (part_fault_id NUMBER, fault_description TEXT); CREATE TABLE Engineer_Skills (skill_id NUMBER, engineer_id NUMBER); CREATE TABLE Assets (asset_id NUMBER); CREATE TABLE Skills (skill_id NUMBER, skill_code TEXT, skill_description TEXT); CREATE TABLE Skills_Required_To_Fix (skill_id NUMBER, part_fault_id NUMBER); CREATE TABLE Staff (staff_id NUMBER); CREATE TABLE Parts (part_id NUMBER); CREATE TABLE Fault_Log (fault_description TEXT, fault_log_entry_id NUMBER, asset_id NUMBER, recorded_by_staff_id NUMBER);"
      },
      {
        "question": "list out the fault short names",
        "query": "SELECT fault_short_name FROM part_faults",
        "schema": "CREATE TABLE Skills_Required_To_Fix (skill_id NUMBER, part_fault_id NUMBER); CREATE TABLE Engineer_Skills (skill_id NUMBER, engineer_id NUMBER); CREATE TABLE Part_Faults (other_fault_details TEXT, part_fault_id NUMBER, part_id NUMBER, fault_description TEXT, fault_short_name TEXT); CREATE TABLE Skills (skill_code TEXT, skill_id NUMBER, skill_description TEXT); CREATE TABLE Parts (part_name TEXT, part_id NUMBER); CREATE TABLE Staff (staff_id NUMBER); CREATE TABLE Assets (asset_id NUMBER); CREATE TABLE Fault_Log (asset_id NUMBER, fault_description TEXT, recorded_by_staff_id NUMBER, fault_log_entry_id NUMBER); CREATE TABLE Maintenance_Engineers (engineer_id NUMBER);"
      },
      {
        "question": "what is the skill code of Mechanical",
        "query": "SELECT skill_code FROM skills WHERE skill_description = \"Mechanical\"",
        "schema": "CREATE TABLE Maintenance_Engineers (engineer_id NUMBER); CREATE TABLE Engineer_Skills (skill_id NUMBER, engineer_id NUMBER); CREATE TABLE Staff (staff_id NUMBER); CREATE TABLE Part_Faults (fault_short_name TEXT, part_fault_id NUMBER, other_fault_details TEXT, part_id NUMBER, fault_description TEXT); CREATE TABLE Skills_Required_To_Fix (skill_id NUMBER, part_fault_id NUMBER); CREATE TABLE Parts (part_name TEXT, part_id NUMBER); CREATE TABLE Fault_Log (fault_log_entry_id NUMBER, recorded_by_staff_id NUMBER, fault_description TEXT, asset_id NUMBER); CREATE TABLE Assets (asset_id NUMBER); CREATE TABLE Skills (skill_id NUMBER, skill_description TEXT, skill_code TEXT);"
      }
    ],
    [
      {
        "question": "Have many engineers that were contacted by each manager?",
        "query": "SELECT COUNT ( t3.first_name ) FROM staff AS t1 JOIN engineer_visits AS t2 ON t1.staff_id = t2.contact_staff_id JOIN maintenance_engineers AS t3 ON t2.engineer_id = t3.engineer_id",
        "schema": "CREATE TABLE Staff (staff_name TEXT, staff_id NUMBER); CREATE TABLE Third_Party_Companies (company_id NUMBER); CREATE TABLE Fault_Log (fault_log_entry_id NUMBER, recorded_by_staff_id NUMBER); CREATE TABLE Engineer_Skills (engineer_id NUMBER); CREATE TABLE Engineer_Visits (other_visit_details TEXT, engineer_id NUMBER, fault_status TEXT, contact_staff_id NUMBER, engineer_visit_id NUMBER, fault_log_entry_id NUMBER); CREATE TABLE Maintenance_Engineers (last_name TEXT, engineer_id NUMBER, first_name TEXT);"
      },
      {
        "question": "Thank you.   Can you please tell me the name of the engineer that was contacted by each manager? | Of course. First or Last name? | First and Last name, please.",
        "query": "SELECT t3.first_name , t3.last_name FROM staff AS t1 JOIN engineer_visits AS t2 ON t1.staff_id = t2.contact_staff_id JOIN maintenance_engineers AS t3 ON t2.engineer_id = t3.engineer_id",
        "schema": "CREATE TABLE Engineer_Skills (engineer_id NUMBER); CREATE TABLE Maintenance_Engineers (first_name TEXT, last_name TEXT, engineer_id NUMBER); CREATE TABLE Staff (staff_name TEXT, staff_id NUMBER); CREATE TABLE Engineer_Visits (fault_log_entry_id NUMBER, engineer_id NUMBER, fault_status TEXT, contact_staff_id NUMBER, engineer_visit_id NUMBER, other_visit_details TEXT); CREATE TABLE Third_Party_Companies (company_id NUMBER); CREATE TABLE Fault_Log (fault_log_entry_id NUMBER, recorded_by_staff_id NUMBER);"
      }
    ],
    [
      {
        "question": "How many people are in the staff?",
        "query": "SELECT COUNT ( * ) FROM staff",
        "schema": "CREATE TABLE Maintenance_Engineers (engineer_id NUMBER); CREATE TABLE Staff (staff_name TEXT, other_staff_details TEXT, staff_id NUMBER, gender TEXT); CREATE TABLE Fault_Log (recorded_by_staff_id NUMBER); CREATE TABLE Engineer_Visits (contact_staff_id NUMBER); CREATE TABLE Engineer_Skills (engineer_id NUMBER); CREATE TABLE Parts (part_id NUMBER); CREATE TABLE Skills (skill_id NUMBER);"
      },
      {
        "question": "Great, what is the most common name?",
        "query": "SELECT staff_name FROM staff GROUP BY staff_name ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Parts (part_id NUMBER, part_name TEXT); CREATE TABLE Engineer_Skills (engineer_id NUMBER); CREATE TABLE Skills (skill_id NUMBER); CREATE TABLE Engineer_Visits (contact_staff_id NUMBER); CREATE TABLE Staff (gender TEXT, other_staff_details TEXT, staff_name TEXT, staff_id NUMBER); CREATE TABLE Fault_Log (recorded_by_staff_id NUMBER); CREATE TABLE Maintenance_Engineers (first_name TEXT, engineer_id NUMBER);"
      },
      {
        "question": "What about gender?",
        "query": "SELECT gender FROM staff GROUP BY gender ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Engineer_Visits (contact_staff_id NUMBER); CREATE TABLE Engineer_Skills (engineer_id NUMBER); CREATE TABLE Parts (part_id NUMBER, part_name TEXT); CREATE TABLE Staff (gender TEXT, other_staff_details TEXT, staff_name TEXT, staff_id NUMBER); CREATE TABLE Maintenance_Engineers (first_name TEXT, engineer_id NUMBER); CREATE TABLE Fault_Log (recorded_by_staff_id NUMBER); CREATE TABLE Skills (skill_id NUMBER);"
      }
    ]
  ],
  "store_1": [
    [
      {
        "question": "How many trucks are in both movies and musical playlists. | Did you mean to ask for the number of tracks in both movies and music playlists? | yes",
        "query": "SELECT COUNT ( * ) FROM ( SELECT t1.name FROM tracks AS t1 JOIN playlist_tracks AS t2 ON t1.id = t2.track_id JOIN playlists AS t3 ON t2.playlist_id = t3.id WHERE t3.name = 'Movies' INTERSECT SELECT t1.name FROM tracks AS t1 JOIN playlist_tracks AS t2 ON t1.id = t2.track_id JOIN playlists AS t3 ON t2.playlist_id = t3.id WHERE t3.name = 'Music' )",
        "schema": "CREATE TABLE tracks (genre_id NUMBER, name TEXT, id NUMBER); CREATE TABLE playlist_tracks (playlist_id NUMBER, track_id NUMBER); CREATE TABLE playlists (name TEXT, id NUMBER);"
      },
      {
        "question": "who composed For Those About To Rock (We Salute You)?",
        "query": "SELECT composer FROM tracks WHERE name = \"For Those About To Rock ( We Salute You ) \"",
        "schema": "CREATE TABLE tracks (genre_id NUMBER, composer TEXT, id NUMBER, name TEXT, milliseconds NUMBER, album_id NUMBER); CREATE TABLE playlist_tracks (track_id NUMBER, playlist_id NUMBER); CREATE TABLE artists (id NUMBER, name TEXT); CREATE TABLE genres (id NUMBER, name TEXT); CREATE TABLE playlists (id NUMBER, name TEXT); CREATE TABLE albums (id NUMBER, artist_id NUMBER, title TEXT);"
      },
      {
        "question": "How long is it?",
        "query": "SELECT milliseconds FROM tracks WHERE name = \"For Those About To Rock ( We Salute You ) \"",
        "schema": "CREATE TABLE genres (id NUMBER, name TEXT); CREATE TABLE artists (name TEXT, id NUMBER); CREATE TABLE playlist_tracks (playlist_id NUMBER, track_id NUMBER); CREATE TABLE tracks (composer TEXT, name TEXT, milliseconds NUMBER, album_id NUMBER, id NUMBER, genre_id NUMBER); CREATE TABLE albums (id NUMBER, artist_id NUMBER, title TEXT); CREATE TABLE playlists (id NUMBER, name TEXT);"
      },
      {
        "question": "Who wrote Fast As a Shark",
        "query": "SELECT composer FROM tracks WHERE name = \"Fast As a Shark\"",
        "schema": "CREATE TABLE albums (title TEXT, id NUMBER, artist_id NUMBER); CREATE TABLE tracks (name TEXT, composer TEXT, genre_id NUMBER, milliseconds NUMBER, album_id NUMBER, id NUMBER); CREATE TABLE genres (id NUMBER, name TEXT); CREATE TABLE artists (name TEXT, id NUMBER); CREATE TABLE playlists (id NUMBER, name TEXT); CREATE TABLE playlist_tracks (track_id NUMBER, playlist_id NUMBER);"
      }
    ],
    [
      {
        "question": "What are the names of the playlists? Available is defined as able to be used or obtained; at someone's disposal",
        "query": "SELECT name FROM playlists",
        "schema": "CREATE TABLE playlists (id NUMBER, name TEXT); CREATE TABLE playlist_tracks (playlist_id NUMBER, track_id NUMBER); CREATE TABLE sqlite_sequence (seq TEXT); CREATE TABLE tracks (name TEXT, id NUMBER, album_id NUMBER); CREATE TABLE albums (id NUMBER, title TEXT); CREATE TABLE employees (id NUMBER);"
      },
      {
        "question": "How many tracks are in the playlist \"movies\"?",
        "query": "SELECT COUNT ( * ) FROM tracks AS t1 JOIN playlist_tracks AS t2 ON t1.id = t2.track_id JOIN playlists AS t3 ON t3.id = t2.playlist_id WHERE t3.name = \"Movies\"",
        "schema": "CREATE TABLE genres (id NUMBER); CREATE TABLE albums (title TEXT, id NUMBER); CREATE TABLE tracks (name TEXT, id NUMBER, genre_id NUMBER, album_id NUMBER); CREATE TABLE playlist_tracks (track_id NUMBER, playlist_id NUMBER); CREATE TABLE employees (id NUMBER); CREATE TABLE sqlite_sequence (seq TEXT); CREATE TABLE playlists (id NUMBER, name TEXT);"
      },
      {
        "question": "Please list the name(s) of the tracks in the playlist \"Movies\".",
        "query": "SELECT t1.name FROM tracks AS t1 JOIN playlist_tracks AS t2 ON t1.id = t2.track_id JOIN playlists AS t3 ON t3.id = t2.playlist_id WHERE t3.name = \"Movies\"",
        "schema": "CREATE TABLE sqlite_sequence (seq TEXT); CREATE TABLE albums (id NUMBER, title TEXT); CREATE TABLE genres (id NUMBER); CREATE TABLE playlist_tracks (playlist_id NUMBER, track_id NUMBER); CREATE TABLE playlists (name TEXT, id NUMBER); CREATE TABLE employees (id NUMBER); CREATE TABLE tracks (name TEXT, id NUMBER, genre_id NUMBER, album_id NUMBER);"
      }
    ],
    [
      {
        "question": "What are the names of all the employees? | Do you want first name or last name? | First name please.",
        "query": "SELECT first_name FROM employees",
        "schema": "CREATE TABLE employees (first_name TEXT, title TEXT, reports_to NUMBER, id NUMBER, last_name TEXT);"
      },
      {
        "question": "How about their last names?",
        "query": "SELECT last_name FROM employees",
        "schema": "CREATE TABLE employees (reports_to NUMBER, id NUMBER, last_name TEXT, first_name TEXT, title TEXT);"
      },
      {
        "question": "How many last names start with the letter J?",
        "query": "SELECT COUNT ( * ) FROM employees WHERE last_name like 'J%'",
        "schema": "CREATE TABLE employees (id NUMBER, last_name TEXT, first_name TEXT, reports_to NUMBER, title TEXT);"
      },
      {
        "question": "What is that person's first name?",
        "query": "SELECT first_name FROM employees WHERE last_name like 'J%'",
        "schema": "CREATE TABLE employees (last_name TEXT, title TEXT, reports_to NUMBER, id NUMBER, first_name TEXT);"
      },
      {
        "question": "Who are the customers that Steve supports? | This is the information for all the customers that Steve Johnson  supports | How many customers does he support?",
        "query": "SELECT COUNT ( * ) FROM employees AS t1 JOIN customers AS t2 ON t2.support_rep_id = t1.id WHERE t1.first_name = \"Steve\" AND t1.last_name = \"Johnson\"",
        "schema": "CREATE TABLE invoices (customer_id NUMBER); CREATE TABLE customers (support_rep_id NUMBER, first_name TEXT, id NUMBER, last_name TEXT); CREATE TABLE employees (reports_to NUMBER, last_name TEXT, title TEXT, id NUMBER, first_name TEXT);"
      }
    ],
    [
      {
        "question": "How many tracks in this table?",
        "query": "SELECT COUNT ( * ) FROM tracks",
        "schema": "CREATE TABLE playlist_tracks (track_id NUMBER); CREATE TABLE albums (id NUMBER); CREATE TABLE tracks (name TEXT, id NUMBER, genre_id NUMBER, milliseconds NUMBER, album_id NUMBER, composer TEXT); CREATE TABLE employees (id NUMBER); CREATE TABLE invoice_lines (track_id NUMBER);"
      },
      {
        "question": "How many playlists in this table?",
        "query": "SELECT COUNT ( id ) FROM playlists",
        "schema": "CREATE TABLE albums (id NUMBER); CREATE TABLE playlist_tracks (track_id NUMBER, playlist_id NUMBER); CREATE TABLE employees (id NUMBER); CREATE TABLE tracks (genre_id NUMBER, album_id NUMBER, composer TEXT, milliseconds NUMBER, name TEXT, id NUMBER); CREATE TABLE playlists (id NUMBER, name TEXT); CREATE TABLE invoice_lines (track_id NUMBER);"
      },
      {
        "question": "Find average unit price?",
        "query": "SELECT AVG ( unit_price ) FROM tracks",
        "schema": "CREATE TABLE playlist_tracks (playlist_id NUMBER, track_id NUMBER); CREATE TABLE tracks (id NUMBER, unit_price NUMBER, composer TEXT, album_id NUMBER, name TEXT, milliseconds NUMBER, genre_id NUMBER); CREATE TABLE albums (id NUMBER); CREATE TABLE playlists (name TEXT, id NUMBER); CREATE TABLE invoice_lines (track_id NUMBER, unit_price NUMBER); CREATE TABLE employees (id NUMBER); CREATE TABLE invoices (id NUMBER, total NUMBER);"
      }
    ],
    [
      {
        "question": "Display the 10 least expensive invoices | Would you like a list of the id's of these invoices? | No.",
        "query": "SELECT t2.invoice_date FROM customers AS t1 JOIN invoices AS t2 ON t2.customer_id = t1.id ORDER BY total LIMIT 10",
        "schema": "CREATE TABLE invoices (billing_state TEXT, customer_id NUMBER, id NUMBER, billing_country TEXT, billing_city TEXT, total NUMBER, invoice_date TIME); CREATE TABLE tracks (album_id NUMBER, id NUMBER, unit_price NUMBER); CREATE TABLE employees (id NUMBER); CREATE TABLE customers (id NUMBER); CREATE TABLE playlist_tracks (track_id NUMBER); CREATE TABLE invoice_lines (unit_price NUMBER, invoice_id NUMBER, track_id NUMBER, id NUMBER, quantity NUMBER);"
      },
      {
        "question": "Please list the first and last names of each customer on this list.",
        "query": "SELECT t1.first_name, t1.last_name FROM customers AS t1 JOIN invoices AS t2 ON t2.customer_id = t1.id ORDER BY total LIMIT 10",
        "schema": "CREATE TABLE customers (id NUMBER, first_name TEXT, last_name TEXT); CREATE TABLE employees (id NUMBER); CREATE TABLE tracks (id NUMBER, unit_price NUMBER, album_id NUMBER); CREATE TABLE invoices (billing_country TEXT, customer_id NUMBER, total NUMBER, id NUMBER, billing_state TEXT, billing_city TEXT, invoice_date TIME); CREATE TABLE invoice_lines (invoice_id NUMBER, quantity NUMBER, track_id NUMBER, id NUMBER, unit_price NUMBER); CREATE TABLE playlist_tracks (track_id NUMBER);"
      }
    ],
    [
      {
        "question": "May I know the album names and ids, and the number of tracks they have?",
        "query": "SELECT t1.title,t1.id,COUNT ( t1.id ) FROM albums AS t1 JOIN tracks AS t2 ON t1.id = t2.album_id GROUP BY t1.id",
        "schema": "CREATE TABLE albums (title TEXT, id NUMBER); CREATE TABLE genres (id NUMBER, name TEXT); CREATE TABLE tracks (name TEXT, id NUMBER, album_id NUMBER);"
      },
      {
        "question": "Hmm, can you list the album names and the artist ids?",
        "query": "SELECT title,artist_id FROM albums",
        "schema": "CREATE TABLE artists (id NUMBER, name TEXT); CREATE TABLE genres (name TEXT, id NUMBER); CREATE TABLE albums (title TEXT, artist_id NUMBER, id NUMBER); CREATE TABLE tracks (id NUMBER, album_id NUMBER, name TEXT);"
      },
      {
        "question": "Can you also list the title of albums that have the number of tracks greater than 10?",
        "query": "SELECT t1.title FROM albums AS t1 JOIN tracks AS t2 ON t1.id = t2.album_id GROUP BY t1.id HAVING COUNT ( t1.id ) > 10",
        "schema": "CREATE TABLE genres (name TEXT, id NUMBER); CREATE TABLE albums (artist_id NUMBER, id NUMBER, title TEXT); CREATE TABLE artists (id NUMBER, name TEXT); CREATE TABLE tracks (milliseconds NUMBER, album_id NUMBER, name TEXT, id NUMBER);"
      }
    ],
    [
      {
        "question": "How many countries are our customers located in?",
        "query": "SELECT COUNT ( DISTINCT country ) FROM customers",
        "schema": "CREATE TABLE invoices (billing_country TEXT, billing_city TEXT, customer_id NUMBER); CREATE TABLE customers (last_name TEXT, id NUMBER, company TEXT, address TEXT, city TEXT, country TEXT, state TEXT, postal_code TEXT);"
      },
      {
        "question": "How many customers do we have with the last name Almeida?",
        "query": "SELECT COUNT ( * ) FROM customers WHERE last_name = \"Almeida\"",
        "schema": "CREATE TABLE customers (postal_code TEXT, country TEXT, city TEXT, first_name TEXT, company TEXT, address TEXT, last_name TEXT, state TEXT, id NUMBER); CREATE TABLE invoices (billing_city TEXT, billing_country TEXT, customer_id NUMBER);"
      },
      {
        "question": "Show me the country where Roberto Almeida is located",
        "query": "SELECT country FROM customers WHERE first_name = \"Roberto\" AND last_name = \"Almeida\"",
        "schema": "CREATE TABLE customers (id NUMBER, state TEXT, first_name TEXT, address TEXT, postal_code TEXT, city TEXT, company TEXT, country TEXT, last_name TEXT); CREATE TABLE invoices (billing_country TEXT, billing_city TEXT, customer_id NUMBER);"
      }
    ],
    [
      {
        "question": "What is title of album which track Balls to the Wall belong to?",
        "query": "SELECT t1.title FROM albums AS t1 JOIN tracks AS t2 ON t1.id = t2.genre_id WHERE t2.name = \"Balls to the Wall\"",
        "schema": "CREATE TABLE artists (id NUMBER, name TEXT); CREATE TABLE genres (id NUMBER, name TEXT); CREATE TABLE tracks (id NUMBER, album_id NUMBER, name TEXT, genre_id NUMBER); CREATE TABLE albums (artist_id NUMBER, title TEXT, id NUMBER);"
      },
      {
        "question": "Hmmm. What is title of album which track Fast as a Shark belong to?",
        "query": "SELECT t1.title FROM albums AS t1 JOIN tracks AS t2 ON t1.id = t2.genre_id WHERE t2.name = \"Fast As a Shark\"",
        "schema": "CREATE TABLE albums (artist_id NUMBER, id NUMBER, title TEXT); CREATE TABLE artists (id NUMBER, name TEXT); CREATE TABLE genres (name TEXT, id NUMBER); CREATE TABLE tracks (genre_id NUMBER, name TEXT, album_id NUMBER, milliseconds NUMBER, id NUMBER);"
      },
      {
        "question": "What is title of album which track For Those About To Rock (We Salute You) belong to?",
        "query": "SELECT t1.title FROM albums AS t1 JOIN tracks AS t2 ON t1.id = t2.genre_id WHERE t2.name = \"For Those About To Rock ( We Salute You ) \"",
        "schema": "CREATE TABLE albums (title TEXT, artist_id NUMBER, id NUMBER); CREATE TABLE artists (name TEXT, id NUMBER); CREATE TABLE genres (name TEXT, id NUMBER); CREATE TABLE tracks (genre_id NUMBER, milliseconds NUMBER, album_id NUMBER, name TEXT, id NUMBER);"
      }
    ],
    [
      {
        "question": "Check whether Mr. Eduardo Martin is a customer or not? | Great. Which is the first name? | Eduardo.",
        "query": "SELECT * FROM customers WHERE first_name = \"Eduardo\" AND last_name = \"Martins\"",
        "schema": "CREATE TABLE invoices (id NUMBER, customer_id NUMBER); CREATE TABLE customers (support_rep_id NUMBER, last_name TEXT, id NUMBER, first_name TEXT); CREATE TABLE employees (title TEXT, first_name TEXT, last_name TEXT);"
      },
      {
        "question": "Of which company is Mr. Eduardo Martins a customer?",
        "query": "SELECT company FROM customers WHERE first_name = \"Eduardo\" AND last_name = \"Martins\"",
        "schema": "CREATE TABLE employees (first_name TEXT, last_name TEXT, title TEXT); CREATE TABLE customers (id NUMBER, last_name TEXT, first_name TEXT, company TEXT, support_rep_id NUMBER); CREATE TABLE invoices (customer_id NUMBER, id NUMBER);"
      },
      {
        "question": "In which city is the company 'Woodstock Discos' located?",
        "query": "SELECT city FROM customers WHERE company = \"Woodstock Discos\"",
        "schema": "CREATE TABLE employees (last_name TEXT, first_name TEXT, title TEXT); CREATE TABLE customers (city TEXT, support_rep_id NUMBER, id NUMBER, address TEXT, first_name TEXT, company TEXT, last_name TEXT); CREATE TABLE invoices (id NUMBER, customer_id NUMBER, billing_city TEXT, billing_address TEXT);"
      },
      {
        "question": "what is the contact number of 'Woodstock discos' company? | The phone of the customer of the company 'Woodstock Discos' is +55 (11) 3033-5446. | What is the contact number of Mr. Eduardo Martins?",
        "query": "SELECT phone FROM customers WHERE first_name = \"Eduardo\" AND last_name = \"Martins\"",
        "schema": "CREATE TABLE customers (last_name TEXT, first_name TEXT, phone TEXT, id NUMBER, company TEXT, city TEXT, address TEXT, support_rep_id NUMBER); CREATE TABLE employees (first_name TEXT, title TEXT, last_name TEXT); CREATE TABLE invoices (id NUMBER, billing_address TEXT, billing_city TEXT, customer_id NUMBER);"
      }
    ],
    [
      {
        "question": "What is the title, phone and hire date of Nancy Edwards?",
        "query": "SELECT title , phone , hire_date FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\"",
        "schema": "CREATE TABLE employees (reports_to NUMBER, title TEXT, birth_date TIME, first_name TEXT, hire_date TIME, id NUMBER, phone TEXT, last_name TEXT); CREATE TABLE customers (first_name TEXT, last_name TEXT, phone TEXT, id NUMBER); CREATE TABLE albums (title TEXT, artist_id NUMBER); CREATE TABLE artists (name TEXT, id NUMBER);"
      },
      {
        "question": "what is the total number of employees?",
        "query": "SELECT COUNT ( * ) FROM employees",
        "schema": "CREATE TABLE employees (title TEXT, reports_to NUMBER, birth_date TIME, id NUMBER, first_name TEXT, hire_date TIME, last_name TEXT, phone TEXT); CREATE TABLE albums (artist_id NUMBER, title TEXT); CREATE TABLE invoices (total NUMBER); CREATE TABLE artists (name TEXT, id NUMBER); CREATE TABLE customers (phone TEXT, id NUMBER, last_name TEXT, first_name TEXT);"
      },
      {
        "question": "what is the first name of gentral manager? | I cannot find \"gentral manager\" in the table. Did you mean general manager? | yes that is the general manager?",
        "query": "SELECT first_name FROM employees WHERE title = \"General Manager\"",
        "schema": "CREATE TABLE albums (artist_id NUMBER, title TEXT); CREATE TABLE invoices (total NUMBER); CREATE TABLE artists (name TEXT, id NUMBER); CREATE TABLE employees (id NUMBER, phone TEXT, birth_date TIME, first_name TEXT, title TEXT, reports_to NUMBER, last_name TEXT, hire_date TIME); CREATE TABLE customers (first_name TEXT, id NUMBER, phone TEXT, last_name TEXT);"
      }
    ],
    [
      {
        "question": "How many employees have the job title Manager?",
        "query": "SELECT COUNT ( * ) FROM employees WHERE title like \"%manager%\"",
        "schema": "CREATE TABLE invoices (id NUMBER); CREATE TABLE employees (id NUMBER, reports_to NUMBER, first_name TEXT, last_name TEXT, title TEXT); CREATE TABLE tracks (id NUMBER);"
      }
    ],
    [
      {
        "question": "How many employees report to Nancy Edwards?",
        "query": "SELECT COUNT ( * ) FROM employees AS t1 JOIN employees AS t2 ON t1.id = t2.reports_to WHERE t1.first_name = \"Nancy\" AND t1.last_name = \"Edwards\"",
        "schema": "CREATE TABLE artists (name TEXT); CREATE TABLE employees (reports_to NUMBER, email TEXT, address TEXT, first_name TEXT, title TEXT, id NUMBER, last_name TEXT);"
      },
      {
        "question": "What are their names? | The table shows the first and last names of the employees who report to Nancy Edward. | Who does not report to Nancy Edwards?",
        "query": "SELECT t2.first_name , t2.last_name FROM employees AS t1 JOIN employees AS t2 ON t1.id = t2.reports_to WHERE t1.first_name ! = \"Nancy\" AND t1.last_name ! = \"Edwards\"",
        "schema": "CREATE TABLE artists (name TEXT); CREATE TABLE employees (reports_to NUMBER, email TEXT, address TEXT, first_name TEXT, title TEXT, last_name TEXT, id NUMBER);"
      },
      {
        "question": "Who does Nancy Edwards report to? | The first and last names of the employee whom Nancy Edwards reports to is Andrew Adams. | Who does Andrew Adams report to?",
        "query": "SELECT t1.first_name , t1.last_name FROM employees AS t1 JOIN employees AS t2 ON t1.id = t2.reports_to WHERE t2.first_name = \"Andrew\" AND t2.last_name = \"Adams\"",
        "schema": "CREATE TABLE artists (name TEXT); CREATE TABLE employees (email TEXT, id NUMBER, address TEXT, title TEXT, first_name TEXT, reports_to NUMBER, last_name TEXT);"
      },
      {
        "question": "Who else reports to Andrew Adams?",
        "query": "SELECT t2.first_name , t2.last_name FROM employees AS t1 JOIN employees AS t2 ON t1.id = t2.reports_to WHERE t1.first_name = \"Andrew\" AND t1.last_name = \"Adams\" AND t2.first_name ! = 'Nancy' AND t2.last_name ! = 'Edwards'",
        "schema": "CREATE TABLE artists (name TEXT); CREATE TABLE employees (last_name TEXT, id NUMBER, first_name TEXT, address TEXT, title TEXT, reports_to NUMBER, email TEXT);"
      }
    ],
    [
      {
        "question": "Show the billing address with the highest amount of invoice?",
        "query": "SELECT billing_address FROM invoices ORDER BY total DESC LIMIT 1",
        "schema": "CREATE TABLE employees (address TEXT); CREATE TABLE invoice_lines (quantity NUMBER, invoice_id NUMBER); CREATE TABLE customers (address TEXT); CREATE TABLE invoices (billing_state TEXT, billing_address TEXT, billing_country TEXT, total NUMBER, id NUMBER, billing_city TEXT);"
      },
      {
        "question": "Show the total amount of invoice from chicago, IL?",
        "query": "SELECT SUM ( total ) FROM invoices WHERE billing_city = \"Chicago\" AND billing_state = \"IL\"",
        "schema": "CREATE TABLE employees (address TEXT, city TEXT); CREATE TABLE customers (city TEXT, state TEXT, address TEXT); CREATE TABLE invoices (billing_city TEXT, id NUMBER, billing_state TEXT, total NUMBER, billing_country TEXT, billing_address TEXT); CREATE TABLE invoice_lines (quantity NUMBER, invoice_id NUMBER);"
      },
      {
        "question": "Show the billing country with the total amount of invoice 3.96?",
        "query": "SELECT billing_country FROM invoices WHERE total = 3.96",
        "schema": "CREATE TABLE customers (state TEXT, city TEXT, address TEXT); CREATE TABLE invoices (billing_country TEXT, id NUMBER, billing_address TEXT, total NUMBER, billing_state TEXT, billing_city TEXT); CREATE TABLE employees (city TEXT, address TEXT); CREATE TABLE invoice_lines (invoice_id NUMBER, quantity NUMBER);"
      }
    ],
    [
      {
        "question": "what is the billing address of germany",
        "query": "SELECT billing_address FROM invoices WHERE billing_country = \"Germany\"",
        "schema": "CREATE TABLE customers (state TEXT, city TEXT, country TEXT, address TEXT); CREATE TABLE employees (country TEXT, address TEXT); CREATE TABLE invoices (billing_address TEXT, billing_state TEXT, billing_country TEXT, id NUMBER, billing_city TEXT);"
      },
      {
        "question": "what is the invoice date of customer id 2",
        "query": "SELECT invoice_date FROM invoices WHERE customer_id = 2",
        "schema": "CREATE TABLE customers (city TEXT, state TEXT, country TEXT, first_name TEXT, support_rep_id NUMBER, id NUMBER, address TEXT, last_name TEXT); CREATE TABLE employees (address TEXT, country TEXT); CREATE TABLE invoices (customer_id NUMBER, id NUMBER, billing_address TEXT, billing_city TEXT, billing_country TEXT, billing_state TEXT, invoice_date TIME);"
      },
      {
        "question": "what is the billing city of norway",
        "query": "SELECT DISTINCT ( billing_city ) FROM invoices WHERE billing_country = \"Norway\"",
        "schema": "CREATE TABLE customers (first_name TEXT, address TEXT, company TEXT, last_name TEXT, city TEXT, id NUMBER, country TEXT, state TEXT, support_rep_id NUMBER); CREATE TABLE invoices (id NUMBER, invoice_date TIME, customer_id NUMBER, billing_country TEXT, billing_city TEXT, billing_state TEXT, billing_address TEXT); CREATE TABLE employees (country TEXT, address TEXT);"
      },
      {
        "question": "what is the last name of state sp",
        "query": "SELECT last_name FROM customers WHERE state = \"SP\"",
        "schema": "CREATE TABLE invoices (id NUMBER, billing_state TEXT, invoice_date TIME, billing_city TEXT, customer_id NUMBER, billing_country TEXT, billing_address TEXT); CREATE TABLE employees (country TEXT, address TEXT); CREATE TABLE customers (city TEXT, last_name TEXT, country TEXT, state TEXT, first_name TEXT, id NUMBER, company TEXT, address TEXT, support_rep_id NUMBER);"
      }
    ],
    [
      {
        "question": "how many customers are presented on the table",
        "query": "SELECT COUNT ( * ) FROM customers",
        "schema": "CREATE TABLE invoices (customer_id NUMBER); CREATE TABLE customers (first_name TEXT, id NUMBER, support_rep_id NUMBER, last_name TEXT, company TEXT);"
      },
      {
        "question": "what are all the companies on the table | Do  you  mean the companies that  customers  work? | exactly",
        "query": "SELECT company FROM customers WHERE company ! = 'NULL'",
        "schema": "CREATE TABLE invoices (customer_id NUMBER); CREATE TABLE customers (support_rep_id NUMBER, first_name TEXT, last_name TEXT, id NUMBER, company TEXT);"
      },
      {
        "question": "actually i mean highest total amount",
        "query": "SELECT total FROM invoices ORDER BY total DESC LIMIT 1",
        "schema": "CREATE TABLE customers (first_name TEXT, last_name TEXT, id NUMBER, company TEXT, support_rep_id NUMBER); CREATE TABLE invoices (total NUMBER, customer_id NUMBER);"
      }
    ],
    [
      {
        "question": "What tracks belong to genre Rock?",
        "query": "SELECT * FROM genres AS t1 JOIN tracks AS t2 ON t1.id = t2.genre_id WHERE t1.name = \"Rock\"",
        "schema": "CREATE TABLE tracks (genre_id NUMBER, name TEXT, id NUMBER); CREATE TABLE invoice_lines (track_id NUMBER, id NUMBER); CREATE TABLE genres (name TEXT, id NUMBER);"
      },
      {
        "question": "What are the names of tracks that are Rock or MPEG media type?",
        "query": "SELECT t2.name FROM genres AS t1 JOIN tracks AS t2 ON t1.id = t2.genre_id JOIN media_types AS t3 ON t3.id = t2.media_type_id WHERE t1.name = \"Rock\" OR t3.name = \"MPEG audio file\"",
        "schema": "CREATE TABLE tracks (genre_id NUMBER, id NUMBER, media_type_id NUMBER, name TEXT); CREATE TABLE invoice_lines (id NUMBER, track_id NUMBER); CREATE TABLE media_types (name TEXT, id NUMBER); CREATE TABLE genres (name TEXT, id NUMBER);"
      },
      {
        "question": "What are the names of tracks that belong to the genre Rock and are media type MPEG audio file?",
        "query": "SELECT t2.name FROM genres AS t1 JOIN tracks AS t2 ON t1.id = t2.genre_id JOIN media_types AS t3 ON t3.id = t2.media_type_id WHERE t1.name = \"Rock\" OR t3.name = \"MPEG audio file\"",
        "schema": "CREATE TABLE tracks (name TEXT, genre_id NUMBER, id NUMBER, media_type_id NUMBER); CREATE TABLE genres (id NUMBER, name TEXT); CREATE TABLE invoice_lines (id NUMBER, track_id NUMBER); CREATE TABLE media_types (id NUMBER, name TEXT);"
      },
      {
        "question": "How many distinct media types are Rock genre?",
        "query": "SELECT COUNT ( DISTINCT t2.media_type_id ) FROM genres AS t1 JOIN tracks AS t2 ON t1.id = t2.genre_id JOIN media_types AS t3 ON t3.id = t2.media_type_id WHERE t1.name = \"Rock\"",
        "schema": "CREATE TABLE invoice_lines (id NUMBER, track_id NUMBER); CREATE TABLE genres (name TEXT, id NUMBER); CREATE TABLE tracks (id NUMBER, genre_id NUMBER, name TEXT, media_type_id NUMBER); CREATE TABLE media_types (id NUMBER, name TEXT);"
      },
      {
        "question": "What is the most common media type for the Rock genre?",
        "query": "SELECT * FROM genres AS t1 JOIN tracks AS t2 ON t1.id = t2.genre_id JOIN media_types AS t3 ON t3.id = t2.media_type_id WHERE t1.name = \"Rock\" GROUP BY t3.id ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE genres (name TEXT, id NUMBER); CREATE TABLE invoice_lines (id NUMBER, track_id NUMBER); CREATE TABLE media_types (id NUMBER, name TEXT); CREATE TABLE tracks (id NUMBER, name TEXT, media_type_id NUMBER, genre_id NUMBER);"
      }
    ],
    [
      {
        "question": "what is the name of the employee that supported the most number of customers?",
        "query": "SELECT t1.first_name , t1.last_name FROM employees AS t1 JOIN customers AS t2 ON t1.id = t2.support_rep_id GROUP BY t1.id ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE employees (reports_to NUMBER, last_name TEXT, id NUMBER, first_name TEXT, title TEXT); CREATE TABLE invoices (customer_id NUMBER); CREATE TABLE customers (first_name TEXT, last_name TEXT, id NUMBER, company TEXT, support_rep_id NUMBER);"
      },
      {
        "question": "what is their id?",
        "query": "SELECT t1.id FROM employees AS t1 JOIN customers AS t2 ON t1.id = t2.support_rep_id GROUP BY t1.id ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE invoices (customer_id NUMBER); CREATE TABLE customers (id NUMBER, first_name TEXT, last_name TEXT, support_rep_id NUMBER, company TEXT); CREATE TABLE employees (id NUMBER, reports_to NUMBER, last_name TEXT, title TEXT, first_name TEXT);"
      },
      {
        "question": "what is their address?",
        "query": "SELECT t1.address FROM employees AS t1 JOIN customers AS t2 ON t1.id = t2.support_rep_id GROUP BY t1.id ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE customers (address TEXT, city TEXT, first_name TEXT, support_rep_id NUMBER, last_name TEXT, id NUMBER, company TEXT); CREATE TABLE employees (address TEXT, title TEXT, id NUMBER, first_name TEXT, reports_to NUMBER, last_name TEXT, city TEXT); CREATE TABLE invoices (customer_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show the albums of Billy Cobham.",
        "query": "SELECT * FROM albums AS t1 JOIN artists AS t2 ON t1.artist_id = t2.id WHERE t2.name = \"Billy Cobham\"",
        "schema": "CREATE TABLE artists (name TEXT, id NUMBER); CREATE TABLE tracks (album_id NUMBER, name TEXT, id NUMBER); CREATE TABLE customers (first_name TEXT, last_name TEXT, id NUMBER); CREATE TABLE albums (artist_id NUMBER, title TEXT, id NUMBER); CREATE TABLE employees (title TEXT, last_name TEXT, first_name TEXT, id NUMBER);"
      },
      {
        "question": "Count the albums of Billy Colham.",
        "query": "SELECT COUNT ( * ) FROM albums AS t1 JOIN artists AS t2 ON t1.artist_id = t2.id WHERE t2.name = \"Billy Cobham\"",
        "schema": "CREATE TABLE tracks (album_id NUMBER, id NUMBER, name TEXT); CREATE TABLE artists (id NUMBER, name TEXT); CREATE TABLE albums (id NUMBER, artist_id NUMBER, title TEXT); CREATE TABLE customers (last_name TEXT, id NUMBER, first_name TEXT); CREATE TABLE employees (last_name TEXT, id NUMBER, title TEXT, first_name TEXT);"
      },
      {
        "question": "Name of the album.",
        "query": "SELECT t1.title FROM albums AS t1 JOIN artists AS t2 ON t1.artist_id = t2.id WHERE t2.name = \"Billy Cobham\"",
        "schema": "CREATE TABLE albums (title TEXT, id NUMBER, artist_id NUMBER); CREATE TABLE customers (last_name TEXT, id NUMBER, first_name TEXT); CREATE TABLE tracks (id NUMBER, album_id NUMBER, name TEXT); CREATE TABLE artists (name TEXT, id NUMBER); CREATE TABLE employees (title TEXT, first_name TEXT, last_name TEXT, id NUMBER);"
      }
    ],
    [
      {
        "question": "What are all the tracks?",
        "query": "SELECT * FROM tracks",
        "schema": "CREATE TABLE customers (id NUMBER); CREATE TABLE playlist_tracks (track_id NUMBER); CREATE TABLE tracks (milliseconds NUMBER, genre_id NUMBER, name TEXT, composer TEXT, bytes NUMBER, id NUMBER, album_id NUMBER); CREATE TABLE invoice_lines (track_id NUMBER); CREATE TABLE artists (id NUMBER); CREATE TABLE genres (id NUMBER); CREATE TABLE employees (id NUMBER); CREATE TABLE albums (id NUMBER);"
      },
      {
        "question": "Which tracks are on the Movies Playlist?",
        "query": "SELECT t1.name FROM tracks AS t1 JOIN playlist_tracks AS t2 ON t1.id = t2.track_id JOIN playlists AS t3 ON t2.playlist_id = t3.id WHERE t3.name = 'Movies'",
        "schema": "CREATE TABLE playlists (id NUMBER, name TEXT); CREATE TABLE invoice_lines (track_id NUMBER); CREATE TABLE customers (id NUMBER); CREATE TABLE employees (id NUMBER); CREATE TABLE artists (id NUMBER); CREATE TABLE tracks (composer TEXT, bytes NUMBER, id NUMBER, name TEXT, album_id NUMBER, genre_id NUMBER, milliseconds NUMBER); CREATE TABLE playlist_tracks (track_id NUMBER, playlist_id NUMBER); CREATE TABLE genres (id NUMBER); CREATE TABLE albums (id NUMBER);"
      },
      {
        "question": "Which tracks are not in the music playlist?",
        "query": "SELECT t1.name FROM tracks AS t1 JOIN playlist_tracks AS t2 ON t1.id = t2.track_id JOIN playlists AS t3 ON t2.playlist_id = t3.id WHERE t3.name ! = 'Music'",
        "schema": "CREATE TABLE employees (id NUMBER); CREATE TABLE albums (id NUMBER); CREATE TABLE playlist_tracks (track_id NUMBER, playlist_id NUMBER); CREATE TABLE tracks (album_id NUMBER, name TEXT, bytes NUMBER, milliseconds NUMBER, id NUMBER, composer TEXT, genre_id NUMBER); CREATE TABLE genres (id NUMBER); CREATE TABLE artists (id NUMBER); CREATE TABLE playlists (id NUMBER, name TEXT); CREATE TABLE customers (id NUMBER); CREATE TABLE invoice_lines (track_id NUMBER);"
      }
    ],
    [
      {
        "question": "what is the id of balls to the walls",
        "query": "SELECT DISTINCT t2.id FROM albums AS t1 JOIN tracks AS t2 ON t1.id = t2.genre_id WHERE t1.title = \"Balls to the Wall\"",
        "schema": "CREATE TABLE artists (name TEXT, id NUMBER); CREATE TABLE playlists (id NUMBER, name TEXT); CREATE TABLE genres (id NUMBER, name TEXT); CREATE TABLE albums (title TEXT, id NUMBER, artist_id NUMBER); CREATE TABLE employees (id NUMBER); CREATE TABLE media_types (id NUMBER); CREATE TABLE invoice_lines (invoice_id NUMBER, track_id NUMBER, id NUMBER); CREATE TABLE invoices (id NUMBER, customer_id NUMBER); CREATE TABLE tracks (id NUMBER, media_type_id NUMBER, name TEXT, album_id NUMBER, genre_id NUMBER); CREATE TABLE playlist_tracks (playlist_id NUMBER, track_id NUMBER); CREATE TABLE customers (id NUMBER);"
      },
      {
        "question": "what is the name of all tracks in balls to wall",
        "query": "SELECT t2.name FROM albums AS t1 JOIN tracks AS t2 ON t1.id = t2.genre_id WHERE t1.title = \"Balls to the Wall\"",
        "schema": "CREATE TABLE playlists (id NUMBER, name TEXT); CREATE TABLE artists (id NUMBER, name TEXT); CREATE TABLE tracks (name TEXT, genre_id NUMBER, id NUMBER, album_id NUMBER, media_type_id NUMBER); CREATE TABLE albums (id NUMBER, artist_id NUMBER, title TEXT); CREATE TABLE employees (id NUMBER); CREATE TABLE media_types (id NUMBER); CREATE TABLE invoices (id NUMBER, customer_id NUMBER); CREATE TABLE invoice_lines (invoice_id NUMBER, track_id NUMBER, id NUMBER); CREATE TABLE playlist_tracks (playlist_id NUMBER, track_id NUMBER); CREATE TABLE genres (id NUMBER, name TEXT); CREATE TABLE customers (id NUMBER);"
      },
      {
        "question": "name the composer of balls to wall",
        "query": "SELECT DISTINCT t2.composer FROM albums AS t1 JOIN tracks AS t2 ON t1.id = t2.genre_id WHERE t1.title = \"Balls to the Wall\"",
        "schema": "CREATE TABLE tracks (album_id NUMBER, genre_id NUMBER, name TEXT, id NUMBER, media_type_id NUMBER, composer TEXT); CREATE TABLE invoice_lines (id NUMBER, invoice_id NUMBER, track_id NUMBER); CREATE TABLE playlists (id NUMBER, name TEXT); CREATE TABLE invoices (id NUMBER, customer_id NUMBER); CREATE TABLE playlist_tracks (playlist_id NUMBER, track_id NUMBER); CREATE TABLE employees (id NUMBER); CREATE TABLE customers (id NUMBER); CREATE TABLE artists (id NUMBER, name TEXT); CREATE TABLE genres (id NUMBER, name TEXT); CREATE TABLE albums (id NUMBER, title TEXT, artist_id NUMBER); CREATE TABLE media_types (id NUMBER);"
      }
    ],
    [
      {
        "question": "What are the names of the 8 countries with the greatest gross invoice size? | Can  you  give details  about the countries? Do you mean billing country? | Yes",
        "query": "SELECT billing_country FROM invoices GROUP BY billing_country ORDER BY SUM ( total ) DESC LIMIT 8",
        "schema": "CREATE TABLE invoices (billing_country TEXT, total NUMBER, billing_state TEXT, id NUMBER); CREATE TABLE invoice_lines (invoice_id NUMBER, quantity NUMBER); CREATE TABLE customers (country TEXT);"
      },
      {
        "question": "Can you tell me which billing city has the letter \"O\" in its name please?",
        "query": "SELECT billing_city FROM invoices WHERE billing_city like \"%O%\"",
        "schema": "CREATE TABLE customers (city TEXT, country TEXT); CREATE TABLE invoices (id NUMBER, billing_city TEXT, billing_state TEXT, total NUMBER, billing_country TEXT); CREATE TABLE invoice_lines (quantity NUMBER, invoice_id NUMBER);"
      },
      {
        "question": "Can you tell me the billing addresses located in the billing city Boston?",
        "query": "SELECT DISTINCT billing_address FROM invoices WHERE billing_city = \"Boston\"",
        "schema": "CREATE TABLE invoices (billing_state TEXT, billing_city TEXT, billing_country TEXT, billing_address TEXT, total NUMBER, id NUMBER); CREATE TABLE invoice_lines (quantity NUMBER, invoice_id NUMBER); CREATE TABLE customers (city TEXT, country TEXT);"
      }
    ],
    [
      {
        "question": "Find me the 5 customers who most recently purchased something. | What information about the customer do you need? | I need the first name and last name please",
        "query": "SELECT t1.first_name , t1.last_name FROM customers AS t1 JOIN invoices AS t2 ON t2.customer_id = t1.id ORDER BY t2.invoice_date DESC LIMIT 5",
        "schema": "CREATE TABLE customers (id NUMBER, last_name TEXT, first_name TEXT); CREATE TABLE invoices (customer_id NUMBER, id NUMBER, invoice_date TIME);"
      },
      {
        "question": "How about their cities and states?",
        "query": "SELECT t1.first_name , t1.last_name, t1.city, t1.state FROM customers AS t1 JOIN invoices AS t2 ON t2.customer_id = t1.id ORDER BY t2.invoice_date DESC LIMIT 5",
        "schema": "CREATE TABLE customers (country TEXT, city TEXT, id NUMBER, state TEXT, last_name TEXT, address TEXT, first_name TEXT); CREATE TABLE invoices (id NUMBER, billing_state TEXT, invoice_date TIME, customer_id NUMBER, billing_country TEXT, billing_city TEXT);"
      },
      {
        "question": "Can you also give me the countries?",
        "query": "SELECT t1.first_name , t1.last_name, t1.city, t1.state, t1.country FROM customers AS t1 JOIN invoices AS t2 ON t2.customer_id = t1.id ORDER BY t2.invoice_date DESC LIMIT 5",
        "schema": "CREATE TABLE customers (id NUMBER, city TEXT, state TEXT, first_name TEXT, address TEXT, last_name TEXT, country TEXT); CREATE TABLE invoices (customer_id NUMBER, id NUMBER, invoice_date TIME, billing_state TEXT, total NUMBER, billing_city TEXT, billing_country TEXT);"
      },
      {
        "question": "How about their e-mail addresses?",
        "query": "SELECT t1.email FROM customers AS t1 JOIN invoices AS t2 ON t2.customer_id = t1.id ORDER BY t2.invoice_date DESC LIMIT 5",
        "schema": "CREATE TABLE invoices (billing_country TEXT, total NUMBER, invoice_date TIME, id NUMBER, billing_address TEXT, customer_id NUMBER, billing_state TEXT, billing_city TEXT); CREATE TABLE customers (first_name TEXT, last_name TEXT, postal_code TEXT, country TEXT, email TEXT, state TEXT, address TEXT, id NUMBER, city TEXT);"
      }
    ],
    [
      {
        "question": "How many albums are there",
        "query": "SELECT COUNT ( * ) FROM albums",
        "schema": "CREATE TABLE employees (last_name TEXT, id NUMBER); CREATE TABLE customers (first_name TEXT, last_name TEXT, id NUMBER); CREATE TABLE tracks (id NUMBER, genre_id NUMBER, album_id NUMBER); CREATE TABLE genres (id NUMBER); CREATE TABLE artists (id NUMBER, name TEXT); CREATE TABLE albums (id NUMBER, artist_id NUMBER, title TEXT);"
      },
      {
        "question": "How many have fewer than ten tracks?",
        "query": "SELECT COUNT ( * ) FROM ( SELECT COUNT ( * ) FROM albums AS t1 JOIN tracks AS t2 ON t1.id = t2.album_id GROUP BY t1.id HAVING COUNT ( t1.id ) < 10 )",
        "schema": "CREATE TABLE employees (id NUMBER, last_name TEXT); CREATE TABLE genres (id NUMBER); CREATE TABLE artists (id NUMBER, name TEXT); CREATE TABLE tracks (id NUMBER, genre_id NUMBER, album_id NUMBER, milliseconds NUMBER, bytes NUMBER, name TEXT); CREATE TABLE customers (id NUMBER, first_name TEXT, last_name TEXT); CREATE TABLE albums (id NUMBER, artist_id NUMBER, title TEXT);"
      },
      {
        "question": "How many albums are there other than those?",
        "query": "SELECT COUNT ( * ) FROM ( SELECT * FROM albums AS t1 JOIN tracks AS t2 ON t1.id = t2.album_id GROUP BY t1.id HAVING COUNT ( t1.id ) > = 10 )",
        "schema": "CREATE TABLE genres (id NUMBER); CREATE TABLE tracks (album_id NUMBER, genre_id NUMBER, bytes NUMBER, milliseconds NUMBER, name TEXT, id NUMBER); CREATE TABLE customers (first_name TEXT, id NUMBER, last_name TEXT); CREATE TABLE artists (id NUMBER, name TEXT); CREATE TABLE albums (artist_id NUMBER, id NUMBER, title TEXT); CREATE TABLE employees (last_name TEXT, id NUMBER);"
      }
    ],
    [
      {
        "question": "what is the billing address of germany | Billing address is associated with each customer, not country. Please clarify your question. | what is the address of state sp",
        "query": "SELECT address FROM customers WHERE state = 'SP'",
        "schema": "CREATE TABLE customers (address TEXT, state TEXT, id NUMBER, country TEXT, city TEXT); CREATE TABLE invoices (billing_state TEXT, billing_address TEXT, billing_country TEXT, customer_id NUMBER, billing_city TEXT);"
      },
      {
        "question": "what is the country of support rep id 5",
        "query": "SELECT country FROM customers WHERE support_rep_id = 5",
        "schema": "CREATE TABLE customers (support_rep_id NUMBER, city TEXT, state TEXT, id NUMBER, address TEXT, country TEXT); CREATE TABLE employees (country TEXT, id NUMBER); CREATE TABLE invoices (customer_id NUMBER, id NUMBER, billing_state TEXT, billing_city TEXT, billing_country TEXT, billing_address TEXT);"
      },
      {
        "question": "what is the name of album id 3",
        "query": "SELECT name FROM tracks WHERE album_id = 3",
        "schema": "CREATE TABLE tracks (genre_id NUMBER, name TEXT, id NUMBER, album_id NUMBER); CREATE TABLE employees (id NUMBER, country TEXT); CREATE TABLE invoices (billing_state TEXT, id NUMBER, billing_address TEXT, billing_city TEXT, customer_id NUMBER, billing_country TEXT); CREATE TABLE customers (address TEXT, country TEXT, city TEXT, state TEXT, id NUMBER, support_rep_id NUMBER, last_name TEXT); CREATE TABLE genres (id NUMBER, name TEXT); CREATE TABLE albums (title TEXT, id NUMBER);"
      },
      {
        "question": "what is the unit price of track id 6",
        "query": "SELECT unit_price FROM tracks WHERE id = 6",
        "schema": "CREATE TABLE employees (country TEXT, id NUMBER); CREATE TABLE customers (support_rep_id NUMBER, id NUMBER, last_name TEXT, first_name TEXT, address TEXT, city TEXT, state TEXT, country TEXT); CREATE TABLE invoice_lines (unit_price NUMBER, track_id NUMBER); CREATE TABLE albums (id NUMBER, title TEXT); CREATE TABLE genres (name TEXT, id NUMBER); CREATE TABLE invoices (billing_city TEXT, billing_address TEXT, billing_country TEXT, id NUMBER, billing_state TEXT, customer_id NUMBER); CREATE TABLE tracks (unit_price NUMBER, id NUMBER, name TEXT, genre_id NUMBER, album_id NUMBER);"
      },
      {
        "question": "what is the composer of genre id 1",
        "query": "SELECT composer FROM tracks WHERE genre_id = 1",
        "schema": "CREATE TABLE albums (title TEXT, id NUMBER); CREATE TABLE genres (name TEXT, id NUMBER); CREATE TABLE employees (id NUMBER, country TEXT); CREATE TABLE invoice_lines (unit_price NUMBER, track_id NUMBER); CREATE TABLE customers (city TEXT, support_rep_id NUMBER, first_name TEXT, state TEXT, address TEXT, id NUMBER, country TEXT, last_name TEXT); CREATE TABLE invoices (billing_state TEXT, id NUMBER, customer_id NUMBER, billing_address TEXT, billing_country TEXT, billing_city TEXT); CREATE TABLE tracks (composer TEXT, album_id NUMBER, id NUMBER, unit_price NUMBER, name TEXT, genre_id NUMBER);"
      }
    ],
    [
      {
        "question": "What are the top 5 genres? | Do you mean sort by the id number? | Yes please",
        "query": "SELECT id,name FROM genres ORDER BY id DESC LIMIT 5",
        "schema": "CREATE TABLE genres (name TEXT, id NUMBER); CREATE TABLE media_types (id NUMBER, name TEXT); CREATE TABLE albums (id NUMBER); CREATE TABLE tracks (id NUMBER, media_type_id NUMBER, genre_id NUMBER, album_id NUMBER);"
      },
      {
        "question": "Could you please provide the total tracks on each top 5 genres by number of tracks?",
        "query": "SELECT t1.id,COUNT ( * ) FROM genres AS t1 JOIN tracks AS t2 ON t2.genre_id = t1.id GROUP BY t1.id ORDER BY COUNT ( * ) DESC LIMIT 5",
        "schema": "CREATE TABLE albums (id NUMBER); CREATE TABLE media_types (id NUMBER, name TEXT); CREATE TABLE tracks (name TEXT, id NUMBER, genre_id NUMBER, album_id NUMBER, media_type_id NUMBER); CREATE TABLE invoices (total NUMBER); CREATE TABLE genres (id NUMBER, name TEXT);"
      },
      {
        "question": "Do you have the best composer of each top 5 genre by number of tracks?",
        "query": "SELECT t1.id,t2.composer FROM genres AS t1 JOIN tracks AS t2 ON t2.genre_id = t1.id GROUP BY t1.id ORDER BY COUNT ( * ) DESC LIMIT 5",
        "schema": "CREATE TABLE genres (id NUMBER, name TEXT); CREATE TABLE tracks (album_id NUMBER, id NUMBER, genre_id NUMBER, composer TEXT, name TEXT, media_type_id NUMBER); CREATE TABLE albums (id NUMBER); CREATE TABLE media_types (name TEXT, id NUMBER); CREATE TABLE invoices (total NUMBER);"
      },
      {
        "question": "Overall, do you have the best ranked composer? | I do not quite understand what you mean. Do you mean rank by milliseconds? | Yes please.",
        "query": "SELECT composer FROM tracks ORDER BY milliseconds",
        "schema": "CREATE TABLE genres (name TEXT, id NUMBER); CREATE TABLE media_types (name TEXT, id NUMBER); CREATE TABLE tracks (media_type_id NUMBER, album_id NUMBER, composer TEXT, name TEXT, genre_id NUMBER, id NUMBER, milliseconds NUMBER); CREATE TABLE albums (id NUMBER); CREATE TABLE invoices (total NUMBER);"
      }
    ],
    [
      {
        "question": "What is employee named Nancy Andrews phone number?",
        "query": "SELECT phone FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Andrews\"",
        "schema": "CREATE TABLE tracks (name TEXT); CREATE TABLE employees (last_name TEXT, phone TEXT, title TEXT, address TEXT, id NUMBER, reports_to NUMBER, email TEXT, first_name TEXT, fax TEXT); CREATE TABLE artists (name TEXT, id NUMBER); CREATE TABLE invoices (id NUMBER); CREATE TABLE customers (support_rep_id NUMBER, phone TEXT, id NUMBER);"
      },
      {
        "question": "OK. What is it for Nancy Edwards?",
        "query": "SELECT phone FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\"",
        "schema": "CREATE TABLE employees (fax TEXT, first_name TEXT, email TEXT, phone TEXT, reports_to NUMBER, address TEXT, title TEXT, last_name TEXT, id NUMBER); CREATE TABLE invoices (id NUMBER); CREATE TABLE artists (id NUMBER, name TEXT); CREATE TABLE customers (id NUMBER, phone TEXT, support_rep_id NUMBER); CREATE TABLE tracks (name TEXT);"
      },
      {
        "question": "Great! And her fax number?",
        "query": "SELECT fax FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\"",
        "schema": "CREATE TABLE tracks (name TEXT); CREATE TABLE artists (id NUMBER, name TEXT); CREATE TABLE employees (first_name TEXT, last_name TEXT, address TEXT, reports_to NUMBER, id NUMBER, email TEXT, title TEXT, fax TEXT, phone TEXT); CREATE TABLE customers (phone TEXT, id NUMBER, support_rep_id NUMBER, fax TEXT); CREATE TABLE invoices (id NUMBER);"
      },
      {
        "question": "Okay. What is her job title?",
        "query": "SELECT title FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\"",
        "schema": "CREATE TABLE invoices (id NUMBER); CREATE TABLE employees (reports_to NUMBER, first_name TEXT, id NUMBER, last_name TEXT, title TEXT, email TEXT, phone TEXT, fax TEXT, address TEXT); CREATE TABLE customers (fax TEXT, id NUMBER, phone TEXT, support_rep_id NUMBER); CREATE TABLE tracks (name TEXT); CREATE TABLE artists (name TEXT, id NUMBER);"
      },
      {
        "question": "How many employees have that job title?",
        "query": "SELECT COUNT ( * ) FROM employees WHERE title = \"Sales Manager\"",
        "schema": "CREATE TABLE tracks (name TEXT); CREATE TABLE artists (name TEXT, id NUMBER); CREATE TABLE employees (title TEXT, id NUMBER, phone TEXT, address TEXT, email TEXT, fax TEXT, last_name TEXT, reports_to NUMBER, first_name TEXT); CREATE TABLE customers (phone TEXT, fax TEXT, support_rep_id NUMBER, id NUMBER); CREATE TABLE invoices (id NUMBER);"
      }
    ],
    [
      {
        "question": "Can you tell me how many different purchases Lucas Mancini has made?",
        "query": "SELECT COUNT ( * ) FROM invoices AS t2 JOIN customers AS t1 ON t1.id = t2.customer_id WHERE t1.first_name = \"Lucas\" AND t1.last_name = \"Mancini\"",
        "schema": "CREATE TABLE employees (first_name TEXT, last_name TEXT); CREATE TABLE customers (id NUMBER, first_name TEXT, last_name TEXT); CREATE TABLE invoices (total NUMBER, id NUMBER, customer_id NUMBER);"
      },
      {
        "question": "Great!  How much total money has Lucas Mancini spent in total?",
        "query": "SELECT SUM ( t2.total ) FROM customers AS t1 JOIN invoices AS t2 ON t1.id = t2.customer_id WHERE t1.first_name = \"Lucas\" AND t1.last_name = \"Mancini\"",
        "schema": "CREATE TABLE customers (id NUMBER, first_name TEXT, last_name TEXT); CREATE TABLE invoices (id NUMBER, total NUMBER, customer_id NUMBER); CREATE TABLE invoice_lines (unit_price NUMBER); CREATE TABLE employees (last_name TEXT, first_name TEXT);"
      },
      {
        "question": "What was the most recent associated invoice date for Lucas Mancini?",
        "query": "SELECT t2.invoice_date FROM customers AS t1 JOIN invoices AS t2 ON t1.id = t2.customer_id WHERE t1.first_name = \"Lucas\" AND t1.last_name = \"Mancini\" ORDER BY t2.invoice_date DESC LIMIT 1",
        "schema": "CREATE TABLE invoice_lines (unit_price NUMBER); CREATE TABLE invoices (invoice_date TIME, id NUMBER, total NUMBER, customer_id NUMBER); CREATE TABLE customers (first_name TEXT, id NUMBER, last_name TEXT); CREATE TABLE employees (last_name TEXT, first_name TEXT);"
      }
    ],
    [
      {
        "question": "How many invoices are from the US?",
        "query": "SELECT COUNT ( * ) FROM invoices WHERE billing_country = \"USA\"",
        "schema": "CREATE TABLE invoices (billing_country TEXT, billing_address TEXT, customer_id NUMBER, id NUMBER, total NUMBER, billing_state TEXT, billing_city TEXT); CREATE TABLE employees (state TEXT, id NUMBER, country TEXT, city TEXT); CREATE TABLE customers (state TEXT, country TEXT, id NUMBER, city TEXT); CREATE TABLE tracks (id NUMBER); CREATE TABLE invoice_lines (invoice_id NUMBER);"
      },
      {
        "question": "Could you list them grouped by state?",
        "query": "SELECT billing_state, COUNT ( * ) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state",
        "schema": "CREATE TABLE tracks (id NUMBER); CREATE TABLE customers (id NUMBER, city TEXT, country TEXT, state TEXT); CREATE TABLE invoices (billing_city TEXT, total NUMBER, customer_id NUMBER, id NUMBER, billing_state TEXT, billing_address TEXT, billing_country TEXT); CREATE TABLE employees (city TEXT, country TEXT, id NUMBER, state TEXT); CREATE TABLE invoice_lines (invoice_id NUMBER);"
      },
      {
        "question": "Could you list the number of invoices grouped by country?",
        "query": "SELECT billing_country, COUNT ( * ) FROM invoices GROUP BY billing_country",
        "schema": "CREATE TABLE invoices (billing_state TEXT, customer_id NUMBER, total NUMBER, billing_city TEXT, id NUMBER, billing_address TEXT, billing_country TEXT); CREATE TABLE tracks (id NUMBER); CREATE TABLE customers (id NUMBER, city TEXT, state TEXT, country TEXT); CREATE TABLE invoice_lines (invoice_id NUMBER); CREATE TABLE employees (state TEXT, country TEXT, id NUMBER, city TEXT);"
      },
      {
        "question": "Can you list the number of invoices from the US grouped by billing city?",
        "query": "SELECT billing_city, COUNT ( * ) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_city",
        "schema": "CREATE TABLE customers (city TEXT, id NUMBER, state TEXT, country TEXT); CREATE TABLE tracks (id NUMBER); CREATE TABLE invoice_lines (invoice_id NUMBER); CREATE TABLE employees (state TEXT, country TEXT, id NUMBER, city TEXT); CREATE TABLE invoices (id NUMBER, billing_city TEXT, billing_address TEXT, customer_id NUMBER, billing_state TEXT, total NUMBER, billing_country TEXT);"
      },
      {
        "question": "Can you list the number of invoices from all countries except the US grouped by billing city?",
        "query": "SELECT billing_city, COUNT ( * ) FROM invoices WHERE billing_country ! = \"USA\" GROUP BY billing_city",
        "schema": "CREATE TABLE tracks (id NUMBER); CREATE TABLE employees (id NUMBER, country TEXT, state TEXT, city TEXT); CREATE TABLE invoice_lines (invoice_id NUMBER); CREATE TABLE customers (city TEXT, country TEXT, id NUMBER, state TEXT); CREATE TABLE invoices (billing_state TEXT, billing_city TEXT, customer_id NUMBER, billing_country TEXT, id NUMBER, billing_address TEXT, total NUMBER);"
      }
    ],
    [
      {
        "question": "What is country of origin of Eduardo Martins? | The country of the customer Eduardo Martins is Brazil. | Of which company is he a customer of?",
        "query": "SELECT company FROM customers WHERE first_name = \"Eduardo\" AND last_name = \"Martins\"",
        "schema": "CREATE TABLE invoices (customer_id NUMBER); CREATE TABLE artists (name TEXT); CREATE TABLE customers (id NUMBER, first_name TEXT, company TEXT, country TEXT, state TEXT, last_name TEXT);"
      },
      {
        "question": "And what is his phone number?",
        "query": "SELECT phone FROM customers WHERE first_name = \"Eduardo\" AND last_name = \"Martins\"",
        "schema": "CREATE TABLE artists (name TEXT); CREATE TABLE customers (last_name TEXT, state TEXT, phone TEXT, first_name TEXT, company TEXT, country TEXT, id NUMBER); CREATE TABLE employees (phone TEXT); CREATE TABLE invoices (customer_id NUMBER);"
      }
    ],
    [
      {
        "question": "Address of  Lu\u00eds K\u00f6hler? | Is Lu\u00eds K\u00f6hler  full  name? | Yes",
        "query": "SELECT address FROM customers WHERE first_name = \"Lu\u00eds\" AND last_name = \" K\u00f6hler\"",
        "schema": "CREATE TABLE employees (title TEXT, address TEXT, city TEXT, id NUMBER, reports_to NUMBER, first_name TEXT, last_name TEXT); CREATE TABLE artists (name TEXT, id NUMBER); CREATE TABLE customers (first_name TEXT, city TEXT, address TEXT, id NUMBER, last_name TEXT, support_rep_id NUMBER); CREATE TABLE invoices (billing_address TEXT, customer_id NUMBER);"
      },
      {
        "question": "Provide address of ID 1?",
        "query": "SELECT address FROM customers WHERE id = 1",
        "schema": "CREATE TABLE artists (id NUMBER, name TEXT); CREATE TABLE employees (reports_to NUMBER, id NUMBER, city TEXT, last_name TEXT, title TEXT, first_name TEXT, address TEXT); CREATE TABLE invoices (id NUMBER, billing_address TEXT, customer_id NUMBER); CREATE TABLE customers (city TEXT, address TEXT, last_name TEXT, first_name TEXT, id NUMBER, support_rep_id NUMBER);"
      },
      {
        "question": "Provide email and phone number of Astrid Gruber's?",
        "query": "SELECT email,phone FROM customers WHERE first_name = \"Astrid\" AND last_name = \"Gruber\"",
        "schema": "CREATE TABLE invoices (customer_id NUMBER, billing_address TEXT, id NUMBER); CREATE TABLE customers (support_rep_id NUMBER, first_name TEXT, email TEXT, address TEXT, id NUMBER, phone TEXT, last_name TEXT, city TEXT, company TEXT); CREATE TABLE artists (name TEXT, id NUMBER); CREATE TABLE employees (id NUMBER, address TEXT, phone TEXT, city TEXT, title TEXT, reports_to NUMBER, first_name TEXT, email TEXT, last_name TEXT);"
      },
      {
        "question": "Postal code of ID 3?",
        "query": "SELECT postal_code FROM customers WHERE id = 3",
        "schema": "CREATE TABLE employees (email TEXT, phone TEXT, first_name TEXT, city TEXT, reports_to NUMBER, last_name TEXT, address TEXT, id NUMBER, title TEXT); CREATE TABLE invoices (billing_address TEXT, id NUMBER, customer_id NUMBER, billing_postal_code TEXT); CREATE TABLE customers (city TEXT, support_rep_id NUMBER, postal_code TEXT, company TEXT, email TEXT, last_name TEXT, address TEXT, phone TEXT, first_name TEXT, id NUMBER); CREATE TABLE artists (name TEXT, id NUMBER);"
      }
    ],
    [
      {
        "question": "What are the average invoice sizes of each country?",
        "query": "SELECT billing_country , AVG ( total ) FROM invoices GROUP BY billing_country",
        "schema": "CREATE TABLE employees (country TEXT); CREATE TABLE customers (id NUMBER, country TEXT); CREATE TABLE invoices (total NUMBER, billing_country TEXT, billing_state TEXT, id NUMBER, customer_id NUMBER); CREATE TABLE tracks (unit_price NUMBER); CREATE TABLE invoice_lines (quantity NUMBER, invoice_id NUMBER);"
      },
      {
        "question": "What was the country that had the highest invoice size?",
        "query": "SELECT billing_country FROM invoices ORDER BY total DESC LIMIT 1",
        "schema": "CREATE TABLE invoice_lines (invoice_id NUMBER, quantity NUMBER); CREATE TABLE employees (country TEXT); CREATE TABLE invoices (billing_country TEXT, customer_id NUMBER, billing_state TEXT, total NUMBER, id NUMBER); CREATE TABLE customers (id NUMBER, country TEXT); CREATE TABLE tracks (unit_price NUMBER);"
      },
      {
        "question": "What are the top 10 countries with the highest invoice size along with their amount?",
        "query": "SELECT billing_country , total FROM invoices ORDER BY total DESC LIMIT 10",
        "schema": "CREATE TABLE invoice_lines (invoice_id NUMBER, quantity NUMBER); CREATE TABLE customers (country TEXT, id NUMBER); CREATE TABLE invoices (customer_id NUMBER, total NUMBER, billing_state TEXT, id NUMBER, billing_country TEXT); CREATE TABLE employees (country TEXT); CREATE TABLE tracks (unit_price NUMBER);"
      }
    ],
    [
      {
        "question": "how many orders are there",
        "query": "SELECT COUNT ( * ) FROM invoices",
        "schema": "CREATE TABLE customers (id NUMBER, last_name TEXT, first_name TEXT); CREATE TABLE employees (id NUMBER); CREATE TABLE invoices (id NUMBER);"
      },
      {
        "question": "find the ten customers with the most total orders",
        "query": "SELECT * FROM customers AS t1 JOIN invoices AS t2 ON t2.customer_id = t1.id GROUP BY t1.id ORDER BY COUNT ( * ) DESC LIMIT 10",
        "schema": "CREATE TABLE employees (id NUMBER); CREATE TABLE customers (first_name TEXT, last_name TEXT, id NUMBER); CREATE TABLE invoices (customer_id NUMBER, total NUMBER, id NUMBER);"
      },
      {
        "question": "how many orders do each of them have?",
        "query": "SELECT COUNT ( * ) FROM customers AS t1 JOIN invoices AS t2 ON t2.customer_id = t1.id GROUP BY t1.id ORDER BY COUNT ( * ) DESC LIMIT 10",
        "schema": "CREATE TABLE invoices (total NUMBER, id NUMBER, customer_id NUMBER); CREATE TABLE employees (id NUMBER); CREATE TABLE customers (first_name TEXT, last_name TEXT, id NUMBER);"
      },
      {
        "question": "how many customers are there",
        "query": "SELECT COUNT ( * ) FROM customers",
        "schema": "CREATE TABLE customers (last_name TEXT, first_name TEXT, id NUMBER, company TEXT); CREATE TABLE invoices (customer_id NUMBER, id NUMBER, total NUMBER); CREATE TABLE employees (id NUMBER);"
      },
      {
        "question": "how many customers have 7 or more orders",
        "query": "SELECT COUNT ( * ) FROM ( SELECT * FROM customers AS t1 JOIN invoices AS t2 ON t2.customer_id = t1.id GROUP BY t1.id HAVING COUNT ( * ) > = 7 )",
        "schema": "CREATE TABLE customers (id NUMBER, last_name TEXT, first_name TEXT, company TEXT); CREATE TABLE invoices (customer_id NUMBER, id NUMBER, total NUMBER); CREATE TABLE employees (id NUMBER);"
      }
    ],
    [
      {
        "question": "Please show me a list of the top 5 countries by number of invoices. List country name.",
        "query": "SELECT billing_country FROM invoices GROUP BY billing_country ORDER BY COUNT ( * ) DESC LIMIT 5",
        "schema": "CREATE TABLE customers (country TEXT); CREATE TABLE employees (country TEXT); CREATE TABLE invoices (total NUMBER, id NUMBER, billing_country TEXT);"
      },
      {
        "question": "OK! Can you also show me the number of invoices for these 5 countries.",
        "query": "SELECT billing_country,COUNT ( * ) FROM invoices GROUP BY billing_country ORDER BY COUNT ( * ) DESC LIMIT 5",
        "schema": "CREATE TABLE employees (country TEXT); CREATE TABLE customers (country TEXT); CREATE TABLE invoices (total NUMBER, billing_country TEXT, id NUMBER, billing_state TEXT);"
      },
      {
        "question": "May I also see the names of bottom 5 countries by number of invoices. Please show me country names and number of invoices.",
        "query": "SELECT billing_country , COUNT ( * ) FROM invoices GROUP BY billing_country ORDER BY COUNT ( * ) LIMIT 5",
        "schema": "CREATE TABLE employees (country TEXT); CREATE TABLE invoices (billing_state TEXT, total NUMBER, id NUMBER, billing_country TEXT); CREATE TABLE customers (country TEXT);"
      },
      {
        "question": "Can you show me the postal codes for these countries.",
        "query": "SELECT billing_country,billing_postal_code FROM invoices GROUP BY billing_country ORDER BY COUNT ( * ) LIMIT 5",
        "schema": "CREATE TABLE invoices (id NUMBER, billing_postal_code TEXT, total NUMBER, billing_state TEXT, billing_country TEXT); CREATE TABLE customers (country TEXT, postal_code TEXT); CREATE TABLE employees (country TEXT);"
      }
    ],
    [
      {
        "question": "How many tracks are in the Rock genre?",
        "query": "SELECT COUNT ( t2.id ) FROM genres AS t1 JOIN tracks AS t2 ON t1.id = t2.genre_id WHERE t1.name = \"Rock\"",
        "schema": "CREATE TABLE genres (id NUMBER, name TEXT); CREATE TABLE tracks (id NUMBER, milliseconds NUMBER, genre_id NUMBER, album_id NUMBER, name TEXT); CREATE TABLE invoice_lines (track_id NUMBER);"
      },
      {
        "question": "Show me the name of tracks in the Rock genre.",
        "query": "SELECT t2.name FROM genres AS t1 JOIN tracks AS t2 ON t1.id = t2.genre_id WHERE t1.name = \"Rock\"",
        "schema": "CREATE TABLE tracks (milliseconds NUMBER, album_id NUMBER, id NUMBER, genre_id NUMBER, name TEXT); CREATE TABLE invoice_lines (track_id NUMBER); CREATE TABLE genres (name TEXT, id NUMBER);"
      },
      {
        "question": "What is the average unit price for tracks in the Rock genre?",
        "query": "SELECT AVG ( t2.unit_price ) FROM genres AS t1 JOIN tracks AS t2 ON t1.id = t2.genre_id WHERE t1.name = \"Rock\"",
        "schema": "CREATE TABLE tracks (unit_price NUMBER, genre_id NUMBER, milliseconds NUMBER, name TEXT, album_id NUMBER, id NUMBER); CREATE TABLE invoices (total NUMBER); CREATE TABLE genres (name TEXT, id NUMBER); CREATE TABLE invoice_lines (unit_price NUMBER, track_id NUMBER);"
      },
      {
        "question": "How many tracks are in the Jazz genre?",
        "query": "SELECT COUNT ( t2.name ) FROM genres AS t1 JOIN tracks AS t2 ON t1.id = t2.genre_id WHERE t1.name = \"Jazz\"",
        "schema": "CREATE TABLE invoices (total NUMBER); CREATE TABLE genres (name TEXT, id NUMBER); CREATE TABLE invoice_lines (unit_price NUMBER, track_id NUMBER); CREATE TABLE tracks (unit_price NUMBER, name TEXT, id NUMBER, genre_id NUMBER, milliseconds NUMBER, album_id NUMBER);"
      },
      {
        "question": "How many milliseconds is the Rock genre track Balls to the Wall?",
        "query": "SELECT t2.milliseconds FROM genres AS t1 JOIN tracks AS t2 ON t1.id = t2.genre_id WHERE t1.name = \"Rock\" AND t2.name = 'Balls to the Wall'",
        "schema": "CREATE TABLE tracks (name TEXT, id NUMBER, album_id NUMBER, genre_id NUMBER, milliseconds NUMBER, unit_price NUMBER); CREATE TABLE genres (id NUMBER, name TEXT); CREATE TABLE invoice_lines (unit_price NUMBER, track_id NUMBER); CREATE TABLE invoices (total NUMBER);"
      }
    ],
    [
      {
        "question": "How many released albums are there?",
        "query": "SELECT COUNT ( * ) FROM albums",
        "schema": "CREATE TABLE tracks (album_id NUMBER, id NUMBER); CREATE TABLE employees (id NUMBER); CREATE TABLE artists (id NUMBER); CREATE TABLE albums (id NUMBER, title TEXT, artist_id NUMBER);"
      },
      {
        "question": "How many artists have released albums?",
        "query": "SELECT COUNT ( * ) FROM artists WHERE id IN ( SELECT artist_id FROM albums )",
        "schema": "CREATE TABLE employees (id NUMBER); CREATE TABLE tracks (album_id NUMBER, id NUMBER); CREATE TABLE albums (title TEXT, id NUMBER, artist_id NUMBER); CREATE TABLE artists (id NUMBER, name TEXT);"
      },
      {
        "question": "how many albums are released by artist with 'Led' in their name?",
        "query": "SELECT COUNT ( * ) FROM artists AS t1 JOIN albums AS t2 ON t1.id = t2.artist_id WHERE t1.name LIKE '%Led%'",
        "schema": "CREATE TABLE albums (artist_id NUMBER, title TEXT, id NUMBER); CREATE TABLE employees (id NUMBER); CREATE TABLE tracks (id NUMBER, album_id NUMBER); CREATE TABLE artists (id NUMBER, name TEXT);"
      },
      {
        "question": "Show me the names of those albums",
        "query": "SELECT t2.title FROM artists AS t1 JOIN albums AS t2 ON t1.id = t2.artist_id WHERE t1.name LIKE '%Led%'",
        "schema": "CREATE TABLE albums (artist_id NUMBER, title TEXT, id NUMBER); CREATE TABLE artists (id NUMBER, name TEXT); CREATE TABLE employees (id NUMBER); CREATE TABLE tracks (id NUMBER, name TEXT, album_id NUMBER);"
      }
    ],
    [
      {
        "question": "Can you please list the names of all tracks in the playlists of Movies?",
        "query": "SELECT t1.name FROM tracks AS t1 JOIN playlist_tracks AS t2 ON t1.id = t2.track_id JOIN playlists AS t3 ON t3.id = t2.playlist_id WHERE t3.name = \"Movies\"",
        "schema": "CREATE TABLE tracks (id NUMBER, name TEXT, genre_id NUMBER, album_id NUMBER); CREATE TABLE playlist_tracks (track_id NUMBER, playlist_id NUMBER); CREATE TABLE albums (id NUMBER, title TEXT); CREATE TABLE playlists (name TEXT, id NUMBER);"
      },
      {
        "question": "What is the ID of Movies?",
        "query": "SELECT id FROM playlists WHERE name = \"Movies\"",
        "schema": "CREATE TABLE playlist_tracks (playlist_id NUMBER, track_id NUMBER); CREATE TABLE tracks (genre_id NUMBER, id NUMBER, album_id NUMBER, name TEXT); CREATE TABLE playlists (id NUMBER, name TEXT); CREATE TABLE albums (title TEXT, id NUMBER);"
      }
    ],
    [
      {
        "question": "How many employees are IT Staff?",
        "query": "SELECT COUNT ( * ) FROM employees WHERE title = 'IT Staff'",
        "schema": "CREATE TABLE employees (title TEXT, id NUMBER, first_name TEXT, state TEXT, reports_to NUMBER, address TEXT, last_name TEXT, city TEXT); CREATE TABLE tracks (id NUMBER, album_id NUMBER, name TEXT); CREATE TABLE artists (id NUMBER); CREATE TABLE albums (id NUMBER); CREATE TABLE invoices (id NUMBER);"
      },
      {
        "question": "How many are in Calgary?",
        "query": "SELECT COUNT ( * ) FROM employees WHERE title = 'IT Staff' AND city = 'Calgary'",
        "schema": "CREATE TABLE invoices (billing_city TEXT, id NUMBER); CREATE TABLE albums (id NUMBER); CREATE TABLE artists (id NUMBER); CREATE TABLE tracks (name TEXT, album_id NUMBER, id NUMBER); CREATE TABLE customers (city TEXT); CREATE TABLE employees (city TEXT, address TEXT, last_name TEXT, state TEXT, first_name TEXT, id NUMBER, title TEXT, reports_to NUMBER, country TEXT);"
      },
      {
        "question": "how about in Edmonton?",
        "query": "SELECT COUNT ( * ) FROM employees WHERE title = 'IT Staff' AND city = 'Edmonton'",
        "schema": "CREATE TABLE employees (title TEXT, reports_to NUMBER, city TEXT, last_name TEXT, state TEXT, address TEXT, first_name TEXT, id NUMBER, country TEXT); CREATE TABLE customers (city TEXT); CREATE TABLE invoices (billing_city TEXT, id NUMBER); CREATE TABLE artists (id NUMBER); CREATE TABLE albums (id NUMBER); CREATE TABLE tracks (album_id NUMBER, name TEXT, id NUMBER);"
      },
      {
        "question": "What city are the 2 employees in? | You mean the 2 employees with title \"IT Staff\"? | yes, the two employees with the title of IT Staff.",
        "query": "SELECT DISTINCT city FROM employees WHERE title = 'IT Staff'",
        "schema": "CREATE TABLE customers (city TEXT); CREATE TABLE tracks (id NUMBER, album_id NUMBER, name TEXT); CREATE TABLE invoices (billing_city TEXT, id NUMBER); CREATE TABLE albums (id NUMBER); CREATE TABLE employees (title TEXT, state TEXT, address TEXT, country TEXT, first_name TEXT, reports_to NUMBER, city TEXT, id NUMBER, last_name TEXT); CREATE TABLE artists (id NUMBER);"
      }
    ],
    [
      {
        "question": "What are the addresses of the employees? | Do you mean all of the employees? | Yes",
        "query": "SELECT address FROM employees",
        "schema": "CREATE TABLE invoices (billing_address TEXT); CREATE TABLE employees (postal_code TEXT, title TEXT, city TEXT, id NUMBER, address TEXT, first_name TEXT, last_name TEXT, state TEXT, reports_to NUMBER, country TEXT);"
      },
      {
        "question": "Which  cities are they from?",
        "query": "SELECT city FROM employees",
        "schema": "CREATE TABLE employees (title TEXT, reports_to NUMBER, state TEXT, id NUMBER, city TEXT, last_name TEXT, country TEXT, address TEXT, first_name TEXT, postal_code TEXT); CREATE TABLE invoices (billing_city TEXT, billing_address TEXT);"
      },
      {
        "question": "What are their emails?",
        "query": "SELECT email FROM employees",
        "schema": "CREATE TABLE employees (address TEXT, title TEXT, last_name TEXT, country TEXT, state TEXT, city TEXT, reports_to NUMBER, first_name TEXT, id NUMBER, email TEXT, postal_code TEXT); CREATE TABLE invoices (billing_city TEXT, billing_address TEXT);"
      }
    ],
    [
      {
        "question": "What county does Roberto Almeida live in?",
        "query": "SELECT country FROM customers WHERE first_name = \"Roberto\" AND last_name = \"Almeida\"",
        "schema": "CREATE TABLE customers (address TEXT, first_name TEXT, company TEXT, country TEXT, last_name TEXT, id NUMBER, city TEXT, state TEXT); CREATE TABLE employees (address TEXT, title TEXT, id NUMBER, city TEXT, last_name TEXT, first_name TEXT); CREATE TABLE artists (id NUMBER, name TEXT); CREATE TABLE invoices (id NUMBER, billing_city TEXT, customer_id NUMBER, billing_address TEXT, billing_country TEXT);"
      },
      {
        "question": "What state does he live in?",
        "query": "SELECT state FROM customers WHERE first_name = \"Roberto\" AND last_name = \"Almeida\"",
        "schema": "CREATE TABLE artists (id NUMBER, name TEXT); CREATE TABLE invoices (billing_city TEXT, customer_id NUMBER, id NUMBER, billing_country TEXT, billing_address TEXT, billing_state TEXT); CREATE TABLE customers (country TEXT, first_name TEXT, last_name TEXT, id NUMBER, state TEXT, address TEXT, company TEXT, city TEXT); CREATE TABLE employees (city TEXT, id NUMBER, title TEXT, first_name TEXT, last_name TEXT, address TEXT);"
      },
      {
        "question": "What is his address, please?",
        "query": "SELECT address FROM customers WHERE first_name = \"Roberto\" AND last_name = \"Almeida\"",
        "schema": "CREATE TABLE employees (address TEXT, city TEXT, title TEXT, id NUMBER, first_name TEXT, last_name TEXT); CREATE TABLE customers (last_name TEXT, first_name TEXT, company TEXT, id NUMBER, state TEXT, country TEXT, city TEXT, address TEXT); CREATE TABLE artists (id NUMBER, name TEXT); CREATE TABLE invoices (billing_city TEXT, billing_country TEXT, customer_id NUMBER, id NUMBER, billing_state TEXT, billing_address TEXT);"
      },
      {
        "question": "What company does he work for?",
        "query": "SELECT company FROM customers WHERE first_name = \"Roberto\" AND last_name = \"Almeida\"",
        "schema": "CREATE TABLE employees (first_name TEXT, last_name TEXT, title TEXT, city TEXT, id NUMBER, address TEXT); CREATE TABLE customers (state TEXT, id NUMBER, country TEXT, address TEXT, company TEXT, first_name TEXT, city TEXT, last_name TEXT); CREATE TABLE invoices (billing_country TEXT, billing_state TEXT, id NUMBER, billing_address TEXT, customer_id NUMBER, billing_city TEXT); CREATE TABLE artists (id NUMBER, name TEXT);"
      },
      {
        "question": "What are the names of the other people who work for that company?",
        "query": "SELECT first_name,last_name FROM customers WHERE company = \"Riotur\" AND first_name ! = \"Roberto\" AND last_name ! = \"Almeida\"",
        "schema": "CREATE TABLE employees (address TEXT, last_name TEXT, first_name TEXT, city TEXT, id NUMBER, title TEXT); CREATE TABLE customers (id NUMBER, address TEXT, city TEXT, last_name TEXT, country TEXT, state TEXT, company TEXT, first_name TEXT); CREATE TABLE artists (id NUMBER, name TEXT); CREATE TABLE invoices (billing_city TEXT, customer_id NUMBER, id NUMBER, billing_address TEXT, billing_state TEXT, billing_country TEXT);"
      }
    ],
    [
      {
        "question": "How many invoices in this table?",
        "query": "SELECT COUNT ( * ) FROM invoices",
        "schema": "CREATE TABLE employees (id NUMBER); CREATE TABLE tracks (id NUMBER); CREATE TABLE invoice_lines (id NUMBER, track_id NUMBER, invoice_id NUMBER); CREATE TABLE invoices (billing_country TEXT, billing_postal_code TEXT, total NUMBER, customer_id NUMBER, billing_state TEXT, billing_city TEXT, id NUMBER); CREATE TABLE customers (id NUMBER, support_rep_id NUMBER, last_name TEXT);"
      },
      {
        "question": "List total amount of invoice from Germany?",
        "query": "SELECT SUM ( total ) FROM invoices WHERE billing_country = \"Germany\"",
        "schema": "CREATE TABLE customers (country TEXT, state TEXT, city TEXT, support_rep_id NUMBER, last_name TEXT, id NUMBER); CREATE TABLE tracks (id NUMBER); CREATE TABLE invoice_lines (id NUMBER, track_id NUMBER, quantity NUMBER, invoice_id NUMBER); CREATE TABLE employees (state TEXT, country TEXT, id NUMBER); CREATE TABLE invoices (total NUMBER, billing_country TEXT, billing_city TEXT, id NUMBER, billing_postal_code TEXT, billing_state TEXT, customer_id NUMBER);"
      },
      {
        "question": "List total amount of invoices from Norway?",
        "query": "SELECT SUM ( total ) FROM invoices WHERE billing_country = \"Norway\"",
        "schema": "CREATE TABLE customers (support_rep_id NUMBER, last_name TEXT, state TEXT, city TEXT, id NUMBER, country TEXT); CREATE TABLE tracks (id NUMBER); CREATE TABLE invoices (billing_city TEXT, customer_id NUMBER, id NUMBER, billing_country TEXT, billing_state TEXT, billing_postal_code TEXT, total NUMBER); CREATE TABLE invoice_lines (quantity NUMBER, invoice_id NUMBER, track_id NUMBER, id NUMBER); CREATE TABLE employees (country TEXT, id NUMBER, state TEXT);"
      },
      {
        "question": "How many billing countries in this invoice? | Do  you  mean  the types  of  billing countries in this invoice | Yes.",
        "query": "SELECT COUNT ( DISTINCT billing_country ) FROM invoices",
        "schema": "CREATE TABLE tracks (id NUMBER); CREATE TABLE invoice_lines (quantity NUMBER, id NUMBER, invoice_id NUMBER, track_id NUMBER); CREATE TABLE customers (city TEXT, last_name TEXT, country TEXT, support_rep_id NUMBER, id NUMBER, state TEXT); CREATE TABLE invoices (id NUMBER, total NUMBER, billing_state TEXT, billing_city TEXT, customer_id NUMBER, billing_country TEXT, billing_postal_code TEXT); CREATE TABLE employees (id NUMBER, state TEXT, country TEXT);"
      }
    ],
    [
      {
        "question": "Hello. Can you give me the state in the US with most invoices?",
        "query": "SELECT billing_state FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE customers (state TEXT, country TEXT); CREATE TABLE invoices (billing_country TEXT, billing_state TEXT, id NUMBER, total NUMBER, billing_address TEXT); CREATE TABLE employees (state TEXT);"
      },
      {
        "question": "Can you give me the billing cities for these invoices? | here are the billing cities of the invoices from the state in the USA with the most invoices | How about postal codes for these invoices?",
        "query": "SELECT DISTINCT billing_postal_code FROM invoices WHERE billing_state = ( SELECT billing_state FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state ORDER BY COUNT ( * ) DESC LIMIT 1 )",
        "schema": "CREATE TABLE invoices (billing_address TEXT, billing_country TEXT, id NUMBER, billing_state TEXT, billing_postal_code TEXT, total NUMBER, billing_city TEXT); CREATE TABLE employees (state TEXT); CREATE TABLE customers (postal_code TEXT, country TEXT, state TEXT);"
      },
      {
        "question": "Can you give me the billing dates as well? | do you mean the date of invoice? | Yes, date of invoice please",
        "query": "SELECT DISTINCT invoice_date FROM invoices WHERE billing_state = ( SELECT billing_state FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state ORDER BY COUNT ( * ) DESC LIMIT 1 )",
        "schema": "CREATE TABLE invoices (billing_state TEXT, total NUMBER, billing_city TEXT, billing_postal_code TEXT, billing_country TEXT, invoice_date TIME, billing_address TEXT, id NUMBER); CREATE TABLE customers (country TEXT, state TEXT, postal_code TEXT); CREATE TABLE employees (state TEXT);"
      }
    ],
    [
      {
        "question": "List all tracks bought by customer Daan Peeters",
        "query": "SELECT t1.name FROM tracks AS t1 JOIN invoice_lines AS t2 ON t1.id = t2.track_id JOIN invoices AS t3 ON t3.id = t2.invoice_id JOIN customers AS t4 ON t4.id = t3.customer_id WHERE t4.first_name = \"Daan\" AND t4.last_name = \"Peeters\"",
        "schema": "CREATE TABLE albums (id NUMBER); CREATE TABLE customers (last_name TEXT, id NUMBER, company TEXT, first_name TEXT); CREATE TABLE employees (last_name TEXT, first_name TEXT); CREATE TABLE artists (id NUMBER, name TEXT); CREATE TABLE tracks (album_id NUMBER, id NUMBER, name TEXT, unit_price NUMBER); CREATE TABLE invoices (id NUMBER, customer_id NUMBER, total NUMBER); CREATE TABLE invoice_lines (id NUMBER, quantity NUMBER, unit_price NUMBER, track_id NUMBER, invoice_id NUMBER);"
      },
      {
        "question": "How many milliseconds does each of those tracks have?",
        "query": "SELECT id ,milliseconds FROM tracks GROUP BY id",
        "schema": "CREATE TABLE customers (first_name TEXT, last_name TEXT, id NUMBER, company TEXT); CREATE TABLE artists (name TEXT, id NUMBER); CREATE TABLE invoice_lines (invoice_id NUMBER, unit_price NUMBER, quantity NUMBER, id NUMBER, track_id NUMBER); CREATE TABLE employees (last_name TEXT, first_name TEXT); CREATE TABLE invoices (id NUMBER, total NUMBER, customer_id NUMBER); CREATE TABLE tracks (id NUMBER, name TEXT, unit_price NUMBER, milliseconds NUMBER, album_id NUMBER); CREATE TABLE albums (id NUMBER);"
      },
      {
        "question": "Show me the price for each of those tracks | Do  you mean  unit price? | Yes",
        "query": "SELECT unit_price FROM tracks",
        "schema": "CREATE TABLE employees (first_name TEXT, last_name TEXT); CREATE TABLE artists (id NUMBER, name TEXT); CREATE TABLE invoices (id NUMBER, total NUMBER, customer_id NUMBER); CREATE TABLE tracks (milliseconds NUMBER, name TEXT, id NUMBER, unit_price NUMBER, album_id NUMBER); CREATE TABLE invoice_lines (track_id NUMBER, quantity NUMBER, unit_price NUMBER, id NUMBER, invoice_id NUMBER); CREATE TABLE albums (id NUMBER); CREATE TABLE customers (id NUMBER, company TEXT, first_name TEXT, last_name TEXT);"
      }
    ],
    [
      {
        "question": "how many album id",
        "query": "SELECT COUNT ( DISTINCT album_id ) FROM tracks",
        "schema": "CREATE TABLE customers (id NUMBER, last_name TEXT, support_rep_id NUMBER); CREATE TABLE employees (reports_to NUMBER, id NUMBER); CREATE TABLE invoices (customer_id NUMBER, id NUMBER); CREATE TABLE artists (name TEXT, id NUMBER); CREATE TABLE tracks (album_id NUMBER, name TEXT, id NUMBER, genre_id NUMBER); CREATE TABLE albums (title TEXT, artist_id NUMBER, id NUMBER); CREATE TABLE genres (id NUMBER);"
      },
      {
        "question": "how many genre id",
        "query": "SELECT COUNT ( DISTINCT genre_id ) FROM tracks",
        "schema": "CREATE TABLE tracks (genre_id NUMBER, name TEXT, album_id NUMBER, id NUMBER); CREATE TABLE genres (name TEXT, id NUMBER); CREATE TABLE invoices (customer_id NUMBER, id NUMBER); CREATE TABLE employees (id NUMBER, reports_to NUMBER); CREATE TABLE albums (id NUMBER, artist_id NUMBER, title TEXT); CREATE TABLE customers (id NUMBER, last_name TEXT, support_rep_id NUMBER); CREATE TABLE artists (name TEXT, id NUMBER);"
      },
      {
        "question": "ok,let show me the average unit price of all genre id",
        "query": "SELECT genre_id,AVG ( unit_price ) FROM tracks GROUP BY genre_id",
        "schema": "CREATE TABLE invoice_lines (unit_price NUMBER, track_id NUMBER); CREATE TABLE tracks (id NUMBER, name TEXT, unit_price NUMBER, album_id NUMBER, genre_id NUMBER, milliseconds NUMBER); CREATE TABLE employees (id NUMBER, reports_to NUMBER); CREATE TABLE artists (id NUMBER, name TEXT); CREATE TABLE genres (id NUMBER, name TEXT); CREATE TABLE customers (support_rep_id NUMBER, id NUMBER, last_name TEXT); CREATE TABLE invoices (id NUMBER, customer_id NUMBER, total NUMBER); CREATE TABLE albums (artist_id NUMBER, title TEXT, id NUMBER);"
      }
    ]
  ],
  "baseball_1": [
    [
      {
        "question": "HOW MANY ON THE TABLE | did you mean HOW MANY player  ON THE TABLE ? | YES EXACTLY",
        "query": "SELECT COUNT ( DISTINCT player_id ) FROM player",
        "schema": "CREATE TABLE fielding (player_id TEXT); CREATE TABLE fielding_outfield (player_id TEXT); CREATE TABLE hall_of_fame (player_id TEXT); CREATE TABLE player_award (player_id TEXT); CREATE TABLE manager_award (player_id TEXT); CREATE TABLE all_star (player_id TEXT); CREATE TABLE player (bbref_id TEXT, throws TEXT, name_first TEXT, player_id TEXT, retro_id TEXT, bats TEXT, name_last TEXT); CREATE TABLE player_award_vote (player_id TEXT, votes_first NUMBER, award_id TEXT); CREATE TABLE appearances (player_id TEXT);"
      },
      {
        "question": "WHAT IS BIRTH YEAR of aardsda01",
        "query": "SELECT birth_year FROM player WHERE player_id = 'aardsda01'",
        "schema": "CREATE TABLE hall_of_fame (player_id TEXT); CREATE TABLE fielding (sb NUMBER, year NUMBER, player_id TEXT); CREATE TABLE player_award_vote (player_id TEXT, votes_first NUMBER, award_id TEXT); CREATE TABLE player_college (player_id TEXT, year NUMBER); CREATE TABLE appearances (player_id TEXT); CREATE TABLE manager_award (player_id TEXT); CREATE TABLE fielding_outfield (player_id TEXT); CREATE TABLE all_star (player_id TEXT, year NUMBER); CREATE TABLE player_award (player_id TEXT, year NUMBER); CREATE TABLE player (bbref_id TEXT, weight NUMBER, retro_id TEXT, death_country TEXT, height NUMBER, name_first TEXT, name_given TEXT, debut TEXT, birth_city TEXT, birth_day NUMBER, throws TEXT, death_day NUMBER, death_year NUMBER, player_id TEXT, death_city TEXT, birth_state TEXT, birth_month NUMBER, name_last TEXT, birth_country TEXT, death_state TEXT, final_game TEXT, death_month NUMBER, bats TEXT, birth_year NUMBER); CREATE TABLE pitching (year NUMBER); CREATE TABLE fielding_postseason (year NUMBER);"
      },
      {
        "question": "WHAT ARE THE MANAGER'S FIRST NAME LAST NAME AND ID WHO WON THE MOST MANAGER AWARD",
        "query": "SELECT t1.name_first , t1.name_last , t2.player_id FROM player AS t1 JOIN manager_award AS t2 ON t1.player_id = t2.player_id GROUP BY t2.player_id ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE hall_of_fame (player_id TEXT); CREATE TABLE player (birth_state TEXT, bats TEXT, death_state TEXT, birth_year NUMBER, name_last TEXT, bbref_id TEXT, name_first TEXT, birth_month NUMBER, death_month NUMBER, birth_day NUMBER, death_day NUMBER, debut TEXT, name_given TEXT, birth_country TEXT, height NUMBER, player_id TEXT, death_country TEXT, death_year NUMBER, retro_id TEXT, final_game TEXT, birth_city TEXT, throws TEXT, death_city TEXT, weight NUMBER); CREATE TABLE manager (l NUMBER, g NUMBER, player_id TEXT, w NUMBER, plyr_mgr TEXT, year NUMBER); CREATE TABLE pitching (year NUMBER); CREATE TABLE player_college (player_id TEXT, year NUMBER); CREATE TABLE player_award_vote (year NUMBER, award_id TEXT, player_id TEXT, points_won NUMBER, votes_first NUMBER); CREATE TABLE manager_half (year NUMBER, l NUMBER, player_id TEXT); CREATE TABLE manager_award (league_id TEXT, player_id TEXT, award_id TEXT, year NUMBER, notes NUMBER); CREATE TABLE manager_award_vote (points_max NUMBER, points_won NUMBER, votes_first NUMBER, award_id TEXT, year NUMBER, player_id TEXT); CREATE TABLE player_award (award_id TEXT, year NUMBER, player_id TEXT); CREATE TABLE fielding (year NUMBER, sb NUMBER, player_id TEXT); CREATE TABLE appearances (player_id TEXT); CREATE TABLE fielding_outfield (player_id TEXT); CREATE TABLE fielding_postseason (year NUMBER); CREATE TABLE all_star (player_id TEXT, year NUMBER);"
      }
    ],
    [
      {
        "question": "Show the team_id with highest rank?",
        "query": "SELECT team_id FROM team ORDER BY rank ASC LIMIT 1",
        "schema": "CREATE TABLE home_game (team_id TEXT); CREATE TABLE pitching (team_id TEXT); CREATE TABLE manager_award (player_id TEXT); CREATE TABLE college (college_id TEXT); CREATE TABLE manager_half (team_id TEXT, rank NUMBER); CREATE TABLE batting_postseason (team_id TEXT); CREATE TABLE player (player_id TEXT, height NUMBER); CREATE TABLE player_award (player_id TEXT); CREATE TABLE team_half (div_id TEXT, team_id TEXT, rank NUMBER, league_id TEXT); CREATE TABLE appearances (team_id TEXT); CREATE TABLE pitching_postseason (team_id TEXT); CREATE TABLE team_franchise (franchise_id TEXT, franchise_name TEXT, na_assoc TEXT); CREATE TABLE fielding (cs NUMBER, league_id TEXT, player_id TEXT, team_id TEXT); CREATE TABLE fielding_outfield (player_id TEXT); CREATE TABLE salary (team_id TEXT); CREATE TABLE batting (team_id TEXT, player_id TEXT); CREATE TABLE hall_of_fame (player_id TEXT); CREATE TABLE team (lg_win TEXT, soa NUMBER, team_id_retro TEXT, sf NUMBER, div_win TEXT, ghome NUMBER, l NUMBER, bba NUMBER, hbp NUMBER, double NUMBER, ws_win TEXT, wc_win TEXT, era NUMBER, team_id TEXT, ra NUMBER, w NUMBER, r NUMBER, name TEXT, year NUMBER, rank NUMBER, bpf NUMBER, team_id_br TEXT, cs NUMBER, dp NUMBER, sv NUMBER, sb NUMBER, er NUMBER, div_id TEXT, ppf NUMBER, hr NUMBER, park TEXT, league_id TEXT, ab NUMBER, triple NUMBER, bb NUMBER, ha NUMBER, hra NUMBER, cg NUMBER, attendance NUMBER, h NUMBER, so NUMBER, sho NUMBER, fp NUMBER, franchise_id TEXT, e NUMBER, g NUMBER, team_id_lahman45 TEXT, ipouts NUMBER); CREATE TABLE fielding_postseason (league_id TEXT, player_id TEXT, team_id TEXT); CREATE TABLE all_star (player_id TEXT, league_id TEXT, team_id TEXT); CREATE TABLE manager (team_id TEXT, rank NUMBER);"
      },
      {
        "question": "Show the maximum scores of the team Boston Red Stockings when the team won in postseason?",
        "query": "SELECT MAX ( t1.wins ) FROM postseason AS t1 JOIN team AS t2 ON t1.team_id_winner = t2.team_id_br WHERE t2.name = 'Boston Red Stockings'",
        "schema": "CREATE TABLE player_award (player_id TEXT); CREATE TABLE college (college_id TEXT); CREATE TABLE appearances (team_id TEXT); CREATE TABLE manager_half (rank NUMBER, team_id TEXT); CREATE TABLE team_half (team_id TEXT, div_id TEXT, rank NUMBER, league_id TEXT, div_win TEXT); CREATE TABLE manager (rank NUMBER, team_id TEXT); CREATE TABLE fielding_outfield (player_id TEXT); CREATE TABLE manager_award (player_id TEXT); CREATE TABLE hall_of_fame (player_id TEXT); CREATE TABLE team (bb NUMBER, l NUMBER, sv NUMBER, franchise_id TEXT, park TEXT, sb NUMBER, rank NUMBER, attendance NUMBER, hra NUMBER, r NUMBER, soa NUMBER, fp NUMBER, ab NUMBER, bpf NUMBER, team_id_retro TEXT, name TEXT, w NUMBER, h NUMBER, dp NUMBER, ha NUMBER, ppf NUMBER, sf NUMBER, sho NUMBER, wc_win TEXT, team_id TEXT, div_id TEXT, era NUMBER, e NUMBER, bba NUMBER, ipouts NUMBER, div_win TEXT, cs NUMBER, hr NUMBER, triple NUMBER, team_id_lahman45 TEXT, cg NUMBER, year NUMBER, lg_win TEXT, double NUMBER, hbp NUMBER, g NUMBER, er NUMBER, league_id TEXT, ws_win TEXT, so NUMBER, ra NUMBER, team_id_br TEXT, ghome NUMBER); CREATE TABLE pitching (team_id TEXT); CREATE TABLE batting (cs NUMBER, player_id TEXT, sf NUMBER, ab NUMBER, h NUMBER, hbp NUMBER, team_id TEXT, sh NUMBER); CREATE TABLE home_game (team_id TEXT); CREATE TABLE team_franchise (franchise_name TEXT, na_assoc TEXT, franchise_id TEXT); CREATE TABLE pitching_postseason (era NUMBER, sf NUMBER, so NUMBER, h NUMBER, sho NUMBER, baopp TEXT, team_id TEXT, cg NUMBER, wp NUMBER, sv NUMBER, w NUMBER, hr NUMBER, league_id TEXT, l NUMBER, ibb NUMBER, bfp NUMBER, g NUMBER, gf NUMBER, gs NUMBER, r NUMBER, round TEXT, ipouts NUMBER, er NUMBER, bb NUMBER, bk NUMBER, g_idp NUMBER, hbp NUMBER, sh NUMBER); CREATE TABLE fielding (cs NUMBER, player_id TEXT, team_id TEXT, league_id TEXT); CREATE TABLE postseason (wins NUMBER, losses NUMBER, team_id_loser TEXT, year NUMBER, league_id_winner TEXT, team_id_winner TEXT); CREATE TABLE player (height NUMBER, player_id TEXT); CREATE TABLE player_award_vote (points_won NUMBER, player_id TEXT); CREATE TABLE fielding_postseason (e NUMBER, player_id TEXT, cs NUMBER, round TEXT, a NUMBER, dp NUMBER, sb NUMBER, gs NUMBER, pb NUMBER, league_id TEXT, tp NUMBER, pos TEXT, team_id TEXT, g NUMBER); CREATE TABLE all_star (league_id TEXT, game_id TEXT, game_num NUMBER, player_id TEXT, team_id TEXT); CREATE TABLE batting_postseason (sh NUMBER, cs NUMBER, double NUMBER, team_id TEXT, triple NUMBER, g_idp NUMBER); CREATE TABLE salary (team_id TEXT); CREATE TABLE park (city TEXT);"
      },
      {
        "question": "Show the year of postseason with equal wins and loses?",
        "query": "SELECT YEAR FROM postseason WHERE wins = losses",
        "schema": "CREATE TABLE postseason (wins NUMBER, league_id_winner TEXT, team_id_winner TEXT, year NUMBER, team_id_loser TEXT, losses NUMBER); CREATE TABLE pitching (team_id TEXT); CREATE TABLE batting_postseason (sh NUMBER, triple NUMBER, cs NUMBER, double NUMBER, year NUMBER, team_id TEXT, g_idp NUMBER); CREATE TABLE salary (team_id TEXT); CREATE TABLE team_franchise (na_assoc TEXT, franchise_id TEXT, franchise_name TEXT); CREATE TABLE player (height NUMBER, player_id TEXT); CREATE TABLE manager_award (player_id TEXT); CREATE TABLE park (city TEXT); CREATE TABLE appearances (team_id TEXT, year NUMBER); CREATE TABLE manager (rank NUMBER, team_id TEXT); CREATE TABLE fielding_postseason (league_id TEXT, team_id TEXT, round TEXT, dp NUMBER, sb NUMBER, tp NUMBER, e NUMBER, player_id TEXT, gs NUMBER, cs NUMBER, a NUMBER, g NUMBER, pos TEXT, pb NUMBER); CREATE TABLE fielding_outfield (player_id TEXT); CREATE TABLE fielding (league_id TEXT, team_id TEXT, cs NUMBER, player_id TEXT); CREATE TABLE player_award (player_id TEXT); CREATE TABLE college (college_id TEXT); CREATE TABLE manager_half (team_id TEXT, rank NUMBER); CREATE TABLE team (bb NUMBER, sho NUMBER, so NUMBER, sf NUMBER, sb NUMBER, wc_win TEXT, park TEXT, hra NUMBER, ab NUMBER, fp NUMBER, cs NUMBER, team_id TEXT, lg_win TEXT, name TEXT, r NUMBER, double NUMBER, rank NUMBER, league_id TEXT, cg NUMBER, dp NUMBER, ghome NUMBER, hr NUMBER, bpf NUMBER, ppf NUMBER, sv NUMBER, era NUMBER, g NUMBER, bba NUMBER, div_win TEXT, franchise_id TEXT, attendance NUMBER, ra NUMBER, soa NUMBER, h NUMBER, hbp NUMBER, div_id TEXT, e NUMBER, w NUMBER, year NUMBER, team_id_retro TEXT, triple NUMBER, ipouts NUMBER, team_id_lahman45 TEXT, ha NUMBER, er NUMBER, ws_win TEXT, l NUMBER, team_id_br TEXT); CREATE TABLE player_award_vote (player_id TEXT, points_won NUMBER); CREATE TABLE home_game (year NUMBER, team_id TEXT); CREATE TABLE pitching_postseason (bfp NUMBER, h NUMBER, bk NUMBER, g_idp NUMBER, er NUMBER, baopp TEXT, sv NUMBER, sh NUMBER, sho NUMBER, hr NUMBER, era NUMBER, bb NUMBER, l NUMBER, w NUMBER, r NUMBER, wp NUMBER, gf NUMBER, g NUMBER, ipouts NUMBER, gs NUMBER, round TEXT, team_id TEXT, sf NUMBER, ibb NUMBER, so NUMBER, cg NUMBER, hbp NUMBER, league_id TEXT, year NUMBER); CREATE TABLE team_half (div_id TEXT, league_id TEXT, year NUMBER, team_id TEXT, rank NUMBER, div_win TEXT); CREATE TABLE hall_of_fame (player_id TEXT); CREATE TABLE player_college (player_id TEXT, year NUMBER); CREATE TABLE batting (sf NUMBER, ab NUMBER, player_id TEXT, cs NUMBER, sh NUMBER, team_id TEXT, hbp NUMBER, h NUMBER); CREATE TABLE all_star (game_num NUMBER, team_id TEXT, year NUMBER, player_id TEXT, game_id TEXT, league_id TEXT);"
      }
    ],
    [
      {
        "question": "Which cities have 2 to 4 parks?",
        "query": "SELECT city FROM park GROUP BY city HAVING COUNT ( * ) BETWEEN 2 AND 4",
        "schema": "CREATE TABLE park (park_alias TEXT, city TEXT, park_id TEXT, park_name TEXT); CREATE TABLE home_game (park_id TEXT); CREATE TABLE player (player_id TEXT); CREATE TABLE college (city TEXT);"
      },
      {
        "question": "How many parks are in Atlanta?",
        "query": "SELECT COUNT ( * ) FROM park WHERE city = \"Atlanta\"",
        "schema": "CREATE TABLE park (park_name TEXT, park_id TEXT, park_alias TEXT, city TEXT); CREATE TABLE home_game (park_id TEXT); CREATE TABLE player (player_id TEXT); CREATE TABLE college (city TEXT);"
      },
      {
        "question": "Which cities have exactly 4 parks?",
        "query": "SELECT city FROM park GROUP BY city HAVING COUNT ( * ) = 4",
        "schema": "CREATE TABLE home_game (park_id TEXT); CREATE TABLE player (player_id TEXT); CREATE TABLE college (city TEXT); CREATE TABLE park (park_id TEXT, park_name TEXT, city TEXT, park_alias TEXT);"
      },
      {
        "question": "Which cities have exactly 3 parks?",
        "query": "SELECT city FROM park GROUP BY city HAVING COUNT ( * ) = 3",
        "schema": "CREATE TABLE park (park_name TEXT, park_id TEXT, city TEXT, park_alias TEXT); CREATE TABLE home_game (park_id TEXT); CREATE TABLE player (player_id TEXT); CREATE TABLE college (city TEXT);"
      },
      {
        "question": "Which cities have exactly 2 parks?",
        "query": "SELECT city FROM park GROUP BY city HAVING COUNT ( * ) = 2",
        "schema": "CREATE TABLE college (city TEXT); CREATE TABLE player (player_id TEXT); CREATE TABLE home_game (park_id TEXT); CREATE TABLE park (park_alias TEXT, park_name TEXT, park_id TEXT, city TEXT);"
      }
    ],
    [
      {
        "question": "hi, can you tell me the first and last name for the player with player ID: gomezle01?",
        "query": "SELECT name_first , name_last FROM player WHERE player_id = \"gomezle01\"",
        "schema": "CREATE TABLE manager_award_vote (player_id TEXT); CREATE TABLE player_award (player_id TEXT); CREATE TABLE hall_of_fame (player_id TEXT); CREATE TABLE player_college (player_id TEXT); CREATE TABLE manager_award (player_id TEXT); CREATE TABLE park (park_alias TEXT); CREATE TABLE player (birth_year NUMBER, player_id TEXT, debut TEXT, birth_day NUMBER, bats TEXT, final_game TEXT, death_year NUMBER, bbref_id TEXT, birth_state TEXT, death_city TEXT, death_day NUMBER, height NUMBER, name_last TEXT, birth_country TEXT, birth_month NUMBER, birth_city TEXT, name_first TEXT, weight NUMBER, death_month NUMBER, death_country TEXT, death_state TEXT, name_given TEXT, throws TEXT, retro_id TEXT); CREATE TABLE player_award_vote (votes_first NUMBER, player_id TEXT); CREATE TABLE appearances (player_id TEXT); CREATE TABLE all_star (player_id TEXT); CREATE TABLE fielding_outfield (player_id TEXT);"
      },
      {
        "question": "yes. What is the player's first and last name for player ID: ferreri01?",
        "query": "SELECT name_first , name_last FROM player WHERE player_id = \"ferreri01\"",
        "schema": "CREATE TABLE appearances (player_id TEXT); CREATE TABLE all_star (player_id TEXT, game_num NUMBER); CREATE TABLE player_award (player_id TEXT); CREATE TABLE fielding_outfield (player_id TEXT); CREATE TABLE manager_award_vote (player_id TEXT); CREATE TABLE player (death_year NUMBER, name_first TEXT, player_id TEXT, birth_day NUMBER, name_given TEXT, death_month NUMBER, debut TEXT, death_country TEXT, name_last TEXT, height NUMBER, birth_country TEXT, death_city TEXT, weight NUMBER, birth_city TEXT, birth_year NUMBER, death_day NUMBER, birth_month NUMBER, throws TEXT, death_state TEXT, bats TEXT, birth_state TEXT, final_game TEXT, bbref_id TEXT, retro_id TEXT); CREATE TABLE hall_of_fame (player_id TEXT); CREATE TABLE manager_award (player_id TEXT); CREATE TABLE park (park_alias TEXT); CREATE TABLE player_college (player_id TEXT); CREATE TABLE player_award_vote (player_id TEXT, votes_first NUMBER);"
      },
      {
        "question": "in addition to Rick Ferrell, Lefty Gomez, and player ID gehrilo01, can you tell me the first and last names of the other players participating in 1998 all star game?",
        "query": "SELECT name_first , name_last FROM player AS t1 JOIN all_star AS t2 ON t1.player_id = t2.player_id WHERE YEAR = 1998 AND name_first ! = \"Rick\" OR name_last ! = \"Ferrell\" INTERSECT SELECT name_first , name_last FROM player AS t1 JOIN all_star AS t2 ON t1.player_id = t2.player_id WHERE YEAR = 1998 AND name_first ! = \"Lefty\" OR name_last ! = \"Gomez\" INTERSECT SELECT name_first , name_last FROM player AS t1 JOIN all_star AS t2 ON t1.player_id = t2.player_id WHERE YEAR = 1998 AND t1.player_id ! = \"gehrilo01\"",
        "schema": "CREATE TABLE postseason (year NUMBER, round TEXT); CREATE TABLE player (debut TEXT, death_country TEXT, height NUMBER, final_game TEXT, birth_country TEXT, death_city TEXT, bbref_id TEXT, retro_id TEXT, name_given TEXT, death_day NUMBER, name_first TEXT, birth_month NUMBER, throws TEXT, death_state TEXT, weight NUMBER, birth_year NUMBER, name_last TEXT, death_year NUMBER, bats TEXT, birth_day NUMBER, player_id TEXT, death_month NUMBER, birth_city TEXT, birth_state TEXT); CREATE TABLE manager_award_vote (player_id TEXT); CREATE TABLE player_award (year NUMBER, player_id TEXT); CREATE TABLE park (park_alias TEXT); CREATE TABLE manager_award (player_id TEXT); CREATE TABLE player_college (player_id TEXT); CREATE TABLE hall_of_fame (player_id TEXT); CREATE TABLE all_star (game_num NUMBER, player_id TEXT, year NUMBER, game_id TEXT); CREATE TABLE batting (player_id TEXT, year NUMBER); CREATE TABLE home_game (year NUMBER); CREATE TABLE fielding_outfield (player_id TEXT); CREATE TABLE player_award_vote (player_id TEXT, votes_first NUMBER); CREATE TABLE appearances (g_all NUMBER, player_id TEXT, year NUMBER);"
      },
      {
        "question": "great. what is the player with player ID gehrilo01 first and last name?",
        "query": "SELECT name_first , name_last FROM player WHERE player_id = \"gehrilo01\"",
        "schema": "CREATE TABLE home_game (year NUMBER); CREATE TABLE fielding_outfield (player_id TEXT); CREATE TABLE player (player_id TEXT, throws TEXT, bbref_id TEXT, death_day NUMBER, retro_id TEXT, birth_month NUMBER, birth_state TEXT, birth_country TEXT, birth_day NUMBER, birth_year NUMBER, weight NUMBER, death_country TEXT, birth_city TEXT, name_given TEXT, death_city TEXT, death_state TEXT, final_game TEXT, bats TEXT, name_first TEXT, death_year NUMBER, debut TEXT, height NUMBER, death_month NUMBER, name_last TEXT); CREATE TABLE all_star (game_id TEXT, player_id TEXT, game_num NUMBER, year NUMBER); CREATE TABLE hall_of_fame (player_id TEXT); CREATE TABLE appearances (g_all NUMBER, year NUMBER, player_id TEXT); CREATE TABLE park (park_alias TEXT); CREATE TABLE player_award_vote (votes_first NUMBER, player_id TEXT); CREATE TABLE manager_award (player_id TEXT); CREATE TABLE player_award (player_id TEXT, year NUMBER); CREATE TABLE player_college (player_id TEXT); CREATE TABLE postseason (round TEXT, year NUMBER); CREATE TABLE batting (player_id TEXT, year NUMBER); CREATE TABLE manager_award_vote (player_id TEXT);"
      }
    ],
    [
      {
        "question": "How many home games did the team  Boston Red Stockings play from 1990 to 2000 in total?",
        "query": "SELECT SUM ( t1.games ) FROM home_game AS t1 JOIN team AS t2 ON t1.team_id = t2.team_id_br WHERE t2.name = 'Boston Red Stockings' AND t1.year BETWEEN 1990 AND 2000",
        "schema": "CREATE TABLE fielding_postseason (inn_outs NUMBER, sb NUMBER, a NUMBER, cs NUMBER, player_id TEXT, pos TEXT, e NUMBER, team_id TEXT, year NUMBER, g NUMBER, dp NUMBER, pb NUMBER, tp NUMBER, league_id TEXT); CREATE TABLE home_game (team_id TEXT, span_first TEXT, league_id TEXT, games NUMBER, park_id TEXT, year NUMBER, attendance NUMBER, span_last TEXT); CREATE TABLE fielding_outfield (year NUMBER, player_id TEXT); CREATE TABLE park (park_id TEXT, city TEXT); CREATE TABLE pitching_postseason (year NUMBER, league_id TEXT, hr NUMBER, sf NUMBER, g_idp NUMBER, g NUMBER, ipouts NUMBER, team_id TEXT, player_id TEXT, cg NUMBER, so NUMBER); CREATE TABLE team_half (year NUMBER, div_id TEXT, team_id TEXT, league_id TEXT); CREATE TABLE player_college (player_id TEXT, year NUMBER); CREATE TABLE all_star (year NUMBER); CREATE TABLE postseason (year NUMBER); CREATE TABLE college (college_id TEXT, city TEXT); CREATE TABLE player (player_id TEXT, birth_city TEXT); CREATE TABLE fielding (e NUMBER, dp NUMBER, g NUMBER, year NUMBER, league_id TEXT, player_id TEXT, cs NUMBER, a NUMBER, team_id TEXT, wp NUMBER); CREATE TABLE hall_of_fame (yearid NUMBER); CREATE TABLE batting_postseason (league_id TEXT, player_id TEXT, hr NUMBER, year NUMBER, so NUMBER, cs NUMBER, team_id TEXT); CREATE TABLE team (div_id TEXT, ghome NUMBER, so NUMBER, year NUMBER, ab NUMBER, er NUMBER, franchise_id TEXT, bpf NUMBER, w NUMBER, ws_win TEXT, ha NUMBER, wc_win TEXT, sf NUMBER, g NUMBER, name TEXT, double NUMBER, hbp NUMBER, dp NUMBER, team_id_retro TEXT, e NUMBER, team_id_br TEXT, attendance NUMBER, team_id_lahman45 TEXT, bb NUMBER, cg NUMBER, sho NUMBER, hr NUMBER, fp NUMBER, cs NUMBER, sv NUMBER, park TEXT, team_id TEXT, ra NUMBER, triple NUMBER, ipouts NUMBER, hra NUMBER, rank NUMBER, bba NUMBER, div_win TEXT, soa NUMBER, ppf NUMBER, lg_win TEXT, r NUMBER, sb NUMBER, h NUMBER, l NUMBER, league_id TEXT, era NUMBER); CREATE TABLE team_franchise (franchise_name TEXT, na_assoc TEXT, franchise_id TEXT); CREATE TABLE batting (year NUMBER, team_id TEXT);"
      },
      {
        "question": "What is the one of the best team? | Do you mean the team with the most number of wins? | yes",
        "query": "SELECT t2.name FROM home_game AS t1 JOIN team AS t2 ON t1.team_id = t2.team_id_br GROUP BY t1.team_id ORDER BY SUM ( t2.w ) DESC LIMIT 1",
        "schema": "CREATE TABLE park (city TEXT, park_id TEXT); CREATE TABLE team (so NUMBER, sho NUMBER, rank NUMBER, lg_win TEXT, league_id TEXT, div_win TEXT, r NUMBER, g NUMBER, ghome NUMBER, era NUMBER, ab NUMBER, e NUMBER, bba NUMBER, sv NUMBER, hbp NUMBER, triple NUMBER, dp NUMBER, sf NUMBER, name TEXT, div_id TEXT, er NUMBER, double NUMBER, hra NUMBER, team_id_lahman45 TEXT, park TEXT, w NUMBER, ha NUMBER, ppf NUMBER, team_id_br TEXT, cs NUMBER, bb NUMBER, l NUMBER, wc_win TEXT, bpf NUMBER, franchise_id TEXT, soa NUMBER, year NUMBER, h NUMBER, hr NUMBER, ra NUMBER, sb NUMBER, cg NUMBER, ipouts NUMBER, team_id_retro TEXT, ws_win TEXT, fp NUMBER, team_id TEXT, attendance NUMBER); CREATE TABLE fielding_outfield (player_id TEXT, year NUMBER); CREATE TABLE pitching_postseason (cg NUMBER, league_id TEXT, hr NUMBER, ipouts NUMBER, sf NUMBER, g NUMBER, team_id TEXT, year NUMBER, g_idp NUMBER, player_id TEXT, so NUMBER); CREATE TABLE college (city TEXT, college_id TEXT); CREATE TABLE batting_postseason (so NUMBER, player_id TEXT, hr NUMBER, cs NUMBER, year NUMBER, team_id TEXT, league_id TEXT); CREATE TABLE player_college (player_id TEXT, year NUMBER); CREATE TABLE team_half (year NUMBER, league_id TEXT, team_id TEXT, div_win TEXT, div_id TEXT); CREATE TABLE hall_of_fame (yearid NUMBER); CREATE TABLE batting (team_id TEXT, year NUMBER); CREATE TABLE fielding_postseason (dp NUMBER, team_id TEXT, league_id TEXT, a NUMBER, tp NUMBER, inn_outs NUMBER, cs NUMBER, g NUMBER, pos TEXT, player_id TEXT, year NUMBER, pb NUMBER, e NUMBER, sb NUMBER); CREATE TABLE home_game (span_last TEXT, attendance NUMBER, span_first TEXT, year NUMBER, league_id TEXT, park_id TEXT, games NUMBER, team_id TEXT); CREATE TABLE team_franchise (franchise_id TEXT, na_assoc TEXT, franchise_name TEXT); CREATE TABLE fielding (g NUMBER, league_id TEXT, team_id TEXT, e NUMBER, wp NUMBER, dp NUMBER, player_id TEXT, year NUMBER, a NUMBER, cs NUMBER); CREATE TABLE postseason (year NUMBER, wins NUMBER, losses NUMBER, team_id_winner TEXT); CREATE TABLE player (player_id TEXT, birth_city TEXT); CREATE TABLE all_star (year NUMBER);"
      }
    ],
    [
      {
        "question": "What is the team id for Boston Red Stockings?",
        "query": "SELECT DISTINCT ( team_id ) FROM team WHERE name = \"Boston Red Stockings\"",
        "schema": "CREATE TABLE fielding_outfield (player_id TEXT, glf NUMBER); CREATE TABLE team_half (team_id TEXT, div_id TEXT, league_id TEXT); CREATE TABLE team_franchise (franchise_id TEXT, franchise_name TEXT, na_assoc TEXT); CREATE TABLE home_game (team_id TEXT, league_id TEXT, games NUMBER, park_id TEXT); CREATE TABLE batting_postseason (league_id TEXT, team_id TEXT); CREATE TABLE manager (league_id TEXT, team_id TEXT); CREATE TABLE fielding (team_id TEXT, league_id TEXT); CREATE TABLE college (name_full TEXT, city TEXT, college_id TEXT); CREATE TABLE manager_award (league_id TEXT); CREATE TABLE manager_award_vote (league_id TEXT); CREATE TABLE team (sb NUMBER, e NUMBER, sv NUMBER, team_id_lahman45 TEXT, g NUMBER, team_id_br TEXT, team_id TEXT, lg_win TEXT, league_id TEXT, park TEXT, franchise_id TEXT, sf NUMBER, ha NUMBER, ra NUMBER, hbp NUMBER, ppf NUMBER, era NUMBER, h NUMBER, wc_win TEXT, bba NUMBER, fp NUMBER, ipouts NUMBER, ab NUMBER, cg NUMBER, w NUMBER, attendance NUMBER, so NUMBER, sho NUMBER, team_id_retro TEXT, dp NUMBER, div_win TEXT, cs NUMBER, triple NUMBER, r NUMBER, er NUMBER, l NUMBER, div_id TEXT, name TEXT, bpf NUMBER, ws_win TEXT, year NUMBER, bb NUMBER, rank NUMBER, double NUMBER, hra NUMBER, soa NUMBER, ghome NUMBER, hr NUMBER); CREATE TABLE player_award (league_id TEXT); CREATE TABLE hall_of_fame (player_id TEXT); CREATE TABLE batting (league_id TEXT, team_id TEXT, cs NUMBER); CREATE TABLE salary (team_id TEXT); CREATE TABLE fielding_postseason (team_id TEXT); CREATE TABLE park (city TEXT, park_id TEXT, park_name TEXT, park_alias TEXT); CREATE TABLE all_star (league_id TEXT, team_id TEXT, game_id TEXT, player_id TEXT); CREATE TABLE manager_half (team_id TEXT); CREATE TABLE player (player_id TEXT);"
      },
      {
        "question": "Yes please.",
        "query": "SELECT t1.player_id FROM salary AS t1 JOIN team AS t2 ON t1.team_id = t2.team_id_br WHERE t2.name = 'Boston Red Stockings'",
        "schema": "CREATE TABLE fielding (team_id TEXT, league_id TEXT); CREATE TABLE all_star (player_id TEXT, league_id TEXT, game_id TEXT, team_id TEXT); CREATE TABLE home_game (team_id TEXT, games NUMBER, park_id TEXT, league_id TEXT); CREATE TABLE team_half (league_id TEXT, team_id TEXT, div_id TEXT); CREATE TABLE manager_half (team_id TEXT); CREATE TABLE manager_award_vote (league_id TEXT); CREATE TABLE batting_postseason (team_id TEXT, league_id TEXT); CREATE TABLE salary (team_id TEXT, player_id TEXT); CREATE TABLE manager (team_id TEXT, league_id TEXT); CREATE TABLE player_award (league_id TEXT); CREATE TABLE team_franchise (na_assoc TEXT, franchise_id TEXT, franchise_name TEXT); CREATE TABLE team (dp NUMBER, sb NUMBER, fp NUMBER, name TEXT, bba NUMBER, lg_win TEXT, franchise_id TEXT, league_id TEXT, sho NUMBER, sv NUMBER, er NUMBER, rank NUMBER, div_win TEXT, r NUMBER, cg NUMBER, bb NUMBER, g NUMBER, hra NUMBER, l NUMBER, e NUMBER, team_id_br TEXT, so NUMBER, ha NUMBER, ipouts NUMBER, w NUMBER, team_id TEXT, h NUMBER, sf NUMBER, bpf NUMBER, team_id_retro TEXT, ghome NUMBER, ppf NUMBER, era NUMBER, wc_win TEXT, ab NUMBER, cs NUMBER, park TEXT, div_id TEXT, hbp NUMBER, triple NUMBER, year NUMBER, ws_win TEXT, attendance NUMBER, hr NUMBER, ra NUMBER, double NUMBER, soa NUMBER, team_id_lahman45 TEXT); CREATE TABLE hall_of_fame (player_id TEXT); CREATE TABLE college (college_id TEXT, city TEXT, name_full TEXT); CREATE TABLE player (player_id TEXT); CREATE TABLE park (city TEXT, park_name TEXT, park_alias TEXT, park_id TEXT); CREATE TABLE batting (cs NUMBER, team_id TEXT, league_id TEXT); CREATE TABLE fielding_postseason (team_id TEXT); CREATE TABLE fielding_outfield (player_id TEXT, glf NUMBER); CREATE TABLE manager_award (league_id TEXT);"
      },
      {
        "question": "Can you calculate the total salary paid by team Boston Red Stockings in 2010?",
        "query": "SELECT SUM ( t1.salary ) FROM salary AS t1 JOIN team AS t2 ON t1.team_id = t2.team_id_br WHERE t2.name = 'Boston Red Stockings' AND t1.year = 2010",
        "schema": "CREATE TABLE batting_postseason (league_id TEXT, team_id TEXT); CREATE TABLE manager_award (league_id TEXT); CREATE TABLE team_franchise (franchise_id TEXT, franchise_name TEXT, na_assoc TEXT); CREATE TABLE player_award (league_id TEXT); CREATE TABLE manager (team_id TEXT, league_id TEXT); CREATE TABLE manager_half (team_id TEXT); CREATE TABLE hall_of_fame (player_id TEXT); CREATE TABLE college (name_full TEXT, college_id TEXT, city TEXT); CREATE TABLE home_game (league_id TEXT, team_id TEXT, park_id TEXT, games NUMBER); CREATE TABLE manager_award_vote (league_id TEXT); CREATE TABLE all_star (game_id TEXT, league_id TEXT, player_id TEXT, team_id TEXT); CREATE TABLE fielding (league_id TEXT, team_id TEXT); CREATE TABLE fielding_outfield (player_id TEXT, glf NUMBER); CREATE TABLE salary (player_id TEXT, salary NUMBER, year NUMBER, team_id TEXT); CREATE TABLE team (so NUMBER, ghome NUMBER, e NUMBER, bpf NUMBER, sv NUMBER, div_win TEXT, park TEXT, h NUMBER, fp NUMBER, team_id_br TEXT, cg NUMBER, hra NUMBER, wc_win TEXT, soa NUMBER, ra NUMBER, hr NUMBER, team_id_lahman45 TEXT, team_id TEXT, ws_win TEXT, r NUMBER, sb NUMBER, div_id TEXT, era NUMBER, cs NUMBER, franchise_id TEXT, er NUMBER, sf NUMBER, hbp NUMBER, rank NUMBER, ipouts NUMBER, ppf NUMBER, ab NUMBER, team_id_retro TEXT, name TEXT, attendance NUMBER, ha NUMBER, double NUMBER, bb NUMBER, sho NUMBER, lg_win TEXT, g NUMBER, w NUMBER, bba NUMBER, l NUMBER, year NUMBER, triple NUMBER, league_id TEXT, dp NUMBER); CREATE TABLE team_half (year NUMBER, div_id TEXT, league_id TEXT, team_id TEXT); CREATE TABLE batting (cs NUMBER, league_id TEXT, team_id TEXT); CREATE TABLE postseason (year NUMBER); CREATE TABLE park (city TEXT, park_name TEXT, park_id TEXT, park_alias TEXT); CREATE TABLE fielding_postseason (team_id TEXT); CREATE TABLE player (player_id TEXT);"
      }
    ],
    [
      {
        "question": "Who won the most manager award? | Do you mean the first name of the person who won the most manager award? | Yes, and tell me the last name and the id of that person as well.",
        "query": "SELECT t1.name_first , t1.name_last , t2.player_id FROM player AS t1 JOIN manager_award AS t2 ON t1.player_id = t2.player_id GROUP BY t2.player_id ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE all_star (player_id TEXT); CREATE TABLE hall_of_fame (player_id TEXT); CREATE TABLE player_award (player_id TEXT, award_id TEXT); CREATE TABLE player (name_first TEXT, name_last TEXT, name_given TEXT, player_id TEXT); CREATE TABLE manager_half (player_id TEXT); CREATE TABLE manager (l NUMBER, plyr_mgr TEXT, player_id TEXT, g NUMBER, w NUMBER); CREATE TABLE manager_award (league_id TEXT, notes NUMBER, award_id TEXT, player_id TEXT); CREATE TABLE manager_award_vote (league_id TEXT, player_id TEXT, points_won NUMBER, award_id TEXT, points_max NUMBER, votes_first NUMBER); CREATE TABLE player_award_vote (points_won NUMBER, player_id TEXT, award_id TEXT);"
      }
    ],
    [
      {
        "question": "Show me the attendance of the team_id CH1?",
        "query": "SELECT attendance FROM home_game WHERE team_id = 'CH1'",
        "schema": "CREATE TABLE player (player_id TEXT); CREATE TABLE team_franchise (na_assoc TEXT, franchise_name TEXT, franchise_id TEXT); CREATE TABLE park (park_id TEXT); CREATE TABLE college (college_id TEXT); CREATE TABLE team (team_id_retro TEXT, h NUMBER, team_id_lahman45 TEXT, er NUMBER, triple NUMBER, team_id TEXT, sho NUMBER, bpf NUMBER, era NUMBER, sv NUMBER, name TEXT, r NUMBER, cg NUMBER, ra NUMBER, e NUMBER, park TEXT, cs NUMBER, hbp NUMBER, franchise_id TEXT, ghome NUMBER, fp NUMBER, bba NUMBER, hra NUMBER, sf NUMBER, so NUMBER, dp NUMBER, div_id TEXT, div_win TEXT, bb NUMBER, ws_win TEXT, hr NUMBER, attendance NUMBER, team_id_br TEXT, ipouts NUMBER, year NUMBER, ppf NUMBER, sb NUMBER, ab NUMBER, rank NUMBER, soa NUMBER, league_id TEXT, wc_win TEXT, w NUMBER, l NUMBER, double NUMBER, lg_win TEXT, g NUMBER, ha NUMBER); CREATE TABLE all_star (league_id TEXT, game_id TEXT, game_num NUMBER, team_id TEXT); CREATE TABLE manager_half (team_id TEXT); CREATE TABLE manager (team_id TEXT); CREATE TABLE home_game (league_id TEXT, attendance NUMBER, team_id TEXT, park_id TEXT); CREATE TABLE fielding (team_id TEXT); CREATE TABLE team_half (league_id TEXT, div_id TEXT, team_id TEXT);"
      },
      {
        "question": "Show me the id of the team that has the largest average number of attendance in 2014?",
        "query": "SELECT t2.team_id FROM home_game AS t1 JOIN team AS t2 ON t1.team_id = t2.team_id WHERE t1.year = 2014 GROUP BY t1.team_id ORDER BY AVG ( t1.attendance ) DESC LIMIT 1",
        "schema": "CREATE TABLE manager_half (team_id TEXT); CREATE TABLE all_star (game_id TEXT, team_id TEXT, game_num NUMBER, league_id TEXT); CREATE TABLE team_half (league_id TEXT, div_id TEXT, team_id TEXT); CREATE TABLE manager (team_id TEXT); CREATE TABLE player (player_id TEXT); CREATE TABLE college (college_id TEXT); CREATE TABLE team_franchise (na_assoc TEXT, franchise_id TEXT, franchise_name TEXT); CREATE TABLE appearances (team_id TEXT, year NUMBER); CREATE TABLE postseason (year NUMBER); CREATE TABLE fielding (team_id TEXT); CREATE TABLE team (park TEXT, team_id_retro TEXT, dp NUMBER, g NUMBER, fp NUMBER, ws_win TEXT, wc_win TEXT, name TEXT, ab NUMBER, div_id TEXT, cs NUMBER, bpf NUMBER, r NUMBER, hra NUMBER, rank NUMBER, cg NUMBER, year NUMBER, triple NUMBER, l NUMBER, sb NUMBER, div_win TEXT, double NUMBER, bba NUMBER, hbp NUMBER, league_id TEXT, era NUMBER, hr NUMBER, sf NUMBER, team_id_lahman45 TEXT, team_id_br TEXT, ipouts NUMBER, sho NUMBER, ra NUMBER, bb NUMBER, team_id TEXT, er NUMBER, franchise_id TEXT, soa NUMBER, h NUMBER, so NUMBER, w NUMBER, attendance NUMBER, e NUMBER, lg_win TEXT, ha NUMBER, sv NUMBER, ghome NUMBER, ppf NUMBER); CREATE TABLE home_game (attendance NUMBER, year NUMBER, team_id TEXT, park_id TEXT, games NUMBER, league_id TEXT); CREATE TABLE park (park_id TEXT);"
      },
      {
        "question": "Show me the team_id with attendance 3000?",
        "query": "SELECT team_id FROM home_game WHERE attendance = 3000",
        "schema": "CREATE TABLE fielding (team_id TEXT); CREATE TABLE all_star (team_id TEXT, game_num NUMBER, league_id TEXT, game_id TEXT); CREATE TABLE team_half (team_id TEXT, div_id TEXT, league_id TEXT); CREATE TABLE manager_half (team_id TEXT); CREATE TABLE college (college_id TEXT); CREATE TABLE manager (team_id TEXT); CREATE TABLE player (player_id TEXT); CREATE TABLE home_game (year NUMBER, league_id TEXT, attendance NUMBER, park_id TEXT, games NUMBER, team_id TEXT); CREATE TABLE appearances (year NUMBER, team_id TEXT); CREATE TABLE team (ra NUMBER, year NUMBER, sho NUMBER, era NUMBER, fp NUMBER, team_id_retro TEXT, hr NUMBER, hra NUMBER, double NUMBER, g NUMBER, team_id TEXT, wc_win TEXT, r NUMBER, rank NUMBER, ab NUMBER, team_id_lahman45 TEXT, ghome NUMBER, dp NUMBER, ipouts NUMBER, sv NUMBER, ws_win TEXT, hbp NUMBER, bpf NUMBER, l NUMBER, soa NUMBER, ppf NUMBER, triple NUMBER, h NUMBER, lg_win TEXT, attendance NUMBER, w NUMBER, team_id_br TEXT, div_win TEXT, bba NUMBER, div_id TEXT, e NUMBER, name TEXT, park TEXT, cs NUMBER, bb NUMBER, franchise_id TEXT, er NUMBER, ha NUMBER, sf NUMBER, sb NUMBER, league_id TEXT, cg NUMBER, so NUMBER); CREATE TABLE park (park_id TEXT); CREATE TABLE team_franchise (franchise_name TEXT, franchise_id TEXT, na_assoc TEXT); CREATE TABLE postseason (year NUMBER);"
      },
      {
        "question": "Show me the rank of the team that has the largest average number of attendance?",
        "query": "SELECT t2.rank FROM home_game AS t1 JOIN team AS t2 ON t1.team_id = t2.team_id GROUP BY t1.team_id ORDER BY AVG ( t1.attendance ) DESC LIMIT 1",
        "schema": "CREATE TABLE home_game (league_id TEXT, games NUMBER, year NUMBER, attendance NUMBER, team_id TEXT, park_id TEXT); CREATE TABLE college (college_id TEXT); CREATE TABLE team_franchise (franchise_name TEXT, franchise_id TEXT, na_assoc TEXT); CREATE TABLE team_half (rank NUMBER, team_id TEXT, league_id TEXT, g NUMBER, div_id TEXT); CREATE TABLE postseason (year NUMBER); CREATE TABLE all_star (team_id TEXT, game_id TEXT, league_id TEXT, game_num NUMBER); CREATE TABLE manager_half (rank NUMBER, team_id TEXT); CREATE TABLE appearances (team_id TEXT, year NUMBER); CREATE TABLE fielding (team_id TEXT); CREATE TABLE player (player_id TEXT); CREATE TABLE team (cs NUMBER, er NUMBER, name TEXT, bba NUMBER, ab NUMBER, r NUMBER, team_id_retro TEXT, era NUMBER, sho NUMBER, g NUMBER, bb NUMBER, sf NUMBER, lg_win TEXT, l NUMBER, park TEXT, team_id_lahman45 TEXT, e NUMBER, rank NUMBER, team_id_br TEXT, ghome NUMBER, wc_win TEXT, div_id TEXT, dp NUMBER, cg NUMBER, franchise_id TEXT, so NUMBER, sb NUMBER, attendance NUMBER, div_win TEXT, ipouts NUMBER, h NUMBER, league_id TEXT, hbp NUMBER, ppf NUMBER, hra NUMBER, ra NUMBER, bpf NUMBER, ha NUMBER, triple NUMBER, fp NUMBER, team_id TEXT, ws_win TEXT, hr NUMBER, year NUMBER, double NUMBER, w NUMBER, soa NUMBER, sv NUMBER); CREATE TABLE park (park_id TEXT); CREATE TABLE manager (rank NUMBER, team_id TEXT);"
      }
    ],
    [
      {
        "question": "What are the ids of 3 players that won the most awards?",
        "query": "SELECT t1.player_id FROM player AS t1 JOIN player_award AS t2 ON t1.player_id = t2.player_id GROUP BY t1.player_id ORDER BY COUNT ( * ) DESC LIMIT 3",
        "schema": "CREATE TABLE manager (player_id TEXT); CREATE TABLE player_college (player_id TEXT); CREATE TABLE batting_postseason (player_id TEXT); CREATE TABLE fielding (pos TEXT, pb NUMBER, cs NUMBER, wp NUMBER, dp NUMBER, player_id TEXT, g NUMBER, a NUMBER, po NUMBER, e NUMBER); CREATE TABLE batting (player_id TEXT); CREATE TABLE player_award_vote (points_max NUMBER, league_id TEXT, points_won NUMBER, player_id TEXT, votes_first NUMBER, award_id TEXT); CREATE TABLE player_award (league_id TEXT, player_id TEXT, award_id TEXT, tie TEXT, notes TEXT); CREATE TABLE hall_of_fame (player_id TEXT, votes NUMBER); CREATE TABLE fielding_outfield (player_id TEXT); CREATE TABLE fielding_postseason (player_id TEXT); CREATE TABLE manager_award_vote (award_id TEXT, votes_first NUMBER, points_won NUMBER, player_id TEXT); CREATE TABLE park (park_alias TEXT, park_id TEXT); CREATE TABLE manager_award (award_id TEXT, player_id TEXT, notes NUMBER); CREATE TABLE salary (player_id TEXT); CREATE TABLE appearances (g_ss NUMBER, player_id TEXT); CREATE TABLE all_star (game_id TEXT, game_num NUMBER, gp NUMBER, player_id TEXT); CREATE TABLE manager_half (player_id TEXT); CREATE TABLE postseason (losses NUMBER, team_id_winner TEXT, league_id_winner TEXT, team_id_loser TEXT, wins NUMBER); CREATE TABLE player (birth_city TEXT, birth_month NUMBER, final_game TEXT, death_city TEXT, retro_id TEXT, throws TEXT, bats TEXT, death_country TEXT, death_month NUMBER, name_first TEXT, birth_year NUMBER, name_last TEXT, death_day NUMBER, weight NUMBER, height NUMBER, death_year NUMBER, name_given TEXT, death_state TEXT, debut TEXT, player_id TEXT, bbref_id TEXT, birth_day NUMBER);"
      },
      {
        "question": "Can you show me the names and ids for this list? | The result shows the full names and ids of 3 players that won the most awards. | What are the city, state and country for these players?",
        "query": "SELECT t1.birth_city , t1.birth_state , t1.birth_country FROM player AS t1 JOIN player_award AS t2 ON t1.player_id = t2.player_id GROUP BY t1.player_id ORDER BY COUNT ( * ) DESC LIMIT 3",
        "schema": "CREATE TABLE all_star (game_num NUMBER, gp NUMBER, player_id TEXT, game_id TEXT); CREATE TABLE player_award (tie TEXT, notes TEXT, league_id TEXT, player_id TEXT, award_id TEXT); CREATE TABLE salary (player_id TEXT); CREATE TABLE postseason (league_id_winner TEXT, team_id_winner TEXT, losses NUMBER, wins NUMBER, team_id_loser TEXT); CREATE TABLE college (state TEXT, city TEXT, country TEXT); CREATE TABLE hall_of_fame (player_id TEXT, votes NUMBER); CREATE TABLE manager_award_vote (player_id TEXT, points_won NUMBER, award_id TEXT, votes_first NUMBER); CREATE TABLE park (country TEXT, park_id TEXT, park_alias TEXT, city TEXT, state TEXT); CREATE TABLE batting_postseason (player_id TEXT); CREATE TABLE manager (player_id TEXT); CREATE TABLE player (death_state TEXT, birth_city TEXT, name_first TEXT, throws TEXT, name_given TEXT, bats TEXT, bbref_id TEXT, death_city TEXT, name_last TEXT, death_country TEXT, player_id TEXT, height NUMBER, retro_id TEXT, death_year NUMBER, birth_day NUMBER, birth_country TEXT, debut TEXT, weight NUMBER, birth_state TEXT, death_day NUMBER, final_game TEXT, birth_year NUMBER, birth_month NUMBER, death_month NUMBER); CREATE TABLE batting (player_id TEXT); CREATE TABLE fielding (a NUMBER, pb NUMBER, wp NUMBER, dp NUMBER, g NUMBER, po NUMBER, player_id TEXT, e NUMBER, pos TEXT, cs NUMBER); CREATE TABLE player_college (player_id TEXT); CREATE TABLE appearances (player_id TEXT, g_ss NUMBER); CREATE TABLE player_award_vote (award_id TEXT, league_id TEXT, points_won NUMBER, points_max NUMBER, player_id TEXT, votes_first NUMBER); CREATE TABLE fielding_postseason (player_id TEXT); CREATE TABLE fielding_outfield (player_id TEXT); CREATE TABLE manager_award (notes NUMBER, award_id TEXT, player_id TEXT); CREATE TABLE manager_half (player_id TEXT);"
      },
      {
        "question": "Can you also show me the birth dates?",
        "query": "SELECT t1.birth_year, t1.birth_month, t1.birth_day FROM player AS t1 JOIN player_award AS t2 ON t1.player_id = t2.player_id GROUP BY t1.player_id ORDER BY COUNT ( * ) DESC LIMIT 3",
        "schema": "CREATE TABLE fielding_outfield (player_id TEXT); CREATE TABLE player_award (tie TEXT, player_id TEXT, award_id TEXT, notes TEXT, league_id TEXT); CREATE TABLE appearances (player_id TEXT, g_ss NUMBER); CREATE TABLE batting_postseason (player_id TEXT); CREATE TABLE player_award_vote (points_won NUMBER, award_id TEXT, points_max NUMBER, league_id TEXT, votes_first NUMBER, player_id TEXT); CREATE TABLE player_college (player_id TEXT); CREATE TABLE manager_half (player_id TEXT); CREATE TABLE postseason (team_id_winner TEXT, losses NUMBER, league_id_winner TEXT, team_id_loser TEXT, wins NUMBER); CREATE TABLE player (birth_state TEXT, death_day NUMBER, birth_year NUMBER, debut TEXT, player_id TEXT, name_last TEXT, death_country TEXT, final_game TEXT, name_given TEXT, retro_id TEXT, bbref_id TEXT, bats TEXT, name_first TEXT, death_year NUMBER, death_month NUMBER, birth_city TEXT, height NUMBER, birth_month NUMBER, death_state TEXT, birth_day NUMBER, weight NUMBER, birth_country TEXT, death_city TEXT, throws TEXT); CREATE TABLE manager_award (award_id TEXT, notes NUMBER, player_id TEXT); CREATE TABLE hall_of_fame (votes NUMBER, player_id TEXT); CREATE TABLE park (state TEXT, country TEXT, park_id TEXT, city TEXT, park_alias TEXT); CREATE TABLE all_star (game_num NUMBER, game_id TEXT, player_id TEXT, gp NUMBER); CREATE TABLE manager (player_id TEXT); CREATE TABLE fielding (po NUMBER, a NUMBER, dp NUMBER, pb NUMBER, wp NUMBER, e NUMBER, player_id TEXT, cs NUMBER, g NUMBER, pos TEXT); CREATE TABLE manager_award_vote (points_won NUMBER, player_id TEXT, votes_first NUMBER, award_id TEXT); CREATE TABLE batting (player_id TEXT); CREATE TABLE fielding_postseason (player_id TEXT); CREATE TABLE college (country TEXT, city TEXT, state TEXT); CREATE TABLE salary (player_id TEXT);"
      }
    ],
    [
      {
        "question": "What is the the birth country of player-ids? | Do you mean the birth country of all players? | yes",
        "query": "SELECT birth_country FROM player",
        "schema": "CREATE TABLE hall_of_fame (player_id TEXT); CREATE TABLE park (country TEXT); CREATE TABLE college (country TEXT); CREATE TABLE player (birth_month NUMBER, height NUMBER, death_day NUMBER, bbref_id TEXT, name_first TEXT, death_year NUMBER, name_given TEXT, death_month NUMBER, final_game TEXT, birth_country TEXT, death_country TEXT, birth_city TEXT, retro_id TEXT, death_city TEXT, birth_year NUMBER, player_id TEXT, name_last TEXT, birth_day NUMBER, death_state TEXT, birth_state TEXT, debut TEXT); CREATE TABLE all_star (player_id TEXT); CREATE TABLE player_award (player_id TEXT);"
      },
      {
        "question": "What is the birth state of player aardsda01?",
        "query": "SELECT birth_state FROM player WHERE player_id = \"aardsda01\"",
        "schema": "CREATE TABLE park (country TEXT); CREATE TABLE player_award (player_id TEXT); CREATE TABLE all_star (player_id TEXT); CREATE TABLE hall_of_fame (player_id TEXT); CREATE TABLE player_college (player_id TEXT); CREATE TABLE player (birth_city TEXT, debut TEXT, birth_month NUMBER, death_day NUMBER, bbref_id TEXT, name_first TEXT, death_state TEXT, retro_id TEXT, death_country TEXT, height NUMBER, birth_year NUMBER, weight NUMBER, birth_country TEXT, name_given TEXT, death_year NUMBER, throws TEXT, death_city TEXT, player_id TEXT, bats TEXT, death_month NUMBER, name_last TEXT, birth_state TEXT, final_game TEXT, birth_day NUMBER); CREATE TABLE college (country TEXT, state TEXT);"
      },
      {
        "question": "What about birth city?",
        "query": "SELECT birth_city FROM player WHERE player_id = \"aardsda01\"",
        "schema": "CREATE TABLE player_award (player_id TEXT); CREATE TABLE player_college (player_id TEXT); CREATE TABLE player (debut TEXT, weight NUMBER, bbref_id TEXT, death_state TEXT, name_given TEXT, death_country TEXT, death_city TEXT, birth_country TEXT, death_year NUMBER, birth_city TEXT, birth_day NUMBER, death_day NUMBER, player_id TEXT, throws TEXT, height NUMBER, birth_state TEXT, final_game TEXT, death_month NUMBER, name_last TEXT, birth_year NUMBER, bats TEXT, birth_month NUMBER, name_first TEXT, retro_id TEXT); CREATE TABLE park (city TEXT, park_id TEXT, park_alias TEXT, country TEXT, park_name TEXT); CREATE TABLE all_star (player_id TEXT); CREATE TABLE college (country TEXT, state TEXT, city TEXT); CREATE TABLE hall_of_fame (player_id TEXT);"
      },
      {
        "question": "and for aaronto01? | You mean the birth city for the player with ID aaronto01? | yes",
        "query": "SELECT birth_city FROM player WHERE player_id = \"aaronto01\"",
        "schema": "CREATE TABLE player_college (player_id TEXT); CREATE TABLE player (birth_state TEXT, death_state TEXT, name_given TEXT, throws TEXT, final_game TEXT, bbref_id TEXT, death_month NUMBER, birth_year NUMBER, birth_day NUMBER, birth_month NUMBER, birth_country TEXT, death_year NUMBER, birth_city TEXT, height NUMBER, name_last TEXT, debut TEXT, name_first TEXT, death_country TEXT, weight NUMBER, bats TEXT, player_id TEXT, retro_id TEXT, death_city TEXT, death_day NUMBER); CREATE TABLE park (country TEXT, park_alias TEXT, city TEXT, park_id TEXT, park_name TEXT); CREATE TABLE all_star (player_id TEXT); CREATE TABLE college (country TEXT, city TEXT, state TEXT); CREATE TABLE player_award (player_id TEXT); CREATE TABLE hall_of_fame (player_id TEXT);"
      },
      {
        "question": "How many players in the USA have a batter value R?",
        "query": "SELECT COUNT ( * ) FROM player WHERE birth_country = 'USA' AND bats = 'R'",
        "schema": "CREATE TABLE player_college (player_id TEXT); CREATE TABLE all_star (player_id TEXT); CREATE TABLE park (park_name TEXT, park_alias TEXT, country TEXT, city TEXT, park_id TEXT); CREATE TABLE college (state TEXT, city TEXT, country TEXT); CREATE TABLE salary (player_id TEXT); CREATE TABLE batting (player_id TEXT, g_idp NUMBER, sb NUMBER, ab NUMBER, hr NUMBER, hbp NUMBER, r NUMBER, h NUMBER); CREATE TABLE player (name_given TEXT, death_month NUMBER, name_last TEXT, name_first TEXT, death_state TEXT, death_city TEXT, weight NUMBER, final_game TEXT, debut TEXT, bbref_id TEXT, retro_id TEXT, birth_country TEXT, death_day NUMBER, player_id TEXT, bats TEXT, birth_year NUMBER, birth_day NUMBER, birth_month NUMBER, height NUMBER, throws TEXT, birth_city TEXT, birth_state TEXT, death_country TEXT, death_year NUMBER); CREATE TABLE player_award (player_id TEXT); CREATE TABLE hall_of_fame (player_id TEXT);"
      },
      {
        "question": "How many with a value R that are dead, died in the USA?",
        "query": "SELECT COUNT ( * ) FROM player WHERE birth_country = 'USA' AND bats = 'R' AND death_year < 2019 AND death_country = 'USA'",
        "schema": "CREATE TABLE player_college (player_id TEXT); CREATE TABLE all_star (player_id TEXT); CREATE TABLE player (bbref_id TEXT, debut TEXT, throws TEXT, height NUMBER, death_state TEXT, birth_country TEXT, death_country TEXT, player_id TEXT, retro_id TEXT, name_given TEXT, bats TEXT, birth_month NUMBER, birth_city TEXT, final_game TEXT, death_month NUMBER, birth_state TEXT, death_day NUMBER, weight NUMBER, name_first TEXT, death_year NUMBER, name_last TEXT, birth_day NUMBER, death_city TEXT, birth_year NUMBER); CREATE TABLE player_award (player_id TEXT); CREATE TABLE hall_of_fame (player_id TEXT); CREATE TABLE park (park_alias TEXT, park_id TEXT, country TEXT, park_name TEXT, city TEXT); CREATE TABLE batting (hbp NUMBER, sb NUMBER, so NUMBER, g NUMBER, hr NUMBER, h NUMBER, ab NUMBER, player_id TEXT, g_idp NUMBER, r NUMBER); CREATE TABLE salary (player_id TEXT); CREATE TABLE college (city TEXT, country TEXT, state TEXT);"
      },
      {
        "question": "How many with a value R died after the year 2000?",
        "query": "SELECT COUNT ( * ) FROM player WHERE bats = 'R' AND death_year > 2000",
        "schema": "CREATE TABLE player (name_given TEXT, birth_country TEXT, death_country TEXT, weight NUMBER, player_id TEXT, final_game TEXT, retro_id TEXT, death_state TEXT, birth_day NUMBER, bats TEXT, debut TEXT, throws TEXT, death_year NUMBER, name_last TEXT, name_first TEXT, birth_month NUMBER, death_day NUMBER, bbref_id TEXT, birth_city TEXT, birth_state TEXT, death_month NUMBER, height NUMBER, death_city TEXT, birth_year NUMBER); CREATE TABLE player_award (player_id TEXT); CREATE TABLE batting (year NUMBER, h NUMBER, so NUMBER, hr NUMBER, sb NUMBER, g_idp NUMBER, g NUMBER, r NUMBER, ab NUMBER, hbp NUMBER, player_id TEXT); CREATE TABLE player_college (player_id TEXT); CREATE TABLE hall_of_fame (player_id TEXT); CREATE TABLE salary (player_id TEXT); CREATE TABLE college (country TEXT, city TEXT, state TEXT); CREATE TABLE park (city TEXT, park_id TEXT, park_name TEXT, park_alias TEXT, country TEXT); CREATE TABLE all_star (player_id TEXT);"
      },
      {
        "question": "What about born after the year 1980?",
        "query": "SELECT COUNT ( * ) FROM player WHERE bats = 'R' AND birth_year > 1980",
        "schema": "CREATE TABLE player_award (player_id TEXT); CREATE TABLE park (park_alias TEXT, park_name TEXT, country TEXT, park_id TEXT, city TEXT); CREATE TABLE batting (hbp NUMBER, sb NUMBER, year NUMBER, so NUMBER, g_idp NUMBER, player_id TEXT, ab NUMBER, hr NUMBER, h NUMBER, g NUMBER, r NUMBER); CREATE TABLE all_star (player_id TEXT); CREATE TABLE college (state TEXT, city TEXT, country TEXT); CREATE TABLE player_college (player_id TEXT); CREATE TABLE hall_of_fame (player_id TEXT); CREATE TABLE player (death_year NUMBER, name_given TEXT, bats TEXT, death_state TEXT, debut TEXT, birth_year NUMBER, birth_city TEXT, birth_month NUMBER, death_month NUMBER, death_day NUMBER, weight NUMBER, throws TEXT, player_id TEXT, bbref_id TEXT, retro_id TEXT, birth_state TEXT, name_last TEXT, name_first TEXT, death_country TEXT, height NUMBER, birth_country TEXT, death_city TEXT, final_game TEXT, birth_day NUMBER); CREATE TABLE salary (player_id TEXT);"
      }
    ],
    [
      {
        "question": "Which player has the highest salary on the list?",
        "query": "SELECT player_id FROM salary ORDER BY salary DESC LIMIT 1",
        "schema": "CREATE TABLE all_star (player_id TEXT, gp NUMBER); CREATE TABLE fielding_outfield (player_id TEXT); CREATE TABLE fielding (player_id TEXT); CREATE TABLE player (weight NUMBER, bbref_id TEXT, death_city TEXT, birth_day NUMBER, death_day NUMBER, player_id TEXT, bats TEXT, retro_id TEXT, throws TEXT, final_game TEXT, death_state TEXT, name_given TEXT, name_last TEXT, name_first TEXT, birth_city TEXT, death_year NUMBER, birth_country TEXT, death_month NUMBER, birth_year NUMBER, height NUMBER, birth_state TEXT, death_country TEXT, birth_month NUMBER, debut TEXT); CREATE TABLE manager_award (player_id TEXT); CREATE TABLE hall_of_fame (player_id TEXT); CREATE TABLE appearances (player_id TEXT); CREATE TABLE salary (salary NUMBER, team_id TEXT, player_id TEXT, league_id TEXT); CREATE TABLE player_award_vote (player_id TEXT); CREATE TABLE manager_award_vote (player_id TEXT); CREATE TABLE player_award (player_id TEXT);"
      },
      {
        "question": "How many players has the birth country in USA?",
        "query": "SELECT COUNT ( player_id ) FROM player WHERE birth_country = 'USA'",
        "schema": "CREATE TABLE appearances (player_id TEXT); CREATE TABLE college (country TEXT); CREATE TABLE hall_of_fame (player_id TEXT); CREATE TABLE player_award (player_id TEXT); CREATE TABLE manager_award (player_id TEXT); CREATE TABLE park (country TEXT); CREATE TABLE player (height NUMBER, throws TEXT, retro_id TEXT, birth_state TEXT, birth_month NUMBER, name_last TEXT, name_given TEXT, death_day NUMBER, player_id TEXT, birth_year NUMBER, bats TEXT, death_state TEXT, final_game TEXT, death_year NUMBER, bbref_id TEXT, debut TEXT, name_first TEXT, birth_country TEXT, death_city TEXT, weight NUMBER, birth_day NUMBER, death_country TEXT, death_month NUMBER, birth_city TEXT); CREATE TABLE manager_award_vote (player_id TEXT); CREATE TABLE fielding_outfield (player_id TEXT); CREATE TABLE fielding (player_id TEXT); CREATE TABLE salary (team_id TEXT, player_id TEXT, league_id TEXT, salary NUMBER); CREATE TABLE player_award_vote (player_id TEXT); CREATE TABLE all_star (gp NUMBER, player_id TEXT);"
      },
      {
        "question": "State the team id which has the highest rank in the list?",
        "query": "SELECT team_id FROM team ORDER BY rank LIMIT 1",
        "schema": "CREATE TABLE manager_award_vote (player_id TEXT); CREATE TABLE salary (salary NUMBER, league_id TEXT, team_id TEXT, player_id TEXT); CREATE TABLE player_award (player_id TEXT); CREATE TABLE manager_half (rank NUMBER); CREATE TABLE team_half (rank NUMBER, team_id TEXT, div_id TEXT); CREATE TABLE fielding_outfield (player_id TEXT); CREATE TABLE park (country TEXT); CREATE TABLE appearances (player_id TEXT); CREATE TABLE player_award_vote (player_id TEXT); CREATE TABLE all_star (gp NUMBER, player_id TEXT, team_id TEXT); CREATE TABLE manager_award (player_id TEXT); CREATE TABLE fielding (team_id TEXT, player_id TEXT); CREATE TABLE hall_of_fame (player_id TEXT); CREATE TABLE manager (team_id TEXT, rank NUMBER); CREATE TABLE team_franchise (na_assoc TEXT, franchise_id TEXT); CREATE TABLE team (g NUMBER, ha NUMBER, so NUMBER, div_id TEXT, rank NUMBER, team_id TEXT, park TEXT, wc_win TEXT, er NUMBER, ipouts NUMBER, team_id_lahman45 TEXT, cs NUMBER, team_id_retro TEXT, hbp NUMBER, bpf NUMBER, ghome NUMBER, sho NUMBER, name TEXT, sb NUMBER, lg_win TEXT, franchise_id TEXT, double NUMBER, e NUMBER, ppf NUMBER, cg NUMBER, dp NUMBER, sv NUMBER, league_id TEXT, fp NUMBER, hr NUMBER, attendance NUMBER, team_id_br TEXT, div_win TEXT, soa NUMBER, bba NUMBER, year NUMBER, ab NUMBER, ws_win TEXT, sf NUMBER, triple NUMBER, ra NUMBER, l NUMBER, r NUMBER, w NUMBER, hra NUMBER, h NUMBER, era NUMBER, bb NUMBER); CREATE TABLE player (death_month NUMBER, bbref_id TEXT, final_game TEXT, name_first TEXT, throws TEXT, death_state TEXT, bats TEXT, birth_year NUMBER, weight NUMBER, retro_id TEXT, birth_country TEXT, name_given TEXT, name_last TEXT, death_day NUMBER, death_year NUMBER, birth_city TEXT, debut TEXT, player_id TEXT, death_country TEXT, birth_day NUMBER, death_city TEXT, height NUMBER, birth_state TEXT, birth_month NUMBER); CREATE TABLE college (country TEXT);"
      },
      {
        "question": "List player's first name and last name who received salary from team Washington Nationals in both 2005 and 2007?",
        "query": "SELECT t2.name_first , t2.name_last FROM salary AS t1 JOIN player AS t2 ON t1.player_id = t2.player_id JOIN team AS t3 ON t3.team_id_br = t1.team_id WHERE t1.year = 2005 AND t3.name = 'Washington Nationals' INTERSECT SELECT t2.name_first , t2.name_last FROM salary AS t1 JOIN player AS t2 ON t1.player_id = t2.player_id JOIN team AS t3 ON t3.team_id_br = t1.team_id WHERE t1.year = 2007 AND t3.name = 'Washington Nationals'",
        "schema": "CREATE TABLE hall_of_fame (player_id TEXT); CREATE TABLE player_award (player_id TEXT, year NUMBER); CREATE TABLE fielding_outfield (player_id TEXT); CREATE TABLE manager_half (rank NUMBER); CREATE TABLE manager (rank NUMBER, team_id TEXT); CREATE TABLE all_star (gp NUMBER, year NUMBER, player_id TEXT, team_id TEXT); CREATE TABLE team (lg_win TEXT, franchise_id TEXT, l NUMBER, triple NUMBER, fp NUMBER, ppf NUMBER, ha NUMBER, sv NUMBER, sho NUMBER, ghome NUMBER, bba NUMBER, bb NUMBER, e NUMBER, team_id_br TEXT, ra NUMBER, div_win TEXT, dp NUMBER, name TEXT, r NUMBER, league_id TEXT, ab NUMBER, cg NUMBER, so NUMBER, park TEXT, sf NUMBER, ipouts NUMBER, er NUMBER, soa NUMBER, attendance NUMBER, team_id_lahman45 TEXT, ws_win TEXT, div_id TEXT, g NUMBER, team_id TEXT, hr NUMBER, cs NUMBER, w NUMBER, rank NUMBER, h NUMBER, year NUMBER, wc_win TEXT, team_id_retro TEXT, bpf NUMBER, double NUMBER, era NUMBER, hra NUMBER, sb NUMBER, hbp NUMBER); CREATE TABLE team_half (team_id TEXT, year NUMBER, l NUMBER, div_id TEXT, rank NUMBER); CREATE TABLE manager_award (player_id TEXT); CREATE TABLE postseason (year NUMBER); CREATE TABLE appearances (player_id TEXT); CREATE TABLE manager_award_vote (player_id TEXT); CREATE TABLE park (city TEXT, country TEXT); CREATE TABLE player_award_vote (player_id TEXT); CREATE TABLE player (retro_id TEXT, birth_city TEXT, birth_country TEXT, death_state TEXT, name_given TEXT, bats TEXT, player_id TEXT, weight NUMBER, throws TEXT, bbref_id TEXT, height NUMBER, debut TEXT, birth_state TEXT, final_game TEXT, death_country TEXT, death_month NUMBER, birth_month NUMBER, name_last TEXT, name_first TEXT, birth_day NUMBER, death_city TEXT, death_day NUMBER, birth_year NUMBER, death_year NUMBER); CREATE TABLE home_game (year NUMBER); CREATE TABLE college (country TEXT); CREATE TABLE team_franchise (franchise_name TEXT, na_assoc TEXT, franchise_id TEXT); CREATE TABLE fielding (team_id TEXT, player_id TEXT); CREATE TABLE salary (team_id TEXT, player_id TEXT, year NUMBER, salary NUMBER, league_id TEXT);"
      }
    ],
    [
      {
        "question": "can you count the number of of games played in atlanta in 2000",
        "query": "SELECT COUNT ( * ) FROM home_game AS t1 JOIN park AS t2 ON t1.park_id = t2.park_id WHERE t1.year = 2000 AND t2.city = 'Atlanta'",
        "schema": "CREATE TABLE team_franchise (franchise_id TEXT, franchise_name TEXT); CREATE TABLE pitching_postseason (baopp TEXT, year NUMBER); CREATE TABLE team (team_id TEXT); CREATE TABLE player_award_vote (year NUMBER); CREATE TABLE fielding_postseason (round TEXT, player_id TEXT, g NUMBER, league_id TEXT, dp NUMBER, year NUMBER, sb NUMBER, e NUMBER, team_id TEXT, pos TEXT, cs NUMBER, inn_outs NUMBER, tp NUMBER, pb NUMBER, gs NUMBER); CREATE TABLE college (city TEXT, college_id TEXT); CREATE TABLE all_star (year NUMBER, player_id TEXT, game_id TEXT, game_num NUMBER); CREATE TABLE fielding_outfield (year NUMBER, player_id TEXT); CREATE TABLE postseason (round TEXT, year NUMBER); CREATE TABLE park (park_alias TEXT, park_id TEXT, city TEXT, park_name TEXT); CREATE TABLE hall_of_fame (yearid NUMBER); CREATE TABLE manager (year NUMBER); CREATE TABLE home_game (year NUMBER, league_id TEXT, park_id TEXT, team_id TEXT, games NUMBER); CREATE TABLE appearances (year NUMBER); CREATE TABLE player_award (year NUMBER); CREATE TABLE player (player_id TEXT); CREATE TABLE player_college (player_id TEXT, college_id TEXT, year NUMBER);"
      }
    ],
    [
      {
        "question": "Which team had the most players in the all star games?",
        "query": "SELECT * FROM all_star GROUP BY team_id ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE all_star (game_id TEXT, game_num NUMBER, league_id TEXT, gp NUMBER, player_id TEXT, team_id TEXT); CREATE TABLE player (bbref_id TEXT, final_game TEXT, player_id TEXT); CREATE TABLE fielding_outfield (player_id TEXT); CREATE TABLE player_award_vote (league_id TEXT, player_id TEXT); CREATE TABLE hall_of_fame (player_id TEXT); CREATE TABLE home_game (games NUMBER, team_id TEXT); CREATE TABLE pitching (league_id TEXT, team_id TEXT); CREATE TABLE batting_postseason (player_id TEXT, team_id TEXT); CREATE TABLE salary (team_id TEXT); CREATE TABLE team (cg NUMBER, rank NUMBER, sho NUMBER, l NUMBER, sv NUMBER, name TEXT, sf NUMBER, era NUMBER, fp NUMBER, team_id_retro TEXT, bpf NUMBER, hra NUMBER, bb NUMBER, cs NUMBER, er NUMBER, g NUMBER, year NUMBER, ghome NUMBER, triple NUMBER, h NUMBER, ab NUMBER, lg_win TEXT, soa NUMBER, wc_win TEXT, ws_win TEXT, ra NUMBER, div_win TEXT, e NUMBER, league_id TEXT, hbp NUMBER, ha NUMBER, dp NUMBER, hr NUMBER, franchise_id TEXT, team_id TEXT, double NUMBER, team_id_lahman45 TEXT, ppf NUMBER, team_id_br TEXT, ipouts NUMBER, sb NUMBER, bba NUMBER, attendance NUMBER, so NUMBER, r NUMBER, div_id TEXT, park TEXT, w NUMBER); CREATE TABLE pitching_postseason (league_id TEXT, player_id TEXT, year NUMBER, ibb NUMBER, bfp NUMBER, hbp NUMBER, gs NUMBER, cg NUMBER, er NUMBER, w NUMBER, h NUMBER, era NUMBER, round TEXT, team_id TEXT, gf NUMBER, so NUMBER, sho NUMBER, bk NUMBER, sv NUMBER, l NUMBER, hr NUMBER, sf NUMBER, r NUMBER, wp NUMBER, g_idp NUMBER, bb NUMBER, ipouts NUMBER, sh NUMBER, baopp TEXT, g NUMBER); CREATE TABLE postseason (team_id_winner TEXT, team_id_loser TEXT, round TEXT); CREATE TABLE batting (team_id TEXT, player_id TEXT); CREATE TABLE team_franchise (na_assoc TEXT, franchise_name TEXT, franchise_id TEXT); CREATE TABLE manager (team_id TEXT); CREATE TABLE fielding_postseason (round TEXT, pos TEXT, team_id TEXT, g NUMBER, sb NUMBER, pb NUMBER, e NUMBER, a NUMBER, league_id TEXT, po NUMBER, cs NUMBER, gs NUMBER, tp NUMBER, dp NUMBER, year NUMBER, player_id TEXT, inn_outs NUMBER); CREATE TABLE manager_half (team_id TEXT); CREATE TABLE fielding (league_id TEXT, player_id TEXT, team_id TEXT); CREATE TABLE player_award (league_id TEXT, player_id TEXT); CREATE TABLE team_half (team_id TEXT, div_win TEXT, rank NUMBER, w NUMBER, div_id TEXT, l NUMBER, league_id TEXT, g NUMBER, half NUMBER); CREATE TABLE appearances (team_id TEXT, player_id TEXT);"
      },
      {
        "question": "WHich player has the most all star games played?",
        "query": "SELECT * FROM player AS t1 JOIN all_star AS t2 ON t1.player_id = t2.player_id GROUP BY t1.player_id ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE player_award_vote (league_id TEXT, player_id TEXT); CREATE TABLE hall_of_fame (player_id TEXT); CREATE TABLE all_star (game_num NUMBER, gp NUMBER, league_id TEXT, player_id TEXT, team_id TEXT, game_id TEXT); CREATE TABLE batting_postseason (player_id TEXT, team_id TEXT); CREATE TABLE fielding_postseason (team_id TEXT, e NUMBER, inn_outs NUMBER, g NUMBER, a NUMBER, round TEXT, dp NUMBER, pb NUMBER, year NUMBER, league_id TEXT, player_id TEXT, pos TEXT, sb NUMBER, po NUMBER, tp NUMBER, gs NUMBER, cs NUMBER); CREATE TABLE manager (team_id TEXT); CREATE TABLE batting (player_id TEXT, team_id TEXT); CREATE TABLE pitching_postseason (player_id TEXT, g NUMBER, g_idp NUMBER, ibb NUMBER, h NUMBER, sh NUMBER, team_id TEXT, round TEXT, wp NUMBER, w NUMBER, gs NUMBER, sf NUMBER, baopp TEXT, hbp NUMBER, bb NUMBER, so NUMBER, era NUMBER, l NUMBER, sho NUMBER, ipouts NUMBER, sv NUMBER, hr NUMBER, er NUMBER, bfp NUMBER, cg NUMBER, league_id TEXT, bk NUMBER, year NUMBER, r NUMBER, gf NUMBER); CREATE TABLE fielding_outfield (player_id TEXT); CREATE TABLE player (name_last TEXT, birth_year NUMBER, bbref_id TEXT, final_game TEXT, birth_month NUMBER, height NUMBER, birth_city TEXT, death_year NUMBER, bats TEXT, weight NUMBER, name_first TEXT, birth_country TEXT, death_state TEXT, throws TEXT, player_id TEXT, death_month NUMBER, death_day NUMBER, debut TEXT, birth_state TEXT, retro_id TEXT, name_given TEXT, death_country TEXT, death_city TEXT, birth_day NUMBER); CREATE TABLE fielding (team_id TEXT, league_id TEXT, player_id TEXT); CREATE TABLE postseason (round TEXT, team_id_winner TEXT, team_id_loser TEXT); CREATE TABLE pitching (team_id TEXT, league_id TEXT); CREATE TABLE salary (team_id TEXT); CREATE TABLE team_half (div_id TEXT, w NUMBER, half NUMBER, l NUMBER, g NUMBER, div_win TEXT, team_id TEXT, rank NUMBER, league_id TEXT); CREATE TABLE home_game (games NUMBER, team_id TEXT); CREATE TABLE team (ws_win TEXT, sv NUMBER, league_id TEXT, e NUMBER, ppf NUMBER, ghome NUMBER, rank NUMBER, team_id TEXT, soa NUMBER, lg_win TEXT, h NUMBER, ra NUMBER, year NUMBER, l NUMBER, fp NUMBER, div_win TEXT, er NUMBER, cs NUMBER, w NUMBER, wc_win TEXT, era NUMBER, hra NUMBER, g NUMBER, name TEXT, hbp NUMBER, bba NUMBER, team_id_retro TEXT, double NUMBER, r NUMBER, team_id_lahman45 TEXT, ha NUMBER, dp NUMBER, sb NUMBER, franchise_id TEXT, sho NUMBER, ipouts NUMBER, so NUMBER, sf NUMBER, triple NUMBER, ab NUMBER, team_id_br TEXT, hr NUMBER, bpf NUMBER, attendance NUMBER, bb NUMBER, park TEXT, cg NUMBER, div_id TEXT); CREATE TABLE team_franchise (franchise_id TEXT, franchise_name TEXT, na_assoc TEXT); CREATE TABLE manager_half (team_id TEXT); CREATE TABLE appearances (team_id TEXT, player_id TEXT); CREATE TABLE player_award (league_id TEXT, player_id TEXT);"
      },
      {
        "question": "What is his id?",
        "query": "SELECT t1.player_id FROM player AS t1 JOIN all_star AS t2 ON t1.player_id = t2.player_id GROUP BY t1.player_id ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE player_award (player_id TEXT, league_id TEXT); CREATE TABLE batting (player_id TEXT, team_id TEXT); CREATE TABLE salary (team_id TEXT); CREATE TABLE team_half (div_id TEXT, team_id TEXT, div_win TEXT, w NUMBER, l NUMBER, g NUMBER, rank NUMBER, half NUMBER, league_id TEXT); CREATE TABLE appearances (team_id TEXT, player_id TEXT); CREATE TABLE home_game (games NUMBER, team_id TEXT); CREATE TABLE team (rank NUMBER, l NUMBER, soa NUMBER, double NUMBER, triple NUMBER, bba NUMBER, r NUMBER, dp NUMBER, sv NUMBER, hr NUMBER, div_win TEXT, ws_win TEXT, franchise_id TEXT, ppf NUMBER, er NUMBER, ghome NUMBER, g NUMBER, bb NUMBER, cg NUMBER, hra NUMBER, name TEXT, team_id_lahman45 TEXT, so NUMBER, lg_win TEXT, ra NUMBER, era NUMBER, h NUMBER, ipouts NUMBER, cs NUMBER, park TEXT, team_id_retro TEXT, w NUMBER, hbp NUMBER, sho NUMBER, team_id TEXT, bpf NUMBER, ha NUMBER, attendance NUMBER, sf NUMBER, sb NUMBER, league_id TEXT, team_id_br TEXT, year NUMBER, div_id TEXT, wc_win TEXT, ab NUMBER, e NUMBER, fp NUMBER); CREATE TABLE player (name_first TEXT, throws TEXT, birth_state TEXT, final_game TEXT, birth_day NUMBER, death_state TEXT, name_given TEXT, height NUMBER, birth_year NUMBER, bbref_id TEXT, death_day NUMBER, player_id TEXT, death_city TEXT, name_last TEXT, death_country TEXT, debut TEXT, retro_id TEXT, birth_month NUMBER, birth_city TEXT, birth_country TEXT, death_year NUMBER, death_month NUMBER, bats TEXT, weight NUMBER); CREATE TABLE team_franchise (franchise_name TEXT, franchise_id TEXT, na_assoc TEXT); CREATE TABLE pitching (team_id TEXT, league_id TEXT); CREATE TABLE fielding_outfield (player_id TEXT); CREATE TABLE fielding (player_id TEXT, team_id TEXT, league_id TEXT); CREATE TABLE batting_postseason (team_id TEXT, player_id TEXT); CREATE TABLE hall_of_fame (player_id TEXT); CREATE TABLE all_star (league_id TEXT, player_id TEXT, game_num NUMBER, gp NUMBER, team_id TEXT, game_id TEXT); CREATE TABLE player_award_vote (player_id TEXT, league_id TEXT); CREATE TABLE manager (team_id TEXT); CREATE TABLE manager_half (team_id TEXT); CREATE TABLE postseason (team_id_winner TEXT, team_id_loser TEXT, round TEXT); CREATE TABLE fielding_postseason (a NUMBER, cs NUMBER, team_id TEXT, pb NUMBER, sb NUMBER, g NUMBER, dp NUMBER, round TEXT, league_id TEXT, po NUMBER, inn_outs NUMBER, player_id TEXT, gs NUMBER, pos TEXT, e NUMBER, year NUMBER, tp NUMBER); CREATE TABLE pitching_postseason (team_id TEXT, era NUMBER, sv NUMBER, g_idp NUMBER, w NUMBER, er NUMBER, year NUMBER, bfp NUMBER, h NUMBER, l NUMBER, round TEXT, league_id TEXT, ibb NUMBER, sh NUMBER, hr NUMBER, sho NUMBER, hbp NUMBER, baopp TEXT, r NUMBER, cg NUMBER, gs NUMBER, sf NUMBER, player_id TEXT, gf NUMBER, bk NUMBER, wp NUMBER, bb NUMBER, g NUMBER, so NUMBER, ipouts NUMBER);"
      }
    ],
    [
      {
        "question": "What is the full name and id of the college with the largest number of baseball players?",
        "query": "SELECT t1.name_full , t1.college_id FROM college AS t1 JOIN player_college AS t2 ON t1.college_id = t2.college_id GROUP BY t1.college_id ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE college (name_full TEXT, college_id TEXT); CREATE TABLE hall_of_fame (player_id TEXT); CREATE TABLE fielding (pb NUMBER, dp NUMBER, player_id TEXT, e NUMBER, a NUMBER); CREATE TABLE player_college (college_id TEXT, player_id TEXT); CREATE TABLE player (name_last TEXT, name_given TEXT, name_first TEXT, bbref_id TEXT, player_id TEXT); CREATE TABLE fielding_outfield (player_id TEXT); CREATE TABLE all_star (player_id TEXT); CREATE TABLE batting (so NUMBER, player_id TEXT);"
      },
      {
        "question": "And how many players go there?",
        "query": "SELECT COUNT ( DISTINCT player_id ) FROM player_college WHERE college_id = ( SELECT t1.college_id FROM college AS t1 JOIN player_college AS t2 ON t1.college_id = t2.college_id GROUP BY t1.college_id ORDER BY COUNT ( * ) DESC LIMIT 1 )",
        "schema": "CREATE TABLE batting (player_id TEXT, so NUMBER); CREATE TABLE fielding (a NUMBER, player_id TEXT, pb NUMBER, dp NUMBER, e NUMBER); CREATE TABLE all_star (player_id TEXT); CREATE TABLE player_college (player_id TEXT, college_id TEXT, year NUMBER); CREATE TABLE hall_of_fame (player_id TEXT); CREATE TABLE fielding_outfield (player_id TEXT); CREATE TABLE player (player_id TEXT, name_last TEXT, name_first TEXT, bbref_id TEXT, name_given TEXT); CREATE TABLE college (name_full TEXT, college_id TEXT);"
      },
      {
        "question": "And where is that college located?",
        "query": "SELECT t1.city, t1.state, t1.country FROM college AS t1 JOIN player_college AS t2 ON t1.college_id = t2.college_id GROUP BY t1.college_id ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE college (name_full TEXT, college_id TEXT, state TEXT, country TEXT, city TEXT); CREATE TABLE fielding (dp NUMBER, player_id TEXT, pb NUMBER, e NUMBER, a NUMBER); CREATE TABLE hall_of_fame (player_id TEXT); CREATE TABLE player (bbref_id TEXT, player_id TEXT, name_first TEXT, name_last TEXT, name_given TEXT); CREATE TABLE all_star (player_id TEXT); CREATE TABLE player_college (year NUMBER, college_id TEXT, player_id TEXT); CREATE TABLE fielding_outfield (player_id TEXT); CREATE TABLE batting (so NUMBER, player_id TEXT);"
      },
      {
        "question": "And what year did the largest number of baseball players attend that college?",
        "query": "SELECT YEAR FROM player_college WHERE college_id = ( SELECT t1.college_id FROM college AS t1 JOIN player_college AS t2 ON t1.college_id = t2.college_id GROUP BY t1.college_id ORDER BY COUNT ( * ) DESC LIMIT 1 ) GROUP BY college_id ORDER BY YEAR DESC LIMIT 1",
        "schema": "CREATE TABLE batting (so NUMBER, player_id TEXT); CREATE TABLE college (city TEXT, college_id TEXT, name_full TEXT, state TEXT, country TEXT); CREATE TABLE player (name_given TEXT, player_id TEXT, bbref_id TEXT, name_first TEXT, name_last TEXT); CREATE TABLE park (city TEXT); CREATE TABLE fielding (dp NUMBER, year NUMBER, pb NUMBER, a NUMBER, e NUMBER, player_id TEXT); CREATE TABLE hall_of_fame (player_id TEXT); CREATE TABLE batting_postseason (year NUMBER); CREATE TABLE fielding_postseason (year NUMBER); CREATE TABLE all_star (player_id TEXT); CREATE TABLE player_college (year NUMBER, player_id TEXT, college_id TEXT); CREATE TABLE fielding_outfield (player_id TEXT, year NUMBER); CREATE TABLE home_game (year NUMBER); CREATE TABLE postseason (year NUMBER);"
      },
      {
        "question": "How many baseball players attended that college in 2018?",
        "query": "SELECT COUNT ( player_id ) FROM player_college WHERE YEAR = \"2018\" AND college_id = \"texas\"",
        "schema": "CREATE TABLE fielding_postseason (year NUMBER); CREATE TABLE all_star (player_id TEXT); CREATE TABLE fielding_outfield (player_id TEXT, year NUMBER); CREATE TABLE postseason (year NUMBER); CREATE TABLE player_college (player_id TEXT, college_id TEXT, year NUMBER); CREATE TABLE player (bbref_id TEXT, player_id TEXT, name_first TEXT, name_last TEXT, name_given TEXT); CREATE TABLE college (college_id TEXT, city TEXT, state TEXT, name_full TEXT, country TEXT); CREATE TABLE batting_postseason (year NUMBER); CREATE TABLE hall_of_fame (player_id TEXT); CREATE TABLE fielding (a NUMBER, e NUMBER, dp NUMBER, pb NUMBER, player_id TEXT, year NUMBER); CREATE TABLE batting (so NUMBER, player_id TEXT); CREATE TABLE park (city TEXT); CREATE TABLE home_game (year NUMBER);"
      }
    ],
    [
      {
        "question": "Show me the salary of team id ATL?",
        "query": "SELECT salary FROM salary AS t1 JOIN team AS t2 ON t1.team_id = t2.team_id_br WHERE t1.team_id = \"ATL\"",
        "schema": "CREATE TABLE manager_half (team_id TEXT); CREATE TABLE manager (team_id TEXT, league_id TEXT); CREATE TABLE player_award (player_id TEXT, league_id TEXT); CREATE TABLE fielding_postseason (team_id TEXT, player_id TEXT); CREATE TABLE player_college (player_id TEXT, college_id TEXT); CREATE TABLE team (team_id TEXT, e NUMBER, so NUMBER, soa NUMBER, hra NUMBER, team_id_lahman45 TEXT, ab NUMBER, attendance NUMBER, div_id TEXT, fp NUMBER, park TEXT, ppf NUMBER, rank NUMBER, dp NUMBER, er NUMBER, hbp NUMBER, cs NUMBER, l NUMBER, wc_win TEXT, lg_win TEXT, team_id_br TEXT, era NUMBER, w NUMBER, bb NUMBER, g NUMBER, bba NUMBER, ha NUMBER, sv NUMBER, hr NUMBER, name TEXT, r NUMBER, team_id_retro TEXT, bpf NUMBER, cg NUMBER, double NUMBER, year NUMBER, franchise_id TEXT, ra NUMBER, sho NUMBER, h NUMBER, div_win TEXT, sb NUMBER, sf NUMBER, ipouts NUMBER, league_id TEXT, ghome NUMBER, ws_win TEXT, triple NUMBER); CREATE TABLE player (player_id TEXT); CREATE TABLE all_star (team_id TEXT, game_id TEXT, player_id TEXT, league_id TEXT); CREATE TABLE hall_of_fame (player_id TEXT); CREATE TABLE appearances (player_id TEXT, team_id TEXT); CREATE TABLE home_game (team_id TEXT); CREATE TABLE team_franchise (franchise_id TEXT, na_assoc TEXT, franchise_name TEXT); CREATE TABLE fielding_outfield (player_id TEXT); CREATE TABLE salary (league_id TEXT, team_id TEXT, player_id TEXT, salary NUMBER, year NUMBER); CREATE TABLE fielding (team_id TEXT); CREATE TABLE college (city TEXT, college_id TEXT); CREATE TABLE park (park_id TEXT); CREATE TABLE team_half (team_id TEXT, l NUMBER, div_id TEXT, w NUMBER, league_id TEXT, g NUMBER); CREATE TABLE batting_postseason (team_id TEXT); CREATE TABLE manager_award (player_id TEXT, league_id TEXT); CREATE TABLE player_award_vote (player_id TEXT);"
      },
      {
        "question": "Show me the league id of player id bedrost01 ?",
        "query": "SELECT DISTINCT t1.league_id FROM salary AS t1 JOIN team AS t2 ON t1.team_id = t2.team_id_br WHERE t1.player_id = \"bedrost01\"",
        "schema": "CREATE TABLE all_star (player_id TEXT, league_id TEXT, game_id TEXT, team_id TEXT); CREATE TABLE home_game (team_id TEXT); CREATE TABLE manager_half (team_id TEXT); CREATE TABLE player_college (college_id TEXT, player_id TEXT); CREATE TABLE hall_of_fame (player_id TEXT); CREATE TABLE team (team_id_retro TEXT, sho NUMBER, lg_win TEXT, bpf NUMBER, league_id TEXT, dp NUMBER, park TEXT, ha NUMBER, ab NUMBER, team_id TEXT, g NUMBER, sv NUMBER, attendance NUMBER, hra NUMBER, team_id_lahman45 TEXT, hr NUMBER, fp NUMBER, bb NUMBER, l NUMBER, div_id TEXT, year NUMBER, wc_win TEXT, triple NUMBER, sb NUMBER, bba NUMBER, so NUMBER, ghome NUMBER, e NUMBER, cs NUMBER, soa NUMBER, ppf NUMBER, ws_win TEXT, double NUMBER, div_win TEXT, name TEXT, h NUMBER, cg NUMBER, ra NUMBER, er NUMBER, rank NUMBER, era NUMBER, ipouts NUMBER, team_id_br TEXT, franchise_id TEXT, sf NUMBER, r NUMBER, w NUMBER, hbp NUMBER); CREATE TABLE batting_postseason (team_id TEXT); CREATE TABLE park (park_id TEXT); CREATE TABLE team_franchise (na_assoc TEXT, franchise_id TEXT, franchise_name TEXT); CREATE TABLE manager_award (league_id TEXT, player_id TEXT); CREATE TABLE player_award (league_id TEXT, player_id TEXT); CREATE TABLE college (city TEXT, college_id TEXT); CREATE TABLE team_half (league_id TEXT, w NUMBER, g NUMBER, div_id TEXT, team_id TEXT, l NUMBER); CREATE TABLE salary (year NUMBER, team_id TEXT, league_id TEXT, salary NUMBER, player_id TEXT); CREATE TABLE fielding_outfield (player_id TEXT); CREATE TABLE fielding (team_id TEXT, player_id TEXT); CREATE TABLE player (player_id TEXT, bbref_id TEXT); CREATE TABLE player_award_vote (player_id TEXT); CREATE TABLE appearances (team_id TEXT, player_id TEXT); CREATE TABLE fielding_postseason (team_id TEXT, player_id TEXT); CREATE TABLE manager (team_id TEXT, league_id TEXT);"
      },
      {
        "question": "Show me the player id with salary 545000?",
        "query": "SELECT DISTINCT t1.player_id FROM salary AS t1 JOIN team AS t2 ON t1.team_id = t2.team_id_br WHERE t1.salary = 545000",
        "schema": "CREATE TABLE fielding_outfield (player_id TEXT); CREATE TABLE manager (team_id TEXT, league_id TEXT); CREATE TABLE park (park_id TEXT); CREATE TABLE team_half (l NUMBER, league_id TEXT, div_id TEXT, team_id TEXT, w NUMBER, g NUMBER); CREATE TABLE batting_postseason (team_id TEXT); CREATE TABLE fielding_postseason (player_id TEXT, team_id TEXT); CREATE TABLE player (bbref_id TEXT, player_id TEXT); CREATE TABLE manager_half (team_id TEXT); CREATE TABLE player_award (league_id TEXT, player_id TEXT); CREATE TABLE college (college_id TEXT, city TEXT); CREATE TABLE appearances (team_id TEXT, player_id TEXT); CREATE TABLE team_franchise (franchise_id TEXT, na_assoc TEXT, franchise_name TEXT); CREATE TABLE all_star (league_id TEXT, game_id TEXT, player_id TEXT, team_id TEXT); CREATE TABLE salary (player_id TEXT, year NUMBER, team_id TEXT, league_id TEXT, salary NUMBER); CREATE TABLE hall_of_fame (player_id TEXT); CREATE TABLE team (w NUMBER, ghome NUMBER, team_id_lahman45 TEXT, ipouts NUMBER, e NUMBER, l NUMBER, g NUMBER, h NUMBER, cs NUMBER, year NUMBER, team_id TEXT, name TEXT, bba NUMBER, lg_win TEXT, dp NUMBER, ra NUMBER, r NUMBER, div_win TEXT, sb NUMBER, wc_win TEXT, team_id_retro TEXT, sho NUMBER, so NUMBER, fp NUMBER, bpf NUMBER, sv NUMBER, ppf NUMBER, rank NUMBER, hbp NUMBER, franchise_id TEXT, er NUMBER, team_id_br TEXT, cg NUMBER, league_id TEXT, div_id TEXT, attendance NUMBER, bb NUMBER, double NUMBER, ws_win TEXT, ha NUMBER, ab NUMBER, hr NUMBER, soa NUMBER, park TEXT, era NUMBER, hra NUMBER, sf NUMBER, triple NUMBER); CREATE TABLE player_college (college_id TEXT, player_id TEXT); CREATE TABLE home_game (team_id TEXT); CREATE TABLE manager_award (league_id TEXT, player_id TEXT); CREATE TABLE player_award_vote (player_id TEXT); CREATE TABLE fielding (team_id TEXT, player_id TEXT);"
      }
    ],
    [
      {
        "question": "List the 3 highest salaries of the players in 2001?",
        "query": "SELECT salary FROM salary WHERE YEAR = 2001 ORDER BY salary DESC LIMIT 3",
        "schema": "CREATE TABLE manager (year NUMBER); CREATE TABLE all_star (player_id TEXT, year NUMBER); CREATE TABLE player_award_vote (year NUMBER, player_id TEXT); CREATE TABLE batting (stint NUMBER, year NUMBER, player_id TEXT); CREATE TABLE hall_of_fame (player_id TEXT, yearid NUMBER); CREATE TABLE appearances (year NUMBER, g_batting NUMBER); CREATE TABLE player_award (year NUMBER, player_id TEXT); CREATE TABLE postseason (year NUMBER); CREATE TABLE salary (player_id TEXT, year NUMBER, league_id TEXT, team_id TEXT, salary NUMBER); CREATE TABLE player (birth_year NUMBER, player_id TEXT, height NUMBER); CREATE TABLE player_college (year NUMBER, player_id TEXT); CREATE TABLE batting_postseason (year NUMBER);"
      },
      {
        "question": "List the 3 highest salaries of players on ATL in 2001.",
        "query": "SELECT salary FROM salary WHERE YEAR = 2001 AND team_id = \"ATL\" ORDER BY salary DESC LIMIT 3",
        "schema": "CREATE TABLE salary (salary NUMBER, league_id TEXT, team_id TEXT, player_id TEXT, year NUMBER); CREATE TABLE appearances (year NUMBER, g_batting NUMBER); CREATE TABLE player_award_vote (player_id TEXT, year NUMBER); CREATE TABLE all_star (player_id TEXT, year NUMBER); CREATE TABLE batting_postseason (year NUMBER); CREATE TABLE player_college (player_id TEXT, year NUMBER); CREATE TABLE player_award (player_id TEXT, year NUMBER); CREATE TABLE manager (year NUMBER); CREATE TABLE batting (stint NUMBER, year NUMBER, player_id TEXT); CREATE TABLE postseason (year NUMBER); CREATE TABLE hall_of_fame (player_id TEXT, yearid NUMBER); CREATE TABLE player (birth_year NUMBER, height NUMBER, player_id TEXT);"
      },
      {
        "question": "List the 3 highest salaries of players in the NL in 2001.",
        "query": "SELECT salary FROM salary WHERE YEAR = 2001 AND league_id = \"NL\" ORDER BY salary DESC LIMIT 3",
        "schema": "CREATE TABLE player_award_vote (year NUMBER, player_id TEXT); CREATE TABLE postseason (year NUMBER); CREATE TABLE appearances (g_batting NUMBER, year NUMBER); CREATE TABLE manager (year NUMBER); CREATE TABLE batting_postseason (year NUMBER); CREATE TABLE salary (player_id TEXT, salary NUMBER, year NUMBER, team_id TEXT, league_id TEXT); CREATE TABLE hall_of_fame (player_id TEXT, yearid NUMBER); CREATE TABLE all_star (player_id TEXT, year NUMBER); CREATE TABLE batting (player_id TEXT, year NUMBER, stint NUMBER); CREATE TABLE team_franchise (franchise_id TEXT); CREATE TABLE team (team_id TEXT, year NUMBER); CREATE TABLE player_award (player_id TEXT, year NUMBER); CREATE TABLE player (birth_year NUMBER, height NUMBER, player_id TEXT); CREATE TABLE player_college (year NUMBER, player_id TEXT);"
      },
      {
        "question": "List the 3 highest salaries of players in the AL in 2001",
        "query": "SELECT salary FROM salary WHERE YEAR = 2001 AND league_id = \"AL\" ORDER BY salary DESC LIMIT 3",
        "schema": "CREATE TABLE player_college (player_id TEXT, year NUMBER); CREATE TABLE team (year NUMBER, team_id TEXT); CREATE TABLE batting_postseason (year NUMBER); CREATE TABLE all_star (player_id TEXT, year NUMBER); CREATE TABLE player (height NUMBER, birth_year NUMBER, player_id TEXT); CREATE TABLE player_award (player_id TEXT, year NUMBER); CREATE TABLE hall_of_fame (player_id TEXT, yearid NUMBER); CREATE TABLE team_franchise (franchise_id TEXT); CREATE TABLE player_award_vote (year NUMBER, player_id TEXT); CREATE TABLE salary (team_id TEXT, year NUMBER, player_id TEXT, league_id TEXT, salary NUMBER); CREATE TABLE postseason (year NUMBER); CREATE TABLE batting (player_id TEXT, year NUMBER, stint NUMBER); CREATE TABLE manager (year NUMBER); CREATE TABLE appearances (g_batting NUMBER, year NUMBER);"
      }
    ],
    [
      {
        "question": "Hello!  Can you provide me with a list of all of the player IDs in the database?",
        "query": "SELECT player_id FROM hall_of_fame",
        "schema": "CREATE TABLE manager_award (player_id TEXT); CREATE TABLE fielding_outfield (player_id TEXT); CREATE TABLE batting (player_id TEXT); CREATE TABLE fielding (player_id TEXT); CREATE TABLE player_award (player_id TEXT); CREATE TABLE player_college (player_id TEXT); CREATE TABLE manager (player_id TEXT); CREATE TABLE player_award_vote (player_id TEXT); CREATE TABLE hall_of_fame (player_id TEXT); CREATE TABLE fielding_postseason (player_id TEXT); CREATE TABLE player (name_last TEXT, bats TEXT, retro_id TEXT, name_given TEXT, bbref_id TEXT, player_id TEXT); CREATE TABLE all_star (player_id TEXT); CREATE TABLE manager_award_vote (player_id TEXT); CREATE TABLE manager_half (player_id TEXT);"
      },
      {
        "question": "Can you update this list to indicate whether or not these players were inducted into the hall of fame?",
        "query": "SELECT player_id,inducted FROM hall_of_fame",
        "schema": "CREATE TABLE manager (player_id TEXT); CREATE TABLE hall_of_fame (inducted TEXT, player_id TEXT, needed NUMBER); CREATE TABLE all_star (player_id TEXT); CREATE TABLE fielding_outfield (player_id TEXT); CREATE TABLE batting (player_id TEXT); CREATE TABLE fielding (player_id TEXT); CREATE TABLE player (bbref_id TEXT, name_given TEXT, retro_id TEXT, name_last TEXT, bats TEXT, player_id TEXT); CREATE TABLE manager_half (player_id TEXT); CREATE TABLE manager_award_vote (player_id TEXT); CREATE TABLE player_college (player_id TEXT); CREATE TABLE fielding_postseason (player_id TEXT); CREATE TABLE player_award (player_id TEXT); CREATE TABLE player_award_vote (player_id TEXT); CREATE TABLE manager_award (player_id TEXT);"
      },
      {
        "question": "Thank you for that!  Of all of the years, which year had the fewest players entering the hall of fame?",
        "query": "SELECT yearid FROM hall_of_fame GROUP BY yearid ORDER BY COUNT ( * ) ASC LIMIT 1",
        "schema": "CREATE TABLE player_award_vote (year NUMBER, player_id TEXT); CREATE TABLE fielding_outfield (player_id TEXT, year NUMBER); CREATE TABLE hall_of_fame (needed NUMBER, inducted TEXT, player_id TEXT, yearid NUMBER); CREATE TABLE player (birth_year NUMBER, retro_id TEXT, player_id TEXT, name_given TEXT, bats TEXT, death_year NUMBER, name_last TEXT, bbref_id TEXT); CREATE TABLE batting (player_id TEXT, year NUMBER); CREATE TABLE appearances (year NUMBER); CREATE TABLE manager_award (player_id TEXT); CREATE TABLE player_award (player_id TEXT, year NUMBER); CREATE TABLE manager (player_id TEXT); CREATE TABLE fielding_postseason (player_id TEXT); CREATE TABLE all_star (player_id TEXT, year NUMBER); CREATE TABLE manager_award_vote (player_id TEXT); CREATE TABLE manager_half (player_id TEXT); CREATE TABLE fielding (sb NUMBER, player_id TEXT, year NUMBER); CREATE TABLE batting_postseason (year NUMBER); CREATE TABLE postseason (year NUMBER); CREATE TABLE player_college (player_id TEXT, year NUMBER);"
      }
    ],
    [
      {
        "question": "What were all the salary values of players in 2010 and 2001?",
        "query": "SELECT salary FROM salary WHERE YEAR = 2010 UNION SELECT salary FROM salary WHERE YEAR = 2001",
        "schema": "CREATE TABLE all_star (player_id TEXT, year NUMBER); CREATE TABLE appearances (year NUMBER); CREATE TABLE hall_of_fame (yearid NUMBER, player_id TEXT); CREATE TABLE player_award (year NUMBER, player_id TEXT); CREATE TABLE player_college (year NUMBER, player_id TEXT); CREATE TABLE batting_postseason (year NUMBER); CREATE TABLE team_franchise (franchise_id TEXT); CREATE TABLE postseason (year NUMBER); CREATE TABLE salary (player_id TEXT, salary NUMBER, year NUMBER, league_id TEXT, team_id TEXT); CREATE TABLE player_award_vote (year NUMBER); CREATE TABLE team_half (year NUMBER); CREATE TABLE player (player_id TEXT);"
      },
      {
        "question": "What was the average salary of players in 2010?",
        "query": "SELECT AVG ( salary ) FROM salary WHERE YEAR = 2010",
        "schema": "CREATE TABLE player_award_vote (year NUMBER); CREATE TABLE hall_of_fame (player_id TEXT, yearid NUMBER); CREATE TABLE appearances (year NUMBER); CREATE TABLE player (player_id TEXT); CREATE TABLE team_half (year NUMBER); CREATE TABLE team_franchise (franchise_id TEXT); CREATE TABLE salary (player_id TEXT, league_id TEXT, salary NUMBER, team_id TEXT, year NUMBER); CREATE TABLE batting_postseason (year NUMBER); CREATE TABLE player_award (player_id TEXT, year NUMBER); CREATE TABLE postseason (year NUMBER); CREATE TABLE player_college (player_id TEXT, year NUMBER); CREATE TABLE all_star (year NUMBER, player_id TEXT);"
      }
    ],
    [
      {
        "question": "Yes | Sorry. I mean which game OR the sum of attendance of a team in its home game | The sum of attendance of a team in its home game",
        "query": "SELECT t2.name FROM home_game AS t1 JOIN team AS t2 ON t1.team_id = t2.team_id_br GROUP BY t1.team_id ORDER BY SUM ( t1.attendance ) ASC LIMIT 1",
        "schema": "CREATE TABLE team (bb NUMBER, cg NUMBER, g NUMBER, team_id_lahman45 TEXT, hra NUMBER, ghome NUMBER, er NUMBER, bpf NUMBER, double NUMBER, r NUMBER, ipouts NUMBER, sho NUMBER, so NUMBER, hr NUMBER, hbp NUMBER, attendance NUMBER, ab NUMBER, team_id_retro TEXT, ppf NUMBER, lg_win TEXT, dp NUMBER, park TEXT, h NUMBER, sv NUMBER, w NUMBER, sf NUMBER, name TEXT, team_id_br TEXT, franchise_id TEXT, div_id TEXT, league_id TEXT, sb NUMBER, l NUMBER, cs NUMBER, team_id TEXT, e NUMBER, ra NUMBER, fp NUMBER); CREATE TABLE home_game (league_id TEXT, games NUMBER, team_id TEXT, attendance NUMBER); CREATE TABLE all_star (game_num NUMBER);"
      },
      {
        "question": "What was the actual attendance in number? | What do you mean by actual attendance | The attendance in home games for Altoona Mountain City",
        "query": "SELECT SUM ( t1.attendance ) FROM home_game AS t1 JOIN team AS t2 ON t1.team_id = t2.team_id GROUP BY t1.team_id ORDER BY SUM ( t1.attendance ) ASC LIMIT 1",
        "schema": "CREATE TABLE college (college_id TEXT, city TEXT); CREATE TABLE player (player_id TEXT); CREATE TABLE all_star (game_num NUMBER); CREATE TABLE home_game (park_id TEXT, games NUMBER, team_id TEXT, attendance NUMBER, league_id TEXT); CREATE TABLE team (hr NUMBER, hra NUMBER, ab NUMBER, soa NUMBER, fp NUMBER, sho NUMBER, cg NUMBER, team_id TEXT, dp NUMBER, so NUMBER, park TEXT, hbp NUMBER, ra NUMBER, h NUMBER, cs NUMBER, team_id_br TEXT, lg_win TEXT, sb NUMBER, name TEXT, w NUMBER, ipouts NUMBER, r NUMBER, ppf NUMBER, bpf NUMBER, league_id TEXT, e NUMBER, div_id TEXT, l NUMBER, sf NUMBER, team_id_lahman45 TEXT, bb NUMBER, team_id_retro TEXT, ghome NUMBER, attendance NUMBER, sv NUMBER, double NUMBER, g NUMBER, er NUMBER, franchise_id TEXT); CREATE TABLE park (city TEXT, park_id TEXT); CREATE TABLE team_franchise (franchise_name TEXT, na_assoc TEXT, franchise_id TEXT); CREATE TABLE player_college (player_id TEXT, college_id TEXT);"
      },
      {
        "question": "Which team had the highest number of attendance?",
        "query": "SELECT t2.name FROM home_game AS t1 JOIN team AS t2 ON t1.team_id = t2.team_id GROUP BY t1.team_id ORDER BY SUM ( t1.attendance ) DESC LIMIT 1",
        "schema": "CREATE TABLE team_franchise (franchise_name TEXT, na_assoc TEXT, franchise_id TEXT); CREATE TABLE player (player_id TEXT); CREATE TABLE all_star (game_num NUMBER); CREATE TABLE team (team_id TEXT, bb NUMBER, ab NUMBER, ipouts NUMBER, er NUMBER, hra NUMBER, name TEXT, so NUMBER, w NUMBER, r NUMBER, h NUMBER, e NUMBER, div_id TEXT, ppf NUMBER, fp NUMBER, bpf NUMBER, league_id TEXT, ra NUMBER, g NUMBER, attendance NUMBER, franchise_id TEXT, dp NUMBER, hr NUMBER, soa NUMBER, sv NUMBER, l NUMBER, team_id_br TEXT, park TEXT, ghome NUMBER, lg_win TEXT, cs NUMBER, sb NUMBER, sho NUMBER, team_id_lahman45 TEXT, sf NUMBER, cg NUMBER, double NUMBER, hbp NUMBER, team_id_retro TEXT); CREATE TABLE park (park_id TEXT, city TEXT); CREATE TABLE home_game (attendance NUMBER, games NUMBER, team_id TEXT, league_id TEXT, park_id TEXT); CREATE TABLE college (college_id TEXT, city TEXT); CREATE TABLE player_college (college_id TEXT, player_id TEXT);"
      },
      {
        "question": "* I have left the chat *",
        "query": "SELECT SUM ( t1.attendance ) FROM home_game AS t1 JOIN team AS t2 ON t1.team_id = t2.team_id GROUP BY t1.team_id ORDER BY SUM ( t1.attendance ) DESC LIMIT 1",
        "schema": "CREATE TABLE all_star (game_num NUMBER); CREATE TABLE home_game (games NUMBER, team_id TEXT, attendance NUMBER, park_id TEXT, league_id TEXT); CREATE TABLE player_college (college_id TEXT, player_id TEXT); CREATE TABLE park (city TEXT, park_id TEXT); CREATE TABLE team (attendance NUMBER, fp NUMBER, name TEXT, h NUMBER, ha NUMBER, team_id TEXT, ra NUMBER, hr NUMBER, sf NUMBER, rank NUMBER, er NUMBER, dp NUMBER, hra NUMBER, bba NUMBER, park TEXT, league_id TEXT, bb NUMBER, div_id TEXT, so NUMBER, e NUMBER, cg NUMBER, franchise_id TEXT, r NUMBER, sho NUMBER, team_id_br TEXT, team_id_retro TEXT, soa NUMBER, ppf NUMBER, sv NUMBER, bpf NUMBER, cs NUMBER, triple NUMBER, l NUMBER, ipouts NUMBER, g NUMBER, hbp NUMBER, double NUMBER, w NUMBER, ab NUMBER, team_id_lahman45 TEXT, ghome NUMBER, sb NUMBER, lg_win TEXT); CREATE TABLE team_franchise (franchise_id TEXT, franchise_name TEXT, na_assoc TEXT); CREATE TABLE college (college_id TEXT, city TEXT); CREATE TABLE player (player_id TEXT);"
      }
    ],
    [
      {
        "question": "Hi can you tell me how many games were in 1885? | Did  you  also  requre  the   \"ties\" is '1' | how many games had ties?",
        "query": "SELECT COUNT ( * ) FROM postseason WHERE ties = 1",
        "schema": "CREATE TABLE postseason (ties NUMBER, year NUMBER); CREATE TABLE all_star (game_id TEXT, game_num NUMBER); CREATE TABLE home_game (year NUMBER); CREATE TABLE fielding_outfield (year NUMBER, player_id TEXT); CREATE TABLE player (player_id TEXT); CREATE TABLE player_award (tie TEXT);"
      }
    ],
    [
      {
        "question": "how many park there",
        "query": "SELECT COUNT ( * ) FROM park",
        "schema": "CREATE TABLE manager_half (team_id TEXT); CREATE TABLE college (city TEXT, college_id TEXT); CREATE TABLE fielding_outfield (grf NUMBER, gcf NUMBER, player_id TEXT, glf NUMBER); CREATE TABLE park (city TEXT, state TEXT, park_id TEXT, park_alias TEXT, park_name TEXT); CREATE TABLE player (player_id TEXT); CREATE TABLE all_star (player_id TEXT); CREATE TABLE home_game (park_id TEXT); CREATE TABLE hall_of_fame (player_id TEXT); CREATE TABLE team_franchise (franchise_id TEXT); CREATE TABLE manager_award (player_id TEXT);"
      },
      {
        "question": "what is the city of Riverside Park",
        "query": "SELECT city FROM park WHERE park_name = \"Riverside Park\"",
        "schema": "CREATE TABLE fielding_outfield (grf NUMBER, gcf NUMBER, player_id TEXT, glf NUMBER); CREATE TABLE all_star (player_id TEXT); CREATE TABLE college (college_id TEXT, city TEXT); CREATE TABLE player (player_id TEXT); CREATE TABLE hall_of_fame (player_id TEXT); CREATE TABLE home_game (park_id TEXT); CREATE TABLE park (park_id TEXT, park_alias TEXT, park_name TEXT, city TEXT, state TEXT); CREATE TABLE manager_award (player_id TEXT); CREATE TABLE manager_half (team_id TEXT); CREATE TABLE team_franchise (franchise_id TEXT);"
      },
      {
        "question": "what is the park name of Anaheim city | Angel Stadium of Anaheim is the name of the park in city Anaheim. | what is the state of Columbia Park",
        "query": "SELECT state FROM park WHERE park_name = \"Columbia Park\"",
        "schema": "CREATE TABLE college (state TEXT, city TEXT, college_id TEXT); CREATE TABLE park (park_id TEXT, park_alias TEXT, state TEXT, park_name TEXT, city TEXT); CREATE TABLE fielding_outfield (grf NUMBER, gcf NUMBER, glf NUMBER, player_id TEXT); CREATE TABLE home_game (park_id TEXT); CREATE TABLE hall_of_fame (player_id TEXT); CREATE TABLE player (player_id TEXT); CREATE TABLE team_franchise (franchise_id TEXT); CREATE TABLE all_star (player_id TEXT); CREATE TABLE manager_award (player_id TEXT); CREATE TABLE manager_half (team_id TEXT);"
      },
      {
        "question": "how many home game there",
        "query": "SELECT COUNT ( * ) FROM home_game",
        "schema": "CREATE TABLE home_game (openings NUMBER, games NUMBER, span_first TEXT, league_id TEXT, team_id TEXT, year NUMBER, park_id TEXT, attendance NUMBER); CREATE TABLE fielding_outfield (player_id TEXT, gcf NUMBER, glf NUMBER, grf NUMBER); CREATE TABLE player (player_id TEXT); CREATE TABLE manager_half (team_id TEXT); CREATE TABLE player_college (college_id TEXT, player_id TEXT); CREATE TABLE manager_award (player_id TEXT); CREATE TABLE park (park_alias TEXT, park_id TEXT, state TEXT, city TEXT, park_name TEXT); CREATE TABLE hall_of_fame (player_id TEXT); CREATE TABLE college (state TEXT, city TEXT, college_id TEXT); CREATE TABLE all_star (player_id TEXT, game_id TEXT, game_num NUMBER); CREATE TABLE team_franchise (franchise_id TEXT);"
      },
      {
        "question": "how many games in 1871 | Do you mean the number of home games in year 1871? | yes sir",
        "query": "SELECT COUNT ( * ) FROM home_game WHERE YEAR = 1871",
        "schema": "CREATE TABLE postseason (year NUMBER); CREATE TABLE college (state TEXT, city TEXT, college_id TEXT); CREATE TABLE all_star (game_id TEXT, game_num NUMBER, player_id TEXT); CREATE TABLE home_game (attendance NUMBER, span_first TEXT, openings NUMBER, league_id TEXT, games NUMBER, team_id TEXT, year NUMBER, park_id TEXT); CREATE TABLE player (player_id TEXT); CREATE TABLE manager_award (player_id TEXT); CREATE TABLE team_franchise (franchise_id TEXT); CREATE TABLE hall_of_fame (player_id TEXT); CREATE TABLE park (park_name TEXT, state TEXT, park_id TEXT, city TEXT, park_alias TEXT); CREATE TABLE manager_half (team_id TEXT); CREATE TABLE player_college (player_id TEXT, college_id TEXT); CREATE TABLE fielding_outfield (glf NUMBER, grf NUMBER, player_id TEXT, gcf NUMBER);"
      }
    ],
    [
      {
        "question": "what is the average salary for all teams?",
        "query": "SELECT AVG ( salary ) FROM salary",
        "schema": "CREATE TABLE player (player_id TEXT); CREATE TABLE team_half (w NUMBER, g NUMBER, team_id TEXT, div_id TEXT); CREATE TABLE team_franchise (franchise_name TEXT, franchise_id TEXT); CREATE TABLE salary (league_id TEXT, team_id TEXT, player_id TEXT, year NUMBER, salary NUMBER); CREATE TABLE all_star (team_id TEXT, player_id TEXT); CREATE TABLE team (l NUMBER, team_id_lahman45 TEXT, sf NUMBER, cg NUMBER, er NUMBER, e NUMBER, sv NUMBER, team_id TEXT, team_id_br TEXT, soa NUMBER, wc_win TEXT, ra NUMBER, ghome NUMBER, ipouts NUMBER, sho NUMBER, bb NUMBER, div_id TEXT, fp NUMBER, ws_win TEXT, g NUMBER, double NUMBER, hr NUMBER, hra NUMBER, rank NUMBER, ha NUMBER, ppf NUMBER, era NUMBER, year NUMBER, franchise_id TEXT, triple NUMBER, attendance NUMBER, bba NUMBER, cs NUMBER, team_id_retro TEXT, dp NUMBER, w NUMBER, ab NUMBER, lg_win TEXT, r NUMBER, league_id TEXT, name TEXT, hbp NUMBER, h NUMBER, bpf NUMBER, so NUMBER, sb NUMBER);"
      },
      {
        "question": "ok, which team offering the highest salary? | OK, do you want me to show the team name or id? Also, are you asking about average salary? | please give me the name. Yes!",
        "query": "SELECT t1.name FROM team AS t1 JOIN salary AS t2 ON t1.team_id = t2.team_id GROUP BY t1.team_id ORDER BY AVG ( t2.salary ) DESC LIMIT 1",
        "schema": "CREATE TABLE all_star (player_id TEXT, team_id TEXT); CREATE TABLE team_franchise (franchise_id TEXT, franchise_name TEXT); CREATE TABLE salary (league_id TEXT, team_id TEXT, salary NUMBER, player_id TEXT, year NUMBER); CREATE TABLE team_half (w NUMBER, div_id TEXT, team_id TEXT, g NUMBER); CREATE TABLE player (player_id TEXT, name_given TEXT); CREATE TABLE team (ghome NUMBER, park TEXT, w NUMBER, attendance NUMBER, bb NUMBER, ipouts NUMBER, div_id TEXT, triple NUMBER, sf NUMBER, ws_win TEXT, franchise_id TEXT, g NUMBER, l NUMBER, double NUMBER, team_id TEXT, ra NUMBER, sb NUMBER, ab NUMBER, sv NUMBER, cs NUMBER, bpf NUMBER, soa NUMBER, league_id TEXT, name TEXT, lg_win TEXT, year NUMBER, team_id_br TEXT, ppf NUMBER, era NUMBER, div_win TEXT, er NUMBER, team_id_retro TEXT, bba NUMBER, dp NUMBER, team_id_lahman45 TEXT, hbp NUMBER, hra NUMBER, ha NUMBER, cg NUMBER, hr NUMBER, fp NUMBER, wc_win TEXT, e NUMBER, h NUMBER, r NUMBER, sho NUMBER, so NUMBER, rank NUMBER);"
      },
      {
        "question": "Great! How about the lowest salary?",
        "query": "SELECT t1.name FROM team AS t1 JOIN salary AS t2 ON t1.team_id = t2.team_id GROUP BY t1.team_id ORDER BY AVG ( t2.salary ) ASC LIMIT 1",
        "schema": "CREATE TABLE team_half (div_id TEXT, g NUMBER, w NUMBER, team_id TEXT); CREATE TABLE player (name_given TEXT, player_id TEXT); CREATE TABLE team_franchise (franchise_name TEXT, franchise_id TEXT); CREATE TABLE all_star (team_id TEXT, player_id TEXT); CREATE TABLE team (double NUMBER, sb NUMBER, team_id_retro TEXT, hr NUMBER, fp NUMBER, ra NUMBER, er NUMBER, r NUMBER, sho NUMBER, name TEXT, ws_win TEXT, w NUMBER, wc_win TEXT, so NUMBER, lg_win TEXT, triple NUMBER, soa NUMBER, div_id TEXT, l NUMBER, ghome NUMBER, team_id_lahman45 TEXT, bba NUMBER, hbp NUMBER, g NUMBER, sv NUMBER, rank NUMBER, ab NUMBER, team_id TEXT, h NUMBER, team_id_br TEXT, league_id TEXT, cg NUMBER, bpf NUMBER, e NUMBER, hra NUMBER, franchise_id TEXT, ipouts NUMBER, dp NUMBER, bb NUMBER, div_win TEXT, cs NUMBER, attendance NUMBER, era NUMBER, year NUMBER, park TEXT, sf NUMBER, ha NUMBER, ppf NUMBER); CREATE TABLE salary (salary NUMBER, team_id TEXT, league_id TEXT, year NUMBER, player_id TEXT);"
      }
    ],
    [
      {
        "question": "hey, which 3 players won the most player awards? list their full name and id",
        "query": "SELECT t1.name_first , t1.name_last , t1.player_id FROM player AS t1 JOIN player_award AS t2 ON t1.player_id = t2.player_id GROUP BY t1.player_id ORDER BY COUNT ( * ) DESC LIMIT 3",
        "schema": "CREATE TABLE player_award (league_id TEXT, player_id TEXT, notes TEXT, tie TEXT, award_id TEXT); CREATE TABLE hall_of_fame (player_id TEXT); CREATE TABLE manager_award (player_id TEXT); CREATE TABLE all_star (player_id TEXT); CREATE TABLE salary (player_id TEXT); CREATE TABLE college (name_full TEXT); CREATE TABLE appearances (player_id TEXT); CREATE TABLE player_award_vote (player_id TEXT, points_won NUMBER, award_id TEXT, votes_first NUMBER, points_max NUMBER); CREATE TABLE postseason (wins NUMBER); CREATE TABLE fielding_postseason (player_id TEXT); CREATE TABLE park (park_alias TEXT); CREATE TABLE batting_postseason (player_id TEXT); CREATE TABLE manager_award_vote (player_id TEXT, points_won NUMBER); CREATE TABLE player_college (player_id TEXT); CREATE TABLE fielding (player_id TEXT); CREATE TABLE batting (player_id TEXT); CREATE TABLE player (birth_state TEXT, death_month NUMBER, final_game TEXT, bbref_id TEXT, death_state TEXT, player_id TEXT, retro_id TEXT, birth_day NUMBER, birth_month NUMBER, height NUMBER, birth_year NUMBER, death_day NUMBER, bats TEXT, name_last TEXT, birth_country TEXT, debut TEXT, birth_city TEXT, throws TEXT, death_year NUMBER, name_first TEXT, name_given TEXT, death_city TEXT, weight NUMBER, death_country TEXT); CREATE TABLE fielding_outfield (player_id TEXT);"
      },
      {
        "question": "yes, the youngest.",
        "query": "SELECT name_first, name_last FROM player WHERE player_id IN ( SELECT t1.player_id FROM player AS t1 JOIN player_award AS t2 ON t1.player_id = t2.player_id GROUP BY t1.player_id ORDER BY COUNT ( * ) DESC LIMIT 3 ) ORDER BY birth_year, birth_month, birth_day DESC LIMIT 1",
        "schema": "CREATE TABLE manager_award (player_id TEXT); CREATE TABLE fielding_outfield (player_id TEXT); CREATE TABLE appearances (player_id TEXT); CREATE TABLE fielding (player_id TEXT); CREATE TABLE player_college (player_id TEXT); CREATE TABLE player_award_vote (player_id TEXT, points_won NUMBER, points_max NUMBER, votes_first NUMBER, award_id TEXT, year NUMBER); CREATE TABLE park (park_alias TEXT); CREATE TABLE player (name_last TEXT, death_day NUMBER, death_state TEXT, death_month NUMBER, throws TEXT, bats TEXT, birth_country TEXT, bbref_id TEXT, birth_month NUMBER, height NUMBER, player_id TEXT, birth_year NUMBER, weight NUMBER, retro_id TEXT, death_city TEXT, birth_city TEXT, name_first TEXT, name_given TEXT, death_year NUMBER, birth_state TEXT, debut TEXT, birth_day NUMBER, final_game TEXT, death_country TEXT); CREATE TABLE college (name_full TEXT); CREATE TABLE manager_award_vote (points_won NUMBER, player_id TEXT); CREATE TABLE batting (player_id TEXT); CREATE TABLE all_star (player_id TEXT, game_num NUMBER); CREATE TABLE player_award (tie TEXT, year NUMBER, award_id TEXT, notes TEXT, league_id TEXT, player_id TEXT); CREATE TABLE salary (player_id TEXT); CREATE TABLE fielding_postseason (player_id TEXT); CREATE TABLE postseason (wins NUMBER); CREATE TABLE hall_of_fame (player_id TEXT); CREATE TABLE batting_postseason (player_id TEXT);"
      },
      {
        "question": "which teams did the three play for?",
        "query": "SELECT t1.player_id, t2.league_id FROM player AS t1 JOIN player_award AS t2 ON t1.player_id = t2.player_id GROUP BY t1.player_id ORDER BY COUNT ( * ) DESC LIMIT 3",
        "schema": "CREATE TABLE all_star (team_id TEXT, player_id TEXT, game_num NUMBER); CREATE TABLE postseason (wins NUMBER); CREATE TABLE player_award (year NUMBER, league_id TEXT, notes TEXT, tie TEXT, player_id TEXT, award_id TEXT); CREATE TABLE player_award_vote (year NUMBER, votes_first NUMBER, points_max NUMBER, points_won NUMBER, award_id TEXT, player_id TEXT); CREATE TABLE fielding (player_id TEXT); CREATE TABLE manager_award_vote (player_id TEXT, points_won NUMBER); CREATE TABLE team_half (l NUMBER, year NUMBER, team_id TEXT, rank NUMBER); CREATE TABLE batting (player_id TEXT); CREATE TABLE home_game (team_id TEXT); CREATE TABLE team (bpf NUMBER, div_win TEXT, er NUMBER, lg_win TEXT, div_id TEXT, r NUMBER, ab NUMBER, g NUMBER, hbp NUMBER, hr NUMBER, franchise_id TEXT, attendance NUMBER, sv NUMBER, ipouts NUMBER, soa NUMBER, ppf NUMBER, hra NUMBER, l NUMBER, e NUMBER, sb NUMBER, sf NUMBER, ra NUMBER, ghome NUMBER, bba NUMBER, rank NUMBER, double NUMBER, era NUMBER, team_id_retro TEXT, ha NUMBER, w NUMBER, cg NUMBER, cs NUMBER, team_id TEXT, bb NUMBER, park TEXT, ws_win TEXT, year NUMBER, league_id TEXT, dp NUMBER, triple NUMBER, so NUMBER, team_id_br TEXT, h NUMBER, sho NUMBER, name TEXT, fp NUMBER, team_id_lahman45 TEXT, wc_win TEXT); CREATE TABLE batting_postseason (player_id TEXT); CREATE TABLE player_college (player_id TEXT); CREATE TABLE college (name_full TEXT); CREATE TABLE hall_of_fame (player_id TEXT); CREATE TABLE park (park_alias TEXT); CREATE TABLE fielding_postseason (player_id TEXT); CREATE TABLE manager_award (player_id TEXT); CREATE TABLE salary (player_id TEXT); CREATE TABLE appearances (player_id TEXT); CREATE TABLE player (bbref_id TEXT, name_last TEXT, birth_year NUMBER, player_id TEXT, final_game TEXT, throws TEXT, name_given TEXT, height NUMBER, death_month NUMBER, death_day NUMBER, death_year NUMBER, birth_country TEXT, bats TEXT, birth_month NUMBER, death_city TEXT, birth_day NUMBER, weight NUMBER, name_first TEXT, death_state TEXT, birth_state TEXT, debut TEXT, retro_id TEXT, birth_city TEXT, death_country TEXT); CREATE TABLE fielding_outfield (player_id TEXT);"
      }
    ],
    [
      {
        "question": "What are the names of some public parks in the United States?",
        "query": "SELECT park_name FROM park WHERE country = 'US'",
        "schema": "CREATE TABLE park (park_id TEXT, park_alias TEXT, park_name TEXT, country TEXT, state TEXT);"
      },
      {
        "question": "Thank you. Which states have at least two parks in them?",
        "query": "SELECT state FROM park GROUP BY state HAVING COUNT ( * ) > 2",
        "schema": "CREATE TABLE park (park_alias TEXT, park_id TEXT, country TEXT, park_name TEXT, state TEXT);"
      }
    ],
    [
      {
        "question": "WHICH COUNTRIES HAS THE ORIGINS OF THE LEAST PLAYERS",
        "query": "SELECT birth_country FROM player GROUP BY birth_country ORDER BY COUNT ( * ) ASC LIMIT 1",
        "schema": "CREATE TABLE park (country TEXT); CREATE TABLE player (throws TEXT, player_id TEXT, death_month NUMBER, birth_year NUMBER, birth_city TEXT, death_state TEXT, bbref_id TEXT, retro_id TEXT, name_last TEXT, name_given TEXT, weight NUMBER, death_year NUMBER, birth_state TEXT, death_country TEXT, birth_country TEXT, death_city TEXT); CREATE TABLE college (country TEXT);"
      },
      {
        "question": "LIST ALL THE COUNTRIES WITH ORIGINS OF LEAST PLAYERS | Isn't it the same question as the last one? | NO, LIST THREE COUNTRIES WHICH ARE THE ORIGINS OF THE LEAST PLAYERS",
        "query": "SELECT birth_country FROM player GROUP BY birth_country ORDER BY COUNT ( * ) ASC LIMIT 3",
        "schema": "CREATE TABLE college (country TEXT); CREATE TABLE player (death_year NUMBER, name_last TEXT, death_state TEXT, birth_city TEXT, throws TEXT, bbref_id TEXT, weight NUMBER, death_country TEXT, birth_state TEXT, birth_country TEXT, death_city TEXT, name_given TEXT, death_month NUMBER, player_id TEXT, retro_id TEXT, birth_year NUMBER); CREATE TABLE park (country TEXT);"
      }
    ],
    [
      {
        "question": "what is the total home game attandance in 1871?",
        "query": "SELECT SUM ( t1.attendance ) FROM home_game AS t1 JOIN team AS t2 ON t1.team_id = t2.team_id_br WHERE t1.year = 1871",
        "schema": "CREATE TABLE home_game (park_id TEXT, team_id TEXT, games NUMBER, openings NUMBER, league_id TEXT, span_first TEXT, attendance NUMBER, span_last TEXT, year NUMBER); CREATE TABLE batting_postseason (year NUMBER); CREATE TABLE hall_of_fame (yearid NUMBER); CREATE TABLE park (city TEXT, park_id TEXT, park_name TEXT, park_alias TEXT); CREATE TABLE team_half (year NUMBER); CREATE TABLE team (h NUMBER, league_id TEXT, year NUMBER, ppf NUMBER, l NUMBER, hr NUMBER, team_id TEXT, park TEXT, ghome NUMBER, sb NUMBER, ws_win TEXT, so NUMBER, cg NUMBER, attendance NUMBER, hbp NUMBER, ha NUMBER, cs NUMBER, div_id TEXT, name TEXT, ab NUMBER, bb NUMBER, franchise_id TEXT, team_id_lahman45 TEXT, team_id_retro TEXT, e NUMBER, team_id_br TEXT); CREATE TABLE player (death_year NUMBER, player_id TEXT); CREATE TABLE team_franchise (na_assoc TEXT, franchise_name TEXT, franchise_id TEXT); CREATE TABLE all_star (game_id TEXT, game_num NUMBER, year NUMBER); CREATE TABLE postseason (year NUMBER); CREATE TABLE college (college_id TEXT, name_full TEXT, city TEXT); CREATE TABLE fielding_outfield (year NUMBER); CREATE TABLE player_college (player_id TEXT, year NUMBER, college_id TEXT);"
      },
      {
        "question": "how many games played by BS1?",
        "query": "SELECT COUNT ( * ) FROM home_game WHERE team_id = \"BS1\"",
        "schema": "CREATE TABLE park (park_id TEXT, city TEXT, park_alias TEXT, park_name TEXT); CREATE TABLE player_college (year NUMBER, player_id TEXT, college_id TEXT); CREATE TABLE team_half (year NUMBER, team_id TEXT); CREATE TABLE team_franchise (na_assoc TEXT, franchise_id TEXT, franchise_name TEXT); CREATE TABLE team (triple NUMBER, wc_win TEXT, hbp NUMBER, double NUMBER, soa NUMBER, team_id_retro TEXT, bb NUMBER, sho NUMBER, year NUMBER, so NUMBER, ha NUMBER, g NUMBER, name TEXT, ppf NUMBER, hr NUMBER, r NUMBER, lg_win TEXT, h NUMBER, sf NUMBER, franchise_id TEXT, sb NUMBER, team_id_br TEXT, attendance NUMBER, fp NUMBER, bpf NUMBER, sv NUMBER, ab NUMBER, team_id_lahman45 TEXT, rank NUMBER, ipouts NUMBER, era NUMBER, bba NUMBER, park TEXT, div_id TEXT, hra NUMBER, cs NUMBER, team_id TEXT, league_id TEXT, dp NUMBER, ra NUMBER, er NUMBER, div_win TEXT, cg NUMBER, ws_win TEXT, ghome NUMBER, w NUMBER, e NUMBER, l NUMBER); CREATE TABLE all_star (game_num NUMBER, year NUMBER, game_id TEXT); CREATE TABLE batting_postseason (year NUMBER); CREATE TABLE player (player_id TEXT, death_year NUMBER); CREATE TABLE fielding_outfield (year NUMBER); CREATE TABLE postseason (year NUMBER); CREATE TABLE college (name_full TEXT, city TEXT, college_id TEXT); CREATE TABLE home_game (span_first TEXT, year NUMBER, team_id TEXT, league_id TEXT, span_last TEXT, openings NUMBER, games NUMBER, park_id TEXT, attendance NUMBER); CREATE TABLE hall_of_fame (yearid NUMBER);"
      },
      {
        "question": "WHAT IS THE RANK OF TEAM BS1? IN TEAM TABLE?",
        "query": "SELECT rank FROM team WHERE team_id = \"BS1\"",
        "schema": "CREATE TABLE home_game (openings NUMBER, attendance NUMBER, team_id TEXT, span_last TEXT, league_id TEXT, span_first TEXT, year NUMBER, games NUMBER, park_id TEXT); CREATE TABLE batting_postseason (year NUMBER); CREATE TABLE college (college_id TEXT, name_full TEXT, city TEXT); CREATE TABLE all_star (game_num NUMBER, year NUMBER, game_id TEXT); CREATE TABLE team (w NUMBER, fp NUMBER, ipouts NUMBER, park TEXT, ghome NUMBER, hbp NUMBER, r NUMBER, hra NUMBER, h NUMBER, bb NUMBER, sv NUMBER, hr NUMBER, lg_win TEXT, cs NUMBER, team_id_retro TEXT, rank NUMBER, attendance NUMBER, era NUMBER, league_id TEXT, name TEXT, team_id TEXT, sho NUMBER, franchise_id TEXT, l NUMBER, wc_win TEXT, ha NUMBER, ppf NUMBER, ws_win TEXT, div_id TEXT, ab NUMBER, double NUMBER, ra NUMBER, team_id_br TEXT, er NUMBER, g NUMBER, e NUMBER, div_win TEXT, sb NUMBER, so NUMBER, bpf NUMBER, bba NUMBER, dp NUMBER, team_id_lahman45 TEXT, cg NUMBER, year NUMBER, sf NUMBER, soa NUMBER, triple NUMBER); CREATE TABLE park (city TEXT, park_id TEXT, park_alias TEXT, park_name TEXT); CREATE TABLE postseason (year NUMBER); CREATE TABLE manager (rank NUMBER); CREATE TABLE hall_of_fame (yearid NUMBER); CREATE TABLE player_college (year NUMBER, college_id TEXT, player_id TEXT); CREATE TABLE team_half (team_id TEXT, rank NUMBER, year NUMBER); CREATE TABLE player (player_id TEXT, death_year NUMBER); CREATE TABLE fielding_outfield (year NUMBER); CREATE TABLE team_franchise (franchise_name TEXT, na_assoc TEXT, franchise_id TEXT);"
      }
    ],
    [
      {
        "question": "what is the average salary of Boston Red Stockings?",
        "query": "SELECT AVG ( t1.salary ) FROM salary AS t1 JOIN team AS t2 ON t1.team_id = t2.team_id_br WHERE t2.name = 'Boston Red Stockings'",
        "schema": "CREATE TABLE all_star (player_id TEXT, league_id TEXT, team_id TEXT); CREATE TABLE fielding_outfield (glf NUMBER, grf NUMBER, gcf NUMBER); CREATE TABLE college (name_full TEXT, city TEXT, college_id TEXT); CREATE TABLE team (team_id_retro TEXT, league_id TEXT, sf NUMBER, team_id TEXT, ghome NUMBER, e NUMBER, year NUMBER, cs NUMBER, name TEXT, bba NUMBER, hra NUMBER, er NUMBER, soa NUMBER, bb NUMBER, hr NUMBER, fp NUMBER, so NUMBER, team_id_lahman45 TEXT, era NUMBER, sho NUMBER, ab NUMBER, hbp NUMBER, attendance NUMBER, div_id TEXT, team_id_br TEXT, r NUMBER, cg NUMBER, w NUMBER, dp NUMBER, g NUMBER, rank NUMBER, franchise_id TEXT, ha NUMBER, l NUMBER, sb NUMBER, sv NUMBER, ra NUMBER, bpf NUMBER, ppf NUMBER); CREATE TABLE hall_of_fame (player_id TEXT, category TEXT); CREATE TABLE batting (player_id TEXT, bb NUMBER, r NUMBER, team_id TEXT, hbp NUMBER, sb NUMBER, ibb NUMBER, g NUMBER, double NUMBER, sh NUMBER, sf NUMBER, ab NUMBER, g_idp NUMBER, cs NUMBER, league_id TEXT, so NUMBER); CREATE TABLE salary (year NUMBER, player_id TEXT, salary NUMBER, league_id TEXT, team_id TEXT); CREATE TABLE team_franchise (na_assoc TEXT, franchise_name TEXT, franchise_id TEXT); CREATE TABLE player (player_id TEXT, name_given TEXT); CREATE TABLE team_half (team_id TEXT); CREATE TABLE park (city TEXT, park_name TEXT);"
      },
      {
        "question": "what is the league id of Boston Red Stocking?",
        "query": "SELECT league_id FROM team WHERE name = 'Boston Red Stockings'",
        "schema": "CREATE TABLE team (double NUMBER, ghome NUMBER, l NUMBER, e NUMBER, ha NUMBER, franchise_id TEXT, w NUMBER, hr NUMBER, sb NUMBER, lg_win TEXT, ws_win TEXT, cg NUMBER, team_id_lahman45 TEXT, park TEXT, er NUMBER, bba NUMBER, hra NUMBER, r NUMBER, year NUMBER, rank NUMBER, wc_win TEXT, name TEXT, bb NUMBER, so NUMBER, hbp NUMBER, sv NUMBER, div_id TEXT, bpf NUMBER, ipouts NUMBER, sho NUMBER, soa NUMBER, fp NUMBER, h NUMBER, cs NUMBER, ppf NUMBER, ab NUMBER, ra NUMBER, triple NUMBER, team_id TEXT, league_id TEXT, team_id_br TEXT, attendance NUMBER, era NUMBER, team_id_retro TEXT, sf NUMBER, dp NUMBER, g NUMBER); CREATE TABLE team_franchise (franchise_name TEXT, franchise_id TEXT, na_assoc TEXT); CREATE TABLE park (city TEXT, park_name TEXT); CREATE TABLE batting (sh NUMBER, ibb NUMBER, double NUMBER, player_id TEXT, cs NUMBER, league_id TEXT, bb NUMBER, g NUMBER, sf NUMBER, ab NUMBER, team_id TEXT, g_idp NUMBER, sb NUMBER, hbp NUMBER, r NUMBER, so NUMBER); CREATE TABLE salary (league_id TEXT, year NUMBER, team_id TEXT, player_id TEXT, salary NUMBER); CREATE TABLE fielding_outfield (gcf NUMBER, glf NUMBER, grf NUMBER); CREATE TABLE hall_of_fame (player_id TEXT, category TEXT); CREATE TABLE team_half (league_id TEXT, team_id TEXT); CREATE TABLE all_star (player_id TEXT, team_id TEXT, league_id TEXT); CREATE TABLE college (college_id TEXT, city TEXT, name_full TEXT); CREATE TABLE home_game (league_id TEXT); CREATE TABLE player (player_id TEXT, name_given TEXT);"
      },
      {
        "question": "what is their rank? | do you mean all their ranks in every year? | yes",
        "query": "SELECT YEAR,rank FROM team WHERE name = 'Boston Red Stockings'",
        "schema": "CREATE TABLE college (name_full TEXT, city TEXT, college_id TEXT); CREATE TABLE salary (team_id TEXT, league_id TEXT, salary NUMBER, year NUMBER, player_id TEXT); CREATE TABLE team_franchise (franchise_name TEXT, na_assoc TEXT, franchise_id TEXT); CREATE TABLE home_game (league_id TEXT); CREATE TABLE fielding_outfield (grf NUMBER, gcf NUMBER, glf NUMBER); CREATE TABLE batting (sb NUMBER, hbp NUMBER, r NUMBER, ibb NUMBER, cs NUMBER, so NUMBER, ab NUMBER, g NUMBER, league_id TEXT, g_idp NUMBER, sf NUMBER, year NUMBER, double NUMBER, team_id TEXT, player_id TEXT, bb NUMBER, sh NUMBER); CREATE TABLE team_half (team_id TEXT, year NUMBER, league_id TEXT, rank NUMBER); CREATE TABLE manager_half (rank NUMBER); CREATE TABLE player_college (year NUMBER); CREATE TABLE manager (rank NUMBER); CREATE TABLE hall_of_fame (player_id TEXT, category TEXT); CREATE TABLE postseason (year NUMBER); CREATE TABLE team (double NUMBER, ab NUMBER, soa NUMBER, franchise_id TEXT, triple NUMBER, so NUMBER, r NUMBER, bpf NUMBER, team_id_retro TEXT, l NUMBER, team_id_lahman45 TEXT, wc_win TEXT, team_id TEXT, ghome NUMBER, hbp NUMBER, bb NUMBER, w NUMBER, team_id_br TEXT, hr NUMBER, attendance NUMBER, e NUMBER, name TEXT, ppf NUMBER, cs NUMBER, div_win TEXT, ha NUMBER, h NUMBER, rank NUMBER, ws_win TEXT, sv NUMBER, er NUMBER, hra NUMBER, bba NUMBER, sb NUMBER, era NUMBER, g NUMBER, div_id TEXT, cg NUMBER, fp NUMBER, ra NUMBER, park TEXT, lg_win TEXT, sf NUMBER, year NUMBER, league_id TEXT, dp NUMBER, ipouts NUMBER, sho NUMBER); CREATE TABLE park (park_name TEXT, city TEXT); CREATE TABLE player (name_given TEXT, player_id TEXT); CREATE TABLE all_star (league_id TEXT, player_id TEXT, team_id TEXT, year NUMBER);"
      }
    ],
    [
      {
        "question": "what is the salary of 1985?",
        "query": "SELECT salary FROM salary WHERE YEAR = 1985",
        "schema": "CREATE TABLE fielding_outfield (year NUMBER); CREATE TABLE player (death_year NUMBER, player_id TEXT); CREATE TABLE home_game (year NUMBER); CREATE TABLE team_franchise (franchise_id TEXT); CREATE TABLE postseason (year NUMBER); CREATE TABLE manager_half (year NUMBER); CREATE TABLE college (college_id TEXT); CREATE TABLE player_award (year NUMBER, player_id TEXT); CREATE TABLE manager (year NUMBER); CREATE TABLE all_star (player_id TEXT, year NUMBER); CREATE TABLE fielding_postseason (year NUMBER); CREATE TABLE appearances (year NUMBER); CREATE TABLE player_college (year NUMBER, player_id TEXT); CREATE TABLE player_award_vote (year NUMBER); CREATE TABLE salary (player_id TEXT, team_id TEXT, year NUMBER, league_id TEXT, salary NUMBER); CREATE TABLE team_half (year NUMBER); CREATE TABLE hall_of_fame (yearid NUMBER, player_id TEXT); CREATE TABLE manager_award (year NUMBER); CREATE TABLE manager_award_vote (year NUMBER);"
      },
      {
        "question": "who is get the high salary? | Do you mean the id of the player who gets the highest salary? | Yes.",
        "query": "SELECT player_id FROM salary ORDER BY salary DESC LIMIT 1",
        "schema": "CREATE TABLE all_star (player_id TEXT, year NUMBER); CREATE TABLE manager_award_vote (year NUMBER); CREATE TABLE hall_of_fame (player_id TEXT, yearid NUMBER); CREATE TABLE college (college_id TEXT); CREATE TABLE manager_award (year NUMBER); CREATE TABLE postseason (year NUMBER); CREATE TABLE fielding_postseason (year NUMBER); CREATE TABLE player (height NUMBER, player_id TEXT, bbref_id TEXT, name_given TEXT, name_last TEXT, death_year NUMBER); CREATE TABLE home_game (year NUMBER); CREATE TABLE player_award_vote (player_id TEXT, year NUMBER); CREATE TABLE manager_half (year NUMBER); CREATE TABLE manager (year NUMBER); CREATE TABLE team_half (year NUMBER); CREATE TABLE team_franchise (franchise_id TEXT); CREATE TABLE appearances (year NUMBER); CREATE TABLE player_college (player_id TEXT, year NUMBER); CREATE TABLE fielding_outfield (year NUMBER, player_id TEXT); CREATE TABLE salary (league_id TEXT, team_id TEXT, salary NUMBER, year NUMBER, player_id TEXT); CREATE TABLE player_award (player_id TEXT, year NUMBER);"
      }
    ],
    [
      {
        "question": "How many players are on a team? | Which team are you referring to? | The Boston Red Stockings.",
        "query": "SELECT COUNT ( * ) FROM salary AS t1 JOIN team AS t2 ON t1.team_id = t2.team_id_br WHERE t2.name = 'Boston Red Stockings'",
        "schema": "CREATE TABLE batting (player_id TEXT, team_id TEXT); CREATE TABLE player (player_id TEXT); CREATE TABLE manager (team_id TEXT); CREATE TABLE fielding_postseason (team_id TEXT, a NUMBER, player_id TEXT, cs NUMBER, e NUMBER, league_id TEXT, tp NUMBER); CREATE TABLE park (city TEXT); CREATE TABLE pitching (team_id TEXT); CREATE TABLE fielding_outfield (player_id TEXT); CREATE TABLE hall_of_fame (player_id TEXT); CREATE TABLE batting_postseason (player_id TEXT, team_id TEXT); CREATE TABLE manager_half (team_id TEXT); CREATE TABLE home_game (team_id TEXT); CREATE TABLE fielding (cs NUMBER, player_id TEXT, e NUMBER, g NUMBER, team_id TEXT, wp NUMBER, league_id TEXT, a NUMBER); CREATE TABLE team (ws_win TEXT, triple NUMBER, rank NUMBER, franchise_id TEXT, sb NUMBER, ab NUMBER, year NUMBER, hra NUMBER, ghome NUMBER, league_id TEXT, park TEXT, r NUMBER, hr NUMBER, era NUMBER, team_id_br TEXT, team_id TEXT, l NUMBER, ppf NUMBER, bba NUMBER, so NUMBER, sf NUMBER, bb NUMBER, fp NUMBER, name TEXT, soa NUMBER, double NUMBER, cs NUMBER, ra NUMBER, bpf NUMBER, sho NUMBER, cg NUMBER, ipouts NUMBER, team_id_retro TEXT, div_win TEXT, w NUMBER, team_id_lahman45 TEXT, wc_win TEXT, lg_win TEXT, div_id TEXT, g NUMBER, dp NUMBER, sv NUMBER, h NUMBER, e NUMBER, attendance NUMBER, er NUMBER, hbp NUMBER, ha NUMBER); CREATE TABLE team_franchise (franchise_id TEXT, na_assoc TEXT, franchise_name TEXT); CREATE TABLE college (city TEXT); CREATE TABLE all_star (player_id TEXT, team_id TEXT, league_id TEXT, game_id TEXT); CREATE TABLE team_half (w NUMBER, g NUMBER, team_id TEXT, l NUMBER, league_id TEXT, half NUMBER, div_id TEXT); CREATE TABLE salary (team_id TEXT);"
      },
      {
        "question": "How many in the year 2000?",
        "query": "SELECT COUNT ( * ) FROM salary AS t1 JOIN team AS t2 ON t1.team_id = t2.team_id_br WHERE t2.name = 'Boston Red Stockings' AND t1.year = 2000",
        "schema": "CREATE TABLE postseason (year NUMBER); CREATE TABLE batting (team_id TEXT, player_id TEXT); CREATE TABLE team (r NUMBER, team_id_lahman45 TEXT, ws_win TEXT, ra NUMBER, so NUMBER, hr NUMBER, name TEXT, ipouts NUMBER, g NUMBER, lg_win TEXT, year NUMBER, div_id TEXT, fp NUMBER, sf NUMBER, sho NUMBER, cg NUMBER, team_id_retro TEXT, bba NUMBER, sv NUMBER, soa NUMBER, ppf NUMBER, ab NUMBER, ghome NUMBER, cs NUMBER, era NUMBER, hbp NUMBER, triple NUMBER, w NUMBER, hra NUMBER, double NUMBER, franchise_id TEXT, er NUMBER, e NUMBER, park TEXT, team_id_br TEXT, team_id TEXT, rank NUMBER, attendance NUMBER, h NUMBER, wc_win TEXT, bpf NUMBER, dp NUMBER, league_id TEXT, bb NUMBER, ha NUMBER, sb NUMBER, div_win TEXT, l NUMBER); CREATE TABLE fielding_outfield (player_id TEXT); CREATE TABLE hall_of_fame (player_id TEXT); CREATE TABLE fielding (g NUMBER, team_id TEXT, wp NUMBER, player_id TEXT, a NUMBER, e NUMBER, cs NUMBER, league_id TEXT); CREATE TABLE player_award (year NUMBER); CREATE TABLE home_game (team_id TEXT); CREATE TABLE salary (year NUMBER, team_id TEXT, salary NUMBER, player_id TEXT); CREATE TABLE team_half (half NUMBER, w NUMBER, div_id TEXT, g NUMBER, team_id TEXT, l NUMBER, year NUMBER, league_id TEXT); CREATE TABLE manager (team_id TEXT); CREATE TABLE fielding_postseason (cs NUMBER, a NUMBER, league_id TEXT, e NUMBER, player_id TEXT, team_id TEXT, tp NUMBER); CREATE TABLE team_franchise (na_assoc TEXT, franchise_id TEXT, franchise_name TEXT); CREATE TABLE batting_postseason (team_id TEXT, player_id TEXT); CREATE TABLE park (city TEXT); CREATE TABLE pitching (team_id TEXT); CREATE TABLE manager_half (team_id TEXT); CREATE TABLE college (city TEXT); CREATE TABLE all_star (year NUMBER, game_id TEXT, league_id TEXT, team_id TEXT, player_id TEXT); CREATE TABLE player (player_id TEXT);"
      },
      {
        "question": "What was the total salary of those players?",
        "query": "SELECT SUM ( salary ) FROM salary AS t1 JOIN team AS t2 ON t1.team_id = t2.team_id_br WHERE t2.name = 'Boston Red Stockings' AND t1.year = 2000",
        "schema": "CREATE TABLE team_half (team_id TEXT, league_id TEXT, l NUMBER, half NUMBER, div_id TEXT, g NUMBER, year NUMBER, w NUMBER); CREATE TABLE fielding_outfield (player_id TEXT); CREATE TABLE hall_of_fame (player_id TEXT); CREATE TABLE salary (salary NUMBER, year NUMBER, player_id TEXT, team_id TEXT); CREATE TABLE manager_half (team_id TEXT); CREATE TABLE pitching (team_id TEXT); CREATE TABLE team_franchise (franchise_id TEXT, na_assoc TEXT, franchise_name TEXT); CREATE TABLE all_star (player_id TEXT, year NUMBER, league_id TEXT, game_id TEXT, team_id TEXT); CREATE TABLE college (city TEXT); CREATE TABLE batting_postseason (team_id TEXT, player_id TEXT); CREATE TABLE home_game (team_id TEXT); CREATE TABLE player (player_id TEXT); CREATE TABLE player_award (year NUMBER); CREATE TABLE fielding_postseason (player_id TEXT, tp NUMBER, league_id TEXT, e NUMBER, team_id TEXT, cs NUMBER, a NUMBER); CREATE TABLE manager (team_id TEXT); CREATE TABLE batting (team_id TEXT, player_id TEXT); CREATE TABLE postseason (year NUMBER); CREATE TABLE team (bb NUMBER, soa NUMBER, cg NUMBER, team_id_retro TEXT, franchise_id TEXT, ra NUMBER, year NUMBER, bba NUMBER, l NUMBER, league_id TEXT, team_id_br TEXT, g NUMBER, sho NUMBER, lg_win TEXT, w NUMBER, hbp NUMBER, attendance NUMBER, ws_win TEXT, r NUMBER, so NUMBER, e NUMBER, bpf NUMBER, double NUMBER, name TEXT, fp NUMBER, sf NUMBER, er NUMBER, rank NUMBER, cs NUMBER, dp NUMBER, div_id TEXT, park TEXT, ipouts NUMBER, wc_win TEXT, triple NUMBER, ha NUMBER, era NUMBER, team_id_lahman45 TEXT, ppf NUMBER, sb NUMBER, sv NUMBER, ab NUMBER, div_win TEXT, team_id TEXT, h NUMBER, ghome NUMBER, hr NUMBER, hra NUMBER); CREATE TABLE fielding (a NUMBER, league_id TEXT, player_id TEXT, g NUMBER, team_id TEXT, wp NUMBER, e NUMBER, cs NUMBER); CREATE TABLE park (city TEXT);"
      }
    ],
    [
      {
        "question": "What is the total home game attendance of all teams from 2000 to 2010?",
        "query": "SELECT SUM ( t1.attendance ) FROM home_game AS t1 JOIN team AS t2 ON t1.team_id = t2.team_id_br WHERE t1.year BETWEEN 2000 AND 2010",
        "schema": "CREATE TABLE hall_of_fame (yearid NUMBER); CREATE TABLE park (park_id TEXT); CREATE TABLE fielding_postseason (year NUMBER); CREATE TABLE team (double NUMBER, ppf NUMBER, era NUMBER, h NUMBER, g NUMBER, div_id TEXT, ab NUMBER, bb NUMBER, attendance NUMBER, wc_win TEXT, soa NUMBER, team_id_retro TEXT, hbp NUMBER, hr NUMBER, ra NUMBER, bpf NUMBER, div_win TEXT, name TEXT, sf NUMBER, dp NUMBER, hra NUMBER, ws_win TEXT, team_id_lahman45 TEXT, cs NUMBER, sb NUMBER, year NUMBER, ipouts NUMBER, er NUMBER, fp NUMBER, r NUMBER, sho NUMBER, league_id TEXT, team_id_br TEXT, e NUMBER, team_id TEXT, sv NUMBER, rank NUMBER, so NUMBER, bba NUMBER, franchise_id TEXT, w NUMBER, ha NUMBER, park TEXT, l NUMBER, lg_win TEXT, ghome NUMBER, cg NUMBER); CREATE TABLE home_game (team_id TEXT, span_last TEXT, year NUMBER, games NUMBER, league_id TEXT, attendance NUMBER, span_first TEXT); CREATE TABLE team_half (div_id TEXT, league_id TEXT, year NUMBER); CREATE TABLE fielding_outfield (player_id TEXT, year NUMBER); CREATE TABLE player (player_id TEXT); CREATE TABLE all_star (game_id TEXT, game_num NUMBER, year NUMBER); CREATE TABLE fielding (year NUMBER); CREATE TABLE team_franchise (franchise_id TEXT); CREATE TABLE postseason (year NUMBER);"
      },
      {
        "question": "What about for just the team Boston Red Stockings?",
        "query": "SELECT SUM ( t1.attendance ) FROM home_game AS t1 JOIN team AS t2 ON t1.team_id = t2.team_id_br WHERE t2.name = 'Boston Red Stockings' AND t1.year BETWEEN 2000 AND 2010",
        "schema": "CREATE TABLE fielding_outfield (year NUMBER, player_id TEXT); CREATE TABLE fielding (year NUMBER); CREATE TABLE home_game (games NUMBER, league_id TEXT, team_id TEXT, attendance NUMBER, span_first TEXT, span_last TEXT, park_id TEXT, year NUMBER); CREATE TABLE hall_of_fame (yearid NUMBER); CREATE TABLE postseason (year NUMBER); CREATE TABLE player (player_id TEXT); CREATE TABLE park (city TEXT, park_id TEXT); CREATE TABLE fielding_postseason (year NUMBER); CREATE TABLE all_star (year NUMBER, game_id TEXT, game_num NUMBER); CREATE TABLE team (sho NUMBER, hra NUMBER, wc_win TEXT, fp NUMBER, ra NUMBER, so NUMBER, hr NUMBER, double NUMBER, triple NUMBER, sf NUMBER, div_win TEXT, bba NUMBER, era NUMBER, g NUMBER, dp NUMBER, park TEXT, soa NUMBER, cs NUMBER, cg NUMBER, e NUMBER, ipouts NUMBER, year NUMBER, r NUMBER, ws_win TEXT, div_id TEXT, team_id_lahman45 TEXT, l NUMBER, sv NUMBER, rank NUMBER, sb NUMBER, team_id TEXT, bb NUMBER, bpf NUMBER, ab NUMBER, hbp NUMBER, team_id_br TEXT, attendance NUMBER, name TEXT, franchise_id TEXT, league_id TEXT, w NUMBER, ghome NUMBER, ha NUMBER, ppf NUMBER, h NUMBER, er NUMBER, lg_win TEXT, team_id_retro TEXT); CREATE TABLE college (city TEXT); CREATE TABLE team_half (year NUMBER, league_id TEXT, team_id TEXT, div_id TEXT); CREATE TABLE team_franchise (franchise_name TEXT, franchise_id TEXT);"
      },
      {
        "question": "What's the average total home game attendance for the Cleveland Forest Citys for all years?",
        "query": "SELECT AVG ( t1.attendance ) FROM home_game AS t1 JOIN team AS t2 ON t1.team_id = t2.team_id_br WHERE t2.name = 'Cleveland Forest Citys'",
        "schema": "CREATE TABLE fielding_postseason (year NUMBER); CREATE TABLE fielding_outfield (year NUMBER, player_id TEXT); CREATE TABLE team_half (year NUMBER, div_id TEXT, team_id TEXT, league_id TEXT); CREATE TABLE fielding (year NUMBER); CREATE TABLE park (city TEXT, park_id TEXT); CREATE TABLE team (league_id TEXT, ghome NUMBER, ab NUMBER, hra NUMBER, name TEXT, bpf NUMBER, fp NUMBER, l NUMBER, bb NUMBER, r NUMBER, ipouts NUMBER, soa NUMBER, sho NUMBER, attendance NUMBER, w NUMBER, sv NUMBER, hbp NUMBER, ha NUMBER, wc_win TEXT, lg_win TEXT, cs NUMBER, cg NUMBER, ppf NUMBER, dp NUMBER, year NUMBER, team_id_retro TEXT, sf NUMBER, double NUMBER, er NUMBER, bba NUMBER, team_id_lahman45 TEXT, franchise_id TEXT, park TEXT, ws_win TEXT, ra NUMBER, e NUMBER, g NUMBER, team_id_br TEXT, so NUMBER, h NUMBER, div_id TEXT, era NUMBER, sb NUMBER, rank NUMBER, div_win TEXT, hr NUMBER, triple NUMBER, team_id TEXT); CREATE TABLE all_star (year NUMBER, game_num NUMBER, game_id TEXT); CREATE TABLE team_franchise (franchise_name TEXT, franchise_id TEXT); CREATE TABLE home_game (team_id TEXT, span_first TEXT, year NUMBER, span_last TEXT, games NUMBER, league_id TEXT, attendance NUMBER, park_id TEXT); CREATE TABLE player (player_id TEXT); CREATE TABLE hall_of_fame (yearid NUMBER); CREATE TABLE college (city TEXT); CREATE TABLE postseason (year NUMBER);"
      },
      {
        "question": "What about for the Chicago White Stockings?",
        "query": "SELECT AVG ( t1.attendance ) FROM home_game AS t1 JOIN team AS t2 ON t1.team_id = t2.team_id_br WHERE t2.name = 'Chicago White Stockings'",
        "schema": "CREATE TABLE team (fp NUMBER, soa NUMBER, ab NUMBER, g NUMBER, bpf NUMBER, name TEXT, attendance NUMBER, bba NUMBER, team_id TEXT, lg_win TEXT, ra NUMBER, team_id_br TEXT, div_win TEXT, er NUMBER, sv NUMBER, ha NUMBER, hr NUMBER, double NUMBER, sf NUMBER, hra NUMBER, ws_win TEXT, hbp NUMBER, ghome NUMBER, so NUMBER, rank NUMBER, league_id TEXT, dp NUMBER, ppf NUMBER, h NUMBER, bb NUMBER, year NUMBER, ipouts NUMBER, wc_win TEXT, r NUMBER, w NUMBER, park TEXT, l NUMBER, cg NUMBER, franchise_id TEXT, div_id TEXT, era NUMBER, e NUMBER, team_id_lahman45 TEXT, sb NUMBER, team_id_retro TEXT, cs NUMBER, sho NUMBER, triple NUMBER); CREATE TABLE postseason (year NUMBER); CREATE TABLE hall_of_fame (yearid NUMBER); CREATE TABLE fielding_outfield (player_id TEXT, year NUMBER); CREATE TABLE college (city TEXT); CREATE TABLE fielding (year NUMBER); CREATE TABLE park (park_id TEXT, city TEXT); CREATE TABLE home_game (games NUMBER, year NUMBER, span_last TEXT, league_id TEXT, park_id TEXT, attendance NUMBER, team_id TEXT, span_first TEXT); CREATE TABLE fielding_postseason (year NUMBER); CREATE TABLE team_franchise (franchise_id TEXT, franchise_name TEXT); CREATE TABLE player (player_id TEXT); CREATE TABLE all_star (year NUMBER, game_num NUMBER, game_id TEXT); CREATE TABLE team_half (league_id TEXT, div_id TEXT, team_id TEXT, year NUMBER);"
      },
      {
        "question": "What is the name of the team with the earliest home game date, and what is that date?",
        "query": "SELECT t2.name,t1.span_first FROM home_game AS t1 JOIN team AS t2 ON t1.team_id = t2.team_id_br ORDER BY t1.span_first LIMIT 1",
        "schema": "CREATE TABLE fielding_postseason (year NUMBER); CREATE TABLE team_half (div_id TEXT, team_id TEXT, league_id TEXT, year NUMBER); CREATE TABLE fielding (year NUMBER); CREATE TABLE hall_of_fame (yearid NUMBER); CREATE TABLE team_franchise (franchise_id TEXT, franchise_name TEXT); CREATE TABLE college (city TEXT); CREATE TABLE all_star (year NUMBER, game_id TEXT, game_num NUMBER); CREATE TABLE home_game (span_first TEXT, year NUMBER, team_id TEXT, span_last TEXT, park_id TEXT, games NUMBER, attendance NUMBER, league_id TEXT); CREATE TABLE park (park_id TEXT, city TEXT); CREATE TABLE team (e NUMBER, wc_win TEXT, cs NUMBER, ws_win TEXT, dp NUMBER, lg_win TEXT, ab NUMBER, triple NUMBER, hra NUMBER, sf NUMBER, div_win TEXT, bba NUMBER, era NUMBER, hbp NUMBER, team_id_lahman45 TEXT, ra NUMBER, rank NUMBER, team_id TEXT, l NUMBER, ghome NUMBER, bb NUMBER, bpf NUMBER, fp NUMBER, g NUMBER, park TEXT, league_id TEXT, team_id_retro TEXT, r NUMBER, soa NUMBER, team_id_br TEXT, hr NUMBER, name TEXT, h NUMBER, div_id TEXT, franchise_id TEXT, sv NUMBER, ipouts NUMBER, attendance NUMBER, er NUMBER, sb NUMBER, sho NUMBER, cg NUMBER, w NUMBER, year NUMBER, double NUMBER, ha NUMBER, ppf NUMBER, so NUMBER); CREATE TABLE player (player_id TEXT); CREATE TABLE postseason (year NUMBER); CREATE TABLE fielding_outfield (year NUMBER, player_id TEXT);"
      },
      {
        "question": "What about the latest date?",
        "query": "SELECT t2.name,t1.span_first FROM home_game AS t1 JOIN team AS t2 ON t1.team_id = t2.team_id_br ORDER BY t1.span_first DESC LIMIT 1",
        "schema": "CREATE TABLE fielding_postseason (year NUMBER); CREATE TABLE all_star (game_id TEXT, year NUMBER, game_num NUMBER); CREATE TABLE postseason (year NUMBER); CREATE TABLE team (fp NUMBER, cg NUMBER, hra NUMBER, wc_win TEXT, bba NUMBER, sf NUMBER, ghome NUMBER, h NUMBER, ra NUMBER, hbp NUMBER, dp NUMBER, lg_win TEXT, rank NUMBER, franchise_id TEXT, attendance NUMBER, sb NUMBER, bb NUMBER, div_win TEXT, e NUMBER, ha NUMBER, name TEXT, soa NUMBER, so NUMBER, league_id TEXT, cs NUMBER, sho NUMBER, r NUMBER, team_id_lahman45 TEXT, ipouts NUMBER, team_id_retro TEXT, triple NUMBER, sv NUMBER, year NUMBER, g NUMBER, team_id TEXT, w NUMBER, double NUMBER, era NUMBER, ppf NUMBER, er NUMBER, ws_win TEXT, bpf NUMBER, div_id TEXT, hr NUMBER, ab NUMBER, team_id_br TEXT, l NUMBER, park TEXT); CREATE TABLE home_game (league_id TEXT, team_id TEXT, span_first TEXT, span_last TEXT, park_id TEXT, attendance NUMBER, games NUMBER, year NUMBER); CREATE TABLE fielding (year NUMBER); CREATE TABLE hall_of_fame (yearid NUMBER); CREATE TABLE team_franchise (franchise_id TEXT, franchise_name TEXT); CREATE TABLE fielding_outfield (player_id TEXT, year NUMBER); CREATE TABLE team_half (league_id TEXT, year NUMBER, team_id TEXT, div_id TEXT); CREATE TABLE college (city TEXT); CREATE TABLE park (city TEXT, park_id TEXT); CREATE TABLE player (player_id TEXT);"
      }
    ],
    [
      {
        "question": "Show me the name of players?",
        "query": "SELECT name_first, name_last, name_given FROM player",
        "schema": "CREATE TABLE hall_of_fame (player_id TEXT); CREATE TABLE all_star (player_id TEXT); CREATE TABLE player (death_year NUMBER, birth_state TEXT, name_first TEXT, name_last TEXT, birth_country TEXT, death_city TEXT, death_month NUMBER, debut TEXT, height NUMBER, birth_day NUMBER, throws TEXT, final_game TEXT, death_country TEXT, name_given TEXT, weight NUMBER, bbref_id TEXT, birth_year NUMBER, bats TEXT, death_day NUMBER, birth_month NUMBER, retro_id TEXT, death_state TEXT, player_id TEXT, birth_city TEXT); CREATE TABLE park (park_alias TEXT);"
      },
      {
        "question": "Show me the name of person who received salary from team Washington nationals?",
        "query": "SELECT t2.name_first , t2.name_last, t2.name_given FROM salary AS t1 JOIN player AS t2 ON t1.player_id = t2.player_id JOIN team AS t3 ON t3.team_id_br = t1.team_id WHERE t1.year = 2007 AND t3.name = 'Washington Nationals'",
        "schema": "CREATE TABLE fielding (sb NUMBER); CREATE TABLE player_award_vote (player_id TEXT); CREATE TABLE team_franchise (franchise_id TEXT, franchise_name TEXT, na_assoc TEXT); CREATE TABLE player (height NUMBER, bats TEXT, death_state TEXT, birth_month NUMBER, player_id TEXT, death_country TEXT, death_day NUMBER, name_given TEXT, debut TEXT, bbref_id TEXT, name_last TEXT, throws TEXT, birth_state TEXT, birth_year NUMBER, death_year NUMBER, weight NUMBER, name_first TEXT, birth_city TEXT, retro_id TEXT, birth_country TEXT, death_month NUMBER, birth_day NUMBER, final_game TEXT, death_city TEXT); CREATE TABLE hall_of_fame (player_id TEXT); CREATE TABLE team (l NUMBER, bba NUMBER, ppf NUMBER, name TEXT, team_id_br TEXT, e NUMBER, ab NUMBER, bpf NUMBER, g NUMBER, ha NUMBER, bb NUMBER, year NUMBER, cg NUMBER, sho NUMBER, ghome NUMBER, franchise_id TEXT, rank NUMBER, h NUMBER, soa NUMBER, ipouts NUMBER, sv NUMBER, league_id TEXT, sf NUMBER, wc_win TEXT, r NUMBER, fp NUMBER, hr NUMBER, hbp NUMBER, sb NUMBER, era NUMBER, w NUMBER, attendance NUMBER, cs NUMBER, dp NUMBER, er NUMBER, team_id_lahman45 TEXT, so NUMBER, ra NUMBER, team_id TEXT, double NUMBER, div_id TEXT, triple NUMBER); CREATE TABLE park (city TEXT, park_alias TEXT); CREATE TABLE team_half (l NUMBER); CREATE TABLE salary (salary NUMBER, player_id TEXT, team_id TEXT, league_id TEXT, year NUMBER); CREATE TABLE college (city TEXT); CREATE TABLE manager (team_id TEXT); CREATE TABLE manager_award (player_id TEXT); CREATE TABLE all_star (game_id TEXT, team_id TEXT, game_num NUMBER, player_id TEXT); CREATE TABLE pitching (team_id TEXT, sf NUMBER, l NUMBER, sh NUMBER, stint NUMBER, player_id TEXT, sv NUMBER); CREATE TABLE fielding_postseason (sb NUMBER, player_id TEXT); CREATE TABLE pitching_postseason (so NUMBER, sh NUMBER, hr NUMBER, sho NUMBER, player_id TEXT, l NUMBER, sv NUMBER, team_id TEXT); CREATE TABLE player_award (league_id TEXT, player_id TEXT); CREATE TABLE batting_postseason (player_id TEXT, rbi NUMBER, sb NUMBER, team_id TEXT, hr NUMBER, sh NUMBER); CREATE TABLE batting (player_id TEXT, sb NUMBER, stint NUMBER, triple NUMBER, team_id TEXT, sh NUMBER);"
      },
      {
        "question": "Show me the names of players who  received salary in both 2005 and 2007?",
        "query": "SELECT t2.name_first , t2.name_last FROM salary AS t1 JOIN player AS t2 ON t1.player_id = t2.player_id JOIN team AS t3 ON t3.team_id_br = t1.team_id WHERE t1.year = 2005 OR t1.year = 2007",
        "schema": "CREATE TABLE manager_award (player_id TEXT); CREATE TABLE pitching (sv NUMBER, team_id TEXT, sf NUMBER, sh NUMBER, l NUMBER, stint NUMBER, player_id TEXT); CREATE TABLE fielding_postseason (player_id TEXT, sb NUMBER); CREATE TABLE player_award_vote (year NUMBER, player_id TEXT); CREATE TABLE all_star (team_id TEXT, game_id TEXT, year NUMBER, player_id TEXT, game_num NUMBER); CREATE TABLE team_half (year NUMBER, l NUMBER); CREATE TABLE college (city TEXT); CREATE TABLE player (death_month NUMBER, height NUMBER, birth_state TEXT, name_last TEXT, birth_month NUMBER, bats TEXT, birth_year NUMBER, player_id TEXT, birth_country TEXT, debut TEXT, name_given TEXT, death_state TEXT, throws TEXT, birth_city TEXT, death_year NUMBER, death_city TEXT, weight NUMBER, birth_day NUMBER, name_first TEXT, bbref_id TEXT, final_game TEXT, death_day NUMBER, retro_id TEXT, death_country TEXT); CREATE TABLE team (team_id_br TEXT, ab NUMBER, bb NUMBER, l NUMBER, ipouts NUMBER, sf NUMBER, h NUMBER, div_id TEXT, soa NUMBER, league_id TEXT, team_id TEXT, g NUMBER, dp NUMBER, er NUMBER, era NUMBER, e NUMBER, cg NUMBER, double NUMBER, hbp NUMBER, wc_win TEXT, attendance NUMBER, franchise_id TEXT, ha NUMBER, sho NUMBER, ghome NUMBER, sv NUMBER, rank NUMBER, team_id_lahman45 TEXT, bpf NUMBER, ppf NUMBER, hr NUMBER, fp NUMBER, year NUMBER, bba NUMBER, cs NUMBER, triple NUMBER, r NUMBER, w NUMBER, so NUMBER, sb NUMBER, name TEXT, ra NUMBER); CREATE TABLE team_franchise (franchise_id TEXT, na_assoc TEXT, franchise_name TEXT); CREATE TABLE pitching_postseason (sho NUMBER, hr NUMBER, sh NUMBER, so NUMBER, sv NUMBER, team_id TEXT, player_id TEXT, l NUMBER); CREATE TABLE batting_postseason (player_id TEXT, sb NUMBER, sh NUMBER, hr NUMBER, rbi NUMBER, team_id TEXT); CREATE TABLE salary (salary NUMBER, team_id TEXT, league_id TEXT, player_id TEXT, year NUMBER); CREATE TABLE fielding (sb NUMBER); CREATE TABLE hall_of_fame (player_id TEXT); CREATE TABLE batting (player_id TEXT, stint NUMBER, sh NUMBER, team_id TEXT, sb NUMBER, triple NUMBER); CREATE TABLE postseason (year NUMBER); CREATE TABLE park (city TEXT, park_alias TEXT); CREATE TABLE manager (team_id TEXT); CREATE TABLE player_award (player_id TEXT, league_id TEXT, year NUMBER);"
      }
    ],
    [
      {
        "question": "what team pays the lowest average salary?",
        "query": "SELECT * FROM team AS t1 JOIN salary AS t2 ON t1.team_id = t2.team_id GROUP BY t1.team_id ORDER BY AVG ( t2.salary ) ASC LIMIT 1",
        "schema": "CREATE TABLE manager_half (team_id TEXT); CREATE TABLE team_half (div_id TEXT, half NUMBER, league_id TEXT, l NUMBER, g NUMBER, w NUMBER, rank NUMBER, team_id TEXT); CREATE TABLE player (player_id TEXT); CREATE TABLE manager (team_id TEXT); CREATE TABLE all_star (team_id TEXT, player_id TEXT); CREATE TABLE hall_of_fame (player_id TEXT); CREATE TABLE salary (league_id TEXT, year NUMBER, salary NUMBER, team_id TEXT, player_id TEXT); CREATE TABLE team (year NUMBER, r NUMBER, league_id TEXT, ppf NUMBER, franchise_id TEXT, er NUMBER, rank NUMBER, div_win TEXT, soa NUMBER, hra NUMBER, era NUMBER, sho NUMBER, team_id_br TEXT, bb NUMBER, sf NUMBER, e NUMBER, team_id_lahman45 TEXT, wc_win TEXT, ghome NUMBER, team_id TEXT, cs NUMBER, fp NUMBER, sv NUMBER, w NUMBER, g NUMBER, triple NUMBER, dp NUMBER, park TEXT, team_id_retro TEXT, so NUMBER, hr NUMBER, ab NUMBER, ipouts NUMBER, attendance NUMBER, cg NUMBER, ra NUMBER, ws_win TEXT, div_id TEXT, double NUMBER, name TEXT, lg_win TEXT, hbp NUMBER, l NUMBER, bba NUMBER, h NUMBER, bpf NUMBER, sb NUMBER, ha NUMBER); CREATE TABLE team_franchise (franchise_name TEXT, na_assoc TEXT, franchise_id TEXT);"
      },
      {
        "question": "thanks..how about one last one...what is median salary across all teams?",
        "query": "SELECT AVG ( salary ) FROM salary",
        "schema": "CREATE TABLE team_franchise (franchise_id TEXT, franchise_name TEXT, na_assoc TEXT); CREATE TABLE salary (team_id TEXT, league_id TEXT, salary NUMBER, year NUMBER, player_id TEXT); CREATE TABLE all_star (team_id TEXT, player_id TEXT); CREATE TABLE manager_half (team_id TEXT); CREATE TABLE team_half (rank NUMBER, w NUMBER, g NUMBER, half NUMBER, l NUMBER, team_id TEXT, league_id TEXT, div_id TEXT); CREATE TABLE team (so NUMBER, sho NUMBER, l NUMBER, sv NUMBER, w NUMBER, attendance NUMBER, team_id_retro TEXT, era NUMBER, soa NUMBER, ha NUMBER, team_id_br TEXT, cs NUMBER, team_id TEXT, lg_win TEXT, h NUMBER, bba NUMBER, hra NUMBER, team_id_lahman45 TEXT, bb NUMBER, ppf NUMBER, sb NUMBER, div_win TEXT, ghome NUMBER, hr NUMBER, e NUMBER, triple NUMBER, dp NUMBER, er NUMBER, fp NUMBER, ab NUMBER, wc_win TEXT, franchise_id TEXT, sf NUMBER, r NUMBER, ws_win TEXT, rank NUMBER, hbp NUMBER, g NUMBER, double NUMBER, park TEXT, ipouts NUMBER, year NUMBER, cg NUMBER, league_id TEXT, name TEXT, bpf NUMBER, ra NUMBER, div_id TEXT); CREATE TABLE hall_of_fame (player_id TEXT); CREATE TABLE manager (team_id TEXT); CREATE TABLE player (player_id TEXT);"
      },
      {
        "question": "ok,  how many teams are the total in this data range? | What data range are you referring to? | Team salaries",
        "query": "SELECT COUNT ( DISTINCT team_id ) FROM salary",
        "schema": "CREATE TABLE player (player_id TEXT); CREATE TABLE hall_of_fame (player_id TEXT); CREATE TABLE manager_half (team_id TEXT); CREATE TABLE team_franchise (franchise_name TEXT, na_assoc TEXT, franchise_id TEXT); CREATE TABLE team_half (league_id TEXT, w NUMBER, div_id TEXT, l NUMBER, g NUMBER, rank NUMBER, team_id TEXT, half NUMBER); CREATE TABLE manager (team_id TEXT); CREATE TABLE salary (player_id TEXT, salary NUMBER, league_id TEXT, team_id TEXT, year NUMBER); CREATE TABLE team (year NUMBER, name TEXT, attendance NUMBER, er NUMBER, e NUMBER, w NUMBER, double NUMBER, h NUMBER, triple NUMBER, ab NUMBER, ppf NUMBER, lg_win TEXT, dp NUMBER, rank NUMBER, wc_win TEXT, ipouts NUMBER, sb NUMBER, team_id_retro TEXT, bpf NUMBER, team_id TEXT, ra NUMBER, so NUMBER, hr NUMBER, league_id TEXT, cs NUMBER, ha NUMBER, franchise_id TEXT, team_id_lahman45 TEXT, g NUMBER, l NUMBER, div_id TEXT, soa NUMBER, bba NUMBER, ws_win TEXT, sf NUMBER, r NUMBER, hbp NUMBER, ghome NUMBER, hra NUMBER, sv NUMBER, sho NUMBER, team_id_br TEXT, bb NUMBER, div_win TEXT, cg NUMBER, era NUMBER, park TEXT, fp NUMBER); CREATE TABLE all_star (team_id TEXT, player_id TEXT);"
      }
    ],
    [
      {
        "question": "how many postseason on the table",
        "query": "SELECT COUNT ( * ) FROM postseason",
        "schema": "CREATE TABLE all_star (player_id TEXT, league_id TEXT, game_id TEXT, team_id TEXT, game_num NUMBER); CREATE TABLE player_award_vote (player_id TEXT); CREATE TABLE appearances (team_id TEXT, league_id TEXT, g_1b NUMBER); CREATE TABLE team_franchise (franchise_id TEXT, na_assoc TEXT); CREATE TABLE hall_of_fame (needed_note TEXT, player_id TEXT); CREATE TABLE pitching (r NUMBER, ibb NUMBER, g_idp NUMBER, so NUMBER, league_id TEXT, player_id TEXT, er NUMBER, stint NUMBER, sf NUMBER, g NUMBER, sv NUMBER, sho NUMBER, team_id TEXT, l NUMBER, bfp NUMBER, cg NUMBER, sh NUMBER, bk NUMBER); CREATE TABLE batting (player_id TEXT); CREATE TABLE pitching_postseason (wp NUMBER, baopp TEXT, w NUMBER, hr NUMBER, bk NUMBER, player_id TEXT, gf NUMBER, sv NUMBER, team_id TEXT, gs NUMBER, g NUMBER, so NUMBER, er NUMBER, ipouts NUMBER, year NUMBER, sh NUMBER, l NUMBER, round TEXT, h NUMBER, g_idp NUMBER, era NUMBER, sho NUMBER, hbp NUMBER, ibb NUMBER, league_id TEXT, cg NUMBER, sf NUMBER, bb NUMBER, bfp NUMBER, r NUMBER); CREATE TABLE manager_award_vote (league_id TEXT); CREATE TABLE postseason (year NUMBER, league_id_loser TEXT, ties NUMBER, team_id_winner TEXT, team_id_loser TEXT, losses NUMBER, league_id_winner TEXT, wins NUMBER, round TEXT); CREATE TABLE batting_postseason (h NUMBER, triple NUMBER, sf NUMBER, year NUMBER, sh NUMBER, team_id TEXT, g_idp NUMBER, double NUMBER, player_id TEXT, hbp NUMBER, rbi NUMBER, hr NUMBER, round TEXT, cs NUMBER, bb NUMBER, sb NUMBER, league_id TEXT, so NUMBER, g NUMBER, ab NUMBER, r NUMBER, ibb NUMBER); CREATE TABLE fielding_outfield (player_id TEXT); CREATE TABLE salary (team_id TEXT); CREATE TABLE player (final_game TEXT, player_id TEXT); CREATE TABLE manager (team_id TEXT); CREATE TABLE college (college_id TEXT); CREATE TABLE home_game (team_id TEXT); CREATE TABLE fielding_postseason (inn_outs NUMBER, sb NUMBER, cs NUMBER, tp NUMBER, player_id TEXT, round TEXT, dp NUMBER, a NUMBER, team_id TEXT, pb NUMBER, pos TEXT, league_id TEXT, po NUMBER, e NUMBER, gs NUMBER, g NUMBER, year NUMBER); CREATE TABLE player_award (player_id TEXT); CREATE TABLE player_college (player_id TEXT);"
      },
      {
        "question": "which postseason are highest wins | Would you like all information for the entry in postseason with the highest value for wins? | exactly",
        "query": "SELECT * FROM postseason ORDER BY wins DESC LIMIT 1",
        "schema": "CREATE TABLE batting (player_id TEXT); CREATE TABLE player_college (player_id TEXT); CREATE TABLE all_star (league_id TEXT, game_id TEXT, player_id TEXT, game_num NUMBER, team_id TEXT); CREATE TABLE manager (team_id TEXT); CREATE TABLE player_award (player_id TEXT); CREATE TABLE postseason (round TEXT, team_id_winner TEXT, ties NUMBER, league_id_loser TEXT, league_id_winner TEXT, year NUMBER, losses NUMBER, wins NUMBER, team_id_loser TEXT); CREATE TABLE batting_postseason (sb NUMBER, round TEXT, ab NUMBER, double NUMBER, g NUMBER, g_idp NUMBER, cs NUMBER, r NUMBER, year NUMBER, triple NUMBER, bb NUMBER, hbp NUMBER, ibb NUMBER, h NUMBER, so NUMBER, sf NUMBER, hr NUMBER, team_id TEXT, league_id TEXT, rbi NUMBER, sh NUMBER, player_id TEXT); CREATE TABLE player_award_vote (player_id TEXT); CREATE TABLE fielding_outfield (player_id TEXT); CREATE TABLE fielding_postseason (team_id TEXT, po NUMBER, year NUMBER, e NUMBER, dp NUMBER, cs NUMBER, a NUMBER, pos TEXT, round TEXT, pb NUMBER, league_id TEXT, tp NUMBER, inn_outs NUMBER, sb NUMBER, g NUMBER, player_id TEXT, gs NUMBER); CREATE TABLE hall_of_fame (needed_note TEXT, player_id TEXT); CREATE TABLE salary (team_id TEXT); CREATE TABLE college (college_id TEXT); CREATE TABLE team_franchise (franchise_id TEXT, na_assoc TEXT); CREATE TABLE pitching (ibb NUMBER, sv NUMBER, er NUMBER, sh NUMBER, g_idp NUMBER, so NUMBER, bfp NUMBER, g NUMBER, bk NUMBER, team_id TEXT, sho NUMBER, sf NUMBER, l NUMBER, player_id TEXT, r NUMBER, cg NUMBER, league_id TEXT, stint NUMBER); CREATE TABLE appearances (g_1b NUMBER, league_id TEXT, team_id TEXT); CREATE TABLE manager_award_vote (league_id TEXT); CREATE TABLE pitching_postseason (g_idp NUMBER, w NUMBER, er NUMBER, sh NUMBER, bfp NUMBER, hr NUMBER, ipouts NUMBER, cg NUMBER, player_id TEXT, round TEXT, gf NUMBER, baopp TEXT, year NUMBER, gs NUMBER, g NUMBER, sf NUMBER, bk NUMBER, r NUMBER, team_id TEXT, sho NUMBER, hbp NUMBER, league_id TEXT, sv NUMBER, bb NUMBER, l NUMBER, h NUMBER, wp NUMBER, so NUMBER, ibb NUMBER, era NUMBER); CREATE TABLE player (player_id TEXT, final_game TEXT); CREATE TABLE home_game (team_id TEXT);"
      }
    ],
    [
      {
        "question": "list the year id in which the least people enter hall of fame",
        "query": "SELECT yearid FROM hall_of_fame GROUP BY yearid ORDER BY COUNT ( * ) ASC LIMIT 1",
        "schema": "CREATE TABLE home_game (year NUMBER); CREATE TABLE college (college_id TEXT); CREATE TABLE fielding_outfield (player_id TEXT, year NUMBER); CREATE TABLE team_half (year NUMBER); CREATE TABLE fielding (player_id TEXT, year NUMBER); CREATE TABLE player_college (year NUMBER, player_id TEXT, college_id TEXT); CREATE TABLE manager (year NUMBER); CREATE TABLE team_franchise (franchise_id TEXT); CREATE TABLE player_award_vote (year NUMBER, player_id TEXT); CREATE TABLE hall_of_fame (yearid NUMBER, player_id TEXT, needed NUMBER, ballots NUMBER, inducted TEXT); CREATE TABLE manager_award (year NUMBER, player_id TEXT); CREATE TABLE salary (year NUMBER, player_id TEXT); CREATE TABLE manager_half (year NUMBER); CREATE TABLE manager_award_vote (year NUMBER); CREATE TABLE appearances (player_id TEXT, g_ss NUMBER, g_of NUMBER, year NUMBER); CREATE TABLE player_award (year NUMBER, player_id TEXT); CREATE TABLE all_star (player_id TEXT, year NUMBER); CREATE TABLE postseason (year NUMBER); CREATE TABLE player (bbref_id TEXT, player_id TEXT);"
      },
      {
        "question": "what is the catogery of the particular year id | Do  you mean of the year id 1944? | yes, what is the category mentioned for the year id 1944",
        "query": "SELECT category FROM hall_of_fame WHERE yearid = 1944",
        "schema": "CREATE TABLE fielding (player_id TEXT, year NUMBER); CREATE TABLE home_game (year NUMBER); CREATE TABLE team_franchise (franchise_id TEXT); CREATE TABLE manager_award (player_id TEXT, year NUMBER); CREATE TABLE manager_half (year NUMBER); CREATE TABLE postseason (year NUMBER); CREATE TABLE manager_award_vote (year NUMBER); CREATE TABLE player_award_vote (year NUMBER, player_id TEXT); CREATE TABLE hall_of_fame (needed NUMBER, ballots NUMBER, category TEXT, inducted TEXT, yearid NUMBER, player_id TEXT); CREATE TABLE team_half (year NUMBER); CREATE TABLE player (bbref_id TEXT, player_id TEXT); CREATE TABLE all_star (year NUMBER, player_id TEXT); CREATE TABLE player_award (player_id TEXT, year NUMBER); CREATE TABLE appearances (player_id TEXT, g_ss NUMBER, year NUMBER, g_of NUMBER); CREATE TABLE player_college (college_id TEXT, player_id TEXT, year NUMBER); CREATE TABLE fielding_outfield (player_id TEXT, year NUMBER); CREATE TABLE salary (year NUMBER, player_id TEXT); CREATE TABLE college (college_id TEXT); CREATE TABLE manager (year NUMBER);"
      },
      {
        "question": "list the number of votes for this category",
        "query": "SELECT SUM ( votes ) FROM hall_of_fame WHERE category = \"Pioneer/Executive\"",
        "schema": "CREATE TABLE fielding (year NUMBER, player_id TEXT); CREATE TABLE player_award (year NUMBER, player_id TEXT); CREATE TABLE team_franchise (franchise_id TEXT); CREATE TABLE salary (year NUMBER, player_id TEXT); CREATE TABLE manager_award_vote (votes_first NUMBER, year NUMBER); CREATE TABLE fielding_outfield (year NUMBER, player_id TEXT); CREATE TABLE all_star (year NUMBER, player_id TEXT); CREATE TABLE manager_half (year NUMBER); CREATE TABLE manager_award (year NUMBER, player_id TEXT); CREATE TABLE hall_of_fame (player_id TEXT, needed NUMBER, inducted TEXT, category TEXT, ballots NUMBER, votedby TEXT, yearid NUMBER, votes NUMBER); CREATE TABLE player_college (college_id TEXT, player_id TEXT, year NUMBER); CREATE TABLE college (college_id TEXT); CREATE TABLE player_award_vote (points_max NUMBER, year NUMBER, player_id TEXT, votes_first NUMBER); CREATE TABLE team_half (year NUMBER); CREATE TABLE appearances (player_id TEXT, g_ss NUMBER, year NUMBER, g_of NUMBER); CREATE TABLE player (player_id TEXT, bbref_id TEXT); CREATE TABLE manager (year NUMBER); CREATE TABLE postseason (year NUMBER); CREATE TABLE home_game (year NUMBER);"
      }
    ],
    [
      {
        "question": "what is the number of wins the team Boston Red Stockings got in the postseasons each year in history?",
        "query": "SELECT COUNT ( * ) , t1.year FROM postseason AS t1 JOIN team AS t2 ON t1.team_id_winner = t2.team_id_br WHERE t2.name = 'Boston Red Stockings' GROUP BY t1.year",
        "schema": "CREATE TABLE manager (year NUMBER); CREATE TABLE manager_award (year NUMBER); CREATE TABLE fielding_outfield (player_id TEXT, year NUMBER); CREATE TABLE player (player_id TEXT); CREATE TABLE pitching (year NUMBER, team_id TEXT, league_id TEXT); CREATE TABLE fielding_postseason (inn_outs NUMBER, league_id TEXT, dp NUMBER, tp NUMBER, e NUMBER, po NUMBER, g NUMBER, year NUMBER, a NUMBER, pos TEXT, gs NUMBER, team_id TEXT, pb NUMBER, cs NUMBER, round TEXT, player_id TEXT, sb NUMBER); CREATE TABLE appearances (year NUMBER); CREATE TABLE pitching_postseason (sf NUMBER, player_id TEXT, so NUMBER, bb NUMBER, baopp TEXT, l NUMBER, gf NUMBER, wp NUMBER, gs NUMBER, era NUMBER, bk NUMBER, league_id TEXT, cg NUMBER, er NUMBER, year NUMBER, team_id TEXT, sho NUMBER, g NUMBER, bfp NUMBER, sh NUMBER, round TEXT, h NUMBER, sv NUMBER, ibb NUMBER, r NUMBER, g_idp NUMBER, hbp NUMBER, ipouts NUMBER, hr NUMBER); CREATE TABLE team_half (div_id TEXT, g NUMBER, div_win TEXT, year NUMBER, l NUMBER, half NUMBER, team_id TEXT); CREATE TABLE home_game (year NUMBER, team_id TEXT); CREATE TABLE player_award_vote (league_id TEXT, year NUMBER, player_id TEXT); CREATE TABLE manager_award_vote (points_won NUMBER, year NUMBER); CREATE TABLE team (name TEXT, ha NUMBER, era NUMBER, triple NUMBER, ab NUMBER, sho NUMBER, double NUMBER, bba NUMBER, ra NUMBER, cs NUMBER, hbp NUMBER, sv NUMBER, div_id TEXT, fp NUMBER, team_id TEXT, league_id TEXT, l NUMBER, sb NUMBER, attendance NUMBER, r NUMBER, team_id_retro TEXT, er NUMBER, ppf NUMBER, year NUMBER, bpf NUMBER, franchise_id TEXT, so NUMBER, bb NUMBER, lg_win TEXT, team_id_br TEXT, team_id_lahman45 TEXT, cg NUMBER, g NUMBER, e NUMBER, dp NUMBER, ws_win TEXT, w NUMBER, div_win TEXT, hr NUMBER, ipouts NUMBER, hra NUMBER, h NUMBER, soa NUMBER, wc_win TEXT, ghome NUMBER, park TEXT, rank NUMBER, sf NUMBER); CREATE TABLE player_award (player_id TEXT, year NUMBER); CREATE TABLE team_franchise (franchise_id TEXT, franchise_name TEXT, na_assoc TEXT); CREATE TABLE all_star (year NUMBER, game_num NUMBER, game_id TEXT, team_id TEXT); CREATE TABLE batting_postseason (so NUMBER, cs NUMBER, sh NUMBER, g NUMBER, player_id TEXT, g_idp NUMBER, year NUMBER, league_id TEXT, team_id TEXT, sf NUMBER); CREATE TABLE hall_of_fame (yearid NUMBER); CREATE TABLE postseason (team_id_winner TEXT, losses NUMBER, wins NUMBER, year NUMBER, league_id_loser TEXT, league_id_winner TEXT, team_id_loser TEXT); CREATE TABLE fielding (year NUMBER, player_id TEXT, a NUMBER, team_id TEXT, po NUMBER, wp NUMBER, g NUMBER, sb NUMBER, league_id TEXT); CREATE TABLE batting (year NUMBER, team_id TEXT, player_id TEXT); CREATE TABLE player_college (year NUMBER, player_id TEXT);"
      },
      {
        "question": "ok, list out the all team id winner",
        "query": "SELECT team_id_winner FROM postseason",
        "schema": "CREATE TABLE batting_postseason (player_id TEXT, league_id TEXT, sf NUMBER, cs NUMBER, year NUMBER, g_idp NUMBER, g NUMBER, sh NUMBER, team_id TEXT, so NUMBER); CREATE TABLE player_college (year NUMBER, player_id TEXT); CREATE TABLE player_award (year NUMBER, player_id TEXT); CREATE TABLE manager (year NUMBER); CREATE TABLE pitching_postseason (cg NUMBER, l NUMBER, sh NUMBER, gf NUMBER, year NUMBER, sf NUMBER, round TEXT, team_id TEXT, er NUMBER, hbp NUMBER, g_idp NUMBER, sv NUMBER, player_id TEXT, hr NUMBER, so NUMBER, ibb NUMBER, bk NUMBER, sho NUMBER, bfp NUMBER, ipouts NUMBER, g NUMBER, bb NUMBER, baopp TEXT, league_id TEXT, gs NUMBER, r NUMBER, era NUMBER, wp NUMBER, h NUMBER); CREATE TABLE hall_of_fame (yearid NUMBER); CREATE TABLE player (player_id TEXT); CREATE TABLE manager_award (year NUMBER); CREATE TABLE player_award_vote (player_id TEXT, league_id TEXT, year NUMBER); CREATE TABLE batting (player_id TEXT, team_id TEXT, year NUMBER); CREATE TABLE home_game (year NUMBER, team_id TEXT); CREATE TABLE fielding_outfield (player_id TEXT, year NUMBER); CREATE TABLE postseason (team_id_loser TEXT, year NUMBER, league_id_winner TEXT, losses NUMBER, team_id_winner TEXT, league_id_loser TEXT, wins NUMBER); CREATE TABLE fielding_postseason (g NUMBER, year NUMBER, cs NUMBER, e NUMBER, round TEXT, po NUMBER, player_id TEXT, sb NUMBER, league_id TEXT, a NUMBER, pos TEXT, dp NUMBER, inn_outs NUMBER, team_id TEXT, tp NUMBER, gs NUMBER, pb NUMBER); CREATE TABLE manager_award_vote (points_won NUMBER, year NUMBER); CREATE TABLE college (city TEXT); CREATE TABLE all_star (year NUMBER, game_id TEXT, team_id TEXT, game_num NUMBER); CREATE TABLE team (w NUMBER, ws_win TEXT, sv NUMBER, h NUMBER, cs NUMBER, cg NUMBER, triple NUMBER, lg_win TEXT, ipouts NUMBER, hbp NUMBER, league_id TEXT, e NUMBER, team_id_br TEXT, soa NUMBER, er NUMBER, ab NUMBER, bba NUMBER, hra NUMBER, bb NUMBER, park TEXT, double NUMBER, hr NUMBER, dp NUMBER, rank NUMBER, ghome NUMBER, ha NUMBER, year NUMBER, sho NUMBER, so NUMBER, div_win TEXT, ppf NUMBER, name TEXT, team_id_lahman45 TEXT, franchise_id TEXT, ra NUMBER, team_id_retro TEXT, r NUMBER, era NUMBER, g NUMBER, team_id TEXT, l NUMBER, fp NUMBER, sf NUMBER, bpf NUMBER, attendance NUMBER, wc_win TEXT, sb NUMBER, div_id TEXT); CREATE TABLE appearances (year NUMBER); CREATE TABLE pitching (team_id TEXT, league_id TEXT, year NUMBER); CREATE TABLE fielding (wp NUMBER, league_id TEXT, a NUMBER, team_id TEXT, year NUMBER, g NUMBER, po NUMBER, sb NUMBER, player_id TEXT); CREATE TABLE team_half (g NUMBER, div_id TEXT, div_win TEXT, year NUMBER, half NUMBER, l NUMBER, team_id TEXT); CREATE TABLE park (city TEXT); CREATE TABLE team_franchise (franchise_id TEXT, na_assoc TEXT, franchise_name TEXT);"
      },
      {
        "question": "ok,list out the all team id loser",
        "query": "SELECT team_id_loser FROM postseason",
        "schema": "CREATE TABLE pitching (year NUMBER, league_id TEXT, team_id TEXT); CREATE TABLE hall_of_fame (yearid NUMBER); CREATE TABLE manager_award_vote (points_won NUMBER, year NUMBER); CREATE TABLE park (city TEXT); CREATE TABLE team_half (div_id TEXT, g NUMBER, l NUMBER, half NUMBER, div_win TEXT, team_id TEXT, year NUMBER); CREATE TABLE postseason (losses NUMBER, team_id_winner TEXT, wins NUMBER, league_id_loser TEXT, team_id_loser TEXT, year NUMBER, league_id_winner TEXT); CREATE TABLE college (city TEXT); CREATE TABLE pitching_postseason (hbp NUMBER, bk NUMBER, round TEXT, year NUMBER, sho NUMBER, h NUMBER, cg NUMBER, ipouts NUMBER, sf NUMBER, sv NUMBER, wp NUMBER, so NUMBER, gs NUMBER, gf NUMBER, g NUMBER, team_id TEXT, l NUMBER, g_idp NUMBER, era NUMBER, league_id TEXT, bb NUMBER, bfp NUMBER, er NUMBER, baopp TEXT, r NUMBER, ibb NUMBER, sh NUMBER, hr NUMBER, player_id TEXT); CREATE TABLE batting (year NUMBER, team_id TEXT, player_id TEXT); CREATE TABLE fielding_outfield (year NUMBER, player_id TEXT); CREATE TABLE team_franchise (franchise_id TEXT, na_assoc TEXT, franchise_name TEXT); CREATE TABLE home_game (team_id TEXT, year NUMBER); CREATE TABLE fielding (team_id TEXT, wp NUMBER, sb NUMBER, player_id TEXT, year NUMBER, po NUMBER, g NUMBER, a NUMBER, league_id TEXT); CREATE TABLE player_college (year NUMBER, player_id TEXT); CREATE TABLE player (player_id TEXT); CREATE TABLE team (e NUMBER, year NUMBER, l NUMBER, bpf NUMBER, double NUMBER, ha NUMBER, div_win TEXT, team_id TEXT, park TEXT, hra NUMBER, team_id_br TEXT, er NUMBER, soa NUMBER, ab NUMBER, ppf NUMBER, cg NUMBER, league_id TEXT, r NUMBER, ghome NUMBER, lg_win TEXT, wc_win TEXT, sv NUMBER, ws_win TEXT, ra NUMBER, fp NUMBER, hbp NUMBER, name TEXT, attendance NUMBER, team_id_lahman45 TEXT, franchise_id TEXT, ipouts NUMBER, rank NUMBER, sf NUMBER, cs NUMBER, sho NUMBER, triple NUMBER, sb NUMBER, h NUMBER, so NUMBER, g NUMBER, div_id TEXT, era NUMBER, dp NUMBER, bb NUMBER, bba NUMBER, w NUMBER, hr NUMBER, team_id_retro TEXT); CREATE TABLE manager (year NUMBER); CREATE TABLE manager_award (year NUMBER); CREATE TABLE all_star (game_id TEXT, year NUMBER, game_num NUMBER, team_id TEXT); CREATE TABLE batting_postseason (sh NUMBER, sf NUMBER, league_id TEXT, g NUMBER, team_id TEXT, g_idp NUMBER, so NUMBER, player_id TEXT, year NUMBER, cs NUMBER); CREATE TABLE fielding_postseason (po NUMBER, dp NUMBER, gs NUMBER, pb NUMBER, g NUMBER, league_id TEXT, round TEXT, year NUMBER, inn_outs NUMBER, sb NUMBER, team_id TEXT, tp NUMBER, player_id TEXT, a NUMBER, cs NUMBER, e NUMBER, pos TEXT); CREATE TABLE player_award (player_id TEXT, year NUMBER); CREATE TABLE appearances (year NUMBER); CREATE TABLE player_award_vote (year NUMBER, league_id TEXT, player_id TEXT);"
      }
    ],
    [
      {
        "question": "What is the Open Year of the Riverside Park?",
        "query": "SELECT t1.year FROM home_game AS t1 JOIN park AS t2 ON t1.park_id = t2.park_id WHERE t2.park_name = \"Riverside Park\"",
        "schema": "CREATE TABLE postseason (year NUMBER); CREATE TABLE home_game (year NUMBER, park_id TEXT); CREATE TABLE park (park_alias TEXT, park_name TEXT, city TEXT, park_id TEXT); CREATE TABLE all_star (year NUMBER);"
      },
      {
        "question": "What is a park in Anaheim?",
        "query": "SELECT t2.park_name FROM park AS t2 WHERE t2.city = \"Anaheim\"",
        "schema": "CREATE TABLE postseason (year NUMBER); CREATE TABLE home_game (park_id TEXT, games NUMBER, year NUMBER); CREATE TABLE college (city TEXT); CREATE TABLE park (park_id TEXT, park_name TEXT, park_alias TEXT, city TEXT, state TEXT); CREATE TABLE all_star (year NUMBER);"
      },
      {
        "question": "How many people attendance for Columbia Park? | Did you mean the sum of the attendance for the Columbia Park for all the years? | Yes",
        "query": "SELECT SUM ( t1.attendance ) FROM home_game AS t1 JOIN park AS t2 ON t1.park_id = t2.park_id WHERE t2.park_name = \"Columbia Park\"",
        "schema": "CREATE TABLE player_college (year NUMBER, player_id TEXT); CREATE TABLE park (park_id TEXT, city TEXT, park_alias TEXT, park_name TEXT, state TEXT); CREATE TABLE all_star (year NUMBER); CREATE TABLE college (city TEXT); CREATE TABLE player (player_id TEXT); CREATE TABLE home_game (park_id TEXT, games NUMBER, year NUMBER, attendance NUMBER); CREATE TABLE postseason (year NUMBER);"
      },
      {
        "question": "Which park had most attendances in 2008?",
        "query": "SELECT t2.park_name FROM home_game AS t1 JOIN park AS t2 ON t1.park_id = t2.park_id WHERE t1.year = 2008 ORDER BY t1.attendance DESC LIMIT 1",
        "schema": "CREATE TABLE postseason (year NUMBER); CREATE TABLE player_college (player_id TEXT, year NUMBER); CREATE TABLE all_star (year NUMBER); CREATE TABLE college (city TEXT); CREATE TABLE home_game (games NUMBER, attendance NUMBER, park_id TEXT, year NUMBER); CREATE TABLE park (state TEXT, park_name TEXT, park_id TEXT, city TEXT, park_alias TEXT); CREATE TABLE player (player_id TEXT);"
      }
    ],
    [
      {
        "question": "How many games were played at Columbia Park?",
        "query": "SELECT COUNT ( * ) FROM home_game AS t1 JOIN park AS t2 ON t1.park_id = t2.park_id WHERE t2.park_name = 'Columbia Park'",
        "schema": "CREATE TABLE home_game (league_id TEXT, team_id TEXT, games NUMBER, park_id TEXT, openings NUMBER, attendance NUMBER); CREATE TABLE all_star (game_id TEXT, game_num NUMBER, player_id TEXT); CREATE TABLE player (player_id TEXT); CREATE TABLE player_award (player_id TEXT); CREATE TABLE fielding_outfield (player_id TEXT); CREATE TABLE postseason (round TEXT); CREATE TABLE college (college_id TEXT, city TEXT); CREATE TABLE batting_postseason (team_id TEXT); CREATE TABLE team_franchise (franchise_name TEXT, na_assoc TEXT, franchise_id TEXT); CREATE TABLE team (ab NUMBER, bba NUMBER, so NUMBER, park TEXT, e NUMBER, g NUMBER, soa NUMBER, team_id TEXT, league_id TEXT); CREATE TABLE park (country TEXT, park_id TEXT, park_name TEXT, park_alias TEXT, city TEXT); CREATE TABLE fielding (team_id TEXT, g NUMBER, player_id TEXT); CREATE TABLE fielding_postseason (team_id TEXT, league_id TEXT, player_id TEXT, sb NUMBER); CREATE TABLE player_college (player_id TEXT, college_id TEXT);"
      },
      {
        "question": "How many games were played in 1907?",
        "query": "SELECT COUNT ( * ) FROM home_game AS t1 JOIN park AS t2 ON t1.park_id = t2.park_id WHERE t1.year = 1907",
        "schema": "CREATE TABLE fielding_outfield (year NUMBER, player_id TEXT); CREATE TABLE home_game (park_id TEXT, league_id TEXT, games NUMBER, openings NUMBER, year NUMBER, attendance NUMBER, team_id TEXT); CREATE TABLE postseason (year NUMBER, round TEXT); CREATE TABLE player (player_id TEXT); CREATE TABLE all_star (game_num NUMBER, player_id TEXT, game_id TEXT); CREATE TABLE park (country TEXT, city TEXT, park_alias TEXT, park_id TEXT, park_name TEXT); CREATE TABLE player_college (college_id TEXT, player_id TEXT, year NUMBER); CREATE TABLE team_franchise (franchise_name TEXT, franchise_id TEXT, na_assoc TEXT); CREATE TABLE team (league_id TEXT, e NUMBER, park TEXT, g NUMBER, so NUMBER, soa NUMBER, bba NUMBER, team_id TEXT, ab NUMBER); CREATE TABLE college (city TEXT, college_id TEXT); CREATE TABLE fielding (year NUMBER, team_id TEXT, player_id TEXT, g NUMBER); CREATE TABLE player_award (player_id TEXT); CREATE TABLE batting_postseason (team_id TEXT); CREATE TABLE fielding_postseason (player_id TEXT, year NUMBER, team_id TEXT, league_id TEXT, sb NUMBER);"
      },
      {
        "question": "Out of those games, how many of them were played in Columbia Park? | Did  you  mean  how many games were played in park \"Columbia Park\" in 1907 | Yes please.",
        "query": "SELECT COUNT ( * ) FROM home_game AS t1 JOIN park AS t2 ON t1.park_id = t2.park_id WHERE t1.year = 1907 AND t2.park_name = 'Columbia Park'",
        "schema": "CREATE TABLE fielding_postseason (team_id TEXT, league_id TEXT, sb NUMBER, year NUMBER, player_id TEXT); CREATE TABLE home_game (games NUMBER, park_id TEXT, team_id TEXT, year NUMBER, openings NUMBER, league_id TEXT, attendance NUMBER); CREATE TABLE team (e NUMBER, so NUMBER, team_id TEXT, soa NUMBER, ab NUMBER, park TEXT, g NUMBER, bba NUMBER, league_id TEXT); CREATE TABLE fielding_outfield (player_id TEXT, year NUMBER); CREATE TABLE player (player_id TEXT); CREATE TABLE player_award (player_id TEXT); CREATE TABLE fielding (year NUMBER, team_id TEXT, g NUMBER, player_id TEXT); CREATE TABLE park (park_id TEXT, park_name TEXT, city TEXT, park_alias TEXT, country TEXT); CREATE TABLE postseason (year NUMBER, round TEXT); CREATE TABLE batting_postseason (team_id TEXT); CREATE TABLE college (college_id TEXT, city TEXT); CREATE TABLE all_star (game_id TEXT, player_id TEXT, game_num NUMBER); CREATE TABLE team_franchise (na_assoc TEXT, franchise_name TEXT, franchise_id TEXT); CREATE TABLE player_college (year NUMBER, player_id TEXT, college_id TEXT);"
      }
    ],
    [
      {
        "question": "What is the average height of all players?",
        "query": "SELECT AVG ( height ) FROM player",
        "schema": "CREATE TABLE team_franchise (franchise_id TEXT); CREATE TABLE fielding_postseason (player_id TEXT); CREATE TABLE player (player_id TEXT, weight NUMBER, height NUMBER); CREATE TABLE all_star (game_id TEXT, player_id TEXT); CREATE TABLE batting_postseason (player_id TEXT); CREATE TABLE hall_of_fame (player_id TEXT); CREATE TABLE fielding (zr NUMBER, player_id TEXT); CREATE TABLE fielding_outfield (player_id TEXT);"
      },
      {
        "question": "What is the average height of all players from the college \"Yale University\"?",
        "query": "SELECT AVG ( t1.height ) FROM player AS t1 JOIN player_college AS t2 ON t1.player_id = t2.player_id JOIN college AS t3 ON t3.college_id = t2.college_id WHERE t3.name_full = 'Yale University'",
        "schema": "CREATE TABLE fielding_outfield (player_id TEXT); CREATE TABLE all_star (player_id TEXT, game_id TEXT); CREATE TABLE fielding_postseason (player_id TEXT); CREATE TABLE team_franchise (franchise_id TEXT); CREATE TABLE college (city TEXT, college_id TEXT, name_full TEXT); CREATE TABLE batting_postseason (player_id TEXT); CREATE TABLE player (player_id TEXT, weight NUMBER, height NUMBER); CREATE TABLE player_college (player_id TEXT, year NUMBER, college_id TEXT); CREATE TABLE fielding (player_id TEXT, zr NUMBER); CREATE TABLE hall_of_fame (player_id TEXT);"
      },
      {
        "question": "What is the average weight of all players?",
        "query": "SELECT AVG ( weight ) FROM player",
        "schema": "CREATE TABLE fielding_postseason (player_id TEXT); CREATE TABLE player (death_state TEXT, name_first TEXT, debut TEXT, name_last TEXT, bats TEXT, death_year NUMBER, death_city TEXT, name_given TEXT, death_month NUMBER, birth_month NUMBER, birth_year NUMBER, birth_city TEXT, height NUMBER, player_id TEXT, birth_day NUMBER, birth_country TEXT, birth_state TEXT, retro_id TEXT, throws TEXT, bbref_id TEXT, weight NUMBER, death_country TEXT, final_game TEXT, death_day NUMBER); CREATE TABLE all_star (player_id TEXT, game_id TEXT); CREATE TABLE fielding (player_id TEXT, zr NUMBER); CREATE TABLE batting_postseason (player_id TEXT); CREATE TABLE college (name_full TEXT, city TEXT, college_id TEXT); CREATE TABLE hall_of_fame (player_id TEXT); CREATE TABLE fielding_outfield (player_id TEXT); CREATE TABLE player_college (college_id TEXT, year NUMBER, player_id TEXT); CREATE TABLE team_franchise (franchise_id TEXT);"
      },
      {
        "question": "What is the player id of the heaviest player?",
        "query": "SELECT player_id FROM player ORDER BY weight DESC LIMIT 1",
        "schema": "CREATE TABLE college (college_id TEXT, city TEXT, name_full TEXT); CREATE TABLE fielding_postseason (player_id TEXT); CREATE TABLE player_college (player_id TEXT, year NUMBER, college_id TEXT); CREATE TABLE fielding (zr NUMBER, player_id TEXT); CREATE TABLE fielding_outfield (player_id TEXT); CREATE TABLE team_franchise (franchise_id TEXT); CREATE TABLE player (birth_state TEXT, death_country TEXT, birth_country TEXT, retro_id TEXT, weight NUMBER, bbref_id TEXT, birth_month NUMBER, birth_city TEXT, final_game TEXT, player_id TEXT, death_state TEXT, name_first TEXT, name_last TEXT, height NUMBER, birth_day NUMBER, death_month NUMBER, name_given TEXT, throws TEXT, bats TEXT, birth_year NUMBER, death_year NUMBER, debut TEXT, death_city TEXT, death_day NUMBER); CREATE TABLE all_star (game_id TEXT, player_id TEXT); CREATE TABLE hall_of_fame (player_id TEXT); CREATE TABLE batting_postseason (player_id TEXT);"
      }
    ],
    [
      {
        "question": "Show me the all student's names from the college named 'Yale University' | Do you mean the given names of all the students from the college named 'Yale University'? | Yes",
        "query": "SELECT t1.name_given FROM player AS t1 JOIN player_college AS t2 ON t1.player_id = t2.player_id JOIN college AS t3 ON t3.college_id = t2.college_id WHERE t3.name_full = 'Yale University'",
        "schema": "CREATE TABLE player (player_id TEXT, name_given TEXT); CREATE TABLE player_college (player_id TEXT, college_id TEXT); CREATE TABLE college (college_id TEXT, name_full TEXT);"
      },
      {
        "question": "Show me the height list of the student players from this university | Do you mean the height of the players from the college named 'Yale University'? | yes",
        "query": "SELECT t1.height FROM player AS t1 JOIN player_college AS t2 ON t1.player_id = t2.player_id JOIN college AS t3 ON t3.college_id = t2.college_id WHERE t3.name_full = 'Yale University'",
        "schema": "CREATE TABLE college (college_id TEXT, name_full TEXT); CREATE TABLE hall_of_fame (player_id TEXT); CREATE TABLE player (name_given TEXT, death_day NUMBER, birth_day NUMBER, name_first TEXT, height NUMBER, birth_country TEXT, death_state TEXT, death_year NUMBER, death_month NUMBER, throws TEXT, bats TEXT, bbref_id TEXT, birth_state TEXT, birth_city TEXT, death_city TEXT, weight NUMBER, death_country TEXT, debut TEXT, name_last TEXT, birth_month NUMBER, player_id TEXT, retro_id TEXT, final_game TEXT); CREATE TABLE player_college (year NUMBER, college_id TEXT, player_id TEXT);"
      },
      {
        "question": "Show me the average height of the student players from the college named 'Yale University'",
        "query": "SELECT AVG ( t1.height ) FROM player AS t1 JOIN player_college AS t2 ON t1.player_id = t2.player_id JOIN college AS t3 ON t3.college_id = t2.college_id WHERE t3.name_full = 'Yale University'",
        "schema": "CREATE TABLE player (weight NUMBER, birth_year NUMBER, retro_id TEXT, birth_month NUMBER, birth_day NUMBER, name_first TEXT, final_game TEXT, height NUMBER, death_month NUMBER, birth_country TEXT, death_state TEXT, birth_state TEXT, death_city TEXT, death_day NUMBER, death_year NUMBER, bbref_id TEXT, name_last TEXT, player_id TEXT, debut TEXT, name_given TEXT, birth_city TEXT, death_country TEXT, throws TEXT, bats TEXT); CREATE TABLE college (name_full TEXT, college_id TEXT); CREATE TABLE player_college (player_id TEXT, college_id TEXT, year NUMBER); CREATE TABLE hall_of_fame (player_id TEXT);"
      }
    ]
  ],
  "customers_card_transactions": [
    [
      {
        "question": "Can you list the customer names and ids who have credit cards?",
        "query": "SELECT t1.customer_id, t2.customer_first_name, t2.customer_last_name FROM customers_cards AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id WHERE t1.card_type_code = \"Credit\"",
        "schema": "CREATE TABLE Customers_Cards (card_type_code TEXT, card_id NUMBER, customer_id NUMBER, card_number TEXT); CREATE TABLE Customers (customer_last_name TEXT, customer_first_name TEXT, customer_id NUMBER); CREATE TABLE Accounts (account_name TEXT, customer_id NUMBER);"
      },
      {
        "question": "I want to know the customer names and how many credit cards they have?",
        "query": "SELECT t2.customer_first_name, t2.customer_last_name, COUNT ( * ) FROM customers_cards AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id WHERE t1.card_type_code = \"Credit\" GROUP BY t1.customer_id",
        "schema": "CREATE TABLE Accounts (customer_id NUMBER, account_name TEXT); CREATE TABLE Customers_Cards (card_number TEXT, customer_id NUMBER, card_type_code TEXT, card_id NUMBER); CREATE TABLE Customers (customer_last_name TEXT, customer_first_name TEXT, customer_id NUMBER);"
      },
      {
        "question": "How many credit cards does Blanche Huels have?",
        "query": "SELECT COUNT ( * ) FROM customers_cards AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id WHERE t2.customer_first_name = \"Blanche\" AND t2.customer_last_name = \"Huels\" AND t1.card_type_code = \"Credit\"",
        "schema": "CREATE TABLE Customers (customer_first_name TEXT, customer_id NUMBER, customer_last_name TEXT); CREATE TABLE Accounts (customer_id NUMBER, account_name TEXT); CREATE TABLE Customers_Cards (card_id NUMBER, card_type_code TEXT, card_number TEXT, customer_id NUMBER);"
      }
    ],
    [
      {
        "question": "How many customers have accounts?",
        "query": "SELECT COUNT ( * ) FROM accounts AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id",
        "schema": "CREATE TABLE Customers_Cards (customer_id NUMBER); CREATE TABLE Customers (customer_first_name TEXT, customer_id NUMBER, customer_last_name TEXT); CREATE TABLE Accounts (account_id NUMBER, account_name TEXT, customer_id NUMBER);"
      },
      {
        "question": "What is the customer first, last name and id with the most number of accounts?",
        "query": "SELECT t2.customer_first_name , t2.customer_last_name , t1.customer_id FROM accounts AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id GROUP BY t1.customer_id ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Customers_Cards (customer_id NUMBER); CREATE TABLE Accounts (account_id NUMBER, customer_id NUMBER, account_name TEXT); CREATE TABLE Customers (customer_first_name TEXT, customer_id NUMBER, customer_last_name TEXT);"
      },
      {
        "question": "What is the customer first, last name and id with the least number of accounts?",
        "query": "SELECT t2.customer_first_name , t2.customer_last_name , t1.customer_id FROM accounts AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id GROUP BY t1.customer_id ORDER BY COUNT ( * ) ASC LIMIT 1",
        "schema": "CREATE TABLE Accounts (account_name TEXT, account_id NUMBER, customer_id NUMBER); CREATE TABLE Customers (customer_last_name TEXT, customer_id NUMBER, customer_first_name TEXT); CREATE TABLE Customers_Cards (customer_id NUMBER);"
      }
    ],
    [
      {
        "question": "how many customers are presented on the table",
        "query": "SELECT COUNT ( * ) FROM customers",
        "schema": "CREATE TABLE Customers (customer_last_name TEXT, customer_first_name TEXT, customer_id NUMBER); CREATE TABLE Customers_Cards (customer_id NUMBER, card_id NUMBER, card_type_code TEXT); CREATE TABLE Accounts (customer_id NUMBER);"
      },
      {
        "question": "how many accounts on the table",
        "query": "SELECT COUNT ( * ) FROM accounts",
        "schema": "CREATE TABLE Accounts (account_id NUMBER, account_name TEXT, customer_id NUMBER); CREATE TABLE Customers (customer_id NUMBER, customer_last_name TEXT, customer_first_name TEXT); CREATE TABLE Customers_Cards (card_type_code TEXT, card_id NUMBER, customer_id NUMBER);"
      },
      {
        "question": "list out the customers first name",
        "query": "SELECT customer_first_name FROM customers",
        "schema": "CREATE TABLE Customers_Cards (customer_id NUMBER, card_id NUMBER, card_type_code TEXT); CREATE TABLE Accounts (customer_id NUMBER, account_id NUMBER, account_name TEXT); CREATE TABLE Customers (customer_last_name TEXT, customer_first_name TEXT, customer_id NUMBER);"
      },
      {
        "question": "what is the address of Aniyah | Did you mean to ask for the address of the customer with first name Aniyah? | exactly",
        "query": "SELECT customer_address FROM customers WHERE customer_first_name = \"Aniyah\"",
        "schema": "CREATE TABLE Customers (customer_id NUMBER, customer_last_name TEXT, customer_first_name TEXT, customer_address TEXT); CREATE TABLE Accounts (account_name TEXT, account_id NUMBER, customer_id NUMBER); CREATE TABLE Customers_Cards (card_type_code TEXT, card_id NUMBER, customer_id NUMBER);"
      }
    ],
    [
      {
        "question": "show the customer ids and first names without a credit card",
        "query": "SELECT customer_id , customer_first_name FROM customers EXCEPT SELECT t1.customer_id , t2.customer_first_name FROM customers_cards AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id WHERE card_type_code = \"Credit\"",
        "schema": "CREATE TABLE Customers (customer_first_name TEXT, customer_last_name TEXT, customer_id NUMBER); CREATE TABLE Customers_Cards (card_type_code TEXT, customer_id NUMBER, card_id NUMBER, card_number TEXT); CREATE TABLE Accounts (customer_id NUMBER, account_name TEXT);"
      },
      {
        "question": "show the customer ids, first name and last name without a Debit card",
        "query": "SELECT customer_id , customer_first_name ,customer_last_name FROM customers EXCEPT SELECT t1.customer_id , t2.customer_first_name,t2.customer_last_name FROM customers_cards AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id WHERE card_type_code = \"Debit\"",
        "schema": "CREATE TABLE Customers (customer_id NUMBER, customer_last_name TEXT, customer_first_name TEXT); CREATE TABLE Accounts (customer_id NUMBER, account_name TEXT); CREATE TABLE Customers_Cards (card_id NUMBER, card_number TEXT, card_type_code TEXT, customer_id NUMBER);"
      },
      {
        "question": "show the customer ids, first name and last name with card type and number | Do  you  mean card  type code? | show the customer ids and card number",
        "query": "SELECT customer_id , card_number FROM customers_cards",
        "schema": "CREATE TABLE Customers_Cards (card_number TEXT, customer_id NUMBER, card_type_code TEXT, card_id NUMBER); CREATE TABLE Accounts (account_name TEXT, customer_id NUMBER); CREATE TABLE Customers (customer_id NUMBER, customer_last_name TEXT, customer_first_name TEXT);"
      }
    ],
    [
      {
        "question": "how many customers cards there",
        "query": "SELECT COUNT ( * ) FROM customers_cards",
        "schema": "CREATE TABLE Accounts (customer_id NUMBER, account_id NUMBER); CREATE TABLE Customers (customer_address TEXT, customer_first_name TEXT, customer_id NUMBER, customer_last_name TEXT); CREATE TABLE Customers_Cards (card_type_code TEXT, customer_id NUMBER, card_id NUMBER, other_card_details TEXT, card_number TEXT); CREATE TABLE Financial_Transactions (card_id NUMBER);"
      },
      {
        "question": "how many credit cards there",
        "query": "SELECT COUNT ( * ) FROM customers_cards WHERE card_type_code = \"Credit\"",
        "schema": "CREATE TABLE Customers (customer_id NUMBER, customer_address TEXT, customer_first_name TEXT, customer_last_name TEXT); CREATE TABLE Financial_Transactions (card_id NUMBER); CREATE TABLE Customers_Cards (other_card_details TEXT, card_id NUMBER, card_number TEXT, customer_id NUMBER, card_type_code TEXT); CREATE TABLE Accounts (account_id NUMBER, customer_id NUMBER);"
      },
      {
        "question": "how many debit cards there",
        "query": "SELECT COUNT ( * ) FROM customers_cards WHERE card_type_code = \"Debit\"",
        "schema": "CREATE TABLE Accounts (customer_id NUMBER, account_id NUMBER); CREATE TABLE Customers (customer_first_name TEXT, customer_id NUMBER, customer_last_name TEXT, customer_address TEXT); CREATE TABLE Financial_Transactions (card_id NUMBER); CREATE TABLE Customers_Cards (card_type_code TEXT, other_card_details TEXT, card_number TEXT, card_id NUMBER, customer_id NUMBER);"
      }
    ],
    [
      {
        "question": "What are the first and last names of all customers who don't have an account?",
        "query": "SELECT customer_first_name , customer_last_name FROM customers EXCEPT SELECT t1.customer_first_name , t1.customer_last_name FROM customers AS t1 JOIN accounts AS t2 ON t1.customer_id = t2.customer_id",
        "schema": "CREATE TABLE Customers (customer_last_name TEXT, customer_first_name TEXT, customer_id NUMBER); CREATE TABLE Accounts (account_name TEXT, customer_id NUMBER, account_id NUMBER); CREATE TABLE Customers_Cards (customer_id NUMBER);"
      },
      {
        "question": "Can you list the addresses of all customers that have VIP as their other account details?",
        "query": "SELECT t1.customer_address FROM customers AS t1 JOIN accounts AS t2 ON t1.customer_id = t2.customer_id WHERE t2.other_account_details = 'VIP'",
        "schema": "CREATE TABLE Customers_Cards (customer_id NUMBER); CREATE TABLE Accounts (account_name TEXT, customer_id NUMBER, account_id NUMBER, other_account_details TEXT); CREATE TABLE Customers (customer_address TEXT, customer_last_name TEXT, other_customer_details TEXT, customer_first_name TEXT, customer_id NUMBER);"
      },
      {
        "question": "COuld you list the account names of all customers with the letter G or A in their first or last names?",
        "query": "SELECT t2.account_name FROM customers AS t1 JOIN accounts AS t2 ON t1.customer_id = t2.customer_id WHERE t1.customer_first_name like \"%G%\" OR t1.customer_first_name like \"%A%\" OR t1.customer_last_name like \"%G%\" OR t1.customer_last_name like \"%A%\"",
        "schema": "CREATE TABLE Customers (other_customer_details TEXT, customer_id NUMBER, customer_last_name TEXT, customer_address TEXT, customer_first_name TEXT); CREATE TABLE Customers_Cards (customer_id NUMBER); CREATE TABLE Accounts (account_name TEXT, other_account_details TEXT, customer_id NUMBER, account_id NUMBER);"
      }
    ],
    [
      {
        "question": "show the number of all customers without an account",
        "query": "SELECT COUNT ( * ) FROM customers WHERE customer_id NOT IN ( SELECT customer_id FROM accounts )",
        "schema": "CREATE TABLE Customers (customer_id NUMBER, other_customer_details TEXT, customer_last_name TEXT, customer_first_name TEXT); CREATE TABLE Customers_Cards (card_number TEXT, customer_id NUMBER); CREATE TABLE Accounts (account_id NUMBER, customer_id NUMBER, account_name TEXT);"
      },
      {
        "question": "can you show their name? | Do you want their first and last names? | first name",
        "query": "SELECT customer_first_name FROM customers WHERE customer_id NOT IN ( SELECT customer_id FROM accounts )",
        "schema": "CREATE TABLE Accounts (account_id NUMBER, account_name TEXT, customer_id NUMBER); CREATE TABLE Customers (customer_last_name TEXT, customer_id NUMBER, customer_first_name TEXT, other_customer_details TEXT); CREATE TABLE Customers_Cards (card_number TEXT, customer_id NUMBER);"
      },
      {
        "question": "what is Armani's customer address? | Do you mean the address of the customer with a first name Armani? | yes",
        "query": "SELECT customer_address FROM customers WHERE customer_first_name = \"Armani\"",
        "schema": "CREATE TABLE Accounts (account_name TEXT, customer_id NUMBER, account_id NUMBER); CREATE TABLE Customers (customer_last_name TEXT, other_customer_details TEXT, customer_address TEXT, customer_first_name TEXT, customer_id NUMBER); CREATE TABLE Customers_Cards (customer_id NUMBER, card_number TEXT);"
      }
    ],
    [
      {
        "question": "what is the name of customer id 1?",
        "query": "SELECT customer_first_name, customer_last_name FROM customers WHERE customer_id = 1",
        "schema": "CREATE TABLE Customers (customer_last_name TEXT, customer_id NUMBER, customer_first_name TEXT); CREATE TABLE Customers_Cards (card_id NUMBER, customer_id NUMBER); CREATE TABLE Accounts (account_name TEXT, customer_id NUMBER);"
      },
      {
        "question": "what type of card is used by customer id 6?",
        "query": "SELECT card_type_code FROM customers_cards WHERE customer_id = 6",
        "schema": "CREATE TABLE Customers (customer_last_name TEXT, customer_first_name TEXT, customer_id NUMBER); CREATE TABLE Customers_Cards (card_number TEXT, card_type_code TEXT, customer_id NUMBER, card_id NUMBER); CREATE TABLE Accounts (account_name TEXT, customer_id NUMBER);"
      },
      {
        "question": "what  is the  address of customer id 2?",
        "query": "SELECT customer_address FROM customers WHERE customer_id = 2",
        "schema": "CREATE TABLE Customers (customer_last_name TEXT, customer_id NUMBER, customer_address TEXT, customer_first_name TEXT); CREATE TABLE Customers_Cards (card_type_code TEXT, card_id NUMBER, card_number TEXT, customer_id NUMBER); CREATE TABLE Accounts (customer_id NUMBER, account_name TEXT);"
      },
      {
        "question": "Show id,first and last names for all customers with at least two cards?",
        "query": "SELECT t1.customer_id , t2.customer_first_name , t2.customer_last_name FROM customers_cards AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id GROUP BY t1.customer_id HAVING COUNT ( * ) > = 2",
        "schema": "CREATE TABLE Customers (customer_address TEXT, customer_last_name TEXT, customer_id NUMBER, customer_first_name TEXT); CREATE TABLE Accounts (account_name TEXT, customer_id NUMBER); CREATE TABLE Customers_Cards (card_id NUMBER, card_number TEXT, customer_id NUMBER, card_type_code TEXT);"
      }
    ],
    [
      {
        "question": "What is the card type with the most number of cards?",
        "query": "SELECT card_type_code FROM customers_cards GROUP BY card_type_code ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Financial_Transactions (transaction_type TEXT); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Customers_Cards (card_number TEXT, card_id NUMBER, card_type_code TEXT, customer_id NUMBER);"
      },
      {
        "question": "And the one with the least number of cards?",
        "query": "SELECT card_type_code FROM customers_cards GROUP BY card_type_code ORDER BY COUNT ( * ) LIMIT 1",
        "schema": "CREATE TABLE Customers_Cards (card_number TEXT, card_type_code TEXT, customer_id NUMBER, card_id NUMBER); CREATE TABLE Customers (customer_last_name TEXT, customer_id NUMBER); CREATE TABLE Financial_Transactions (transaction_type TEXT);"
      },
      {
        "question": "How many cards are credit cards?",
        "query": "SELECT COUNT ( * ) FROM customers_cards WHERE card_type_code = \"Credit\"",
        "schema": "CREATE TABLE Customers (customer_id NUMBER, customer_last_name TEXT); CREATE TABLE Customers_Cards (card_id NUMBER, customer_id NUMBER, card_number TEXT, card_type_code TEXT); CREATE TABLE Financial_Transactions (transaction_type TEXT);"
      },
      {
        "question": "How many customers have credit cards?",
        "query": "SELECT COUNT ( * ) FROM customers_cards WHERE card_type_code = \"Credit\"",
        "schema": "CREATE TABLE Customers_Cards (card_id NUMBER, card_type_code TEXT, customer_id NUMBER, card_number TEXT); CREATE TABLE Financial_Transactions (transaction_type TEXT); CREATE TABLE Customers (customer_last_name TEXT, customer_id NUMBER);"
      }
    ],
    [
      {
        "question": "Okay.  Sorry about that.  Can you please list all of the customer IDs for which the customer has more than one card?",
        "query": "SELECT customer_id FROM customers_cards GROUP BY customer_id HAVING COUNT ( * ) >1",
        "schema": "CREATE TABLE Customers (customer_id NUMBER, customer_first_name TEXT, customer_phone TEXT, customer_last_name TEXT); CREATE TABLE Customers_Cards (card_id NUMBER, card_type_code TEXT, customer_id NUMBER, card_number TEXT); CREATE TABLE Accounts (customer_id NUMBER);"
      },
      {
        "question": "Can you please update that list to show the total number of cards that each of these customers has?",
        "query": "SELECT customer_id, COUNT ( * ) FROM customers_cards GROUP BY customer_id HAVING COUNT ( * ) >1",
        "schema": "CREATE TABLE Customers_Cards (card_number TEXT, card_id NUMBER, customer_id NUMBER, card_type_code TEXT); CREATE TABLE Customers (customer_first_name TEXT, customer_phone TEXT, customer_id NUMBER, customer_last_name TEXT); CREATE TABLE Accounts (customer_id NUMBER);"
      }
    ],
    [
      {
        "question": "Could you please list the first and last names of all the customers that have at least two cards?",
        "query": "SELECT t2.customer_first_name , t2.customer_last_name FROM customers_cards AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id GROUP BY t1.customer_id HAVING COUNT ( * ) > = 2",
        "schema": "CREATE TABLE Accounts (account_name TEXT, customer_id NUMBER); CREATE TABLE Customers_Cards (card_id NUMBER, card_number TEXT, card_type_code TEXT, customer_id NUMBER); CREATE TABLE Customers (customer_id NUMBER, customer_last_name TEXT, customer_first_name TEXT);"
      },
      {
        "question": "Please add their IDs into the table?",
        "query": "SELECT t1.customer_id , t2.customer_first_name , t2.customer_last_name FROM customers_cards AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id GROUP BY t1.customer_id HAVING COUNT ( * ) > = 2",
        "schema": "CREATE TABLE Accounts (account_name TEXT, customer_id NUMBER); CREATE TABLE Customers_Cards (card_type_code TEXT, card_number TEXT, customer_id NUMBER, card_id NUMBER); CREATE TABLE Customers (customer_first_name TEXT, customer_id NUMBER, customer_last_name TEXT);"
      },
      {
        "question": "What are the addresses of all the customers with credit cards?",
        "query": "SELECT t2.customer_address FROM customers_cards AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id WHERE t1.card_type_code = \"Credit\"",
        "schema": "CREATE TABLE Accounts (customer_id NUMBER, account_name TEXT); CREATE TABLE Customers_Cards (card_type_code TEXT, card_id NUMBER, customer_id NUMBER, card_number TEXT); CREATE TABLE Customers (customer_last_name TEXT, customer_address TEXT, customer_first_name TEXT, customer_id NUMBER);"
      },
      {
        "question": "What is the email of the customer that has the credit card with the earliest date valid from?",
        "query": "SELECT t2.customer_email FROM customers_cards AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id WHERE t1.date_valid_from = ( SELECT MIN ( date_valid_from ) FROM customers_cards )",
        "schema": "CREATE TABLE Customers (customer_email TEXT, customer_last_name TEXT, customer_address TEXT, customer_id NUMBER, customer_first_name TEXT); CREATE TABLE Accounts (customer_id NUMBER, account_name TEXT); CREATE TABLE Customers_Cards (card_type_code TEXT, card_id NUMBER, date_valid_from TIME, date_valid_to TIME, customer_id NUMBER, card_number TEXT);"
      }
    ],
    [
      {
        "question": "What is the average transaction amount?",
        "query": "SELECT AVG ( transaction_amount ) FROM financial_transactions",
        "schema": "CREATE TABLE Financial_Transactions (transaction_id NUMBER, transaction_amount NUMBER, transaction_type TEXT); CREATE TABLE Customers (customer_id NUMBER);"
      },
      {
        "question": "What is the total transaction amount?",
        "query": "SELECT SUM ( transaction_amount ) FROM financial_transactions",
        "schema": "CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Financial_Transactions (transaction_id NUMBER, transaction_type TEXT, transaction_amount NUMBER);"
      }
    ],
    [
      {
        "question": "Show card types with at least 5 cards?",
        "query": "SELECT card_type_code FROM customers_cards GROUP BY card_type_code HAVING COUNT ( * ) > = 5",
        "schema": "CREATE TABLE Financial_Transactions (card_id NUMBER, transaction_type TEXT); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Customers_Cards (card_number TEXT, card_type_code TEXT, customer_id NUMBER, card_id NUMBER);"
      },
      {
        "question": "What are their ids? | Do you mean card ids for all cards? | yes",
        "query": "SELECT card_id FROM customers_cards",
        "schema": "CREATE TABLE Financial_Transactions (transaction_type TEXT, card_id NUMBER); CREATE TABLE Customers_Cards (card_type_code TEXT, card_number TEXT, customer_id NUMBER, card_id NUMBER); CREATE TABLE Accounts (customer_id NUMBER); CREATE TABLE Customers (customer_id NUMBER);"
      },
      {
        "question": "What card type did customer number 14 use?",
        "query": "SELECT card_type_code FROM customers_cards WHERE customer_id = 14",
        "schema": "CREATE TABLE Customers_Cards (card_number TEXT, customer_id NUMBER, card_type_code TEXT, card_id NUMBER); CREATE TABLE Accounts (customer_id NUMBER); CREATE TABLE Financial_Transactions (card_id NUMBER, transaction_type TEXT); CREATE TABLE Customers (customer_id NUMBER, customer_first_name TEXT, customer_last_name TEXT);"
      },
      {
        "question": "How about customer number 6?",
        "query": "SELECT card_type_code FROM customers_cards WHERE customer_id = 6",
        "schema": "CREATE TABLE Customers_Cards (card_number TEXT, card_id NUMBER, customer_id NUMBER, card_type_code TEXT); CREATE TABLE Financial_Transactions (card_id NUMBER, transaction_type TEXT); CREATE TABLE Customers (customer_last_name TEXT, customer_first_name TEXT, customer_id NUMBER); CREATE TABLE Accounts (customer_id NUMBER);"
      }
    ],
    [
      {
        "question": "how many on the customers cards table | Do  you  mean  the amount of customer cards? | yes exactly",
        "query": "SELECT COUNT ( * ) FROM customers_cards",
        "schema": "CREATE TABLE Customers (customer_id NUMBER, customer_last_name TEXT); CREATE TABLE Accounts (customer_id NUMBER); CREATE TABLE Customers_Cards (card_id NUMBER, card_number TEXT, customer_id NUMBER, card_type_code TEXT);"
      },
      {
        "question": "what is the 4560596484842 of customer id | The customer_id is 14 | what is the customer id with most number of cards, and how many does he have?",
        "query": "SELECT customer_id , COUNT ( * ) FROM customers_cards GROUP BY customer_id ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Accounts (customer_id NUMBER); CREATE TABLE Customers_Cards (card_id NUMBER, card_type_code TEXT, card_number TEXT, customer_id NUMBER); CREATE TABLE Customers (customer_id NUMBER, customer_last_name TEXT, customer_first_name TEXT);"
      }
    ],
    [
      {
        "question": "how many customers are presented on the table",
        "query": "SELECT COUNT ( * ) FROM customers",
        "schema": "CREATE TABLE Customers (customer_last_name TEXT, customer_first_name TEXT, customer_id NUMBER); CREATE TABLE Customers_Cards (customer_id NUMBER, card_type_code TEXT, card_id NUMBER); CREATE TABLE Accounts (customer_id NUMBER);"
      },
      {
        "question": "list out the customers first name",
        "query": "SELECT customer_first_name FROM customers",
        "schema": "CREATE TABLE Accounts (account_name TEXT, customer_id NUMBER); CREATE TABLE Customers (customer_last_name TEXT, customer_first_name TEXT, customer_id NUMBER); CREATE TABLE Customers_Cards (card_id NUMBER, customer_id NUMBER, card_type_code TEXT);"
      },
      {
        "question": "what is the card number of Aniyah | Do you mean the customer with first name Aniyah | exactly",
        "query": "SELECT t2.card_number FROM customers AS t1 JOIN customers_cards AS t2 ON t1.customer_id = t2.customer_id WHERE customer_first_name = \"Aniyah\"",
        "schema": "CREATE TABLE Customers (customer_id NUMBER, customer_address TEXT, customer_last_name TEXT, customer_first_name TEXT); CREATE TABLE Accounts (account_name TEXT, customer_id NUMBER); CREATE TABLE Customers_Cards (card_id NUMBER, customer_id NUMBER, card_number TEXT, card_type_code TEXT);"
      }
    ],
    [
      {
        "question": "What is his customer id?",
        "query": "SELECT customer_id FROM customers WHERE customer_first_name = \"Art\" AND customer_last_name = \"Turcotte\"",
        "schema": "CREATE TABLE Accounts (account_name TEXT, account_id NUMBER, customer_id NUMBER); CREATE TABLE Customers_Cards (card_id NUMBER, customer_id NUMBER); CREATE TABLE Customers (customer_id NUMBER, customer_first_name TEXT, customer_last_name TEXT);"
      }
    ]
  ],
  "game_1": [
    [
      {
        "question": "Tell me the Gtype of the GameID 1 ?",
        "query": "SELECT gtype FROM video_games WHERE gameid = 1",
        "schema": "CREATE TABLE Video_Games (GameID NUMBER, GName TEXT, GType TEXT); CREATE TABLE Student (StuID NUMBER); CREATE TABLE Plays_Games (GameID NUMBER, StuID NUMBER);"
      },
      {
        "question": "What is the GameID of the GName RNG Stone ?",
        "query": "SELECT gtype FROM video_games WHERE gameid = 1",
        "schema": "CREATE TABLE Plays_Games (GameID NUMBER, StuID NUMBER); CREATE TABLE Video_Games (GName TEXT, GType TEXT, GameID NUMBER); CREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT);"
      },
      {
        "question": "Tell me the GName of the GType Role-playing game ?",
        "query": "SELECT gname FROM video_games WHERE gtype = \"Role-playing game\"",
        "schema": "CREATE TABLE Video_Games (GType TEXT, GameID NUMBER, GName TEXT); CREATE TABLE Student (Fname TEXT, LName TEXT, StuID NUMBER); CREATE TABLE Plays_Games (GameID NUMBER, StuID NUMBER);"
      },
      {
        "question": "Which game type has most number of games ?",
        "query": "SELECT gtype FROM video_games GROUP BY gtype ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Plays_Games (StuID NUMBER, GameID NUMBER); CREATE TABLE Video_Games (GName TEXT, GameID NUMBER, GType TEXT); CREATE TABLE Student (LName TEXT, StuID NUMBER, Fname TEXT);"
      }
    ],
    [
      {
        "question": "How many students are playing multiple sports?",
        "query": "SELECT COUNT ( * ) FROM ( SELECT * FROM sportsinfo GROUP BY stuid HAVING COUNT ( * ) > 1 )",
        "schema": "CREATE TABLE Student (Age NUMBER, StuID NUMBER, LName TEXT, Sex TEXT, Fname TEXT); CREATE TABLE SportsInfo (StuID NUMBER, GamesPlayed NUMBER, SportName TEXT);"
      },
      {
        "question": "What are the names of the two students who are playing multiple sports?",
        "query": "SELECT t2.fname , t2.lname FROM sportsinfo AS t1 JOIN student AS t2 ON t1.stuid = t2.stuid GROUP BY t1.stuid HAVING COUNT ( * ) >1",
        "schema": "CREATE TABLE SportsInfo (SportName TEXT, StuID NUMBER, GamesPlayed NUMBER); CREATE TABLE Student (Fname TEXT, LName TEXT, Sex TEXT, Age NUMBER, StuID NUMBER);"
      }
    ],
    [
      {
        "question": "can you please show me all the advisors?",
        "query": "SELECT advisor FROM student",
        "schema": "CREATE TABLE Plays_Games (StuID NUMBER); CREATE TABLE Video_Games (GName TEXT, GameID NUMBER); CREATE TABLE SportsInfo (StuID NUMBER); CREATE TABLE Student (Advisor NUMBER, StuID NUMBER, LName TEXT);"
      },
      {
        "question": "show me all advisors who does not have at least two students?",
        "query": "SELECT advisor FROM student GROUP BY advisor HAVING COUNT ( * ) < 2",
        "schema": "CREATE TABLE Plays_Games (StuID NUMBER); CREATE TABLE Student (LName TEXT, StuID NUMBER, Advisor NUMBER); CREATE TABLE Video_Games (GName TEXT, GameID NUMBER); CREATE TABLE SportsInfo (StuID NUMBER);"
      },
      {
        "question": "which advisors have at least two students?",
        "query": "SELECT advisor FROM student GROUP BY advisor HAVING COUNT ( * ) > = 2",
        "schema": "CREATE TABLE Video_Games (GName TEXT, GameID NUMBER); CREATE TABLE Student (StuID NUMBER, Advisor NUMBER, LName TEXT); CREATE TABLE Plays_Games (StuID NUMBER); CREATE TABLE SportsInfo (StuID NUMBER);"
      }
    ],
    [
      {
        "question": "How many hours per week did David Shieber play? | Do you mean the total hours per week did David Shieber play? (He can play different sports) | Yes, total hours",
        "query": "SELECT SUM ( hoursperweek ) FROM sportsinfo AS t1 JOIN student AS t2 ON t1.stuid = t2.stuid WHERE t2.fname = \"David\" AND t2.lname = \"Shieber\"",
        "schema": "CREATE TABLE Student (Fname TEXT, StuID NUMBER, LName TEXT); CREATE TABLE SportsInfo (GamesPlayed NUMBER, StuID NUMBER, HoursPerWeek NUMBER, SportName TEXT); CREATE TABLE Plays_Games (Hours_Played NUMBER, StuID NUMBER);"
      },
      {
        "question": "What are the total number of games he played?",
        "query": "SELECT SUM ( gamesplayed ) FROM sportsinfo AS t1 JOIN student AS t2 ON t1.stuid = t2.stuid WHERE t2.fname = \"David\" AND t2.lname = \"Shieber\"",
        "schema": "CREATE TABLE SportsInfo (HoursPerWeek NUMBER, SportName TEXT, StuID NUMBER, GamesPlayed NUMBER); CREATE TABLE Student (Fname TEXT, LName TEXT, StuID NUMBER); CREATE TABLE Plays_Games (StuID NUMBER, Hours_Played NUMBER);"
      },
      {
        "question": "What are the first and last names of the student who played the most total hours per week?",
        "query": "SELECT fname, lname FROM student WHERE stuid = ( SELECT stuid FROM sportsinfo GROUP BY stuid ORDER BY SUM ( hoursperweek ) DESC LIMIT 1 )",
        "schema": "CREATE TABLE Plays_Games (StuID NUMBER, Hours_Played NUMBER); CREATE TABLE SportsInfo (SportName TEXT, StuID NUMBER, HoursPerWeek NUMBER, GamesPlayed NUMBER); CREATE TABLE Student (Fname TEXT, LName TEXT, StuID NUMBER);"
      },
      {
        "question": "How many total games did she play?",
        "query": "SELECT SUM ( gamesplayed ) FROM sportsinfo GROUP BY stuid ORDER BY SUM ( hoursperweek ) DESC LIMIT 1",
        "schema": "CREATE TABLE Plays_Games (StuID NUMBER, Hours_Played NUMBER); CREATE TABLE SportsInfo (StuID NUMBER, HoursPerWeek NUMBER, SportName TEXT, GamesPlayed NUMBER); CREATE TABLE Student (LName TEXT, Fname TEXT, StuID NUMBER);"
      }
    ],
    [
      {
        "question": "What are the names of all games that were played for at least 1000 hours?",
        "query": "SELECT gname FROM plays_games AS t1 JOIN video_games AS t2 ON t1.gameid = t2.gameid GROUP BY t1.gameid HAVING SUM ( hours_played ) > = 1000",
        "schema": "CREATE TABLE Video_Games (GType TEXT, GName TEXT, GameID NUMBER); CREATE TABLE Plays_Games (GameID NUMBER, StuID NUMBER, Hours_Played NUMBER); CREATE TABLE SportsInfo (GamesPlayed NUMBER); CREATE TABLE Student (StuID NUMBER);"
      },
      {
        "question": "What are the names of all games that were played for less than 1000 hours?",
        "query": "SELECT gname FROM plays_games AS t1 JOIN video_games AS t2 ON t1.gameid = t2.gameid GROUP BY t1.gameid HAVING SUM ( hours_played ) < 1000",
        "schema": "CREATE TABLE Video_Games (GameID NUMBER, GType TEXT, GName TEXT); CREATE TABLE Student (StuID NUMBER); CREATE TABLE Plays_Games (GameID NUMBER, StuID NUMBER, Hours_Played NUMBER); CREATE TABLE SportsInfo (GamesPlayed NUMBER);"
      },
      {
        "question": "What are the average hours played for each game type?",
        "query": "SELECT t2.gtype, AVG ( t1.hours_played ) FROM plays_games AS t1 JOIN video_games AS t2 ON t1.gameid = t2.gameid GROUP BY t2.gtype",
        "schema": "CREATE TABLE Plays_Games (Hours_Played NUMBER, GameID NUMBER, StuID NUMBER); CREATE TABLE Student (StuID NUMBER); CREATE TABLE SportsInfo (GamesPlayed NUMBER); CREATE TABLE Video_Games (GameID NUMBER, GName TEXT, GType TEXT);"
      }
    ],
    [
      {
        "question": "Can you show me the student names with ids?",
        "query": "SELECT stuid, lname, fname FROM student",
        "schema": "CREATE TABLE Video_Games (GName TEXT); CREATE TABLE Student (Fname TEXT, StuID NUMBER, LName TEXT); CREATE TABLE SportsInfo (StuID NUMBER);"
      },
      {
        "question": "Hmm, can you list the student ids with sports played?",
        "query": "SELECT stuid ,sportname FROM sportsinfo",
        "schema": "CREATE TABLE SportsInfo (SportName TEXT, StuID NUMBER); CREATE TABLE Student (LName TEXT, StuID NUMBER, Fname TEXT); CREATE TABLE Video_Games (GName TEXT);"
      },
      {
        "question": "I want to know the student names and ids who don\u2019t play any sports.",
        "query": "SELECT stuid,lname,fname FROM student WHERE stuid NOT IN ( SELECT stuid FROM sportsinfo )",
        "schema": "CREATE TABLE SportsInfo (SportName TEXT, StuID NUMBER); CREATE TABLE Student (Fname TEXT, LName TEXT, StuID NUMBER); CREATE TABLE Video_Games (GName TEXT);"
      }
    ],
    [
      {
        "question": "How many hours of role-playing games were played?",
        "query": "SELECT SUM ( hours_played ) FROM plays_games AS t1 JOIN video_games WHERE gtype = \"Role-playing game\"",
        "schema": "CREATE TABLE Plays_Games (GameID NUMBER, StuID NUMBER, Hours_Played NUMBER); CREATE TABLE Student (StuID NUMBER); CREATE TABLE Video_Games (GName TEXT, GType TEXT, GameID NUMBER); CREATE TABLE SportsInfo (GamesPlayed NUMBER);"
      },
      {
        "question": "What game had the most hours played?",
        "query": "SELECT gname FROM plays_games AS t1 JOIN video_games AS t2 ON t1.gameid = t2.gameid GROUP BY t1.gameid ORDER BY SUM ( hours_played ) DESC LIMIT 1",
        "schema": "CREATE TABLE Student (StuID NUMBER); CREATE TABLE SportsInfo (GamesPlayed NUMBER); CREATE TABLE Video_Games (GameID NUMBER, GType TEXT, GName TEXT); CREATE TABLE Plays_Games (GameID NUMBER, StuID NUMBER, Hours_Played NUMBER);"
      },
      {
        "question": "Who played the most hours of Works of Widenius?",
        "query": "SELECT stuid FROM plays_games AS t1 JOIN video_games AS t2 ON t1.gameid = t2.gameid WHERE t2.gname = \"Works of Widenius\" ORDER BY hours_played DESC LIMIT 1",
        "schema": "CREATE TABLE SportsInfo (GamesPlayed NUMBER); CREATE TABLE Video_Games (GameID NUMBER, GType TEXT, GName TEXT); CREATE TABLE Student (LName TEXT, Fname TEXT, StuID NUMBER); CREATE TABLE Plays_Games (GameID NUMBER, Hours_Played NUMBER, StuID NUMBER);"
      },
      {
        "question": "How many students play Works of Widenius?",
        "query": "SELECT COUNT ( DISTINCT t1.stuid ) FROM plays_games AS t1 JOIN video_games AS t2 ON t1.gameid = t2.gameid WHERE t2.gname = \"Works of Widenius\"",
        "schema": "CREATE TABLE Video_Games (GameID NUMBER, GName TEXT, GType TEXT); CREATE TABLE Student (StuID NUMBER, Fname TEXT, city_code TEXT, LName TEXT); CREATE TABLE SportsInfo (GamesPlayed NUMBER); CREATE TABLE Plays_Games (GameID NUMBER, Hours_Played NUMBER, StuID NUMBER);"
      },
      {
        "question": "What game type is Works of Widenius?",
        "query": "SELECT gtype FROM video_games WHERE gname = \"Works of Widenius\"",
        "schema": "CREATE TABLE SportsInfo (GamesPlayed NUMBER); CREATE TABLE Video_Games (GameID NUMBER, GName TEXT, GType TEXT); CREATE TABLE Student (city_code TEXT, LName TEXT, Fname TEXT, StuID NUMBER); CREATE TABLE Plays_Games (GameID NUMBER, Hours_Played NUMBER, StuID NUMBER);"
      }
    ],
    [
      {
        "question": "What are the number of games played for students under the age of 20?",
        "query": "SELECT SUM ( gamesplayed ) FROM sportsinfo AS t1 JOIN student AS t2 ON t1.stuid = t2.stuid WHERE t2.age < 20",
        "schema": "CREATE TABLE Plays_Games (Hours_Played NUMBER, StuID NUMBER); CREATE TABLE SportsInfo (StuID NUMBER, GamesPlayed NUMBER); CREATE TABLE Student (Age NUMBER, Sex TEXT, StuID NUMBER);"
      },
      {
        "question": "What are the total hours per week students under the age of 20 played games?",
        "query": "SELECT SUM ( hoursperweek ) FROM sportsinfo AS t1 JOIN student AS t2 ON t1.stuid = t2.stuid WHERE t2.age < 20",
        "schema": "CREATE TABLE Plays_Games (Hours_Played NUMBER, StuID NUMBER); CREATE TABLE SportsInfo (GamesPlayed NUMBER, StuID NUMBER, HoursPerWeek NUMBER); CREATE TABLE Student (Sex TEXT, Age NUMBER, StuID NUMBER);"
      },
      {
        "question": "What is the most common sport name those students played?",
        "query": "SELECT sportname,COUNT ( * ) FROM sportsinfo WHERE stuid IN ( SELECT stuid FROM student WHERE age < 20 ) GROUP BY sportname ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Student (StuID NUMBER, Age NUMBER, Sex TEXT); CREATE TABLE Plays_Games (Hours_Played NUMBER, StuID NUMBER); CREATE TABLE SportsInfo (StuID NUMBER, GamesPlayed NUMBER, HoursPerWeek NUMBER, SportName TEXT);"
      }
    ],
    [
      {
        "question": "list all the game type",
        "query": "SELECT gtype FROM video_games",
        "schema": "CREATE TABLE Plays_Games (GameID NUMBER); CREATE TABLE Student (StuID NUMBER); CREATE TABLE Video_Games (GType TEXT, GameID NUMBER, GName TEXT);"
      },
      {
        "question": "list the name of a shooting game. | Do you mean \"First-person shooter\" games? | yes i mean \"first-person shooter\" game?",
        "query": "SELECT gname FROM video_games WHERE gtype = \"Frist-person shooter\"",
        "schema": "CREATE TABLE Video_Games (GameID NUMBER, GName TEXT, GType TEXT); CREATE TABLE Plays_Games (GameID NUMBER); CREATE TABLE Student (StuID NUMBER);"
      },
      {
        "question": "which game type has least number of games?",
        "query": "SELECT gtype FROM video_games GROUP BY gtype ORDER BY COUNT ( * ) ASC LIMIT 1",
        "schema": "CREATE TABLE Video_Games (GType TEXT, GameID NUMBER, GName TEXT); CREATE TABLE Plays_Games (GameID NUMBER); CREATE TABLE Student (StuID NUMBER);"
      },
      {
        "question": "Which game type has most number of games?",
        "query": "SELECT gtype FROM video_games GROUP BY gtype ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Video_Games (GType TEXT, GameID NUMBER, GName TEXT); CREATE TABLE Student (StuID NUMBER); CREATE TABLE Plays_Games (GameID NUMBER);"
      }
    ],
    [
      {
        "question": "show student ids who are female and play football",
        "query": "SELECT stuid FROM student WHERE sex = 'F' INTERSECT SELECT stuid FROM sportsinfo WHERE sportname = \"Football\"",
        "schema": "CREATE TABLE Student (StuID NUMBER, Sex TEXT); CREATE TABLE SportsInfo (SportName TEXT, StuID NUMBER);"
      },
      {
        "question": "what is the name of the student with the id 1002 | Would you like first name and last name of the student with student id 1002? | yes",
        "query": "SELECT fname, lname FROM student WHERE stuid = 1002",
        "schema": "CREATE TABLE SportsInfo (SportName TEXT, StuID NUMBER); CREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Sex TEXT);"
      },
      {
        "question": "what is the first name and last name of the student with the student id 1003",
        "query": "SELECT fname, lname FROM student WHERE stuid = 1003",
        "schema": "CREATE TABLE SportsInfo (SportName TEXT, StuID NUMBER); CREATE TABLE Student (LName TEXT, StuID NUMBER, Fname TEXT, Sex TEXT);"
      }
    ],
    [
      {
        "question": "Show the game name that has most number of hours played.",
        "query": "SELECT gname FROM plays_games AS t1 JOIN video_games AS t2 ON t1.gameid = t2.gameid GROUP BY t1.gameid ORDER BY SUM ( hours_played ) DESC LIMIT 1",
        "schema": "CREATE TABLE Student (StuID NUMBER); CREATE TABLE Plays_Games (StuID NUMBER, Hours_Played NUMBER, GameID NUMBER); CREATE TABLE Video_Games (GType TEXT, GName TEXT, GameID NUMBER);"
      },
      {
        "question": "Show the game that least number of hours played.",
        "query": "SELECT gname FROM plays_games AS t1 JOIN video_games AS t2 ON t1.gameid = t2.gameid GROUP BY t1.gameid ORDER BY SUM ( hours_played ) ASC LIMIT 1",
        "schema": "CREATE TABLE Video_Games (GameID NUMBER, GType TEXT, GName TEXT); CREATE TABLE Student (StuID NUMBER); CREATE TABLE Plays_Games (GameID NUMBER, StuID NUMBER, Hours_Played NUMBER);"
      },
      {
        "question": "how many student played the game? | Would you like to know how many entries in the plays games table correspond to The Vanishing of Eric Calder? | yes",
        "query": "SELECT COUNT ( * ) FROM plays_games AS t1 JOIN video_games AS t2 ON t1.gameid = t2.gameid WHERE gname = 'The Vanishing of Eric Calder'",
        "schema": "CREATE TABLE Student (StuID NUMBER, Fname TEXT, LName TEXT); CREATE TABLE Plays_Games (Hours_Played NUMBER, StuID NUMBER, GameID NUMBER); CREATE TABLE Video_Games (GType TEXT, GameID NUMBER, GName TEXT);"
      }
    ],
    [
      {
        "question": "Please show me the ids of the students who play video games and play sports?",
        "query": "SELECT stuid FROM sportsinfo INTERSECT SELECT stuid FROM plays_games",
        "schema": "CREATE TABLE Video_Games (GName TEXT, GameID NUMBER, GType TEXT); CREATE TABLE Student (Major NUMBER, StuID NUMBER, LName TEXT); CREATE TABLE SportsInfo (SportName TEXT, GamesPlayed NUMBER, StuID NUMBER); CREATE TABLE Plays_Games (GameID NUMBER, StuID NUMBER);"
      }
    ],
    [
      {
        "question": "How many students are on scholarship?",
        "query": "SELECT COUNT ( * ) FROM sportsinfo AS t1 JOIN student AS t2 ON t1.stuid = t2.stuid WHERE t1.onscholarship = 'Y'",
        "schema": "CREATE TABLE Plays_Games (StuID NUMBER); CREATE TABLE SportsInfo (StuID NUMBER, OnScholarship TEXT, SportName TEXT); CREATE TABLE Student (StuID NUMBER, LName TEXT);"
      },
      {
        "question": "What are the last names for those students?",
        "query": "SELECT t2.lname FROM sportsinfo AS t1 JOIN student AS t2 ON t1.stuid = t2.stuid WHERE t1.onscholarship = 'Y'",
        "schema": "CREATE TABLE SportsInfo (SportName TEXT, OnScholarship TEXT, StuID NUMBER); CREATE TABLE Plays_Games (StuID NUMBER); CREATE TABLE Student (LName TEXT, StuID NUMBER, Fname TEXT);"
      },
      {
        "question": "What are their first names?",
        "query": "SELECT t2.fname FROM sportsinfo AS t1 JOIN student AS t2 ON t1.stuid = t2.stuid WHERE t1.onscholarship = 'Y'",
        "schema": "CREATE TABLE Plays_Games (StuID NUMBER); CREATE TABLE Student (StuID NUMBER, Fname TEXT, LName TEXT); CREATE TABLE SportsInfo (StuID NUMBER, SportName TEXT, OnScholarship TEXT);"
      },
      {
        "question": "What are their majors?",
        "query": "SELECT t2.major FROM sportsinfo AS t1 JOIN student AS t2 ON t1.stuid = t2.stuid WHERE t1.onscholarship = 'Y'",
        "schema": "CREATE TABLE Student (LName TEXT, Fname TEXT, StuID NUMBER, Major NUMBER); CREATE TABLE SportsInfo (StuID NUMBER, SportName TEXT, OnScholarship TEXT); CREATE TABLE Plays_Games (StuID NUMBER);"
      },
      {
        "question": "What sport name do they play?",
        "query": "SELECT t1.sportname FROM sportsinfo AS t1 JOIN student AS t2 ON t1.stuid = t2.stuid WHERE t1.onscholarship = 'Y'",
        "schema": "CREATE TABLE SportsInfo (StuID NUMBER, SportName TEXT, OnScholarship TEXT); CREATE TABLE Plays_Games (StuID NUMBER); CREATE TABLE Student (Fname TEXT, LName TEXT, Major NUMBER, StuID NUMBER);"
      }
    ],
    [
      {
        "question": "list number of games played by students",
        "query": "SELECT SUM ( gamesplayed ) FROM sportsinfo",
        "schema": "CREATE TABLE Student (StuID NUMBER); CREATE TABLE Plays_Games (GameID NUMBER, Hours_Played NUMBER, StuID NUMBER); CREATE TABLE SportsInfo (GamesPlayed NUMBER, StuID NUMBER);"
      },
      {
        "question": "how many of those are played by students on scholarship?",
        "query": "SELECT SUM ( gamesplayed ) FROM sportsinfo WHERE onscholarship = 'Y'",
        "schema": "CREATE TABLE SportsInfo (SportName TEXT, OnScholarship TEXT, GamesPlayed NUMBER, StuID NUMBER); CREATE TABLE Student (StuID NUMBER); CREATE TABLE Plays_Games (StuID NUMBER, GameID NUMBER, Hours_Played NUMBER);"
      },
      {
        "question": "list all the names of the sports available",
        "query": "SELECT DISTINCT sportname FROM sportsinfo",
        "schema": "CREATE TABLE Student (StuID NUMBER); CREATE TABLE Plays_Games (Hours_Played NUMBER, GameID NUMBER, StuID NUMBER); CREATE TABLE SportsInfo (StuID NUMBER, GamesPlayed NUMBER, OnScholarship TEXT, SportName TEXT);"
      }
    ],
    [
      {
        "question": "which students are female? | Do you want the ids of students who are female? | yes",
        "query": "SELECT stuid FROM student WHERE sex = 'F'",
        "schema": "CREATE TABLE Student (Sex TEXT, StuID NUMBER, LName TEXT); CREATE TABLE SportsInfo (StuID NUMBER);"
      },
      {
        "question": "now give me the student ids of people who play football",
        "query": "SELECT stuid FROM sportsinfo WHERE sportname = \"Football\"",
        "schema": "CREATE TABLE Student (StuID NUMBER, Sex TEXT, LName TEXT); CREATE TABLE SportsInfo (SportName TEXT, StuID NUMBER);"
      },
      {
        "question": "show me the ids of the students that are both female and play football",
        "query": "SELECT stuid FROM student WHERE sex = 'F' INTERSECT SELECT stuid FROM sportsinfo WHERE sportname = \"Football\"",
        "schema": "CREATE TABLE SportsInfo (SportName TEXT, StuID NUMBER); CREATE TABLE Student (Sex TEXT, StuID NUMBER, Fname TEXT, LName TEXT);"
      }
    ],
    [
      {
        "question": "Show all student IDs with more than a total of 10 hours per week on all sports played please.",
        "query": "SELECT stuid FROM sportsinfo GROUP BY stuid HAVING SUM ( hoursperweek ) > 10",
        "schema": "CREATE TABLE SportsInfo (HoursPerWeek NUMBER, GamesPlayed NUMBER, StuID NUMBER, SportName TEXT); CREATE TABLE Student (StuID NUMBER); CREATE TABLE Plays_Games (StuID NUMBER, Hours_Played NUMBER);"
      },
      {
        "question": "Which of those were just football?",
        "query": "SELECT stuid FROM sportsinfo WHERE sportname = 'Football'",
        "schema": "CREATE TABLE Plays_Games (StuID NUMBER, Hours_Played NUMBER); CREATE TABLE Student (StuID NUMBER); CREATE TABLE SportsInfo (StuID NUMBER, GamesPlayed NUMBER, HoursPerWeek NUMBER, SportName TEXT);"
      },
      {
        "question": "What's the average hours per week all students played football?",
        "query": "SELECT AVG ( hoursperweek ) FROM sportsinfo WHERE sportname = 'Football'",
        "schema": "CREATE TABLE Plays_Games (Hours_Played NUMBER, StuID NUMBER); CREATE TABLE Student (StuID NUMBER); CREATE TABLE SportsInfo (SportName TEXT, GamesPlayed NUMBER, HoursPerWeek NUMBER, StuID NUMBER);"
      },
      {
        "question": "What's the average hours per week all students played athletics?",
        "query": "SELECT AVG ( hoursperweek ) FROM sportsinfo",
        "schema": "CREATE TABLE Plays_Games (Hours_Played NUMBER, StuID NUMBER); CREATE TABLE SportsInfo (HoursPerWeek NUMBER, StuID NUMBER, SportName TEXT, GamesPlayed NUMBER); CREATE TABLE Student (StuID NUMBER);"
      },
      {
        "question": "What are all sports names?",
        "query": "SELECT DISTINCT sportname FROM sportsinfo",
        "schema": "CREATE TABLE SportsInfo (GamesPlayed NUMBER, HoursPerWeek NUMBER, StuID NUMBER, SportName TEXT); CREATE TABLE Student (StuID NUMBER); CREATE TABLE Plays_Games (Hours_Played NUMBER, StuID NUMBER);"
      },
      {
        "question": "What's the average hours per week all students played Lacrosse?",
        "query": "SELECT AVG ( hoursperweek ) FROM sportsinfo WHERE sportname = 'Lacrosse'",
        "schema": "CREATE TABLE Student (StuID NUMBER); CREATE TABLE SportsInfo (SportName TEXT, HoursPerWeek NUMBER, GamesPlayed NUMBER, StuID NUMBER); CREATE TABLE Plays_Games (StuID NUMBER, Hours_Played NUMBER);"
      },
      {
        "question": "What are the student IDs of those students?",
        "query": "SELECT stuid FROM sportsinfo",
        "schema": "CREATE TABLE Student (Fname TEXT, StuID NUMBER); CREATE TABLE Plays_Games (StuID NUMBER, Hours_Played NUMBER); CREATE TABLE SportsInfo (GamesPlayed NUMBER, SportName TEXT, StuID NUMBER, HoursPerWeek NUMBER);"
      }
    ],
    [
      {
        "question": "Which students play video games?",
        "query": "SELECT DISTINCT stuid FROM plays_games",
        "schema": "CREATE TABLE Plays_Games (StuID NUMBER, GameID NUMBER); CREATE TABLE Student (StuID NUMBER); CREATE TABLE Video_Games (GName TEXT, GType TEXT, GameID NUMBER);"
      },
      {
        "question": "How about students who play sports?",
        "query": "SELECT DISTINCT stuid FROM sportsinfo",
        "schema": "CREATE TABLE Student (StuID NUMBER); CREATE TABLE SportsInfo (SportName TEXT, StuID NUMBER, GamesPlayed NUMBER); CREATE TABLE Plays_Games (GameID NUMBER, StuID NUMBER); CREATE TABLE Video_Games (GType TEXT, GameID NUMBER, GName TEXT);"
      },
      {
        "question": "Show ids of students who play video games and sports?",
        "query": "SELECT stuid FROM sportsinfo INTERSECT SELECT stuid FROM plays_games",
        "schema": "CREATE TABLE SportsInfo (GamesPlayed NUMBER, SportName TEXT, StuID NUMBER); CREATE TABLE Plays_Games (GameID NUMBER, StuID NUMBER); CREATE TABLE Student (StuID NUMBER); CREATE TABLE Video_Games (GameID NUMBER, GName TEXT, GType TEXT);"
      }
    ],
    [
      {
        "question": "Which game names were played by Linda Smith?",
        "query": "SELECT gname FROM plays_games AS t1 JOIN video_games AS t2 ON t1.gameid = t2.gameid JOIN student AS t3 ON t3.stuid = t1.stuid WHERE t3.lname = \"Smith\" AND t3.fname = \"Linda\"",
        "schema": "CREATE TABLE SportsInfo (GamesPlayed NUMBER, StuID NUMBER); CREATE TABLE Student (StuID NUMBER, Fname TEXT, LName TEXT); CREATE TABLE Plays_Games (StuID NUMBER, GameID NUMBER); CREATE TABLE Video_Games (GName TEXT, GameID NUMBER, GType TEXT);"
      },
      {
        "question": "What is the Gtype of RGN Stone?",
        "query": "SELECT gtype FROM video_games WHERE gname = \"RNG Stone\"",
        "schema": "CREATE TABLE Plays_Games (GameID NUMBER, StuID NUMBER); CREATE TABLE SportsInfo (GamesPlayed NUMBER, StuID NUMBER); CREATE TABLE Video_Games (GName TEXT, GType TEXT, GameID NUMBER); CREATE TABLE Student (StuID NUMBER, Fname TEXT, LName TEXT);"
      },
      {
        "question": "What is the city code of Student Shiela Jones?",
        "query": "SELECT city_code FROM student WHERE lname = \"Jones\" AND fname = \"Shiela\"",
        "schema": "CREATE TABLE Video_Games (GName TEXT, GType TEXT, GameID NUMBER); CREATE TABLE Plays_Games (GameID NUMBER, StuID NUMBER); CREATE TABLE SportsInfo (StuID NUMBER, GamesPlayed NUMBER); CREATE TABLE Student (LName TEXT, city_code TEXT, Fname TEXT, StuID NUMBER);"
      },
      {
        "question": "How many Hours Played do The Vanishing of Eric Calde hasr?",
        "query": "SELECT t1.hours_played FROM plays_games AS t1 JOIN video_games AS t2 ON t1.gameid = t2.gameid WHERE gname = \"The Vanishing of Eric Calder\"",
        "schema": "CREATE TABLE Video_Games (GName TEXT, GameID NUMBER, GType TEXT); CREATE TABLE SportsInfo (StuID NUMBER, GamesPlayed NUMBER); CREATE TABLE Student (Fname TEXT, StuID NUMBER, LName TEXT, city_code TEXT); CREATE TABLE Plays_Games (GameID NUMBER, Hours_Played NUMBER, StuID NUMBER);"
      },
      {
        "question": "What are the Student names who have played Gname The Vanishing of Eric Calder.",
        "query": "SELECT t3.fname, t3.lname FROM plays_games AS t1 JOIN video_games AS t2 ON t1.gameid = t2.gameid JOIN student AS t3 ON t3.stuid = t1.stuid WHERE t2.gname = \"The Vanishing of Eric Calder\"",
        "schema": "CREATE TABLE Plays_Games (StuID NUMBER, GameID NUMBER, Hours_Played NUMBER); CREATE TABLE Student (StuID NUMBER, Fname TEXT, city_code TEXT, LName TEXT); CREATE TABLE Video_Games (GName TEXT, GType TEXT, GameID NUMBER); CREATE TABLE SportsInfo (GamesPlayed NUMBER, StuID NUMBER);"
      },
      {
        "question": "What is the total Hours Played of all Students?",
        "query": "SELECT SUM ( hours_played ) FROM plays_games",
        "schema": "CREATE TABLE Video_Games (GType TEXT, GName TEXT, GameID NUMBER); CREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, city_code TEXT); CREATE TABLE SportsInfo (GamesPlayed NUMBER, StuID NUMBER); CREATE TABLE Plays_Games (StuID NUMBER, Hours_Played NUMBER, GameID NUMBER);"
      }
    ],
    [
      {
        "question": "How many students play football?",
        "query": "SELECT COUNT ( * ) FROM sportsinfo AS t1 JOIN student AS t2 ON t1.stuid = t2.stuid WHERE t1.sportname = \"Football\"",
        "schema": "CREATE TABLE SportsInfo (StuID NUMBER, SportName TEXT, GamesPlayed NUMBER); CREATE TABLE Student (StuID NUMBER);"
      },
      {
        "question": "What are their first and last names?",
        "query": "SELECT t2.lname , t2.fname FROM sportsinfo AS t1 JOIN student AS t2 ON t1.stuid = t2.stuid WHERE t1.sportname = \"Football\"",
        "schema": "CREATE TABLE Student (StuID NUMBER, Fname TEXT, LName TEXT); CREATE TABLE SportsInfo (GamesPlayed NUMBER, SportName TEXT, StuID NUMBER);"
      },
      {
        "question": "How many students play Lacrosse?",
        "query": "SELECT COUNT ( * ) FROM sportsinfo AS t1 JOIN student AS t2 ON t1.stuid = t2.stuid WHERE t1.sportname = \"Lacrosse\"",
        "schema": "CREATE TABLE SportsInfo (GamesPlayed NUMBER, SportName TEXT, StuID NUMBER); CREATE TABLE Student (LName TEXT, StuID NUMBER, Fname TEXT);"
      },
      {
        "question": "What are their first and last names?",
        "query": "SELECT t2.lname , t2.fname FROM sportsinfo AS t1 JOIN student AS t2 ON t1.stuid = t2.stuid WHERE t1.sportname = \"Lacrosse\"",
        "schema": "CREATE TABLE SportsInfo (GamesPlayed NUMBER, SportName TEXT, StuID NUMBER); CREATE TABLE Student (LName TEXT, StuID NUMBER, Fname TEXT);"
      }
    ],
    [
      {
        "question": "Age and sex of Smith Linda? | The age and sex of the student whose last name is Smith and first name is Linda are 18 and F respectively. | What type of game is 'The Vanishing of Eric Calder'?",
        "query": "SELECT gtype FROM video_games WHERE gname = 'The Vanishing of Eric Calder'",
        "schema": "CREATE TABLE Video_Games (GType TEXT, GameID NUMBER, GName TEXT); CREATE TABLE Student (StuID NUMBER, Sex TEXT, LName TEXT, Age NUMBER, Fname TEXT); CREATE TABLE Plays_Games (StuID NUMBER, GameID NUMBER);"
      },
      {
        "question": "Give the hours played by Kim Tracy?",
        "query": "SELECT hours_played FROM student AS t1 JOIN plays_games AS t2 WHERE lname = 'Kim' AND fname = 'Tracy'",
        "schema": "CREATE TABLE Video_Games (GName TEXT, GType TEXT, GameID NUMBER); CREATE TABLE Student (Sex TEXT, StuID NUMBER, Age NUMBER, Fname TEXT, LName TEXT); CREATE TABLE Plays_Games (GameID NUMBER, StuID NUMBER, Hours_Played NUMBER);"
      },
      {
        "question": "City code of Jones Shiela? | Do you mean the city code of the student whose first name is Shiela and last name is Jones? | Yes",
        "query": "SELECT city_code FROM student WHERE fname = 'Shiela' AND lname = 'Jones'",
        "schema": "CREATE TABLE Student (Fname TEXT, StuID NUMBER, Age NUMBER, city_code TEXT, Sex TEXT, LName TEXT); CREATE TABLE Video_Games (GameID NUMBER, GType TEXT, GName TEXT); CREATE TABLE Plays_Games (GameID NUMBER, StuID NUMBER, Hours_Played NUMBER);"
      }
    ],
    [
      {
        "question": "How many game types do you have?",
        "query": "SELECT COUNT ( DISTINCT gtype ) FROM video_games",
        "schema": "CREATE TABLE Video_Games (GType TEXT, GameID NUMBER, GName TEXT); CREATE TABLE Student (StuID NUMBER); CREATE TABLE Plays_Games (StuID NUMBER, GameID NUMBER); CREATE TABLE SportsInfo (StuID NUMBER);"
      },
      {
        "question": "What is the average number of games in all game types?",
        "query": "SELECT gtype, COUNT ( * ) FROM video_games GROUP BY gtype",
        "schema": "CREATE TABLE Plays_Games (GameID NUMBER, StuID NUMBER); CREATE TABLE Student (StuID NUMBER); CREATE TABLE SportsInfo (StuID NUMBER); CREATE TABLE Video_Games (GameID NUMBER, GName TEXT, GType TEXT);"
      },
      {
        "question": "Finally, which game type has the least number of games?",
        "query": "SELECT gtype FROM video_games GROUP BY gtype ORDER BY COUNT ( * ) LIMIT 1",
        "schema": "CREATE TABLE Plays_Games (GameID NUMBER, StuID NUMBER); CREATE TABLE Student (StuID NUMBER); CREATE TABLE SportsInfo (StuID NUMBER); CREATE TABLE Video_Games (GType TEXT, GameID NUMBER, GName TEXT);"
      }
    ],
    [
      {
        "question": "Could you please show me all the student IDs with the number of sports?",
        "query": "SELECT stuid , COUNT ( * ) FROM sportsinfo GROUP BY stuid",
        "schema": "CREATE TABLE Video_Games (GameID NUMBER); CREATE TABLE SportsInfo (StuID NUMBER, SportName TEXT); CREATE TABLE Student (LName TEXT, StuID NUMBER);"
      },
      {
        "question": "Could you add the total number of games played to that table please?",
        "query": "SELECT stuid , COUNT ( * ) , SUM ( gamesplayed ) FROM sportsinfo GROUP BY stuid",
        "schema": "CREATE TABLE Plays_Games (Hours_Played NUMBER, StuID NUMBER); CREATE TABLE Student (StuID NUMBER, LName TEXT); CREATE TABLE Video_Games (GameID NUMBER); CREATE TABLE SportsInfo (StuID NUMBER, GamesPlayed NUMBER, SportName TEXT);"
      },
      {
        "question": "How many students are on scholarships?",
        "query": "SELECT COUNT ( DISTINCT stuid ) FROM sportsinfo WHERE onscholarship = \"Y\"",
        "schema": "CREATE TABLE Video_Games (GameID NUMBER); CREATE TABLE Student (LName TEXT, StuID NUMBER); CREATE TABLE Plays_Games (Hours_Played NUMBER, StuID NUMBER); CREATE TABLE SportsInfo (SportName TEXT, GamesPlayed NUMBER, OnScholarship TEXT, StuID NUMBER);"
      },
      {
        "question": "What is the most common sports name?",
        "query": "SELECT sportname FROM sportsinfo GROUP BY sportname ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Plays_Games (Hours_Played NUMBER, StuID NUMBER); CREATE TABLE SportsInfo (GamesPlayed NUMBER, StuID NUMBER, SportName TEXT, OnScholarship TEXT); CREATE TABLE Student (StuID NUMBER, LName TEXT); CREATE TABLE Video_Games (GameID NUMBER);"
      },
      {
        "question": "What is the name of the sport the student with the most hours per week played?",
        "query": "SELECT sportname FROM sportsinfo ORDER BY hoursperweek DESC LIMIT 1",
        "schema": "CREATE TABLE Video_Games (GameID NUMBER); CREATE TABLE SportsInfo (OnScholarship TEXT, StuID NUMBER, GamesPlayed NUMBER, HoursPerWeek NUMBER, SportName TEXT); CREATE TABLE Student (StuID NUMBER, LName TEXT); CREATE TABLE Plays_Games (StuID NUMBER, Hours_Played NUMBER);"
      }
    ],
    [
      {
        "question": "what is the lname of linda",
        "query": "SELECT lname FROM student WHERE fname = 'Linda'",
        "schema": "CREATE TABLE Student (LName TEXT, StuID NUMBER, Fname TEXT);"
      },
      {
        "question": "what is the age of linda",
        "query": "SELECT age FROM student WHERE fname = 'Linda'",
        "schema": "CREATE TABLE Student (Fname TEXT, LName TEXT, StuID NUMBER, Age NUMBER);"
      },
      {
        "question": "what is the age of kim",
        "query": "SELECT age FROM student WHERE lname = 'Kim'",
        "schema": "CREATE TABLE Student (Fname TEXT, StuID NUMBER, Age NUMBER, LName TEXT);"
      },
      {
        "question": "what is the sex of age 18",
        "query": "SELECT DISTINCT sex FROM student WHERE age = 18",
        "schema": "CREATE TABLE Student (Age NUMBER, Sex TEXT, LName TEXT, StuID NUMBER, Fname TEXT);"
      }
    ],
    [
      {
        "question": "How many SportName on scholarship?",
        "query": "SELECT COUNT ( DISTINCT sportname ) FROM sportsinfo WHERE onscholarship = \"Y\"",
        "schema": "CREATE TABLE Student (Fname TEXT, LName TEXT, StuID NUMBER); CREATE TABLE SportsInfo (SportName TEXT, StuID NUMBER, OnScholarship TEXT);"
      },
      {
        "question": "What are these 7 different sports that have student on scholarship?",
        "query": "SELECT DISTINCT sportname FROM sportsinfo WHERE onscholarship = \"Y\"",
        "schema": "CREATE TABLE SportsInfo (OnScholarship TEXT, SportName TEXT, StuID NUMBER); CREATE TABLE Student (LName TEXT, Fname TEXT, StuID NUMBER);"
      },
      {
        "question": "which sport has most number of students on scholarship?",
        "query": "SELECT sportname FROM sportsinfo WHERE onscholarship = \"Y\" GROUP BY sportname ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE SportsInfo (SportName TEXT, StuID NUMBER, OnScholarship TEXT); CREATE TABLE Student (StuID NUMBER, Fname TEXT, LName TEXT);"
      }
    ]
  ],
  "phone_1": [
    [
      {
        "question": "how many screen mode there",
        "query": "SELECT COUNT ( * ) FROM screen_mode",
        "schema": "CREATE TABLE phone (screen_mode TEXT, Hardware_Model_name TEXT); CREATE TABLE screen_mode (Pixels TEXT, Graphics_mode NUMBER, Char_cells TEXT, used_kb NUMBER, map TEXT, Type TEXT);"
      },
      {
        "question": "how many phone there",
        "query": "SELECT COUNT ( * ) FROM phone",
        "schema": "CREATE TABLE screen_mode (used_kb NUMBER, Char_cells TEXT, Type TEXT, Pixels TEXT, map TEXT, Graphics_mode NUMBER); CREATE TABLE phone (Accreditation_type TEXT, Hardware_Model_name TEXT, chip_model TEXT, Company_name TEXT, screen_mode TEXT);"
      },
      {
        "question": "what is the  company name of XPERIA T, XPERIA J",
        "query": "SELECT company_name FROM phone WHERE hardware_model_name = \"XPERIA T, XPERIA J\"",
        "schema": "CREATE TABLE chip_model (Model_name TEXT); CREATE TABLE phone (Company_name TEXT, Hardware_Model_name TEXT, Accreditation_type TEXT, chip_model TEXT, screen_mode TEXT); CREATE TABLE screen_mode (Pixels TEXT, Type TEXT, used_kb NUMBER, map TEXT, Graphics_mode NUMBER, Char_cells TEXT);"
      }
    ],
    [
      {
        "question": "Find the average ram mib size of the chip models that are never used by any phone",
        "query": "SELECT AVG ( ram_mib ) FROM chip_model WHERE model_name NOT IN ( SELECT chip_model FROM phone )",
        "schema": "CREATE TABLE phone (chip_model TEXT, Hardware_Model_name TEXT, Company_name TEXT); CREATE TABLE chip_model (Model_name TEXT, RAM_MiB NUMBER, ROM_MiB NUMBER, Bluetooth TEXT);"
      },
      {
        "question": "How many chips is that which are never used by any phone?",
        "query": "SELECT COUNT ( * ) FROM chip_model WHERE model_name NOT IN ( SELECT chip_model FROM phone )",
        "schema": "CREATE TABLE phone (chip_model TEXT, Company_name TEXT, Hardware_Model_name TEXT); CREATE TABLE chip_model (Model_name TEXT, Bluetooth TEXT, ROM_MiB NUMBER, RAM_MiB NUMBER);"
      },
      {
        "question": "Give me all their model names and ram mib",
        "query": "SELECT model_name,ram_mib FROM chip_model WHERE model_name NOT IN ( SELECT chip_model FROM phone )",
        "schema": "CREATE TABLE chip_model (Model_name TEXT, Bluetooth TEXT, ROM_MiB NUMBER, RAM_MiB NUMBER); CREATE TABLE phone (Company_name TEXT, chip_model TEXT, Hardware_Model_name TEXT);"
      },
      {
        "question": "How many chips used by phones have a ram mib higher or equal to 64",
        "query": "SELECT COUNT ( * ) FROM chip_model WHERE model_name IN ( SELECT chip_model FROM phone ) AND ram_mib > = 64",
        "schema": "CREATE TABLE chip_model (Bluetooth TEXT, RAM_MiB NUMBER, Model_name TEXT, ROM_MiB NUMBER); CREATE TABLE phone (Company_name TEXT, chip_model TEXT, Hardware_Model_name TEXT);"
      }
    ],
    [
      {
        "question": "Can you list the maximum number of used kb in screen mode?",
        "query": "SELECT MAX ( used_kb ) FROM screen_mode",
        "schema": "CREATE TABLE phone (screen_mode TEXT); CREATE TABLE chip_model (RAM_MiB NUMBER); CREATE TABLE screen_mode (Type TEXT, Graphics_mode NUMBER, map TEXT, Char_cells TEXT, used_kb NUMBER);"
      },
      {
        "question": "How about the minimum too?",
        "query": "SELECT MIN ( used_kb ) FROM screen_mode",
        "schema": "CREATE TABLE screen_mode (Type TEXT, map TEXT, Char_cells TEXT, used_kb NUMBER, Graphics_mode NUMBER); CREATE TABLE chip_model (RAM_MiB NUMBER); CREATE TABLE phone (screen_mode TEXT);"
      },
      {
        "question": "Could you get me the average as well, please?",
        "query": "SELECT AVG ( used_kb ) FROM screen_mode",
        "schema": "CREATE TABLE screen_mode (Graphics_mode NUMBER, Type TEXT, used_kb NUMBER, map TEXT, Char_cells TEXT); CREATE TABLE phone (screen_mode TEXT); CREATE TABLE chip_model (RAM_MiB NUMBER);"
      }
    ],
    [
      {
        "question": "How large is the ROM? | What do you mean by ROM? | When the \"Nokia Corporation\" company produces phones, what is the average ROM size implemented into a certain phone.",
        "query": "SELECT t1.rom_mib FROM chip_model AS t1 JOIN phone AS t2 ON t1.model_name = t2.chip_model WHERE t2.company_name = \"Nokia Corporation\" ORDER BY t1.rom_mib DESC LIMIT 1",
        "schema": "CREATE TABLE chip_model (ROM_MiB NUMBER, Model_name TEXT); CREATE TABLE phone (Hardware_Model_name TEXT, Company_name TEXT, chip_model TEXT);"
      },
      {
        "question": "What is the smallest ROM size of any phone made by company Nokia?",
        "query": "SELECT t1.rom_mib FROM chip_model AS t1 JOIN phone AS t2 ON t1.model_name = t2.chip_model WHERE t2.company_name = \"Nokia Corporation\" ORDER BY t1.rom_mib LIMIT 1",
        "schema": "CREATE TABLE chip_model (Model_name TEXT, ROM_MiB NUMBER); CREATE TABLE phone (Company_name TEXT, chip_model TEXT, Hardware_Model_name TEXT);"
      },
      {
        "question": "What is the average ROM size of a phone made by company Nokia?",
        "query": "SELECT AVG ( t1.rom_mib ) FROM chip_model AS t1 JOIN phone AS t2 ON t1.model_name = t2.chip_model WHERE t2.company_name = \"Nokia Corporation\"",
        "schema": "CREATE TABLE chip_model (Model_name TEXT, ROM_MiB NUMBER); CREATE TABLE phone (chip_model TEXT, Hardware_Model_name TEXT, Company_name TEXT);"
      }
    ],
    [
      {
        "question": "List the name of the company that produces more than one phone model.",
        "query": "SELECT company_name FROM phone GROUP BY company_name HAVING COUNT ( * ) > 1",
        "schema": "CREATE TABLE chip_model (Model_name TEXT); CREATE TABLE phone (chip_model TEXT, Company_name TEXT, Hardware_Model_name TEXT);"
      },
      {
        "question": "Hmmm. Please list the name of the company that produces only one phone model.",
        "query": "SELECT company_name FROM phone GROUP BY company_name HAVING COUNT ( * ) = 1",
        "schema": "CREATE TABLE phone (Hardware_Model_name TEXT, Company_name TEXT, chip_model TEXT); CREATE TABLE chip_model (Model_name TEXT);"
      },
      {
        "question": "Ok. Can you show me the models produced by Nokia Corporation?",
        "query": "SELECT hardware_model_name FROM phone WHERE company_name = \"Nokia Corporation\"",
        "schema": "CREATE TABLE chip_model (Model_name TEXT); CREATE TABLE phone (chip_model TEXT, Hardware_Model_name TEXT, Company_name TEXT);"
      }
    ],
    [
      {
        "question": "How many phones are on the list?",
        "query": "SELECT COUNT ( * ) FROM phone",
        "schema": "CREATE TABLE screen_mode (Graphics_mode NUMBER); CREATE TABLE phone (screen_mode TEXT, chip_model TEXT, Hardware_Model_name TEXT, Accreditation_type TEXT, Company_name TEXT);"
      },
      {
        "question": "How many different chip models are there?",
        "query": "SELECT COUNT ( * ) FROM chip_model",
        "schema": "CREATE TABLE chip_model (ROM_MiB NUMBER, Bluetooth TEXT, Slots TEXT, Model_name TEXT); CREATE TABLE phone (Hardware_Model_name TEXT, chip_model TEXT, Accreditation_type TEXT, Company_name TEXT, screen_mode TEXT); CREATE TABLE screen_mode (Graphics_mode NUMBER);"
      },
      {
        "question": "How many chip models are not being used in phones with full accreditation?",
        "query": "SELECT model_name FROM chip_model EXCEPT SELECT chip_model FROM phone WHERE accreditation_type = 'Full'",
        "schema": "CREATE TABLE chip_model (Slots TEXT, Model_name TEXT, ROM_MiB NUMBER, Bluetooth TEXT); CREATE TABLE screen_mode (Graphics_mode NUMBER); CREATE TABLE phone (Company_name TEXT, screen_mode TEXT, Accreditation_type TEXT, chip_model TEXT, Hardware_Model_name TEXT, Accreditation_level TEXT);"
      },
      {
        "question": "What are the names of the chip models not used in full accreditation phones?",
        "query": "SELECT model_name FROM chip_model EXCEPT SELECT chip_model FROM phone WHERE accreditation_type = 'Full'",
        "schema": "CREATE TABLE phone (Accreditation_level TEXT, screen_mode TEXT, Company_name TEXT, Accreditation_type TEXT, Hardware_Model_name TEXT, chip_model TEXT); CREATE TABLE screen_mode (Graphics_mode NUMBER); CREATE TABLE chip_model (ROM_MiB NUMBER, Bluetooth TEXT, Model_name TEXT, Slots TEXT);"
      }
    ],
    [
      {
        "question": "what are all the pixels are presented on the table",
        "query": "SELECT pixels FROM screen_mode",
        "schema": "CREATE TABLE screen_mode (Pixels TEXT); CREATE TABLE phone (screen_mode TEXT);"
      },
      {
        "question": "how many screen modes on the table",
        "query": "SELECT COUNT ( * ) FROM screen_mode",
        "schema": "CREATE TABLE screen_mode (Type TEXT, Graphics_mode NUMBER, used_kb NUMBER, Pixels TEXT); CREATE TABLE phone (screen_mode TEXT);"
      },
      {
        "question": "which phone has the highest screen mode on the table",
        "query": "SELECT * FROM phone WHERE screen_mode = ( SELECT MAX ( screen_mode ) FROM phone )",
        "schema": "CREATE TABLE screen_mode (Type TEXT, Graphics_mode NUMBER, used_kb NUMBER, Pixels TEXT); CREATE TABLE phone (Company_name TEXT, screen_mode TEXT, Hardware_Model_name TEXT);"
      },
      {
        "question": "list out the chip models on the table",
        "query": "SELECT chip_model FROM phone",
        "schema": "CREATE TABLE screen_mode (used_kb NUMBER, Pixels TEXT, Type TEXT, Graphics_mode NUMBER); CREATE TABLE chip_model (Model_name TEXT); CREATE TABLE phone (Hardware_Model_name TEXT, screen_mode TEXT, Company_name TEXT, chip_model TEXT);"
      }
    ],
    [
      {
        "question": "how many phones are presented on the table | Did you mean to ask for the number of entries in the table phone? | exactly",
        "query": "SELECT COUNT ( * ) FROM phone",
        "schema": "CREATE TABLE phone (Hardware_Model_name TEXT, Company_name TEXT, Accreditation_type TEXT);"
      },
      {
        "question": "list out the company name",
        "query": "SELECT company_name FROM phone",
        "schema": "CREATE TABLE phone (Hardware_Model_name TEXT, Accreditation_type TEXT, Company_name TEXT);"
      },
      {
        "question": "list the hardware model name",
        "query": "SELECT hardware_model_name FROM phone",
        "schema": "CREATE TABLE chip_model (Model_name TEXT); CREATE TABLE phone (Accreditation_type TEXT, Hardware_Model_name TEXT, Company_name TEXT, chip_model TEXT);"
      },
      {
        "question": "what is the chip model of XPERIA T, XPERIA J",
        "query": "SELECT chip_model FROM phone WHERE hardware_model_name = \"XPERIA T, XPERIA J\"",
        "schema": "CREATE TABLE chip_model (Model_name TEXT); CREATE TABLE phone (Accreditation_type TEXT, chip_model TEXT, Company_name TEXT, Hardware_Model_name TEXT);"
      }
    ],
    [
      {
        "question": "Tell me the chip model which has screen mode greater than 2.0 ? And also tell me the company name of that...",
        "query": "SELECT chip_model, company_name FROM phone WHERE screen_mode>2",
        "schema": "CREATE TABLE phone (chip_model TEXT, screen_mode TEXT, Hardware_Model_name TEXT, Company_name TEXT); CREATE TABLE screen_mode (Type TEXT, used_kb NUMBER, Graphics_mode NUMBER); CREATE TABLE chip_model (Slots TEXT, Bluetooth TEXT, ROM_MiB NUMBER, Model_name TEXT);"
      },
      {
        "question": "Find the accreditation level that more than 3 phones use.",
        "query": "SELECT accreditation_level FROM phone GROUP BY accreditation_level HAVING COUNT ( * ) > 3",
        "schema": "CREATE TABLE phone (Company_name TEXT, Hardware_Model_name TEXT, chip_model TEXT, screen_mode TEXT, Accreditation_type TEXT, Accreditation_level TEXT); CREATE TABLE chip_model (Bluetooth TEXT, Slots TEXT, Model_name TEXT, ROM_MiB NUMBER); CREATE TABLE screen_mode (Graphics_mode NUMBER, Type TEXT, used_kb NUMBER);"
      }
    ],
    [
      {
        "question": "What is the hardware model name for the phones that were produced by \"Nokia Corporation\" but whose screen mode type is not Text?",
        "query": "SELECT DISTINCT t2.hardware_model_name FROM screen_mode AS t1 JOIN phone AS t2 ON t1.graphics_mode = t2.screen_mode WHERE t2.company_name = \"Nokia Corporation\" AND t1.type ! = \"Text\"",
        "schema": "CREATE TABLE phone (Company_name TEXT, Hardware_Model_name TEXT, chip_model TEXT, screen_mode TEXT); CREATE TABLE screen_mode (Graphics_mode NUMBER, Type TEXT, used_kb NUMBER); CREATE TABLE chip_model (Model_name TEXT);"
      },
      {
        "question": "What are the pixels of those?",
        "query": "SELECT DISTINCT t1.pixels FROM screen_mode AS t1 JOIN phone AS t2 ON t1.graphics_mode = t2.screen_mode WHERE t2.company_name = \"Nokia Corporation\" AND t1.type ! = \"Text\"",
        "schema": "CREATE TABLE screen_mode (Type TEXT, used_kb NUMBER, Graphics_mode NUMBER, Pixels TEXT); CREATE TABLE phone (screen_mode TEXT, Company_name TEXT, Hardware_Model_name TEXT, chip_model TEXT); CREATE TABLE chip_model (Model_name TEXT);"
      },
      {
        "question": "What are the char cells of those?",
        "query": "SELECT DISTINCT t1.char_cells FROM screen_mode AS t1 JOIN phone AS t2 ON t1.graphics_mode = t2.screen_mode WHERE t2.company_name = \"Nokia Corporation\" AND t1.type ! = \"Text\"",
        "schema": "CREATE TABLE screen_mode (Char_cells TEXT, Pixels TEXT, used_kb NUMBER, Type TEXT, Graphics_mode NUMBER); CREATE TABLE phone (Company_name TEXT, Hardware_Model_name TEXT, screen_mode TEXT, chip_model TEXT); CREATE TABLE chip_model (Model_name TEXT);"
      },
      {
        "question": "What are the used kb of those?",
        "query": "SELECT DISTINCT t1.used_kb FROM screen_mode AS t1 JOIN phone AS t2 ON t1.graphics_mode = t2.screen_mode WHERE t2.company_name = \"Nokia Corporation\" AND t1.type ! = \"Text\"",
        "schema": "CREATE TABLE chip_model (Model_name TEXT); CREATE TABLE screen_mode (used_kb NUMBER, Graphics_mode NUMBER, Pixels TEXT, Char_cells TEXT, Type TEXT); CREATE TABLE phone (chip_model TEXT, screen_mode TEXT, Company_name TEXT, Hardware_Model_name TEXT);"
      }
    ]
  ],
  "swimming": [
    [
      {
        "question": "How many swimmers are there with record?",
        "query": "SELECT COUNT ( DISTINCT swimmer_id ) FROM record",
        "schema": "CREATE TABLE record (Swimmer_ID NUMBER, ID NUMBER); CREATE TABLE event (ID NUMBER); CREATE TABLE swimmer (name TEXT, ID NUMBER);"
      },
      {
        "question": "How about swimmers with no record?",
        "query": "SELECT COUNT ( * ) FROM swimmer WHERE id NOT IN ( SELECT swimmer_id FROM record )",
        "schema": "CREATE TABLE record (ID NUMBER, Swimmer_ID NUMBER); CREATE TABLE swimmer (name TEXT, ID NUMBER); CREATE TABLE event (ID NUMBER);"
      },
      {
        "question": "What their names?",
        "query": "SELECT name FROM swimmer WHERE id NOT IN ( SELECT swimmer_id FROM record )",
        "schema": "CREATE TABLE event (Name TEXT, ID NUMBER); CREATE TABLE record (ID NUMBER, Swimmer_ID NUMBER); CREATE TABLE swimmer (name TEXT, ID NUMBER);"
      }
    ],
    [
      {
        "question": "Can you list all events that happened in 2018?",
        "query": "SELECT name FROM event WHERE YEAR = 2018",
        "schema": "CREATE TABLE event (Name TEXT, Year TEXT, ID NUMBER); CREATE TABLE record (Event_ID NUMBER);"
      },
      {
        "question": "Can you list all the events that happened within the last 5 years?",
        "query": "SELECT name FROM event WHERE YEAR > = 2014",
        "schema": "CREATE TABLE record (Event_ID NUMBER); CREATE TABLE event (Name TEXT, Year TEXT, ID NUMBER);"
      },
      {
        "question": "Can you sort the list to only include the most recent event?",
        "query": "SELECT name FROM event ORDER BY YEAR DESC LIMIT 1",
        "schema": "CREATE TABLE record (Event_ID NUMBER); CREATE TABLE event (Year TEXT, Name TEXT, ID NUMBER);"
      }
    ],
    [
      {
        "question": "Can you list the names of all the swimmers who have won more than once?",
        "query": "SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id WHERE RESULT = 'Win' GROUP BY t2.swimmer_id HAVING COUNT ( * ) > 1",
        "schema": "CREATE TABLE record (Swimmer_ID NUMBER, ID NUMBER, Result TEXT); CREATE TABLE event (Name TEXT, ID NUMBER); CREATE TABLE swimmer (ID NUMBER, name TEXT);"
      },
      {
        "question": "What are their nationalities?",
        "query": "SELECT t1.nationality FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id WHERE RESULT = 'Win' GROUP BY t2.swimmer_id HAVING COUNT ( * ) > 1",
        "schema": "CREATE TABLE event (Name TEXT, ID NUMBER); CREATE TABLE record (ID NUMBER, Result TEXT, Swimmer_ID NUMBER); CREATE TABLE swimmer (Nationality TEXT, name TEXT, ID NUMBER);"
      },
      {
        "question": "Can you list the names and nationalities of the swimmers who have never won?",
        "query": "SELECT t1.name, t1.nationality FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id WHERE RESULT = 'Win' EXCEPT SELECT t1.name, t1.nationality FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id WHERE RESULT = 'Win' GROUP BY t2.swimmer_id HAVING COUNT ( * ) > 1",
        "schema": "CREATE TABLE swimmer (name TEXT, ID NUMBER, Nationality TEXT); CREATE TABLE event (ID NUMBER, Name TEXT); CREATE TABLE record (Result TEXT, ID NUMBER, Swimmer_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Hello, are there any countries that have two or more stadiums?",
        "query": "SELECT country FROM stadium GROUP BY country HAVING COUNT ( * ) > = 2",
        "schema": "CREATE TABLE stadium (City TEXT, name TEXT, ID NUMBER, Country TEXT, Capacity NUMBER); CREATE TABLE event (Stadium_ID NUMBER); CREATE TABLE swimmer (Nationality TEXT);"
      },
      {
        "question": "What countries have a stadium with a copacity greather than 60000?",
        "query": "SELECT DISTINCT country FROM stadium WHERE capacity > 60000",
        "schema": "CREATE TABLE swimmer (Nationality TEXT); CREATE TABLE event (Stadium_ID NUMBER); CREATE TABLE stadium (ID NUMBER, name TEXT, City TEXT, Capacity NUMBER, Country TEXT);"
      }
    ],
    [
      {
        "question": "List the countries more than two swimmer?",
        "query": "SELECT nationality FROM swimmer GROUP BY nationality HAVING COUNT ( * ) > 2",
        "schema": "CREATE TABLE record (Swimmer_ID NUMBER); CREATE TABLE swimmer (name TEXT, ID NUMBER, Nationality TEXT); CREATE TABLE stadium (Country TEXT);"
      },
      {
        "question": "what is the name of swimmer with id 5?",
        "query": "SELECT name FROM swimmer WHERE id = 5",
        "schema": "CREATE TABLE swimmer (Nationality TEXT, ID NUMBER, name TEXT); CREATE TABLE record (Swimmer_ID NUMBER, ID NUMBER); CREATE TABLE stadium (Country TEXT);"
      },
      {
        "question": "whats is nationality of the craif colbertaldo?",
        "query": "SELECT nationality FROM swimmer WHERE name = \"craif colbertaldo\"",
        "schema": "CREATE TABLE swimmer (name TEXT, ID NUMBER, Nationality TEXT); CREATE TABLE event (Stadium_ID NUMBER, Name TEXT, ID NUMBER); CREATE TABLE record (Swimmer_ID NUMBER, ID NUMBER); CREATE TABLE stadium (name TEXT, City TEXT, ID NUMBER, Country TEXT);"
      },
      {
        "question": "how many swimmer in the list?",
        "query": "SELECT COUNT ( id ) FROM swimmer",
        "schema": "CREATE TABLE stadium (ID NUMBER, Country TEXT, City TEXT, name TEXT); CREATE TABLE swimmer (name TEXT, Nationality TEXT, ID NUMBER); CREATE TABLE record (Swimmer_ID NUMBER, ID NUMBER); CREATE TABLE event (Stadium_ID NUMBER, Name TEXT, ID NUMBER);"
      },
      {
        "question": "what is the name of the swimmer id 4?",
        "query": "SELECT name FROM swimmer WHERE id = 4",
        "schema": "CREATE TABLE event (Stadium_ID NUMBER, ID NUMBER, Name TEXT); CREATE TABLE stadium (Country TEXT, City TEXT, ID NUMBER, name TEXT); CREATE TABLE record (Swimmer_ID NUMBER, ID NUMBER); CREATE TABLE swimmer (ID NUMBER, Nationality TEXT, name TEXT);"
      }
    ],
    [
      {
        "question": "What are the names of stadiums that some Australian swimmers have been to?",
        "query": "SELECT t4.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id JOIN event AS t3 ON t2.event_id = t3.id JOIN stadium AS t4 ON t4.id = t3.stadium_id WHERE t1.nationality = 'Australia'",
        "schema": "CREATE TABLE stadium (City TEXT, name TEXT, Country TEXT, ID NUMBER); CREATE TABLE event (Stadium_ID NUMBER, ID NUMBER, Name TEXT); CREATE TABLE swimmer (ID NUMBER, Nationality TEXT, name TEXT); CREATE TABLE record (Event_ID NUMBER, ID NUMBER, Swimmer_ID NUMBER);"
      },
      {
        "question": "Who were the Australian swimmers?",
        "query": "SELECT name FROM swimmer WHERE nationality = 'Australia'",
        "schema": "CREATE TABLE stadium (ID NUMBER, City TEXT, name TEXT, Country TEXT); CREATE TABLE record (Event_ID NUMBER, ID NUMBER, Swimmer_ID NUMBER); CREATE TABLE event (Stadium_ID NUMBER, ID NUMBER, Name TEXT); CREATE TABLE swimmer (ID NUMBER, Nationality TEXT, name TEXT);"
      }
    ],
    [
      {
        "question": "Find the names of stadiums that the least swimmers have been to?",
        "query": "SELECT t3.name FROM record AS t1 JOIN event AS t2 ON t1.event_id = t2.id JOIN stadium AS t3 ON t3.id = t2.stadium_id GROUP BY t2.stadium_id ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE event (ID NUMBER, Stadium_ID NUMBER, Name TEXT); CREATE TABLE record (Event_ID NUMBER, Swimmer_ID NUMBER, ID NUMBER); CREATE TABLE swimmer (ID NUMBER, name TEXT); CREATE TABLE stadium (name TEXT, ID NUMBER, City TEXT);"
      },
      {
        "question": "How many events in this table?",
        "query": "SELECT COUNT ( name ) FROM event",
        "schema": "CREATE TABLE swimmer (ID NUMBER, name TEXT); CREATE TABLE stadium (name TEXT, City TEXT, ID NUMBER); CREATE TABLE event (ID NUMBER, Stadium_ID NUMBER, Name TEXT); CREATE TABLE record (ID NUMBER, Event_ID NUMBER, Swimmer_ID NUMBER);"
      },
      {
        "question": "How many stadiums in this table?",
        "query": "SELECT COUNT ( name ) FROM stadium",
        "schema": "CREATE TABLE swimmer (name TEXT, ID NUMBER); CREATE TABLE stadium (City TEXT, name TEXT, ID NUMBER); CREATE TABLE record (Swimmer_ID NUMBER, Event_ID NUMBER, ID NUMBER); CREATE TABLE event (ID NUMBER, Name TEXT, Stadium_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Can you list the swimmer names and their times?",
        "query": "SELECT name, TIME FROM swimmer",
        "schema": "CREATE TABLE event (ID NUMBER); CREATE TABLE record (Swimmer_ID NUMBER); CREATE TABLE swimmer (Time TEXT, name TEXT, ID NUMBER);"
      },
      {
        "question": "Hmm, I also want to know their record times and the related events.",
        "query": "SELECT t1.time, t2.event_id FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id",
        "schema": "CREATE TABLE swimmer (name TEXT, Time TEXT, ID NUMBER); CREATE TABLE event (Name TEXT, Year TEXT, ID NUMBER); CREATE TABLE record (ID NUMBER, Swimmer_ID NUMBER, Event_ID NUMBER);"
      },
      {
        "question": "Please tell me the name of the swimmer who has at least 2 records.",
        "query": "SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id GROUP BY t2.swimmer_id HAVING COUNT ( * ) > = 2",
        "schema": "CREATE TABLE record (Swimmer_ID NUMBER, ID NUMBER, Event_ID NUMBER); CREATE TABLE swimmer (ID NUMBER, name TEXT, Time TEXT); CREATE TABLE event (Year TEXT, Name TEXT, ID NUMBER);"
      }
    ],
    [
      {
        "question": "how many names in the event table",
        "query": "SELECT COUNT ( name ) FROM event",
        "schema": "CREATE TABLE event (Name TEXT, ID NUMBER); CREATE TABLE record (Swimmer_ID NUMBER, Event_ID NUMBER); CREATE TABLE swimmer (ID NUMBER, name TEXT);"
      },
      {
        "question": "how many capacity in the stadium table",
        "query": "SELECT COUNT ( DISTINCT capacity ) FROM stadium",
        "schema": "CREATE TABLE event (ID NUMBER, Name TEXT, Stadium_ID NUMBER); CREATE TABLE stadium (name TEXT, ID NUMBER, Capacity NUMBER); CREATE TABLE record (Event_ID NUMBER, Swimmer_ID NUMBER); CREATE TABLE swimmer (ID NUMBER, name TEXT);"
      }
    ],
    [
      {
        "question": "What is the name of the swimmer who has the greatest number of records?",
        "query": "SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id GROUP BY t2.swimmer_id ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE swimmer (name TEXT, ID NUMBER); CREATE TABLE record (ID NUMBER, Swimmer_ID NUMBER);"
      },
      {
        "question": "What about the least number of records?",
        "query": "SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id GROUP BY t2.swimmer_id ORDER BY COUNT ( * ) ASC LIMIT 1",
        "schema": "CREATE TABLE swimmer (ID NUMBER, name TEXT); CREATE TABLE record (Swimmer_ID NUMBER, ID NUMBER);"
      },
      {
        "question": "What are the nationalities of swimmers \"Grant Hackett\" and \"Craig Stevens\"?",
        "query": "SELECT nationality FROM swimmer WHERE name = \"Grant Hackett\" OR name = \"Craig Stevens\"",
        "schema": "CREATE TABLE record (ID NUMBER, Result TEXT, Swimmer_ID NUMBER); CREATE TABLE swimmer (name TEXT, Nationality TEXT, ID NUMBER);"
      }
    ],
    [
      {
        "question": "Can you find me the names of all the swimmers who have \"win\" results in the record?",
        "query": "SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id WHERE RESULT = 'Win'",
        "schema": "CREATE TABLE event (ID NUMBER); CREATE TABLE swimmer (ID NUMBER, name TEXT); CREATE TABLE record (Result TEXT, Swimmer_ID NUMBER, ID NUMBER);"
      },
      {
        "question": "Can you find me the names of all the swimmers who have \"loss\" results in the record?",
        "query": "SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id WHERE RESULT = 'Loss'",
        "schema": "CREATE TABLE record (Result TEXT, Swimmer_ID NUMBER, ID NUMBER); CREATE TABLE swimmer (ID NUMBER, name TEXT); CREATE TABLE event (ID NUMBER);"
      },
      {
        "question": "Can you find me the names of all the swimmers who have both \"win\" and \"loss\" results in the record?",
        "query": "SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id WHERE RESULT = 'Win' INTERSECT SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id WHERE RESULT = 'Loss'",
        "schema": "CREATE TABLE swimmer (name TEXT, ID NUMBER); CREATE TABLE record (Swimmer_ID NUMBER, ID NUMBER, Result TEXT); CREATE TABLE event (ID NUMBER);"
      },
      {
        "question": "What are these three swimmers' nationalities?",
        "query": "SELECT t1.name, t1.nationality FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id WHERE RESULT = 'Win' INTERSECT SELECT t1.name, t1.nationality FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id WHERE RESULT = 'Loss'",
        "schema": "CREATE TABLE record (Swimmer_ID NUMBER, ID NUMBER, Result TEXT); CREATE TABLE swimmer (name TEXT, Nationality TEXT, ID NUMBER); CREATE TABLE event (ID NUMBER);"
      }
    ],
    [
      {
        "question": "What countries own stadiums?",
        "query": "SELECT country FROM stadium GROUP BY country HAVING COUNT ( * ) > = 1",
        "schema": "CREATE TABLE stadium (City TEXT, ID NUMBER, name TEXT, Country TEXT); CREATE TABLE swimmer (Nationality TEXT);"
      },
      {
        "question": "how many cities have stadiums?",
        "query": "SELECT COUNT ( DISTINCT city ) FROM stadium",
        "schema": "CREATE TABLE swimmer (Nationality TEXT); CREATE TABLE stadium (City TEXT, name TEXT, Country TEXT, ID NUMBER);"
      },
      {
        "question": "What country has at max 3 stadiums?",
        "query": "SELECT country FROM stadium GROUP BY country HAVING COUNT ( * ) < = 3",
        "schema": "CREATE TABLE stadium (name TEXT, City TEXT, Capacity NUMBER, Country TEXT, ID NUMBER); CREATE TABLE swimmer (Nationality TEXT);"
      }
    ],
    [
      {
        "question": "hi. what is the average capacity of the stadiums?",
        "query": "SELECT AVG ( capacity ) FROM stadium",
        "schema": "CREATE TABLE record (Swimmer_ID NUMBER); CREATE TABLE event (Stadium_ID NUMBER); CREATE TABLE swimmer (ID NUMBER); CREATE TABLE stadium (ID NUMBER, name TEXT, Capacity NUMBER);"
      },
      {
        "question": "and how many stadiums are there whose capacity is smaller than the average capacity?",
        "query": "SELECT COUNT ( * ) FROM stadium WHERE capacity < ( SELECT AVG ( capacity ) FROM stadium )",
        "schema": "CREATE TABLE stadium (ID NUMBER, Capacity NUMBER, name TEXT); CREATE TABLE swimmer (ID NUMBER); CREATE TABLE event (Stadium_ID NUMBER); CREATE TABLE record (Swimmer_ID NUMBER);"
      },
      {
        "question": "what are their names?",
        "query": "SELECT name FROM stadium WHERE capacity < ( SELECT AVG ( capacity ) FROM stadium )",
        "schema": "CREATE TABLE stadium (Capacity NUMBER, name TEXT, ID NUMBER); CREATE TABLE event (Stadium_ID NUMBER); CREATE TABLE record (Swimmer_ID NUMBER); CREATE TABLE swimmer (ID NUMBER);"
      }
    ],
    [
      {
        "question": "what is the name of the stadium with the  maximum capacity",
        "query": "SELECT name FROM stadium ORDER BY capacity DESC LIMIT 1",
        "schema": "CREATE TABLE event (Stadium_ID NUMBER); CREATE TABLE stadium (ID NUMBER, name TEXT, Capacity NUMBER);"
      },
      {
        "question": "in what city is Nou Mestalla",
        "query": "SELECT city FROM stadium WHERE name = \"Nou Mestalla\"",
        "schema": "CREATE TABLE stadium (City TEXT, ID NUMBER, Capacity NUMBER, name TEXT); CREATE TABLE event (Stadium_ID NUMBER);"
      },
      {
        "question": "what country is Nou Mestalla in?",
        "query": "SELECT country FROM stadium WHERE name = \"Nou Mestalla\"",
        "schema": "CREATE TABLE event (Stadium_ID NUMBER); CREATE TABLE stadium (name TEXT, City TEXT, Country TEXT, Capacity NUMBER, ID NUMBER);"
      }
    ],
    [
      {
        "question": "what is the name of the countries that do not have a stadium that was opened after 2006?",
        "query": "SELECT country FROM stadium EXCEPT SELECT country FROM stadium WHERE opening_year > 2006",
        "schema": "CREATE TABLE swimmer (Nationality TEXT); CREATE TABLE stadium (Country TEXT, ID NUMBER, Opening_year NUMBER, name TEXT); CREATE TABLE event (Year TEXT, Stadium_ID NUMBER);"
      },
      {
        "question": "what is the capacity for England? | You mean the stadium in England? | yes",
        "query": "SELECT capacity FROM stadium WHERE country = \"England\"",
        "schema": "CREATE TABLE stadium (Capacity NUMBER, Country TEXT, name TEXT, ID NUMBER, Opening_year NUMBER); CREATE TABLE event (Year TEXT, Stadium_ID NUMBER); CREATE TABLE swimmer (Nationality TEXT);"
      },
      {
        "question": "in what city is the stadium in England?",
        "query": "SELECT city FROM stadium WHERE country = \"England\"",
        "schema": "CREATE TABLE swimmer (Nationality TEXT); CREATE TABLE stadium (Country TEXT, City TEXT, Capacity NUMBER, Opening_year NUMBER, ID NUMBER, name TEXT); CREATE TABLE event (Stadium_ID NUMBER, Year TEXT);"
      }
    ]
  ],
  "aircraft": [
    [
      {
        "question": "Which aircraft did not win any match? | What information do you want about the aircrafts? Their names, their ids, or all their information? | Their names.",
        "query": "SELECT aircraft FROM aircraft WHERE aircraft_id NOT IN ( SELECT winning_aircraft FROM MATCH )",
        "schema": "CREATE TABLE aircraft (Aircraft TEXT, Aircraft_ID NUMBER); CREATE TABLE match (Winning_Aircraft TEXT); CREATE TABLE airport_aircraft (ID NUMBER, Aircraft_ID NUMBER);"
      },
      {
        "question": "Which pilot won the most matches?",
        "query": "SELECT winning_pilot FROM MATCH GROUP BY winning_pilot ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE airport_aircraft (ID NUMBER, Aircraft_ID NUMBER); CREATE TABLE match (Winning_Pilot TEXT, Winning_Aircraft TEXT); CREATE TABLE pilot (Name TEXT, Pilot_Id NUMBER); CREATE TABLE aircraft (Aircraft_ID NUMBER, Aircraft TEXT);"
      },
      {
        "question": "Which aircraft won the most matches?",
        "query": "SELECT winning_aircraft FROM MATCH GROUP BY winning_aircraft ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE aircraft (Aircraft_ID NUMBER, Aircraft TEXT); CREATE TABLE match (Winning_Pilot TEXT, Winning_Aircraft TEXT); CREATE TABLE airport_aircraft (ID NUMBER, Aircraft_ID NUMBER); CREATE TABLE pilot (Name TEXT, Pilot_Id NUMBER);"
      }
    ],
    [
      {
        "question": "In which country  Swan River ' Perth located ?",
        "query": "SELECT country FROM MATCH WHERE LOCATION = 'Swan River , Perth'",
        "schema": "CREATE TABLE airport (Airport_ID NUMBER, Airport_Name TEXT); CREATE TABLE aircraft (Aircraft_ID NUMBER); CREATE TABLE match (Country TEXT, Location TEXT);"
      },
      {
        "question": "How old is Mr. Cristian Halvorson II?",
        "query": "SELECT age FROM pilot WHERE name = 'Mr. Cristian Halvorson II'",
        "schema": "CREATE TABLE match (Location TEXT, Country TEXT, Winning_Pilot TEXT); CREATE TABLE pilot (Pilot_Id NUMBER, Name TEXT, Age NUMBER); CREATE TABLE airport (Airport_ID NUMBER, Airport_Name TEXT); CREATE TABLE aircraft (Aircraft_ID NUMBER);"
      },
      {
        "question": "In which country Mina' Zayid , Abu Dhabi located ?",
        "query": "SELECT country FROM MATCH WHERE LOCATION = \"Mina Zayid , Abu Dhabi\"",
        "schema": "CREATE TABLE match (Country TEXT, Winning_Pilot TEXT, Location TEXT); CREATE TABLE airport (Airport_ID NUMBER, Airport_Name TEXT); CREATE TABLE pilot (Pilot_Id NUMBER, Age NUMBER, Name TEXT); CREATE TABLE aircraft (Aircraft_ID NUMBER);"
      },
      {
        "question": "what is the name and age of the oldest winning pilot",
        "query": "SELECT t1.name , t1.age FROM pilot AS t1 JOIN MATCH AS t2 ON t1.pilot_id = t2.winning_pilot ORDER BY t1.age DESC LIMIT 1",
        "schema": "CREATE TABLE aircraft (Aircraft_ID NUMBER); CREATE TABLE airport (Airport_Name TEXT, Airport_ID NUMBER); CREATE TABLE pilot (Pilot_Id NUMBER, Name TEXT, Age NUMBER); CREATE TABLE match (Location TEXT, Winning_Pilot TEXT, Country TEXT);"
      },
      {
        "question": "where is Flamengo Beach , Rio de Janeiro situated ? | did you want to return its country? | where its located ?",
        "query": "SELECT country FROM MATCH WHERE LOCATION = 'Flamengo Beach , Rio de Janeiro'",
        "schema": "CREATE TABLE match (Winning_Pilot TEXT, Location TEXT, Country TEXT); CREATE TABLE airport (Airport_Name TEXT, Airport_ID NUMBER); CREATE TABLE aircraft (Aircraft_ID NUMBER); CREATE TABLE pilot (Name TEXT, Age NUMBER, Pilot_Id NUMBER);"
      }
    ],
    [
      {
        "question": "What are the names of the aircraft?",
        "query": "SELECT aircraft FROM aircraft",
        "schema": "CREATE TABLE airport_aircraft (Aircraft_ID NUMBER); CREATE TABLE match (Winning_Aircraft TEXT); CREATE TABLE aircraft (Aircraft_ID NUMBER, Aircraft TEXT, Description TEXT); CREATE TABLE pilot (Name TEXT);"
      },
      {
        "question": "And which of those aircraft won a match?",
        "query": "SELECT t1.aircraft FROM aircraft AS t1 JOIN MATCH AS t2 ON t1.aircraft_id = t2.winning_aircraft",
        "schema": "CREATE TABLE pilot (Name TEXT); CREATE TABLE airport_aircraft (Aircraft_ID NUMBER); CREATE TABLE match (Winning_Aircraft TEXT, Round NUMBER); CREATE TABLE aircraft (Aircraft TEXT, Description TEXT, Aircraft_ID NUMBER);"
      },
      {
        "question": "How many have won at least two matches?",
        "query": "SELECT t1.aircraft FROM aircraft AS t1 JOIN MATCH AS t2 ON t1.aircraft_id = t2.winning_aircraft GROUP BY t2.winning_aircraft HAVING COUNT ( * ) > = 2",
        "schema": "CREATE TABLE match (Round NUMBER, Winning_Aircraft TEXT); CREATE TABLE airport_aircraft (Aircraft_ID NUMBER); CREATE TABLE aircraft (Aircraft TEXT, Aircraft_ID NUMBER, Description TEXT); CREATE TABLE pilot (Name TEXT);"
      }
    ],
    [
      {
        "question": "Tell me the Location and Country of the Round 1 ?",
        "query": "SELECT LOCATION , country FROM MATCH WHERE round = \"1.0\"",
        "schema": "CREATE TABLE match (Country TEXT, Round NUMBER, Location TEXT);"
      },
      {
        "question": "What is the pilot id of Prof. Zackery Collins ?",
        "query": "SELECT pilot_id FROM pilot WHERE name = \"Prof. Zackery Collins\"",
        "schema": "CREATE TABLE pilot (Pilot_Id NUMBER, Name TEXT); CREATE TABLE match (Country TEXT, Winning_Pilot TEXT, Location TEXT, Round NUMBER);"
      },
      {
        "question": "What is the name and age of the youngest winning pilot...",
        "query": "SELECT t1.name , t1.age FROM pilot AS t1 JOIN MATCH AS t2 ON t1.pilot_id = t2.winning_pilot ORDER BY t1.age LIMIT 1",
        "schema": "CREATE TABLE match (Winning_Aircraft TEXT, Location TEXT, Round NUMBER, Country TEXT, Winning_Pilot TEXT); CREATE TABLE pilot (Pilot_Id NUMBER, Age NUMBER, Name TEXT);"
      }
    ],
    [
      {
        "question": "What are the total number of domestic passengers of airports that contain the word \"London\"?",
        "query": "SELECT SUM ( domestic_passengers ) FROM airport WHERE airport_name LIKE \"%London%\"",
        "schema": "CREATE TABLE match (Country TEXT); CREATE TABLE airport (Domestic_Passengers NUMBER, International_Passengers NUMBER, Airport_Name TEXT, Total_Passengers NUMBER, Airport_ID NUMBER);"
      },
      {
        "question": "What about with a name like 'Heathrow'?",
        "query": "SELECT SUM ( domestic_passengers ) FROM airport WHERE airport_name LIKE \"%Heathrow%\"",
        "schema": "CREATE TABLE match (Country TEXT); CREATE TABLE airport (Total_Passengers NUMBER, Airport_Name TEXT, International_Passengers NUMBER, Domestic_Passengers NUMBER, Airport_ID NUMBER);"
      },
      {
        "question": "what about international passengers?",
        "query": "SELECT SUM ( international_passengers ) FROM airport WHERE airport_name LIKE \"%Heathrow%\"",
        "schema": "CREATE TABLE airport (Domestic_Passengers NUMBER, Airport_Name TEXT, Total_Passengers NUMBER, Airport_ID NUMBER, International_Passengers NUMBER); CREATE TABLE match (Country TEXT);"
      }
    ],
    [
      {
        "question": "Which Airport has the largest number of international passengers?",
        "query": "SELECT airport_name FROM airport ORDER BY international_passengers DESC LIMIT 1",
        "schema": "CREATE TABLE match (Country TEXT); CREATE TABLE airport (International_Passengers NUMBER, Airport_ID NUMBER, Domestic_Passengers NUMBER, Total_Passengers NUMBER, Airport_Name TEXT); CREATE TABLE airport_aircraft (Airport_ID NUMBER);"
      },
      {
        "question": "How many international passengers in that airport?",
        "query": "SELECT international_passengers FROM airport ORDER BY international_passengers DESC LIMIT 1",
        "schema": "CREATE TABLE airport (Airport_ID NUMBER, International_Passengers NUMBER, Airport_Name TEXT, Total_Passengers NUMBER, Domestic_Passengers NUMBER); CREATE TABLE match (Country TEXT); CREATE TABLE airport_aircraft (Airport_ID NUMBER);"
      },
      {
        "question": "Show all information on that airport",
        "query": "SELECT * FROM airport ORDER BY international_passengers DESC LIMIT 1",
        "schema": "CREATE TABLE airport_aircraft (Airport_ID NUMBER); CREATE TABLE match (Country TEXT); CREATE TABLE airport (Airport_Name TEXT, Airport_ID NUMBER, Total_Passengers NUMBER, International_Passengers NUMBER, Domestic_Passengers NUMBER);"
      }
    ],
    [
      {
        "question": "please show the name of all the aircrafts.",
        "query": "SELECT aircraft FROM aircraft",
        "schema": "CREATE TABLE aircraft (Aircraft_ID NUMBER, Aircraft TEXT, Description TEXT); CREATE TABLE match (Winning_Aircraft TEXT); CREATE TABLE pilot (Name TEXT); CREATE TABLE airport_aircraft (ID NUMBER, Aircraft_ID NUMBER);"
      },
      {
        "question": "please show the description of the Aircraft Robinson R-22",
        "query": "SELECT description FROM aircraft WHERE aircraft = 'Robinson R-22'",
        "schema": "CREATE TABLE aircraft (Description TEXT, Aircraft TEXT, Aircraft_ID NUMBER); CREATE TABLE airport_aircraft (Aircraft_ID NUMBER, ID NUMBER); CREATE TABLE match (Winning_Aircraft TEXT); CREATE TABLE pilot (Name TEXT);"
      },
      {
        "question": "Please show the names of aircrafts associated with airport with name \"London Gatwick\".",
        "query": "SELECT t1.aircraft FROM aircraft AS t1 JOIN airport_aircraft AS t2 ON t1.aircraft_id = t2.aircraft_id JOIN airport AS t3 ON t2.airport_id = t3.airport_id WHERE t3.airport_name = \"London Gatwick\"",
        "schema": "CREATE TABLE match (Winning_Aircraft TEXT); CREATE TABLE aircraft (Aircraft TEXT, Description TEXT, Aircraft_ID NUMBER); CREATE TABLE pilot (Name TEXT); CREATE TABLE airport_aircraft (ID NUMBER, Airport_ID NUMBER, Aircraft_ID NUMBER); CREATE TABLE airport (Airport_Name TEXT, Airport_ID NUMBER);"
      }
    ],
    [
      {
        "question": "How many total domestic passengers were there?",
        "query": "SELECT SUM ( domestic_passengers ) FROM airport",
        "schema": "CREATE TABLE airport (International_Passengers NUMBER, Total_Passengers NUMBER, Domestic_Passengers NUMBER); CREATE TABLE match (Country TEXT);"
      },
      {
        "question": "What about international passengers?",
        "query": "SELECT SUM ( international_passengers ) FROM airport",
        "schema": "CREATE TABLE match (Country TEXT); CREATE TABLE airport (Domestic_Passengers NUMBER, International_Passengers NUMBER, Total_Passengers NUMBER);"
      },
      {
        "question": "Which airport had the most domestic passengers?",
        "query": "SELECT airport_name FROM airport ORDER BY domestic_passengers DESC LIMIT 1",
        "schema": "CREATE TABLE match (Country TEXT); CREATE TABLE airport (Total_Passengers NUMBER, Airport_ID NUMBER, Airport_Name TEXT, Domestic_Passengers NUMBER, International_Passengers NUMBER);"
      },
      {
        "question": "What are the total number of Domestic Passengers of airports that contain the word \"London.\"",
        "query": "SELECT SUM ( domestic_passengers ) FROM airport WHERE airport_name LIKE \"%London%\"",
        "schema": "CREATE TABLE match (Country TEXT); CREATE TABLE airport (Domestic_Passengers NUMBER, International_Passengers NUMBER, Airport_ID NUMBER, Airport_Name TEXT, Total_Passengers NUMBER);"
      }
    ],
    [
      {
        "question": "Number of international passengers per airport? | Did you want the names of airports and their number of international passengers? | Yes please.",
        "query": "SELECT airport_name, international_passengers FROM airport",
        "schema": "CREATE TABLE airport (Airport_Name TEXT, Domestic_Passengers NUMBER, Total_Passengers NUMBER, International_Passengers NUMBER, Airport_ID NUMBER); CREATE TABLE pilot (Name TEXT);"
      },
      {
        "question": "Which of these has the largest number of intentional passengers?",
        "query": "SELECT airport_name FROM airport ORDER BY international_passengers DESC LIMIT 1",
        "schema": "CREATE TABLE airport (Airport_Name TEXT, International_Passengers NUMBER, Domestic_Passengers NUMBER, Airport_ID NUMBER, Total_Passengers NUMBER); CREATE TABLE pilot (Name TEXT);"
      },
      {
        "question": "Ok. Can you show all the information for London Heathrow airport?",
        "query": "SELECT * FROM airport WHERE airport_name = \"London Heathrow\"",
        "schema": "CREATE TABLE pilot (Name TEXT); CREATE TABLE airport (Domestic_Passengers NUMBER, Total_Passengers NUMBER, International_Passengers NUMBER, Airport_Name TEXT, Airport_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What are the maximum number of transit passengers of all airports?",
        "query": "SELECT MAX ( transit_passengers ) FROM airport",
        "schema": "CREATE TABLE airport (Transit_Passengers NUMBER, Airport_ID NUMBER, Airport_Name TEXT, Total_Passengers NUMBER);"
      },
      {
        "question": "What are the minimum number of transit passengers of all airports?",
        "query": "SELECT MIN ( transit_passengers ) FROM airport",
        "schema": "CREATE TABLE airport (Airport_Name TEXT, Total_Passengers NUMBER, Airport_ID NUMBER, Transit_Passengers NUMBER);"
      },
      {
        "question": "What is the average of all domestic passengers?",
        "query": "SELECT AVG ( domestic_passengers ) FROM airport",
        "schema": "CREATE TABLE airport (Total_Passengers NUMBER, Airport_ID NUMBER, International_Passengers NUMBER, Airport_Name TEXT, Domestic_Passengers NUMBER, Transit_Passengers NUMBER); CREATE TABLE match (Country TEXT);"
      },
      {
        "question": "What airport name has the highest amount of international passengers?",
        "query": "SELECT airport_name FROM airport ORDER BY international_passengers DESC LIMIT 1",
        "schema": "CREATE TABLE airport (Airport_Name TEXT, Total_Passengers NUMBER, Transit_Passengers NUMBER, Domestic_Passengers NUMBER, Airport_ID NUMBER, International_Passengers NUMBER); CREATE TABLE match (Country TEXT);"
      }
    ],
    [
      {
        "question": "The column \"winning_pilot \" in Table: \"MATCH\" refers to column \"pilot_id\" in Table: \" pilot\" | Did  you  mean  that  you  want  to  get Pilot Id? | Yes",
        "query": "SELECT DISTINCT t1.pilot_id FROM pilot AS t1 JOIN MATCH AS t2 ON t1.pilot_id = t2.winning_pilot",
        "schema": "CREATE TABLE match (Winning_Pilot TEXT); CREATE TABLE pilot (Pilot_Id NUMBER, Name TEXT);"
      },
      {
        "question": "find the name and age of the pilot who has won the most number of times among the pilot who are younger than 30",
        "query": "SELECT t1.name , t1.age FROM pilot AS t1 JOIN MATCH AS t2 ON t1.pilot_id = t2.winning_pilot WHERE t1.age < 30 GROUP BY t2.winning_pilot ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE pilot (Name TEXT, Pilot_Id NUMBER, Age NUMBER); CREATE TABLE match (Winning_Pilot TEXT);"
      }
    ],
    [
      {
        "question": "plese list me about airports | Do you mean the airport ids of all the airports? | Yes, I just needs the name of aircrafts in airports",
        "query": "SELECT aircraft FROM aircraft",
        "schema": "CREATE TABLE aircraft (Aircraft TEXT, Aircraft_ID NUMBER); CREATE TABLE match (Winning_Aircraft TEXT); CREATE TABLE airport (Airport_Name TEXT, Airport_ID NUMBER); CREATE TABLE airport_aircraft (Aircraft_ID NUMBER, ID NUMBER, Airport_ID NUMBER);"
      }
    ]
  ],
  "student_assessment": [
    [
      {
        "question": "Could you please list each course's name and the number of its registered students?",
        "query": "SELECT t3.course_name , COUNT ( * ) FROM students AS t1 JOIN student_course_registrations AS t2 ON t1.student_id = t2.student_id JOIN courses AS t3 ON t2.course_id = t3.course_id GROUP BY t2.course_id",
        "schema": "CREATE TABLE Courses (course_id TEXT, course_name TEXT); CREATE TABLE Student_Course_Attendance (course_id NUMBER, student_id NUMBER); CREATE TABLE Student_Course_Registrations (student_id NUMBER, course_id NUMBER); CREATE TABLE Students (student_details TEXT, student_id NUMBER); CREATE TABLE People (person_id NUMBER);"
      },
      {
        "question": "What are the student ids of all students who registered for statistics?",
        "query": "SELECT t2.student_id FROM students AS t1 JOIN student_course_registrations AS t2 ON t1.student_id = t2.student_id JOIN courses AS t3 ON t2.course_id = t3.course_id WHERE t3.course_name = 'statistics'",
        "schema": "CREATE TABLE Student_Course_Registrations (course_id NUMBER, student_id NUMBER); CREATE TABLE Courses (course_id TEXT, course_name TEXT); CREATE TABLE People (person_id NUMBER); CREATE TABLE Students (student_id NUMBER, student_details TEXT); CREATE TABLE Student_Course_Attendance (course_id NUMBER, student_id NUMBER);"
      },
      {
        "question": "What are their student details, please?",
        "query": "SELECT t1.student_details FROM students AS t1 JOIN student_course_registrations AS t2 ON t1.student_id = t2.student_id JOIN courses AS t3 ON t2.course_id = t3.course_id WHERE t3.course_name = 'statistics'",
        "schema": "CREATE TABLE Student_Course_Attendance (course_id NUMBER, student_id NUMBER); CREATE TABLE People (person_id NUMBER); CREATE TABLE Courses (course_name TEXT, course_id TEXT); CREATE TABLE Students (student_details TEXT, student_id NUMBER); CREATE TABLE Student_Course_Registrations (student_id NUMBER, course_id NUMBER);"
      }
    ],
    [
      {
        "question": "Please list all IDs of students who have registered courses",
        "query": "SELECT student_id FROM student_course_registrations",
        "schema": "CREATE TABLE Students (student_details TEXT, student_id NUMBER); CREATE TABLE Candidate_Assessments (qualification TEXT, candidate_id NUMBER); CREATE TABLE Student_Course_Registrations (course_id NUMBER, student_id NUMBER); CREATE TABLE Student_Course_Attendance (student_id NUMBER, course_id NUMBER); CREATE TABLE Candidates (candidate_id NUMBER); CREATE TABLE People_Addresses (person_id NUMBER); CREATE TABLE People (first_name TEXT, person_id NUMBER, last_name TEXT); CREATE TABLE Courses (course_id TEXT);"
      }
    ],
    [
      {
        "question": "What is the Course Id for English",
        "query": "SELECT course_id FROM courses WHERE course_name = \"English\"",
        "schema": "CREATE TABLE Students (student_id NUMBER); CREATE TABLE Student_Course_Registrations (student_id NUMBER, course_id NUMBER); CREATE TABLE Candidate_Assessments (candidate_id NUMBER); CREATE TABLE Student_Course_Attendance (course_id NUMBER); CREATE TABLE People (person_id NUMBER); CREATE TABLE Candidates (candidate_id NUMBER); CREATE TABLE Courses (course_id TEXT, course_name TEXT);"
      },
      {
        "question": "how many different student ids are there?",
        "query": "SELECT COUNT ( DISTINCT student_id ) FROM student_course_attendance",
        "schema": "CREATE TABLE Courses (course_id TEXT, course_name TEXT); CREATE TABLE Students (student_id NUMBER, student_details TEXT); CREATE TABLE People (last_name TEXT, person_id NUMBER); CREATE TABLE Student_Course_Attendance (student_id NUMBER, course_id NUMBER); CREATE TABLE Candidates (candidate_id NUMBER); CREATE TABLE Candidate_Assessments (candidate_id NUMBER); CREATE TABLE Student_Course_Registrations (course_id NUMBER, student_id NUMBER);"
      },
      {
        "question": "How many students enrolled in Course ID 302?",
        "query": "SELECT COUNT ( * ) FROM courses AS t1 JOIN student_course_attendance AS t2 ON t1.course_id = t2.course_id WHERE t2.course_id = 302",
        "schema": "CREATE TABLE Student_Course_Registrations (student_id NUMBER, course_id NUMBER); CREATE TABLE People (person_id NUMBER, last_name TEXT); CREATE TABLE Candidates (candidate_id NUMBER); CREATE TABLE Courses (course_id TEXT, course_name TEXT); CREATE TABLE Candidate_Assessments (candidate_id NUMBER); CREATE TABLE Student_Course_Attendance (student_id NUMBER, course_id NUMBER); CREATE TABLE Students (student_id NUMBER, student_details TEXT);"
      }
    ],
    [
      {
        "question": "how many courses did the student with id 121 register for?",
        "query": "SELECT COUNT ( course_id ) FROM student_course_registrations WHERE student_id = 121",
        "schema": "CREATE TABLE Students (student_id NUMBER, student_details TEXT); CREATE TABLE Student_Course_Attendance (student_id NUMBER, course_id NUMBER); CREATE TABLE Courses (course_id TEXT, course_name TEXT); CREATE TABLE Student_Course_Registrations (course_id NUMBER, student_id NUMBER, registration_date TIME); CREATE TABLE People (last_name TEXT, first_name TEXT, person_id NUMBER); CREATE TABLE Candidate_Assessments (asessment_outcome_code TEXT);"
      },
      {
        "question": "And how many courses did the student attend?",
        "query": "SELECT COUNT ( * ) FROM student_course_attendance WHERE student_id = 121",
        "schema": "CREATE TABLE Student_Course_Registrations (registration_date TIME, student_id NUMBER, course_id NUMBER); CREATE TABLE Candidate_Assessments (asessment_outcome_code TEXT); CREATE TABLE Student_Course_Attendance (student_id NUMBER, course_id NUMBER, date_of_attendance TIME); CREATE TABLE Students (student_id NUMBER, student_details TEXT); CREATE TABLE People (first_name TEXT, person_id NUMBER, last_name TEXT); CREATE TABLE Courses (course_id TEXT, course_name TEXT);"
      },
      {
        "question": "show me the id of courses registered or attended by student whose id is 121",
        "query": "SELECT course_id FROM student_course_registrations WHERE student_id = 121 UNION SELECT course_id FROM student_course_attendance WHERE student_id = 121",
        "schema": "CREATE TABLE People (first_name TEXT, last_name TEXT, person_id NUMBER); CREATE TABLE Courses (course_name TEXT, course_id TEXT); CREATE TABLE Student_Course_Registrations (course_id NUMBER, student_id NUMBER, registration_date TIME); CREATE TABLE Student_Course_Attendance (date_of_attendance TIME, course_id NUMBER, student_id NUMBER); CREATE TABLE Students (student_details TEXT, student_id NUMBER); CREATE TABLE Candidate_Assessments (asessment_outcome_code TEXT);"
      }
    ],
    [
      {
        "question": "how many course id in the table?",
        "query": "SELECT COUNT ( DISTINCT course_id ) FROM student_course_registrations",
        "schema": "CREATE TABLE Student_Course_Registrations (student_id NUMBER, course_id NUMBER); CREATE TABLE People (person_id NUMBER, last_name TEXT); CREATE TABLE Students (student_details TEXT, student_id NUMBER); CREATE TABLE Student_Course_Attendance (course_id NUMBER, student_id NUMBER); CREATE TABLE People_Addresses (person_id NUMBER); CREATE TABLE Courses (course_id TEXT, course_name TEXT); CREATE TABLE Candidate_Assessments (asessment_outcome_code TEXT, candidate_id NUMBER); CREATE TABLE Candidates (candidate_id NUMBER);"
      }
    ],
    [
      {
        "question": "yes | Here are all the candidates' ids who got assessed. | which of those most recently had an assessment?",
        "query": "SELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1",
        "schema": "CREATE TABLE Students (student_id NUMBER); CREATE TABLE Student_Course_Registrations (student_id NUMBER); CREATE TABLE Candidate_Assessments (asessment_outcome_code TEXT, assessment_date TIME, candidate_id NUMBER); CREATE TABLE People (person_id NUMBER); CREATE TABLE Candidates (candidate_details TEXT, candidate_id NUMBER);"
      }
    ],
    [
      {
        "question": "whats the course id of statistics",
        "query": "SELECT course_id FROM courses WHERE course_name = \"statistics\"",
        "schema": "CREATE TABLE Students (student_details TEXT, student_id NUMBER); CREATE TABLE People (person_id NUMBER, last_name TEXT); CREATE TABLE Candidate_Assessments (candidate_id NUMBER); CREATE TABLE Candidates (candidate_id NUMBER); CREATE TABLE Courses (course_name TEXT, course_id TEXT); CREATE TABLE Student_Course_Registrations (student_id NUMBER, course_id NUMBER);"
      },
      {
        "question": "whats the course description of french",
        "query": "SELECT course_description FROM courses WHERE course_name = \"French\"",
        "schema": "CREATE TABLE Candidate_Assessments (candidate_id NUMBER); CREATE TABLE Candidates (candidate_id NUMBER); CREATE TABLE Student_Course_Registrations (student_id NUMBER, course_id NUMBER); CREATE TABLE People (last_name TEXT, person_id NUMBER); CREATE TABLE Courses (course_id TEXT, course_name TEXT, course_description TEXT); CREATE TABLE Students (student_details TEXT, student_id NUMBER);"
      },
      {
        "question": "which course has most number of registered students ?",
        "query": "SELECT t1.course_name FROM courses AS t1 JOIN student_course_registrations AS t2 ON t1.course_id = t2.course_id GROUP BY t1.course_id ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Courses (course_name TEXT, course_description TEXT, course_id TEXT); CREATE TABLE Students (student_details TEXT, student_id NUMBER); CREATE TABLE Student_Course_Registrations (student_id NUMBER, course_id NUMBER); CREATE TABLE Student_Course_Attendance (student_id NUMBER, course_id NUMBER); CREATE TABLE Candidates (candidate_id NUMBER); CREATE TABLE People (last_name TEXT, person_id NUMBER); CREATE TABLE Candidate_Assessments (candidate_id NUMBER);"
      }
    ],
    [
      {
        "question": "How many students are there?",
        "query": "SELECT COUNT ( DISTINCT student_id ) FROM courses AS t1 JOIN student_course_attendance AS t2 ON t1.course_id = t2.course_id",
        "schema": "CREATE TABLE Student_Course_Registrations (student_id NUMBER, course_id NUMBER); CREATE TABLE People_Addresses (person_address_id NUMBER, address_id NUMBER, person_id NUMBER); CREATE TABLE Student_Course_Attendance (course_id NUMBER, student_id NUMBER); CREATE TABLE Addresses (address_id NUMBER); CREATE TABLE Students (student_id NUMBER, student_details TEXT); CREATE TABLE Candidates (candidate_id NUMBER); CREATE TABLE Courses (course_id TEXT); CREATE TABLE Candidate_Assessments (candidate_id NUMBER, qualification TEXT); CREATE TABLE People (first_name TEXT, last_name TEXT, login_name TEXT, person_id NUMBER);"
      },
      {
        "question": "And the amount of courses?",
        "query": "SELECT COUNT ( DISTINCT t1.course_id ) FROM courses AS t1 JOIN student_course_attendance AS t2 ON t1.course_id = t2.course_id",
        "schema": "CREATE TABLE Courses (course_id TEXT, course_name TEXT); CREATE TABLE Student_Course_Attendance (date_of_attendance TIME, student_id NUMBER, course_id NUMBER); CREATE TABLE People_Addresses (address_id NUMBER, person_address_id NUMBER, person_id NUMBER); CREATE TABLE Addresses (address_id NUMBER); CREATE TABLE Candidate_Assessments (qualification TEXT, candidate_id NUMBER); CREATE TABLE People (last_name TEXT, first_name TEXT, login_name TEXT, person_id NUMBER); CREATE TABLE Candidates (candidate_id NUMBER); CREATE TABLE Student_Course_Registrations (course_id NUMBER, student_id NUMBER); CREATE TABLE Students (student_details TEXT, student_id NUMBER);"
      },
      {
        "question": "And how many courses did student 171 take?",
        "query": "SELECT COUNT ( * ) FROM courses AS t1 JOIN student_course_attendance AS t2 ON t1.course_id = t2.course_id WHERE t2.student_id = 171",
        "schema": "CREATE TABLE Student_Course_Attendance (student_id NUMBER, course_id NUMBER, date_of_attendance TIME); CREATE TABLE People (last_name TEXT, person_id NUMBER, login_name TEXT, first_name TEXT); CREATE TABLE Addresses (address_id NUMBER); CREATE TABLE Students (student_id NUMBER, student_details TEXT); CREATE TABLE Student_Course_Registrations (student_id NUMBER, course_id NUMBER); CREATE TABLE Candidates (candidate_id NUMBER); CREATE TABLE People_Addresses (person_id NUMBER, person_address_id NUMBER, address_id NUMBER); CREATE TABLE Candidate_Assessments (candidate_id NUMBER, qualification TEXT); CREATE TABLE Courses (course_id TEXT, course_name TEXT);"
      }
    ],
    [
      {
        "question": "Hello, how are you!  Can you provide me with a list of all of the email addresses in this database?",
        "query": "SELECT email_address FROM people",
        "schema": "CREATE TABLE People (email_address TEXT, last_name TEXT, person_id NUMBER); CREATE TABLE Addresses (address_id NUMBER); CREATE TABLE People_Addresses (address_id NUMBER, person_address_id NUMBER, person_id NUMBER);"
      },
      {
        "question": "Perfect!  Can you update the list to include all of the candidate IDs in addition to these email addresses?",
        "query": "SELECT t2.candidate_id,t1.email_address FROM people AS t1 JOIN candidates AS t2 ON t1.person_id = t2.candidate_id",
        "schema": "CREATE TABLE Candidate_Assessments (candidate_id NUMBER); CREATE TABLE Candidates (candidate_id NUMBER, candidate_details TEXT); CREATE TABLE Students (student_id NUMBER); CREATE TABLE People_Addresses (person_id NUMBER, person_address_id NUMBER, address_id NUMBER); CREATE TABLE People (last_name TEXT, email_address TEXT, person_id NUMBER); CREATE TABLE Addresses (address_id NUMBER);"
      },
      {
        "question": "Can you filter this list to show only the row that contains the email address of stanley.monahan@example.org?",
        "query": "SELECT t2.candidate_id, t1.email_address FROM people AS t1 JOIN candidates AS t2 ON t1.person_id = t2.candidate_id WHERE t1.email_address = 'stanley.monahan@example.org'",
        "schema": "CREATE TABLE People (last_name TEXT, email_address TEXT, first_name TEXT, person_id NUMBER); CREATE TABLE Addresses (address_id NUMBER); CREATE TABLE Candidates (candidate_details TEXT, candidate_id NUMBER); CREATE TABLE People_Addresses (person_address_id NUMBER, person_id NUMBER, address_id NUMBER); CREATE TABLE Candidate_Assessments (candidate_id NUMBER); CREATE TABLE Students (student_id NUMBER);"
      }
    ],
    [
      {
        "question": "tell me course name for course id 301 and 302?",
        "query": "SELECT course_name FROM courses WHERE course_id = 301 OR course_id = 302",
        "schema": "CREATE TABLE Candidate_Assessments (candidate_id NUMBER); CREATE TABLE People_Addresses (person_id NUMBER); CREATE TABLE Student_Course_Attendance (course_id NUMBER); CREATE TABLE Candidates (candidate_details TEXT, candidate_id NUMBER); CREATE TABLE Student_Course_Registrations (course_id NUMBER); CREATE TABLE Courses (course_id TEXT, course_name TEXT); CREATE TABLE Students (student_id NUMBER, student_details TEXT); CREATE TABLE People (last_name TEXT, person_id NUMBER, first_name TEXT); CREATE TABLE Addresses (city TEXT);"
      },
      {
        "question": "Tell me the date of attendance for the student id 111 and 121?",
        "query": "SELECT date_of_attendance FROM student_course_attendance WHERE student_id = 111 OR student_id = 121",
        "schema": "CREATE TABLE People (last_name TEXT, first_name TEXT, person_id NUMBER); CREATE TABLE People_Addresses (person_id NUMBER); CREATE TABLE Students (student_details TEXT, student_id NUMBER); CREATE TABLE Student_Course_Registrations (registration_date TIME, course_id NUMBER, student_id NUMBER); CREATE TABLE Student_Course_Attendance (date_of_attendance TIME, course_id NUMBER, student_id NUMBER); CREATE TABLE Addresses (city TEXT); CREATE TABLE Candidates (candidate_details TEXT, candidate_id NUMBER); CREATE TABLE Candidate_Assessments (candidate_id NUMBER); CREATE TABLE Courses (course_id TEXT, course_name TEXT);"
      },
      {
        "question": "How many students attend course English ?",
        "query": "SELECT COUNT ( * ) FROM courses AS t1 JOIN student_course_attendance AS t2 ON t1.course_id = t2.course_id WHERE t1.course_name = \"English\"",
        "schema": "CREATE TABLE Student_Course_Attendance (student_id NUMBER, date_of_attendance TIME, course_id NUMBER); CREATE TABLE People_Addresses (person_id NUMBER); CREATE TABLE Candidates (candidate_details TEXT, candidate_id NUMBER); CREATE TABLE Student_Course_Registrations (student_id NUMBER, registration_date TIME, course_id NUMBER); CREATE TABLE Courses (course_id TEXT, course_name TEXT); CREATE TABLE People (last_name TEXT, first_name TEXT, person_id NUMBER); CREATE TABLE Candidate_Assessments (candidate_id NUMBER); CREATE TABLE Students (student_details TEXT, student_id NUMBER); CREATE TABLE Addresses (city TEXT);"
      }
    ],
    [
      {
        "question": "How many students are there?",
        "query": "SELECT COUNT ( student_id ) FROM student_course_registrations",
        "schema": "CREATE TABLE Student_Course_Registrations (student_id NUMBER, course_id NUMBER); CREATE TABLE Candidate_Assessments (qualification TEXT, candidate_id NUMBER); CREATE TABLE Courses (course_id TEXT); CREATE TABLE Students (student_id NUMBER, student_details TEXT); CREATE TABLE People_Addresses (person_id NUMBER, address_id NUMBER, person_address_id NUMBER); CREATE TABLE Candidates (candidate_id NUMBER); CREATE TABLE People (first_name TEXT, person_id NUMBER, last_name TEXT, login_name TEXT); CREATE TABLE Addresses (address_id NUMBER); CREATE TABLE Student_Course_Attendance (student_id NUMBER, course_id NUMBER);"
      },
      {
        "question": "what about courses?",
        "query": "SELECT COUNT ( course_id ) FROM student_course_registrations",
        "schema": "CREATE TABLE Student_Course_Registrations (student_id NUMBER, course_id NUMBER, registration_date TIME); CREATE TABLE Courses (course_name TEXT, course_id TEXT); CREATE TABLE Candidates (candidate_id NUMBER); CREATE TABLE Addresses (address_id NUMBER); CREATE TABLE Students (student_details TEXT, student_id NUMBER); CREATE TABLE Candidate_Assessments (qualification TEXT, candidate_id NUMBER); CREATE TABLE People_Addresses (person_id NUMBER, address_id NUMBER, person_address_id NUMBER); CREATE TABLE People (login_name TEXT, last_name TEXT, person_id NUMBER, first_name TEXT); CREATE TABLE Student_Course_Attendance (course_id NUMBER, student_id NUMBER);"
      },
      {
        "question": "how many students registered for just one course",
        "query": "SELECT COUNT ( * ) FROM ( SELECT student_id FROM student_course_registrations GROUP BY student_id HAVING COUNT ( * ) = 1 )",
        "schema": "CREATE TABLE Student_Course_Attendance (course_id NUMBER, student_id NUMBER); CREATE TABLE Candidate_Assessments (qualification TEXT, candidate_id NUMBER); CREATE TABLE Candidates (candidate_id NUMBER); CREATE TABLE Students (student_id NUMBER, student_details TEXT); CREATE TABLE Addresses (address_id NUMBER); CREATE TABLE Courses (course_id TEXT, course_name TEXT); CREATE TABLE People (login_name TEXT, first_name TEXT, last_name TEXT, person_id NUMBER); CREATE TABLE Student_Course_Registrations (registration_date TIME, course_id NUMBER, student_id NUMBER); CREATE TABLE People_Addresses (address_id NUMBER, person_id NUMBER, person_address_id NUMBER);"
      },
      {
        "question": "what are their ids?",
        "query": "SELECT student_id FROM student_course_registrations GROUP BY student_id HAVING COUNT ( * ) = 1",
        "schema": "CREATE TABLE Candidate_Assessments (candidate_id NUMBER, qualification TEXT); CREATE TABLE Addresses (address_id NUMBER); CREATE TABLE Candidates (candidate_id NUMBER); CREATE TABLE Student_Course_Attendance (student_id NUMBER, course_id NUMBER); CREATE TABLE Student_Course_Registrations (student_id NUMBER, course_id NUMBER, registration_date TIME); CREATE TABLE Students (student_details TEXT, student_id NUMBER); CREATE TABLE People_Addresses (address_id NUMBER, person_address_id NUMBER, person_id NUMBER); CREATE TABLE Courses (course_name TEXT, course_id TEXT); CREATE TABLE People (first_name TEXT, last_name TEXT, person_id NUMBER, login_name TEXT);"
      }
    ],
    [
      {
        "question": "Hello!  Can you show me a list of all of the student names and their associated addresses and cities? | Hi. The following table is a list of all the student name details and their associated addresses line 1 and cities. | Thank you!  Can you filter the list to show just the rows that correspond with the 3 most recent \"date from\" values?",
        "query": "SELECT t3.student_details, t1.city, t1.line_1 FROM addresses AS t1 JOIN people_addresses AS t2 ON t1.address_id = t2.address_id JOIN students AS t3 ON t2.person_id = t3.student_id ORDER BY date_from DESC LIMIT 3",
        "schema": "CREATE TABLE People (person_id NUMBER, last_name TEXT, middle_name TEXT, first_name TEXT); CREATE TABLE Student_Course_Registrations (student_id NUMBER); CREATE TABLE Students (student_id NUMBER, student_details TEXT); CREATE TABLE People_Addresses (person_address_id NUMBER, person_id NUMBER, date_to TIME, address_id NUMBER, date_from TIME); CREATE TABLE Addresses (address_id NUMBER, city TEXT, line_2 TEXT, line_1 TEXT);"
      }
    ],
    [
      {
        "question": "Can you tell me the id of the students who registered for course 301?",
        "query": "SELECT student_id FROM student_course_attendance WHERE course_id = 301",
        "schema": "CREATE TABLE Student_Course_Registrations (registration_date TIME, course_id NUMBER, student_id NUMBER); CREATE TABLE Candidates (candidate_id NUMBER); CREATE TABLE Courses (course_id TEXT); CREATE TABLE People_Addresses (person_id NUMBER); CREATE TABLE Student_Course_Attendance (course_id NUMBER, student_id NUMBER); CREATE TABLE Candidate_Assessments (asessment_outcome_code TEXT, candidate_id NUMBER, qualification TEXT); CREATE TABLE Students (student_id NUMBER, student_details TEXT); CREATE TABLE People (person_id NUMBER, last_name TEXT, first_name TEXT);"
      },
      {
        "question": "Which one of them registered the earliest?",
        "query": "SELECT student_id FROM student_course_attendance WHERE course_id = 301 ORDER BY date_of_attendance LIMIT 1",
        "schema": "CREATE TABLE Student_Course_Attendance (date_of_attendance TIME, student_id NUMBER, course_id NUMBER); CREATE TABLE People_Addresses (person_id NUMBER); CREATE TABLE Courses (course_id TEXT); CREATE TABLE Students (student_id NUMBER, student_details TEXT); CREATE TABLE Student_Course_Registrations (student_id NUMBER, course_id NUMBER, registration_date TIME); CREATE TABLE Candidate_Assessments (asessment_outcome_code TEXT, qualification TEXT, candidate_id NUMBER); CREATE TABLE Candidates (candidate_id NUMBER); CREATE TABLE People (first_name TEXT, last_name TEXT, person_id NUMBER);"
      },
      {
        "question": "Which one registered most recently for that course?",
        "query": "SELECT student_id FROM student_course_attendance WHERE course_id = 301 ORDER BY date_of_attendance DESC LIMIT 1",
        "schema": "CREATE TABLE People_Addresses (person_id NUMBER); CREATE TABLE Student_Course_Registrations (course_id NUMBER, registration_date TIME, student_id NUMBER); CREATE TABLE Student_Course_Attendance (course_id NUMBER, date_of_attendance TIME, student_id NUMBER); CREATE TABLE People (person_id NUMBER, first_name TEXT, last_name TEXT); CREATE TABLE Candidates (candidate_id NUMBER); CREATE TABLE Courses (course_id TEXT); CREATE TABLE Students (student_id NUMBER, student_details TEXT); CREATE TABLE Candidate_Assessments (qualification TEXT, asessment_outcome_code TEXT, candidate_id NUMBER);"
      }
    ],
    [
      {
        "question": "Hello! How many students are there in total?",
        "query": "SELECT COUNT ( * ) FROM students",
        "schema": "CREATE TABLE Student_Course_Attendance (student_id NUMBER, course_id NUMBER); CREATE TABLE Candidate_Assessments (candidate_id NUMBER); CREATE TABLE Student_Course_Registrations (course_id NUMBER, student_id NUMBER); CREATE TABLE People (person_id NUMBER, last_name TEXT, first_name TEXT); CREATE TABLE Addresses (address_id NUMBER); CREATE TABLE Courses (course_id TEXT); CREATE TABLE People_Addresses (person_id NUMBER, person_address_id NUMBER); CREATE TABLE Students (student_id NUMBER, student_details TEXT); CREATE TABLE Candidates (candidate_id NUMBER);"
      },
      {
        "question": "Great!  Can you list the ids of these students, and filter the list by only the students who are registered for one or more courses?",
        "query": "SELECT DISTINCT t1.student_id FROM students AS t1 JOIN student_course_registrations AS t2 ON t1.student_id = t2.student_id",
        "schema": "CREATE TABLE Courses (course_id TEXT); CREATE TABLE Candidates (candidate_id NUMBER); CREATE TABLE People_Addresses (person_id NUMBER, person_address_id NUMBER); CREATE TABLE Students (student_details TEXT, student_id NUMBER); CREATE TABLE People (last_name TEXT, person_id NUMBER, first_name TEXT); CREATE TABLE Addresses (address_id NUMBER); CREATE TABLE Student_Course_Registrations (student_id NUMBER, course_id NUMBER); CREATE TABLE Candidate_Assessments (candidate_id NUMBER); CREATE TABLE Student_Course_Attendance (student_id NUMBER, course_id NUMBER);"
      },
      {
        "question": "Awesome!  Can you also add to this list the number of registered courses for each of these students?",
        "query": "SELECT t1.student_id , COUNT ( * ) FROM students AS t1 JOIN student_course_registrations AS t2 ON t1.student_id = t2.student_id GROUP BY t1.student_id",
        "schema": "CREATE TABLE Candidates (candidate_id NUMBER); CREATE TABLE Addresses (address_id NUMBER); CREATE TABLE Student_Course_Attendance (course_id NUMBER, student_id NUMBER); CREATE TABLE Candidate_Assessments (candidate_id NUMBER); CREATE TABLE Students (student_id NUMBER, student_details TEXT); CREATE TABLE Student_Course_Registrations (course_id NUMBER, student_id NUMBER); CREATE TABLE Courses (course_id TEXT); CREATE TABLE People_Addresses (person_id NUMBER, person_address_id NUMBER); CREATE TABLE People (last_name TEXT, first_name TEXT, person_id NUMBER);"
      }
    ],
    [
      {
        "question": "What is the name of candidate id 111?",
        "query": "SELECT t3.first_name,t3.middle_name,t3.last_name FROM candidates AS t1 JOIN candidate_assessments AS t2 ON t1.candidate_id = t2.candidate_id JOIN people AS t3 ON t1.candidate_id = t3.person_id WHERE t1.candidate_id = 111",
        "schema": "CREATE TABLE Candidate_Assessments (candidate_id NUMBER, asessment_outcome_code TEXT); CREATE TABLE Students (student_id NUMBER, student_details TEXT); CREATE TABLE Courses (course_name TEXT); CREATE TABLE People (middle_name TEXT, last_name TEXT, first_name TEXT, person_id NUMBER); CREATE TABLE Candidates (candidate_details TEXT, candidate_id NUMBER);"
      },
      {
        "question": "What is the email address of login id zops?",
        "query": "SELECT t3.email_address FROM candidates AS t1 JOIN candidate_assessments AS t2 ON t1.candidate_id = t2.candidate_id JOIN people AS t3 ON t1.candidate_id = t3.person_id WHERE t3.login_name = \"zops\"",
        "schema": "CREATE TABLE Candidate_Assessments (asessment_outcome_code TEXT, candidate_id NUMBER); CREATE TABLE Addresses (address_id NUMBER); CREATE TABLE Candidates (candidate_details TEXT, candidate_id NUMBER); CREATE TABLE People_Addresses (person_address_id NUMBER, person_id NUMBER, address_id NUMBER); CREATE TABLE People (first_name TEXT, login_name TEXT, last_name TEXT, email_address TEXT, person_id NUMBER, middle_name TEXT); CREATE TABLE Students (student_details TEXT, student_id NUMBER); CREATE TABLE Courses (course_name TEXT);"
      },
      {
        "question": "What is the assessment date of candidate id 121?",
        "query": "SELECT t2.assessment_date FROM candidates AS t1 JOIN candidate_assessments AS t2 ON t1.candidate_id = t2.candidate_id JOIN people AS t3 ON t1.candidate_id = t3.person_id WHERE t2.candidate_id = 121",
        "schema": "CREATE TABLE Courses (course_name TEXT); CREATE TABLE Students (student_id NUMBER, student_details TEXT); CREATE TABLE Addresses (address_id NUMBER); CREATE TABLE Candidate_Assessments (candidate_id NUMBER, asessment_outcome_code TEXT, assessment_date TIME); CREATE TABLE People_Addresses (person_address_id NUMBER, address_id NUMBER, date_from TIME, person_id NUMBER); CREATE TABLE Candidates (candidate_id NUMBER, candidate_details TEXT); CREATE TABLE People (first_name TEXT, middle_name TEXT, login_name TEXT, last_name TEXT, email_address TEXT, person_id NUMBER);"
      }
    ],
    [
      {
        "question": "Which students didn't attend courses?",
        "query": "SELECT * FROM student_course_registrations WHERE student_id NOT IN ( SELECT student_id FROM student_course_attendance )",
        "schema": "CREATE TABLE Student_Course_Registrations (course_id NUMBER, student_id NUMBER); CREATE TABLE Student_Course_Attendance (course_id NUMBER, date_of_attendance TIME, student_id NUMBER); CREATE TABLE Students (student_details TEXT, student_id NUMBER); CREATE TABLE People_Addresses (person_id NUMBER); CREATE TABLE Courses (course_id TEXT, course_name TEXT); CREATE TABLE People (first_name TEXT, person_id NUMBER, middle_name TEXT, last_name TEXT);"
      },
      {
        "question": "How about student that did attend courses?",
        "query": "SELECT * FROM student_course_registrations WHERE student_id IN ( SELECT student_id FROM student_course_attendance )",
        "schema": "CREATE TABLE Student_Course_Registrations (student_id NUMBER, course_id NUMBER); CREATE TABLE People_Addresses (person_id NUMBER); CREATE TABLE Student_Course_Attendance (course_id NUMBER, student_id NUMBER, date_of_attendance TIME); CREATE TABLE Students (student_details TEXT, student_id NUMBER); CREATE TABLE Courses (course_name TEXT, course_id TEXT); CREATE TABLE People (person_id NUMBER, middle_name TEXT, first_name TEXT, last_name TEXT);"
      },
      {
        "question": "On what date did the courses start? | Do you mean the registration date of students or the date of attendance of students? | Registration date",
        "query": "SELECT registration_date FROM student_course_registrations",
        "schema": "CREATE TABLE Student_Course_Registrations (registration_date TIME, course_id NUMBER, student_id NUMBER); CREATE TABLE Courses (course_name TEXT, course_id TEXT); CREATE TABLE People (person_id NUMBER, middle_name TEXT, first_name TEXT, last_name TEXT); CREATE TABLE People_Addresses (person_id NUMBER); CREATE TABLE Students (student_details TEXT, student_id NUMBER); CREATE TABLE Student_Course_Attendance (course_id NUMBER, date_of_attendance TIME, student_id NUMBER);"
      }
    ],
    [
      {
        "question": "what is the course id of English course?",
        "query": "SELECT course_id FROM courses WHERE course_name = \"English\"",
        "schema": "CREATE TABLE Courses (course_id TEXT, course_description TEXT, course_name TEXT); CREATE TABLE Candidates (candidate_details TEXT, candidate_id NUMBER); CREATE TABLE People_Addresses (person_id NUMBER); CREATE TABLE Students (student_id NUMBER, student_details TEXT); CREATE TABLE People (last_name TEXT, person_id NUMBER); CREATE TABLE Student_Course_Attendance (course_id NUMBER); CREATE TABLE Student_Course_Registrations (course_id NUMBER, student_id NUMBER); CREATE TABLE Candidate_Assessments (candidate_id NUMBER);"
      },
      {
        "question": "name the student ids who attend the statastic course?in order of attendance date",
        "query": "SELECT t2.student_id FROM courses AS t1 JOIN student_course_attendance AS t2 ON t1.course_id = t2.course_id WHERE t1.course_name = \"statistics\" ORDER BY t2.date_of_attendance",
        "schema": "CREATE TABLE Courses (course_description TEXT, course_name TEXT, course_id TEXT); CREATE TABLE People (person_id NUMBER, last_name TEXT); CREATE TABLE Candidate_Assessments (candidate_id NUMBER); CREATE TABLE Student_Course_Attendance (student_id NUMBER, date_of_attendance TIME, course_id NUMBER); CREATE TABLE Candidates (candidate_id NUMBER, candidate_details TEXT); CREATE TABLE Students (student_id NUMBER, student_details TEXT); CREATE TABLE People_Addresses (person_id NUMBER); CREATE TABLE Student_Course_Registrations (student_id NUMBER, course_id NUMBER);"
      },
      {
        "question": "what is the date of attendance of the student is 121? | the date of attendance of the student with id 121 is 2012-04-09 11:44:34. | which student id attend english and french both course?",
        "query": "SELECT t2.student_id FROM courses AS t1 JOIN student_course_attendance AS t2 ON t1.course_id = t2.course_id WHERE t1.course_name = \"English\" INTERSECT SELECT t2.student_id FROM courses AS t1 JOIN student_course_attendance AS t2 ON t1.course_id = t2.course_id WHERE t1.course_name = \"French\"",
        "schema": "CREATE TABLE People (last_name TEXT, person_id NUMBER); CREATE TABLE Courses (course_description TEXT, course_id TEXT, course_name TEXT); CREATE TABLE People_Addresses (person_id NUMBER); CREATE TABLE Candidates (candidate_details TEXT, candidate_id NUMBER); CREATE TABLE Students (student_details TEXT, student_id NUMBER); CREATE TABLE Student_Course_Attendance (student_id NUMBER, course_id NUMBER, date_of_attendance TIME); CREATE TABLE Candidate_Assessments (candidate_id NUMBER); CREATE TABLE Student_Course_Registrations (student_id NUMBER, course_id NUMBER);"
      }
    ]
  ],
  "icfp_1": [
    [
      {
        "question": "how many authorship there",
        "query": "SELECT COUNT ( * ) FROM authors",
        "schema": "CREATE TABLE Inst (instID NUMBER, name TEXT); CREATE TABLE Papers (paperID NUMBER); CREATE TABLE Authorship (instID NUMBER, paperID NUMBER, authID NUMBER, authOrder NUMBER); CREATE TABLE Authors (authID NUMBER, fname TEXT, lname TEXT);"
      },
      {
        "question": "what is the country of University of Oxford",
        "query": "SELECT country FROM inst WHERE name = \"University of Oxford\"",
        "schema": "CREATE TABLE Inst (name TEXT, country TEXT, instID NUMBER); CREATE TABLE Authors (authID NUMBER, lname TEXT, fname TEXT); CREATE TABLE Papers (paperID NUMBER); CREATE TABLE Authorship (authID NUMBER, paperID NUMBER, authOrder NUMBER, instID NUMBER);"
      },
      {
        "question": "what is the title of paper ID 200",
        "query": "SELECT title FROM papers WHERE paperid = 200",
        "schema": "CREATE TABLE Authorship (authOrder NUMBER, instID NUMBER, authID NUMBER, paperID NUMBER); CREATE TABLE Authors (authID NUMBER, lname TEXT, fname TEXT); CREATE TABLE Inst (instID NUMBER, name TEXT, country TEXT); CREATE TABLE Papers (paperID NUMBER, title TEXT);"
      }
    ],
    [
      {
        "question": "how many papers are presented on the table",
        "query": "SELECT COUNT ( * ) FROM papers",
        "schema": "CREATE TABLE Authorship (paperID NUMBER); CREATE TABLE Papers (title TEXT, paperID NUMBER);"
      },
      {
        "question": "please list out the paper id",
        "query": "SELECT paperid FROM papers",
        "schema": "CREATE TABLE Authorship (paperID NUMBER); CREATE TABLE Papers (title TEXT, paperID NUMBER);"
      },
      {
        "question": "how many title are presented on the table",
        "query": "SELECT COUNT ( title ) FROM papers",
        "schema": "CREATE TABLE Papers (paperID NUMBER, title TEXT); CREATE TABLE Authorship (paperID NUMBER);"
      },
      {
        "question": "please list out the titles on the table",
        "query": "SELECT title FROM papers",
        "schema": "CREATE TABLE Authorship (paperID NUMBER); CREATE TABLE Papers (title TEXT, paperID NUMBER);"
      }
    ],
    [
      {
        "question": "yes | What information do you want to know about the author? The ID, first, or last name? | first and last name",
        "query": "SELECT t1.fname , t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE t3.title = \"Nameless , Painless\"",
        "schema": "CREATE TABLE Papers (paperID NUMBER, title TEXT); CREATE TABLE Authorship (authID NUMBER, paperID NUMBER, authOrder NUMBER); CREATE TABLE Authors (fname TEXT, authID NUMBER, lname TEXT);"
      }
    ],
    [
      {
        "question": "What are the paper id of Gibbons?",
        "query": "SELECT DISTINCT paperid FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid WHERE t1.lname = \"Gibbons\"",
        "schema": "CREATE TABLE Papers (title TEXT, paperID NUMBER); CREATE TABLE Authorship (instID NUMBER, authID NUMBER, authOrder NUMBER, paperID NUMBER); CREATE TABLE Authors (fname TEXT, authID NUMBER, lname TEXT); CREATE TABLE Inst (instID NUMBER, name TEXT);"
      },
      {
        "question": "Who studied at Norterstein University? | did You mean list the name of authors who belong to the institution \"Northeastern University\" | Yes",
        "query": "SELECT DISTINCT t1.fname , t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN inst AS t3 ON t2.instid = t3.instid WHERE t3.name = \"Northeastern University\"",
        "schema": "CREATE TABLE Papers (title TEXT, paperID NUMBER); CREATE TABLE Inst (instID NUMBER, name TEXT); CREATE TABLE Authorship (instID NUMBER, authID NUMBER, authOrder NUMBER, paperID NUMBER); CREATE TABLE Authors (fname TEXT, lname TEXT, authID NUMBER);"
      },
      {
        "question": "What are the auth id of Ralf?",
        "query": "SELECT authid FROM authors WHERE fname = \"Ralf\"",
        "schema": "CREATE TABLE Authorship (paperID NUMBER, authID NUMBER, instID NUMBER, authOrder NUMBER); CREATE TABLE Authors (fname TEXT, authID NUMBER, lname TEXT); CREATE TABLE Inst (instID NUMBER, name TEXT); CREATE TABLE Papers (paperID NUMBER, title TEXT);"
      },
      {
        "question": "Which authors belong to the institution \"Google\"? Show the first names and last names?",
        "query": "SELECT DISTINCT t1.fname , t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN inst AS t3 ON t2.instid = t3.instid WHERE t3.name = \"Google\"",
        "schema": "CREATE TABLE Authorship (instID NUMBER, authOrder NUMBER, paperID NUMBER, authID NUMBER); CREATE TABLE Inst (name TEXT, instID NUMBER); CREATE TABLE Authors (fname TEXT, authID NUMBER, lname TEXT); CREATE TABLE Papers (title TEXT, paperID NUMBER);"
      }
    ],
    [
      {
        "question": "Hi! What is the name of the institution that \"Mathias Blume\" is associated with?",
        "query": "SELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN inst AS t3 ON t2.instid = t3.instid WHERE t1.fname = \"Matthias\" AND t1.lname = \"Blume\"",
        "schema": "CREATE TABLE Authorship (instID NUMBER, authOrder NUMBER, paperID NUMBER, authID NUMBER); CREATE TABLE Inst (name TEXT, instID NUMBER); CREATE TABLE Papers (paperID NUMBER); CREATE TABLE Authors (authID NUMBER, fname TEXT, lname TEXT);"
      },
      {
        "question": "How many papers does Mathias Blume have authorship of?",
        "query": "SELECT COUNT ( t1.authid ) FROM authorship AS t1 JOIN authors AS t2 ON t1.authid = t2.authid WHERE t2.fname = \"Matthias\" AND t2.lname = \"Blume\"",
        "schema": "CREATE TABLE Authors (authID NUMBER, lname TEXT, fname TEXT); CREATE TABLE Authorship (authOrder NUMBER, paperID NUMBER, authID NUMBER, instID NUMBER); CREATE TABLE Inst (instID NUMBER, name TEXT); CREATE TABLE Papers (title TEXT, paperID NUMBER);"
      }
    ],
    [
      {
        "question": "What institution does \"Katsuhiro Ueno\" belong to?",
        "query": "SELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN inst AS t3 ON t2.instid = t3.instid WHERE t1.fname = \"Katsuhiro\" AND t1.lname = \"Ueno\"",
        "schema": "CREATE TABLE Authors (lname TEXT, authID NUMBER, fname TEXT); CREATE TABLE Authorship (instID NUMBER, paperID NUMBER, authOrder NUMBER, authID NUMBER); CREATE TABLE Inst (name TEXT, instID NUMBER, country TEXT); CREATE TABLE Papers (paperID NUMBER);"
      },
      {
        "question": "What is Katsuhiro Ueno's author ID?",
        "query": "SELECT authid FROM authors WHERE fname = 'Katsuhiro' AND lname = 'Ueno'",
        "schema": "CREATE TABLE Authors (authID NUMBER, fname TEXT, lname TEXT); CREATE TABLE Authorship (instID NUMBER, authID NUMBER, authOrder NUMBER, paperID NUMBER); CREATE TABLE Papers (paperID NUMBER); CREATE TABLE Inst (instID NUMBER, country TEXT, name TEXT);"
      },
      {
        "question": "Okay. What country is Tohoku University located in?",
        "query": "SELECT country FROM inst WHERE name = 'Tohoku University'",
        "schema": "CREATE TABLE Authorship (instID NUMBER, authOrder NUMBER, authID NUMBER, paperID NUMBER); CREATE TABLE Authors (lname TEXT, fname TEXT, authID NUMBER); CREATE TABLE Inst (country TEXT, instID NUMBER, name TEXT); CREATE TABLE Papers (paperID NUMBER);"
      },
      {
        "question": "How many authors belong to Tohoku University?",
        "query": "SELECT COUNT ( * ) FROM inst AS t1 JOIN authorship AS t2 ON t1.instid = t2.instid WHERE inst.name = 'Tohoku University'",
        "schema": "CREATE TABLE Papers (paperID NUMBER); CREATE TABLE Inst (country TEXT, name TEXT, instID NUMBER); CREATE TABLE Authorship (instID NUMBER, authOrder NUMBER, authID NUMBER, paperID NUMBER); CREATE TABLE Authors (lname TEXT, authID NUMBER, fname TEXT);"
      },
      {
        "question": "What is Tohoku University's institution ID?",
        "query": "SELECT instid FROM inst WHERE name = 'Tohoku University'",
        "schema": "CREATE TABLE Inst (name TEXT, country TEXT, instID NUMBER); CREATE TABLE Authors (fname TEXT, lname TEXT, authID NUMBER); CREATE TABLE Papers (paperID NUMBER); CREATE TABLE Authorship (paperID NUMBER, authOrder NUMBER, instID NUMBER, authID NUMBER);"
      }
    ],
    [
      {
        "question": "What is the name of the organization that has published the largest number of papers?",
        "query": "SELECT t1.name FROM inst AS t1 JOIN authorship AS t2 ON t1.instid = t2.instid JOIN papers AS t3 ON t2.paperid = t3.paperid GROUP BY t1.name ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Authors (authID NUMBER); CREATE TABLE Inst (instID NUMBER, country TEXT, name TEXT); CREATE TABLE Papers (title TEXT, paperID NUMBER); CREATE TABLE Authorship (instID NUMBER, paperID NUMBER, authID NUMBER);"
      },
      {
        "question": "What is the Country code for University of Oxford?",
        "query": "SELECT country FROM inst WHERE name = 'University of Oxford'",
        "schema": "CREATE TABLE Authorship (authID NUMBER, paperID NUMBER, instID NUMBER); CREATE TABLE Papers (title TEXT, paperID NUMBER); CREATE TABLE Inst (country TEXT, name TEXT, instID NUMBER); CREATE TABLE Authors (authID NUMBER);"
      },
      {
        "question": "What is the instID code for University of Oxford?",
        "query": "SELECT instid FROM inst WHERE name = 'University of Oxford'",
        "schema": "CREATE TABLE Inst (name TEXT, country TEXT, instID NUMBER); CREATE TABLE Papers (title TEXT, paperID NUMBER); CREATE TABLE Authorship (paperID NUMBER, instID NUMBER, authID NUMBER); CREATE TABLE Authors (authID NUMBER);"
      },
      {
        "question": "What is the paperID code for University of Oxford?",
        "query": "SELECT DISTINCT t1.paperid FROM papers AS t1 JOIN authorship AS t2 JOIN inst AS t3 WHERE t3.name = 'University of Oxford'",
        "schema": "CREATE TABLE Authorship (paperID NUMBER, authID NUMBER, instID NUMBER); CREATE TABLE Authors (authID NUMBER); CREATE TABLE Papers (paperID NUMBER, title TEXT); CREATE TABLE Inst (instID NUMBER, name TEXT, country TEXT);"
      },
      {
        "question": "What is the Title of paperID 200?",
        "query": "SELECT title FROM papers WHERE paperid = '200'",
        "schema": "CREATE TABLE Authorship (instID NUMBER, authID NUMBER, paperID NUMBER); CREATE TABLE Inst (name TEXT, instID NUMBER, country TEXT); CREATE TABLE Papers (paperID NUMBER, title TEXT); CREATE TABLE Authors (authID NUMBER);"
      }
    ],
    [
      {
        "question": "what is the name of the papers publishes by Indiana University",
        "query": "SELECT DISTINCT t1.title FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid = t2.paperid JOIN inst AS t3 ON t2.instid = t3.instid WHERE t3.name = \"Indiana University\"",
        "schema": "CREATE TABLE Inst (instID NUMBER, name TEXT); CREATE TABLE Authorship (authID NUMBER, instID NUMBER, paperID NUMBER); CREATE TABLE Papers (paperID NUMBER, title TEXT);"
      },
      {
        "question": "what is the paper id?",
        "query": "SELECT paperid FROM papers WHERE title = ( SELECT DISTINCT t1.title FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid = t2.paperid JOIN inst AS t3 ON t2.instid = t3.instid WHERE t3.name = \"Indiana University\" )",
        "schema": "CREATE TABLE Authorship (paperID NUMBER, authID NUMBER, instID NUMBER); CREATE TABLE Papers (title TEXT, paperID NUMBER); CREATE TABLE Inst (instID NUMBER, name TEXT);"
      },
      {
        "question": "what is the author count?",
        "query": "SELECT COUNT ( * ) FROM authorship",
        "schema": "CREATE TABLE Authors (authID NUMBER); CREATE TABLE Papers (paperID NUMBER, title TEXT); CREATE TABLE Authorship (instID NUMBER, authOrder NUMBER, paperID NUMBER, authID NUMBER); CREATE TABLE Inst (name TEXT, instID NUMBER);"
      }
    ],
    [
      {
        "question": "What is the name of the organization that published the greatest number of papers?",
        "query": "SELECT t1.name FROM inst AS t1 JOIN authorship AS t2 ON t1.instid = t2.instid JOIN papers AS t3 ON t2.paperid = t3.paperid GROUP BY t1.name ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Papers (title TEXT, paperID NUMBER); CREATE TABLE Inst (name TEXT, instID NUMBER); CREATE TABLE Authorship (authID NUMBER, paperID NUMBER, instID NUMBER);"
      },
      {
        "question": "What is the name of the organization that published the least number of papers?",
        "query": "SELECT t1.name FROM inst AS t1 JOIN authorship AS t2 ON t1.instid = t2.instid JOIN papers AS t3 ON t2.paperid = t3.paperid GROUP BY t1.name ORDER BY COUNT ( * ) ASC LIMIT 1",
        "schema": "CREATE TABLE Authorship (instID NUMBER, paperID NUMBER, authID NUMBER); CREATE TABLE Papers (paperID NUMBER, title TEXT); CREATE TABLE Inst (name TEXT, instID NUMBER);"
      },
      {
        "question": "What are the titles of all the papers Google published?",
        "query": "SELECT t3.title FROM inst AS t1 JOIN authorship AS t2 ON t1.instid = t2.instid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE t1.name = \"Google\"",
        "schema": "CREATE TABLE Authorship (authID NUMBER, paperID NUMBER, instID NUMBER); CREATE TABLE Papers (title TEXT, paperID NUMBER); CREATE TABLE Inst (name TEXT, instID NUMBER);"
      }
    ],
    [
      {
        "question": "Which papers were published in an institution in the \"USA\" please?",
        "query": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid JOIN inst AS t4 ON t2.instid = t4.instid WHERE t4.country = \"USA\"",
        "schema": "CREATE TABLE Authors (authID NUMBER); CREATE TABLE Inst (instID NUMBER, country TEXT, name TEXT); CREATE TABLE Papers (title TEXT, paperID NUMBER); CREATE TABLE Authorship (paperID NUMBER, instID NUMBER, authID NUMBER);"
      },
      {
        "question": "Can you please tell me which ones of those have \"Turon\" as their second author?",
        "query": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid JOIN inst AS t4 ON t2.instid = t4.instid WHERE t4.country = \"USA\" AND t2.authorder = 2 AND t1.lname = \"Turon\"",
        "schema": "CREATE TABLE Papers (paperID NUMBER, title TEXT); CREATE TABLE Authors (authID NUMBER, fname TEXT, lname TEXT); CREATE TABLE Authorship (authID NUMBER, authOrder NUMBER, instID NUMBER, paperID NUMBER); CREATE TABLE Inst (name TEXT, instID NUMBER, country TEXT);"
      },
      {
        "question": "What is Turon's author id?",
        "query": "SELECT authid FROM authors WHERE lname = \"Turon\"",
        "schema": "CREATE TABLE Inst (instID NUMBER, name TEXT, country TEXT); CREATE TABLE Papers (title TEXT, paperID NUMBER); CREATE TABLE Authors (lname TEXT, authID NUMBER, fname TEXT); CREATE TABLE Authorship (instID NUMBER, paperID NUMBER, authID NUMBER, authOrder NUMBER);"
      }
    ],
    [
      {
        "question": "Hello!  Can you provide me with a list of all paper IDs and paper titles that correspond to \"Indiana University\"?",
        "query": "SELECT DISTINCT t1.title,t1.paperid FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid = t2.paperid JOIN inst AS t3 ON t2.instid = t3.instid WHERE t3.name = \"Indiana University\"",
        "schema": "CREATE TABLE Papers (title TEXT, paperID NUMBER); CREATE TABLE Inst (name TEXT, instID NUMBER); CREATE TABLE Authorship (authID NUMBER, paperID NUMBER, instID NUMBER); CREATE TABLE Authors (lname TEXT, authID NUMBER);"
      },
      {
        "question": "Great!  Can you please list all of the author Ids that are associated with that paper title?",
        "query": "SELECT DISTINCT t2.authid FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid = t2.paperid JOIN inst AS t3 ON t2.instid = t3.instid WHERE t1.title = ( SELECT DISTINCT t1.title FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid = t2.paperid JOIN inst AS t3 ON t2.instid = t3.instid WHERE t3.name = \"Indiana University\" )",
        "schema": "CREATE TABLE Papers (paperID NUMBER, title TEXT); CREATE TABLE Inst (name TEXT, instID NUMBER); CREATE TABLE Authors (authID NUMBER, lname TEXT); CREATE TABLE Authorship (authOrder NUMBER, paperID NUMBER, instID NUMBER, authID NUMBER);"
      },
      {
        "question": "Great! Can you tell me what the total number of papers are for each of these author IDs?...in other words, how many papers have each of these authors published?",
        "query": "SELECT authid,COUNT ( * ) FROM authorship GROUP BY authid",
        "schema": "CREATE TABLE Authorship (paperID NUMBER, authID NUMBER, instID NUMBER, authOrder NUMBER); CREATE TABLE Inst (name TEXT, instID NUMBER); CREATE TABLE Papers (paperID NUMBER, title TEXT); CREATE TABLE Authors (lname TEXT, authID NUMBER, fname TEXT);"
      }
    ],
    [
      {
        "question": "What is the title of the paper that has the largest number of authors?",
        "query": "SELECT t2.title FROM authorship AS t1 JOIN papers AS t2 ON t1.paperid = t2.paperid WHERE t1.authorder = ( SELECT MAX ( authorder ) FROM authorship )",
        "schema": "CREATE TABLE Papers (paperID NUMBER, title TEXT); CREATE TABLE Authorship (paperID NUMBER, authOrder NUMBER, authID NUMBER);"
      },
      {
        "question": "How many authors are there?",
        "query": "SELECT COUNT ( DISTINCT authid ) FROM authorship",
        "schema": "CREATE TABLE Authorship (authOrder NUMBER, authID NUMBER, paperID NUMBER); CREATE TABLE Papers (title TEXT, paperID NUMBER); CREATE TABLE Authors (authID NUMBER);"
      },
      {
        "question": "What is the title of the paper that has the smallest number of authors?",
        "query": "SELECT t2.title FROM authorship AS t1 JOIN papers AS t2 ON t1.paperid = t2.paperid WHERE t1.authorder = ( SELECT MIN ( authorder ) FROM authorship )",
        "schema": "CREATE TABLE Authors (authID NUMBER); CREATE TABLE Papers (title TEXT, paperID NUMBER); CREATE TABLE Authorship (authID NUMBER, paperID NUMBER, authOrder NUMBER);"
      },
      {
        "question": "What is the average number of authors for all titles?",
        "query": "SELECT paperid,AVG ( authorder ) FROM authorship GROUP BY paperid",
        "schema": "CREATE TABLE Authorship (paperID NUMBER, authID NUMBER, authOrder NUMBER); CREATE TABLE Authors (authID NUMBER); CREATE TABLE Papers (paperID NUMBER, title TEXT);"
      }
    ],
    [
      {
        "question": "Which country published the least papers?",
        "query": "SELECT t1.country FROM inst AS t1 JOIN authorship AS t2 ON t1.instid = t2.instid JOIN papers AS t3 ON t2.paperid = t3.paperid GROUP BY t1.country ORDER BY COUNT ( * ) LIMIT 1",
        "schema": "CREATE TABLE Authorship (paperID NUMBER, authID NUMBER, instID NUMBER); CREATE TABLE Inst (name TEXT, instID NUMBER, country TEXT); CREATE TABLE Papers (title TEXT, paperID NUMBER);"
      },
      {
        "question": "How about country with most papers?",
        "query": "SELECT t1.country FROM inst AS t1 JOIN authorship AS t2 ON t1.instid = t2.instid JOIN papers AS t3 ON t2.paperid = t3.paperid GROUP BY t1.country ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Inst (instID NUMBER, name TEXT, country TEXT); CREATE TABLE Papers (paperID NUMBER, title TEXT); CREATE TABLE Authorship (paperID NUMBER, authID NUMBER, instID NUMBER);"
      },
      {
        "question": "How many papers did it publish?",
        "query": "SELECT COUNT ( t3.paperid ) FROM inst AS t1 JOIN authorship AS t2 ON t1.instid = t2.instid JOIN papers AS t3 ON t2.paperid = t3.paperid GROUP BY t1.country ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Papers (paperID NUMBER, title TEXT); CREATE TABLE Inst (instID NUMBER, country TEXT, name TEXT); CREATE TABLE Authorship (paperID NUMBER, instID NUMBER, authID NUMBER);"
      }
    ],
    [
      {
        "question": "What are the titles of the papers?",
        "query": "SELECT title FROM papers",
        "schema": "CREATE TABLE Authorship (paperID NUMBER); CREATE TABLE Papers (paperID NUMBER, title TEXT);"
      },
      {
        "question": "Which titles have more than one author?",
        "query": "SELECT t2.title FROM authorship AS t1 JOIN papers AS t2 ON t1.paperid = t2.paperid WHERE t1.authorder > 2",
        "schema": "CREATE TABLE Papers (paperID NUMBER, title TEXT); CREATE TABLE Authorship (authOrder NUMBER, paperID NUMBER, authID NUMBER);"
      },
      {
        "question": "Which title has the most authors?",
        "query": "SELECT t2.title FROM authorship AS t1 JOIN papers AS t2 ON t1.paperid = t2.paperid WHERE t1.authorder = ( SELECT MAX ( authorder ) FROM authorship )",
        "schema": "CREATE TABLE Papers (paperID NUMBER, title TEXT); CREATE TABLE Authorship (authID NUMBER, authOrder NUMBER, paperID NUMBER);"
      }
    ],
    [
      {
        "question": "can you give me the last names of the authors?",
        "query": "SELECT lname FROM authors",
        "schema": "CREATE TABLE Authors (fname TEXT, lname TEXT, authID NUMBER); CREATE TABLE Authorship (paperID NUMBER, authID NUMBER); CREATE TABLE Papers (paperID NUMBER);"
      },
      {
        "question": "who authored the paper Binders Unbound? | What information do you want about the author of the paper Binders Unbound? | i want their names",
        "query": "SELECT t1.fname, t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE t3.title = \"Binders Unbound\"",
        "schema": "CREATE TABLE Authorship (authOrder NUMBER, paperID NUMBER, authID NUMBER); CREATE TABLE Authors (authID NUMBER, fname TEXT, lname TEXT); CREATE TABLE Papers (paperID NUMBER, title TEXT);"
      },
      {
        "question": "can you just show me their last names?",
        "query": "SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE t3.title = \"Binders Unbound\"",
        "schema": "CREATE TABLE Authorship (authID NUMBER, authOrder NUMBER, paperID NUMBER); CREATE TABLE Papers (title TEXT, paperID NUMBER); CREATE TABLE Authors (lname TEXT, fname TEXT, authID NUMBER);"
      }
    ],
    [
      {
        "question": "Please find all the papers published by \"Aaron Turon\"?",
        "query": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE t1.fname = \"Aaron\" AND t1.lname = \"Turon\"",
        "schema": "CREATE TABLE Papers (paperID NUMBER, title TEXT); CREATE TABLE Authors (fname TEXT, authID NUMBER, lname TEXT); CREATE TABLE Authorship (authID NUMBER, paperID NUMBER, authOrder NUMBER, instID NUMBER);"
      },
      {
        "question": "Please find all the papers published by \"Ralf Hinze\"?",
        "query": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE t1.fname = \"Ralf\" AND t1.lname = \"Hinze\"",
        "schema": "CREATE TABLE Authors (fname TEXT, authID NUMBER, lname TEXT); CREATE TABLE Authorship (paperID NUMBER, authID NUMBER, authOrder NUMBER, instID NUMBER); CREATE TABLE Papers (title TEXT, paperID NUMBER);"
      },
      {
        "question": "Can you add the paper IDs of those to the table please?",
        "query": "SELECT t3.title,t3.paperid FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE t1.fname = \"Ralf\" AND t1.lname = \"Hinze\"",
        "schema": "CREATE TABLE Authors (lname TEXT, authID NUMBER, fname TEXT); CREATE TABLE Authorship (paperID NUMBER, authOrder NUMBER, instID NUMBER, authID NUMBER); CREATE TABLE Papers (title TEXT, paperID NUMBER);"
      },
      {
        "question": "What is the name of the author who wrote the most papers? | Do you mean the fname or  lname? | Both please",
        "query": "SELECT t1.lname,t1.fname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid GROUP BY t1.authid ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Authorship (authOrder NUMBER, instID NUMBER, authID NUMBER, paperID NUMBER); CREATE TABLE Papers (paperID NUMBER, title TEXT); CREATE TABLE Authors (fname TEXT, lname TEXT, authID NUMBER);"
      },
      {
        "question": "What are the lname and fname of all authors that wrote exactly 1 paper?",
        "query": "SELECT t1.lname,t1.fname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid GROUP BY t1.authid HAVING COUNT ( * ) = 1",
        "schema": "CREATE TABLE Authors (lname TEXT, fname TEXT, authID NUMBER); CREATE TABLE Authorship (authOrder NUMBER, paperID NUMBER, instID NUMBER, authID NUMBER); CREATE TABLE Papers (paperID NUMBER, title TEXT);"
      }
    ],
    [
      {
        "question": "retrieve the country that has published the least papers?",
        "query": "SELECT t1.country FROM inst AS t1 JOIN authorship AS t2 ON t1.instid = t2.instid JOIN papers AS t3 ON t2.paperid = t3.paperid GROUP BY t1.country ORDER BY COUNT ( * ) LIMIT 1",
        "schema": "CREATE TABLE Papers (title TEXT, paperID NUMBER); CREATE TABLE Authorship (paperID NUMBER, authID NUMBER, instID NUMBER); CREATE TABLE Inst (instID NUMBER, name TEXT, country TEXT);"
      },
      {
        "question": "retrieve the country that has published the most papers?",
        "query": "SELECT t1.country FROM inst AS t1 JOIN authorship AS t2 ON t1.instid = t2.instid JOIN papers AS t3 ON t2.paperid = t3.paperid GROUP BY t1.country ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Inst (name TEXT, country TEXT, instID NUMBER); CREATE TABLE Papers (title TEXT, paperID NUMBER); CREATE TABLE Authorship (authID NUMBER, instID NUMBER, paperID NUMBER);"
      },
      {
        "question": "What is count of most papers which is USA has published?",
        "query": "SELECT t1.country,COUNT ( * ) FROM inst AS t1 JOIN authorship AS t2 ON t1.instid = t2.instid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE country = \"USA\"",
        "schema": "CREATE TABLE Inst (country TEXT, name TEXT, instID NUMBER); CREATE TABLE Papers (paperID NUMBER, title TEXT); CREATE TABLE Authorship (authID NUMBER, instID NUMBER, paperID NUMBER);"
      }
    ],
    [
      {
        "question": "What is the number of papers published by Tokohu University",
        "query": "SELECT COUNT ( DISTINCT t1.title ) FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid = t2.paperid JOIN inst AS t3 ON t2.instid = t3.instid WHERE t3.name = \"Tokohu University\"",
        "schema": "CREATE TABLE Authorship (instID NUMBER, paperID NUMBER, authID NUMBER); CREATE TABLE Inst (instID NUMBER, name TEXT); CREATE TABLE Papers (title TEXT, paperID NUMBER);"
      },
      {
        "question": "What about the numbers of papers published by University of Oxford?",
        "query": "SELECT COUNT ( DISTINCT t1.title ) FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid = t2.paperid JOIN inst AS t3 ON t2.instid = t3.instid WHERE t3.name = \"University of Oxford\"",
        "schema": "CREATE TABLE Papers (paperID NUMBER, title TEXT); CREATE TABLE Authorship (paperID NUMBER, authID NUMBER, instID NUMBER); CREATE TABLE Inst (instID NUMBER, name TEXT);"
      },
      {
        "question": "Do you have a comparison of how many papers were published by each institution?",
        "query": "SELECT t3.name,COUNT ( DISTINCT t1.title ) FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid = t2.paperid JOIN inst AS t3 ON t2.instid = t3.instid GROUP BY t3.name",
        "schema": "CREATE TABLE Papers (title TEXT, paperID NUMBER); CREATE TABLE Authorship (instID NUMBER, paperID NUMBER, authID NUMBER); CREATE TABLE Inst (name TEXT, instID NUMBER);"
      }
    ],
    [
      {
        "question": "Hello! Can you provide me with a list of the First and Last names of all authors with the last name of \"Ohori\"?",
        "query": "SELECT fname, lname FROM authors WHERE lname = \"Ohori\"",
        "schema": "CREATE TABLE Papers (paperID NUMBER); CREATE TABLE Authors (authID NUMBER, lname TEXT, fname TEXT); CREATE TABLE Authorship (paperID NUMBER, authID NUMBER, authOrder NUMBER);"
      },
      {
        "question": "Thank you so much!  Can you please provide me with Atsushi Ohori's author ID?",
        "query": "SELECT authid FROM authors WHERE lname = \"Ohori\" AND fname = 'Atsushi'",
        "schema": "CREATE TABLE Authors (authID NUMBER, lname TEXT, fname TEXT); CREATE TABLE Authorship (authOrder NUMBER, authID NUMBER, paperID NUMBER); CREATE TABLE Papers (paperID NUMBER);"
      },
      {
        "question": "Can you please provide me with a list of all paper IDs that are associated with author ID 57?",
        "query": "SELECT paperid FROM authorship WHERE authid = 57",
        "schema": "CREATE TABLE Authors (fname TEXT, lname TEXT, authID NUMBER); CREATE TABLE Authorship (authID NUMBER, authOrder NUMBER, paperID NUMBER, instID NUMBER); CREATE TABLE Papers (paperID NUMBER, title TEXT);"
      },
      {
        "question": "Thank you!  Can you provide me with the paper title of PaperID 204?",
        "query": "SELECT title FROM papers WHERE paperid = 204",
        "schema": "CREATE TABLE Authors (fname TEXT, lname TEXT, authID NUMBER); CREATE TABLE Authorship (paperID NUMBER, authOrder NUMBER, authID NUMBER, instID NUMBER); CREATE TABLE Papers (title TEXT, paperID NUMBER);"
      }
    ]
  ],
  "formula_1": [
    [
      {
        "question": "Hello, how many circuits belong to France?",
        "query": "SELECT COUNT ( * ) FROM circuits WHERE country = \"France\"",
        "schema": "CREATE TABLE drivers (nationality TEXT, driverId NUMBER); CREATE TABLE races (raceId NUMBER, circuitId NUMBER); CREATE TABLE circuits (circuitRef TEXT, name TEXT, circuitId NUMBER, country TEXT, lng NUMBER, location TEXT); CREATE TABLE constructors (nationality TEXT, constructorId NUMBER);"
      },
      {
        "question": "Can you please provide their circuit IDs?",
        "query": "SELECT circuitid FROM circuits WHERE country = \"France\"",
        "schema": "CREATE TABLE drivers (nationality TEXT, driverId NUMBER); CREATE TABLE races (raceId NUMBER, circuitId NUMBER); CREATE TABLE circuits (location TEXT, lng NUMBER, country TEXT, circuitRef TEXT, name TEXT, circuitId NUMBER); CREATE TABLE constructors (nationality TEXT, constructorId NUMBER);"
      },
      {
        "question": "Can you also include the location of these circuits?",
        "query": "SELECT circuitid, LOCATION FROM circuits WHERE country = \"France\"",
        "schema": "CREATE TABLE races (raceId NUMBER, circuitId NUMBER); CREATE TABLE constructors (nationality TEXT, constructorId NUMBER); CREATE TABLE circuits (name TEXT, lng NUMBER, location TEXT, circuitId NUMBER, lat NUMBER, circuitRef TEXT, country TEXT); CREATE TABLE drivers (driverId NUMBER, nationality TEXT);"
      }
    ],
    [
      {
        "question": "Can you provide me with a list of all of the names of the races?",
        "query": "SELECT name FROM races",
        "schema": "CREATE TABLE circuits (circuitId NUMBER, name TEXT); CREATE TABLE results (raceId NUMBER, driverId NUMBER); CREATE TABLE driverStandings (raceId NUMBER); CREATE TABLE pitStops (raceId NUMBER); CREATE TABLE drivers (driverId NUMBER, surname TEXT); CREATE TABLE races (circuitId NUMBER, round NUMBER, raceId NUMBER, name TEXT); CREATE TABLE lapTimes (raceId NUMBER);"
      },
      {
        "question": "Which of these races are held after 12:00:00?",
        "query": "SELECT name FROM races WHERE TIME > \"12:00:00\"",
        "schema": "CREATE TABLE results (driverId NUMBER, time TEXT, raceId NUMBER, milliseconds NUMBER); CREATE TABLE drivers (surname TEXT, driverId NUMBER); CREATE TABLE lapTimes (raceId NUMBER, time TEXT); CREATE TABLE pitStops (raceId NUMBER); CREATE TABLE circuits (circuitId NUMBER, name TEXT); CREATE TABLE driverStandings (raceId NUMBER); CREATE TABLE races (circuitId NUMBER, year NUMBER, name TEXT, round NUMBER, date TEXT, raceId NUMBER, time TEXT);"
      },
      {
        "question": "Can you list the races that are held before 09:00:00?",
        "query": "SELECT name FROM races WHERE TIME < \"09:00:00\"",
        "schema": "CREATE TABLE circuits (circuitId NUMBER, name TEXT); CREATE TABLE races (raceId NUMBER, date TEXT, name TEXT, year NUMBER, time TEXT, circuitId NUMBER, round NUMBER); CREATE TABLE driverStandings (raceId NUMBER); CREATE TABLE results (raceId NUMBER, time TEXT, milliseconds NUMBER, driverId NUMBER); CREATE TABLE lapTimes (raceId NUMBER, time TEXT); CREATE TABLE drivers (driverId NUMBER, surname TEXT); CREATE TABLE pitStops (raceId NUMBER);"
      }
    ],
    [
      {
        "question": "Hi, What are the unique names of races that are held in Spain?",
        "query": "SELECT DISTINCT t1.name FROM races AS t1 JOIN circuits AS t2 ON t1.circuitid = t2.circuitid WHERE t2.country = \"Spain\"",
        "schema": "CREATE TABLE drivers (nationality TEXT, driverId NUMBER); CREATE TABLE circuits (circuitRef TEXT, country TEXT, location TEXT, name TEXT, circuitId NUMBER); CREATE TABLE races (name TEXT, raceId NUMBER, round NUMBER, circuitId NUMBER); CREATE TABLE constructors (nationality TEXT); CREATE TABLE results (raceId NUMBER); CREATE TABLE driverStandings (raceId NUMBER); CREATE TABLE pitStops (raceId NUMBER);"
      },
      {
        "question": "Where is the European Grand Prix held? | Do you want to return the location, country or latitude and longitude? | Country please.",
        "query": "SELECT DISTINCT t2.country FROM races AS t1 JOIN circuits AS t2 ON t1.circuitid = t2.circuitid WHERE t1.name = 'European Grand Prix'",
        "schema": "CREATE TABLE races (time TEXT, raceId NUMBER, circuitId NUMBER, name TEXT, round NUMBER); CREATE TABLE driverStandings (raceId NUMBER); CREATE TABLE results (raceId NUMBER); CREATE TABLE circuits (name TEXT, location TEXT, lat NUMBER, circuitId NUMBER, circuitRef TEXT, country TEXT); CREATE TABLE pitStops (raceId NUMBER); CREATE TABLE drivers (nationality TEXT, driverId NUMBER); CREATE TABLE constructors (nationality TEXT);"
      },
      {
        "question": "What year was the last European Grand Prix held in Spain?",
        "query": "SELECT t1.year FROM races AS t1 JOIN circuits AS t2 ON t1.circuitid = t2.circuitid WHERE t2.country = \"Spain\" ORDER BY t1.year DESC LIMIT 1",
        "schema": "CREATE TABLE seasons (year NUMBER, url TEXT); CREATE TABLE races (raceId NUMBER, round NUMBER, name TEXT, circuitId NUMBER, year NUMBER, time TEXT, date TEXT); CREATE TABLE pitStops (raceId NUMBER); CREATE TABLE drivers (nationality TEXT, driverId NUMBER); CREATE TABLE circuits (circuitId NUMBER, name TEXT, location TEXT, country TEXT, lat NUMBER, circuitRef TEXT); CREATE TABLE results (raceId NUMBER); CREATE TABLE driverStandings (raceId NUMBER); CREATE TABLE constructors (nationality TEXT);"
      }
    ],
    [
      {
        "question": "what are  race circuits in Spain",
        "query": "SELECT name FROM circuits WHERE country = \"Spain\"",
        "schema": "CREATE TABLE pitStops (raceId NUMBER); CREATE TABLE results (raceId NUMBER); CREATE TABLE driverStandings (raceId NUMBER); CREATE TABLE races (year NUMBER, round NUMBER, circuitId NUMBER, raceId NUMBER, name TEXT); CREATE TABLE circuits (lng NUMBER, location TEXT, alt NUMBER, circuitId NUMBER, name TEXT, country TEXT, circuitRef TEXT); CREATE TABLE drivers (driverId NUMBER, nationality TEXT); CREATE TABLE constructorResults (raceId NUMBER); CREATE TABLE constructors (nationality TEXT);"
      },
      {
        "question": "races held after 2017",
        "query": "SELECT t1.name FROM races AS t1 JOIN circuits AS t2 ON t1.circuitid = t2.circuitid WHERE t1.year > 2017",
        "schema": "CREATE TABLE seasons (year NUMBER, url TEXT); CREATE TABLE driverStandings (raceId NUMBER); CREATE TABLE constructorResults (raceId NUMBER); CREATE TABLE races (date TEXT, circuitId NUMBER, raceId NUMBER, round NUMBER, year NUMBER, time TEXT, name TEXT); CREATE TABLE circuits (alt NUMBER, name TEXT, circuitRef TEXT, lng NUMBER, location TEXT, circuitId NUMBER, country TEXT); CREATE TABLE drivers (driverId NUMBER, nationality TEXT); CREATE TABLE results (raceId NUMBER); CREATE TABLE pitStops (raceId NUMBER); CREATE TABLE constructors (nationality TEXT);"
      },
      {
        "question": "races held after 2017 in spain circuits",
        "query": "SELECT t1.name FROM races AS t1 JOIN circuits AS t2 ON t1.circuitid = t2.circuitid WHERE t2.country = \"Spain\" AND t1.year > 2017",
        "schema": "CREATE TABLE driverStandings (raceId NUMBER); CREATE TABLE drivers (nationality TEXT, driverId NUMBER); CREATE TABLE results (raceId NUMBER); CREATE TABLE circuits (location TEXT, name TEXT, alt NUMBER, country TEXT, lng NUMBER, circuitRef TEXT, circuitId NUMBER); CREATE TABLE constructors (nationality TEXT); CREATE TABLE seasons (year NUMBER, url TEXT); CREATE TABLE pitStops (raceId NUMBER); CREATE TABLE races (name TEXT, circuitId NUMBER, time TEXT, date TEXT, year NUMBER, round NUMBER, raceId NUMBER); CREATE TABLE constructorResults (raceId NUMBER);"
      }
    ],
    [
      {
        "question": "What are the drivers' last names who had 11 pit stops and participated in more than 5 race results?",
        "query": "SELECT t1.surname , t1.driverid FROM drivers AS t1 JOIN pitstops AS t2 ON t1.driverid = t2.driverid GROUP BY t1.driverid HAVING COUNT ( * ) = 11 INTERSECT SELECT t1.surname , t1.driverid FROM drivers AS t1 JOIN results AS t2 ON t1.driverid = t2.driverid GROUP BY t1.driverid HAVING COUNT ( * ) > 5",
        "schema": "CREATE TABLE pitStops (stop NUMBER, duration TEXT, driverId NUMBER, raceId NUMBER); CREATE TABLE races (raceId NUMBER, name TEXT); CREATE TABLE qualifying (driverId NUMBER); CREATE TABLE drivers (number NUMBER, forename TEXT, driverRef TEXT, code TEXT, driverId NUMBER, surname TEXT, dob TEXT); CREATE TABLE driverStandings (raceId NUMBER, driverId NUMBER); CREATE TABLE results (fastestLapTime TEXT, fastestLapSpeed TEXT, number NUMBER, points NUMBER, fastestLap NUMBER, laps NUMBER, position NUMBER, grid NUMBER, driverId NUMBER, milliseconds NUMBER, raceId NUMBER, statusId NUMBER, positionOrder NUMBER, resultId NUMBER, time TEXT); CREATE TABLE lapTimes (driverId NUMBER, raceId NUMBER);"
      },
      {
        "question": "What are the drivers' last names who had 11 pit stops?",
        "query": "SELECT t1.surname , t1.driverid FROM drivers AS t1 JOIN pitstops AS t2 ON t1.driverid = t2.driverid GROUP BY t1.driverid HAVING COUNT ( * ) = 11",
        "schema": "CREATE TABLE qualifying (driverId NUMBER); CREATE TABLE pitStops (stop NUMBER, raceId NUMBER, duration TEXT, driverId NUMBER); CREATE TABLE drivers (surname TEXT, driverId NUMBER, code TEXT, dob TEXT, number NUMBER, driverRef TEXT, forename TEXT); CREATE TABLE results (fastestLapSpeed TEXT, points NUMBER, driverId NUMBER, statusId NUMBER, milliseconds NUMBER, positionOrder NUMBER, grid NUMBER, time TEXT, position NUMBER, laps NUMBER, number NUMBER, resultId NUMBER, raceId NUMBER, fastestLap NUMBER, fastestLapTime TEXT); CREATE TABLE races (raceId NUMBER, name TEXT); CREATE TABLE driverStandings (raceId NUMBER, driverId NUMBER); CREATE TABLE lapTimes (raceId NUMBER, driverId NUMBER);"
      },
      {
        "question": "What are the race ids that the driver with the surname Nakajima was in?",
        "query": "SELECT t2.raceid FROM drivers AS t1 JOIN results AS t2 ON t1.driverid = t2.driverid WHERE t1.surname = \"Nakajima\"",
        "schema": "CREATE TABLE driverStandings (raceId NUMBER, driverId NUMBER); CREATE TABLE lapTimes (raceId NUMBER, driverId NUMBER); CREATE TABLE results (raceId NUMBER, resultId NUMBER, positionOrder NUMBER, number NUMBER, milliseconds NUMBER, time TEXT, position NUMBER, fastestLap NUMBER, fastestLapTime TEXT, fastestLapSpeed TEXT, statusId NUMBER, grid NUMBER, driverId NUMBER, points NUMBER, laps NUMBER); CREATE TABLE drivers (dob TEXT, driverRef TEXT, forename TEXT, driverId NUMBER, number NUMBER, code TEXT, surname TEXT); CREATE TABLE races (raceId NUMBER, round NUMBER, name TEXT); CREATE TABLE qualifying (raceId NUMBER, driverId NUMBER); CREATE TABLE pitStops (raceId NUMBER, driverId NUMBER, stop NUMBER, duration TEXT);"
      },
      {
        "question": "How many wins does that driver have?",
        "query": "SELECT COUNT ( * ) FROM drivers AS t1 JOIN results AS t2 ON t1.driverid = t2.driverid WHERE t1.surname = \"Nakajima\" AND t2.rank = 1",
        "schema": "CREATE TABLE drivers (driverId NUMBER, driverRef TEXT, forename TEXT, surname TEXT, code TEXT, number NUMBER, dob TEXT); CREATE TABLE driverStandings (driverId NUMBER, raceId NUMBER, wins NUMBER); CREATE TABLE results (positionOrder NUMBER, points NUMBER, rank NUMBER, statusId NUMBER, raceId NUMBER, resultId NUMBER, time TEXT, laps NUMBER, fastestLapTime TEXT, grid NUMBER, fastestLap NUMBER, driverId NUMBER, fastestLapSpeed TEXT, number NUMBER, position NUMBER, milliseconds NUMBER); CREATE TABLE races (name TEXT, round NUMBER, raceId NUMBER); CREATE TABLE qualifying (raceId NUMBER, driverId NUMBER); CREATE TABLE lapTimes (raceId NUMBER, driverId NUMBER); CREATE TABLE pitStops (raceId NUMBER, duration TEXT, stop NUMBER, driverId NUMBER);"
      }
    ],
    [
      {
        "question": "What are the driver's names?",
        "query": "SELECT forename,surname FROM drivers",
        "schema": "CREATE TABLE driverStandings (driverId NUMBER); CREATE TABLE drivers (dob TEXT, forename TEXT, code TEXT, driverId NUMBER, driverRef TEXT, surname TEXT);"
      },
      {
        "question": "How many of them participated in more than 5 races?",
        "query": "SELECT COUNT ( * ) FROM ( SELECT ( t1.driverid ) FROM drivers AS t1 JOIN results AS t2 ON t1.driverid = t2.driverid GROUP BY t1.driverid HAVING COUNT ( * ) > 5 )",
        "schema": "CREATE TABLE driverStandings (driverId NUMBER, raceId NUMBER); CREATE TABLE drivers (dob TEXT, code TEXT, forename TEXT, driverRef TEXT, driverId NUMBER, surname TEXT); CREATE TABLE pitStops (driverId NUMBER, raceId NUMBER); CREATE TABLE lapTimes (driverId NUMBER); CREATE TABLE qualifying (driverId NUMBER); CREATE TABLE races (raceId NUMBER, name TEXT); CREATE TABLE results (milliseconds NUMBER, raceId NUMBER, fastestLap NUMBER, driverId NUMBER, number NUMBER, resultId NUMBER, grid NUMBER, rank NUMBER, statusId NUMBER, positionOrder NUMBER, position NUMBER, points NUMBER, fastestLapTime TEXT);"
      }
    ],
    [
      {
        "question": "Find the id, forename and number of races of all drivers who have at least participated in two races?",
        "query": "SELECT t1.driverid , t1.forename , COUNT ( * ) FROM drivers AS t1 JOIN results AS t2 ON t1.driverid = t2.driverid JOIN races AS t3 ON t2.raceid = t3.raceid GROUP BY t1.driverid HAVING COUNT ( * ) > = 2",
        "schema": "CREATE TABLE circuits (circuitId NUMBER, name TEXT); CREATE TABLE races (name TEXT, raceId NUMBER, circuitId NUMBER); CREATE TABLE qualifying (driverId NUMBER, raceId NUMBER); CREATE TABLE pitStops (raceId NUMBER, driverId NUMBER); CREATE TABLE driverStandings (driverStandingsId NUMBER, raceId NUMBER, driverId NUMBER); CREATE TABLE lapTimes (driverId NUMBER, raceId NUMBER); CREATE TABLE results (milliseconds NUMBER, driverId NUMBER, grid NUMBER, statusId NUMBER, points NUMBER, fastestLapSpeed TEXT, positionOrder NUMBER, resultId NUMBER, rank NUMBER, time TEXT, raceId NUMBER, fastestLap NUMBER, positionText TEXT, number NUMBER, fastestLapTime TEXT); CREATE TABLE drivers (driverId NUMBER, forename TEXT, dob TEXT, surname TEXT, code TEXT, driverRef TEXT, number NUMBER);"
      },
      {
        "question": "What is the driver reference and nationality of Fernando? | Do you mean the driver reference and nationality of the driver whose forename is Fernando? | Yes",
        "query": "SELECT driverref , nationality FROM drivers WHERE forename = 'Fernando'",
        "schema": "CREATE TABLE results (fastestLapTime TEXT, driverId NUMBER, fastestLapSpeed TEXT, resultId NUMBER, positionText TEXT, rank NUMBER, statusId NUMBER, positionOrder NUMBER, points NUMBER, fastestLap NUMBER, number NUMBER, raceId NUMBER, time TEXT, milliseconds NUMBER, grid NUMBER); CREATE TABLE circuits (name TEXT, circuitId NUMBER); CREATE TABLE drivers (forename TEXT, driverId NUMBER, code TEXT, number NUMBER, dob TEXT, surname TEXT, driverRef TEXT, nationality TEXT); CREATE TABLE pitStops (driverId NUMBER, raceId NUMBER); CREATE TABLE lapTimes (raceId NUMBER, driverId NUMBER); CREATE TABLE qualifying (driverId NUMBER, raceId NUMBER); CREATE TABLE driverStandings (driverStandingsId NUMBER, raceId NUMBER, driverId NUMBER); CREATE TABLE races (circuitId NUMBER, raceId NUMBER, name TEXT);"
      },
      {
        "question": "What position and how many wins does the forename Fernando have? | Do you mean the position of the driver with forename Fernando when he ranked 1 and the number of times that he ranked 1? | yes",
        "query": "SELECT t2.position, COUNT ( * ) FROM drivers AS t1 JOIN results AS t2 ON t1.driverid = t2.driverid JOIN races AS t3 ON t2.raceid = t3.raceid WHERE t1.forename = 'Fernando' AND rank = 1",
        "schema": "CREATE TABLE driverStandings (driverStandingsId NUMBER, driverId NUMBER, position NUMBER, wins NUMBER, raceId NUMBER); CREATE TABLE lapTimes (raceId NUMBER, driverId NUMBER); CREATE TABLE circuits (circuitId NUMBER, name TEXT); CREATE TABLE pitStops (raceId NUMBER, driverId NUMBER); CREATE TABLE qualifying (raceId NUMBER, driverId NUMBER, position NUMBER); CREATE TABLE drivers (number NUMBER, nationality TEXT, code TEXT, driverId NUMBER, dob TEXT, forename TEXT, driverRef TEXT, surname TEXT); CREATE TABLE races (circuitId NUMBER, name TEXT, time TEXT, raceId NUMBER); CREATE TABLE results (milliseconds NUMBER, grid NUMBER, driverId NUMBER, resultId NUMBER, time TEXT, statusId NUMBER, positionOrder NUMBER, fastestLap NUMBER, number NUMBER, positionText TEXT, fastestLapTime TEXT, points NUMBER, position NUMBER, rank NUMBER, raceId NUMBER, fastestLapSpeed TEXT);"
      }
    ],
    [
      {
        "question": "What is the id and last name of the driver who participated in the most races after 2010?",
        "query": "SELECT t1.driverid , t1.surname FROM drivers AS t1 JOIN results AS t2 ON t1.driverid = t2.driverid JOIN races AS t3 ON t2.raceid = t3.raceid WHERE t3.year > 2010 GROUP BY t1.driverid ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE driverStandings (driverId NUMBER, raceId NUMBER); CREATE TABLE lapTimes (driverId NUMBER); CREATE TABLE seasons (url TEXT, year NUMBER); CREATE TABLE results (driverId NUMBER, raceId NUMBER, number NUMBER, time TEXT, resultId NUMBER, points NUMBER, statusId NUMBER, milliseconds NUMBER); CREATE TABLE pitStops (driverId NUMBER, raceId NUMBER); CREATE TABLE qualifying (driverId NUMBER); CREATE TABLE drivers (driverId NUMBER, driverRef TEXT, number NUMBER, code TEXT, surname TEXT, dob TEXT, forename TEXT); CREATE TABLE races (circuitId NUMBER, date TEXT, year NUMBER, raceId NUMBER, name TEXT, time TEXT);"
      },
      {
        "question": "What is the id of the driver who participated in the least races after 2010?",
        "query": "SELECT t1.driverid FROM drivers AS t1 JOIN results AS t2 ON t1.driverid = t2.driverid JOIN races AS t3 ON t2.raceid = t3.raceid WHERE t3.year > 2010 GROUP BY t1.driverid ORDER BY COUNT ( * ) LIMIT 1",
        "schema": "CREATE TABLE driverStandings (driverId NUMBER, raceId NUMBER); CREATE TABLE lapTimes (driverId NUMBER); CREATE TABLE seasons (url TEXT, year NUMBER); CREATE TABLE pitStops (driverId NUMBER, raceId NUMBER); CREATE TABLE races (name TEXT, time TEXT, circuitId NUMBER, raceId NUMBER, year NUMBER, date TEXT); CREATE TABLE drivers (dob TEXT, number NUMBER, driverRef TEXT, code TEXT, surname TEXT, forename TEXT, driverId NUMBER); CREATE TABLE results (milliseconds NUMBER, points NUMBER, resultId NUMBER, statusId NUMBER, number NUMBER, time TEXT, driverId NUMBER, raceId NUMBER); CREATE TABLE qualifying (driverId NUMBER);"
      },
      {
        "question": "Hmm. Can you also give me his last name.",
        "query": "SELECT t1.surname FROM drivers AS t1 JOIN results AS t2 ON t1.driverid = t2.driverid JOIN races AS t3 ON t2.raceid = t3.raceid WHERE t3.year > 2010 GROUP BY t1.driverid ORDER BY COUNT ( * ) LIMIT 1",
        "schema": "CREATE TABLE races (year NUMBER, time TEXT, name TEXT, date TEXT, raceId NUMBER, circuitId NUMBER); CREATE TABLE drivers (driverId NUMBER, driverRef TEXT, number NUMBER, dob TEXT, code TEXT, forename TEXT, surname TEXT); CREATE TABLE pitStops (raceId NUMBER, driverId NUMBER); CREATE TABLE seasons (url TEXT, year NUMBER); CREATE TABLE qualifying (driverId NUMBER); CREATE TABLE driverStandings (raceId NUMBER, driverId NUMBER); CREATE TABLE results (driverId NUMBER, milliseconds NUMBER, raceId NUMBER, time TEXT, points NUMBER, resultId NUMBER, number NUMBER, statusId NUMBER); CREATE TABLE lapTimes (driverId NUMBER);"
      },
      {
        "question": "Okay. How many races did he participate in?",
        "query": "SELECT COUNT ( * ) FROM drivers AS t1 JOIN results AS t2 ON t1.driverid = t2.driverid JOIN races AS t3 ON t2.raceid = t3.raceid WHERE t3.year > 2010 GROUP BY t1.driverid ORDER BY COUNT ( * ) LIMIT 1",
        "schema": "CREATE TABLE lapTimes (driverId NUMBER); CREATE TABLE pitStops (driverId NUMBER, raceId NUMBER); CREATE TABLE races (time TEXT, date TEXT, year NUMBER, raceId NUMBER, name TEXT, circuitId NUMBER); CREATE TABLE seasons (url TEXT, year NUMBER); CREATE TABLE driverStandings (raceId NUMBER, driverId NUMBER); CREATE TABLE drivers (number NUMBER, dob TEXT, driverRef TEXT, forename TEXT, code TEXT, surname TEXT, driverId NUMBER); CREATE TABLE results (position NUMBER, positionOrder NUMBER, fastestLapSpeed TEXT, resultId NUMBER, milliseconds NUMBER, number NUMBER, raceId NUMBER, statusId NUMBER, points NUMBER, driverId NUMBER, time TEXT); CREATE TABLE qualifying (driverId NUMBER);"
      },
      {
        "question": "How many races did Hamilton participate in after 2010?",
        "query": "SELECT COUNT ( * ) FROM drivers AS t1 JOIN results AS t2 ON t1.driverid = t2.driverid JOIN races AS t3 ON t2.raceid = t3.raceid WHERE t3.year > 2010 AND t1.surname = 'Hamilton' GROUP BY t1.driverid",
        "schema": "CREATE TABLE qualifying (driverId NUMBER); CREATE TABLE drivers (driverRef TEXT, driverId NUMBER, forename TEXT, number NUMBER, surname TEXT, dob TEXT, code TEXT); CREATE TABLE driverStandings (driverId NUMBER, raceId NUMBER); CREATE TABLE pitStops (driverId NUMBER, raceId NUMBER); CREATE TABLE seasons (url TEXT, year NUMBER); CREATE TABLE lapTimes (driverId NUMBER); CREATE TABLE races (name TEXT, date TEXT, circuitId NUMBER, raceId NUMBER, time TEXT, year NUMBER); CREATE TABLE circuits (location TEXT, circuitId NUMBER, name TEXT); CREATE TABLE results (milliseconds NUMBER, fastestLapSpeed TEXT, points NUMBER, time TEXT, number NUMBER, rank NUMBER, driverId NUMBER, grid NUMBER, statusId NUMBER, laps NUMBER, resultId NUMBER, positionOrder NUMBER, raceId NUMBER, position NUMBER);"
      }
    ],
    [
      {
        "question": "Hello!  Can you give me a list of all of the forenames and surnames of the various drivers?",
        "query": "SELECT forename , surname FROM drivers",
        "schema": "CREATE TABLE driverStandings (driverStandingsId NUMBER, driverId NUMBER); CREATE TABLE drivers (surname TEXT, driverId NUMBER, driverRef TEXT, forename TEXT, dob TEXT, code TEXT); CREATE TABLE races (raceId NUMBER);"
      },
      {
        "question": "Great!  Can you filter this list to show just the forename and surname of the driver who has the smallest lap time?",
        "query": "SELECT t1.forename , t1.surname FROM drivers AS t1 JOIN laptimes AS t2 ON t1.driverid = t2.driverid ORDER BY t2.milliseconds LIMIT 1",
        "schema": "CREATE TABLE driverStandings (driverStandingsId NUMBER, driverId NUMBER); CREATE TABLE pitStops (lap NUMBER, driverId NUMBER); CREATE TABLE races (raceId NUMBER); CREATE TABLE drivers (surname TEXT, driverRef TEXT, forename TEXT, dob TEXT, code TEXT, driverId NUMBER, number NUMBER); CREATE TABLE lapTimes (milliseconds NUMBER, driverId NUMBER, lap NUMBER, time TEXT, raceId NUMBER); CREATE TABLE results (laps NUMBER, driverId NUMBER, time TEXT);"
      },
      {
        "question": "Perfect!  Can you tell me what the nationality or country of origin of Lewis and Hamilton is?",
        "query": "SELECT nationality FROM drivers WHERE forename = \"Lewis\" AND surname = \"Hamilton\"",
        "schema": "CREATE TABLE driverStandings (driverId NUMBER, driverStandingsId NUMBER); CREATE TABLE results (laps NUMBER, driverId NUMBER, time TEXT); CREATE TABLE lapTimes (milliseconds NUMBER, lap NUMBER, driverId NUMBER, time TEXT, raceId NUMBER); CREATE TABLE circuits (location TEXT, name TEXT, country TEXT, circuitId NUMBER); CREATE TABLE pitStops (driverId NUMBER, lap NUMBER); CREATE TABLE races (raceId NUMBER); CREATE TABLE drivers (dob TEXT, driverId NUMBER, driverRef TEXT, nationality TEXT, number NUMBER, surname TEXT, forename TEXT, code TEXT);"
      }
    ],
    [
      {
        "question": "How many drivers are there, total?",
        "query": "SELECT COUNT ( * ) FROM drivers",
        "schema": "CREATE TABLE lapTimes (driverId NUMBER); CREATE TABLE driverStandings (driverStandingsId NUMBER, driverId NUMBER); CREATE TABLE results (number NUMBER, raceId NUMBER, driverId NUMBER, points NUMBER, resultId NUMBER, grid NUMBER, position NUMBER); CREATE TABLE qualifying (driverId NUMBER); CREATE TABLE races (raceId NUMBER); CREATE TABLE pitStops (driverId NUMBER); CREATE TABLE drivers (driverId NUMBER, dob TEXT, driverRef TEXT, surname TEXT, forename TEXT, code TEXT, number NUMBER);"
      },
      {
        "question": "of these total drivers, how many countries are represented?",
        "query": "SELECT COUNT ( DISTINCT nationality ) FROM drivers",
        "schema": "CREATE TABLE results (number NUMBER, grid NUMBER, points NUMBER, position NUMBER, driverId NUMBER, raceId NUMBER, resultId NUMBER); CREATE TABLE circuits (country TEXT, circuitId NUMBER); CREATE TABLE drivers (dob TEXT, nationality TEXT, code TEXT, surname TEXT, driverId NUMBER, forename TEXT, number NUMBER, driverRef TEXT); CREATE TABLE lapTimes (driverId NUMBER); CREATE TABLE qualifying (driverId NUMBER); CREATE TABLE driverStandings (driverId NUMBER, driverStandingsId NUMBER); CREATE TABLE pitStops (driverId NUMBER); CREATE TABLE constructors (nationality TEXT); CREATE TABLE races (raceId NUMBER);"
      },
      {
        "question": "and of those 41 countries, which one has the most drivers?",
        "query": "SELECT nationality FROM drivers GROUP BY nationality ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE circuits (circuitId NUMBER, country TEXT); CREATE TABLE lapTimes (driverId NUMBER); CREATE TABLE races (raceId NUMBER); CREATE TABLE qualifying (driverId NUMBER); CREATE TABLE constructors (nationality TEXT); CREATE TABLE pitStops (driverId NUMBER); CREATE TABLE drivers (nationality TEXT, surname TEXT, driverId NUMBER, number NUMBER, forename TEXT, driverRef TEXT, code TEXT, dob TEXT); CREATE TABLE results (driverId NUMBER, raceId NUMBER, grid NUMBER, points NUMBER, resultId NUMBER, number NUMBER, position NUMBER); CREATE TABLE driverStandings (driverStandingsId NUMBER, driverId NUMBER);"
      },
      {
        "question": "please give me the name of the driver",
        "query": "SELECT t1.forename, t1.surname FROM drivers AS t1 JOIN results AS t2 ON t1.driverid = t2.driverid WHERE t1.nationality = \"British\" ORDER BY fastestlapspeed DESC LIMIT 1",
        "schema": "CREATE TABLE pitStops (driverId NUMBER); CREATE TABLE results (points NUMBER, driverId NUMBER, raceId NUMBER, grid NUMBER, position NUMBER, number NUMBER, fastestLapSpeed TEXT, resultId NUMBER); CREATE TABLE circuits (country TEXT, circuitId NUMBER); CREATE TABLE qualifying (driverId NUMBER); CREATE TABLE constructors (nationality TEXT); CREATE TABLE races (raceId NUMBER); CREATE TABLE drivers (code TEXT, forename TEXT, driverRef TEXT, dob TEXT, surname TEXT, nationality TEXT, number NUMBER, driverId NUMBER); CREATE TABLE driverStandings (driverId NUMBER, driverStandingsId NUMBER); CREATE TABLE lapTimes (driverId NUMBER);"
      }
    ],
    [
      {
        "question": "Hi, how many years has the Monaco Grand Prix been held? | Would you like the number of distinct years found for races? | yes please!",
        "query": "SELECT COUNT ( DISTINCT YEAR ) FROM races",
        "schema": "CREATE TABLE pitStops (raceId NUMBER); CREATE TABLE results (raceId NUMBER, grid NUMBER, driverId NUMBER, resultId NUMBER, number NUMBER, milliseconds NUMBER, statusId NUMBER); CREATE TABLE races (year NUMBER, name TEXT, raceId NUMBER, circuitId NUMBER, date TEXT, round NUMBER, time TEXT); CREATE TABLE seasons (url TEXT, year NUMBER); CREATE TABLE circuits (circuitId NUMBER, circuitRef TEXT, name TEXT); CREATE TABLE driverStandings (raceId NUMBER); CREATE TABLE drivers (driverId NUMBER);"
      },
      {
        "question": "okay great - can you tell me the maximum fastest lap speed during this race?",
        "query": "SELECT MAX ( t2.fastestlapspeed ) FROM races AS t1 JOIN results AS t2 ON t1.raceid = t2.raceid WHERE t1.year = 2008 AND t1.name = \"Monaco Grand Prix\"",
        "schema": "CREATE TABLE results (driverId NUMBER, grid NUMBER, statusId NUMBER, raceId NUMBER, laps NUMBER, milliseconds NUMBER, points NUMBER, resultId NUMBER, fastestLap NUMBER, fastestLapSpeed TEXT, number NUMBER, fastestLapTime TEXT); CREATE TABLE lapTimes (raceId NUMBER); CREATE TABLE drivers (driverId NUMBER); CREATE TABLE circuits (circuitId NUMBER, name TEXT, circuitRef TEXT); CREATE TABLE seasons (url TEXT, year NUMBER); CREATE TABLE races (raceId NUMBER, year NUMBER, circuitId NUMBER, name TEXT, date TEXT, time TEXT, round NUMBER); CREATE TABLE driverStandings (raceId NUMBER); CREATE TABLE pitStops (raceId NUMBER);"
      }
    ],
    [
      {
        "question": "what is the name id of the person with the longest laptime? | Do you mean driver id? | yes",
        "query": "SELECT t1.driverid FROM drivers AS t1 JOIN laptimes AS t2 ON t1.driverid = t2.driverid ORDER BY t2.milliseconds DESC LIMIT 1",
        "schema": "CREATE TABLE qualifying (driverId NUMBER); CREATE TABLE driverStandings (driverStandingsId NUMBER, driverId NUMBER); CREATE TABLE races (raceId NUMBER); CREATE TABLE pitStops (driverId NUMBER, duration TEXT); CREATE TABLE results (driverId NUMBER); CREATE TABLE drivers (surname TEXT, dob TEXT, driverRef TEXT, code TEXT, driverId NUMBER, forename TEXT); CREATE TABLE lapTimes (lap NUMBER, time TEXT, driverId NUMBER, milliseconds NUMBER, raceId NUMBER);"
      },
      {
        "question": "what is the date of birth?",
        "query": "SELECT t1.driverid, t1.dob FROM drivers AS t1 JOIN laptimes AS t2 ON t1.driverid = t2.driverid ORDER BY t2.milliseconds DESC LIMIT 1",
        "schema": "CREATE TABLE lapTimes (milliseconds NUMBER, raceId NUMBER, driverId NUMBER, time TEXT, lap NUMBER); CREATE TABLE driverStandings (driverId NUMBER, driverStandingsId NUMBER); CREATE TABLE results (resultId NUMBER, raceId NUMBER, milliseconds NUMBER, driverId NUMBER); CREATE TABLE qualifying (driverId NUMBER); CREATE TABLE drivers (forename TEXT, driverRef TEXT, code TEXT, driverId NUMBER, surname TEXT, dob TEXT); CREATE TABLE races (date TEXT, raceId NUMBER); CREATE TABLE pitStops (driverId NUMBER, duration TEXT);"
      }
    ],
    [
      {
        "question": "How many races has there been?",
        "query": "SELECT COUNT ( * ) FROM races",
        "schema": "CREATE TABLE circuits (circuitId NUMBER); CREATE TABLE drivers (driverId NUMBER); CREATE TABLE driverStandings (raceId NUMBER, driverId NUMBER); CREATE TABLE qualifying (driverId NUMBER, raceId NUMBER); CREATE TABLE lapTimes (driverId NUMBER, raceId NUMBER); CREATE TABLE races (round NUMBER, url TEXT, raceId NUMBER, circuitId NUMBER, time TEXT, name TEXT); CREATE TABLE constructorStandings (raceId NUMBER); CREATE TABLE constructorResults (raceId NUMBER); CREATE TABLE results (resultId NUMBER, number NUMBER, raceId NUMBER, fastestLap NUMBER, driverId NUMBER); CREATE TABLE pitStops (raceId NUMBER, driverId NUMBER);"
      },
      {
        "question": "When was the oldest one? | Did you mean  the date | Yes",
        "query": "SELECT date FROM races ORDER BY date LIMIT 1",
        "schema": "CREATE TABLE constructorResults (raceId NUMBER); CREATE TABLE lapTimes (raceId NUMBER, driverId NUMBER); CREATE TABLE results (number NUMBER, raceId NUMBER, driverId NUMBER, milliseconds NUMBER, fastestLap NUMBER, resultId NUMBER); CREATE TABLE drivers (driverId NUMBER); CREATE TABLE circuits (circuitId NUMBER); CREATE TABLE driverStandings (driverId NUMBER, raceId NUMBER); CREATE TABLE constructorStandings (raceId NUMBER); CREATE TABLE races (round NUMBER, name TEXT, circuitId NUMBER, url TEXT, time TEXT, raceId NUMBER, date TEXT, year NUMBER); CREATE TABLE pitStops (driverId NUMBER, raceId NUMBER); CREATE TABLE qualifying (raceId NUMBER, driverId NUMBER);"
      },
      {
        "question": "How about the most recent one? | Did you just want to know the recent date? | Yes",
        "query": "SELECT date FROM races ORDER BY date DESC LIMIT 1",
        "schema": "CREATE TABLE driverStandings (raceId NUMBER, driverId NUMBER); CREATE TABLE lapTimes (driverId NUMBER, raceId NUMBER); CREATE TABLE qualifying (raceId NUMBER, driverId NUMBER); CREATE TABLE constructorStandings (raceId NUMBER); CREATE TABLE drivers (driverId NUMBER); CREATE TABLE constructorResults (raceId NUMBER); CREATE TABLE races (name TEXT, circuitId NUMBER, date TEXT, raceId NUMBER, url TEXT, year NUMBER, time TEXT, round NUMBER); CREATE TABLE circuits (circuitId NUMBER); CREATE TABLE results (resultId NUMBER, number NUMBER, driverId NUMBER, milliseconds NUMBER, raceId NUMBER, fastestLap NUMBER); CREATE TABLE pitStops (raceId NUMBER, driverId NUMBER);"
      },
      {
        "question": "Actually, can you also give me the name of that race?",
        "query": "SELECT name,date FROM races ORDER BY date DESC LIMIT 1",
        "schema": "CREATE TABLE constructorResults (raceId NUMBER); CREATE TABLE qualifying (driverId NUMBER, raceId NUMBER); CREATE TABLE pitStops (driverId NUMBER, raceId NUMBER); CREATE TABLE results (driverId NUMBER, milliseconds NUMBER, raceId NUMBER, fastestLap NUMBER, number NUMBER, resultId NUMBER); CREATE TABLE races (date TEXT, name TEXT, round NUMBER, circuitId NUMBER, year NUMBER, url TEXT, time TEXT, raceId NUMBER); CREATE TABLE lapTimes (raceId NUMBER, driverId NUMBER); CREATE TABLE drivers (surname TEXT, driverId NUMBER); CREATE TABLE constructorStandings (raceId NUMBER); CREATE TABLE driverStandings (driverId NUMBER, raceId NUMBER); CREATE TABLE circuits (circuitId NUMBER);"
      }
    ],
    [
      {
        "question": "list the forename of all races",
        "query": "SELECT name FROM races",
        "schema": "CREATE TABLE drivers (driverId NUMBER, forename TEXT, surname TEXT); CREATE TABLE qualifying (raceId NUMBER); CREATE TABLE races (name TEXT, round NUMBER, raceId NUMBER, circuitId NUMBER); CREATE TABLE constructorResults (raceId NUMBER); CREATE TABLE lapTimes (raceId NUMBER); CREATE TABLE results (driverId NUMBER, raceId NUMBER, resultId NUMBER); CREATE TABLE constructorStandings (raceId NUMBER); CREATE TABLE circuits (name TEXT, circuitId NUMBER); CREATE TABLE pitStops (driverId NUMBER, raceId NUMBER); CREATE TABLE driverStandings (raceId NUMBER, driverId NUMBER);"
      },
      {
        "question": "what is the forename of the race that occurred most recently?",
        "query": "SELECT name , date FROM races ORDER BY date DESC LIMIT 1",
        "schema": "CREATE TABLE pitStops (driverId NUMBER, raceId NUMBER); CREATE TABLE races (year NUMBER, raceId NUMBER, time TEXT, date TEXT, name TEXT, round NUMBER, circuitId NUMBER); CREATE TABLE constructorResults (raceId NUMBER); CREATE TABLE results (resultId NUMBER, raceId NUMBER, driverId NUMBER); CREATE TABLE driverStandings (driverId NUMBER, raceId NUMBER); CREATE TABLE drivers (driverId NUMBER, forename TEXT, surname TEXT); CREATE TABLE circuits (name TEXT, circuitId NUMBER); CREATE TABLE lapTimes (raceId NUMBER); CREATE TABLE qualifying (raceId NUMBER); CREATE TABLE constructorStandings (raceId NUMBER);"
      },
      {
        "question": "what is its code? | Do you mean circuit id? | yes",
        "query": "SELECT name , circuitid FROM races ORDER BY date DESC LIMIT 1",
        "schema": "CREATE TABLE qualifying (raceId NUMBER); CREATE TABLE results (driverId NUMBER, resultId NUMBER, raceId NUMBER); CREATE TABLE constructorStandings (raceId NUMBER); CREATE TABLE lapTimes (raceId NUMBER); CREATE TABLE races (raceId NUMBER, date TEXT, name TEXT, circuitId NUMBER, round NUMBER, year NUMBER, time TEXT); CREATE TABLE circuits (name TEXT, circuitRef TEXT, circuitId NUMBER); CREATE TABLE driverStandings (driverId NUMBER, raceId NUMBER); CREATE TABLE constructorResults (raceId NUMBER); CREATE TABLE drivers (surname TEXT, driverId NUMBER, forename TEXT, code TEXT); CREATE TABLE pitStops (driverId NUMBER, raceId NUMBER);"
      }
    ],
    [
      {
        "question": "How many drivers have participated in 30 or fewer races?",
        "query": "SELECT COUNT ( * ) FROM ( SELECT t1.driverid FROM drivers AS t1 JOIN results AS t2 ON t1.driverid = t2.driverid JOIN races AS t3 ON t2.raceid = t3.raceid GROUP BY t1.driverid HAVING COUNT ( * ) < = 30 )",
        "schema": "CREATE TABLE results (time TEXT, points NUMBER, number NUMBER, statusId NUMBER, raceId NUMBER, positionText TEXT, rank NUMBER, driverId NUMBER, resultId NUMBER, fastestLapTime TEXT, milliseconds NUMBER, grid NUMBER, positionOrder NUMBER, fastestLapSpeed TEXT, laps NUMBER, position NUMBER, fastestLap NUMBER); CREATE TABLE circuits (circuitId NUMBER); CREATE TABLE qualifying (driverId NUMBER, raceId NUMBER); CREATE TABLE drivers (code TEXT, driverId NUMBER, number NUMBER, dob TEXT, forename TEXT, driverRef TEXT, surname TEXT); CREATE TABLE pitStops (duration TEXT, driverId NUMBER, raceId NUMBER); CREATE TABLE lapTimes (driverId NUMBER, raceId NUMBER); CREATE TABLE races (raceId NUMBER, circuitId NUMBER); CREATE TABLE driverStandings (raceId NUMBER, driverStandingsId NUMBER, driverId NUMBER);"
      },
      {
        "question": "What are the ID's of those drivers?",
        "query": "SELECT t1.driverid FROM drivers AS t1 JOIN results AS t2 ON t1.driverid = t2.driverid JOIN races AS t3 ON t2.raceid = t3.raceid GROUP BY t1.driverid HAVING COUNT ( * ) < = 30",
        "schema": "CREATE TABLE races (circuitId NUMBER, raceId NUMBER); CREATE TABLE circuits (circuitId NUMBER); CREATE TABLE drivers (number NUMBER, driverRef TEXT, surname TEXT, code TEXT, driverId NUMBER, dob TEXT, forename TEXT); CREATE TABLE driverStandings (driverStandingsId NUMBER, raceId NUMBER, driverId NUMBER); CREATE TABLE lapTimes (driverId NUMBER, raceId NUMBER); CREATE TABLE pitStops (duration TEXT, raceId NUMBER, driverId NUMBER); CREATE TABLE results (resultId NUMBER, points NUMBER, fastestLapTime TEXT, grid NUMBER, laps NUMBER, milliseconds NUMBER, position NUMBER, rank NUMBER, driverId NUMBER, statusId NUMBER, number NUMBER, raceId NUMBER, fastestLap NUMBER, positionText TEXT, time TEXT, fastestLapSpeed TEXT, positionOrder NUMBER); CREATE TABLE qualifying (driverId NUMBER, raceId NUMBER);"
      },
      {
        "question": "How many races did each of these drivers participate in?",
        "query": "SELECT t1.driverid,COUNT ( * ) FROM drivers AS t1 JOIN results AS t2 ON t1.driverid = t2.driverid JOIN races AS t3 ON t2.raceid = t3.raceid GROUP BY t1.driverid",
        "schema": "CREATE TABLE circuits (circuitId NUMBER); CREATE TABLE races (circuitId NUMBER, raceId NUMBER); CREATE TABLE results (fastestLapSpeed TEXT, positionText TEXT, positionOrder NUMBER, milliseconds NUMBER, time TEXT, rank NUMBER, grid NUMBER, statusId NUMBER, points NUMBER, fastestLapTime TEXT, resultId NUMBER, raceId NUMBER, fastestLap NUMBER, number NUMBER, driverId NUMBER, laps NUMBER, position NUMBER); CREATE TABLE qualifying (raceId NUMBER, driverId NUMBER); CREATE TABLE pitStops (raceId NUMBER, driverId NUMBER, duration TEXT); CREATE TABLE lapTimes (raceId NUMBER, driverId NUMBER); CREATE TABLE driverStandings (driverStandingsId NUMBER, raceId NUMBER, driverId NUMBER); CREATE TABLE drivers (dob TEXT, code TEXT, driverRef TEXT, forename TEXT, driverId NUMBER, number NUMBER, surname TEXT);"
      },
      {
        "question": "How many of those drivers placed in the top 3 of any race?",
        "query": "SELECT t1.driverid FROM drivers AS t1 JOIN results AS t2 ON t1.driverid = t2.driverid JOIN races AS t3 ON t2.raceid = t3.raceid GROUP BY t1.driverid HAVING t2.rank < 3",
        "schema": "CREATE TABLE drivers (number NUMBER, code TEXT, surname TEXT, forename TEXT, dob TEXT, driverId NUMBER, driverRef TEXT); CREATE TABLE pitStops (raceId NUMBER, driverId NUMBER, duration TEXT); CREATE TABLE races (raceId NUMBER, circuitId NUMBER); CREATE TABLE qualifying (driverId NUMBER, raceId NUMBER); CREATE TABLE lapTimes (driverId NUMBER, raceId NUMBER); CREATE TABLE circuits (circuitId NUMBER); CREATE TABLE driverStandings (raceId NUMBER, position NUMBER, driverId NUMBER, driverStandingsId NUMBER); CREATE TABLE results (statusId NUMBER, position NUMBER, grid NUMBER, milliseconds NUMBER, resultId NUMBER, driverId NUMBER, raceId NUMBER, time TEXT, fastestLap NUMBER, laps NUMBER, positionText TEXT, rank NUMBER, fastestLapSpeed TEXT, number NUMBER, points NUMBER, fastestLapTime TEXT, positionOrder NUMBER);"
      }
    ],
    [
      {
        "question": "Hello, how many drivers are there in total?",
        "query": "SELECT COUNT ( * ) FROM drivers",
        "schema": "CREATE TABLE lapTimes (driverId NUMBER); CREATE TABLE qualifying (driverId NUMBER, raceId NUMBER, qualifyId NUMBER); CREATE TABLE driverStandings (driverStandingsId NUMBER, driverId NUMBER); CREATE TABLE results (rank NUMBER, statusId NUMBER, grid NUMBER, number NUMBER, driverId NUMBER, resultId NUMBER, raceId NUMBER); CREATE TABLE drivers (number NUMBER, driverId NUMBER, url TEXT, forename TEXT, dob TEXT, surname TEXT, driverRef TEXT, code TEXT); CREATE TABLE pitStops (driverId NUMBER); CREATE TABLE races (raceId NUMBER);"
      },
      {
        "question": "Perfect, how many drivers had 11 pit stops and participated in more than 5 total races?",
        "query": "SELECT COUNT ( * ) FROM ( SELECT t1.surname , t1.driverid FROM drivers AS t1 JOIN pitstops AS t2 ON t1.driverid = t2.driverid GROUP BY t1.driverid HAVING COUNT ( * ) = 11 INTERSECT SELECT t1.surname , t1.driverid FROM drivers AS t1 JOIN results AS t2 ON t1.driverid = t2.driverid GROUP BY t1.driverid HAVING COUNT ( * ) > 5 )",
        "schema": "CREATE TABLE races (raceId NUMBER, circuitId NUMBER, name TEXT); CREATE TABLE driverStandings (raceId NUMBER, driverId NUMBER, driverStandingsId NUMBER); CREATE TABLE drivers (forename TEXT, code TEXT, dob TEXT, driverId NUMBER, surname TEXT, url TEXT, driverRef TEXT, number NUMBER); CREATE TABLE pitStops (duration TEXT, raceId NUMBER, stop NUMBER, driverId NUMBER); CREATE TABLE qualifying (qualifyId NUMBER, driverId NUMBER, raceId NUMBER); CREATE TABLE results (laps NUMBER, positionOrder NUMBER, points NUMBER, fastestLapSpeed TEXT, number NUMBER, time TEXT, statusId NUMBER, driverId NUMBER, resultId NUMBER, milliseconds NUMBER, positionText TEXT, fastestLapTime TEXT, position NUMBER, rank NUMBER, fastestLap NUMBER, raceId NUMBER, grid NUMBER); CREATE TABLE lapTimes (driverId NUMBER);"
      },
      {
        "question": "Okay, which driver had the most amount of pit stops?",
        "query": "SELECT t1.driverid FROM drivers AS t1 JOIN pitstops AS t2 ON t1.driverid = t2.driverid GROUP BY t1.driverid ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE pitStops (stop NUMBER, duration TEXT, raceId NUMBER, driverId NUMBER); CREATE TABLE races (circuitId NUMBER, name TEXT, raceId NUMBER); CREATE TABLE results (statusId NUMBER, number NUMBER, positionText TEXT, milliseconds NUMBER, fastestLapTime TEXT, time TEXT, laps NUMBER, raceId NUMBER, position NUMBER, positionOrder NUMBER, points NUMBER, fastestLapSpeed TEXT, grid NUMBER, rank NUMBER, driverId NUMBER, fastestLap NUMBER, resultId NUMBER); CREATE TABLE driverStandings (driverStandingsId NUMBER, driverId NUMBER, raceId NUMBER); CREATE TABLE drivers (forename TEXT, number NUMBER, driverId NUMBER, dob TEXT, driverRef TEXT, surname TEXT, code TEXT, url TEXT); CREATE TABLE lapTimes (driverId NUMBER); CREATE TABLE qualifying (qualifyId NUMBER, raceId NUMBER, driverId NUMBER);"
      }
    ],
    [
      {
        "question": "Can you list driver iDs for all drivers that had first position in laptime at least twice?",
        "query": "SELECT t1.driverid FROM drivers AS t1 JOIN laptimes AS t2 ON t1.driverid = t2.driverid WHERE POSITION = '1' GROUP BY t1.driverid HAVING COUNT ( * ) > = 2",
        "schema": "CREATE TABLE drivers (driverId NUMBER, code TEXT, dob TEXT, driverRef TEXT, number NUMBER); CREATE TABLE races (time TEXT, raceId NUMBER); CREATE TABLE driverStandings (position NUMBER, driverStandingsId NUMBER, driverId NUMBER); CREATE TABLE results (milliseconds NUMBER, positionText TEXT, position NUMBER, resultId NUMBER, points NUMBER, positionOrder NUMBER, time TEXT, number NUMBER, statusId NUMBER, fastestLapTime TEXT, fastestLap NUMBER, grid NUMBER, driverId NUMBER, fastestLapSpeed TEXT, raceId NUMBER, laps NUMBER); CREATE TABLE pitStops (duration TEXT, lap NUMBER, time TEXT, driverId NUMBER); CREATE TABLE qualifying (driverId NUMBER, position NUMBER); CREATE TABLE lapTimes (driverId NUMBER, lap NUMBER, raceId NUMBER, milliseconds NUMBER, time TEXT, position NUMBER);"
      },
      {
        "question": "Can you list all driver IDs?",
        "query": "SELECT driverid FROM drivers",
        "schema": "CREATE TABLE qualifying (driverId NUMBER, position NUMBER); CREATE TABLE races (time TEXT, raceId NUMBER); CREATE TABLE lapTimes (milliseconds NUMBER, position NUMBER, time TEXT, lap NUMBER, driverId NUMBER, raceId NUMBER); CREATE TABLE results (milliseconds NUMBER, positionOrder NUMBER, points NUMBER, raceId NUMBER, fastestLapTime TEXT, position NUMBER, fastestLap NUMBER, fastestLapSpeed TEXT, statusId NUMBER, resultId NUMBER, grid NUMBER, laps NUMBER, number NUMBER, positionText TEXT, driverId NUMBER, time TEXT); CREATE TABLE driverStandings (driverStandingsId NUMBER, position NUMBER, driverId NUMBER); CREATE TABLE drivers (driverRef TEXT, code TEXT, dob TEXT, number NUMBER, driverId NUMBER); CREATE TABLE pitStops (time TEXT, driverId NUMBER, duration TEXT, lap NUMBER);"
      },
      {
        "question": "Can you add to the table the forenames and surnames associated with each driver id?",
        "query": "SELECT driverid, forename, surname FROM drivers",
        "schema": "CREATE TABLE qualifying (driverId NUMBER, position NUMBER); CREATE TABLE driverStandings (position NUMBER, driverId NUMBER, driverStandingsId NUMBER); CREATE TABLE results (fastestLapSpeed TEXT, raceId NUMBER, milliseconds NUMBER, grid NUMBER, number NUMBER, laps NUMBER, driverId NUMBER, position NUMBER, statusId NUMBER, fastestLapTime TEXT, time TEXT, points NUMBER, resultId NUMBER, positionOrder NUMBER, positionText TEXT, fastestLap NUMBER); CREATE TABLE drivers (number NUMBER, dob TEXT, forename TEXT, code TEXT, driverRef TEXT, driverId NUMBER, surname TEXT); CREATE TABLE lapTimes (lap NUMBER, time TEXT, position NUMBER, milliseconds NUMBER, driverId NUMBER, raceId NUMBER); CREATE TABLE races (raceId NUMBER, time TEXT); CREATE TABLE pitStops (driverId NUMBER, time TEXT, lap NUMBER, duration TEXT);"
      }
    ]
  ],
  "station_weather": [
    [
      {
        "question": "Hi, can you please tell me what is the ID of the station whose maximum precipitation is higher than 50?",
        "query": "SELECT t2.id FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id = t2.id GROUP BY t1.station_id HAVING MAX ( t1.precipitation ) > 50",
        "schema": "CREATE TABLE station (id NUMBER, network_name TEXT); CREATE TABLE weekly_weather (station_id NUMBER, precipitation NUMBER, high_temperature NUMBER); CREATE TABLE route (station_id NUMBER);"
      },
      {
        "question": "thank you, could you please also let me know their names and local authorities?",
        "query": "SELECT t2.id , t2.network_name, t2.local_authority FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id = t2.id GROUP BY t1.station_id HAVING MAX ( t1.precipitation ) > 50",
        "schema": "CREATE TABLE weekly_weather (high_temperature NUMBER, station_id NUMBER, precipitation NUMBER); CREATE TABLE station (network_name TEXT, local_authority TEXT, id NUMBER); CREATE TABLE route (station_id NUMBER);"
      },
      {
        "question": "that was quick, thank you again. then could you please let me know if there is any station which has less than 10 maximum precipitation?",
        "query": "SELECT t2.id FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id = t2.id GROUP BY t1.station_id HAVING MAX ( t1.precipitation ) < 10",
        "schema": "CREATE TABLE station (id NUMBER, local_authority TEXT, network_name TEXT); CREATE TABLE route (station_id NUMBER); CREATE TABLE weekly_weather (high_temperature NUMBER, precipitation NUMBER, station_id NUMBER);"
      },
      {
        "question": "seems like everybody will have some rain here.. then could you please let me know what is the lowest precipitation we have on the table?",
        "query": "SELECT MIN ( precipitation ) FROM weekly_weather",
        "schema": "CREATE TABLE weekly_weather (station_id NUMBER, high_temperature NUMBER, low_temperature NUMBER, precipitation NUMBER); CREATE TABLE route (station_id NUMBER); CREATE TABLE station (local_authority TEXT, network_name TEXT, id NUMBER);"
      },
      {
        "question": "could you please let me know the ID of the stations with 10 precipitation?",
        "query": "SELECT t2.id FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id = t2.id WHERE t1.precipitation = 10",
        "schema": "CREATE TABLE station (local_authority TEXT, network_name TEXT, id NUMBER); CREATE TABLE weekly_weather (station_id NUMBER, low_temperature NUMBER, precipitation NUMBER, high_temperature NUMBER); CREATE TABLE route (station_id NUMBER);"
      },
      {
        "question": "what would be the name of the station?",
        "query": "SELECT t2.id,t2.network_name FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id = t2.id WHERE t1.precipitation = 10",
        "schema": "CREATE TABLE weekly_weather (low_temperature NUMBER, station_id NUMBER, high_temperature NUMBER, precipitation NUMBER); CREATE TABLE station (network_name TEXT, local_authority TEXT, id NUMBER); CREATE TABLE route (station_id NUMBER);"
      },
      {
        "question": "Then my last inquiry, could you please let me know Amersham's high temperature and wind speed on Friday?",
        "query": "SELECT t1.high_temperature,t1.wind_speed_mph FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id = t2.id WHERE t1.day_of_week = 'Friday' AND t2.network_name = 'Amersham'",
        "schema": "CREATE TABLE weekly_weather (wind_speed_mph NUMBER, high_temperature NUMBER, day_of_week TEXT, low_temperature NUMBER, station_id NUMBER, precipitation NUMBER); CREATE TABLE route (station_id NUMBER); CREATE TABLE station (network_name TEXT, id NUMBER, local_authority TEXT);"
      }
    ],
    [
      {
        "question": "how many origin in the train table",
        "query": "SELECT COUNT ( DISTINCT origin ) FROM train",
        "schema": "CREATE TABLE train (destination TEXT, id NUMBER, origin TEXT);"
      },
      {
        "question": "what highest time in the train table",
        "query": "SELECT TIME FROM train ORDER BY TIME DESC LIMIT 1",
        "schema": "CREATE TABLE train (origin TEXT, interval TEXT, id NUMBER, time TEXT, destination TEXT);"
      },
      {
        "question": "how many train number in the train table",
        "query": "SELECT COUNT ( train_number ) FROM train",
        "schema": "CREATE TABLE train (destination TEXT, interval TEXT, origin TEXT, id NUMBER, time TEXT, train_number NUMBER);"
      },
      {
        "question": "how many interval in the trail table",
        "query": "SELECT COUNT ( interval ) FROM train",
        "schema": "CREATE TABLE train (interval TEXT, time TEXT, destination TEXT, origin TEXT, id NUMBER, train_number NUMBER);"
      }
    ],
    [
      {
        "question": "how many trains have express in their names?",
        "query": "SELECT COUNT ( * ) FROM train WHERE name LIKE \"%Express%\"",
        "schema": "CREATE TABLE route (train_id NUMBER); CREATE TABLE train (id NUMBER, name TEXT, train_number NUMBER);"
      },
      {
        "question": "what is the destination for Ananthapuri Express?",
        "query": "SELECT destination FROM train WHERE name = 'Ananthapuri Express'",
        "schema": "CREATE TABLE train (destination TEXT, name TEXT, train_number NUMBER, origin TEXT, id NUMBER); CREATE TABLE route (train_id NUMBER);"
      },
      {
        "question": "give me the train number",
        "query": "SELECT train_number FROM train WHERE name = 'Ananthapuri Express'",
        "schema": "CREATE TABLE route (train_id NUMBER); CREATE TABLE train (destination TEXT, name TEXT, origin TEXT, id NUMBER, train_number NUMBER);"
      }
    ],
    [
      {
        "question": "I need to know which train route passes through the most stations, please.",
        "query": "SELECT t1.name FROM train AS t1 JOIN route AS t2 ON t1.id = t2.train_id GROUP BY t2.train_id ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE station (id NUMBER); CREATE TABLE route (train_id NUMBER, station_id NUMBER); CREATE TABLE train (train_number NUMBER, name TEXT, id NUMBER);"
      },
      {
        "question": "How many stations does this train run through?",
        "query": "SELECT COUNT ( * ) FROM train AS t1 JOIN route AS t2 ON t1.id = t2.train_id GROUP BY t2.train_id ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE train (train_number NUMBER, name TEXT, id NUMBER); CREATE TABLE station (network_name TEXT, id NUMBER); CREATE TABLE route (train_id NUMBER, station_id NUMBER);"
      },
      {
        "question": "What are the names of those stations?",
        "query": "SELECT t2.station_id FROM train AS t1 JOIN route AS t2 ON t1.id = t2.train_id GROUP BY t2.train_id ORDER BY COUNT ( * ) DESC LIMIT 3",
        "schema": "CREATE TABLE station (network_name TEXT, id NUMBER); CREATE TABLE train (train_number NUMBER, id NUMBER, name TEXT); CREATE TABLE route (train_id NUMBER, station_id NUMBER);"
      }
    ],
    [
      {
        "question": "Give me the times of all trains that go to Chennai",
        "query": "SELECT TIME FROM train WHERE destination = 'Chennai'",
        "schema": "CREATE TABLE weekly_weather (low_temperature NUMBER, high_temperature NUMBER); CREATE TABLE route (train_id NUMBER); CREATE TABLE train (interval TEXT, train_number NUMBER, time TEXT, name TEXT, id NUMBER, destination TEXT, origin TEXT);"
      },
      {
        "question": "Show me the numbers of all trains that go to Chennai",
        "query": "SELECT COUNT ( * ) FROM train WHERE destination = 'Chennai'",
        "schema": "CREATE TABLE train (interval TEXT, time TEXT, destination TEXT, train_number NUMBER, origin TEXT, id NUMBER, name TEXT); CREATE TABLE route (train_id NUMBER); CREATE TABLE weekly_weather (high_temperature NUMBER, low_temperature NUMBER);"
      },
      {
        "question": "Show me the train number of all trains that go to Chennai",
        "query": "SELECT train_number FROM train WHERE destination = 'Chennai'",
        "schema": "CREATE TABLE weekly_weather (low_temperature NUMBER, high_temperature NUMBER); CREATE TABLE train (id NUMBER, time TEXT, interval TEXT, origin TEXT, name TEXT, destination TEXT, train_number NUMBER); CREATE TABLE route (train_id NUMBER);"
      }
    ],
    [
      {
        "question": "What are the times of trains that go to chennai?",
        "query": "SELECT TIME FROM train WHERE destination = 'Chennai'",
        "schema": "CREATE TABLE train (time TEXT, destination TEXT, name TEXT, interval TEXT, id NUMBER, train_number NUMBER, origin TEXT); CREATE TABLE route (train_id NUMBER);"
      },
      {
        "question": "What are the trains names that go to chennai?",
        "query": "SELECT name FROM train WHERE destination = 'Chennai'",
        "schema": "CREATE TABLE train (destination TEXT, origin TEXT, interval TEXT, train_number NUMBER, time TEXT, id NUMBER, name TEXT); CREATE TABLE route (train_id NUMBER);"
      },
      {
        "question": "What is the origin of Ananthapuri express ?",
        "query": "SELECT origin FROM train WHERE name = \"Ananthapuri Express\"",
        "schema": "CREATE TABLE train (train_number NUMBER, destination TEXT, interval TEXT, name TEXT, id NUMBER, origin TEXT, time TEXT); CREATE TABLE route (train_id NUMBER);"
      }
    ],
    [
      {
        "question": "hi, what is the maximum low temperature at Amersham station?",
        "query": "SELECT MAX ( t1.low_temperature ) FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id = t2.id WHERE t2.network_name = \"Amersham\"",
        "schema": "CREATE TABLE station (local_authority TEXT, id NUMBER, network_name TEXT); CREATE TABLE route (station_id NUMBER); CREATE TABLE weekly_weather (high_temperature NUMBER, station_id NUMBER, low_temperature NUMBER);"
      },
      {
        "question": "on what day was it? | Did  you  mean  the day of week in  weekly weather table | Yes, in what say was the maximum low temperature in Amersham station.",
        "query": "SELECT t1.day_of_week FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id = t2.id WHERE t2.network_name = \"Amersham\" ORDER BY low_temperature DESC LIMIT 1",
        "schema": "CREATE TABLE route (station_id NUMBER); CREATE TABLE weekly_weather (day_of_week TEXT, high_temperature NUMBER, station_id NUMBER, low_temperature NUMBER); CREATE TABLE station (network_name TEXT, local_authority TEXT, id NUMBER);"
      },
      {
        "question": "Can you tell me what is the average precipitation at the Amersham station?",
        "query": "SELECT AVG ( t1.precipitation ) FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id = t2.id WHERE t2.network_name = \"Amersham\"",
        "schema": "CREATE TABLE route (station_id NUMBER); CREATE TABLE station (local_authority TEXT, network_name TEXT, id NUMBER); CREATE TABLE weekly_weather (low_temperature NUMBER, high_temperature NUMBER, precipitation NUMBER, day_of_week TEXT, station_id NUMBER);"
      }
    ],
    [
      {
        "question": "Hello!  Can you provide me with a list of all train names for trains that are associated with the local authority of Chiltern?",
        "query": "SELECT DISTINCT t3.name FROM station AS t1 JOIN route AS t2 ON t1.id = t2.station_id JOIN train AS t3 ON t2.train_id = t3.id WHERE t1.local_authority = \"Chiltern\"",
        "schema": "CREATE TABLE station (local_authority TEXT, id NUMBER, network_name TEXT); CREATE TABLE route (train_id NUMBER, station_id NUMBER); CREATE TABLE train (id NUMBER, origin TEXT, train_number NUMBER, name TEXT, destination TEXT);"
      },
      {
        "question": "That's great!  Can you update that list to also include all of the arrival times for the trains that have Chiltern listed as their station's local authority?",
        "query": "SELECT t3.name , t3.time FROM station AS t1 JOIN route AS t2 ON t1.id = t2.station_id JOIN train AS t3 ON t2.train_id = t3.id WHERE t1.local_authority = \"Chiltern\"",
        "schema": "CREATE TABLE route (train_id NUMBER, station_id NUMBER); CREATE TABLE train (train_number NUMBER, time TEXT, destination TEXT, id NUMBER, name TEXT, origin TEXT); CREATE TABLE station (id NUMBER, network_name TEXT, local_authority TEXT);"
      },
      {
        "question": "Great!  Finally, can you update this list to also include The train ID and train number for each?",
        "query": "SELECT t3.name , t3.time,t3.train_number ,t2.train_id FROM station AS t1 JOIN route AS t2 ON t1.id = t2.station_id JOIN train AS t3 ON t2.train_id = t3.id WHERE t1.local_authority = \"Chiltern\"",
        "schema": "CREATE TABLE station (id NUMBER, network_name TEXT, local_authority TEXT); CREATE TABLE train (train_number NUMBER, id NUMBER, name TEXT, destination TEXT, origin TEXT, time TEXT); CREATE TABLE route (station_id NUMBER, train_id NUMBER);"
      }
    ],
    [
      {
        "question": "How many trains are there per station?",
        "query": "SELECT t2.station_id, COUNT ( * ) FROM station AS t1 JOIN route AS t2 ON t1.id = t2.station_id GROUP BY t2.station_id",
        "schema": "CREATE TABLE train (train_number NUMBER, id NUMBER); CREATE TABLE station (network_name TEXT, id NUMBER); CREATE TABLE route (train_id NUMBER, station_id NUMBER);"
      },
      {
        "question": "What are the station network names?",
        "query": "SELECT network_name FROM station",
        "schema": "CREATE TABLE route (train_id NUMBER, station_id NUMBER); CREATE TABLE station (id NUMBER, network_name TEXT); CREATE TABLE train (id NUMBER, train_number NUMBER);"
      },
      {
        "question": "What services do they offer?",
        "query": "SELECT services FROM station",
        "schema": "CREATE TABLE train (id NUMBER, train_number NUMBER); CREATE TABLE station (id NUMBER, network_name TEXT, services TEXT); CREATE TABLE route (station_id NUMBER, train_id NUMBER);"
      }
    ],
    [
      {
        "question": "Which station has the highest average high temperature? | Which attributes of this station do you want? | The station name.",
        "query": "SELECT t2.network_name FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id = t2.id GROUP BY t1.station_id ORDER BY AVG ( high_temperature ) DESC LIMIT 1",
        "schema": "CREATE TABLE weekly_weather (high_temperature NUMBER, station_id NUMBER, low_temperature NUMBER); CREATE TABLE station (id NUMBER, network_name TEXT);"
      },
      {
        "question": "What is Charleywood's ID?",
        "query": "SELECT id FROM station WHERE network_name = \"Chorleywood\"",
        "schema": "CREATE TABLE station (id NUMBER, network_name TEXT); CREATE TABLE weekly_weather (low_temperature NUMBER, high_temperature NUMBER, station_id NUMBER);"
      },
      {
        "question": "What is the local authority of Chorleywood, ID 10?",
        "query": "SELECT local_authority FROM station WHERE network_name = \"Chorleywood\"",
        "schema": "CREATE TABLE weekly_weather (high_temperature NUMBER, low_temperature NUMBER, station_id NUMBER); CREATE TABLE station (network_name TEXT, local_authority TEXT, id NUMBER);"
      }
    ],
    [
      {
        "question": "* I have left the chat *",
        "query": "SELECT COUNT ( * ) FROM station AS t1 JOIN route AS t2 ON t1.id = t2.station_id GROUP BY t2.station_id",
        "schema": "CREATE TABLE weekly_weather (station_id NUMBER); CREATE TABLE route (station_id NUMBER); CREATE TABLE station (services TEXT, id NUMBER, network_name TEXT);"
      },
      {
        "question": "what are the station network name and services for  these station",
        "query": "SELECT t1.network_name , t1.services FROM station AS t1 JOIN route AS t2 ON t1.id = t2.station_id GROUP BY t2.station_id",
        "schema": "CREATE TABLE station (id NUMBER, network_name TEXT, services TEXT); CREATE TABLE weekly_weather (station_id NUMBER); CREATE TABLE route (station_id NUMBER);"
      },
      {
        "question": "include station id in the list",
        "query": "SELECT t1.network_name , t1.services,station_id FROM station AS t1 JOIN route AS t2 ON t1.id = t2.station_id GROUP BY t2.station_id",
        "schema": "CREATE TABLE station (network_name TEXT, services TEXT, id NUMBER); CREATE TABLE route (station_id NUMBER); CREATE TABLE weekly_weather (station_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show all the low temperatures.",
        "query": "SELECT low_temperature FROM weekly_weather",
        "schema": "CREATE TABLE train (id NUMBER); CREATE TABLE weekly_weather (station_id NUMBER, low_temperature NUMBER, high_temperature NUMBER); CREATE TABLE station (id NUMBER);"
      },
      {
        "question": "Show the highest low temperature.",
        "query": "SELECT MAX ( low_temperature ) FROM weekly_weather",
        "schema": "CREATE TABLE train (id NUMBER); CREATE TABLE station (id NUMBER); CREATE TABLE weekly_weather (high_temperature NUMBER, low_temperature NUMBER, station_id NUMBER);"
      },
      {
        "question": "Show all the wind speeds in miles per hour.",
        "query": "SELECT wind_speed_mph FROM weekly_weather",
        "schema": "CREATE TABLE weekly_weather (low_temperature NUMBER, wind_speed_mph NUMBER, station_id NUMBER, high_temperature NUMBER); CREATE TABLE train (id NUMBER); CREATE TABLE station (id NUMBER);"
      },
      {
        "question": "List all the winds speeds in ascending order.",
        "query": "SELECT wind_speed_mph FROM weekly_weather ORDER BY wind_speed_mph",
        "schema": "CREATE TABLE weekly_weather (high_temperature NUMBER, low_temperature NUMBER, station_id NUMBER, wind_speed_mph NUMBER); CREATE TABLE train (id NUMBER); CREATE TABLE station (id NUMBER);"
      },
      {
        "question": "Show the lowest low temperature and the highest wind speed in miles per hour.",
        "query": "SELECT MIN ( wind_speed_mph ) , MAX ( wind_speed_mph ) FROM weekly_weather ORDER BY wind_speed_mph",
        "schema": "CREATE TABLE train (id NUMBER); CREATE TABLE weekly_weather (low_temperature NUMBER, wind_speed_mph NUMBER, high_temperature NUMBER, station_id NUMBER); CREATE TABLE station (id NUMBER);"
      },
      {
        "question": "What day of the week has the lowest low temperature.",
        "query": "SELECT day_of_week, MIN ( wind_speed_mph ) FROM weekly_weather ORDER BY wind_speed_mph",
        "schema": "CREATE TABLE weekly_weather (high_temperature NUMBER, station_id NUMBER, low_temperature NUMBER, day_of_week TEXT, wind_speed_mph NUMBER); CREATE TABLE station (id NUMBER); CREATE TABLE train (id NUMBER);"
      }
    ]
  ],
  "local_govt_and_lot": [
    [
      {
        "question": "What is the id of the customer with at least 3 events?",
        "query": "SELECT ( t1.customer_id ) FROM customers AS t1 JOIN customer_events AS t2 ON t1.customer_id = t2.customer_id GROUP BY t1.customer_id HAVING COUNT ( * ) > = 3",
        "schema": "CREATE TABLE Customer_Event_Notes (Customer_Event_ID NUMBER, resident_id NUMBER, Customer_Event_Note_ID NUMBER); CREATE TABLE Customer_Events (Customer_Event_ID NUMBER, thing_id NUMBER, customer_id NUMBER); CREATE TABLE Customers (customer_details TEXT, customer_id NUMBER);"
      },
      {
        "question": "What are the details for the customer with at least 3 events?",
        "query": "SELECT t1.customer_details FROM customers AS t1 JOIN customer_events AS t2 ON t1.customer_id = t2.customer_id GROUP BY t1.customer_id HAVING COUNT ( * ) > = 3",
        "schema": "CREATE TABLE Customer_Event_Notes (Customer_Event_Note_ID NUMBER, resident_id NUMBER, Customer_Event_ID NUMBER); CREATE TABLE Customers (customer_id NUMBER, customer_details TEXT); CREATE TABLE Customer_Events (customer_id NUMBER, thing_id NUMBER, Customer_Event_ID NUMBER);"
      }
    ],
    [
      {
        "question": "how many Services there",
        "query": "SELECT COUNT ( * ) FROM services",
        "schema": "CREATE TABLE Residents_Services (resident_id NUMBER, property_id NUMBER, other_details TEXT, service_id NUMBER); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Residents (resident_id NUMBER); CREATE TABLE Services (service_details TEXT, service_type_code TEXT, organization_id NUMBER, service_id NUMBER); CREATE TABLE Things (service_type_code TEXT, thing_id NUMBER, service_details TEXT); CREATE TABLE Organizations (organization_id NUMBER); CREATE TABLE Customer_Event_Notes (service_type_code TEXT);"
      },
      {
        "question": "what is the Check of service_id | Do you mean the service_id of all services with service_type_code \"Check\"? | ok",
        "query": "SELECT service_id FROM services WHERE service_type_code = \"Check\"",
        "schema": "CREATE TABLE Services (service_details TEXT, organization_id NUMBER, service_type_code TEXT, service_id NUMBER); CREATE TABLE Organizations (organization_id NUMBER); CREATE TABLE Things (service_type_code TEXT, service_details TEXT, thing_id NUMBER); CREATE TABLE Residents_Services (service_id NUMBER, property_id NUMBER, other_details TEXT, resident_id NUMBER); CREATE TABLE Residents (resident_id NUMBER); CREATE TABLE Customer_Event_Notes (service_type_code TEXT); CREATE TABLE Customers (customer_id NUMBER);"
      },
      {
        "question": "how many Organizations there",
        "query": "SELECT COUNT ( * ) FROM organizations",
        "schema": "CREATE TABLE Things (service_type_code TEXT, thing_id NUMBER, service_details TEXT, organization_id NUMBER); CREATE TABLE Services (service_details TEXT, service_type_code TEXT, service_id NUMBER, organization_id NUMBER); CREATE TABLE Customer_Event_Notes (service_type_code TEXT); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Residents (resident_id NUMBER); CREATE TABLE Residents_Services (service_id NUMBER, resident_id NUMBER, other_details TEXT, property_id NUMBER); CREATE TABLE Organizations (organization_id NUMBER, parent_organization_id NUMBER, organization_details TEXT);"
      }
    ],
    [
      {
        "question": "I'm looking for the things with Close status before 2017-06-19 02:59:21 | Do you want things that satisfy both criteria or at least at of them? And do you want the ids or other? | I want the number of things in a close status",
        "query": "SELECT COUNT ( DISTINCT thing_id ) FROM timed_status_of_things WHERE status_of_thing_code = \"Close\"",
        "schema": "CREATE TABLE Timed_Status_of_Things (Date_and_Date TIME, Status_of_Thing_Code TEXT, thing_id NUMBER); CREATE TABLE Things (thing_id NUMBER); CREATE TABLE Properties (property_id NUMBER); CREATE TABLE Customer_Events (date_moved_in TIME, thing_id NUMBER); CREATE TABLE Residents (property_id NUMBER, resident_id NUMBER); CREATE TABLE Timed_Locations_of_Things (Location_Code TEXT, thing_id NUMBER, Date_and_Time TIME);"
      },
      {
        "question": "of those things which are closed before 2017-06-19 02:59:21 | Do you still want the number of them? | Yes",
        "query": "SELECT COUNT ( DISTINCT thing_id ) FROM timed_status_of_things WHERE status_of_thing_code = \"Close\" AND date_and_date < '2017-06-19 02:59:21'",
        "schema": "CREATE TABLE Things (thing_id NUMBER); CREATE TABLE Properties (property_id NUMBER); CREATE TABLE Customer_Events (date_moved_in TIME, thing_id NUMBER); CREATE TABLE Timed_Status_of_Things (Status_of_Thing_Code TEXT, thing_id NUMBER, Date_and_Date TIME); CREATE TABLE Timed_Locations_of_Things (Date_and_Time TIME, Location_Code TEXT, thing_id NUMBER); CREATE TABLE Residents (resident_id NUMBER, property_id NUMBER);"
      },
      {
        "question": "What type of thing are all five of those?",
        "query": "SELECT DISTINCT t2.type_of_thing_code FROM timed_status_of_things AS t1 JOIN things AS t2 ON t1.thing_id = t2.thing_id WHERE t1.status_of_thing_code = 'Close' AND t1.date_and_date < '2017-06-19 02:59:21'",
        "schema": "CREATE TABLE Customer_Events (thing_id NUMBER, date_moved_in TIME); CREATE TABLE Timed_Locations_of_Things (Date_and_Time TIME, Location_Code TEXT, thing_id NUMBER); CREATE TABLE Things (thing_id NUMBER, Type_of_Thing_Code TEXT); CREATE TABLE Timed_Status_of_Things (Status_of_Thing_Code TEXT, thing_id NUMBER, Date_and_Date TIME); CREATE TABLE Properties (property_type_code TEXT, property_id NUMBER); CREATE TABLE Residents (property_id NUMBER, resident_id NUMBER);"
      },
      {
        "question": "What is the distinct ID of elctronics or Commen?",
        "query": "SELECT DISTINCT thing_id FROM things WHERE type_of_thing_code = \"Electronics\" OR type_of_thing_code = \"Commen\"",
        "schema": "CREATE TABLE Customer_Events (thing_id NUMBER, date_moved_in TIME); CREATE TABLE Timed_Status_of_Things (Status_of_Thing_Code TEXT, thing_id NUMBER, Date_and_Date TIME); CREATE TABLE Things (Type_of_Thing_Code TEXT, thing_id NUMBER); CREATE TABLE Residents (property_id NUMBER, resident_id NUMBER); CREATE TABLE Timed_Locations_of_Things (Date_and_Time TIME, Location_Code TEXT, thing_id NUMBER); CREATE TABLE Properties (property_type_code TEXT, property_id NUMBER);"
      }
    ],
    [
      {
        "question": "How many distinct locations have the things with service detail 'Unsatisfied' been located in?",
        "query": "SELECT COUNT ( DISTINCT t2.location_code ) FROM things AS t1 JOIN timed_locations_of_things AS t2 ON t1.thing_id = t2.thing_id WHERE t1.service_details = 'Unsatisfied'",
        "schema": "CREATE TABLE Things (service_type_code TEXT, thing_id NUMBER, service_details TEXT); CREATE TABLE Residents (property_id NUMBER, resident_id NUMBER); CREATE TABLE Residents_Services (property_id NUMBER, service_id NUMBER); CREATE TABLE Customer_Events (thing_id NUMBER, property_id NUMBER, resident_id NUMBER); CREATE TABLE Properties (property_address TEXT, property_id NUMBER, other_details TEXT); CREATE TABLE Timed_Locations_of_Things (Location_Code TEXT, thing_id NUMBER); CREATE TABLE Services (service_id NUMBER, service_type_code TEXT, service_details TEXT);"
      },
      {
        "question": "How many type of thing code includes 'Electronics'? | Do you mean how many things include type of thing code 'Electronics'? | Yes",
        "query": "SELECT COUNT ( DISTINCT thing_id ) FROM things WHERE type_of_thing_code = \"Electronics\"",
        "schema": "CREATE TABLE Timed_Status_of_Things (thing_id NUMBER); CREATE TABLE Residents_Services (service_id NUMBER, property_id NUMBER); CREATE TABLE Properties (property_address TEXT, other_details TEXT, property_id NUMBER, property_type_code TEXT); CREATE TABLE Things (service_type_code TEXT, thing_id NUMBER, Type_of_Thing_Code TEXT, service_details TEXT); CREATE TABLE Services (service_type_code TEXT, service_id NUMBER, service_details TEXT); CREATE TABLE Timed_Locations_of_Things (Location_Code TEXT, thing_id NUMBER); CREATE TABLE Residents (property_id NUMBER, resident_id NUMBER); CREATE TABLE Customer_Events (resident_id NUMBER, thing_id NUMBER, property_id NUMBER);"
      },
      {
        "question": "What are the service details of thing id 2?",
        "query": "SELECT service_details FROM things WHERE thing_id = 2",
        "schema": "CREATE TABLE Customer_Events (thing_id NUMBER, resident_id NUMBER, property_id NUMBER); CREATE TABLE Timed_Status_of_Things (thing_id NUMBER); CREATE TABLE Residents_Services (property_id NUMBER, service_id NUMBER); CREATE TABLE Things (service_type_code TEXT, service_details TEXT, Type_of_Thing_Code TEXT, thing_id NUMBER); CREATE TABLE Residents (resident_id NUMBER, property_id NUMBER); CREATE TABLE Customer_Event_Notes (service_type_code TEXT); CREATE TABLE Services (service_details TEXT, service_type_code TEXT, service_id NUMBER); CREATE TABLE Timed_Locations_of_Things (Location_Code TEXT, thing_id NUMBER); CREATE TABLE Properties (property_id NUMBER, property_address TEXT, other_details TEXT, property_type_code TEXT);"
      },
      {
        "question": "What is the service type code of thing id 2?",
        "query": "SELECT service_type_code FROM things WHERE thing_id = 2",
        "schema": "CREATE TABLE Properties (property_address TEXT, property_id NUMBER, property_type_code TEXT, other_details TEXT); CREATE TABLE Timed_Locations_of_Things (thing_id NUMBER, Location_Code TEXT); CREATE TABLE Residents_Services (service_id NUMBER, property_id NUMBER); CREATE TABLE Services (service_details TEXT, service_id NUMBER, service_type_code TEXT); CREATE TABLE Residents (property_id NUMBER, resident_id NUMBER); CREATE TABLE Customer_Events (resident_id NUMBER, property_id NUMBER, thing_id NUMBER); CREATE TABLE Things (service_details TEXT, thing_id NUMBER, service_type_code TEXT, Type_of_Thing_Code TEXT); CREATE TABLE Timed_Status_of_Things (thing_id NUMBER); CREATE TABLE Customer_Event_Notes (service_type_code TEXT);"
      },
      {
        "question": "What is the location code of thing id 10 and the date and time?",
        "query": "SELECT location_code, date_and_time FROM timed_locations_of_things WHERE thing_id = 10",
        "schema": "CREATE TABLE Things (service_type_code TEXT, service_details TEXT, thing_id NUMBER, Type_of_Thing_Code TEXT); CREATE TABLE Customer_Events (property_id NUMBER, resident_id NUMBER, thing_id NUMBER); CREATE TABLE Customer_Event_Notes (service_type_code TEXT); CREATE TABLE Services (service_type_code TEXT, service_id NUMBER, service_details TEXT); CREATE TABLE Timed_Locations_of_Things (Location_Code TEXT, Date_and_Time TIME, thing_id NUMBER); CREATE TABLE Residents (property_id NUMBER, resident_id NUMBER); CREATE TABLE Properties (property_id NUMBER, property_type_code TEXT, other_details TEXT, property_address TEXT); CREATE TABLE Residents_Services (service_id NUMBER, property_id NUMBER); CREATE TABLE Timed_Status_of_Things (Date_and_Date TIME, thing_id NUMBER);"
      }
    ],
    [
      {
        "question": "How many services has each resident requested",
        "query": "SELECT t1.resident_id ,COUNT ( * ) FROM residents AS t1 JOIN residents_services AS t2 ON t1.resident_id = t2.resident_id GROUP BY t1.resident_id",
        "schema": "CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Customer_Event_Notes (resident_id NUMBER); CREATE TABLE Residents_Services (service_id NUMBER, date_requested TIME, resident_id NUMBER, date_moved_in TIME, property_id NUMBER, other_details TEXT); CREATE TABLE Services (service_id NUMBER); CREATE TABLE Customer_Events (resident_id NUMBER); CREATE TABLE Residents (resident_id NUMBER);"
      },
      {
        "question": "List the resident_id,details, and the count in descending order of the count",
        "query": "SELECT t1.resident_id , t1.other_details , COUNT ( * ) FROM residents AS t1 JOIN residents_services AS t2 ON t1.resident_id = t2.resident_id GROUP BY t1.resident_id ORDER BY COUNT ( * ) DESC",
        "schema": "CREATE TABLE Services (service_details TEXT, service_id NUMBER); CREATE TABLE Customer_Event_Notes (resident_id NUMBER); CREATE TABLE Things (service_details TEXT); CREATE TABLE Customer_Events (resident_id NUMBER); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Residents (other_details TEXT, resident_id NUMBER); CREATE TABLE Residents_Services (other_details TEXT, date_requested TIME, property_id NUMBER, service_id NUMBER, resident_id NUMBER, date_moved_in TIME);"
      },
      {
        "question": "Tell me the count of total number of residents",
        "query": "SELECT COUNT ( * ) FROM residents",
        "schema": "CREATE TABLE Services (service_id NUMBER, service_details TEXT); CREATE TABLE Things (service_details TEXT); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Customer_Event_Notes (resident_id NUMBER); CREATE TABLE Residents (resident_id NUMBER, other_details TEXT, property_id NUMBER, date_moved_in TIME); CREATE TABLE Customer_Events (resident_id NUMBER); CREATE TABLE Residents_Services (other_details TEXT, resident_id NUMBER, date_moved_in TIME, service_id NUMBER, date_requested TIME, property_id NUMBER);"
      }
    ],
    [
      {
        "question": "What organization id Denesik and Sons Party?",
        "query": "SELECT organization_id FROM organizations WHERE organization_details = 'Denesik and Sons Party'",
        "schema": "CREATE TABLE Services (organization_id NUMBER); CREATE TABLE Organizations (parent_organization_id NUMBER, organization_id NUMBER, organization_details TEXT); CREATE TABLE Things (organization_id NUMBER, thing_id NUMBER);"
      },
      {
        "question": "What are the service type code of service id 10?",
        "query": "SELECT service_type_code FROM services WHERE service_id = '10'",
        "schema": "CREATE TABLE Things (organization_id NUMBER, service_type_code TEXT, thing_id NUMBER, Type_of_Thing_Code TEXT, service_details TEXT); CREATE TABLE Residents_Services (service_id NUMBER); CREATE TABLE Customer_Event_Notes (service_type_code TEXT); CREATE TABLE Organizations (organization_id NUMBER, organization_details TEXT, parent_organization_id NUMBER); CREATE TABLE Services (service_type_code TEXT, service_id NUMBER, service_details TEXT, organization_id NUMBER);"
      },
      {
        "question": "What organization details of service id 11?",
        "query": "SELECT t2.organization_details FROM services AS t1 JOIN organizations AS t2 ON t1.organization_id = t2.organization_id WHERE t1.service_id = '11'",
        "schema": "CREATE TABLE Organizations (organization_details TEXT, parent_organization_id NUMBER, organization_id NUMBER); CREATE TABLE Customer_Event_Notes (service_type_code TEXT); CREATE TABLE Residents_Services (service_id NUMBER); CREATE TABLE Services (service_type_code TEXT, service_details TEXT, service_id NUMBER, organization_id NUMBER); CREATE TABLE Things (organization_id NUMBER, thing_id NUMBER, Type_of_Thing_Code TEXT, service_type_code TEXT, service_details TEXT);"
      },
      {
        "question": "What is the distinct service type that are provided by the organization which has detail 'Denesik and Sons Party'?",
        "query": "SELECT DISTINCT t1.service_type_code FROM services AS t1 JOIN organizations AS t2 ON t1.organization_id = t2.organization_id WHERE t2.organization_details = 'Denesik and Sons Party'",
        "schema": "CREATE TABLE Customer_Event_Notes (service_type_code TEXT); CREATE TABLE Services (service_id NUMBER, service_type_code TEXT, organization_id NUMBER, service_details TEXT); CREATE TABLE Things (thing_id NUMBER, service_details TEXT, Type_of_Thing_Code TEXT, organization_id NUMBER, service_type_code TEXT); CREATE TABLE Residents_Services (service_id NUMBER); CREATE TABLE Organizations (organization_details TEXT, parent_organization_id NUMBER, organization_id NUMBER);"
      }
    ],
    [
      {
        "question": "How many organizations are there?",
        "query": "SELECT COUNT ( organization_id ) FROM organizations",
        "schema": "CREATE TABLE Properties (property_id NUMBER); CREATE TABLE Things (organization_id NUMBER, thing_id NUMBER); CREATE TABLE Services (service_id NUMBER, organization_id NUMBER); CREATE TABLE Residents (resident_id NUMBER, property_id NUMBER); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Organizations (parent_organization_id NUMBER, organization_id NUMBER, organization_details TEXT);"
      },
      {
        "question": "How many of those organizations are parent organizations?",
        "query": "SELECT organization_id FROM organizations WHERE organization_id IN ( SELECT parent_organization_id FROM organizations )",
        "schema": "CREATE TABLE Things (organization_id NUMBER, thing_id NUMBER); CREATE TABLE Services (service_id NUMBER, organization_id NUMBER); CREATE TABLE Properties (property_id NUMBER); CREATE TABLE Residents (resident_id NUMBER, property_id NUMBER); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Organizations (organization_id NUMBER, organization_details TEXT, parent_organization_id NUMBER);"
      },
      {
        "question": "Could you tell me how many organizations are not parent organizations of others?",
        "query": "SELECT COUNT ( organization_id ) FROM organizations WHERE organization_id NOT IN ( SELECT parent_organization_id FROM organizations )",
        "schema": "CREATE TABLE Things (thing_id NUMBER, organization_id NUMBER); CREATE TABLE Properties (property_id NUMBER); CREATE TABLE Services (organization_id NUMBER, service_id NUMBER); CREATE TABLE Residents (property_id NUMBER, resident_id NUMBER); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Organizations (organization_details TEXT, organization_id NUMBER, parent_organization_id NUMBER);"
      },
      {
        "question": "What is the full name of that organization?",
        "query": "SELECT organization_id FROM organizations EXCEPT SELECT parent_organization_id FROM organizations",
        "schema": "CREATE TABLE Properties (property_id NUMBER); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Things (thing_id NUMBER, organization_id NUMBER); CREATE TABLE Organizations (organization_details TEXT, parent_organization_id NUMBER, organization_id NUMBER); CREATE TABLE Residents (resident_id NUMBER, property_id NUMBER); CREATE TABLE Services (service_id NUMBER, organization_id NUMBER);"
      },
      {
        "question": "What about its organization ID?",
        "query": "SELECT organization_id FROM organizations EXCEPT SELECT parent_organization_id FROM organizations",
        "schema": "CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Things (thing_id NUMBER, organization_id NUMBER); CREATE TABLE Organizations (organization_id NUMBER, parent_organization_id NUMBER, organization_details TEXT); CREATE TABLE Properties (property_id NUMBER); CREATE TABLE Residents (property_id NUMBER, resident_id NUMBER); CREATE TABLE Services (organization_id NUMBER, service_id NUMBER);"
      }
    ],
    [
      {
        "question": "Which events only have 1 note?",
        "query": "SELECT t1.customer_event_id FROM customer_events AS t1 JOIN customer_event_notes AS t2 ON t1.customer_event_id = t2.customer_event_id GROUP BY t1.customer_event_id HAVING COUNT ( * ) = 1",
        "schema": "CREATE TABLE Customer_Event_Notes (Customer_Event_ID NUMBER, Customer_Event_Note_ID NUMBER, service_type_code TEXT, property_id NUMBER); CREATE TABLE Customer_Events (Customer_Event_ID NUMBER, customer_id NUMBER, thing_id NUMBER);"
      },
      {
        "question": "What about events that have 2 or 3 notes as well? Can you add those to the list.",
        "query": "SELECT t1.customer_event_id FROM customer_events AS t1 JOIN customer_event_notes AS t2 ON t1.customer_event_id = t2.customer_event_id GROUP BY t1.customer_event_id HAVING COUNT ( * ) BETWEEN 1 AND 3",
        "schema": "CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Customer_Events (thing_id NUMBER, Customer_Event_ID NUMBER, customer_id NUMBER); CREATE TABLE Customer_Event_Notes (Customer_Event_ID NUMBER, service_type_code TEXT, property_id NUMBER, Customer_Event_Note_ID NUMBER);"
      },
      {
        "question": "Can you show all the events that have one, two or three notes with their property ids?",
        "query": "SELECT t1.customer_event_id , t1.property_id FROM customer_events AS t1 JOIN customer_event_notes AS t2 ON t1.customer_event_id = t2.customer_event_id GROUP BY t1.customer_event_id HAVING COUNT ( * ) BETWEEN 1 AND 3",
        "schema": "CREATE TABLE Customer_Events (Customer_Event_ID NUMBER, property_id NUMBER, thing_id NUMBER, customer_id NUMBER); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Residents (property_id NUMBER); CREATE TABLE Customer_Event_Notes (Customer_Event_ID NUMBER, service_type_code TEXT, property_id NUMBER, Customer_Event_Note_ID NUMBER); CREATE TABLE Properties (property_id NUMBER);"
      }
    ],
    [
      {
        "question": "How many services has each resident requested?",
        "query": "SELECT t1.resident_id, COUNT ( * ) FROM residents AS t1 JOIN residents_services AS t2 ON t1.resident_id = t2.resident_id GROUP BY t1.resident_id ORDER BY COUNT ( * ) DESC",
        "schema": "CREATE TABLE Residents_Services (date_moved_in TIME, resident_id NUMBER, property_id NUMBER, date_requested TIME, service_id NUMBER); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Customer_Events (resident_id NUMBER); CREATE TABLE Residents (date_moved_in TIME, resident_id NUMBER); CREATE TABLE Customer_Event_Notes (resident_id NUMBER); CREATE TABLE Services (service_id NUMBER);"
      },
      {
        "question": "Can you list them in descending order?",
        "query": "SELECT t1.resident_id, COUNT ( * ) FROM residents AS t1 JOIN residents_services AS t2 ON t1.resident_id = t2.resident_id GROUP BY t1.resident_id ORDER BY COUNT ( * ) DESC",
        "schema": "CREATE TABLE Services (service_id NUMBER); CREATE TABLE Customer_Event_Notes (resident_id NUMBER); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Customer_Events (resident_id NUMBER); CREATE TABLE Residents_Services (property_id NUMBER, date_moved_in TIME, date_requested TIME, service_id NUMBER, resident_id NUMBER); CREATE TABLE Residents (resident_id NUMBER, date_moved_in TIME);"
      },
      {
        "question": "Can you list the residents by the count of services in descending order by count of services? | Do you just want the resident ids? | The resident_id and count of services",
        "query": "SELECT t1.resident_id, COUNT ( * ) FROM residents AS t1 JOIN residents_services AS t2 ON t1.resident_id = t2.resident_id GROUP BY t1.resident_id ORDER BY COUNT ( * ) DESC",
        "schema": "CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Residents (resident_id NUMBER, date_moved_in TIME); CREATE TABLE Customer_Events (resident_id NUMBER); CREATE TABLE Services (service_id NUMBER); CREATE TABLE Customer_Event_Notes (resident_id NUMBER); CREATE TABLE Residents_Services (property_id NUMBER, service_id NUMBER, resident_id NUMBER, date_requested TIME, date_moved_in TIME);"
      },
      {
        "question": "Can you add the resident other detail to the results?",
        "query": "SELECT t1.resident_id , t1.other_details , COUNT ( * ) FROM residents AS t1 JOIN residents_services AS t2 ON t1.resident_id = t2.resident_id GROUP BY t1.resident_id ORDER BY COUNT ( * ) DESC",
        "schema": "CREATE TABLE Customer_Event_Notes (resident_id NUMBER); CREATE TABLE Properties (other_details TEXT); CREATE TABLE Customer_Events (resident_id NUMBER); CREATE TABLE Services (service_details TEXT, service_id NUMBER); CREATE TABLE Residents_Services (other_details TEXT, date_moved_in TIME, service_id NUMBER, resident_id NUMBER, property_id NUMBER, date_requested TIME); CREATE TABLE Residents (property_id NUMBER, other_details TEXT, resident_id NUMBER, date_moved_in TIME); CREATE TABLE Customers (customer_id NUMBER);"
      }
    ],
    [
      {
        "question": "What is their distinct id and type?",
        "query": "SELECT DISTINCT t2.thing_id , t2.type_of_thing_code FROM timed_status_of_things AS t1 JOIN things AS t2 ON t1.thing_id = t2.thing_id WHERE t1.status_of_thing_code = 'Close'",
        "schema": "CREATE TABLE Organizations (parent_organization_id NUMBER, organization_id NUMBER); CREATE TABLE Residents (resident_id NUMBER, property_id NUMBER); CREATE TABLE Services (service_type_code TEXT, organization_id NUMBER); CREATE TABLE Customer_Event_Notes (Customer_Event_ID NUMBER, service_type_code TEXT); CREATE TABLE Customer_Events (thing_id NUMBER, customer_id NUMBER, Customer_Event_ID NUMBER); CREATE TABLE Things (service_type_code TEXT, Type_of_Thing_Code TEXT, organization_id NUMBER, thing_id NUMBER); CREATE TABLE Timed_Status_of_Things (thing_id NUMBER, Status_of_Thing_Code TEXT); CREATE TABLE Properties (property_id NUMBER, property_type_code TEXT); CREATE TABLE Customers (customer_id NUMBER);"
      },
      {
        "question": "* I have left the chat *",
        "query": "SELECT DISTINCT t2.thing_id , t2.type_of_thing_code FROM timed_status_of_things AS t1 JOIN things AS t2 ON t1.thing_id = t2.thing_id WHERE t1.status_of_thing_code = 'Close' AND t1.date_and_date < '2017-06-19 02:59:21'",
        "schema": "CREATE TABLE Organizations (organization_id NUMBER, parent_organization_id NUMBER); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Services (service_type_code TEXT, organization_id NUMBER); CREATE TABLE Residents (resident_id NUMBER, property_id NUMBER); CREATE TABLE Customer_Event_Notes (service_type_code TEXT, Customer_Event_ID NUMBER); CREATE TABLE Timed_Status_of_Things (Date_and_Date TIME, Status_of_Thing_Code TEXT, thing_id NUMBER); CREATE TABLE Timed_Locations_of_Things (thing_id NUMBER, Date_and_Time TIME); CREATE TABLE Things (thing_id NUMBER, service_type_code TEXT, Type_of_Thing_Code TEXT, organization_id NUMBER); CREATE TABLE Properties (property_id NUMBER, property_type_code TEXT); CREATE TABLE Customer_Events (Customer_Event_ID NUMBER, thing_id NUMBER, customer_id NUMBER);"
      }
    ],
    [
      {
        "question": "how many residents does each property have?list property id",
        "query": "SELECT t1.property_id , COUNT ( * ) FROM properties AS t1 JOIN residents AS t2 ON t1.property_id = t2.property_id GROUP BY t1.property_id",
        "schema": "CREATE TABLE Residents (resident_id NUMBER, property_id NUMBER); CREATE TABLE Residents_Services (resident_id NUMBER, property_id NUMBER); CREATE TABLE Properties (property_id NUMBER, property_address TEXT, property_type_code TEXT);"
      },
      {
        "question": "find the property type code and address for the property id 24",
        "query": "SELECT property_type_code, property_address FROM properties WHERE property_id = 24",
        "schema": "CREATE TABLE Properties (property_address TEXT, property_type_code TEXT, property_id NUMBER); CREATE TABLE Residents (resident_id NUMBER, property_id NUMBER); CREATE TABLE Residents_Services (property_id NUMBER, resident_id NUMBER);"
      },
      {
        "question": "find the date moved in for the resident id 6",
        "query": "SELECT date_moved_in FROM residents WHERE resident_id = 6",
        "schema": "CREATE TABLE Residents (date_moved_in TIME, date_moved_out TIME, property_id NUMBER, resident_id NUMBER); CREATE TABLE Properties (property_type_code TEXT, property_address TEXT, property_id NUMBER); CREATE TABLE Residents_Services (date_moved_in TIME, property_id NUMBER, resident_id NUMBER);"
      }
    ]
  ],
  "university_basketball": [
    [
      {
        "question": "Hello!  Can you please show me a list of all of the school names for all schools that are not of the Public affiliation?",
        "query": "SELECT school FROM university WHERE affiliation ! = 'Public'",
        "schema": "CREATE TABLE university (School TEXT, School_ID NUMBER, Affiliation TEXT); CREATE TABLE basketball_match (School_ID NUMBER);"
      },
      {
        "question": "Great!  Can you update that list to include the year that the school was founded?",
        "query": "SELECT school,founded FROM university WHERE affiliation ! = 'Public'",
        "schema": "CREATE TABLE university (Affiliation TEXT, Founded NUMBER, School TEXT, School_ID NUMBER); CREATE TABLE basketball_match (School_ID NUMBER);"
      },
      {
        "question": "Nice!  Can you show me a list of the names of all of the schools?",
        "query": "SELECT school FROM university",
        "schema": "CREATE TABLE basketball_match (School_ID NUMBER); CREATE TABLE university (Founded NUMBER, Affiliation TEXT, School_ID NUMBER, School TEXT);"
      },
      {
        "question": "Wonderful!  Finally, can you update this list to show the affiliation type of each of these schools?",
        "query": "SELECT school,affiliation FROM university",
        "schema": "CREATE TABLE university (Affiliation TEXT, School_ID NUMBER, School TEXT, Founded NUMBER); CREATE TABLE basketball_match (School_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Can you show me a list of colleges that have an enrollment of 15,000 or higher? | Do you want the names of the schools that have an enrollment of 15000 or higher? | Can you provide the name and the location of the schools that have an enrollment of 15,000 or higher?",
        "query": "SELECT school, LOCATION FROM university WHERE enrollment > 15000",
        "schema": "CREATE TABLE university (School TEXT, Location TEXT, School_ID NUMBER, Enrollment NUMBER);"
      },
      {
        "question": "What conference are these schools in?",
        "query": "SELECT primary_conference FROM university WHERE school IN ( SELECT school FROM university WHERE enrollment > 15000 )",
        "schema": "CREATE TABLE university (Primary_conference TEXT, Location TEXT, Enrollment NUMBER, School TEXT, Affiliation TEXT, School_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Hi, when was the University of Delaware founded?",
        "query": "SELECT founded FROM university WHERE school = 'University of Delaware'",
        "schema": "CREATE TABLE university (School TEXT, Location TEXT, School_ID NUMBER, Affiliation TEXT, Founded NUMBER);"
      },
      {
        "question": "and Lebanon Valley College?",
        "query": "SELECT founded FROM university WHERE school = 'Lebanon Valley College'",
        "schema": "CREATE TABLE university (Affiliation TEXT, Founded NUMBER, School TEXT, Location TEXT, School_ID NUMBER);"
      },
      {
        "question": "What is University of Rhode Island's affiliation?",
        "query": "SELECT affiliation FROM university WHERE school = 'University of Rhode Island'",
        "schema": "CREATE TABLE university (Location TEXT, School TEXT, School_ID NUMBER, Affiliation TEXT, Founded NUMBER);"
      }
    ],
    [
      {
        "question": "Hi there! Can you tell me how many school have an affiliation type that is not public?",
        "query": "SELECT COUNT ( * ) FROM university WHERE affiliation ! = 'Public'",
        "schema": "CREATE TABLE university (Affiliation TEXT, School TEXT, School_ID NUMBER); CREATE TABLE basketball_match (School_ID NUMBER);"
      },
      {
        "question": "Can you please tell me the name of that school and the enrollment?",
        "query": "SELECT school, enrollment FROM university WHERE affiliation ! = 'Public'",
        "schema": "CREATE TABLE basketball_match (School_ID NUMBER); CREATE TABLE university (School TEXT, School_ID NUMBER, Enrollment NUMBER, Affiliation TEXT);"
      },
      {
        "question": "What year was that school founded?",
        "query": "SELECT founded FROM university WHERE affiliation ! = 'Public'",
        "schema": "CREATE TABLE university (School_ID NUMBER, Enrollment NUMBER, Founded NUMBER, School TEXT, Affiliation TEXT); CREATE TABLE basketball_match (School_ID NUMBER);"
      }
    ],
    [
      {
        "question": "I want to know the number of public universities",
        "query": "SELECT COUNT ( * ) FROM university WHERE affiliation = 'Public'",
        "schema": "CREATE TABLE university (Enrollment NUMBER, Affiliation TEXT, School TEXT, School_ID NUMBER);"
      },
      {
        "question": "I want to know the number of public universities with over 20000 enrollment size.",
        "query": "SELECT COUNT ( * ) FROM university WHERE affiliation = 'Public' AND enrollment > 20000",
        "schema": "CREATE TABLE university (Affiliation TEXT, Enrollment NUMBER, School_ID NUMBER, School TEXT);"
      }
    ],
    [
      {
        "question": "What is the Primary conference of Lebanon Valley College?",
        "query": "SELECT primary_conference FROM university WHERE school = \"Lebanon Valley College\"",
        "schema": "CREATE TABLE basketball_match (Team_Name TEXT, School_ID NUMBER); CREATE TABLE university (Affiliation TEXT, School TEXT, School_ID NUMBER, Primary_conference TEXT);"
      },
      {
        "question": "What is the nickname of University of Rhode Island?",
        "query": "SELECT nickname FROM university WHERE school = \"University of Rhode Island\"",
        "schema": "CREATE TABLE basketball_match (Team_Name TEXT, Team_ID NUMBER, School_ID NUMBER); CREATE TABLE university (Nickname TEXT, Primary_conference TEXT, School TEXT, Affiliation TEXT, School_ID NUMBER);"
      },
      {
        "question": "What is the location of Fightin' Blue Hens?",
        "query": "SELECT LOCATION FROM university WHERE nickname = \"Fightin Blue Hens\"",
        "schema": "CREATE TABLE university (Location TEXT, Nickname TEXT, School_ID NUMBER, School TEXT, Affiliation TEXT, Primary_conference TEXT); CREATE TABLE basketball_match (School_ID NUMBER, Team_ID NUMBER, Team_Name TEXT, All_Games TEXT);"
      },
      {
        "question": "Find the school that was either founded after 1850 or public.",
        "query": "SELECT school FROM university WHERE founded > 1850 OR affiliation = 'Public'",
        "schema": "CREATE TABLE university (Primary_conference TEXT, Affiliation TEXT, School TEXT, School_ID NUMBER, Founded NUMBER, Location TEXT, Nickname TEXT); CREATE TABLE basketball_match (Team_ID NUMBER, Team_Name TEXT, All_Games TEXT, School_ID NUMBER);"
      }
    ],
    [
      {
        "question": "which is the oldest college in the table",
        "query": "SELECT school FROM university ORDER BY founded LIMIT 1",
        "schema": "CREATE TABLE university (School TEXT, School_ID NUMBER, Founded NUMBER);"
      },
      {
        "question": "what is the enrollment of the conference | The enrollment of the oldest college is 19067.0. | list the enrollment and primary-conference of the oldest college",
        "query": "SELECT enrollment , primary_conference FROM university ORDER BY founded LIMIT 1",
        "schema": "CREATE TABLE university (School TEXT, Primary_conference TEXT, School_ID NUMBER, Affiliation TEXT, Enrollment NUMBER, Founded NUMBER);"
      }
    ],
    [
      {
        "question": "what location are the clemson teams?",
        "query": "SELECT t1.location FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id = t2.school_id WHERE team_name = 'Clemson'",
        "schema": "CREATE TABLE university (School TEXT, School_ID NUMBER, Location TEXT, Affiliation TEXT); CREATE TABLE basketball_match (Team_Name TEXT, ACC_Regular_Season TEXT, ACC_Road TEXT, Team_ID NUMBER, School_ID NUMBER, ACC_Home TEXT, All_Home TEXT);"
      },
      {
        "question": "what scores were Clemson's home games?",
        "query": "SELECT t2.all_home FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id = t2.school_id WHERE team_name = 'Clemson'",
        "schema": "CREATE TABLE basketball_match (School_ID NUMBER, ACC_Regular_Season TEXT, All_Road TEXT, All_Home TEXT, ACC_Road TEXT, ACC_Home TEXT, Team_ID NUMBER, All_Games TEXT, Team_Name TEXT); CREATE TABLE university (School_ID NUMBER, School TEXT, Location TEXT, Affiliation TEXT);"
      },
      {
        "question": "How about the road game scores for Clemson?",
        "query": "SELECT t2.all_road FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id = t2.school_id WHERE team_name = 'Clemson'",
        "schema": "CREATE TABLE basketball_match (School_ID NUMBER, All_Home TEXT, ACC_Regular_Season TEXT, ACC_Home TEXT, Team_Name TEXT, Team_ID NUMBER, All_Road TEXT, All_Games TEXT, ACC_Road TEXT); CREATE TABLE university (Affiliation TEXT, School TEXT, School_ID NUMBER, Location TEXT);"
      },
      {
        "question": "What about all games score for the Clemson school?",
        "query": "SELECT t2.all_games FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id = t2.school_id WHERE team_name = 'Clemson'",
        "schema": "CREATE TABLE basketball_match (School_ID NUMBER, Team_ID NUMBER, All_Home TEXT, All_Road TEXT, ACC_Regular_Season TEXT, Team_Name TEXT, All_Games TEXT, ACC_Home TEXT, ACC_Road TEXT); CREATE TABLE university (School TEXT, School_ID NUMBER, Affiliation TEXT, Location TEXT);"
      },
      {
        "question": "How about for the Duke school?",
        "query": "SELECT t2.all_games FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id = t2.school_id WHERE team_name = 'Duke'",
        "schema": "CREATE TABLE university (School_ID NUMBER, Affiliation TEXT, School TEXT, Location TEXT); CREATE TABLE basketball_match (All_Road TEXT, Team_ID NUMBER, ACC_Regular_Season TEXT, All_Games TEXT, School_ID NUMBER, ACC_Home TEXT, Team_Name TEXT, ACC_Road TEXT, All_Home TEXT);"
      }
    ],
    [
      {
        "question": "what is the acc percent of each team?",
        "query": "SELECT team_id, acc_percent FROM basketball_match",
        "schema": "CREATE TABLE basketball_match (ACC_Regular_Season TEXT, Team_Name TEXT, Team_ID NUMBER, ACC_Percent TEXT, School_ID NUMBER, All_Games_Percent NUMBER, All_Games TEXT, ACC_Road TEXT); CREATE TABLE university (School_ID NUMBER, Primary_conference TEXT);"
      },
      {
        "question": "can you tell me what the lowest acc percent score is?",
        "query": "SELECT acc_percent FROM basketball_match ORDER BY acc_percent LIMIT 1",
        "schema": "CREATE TABLE basketball_match (Team_Name TEXT, All_Games_Percent NUMBER, ACC_Road TEXT, All_Games TEXT, School_ID NUMBER, Team_ID NUMBER, ACC_Percent TEXT, ACC_Regular_Season TEXT); CREATE TABLE university (Primary_conference TEXT, School_ID NUMBER);"
      },
      {
        "question": "what's the highest acc percent score?",
        "query": "SELECT acc_percent FROM basketball_match ORDER BY acc_percent DESC LIMIT 1",
        "schema": "CREATE TABLE university (School_ID NUMBER, Primary_conference TEXT); CREATE TABLE basketball_match (Team_Name TEXT, School_ID NUMBER, ACC_Percent TEXT, Team_ID NUMBER, ACC_Road TEXT, ACC_Regular_Season TEXT, All_Games TEXT, All_Games_Percent NUMBER);"
      }
    ],
    [
      {
        "question": "Show me the location details",
        "query": "SELECT LOCATION FROM university",
        "schema": "CREATE TABLE university (Location TEXT);"
      },
      {
        "question": "Show me the details of the schools",
        "query": "SELECT school FROM university",
        "schema": "CREATE TABLE university (School TEXT, Location TEXT, School_ID NUMBER); CREATE TABLE basketball_match (School_ID NUMBER);"
      },
      {
        "question": "Show me how many school locations have the word 'NY'",
        "query": "SELECT COUNT ( * ) FROM university WHERE LOCATION LIKE \"%NY%\"",
        "schema": "CREATE TABLE basketball_match (School_ID NUMBER); CREATE TABLE university (Location TEXT, School_ID NUMBER, School TEXT);"
      }
    ],
    [
      {
        "question": "What is the name of the school that participated in the basketball match?",
        "query": "SELECT school FROM university WHERE school_id NOT IN ( SELECT school_id FROM basketball_match )",
        "schema": "CREATE TABLE university (School TEXT, School_ID NUMBER, Nickname TEXT); CREATE TABLE basketball_match (All_Games TEXT, School_ID NUMBER, Team_Name TEXT, Team_ID NUMBER);"
      },
      {
        "question": "When was university of Rhode island founded?",
        "query": "SELECT founded FROM university WHERE school = \"University of Rhode Island\"",
        "schema": "CREATE TABLE university (Location TEXT, Founded NUMBER, School_ID NUMBER, Nickname TEXT, School TEXT, Affiliation TEXT); CREATE TABLE basketball_match (Team_Name TEXT, All_Games TEXT, Team_ID NUMBER, School_ID NUMBER);"
      },
      {
        "question": "What is the afflilation of university of rhode island?",
        "query": "SELECT affiliation FROM university WHERE school = \"University of Rhode Island\"",
        "schema": "CREATE TABLE basketball_match (Team_ID NUMBER, Team_Name TEXT, All_Games TEXT, School_ID NUMBER); CREATE TABLE university (Nickname TEXT, School_ID NUMBER, Location TEXT, Founded NUMBER, Affiliation TEXT, School TEXT);"
      }
    ],
    [
      {
        "question": "how many schools are there?",
        "query": "SELECT COUNT ( * ) FROM university",
        "schema": "CREATE TABLE basketball_match (School_ID NUMBER, Team_ID NUMBER); CREATE TABLE university (School TEXT, School_ID NUMBER, Location TEXT, Enrollment NUMBER);"
      },
      {
        "question": "Which school has the highest acc percent score?",
        "query": "SELECT t1.school FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id = t2.school_id ORDER BY t2.acc_percent DESC LIMIT 1",
        "schema": "CREATE TABLE basketball_match (ACC_Percent TEXT, School_ID NUMBER, All_Games_Percent NUMBER, Team_ID NUMBER); CREATE TABLE university (Affiliation TEXT, School TEXT, Location TEXT, Enrollment NUMBER, School_ID NUMBER);"
      },
      {
        "question": "How about the lowest?",
        "query": "SELECT t1.school FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id = t2.school_id ORDER BY t2.acc_percent LIMIT 1",
        "schema": "CREATE TABLE university (Location TEXT, Enrollment NUMBER, Affiliation TEXT, School TEXT, School_ID NUMBER); CREATE TABLE basketball_match (School_ID NUMBER, ACC_Percent TEXT, Team_ID NUMBER, All_Games_Percent NUMBER);"
      },
      {
        "question": "What's its primary conference?",
        "query": "SELECT t1.primary_conference FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id = t2.school_id ORDER BY t2.acc_percent LIMIT 1",
        "schema": "CREATE TABLE university (Primary_conference TEXT, Location TEXT, School TEXT, School_ID NUMBER, Affiliation TEXT, Enrollment NUMBER); CREATE TABLE basketball_match (All_Games_Percent NUMBER, School_ID NUMBER, ACC_Percent TEXT, Team_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Hello!  Can you show me the top 3 school with the largest enrollment?",
        "query": "SELECT * FROM university ORDER BY enrollment DESC LIMIT 3",
        "schema": "CREATE TABLE university (School_ID NUMBER, Enrollment NUMBER, School TEXT); CREATE TABLE basketball_match (School_ID NUMBER);"
      },
      {
        "question": "Can you filter that list to show only the school with the largest enrollment?",
        "query": "SELECT * FROM university ORDER BY enrollment DESC LIMIT 1",
        "schema": "CREATE TABLE university (School TEXT, School_ID NUMBER, Enrollment NUMBER); CREATE TABLE basketball_match (School_ID NUMBER);"
      },
      {
        "question": "Thank you!  What athletic conference is Rutgers University in?",
        "query": "SELECT primary_conference FROM university WHERE school = \"Rutgers University\"",
        "schema": "CREATE TABLE basketball_match (School_ID NUMBER); CREATE TABLE university (Affiliation TEXT, School_ID NUMBER, Location TEXT, Primary_conference TEXT, Enrollment NUMBER, School TEXT);"
      }
    ],
    [
      {
        "question": "Which school has the largest enrollment?",
        "query": "SELECT school FROM university ORDER BY enrollment DESC LIMIT 1",
        "schema": "CREATE TABLE basketball_match (School_ID NUMBER); CREATE TABLE university (School TEXT, School_ID NUMBER, Enrollment NUMBER);"
      },
      {
        "question": "When was the school founded?",
        "query": "SELECT founded FROM university ORDER BY enrollment DESC LIMIT 1",
        "schema": "CREATE TABLE basketball_match (School_ID NUMBER); CREATE TABLE university (Founded NUMBER, Affiliation TEXT, School TEXT, School_ID NUMBER, Enrollment NUMBER);"
      },
      {
        "question": "Where is it located?",
        "query": "SELECT LOCATION FROM university ORDER BY enrollment DESC LIMIT 1",
        "schema": "CREATE TABLE university (Founded NUMBER, Enrollment NUMBER, Location TEXT, Affiliation TEXT, School TEXT, School_ID NUMBER); CREATE TABLE basketball_match (School_ID NUMBER);"
      },
      {
        "question": "How many are enrolled?",
        "query": "SELECT enrollment FROM university ORDER BY enrollment DESC LIMIT 1",
        "schema": "CREATE TABLE university (Location TEXT, School_ID NUMBER, Enrollment NUMBER, Founded NUMBER, Affiliation TEXT, School TEXT); CREATE TABLE basketball_match (School_ID NUMBER);"
      },
      {
        "question": "What is the school's nickname?",
        "query": "SELECT nickname FROM university ORDER BY enrollment DESC LIMIT 1",
        "schema": "CREATE TABLE university (Location TEXT, School TEXT, Nickname TEXT, Affiliation TEXT, Enrollment NUMBER, School_ID NUMBER, Founded NUMBER); CREATE TABLE basketball_match (School_ID NUMBER, Team_ID NUMBER, Team_Name TEXT);"
      }
    ],
    [
      {
        "question": "Yes please",
        "query": "SELECT SUM ( enrollment ) FROM university",
        "schema": "CREATE TABLE university (School TEXT, Enrollment NUMBER, School_ID NUMBER, Affiliation TEXT); CREATE TABLE basketball_match (All_Games TEXT, ACC_Regular_Season TEXT, All_Games_Percent NUMBER, Team_Name TEXT, Team_ID NUMBER, School_ID NUMBER);"
      },
      {
        "question": "How about the total number of enrollments for just colleges that were founded after the year 1850?",
        "query": "SELECT SUM ( enrollment ) FROM university WHERE founded > 1850",
        "schema": "CREATE TABLE basketball_match (All_Games_Percent NUMBER, Team_Name TEXT, ACC_Regular_Season TEXT, School_ID NUMBER, All_Games TEXT, Team_ID NUMBER); CREATE TABLE university (Affiliation TEXT, School TEXT, Founded NUMBER, Enrollment NUMBER, School_ID NUMBER);"
      },
      {
        "question": "How about the total number of enrollments for just colleges that were founded after the year 1850 for each type of affiliation?",
        "query": "SELECT affiliation, SUM ( enrollment ) FROM university WHERE founded > 1850 GROUP BY affiliation",
        "schema": "CREATE TABLE basketball_match (School_ID NUMBER, Team_ID NUMBER, All_Games TEXT, ACC_Regular_Season TEXT, Team_Name TEXT, All_Games_Percent NUMBER); CREATE TABLE university (Affiliation TEXT, School_ID NUMBER, School TEXT, Founded NUMBER, Enrollment NUMBER);"
      }
    ],
    [
      {
        "question": "Can you show me which school is founded most recently?",
        "query": "SELECT * FROM university ORDER BY founded DESC LIMIT 1",
        "schema": "CREATE TABLE university (Founded NUMBER, Affiliation TEXT, School TEXT, School_ID NUMBER); CREATE TABLE basketball_match (School_ID NUMBER);"
      }
    ]
  ],
  "election_representative": [
    [
      {
        "question": "please show me the names of all of the representatives",
        "query": "SELECT name FROM representative",
        "schema": "CREATE TABLE election (Representative_ID NUMBER); CREATE TABLE representative (Name TEXT, Representative_ID NUMBER);"
      },
      {
        "question": "Now show narrow down the list to just those who have not been involved in an election",
        "query": "SELECT name FROM representative WHERE representative_id NOT IN ( SELECT representative_id FROM election )",
        "schema": "CREATE TABLE election (Election_ID NUMBER, Representative_ID NUMBER); CREATE TABLE representative (Representative_ID NUMBER, Name TEXT);"
      },
      {
        "question": "now show those representatives and what party they are a member of",
        "query": "SELECT name, party FROM representative WHERE representative_id NOT IN ( SELECT representative_id FROM election )",
        "schema": "CREATE TABLE election (Representative_ID NUMBER, Election_ID NUMBER); CREATE TABLE representative (Representative_ID NUMBER, Party TEXT, Name TEXT);"
      }
    ],
    [
      {
        "question": "what is the average lifespan of the representatives",
        "query": "SELECT AVG ( lifespan ) FROM representative",
        "schema": "CREATE TABLE representative (Name TEXT, Lifespan TEXT, Representative_ID NUMBER); CREATE TABLE election (Representative_ID NUMBER);"
      },
      {
        "question": "what parties have at least two representatives",
        "query": "SELECT party FROM representative GROUP BY party HAVING COUNT ( * ) > = 2",
        "schema": "CREATE TABLE election (Representative_ID NUMBER); CREATE TABLE representative (Party TEXT, Lifespan TEXT, Name TEXT, Representative_ID NUMBER);"
      },
      {
        "question": "what parties have at least three representatives",
        "query": "SELECT party FROM representative GROUP BY party HAVING COUNT ( * ) > = 3",
        "schema": "CREATE TABLE representative (Party TEXT, Representative_ID NUMBER, Lifespan TEXT, Name TEXT); CREATE TABLE election (Representative_ID NUMBER);"
      }
    ],
    [
      {
        "question": "list the life spans of all representatives",
        "query": "SELECT lifespan FROM representative",
        "schema": "CREATE TABLE election (Representative_ID NUMBER); CREATE TABLE representative (Lifespan TEXT, Representative_ID NUMBER, Name TEXT);"
      },
      {
        "question": "what are the life spans of representatives from New York?",
        "query": "SELECT lifespan FROM representative WHERE state = \"New York\"",
        "schema": "CREATE TABLE representative (State TEXT, Lifespan TEXT, Name TEXT, Representative_ID NUMBER); CREATE TABLE election (Representative_ID NUMBER);"
      },
      {
        "question": "what are the life spans of representatives from Indiana?",
        "query": "SELECT lifespan FROM representative WHERE state = \"Indiana\"",
        "schema": "CREATE TABLE election (Representative_ID NUMBER); CREATE TABLE representative (State TEXT, Representative_ID NUMBER, Lifespan TEXT, Name TEXT);"
      }
    ],
    [
      {
        "question": "How many representatives are republicans?",
        "query": "SELECT COUNT ( * ) FROM representative WHERE party = \"Republican\"",
        "schema": "CREATE TABLE election (Representative_ID NUMBER); CREATE TABLE representative (Party TEXT, Name TEXT, Representative_ID NUMBER);"
      },
      {
        "question": "And democrats?",
        "query": "SELECT COUNT ( * ) FROM representative WHERE party = \"Democratic\"",
        "schema": "CREATE TABLE election (Representative_ID NUMBER); CREATE TABLE representative (Representative_ID NUMBER, Name TEXT, Party TEXT);"
      },
      {
        "question": "WHich representative has the lowest votes?",
        "query": "SELECT representative_id FROM election ORDER BY votes ASC LIMIT 1",
        "schema": "CREATE TABLE representative (Name TEXT, Party TEXT, Representative_ID NUMBER); CREATE TABLE election (Representative_ID NUMBER, Vote_Percent NUMBER, Votes NUMBER);"
      },
      {
        "question": "What party is this representative in?",
        "query": "SELECT party FROM representative WHERE representative_id = ( SELECT representative_id FROM election ORDER BY votes ASC LIMIT 1 )",
        "schema": "CREATE TABLE election (Representative_ID NUMBER, Vote_Percent NUMBER, Votes NUMBER); CREATE TABLE representative (Party TEXT, Representative_ID NUMBER, Name TEXT);"
      }
    ],
    [
      {
        "question": "Which states have two or more representatives?",
        "query": "SELECT state FROM representative GROUP BY state HAVING COUNT ( * ) > = 2",
        "schema": "CREATE TABLE representative (State TEXT, Representative_ID NUMBER, Name TEXT); CREATE TABLE election (Representative_ID NUMBER);"
      },
      {
        "question": "What are the names of the representatives from those states?",
        "query": "SELECT name FROM representative WHERE state IN ( SELECT state FROM representative GROUP BY state HAVING COUNT ( * ) > = 2 )",
        "schema": "CREATE TABLE representative (Name TEXT, Representative_ID NUMBER, State TEXT); CREATE TABLE election (Representative_ID NUMBER);"
      },
      {
        "question": "What parties do they belong to?",
        "query": "SELECT party FROM representative WHERE state IN ( SELECT state FROM representative GROUP BY state HAVING COUNT ( * ) > = 2 )",
        "schema": "CREATE TABLE representative (Name TEXT, Representative_ID NUMBER, Party TEXT, State TEXT); CREATE TABLE election (Representative_ID NUMBER);"
      }
    ],
    [
      {
        "question": "what is the minimum vote percent of elections?",
        "query": "SELECT MIN ( vote_percent ) FROM election",
        "schema": "CREATE TABLE representative (Representative_ID NUMBER); CREATE TABLE election (Election_ID NUMBER, Vote_Percent NUMBER, Votes NUMBER);"
      },
      {
        "question": "what is the maximum vote percent of elections?",
        "query": "SELECT MAX ( vote_percent ) FROM election",
        "schema": "CREATE TABLE election (Vote_Percent NUMBER, Election_ID NUMBER, Votes NUMBER); CREATE TABLE representative (Representative_ID NUMBER);"
      },
      {
        "question": "Which election had the most votes?",
        "query": "SELECT election_id FROM election WHERE votes = ( SELECT MAX ( votes ) FROM election )",
        "schema": "CREATE TABLE election (Election_ID NUMBER, Votes NUMBER, Vote_Percent NUMBER); CREATE TABLE representative (Representative_ID NUMBER);"
      },
      {
        "question": "Which election had the least votes?",
        "query": "SELECT election_id FROM election WHERE votes = ( SELECT MIN ( votes ) FROM election )",
        "schema": "CREATE TABLE election (Vote_Percent NUMBER, Votes NUMBER, Election_ID NUMBER); CREATE TABLE representative (Representative_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What are the names of representatives in descending order of votes please?",
        "query": "SELECT t2.name FROM election AS t1 JOIN representative AS t2 ON t1.representative_id = t2.representative_id ORDER BY votes DESC",
        "schema": "CREATE TABLE representative (Representative_ID NUMBER, Name TEXT); CREATE TABLE election (Representative_ID NUMBER, Votes NUMBER);"
      },
      {
        "question": "What are their parties?",
        "query": "SELECT t2.name, t2.party FROM election AS t1 JOIN representative AS t2 ON t1.representative_id = t2.representative_id ORDER BY votes DESC",
        "schema": "CREATE TABLE election (Election_ID NUMBER, Representative_ID NUMBER, Votes NUMBER); CREATE TABLE representative (Representative_ID NUMBER, Name TEXT, Party TEXT);"
      },
      {
        "question": "What states are they from, please?",
        "query": "SELECT t2.name, t2.state FROM election AS t1 JOIN representative AS t2 ON t1.representative_id = t2.representative_id ORDER BY votes DESC",
        "schema": "CREATE TABLE election (Election_ID NUMBER, Representative_ID NUMBER, Votes NUMBER); CREATE TABLE representative (Representative_ID NUMBER, Party TEXT, State TEXT, Name TEXT);"
      },
      {
        "question": "What are their vote percents?",
        "query": "SELECT t2.name, t1.vote_percent FROM election AS t1 JOIN representative AS t2 ON t1.representative_id = t2.representative_id ORDER BY votes DESC",
        "schema": "CREATE TABLE election (Votes NUMBER, Vote_Percent NUMBER, Election_ID NUMBER, Representative_ID NUMBER); CREATE TABLE representative (Party TEXT, State TEXT, Representative_ID NUMBER, Name TEXT);"
      },
      {
        "question": "What about their dates?",
        "query": "SELECT t2.name, t1.date FROM election AS t1 JOIN representative AS t2 ON t1.representative_id = t2.representative_id ORDER BY votes DESC",
        "schema": "CREATE TABLE election (Date TEXT, Vote_Percent NUMBER, Representative_ID NUMBER, Votes NUMBER, Election_ID NUMBER); CREATE TABLE representative (State TEXT, Name TEXT, Representative_ID NUMBER, Party TEXT);"
      }
    ]
  ],
  "railway": [
    [
      {
        "question": "Hi, can you please tell me which country has a manager of age above 50?",
        "query": "SELECT country FROM manager WHERE age > 50",
        "schema": "CREATE TABLE manager (Age NUMBER, Country TEXT, Manager_ID NUMBER); CREATE TABLE railway_manage (Manager_ID NUMBER);"
      },
      {
        "question": "what about the countries with manager of age below 46?",
        "query": "SELECT country FROM manager WHERE age < 46",
        "schema": "CREATE TABLE railway_manage (Manager_ID NUMBER); CREATE TABLE manager (Manager_ID NUMBER, Country TEXT, Age NUMBER);"
      },
      {
        "question": "can you please tell me how many managers Scotland has?",
        "query": "SELECT COUNT ( * ) FROM manager WHERE country = 'Scotland'",
        "schema": "CREATE TABLE railway_manage (Manager_ID NUMBER); CREATE TABLE manager (Country TEXT, Age NUMBER, Manager_ID NUMBER);"
      },
      {
        "question": "what about other countries?",
        "query": "SELECT COUNT ( * ) , country FROM manager WHERE country ! = 'Scotland' GROUP BY country",
        "schema": "CREATE TABLE railway_manage (Manager_ID NUMBER); CREATE TABLE manager (Country TEXT, Age NUMBER, Manager_ID NUMBER);"
      },
      {
        "question": "how many level 5 managers does United States have?",
        "query": "SELECT COUNT ( * ) FROM manager WHERE country = 'United States' AND LEVEL = 5",
        "schema": "CREATE TABLE manager (Country TEXT, Manager_ID NUMBER, Level NUMBER, Age NUMBER); CREATE TABLE railway_manage (Manager_ID NUMBER);"
      },
      {
        "question": "and can you please tell me their names?",
        "query": "SELECT name FROM manager WHERE country = 'United States' AND LEVEL = 5",
        "schema": "CREATE TABLE railway_manage (Manager_ID NUMBER); CREATE TABLE manager (Name TEXT, Manager_ID NUMBER, Level NUMBER, Age NUMBER, Country TEXT);"
      }
    ],
    [
      {
        "question": "Show the countries that have managers of age above 50 or below 46?",
        "query": "SELECT country FROM manager WHERE age > 50 OR age < 46",
        "schema": "CREATE TABLE manager (Country TEXT, Age NUMBER);"
      },
      {
        "question": "What is the least aged Manager's name on the list?",
        "query": "SELECT name FROM manager ORDER BY age LIMIT 1",
        "schema": "CREATE TABLE manager (Name TEXT, Manager_ID NUMBER, Country TEXT, Age NUMBER);"
      },
      {
        "question": "How many managers are from United States on the list?",
        "query": "SELECT COUNT ( * ) FROM manager WHERE country = 'United States'",
        "schema": "CREATE TABLE manager (Manager_ID NUMBER, Name TEXT, Country TEXT, Age NUMBER);"
      }
    ],
    [
      {
        "question": "Which railways do not have trains? | Did you mean the object number of railways that do not have any train? | Yes",
        "query": "SELECT objectnumber FROM railway WHERE railway_id NOT IN ( SELECT railway_id FROM train )",
        "schema": "CREATE TABLE train (Railway_ID NUMBER); CREATE TABLE railway (ObjectNumber TEXT, Railway_ID NUMBER, Railway TEXT);"
      },
      {
        "question": "and ones that do?",
        "query": "SELECT objectnumber FROM railway WHERE railway_id IN ( SELECT railway_id FROM train )",
        "schema": "CREATE TABLE train (Train_Num TEXT, From TEXT, Railway_ID NUMBER, Train_ID NUMBER); CREATE TABLE railway (Railway TEXT, Railway_ID NUMBER, ObjectNumber TEXT);"
      },
      {
        "question": "What are their names?",
        "query": "SELECT railway FROM railway WHERE railway_id IN ( SELECT railway_id FROM train )",
        "schema": "CREATE TABLE train (Railway_ID NUMBER, Train_ID NUMBER, From TEXT, Name TEXT, Train_Num TEXT); CREATE TABLE railway (ObjectNumber TEXT, Railway TEXT, Railway_ID NUMBER);"
      },
      {
        "question": "and the names of the railways with no trains?",
        "query": "SELECT railway FROM railway WHERE railway_id NOT IN ( SELECT railway_id FROM train )",
        "schema": "CREATE TABLE railway (ObjectNumber TEXT, Railway TEXT, Railway_ID NUMBER); CREATE TABLE train (Train_ID NUMBER, From TEXT, Railway_ID NUMBER, Train_Num TEXT, Name TEXT);"
      },
      {
        "question": "when were they built?",
        "query": "SELECT built FROM railway WHERE railway_id NOT IN ( SELECT railway_id FROM train )",
        "schema": "CREATE TABLE train (From TEXT, Train_ID NUMBER, Train_Num TEXT, Name TEXT, Railway_ID NUMBER); CREATE TABLE railway (Built TEXT, ObjectNumber TEXT, Builder TEXT, Railway_ID NUMBER, Railway TEXT);"
      }
    ],
    [
      {
        "question": "how many railway there",
        "query": "SELECT COUNT ( * ) FROM railway",
        "schema": "CREATE TABLE manager (Manager_ID NUMBER); CREATE TABLE railway (Location TEXT, Builder TEXT, Railway_ID NUMBER, Railway TEXT, ObjectNumber TEXT); CREATE TABLE railway_manage (Manager_ID NUMBER, Railway_ID NUMBER); CREATE TABLE train (Train_Num TEXT, Railway_ID NUMBER, Train_ID NUMBER);"
      },
      {
        "question": "what is the train number of sewagram exp",
        "query": "SELECT train_num FROM train WHERE name = \"Sewagram Exp\"",
        "schema": "CREATE TABLE railway (Railway_ID NUMBER, Location TEXT, Railway TEXT, ObjectNumber TEXT, Builder TEXT); CREATE TABLE railway_manage (Railway_ID NUMBER, Manager_ID NUMBER); CREATE TABLE manager (Manager_ID NUMBER); CREATE TABLE train (Railway_ID NUMBER, Train_ID NUMBER, Train_Num TEXT, Name TEXT, From TEXT);"
      },
      {
        "question": "what is the location of mr",
        "query": "SELECT LOCATION FROM railway WHERE railway = \"MR\"",
        "schema": "CREATE TABLE railway_manage (Manager_ID NUMBER, Railway_ID NUMBER); CREATE TABLE railway (Location TEXT, Builder TEXT, Railway TEXT, Railway_ID NUMBER, ObjectNumber TEXT); CREATE TABLE manager (Name TEXT, Manager_ID NUMBER); CREATE TABLE train (Train_ID NUMBER, Name TEXT, Train_Num TEXT, From TEXT, Railway_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Can you tell me the name of the oldest manager please?",
        "query": "SELECT name FROM manager ORDER BY age DESC LIMIT 1",
        "schema": "CREATE TABLE manager (Age NUMBER, Manager_ID NUMBER, Working_year_starts TEXT, Name TEXT); CREATE TABLE railway (Railway_ID NUMBER); CREATE TABLE railway_manage (Railway_ID NUMBER, Manager_ID NUMBER);"
      },
      {
        "question": "What is the name of the manager with the earliest working year?",
        "query": "SELECT name FROM manager ORDER BY working_year_starts ASC LIMIT 1",
        "schema": "CREATE TABLE manager (Name TEXT, Working_year_starts TEXT, Age NUMBER, Manager_ID NUMBER); CREATE TABLE railway (Railway_ID NUMBER); CREATE TABLE railway_manage (Manager_ID NUMBER, Railway_ID NUMBER, From_Year TEXT);"
      },
      {
        "question": "Can you list the names of all managers with the highest level?",
        "query": "SELECT name FROM manager WHERE LEVEL = ( SELECT MAX ( LEVEL ) FROM manager )",
        "schema": "CREATE TABLE railway_manage (Manager_ID NUMBER, From_Year TEXT, Railway_ID NUMBER); CREATE TABLE manager (Working_year_starts TEXT, Level NUMBER, Manager_ID NUMBER, Name TEXT, Age NUMBER); CREATE TABLE railway (Railway_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Hi, Can you tell me the most common builder of railways?",
        "query": "SELECT builder FROM railway GROUP BY builder ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE railway (Railway TEXT, Builder TEXT, Built TEXT, Railway_ID NUMBER); CREATE TABLE train (Railway_ID NUMBER);"
      },
      {
        "question": "Can you tell me the last railways this builder has build?",
        "query": "SELECT railway FROM railway GROUP BY builder HAVING builder = \"GWR Swindon\" ORDER BY built DESC LIMIT 1",
        "schema": "CREATE TABLE train (Railway_ID NUMBER); CREATE TABLE railway (Built TEXT, Railway_ID NUMBER, Railway TEXT, Builder TEXT);"
      },
      {
        "question": "In what year was GWRSn build?",
        "query": "SELECT built FROM railway GROUP BY builder HAVING builder = \"GWR Swindon\" ORDER BY built DESC LIMIT 1",
        "schema": "CREATE TABLE train (Railway_ID NUMBER); CREATE TABLE railway (Railway TEXT, Railway_ID NUMBER, Location TEXT, Builder TEXT, Built TEXT);"
      }
    ],
    [
      {
        "question": "which object railways that do not have any trains? | Do you mean the object number? | yes, I apologize. Which object number railways that do not have any trains?",
        "query": "SELECT objectnumber FROM railway WHERE railway_id NOT IN ( SELECT railway_id FROM train )",
        "schema": "CREATE TABLE railway_manage (Railway_ID NUMBER); CREATE TABLE railway (Railway_ID NUMBER, ObjectNumber TEXT, Railway TEXT); CREATE TABLE train (Railway_ID NUMBER);"
      },
      {
        "question": "which one is located in New York. | Do you mean York? | sorry, yes.",
        "query": "SELECT objectnumber FROM railway WHERE railway_id NOT IN ( SELECT railway_id FROM train ) AND LOCATION = \"York\"",
        "schema": "CREATE TABLE train (Railway_ID NUMBER, From TEXT); CREATE TABLE railway_manage (Railway_ID NUMBER); CREATE TABLE railway (ObjectNumber TEXT, Railway TEXT, Location TEXT, Railway_ID NUMBER);"
      },
      {
        "question": "which object numbers do have trains?",
        "query": "SELECT objectnumber FROM railway WHERE railway_id IN ( SELECT railway_id FROM train )",
        "schema": "CREATE TABLE railway_manage (Railway_ID NUMBER); CREATE TABLE railway (Location TEXT, Railway_ID NUMBER, ObjectNumber TEXT, Railway TEXT); CREATE TABLE train (From TEXT, Railway_ID NUMBER);"
      },
      {
        "question": "who is the builder of \nObject Number 1975-7006?",
        "query": "SELECT builder FROM railway WHERE objectnumber = \"1975-7006\"",
        "schema": "CREATE TABLE railway (ObjectNumber TEXT, Built TEXT, Railway TEXT, Location TEXT, Railway_ID NUMBER, Builder TEXT); CREATE TABLE train (Railway_ID NUMBER, From TEXT); CREATE TABLE railway_manage (Railway_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Can you find the name and age of the oldest manager?",
        "query": "SELECT name,age FROM manager ORDER BY age DESC LIMIT 1",
        "schema": "CREATE TABLE railway_manage (Manager_ID NUMBER); CREATE TABLE manager (Name TEXT, Manager_ID NUMBER, Age NUMBER);"
      },
      {
        "question": "What year did Todd Hamilton start working?",
        "query": "SELECT working_year_starts FROM manager WHERE name = \"Todd Hamilton\"",
        "schema": "CREATE TABLE railway_manage (Manager_ID NUMBER); CREATE TABLE manager (Name TEXT, Manager_ID NUMBER, Working_year_starts TEXT, Age NUMBER);"
      }
    ],
    [
      {
        "question": "Please show the countries that have both managers of age above 50, and managers of age below 46",
        "query": "SELECT country FROM manager WHERE age > 50 INTERSECT SELECT country FROM manager WHERE age < 46",
        "schema": "CREATE TABLE manager (Age NUMBER, Country TEXT, Manager_ID NUMBER);"
      },
      {
        "question": "Please show me the names of all those managers",
        "query": "SELECT name FROM manager",
        "schema": "CREATE TABLE manager (Manager_ID NUMBER, Age NUMBER, Name TEXT, Country TEXT);"
      },
      {
        "question": "Please show me the age of the youngest and oldest managers",
        "query": "SELECT MIN ( age ) ,MAX ( age ) FROM manager",
        "schema": "CREATE TABLE manager (Country TEXT, Name TEXT, Manager_ID NUMBER, Age NUMBER);"
      }
    ],
    [
      {
        "question": "Can you list the names of the locations that have two or more railways?",
        "query": "SELECT LOCATION FROM railway GROUP BY LOCATION HAVING COUNT ( * ) > = 2",
        "schema": "CREATE TABLE railway (Location TEXT, Railway_ID NUMBER, Railway TEXT, ObjectNumber TEXT);"
      },
      {
        "question": "When were those built?",
        "query": "SELECT built FROM railway GROUP BY LOCATION HAVING COUNT ( * ) > = 2",
        "schema": "CREATE TABLE railway (ObjectNumber TEXT, Railway_ID NUMBER, Railway TEXT, Built TEXT, Location TEXT);"
      },
      {
        "question": "What is the location of the most recently built railway?",
        "query": "SELECT LOCATION FROM railway ORDER BY built DESC LIMIT 1",
        "schema": "CREATE TABLE railway (ObjectNumber TEXT, Railway_ID NUMBER, Built TEXT, Location TEXT, Railway TEXT);"
      },
      {
        "question": "Who is the builder of the railway built earliest?",
        "query": "SELECT builder FROM railway ORDER BY built ASC LIMIT 1",
        "schema": "CREATE TABLE railway (Railway TEXT, Railway_ID NUMBER, Built TEXT, Builder TEXT, Location TEXT, ObjectNumber TEXT);"
      },
      {
        "question": "When was that railway built?",
        "query": "SELECT built FROM railway ORDER BY built ASC LIMIT 1",
        "schema": "CREATE TABLE railway (Builder TEXT, Location TEXT, ObjectNumber TEXT, Railway_ID NUMBER, Railway TEXT, Built TEXT);"
      }
    ],
    [
      {
        "question": "Which builder has the least trains?",
        "query": "SELECT t1.builder FROM railway AS t1 JOIN train AS t2 ON t1.railway_id = t2.railway_id GROUP BY t2.railway_id ORDER BY COUNT ( * ) ASC LIMIT 1",
        "schema": "CREATE TABLE manager (Manager_ID NUMBER); CREATE TABLE train (Railway_ID NUMBER, Name TEXT, Train_Num TEXT); CREATE TABLE railway (Railway_ID NUMBER, Built TEXT, Railway TEXT, ObjectNumber TEXT, Builder TEXT);"
      },
      {
        "question": "How about the builder with the most trains?",
        "query": "SELECT t1.builder FROM railway AS t1 JOIN train AS t2 ON t1.railway_id = t2.railway_id GROUP BY t2.railway_id ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE railway (Railway_ID NUMBER, ObjectNumber TEXT, Railway TEXT, Built TEXT, Builder TEXT); CREATE TABLE manager (Manager_ID NUMBER); CREATE TABLE train (Train_ID NUMBER, Name TEXT, Train_Num TEXT, Railway_ID NUMBER);"
      },
      {
        "question": "What is his id?",
        "query": "SELECT t1.railway_id FROM railway AS t1 JOIN train AS t2 ON t1.railway_id = t2.railway_id GROUP BY t2.railway_id ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE train (Name TEXT, Train_Num TEXT, Train_ID NUMBER, Railway_ID NUMBER); CREATE TABLE railway (Built TEXT, Builder TEXT, Railway_ID NUMBER, Railway TEXT, ObjectNumber TEXT); CREATE TABLE manager (Manager_ID NUMBER);"
      }
    ]
  ],
  "customers_campaigns_ecommerce": [
    [
      {
        "question": "what form of payment method did customer ID 1 Use?",
        "query": "SELECT payment_method FROM customers WHERE customer_id = 1",
        "schema": "CREATE TABLE Customer_Addresses (customer_id NUMBER); CREATE TABLE Customer_Orders (customer_id NUMBER); CREATE TABLE Mailshot_Customers (mailshot_id NUMBER, customer_id NUMBER); CREATE TABLE Customers (customer_id NUMBER, payment_method TEXT, customer_name TEXT);"
      },
      {
        "question": "what is customer Wendell address? | Do  you  mean  the customer address of  Wendell | what is  the customer address of Wendell?",
        "query": "SELECT customer_address FROM customers WHERE customer_name = \"Wendell\"",
        "schema": "CREATE TABLE Customer_Addresses (address_type_code TEXT, customer_id NUMBER); CREATE TABLE Customers (customer_name TEXT, customer_address TEXT, payment_method TEXT, customer_id NUMBER); CREATE TABLE Mailshot_Customers (customer_id NUMBER, mailshot_id NUMBER); CREATE TABLE Customer_Orders (customer_id NUMBER);"
      }
    ],
    [
      {
        "question": "Can you please provide me with a list of all customer names and phone numbers?",
        "query": "SELECT t1.customer_name , t1.customer_phone FROM customers AS t1 JOIN mailshot_customers AS t2 ON t1.customer_id = t2.customer_id",
        "schema": "CREATE TABLE Customer_Addresses (customer_id NUMBER); CREATE TABLE Customer_Orders (customer_id NUMBER); CREATE TABLE Mailshot_Customers (customer_id NUMBER, mailshot_id NUMBER); CREATE TABLE Customers (customer_phone TEXT, customer_id NUMBER, customer_name TEXT);"
      },
      {
        "question": "Can you filter that list of customers to show only those who have 'No Response' as their outcome code?",
        "query": "SELECT t1.customer_name , t1.customer_phone FROM customers AS t1 JOIN mailshot_customers AS t2 ON t1.customer_id = t2.customer_id WHERE t2.outcome_code = \"No Response\"",
        "schema": "CREATE TABLE Customer_Addresses (customer_id NUMBER); CREATE TABLE Customer_Orders (customer_id NUMBER); CREATE TABLE Customers (customer_id NUMBER, customer_email TEXT, customer_name TEXT, customer_phone TEXT); CREATE TABLE Mailshot_Customers (mailshot_id NUMBER, outcome_code TEXT, customer_id NUMBER);"
      },
      {
        "question": "Can you please provide me with the phone number and email addresses of these five customers?",
        "query": "SELECT t1.customer_phone, t1.customer_email FROM customers AS t1 JOIN mailshot_customers AS t2 ON t1.customer_id = t2.customer_id WHERE t2.outcome_code = \"No Response\"",
        "schema": "CREATE TABLE Customers (customer_phone TEXT, customer_email TEXT, customer_id NUMBER, customer_name TEXT, customer_address TEXT); CREATE TABLE Mailshot_Customers (outcome_code TEXT, customer_id NUMBER, mailshot_id NUMBER); CREATE TABLE Customer_Addresses (customer_id NUMBER); CREATE TABLE Customer_Orders (customer_id NUMBER);"
      }
    ],
    [
      {
        "question": "Can you tell me the highest number of mailshots for the customers?",
        "query": "SELECT COUNT ( * ) FROM mailshot_customers AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id GROUP BY t1.customer_id ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Mailshot_Customers (customer_id NUMBER, outcome_code TEXT, mailshot_id NUMBER); CREATE TABLE Customer_Addresses (customer_id NUMBER); CREATE TABLE Customers (customer_id NUMBER, customer_email TEXT, customer_name TEXT, customer_login TEXT, customer_password TEXT); CREATE TABLE Customer_Orders (customer_id NUMBER);"
      },
      {
        "question": "What about the highest mailshot id number?",
        "query": "SELECT t1.mailshot_id FROM mailshot_customers AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id GROUP BY t1.customer_id ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Mailshot_Customers (mailshot_id NUMBER, outcome_code TEXT, customer_id NUMBER); CREATE TABLE Customer_Orders (order_id NUMBER, customer_id NUMBER); CREATE TABLE Customers (customer_name TEXT, customer_login TEXT, customer_id NUMBER, customer_email TEXT, customer_password TEXT); CREATE TABLE Customer_Addresses (customer_id NUMBER);"
      },
      {
        "question": "What is the customer id for that mailshot id?",
        "query": "SELECT t1.customer_id FROM mailshot_customers AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id GROUP BY t1.customer_id ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Customers (customer_login TEXT, customer_id NUMBER, customer_email TEXT, customer_password TEXT, customer_name TEXT); CREATE TABLE Mailshot_Customers (mailshot_id NUMBER, customer_id NUMBER, outcome_code TEXT); CREATE TABLE Customer_Orders (customer_id NUMBER, order_id NUMBER); CREATE TABLE Customer_Addresses (customer_id NUMBER);"
      },
      {
        "question": "How many mailshots does customer id 1 have?",
        "query": "SELECT COUNT ( * ) FROM mailshot_customers WHERE customer_id = 1",
        "schema": "CREATE TABLE Customers (customer_password TEXT, customer_name TEXT, customer_email TEXT, customer_login TEXT, customer_id NUMBER); CREATE TABLE Customer_Orders (order_id NUMBER, customer_id NUMBER); CREATE TABLE Mailshot_Customers (outcome_code TEXT, customer_id NUMBER, mailshot_id NUMBER); CREATE TABLE Customer_Addresses (customer_id NUMBER);"
      },
      {
        "question": "What is the name of customer id 1?",
        "query": "SELECT customer_name FROM customers WHERE customer_id = 1",
        "schema": "CREATE TABLE Customers (customer_name TEXT, customer_login TEXT, customer_password TEXT, customer_email TEXT, customer_id NUMBER); CREATE TABLE Customer_Orders (customer_id NUMBER, order_id NUMBER); CREATE TABLE Mailshot_Customers (customer_id NUMBER, mailshot_id NUMBER, outcome_code TEXT); CREATE TABLE Customer_Addresses (customer_id NUMBER);"
      },
      {
        "question": "What is the amount of mailshots that Wendell has?",
        "query": "SELECT COUNT ( * ) FROM mailshot_customers AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id WHERE t2.customer_name = \"Wendell\"",
        "schema": "CREATE TABLE Order_Items (item_order_quantity TEXT); CREATE TABLE Customer_Addresses (customer_id NUMBER); CREATE TABLE Customer_Orders (order_id NUMBER, customer_id NUMBER); CREATE TABLE Mailshot_Customers (customer_id NUMBER, outcome_code TEXT, mailshot_id NUMBER); CREATE TABLE Customers (customer_name TEXT, customer_id NUMBER, customer_email TEXT, customer_password TEXT, customer_login TEXT);"
      }
    ],
    [
      {
        "question": "What are names of customers who have both mailshots in \"order\" outcome? | Do you want the names of customers who have mailshot with an outcome code \"Order\"? | Yes",
        "query": "SELECT t2.customer_name FROM mailshot_customers AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id WHERE t1.outcome_code = 'Order'",
        "schema": "CREATE TABLE Mailshot_Customers (outcome_code TEXT, mailshot_id NUMBER, customer_id NUMBER); CREATE TABLE Customer_Orders (order_id NUMBER, customer_id NUMBER); CREATE TABLE Customers (customer_name TEXT, customer_id NUMBER);"
      },
      {
        "question": "What are the payment methods of those customers?",
        "query": "SELECT t2.payment_method FROM mailshot_customers AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id WHERE t1.outcome_code = 'Order'",
        "schema": "CREATE TABLE Mailshot_Customers (customer_id NUMBER, mailshot_id NUMBER, outcome_code TEXT); CREATE TABLE Customer_Addresses (customer_id NUMBER); CREATE TABLE Customer_Orders (order_id NUMBER, customer_id NUMBER); CREATE TABLE Customers (payment_method TEXT, customer_id NUMBER, customer_name TEXT);"
      },
      {
        "question": "Show me names and payment methods of customers who have mailshot with an outcome code \"No Response\"",
        "query": "SELECT t2.customer_name , t2.payment_method FROM mailshot_customers AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id WHERE t1.outcome_code = 'No Response'",
        "schema": "CREATE TABLE Mailshot_Customers (outcome_code TEXT, customer_id NUMBER, mailshot_id NUMBER); CREATE TABLE Customers (payment_method TEXT, customer_name TEXT, customer_email TEXT, customer_id NUMBER); CREATE TABLE Customer_Orders (shipping_method_code TEXT, order_id NUMBER, customer_id NUMBER); CREATE TABLE Customer_Addresses (customer_id NUMBER);"
      }
    ],
    [
      {
        "question": "what are the names of the payment method of customers who have both mailshot in 'Order' outcome and mailshot in 'No response' outcome.",
        "query": "SELECT t2.customer_name , t2.payment_method FROM mailshot_customers AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id WHERE t1.outcome_code = 'Order' INTERSECT SELECT t2.customer_name , t2.payment_method FROM mailshot_customers AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id WHERE t1.outcome_code = 'No Response'",
        "schema": "CREATE TABLE Customers (customer_name TEXT, payment_method TEXT, customer_id NUMBER, customer_email TEXT); CREATE TABLE Customer_Orders (customer_id NUMBER, order_id NUMBER); CREATE TABLE Mailshot_Customers (outcome_code TEXT, mailshot_id NUMBER, customer_id NUMBER);"
      },
      {
        "question": "How many customers pay by Credit card?",
        "query": "SELECT COUNT ( * ) FROM customers WHERE payment_method = \"Credit Card\"",
        "schema": "CREATE TABLE Mailshot_Customers (mailshot_id NUMBER, customer_id NUMBER, outcome_code TEXT); CREATE TABLE Customer_Orders (order_id NUMBER, customer_id NUMBER); CREATE TABLE Customers (customer_email TEXT, customer_id NUMBER, customer_name TEXT, payment_method TEXT);"
      },
      {
        "question": "which customers pay with debit card?",
        "query": "SELECT * FROM customers WHERE payment_method = \"Direct Debit\"",
        "schema": "CREATE TABLE Customers (customer_name TEXT, payment_method TEXT, customer_email TEXT, customer_id NUMBER); CREATE TABLE Mailshot_Customers (customer_id NUMBER, mailshot_id NUMBER, outcome_code TEXT); CREATE TABLE Customer_Orders (order_id NUMBER, customer_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show the shipping charge and customer id for customer orders with order status \"Cancelled\"",
        "query": "SELECT order_shipping_charges , customer_id FROM customer_orders WHERE order_status_code = 'Cancelled'",
        "schema": "CREATE TABLE Customer_Orders (order_status_code TEXT, order_id NUMBER, order_shipping_charges TEXT, customer_id NUMBER, shipping_method_code TEXT); CREATE TABLE Mailshot_Customers (mailshot_id NUMBER, customer_id NUMBER); CREATE TABLE Customer_Addresses (customer_id NUMBER); CREATE TABLE Customers (customer_name TEXT, customer_id NUMBER); CREATE TABLE Order_Items (order_id NUMBER, order_item_status_code TEXT, item_status_code TEXT);"
      },
      {
        "question": "Show the shipping charge and customer id for customer orders with order status \"Paid\"",
        "query": "SELECT order_shipping_charges , customer_id FROM customer_orders WHERE order_status_code = 'Paid'",
        "schema": "CREATE TABLE Order_Items (order_id NUMBER, order_item_status_code TEXT, item_status_code TEXT); CREATE TABLE Customers (payment_method TEXT, customer_name TEXT, customer_id NUMBER); CREATE TABLE Customer_Orders (order_shipping_charges TEXT, shipping_method_code TEXT, customer_id NUMBER, order_id NUMBER, order_status_code TEXT); CREATE TABLE Customer_Addresses (customer_id NUMBER); CREATE TABLE Mailshot_Customers (mailshot_id NUMBER, customer_id NUMBER);"
      },
      {
        "question": "Show the shipping method code for customer orders with order status \"Paid\"",
        "query": "SELECT shipping_method_code FROM customer_orders WHERE order_status_code = 'Paid'",
        "schema": "CREATE TABLE Customer_Addresses (customer_id NUMBER); CREATE TABLE Order_Items (order_id NUMBER, item_status_code TEXT, order_item_status_code TEXT); CREATE TABLE Customer_Orders (customer_id NUMBER, shipping_method_code TEXT, order_id NUMBER, order_status_code TEXT, order_shipping_charges TEXT); CREATE TABLE Customers (customer_id NUMBER, payment_method TEXT, customer_name TEXT); CREATE TABLE Mailshot_Customers (mailshot_id NUMBER, customer_id NUMBER);"
      }
    ]
  ],
  "company_1": [
    [
      {
        "question": "Yes. Can you tell me the number of employees?",
        "query": "SELECT COUNT ( * ) FROM employee",
        "schema": "CREATE TABLE department (Dname TEXT, Mgr_ssn NUMBER, Dnumber NUMBER); CREATE TABLE employee (Salary NUMBER, Super_ssn NUMBER, Fname TEXT, Lname TEXT, Minit TEXT, Ssn NUMBER, Dno NUMBER); CREATE TABLE dependent (Essn NUMBER);"
      },
      {
        "question": "Thank you. Can you tell me how many of them are males?",
        "query": "SELECT COUNT ( * ) FROM employee WHERE sex = \"M\"",
        "schema": "CREATE TABLE dependent (Sex TEXT, Essn NUMBER); CREATE TABLE employee (Ssn NUMBER, Lname TEXT, Sex TEXT, Minit TEXT, Dno NUMBER, Super_ssn NUMBER, Salary NUMBER, Fname TEXT); CREATE TABLE department (Mgr_ssn NUMBER, Dnumber NUMBER, Dname TEXT);"
      },
      {
        "question": "Can you also tell me how many employees have a salary lower than 50000?",
        "query": "SELECT COUNT ( * ) FROM employee WHERE salary < 50000",
        "schema": "CREATE TABLE employee (Lname TEXT, Sex TEXT, Fname TEXT, Salary NUMBER, Ssn NUMBER, Dno NUMBER, Minit TEXT, Super_ssn NUMBER); CREATE TABLE dependent (Essn NUMBER, Sex TEXT); CREATE TABLE department (Mgr_ssn NUMBER, Dname TEXT, Dnumber NUMBER);"
      },
      {
        "question": "Ok.How many male employees have a salary lower than 50000?",
        "query": "SELECT COUNT ( * ) FROM employee WHERE salary < 50000 AND sex = \"M\"",
        "schema": "CREATE TABLE employee (Dno NUMBER, Lname TEXT, Minit TEXT, Super_ssn NUMBER, Salary NUMBER, Sex TEXT, Fname TEXT, Ssn NUMBER); CREATE TABLE department (Dname TEXT, Mgr_ssn NUMBER, Dnumber NUMBER); CREATE TABLE dependent (Sex TEXT, Essn NUMBER);"
      }
    ],
    [
      {
        "question": "Show me all the departments",
        "query": "SELECT * FROM department",
        "schema": "CREATE TABLE dependent (Essn NUMBER); CREATE TABLE employee (Ssn NUMBER, Dno NUMBER, Super_ssn NUMBER, Minit TEXT); CREATE TABLE dept_locations (Dlocation TEXT, Dnumber NUMBER); CREATE TABLE department (Dnumber NUMBER, Dname TEXT, Mgr_start_date TEXT, Mgr_ssn NUMBER);"
      }
    ]
  ],
  "csu_1": [
    [
      {
        "question": "What campuses were opened between 1935 and 1939?",
        "query": "SELECT campus FROM campuses WHERE YEAR > = 1935 AND YEAR < = 1939",
        "schema": "CREATE TABLE Campuses (Campus TEXT, Id NUMBER, Year NUMBER);"
      },
      {
        "question": "What campuses were opened after that? | Do you mean opened after 1939? | Yes, please",
        "query": "SELECT campus FROM campuses WHERE YEAR > 1939",
        "schema": "CREATE TABLE Campuses (Campus TEXT, Year NUMBER, Id NUMBER);"
      },
      {
        "question": "How many total campuses were opened?",
        "query": "SELECT COUNT ( * ) FROM campuses",
        "schema": "CREATE TABLE Campuses (Id NUMBER, Year NUMBER, Location TEXT, Campus TEXT, County TEXT);"
      }
    ],
    [
      {
        "question": "Which universities are in Los Angeles county and opened after 1950?",
        "query": "SELECT campus FROM campuses WHERE county = \"Los Angeles\" AND YEAR > 1950",
        "schema": "CREATE TABLE Campuses (Year NUMBER, Campus TEXT, Id NUMBER, Location TEXT, County TEXT);"
      },
      {
        "question": "What about before 1950?",
        "query": "SELECT campus FROM campuses WHERE county = \"Los Angeles\" AND YEAR < 1950",
        "schema": "CREATE TABLE Campuses (Location TEXT, County TEXT, Campus TEXT, Year NUMBER, Id NUMBER);"
      },
      {
        "question": "What are the years they opened?",
        "query": "SELECT YEAR FROM campuses WHERE county = \"Los Angeles\" AND YEAR < 1950",
        "schema": "CREATE TABLE Campuses (Campus TEXT, County TEXT, Year NUMBER, Location TEXT, Id NUMBER);"
      }
    ],
    [
      {
        "question": "Which year did any college confer the most amount of degrees?",
        "query": "SELECT t3.year FROM campuses AS t1 JOIN faculty AS t2 ON t1.id = t2.campus JOIN degrees AS t3 ON t1.id = t3.campus AND t2.year = t3.year ORDER BY t3.degrees DESC LIMIT 1",
        "schema": "CREATE TABLE discipline_enrollments (Year NUMBER); CREATE TABLE degrees (Year NUMBER, Campus NUMBER, Degrees NUMBER); CREATE TABLE Campuses (Year NUMBER, Campus TEXT, Id NUMBER); CREATE TABLE faculty (Year NUMBER, Faculty NUMBER, Campus NUMBER); CREATE TABLE csu_fees (Year NUMBER, Campus NUMBER);"
      },
      {
        "question": "How about the year before that? | Did you mean which college conferred the most number of degrees in 2003? | Yes",
        "query": "SELECT t1.campus FROM campuses AS t1 JOIN faculty AS t2 ON t1.id = t2.campus JOIN degrees AS t3 ON t1.id = t3.campus AND t2.year = t3.year WHERE t3.year = 2003 ORDER BY t3.degrees DESC LIMIT 1",
        "schema": "CREATE TABLE degrees (Year NUMBER, Campus NUMBER, Degrees NUMBER); CREATE TABLE csu_fees (Campus NUMBER, Year NUMBER); CREATE TABLE Campuses (Campus TEXT, Year NUMBER, Id NUMBER); CREATE TABLE discipline_enrollments (Year NUMBER); CREATE TABLE faculty (Campus NUMBER, Year NUMBER, Faculty NUMBER);"
      },
      {
        "question": "How many faculty were at California State University-Channel Islands, in the year of 2002?",
        "query": "SELECT t2.faculty FROM campuses AS t1 JOIN faculty AS t2 ON t1.id = t2.campus JOIN degrees AS t3 ON t1.id = t3.campus AND t2.year = t3.year WHERE t2.year = 2002 AND t1.campus = \"California State University-Channel Islands\"",
        "schema": "CREATE TABLE faculty (Faculty NUMBER, Year NUMBER, Campus NUMBER); CREATE TABLE degrees (Year NUMBER, Degrees NUMBER, Campus NUMBER); CREATE TABLE Campuses (Id NUMBER, Campus TEXT, County TEXT, Year NUMBER); CREATE TABLE discipline_enrollments (Year NUMBER); CREATE TABLE csu_fees (Year NUMBER, Campus NUMBER);"
      },
      {
        "question": "How about for California State University-chico? | Do you mean in the year 2002? | Yes",
        "query": "SELECT t2.faculty FROM campuses AS t1 JOIN faculty AS t2 ON t1.id = t2.campus JOIN degrees AS t3 ON t1.id = t3.campus AND t2.year = t3.year WHERE t2.year = 2002 AND t1.campus = \"California State University-Chico\"",
        "schema": "CREATE TABLE discipline_enrollments (Year NUMBER); CREATE TABLE csu_fees (Year NUMBER, Campus NUMBER); CREATE TABLE degrees (Year NUMBER, Degrees NUMBER, Campus NUMBER); CREATE TABLE faculty (Faculty NUMBER, Campus NUMBER, Year NUMBER); CREATE TABLE Campuses (Year NUMBER, Campus TEXT, County TEXT, Id NUMBER);"
      },
      {
        "question": "How about for the year 1965?",
        "query": "SELECT DISTINCT t1.location FROM campuses AS t1 JOIN faculty AS t2 ON t1.id = t2.campus JOIN degrees AS t3 ON t1.id = t3.campus AND t2.year = t3.year WHERE t1.year = 1965 AND t1.campus = \"California State University-Bakersfield\"",
        "schema": "CREATE TABLE Campuses (Year NUMBER, Id NUMBER, County TEXT, Location TEXT, Campus TEXT); CREATE TABLE csu_fees (Year NUMBER, Campus NUMBER); CREATE TABLE degrees (Campus NUMBER, Year NUMBER, Degrees NUMBER); CREATE TABLE faculty (Year NUMBER, Campus NUMBER, Faculty NUMBER); CREATE TABLE discipline_enrollments (Year NUMBER);"
      }
    ],
    [
      {
        "question": "What are the degrees conferred in \"San Francisco State University\"?",
        "query": "SELECT degrees FROM campuses AS t1 JOIN degrees AS t2 ON t1.id = t2.campus WHERE t1.campus = \"San Francisco State University\"",
        "schema": "CREATE TABLE faculty (Campus NUMBER, Faculty NUMBER); CREATE TABLE Campuses (Campus TEXT, Id NUMBER, Location TEXT); CREATE TABLE degrees (Year NUMBER, Degrees NUMBER, Campus NUMBER);"
      },
      {
        "question": "What are the degrees conferred in \"San Francisco State University\" in 2001?",
        "query": "SELECT degrees FROM campuses AS t1 JOIN degrees AS t2 ON t1.id = t2.campus WHERE t1.campus = \"San Francisco State University\" AND t2.year = 2001",
        "schema": "CREATE TABLE degrees (Campus NUMBER, Year NUMBER, Degrees NUMBER); CREATE TABLE Campuses (Year NUMBER, Id NUMBER, Campus TEXT, Location TEXT); CREATE TABLE faculty (Year NUMBER, Campus NUMBER, Faculty NUMBER);"
      }
    ],
    [
      {
        "question": "please list out the campus | which column do you want to list? | first column",
        "query": "SELECT id FROM campuses",
        "schema": "CREATE TABLE faculty (Campus NUMBER); CREATE TABLE discipline_enrollments (Campus NUMBER); CREATE TABLE enrollments (Campus NUMBER); CREATE TABLE Campuses (Campus TEXT, Id NUMBER);"
      },
      {
        "question": "what is the highest campus fees",
        "query": "SELECT campusfee FROM csu_fees ORDER BY campusfee DESC LIMIT 1",
        "schema": "CREATE TABLE csu_fees (CampusFee NUMBER, Campus NUMBER, Year NUMBER); CREATE TABLE discipline_enrollments (Campus NUMBER); CREATE TABLE faculty (Campus NUMBER); CREATE TABLE enrollments (Campus NUMBER); CREATE TABLE Campuses (Id NUMBER, Campus TEXT);"
      },
      {
        "question": "what is the year of California State University-Bakersfield",
        "query": "SELECT YEAR FROM campuses WHERE campus = 'California State University-Bakersfield'",
        "schema": "CREATE TABLE faculty (Campus NUMBER); CREATE TABLE discipline_enrollments (Campus NUMBER); CREATE TABLE degrees (Campus NUMBER, Year NUMBER); CREATE TABLE Campuses (Id NUMBER, Location TEXT, Campus TEXT, County TEXT, Year NUMBER); CREATE TABLE csu_fees (CampusFee NUMBER, Year NUMBER, Campus NUMBER); CREATE TABLE enrollments (Campus NUMBER);"
      }
    ],
    [
      {
        "question": "How many degrees did \"San Jose State University\" confer in 2000?",
        "query": "SELECT degrees FROM campuses AS t1 JOIN degrees AS t2 ON t1.id = t2.campus WHERE t1.campus = \"San Jose State University\" AND t2.year = 2000",
        "schema": "CREATE TABLE degrees (Campus NUMBER, Year NUMBER, Degrees NUMBER); CREATE TABLE discipline_enrollments (Campus NUMBER); CREATE TABLE enrollments (Campus NUMBER); CREATE TABLE faculty (Campus NUMBER, Year NUMBER, Faculty NUMBER); CREATE TABLE csu_fees (Campus NUMBER); CREATE TABLE Campuses (Id NUMBER, Year NUMBER, Campus TEXT);"
      },
      {
        "question": "What about for campus id 5?",
        "query": "SELECT SUM ( degrees ) FROM degrees WHERE campus = 5",
        "schema": "CREATE TABLE enrollments (Campus NUMBER); CREATE TABLE csu_fees (Campus NUMBER); CREATE TABLE degrees (Campus NUMBER, Degrees NUMBER, Year NUMBER); CREATE TABLE faculty (Year NUMBER, Campus NUMBER, Faculty NUMBER); CREATE TABLE discipline_enrollments (Campus NUMBER); CREATE TABLE Campuses (Id NUMBER, Year NUMBER, Campus TEXT);"
      },
      {
        "question": "What is the name of that campus?",
        "query": "SELECT DISTINCT t1.campus FROM campuses AS t1 JOIN degrees AS t2 ON t1.id = t2.campus WHERE t2.campus = 5",
        "schema": "CREATE TABLE Campuses (Campus TEXT, Id NUMBER, Year NUMBER); CREATE TABLE enrollments (Campus NUMBER); CREATE TABLE degrees (Campus NUMBER, Degrees NUMBER, Year NUMBER); CREATE TABLE csu_fees (Campus NUMBER); CREATE TABLE faculty (Faculty NUMBER, Campus NUMBER, Year NUMBER); CREATE TABLE discipline_enrollments (Campus NUMBER);"
      },
      {
        "question": "What is the name of campus with id 19?",
        "query": "SELECT DISTINCT t1.campus FROM campuses AS t1 JOIN degrees AS t2 ON t1.id = t2.campus WHERE t2.campus = 19",
        "schema": "CREATE TABLE degrees (Campus NUMBER, Degrees NUMBER, Year NUMBER); CREATE TABLE enrollments (Campus NUMBER); CREATE TABLE Campuses (Campus TEXT, Year NUMBER, Location TEXT, Id NUMBER, County TEXT); CREATE TABLE faculty (Year NUMBER, Faculty NUMBER, Campus NUMBER); CREATE TABLE csu_fees (Campus NUMBER); CREATE TABLE discipline_enrollments (Campus NUMBER);"
      },
      {
        "question": "How many degrees did \"San Jose State University\" confer in 2001?",
        "query": "SELECT SUM ( degrees ) FROM campuses AS t1 JOIN degrees AS t2 ON t1.id = t2.campus WHERE t1.campus = \"San Jose State University\" AND t2.year = 2001",
        "schema": "CREATE TABLE degrees (Year NUMBER, Degrees NUMBER, Campus NUMBER); CREATE TABLE csu_fees (Campus NUMBER); CREATE TABLE faculty (Faculty NUMBER, Campus NUMBER, Year NUMBER); CREATE TABLE discipline_enrollments (Campus NUMBER); CREATE TABLE Campuses (Location TEXT, Year NUMBER, Id NUMBER, County TEXT, Campus TEXT); CREATE TABLE enrollments (Campus NUMBER);"
      }
    ],
    [
      {
        "question": "Hello. What universities are in San Francisco? | Would you like to know the names of all campuses located in San Francisco? | That would be great!",
        "query": "SELECT campus FROM campuses WHERE LOCATION = 'San Francisco'",
        "schema": "CREATE TABLE Campuses (Id NUMBER, County TEXT, Campus TEXT, Location TEXT);"
      },
      {
        "question": "Okay. What was the fee of San Francisco State University in 1996?",
        "query": "SELECT campusfee FROM campuses AS t1 JOIN csu_fees AS t2 ON t1.id = t2.campus WHERE t1.campus = \"San Francisco State University\" AND t2.year = 1996",
        "schema": "CREATE TABLE Campuses (Id NUMBER, Campus TEXT, Location TEXT, Year NUMBER, County TEXT); CREATE TABLE csu_fees (Campus NUMBER, CampusFee NUMBER, Year NUMBER);"
      },
      {
        "question": "And which campus had a fee of 2258 in 1996?",
        "query": "SELECT t1.campus FROM campuses AS t1 JOIN csu_fees AS t2 ON t1.id = t2.campus WHERE t2.year = 1996 AND t2.campusfee = 2258",
        "schema": "CREATE TABLE Campuses (Year NUMBER, Campus TEXT, Location TEXT, County TEXT, Id NUMBER); CREATE TABLE csu_fees (Campus NUMBER, CampusFee NUMBER, Year NUMBER); CREATE TABLE degrees (Year NUMBER);"
      },
      {
        "question": "Interesting! What county is that in?",
        "query": "SELECT t1.county FROM campuses AS t1 JOIN csu_fees AS t2 ON t1.id = t2.campus WHERE t2.year = 1996 AND t2.campusfee = 2258",
        "schema": "CREATE TABLE degrees (Year NUMBER); CREATE TABLE Campuses (Campus TEXT, County TEXT, Id NUMBER, Year NUMBER, Location TEXT); CREATE TABLE csu_fees (CampusFee NUMBER, Year NUMBER, Campus NUMBER);"
      },
      {
        "question": "And what county is San Francisco State University in?",
        "query": "SELECT county FROM campuses WHERE campus = 'San Francisco State University'",
        "schema": "CREATE TABLE csu_fees (CampusFee NUMBER, Campus NUMBER, Year NUMBER); CREATE TABLE degrees (Campus NUMBER, Year NUMBER); CREATE TABLE Campuses (Id NUMBER, Year NUMBER, Campus TEXT, County TEXT, Location TEXT);"
      }
    ],
    [
      {
        "question": "how many campuses are presented on the table",
        "query": "SELECT COUNT ( * ) FROM campuses",
        "schema": "CREATE TABLE degrees (Campus NUMBER); CREATE TABLE discipline_enrollments (Campus NUMBER); CREATE TABLE Campuses (County TEXT, Campus TEXT, Id NUMBER); CREATE TABLE faculty (Campus NUMBER); CREATE TABLE enrollments (Campus NUMBER); CREATE TABLE csu_fees (Campus NUMBER);"
      },
      {
        "question": "list out the campuses name",
        "query": "SELECT campus FROM campuses",
        "schema": "CREATE TABLE faculty (Campus NUMBER); CREATE TABLE csu_fees (Campus NUMBER); CREATE TABLE enrollments (Campus NUMBER); CREATE TABLE degrees (Campus NUMBER); CREATE TABLE Campuses (Campus TEXT, Id NUMBER, County TEXT, Location TEXT); CREATE TABLE discipline_enrollments (Campus NUMBER);"
      },
      {
        "question": "what is the location of California State University-Bakersfield",
        "query": "SELECT LOCATION FROM campuses WHERE campus = \"California State University-Bakersfield\"",
        "schema": "CREATE TABLE enrollments (Campus NUMBER); CREATE TABLE faculty (Campus NUMBER); CREATE TABLE Campuses (County TEXT, Location TEXT, Campus TEXT, Id NUMBER); CREATE TABLE discipline_enrollments (Campus NUMBER); CREATE TABLE csu_fees (Campus NUMBER); CREATE TABLE degrees (Campus NUMBER);"
      },
      {
        "question": "what is the county of California State University-Chico",
        "query": "SELECT county FROM campuses WHERE campus = \"California State University-Chico\"",
        "schema": "CREATE TABLE csu_fees (Campus NUMBER); CREATE TABLE faculty (Campus NUMBER); CREATE TABLE Campuses (Id NUMBER, Location TEXT, County TEXT, Campus TEXT); CREATE TABLE degrees (Campus NUMBER); CREATE TABLE discipline_enrollments (Campus NUMBER); CREATE TABLE enrollments (Campus NUMBER);"
      }
    ],
    [
      {
        "question": "can you show me campuses years?",
        "query": "SELECT YEAR FROM campuses",
        "schema": "CREATE TABLE discipline_enrollments (Campus NUMBER); CREATE TABLE csu_fees (Campus NUMBER); CREATE TABLE Campuses (Year NUMBER, Campus TEXT, Id NUMBER); CREATE TABLE faculty (Campus NUMBER, Year NUMBER); CREATE TABLE enrollments (Campus NUMBER, Year NUMBER); CREATE TABLE degrees (Campus NUMBER, Year NUMBER);"
      },
      {
        "question": "can you show me campuses county?",
        "query": "SELECT county FROM campuses",
        "schema": "CREATE TABLE degrees (Campus NUMBER, Year NUMBER); CREATE TABLE csu_fees (Campus NUMBER); CREATE TABLE enrollments (Year NUMBER, Campus NUMBER); CREATE TABLE Campuses (Year NUMBER, County TEXT, Id NUMBER, Campus TEXT); CREATE TABLE discipline_enrollments (Campus NUMBER); CREATE TABLE faculty (Campus NUMBER, Year NUMBER);"
      },
      {
        "question": "can you show me a list of degrees?",
        "query": "SELECT * FROM degrees",
        "schema": "CREATE TABLE degrees (Year NUMBER, Campus NUMBER, Degrees NUMBER); CREATE TABLE faculty (Year NUMBER, Campus NUMBER); CREATE TABLE csu_fees (Campus NUMBER); CREATE TABLE enrollments (Year NUMBER, Campus NUMBER); CREATE TABLE Campuses (Id NUMBER, Year NUMBER, Campus TEXT, County TEXT); CREATE TABLE discipline_enrollments (Campus NUMBER);"
      },
      {
        "question": "how many faculty lines are there in the university that conferred the least number of degrees in year 2001?",
        "query": "SELECT t2.faculty FROM campuses AS t1 JOIN faculty AS t2 ON t1.id = t2.campus JOIN degrees AS t3 ON t1.id = t3.campus AND t2.year = t3.year WHERE t2.year = 2001 ORDER BY t3.degrees LIMIT 1",
        "schema": "CREATE TABLE faculty (Campus NUMBER, Faculty NUMBER, Year NUMBER); CREATE TABLE csu_fees (Campus NUMBER); CREATE TABLE discipline_enrollments (Campus NUMBER); CREATE TABLE enrollments (Year NUMBER, Campus NUMBER); CREATE TABLE degrees (Year NUMBER, Degrees NUMBER, Campus NUMBER); CREATE TABLE Campuses (Campus TEXT, County TEXT, Year NUMBER, Id NUMBER);"
      }
    ],
    [
      {
        "question": "Which California State University is located in Kern County?",
        "query": "SELECT campus FROM campuses WHERE campus like \"%California State University%\" AND county = \"Kern\"",
        "schema": "CREATE TABLE Campuses (Campus TEXT, Id NUMBER, Location TEXT, County TEXT);"
      },
      {
        "question": "What year was California State University-Chico started?",
        "query": "SELECT YEAR FROM campuses WHERE campus = \"California State University-Chico\"",
        "schema": "CREATE TABLE Campuses (Year NUMBER, Id NUMBER, Location TEXT, County TEXT, Campus TEXT); CREATE TABLE discipline_enrollments (Graduate NUMBER, Campus NUMBER);"
      },
      {
        "question": "Which campus has the smallest faculty",
        "query": "SELECT t1.campus FROM campuses AS t1 JOIN faculty AS t2 ON t1.id = t2.campus WHERE t2.faculty = ( SELECT MIN ( faculty ) FROM faculty )",
        "schema": "CREATE TABLE Campuses (County TEXT, Year NUMBER, Campus TEXT, Id NUMBER, Location TEXT); CREATE TABLE faculty (Faculty NUMBER, Year NUMBER, Campus NUMBER); CREATE TABLE discipline_enrollments (Campus NUMBER, Graduate NUMBER); CREATE TABLE degrees (Campus NUMBER);"
      },
      {
        "question": "Which campus was started in 2002?",
        "query": "SELECT campus FROM campuses WHERE YEAR = 2002",
        "schema": "CREATE TABLE degrees (Campus NUMBER); CREATE TABLE discipline_enrollments (Graduate NUMBER, Campus NUMBER); CREATE TABLE faculty (Faculty NUMBER, Year NUMBER, Campus NUMBER); CREATE TABLE Campuses (Id NUMBER, Location TEXT, Campus TEXT, County TEXT, Year NUMBER);"
      }
    ],
    [
      {
        "question": "hi I was wondering how many counties you have information for?",
        "query": "SELECT COUNT ( DISTINCT t1.county ) FROM campuses AS t1 JOIN degrees AS t2 ON t1.id = t2.campus",
        "schema": "CREATE TABLE degrees (Campus NUMBER); CREATE TABLE Campuses (County TEXT, Id NUMBER);"
      },
      {
        "question": "how many schools are in Orange county?",
        "query": "SELECT COUNT ( * ) FROM campuses AS t1 JOIN degrees AS t2 ON t1.id = t2.campus WHERE t1.county = \"Orange\"",
        "schema": "CREATE TABLE Campuses (Campus TEXT, Id NUMBER, County TEXT, Location TEXT); CREATE TABLE degrees (Campus NUMBER, Degrees NUMBER);"
      },
      {
        "question": "can you tell me how many degrees have been granted for each Orange county campus since the year 2000?",
        "query": "SELECT t1.campus , SUM ( t2.degrees ) FROM campuses AS t1 JOIN degrees AS t2 ON t1.id = t2.campus WHERE t1.county = \"Orange\" AND t2.year > = 2000 GROUP BY t1.campus",
        "schema": "CREATE TABLE degrees (Year NUMBER, Campus NUMBER, Degrees NUMBER); CREATE TABLE Campuses (County TEXT, Location TEXT, Year NUMBER, Campus TEXT, Id NUMBER);"
      }
    ],
    [
      {
        "question": "How many campuses opened between 1935 and 1939?",
        "query": "SELECT COUNT ( campus ) FROM campuses WHERE YEAR > = 1935 AND YEAR < = 1939",
        "schema": "CREATE TABLE Campuses (Campus TEXT, Id NUMBER, Year NUMBER);"
      },
      {
        "question": "Which county is the campus in?",
        "query": "SELECT county FROM campuses WHERE YEAR > = 1935 AND YEAR < = 1939",
        "schema": "CREATE TABLE Campuses (Campus TEXT, Location TEXT, Year NUMBER, County TEXT, Id NUMBER);"
      },
      {
        "question": "What is the full name of that campus?",
        "query": "SELECT campus FROM campuses WHERE YEAR > = 1935 AND YEAR < = 1939",
        "schema": "CREATE TABLE Campuses (Campus TEXT, Id NUMBER, Year NUMBER, Location TEXT, County TEXT);"
      }
    ],
    [
      {
        "question": "Find the id of year 1956? | do you mean the id of the campus that is opened in 1956? | Yes",
        "query": "SELECT id FROM campuses WHERE YEAR = 1956",
        "schema": "CREATE TABLE Campuses (Year NUMBER, Campus TEXT, Id NUMBER);"
      },
      {
        "question": "How many TotalEnrollment of Campus California State University-Channel Islands?",
        "query": "SELECT t2.totalenrollment_ay FROM campuses AS t1 JOIN enrollments AS t2 ON t1.id = t2.campus WHERE t1.campus = \"California State University-Channel Islands\"",
        "schema": "CREATE TABLE enrollments (Campus NUMBER, FTE_AY NUMBER, Year NUMBER, TotalEnrollment_AY NUMBER); CREATE TABLE Campuses (Id NUMBER, County TEXT, Year NUMBER, Campus TEXT);"
      },
      {
        "question": "What are the country of FTE_AY 178?",
        "query": "SELECT t1.county FROM campuses AS t1 JOIN enrollments AS t2 ON t1.id = t2.campus WHERE t2.fte_ay = 178",
        "schema": "CREATE TABLE Campuses (Campus TEXT, Id NUMBER, Year NUMBER, County TEXT); CREATE TABLE discipline_enrollments (Campus NUMBER); CREATE TABLE enrollments (Campus NUMBER, Year NUMBER, TotalEnrollment_AY NUMBER, FTE_AY NUMBER);"
      },
      {
        "question": "What campus had more than 400 total enrollment but more than 200 full time enrollment in year 1956?",
        "query": "SELECT t1.campus FROM campuses AS t1 JOIN enrollments AS t2 ON t1.id = t2.campus WHERE t2.year = 1956 AND totalenrollment_ay > 400 AND fte_ay > 200",
        "schema": "CREATE TABLE discipline_enrollments (Campus NUMBER); CREATE TABLE Campuses (Campus TEXT, County TEXT, Year NUMBER, Id NUMBER); CREATE TABLE enrollments (Campus NUMBER, TotalEnrollment_AY NUMBER, FTE_AY NUMBER, Year NUMBER);"
      }
    ],
    [
      {
        "question": "Hello!  Can you show me a list of all of the years for which there is data?",
        "query": "SELECT DISTINCT YEAR FROM degrees",
        "schema": "CREATE TABLE enrollments (Year NUMBER, Campus NUMBER); CREATE TABLE discipline_enrollments (Year NUMBER); CREATE TABLE faculty (Campus NUMBER, Year NUMBER); CREATE TABLE degrees (Campus NUMBER, Year NUMBER); CREATE TABLE Campuses (Year NUMBER, Campus TEXT, Id NUMBER);"
      },
      {
        "question": "Thank you!  Can you update this list to include how many degrees were conferred each year?",
        "query": "SELECT SUM ( degrees ) , YEAR FROM degrees GROUP BY YEAR",
        "schema": "CREATE TABLE enrollments (Year NUMBER, Campus NUMBER); CREATE TABLE Campuses (Campus TEXT, Id NUMBER, Year NUMBER); CREATE TABLE faculty (Year NUMBER, Campus NUMBER); CREATE TABLE discipline_enrollments (Year NUMBER); CREATE TABLE degrees (Year NUMBER, Campus NUMBER, Degrees NUMBER);"
      },
      {
        "question": "Thanks!  Lastly, (I am about to run out of time) can you filter that list to show me which year had the most degrees conferred?",
        "query": "SELECT YEAR FROM degrees GROUP BY YEAR ORDER BY SUM ( degrees ) DESC LIMIT 1",
        "schema": "CREATE TABLE degrees (Degrees NUMBER, Campus NUMBER, Year NUMBER); CREATE TABLE discipline_enrollments (Year NUMBER); CREATE TABLE Campuses (Year NUMBER, Campus TEXT, Id NUMBER); CREATE TABLE enrollments (Year NUMBER, Campus NUMBER); CREATE TABLE faculty (Year NUMBER, Campus NUMBER);"
      }
    ],
    [
      {
        "question": "Find the campus fee of \"San Jose State University\" in year 2000.",
        "query": "SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus = t2.id WHERE t2.campus = \"San Jose State University\" AND t1.year = 2000",
        "schema": "CREATE TABLE csu_fees (CampusFee NUMBER, Campus NUMBER, Year NUMBER); CREATE TABLE enrollments (Campus NUMBER); CREATE TABLE Campuses (Campus TEXT, Id NUMBER, Year NUMBER); CREATE TABLE faculty (Campus NUMBER, Year NUMBER);"
      },
      {
        "question": "What is the campus id of San Jose State University?",
        "query": "SELECT id FROM campuses WHERE campus = \"San Jose State University\"",
        "schema": "CREATE TABLE enrollments (Campus NUMBER); CREATE TABLE Campuses (Campus TEXT, Year NUMBER, Id NUMBER); CREATE TABLE faculty (Campus NUMBER, Year NUMBER); CREATE TABLE csu_fees (Year NUMBER, Campus NUMBER, CampusFee NUMBER);"
      },
      {
        "question": "What is the campus fee of that?",
        "query": "SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus = t2.id WHERE t2.campus = \"San Jose State University\"",
        "schema": "CREATE TABLE Campuses (Id NUMBER, County TEXT, Campus TEXT, Year NUMBER); CREATE TABLE faculty (Year NUMBER, Campus NUMBER); CREATE TABLE csu_fees (Year NUMBER, Campus NUMBER, CampusFee NUMBER); CREATE TABLE enrollments (Campus NUMBER);"
      },
      {
        "question": "What year is that for?",
        "query": "SELECT t1.year FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus = t2.id WHERE t2.campus = \"San Jose State University\"",
        "schema": "CREATE TABLE enrollments (Campus NUMBER); CREATE TABLE degrees (Year NUMBER, Campus NUMBER); CREATE TABLE faculty (Campus NUMBER, Year NUMBER); CREATE TABLE Campuses (Id NUMBER, County TEXT, Campus TEXT, Year NUMBER); CREATE TABLE csu_fees (Year NUMBER, CampusFee NUMBER, Campus NUMBER);"
      },
      {
        "question": "What county is San Jose State University in?",
        "query": "SELECT county FROM campuses WHERE campus = \"San Jose State University\"",
        "schema": "CREATE TABLE csu_fees (Year NUMBER, CampusFee NUMBER, Campus NUMBER); CREATE TABLE faculty (Year NUMBER, Campus NUMBER); CREATE TABLE Campuses (Year NUMBER, County TEXT, Campus TEXT, Id NUMBER); CREATE TABLE enrollments (Campus NUMBER); CREATE TABLE degrees (Year NUMBER, Campus NUMBER);"
      },
      {
        "question": "What is the location of that university?",
        "query": "SELECT LOCATION FROM campuses WHERE campus = \"San Jose State University\"",
        "schema": "CREATE TABLE faculty (Year NUMBER, Campus NUMBER); CREATE TABLE enrollments (Campus NUMBER); CREATE TABLE csu_fees (Campus NUMBER, Year NUMBER, CampusFee NUMBER); CREATE TABLE degrees (Campus NUMBER, Year NUMBER); CREATE TABLE Campuses (Id NUMBER, Year NUMBER, Campus TEXT, County TEXT, Location TEXT);"
      }
    ],
    [
      {
        "question": "ID 1 is for which Campus?",
        "query": "SELECT campus FROM campuses WHERE id = '1'",
        "schema": "CREATE TABLE enrollments (Campus NUMBER); CREATE TABLE degrees (Campus NUMBER); CREATE TABLE csu_fees (Campus NUMBER); CREATE TABLE discipline_enrollments (Campus NUMBER); CREATE TABLE Campuses (Id NUMBER, Campus TEXT); CREATE TABLE faculty (Campus NUMBER);"
      },
      {
        "question": "which campus has the fewest faculties in year 2003?",
        "query": "SELECT t1.campus FROM campuses AS t1 JOIN faculty AS t2 ON t1.id = t2.campus WHERE t2.year = 2003 ORDER BY t2.faculty LIMIT 1",
        "schema": "CREATE TABLE Campuses (Year NUMBER, Id NUMBER, Campus TEXT); CREATE TABLE faculty (Campus NUMBER, Faculty NUMBER, Year NUMBER); CREATE TABLE csu_fees (Campus NUMBER); CREATE TABLE enrollments (Campus NUMBER); CREATE TABLE discipline_enrollments (Campus NUMBER); CREATE TABLE degrees (Campus NUMBER, Year NUMBER);"
      },
      {
        "question": "which campus  has the most faculties in year 2003?",
        "query": "SELECT t1.campus FROM campuses AS t1 JOIN faculty AS t2 ON t1.id = t2.campus WHERE t2.year = 2003 ORDER BY t2.faculty DESC LIMIT 1",
        "schema": "CREATE TABLE faculty (Year NUMBER, Faculty NUMBER, Campus NUMBER); CREATE TABLE discipline_enrollments (Campus NUMBER); CREATE TABLE degrees (Campus NUMBER, Year NUMBER); CREATE TABLE csu_fees (Campus NUMBER); CREATE TABLE Campuses (Campus TEXT, Year NUMBER, Id NUMBER); CREATE TABLE enrollments (Campus NUMBER);"
      }
    ],
    [
      {
        "question": "Please tell me the number of undergraduates from each campus in the year 2004",
        "query": "SELECT t2.campus, SUM ( t1.graduate ) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus = t2.id WHERE t1.year = 2004 GROUP BY t2.campus",
        "schema": "CREATE TABLE discipline_enrollments (Discipline NUMBER, Graduate NUMBER, Campus NUMBER, Undergraduate NUMBER, Year NUMBER); CREATE TABLE degrees (Year NUMBER, Campus NUMBER); CREATE TABLE Campuses (Campus TEXT, Year NUMBER, Id NUMBER); CREATE TABLE faculty (Year NUMBER, Faculty NUMBER, Campus NUMBER); CREATE TABLE enrollments (FTE_AY NUMBER, Year NUMBER, TotalEnrollment_AY NUMBER, Campus NUMBER);"
      },
      {
        "question": "please show the undergrads total from each campus",
        "query": "SELECT t2.campus, SUM ( t1.undergraduate ) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus = t2.id GROUP BY t2.campus",
        "schema": "CREATE TABLE degrees (Campus NUMBER, Year NUMBER); CREATE TABLE enrollments (Campus NUMBER, Year NUMBER, TotalEnrollment_AY NUMBER, FTE_AY NUMBER); CREATE TABLE faculty (Campus NUMBER, Faculty NUMBER, Year NUMBER); CREATE TABLE Campuses (Id NUMBER, Campus TEXT, Year NUMBER); CREATE TABLE discipline_enrollments (Year NUMBER, Discipline NUMBER, Campus NUMBER, Undergraduate NUMBER, Graduate NUMBER);"
      },
      {
        "question": "now please show just the total of graduates from San Francisco State University in 2004",
        "query": "SELECT SUM ( t1.graduate ) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus = t2.id WHERE t1.year = 2004 AND t2.campus = \"San Francisco State University\"",
        "schema": "CREATE TABLE faculty (Year NUMBER, Campus NUMBER, Faculty NUMBER); CREATE TABLE degrees (Campus NUMBER, Year NUMBER); CREATE TABLE Campuses (Id NUMBER, Campus TEXT, Year NUMBER); CREATE TABLE discipline_enrollments (Year NUMBER, Campus NUMBER, Graduate NUMBER, Undergraduate NUMBER, Discipline NUMBER); CREATE TABLE enrollments (TotalEnrollment_AY NUMBER, Campus NUMBER, Year NUMBER, FTE_AY NUMBER);"
      }
    ],
    [
      {
        "question": "For each Orange county campus, report the number of degrees granted after 2000.",
        "query": "SELECT t1.campus , SUM ( t2.degrees ) FROM campuses AS t1 JOIN degrees AS t2 ON t1.id = t2.campus WHERE t1.county = \"Orange\" AND t2.year > = 2000 GROUP BY t1.campus",
        "schema": "CREATE TABLE degrees (Degrees NUMBER, Campus NUMBER, Year NUMBER); CREATE TABLE faculty (Year NUMBER, Campus NUMBER); CREATE TABLE Campuses (Id NUMBER, Year NUMBER, Campus TEXT, County TEXT);"
      },
      {
        "question": "which year has the highest number of degrees?",
        "query": "SELECT YEAR FROM degrees ORDER BY degrees DESC LIMIT 1",
        "schema": "CREATE TABLE Campuses (Id NUMBER, Campus TEXT, County TEXT, Year NUMBER); CREATE TABLE degrees (Campus NUMBER, Year NUMBER, Degrees NUMBER); CREATE TABLE faculty (Campus NUMBER, Year NUMBER);"
      },
      {
        "question": "which location in 2004? | do you mean campus? | which campus has the highest number of degrees?",
        "query": "SELECT t1.campus FROM campuses AS t1 JOIN degrees AS t2 ON t1.id = t2.campus WHERE t2.degrees = ( SELECT MAX ( degrees ) FROM degrees )",
        "schema": "CREATE TABLE Campuses (Id NUMBER, Location TEXT, Campus TEXT, Year NUMBER, County TEXT); CREATE TABLE degrees (Campus NUMBER, Degrees NUMBER, Year NUMBER); CREATE TABLE faculty (Campus NUMBER, Year NUMBER);"
      }
    ]
  ],
  "flight_company": [
    [
      {
        "question": "list out the airport names",
        "query": "SELECT name FROM airport",
        "schema": "CREATE TABLE airport (name TEXT, id NUMBER); CREATE TABLE flight (airport_id NUMBER);"
      },
      {
        "question": "how many airports on this table",
        "query": "SELECT COUNT ( DISTINCT name ) FROM airport",
        "schema": "CREATE TABLE flight (airport_id NUMBER); CREATE TABLE airport (id NUMBER, name TEXT);"
      },
      {
        "question": "what is the country of Akureyri Airport",
        "query": "SELECT country FROM airport WHERE name = \"Akureyri Airport\"",
        "schema": "CREATE TABLE airport (id NUMBER, Country TEXT, City TEXT, name TEXT); CREATE TABLE flight (airport_id NUMBER);"
      },
      {
        "question": "what is the city of Schiphol Airport",
        "query": "SELECT city FROM airport WHERE name = \"Schiphol Airport\"",
        "schema": "CREATE TABLE flight (airport_id NUMBER); CREATE TABLE airport (name TEXT, City TEXT, Country TEXT, id NUMBER);"
      }
    ],
    [
      {
        "question": "How many airports are there?",
        "query": "SELECT COUNT ( * ) FROM airport",
        "schema": "CREATE TABLE flight (id NUMBER, airport_id NUMBER); CREATE TABLE airport (City TEXT, Country TEXT, id NUMBER, ICAO TEXT, name TEXT);"
      },
      {
        "question": "How many total companies are there?",
        "query": "SELECT COUNT ( * ) FROM operate_company",
        "schema": "CREATE TABLE operate_company (id NUMBER, name TEXT, Principal_activities TEXT, Type TEXT, Incorporated_in TEXT); CREATE TABLE flight (id NUMBER, company_id NUMBER, airport_id NUMBER); CREATE TABLE airport (City TEXT, ICAO TEXT, Country TEXT, name TEXT, id NUMBER);"
      },
      {
        "question": "How many companies operate airlines in each airport? | Do you want the result by airport id, or airport name or all airport information? | I would like the results by airport id, please.",
        "query": "SELECT t3.id , COUNT ( * ) FROM operate_company AS t1 JOIN flight AS t2 ON t1.id = t2.company_id JOIN airport AS t3 ON t2.airport_id = t3.id GROUP BY t3.id",
        "schema": "CREATE TABLE flight (company_id NUMBER, airport_id NUMBER, id NUMBER); CREATE TABLE operate_company (Type TEXT, Principal_activities TEXT, name TEXT, Incorporated_in TEXT, id NUMBER); CREATE TABLE airport (name TEXT, ICAO TEXT, City TEXT, id NUMBER, Country TEXT);"
      },
      {
        "question": "How many airports are in the United States?",
        "query": "SELECT COUNT ( * ) FROM airport WHERE country = \"United States\"",
        "schema": "CREATE TABLE airport (Country TEXT, name TEXT, id NUMBER, ICAO TEXT, City TEXT); CREATE TABLE flight (id NUMBER, airport_id NUMBER, company_id NUMBER); CREATE TABLE operate_company (Type TEXT, name TEXT, Incorporated_in TEXT, id NUMBER, Principal_activities TEXT);"
      },
      {
        "question": "How many companies operate in airports in the United States?",
        "query": "SELECT COUNT ( DISTINCT t1.id ) FROM operate_company AS t1 JOIN flight AS t2 ON t1.id = t2.company_id JOIN airport AS t3 ON t2.airport_id = t3.id WHERE t3.country = \"United States\"",
        "schema": "CREATE TABLE airport (id NUMBER, name TEXT, City TEXT, ICAO TEXT, Country TEXT); CREATE TABLE operate_company (Incorporated_in TEXT, name TEXT, Type TEXT, id NUMBER, Principal_activities TEXT); CREATE TABLE flight (company_id NUMBER, airport_id NUMBER, id NUMBER);"
      }
    ],
    [
      {
        "question": "where is the location of the conference? | What conference? | Do you know any name of the pilot that provides cargo?",
        "query": "SELECT t2.pilot FROM operate_company AS t1 JOIN flight AS t2 ON t1.id = t2.company_id WHERE t1.principal_activities = 'Cargo'",
        "schema": "CREATE TABLE flight (company_id NUMBER, Velocity NUMBER, Pilot TEXT, airport_id NUMBER, id NUMBER); CREATE TABLE airport (id NUMBER); CREATE TABLE operate_company (Principal_activities TEXT, name TEXT, id NUMBER);"
      },
      {
        "question": "Ok.  Do you know any name of the pilot that provides a company \"catering services\" activities?",
        "query": "SELECT t2.pilot FROM operate_company AS t1 JOIN flight AS t2 ON t1.id = t2.company_id WHERE t1.principal_activities = 'Catering services'",
        "schema": "CREATE TABLE flight (airport_id NUMBER, Pilot TEXT, company_id NUMBER, Velocity NUMBER, id NUMBER); CREATE TABLE operate_company (Principal_activities TEXT, name TEXT, id NUMBER, Type TEXT); CREATE TABLE airport (id NUMBER);"
      }
    ],
    [
      {
        "question": "What are all the names of the pilots who flew a flight in the United States?",
        "query": "SELECT DISTINCT t2.pilot FROM airport AS t1 JOIN flight AS t2 ON t1.id = t2.airport_id WHERE t1.country = 'United States'",
        "schema": "CREATE TABLE flight (id NUMBER, airport_id NUMBER, Pilot TEXT); CREATE TABLE airport (Country TEXT, name TEXT, id NUMBER);"
      },
      {
        "question": "What are the names of all the pilots who flew a flight in the Billund Airport?",
        "query": "SELECT DISTINCT t2.pilot FROM airport AS t1 JOIN flight AS t2 ON t1.id = t2.airport_id WHERE t1.name = 'Billund Airport'",
        "schema": "CREATE TABLE airport (name TEXT, Country TEXT, id NUMBER); CREATE TABLE flight (Pilot TEXT, id NUMBER, airport_id NUMBER);"
      },
      {
        "question": "Can you list the names and velocities of all pilots who flew out of Ted Stevens Airport?",
        "query": "SELECT t2.pilot, t2.velocity FROM airport AS t1 JOIN flight AS t2 ON t1.id = t2.airport_id WHERE t1.name = 'Ted Stevens Airport'",
        "schema": "CREATE TABLE airport (Country TEXT, name TEXT, City TEXT, id NUMBER); CREATE TABLE flight (Pilot TEXT, Velocity NUMBER, airport_id NUMBER, id NUMBER);"
      }
    ],
    [
      {
        "question": "Which flight has the least velocity in the list? | What info do you want about that flight? id? date? number? or something else? | I want the number",
        "query": "SELECT vehicle_flight_number FROM flight ORDER BY velocity LIMIT 1",
        "schema": "CREATE TABLE airport (id NUMBER); CREATE TABLE flight (Velocity NUMBER, Vehicle_Flight_number TEXT, Date TEXT, id NUMBER);"
      },
      {
        "question": "State the principal activities of Air Hong Kong?",
        "query": "SELECT DISTINCT principal_activities FROM operate_company WHERE name = 'Air Hong Kong'",
        "schema": "CREATE TABLE operate_company (Incorporated_in TEXT, Principal_activities TEXT, id NUMBER, name TEXT); CREATE TABLE airport (Country TEXT, name TEXT, id NUMBER, City TEXT); CREATE TABLE flight (company_id NUMBER, Pilot TEXT, Vehicle_Flight_number TEXT, Date TEXT, id NUMBER, Velocity NUMBER, airport_id NUMBER);"
      },
      {
        "question": "What are the distinct types of the companies that have operated any flights with velocity less than 200?",
        "query": "SELECT DISTINCT t1.type FROM operate_company AS t1 JOIN flight AS t2 ON t1.id = t2.company_id WHERE t2.velocity < 200",
        "schema": "CREATE TABLE airport (name TEXT, City TEXT, Country TEXT, id NUMBER); CREATE TABLE operate_company (Type TEXT, name TEXT, Incorporated_in TEXT, Principal_activities TEXT, id NUMBER); CREATE TABLE flight (airport_id NUMBER, Pilot TEXT, Vehicle_Flight_number TEXT, Date TEXT, id NUMBER, Velocity NUMBER, company_id NUMBER);"
      },
      {
        "question": "State the type of air china in the list?",
        "query": "SELECT TYPE FROM operate_company WHERE name = 'Air China'",
        "schema": "CREATE TABLE operate_company (Incorporated_in TEXT, Type TEXT, Principal_activities TEXT, id NUMBER, name TEXT); CREATE TABLE airport (name TEXT, City TEXT, Country TEXT, id NUMBER); CREATE TABLE flight (Pilot TEXT, airport_id NUMBER, company_id NUMBER, Velocity NUMBER, Date TEXT, id NUMBER, Vehicle_Flight_number TEXT);"
      }
    ],
    [
      {
        "question": "What is the most common type?",
        "query": "SELECT TYPE FROM operate_company GROUP BY TYPE ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE operate_company (Type TEXT);"
      },
      {
        "question": "And how many companies are there with this type?",
        "query": "SELECT COUNT ( DISTINCT name ) FROM operate_company WHERE TYPE = 'Subsidiary'",
        "schema": "CREATE TABLE flight (company_id NUMBER); CREATE TABLE operate_company (id NUMBER, Incorporated_in TEXT, Type TEXT, name TEXT);"
      },
      {
        "question": "And how about the least common type of company?",
        "query": "SELECT TYPE FROM operate_company GROUP BY TYPE ORDER BY COUNT ( * ) ASC LIMIT 1",
        "schema": "CREATE TABLE flight (company_id NUMBER); CREATE TABLE operate_company (Incorporated_in TEXT, name TEXT, Type TEXT, id NUMBER);"
      }
    ],
    [
      {
        "question": "How many airports has pilot Thompson driven an aircraft?",
        "query": "SELECT COUNT ( * ) FROM airport WHERE id IN ( SELECT airport_id FROM flight WHERE pilot = 'Thompson' )",
        "schema": "CREATE TABLE airport (name TEXT, id NUMBER); CREATE TABLE flight (Pilot TEXT, airport_id NUMBER, id NUMBER);"
      },
      {
        "question": "How many airports had Thompson driven by August 1963?",
        "query": "SELECT COUNT ( * ) FROM airport AS t1 JOIN flight AS t2 ON t1.id = t2.airport_id WHERE t2.pilot = 'Thompson' AND t2.date > 'August 16, 1963'",
        "schema": "CREATE TABLE airport (name TEXT, id NUMBER); CREATE TABLE flight (Pilot TEXT, Date TEXT, id NUMBER, airport_id NUMBER);"
      },
      {
        "question": "What is the flight number of the aircraft Thompson drove in  March 1, 1963",
        "query": "SELECT vehicle_flight_number FROM flight WHERE pilot = 'Thompson' AND date = 'March 1, 1963'",
        "schema": "CREATE TABLE airport (name TEXT, id NUMBER); CREATE TABLE flight (airport_id NUMBER, id NUMBER, Date TEXT, Vehicle_Flight_number TEXT, Pilot TEXT);"
      }
    ],
    [
      {
        "question": "What are pilots names?",
        "query": "SELECT DISTINCT pilot FROM flight",
        "schema": "CREATE TABLE flight (Pilot TEXT);"
      },
      {
        "question": "Which pilot is in charge of most number of flights?",
        "query": "SELECT pilot FROM flight GROUP BY pilot ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE flight (Pilot TEXT, Vehicle_Flight_number TEXT, id NUMBER);"
      }
    ],
    [
      {
        "question": "how many flights have pilot Thompson flown?",
        "query": "SELECT COUNT ( * ) FROM flight WHERE pilot = 'Thompson'",
        "schema": "CREATE TABLE flight (Pilot TEXT, id NUMBER); CREATE TABLE airport (id NUMBER);"
      },
      {
        "question": "What are the names of those airports?",
        "query": "SELECT name FROM airport WHERE id NOT IN ( SELECT airport_id FROM flight WHERE pilot = 'Thompson' )",
        "schema": "CREATE TABLE flight (id NUMBER, Pilot TEXT, airport_id NUMBER); CREATE TABLE airport (id NUMBER, City TEXT, name TEXT);"
      }
    ],
    [
      {
        "question": "what is the date of first flight?",
        "query": "SELECT Date FROM flight ORDER BY Date LIMIT 1",
        "schema": "CREATE TABLE flight (id NUMBER, Date TEXT);"
      },
      {
        "question": "who is the first flight's pilot?",
        "query": "SELECT pilot FROM flight ORDER BY Date LIMIT 1",
        "schema": "CREATE TABLE flight (Pilot TEXT, id NUMBER, Date TEXT);"
      },
      {
        "question": "what is the average of altitude?",
        "query": "SELECT AVG ( altitude ) FROM flight",
        "schema": "CREATE TABLE flight (id NUMBER, Altitude NUMBER, Pilot TEXT, Date TEXT);"
      }
    ],
    [
      {
        "question": "Hi, which companies have operated more than one flight?",
        "query": "SELECT * FROM operate_company AS t1 JOIN flight AS t2 ON t1.id = t2.company_id GROUP BY t1.id HAVING COUNT ( * ) > 1",
        "schema": "CREATE TABLE operate_company (id NUMBER, name TEXT, Principal_activities TEXT, Incorporated_in TEXT, Type TEXT); CREATE TABLE flight (airport_id NUMBER, company_id NUMBER, id NUMBER); CREATE TABLE airport (id NUMBER);"
      },
      {
        "question": "Great, can you show me the top 3 companies that have operated the most flights?",
        "query": "SELECT * FROM operate_company AS t1 JOIN flight AS t2 ON t1.id = t2.company_id GROUP BY t1.id ORDER BY COUNT ( * ) LIMIT 3",
        "schema": "CREATE TABLE airport (id NUMBER); CREATE TABLE operate_company (Type TEXT, id NUMBER, name TEXT, Incorporated_in TEXT, Principal_activities TEXT); CREATE TABLE flight (airport_id NUMBER, id NUMBER, company_id NUMBER);"
      },
      {
        "question": "Which type of principal activity, cargo airline or airline, operates the most flights?",
        "query": "SELECT principal_activities FROM operate_company AS t1 JOIN flight AS t2 ON t1.id = t2.company_id GROUP BY principal_activities ORDER BY COUNT ( * ) LIMIT 1",
        "schema": "CREATE TABLE airport (id NUMBER); CREATE TABLE flight (company_id NUMBER, airport_id NUMBER, id NUMBER); CREATE TABLE operate_company (Principal_activities TEXT, id NUMBER, Incorporated_in TEXT, name TEXT, Type TEXT);"
      },
      {
        "question": "What are the top 3 companies operating the most cargo flights?",
        "query": "SELECT * FROM operate_company AS t1 JOIN flight AS t2 ON t1.id = t2.company_id WHERE t1.principal_activities = \"Cargo\" GROUP BY t1.name ORDER BY COUNT ( * ) LIMIT 3",
        "schema": "CREATE TABLE flight (company_id NUMBER, airport_id NUMBER, id NUMBER); CREATE TABLE airport (id NUMBER); CREATE TABLE operate_company (Type TEXT, id NUMBER, Principal_activities TEXT, name TEXT, Incorporated_in TEXT);"
      }
    ]
  ],
  "behavior_monitoring": [
    [
      {
        "question": "What is the highest average monthly rental of all the students?",
        "query": "SELECT monthly_rental FROM student_addresses AS t1 JOIN students AS t2 ON t1.student_id = t2.student_id GROUP BY t1.student_id ORDER BY AVG ( monthly_rental ) DESC LIMIT 1",
        "schema": "CREATE TABLE Addresses (address_id NUMBER); CREATE TABLE Student_Addresses (monthly_rental NUMBER, student_id NUMBER, address_id NUMBER); CREATE TABLE Students (student_id NUMBER, address_id NUMBER, last_name TEXT, date_first_rental TIME); CREATE TABLE Assessment_Notes (student_id NUMBER);"
      },
      {
        "question": "Hmm, can you tell me the addresses that have the highest average monthly rental?",
        "query": "SELECT t2.address_id FROM student_addresses AS t1 JOIN students AS t2 ON t1.student_id = t2.student_id GROUP BY t1.student_id ORDER BY AVG ( monthly_rental ) DESC LIMIT 1",
        "schema": "CREATE TABLE Students (student_id NUMBER, date_first_rental TIME, last_name TEXT, address_id NUMBER); CREATE TABLE Student_Addresses (student_id NUMBER, address_id NUMBER, monthly_rental NUMBER); CREATE TABLE Addresses (address_id NUMBER); CREATE TABLE Assessment_Notes (student_id NUMBER);"
      },
      {
        "question": "What are the id and first name of the student whose addresses have the highest average monthly rental?",
        "query": "SELECT t1.student_id , t2.first_name FROM student_addresses AS t1 JOIN students AS t2 ON t1.student_id = t2.student_id GROUP BY t1.student_id ORDER BY AVG ( monthly_rental ) DESC LIMIT 1",
        "schema": "CREATE TABLE Assessment_Notes (student_id NUMBER); CREATE TABLE Students (student_id NUMBER, date_first_rental TIME, address_id NUMBER, last_name TEXT, first_name TEXT); CREATE TABLE Student_Addresses (student_id NUMBER, monthly_rental NUMBER, address_id NUMBER); CREATE TABLE Addresses (address_id NUMBER);"
      }
    ],
    [
      {
        "question": "what is the teacher id of detention id 1",
        "query": "SELECT teacher_id FROM detention WHERE detention_id = 1",
        "schema": "CREATE TABLE Behavior_Incident (incident_id NUMBER, student_id NUMBER); CREATE TABLE Detention (detention_id NUMBER, teacher_id NUMBER, detention_summary TEXT); CREATE TABLE Students (student_id NUMBER); CREATE TABLE Students_in_Detention (student_id NUMBER, detention_id NUMBER, incident_id NUMBER); CREATE TABLE Teachers (last_name TEXT, teacher_id NUMBER, first_name TEXT); CREATE TABLE Assessment_Notes (teacher_id NUMBER);"
      },
      {
        "question": "when does the datetime detention end | What did you mean by the datetime detention end? Do you want a list of all the datetime detention end or a specific one? | for detention id 1",
        "query": "SELECT datetime_detention_end FROM detention WHERE detention_id = 1",
        "schema": "CREATE TABLE Assessment_Notes (teacher_id NUMBER); CREATE TABLE Students_in_Detention (student_id NUMBER, detention_id NUMBER, incident_id NUMBER); CREATE TABLE Teachers (first_name TEXT, last_name TEXT, teacher_id NUMBER); CREATE TABLE Detention (datetime_detention_end TIME, datetime_detention_start TIME, teacher_id NUMBER, detention_summary TEXT, detention_id NUMBER); CREATE TABLE Students (student_id NUMBER); CREATE TABLE Behavior_Incident (student_id NUMBER, incident_id NUMBER);"
      },
      {
        "question": "what is the middle name of teacher id 1?",
        "query": "SELECT t1.middle_name FROM teachers AS t1 WHERE t1.teacher_id = 1",
        "schema": "CREATE TABLE Assessment_Notes (teacher_id NUMBER); CREATE TABLE Students (middle_name TEXT, student_id NUMBER); CREATE TABLE Students_in_Detention (incident_id NUMBER, student_id NUMBER, detention_id NUMBER); CREATE TABLE Detention (teacher_id NUMBER, detention_id NUMBER, detention_summary TEXT, datetime_detention_end TIME, datetime_detention_start TIME); CREATE TABLE Teachers (teacher_id NUMBER, gender TEXT, first_name TEXT, last_name TEXT, middle_name TEXT); CREATE TABLE Behavior_Incident (student_id NUMBER, incident_id NUMBER);"
      }
    ],
    [
      {
        "question": "What are the monthly rentals of student?",
        "query": "SELECT t2.monthly_rental FROM addresses AS t1 JOIN student_addresses AS t2 ON t1.address_id = t2.address_id",
        "schema": "CREATE TABLE Assessment_Notes (student_id NUMBER); CREATE TABLE Students (student_id NUMBER, last_name TEXT, address_id NUMBER); CREATE TABLE Addresses (address_id NUMBER); CREATE TABLE Student_Addresses (monthly_rental NUMBER, student_id NUMBER, address_id NUMBER);"
      },
      {
        "question": "what are the total number of student addresses in Texas state?",
        "query": "SELECT COUNT ( t2.student_id ) FROM addresses AS t1 JOIN student_addresses AS t2 ON t1.address_id = t2.address_id WHERE t1.state_province_county = \"Texas\"",
        "schema": "CREATE TABLE Student_Addresses (student_id NUMBER, address_id NUMBER, monthly_rental NUMBER); CREATE TABLE Addresses (country TEXT, state_province_county TEXT, address_id NUMBER); CREATE TABLE Students (student_id NUMBER, last_name TEXT, address_id NUMBER); CREATE TABLE Assessment_Notes (student_id NUMBER);"
      },
      {
        "question": "what are the monthly rentals of student addresses in Texas state?",
        "query": "SELECT t2.monthly_rental FROM addresses AS t1 JOIN student_addresses AS t2 ON t1.address_id = t2.address_id WHERE t1.state_province_county = \"Texas\"",
        "schema": "CREATE TABLE Addresses (address_id NUMBER, country TEXT, state_province_county TEXT); CREATE TABLE Student_Addresses (address_id NUMBER, student_id NUMBER, monthly_rental NUMBER); CREATE TABLE Students (student_id NUMBER, last_name TEXT, address_id NUMBER); CREATE TABLE Assessment_Notes (student_id NUMBER);"
      }
    ],
    [
      {
        "question": "What is the address of address id 3?",
        "query": "SELECT * FROM addresses WHERE address_id = 3",
        "schema": "CREATE TABLE Students (address_id NUMBER); CREATE TABLE Addresses (address_id NUMBER, zip_postcode TEXT, line_3 TEXT, line_2 TEXT, city TEXT, line_1 TEXT); CREATE TABLE Ref_Address_Types (address_type_code TEXT, address_type_description TEXT); CREATE TABLE Teachers (address_id NUMBER); CREATE TABLE Student_Addresses (address_id NUMBER, student_id NUMBER);"
      },
      {
        "question": "How much does the rental cost for address id 3?",
        "query": "SELECT monthly_rental FROM student_addresses WHERE address_id = 3",
        "schema": "CREATE TABLE Addresses (line_2 TEXT, zip_postcode TEXT, line_1 TEXT, address_id NUMBER, line_3 TEXT, city TEXT); CREATE TABLE Students (address_id NUMBER); CREATE TABLE Student_Addresses (monthly_rental NUMBER, address_id NUMBER, student_id NUMBER); CREATE TABLE Ref_Address_Types (address_type_code TEXT, address_type_description TEXT); CREATE TABLE Teachers (address_id NUMBER);"
      },
      {
        "question": "What is the cost for address id 1?",
        "query": "SELECT monthly_rental FROM student_addresses WHERE address_id = 1",
        "schema": "CREATE TABLE Student_Addresses (monthly_rental NUMBER, student_id NUMBER, address_id NUMBER); CREATE TABLE Teachers (address_id NUMBER); CREATE TABLE Ref_Address_Types (address_type_description TEXT, address_type_code TEXT); CREATE TABLE Students (address_id NUMBER, student_id NUMBER); CREATE TABLE Addresses (address_id NUMBER, line_2 TEXT, line_1 TEXT, zip_postcode TEXT, line_3 TEXT, city TEXT);"
      }
    ],
    [
      {
        "question": "What is the highest average monthly rental? | what do you mean by \"highest average monthly rental\" | sorry, highest monthly rental",
        "query": "SELECT MAX ( monthly_rental ) FROM student_addresses",
        "schema": "CREATE TABLE Student_Addresses (student_id NUMBER, monthly_rental NUMBER, address_id NUMBER); CREATE TABLE Students (student_id NUMBER); CREATE TABLE Addresses (address_id NUMBER);"
      },
      {
        "question": "What is the address ID of that rental?",
        "query": "SELECT address_id FROM student_addresses ORDER BY monthly_rental DESC LIMIT 1",
        "schema": "CREATE TABLE Students (student_id NUMBER, address_id NUMBER); CREATE TABLE Addresses (address_id NUMBER); CREATE TABLE Student_Addresses (student_id NUMBER, address_id NUMBER, monthly_rental NUMBER);"
      },
      {
        "question": "What is the city of that address?",
        "query": "SELECT t1.city FROM addresses AS t1 JOIN student_addresses AS t2 ON t1.address_id = t2.address_id ORDER BY monthly_rental DESC LIMIT 1",
        "schema": "CREATE TABLE Student_Addresses (monthly_rental NUMBER, student_id NUMBER, address_id NUMBER); CREATE TABLE Students (student_id NUMBER, address_id NUMBER); CREATE TABLE Addresses (city TEXT, address_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show the detention type code for the detention with id 1?",
        "query": "SELECT t1.detention_type_code FROM detention AS t1 JOIN ref_detention_type AS t2 ON t1.detention_type_code = t2.detention_type_code WHERE detention_id = 1",
        "schema": "CREATE TABLE Students (student_id NUMBER); CREATE TABLE Detention (detention_summary TEXT, detention_type_code TEXT, detention_id NUMBER); CREATE TABLE Behavior_Incident (incident_type_code TEXT); CREATE TABLE Students_in_Detention (detention_id NUMBER, student_id NUMBER); CREATE TABLE Ref_Detention_Type (detention_type_description TEXT, detention_type_code TEXT); CREATE TABLE Assessment_Notes (student_id NUMBER);"
      },
      {
        "question": "Show the code and description of the least frequent detention type?",
        "query": "SELECT t1.detention_type_code , t2.detention_type_description FROM detention AS t1 JOIN ref_detention_type AS t2 ON t1.detention_type_code = t2.detention_type_code GROUP BY t1.detention_type_code ORDER BY COUNT ( * ) ASC LIMIT 1",
        "schema": "CREATE TABLE Ref_Detention_Type (detention_type_code TEXT, detention_type_description TEXT); CREATE TABLE Ref_Address_Types (address_type_description TEXT); CREATE TABLE Behavior_Incident (incident_type_code TEXT); CREATE TABLE Students_in_Detention (detention_id NUMBER, student_id NUMBER); CREATE TABLE Detention (detention_summary TEXT, detention_type_code TEXT, detention_id NUMBER); CREATE TABLE Students (student_id NUMBER); CREATE TABLE Assessment_Notes (student_id NUMBER);"
      },
      {
        "question": "Show the code and description of the most frequent detention type?",
        "query": "SELECT t1.detention_type_code , t2.detention_type_description FROM detention AS t1 JOIN ref_detention_type AS t2 ON t1.detention_type_code = t2.detention_type_code GROUP BY t1.detention_type_code ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Ref_Address_Types (address_type_description TEXT); CREATE TABLE Ref_Detention_Type (detention_type_description TEXT, detention_type_code TEXT); CREATE TABLE Students (student_id NUMBER); CREATE TABLE Detention (detention_type_code TEXT, detention_id NUMBER, detention_summary TEXT); CREATE TABLE Assessment_Notes (student_id NUMBER); CREATE TABLE Students_in_Detention (detention_id NUMBER, student_id NUMBER); CREATE TABLE Behavior_Incident (incident_type_code TEXT);"
      }
    ],
    [
      {
        "question": "hi, how many teachers have addresses with zip code \"918\"",
        "query": "SELECT COUNT ( * ) FROM addresses AS t1 JOIN teachers AS t2 ON t1.address_id = t2.address_id WHERE t1.zip_postcode = \"918\"",
        "schema": "CREATE TABLE Teachers (teacher_id NUMBER, address_id NUMBER, last_name TEXT, first_name TEXT); CREATE TABLE Addresses (zip_postcode TEXT, address_id NUMBER, city TEXT, line_2 TEXT, line_1 TEXT, line_3 TEXT); CREATE TABLE Student_Addresses (address_id NUMBER); CREATE TABLE Students (address_id NUMBER);"
      },
      {
        "question": "can you tell me who that teacher is? | The teacher is Alvis\tMacer Schultz | and what is that teacher's email address?",
        "query": "SELECT t2.email_address FROM addresses AS t1 JOIN teachers AS t2 ON t1.address_id = t2.address_id WHERE t1.zip_postcode = \"918\"",
        "schema": "CREATE TABLE Addresses (line_2 TEXT, city TEXT, line_1 TEXT, address_id NUMBER, zip_postcode TEXT, line_3 TEXT); CREATE TABLE Student_Addresses (address_id NUMBER); CREATE TABLE Students (address_id NUMBER, email_address TEXT); CREATE TABLE Teachers (first_name TEXT, middle_name TEXT, address_id NUMBER, teacher_id NUMBER, last_name TEXT, email_address TEXT);"
      }
    ],
    [
      {
        "question": "WHAT IS THE EMAIL ADDRESS OF LYLA WILSON MEDHURST ?",
        "query": "SELECT email_address FROM teachers WHERE first_name = 'Lyla' AND middle_name = 'Wilson' AND last_name = 'Medhurst'",
        "schema": "CREATE TABLE Student_Addresses (address_id NUMBER, student_id NUMBER); CREATE TABLE Teachers (other_details TEXT, last_name TEXT, middle_name TEXT, first_name TEXT, teacher_id NUMBER, email_address TEXT, address_id NUMBER); CREATE TABLE Detention (teacher_id NUMBER); CREATE TABLE Addresses (address_id NUMBER); CREATE TABLE Students (email_address TEXT, address_id NUMBER, other_student_details TEXT, first_name TEXT, student_id NUMBER, last_name TEXT, middle_name TEXT);"
      },
      {
        "question": "WHAT IS THE ADDRESS ID OF SID TREMAYNE BRAKUS ?",
        "query": "SELECT email_address FROM teachers WHERE first_name = 'Sid' AND middle_name = 'Tremayne' AND last_name = 'Brakus'",
        "schema": "CREATE TABLE Detention (teacher_id NUMBER); CREATE TABLE Students (middle_name TEXT, email_address TEXT, last_name TEXT, other_student_details TEXT, first_name TEXT, student_id NUMBER, address_id NUMBER); CREATE TABLE Addresses (address_id NUMBER); CREATE TABLE Student_Addresses (address_id NUMBER, student_id NUMBER); CREATE TABLE Teachers (first_name TEXT, other_details TEXT, middle_name TEXT, email_address TEXT, address_id NUMBER, teacher_id NUMBER, last_name TEXT);"
      },
      {
        "question": "WHAT IS THE CELL MOBILE NUMBER OF TRYSTAN ALEXANE SCHUSTER ?",
        "query": "SELECT cell_mobile_number FROM teachers WHERE first_name = 'Trystan' AND middle_name = 'Alexane' AND last_name = 'Schuster'",
        "schema": "CREATE TABLE Students (student_id NUMBER, email_address TEXT, first_name TEXT, middle_name TEXT, other_student_details TEXT, address_id NUMBER, cell_mobile_number TEXT, last_name TEXT); CREATE TABLE Addresses (address_id NUMBER); CREATE TABLE Detention (teacher_id NUMBER); CREATE TABLE Student_Addresses (address_id NUMBER, student_id NUMBER); CREATE TABLE Teachers (first_name TEXT, cell_mobile_number TEXT, email_address TEXT, teacher_id NUMBER, other_details TEXT, address_id NUMBER, middle_name TEXT, last_name TEXT);"
      }
    ],
    [
      {
        "question": "What are the dates of assessment notes for students with first name 'Fanny'?",
        "query": "SELECT t1.date_of_notes FROM assessment_notes AS t1 JOIN students AS t2 ON t1.student_id = t2.student_id WHERE t2.first_name = \"Fanny\"",
        "schema": "CREATE TABLE Detention (detention_id NUMBER, datetime_detention_start TIME, datetime_detention_end TIME); CREATE TABLE Students_in_Detention (student_id NUMBER); CREATE TABLE Assessment_Notes (student_id NUMBER, text_of_notes TEXT, notes_id NUMBER, date_of_notes TIME); CREATE TABLE Students (student_id NUMBER, middle_name TEXT, first_name TEXT, date_first_rental TIME, last_name TEXT); CREATE TABLE Behavior_Incident (student_id NUMBER);"
      },
      {
        "question": "Could you tell me the dates students with first name 'Fanny' left the university?",
        "query": "SELECT date_left_university FROM students WHERE first_name = \"Fanny\"",
        "schema": "CREATE TABLE Students (middle_name TEXT, student_id NUMBER, date_first_rental TIME, last_name TEXT, date_left_university TIME, address_id NUMBER, first_name TEXT); CREATE TABLE Behavior_Incident (student_id NUMBER); CREATE TABLE Assessment_Notes (date_of_notes TIME, notes_id NUMBER, text_of_notes TEXT, student_id NUMBER); CREATE TABLE Detention (datetime_detention_start TIME, datetime_detention_end TIME, detention_id NUMBER); CREATE TABLE Student_Addresses (date_address_to TIME, student_id NUMBER, address_id NUMBER, date_address_from TIME); CREATE TABLE Students_in_Detention (student_id NUMBER);"
      },
      {
        "question": "What are the cell mobile numbers of students with the first name 'Fanny'?",
        "query": "SELECT cell_mobile_number FROM students WHERE first_name = \"Fanny\"",
        "schema": "CREATE TABLE Behavior_Incident (student_id NUMBER); CREATE TABLE Student_Addresses (address_id NUMBER, student_id NUMBER, date_address_to TIME, date_address_from TIME); CREATE TABLE Students (date_left_university TIME, middle_name TEXT, student_id NUMBER, first_name TEXT, cell_mobile_number TEXT, date_first_rental TIME, address_id NUMBER, last_name TEXT); CREATE TABLE Assessment_Notes (student_id NUMBER, notes_id NUMBER, text_of_notes TEXT, date_of_notes TIME); CREATE TABLE Students_in_Detention (student_id NUMBER); CREATE TABLE Teachers (cell_mobile_number TEXT); CREATE TABLE Detention (datetime_detention_end TIME, detention_id NUMBER, datetime_detention_start TIME);"
      }
    ],
    [
      {
        "question": "Can you find me student with first name \"Emma\"? | What do you want to know about that student? | Student id",
        "query": "SELECT student_id FROM students WHERE first_name = \"Emma\"",
        "schema": "CREATE TABLE Students_in_Detention (student_id NUMBER); CREATE TABLE Behavior_Incident (student_id NUMBER); CREATE TABLE Assessment_Notes (student_id NUMBER); CREATE TABLE Student_Addresses (student_id NUMBER); CREATE TABLE Students (last_name TEXT, student_id NUMBER, middle_name TEXT, first_name TEXT, address_id NUMBER, other_student_details TEXT);"
      },
      {
        "question": "What is the last name for that student?",
        "query": "SELECT last_name FROM students WHERE first_name = \"Emma\"",
        "schema": "CREATE TABLE Behavior_Incident (student_id NUMBER); CREATE TABLE Students (address_id NUMBER, student_id NUMBER, other_student_details TEXT, middle_name TEXT, last_name TEXT, first_name TEXT); CREATE TABLE Student_Addresses (student_id NUMBER); CREATE TABLE Assessment_Notes (student_id NUMBER); CREATE TABLE Students_in_Detention (student_id NUMBER);"
      },
      {
        "question": "What is her email?",
        "query": "SELECT email_address FROM students WHERE first_name = \"Emma\"",
        "schema": "CREATE TABLE Students_in_Detention (student_id NUMBER); CREATE TABLE Student_Addresses (student_id NUMBER); CREATE TABLE Behavior_Incident (student_id NUMBER); CREATE TABLE Assessment_Notes (student_id NUMBER); CREATE TABLE Students (other_student_details TEXT, email_address TEXT, first_name TEXT, address_id NUMBER, last_name TEXT, middle_name TEXT, student_id NUMBER); CREATE TABLE Teachers (email_address TEXT);"
      }
    ],
    [
      {
        "question": "How many students are in the class",
        "query": "SELECT COUNT ( * ) FROM students",
        "schema": "CREATE TABLE Student_Addresses (address_id NUMBER, student_id NUMBER); CREATE TABLE Behavior_Incident (incident_id NUMBER, student_id NUMBER); CREATE TABLE Assessment_Notes (teacher_id NUMBER, student_id NUMBER); CREATE TABLE Students_in_Detention (incident_id NUMBER, student_id NUMBER, detention_id NUMBER); CREATE TABLE Detention (detention_id NUMBER, teacher_id NUMBER); CREATE TABLE Teachers (teacher_id NUMBER, address_id NUMBER); CREATE TABLE Students (first_name TEXT, middle_name TEXT, address_id NUMBER, student_id NUMBER, last_name TEXT); CREATE TABLE Addresses (address_id NUMBER);"
      },
      {
        "question": "What are the student id 1's incident type code?",
        "query": "SELECT incident_type_code FROM behavior_incident WHERE student_id = 1",
        "schema": "CREATE TABLE Student_Addresses (address_id NUMBER, student_id NUMBER); CREATE TABLE Behavior_Incident (incident_id NUMBER, incident_type_code TEXT, student_id NUMBER); CREATE TABLE Assessment_Notes (student_id NUMBER, teacher_id NUMBER); CREATE TABLE Teachers (address_id NUMBER, teacher_id NUMBER); CREATE TABLE Ref_Incident_Type (incident_type_code TEXT, incident_type_description TEXT); CREATE TABLE Addresses (address_id NUMBER); CREATE TABLE Students_in_Detention (incident_id NUMBER, student_id NUMBER, detention_id NUMBER); CREATE TABLE Detention (teacher_id NUMBER, detention_id NUMBER, detention_type_code TEXT); CREATE TABLE Students (middle_name TEXT, last_name TEXT, address_id NUMBER, first_name TEXT, student_id NUMBER);"
      },
      {
        "question": "what are the recommendations are given to student?",
        "query": "SELECT recommendations FROM behavior_incident",
        "schema": "CREATE TABLE Behavior_Incident (incident_summary TEXT, incident_id NUMBER, recommendations TEXT, student_id NUMBER, incident_type_code TEXT); CREATE TABLE Teachers (address_id NUMBER, teacher_id NUMBER); CREATE TABLE Ref_Incident_Type (incident_type_description TEXT, incident_type_code TEXT); CREATE TABLE Student_Addresses (student_id NUMBER, address_id NUMBER); CREATE TABLE Addresses (address_id NUMBER); CREATE TABLE Students_in_Detention (student_id NUMBER, incident_id NUMBER, detention_id NUMBER); CREATE TABLE Students (address_id NUMBER, last_name TEXT, middle_name TEXT, student_id NUMBER, first_name TEXT); CREATE TABLE Detention (detention_type_code TEXT, teacher_id NUMBER, detention_id NUMBER); CREATE TABLE Assessment_Notes (student_id NUMBER, teacher_id NUMBER);"
      },
      {
        "question": "what is the mobile number of student id 1?",
        "query": "SELECT cell_mobile_number FROM students WHERE student_id = 1",
        "schema": "CREATE TABLE Student_Addresses (student_id NUMBER, address_id NUMBER); CREATE TABLE Behavior_Incident (incident_type_code TEXT, incident_id NUMBER, recommendations TEXT, student_id NUMBER, incident_summary TEXT); CREATE TABLE Teachers (address_id NUMBER, teacher_id NUMBER, cell_mobile_number TEXT); CREATE TABLE Assessment_Notes (teacher_id NUMBER, student_id NUMBER); CREATE TABLE Addresses (address_id NUMBER); CREATE TABLE Students_in_Detention (student_id NUMBER, detention_id NUMBER, incident_id NUMBER); CREATE TABLE Students (last_name TEXT, cell_mobile_number TEXT, middle_name TEXT, first_name TEXT, address_id NUMBER, student_id NUMBER); CREATE TABLE Detention (detention_type_code TEXT, detention_id NUMBER, teacher_id NUMBER); CREATE TABLE Ref_Incident_Type (incident_type_description TEXT, incident_type_code TEXT);"
      }
    ],
    [
      {
        "question": "How Many Students have Behavior Incident reports with recommendations?",
        "query": "SELECT COUNT ( * ) FROM ( SELECT * FROM behavior_incident AS t1 JOIN students AS t2 ON t1.student_id = t2.student_id GROUP BY t1.student_id )",
        "schema": "CREATE TABLE Assessment_Notes (teacher_id NUMBER, student_id NUMBER); CREATE TABLE Students (first_name TEXT, student_id NUMBER, last_name TEXT); CREATE TABLE Detention (detention_id NUMBER, detention_summary TEXT, teacher_id NUMBER); CREATE TABLE Student_Addresses (student_id NUMBER); CREATE TABLE Behavior_Incident (incident_id NUMBER, incident_type_code TEXT, student_id NUMBER, recommendations TEXT, incident_summary TEXT); CREATE TABLE Students_in_Detention (student_id NUMBER, incident_id NUMBER); CREATE TABLE Teachers (teacher_id NUMBER);"
      },
      {
        "question": "How many of those Recommendations required the students to leave the university?",
        "query": "SELECT COUNT ( * ) FROM ( SELECT * FROM behavior_incident AS t1 JOIN students AS t2 ON t1.student_id = t2.student_id WHERE recommendations = \"Transfer schools\" GROUP BY t1.student_id )",
        "schema": "CREATE TABLE Assessment_Notes (student_id NUMBER, teacher_id NUMBER); CREATE TABLE Behavior_Incident (student_id NUMBER, incident_summary TEXT, recommendations TEXT, incident_id NUMBER, incident_type_code TEXT); CREATE TABLE Teachers (teacher_id NUMBER); CREATE TABLE Students (student_id NUMBER, address_id NUMBER, last_name TEXT, first_name TEXT, date_left_university TIME); CREATE TABLE Students_in_Detention (incident_id NUMBER, student_id NUMBER); CREATE TABLE Student_Addresses (student_id NUMBER); CREATE TABLE Detention (detention_summary TEXT, detention_id NUMBER, teacher_id NUMBER);"
      },
      {
        "question": "What was the students last name and ID that had the most behavior incidents?",
        "query": "SELECT t1.student_id , t2.last_name FROM behavior_incident AS t1 JOIN students AS t2 ON t1.student_id = t2.student_id GROUP BY t1.student_id ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Teachers (teacher_id NUMBER); CREATE TABLE Student_Addresses (student_id NUMBER); CREATE TABLE Detention (teacher_id NUMBER, detention_summary TEXT, detention_id NUMBER); CREATE TABLE Behavior_Incident (student_id NUMBER, incident_summary TEXT, incident_type_code TEXT, incident_id NUMBER, recommendations TEXT); CREATE TABLE Students (first_name TEXT, last_name TEXT, address_id NUMBER, student_id NUMBER, date_left_university TIME); CREATE TABLE Students_in_Detention (student_id NUMBER, incident_id NUMBER); CREATE TABLE Assessment_Notes (student_id NUMBER, teacher_id NUMBER);"
      }
    ],
    [
      {
        "question": "Add a column for monthly rental to the table Addresses | i cannot understand your question, can you give more information? thanks | What's the highest monthly rental in the table Student Addresses?",
        "query": "SELECT monthly_rental FROM student_addresses ORDER BY monthly_rental DESC LIMIT 1",
        "schema": "CREATE TABLE Addresses (address_id NUMBER); CREATE TABLE Student_Addresses (monthly_rental NUMBER, student_id NUMBER, address_id NUMBER); CREATE TABLE Students (student_id NUMBER, address_id NUMBER);"
      },
      {
        "question": "And what is the zip postcode of the address with monthly rental 1297.807?",
        "query": "SELECT t1.zip_postcode FROM addresses AS t1 JOIN student_addresses AS t2 ON t1.address_id = t2.address_id WHERE t2.monthly_rental = 1297.807",
        "schema": "CREATE TABLE Students (address_id NUMBER, student_id NUMBER); CREATE TABLE Student_Addresses (address_id NUMBER, monthly_rental NUMBER, student_id NUMBER); CREATE TABLE Addresses (address_id NUMBER, zip_postcode TEXT);"
      },
      {
        "question": "And can you also tell me the line 1 value from the table Addresses for the same property?",
        "query": "SELECT t1.line_1 FROM addresses AS t1 JOIN student_addresses AS t2 ON t1.address_id = t2.address_id WHERE t2.monthly_rental = 1297.807",
        "schema": "CREATE TABLE Student_Addresses (address_id NUMBER, student_id NUMBER, monthly_rental NUMBER); CREATE TABLE Students (address_id NUMBER, student_id NUMBER); CREATE TABLE Addresses (line_2 TEXT, line_3 TEXT, address_id NUMBER, zip_postcode TEXT, line_1 TEXT);"
      },
      {
        "question": "Hmmm...can you also please tell me the address id for this same property?",
        "query": "SELECT t1.address_id FROM addresses AS t1 JOIN student_addresses AS t2 ON t1.address_id = t2.address_id WHERE t2.monthly_rental = 1297.807",
        "schema": "CREATE TABLE Students (student_id NUMBER, address_id NUMBER); CREATE TABLE Student_Addresses (student_id NUMBER, address_id NUMBER, monthly_rental NUMBER); CREATE TABLE Addresses (line_1 TEXT, line_3 TEXT, line_2 TEXT, address_id NUMBER, zip_postcode TEXT);"
      }
    ],
    [
      {
        "question": "Find the start and end  dates of behavior incidents of students with last name \"Rohan\"?",
        "query": "SELECT t1.date_incident_start , t1.date_incident_end FROM behavior_incident AS t1 JOIN students AS t2 ON t1.student_id = t2.student_id WHERE t2.last_name = \"Rohan\"",
        "schema": "CREATE TABLE Behavior_Incident (incident_type_code TEXT, student_id NUMBER, incident_id NUMBER, incident_summary TEXT, date_incident_start TIME, date_incident_end TIME); CREATE TABLE Students (middle_name TEXT, student_id NUMBER, date_left_university TIME, first_name TEXT, last_name TEXT); CREATE TABLE Detention (datetime_detention_start TIME, datetime_detention_end TIME); CREATE TABLE Students_in_Detention (student_id NUMBER, incident_id NUMBER); CREATE TABLE Assessment_Notes (student_id NUMBER, date_of_notes TIME);"
      },
      {
        "question": "Find the start and end dates of behavior incidents of students with last name \"Bergnaum\"?",
        "query": "SELECT t1.date_incident_start , date_incident_end FROM behavior_incident AS t1 JOIN students AS t2 ON t1.student_id = t2.student_id WHERE t2.last_name = \"Bergnaum\"",
        "schema": "CREATE TABLE Assessment_Notes (student_id NUMBER, date_of_notes TIME); CREATE TABLE Behavior_Incident (date_incident_start TIME, incident_summary TEXT, student_id NUMBER, date_incident_end TIME, incident_id NUMBER, incident_type_code TEXT); CREATE TABLE Detention (datetime_detention_end TIME, datetime_detention_start TIME); CREATE TABLE Students_in_Detention (student_id NUMBER, incident_id NUMBER); CREATE TABLE Student_Addresses (address_id NUMBER, student_id NUMBER); CREATE TABLE Students (address_id NUMBER, middle_name TEXT, first_name TEXT, student_id NUMBER, last_name TEXT, date_left_university TIME);"
      },
      {
        "question": "Find the start and end dates of behavior incidents of students with last name \"Hansen\"?",
        "query": "SELECT t2.last_name FROM behavior_incident AS t1 JOIN students AS t2 ON t1.student_id = t2.student_id WHERE t2.last_name = \"Hansen\"",
        "schema": "CREATE TABLE Detention (datetime_detention_start TIME, datetime_detention_end TIME); CREATE TABLE Students (last_name TEXT, address_id NUMBER, middle_name TEXT, student_id NUMBER, first_name TEXT, date_left_university TIME); CREATE TABLE Students_in_Detention (student_id NUMBER, incident_id NUMBER); CREATE TABLE Student_Addresses (address_id NUMBER, student_id NUMBER); CREATE TABLE Assessment_Notes (student_id NUMBER, date_of_notes TIME); CREATE TABLE Behavior_Incident (date_incident_start TIME, date_incident_end TIME, incident_type_code TEXT, incident_id NUMBER, student_id NUMBER, incident_summary TEXT);"
      }
    ],
    [
      {
        "question": "what's the zip code of Lyla address of where she lives?",
        "query": "SELECT t1.zip_postcode FROM addresses AS t1 JOIN teachers AS t2 ON t1.address_id = t2.address_id WHERE t2.first_name = \"Lyla\"",
        "schema": "CREATE TABLE Student_Addresses (student_id NUMBER, address_id NUMBER, other_details TEXT); CREATE TABLE Addresses (zip_postcode TEXT, address_id NUMBER, line_1 TEXT, line_3 TEXT, city TEXT, line_2 TEXT); CREATE TABLE Ref_Address_Types (address_type_description TEXT, address_type_code TEXT); CREATE TABLE Teachers (email_address TEXT, address_id NUMBER, middle_name TEXT, last_name TEXT, first_name TEXT, teacher_id NUMBER); CREATE TABLE Students (first_name TEXT, last_name TEXT, address_id NUMBER, email_address TEXT, student_id NUMBER);"
      },
      {
        "question": "where is the city where Lyla stays?",
        "query": "SELECT t1.city FROM addresses AS t1 JOIN teachers AS t2 ON t1.address_id = t2.address_id WHERE t2.first_name = \"Lyla\"",
        "schema": "CREATE TABLE Students (last_name TEXT, email_address TEXT, student_id NUMBER, first_name TEXT, address_id NUMBER); CREATE TABLE Ref_Address_Types (address_type_code TEXT, address_type_description TEXT); CREATE TABLE Addresses (address_id NUMBER, line_3 TEXT, zip_postcode TEXT, line_1 TEXT, line_2 TEXT, city TEXT); CREATE TABLE Teachers (first_name TEXT, middle_name TEXT, teacher_id NUMBER, last_name TEXT, email_address TEXT, address_id NUMBER); CREATE TABLE Student_Addresses (other_details TEXT, address_id NUMBER, student_id NUMBER);"
      },
      {
        "question": "what's Lyla last name?",
        "query": "SELECT last_name FROM teachers WHERE first_name = \"Lyla\"",
        "schema": "CREATE TABLE Addresses (line_1 TEXT, address_id NUMBER, city TEXT, line_2 TEXT, zip_postcode TEXT, line_3 TEXT); CREATE TABLE Students (email_address TEXT, last_name TEXT, address_id NUMBER, student_id NUMBER, first_name TEXT); CREATE TABLE Student_Addresses (other_details TEXT, student_id NUMBER, address_id NUMBER); CREATE TABLE Teachers (last_name TEXT, teacher_id NUMBER, middle_name TEXT, first_name TEXT, address_id NUMBER, email_address TEXT); CREATE TABLE Ref_Address_Types (address_type_code TEXT, address_type_description TEXT);"
      }
    ],
    [
      {
        "question": "What are the emails of the students with the first name Emma?",
        "query": "SELECT email_address FROM students WHERE first_name = \"Emma\"",
        "schema": "CREATE TABLE Teachers (email_address TEXT); CREATE TABLE Assessment_Notes (student_id NUMBER); CREATE TABLE Students (first_name TEXT, middle_name TEXT, student_id NUMBER, last_name TEXT, email_address TEXT, other_student_details TEXT); CREATE TABLE Student_Addresses (student_id NUMBER); CREATE TABLE Behavior_Incident (student_id NUMBER);"
      },
      {
        "question": "What about last name Rohan? | The emails of the students with the  last name Rohan is derrick.jenkins@example.com | What is that person's student id?",
        "query": "SELECT student_id FROM students WHERE last_name = \"Rohan\"",
        "schema": "CREATE TABLE Assessment_Notes (student_id NUMBER); CREATE TABLE Behavior_Incident (student_id NUMBER); CREATE TABLE Students (first_name TEXT, last_name TEXT, address_id NUMBER, other_student_details TEXT, email_address TEXT, student_id NUMBER, middle_name TEXT); CREATE TABLE Student_Addresses (address_id NUMBER, student_id NUMBER); CREATE TABLE Teachers (email_address TEXT); CREATE TABLE Students_in_Detention (student_id NUMBER); CREATE TABLE Addresses (address_id NUMBER);"
      },
      {
        "question": "What is the name of the student with id 4? | Here are the first, middle, and last name of the student with id  4. | What is their email address?",
        "query": "SELECT email_address FROM students WHERE student_id = 4",
        "schema": "CREATE TABLE Student_Addresses (address_id NUMBER, student_id NUMBER); CREATE TABLE Behavior_Incident (student_id NUMBER); CREATE TABLE Students_in_Detention (student_id NUMBER); CREATE TABLE Teachers (email_address TEXT); CREATE TABLE Students (address_id NUMBER, student_id NUMBER, last_name TEXT, middle_name TEXT, other_student_details TEXT, first_name TEXT, email_address TEXT); CREATE TABLE Addresses (address_id NUMBER); CREATE TABLE Assessment_Notes (student_id NUMBER);"
      }
    ],
    [
      {
        "question": "How many detentions are there?",
        "query": "SELECT DISTINCT COUNT ( * ) FROM detention",
        "schema": "CREATE TABLE Assessment_Notes (student_id NUMBER, teacher_id NUMBER); CREATE TABLE Teachers (teacher_id NUMBER); CREATE TABLE Behavior_Incident (incident_id NUMBER, student_id NUMBER); CREATE TABLE Students_in_Detention (student_id NUMBER, detention_id NUMBER, incident_id NUMBER); CREATE TABLE Students (student_id NUMBER, last_name TEXT); CREATE TABLE Ref_Detention_Type (detention_type_code TEXT, detention_type_description TEXT); CREATE TABLE Detention (detention_id NUMBER, teacher_id NUMBER, detention_type_code TEXT, detention_summary TEXT);"
      },
      {
        "question": "How many teachers are not involved in any of them?",
        "query": "SELECT COUNT ( * ) FROM ( SELECT last_name FROM teachers EXCEPT SELECT t1.last_name FROM teachers AS t1 JOIN detention AS t2 ON t1.teacher_id = t2.teacher_id )",
        "schema": "CREATE TABLE Ref_Detention_Type (detention_type_description TEXT, detention_type_code TEXT); CREATE TABLE Behavior_Incident (student_id NUMBER, incident_id NUMBER); CREATE TABLE Teachers (middle_name TEXT, first_name TEXT, last_name TEXT, teacher_id NUMBER); CREATE TABLE Detention (teacher_id NUMBER, detention_type_code TEXT, detention_summary TEXT, detention_id NUMBER); CREATE TABLE Students_in_Detention (student_id NUMBER, incident_id NUMBER, detention_id NUMBER); CREATE TABLE Assessment_Notes (student_id NUMBER, teacher_id NUMBER); CREATE TABLE Students (last_name TEXT, student_id NUMBER);"
      },
      {
        "question": "What are the last names of those teachers?",
        "query": "SELECT last_name FROM teachers EXCEPT SELECT t1.last_name FROM teachers AS t1 JOIN detention AS t2 ON t1.teacher_id = t2.teacher_id",
        "schema": "CREATE TABLE Behavior_Incident (incident_id NUMBER, student_id NUMBER); CREATE TABLE Ref_Detention_Type (detention_type_description TEXT, detention_type_code TEXT); CREATE TABLE Detention (detention_type_code TEXT, teacher_id NUMBER, detention_id NUMBER, detention_summary TEXT); CREATE TABLE Students (student_id NUMBER, last_name TEXT); CREATE TABLE Students_in_Detention (detention_id NUMBER, student_id NUMBER, incident_id NUMBER); CREATE TABLE Teachers (last_name TEXT, teacher_id NUMBER, middle_name TEXT, first_name TEXT); CREATE TABLE Assessment_Notes (teacher_id NUMBER, student_id NUMBER);"
      }
    ],
    [
      {
        "question": "Can you provide a count of assessment notes by teacher id?",
        "query": "SELECT t1.teacher_id , COUNT ( * ) FROM assessment_notes AS t1 JOIN teachers AS t2 ON t1.teacher_id = t2.teacher_id GROUP BY t1.teacher_id",
        "schema": "CREATE TABLE Students (student_id NUMBER); CREATE TABLE Teachers (last_name TEXT, first_name TEXT, teacher_id NUMBER); CREATE TABLE Assessment_Notes (text_of_notes TEXT, teacher_id NUMBER, student_id NUMBER, notes_id NUMBER); CREATE TABLE Detention (teacher_id NUMBER, detention_summary TEXT); CREATE TABLE Behavior_Incident (student_id NUMBER, incident_summary TEXT);"
      },
      {
        "question": "For that table, can you sort by descending count?",
        "query": "SELECT t1.teacher_id , COUNT ( * ) FROM assessment_notes AS t1 JOIN teachers AS t2 ON t1.teacher_id = t2.teacher_id GROUP BY t1.teacher_id ORDER BY COUNT ( * ) DESC",
        "schema": "CREATE TABLE Detention (detention_summary TEXT, teacher_id NUMBER); CREATE TABLE Behavior_Incident (student_id NUMBER, incident_summary TEXT); CREATE TABLE Assessment_Notes (notes_id NUMBER, student_id NUMBER, teacher_id NUMBER, text_of_notes TEXT); CREATE TABLE Students (student_id NUMBER); CREATE TABLE Teachers (first_name TEXT, last_name TEXT, teacher_id NUMBER);"
      },
      {
        "question": "Can you left join the Assessment Notes table with the Teachers table on teacher_id?",
        "query": "SELECT * FROM assessment_notes AS t1 JOIN teachers AS t2 ON t1.teacher_id = t2.teacher_id",
        "schema": "CREATE TABLE Behavior_Incident (student_id NUMBER, incident_summary TEXT); CREATE TABLE Teachers (first_name TEXT, teacher_id NUMBER, last_name TEXT); CREATE TABLE Assessment_Notes (teacher_id NUMBER, notes_id NUMBER, text_of_notes TEXT, student_id NUMBER); CREATE TABLE Students (student_id NUMBER); CREATE TABLE Detention (teacher_id NUMBER, detention_summary TEXT);"
      },
      {
        "question": "For the earlier table with sorted counts, can you give me the first name associted with each teacher_id?",
        "query": "SELECT t2.first_name, t1.teacher_id , COUNT ( * ) FROM assessment_notes AS t1 JOIN teachers AS t2 ON t1.teacher_id = t2.teacher_id GROUP BY t1.teacher_id ORDER BY COUNT ( * ) DESC",
        "schema": "CREATE TABLE Students (first_name TEXT, student_id NUMBER); CREATE TABLE Teachers (teacher_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT); CREATE TABLE Behavior_Incident (incident_summary TEXT, student_id NUMBER); CREATE TABLE Assessment_Notes (date_of_notes TIME, student_id NUMBER, notes_id NUMBER, text_of_notes TEXT, teacher_id NUMBER); CREATE TABLE Detention (detention_summary TEXT, teacher_id NUMBER);"
      }
    ],
    [
      {
        "question": "How many teachers are there?",
        "query": "SELECT COUNT ( teacher_id ) FROM teachers",
        "schema": "CREATE TABLE Teachers (other_details TEXT, address_id NUMBER, middle_name TEXT, first_name TEXT, teacher_id NUMBER, gender TEXT, email_address TEXT, last_name TEXT); CREATE TABLE Students (student_id NUMBER); CREATE TABLE Assessment_Notes (teacher_id NUMBER); CREATE TABLE Detention (teacher_id NUMBER); CREATE TABLE Addresses (address_id NUMBER);"
      },
      {
        "question": "How many of them involve in detention?",
        "query": "SELECT COUNT ( DISTINCT t2.teacher_id ) FROM teachers AS t1 JOIN detention AS t2 ON t1.teacher_id = t2.teacher_id",
        "schema": "CREATE TABLE Detention (teacher_id NUMBER, detention_id NUMBER, detention_type_code TEXT, detention_summary TEXT); CREATE TABLE Students_in_Detention (detention_id NUMBER, student_id NUMBER, incident_id NUMBER); CREATE TABLE Assessment_Notes (teacher_id NUMBER); CREATE TABLE Students (student_id NUMBER); CREATE TABLE Addresses (address_id NUMBER); CREATE TABLE Teachers (first_name TEXT, middle_name TEXT, address_id NUMBER, email_address TEXT, other_details TEXT, teacher_id NUMBER, last_name TEXT, gender TEXT); CREATE TABLE Behavior_Incident (incident_id NUMBER);"
      },
      {
        "question": "Can you show me a list of teachers that are not involve in detention?",
        "query": "SELECT last_name FROM teachers EXCEPT SELECT t1.last_name FROM teachers AS t1 JOIN detention AS t2 ON t1.teacher_id = t2.teacher_id",
        "schema": "CREATE TABLE Assessment_Notes (teacher_id NUMBER); CREATE TABLE Behavior_Incident (incident_id NUMBER); CREATE TABLE Detention (detention_id NUMBER, teacher_id NUMBER, detention_summary TEXT, detention_type_code TEXT); CREATE TABLE Teachers (address_id NUMBER, email_address TEXT, last_name TEXT, teacher_id NUMBER, middle_name TEXT, first_name TEXT, gender TEXT, other_details TEXT); CREATE TABLE Students_in_Detention (student_id NUMBER, incident_id NUMBER, detention_id NUMBER); CREATE TABLE Students (student_id NUMBER); CREATE TABLE Addresses (address_id NUMBER);"
      },
      {
        "question": "Can you also include their id?",
        "query": "SELECT last_name ,teacher_id FROM teachers EXCEPT SELECT t1.last_name ,t1.teacher_id FROM teachers AS t1 JOIN detention AS t2 ON t1.teacher_id = t2.teacher_id",
        "schema": "CREATE TABLE Students (student_id NUMBER); CREATE TABLE Detention (teacher_id NUMBER, detention_type_code TEXT, detention_id NUMBER, detention_summary TEXT); CREATE TABLE Addresses (address_id NUMBER); CREATE TABLE Assessment_Notes (teacher_id NUMBER); CREATE TABLE Teachers (first_name TEXT, last_name TEXT, address_id NUMBER, middle_name TEXT, gender TEXT, email_address TEXT, other_details TEXT, teacher_id NUMBER); CREATE TABLE Students_in_Detention (student_id NUMBER, incident_id NUMBER, detention_id NUMBER); CREATE TABLE Behavior_Incident (incident_id NUMBER);"
      }
    ],
    [
      {
        "question": "How many student are involved in any kind of accident?",
        "query": "SELECT COUNT ( * ) FROM students WHERE student_id IN ( SELECT student_id FROM behavior_incident )",
        "schema": "CREATE TABLE Student_Addresses (student_id NUMBER); CREATE TABLE Ref_Incident_Type (incident_type_code TEXT); CREATE TABLE Assessment_Notes (student_id NUMBER); CREATE TABLE Teachers (teacher_id NUMBER); CREATE TABLE Students (last_name TEXT, middle_name TEXT, first_name TEXT, other_student_details TEXT, student_id NUMBER); CREATE TABLE Behavior_Incident (other_details TEXT, student_id NUMBER, incident_id NUMBER, incident_summary TEXT, incident_type_code TEXT); CREATE TABLE Students_in_Detention (student_id NUMBER, incident_id NUMBER);"
      },
      {
        "question": "How about student not involved in any kind of incident?",
        "query": "SELECT COUNT ( * ) FROM students WHERE student_id NOT IN ( SELECT student_id FROM behavior_incident )",
        "schema": "CREATE TABLE Ref_Incident_Type (incident_type_code TEXT); CREATE TABLE Students (student_id NUMBER, other_student_details TEXT, last_name TEXT, middle_name TEXT, first_name TEXT); CREATE TABLE Assessment_Notes (student_id NUMBER); CREATE TABLE Students_in_Detention (incident_id NUMBER, student_id NUMBER); CREATE TABLE Teachers (teacher_id NUMBER); CREATE TABLE Behavior_Incident (incident_summary TEXT, other_details TEXT, incident_type_code TEXT, incident_id NUMBER, student_id NUMBER); CREATE TABLE Student_Addresses (student_id NUMBER);"
      },
      {
        "question": "And what are their names?",
        "query": "SELECT first_name, middle_name, last_name FROM students WHERE student_id NOT IN ( SELECT student_id FROM behavior_incident )",
        "schema": "CREATE TABLE Behavior_Incident (student_id NUMBER, incident_id NUMBER, incident_summary TEXT, other_details TEXT, incident_type_code TEXT); CREATE TABLE Students_in_Detention (incident_id NUMBER, student_id NUMBER); CREATE TABLE Assessment_Notes (student_id NUMBER); CREATE TABLE Students (other_student_details TEXT, first_name TEXT, last_name TEXT, middle_name TEXT, student_id NUMBER); CREATE TABLE Student_Addresses (student_id NUMBER); CREATE TABLE Teachers (teacher_id NUMBER); CREATE TABLE Ref_Incident_Type (incident_type_code TEXT);"
      }
    ],
    [
      {
        "question": "Find the start date of behavior incidents of students with the last name \"Fahey\"?",
        "query": "SELECT t1.date_incident_start FROM behavior_incident AS t1 JOIN students AS t2 ON t1.student_id = t2.student_id WHERE t2.last_name = \"Fahey\"",
        "schema": "CREATE TABLE Students (last_name TEXT, first_name TEXT, date_left_university TIME, middle_name TEXT, student_id NUMBER); CREATE TABLE Detention (datetime_detention_start TIME, datetime_detention_end TIME); CREATE TABLE Behavior_Incident (student_id NUMBER, incident_type_code TEXT, date_incident_start TIME, date_incident_end TIME, incident_id NUMBER, incident_summary TEXT); CREATE TABLE Students_in_Detention (student_id NUMBER, incident_id NUMBER); CREATE TABLE Assessment_Notes (date_of_notes TIME, student_id NUMBER);"
      },
      {
        "question": "Find the incident type code of behavior incidents of students with the last name \"Fahey\"?",
        "query": "SELECT t1.incident_type_code FROM behavior_incident AS t1 JOIN students AS t2 ON t1.student_id = t2.student_id WHERE t2.last_name = \"Fahey\"",
        "schema": "CREATE TABLE Students (last_name TEXT, first_name TEXT, student_id NUMBER, middle_name TEXT, date_left_university TIME); CREATE TABLE Ref_Incident_Type (incident_type_code TEXT); CREATE TABLE Detention (datetime_detention_end TIME, datetime_detention_start TIME); CREATE TABLE Assessment_Notes (date_of_notes TIME, student_id NUMBER); CREATE TABLE Students_in_Detention (student_id NUMBER, incident_id NUMBER); CREATE TABLE Behavior_Incident (incident_type_code TEXT, incident_summary TEXT, incident_id NUMBER, student_id NUMBER, date_incident_end TIME, date_incident_start TIME);"
      },
      {
        "question": "What is the date left university of the student with the last name \"Fahey\"?",
        "query": "SELECT t2.date_left_university FROM behavior_incident AS t1 JOIN students AS t2 ON t1.student_id = t2.student_id WHERE t2.last_name = \"Fahey\"",
        "schema": "CREATE TABLE Students (last_name TEXT, middle_name TEXT, student_id NUMBER, first_name TEXT, date_left_university TIME, address_id NUMBER); CREATE TABLE Student_Addresses (date_address_from TIME, date_address_to TIME, student_id NUMBER); CREATE TABLE Students_in_Detention (student_id NUMBER, incident_id NUMBER); CREATE TABLE Detention (datetime_detention_start TIME, datetime_detention_end TIME); CREATE TABLE Assessment_Notes (student_id NUMBER, date_of_notes TIME); CREATE TABLE Behavior_Incident (date_incident_end TIME, incident_id NUMBER, student_id NUMBER, incident_type_code TEXT, incident_summary TEXT, date_incident_start TIME); CREATE TABLE Ref_Incident_Type (incident_type_code TEXT);"
      },
      {
        "question": "How many students have the incident type code \"VIOLENCE\"?",
        "query": "SELECT COUNT ( * ) FROM behavior_incident WHERE incident_type_code = \"VIOLENCE\"",
        "schema": "CREATE TABLE Students (last_name TEXT, first_name TEXT, address_id NUMBER, middle_name TEXT, student_id NUMBER, date_left_university TIME); CREATE TABLE Ref_Incident_Type (incident_type_code TEXT); CREATE TABLE Detention (datetime_detention_end TIME, datetime_detention_start TIME); CREATE TABLE Behavior_Incident (incident_summary TEXT, student_id NUMBER, date_incident_start TIME, incident_id NUMBER, date_incident_end TIME, incident_type_code TEXT); CREATE TABLE Assessment_Notes (date_of_notes TIME, student_id NUMBER); CREATE TABLE Students_in_Detention (incident_id NUMBER, student_id NUMBER); CREATE TABLE Student_Addresses (date_address_to TIME, date_address_from TIME, student_id NUMBER);"
      },
      {
        "question": "What are the names of the students that have the incident type code \"VIOLENCE\"? | Do  you  mean  last name or  first name? | Both, please.",
        "query": "SELECT t2.first_name , t2.last_name FROM behavior_incident AS t1 JOIN students AS t2 ON t1.student_id = t2.student_id WHERE t1.incident_type_code = \"VIOLENCE\"",
        "schema": "CREATE TABLE Behavior_Incident (date_incident_end TIME, date_incident_start TIME, incident_type_code TEXT, incident_summary TEXT, incident_id NUMBER, student_id NUMBER); CREATE TABLE Student_Addresses (date_address_to TIME, student_id NUMBER, date_address_from TIME); CREATE TABLE Students_in_Detention (incident_id NUMBER, student_id NUMBER); CREATE TABLE Ref_Incident_Type (incident_type_code TEXT); CREATE TABLE Assessment_Notes (date_of_notes TIME, student_id NUMBER); CREATE TABLE Detention (datetime_detention_start TIME, datetime_detention_end TIME); CREATE TABLE Students (middle_name TEXT, first_name TEXT, last_name TEXT, address_id NUMBER, student_id NUMBER, date_left_university TIME);"
      }
    ],
    [
      {
        "question": "how many students are living in each state province county?",
        "query": "SELECT COUNT ( * ) , state_province_county FROM addresses AS t1 JOIN students AS t2 ON t1.address_id = t2.address_id GROUP BY state_province_county",
        "schema": "CREATE TABLE Addresses (state_province_county TEXT, address_id NUMBER, country TEXT); CREATE TABLE Student_Addresses (address_id NUMBER, student_id NUMBER); CREATE TABLE Teachers (address_id NUMBER); CREATE TABLE Students (student_id NUMBER, address_id NUMBER);"
      },
      {
        "question": "show me the first and last names of students in Wisconsin.",
        "query": "SELECT t2.first_name , t2.last_name FROM addresses AS t1 JOIN students AS t2 ON t1.address_id = t2.address_id WHERE t1.state_province_county = \"Wisconsin\"",
        "schema": "CREATE TABLE Addresses (country TEXT, address_id NUMBER, state_province_county TEXT); CREATE TABLE Students (first_name TEXT, student_id NUMBER, middle_name TEXT, last_name TEXT, address_id NUMBER); CREATE TABLE Student_Addresses (student_id NUMBER, address_id NUMBER); CREATE TABLE Teachers (address_id NUMBER);"
      }
    ]
  ],
  "browser_web": [
    [
      {
        "question": "Which browsers are compatible with firefox?",
        "query": "SELECT t3.name FROM web_client_accelerator AS t1 JOIN accelerator_compatible_browser AS t2 ON t2.accelerator_id = t1.id JOIN browser AS t3 ON t2.browser_id = t3.id WHERE t1.name = 'Firefox'",
        "schema": "CREATE TABLE Web_client_accelerator (id NUMBER, name TEXT); CREATE TABLE accelerator_compatible_browser (accelerator_id NUMBER, browser_id NUMBER); CREATE TABLE browser (name TEXT, id NUMBER);"
      },
      {
        "question": "WHat about with Fasterfox?",
        "query": "SELECT t3.name FROM web_client_accelerator AS t1 JOIN accelerator_compatible_browser AS t2 ON t2.accelerator_id = t1.id JOIN browser AS t3 ON t2.browser_id = t3.id WHERE t1.name = 'Fasterfox'",
        "schema": "CREATE TABLE Web_client_accelerator (id NUMBER, name TEXT, Client TEXT); CREATE TABLE browser (name TEXT, id NUMBER); CREATE TABLE accelerator_compatible_browser (accelerator_id NUMBER, browser_id NUMBER);"
      },
      {
        "question": "Which browsers are compatible with CACHebox?",
        "query": "SELECT t3.name FROM web_client_accelerator AS t1 JOIN accelerator_compatible_browser AS t2 ON t2.accelerator_id = t1.id JOIN browser AS t3 ON t2.browser_id = t3.id WHERE t1.name = 'CACHEbox'",
        "schema": "CREATE TABLE browser (name TEXT, id NUMBER); CREATE TABLE accelerator_compatible_browser (accelerator_id NUMBER, browser_id NUMBER); CREATE TABLE Web_client_accelerator (id NUMBER, Client TEXT, name TEXT);"
      },
      {
        "question": "Which browsers are compatible with both?",
        "query": "SELECT t3.name FROM web_client_accelerator AS t1 JOIN accelerator_compatible_browser AS t2 ON t2.accelerator_id = t1.id JOIN browser AS t3 ON t2.browser_id = t3.id WHERE t1.name = 'CACHEbox' INTERSECT SELECT t3.name FROM web_client_accelerator AS t1 JOIN accelerator_compatible_browser AS t2 ON t2.accelerator_id = t1.id JOIN browser AS t3 ON t2.browser_id = t3.id WHERE t1.name = 'Fasterfox'",
        "schema": "CREATE TABLE browser (name TEXT, id NUMBER); CREATE TABLE accelerator_compatible_browser (accelerator_id NUMBER, browser_id NUMBER); CREATE TABLE Web_client_accelerator (id NUMBER, Client TEXT, name TEXT);"
      }
    ],
    [
      {
        "question": "how many accelerators on the table",
        "query": "SELECT COUNT ( * ) FROM web_client_accelerator",
        "schema": "CREATE TABLE browser (id NUMBER); CREATE TABLE Web_client_accelerator (Operating_system TEXT, Client TEXT, name TEXT, id NUMBER);"
      },
      {
        "question": "what is the connection of CACHEbox",
        "query": "SELECT CONNECTION FROM web_client_accelerator WHERE name = \"CACHEbox\"",
        "schema": "CREATE TABLE browser (id NUMBER); CREATE TABLE Web_client_accelerator (Connection TEXT, name TEXT, Client TEXT, Operating_system TEXT, id NUMBER);"
      },
      {
        "question": "please list out the operating system | Can you please clarify which operating system do you need? | list out the all operating system on client accelerator",
        "query": "SELECT operating_system FROM web_client_accelerator",
        "schema": "CREATE TABLE browser (id NUMBER); CREATE TABLE Web_client_accelerator (id NUMBER, Client TEXT, Connection TEXT, Operating_system TEXT, name TEXT);"
      },
      {
        "question": "what are all the client accelerators on the table",
        "query": "SELECT name FROM web_client_accelerator",
        "schema": "CREATE TABLE Web_client_accelerator (Client TEXT, name TEXT, Connection TEXT, id NUMBER, Operating_system TEXT); CREATE TABLE browser (id NUMBER);"
      }
    ],
    [
      {
        "question": "what are the ids and names of the web accelerators that are compatible with two or more browsers?",
        "query": "SELECT t1.id , t1.name FROM web_client_accelerator AS t1 JOIN accelerator_compatible_browser AS t2 ON t2.accelerator_id = t1.id GROUP BY t1.id HAVING COUNT ( * ) > = 2",
        "schema": "CREATE TABLE accelerator_compatible_browser (accelerator_id NUMBER, browser_id NUMBER); CREATE TABLE Web_client_accelerator (name TEXT, id NUMBER, Client TEXT); CREATE TABLE browser (id NUMBER, name TEXT);"
      },
      {
        "question": "how many browser id?",
        "query": "SELECT COUNT ( DISTINCT browser_id ) FROM accelerator_compatible_browser",
        "schema": "CREATE TABLE accelerator_compatible_browser (browser_id NUMBER, accelerator_id NUMBER); CREATE TABLE browser (name TEXT, id NUMBER); CREATE TABLE Web_client_accelerator (id NUMBER, Client TEXT, name TEXT);"
      },
      {
        "question": "what are using CProxy in Operating system?",
        "query": "SELECT operating_system FROM web_client_accelerator WHERE name = \"CProxy\"",
        "schema": "CREATE TABLE browser (id NUMBER, name TEXT); CREATE TABLE accelerator_compatible_browser (accelerator_id NUMBER, browser_id NUMBER); CREATE TABLE Web_client_accelerator (Operating_system TEXT, name TEXT, id NUMBER, Client TEXT);"
      },
      {
        "question": "who is using Appliance (Linux) Operating system? | Do you want the name of the accelerator? | yes",
        "query": "SELECT name FROM web_client_accelerator WHERE operating_system = \"Appliance ( Linux ) \"",
        "schema": "CREATE TABLE accelerator_compatible_browser (browser_id NUMBER, accelerator_id NUMBER); CREATE TABLE browser (name TEXT, id NUMBER); CREATE TABLE Web_client_accelerator (Client TEXT, id NUMBER, name TEXT, Operating_system TEXT);"
      }
    ],
    [
      {
        "question": "how many accelerators are there?",
        "query": "SELECT COUNT ( * ) FROM web_client_accelerator",
        "schema": "CREATE TABLE browser (id NUMBER); CREATE TABLE Web_client_accelerator (name TEXT, id NUMBER, Operating_system TEXT, Client TEXT); CREATE TABLE accelerator_compatible_browser (accelerator_id NUMBER);"
      },
      {
        "question": "what accelerators are not compatible with the browsers?",
        "query": "SELECT * FROM web_client_accelerator WHERE id NOT IN ( SELECT accelerator_id FROM accelerator_compatible_browser )",
        "schema": "CREATE TABLE Web_client_accelerator (name TEXT, id NUMBER, Operating_system TEXT, Client TEXT); CREATE TABLE browser (id NUMBER); CREATE TABLE accelerator_compatible_browser (browser_id NUMBER, accelerator_id NUMBER);"
      },
      {
        "question": "can you tell me how many accelerators are not compatible?",
        "query": "SELECT COUNT ( * ) FROM web_client_accelerator WHERE id NOT IN ( SELECT accelerator_id FROM accelerator_compatible_browser )",
        "schema": "CREATE TABLE accelerator_compatible_browser (accelerator_id NUMBER, browser_id NUMBER); CREATE TABLE browser (id NUMBER); CREATE TABLE Web_client_accelerator (id NUMBER, Operating_system TEXT, Client TEXT, name TEXT);"
      }
    ],
    [
      {
        "question": "Which accelerator did the client user have? | Do you mean the name of the accelerator that the client named user has? | Yes",
        "query": "SELECT name FROM web_client_accelerator WHERE client = 'user'",
        "schema": "CREATE TABLE Web_client_accelerator (name TEXT, Client TEXT, id NUMBER); CREATE TABLE accelerator_compatible_browser (browser_id NUMBER, accelerator_id NUMBER); CREATE TABLE browser (id NUMBER, name TEXT);"
      },
      {
        "question": "Which one of this contains a substring called Opera? | Do you mean the name of the accelerators whose name contains a substring called \"Opera\" and that the client named user has? | Yes",
        "query": "SELECT name FROM web_client_accelerator WHERE client = 'user' AND name LIKE \"%Opera%\"",
        "schema": "CREATE TABLE Web_client_accelerator (id NUMBER, name TEXT, Client TEXT); CREATE TABLE browser (id NUMBER, name TEXT); CREATE TABLE accelerator_compatible_browser (browser_id NUMBER, accelerator_id NUMBER);"
      },
      {
        "question": "Which operating system did the client End user, ISP have?",
        "query": "SELECT operating_system FROM web_client_accelerator WHERE client = 'End user, ISP'",
        "schema": "CREATE TABLE accelerator_compatible_browser (browser_id NUMBER, accelerator_id NUMBER); CREATE TABLE browser (name TEXT, id NUMBER); CREATE TABLE Web_client_accelerator (id NUMBER, Operating_system TEXT, name TEXT, Client TEXT);"
      }
    ],
    [
      {
        "question": "WHAT ARE THE BROWSERS LISTED IN THE TABLE",
        "query": "SELECT name FROM browser",
        "schema": "CREATE TABLE browser (id NUMBER, name TEXT);"
      },
      {
        "question": "WHICH BROWSER IS COMPATIBLE WITH ACCELERATOR 'CPROXY' AFTER YEAR 1998",
        "query": "SELECT t1.name FROM browser AS t1 JOIN accelerator_compatible_browser AS t2 ON t1.id = t2.browser_id JOIN web_client_accelerator AS t3 ON t2.accelerator_id = t3.id WHERE t3.name = 'CProxy' AND t2.compatible_since_year > 1998",
        "schema": "CREATE TABLE accelerator_compatible_browser (accelerator_id NUMBER, browser_id NUMBER, compatible_since_year NUMBER); CREATE TABLE Web_client_accelerator (Client TEXT, name TEXT, id NUMBER); CREATE TABLE browser (id NUMBER, name TEXT);"
      },
      {
        "question": "WHAT IS THE BROWSER ID OF OPERA",
        "query": "SELECT t1.id FROM browser AS t1 JOIN accelerator_compatible_browser AS t2 ON t1.id = t2.browser_id JOIN web_client_accelerator AS t3 ON t2.accelerator_id = t3.id WHERE t1.name = \"Opera\"",
        "schema": "CREATE TABLE browser (name TEXT, id NUMBER); CREATE TABLE Web_client_accelerator (id NUMBER, Client TEXT, name TEXT); CREATE TABLE accelerator_compatible_browser (browser_id NUMBER, compatible_since_year NUMBER, accelerator_id NUMBER);"
      }
    ],
    [
      {
        "question": "What is the maximum market share of the browsers?",
        "query": "SELECT MAX ( market_share ) FROM browser",
        "schema": "CREATE TABLE browser (id NUMBER, market_share NUMBER, name TEXT);"
      },
      {
        "question": "What is the minimum market share of all browsers?",
        "query": "SELECT MIN ( market_share ) FROM browser",
        "schema": "CREATE TABLE browser (market_share NUMBER, id NUMBER, name TEXT);"
      },
      {
        "question": "What is the average market share of all browsers?",
        "query": "SELECT AVG ( market_share ) FROM browser",
        "schema": "CREATE TABLE browser (id NUMBER, market_share NUMBER, name TEXT);"
      },
      {
        "question": "Can you list the names of all browsers that have market shares above the average?",
        "query": "SELECT name FROM browser WHERE market_share > ( SELECT AVG ( market_share ) FROM browser )",
        "schema": "CREATE TABLE browser (id NUMBER, name TEXT, market_share NUMBER);"
      }
    ],
    [
      {
        "question": "What is the market share of Internet explorer",
        "query": "SELECT market_share FROM browser WHERE name = \"Internet Explorer\"",
        "schema": "CREATE TABLE browser (market_share NUMBER, id NUMBER, name TEXT); CREATE TABLE Web_client_accelerator (id NUMBER, Client TEXT, name TEXT);"
      },
      {
        "question": "What about Firefox's Market share",
        "query": "SELECT market_share FROM browser WHERE name = \"Firefox\"",
        "schema": "CREATE TABLE browser (id NUMBER, market_share NUMBER, name TEXT); CREATE TABLE Web_client_accelerator (id NUMBER, name TEXT, Client TEXT);"
      },
      {
        "question": "* I have left the chat *",
        "query": "SELECT market_share FROM browser WHERE name = \"Safari\"",
        "schema": "CREATE TABLE browser (market_share NUMBER, name TEXT, id NUMBER); CREATE TABLE Web_client_accelerator (id NUMBER, Client TEXT, name TEXT);"
      }
    ],
    [
      {
        "question": "Names of browsers that are compartable with cachebox?",
        "query": "SELECT t3.name FROM web_client_accelerator AS t1 JOIN accelerator_compatible_browser AS t2 ON t2.accelerator_id = t1.id JOIN browser AS t3 ON t2.browser_id = t3.id WHERE t1.name = 'CACHEbox'",
        "schema": "CREATE TABLE Web_client_accelerator (id NUMBER, name TEXT); CREATE TABLE accelerator_compatible_browser (browser_id NUMBER, accelerator_id NUMBER); CREATE TABLE browser (id NUMBER, name TEXT);"
      },
      {
        "question": "Names of browsers that are compartable with fasterfox?",
        "query": "SELECT t3.name FROM web_client_accelerator AS t1 JOIN accelerator_compatible_browser AS t2 ON t2.accelerator_id = t1.id JOIN browser AS t3 ON t2.browser_id = t3.id WHERE t1.name = 'Fasterfox'",
        "schema": "CREATE TABLE Web_client_accelerator (Client TEXT, name TEXT, id NUMBER); CREATE TABLE browser (id NUMBER, name TEXT); CREATE TABLE accelerator_compatible_browser (accelerator_id NUMBER, browser_id NUMBER);"
      },
      {
        "question": "What is firefox  market ahare?",
        "query": "SELECT market_share FROM browser WHERE name = \"Firefox\"",
        "schema": "CREATE TABLE accelerator_compatible_browser (browser_id NUMBER, accelerator_id NUMBER); CREATE TABLE Web_client_accelerator (name TEXT, id NUMBER, Client TEXT); CREATE TABLE browser (market_share NUMBER, id NUMBER, name TEXT);"
      },
      {
        "question": "Tell me the market share of safari?",
        "query": "SELECT market_share FROM browser WHERE name = \"Safari\"",
        "schema": "CREATE TABLE accelerator_compatible_browser (browser_id NUMBER, accelerator_id NUMBER); CREATE TABLE browser (name TEXT, market_share NUMBER, id NUMBER); CREATE TABLE Web_client_accelerator (Client TEXT, name TEXT, id NUMBER);"
      }
    ],
    [
      {
        "question": "which operating system has a connection of Broadband, Satellite, Wireless, Fiber, DSL?",
        "query": "SELECT operating_system FROM web_client_accelerator WHERE CONNECTION = \"Broadband, Satellite, Wireless, Fiber, DSL\"",
        "schema": "CREATE TABLE Web_client_accelerator (Connection TEXT, Operating_system TEXT, name TEXT);"
      },
      {
        "question": "What is the market share of Safari?",
        "query": "SELECT market_share FROM browser WHERE name = \"Safari\"",
        "schema": "CREATE TABLE browser (market_share NUMBER, id NUMBER, name TEXT); CREATE TABLE Web_client_accelerator (Connection TEXT, Operating_system TEXT, Client TEXT, name TEXT);"
      },
      {
        "question": "Since which year has CProxy been compatible?",
        "query": "SELECT t2.compatible_since_year FROM web_client_accelerator AS t1 JOIN accelerator_compatible_browser AS t2 ON t1.id = t2.accelerator_id WHERE t1.name = \"CProxy\"",
        "schema": "CREATE TABLE Web_client_accelerator (id NUMBER, Connection TEXT, Operating_system TEXT, name TEXT, Client TEXT); CREATE TABLE accelerator_compatible_browser (browser_id NUMBER, compatible_since_year NUMBER, accelerator_id NUMBER); CREATE TABLE browser (id NUMBER, market_share NUMBER, name TEXT);"
      },
      {
        "question": "What is the total number of browsers are available?",
        "query": "SELECT COUNT ( * ) FROM browser",
        "schema": "CREATE TABLE accelerator_compatible_browser (browser_id NUMBER, accelerator_id NUMBER, compatible_since_year NUMBER); CREATE TABLE Web_client_accelerator (Connection TEXT, Operating_system TEXT, name TEXT, Client TEXT, id NUMBER); CREATE TABLE browser (id NUMBER, name TEXT, market_share NUMBER);"
      },
      {
        "question": "what are their names?",
        "query": "SELECT name FROM browser",
        "schema": "CREATE TABLE accelerator_compatible_browser (accelerator_id NUMBER, compatible_since_year NUMBER, browser_id NUMBER); CREATE TABLE browser (market_share NUMBER, id NUMBER, name TEXT); CREATE TABLE Web_client_accelerator (id NUMBER, Connection TEXT, Client TEXT, Operating_system TEXT, name TEXT);"
      }
    ],
    [
      {
        "question": "what is the Id of the browser that is compatible with most web accelerators?",
        "query": "SELECT t1.id FROM browser AS t1 JOIN accelerator_compatible_browser AS t2 ON t1.id = t2.browser_id GROUP BY t1.id ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE browser (id NUMBER, name TEXT); CREATE TABLE Web_client_accelerator (name TEXT, id NUMBER); CREATE TABLE accelerator_compatible_browser (accelerator_id NUMBER, browser_id NUMBER);"
      },
      {
        "question": "What is the name of browser with id 1?",
        "query": "SELECT name FROM browser WHERE id = 1",
        "schema": "CREATE TABLE browser (id NUMBER, name TEXT); CREATE TABLE Web_client_accelerator (id NUMBER, name TEXT); CREATE TABLE accelerator_compatible_browser (browser_id NUMBER, accelerator_id NUMBER);"
      },
      {
        "question": "What is the name of the browser with the second largest market share?",
        "query": "SELECT name FROM browser ORDER BY market_share LIMIT 2",
        "schema": "CREATE TABLE browser (id NUMBER, market_share NUMBER, name TEXT); CREATE TABLE accelerator_compatible_browser (browser_id NUMBER, accelerator_id NUMBER); CREATE TABLE Web_client_accelerator (id NUMBER, name TEXT);"
      },
      {
        "question": "* I have left the chat *",
        "query": "SELECT t1.name FROM browser AS t1 JOIN accelerator_compatible_browser AS t2 ON t1.id = t2.browser_id ORDER BY compatible_since_year ASC LIMIT 1",
        "schema": "CREATE TABLE browser (id NUMBER, name TEXT, market_share NUMBER); CREATE TABLE accelerator_compatible_browser (accelerator_id NUMBER, compatible_since_year NUMBER, browser_id NUMBER); CREATE TABLE Web_client_accelerator (id NUMBER, name TEXT, Connection TEXT);"
      }
    ],
    [
      {
        "question": "Can you tell me the names of all compatible browsers and accelerators?",
        "query": "SELECT t2.name , t3.name FROM accelerator_compatible_browser AS t1 JOIN browser AS t2 ON t1.browser_id = t2.id JOIN web_client_accelerator AS t3 ON t1.accelerator_id = t3.id",
        "schema": "CREATE TABLE browser (id NUMBER, name TEXT); CREATE TABLE accelerator_compatible_browser (accelerator_id NUMBER, browser_id NUMBER); CREATE TABLE Web_client_accelerator (id NUMBER, name TEXT);"
      },
      {
        "question": "Can you also show their compatible years?",
        "query": "SELECT t2.name , t3.name, t1.compatible_since_year FROM accelerator_compatible_browser AS t1 JOIN browser AS t2 ON t1.browser_id = t2.id JOIN web_client_accelerator AS t3 ON t1.accelerator_id = t3.id",
        "schema": "CREATE TABLE accelerator_compatible_browser (compatible_since_year NUMBER, accelerator_id NUMBER, browser_id NUMBER); CREATE TABLE Web_client_accelerator (Client TEXT, id NUMBER, name TEXT); CREATE TABLE browser (id NUMBER, name TEXT);"
      },
      {
        "question": "Hmm, can you list the names of all compatible browsers and accelerators in the descending order of compatible year?",
        "query": "SELECT t2.name , t3.name FROM accelerator_compatible_browser AS t1 JOIN browser AS t2 ON t1.browser_id = t2.id JOIN web_client_accelerator AS t3 ON t1.accelerator_id = t3.id ORDER BY t1.compatible_since_year DESC",
        "schema": "CREATE TABLE accelerator_compatible_browser (accelerator_id NUMBER, browser_id NUMBER, compatible_since_year NUMBER); CREATE TABLE Web_client_accelerator (name TEXT, id NUMBER, Client TEXT); CREATE TABLE browser (name TEXT, id NUMBER);"
      }
    ],
    [
      {
        "question": "What distinct accelerator names are compatible with Firefox.",
        "query": "SELECT DISTINCT t1.name FROM web_client_accelerator AS t1 JOIN accelerator_compatible_browser AS t2 ON t2.accelerator_id = t1.id JOIN browser AS t3 ON t2.browser_id = t3.id WHERE t3.name = \"Firefox\"",
        "schema": "CREATE TABLE accelerator_compatible_browser (accelerator_id NUMBER, browser_id NUMBER); CREATE TABLE browser (name TEXT, id NUMBER); CREATE TABLE Web_client_accelerator (id NUMBER, name TEXT, Client TEXT);"
      },
      {
        "question": "What distinct accelerator names are compatible with the browsers that have a market share higher than 15.",
        "query": "SELECT DISTINCT t1.name FROM web_client_accelerator AS t1 JOIN accelerator_compatible_browser AS t2 ON t2.accelerator_id = t1.id JOIN browser AS t3 ON t2.browser_id = t3.id WHERE t3.market_share > 15",
        "schema": "CREATE TABLE browser (market_share NUMBER, name TEXT, id NUMBER); CREATE TABLE Web_client_accelerator (Client TEXT, id NUMBER, name TEXT); CREATE TABLE accelerator_compatible_browser (browser_id NUMBER, accelerator_id NUMBER);"
      },
      {
        "question": "What distinct accelerator names have been compatible since at least 1996.",
        "query": "SELECT DISTINCT t2.name FROM accelerator_compatible_browser AS t1 JOIN web_client_accelerator AS t2 ON t1.accelerator_id = t2.id WHERE compatible_since_year > = 1996",
        "schema": "CREATE TABLE Web_client_accelerator (Client TEXT, name TEXT, id NUMBER); CREATE TABLE accelerator_compatible_browser (accelerator_id NUMBER, browser_id NUMBER, compatible_since_year NUMBER); CREATE TABLE browser (market_share NUMBER, name TEXT, id NUMBER);"
      },
      {
        "question": "Out of these accelerators which are compatible with browsers that have a market share higher than 25.",
        "query": "SELECT DISTINCT t2.name FROM accelerator_compatible_browser AS t1 JOIN web_client_accelerator AS t2 ON t1.accelerator_id = t2.id JOIN browser AS t3 ON t3.id = t1.browser_id WHERE t1.compatible_since_year > = 1996 AND t3.market_share > 25",
        "schema": "CREATE TABLE browser (id NUMBER, market_share NUMBER, name TEXT); CREATE TABLE Web_client_accelerator (id NUMBER, name TEXT, Client TEXT); CREATE TABLE accelerator_compatible_browser (browser_id NUMBER, accelerator_id NUMBER, compatible_since_year NUMBER);"
      }
    ]
  ],
  "sports_competition": [
    [
      {
        "question": "Show me the names of all clubs?",
        "query": "SELECT name FROM club",
        "schema": "CREATE TABLE club_rank (Club_ID NUMBER); CREATE TABLE player (name TEXT, Club_ID NUMBER); CREATE TABLE club (name TEXT, Club_ID NUMBER);"
      },
      {
        "question": "Show me the name of the club that has the id number 3 ?",
        "query": "SELECT name FROM club WHERE club_id = '3'",
        "schema": "CREATE TABLE player (name TEXT, Club_ID NUMBER); CREATE TABLE club (name TEXT, Club_ID NUMBER); CREATE TABLE club_rank (Club_ID NUMBER);"
      },
      {
        "question": "Show me the region of the club BK Slide?",
        "query": "SELECT region FROM club WHERE name = 'BK Slide'",
        "schema": "CREATE TABLE club_rank (Club_ID NUMBER); CREATE TABLE competition (Country TEXT); CREATE TABLE club (name TEXT, Club_ID NUMBER, Region TEXT); CREATE TABLE player (name TEXT, Club_ID NUMBER);"
      },
      {
        "question": "Show me the names of the clubs that do not have any players?",
        "query": "SELECT name FROM club WHERE club_id NOT IN ( SELECT club_id FROM player )",
        "schema": "CREATE TABLE player (name TEXT, Club_ID NUMBER); CREATE TABLE club (name TEXT, Club_ID NUMBER, Region TEXT); CREATE TABLE club_rank (Club_ID NUMBER); CREATE TABLE competition (Country TEXT);"
      }
    ],
    [
      {
        "question": "WHich country had the most competitions?",
        "query": "SELECT country FROM competition GROUP BY country ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE competition (Competition_type TEXT, Year NUMBER, Competition_ID NUMBER, Country TEXT); CREATE TABLE competition_result (Competition_ID NUMBER);"
      },
      {
        "question": "What year did most competitions occur?",
        "query": "SELECT YEAR FROM competition GROUP BY YEAR ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE competition (Competition_ID NUMBER, Country TEXT, Competition_type TEXT, Year NUMBER); CREATE TABLE competition_result (Competition_ID NUMBER);"
      },
      {
        "question": "What about the most common type?",
        "query": "SELECT competition_type FROM competition GROUP BY competition_type ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE competition_result (Competition_ID NUMBER); CREATE TABLE competition (Competition_type TEXT, Year NUMBER, Competition_ID NUMBER, Country TEXT);"
      }
    ],
    [
      {
        "question": "How many clubs have players with the position \"Right Wing\"?",
        "query": "SELECT COUNT ( * ) FROM club AS t1 JOIN player AS t2 ON t1.club_id = t2.club_id WHERE t2.position = \"Right Wing\"",
        "schema": "CREATE TABLE club (name TEXT, Club_ID NUMBER); CREATE TABLE competition_result (Club_ID_1 NUMBER, Club_ID_2 NUMBER); CREATE TABLE club_rank (Club_ID NUMBER); CREATE TABLE player (Club_ID NUMBER, Player_ID NUMBER, Position TEXT);"
      },
      {
        "question": "How many total players are there?",
        "query": "SELECT COUNT ( * ) FROM player",
        "schema": "CREATE TABLE club (name TEXT, Club_ID NUMBER); CREATE TABLE club_rank (Club_ID NUMBER, Total NUMBER); CREATE TABLE player (name TEXT, Position TEXT, Player_ID NUMBER, Club_ID NUMBER); CREATE TABLE competition_result (Club_ID_2 NUMBER, Club_ID_1 NUMBER);"
      },
      {
        "question": "Can you list all the players?",
        "query": "SELECT * FROM player",
        "schema": "CREATE TABLE club_rank (Club_ID NUMBER, Total NUMBER); CREATE TABLE competition_result (Club_ID_2 NUMBER, Club_ID_1 NUMBER); CREATE TABLE player (Club_ID NUMBER, name TEXT, Player_ID NUMBER, Position TEXT); CREATE TABLE club (name TEXT, Club_ID NUMBER);"
      },
      {
        "question": "How many positions are there in total?",
        "query": "SELECT COUNT ( DISTINCT POSITION ) FROM player",
        "schema": "CREATE TABLE club_rank (Club_ID NUMBER, Total NUMBER); CREATE TABLE player (name TEXT, Position TEXT, Player_ID NUMBER, Club_ID NUMBER); CREATE TABLE club (Club_ID NUMBER, name TEXT); CREATE TABLE competition_result (Club_ID_2 NUMBER, Club_ID_1 NUMBER);"
      }
    ],
    [
      {
        "question": "Can you show me the club names and ids?",
        "query": "SELECT name, club_id FROM club",
        "schema": "CREATE TABLE club_rank (Club_ID NUMBER); CREATE TABLE club (Club_ID NUMBER, name TEXT); CREATE TABLE competition_result (Club_ID_1 NUMBER); CREATE TABLE player (Player_ID NUMBER, name TEXT, Club_ID NUMBER);"
      },
      {
        "question": "Hmm, I want to know the player ids, names and their club ids.",
        "query": "SELECT player_id, name, club_id FROM player",
        "schema": "CREATE TABLE player (name TEXT, Club_ID NUMBER, Player_ID NUMBER); CREATE TABLE club (Club_ID NUMBER, name TEXT); CREATE TABLE club_rank (Club_ID NUMBER); CREATE TABLE competition_result (Club_ID_1 NUMBER);"
      },
      {
        "question": "Please list the names of those clubs that do not have any players.",
        "query": "SELECT name FROM club WHERE club_id NOT IN ( SELECT club_id FROM player )",
        "schema": "CREATE TABLE player (Player_ID NUMBER, name TEXT, Club_ID NUMBER); CREATE TABLE competition_result (Club_ID_1 NUMBER); CREATE TABLE club_rank (Club_ID NUMBER); CREATE TABLE club (Club_ID NUMBER, name TEXT);"
      }
    ],
    [
      {
        "question": "What are the names of players who get more than the average points?",
        "query": "SELECT name FROM player WHERE points > ( SELECT AVG ( points ) FROM player )",
        "schema": "CREATE TABLE player (Points NUMBER, Player_ID NUMBER, name TEXT);"
      },
      {
        "question": "Give me the name of player with the most points",
        "query": "SELECT name FROM player WHERE points = ( SELECT MAX ( points ) FROM player )",
        "schema": "CREATE TABLE player (Points NUMBER, name TEXT, Player_ID NUMBER);"
      },
      {
        "question": "Which players scored highest? Give me names | Do you mean the names of player with the most points? | Yes",
        "query": "SELECT name FROM player WHERE points = ( SELECT MAX ( points ) FROM player )",
        "schema": "CREATE TABLE player (Points NUMBER, name TEXT, Player_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What year did the IFG Club form?",
        "query": "SELECT t1.start_year FROM club AS t1 JOIN player AS t2 ON t1.club_id = t2.club_id WHERE t1.name = \"IFG\"",
        "schema": "CREATE TABLE club_rank (Club_ID NUMBER); CREATE TABLE player (Club_ID NUMBER); CREATE TABLE competition (Year NUMBER); CREATE TABLE club (name TEXT, Start_year TEXT, Club_ID NUMBER);"
      },
      {
        "question": "And the club with the name \"AIB\"",
        "query": "SELECT DISTINCT t1.start_year FROM club AS t1 JOIN player AS t2 ON t1.club_id = t2.club_id WHERE t1.name = \"AIB\"",
        "schema": "CREATE TABLE player (Club_ID NUMBER, name TEXT, Player_ID NUMBER); CREATE TABLE competition (Year NUMBER); CREATE TABLE club_rank (Club_ID NUMBER); CREATE TABLE club (Start_year TEXT, Club_ID NUMBER, name TEXT);"
      },
      {
        "question": "What is the position of the player \"Michael Platt\"?",
        "query": "SELECT t2.position FROM club AS t1 JOIN player AS t2 ON t1.club_id = t2.club_id WHERE t2.name = \"Michael Platt\"",
        "schema": "CREATE TABLE competition (Year NUMBER); CREATE TABLE player (Position TEXT, Club_ID NUMBER, name TEXT, Player_ID NUMBER); CREATE TABLE club_rank (Club_ID NUMBER); CREATE TABLE club (name TEXT, Start_year TEXT, Club_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Find the countries that have never participated in any competition with Friendly type",
        "query": "SELECT country FROM competition EXCEPT SELECT country FROM competition WHERE competition_type = 'Friendly'",
        "schema": "CREATE TABLE competition (Country TEXT, Competition_type TEXT, Competition_ID NUMBER); CREATE TABLE club (Club_ID NUMBER); CREATE TABLE competition_result (Competition_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show me all the types of competitions?",
        "query": "SELECT DISTINCT ( competition_type ) FROM competition",
        "schema": "CREATE TABLE club (Club_ID NUMBER); CREATE TABLE competition (Competition_ID NUMBER, Competition_type TEXT);"
      },
      {
        "question": "show me the types of competition that have atleast five competition of that type",
        "query": "SELECT competition_type FROM competition GROUP BY competition_type HAVING COUNT ( * ) > = 5",
        "schema": "CREATE TABLE competition (Competition_type TEXT, Competition_ID NUMBER, Year NUMBER); CREATE TABLE club (Club_ID NUMBER);"
      },
      {
        "question": "show me the types of competition that has at most competitions of that type",
        "query": "SELECT competition_type FROM competition GROUP BY competition_type HAVING COUNT ( * ) < = 5",
        "schema": "CREATE TABLE club (Club_ID NUMBER); CREATE TABLE competition (Year NUMBER, Competition_ID NUMBER, Competition_type TEXT);"
      }
    ],
    [
      {
        "question": "What is the name of the country that participated in the greatest number of tournaments?",
        "query": "SELECT country FROM competition WHERE competition_type = 'Tournament' GROUP BY country ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE competition_result (Competition_ID NUMBER); CREATE TABLE competition (Competition_ID NUMBER, Competition_type TEXT, Country TEXT, Year NUMBER); CREATE TABLE club (Club_ID NUMBER); CREATE TABLE player (name TEXT);"
      },
      {
        "question": "What about the name of the country that participated in the least number of tournaments?",
        "query": "SELECT country FROM competition WHERE competition_type = 'Tournament' GROUP BY country ORDER BY COUNT ( * ) ASC LIMIT 1",
        "schema": "CREATE TABLE player (name TEXT); CREATE TABLE competition (Competition_type TEXT, Year NUMBER, Competition_ID NUMBER, Country TEXT); CREATE TABLE club (Club_ID NUMBER); CREATE TABLE competition_result (Competition_ID NUMBER);"
      },
      {
        "question": "What were the competition types of all the competitions Russia participated in?",
        "query": "SELECT competition_type FROM competition WHERE country = \"Russia\"",
        "schema": "CREATE TABLE competition (Year NUMBER, Country TEXT, Competition_type TEXT, Competition_ID NUMBER); CREATE TABLE competition_result (Competition_ID NUMBER); CREATE TABLE player (name TEXT); CREATE TABLE club (Club_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Who scored more than 20 points?",
        "query": "SELECT * FROM player WHERE points > 20",
        "schema": "CREATE TABLE player (Tries NUMBER, name TEXT, Player_ID NUMBER, Points NUMBER); CREATE TABLE club_rank (Total NUMBER); CREATE TABLE club (Club_ID NUMBER); CREATE TABLE competition (Competition_ID NUMBER); CREATE TABLE competition_result (Competition_ID NUMBER, Score TEXT);"
      },
      {
        "question": "And what positions did those players play?",
        "query": "SELECT POSITION FROM player WHERE points > 20",
        "schema": "CREATE TABLE competition (Competition_ID NUMBER); CREATE TABLE player (Tries NUMBER, Points NUMBER, name TEXT, Position TEXT, Player_ID NUMBER); CREATE TABLE competition_result (Competition_ID NUMBER, Score TEXT); CREATE TABLE club_rank (Total NUMBER); CREATE TABLE club (Club_ID NUMBER);"
      },
      {
        "question": "What are their names?",
        "query": "SELECT name FROM player WHERE points > 20",
        "schema": "CREATE TABLE player (Position TEXT, Player_ID NUMBER, Points NUMBER, Tries NUMBER, name TEXT); CREATE TABLE competition (Competition_ID NUMBER); CREATE TABLE competition_result (Competition_ID NUMBER, Score TEXT); CREATE TABLE club_rank (Total NUMBER); CREATE TABLE club (name TEXT, Club_ID NUMBER);"
      },
      {
        "question": "And who scored the highest points out of them?",
        "query": "SELECT name FROM player WHERE points = ( SELECT MAX ( points ) FROM player )",
        "schema": "CREATE TABLE club (Club_ID NUMBER, name TEXT); CREATE TABLE club_rank (Total NUMBER); CREATE TABLE competition (Competition_ID NUMBER); CREATE TABLE competition_result (Score TEXT, Competition_ID NUMBER); CREATE TABLE player (Player_ID NUMBER, Points NUMBER, Tries NUMBER, Position TEXT, name TEXT);"
      }
    ],
    [
      {
        "question": "what are the name of the countries who have participated in both the friendly and tournament type competitions",
        "query": "SELECT country FROM competition WHERE competition_type = 'Friendly' INTERSECT SELECT country FROM competition WHERE competition_type = 'Tournament'",
        "schema": "CREATE TABLE competition_result (Competition_ID NUMBER); CREATE TABLE player (name TEXT); CREATE TABLE competition (Country TEXT, Competition_ID NUMBER, Competition_type TEXT); CREATE TABLE club (Region TEXT, Club_ID NUMBER);"
      },
      {
        "question": "what is the competition id of the country | Can you clarify? The competition id is not unique to a country. | list all the competition id for russia",
        "query": "SELECT competition_id FROM competition WHERE country = \"Russia\"",
        "schema": "CREATE TABLE competition_result (Competition_ID NUMBER); CREATE TABLE club (Club_ID NUMBER, Region TEXT); CREATE TABLE competition (Competition_ID NUMBER, Competition_type TEXT, Country TEXT); CREATE TABLE player (name TEXT);"
      },
      {
        "question": "include the year in the table",
        "query": "SELECT competition_id, YEAR FROM competition WHERE country = \"Russia\"",
        "schema": "CREATE TABLE club (Club_ID NUMBER, Region TEXT); CREATE TABLE competition_result (Competition_ID NUMBER); CREATE TABLE competition (Competition_ID NUMBER, Competition_type TEXT, Year NUMBER, Country TEXT); CREATE TABLE player (name TEXT);"
      }
    ],
    [
      {
        "question": "What countries have not participated in any competition with Friendly type?",
        "query": "SELECT country FROM competition EXCEPT SELECT country FROM competition WHERE competition_type = 'Friendly'",
        "schema": "CREATE TABLE club (Club_ID NUMBER); CREATE TABLE competition (Competition_type TEXT, Country TEXT, Competition_ID NUMBER); CREATE TABLE competition_result (Competition_ID NUMBER);"
      },
      {
        "question": "How many countries have not participated in competitions with friendly types?",
        "query": "SELECT COUNT ( * ) FROM ( SELECT country FROM competition EXCEPT SELECT country FROM competition WHERE competition_type = 'Friendly' )",
        "schema": "CREATE TABLE competition_result (Competition_ID NUMBER); CREATE TABLE club (Club_ID NUMBER); CREATE TABLE competition (Country TEXT, Competition_ID NUMBER, Competition_type TEXT);"
      }
    ]
  ],
  "news_report": [
    [
      {
        "question": "What is the total number of journalists?",
        "query": "SELECT COUNT ( * ) FROM journalist",
        "schema": "CREATE TABLE event (Event_ID NUMBER); CREATE TABLE news_report (journalist_ID NUMBER); CREATE TABLE journalist (Age TEXT, Name TEXT, journalist_ID NUMBER);"
      },
      {
        "question": "How many journalists have worked for more than 5 years?",
        "query": "SELECT COUNT ( * ) FROM journalist WHERE years_working > 5",
        "schema": "CREATE TABLE news_report (journalist_ID NUMBER); CREATE TABLE journalist (Age TEXT, journalist_ID NUMBER, Name TEXT, Years_working NUMBER); CREATE TABLE event (Event_ID NUMBER);"
      },
      {
        "question": "What is the name of the journalist who has worked longest?",
        "query": "SELECT name FROM journalist ORDER BY years_working DESC LIMIT 1",
        "schema": "CREATE TABLE journalist (journalist_ID NUMBER, Name TEXT, Age TEXT, Years_working NUMBER); CREATE TABLE event (Event_ID NUMBER); CREATE TABLE news_report (journalist_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Could you please tell me all the names of the journalists?",
        "query": "SELECT name FROM journalist",
        "schema": "CREATE TABLE journalist (journalist_ID NUMBER, Name TEXT);"
      },
      {
        "question": "What are the names of the events they reported?",
        "query": "SELECT t3.name , t2.name FROM news_report AS t1 JOIN event AS t2 ON t1.event_id = t2.event_id JOIN journalist AS t3 ON t1.journalist_id = t3.journalist_id",
        "schema": "CREATE TABLE event (Event_Attendance NUMBER, Event_ID NUMBER, Name TEXT); CREATE TABLE journalist (Name TEXT, journalist_ID NUMBER); CREATE TABLE news_report (journalist_ID NUMBER, Event_ID NUMBER);"
      },
      {
        "question": "Could you please organize those in ascending order?",
        "query": "SELECT t3.name , t2.name FROM news_report AS t1 JOIN event AS t2 ON t1.event_id = t2.event_id JOIN journalist AS t3 ON t1.journalist_id = t3.journalist_id ORDER BY t2.event_attendance ASC",
        "schema": "CREATE TABLE news_report (journalist_ID NUMBER, Event_ID NUMBER); CREATE TABLE event (Event_ID NUMBER, Name TEXT, Event_Attendance NUMBER); CREATE TABLE journalist (Name TEXT, journalist_ID NUMBER);"
      },
      {
        "question": "What work type do those journalists do?",
        "query": "SELECT t3.name , t1.work_type FROM news_report AS t1 JOIN event AS t2 ON t1.event_id = t2.event_id JOIN journalist AS t3 ON t1.journalist_id = t3.journalist_id",
        "schema": "CREATE TABLE journalist (journalist_ID NUMBER, Name TEXT); CREATE TABLE event (Event_Attendance NUMBER, Event_ID NUMBER, Name TEXT); CREATE TABLE news_report (journalist_ID NUMBER, Event_ID NUMBER, Work_Type TEXT);"
      },
      {
        "question": "How many years have they each been working, please?",
        "query": "SELECT name,years_working FROM journalist",
        "schema": "CREATE TABLE event (Event_ID NUMBER, Event_Attendance NUMBER, Date TEXT, Name TEXT); CREATE TABLE journalist (Years_working NUMBER, Name TEXT, journalist_ID NUMBER); CREATE TABLE news_report (journalist_ID NUMBER, Work_Type TEXT, Event_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What is the average attendance of all events?",
        "query": "SELECT AVG ( event_attendance ) FROM event",
        "schema": "CREATE TABLE event (Name TEXT, Event_Attendance NUMBER, Event_ID NUMBER);"
      },
      {
        "question": "What is the maximum attendance of all events?",
        "query": "SELECT MAX ( event_attendance ) FROM event",
        "schema": "CREATE TABLE event (Name TEXT, Event_ID NUMBER, Event_Attendance NUMBER);"
      },
      {
        "question": "What is the minimum attendance of all events?",
        "query": "SELECT MIN ( event_attendance ) FROM event",
        "schema": "CREATE TABLE event (Name TEXT, Event_Attendance NUMBER, Event_ID NUMBER);"
      }
    ],
    [
      {
        "question": "show me the journalists from England | Do you want their names? | Yes, I do",
        "query": "SELECT name FROM journalist WHERE nationality = \"England\"",
        "schema": "CREATE TABLE journalist (Name TEXT, journalist_ID NUMBER, Nationality TEXT);"
      },
      {
        "question": "and from Wales too",
        "query": "SELECT name FROM journalist WHERE nationality = \"England\" OR nationality = \"Wales\"",
        "schema": "CREATE TABLE journalist (journalist_ID NUMBER, Name TEXT, Nationality TEXT);"
      },
      {
        "question": "How many journalists are from England or Wales ?",
        "query": "SELECT COUNT ( * ) FROM journalist WHERE nationality = \"England\" OR nationality = \"Wales\"",
        "schema": "CREATE TABLE journalist (journalist_ID NUMBER, Nationality TEXT, Name TEXT);"
      },
      {
        "question": "Can you show me their names ?",
        "query": "SELECT name FROM journalist WHERE nationality = \"England\" OR nationality = \"Wales\"",
        "schema": "CREATE TABLE journalist (Name TEXT, Nationality TEXT, journalist_ID NUMBER);"
      },
      {
        "question": "How many journalists from England have worked for over an year ?",
        "query": "SELECT COUNT ( * ) FROM journalist WHERE nationality = \"England\" AND years_working > 1",
        "schema": "CREATE TABLE journalist (journalist_ID NUMBER, Age TEXT, Nationality TEXT, Name TEXT, Years_working NUMBER);"
      },
      {
        "question": "What about Wales ?",
        "query": "SELECT COUNT ( * ) FROM journalist WHERE nationality = \"Wales\" AND years_working > 1",
        "schema": "CREATE TABLE journalist (Name TEXT, Nationality TEXT, Years_working NUMBER, journalist_ID NUMBER, Age TEXT);"
      },
      {
        "question": "Can you show me the names of those journalists ? | Do you mean the journalists from Wales and England who have worked for over a year? | Yes",
        "query": "SELECT name FROM journalist WHERE nationality = \"Wales\" AND years_working > 1 UNION SELECT name FROM journalist WHERE nationality = \"England\" AND years_working > 1",
        "schema": "CREATE TABLE journalist (Age TEXT, Years_working NUMBER, Name TEXT, Nationality TEXT, journalist_ID NUMBER);"
      }
    ],
    [
      {
        "question": "how many journalist there",
        "query": "SELECT COUNT ( * ) FROM journalist",
        "schema": "CREATE TABLE journalist (Age TEXT, journalist_ID NUMBER, Years_working NUMBER, Name TEXT); CREATE TABLE news_report (journalist_ID NUMBER, Event_ID NUMBER); CREATE TABLE event (Event_ID NUMBER);"
      },
      {
        "question": "what is the Nationality of Herbert Swindells",
        "query": "SELECT nationality FROM journalist WHERE name = \"Herbert Swindells\"",
        "schema": "CREATE TABLE news_report (Event_ID NUMBER, journalist_ID NUMBER); CREATE TABLE journalist (journalist_ID NUMBER, Age TEXT, Years_working NUMBER, Nationality TEXT, Name TEXT); CREATE TABLE event (Event_ID NUMBER);"
      },
      {
        "question": "what is the age of George Gilchrist",
        "query": "SELECT age FROM journalist WHERE name = \"George Gilchrist\"",
        "schema": "CREATE TABLE journalist (Name TEXT, journalist_ID NUMBER, Nationality TEXT, Years_working NUMBER, Age TEXT); CREATE TABLE news_report (Event_ID NUMBER, journalist_ID NUMBER); CREATE TABLE event (Event_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show me the names of journalists",
        "query": "SELECT name FROM journalist",
        "schema": "CREATE TABLE journalist (journalist_ID NUMBER, Name TEXT);"
      },
      {
        "question": "Show me the events they reported | which columuns to return | date",
        "query": "SELECT t1.event_id,t1.date FROM event AS t1 JOIN news_report AS t2 ON t1.event_id = t2.event_id",
        "schema": "CREATE TABLE event (Date TEXT, Event_Attendance NUMBER, Name TEXT, Event_ID NUMBER); CREATE TABLE news_report (journalist_ID NUMBER, Event_ID NUMBER); CREATE TABLE journalist (Name TEXT, journalist_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Can you please list the names of the journalists in a table with the number of events they each reported?",
        "query": "SELECT t3.name , COUNT ( * ) FROM news_report AS t1 JOIN event AS t2 ON t1.event_id = t2.event_id JOIN journalist AS t3 ON t1.journalist_id = t3.journalist_id GROUP BY t3.name",
        "schema": "CREATE TABLE journalist (journalist_ID NUMBER, Name TEXT); CREATE TABLE news_report (journalist_ID NUMBER, Event_ID NUMBER); CREATE TABLE event (Event_Attendance NUMBER, Event_ID NUMBER, Name TEXT);"
      },
      {
        "question": "Can you add their ages and nationalities to the table please?",
        "query": "SELECT t3.name , t3.age, t3.nationality, COUNT ( * ) FROM news_report AS t1 JOIN event AS t2 ON t1.event_id = t2.event_id JOIN journalist AS t3 ON t1.journalist_id = t3.journalist_id GROUP BY t3.name",
        "schema": "CREATE TABLE news_report (Event_ID NUMBER, journalist_ID NUMBER); CREATE TABLE event (Event_ID NUMBER, Event_Attendance NUMBER, Name TEXT); CREATE TABLE journalist (Name TEXT, Age TEXT, journalist_ID NUMBER, Nationality TEXT);"
      },
      {
        "question": "What is the name of the event that the oldest journalist reported on?",
        "query": "SELECT t3.name , t2.name FROM news_report AS t1 JOIN event AS t2 ON t1.event_id = t2.event_id JOIN journalist AS t3 ON t1.journalist_id = t3.journalist_id WHERE t3.age = ( SELECT MAX ( age ) FROM journalist )",
        "schema": "CREATE TABLE event (Event_ID NUMBER, Name TEXT, Event_Attendance NUMBER, Date TEXT); CREATE TABLE news_report (journalist_ID NUMBER, Event_ID NUMBER); CREATE TABLE journalist (journalist_ID NUMBER, Nationality TEXT, Age TEXT, Name TEXT);"
      }
    ],
    [
      {
        "question": "Hmm, interesting. What is the nationality of Jackie Waring? | Do you mean the journalist Jackie Waring? | Yes.",
        "query": "SELECT nationality FROM journalist WHERE name = \"Jackie Waring\"",
        "schema": "CREATE TABLE journalist (Nationality TEXT, Name TEXT, journalist_ID NUMBER);"
      },
      {
        "question": "What other Journalists have England as their nationality?",
        "query": "SELECT * FROM journalist WHERE name ! = \"Jackie Waring\" AND nationality = \"England\"",
        "schema": "CREATE TABLE journalist (Name TEXT, Nationality TEXT, journalist_ID NUMBER);"
      },
      {
        "question": "How old is Herbert Swindells?",
        "query": "SELECT age FROM journalist WHERE name = \"Herbert Swindells\"",
        "schema": "CREATE TABLE journalist (Age TEXT, Name TEXT, Nationality TEXT, journalist_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Hi, what journalist had worked the most amount of years?",
        "query": "SELECT journalist_id FROM journalist ORDER BY years_working DESC LIMIT 1",
        "schema": "CREATE TABLE journalist (Name TEXT, Years_working NUMBER, journalist_ID NUMBER, Age TEXT);"
      },
      {
        "question": "Which journalist has worked the 2nd most amount of years?",
        "query": "SELECT journalist_id FROM journalist WHERE journalist_id NOT IN ( SELECT journalist_id FROM journalist ORDER BY years_working DESC LIMIT 1 ) ORDER BY years_working DESC LIMIT 1",
        "schema": "CREATE TABLE journalist (Name TEXT, journalist_ID NUMBER, Years_working NUMBER, Age TEXT);"
      },
      {
        "question": "Thank you, for the journalist with the ID of 4, what is his name?",
        "query": "SELECT name FROM journalist WHERE journalist_id = 4",
        "schema": "CREATE TABLE journalist (Name TEXT, Years_working NUMBER, journalist_ID NUMBER, Age TEXT);"
      },
      {
        "question": "Wonderful! What is her nationality?",
        "query": "SELECT nationality FROM journalist WHERE journalist_id = 4",
        "schema": "CREATE TABLE journalist (journalist_ID NUMBER, Name TEXT, Years_working NUMBER, Nationality TEXT, Age TEXT);"
      },
      {
        "question": "Thank you! That's all I needed, but I'm also curious, how many journalists are from England?",
        "query": "SELECT COUNT ( journalist_id ) FROM journalist WHERE nationality = 'England'",
        "schema": "CREATE TABLE journalist (Nationality TEXT, Age TEXT, Name TEXT, Years_working NUMBER, journalist_ID NUMBER);"
      },
      {
        "question": "Which one has the least amount of years worked?",
        "query": "SELECT journalist_id FROM journalist WHERE nationality = 'England' ORDER BY years_working LIMIT 1",
        "schema": "CREATE TABLE journalist (Age TEXT, Nationality TEXT, Years_working NUMBER, Name TEXT, journalist_ID NUMBER);"
      },
      {
        "question": "Awesome, Im almost done, but can you tell me overall who worked the least amount of years as well?",
        "query": "SELECT journalist_id FROM journalist ORDER BY years_working LIMIT 1",
        "schema": "CREATE TABLE journalist (Name TEXT, Age TEXT, Nationality TEXT, Years_working NUMBER, journalist_ID NUMBER);"
      }
    ],
    [
      {
        "question": "how many journalist there",
        "query": "SELECT COUNT ( * ) FROM journalist",
        "schema": "CREATE TABLE news_report (journalist_ID NUMBER, Event_ID NUMBER); CREATE TABLE journalist (journalist_ID NUMBER, Years_working NUMBER, Name TEXT, Age TEXT); CREATE TABLE event (Event_ID NUMBER);"
      },
      {
        "question": "what is the name of journalist ID 2",
        "query": "SELECT name FROM journalist WHERE journalist_id = 2",
        "schema": "CREATE TABLE event (Event_ID NUMBER, Name TEXT); CREATE TABLE news_report (journalist_ID NUMBER, Event_ID NUMBER); CREATE TABLE journalist (Years_working NUMBER, Name TEXT, journalist_ID NUMBER, Age TEXT);"
      },
      {
        "question": "what is the nationality of journalist ID 1",
        "query": "SELECT nationality FROM journalist WHERE journalist_id = 1",
        "schema": "CREATE TABLE event (Event_ID NUMBER, Name TEXT); CREATE TABLE journalist (Nationality TEXT, Age TEXT, journalist_ID NUMBER, Name TEXT, Years_working NUMBER); CREATE TABLE news_report (journalist_ID NUMBER, Event_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show the journalists with more than 10 years of working.",
        "query": "SELECT * FROM journalist WHERE years_working > 10",
        "schema": "CREATE TABLE journalist (Age TEXT, Years_working NUMBER, journalist_ID NUMBER, Name TEXT); CREATE TABLE event (Event_ID NUMBER);"
      },
      {
        "question": "Show the name of journalists with more than 10 years of working and less than 3 years of working.",
        "query": "SELECT name FROM journalist WHERE years_working > 10 AND years_working < 3",
        "schema": "CREATE TABLE event (Event_ID NUMBER); CREATE TABLE journalist (Years_working NUMBER, journalist_ID NUMBER, Age TEXT, Name TEXT);"
      },
      {
        "question": "List the nations that have journalists with more than 10 years of working and journalists with less than 3 years of working.",
        "query": "SELECT nationality FROM journalist WHERE years_working > 10 INTERSECT SELECT nationality FROM journalist WHERE years_working < 3",
        "schema": "CREATE TABLE event (Event_ID NUMBER); CREATE TABLE journalist (journalist_ID NUMBER, Years_working NUMBER, Nationality TEXT, Name TEXT, Age TEXT);"
      },
      {
        "question": "What is the average years of working for journalists from England.",
        "query": "SELECT AVG ( years_working ) FROM journalist WHERE nationality = \"England\"",
        "schema": "CREATE TABLE journalist (journalist_ID NUMBER, Nationality TEXT, Name TEXT, Years_working NUMBER, Age TEXT); CREATE TABLE event (Event_ID NUMBER);"
      },
      {
        "question": "List the names of all journalists from England.",
        "query": "SELECT name FROM journalist WHERE nationality = \"England\"",
        "schema": "CREATE TABLE event (Event_ID NUMBER); CREATE TABLE journalist (Years_working NUMBER, journalist_ID NUMBER, Age TEXT, Nationality TEXT, Name TEXT);"
      },
      {
        "question": "What is the average age for all journalists from England.",
        "query": "SELECT AVG ( age ) FROM journalist WHERE nationality = \"England\"",
        "schema": "CREATE TABLE journalist (Age TEXT, journalist_ID NUMBER, Years_working NUMBER, Name TEXT, Nationality TEXT); CREATE TABLE event (Event_ID NUMBER);"
      }
    ],
    [
      {
        "question": "How many events are there?",
        "query": "SELECT COUNT ( * ) FROM event",
        "schema": "CREATE TABLE news_report (Event_ID NUMBER, journalist_ID NUMBER); CREATE TABLE journalist (Name TEXT, journalist_ID NUMBER); CREATE TABLE event (Event_Attendance NUMBER, Venue TEXT, Event_ID NUMBER, Name TEXT);"
      },
      {
        "question": "Can you list the ids of them by the numer of people attended? | Do you want to list them in ascending order or descending order? | Descending please",
        "query": "SELECT event_id FROM event ORDER BY event_attendance DESC",
        "schema": "CREATE TABLE event (Venue TEXT, Event_Attendance NUMBER, Event_ID NUMBER, Name TEXT); CREATE TABLE journalist (Name TEXT, journalist_ID NUMBER); CREATE TABLE news_report (Event_ID NUMBER, journalist_ID NUMBER);"
      },
      {
        "question": "Can you please also include their names and the number of peole attended?",
        "query": "SELECT event_id, event_attendance, name FROM event ORDER BY event_attendance DESC",
        "schema": "CREATE TABLE news_report (journalist_ID NUMBER, Event_ID NUMBER); CREATE TABLE event (Event_Attendance NUMBER, Name TEXT, Venue TEXT, Event_ID NUMBER); CREATE TABLE journalist (Name TEXT, journalist_ID NUMBER);"
      }
    ]
  ],
  "device": [
    [
      {
        "question": "how many locations have shops that opened before 2008?",
        "query": "SELECT COUNT ( LOCATION ) FROM shop WHERE open_year = '2008'",
        "schema": "CREATE TABLE shop (Shop_Name TEXT, Shop_ID NUMBER, Location TEXT, Open_Year NUMBER, Open_Date TEXT);"
      },
      {
        "question": "how many shops opened later than 2012?",
        "query": "SELECT COUNT ( LOCATION ) FROM shop WHERE open_year>'2012'",
        "schema": "CREATE TABLE shop (Shop_Name TEXT, Location TEXT, Open_Year NUMBER, Open_Date TEXT, Shop_ID NUMBER);"
      },
      {
        "question": "can you show the locations for those stores?",
        "query": "SELECT LOCATION FROM shop WHERE open_year>'2012'",
        "schema": "CREATE TABLE shop (Shop_ID NUMBER, Open_Year NUMBER, Open_Date TEXT, Location TEXT, Shop_Name TEXT);"
      }
    ],
    [
      {
        "question": "what are the shops? | Do you want the names of all the shops? | yes",
        "query": "SELECT shop_name FROM shop",
        "schema": "CREATE TABLE shop (Shop_ID NUMBER, Shop_Name TEXT, Location TEXT);"
      },
      {
        "question": "now show me the shop which have devices in stock",
        "query": "SELECT t2.shop_name FROM stock AS t1 JOIN shop AS t2 ON t1.shop_id = t2.shop_id GROUP BY t1.shop_id",
        "schema": "CREATE TABLE shop (Location TEXT, Shop_ID NUMBER, Shop_Name TEXT); CREATE TABLE stock (Shop_ID NUMBER);"
      },
      {
        "question": "now show me the shops that have more than one device in stock",
        "query": "SELECT t2.shop_name FROM stock AS t1 JOIN shop AS t2 ON t1.shop_id = t2.shop_id GROUP BY t1.shop_id HAVING COUNT ( * ) > 1",
        "schema": "CREATE TABLE shop (Location TEXT, Shop_Name TEXT, Shop_ID NUMBER); CREATE TABLE stock (Shop_ID NUMBER, Quantity NUMBER);"
      }
    ],
    [
      {
        "question": "List the software platform shared by the greatest number of devices.",
        "query": "SELECT software_platform FROM device GROUP BY software_platform ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE stock (Device_ID NUMBER, Quantity NUMBER); CREATE TABLE device (Software_Platform TEXT, Device_ID NUMBER);"
      },
      {
        "question": "How many devices from the list use the Android platform?",
        "query": "SELECT COUNT ( * ) FROM device WHERE software_platform = \"Android\"",
        "schema": "CREATE TABLE device (Software_Platform TEXT, Device_ID NUMBER, Device TEXT); CREATE TABLE stock (Device_ID NUMBER, Quantity NUMBER);"
      },
      {
        "question": "And how many devices from the list use the iOS platform?",
        "query": "SELECT COUNT ( * ) FROM device WHERE software_platform = \"iOS\"",
        "schema": "CREATE TABLE stock (Device_ID NUMBER, Quantity NUMBER); CREATE TABLE device (Software_Platform TEXT, Device TEXT, Device_ID NUMBER);"
      },
      {
        "question": "Could you please list the devices that use the Android platform?",
        "query": "SELECT device FROM device WHERE software_platform = \"Android\"",
        "schema": "CREATE TABLE device (Device_ID NUMBER, Software_Platform TEXT, Device TEXT); CREATE TABLE stock (Quantity NUMBER, Device_ID NUMBER);"
      },
      {
        "question": "How many different carriers are there on the list?",
        "query": "SELECT COUNT ( DISTINCT carrier ) FROM device",
        "schema": "CREATE TABLE device (Device_ID NUMBER, Device TEXT, Carrier TEXT, Software_Platform TEXT); CREATE TABLE stock (Device_ID NUMBER, Quantity NUMBER);"
      },
      {
        "question": "What is the carrier for the Samsung device?",
        "query": "SELECT carrier FROM device WHERE device = \"Samsung\"",
        "schema": "CREATE TABLE stock (Device_ID NUMBER, Quantity NUMBER); CREATE TABLE device (Device TEXT, Device_ID NUMBER, Software_Platform TEXT, Carrier TEXT);"
      }
    ],
    [
      {
        "question": "How many devices are in stock at \tDinas Device?",
        "query": "SELECT COUNT ( device_id ) FROM stock AS t1 JOIN shop AS t2 ON t1.shop_id = t2.shop_id WHERE shop_name = 'Dinas Device'",
        "schema": "CREATE TABLE device (Device TEXT, Device_ID NUMBER); CREATE TABLE stock (Shop_ID NUMBER, Device_ID NUMBER, Quantity NUMBER); CREATE TABLE shop (Location TEXT, Shop_Name TEXT, Shop_ID NUMBER);"
      },
      {
        "question": "How many devices are at Best Buy?",
        "query": "SELECT COUNT ( device_id ) FROM stock AS t1 JOIN shop AS t2 ON t1.shop_id = t2.shop_id WHERE shop_name = 'Best Buy'",
        "schema": "CREATE TABLE device (Device_ID NUMBER, Device TEXT); CREATE TABLE shop (Location TEXT, Shop_Name TEXT, Shop_ID NUMBER); CREATE TABLE stock (Quantity NUMBER, Device_ID NUMBER, Shop_ID NUMBER);"
      },
      {
        "question": "Show me the name of the shop that has the most devices in stock?",
        "query": "SELECT t2.shop_name FROM stock AS t1 JOIN shop AS t2 ON t1.shop_id = t2.shop_id GROUP BY t1.shop_id ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE device (Device TEXT, Device_ID NUMBER); CREATE TABLE stock (Shop_ID NUMBER, Device_ID NUMBER, Quantity NUMBER); CREATE TABLE shop (Location TEXT, Shop_ID NUMBER, Shop_Name TEXT);"
      },
      {
        "question": "Where are they located?",
        "query": "SELECT t2.shop_name,LOCATION FROM stock AS t1 JOIN shop AS t2 ON t1.shop_id = t2.shop_id GROUP BY t1.shop_id ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE device (Device TEXT, Device_ID NUMBER); CREATE TABLE stock (Shop_ID NUMBER, Device_ID NUMBER, Quantity NUMBER); CREATE TABLE shop (Location TEXT, Shop_Name TEXT, Shop_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Hello!  Can you show me a list of all of the shop names?",
        "query": "SELECT shop_name FROM shop",
        "schema": "CREATE TABLE shop (Shop_ID NUMBER, Shop_Name TEXT);"
      },
      {
        "question": "Beautiful!  Can you update this list to include the stock quantity for all of these shops?",
        "query": "SELECT t2.shop_name,t1.quantity FROM stock AS t1 JOIN shop AS t2 ON t1.shop_id = t2.shop_id",
        "schema": "CREATE TABLE shop (Shop_ID NUMBER, Shop_Name TEXT); CREATE TABLE stock (Shop_ID NUMBER, Quantity NUMBER);"
      },
      {
        "question": "Can you filter this list to show the name of the shop that has the largest quantity of stock, and please also display the quantity of stock?",
        "query": "SELECT t2.shop_name,t1.quantity FROM stock AS t1 JOIN shop AS t2 ON t1.shop_id = t2.shop_id GROUP BY t1.shop_id ORDER BY SUM ( t1.quantity ) DESC LIMIT 1",
        "schema": "CREATE TABLE stock (Shop_ID NUMBER, Quantity NUMBER); CREATE TABLE shop (Shop_Name TEXT, Shop_ID NUMBER);"
      }
    ],
    [
      {
        "question": "WHICH SHOP HAS THE LARGEST QUANTITY OF DEVICES IN STOCK",
        "query": "SELECT t2.shop_name FROM stock AS t1 JOIN shop AS t2 ON t1.shop_id = t2.shop_id GROUP BY t1.shop_id ORDER BY SUM ( t1.quantity ) DESC LIMIT 1",
        "schema": "CREATE TABLE device (Device_ID NUMBER); CREATE TABLE shop (Shop_ID NUMBER, Shop_Name TEXT); CREATE TABLE stock (Quantity NUMBER, Device_ID NUMBER, Shop_ID NUMBER);"
      },
      {
        "question": "WHAT IS THE LOCATION OF THIS SHOP",
        "query": "SELECT t2.location FROM stock AS t1 JOIN shop AS t2 ON t1.shop_id = t2.shop_id GROUP BY t1.shop_id ORDER BY SUM ( t1.quantity ) DESC LIMIT 1",
        "schema": "CREATE TABLE shop (Shop_ID NUMBER, Location TEXT, Shop_Name TEXT); CREATE TABLE stock (Device_ID NUMBER, Quantity NUMBER, Shop_ID NUMBER); CREATE TABLE device (Device_ID NUMBER);"
      },
      {
        "question": "WHAT IS THE SHOP ID | Do you mean the shop id for the shop that has the largest quantity of devices in stock? | YES",
        "query": "SELECT t2.shop_id FROM stock AS t1 JOIN shop AS t2 ON t1.shop_id = t2.shop_id GROUP BY t1.shop_id ORDER BY SUM ( t1.quantity ) DESC LIMIT 1",
        "schema": "CREATE TABLE device (Device_ID NUMBER); CREATE TABLE stock (Quantity NUMBER, Device_ID NUMBER, Shop_ID NUMBER); CREATE TABLE shop (Shop_Name TEXT, Shop_ID NUMBER, Location TEXT);"
      }
    ],
    [
      {
        "question": "Show me the open year of all shops in numerical order.",
        "query": "SELECT open_year FROM shop ORDER BY open_year",
        "schema": "CREATE TABLE shop (Shop_ID NUMBER, Open_Year NUMBER, Shop_Name TEXT, Open_Date TEXT);"
      },
      {
        "question": "Show the locations shared by shops.",
        "query": "SELECT LOCATION FROM shop GROUP BY LOCATION HAVING COUNT ( * ) > 1",
        "schema": "CREATE TABLE shop (Open_Year NUMBER, Open_Date TEXT, Shop_Name TEXT, Shop_ID NUMBER, Location TEXT);"
      },
      {
        "question": "Show the shops with open year later than 2012 and open year before 2008.",
        "query": "SELECT shop_name FROM shop WHERE open_year > 2012 OR open_year < 2008",
        "schema": "CREATE TABLE shop (Shop_ID NUMBER, Shop_Name TEXT, Location TEXT, Open_Date TEXT, Open_Year NUMBER);"
      }
    ]
  ],
  "e_learning": [
    [
      {
        "question": "What are the enrollment dates of all the tests that have result \"Pass\"?",
        "query": "SELECT t1.date_of_enrolment FROM student_course_enrolment AS t1 JOIN student_tests_taken AS t2 ON t1.registration_id = t2.registration_id WHERE t2.test_result = \"Pass\"",
        "schema": "CREATE TABLE Courses (course_id NUMBER); CREATE TABLE Student_Tests_Taken (test_result TEXT, registration_id NUMBER, date_test_taken TIME); CREATE TABLE Student_Course_Enrolment (student_id NUMBER, course_id NUMBER, registration_id NUMBER, date_of_completion TIME, date_of_enrolment TIME); CREATE TABLE Students (student_id NUMBER, date_of_registration TIME);"
      },
      {
        "question": "What are the student IDs of students who passed the test?",
        "query": "SELECT t1.student_id FROM student_course_enrolment AS t1 JOIN student_tests_taken AS t2 ON t1.registration_id = t2.registration_id WHERE t2.test_result = \"Pass\"",
        "schema": "CREATE TABLE Students (student_id NUMBER, date_of_registration TIME); CREATE TABLE Student_Course_Enrolment (date_of_enrolment TIME, student_id NUMBER, course_id NUMBER, registration_id NUMBER, date_of_completion TIME); CREATE TABLE Student_Tests_Taken (date_test_taken TIME, test_result TEXT, registration_id NUMBER); CREATE TABLE Courses (course_id NUMBER);"
      },
      {
        "question": "How many students passed the test?",
        "query": "SELECT COUNT ( t1.student_id ) FROM student_course_enrolment AS t1 JOIN student_tests_taken AS t2 ON t1.registration_id = t2.registration_id WHERE t2.test_result = \"Pass\"",
        "schema": "CREATE TABLE Student_Tests_Taken (registration_id NUMBER, test_result TEXT, date_test_taken TIME); CREATE TABLE Courses (course_id NUMBER); CREATE TABLE Student_Course_Enrolment (student_id NUMBER, course_id NUMBER, registration_id NUMBER, date_of_completion TIME, date_of_enrolment TIME); CREATE TABLE Students (student_id NUMBER, date_of_registration TIME);"
      }
    ],
    [
      {
        "question": "find the student id and personal name of the student whose course id is 2",
        "query": "SELECT t1.student_id , t2.personal_name FROM student_course_enrolment AS t1 JOIN students AS t2 ON t1.student_id = t2.student_id WHERE t1.course_id = '2'",
        "schema": "CREATE TABLE Course_Authors_and_Tutors (personal_name TEXT); CREATE TABLE Subjects (subject_id NUMBER); CREATE TABLE Courses (course_id NUMBER, course_name TEXT); CREATE TABLE Student_Course_Enrolment (registration_id NUMBER, student_id NUMBER, course_id NUMBER); CREATE TABLE Students (family_name TEXT, student_id NUMBER, personal_name TEXT);"
      },
      {
        "question": "show the date of registration for the student id 1",
        "query": "SELECT date_of_registration FROM students WHERE student_id = '1'",
        "schema": "CREATE TABLE Student_Tests_Taken (registration_id NUMBER); CREATE TABLE Courses (course_name TEXT, course_id NUMBER); CREATE TABLE Subjects (subject_id NUMBER); CREATE TABLE Student_Course_Enrolment (registration_id NUMBER, date_of_enrolment TIME, course_id NUMBER, date_of_completion TIME, student_id NUMBER); CREATE TABLE Students (student_id NUMBER, date_of_registration TIME, personal_name TEXT, family_name TEXT); CREATE TABLE Course_Authors_and_Tutors (personal_name TEXT);"
      },
      {
        "question": "show the login name and password for registration id  2",
        "query": "SELECT t1.login_name, t1.password FROM students AS t1 JOIN student_course_enrolment AS t2 ON t2.student_id = t1.student_id WHERE registration_id = 2",
        "schema": "CREATE TABLE Course_Authors_and_Tutors (login_name TEXT, personal_name TEXT); CREATE TABLE Subjects (subject_id NUMBER); CREATE TABLE Courses (course_id NUMBER, course_name TEXT); CREATE TABLE Students (family_name TEXT, date_of_registration TIME, personal_name TEXT, login_name TEXT, password TEXT, student_id NUMBER); CREATE TABLE Student_Tests_Taken (registration_id NUMBER); CREATE TABLE Student_Course_Enrolment (course_id NUMBER, date_of_completion TIME, student_id NUMBER, registration_id NUMBER, date_of_enrolment TIME);"
      }
    ],
    [
      {
        "question": "How many different student logins are there?",
        "query": "SELECT COUNT ( DISTINCT login_name ) FROM students",
        "schema": "CREATE TABLE Students (login_name TEXT, student_id NUMBER); CREATE TABLE Course_Authors_and_Tutors (author_id NUMBER, login_name TEXT); CREATE TABLE Student_Course_Enrolment (student_id NUMBER, course_id NUMBER); CREATE TABLE Courses (author_id NUMBER, course_id NUMBER);"
      },
      {
        "question": "how many different author logins are there?",
        "query": "SELECT COUNT ( DISTINCT login_name ) FROM course_authors_and_tutors",
        "schema": "CREATE TABLE Course_Authors_and_Tutors (personal_name TEXT, login_name TEXT, author_tutor_ATB TEXT, author_id NUMBER); CREATE TABLE Students (login_name TEXT, student_id NUMBER, personal_name TEXT); CREATE TABLE Courses (author_id NUMBER, course_id NUMBER); CREATE TABLE Student_Course_Enrolment (course_id NUMBER, student_id NUMBER);"
      },
      {
        "question": "How many login names are in both authors and students?",
        "query": "SELECT login_name FROM course_authors_and_tutors INTERSECT SELECT login_name FROM students",
        "schema": "CREATE TABLE Student_Course_Enrolment (course_id NUMBER, student_id NUMBER); CREATE TABLE Course_Authors_and_Tutors (login_name TEXT, family_name TEXT, personal_name TEXT, author_id NUMBER, author_tutor_ATB TEXT); CREATE TABLE Courses (course_id NUMBER, author_id NUMBER); CREATE TABLE Students (student_id NUMBER, personal_name TEXT, login_name TEXT);"
      }
    ],
    [
      {
        "question": "What is the latest test completion date?",
        "query": "SELECT t1.date_of_completion FROM student_course_enrolment AS t1 JOIN student_tests_taken AS t2 ON t1.registration_id = t2.registration_id ORDER BY t1.date_of_completion DESC LIMIT 1",
        "schema": "CREATE TABLE Courses (course_id NUMBER); CREATE TABLE Student_Tests_Taken (registration_id NUMBER, test_result TEXT, date_test_taken TIME); CREATE TABLE Students (student_id NUMBER, date_of_registration TIME, date_of_latest_logon TIME); CREATE TABLE Student_Course_Enrolment (date_of_completion TIME, registration_id NUMBER, student_id NUMBER, date_of_enrolment TIME);"
      },
      {
        "question": "How many students have taken tests?",
        "query": "SELECT COUNT ( DISTINCT student_id ) FROM student_course_enrolment",
        "schema": "CREATE TABLE Student_Tests_Taken (registration_id NUMBER, test_result TEXT, date_test_taken TIME); CREATE TABLE Courses (course_id NUMBER); CREATE TABLE Student_Course_Enrolment (student_id NUMBER, course_id NUMBER, registration_id NUMBER, date_of_enrolment TIME, date_of_completion TIME); CREATE TABLE Students (date_of_latest_logon TIME, date_of_registration TIME, student_id NUMBER);"
      },
      {
        "question": "How many students failed tests?",
        "query": "SELECT COUNT ( DISTINCT t1.student_id ) FROM student_course_enrolment AS t1 JOIN student_tests_taken AS t2 ON t1.registration_id = t2.registration_id WHERE t2.test_result = \"Fail\"",
        "schema": "CREATE TABLE Student_Tests_Taken (test_result TEXT, date_test_taken TIME, registration_id NUMBER); CREATE TABLE Students (date_of_latest_logon TIME, date_of_registration TIME, student_id NUMBER); CREATE TABLE Courses (course_id NUMBER); CREATE TABLE Student_Course_Enrolment (course_id NUMBER, registration_id NUMBER, date_of_enrolment TIME, date_of_completion TIME, student_id NUMBER);"
      },
      {
        "question": "When did these failures occur?",
        "query": "SELECT t1.date_of_completion FROM student_course_enrolment AS t1 JOIN student_tests_taken AS t2 ON t1.registration_id = t2.registration_id WHERE t2.test_result = \"Fail\"",
        "schema": "CREATE TABLE Student_Course_Enrolment (date_of_enrolment TIME, date_of_completion TIME, registration_id NUMBER, course_id NUMBER, student_id NUMBER); CREATE TABLE Student_Tests_Taken (test_result TEXT, registration_id NUMBER, date_test_taken TIME); CREATE TABLE Courses (course_id NUMBER); CREATE TABLE Students (date_of_registration TIME, date_of_latest_logon TIME, student_id NUMBER);"
      }
    ],
    [
      {
        "question": "can you show me a list of login name?",
        "query": "SELECT login_name FROM students",
        "schema": "CREATE TABLE Course_Authors_and_Tutors (login_name TEXT); CREATE TABLE Students (login_name TEXT, personal_name TEXT, student_id NUMBER);"
      },
      {
        "question": "can you show me a list of password?",
        "query": "SELECT password FROM students",
        "schema": "CREATE TABLE Students (personal_name TEXT, password TEXT, login_name TEXT, student_id NUMBER); CREATE TABLE Course_Authors_and_Tutors (login_name TEXT, password TEXT);"
      }
    ],
    [
      {
        "question": "How many courses are taught?",
        "query": "SELECT COUNT ( * ) FROM courses",
        "schema": "CREATE TABLE Courses (course_description TEXT, author_id NUMBER, course_name TEXT, course_id NUMBER); CREATE TABLE Course_Authors_and_Tutors (author_tutor_ATB TEXT, login_name TEXT, author_id NUMBER, password TEXT); CREATE TABLE Student_Course_Enrolment (course_id NUMBER); CREATE TABLE Students (student_id NUMBER);"
      },
      {
        "question": "How many different course authors are there?",
        "query": "SELECT COUNT ( DISTINCT author_id ) FROM course_authors_and_tutors",
        "schema": "CREATE TABLE Students (student_id NUMBER); CREATE TABLE Course_Authors_and_Tutors (login_name TEXT, password TEXT, family_name TEXT, author_tutor_ATB TEXT, author_id NUMBER, personal_name TEXT, middle_name TEXT, gender_mf TEXT); CREATE TABLE Student_Course_Enrolment (course_id NUMBER); CREATE TABLE Courses (course_name TEXT, author_id NUMBER, course_description TEXT, course_id NUMBER);"
      },
      {
        "question": "What is the name of the author who teaches the most courses? | Which kinds of names do you prefer? | personal name",
        "query": "SELECT t1.personal_name FROM course_authors_and_tutors AS t1 JOIN courses AS t2 ON t1.author_id = t2.author_id GROUP BY t2.author_id ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Student_Course_Enrolment (course_id NUMBER); CREATE TABLE Course_Authors_and_Tutors (author_id NUMBER, password TEXT, login_name TEXT, middle_name TEXT, gender_mf TEXT, author_tutor_ATB TEXT, personal_name TEXT, family_name TEXT); CREATE TABLE Students (family_name TEXT, student_id NUMBER, personal_name TEXT); CREATE TABLE Courses (course_description TEXT, course_id NUMBER, author_id NUMBER, course_name TEXT);"
      },
      {
        "question": "what is the family name?",
        "query": "SELECT t1.family_name FROM course_authors_and_tutors AS t1 JOIN courses AS t2 ON t1.author_id = t2.author_id GROUP BY t2.author_id ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Course_Authors_and_Tutors (middle_name TEXT, password TEXT, personal_name TEXT, family_name TEXT, author_id NUMBER, author_tutor_ATB TEXT, login_name TEXT, gender_mf TEXT); CREATE TABLE Students (family_name TEXT, personal_name TEXT, student_id NUMBER); CREATE TABLE Student_Course_Enrolment (course_id NUMBER); CREATE TABLE Courses (course_name TEXT, author_id NUMBER, course_description TEXT, course_id NUMBER);"
      },
      {
        "question": "What is the author id?",
        "query": "SELECT t2.author_id FROM course_authors_and_tutors AS t1 JOIN courses AS t2 ON t1.author_id = t2.author_id GROUP BY t2.author_id ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Students (personal_name TEXT, student_id NUMBER, family_name TEXT); CREATE TABLE Student_Course_Enrolment (course_id NUMBER); CREATE TABLE Course_Authors_and_Tutors (author_id NUMBER, middle_name TEXT, author_tutor_ATB TEXT, login_name TEXT, gender_mf TEXT, family_name TEXT, personal_name TEXT, password TEXT); CREATE TABLE Courses (course_name TEXT, course_description TEXT, course_id NUMBER, author_id NUMBER);"
      }
    ],
    [
      {
        "question": "What is the highest number of enrollments any student has?",
        "query": "SELECT COUNT ( * ) FROM student_course_enrolment AS t1 JOIN students AS t2 ON t1.student_id = t2.student_id GROUP BY t1.student_id ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Student_Course_Enrolment (course_id NUMBER, registration_id NUMBER, student_id NUMBER); CREATE TABLE Students (student_id NUMBER); CREATE TABLE Courses (course_id NUMBER);"
      },
      {
        "question": "How many students have 5 enrollments?",
        "query": "SELECT COUNT ( * ) FROM ( SELECT * FROM student_course_enrolment AS t1 JOIN students AS t2 ON t1.student_id = t2.student_id GROUP BY t1.student_id HAVING COUNT ( * ) = 5 )",
        "schema": "CREATE TABLE Student_Course_Enrolment (course_id NUMBER, registration_id NUMBER, student_id NUMBER); CREATE TABLE Students (student_id NUMBER); CREATE TABLE Courses (course_id NUMBER);"
      },
      {
        "question": "What is that student's registration ID?",
        "query": "SELECT t1.registration_id FROM student_course_enrolment AS t1 JOIN students AS t2 ON t1.student_id = t2.student_id GROUP BY t1.student_id HAVING COUNT ( * ) = 5",
        "schema": "CREATE TABLE Students (student_id NUMBER); CREATE TABLE Courses (course_id NUMBER); CREATE TABLE Student_Tests_Taken (registration_id NUMBER); CREATE TABLE Student_Course_Enrolment (student_id NUMBER, registration_id NUMBER, course_id NUMBER);"
      },
      {
        "question": "Can you give me the student ID of registration ID 19?",
        "query": "SELECT student_id FROM student_course_enrolment WHERE registration_id = 19",
        "schema": "CREATE TABLE Student_Tests_Taken (registration_id NUMBER); CREATE TABLE Courses (course_id NUMBER); CREATE TABLE Student_Course_Enrolment (registration_id NUMBER, course_id NUMBER, student_id NUMBER); CREATE TABLE Students (student_id NUMBER);"
      },
      {
        "question": "What is the personal name of student ID 15?",
        "query": "SELECT personal_name FROM students WHERE student_id = 15",
        "schema": "CREATE TABLE Courses (course_id NUMBER); CREATE TABLE Student_Tests_Taken (registration_id NUMBER); CREATE TABLE Students (middle_name TEXT, student_id NUMBER, family_name TEXT, date_of_registration TIME, personal_name TEXT); CREATE TABLE Student_Course_Enrolment (student_id NUMBER, course_id NUMBER, registration_id NUMBER);"
      }
    ],
    [
      {
        "question": "How many courses are there in Computer Science?",
        "query": "SELECT COUNT ( * ) FROM courses AS t1 JOIN subjects AS t2 ON t1.subject_id = t2.subject_id WHERE t2.subject_name = \"Computer Science\"",
        "schema": "CREATE TABLE Student_Course_Enrolment (course_id NUMBER); CREATE TABLE Subjects (subject_id NUMBER, subject_name TEXT); CREATE TABLE Courses (subject_id NUMBER, course_id NUMBER, course_description TEXT, course_name TEXT); CREATE TABLE Students (student_id NUMBER);"
      },
      {
        "question": "Great, and how many courses are there in Arts?",
        "query": "SELECT COUNT ( * ) FROM courses AS t1 JOIN subjects AS t2 ON t1.subject_id = t2.subject_id WHERE t2.subject_name = \"Arts\"",
        "schema": "CREATE TABLE Courses (subject_id NUMBER, course_id NUMBER, course_description TEXT, course_name TEXT); CREATE TABLE Subjects (subject_id NUMBER, subject_name TEXT); CREATE TABLE Students (student_id NUMBER); CREATE TABLE Student_Course_Enrolment (course_id NUMBER);"
      },
      {
        "question": "Wonderful. And how many courses in Language?",
        "query": "SELECT COUNT ( * ) FROM courses AS t1 JOIN subjects AS t2 ON t1.subject_id = t2.subject_id WHERE t2.subject_name = \"Language\"",
        "schema": "CREATE TABLE Courses (course_description TEXT, course_id NUMBER, course_name TEXT, subject_id NUMBER); CREATE TABLE Students (student_id NUMBER); CREATE TABLE Student_Course_Enrolment (course_id NUMBER); CREATE TABLE Subjects (subject_id NUMBER, subject_name TEXT);"
      },
      {
        "question": "Great, can you sort a list of Computer Science, Arts, and Language by the number of courses, in ascending order?",
        "query": "SELECT t2.subject_name FROM courses AS t1 JOIN subjects AS t2 ON t1.subject_id = t2.subject_id GROUP BY t1.subject_id ORDER BY COUNT ( * ) ASC",
        "schema": "CREATE TABLE Student_Course_Enrolment (course_id NUMBER); CREATE TABLE Students (student_id NUMBER); CREATE TABLE Courses (subject_id NUMBER, course_description TEXT, course_id NUMBER, course_name TEXT); CREATE TABLE Subjects (subject_name TEXT, subject_id NUMBER);"
      }
    ],
    [
      {
        "question": "How many students have the family name \"Zieme\"?",
        "query": "SELECT COUNT ( student_id ) FROM students WHERE family_name = \"Zieme\"",
        "schema": "CREATE TABLE Student_Course_Enrolment (student_id NUMBER); CREATE TABLE Students (middle_name TEXT, personal_name TEXT, student_id NUMBER, family_name TEXT); CREATE TABLE Course_Authors_and_Tutors (family_name TEXT);"
      },
      {
        "question": "What is that student's personal name?",
        "query": "SELECT personal_name FROM students WHERE family_name = \"Zieme\"",
        "schema": "CREATE TABLE Student_Course_Enrolment (student_id NUMBER); CREATE TABLE Course_Authors_and_Tutors (family_name TEXT); CREATE TABLE Students (student_id NUMBER, family_name TEXT, personal_name TEXT, middle_name TEXT);"
      }
    ],
    [
      {
        "question": "Can you list the IDs and middle names of all students who have no more than 2 enrollments?",
        "query": "SELECT t1.student_id , t2.middle_name FROM student_course_enrolment AS t1 JOIN students AS t2 ON t1.student_id = t2.student_id GROUP BY t1.student_id HAVING COUNT ( * ) < = 2",
        "schema": "CREATE TABLE Student_Course_Enrolment (registration_id NUMBER, student_id NUMBER, course_id NUMBER); CREATE TABLE Course_Authors_and_Tutors (middle_name TEXT); CREATE TABLE Students (middle_name TEXT, family_name TEXT, student_id NUMBER, personal_name TEXT); CREATE TABLE Courses (course_id NUMBER);"
      },
      {
        "question": "What are the dates of enrollment and completion for each of those students? Please list it in the table.",
        "query": "SELECT t1.date_of_enrolment, t1.date_of_completion FROM student_course_enrolment AS t1 JOIN students AS t2 ON t1.student_id = t2.student_id GROUP BY t1.student_id HAVING COUNT ( * ) < = 2",
        "schema": "CREATE TABLE Courses (course_id NUMBER); CREATE TABLE Student_Course_Enrolment (date_of_completion TIME, student_id NUMBER, registration_id NUMBER, course_id NUMBER, date_of_enrolment TIME); CREATE TABLE Students (personal_name TEXT, middle_name TEXT, date_of_registration TIME, family_name TEXT, student_id NUMBER); CREATE TABLE Course_Authors_and_Tutors (middle_name TEXT);"
      },
      {
        "question": "What is the full name of the student with the latest date of completion?",
        "query": "SELECT t2.personal_name, t2.middle_name, t2.family_name FROM student_course_enrolment AS t1 JOIN students AS t2 ON t1.student_id = t2.student_id ORDER BY t1.date_of_completion DESC LIMIT 1",
        "schema": "CREATE TABLE Courses (course_id NUMBER); CREATE TABLE Course_Authors_and_Tutors (middle_name TEXT); CREATE TABLE Students (middle_name TEXT, student_id NUMBER, family_name TEXT, personal_name TEXT, date_of_registration TIME); CREATE TABLE Student_Course_Enrolment (registration_id NUMBER, student_id NUMBER, date_of_enrolment TIME, course_id NUMBER, date_of_completion TIME);"
      }
    ],
    [
      {
        "question": "What is the name of the course that has the most student enrollment?",
        "query": "SELECT t1.course_name FROM courses AS t1 JOIN student_course_enrolment AS t2 ON t1.course_id = t2.course_id GROUP BY t1.course_name ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Courses (course_id NUMBER, course_name TEXT, course_description TEXT); CREATE TABLE Students (student_id NUMBER); CREATE TABLE Student_Course_Enrolment (registration_id NUMBER, course_id NUMBER, student_id NUMBER);"
      },
      {
        "question": "How many students are enrolled in French?",
        "query": "SELECT COUNT ( * ) FROM student_course_enrolment AS t1 JOIN courses AS t2 ON t2.course_id = t1.course_id WHERE course_name = 'French'",
        "schema": "CREATE TABLE Students (student_id NUMBER); CREATE TABLE Courses (course_id NUMBER, course_name TEXT, course_description TEXT); CREATE TABLE Student_Course_Enrolment (course_id NUMBER, student_id NUMBER, registration_id NUMBER);"
      },
      {
        "question": "What is the name of the course that has the least student enrollment?",
        "query": "SELECT t1.course_name FROM courses AS t1 JOIN student_course_enrolment AS t2 ON t1.course_id = t2.course_id GROUP BY t1.course_name ORDER BY COUNT ( * ) LIMIT 1",
        "schema": "CREATE TABLE Students (student_id NUMBER); CREATE TABLE Courses (course_description TEXT, course_id NUMBER, course_name TEXT); CREATE TABLE Student_Course_Enrolment (registration_id NUMBER, student_id NUMBER, course_id NUMBER);"
      },
      {
        "question": "How many students are enrolled in Chinese Painting?",
        "query": "SELECT COUNT ( * ) FROM student_course_enrolment AS t1 JOIN courses AS t2 ON t2.course_id = t1.course_id WHERE course_name = 'Chinese Painting'",
        "schema": "CREATE TABLE Courses (course_id NUMBER, course_description TEXT, course_name TEXT); CREATE TABLE Students (student_id NUMBER); CREATE TABLE Student_Course_Enrolment (student_id NUMBER, course_id NUMBER, registration_id NUMBER);"
      },
      {
        "question": "What is this student's name? | There no info about the name of the student. How about the id of the student? | What is the ID of this student?",
        "query": "SELECT student_id FROM student_course_enrolment AS t1 JOIN courses AS t2 ON t2.course_id = t1.course_id WHERE course_name = 'Chinese Painting'",
        "schema": "CREATE TABLE Courses (course_name TEXT, course_description TEXT, course_id NUMBER); CREATE TABLE Students (personal_name TEXT, student_id NUMBER); CREATE TABLE Student_Course_Enrolment (course_id NUMBER, registration_id NUMBER, student_id NUMBER);"
      },
      {
        "question": "What other classes is this student taking?",
        "query": "SELECT DISTINCT course_name FROM student_course_enrolment AS t1 JOIN courses AS t2 ON t2.course_id = t1.course_id WHERE student_id = '15' AND course_name ! = 'Chinese Painting'",
        "schema": "CREATE TABLE Student_Course_Enrolment (course_id NUMBER, student_id NUMBER, registration_id NUMBER); CREATE TABLE Courses (course_id NUMBER, course_description TEXT, course_name TEXT); CREATE TABLE Students (middle_name TEXT, personal_name TEXT, student_id NUMBER);"
      }
    ],
    [
      {
        "question": "What are the names of the courses",
        "query": "SELECT course_name FROM courses",
        "schema": "CREATE TABLE Student_Course_Enrolment (course_id NUMBER); CREATE TABLE Subjects (subject_id NUMBER); CREATE TABLE Courses (course_description TEXT, course_id NUMBER, subject_id NUMBER, course_name TEXT); CREATE TABLE Students (student_id NUMBER, family_name TEXT, personal_name TEXT); CREATE TABLE Course_Authors_and_Tutors (family_name TEXT, login_name TEXT, personal_name TEXT);"
      },
      {
        "question": "Yes please",
        "query": "SELECT t1.course_name , COUNT ( * ) FROM courses AS t1 JOIN student_course_enrolment AS t2 ON t1.course_id = t2.course_id GROUP BY t1.course_name",
        "schema": "CREATE TABLE Subjects (subject_id NUMBER); CREATE TABLE Student_Course_Enrolment (registration_id NUMBER, course_id NUMBER); CREATE TABLE Students (family_name TEXT, student_id NUMBER, personal_name TEXT); CREATE TABLE Courses (course_id NUMBER, subject_id NUMBER, course_name TEXT, course_description TEXT); CREATE TABLE Course_Authors_and_Tutors (family_name TEXT, personal_name TEXT, login_name TEXT);"
      }
    ],
    [
      {
        "question": "What is the highest number of enrollments? | do you mean the highest number of course enrollments of student? | yes",
        "query": "SELECT COUNT ( * ) FROM student_course_enrolment AS t1 JOIN students AS t2 ON t1.student_id = t2.student_id GROUP BY t1.student_id ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Students (student_id NUMBER); CREATE TABLE Courses (course_id NUMBER); CREATE TABLE Student_Course_Enrolment (student_id NUMBER, registration_id NUMBER, course_id NUMBER);"
      },
      {
        "question": "What is the student ID with the most course enrollments",
        "query": "SELECT t1.student_id FROM student_course_enrolment AS t1 JOIN students AS t2 ON t1.student_id = t2.student_id GROUP BY t1.student_id ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Courses (course_id NUMBER); CREATE TABLE Students (student_id NUMBER); CREATE TABLE Student_Course_Enrolment (student_id NUMBER, registration_id NUMBER, course_id NUMBER);"
      },
      {
        "question": "what is the login name of the student with the most course enrollments?",
        "query": "SELECT t2.login_name FROM student_course_enrolment AS t1 JOIN students AS t2 ON t1.student_id = t2.student_id GROUP BY t1.student_id ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Student_Course_Enrolment (registration_id NUMBER, student_id NUMBER, course_id NUMBER); CREATE TABLE Students (personal_name TEXT, student_id NUMBER, login_name TEXT); CREATE TABLE Courses (course_id NUMBER); CREATE TABLE Course_Authors_and_Tutors (login_name TEXT);"
      }
    ],
    [
      {
        "question": "LIST THE DATES OF ENROLLMENT AND COMPLETION OF THE STUDENT WITH PERSONAL NAME \"KARSON\"?",
        "query": "SELECT t1.date_of_enrolment , t1.date_of_completion FROM student_course_enrolment AS t1 JOIN students AS t2 ON t1.student_id = t2.student_id WHERE t2.personal_name = \"Karson\"",
        "schema": "CREATE TABLE Student_Tests_Taken (registration_id NUMBER, date_test_taken TIME); CREATE TABLE Courses (course_name TEXT, course_id NUMBER); CREATE TABLE Student_Course_Enrolment (date_of_completion TIME, course_id NUMBER, registration_id NUMBER, date_of_enrolment TIME, student_id NUMBER); CREATE TABLE Students (middle_name TEXT, family_name TEXT, student_id NUMBER, date_of_registration TIME, personal_name TEXT, date_of_latest_logon TIME);"
      },
      {
        "question": "List the name of all students?",
        "query": "SELECT personal_name, middle_name, family_name FROM students",
        "schema": "CREATE TABLE Student_Tests_Taken (date_test_taken TIME, registration_id NUMBER); CREATE TABLE Courses (course_name TEXT, course_id NUMBER); CREATE TABLE Student_Course_Enrolment (date_of_enrolment TIME, student_id NUMBER, course_id NUMBER, registration_id NUMBER, date_of_completion TIME); CREATE TABLE Students (student_id NUMBER, family_name TEXT, date_of_latest_logon TIME, middle_name TEXT, personal_name TEXT, date_of_registration TIME);"
      }
    ],
    [
      {
        "question": "How many login names are there? | Did you mean the login names for all students? | How many login names are there for the students?",
        "query": "SELECT COUNT ( DISTINCT login_name ) FROM students",
        "schema": "CREATE TABLE Course_Authors_and_Tutors (login_name TEXT); CREATE TABLE Student_Course_Enrolment (student_id NUMBER); CREATE TABLE Students (login_name TEXT, personal_name TEXT, student_id NUMBER);"
      },
      {
        "question": "What login name is the same for students and course authors?",
        "query": "SELECT login_name FROM course_authors_and_tutors INTERSECT SELECT login_name FROM students",
        "schema": "CREATE TABLE Students (student_id NUMBER, login_name TEXT, personal_name TEXT); CREATE TABLE Courses (author_id NUMBER); CREATE TABLE Course_Authors_and_Tutors (author_tutor_ATB TEXT, personal_name TEXT, login_name TEXT, author_id NUMBER); CREATE TABLE Student_Course_Enrolment (student_id NUMBER);"
      }
    ],
    [
      {
        "question": "What are the names of the course authors who teach the course with the name \"operating system\" or \"data structure\" please? | do you want to return their personal, middle, and family names? | All of those, please?",
        "query": "SELECT t1.personal_name, t1.middle_name, t1.family_name FROM course_authors_and_tutors AS t1 JOIN courses AS t2 ON t1.author_id = t2.author_id WHERE t2.course_name = \"operating system\" OR t2.course_name = \"data structure\"",
        "schema": "CREATE TABLE Course_Authors_and_Tutors (author_tutor_ATB TEXT, personal_name TEXT, author_id NUMBER, middle_name TEXT, family_name TEXT); CREATE TABLE Courses (author_id NUMBER, course_id NUMBER, course_name TEXT); CREATE TABLE Students (personal_name TEXT, family_name TEXT, middle_name TEXT);"
      },
      {
        "question": "What are their login names?",
        "query": "SELECT t1.login_name FROM course_authors_and_tutors AS t1 JOIN courses AS t2 ON t1.author_id = t2.author_id WHERE t2.course_name = \"operating system\" OR t2.course_name = \"data structure\"",
        "schema": "CREATE TABLE Courses (author_id NUMBER, course_name TEXT, course_id NUMBER); CREATE TABLE Students (family_name TEXT, login_name TEXT, middle_name TEXT, personal_name TEXT); CREATE TABLE Course_Authors_and_Tutors (login_name TEXT, author_tutor_ATB TEXT, author_id NUMBER, family_name TEXT, middle_name TEXT, personal_name TEXT);"
      },
      {
        "question": "What are the full names of the course authors who teach the course with the name \"advanced database\" please?",
        "query": "SELECT t1.personal_name, t1.middle_name, t1.family_name FROM course_authors_and_tutors AS t1 JOIN courses AS t2 ON t1.author_id = t2.author_id WHERE t2.course_name = \"advanced database\"",
        "schema": "CREATE TABLE Courses (author_id NUMBER, course_name TEXT, course_id NUMBER); CREATE TABLE Course_Authors_and_Tutors (middle_name TEXT, author_id NUMBER, personal_name TEXT, author_tutor_ATB TEXT, family_name TEXT, login_name TEXT); CREATE TABLE Students (middle_name TEXT, login_name TEXT, family_name TEXT, personal_name TEXT);"
      }
    ],
    [
      {
        "question": "List the author ids listed more than once in the courses",
        "query": "SELECT author_id FROM courses GROUP BY author_id HAVING COUNT ( author_id ) >1",
        "schema": "CREATE TABLE Courses (course_id NUMBER, course_name TEXT, author_id NUMBER); CREATE TABLE Students (student_id NUMBER); CREATE TABLE Course_Authors_and_Tutors (author_id NUMBER, middle_name TEXT, personal_name TEXT, author_tutor_ATB TEXT);"
      },
      {
        "question": "Find the addresses and author IDs of the course authors that teach at least two courses.",
        "query": "SELECT t1.address_line_1 , t2.author_id FROM course_authors_and_tutors AS t1 JOIN courses AS t2 ON t1.author_id = t2.author_id GROUP BY t2.author_id HAVING COUNT ( * ) > = 2",
        "schema": "CREATE TABLE Course_Authors_and_Tutors (author_id NUMBER, address_line_1 TEXT, family_name TEXT, middle_name TEXT, author_tutor_ATB TEXT, personal_name TEXT); CREATE TABLE Students (student_id NUMBER); CREATE TABLE Courses (author_id NUMBER, course_id NUMBER, course_name TEXT);"
      },
      {
        "question": "How about those who teaches at least one course?",
        "query": "SELECT t1.address_line_1 , t2.author_id FROM course_authors_and_tutors AS t1 JOIN courses AS t2 ON t1.author_id = t2.author_id GROUP BY t2.author_id HAVING COUNT ( * ) > = 1",
        "schema": "CREATE TABLE Courses (course_id NUMBER, author_id NUMBER, course_name TEXT); CREATE TABLE Students (student_id NUMBER); CREATE TABLE Course_Authors_and_Tutors (family_name TEXT, personal_name TEXT, middle_name TEXT, author_id NUMBER, address_line_1 TEXT, author_tutor_ATB TEXT);"
      }
    ],
    [
      {
        "question": "What is the date of enrollment of the course named \"Spanish\"?",
        "query": "SELECT t2.date_of_enrolment FROM courses AS t1 JOIN student_course_enrolment AS t2 ON t1.course_id = t2.course_id WHERE t1.course_name = \"Spanish\"",
        "schema": "CREATE TABLE Courses (course_name TEXT, course_id NUMBER); CREATE TABLE Students (date_of_registration TIME, student_id NUMBER); CREATE TABLE Student_Course_Enrolment (student_id NUMBER, registration_id NUMBER, date_of_enrolment TIME, course_id NUMBER, date_of_completion TIME);"
      },
      {
        "question": "What is the date of enrollment in the course named \"database\"?",
        "query": "SELECT t2.date_of_enrolment FROM courses AS t1 JOIN student_course_enrolment AS t2 ON t1.course_id = t2.course_id WHERE t1.course_name = \"database\"",
        "schema": "CREATE TABLE Students (date_of_registration TIME, student_id NUMBER); CREATE TABLE Student_Course_Enrolment (course_id NUMBER, registration_id NUMBER, date_of_enrolment TIME, date_of_completion TIME, student_id NUMBER); CREATE TABLE Courses (course_id NUMBER, course_name TEXT);"
      },
      {
        "question": "What is the date of enrollment in the course named \"advanced database\"?",
        "query": "SELECT t2.date_of_enrolment FROM courses AS t1 JOIN student_course_enrolment AS t2 ON t1.course_id = t2.course_id WHERE t1.course_name = \"advanced database\"",
        "schema": "CREATE TABLE Courses (course_id NUMBER, course_name TEXT); CREATE TABLE Student_Course_Enrolment (student_id NUMBER, date_of_enrolment TIME, date_of_completion TIME, registration_id NUMBER, course_id NUMBER); CREATE TABLE Students (student_id NUMBER, date_of_registration TIME);"
      },
      {
        "question": "What is the date of enrollment in the course named \"operating system\"?",
        "query": "SELECT t2.date_of_enrolment FROM courses AS t1 JOIN student_course_enrolment AS t2 ON t1.course_id = t2.course_id WHERE t1.course_name = \"operating system\"",
        "schema": "CREATE TABLE Courses (course_id NUMBER, course_name TEXT); CREATE TABLE Student_Course_Enrolment (date_of_completion TIME, registration_id NUMBER, student_id NUMBER, date_of_enrolment TIME, course_id NUMBER); CREATE TABLE Students (date_of_registration TIME, student_id NUMBER);"
      },
      {
        "question": "What is the date of completion in the course named \"advanced database?\"",
        "query": "SELECT t2.date_of_completion FROM courses AS t1 JOIN student_course_enrolment AS t2 ON t1.course_id = t2.course_id WHERE t1.course_name = \"advanced database\"",
        "schema": "CREATE TABLE Courses (course_id NUMBER, course_name TEXT); CREATE TABLE Student_Course_Enrolment (student_id NUMBER, course_id NUMBER, registration_id NUMBER, date_of_enrolment TIME, date_of_completion TIME); CREATE TABLE Students (student_id NUMBER, date_of_registration TIME);"
      }
    ],
    [
      {
        "question": "what are the subjects available?",
        "query": "SELECT subject_name FROM subjects",
        "schema": "CREATE TABLE Students (student_id NUMBER); CREATE TABLE Subjects (subject_name TEXT, subject_id NUMBER); CREATE TABLE Student_Course_Enrolment (student_id NUMBER, course_id NUMBER); CREATE TABLE Courses (subject_id NUMBER, course_name TEXT, course_id NUMBER);"
      },
      {
        "question": "list the author ids",
        "query": "SELECT author_id FROM courses",
        "schema": "CREATE TABLE Student_Course_Enrolment (student_id NUMBER, course_id NUMBER); CREATE TABLE Course_Authors_and_Tutors (author_id NUMBER, author_tutor_ATB TEXT, personal_name TEXT); CREATE TABLE Courses (course_id NUMBER, author_id NUMBER, course_name TEXT, subject_id NUMBER); CREATE TABLE Students (student_id NUMBER); CREATE TABLE Subjects (subject_id NUMBER, subject_name TEXT);"
      },
      {
        "question": "list the course ids available",
        "query": "SELECT course_id FROM courses",
        "schema": "CREATE TABLE Students (student_id NUMBER); CREATE TABLE Student_Course_Enrolment (course_id NUMBER, student_id NUMBER); CREATE TABLE Courses (course_name TEXT, subject_id NUMBER, author_id NUMBER, course_id NUMBER); CREATE TABLE Subjects (subject_id NUMBER, subject_name TEXT); CREATE TABLE Course_Authors_and_Tutors (author_id NUMBER, author_tutor_ATB TEXT, personal_name TEXT);"
      }
    ],
    [
      {
        "question": "How many failed the exam?",
        "query": "SELECT COUNT ( * ) FROM student_tests_taken WHERE test_result = 'Fail'",
        "schema": "CREATE TABLE Students (student_id NUMBER); CREATE TABLE Subjects (subject_id NUMBER); CREATE TABLE Student_Course_Enrolment (registration_id NUMBER, student_id NUMBER, course_id NUMBER); CREATE TABLE Student_Tests_Taken (date_test_taken TIME, test_result TEXT, registration_id NUMBER); CREATE TABLE Courses (course_id NUMBER);"
      },
      {
        "question": "And what about passed?",
        "query": "SELECT COUNT ( * ) FROM student_tests_taken WHERE test_result = 'Pass'",
        "schema": "CREATE TABLE Subjects (subject_id NUMBER); CREATE TABLE Student_Tests_Taken (registration_id NUMBER, test_result TEXT, date_test_taken TIME); CREATE TABLE Student_Course_Enrolment (course_id NUMBER, student_id NUMBER, registration_id NUMBER); CREATE TABLE Courses (course_id NUMBER); CREATE TABLE Students (student_id NUMBER);"
      },
      {
        "question": "Can you list each test result and it's count in descending order based on count?",
        "query": "SELECT test_result , COUNT ( * ) FROM student_tests_taken GROUP BY test_result ORDER BY COUNT ( * ) DESC",
        "schema": "CREATE TABLE Subjects (subject_id NUMBER); CREATE TABLE Student_Course_Enrolment (registration_id NUMBER, course_id NUMBER, student_id NUMBER); CREATE TABLE Courses (course_id NUMBER); CREATE TABLE Student_Tests_Taken (test_result TEXT, date_test_taken TIME, registration_id NUMBER); CREATE TABLE Students (student_id NUMBER);"
      },
      {
        "question": "Yes, what are ids of all passed exams?",
        "query": "SELECT registration_id FROM student_tests_taken WHERE test_result = 'Pass'",
        "schema": "CREATE TABLE Student_Tests_Taken (registration_id NUMBER, test_result TEXT, date_test_taken TIME); CREATE TABLE Courses (course_id NUMBER); CREATE TABLE Students (student_id NUMBER); CREATE TABLE Student_Course_Enrolment (student_id NUMBER, registration_id NUMBER, course_id NUMBER); CREATE TABLE Subjects (subject_id NUMBER);"
      }
    ],
    [
      {
        "question": "Can you please provide the names of all courses?",
        "query": "SELECT course_name FROM courses",
        "schema": "CREATE TABLE Courses (author_id NUMBER, course_description TEXT, course_name TEXT, course_id NUMBER); CREATE TABLE Course_Authors_and_Tutors (author_id NUMBER);"
      },
      {
        "question": "Can you please provide the author id for the author that teaches the Advanced Database course?",
        "query": "SELECT author_id FROM courses WHERE course_name = \"advanced database\"",
        "schema": "CREATE TABLE Courses (author_id NUMBER, course_description TEXT, course_id NUMBER, course_name TEXT); CREATE TABLE Course_Authors_and_Tutors (author_tutor_ATB TEXT, personal_name TEXT, author_id NUMBER);"
      },
      {
        "question": "And what is the full name of the teacher with author id 6?",
        "query": "SELECT personal_name, middle_name, family_name FROM course_authors_and_tutors WHERE author_id = 6",
        "schema": "CREATE TABLE Courses (author_id NUMBER, course_id NUMBER, course_description TEXT, course_name TEXT); CREATE TABLE Course_Authors_and_Tutors (middle_name TEXT, personal_name TEXT, author_id NUMBER, family_name TEXT, author_tutor_ATB TEXT);"
      },
      {
        "question": "And the login name for Adolf Keira Rohan?",
        "query": "SELECT login_name FROM course_authors_and_tutors WHERE personal_name like \"%Adolf%\" AND middle_name like \"%Keira%\" AND family_name like \"%Rohan%\"",
        "schema": "CREATE TABLE Courses (course_description TEXT, course_id NUMBER, course_name TEXT, author_id NUMBER); CREATE TABLE Students (login_name TEXT); CREATE TABLE Course_Authors_and_Tutors (author_tutor_ATB TEXT, personal_name TEXT, middle_name TEXT, author_id NUMBER, family_name TEXT, login_name TEXT);"
      }
    ]
  ],
  "county_public_safety": [
    [
      {
        "question": "how many cities are there?",
        "query": "SELECT COUNT ( * ) FROM city",
        "schema": "CREATE TABLE city (Name TEXT, County_ID NUMBER, White NUMBER, Amerindian NUMBER, City_ID NUMBER, Multiracial NUMBER, Hispanic NUMBER, Asian NUMBER); CREATE TABLE county_public_safety (Population NUMBER, County_ID NUMBER);"
      },
      {
        "question": "which city has most hispanic population?",
        "query": "SELECT name FROM city ORDER BY hispanic DESC LIMIT 1",
        "schema": "CREATE TABLE city (Hispanic NUMBER, City_ID NUMBER, County_ID NUMBER, White NUMBER, Multiracial NUMBER, Name TEXT, Amerindian NUMBER, Asian NUMBER, Black NUMBER); CREATE TABLE county_public_safety (County_ID NUMBER, Population NUMBER);"
      },
      {
        "question": "what about black?",
        "query": "SELECT name FROM city ORDER BY black DESC LIMIT 1",
        "schema": "CREATE TABLE county_public_safety (County_ID NUMBER, Population NUMBER); CREATE TABLE city (Name TEXT, City_ID NUMBER, Asian NUMBER, Multiracial NUMBER, Hispanic NUMBER, County_ID NUMBER, White NUMBER, Amerindian NUMBER, Black NUMBER);"
      },
      {
        "question": "what about white?",
        "query": "SELECT name FROM city ORDER BY white DESC LIMIT 1",
        "schema": "CREATE TABLE city (Multiracial NUMBER, Name TEXT, Hispanic NUMBER, Amerindian NUMBER, City_ID NUMBER, County_ID NUMBER, White NUMBER, Black NUMBER, Asian NUMBER); CREATE TABLE county_public_safety (Population NUMBER, County_ID NUMBER);"
      }
    ],
    [
      {
        "question": "show the names of cities",
        "query": "SELECT name FROM city",
        "schema": "CREATE TABLE city (Name TEXT, County_ID NUMBER, City_ID NUMBER); CREATE TABLE county_public_safety (Name TEXT);"
      },
      {
        "question": "list out the names",
        "query": "SELECT name FROM city",
        "schema": "CREATE TABLE city (Name TEXT, City_ID NUMBER, County_ID NUMBER); CREATE TABLE county_public_safety (Name TEXT);"
      },
      {
        "question": "what is the population of Abbotsford",
        "query": "SELECT population FROM county_public_safety WHERE name = \"Abbotsford\"",
        "schema": "CREATE TABLE city (City_ID NUMBER, Name TEXT, County_ID NUMBER); CREATE TABLE county_public_safety (Location TEXT, Population NUMBER, County_ID NUMBER, Name TEXT);"
      },
      {
        "question": "what is the crime rate of Campbell River",
        "query": "SELECT crime_rate FROM county_public_safety WHERE name = \"Campbell River\"",
        "schema": "CREATE TABLE city (Name TEXT, County_ID NUMBER, City_ID NUMBER); CREATE TABLE county_public_safety (County_ID NUMBER, Location TEXT, Crime_rate NUMBER, Name TEXT, Population NUMBER);"
      }
    ],
    [
      {
        "question": "Hi there!  Can you show me a list of all of the cities including city IDs and city names?",
        "query": "SELECT city_id,name FROM city",
        "schema": "CREATE TABLE city (Name TEXT, City_ID NUMBER, County_ID NUMBER);"
      },
      {
        "question": "Oh, I am sorry about that.  Can you please show me a list of all of the cities located in counties that for which the county has a population over 20,000?",
        "query": "SELECT name FROM city WHERE county_id IN ( SELECT county_id FROM county_public_safety WHERE population > 20000 )",
        "schema": "CREATE TABLE city (Name TEXT, County_ID NUMBER, City_ID NUMBER); CREATE TABLE county_public_safety (Location TEXT, Population NUMBER, County_ID NUMBER, Name TEXT);"
      }
    ],
    [
      {
        "question": "Okay!  Can you provide me with a list of all of the city names and which counties they belong to?",
        "query": "SELECT t2.name, t1.name FROM county_public_safety AS t1 JOIN city AS t2 ON t1.county_id = t2.county_id",
        "schema": "CREATE TABLE city (Name TEXT, County_ID NUMBER, City_ID NUMBER); CREATE TABLE county_public_safety (Name TEXT, County_ID NUMBER);"
      },
      {
        "question": "Thank you very much! Can you filter this list to show only the cities in the country with the largest population?",
        "query": "SELECT t2.name, t1.name FROM county_public_safety AS t1 JOIN city AS t2 ON t1.county_id = t2.county_id ORDER BY population DESC LIMIT 1",
        "schema": "CREATE TABLE county_public_safety (Population NUMBER, County_ID NUMBER, Name TEXT); CREATE TABLE city (County_ID NUMBER, Name TEXT, City_ID NUMBER);"
      },
      {
        "question": "Thank you!  Can you update this filtered list to show the total population of this county?",
        "query": "SELECT t1.population FROM county_public_safety AS t1 JOIN city AS t2 ON t1.county_id = t2.county_id ORDER BY population DESC LIMIT 1",
        "schema": "CREATE TABLE city (County_ID NUMBER, City_ID NUMBER, Name TEXT); CREATE TABLE county_public_safety (Population NUMBER, County_ID NUMBER, Name TEXT);"
      },
      {
        "question": "Awesome!  Finally, can you show me the number of residents per officer for this county?",
        "query": "SELECT t1.residents_per_officer FROM county_public_safety AS t1 JOIN city AS t2 ON t1.county_id = t2.county_id ORDER BY population DESC LIMIT 1",
        "schema": "CREATE TABLE city (City_ID NUMBER, County_ID NUMBER, Name TEXT); CREATE TABLE county_public_safety (Population NUMBER, County_ID NUMBER, Police_officers NUMBER, Name TEXT, Residents_per_officer NUMBER);"
      }
    ],
    [
      {
        "question": "What is the police force of counties on the east side?",
        "query": "SELECT police_force FROM county_public_safety WHERE LOCATION = \"East\"",
        "schema": "CREATE TABLE city (County_ID NUMBER); CREATE TABLE county_public_safety (County_ID NUMBER, Police_officers NUMBER, Location TEXT, Name TEXT, Police_force TEXT);"
      },
      {
        "question": "What is the police force of counties on the west side?",
        "query": "SELECT police_force FROM county_public_safety WHERE LOCATION = \"West\"",
        "schema": "CREATE TABLE city (County_ID NUMBER); CREATE TABLE county_public_safety (County_ID NUMBER, Police_officers NUMBER, Name TEXT, Location TEXT, Police_force TEXT);"
      },
      {
        "question": "What is the police force shared by county on both sides?",
        "query": "SELECT police_force FROM county_public_safety WHERE LOCATION = \"East\" INTERSECT SELECT police_force FROM county_public_safety WHERE LOCATION = \"West\"",
        "schema": "CREATE TABLE city (County_ID NUMBER); CREATE TABLE county_public_safety (County_ID NUMBER, Name TEXT, Police_force TEXT, Police_officers NUMBER, Location TEXT);"
      },
      {
        "question": "How many police officers are in the police force shared by county on both sides?",
        "query": "SELECT COUNT ( * ) FROM ( SELECT police_force FROM county_public_safety WHERE LOCATION = \"East\" INTERSECT SELECT police_force FROM county_public_safety WHERE LOCATION = \"West\" )",
        "schema": "CREATE TABLE city (County_ID NUMBER); CREATE TABLE county_public_safety (Name TEXT, Police_officers NUMBER, Location TEXT, Police_force TEXT, County_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show the name of cities in the county that has the largest number of police officers.",
        "query": "SELECT name FROM city WHERE county_id = ( SELECT county_id FROM county_public_safety ORDER BY police_officers DESC LIMIT 1 )",
        "schema": "CREATE TABLE city (County_ID NUMBER, Name TEXT, City_ID NUMBER); CREATE TABLE county_public_safety (County_ID NUMBER, Name TEXT, Police_officers NUMBER, Police_force TEXT, Location TEXT);"
      },
      {
        "question": "How many police officers are in Albonito? | Do you mean 'Aibonito' not 'Albonito'? | Yes Aibonito, my mistake",
        "query": "SELECT police_officers FROM county_public_safety WHERE county_id = ( SELECT county_id FROM city WHERE name = 'Aibonito' )",
        "schema": "CREATE TABLE county_public_safety (Name TEXT, County_ID NUMBER, Police_force TEXT, Police_officers NUMBER, Location TEXT); CREATE TABLE city (Name TEXT, County_ID NUMBER, City_ID NUMBER);"
      },
      {
        "question": "What is the population of Aibonito?",
        "query": "SELECT population FROM county_public_safety WHERE county_id = ( SELECT county_id FROM city WHERE name = 'Aibonito' )",
        "schema": "CREATE TABLE county_public_safety (Police_officers NUMBER, Residents_per_officer NUMBER, County_ID NUMBER, Name TEXT, Police_force TEXT, Population NUMBER, Location TEXT); CREATE TABLE city (Name TEXT, City_ID NUMBER, County_ID NUMBER);"
      },
      {
        "question": "What is the crime rate in Aibonito?",
        "query": "SELECT crime_rate FROM county_public_safety WHERE county_id = ( SELECT county_id FROM city WHERE name = 'Aibonito' )",
        "schema": "CREATE TABLE city (Name TEXT, City_ID NUMBER, County_ID NUMBER); CREATE TABLE county_public_safety (Police_officers NUMBER, Residents_per_officer NUMBER, County_ID NUMBER, Police_force TEXT, Name TEXT, Population NUMBER, Location TEXT, Crime_rate NUMBER);"
      },
      {
        "question": "How many residents per officer are there in Aibonito?",
        "query": "SELECT residents_per_officer FROM county_public_safety WHERE county_id = ( SELECT county_id FROM city WHERE name = 'Aibonito' )",
        "schema": "CREATE TABLE city (Name TEXT, County_ID NUMBER, City_ID NUMBER); CREATE TABLE county_public_safety (Crime_rate NUMBER, Police_force TEXT, Population NUMBER, Police_officers NUMBER, Name TEXT, County_ID NUMBER, Residents_per_officer NUMBER, Location TEXT);"
      }
    ],
    [
      {
        "question": "How many counties are there?",
        "query": "SELECT COUNT ( * ) FROM county_public_safety",
        "schema": "CREATE TABLE county_public_safety (Residents_per_officer NUMBER, Population NUMBER, Police_force TEXT, County_ID NUMBER, Case_burden NUMBER, Location TEXT, Name TEXT, Police_officers NUMBER); CREATE TABLE city (County_ID NUMBER);"
      },
      {
        "question": "Which county has the lowest crime rate? | Would you like the county name corresponding to the lowest crime rate? | yes",
        "query": "SELECT name FROM county_public_safety ORDER BY crime_rate ASC LIMIT 1",
        "schema": "CREATE TABLE city (County_ID NUMBER); CREATE TABLE county_public_safety (Crime_rate NUMBER, Police_force TEXT, Case_burden NUMBER, Residents_per_officer NUMBER, County_ID NUMBER, Population NUMBER, Location TEXT, Name TEXT, Police_officers NUMBER);"
      },
      {
        "question": "which county has the highest crime rate?",
        "query": "SELECT name FROM county_public_safety ORDER BY crime_rate DESC LIMIT 1",
        "schema": "CREATE TABLE city (County_ID NUMBER); CREATE TABLE county_public_safety (Location TEXT, Crime_rate NUMBER, Police_officers NUMBER, Population NUMBER, Police_force TEXT, Case_burden NUMBER, County_ID NUMBER, Name TEXT, Residents_per_officer NUMBER);"
      },
      {
        "question": "list together, the crime rate for Central Saanich and Campbell River counties | Would you like me to list the crime rates for counties with the name Central Saanich or Campbell River? | yes",
        "query": "SELECT name, crime_rate FROM county_public_safety WHERE name = 'Campbell River' OR name = 'Central Saanich'",
        "schema": "CREATE TABLE city (County_ID NUMBER); CREATE TABLE county_public_safety (Police_officers NUMBER, Crime_rate NUMBER, Police_force TEXT, Population NUMBER, County_ID NUMBER, Case_burden NUMBER, Location TEXT, Name TEXT, Residents_per_officer NUMBER);"
      },
      {
        "question": "please list by crime rate in ascending order | Would you like the crime rates for all counties in ascending order of crime rate? | no, just for the 2 counties from the previous query",
        "query": "SELECT name, crime_rate FROM county_public_safety WHERE name = 'Campbell River' OR name = 'Central Saanich' ORDER BY crime_rate ASC",
        "schema": "CREATE TABLE county_public_safety (Location TEXT, County_ID NUMBER, Police_force TEXT, Name TEXT, Police_officers NUMBER, Crime_rate NUMBER, Residents_per_officer NUMBER, Case_burden NUMBER, Population NUMBER); CREATE TABLE city (County_ID NUMBER);"
      }
    ],
    [
      {
        "question": "what the highest population in the county public safety table",
        "query": "SELECT MAX ( population ) FROM county_public_safety",
        "schema": "CREATE TABLE county_public_safety (Name TEXT, Police_officers NUMBER, Police_force TEXT, Population NUMBER, Residents_per_officer NUMBER, County_ID NUMBER); CREATE TABLE city (County_ID NUMBER);"
      },
      {
        "question": "how many locations in the county public safety table",
        "query": "SELECT COUNT ( LOCATION ) FROM county_public_safety",
        "schema": "CREATE TABLE county_public_safety (Location TEXT, Name TEXT, Police_officers NUMBER, Residents_per_officer NUMBER, Population NUMBER, County_ID NUMBER, Police_force TEXT); CREATE TABLE city (County_ID NUMBER);"
      },
      {
        "question": "what are the highest crime rate in the county public safety table",
        "query": "SELECT crime_rate FROM county_public_safety ORDER BY crime_rate DESC LIMIT 1",
        "schema": "CREATE TABLE city (County_ID NUMBER); CREATE TABLE county_public_safety (Residents_per_officer NUMBER, Location TEXT, Crime_rate NUMBER, Name TEXT, County_ID NUMBER, Police_force TEXT, Population NUMBER, Police_officers NUMBER);"
      }
    ],
    [
      {
        "question": "Could you please get me the name of the county with the largest population?",
        "query": "SELECT name FROM county_public_safety ORDER BY population DESC LIMIT 1",
        "schema": "CREATE TABLE city (County_ID NUMBER); CREATE TABLE county_public_safety (Name TEXT, County_ID NUMBER, Population NUMBER, Residents_per_officer NUMBER);"
      },
      {
        "question": "How many police officers are there in that county?",
        "query": "SELECT police_officers FROM county_public_safety ORDER BY population DESC LIMIT 1",
        "schema": "CREATE TABLE city (County_ID NUMBER); CREATE TABLE county_public_safety (Police_officers NUMBER, Police_force TEXT, Residents_per_officer NUMBER, County_ID NUMBER, Name TEXT, Population NUMBER);"
      },
      {
        "question": "What counties have more police officers than that? | do you want to return their names? | Yes, please.",
        "query": "SELECT name FROM county_public_safety WHERE police_officers > ( SELECT police_officers FROM county_public_safety ORDER BY population DESC LIMIT 1 )",
        "schema": "CREATE TABLE county_public_safety (Name TEXT, Police_officers NUMBER, Residents_per_officer NUMBER, Population NUMBER, Police_force TEXT, County_ID NUMBER); CREATE TABLE city (County_ID NUMBER);"
      },
      {
        "question": "Which county has the lowest amount of police officers?",
        "query": "SELECT name FROM county_public_safety ORDER BY population LIMIT 1",
        "schema": "CREATE TABLE county_public_safety (Name TEXT, Police_force TEXT, Residents_per_officer NUMBER, Population NUMBER, Police_officers NUMBER, County_ID NUMBER); CREATE TABLE city (County_ID NUMBER);"
      },
      {
        "question": "How many police officers are in that county?",
        "query": "SELECT police_officers FROM county_public_safety ORDER BY police_officers LIMIT 1",
        "schema": "CREATE TABLE city (County_ID NUMBER); CREATE TABLE county_public_safety (Police_officers NUMBER, Name TEXT, Residents_per_officer NUMBER, Police_force TEXT, County_ID NUMBER, Population NUMBER);"
      }
    ],
    [
      {
        "question": "how many customer list ? | Do you want the number of documents in the list? | No, and what is the location shared by the least counties?",
        "query": "SELECT LOCATION FROM county_public_safety GROUP BY LOCATION ORDER BY COUNT ( * ) LIMIT 1",
        "schema": "CREATE TABLE city (County_ID NUMBER); CREATE TABLE county_public_safety (Location TEXT, Name TEXT, County_ID NUMBER);"
      },
      {
        "question": "Find the crime rate of the county named \"Burnaby\"?",
        "query": "SELECT crime_rate FROM county_public_safety WHERE name = 'Burnaby'",
        "schema": "CREATE TABLE city (County_ID NUMBER, Name TEXT); CREATE TABLE county_public_safety (Location TEXT, Crime_rate NUMBER, Name TEXT, County_ID NUMBER);"
      },
      {
        "question": "Find the location of the campbell river?",
        "query": "SELECT LOCATION FROM county_public_safety WHERE name = 'Campbell River'",
        "schema": "CREATE TABLE county_public_safety (Crime_rate NUMBER, County_ID NUMBER, Name TEXT, Location TEXT); CREATE TABLE city (Name TEXT, County_ID NUMBER);"
      },
      {
        "question": "which police force assigned the country id 2?",
        "query": "SELECT police_officers FROM county_public_safety WHERE county_id = '2'",
        "schema": "CREATE TABLE county_public_safety (Location TEXT, County_ID NUMBER, Crime_rate NUMBER, Police_officers NUMBER, Police_force TEXT, Name TEXT); CREATE TABLE city (Name TEXT, County_ID NUMBER);"
      }
    ]
  ],
  "musical": [
    [
      {
        "question": "Give me the list of nominees that has been nominated multiple times for musicals",
        "query": "SELECT nominee FROM musical GROUP BY nominee HAVING COUNT ( * ) > 1",
        "schema": "CREATE TABLE musical (Result TEXT, Name TEXT, Musical_ID NUMBER, Nominee TEXT, Year NUMBER, Category TEXT, Award TEXT); CREATE TABLE actor (Musical_ID NUMBER, Actor_ID NUMBER);"
      },
      {
        "question": "And what musicals were they nominated for?",
        "query": "SELECT name FROM musical GROUP BY nominee HAVING COUNT ( * ) > 1",
        "schema": "CREATE TABLE actor (Actor_ID NUMBER, Musical_ID NUMBER); CREATE TABLE musical (Award TEXT, Musical_ID NUMBER, Nominee TEXT, Year NUMBER, Result TEXT, Category TEXT, Name TEXT);"
      },
      {
        "question": "What year(s) were they nominated in?",
        "query": "SELECT YEAR FROM musical GROUP BY nominee HAVING COUNT ( * ) > 1",
        "schema": "CREATE TABLE actor (Actor_ID NUMBER, Musical_ID NUMBER); CREATE TABLE musical (Category TEXT, Name TEXT, Nominee TEXT, Year NUMBER, Award TEXT, Result TEXT, Musical_ID NUMBER);"
      },
      {
        "question": "Who else was also nominated in 1986?",
        "query": "SELECT DISTINCT nominee FROM musical WHERE YEAR = 1986 AND nominee ! = \"Bob Fosse\"",
        "schema": "CREATE TABLE musical (Name TEXT, Musical_ID NUMBER, Award TEXT, Year NUMBER, Result TEXT, Category TEXT, Nominee TEXT); CREATE TABLE actor (Actor_ID NUMBER, Musical_ID NUMBER);"
      },
      {
        "question": "What musicals were they nominated for?",
        "query": "SELECT name FROM musical WHERE YEAR = 1986 AND nominee = \"Cleavant Derricks\"",
        "schema": "CREATE TABLE actor (Actor_ID NUMBER, Musical_ID NUMBER); CREATE TABLE musical (Nominee TEXT, Musical_ID NUMBER, Name TEXT, Result TEXT, Category TEXT, Award TEXT, Year NUMBER);"
      },
      {
        "question": "And in what categories were those nominations?",
        "query": "SELECT name, category FROM musical WHERE YEAR = 1986 AND nominee = \"Cleavant Derricks\"",
        "schema": "CREATE TABLE actor (Musical_ID NUMBER, Actor_ID NUMBER); CREATE TABLE musical (Award TEXT, Nominee TEXT, Result TEXT, Category TEXT, Musical_ID NUMBER, Year NUMBER, Name TEXT);"
      }
    ],
    [
      {
        "question": "What is the duration of the oldest actor?",
        "query": "SELECT duration FROM actor ORDER BY age DESC LIMIT 1",
        "schema": "CREATE TABLE actor (Duration TEXT, Character TEXT, Musical_ID NUMBER, age NUMBER, Actor_ID NUMBER, Name TEXT);"
      },
      {
        "question": "What is the character of Tom Oliver?",
        "query": "SELECT CHARACTER FROM actor WHERE name = 'Tom Oliver'",
        "schema": "CREATE TABLE actor (age NUMBER, Character TEXT, Duration TEXT, Musical_ID NUMBER, Name TEXT, Actor_ID NUMBER);"
      },
      {
        "question": "Please List out the Actors name?",
        "query": "SELECT name FROM actor",
        "schema": "CREATE TABLE actor (Name TEXT, age NUMBER, Actor_ID NUMBER, Musical_ID NUMBER, Character TEXT, Duration TEXT);"
      }
    ],
    [
      {
        "question": "Which nominees have nominated musicals for \"Tony Award\"?",
        "query": "SELECT DISTINCT nominee FROM musical WHERE award = \"Tony Award\"",
        "schema": "CREATE TABLE musical (Musical_ID NUMBER, Category TEXT, Name TEXT, Result TEXT, Nominee TEXT, Award TEXT);"
      },
      {
        "question": "Which nominees have nominated musicals for \"Drama Desk Award\"?",
        "query": "SELECT DISTINCT nominee FROM musical WHERE award = \"Drama Desk Award\"",
        "schema": "CREATE TABLE musical (Result TEXT, Name TEXT, Musical_ID NUMBER, Award TEXT, Category TEXT, Nominee TEXT);"
      },
      {
        "question": "Which of these have nominated musicals for both \"Tony Award\" and \"Drama Desk Award\"?",
        "query": "SELECT nominee FROM musical WHERE award = \"Tony Award\" INTERSECT SELECT nominee FROM musical WHERE award = \"Drama Desk Award\"",
        "schema": "CREATE TABLE musical (Musical_ID NUMBER, Award TEXT, Name TEXT, Result TEXT, Nominee TEXT, Category TEXT);"
      }
    ],
    [
      {
        "question": "What 1986 movie was nominated for a Tony Award for Best Book of a Musical?",
        "query": "SELECT name FROM musical WHERE YEAR = 1986 AND category = 'Best Book of a Musical' AND RESULT = 'Nominated'",
        "schema": "CREATE TABLE musical (Award TEXT, Name TEXT, Category TEXT, Result TEXT, Year NUMBER, Musical_ID NUMBER, Nominee TEXT); CREATE TABLE actor (Musical_ID NUMBER);"
      },
      {
        "question": "How many actors appeared in it?",
        "query": "SELECT COUNT ( t1.name ) FROM actor AS t1 JOIN musical AS t2 ON t1.musical_id = t2.musical_id WHERE t2.year = 1986 AND t2.category = 'Best Book of a Musical' AND t2.result = 'Nominated'",
        "schema": "CREATE TABLE musical (Musical_ID NUMBER, Nominee TEXT, Result TEXT, Award TEXT, Category TEXT, Name TEXT, Year NUMBER); CREATE TABLE actor (Actor_ID NUMBER, Musical_ID NUMBER, Character TEXT, Name TEXT);"
      },
      {
        "question": "What are their names?",
        "query": "SELECT t1.name FROM actor AS t1 JOIN musical AS t2 ON t1.musical_id = t2.musical_id WHERE t2.year = 1986 AND t2.category = 'Best Book of a Musical' AND t2.result = 'Nominated'",
        "schema": "CREATE TABLE actor (Character TEXT, Musical_ID NUMBER, Actor_ID NUMBER, Name TEXT); CREATE TABLE musical (Nominee TEXT, Award TEXT, Year NUMBER, Name TEXT, Musical_ID NUMBER, Result TEXT, Category TEXT);"
      }
    ],
    [
      {
        "question": "Can you list the awards of the musical nominee \"Bob Fosse\"?",
        "query": "SELECT DISTINCT award FROM musical WHERE nominee = \"Bob Fosse\"",
        "schema": "CREATE TABLE actor (Musical_ID NUMBER, Character TEXT, Name TEXT, Actor_ID NUMBER); CREATE TABLE musical (Musical_ID NUMBER, Nominee TEXT, Name TEXT, Result TEXT, Category TEXT, Award TEXT);"
      },
      {
        "question": "Can you list the awards of the musical nominee \"Cleavant Derricks\"?",
        "query": "SELECT DISTINCT award FROM musical WHERE nominee = \"Cleavant Derricks\"",
        "schema": "CREATE TABLE musical (Musical_ID NUMBER, Result TEXT, Category TEXT, Name TEXT, Award TEXT, Nominee TEXT); CREATE TABLE actor (Name TEXT, Character TEXT, Musical_ID NUMBER, Actor_ID NUMBER);"
      },
      {
        "question": "What categories did Cleavant Derricks win for?",
        "query": "SELECT category FROM musical WHERE nominee = \"Cleavant Derricks\" AND RESULT = \"Won\"",
        "schema": "CREATE TABLE musical (Nominee TEXT, Award TEXT, Name TEXT, Result TEXT, Musical_ID NUMBER, Category TEXT); CREATE TABLE actor (Character TEXT, Name TEXT, Musical_ID NUMBER, Actor_ID NUMBER);"
      },
      {
        "question": "What categories were Cleavant Derrick nominated for?",
        "query": "SELECT category FROM musical WHERE nominee = \"Cleavant Derricks\" AND RESULT = \"Nominated\"",
        "schema": "CREATE TABLE actor (Actor_ID NUMBER, Name TEXT, Musical_ID NUMBER, Character TEXT); CREATE TABLE musical (Category TEXT, Nominee TEXT, Name TEXT, Musical_ID NUMBER, Award TEXT, Result TEXT);"
      },
      {
        "question": "What categories did Bob Fosse win in?",
        "query": "SELECT category FROM musical WHERE nominee = \"Bob Fosse\" AND RESULT = \"Won\"",
        "schema": "CREATE TABLE actor (Character TEXT, Musical_ID NUMBER, Actor_ID NUMBER, Name TEXT); CREATE TABLE musical (Name TEXT, Award TEXT, Nominee TEXT, Musical_ID NUMBER, Category TEXT, Result TEXT);"
      }
    ],
    [
      {
        "question": "How many times has Bob Fosse been nominated?",
        "query": "SELECT COUNT ( * ) FROM musical WHERE nominee = \"Bob Fosse\"",
        "schema": "CREATE TABLE actor (Name TEXT, Character TEXT, Actor_ID NUMBER, Musical_ID NUMBER); CREATE TABLE musical (Nominee TEXT, Award TEXT, Result TEXT, Name TEXT);"
      }
    ],
    [
      {
        "question": "Which musician has the most number of actors who have appeared in the musicals? | Did you want the name of the musical? | Yes",
        "query": "SELECT t2.name FROM actor AS t1 JOIN musical AS t2 ON t1.musical_id = t2.musical_id GROUP BY t1.musical_id ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE actor (Actor_ID NUMBER, Name TEXT, Musical_ID NUMBER); CREATE TABLE musical (Musical_ID NUMBER, Name TEXT);"
      },
      {
        "question": "From which year is it?",
        "query": "SELECT t2.year FROM actor AS t1 JOIN musical AS t2 ON t1.musical_id = t2.musical_id GROUP BY t1.musical_id ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE actor (Actor_ID NUMBER, Name TEXT, Musical_ID NUMBER); CREATE TABLE musical (Name TEXT, Musical_ID NUMBER, Year NUMBER);"
      },
      {
        "question": "What is the musical id of  Lou Carpenter?",
        "query": "SELECT t2.musical_id FROM actor AS t1 JOIN musical AS t2 ON t1.musical_id = t2.musical_id WHERE t1.character = \"Lou Carpenter\"",
        "schema": "CREATE TABLE actor (Musical_ID NUMBER, Actor_ID NUMBER, Name TEXT, Character TEXT); CREATE TABLE musical (Musical_ID NUMBER, Year NUMBER, Name TEXT);"
      }
    ],
    [
      {
        "question": "which musical ids showed up at least three times in the actor table?",
        "query": "SELECT t2.musical_id FROM actor AS t1 JOIN musical AS t2 ON t1.musical_id = t2.musical_id GROUP BY t1.musical_id HAVING COUNT ( * ) > = 3",
        "schema": "CREATE TABLE actor (Musical_ID NUMBER, Actor_ID NUMBER); CREATE TABLE musical (Musical_ID NUMBER, Name TEXT, Result TEXT);"
      },
      {
        "question": "What year is that musical with id 6?",
        "query": "SELECT DISTINCT ( t2.year ) FROM actor AS t1 JOIN musical AS t2 ON t1.musical_id = t2.musical_id WHERE t2.musical_id = 6",
        "schema": "CREATE TABLE musical (Musical_ID NUMBER, Name TEXT, Year NUMBER, Result TEXT); CREATE TABLE actor (Actor_ID NUMBER, Musical_ID NUMBER);"
      },
      {
        "question": "And what's the name for that musical with ID 6?",
        "query": "SELECT DISTINCT ( t2.name ) FROM actor AS t1 JOIN musical AS t2 ON t1.musical_id = t2.musical_id WHERE t2.musical_id = 6",
        "schema": "CREATE TABLE actor (Name TEXT, Musical_ID NUMBER, Actor_ID NUMBER); CREATE TABLE musical (Name TEXT, Musical_ID NUMBER, Result TEXT, Year NUMBER);"
      }
    ],
    [
      {
        "question": "list the names of the musicals with more than three actors",
        "query": "SELECT t2.name FROM actor AS t1 JOIN musical AS t2 ON t1.musical_id = t2.musical_id GROUP BY t1.musical_id HAVING COUNT ( * ) > 3",
        "schema": "CREATE TABLE musical (Category TEXT, Musical_ID NUMBER, Name TEXT); CREATE TABLE actor (Actor_ID NUMBER, Name TEXT, Musical_ID NUMBER);"
      }
    ]
  ],
  "coffee_shop": [
    [
      {
        "question": "what is the average level of membership?",
        "query": "SELECT AVG ( level_of_membership ) FROM member",
        "schema": "CREATE TABLE happy_hour_member (Member_ID NUMBER, Total_amount NUMBER); CREATE TABLE member (Member_ID NUMBER, Membership_card TEXT, Level_of_membership NUMBER, Age NUMBER);"
      },
      {
        "question": "How many membership cards are black?",
        "query": "SELECT COUNT ( * ) FROM member WHERE membership_card = \"Black\"",
        "schema": "CREATE TABLE member (Name TEXT, Age NUMBER, Membership_card TEXT, Level_of_membership NUMBER, Member_ID NUMBER); CREATE TABLE happy_hour_member (Member_ID NUMBER, Total_amount NUMBER);"
      },
      {
        "question": "what's the average time of purchase for white membership card?",
        "query": "SELECT AVG ( time_of_purchase ) FROM member WHERE membership_card = \"White\"",
        "schema": "CREATE TABLE member (Age NUMBER, Time_of_purchase NUMBER, Name TEXT, Level_of_membership NUMBER, Membership_card TEXT, Member_ID NUMBER); CREATE TABLE happy_hour_member (Member_ID NUMBER, Total_amount NUMBER);"
      },
      {
        "question": "What are their names?",
        "query": "SELECT name FROM member WHERE membership_card = \"White\"",
        "schema": "CREATE TABLE member (Level_of_membership NUMBER, Age NUMBER, Member_ID NUMBER, Name TEXT, Membership_card TEXT, Time_of_purchase NUMBER); CREATE TABLE happy_hour_member (Member_ID NUMBER, Total_amount NUMBER);"
      }
    ],
    [
      {
        "question": "how many membership cards? | There are 2 different membership cards. | what is age of Ashby Lazale",
        "query": "SELECT age FROM member WHERE name = 'Ashby, Lazale'",
        "schema": "CREATE TABLE member (Membership_card TEXT, Age NUMBER, Name TEXT, Member_ID NUMBER);"
      },
      {
        "question": "how many time of purchase in ashby lazale",
        "query": "SELECT time_of_purchase FROM member WHERE name = 'Ashby, Lazale'",
        "schema": "CREATE TABLE member (Name TEXT, Membership_card TEXT, Age NUMBER, Time_of_purchase NUMBER, Member_ID NUMBER);"
      },
      {
        "question": "Level of membership Breton, Robert",
        "query": "SELECT level_of_membership FROM member WHERE name = 'Breton, Robert'",
        "schema": "CREATE TABLE member (Member_ID NUMBER, Time_of_purchase NUMBER, Age NUMBER, Level_of_membership NUMBER, Membership_card TEXT, Name TEXT);"
      }
    ],
    [
      {
        "question": "What is the membership card of Breton,Robert?",
        "query": "SELECT membership_card FROM member WHERE name = 'Breton, Robert'",
        "schema": "CREATE TABLE member (Name TEXT, Membership_card TEXT, Member_ID NUMBER);"
      },
      {
        "question": "What is the age of Breton,Robert?",
        "query": "SELECT age FROM member WHERE name = 'Breton, Robert'",
        "schema": "CREATE TABLE member (Member_ID NUMBER, Name TEXT, Membership_card TEXT, Age NUMBER);"
      }
    ],
    [
      {
        "question": "Which store has the most staff? | Do  you  want  to get  the shop ID which has the  most  staff? | yes, please",
        "query": "SELECT shop_id FROM shop ORDER BY num_of_staff DESC LIMIT 1",
        "schema": "CREATE TABLE shop (Address TEXT, Num_of_staff TEXT, Shop_ID NUMBER); CREATE TABLE happy_hour (Shop_ID NUMBER);"
      },
      {
        "question": "Which shop has a happy hour in may? | Do  you  want  to get  shop  ID  or  another attribute? | shop id",
        "query": "SELECT t1.shop_id FROM shop AS t1 JOIN happy_hour AS t2 ON t1.shop_id = t2.shop_id WHERE MONTH = 'May'",
        "schema": "CREATE TABLE shop (Shop_ID NUMBER, Num_of_staff TEXT, Address TEXT); CREATE TABLE happy_hour (Shop_ID NUMBER, Month TEXT);"
      },
      {
        "question": "Can you also show me their addresses ? | Here are the addresses of shops that have happy hours in may | Can you show me them with their corresponding shop ids?",
        "query": "SELECT t1.address , t1.shop_id FROM shop AS t1 JOIN happy_hour AS t2 ON t1.shop_id = t2.shop_id WHERE MONTH = 'May'",
        "schema": "CREATE TABLE shop (Shop_ID NUMBER, Address TEXT, Num_of_staff TEXT); CREATE TABLE happy_hour (Shop_ID NUMBER, Month TEXT);"
      }
    ],
    [
      {
        "question": "whats he average number of staffs in charge",
        "query": "SELECT AVG ( num_of_shaff_in_charge ) FROM happy_hour",
        "schema": "CREATE TABLE happy_hour (Num_of_shaff_in_charge NUMBER); CREATE TABLE happy_hour_member (Member_ID NUMBER); CREATE TABLE shop (Shop_ID NUMBER, Num_of_staff TEXT);"
      },
      {
        "question": "how many months in total",
        "query": "SELECT COUNT ( DISTINCT MONTH ) FROM happy_hour",
        "schema": "CREATE TABLE happy_hour_member (Member_ID NUMBER, Total_amount NUMBER); CREATE TABLE shop (Num_of_staff TEXT, Shop_ID NUMBER); CREATE TABLE happy_hour (Month TEXT, Num_of_shaff_in_charge NUMBER, HH_ID NUMBER);"
      },
      {
        "question": "which months have more than 2 happy hours",
        "query": "SELECT MONTH FROM happy_hour GROUP BY MONTH HAVING COUNT ( * ) > 2",
        "schema": "CREATE TABLE shop (Shop_ID NUMBER, Num_of_staff TEXT); CREATE TABLE happy_hour (HH_ID NUMBER, Num_of_shaff_in_charge NUMBER, Month TEXT); CREATE TABLE happy_hour_member (Total_amount NUMBER, Member_ID NUMBER);"
      }
    ],
    [
      {
        "question": "How many shops have a score of above 37?",
        "query": "SELECT COUNT ( * ) FROM shop WHERE score > 37",
        "schema": "CREATE TABLE happy_hour (Shop_ID NUMBER); CREATE TABLE shop (Shop_ID NUMBER, Score NUMBER, Num_of_staff TEXT, Address TEXT);"
      },
      {
        "question": "Which shop has the lowest number of staff? | The shop with ID 1 has  the lowest number of staff. | What is the average number of workers for all the shops?",
        "query": "SELECT AVG ( num_of_staff ) FROM shop",
        "schema": "CREATE TABLE shop (Num_of_staff TEXT, Address TEXT, Shop_ID NUMBER, Score NUMBER); CREATE TABLE happy_hour (Shop_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Find the ids and names of members who are under age 30",
        "query": "SELECT name , member_id FROM member WHERE age < 30",
        "schema": "CREATE TABLE member (Name TEXT, Age NUMBER, Member_ID NUMBER); CREATE TABLE happy_hour_member (Member_ID NUMBER);"
      },
      {
        "question": "Please find the ids and names of members with black membership card.",
        "query": "SELECT name , member_id FROM member WHERE membership_card = 'Black'",
        "schema": "CREATE TABLE happy_hour_member (Member_ID NUMBER); CREATE TABLE member (Membership_card TEXT, Name TEXT, Age NUMBER, Member_ID NUMBER);"
      },
      {
        "question": "Hmmm. Can you also show me the ids and names of members who are over age 30?",
        "query": "SELECT name , member_id FROM member WHERE membership_card = 'Black' OR age > 30",
        "schema": "CREATE TABLE member (Age NUMBER, Member_ID NUMBER, Name TEXT, Membership_card TEXT); CREATE TABLE happy_hour_member (Member_ID NUMBER);"
      },
      {
        "question": "How many of these members have a black membership card?",
        "query": "SELECT COUNT ( * ) FROM member WHERE membership_card = 'Black' OR age > 30",
        "schema": "CREATE TABLE member (Name TEXT, Membership_card TEXT, Age NUMBER, Member_ID NUMBER); CREATE TABLE happy_hour_member (Member_ID NUMBER);"
      },
      {
        "question": "Can you please show me their names?",
        "query": "SELECT name FROM member WHERE membership_card = 'Black' OR age > 30",
        "schema": "CREATE TABLE happy_hour_member (Member_ID NUMBER); CREATE TABLE member (Member_ID NUMBER, Age NUMBER, Name TEXT, Membership_card TEXT);"
      }
    ],
    [
      {
        "question": "I'd like to know how many staff are in charge in June?",
        "query": "SELECT num_of_shaff_in_charge FROM happy_hour WHERE MONTH = \"June\"",
        "schema": "CREATE TABLE happy_hour (Num_of_shaff_in_charge NUMBER, Month TEXT); CREATE TABLE shop (Num_of_staff TEXT, Shop_ID NUMBER);"
      },
      {
        "question": "How many places offer happy hour?",
        "query": "SELECT COUNT ( DISTINCT shop_id ) FROM happy_hour",
        "schema": "CREATE TABLE shop (Num_of_staff TEXT, Shop_ID NUMBER); CREATE TABLE happy_hour (HH_ID NUMBER, Month TEXT, Num_of_shaff_in_charge NUMBER, Shop_ID NUMBER);"
      },
      {
        "question": "Which of those 5 distinct shops have the most happy hours? | Shop id 1 has the most happy hours | Can you tell me which shop ID offers the least happy hours?",
        "query": "SELECT shop_id FROM happy_hour GROUP BY shop_id ORDER BY COUNT ( * ) ASC LIMIT 1",
        "schema": "CREATE TABLE shop (Num_of_staff TEXT, Shop_ID NUMBER); CREATE TABLE happy_hour (Shop_ID NUMBER, HH_ID NUMBER, Month TEXT, Num_of_shaff_in_charge NUMBER);"
      }
    ],
    [
      {
        "question": "Which address has members younger than 30?",
        "query": "SELECT address FROM member WHERE age < 30",
        "schema": "CREATE TABLE shop (Address TEXT); CREATE TABLE member (Age NUMBER, Address TEXT);"
      },
      {
        "question": "Which address has members older than 40?",
        "query": "SELECT address FROM member WHERE age > 40",
        "schema": "CREATE TABLE shop (Address TEXT); CREATE TABLE member (Address TEXT, Age NUMBER);"
      },
      {
        "question": "Which address has members younger than 30 and older than 40?",
        "query": "SELECT address FROM member WHERE age < 30 INTERSECT SELECT address FROM member WHERE age > 40",
        "schema": "CREATE TABLE shop (Address TEXT); CREATE TABLE member (Age NUMBER, Address TEXT);"
      }
    ],
    [
      {
        "question": "What are the average score and average staff number of all shops?",
        "query": "SELECT AVG ( num_of_staff ) , AVG ( score ) FROM shop",
        "schema": "CREATE TABLE shop (Score NUMBER, Shop_ID NUMBER, Num_of_staff TEXT); CREATE TABLE happy_hour (Shop_ID NUMBER);"
      },
      {
        "question": "Which shop has the highest score?",
        "query": "SELECT * FROM shop ORDER BY score DESC LIMIT 1",
        "schema": "CREATE TABLE happy_hour (Shop_ID NUMBER); CREATE TABLE shop (Shop_ID NUMBER, Score NUMBER, Num_of_staff TEXT);"
      },
      {
        "question": "How many shops have more staff than shop 10?",
        "query": "SELECT COUNT ( * ) FROM shop WHERE num_of_staff > ( SELECT num_of_staff FROM shop WHERE shop_id = 10 )",
        "schema": "CREATE TABLE happy_hour (Shop_ID NUMBER); CREATE TABLE shop (Num_of_staff TEXT, Shop_ID NUMBER, Score NUMBER);"
      },
      {
        "question": "And are there any other shops on the same street? | What street are you referring to? | The street shop 10 is on.",
        "query": "SELECT * FROM shop WHERE address = ( SELECT address FROM shop WHERE shop_id = 10 ) AND shop_id ! = 10",
        "schema": "CREATE TABLE shop (Score NUMBER, Shop_ID NUMBER, Num_of_staff TEXT, Address TEXT); CREATE TABLE happy_hour (Shop_ID NUMBER);"
      }
    ]
  ],
  "insurance_policies": [
    [
      {
        "question": "how many policy types are there?",
        "query": "SELECT COUNT ( DISTINCT policy_type_code ) FROM customer_policies",
        "schema": "CREATE TABLE Settlements (Customer_Policy_ID NUMBER); CREATE TABLE Claims (Policy_ID NUMBER); CREATE TABLE Customer_Policies (Customer_ID NUMBER, Policy_Type_Code TEXT, Policy_ID NUMBER); CREATE TABLE Customers (Customer_ID NUMBER);"
      },
      {
        "question": "what are those types?",
        "query": "SELECT policy_type_code FROM customer_policies GROUP BY policy_type_code",
        "schema": "CREATE TABLE Customer_Policies (Customer_ID NUMBER, Policy_Type_Code TEXT, Policy_ID NUMBER); CREATE TABLE Customers (Customer_ID NUMBER); CREATE TABLE Settlements (Customer_Policy_ID NUMBER); CREATE TABLE Claims (Policy_ID NUMBER);"
      },
      {
        "question": "how many times has a customer chosen car | There are 4 times that a customer chose a policy with type code car. | how about life?",
        "query": "SELECT COUNT ( * ) FROM customer_policies WHERE policy_type_code = \"Life\"",
        "schema": "CREATE TABLE Claims (Policy_ID NUMBER); CREATE TABLE Customers (Customer_ID NUMBER); CREATE TABLE Settlements (Customer_Policy_ID NUMBER); CREATE TABLE Customer_Policies (Policy_Type_Code TEXT, Customer_ID NUMBER, Start_Date TIME, Policy_ID NUMBER);"
      },
      {
        "question": "what about for each of the last two policies?",
        "query": "SELECT COUNT ( * ) , policy_type_code FROM customer_policies GROUP BY policy_type_code HAVING policy_type_code = \"Life\" OR policy_type_code = \"Car\"",
        "schema": "CREATE TABLE Claims (Policy_ID NUMBER); CREATE TABLE Settlements (Customer_Policy_ID NUMBER); CREATE TABLE Customers (Customer_ID NUMBER); CREATE TABLE Customer_Policies (Start_Date TIME, Policy_Type_Code TEXT, Policy_ID NUMBER, Customer_ID NUMBER);"
      },
      {
        "question": "Which of those has the highest count of customers?",
        "query": "SELECT policy_type_code FROM customer_policies GROUP BY policy_type_code ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Customers (Customer_ID NUMBER); CREATE TABLE Customer_Policies (Customer_ID NUMBER, Start_Date TIME, Policy_Type_Code TEXT, Policy_ID NUMBER); CREATE TABLE Claims (Policy_ID NUMBER); CREATE TABLE Settlements (Customer_Policy_ID NUMBER);"
      },
      {
        "question": "And which has least?",
        "query": "SELECT policy_type_code FROM customer_policies GROUP BY policy_type_code ORDER BY COUNT ( * ) LIMIT 1",
        "schema": "CREATE TABLE Claims (Policy_ID NUMBER); CREATE TABLE Settlements (Customer_Policy_ID NUMBER); CREATE TABLE Customer_Policies (Policy_ID NUMBER, Policy_Type_Code TEXT, Start_Date TIME, Customer_ID NUMBER); CREATE TABLE Customers (Customer_ID NUMBER);"
      },
      {
        "question": "Which policy had the most, again?",
        "query": "SELECT policy_type_code FROM customer_policies GROUP BY policy_type_code ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Claims (Policy_ID NUMBER); CREATE TABLE Settlements (Customer_Policy_ID NUMBER); CREATE TABLE Customer_Policies (Policy_Type_Code TEXT, Policy_ID NUMBER, Start_Date TIME, Customer_ID NUMBER); CREATE TABLE Customers (Customer_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Hi there! From this database, what is the most popular payment method?",
        "query": "SELECT payment_method_code FROM payments GROUP BY payment_method_code ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Payments (Amount_Payment NUMBER, Payment_ID NUMBER, Payment_Method_Code TEXT);"
      }
    ],
    [
      {
        "question": "tell me how many settlements each claim responds to | Did you mean to ask for the claim id and number of settlements that each claim responds to? | list the claim  ids",
        "query": "SELECT claim_id FROM claims",
        "schema": "CREATE TABLE Claims (Claim_ID NUMBER); CREATE TABLE Settlements (Settlement_ID NUMBER, Claim_ID NUMBER);"
      },
      {
        "question": "list all the amounts claimed",
        "query": "SELECT amount_claimed FROM claims",
        "schema": "CREATE TABLE Settlements (Settlement_ID NUMBER, Claim_ID NUMBER, Amount_Claimed NUMBER, Amount_Settled NUMBER); CREATE TABLE Claims (Claim_ID NUMBER, Amount_Settled NUMBER, Amount_Claimed NUMBER);"
      }
    ],
    [
      {
        "question": "What date was the claim made?",
        "query": "SELECT date_claim_made FROM claims",
        "schema": "CREATE TABLE Payments (Date_Payment_Made TIME); CREATE TABLE Settlements (Claim_ID NUMBER, Date_Claim_Settled TIME, Date_Claim_Made TIME); CREATE TABLE Claims (Date_Claim_Made TIME, Policy_ID NUMBER, Date_Claim_Settled TIME, Claim_ID NUMBER); CREATE TABLE Customer_Policies (Start_Date TIME, Policy_ID NUMBER);"
      },
      {
        "question": "Looking at the claim for 2018-06-14 what date was it settled?",
        "query": "SELECT date_claim_settled FROM claims WHERE date_claim_made = '2018-06-14'",
        "schema": "CREATE TABLE Claims (Claim_ID NUMBER, Date_Claim_Made TIME, Policy_ID NUMBER, Amount_Settled NUMBER, Date_Claim_Settled TIME); CREATE TABLE Settlements (Date_Claim_Made TIME, Date_Claim_Settled TIME, Claim_ID NUMBER); CREATE TABLE Payments (Date_Payment_Made TIME); CREATE TABLE Customer_Policies (Start_Date TIME, Policy_ID NUMBER);"
      }
    ],
    [
      {
        "question": "what's the policy id for claim id 143?",
        "query": "SELECT policy_id FROM claims WHERE claim_id = \"143\"",
        "schema": "CREATE TABLE Customers (Customer_ID NUMBER); CREATE TABLE Customer_Policies (Policy_Type_Code TEXT, Policy_ID NUMBER, Customer_ID NUMBER); CREATE TABLE Settlements (Customer_Policy_ID NUMBER, Claim_ID NUMBER); CREATE TABLE Claims (Claim_ID NUMBER, Policy_ID NUMBER);"
      },
      {
        "question": "What's the most recent claim date?",
        "query": "SELECT date_claim_settled FROM claims ORDER BY date_claim_settled DESC LIMIT 1",
        "schema": "CREATE TABLE Claims (Date_Claim_Made TIME, Claim_ID NUMBER, Date_Claim_Settled TIME, Policy_ID NUMBER); CREATE TABLE Customer_Policies (Policy_ID NUMBER, Policy_Type_Code TEXT, Start_Date TIME, Customer_ID NUMBER); CREATE TABLE Settlements (Customer_Policy_ID NUMBER, Date_Claim_Made TIME, Claim_ID NUMBER); CREATE TABLE Customers (Customer_ID NUMBER);"
      },
      {
        "question": "what was the amount claimed? | On this day? | yes",
        "query": "SELECT amount_claimed FROM claims WHERE date_claim_settled = \"2018-03-09\"",
        "schema": "CREATE TABLE Settlements (Date_Claim_Made TIME, Amount_Claimed NUMBER, Customer_Policy_ID NUMBER, Claim_ID NUMBER, Amount_Settled NUMBER); CREATE TABLE Customer_Policies (Customer_ID NUMBER, Start_Date TIME, Policy_ID NUMBER, Policy_Type_Code TEXT); CREATE TABLE Customers (Customer_ID NUMBER); CREATE TABLE Claims (Date_Claim_Made TIME, Amount_Claimed NUMBER, Amount_Settled NUMBER, Claim_ID NUMBER, Policy_ID NUMBER, Date_Claim_Settled TIME);"
      }
    ],
    [
      {
        "question": "Hello, I was wondering how many claims are made?",
        "query": "SELECT COUNT ( * ) FROM claims",
        "schema": "CREATE TABLE Claims (Claim_ID NUMBER, Amount_Claimed NUMBER, Policy_ID NUMBER); CREATE TABLE Settlements (Claim_ID NUMBER); CREATE TABLE Customers (Customer_ID NUMBER); CREATE TABLE Customer_Policies (Policy_ID NUMBER, Customer_ID NUMBER);"
      },
      {
        "question": "About how many settlements does each claim correspond to?",
        "query": "SELECT t1.claim_id , COUNT ( * ) FROM claims AS t1 JOIN settlements AS t2 ON t1.claim_id = t2.claim_id GROUP BY t1.claim_id",
        "schema": "CREATE TABLE Claims (Policy_ID NUMBER, Amount_Claimed NUMBER, Claim_ID NUMBER); CREATE TABLE Settlements (Claim_ID NUMBER, Settlement_ID NUMBER, Date_Claim_Made TIME, Date_Claim_Settled TIME, Amount_Claimed NUMBER); CREATE TABLE Customer_Policies (Policy_ID NUMBER, Customer_ID NUMBER); CREATE TABLE Customers (Customer_ID NUMBER);"
      },
      {
        "question": "No problem, what is the average amount of days for a claim to be settled?",
        "query": "SELECT AVG ( date_claim_settled - date_claim_made ) FROM claims",
        "schema": "CREATE TABLE Customer_Policies (Policy_ID NUMBER, Customer_ID NUMBER); CREATE TABLE Claims (Amount_Settled NUMBER, Amount_Claimed NUMBER, Date_Claim_Made TIME, Claim_ID NUMBER, Policy_ID NUMBER, Date_Claim_Settled TIME); CREATE TABLE Customers (Customer_ID NUMBER); CREATE TABLE Settlements (Claim_ID NUMBER, Amount_Settled NUMBER, Amount_Claimed NUMBER, Date_Claim_Settled TIME, Date_Claim_Made TIME, Settlement_ID NUMBER);"
      },
      {
        "question": "Claim number 801 had 4 settlements, what was the largest one? | Do you mean largest in terms of the amount claimed or amount settled? | Yes, both.",
        "query": "SELECT t2.settlement_id,t2.amount_claimed,t2.amount_settled FROM claims AS t1 JOIN settlements AS t2 ON t1.claim_id = t2.claim_id WHERE t1.claim_id = 801",
        "schema": "CREATE TABLE Customer_Policies (Customer_ID NUMBER, Policy_ID NUMBER); CREATE TABLE Settlements (Claim_ID NUMBER, Settlement_ID NUMBER, Amount_Claimed NUMBER, Date_Claim_Made TIME, Date_Claim_Settled TIME, Amount_Settled NUMBER); CREATE TABLE Claims (Claim_ID NUMBER, Policy_ID NUMBER, Amount_Claimed NUMBER, Amount_Settled NUMBER, Date_Claim_Made TIME, Date_Claim_Settled TIME); CREATE TABLE Customers (Customer_ID NUMBER);"
      }
    ],
    [
      {
        "question": "hi I was wondering how many policies Ellsworth Paucek has?",
        "query": "SELECT COUNT ( * ) FROM customers AS t1 JOIN customer_policies AS t2 ON t1.customer_id = t2.customer_id WHERE t1.customer_details = \"Ellsworth Paucek\"",
        "schema": "CREATE TABLE Customers (Customer_ID NUMBER, Customer_Details TEXT); CREATE TABLE Customer_Policies (Customer_ID NUMBER, Policy_Type_Code TEXT, Policy_ID NUMBER); CREATE TABLE Settlements (Customer_Policy_ID NUMBER); CREATE TABLE Claims (Policy_ID NUMBER);"
      },
      {
        "question": "do you know how many total customers had more than 1 policy?",
        "query": "SELECT COUNT ( * ) FROM ( SELECT t1.customer_details , t1.customer_id FROM customers AS t1 JOIN customer_policies AS t2 ON t1.customer_id = t2.customer_id GROUP BY t1.customer_id HAVING COUNT ( * ) > 1 )",
        "schema": "CREATE TABLE Claims (Policy_ID NUMBER); CREATE TABLE Customers (Customer_Details TEXT, Customer_ID NUMBER); CREATE TABLE Customer_Policies (Customer_ID NUMBER, Policy_Type_Code TEXT, Policy_ID NUMBER); CREATE TABLE Settlements (Customer_Policy_ID NUMBER);"
      },
      {
        "question": "could you tell me those four customer's details and their ID?",
        "query": "SELECT t1.customer_details , t1.customer_id FROM customers AS t1 JOIN customer_policies AS t2 ON t1.customer_id = t2.customer_id GROUP BY t1.customer_id HAVING COUNT ( * ) > 1",
        "schema": "CREATE TABLE Settlements (Customer_Policy_ID NUMBER); CREATE TABLE Claims (Policy_ID NUMBER); CREATE TABLE Customer_Policies (Policy_Type_Code TEXT, Policy_ID NUMBER, Customer_ID NUMBER); CREATE TABLE Customers (Customer_ID NUMBER, Customer_Details TEXT);"
      }
    ],
    [
      {
        "question": "Which kind of policy type was chosen by the most customers?",
        "query": "SELECT policy_type_code FROM customer_policies GROUP BY policy_type_code ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Customers (Customer_ID NUMBER); CREATE TABLE Customer_Policies (Customer_ID NUMBER, Policy_Type_Code TEXT, Policy_ID NUMBER); CREATE TABLE Claims (Policy_ID NUMBER);"
      },
      {
        "question": "what about the least?",
        "query": "SELECT policy_type_code FROM customer_policies GROUP BY policy_type_code ORDER BY COUNT ( * ) LIMIT 1",
        "schema": "CREATE TABLE Customer_Policies (Policy_Type_Code TEXT, Customer_ID NUMBER, Policy_ID NUMBER); CREATE TABLE Customers (Customer_ID NUMBER); CREATE TABLE Claims (Policy_ID NUMBER);"
      },
      {
        "question": "What is Policy_Type_Code of Customer_ID 3?",
        "query": "SELECT policy_type_code FROM customer_policies WHERE customer_id = '3'",
        "schema": "CREATE TABLE Claims (Policy_ID NUMBER); CREATE TABLE Customers (Customer_ID NUMBER); CREATE TABLE Customer_Policies (Policy_ID NUMBER, Policy_Type_Code TEXT, Customer_ID NUMBER);"
      },
      {
        "question": "What is the Start Date of Policy ID 143?",
        "query": "SELECT start_date FROM customer_policies WHERE policy_id = '143'",
        "schema": "CREATE TABLE Claims (Date_Claim_Made TIME, Policy_ID NUMBER); CREATE TABLE Customers (Customer_ID NUMBER); CREATE TABLE Customer_Policies (Start_Date TIME, Customer_ID NUMBER, Policy_Type_Code TEXT, Policy_ID NUMBER); CREATE TABLE Payments (Date_Payment_Made TIME);"
      },
      {
        "question": "What is the Policy ID of Policy Type Life?",
        "query": "SELECT policy_id FROM customer_policies WHERE policy_type_code = 'Life'",
        "schema": "CREATE TABLE Payments (Date_Payment_Made TIME); CREATE TABLE Claims (Date_Claim_Made TIME, Policy_ID NUMBER); CREATE TABLE Customers (Customer_ID NUMBER); CREATE TABLE Customer_Policies (Start_Date TIME, Policy_Type_Code TEXT, Policy_ID NUMBER, Customer_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What is the average payment method used to process payments? | Sorry. Can you clarify your question? | How many payment methods were used to process payments?",
        "query": "SELECT COUNT ( DISTINCT payment_method_code ) FROM payments",
        "schema": "CREATE TABLE Payments (Payment_ID NUMBER, Payment_Method_Code TEXT, Amount_Payment NUMBER);"
      },
      {
        "question": "What payment method is used to process payments the most?",
        "query": "SELECT payment_method_code FROM payments GROUP BY payment_method_code ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Payments (Payment_Method_Code TEXT, Amount_Payment NUMBER, Payment_ID NUMBER);"
      },
      {
        "question": "And the least used payment method?",
        "query": "SELECT payment_method_code FROM payments GROUP BY payment_method_code ORDER BY COUNT ( * ) ASC LIMIT 1",
        "schema": "CREATE TABLE Payments (Payment_ID NUMBER, Payment_Method_Code TEXT, Amount_Payment NUMBER);"
      },
      {
        "question": "How many payment methods has American Express processed?",
        "query": "SELECT payment_method_code, COUNT ( * ) FROM payments GROUP BY payment_method_code HAVING payment_method_code = \"American Express\"",
        "schema": "CREATE TABLE Payments (Payment_ID NUMBER, Amount_Payment NUMBER, Payment_Method_Code TEXT);"
      },
      {
        "question": "What about MasterCard?",
        "query": "SELECT payment_method_code, COUNT ( * ) FROM payments WHERE payment_method_code = \"MasterCard\"",
        "schema": "CREATE TABLE Payments (Amount_Payment NUMBER, Payment_ID NUMBER, Payment_Method_Code TEXT);"
      },
      {
        "question": "Can I get the names of all the payment methods used?",
        "query": "SELECT DISTINCT payment_method_code FROM payments",
        "schema": "CREATE TABLE Payments (Payment_ID NUMBER, Amount_Payment NUMBER, Payment_Method_Code TEXT);"
      }
    ],
    [
      {
        "question": "what is the name of the settlement claim with the largest claim amount? | What do you mean by the name of the settlement claim? | i mean the claim id",
        "query": "SELECT claim_id FROM claims ORDER BY amount_claimed DESC LIMIT 1",
        "schema": "CREATE TABLE Claims (Amount_Claimed NUMBER, Policy_ID NUMBER, Claim_ID NUMBER, Amount_Settled NUMBER); CREATE TABLE Settlements (Amount_Claimed NUMBER, Amount_Settled NUMBER, Claim_ID NUMBER, Settlement_ID NUMBER);"
      },
      {
        "question": "in what policy id is it in?",
        "query": "SELECT policy_id FROM claims ORDER BY amount_claimed DESC LIMIT 1",
        "schema": "CREATE TABLE Settlements (Amount_Claimed NUMBER, Customer_Policy_ID NUMBER, Claim_ID NUMBER, Settlement_ID NUMBER, Amount_Settled NUMBER); CREATE TABLE Claims (Claim_ID NUMBER, Amount_Settled NUMBER, Amount_Claimed NUMBER, Policy_ID NUMBER); CREATE TABLE Customer_Policies (Policy_ID NUMBER);"
      },
      {
        "question": "what date was the claim made?",
        "query": "SELECT date_claim_made FROM claims ORDER BY amount_claimed DESC LIMIT 1",
        "schema": "CREATE TABLE Settlements (Claim_ID NUMBER, Amount_Settled NUMBER, Settlement_ID NUMBER, Date_Claim_Made TIME, Amount_Claimed NUMBER, Customer_Policy_ID NUMBER); CREATE TABLE Claims (Date_Claim_Settled TIME, Amount_Settled NUMBER, Policy_ID NUMBER, Amount_Claimed NUMBER, Date_Claim_Made TIME, Claim_ID NUMBER); CREATE TABLE Customer_Policies (Policy_ID NUMBER);"
      }
    ],
    [
      {
        "question": "what is the claim that incurred most number of settlements? | what do you want to know about this claim? | what is the claim id?",
        "query": "SELECT t1.claim_id FROM claims AS t1 JOIN settlements AS t2 ON t1.claim_id = t2.claim_id GROUP BY t1.claim_id ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Settlements (Claim_ID NUMBER, Settlement_ID NUMBER, Amount_Claimed NUMBER); CREATE TABLE Claims (Policy_ID NUMBER, Claim_ID NUMBER, Amount_Claimed NUMBER);"
      },
      {
        "question": "what is the date that the claim was settled?",
        "query": "SELECT t2.date_claim_settled FROM claims AS t1 JOIN settlements AS t2 ON t1.claim_id = t2.claim_id GROUP BY t1.claim_id ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Claims (Date_Claim_Made TIME, Amount_Claimed NUMBER, Date_Claim_Settled TIME, Policy_ID NUMBER, Claim_ID NUMBER, Amount_Settled NUMBER); CREATE TABLE Settlements (Date_Claim_Made TIME, Claim_ID NUMBER, Date_Claim_Settled TIME, Settlement_ID NUMBER, Amount_Claimed NUMBER);"
      }
    ],
    [
      {
        "question": "Hello! Can you show me a list of all the claim IDs and their associated claim amount?",
        "query": "SELECT claim_id, amount_claimed FROM claims",
        "schema": "CREATE TABLE Claims (Amount_Claimed NUMBER, Amount_Settled NUMBER, Policy_ID NUMBER, Claim_ID NUMBER); CREATE TABLE Settlements (Claim_ID NUMBER, Amount_Claimed NUMBER); CREATE TABLE Customer_Policies (Policy_ID NUMBER);"
      },
      {
        "question": "Thank you for that!  Can you filter this list to show the rows and associated Claim IDs and amounts for the claims with a higher than average amount? | Hi sorry, can you ask this question again. | Sorry!  I'll ask it a different way...  Can you please list all claim ids which have a higher than average claim amount?",
        "query": "SELECT claim_id FROM claims WHERE amount_claimed > ( SELECT AVG ( amount_claimed ) FROM claims )",
        "schema": "CREATE TABLE Customer_Policies (Policy_ID NUMBER); CREATE TABLE Settlements (Claim_ID NUMBER, Amount_Claimed NUMBER); CREATE TABLE Claims (Amount_Claimed NUMBER, Policy_ID NUMBER, Amount_Settled NUMBER, Claim_ID NUMBER);"
      },
      {
        "question": "Great!  Can you tell me which ClaimID is associated with the largest claim amount?",
        "query": "SELECT claim_id FROM claims ORDER BY amount_claimed DESC LIMIT 1",
        "schema": "CREATE TABLE Claims (Claim_ID NUMBER, Amount_Settled NUMBER, Amount_Claimed NUMBER, Policy_ID NUMBER); CREATE TABLE Customer_Policies (Policy_ID NUMBER); CREATE TABLE Settlements (Amount_Claimed NUMBER, Claim_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Which claims caused more than 2 settlements? Please list the date the claim was made and the claim id?",
        "query": "SELECT t1.date_claim_made , t1.claim_id FROM claims AS t1 JOIN settlements AS t2 ON t1.claim_id = t2.claim_id GROUP BY t1.claim_id HAVING COUNT ( * ) > 2",
        "schema": "CREATE TABLE Claims (Date_Claim_Settled TIME, Policy_ID NUMBER, Date_Claim_Made TIME, Claim_ID NUMBER); CREATE TABLE Settlements (Date_Claim_Made TIME, Claim_ID NUMBER, Settlement_ID NUMBER, Date_Claim_Settled TIME);"
      },
      {
        "question": "Which claim had the highest claim value? Please list the date the claim was made and the claim id.",
        "query": "SELECT t1.date_claim_made , t1.claim_id FROM claims AS t1 JOIN settlements AS t2 ON t1.claim_id = t2.claim_id ORDER BY t1.amount_claimed DESC LIMIT 1",
        "schema": "CREATE TABLE Settlements (Date_Claim_Settled TIME, Settlement_ID NUMBER, Date_Claim_Made TIME, Claim_ID NUMBER); CREATE TABLE Claims (Policy_ID NUMBER, Amount_Claimed NUMBER, Claim_ID NUMBER, Date_Claim_Settled TIME, Date_Claim_Made TIME, Amount_Settled NUMBER);"
      },
      {
        "question": "What date was that claim made?",
        "query": "SELECT t1.date_claim_made FROM claims AS t1 JOIN settlements AS t2 ON t1.claim_id = t2.claim_id ORDER BY t1.amount_claimed DESC LIMIT 1",
        "schema": "CREATE TABLE Settlements (Claim_ID NUMBER, Date_Claim_Made TIME, Settlement_ID NUMBER, Amount_Claimed NUMBER, Amount_Settled NUMBER, Date_Claim_Settled TIME); CREATE TABLE Claims (Amount_Settled NUMBER, Claim_ID NUMBER, Amount_Claimed NUMBER, Date_Claim_Settled TIME, Date_Claim_Made TIME, Policy_ID NUMBER);"
      },
      {
        "question": "What date was that claim settled?",
        "query": "SELECT t1.date_claim_settled FROM claims AS t1 JOIN settlements AS t2 ON t1.claim_id = t2.claim_id ORDER BY t1.amount_claimed DESC LIMIT 1",
        "schema": "CREATE TABLE Claims (Amount_Claimed NUMBER, Amount_Settled NUMBER, Date_Claim_Settled TIME, Claim_ID NUMBER, Date_Claim_Made TIME, Policy_ID NUMBER); CREATE TABLE Settlements (Claim_ID NUMBER, Date_Claim_Settled TIME, Date_Claim_Made TIME, Amount_Claimed NUMBER, Settlement_ID NUMBER, Amount_Settled NUMBER);"
      }
    ],
    [
      {
        "question": "What days were the claims made?",
        "query": "SELECT date_claim_made FROM claims",
        "schema": "CREATE TABLE Claims (Claim_ID NUMBER, Date_Claim_Settled TIME, Policy_ID NUMBER, Date_Claim_Made TIME); CREATE TABLE Settlements (Claim_ID NUMBER, Date_Claim_Made TIME); CREATE TABLE Customer_Policies (Policy_ID NUMBER, Start_Date TIME); CREATE TABLE Payments (Date_Payment_Made TIME);"
      },
      {
        "question": "When was the earliest claim made?",
        "query": "SELECT date_claim_made FROM claims ORDER BY date_claim_made ASC LIMIT 1",
        "schema": "CREATE TABLE Customer_Policies (Policy_ID NUMBER, Start_Date TIME); CREATE TABLE Payments (Date_Payment_Made TIME); CREATE TABLE Claims (Date_Claim_Made TIME, Date_Claim_Settled TIME, Policy_ID NUMBER, Claim_ID NUMBER); CREATE TABLE Settlements (Claim_ID NUMBER, Date_Claim_Made TIME);"
      },
      {
        "question": "What was the claim ID for the earliest claim?",
        "query": "SELECT claim_id FROM claims ORDER BY date_claim_made ASC LIMIT 1",
        "schema": "CREATE TABLE Payments (Date_Payment_Made TIME); CREATE TABLE Settlements (Claim_ID NUMBER, Date_Claim_Made TIME); CREATE TABLE Claims (Date_Claim_Settled TIME, Date_Claim_Made TIME, Claim_ID NUMBER, Policy_ID NUMBER); CREATE TABLE Customer_Policies (Start_Date TIME, Policy_ID NUMBER);"
      }
    ]
  ],
  "cre_Drama_Workshop_Groups": [
    [
      {
        "question": "what are the actual delivery dates of orders with quantity 1?",
        "query": "SELECT t1.actual_delivery_date FROM customer_orders AS t1 JOIN order_items AS t2 ON t1.order_id = t2.order_id WHERE t2.order_quantity = 1",
        "schema": "CREATE TABLE Invoice_Items (Order_Quantity NUMBER, Order_Item_ID NUMBER); CREATE TABLE Order_Items (Order_Item_ID NUMBER, Order_ID NUMBER, Order_Quantity TEXT); CREATE TABLE Invoices (Order_Quantity TEXT, Order_ID NUMBER); CREATE TABLE Bookings (Actual_Delivery_Date TIME, Order_Date TIME, Planned_Delivery_Date TIME); CREATE TABLE Customer_Orders (Actual_Delivery_Date TIME, Order_Date TIME, Planned_Delivery_Date TIME, Order_ID NUMBER); CREATE TABLE Customers (Customer_ID TEXT);"
      },
      {
        "question": "what is the order date of order id 1?",
        "query": "SELECT order_date FROM customer_orders WHERE order_id = 1",
        "schema": "CREATE TABLE Customers (Customer_ID TEXT); CREATE TABLE Customer_Orders (Planned_Delivery_Date TIME, Order_ID NUMBER, Actual_Delivery_Date TIME, Customer_ID NUMBER, Order_Date TIME); CREATE TABLE Invoices (Order_ID NUMBER, Order_Item_ID NUMBER, Order_Quantity TEXT); CREATE TABLE Bookings (Planned_Delivery_Date TIME, Actual_Delivery_Date TIME, Order_Date TIME); CREATE TABLE Order_Items (Order_Quantity TEXT, Order_ID NUMBER, Order_Item_ID NUMBER); CREATE TABLE Invoice_Items (Order_Quantity NUMBER, Order_Item_ID NUMBER);"
      },
      {
        "question": "Customer id of order id 1",
        "query": "SELECT customer_id FROM customer_orders WHERE order_id = 1",
        "schema": "CREATE TABLE Invoice_Items (Order_Item_ID NUMBER, Order_Quantity NUMBER); CREATE TABLE Bookings (Order_Date TIME, Planned_Delivery_Date TIME, Actual_Delivery_Date TIME); CREATE TABLE Customers (Customer_ID TEXT, Customer_Name TEXT); CREATE TABLE Invoices (Order_Quantity TEXT, Order_Item_ID NUMBER, Order_ID NUMBER); CREATE TABLE Customer_Orders (Customer_ID NUMBER, Actual_Delivery_Date TIME, Order_Date TIME, Order_ID NUMBER, Planned_Delivery_Date TIME); CREATE TABLE Order_Items (Order_Quantity TEXT, Order_Item_ID NUMBER, Order_ID NUMBER);"
      },
      {
        "question": "what is Planned Delivery Date of customer id 516",
        "query": "SELECT planned_delivery_date FROM customer_orders WHERE customer_id = 516",
        "schema": "CREATE TABLE Invoices (Order_Quantity TEXT, Order_Item_ID NUMBER, Order_ID NUMBER); CREATE TABLE Bookings (Planned_Delivery_Date TIME, Actual_Delivery_Date TIME, Order_Date TIME); CREATE TABLE Order_Items (Order_Item_ID NUMBER, Order_ID NUMBER, Order_Quantity TEXT); CREATE TABLE Invoice_Items (Order_Quantity NUMBER, Order_Item_ID NUMBER); CREATE TABLE Customer_Orders (Order_ID NUMBER, Order_Date TIME, Actual_Delivery_Date TIME, Customer_ID NUMBER, Planned_Delivery_Date TIME); CREATE TABLE Customers (Customer_ID TEXT, Customer_Name TEXT);"
      }
    ],
    [
      {
        "question": "What is the address for FJA Filming?",
        "query": "SELECT * FROM addresses AS t1 JOIN stores AS t2 ON t1.address_id = t2.address_id WHERE t2.store_name = \"FJA Filming\"",
        "schema": "CREATE TABLE Stores (Store_Name TEXT, Address_ID NUMBER, Store_ID TEXT, Store_Email_Address TEXT); CREATE TABLE Clients (Address_ID NUMBER, Customer_Name TEXT); CREATE TABLE Bookings (Workshop_Group_ID TEXT); CREATE TABLE Customers (Address_ID NUMBER, Customer_Name TEXT); CREATE TABLE Invoice_Items (Product_ID NUMBER); CREATE TABLE Order_Items (Product_ID NUMBER); CREATE TABLE Addresses (Line_1 TEXT, State_County TEXT, Line_2 TEXT, Address_ID TEXT, City_Town TEXT); CREATE TABLE Invoices (Product_ID NUMBER); CREATE TABLE Drama_Workshop_Groups (Workshop_Group_ID NUMBER, Store_Name TEXT, Address_ID NUMBER); CREATE TABLE Performers (Address_ID NUMBER); CREATE TABLE Customer_Orders (Store_ID NUMBER); CREATE TABLE Products (Product_Description TEXT, Product_ID TEXT, Product_Name TEXT); CREATE TABLE Services (Product_Description TEXT, Workshop_Group_ID NUMBER, Product_Name TEXT);"
      },
      {
        "question": "What state is that in?",
        "query": "SELECT t1.state_county FROM addresses AS t1 JOIN stores AS t2 ON t1.address_id = t2.address_id WHERE t2.store_name = \"FJA Filming\"",
        "schema": "CREATE TABLE Bookings (Workshop_Group_ID TEXT); CREATE TABLE Services (Product_Name TEXT, Product_Description TEXT, Workshop_Group_ID NUMBER); CREATE TABLE Performers (Address_ID NUMBER); CREATE TABLE Drama_Workshop_Groups (Address_ID NUMBER, Workshop_Group_ID NUMBER, Store_Name TEXT); CREATE TABLE Customer_Orders (Store_ID NUMBER); CREATE TABLE Products (Product_Name TEXT, Product_Description TEXT, Product_ID TEXT); CREATE TABLE Clients (Customer_Name TEXT, Address_ID NUMBER); CREATE TABLE Invoice_Items (Product_ID NUMBER); CREATE TABLE Invoices (Product_ID NUMBER); CREATE TABLE Stores (Store_ID TEXT, Store_Name TEXT, Address_ID NUMBER, Store_Email_Address TEXT); CREATE TABLE Customers (Customer_Name TEXT, Address_ID NUMBER); CREATE TABLE Addresses (Line_2 TEXT, Address_ID TEXT, State_County TEXT, Line_1 TEXT, City_Town TEXT); CREATE TABLE Order_Items (Product_ID NUMBER);"
      },
      {
        "question": "What is the city?",
        "query": "SELECT t1.city_town FROM addresses AS t1 JOIN stores AS t2 ON t1.address_id = t2.address_id WHERE t2.store_name = \"FJA Filming\"",
        "schema": "CREATE TABLE Drama_Workshop_Groups (Store_Name TEXT, Address_ID NUMBER, Workshop_Group_ID NUMBER); CREATE TABLE Services (Product_Name TEXT, Workshop_Group_ID NUMBER, Product_Description TEXT); CREATE TABLE Invoices (Product_ID NUMBER); CREATE TABLE Invoice_Items (Product_ID NUMBER); CREATE TABLE Addresses (Line_1 TEXT, Line_2 TEXT, Address_ID TEXT, State_County TEXT, City_Town TEXT); CREATE TABLE Bookings (Workshop_Group_ID TEXT); CREATE TABLE Stores (Store_ID TEXT, Store_Name TEXT, Store_Email_Address TEXT, Address_ID NUMBER); CREATE TABLE Order_Items (Product_ID NUMBER); CREATE TABLE Customers (Address_ID NUMBER, Customer_Name TEXT); CREATE TABLE Performers (Address_ID NUMBER); CREATE TABLE Customer_Orders (Store_ID NUMBER); CREATE TABLE Products (Product_Description TEXT, Product_ID TEXT, Product_Name TEXT); CREATE TABLE Clients (Customer_Name TEXT, Address_ID NUMBER);"
      },
      {
        "question": "Last what is the phone number?",
        "query": "SELECT store_phone FROM stores WHERE store_name = \"FJA Filming\"",
        "schema": "CREATE TABLE Customers (Address_ID NUMBER, Customer_Name TEXT, Customer_Phone TEXT); CREATE TABLE Invoice_Items (Product_ID NUMBER); CREATE TABLE Services (Product_Name TEXT, Workshop_Group_ID NUMBER, Product_Description TEXT); CREATE TABLE Products (Product_ID TEXT, Product_Description TEXT, Product_Name TEXT); CREATE TABLE Bookings (Workshop_Group_ID TEXT); CREATE TABLE Addresses (State_County TEXT, Line_1 TEXT, Address_ID TEXT, Line_2 TEXT, City_Town TEXT); CREATE TABLE Order_Items (Product_ID NUMBER); CREATE TABLE Performers (Address_ID NUMBER, Customer_Phone TEXT); CREATE TABLE Customer_Orders (Store_ID NUMBER); CREATE TABLE Stores (Store_ID TEXT, Store_Name TEXT, Store_Email_Address TEXT, Address_ID NUMBER, Store_Phone TEXT); CREATE TABLE Invoices (Product_ID NUMBER); CREATE TABLE Drama_Workshop_Groups (Workshop_Group_ID NUMBER, Store_Phone TEXT, Store_Name TEXT, Address_ID NUMBER); CREATE TABLE Clients (Customer_Name TEXT, Customer_Phone TEXT, Address_ID NUMBER);"
      }
    ],
    [
      {
        "question": "list all city towns",
        "query": "SELECT city_town FROM addresses",
        "schema": "CREATE TABLE Customers (Address_ID NUMBER); CREATE TABLE Addresses (City_Town TEXT, Address_ID TEXT); CREATE TABLE Performers (Address_ID NUMBER);"
      },
      {
        "question": "give the state county each belongs to",
        "query": "SELECT city_town, state_county FROM addresses",
        "schema": "CREATE TABLE Addresses (City_Town TEXT, State_County TEXT, Address_ID TEXT); CREATE TABLE Drama_Workshop_Groups (Address_ID NUMBER); CREATE TABLE Performers (Address_ID NUMBER); CREATE TABLE Customers (Address_ID NUMBER);"
      },
      {
        "question": "list all store email addresses",
        "query": "SELECT store_email_address FROM drama_workshop_groups",
        "schema": "CREATE TABLE Stores (Store_Name TEXT, Store_Email_Address TEXT, Store_ID TEXT, Address_ID NUMBER); CREATE TABLE Customers (Customer_Email_Address TEXT, Address_ID NUMBER); CREATE TABLE Drama_Workshop_Groups (Address_ID NUMBER, Store_Email_Address TEXT); CREATE TABLE Addresses (City_Town TEXT, Address_ID TEXT, State_County TEXT); CREATE TABLE Clients (Address_ID NUMBER, Customer_Email_Address TEXT); CREATE TABLE Performers (Address_ID NUMBER, Customer_Email_Address TEXT);"
      }
    ],
    [
      {
        "question": "how many Invoices there",
        "query": "SELECT COUNT ( * ) FROM invoices",
        "schema": "CREATE TABLE Services (Product_Price NUMBER, Service_ID NUMBER); CREATE TABLE Clients (Customer_Name TEXT, Client_ID NUMBER); CREATE TABLE Bookings (Booking_ID NUMBER, Customer_ID NUMBER); CREATE TABLE Customer_Orders (Customer_ID NUMBER, Order_ID NUMBER); CREATE TABLE Ref_Payment_Methods (payment_method_description TEXT, payment_method_code TEXT); CREATE TABLE Invoice_Items (Order_ID NUMBER, Other_Item_Details TEXT, Invoice_Item_ID NUMBER, Order_Quantity NUMBER, Order_Item_ID NUMBER, Product_ID NUMBER, Invoice_ID NUMBER); CREATE TABLE Customers (Customer_ID TEXT, Customer_Name TEXT); CREATE TABLE Drama_Workshop_Groups (Workshop_Group_ID NUMBER); CREATE TABLE Addresses (Address_ID TEXT); CREATE TABLE Invoices (payment_method_code TEXT, Other_Item_Details TEXT, Invoice_ID NUMBER, Product_ID NUMBER, Order_Quantity TEXT, Order_ID NUMBER, Order_Item_ID NUMBER); CREATE TABLE Performers (Address_ID NUMBER, Customer_Name TEXT, Performer_ID NUMBER); CREATE TABLE Order_Items (Order_Item_ID NUMBER); CREATE TABLE Bookings_Services (Order_ID NUMBER);"
      },
      {
        "question": "how many master card there",
        "query": "SELECT COUNT ( * ) FROM invoices WHERE payment_method_code = \"MasterCard\"",
        "schema": "CREATE TABLE Customers (Customer_Name TEXT, Customer_ID TEXT); CREATE TABLE Invoice_Items (Order_ID NUMBER, Invoice_ID NUMBER, Order_Item_ID NUMBER, Invoice_Item_ID NUMBER, Product_ID NUMBER, Order_Quantity NUMBER, Other_Item_Details TEXT); CREATE TABLE Clients (Customer_Name TEXT, Client_ID NUMBER); CREATE TABLE Order_Items (Order_Item_ID NUMBER); CREATE TABLE Invoices (payment_method_code TEXT, Product_ID NUMBER, Invoice_ID NUMBER, Order_Quantity TEXT, Other_Item_Details TEXT, Order_ID NUMBER, Order_Item_ID NUMBER); CREATE TABLE Services (Product_Price NUMBER, Service_ID NUMBER); CREATE TABLE Bookings (Customer_ID NUMBER, Booking_ID NUMBER); CREATE TABLE Ref_Payment_Methods (payment_method_description TEXT, payment_method_code TEXT); CREATE TABLE Drama_Workshop_Groups (Workshop_Group_ID NUMBER); CREATE TABLE Performers (Performer_ID NUMBER, Customer_Name TEXT, Address_ID NUMBER); CREATE TABLE Addresses (Address_ID TEXT); CREATE TABLE Customer_Orders (Customer_ID NUMBER, Order_ID NUMBER); CREATE TABLE Bookings_Services (Order_ID NUMBER);"
      },
      {
        "question": "how many visa card use to payment",
        "query": "SELECT COUNT ( * ) FROM invoices WHERE payment_method_code = \"Visa\"",
        "schema": "CREATE TABLE Invoices (Other_Item_Details TEXT, Invoice_ID NUMBER, Order_Item_ID NUMBER, Order_Quantity TEXT, Order_ID NUMBER, payment_method_code TEXT, Product_ID NUMBER); CREATE TABLE Bookings_Services (Order_ID NUMBER); CREATE TABLE Ref_Payment_Methods (payment_method_code TEXT, payment_method_description TEXT); CREATE TABLE Services (Product_Price NUMBER, Service_ID NUMBER); CREATE TABLE Drama_Workshop_Groups (Workshop_Group_ID NUMBER); CREATE TABLE Order_Items (Order_Item_ID NUMBER); CREATE TABLE Addresses (Address_ID TEXT); CREATE TABLE Performers (Address_ID NUMBER, Customer_Name TEXT, Performer_ID NUMBER); CREATE TABLE Bookings (Booking_ID NUMBER, Customer_ID NUMBER); CREATE TABLE Customers (Customer_ID TEXT, Customer_Name TEXT); CREATE TABLE Clients (Customer_Name TEXT, Client_ID NUMBER); CREATE TABLE Customer_Orders (Order_ID NUMBER, Customer_ID NUMBER); CREATE TABLE Invoice_Items (Invoice_Item_ID NUMBER, Order_Item_ID NUMBER, Order_ID NUMBER, Order_Quantity NUMBER, Product_ID NUMBER, Invoice_ID NUMBER, Other_Item_Details TEXT);"
      }
    ],
    [
      {
        "question": "Hello there!  Can you please provide me with a list of all of the different payment method code types?",
        "query": "SELECT DISTINCT payment_method_code FROM invoices",
        "schema": "CREATE TABLE Services (Service_Type_Code TEXT); CREATE TABLE Performers (Performer_ID NUMBER); CREATE TABLE Ref_Service_Types (Service_Type_Code TEXT); CREATE TABLE Clients (Client_ID NUMBER); CREATE TABLE Invoices (payment_method_code TEXT); CREATE TABLE Ref_Payment_Methods (payment_method_code TEXT, payment_method_description TEXT); CREATE TABLE Customers (Customer_ID TEXT);"
      },
      {
        "question": "Awesome!  Of these different codes, can you tell me which individual code was used by the largest number of orders?",
        "query": "SELECT payment_method_code FROM invoices GROUP BY payment_method_code ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Services (Service_Type_Code TEXT); CREATE TABLE Customers (Customer_Name TEXT, Customer_ID TEXT); CREATE TABLE Ref_Service_Types (Service_Type_Code TEXT); CREATE TABLE Clients (Client_ID NUMBER); CREATE TABLE Ref_Payment_Methods (payment_method_code TEXT, payment_method_description TEXT); CREATE TABLE Invoices (Order_ID NUMBER, payment_method_code TEXT, Invoice_ID NUMBER, Order_Quantity TEXT); CREATE TABLE Order_Items (Order_Quantity TEXT, Order_ID NUMBER); CREATE TABLE Performers (Performer_ID NUMBER); CREATE TABLE Customer_Orders (Customer_ID NUMBER, Order_ID NUMBER);"
      },
      {
        "question": "Great!  Can you please tell me what is the total number of orders that used MasterCard?",
        "query": "SELECT COUNT ( * ) FROM invoices WHERE payment_method_code = \"MasterCard\"",
        "schema": "CREATE TABLE Customer_Orders (Customer_ID NUMBER, Order_ID NUMBER); CREATE TABLE Services (Service_Type_Code TEXT); CREATE TABLE Order_Items (Order_Quantity TEXT, Order_Item_ID NUMBER, Order_ID NUMBER); CREATE TABLE Customers (Customer_Name TEXT, Customer_ID TEXT); CREATE TABLE Clients (Client_ID NUMBER); CREATE TABLE Invoices (Order_Quantity TEXT, payment_method_code TEXT, Invoice_ID NUMBER, Order_Item_ID NUMBER, Order_ID NUMBER); CREATE TABLE Performers (Performer_ID NUMBER); CREATE TABLE Ref_Service_Types (Service_Type_Code TEXT); CREATE TABLE Ref_Payment_Methods (payment_method_description TEXT, payment_method_code TEXT);"
      }
    ],
    [
      {
        "question": "what are all the marketing regions?",
        "query": "SELECT marketing_region_name FROM marketing_regions",
        "schema": "CREATE TABLE Stores (Marketing_Region_Code TEXT); CREATE TABLE Drama_Workshop_Groups (Marketing_Region_Code TEXT); CREATE TABLE Marketing_Regions (Marketing_Region_Name TEXT, Marketing_Region_Code TEXT, Marketing_Region_Descriptrion TEXT);"
      },
      {
        "question": "what is the store Rob Dinning's marketing code?",
        "query": "SELECT marketing_region_code FROM stores WHERE store_name = \"Rob Dinning\"",
        "schema": "CREATE TABLE Customer_Orders (Store_ID NUMBER); CREATE TABLE Drama_Workshop_Groups (Store_Name TEXT, Marketing_Region_Code TEXT); CREATE TABLE Stores (Store_ID TEXT, Marketing_Region_Code TEXT, Store_Name TEXT); CREATE TABLE Marketing_Regions (Marketing_Region_Name TEXT, Marketing_Region_Descriptrion TEXT, Marketing_Region_Code TEXT); CREATE TABLE Customers (Customer_ID TEXT, Customer_Name TEXT);"
      },
      {
        "question": "what is the name of Rob Dinning's marketing region?",
        "query": "SELECT t1.marketing_region_name FROM marketing_regions AS t1 JOIN stores AS t2 ON t1.marketing_region_code = t2.marketing_region_code WHERE t2.store_name = \"Rob Dinning\"",
        "schema": "CREATE TABLE Marketing_Regions (Marketing_Region_Descriptrion TEXT, Marketing_Region_Name TEXT, Marketing_Region_Code TEXT); CREATE TABLE Drama_Workshop_Groups (Marketing_Region_Code TEXT, Store_Name TEXT); CREATE TABLE Customer_Orders (Store_ID NUMBER); CREATE TABLE Stores (Marketing_Region_Code TEXT, Store_Name TEXT, Store_ID TEXT); CREATE TABLE Customers (Customer_ID TEXT, Customer_Name TEXT);"
      },
      {
        "question": "what can you tell me about Rob Dinning?",
        "query": "SELECT * FROM stores WHERE store_name = \"Rob Dinning\"",
        "schema": "CREATE TABLE Drama_Workshop_Groups (Store_Name TEXT, Marketing_Region_Code TEXT); CREATE TABLE Customer_Orders (Store_ID NUMBER); CREATE TABLE Customers (Customer_ID TEXT, Customer_Name TEXT); CREATE TABLE Stores (Store_ID TEXT, Store_Name TEXT, Marketing_Region_Code TEXT); CREATE TABLE Marketing_Regions (Marketing_Region_Code TEXT, Marketing_Region_Name TEXT, Marketing_Region_Descriptrion TEXT);"
      },
      {
        "question": "now tell me Rob Dinning's marketing region?",
        "query": "SELECT t1.marketing_region_name FROM marketing_regions AS t1 JOIN stores AS t2 ON t1.marketing_region_code = t2.marketing_region_code WHERE t2.store_name = \"Rob Dinning\"",
        "schema": "CREATE TABLE Customers (Customer_ID TEXT, Customer_Name TEXT); CREATE TABLE Drama_Workshop_Groups (Store_Name TEXT, Marketing_Region_Code TEXT); CREATE TABLE Stores (Store_Name TEXT, Store_ID TEXT, Marketing_Region_Code TEXT); CREATE TABLE Marketing_Regions (Marketing_Region_Descriptrion TEXT, Marketing_Region_Code TEXT, Marketing_Region_Name TEXT); CREATE TABLE Customer_Orders (Store_ID NUMBER);"
      }
    ],
    [
      {
        "question": "show the minimum order quality of all invoices",
        "query": "SELECT MIN ( order_quantity ) FROM invoices",
        "schema": "CREATE TABLE Order_Items (Order_Quantity TEXT, Order_ID NUMBER, Order_Item_ID NUMBER); CREATE TABLE Performers (Performer_ID NUMBER); CREATE TABLE Invoices (Order_Quantity TEXT, Order_Item_ID NUMBER, Invoice_ID NUMBER, Order_ID NUMBER); CREATE TABLE Invoice_Items (Invoice_ID NUMBER, Order_ID NUMBER, Order_Item_ID NUMBER, Order_Quantity NUMBER); CREATE TABLE Clients (Client_ID NUMBER); CREATE TABLE Bookings_Services (Order_ID NUMBER); CREATE TABLE Customer_Orders (Order_ID NUMBER); CREATE TABLE Performers_in_Bookings (Order_ID NUMBER); CREATE TABLE Customers (Customer_ID TEXT); CREATE TABLE Bookings (Other_Order_Details TEXT, Booking_ID NUMBER); CREATE TABLE Services (Service_ID NUMBER);"
      },
      {
        "question": "show the maximum order quality of all invoices",
        "query": "SELECT MAX ( order_quantity ) FROM invoices",
        "schema": "CREATE TABLE Invoices (Order_Quantity TEXT, Order_ID NUMBER, Order_Item_ID NUMBER, Invoice_ID NUMBER); CREATE TABLE Invoice_Items (Order_ID NUMBER, Order_Quantity NUMBER, Invoice_ID NUMBER, Order_Item_ID NUMBER); CREATE TABLE Customer_Orders (Order_ID NUMBER); CREATE TABLE Bookings (Booking_ID NUMBER, Other_Order_Details TEXT); CREATE TABLE Services (Service_ID NUMBER); CREATE TABLE Clients (Client_ID NUMBER); CREATE TABLE Performers (Performer_ID NUMBER); CREATE TABLE Performers_in_Bookings (Order_ID NUMBER); CREATE TABLE Customers (Customer_ID TEXT); CREATE TABLE Bookings_Services (Order_ID NUMBER); CREATE TABLE Order_Items (Order_Item_ID NUMBER, Order_ID NUMBER, Order_Quantity TEXT);"
      },
      {
        "question": "show the average order quantity of all invoices",
        "query": "SELECT AVG ( order_quantity ) FROM invoices",
        "schema": "CREATE TABLE Customers (Customer_ID TEXT); CREATE TABLE Bookings (Other_Order_Details TEXT, Booking_ID NUMBER); CREATE TABLE Order_Items (Order_Item_ID NUMBER, Order_Quantity TEXT, Order_ID NUMBER); CREATE TABLE Performers_in_Bookings (Order_ID NUMBER); CREATE TABLE Customer_Orders (Order_ID NUMBER); CREATE TABLE Performers (Performer_ID NUMBER); CREATE TABLE Invoice_Items (Order_Item_ID NUMBER, Invoice_ID NUMBER, Order_Quantity NUMBER, Order_ID NUMBER); CREATE TABLE Invoices (Invoice_ID NUMBER, Order_Item_ID NUMBER, Order_Quantity TEXT, Order_ID NUMBER); CREATE TABLE Clients (Client_ID NUMBER); CREATE TABLE Bookings_Services (Order_ID NUMBER); CREATE TABLE Services (Service_ID NUMBER);"
      },
      {
        "question": "show the order id, product id with order quantity",
        "query": "SELECT order_id, product_id, order_quantity FROM invoices",
        "schema": "CREATE TABLE Invoice_Items (Product_ID NUMBER, Order_ID NUMBER, Order_Quantity NUMBER, Order_Item_ID NUMBER, Invoice_ID NUMBER); CREATE TABLE Customer_Orders (Order_ID NUMBER); CREATE TABLE Performers (Performer_ID NUMBER); CREATE TABLE Services (Service_ID NUMBER); CREATE TABLE Order_Items (Order_ID NUMBER, Order_Quantity TEXT, Order_Item_ID NUMBER, Product_ID NUMBER); CREATE TABLE Bookings (Other_Order_Details TEXT, Booking_ID NUMBER); CREATE TABLE Performers_in_Bookings (Order_ID NUMBER); CREATE TABLE Bookings_Services (Order_ID NUMBER); CREATE TABLE Clients (Client_ID NUMBER); CREATE TABLE Invoices (Invoice_ID NUMBER, Order_Item_ID NUMBER, Order_ID NUMBER, Product_ID NUMBER, Order_Quantity TEXT); CREATE TABLE Products (Product_ID TEXT); CREATE TABLE Customers (Customer_ID TEXT);"
      }
    ],
    [
      {
        "question": "How many drama workshop groups are in Feliciaberg City?",
        "query": "SELECT COUNT ( * ) FROM addresses AS t1 JOIN drama_workshop_groups AS t2 ON t1.address_id = t2.address_id WHERE t1.city_town = \"Feliciaberg\"",
        "schema": "CREATE TABLE Services (Workshop_Group_ID NUMBER); CREATE TABLE Bookings (Workshop_Group_ID TEXT, Booking_ID NUMBER); CREATE TABLE Stores (Store_Name TEXT, Store_ID TEXT, Address_ID NUMBER); CREATE TABLE Drama_Workshop_Groups (Store_Email_Address TEXT, Marketing_Region_Code TEXT, Workshop_Group_ID NUMBER, Address_ID NUMBER, Store_Phone TEXT, Store_Name TEXT, Other_Details TEXT); CREATE TABLE Performers (Address_ID NUMBER, Performer_ID NUMBER); CREATE TABLE Customers (Customer_Name TEXT, Address_ID NUMBER); CREATE TABLE Clients (Address_ID NUMBER); CREATE TABLE Addresses (City_Town TEXT, Address_ID TEXT);"
      },
      {
        "question": "What is the group's name?",
        "query": "SELECT t2.store_name FROM addresses AS t1 JOIN drama_workshop_groups AS t2 ON t1.address_id = t2.address_id WHERE t1.city_town = \"Feliciaberg\"",
        "schema": "CREATE TABLE Bookings (Workshop_Group_ID TEXT, Booking_ID NUMBER); CREATE TABLE Drama_Workshop_Groups (Store_Phone TEXT, Store_Email_Address TEXT, Workshop_Group_ID NUMBER, Marketing_Region_Code TEXT, Other_Details TEXT, Store_Name TEXT, Address_ID NUMBER); CREATE TABLE Services (Workshop_Group_ID NUMBER); CREATE TABLE Addresses (City_Town TEXT, Address_ID TEXT); CREATE TABLE Performers (Performer_ID NUMBER, Address_ID NUMBER); CREATE TABLE Clients (Address_ID NUMBER); CREATE TABLE Stores (Store_ID TEXT, Store_Name TEXT, Address_ID NUMBER); CREATE TABLE Customers (Customer_Name TEXT, Address_ID NUMBER);"
      },
      {
        "question": "In what state is it located?",
        "query": "SELECT t1.state_county FROM addresses AS t1 JOIN drama_workshop_groups AS t2 ON t1.address_id = t2.address_id WHERE t1.city_town = \"Feliciaberg\"",
        "schema": "CREATE TABLE Bookings (Workshop_Group_ID TEXT, Booking_ID NUMBER); CREATE TABLE Stores (Address_ID NUMBER, Store_ID TEXT, Store_Name TEXT); CREATE TABLE Addresses (State_County TEXT, City_Town TEXT, Address_ID TEXT); CREATE TABLE Clients (Address_ID NUMBER); CREATE TABLE Customers (Customer_Name TEXT, Address_ID NUMBER); CREATE TABLE Performers (Address_ID NUMBER, Performer_ID NUMBER); CREATE TABLE Drama_Workshop_Groups (Address_ID NUMBER, Store_Phone TEXT, Other_Details TEXT, Workshop_Group_ID NUMBER, Store_Email_Address TEXT, Marketing_Region_Code TEXT, Store_Name TEXT); CREATE TABLE Services (Workshop_Group_ID NUMBER);"
      },
      {
        "question": "What is the exact address? | Do you mean line 1 of address? | yes",
        "query": "SELECT t1.line_1 FROM addresses AS t1 JOIN drama_workshop_groups AS t2 ON t1.address_id = t2.address_id WHERE t1.city_town = \"Feliciaberg\"",
        "schema": "CREATE TABLE Bookings (Booking_ID NUMBER, Workshop_Group_ID TEXT); CREATE TABLE Stores (Address_ID NUMBER, Store_ID TEXT, Store_Name TEXT); CREATE TABLE Addresses (City_Town TEXT, Line_1 TEXT, Line_2 TEXT, Address_ID TEXT, State_County TEXT); CREATE TABLE Clients (Address_ID NUMBER); CREATE TABLE Performers (Performer_ID NUMBER, Address_ID NUMBER); CREATE TABLE Drama_Workshop_Groups (Workshop_Group_ID NUMBER, Other_Details TEXT, Address_ID NUMBER, Store_Email_Address TEXT, Store_Phone TEXT, Marketing_Region_Code TEXT, Store_Name TEXT); CREATE TABLE Services (Workshop_Group_ID NUMBER); CREATE TABLE Customers (Address_ID NUMBER, Customer_Name TEXT);"
      }
    ],
    [
      {
        "question": "Show me the names of the workshop groups that have bookings with status code \"stop\"?",
        "query": "SELECT t2.store_name FROM bookings AS t1 JOIN drama_workshop_groups AS t2 ON t1.workshop_group_id = t2.workshop_group_id WHERE t1.status_code = \"stop\"",
        "schema": "CREATE TABLE Drama_Workshop_Groups (Currency_Code TEXT, Address_ID NUMBER, Marketing_Region_Code TEXT, Workshop_Group_ID NUMBER, Store_Name TEXT, Store_Email_Address TEXT, Store_Phone TEXT, Other_Details TEXT); CREATE TABLE Customer_Orders (Order_ID NUMBER); CREATE TABLE Performers (Performer_ID NUMBER, Customer_Name TEXT); CREATE TABLE Addresses (Address_ID TEXT); CREATE TABLE Performers_in_Bookings (Order_ID NUMBER, Performer_ID NUMBER); CREATE TABLE Customers (Customer_Name TEXT, Customer_ID TEXT); CREATE TABLE Clients (Client_ID NUMBER, Customer_Name TEXT); CREATE TABLE Services (Workshop_Group_ID NUMBER); CREATE TABLE Stores (Store_Name TEXT); CREATE TABLE Bookings (Store_ID NUMBER, Customer_ID NUMBER, Booking_ID NUMBER, Workshop_Group_ID TEXT, Status_Code TEXT); CREATE TABLE Order_Items (Order_Item_ID NUMBER, Order_ID NUMBER);"
      },
      {
        "question": "Show me IDs of  workshop groups that have bookings with status code \"stop\"",
        "query": "SELECT t2.workshop_group_id FROM bookings AS t1 JOIN drama_workshop_groups AS t2 ON t1.workshop_group_id = t2.workshop_group_id WHERE t1.status_code = \"stop\"",
        "schema": "CREATE TABLE Addresses (Address_ID TEXT); CREATE TABLE Services (Workshop_Group_ID NUMBER); CREATE TABLE Drama_Workshop_Groups (Store_Email_Address TEXT, Store_Phone TEXT, Store_Name TEXT, Workshop_Group_ID NUMBER, Marketing_Region_Code TEXT, Address_ID NUMBER, Currency_Code TEXT, Other_Details TEXT); CREATE TABLE Stores (Store_ID TEXT, Store_Name TEXT); CREATE TABLE Bookings (Status_Code TEXT, Booking_ID NUMBER, Store_ID NUMBER, Workshop_Group_ID TEXT, Customer_ID NUMBER); CREATE TABLE Customers (Customer_Name TEXT, Customer_ID TEXT); CREATE TABLE Clients (Client_ID NUMBER, Customer_Name TEXT); CREATE TABLE Customer_Orders (Order_ID NUMBER); CREATE TABLE Order_Items (Order_Item_ID NUMBER, Order_ID NUMBER); CREATE TABLE Performers_in_Bookings (Order_ID NUMBER, Performer_ID NUMBER); CREATE TABLE Performers (Customer_Name TEXT, Performer_ID NUMBER);"
      },
      {
        "question": "Show me Address IDs  of workshop groups that have bookings with status code \"stop\"",
        "query": "SELECT t2.address_id FROM bookings AS t1 JOIN drama_workshop_groups AS t2 ON t1.workshop_group_id = t2.workshop_group_id WHERE t1.status_code = \"stop\"",
        "schema": "CREATE TABLE Drama_Workshop_Groups (Other_Details TEXT, Store_Phone TEXT, Currency_Code TEXT, Workshop_Group_ID NUMBER, Marketing_Region_Code TEXT, Store_Name TEXT, Address_ID NUMBER, Store_Email_Address TEXT); CREATE TABLE Bookings (Customer_ID NUMBER, Store_ID NUMBER, Workshop_Group_ID TEXT, Status_Code TEXT, Booking_ID NUMBER); CREATE TABLE Stores (Store_Name TEXT, Address_ID NUMBER, Store_ID TEXT); CREATE TABLE Addresses (Address_ID TEXT); CREATE TABLE Customers (Customer_ID TEXT, Customer_Name TEXT, Address_ID NUMBER); CREATE TABLE Customer_Orders (Order_ID NUMBER); CREATE TABLE Services (Workshop_Group_ID NUMBER); CREATE TABLE Clients (Customer_Name TEXT, Client_ID NUMBER); CREATE TABLE Performers (Address_ID NUMBER, Performer_ID NUMBER, Customer_Name TEXT); CREATE TABLE Order_Items (Order_Item_ID NUMBER, Order_ID NUMBER); CREATE TABLE Performers_in_Bookings (Order_ID NUMBER, Performer_ID NUMBER);"
      }
    ],
    [
      {
        "question": "How many bookings are there?",
        "query": "SELECT COUNT ( * ) FROM bookings",
        "schema": "CREATE TABLE Addresses (Address_ID TEXT); CREATE TABLE Performers (Performer_ID NUMBER); CREATE TABLE Bookings (Booking_ID NUMBER, Workshop_Group_ID TEXT, Customer_ID NUMBER, Store_ID NUMBER, Other_Order_Details TEXT, Status_Code TEXT); CREATE TABLE Invoices (Order_ID NUMBER); CREATE TABLE Bookings_Services (Product_ID NUMBER, Order_ID NUMBER); CREATE TABLE Customers (Customer_ID TEXT); CREATE TABLE Clients (Client_ID NUMBER); CREATE TABLE Drama_Workshop_Groups (Workshop_Group_ID NUMBER); CREATE TABLE Performers_in_Bookings (Order_ID NUMBER, Performer_ID NUMBER); CREATE TABLE Stores (Store_ID TEXT); CREATE TABLE Customer_Orders (Customer_ID NUMBER, Store_ID NUMBER, Order_ID NUMBER); CREATE TABLE Services (Service_ID NUMBER);"
      },
      {
        "question": "How many different statuses are used on those bookings?",
        "query": "SELECT COUNT ( DISTINCT status_code ) FROM bookings",
        "schema": "CREATE TABLE Performers_in_Bookings (Order_ID NUMBER, Performer_ID NUMBER); CREATE TABLE Services (Service_ID NUMBER); CREATE TABLE Performers (Performer_ID NUMBER); CREATE TABLE Drama_Workshop_Groups (Workshop_Group_ID NUMBER); CREATE TABLE Customer_Orders (Store_ID NUMBER, Order_ID NUMBER, Customer_ID NUMBER); CREATE TABLE Clients (Client_ID NUMBER); CREATE TABLE Bookings_Services (Product_ID NUMBER, Order_ID NUMBER); CREATE TABLE Bookings (Other_Order_Details TEXT, Workshop_Group_ID TEXT, Status_Code TEXT, Booking_ID NUMBER, Customer_ID NUMBER, Store_ID NUMBER); CREATE TABLE Addresses (Address_ID TEXT); CREATE TABLE Invoices (Order_ID NUMBER); CREATE TABLE Stores (Store_ID TEXT); CREATE TABLE Customers (Customer_ID TEXT);"
      },
      {
        "question": "Which of those statuses is used most commonly?",
        "query": "SELECT status_code FROM bookings GROUP BY status_code ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Customers (Customer_ID TEXT); CREATE TABLE Addresses (Address_ID TEXT); CREATE TABLE Drama_Workshop_Groups (Workshop_Group_ID NUMBER); CREATE TABLE Invoices (Order_ID NUMBER); CREATE TABLE Bookings (Store_ID NUMBER, Customer_ID NUMBER, Other_Order_Details TEXT, Booking_ID NUMBER, Status_Code TEXT, Workshop_Group_ID TEXT); CREATE TABLE Performers_in_Bookings (Performer_ID NUMBER, Order_ID NUMBER); CREATE TABLE Services (Service_ID NUMBER); CREATE TABLE Customer_Orders (Customer_ID NUMBER, Order_ID NUMBER, Store_ID NUMBER); CREATE TABLE Clients (Client_ID NUMBER); CREATE TABLE Bookings_Services (Product_ID NUMBER, Order_ID NUMBER); CREATE TABLE Performers (Performer_ID NUMBER); CREATE TABLE Stores (Store_ID TEXT);"
      }
    ],
    [
      {
        "question": "What are the names of the cities that all customers live in?",
        "query": "SELECT t1.city_town FROM addresses AS t1 JOIN customers AS t2 ON t1.address_id = t2.address_id",
        "schema": "CREATE TABLE Addresses (Address_ID TEXT, City_Town TEXT); CREATE TABLE Clients (Address_ID NUMBER, Client_ID NUMBER, Customer_Name TEXT); CREATE TABLE Stores (Address_ID NUMBER); CREATE TABLE Performers (Address_ID NUMBER, Customer_Name TEXT); CREATE TABLE Customers (Address_ID NUMBER, Customer_ID TEXT, Customer_Name TEXT);"
      },
      {
        "question": "Okay, what about the names of the cities that all performers live in?",
        "query": "SELECT DISTINCT t1.city_town FROM addresses AS t1 JOIN performers AS t2 ON t1.address_id = t2.address_id",
        "schema": "CREATE TABLE Clients (Address_ID NUMBER, Customer_Name TEXT, Client_ID NUMBER); CREATE TABLE Addresses (City_Town TEXT, Address_ID TEXT); CREATE TABLE Stores (Address_ID NUMBER); CREATE TABLE Customers (Customer_ID TEXT, Customer_Name TEXT, Address_ID NUMBER); CREATE TABLE Performers (Customer_Name TEXT, Address_ID NUMBER, Performer_ID NUMBER);"
      },
      {
        "question": "Of these cities, which do not also appear on the customer cities list?",
        "query": "SELECT t1.city_town FROM addresses AS t1 JOIN performers AS t2 ON t1.address_id = t2.address_id EXCEPT SELECT t1.city_town FROM addresses AS t1 JOIN customers AS t2 ON t1.address_id = t2.address_id",
        "schema": "CREATE TABLE Clients (Customer_Name TEXT, Address_ID NUMBER, Client_ID NUMBER); CREATE TABLE Customers (Customer_Name TEXT, Customer_ID TEXT, Address_ID NUMBER); CREATE TABLE Addresses (City_Town TEXT, Address_ID TEXT); CREATE TABLE Performers (Address_ID NUMBER, Customer_Name TEXT, Performer_ID NUMBER); CREATE TABLE Stores (Address_ID NUMBER);"
      }
    ],
    [
      {
        "question": "How many orders are priced higher than 1000?",
        "query": "SELECT COUNT ( * ) FROM customer_orders AS t1 JOIN order_items AS t2 ON t1.order_id = t2.order_id JOIN products AS t3 ON t2.product_id = t3.product_id WHERE t3.product_price > 1000",
        "schema": "CREATE TABLE Customer_Orders (Store_ID NUMBER, Customer_ID NUMBER, Order_ID NUMBER); CREATE TABLE Invoice_Items (Order_ID NUMBER, Order_Quantity NUMBER, Order_Item_ID NUMBER); CREATE TABLE Services (Product_Price NUMBER); CREATE TABLE Bookings (Booking_ID NUMBER); CREATE TABLE Bookings_Services (Order_ID NUMBER); CREATE TABLE Customers (Customer_ID TEXT); CREATE TABLE Products (Product_Price NUMBER, Product_ID TEXT, Product_Name TEXT); CREATE TABLE Stores (Store_ID TEXT); CREATE TABLE Invoices (Order_ID NUMBER, Order_Item_ID NUMBER, Order_Quantity TEXT); CREATE TABLE Order_Items (Order_Quantity TEXT, Order_ID NUMBER, Order_Item_ID NUMBER, Product_ID NUMBER);"
      },
      {
        "question": "What are the order dates of orders with a price higher than 1000?",
        "query": "SELECT t1.order_date FROM customer_orders AS t1 JOIN order_items AS t2 ON t1.order_id = t2.order_id JOIN products AS t3 ON t2.product_id = t3.product_id WHERE t3.product_price > 1000",
        "schema": "CREATE TABLE Order_Items (Order_ID NUMBER, Order_Quantity TEXT, Order_Item_ID NUMBER, Product_ID NUMBER); CREATE TABLE Customer_Orders (Store_ID NUMBER, Customer_ID NUMBER, Order_Date TIME, Actual_Delivery_Date TIME, Order_ID NUMBER); CREATE TABLE Invoice_Items (Order_ID NUMBER, Order_Item_ID NUMBER, Order_Quantity NUMBER); CREATE TABLE Bookings (Booking_ID NUMBER); CREATE TABLE Stores (Store_ID TEXT); CREATE TABLE Bookings_Services (Order_ID NUMBER); CREATE TABLE Customers (Customer_ID TEXT); CREATE TABLE Invoices (Order_Quantity TEXT, Order_ID NUMBER, Order_Item_ID NUMBER); CREATE TABLE Products (Product_Name TEXT, Product_Price NUMBER, Product_ID TEXT); CREATE TABLE Services (Product_Price NUMBER);"
      },
      {
        "question": "What are their planned delivery dates?",
        "query": "SELECT t1.planned_delivery_date FROM customer_orders AS t1 JOIN order_items AS t2 ON t1.order_id = t2.order_id JOIN products AS t3 ON t2.product_id = t3.product_id WHERE t3.product_price > 1000",
        "schema": "CREATE TABLE Services (Product_Price NUMBER); CREATE TABLE Customers (Customer_ID TEXT); CREATE TABLE Invoice_Items (Order_Item_ID NUMBER, Order_ID NUMBER, Order_Quantity NUMBER); CREATE TABLE Invoices (Order_Quantity TEXT, Order_ID NUMBER, Order_Item_ID NUMBER); CREATE TABLE Stores (Store_ID TEXT); CREATE TABLE Customer_Orders (Planned_Delivery_Date TIME, Actual_Delivery_Date TIME, Order_Date TIME, Order_ID NUMBER, Customer_ID NUMBER, Store_ID NUMBER); CREATE TABLE Bookings_Services (Order_ID NUMBER); CREATE TABLE Order_Items (Order_Item_ID NUMBER, Order_ID NUMBER, Product_ID NUMBER, Order_Quantity TEXT); CREATE TABLE Bookings (Actual_Delivery_Date TIME, Booking_ID NUMBER, Planned_Delivery_Date TIME); CREATE TABLE Products (Product_ID TEXT, Product_Price NUMBER, Product_Name TEXT);"
      },
      {
        "question": "And what were the actual delivery dates?",
        "query": "SELECT t1.actual_delivery_date FROM customer_orders AS t1 JOIN order_items AS t2 ON t1.order_id = t2.order_id JOIN products AS t3 ON t2.product_id = t3.product_id WHERE t3.product_price > 1000",
        "schema": "CREATE TABLE Customers (Customer_ID TEXT); CREATE TABLE Bookings (Planned_Delivery_Date TIME, Booking_ID NUMBER, Actual_Delivery_Date TIME); CREATE TABLE Bookings_Services (Order_ID NUMBER); CREATE TABLE Order_Items (Order_Quantity TEXT, Order_Item_ID NUMBER, Order_ID NUMBER, Product_ID NUMBER); CREATE TABLE Products (Product_Name TEXT, Product_ID TEXT, Product_Price NUMBER); CREATE TABLE Invoices (Order_Item_ID NUMBER, Order_ID NUMBER, Order_Quantity TEXT); CREATE TABLE Customer_Orders (Customer_ID NUMBER, Order_Date TIME, Store_ID NUMBER, Planned_Delivery_Date TIME, Actual_Delivery_Date TIME, Order_ID NUMBER); CREATE TABLE Invoice_Items (Order_Item_ID NUMBER, Order_ID NUMBER, Order_Quantity NUMBER); CREATE TABLE Stores (Store_ID TEXT); CREATE TABLE Services (Product_Price NUMBER);"
      }
    ],
    [
      {
        "question": "What is the description of the type of service that is performed the most often?",
        "query": "SELECT t1.service_type_description FROM ref_service_types AS t1 JOIN services AS t2 ON t1.service_type_code = t2.service_type_code GROUP BY t1.service_type_code ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Services (Service_Type_Code TEXT, Service_ID NUMBER, Product_Description TEXT, Product_Name TEXT); CREATE TABLE Ref_Service_Types (Parent_Service_Type_Code TEXT, Service_Type_Description TEXT, Service_Type_Code TEXT);"
      },
      {
        "question": "What is the code of the type of service that is performed the most often?",
        "query": "SELECT t1.service_type_code FROM ref_service_types AS t1 JOIN services AS t2 ON t1.service_type_code = t2.service_type_code GROUP BY t1.service_type_code ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Services (Product_Description TEXT, Service_ID NUMBER, Product_Name TEXT, Service_Type_Code TEXT); CREATE TABLE Ref_Service_Types (Service_Type_Description TEXT, Parent_Service_Type_Code TEXT, Service_Type_Code TEXT);"
      },
      {
        "question": "What is its parent service type code?",
        "query": "SELECT t1.parent_service_type_code FROM ref_service_types AS t1 JOIN services AS t2 ON t1.service_type_code = t2.service_type_code GROUP BY t1.service_type_code ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Services (Product_Name TEXT, Service_Type_Code TEXT, Product_Description TEXT, Service_ID NUMBER); CREATE TABLE Ref_Service_Types (Service_Type_Description TEXT, Parent_Service_Type_Code TEXT, Service_Type_Code TEXT);"
      }
    ],
    [
      {
        "question": "What are the delivery dates of orders with 1 quantity? | do you mean the actual delivery dates ? | Yes",
        "query": "SELECT t1.actual_delivery_date FROM customer_orders AS t1 JOIN order_items AS t2 ON t1.order_id = t2.order_id WHERE t2.order_quantity = 1",
        "schema": "CREATE TABLE Order_Items (Order_Item_ID NUMBER, Order_ID NUMBER, Order_Quantity TEXT); CREATE TABLE Customers (Customer_ID TEXT); CREATE TABLE Customer_Orders (Actual_Delivery_Date TIME, Order_ID NUMBER, Order_Date TIME, Planned_Delivery_Date TIME); CREATE TABLE Bookings (Actual_Delivery_Date TIME, Order_Date TIME, Planned_Delivery_Date TIME); CREATE TABLE Invoice_Items (Order_Quantity NUMBER); CREATE TABLE Invoices (Order_Quantity TEXT, Order_ID NUMBER, Order_Item_ID NUMBER);"
      },
      {
        "question": "What are the product id of orders with quantity 1?",
        "query": "SELECT product_id FROM order_items WHERE order_quantity = 1",
        "schema": "CREATE TABLE Order_Items (Order_ID NUMBER, Product_ID NUMBER, Order_Item_ID NUMBER, Order_Quantity TEXT); CREATE TABLE Products (Product_Name TEXT, Product_ID TEXT); CREATE TABLE Invoices (Order_ID NUMBER, Product_ID NUMBER, Order_Quantity TEXT, Order_Item_ID NUMBER); CREATE TABLE Customers (Customer_ID TEXT); CREATE TABLE Invoice_Items (Order_Quantity NUMBER, Product_ID NUMBER); CREATE TABLE Bookings (Actual_Delivery_Date TIME, Order_Date TIME, Planned_Delivery_Date TIME); CREATE TABLE Customer_Orders (Order_ID NUMBER, Customer_ID NUMBER, Order_Date TIME, Actual_Delivery_Date TIME, Planned_Delivery_Date TIME);"
      },
      {
        "question": "Ok ,, what are the cuatomers id that have order of quantity 1?",
        "query": "SELECT t1.customer_id FROM customer_orders AS t1 JOIN order_items AS t2 ON t1.order_id = t2.order_id WHERE t2.order_quantity = 1",
        "schema": "CREATE TABLE Order_Items (Product_ID NUMBER, Order_Item_ID NUMBER, Order_Quantity TEXT, Order_ID NUMBER); CREATE TABLE Invoice_Items (Order_Item_ID NUMBER, Product_ID NUMBER, Order_Quantity NUMBER); CREATE TABLE Customers (Customer_ID TEXT, Customer_Name TEXT); CREATE TABLE Performers (Customer_Name TEXT); CREATE TABLE Bookings (Planned_Delivery_Date TIME, Order_Date TIME, Actual_Delivery_Date TIME); CREATE TABLE Invoices (Product_ID NUMBER, Order_Quantity TEXT, Order_ID NUMBER, Order_Item_ID NUMBER); CREATE TABLE Customer_Orders (Order_Date TIME, Actual_Delivery_Date TIME, Customer_ID NUMBER, Planned_Delivery_Date TIME, Order_ID NUMBER); CREATE TABLE Products (Product_Name TEXT, Product_ID TEXT);"
      }
    ]
  ],
  "shop_membership": [
    [
      {
        "question": "list the branch for registered  members? | did you mean the ids of branches with registered members? | yes",
        "query": "SELECT branch_id FROM membership_register_branch",
        "schema": "CREATE TABLE membership_register_branch (Register_Year TEXT, Member_ID NUMBER, Branch_ID TEXT); CREATE TABLE member (Member_ID NUMBER); CREATE TABLE branch (Name TEXT, Branch_ID NUMBER);"
      },
      {
        "question": "Find the membership amount of the popert? | did you mean the membership amount of the branch with the name \"Popert\"? | yes",
        "query": "SELECT membership_amount FROM branch WHERE name = 'Popert'",
        "schema": "CREATE TABLE branch (membership_amount TEXT, Branch_ID NUMBER, Name TEXT); CREATE TABLE membership_register_branch (Register_Year TEXT, Member_ID NUMBER, Branch_ID TEXT); CREATE TABLE member (Member_ID NUMBER, Name TEXT);"
      },
      {
        "question": "List the name with registered members? | There are the names of branches with registered members. | which city of Alexandra?",
        "query": "SELECT city FROM branch WHERE name = 'Alexandre'",
        "schema": "CREATE TABLE member (Hometown TEXT, Name TEXT, Member_ID NUMBER); CREATE TABLE membership_register_branch (Register_Year TEXT, Branch_ID TEXT, Member_ID NUMBER); CREATE TABLE branch (membership_amount TEXT, Name TEXT, Branch_ID NUMBER, Address_road TEXT, City TEXT);"
      }
    ],
    [
      {
        "question": "Show me all branch names with the number of members in each branch registered after 2015",
        "query": "SELECT t2.name , COUNT ( * ) FROM membership_register_branch AS t1 JOIN branch AS t2 ON t1.branch_id = t2.branch_id WHERE t1.register_year > 2015 GROUP BY t2.branch_id",
        "schema": "CREATE TABLE membership_register_branch (Member_ID NUMBER, Branch_ID TEXT, Register_Year TEXT); CREATE TABLE member (Name TEXT, Member_ID NUMBER); CREATE TABLE branch (Open_year TEXT, membership_amount TEXT, Branch_ID NUMBER, Name TEXT);"
      },
      {
        "question": "When were those branches opened?",
        "query": "SELECT t2.name , t2.open_year FROM membership_register_branch AS t1 JOIN branch AS t2 ON t1.branch_id = t2.branch_id WHERE t1.register_year > 2015 GROUP BY t2.branch_id",
        "schema": "CREATE TABLE member (Name TEXT, Member_ID NUMBER); CREATE TABLE membership_register_branch (Branch_ID TEXT, Member_ID NUMBER, Register_Year TEXT); CREATE TABLE branch (Open_year TEXT, Name TEXT, Branch_ID NUMBER, membership_amount TEXT);"
      },
      {
        "question": "How many branches have the number of members in each branch registered after 2015? | Did you mean the number of branches which have some members registered after 2015? | Thanks!",
        "query": "SELECT COUNT ( * ) FROM ( SELECT t2.name FROM membership_register_branch AS t1 JOIN branch AS t2 ON t1.branch_id = t2.branch_id WHERE t1.register_year > 2015 GROUP BY t2.branch_id )",
        "schema": "CREATE TABLE branch (Open_year TEXT, Branch_ID NUMBER, Name TEXT, membership_amount TEXT); CREATE TABLE member (Name TEXT, Member_ID NUMBER); CREATE TABLE membership_register_branch (Register_Year TEXT, Member_ID NUMBER, Branch_ID TEXT);"
      }
    ],
    [
      {
        "question": "Show me the cities | Do you mean you want the cities where there are branches there? | yes",
        "query": "SELECT DISTINCT city FROM branch",
        "schema": "CREATE TABLE branch (Name TEXT, Branch_ID NUMBER, City TEXT, Address_road TEXT); CREATE TABLE member (Hometown TEXT);"
      },
      {
        "question": "show me the number of branches of cities",
        "query": "SELECT city , COUNT ( * ) FROM branch GROUP BY city",
        "schema": "CREATE TABLE member (Hometown TEXT); CREATE TABLE branch (Branch_ID NUMBER, City TEXT, Name TEXT, Address_road TEXT);"
      },
      {
        "question": "Count the branches opened before 2010?",
        "query": "SELECT COUNT ( * ) FROM branch WHERE open_year < 2010",
        "schema": "CREATE TABLE member (Hometown TEXT); CREATE TABLE branch (Branch_ID NUMBER, Address_road TEXT, Open_year TEXT, Name TEXT, City TEXT);"
      },
      {
        "question": "Count  branches opened before 2010 for each city",
        "query": "SELECT city , COUNT ( * ) FROM branch WHERE open_year < 2010 GROUP BY city",
        "schema": "CREATE TABLE member (Hometown TEXT); CREATE TABLE branch (Branch_ID NUMBER, Open_year TEXT, Name TEXT, City TEXT, Address_road TEXT);"
      }
    ],
    [
      {
        "question": "What are the names of all the branches?",
        "query": "SELECT name FROM branch",
        "schema": "CREATE TABLE branch (Name TEXT, City TEXT, Branch_ID NUMBER); CREATE TABLE member (Name TEXT, Member_ID NUMBER);"
      },
      {
        "question": "Given  the branches are Alexandre, Popert, Stanley, Zytogorski, Cochrane, Taverner, Saint Amant, and Brooke Greville, which have members in Louisville, Kentucky?",
        "query": "SELECT t2.name FROM membership_register_branch AS t1 JOIN branch AS t2 ON t1.branch_id = t2.branch_id JOIN member AS t3 ON t1.member_id = t3.member_id WHERE t3.hometown = 'Louisville, Kentucky'",
        "schema": "CREATE TABLE membership_register_branch (Member_ID NUMBER, Branch_ID TEXT); CREATE TABLE member (Member_ID NUMBER, Name TEXT, Hometown TEXT); CREATE TABLE branch (Branch_ID NUMBER, membership_amount TEXT, Address_road TEXT, Name TEXT, City TEXT);"
      },
      {
        "question": "Given the branches are Alexandre and Zytogorski,  which have members in Hiram, Georgia?",
        "query": "SELECT t2.name FROM membership_register_branch AS t1 JOIN branch AS t2 ON t1.branch_id = t2.branch_id JOIN member AS t3 ON t1.member_id = t3.member_id WHERE t3.hometown = 'Louisville , Kentucky' INTERSECT SELECT t2.name FROM membership_register_branch AS t1 JOIN branch AS t2 ON t1.branch_id = t2.branch_id JOIN member AS t3 ON t1.member_id = t3.member_id WHERE t3.hometown = 'Hiram , Georgia'",
        "schema": "CREATE TABLE membership_register_branch (Member_ID NUMBER, Branch_ID TEXT); CREATE TABLE member (Hometown TEXT, Member_ID NUMBER, Name TEXT); CREATE TABLE branch (membership_amount TEXT, Branch_ID NUMBER, City TEXT, Name TEXT, Address_road TEXT);"
      }
    ],
    [
      {
        "question": "What is the name of the branch with the greatest amount of memberships that were registered in the year 2016?",
        "query": "SELECT t2.name FROM membership_register_branch AS t1 JOIN branch AS t2 ON t1.branch_id = t2.branch_id WHERE t1.register_year = 2016 GROUP BY t2.branch_id ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE membership_register_branch (Member_ID NUMBER, Register_Year TEXT, Branch_ID TEXT); CREATE TABLE branch (Name TEXT, membership_amount TEXT, Branch_ID NUMBER); CREATE TABLE member (Member_ID NUMBER, Name TEXT);"
      },
      {
        "question": "What is the year that branch opened?",
        "query": "SELECT t2.open_year FROM membership_register_branch AS t1 JOIN branch AS t2 ON t1.branch_id = t2.branch_id WHERE t1.register_year = 2016 GROUP BY t2.branch_id ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE branch (Name TEXT, Open_year TEXT, Branch_ID NUMBER, membership_amount TEXT); CREATE TABLE member (Member_ID NUMBER, Name TEXT); CREATE TABLE membership_register_branch (Register_Year TEXT, Branch_ID TEXT, Member_ID NUMBER);"
      },
      {
        "question": "Can you list the name and membership amount of the branch that had the least amount of memberships that were opened in the year 2017?",
        "query": "SELECT name, membership_amount FROM branch WHERE membership_amount = ( SELECT MIN ( membership_amount ) FROM branch WHERE open_year like \"%2017%\" )",
        "schema": "CREATE TABLE member (Name TEXT, Member_ID NUMBER); CREATE TABLE branch (membership_amount TEXT, Name TEXT, Open_year TEXT, Branch_ID NUMBER); CREATE TABLE membership_register_branch (Member_ID NUMBER, Branch_ID TEXT, Register_Year TEXT);"
      },
      {
        "question": "Can you list the name and opening year of the branch that opened the earliest?",
        "query": "SELECT name, open_year FROM branch WHERE open_year = ( SELECT MIN ( open_year ) FROM branch )",
        "schema": "CREATE TABLE member (Member_ID NUMBER, Name TEXT); CREATE TABLE membership_register_branch (Branch_ID TEXT, Member_ID NUMBER, Register_Year TEXT); CREATE TABLE branch (Open_year TEXT, Branch_ID NUMBER, membership_amount TEXT, Name TEXT);"
      }
    ],
    [
      {
        "question": "How many names in this table?",
        "query": "SELECT COUNT ( name ) FROM branch",
        "schema": "CREATE TABLE branch (Name TEXT); CREATE TABLE member (Member_ID NUMBER, Name TEXT);"
      },
      {
        "question": "Find the total amount of membership?",
        "query": "SELECT SUM ( membership_amount ) FROM branch",
        "schema": "CREATE TABLE membership_register_branch (Member_ID NUMBER, Branch_ID TEXT); CREATE TABLE branch (Name TEXT, Branch_ID NUMBER, membership_amount TEXT); CREATE TABLE member (Member_ID NUMBER, Name TEXT, Level NUMBER);"
      },
      {
        "question": "Find highest membership amount?",
        "query": "SELECT membership_amount FROM branch ORDER BY membership_amount DESC LIMIT 1",
        "schema": "CREATE TABLE member (Name TEXT, Member_ID NUMBER, Level NUMBER); CREATE TABLE membership_register_branch (Branch_ID TEXT, Member_ID NUMBER); CREATE TABLE branch (Branch_ID NUMBER, Name TEXT, membership_amount TEXT);"
      },
      {
        "question": "Find the lowest membership amount?",
        "query": "SELECT MIN ( membership_amount ) FROM branch",
        "schema": "CREATE TABLE member (Level NUMBER, Name TEXT, Member_ID NUMBER); CREATE TABLE membership_register_branch (Branch_ID TEXT, Member_ID NUMBER); CREATE TABLE branch (Name TEXT, Branch_ID NUMBER, membership_amount TEXT);"
      }
    ],
    [
      {
        "question": "show the minimum amount of memberships for all branches opened in 2011 or located at city location",
        "query": "SELECT MIN ( membership_amount ) FROM branch WHERE open_year = 2011 OR city = 'London'",
        "schema": "CREATE TABLE membership_register_branch (Branch_ID TEXT, Register_Year TEXT); CREATE TABLE branch (City TEXT, Open_year TEXT, Address_road TEXT, membership_amount TEXT, Name TEXT, Branch_ID NUMBER);"
      },
      {
        "question": "show the maximum amount of memberships for all branches opened in 2011 or located at city location",
        "query": "SELECT MAX ( membership_amount ) FROM branch WHERE open_year = 2011 OR city = 'London'",
        "schema": "CREATE TABLE branch (Name TEXT, membership_amount TEXT, Address_road TEXT, Open_year TEXT, City TEXT, Branch_ID NUMBER); CREATE TABLE membership_register_branch (Register_Year TEXT, Branch_ID TEXT);"
      }
    ],
    [
      {
        "question": "Could you please show the membership level with the greatest number of members?",
        "query": "SELECT LEVEL FROM member GROUP BY LEVEL ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE branch (membership_amount TEXT); CREATE TABLE member (Member_ID NUMBER, Level NUMBER, Name TEXT);"
      },
      {
        "question": "What are the member ids of the people who have that membership level?",
        "query": "SELECT member_id FROM member WHERE LEVEL IN ( SELECT LEVEL FROM member GROUP BY LEVEL ORDER BY COUNT ( * ) DESC LIMIT 1 )",
        "schema": "CREATE TABLE branch (membership_amount TEXT); CREATE TABLE member (Member_ID NUMBER, Name TEXT, Level NUMBER);"
      },
      {
        "question": "What are their names, please?",
        "query": "SELECT name FROM member WHERE LEVEL IN ( SELECT LEVEL FROM member GROUP BY LEVEL ORDER BY COUNT ( * ) DESC LIMIT 1 )",
        "schema": "CREATE TABLE member (Level NUMBER, Member_ID NUMBER, Name TEXT); CREATE TABLE branch (membership_amount TEXT);"
      },
      {
        "question": "What about the membership level with the least number of members?",
        "query": "SELECT LEVEL FROM member GROUP BY LEVEL ORDER BY COUNT ( * ) ASC LIMIT 1",
        "schema": "CREATE TABLE branch (membership_amount TEXT); CREATE TABLE member (Level NUMBER, Member_ID NUMBER, Name TEXT);"
      },
      {
        "question": "What are the member ids of the people who have that membership level?",
        "query": "SELECT member_id FROM member WHERE LEVEL IN ( SELECT LEVEL FROM member GROUP BY LEVEL ORDER BY COUNT ( * ) ASC LIMIT 1 )",
        "schema": "CREATE TABLE branch (membership_amount TEXT); CREATE TABLE member (Level NUMBER, Member_ID NUMBER, Name TEXT);"
      },
      {
        "question": "What is their name, please?",
        "query": "SELECT name FROM member WHERE LEVEL IN ( SELECT LEVEL FROM member GROUP BY LEVEL ORDER BY COUNT ( * ) ASC LIMIT 1 )",
        "schema": "CREATE TABLE branch (membership_amount TEXT); CREATE TABLE member (Level NUMBER, Name TEXT, Member_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What are the register year of Jeremy Jarmon?",
        "query": "SELECT t1.register_year FROM membership_register_branch AS t1 JOIN member AS t2 ON t1.member_id = t2.member_id WHERE t2.name = \"Jeremy Jarmon\"",
        "schema": "CREATE TABLE member (Member_ID NUMBER, Name TEXT); CREATE TABLE membership_register_branch (Member_ID NUMBER, Register_Year TEXT, Branch_ID TEXT);"
      },
      {
        "question": "What is Corey Peters Card_Number?",
        "query": "SELECT card_number FROM member WHERE name = 'Corey Peters'",
        "schema": "CREATE TABLE membership_register_branch (Member_ID NUMBER, Register_Year TEXT, Branch_ID TEXT); CREATE TABLE branch (Name TEXT, Branch_ID NUMBER); CREATE TABLE member (Member_ID NUMBER, Name TEXT, Card_Number TEXT);"
      },
      {
        "question": "What is Myron Pryor Hometown?",
        "query": "SELECT hometown FROM member WHERE name = 'Myron Pryor'",
        "schema": "CREATE TABLE member (Member_ID NUMBER, Hometown TEXT, Card_Number TEXT, Name TEXT); CREATE TABLE branch (Branch_ID NUMBER, Name TEXT, City TEXT); CREATE TABLE membership_register_branch (Register_Year TEXT, Branch_ID TEXT, Member_ID NUMBER);"
      },
      {
        "question": "Show the member name and hometown who registered a branch in 2016.",
        "query": "SELECT t2.name , t2.hometown FROM membership_register_branch AS t1 JOIN member AS t2 ON t1.member_id = t2.member_id WHERE t1.register_year = 2016",
        "schema": "CREATE TABLE membership_register_branch (Register_Year TEXT, Member_ID NUMBER, Branch_ID TEXT); CREATE TABLE branch (City TEXT, Branch_ID NUMBER, Name TEXT); CREATE TABLE member (Member_ID NUMBER, Card_Number TEXT, Hometown TEXT, Name TEXT);"
      }
    ],
    [
      {
        "question": "What is the total number of purchases for members with level 6?",
        "query": "SELECT COUNT ( * ) FROM purchase AS t1 JOIN member AS t2 ON t1.member_id = t2.member_id WHERE t2.level = 6",
        "schema": "CREATE TABLE branch (membership_amount TEXT); CREATE TABLE purchase (Year TEXT, Member_ID NUMBER, Total_pounds NUMBER); CREATE TABLE member (Level NUMBER, Member_ID NUMBER, Card_Number TEXT, Name TEXT);"
      },
      {
        "question": "Which 2 members have the highest number of purchases?",
        "query": "SELECT t2.name FROM purchase AS t1 JOIN member AS t2 ON t1.member_id = t2.member_id GROUP BY t1.member_id ORDER BY COUNT ( * ) DESC LIMIT 2",
        "schema": "CREATE TABLE purchase (Year TEXT, Total_pounds NUMBER, Member_ID NUMBER); CREATE TABLE branch (membership_amount TEXT); CREATE TABLE member (Member_ID NUMBER, Name TEXT, Card_Number TEXT, Level NUMBER);"
      },
      {
        "question": "What is the hometown of Myron Pryor?",
        "query": "SELECT hometown FROM member WHERE name = \"Myron Pryor\"",
        "schema": "CREATE TABLE branch (City TEXT, membership_amount TEXT); CREATE TABLE member (Name TEXT, Hometown TEXT, Level NUMBER, Member_ID NUMBER, Card_Number TEXT); CREATE TABLE purchase (Year TEXT, Total_pounds NUMBER, Member_ID NUMBER);"
      },
      {
        "question": "What is the branch ID associated with Myron Pryor?",
        "query": "SELECT t2.branch_id FROM member AS t1 JOIN purchase AS t2 ON t1.member_id = t2.member_id WHERE name = \"Myron Pryor\"",
        "schema": "CREATE TABLE member (Name TEXT, Hometown TEXT, Member_ID NUMBER, Card_Number TEXT, Level NUMBER); CREATE TABLE membership_register_branch (Branch_ID TEXT, Member_ID NUMBER); CREATE TABLE branch (Name TEXT, membership_amount TEXT, Branch_ID NUMBER, City TEXT); CREATE TABLE purchase (Member_ID NUMBER, Year TEXT, Total_pounds NUMBER, Branch_ID TEXT);"
      }
    ],
    [
      {
        "question": "Show member names with a registered branch?",
        "query": "SELECT name FROM member WHERE member_id IN ( SELECT member_id FROM membership_register_branch )",
        "schema": "CREATE TABLE branch (Name TEXT, Branch_ID NUMBER); CREATE TABLE membership_register_branch (Branch_ID TEXT, Member_ID NUMBER); CREATE TABLE member (Member_ID NUMBER, Name TEXT);"
      },
      {
        "question": "Show member names without any registered branch?",
        "query": "SELECT name FROM member WHERE member_id NOT IN ( SELECT member_id FROM membership_register_branch )",
        "schema": "CREATE TABLE branch (Branch_ID NUMBER, Name TEXT); CREATE TABLE member (Member_ID NUMBER, Name TEXT); CREATE TABLE membership_register_branch (Member_ID NUMBER, Branch_ID TEXT);"
      },
      {
        "question": "What is the total number of branches?",
        "query": "SELECT COUNT ( DISTINCT branch_id ) FROM membership_register_branch",
        "schema": "CREATE TABLE branch (Branch_ID NUMBER, Name TEXT, membership_amount TEXT); CREATE TABLE membership_register_branch (Member_ID NUMBER, Branch_ID TEXT); CREATE TABLE member (Name TEXT, Member_ID NUMBER);"
      }
    ],
    [
      {
        "question": "How many cities have a branch with 100 membership?",
        "query": "SELECT COUNT ( DISTINCT city ) FROM branch WHERE membership_amount > 100",
        "schema": "CREATE TABLE member (Member_ID NUMBER, Hometown TEXT, Level NUMBER); CREATE TABLE branch (City TEXT, membership_amount TEXT, Branch_ID NUMBER, Name TEXT); CREATE TABLE membership_register_branch (Member_ID NUMBER, Branch_ID TEXT);"
      },
      {
        "question": "show all the branches opened in 2000?",
        "query": "SELECT branch_id FROM branch WHERE open_year = 2000",
        "schema": "CREATE TABLE membership_register_branch (Register_Year TEXT, Branch_ID TEXT, Member_ID NUMBER); CREATE TABLE branch (Name TEXT, City TEXT, membership_amount TEXT, Branch_ID NUMBER, Open_year TEXT); CREATE TABLE member (Level NUMBER, Member_ID NUMBER, Hometown TEXT);"
      },
      {
        "question": "Which year was Stanley open?",
        "query": "SELECT open_year FROM branch WHERE name = \"Stanley\"",
        "schema": "CREATE TABLE membership_register_branch (Register_Year TEXT, Branch_ID TEXT, Member_ID NUMBER); CREATE TABLE branch (Name TEXT, City TEXT, membership_amount TEXT, Branch_ID NUMBER, Open_year TEXT); CREATE TABLE member (Level NUMBER, Member_ID NUMBER, Hometown TEXT);"
      },
      {
        "question": "What is the address road of Stanley?",
        "query": "SELECT address_road FROM branch WHERE name = \"Stanley\"",
        "schema": "CREATE TABLE member (Hometown TEXT, Member_ID NUMBER, Level NUMBER); CREATE TABLE branch (Open_year TEXT, Name TEXT, Branch_ID NUMBER, Address_road TEXT, City TEXT, membership_amount TEXT); CREATE TABLE membership_register_branch (Branch_ID TEXT, Register_Year TEXT, Member_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Name the branch with least membership amount.?",
        "query": "SELECT name FROM branch ORDER BY membership_amount ASC LIMIT 1",
        "schema": "CREATE TABLE membership_register_branch (Branch_ID TEXT, Member_ID NUMBER); CREATE TABLE member (Name TEXT, Member_ID NUMBER); CREATE TABLE branch (membership_amount TEXT, Name TEXT, Branch_ID NUMBER);"
      },
      {
        "question": "state the open year of branch id 3?",
        "query": "SELECT open_year FROM branch WHERE branch_id = 3",
        "schema": "CREATE TABLE branch (Open_year TEXT, Name TEXT, membership_amount TEXT, Branch_ID NUMBER); CREATE TABLE member (Name TEXT, Member_ID NUMBER); CREATE TABLE membership_register_branch (Branch_ID TEXT, Member_ID NUMBER, Register_Year TEXT);"
      },
      {
        "question": "List all open years when at least two shops are opened?",
        "query": "SELECT open_year FROM branch GROUP BY open_year HAVING COUNT ( * ) > = 2",
        "schema": "CREATE TABLE branch (Name TEXT, Branch_ID NUMBER, Open_year TEXT, membership_amount TEXT); CREATE TABLE member (Member_ID NUMBER, Name TEXT); CREATE TABLE membership_register_branch (Member_ID NUMBER, Register_Year TEXT, Branch_ID TEXT);"
      }
    ],
    [
      {
        "question": "What are the names for the top three membership branches",
        "query": "SELECT name FROM branch ORDER BY membership_amount DESC LIMIT 3",
        "schema": "CREATE TABLE membership_register_branch (Branch_ID TEXT, Member_ID NUMBER); CREATE TABLE member (Member_ID NUMBER, Name TEXT, Level NUMBER); CREATE TABLE branch (Name TEXT, Branch_ID NUMBER, membership_amount TEXT);"
      },
      {
        "question": "How many memberships do these branches have?",
        "query": "SELECT membership_amount FROM branch ORDER BY membership_amount DESC LIMIT 3",
        "schema": "CREATE TABLE branch (Branch_ID NUMBER, Name TEXT, membership_amount TEXT); CREATE TABLE membership_register_branch (Branch_ID TEXT, Member_ID NUMBER); CREATE TABLE member (Member_ID NUMBER, Level NUMBER, Name TEXT);"
      },
      {
        "question": "What years did the branches open?",
        "query": "SELECT open_year FROM branch ORDER BY membership_amount DESC LIMIT 3",
        "schema": "CREATE TABLE branch (Name TEXT, Open_year TEXT, membership_amount TEXT, Branch_ID NUMBER); CREATE TABLE member (Level NUMBER, Member_ID NUMBER, Name TEXT); CREATE TABLE membership_register_branch (Member_ID NUMBER, Register_Year TEXT, Branch_ID TEXT);"
      },
      {
        "question": "What are the addresses for these three branches?",
        "query": "SELECT address_road FROM branch ORDER BY membership_amount DESC LIMIT 3",
        "schema": "CREATE TABLE membership_register_branch (Member_ID NUMBER, Register_Year TEXT, Branch_ID TEXT); CREATE TABLE branch (Open_year TEXT, membership_amount TEXT, Address_road TEXT, Branch_ID NUMBER, City TEXT, Name TEXT); CREATE TABLE member (Name TEXT, Member_ID NUMBER, Level NUMBER);"
      },
      {
        "question": "Which address has the most memberships?",
        "query": "SELECT address_road FROM branch ORDER BY membership_amount DESC LIMIT 1",
        "schema": "CREATE TABLE member (Level NUMBER, Member_ID NUMBER, Name TEXT); CREATE TABLE branch (Branch_ID NUMBER, Name TEXT, Open_year TEXT, Address_road TEXT, City TEXT, membership_amount TEXT); CREATE TABLE membership_register_branch (Register_Year TEXT, Member_ID NUMBER, Branch_ID TEXT);"
      }
    ],
    [
      {
        "question": "Show the city and the number of branches opened before 2010 for each city",
        "query": "SELECT city , COUNT ( * ) FROM branch WHERE open_year < 2010 GROUP BY city",
        "schema": "CREATE TABLE branch (Name TEXT, Open_year TEXT, City TEXT, Branch_ID NUMBER);"
      },
      {
        "question": "Which year were those branches opened?",
        "query": "SELECT open_year FROM branch WHERE open_year < 2010",
        "schema": "CREATE TABLE branch (Name TEXT, City TEXT, Branch_ID NUMBER, Open_year TEXT);"
      },
      {
        "question": "Cities that were opened before 2010 | Ah, I cannot understand. Do you mean cities that have branches opened before 2010? | Give me names of branches opened before 2010",
        "query": "SELECT name FROM branch WHERE open_year < 2010",
        "schema": "CREATE TABLE branch (Open_year TEXT, City TEXT, Name TEXT, Branch_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Which cities have a branch?",
        "query": "SELECT DISTINCT city FROM branch",
        "schema": "CREATE TABLE member (Hometown TEXT); CREATE TABLE branch (City TEXT, Branch_ID NUMBER, Name TEXT);"
      },
      {
        "question": "How many branches does London have?",
        "query": "SELECT COUNT ( branch_id ) FROM branch WHERE city = 'London'",
        "schema": "CREATE TABLE member (Hometown TEXT); CREATE TABLE branch (Branch_ID NUMBER, Name TEXT, City TEXT);"
      },
      {
        "question": "How many branches does Oxford have?",
        "query": "SELECT COUNT ( branch_id ) FROM branch WHERE city = 'Oxford'",
        "schema": "CREATE TABLE member (Hometown TEXT); CREATE TABLE branch (City TEXT, Branch_ID NUMBER, Name TEXT);"
      }
    ],
    [
      {
        "question": "Who are the members whose hometown address includes Kentucky | Did you want the names of the members whose hometown address includes the word Kentucky? | Yes please give their names.",
        "query": "SELECT name FROM member WHERE hometown LIKE \"%Kentucky%\"",
        "schema": "CREATE TABLE member (Name TEXT, Member_ID NUMBER, Hometown TEXT);"
      },
      {
        "question": "Kindly list the card numbers of all the members.",
        "query": "SELECT card_number FROM member",
        "schema": "CREATE TABLE member (Name TEXT, Card_Number TEXT, Member_ID NUMBER, Hometown TEXT);"
      },
      {
        "question": "How many members are they in total?",
        "query": "SELECT COUNT ( * ) FROM member",
        "schema": "CREATE TABLE member (Hometown TEXT, Member_ID NUMBER, Name TEXT, Card_Number TEXT);"
      }
    ],
    [
      {
        "question": "What is the total pounds of purchases in the year 2018 for all branches in London?",
        "query": "SELECT SUM ( total_pounds ) FROM purchase AS t1 JOIN branch AS t2 ON t1.branch_id = t2.branch_id WHERE t2.city = 'London' AND t1.year = 2018",
        "schema": "CREATE TABLE branch (Open_year TEXT, City TEXT, Branch_ID NUMBER, Name TEXT); CREATE TABLE membership_register_branch (Register_Year TEXT, Branch_ID TEXT); CREATE TABLE purchase (Year TEXT, Branch_ID TEXT, Total_pounds NUMBER);"
      },
      {
        "question": "How many branches are there in London?",
        "query": "SELECT COUNT ( * ) FROM branch WHERE city = 'London'",
        "schema": "CREATE TABLE purchase (Branch_ID TEXT, Year TEXT, Total_pounds NUMBER); CREATE TABLE branch (City TEXT, Open_year TEXT, Branch_ID NUMBER, Name TEXT); CREATE TABLE membership_register_branch (Branch_ID TEXT, Register_Year TEXT);"
      }
    ],
    [
      {
        "question": "how many purchases did each member make?",
        "query": "SELECT t1.member_id, COUNT ( * ) FROM purchase AS t1 JOIN member AS t2 ON t1.member_id = t2.member_id GROUP BY t1.member_id",
        "schema": "CREATE TABLE member (Name TEXT, Member_ID NUMBER); CREATE TABLE purchase (Year TEXT, Total_pounds NUMBER, Member_ID NUMBER);"
      },
      {
        "question": "how many purchases did members with level 5 make?",
        "query": "SELECT COUNT ( * ) FROM purchase AS t1 JOIN member AS t2 ON t1.member_id = t2.member_id WHERE t2.level = 5",
        "schema": "CREATE TABLE purchase (Total_pounds NUMBER, Member_ID NUMBER, Year TEXT); CREATE TABLE member (Member_ID NUMBER, Level NUMBER, Name TEXT);"
      },
      {
        "question": "now how many purchases did members with level 6 make?",
        "query": "SELECT COUNT ( * ) FROM purchase AS t1 JOIN member AS t2 ON t1.member_id = t2.member_id WHERE t2.level = 6",
        "schema": "CREATE TABLE purchase (Total_pounds NUMBER, Member_ID NUMBER, Year TEXT); CREATE TABLE member (Member_ID NUMBER, Level NUMBER, Name TEXT);"
      }
    ],
    [
      {
        "question": "What are the names for the top three branches with most number of membership?",
        "query": "SELECT name FROM branch ORDER BY membership_amount DESC LIMIT 3",
        "schema": "CREATE TABLE member (Member_ID NUMBER, Name TEXT); CREATE TABLE branch (Name TEXT, Branch_ID NUMBER, membership_amount TEXT);"
      },
      {
        "question": "What year did they open?",
        "query": "SELECT name, open_year FROM branch ORDER BY membership_amount DESC LIMIT 3",
        "schema": "CREATE TABLE branch (Name TEXT, membership_amount TEXT, Open_year TEXT, Branch_ID NUMBER); CREATE TABLE member (Name TEXT, Member_ID NUMBER); CREATE TABLE membership_register_branch (Branch_ID TEXT, Register_Year TEXT);"
      },
      {
        "question": "What are their cities?",
        "query": "SELECT name, city FROM branch ORDER BY membership_amount DESC LIMIT 3",
        "schema": "CREATE TABLE membership_register_branch (Register_Year TEXT, Branch_ID TEXT); CREATE TABLE member (Member_ID NUMBER, Name TEXT); CREATE TABLE branch (Name TEXT, City TEXT, Branch_ID NUMBER, Open_year TEXT, membership_amount TEXT);"
      }
    ]
  ],
  "entrepreneur": [
    [
      {
        "question": "What are the investor name of Leonardo Binchi?",
        "query": "SELECT t1.investor FROM entrepreneur AS t1 JOIN people AS t2 ON t1.people_id = t2.people_id WHERE t2.name = \"Leonardo Binchi\"",
        "schema": "CREATE TABLE people (People_ID NUMBER, Name TEXT); CREATE TABLE entrepreneur (People_ID NUMBER, Investor TEXT, Entrepreneur_ID NUMBER);"
      },
      {
        "question": "What is the total amount of money requested for three persons? | Sorry, which three persons do you want? | The three persons are Francesco Postiglione, Leonardo Binchi and Fabrizio Buonocore",
        "query": "SELECT SUM ( t1.money_requested ) FROM entrepreneur AS t1 JOIN people AS t2 ON t1.people_id = t2.people_id WHERE t2.name = \"Francesco Postiglione\" OR t2.name = \"Leonardo Binchi\" OR t2.name = \"Fabrizio Buonocore\"",
        "schema": "CREATE TABLE entrepreneur (People_ID NUMBER, Entrepreneur_ID NUMBER, Investor TEXT, Money_Requested NUMBER); CREATE TABLE people (People_ID NUMBER, Name TEXT);"
      },
      {
        "question": "What is the company name of Fabrizio Buonocore?",
        "query": "SELECT t1.company FROM entrepreneur AS t1 JOIN people AS t2 ON t1.people_id = t2.people_id WHERE t2.name = \"Fabrizio Buonocore\"",
        "schema": "CREATE TABLE entrepreneur (Company TEXT, Investor TEXT, People_ID NUMBER, Entrepreneur_ID NUMBER, Money_Requested NUMBER); CREATE TABLE people (People_ID NUMBER, Name TEXT);"
      },
      {
        "question": "What are the name of entrepreneurs whose investor is not \"Rachel Elnaugh\"?",
        "query": "SELECT t2.name FROM entrepreneur AS t1 JOIN people AS t2 ON t1.people_id = t2.people_id WHERE t1.investor! = \"Rachel Elnaugh\"",
        "schema": "CREATE TABLE entrepreneur (Investor TEXT, People_ID NUMBER, Company TEXT, Money_Requested NUMBER, Entrepreneur_ID NUMBER); CREATE TABLE people (People_ID NUMBER, Name TEXT);"
      }
    ],
    [
      {
        "question": "Hi, could you please let me know the date of birth of the investors Simon Woodroffe and Peter Jones?",
        "query": "SELECT t2.date_of_birth FROM entrepreneur AS t1 JOIN people AS t2 ON t1.people_id = t2.people_id WHERE t1.investor = \"Simon Woodroffe\" OR t1.investor = \"Peter Jones\"",
        "schema": "CREATE TABLE entrepreneur (Entrepreneur_ID NUMBER, People_ID NUMBER, Investor TEXT); CREATE TABLE people (People_ID NUMBER, Date_of_Birth TEXT, Name TEXT);"
      },
      {
        "question": "That was really quick, thank you. Then can you please tell me how much money they requested, respectively?",
        "query": "SELECT money_requested FROM entrepreneur WHERE investor = 'Simon Woodroffe' OR investor = 'Peter Jones'",
        "schema": "CREATE TABLE entrepreneur (Investor TEXT, Money_Requested NUMBER, People_ID NUMBER, Entrepreneur_ID NUMBER); CREATE TABLE people (People_ID NUMBER, Name TEXT, Date_of_Birth TEXT);"
      },
      {
        "question": "haha I am sorry, Thanks again for your answer! :) Then could you please let me know which entrepreneur requested for the biggest amount of money?",
        "query": "SELECT entrepreneur_id FROM entrepreneur ORDER BY money_requested DESC LIMIT 1",
        "schema": "CREATE TABLE people (People_ID NUMBER, Date_of_Birth TEXT, Name TEXT); CREATE TABLE entrepreneur (Entrepreneur_ID NUMBER, People_ID NUMBER, Investor TEXT, Money_Requested NUMBER);"
      },
      {
        "question": "Glad that I didn't trouble you again :) Thank you, then could you please let me know the investor's name and company for the ID?",
        "query": "SELECT entrepreneur_id,investor,company FROM entrepreneur ORDER BY money_requested DESC LIMIT 1",
        "schema": "CREATE TABLE entrepreneur (Entrepreneur_ID NUMBER, Investor TEXT, Money_Requested NUMBER, Company TEXT, People_ID NUMBER); CREATE TABLE people (Name TEXT, Date_of_Birth TEXT, People_ID NUMBER);"
      }
    ],
    [
      {
        "question": "How many weight of Francesco Postiglione?",
        "query": "SELECT weight FROM people WHERE name = \"Francesco Postiglione\"",
        "schema": "CREATE TABLE people (People_ID NUMBER, Weight NUMBER, Name TEXT); CREATE TABLE entrepreneur (People_ID NUMBER);"
      },
      {
        "question": "How much money requested of people id 2?",
        "query": "SELECT money_requested FROM entrepreneur WHERE people_id = \"2\"",
        "schema": "CREATE TABLE people (People_ID NUMBER, Weight NUMBER, Name TEXT); CREATE TABLE entrepreneur (People_ID NUMBER, Money_Requested NUMBER);"
      },
      {
        "question": "Date of birth of Fabrizio Buonocore?",
        "query": "SELECT date_of_birth FROM people WHERE name = \"Fabrizio Buonocore\"",
        "schema": "CREATE TABLE entrepreneur (Money_Requested NUMBER, Entrepreneur_ID NUMBER, People_ID NUMBER); CREATE TABLE people (Weight NUMBER, Date_of_Birth TEXT, Name TEXT, People_ID NUMBER);"
      },
      {
        "question": "What is the name of the entrepreneur with the greatest weight?",
        "query": "SELECT t2.name FROM entrepreneur AS t1 JOIN people AS t2 ON t1.people_id = t2.people_id ORDER BY t2.weight DESC LIMIT 1",
        "schema": "CREATE TABLE entrepreneur (Entrepreneur_ID NUMBER, Money_Requested NUMBER, People_ID NUMBER); CREATE TABLE people (People_ID NUMBER, Name TEXT, Date_of_Birth TEXT, Weight NUMBER);"
      }
    ],
    [
      {
        "question": "Show me the company details",
        "query": "SELECT company FROM entrepreneur",
        "schema": "CREATE TABLE entrepreneur (People_ID NUMBER, Company TEXT, Entrepreneur_ID NUMBER); CREATE TABLE people (People_ID NUMBER);"
      },
      {
        "question": "Show me the details of all entrepreneurs",
        "query": "SELECT * FROM entrepreneur",
        "schema": "CREATE TABLE entrepreneur (People_ID NUMBER, Entrepreneur_ID NUMBER, Company TEXT); CREATE TABLE people (People_ID NUMBER);"
      },
      {
        "question": "Show me the company of the tallest entrepreneur",
        "query": "SELECT t1.company FROM entrepreneur AS t1 JOIN people AS t2 ON t1.people_id = t2.people_id ORDER BY t2.height DESC LIMIT 1",
        "schema": "CREATE TABLE people (People_ID NUMBER, Height NUMBER); CREATE TABLE entrepreneur (Company TEXT, People_ID NUMBER, Entrepreneur_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What is the largest weight that appears in the people table?",
        "query": "SELECT weight FROM people ORDER BY weight DESC LIMIT 1",
        "schema": "CREATE TABLE people (Weight NUMBER, People_ID NUMBER); CREATE TABLE entrepreneur (People_ID NUMBER);"
      },
      {
        "question": "Can you add the people id associated with that weight into the table?",
        "query": "SELECT people_id, weight FROM people ORDER BY weight DESC LIMIT 1",
        "schema": "CREATE TABLE entrepreneur (People_ID NUMBER); CREATE TABLE people (Weight NUMBER, People_ID NUMBER);"
      },
      {
        "question": "Can you also add the name associated with that people id into the table?",
        "query": "SELECT people_id, name, weight FROM people ORDER BY weight DESC LIMIT 1",
        "schema": "CREATE TABLE people (People_ID NUMBER, Name TEXT, Weight NUMBER); CREATE TABLE entrepreneur (People_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Hello! Can you show me a list of all investor names?",
        "query": "SELECT DISTINCT investor FROM entrepreneur",
        "schema": "CREATE TABLE people (Name TEXT, People_ID NUMBER); CREATE TABLE entrepreneur (People_ID NUMBER, Investor TEXT);"
      },
      {
        "question": "Can you filter this list to include only the investors that were associated with more than one entrepreneur id?",
        "query": "SELECT investor FROM entrepreneur GROUP BY investor HAVING COUNT ( * ) > 1",
        "schema": "CREATE TABLE people (People_ID NUMBER, Name TEXT); CREATE TABLE entrepreneur (Investor TEXT, Entrepreneur_ID NUMBER, People_ID NUMBER);"
      },
      {
        "question": "Can you filter this list to show only the rows associated with money requested that are not between 120000 and 140000?",
        "query": "SELECT investor FROM entrepreneur WHERE investor IN ( SELECT investor FROM entrepreneur WHERE money_requested > 140000 INTERSECT SELECT investor FROM entrepreneur WHERE money_requested < 120000 ) GROUP BY investor HAVING COUNT ( * ) > 1",
        "schema": "CREATE TABLE people (People_ID NUMBER, Name TEXT); CREATE TABLE entrepreneur (Investor TEXT, Entrepreneur_ID NUMBER, People_ID NUMBER, Money_Requested NUMBER);"
      }
    ],
    [
      {
        "question": "Hi!  Can you show me a list of all people and their people IDs?",
        "query": "SELECT name, people_id FROM people",
        "schema": "CREATE TABLE people (People_ID NUMBER, Name TEXT); CREATE TABLE entrepreneur (Entrepreneur_ID NUMBER, People_ID NUMBER);"
      },
      {
        "question": "Nice!  Can you filter the list to show only the people who do not have an associated entrepreneur ID?",
        "query": "SELECT name, people_id FROM people WHERE people_id NOT IN ( SELECT people_id FROM entrepreneur )",
        "schema": "CREATE TABLE entrepreneur (Entrepreneur_ID NUMBER, People_ID NUMBER); CREATE TABLE people (Name TEXT, People_ID NUMBER);"
      },
      {
        "question": "Wonderful!  Can you tell me what is the total amount of money requested by the people who ARE entrepreneurs?",
        "query": "SELECT SUM ( money_requested ) FROM entrepreneur",
        "schema": "CREATE TABLE people (Name TEXT, People_ID NUMBER); CREATE TABLE entrepreneur (Entrepreneur_ID NUMBER, Money_Requested NUMBER, People_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Who are the entrepreneurs requesting money | What attributes would you like to know about the entrepreneurs raising money? | What are the entrepreneur's weights",
        "query": "SELECT t2.weight FROM entrepreneur AS t1 JOIN people AS t2 ON t1.people_id = t2.people_id",
        "schema": "CREATE TABLE entrepreneur (Money_Requested NUMBER, Entrepreneur_ID NUMBER, People_ID NUMBER); CREATE TABLE people (Name TEXT, Weight NUMBER, People_ID NUMBER);"
      },
      {
        "question": "What are the entrepreneurs names associated with those weights?  Thanks.",
        "query": "SELECT t2.name, t2.weight FROM entrepreneur AS t1 JOIN people AS t2 ON t1.people_id = t2.people_id",
        "schema": "CREATE TABLE people (Name TEXT, People_ID NUMBER, Weight NUMBER); CREATE TABLE entrepreneur (Money_Requested NUMBER, People_ID NUMBER, Entrepreneur_ID NUMBER);"
      },
      {
        "question": "What company is each entrepreneur associated with?",
        "query": "SELECT t1.company FROM entrepreneur AS t1 JOIN people AS t2 ON t1.people_id = t2.people_id",
        "schema": "CREATE TABLE entrepreneur (Company TEXT, People_ID NUMBER, Entrepreneur_ID NUMBER, Money_Requested NUMBER); CREATE TABLE people (Weight NUMBER, People_ID NUMBER, Name TEXT);"
      },
      {
        "question": "Which entrepreneur has the highest weight?  Thanks! | What attribute would you like to know about the entrepreneur with the highest weight? | I would like to know the name of the entrepreneur with the highest weight.",
        "query": "SELECT t2.name FROM entrepreneur AS t1 JOIN people AS t2 ON t1.people_id = t2.people_id ORDER BY t2.weight DESC LIMIT 1",
        "schema": "CREATE TABLE entrepreneur (People_ID NUMBER, Entrepreneur_ID NUMBER, Company TEXT, Money_Requested NUMBER); CREATE TABLE people (Weight NUMBER, People_ID NUMBER, Name TEXT);"
      }
    ]
  ],
  "entertainment_awards": [
    [
      {
        "question": "State the location of flower awards held?",
        "query": "SELECT LOCATION FROM festival_detail WHERE festival_name = 'Flower Awards'",
        "schema": "CREATE TABLE festival_detail (Festival_Name TEXT, Location TEXT, Festival_ID NUMBER); CREATE TABLE artwork (Name TEXT);"
      },
      {
        "question": "Which festival has the least number of audience?",
        "query": "SELECT festival_name FROM festival_detail ORDER BY num_of_audience LIMIT 1",
        "schema": "CREATE TABLE festival_detail (Festival_Name TEXT, Festival_ID NUMBER, Location TEXT, Num_of_Audience NUMBER); CREATE TABLE artwork (Name TEXT);"
      },
      {
        "question": "What is the name of artwork id 2?",
        "query": "SELECT name FROM artwork WHERE artwork_id = 2",
        "schema": "CREATE TABLE festival_detail (Festival_Name TEXT, Num_of_Audience NUMBER, Location TEXT, Festival_ID NUMBER); CREATE TABLE nomination (Artwork_ID NUMBER); CREATE TABLE artwork (Name TEXT, Artwork_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Which year had the most festivals?",
        "query": "SELECT YEAR FROM festival_detail GROUP BY YEAR ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE festival_detail (Festival_ID NUMBER, Year NUMBER, Festival_Name TEXT);"
      },
      {
        "question": "How many festivals were there in 2008?",
        "query": "SELECT COUNT ( * ) FROM festival_detail GROUP BY YEAR HAVING YEAR = 2008",
        "schema": "CREATE TABLE festival_detail (Festival_Name TEXT, Year NUMBER, Festival_ID NUMBER);"
      },
      {
        "question": "What was the number of the audience for it?",
        "query": "SELECT num_of_audience FROM festival_detail WHERE YEAR = 2008",
        "schema": "CREATE TABLE festival_detail (Festival_Name TEXT, Year NUMBER, Num_of_Audience NUMBER, Festival_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Which festival name  was nimonated for artwork? | you want all of festival name was nimonated for artwork? | Yes",
        "query": "SELECT DISTINCT t3.festival_name FROM nomination AS t1 JOIN artwork AS t2 ON t1.artwork_id = t2.artwork_id JOIN festival_detail AS t3 ON t1.festival_id = t3.festival_id",
        "schema": "CREATE TABLE artwork (Name TEXT, Type TEXT, Artwork_ID NUMBER); CREATE TABLE festival_detail (Chair_Name TEXT, Festival_Name TEXT, Location TEXT, Festival_ID NUMBER); CREATE TABLE nomination (Festival_ID NUMBER, Artwork_ID NUMBER);"
      },
      {
        "question": "Which festival name was associated with program talent show?",
        "query": "SELECT t3.festival_name FROM nomination AS t1 JOIN artwork AS t2 ON t1.artwork_id = t2.artwork_id JOIN festival_detail AS t3 ON t1.festival_id = t3.festival_id WHERE t2.type = \"Program Talent Show\"",
        "schema": "CREATE TABLE nomination (Festival_ID NUMBER, Artwork_ID NUMBER); CREATE TABLE festival_detail (Festival_ID NUMBER, Festival_Name TEXT, Chair_Name TEXT, Location TEXT); CREATE TABLE artwork (Name TEXT, Artwork_ID NUMBER, Type TEXT);"
      },
      {
        "question": "What was the location of LA awards?",
        "query": "SELECT LOCATION FROM festival_detail WHERE festival_name = 'LA Awards'",
        "schema": "CREATE TABLE nomination (Festival_ID NUMBER, Artwork_ID NUMBER); CREATE TABLE artwork (Type TEXT, Artwork_ID NUMBER, Name TEXT); CREATE TABLE festival_detail (Location TEXT, Chair_Name TEXT, Festival_Name TEXT, Festival_ID NUMBER);"
      }
    ],
    [
      {
        "question": "show the different type of artworks?",
        "query": "SELECT DISTINCT TYPE FROM artwork",
        "schema": "CREATE TABLE artwork (Artwork_ID NUMBER, Type TEXT, Name TEXT);"
      },
      {
        "question": "Show the most common type of artworks?",
        "query": "SELECT TYPE FROM artwork GROUP BY TYPE ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE artwork (Artwork_ID NUMBER, Name TEXT, Type TEXT);"
      },
      {
        "question": "Show the type of artwork Loving you?",
        "query": "SELECT TYPE FROM artwork WHERE name = \"Loving you\"",
        "schema": "CREATE TABLE artwork (Type TEXT, Name TEXT, Artwork_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Can you tell me which year had more than one festival please?",
        "query": "SELECT YEAR FROM festival_detail GROUP BY YEAR HAVING COUNT ( * ) > 1",
        "schema": "CREATE TABLE festival_detail (Year NUMBER, Festival_Name TEXT, Festival_ID NUMBER);"
      },
      {
        "question": "What are the names of the festivals that occurred that year?",
        "query": "SELECT festival_name FROM festival_detail WHERE YEAR = \"2007\"",
        "schema": "CREATE TABLE festival_detail (Festival_Name TEXT, Festival_ID NUMBER, Year NUMBER);"
      },
      {
        "question": "What other years did the Cherry Awards occur during?",
        "query": "SELECT YEAR FROM festival_detail WHERE festival_name = \"Cherry Awards\"",
        "schema": "CREATE TABLE festival_detail (Festival_ID NUMBER, Festival_Name TEXT, Year NUMBER);"
      }
    ],
    [
      {
        "question": "Hello! Can you tell me how many total nominees there are?",
        "query": "SELECT COUNT ( artwork_id ) FROM nomination",
        "schema": "CREATE TABLE nomination (Result TEXT, Festival_ID NUMBER, Artwork_ID NUMBER); CREATE TABLE artwork (Name TEXT, Artwork_ID NUMBER); CREATE TABLE festival_detail (Festival_ID NUMBER);"
      },
      {
        "question": "Excellent!  For each nomination can you show me the name of the artwork associated with it, and the name of the festival where it was nominated?",
        "query": "SELECT t2.name , t3.festival_name FROM nomination AS t1 JOIN artwork AS t2 ON t1.artwork_id = t2.artwork_id JOIN festival_detail AS t3 ON t1.festival_id = t3.festival_id",
        "schema": "CREATE TABLE artwork (Artwork_ID NUMBER, Name TEXT); CREATE TABLE nomination (Result TEXT, Artwork_ID NUMBER, Festival_ID NUMBER); CREATE TABLE festival_detail (Festival_Name TEXT, Festival_ID NUMBER);"
      },
      {
        "question": "Thanks!  Can you update this list to show all of the associated years for each of these festivals?",
        "query": "SELECT t2.name , t3.festival_name, t3.year FROM nomination AS t1 JOIN artwork AS t2 ON t1.artwork_id = t2.artwork_id JOIN festival_detail AS t3 ON t1.festival_id = t3.festival_id",
        "schema": "CREATE TABLE nomination (Result TEXT, Artwork_ID NUMBER, Festival_ID NUMBER); CREATE TABLE festival_detail (Festival_ID NUMBER, Festival_Name TEXT, Year NUMBER); CREATE TABLE artwork (Name TEXT, Artwork_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show the number of audience in year 2008 or 2010.",
        "query": "SELECT num_of_audience FROM festival_detail WHERE YEAR = 2008 OR YEAR = 2010",
        "schema": "CREATE TABLE festival_detail (Num_of_Audience NUMBER, Year NUMBER);"
      },
      {
        "question": "How about the chair name for those years?",
        "query": "SELECT chair_name FROM festival_detail WHERE YEAR = 2008 OR YEAR = 2010",
        "schema": "CREATE TABLE festival_detail (Chair_Name TEXT, Year NUMBER, Festival_Name TEXT, Num_of_Audience NUMBER);"
      }
    ],
    [
      {
        "question": "Can you list the names of the festivals that had two or more nominations for artwork?",
        "query": "SELECT t3.festival_name FROM nomination AS t1 JOIN artwork AS t2 ON t1.artwork_id = t2.artwork_id JOIN festival_detail AS t3 ON t1.festival_id = t3.festival_id GROUP BY t1.festival_id HAVING COUNT ( * ) > = 2",
        "schema": "CREATE TABLE artwork (Name TEXT, Artwork_ID NUMBER); CREATE TABLE nomination (Artwork_ID NUMBER, Festival_ID NUMBER); CREATE TABLE festival_detail (Festival_ID NUMBER, Festival_Name TEXT);"
      },
      {
        "question": "Can you list their IDs in the table too?",
        "query": "SELECT t3.festival_id, t3.festival_name FROM nomination AS t1 JOIN artwork AS t2 ON t1.artwork_id = t2.artwork_id JOIN festival_detail AS t3 ON t1.festival_id = t3.festival_id GROUP BY t1.festival_id HAVING COUNT ( * ) > = 2",
        "schema": "CREATE TABLE artwork (Name TEXT, Artwork_ID NUMBER); CREATE TABLE nomination (Artwork_ID NUMBER, Festival_ID NUMBER); CREATE TABLE festival_detail (Festival_Name TEXT, Festival_ID NUMBER);"
      },
      {
        "question": "What are the names of all the artworks that won?",
        "query": "SELECT t2.name FROM nomination AS t1 JOIN artwork AS t2 ON t1.artwork_id = t2.artwork_id WHERE t1.result = \"Won\"",
        "schema": "CREATE TABLE nomination (Result TEXT, Festival_ID NUMBER, Artwork_ID NUMBER); CREATE TABLE artwork (Name TEXT, Artwork_ID NUMBER); CREATE TABLE festival_detail (Festival_ID NUMBER, Festival_Name TEXT);"
      }
    ],
    [
      {
        "question": "Where were these festivals held?",
        "query": "SELECT festival_name,LOCATION FROM festival_detail ORDER BY YEAR DESC LIMIT 3",
        "schema": "CREATE TABLE festival_detail (Year NUMBER, Location TEXT, Festival_Name TEXT, Festival_ID NUMBER);"
      },
      {
        "question": "Who was the chair of the LA Awards?",
        "query": "SELECT chair_name FROM festival_detail WHERE festival_name = \"LA Awards\"",
        "schema": "CREATE TABLE festival_detail (Festival_ID NUMBER, Year NUMBER, Location TEXT, Chair_Name TEXT, Festival_Name TEXT);"
      },
      {
        "question": "How many people attended the LA Awards in 2010?",
        "query": "SELECT num_of_audience FROM festival_detail WHERE festival_name = 'LA Awards' AND YEAR = 2010",
        "schema": "CREATE TABLE festival_detail (Festival_ID NUMBER, Chair_Name TEXT, Location TEXT, Festival_Name TEXT, Num_of_Audience NUMBER, Year NUMBER);"
      }
    ]
  ],
  "flight_4": [
    [
      {
        "question": "What are the names of airport which is the source for the most number of flight routes?",
        "query": "SELECT t1.name FROM airports AS t1 JOIN routes AS t2 ON t1.apid = t2.src_apid GROUP BY t2.src_apid ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE airports (apid NUMBER, name TEXT); CREATE TABLE routes (src_ap TEXT, dst_apid NUMBER, rid NUMBER, src_apid NUMBER, alid NUMBER);"
      },
      {
        "question": "What are the names of city of airport which is the source for the most number of flight routes | Do you mean the name of city which is the source for the most number of flight routes? | Yes",
        "query": "SELECT t1.city FROM airports AS t1 JOIN routes AS t2 ON t1.apid = t2.src_apid GROUP BY t2.src_apid ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE routes (src_ap TEXT, src_apid NUMBER, rid NUMBER, dst_apid NUMBER, alid NUMBER); CREATE TABLE airports (apid NUMBER, city TEXT, name TEXT);"
      }
    ],
    [
      {
        "question": "Name the airport in Madang city?",
        "query": "SELECT name FROM airports WHERE city = 'Madang'",
        "schema": "CREATE TABLE airports (name TEXT, city TEXT, apid NUMBER);"
      },
      {
        "question": "How many airports are in Papua New Guinea country?",
        "query": "SELECT COUNT ( * ) FROM airports WHERE country = 'Papua New Guinea'",
        "schema": "CREATE TABLE airlines (country TEXT); CREATE TABLE airports (city TEXT, apid NUMBER, name TEXT, country TEXT);"
      },
      {
        "question": "Find the number of routes with destination airports in Italy?",
        "query": "SELECT COUNT ( * ) FROM routes AS t1 JOIN airports AS t2 ON t1.dst_apid = t2.apid WHERE t2.country = 'Italy'",
        "schema": "CREATE TABLE routes (src_apid NUMBER, rid NUMBER, alid NUMBER, dst_apid NUMBER); CREATE TABLE airports (country TEXT, city TEXT, apid NUMBER, name TEXT); CREATE TABLE airlines (country TEXT);"
      },
      {
        "question": "What is the elevation of Mount Hagen Kagamuga Airport?",
        "query": "SELECT elevation FROM airports WHERE name = 'Mount Hagen Kagamuga Airport'",
        "schema": "CREATE TABLE routes (alid NUMBER, dst_apid NUMBER, src_apid NUMBER, rid NUMBER); CREATE TABLE airports (country TEXT, name TEXT, apid NUMBER, elevation NUMBER, city TEXT); CREATE TABLE airlines (country TEXT);"
      }
    ],
    [
      {
        "question": "Which countries have the most number of airlines whose active status is Y?",
        "query": "SELECT country FROM airlines WHERE active = 'Y' GROUP BY country ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE airlines (country TEXT, alid NUMBER, active TEXT); CREATE TABLE airports (y NUMBER, country TEXT);"
      },
      {
        "question": "What are the names of those airlines? | Here are the names of airlines who are active. | What is the airline id of Aloha Airlines?",
        "query": "SELECT alid FROM airlines WHERE name = 'Aloha Airlines'",
        "schema": "CREATE TABLE airports (country TEXT, y NUMBER); CREATE TABLE airlines (country TEXT, alid NUMBER, name TEXT, active TEXT);"
      },
      {
        "question": "What about the icao? | the icao of Aloha Airlines is AAH | What's the call sign of airline id 5?",
        "query": "SELECT callsign FROM airlines WHERE alid = 5",
        "schema": "CREATE TABLE airports (y NUMBER, icao TEXT, country TEXT); CREATE TABLE airlines (callsign TEXT, icao TEXT, active TEXT, name TEXT, alid NUMBER, country TEXT);"
      }
    ],
    [
      {
        "question": "Find the cities which have exactly two airports",
        "query": "SELECT city FROM airports GROUP BY city HAVING COUNT ( * ) = 2",
        "schema": "CREATE TABLE airports (name TEXT, apid NUMBER, city TEXT);"
      },
      {
        "question": "What location airports is near by me has two airports? | What do you mean by near by you? Sorry, We cannot answer this. | what is the name of airport in the country Papua New Guinea",
        "query": "SELECT name FROM airports WHERE country = 'Papua New Guinea'",
        "schema": "CREATE TABLE airports (city TEXT, country TEXT, apid NUMBER, name TEXT); CREATE TABLE airlines (country TEXT);"
      },
      {
        "question": "what is the elevation of Madang Airport?",
        "query": "SELECT elevation FROM airports WHERE name = 'Madang Airport'",
        "schema": "CREATE TABLE airlines (country TEXT); CREATE TABLE airports (name TEXT, country TEXT, apid NUMBER, elevation NUMBER, city TEXT);"
      },
      {
        "question": "What is the elevation of Goroka Airport",
        "query": "SELECT elevation FROM airports WHERE name = 'Goroka Airport'",
        "schema": "CREATE TABLE airlines (country TEXT); CREATE TABLE airports (city TEXT, apid NUMBER, elevation NUMBER, name TEXT, country TEXT);"
      }
    ],
    [
      {
        "question": "Find the routes operated by all airlines? | Do you mean return all the routes? | yes.",
        "query": "SELECT * FROM routes",
        "schema": "CREATE TABLE routes (rid NUMBER, alid NUMBER, src_apid NUMBER, dst_apid NUMBER, airline TEXT); CREATE TABLE airlines (name TEXT, alid NUMBER); CREATE TABLE airports (apid NUMBER);"
      },
      {
        "question": "Which of these is operated by American Airlines?",
        "query": "SELECT * FROM airlines AS t1 JOIN routes AS t2 ON t1.alid = t2.alid WHERE t1.name = 'American Airlines'",
        "schema": "CREATE TABLE routes (dst_apid NUMBER, airline TEXT, alid NUMBER, rid NUMBER, src_apid NUMBER); CREATE TABLE airports (apid NUMBER); CREATE TABLE airlines (alid NUMBER, name TEXT);"
      },
      {
        "question": "How many are they?",
        "query": "SELECT COUNT ( * ) FROM airlines AS t1 JOIN routes AS t2 ON t1.alid = t2.alid WHERE t1.name = 'American Airlines'",
        "schema": "CREATE TABLE airports (apid NUMBER); CREATE TABLE routes (alid NUMBER, airline TEXT, rid NUMBER, src_apid NUMBER, dst_apid NUMBER); CREATE TABLE airlines (alid NUMBER, name TEXT);"
      },
      {
        "question": "What of those not operated by American Airlines?",
        "query": "SELECT * FROM airlines AS t1 JOIN routes AS t2 ON t1.alid = t2.alid WHERE t1.name ! = 'American Airlines'",
        "schema": "CREATE TABLE airports (apid NUMBER); CREATE TABLE airlines (name TEXT, alid NUMBER); CREATE TABLE routes (airline TEXT, dst_apid NUMBER, rid NUMBER, alid NUMBER, src_apid NUMBER);"
      },
      {
        "question": "How many routes are not operated by American Airlines?",
        "query": "SELECT COUNT ( * ) FROM airlines AS t1 JOIN routes AS t2 ON t1.alid = t2.alid WHERE t1.name ! = 'American Airlines'",
        "schema": "CREATE TABLE routes (alid NUMBER, airline TEXT, dst_apid NUMBER, src_apid NUMBER, rid NUMBER); CREATE TABLE airports (apid NUMBER); CREATE TABLE airlines (alid NUMBER, name TEXT);"
      }
    ],
    [
      {
        "question": "How many airlines are there?",
        "query": "SELECT COUNT ( * ) FROM airlines",
        "schema": "CREATE TABLE airports (apid NUMBER, name TEXT); CREATE TABLE airlines (icao TEXT, alid NUMBER, name TEXT); CREATE TABLE routes (airline TEXT);"
      },
      {
        "question": "What's the least number of routes that an airline runs?",
        "query": "SELECT COUNT ( * ) FROM airlines AS t1 JOIN routes AS t2 ON t1.alid = t2.alid GROUP BY t1.name ORDER BY COUNT ( * ) ASC LIMIT 1",
        "schema": "CREATE TABLE airports (name TEXT, apid NUMBER); CREATE TABLE airlines (name TEXT, icao TEXT, alid NUMBER); CREATE TABLE routes (alid NUMBER, airline TEXT, src_apid NUMBER, rid NUMBER, dst_apid NUMBER);"
      },
      {
        "question": "how about the most number of routes that an airline runs?",
        "query": "SELECT COUNT ( * ) FROM airlines AS t1 JOIN routes AS t2 ON t1.alid = t2.alid GROUP BY t1.name ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE routes (airline TEXT, dst_apid NUMBER, src_apid NUMBER, alid NUMBER, rid NUMBER); CREATE TABLE airports (name TEXT, apid NUMBER); CREATE TABLE airlines (name TEXT, alid NUMBER, icao TEXT);"
      },
      {
        "question": "What is the name of that airline?",
        "query": "SELECT t1.name FROM airlines AS t1 JOIN routes AS t2 ON t1.alid = t2.alid GROUP BY t1.name ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE airlines (alid NUMBER, icao TEXT, name TEXT); CREATE TABLE routes (dst_apid NUMBER, airline TEXT, alid NUMBER, rid NUMBER, src_apid NUMBER); CREATE TABLE airports (apid NUMBER, name TEXT);"
      },
      {
        "question": "What country does Ryanair belong to?",
        "query": "SELECT country FROM airlines WHERE name = \"Ryanair\"",
        "schema": "CREATE TABLE airports (name TEXT, country TEXT, city TEXT, apid NUMBER); CREATE TABLE airlines (alid NUMBER, icao TEXT, name TEXT, country TEXT); CREATE TABLE routes (dst_apid NUMBER, alid NUMBER, rid NUMBER, src_apid NUMBER, airline TEXT);"
      }
    ],
    [
      {
        "question": "What is the name of the airport in Mount Hagen city?",
        "query": "SELECT name FROM airports WHERE city = 'Mount Hagen'",
        "schema": "CREATE TABLE airports (apid NUMBER, name TEXT, city TEXT);"
      },
      {
        "question": "Return the number of routes with destination airport in Italy operated by the airline with name 'American Airlines\"?",
        "query": "SELECT COUNT ( * ) FROM routes AS t1 JOIN airports AS t2 ON t1.dst_apid = t2.apid JOIN airlines AS t3 ON t1.alid = t3.alid WHERE t2.country = 'Italy' AND t3.name = 'American Airlines'",
        "schema": "CREATE TABLE routes (src_apid NUMBER, dst_apid NUMBER, alid NUMBER, rid NUMBER, airline TEXT); CREATE TABLE airlines (country TEXT, alid NUMBER, name TEXT); CREATE TABLE airports (country TEXT, apid NUMBER, city TEXT, name TEXT);"
      },
      {
        "question": "How many active airlines are on the list?",
        "query": "SELECT COUNT ( * ) FROM airlines WHERE active = 'Y'",
        "schema": "CREATE TABLE airlines (name TEXT, country TEXT, active TEXT, alid NUMBER); CREATE TABLE routes (dst_apid NUMBER, airline TEXT, src_apid NUMBER, rid NUMBER, alid NUMBER); CREATE TABLE airports (country TEXT, apid NUMBER, city TEXT, name TEXT);"
      },
      {
        "question": "What is the elevation of Madang Airport airport?",
        "query": "SELECT elevation FROM airports WHERE name = 'Madang Airport'",
        "schema": "CREATE TABLE airports (name TEXT, apid NUMBER, y NUMBER, city TEXT, country TEXT, elevation NUMBER); CREATE TABLE routes (airline TEXT, dst_apid NUMBER, alid NUMBER, rid NUMBER, src_apid NUMBER); CREATE TABLE airlines (alid NUMBER, country TEXT, active TEXT, name TEXT);"
      }
    ],
    [
      {
        "question": "What is the name of airport in the city Goroka?",
        "query": "SELECT name FROM airports WHERE city = \"Goroka\"",
        "schema": "CREATE TABLE airports (city TEXT, name TEXT, apid NUMBER);"
      },
      {
        "question": "Which airport situate in the elevation 5282?",
        "query": "SELECT name FROM airports WHERE elevation = 5282",
        "schema": "CREATE TABLE airports (elevation NUMBER, name TEXT, apid NUMBER, city TEXT);"
      },
      {
        "question": "What is the iata of Madang airport?",
        "query": "SELECT iata FROM airports WHERE name = \"Madang Airport\"",
        "schema": "CREATE TABLE airports (name TEXT, country TEXT, city TEXT, elevation NUMBER, icao TEXT, apid NUMBER, iata TEXT); CREATE TABLE airlines (country TEXT, icao TEXT, iata TEXT);"
      }
    ],
    [
      {
        "question": "what are the busiest airport in china? | busiest source airport or destination airport? | busiest source airport",
        "query": "SELECT t1.name FROM airports AS t1 JOIN routes AS t2 ON t1.apid = t2.src_apid WHERE t1.country = 'China' GROUP BY t1.name ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE routes (dst_apid NUMBER, src_apid NUMBER, dst_ap TEXT, src_ap TEXT); CREATE TABLE airports (apid NUMBER, iata TEXT, country TEXT, city TEXT, name TEXT);"
      },
      {
        "question": "what is the source airport id?",
        "query": "SELECT t1.apid FROM airports AS t1 JOIN routes AS t2 ON t1.apid = t2.src_apid WHERE t1.country = 'China' GROUP BY t1.name ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE routes (dst_ap TEXT, src_apid NUMBER, rid NUMBER, dst_apid NUMBER, alid NUMBER, src_ap TEXT); CREATE TABLE airports (iata TEXT, apid NUMBER, country TEXT, name TEXT, city TEXT);"
      },
      {
        "question": "what is the airline for source airport?",
        "query": "SELECT DISTINCT airline FROM routes WHERE src_apid = ( SELECT t1.apid FROM airports AS t1 JOIN routes AS t2 ON t1.apid = t2.src_apid WHERE t1.country = 'China' GROUP BY t1.name ORDER BY COUNT ( * ) DESC LIMIT 1 )",
        "schema": "CREATE TABLE routes (airline TEXT, rid NUMBER, src_ap TEXT, alid NUMBER, dst_apid NUMBER, dst_ap TEXT, src_apid NUMBER); CREATE TABLE airports (iata TEXT, country TEXT, name TEXT, apid NUMBER, city TEXT); CREATE TABLE airlines (name TEXT, country TEXT, alid NUMBER);"
      }
    ],
    [
      {
        "question": "whose source and destination airports are in the United States | Do you want the id of the routes whose source and destination airports are in the United States? | Yes",
        "query": "SELECT rid FROM routes WHERE dst_apid IN ( SELECT apid FROM airports WHERE country = 'United States' ) AND src_apid IN ( SELECT apid FROM airports WHERE country = 'United States' )",
        "schema": "CREATE TABLE routes (src_apid NUMBER, alid NUMBER, src_ap TEXT, dst_ap TEXT, rid NUMBER, dst_apid NUMBER); CREATE TABLE airports (country TEXT, name TEXT, apid NUMBER);"
      }
    ],
    [
      {
        "question": "Find the destination of the airport least number of routes in china?",
        "query": "SELECT t1.name FROM airports AS t1 JOIN routes AS t2 ON t1.apid = t2.dst_apid WHERE t1.country = 'China' GROUP BY t1.name ORDER BY COUNT ( * ) ASC LIMIT 1",
        "schema": "CREATE TABLE airlines (country TEXT, alid NUMBER); CREATE TABLE airports (apid NUMBER, city TEXT, country TEXT, name TEXT); CREATE TABLE routes (src_apid NUMBER, rid NUMBER, dst_apid NUMBER, alid NUMBER);"
      },
      {
        "question": "how many airports in the list?",
        "query": "SELECT DISTINCT ( COUNT ( name ) ) FROM airports",
        "schema": "CREATE TABLE airlines (country TEXT, alid NUMBER); CREATE TABLE routes (rid NUMBER, dst_apid NUMBER, alid NUMBER, src_apid NUMBER); CREATE TABLE airports (city TEXT, apid NUMBER, country TEXT, name TEXT);"
      },
      {
        "question": "find the country in the list? | What do you mean? | how many country in the list?",
        "query": "SELECT COUNT ( DISTINCT country ) FROM airports",
        "schema": "CREATE TABLE airlines (alid NUMBER, country TEXT); CREATE TABLE routes (src_apid NUMBER, dst_apid NUMBER, rid NUMBER, alid NUMBER); CREATE TABLE airports (city TEXT, name TEXT, apid NUMBER, country TEXT);"
      }
    ],
    [
      {
        "question": "how many airports are presented on the table",
        "query": "SELECT COUNT ( * ) FROM airports",
        "schema": "CREATE TABLE airports (apid NUMBER, city TEXT, name TEXT, x NUMBER);"
      },
      {
        "question": "list out the airports names",
        "query": "SELECT name FROM airports",
        "schema": "CREATE TABLE airports (name TEXT, apid NUMBER, city TEXT, x NUMBER);"
      },
      {
        "question": "how many cities are the aiports | Did you mean the number of cities that have any airport? | exactly",
        "query": "SELECT COUNT ( DISTINCT city ) FROM airports",
        "schema": "CREATE TABLE airports (x NUMBER, apid NUMBER, city TEXT, name TEXT);"
      }
    ],
    [
      {
        "question": "Hello!  Can you first give me a list of all of the countries?",
        "query": "SELECT country FROM airlines",
        "schema": "CREATE TABLE airlines (country TEXT, name TEXT); CREATE TABLE airports (apid NUMBER, country TEXT);"
      },
      {
        "question": "Great!  Which of these countries has the most airlines with an Active status of \"Y\"?",
        "query": "SELECT country FROM airlines WHERE active = 'Y' GROUP BY country ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE airports (country TEXT, apid NUMBER, y NUMBER); CREATE TABLE airlines (country TEXT, alid NUMBER, name TEXT, active TEXT);"
      },
      {
        "question": "Can you tell me what is the total number of airlines in the United States that have an active status of \"Y\"?",
        "query": "SELECT COUNT ( * ) FROM airlines WHERE active = 'Y' AND country = \"United States\"",
        "schema": "CREATE TABLE airports (country TEXT, y NUMBER, apid NUMBER); CREATE TABLE airlines (name TEXT, country TEXT, active TEXT, alid NUMBER);"
      }
    ],
    [
      {
        "question": "What is the name of the airport with the lowest altitude?",
        "query": "SELECT name FROM airports ORDER BY elevation LIMIT 1",
        "schema": "CREATE TABLE airports (elevation NUMBER, name TEXT, apid NUMBER);"
      },
      {
        "question": "And in which city is it located?",
        "query": "SELECT city FROM airports ORDER BY elevation LIMIT 1",
        "schema": "CREATE TABLE airports (name TEXT, city TEXT, apid NUMBER, elevation NUMBER);"
      },
      {
        "question": "And in what country is that?",
        "query": "SELECT country FROM airports ORDER BY elevation LIMIT 1",
        "schema": "CREATE TABLE airlines (country TEXT); CREATE TABLE airports (elevation NUMBER, apid NUMBER, city TEXT, name TEXT, country TEXT);"
      },
      {
        "question": "Yes, what is the exact altitude of the Bar Yehuda Airfield?",
        "query": "SELECT elevation FROM airports WHERE name = \"Bar Yehuda Airfield\"",
        "schema": "CREATE TABLE airports (country TEXT, city TEXT, elevation NUMBER, name TEXT, apid NUMBER); CREATE TABLE airlines (country TEXT);"
      }
    ],
    [
      {
        "question": "What cities have more than 3 airports in the United States?",
        "query": "SELECT city FROM airports WHERE country = 'United States' GROUP BY city HAVING COUNT ( * ) > 3",
        "schema": "CREATE TABLE airports (apid NUMBER, city TEXT, name TEXT, country TEXT);"
      },
      {
        "question": "What cities in the United States have more than 4 airports?",
        "query": "SELECT city FROM airports WHERE country = 'United States' GROUP BY city HAVING COUNT ( * ) > 4",
        "schema": "CREATE TABLE airports (name TEXT, country TEXT, apid NUMBER, city TEXT);"
      },
      {
        "question": "What are their names?",
        "query": "SELECT name FROM airports WHERE country = 'United States' GROUP BY city HAVING COUNT ( * ) > 4",
        "schema": "CREATE TABLE airports (name TEXT, city TEXT, apid NUMBER, country TEXT);"
      },
      {
        "question": "Show the names of all airports with elevation over 4000.",
        "query": "SELECT name FROM airports WHERE elevation > 4000",
        "schema": "CREATE TABLE airports (name TEXT, elevation NUMBER, country TEXT, apid NUMBER, city TEXT);"
      },
      {
        "question": "Show the names of all airports with elevation over 5000.",
        "query": "SELECT name FROM airports WHERE elevation > 5000",
        "schema": "CREATE TABLE airports (apid NUMBER, name TEXT, country TEXT, city TEXT, elevation NUMBER);"
      }
    ],
    [
      {
        "question": "what is the elevation of goroka airport",
        "query": "SELECT elevation FROM airports WHERE name = \"Goroka Airport\"",
        "schema": "CREATE TABLE airports (name TEXT, elevation NUMBER, apid NUMBER, city TEXT);"
      },
      {
        "question": "find the number of routes from the United States to Canada",
        "query": "SELECT COUNT ( * ) FROM routes WHERE dst_apid IN ( SELECT apid FROM airports WHERE country = 'Canada' ) AND src_apid IN ( SELECT apid FROM airports WHERE country = 'United States' )",
        "schema": "CREATE TABLE airports (elevation NUMBER, city TEXT, country TEXT, apid NUMBER, name TEXT); CREATE TABLE routes (alid NUMBER, dst_apid NUMBER, rid NUMBER, src_apid NUMBER);"
      }
    ],
    [
      {
        "question": "Show me the destination details of John F Kennedy International Airport",
        "query": "SELECT dst_apid,dst_ap FROM airports AS t1 JOIN routes AS t2 ON t1.apid = t2.dst_apid WHERE t1.name = 'John F Kennedy International Airport'",
        "schema": "CREATE TABLE airports (apid NUMBER, name TEXT, city TEXT); CREATE TABLE routes (dst_ap TEXT, dst_apid NUMBER, alid NUMBER, rid NUMBER, src_apid NUMBER);"
      },
      {
        "question": "Show me the routes details | do you mean the  routes details of John F Kennedy International Airport? | Yes",
        "query": "SELECT * FROM airports AS t1 JOIN routes AS t2 ON t1.apid = t2.dst_apid WHERE t1.name = 'John F Kennedy International Airport'",
        "schema": "CREATE TABLE airports (city TEXT, apid NUMBER, name TEXT); CREATE TABLE routes (rid NUMBER, dst_ap TEXT, src_apid NUMBER, alid NUMBER, dst_apid NUMBER);"
      },
      {
        "question": "Show me the number of routes that have destination John F Kennedy International Airport",
        "query": "SELECT COUNT ( * ) FROM airports AS t1 JOIN routes AS t2 ON t1.apid = t2.dst_apid WHERE t1.name = 'John F Kennedy International Airport'",
        "schema": "CREATE TABLE routes (dst_apid NUMBER, rid NUMBER, alid NUMBER, src_apid NUMBER, dst_ap TEXT); CREATE TABLE airports (city TEXT, apid NUMBER, name TEXT);"
      }
    ],
    [
      {
        "question": "WHAT IS THE AIRPORT NAME OF GORKA CITY IN AIRPORT TABLE?",
        "query": "SELECT name FROM airports WHERE city = 'Goroka'",
        "schema": "CREATE TABLE airports (apid NUMBER, name TEXT, city TEXT);"
      },
      {
        "question": "MADANG CITY SITUATED IN WHICH COUNTRY? IN AIRPORT TABLE",
        "query": "SELECT country FROM airports WHERE city = 'Madang'",
        "schema": "CREATE TABLE airlines (country TEXT); CREATE TABLE airports (country TEXT, apid NUMBER, name TEXT, city TEXT);"
      },
      {
        "question": "* I have left the chat *",
        "query": "SELECT DISTINCT rid FROM routes WHERE alid = '410'",
        "schema": "CREATE TABLE routes (rid NUMBER, alid NUMBER, src_apid NUMBER, dst_apid NUMBER); CREATE TABLE airlines (country TEXT); CREATE TABLE airports (city TEXT, apid NUMBER, country TEXT, name TEXT);"
      }
    ],
    [
      {
        "question": "What are all the source airports?",
        "query": "SELECT t2.src_apid,t2.src_ap,t1.name FROM airports AS t1 JOIN routes AS t2 ON t1.apid = t2.src_apid GROUP BY t1.name",
        "schema": "CREATE TABLE routes (src_apid NUMBER, src_ap TEXT, rid NUMBER, dst_ap TEXT, dst_apid NUMBER); CREATE TABLE airports (apid NUMBER, name TEXT);"
      },
      {
        "question": "What are all of the routes for each source airport? | do you mean the number of all of the routes? | Yes please.",
        "query": "SELECT COUNT ( * ) FROM airports AS t1 JOIN routes AS t2 ON t1.apid = t2.src_apid GROUP BY t1.name",
        "schema": "CREATE TABLE airports (apid NUMBER, name TEXT); CREATE TABLE routes (src_apid NUMBER, dst_ap TEXT, dst_apid NUMBER, rid NUMBER, src_ap TEXT, alid NUMBER);"
      },
      {
        "question": "What are the names of the airports associated with each number of routes?",
        "query": "SELECT t1.name, COUNT ( * ) FROM airports AS t1 JOIN routes AS t2 ON t1.apid = t2.src_apid GROUP BY t1.name",
        "schema": "CREATE TABLE airports (apid NUMBER, name TEXT); CREATE TABLE routes (dst_apid NUMBER, rid NUMBER, src_ap TEXT, dst_ap TEXT, alid NUMBER, src_apid NUMBER);"
      }
    ],
    [
      {
        "question": "Can you please tell me the number of routes with the destination airport Italy?",
        "query": "SELECT COUNT ( * ) FROM routes AS t1 JOIN airports AS t2 ON t1.dst_apid = t2.apid WHERE t2.country = 'Italy'",
        "schema": "CREATE TABLE airlines (alid NUMBER, country TEXT); CREATE TABLE routes (alid NUMBER, rid NUMBER, src_apid NUMBER, dst_apid NUMBER, airline TEXT); CREATE TABLE airports (apid NUMBER, country TEXT, name TEXT);"
      },
      {
        "question": "Can you please tell me the number of routes with the destination airport in Italy operated by the airline with the name 'American Airlines'?",
        "query": "SELECT COUNT ( * ) FROM routes AS t1 JOIN airports AS t2 ON t1.dst_apid = t2.apid JOIN airlines AS t3 ON t1.alid = t3.alid WHERE t2.country = 'Italy' AND t3.name = 'American Airlines'",
        "schema": "CREATE TABLE routes (src_apid NUMBER, rid NUMBER, alid NUMBER, airline TEXT, dst_apid NUMBER); CREATE TABLE airlines (name TEXT, alid NUMBER, country TEXT); CREATE TABLE airports (apid NUMBER, country TEXT, name TEXT);"
      },
      {
        "question": "What are the source airports of those routes?",
        "query": "SELECT t1.src_ap FROM routes AS t1 JOIN airports AS t2 ON t1.dst_apid = t2.apid JOIN airlines AS t3 ON t1.alid = t3.alid WHERE t2.country = 'Italy' AND t3.name = 'American Airlines'",
        "schema": "CREATE TABLE routes (airline TEXT, dst_apid NUMBER, rid NUMBER, src_ap TEXT, alid NUMBER, dst_ap TEXT, src_apid NUMBER); CREATE TABLE airlines (name TEXT, alid NUMBER, country TEXT); CREATE TABLE airports (name TEXT, apid NUMBER, country TEXT);"
      }
    ],
    [
      {
        "question": "How many airlines are there?",
        "query": "SELECT COUNT ( * ) FROM airlines",
        "schema": "CREATE TABLE routes (airline TEXT); CREATE TABLE airlines (name TEXT, alid NUMBER, icao TEXT); CREATE TABLE airports (name TEXT, apid NUMBER);"
      },
      {
        "question": "* I have left the chat *",
        "query": "SELECT * FROM airlines WHERE name LIKE 'Private%'",
        "schema": "CREATE TABLE routes (airline TEXT, rid NUMBER, dst_apid NUMBER, alid NUMBER); CREATE TABLE airlines (alid NUMBER, name TEXT, icao TEXT); CREATE TABLE airports (apid NUMBER, name TEXT);"
      }
    ],
    [
      {
        "question": "Which cities have more than one airport?",
        "query": "SELECT city FROM airports GROUP BY city HAVING COUNT ( * ) > 1",
        "schema": "CREATE TABLE airports (name TEXT, city TEXT, apid NUMBER);"
      },
      {
        "question": "Now show the number of airports in each of those cities",
        "query": "SELECT city , COUNT ( * ) FROM airports GROUP BY city HAVING COUNT ( * ) > 1",
        "schema": "CREATE TABLE airports (city TEXT, name TEXT, apid NUMBER);"
      },
      {
        "question": "Which cities have three airports",
        "query": "SELECT city FROM airports GROUP BY city HAVING COUNT ( * ) = 3",
        "schema": "CREATE TABLE airports (apid NUMBER, name TEXT, city TEXT);"
      },
      {
        "question": "Which cities have 4 or more airports",
        "query": "SELECT city FROM airports GROUP BY city HAVING COUNT ( * ) > = 4",
        "schema": "CREATE TABLE airports (apid NUMBER, name TEXT, city TEXT);"
      },
      {
        "question": "Show the number of airports in those cities",
        "query": "SELECT city, COUNT ( * ) FROM airports GROUP BY city HAVING COUNT ( * ) > = 4",
        "schema": "CREATE TABLE airports (name TEXT, city TEXT, apid NUMBER);"
      }
    ],
    [
      {
        "question": "How many routes have a destination airport in Canada, please?",
        "query": "SELECT COUNT ( * ) FROM airports AS t1 JOIN routes AS t2 ON t1.apid = t2.dst_apid WHERE country = 'Canada'",
        "schema": "CREATE TABLE airlines (country TEXT, alid NUMBER); CREATE TABLE routes (alid NUMBER, rid NUMBER, dst_apid NUMBER, src_apid NUMBER, airline TEXT); CREATE TABLE airports (apid NUMBER, city TEXT, country TEXT, name TEXT);"
      },
      {
        "question": "How many routes have a destination airport in the United States, please?",
        "query": "SELECT COUNT ( * ) FROM airports AS t1 JOIN routes AS t2 ON t1.apid = t2.dst_apid WHERE country = 'United States'",
        "schema": "CREATE TABLE airlines (country TEXT, alid NUMBER); CREATE TABLE airports (country TEXT, city TEXT, name TEXT, apid NUMBER); CREATE TABLE routes (airline TEXT, dst_apid NUMBER, rid NUMBER, src_apid NUMBER, alid NUMBER);"
      },
      {
        "question": "How many routes have a source airport in Canada and a destination airport in the United States, please?",
        "query": "SELECT COUNT ( * ) FROM ( SELECT rid FROM airports AS t1 JOIN routes AS t2 ON t1.apid = t2.dst_apid WHERE t1.country = 'United States' INTERSECT SELECT rid FROM airports AS t3 JOIN routes AS t4 ON t3.apid = t4.src_apid WHERE t3.country = 'Canada' )",
        "schema": "CREATE TABLE airlines (country TEXT, alid NUMBER); CREATE TABLE routes (alid NUMBER, airline TEXT, src_apid NUMBER, src_ap TEXT, rid NUMBER, dst_apid NUMBER); CREATE TABLE airports (name TEXT, city TEXT, apid NUMBER, country TEXT);"
      },
      {
        "question": "What are the names of those source airports that begin with the letter A?",
        "query": "SELECT t1.name FROM airports AS t1 JOIN routes AS t2 ON t1.apid = t2.src_apid WHERE t1.name like 'A%'",
        "schema": "CREATE TABLE routes (airline TEXT, src_ap TEXT, dst_apid NUMBER, rid NUMBER, alid NUMBER, src_apid NUMBER); CREATE TABLE airports (name TEXT, city TEXT, country TEXT, apid NUMBER); CREATE TABLE airlines (alid NUMBER, country TEXT);"
      },
      {
        "question": "What are the ones that are in Canada only?",
        "query": "SELECT DISTINCT ( t1.name ) FROM airports AS t1 JOIN routes AS t2 ON t1.apid = t2.src_apid WHERE t1.name like 'A%' AND t1.country = \"Canada\"",
        "schema": "CREATE TABLE routes (alid NUMBER, src_apid NUMBER, airline TEXT, rid NUMBER, dst_apid NUMBER, src_ap TEXT); CREATE TABLE airlines (alid NUMBER, country TEXT); CREATE TABLE airports (apid NUMBER, name TEXT, country TEXT, city TEXT);"
      }
    ],
    [
      {
        "question": "Can you list the number of airports whose names contain the word \"International\"?",
        "query": "SELECT COUNT ( * ) FROM airports WHERE name LIKE '%International%'",
        "schema": "CREATE TABLE airports (country TEXT, name TEXT, city TEXT, apid NUMBER);"
      },
      {
        "question": "What is the most common country of all of those airports?",
        "query": "SELECT country FROM airports GROUP BY country ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE airports (city TEXT, apid NUMBER, name TEXT, country TEXT); CREATE TABLE airlines (country TEXT);"
      },
      {
        "question": "What is the greatest elevation of all of those airports?",
        "query": "SELECT MAX ( elevation ) FROM airports",
        "schema": "CREATE TABLE airports (city TEXT, elevation NUMBER, name TEXT, apid NUMBER, country TEXT); CREATE TABLE airlines (country TEXT);"
      },
      {
        "question": "What is the minimum elevation?",
        "query": "SELECT MIN ( elevation ) FROM airports",
        "schema": "CREATE TABLE airports (name TEXT, city TEXT, elevation NUMBER, country TEXT, apid NUMBER); CREATE TABLE airlines (country TEXT);"
      },
      {
        "question": "What country is the airport with the lowest elevation located in?",
        "query": "SELECT country FROM airports WHERE elevation = ( SELECT MIN ( elevation ) FROM airports )",
        "schema": "CREATE TABLE airlines (country TEXT); CREATE TABLE airports (apid NUMBER, country TEXT, name TEXT, elevation NUMBER, city TEXT);"
      }
    ],
    [
      {
        "question": "Show the route id of the destination airport id 2990?",
        "query": "SELECT rid FROM routes WHERE dst_apid = '2990'",
        "schema": "CREATE TABLE airlines (alid NUMBER); CREATE TABLE airports (name TEXT, apid NUMBER); CREATE TABLE routes (alid NUMBER, dst_apid NUMBER, rid NUMBER, src_apid NUMBER);"
      },
      {
        "question": "Show the number of different airports which are the destinations of the American Airlines?",
        "query": "SELECT COUNT ( DISTINCT dst_apid ) FROM airlines AS t1 JOIN routes AS t2 ON t1.alid = t2.alid WHERE t1.name = 'American Airlines'",
        "schema": "CREATE TABLE airlines (alid NUMBER, country TEXT, name TEXT, icao TEXT); CREATE TABLE airports (name TEXT, apid NUMBER); CREATE TABLE routes (dst_apid NUMBER, rid NUMBER, alid NUMBER, airline TEXT, src_apid NUMBER);"
      },
      {
        "question": "Show the destination airport of route id 39?",
        "query": "SELECT dst_apid FROM routes WHERE rid = 39",
        "schema": "CREATE TABLE routes (src_apid NUMBER, airline TEXT, alid NUMBER, rid NUMBER, dst_apid NUMBER); CREATE TABLE airlines (name TEXT, country TEXT, icao TEXT, alid NUMBER); CREATE TABLE airports (name TEXT, apid NUMBER);"
      }
    ],
    [
      {
        "question": "how many on the airport table",
        "query": "SELECT COUNT ( * ) FROM airports",
        "schema": "CREATE TABLE airlines (alid NUMBER); CREATE TABLE airports (name TEXT, icao TEXT, x NUMBER, apid NUMBER);"
      },
      {
        "question": "what is the country of goroka",
        "query": "SELECT country FROM airports WHERE city = 'Goroka'",
        "schema": "CREATE TABLE airports (x NUMBER, country TEXT, city TEXT, icao TEXT, name TEXT, apid NUMBER); CREATE TABLE airlines (country TEXT, alid NUMBER);"
      },
      {
        "question": "find the name and city of the airport which is the destination of the most number of route.",
        "query": "SELECT t1.name , t1.city FROM airports AS t1 JOIN routes AS t2 ON t1.apid = t2.dst_apid GROUP BY t2.dst_apid ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE airports (apid NUMBER, country TEXT, name TEXT, city TEXT, icao TEXT, x NUMBER); CREATE TABLE routes (src_apid NUMBER, dst_apid NUMBER, alid NUMBER, rid NUMBER); CREATE TABLE airlines (country TEXT, alid NUMBER);"
      }
    ],
    [
      {
        "question": "How many airlines do you have?",
        "query": "SELECT COUNT ( * ) FROM airlines",
        "schema": "CREATE TABLE routes (airline TEXT, alid NUMBER); CREATE TABLE airlines (name TEXT, icao TEXT, active TEXT, alid NUMBER); CREATE TABLE airports (apid NUMBER);"
      },
      {
        "question": "How many routes does each airline have?",
        "query": "SELECT t1.name, COUNT ( * ) FROM airlines AS t1 JOIN routes AS t2 ON t1.alid = t2.alid GROUP BY t2.alid",
        "schema": "CREATE TABLE routes (alid NUMBER, rid NUMBER, airline TEXT, src_apid NUMBER, dst_apid NUMBER); CREATE TABLE airports (apid NUMBER); CREATE TABLE airlines (alid NUMBER, name TEXT, active TEXT, icao TEXT);"
      },
      {
        "question": "What are the names of the top 10 airlines with the most number of routes?",
        "query": "SELECT t1.name FROM airlines AS t1 JOIN routes AS t2 ON t1.alid = t2.alid GROUP BY t2.alid ORDER BY COUNT ( * ) DESC LIMIT 10",
        "schema": "CREATE TABLE routes (rid NUMBER, alid NUMBER, dst_apid NUMBER, src_apid NUMBER, airline TEXT); CREATE TABLE airports (apid NUMBER); CREATE TABLE airlines (icao TEXT, name TEXT, alid NUMBER, active TEXT);"
      }
    ],
    [
      {
        "question": "hi. How many routes are there?",
        "query": "SELECT COUNT ( * ) FROM routes AS t1 JOIN airports AS t2",
        "schema": "CREATE TABLE airports (apid NUMBER); CREATE TABLE routes (rid NUMBER, alid NUMBER, airline TEXT, dst_apid NUMBER, src_apid NUMBER); CREATE TABLE airlines (alid NUMBER);"
      },
      {
        "question": "how many have destination airports in Italy?",
        "query": "SELECT COUNT ( * ) FROM routes AS t1 JOIN airports AS t2 ON t1.dst_apid = t2.apid WHERE t2.country = 'Italy'",
        "schema": "CREATE TABLE routes (airline TEXT, alid NUMBER, src_apid NUMBER, dst_apid NUMBER, rid NUMBER); CREATE TABLE airlines (country TEXT, alid NUMBER); CREATE TABLE airports (apid NUMBER, city TEXT, name TEXT, country TEXT);"
      }
    ],
    [
      {
        "question": "What are the names of the airlines ?",
        "query": "SELECT name FROM airlines",
        "schema": "CREATE TABLE routes (airline TEXT); CREATE TABLE airlines (callsign TEXT, alid NUMBER, name TEXT); CREATE TABLE airports (apid NUMBER, name TEXT);"
      },
      {
        "question": "How many routes are there in the United States ?",
        "query": "SELECT COUNT ( * ) FROM routes AS t1 JOIN airlines AS t2 ON t2.alid = t1.alid WHERE t2.country = 'United States'",
        "schema": "CREATE TABLE airports (apid NUMBER, name TEXT, country TEXT); CREATE TABLE airlines (name TEXT, icao TEXT, country TEXT, alid NUMBER, callsign TEXT); CREATE TABLE routes (rid NUMBER, dst_apid NUMBER, src_apid NUMBER, alid NUMBER, airline TEXT);"
      },
      {
        "question": "Can you give me a number of routes per country and airline name  ?",
        "query": "SELECT t1.country , t1.name , COUNT ( * ) FROM airlines AS t1 JOIN routes AS t2 ON t1.alid = t2.alid GROUP BY t1.country , t1.name",
        "schema": "CREATE TABLE airports (country TEXT, apid NUMBER, name TEXT); CREATE TABLE routes (airline TEXT, src_apid NUMBER, rid NUMBER, alid NUMBER, dst_apid NUMBER); CREATE TABLE airlines (icao TEXT, alid NUMBER, callsign TEXT, country TEXT, name TEXT);"
      }
    ],
    [
      {
        "question": "Can you show me the total number of airports?",
        "query": "SELECT COUNT ( apid ) FROM airports",
        "schema": "CREATE TABLE airports (apid NUMBER, name TEXT, x NUMBER, city TEXT); CREATE TABLE routes (src_apid NUMBER, dst_apid NUMBER);"
      },
      {
        "question": "How about the total number of cities?",
        "query": "SELECT COUNT ( DISTINCT city ) FROM airports",
        "schema": "CREATE TABLE routes (dst_apid NUMBER, src_apid NUMBER); CREATE TABLE airports (x NUMBER, city TEXT, apid NUMBER, name TEXT);"
      },
      {
        "question": "Can you sort them by the number of airports?",
        "query": "SELECT city FROM airports GROUP BY city HAVING COUNT ( * ) > 2 ORDER BY COUNT ( * )",
        "schema": "CREATE TABLE routes (src_apid NUMBER, dst_apid NUMBER); CREATE TABLE airports (city TEXT, name TEXT, x NUMBER, apid NUMBER);"
      }
    ],
    [
      {
        "question": "which country has the airport with the highest altitude?",
        "query": "SELECT country FROM airports ORDER BY elevation DESC LIMIT 1",
        "schema": "CREATE TABLE airports (elevation NUMBER, name TEXT, apid NUMBER, country TEXT); CREATE TABLE airlines (country TEXT);"
      },
      {
        "question": "in what city is it located?",
        "query": "SELECT city FROM airports ORDER BY elevation DESC LIMIT 1",
        "schema": "CREATE TABLE airlines (country TEXT); CREATE TABLE airports (name TEXT, elevation NUMBER, city TEXT, apid NUMBER, country TEXT);"
      },
      {
        "question": "what is its elevation?",
        "query": "SELECT elevation FROM airports ORDER BY elevation DESC LIMIT 1",
        "schema": "CREATE TABLE airlines (country TEXT); CREATE TABLE airports (country TEXT, elevation NUMBER, apid NUMBER, name TEXT, city TEXT);"
      }
    ]
  ],
  "gymnast": [
    [
      {
        "question": "Hello there! Can you list all of the hometowns listed in this database?",
        "query": "SELECT DISTINCT hometown FROM people",
        "schema": "CREATE TABLE people (Name TEXT, People_ID NUMBER, Hometown TEXT);"
      },
      {
        "question": "Thank you for that information!  Can you filter that list to show just the hometowns for gymnasts whose total points are more than 57.5?",
        "query": "SELECT DISTINCT t2.hometown FROM gymnast AS t1 JOIN people AS t2 ON t1.gymnast_id = t2.people_id WHERE t1.total_points > 57.5",
        "schema": "CREATE TABLE gymnast (Total_Points NUMBER, Gymnast_ID NUMBER); CREATE TABLE people (Name TEXT, People_ID NUMBER, Hometown TEXT);"
      },
      {
        "question": "Thank you! Can you show all of the names of the gymnasts for those hometowns?",
        "query": "SELECT name FROM people WHERE hometown = \"Santo Domingo\" OR hometown = \"Bonao\"",
        "schema": "CREATE TABLE gymnast (Gymnast_ID NUMBER, Total_Points NUMBER); CREATE TABLE people (Hometown TEXT, People_ID NUMBER, Name TEXT);"
      }
    ],
    [
      {
        "question": "Hello!  Can you show me a list of all of the hometowns?",
        "query": "SELECT hometown FROM people",
        "schema": "CREATE TABLE people (People_ID NUMBER, Name TEXT, Hometown TEXT);"
      },
      {
        "question": "Thank you!  Can you filter this list ot show only the hometowns that have both people older than 23 years of age and people younger than 20 years of age?",
        "query": "SELECT hometown FROM people WHERE age > 23 INTERSECT SELECT hometown FROM people WHERE age < 20",
        "schema": "CREATE TABLE people (Name TEXT, Hometown TEXT, People_ID NUMBER, Age NUMBER);"
      },
      {
        "question": "Excellent!  Can you tell me how many people in total have Santo Domingo as their Hometown?",
        "query": "SELECT COUNT ( * ) FROM people WHERE hometown = \"Santo Domingo\"",
        "schema": "CREATE TABLE people (People_ID NUMBER, Age NUMBER, Hometown TEXT, Name TEXT);"
      }
    ],
    [
      {
        "question": "Who is the tallest gymnast?",
        "query": "SELECT t2.name FROM gymnast AS t1 JOIN people AS t2 ON t1.gymnast_id = t2.people_id ORDER BY t2.height DESC LIMIT 1",
        "schema": "CREATE TABLE people (People_ID NUMBER, Height NUMBER, Name TEXT); CREATE TABLE gymnast (Horizontal_Bar_Points NUMBER, Rings_Points NUMBER, Gymnast_ID NUMBER, Total_Points NUMBER, Floor_Exercise_Points NUMBER);"
      },
      {
        "question": "How tall is Nadia Caba Rodr\u00edguez?",
        "query": "SELECT height FROM people WHERE name = 'Nadia Caba Rodr\u00edguez'",
        "schema": "CREATE TABLE gymnast (Horizontal_Bar_Points NUMBER, Total_Points NUMBER, Rings_Points NUMBER, Floor_Exercise_Points NUMBER, Gymnast_ID NUMBER); CREATE TABLE people (Height NUMBER, People_ID NUMBER, Name TEXT, Hometown TEXT);"
      },
      {
        "question": "Great, can you list the names of the gymnasts in ascending order by their heights?",
        "query": "SELECT t2.name FROM gymnast AS t1 JOIN people AS t2 ON t1.gymnast_id = t2.people_id ORDER BY t2.height",
        "schema": "CREATE TABLE people (Hometown TEXT, People_ID NUMBER, Name TEXT, Height NUMBER); CREATE TABLE gymnast (Gymnast_ID NUMBER, Floor_Exercise_Points NUMBER, Total_Points NUMBER, Rings_Points NUMBER, Horizontal_Bar_Points NUMBER);"
      }
    ],
    [
      {
        "question": "Hello!  Can you please list all of the gymnast IDs and their associated hometowns?",
        "query": "SELECT t1.gymnast_id, t2.hometown FROM gymnast AS t1 JOIN people AS t2 ON t1.gymnast_id = t2.people_id",
        "schema": "CREATE TABLE gymnast (Gymnast_ID NUMBER); CREATE TABLE people (Hometown TEXT, People_ID NUMBER, Name TEXT);"
      },
      {
        "question": "Awesome!  Which of these hometowns is the most common?",
        "query": "SELECT t2.hometown FROM gymnast AS t1 JOIN people AS t2 ON t1.gymnast_id = t2.people_id GROUP BY t2.hometown ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE gymnast (Gymnast_ID NUMBER); CREATE TABLE people (Name TEXT, People_ID NUMBER, Hometown TEXT);"
      },
      {
        "question": "Awesome!  Can you show me a list of all people names that are associated with Santo Domingo?",
        "query": "SELECT name FROM people WHERE hometown = \"Santo Domingo\"",
        "schema": "CREATE TABLE people (Name TEXT, Hometown TEXT, People_ID NUMBER); CREATE TABLE gymnast (Gymnast_ID NUMBER);"
      }
    ],
    [
      {
        "question": "what are the hometowns of gymnasts",
        "query": "SELECT t2.hometown FROM gymnast AS t1 JOIN people AS t2 ON t1.gymnast_id = t2.people_id GROUP BY t2.hometown",
        "schema": "CREATE TABLE gymnast (Gymnast_ID NUMBER); CREATE TABLE people (Hometown TEXT, People_ID NUMBER, Name TEXT);"
      },
      {
        "question": "the corresponding number of gymnasts? | Can you clarity what do you mean by the corresponding number? | how many gymnasts are in table?",
        "query": "SELECT COUNT ( * ) FROM gymnast",
        "schema": "CREATE TABLE gymnast (Gymnast_ID NUMBER); CREATE TABLE people (People_ID NUMBER, Name TEXT, Hometown TEXT);"
      },
      {
        "question": "details about paul hamm | Can you be more specific for what details do you need for Paul Hamm? | i want paul hamm's age",
        "query": "SELECT age FROM people WHERE name = \"Paul Hamm\"",
        "schema": "CREATE TABLE gymnast (Gymnast_ID NUMBER); CREATE TABLE people (Hometown TEXT, Age NUMBER, People_ID NUMBER, Name TEXT);"
      }
    ],
    [
      {
        "question": "how many people are there",
        "query": "SELECT COUNT ( * ) FROM people",
        "schema": "CREATE TABLE people (People_ID NUMBER, Name TEXT, Age NUMBER); CREATE TABLE gymnast (Gymnast_ID NUMBER);"
      },
      {
        "question": "how many are under age 21",
        "query": "SELECT COUNT ( * ) FROM people WHERE age < 21",
        "schema": "CREATE TABLE people (Height NUMBER, Age NUMBER, People_ID NUMBER, Name TEXT); CREATE TABLE gymnast (Gymnast_ID NUMBER);"
      },
      {
        "question": "how many are from same hometown | Santo Domingo is the only hometown where more than 1 person is from. There are 5 people from the hometown San Domingo. | what is the name of people ID 2",
        "query": "SELECT name FROM people WHERE people_id = 2",
        "schema": "CREATE TABLE people (Age NUMBER, Name TEXT, Hometown TEXT, Height NUMBER, People_ID NUMBER); CREATE TABLE gymnast (Gymnast_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show the ages of gymnasts in descending order of total points.",
        "query": "SELECT t2.age FROM gymnast AS t1 JOIN people AS t2 ON t1.gymnast_id = t2.people_id ORDER BY t1.total_points DESC",
        "schema": "CREATE TABLE gymnast (Gymnast_ID NUMBER, Total_Points NUMBER); CREATE TABLE people (Age NUMBER, People_ID NUMBER);"
      },
      {
        "question": "Show their names.",
        "query": "SELECT t2.name FROM gymnast AS t1 JOIN people AS t2 ON t1.gymnast_id = t2.people_id ORDER BY t1.total_points DESC",
        "schema": "CREATE TABLE people (Age NUMBER, Name TEXT, People_ID NUMBER); CREATE TABLE gymnast (Total_Points NUMBER, Gymnast_ID NUMBER);"
      },
      {
        "question": "What is the height of Paul Hamm?",
        "query": "SELECT height FROM people WHERE name = 'Paul Hamm'",
        "schema": "CREATE TABLE gymnast (Gymnast_ID NUMBER, Total_Points NUMBER); CREATE TABLE people (Height NUMBER, Name TEXT, People_ID NUMBER, Age NUMBER);"
      },
      {
        "question": "What is his hometown?",
        "query": "SELECT hometown FROM people WHERE name = 'Paul Hamm'",
        "schema": "CREATE TABLE people (People_ID NUMBER, Height NUMBER, Age NUMBER, Name TEXT, Hometown TEXT); CREATE TABLE gymnast (Total_Points NUMBER, Gymnast_ID NUMBER);"
      },
      {
        "question": "How many total points does he have?",
        "query": "SELECT SUM ( total_points ) FROM gymnast AS t1 JOIN people AS t2 ON t1.gymnast_id = t2.people_id WHERE t2.name = 'Paul Hamm'",
        "schema": "CREATE TABLE gymnast (Total_Points NUMBER, Gymnast_ID NUMBER); CREATE TABLE people (Height NUMBER, People_ID NUMBER, Name TEXT, Hometown TEXT, Age NUMBER);"
      },
      {
        "question": "How many rings points does he have?",
        "query": "SELECT rings_points FROM gymnast AS t1 JOIN people AS t2 ON t1.gymnast_id = t2.people_id WHERE t2.name = 'Paul Hamm'",
        "schema": "CREATE TABLE gymnast (Rings_Points NUMBER, Total_Points NUMBER, Gymnast_ID NUMBER); CREATE TABLE people (Height NUMBER, Name TEXT, Age NUMBER, People_ID NUMBER, Hometown TEXT);"
      }
    ],
    [
      {
        "question": "What is the tallest height?",
        "query": "SELECT MAX ( height ) FROM people",
        "schema": "CREATE TABLE gymnast (Gymnast_ID NUMBER); CREATE TABLE people (People_ID NUMBER, Name TEXT, Height NUMBER);"
      },
      {
        "question": "What is that person's name?",
        "query": "SELECT name FROM people ORDER BY height DESC LIMIT 1",
        "schema": "CREATE TABLE gymnast (Gymnast_ID NUMBER); CREATE TABLE people (People_ID NUMBER, Name TEXT, Height NUMBER);"
      },
      {
        "question": "How old is he?",
        "query": "SELECT age FROM people ORDER BY height DESC LIMIT 1",
        "schema": "CREATE TABLE people (Height NUMBER, Name TEXT, Age NUMBER, People_ID NUMBER); CREATE TABLE gymnast (Gymnast_ID NUMBER);"
      }
    ]
  ],
  "activity_1": [
    [
      {
        "question": "Show me all the buildings",
        "query": "SELECT building FROM faculty",
        "schema": "CREATE TABLE Student (StuID NUMBER); CREATE TABLE Faculty (FacID NUMBER, Building TEXT);"
      },
      {
        "question": "Show me the details of all professors | do you mean all information about them? | Yes",
        "query": "SELECT * FROM faculty",
        "schema": "CREATE TABLE Faculty (Building TEXT, FacID NUMBER, Fname TEXT, Rank TEXT, Room TEXT, Lname TEXT); CREATE TABLE Student (StuID NUMBER); CREATE TABLE Faculty_Participates_in (FacID NUMBER);"
      },
      {
        "question": "Show me all the buildings that have at least 10 professors",
        "query": "SELECT building FROM faculty WHERE rank = \"Professor\" GROUP BY building HAVING COUNT ( * ) > = 10",
        "schema": "CREATE TABLE Faculty_Participates_in (FacID NUMBER); CREATE TABLE Faculty (Building TEXT, Rank TEXT, Fname TEXT, Room TEXT, FacID NUMBER, Lname TEXT); CREATE TABLE Student (StuID NUMBER);"
      }
    ],
    [
      {
        "question": "how many students are there?",
        "query": "SELECT COUNT ( * ) FROM student",
        "schema": "CREATE TABLE Activity (actid NUMBER); CREATE TABLE Faculty_Participates_in (FacID NUMBER); CREATE TABLE Participates_in (actid NUMBER, stuid NUMBER); CREATE TABLE Student (Major NUMBER, Sex TEXT, city_code TEXT, Advisor NUMBER, LName TEXT, StuID NUMBER, Age NUMBER, Fname TEXT); CREATE TABLE Faculty (Rank TEXT, FacID NUMBER);"
      },
      {
        "question": "how many don't participate in activities?",
        "query": "SELECT COUNT ( * ) FROM ( SELECT stuid FROM student EXCEPT SELECT stuid FROM participates_in )",
        "schema": "CREATE TABLE Faculty (FacID NUMBER, Rank TEXT); CREATE TABLE Participates_in (actid NUMBER, stuid NUMBER); CREATE TABLE Activity (actid NUMBER, activity_name TEXT); CREATE TABLE Student (Sex TEXT, Age NUMBER, LName TEXT, city_code TEXT, Advisor NUMBER, StuID NUMBER, Major NUMBER, Fname TEXT); CREATE TABLE Faculty_Participates_in (actid NUMBER, FacID NUMBER);"
      },
      {
        "question": "What are their Ids?",
        "query": "SELECT stuid FROM student EXCEPT SELECT stuid FROM participates_in",
        "schema": "CREATE TABLE Student (LName TEXT, Major NUMBER, city_code TEXT, Advisor NUMBER, Sex TEXT, StuID NUMBER, Age NUMBER, Fname TEXT); CREATE TABLE Activity (actid NUMBER, activity_name TEXT); CREATE TABLE Faculty_Participates_in (FacID NUMBER, actid NUMBER); CREATE TABLE Participates_in (stuid NUMBER, actid NUMBER); CREATE TABLE Faculty (FacID NUMBER, Rank TEXT);"
      }
    ],
    [
      {
        "question": "Hello!  Can you provide me with a list of first name, last name, and faculty ID of all faculty?",
        "query": "SELECT fname, lname, facid FROM faculty",
        "schema": "CREATE TABLE Faculty (Lname TEXT, FacID NUMBER, Fname TEXT, Rank TEXT);"
      },
      {
        "question": "Great!  Can you update this list to include the activity name associated with each individual faculty member?",
        "query": "SELECT t1.fname, t1.lname, t1.facid, t3.activity_name FROM faculty AS t1 JOIN faculty_participates_in AS t2 ON t1.facid = t2.facid JOIN activity AS t3 ON t2.actid = t3.actid",
        "schema": "CREATE TABLE Activity (activity_name TEXT, actid NUMBER); CREATE TABLE Faculty (Rank TEXT, FacID NUMBER, Lname TEXT, Fname TEXT); CREATE TABLE Faculty_Participates_in (FacID NUMBER, actid NUMBER); CREATE TABLE Participates_in (actid NUMBER);"
      },
      {
        "question": "Excellent!  Can you filter this list to remove all professors who are associated with either Canoeing or Kayaking?",
        "query": "SELECT t1.fname, t1.lname, t1.facid, t3.activity_name FROM faculty AS t1 JOIN faculty_participates_in AS t2 ON t1.facid = t2.facid JOIN activity AS t3 ON t2.actid = t3.actid WHERE t3.activity_name ! = 'Canoeing' OR t3.activity_name ! = 'Kayaking'",
        "schema": "CREATE TABLE Faculty_Participates_in (actid NUMBER, FacID NUMBER); CREATE TABLE Activity (actid NUMBER, activity_name TEXT); CREATE TABLE Faculty (Lname TEXT, FacID NUMBER, Fname TEXT, Rank TEXT); CREATE TABLE Participates_in (actid NUMBER, stuid NUMBER);"
      }
    ],
    [
      {
        "question": "How many professors are there?",
        "query": "SELECT COUNT ( * ) FROM faculty WHERE rank = \"Professor\"",
        "schema": "CREATE TABLE Student (StuID NUMBER, Advisor NUMBER); CREATE TABLE Faculty (Lname TEXT, Room TEXT, Rank TEXT, FacID NUMBER, Fname TEXT); CREATE TABLE Faculty_Participates_in (FacID NUMBER);"
      },
      {
        "question": "How many different buildings do you have?",
        "query": "SELECT COUNT ( DISTINCT building ) FROM faculty",
        "schema": "CREATE TABLE Student (StuID NUMBER, Advisor NUMBER); CREATE TABLE Faculty_Participates_in (FacID NUMBER); CREATE TABLE Faculty (Lname TEXT, FacID NUMBER, Building TEXT, Room TEXT, Fname TEXT, Rank TEXT);"
      },
      {
        "question": "Can you tell me the number of Professors in the building NEB?",
        "query": "SELECT COUNT ( * ) FROM faculty WHERE rank = \"Professor\" AND building = \"NEB\"",
        "schema": "CREATE TABLE Faculty (Building TEXT, FacID NUMBER, Fname TEXT, Room TEXT, Rank TEXT, Lname TEXT); CREATE TABLE Student (Advisor NUMBER, StuID NUMBER); CREATE TABLE Faculty_Participates_in (FacID NUMBER);"
      }
    ],
    [
      {
        "question": "what is the activity id of faculty id of 1082",
        "query": "SELECT actid FROM faculty_participates_in WHERE facid = 1082",
        "schema": "CREATE TABLE Student (StuID NUMBER); CREATE TABLE Faculty_Participates_in (actid NUMBER, FacID NUMBER); CREATE TABLE Activity (activity_name TEXT, actid NUMBER); CREATE TABLE Faculty (FacID NUMBER, Rank TEXT); CREATE TABLE Participates_in (stuid NUMBER, actid NUMBER);"
      },
      {
        "question": "what is the rank of mark",
        "query": "SELECT rank FROM faculty WHERE fname = \"Mark\"",
        "schema": "CREATE TABLE Faculty_Participates_in (actid NUMBER, FacID NUMBER); CREATE TABLE Activity (activity_name TEXT, actid NUMBER); CREATE TABLE Participates_in (stuid NUMBER, actid NUMBER); CREATE TABLE Student (StuID NUMBER); CREATE TABLE Faculty (Rank TEXT, FacID NUMBER, Fname TEXT, Lname TEXT);"
      }
    ],
    [
      {
        "question": "How many professors are there?",
        "query": "SELECT COUNT ( * ) FROM faculty WHERE rank = \"Professor\"",
        "schema": "CREATE TABLE Faculty_Participates_in (FacID NUMBER); CREATE TABLE Student (Advisor NUMBER, StuID NUMBER); CREATE TABLE Faculty (Fname TEXT, Lname TEXT, Rank TEXT, FacID NUMBER, Room TEXT);"
      },
      {
        "question": "how many are assistant professors? | Did you mean to ask for the number of assistant professors in total? | Well, yes.",
        "query": "SELECT COUNT ( * ) FROM faculty WHERE rank = \"AsstProf\"",
        "schema": "CREATE TABLE Student (Advisor NUMBER, StuID NUMBER); CREATE TABLE Faculty (Fname TEXT, Lname TEXT, Room TEXT, Rank TEXT, FacID NUMBER); CREATE TABLE Faculty_Participates_in (FacID NUMBER);"
      },
      {
        "question": "How many or women? | Did you mean to ask for the number of female assistant professors? | yes, how many are women?",
        "query": "SELECT COUNT ( * ) FROM faculty WHERE rank = \"AsstProf\" AND sex = \"F\"",
        "schema": "CREATE TABLE Faculty_Participates_in (FacID NUMBER); CREATE TABLE Student (Advisor NUMBER, StuID NUMBER); CREATE TABLE Faculty (Lname TEXT, Room TEXT, Fname TEXT, Rank TEXT, FacID NUMBER, Sex TEXT);"
      }
    ],
    [
      {
        "question": "how many student of there",
        "query": "SELECT COUNT ( * ) FROM student",
        "schema": "CREATE TABLE Activity (actid NUMBER, activity_name TEXT); CREATE TABLE Faculty_Participates_in (FacID NUMBER); CREATE TABLE Faculty (FacID NUMBER, Rank TEXT, Lname TEXT); CREATE TABLE Participates_in (stuid NUMBER, actid NUMBER); CREATE TABLE Student (LName TEXT, Age NUMBER, Fname TEXT, StuID NUMBER, city_code TEXT);"
      },
      {
        "question": "how many male students of there",
        "query": "SELECT COUNT ( * ) FROM student WHERE sex = \"M\"",
        "schema": "CREATE TABLE Participates_in (actid NUMBER, stuid NUMBER); CREATE TABLE Student (Fname TEXT, Sex TEXT, LName TEXT, Age NUMBER, city_code TEXT, StuID NUMBER); CREATE TABLE Faculty_Participates_in (FacID NUMBER); CREATE TABLE Activity (activity_name TEXT, actid NUMBER); CREATE TABLE Faculty (Sex TEXT, FacID NUMBER, Lname TEXT, Rank TEXT);"
      },
      {
        "question": "how many students from age of 18",
        "query": "SELECT COUNT ( * ) FROM student WHERE age = 18",
        "schema": "CREATE TABLE Faculty (Lname TEXT, FacID NUMBER, Rank TEXT, Sex TEXT); CREATE TABLE Student (Age NUMBER, city_code TEXT, StuID NUMBER, Sex TEXT, LName TEXT, Fname TEXT); CREATE TABLE Faculty_Participates_in (FacID NUMBER); CREATE TABLE Activity (actid NUMBER, activity_name TEXT); CREATE TABLE Participates_in (actid NUMBER, stuid NUMBER);"
      }
    ],
    [
      {
        "question": "Find the ids of the students who participate in Canoeing and Kayaking.",
        "query": "SELECT t1.stuid FROM participates_in AS t1 JOIN activity AS t2 ON t2.actid = t2.actid WHERE t2.activity_name = 'Canoeing' INTERSECT SELECT t1.stuid FROM participates_in AS t1 JOIN activity AS t2 ON t2.actid = t2.actid WHERE t2.activity_name = 'Kayaking'",
        "schema": "CREATE TABLE Participates_in (stuid NUMBER, actid NUMBER); CREATE TABLE Student (StuID NUMBER); CREATE TABLE Faculty_Participates_in (FacID NUMBER, actid NUMBER); CREATE TABLE Activity (activity_name TEXT, actid NUMBER);"
      },
      {
        "question": "What is activity name of activity id 770?",
        "query": "SELECT activity_name FROM activity WHERE actid = 770",
        "schema": "CREATE TABLE Activity (actid NUMBER, activity_name TEXT); CREATE TABLE Faculty_Participates_in (actid NUMBER, FacID NUMBER); CREATE TABLE Student (StuID NUMBER); CREATE TABLE Participates_in (stuid NUMBER, actid NUMBER);"
      }
    ],
    [
      {
        "question": "Hello, what are the names of the faculty members who don't participate in any activity?",
        "query": "SELECT lname, fname FROM faculty EXCEPT SELECT facid FROM faculty_participates_in",
        "schema": "CREATE TABLE Activity (activity_name TEXT, actid NUMBER); CREATE TABLE Faculty_Participates_in (actid NUMBER, FacID NUMBER); CREATE TABLE Faculty (Lname TEXT, Fname TEXT, FacID NUMBER, Rank TEXT); CREATE TABLE Participates_in (actid NUMBER, stuid NUMBER);"
      },
      {
        "question": "Which faculty members participate in activities?",
        "query": "SELECT t2.lname, t2.fname FROM faculty_participates_in AS t1 JOIN faculty AS t2 ON t1.facid = t2.facid",
        "schema": "CREATE TABLE Activity (activity_name TEXT, actid NUMBER); CREATE TABLE Participates_in (stuid NUMBER, actid NUMBER); CREATE TABLE Faculty (Fname TEXT, FacID NUMBER, Rank TEXT, Lname TEXT); CREATE TABLE Faculty_Participates_in (actid NUMBER, FacID NUMBER);"
      },
      {
        "question": "What activities do Michael Goodrich and Gerald Masson participate in?",
        "query": "SELECT actid FROM faculty_participates_in AS t1 JOIN faculty AS t2 ON t1.facid = t2.facid WHERE t2.lname = \"Goodrich\" AND t2.fname = \"Michael\" UNION SELECT actid FROM faculty_participates_in AS t1 JOIN faculty AS t2 ON t1.facid = t2.facid WHERE t2.lname = \"Masson\" AND t2.fname = \"Gerald\"",
        "schema": "CREATE TABLE Participates_in (stuid NUMBER, actid NUMBER); CREATE TABLE Faculty (Lname TEXT, Rank TEXT, Fname TEXT, FacID NUMBER); CREATE TABLE Faculty_Participates_in (actid NUMBER, FacID NUMBER); CREATE TABLE Activity (actid NUMBER, activity_name TEXT);"
      },
      {
        "question": "In total, how many faculty members are there?",
        "query": "SELECT COUNT ( * ) FROM faculty",
        "schema": "CREATE TABLE Faculty_Participates_in (actid NUMBER, FacID NUMBER); CREATE TABLE Faculty (FacID NUMBER, Lname TEXT, Fname TEXT, Rank TEXT); CREATE TABLE Participates_in (actid NUMBER, stuid NUMBER); CREATE TABLE Activity (actid NUMBER, activity_name TEXT);"
      }
    ],
    [
      {
        "question": "How many professors do you have in buildings? | Can you clarify your question? | Total number of professors in NEB building?",
        "query": "SELECT COUNT ( * ) FROM faculty WHERE rank = \"Professor\" AND building = \"NEB\"",
        "schema": "CREATE TABLE Student (Advisor NUMBER); CREATE TABLE Faculty (Room TEXT, FacID NUMBER, Rank TEXT, Building TEXT, Lname TEXT, Fname TEXT);"
      },
      {
        "question": "What of instructors?",
        "query": "SELECT COUNT ( * ) FROM faculty WHERE rank = \"Instructor\" AND building = \"NEB\"",
        "schema": "CREATE TABLE Student (Advisor NUMBER); CREATE TABLE Faculty (Room TEXT, Lname TEXT, Fname TEXT, Rank TEXT, FacID NUMBER, Building TEXT);"
      },
      {
        "question": "What of total number of faculty?",
        "query": "SELECT COUNT ( * ) FROM faculty WHERE building = \"NEB\"",
        "schema": "CREATE TABLE Faculty (Rank TEXT, Room TEXT, Building TEXT, Fname TEXT, Lname TEXT, FacID NUMBER); CREATE TABLE Student (Advisor NUMBER);"
      }
    ],
    [
      {
        "question": "Can you rank the faculty for me by ID | what  ID  did  you  want  to  order by ? | How many students were advised by professors?",
        "query": "SELECT COUNT ( * ) FROM faculty AS t1 JOIN student AS t2 ON t1.facid = t2.advisor WHERE t1.rank = \"Professor\"",
        "schema": "CREATE TABLE Faculty (Rank TEXT, Fname TEXT, Lname TEXT, FacID NUMBER); CREATE TABLE Student (Advisor NUMBER, Major NUMBER, StuID NUMBER, LName TEXT); CREATE TABLE Faculty_Participates_in (FacID NUMBER);"
      },
      {
        "question": "How many students were advised by instructors ?",
        "query": "SELECT COUNT ( * ) FROM faculty AS t1 JOIN student AS t2 ON t1.facid = t2.advisor WHERE t1.rank = \"Instructor\"",
        "schema": "CREATE TABLE Student (Major NUMBER, StuID NUMBER, Advisor NUMBER, LName TEXT); CREATE TABLE Faculty_Participates_in (FacID NUMBER); CREATE TABLE Faculty (Fname TEXT, FacID NUMBER, Rank TEXT, Lname TEXT);"
      }
    ],
    [
      {
        "question": "Find the first names of the faculty members who participate in Caonoeing and Kayaking.",
        "query": "SELECT t1.lname FROM faculty AS t1 JOIN faculty_participates_in AS t2 ON t1.facid = t2.facid JOIN activity AS t3 ON t2.actid = t2.actid WHERE t3.activity_name = 'Canoeing' INTERSECT SELECT t1.lname FROM faculty AS t1 JOIN faculty_participates_in AS t2 ON t1.facid = t2.facid JOIN activity AS t3 ON t2.actid = t2.actid WHERE t3.activity_name = 'Kayaking'",
        "schema": "CREATE TABLE Faculty (FacID NUMBER, Fname TEXT, Rank TEXT, Lname TEXT); CREATE TABLE Participates_in (stuid NUMBER, actid NUMBER); CREATE TABLE Activity (actid NUMBER, activity_name TEXT); CREATE TABLE Faculty_Participates_in (actid NUMBER, FacID NUMBER);"
      },
      {
        "question": "What about faculty members who participate in Mountain Climbing?",
        "query": "SELECT t1.fname FROM faculty AS t1 JOIN faculty_participates_in AS t2 ON t1.facid = t2.facid JOIN activity AS t3 ON t2.actid = t2.actid WHERE t3.activity_name = 'Mountain Climbing'",
        "schema": "CREATE TABLE Participates_in (stuid NUMBER, actid NUMBER); CREATE TABLE Faculty_Participates_in (FacID NUMBER, actid NUMBER); CREATE TABLE Faculty (Lname TEXT, Rank TEXT, FacID NUMBER, Fname TEXT); CREATE TABLE Activity (activity_name TEXT, actid NUMBER);"
      },
      {
        "question": "What about Mountain Climbing and Kayaking?",
        "query": "SELECT t1.fname FROM faculty AS t1 JOIN faculty_participates_in AS t2 ON t1.facid = t2.facid JOIN activity AS t3 ON t2.actid = t2.actid WHERE t3.activity_name = 'Mountain Climbing' INTERSECT SELECT t1.fname FROM faculty AS t1 JOIN faculty_participates_in AS t2 ON t1.facid = t2.facid JOIN activity AS t3 ON t2.actid = t2.actid WHERE t3.activity_name = 'Kayaking'",
        "schema": "CREATE TABLE Activity (actid NUMBER, activity_name TEXT); CREATE TABLE Faculty (Lname TEXT, Rank TEXT, Fname TEXT, FacID NUMBER); CREATE TABLE Faculty_Participates_in (FacID NUMBER, actid NUMBER); CREATE TABLE Participates_in (stuid NUMBER, actid NUMBER);"
      }
    ],
    [
      {
        "question": "Show the names of all the activities Mark Giuliano participates in.",
        "query": "SELECT t3.activity_name FROM faculty AS t1 JOIN faculty_participates_in AS t2 ON t1.facid = t2.facid JOIN activity AS t3 ON t3.actid = t2.actid WHERE t1.fname = \"Mark\" AND t1.lname = \"Giuliano\"",
        "schema": "CREATE TABLE Faculty_Participates_in (actid NUMBER, FacID NUMBER); CREATE TABLE Participates_in (stuid NUMBER, actid NUMBER); CREATE TABLE Student (Fname TEXT, StuID NUMBER, LName TEXT); CREATE TABLE Faculty (FacID NUMBER, Lname TEXT, Rank TEXT, Fname TEXT); CREATE TABLE Activity (activity_name TEXT, actid NUMBER);"
      },
      {
        "question": "What rank does Mark Giuliano have?",
        "query": "SELECT rank FROM faculty WHERE lname = 'Giuliano' AND fname = 'Mark'",
        "schema": "CREATE TABLE Participates_in (actid NUMBER, stuid NUMBER); CREATE TABLE Faculty (Fname TEXT, Lname TEXT, Rank TEXT, FacID NUMBER); CREATE TABLE Student (StuID NUMBER, Fname TEXT, LName TEXT); CREATE TABLE Activity (activity_name TEXT, actid NUMBER); CREATE TABLE Faculty_Participates_in (FacID NUMBER, actid NUMBER);"
      },
      {
        "question": "Give me names of all faculty members in alphabetical order | Do you want to rank by first name or last name? | first name",
        "query": "SELECT fname FROM faculty ORDER BY fname ASC",
        "schema": "CREATE TABLE Student (StuID NUMBER, Fname TEXT, LName TEXT); CREATE TABLE Participates_in (actid NUMBER, stuid NUMBER); CREATE TABLE Faculty (FacID NUMBER, Lname TEXT, Fname TEXT, Rank TEXT); CREATE TABLE Activity (actid NUMBER, activity_name TEXT); CREATE TABLE Faculty_Participates_in (FacID NUMBER, actid NUMBER);"
      }
    ],
    [
      {
        "question": "What is the first name of faculty partcipating in most activities?",
        "query": "SELECT t1.fname FROM faculty AS t1 JOIN faculty_participates_in AS t2 ON t1.facid = t2.facid GROUP BY t1.facid ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Activity (actid NUMBER, activity_name TEXT); CREATE TABLE Faculty_Participates_in (FacID NUMBER, actid NUMBER); CREATE TABLE Faculty (FacID NUMBER, Lname TEXT, Fname TEXT, Rank TEXT);"
      },
      {
        "question": "What is the last name of faculty partcipating in most activities?",
        "query": "SELECT t1.lname FROM faculty AS t1 JOIN faculty_participates_in AS t2 ON t1.facid = t2.facid GROUP BY t1.facid ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Faculty (Lname TEXT, Fname TEXT, FacID NUMBER, Rank TEXT); CREATE TABLE Activity (activity_name TEXT, actid NUMBER); CREATE TABLE Faculty_Participates_in (actid NUMBER, FacID NUMBER);"
      },
      {
        "question": "What is the rank of mark?",
        "query": "SELECT rank FROM faculty WHERE fname = \"Mark\"",
        "schema": "CREATE TABLE Faculty (FacID NUMBER, Fname TEXT, Lname TEXT, Rank TEXT); CREATE TABLE Faculty_Participates_in (actid NUMBER, FacID NUMBER); CREATE TABLE Activity (actid NUMBER, activity_name TEXT);"
      }
    ],
    [
      {
        "question": "what is the name of faceid 1082",
        "query": "SELECT fname, lname FROM faculty WHERE facid = 1082",
        "schema": "CREATE TABLE Faculty_Participates_in (FacID NUMBER); CREATE TABLE Activity (activity_name TEXT); CREATE TABLE Student (StuID NUMBER, Fname TEXT, Advisor NUMBER, LName TEXT); CREATE TABLE Faculty (FacID NUMBER, Fname TEXT, Lname TEXT);"
      },
      {
        "question": "What is the sex of professor | I am sorry. Which professor are you referring to? | Rank profeesor",
        "query": "SELECT sex FROM faculty WHERE rank = \"Professor\"",
        "schema": "CREATE TABLE Activity (activity_name TEXT); CREATE TABLE Student (Fname TEXT, StuID NUMBER, LName TEXT, Advisor NUMBER); CREATE TABLE Faculty_Participates_in (FacID NUMBER); CREATE TABLE Faculty (Fname TEXT, Rank TEXT, FacID NUMBER, Sex TEXT, Lname TEXT);"
      },
      {
        "question": "What is the phone of goodrich",
        "query": "SELECT phone FROM faculty WHERE lname = \"Goodrich\"",
        "schema": "CREATE TABLE Activity (activity_name TEXT); CREATE TABLE Faculty_Participates_in (FacID NUMBER); CREATE TABLE Student (LName TEXT, Fname TEXT, Advisor NUMBER, StuID NUMBER); CREATE TABLE Faculty (Rank TEXT, Lname TEXT, Phone NUMBER, Sex TEXT, Fname TEXT, FacID NUMBER);"
      },
      {
        "question": "what is the last name of mark",
        "query": "SELECT lname FROM faculty WHERE fname = \"Mark\"",
        "schema": "CREATE TABLE Faculty (Rank TEXT, Fname TEXT, Phone NUMBER, Lname TEXT, Sex TEXT, FacID NUMBER); CREATE TABLE Faculty_Participates_in (FacID NUMBER); CREATE TABLE Activity (activity_name TEXT); CREATE TABLE Student (StuID NUMBER, Fname TEXT, Advisor NUMBER, LName TEXT);"
      }
    ],
    [
      {
        "question": "Show all faculty ids",
        "query": "SELECT facid FROM faculty",
        "schema": "CREATE TABLE Faculty (Lname TEXT, Room TEXT, Rank TEXT, FacID NUMBER, Fname TEXT); CREATE TABLE Faculty_Participates_in (FacID NUMBER);"
      },
      {
        "question": "faculty Ids  who have at least 2 students",
        "query": "SELECT t1.facid FROM faculty AS t1 JOIN student AS t2 ON t1.facid = t2.advisor GROUP BY t1.facid HAVING COUNT ( * ) > = 2",
        "schema": "CREATE TABLE Faculty_Participates_in (FacID NUMBER); CREATE TABLE Faculty (Room TEXT, Sex TEXT, Fname TEXT, Rank TEXT, FacID NUMBER, Lname TEXT); CREATE TABLE Student (Sex TEXT, LName TEXT, Age NUMBER, StuID NUMBER, Advisor NUMBER);"
      },
      {
        "question": "now what are their major | Do you mean the major of the students whose faculty have at least 2 students? | yes",
        "query": "SELECT t2.major FROM faculty AS t1 JOIN student AS t2 ON t1.facid = t2.advisor GROUP BY t1.facid HAVING COUNT ( * ) > = 2",
        "schema": "CREATE TABLE Student (Major NUMBER, Age NUMBER, StuID NUMBER, LName TEXT, Sex TEXT, Advisor NUMBER); CREATE TABLE Faculty_Participates_in (FacID NUMBER); CREATE TABLE Faculty (Fname TEXT, Rank TEXT, Room TEXT, Sex TEXT, FacID NUMBER, Lname TEXT);"
      }
    ],
    [
      {
        "question": "what is the average number of faculty members? | Do you mean the average number of FacID? | yes",
        "query": "SELECT AVG ( facid ) FROM faculty",
        "schema": "CREATE TABLE Faculty (Sex TEXT, Rank TEXT, Lname TEXT, FacID NUMBER, Fname TEXT); CREATE TABLE Faculty_Participates_in (FacID NUMBER);"
      },
      {
        "question": "Which rank has the highest number of faculty members?",
        "query": "SELECT rank FROM faculty GROUP BY rank ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Faculty (Fname TEXT, Lname TEXT, Sex TEXT, Rank TEXT, FacID NUMBER); CREATE TABLE Faculty_Participates_in (FacID NUMBER);"
      },
      {
        "question": "How many ranks have professors",
        "query": "SELECT COUNT ( * ) FROM faculty WHERE rank = \"Professor\"",
        "schema": "CREATE TABLE Faculty_Participates_in (FacID NUMBER); CREATE TABLE Faculty (Lname TEXT, Sex TEXT, Rank TEXT, Fname TEXT, FacID NUMBER);"
      }
    ],
    [
      {
        "question": "Hello there!  Thank you for taking the time to work with me!  Can you provide me with a list of all of the different activity names?",
        "query": "SELECT activity_name FROM activity",
        "schema": "CREATE TABLE Student (LName TEXT, StuID NUMBER); CREATE TABLE Faculty (FacID NUMBER); CREATE TABLE Faculty_Participates_in (actid NUMBER, FacID NUMBER); CREATE TABLE Participates_in (stuid NUMBER, actid NUMBER); CREATE TABLE Activity (activity_name TEXT, actid NUMBER);"
      },
      {
        "question": "Can you filter that list to show the activity with the most student participants?",
        "query": "SELECT t1.activity_name FROM activity AS t1 JOIN participates_in AS t2 ON t1.actid = t2.actid GROUP BY t1.actid ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Participates_in (actid NUMBER, stuid NUMBER); CREATE TABLE Faculty_Participates_in (FacID NUMBER, actid NUMBER); CREATE TABLE Student (StuID NUMBER, LName TEXT); CREATE TABLE Faculty (FacID NUMBER); CREATE TABLE Activity (activity_name TEXT, actid NUMBER);"
      },
      {
        "question": "Great!  Can you tell me how many students in total participated in football?",
        "query": "SELECT COUNT ( DISTINCT t2.stuid ) FROM activity AS t1 JOIN participates_in AS t2 ON t1.actid = t2.actid WHERE t1.activity_name = 'Soccer'",
        "schema": "CREATE TABLE Student (StuID NUMBER, LName TEXT); CREATE TABLE Participates_in (actid NUMBER, stuid NUMBER); CREATE TABLE Faculty (FacID NUMBER); CREATE TABLE Faculty_Participates_in (FacID NUMBER, actid NUMBER); CREATE TABLE Activity (actid NUMBER, activity_name TEXT);"
      }
    ],
    [
      {
        "question": "I want to know the names of advisors available",
        "query": "SELECT fname , lname FROM faculty",
        "schema": "CREATE TABLE Activity (activity_name TEXT); CREATE TABLE Faculty (Fname TEXT, Lname TEXT, Rank TEXT, FacID NUMBER); CREATE TABLE Student (StuID NUMBER, Fname TEXT, LName TEXT, Advisor NUMBER);"
      },
      {
        "question": "Could you tell me the names of advisors for female students?",
        "query": "SELECT t2.fname, t2.lname FROM student AS t1 JOIN faculty AS t2 ON t2.facid = t1.advisor WHERE t1.sex = \"F\"",
        "schema": "CREATE TABLE Student (StuID NUMBER, Sex TEXT, LName TEXT, Advisor NUMBER, Fname TEXT); CREATE TABLE Faculty (Sex TEXT, Lname TEXT, Rank TEXT, FacID NUMBER, Fname TEXT); CREATE TABLE Activity (activity_name TEXT);"
      },
      {
        "question": "What about the name of the advisor for the student named Linda Smith?",
        "query": "SELECT t2.fname, t2.lname FROM student AS t1 JOIN faculty AS t2 ON t2.facid = t1.advisor WHERE t1.fname = \"Linda\" AND t1.lname = \"Smith\"",
        "schema": "CREATE TABLE Activity (activity_name TEXT); CREATE TABLE Faculty (Fname TEXT, Sex TEXT, Lname TEXT, FacID NUMBER, Rank TEXT); CREATE TABLE Student (Fname TEXT, Sex TEXT, StuID NUMBER, Advisor NUMBER, LName TEXT);"
      }
    ],
    [
      {
        "question": "what are the names and activities of all faculty members who participated in some activity?",
        "query": "SELECT t1.fname , t1.lname , COUNT ( * ) , t1.facid FROM faculty AS t1 JOIN faculty_participates_in AS t2 ON t1.facid = t2.facid GROUP BY t1.facid",
        "schema": "CREATE TABLE Participates_in (actid NUMBER, stuid NUMBER); CREATE TABLE Faculty (Fname TEXT, FacID NUMBER, Lname TEXT, Rank TEXT); CREATE TABLE Activity (actid NUMBER, activity_name TEXT); CREATE TABLE Faculty_Participates_in (FacID NUMBER, actid NUMBER);"
      },
      {
        "question": "what is the count for Naiman?",
        "query": "SELECT COUNT ( * ) FROM faculty AS t1 JOIN faculty_participates_in AS t2 ON t1.facid = t2.facid GROUP BY t1.fname = \"Naiman\"",
        "schema": "CREATE TABLE Activity (activity_name TEXT, actid NUMBER); CREATE TABLE Faculty_Participates_in (FacID NUMBER, actid NUMBER); CREATE TABLE Participates_in (actid NUMBER, stuid NUMBER); CREATE TABLE Faculty (Lname TEXT, Rank TEXT, FacID NUMBER, Fname TEXT);"
      }
    ],
    [
      {
        "question": "What is the phone of Jerry Prince?",
        "query": "SELECT phone FROM faculty WHERE fname = \"Jerry\" AND lname = \"Prince\"",
        "schema": "CREATE TABLE Faculty (Fname TEXT, FacID NUMBER, Lname TEXT, Phone NUMBER); CREATE TABLE Student (LName TEXT, Fname TEXT, StuID NUMBER);"
      },
      {
        "question": "What is his room number?",
        "query": "SELECT room FROM faculty WHERE fname = \"Jerry\" AND lname = \"Prince\"",
        "schema": "CREATE TABLE Faculty (FacID NUMBER, Phone NUMBER, Building TEXT, Room TEXT, Fname TEXT, Lname TEXT); CREATE TABLE Student (LName TEXT, Fname TEXT, StuID NUMBER);"
      },
      {
        "question": "And what is building name?",
        "query": "SELECT building FROM faculty WHERE fname = \"Jerry\" AND lname = \"Prince\"",
        "schema": "CREATE TABLE Student (Fname TEXT, LName TEXT, StuID NUMBER); CREATE TABLE Faculty (Room TEXT, Phone NUMBER, FacID NUMBER, Lname TEXT, Building TEXT, Fname TEXT);"
      }
    ],
    [
      {
        "question": "Show the faculty id of each faculty member, along with the number of students he or she advises.",
        "query": "SELECT t1.facid , COUNT ( * ) FROM faculty AS t1 JOIN student AS t2 ON t1.facid = t2.advisor GROUP BY t1.facid",
        "schema": "CREATE TABLE Faculty (FacID NUMBER, Fname TEXT, Rank TEXT, Lname TEXT); CREATE TABLE Faculty_Participates_in (FacID NUMBER); CREATE TABLE Student (StuID NUMBER, LName TEXT, Advisor NUMBER);"
      },
      {
        "question": "How may faculties in this survey?",
        "query": "SELECT COUNT ( * ) FROM faculty",
        "schema": "CREATE TABLE Faculty_Participates_in (FacID NUMBER); CREATE TABLE Faculty (Rank TEXT, Lname TEXT, Fname TEXT, FacID NUMBER); CREATE TABLE Student (StuID NUMBER, LName TEXT, Advisor NUMBER);"
      },
      {
        "question": "How many males in this table? | Do you mean the table \"Faculty\"? | Yes.",
        "query": "SELECT COUNT ( * ) FROM faculty WHERE sex = 'M'",
        "schema": "CREATE TABLE Faculty_Participates_in (FacID NUMBER); CREATE TABLE Student (Advisor NUMBER, LName TEXT, StuID NUMBER, Sex TEXT); CREATE TABLE Faculty (Sex TEXT, Lname TEXT, Fname TEXT, Rank TEXT, FacID NUMBER);"
      }
    ],
    [
      {
        "question": "Can you please list all the ranks and the number of male faculty members for those ranks?",
        "query": "SELECT rank , sex , COUNT ( * ) FROM faculty WHERE sex = \"M\" GROUP BY rank , sex",
        "schema": "CREATE TABLE Faculty (Sex TEXT, FacID NUMBER, Rank TEXT); CREATE TABLE Student (Sex TEXT);"
      },
      {
        "question": "Can you add the number of female faculty members for each of the ranks to the table please?",
        "query": "SELECT rank , sex , COUNT ( * ) FROM faculty GROUP BY rank , sex",
        "schema": "CREATE TABLE Faculty (Lname TEXT, FacID NUMBER, Sex TEXT, Rank TEXT); CREATE TABLE Student (Sex TEXT);"
      }
    ],
    [
      {
        "question": "Hi can you tell me what activities are listed? | The following table shows activity names | Can you tell me how many faculty are involved in each activity?",
        "query": "SELECT t1.activity_name , COUNT ( * ) FROM activity AS t1 JOIN faculty_participates_in AS t2 ON t1.actid = t2.actid GROUP BY t1.actid",
        "schema": "CREATE TABLE Faculty (FacID NUMBER, Fname TEXT); CREATE TABLE Participates_in (stuid NUMBER, actid NUMBER); CREATE TABLE Faculty_Participates_in (FacID NUMBER, actid NUMBER); CREATE TABLE Activity (actid NUMBER, activity_name TEXT);"
      },
      {
        "question": "What is the most popular activity?",
        "query": "SELECT t1.activity_name FROM activity AS t1 JOIN faculty_participates_in AS t2 ON t1.actid = t2.actid GROUP BY t1.actid ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Faculty (FacID NUMBER, Fname TEXT); CREATE TABLE Faculty_Participates_in (actid NUMBER, FacID NUMBER); CREATE TABLE Participates_in (actid NUMBER, stuid NUMBER); CREATE TABLE Activity (actid NUMBER, activity_name TEXT);"
      }
    ],
    [
      {
        "question": "how many faculties?",
        "query": "SELECT COUNT ( * ) FROM faculty",
        "schema": "CREATE TABLE Faculty_Participates_in (FacID NUMBER); CREATE TABLE Faculty (Lname TEXT, Room TEXT, Sex TEXT, FacID NUMBER, Fname TEXT, Rank TEXT);"
      },
      {
        "question": "How many female faculties?",
        "query": "SELECT COUNT ( * ) FROM faculty WHERE sex = 'F'",
        "schema": "CREATE TABLE Student (Sex TEXT); CREATE TABLE Faculty (Sex TEXT, FacID NUMBER, Fname TEXT, Lname TEXT, Rank TEXT, Room TEXT); CREATE TABLE Faculty_Participates_in (FacID NUMBER);"
      },
      {
        "question": "How many professors?",
        "query": "SELECT COUNT ( * ) FROM faculty WHERE rank = 'Professor'",
        "schema": "CREATE TABLE Faculty_Participates_in (FacID NUMBER); CREATE TABLE Student (Sex TEXT); CREATE TABLE Faculty (Room TEXT, FacID NUMBER, Sex TEXT, Fname TEXT, Lname TEXT, Rank TEXT);"
      }
    ]
  ],
  "music_4": [
    [
      {
        "question": "Can you list the artist ids and their volume issues?",
        "query": "SELECT t1.artist_id, t2.volume_issue FROM artist AS t1 JOIN volume AS t2 ON t1.artist_id = t2.artist_id",
        "schema": "CREATE TABLE artist (Artist TEXT, Artist_ID NUMBER); CREATE TABLE volume (Artist_ID NUMBER, Volume_ID NUMBER, Volume_Issue TEXT); CREATE TABLE music_festival (Volume NUMBER);"
      },
      {
        "question": "Which volumes have more than 2 weeks on top?",
        "query": "SELECT * FROM artist AS t1 JOIN volume AS t2 ON t1.artist_id = t2.artist_id WHERE t2.weeks_on_top > 2",
        "schema": "CREATE TABLE artist (Artist TEXT, Artist_ID NUMBER); CREATE TABLE music_festival (Volume NUMBER); CREATE TABLE volume (Weeks_on_Top NUMBER, Volume_Issue TEXT, Volume_ID NUMBER, Artist_ID NUMBER);"
      },
      {
        "question": "Hmm, I want to know the famous titles of the artists associated with volumes with more than 2 weeks on top.",
        "query": "SELECT t1.famous_title FROM artist AS t1 JOIN volume AS t2 ON t1.artist_id = t2.artist_id WHERE t2.weeks_on_top > 2",
        "schema": "CREATE TABLE volume (Volume_ID NUMBER, Volume_Issue TEXT, Weeks_on_Top NUMBER, Artist_ID NUMBER); CREATE TABLE music_festival (Volume NUMBER); CREATE TABLE artist (Artist_ID NUMBER, Artist TEXT, Famous_Title TEXT);"
      }
    ],
    [
      {
        "question": "What are the issue date of 34th England Academy Prize?",
        "query": "SELECT t2.issue_date FROM music_festival AS t1 JOIN volume AS t2 ON t1.volume = t2.volume_id WHERE t1.music_festival = \"34th England Academy Prize\"",
        "schema": "CREATE TABLE music_festival (Volume NUMBER, ID NUMBER, Music_Festival TEXT, Category TEXT, Date_of_ceremony TEXT); CREATE TABLE volume (Volume_Issue TEXT, Song TEXT, Issue_Date TEXT, Volume_ID NUMBER);"
      },
      {
        "question": "What are the music festivals of Everybody Have Fun Tonight song?",
        "query": "SELECT t1.music_festival FROM music_festival AS t1 JOIN volume AS t2 ON t1.volume = t2.volume_id WHERE t2.song = \" Everybody Have Fun Tonight \"",
        "schema": "CREATE TABLE volume (Volume_Issue TEXT, Song TEXT, Volume_ID NUMBER, Issue_Date TEXT); CREATE TABLE music_festival (Volume NUMBER, Category TEXT, Date_of_ceremony TEXT, ID NUMBER, Music_Festival TEXT);"
      },
      {
        "question": "Show the songs that have result \"nominated\" at music festivals.",
        "query": "SELECT t2.song FROM music_festival AS t1 JOIN volume AS t2 ON t1.volume = t2.volume_id WHERE t1.result = \"Nominated\"",
        "schema": "CREATE TABLE volume (Issue_Date TEXT, Song TEXT, Volume_Issue TEXT, Volume_ID NUMBER); CREATE TABLE music_festival (Category TEXT, Result TEXT, Volume NUMBER, ID NUMBER, Date_of_ceremony TEXT, Music_Festival TEXT);"
      }
    ],
    [
      {
        "question": "Please show the results of music festivals and the number of music festivals that have had each, ordered by this count.",
        "query": "SELECT RESULT , COUNT ( * ) FROM music_festival GROUP BY RESULT ORDER BY COUNT ( * ) DESC",
        "schema": "CREATE TABLE music_festival (Music_Festival TEXT, ID NUMBER, Result TEXT);"
      }
    ],
    [
      {
        "question": "what is average of volume?",
        "query": "SELECT AVG ( volume ) FROM music_festival",
        "schema": "CREATE TABLE volume (Volume_ID NUMBER, Song TEXT, Artist_ID NUMBER, Weeks_on_Top NUMBER); CREATE TABLE artist (Artist_ID NUMBER); CREATE TABLE music_festival (Volume NUMBER);"
      },
      {
        "question": "can you show a list of categories?",
        "query": "SELECT DISTINCT category FROM music_festival",
        "schema": "CREATE TABLE music_festival (Volume NUMBER, ID NUMBER, Category TEXT, Music_Festival TEXT); CREATE TABLE artist (Artist_ID NUMBER); CREATE TABLE volume (Song TEXT, Weeks_on_Top NUMBER, Volume_ID NUMBER, Artist_ID NUMBER);"
      },
      {
        "question": "where are the date of ceremony of music festivals with category 'best song' and 'awarded'?",
        "query": "SELECT date_of_ceremony FROM music_festival WHERE category = \"Best Song\" AND RESULT = \"Awarded\"",
        "schema": "CREATE TABLE artist (Artist_ID NUMBER); CREATE TABLE music_festival (ID NUMBER, Volume NUMBER, Category TEXT, Date_of_ceremony TEXT, Result TEXT, Music_Festival TEXT); CREATE TABLE volume (Artist_ID NUMBER, Weeks_on_Top NUMBER, Issue_Date TEXT, Volume_ID NUMBER, Song TEXT);"
      }
    ],
    [
      {
        "question": "The song The way was issued on what date?",
        "query": "SELECT issue_date FROM volume WHERE song LIKE \"%The Way%\"",
        "schema": "CREATE TABLE volume (Volume_ID NUMBER, Issue_Date TEXT, Volume_Issue TEXT, Song TEXT); CREATE TABLE artist (Artist_ID NUMBER, Famous_Release_date TEXT);"
      },
      {
        "question": "the song The way was issued what volume?",
        "query": "SELECT volume_issue FROM volume WHERE song LIKE \"%The Way%\"",
        "schema": "CREATE TABLE artist (Artist_ID NUMBER, Famous_Release_date TEXT); CREATE TABLE volume (Song TEXT, Volume_Issue TEXT, Volume_ID NUMBER, Issue_Date TEXT); CREATE TABLE music_festival (Volume NUMBER);"
      },
      {
        "question": "what's the artist id for Everybody Have Fun Tonight",
        "query": "SELECT artist_id FROM volume WHERE song LIKE \"%Everybody Have Fun Tonight%\"",
        "schema": "CREATE TABLE volume (Volume_Issue TEXT, Song TEXT, Issue_Date TEXT, Artist_ID NUMBER, Volume_ID NUMBER); CREATE TABLE music_festival (Volume NUMBER); CREATE TABLE artist (Artist TEXT, Artist_ID NUMBER, Famous_Release_date TEXT);"
      },
      {
        "question": "Give me the issue date of the volume with the minimum weeks on top",
        "query": "SELECT issue_date FROM volume ORDER BY weeks_on_top ASC LIMIT 1",
        "schema": "CREATE TABLE volume (Volume_Issue TEXT, Issue_Date TEXT, Volume_ID NUMBER, Weeks_on_Top NUMBER, Artist_ID NUMBER, Song TEXT); CREATE TABLE artist (Artist_ID NUMBER, Artist TEXT, Famous_Release_date TEXT); CREATE TABLE music_festival (Volume NUMBER);"
      }
    ],
    [
      {
        "question": "Hi.Can you show the categories of the music festivals?",
        "query": "SELECT category FROM music_festival",
        "schema": "CREATE TABLE music_festival (Music_Festival TEXT, Category TEXT, ID NUMBER);"
      },
      {
        "question": "Ok thank you.Can you please show me the music festivals with counts more than 1? | Did you mean to ask for the categories of the music festivals with counts more than 1? | Yes.",
        "query": "SELECT category FROM music_festival GROUP BY category HAVING COUNT ( * ) > 1",
        "schema": "CREATE TABLE music_festival (ID NUMBER, Category TEXT, Music_Festival TEXT);"
      }
    ],
    [
      {
        "question": "Hi, can you tell me in what year did the artist Gorgoroth release his first song? | 16 May - 30 May is the issue date of the song the artist Gorgoroth first released. | what is the name of the song?",
        "query": "SELECT t2.song FROM artist AS t1 JOIN volume AS t2 ON t1.artist_id = t2.artist_id WHERE t1.artist = \"Gorgoroth\" ORDER BY t2.issue_date LIMIT 1",
        "schema": "CREATE TABLE artist (Artist_ID NUMBER, Artist TEXT); CREATE TABLE volume (Issue_Date TEXT, Volume_Issue TEXT, Artist_ID NUMBER, Song TEXT);"
      },
      {
        "question": "Great, what is the issue dates of all volumes of the artist \"Gorgoroth\"",
        "query": "SELECT t2.issue_date FROM artist AS t1 JOIN volume AS t2 ON t1.artist_id = t2.artist_id WHERE t1.artist = \"Gorgoroth\"",
        "schema": "CREATE TABLE artist (Artist TEXT, Artist_ID NUMBER); CREATE TABLE volume (Song TEXT, Artist_ID NUMBER, Volume_Issue TEXT, Issue_Date TEXT, Volume_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What are the issue dates of volumes associated with the artist aged 23 or younger?",
        "query": "SELECT issue_date FROM artist AS t1 JOIN volume AS t2 ON t1.artist_id = t2.artist_id WHERE t1.age < = 23",
        "schema": "CREATE TABLE music_festival (Volume NUMBER); CREATE TABLE volume (Artist_ID NUMBER, Issue_Date TEXT, Volume_Issue TEXT); CREATE TABLE artist (Age NUMBER, Artist_ID NUMBER, Artist TEXT);"
      },
      {
        "question": "What are the issue dates of volumes associated with the artist aged 24 or older?",
        "query": "SELECT issue_date FROM artist AS t1 JOIN volume AS t2 ON t1.artist_id = t2.artist_id WHERE t1.age > = 24",
        "schema": "CREATE TABLE volume (Issue_Date TEXT, Volume_Issue TEXT, Volume_ID NUMBER, Artist_ID NUMBER); CREATE TABLE artist (Artist TEXT, Artist_ID NUMBER, Age NUMBER); CREATE TABLE music_festival (Volume NUMBER);"
      },
      {
        "question": "How many weeks on top for volumes associated with the artist aged 24 or older?",
        "query": "SELECT COUNT ( weeks_on_top ) FROM artist AS t1 JOIN volume AS t2 ON t1.artist_id = t2.artist_id WHERE t1.age > = 24",
        "schema": "CREATE TABLE volume (Volume_ID NUMBER, Volume_Issue TEXT, Issue_Date TEXT, Artist_ID NUMBER, Weeks_on_Top NUMBER); CREATE TABLE music_festival (Volume NUMBER); CREATE TABLE artist (Artist_ID NUMBER, Age NUMBER, Artist TEXT);"
      }
    ],
    [
      {
        "question": "Hello, can you please tell me the most weeks spent on top?",
        "query": "SELECT MAX ( weeks_on_top ) FROM volume",
        "schema": "CREATE TABLE volume (Weeks_on_Top NUMBER, Song TEXT, Volume_ID NUMBER, Artist_ID NUMBER); CREATE TABLE artist (Artist_ID NUMBER); CREATE TABLE music_festival (ID NUMBER, Volume NUMBER);"
      },
      {
        "question": "And how many volumes spent 3.0 weeks on top?",
        "query": "SELECT COUNT ( * ) FROM volume WHERE weeks_on_top = 3.0",
        "schema": "CREATE TABLE volume (Volume_Issue TEXT, Volume_ID NUMBER, Artist_ID NUMBER, Weeks_on_Top NUMBER, Song TEXT); CREATE TABLE artist (Artist_ID NUMBER); CREATE TABLE music_festival (Volume NUMBER, ID NUMBER);"
      },
      {
        "question": "What are the names of the two volumes that spend 3.0 weeks on top? | What do you mean by names? | I am sorry - what are the songs of the two volumes that spent 3.0 weeks on top?",
        "query": "SELECT song FROM volume WHERE weeks_on_top = 3.0",
        "schema": "CREATE TABLE artist (Artist_ID NUMBER); CREATE TABLE volume (Volume_ID NUMBER, Artist_ID NUMBER, Weeks_on_Top NUMBER, Song TEXT, Volume_Issue TEXT); CREATE TABLE music_festival (ID NUMBER, Volume NUMBER);"
      },
      {
        "question": "What was the minimum time spent on top?",
        "query": "SELECT MIN ( weeks_on_top ) FROM volume",
        "schema": "CREATE TABLE volume (Volume_Issue TEXT, Volume_ID NUMBER, Weeks_on_Top NUMBER, Song TEXT, Artist_ID NUMBER); CREATE TABLE artist (Artist_ID NUMBER); CREATE TABLE music_festival (ID NUMBER, Volume NUMBER);"
      },
      {
        "question": "And how many volumes spent 1.0 weeks on top?",
        "query": "SELECT COUNT ( * ) FROM volume WHERE weeks_on_top = 1.0",
        "schema": "CREATE TABLE music_festival (Volume NUMBER, ID NUMBER); CREATE TABLE volume (Weeks_on_Top NUMBER, Volume_ID NUMBER, Artist_ID NUMBER, Song TEXT, Volume_Issue TEXT); CREATE TABLE artist (Artist_ID NUMBER);"
      },
      {
        "question": "Did any artist ID appear more than once in the weeks spent on top? | Do you mean the artists id which has more than one volume? | Yes please.",
        "query": "SELECT artist_id FROM volume GROUP BY artist_id HAVING COUNT ( * ) > = 2",
        "schema": "CREATE TABLE volume (Volume_ID NUMBER, Weeks_on_Top NUMBER, Artist_ID NUMBER, Song TEXT, Volume_Issue TEXT); CREATE TABLE music_festival (Volume NUMBER, ID NUMBER); CREATE TABLE artist (Artist_ID NUMBER, Artist TEXT);"
      }
    ],
    [
      {
        "question": "What is the maximum weeks on top in the table?",
        "query": "SELECT weeks_on_top FROM volume ORDER BY weeks_on_top DESC LIMIT 1",
        "schema": "CREATE TABLE artist (Artist_ID NUMBER); CREATE TABLE volume (Volume_ID NUMBER, Artist_ID NUMBER, Weeks_on_Top NUMBER, Song TEXT);"
      },
      {
        "question": "Which volume id has the maximum weeks on top?",
        "query": "SELECT DISTINCT ( volume_id ) FROM volume WHERE weeks_on_top = ( SELECT weeks_on_top FROM volume ORDER BY weeks_on_top DESC LIMIT 1 )",
        "schema": "CREATE TABLE volume (Volume_ID NUMBER, Artist_ID NUMBER, Weeks_on_Top NUMBER, Song TEXT); CREATE TABLE music_festival (Volume NUMBER); CREATE TABLE artist (Artist_ID NUMBER);"
      },
      {
        "question": "Hmm, I want to know what is the song in the volume with the maximum weeks on top please.",
        "query": "SELECT DISTINCT ( song ) FROM volume WHERE weeks_on_top = ( SELECT weeks_on_top FROM volume ORDER BY weeks_on_top DESC LIMIT 1 )",
        "schema": "CREATE TABLE artist (Artist_ID NUMBER); CREATE TABLE music_festival (Volume NUMBER); CREATE TABLE volume (Weeks_on_Top NUMBER, Song TEXT, Volume_ID NUMBER, Artist_ID NUMBER);"
      }
    ]
  ],
  "journal_committee": [
    [
      {
        "question": "Show the names of editors on the list with at least two journal committees.",
        "query": "SELECT t1.name FROM editor AS t1 JOIN journal_committee AS t2 ON t1.editor_id = t2.editor_id GROUP BY t1.name HAVING COUNT ( * ) > = 2",
        "schema": "CREATE TABLE editor (Name TEXT, Editor_ID NUMBER); CREATE TABLE journal (Journal_ID NUMBER); CREATE TABLE journal_committee (Editor_ID NUMBER, Journal_ID NUMBER);"
      },
      {
        "question": "What are the ages of the editors that are at least two journal committees.",
        "query": "SELECT t1.age FROM editor AS t1 JOIN journal_committee AS t2 ON t1.editor_id = t2.editor_id GROUP BY t1.name HAVING COUNT ( * ) > = 2",
        "schema": "CREATE TABLE journal_committee (Editor_ID NUMBER, Journal_ID NUMBER); CREATE TABLE journal (Journal_ID NUMBER); CREATE TABLE editor (Age NUMBER, Name TEXT, Editor_ID NUMBER);"
      },
      {
        "question": "What type of work does  Kamila Porczyk do?",
        "query": "SELECT t2.work_type FROM editor AS t1 JOIN journal_committee AS t2 ON t1.editor_id = t2.editor_id WHERE t1.name = \"Kamila Porczyk\"",
        "schema": "CREATE TABLE editor (Age NUMBER, Name TEXT, Editor_ID NUMBER); CREATE TABLE journal (Journal_ID NUMBER); CREATE TABLE journal_committee (Work_Type TEXT, Editor_ID NUMBER, Journal_ID NUMBER);"
      },
      {
        "question": "Who is the youngest journal committee member?",
        "query": "SELECT t1.name FROM editor AS t1 JOIN journal_committee AS t2 ON t1.editor_id = t2.editor_id ORDER BY t1.age ASC LIMIT 1",
        "schema": "CREATE TABLE journal (Date TEXT, Journal_ID NUMBER); CREATE TABLE journal_committee (Work_Type TEXT, Editor_ID NUMBER, Journal_ID NUMBER); CREATE TABLE editor (Name TEXT, Age NUMBER, Editor_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show the names of editors of age either 24 or 25.",
        "query": "SELECT name FROM editor WHERE age = 24 OR age = 25",
        "schema": "CREATE TABLE editor (Editor_ID NUMBER, Age NUMBER, Name TEXT);"
      },
      {
        "question": "List out the editors name? | sorry, did you mean you need the Editor ID | How many editor id's in the table?",
        "query": "SELECT COUNT ( editor_id ) FROM editor",
        "schema": "CREATE TABLE editor (Editor_ID NUMBER, Name TEXT, Age NUMBER);"
      }
    ],
    [
      {
        "question": "What is the journal id of Anna Powierza?",
        "query": "SELECT t3.journal_id FROM journal_committee AS t1 JOIN editor AS t2 ON t1.editor_id = t2.editor_id JOIN journal AS t3 ON t1.journal_id = t3.journal_id WHERE t2.name = \"Anna Powierza\"",
        "schema": "CREATE TABLE journal_committee (Journal_ID NUMBER, Editor_ID NUMBER); CREATE TABLE editor (Editor_ID NUMBER, Name TEXT); CREATE TABLE journal (Journal_ID NUMBER);"
      },
      {
        "question": "What are the work type of Kamila Porczyk?",
        "query": "SELECT t1.work_type FROM journal_committee AS t1 JOIN editor AS t2 ON t1.editor_id = t2.editor_id JOIN journal AS t3 ON t1.journal_id = t3.journal_id WHERE t2.name = \"Kamila Porczyk\"",
        "schema": "CREATE TABLE journal (Journal_ID NUMBER); CREATE TABLE editor (Editor_ID NUMBER, Name TEXT); CREATE TABLE journal_committee (Work_Type TEXT, Editor_ID NUMBER, Journal_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show average sales of the journals that have an editor whose work type is photo",
        "query": "SELECT AVG ( t1.sales ) FROM journal AS t1 JOIN journal_committee AS t2 ON t1.journal_id = t2.journal_id WHERE t2.work_type = 'Photo'",
        "schema": "CREATE TABLE journal (Journal_ID NUMBER, Sales NUMBER); CREATE TABLE journal_committee (Editor_ID NUMBER, Work_Type TEXT, Journal_ID NUMBER);"
      },
      {
        "question": "The one I asked before",
        "query": "SELECT t1.journal_id FROM journal AS t1 JOIN journal_committee AS t2 ON t1.journal_id = t2.journal_id WHERE t2.work_type = 'Photo'",
        "schema": "CREATE TABLE journal_committee (Editor_ID NUMBER, Journal_ID NUMBER, Work_Type TEXT); CREATE TABLE editor (Editor_ID NUMBER); CREATE TABLE journal (Journal_ID NUMBER, Sales NUMBER);"
      }
    ],
    [
      {
        "question": "Show the names of editors of age 24.",
        "query": "SELECT name FROM editor WHERE age = 24",
        "schema": "CREATE TABLE editor (Editor_ID NUMBER, Age NUMBER, Name TEXT);"
      },
      {
        "question": "Please show me the names of editors of age 25.",
        "query": "SELECT name FROM editor WHERE age = 25",
        "schema": "CREATE TABLE editor (Name TEXT, Age NUMBER, Editor_ID NUMBER);"
      },
      {
        "question": "hmmm. Can you also show me the name and age of the oldest editor?",
        "query": "SELECT name, age FROM editor WHERE age = ( SELECT MAX ( age ) FROM editor )",
        "schema": "CREATE TABLE editor (Age NUMBER, Editor_ID NUMBER, Name TEXT);"
      },
      {
        "question": "ok. can you also please give me the name and age of the youngest editor?",
        "query": "SELECT name, age FROM editor WHERE age = ( SELECT MIN ( age ) FROM editor )",
        "schema": "CREATE TABLE editor (Age NUMBER, Editor_ID NUMBER, Name TEXT);"
      },
      {
        "question": "How many editors are older then 25 and younger than 45?",
        "query": "SELECT COUNT ( * ) FROM editor WHERE age>25 AND age<45",
        "schema": "CREATE TABLE editor (Age NUMBER, Name TEXT, Editor_ID NUMBER);"
      },
      {
        "question": "May I have their names please?",
        "query": "SELECT name FROM editor WHERE age>25 AND age<45",
        "schema": "CREATE TABLE editor (Age NUMBER, Editor_ID NUMBER, Name TEXT);"
      }
    ],
    [
      {
        "question": "show the names of editors that are on at least two journal committees?",
        "query": "SELECT t1.name FROM editor AS t1 JOIN journal_committee AS t2 ON t1.editor_id = t2.editor_id GROUP BY t1.name HAVING COUNT ( * ) > = 2",
        "schema": "CREATE TABLE journal_committee (Editor_ID NUMBER, Journal_ID NUMBER); CREATE TABLE editor (Editor_ID NUMBER, Name TEXT);"
      },
      {
        "question": "what is the work type of Kamila Porczyk?",
        "query": "SELECT t2.work_type FROM editor AS t1 JOIN journal_committee AS t2 ON t1.editor_id = t2.editor_id WHERE t1.name = \"Kamila Porczyk\"",
        "schema": "CREATE TABLE editor (Editor_ID NUMBER, Name TEXT); CREATE TABLE journal_committee (Journal_ID NUMBER, Editor_ID NUMBER, Work_Type TEXT);"
      },
      {
        "question": "how much years old is Anna Powierza ?",
        "query": "SELECT t1.age FROM editor AS t1 WHERE t1.name = \"Anna Powierza\"",
        "schema": "CREATE TABLE journal_committee (Editor_ID NUMBER, Journal_ID NUMBER, Work_Type TEXT); CREATE TABLE editor (Name TEXT, Editor_ID NUMBER, Age NUMBER);"
      },
      {
        "question": "what is the work type of Anna Powierza?",
        "query": "SELECT t2.work_type FROM editor AS t1 JOIN journal_committee AS t2 ON t1.editor_id = t2.editor_id WHERE t1.name = \"Anna Powierza\"",
        "schema": "CREATE TABLE journal_committee (Work_Type TEXT, Editor_ID NUMBER, Journal_ID NUMBER); CREATE TABLE editor (Editor_ID NUMBER, Age NUMBER, Name TEXT);"
      }
    ],
    [
      {
        "question": "Hello. What is the name of the youngest editor?",
        "query": "SELECT name FROM editor ORDER BY age ASC LIMIT 1",
        "schema": "CREATE TABLE editor (Editor_ID NUMBER, Age NUMBER, Name TEXT);"
      },
      {
        "question": "What is the age of the youngest editor?",
        "query": "SELECT age FROM editor ORDER BY age ASC LIMIT 1",
        "schema": "CREATE TABLE editor (Age NUMBER, Name TEXT, Editor_ID NUMBER);"
      },
      {
        "question": "What is the name of that editor?",
        "query": "SELECT name FROM editor ORDER BY age ASC LIMIT 1",
        "schema": "CREATE TABLE editor (Age NUMBER, Name TEXT, Editor_ID NUMBER);"
      },
      {
        "question": "Can you tell me the name of the oldest editor as well?",
        "query": "SELECT name FROM editor ORDER BY age DESC LIMIT 1",
        "schema": "CREATE TABLE editor (Name TEXT, Editor_ID NUMBER, Age NUMBER);"
      }
    ]
  ],
  "decoration_competition": [
    [
      {
        "question": "Which countries have members?",
        "query": "SELECT DISTINCT ( country ) FROM member",
        "schema": "CREATE TABLE member (Name TEXT, Member_ID NUMBER, Country TEXT);"
      },
      {
        "question": "Which country has the most members?",
        "query": "SELECT country FROM member GROUP BY country ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE member (Country TEXT, Name TEXT, Member_ID NUMBER);"
      },
      {
        "question": "Which country has more than 2 members?",
        "query": "SELECT country FROM member GROUP BY country HAVING COUNT ( * ) > 2",
        "schema": "CREATE TABLE member (Member_ID NUMBER, Country TEXT, Name TEXT);"
      }
    ],
    [
      {
        "question": "Where is the most common country across members?",
        "query": "SELECT country FROM member GROUP BY country ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE college (College_ID NUMBER, College_Location TEXT); CREATE TABLE member (Name TEXT, Member_ID NUMBER, Country TEXT);"
      },
      {
        "question": "Okay, which members are there? | Do you mean which members are in United States? | Yes. Which members are in the United States?",
        "query": "SELECT name FROM member WHERE country = \"United States\"",
        "schema": "CREATE TABLE round (Member_ID NUMBER); CREATE TABLE member (Name TEXT, Member_ID NUMBER, Country TEXT); CREATE TABLE college (College_Location TEXT, College_ID NUMBER);"
      },
      {
        "question": "Okay. What other countries are listed?",
        "query": "SELECT DISTINCT country FROM member EXCEPT SELECT country FROM member WHERE country = \"United States\"",
        "schema": "CREATE TABLE member (Name TEXT, Member_ID NUMBER, Country TEXT); CREATE TABLE round (Member_ID NUMBER); CREATE TABLE college (College_Location TEXT, College_ID NUMBER);"
      },
      {
        "question": "Who are the members in Canada?",
        "query": "SELECT name FROM member WHERE country = \"Canada\"",
        "schema": "CREATE TABLE round (Member_ID NUMBER); CREATE TABLE college (College_Location TEXT, College_ID NUMBER); CREATE TABLE member (Country TEXT, Name TEXT, Member_ID NUMBER);"
      }
    ],
    [
      {
        "question": "show the total distinct leader names of the college associated with the members of all country",
        "query": "SELECT DISTINCT t1.leader_name FROM college AS t1 JOIN member AS t2 ON t1.college_id = t2.college_id",
        "schema": "CREATE TABLE member (College_ID NUMBER, Name TEXT, Country TEXT); CREATE TABLE college (Name TEXT, College_ID NUMBER, Leader_Name TEXT);"
      },
      {
        "question": "find the college id for the college location Ottawa",
        "query": "SELECT college_id FROM college WHERE college_location = 'Ottawa'",
        "schema": "CREATE TABLE college (College_Location TEXT, Name TEXT, Leader_Name TEXT, College_ID NUMBER); CREATE TABLE member (Member_ID NUMBER, Country TEXT, Name TEXT, College_ID NUMBER);"
      },
      {
        "question": "find the member name and college location for the member id 1",
        "query": "SELECT t2.name, t1.college_location FROM college AS t1 JOIN member AS t2 ON t2.college_id = t1.college_id WHERE member_id = 1",
        "schema": "CREATE TABLE member (Country TEXT, College_ID NUMBER, Member_ID NUMBER, Name TEXT); CREATE TABLE college (Name TEXT, Leader_Name TEXT, College_ID NUMBER, College_Location TEXT);"
      }
    ],
    [
      {
        "question": "how many members are from united states or canada",
        "query": "SELECT COUNT ( name ) FROM member WHERE country = \"United States\" OR country = \"Canada\"",
        "schema": "CREATE TABLE member (Member_ID NUMBER, Name TEXT, Country TEXT);"
      },
      {
        "question": "can you list the name of these 10 members",
        "query": "SELECT name FROM member WHERE country = \"United States\" OR country = \"Canada\"",
        "schema": "CREATE TABLE member (Country TEXT, Name TEXT, Member_ID NUMBER);"
      },
      {
        "question": "arrange the names in ascending order",
        "query": "SELECT name FROM member WHERE country = \"United States\" OR country = \"Canada\" ORDER BY name",
        "schema": "CREATE TABLE member (Member_ID NUMBER, Country TEXT, Name TEXT);"
      }
    ],
    [
      {
        "question": "list the name of the members in the order of their rank in rounds",
        "query": "SELECT t1.name FROM member AS t1 JOIN round AS t2 ON t1.member_id = t2.member_id ORDER BY rank_in_round ASC",
        "schema": "CREATE TABLE round (Rank_in_Round NUMBER, Member_ID NUMBER); CREATE TABLE member (Name TEXT, Member_ID NUMBER);"
      },
      {
        "question": "include member id in this table",
        "query": "SELECT t1.name ,t1.member_id FROM member AS t1 JOIN round AS t2 ON t1.member_id = t2.member_id ORDER BY rank_in_round ASC",
        "schema": "CREATE TABLE member (Member_ID NUMBER, Name TEXT); CREATE TABLE round (Rank_in_Round NUMBER, Member_ID NUMBER);"
      },
      {
        "question": "also include the college id in this table",
        "query": "SELECT t1.name ,t1.member_id,t1.college_id FROM member AS t1 JOIN round AS t2 ON t1.member_id = t2.member_id ORDER BY rank_in_round ASC",
        "schema": "CREATE TABLE member (Member_ID NUMBER, Name TEXT, College_ID NUMBER); CREATE TABLE college (Name TEXT, College_ID NUMBER); CREATE TABLE round (Rank_in_Round NUMBER, Member_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What is the most common college id?",
        "query": "SELECT college_id FROM member GROUP BY college_id ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE member (Name TEXT, Member_ID NUMBER, College_ID NUMBER); CREATE TABLE college (College_ID NUMBER, Name TEXT);"
      },
      {
        "question": "Who went there?",
        "query": "SELECT name FROM member WHERE college_id = 4",
        "schema": "CREATE TABLE member (Country TEXT, Member_ID NUMBER, Name TEXT, College_ID NUMBER); CREATE TABLE college (Name TEXT, College_ID NUMBER, College_Location TEXT);"
      },
      {
        "question": "What about the most common country?",
        "query": "SELECT country FROM member GROUP BY country ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE member (Member_ID NUMBER, Country TEXT, College_ID NUMBER, Name TEXT); CREATE TABLE college (College_Location TEXT, Name TEXT, College_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Please show the names of all members who go to Saskatchewan School",
        "query": "SELECT t2.name FROM college AS t1 JOIN member AS t2 ON t1.college_id = t2.college_id WHERE t1.name = 'Saskatchewan School'",
        "schema": "CREATE TABLE member (Country TEXT, Member_ID NUMBER, Name TEXT, College_ID NUMBER); CREATE TABLE round (Member_ID NUMBER); CREATE TABLE college (Name TEXT, College_ID NUMBER, College_Location TEXT);"
      },
      {
        "question": "Now please show the names of all members, and the locations of the colleges they go to",
        "query": "SELECT t2.name, t1.college_location FROM college AS t1 JOIN member AS t2 ON t1.college_id = t2.college_id",
        "schema": "CREATE TABLE college (Name TEXT, College_ID NUMBER, College_Location TEXT); CREATE TABLE member (Name TEXT, College_ID NUMBER, Member_ID NUMBER, Country TEXT); CREATE TABLE round (Member_ID NUMBER);"
      },
      {
        "question": "now can you show the those same results, but ordered in ascending order of member names",
        "query": "SELECT t2.name, t1.college_location FROM college AS t1 JOIN member AS t2 ON t1.college_id = t2.college_id ORDER BY t2.name ASC",
        "schema": "CREATE TABLE member (Name TEXT, Member_ID NUMBER, Country TEXT, College_ID NUMBER); CREATE TABLE round (Member_ID NUMBER); CREATE TABLE college (Name TEXT, College_ID NUMBER, College_Location TEXT);"
      }
    ]
  ],
  "inn_1": [
    [
      {
        "question": "which rooms have a king bed?",
        "query": "SELECT * FROM rooms WHERE bedtype = 'King'",
        "schema": "CREATE TABLE Rooms (bedType TEXT, RoomId TEXT, roomName TEXT, beds NUMBER, decor TEXT); CREATE TABLE Reservations (Room TEXT);"
      },
      {
        "question": "what are the decor of those rooms?",
        "query": "SELECT DISTINCT decor FROM rooms WHERE bedtype = 'King'",
        "schema": "CREATE TABLE Rooms (beds NUMBER, roomName TEXT, RoomId TEXT, decor TEXT, bedType TEXT); CREATE TABLE Reservations (Room TEXT);"
      },
      {
        "question": "show me the names and the decor of the rooms that have a king bed",
        "query": "SELECT roomname, decor FROM rooms WHERE bedtype = 'King'",
        "schema": "CREATE TABLE Rooms (decor TEXT, bedType TEXT, beds NUMBER, roomName TEXT, RoomId TEXT); CREATE TABLE Reservations (Room TEXT);"
      },
      {
        "question": "show me the price of the rooms also",
        "query": "SELECT roomname, decor, baseprice FROM rooms WHERE bedtype = 'King'",
        "schema": "CREATE TABLE Rooms (beds NUMBER, decor TEXT, bedType TEXT, roomName TEXT, basePrice NUMBER, RoomId TEXT); CREATE TABLE Reservations (Room TEXT);"
      },
      {
        "question": "now sort the list by price",
        "query": "SELECT roomname, decor, baseprice FROM rooms WHERE bedtype = 'King' ORDER BY baseprice",
        "schema": "CREATE TABLE Reservations (Room TEXT); CREATE TABLE Rooms (roomName TEXT, decor TEXT, basePrice NUMBER, beds NUMBER, bedType TEXT, RoomId TEXT);"
      }
    ],
    [
      {
        "question": "Can you list the base price for all rooms?",
        "query": "SELECT baseprice FROM rooms",
        "schema": "CREATE TABLE Reservations (Room TEXT); CREATE TABLE Rooms (RoomId TEXT, basePrice NUMBER);"
      },
      {
        "question": "Can you sort the list to show only the 3 highest base prices?",
        "query": "SELECT baseprice FROM rooms ORDER BY baseprice DESC LIMIT 3",
        "schema": "CREATE TABLE Rooms (basePrice NUMBER, RoomId TEXT); CREATE TABLE Reservations (Room TEXT);"
      },
      {
        "question": "Can you please list the room name and room id associated with each of those 3 base prices?",
        "query": "SELECT roomid , roomname FROM rooms ORDER BY baseprice DESC LIMIT 3",
        "schema": "CREATE TABLE Rooms (RoomId TEXT, roomName TEXT, basePrice NUMBER); CREATE TABLE Reservations (Room TEXT);"
      }
    ],
    [
      {
        "question": "Could you please tell me which room has the cheapest base price?",
        "query": "SELECT * FROM rooms ORDER BY baseprice ASC LIMIT 1",
        "schema": "CREATE TABLE Reservations (Code NUMBER, Room TEXT); CREATE TABLE Rooms (RoomId TEXT, basePrice NUMBER, decor TEXT, roomName TEXT);"
      },
      {
        "question": "Could you please tell me which room has the most expensive base price?",
        "query": "SELECT * FROM rooms ORDER BY baseprice DESC LIMIT 1",
        "schema": "CREATE TABLE Rooms (basePrice NUMBER, RoomId TEXT, decor TEXT, roomName TEXT); CREATE TABLE Reservations (Code NUMBER, Room TEXT);"
      },
      {
        "question": "What is the average base price for all rooms?",
        "query": "SELECT AVG ( baseprice ) FROM rooms",
        "schema": "CREATE TABLE Reservations (Code NUMBER, Room TEXT); CREATE TABLE Rooms (basePrice NUMBER, roomName TEXT, decor TEXT, RoomId TEXT);"
      },
      {
        "question": "What is the name of the room with the largest max occupancy?",
        "query": "SELECT roomname FROM rooms ORDER BY maxoccupancy DESC LIMIT 1",
        "schema": "CREATE TABLE Reservations (Room TEXT, Code NUMBER); CREATE TABLE Rooms (roomName TEXT, basePrice NUMBER, decor TEXT, maxOccupancy NUMBER, RoomId TEXT);"
      }
    ],
    [
      {
        "question": "which one of these rooms has reservations?",
        "query": "SELECT * FROM rooms WHERE roomid IN ( SELECT DISTINCT room FROM reservations )",
        "schema": "CREATE TABLE Reservations (Code NUMBER, LastName TEXT, Kids NUMBER, FirstName TEXT, Room TEXT); CREATE TABLE Rooms (maxOccupancy NUMBER, decor TEXT, RoomId TEXT, roomName TEXT);"
      },
      {
        "question": "What about the rooms which do not have reservations?",
        "query": "SELECT * FROM rooms WHERE roomid NOT IN ( SELECT DISTINCT room FROM reservations )",
        "schema": "CREATE TABLE Rooms (maxOccupancy NUMBER, RoomId TEXT, roomName TEXT, decor TEXT); CREATE TABLE Reservations (LastName TEXT, Code NUMBER, Room TEXT, FirstName TEXT, Kids NUMBER);"
      }
    ],
    [
      {
        "question": "Can you find the first and last names of all people who paid more than the rooms' base prices?",
        "query": "SELECT t1.firstname , t1.lastname FROM reservations AS t1 JOIN rooms AS t2 ON t1.room = t2.roomid WHERE t1.rate - t2.baseprice > 0",
        "schema": "CREATE TABLE Rooms (roomName TEXT, basePrice NUMBER, RoomId TEXT); CREATE TABLE Reservations (Rate NUMBER, LastName TEXT, Room TEXT, FirstName TEXT);"
      },
      {
        "question": "Could you add in the rates they paid to the table please? | Sorry, did you mean the base price of the room? | The reservation rate, please",
        "query": "SELECT t1.firstname , t1.lastname, t1.rate FROM reservations AS t1 JOIN rooms AS t2 ON t1.room = t2.roomid WHERE t1.rate - t2.baseprice > 0",
        "schema": "CREATE TABLE Reservations (Room TEXT, LastName TEXT, Rate NUMBER, FirstName TEXT, Code NUMBER); CREATE TABLE Rooms (roomName TEXT, basePrice NUMBER, RoomId TEXT);"
      },
      {
        "question": "Can you find the first and last names of all people who paid less than the rooms' base prices?",
        "query": "SELECT t1.firstname , t1.lastname FROM reservations AS t1 JOIN rooms AS t2 ON t1.room = t2.roomid WHERE t1.rate - t2.baseprice < 0",
        "schema": "CREATE TABLE Reservations (Rate NUMBER, FirstName TEXT, LastName TEXT, Room TEXT, Code NUMBER); CREATE TABLE Rooms (roomName TEXT, basePrice NUMBER, RoomId TEXT);"
      },
      {
        "question": "Could you add in the reservation rates they paid to the table?",
        "query": "SELECT t1.firstname , t1.lastname, t1.rate FROM reservations AS t1 JOIN rooms AS t2 ON t1.room = t2.roomid WHERE t1.rate - t2.baseprice < 0",
        "schema": "CREATE TABLE Rooms (RoomId TEXT, roomName TEXT, basePrice NUMBER); CREATE TABLE Reservations (FirstName TEXT, LastName TEXT, Room TEXT, Rate NUMBER, Code NUMBER);"
      },
      {
        "question": "What is the name of the room that was booked most often?",
        "query": "SELECT room FROM reservations GROUP BY room ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Reservations (FirstName TEXT, Code NUMBER, Rate NUMBER, LastName TEXT, Room TEXT); CREATE TABLE Rooms (RoomId TEXT, roomName TEXT, basePrice NUMBER);"
      }
    ],
    [
      {
        "question": "what is the last name of room id IBS? | Do mean the last name of the reservation for the room with id IBS? | yes",
        "query": "SELECT t1.lastname FROM reservations AS t1 JOIN rooms AS t2 ON t1.room = t2.roomid WHERE t2.roomid = \"IBS\"",
        "schema": "CREATE TABLE Rooms (roomName TEXT, RoomId TEXT); CREATE TABLE Reservations (Code NUMBER, Room TEXT, FirstName TEXT, LastName TEXT);"
      },
      {
        "question": "what is the bed type of the column \"room in HBB ? | Do you mean the bed type for the room with id HBB? | yes",
        "query": "SELECT bedtype FROM rooms WHERE roomid = \"HBB\"",
        "schema": "CREATE TABLE Reservations (FirstName TEXT, Code NUMBER, LastName TEXT, Room TEXT); CREATE TABLE Rooms (roomName TEXT, bedType TEXT, beds NUMBER, RoomId TEXT);"
      },
      {
        "question": "what is the check in and check out of the room id RND ?",
        "query": "SELECT t1.checkin, t1.checkout FROM reservations AS t1 JOIN rooms AS t2 ON t1.room = t2.roomid WHERE t2.roomid = \"RND\"",
        "schema": "CREATE TABLE Reservations (Room TEXT, FirstName TEXT, LastName TEXT, CheckIn TEXT, CheckOut TEXT, Code NUMBER); CREATE TABLE Rooms (bedType TEXT, beds NUMBER, RoomId TEXT, roomName TEXT);"
      },
      {
        "question": "Find the most popular room in the hotel. The most popular room is the room that had seen the largest number of reservations.",
        "query": "SELECT t2.roomname FROM reservations AS t1 JOIN rooms AS t2 ON t1.room = t2.roomid GROUP BY t1.room ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Reservations (LastName TEXT, Code NUMBER, Room TEXT, Rate NUMBER, CheckOut TEXT, CheckIn TEXT, FirstName TEXT); CREATE TABLE Rooms (beds NUMBER, RoomId TEXT, bedType TEXT, roomName TEXT);"
      }
    ],
    [
      {
        "question": "what is the average of rates?",
        "query": "SELECT AVG ( rate ) FROM reservations",
        "schema": "CREATE TABLE Reservations (Rate NUMBER); CREATE TABLE Rooms (basePrice NUMBER, maxOccupancy NUMBER);"
      },
      {
        "question": "show me a list of check outs?",
        "query": "SELECT checkout FROM reservations",
        "schema": "CREATE TABLE Rooms (maxOccupancy NUMBER, basePrice NUMBER, RoomId TEXT); CREATE TABLE Reservations (CheckOut TEXT, CheckIn TEXT, Code NUMBER, Rate NUMBER);"
      },
      {
        "question": "show me a list of check in?",
        "query": "SELECT checkin FROM reservations",
        "schema": "CREATE TABLE Reservations (Rate NUMBER, CheckIn TEXT, CheckOut TEXT, Code NUMBER); CREATE TABLE Rooms (maxOccupancy NUMBER, basePrice NUMBER, RoomId TEXT);"
      },
      {
        "question": "how many adults stay in the room contad selbig checked in on oct 23, 2010?",
        "query": "SELECT COUNT ( adults ) FROM reservations WHERE checkin = \"2010-10-23\" AND firstname = \"CONRAD\" AND lastname = \"SELBIG\"",
        "schema": "CREATE TABLE Rooms (RoomId TEXT, beds NUMBER, maxOccupancy NUMBER, basePrice NUMBER); CREATE TABLE Reservations (CheckOut TEXT, FirstName TEXT, Kids NUMBER, CheckIn TEXT, Rate NUMBER, Adults NUMBER, Code NUMBER, Room TEXT, LastName TEXT);"
      }
    ],
    [
      {
        "question": "how many times does ROY SWEAZY has reserved a room",
        "query": "SELECT COUNT ( * ) FROM reservations WHERE firstname = \"ROY\" AND lastname = \"SWEAZY\"",
        "schema": "CREATE TABLE Rooms (RoomId TEXT); CREATE TABLE Reservations (LastName TEXT, FirstName TEXT, Code NUMBER, Room TEXT);"
      },
      {
        "question": "ok,show the count of all room",
        "query": "SELECT COUNT ( DISTINCT room ) FROM reservations",
        "schema": "CREATE TABLE Rooms (RoomId TEXT, roomName TEXT); CREATE TABLE Reservations (LastName TEXT, Room TEXT, Code NUMBER, FirstName TEXT);"
      },
      {
        "question": "show the count of all adults and kids",
        "query": "SELECT COUNT ( adults ) , COUNT ( kids ) FROM reservations",
        "schema": "CREATE TABLE Reservations (FirstName TEXT, Kids NUMBER, Code NUMBER, LastName TEXT, Adults NUMBER, Room TEXT); CREATE TABLE Rooms (RoomId TEXT, roomName TEXT);"
      },
      {
        "question": "find the check in and out for the code 10105",
        "query": "SELECT checkin, checkout FROM reservations WHERE code = 10105",
        "schema": "CREATE TABLE Reservations (CheckIn TEXT, Kids NUMBER, LastName TEXT, Room TEXT, CheckOut TEXT, Adults NUMBER, FirstName TEXT, Code NUMBER); CREATE TABLE Rooms (RoomId TEXT, roomName TEXT);"
      }
    ],
    [
      {
        "question": "How many rooms with the King Size bed are there?",
        "query": "SELECT COUNT ( * ) FROM rooms WHERE bedtype = \"King\"",
        "schema": "CREATE TABLE Rooms (decor TEXT, bedType TEXT, beds NUMBER, RoomId TEXT);"
      },
      {
        "question": "How much does one room with the King size bed cost per night?",
        "query": "SELECT AVG ( baseprice ) FROM rooms WHERE bedtype = \"King\"",
        "schema": "CREATE TABLE Rooms (beds NUMBER, decor TEXT, bedType TEXT, basePrice NUMBER, RoomId TEXT);"
      }
    ],
    [
      {
        "question": "What is the first name of Reservations Code 10105?",
        "query": "SELECT firstname FROM reservations WHERE code = 10105",
        "schema": "CREATE TABLE Reservations (Code NUMBER, FirstName TEXT, LastName TEXT, Room TEXT); CREATE TABLE Rooms (roomName TEXT, RoomId TEXT);"
      },
      {
        "question": "What is the last name of Reservations Code 10105?",
        "query": "SELECT lastname FROM reservations WHERE code = 10105",
        "schema": "CREATE TABLE Rooms (roomName TEXT, RoomId TEXT); CREATE TABLE Reservations (LastName TEXT, Code NUMBER, FirstName TEXT, Room TEXT);"
      },
      {
        "question": "Can you show the names of rooms that have been reserved for more than 60 times",
        "query": "SELECT t2.roomname FROM reservations AS t1 JOIN rooms AS t2 ON t1.room = t2.roomid GROUP BY t1.room HAVING COUNT ( * ) > 60",
        "schema": "CREATE TABLE Rooms (RoomId TEXT, roomName TEXT); CREATE TABLE Reservations (FirstName TEXT, Room TEXT, LastName TEXT, Code NUMBER);"
      }
    ],
    [
      {
        "question": "Find the names of all modern rooms with a base price below $160 and two beds.",
        "query": "SELECT roomname FROM rooms WHERE baseprice < 160 AND beds = 2 AND decor = 'modern'",
        "schema": "CREATE TABLE Rooms (basePrice NUMBER, beds NUMBER, RoomId TEXT, bedType TEXT, roomName TEXT, decor TEXT);"
      },
      {
        "question": "Which room has highest price value? tell me the name and Room ID",
        "query": "SELECT roomname, roomid FROM rooms WHERE baseprice = ( SELECT MAX ( baseprice ) FROM rooms )",
        "schema": "CREATE TABLE Rooms (beds NUMBER, decor TEXT, basePrice NUMBER, bedType TEXT, RoomId TEXT, roomName TEXT);"
      },
      {
        "question": "Which room has lowest price value? tell me the price, the name and Room ID",
        "query": "SELECT baseprice, roomname, roomid FROM rooms WHERE baseprice = ( SELECT MIN ( baseprice ) FROM rooms )",
        "schema": "CREATE TABLE Rooms (roomName TEXT, basePrice NUMBER, RoomId TEXT, decor TEXT, beds NUMBER, bedType TEXT);"
      },
      {
        "question": "Which room has most number of beds?Tell me the Room ID, Name and decor?",
        "query": "SELECT roomid, roomname, decor FROM rooms WHERE beds = ( SELECT MAX ( beds ) FROM rooms )",
        "schema": "CREATE TABLE Rooms (decor TEXT, bedType TEXT, RoomId TEXT, beds NUMBER, roomName TEXT, basePrice NUMBER);"
      }
    ],
    [
      {
        "question": "What are the bed type of room id RND?",
        "query": "SELECT bedtype FROM rooms WHERE roomid = \"RND\"",
        "schema": "CREATE TABLE Rooms (beds NUMBER, RoomId TEXT, bedType TEXT, decor TEXT, roomName TEXT);"
      },
      {
        "question": "What type of decor in room name Abscond or bolster?",
        "query": "SELECT decor FROM rooms WHERE roomname = \"Abscond or bolster\"",
        "schema": "CREATE TABLE Rooms (RoomId TEXT, decor TEXT, bedType TEXT, roomName TEXT, beds NUMBER);"
      },
      {
        "question": "Find the max occupancy of bed type Queen? | Here are the max occupancies of rooms with bed type Queen. | Find the average and minimum price of the rooms in different decor.",
        "query": "SELECT decor , AVG ( baseprice ) , MIN ( baseprice ) FROM rooms GROUP BY decor",
        "schema": "CREATE TABLE Rooms (bedType TEXT, RoomId TEXT, basePrice NUMBER, maxOccupancy NUMBER, decor TEXT, roomName TEXT, beds NUMBER);"
      }
    ],
    [
      {
        "question": "What are the names of the top 3 expensive rooms?",
        "query": "SELECT roomname FROM rooms ORDER BY baseprice DESC LIMIT 3",
        "schema": "CREATE TABLE Rooms (basePrice NUMBER, decor TEXT, roomName TEXT, RoomId TEXT); CREATE TABLE Reservations (Room TEXT);"
      },
      {
        "question": "What are the bed types of those rooms?",
        "query": "SELECT bedtype FROM rooms ORDER BY baseprice DESC LIMIT 3",
        "schema": "CREATE TABLE Rooms (decor TEXT, beds NUMBER, bedType TEXT, RoomId TEXT, basePrice NUMBER, roomName TEXT); CREATE TABLE Reservations (Room TEXT);"
      },
      {
        "question": "What are the bed types of the three least expensive rooms?",
        "query": "SELECT bedtype FROM rooms ORDER BY baseprice LIMIT 3",
        "schema": "CREATE TABLE Reservations (Room TEXT); CREATE TABLE Rooms (decor TEXT, beds NUMBER, roomName TEXT, RoomId TEXT, bedType TEXT, basePrice NUMBER);"
      },
      {
        "question": "What are the ids of the top 3 expensive rooms?",
        "query": "SELECT roomid FROM rooms ORDER BY baseprice DESC LIMIT 3",
        "schema": "CREATE TABLE Reservations (Room TEXT); CREATE TABLE Rooms (roomName TEXT, beds NUMBER, RoomId TEXT, basePrice NUMBER, bedType TEXT, decor TEXT);"
      },
      {
        "question": "What are the ids of the three least expensive rooms?",
        "query": "SELECT roomid FROM rooms ORDER BY baseprice LIMIT 3",
        "schema": "CREATE TABLE Rooms (bedType TEXT, beds NUMBER, basePrice NUMBER, roomName TEXT, decor TEXT, RoomId TEXT); CREATE TABLE Reservations (Room TEXT);"
      }
    ],
    [
      {
        "question": "WHAT IS ROOM ID OF MODERN DECOR?",
        "query": "SELECT roomid FROM rooms WHERE decor = 'modern'",
        "schema": "CREATE TABLE Reservations (Room TEXT); CREATE TABLE Rooms (decor TEXT, maxOccupancy NUMBER, roomName TEXT, RoomId TEXT);"
      },
      {
        "question": "OK .HOW MANY ROOMS IN KING BED TYPE?",
        "query": "SELECT COUNT ( * ) FROM rooms WHERE bedtype = 'King'",
        "schema": "CREATE TABLE Reservations (Room TEXT); CREATE TABLE Rooms (beds NUMBER, roomName TEXT, decor TEXT, maxOccupancy NUMBER, bedType TEXT, RoomId TEXT);"
      },
      {
        "question": "WHAT IS ROOM NAME  of rooms that have a king bed.?",
        "query": "SELECT roomname FROM rooms WHERE bedtype = 'King'",
        "schema": "CREATE TABLE Rooms (decor TEXT, RoomId TEXT, maxOccupancy NUMBER, bedType TEXT, roomName TEXT, beds NUMBER); CREATE TABLE Reservations (Room TEXT);"
      }
    ],
    [
      {
        "question": "List all the room names.",
        "query": "SELECT t2.roomname FROM reservations AS t1 JOIN rooms AS t2 ON t1.room = t2.roomid",
        "schema": "CREATE TABLE Reservations (Room TEXT); CREATE TABLE Rooms (RoomId TEXT, decor TEXT, roomName TEXT);"
      },
      {
        "question": "List all the room names with 2 beds.",
        "query": "SELECT t2.roomname FROM reservations AS t1 JOIN rooms AS t2 ON t1.room = t2.roomid WHERE t2.beds = 2",
        "schema": "CREATE TABLE Rooms (bedType TEXT, decor TEXT, roomName TEXT, beds NUMBER, RoomId TEXT); CREATE TABLE Reservations (Code NUMBER, Room TEXT);"
      },
      {
        "question": "List all the room names booked with 1 adult.",
        "query": "SELECT t2.roomname FROM reservations AS t1 JOIN rooms AS t2 ON t1.room = t2.roomid WHERE t1.adults = 1",
        "schema": "CREATE TABLE Rooms (roomName TEXT, decor TEXT, RoomId TEXT, beds NUMBER, bedType TEXT); CREATE TABLE Reservations (Room TEXT, Code NUMBER, Adults NUMBER, Kids NUMBER);"
      },
      {
        "question": "List all the room names booked with 1 adult and their check in date.",
        "query": "SELECT t2.roomname, t1.checkin FROM reservations AS t1 JOIN rooms AS t2 ON t1.room = t2.roomid WHERE t1.adults = 1",
        "schema": "CREATE TABLE Rooms (RoomId TEXT, roomName TEXT, decor TEXT, beds NUMBER, bedType TEXT); CREATE TABLE Reservations (CheckIn TEXT, Code NUMBER, Adults NUMBER, Kids NUMBER, CheckOut TEXT, Room TEXT);"
      },
      {
        "question": "List all the room names booked with 1 adult and a check in date in October.",
        "query": "SELECT t2.roomname FROM reservations AS t1 JOIN rooms AS t2 ON t1.room = t2.roomid WHERE t1.adults = 1 AND t1.checkin LIKE \"%OCT%\"",
        "schema": "CREATE TABLE Reservations (Adults NUMBER, CheckIn TEXT, CheckOut TEXT, Kids NUMBER, Room TEXT, Code NUMBER); CREATE TABLE Rooms (decor TEXT, roomName TEXT, bedType TEXT, beds NUMBER, RoomId TEXT);"
      },
      {
        "question": "List the names of rooms booked by a customer whose first name is Roy.",
        "query": "SELECT t2.roomname FROM reservations AS t1 JOIN rooms AS t2 ON t1.room = t2.roomid WHERE t1.firstname = \"ROY\"",
        "schema": "CREATE TABLE Reservations (Code NUMBER, CheckOut TEXT, CheckIn TEXT, Adults NUMBER, LastName TEXT, FirstName TEXT, Room TEXT, Kids NUMBER); CREATE TABLE Rooms (RoomId TEXT, beds NUMBER, roomName TEXT, bedType TEXT, decor TEXT);"
      }
    ],
    [
      {
        "question": "How many rooms are there?",
        "query": "SELECT COUNT ( * ) FROM rooms",
        "schema": "CREATE TABLE Reservations (Room TEXT); CREATE TABLE Rooms (RoomId TEXT, bedType TEXT, maxOccupancy NUMBER, beds NUMBER, roomName TEXT, decor TEXT);"
      },
      {
        "question": "What are their prices?",
        "query": "SELECT baseprice FROM rooms",
        "schema": "CREATE TABLE Reservations (Room TEXT); CREATE TABLE Rooms (roomName TEXT, RoomId TEXT, maxOccupancy NUMBER, bedType TEXT, beds NUMBER, decor TEXT, basePrice NUMBER);"
      },
      {
        "question": "What is the id of the room with a base price of 250?",
        "query": "SELECT roomid FROM rooms WHERE baseprice = 250",
        "schema": "CREATE TABLE Reservations (Room TEXT); CREATE TABLE Rooms (roomName TEXT, beds NUMBER, decor TEXT, RoomId TEXT, maxOccupancy NUMBER, basePrice NUMBER, bedType TEXT);"
      },
      {
        "question": "What is the name of that room?",
        "query": "SELECT roomname FROM rooms WHERE baseprice = 250",
        "schema": "CREATE TABLE Rooms (roomName TEXT, RoomId TEXT, decor TEXT, beds NUMBER, basePrice NUMBER, bedType TEXT, maxOccupancy NUMBER); CREATE TABLE Reservations (Room TEXT);"
      }
    ],
    [
      {
        "question": "which rooms have reservations ?",
        "query": "SELECT DISTINCT room FROM reservations",
        "schema": "CREATE TABLE Rooms (decor TEXT, roomName TEXT, RoomId TEXT); CREATE TABLE Reservations (Code NUMBER, FirstName TEXT, Adults NUMBER, LastName TEXT, Room TEXT, Kids NUMBER);"
      },
      {
        "question": "show me the average number of beds of the rooms with reservations.",
        "query": "SELECT AVG ( beds ) FROM rooms WHERE roomid IN ( SELECT DISTINCT room FROM reservations )",
        "schema": "CREATE TABLE Rooms (decor TEXT, roomName TEXT, bedType TEXT, beds NUMBER, RoomId TEXT); CREATE TABLE Reservations (FirstName TEXT, Adults NUMBER, LastName TEXT, Kids NUMBER, Room TEXT, Code NUMBER);"
      },
      {
        "question": "how about the rooms that do not have any reservations ?",
        "query": "SELECT AVG ( beds ) FROM rooms WHERE roomid NOT IN ( SELECT DISTINCT room FROM reservations )",
        "schema": "CREATE TABLE Reservations (LastName TEXT, Room TEXT, Code NUMBER, Kids NUMBER, Adults NUMBER, FirstName TEXT); CREATE TABLE Rooms (roomName TEXT, beds NUMBER, RoomId TEXT, bedType TEXT, decor TEXT);"
      },
      {
        "question": "what are the number of rooms that do not have any reservations ?",
        "query": "SELECT COUNT ( * ) FROM rooms WHERE roomid NOT IN ( SELECT DISTINCT room FROM reservations )",
        "schema": "CREATE TABLE Reservations (Code NUMBER, Adults NUMBER, LastName TEXT, Room TEXT, Kids NUMBER, FirstName TEXT); CREATE TABLE Rooms (RoomId TEXT, beds NUMBER, decor TEXT, roomName TEXT, bedType TEXT);"
      }
    ],
    [
      {
        "question": "how rooms are presented on the table | Did you mean to ask how many entries are in the table rooms? | exactly",
        "query": "SELECT COUNT ( * ) FROM rooms",
        "schema": "CREATE TABLE Reservations (Room TEXT); CREATE TABLE Rooms (bedType TEXT, RoomId TEXT, decor TEXT, roomName TEXT);"
      },
      {
        "question": "list out the room names",
        "query": "SELECT roomname FROM rooms",
        "schema": "CREATE TABLE Reservations (Room TEXT); CREATE TABLE Rooms (roomName TEXT, decor TEXT, bedType TEXT, RoomId TEXT);"
      },
      {
        "question": "what is the base price of Recluse and defiance",
        "query": "SELECT baseprice FROM rooms WHERE roomname = \"Recluse and defiance\"",
        "schema": "CREATE TABLE Rooms (RoomId TEXT, basePrice NUMBER, bedType TEXT, decor TEXT, roomName TEXT); CREATE TABLE Reservations (Room TEXT);"
      }
    ]
  ],
  "sakila_1": [
    [
      {
        "question": "Hello!  Can you provide me with a list of the first names of all customers who rented films before '2005-08-23 02:06:01'?",
        "query": "SELECT first_name FROM customer WHERE customer_id IN ( SELECT customer_id FROM rental WHERE rental_date < '2005-08-23 02:06:01' )",
        "schema": "CREATE TABLE customer (create_date TIME, last_name TEXT, first_name TEXT, customer_id NUMBER); CREATE TABLE rental (return_date TIME, rental_id NUMBER, rental_date TIME, inventory_id NUMBER, customer_id NUMBER); CREATE TABLE payment (rental_id NUMBER, customer_id NUMBER); CREATE TABLE inventory (film_id NUMBER, inventory_id NUMBER); CREATE TABLE actor (last_name TEXT, first_name TEXT); CREATE TABLE film_text (title TEXT, film_id NUMBER); CREATE TABLE film (film_id NUMBER, title TEXT, release_year TIME, replacement_cost NUMBER, rental_rate NUMBER, rental_duration NUMBER);"
      },
      {
        "question": "Thank you!  That's a lot of people! Can you filter the list to show me only the active customers?",
        "query": "SELECT first_name FROM customer WHERE customer_id IN ( SELECT customer_id FROM rental WHERE rental_date < '2005-08-23 02:06:01' ) AND active = 1",
        "schema": "CREATE TABLE rental (rental_id NUMBER, rental_date TIME, customer_id NUMBER, inventory_id NUMBER, return_date TIME); CREATE TABLE film (rental_rate NUMBER, replacement_cost NUMBER, rental_duration NUMBER, title TEXT, release_year TIME, film_id NUMBER); CREATE TABLE inventory (film_id NUMBER, inventory_id NUMBER); CREATE TABLE film_text (film_id NUMBER, title TEXT); CREATE TABLE payment (customer_id NUMBER, rental_id NUMBER); CREATE TABLE customer (first_name TEXT, active BOOLEAN, create_date TIME, customer_id NUMBER, last_name TEXT); CREATE TABLE actor (last_name TEXT, first_name TEXT);"
      }
    ],
    [
      {
        "question": "Which film actors and actresses played a role in more than 30 films? List their first and last names.",
        "query": "SELECT t2.first_name , t2.last_name FROM film_actor AS t1 JOIN actor AS t2 ON t1.actor_id = t2.actor_id GROUP BY t2.actor_id HAVING COUNT ( * ) > 30",
        "schema": "CREATE TABLE actor (actor_id NUMBER, first_name TEXT, last_name TEXT); CREATE TABLE staff (first_name TEXT, last_name TEXT); CREATE TABLE film (film_id NUMBER, title TEXT); CREATE TABLE film_actor (actor_id NUMBER, film_id NUMBER);"
      },
      {
        "question": "How many films was actor id 9 in?",
        "query": "SELECT COUNT ( * ) FROM film_actor WHERE actor_id = '9'",
        "schema": "CREATE TABLE actor (last_name TEXT, first_name TEXT, actor_id NUMBER); CREATE TABLE staff (last_name TEXT, first_name TEXT); CREATE TABLE film_actor (film_id NUMBER, actor_id NUMBER); CREATE TABLE film (film_id NUMBER, title TEXT);"
      },
      {
        "question": "What's that person's name?",
        "query": "SELECT first_name,last_name FROM actor WHERE actor_id = '9'",
        "schema": "CREATE TABLE staff (last_name TEXT, first_name TEXT); CREATE TABLE film_actor (film_id NUMBER, actor_id NUMBER); CREATE TABLE film (title TEXT, film_id NUMBER); CREATE TABLE actor (first_name TEXT, actor_id NUMBER, last_name TEXT);"
      },
      {
        "question": "Is there anyone else with the first name Joe?",
        "query": "SELECT first_name, last_name FROM actor WHERE first_name = 'JOE' AND last_name ! = 'SWANK'",
        "schema": "CREATE TABLE film_actor (actor_id NUMBER, film_id NUMBER); CREATE TABLE film (film_id NUMBER, title TEXT); CREATE TABLE actor (last_name TEXT, first_name TEXT, actor_id NUMBER); CREATE TABLE staff (first_name TEXT, last_name TEXT);"
      }
    ],
    [
      {
        "question": "Which staff handled payments?",
        "query": "SELECT * FROM staff",
        "schema": "CREATE TABLE rental (staff_id NUMBER); CREATE TABLE store (manager_staff_id NUMBER); CREATE TABLE actor (actor_id NUMBER); CREATE TABLE payment (payment_id NUMBER, staff_id NUMBER); CREATE TABLE customer (customer_id NUMBER); CREATE TABLE staff (picture OTHERS, last_name TEXT, staff_id NUMBER, first_name TEXT, username TEXT, store_id NUMBER);"
      }
    ],
    [
      {
        "question": "how many customers are presented on the table | Did you mean to ask how many entries there are in the table customer? | exactly",
        "query": "SELECT COUNT ( * ) FROM customer",
        "schema": "CREATE TABLE customer (first_name TEXT, customer_id NUMBER, last_name TEXT);"
      },
      {
        "question": "list out the customers first name",
        "query": "SELECT first_name FROM customer",
        "schema": "CREATE TABLE customer (customer_id NUMBER, last_name TEXT, first_name TEXT); CREATE TABLE category (name TEXT);"
      }
    ],
    [
      {
        "question": "What are the last name of staff id 1? | Do you mean customer, not staff? | yes",
        "query": "SELECT last_name FROM customer WHERE customer_id = 1",
        "schema": "CREATE TABLE payment (staff_id NUMBER, customer_id NUMBER); CREATE TABLE staff (staff_id NUMBER, picture OTHERS, last_name TEXT, first_name TEXT, username TEXT, address_id NUMBER); CREATE TABLE rental (staff_id NUMBER, customer_id NUMBER); CREATE TABLE customer (address_id NUMBER, first_name TEXT, last_name TEXT, customer_id NUMBER); CREATE TABLE actor (last_name TEXT, first_name TEXT);"
      },
      {
        "question": "what is the inventory id of the rent id 3?",
        "query": "SELECT inventory_id FROM rental WHERE rental_id = 3",
        "schema": "CREATE TABLE inventory (inventory_id NUMBER, film_id NUMBER); CREATE TABLE customer (last_name TEXT, first_name TEXT, address_id NUMBER, customer_id NUMBER); CREATE TABLE rental (rental_id NUMBER, staff_id NUMBER, inventory_id NUMBER, customer_id NUMBER); CREATE TABLE film_text (title TEXT, film_id NUMBER); CREATE TABLE staff (picture OTHERS, staff_id NUMBER, username TEXT, address_id NUMBER, last_name TEXT, first_name TEXT, store_id NUMBER); CREATE TABLE film_category (category_id NUMBER); CREATE TABLE category (name TEXT, category_id NUMBER); CREATE TABLE film (title TEXT, film_id NUMBER); CREATE TABLE payment (rental_id NUMBER, staff_id NUMBER, customer_id NUMBER); CREATE TABLE actor (last_name TEXT, first_name TEXT);"
      },
      {
        "question": "what is the first name and the last name of the customer who made the earliest rental ?",
        "query": "SELECT t1.first_name , t1.last_name FROM customer AS t1 JOIN rental AS t2 ON t1.customer_id = t2.customer_id ORDER BY t2.rental_date ASC LIMIT 1",
        "schema": "CREATE TABLE film_category (category_id NUMBER); CREATE TABLE staff (first_name TEXT, address_id NUMBER, username TEXT, staff_id NUMBER, store_id NUMBER, last_name TEXT, picture OTHERS); CREATE TABLE customer (customer_id NUMBER, create_date TIME, first_name TEXT, address_id NUMBER, last_name TEXT); CREATE TABLE payment (rental_id NUMBER, staff_id NUMBER, customer_id NUMBER); CREATE TABLE film (film_id NUMBER, title TEXT); CREATE TABLE inventory (film_id NUMBER, inventory_id NUMBER); CREATE TABLE rental (return_date TIME, rental_date TIME, rental_id NUMBER, staff_id NUMBER, customer_id NUMBER, inventory_id NUMBER); CREATE TABLE actor (first_name TEXT, last_name TEXT); CREATE TABLE category (name TEXT, category_id NUMBER); CREATE TABLE film_text (film_id NUMBER, title TEXT);"
      }
    ],
    [
      {
        "question": "How many films are there?",
        "query": "SELECT COUNT ( * ) FROM film",
        "schema": "CREATE TABLE staff (staff_id NUMBER, last_name TEXT); CREATE TABLE actor (actor_id NUMBER); CREATE TABLE film_category (film_id NUMBER); CREATE TABLE film_text (title TEXT, film_id NUMBER); CREATE TABLE inventory (film_id NUMBER, inventory_id NUMBER); CREATE TABLE film (original_language_id NUMBER, language_id NUMBER, rental_duration NUMBER, length NUMBER, description TEXT, rental_rate NUMBER, film_id NUMBER, rating TEXT, title TEXT); CREATE TABLE customer (customer_id NUMBER); CREATE TABLE language (language_id NUMBER); CREATE TABLE film_actor (film_id NUMBER, actor_id NUMBER);"
      },
      {
        "question": "What is the range of dates they were made?",
        "query": "SELECT MIN ( release_year ) , MAX ( release_year ) FROM film",
        "schema": "CREATE TABLE customer (customer_id NUMBER); CREATE TABLE film_text (film_id NUMBER, title TEXT); CREATE TABLE actor (actor_id NUMBER); CREATE TABLE language (language_id NUMBER); CREATE TABLE staff (staff_id NUMBER, last_name TEXT); CREATE TABLE film (description TEXT, length NUMBER, film_id NUMBER, rating TEXT, title TEXT, release_year TIME, rental_rate NUMBER, language_id NUMBER, original_language_id NUMBER, rental_duration NUMBER); CREATE TABLE payment (payment_date TIME); CREATE TABLE inventory (film_id NUMBER, inventory_id NUMBER); CREATE TABLE film_actor (actor_id NUMBER, film_id NUMBER); CREATE TABLE film_category (film_id NUMBER);"
      },
      {
        "question": "What is the range of rental cost for the films?",
        "query": "SELECT MIN ( rental_rate ) , MAX ( rental_rate ) FROM film",
        "schema": "CREATE TABLE film_text (film_id NUMBER, title TEXT); CREATE TABLE rental (rental_date TIME, rental_id NUMBER); CREATE TABLE film_actor (film_id NUMBER, actor_id NUMBER); CREATE TABLE language (language_id NUMBER); CREATE TABLE customer (customer_id NUMBER); CREATE TABLE actor (actor_id NUMBER); CREATE TABLE payment (payment_date TIME, rental_id NUMBER); CREATE TABLE film_category (film_id NUMBER); CREATE TABLE inventory (film_id NUMBER, inventory_id NUMBER); CREATE TABLE staff (last_name TEXT, staff_id NUMBER); CREATE TABLE film (original_language_id NUMBER, length NUMBER, description TEXT, rental_duration NUMBER, title TEXT, language_id NUMBER, replacement_cost NUMBER, rental_rate NUMBER, film_id NUMBER, release_year TIME, rating TEXT);"
      },
      {
        "question": "Which film has the most actors and actresses? | What attributes of the film that has the most actors and actresses would you like to know? | film name?",
        "query": "SELECT t2.title FROM film_actor AS t1 JOIN film AS t2 ON t1.film_id = t2.film_id GROUP BY t2.film_id ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE film_text (film_id NUMBER, title TEXT); CREATE TABLE inventory (film_id NUMBER, inventory_id NUMBER); CREATE TABLE film_actor (film_id NUMBER, actor_id NUMBER); CREATE TABLE language (language_id NUMBER); CREATE TABLE actor (actor_id NUMBER, first_name TEXT, last_name TEXT); CREATE TABLE payment (rental_id NUMBER, payment_date TIME); CREATE TABLE film_category (film_id NUMBER); CREATE TABLE film (rental_duration NUMBER, original_language_id NUMBER, rental_rate NUMBER, title TEXT, release_year TIME, rating TEXT, language_id NUMBER, description TEXT, film_id NUMBER, replacement_cost NUMBER, length NUMBER); CREATE TABLE customer (customer_id NUMBER); CREATE TABLE staff (staff_id NUMBER, last_name TEXT); CREATE TABLE rental (rental_id NUMBER, rental_date TIME);"
      },
      {
        "question": "film id?",
        "query": "SELECT t2.film_id FROM film_actor AS t1 JOIN film AS t2 ON t1.film_id = t2.film_id GROUP BY t2.film_id ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE staff (last_name TEXT, staff_id NUMBER); CREATE TABLE customer (customer_id NUMBER); CREATE TABLE language (language_id NUMBER); CREATE TABLE film_category (film_id NUMBER); CREATE TABLE payment (payment_date TIME, rental_id NUMBER); CREATE TABLE film_actor (actor_id NUMBER, film_id NUMBER); CREATE TABLE rental (rental_date TIME, rental_id NUMBER); CREATE TABLE film (description TEXT, release_year TIME, original_language_id NUMBER, replacement_cost NUMBER, film_id NUMBER, length NUMBER, rental_rate NUMBER, title TEXT, language_id NUMBER, rating TEXT, rental_duration NUMBER); CREATE TABLE actor (actor_id NUMBER, last_name TEXT, first_name TEXT); CREATE TABLE inventory (film_id NUMBER, inventory_id NUMBER); CREATE TABLE film_text (title TEXT, film_id NUMBER);"
      },
      {
        "question": "film description?",
        "query": "SELECT t2.description FROM film_actor AS t1 JOIN film AS t2 ON t1.film_id = t2.film_id GROUP BY t2.film_id ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE staff (last_name TEXT, staff_id NUMBER); CREATE TABLE film (film_id NUMBER, description TEXT, rating TEXT, language_id NUMBER, rental_rate NUMBER, title TEXT, original_language_id NUMBER, replacement_cost NUMBER, release_year TIME, length NUMBER, rental_duration NUMBER); CREATE TABLE actor (actor_id NUMBER, first_name TEXT, last_name TEXT); CREATE TABLE language (language_id NUMBER); CREATE TABLE payment (rental_id NUMBER, payment_date TIME); CREATE TABLE customer (customer_id NUMBER); CREATE TABLE film_text (film_id NUMBER, description TEXT, title TEXT); CREATE TABLE rental (rental_date TIME, rental_id NUMBER); CREATE TABLE film_category (film_id NUMBER); CREATE TABLE film_actor (film_id NUMBER, actor_id NUMBER); CREATE TABLE inventory (inventory_id NUMBER, film_id NUMBER);"
      }
    ],
    [
      {
        "question": "what is the city id   of alberta district?",
        "query": "SELECT DISTINCT city_id FROM address WHERE district = \"Alberta\"",
        "schema": "CREATE TABLE staff (address_id NUMBER); CREATE TABLE category (name TEXT, category_id NUMBER); CREATE TABLE city (city TEXT, city_id NUMBER); CREATE TABLE film_text (title TEXT); CREATE TABLE film (title TEXT); CREATE TABLE address (address_id NUMBER, address TEXT, city_id NUMBER, district TEXT);"
      },
      {
        "question": "ok good!.what is last update in qld district?",
        "query": "SELECT DISTINCT last_update FROM address WHERE district = \"QLD\"",
        "schema": "CREATE TABLE store (store_id NUMBER, last_update TIME, address_id NUMBER); CREATE TABLE inventory (last_update TIME, store_id NUMBER, film_id NUMBER, inventory_id NUMBER); CREATE TABLE actor (last_update TIME); CREATE TABLE payment (last_update TIME); CREATE TABLE film_text (title TEXT); CREATE TABLE film_category (category_id NUMBER); CREATE TABLE city (city TEXT, country_id NUMBER, city_id NUMBER, last_update TIME); CREATE TABLE country (country TEXT, country_id NUMBER, last_update TIME); CREATE TABLE film (last_update TIME, title TEXT); CREATE TABLE staff (address_id NUMBER); CREATE TABLE film_actor (last_update TIME); CREATE TABLE customer (last_update TIME); CREATE TABLE language (last_update TIME, language_id NUMBER); CREATE TABLE address (last_update TIME, city_id NUMBER, address2 TEXT, address TEXT, district TEXT, address_id NUMBER); CREATE TABLE rental (inventory_id NUMBER, last_update TIME); CREATE TABLE category (last_update TIME, category_id NUMBER, name TEXT);"
      },
      {
        "question": "what is address of qld district?",
        "query": "SELECT address FROM address WHERE district = \"QLD\"",
        "schema": "CREATE TABLE category (last_update TIME, name TEXT, category_id NUMBER); CREATE TABLE address (address_id NUMBER, city_id NUMBER, district TEXT, address TEXT, last_update TIME, address2 TEXT); CREATE TABLE city (country_id NUMBER, last_update TIME, city TEXT, city_id NUMBER); CREATE TABLE customer (last_update TIME); CREATE TABLE staff (address_id NUMBER); CREATE TABLE payment (last_update TIME); CREATE TABLE film_category (category_id NUMBER); CREATE TABLE language (language_id NUMBER, last_update TIME); CREATE TABLE film_text (title TEXT); CREATE TABLE store (store_id NUMBER, last_update TIME, address_id NUMBER); CREATE TABLE film_actor (last_update TIME); CREATE TABLE actor (last_update TIME); CREATE TABLE inventory (inventory_id NUMBER, last_update TIME, film_id NUMBER, store_id NUMBER); CREATE TABLE rental (last_update TIME, inventory_id NUMBER); CREATE TABLE country (country_id NUMBER, country TEXT, last_update TIME); CREATE TABLE film (last_update TIME, title TEXT);"
      }
    ],
    [
      {
        "question": "Hi there!  Whew!  That was a long wait to join the chat!  Can you please show me what the largest single payment amount is?",
        "query": "SELECT amount FROM payment ORDER BY amount DESC LIMIT 1",
        "schema": "CREATE TABLE staff (staff_id NUMBER); CREATE TABLE city (city_id NUMBER, city TEXT); CREATE TABLE customer (last_name TEXT, address_id NUMBER, customer_id NUMBER); CREATE TABLE address (city_id NUMBER, address_id NUMBER, address TEXT, district TEXT); CREATE TABLE film (rental_duration NUMBER, length NUMBER); CREATE TABLE payment (staff_id NUMBER, last_update TIME, amount NUMBER, payment_id NUMBER, customer_id NUMBER); CREATE TABLE actor (actor_id NUMBER, last_name TEXT);"
      },
      {
        "question": "Great!  Can you provide me with the associated customer ID and payment ID?",
        "query": "SELECT amount,payment_id,customer_id FROM payment ORDER BY amount DESC LIMIT 1",
        "schema": "CREATE TABLE customer (address_id NUMBER, last_name TEXT, first_name TEXT, customer_id NUMBER); CREATE TABLE payment (staff_id NUMBER, payment_id NUMBER, customer_id NUMBER, amount NUMBER, last_update TIME); CREATE TABLE film (rental_duration NUMBER, length NUMBER); CREATE TABLE address (city_id NUMBER, address_id NUMBER, address TEXT, district TEXT); CREATE TABLE staff (staff_id NUMBER); CREATE TABLE actor (actor_id NUMBER, last_name TEXT); CREATE TABLE rental (customer_id NUMBER); CREATE TABLE city (city_id NUMBER, city TEXT);"
      },
      {
        "question": "Perfect!  Could you tell me which payment ID over $5.00 has the most recent payment date?",
        "query": "SELECT payment_id FROM payment WHERE amount>5 ORDER BY last_update DESC LIMIT 1",
        "schema": "CREATE TABLE actor (actor_id NUMBER, last_name TEXT); CREATE TABLE staff (staff_id NUMBER); CREATE TABLE city (city_id NUMBER, city TEXT); CREATE TABLE rental (customer_id NUMBER); CREATE TABLE payment (payment_id NUMBER, last_update TIME, customer_id NUMBER, staff_id NUMBER, payment_date TIME, amount NUMBER); CREATE TABLE address (address TEXT, city_id NUMBER, district TEXT, address_id NUMBER); CREATE TABLE customer (create_date TIME, last_name TEXT, first_name TEXT, customer_id NUMBER, address_id NUMBER); CREATE TABLE film (rental_duration NUMBER, length NUMBER);"
      }
    ],
    [
      {
        "question": "Show me the name of the film with film id 1? | Do  you  mean  the title in the  table  file | yes",
        "query": "SELECT title FROM film WHERE film_id = 1",
        "schema": "CREATE TABLE film_text (title TEXT, film_id NUMBER); CREATE TABLE actor (actor_id NUMBER); CREATE TABLE film (rating TEXT, language_id NUMBER, description TEXT, film_id NUMBER, title TEXT); CREATE TABLE inventory (film_id NUMBER); CREATE TABLE film_actor (film_id NUMBER);"
      },
      {
        "question": "Show all the films longer than 100 minutes? | do  you  mean  the films id  ? | yes",
        "query": "SELECT film_id FROM film WHERE LENGTH > 100",
        "schema": "CREATE TABLE film (rating TEXT, language_id NUMBER, length NUMBER, title TEXT, film_id NUMBER, description TEXT); CREATE TABLE actor (actor_id NUMBER); CREATE TABLE film_text (film_id NUMBER, title TEXT); CREATE TABLE inventory (film_id NUMBER); CREATE TABLE film_actor (film_id NUMBER);"
      },
      {
        "question": "Show me the name of all the films with release year 2006?",
        "query": "SELECT title FROM film WHERE release_year = 2006",
        "schema": "CREATE TABLE film_actor (film_id NUMBER); CREATE TABLE film (length NUMBER, rental_duration NUMBER, language_id NUMBER, release_year TIME, rating TEXT, film_id NUMBER, description TEXT, title TEXT); CREATE TABLE inventory (film_id NUMBER); CREATE TABLE actor (actor_id NUMBER); CREATE TABLE film_text (film_id NUMBER, title TEXT);"
      },
      {
        "question": "Show the names of all films except those who cost more than 200 for replacement?",
        "query": "SELECT title FROM film EXCEPT SELECT title FROM film WHERE replacement_cost > 200",
        "schema": "CREATE TABLE inventory (film_id NUMBER); CREATE TABLE payment (rental_id NUMBER, amount NUMBER); CREATE TABLE actor (actor_id NUMBER); CREATE TABLE film (replacement_cost NUMBER, film_id NUMBER, description TEXT, title TEXT, length NUMBER, rental_duration NUMBER, language_id NUMBER, release_year TIME, rating TEXT); CREATE TABLE film_actor (film_id NUMBER); CREATE TABLE film_text (title TEXT, film_id NUMBER);"
      }
    ],
    [
      {
        "question": "what is the name of the actor that starred in most films?",
        "query": "SELECT t2.first_name , t2.last_name FROM film_actor AS t1 JOIN actor AS t2 ON t1.actor_id = t2.actor_id GROUP BY t2.actor_id ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE actor (first_name TEXT, actor_id NUMBER, last_name TEXT); CREATE TABLE film_text (film_id NUMBER); CREATE TABLE film_actor (actor_id NUMBER, film_id NUMBER); CREATE TABLE inventory (film_id NUMBER); CREATE TABLE film (film_id NUMBER);"
      },
      {
        "question": "what is  Gina Gegeneres's actor id?",
        "query": "SELECT actor_id FROM actor WHERE first_name = 'GINA' AND last_name = 'DEGENERES'",
        "schema": "CREATE TABLE film_actor (actor_id NUMBER, film_id NUMBER); CREATE TABLE inventory (film_id NUMBER); CREATE TABLE actor (last_name TEXT, actor_id NUMBER, first_name TEXT); CREATE TABLE staff (first_name TEXT); CREATE TABLE film (film_id NUMBER); CREATE TABLE film_text (film_id NUMBER);"
      },
      {
        "question": "when was Gina Gegeneres's last update?",
        "query": "SELECT last_update FROM actor WHERE first_name = 'GINA' AND last_name = 'DEGENERES'",
        "schema": "CREATE TABLE film (film_id NUMBER, last_update TIME); CREATE TABLE film_text (film_id NUMBER); CREATE TABLE film_actor (actor_id NUMBER, film_id NUMBER, last_update TIME); CREATE TABLE country (last_update TIME); CREATE TABLE inventory (film_id NUMBER); CREATE TABLE actor (last_update TIME, actor_id NUMBER, last_name TEXT, first_name TEXT); CREATE TABLE staff (first_name TEXT);"
      }
    ],
    [
      {
        "question": "What movies contain the words \"deleted scenes\" in the column Special Features?",
        "query": "SELECT * FROM film WHERE special_features LIKE '%Deleted Scenes%'",
        "schema": "CREATE TABLE film (rating TEXT, special_features TEXT, film_id NUMBER, description TEXT, length NUMBER, title TEXT); CREATE TABLE film_text (description TEXT, title TEXT, film_id NUMBER);"
      },
      {
        "question": "How many movies contain the words \"Deleted scenes\" in the Special Features column?",
        "query": "SELECT COUNT ( * ) FROM film WHERE special_features LIKE '%Deleted Scenes%'",
        "schema": "CREATE TABLE film_text (description TEXT, film_id NUMBER, title TEXT); CREATE TABLE film (description TEXT, title TEXT, rating TEXT, length NUMBER, special_features TEXT, film_id NUMBER);"
      },
      {
        "question": "What are their names?",
        "query": "SELECT title FROM film WHERE special_features LIKE '%Deleted Scenes%'",
        "schema": "CREATE TABLE actor (last_name TEXT, first_name TEXT); CREATE TABLE language (language_id NUMBER); CREATE TABLE staff (last_name TEXT); CREATE TABLE film (special_features TEXT, length NUMBER, rating TEXT, film_id NUMBER, description TEXT, title TEXT); CREATE TABLE film_text (title TEXT, description TEXT, film_id NUMBER);"
      }
    ],
    [
      {
        "question": "Hello!  Can you list the film ID of the film with the most copies in the inventory?",
        "query": "SELECT t1.film_id FROM film AS t1 JOIN inventory AS t2 ON t1.film_id = t2.film_id GROUP BY t1.film_id ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE inventory (inventory_id NUMBER, film_id NUMBER); CREATE TABLE film_actor (actor_id NUMBER, film_id NUMBER); CREATE TABLE customer (customer_id NUMBER); CREATE TABLE film (rating TEXT, original_language_id NUMBER, film_id NUMBER, title TEXT); CREATE TABLE film_text (film_id NUMBER, title TEXT); CREATE TABLE staff (staff_id NUMBER); CREATE TABLE rental (inventory_id NUMBER); CREATE TABLE actor (actor_id NUMBER);"
      },
      {
        "question": "Thank you!  Can you show include the flim's title to that list?",
        "query": "SELECT t1.title , t1.film_id FROM film AS t1 JOIN inventory AS t2 ON t1.film_id = t2.film_id GROUP BY t1.film_id ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE inventory (film_id NUMBER, inventory_id NUMBER); CREATE TABLE customer (customer_id NUMBER); CREATE TABLE film_text (title TEXT, film_id NUMBER); CREATE TABLE film_actor (actor_id NUMBER, film_id NUMBER); CREATE TABLE actor (actor_id NUMBER); CREATE TABLE rental (inventory_id NUMBER); CREATE TABLE film (film_id NUMBER, original_language_id NUMBER, title TEXT, rating TEXT); CREATE TABLE staff (staff_id NUMBER);"
      },
      {
        "question": "Great!  Can I see the description for that movie, in addition to its rating and special features?",
        "query": "SELECT t1.description, t1.rating,t1.special_features FROM film AS t1 JOIN inventory AS t2 ON t1.film_id = t2.film_id GROUP BY t1.film_id ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE inventory (inventory_id NUMBER, film_id NUMBER); CREATE TABLE staff (staff_id NUMBER); CREATE TABLE customer (customer_id NUMBER); CREATE TABLE film_actor (actor_id NUMBER, film_id NUMBER); CREATE TABLE rental (inventory_id NUMBER); CREATE TABLE film_text (description TEXT, title TEXT, film_id NUMBER); CREATE TABLE film (film_id NUMBER, original_language_id NUMBER, rating TEXT, description TEXT, special_features TEXT, title TEXT); CREATE TABLE actor (actor_id NUMBER);"
      }
    ],
    [
      {
        "question": "What are the districts of the addresses?",
        "query": "SELECT district FROM address",
        "schema": "CREATE TABLE city (city TEXT, city_id NUMBER); CREATE TABLE staff (address_id NUMBER); CREATE TABLE address (address_id NUMBER, district TEXT, city_id NUMBER, address TEXT, address2 TEXT);"
      },
      {
        "question": "How about the district which has at least two addresses?",
        "query": "SELECT district FROM address GROUP BY district HAVING COUNT ( * ) > = 2",
        "schema": "CREATE TABLE address (address TEXT, city_id NUMBER, address2 TEXT, address_id NUMBER, district TEXT); CREATE TABLE staff (address_id NUMBER); CREATE TABLE city (city TEXT, city_id NUMBER);"
      }
    ],
    [
      {
        "question": "Can you show me the first names of customers who have a rental date on or before 2005-08-23?",
        "query": "SELECT first_name FROM customer WHERE customer_id IN ( SELECT customer_id FROM rental WHERE rental_date < = '2005-08-23 00:00:00' )",
        "schema": "CREATE TABLE rental (customer_id NUMBER, return_date TIME, rental_id NUMBER, rental_date TIME); CREATE TABLE customer (last_name TEXT, customer_id NUMBER, create_date TIME, first_name TEXT); CREATE TABLE staff (username TEXT, first_name TEXT); CREATE TABLE payment (customer_id NUMBER); CREATE TABLE actor (first_name TEXT, last_name TEXT);"
      },
      {
        "question": "Hmm, I want to know the customer ids who have not rented any films after '2005-08-23 02:06:01' please.",
        "query": "SELECT customer_id FROM customer WHERE customer_id NOT IN ( SELECT customer_id FROM rental WHERE rental_date > '2005-08-23 02:06:01' )",
        "schema": "CREATE TABLE staff (username TEXT, first_name TEXT); CREATE TABLE payment (customer_id NUMBER); CREATE TABLE customer (customer_id NUMBER, first_name TEXT, create_date TIME, last_name TEXT); CREATE TABLE actor (first_name TEXT, last_name TEXT); CREATE TABLE film (rental_duration NUMBER); CREATE TABLE rental (customer_id NUMBER, rental_id NUMBER, rental_date TIME, return_date TIME);"
      },
      {
        "question": "Can you just show me the first names of those customers?",
        "query": "SELECT first_name FROM customer WHERE customer_id NOT IN ( SELECT customer_id FROM rental WHERE rental_date > '2005-08-23 02:06:01' )",
        "schema": "CREATE TABLE customer (customer_id NUMBER, first_name TEXT, create_date TIME, last_name TEXT); CREATE TABLE actor (last_name TEXT, first_name TEXT); CREATE TABLE rental (rental_date TIME, return_date TIME, rental_id NUMBER, customer_id NUMBER); CREATE TABLE staff (username TEXT, first_name TEXT); CREATE TABLE payment (customer_id NUMBER); CREATE TABLE film (rental_duration NUMBER);"
      }
    ],
    [
      {
        "question": "How many stores are there?",
        "query": "SELECT COUNT ( DISTINCT store_id ) FROM inventory",
        "schema": "CREATE TABLE inventory (film_id NUMBER, store_id NUMBER, inventory_id NUMBER); CREATE TABLE customer (store_id NUMBER); CREATE TABLE staff (staff_id NUMBER, store_id NUMBER); CREATE TABLE actor (actor_id NUMBER, last_name TEXT); CREATE TABLE rental (inventory_id NUMBER); CREATE TABLE store (address_id NUMBER, store_id NUMBER, manager_staff_id NUMBER); CREATE TABLE address (address_id NUMBER);"
      },
      {
        "question": "Which store owns the fewest items?",
        "query": "SELECT * FROM inventory GROUP BY store_id ORDER BY COUNT ( * ) ASC LIMIT 1",
        "schema": "CREATE TABLE rental (inventory_id NUMBER); CREATE TABLE address (address_id NUMBER); CREATE TABLE store (store_id NUMBER, manager_staff_id NUMBER, address_id NUMBER); CREATE TABLE inventory (inventory_id NUMBER, film_id NUMBER, store_id NUMBER); CREATE TABLE actor (last_name TEXT, actor_id NUMBER); CREATE TABLE customer (store_id NUMBER); CREATE TABLE staff (staff_id NUMBER, store_id NUMBER);"
      },
      {
        "question": "And which stores owns the most items?",
        "query": "SELECT * FROM inventory GROUP BY store_id ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE store (address_id NUMBER, store_id NUMBER, manager_staff_id NUMBER); CREATE TABLE address (address_id NUMBER); CREATE TABLE inventory (film_id NUMBER, store_id NUMBER, inventory_id NUMBER); CREATE TABLE rental (inventory_id NUMBER); CREATE TABLE staff (store_id NUMBER, staff_id NUMBER); CREATE TABLE actor (last_name TEXT, actor_id NUMBER); CREATE TABLE customer (store_id NUMBER);"
      }
    ],
    [
      {
        "question": "What name is popular for actors? | did you mean the most popular? | yes",
        "query": "SELECT first_name , last_name FROM actor GROUP BY first_name , last_name ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE category (name TEXT, category_id NUMBER); CREATE TABLE actor (actor_id NUMBER, last_name TEXT, first_name TEXT); CREATE TABLE film_actor (actor_id NUMBER, film_id NUMBER); CREATE TABLE film (film_id NUMBER, title TEXT);"
      }
    ],
    [
      {
        "question": "Can i have the list of the names of film that was rented",
        "query": "SELECT t1.title FROM film AS t1 JOIN inventory AS t2 ON t1.film_id = t2.film_id JOIN rental AS t3 ON t2.inventory_id = t3.inventory_id GROUP BY t2.inventory_id",
        "schema": "CREATE TABLE film_category (film_id NUMBER, category_id NUMBER); CREATE TABLE category (category_id NUMBER, name TEXT); CREATE TABLE payment (rental_id NUMBER); CREATE TABLE rental (inventory_id NUMBER, customer_id NUMBER, rental_id NUMBER); CREATE TABLE actor (actor_id NUMBER); CREATE TABLE film (title TEXT, film_id NUMBER, rental_rate NUMBER, rating TEXT, description TEXT, length NUMBER, original_language_id NUMBER, rental_duration NUMBER); CREATE TABLE film_text (film_id NUMBER, title TEXT); CREATE TABLE film_actor (film_id NUMBER); CREATE TABLE customer (customer_id NUMBER); CREATE TABLE language (language_id NUMBER); CREATE TABLE inventory (inventory_id NUMBER, store_id NUMBER, film_id NUMBER);"
      },
      {
        "question": "Give me the inventory id and title of the film that was most frequently rented",
        "query": "SELECT t1.title , t2.inventory_id FROM film AS t1 JOIN inventory AS t2 ON t1.film_id = t2.film_id JOIN rental AS t3 ON t2.inventory_id = t3.inventory_id GROUP BY t2.inventory_id ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE payment (rental_id NUMBER); CREATE TABLE language (language_id NUMBER); CREATE TABLE category (category_id NUMBER, name TEXT); CREATE TABLE film_actor (film_id NUMBER); CREATE TABLE rental (inventory_id NUMBER, rental_id NUMBER, customer_id NUMBER); CREATE TABLE film_category (category_id NUMBER, film_id NUMBER); CREATE TABLE film (original_language_id NUMBER, title TEXT, description TEXT, film_id NUMBER, rating TEXT, length NUMBER, rental_duration NUMBER, rental_rate NUMBER); CREATE TABLE inventory (inventory_id NUMBER, store_id NUMBER, film_id NUMBER); CREATE TABLE actor (actor_id NUMBER); CREATE TABLE film_text (title TEXT, film_id NUMBER); CREATE TABLE customer (customer_id NUMBER);"
      },
      {
        "question": "what are the special features of ACADEMY DINOSAUR",
        "query": "SELECT special_features FROM film WHERE title = \"ACADEMY DINOSAUR\"",
        "schema": "CREATE TABLE language (language_id NUMBER); CREATE TABLE actor (actor_id NUMBER); CREATE TABLE customer (customer_id NUMBER); CREATE TABLE film_text (description TEXT, film_id NUMBER, title TEXT); CREATE TABLE film (length NUMBER, rental_rate NUMBER, special_features TEXT, title TEXT, rating TEXT, description TEXT, original_language_id NUMBER, film_id NUMBER, rental_duration NUMBER); CREATE TABLE rental (rental_id NUMBER, inventory_id NUMBER, customer_id NUMBER); CREATE TABLE payment (rental_id NUMBER); CREATE TABLE category (category_id NUMBER, name TEXT); CREATE TABLE film_category (category_id NUMBER, film_id NUMBER); CREATE TABLE inventory (inventory_id NUMBER, store_id NUMBER, film_id NUMBER); CREATE TABLE film_actor (film_id NUMBER);"
      }
    ],
    [
      {
        "question": "How many countries have more than 1 city?",
        "query": "SELECT COUNT ( * ) FROM ( SELECT * FROM city AS t1 JOIN country AS t2 ON t1.country_id = t2.country_id GROUP BY t2.country_id HAVING COUNT ( * ) > 1 )",
        "schema": "CREATE TABLE address (address_id NUMBER, city_id NUMBER); CREATE TABLE country (country_id NUMBER, country TEXT, last_update TIME); CREATE TABLE city (country_id NUMBER, city TEXT, city_id NUMBER); CREATE TABLE language (name TEXT, language_id NUMBER); CREATE TABLE film (language_id NUMBER);"
      },
      {
        "question": "How many countries have at least 3 cities?",
        "query": "SELECT COUNT ( * ) FROM ( SELECT * FROM city AS t1 JOIN country AS t2 ON t1.country_id = t2.country_id GROUP BY t2.country_id HAVING COUNT ( * ) > = 3 )",
        "schema": "CREATE TABLE film (language_id NUMBER); CREATE TABLE city (city TEXT, country_id NUMBER, city_id NUMBER); CREATE TABLE address (address_id NUMBER, city_id NUMBER); CREATE TABLE language (name TEXT, language_id NUMBER); CREATE TABLE country (country TEXT, country_id NUMBER, last_update TIME);"
      },
      {
        "question": "Show these countries",
        "query": "SELECT t2.country FROM city AS t1 JOIN country AS t2 ON t1.country_id = t2.country_id GROUP BY t2.country_id HAVING COUNT ( * ) > = 3",
        "schema": "CREATE TABLE country (country_id NUMBER, country TEXT, last_update TIME); CREATE TABLE language (name TEXT, language_id NUMBER); CREATE TABLE address (address_id NUMBER, city_id NUMBER); CREATE TABLE film (language_id NUMBER); CREATE TABLE city (country_id NUMBER, city TEXT, city_id NUMBER);"
      }
    ],
    [
      {
        "question": "What is the name of the city with the most addresses?",
        "query": "SELECT t2.city FROM address AS t1 JOIN city AS t2 ON t1.city_id = t2.city_id GROUP BY t1.city_id ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE city (city_id NUMBER, city TEXT); CREATE TABLE category (name TEXT); CREATE TABLE language (name TEXT); CREATE TABLE address (address TEXT, city_id NUMBER, address_id NUMBER, district TEXT, address2 TEXT);"
      },
      {
        "question": "How many addresses does it have?",
        "query": "SELECT COUNT ( * ) FROM address AS t1 JOIN city AS t2 ON t1.city_id = t2.city_id GROUP BY t1.city_id ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE address (district TEXT, city_id NUMBER, address_id NUMBER, address2 TEXT, address TEXT); CREATE TABLE city (city_id NUMBER, city TEXT); CREATE TABLE category (name TEXT); CREATE TABLE language (name TEXT);"
      },
      {
        "question": "What is its city id?",
        "query": "SELECT t2.city_id FROM address AS t1 JOIN city AS t2 ON t1.city_id = t2.city_id GROUP BY t1.city_id ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE city (city TEXT, city_id NUMBER); CREATE TABLE address (address2 TEXT, address TEXT, city_id NUMBER, address_id NUMBER, district TEXT); CREATE TABLE language (name TEXT); CREATE TABLE category (name TEXT);"
      },
      {
        "question": "Can you list the all addresses that have the letter S in them?",
        "query": "SELECT address FROM address WHERE address LIKE \"%S%\"",
        "schema": "CREATE TABLE address (address TEXT, address_id NUMBER, address2 TEXT, city_id NUMBER, district TEXT); CREATE TABLE category (name TEXT); CREATE TABLE language (name TEXT); CREATE TABLE city (city TEXT, city_id NUMBER);"
      }
    ],
    [
      {
        "question": "What is the genre name of the film HUNGER ROOF, please?",
        "query": "SELECT t1.name FROM category AS t1 JOIN film_category AS t2 ON t1.category_id = t2.category_id JOIN film AS t3 ON t2.film_id = t3.film_id WHERE t3.title = 'HUNGER ROOF'",
        "schema": "CREATE TABLE store (address_id NUMBER); CREATE TABLE film_text (title TEXT, description TEXT, film_id NUMBER); CREATE TABLE category (name TEXT, category_id NUMBER); CREATE TABLE film (title TEXT, description TEXT, original_language_id NUMBER, rating TEXT, film_id NUMBER); CREATE TABLE language (name TEXT, language_id NUMBER); CREATE TABLE film_category (category_id NUMBER, film_id NUMBER);"
      },
      {
        "question": "How many other films have that same genre name?",
        "query": "SELECT COUNT ( * ) FROM category AS t1 JOIN film_category AS t2 ON t1.category_id = t2.category_id JOIN film AS t3 ON t2.film_id = t3.film_id WHERE t1.name = \"Foreign\"",
        "schema": "CREATE TABLE store (address_id NUMBER); CREATE TABLE category (name TEXT, category_id NUMBER); CREATE TABLE film_category (category_id NUMBER, film_id NUMBER); CREATE TABLE language (language_id NUMBER, name TEXT); CREATE TABLE film (rating TEXT, film_id NUMBER, title TEXT, description TEXT, original_language_id NUMBER); CREATE TABLE film_text (title TEXT, film_id NUMBER, description TEXT);"
      },
      {
        "question": "Of those films, which ones have the special features Deleted Scenes?",
        "query": "SELECT COUNT ( * ) FROM category AS t1 JOIN film_category AS t2 ON t1.category_id = t2.category_id JOIN film AS t3 ON t2.film_id = t3.film_id WHERE t1.name = \"Foreign\" AND t3.special_features = \"Deleted Scenes\"",
        "schema": "CREATE TABLE store (address_id NUMBER); CREATE TABLE country (country TEXT); CREATE TABLE film (rating TEXT, film_id NUMBER, original_language_id NUMBER, title TEXT, language_id NUMBER, special_features TEXT, description TEXT); CREATE TABLE category (name TEXT, category_id NUMBER); CREATE TABLE language (name TEXT, language_id NUMBER); CREATE TABLE film_category (film_id NUMBER, category_id NUMBER); CREATE TABLE film_text (title TEXT, description TEXT, film_id NUMBER);"
      },
      {
        "question": "What about the special features Trailers?",
        "query": "SELECT COUNT ( * ) FROM category AS t1 JOIN film_category AS t2 ON t1.category_id = t2.category_id JOIN film AS t3 ON t2.film_id = t3.film_id WHERE t1.name = \"Foreign\" AND t3.special_features = \"Trailers\"",
        "schema": "CREATE TABLE film (rating TEXT, description TEXT, special_features TEXT, language_id NUMBER, original_language_id NUMBER, title TEXT, film_id NUMBER); CREATE TABLE country (country TEXT); CREATE TABLE category (name TEXT, category_id NUMBER); CREATE TABLE store (address_id NUMBER); CREATE TABLE film_text (film_id NUMBER, description TEXT, title TEXT); CREATE TABLE language (language_id NUMBER, name TEXT); CREATE TABLE film_category (film_id NUMBER, category_id NUMBER);"
      },
      {
        "question": "What about films of the genre Action?",
        "query": "SELECT COUNT ( * ) FROM category AS t1 JOIN film_category AS t2 ON t1.category_id = t2.category_id JOIN film AS t3 ON t2.film_id = t3.film_id WHERE t1.name = \"Foreign\" AND t3.special_features = \"Action\"",
        "schema": "CREATE TABLE store (address_id NUMBER); CREATE TABLE film_category (category_id NUMBER, film_id NUMBER); CREATE TABLE category (category_id NUMBER, name TEXT); CREATE TABLE country (country TEXT); CREATE TABLE language (name TEXT, language_id NUMBER); CREATE TABLE film (original_language_id NUMBER, special_features TEXT, rating TEXT, language_id NUMBER, description TEXT, film_id NUMBER, title TEXT); CREATE TABLE film_text (film_id NUMBER, title TEXT, description TEXT);"
      }
    ],
    [
      {
        "question": "Show me all the films which listed in the table? | There are the titles of all the films. | Show me all films longer than 100 minutes?",
        "query": "SELECT title FROM film WHERE LENGTH > 100",
        "schema": "CREATE TABLE film_text (title TEXT, film_id NUMBER); CREATE TABLE film (film_id NUMBER, rental_duration NUMBER, title TEXT, length NUMBER, rating TEXT);"
      },
      {
        "question": "Show me all the films not longer than 100 minutes?",
        "query": "SELECT title FROM film WHERE LENGTH < = 100",
        "schema": "CREATE TABLE film (rental_duration NUMBER, length NUMBER, film_id NUMBER, rating TEXT, title TEXT); CREATE TABLE film_text (film_id NUMBER, title TEXT);"
      },
      {
        "question": "Find all the films rated PG, except those who cost more than 200 for replacement?",
        "query": "SELECT title FROM film WHERE rating = 'PG' EXCEPT SELECT title FROM film WHERE replacement_cost > 200",
        "schema": "CREATE TABLE film (rental_rate NUMBER, title TEXT, rental_duration NUMBER, rating TEXT, film_id NUMBER, replacement_cost NUMBER, length NUMBER); CREATE TABLE film_text (title TEXT, film_id NUMBER); CREATE TABLE rental (rental_id NUMBER); CREATE TABLE payment (payment_id NUMBER, amount NUMBER, rental_id NUMBER);"
      }
    ],
    [
      {
        "question": "What is the largest payment amount?",
        "query": "SELECT amount FROM payment ORDER BY amount DESC LIMIT 1",
        "schema": "CREATE TABLE customer (customer_id NUMBER); CREATE TABLE payment (rental_id NUMBER, customer_id NUMBER, payment_id NUMBER, amount NUMBER, staff_id NUMBER); CREATE TABLE staff (staff_id NUMBER); CREATE TABLE actor (actor_id NUMBER);"
      },
      {
        "question": "OK, what is the average of all payment amounts?",
        "query": "SELECT AVG ( amount ) FROM payment",
        "schema": "CREATE TABLE payment (payment_id NUMBER, rental_id NUMBER, amount NUMBER, customer_id NUMBER, staff_id NUMBER); CREATE TABLE staff (staff_id NUMBER); CREATE TABLE customer (customer_id NUMBER); CREATE TABLE actor (actor_id NUMBER);"
      }
    ],
    [
      {
        "question": "what film has rental fee of 0.99?",
        "query": "SELECT title FROM film WHERE rental_rate = 0.99",
        "schema": "CREATE TABLE film (rating TEXT, film_id NUMBER, rental_duration NUMBER, title TEXT, replacement_cost NUMBER, rental_rate NUMBER); CREATE TABLE rental (rental_id NUMBER); CREATE TABLE payment (rental_id NUMBER, amount NUMBER); CREATE TABLE film_text (film_id NUMBER, title TEXT); CREATE TABLE inventory (film_id NUMBER);"
      },
      {
        "question": "Which of the film has the highest rent fee?",
        "query": "SELECT title FROM film ORDER BY rental_rate DESC LIMIT 1",
        "schema": "CREATE TABLE film_text (title TEXT, film_id NUMBER); CREATE TABLE inventory (film_id NUMBER); CREATE TABLE rental (rental_id NUMBER); CREATE TABLE film (rating TEXT, title TEXT, film_id NUMBER, rental_rate NUMBER, replacement_cost NUMBER, rental_duration NUMBER); CREATE TABLE payment (amount NUMBER, rental_id NUMBER);"
      },
      {
        "question": "list the films with less than three in inventory",
        "query": "SELECT title FROM film INTERSECT SELECT t1.title FROM film AS t1 JOIN inventory AS t2 ON t1.film_id = t2.film_id GROUP BY t1.film_id HAVING COUNT ( * ) < 3",
        "schema": "CREATE TABLE inventory (film_id NUMBER, inventory_id NUMBER); CREATE TABLE film (length NUMBER, rental_duration NUMBER, film_id NUMBER, rental_rate NUMBER, replacement_cost NUMBER, title TEXT, rating TEXT); CREATE TABLE payment (amount NUMBER, rental_id NUMBER); CREATE TABLE rental (rental_id NUMBER, inventory_id NUMBER); CREATE TABLE film_text (film_id NUMBER, title TEXT);"
      }
    ],
    [
      {
        "question": "How many customers are there?",
        "query": "SELECT COUNT ( * ) FROM customer",
        "schema": "CREATE TABLE rental (customer_id NUMBER); CREATE TABLE payment (customer_id NUMBER); CREATE TABLE customer (last_name TEXT, customer_id NUMBER, store_id NUMBER, address_id NUMBER, first_name TEXT, active BOOLEAN);"
      },
      {
        "question": "How many are there that has made at least one payment?",
        "query": "SELECT COUNT ( * ) FROM ( SELECT * FROM customer AS t1 JOIN payment AS t2 ON t1.customer_id = t2.customer_id GROUP BY t1.customer_id )",
        "schema": "CREATE TABLE rental (customer_id NUMBER); CREATE TABLE actor (actor_id NUMBER); CREATE TABLE customer (last_name TEXT, active BOOLEAN, customer_id NUMBER, address_id NUMBER, first_name TEXT, store_id NUMBER); CREATE TABLE payment (payment_id NUMBER, customer_id NUMBER, amount NUMBER);"
      },
      {
        "question": "Out of those customers, who has spent the least amount of money? | Do you want the first and last names and id of the customer who has spent the least amount of money? | Yes please",
        "query": "SELECT t1.first_name , t1.last_name , t1.customer_id FROM customer AS t1 JOIN payment AS t2 ON t1.customer_id = t2.customer_id GROUP BY t1.customer_id ORDER BY SUM ( amount ) ASC LIMIT 1",
        "schema": "CREATE TABLE payment (customer_id NUMBER, payment_id NUMBER, amount NUMBER); CREATE TABLE customer (address_id NUMBER, first_name TEXT, last_name TEXT, store_id NUMBER, customer_id NUMBER, active BOOLEAN); CREATE TABLE rental (customer_id NUMBER); CREATE TABLE actor (actor_id NUMBER);"
      },
      {
        "question": "How much money did that customer spend?",
        "query": "SELECT SUM ( amount ) FROM customer AS t1 JOIN payment AS t2 ON t1.customer_id = t2.customer_id GROUP BY t1.customer_id ORDER BY SUM ( amount ) ASC LIMIT 1",
        "schema": "CREATE TABLE actor (actor_id NUMBER); CREATE TABLE payment (customer_id NUMBER, payment_id NUMBER, amount NUMBER); CREATE TABLE customer (active BOOLEAN, address_id NUMBER, last_name TEXT, store_id NUMBER, customer_id NUMBER, first_name TEXT); CREATE TABLE rental (customer_id NUMBER);"
      }
    ]
  ],
  "mountain_photos": [
    [
      {
        "question": "How many different lens are there? | Did  you  mean  the  different  brand of lens are there | No, I meant the total number of lenses",
        "query": "SELECT COUNT ( * ) FROM camera_lens",
        "schema": "CREATE TABLE photos (camera_lens_id NUMBER); CREATE TABLE camera_lens (brand TEXT, id NUMBER, name TEXT);"
      },
      {
        "question": "Can you please list the ones that contain substring \"Digital\" in their names? | The names of the camera lens that contain substring \"Digital\" in their names are Olympus M.Zuiko Digital ED 45mm f/1.8,\nOlympus M.Zuiko Digital ED 75mm f/1.8 | Can you please also include their id?",
        "query": "SELECT name ,id FROM camera_lens WHERE name LIKE \"%Digital%\"",
        "schema": "CREATE TABLE photos (camera_lens_id NUMBER); CREATE TABLE camera_lens (brand TEXT, name TEXT, id NUMBER);"
      }
    ],
    [
      {
        "question": "what is the brand name of id  2 ? | Did you mean the brand or name of the camera lens with ID 2? | yes",
        "query": "SELECT brand FROM camera_lens WHERE id = 2",
        "schema": "CREATE TABLE photos (camera_lens_id NUMBER); CREATE TABLE camera_lens (id NUMBER, brand TEXT, name TEXT);"
      },
      {
        "question": "what is color of mountain id no. 20 ?",
        "query": "SELECT DISTINCT ( color ) FROM photos WHERE mountain_id = 20",
        "schema": "CREATE TABLE mountain (id NUMBER, name TEXT); CREATE TABLE photos (camera_lens_id NUMBER, color TEXT, mountain_id NUMBER); CREATE TABLE camera_lens (name TEXT, id NUMBER, brand TEXT);"
      },
      {
        "question": "what is focus  length of id 3?",
        "query": "SELECT focal_length_mm FROM camera_lens WHERE id = 3",
        "schema": "CREATE TABLE camera_lens (brand TEXT, name TEXT, id NUMBER, focal_length_mm NUMBER); CREATE TABLE photos (color TEXT, mountain_id NUMBER, camera_lens_id NUMBER, name TEXT, id NUMBER); CREATE TABLE mountain (id NUMBER, Prominence NUMBER, name TEXT);"
      },
      {
        "question": "what is the name of the camera lens in the mountains id 2?",
        "query": "SELECT t2.name FROM photos AS t1 JOIN camera_lens AS t2 ON t1.camera_lens_id = t2.id WHERE t1.mountain_id = 2",
        "schema": "CREATE TABLE mountain (name TEXT, Prominence NUMBER, id NUMBER, Range TEXT); CREATE TABLE camera_lens (id NUMBER, name TEXT, focal_length_mm NUMBER, brand TEXT); CREATE TABLE photos (camera_lens_id NUMBER, color TEXT, mountain_id NUMBER, id NUMBER, name TEXT);"
      }
    ],
    [
      {
        "question": "How many distinct kinds of camera lenses are used to take photos of mountain ranges in the country \"Ethiopia\"?",
        "query": "SELECT COUNT ( DISTINCT t2.camera_lens_id ) FROM mountain AS t1 JOIN photos AS t2 ON t1.id = t2.mountain_id WHERE t1.country = 'Ethiopia'",
        "schema": "CREATE TABLE photos (name TEXT, camera_lens_id NUMBER, mountain_id NUMBER, id NUMBER); CREATE TABLE mountain (Range TEXT, Country TEXT, id NUMBER); CREATE TABLE camera_lens (id NUMBER, name TEXT);"
      },
      {
        "question": "What about in other countries?",
        "query": "SELECT COUNT ( DISTINCT t2.camera_lens_id ) FROM mountain AS t1 JOIN photos AS t2 ON t1.id = t2.mountain_id WHERE t1.country ! = 'Ethiopia'",
        "schema": "CREATE TABLE mountain (Country TEXT, Range TEXT, id NUMBER); CREATE TABLE photos (camera_lens_id NUMBER, mountain_id NUMBER, name TEXT, id NUMBER); CREATE TABLE camera_lens (name TEXT, id NUMBER);"
      },
      {
        "question": "What are the names of the photographers who used those lenses?",
        "query": "SELECT t1.name FROM mountain AS t1 JOIN photos AS t2 ON t1.id = t2.mountain_id WHERE t1.country ! = 'Ethiopia'",
        "schema": "CREATE TABLE mountain (Country TEXT, name TEXT, id NUMBER, Range TEXT); CREATE TABLE camera_lens (name TEXT, id NUMBER); CREATE TABLE photos (id NUMBER, name TEXT, camera_lens_id NUMBER, mountain_id NUMBER);"
      }
    ],
    [
      {
        "question": "How many photos use Olympus camera lenses?",
        "query": "SELECT COUNT ( * ) FROM photos AS t1 JOIN camera_lens AS t2 ON t1.camera_lens_id = t2.id WHERE t2.brand = 'Olympus'",
        "schema": "CREATE TABLE photos (camera_lens_id NUMBER, id NUMBER); CREATE TABLE camera_lens (id NUMBER, brand TEXT, name TEXT);"
      },
      {
        "question": "What are their names? | Do you mean  the photos name | Yes",
        "query": "SELECT t1.name FROM photos AS t1 JOIN camera_lens AS t2 ON t1.camera_lens_id = t2.id GROUP BY t1.name HAVING t2.brand = 'Olympus'",
        "schema": "CREATE TABLE camera_lens (brand TEXT, id NUMBER, name TEXT); CREATE TABLE photos (name TEXT, camera_lens_id NUMBER, id NUMBER);"
      },
      {
        "question": "What are the names of the photos that use a Sigma lens?",
        "query": "SELECT t2.name FROM camera_lens AS t1 JOIN photos AS t2 ON t2.camera_lens_id = t1.id WHERE t1.brand = 'Sigma'",
        "schema": "CREATE TABLE photos (id NUMBER, camera_lens_id NUMBER, name TEXT); CREATE TABLE camera_lens (id NUMBER, brand TEXT, name TEXT);"
      },
      {
        "question": "How many photos use a Sigma lens?",
        "query": "SELECT COUNT ( * ) FROM photos AS t1 JOIN camera_lens AS t2 ON t1.camera_lens_id = t2.id WHERE t2.brand = 'Sigma'",
        "schema": "CREATE TABLE camera_lens (name TEXT, brand TEXT, id NUMBER); CREATE TABLE photos (name TEXT, id NUMBER, camera_lens_id NUMBER);"
      },
      {
        "question": "What are their photo names?",
        "query": "SELECT t1.name FROM photos AS t1 JOIN camera_lens AS t2 ON t1.camera_lens_id = t2.id WHERE t2.brand = 'Sigma'",
        "schema": "CREATE TABLE camera_lens (name TEXT, id NUMBER, brand TEXT); CREATE TABLE photos (name TEXT, camera_lens_id NUMBER, id NUMBER);"
      }
    ],
    [
      {
        "question": "Can you list the name of each camera lens and the number of photos taken by it?",
        "query": "SELECT t1.name , COUNT ( * ) FROM camera_lens AS t1 JOIN photos AS t2 ON t1.id = t2.camera_lens_id GROUP BY t1.id",
        "schema": "CREATE TABLE camera_lens (id NUMBER, name TEXT); CREATE TABLE photos (name TEXT, id NUMBER, camera_lens_id NUMBER);"
      },
      {
        "question": "Can you order the table by the count of photos in ascending order?",
        "query": "SELECT t1.name , COUNT ( * ) FROM camera_lens AS t1 JOIN photos AS t2 ON t1.id = t2.camera_lens_id GROUP BY t1.id ORDER BY COUNT ( * )",
        "schema": "CREATE TABLE photos (camera_lens_id NUMBER, name TEXT, id NUMBER); CREATE TABLE camera_lens (name TEXT, id NUMBER);"
      },
      {
        "question": "What are the names of all photos taken by Olympus brand cameras?",
        "query": "SELECT t2.name FROM camera_lens AS t1 JOIN photos AS t2 ON t1.id = t2.camera_lens_id WHERE t1.brand = \"Olympus\"",
        "schema": "CREATE TABLE camera_lens (brand TEXT, name TEXT, id NUMBER); CREATE TABLE photos (camera_lens_id NUMBER, id NUMBER, name TEXT);"
      }
    ],
    [
      {
        "question": "How many camera lenses are not used in taking any photos?",
        "query": "SELECT COUNT ( * ) FROM camera_lens WHERE id NOT IN ( SELECT camera_lens_id FROM photos )",
        "schema": "CREATE TABLE camera_lens (id NUMBER, name TEXT); CREATE TABLE photos (camera_lens_id NUMBER, id NUMBER);"
      },
      {
        "question": "What lenses are those? | Which kind of information do you want about those lenses? | What is the name of the lenses not used for taking photos?",
        "query": "SELECT name FROM camera_lens WHERE id NOT IN ( SELECT camera_lens_id FROM photos )",
        "schema": "CREATE TABLE camera_lens (name TEXT, id NUMBER); CREATE TABLE photos (name TEXT, id NUMBER, camera_lens_id NUMBER);"
      },
      {
        "question": "What is the max aperture for the Olympus M.Zuiko Digital ED 45mm f/1.8?",
        "query": "SELECT max_aperture FROM camera_lens WHERE name = \"Olympus M.Zuiko Digital ED 45mm f/1.8\"",
        "schema": "CREATE TABLE camera_lens (max_aperture NUMBER, name TEXT, id NUMBER); CREATE TABLE photos (id NUMBER, camera_lens_id NUMBER, name TEXT);"
      }
    ]
  ],
  "architecture": [
    [
      {
        "question": "What is the location of the bridge named 'Kolob Arch' or 'Rainbow Bridge'?",
        "query": "SELECT LOCATION FROM bridge WHERE name = 'Kolob Arch' OR name = 'Rainbow Bridge'",
        "schema": "CREATE TABLE bridge (name TEXT, id NUMBER, location TEXT); CREATE TABLE mill (location TEXT);"
      },
      {
        "question": "What is the length of the Kolob Arch",
        "query": "SELECT length_meters FROM bridge WHERE name = 'Kolob Arch'",
        "schema": "CREATE TABLE bridge (location TEXT, length_feet NUMBER, name TEXT, id NUMBER, length_meters NUMBER); CREATE TABLE mill (location TEXT);"
      },
      {
        "question": "What bridge is the longest bridge measured in feet? | Do you want the name of the longest bridge measured in feet? | Yes",
        "query": "SELECT name FROM bridge WHERE length_feet = ( SELECT MAX ( length_feet ) FROM bridge )",
        "schema": "CREATE TABLE bridge (length_feet NUMBER, length_meters NUMBER, location TEXT, id NUMBER, name TEXT); CREATE TABLE mill (location TEXT);"
      },
      {
        "question": "Where is the Xian ren Qiao (fairy bridge) located?",
        "query": "SELECT LOCATION FROM bridge WHERE name = \"Xian Ren Qiao ( Fairy Bridge ) \"",
        "schema": "CREATE TABLE mill (location TEXT); CREATE TABLE bridge (length_meters NUMBER, name TEXT, id NUMBER, location TEXT, length_feet NUMBER);"
      }
    ],
    [
      {
        "question": "Can you please show me the names of all male architects by their names lexicographically?",
        "query": "SELECT name FROM architect WHERE gender = 'male' ORDER BY name",
        "schema": "CREATE TABLE architect (name TEXT, gender TEXT, id TEXT);"
      },
      {
        "question": "Can you please show me all female architects by their names lexicographically?",
        "query": "SELECT name FROM architect WHERE gender = 'male' ORDER BY name",
        "schema": "CREATE TABLE architect (id TEXT, name TEXT, gender TEXT);"
      },
      {
        "question": "can you please show me all the female architects?",
        "query": "SELECT name FROM architect WHERE gender = 'male'",
        "schema": "CREATE TABLE architect (gender TEXT, id TEXT, name TEXT);"
      },
      {
        "question": "List the name, nationality and id of all male architects ordered by their names lexicographically?",
        "query": "SELECT name , nationality , id FROM architect WHERE gender = 'male' ORDER BY name",
        "schema": "CREATE TABLE architect (gender TEXT, nationality TEXT, name TEXT, id TEXT);"
      }
    ],
    [
      {
        "question": "Can I please have a list of architects who have built at least two bridges, or at least one mill? | What attributes of the architects do you want? | Can you please tell me the names and the ids of the architects who have built two bridges?",
        "query": "SELECT t1.id , t1.name FROM architect AS t1 JOIN bridge AS t2 ON t1.id = t2.architect_id GROUP BY t1.id HAVING COUNT ( * ) = 2",
        "schema": "CREATE TABLE mill (architect_id NUMBER); CREATE TABLE bridge (architect_id NUMBER, id NUMBER); CREATE TABLE architect (name TEXT, id TEXT);"
      },
      {
        "question": "Great. Would you please list the ids, names and genders of architects have built one mill?",
        "query": "SELECT t1.id , t1.name , t1.gender FROM architect AS t1 JOIN mill AS t2 ON t1.id = t2.architect_id GROUP BY t1.id HAVING COUNT ( * ) = 1",
        "schema": "CREATE TABLE bridge (id NUMBER, name TEXT, architect_id NUMBER); CREATE TABLE architect (id TEXT, name TEXT, gender TEXT); CREATE TABLE mill (architect_id NUMBER);"
      }
    ],
    [
      {
        "question": "What is the most common mill type?",
        "query": "SELECT TYPE FROM mill GROUP BY TYPE ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE mill (type TEXT);"
      },
      {
        "question": "How many of those are there?",
        "query": "SELECT TYPE, COUNT ( * ) FROM mill GROUP BY TYPE ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE mill (type TEXT, id NUMBER);"
      },
      {
        "question": "What years were each of those built?",
        "query": "SELECT built_year FROM mill WHERE TYPE = ( SELECT TYPE FROM mill GROUP BY TYPE ORDER BY COUNT ( * ) DESC LIMIT 1 )",
        "schema": "CREATE TABLE mill (built_year NUMBER, type TEXT, id NUMBER);"
      }
    ],
    [
      {
        "question": "What is the nationality of Zaha Hadid?",
        "query": "SELECT nationality FROM architect WHERE name = 'Zaha Hadid'",
        "schema": "CREATE TABLE architect (id TEXT, name TEXT, nationality TEXT);"
      },
      {
        "question": "What is the gender of Frank Gehry?",
        "query": "SELECT gender FROM architect WHERE name = 'Frank Gehry'",
        "schema": "CREATE TABLE architect (name TEXT, nationality TEXT, id TEXT, gender TEXT);"
      },
      {
        "question": "What is the built year of architect id 2?",
        "query": "SELECT built_year FROM mill WHERE architect_id = 2",
        "schema": "CREATE TABLE mill (name TEXT, architect_id NUMBER, built_year NUMBER); CREATE TABLE architect (gender TEXT, nationality TEXT, id TEXT, name TEXT); CREATE TABLE bridge (architect_id NUMBER);"
      },
      {
        "question": "What is the location of id 3?",
        "query": "SELECT LOCATION FROM mill WHERE id = 3",
        "schema": "CREATE TABLE architect (name TEXT, nationality TEXT, gender TEXT, id TEXT); CREATE TABLE mill (location TEXT, name TEXT, built_year NUMBER, id NUMBER, architect_id NUMBER); CREATE TABLE bridge (location TEXT, architect_id NUMBER);"
      }
    ],
    [
      {
        "question": "CAN YOU GIVE ME THE LIST OF architect NAME",
        "query": "SELECT name FROM architect",
        "schema": "CREATE TABLE mill (architect_id NUMBER); CREATE TABLE architect (name TEXT, id TEXT); CREATE TABLE bridge (architect_id NUMBER);"
      },
      {
        "question": "GREAT, CAN YOU GIVE ME THE DETAILS OF AMERICAN ARCHITECT NAMES",
        "query": "SELECT * FROM architect WHERE nationality = 'American'",
        "schema": "CREATE TABLE bridge (architect_id NUMBER); CREATE TABLE mill (architect_id NUMBER); CREATE TABLE architect (nationality TEXT, name TEXT, id TEXT);"
      }
    ],
    [
      {
        "question": "How long is the Fairy Bridge?",
        "query": "SELECT length_meters FROM bridge WHERE name = \"Fairy Bridge\"",
        "schema": "CREATE TABLE architect (id TEXT); CREATE TABLE bridge (name TEXT, length_feet NUMBER, length_meters NUMBER, id NUMBER);"
      },
      {
        "question": "Can you find the bridge name Xian Ren Qiao?",
        "query": "SELECT * FROM bridge WHERE name = \"Xian Ren Qiao ( Fairy Bridge ) \"",
        "schema": "CREATE TABLE bridge (name TEXT, length_meters NUMBER, id NUMBER, length_feet NUMBER, location TEXT); CREATE TABLE architect (name TEXT, id TEXT);"
      },
      {
        "question": "Do you know who the architect is for that bridge?",
        "query": "SELECT * FROM bridge AS t1 JOIN architect AS t2 ON t1.architect_id = t2.id WHERE t1.name = 'Xian Ren Qiao ( Fairy Bridge ) '",
        "schema": "CREATE TABLE architect (name TEXT, id TEXT); CREATE TABLE bridge (location TEXT, id NUMBER, architect_id NUMBER, name TEXT, length_meters NUMBER, length_feet NUMBER); CREATE TABLE mill (architect_id NUMBER);"
      },
      {
        "question": "What other bridges did Wright architect?",
        "query": "SELECT * FROM bridge AS t1 JOIN architect AS t2 ON t1.architect_id = t2.id WHERE t2.name = \"Frank Lloyd Wright\" AND t1.name ! = \"Xian Ren Qiao ( Fairy Bridge ) \"",
        "schema": "CREATE TABLE mill (architect_id NUMBER); CREATE TABLE bridge (name TEXT, id NUMBER, length_feet NUMBER, architect_id NUMBER, length_meters NUMBER, location TEXT); CREATE TABLE architect (name TEXT, id TEXT);"
      },
      {
        "question": "Do you know the mills built by architects who also built a bridge longer than 80 meters?",
        "query": "SELECT * FROM mill AS t1 JOIN architect AS t2 ON t1.architect_id = t2.id JOIN bridge AS t3 ON t3.architect_id = t2.id WHERE t3.length_meters > 80",
        "schema": "CREATE TABLE architect (name TEXT, id TEXT); CREATE TABLE mill (id NUMBER, architect_id NUMBER, type TEXT, name TEXT); CREATE TABLE bridge (location TEXT, name TEXT, id NUMBER, length_feet NUMBER, architect_id NUMBER, length_meters NUMBER);"
      }
    ],
    [
      {
        "question": "How many bridges was built by Frank Lloyd Wright?",
        "query": "SELECT COUNT ( * ) FROM architect AS t1 JOIN bridge AS t2 ON t1.id = t2.architect_id WHERE t1.name = \"Frank Lloyd Wright\"",
        "schema": "CREATE TABLE architect (name TEXT, id TEXT); CREATE TABLE mill (architect_id NUMBER); CREATE TABLE bridge (architect_id NUMBER, name TEXT, id NUMBER);"
      },
      {
        "question": "How many bridges was built by Frank Gehry?",
        "query": "SELECT COUNT ( * ) FROM architect AS t1 JOIN bridge AS t2 ON t1.id = t2.architect_id WHERE t1.name = \"Frank Gehry\"",
        "schema": "CREATE TABLE mill (architect_id NUMBER); CREATE TABLE bridge (name TEXT, architect_id NUMBER, id NUMBER); CREATE TABLE architect (name TEXT, id TEXT);"
      },
      {
        "question": "Who was the builder of Xian Ren Qiao (Fairy Bridge)?",
        "query": "SELECT t1.name FROM architect AS t1 JOIN bridge AS t2 ON t1.id = t2.architect_id WHERE t2.name = \"Xian Ren Qiao ( Fairy Bridge ) \"",
        "schema": "CREATE TABLE bridge (id NUMBER, name TEXT, architect_id NUMBER); CREATE TABLE mill (architect_id NUMBER); CREATE TABLE architect (name TEXT, id TEXT);"
      },
      {
        "question": "What is the  name of id 2?",
        "query": "SELECT name FROM architect WHERE id = 2",
        "schema": "CREATE TABLE architect (name TEXT, id TEXT); CREATE TABLE mill (architect_id NUMBER); CREATE TABLE bridge (id NUMBER, name TEXT, architect_id NUMBER);"
      }
    ],
    [
      {
        "question": "Hi there!  Can you show me the name of the architect who built the most mills?",
        "query": "SELECT t1.name FROM architect AS t1 JOIN mill AS t2 ON t1.id = t2.architect_id GROUP BY t1.id ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE bridge (architect_id NUMBER); CREATE TABLE architect (id TEXT, name TEXT); CREATE TABLE mill (id NUMBER, architect_id NUMBER);"
      },
      {
        "question": "Awesome!  Can you update this list to also include the architect ID and nationality of this individual?",
        "query": "SELECT t1.id , t1.name , t1.nationality FROM architect AS t1 JOIN mill AS t2 ON t1.id = t2.architect_id GROUP BY t1.id ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE bridge (architect_id NUMBER); CREATE TABLE architect (name TEXT, id TEXT, nationality TEXT); CREATE TABLE mill (id NUMBER, name TEXT, architect_id NUMBER);"
      },
      {
        "question": "Thank you!  Can you please show me a list of all of the mill names that were built by Frank Lloyd Wright?",
        "query": "SELECT t2.name FROM architect AS t1 JOIN mill AS t2 ON t1.id = t2.architect_id WHERE t1.name = 'Frank Lloyd Wright'",
        "schema": "CREATE TABLE mill (id NUMBER, name TEXT, architect_id NUMBER); CREATE TABLE architect (name TEXT, nationality TEXT, id TEXT); CREATE TABLE bridge (architect_id NUMBER);"
      }
    ],
    [
      {
        "question": "How many mills are built by American architects?",
        "query": "SELECT COUNT ( * ) FROM mill AS t1 JOIN architect AS t2 ON t1.architect_id = t2.id WHERE t2.nationality = 'American'",
        "schema": "CREATE TABLE architect (name TEXT, id TEXT, nationality TEXT); CREATE TABLE mill (type TEXT, id NUMBER, architect_id NUMBER); CREATE TABLE bridge (architect_id NUMBER);"
      },
      {
        "question": "Hmm, I also want to know how many mills are built by Canadian architects.",
        "query": "SELECT COUNT ( * ) FROM mill AS t1 JOIN architect AS t2 ON t1.architect_id = t2.id WHERE t2.nationality = 'Canadian'",
        "schema": "CREATE TABLE mill (id NUMBER, architect_id NUMBER, type TEXT, built_year NUMBER); CREATE TABLE bridge (architect_id NUMBER); CREATE TABLE architect (name TEXT, nationality TEXT, id TEXT);"
      },
      {
        "question": "What are the distinct type of mills that are built by American or Canadian architects?",
        "query": "SELECT DISTINCT t1.type FROM mill AS t1 JOIN architect AS t2 ON t1.architect_id = t2.id WHERE t2.nationality = 'American' OR t2.nationality = 'Canadian'",
        "schema": "CREATE TABLE architect (name TEXT, id TEXT, nationality TEXT); CREATE TABLE bridge (architect_id NUMBER); CREATE TABLE mill (architect_id NUMBER, built_year NUMBER, type TEXT, id NUMBER);"
      }
    ]
  ],
  "cre_Theme_park": [
    [
      {
        "question": "What are the names of the tourist attractions that can be accessed by bus or walk?",
        "query": "SELECT name FROM tourist_attractions WHERE how_to_get_there = \"bus\" OR how_to_get_there = \"walk\"",
        "schema": "CREATE TABLE Tourist_Attractions (Description TEXT, Attraction_Type_Code TEXT, Location_ID NUMBER, Tourist_Attraction_ID NUMBER, How_to_Get_There TEXT, Name TEXT); CREATE TABLE Locations (Location_ID NUMBER);"
      },
      {
        "question": "What are their opening hours, please?",
        "query": "SELECT name , opening_hours FROM tourist_attractions WHERE how_to_get_there = \"bus\" OR how_to_get_there = \"walk\"",
        "schema": "CREATE TABLE Locations (Location_ID NUMBER); CREATE TABLE Tourist_Attractions (Location_ID NUMBER, How_to_Get_There TEXT, Tourist_Attraction_ID NUMBER, Opening_Hours TEXT, Attraction_Type_Code TEXT, Description TEXT, Name TEXT);"
      },
      {
        "question": "What are the names of the tourist attractions that can be accessed by shuttle?",
        "query": "SELECT name FROM tourist_attractions WHERE how_to_get_there = \"shuttle\"",
        "schema": "CREATE TABLE Locations (Location_ID NUMBER); CREATE TABLE Tourist_Attractions (Name TEXT, Tourist_Attraction_ID NUMBER, Description TEXT, Opening_Hours TEXT, How_to_Get_There TEXT, Location_ID NUMBER, Attraction_Type_Code TEXT);"
      },
      {
        "question": "What are their opening hours?",
        "query": "SELECT name,opening_hours FROM tourist_attractions WHERE how_to_get_there = \"shuttle\"",
        "schema": "CREATE TABLE Tourist_Attractions (How_to_Get_There TEXT, Tourist_Attraction_ID NUMBER, Attraction_Type_Code TEXT, Name TEXT, Description TEXT, Location_ID NUMBER, Opening_Hours TEXT); CREATE TABLE Locations (Location_ID NUMBER);"
      },
      {
        "question": "What are the location ids of those?",
        "query": "SELECT name,location_id FROM tourist_attractions WHERE how_to_get_there = \"shuttle\"",
        "schema": "CREATE TABLE Locations (Address TEXT, Location_ID NUMBER, Location_Name TEXT); CREATE TABLE Tourist_Attractions (How_to_Get_There TEXT, Name TEXT, Description TEXT, Opening_Hours TEXT, Tourist_Attraction_ID NUMBER, Attraction_Type_Code TEXT, Location_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What is the name of photo ID 280",
        "query": "SELECT name FROM photos WHERE photo_id = 280",
        "schema": "CREATE TABLE Tourist_Attractions (Name TEXT, Tourist_Attraction_ID NUMBER); CREATE TABLE Photos (Tourist_Attraction_ID NUMBER, Name TEXT, Filename TEXT, Photo_ID NUMBER);"
      },
      {
        "question": "What is the description of game2?",
        "query": "SELECT description FROM photos WHERE name = 'game2'",
        "schema": "CREATE TABLE Photos (Description TEXT, Photo_ID NUMBER, Tourist_Attraction_ID NUMBER, Name TEXT, Filename TEXT); CREATE TABLE Tourist_Attractions (Description TEXT, Tourist_Attraction_ID NUMBER, Name TEXT); CREATE TABLE Ref_Attraction_Types (Attraction_Type_Code TEXT);"
      },
      {
        "question": "What is the tourist attraction id of game2",
        "query": "SELECT tourist_attraction_id FROM photos WHERE name = 'game2'",
        "schema": "CREATE TABLE Ref_Attraction_Types (Attraction_Type_Code TEXT); CREATE TABLE Photos (Photo_ID NUMBER, Description TEXT, Filename TEXT, Tourist_Attraction_ID NUMBER, Name TEXT); CREATE TABLE Tourist_Attractions (Description TEXT, Tourist_Attraction_ID NUMBER, Name TEXT, How_to_Get_There TEXT);"
      },
      {
        "question": "What is game2 tourist attraction name?",
        "query": "SELECT t2.name FROM photos AS t1 JOIN tourist_attractions AS t2 ON t1.tourist_attraction_id = t2.tourist_attraction_id WHERE t1.name = \"game2\"",
        "schema": "CREATE TABLE Tourist_Attractions (Name TEXT, Description TEXT, How_to_Get_There TEXT, Tourist_Attraction_ID NUMBER); CREATE TABLE Photos (Tourist_Attraction_ID NUMBER, Photo_ID NUMBER, Name TEXT, Description TEXT, Filename TEXT); CREATE TABLE Ref_Attraction_Types (Attraction_Type_Code TEXT);"
      }
    ],
    [
      {
        "question": "how many shops are there?",
        "query": "SELECT COUNT ( * ) FROM shops",
        "schema": "CREATE TABLE Tourist_Attractions (Tourist_Attraction_ID NUMBER, How_to_Get_There TEXT, Name TEXT); CREATE TABLE Shops (Shop_Details TEXT, Shop_ID NUMBER); CREATE TABLE Museums (Museum_ID NUMBER); CREATE TABLE Locations (Location_Name TEXT); CREATE TABLE Street_Markets (Market_ID NUMBER);"
      },
      {
        "question": "what kinds of shops are they?",
        "query": "SELECT shop_details FROM shops",
        "schema": "CREATE TABLE Locations (Location_Name TEXT); CREATE TABLE Tourist_Attractions (Name TEXT, How_to_Get_There TEXT, Tourist_Attraction_ID NUMBER, Attraction_Type_Code TEXT); CREATE TABLE Shops (Shop_ID NUMBER, Shop_Details TEXT); CREATE TABLE Street_Markets (Market_ID NUMBER); CREATE TABLE Museums (Museum_ID NUMBER);"
      },
      {
        "question": "Can any one of them be accessed by bus?",
        "query": "SELECT t1.shop_id FROM shops AS t1 JOIN tourist_attractions AS t2 ON t1.shop_id = t2.tourist_attraction_id WHERE t2.how_to_get_there = \"bus\"",
        "schema": "CREATE TABLE Street_Markets (Market_ID NUMBER); CREATE TABLE Locations (Location_Name TEXT, Other_Details TEXT, Location_ID NUMBER); CREATE TABLE Museums (Museum_ID NUMBER); CREATE TABLE Tourist_Attractions (Name TEXT, How_to_Get_There TEXT, Location_ID NUMBER, Tourist_Attraction_ID NUMBER, Attraction_Type_Code TEXT); CREATE TABLE Shops (Shop_ID NUMBER, Shop_Details TEXT);"
      },
      {
        "question": "how about by walk?",
        "query": "SELECT t1.shop_id FROM shops AS t1 JOIN tourist_attractions AS t2 ON t1.shop_id = t2.tourist_attraction_id WHERE t2.how_to_get_there = \"walk\"",
        "schema": "CREATE TABLE Tourist_Attractions (Tourist_Attraction_ID NUMBER, Name TEXT, Location_ID NUMBER, Attraction_Type_Code TEXT, How_to_Get_There TEXT); CREATE TABLE Street_Markets (Market_ID NUMBER); CREATE TABLE Locations (Location_ID NUMBER, Other_Details TEXT, Location_Name TEXT); CREATE TABLE Museums (Museum_ID NUMBER); CREATE TABLE Shops (Shop_ID NUMBER, Shop_Details TEXT);"
      },
      {
        "question": "What kind of shop is that?",
        "query": "SELECT t1.shop_details FROM shops AS t1 JOIN tourist_attractions AS t2 ON t1.shop_id = t2.tourist_attraction_id WHERE t2.how_to_get_there = \"walk\"",
        "schema": "CREATE TABLE Street_Markets (Market_ID NUMBER); CREATE TABLE Museums (Museum_ID NUMBER); CREATE TABLE Tourist_Attractions (How_to_Get_There TEXT, Tourist_Attraction_ID NUMBER, Name TEXT, Location_ID NUMBER, Attraction_Type_Code TEXT); CREATE TABLE Shops (Shop_Details TEXT, Shop_ID NUMBER); CREATE TABLE Locations (Other_Details TEXT, Location_ID NUMBER, Location_Name TEXT);"
      }
    ],
    [
      {
        "question": "How many tourists were there total?",
        "query": "SELECT COUNT ( * ) FROM visitors",
        "schema": "CREATE TABLE Visits (Visit_ID NUMBER, Tourist_Attraction_ID NUMBER, Tourist_ID NUMBER); CREATE TABLE Tourist_Attractions (Tourist_Attraction_ID NUMBER); CREATE TABLE Photos (Tourist_Attraction_ID NUMBER); CREATE TABLE Visitors (Tourist_Details TEXT, Tourist_ID NUMBER);"
      },
      {
        "question": "How many tourist attractions?",
        "query": "SELECT COUNT ( DISTINCT tourist_attraction_id ) FROM visits",
        "schema": "CREATE TABLE Visits (Tourist_ID NUMBER, Visit_ID NUMBER, Tourist_Attraction_ID NUMBER); CREATE TABLE Ref_Attraction_Types (Attraction_Type_Code TEXT); CREATE TABLE Photos (Tourist_Attraction_ID NUMBER); CREATE TABLE Visitors (Tourist_ID NUMBER, Tourist_Details TEXT); CREATE TABLE Tourist_Attractions (Tourist_Attraction_ID NUMBER, How_to_Get_There TEXT, Attraction_Type_Code TEXT, Description TEXT, Name TEXT); CREATE TABLE Theme_Parks (Theme_Park_ID NUMBER); CREATE TABLE Staff (Tourist_Attraction_ID NUMBER);"
      },
      {
        "question": "How many tourists visited more than one tourist attraction?",
        "query": "SELECT COUNT ( * ) FROM ( SELECT * FROM visits AS t1 JOIN visitors AS t2 ON t1.tourist_id = t2.tourist_id GROUP BY t1.tourist_id HAVING COUNT ( * ) >1 )",
        "schema": "CREATE TABLE Staff (Tourist_Attraction_ID NUMBER); CREATE TABLE Ref_Attraction_Types (Attraction_Type_Code TEXT); CREATE TABLE Tourist_Attractions (Tourist_Attraction_ID NUMBER, How_to_Get_There TEXT, Description TEXT, Name TEXT, Attraction_Type_Code TEXT); CREATE TABLE Photos (Tourist_Attraction_ID NUMBER); CREATE TABLE Visits (Tourist_ID NUMBER, Tourist_Attraction_ID NUMBER, Visit_ID NUMBER); CREATE TABLE Theme_Parks (Theme_Park_ID NUMBER); CREATE TABLE Visitors (Tourist_Details TEXT, Tourist_ID NUMBER);"
      },
      {
        "question": "How many tourists didn't visit any tourist attractions?",
        "query": "SELECT COUNT ( * ) FROM visitors WHERE tourist_id NOT IN ( SELECT tourist_id FROM visits )",
        "schema": "CREATE TABLE Tourist_Attractions (How_to_Get_There TEXT, Name TEXT, Description TEXT, Attraction_Type_Code TEXT, Tourist_Attraction_ID NUMBER); CREATE TABLE Visits (Tourist_Attraction_ID NUMBER, Tourist_ID NUMBER, Visit_ID NUMBER); CREATE TABLE Visitors (Tourist_Details TEXT, Tourist_ID NUMBER); CREATE TABLE Ref_Attraction_Types (Attraction_Type_Code TEXT); CREATE TABLE Staff (Tourist_Attraction_ID NUMBER); CREATE TABLE Theme_Parks (Theme_Park_ID NUMBER); CREATE TABLE Photos (Tourist_Attraction_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Can you list the names of all the tourist attractions?",
        "query": "SELECT name FROM tourist_attractions",
        "schema": "CREATE TABLE Tourist_Attractions (How_to_Get_There TEXT, Attraction_Type_Code TEXT, Description TEXT, Tourist_Attraction_ID NUMBER, Name TEXT);"
      },
      {
        "question": "Hmm, I want to know the names of the tourist attractions that can be reached by bus.",
        "query": "SELECT name FROM tourist_attractions WHERE how_to_get_there = \"bus\"",
        "schema": "CREATE TABLE Locations (Location_ID NUMBER); CREATE TABLE Tourist_Attractions (Description TEXT, Location_ID NUMBER, Attraction_Type_Code TEXT, How_to_Get_There TEXT, Name TEXT, Tourist_Attraction_ID NUMBER);"
      },
      {
        "question": "Can you also tell me the name of the tourist attraction that is at address 254 Ottilie Junction?",
        "query": "SELECT t2.name FROM locations AS t1 JOIN tourist_attractions AS t2 ON t1.location_id = t2.location_id WHERE t1.address = \"254 Ottilie Junction\"",
        "schema": "CREATE TABLE Locations (Address TEXT, Location_Name TEXT, Location_ID NUMBER); CREATE TABLE Tourist_Attractions (How_to_Get_There TEXT, Tourist_Attraction_ID NUMBER, Name TEXT, Description TEXT, Location_ID NUMBER, Attraction_Type_Code TEXT);"
      },
      {
        "question": "Can you list the location names of the tourist attractions that can be reached by bus?",
        "query": "SELECT t1.location_name FROM locations AS t1 JOIN tourist_attractions AS t2 ON t1.location_id = t2.location_id WHERE t2.how_to_get_there = \"bus\"",
        "schema": "CREATE TABLE Tourist_Attractions (How_to_Get_There TEXT, Description TEXT, Location_ID NUMBER, Tourist_Attraction_ID NUMBER, Name TEXT, Attraction_Type_Code TEXT); CREATE TABLE Locations (Location_Name TEXT, Location_ID NUMBER, Address TEXT);"
      },
      {
        "question": "Can you list the location addresses?",
        "query": "SELECT t1.address FROM locations AS t1 JOIN tourist_attractions AS t2 ON t1.location_id = t2.location_id WHERE t2.how_to_get_there = \"bus\"",
        "schema": "CREATE TABLE Locations (Location_Name TEXT, Location_ID NUMBER, Address TEXT); CREATE TABLE Tourist_Attractions (Attraction_Type_Code TEXT, Description TEXT, How_to_Get_There TEXT, Name TEXT, Location_ID NUMBER, Tourist_Attraction_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What are the tourist attractions available? | Did you mean to show you all the attractions? | Yes, what are their names?",
        "query": "SELECT DISTINCT ( name ) FROM tourist_attractions",
        "schema": "CREATE TABLE Tourist_Attractions (Description TEXT, Name TEXT, How_to_Get_There TEXT, Attraction_Type_Code TEXT, Tourist_Attraction_ID NUMBER); CREATE TABLE Photos (Name TEXT); CREATE TABLE Ref_Attraction_Types (Attraction_Type_Code TEXT); CREATE TABLE Staff (Name TEXT, Tourist_Attraction_ID NUMBER);"
      },
      {
        "question": "Which attractions did Vincent go to?",
        "query": "SELECT * FROM tourist_attractions AS t1 JOIN visitors AS t2 JOIN visits AS t3 ON t1.tourist_attraction_id = t3.tourist_attraction_id AND t2.tourist_id = t3.tourist_id WHERE t2.tourist_details = \"Vincent\"",
        "schema": "CREATE TABLE Visits (Visit_Details TEXT, Visit_Date TIME, Tourist_ID NUMBER, Visit_ID NUMBER, Tourist_Attraction_ID NUMBER); CREATE TABLE Tourist_Attractions (Location_ID NUMBER, Name TEXT, How_to_Get_There TEXT, Tourist_Attraction_ID NUMBER, Description TEXT, Attraction_Type_Code TEXT); CREATE TABLE Hotels (hotel_id NUMBER); CREATE TABLE Visitors (Tourist_ID NUMBER, Tourist_Details TEXT); CREATE TABLE Photos (Name TEXT, Tourist_Attraction_ID NUMBER); CREATE TABLE Locations (Location_Name TEXT, Location_ID NUMBER, Address TEXT); CREATE TABLE Ref_Attraction_Types (Attraction_Type_Code TEXT); CREATE TABLE Staff (Tourist_Attraction_ID NUMBER, Staff_ID NUMBER, Name TEXT);"
      },
      {
        "question": "Which attractions did Vivian visit?",
        "query": "SELECT * FROM tourist_attractions AS t1 JOIN visitors AS t2 JOIN visits AS t3 ON t1.tourist_attraction_id = t3.tourist_attraction_id AND t2.tourist_id = t3.tourist_id WHERE t2.tourist_details = \"Vivian\"",
        "schema": "CREATE TABLE Hotels (hotel_id NUMBER); CREATE TABLE Visits (Visit_Details TEXT, Tourist_Attraction_ID NUMBER, Visit_Date TIME, Visit_ID NUMBER, Tourist_ID NUMBER); CREATE TABLE Ref_Attraction_Types (Attraction_Type_Code TEXT); CREATE TABLE Locations (Location_Name TEXT, Location_ID NUMBER, Address TEXT); CREATE TABLE Staff (Tourist_Attraction_ID NUMBER, Staff_ID NUMBER, Name TEXT); CREATE TABLE Tourist_Attractions (Other_Details TEXT, Tourist_Attraction_ID NUMBER, Attraction_Type_Code TEXT, Location_ID NUMBER, Name TEXT, How_to_Get_There TEXT, Description TEXT); CREATE TABLE Visitors (Tourist_Details TEXT, Tourist_ID NUMBER); CREATE TABLE Photos (Name TEXT, Tourist_Attraction_ID NUMBER);"
      },
      {
        "question": "What are the names of the other tourist?",
        "query": "SELECT tourist_details FROM visitors WHERE tourist_details ! = \"Vivian\" AND tourist_details! = \"Vincent\"",
        "schema": "CREATE TABLE Photos (Tourist_Attraction_ID NUMBER, Name TEXT); CREATE TABLE Locations (Location_Name TEXT, Address TEXT, Location_ID NUMBER); CREATE TABLE Visitors (Tourist_Details TEXT, Tourist_ID NUMBER); CREATE TABLE Tourist_Attractions (Name TEXT, Tourist_Attraction_ID NUMBER, Attraction_Type_Code TEXT, Other_Details TEXT, Description TEXT, How_to_Get_There TEXT, Location_ID NUMBER); CREATE TABLE Hotels (hotel_id NUMBER); CREATE TABLE Ref_Attraction_Types (Attraction_Type_Code TEXT); CREATE TABLE Visits (Tourist_ID NUMBER, Visit_Details TEXT, Tourist_Attraction_ID NUMBER, Visit_Date TIME, Visit_ID NUMBER); CREATE TABLE Staff (Staff_ID NUMBER, Tourist_Attraction_ID NUMBER, Name TEXT);"
      }
    ],
    [
      {
        "question": "Can you show me all the tourist attractions' names?",
        "query": "SELECT DISTINCT name FROM tourist_attractions",
        "schema": "CREATE TABLE Tourist_Attractions (Name TEXT, How_to_Get_There TEXT, Description TEXT, Attraction_Type_Code TEXT, Tourist_Attraction_ID NUMBER); CREATE TABLE Photos (Tourist_Attraction_ID NUMBER); CREATE TABLE Staff (Tourist_Attraction_ID NUMBER);"
      },
      {
        "question": "Can you show me the ids for all these attractions? | Do you mean Tourist Attraction IDs? | yes",
        "query": "SELECT name, tourist_attraction_id FROM tourist_attractions",
        "schema": "CREATE TABLE Tourist_Attractions (Description TEXT, Tourist_Attraction_ID NUMBER, Location_ID NUMBER, Attraction_Type_Code TEXT, Name TEXT, How_to_Get_There TEXT); CREATE TABLE Photos (Tourist_Attraction_ID NUMBER); CREATE TABLE Staff (Tourist_Attraction_ID NUMBER);"
      },
      {
        "question": "In addition, can you also show me the corresponding number of visits in the same list?",
        "query": "SELECT t1.name , t2.tourist_attraction_id , COUNT ( * ) FROM tourist_attractions AS t1 JOIN visits AS t2 ON t1.tourist_attraction_id = t2.tourist_attraction_id GROUP BY t2.tourist_attraction_id",
        "schema": "CREATE TABLE Visitors (Tourist_Details TEXT, Tourist_ID NUMBER); CREATE TABLE Visits (Visit_ID NUMBER, Visit_Date TIME, Tourist_Attraction_ID NUMBER, Tourist_ID NUMBER); CREATE TABLE Staff (Tourist_Attraction_ID NUMBER); CREATE TABLE Tourist_Attractions (Tourist_Attraction_ID NUMBER, Description TEXT, Location_ID NUMBER, How_to_Get_There TEXT, Name TEXT, Attraction_Type_Code TEXT); CREATE TABLE Photos (Tourist_Attraction_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What are the visit date of the visitor whose detail is \"Vincent\"?",
        "query": "SELECT t2.visit_date FROM visitors AS t1 JOIN visits AS t2 ON t1.tourist_id = t2.tourist_id WHERE t1.tourist_details = \"Vincent\"",
        "schema": "CREATE TABLE Tourist_Attractions (Tourist_Attraction_ID NUMBER); CREATE TABLE Visitors (Tourist_Details TEXT, Tourist_ID NUMBER); CREATE TABLE Visits (Visit_ID NUMBER, Visit_Date TIME, Tourist_ID NUMBER, Visit_Details TEXT);"
      },
      {
        "question": "What is his tourist ID?",
        "query": "SELECT t1.tourist_id FROM visitors AS t1 JOIN visits AS t2 ON t1.tourist_id = t2.tourist_id WHERE t1.tourist_details = \"Vincent\"",
        "schema": "CREATE TABLE Visits (Visit_ID NUMBER, Visit_Date TIME, Tourist_ID NUMBER, Visit_Details TEXT); CREATE TABLE Tourist_Attractions (Tourist_Attraction_ID NUMBER); CREATE TABLE Visitors (Tourist_ID NUMBER, Tourist_Details TEXT);"
      },
      {
        "question": "What is his visit details?",
        "query": "SELECT t2.visit_details FROM visitors AS t1 JOIN visits AS t2 ON t1.tourist_id = t2.tourist_id WHERE t1.tourist_details = \"Vincent\"",
        "schema": "CREATE TABLE Visitors (Tourist_Details TEXT, Tourist_ID NUMBER); CREATE TABLE Tourist_Attractions (Tourist_Attraction_ID NUMBER); CREATE TABLE Visits (Visit_Date TIME, Visit_ID NUMBER, Tourist_ID NUMBER, Visit_Details TEXT);"
      }
    ],
    [
      {
        "question": "Which places did Alison visit",
        "query": "SELECT t1.name FROM tourist_attractions AS t1 JOIN visitors AS t2 JOIN visits AS t3 ON t1.tourist_attraction_id = t3.tourist_attraction_id AND t2.tourist_id = t3.tourist_id WHERE t2.tourist_details = \"Alison\"",
        "schema": "CREATE TABLE Shops (Shop_Details TEXT, Shop_ID NUMBER); CREATE TABLE Visits (Tourist_Attraction_ID NUMBER, Tourist_ID NUMBER, Visit_ID NUMBER, Visit_Details TEXT); CREATE TABLE Locations (Address TEXT, Location_ID NUMBER, Location_Name TEXT, Other_Details TEXT); CREATE TABLE Visitors (Tourist_ID NUMBER, Tourist_Details TEXT); CREATE TABLE Staff (Tourist_Attraction_ID NUMBER, Staff_ID NUMBER, Name TEXT); CREATE TABLE Tourist_Attractions (Name TEXT, How_to_Get_There TEXT, Tourist_Attraction_ID NUMBER, Location_ID NUMBER); CREATE TABLE Photos (Tourist_Attraction_ID NUMBER); CREATE TABLE Museums (Museum_ID NUMBER, Museum_Details TEXT); CREATE TABLE Hotels (hotel_id NUMBER);"
      },
      {
        "question": "And which of those did Rosalind not visit",
        "query": "SELECT t1.name FROM tourist_attractions AS t1 JOIN visitors AS t2 JOIN visits AS t3 ON t1.tourist_attraction_id = t3.tourist_attraction_id AND t2.tourist_id = t3.tourist_id WHERE t2.tourist_details = \"Alison\" EXCEPT SELECT t1.name FROM tourist_attractions AS t1 JOIN visitors AS t2 JOIN visits AS t3 ON t1.tourist_attraction_id = t3.tourist_attraction_id AND t2.tourist_id = t3.tourist_id WHERE t2.tourist_details = \"Rosalind\"",
        "schema": "CREATE TABLE Visits (Visit_Details TEXT, Tourist_ID NUMBER, Visit_ID NUMBER, Tourist_Attraction_ID NUMBER); CREATE TABLE Museums (Museum_ID NUMBER, Museum_Details TEXT); CREATE TABLE Hotels (hotel_id NUMBER); CREATE TABLE Locations (Other_Details TEXT, Address TEXT, Location_Name TEXT, Location_ID NUMBER); CREATE TABLE Shops (Shop_Details TEXT, Shop_ID NUMBER); CREATE TABLE Tourist_Attractions (How_to_Get_There TEXT, Tourist_Attraction_ID NUMBER, Other_Details TEXT, Name TEXT, Location_ID NUMBER); CREATE TABLE Photos (Tourist_Attraction_ID NUMBER); CREATE TABLE Staff (Staff_ID NUMBER, Name TEXT, Tourist_Attraction_ID NUMBER); CREATE TABLE Visitors (Tourist_ID NUMBER, Tourist_Details TEXT);"
      }
    ],
    [
      {
        "question": "Hello!  Can you provide me with a list of all the names and ids for all tourist attractions?",
        "query": "SELECT name , tourist_attraction_id FROM tourist_attractions",
        "schema": "CREATE TABLE Photos (Tourist_Attraction_ID NUMBER); CREATE TABLE Staff (Tourist_Attraction_ID NUMBER); CREATE TABLE Theme_Parks (Theme_Park_ID NUMBER); CREATE TABLE Tourist_Attractions (How_to_Get_There TEXT, Attraction_Type_Code TEXT, Name TEXT, Tourist_Attraction_ID NUMBER); CREATE TABLE Visits (Tourist_Attraction_ID NUMBER);"
      },
      {
        "question": "Great!  Can you filter this list to show only the names and ids for tourist attractions that were visited 2 or more times?",
        "query": "SELECT t1.name , t2.tourist_attraction_id FROM tourist_attractions AS t1 JOIN visits AS t2 ON t1.tourist_attraction_id = t2.tourist_attraction_id GROUP BY t2.tourist_attraction_id HAVING COUNT ( * ) > = 2",
        "schema": "CREATE TABLE Staff (Tourist_Attraction_ID NUMBER); CREATE TABLE Photos (Tourist_Attraction_ID NUMBER); CREATE TABLE Theme_Parks (Theme_Park_ID NUMBER); CREATE TABLE Visitors (Tourist_ID NUMBER); CREATE TABLE Tourist_Attractions (Tourist_Attraction_ID NUMBER, How_to_Get_There TEXT, Attraction_Type_Code TEXT, Name TEXT, Opening_Hours TEXT); CREATE TABLE Visits (Visit_ID NUMBER, Tourist_ID NUMBER, Tourist_Attraction_ID NUMBER, Visit_Date TIME);"
      },
      {
        "question": "Great!  Can you update this list to show how many times each tourist attraction was visited?",
        "query": "SELECT t1.name , COUNT ( * ) FROM tourist_attractions AS t1 JOIN visits AS t2 ON t1.tourist_attraction_id = t2.tourist_attraction_id GROUP BY t2.tourist_attraction_id HAVING COUNT ( * ) > = 2",
        "schema": "CREATE TABLE Photos (Tourist_Attraction_ID NUMBER); CREATE TABLE Tourist_Attractions (Tourist_Attraction_ID NUMBER, Opening_Hours TEXT, Attraction_Type_Code TEXT, Name TEXT, How_to_Get_There TEXT); CREATE TABLE Staff (Tourist_Attraction_ID NUMBER); CREATE TABLE Theme_Parks (Theme_Park_ID NUMBER); CREATE TABLE Visits (Visit_Date TIME, Tourist_ID NUMBER, Visit_ID NUMBER, Tourist_Attraction_ID NUMBER); CREATE TABLE Visitors (Tourist_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Hello, can you tell me the tourist attraction id for the photo name \"game1\"?",
        "query": "SELECT t2.tourist_attraction_id FROM photos AS t1 JOIN tourist_attractions AS t2 ON t1.tourist_attraction_id = t2.tourist_attraction_id WHERE t1.name = \"game1\"",
        "schema": "CREATE TABLE Photos (Filename TEXT, Photo_ID NUMBER, Tourist_Attraction_ID NUMBER, Name TEXT); CREATE TABLE Staff (Tourist_Attraction_ID NUMBER); CREATE TABLE Tourist_Attractions (Name TEXT, How_to_Get_There TEXT, Attraction_Type_Code TEXT, Tourist_Attraction_ID NUMBER);"
      },
      {
        "question": "Can you tell me the name for this attraction as well?",
        "query": "SELECT t2.name FROM photos AS t1 JOIN tourist_attractions AS t2 ON t1.tourist_attraction_id = t2.tourist_attraction_id WHERE t1.name = \"game1\"",
        "schema": "CREATE TABLE Photos (Filename TEXT, Tourist_Attraction_ID NUMBER, Name TEXT, Photo_ID NUMBER); CREATE TABLE Tourist_Attractions (Attraction_Type_Code TEXT, How_to_Get_There TEXT, Tourist_Attraction_ID NUMBER, Name TEXT); CREATE TABLE Staff (Tourist_Attraction_ID NUMBER);"
      },
      {
        "question": "How about how to get there?",
        "query": "SELECT t2.how_to_get_there FROM photos AS t1 JOIN tourist_attractions AS t2 ON t1.tourist_attraction_id = t2.tourist_attraction_id WHERE t1.name = \"game1\"",
        "schema": "CREATE TABLE Tourist_Attractions (How_to_Get_There TEXT, Name TEXT, Location_ID NUMBER, Attraction_Type_Code TEXT, Tourist_Attraction_ID NUMBER); CREATE TABLE Photos (Filename TEXT, Tourist_Attraction_ID NUMBER, Name TEXT, Photo_ID NUMBER); CREATE TABLE Staff (Tourist_Attraction_ID NUMBER); CREATE TABLE Locations (Location_Name TEXT, Location_ID NUMBER);"
      },
      {
        "question": "I need the opening hours as well please.",
        "query": "SELECT t2.opening_hours FROM photos AS t1 JOIN tourist_attractions AS t2 ON t1.tourist_attraction_id = t2.tourist_attraction_id WHERE t1.name = \"game1\"",
        "schema": "CREATE TABLE Tourist_Attractions (How_to_Get_There TEXT, Attraction_Type_Code TEXT, Tourist_Attraction_ID NUMBER, Location_ID NUMBER, Opening_Hours TEXT, Name TEXT); CREATE TABLE Locations (Location_Name TEXT, Location_ID NUMBER); CREATE TABLE Staff (Tourist_Attraction_ID NUMBER); CREATE TABLE Photos (Name TEXT, Photo_ID NUMBER, Filename TEXT, Tourist_Attraction_ID NUMBER);"
      },
      {
        "question": "What about the other details?",
        "query": "SELECT t2.other_details FROM photos AS t1 JOIN tourist_attractions AS t2 ON t1.tourist_attraction_id = t2.tourist_attraction_id WHERE t1.name = \"game1\"",
        "schema": "CREATE TABLE Staff (Tourist_Attraction_ID NUMBER); CREATE TABLE Tourist_Attractions (How_to_Get_There TEXT, Name TEXT, Other_Details TEXT, Attraction_Type_Code TEXT, Tourist_Attraction_ID NUMBER, Location_ID NUMBER, Opening_Hours TEXT); CREATE TABLE Photos (Photo_ID NUMBER, Filename TEXT, Tourist_Attraction_ID NUMBER, Other_Details TEXT, Name TEXT); CREATE TABLE Locations (Location_Name TEXT, Location_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What are the names of the tourist attractions that have only been visited once?",
        "query": "SELECT t1.name FROM tourist_attractions AS t1 JOIN visits AS t2 ON t1.tourist_attraction_id = t2.tourist_attraction_id GROUP BY t2.tourist_attraction_id HAVING COUNT ( * ) = 1",
        "schema": "CREATE TABLE Locations (Location_ID NUMBER); CREATE TABLE Visits (Tourist_Attraction_ID NUMBER, Visit_Date TIME, Visit_ID NUMBER, Tourist_ID NUMBER); CREATE TABLE Tourist_Attractions (Tourist_Attraction_ID NUMBER, Name TEXT, Attraction_Type_Code TEXT, Opening_Hours TEXT, Description TEXT, How_to_Get_There TEXT); CREATE TABLE Visitors (Tourist_ID NUMBER); CREATE TABLE Photos (Tourist_Attraction_ID NUMBER);"
      },
      {
        "question": "What are the ids of those?",
        "query": "SELECT t1.tourist_attraction_id FROM tourist_attractions AS t1 JOIN visits AS t2 ON t1.tourist_attraction_id = t2.tourist_attraction_id GROUP BY t2.tourist_attraction_id HAVING COUNT ( * ) = 1",
        "schema": "CREATE TABLE Photos (Tourist_Attraction_ID NUMBER); CREATE TABLE Tourist_Attractions (Attraction_Type_Code TEXT, Tourist_Attraction_ID NUMBER, Description TEXT, Name TEXT, How_to_Get_There TEXT, Opening_Hours TEXT); CREATE TABLE Visitors (Tourist_ID NUMBER); CREATE TABLE Visits (Visit_Date TIME, Visit_ID NUMBER, Tourist_Attraction_ID NUMBER, Tourist_ID NUMBER); CREATE TABLE Locations (Location_ID NUMBER);"
      },
      {
        "question": "What are the opening hours of those attractions?",
        "query": "SELECT t1.opening_hours FROM tourist_attractions AS t1 JOIN visits AS t2 ON t1.tourist_attraction_id = t2.tourist_attraction_id GROUP BY t2.tourist_attraction_id HAVING COUNT ( * ) = 1",
        "schema": "CREATE TABLE Visits (Visit_Date TIME, Visit_ID NUMBER, Tourist_ID NUMBER, Tourist_Attraction_ID NUMBER); CREATE TABLE Locations (Location_ID NUMBER); CREATE TABLE Photos (Tourist_Attraction_ID NUMBER); CREATE TABLE Tourist_Attractions (Tourist_Attraction_ID NUMBER, Description TEXT, Name TEXT, Opening_Hours TEXT, Attraction_Type_Code TEXT, How_to_Get_There TEXT); CREATE TABLE Visitors (Tourist_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What is the number of tourists who didn't make any visit?",
        "query": "SELECT COUNT ( * ) FROM visitors WHERE tourist_id NOT IN ( SELECT tourist_id FROM visits )",
        "schema": "CREATE TABLE Visits (Visit_Details TEXT, Tourist_Attraction_ID NUMBER, Tourist_ID NUMBER, Visit_ID NUMBER); CREATE TABLE Tourist_Attractions (Tourist_Attraction_ID NUMBER); CREATE TABLE Visitors (Tourist_ID NUMBER, Tourist_Details TEXT);"
      },
      {
        "question": "What are their details?",
        "query": "SELECT tourist_details FROM visitors WHERE tourist_id NOT IN ( SELECT tourist_id FROM visits )",
        "schema": "CREATE TABLE Visitors (Tourist_ID NUMBER, Tourist_Details TEXT); CREATE TABLE Visits (Visit_Details TEXT, Tourist_ID NUMBER, Tourist_Attraction_ID NUMBER, Visit_ID NUMBER); CREATE TABLE Tourist_Attractions (Tourist_Attraction_ID NUMBER);"
      },
      {
        "question": "What are the details of the tourist who had the earliest visit?",
        "query": "SELECT t1.tourist_details FROM visitors AS t1 JOIN visits AS t2 ON t1.tourist_id = t2.tourist_id ORDER BY visit_date LIMIT 1",
        "schema": "CREATE TABLE Tourist_Attractions (Tourist_Attraction_ID NUMBER); CREATE TABLE Visits (Visit_ID NUMBER, Tourist_Attraction_ID NUMBER, Visit_Details TEXT, Visit_Date TIME, Tourist_ID NUMBER); CREATE TABLE Visitors (Tourist_ID NUMBER, Tourist_Details TEXT);"
      }
    ],
    [
      {
        "question": "Hi, what are some tourist attractions that tourist visit? | do you want the name  of the tourist attractions  that tourist visit? | Yes please.",
        "query": "SELECT t1.name FROM tourist_attractions AS t1 JOIN visitors AS t2 JOIN visits AS t3 ON t1.tourist_attraction_id = t3.tourist_attraction_id AND t2.tourist_id = t3.tourist_id",
        "schema": "CREATE TABLE Visitors (Tourist_ID NUMBER, Tourist_Details TEXT); CREATE TABLE Tourist_Attractions (Tourist_Attraction_ID NUMBER, How_to_Get_There TEXT, Attraction_Type_Code TEXT, Name TEXT, Description TEXT); CREATE TABLE Visits (Tourist_ID NUMBER, Tourist_Attraction_ID NUMBER, Visit_ID NUMBER, Visit_Details TEXT);"
      },
      {
        "question": "When did they visit parking?",
        "query": "SELECT t3.visit_date FROM tourist_attractions AS t1 JOIN visitors AS t2 JOIN visits AS t3 ON t1.tourist_attraction_id = t3.tourist_attraction_id AND t2.tourist_id = t3.tourist_id WHERE t2.tourist_details = \"Vincent\" UNION SELECT t3.visit_date FROM tourist_attractions AS t1 JOIN visitors AS t2 JOIN visits AS t3 ON t1.tourist_attraction_id = t3.tourist_attraction_id AND t2.tourist_id = t3.tourist_id WHERE t2.tourist_details = \"Marcelle\"",
        "schema": "CREATE TABLE Tourist_Attractions (Name TEXT, Attraction_Type_Code TEXT, Description TEXT, Tourist_Attraction_ID NUMBER, How_to_Get_There TEXT); CREATE TABLE Visits (Tourist_Attraction_ID NUMBER, Visit_Details TEXT, Visit_Date TIME, Tourist_ID NUMBER, Visit_ID NUMBER); CREATE TABLE Visitors (Tourist_Details TEXT, Tourist_ID NUMBER);"
      },
      {
        "question": "How did they get to parking?",
        "query": "SELECT t1.name,t3.visit_date,t1.how_to_get_there FROM tourist_attractions AS t1 JOIN visitors AS t2 JOIN visits AS t3 ON t1.tourist_attraction_id = t3.tourist_attraction_id AND t2.tourist_id = t3.tourist_id WHERE t2.tourist_details = \"Vincent\" UNION SELECT t1.name,t3.visit_date,t1.how_to_get_there FROM tourist_attractions AS t1 JOIN visitors AS t2 JOIN visits AS t3 ON t1.tourist_attraction_id = t3.tourist_attraction_id AND t2.tourist_id = t3.tourist_id WHERE t2.tourist_details = \"Marcelle\"",
        "schema": "CREATE TABLE Visits (Visit_Date TIME, Visit_ID NUMBER, Tourist_Attraction_ID NUMBER, Tourist_ID NUMBER, Visit_Details TEXT); CREATE TABLE Tourist_Attractions (Description TEXT, Attraction_Type_Code TEXT, Name TEXT, Tourist_Attraction_ID NUMBER, How_to_Get_There TEXT, Other_Details TEXT); CREATE TABLE Visitors (Tourist_Details TEXT, Tourist_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What  attraction type do most tourist attractions belong to? | Did  you want  to  know the attraction type that most tourist attractions belong to? code  or  description? | Yes, can you give me the codes please?",
        "query": "SELECT t2.attraction_type_code FROM ref_attraction_types AS t1 JOIN tourist_attractions AS t2 ON t1.attraction_type_code = t2.attraction_type_code GROUP BY t2.attraction_type_code ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Tourist_Attractions (Name TEXT, Description TEXT, Tourist_Attraction_ID NUMBER, Attraction_Type_Code TEXT); CREATE TABLE Ref_Attraction_Types (Attraction_Type_Description TEXT, Attraction_Type_Code TEXT);"
      },
      {
        "question": "What is its description? | Did  you  also  want  to konw  the description the attraction type most tourist attractions belong to? | yes",
        "query": "SELECT t1.attraction_type_description FROM ref_attraction_types AS t1 JOIN tourist_attractions AS t2 ON t1.attraction_type_code = t2.attraction_type_code GROUP BY t2.attraction_type_code ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Photos (Tourist_Attraction_ID NUMBER, Description TEXT); CREATE TABLE Ref_Attraction_Types (Attraction_Type_Code TEXT, Attraction_Type_Description TEXT); CREATE TABLE Locations (Address TEXT, Location_ID NUMBER, Location_Name TEXT); CREATE TABLE Tourist_Attractions (Location_ID NUMBER, Tourist_Attraction_ID NUMBER, Name TEXT, Description TEXT, Attraction_Type_Code TEXT);"
      },
      {
        "question": "List the names of the attractions which belong to gallery type | Did   you  mean  all  the names? | yes",
        "query": "SELECT t2.name FROM ref_attraction_types AS t1 JOIN tourist_attractions AS t2 ON t1.attraction_type_code = t2.attraction_type_code WHERE attraction_type_description = \"gallery\"",
        "schema": "CREATE TABLE Locations (Location_Name TEXT, Address TEXT, Location_ID NUMBER); CREATE TABLE Ref_Attraction_Types (Attraction_Type_Description TEXT, Attraction_Type_Code TEXT); CREATE TABLE Tourist_Attractions (Attraction_Type_Code TEXT, Tourist_Attraction_ID NUMBER, Name TEXT, Location_ID NUMBER, Description TEXT); CREATE TABLE Photos (Description TEXT, Tourist_Attraction_ID NUMBER);"
      },
      {
        "question": "How many gallery type attractions are there? | Can   you  give  more  info  about  this  ? | How many attractions belong to gallery type?",
        "query": "SELECT COUNT ( * ) FROM ref_attraction_types AS t1 JOIN tourist_attractions AS t2 ON t1.attraction_type_code = t2.attraction_type_code WHERE attraction_type_description = \"gallery\"",
        "schema": "CREATE TABLE Ref_Attraction_Types (Attraction_Type_Description TEXT, Attraction_Type_Code TEXT); CREATE TABLE Tourist_Attractions (Tourist_Attraction_ID NUMBER, Description TEXT, How_to_Get_There TEXT, Location_ID NUMBER, Attraction_Type_Code TEXT, Name TEXT); CREATE TABLE Photos (Tourist_Attraction_ID NUMBER, Description TEXT); CREATE TABLE Locations (Location_Name TEXT, Location_ID NUMBER, Address TEXT);"
      },
      {
        "question": "What are the opening hours of the haunted mansion?",
        "query": "SELECT opening_hours FROM tourist_attractions WHERE name = \"haunted mansion\"",
        "schema": "CREATE TABLE Tourist_Attractions (Description TEXT, Name TEXT, Tourist_Attraction_ID NUMBER, Opening_Hours TEXT, Location_ID NUMBER, Attraction_Type_Code TEXT, How_to_Get_There TEXT); CREATE TABLE Locations (Address TEXT, Location_Name TEXT, Location_ID NUMBER); CREATE TABLE Ref_Attraction_Types (Attraction_Type_Description TEXT, Attraction_Type_Code TEXT); CREATE TABLE Photos (Description TEXT, Tourist_Attraction_ID NUMBER);"
      }
    ],
    [
      {
        "question": "How many hotels have a price of over 10000?",
        "query": "SELECT COUNT ( * ) FROM hotels WHERE price_range > 10000",
        "schema": "CREATE TABLE Tourist_Attractions (Name TEXT, Tourist_Attraction_ID NUMBER); CREATE TABLE Hotels (price_range NUMBER, hotel_id NUMBER, other_hotel_details TEXT);"
      },
      {
        "question": "What are the maximum number of stars a hotel with price above 10000 can get?",
        "query": "SELECT MAX ( star_rating_code ) FROM hotels WHERE price_range > 10000",
        "schema": "CREATE TABLE Ref_Hotel_Star_Ratings (star_rating_description TEXT, star_rating_code TEXT); CREATE TABLE Hotels (hotel_id NUMBER, other_hotel_details TEXT, star_rating_code TEXT, price_range NUMBER); CREATE TABLE Tourist_Attractions (Name TEXT, Tourist_Attraction_ID NUMBER);"
      },
      {
        "question": "What are the star rating descriptions of these hotels? | You mean the hotels with price above 10000? | Yes. The ones we've been talking about.",
        "query": "SELECT t2.star_rating_description FROM hotels AS t1 JOIN ref_hotel_star_ratings AS t2 ON t1.star_rating_code = t2.star_rating_code WHERE t1.price_range > 10000",
        "schema": "CREATE TABLE Ref_Hotel_Star_Ratings (star_rating_description TEXT, star_rating_code TEXT); CREATE TABLE Tourist_Attractions (Name TEXT, Tourist_Attraction_ID NUMBER); CREATE TABLE Hotels (other_hotel_details TEXT, star_rating_code TEXT, hotel_id NUMBER, price_range NUMBER);"
      }
    ],
    [
      {
        "question": "Show me the location ID of the Tourist Attraction ID 2113?",
        "query": "SELECT location_id FROM tourist_attractions WHERE tourist_attraction_id = '2113'",
        "schema": "CREATE TABLE Staff (Tourist_Attraction_ID NUMBER); CREATE TABLE Visits (Tourist_Attraction_ID NUMBER); CREATE TABLE Photos (Tourist_Attraction_ID NUMBER); CREATE TABLE Tourist_Attractions (How_to_Get_There TEXT, Location_ID NUMBER, Name TEXT, Tourist_Attraction_ID NUMBER); CREATE TABLE Locations (Location_Name TEXT, Address TEXT, Location_ID NUMBER);"
      },
      {
        "question": "Show the transportation method least people choose to get to tourist attractions.",
        "query": "SELECT how_to_get_there FROM tourist_attractions GROUP BY how_to_get_there ORDER BY COUNT ( * ) LIMIT 1",
        "schema": "CREATE TABLE Photos (Tourist_Attraction_ID NUMBER); CREATE TABLE Visits (Tourist_Attraction_ID NUMBER); CREATE TABLE Locations (Location_ID NUMBER, Location_Name TEXT, Address TEXT); CREATE TABLE Tourist_Attractions (How_to_Get_There TEXT, Location_ID NUMBER, Name TEXT, Tourist_Attraction_ID NUMBER); CREATE TABLE Staff (Tourist_Attraction_ID NUMBER);"
      },
      {
        "question": "Show the transportation method most people choose to get to tourist attractions?",
        "query": "SELECT how_to_get_there FROM tourist_attractions GROUP BY how_to_get_there ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Locations (Location_Name TEXT, Location_ID NUMBER, Address TEXT); CREATE TABLE Visits (Tourist_Attraction_ID NUMBER); CREATE TABLE Photos (Tourist_Attraction_ID NUMBER); CREATE TABLE Tourist_Attractions (Name TEXT, Tourist_Attraction_ID NUMBER, Location_ID NUMBER, How_to_Get_There TEXT); CREATE TABLE Staff (Tourist_Attraction_ID NUMBER);"
      }
    ],
    [
      {
        "question": "can you show me a list of where i can go on bus? | do you want the id of location or tourist attraction or the name? | yes",
        "query": "SELECT tourist_attraction_id,location_id,name FROM tourist_attractions WHERE how_to_get_there = 'bus'",
        "schema": "CREATE TABLE Locations (Location_ID NUMBER, Address TEXT, Location_Name TEXT); CREATE TABLE Photos (Tourist_Attraction_ID NUMBER); CREATE TABLE Tourist_Attractions (Tourist_Attraction_ID NUMBER, Name TEXT, How_to_Get_There TEXT, Location_ID NUMBER);"
      },
      {
        "question": "can you show me a list of location id?",
        "query": "SELECT location_id FROM tourist_attractions",
        "schema": "CREATE TABLE Photos (Tourist_Attraction_ID NUMBER); CREATE TABLE Tourist_Attractions (Location_ID NUMBER, Name TEXT, Tourist_Attraction_ID NUMBER, How_to_Get_There TEXT); CREATE TABLE Locations (Address TEXT, Location_Name TEXT, Location_ID NUMBER);"
      },
      {
        "question": "i want to learn attraction type code?",
        "query": "SELECT location_id,attraction_type_code FROM tourist_attractions",
        "schema": "CREATE TABLE Tourist_Attractions (Attraction_Type_Code TEXT, How_to_Get_There TEXT, Tourist_Attraction_ID NUMBER, Name TEXT, Location_ID NUMBER); CREATE TABLE Photos (Tourist_Attraction_ID NUMBER); CREATE TABLE Locations (Address TEXT, Location_ID NUMBER, Location_Name TEXT); CREATE TABLE Ref_Attraction_Types (Attraction_Type_Code TEXT);"
      }
    ],
    [
      {
        "question": "Thanks. What is the visit details of the visitor whose detail is Vincent?",
        "query": "SELECT t2.visit_details FROM visitors AS t1 JOIN visits AS t2 ON t1.tourist_id = t2.tourist_id WHERE t1.tourist_details = \"Vincent\"",
        "schema": "CREATE TABLE Tourist_Attractions (Tourist_Attraction_ID NUMBER); CREATE TABLE Staff (Name TEXT); CREATE TABLE Visits (Tourist_ID NUMBER, Visit_Details TEXT, Visit_ID NUMBER, Tourist_Attraction_ID NUMBER); CREATE TABLE Visitors (Tourist_Details TEXT, Tourist_ID NUMBER);"
      },
      {
        "question": "What about the visit dates?",
        "query": "SELECT t2.visit_date FROM visitors AS t1 JOIN visits AS t2 ON t1.tourist_id = t2.tourist_id WHERE t1.tourist_details = \"Vincent\"",
        "schema": "CREATE TABLE Tourist_Attractions (Tourist_Attraction_ID NUMBER); CREATE TABLE Visitors (Tourist_Details TEXT, Tourist_ID NUMBER); CREATE TABLE Visits (Tourist_ID NUMBER, Tourist_Attraction_ID NUMBER, Visit_Details TEXT, Visit_Date TIME, Visit_ID NUMBER); CREATE TABLE Staff (Name TEXT);"
      },
      {
        "question": "Can you show me dates of all visits before the year 2013 only?",
        "query": "SELECT visit_date FROM visits WHERE visit_date < \"2013-01-01 00:00:00\"",
        "schema": "CREATE TABLE Visitors (Tourist_ID NUMBER, Tourist_Details TEXT); CREATE TABLE Visits (Tourist_ID NUMBER, Visit_ID NUMBER, Visit_Details TEXT, Visit_Date TIME, Tourist_Attraction_ID NUMBER); CREATE TABLE Staff (Name TEXT); CREATE TABLE Tourist_Attractions (Tourist_Attraction_ID NUMBER);"
      },
      {
        "question": "What are the visit date and details of the visitor whose detail is Toney?",
        "query": "SELECT t2.visit_date , t2.visit_details FROM visitors AS t1 JOIN visits AS t2 ON t1.tourist_id = t2.tourist_id WHERE t1.tourist_details = \"Toney\"",
        "schema": "CREATE TABLE Visits (Tourist_ID NUMBER, Visit_Details TEXT, Visit_Date TIME, Visit_ID NUMBER, Tourist_Attraction_ID NUMBER); CREATE TABLE Staff (Name TEXT); CREATE TABLE Visitors (Tourist_ID NUMBER, Tourist_Details TEXT); CREATE TABLE Tourist_Attractions (Tourist_Attraction_ID NUMBER);"
      },
      {
        "question": "What about for Graciela?",
        "query": "SELECT t2.visit_date , t2.visit_details FROM visitors AS t1 JOIN visits AS t2 ON t1.tourist_id = t2.tourist_id WHERE t1.tourist_details = \"Graciela\"",
        "schema": "CREATE TABLE Visits (Visit_Date TIME, Visit_ID NUMBER, Tourist_ID NUMBER, Tourist_Attraction_ID NUMBER, Visit_Details TEXT); CREATE TABLE Visitors (Tourist_Details TEXT, Tourist_ID NUMBER); CREATE TABLE Staff (Name TEXT); CREATE TABLE Tourist_Attractions (Tourist_Attraction_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Hello! Can you provide me with a list of the tourist attractions that are walking distance? | do you want to just return their names\uff1f | Ah yes!  For now could you please return both the tourist attraction id and the name?",
        "query": "SELECT name, tourist_attraction_id FROM tourist_attractions WHERE how_to_get_there = \"walk\"",
        "schema": "CREATE TABLE Photos (Tourist_Attraction_ID NUMBER); CREATE TABLE Tourist_Attractions (Tourist_Attraction_ID NUMBER, How_to_Get_There TEXT, Name TEXT);"
      },
      {
        "question": "Thank you could you also add to this list any tourist attractions located at 660 Shea Crescent?",
        "query": "SELECT t2.name, t2.tourist_attraction_id FROM locations AS t1 JOIN tourist_attractions AS t2 ON t1.location_id = t2.location_id WHERE t1.address = \"660 Shea Crescent\" OR t2.how_to_get_there = \"walk\"",
        "schema": "CREATE TABLE Tourist_Attractions (Location_ID NUMBER, Tourist_Attraction_ID NUMBER, How_to_Get_There TEXT, Name TEXT); CREATE TABLE Photos (Tourist_Attraction_ID NUMBER); CREATE TABLE Locations (Address TEXT, Location_ID NUMBER, Location_Name TEXT);"
      },
      {
        "question": "Thank you very much!  Could you add the Opening Hours to that list for each of the tourist attractions?",
        "query": "SELECT t2.name, t2.tourist_attraction_id, t2.opening_hours FROM locations AS t1 JOIN tourist_attractions AS t2 ON t1.location_id = t2.location_id WHERE t1.address = \"660 Shea Crescent\" OR t2.how_to_get_there = \"walk\"",
        "schema": "CREATE TABLE Tourist_Attractions (Opening_Hours TEXT, Location_ID NUMBER, Name TEXT, Tourist_Attraction_ID NUMBER, How_to_Get_There TEXT); CREATE TABLE Locations (Location_Name TEXT, Location_ID NUMBER, Address TEXT); CREATE TABLE Photos (Tourist_Attraction_ID NUMBER);"
      }
    ]
  ],
  "college_3": [
    [
      {
        "question": "Show me the name of instructors? | Here is the table of first and last names of faculties. | How many instructors are teaching top 3 number of courses?",
        "query": "SELECT COUNT ( * ) FROM ( SELECT * FROM course AS t1 JOIN faculty AS t2 ON t1.instructor = t2.facid GROUP BY t1.instructor ORDER BY COUNT ( * ) DESC LIMIT 3 )",
        "schema": "CREATE TABLE Course (Instructor NUMBER, CName TEXT); CREATE TABLE Faculty (Lname TEXT, Fname TEXT, FacID NUMBER, Room TEXT, Rank TEXT);"
      },
      {
        "question": "Show the first and last names of them",
        "query": "SELECT t2.fname, t2.lname FROM course AS t1 JOIN faculty AS t2 ON t1.instructor = t2.facid GROUP BY t1.instructor ORDER BY COUNT ( * ) DESC LIMIT 3",
        "schema": "CREATE TABLE Faculty (FacID NUMBER, Room TEXT, Fname TEXT, Rank TEXT, Lname TEXT); CREATE TABLE Course (Instructor NUMBER, CName TEXT);"
      }
    ],
    [
      {
        "question": "List grade points by letter grade?",
        "query": "SELECT gradepoint,lettergrade FROM gradeconversion",
        "schema": "CREATE TABLE Department (DNO NUMBER, DName TEXT); CREATE TABLE Course (DNO NUMBER, CID TEXT); CREATE TABLE Enrolled_in (Grade TEXT, CID TEXT, StuID NUMBER); CREATE TABLE Student (StuID NUMBER); CREATE TABLE Gradeconversion (lettergrade TEXT, gradepoint NUMBER); CREATE TABLE Faculty (FacID NUMBER);"
      },
      {
        "question": "List max of each grade for all letter grades?",
        "query": "SELECT MAX ( gradepoint ) FROM gradeconversion",
        "schema": "CREATE TABLE Gradeconversion (gradepoint NUMBER, lettergrade TEXT); CREATE TABLE Student (StuID NUMBER); CREATE TABLE Faculty (FacID NUMBER); CREATE TABLE Enrolled_in (Grade TEXT, StuID NUMBER, CID TEXT); CREATE TABLE Department (DName TEXT, DNO NUMBER); CREATE TABLE Course (CID TEXT, DNO NUMBER);"
      },
      {
        "question": "The max for each letter grade?",
        "query": "SELECT lettergrade, MAX ( gradepoint ) FROM gradeconversion GROUP BY lettergrade",
        "schema": "CREATE TABLE Enrolled_in (StuID NUMBER, CID TEXT, Grade TEXT); CREATE TABLE Student (StuID NUMBER); CREATE TABLE Faculty (FacID NUMBER); CREATE TABLE Gradeconversion (gradepoint NUMBER, lettergrade TEXT); CREATE TABLE Course (CID TEXT, DNO NUMBER); CREATE TABLE Department (DNO NUMBER, DName TEXT);"
      },
      {
        "question": "List the min grade point for each letter grade?",
        "query": "SELECT MIN ( gradepoint ) , lettergrade FROM gradeconversion GROUP BY lettergrade",
        "schema": "CREATE TABLE Faculty (FacID NUMBER); CREATE TABLE Gradeconversion (gradepoint NUMBER, lettergrade TEXT); CREATE TABLE Enrolled_in (StuID NUMBER, CID TEXT, Grade TEXT); CREATE TABLE Department (DName TEXT, DNO NUMBER); CREATE TABLE Course (DNO NUMBER, CID TEXT); CREATE TABLE Student (StuID NUMBER);"
      },
      {
        "question": "Find the min grade point for all letter grade?",
        "query": "SELECT MIN ( gradepoint ) FROM gradeconversion",
        "schema": "CREATE TABLE Course (CID TEXT, DNO NUMBER); CREATE TABLE Department (DName TEXT, DNO NUMBER); CREATE TABLE Student (StuID NUMBER); CREATE TABLE Enrolled_in (CID TEXT, StuID NUMBER, Grade TEXT); CREATE TABLE Faculty (FacID NUMBER); CREATE TABLE Gradeconversion (gradepoint NUMBER, lettergrade TEXT);"
      },
      {
        "question": "Find the max and min grade point for all letter grade?",
        "query": "SELECT MAX ( gradepoint ) , MIN ( gradepoint ) FROM gradeconversion",
        "schema": "CREATE TABLE Enrolled_in (StuID NUMBER, Grade TEXT, CID TEXT); CREATE TABLE Gradeconversion (gradepoint NUMBER, lettergrade TEXT); CREATE TABLE Student (StuID NUMBER); CREATE TABLE Course (CID TEXT, DNO NUMBER); CREATE TABLE Department (DNO NUMBER, DName TEXT); CREATE TABLE Faculty (FacID NUMBER);"
      }
    ],
    [
      {
        "question": "What is the grade of CID 550.681? | Did you mean the grades of students who enrolled in the course with CID 550.681? | YES",
        "query": "SELECT grade FROM enrolled_in WHERE cid = \"550.681\"",
        "schema": "CREATE TABLE Enrolled_in (CID TEXT, StuID NUMBER, Grade TEXT); CREATE TABLE Department (DNO NUMBER); CREATE TABLE Course (CID TEXT, CName TEXT, DNO NUMBER); CREATE TABLE Student (StuID NUMBER); CREATE TABLE Gradeconversion (lettergrade TEXT, gradepoint NUMBER);"
      },
      {
        "question": "How many hours computer literacy course in a week?",
        "query": "SELECT hours FROM course WHERE cname = \"COMPUTER LITERACY\"",
        "schema": "CREATE TABLE Enrolled_in (StuID NUMBER, CID TEXT, Grade TEXT); CREATE TABLE Course (DNO NUMBER, Hours TEXT, CName TEXT, Days TEXT, CID TEXT); CREATE TABLE Department (DNO NUMBER); CREATE TABLE Student (StuID NUMBER); CREATE TABLE Gradeconversion (gradepoint NUMBER, lettergrade TEXT);"
      },
      {
        "question": "In which day of a week the course introduction to computer science is taught?",
        "query": "SELECT days FROM course WHERE cname = \"INTRODUCTION TO COMPUTER SCIENCE\"",
        "schema": "CREATE TABLE Gradeconversion (lettergrade TEXT, gradepoint NUMBER); CREATE TABLE Enrolled_in (CID TEXT, StuID NUMBER, Grade TEXT); CREATE TABLE Student (StuID NUMBER); CREATE TABLE Department (DNO NUMBER); CREATE TABLE Course (CID TEXT, CName TEXT, DNO NUMBER, Days TEXT, Hours TEXT);"
      }
    ],
    [
      {
        "question": "which dno has no stuid associated with it?",
        "query": "SELECT dno FROM department WHERE dno NOT IN ( SELECT dno FROM minor_in )",
        "schema": "CREATE TABLE Enrolled_in (StuID NUMBER); CREATE TABLE Member_of (FacID NUMBER, DNO NUMBER, Appt_Type TEXT); CREATE TABLE Faculty (FacID NUMBER, Rank TEXT); CREATE TABLE Student (StuID NUMBER, city_code TEXT); CREATE TABLE Course (CID TEXT, CName TEXT, Instructor NUMBER, DNO NUMBER); CREATE TABLE Minor_in (DNO NUMBER, StuID NUMBER); CREATE TABLE Department (DName TEXT, DNO NUMBER);"
      },
      {
        "question": "what are the dname's of those DNO's?",
        "query": "SELECT dname FROM department WHERE dno NOT IN ( SELECT dno FROM minor_in )",
        "schema": "CREATE TABLE Faculty (FacID NUMBER, Rank TEXT); CREATE TABLE Student (city_code TEXT, StuID NUMBER); CREATE TABLE Department (DName TEXT, DNO NUMBER); CREATE TABLE Minor_in (StuID NUMBER, DNO NUMBER); CREATE TABLE Enrolled_in (StuID NUMBER); CREATE TABLE Course (CID TEXT, CName TEXT, Instructor NUMBER, DNO NUMBER); CREATE TABLE Member_of (Appt_Type TEXT, FacID NUMBER, DNO NUMBER);"
      },
      {
        "question": "sort the department names alphabetically",
        "query": "SELECT dname FROM department WHERE dno NOT IN ( SELECT dno FROM minor_in ) ORDER BY dname",
        "schema": "CREATE TABLE Course (DNO NUMBER, Instructor NUMBER, CName TEXT, CID TEXT); CREATE TABLE Enrolled_in (StuID NUMBER); CREATE TABLE Student (city_code TEXT, StuID NUMBER); CREATE TABLE Member_of (Appt_Type TEXT, FacID NUMBER, DNO NUMBER); CREATE TABLE Faculty (Rank TEXT, FacID NUMBER); CREATE TABLE Minor_in (DNO NUMBER, StuID NUMBER); CREATE TABLE Department (DNO NUMBER, DName TEXT);"
      }
    ],
    [
      {
        "question": "How many faculty members are in building Barton?",
        "query": "SELECT COUNT ( * ) FROM faculty WHERE building = \"Barton\"",
        "schema": "CREATE TABLE Department (DNO NUMBER, Building TEXT, DName TEXT, Room TEXT); CREATE TABLE Faculty (Building TEXT, Room TEXT, Fname TEXT, Rank TEXT, FacID NUMBER, Lname TEXT); CREATE TABLE Member_of (DNO NUMBER, FacID NUMBER);"
      },
      {
        "question": "Please list the faculty members in building Barton.",
        "query": "SELECT * FROM faculty WHERE building = \"Barton\"",
        "schema": "CREATE TABLE Faculty (Lname TEXT, Building TEXT, FacID NUMBER, Room TEXT, Rank TEXT, Fname TEXT); CREATE TABLE Department (Room TEXT, Building TEXT, DNO NUMBER, DName TEXT); CREATE TABLE Member_of (DNO NUMBER, FacID NUMBER);"
      },
      {
        "question": "Can you please get just their last names?",
        "query": "SELECT lname FROM faculty WHERE building = \"Barton\"",
        "schema": "CREATE TABLE Department (DNO NUMBER, Building TEXT, Room TEXT, DName TEXT); CREATE TABLE Faculty (Lname TEXT, Building TEXT, Room TEXT, Fname TEXT, FacID NUMBER, Rank TEXT); CREATE TABLE Member_of (DNO NUMBER, FacID NUMBER);"
      },
      {
        "question": "Of the faculty members in building Barton, how many are in each rank?",
        "query": "SELECT rank, COUNT ( * ) FROM faculty WHERE building = \"Barton\" GROUP BY rank",
        "schema": "CREATE TABLE Faculty (Building TEXT, FacID NUMBER, Room TEXT, Fname TEXT, Rank TEXT, Lname TEXT); CREATE TABLE Member_of (FacID NUMBER, DNO NUMBER); CREATE TABLE Department (Room TEXT, DNO NUMBER, Building TEXT, DName TEXT);"
      },
      {
        "question": "Can you please list the last names of the faculty in Barton one more time, in alphabetical order?",
        "query": "SELECT lname FROM faculty WHERE building = \"Barton\" ORDER BY lname",
        "schema": "CREATE TABLE Faculty (Fname TEXT, Building TEXT, Rank TEXT, Lname TEXT, FacID NUMBER, Room TEXT); CREATE TABLE Department (DName TEXT, Room TEXT, Building TEXT, DNO NUMBER); CREATE TABLE Member_of (DNO NUMBER, FacID NUMBER);"
      }
    ],
    [
      {
        "question": "* I have left the chat *",
        "query": "SELECT room FROM faculty WHERE rank = \"Instructor\"",
        "schema": "CREATE TABLE Faculty (Room TEXT, Lname TEXT, Building TEXT, Fname TEXT, Rank TEXT, FacID NUMBER); CREATE TABLE Student (LName TEXT, StuID NUMBER, Fname TEXT); CREATE TABLE Enrolled_in (CID TEXT, StuID NUMBER); CREATE TABLE Member_of (DNO NUMBER, FacID NUMBER); CREATE TABLE Department (DNO NUMBER, Room TEXT); CREATE TABLE Course (DNO NUMBER, CID TEXT, Instructor NUMBER, Hours TEXT); CREATE TABLE Minor_in (StuID NUMBER);"
      },
      {
        "question": "what is the first name of  the instructor who teaches the least number of courses?",
        "query": "SELECT t2.fname FROM course AS t1 JOIN faculty AS t2 ON t1.instructor = t2.facid GROUP BY t1.instructor ORDER BY COUNT ( * ) LIMIT 1",
        "schema": "CREATE TABLE Enrolled_in (StuID NUMBER, CID TEXT); CREATE TABLE Member_of (DNO NUMBER, FacID NUMBER); CREATE TABLE Minor_in (StuID NUMBER); CREATE TABLE Student (StuID NUMBER, Fname TEXT, LName TEXT); CREATE TABLE Course (CName TEXT, Instructor NUMBER, CID TEXT, Hours TEXT, DNO NUMBER); CREATE TABLE Department (Room TEXT, DNO NUMBER); CREATE TABLE Faculty (Fname TEXT, Building TEXT, FacID NUMBER, Room TEXT, Lname TEXT, Rank TEXT);"
      }
    ],
    [
      {
        "question": "What is the highest grade point?",
        "query": "SELECT MAX ( gradepoint ) FROM gradeconversion",
        "schema": "CREATE TABLE Member_of (FacID NUMBER); CREATE TABLE Enrolled_in (CID TEXT, StuID NUMBER, Grade TEXT); CREATE TABLE Department (DNO NUMBER, DName TEXT); CREATE TABLE Student (StuID NUMBER); CREATE TABLE Faculty (FacID NUMBER); CREATE TABLE Gradeconversion (lettergrade TEXT, gradepoint NUMBER); CREATE TABLE Course (Instructor NUMBER, CID TEXT);"
      },
      {
        "question": "What is the highest grade point for each letter grade?",
        "query": "SELECT lettergrade, MAX ( gradepoint ) FROM gradeconversion GROUP BY lettergrade",
        "schema": "CREATE TABLE Enrolled_in (CID TEXT, Grade TEXT, StuID NUMBER); CREATE TABLE Member_of (FacID NUMBER); CREATE TABLE Gradeconversion (gradepoint NUMBER, lettergrade TEXT); CREATE TABLE Student (StuID NUMBER); CREATE TABLE Course (CID TEXT, Instructor NUMBER); CREATE TABLE Faculty (FacID NUMBER); CREATE TABLE Department (DName TEXT, DNO NUMBER);"
      },
      {
        "question": "Can you show both the highest and lowest grade point for each letter grade?",
        "query": "SELECT lettergrade, MAX ( gradepoint ) , MIN ( gradepoint ) FROM gradeconversion GROUP BY lettergrade",
        "schema": "CREATE TABLE Student (StuID NUMBER); CREATE TABLE Course (CID TEXT, Instructor NUMBER); CREATE TABLE Member_of (FacID NUMBER); CREATE TABLE Enrolled_in (CID TEXT, Grade TEXT, StuID NUMBER); CREATE TABLE Gradeconversion (lettergrade TEXT, gradepoint NUMBER); CREATE TABLE Faculty (FacID NUMBER); CREATE TABLE Department (DName TEXT, DNO NUMBER);"
      }
    ],
    [
      {
        "question": "Room and phone no. of id 1121?",
        "query": "SELECT room, phone FROM faculty WHERE facid = 1121",
        "schema": "CREATE TABLE Member_of (DNO NUMBER, FacID NUMBER); CREATE TABLE Course (Instructor NUMBER, CID TEXT, DNO NUMBER); CREATE TABLE Department (DPhone NUMBER, Room TEXT, DName TEXT, DNO NUMBER); CREATE TABLE Faculty (FacID NUMBER, Phone NUMBER, Room TEXT); CREATE TABLE Student (StuID NUMBER); CREATE TABLE Minor_in (DNO NUMBER, StuID NUMBER);"
      },
      {
        "question": "Provide the rooms of faculties with rank professor who live in building NEB?",
        "query": "SELECT room FROM faculty WHERE rank = \"Professor\" AND building = \"NEB\"",
        "schema": "CREATE TABLE Member_of (FacID NUMBER, DNO NUMBER); CREATE TABLE Course (DNO NUMBER, Instructor NUMBER, CID TEXT); CREATE TABLE Minor_in (StuID NUMBER, DNO NUMBER); CREATE TABLE Student (StuID NUMBER); CREATE TABLE Faculty (Rank TEXT, Phone NUMBER, Room TEXT, Building TEXT, FacID NUMBER); CREATE TABLE Department (Room TEXT, DNO NUMBER, DPhone NUMBER, Building TEXT, DName TEXT);"
      }
    ],
    [
      {
        "question": "What are the first names of the students that minor in the department with DNO 140?",
        "query": "SELECT t2.fname FROM minor_in AS t1 JOIN student AS t2 ON t1.stuid = t2.stuid WHERE t1.dno = 140",
        "schema": "CREATE TABLE Course (DNO NUMBER, CID TEXT); CREATE TABLE Department (DNO NUMBER, DName TEXT); CREATE TABLE Faculty (FacID NUMBER, Lname TEXT, Fname TEXT); CREATE TABLE Enrolled_in (CID TEXT, StuID NUMBER); CREATE TABLE Student (LName TEXT, Fname TEXT, StuID NUMBER); CREATE TABLE Minor_in (DNO NUMBER, StuID NUMBER); CREATE TABLE Member_of (FacID NUMBER, Appt_Type TEXT, DNO NUMBER);"
      },
      {
        "question": "What are the last names of the students that minor in the department with DNO 140?",
        "query": "SELECT t2.lname FROM minor_in AS t1 JOIN student AS t2 ON t1.stuid = t2.stuid WHERE t1.dno = 140",
        "schema": "CREATE TABLE Enrolled_in (StuID NUMBER, CID TEXT); CREATE TABLE Student (LName TEXT, StuID NUMBER, Fname TEXT); CREATE TABLE Faculty (Fname TEXT, Lname TEXT, FacID NUMBER); CREATE TABLE Department (DName TEXT, DNO NUMBER); CREATE TABLE Course (DNO NUMBER, CID TEXT); CREATE TABLE Member_of (FacID NUMBER, DNO NUMBER, Appt_Type TEXT); CREATE TABLE Minor_in (DNO NUMBER, StuID NUMBER);"
      },
      {
        "question": "What are the ages of the students with the last name Lee?",
        "query": "SELECT age FROM student WHERE lname = 'Lee'",
        "schema": "CREATE TABLE Faculty (FacID NUMBER, Fname TEXT, Lname TEXT); CREATE TABLE Minor_in (StuID NUMBER, DNO NUMBER); CREATE TABLE Member_of (Appt_Type TEXT, FacID NUMBER, DNO NUMBER); CREATE TABLE Enrolled_in (CID TEXT, StuID NUMBER); CREATE TABLE Department (DName TEXT, DNO NUMBER); CREATE TABLE Student (LName TEXT, Age NUMBER, StuID NUMBER, Fname TEXT); CREATE TABLE Course (CID TEXT, DNO NUMBER);"
      },
      {
        "question": "What are the student ids of the students with the last name Smith?",
        "query": "SELECT stuid FROM student WHERE lname = 'Smith'",
        "schema": "CREATE TABLE Faculty (Lname TEXT, Fname TEXT, FacID NUMBER); CREATE TABLE Student (Age NUMBER, StuID NUMBER, LName TEXT, Fname TEXT); CREATE TABLE Member_of (Appt_Type TEXT, FacID NUMBER, DNO NUMBER); CREATE TABLE Course (DNO NUMBER, CID TEXT); CREATE TABLE Minor_in (StuID NUMBER, DNO NUMBER); CREATE TABLE Enrolled_in (CID TEXT, StuID NUMBER); CREATE TABLE Department (DName TEXT, DNO NUMBER);"
      }
    ],
    [
      {
        "question": "what is the last names of faculties who are members of computer science department?",
        "query": "SELECT t2.lname FROM department AS t1 JOIN faculty AS t2 ON t1.dno = t3.dno JOIN member_of AS t3 ON t2.facid = t3.facid WHERE t1.dname = \"Computer Science\"",
        "schema": "CREATE TABLE Faculty (Sex TEXT, FacID NUMBER, Rank TEXT, Lname TEXT, Fname TEXT); CREATE TABLE Member_of (FacID NUMBER, DNO NUMBER, Appt_Type TEXT); CREATE TABLE Student (Fname TEXT); CREATE TABLE Department (DNO NUMBER, DName TEXT); CREATE TABLE Course (Instructor NUMBER);"
      },
      {
        "question": "what is the rank for Goodrich | Goodrich is the last name, right? | yes",
        "query": "SELECT rank FROM faculty WHERE lname = \"Goodrich\"",
        "schema": "CREATE TABLE Course (Instructor NUMBER); CREATE TABLE Member_of (Appt_Type TEXT, FacID NUMBER, DNO NUMBER); CREATE TABLE Student (Fname TEXT); CREATE TABLE Faculty (Lname TEXT, Fname TEXT, FacID NUMBER, Sex TEXT, Rank TEXT); CREATE TABLE Department (DName TEXT, DNO NUMBER);"
      }
    ],
    [
      {
        "question": "How many students are there?",
        "query": "SELECT COUNT ( * ) FROM student",
        "schema": "CREATE TABLE Minor_in (DNO NUMBER, StuID NUMBER); CREATE TABLE Student (LName TEXT, Age NUMBER, Advisor NUMBER, Fname TEXT, StuID NUMBER); CREATE TABLE Department (DNO NUMBER, DName TEXT); CREATE TABLE Enrolled_in (CID TEXT, StuID NUMBER); CREATE TABLE Course (CID TEXT, CName TEXT, DNO NUMBER, Instructor NUMBER); CREATE TABLE Faculty (FacID NUMBER); CREATE TABLE Member_of (Appt_Type TEXT, FacID NUMBER, DNO NUMBER);"
      },
      {
        "question": "What are their names?",
        "query": "SELECT lname, fname FROM student",
        "schema": "CREATE TABLE Enrolled_in (StuID NUMBER, CID TEXT); CREATE TABLE Student (LName TEXT, Fname TEXT, Advisor NUMBER, StuID NUMBER, Age NUMBER); CREATE TABLE Faculty (Fname TEXT, FacID NUMBER, Lname TEXT); CREATE TABLE Course (Instructor NUMBER, DNO NUMBER, CID TEXT, CName TEXT); CREATE TABLE Department (DName TEXT, DNO NUMBER); CREATE TABLE Minor_in (DNO NUMBER, StuID NUMBER); CREATE TABLE Member_of (Appt_Type TEXT, FacID NUMBER, DNO NUMBER);"
      },
      {
        "question": "Can I see a list of students who's first name contains letter \"a\"?",
        "query": "SELECT DISTINCT fname FROM student WHERE fname LIKE '%a%'",
        "schema": "CREATE TABLE Member_of (DNO NUMBER, Appt_Type TEXT, FacID NUMBER); CREATE TABLE Enrolled_in (CID TEXT, StuID NUMBER); CREATE TABLE Course (CID TEXT, Instructor NUMBER, DNO NUMBER, CName TEXT); CREATE TABLE Department (DNO NUMBER, DName TEXT); CREATE TABLE Faculty (Lname TEXT, Fname TEXT, FacID NUMBER); CREATE TABLE Student (Advisor NUMBER, Fname TEXT, StuID NUMBER, Age NUMBER, LName TEXT); CREATE TABLE Minor_in (StuID NUMBER, DNO NUMBER);"
      }
    ],
    [
      {
        "question": "what is the rank of Mark | Do you mean the rank of the faculty whose fname is Mark? | exactly",
        "query": "SELECT rank FROM faculty WHERE fname = \"Mark\"",
        "schema": "CREATE TABLE Faculty (Fname TEXT, Rank TEXT, Lname TEXT, FacID NUMBER);"
      },
      {
        "question": "how many faculty are presented on the table",
        "query": "SELECT COUNT ( * ) FROM faculty",
        "schema": "CREATE TABLE Faculty (Lname TEXT, Fname TEXT, FacID NUMBER, Rank TEXT);"
      },
      {
        "question": "what are all the ranks on the table",
        "query": "SELECT DISTINCT rank FROM faculty",
        "schema": "CREATE TABLE Faculty (Rank TEXT, FacID NUMBER, Fname TEXT, Lname TEXT);"
      }
    ],
    [
      {
        "question": "Can you show me all the course ids and enrollments?",
        "query": "SELECT t1.cid, COUNT ( * ) FROM course AS t1 JOIN enrolled_in AS t2 ON t1.cid = t2.cid GROUP BY t2.cid",
        "schema": "CREATE TABLE Department (DNO NUMBER, DName TEXT); CREATE TABLE Enrolled_in (StuID NUMBER, CID TEXT); CREATE TABLE Course (DNO NUMBER, CID TEXT, CName TEXT); CREATE TABLE Student (StuID NUMBER); CREATE TABLE Faculty (FacID NUMBER);"
      },
      {
        "question": "Which courses have at least five enrollments?",
        "query": "SELECT * FROM course AS t1 JOIN enrolled_in AS t2 ON t1.cid = t2.cid GROUP BY t2.cid HAVING COUNT ( * ) > = 5",
        "schema": "CREATE TABLE Course (CID TEXT, DNO NUMBER, CName TEXT); CREATE TABLE Student (StuID NUMBER); CREATE TABLE Faculty (FacID NUMBER); CREATE TABLE Enrolled_in (StuID NUMBER, CID TEXT); CREATE TABLE Department (DNO NUMBER, DName TEXT);"
      },
      {
        "question": "Can you show me their ids?",
        "query": "SELECT t1.cid FROM course AS t1 JOIN enrolled_in AS t2 ON t1.cid = t2.cid GROUP BY t2.cid HAVING COUNT ( * ) > = 5",
        "schema": "CREATE TABLE Student (StuID NUMBER); CREATE TABLE Enrolled_in (StuID NUMBER, CID TEXT); CREATE TABLE Faculty (FacID NUMBER); CREATE TABLE Department (DNO NUMBER, DName TEXT); CREATE TABLE Course (CName TEXT, DNO NUMBER, CID TEXT);"
      }
    ],
    [
      {
        "question": "Can you please tell me the full names of all faculty who are members of department number 520?",
        "query": "SELECT t1.fname , t1.lname FROM faculty AS t1 JOIN member_of AS t2 ON t1.facid = t2.facid WHERE t2.dno = 520",
        "schema": "CREATE TABLE Department (DName TEXT, DNO NUMBER); CREATE TABLE Member_of (DNO NUMBER, FacID NUMBER); CREATE TABLE Faculty (Lname TEXT, Fname TEXT, Rank TEXT, FacID NUMBER);"
      },
      {
        "question": "What about for department number 600?",
        "query": "SELECT t1.fname , t1.lname FROM faculty AS t1 JOIN member_of AS t2 ON t1.facid = t2.facid WHERE t2.dno = 600",
        "schema": "CREATE TABLE Department (DName TEXT, DNO NUMBER); CREATE TABLE Faculty (FacID NUMBER, Rank TEXT, Lname TEXT, Fname TEXT); CREATE TABLE Member_of (FacID NUMBER, DNO NUMBER);"
      },
      {
        "question": "What is the sex of each of those faculty who are members of the department with department number 600.",
        "query": "SELECT t1.sex FROM faculty AS t1 JOIN member_of AS t2 ON t1.facid = t2.facid WHERE t2.dno = 600",
        "schema": "CREATE TABLE Department (DNO NUMBER, DName TEXT); CREATE TABLE Faculty (Rank TEXT, Fname TEXT, Sex TEXT, FacID NUMBER, Lname TEXT); CREATE TABLE Member_of (DNO NUMBER, FacID NUMBER);"
      }
    ],
    [
      {
        "question": "Hi, can you tell me how many instructors there are?",
        "query": "SELECT COUNT ( DISTINCT instructor ) FROM course",
        "schema": "CREATE TABLE Course (Instructor NUMBER); CREATE TABLE Department (DName TEXT, DNO NUMBER); CREATE TABLE Member_of (FacID NUMBER); CREATE TABLE Faculty (Sex TEXT, FacID NUMBER, Lname TEXT, Rank TEXT, Room TEXT, Fname TEXT); CREATE TABLE Student (Advisor NUMBER, StuID NUMBER);"
      },
      {
        "question": "Can you tell me which instructor teaches the most number of courses?",
        "query": "SELECT instructor FROM course GROUP BY instructor ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Student (Advisor NUMBER, StuID NUMBER); CREATE TABLE Course (CID TEXT, Hours TEXT, Instructor NUMBER, CName TEXT); CREATE TABLE Faculty (FacID NUMBER, Room TEXT, Sex TEXT, Rank TEXT, Fname TEXT, Lname TEXT); CREATE TABLE Member_of (FacID NUMBER); CREATE TABLE Department (DName TEXT, DNO NUMBER);"
      }
    ],
    [
      {
        "question": "which student had highest grade | Here are the first and last names of the student who had the highest grade. | which letter grade has the lowest grade point?",
        "query": "SELECT DISTINCT t2.lettergrade FROM enrolled_in AS t1 JOIN gradeconversion AS t2 JOIN student AS t3 ON t1.grade = t2.lettergrade AND t1.stuid = t3.stuid ORDER BY t2.gradepoint LIMIT 1",
        "schema": "CREATE TABLE Student (StuID NUMBER, Fname TEXT, LName TEXT); CREATE TABLE Enrolled_in (Grade TEXT, StuID NUMBER); CREATE TABLE Gradeconversion (gradepoint NUMBER, lettergrade TEXT);"
      }
    ],
    [
      {
        "question": "How many students are there?",
        "query": "SELECT COUNT ( * ) FROM student",
        "schema": "CREATE TABLE Enrolled_in (CID TEXT, StuID NUMBER); CREATE TABLE Minor_in (DNO NUMBER, StuID NUMBER); CREATE TABLE Course (DNO NUMBER, Instructor NUMBER, CID TEXT); CREATE TABLE Member_of (DNO NUMBER, Appt_Type TEXT, FacID NUMBER); CREATE TABLE Department (DNO NUMBER, DName TEXT); CREATE TABLE Student (Sex TEXT, Age NUMBER, StuID NUMBER, Advisor NUMBER, Fname TEXT, LName TEXT); CREATE TABLE Faculty (FacID NUMBER);"
      },
      {
        "question": "What are the first names of these students?",
        "query": "SELECT fname FROM student",
        "schema": "CREATE TABLE Course (Instructor NUMBER, DNO NUMBER, CID TEXT); CREATE TABLE Member_of (DNO NUMBER, Appt_Type TEXT, FacID NUMBER); CREATE TABLE Student (Advisor NUMBER, Age NUMBER, StuID NUMBER, LName TEXT, Fname TEXT, Sex TEXT); CREATE TABLE Department (DName TEXT, DNO NUMBER); CREATE TABLE Enrolled_in (CID TEXT, StuID NUMBER); CREATE TABLE Minor_in (StuID NUMBER, DNO NUMBER); CREATE TABLE Faculty (FacID NUMBER);"
      },
      {
        "question": "Out of these names, which names contain the letter a?",
        "query": "SELECT fname FROM student WHERE fname LIKE \"%a%\"",
        "schema": "CREATE TABLE Minor_in (StuID NUMBER, DNO NUMBER); CREATE TABLE Faculty (FacID NUMBER); CREATE TABLE Member_of (FacID NUMBER, Appt_Type TEXT, DNO NUMBER); CREATE TABLE Course (DNO NUMBER, CID TEXT, Instructor NUMBER); CREATE TABLE Department (DNO NUMBER, DName TEXT); CREATE TABLE Enrolled_in (StuID NUMBER, CID TEXT); CREATE TABLE Student (LName TEXT, Sex TEXT, Advisor NUMBER, Age NUMBER, Fname TEXT, StuID NUMBER);"
      }
    ],
    [
      {
        "question": "What is the maximum grade point of all students who live in NYC?",
        "query": "SELECT MAX ( t2.gradepoint ) FROM enrolled_in AS t1 JOIN gradeconversion AS t2 JOIN student AS t3 ON t1.grade = t2.lettergrade AND t1.stuid = t3.stuid WHERE t3.city_code = \"NYC\"",
        "schema": "CREATE TABLE Enrolled_in (Grade TEXT, StuID NUMBER); CREATE TABLE Department (DNO NUMBER, DName TEXT); CREATE TABLE Student (LName TEXT, city_code TEXT, Age NUMBER, StuID NUMBER); CREATE TABLE Gradeconversion (gradepoint NUMBER, lettergrade TEXT); CREATE TABLE Course (Hours TEXT, Credits NUMBER); CREATE TABLE Minor_in (StuID NUMBER);"
      },
      {
        "question": "What is the minimum grade point of all students who live in NYC?",
        "query": "SELECT MIN ( t2.gradepoint ) FROM enrolled_in AS t1 JOIN gradeconversion AS t2 JOIN student AS t3 ON t1.grade = t2.lettergrade AND t1.stuid = t3.stuid WHERE t3.city_code = \"NYC\"",
        "schema": "CREATE TABLE Enrolled_in (StuID NUMBER, Grade TEXT); CREATE TABLE Gradeconversion (gradepoint NUMBER, lettergrade TEXT); CREATE TABLE Minor_in (StuID NUMBER); CREATE TABLE Department (DName TEXT, DNO NUMBER); CREATE TABLE Course (Hours TEXT, Credits NUMBER); CREATE TABLE Student (city_code TEXT, LName TEXT, Age NUMBER, StuID NUMBER);"
      },
      {
        "question": "What about for students who live in HKG?",
        "query": "SELECT MIN ( t2.gradepoint ) FROM enrolled_in AS t1 JOIN gradeconversion AS t2 JOIN student AS t3 ON t1.grade = t2.lettergrade AND t1.stuid = t3.stuid WHERE t3.city_code = \"HKG\"",
        "schema": "CREATE TABLE Course (Credits NUMBER, Hours TEXT); CREATE TABLE Enrolled_in (StuID NUMBER, Grade TEXT); CREATE TABLE Student (Age NUMBER, city_code TEXT, LName TEXT, StuID NUMBER); CREATE TABLE Department (DNO NUMBER, DName TEXT); CREATE TABLE Gradeconversion (lettergrade TEXT, gradepoint NUMBER); CREATE TABLE Minor_in (StuID NUMBER);"
      }
    ],
    [
      {
        "question": "Can you please list the full names of all male faculty members and the buildings they live in?",
        "query": "SELECT fname , lname, building FROM faculty WHERE sex = \"M\"",
        "schema": "CREATE TABLE Department (DNO NUMBER, Building TEXT); CREATE TABLE Faculty (Building TEXT, Sex TEXT, Lname TEXT, FacID NUMBER, Fname TEXT); CREATE TABLE Student (Sex TEXT); CREATE TABLE Member_of (FacID NUMBER);"
      },
      {
        "question": "Could you narrow that down to just male faculty members in the NEB building?",
        "query": "SELECT fname , lname FROM faculty WHERE sex = \"M\" AND building = \"NEB\"",
        "schema": "CREATE TABLE Member_of (FacID NUMBER); CREATE TABLE Faculty (Lname TEXT, Rank TEXT, Building TEXT, Sex TEXT, Fname TEXT, FacID NUMBER); CREATE TABLE Department (Building TEXT, DNO NUMBER); CREATE TABLE Student (Sex TEXT);"
      },
      {
        "question": "What rooms do they live in? Please add it to the table.",
        "query": "SELECT fname , lname, room FROM faculty WHERE sex = \"M\" AND building = \"NEB\"",
        "schema": "CREATE TABLE Member_of (FacID NUMBER); CREATE TABLE Faculty (Fname TEXT, Sex TEXT, FacID NUMBER, Building TEXT, Lname TEXT, Rank TEXT, Room TEXT); CREATE TABLE Department (Building TEXT, Room TEXT, DNO NUMBER); CREATE TABLE Student (Sex TEXT);"
      }
    ],
    [
      {
        "question": "Tell me the last name, age and first name for the student id 1003 and 1004...",
        "query": "SELECT lname, age, fname FROM student WHERE stuid = 1003 OR stuid = 1004",
        "schema": "CREATE TABLE Student (Age NUMBER, StuID NUMBER, LName TEXT, Fname TEXT); CREATE TABLE Faculty (Lname TEXT);"
      },
      {
        "question": "Tell me the sex of 1005 and 1004 and their city code ..",
        "query": "SELECT sex, city_code FROM student WHERE stuid = 1005 OR stuid = 1004",
        "schema": "CREATE TABLE Student (LName TEXT, Age NUMBER, Sex TEXT, Fname TEXT, StuID NUMBER, city_code TEXT); CREATE TABLE Faculty (Lname TEXT);"
      },
      {
        "question": "Tell me total number of Male students and total number of female students.....",
        "query": "SELECT sex, COUNT ( * ) FROM student GROUP BY sex",
        "schema": "CREATE TABLE Faculty (Lname TEXT); CREATE TABLE Student (LName TEXT, Age NUMBER, Fname TEXT, StuID NUMBER, city_code TEXT, Sex TEXT);"
      },
      {
        "question": "Find the last name of female (Sex as F) students in the descending order of age.",
        "query": "SELECT lname FROM student WHERE sex = \"F\" ORDER BY age DESC",
        "schema": "CREATE TABLE Faculty (Lname TEXT); CREATE TABLE Student (StuID NUMBER, Fname TEXT, Sex TEXT, Age NUMBER, LName TEXT, city_code TEXT);"
      }
    ],
    [
      {
        "question": "how many students have not enrolled in any courses",
        "query": "SELECT COUNT ( * ) FROM student WHERE stuid NOT IN ( SELECT stuid FROM enrolled_in )",
        "schema": "CREATE TABLE Student (LName TEXT, Age NUMBER, StuID NUMBER); CREATE TABLE Enrolled_in (StuID NUMBER, CID TEXT); CREATE TABLE Department (DNO NUMBER); CREATE TABLE Faculty (FacID NUMBER); CREATE TABLE Minor_in (StuID NUMBER); CREATE TABLE Course (CID TEXT, CName TEXT, DNO NUMBER);"
      },
      {
        "question": "please check the table once more for the name of students not enrolled in any course | Do you need those students' Fname or Lname? | i need the students first name",
        "query": "SELECT fname FROM student WHERE stuid NOT IN ( SELECT stuid FROM enrolled_in )",
        "schema": "CREATE TABLE Faculty (FacID NUMBER); CREATE TABLE Enrolled_in (StuID NUMBER, CID TEXT); CREATE TABLE Course (CName TEXT, CID TEXT, DNO NUMBER); CREATE TABLE Minor_in (StuID NUMBER); CREATE TABLE Student (Age NUMBER, Fname TEXT, StuID NUMBER, LName TEXT); CREATE TABLE Department (DNO NUMBER);"
      },
      {
        "question": "list the first name and last name of students with grade A",
        "query": "SELECT t1.fname, t1.lname FROM student AS t1 JOIN enrolled_in AS t2 ON t1.stuid = t2.stuid WHERE t2.grade = \"A\"",
        "schema": "CREATE TABLE Minor_in (StuID NUMBER); CREATE TABLE Faculty (FacID NUMBER); CREATE TABLE Department (DNO NUMBER); CREATE TABLE Course (CName TEXT, CID TEXT, DNO NUMBER); CREATE TABLE Student (LName TEXT, Fname TEXT, StuID NUMBER, Age NUMBER); CREATE TABLE Gradeconversion (gradepoint NUMBER, lettergrade TEXT); CREATE TABLE Enrolled_in (CID TEXT, Grade TEXT, StuID NUMBER);"
      },
      {
        "question": "WHAT IS THE ID OF THESE STUDENTS",
        "query": "SELECT stuid FROM enrolled_in WHERE grade = \"A\"",
        "schema": "CREATE TABLE Department (DNO NUMBER); CREATE TABLE Faculty (FacID NUMBER); CREATE TABLE Gradeconversion (gradepoint NUMBER, lettergrade TEXT); CREATE TABLE Minor_in (StuID NUMBER); CREATE TABLE Enrolled_in (StuID NUMBER, Grade TEXT, CID TEXT); CREATE TABLE Student (StuID NUMBER, Age NUMBER, Fname TEXT, LName TEXT); CREATE TABLE Course (CName TEXT, DNO NUMBER, CID TEXT);"
      }
    ],
    [
      {
        "question": "How many male faculties live in NEB?",
        "query": "SELECT COUNT ( * ) FROM faculty WHERE sex = \"M\" AND building = \"NEB\"",
        "schema": "CREATE TABLE Department (DNO NUMBER, DName TEXT); CREATE TABLE Student (Sex TEXT, city_code TEXT); CREATE TABLE Faculty (Building TEXT, Room TEXT, Lname TEXT, Rank TEXT, Sex TEXT, FacID NUMBER);"
      },
      {
        "question": "What is the rank of \tMark Giuliano?",
        "query": "SELECT rank FROM faculty WHERE fname = \"Mark\" AND lname = \"Giuliano\"",
        "schema": "CREATE TABLE Department (DNO NUMBER, DName TEXT); CREATE TABLE Faculty (FacID NUMBER, Fname TEXT, Rank TEXT, Building TEXT, Room TEXT, Sex TEXT, Lname TEXT); CREATE TABLE Student (city_code TEXT, Sex TEXT, Fname TEXT);"
      },
      {
        "question": "How many of the faculties are the rank of professors?",
        "query": "SELECT COUNT ( * ) FROM faculty WHERE rank = \"Professor\"",
        "schema": "CREATE TABLE Faculty (Lname TEXT, Sex TEXT, FacID NUMBER, Room TEXT, Rank TEXT, Fname TEXT, Building TEXT); CREATE TABLE Department (DNO NUMBER, DName TEXT); CREATE TABLE Student (city_code TEXT, Fname TEXT, Sex TEXT);"
      }
    ],
    [
      {
        "question": "How many students are not enrolled in the course?",
        "query": "SELECT COUNT ( * ) FROM student WHERE stuid NOT IN ( SELECT stuid FROM enrolled_in )",
        "schema": "CREATE TABLE Enrolled_in (StuID NUMBER, CID TEXT); CREATE TABLE Student (StuID NUMBER, LName TEXT, Age NUMBER); CREATE TABLE Minor_in (StuID NUMBER); CREATE TABLE Member_of (FacID NUMBER, DNO NUMBER); CREATE TABLE Course (CID TEXT, DNO NUMBER, CName TEXT); CREATE TABLE Department (DNO NUMBER); CREATE TABLE Faculty (FacID NUMBER);"
      },
      {
        "question": "What are names of all the students enrolled in the course? | Do you mean the first name and last name of all the students enrolled in the course? | Just the first names",
        "query": "SELECT fname FROM student WHERE stuid IN ( SELECT stuid FROM enrolled_in )",
        "schema": "CREATE TABLE Department (DNO NUMBER); CREATE TABLE Faculty (FacID NUMBER); CREATE TABLE Course (CName TEXT, CID TEXT, DNO NUMBER); CREATE TABLE Minor_in (StuID NUMBER); CREATE TABLE Student (LName TEXT, Fname TEXT, StuID NUMBER, Age NUMBER); CREATE TABLE Member_of (FacID NUMBER, DNO NUMBER); CREATE TABLE Enrolled_in (StuID NUMBER, CID TEXT);"
      }
    ],
    [
      {
        "question": "What department is the Introduction to Computer Science course in?",
        "query": "SELECT t2.dname , t2.room FROM course AS t1 JOIN department AS t2 ON t1.dno = t2.dno WHERE t1.cname = \"INTRODUCTION TO COMPUTER SCIENCE\"",
        "schema": "CREATE TABLE Course (CID TEXT, CName TEXT, DNO NUMBER); CREATE TABLE Department (DName TEXT, Room TEXT, DNO NUMBER); CREATE TABLE Student (StuID NUMBER);"
      },
      {
        "question": "Ok, the class will be in Room 224. Do you know who the instructor will be?",
        "query": "SELECT instructor FROM course AS t1 JOIN department AS t2 ON t1.dno = t2.dno WHERE t1.cname = \"INTRODUCTION TO COMPUTER SCIENCE\"",
        "schema": "CREATE TABLE Faculty (Fname TEXT, Lname TEXT, Rank TEXT, Room TEXT, FacID NUMBER); CREATE TABLE Department (DName TEXT, DNO NUMBER, Room TEXT); CREATE TABLE Course (CID TEXT, CName TEXT, Instructor NUMBER, DNO NUMBER); CREATE TABLE Student (Advisor NUMBER, StuID NUMBER); CREATE TABLE Member_of (FacID NUMBER);"
      },
      {
        "question": "What day is class?",
        "query": "SELECT days FROM course AS t1 JOIN department AS t2 ON t1.dno = t2.dno WHERE t1.cname = \"INTRODUCTION TO COMPUTER SCIENCE\"",
        "schema": "CREATE TABLE Course (CID TEXT, DNO NUMBER, Hours TEXT, CName TEXT, Days TEXT, Instructor NUMBER); CREATE TABLE Member_of (FacID NUMBER); CREATE TABLE Student (StuID NUMBER, Advisor NUMBER); CREATE TABLE Faculty (Lname TEXT, FacID NUMBER, Rank TEXT, Fname TEXT, Room TEXT); CREATE TABLE Department (DName TEXT, Room TEXT, DNO NUMBER);"
      },
      {
        "question": "How long is the class?",
        "query": "SELECT hours FROM course AS t1 JOIN department AS t2 ON t1.dno = t2.dno WHERE t1.cname = \"INTRODUCTION TO COMPUTER SCIENCE\"",
        "schema": "CREATE TABLE Course (CName TEXT, CID TEXT, DNO NUMBER, Hours TEXT, Days TEXT, Instructor NUMBER); CREATE TABLE Student (Advisor NUMBER, StuID NUMBER); CREATE TABLE Department (Room TEXT, DName TEXT, DNO NUMBER); CREATE TABLE Faculty (Room TEXT, Rank TEXT, FacID NUMBER, Lname TEXT, Fname TEXT); CREATE TABLE Member_of (FacID NUMBER);"
      },
      {
        "question": "Oh ok, how many credit hours is this course worth?",
        "query": "SELECT credits FROM course AS t1 JOIN department AS t2 ON t1.dno = t2.dno WHERE t1.cname = \"INTRODUCTION TO COMPUTER SCIENCE\"",
        "schema": "CREATE TABLE Member_of (FacID NUMBER); CREATE TABLE Course (Credits NUMBER, Instructor NUMBER, CID TEXT, Hours TEXT, DNO NUMBER, CName TEXT, Days TEXT); CREATE TABLE Student (Advisor NUMBER, StuID NUMBER); CREATE TABLE Faculty (Lname TEXT, Rank TEXT, FacID NUMBER, Room TEXT, Fname TEXT); CREATE TABLE Department (DName TEXT, Room TEXT, DNO NUMBER);"
      }
    ],
    [
      {
        "question": "What is the building name of division AS? | Do  you  mean \tDName? | Nope building name",
        "query": "SELECT building FROM department WHERE division = \"AS\"",
        "schema": "CREATE TABLE Course (CName TEXT, DNO NUMBER); CREATE TABLE Student (StuID NUMBER); CREATE TABLE Faculty (Fname TEXT, Building TEXT); CREATE TABLE Department (Building TEXT, DName TEXT, Division TEXT, DNO NUMBER);"
      },
      {
        "question": "What is the room number of Chemistry?",
        "query": "SELECT room FROM department WHERE dname = \"Chemistry\"",
        "schema": "CREATE TABLE Department (Building TEXT, Room TEXT, DName TEXT, Division TEXT, DNO NUMBER); CREATE TABLE Course (CName TEXT, DNO NUMBER); CREATE TABLE Student (StuID NUMBER); CREATE TABLE Faculty (Fname TEXT, Room TEXT, Building TEXT);"
      },
      {
        "question": "What is the DPhone of Biology?",
        "query": "SELECT dphone FROM department WHERE dname = \"Biology\"",
        "schema": "CREATE TABLE Student (StuID NUMBER); CREATE TABLE Course (CName TEXT, DNO NUMBER); CREATE TABLE Department (Division TEXT, Room TEXT, Building TEXT, DName TEXT, DNO NUMBER, DPhone NUMBER); CREATE TABLE Faculty (Phone NUMBER, Building TEXT, Room TEXT, Fname TEXT);"
      },
      {
        "question": "What is the room number of Biology?",
        "query": "SELECT room FROM department WHERE dname = \"Biology\"",
        "schema": "CREATE TABLE Student (StuID NUMBER); CREATE TABLE Department (DName TEXT, Division TEXT, DPhone NUMBER, DNO NUMBER, Room TEXT, Building TEXT); CREATE TABLE Course (DNO NUMBER, CName TEXT); CREATE TABLE Faculty (Building TEXT, Fname TEXT, Room TEXT, Phone NUMBER);"
      }
    ],
    [
      {
        "question": "How many departments are there?",
        "query": "SELECT COUNT ( * ) FROM department",
        "schema": "CREATE TABLE Member_of (DNO NUMBER, FacID NUMBER); CREATE TABLE Course (Instructor NUMBER, DNO NUMBER, CName TEXT); CREATE TABLE Minor_in (DNO NUMBER, StuID NUMBER); CREATE TABLE Enrolled_in (StuID NUMBER); CREATE TABLE Department (DNO NUMBER, Division TEXT, Room TEXT, DPhone NUMBER, DName TEXT); CREATE TABLE Faculty (Rank TEXT, FacID NUMBER); CREATE TABLE Student (StuID NUMBER, LName TEXT);"
      },
      {
        "question": "Which department is the smallest? | Do you mean the department that has the fewest members? | Yes, which department has the fewest members?",
        "query": "SELECT t1.dname FROM department AS t1 JOIN member_of AS t2 ON t1.dno = t2.dno GROUP BY t2.dno ORDER BY COUNT ( * ) ASC LIMIT 1",
        "schema": "CREATE TABLE Member_of (FacID NUMBER, DNO NUMBER); CREATE TABLE Department (Division TEXT, DNO NUMBER, Room TEXT, DPhone NUMBER, DName TEXT); CREATE TABLE Faculty (FacID NUMBER, Rank TEXT); CREATE TABLE Course (Instructor NUMBER, DNO NUMBER, CName TEXT); CREATE TABLE Student (LName TEXT, StuID NUMBER); CREATE TABLE Enrolled_in (StuID NUMBER); CREATE TABLE Minor_in (StuID NUMBER, DNO NUMBER);"
      },
      {
        "question": "How many members does it have?",
        "query": "SELECT COUNT ( * ) FROM department AS t1 JOIN member_of AS t2 ON t1.dno = t2.dno GROUP BY t2.dno ORDER BY COUNT ( * ) ASC LIMIT 1",
        "schema": "CREATE TABLE Department (DNO NUMBER, Division TEXT, Room TEXT, DPhone NUMBER, DName TEXT); CREATE TABLE Enrolled_in (StuID NUMBER); CREATE TABLE Faculty (FacID NUMBER, Rank TEXT); CREATE TABLE Minor_in (StuID NUMBER, DNO NUMBER); CREATE TABLE Member_of (Appt_Type TEXT, DNO NUMBER, FacID NUMBER); CREATE TABLE Course (DNO NUMBER, Instructor NUMBER, CName TEXT); CREATE TABLE Student (StuID NUMBER, LName TEXT);"
      }
    ]
  ],
  "voter_2": [
    [
      {
        "question": "how many Student there",
        "query": "SELECT COUNT ( * ) FROM student",
        "schema": "CREATE TABLE Voting_record (Class_President_Vote NUMBER, Vice_President_Vote NUMBER, President_Vote NUMBER, Class_Senator_Vote NUMBER, StuID NUMBER); CREATE TABLE Student (StuID NUMBER, Age NUMBER, Sex TEXT, LName TEXT, Fname TEXT, city_code TEXT, Advisor NUMBER, Major NUMBER);"
      },
      {
        "question": "what is the city code of student id 1001",
        "query": "SELECT city_code FROM student WHERE stuid = 1001",
        "schema": "CREATE TABLE Voting_record (Vice_President_Vote NUMBER, Class_Senator_Vote NUMBER, StuID NUMBER, Class_President_Vote NUMBER, President_Vote NUMBER); CREATE TABLE Student (Fname TEXT, LName TEXT, Major NUMBER, city_code TEXT, StuID NUMBER, Age NUMBER, Sex TEXT, Advisor NUMBER);"
      },
      {
        "question": "* I have left the chat *",
        "query": "SELECT age FROM student WHERE stuid = 1003",
        "schema": "CREATE TABLE Student (LName TEXT, Sex TEXT, Major NUMBER, city_code TEXT, Age NUMBER, Advisor NUMBER, Fname TEXT, StuID NUMBER); CREATE TABLE Voting_record (Class_Senator_Vote NUMBER, Class_President_Vote NUMBER, StuID NUMBER, Vice_President_Vote NUMBER, President_Vote NUMBER);"
      }
    ],
    [
      {
        "question": "Find the number of students whose city code is NYC, please?",
        "query": "SELECT COUNT ( * ) FROM student AS t1 JOIN voting_record AS t2 ON t1.stuid = class_senator_vote WHERE t1.city_code = \"NYC\"",
        "schema": "CREATE TABLE Student (Age NUMBER, LName TEXT, Fname TEXT, StuID NUMBER, city_code TEXT); CREATE TABLE Voting_record (Class_Senator_Vote NUMBER);"
      },
      {
        "question": "What is the number of students who have class senator votes in the spring election cycle?",
        "query": "SELECT COUNT ( * ) FROM student AS t1 JOIN voting_record AS t2 ON t1.stuid = class_senator_vote WHERE t2.election_cycle = \"Spring\"",
        "schema": "CREATE TABLE Voting_record (StuID NUMBER, Class_Senator_Vote NUMBER, Election_Cycle TEXT); CREATE TABLE Student (Age NUMBER, StuID NUMBER, city_code TEXT, LName TEXT, Fname TEXT);"
      },
      {
        "question": "What are the first names and last names of those students?",
        "query": "SELECT DISTINCT t1.fname, t1.lname FROM student AS t1 JOIN voting_record AS t2 ON t1.stuid = class_senator_vote WHERE t2.election_cycle = \"Spring\"",
        "schema": "CREATE TABLE Student (Age NUMBER, LName TEXT, Fname TEXT, city_code TEXT, StuID NUMBER); CREATE TABLE Voting_record (Election_Cycle TEXT, Class_Senator_Vote NUMBER, StuID NUMBER);"
      }
    ],
    [
      {
        "question": "What is the first and last name of all students 18 years old who have vice president votes?",
        "query": "SELECT DISTINCT t1.fname , t1.lname FROM student AS t1 JOIN voting_record AS t2 ON t1.stuid = t2.vice_president_vote WHERE t1.age = 18",
        "schema": "CREATE TABLE Student (Fname TEXT, LName TEXT, StuID NUMBER, Age NUMBER); CREATE TABLE Voting_record (President_Vote NUMBER, Secretary_Vote NUMBER, Class_President_Vote NUMBER, StuID NUMBER, Treasurer_Vote NUMBER, Class_Senator_Vote NUMBER, Vice_President_Vote NUMBER);"
      },
      {
        "question": "Ok, what is the first and last name of the student who has president votes?",
        "query": "SELECT DISTINCT t1.fname , t1.lname FROM student AS t1 JOIN voting_record AS t2 ON t1.stuid = t2.president_vote",
        "schema": "CREATE TABLE Student (LName TEXT, StuID NUMBER, Age NUMBER, Fname TEXT); CREATE TABLE Voting_record (Class_Senator_Vote NUMBER, President_Vote NUMBER, Vice_President_Vote NUMBER, Treasurer_Vote NUMBER, StuID NUMBER, Secretary_Vote NUMBER, Class_President_Vote NUMBER);"
      },
      {
        "question": "Ok, and of the students who had President votes how many were males?",
        "query": "SELECT DISTINCT COUNT ( * ) FROM student AS t1 JOIN voting_record AS t2 ON t1.stuid = t2.president_vote WHERE t1.sex = \"M\"",
        "schema": "CREATE TABLE Voting_record (Vice_President_Vote NUMBER, Secretary_Vote NUMBER, StuID NUMBER, Class_President_Vote NUMBER, Class_Senator_Vote NUMBER, Treasurer_Vote NUMBER, President_Vote NUMBER); CREATE TABLE Student (LName TEXT, Sex TEXT, StuID NUMBER, Fname TEXT, Age NUMBER);"
      }
    ],
    [
      {
        "question": "What is the average age of all students.",
        "query": "SELECT AVG ( age ) FROM student",
        "schema": "CREATE TABLE Student (Sex TEXT, Age NUMBER, StuID NUMBER);"
      },
      {
        "question": "Which student is older than the average age. | Do you want their id or last name or first name? | The first name for the student older than the average age.",
        "query": "SELECT fname FROM student WHERE age > ( SELECT AVG ( age ) FROM student )",
        "schema": "CREATE TABLE Student (StuID NUMBER, Fname TEXT, Age NUMBER, Sex TEXT, LName TEXT);"
      },
      {
        "question": "Give me the count for the students older than the average age.",
        "query": "SELECT COUNT ( fname ) FROM student WHERE age > ( SELECT AVG ( age ) FROM student )",
        "schema": "CREATE TABLE Student (Age NUMBER, Fname TEXT, LName TEXT, StuID NUMBER, Sex TEXT);"
      },
      {
        "question": "Give me the count for the students younger than the average age.",
        "query": "SELECT COUNT ( fname ) FROM student WHERE age < ( SELECT AVG ( age ) FROM student )",
        "schema": "CREATE TABLE Student (StuID NUMBER, Sex TEXT, Fname TEXT, LName TEXT, Age NUMBER);"
      },
      {
        "question": "Give me the count for all students",
        "query": "SELECT COUNT ( fname ) FROM student",
        "schema": "CREATE TABLE Student (Sex TEXT, LName TEXT, Age NUMBER, Fname TEXT, StuID NUMBER);"
      }
    ],
    [
      {
        "question": "Find the distinct last names of all the students who have president votes and whose advisor is 8741",
        "query": "SELECT DISTINCT t1.lname FROM student AS t1 JOIN voting_record AS t2 ON t1.stuid = president_vote INTERSECT SELECT DISTINCT lname FROM student WHERE advisor = \"8741\"",
        "schema": "CREATE TABLE Voting_record (Treasurer_Vote NUMBER, President_Vote NUMBER, Secretary_Vote NUMBER, Class_President_Vote NUMBER, StuID NUMBER, Vice_President_Vote NUMBER); CREATE TABLE Student (Advisor NUMBER, StuID NUMBER, LName TEXT, Fname TEXT);"
      },
      {
        "question": "Give me the name for the student 1001 | Do you want the last name or first name? | first name and the last name please",
        "query": "SELECT lname, fname FROM student WHERE stuid = \"1001\"",
        "schema": "CREATE TABLE Student (Fname TEXT, StuID NUMBER, Advisor NUMBER, LName TEXT); CREATE TABLE Voting_record (Vice_President_Vote NUMBER, President_Vote NUMBER, Treasurer_Vote NUMBER, StuID NUMBER, Secretary_Vote NUMBER, Class_President_Vote NUMBER);"
      },
      {
        "question": "can you give me the students with president vote 1004 | What attributes of that student do you want? | first and last names please",
        "query": "SELECT t1.lname, t1.fname FROM student AS t1 JOIN voting_record AS t2 ON t1.stuid = t2.stuid WHERE t2.president_vote = \"1004\"",
        "schema": "CREATE TABLE Student (LName TEXT, StuID NUMBER, Fname TEXT, Advisor NUMBER); CREATE TABLE Voting_record (President_Vote NUMBER, Secretary_Vote NUMBER, Class_President_Vote NUMBER, Vice_President_Vote NUMBER, StuID NUMBER, Treasurer_Vote NUMBER);"
      },
      {
        "question": "Can you give me the first and last names for students with Vice President vote 1017",
        "query": "SELECT t1.lname, t1.fname FROM student AS t1 JOIN voting_record AS t2 ON t1.stuid = t2.stuid WHERE t2.vice_president_vote = \"1007\"",
        "schema": "CREATE TABLE Student (Advisor NUMBER, LName TEXT, Fname TEXT, StuID NUMBER); CREATE TABLE Voting_record (Treasurer_Vote NUMBER, President_Vote NUMBER, Class_President_Vote NUMBER, Vice_President_Vote NUMBER, Secretary_Vote NUMBER, StuID NUMBER);"
      },
      {
        "question": "Give me the age for Linda Smith",
        "query": "SELECT age FROM student WHERE lname = \"Smith\" AND fname = \"Linda\"",
        "schema": "CREATE TABLE Student (Age NUMBER, StuID NUMBER, Fname TEXT, LName TEXT, Advisor NUMBER); CREATE TABLE Voting_record (President_Vote NUMBER, Class_President_Vote NUMBER, Treasurer_Vote NUMBER, StuID NUMBER, Vice_President_Vote NUMBER, Secretary_Vote NUMBER);"
      },
      {
        "question": "Give me the names of all the students",
        "query": "SELECT lname, fname FROM student",
        "schema": "CREATE TABLE Voting_record (Vice_President_Vote NUMBER, Secretary_Vote NUMBER, Treasurer_Vote NUMBER, StuID NUMBER, President_Vote NUMBER, Class_President_Vote NUMBER); CREATE TABLE Student (Advisor NUMBER, Fname TEXT, Age NUMBER, StuID NUMBER, LName TEXT);"
      }
    ],
    [
      {
        "question": "Which major has the most students?",
        "query": "SELECT major FROM student GROUP BY major ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Student (StuID NUMBER, Major NUMBER);"
      },
      {
        "question": "How many students are in that major?",
        "query": "SELECT COUNT ( * ) FROM student GROUP BY major ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Student (LName TEXT, Major NUMBER, StuID NUMBER);"
      },
      {
        "question": "What are their names, please?",
        "query": "SELECT lname,fname FROM student WHERE major IN ( SELECT major FROM student GROUP BY major ORDER BY COUNT ( * ) DESC LIMIT 1 )",
        "schema": "CREATE TABLE Student (LName TEXT, StuID NUMBER, Major NUMBER, Fname TEXT);"
      },
      {
        "question": "Who is the advisor for that major?",
        "query": "SELECT advisor FROM student WHERE major = ( SELECT major FROM student GROUP BY major ORDER BY COUNT ( * ) DESC LIMIT 1 )",
        "schema": "CREATE TABLE Student (Major NUMBER, Fname TEXT, LName TEXT, Advisor NUMBER, StuID NUMBER);"
      },
      {
        "question": "Who is the advisor for the major with the second most number of students?",
        "query": "SELECT advisor FROM student WHERE major IN ( SELECT major FROM student GROUP BY major ORDER BY COUNT ( * ) DESC LIMIT 2 ) AND major ! = ( SELECT major FROM student GROUP BY major ORDER BY COUNT ( * ) DESC LIMIT 1 )",
        "schema": "CREATE TABLE Student (LName TEXT, StuID NUMBER, Advisor NUMBER, Fname TEXT, Major NUMBER);"
      }
    ],
    [
      {
        "question": "How many students are voting in the spring election cycle?",
        "query": "SELECT COUNT ( * ) FROM student AS t1 JOIN voting_record AS t2 ON t1.stuid = secretary_vote WHERE t2.election_cycle = \"Spring\"",
        "schema": "CREATE TABLE Student (LName TEXT, StuID NUMBER); CREATE TABLE Voting_record (President_Vote NUMBER, StuID NUMBER, Treasurer_Vote NUMBER, Class_President_Vote NUMBER, Class_Senator_Vote NUMBER, Secretary_Vote NUMBER, Election_Cycle TEXT);"
      },
      {
        "question": "How many are females that are voting in the election cycle ? | Did you want the number of females that are voting in the spring election cycle? | Yes",
        "query": "SELECT COUNT ( * ) FROM student AS t1 JOIN voting_record AS t2 ON t1.stuid = secretary_vote WHERE t1.sex = \"F\" AND t2.election_cycle = \"Spring\"",
        "schema": "CREATE TABLE Student (StuID NUMBER, LName TEXT, Sex TEXT); CREATE TABLE Voting_record (Class_Senator_Vote NUMBER, Secretary_Vote NUMBER, Treasurer_Vote NUMBER, President_Vote NUMBER, Class_President_Vote NUMBER, StuID NUMBER, Election_Cycle TEXT);"
      },
      {
        "question": "What are the ages of everyone voting in the Spring election cycle ?",
        "query": "SELECT t1.age FROM student AS t1 JOIN voting_record AS t2 ON t1.stuid = secretary_vote WHERE t2.election_cycle = \"Spring\"",
        "schema": "CREATE TABLE Student (Sex TEXT, StuID NUMBER, Age NUMBER, LName TEXT); CREATE TABLE Voting_record (Election_Cycle TEXT, StuID NUMBER, Treasurer_Vote NUMBER, Secretary_Vote NUMBER, Class_Senator_Vote NUMBER, Class_President_Vote NUMBER, President_Vote NUMBER);"
      }
    ],
    [
      {
        "question": "how many females have president votes?",
        "query": "SELECT COUNT ( * ) FROM student AS t1 JOIN voting_record AS t2 ON t1.stuid = t2.president_vote WHERE t1.sex = \"F\"",
        "schema": "CREATE TABLE Voting_record (President_Vote NUMBER, StuID NUMBER, Vice_President_Vote NUMBER, Class_President_Vote NUMBER, Secretary_Vote NUMBER); CREATE TABLE Student (StuID NUMBER, Sex TEXT, LName TEXT);"
      },
      {
        "question": "what are there first and last names?",
        "query": "SELECT DISTINCT t1.fname , t1.lname FROM student AS t1 JOIN voting_record AS t2 ON t1.stuid = t2.president_vote WHERE t1.sex = \"F\"",
        "schema": "CREATE TABLE Student (StuID NUMBER, Fname TEXT, LName TEXT, Sex TEXT); CREATE TABLE Voting_record (StuID NUMBER, Vice_President_Vote NUMBER, Treasurer_Vote NUMBER, President_Vote NUMBER, Class_President_Vote NUMBER, Secretary_Vote NUMBER);"
      },
      {
        "question": "how many votes did she get? | Do you mean the total votes in four election or list them separately? | the total votes",
        "query": "SELECT SUM ( t2.president_vote ) FROM student AS t1 JOIN voting_record AS t2 ON t1.stuid = t2.president_vote WHERE t1.sex = \"F\"",
        "schema": "CREATE TABLE Voting_record (Class_Senator_Vote NUMBER, Treasurer_Vote NUMBER, StuID NUMBER, Class_President_Vote NUMBER, Vice_President_Vote NUMBER, Secretary_Vote NUMBER, President_Vote NUMBER); CREATE TABLE Student (Fname TEXT, Sex TEXT, StuID NUMBER, LName TEXT);"
      },
      {
        "question": "how many of those votes were from the secretary?",
        "query": "SELECT SUM ( t2.secretary_vote ) FROM student AS t1 JOIN voting_record AS t2 ON t1.stuid = t2.president_vote WHERE t1.sex = \"F\"",
        "schema": "CREATE TABLE Voting_record (Vice_President_Vote NUMBER, Treasurer_Vote NUMBER, Class_President_Vote NUMBER, Secretary_Vote NUMBER, President_Vote NUMBER, Class_Senator_Vote NUMBER, StuID NUMBER); CREATE TABLE Student (Sex TEXT, StuID NUMBER, Fname TEXT, LName TEXT);"
      },
      {
        "question": "how many were from the vice president?",
        "query": "SELECT SUM ( t2.vice_president_vote ) FROM student AS t1 JOIN voting_record AS t2 ON t1.stuid = t2.president_vote WHERE t1.sex = \"F\"",
        "schema": "CREATE TABLE Student (StuID NUMBER, Fname TEXT, LName TEXT, Sex TEXT); CREATE TABLE Voting_record (Class_Senator_Vote NUMBER, Secretary_Vote NUMBER, StuID NUMBER, Class_President_Vote NUMBER, Treasurer_Vote NUMBER, President_Vote NUMBER, Vice_President_Vote NUMBER);"
      }
    ],
    [
      {
        "question": "mention the city code of the city that the most students live.",
        "query": "SELECT city_code FROM student GROUP BY city_code ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Student (city_code TEXT, StuID NUMBER);"
      }
    ],
    [
      {
        "question": "Show the name of students",
        "query": "SELECT lname, fname FROM student",
        "schema": "CREATE TABLE Student (Fname TEXT, StuID NUMBER, LName TEXT);"
      },
      {
        "question": "How many of them live in city with code NYC and have secretary votes in the spring election cycle",
        "query": "SELECT COUNT ( DISTINCT t1.stuid ) FROM student AS t1 JOIN voting_record AS t2 ON t1.stuid = secretary_vote WHERE t1.city_code = \"NYC\" AND t2.election_cycle = \"Spring\"",
        "schema": "CREATE TABLE Student (Fname TEXT, StuID NUMBER, city_code TEXT, LName TEXT); CREATE TABLE Voting_record (Election_Cycle TEXT, Secretary_Vote NUMBER, StuID NUMBER, President_Vote NUMBER);"
      },
      {
        "question": "Show the name of this student",
        "query": "SELECT t1.lname, t1.fname FROM student AS t1 JOIN voting_record AS t2 ON t1.stuid = secretary_vote WHERE t1.city_code = \"NYC\" AND t2.election_cycle = \"Spring\"",
        "schema": "CREATE TABLE Student (LName TEXT, StuID NUMBER, Fname TEXT, city_code TEXT); CREATE TABLE Voting_record (Treasurer_Vote NUMBER, Class_Senator_Vote NUMBER, Class_President_Vote NUMBER, Secretary_Vote NUMBER, President_Vote NUMBER, Election_Cycle TEXT, Vice_President_Vote NUMBER, StuID NUMBER);"
      }
    ],
    [
      {
        "question": "Number of students in each major?",
        "query": "SELECT major, COUNT ( * ) FROM student GROUP BY major",
        "schema": "CREATE TABLE Student (Major NUMBER, StuID NUMBER);"
      },
      {
        "question": "List of majors?",
        "query": "SELECT DISTINCT ( major ) FROM student",
        "schema": "CREATE TABLE Student (Major NUMBER, StuID NUMBER);"
      },
      {
        "question": "Names of students in each major? | LName or FName? | LName.",
        "query": "SELECT major, lname FROM student",
        "schema": "CREATE TABLE Student (Fname TEXT, LName TEXT, Major NUMBER, StuID NUMBER);"
      },
      {
        "question": "What about FName?",
        "query": "SELECT major, fname FROM student",
        "schema": "CREATE TABLE Student (LName TEXT, Fname TEXT, Major NUMBER, StuID NUMBER);"
      },
      {
        "question": "Which major has the most number of students?",
        "query": "SELECT major FROM student GROUP BY major ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Student (LName TEXT, Major NUMBER, StuID NUMBER, Fname TEXT);"
      },
      {
        "question": "Which major has the least?",
        "query": "SELECT major FROM student GROUP BY major ORDER BY COUNT ( * ) ASC LIMIT 1",
        "schema": "CREATE TABLE Student (Major NUMBER, Fname TEXT, StuID NUMBER, LName TEXT);"
      }
    ],
    [
      {
        "question": "How many students have a major of 600?",
        "query": "SELECT COUNT ( * ) FROM student WHERE major = 600",
        "schema": "CREATE TABLE Student (Major NUMBER, LName TEXT, StuID NUMBER, Fname TEXT);"
      },
      {
        "question": "What is the age of the oldest of those students?",
        "query": "SELECT MAX ( age ) FROM student WHERE major = 600",
        "schema": "CREATE TABLE Student (Fname TEXT, Major NUMBER, Age NUMBER, LName TEXT, StuID NUMBER);"
      },
      {
        "question": "What about the youngest?",
        "query": "SELECT MIN ( age ) FROM student WHERE major = 600",
        "schema": "CREATE TABLE Student (StuID NUMBER, LName TEXT, Major NUMBER, Fname TEXT, Age NUMBER);"
      }
    ],
    [
      {
        "question": "What is the city code of the city that the most students live in?",
        "query": "SELECT city_code FROM student GROUP BY city_code ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Student (city_code TEXT, StuID NUMBER);"
      },
      {
        "question": "What is the city code of the city that the least students live in?",
        "query": "SELECT city_code FROM student GROUP BY city_code ORDER BY COUNT ( * ) LIMIT 1",
        "schema": "CREATE TABLE Student (city_code TEXT, StuID NUMBER);"
      },
      {
        "question": "What is the average age of all the students?",
        "query": "SELECT AVG ( age ) FROM student",
        "schema": "CREATE TABLE Student (Age NUMBER, city_code TEXT, StuID NUMBER);"
      },
      {
        "question": "What are the majors of all the students with sex F?",
        "query": "SELECT major FROM student WHERE sex = \"F\"",
        "schema": "CREATE TABLE Student (StuID NUMBER, Major NUMBER, Sex TEXT, Age NUMBER, city_code TEXT);"
      }
    ]
  ],
  "body_builder": [
    [
      {
        "question": "Hi there!  Can you show me a list of all body builder names and their associated birth dates?",
        "query": "SELECT t2.name, t2.birth_date FROM body_builder AS t1 JOIN people AS t2 ON t1.people_id = t2.people_id",
        "schema": "CREATE TABLE body_builder (Body_Builder_ID NUMBER, People_ID NUMBER); CREATE TABLE people (Name TEXT, People_ID NUMBER, Birth_Place TEXT, Birth_Date TEXT);"
      },
      {
        "question": "Could you filter this list to show only the rows which are associated with body builders whose birthday value contains the work \"January\"?",
        "query": "SELECT t2.name, t2.birth_date FROM body_builder AS t1 JOIN people AS t2 ON t1.people_id = t2.people_id WHERE t2.birth_date LIKE \"%January%\"",
        "schema": "CREATE TABLE body_builder (Body_Builder_ID NUMBER, Total NUMBER, People_ID NUMBER); CREATE TABLE people (Name TEXT, Birth_Place TEXT, Birth_Date TEXT, People_ID NUMBER);"
      },
      {
        "question": "Great! Can you tell me where Jack Campbells birthplace was?",
        "query": "SELECT birth_place FROM people WHERE name = \"Jack Campbell\"",
        "schema": "CREATE TABLE body_builder (Body_Builder_ID NUMBER, People_ID NUMBER, Total NUMBER); CREATE TABLE people (Birth_Date TEXT, Birth_Place TEXT, People_ID NUMBER, Name TEXT);"
      }
    ],
    [
      {
        "question": "How about the rest of people?",
        "query": "SELECT name , birth_date FROM people EXCEPT SELECT t1.name , t1.birth_date FROM people AS t1 JOIN body_builder AS t2 ON t1.people_id = t2.people_id",
        "schema": "CREATE TABLE people (People_ID NUMBER, Name TEXT, Birth_Date TEXT); CREATE TABLE body_builder (People_ID NUMBER);"
      },
      {
        "question": "oh, sorry, please show their names and birth places.",
        "query": "SELECT name , birth_place FROM people EXCEPT SELECT t1.name , t1.birth_place FROM people AS t1 JOIN body_builder AS t2 ON t1.people_id = t2.people_id",
        "schema": "CREATE TABLE people (Birth_Date TEXT, Birth_Place TEXT, People_ID NUMBER, Name TEXT); CREATE TABLE body_builder (People_ID NUMBER, Body_Builder_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What is the most common birth place of people?",
        "query": "SELECT birth_place FROM people GROUP BY birth_place ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE people (People_ID NUMBER, Birth_Date TEXT, Name TEXT, Birth_Place TEXT);"
      },
      {
        "question": "What is the least common birthplace of people?",
        "query": "SELECT birth_place FROM people GROUP BY birth_place ORDER BY COUNT ( * ) LIMIT 1",
        "schema": "CREATE TABLE people (People_ID NUMBER, Birth_Place TEXT, Name TEXT, Birth_Date TEXT);"
      },
      {
        "question": "What about the most common?",
        "query": "SELECT birth_place FROM people GROUP BY birth_place ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE people (Birth_Place TEXT, People_ID NUMBER, Birth_Date TEXT, Name TEXT);"
      },
      {
        "question": "What is the birth date of Ty Conklin?",
        "query": "SELECT birth_place FROM people WHERE name = 'Ty Conklin'",
        "schema": "CREATE TABLE people (Birth_Place TEXT, Birth_Date TEXT, Name TEXT, People_ID NUMBER);"
      },
      {
        "question": "When was he born?",
        "query": "SELECT birth_date FROM people WHERE name = 'Ty Conklin'",
        "schema": "CREATE TABLE people (Birth_Place TEXT, People_ID NUMBER, Name TEXT, Birth_Date TEXT);"
      },
      {
        "question": "What is his height?",
        "query": "SELECT height FROM people WHERE name = 'Ty Conklin'",
        "schema": "CREATE TABLE people (People_ID NUMBER, Height NUMBER, Name TEXT, Birth_Place TEXT, Birth_Date TEXT);"
      },
      {
        "question": "Tell me his weight please.",
        "query": "SELECT weight FROM people WHERE name = 'Ty Conklin'",
        "schema": "CREATE TABLE people (Height NUMBER, Birth_Date TEXT, Name TEXT, Weight NUMBER, People_ID NUMBER, Birth_Place TEXT);"
      },
      {
        "question": "What are the names of the other people with that weight?",
        "query": "SELECT name FROM people WHERE weight = 90.0 AND name! = 'Ty Conklin'",
        "schema": "CREATE TABLE people (People_ID NUMBER, Height NUMBER, Birth_Place TEXT, Name TEXT, Weight NUMBER, Birth_Date TEXT);"
      }
    ],
    [
      {
        "question": "which builder has the highest total points? | Do you want their name or id? | their name please",
        "query": "SELECT t2.name FROM body_builder AS t1 JOIN people AS t2 ON t1.people_id = t2.people_id ORDER BY t1.total DESC LIMIT 1",
        "schema": "CREATE TABLE people (Name TEXT, Height NUMBER, People_ID NUMBER); CREATE TABLE body_builder (Total NUMBER, People_ID NUMBER, Body_Builder_ID NUMBER);"
      },
      {
        "question": "what is his ID?",
        "query": "SELECT t2.name, t2.people_id FROM body_builder AS t1 JOIN people AS t2 ON t1.people_id = t2.people_id ORDER BY t1.total DESC LIMIT 1",
        "schema": "CREATE TABLE body_builder (Total NUMBER, People_ID NUMBER, Body_Builder_ID NUMBER); CREATE TABLE people (Name TEXT, People_ID NUMBER, Height NUMBER);"
      }
    ],
    [
      {
        "question": "Show me the details of the body builders | Which information would you like to know about the body builders? | Heights of the body builders",
        "query": "SELECT t2.height FROM body_builder AS t1 JOIN people AS t2 ON t1.people_id = t2.people_id",
        "schema": "CREATE TABLE people (Name TEXT, Height NUMBER, People_ID NUMBER); CREATE TABLE body_builder (Body_Builder_ID NUMBER, People_ID NUMBER, Total NUMBER);"
      },
      {
        "question": "Show me the scores of the body builders | Which score, Snatch, Clean Jerk, or Total? | Total score",
        "query": "SELECT t1.total FROM body_builder AS t1 JOIN people AS t2 ON t1.people_id = t2.people_id",
        "schema": "CREATE TABLE people (Name TEXT, Height NUMBER, People_ID NUMBER); CREATE TABLE body_builder (Snatch NUMBER, Clean_Jerk NUMBER, Total NUMBER, People_ID NUMBER, Body_Builder_ID NUMBER);"
      },
      {
        "question": "Show me the heights of body builders with total score smaller than 315",
        "query": "SELECT t2.height FROM body_builder AS t1 JOIN people AS t2 ON t1.people_id = t2.people_id WHERE t1.total < 315",
        "schema": "CREATE TABLE body_builder (People_ID NUMBER, Clean_Jerk NUMBER, Snatch NUMBER, Total NUMBER, Body_Builder_ID NUMBER); CREATE TABLE people (Height NUMBER, People_ID NUMBER, Name TEXT);"
      }
    ],
    [
      {
        "question": "What are the birth places that are shared by at least two people?",
        "query": "SELECT birth_place FROM people GROUP BY birth_place HAVING COUNT ( * ) > = 2",
        "schema": "CREATE TABLE people (Birth_Place TEXT, People_ID NUMBER, Birth_Date TEXT);"
      },
      {
        "question": "what is the name of the person who weighs the most?",
        "query": "SELECT name FROM people ORDER BY weight DESC LIMIT 1",
        "schema": "CREATE TABLE people (Birth_Date TEXT, Weight NUMBER, Birth_Place TEXT, Name TEXT, People_ID NUMBER);"
      },
      {
        "question": "what is the name of the person who weighs the least?",
        "query": "SELECT name FROM people ORDER BY weight ASC LIMIT 1",
        "schema": "CREATE TABLE people (Birth_Place TEXT, Weight NUMBER, People_ID NUMBER, Name TEXT, Birth_Date TEXT);"
      }
    ],
    [
      {
        "question": "how many body builder id are there",
        "query": "SELECT COUNT ( * ) FROM body_builder",
        "schema": "CREATE TABLE people (People_ID NUMBER); CREATE TABLE body_builder (People_ID NUMBER, Total NUMBER, Body_Builder_ID NUMBER);"
      },
      {
        "question": "ok,list out the body builder name",
        "query": "SELECT t2.name FROM body_builder AS t1 JOIN people AS t2 ON t1.people_id = t2.people_id",
        "schema": "CREATE TABLE people (People_ID NUMBER, Name TEXT); CREATE TABLE body_builder (Body_Builder_ID NUMBER, Total NUMBER, People_ID NUMBER);"
      },
      {
        "question": "ok, name the body builders whose total score is higher than 250",
        "query": "SELECT t2.name FROM body_builder AS t1 JOIN people AS t2 ON t1.people_id = t2.people_id WHERE t1.total > 250",
        "schema": "CREATE TABLE body_builder (Body_Builder_ID NUMBER, Total NUMBER, People_ID NUMBER); CREATE TABLE people (Height NUMBER, People_ID NUMBER, Name TEXT);"
      }
    ],
    [
      {
        "question": "Show me the names of all body builders",
        "query": "SELECT t2.name FROM body_builder AS t1 JOIN people AS t2 ON t1.people_id = t2.people_id",
        "schema": "CREATE TABLE body_builder (People_ID NUMBER, Body_Builder_ID NUMBER); CREATE TABLE people (Name TEXT, People_ID NUMBER);"
      },
      {
        "question": "Show me the details of weight of the all body builders",
        "query": "SELECT t2.weight FROM body_builder AS t1 JOIN people AS t2 ON t1.people_id = t2.people_id",
        "schema": "CREATE TABLE people (Name TEXT, Weight NUMBER, People_ID NUMBER); CREATE TABLE body_builder (Body_Builder_ID NUMBER, People_ID NUMBER);"
      },
      {
        "question": "Show me the greatest weight of the body builder",
        "query": "SELECT t2.weight FROM body_builder AS t1 JOIN people AS t2 ON t1.people_id = t2.people_id ORDER BY t2.weight DESC LIMIT 1",
        "schema": "CREATE TABLE body_builder (Body_Builder_ID NUMBER, Total NUMBER, People_ID NUMBER); CREATE TABLE people (Weight NUMBER, Name TEXT, People_ID NUMBER);"
      },
      {
        "question": "Show me the name of the body builder with the most weight",
        "query": "SELECT t2.name FROM body_builder AS t1 JOIN people AS t2 ON t1.people_id = t2.people_id ORDER BY t2.weight DESC LIMIT 1",
        "schema": "CREATE TABLE body_builder (Body_Builder_ID NUMBER, People_ID NUMBER, Total NUMBER); CREATE TABLE people (People_ID NUMBER, Name TEXT, Weight NUMBER);"
      }
    ],
    [
      {
        "question": "what is the weight of ty conklin",
        "query": "SELECT weight FROM people WHERE name = \"Ty Conklin\"",
        "schema": "CREATE TABLE people (Name TEXT, Weight NUMBER, People_ID NUMBER); CREATE TABLE body_builder (People_ID NUMBER);"
      },
      {
        "question": "what is the height of jack campbell",
        "query": "SELECT height FROM people WHERE name = \"Jack Campbell\"",
        "schema": "CREATE TABLE body_builder (People_ID NUMBER); CREATE TABLE people (Height NUMBER, People_ID NUMBER, Weight NUMBER, Name TEXT);"
      }
    ],
    [
      {
        "question": "show me the body builders name.",
        "query": "SELECT t2.name FROM body_builder AS t1 JOIN people AS t2 ON t1.people_id = t2.people_id",
        "schema": "CREATE TABLE people (Name TEXT, People_ID NUMBER); CREATE TABLE body_builder (Body_Builder_ID NUMBER, People_ID NUMBER);"
      },
      {
        "question": "What is the height of Jack Campbell?",
        "query": "SELECT height FROM people WHERE name = \"Jack Campbell\"",
        "schema": "CREATE TABLE body_builder (People_ID NUMBER, Body_Builder_ID NUMBER); CREATE TABLE people (People_ID NUMBER, Height NUMBER, Name TEXT);"
      }
    ]
  ],
  "wedding": [
    [
      {
        "question": "what is the minimum age of all people",
        "query": "SELECT MIN ( age ) FROM people",
        "schema": "CREATE TABLE people (People_ID NUMBER, Age NUMBER, Is_Male TEXT, Name TEXT); CREATE TABLE church (Church_ID NUMBER);"
      },
      {
        "question": "what is the maximum age for all people",
        "query": "SELECT MAX ( age ) FROM people",
        "schema": "CREATE TABLE people (Is_Male TEXT, Age NUMBER, Name TEXT, People_ID NUMBER); CREATE TABLE church (Church_ID NUMBER);"
      },
      {
        "question": "what is the average age for all people",
        "query": "SELECT AVG ( age ) FROM people",
        "schema": "CREATE TABLE church (Church_ID NUMBER); CREATE TABLE people (Age NUMBER, Is_Male TEXT, Name TEXT, People_ID NUMBER);"
      },
      {
        "question": "now, list the minimum, maximum and average age for all people",
        "query": "SELECT MIN ( age ) , MAX ( age ) , AVG ( age ) FROM people",
        "schema": "CREATE TABLE people (Is_Male TEXT, People_ID NUMBER, Age NUMBER, Name TEXT); CREATE TABLE church (Church_ID NUMBER);"
      }
    ],
    [
      {
        "question": "what is the Open Date of Pure Church of Christ? | Did you mean the open date of the church named Pure Church of Christ? | yes",
        "query": "SELECT open_date FROM church WHERE name = \"Pure Church of Christ\"",
        "schema": "CREATE TABLE church (Name TEXT, Open_Date NUMBER, Continuation_of TEXT, Church_ID NUMBER); CREATE TABLE people (People_ID NUMBER, Name TEXT);"
      },
      {
        "question": "who organized the Pure Church of Christ?",
        "query": "SELECT organized_by FROM church WHERE name = \"Pure Church of Christ\"",
        "schema": "CREATE TABLE church (Name TEXT, Church_ID NUMBER, Organized_by TEXT, Open_Date NUMBER, Continuation_of TEXT); CREATE TABLE people (People_ID NUMBER, Name TEXT);"
      },
      {
        "question": "what is the ID of the Church of Christ?",
        "query": "SELECT church_id FROM church WHERE name = \"Pure Church of Christ\"",
        "schema": "CREATE TABLE church (Organized_by TEXT, Continuation_of TEXT, Name TEXT, Church_ID NUMBER, Open_Date NUMBER); CREATE TABLE people (People_ID NUMBER, Name TEXT);"
      },
      {
        "question": "which church was organized by Ezra Booth? | Did you want the name of the church organized by Ezra Booth. | yes",
        "query": "SELECT name FROM church WHERE organized_by = \"Ezra Booth\"",
        "schema": "CREATE TABLE church (Organized_by TEXT, Continuation_of TEXT, Name TEXT, Church_ID NUMBER, Open_Date NUMBER); CREATE TABLE people (People_ID NUMBER, Name TEXT);"
      },
      {
        "question": "Show the opening year in which at least two churches opened",
        "query": "SELECT open_date FROM church GROUP BY open_date HAVING COUNT ( * ) > = 2",
        "schema": "CREATE TABLE people (People_ID NUMBER, Name TEXT); CREATE TABLE church (Continuation_of TEXT, Organized_by TEXT, Name TEXT, Open_Date NUMBER, Church_ID NUMBER); CREATE TABLE wedding (Church_ID NUMBER, Year NUMBER);"
      }
    ],
    [
      {
        "question": "which females had a wedding in 2016?",
        "query": "SELECT t2.name FROM wedding AS t1 JOIN people AS t2 ON t1.female_id = t2.people_id WHERE t1.year = 2016 AND t2.is_male = 'F'",
        "schema": "CREATE TABLE wedding (Male_ID NUMBER, Female_ID NUMBER, Year NUMBER); CREATE TABLE people (Name TEXT, People_ID NUMBER, Is_Male TEXT);"
      },
      {
        "question": "which females in that list are from canada?",
        "query": "SELECT t2.name FROM wedding AS t1 JOIN people AS t2 ON t1.female_id = t2.people_id WHERE t1.year = 2016 AND t2.is_male = 'F' AND t2.country = 'Canada'",
        "schema": "CREATE TABLE wedding (Year NUMBER, Male_ID NUMBER, Female_ID NUMBER); CREATE TABLE people (People_ID NUMBER, Is_Male TEXT, Country TEXT, Name TEXT);"
      },
      {
        "question": "who are the females in canada?",
        "query": "SELECT name FROM people WHERE country = \"Canada\" AND is_male = \"F\"",
        "schema": "CREATE TABLE people (Country TEXT, People_ID NUMBER, Name TEXT, Is_Male TEXT); CREATE TABLE wedding (Male_ID NUMBER, Year NUMBER, Female_ID NUMBER);"
      },
      {
        "question": "who got married in 2016?",
        "query": "SELECT t2.name FROM wedding AS t1 JOIN people AS t2 ON t1.female_id = t2.people_id OR t1.male_id = t2.people_id WHERE t1.year = 2016",
        "schema": "CREATE TABLE people (People_ID NUMBER, Country TEXT, Name TEXT, Is_Male TEXT); CREATE TABLE wedding (Year NUMBER, Female_ID NUMBER, Male_ID NUMBER);"
      },
      {
        "question": "who in that list is from canada?",
        "query": "SELECT t2.name FROM wedding AS t1 JOIN people AS t2 ON t1.female_id = t2.people_id OR t1.male_id = t2.people_id WHERE t1.year = 2016 AND t2.country = \"Canada\"",
        "schema": "CREATE TABLE wedding (Female_ID NUMBER, Male_ID NUMBER, Year NUMBER); CREATE TABLE people (Name TEXT, Country TEXT, Is_Male TEXT, People_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Hello!  Can you provide me with a list of all churches please? | Do you need their names or ids? | Ah yes!  Can you please provide me with a list containing both?",
        "query": "SELECT church_id, name FROM church",
        "schema": "CREATE TABLE people (People_ID NUMBER, Name TEXT); CREATE TABLE church (Name TEXT, Church_ID NUMBER); CREATE TABLE wedding (Church_ID NUMBER);"
      },
      {
        "question": "Thank you for that!  Could you filter that list to show only the  church names and ids of churches that have hosted 2 or more weddings?",
        "query": "SELECT t1.name, t1.church_id FROM church AS t1 JOIN wedding AS t2 ON t1.church_id = t2.church_id GROUP BY t1.church_id HAVING COUNT ( * ) > = 2",
        "schema": "CREATE TABLE church (Church_ID NUMBER, Name TEXT); CREATE TABLE wedding (Church_ID NUMBER); CREATE TABLE people (Name TEXT, People_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Which weddings took place after 2014?",
        "query": "SELECT * FROM wedding WHERE YEAR > 2014",
        "schema": "CREATE TABLE people (People_ID NUMBER); CREATE TABLE wedding (Church_ID NUMBER, Male_ID NUMBER, Year NUMBER, Female_ID NUMBER);"
      },
      {
        "question": "What are the male names in weddings after 2014?",
        "query": "SELECT t2.name FROM wedding AS t1 JOIN people AS t2 ON t1.male_id = t2.people_id WHERE t1.year > 2014",
        "schema": "CREATE TABLE wedding (Church_ID NUMBER, Year NUMBER, Male_ID NUMBER, Female_ID NUMBER); CREATE TABLE people (People_ID NUMBER, Name TEXT, Is_Male TEXT);"
      },
      {
        "question": "What are the female names in weddings after 2014?",
        "query": "SELECT t3.name FROM wedding AS t1 JOIN people AS t2 ON t1.male_id = t2.people_id JOIN people AS t3 ON t1.female_id = t3.people_id WHERE t1.year > 2014",
        "schema": "CREATE TABLE wedding (Female_ID NUMBER, Male_ID NUMBER, Church_ID NUMBER, Year NUMBER); CREATE TABLE people (Name TEXT, Is_Male TEXT, People_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What years did two or more churches open in?",
        "query": "SELECT open_date FROM church GROUP BY open_date HAVING COUNT ( * ) > = 2",
        "schema": "CREATE TABLE church (Open_Date NUMBER, Organized_by TEXT, Church_ID NUMBER, Name TEXT); CREATE TABLE wedding (Church_ID NUMBER);"
      },
      {
        "question": "What is the name of the church that opened the latest?",
        "query": "SELECT name FROM church ORDER BY open_date DESC LIMIT 1",
        "schema": "CREATE TABLE church (Organized_by TEXT, Name TEXT, Open_Date NUMBER, Church_ID NUMBER); CREATE TABLE wedding (Church_ID NUMBER);"
      },
      {
        "question": "What is that church a continuation of?",
        "query": "SELECT open_date FROM church ORDER BY open_date DESC LIMIT 1",
        "schema": "CREATE TABLE wedding (Church_ID NUMBER); CREATE TABLE church (Name TEXT, Organized_by TEXT, Church_ID NUMBER, Continuation_of TEXT, Open_Date NUMBER);"
      }
    ],
    [
      {
        "question": "What are the names and opening years of the three churches that opened most recently?",
        "query": "SELECT name , open_date FROM church ORDER BY open_date DESC LIMIT 3",
        "schema": "CREATE TABLE church (Name TEXT, Open_Date NUMBER, Church_ID NUMBER); CREATE TABLE people (Name TEXT);"
      },
      {
        "question": "What are the names and opening years of the three churches that opened the earliest?",
        "query": "SELECT name , open_date FROM church ORDER BY open_date ASC LIMIT 3",
        "schema": "CREATE TABLE church (Name TEXT, Church_ID NUMBER, Open_Date NUMBER); CREATE TABLE people (Name TEXT);"
      },
      {
        "question": "Who were those churches organized by?",
        "query": "SELECT organized_by FROM church ORDER BY open_date ASC LIMIT 3",
        "schema": "CREATE TABLE church (Name TEXT, Organized_by TEXT, Church_ID NUMBER, Open_Date NUMBER); CREATE TABLE people (People_ID NUMBER, Name TEXT);"
      }
    ],
    [
      {
        "question": "How many churches are there?",
        "query": "SELECT COUNT ( * ) FROM church",
        "schema": "CREATE TABLE wedding (Church_ID NUMBER); CREATE TABLE church (Name TEXT, Church_ID NUMBER, Continuation_of TEXT, Organized_by TEXT); CREATE TABLE people (People_ID NUMBER);"
      },
      {
        "question": "How many churches had weddings in 2015?",
        "query": "SELECT COUNT ( * ) FROM church AS t1 JOIN wedding AS t2 ON t1.church_id = t2.church_id WHERE t2.year = 2015",
        "schema": "CREATE TABLE church (Organized_by TEXT, Continuation_of TEXT, Church_ID NUMBER, Name TEXT); CREATE TABLE people (People_ID NUMBER); CREATE TABLE wedding (Church_ID NUMBER, Year NUMBER);"
      },
      {
        "question": "Show all church names except or those that had a wedding in year 2015.",
        "query": "SELECT name FROM church EXCEPT SELECT t1.name FROM church AS t1 JOIN wedding AS t2 ON t1.church_id = t2.church_id WHERE t2.year = 2015",
        "schema": "CREATE TABLE people (People_ID NUMBER); CREATE TABLE wedding (Church_ID NUMBER, Year NUMBER); CREATE TABLE church (Name TEXT, Church_ID NUMBER, Continuation_of TEXT, Organized_by TEXT);"
      }
    ],
    [
      {
        "question": "How many women are there?",
        "query": "SELECT COUNT ( * ) FROM people WHERE is_male = 'F'",
        "schema": "CREATE TABLE wedding (Male_ID NUMBER, Female_ID NUMBER); CREATE TABLE people (Name TEXT, Is_Male TEXT, People_ID NUMBER);"
      },
      {
        "question": "And men?",
        "query": "SELECT COUNT ( * ) FROM people WHERE is_male = 'T'",
        "schema": "CREATE TABLE people (People_ID NUMBER, Name TEXT, Is_Male TEXT); CREATE TABLE wedding (Male_ID NUMBER, Female_ID NUMBER);"
      },
      {
        "question": "How many people are there over the age of 30?",
        "query": "SELECT COUNT ( * ) FROM people WHERE age > 30",
        "schema": "CREATE TABLE wedding (Female_ID NUMBER, Male_ID NUMBER); CREATE TABLE people (People_ID NUMBER, Name TEXT, Is_Male TEXT, Age NUMBER);"
      },
      {
        "question": "How many of them are women?",
        "query": "SELECT COUNT ( * ) FROM people WHERE is_male = 'F' AND age > 30",
        "schema": "CREATE TABLE wedding (Female_ID NUMBER, Male_ID NUMBER); CREATE TABLE people (Age NUMBER, People_ID NUMBER, Is_Male TEXT, Name TEXT);"
      }
    ],
    [
      {
        "question": "Show me the country with people younger than 30,",
        "query": "SELECT DISTINCT country FROM people WHERE age<30",
        "schema": "CREATE TABLE people (People_ID NUMBER, Country TEXT, Age NUMBER);"
      },
      {
        "question": "Show me a list of countries with people over the age of 30.",
        "query": "SELECT DISTINCT country FROM people WHERE age>30",
        "schema": "CREATE TABLE people (Age NUMBER, Country TEXT, People_ID NUMBER);"
      },
      {
        "question": "How many males 30 or older are in the Canada",
        "query": "SELECT COUNT ( * ) FROM people WHERE age > = 30 AND is_male = 'T' AND country = 'Canada'",
        "schema": "CREATE TABLE people (Age NUMBER, Is_Male TEXT, Country TEXT, People_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What are all church names?",
        "query": "SELECT name FROM church",
        "schema": "CREATE TABLE wedding (Church_ID NUMBER); CREATE TABLE people (Name TEXT); CREATE TABLE church (Continuation_of TEXT, Church_ID NUMBER, Organized_by TEXT, Name TEXT);"
      },
      {
        "question": "How about church names for weddings of people older than 30?",
        "query": "SELECT t4.name FROM wedding AS t1 JOIN people AS t2 ON t1.male_id = t2.people_id JOIN people AS t3 ON t1.female_id = t3.people_id JOIN church AS t4 ON t4.church_id = t1.church_id WHERE t2.age > 30 OR t3.age > 30",
        "schema": "CREATE TABLE church (Name TEXT, Organized_by TEXT, Church_ID NUMBER, Continuation_of TEXT); CREATE TABLE people (Age NUMBER, People_ID NUMBER, Is_Male TEXT, Name TEXT); CREATE TABLE wedding (Church_ID NUMBER, Female_ID NUMBER, Male_ID NUMBER, Year NUMBER);"
      },
      {
        "question": "What are their opening years?",
        "query": "SELECT t4.name, t4.open_date FROM wedding AS t1 JOIN people AS t2 ON t1.male_id = t2.people_id JOIN people AS t3 ON t1.female_id = t3.people_id JOIN church AS t4 ON t4.church_id = t1.church_id WHERE t2.age > 30 OR t3.age > 30",
        "schema": "CREATE TABLE church (Name TEXT, Church_ID NUMBER, Open_Date NUMBER, Continuation_of TEXT, Organized_by TEXT); CREATE TABLE wedding (Female_ID NUMBER, Church_ID NUMBER, Male_ID NUMBER, Year NUMBER); CREATE TABLE people (Age NUMBER, People_ID NUMBER, Name TEXT, Is_Male TEXT);"
      }
    ]
  ],
  "soccer_1": [
    [
      {
        "question": "what players have a overall rating greater than 80?",
        "query": "SELECT * FROM player_attributes WHERE overall_rating > 80",
        "schema": "CREATE TABLE Team_Attributes (defenceAggressionClass TEXT, buildUpPlayPositioningClass TEXT, buildUpPlaySpeed NUMBER, defenceTeamWidthClass TEXT, chanceCreationCrossingClass TEXT, chanceCreationPositioningClass TEXT, defencePressureClass TEXT, chanceCreationCrossing NUMBER, buildUpPlayPassingClass TEXT, chanceCreationShootingClass TEXT, defencePressure NUMBER, buildUpPlayDribbling NUMBER, chanceCreationPassing NUMBER, buildUpPlayPassing NUMBER, defenceAggression NUMBER, defenceDefenderLineClass TEXT, buildUpPlayDribblingClass TEXT, team_api_id NUMBER, buildUpPlaySpeedClass TEXT, defenceTeamWidth NUMBER, chanceCreationShooting NUMBER, chanceCreationPassingClass TEXT, id NUMBER); CREATE TABLE Player (player_name TEXT, id NUMBER, player_api_id NUMBER, player_fifa_api_id NUMBER); CREATE TABLE Player_Attributes (balance NUMBER, potential NUMBER, interceptions NUMBER, player_fifa_api_id NUMBER, preferred_foot TEXT, aggression NUMBER, gk_handling NUMBER, marking NUMBER, gk_diving NUMBER, gk_reflexes NUMBER, acceleration NUMBER, player_api_id NUMBER, curve NUMBER, positioning NUMBER, dribbling NUMBER, id NUMBER, stamina NUMBER, overall_rating NUMBER, reactions NUMBER);"
      },
      {
        "question": "of those players how many are right-footed?",
        "query": "SELECT COUNT ( * ) FROM player_attributes WHERE overall_rating > 80 AND preferred_foot = 'right'",
        "schema": "CREATE TABLE Player (id NUMBER, player_name TEXT, player_api_id NUMBER, player_fifa_api_id NUMBER); CREATE TABLE Team_Attributes (defenceAggression NUMBER, defencePressure NUMBER, buildUpPlayDribbling NUMBER, buildUpPlaySpeed NUMBER, chanceCreationPositioningClass TEXT, buildUpPlayPassing NUMBER, buildUpPlayPositioningClass TEXT, buildUpPlayPassingClass TEXT, buildUpPlayDribblingClass TEXT, buildUpPlaySpeedClass TEXT, chanceCreationShootingClass TEXT, defenceAggressionClass TEXT, team_api_id NUMBER, chanceCreationPassingClass TEXT, chanceCreationCrossing NUMBER, chanceCreationPassing NUMBER, defenceDefenderLineClass TEXT, defenceTeamWidthClass TEXT, defenceTeamWidth NUMBER, chanceCreationCrossingClass TEXT, id NUMBER, defencePressureClass TEXT, chanceCreationShooting NUMBER); CREATE TABLE Player_Attributes (crossing NUMBER, heading_accuracy NUMBER, potential NUMBER, volleys NUMBER, balance NUMBER, marking NUMBER, player_fifa_api_id NUMBER, acceleration NUMBER, standing_tackle NUMBER, agility NUMBER, gk_reflexes NUMBER, gk_positioning NUMBER, preferred_foot TEXT, gk_kicking NUMBER, aggression NUMBER, overall_rating NUMBER, sprint_speed NUMBER, date TEXT, attacking_work_rate TEXT, vision NUMBER, defensive_work_rate TEXT, free_kick_accuracy NUMBER, long_passing NUMBER, dribbling NUMBER, shot_power NUMBER, stamina NUMBER, player_api_id NUMBER, ball_control NUMBER, finishing NUMBER, gk_handling NUMBER, long_shots NUMBER, penalties NUMBER, interceptions NUMBER, jumping NUMBER, positioning NUMBER, id NUMBER, curve NUMBER, strength NUMBER, sliding_tackle NUMBER, short_passing NUMBER, reactions NUMBER, gk_diving NUMBER);"
      },
      {
        "question": "of the players with an overall rating greater than 80 how many are left-footed?",
        "query": "SELECT COUNT ( * ) FROM player_attributes WHERE overall_rating > 80 AND preferred_foot = 'left'",
        "schema": "CREATE TABLE Player_Attributes (aggression NUMBER, heading_accuracy NUMBER, gk_diving NUMBER, overall_rating NUMBER, vision NUMBER, free_kick_accuracy NUMBER, id NUMBER, defensive_work_rate TEXT, balance NUMBER, volleys NUMBER, sprint_speed NUMBER, gk_kicking NUMBER, attacking_work_rate TEXT, gk_reflexes NUMBER, stamina NUMBER, preferred_foot TEXT, finishing NUMBER, player_fifa_api_id NUMBER, jumping NUMBER, standing_tackle NUMBER, strength NUMBER, short_passing NUMBER, agility NUMBER, crossing NUMBER, marking NUMBER, shot_power NUMBER, date TEXT, dribbling NUMBER, potential NUMBER, gk_positioning NUMBER, interceptions NUMBER, acceleration NUMBER, curve NUMBER, player_api_id NUMBER, positioning NUMBER, long_shots NUMBER, ball_control NUMBER, penalties NUMBER, sliding_tackle NUMBER, long_passing NUMBER, gk_handling NUMBER, reactions NUMBER); CREATE TABLE Team_Attributes (buildUpPlayPositioningClass TEXT, chanceCreationCrossingClass TEXT, chanceCreationPassing NUMBER, defenceDefenderLineClass TEXT, defenceTeamWidth NUMBER, chanceCreationPassingClass TEXT, chanceCreationShooting NUMBER, defenceAggression NUMBER, chanceCreationPositioningClass TEXT, buildUpPlaySpeed NUMBER, defenceAggressionClass TEXT, chanceCreationShootingClass TEXT, id NUMBER, buildUpPlaySpeedClass TEXT, buildUpPlayPassing NUMBER, buildUpPlayPassingClass TEXT, team_api_id NUMBER, buildUpPlayDribblingClass TEXT, defencePressureClass TEXT, defenceTeamWidthClass TEXT, defencePressure NUMBER, chanceCreationCrossing NUMBER, buildUpPlayDribbling NUMBER); CREATE TABLE Player (player_api_id NUMBER, player_name TEXT, id NUMBER, player_fifa_api_id NUMBER);"
      },
      {
        "question": "of the players with an overall rating greater than 80 how many are right-footed?",
        "query": "SELECT COUNT ( * ) FROM player_attributes WHERE overall_rating > 80 AND preferred_foot = 'right'",
        "schema": "CREATE TABLE Team_Attributes (defenceAggression NUMBER, buildUpPlayPassing NUMBER, buildUpPlayPassingClass TEXT, defenceTeamWidth NUMBER, defencePressure NUMBER, team_api_id NUMBER, chanceCreationPassingClass TEXT, defenceDefenderLineClass TEXT, buildUpPlayDribbling NUMBER, chanceCreationCrossingClass TEXT, chanceCreationPassing NUMBER, buildUpPlaySpeed NUMBER, defenceTeamWidthClass TEXT, buildUpPlaySpeedClass TEXT, defenceAggressionClass TEXT, buildUpPlayPositioningClass TEXT, id NUMBER, chanceCreationShooting NUMBER, buildUpPlayDribblingClass TEXT, chanceCreationShootingClass TEXT, defencePressureClass TEXT, chanceCreationCrossing NUMBER, chanceCreationPositioningClass TEXT); CREATE TABLE Player_Attributes (long_shots NUMBER, short_passing NUMBER, sprint_speed NUMBER, gk_reflexes NUMBER, strength NUMBER, volleys NUMBER, penalties NUMBER, finishing NUMBER, long_passing NUMBER, defensive_work_rate TEXT, standing_tackle NUMBER, aggression NUMBER, agility NUMBER, positioning NUMBER, dribbling NUMBER, date TEXT, gk_kicking NUMBER, shot_power NUMBER, curve NUMBER, id NUMBER, interceptions NUMBER, stamina NUMBER, player_fifa_api_id NUMBER, free_kick_accuracy NUMBER, gk_positioning NUMBER, jumping NUMBER, balance NUMBER, ball_control NUMBER, crossing NUMBER, attacking_work_rate TEXT, vision NUMBER, potential NUMBER, heading_accuracy NUMBER, overall_rating NUMBER, preferred_foot TEXT, gk_handling NUMBER, sliding_tackle NUMBER, player_api_id NUMBER, reactions NUMBER, acceleration NUMBER, gk_diving NUMBER, marking NUMBER); CREATE TABLE Player (player_name TEXT, player_fifa_api_id NUMBER, id NUMBER, player_api_id NUMBER);"
      },
      {
        "question": "could add the right-footed and left-footed players that have an overall rating greater than 80 together?",
        "query": "SELECT preferred_foot , COUNT ( * ) FROM player_attributes WHERE overall_rating > 80 GROUP BY preferred_foot",
        "schema": "CREATE TABLE Team_Attributes (buildUpPlaySpeedClass TEXT, chanceCreationPositioningClass TEXT, chanceCreationShooting NUMBER, buildUpPlayDribblingClass TEXT, defencePressure NUMBER, chanceCreationShootingClass TEXT, buildUpPlayPassingClass TEXT, chanceCreationPassing NUMBER, defenceAggression NUMBER, buildUpPlaySpeed NUMBER, defenceAggressionClass TEXT, defenceTeamWidth NUMBER, defencePressureClass TEXT, chanceCreationCrossing NUMBER, chanceCreationPassingClass TEXT, team_api_id NUMBER, buildUpPlayPositioningClass TEXT, buildUpPlayDribbling NUMBER, defenceTeamWidthClass TEXT, id NUMBER, chanceCreationCrossingClass TEXT, defenceDefenderLineClass TEXT, buildUpPlayPassing NUMBER); CREATE TABLE Player (player_name TEXT, player_fifa_api_id NUMBER, player_api_id NUMBER, id NUMBER); CREATE TABLE Player_Attributes (curve NUMBER, vision NUMBER, positioning NUMBER, penalties NUMBER, defensive_work_rate TEXT, volleys NUMBER, strength NUMBER, gk_handling NUMBER, crossing NUMBER, finishing NUMBER, heading_accuracy NUMBER, agility NUMBER, ball_control NUMBER, long_passing NUMBER, reactions NUMBER, sprint_speed NUMBER, long_shots NUMBER, gk_diving NUMBER, sliding_tackle NUMBER, interceptions NUMBER, shot_power NUMBER, dribbling NUMBER, free_kick_accuracy NUMBER, player_fifa_api_id NUMBER, gk_kicking NUMBER, jumping NUMBER, player_api_id NUMBER, balance NUMBER, short_passing NUMBER, attacking_work_rate TEXT, gk_positioning NUMBER, id NUMBER, stamina NUMBER, potential NUMBER, acceleration NUMBER, overall_rating NUMBER, preferred_foot TEXT, marking NUMBER, gk_reflexes NUMBER, aggression NUMBER, standing_tackle NUMBER, date TEXT);"
      }
    ],
    [
      {
        "question": "Hello!  Can you please provide me with a list of the player IDs and player names?",
        "query": "SELECT player_api_id, player_name FROM player",
        "schema": "CREATE TABLE Player (id NUMBER, player_name TEXT, player_fifa_api_id NUMBER, player_api_id NUMBER); CREATE TABLE Player_Attributes (player_api_id NUMBER);"
      },
      {
        "question": "Can you update this list to show both the heights for each player, as well as each of their overall scores?",
        "query": "SELECT t1.player_api_id, t1.player_name, t1.height, t2.overall_rating FROM player AS t1 JOIN player_attributes AS t2 ON t1.player_fifa_api_id = t2.player_fifa_api_id",
        "schema": "CREATE TABLE Player (player_api_id NUMBER, player_fifa_api_id NUMBER, height NUMBER, id NUMBER, player_name TEXT); CREATE TABLE Player_Attributes (heading_accuracy NUMBER, strength NUMBER, balance NUMBER, jumping NUMBER, positioning NUMBER, preferred_foot TEXT, date TEXT, sliding_tackle NUMBER, shot_power NUMBER, gk_kicking NUMBER, dribbling NUMBER, short_passing NUMBER, long_shots NUMBER, marking NUMBER, crossing NUMBER, overall_rating NUMBER, interceptions NUMBER, stamina NUMBER, defensive_work_rate TEXT, reactions NUMBER, standing_tackle NUMBER, aggression NUMBER, player_fifa_api_id NUMBER, gk_positioning NUMBER, penalties NUMBER, id NUMBER, acceleration NUMBER, ball_control NUMBER, gk_diving NUMBER, vision NUMBER, long_passing NUMBER, potential NUMBER, free_kick_accuracy NUMBER, gk_reflexes NUMBER, sprint_speed NUMBER, volleys NUMBER, gk_handling NUMBER, attacking_work_rate TEXT, curve NUMBER, player_api_id NUMBER, finishing NUMBER, agility NUMBER);"
      },
      {
        "question": "Thank you!  Can you filter this list to show only the players who have an overall rating higher than 85?",
        "query": "SELECT t1.player_api_id, t1.player_name, t1.height, t2.overall_rating FROM player AS t1 JOIN player_attributes AS t2 ON t1.player_fifa_api_id = t2.player_fifa_api_id WHERE t2.overall_rating > 85",
        "schema": "CREATE TABLE Player (id NUMBER, height NUMBER, player_fifa_api_id NUMBER, player_name TEXT, player_api_id NUMBER); CREATE TABLE Player_Attributes (shot_power NUMBER, standing_tackle NUMBER, attacking_work_rate TEXT, date TEXT, sprint_speed NUMBER, dribbling NUMBER, long_passing NUMBER, preferred_foot TEXT, interceptions NUMBER, volleys NUMBER, gk_diving NUMBER, agility NUMBER, crossing NUMBER, stamina NUMBER, aggression NUMBER, gk_reflexes NUMBER, defensive_work_rate TEXT, marking NUMBER, gk_handling NUMBER, strength NUMBER, player_api_id NUMBER, overall_rating NUMBER, short_passing NUMBER, ball_control NUMBER, jumping NUMBER, gk_kicking NUMBER, balance NUMBER, vision NUMBER, heading_accuracy NUMBER, penalties NUMBER, player_fifa_api_id NUMBER, long_shots NUMBER, sliding_tackle NUMBER, gk_positioning NUMBER, reactions NUMBER, acceleration NUMBER, id NUMBER, positioning NUMBER, finishing NUMBER, free_kick_accuracy NUMBER, curve NUMBER, potential NUMBER);"
      },
      {
        "question": "Excellent!  Finally, could you filter this list to show only the players with a height that is greater than 180 cm?",
        "query": "SELECT player_api_id FROM player WHERE height > 180 INTERSECT SELECT player_api_id FROM player_attributes WHERE overall_rating > 85",
        "schema": "CREATE TABLE Player_Attributes (acceleration NUMBER, stamina NUMBER, long_shots NUMBER, crossing NUMBER, id NUMBER, finishing NUMBER, interceptions NUMBER, vision NUMBER, preferred_foot TEXT, reactions NUMBER, player_fifa_api_id NUMBER, jumping NUMBER, sprint_speed NUMBER, gk_positioning NUMBER, overall_rating NUMBER, penalties NUMBER, strength NUMBER, gk_kicking NUMBER, shot_power NUMBER, sliding_tackle NUMBER, standing_tackle NUMBER, gk_reflexes NUMBER, gk_handling NUMBER, marking NUMBER, gk_diving NUMBER, free_kick_accuracy NUMBER, date TEXT, player_api_id NUMBER, positioning NUMBER, potential NUMBER, volleys NUMBER, heading_accuracy NUMBER, defensive_work_rate TEXT, balance NUMBER, attacking_work_rate TEXT, short_passing NUMBER, dribbling NUMBER, long_passing NUMBER, agility NUMBER, aggression NUMBER, curve NUMBER, ball_control NUMBER); CREATE TABLE Player (height NUMBER, id NUMBER, player_name TEXT, player_api_id NUMBER, player_fifa_api_id NUMBER);"
      }
    ],
    [
      {
        "question": "Hello!  Can you tell me how many left footed players there are?",
        "query": "SELECT COUNT ( * ) FROM player_attributes WHERE preferred_foot = \"left\"",
        "schema": "CREATE TABLE Player (id NUMBER, player_fifa_api_id NUMBER, player_name TEXT, player_api_id NUMBER, weight NUMBER); CREATE TABLE Team (team_fifa_api_id NUMBER); CREATE TABLE Player_Attributes (gk_kicking NUMBER, agility NUMBER, sprint_speed NUMBER, gk_handling NUMBER, curve NUMBER, finishing NUMBER, heading_accuracy NUMBER, crossing NUMBER, long_shots NUMBER, gk_positioning NUMBER, volleys NUMBER, dribbling NUMBER, player_fifa_api_id NUMBER, stamina NUMBER, ball_control NUMBER, player_api_id NUMBER, positioning NUMBER, shot_power NUMBER, potential NUMBER, balance NUMBER, penalties NUMBER, acceleration NUMBER, gk_diving NUMBER, preferred_foot TEXT, standing_tackle NUMBER, reactions NUMBER, attacking_work_rate TEXT, strength NUMBER, long_passing NUMBER, defensive_work_rate TEXT, vision NUMBER, sliding_tackle NUMBER, date TEXT, marking NUMBER, gk_reflexes NUMBER, id NUMBER, jumping NUMBER, free_kick_accuracy NUMBER, aggression NUMBER, interceptions NUMBER, short_passing NUMBER, overall_rating NUMBER);"
      },
      {
        "question": "Holy smokes that's a lot!  Okay, let's narrow that down.  How many left footed players have a height between 180cm and 190cm?",
        "query": "SELECT COUNT ( * ) FROM ( SELECT player_api_id FROM player WHERE height > = 180 AND height < = 190 INTERSECT SELECT player_api_id FROM player_attributes WHERE preferred_foot = \"left\" )",
        "schema": "CREATE TABLE Player (player_name TEXT, player_fifa_api_id NUMBER, weight NUMBER, height NUMBER, player_api_id NUMBER, id NUMBER); CREATE TABLE Team (team_fifa_api_id NUMBER); CREATE TABLE Player_Attributes (penalties NUMBER, free_kick_accuracy NUMBER, marking NUMBER, short_passing NUMBER, long_shots NUMBER, gk_handling NUMBER, aggression NUMBER, id NUMBER, jumping NUMBER, heading_accuracy NUMBER, attacking_work_rate TEXT, vision NUMBER, gk_diving NUMBER, acceleration NUMBER, curve NUMBER, long_passing NUMBER, strength NUMBER, sprint_speed NUMBER, date TEXT, ball_control NUMBER, sliding_tackle NUMBER, balance NUMBER, volleys NUMBER, shot_power NUMBER, crossing NUMBER, gk_kicking NUMBER, positioning NUMBER, preferred_foot TEXT, gk_reflexes NUMBER, player_fifa_api_id NUMBER, stamina NUMBER, dribbling NUMBER, overall_rating NUMBER, gk_positioning NUMBER, standing_tackle NUMBER, potential NUMBER, player_api_id NUMBER, reactions NUMBER, defensive_work_rate TEXT, agility NUMBER, interceptions NUMBER, finishing NUMBER);"
      },
      {
        "question": "Thank you!  Can you please list player ids for all of the left-footed players with heights between 180cm and 190cm?",
        "query": "SELECT player_api_id FROM player WHERE height > = 180 AND height < = 190 INTERSECT SELECT player_api_id FROM player_attributes WHERE preferred_foot = \"left\"",
        "schema": "CREATE TABLE Player (weight NUMBER, id NUMBER, player_api_id NUMBER, player_name TEXT, player_fifa_api_id NUMBER, height NUMBER); CREATE TABLE Team (team_fifa_api_id NUMBER); CREATE TABLE Player_Attributes (gk_handling NUMBER, long_shots NUMBER, date TEXT, dribbling NUMBER, gk_reflexes NUMBER, reactions NUMBER, gk_positioning NUMBER, crossing NUMBER, sliding_tackle NUMBER, id NUMBER, gk_kicking NUMBER, player_api_id NUMBER, player_fifa_api_id NUMBER, preferred_foot TEXT, heading_accuracy NUMBER, positioning NUMBER, overall_rating NUMBER, long_passing NUMBER, finishing NUMBER, curve NUMBER, aggression NUMBER, gk_diving NUMBER, sprint_speed NUMBER, attacking_work_rate TEXT, short_passing NUMBER, marking NUMBER, standing_tackle NUMBER, ball_control NUMBER, free_kick_accuracy NUMBER, defensive_work_rate TEXT, agility NUMBER, volleys NUMBER, balance NUMBER, vision NUMBER, shot_power NUMBER, penalties NUMBER, acceleration NUMBER, strength NUMBER, stamina NUMBER, interceptions NUMBER, jumping NUMBER, potential NUMBER);"
      },
      {
        "question": "Great!  Can you tell me the name of the player who is the tallest left-footed player?",
        "query": "SELECT player_name FROM player AS t1 JOIN player_attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.preferred_foot = \"left\" ORDER BY height DESC LIMIT 1",
        "schema": "CREATE TABLE Player_Attributes (short_passing NUMBER, strength NUMBER, reactions NUMBER, balance NUMBER, acceleration NUMBER, stamina NUMBER, agility NUMBER, vision NUMBER, heading_accuracy NUMBER, preferred_foot TEXT, gk_handling NUMBER, crossing NUMBER, overall_rating NUMBER, date TEXT, curve NUMBER, positioning NUMBER, defensive_work_rate TEXT, player_api_id NUMBER, long_shots NUMBER, interceptions NUMBER, shot_power NUMBER, potential NUMBER, dribbling NUMBER, volleys NUMBER, gk_kicking NUMBER, penalties NUMBER, id NUMBER, gk_reflexes NUMBER, attacking_work_rate TEXT, ball_control NUMBER, player_fifa_api_id NUMBER, jumping NUMBER, aggression NUMBER, gk_diving NUMBER, sliding_tackle NUMBER, long_passing NUMBER, marking NUMBER, free_kick_accuracy NUMBER, standing_tackle NUMBER, sprint_speed NUMBER, gk_positioning NUMBER, finishing NUMBER); CREATE TABLE Team (team_fifa_api_id NUMBER); CREATE TABLE Player (player_name TEXT, weight NUMBER, height NUMBER, id NUMBER, player_api_id NUMBER, player_fifa_api_id NUMBER);"
      }
    ],
    [
      {
        "question": "List all player names who have an overall rating higher than the average.",
        "query": "SELECT DISTINCT t1.player_name FROM player AS t1 JOIN player_attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.overall_rating > ( SELECT AVG ( overall_rating ) FROM player_attributes )",
        "schema": "CREATE TABLE Player (player_api_id NUMBER, player_name TEXT, id NUMBER, height NUMBER, player_fifa_api_id NUMBER); CREATE TABLE Player_Attributes (interceptions NUMBER, free_kick_accuracy NUMBER, potential NUMBER, heading_accuracy NUMBER, shot_power NUMBER, gk_kicking NUMBER, gk_handling NUMBER, player_fifa_api_id NUMBER, balance NUMBER, preferred_foot TEXT, sprint_speed NUMBER, dribbling NUMBER, marking NUMBER, finishing NUMBER, attacking_work_rate TEXT, reactions NUMBER, defensive_work_rate TEXT, positioning NUMBER, volleys NUMBER, id NUMBER, overall_rating NUMBER, long_passing NUMBER, curve NUMBER, gk_reflexes NUMBER, jumping NUMBER, vision NUMBER, aggression NUMBER, gk_positioning NUMBER, acceleration NUMBER, gk_diving NUMBER, crossing NUMBER, stamina NUMBER, penalties NUMBER, short_passing NUMBER, date TEXT, long_shots NUMBER, player_api_id NUMBER, sliding_tackle NUMBER, agility NUMBER, ball_control NUMBER, standing_tackle NUMBER, strength NUMBER);"
      },
      {
        "question": "List all player names who have an overall rating lower than the average.",
        "query": "SELECT DISTINCT t1.player_name FROM player AS t1 JOIN player_attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.overall_rating < ( SELECT AVG ( overall_rating ) FROM player_attributes )",
        "schema": "CREATE TABLE Player_Attributes (player_api_id NUMBER, shot_power NUMBER, heading_accuracy NUMBER, reactions NUMBER, ball_control NUMBER, stamina NUMBER, strength NUMBER, penalties NUMBER, vision NUMBER, finishing NUMBER, player_fifa_api_id NUMBER, interceptions NUMBER, sliding_tackle NUMBER, standing_tackle NUMBER, dribbling NUMBER, gk_diving NUMBER, volleys NUMBER, agility NUMBER, date TEXT, short_passing NUMBER, gk_kicking NUMBER, id NUMBER, positioning NUMBER, long_passing NUMBER, curve NUMBER, overall_rating NUMBER, gk_reflexes NUMBER, potential NUMBER, preferred_foot TEXT, acceleration NUMBER, attacking_work_rate TEXT, balance NUMBER, free_kick_accuracy NUMBER, sprint_speed NUMBER, defensive_work_rate TEXT, aggression NUMBER, long_shots NUMBER, jumping NUMBER, gk_positioning NUMBER, gk_handling NUMBER, crossing NUMBER, marking NUMBER); CREATE TABLE Player (id NUMBER, player_api_id NUMBER, player_name TEXT, height NUMBER, player_fifa_api_id NUMBER);"
      },
      {
        "question": "How many players have an overall rating lower than the average?",
        "query": "SELECT COUNT ( DISTINCT t1.id ) FROM player AS t1 JOIN player_attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.overall_rating < ( SELECT AVG ( overall_rating ) FROM player_attributes )",
        "schema": "CREATE TABLE Player (player_fifa_api_id NUMBER, player_api_id NUMBER, height NUMBER, player_name TEXT, id NUMBER); CREATE TABLE Player_Attributes (id NUMBER, ball_control NUMBER, marking NUMBER, finishing NUMBER, positioning NUMBER, standing_tackle NUMBER, volleys NUMBER, long_passing NUMBER, defensive_work_rate TEXT, shot_power NUMBER, gk_kicking NUMBER, jumping NUMBER, interceptions NUMBER, gk_diving NUMBER, crossing NUMBER, attacking_work_rate TEXT, acceleration NUMBER, player_fifa_api_id NUMBER, potential NUMBER, sliding_tackle NUMBER, player_api_id NUMBER, aggression NUMBER, heading_accuracy NUMBER, gk_reflexes NUMBER, strength NUMBER, gk_positioning NUMBER, overall_rating NUMBER, reactions NUMBER, short_passing NUMBER, stamina NUMBER, dribbling NUMBER, free_kick_accuracy NUMBER, curve NUMBER, balance NUMBER, date TEXT, vision NUMBER, agility NUMBER, preferred_foot TEXT, long_shots NUMBER, penalties NUMBER, sprint_speed NUMBER, gk_handling NUMBER);"
      },
      {
        "question": "What is the average height of players that have an overall rating lower than the average?",
        "query": "SELECT AVG ( t1.height ) FROM player AS t1 JOIN player_attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.overall_rating < ( SELECT AVG ( overall_rating ) FROM player_attributes )",
        "schema": "CREATE TABLE Player_Attributes (jumping NUMBER, ball_control NUMBER, gk_diving NUMBER, sliding_tackle NUMBER, heading_accuracy NUMBER, sprint_speed NUMBER, dribbling NUMBER, stamina NUMBER, preferred_foot TEXT, player_api_id NUMBER, id NUMBER, long_passing NUMBER, free_kick_accuracy NUMBER, player_fifa_api_id NUMBER, vision NUMBER, interceptions NUMBER, date TEXT, gk_reflexes NUMBER, reactions NUMBER, shot_power NUMBER, crossing NUMBER, finishing NUMBER, attacking_work_rate TEXT, gk_kicking NUMBER, overall_rating NUMBER, strength NUMBER, gk_handling NUMBER, agility NUMBER, potential NUMBER, curve NUMBER, volleys NUMBER, aggression NUMBER, standing_tackle NUMBER, marking NUMBER, defensive_work_rate TEXT, penalties NUMBER, acceleration NUMBER, long_shots NUMBER, gk_positioning NUMBER, short_passing NUMBER, positioning NUMBER, balance NUMBER); CREATE TABLE Player (player_api_id NUMBER, player_fifa_api_id NUMBER, id NUMBER, player_name TEXT, height NUMBER);"
      },
      {
        "question": "What is the average height of players that have an overall rating higher than the average?",
        "query": "SELECT AVG ( t1.height ) FROM player AS t1 JOIN player_attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.overall_rating > ( SELECT AVG ( overall_rating ) FROM player_attributes )",
        "schema": "CREATE TABLE Player (height NUMBER, player_name TEXT, player_api_id NUMBER, player_fifa_api_id NUMBER, id NUMBER); CREATE TABLE Player_Attributes (finishing NUMBER, curve NUMBER, strength NUMBER, reactions NUMBER, vision NUMBER, ball_control NUMBER, dribbling NUMBER, attacking_work_rate TEXT, aggression NUMBER, gk_reflexes NUMBER, short_passing NUMBER, sprint_speed NUMBER, penalties NUMBER, player_api_id NUMBER, crossing NUMBER, gk_positioning NUMBER, volleys NUMBER, agility NUMBER, gk_handling NUMBER, shot_power NUMBER, stamina NUMBER, standing_tackle NUMBER, preferred_foot TEXT, sliding_tackle NUMBER, overall_rating NUMBER, long_shots NUMBER, gk_kicking NUMBER, long_passing NUMBER, id NUMBER, free_kick_accuracy NUMBER, marking NUMBER, acceleration NUMBER, heading_accuracy NUMBER, jumping NUMBER, player_fifa_api_id NUMBER, positioning NUMBER, potential NUMBER, gk_diving NUMBER, defensive_work_rate TEXT, date TEXT, interceptions NUMBER, balance NUMBER);"
      }
    ],
    [
      {
        "question": "What are the names of people with overall rating between 85 and 90? | by people did you mean players? | yes",
        "query": "SELECT DISTINCT t1.player_name FROM player AS t1 JOIN player_attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.overall_rating > = 85 AND t2.overall_rating < = 90",
        "schema": "CREATE TABLE Player_Attributes (overall_rating NUMBER, potential NUMBER, interceptions NUMBER, aggression NUMBER, gk_diving NUMBER, acceleration NUMBER, shot_power NUMBER, sprint_speed NUMBER, finishing NUMBER, player_api_id NUMBER, stamina NUMBER, defensive_work_rate TEXT, gk_handling NUMBER, long_passing NUMBER, gk_positioning NUMBER, volleys NUMBER, long_shots NUMBER, standing_tackle NUMBER, penalties NUMBER, balance NUMBER, gk_kicking NUMBER, id NUMBER, heading_accuracy NUMBER, curve NUMBER, player_fifa_api_id NUMBER, jumping NUMBER, positioning NUMBER, vision NUMBER, preferred_foot TEXT, free_kick_accuracy NUMBER, dribbling NUMBER, agility NUMBER, marking NUMBER, gk_reflexes NUMBER, ball_control NUMBER); CREATE TABLE Player (player_fifa_api_id NUMBER, player_api_id NUMBER, player_name TEXT, id NUMBER);"
      },
      {
        "question": "Of them which are left footed?",
        "query": "SELECT DISTINCT t1.player_name FROM player AS t1 JOIN player_attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.preferred_foot = \"left\" AND t2.overall_rating > = 85 AND t2.overall_rating < = 90",
        "schema": "CREATE TABLE Player (id NUMBER, player_api_id NUMBER, player_fifa_api_id NUMBER, player_name TEXT); CREATE TABLE Player_Attributes (potential NUMBER, defensive_work_rate TEXT, player_api_id NUMBER, acceleration NUMBER, heading_accuracy NUMBER, overall_rating NUMBER, player_fifa_api_id NUMBER, reactions NUMBER, ball_control NUMBER, gk_handling NUMBER, interceptions NUMBER, strength NUMBER, finishing NUMBER, sprint_speed NUMBER, long_shots NUMBER, gk_reflexes NUMBER, id NUMBER, vision NUMBER, gk_diving NUMBER, agility NUMBER, volleys NUMBER, sliding_tackle NUMBER, free_kick_accuracy NUMBER, aggression NUMBER, crossing NUMBER, stamina NUMBER, gk_positioning NUMBER, gk_kicking NUMBER, jumping NUMBER, dribbling NUMBER, standing_tackle NUMBER, marking NUMBER, balance NUMBER, curve NUMBER, positioning NUMBER, preferred_foot TEXT, short_passing NUMBER, date TEXT, long_passing NUMBER, penalties NUMBER, attacking_work_rate TEXT, shot_power NUMBER);"
      },
      {
        "question": "What about the names of right-footed players?",
        "query": "SELECT DISTINCT t1.player_name FROM player AS t1 JOIN player_attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.preferred_foot = \"right\"",
        "schema": "CREATE TABLE Player_Attributes (free_kick_accuracy NUMBER, gk_positioning NUMBER, strength NUMBER, volleys NUMBER, short_passing NUMBER, agility NUMBER, id NUMBER, heading_accuracy NUMBER, gk_handling NUMBER, long_shots NUMBER, standing_tackle NUMBER, marking NUMBER, player_fifa_api_id NUMBER, interceptions NUMBER, gk_reflexes NUMBER, date TEXT, acceleration NUMBER, finishing NUMBER, preferred_foot TEXT, long_passing NUMBER, balance NUMBER, penalties NUMBER, stamina NUMBER, jumping NUMBER, sliding_tackle NUMBER, positioning NUMBER, shot_power NUMBER, defensive_work_rate TEXT, attacking_work_rate TEXT, vision NUMBER, ball_control NUMBER, aggression NUMBER, curve NUMBER, player_api_id NUMBER, overall_rating NUMBER, dribbling NUMBER, sprint_speed NUMBER, reactions NUMBER, gk_kicking NUMBER, gk_diving NUMBER, crossing NUMBER, potential NUMBER); CREATE TABLE Player (player_api_id NUMBER, player_fifa_api_id NUMBER, player_name TEXT, id NUMBER);"
      }
    ],
    [
      {
        "question": "Which 5 players have the highest potential? | Do you want the names of those players? | Yes, please.",
        "query": "SELECT DISTINCT t1.player_name FROM player AS t1 JOIN player_attributes AS t2 ON t1.player_api_id = t2.player_api_id ORDER BY potential DESC LIMIT 5",
        "schema": "CREATE TABLE Player_Attributes (gk_diving NUMBER, positioning NUMBER, gk_handling NUMBER, penalties NUMBER, curve NUMBER, date TEXT, marking NUMBER, shot_power NUMBER, crossing NUMBER, dribbling NUMBER, agility NUMBER, gk_reflexes NUMBER, player_fifa_api_id NUMBER, sliding_tackle NUMBER, heading_accuracy NUMBER, balance NUMBER, id NUMBER, vision NUMBER, defensive_work_rate TEXT, interceptions NUMBER, potential NUMBER, aggression NUMBER, gk_positioning NUMBER, player_api_id NUMBER, preferred_foot TEXT, short_passing NUMBER, standing_tackle NUMBER, ball_control NUMBER, sprint_speed NUMBER, overall_rating NUMBER, stamina NUMBER, jumping NUMBER, acceleration NUMBER, long_shots NUMBER, reactions NUMBER, finishing NUMBER, gk_kicking NUMBER, attacking_work_rate TEXT, volleys NUMBER, free_kick_accuracy NUMBER, strength NUMBER, long_passing NUMBER); CREATE TABLE Player (id NUMBER, player_name TEXT, player_api_id NUMBER, height NUMBER, player_fifa_api_id NUMBER);"
      },
      {
        "question": "What are their birthdays?",
        "query": "SELECT DISTINCT t1.birthday FROM player AS t1 JOIN player_attributes AS t2 ON t1.player_api_id = t2.player_api_id ORDER BY potential DESC LIMIT 5",
        "schema": "CREATE TABLE Player (player_fifa_api_id NUMBER, height NUMBER, player_api_id NUMBER, birthday TEXT, player_name TEXT, id NUMBER); CREATE TABLE Player_Attributes (short_passing NUMBER, long_shots NUMBER, ball_control NUMBER, gk_handling NUMBER, aggression NUMBER, stamina NUMBER, balance NUMBER, standing_tackle NUMBER, reactions NUMBER, overall_rating NUMBER, preferred_foot TEXT, crossing NUMBER, player_api_id NUMBER, potential NUMBER, attacking_work_rate TEXT, heading_accuracy NUMBER, gk_reflexes NUMBER, marking NUMBER, curve NUMBER, jumping NUMBER, free_kick_accuracy NUMBER, agility NUMBER, sprint_speed NUMBER, acceleration NUMBER, volleys NUMBER, strength NUMBER, dribbling NUMBER, gk_positioning NUMBER, player_fifa_api_id NUMBER, finishing NUMBER, shot_power NUMBER, long_passing NUMBER, gk_kicking NUMBER, gk_diving NUMBER, penalties NUMBER, id NUMBER, interceptions NUMBER, defensive_work_rate TEXT, date TEXT, vision NUMBER, sliding_tackle NUMBER, positioning NUMBER);"
      },
      {
        "question": "What are their weights?",
        "query": "SELECT DISTINCT t1.weight FROM player AS t1 JOIN player_attributes AS t2 ON t1.player_api_id = t2.player_api_id ORDER BY potential DESC LIMIT 5",
        "schema": "CREATE TABLE Player (player_api_id NUMBER, birthday TEXT, player_name TEXT, player_fifa_api_id NUMBER, height NUMBER, weight NUMBER, id NUMBER); CREATE TABLE Player_Attributes (jumping NUMBER, vision NUMBER, id NUMBER, acceleration NUMBER, dribbling NUMBER, heading_accuracy NUMBER, defensive_work_rate TEXT, overall_rating NUMBER, potential NUMBER, marking NUMBER, volleys NUMBER, crossing NUMBER, balance NUMBER, sprint_speed NUMBER, attacking_work_rate TEXT, date TEXT, player_api_id NUMBER, standing_tackle NUMBER, gk_handling NUMBER, stamina NUMBER, interceptions NUMBER, free_kick_accuracy NUMBER, ball_control NUMBER, strength NUMBER, gk_positioning NUMBER, agility NUMBER, gk_reflexes NUMBER, finishing NUMBER, gk_diving NUMBER, gk_kicking NUMBER, shot_power NUMBER, long_passing NUMBER, curve NUMBER, aggression NUMBER, reactions NUMBER, preferred_foot TEXT, sliding_tackle NUMBER, penalties NUMBER, long_shots NUMBER, positioning NUMBER, short_passing NUMBER, player_fifa_api_id NUMBER);"
      }
    ],
    [
      {
        "question": "Who are the top 3 players in terms of overall rating?",
        "query": "SELECT DISTINCT t1.player_name FROM player AS t1 JOIN player_attributes AS t2 ON t1.player_api_id = t2.player_api_id ORDER BY overall_rating DESC LIMIT 3",
        "schema": "CREATE TABLE Player_Attributes (aggression NUMBER, gk_positioning NUMBER, player_fifa_api_id NUMBER, heading_accuracy NUMBER, overall_rating NUMBER, potential NUMBER, interceptions NUMBER, marking NUMBER, strength NUMBER, free_kick_accuracy NUMBER, jumping NUMBER, balance NUMBER, attacking_work_rate TEXT, shot_power NUMBER, sliding_tackle NUMBER, gk_handling NUMBER, volleys NUMBER, long_passing NUMBER, acceleration NUMBER, curve NUMBER, gk_diving NUMBER, stamina NUMBER, vision NUMBER, gk_kicking NUMBER, dribbling NUMBER, gk_reflexes NUMBER, crossing NUMBER, preferred_foot TEXT, positioning NUMBER, player_api_id NUMBER, id NUMBER, agility NUMBER, finishing NUMBER, penalties NUMBER); CREATE TABLE Player (height NUMBER, player_name TEXT, id NUMBER, player_api_id NUMBER, player_fifa_api_id NUMBER);"
      },
      {
        "question": "Which player scored highest in dribbling?",
        "query": "SELECT DISTINCT t1.player_name FROM player AS t1 JOIN player_attributes AS t2 ON t1.player_api_id = t2.player_api_id ORDER BY dribbling DESC LIMIT 1",
        "schema": "CREATE TABLE Player_Attributes (agility NUMBER, volleys NUMBER, shot_power NUMBER, long_shots NUMBER, crossing NUMBER, preferred_foot TEXT, player_api_id NUMBER, penalties NUMBER, attacking_work_rate TEXT, overall_rating NUMBER, free_kick_accuracy NUMBER, balance NUMBER, reactions NUMBER, heading_accuracy NUMBER, short_passing NUMBER, marking NUMBER, jumping NUMBER, sprint_speed NUMBER, date TEXT, vision NUMBER, sliding_tackle NUMBER, long_passing NUMBER, standing_tackle NUMBER, gk_reflexes NUMBER, ball_control NUMBER, finishing NUMBER, interceptions NUMBER, stamina NUMBER, id NUMBER, player_fifa_api_id NUMBER, acceleration NUMBER, dribbling NUMBER, positioning NUMBER, defensive_work_rate TEXT, gk_kicking NUMBER, gk_diving NUMBER, potential NUMBER, gk_positioning NUMBER, gk_handling NUMBER, aggression NUMBER, strength NUMBER, curve NUMBER); CREATE TABLE Player (player_name TEXT, id NUMBER, player_fifa_api_id NUMBER, player_api_id NUMBER, height NUMBER);"
      },
      {
        "question": "What is Cristiano Ronaldo's birthday?",
        "query": "SELECT birthday FROM player WHERE player_name = \"Cristiano Ronaldo\"",
        "schema": "CREATE TABLE Player_Attributes (shot_power NUMBER, ball_control NUMBER, sliding_tackle NUMBER, interceptions NUMBER, long_shots NUMBER, balance NUMBER, dribbling NUMBER, long_passing NUMBER, defensive_work_rate TEXT, standing_tackle NUMBER, reactions NUMBER, curve NUMBER, positioning NUMBER, gk_diving NUMBER, preferred_foot TEXT, marking NUMBER, finishing NUMBER, aggression NUMBER, heading_accuracy NUMBER, player_fifa_api_id NUMBER, gk_kicking NUMBER, player_api_id NUMBER, gk_handling NUMBER, attacking_work_rate TEXT, id NUMBER, sprint_speed NUMBER, acceleration NUMBER, gk_positioning NUMBER, gk_reflexes NUMBER, date TEXT, potential NUMBER, stamina NUMBER, short_passing NUMBER, jumping NUMBER, volleys NUMBER, vision NUMBER, crossing NUMBER, overall_rating NUMBER, penalties NUMBER, agility NUMBER, free_kick_accuracy NUMBER, strength NUMBER); CREATE TABLE Player (player_api_id NUMBER, birthday TEXT, player_name TEXT, id NUMBER, player_fifa_api_id NUMBER, height NUMBER);"
      }
    ]
  ],
  "customers_and_products_contacts": [
    [
      {
        "question": "Can you show the product name and total order quantity of each product please?",
        "query": "SELECT t1.product_name , SUM ( t2.order_quantity ) FROM products AS t1 JOIN order_items AS t2 ON t1.product_id = t2.product_id GROUP BY t1.product_id",
        "schema": "CREATE TABLE Customer_Orders (order_id NUMBER); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Products (product_name TEXT, product_id NUMBER); CREATE TABLE Order_Items (product_id NUMBER, order_quantity TEXT, order_item_id NUMBER, order_id NUMBER);"
      },
      {
        "question": "Could you add the product type codes to the table please?",
        "query": "SELECT t1.product_name , SUM ( t2.order_quantity ) ,t1.product_type_code FROM products AS t1 JOIN order_items AS t2 ON t1.product_id = t2.product_id GROUP BY t1.product_id",
        "schema": "CREATE TABLE Products (product_id NUMBER, product_type_code TEXT, product_name TEXT); CREATE TABLE Order_Items (order_id NUMBER, order_quantity TEXT, order_item_id NUMBER, product_id NUMBER); CREATE TABLE Customer_Orders (order_id NUMBER); CREATE TABLE Customers (customer_id NUMBER);"
      },
      {
        "question": "What is the average product price of all the products?",
        "query": "SELECT AVG ( product_price ) FROM products",
        "schema": "CREATE TABLE Customer_Orders (order_id NUMBER); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Order_Items (product_id NUMBER, order_id NUMBER, order_item_id NUMBER, order_quantity TEXT); CREATE TABLE Products (product_price NUMBER, product_type_code TEXT, product_name TEXT, product_id NUMBER);"
      },
      {
        "question": "Can you list the product names of all products with prices below the average product price?",
        "query": "SELECT product_name FROM products WHERE product_price < ( SELECT AVG ( product_price ) FROM products )",
        "schema": "CREATE TABLE Products (product_price NUMBER, product_name TEXT, product_type_code TEXT, product_id NUMBER); CREATE TABLE Order_Items (product_id NUMBER, order_quantity TEXT, order_item_id NUMBER, order_id NUMBER); CREATE TABLE Customer_Orders (order_id NUMBER); CREATE TABLE Customers (customer_id NUMBER);"
      },
      {
        "question": "The product ids of all products whose prices are above the average product price are listed.",
        "query": "SELECT product_name FROM products WHERE product_price> ( SELECT AVG ( product_price ) FROM products )",
        "schema": "CREATE TABLE Products (product_name TEXT, product_price NUMBER, product_id NUMBER, product_type_code TEXT); CREATE TABLE Order_Items (order_quantity TEXT, order_item_id NUMBER, order_id NUMBER, product_id NUMBER); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Customer_Orders (order_id NUMBER);"
      }
    ],
    [
      {
        "question": "how many customers are presented on the table",
        "query": "SELECT COUNT ( * ) FROM customers",
        "schema": "CREATE TABLE Customer_Orders (order_id NUMBER, customer_id NUMBER); CREATE TABLE Customers (customer_id NUMBER, customer_name TEXT, payment_method_code TEXT, customer_number TEXT); CREATE TABLE Customer_Address_History (customer_id NUMBER);"
      },
      {
        "question": "show all the customers name",
        "query": "SELECT customer_name FROM customers",
        "schema": "CREATE TABLE Customer_Address_History (customer_id NUMBER); CREATE TABLE Customer_Orders (order_id NUMBER, customer_id NUMBER); CREATE TABLE Customers (payment_method_code TEXT, customer_id NUMBER, customer_number TEXT, customer_name TEXT);"
      },
      {
        "question": "what is the customer number of Kayley",
        "query": "SELECT customer_number FROM customers WHERE customer_name = \"Kayley\"",
        "schema": "CREATE TABLE Customers (customer_name TEXT, payment_method_code TEXT, customer_address TEXT, customer_id NUMBER, customer_number TEXT); CREATE TABLE Customer_Address_History (customer_id NUMBER); CREATE TABLE Customer_Orders (customer_id NUMBER, order_id NUMBER);"
      },
      {
        "question": "what is the order status code of Sterling",
        "query": "SELECT t2.order_status_code FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id WHERE t1.customer_name = \"Sterling\"",
        "schema": "CREATE TABLE Customer_Orders (customer_id NUMBER, order_status_code TEXT, order_id NUMBER); CREATE TABLE Addresses (city TEXT); CREATE TABLE Customer_Address_History (customer_id NUMBER); CREATE TABLE Order_Items (order_id NUMBER); CREATE TABLE Customers (customer_address TEXT, customer_name TEXT, customer_id NUMBER, customer_number TEXT, payment_method_code TEXT);"
      },
      {
        "question": "show the name of the customer who has the most orders",
        "query": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id GROUP BY t1.customer_id ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Addresses (city TEXT); CREATE TABLE Customer_Orders (customer_id NUMBER, order_status_code TEXT, order_id NUMBER); CREATE TABLE Customers (customer_id NUMBER, customer_name TEXT, customer_address TEXT, payment_method_code TEXT, customer_number TEXT); CREATE TABLE Order_Items (order_id NUMBER); CREATE TABLE Customer_Address_History (customer_id NUMBER);"
      }
    ],
    [
      {
        "question": "How many products have a price higher than the average?",
        "query": "SELECT COUNT ( * ) FROM products WHERE product_price > ( SELECT AVG ( product_price ) FROM products )",
        "schema": "CREATE TABLE Products (product_id NUMBER, product_price NUMBER, product_name TEXT, product_type_code TEXT); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Customer_Orders (customer_id NUMBER);"
      },
      {
        "question": "Can you give me the product names for these?",
        "query": "SELECT product_name FROM products WHERE product_price > ( SELECT AVG ( product_price ) FROM products )",
        "schema": "CREATE TABLE Customer_Orders (customer_id NUMBER); CREATE TABLE Products (product_type_code TEXT, product_price NUMBER, product_name TEXT, product_id NUMBER); CREATE TABLE Customers (customer_id NUMBER);"
      },
      {
        "question": "And how many products have a price lower than the average?",
        "query": "SELECT COUNT ( * ) FROM products WHERE product_price < ( SELECT AVG ( product_price ) FROM products )",
        "schema": "CREATE TABLE Customer_Orders (customer_id NUMBER); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Products (product_id NUMBER, product_name TEXT, product_price NUMBER, product_type_code TEXT);"
      },
      {
        "question": "May I have their product names please?",
        "query": "SELECT DISTINCT product_name FROM products WHERE product_price < ( SELECT AVG ( product_price ) FROM products )",
        "schema": "CREATE TABLE Products (product_type_code TEXT, product_id NUMBER, product_name TEXT, product_price NUMBER); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Customer_Orders (customer_id NUMBER);"
      }
    ],
    [
      {
        "question": "Please list all unique Product Names",
        "query": "SELECT DISTINCT product_name FROM products",
        "schema": "CREATE TABLE Customers (customer_name TEXT); CREATE TABLE Products (product_name TEXT, product_id NUMBER, product_type_code TEXT);"
      },
      {
        "question": "Now please list all unique product type codes",
        "query": "SELECT DISTINCT product_type_code FROM products",
        "schema": "CREATE TABLE Products (product_type_code TEXT, product_id NUMBER, product_name TEXT); CREATE TABLE Customers (customer_name TEXT);"
      },
      {
        "question": "now please show the product type codes which have at least two products",
        "query": "SELECT product_type_code FROM products GROUP BY product_type_code HAVING COUNT ( * ) > = 2",
        "schema": "CREATE TABLE Products (product_name TEXT, product_id NUMBER, product_type_code TEXT); CREATE TABLE Customers (customer_name TEXT);"
      }
    ],
    [
      {
        "question": "Hello! Can you please provide me with a list of all of customer IDs in the Customer Address History table?",
        "query": "SELECT customer_id FROM customer_address_history",
        "schema": "CREATE TABLE Customer_Address_History (date_to TIME, customer_id NUMBER, date_from TIME, address_id NUMBER); CREATE TABLE Addresses (address_id NUMBER); CREATE TABLE Customer_Orders (customer_id NUMBER); CREATE TABLE Customers (customer_id NUMBER, customer_address TEXT);"
      },
      {
        "question": "Thank you for that!  Can you update this list to include the associated customer names, customer address city and the date from and date to for each row?",
        "query": "SELECT t2.customer_name , t3.city , t1.date_from , t1.date_to FROM customer_address_history AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t1.address_id = t3.address_id",
        "schema": "CREATE TABLE Customer_Orders (customer_id NUMBER); CREATE TABLE Customers (customer_name TEXT, customer_address TEXT, customer_id NUMBER); CREATE TABLE Addresses (address_id NUMBER, city TEXT); CREATE TABLE Customer_Address_History (date_to TIME, customer_id NUMBER, address_id NUMBER, date_from TIME);"
      },
      {
        "question": "Great! Can you tell me which, if any, customers on this list appear more than once?",
        "query": "SELECT t2.customer_name FROM customer_address_history AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t1.address_id = t3.address_id GROUP BY t2.customer_name HAVING COUNT ( * ) > 1",
        "schema": "CREATE TABLE Customers (customer_number TEXT, customer_id NUMBER, customer_address TEXT, customer_name TEXT); CREATE TABLE Customer_Address_History (date_from TIME, date_to TIME, customer_id NUMBER, address_id NUMBER); CREATE TABLE Customer_Orders (customer_id NUMBER); CREATE TABLE Addresses (city TEXT, address_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show the names of customers who use Credit Card payment method",
        "query": "SELECT customer_name FROM customers WHERE payment_method_code = 'Credit Card'",
        "schema": "CREATE TABLE Contacts (first_name TEXT); CREATE TABLE Customers (customer_name TEXT, payment_method_code TEXT, customer_number TEXT, customer_id NUMBER);"
      },
      {
        "question": "Which of those customers have more than 2 orders?",
        "query": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id WHERE t1.payment_method_code = 'Credit Card' GROUP BY t1.customer_id HAVING COUNT ( * ) > 2",
        "schema": "CREATE TABLE Contacts (first_name TEXT); CREATE TABLE Customer_Orders (order_id NUMBER, customer_id NUMBER); CREATE TABLE Customers (customer_number TEXT, customer_id NUMBER, payment_method_code TEXT, customer_name TEXT);"
      },
      {
        "question": "Show me their customer addresses",
        "query": "SELECT t1.customer_address FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id WHERE t1.payment_method_code = 'Credit Card' GROUP BY t1.customer_id HAVING COUNT ( * ) > 2",
        "schema": "CREATE TABLE Addresses (address_id NUMBER); CREATE TABLE Customer_Orders (customer_id NUMBER, order_id NUMBER); CREATE TABLE Customers (customer_number TEXT, customer_name TEXT, customer_address TEXT, customer_id NUMBER, payment_method_code TEXT); CREATE TABLE Customer_Address_History (customer_id NUMBER); CREATE TABLE Contacts (first_name TEXT);"
      }
    ],
    [
      {
        "question": "What is the average price of all products?",
        "query": "SELECT AVG ( product_price ) FROM products",
        "schema": "CREATE TABLE Products (product_price NUMBER, product_type_code TEXT, product_id NUMBER, product_name TEXT);"
      },
      {
        "question": "What are the product names that have a price higher than the average?",
        "query": "SELECT product_name FROM products WHERE product_price > ( SELECT AVG ( product_price ) FROM products )",
        "schema": "CREATE TABLE Products (product_price NUMBER, product_type_code TEXT, product_id NUMBER, product_name TEXT);"
      },
      {
        "question": "How many products have a price higher than the average?",
        "query": "SELECT COUNT ( * ) FROM products WHERE product_price > ( SELECT AVG ( product_price ) FROM products )",
        "schema": "CREATE TABLE Products (product_type_code TEXT, product_name TEXT, product_id NUMBER, product_price NUMBER);"
      }
    ],
    [
      {
        "question": "Can you list the names of all customers who don't have any address information, please?",
        "query": "SELECT customer_name FROM customers WHERE customer_id NOT IN ( SELECT customer_id FROM customer_address_history )",
        "schema": "CREATE TABLE Customer_Address_History (address_id NUMBER, customer_id NUMBER); CREATE TABLE Customers (customer_number TEXT, customer_id NUMBER, customer_address TEXT, customer_name TEXT); CREATE TABLE Customer_Orders (order_id NUMBER, customer_id NUMBER); CREATE TABLE Addresses (address_id NUMBER); CREATE TABLE Contacts (customer_id NUMBER, last_name TEXT, first_name TEXT);"
      },
      {
        "question": "Can you find their addresses and add them to the chart?",
        "query": "SELECT customer_name ,customer_address FROM customers WHERE customer_id NOT IN ( SELECT customer_id FROM customer_address_history )",
        "schema": "CREATE TABLE Contacts (first_name TEXT, customer_id NUMBER, last_name TEXT); CREATE TABLE Addresses (address_id NUMBER); CREATE TABLE Customer_Orders (customer_id NUMBER, order_id NUMBER); CREATE TABLE Customers (customer_id NUMBER, customer_number TEXT, customer_name TEXT, customer_address TEXT); CREATE TABLE Customer_Address_History (customer_id NUMBER, address_id NUMBER);"
      },
      {
        "question": "Can you list the customer names for all the customers that don't have anything listed under the customer_address column?",
        "query": "SELECT customer_name FROM customers WHERE customer_id NOT IN ( SELECT customer_id FROM customer_address_history )",
        "schema": "CREATE TABLE Customers (customer_name TEXT, customer_number TEXT, customer_id NUMBER, customer_address TEXT); CREATE TABLE Addresses (address_id NUMBER); CREATE TABLE Customer_Orders (customer_id NUMBER, order_id NUMBER); CREATE TABLE Contacts (last_name TEXT, customer_id NUMBER, first_name TEXT); CREATE TABLE Customer_Address_History (customer_id NUMBER, address_id NUMBER);"
      }
    ],
    [
      {
        "question": "What was the product id for the customer that ordered the most product quantity?",
        "query": "SELECT t1.customer_id FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t3.order_id = t2.order_id GROUP BY t1.customer_id ORDER BY SUM ( t3.order_quantity ) DESC LIMIT 1",
        "schema": "CREATE TABLE Customer_Orders (order_id NUMBER, order_status_code TEXT, customer_id NUMBER); CREATE TABLE Customers (customer_id NUMBER, customer_name TEXT, customer_number TEXT); CREATE TABLE Products (product_name TEXT, product_id NUMBER); CREATE TABLE Order_Items (order_item_id NUMBER, order_quantity TEXT, order_id NUMBER, product_id NUMBER);"
      },
      {
        "question": "What are the name and phone of the customer with the most ordered product quantity?",
        "query": "SELECT t1.customer_name , t1.customer_phone FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t3.order_id = t2.order_id GROUP BY t1.customer_id ORDER BY SUM ( t3.order_quantity ) DESC LIMIT 1",
        "schema": "CREATE TABLE Customers (customer_name TEXT, customer_number TEXT, customer_id NUMBER, customer_phone TEXT); CREATE TABLE Customer_Orders (customer_id NUMBER, order_id NUMBER, order_status_code TEXT); CREATE TABLE Order_Items (order_quantity TEXT, order_id NUMBER, order_item_id NUMBER, product_id NUMBER); CREATE TABLE Products (product_id NUMBER, product_name TEXT);"
      },
      {
        "question": "What is the address for the customer Cleo?",
        "query": "SELECT customer_address FROM customers WHERE customer_name = \"Cleo\"",
        "schema": "CREATE TABLE Addresses (address_id NUMBER); CREATE TABLE Customer_Orders (customer_id NUMBER, order_id NUMBER, order_status_code TEXT); CREATE TABLE Products (product_name TEXT, product_id NUMBER); CREATE TABLE Customers (customer_phone TEXT, customer_number TEXT, customer_name TEXT, customer_address TEXT, customer_id NUMBER); CREATE TABLE Order_Items (order_quantity TEXT, order_item_id NUMBER, product_id NUMBER, order_id NUMBER);"
      },
      {
        "question": "What is the email for Customer name of Cleo with phone number 1-202-928-5395?",
        "query": "SELECT customer_email FROM customers WHERE customer_name = \"Cleo\" AND customer_phone = \"1-202-928-5395\"",
        "schema": "CREATE TABLE Products (product_id NUMBER, product_name TEXT); CREATE TABLE Order_Items (order_quantity TEXT, order_id NUMBER, order_item_id NUMBER, product_id NUMBER); CREATE TABLE Addresses (address_id NUMBER); CREATE TABLE Customer_Orders (customer_id NUMBER, order_id NUMBER, order_status_code TEXT); CREATE TABLE Customers (customer_number TEXT, customer_id NUMBER, customer_email TEXT, customer_name TEXT, customer_phone TEXT, customer_address TEXT);"
      },
      {
        "question": "What is the customer number for customer name Cleo?",
        "query": "SELECT customer_number FROM customers WHERE customer_name = \"Cleo\"",
        "schema": "CREATE TABLE Customer_Orders (order_status_code TEXT, order_id NUMBER, customer_id NUMBER); CREATE TABLE Products (product_name TEXT, product_id NUMBER); CREATE TABLE Addresses (address_id NUMBER); CREATE TABLE Order_Items (order_id NUMBER, order_item_id NUMBER, product_id NUMBER, order_quantity TEXT); CREATE TABLE Customers (customer_phone TEXT, customer_address TEXT, customer_id NUMBER, customer_email TEXT, customer_number TEXT, customer_name TEXT);"
      }
    ]
  ],
  "company_office": [
    [
      {
        "question": "Which company has the most buildings? | Do you want to the name of the company? | Yes and the company ID.",
        "query": "SELECT name,id FROM companies WHERE id = ( SELECT company_id FROM office_locations GROUP BY company_id ORDER BY COUNT ( * ) DESC LIMIT 1 )",
        "schema": "CREATE TABLE buildings (id NUMBER, name TEXT); CREATE TABLE Companies (name TEXT, Headquarters TEXT, id NUMBER); CREATE TABLE Office_locations (company_id NUMBER, building_id NUMBER);"
      },
      {
        "question": "What is the building ID that has the most company offices?",
        "query": "SELECT t2.id FROM office_locations AS t1 JOIN buildings AS t2 ON t1.building_id = t2.id JOIN companies AS t3 ON t1.company_id = t3.id GROUP BY t1.building_id ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE buildings (name TEXT, id NUMBER); CREATE TABLE Companies (id NUMBER, Headquarters TEXT, name TEXT); CREATE TABLE Office_locations (building_id NUMBER, company_id NUMBER);"
      },
      {
        "question": "What is the name of building with ID 3?",
        "query": "SELECT name FROM buildings WHERE id = \"3\"",
        "schema": "CREATE TABLE Companies (id NUMBER, name TEXT, Headquarters TEXT); CREATE TABLE Office_locations (company_id NUMBER, building_id NUMBER); CREATE TABLE buildings (id NUMBER, name TEXT);"
      }
    ],
    [
      {
        "question": "Which company has its headquarter in the US? | Did you mean to ask for the companies with headquarters in USA? | yes.",
        "query": "SELECT name FROM companies WHERE headquarters = \"USA\"",
        "schema": "CREATE TABLE Companies (name TEXT, id NUMBER, Headquarters TEXT); CREATE TABLE Office_locations (company_id NUMBER); CREATE TABLE buildings (City TEXT);"
      },
      {
        "question": "What is the industry of the company named General Electric?",
        "query": "SELECT industry FROM companies WHERE name = \"General Electric\"",
        "schema": "CREATE TABLE Companies (id NUMBER, Headquarters TEXT, name TEXT, Industry TEXT); CREATE TABLE Office_locations (company_id NUMBER); CREATE TABLE buildings (City TEXT);"
      },
      {
        "question": "How much profit did it make ?",
        "query": "SELECT profits_billion FROM companies WHERE name = \"General Electric\"",
        "schema": "CREATE TABLE Office_locations (company_id NUMBER); CREATE TABLE Companies (Headquarters TEXT, Industry TEXT, id NUMBER, Profits_billion NUMBER, Sales_billion NUMBER, name TEXT); CREATE TABLE buildings (City TEXT);"
      },
      {
        "question": "Which company has the highest amount of assets?",
        "query": "SELECT name FROM companies ORDER BY assets_billion DESC LIMIT 1",
        "schema": "CREATE TABLE buildings (City TEXT); CREATE TABLE Office_locations (company_id NUMBER); CREATE TABLE Companies (Industry TEXT, id NUMBER, Assets_billion NUMBER, name TEXT, Profits_billion NUMBER, Headquarters TEXT, Sales_billion NUMBER);"
      },
      {
        "question": "how much is it worth? | Did you mean to ask for the market value in billions for BNP Paribas? | yes",
        "query": "SELECT market_value_billion FROM companies WHERE name = \"BNP Paribas\"",
        "schema": "CREATE TABLE Companies (Assets_billion NUMBER, Market_Value_billion TEXT, id NUMBER, Industry TEXT, name TEXT, Headquarters TEXT, Sales_billion NUMBER, Profits_billion NUMBER); CREATE TABLE Office_locations (company_id NUMBER); CREATE TABLE buildings (City TEXT);"
      }
    ],
    [
      {
        "question": "Which building is the highest?",
        "query": "SELECT name FROM buildings ORDER BY height DESC LIMIT 1",
        "schema": "CREATE TABLE buildings (name TEXT, id NUMBER, Stories NUMBER, Height NUMBER);"
      },
      {
        "question": "How tall is the Torre Reforma?",
        "query": "SELECT stories FROM buildings WHERE name = \"Torre Reforma\"",
        "schema": "CREATE TABLE buildings (name TEXT, City TEXT, id NUMBER, Stories NUMBER, Height NUMBER);"
      },
      {
        "question": "How many stories does the highest building have?",
        "query": "SELECT stories FROM buildings ORDER BY height DESC LIMIT 1",
        "schema": "CREATE TABLE buildings (id NUMBER, City TEXT, Stories NUMBER, Height NUMBER, name TEXT);"
      }
    ],
    [
      {
        "question": "How many companies have an industry of banking?",
        "query": "SELECT COUNT ( * ) FROM companies WHERE industry = \"Banking\"",
        "schema": "CREATE TABLE Companies (id NUMBER, Industry TEXT, Headquarters TEXT, name TEXT);"
      },
      {
        "question": "How many don't have a banking industry?",
        "query": "SELECT COUNT ( * ) FROM companies WHERE industry ! = \"Banking\"",
        "schema": "CREATE TABLE Companies (id NUMBER, Industry TEXT, name TEXT, Headquarters TEXT);"
      },
      {
        "question": "What are the total sales of those companies?",
        "query": "SELECT SUM ( sales_billion ) FROM companies WHERE industry ! = \"Banking\"",
        "schema": "CREATE TABLE Companies (Sales_billion NUMBER, Headquarters TEXT, name TEXT, id NUMBER, Industry TEXT);"
      },
      {
        "question": "What is the maximum sales of those companies?",
        "query": "SELECT MAX ( sales_billion ) FROM companies WHERE industry ! = \"Banking\"",
        "schema": "CREATE TABLE Companies (Sales_billion NUMBER, name TEXT, Headquarters TEXT, Industry TEXT, id NUMBER);"
      },
      {
        "question": "What is the minimum sales?",
        "query": "SELECT MIN ( sales_billion ) FROM companies WHERE industry ! = \"Banking\"",
        "schema": "CREATE TABLE Companies (id NUMBER, name TEXT, Headquarters TEXT, Sales_billion NUMBER, Industry TEXT);"
      }
    ],
    [
      {
        "question": "What is the name of the building with the largest height?",
        "query": "SELECT name FROM buildings ORDER BY height DESC LIMIT 1",
        "schema": "CREATE TABLE buildings (name TEXT, id NUMBER, Height NUMBER, Stories NUMBER); CREATE TABLE Companies (Headquarters TEXT, id NUMBER);"
      },
      {
        "question": "How many stories does that building have?",
        "query": "SELECT stories FROM buildings ORDER BY height DESC LIMIT 1",
        "schema": "CREATE TABLE buildings (id NUMBER, Stories NUMBER, Height NUMBER, name TEXT); CREATE TABLE Companies (id NUMBER, Headquarters TEXT);"
      },
      {
        "question": "What is the height of that building?",
        "query": "SELECT height FROM buildings ORDER BY height DESC LIMIT 1",
        "schema": "CREATE TABLE buildings (Stories NUMBER, id NUMBER, name TEXT, Height NUMBER); CREATE TABLE Companies (id NUMBER, Headquarters TEXT);"
      },
      {
        "question": "What city is that building in?",
        "query": "SELECT city FROM buildings ORDER BY height DESC LIMIT 1",
        "schema": "CREATE TABLE Companies (Headquarters TEXT, id NUMBER); CREATE TABLE buildings (Height NUMBER, City TEXT, Stories NUMBER, id NUMBER, name TEXT);"
      },
      {
        "question": "How many stories does the building with the smallest height have?",
        "query": "SELECT stories FROM buildings ORDER BY height LIMIT 1",
        "schema": "CREATE TABLE buildings (Height NUMBER, Stories NUMBER, name TEXT, id NUMBER, City TEXT); CREATE TABLE Companies (id NUMBER, Headquarters TEXT);"
      }
    ],
    [
      {
        "question": "Show the names of the buildings that have more than one company offices.",
        "query": "SELECT t2.name FROM office_locations AS t1 JOIN buildings AS t2 ON t1.building_id = t2.id JOIN companies AS t3 ON t1.company_id = t3.id GROUP BY t1.building_id HAVING COUNT ( * ) > 1",
        "schema": "CREATE TABLE buildings (name TEXT, id NUMBER); CREATE TABLE Companies (name TEXT, id NUMBER, Headquarters TEXT); CREATE TABLE Office_locations (building_id NUMBER, company_id NUMBER);"
      },
      {
        "question": "Can you tell me which companies are located at the Torre KOI building? | What attributes of these companies do you want to know? | The names of the companies that are present in that building.",
        "query": "SELECT t3.name FROM office_locations AS t1 JOIN buildings AS t2 ON t1.building_id = t2.id JOIN companies AS t3 ON t1.company_id = t3.id WHERE t2.name = \"Torre KOI\"",
        "schema": "CREATE TABLE Companies (Headquarters TEXT, name TEXT, id NUMBER); CREATE TABLE buildings (name TEXT, id NUMBER); CREATE TABLE Office_locations (building_id NUMBER, company_id NUMBER);"
      },
      {
        "question": "What other buildings is JPMorgan Chase also located in?",
        "query": "SELECT t2.name FROM office_locations AS t1 JOIN buildings AS t2 ON t1.building_id = t2.id JOIN companies AS t3 ON t1.company_id = t3.id WHERE t3.name = \"JPMorgan Chase\" AND t2.name ! = \"Torre KOI\"",
        "schema": "CREATE TABLE Companies (id NUMBER, name TEXT, Headquarters TEXT); CREATE TABLE Office_locations (building_id NUMBER, company_id NUMBER); CREATE TABLE buildings (name TEXT, id NUMBER);"
      },
      {
        "question": "Does Torre Mitkah have an HSBC located in it?",
        "query": "SELECT * FROM office_locations AS t1 JOIN buildings AS t2 ON t1.building_id = t2.id JOIN companies AS t3 ON t1.company_id = t3.id WHERE t3.name = \"HSBC\" AND t2.name = \"Torre Mitikah\"",
        "schema": "CREATE TABLE Office_locations (company_id NUMBER, building_id NUMBER); CREATE TABLE buildings (name TEXT, City TEXT, id NUMBER); CREATE TABLE Companies (Headquarters TEXT, name TEXT, id NUMBER);"
      },
      {
        "question": "What is the name of company with the company id 4?",
        "query": "SELECT name FROM companies WHERE id = 4",
        "schema": "CREATE TABLE Companies (Headquarters TEXT, name TEXT, id NUMBER); CREATE TABLE Office_locations (building_id NUMBER, company_id NUMBER); CREATE TABLE buildings (City TEXT, id NUMBER, name TEXT);"
      },
      {
        "question": "ExxonMobil is located in Punto Chapultepec, correct?",
        "query": "SELECT * FROM office_locations AS t1 JOIN buildings AS t2 ON t1.building_id = t2.id JOIN companies AS t3 ON t1.company_id = t3.id WHERE t3.name = \"ExxonMobil\" AND t2.name = \"Punto Chapultepec\"",
        "schema": "CREATE TABLE buildings (City TEXT, name TEXT, id NUMBER); CREATE TABLE Office_locations (building_id NUMBER, company_id NUMBER); CREATE TABLE Companies (Headquarters TEXT, name TEXT, id NUMBER);"
      },
      {
        "question": "Which buildings have a General Electric then?",
        "query": "SELECT t2.name FROM office_locations AS t1 JOIN buildings AS t2 ON t1.building_id = t2.id JOIN companies AS t3 ON t1.company_id = t3.id WHERE t3.name = \"General Electric\"",
        "schema": "CREATE TABLE Office_locations (building_id NUMBER, company_id NUMBER); CREATE TABLE buildings (name TEXT, id NUMBER, City TEXT); CREATE TABLE Companies (Headquarters TEXT, id NUMBER, name TEXT);"
      },
      {
        "question": "What other companies are located in Corporativo BBVA Bancomer?",
        "query": "SELECT t3.name FROM office_locations AS t1 JOIN buildings AS t2 ON t1.building_id = t2.id JOIN companies AS t3 ON t1.company_id = t3.id WHERE t2.name = \"Corporativo BBVA Bancomer\" AND t3.name ! = \"General Electric\"",
        "schema": "CREATE TABLE buildings (name TEXT, City TEXT, id NUMBER); CREATE TABLE Companies (name TEXT, Headquarters TEXT, id NUMBER); CREATE TABLE Office_locations (building_id NUMBER, company_id NUMBER);"
      }
    ],
    [
      {
        "question": "Count the number of building IDs",
        "query": "SELECT COUNT ( id ) FROM buildings",
        "schema": "CREATE TABLE buildings (id NUMBER); CREATE TABLE Office_locations (building_id NUMBER, company_id NUMBER); CREATE TABLE Companies (id NUMBER, Headquarters TEXT);"
      },
      {
        "question": "add a column for company id",
        "query": "SELECT COUNT ( * ) , t1.company_id, t1.building_id FROM office_locations AS t1 JOIN buildings AS t2 ON t1.building_id = t2.id JOIN companies AS t3 ON t1.company_id = t3.id GROUP BY t1.building_id",
        "schema": "CREATE TABLE Companies (id NUMBER, Headquarters TEXT); CREATE TABLE Office_locations (building_id NUMBER, company_id NUMBER); CREATE TABLE buildings (id NUMBER);"
      },
      {
        "question": "list the number of unique building ids for each company id",
        "query": "SELECT t1.company_id, COUNT ( DISTINCT t1.building_id ) FROM office_locations AS t1 JOIN buildings AS t2 ON t1.building_id = t2.id JOIN companies AS t3 ON t1.company_id = t3.id GROUP BY t1.company_id",
        "schema": "CREATE TABLE buildings (id NUMBER); CREATE TABLE Office_locations (building_id NUMBER, company_id NUMBER); CREATE TABLE Companies (name TEXT, id NUMBER, Headquarters TEXT);"
      },
      {
        "question": "add a column for company name",
        "query": "SELECT t1.company_id, t3.name, COUNT ( DISTINCT t1.building_id ) FROM office_locations AS t1 JOIN buildings AS t2 ON t1.building_id = t2.id JOIN companies AS t3 ON t1.company_id = t3.id GROUP BY t1.company_id",
        "schema": "CREATE TABLE buildings (id NUMBER, name TEXT); CREATE TABLE Office_locations (company_id NUMBER, building_id NUMBER); CREATE TABLE Companies (id NUMBER, Headquarters TEXT, name TEXT);"
      }
    ],
    [
      {
        "question": "Show the names of the buildings",
        "query": "SELECT name FROM buildings",
        "schema": "CREATE TABLE buildings (name TEXT, id NUMBER);"
      },
      {
        "question": "Now show the names of building whose status is on-hold",
        "query": "SELECT name FROM buildings WHERE status = \"on-hold\"",
        "schema": "CREATE TABLE buildings (Status TEXT, id NUMBER, name TEXT);"
      },
      {
        "question": "names of buildings whose status is on-hold in ascending order | In what ascending order? | In ascending order of stories",
        "query": "SELECT name FROM buildings WHERE status = \"on-hold\" ORDER BY stories ASC",
        "schema": "CREATE TABLE buildings (id NUMBER, name TEXT, Status TEXT, Stories NUMBER);"
      }
    ],
    [
      {
        "question": "what is the highest profits of companies",
        "query": "SELECT MAX ( profits_billion ) FROM companies",
        "schema": "CREATE TABLE Companies (name TEXT, id NUMBER, Profits_billion NUMBER);"
      },
      {
        "question": "what is the market value of JPMorgan Chase",
        "query": "SELECT market_value_billion FROM companies WHERE name = \"JPMorgan Chase\"",
        "schema": "CREATE TABLE buildings (name TEXT); CREATE TABLE Companies (id NUMBER, Assets_billion NUMBER, name TEXT, Market_Value_billion TEXT, Profits_billion NUMBER, Headquarters TEXT);"
      },
      {
        "question": "what is name of headquarters on General Electric",
        "query": "SELECT headquarters FROM companies WHERE name = \"General Electric\"",
        "schema": "CREATE TABLE Office_locations (building_id NUMBER, company_id NUMBER); CREATE TABLE buildings (name TEXT, City TEXT, id NUMBER); CREATE TABLE Companies (name TEXT, Market_Value_billion TEXT, Assets_billion NUMBER, id NUMBER, Profits_billion NUMBER, Headquarters TEXT);"
      },
      {
        "question": "which company is highest assets value",
        "query": "SELECT name FROM companies ORDER BY assets_billion DESC LIMIT 1",
        "schema": "CREATE TABLE buildings (id NUMBER, City TEXT, name TEXT); CREATE TABLE Office_locations (building_id NUMBER, company_id NUMBER); CREATE TABLE Companies (name TEXT, Headquarters TEXT, Market_Value_billion TEXT, Profits_billion NUMBER, Assets_billion NUMBER, id NUMBER);"
      }
    ]
  ],
  "debate": [
    [
      {
        "question": "can you show me a list of people names?",
        "query": "SELECT name FROM people",
        "schema": "CREATE TABLE people (Name TEXT, People_ID NUMBER);"
      },
      {
        "question": "can you show me the oldest one?",
        "query": "SELECT name FROM people ORDER BY age DESC LIMIT 1",
        "schema": "CREATE TABLE people (People_ID NUMBER, Name TEXT, Age NUMBER); CREATE TABLE debate (Date TEXT);"
      },
      {
        "question": "can you show me average of ages?",
        "query": "SELECT AVG ( age ) FROM people",
        "schema": "CREATE TABLE people (Name TEXT, People_ID NUMBER, Age NUMBER); CREATE TABLE debate (Date TEXT);"
      },
      {
        "question": "Show the party that has the most people",
        "query": "SELECT party FROM people GROUP BY party ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE people (Age NUMBER, Party TEXT, Name TEXT, People_ID NUMBER); CREATE TABLE debate (Date TEXT);"
      }
    ],
    [
      {
        "question": "What are the names of the people who have been on the affirmative side of debates?",
        "query": "SELECT t2.name FROM debate_people AS t1 JOIN people AS t2 ON t1.affirmative = t2.people_id GROUP BY t2.name",
        "schema": "CREATE TABLE debate_people (Negative NUMBER, If_Affirmative_Win OTHERS, Debate_ID NUMBER, Affirmative NUMBER); CREATE TABLE debate (Debate_ID NUMBER); CREATE TABLE people (Name TEXT, People_ID NUMBER);"
      },
      {
        "question": "What are their party affiliations?",
        "query": "SELECT t2.party FROM debate_people AS t1 JOIN people AS t2 ON t1.affirmative = t2.people_id GROUP BY t2.name",
        "schema": "CREATE TABLE people (Party TEXT, People_ID NUMBER, Name TEXT); CREATE TABLE debate (Debate_ID NUMBER); CREATE TABLE debate_people (Affirmative NUMBER, Debate_ID NUMBER, Negative NUMBER, If_Affirmative_Win OTHERS);"
      },
      {
        "question": "How many debates did they win total?",
        "query": "SELECT COUNT ( * ) FROM debate_people WHERE if_affirmative_win = 'T'",
        "schema": "CREATE TABLE debate (Debate_ID NUMBER); CREATE TABLE people (People_ID NUMBER, Party TEXT, Name TEXT); CREATE TABLE debate_people (Affirmative NUMBER, Debate_ID NUMBER, Negative NUMBER, If_Affirmative_Win OTHERS);"
      }
    ],
    [
      {
        "question": "Can you show me the names of the people who were on the affirmative side of debates with an audience bigger than 200?",
        "query": "SELECT t3.name FROM debate_people AS t1 JOIN debate AS t2 ON t1.debate_id = t2.debate_id JOIN people AS t3 ON t1.affirmative = t3.people_id WHERE t2.num_of_audience > 200",
        "schema": "CREATE TABLE debate_people (Affirmative NUMBER, Debate_ID NUMBER, Negative NUMBER); CREATE TABLE debate (Num_of_Audience NUMBER, Debate_ID NUMBER); CREATE TABLE people (Name TEXT, People_ID NUMBER);"
      },
      {
        "question": "Of those three, who is the oldest?",
        "query": "SELECT t3.name FROM debate_people AS t1 JOIN debate AS t2 ON t1.debate_id = t2.debate_id JOIN people AS t3 ON t1.affirmative = t3.people_id WHERE t2.num_of_audience > 200 ORDER BY t3.age DESC LIMIT 1",
        "schema": "CREATE TABLE people (Name TEXT, Age NUMBER, People_ID NUMBER); CREATE TABLE debate_people (Affirmative NUMBER, Negative NUMBER, Debate_ID NUMBER); CREATE TABLE debate (Num_of_Audience NUMBER, Date TEXT, Debate_ID NUMBER);"
      },
      {
        "question": "What party affiliation does James Humphrey hold?",
        "query": "SELECT party FROM people WHERE name = \"James Humphrey\"",
        "schema": "CREATE TABLE people (Name TEXT, Party TEXT, Age NUMBER, People_ID NUMBER); CREATE TABLE debate_people (Negative NUMBER, Debate_ID NUMBER, Affirmative NUMBER); CREATE TABLE debate (Date TEXT, Num_of_Audience NUMBER, Debate_ID NUMBER);"
      },
      {
        "question": "What district does James Humphrey represent?",
        "query": "SELECT district FROM people WHERE name = \"James Humphrey\"",
        "schema": "CREATE TABLE debate_people (Negative NUMBER, Affirmative NUMBER, Debate_ID NUMBER); CREATE TABLE people (People_ID NUMBER, Name TEXT, District TEXT, Party TEXT, Age NUMBER); CREATE TABLE debate (Date TEXT, Num_of_Audience NUMBER, Debate_ID NUMBER);"
      }
    ],
    [
      {
        "question": "can you list the names of all people?",
        "query": "SELECT name FROM people",
        "schema": "CREATE TABLE people (Name TEXT, People_ID NUMBER);"
      },
      {
        "question": "list the dates of debates",
        "query": "SELECT Date FROM debate",
        "schema": "CREATE TABLE debate_people (Debate_ID NUMBER); CREATE TABLE people (Name TEXT, People_ID NUMBER); CREATE TABLE debate (Debate_ID NUMBER, Date TEXT);"
      },
      {
        "question": "list all the venues of the the debates",
        "query": "SELECT venue FROM debate",
        "schema": "CREATE TABLE people (Name TEXT, People_ID NUMBER); CREATE TABLE debate (Debate_ID NUMBER, Date TEXT, Venue TEXT); CREATE TABLE debate_people (Debate_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Could you please tell me the names of the people that have not been on the affirmative side of all debates?",
        "query": "SELECT name FROM people WHERE people_id NOT IN ( SELECT affirmative FROM debate_people )",
        "schema": "CREATE TABLE debate (Debate_ID NUMBER); CREATE TABLE people (Name TEXT, People_ID NUMBER); CREATE TABLE debate_people (Affirmative NUMBER, Debate_ID NUMBER, Negative NUMBER);"
      },
      {
        "question": "Could you please tell me their party affiliations?",
        "query": "SELECT party FROM people WHERE people_id NOT IN ( SELECT affirmative FROM debate_people )",
        "schema": "CREATE TABLE debate (Debate_ID NUMBER); CREATE TABLE people (Party TEXT, People_ID NUMBER, Name TEXT); CREATE TABLE debate_people (Affirmative NUMBER, Debate_ID NUMBER, Negative NUMBER);"
      },
      {
        "question": "What are their ages?",
        "query": "SELECT age FROM people WHERE people_id NOT IN ( SELECT affirmative FROM debate_people )",
        "schema": "CREATE TABLE people (Party TEXT, Name TEXT, People_ID NUMBER, Age NUMBER); CREATE TABLE debate (Debate_ID NUMBER); CREATE TABLE debate_people (Debate_ID NUMBER, Affirmative NUMBER, Negative NUMBER);"
      }
    ],
    [
      {
        "question": "What are all the names of the people?",
        "query": "SELECT name FROM people",
        "schema": "CREATE TABLE people (People_ID NUMBER, Name TEXT);"
      },
      {
        "question": "What are the names of the people who are in the affirmative side?",
        "query": "SELECT t3.name FROM debate_people AS t1 JOIN debate AS t2 ON t1.debate_id = t2.debate_id JOIN people AS t3 ON t1.affirmative = t3.people_id",
        "schema": "CREATE TABLE debate (Debate_ID NUMBER); CREATE TABLE debate_people (Negative NUMBER, Debate_ID NUMBER, Affirmative NUMBER); CREATE TABLE people (Name TEXT, People_ID NUMBER);"
      },
      {
        "question": "What are the venues of debates on the affirmative side?",
        "query": "SELECT t2.venue FROM debate_people AS t1 JOIN debate AS t2 ON t1.debate_id = t2.debate_id JOIN people AS t3 ON t1.affirmative = t3.people_id",
        "schema": "CREATE TABLE people (People_ID NUMBER, Name TEXT); CREATE TABLE debate (Debate_ID NUMBER, Venue TEXT); CREATE TABLE debate_people (Affirmative NUMBER, Debate_ID NUMBER, Negative NUMBER);"
      },
      {
        "question": "What are the dates of the debates on the affirmative side?",
        "query": "SELECT t2.date FROM debate_people AS t1 JOIN debate AS t2 ON t1.debate_id = t2.debate_id JOIN people AS t3 ON t1.affirmative = t3.people_id",
        "schema": "CREATE TABLE debate_people (Debate_ID NUMBER, Negative NUMBER, Affirmative NUMBER); CREATE TABLE debate (Date TEXT, Debate_ID NUMBER, Venue TEXT); CREATE TABLE people (People_ID NUMBER, Name TEXT);"
      }
    ],
    [
      {
        "question": "what is the name of people aged either 35 or 36",
        "query": "SELECT name FROM people WHERE age = 35 OR age = 36",
        "schema": "CREATE TABLE people (Name TEXT, Age NUMBER, People_ID NUMBER);"
      },
      {
        "question": "how old is Luther C. Carter?",
        "query": "SELECT age FROM people WHERE name = \"Luther C. Carter\"",
        "schema": "CREATE TABLE people (Name TEXT, People_ID NUMBER, Age NUMBER);"
      },
      {
        "question": "what is the age of William B. Maclay",
        "query": "SELECT age FROM people WHERE name = \"William B. Maclay\"",
        "schema": "CREATE TABLE people (Age NUMBER, People_ID NUMBER, Name TEXT);"
      }
    ]
  ],
  "riding_club": [
    [
      {
        "question": "Hello. Can you list the top three vote getters?",
        "query": "SELECT player_name FROM player ORDER BY votes DESC LIMIT 3",
        "schema": "CREATE TABLE match_result (Rank NUMBER); CREATE TABLE club (Club_name TEXT, Club_ID NUMBER); CREATE TABLE player (Player_ID NUMBER, Votes NUMBER, Player_name TEXT, Rank TEXT);"
      },
      {
        "question": "Excellent! Which had the greatest number of votes?",
        "query": "SELECT player_name FROM player ORDER BY votes DESC LIMIT 1",
        "schema": "CREATE TABLE club (Club_ID NUMBER, Club_name TEXT); CREATE TABLE player (Votes NUMBER, Rank TEXT, Player_name TEXT, Player_ID NUMBER); CREATE TABLE match_result (Rank NUMBER);"
      },
      {
        "question": "And who were the top three, in order from most to least?",
        "query": "SELECT player_name FROM player ORDER BY votes DESC LIMIT 3",
        "schema": "CREATE TABLE club (Club_ID NUMBER, Club_name TEXT); CREATE TABLE match_result (Rank NUMBER); CREATE TABLE player (Player_name TEXT, Rank TEXT, Votes NUMBER, Player_ID NUMBER);"
      },
      {
        "question": "How many votes did Jim receive?",
        "query": "SELECT votes FROM player WHERE player_name LIKE \"Jim%\"",
        "schema": "CREATE TABLE club (Club_name TEXT, Club_ID NUMBER); CREATE TABLE player (Votes NUMBER, Player_name TEXT, Player_ID NUMBER, Rank TEXT); CREATE TABLE match_result (Rank NUMBER);"
      },
      {
        "question": "And what is his occupation?",
        "query": "SELECT occupation FROM player WHERE player_name LIKE \"Jim%\"",
        "schema": "CREATE TABLE player (Votes NUMBER, Player_name TEXT, Rank TEXT, Player_ID NUMBER, Occupation TEXT); CREATE TABLE club (Club_ID NUMBER, Club_name TEXT); CREATE TABLE match_result (Rank NUMBER);"
      },
      {
        "question": "Who got more than 10,000 votes?",
        "query": "SELECT player_name FROM player WHERE votes > 10000",
        "schema": "CREATE TABLE club (Club_ID NUMBER, Club_name TEXT); CREATE TABLE match_result (Rank NUMBER); CREATE TABLE player (Player_name TEXT, Occupation TEXT, Rank TEXT, Votes NUMBER, Player_ID NUMBER);"
      }
    ],
    [
      {
        "question": "can you show me  a list of starting year?",
        "query": "SELECT starting_year FROM player_coach",
        "schema": "CREATE TABLE club (Club_ID NUMBER, Club_name TEXT, Start_year NUMBER); CREATE TABLE coach (Club_ID NUMBER, Coach_ID NUMBER); CREATE TABLE player (Player_ID NUMBER); CREATE TABLE player_coach (Coach_ID NUMBER, Starting_year NUMBER, Player_ID NUMBER);"
      },
      {
        "question": "yes | What information do you want to know about each gender? | which coach gender is much?",
        "query": "SELECT coach_name FROM coach WHERE gender = \"M\"",
        "schema": "CREATE TABLE player_coach (Coach_ID NUMBER, Starting_year NUMBER, Player_ID NUMBER); CREATE TABLE coach (Club_ID NUMBER, Gender TEXT, Coach_name TEXT, Coach_ID NUMBER); CREATE TABLE club (Club_name TEXT, Club_ID NUMBER, Start_year NUMBER); CREATE TABLE player (Player_ID NUMBER, Gender TEXT);"
      },
      {
        "question": "can you show me a list of player's residence?",
        "query": "SELECT residence FROM player",
        "schema": "CREATE TABLE player (Player_ID NUMBER, Gender TEXT, Residence TEXT, Player_name TEXT); CREATE TABLE club (Start_year NUMBER, Club_ID NUMBER, Club_name TEXT); CREATE TABLE player_coach (Player_ID NUMBER, Coach_ID NUMBER, Starting_year NUMBER); CREATE TABLE coach (Gender TEXT, Coach_ID NUMBER, Club_ID NUMBER, Coach_name TEXT);"
      },
      {
        "question": "Show the names and genders of players with a coach starting after 2011",
        "query": "SELECT t3.player_name , t3.gender FROM player_coach AS t1 JOIN coach AS t2 ON t1.coach_id = t2.coach_id JOIN player AS t3 ON t1.player_id = t3.player_id WHERE t1.starting_year > 2011",
        "schema": "CREATE TABLE player_coach (Starting_year NUMBER, Coach_ID NUMBER, Player_ID NUMBER); CREATE TABLE player (Gender TEXT, Player_name TEXT, Residence TEXT, Player_ID NUMBER); CREATE TABLE coach (Coach_ID NUMBER, Gender TEXT, Club_ID NUMBER, Coach_name TEXT); CREATE TABLE club (Club_name TEXT, Club_ID NUMBER, Start_year NUMBER);"
      }
    ],
    [
      {
        "question": "What are the residences of the players?",
        "query": "SELECT residence FROM player",
        "schema": "CREATE TABLE player (Player_name TEXT, Player_ID NUMBER, Occupation TEXT, Residence TEXT);"
      },
      {
        "question": "Which of those residences have both male and female players?",
        "query": "SELECT residence FROM player WHERE gender = \"M\" INTERSECT SELECT residence FROM player WHERE gender = \"F\"",
        "schema": "CREATE TABLE player (Residence TEXT, Player_ID NUMBER, Occupation TEXT, Gender TEXT, Player_name TEXT);"
      },
      {
        "question": "How many male players does Winnipeg have?",
        "query": "SELECT COUNT ( * ) FROM player WHERE gender = \"M\" AND residence = \"Winnipeg\"",
        "schema": "CREATE TABLE player (Player_name TEXT, Residence TEXT, Player_ID NUMBER, Gender TEXT, Occupation TEXT);"
      },
      {
        "question": "How many female players does Winnipeg have?",
        "query": "SELECT COUNT ( * ) FROM player WHERE gender = \"F\" AND residence = \"Winnipeg\"",
        "schema": "CREATE TABLE player (Player_ID NUMBER, Player_name TEXT, Gender TEXT, Residence TEXT, Occupation TEXT);"
      },
      {
        "question": "How many residences are there in total?",
        "query": "SELECT COUNT ( DISTINCT residence ) FROM player",
        "schema": "CREATE TABLE player (Occupation TEXT, Residence TEXT, Player_name TEXT, Player_ID NUMBER, Gender TEXT);"
      },
      {
        "question": "And how many of those six distinct residences have More than one player?",
        "query": "SELECT COUNT ( * ) FROM ( SELECT * FROM player GROUP BY residence HAVING COUNT ( * ) > 1 )",
        "schema": "CREATE TABLE player (Player_name TEXT, Occupation TEXT, Gender TEXT, Player_ID NUMBER, Residence TEXT);"
      },
      {
        "question": "Which residence is the one with more than one player?",
        "query": "SELECT residence FROM player GROUP BY residence HAVING COUNT ( * ) > 1",
        "schema": "CREATE TABLE player (Occupation TEXT, Player_name TEXT, Gender TEXT, Residence TEXT, Player_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What is the most common occupation of players?",
        "query": "SELECT occupation FROM player GROUP BY occupation ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE player (Player_ID NUMBER, Occupation TEXT);"
      },
      {
        "question": "What about least common?",
        "query": "SELECT occupation FROM player GROUP BY occupation ORDER BY COUNT ( * ) LIMIT 1",
        "schema": "CREATE TABLE player (Player_ID NUMBER, Occupation TEXT);"
      },
      {
        "question": "What are their names? | did you mean the names of the players who have the least common occupation? | yes",
        "query": "SELECT player_name FROM player GROUP BY occupation ORDER BY COUNT ( * ) LIMIT 1",
        "schema": "CREATE TABLE player (Player_ID NUMBER, Occupation TEXT, Player_name TEXT);"
      },
      {
        "question": "What about most common?",
        "query": "SELECT player_name FROM player GROUP BY occupation ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE player (Player_name TEXT, Occupation TEXT, Player_ID NUMBER);"
      },
      {
        "question": "What is his sponsor name?",
        "query": "SELECT sponsor_name FROM player GROUP BY occupation ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE player (Sponsor_name TEXT, Player_ID NUMBER, Occupation TEXT, Player_name TEXT);"
      }
    ],
    [
      {
        "question": "what are the names of the players?",
        "query": "SELECT player_name FROM player",
        "schema": "CREATE TABLE player (Player_name TEXT, Player_ID NUMBER, Sponsor_name TEXT);"
      },
      {
        "question": "Who has been coached by Jameson Tomas?",
        "query": "SELECT t3.player_name FROM player_coach AS t1 JOIN coach AS t2 ON t1.coach_id = t2.coach_id JOIN player AS t3 ON t1.player_id = t3.player_id WHERE t2.coach_name = \"Jameson Tomas\"",
        "schema": "CREATE TABLE player (Player_ID NUMBER, Sponsor_name TEXT, Player_name TEXT); CREATE TABLE coach (Coach_ID NUMBER, Coach_name TEXT); CREATE TABLE player_coach (Coach_ID NUMBER, Player_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What is the name of the player with the largest number of votes?",
        "query": "SELECT player_name FROM player ORDER BY votes DESC LIMIT 1",
        "schema": "CREATE TABLE player (Votes NUMBER, Player_name TEXT, Player_ID NUMBER);"
      },
      {
        "question": "Who is the sponsor of the player with the least amount of votes?",
        "query": "SELECT sponsor_name FROM player ORDER BY votes ASC LIMIT 1",
        "schema": "CREATE TABLE player (Player_name TEXT, Player_ID NUMBER, Sponsor_name TEXT, Votes NUMBER);"
      }
    ],
    [
      {
        "question": "What are the names of all players?",
        "query": "SELECT player_name FROM player",
        "schema": "CREATE TABLE player (Player_name TEXT, Player_ID NUMBER, Sponsor_name TEXT);"
      },
      {
        "question": "What are the names of their coaches? | Do you mean list the names of players and names of their coaches together? | Yes",
        "query": "SELECT t3.player_name , t2.coach_name FROM player_coach AS t1 JOIN coach AS t2 ON t1.coach_id = t2.coach_id JOIN player AS t3 ON t1.player_id = t3.player_id",
        "schema": "CREATE TABLE player (Sponsor_name TEXT, Player_name TEXT, Player_ID NUMBER); CREATE TABLE player_coach (Coach_ID NUMBER, Player_ID NUMBER); CREATE TABLE coach (Coach_ID NUMBER, Coach_name TEXT);"
      },
      {
        "question": "What are their sponsor names?",
        "query": "SELECT t3.sponsor_name FROM player_coach AS t1 JOIN coach AS t2 ON t1.coach_id = t2.coach_id JOIN player AS t3 ON t1.player_id = t3.player_id",
        "schema": "CREATE TABLE player (Player_ID NUMBER, Sponsor_name TEXT, Player_name TEXT); CREATE TABLE player_coach (Coach_ID NUMBER, Player_ID NUMBER); CREATE TABLE coach (Coach_name TEXT, Coach_ID NUMBER);"
      },
      {
        "question": "What is the gender of the sponsors?",
        "query": "SELECT t3.gender FROM player_coach AS t1 JOIN coach AS t2 ON t1.coach_id = t2.coach_id JOIN player AS t3 ON t1.player_id = t3.player_id",
        "schema": "CREATE TABLE player_coach (Coach_ID NUMBER, Player_ID NUMBER); CREATE TABLE player (Player_name TEXT, Player_ID NUMBER, Gender TEXT, Sponsor_name TEXT); CREATE TABLE coach (Coach_ID NUMBER, Coach_name TEXT, Gender TEXT);"
      }
    ],
    [
      {
        "question": "What are the names of the players?",
        "query": "SELECT player_name FROM player",
        "schema": "CREATE TABLE player (Sponsor_name TEXT, Player_ID NUMBER, Player_name TEXT);"
      },
      {
        "question": "Who are their coaches?",
        "query": "SELECT t3.player_name , t2.coach_name FROM player_coach AS t1 JOIN coach AS t2 ON t1.coach_id = t2.coach_id JOIN player AS t3 ON t1.player_id = t3.player_id",
        "schema": "CREATE TABLE player (Player_ID NUMBER, Player_name TEXT, Sponsor_name TEXT); CREATE TABLE player_coach (Coach_ID NUMBER, Player_ID NUMBER); CREATE TABLE coach (Coach_name TEXT, Coach_ID NUMBER);"
      },
      {
        "question": "Show me these names in descending order based on number of player votes.",
        "query": "SELECT t3.player_name , t2.coach_name FROM player_coach AS t1 JOIN coach AS t2 ON t1.coach_id = t2.coach_id JOIN player AS t3 ON t1.player_id = t3.player_id ORDER BY t3.votes DESC",
        "schema": "CREATE TABLE coach (Coach_name TEXT, Coach_ID NUMBER); CREATE TABLE player_coach (Coach_ID NUMBER, Player_ID NUMBER); CREATE TABLE player (Player_name TEXT, Player_ID NUMBER, Sponsor_name TEXT, Votes NUMBER);"
      },
      {
        "question": "also Show me the gender of the coaches and players.",
        "query": "SELECT t3.player_name, t3.gender, t2.coach_name, t2.gender FROM player_coach AS t1 JOIN coach AS t2 ON t1.coach_id = t2.coach_id JOIN player AS t3 ON t1.player_id = t3.player_id ORDER BY t3.votes DESC",
        "schema": "CREATE TABLE coach (Coach_ID NUMBER, Gender TEXT, Coach_name TEXT); CREATE TABLE player (Player_ID NUMBER, Votes NUMBER, Sponsor_name TEXT, Gender TEXT, Player_name TEXT); CREATE TABLE player_coach (Player_ID NUMBER, Coach_ID NUMBER);"
      },
      {
        "question": "How many votes did each player receive?",
        "query": "SELECT player_name, votes FROM player",
        "schema": "CREATE TABLE coach (Coach_name TEXT, Coach_ID NUMBER, Gender TEXT); CREATE TABLE player_coach (Coach_ID NUMBER, Player_ID NUMBER); CREATE TABLE player (Player_name TEXT, Player_ID NUMBER, Votes NUMBER, Sponsor_name TEXT, Gender TEXT);"
      },
      {
        "question": "Please list this in descending order.",
        "query": "SELECT player_name, votes FROM player ORDER BY votes DESC",
        "schema": "CREATE TABLE player_coach (Player_ID NUMBER, Coach_ID NUMBER); CREATE TABLE player (Sponsor_name TEXT, Player_ID NUMBER, Votes NUMBER, Gender TEXT, Player_name TEXT); CREATE TABLE coach (Coach_ID NUMBER, Coach_name TEXT, Gender TEXT);"
      }
    ],
    [
      {
        "question": "How many residences are there?",
        "query": "SELECT COUNT ( DISTINCT residence ) FROM player",
        "schema": "CREATE TABLE player (Residence TEXT, Player_ID NUMBER);"
      },
      {
        "question": "What are these residences?",
        "query": "SELECT DISTINCT residence FROM player",
        "schema": "CREATE TABLE player (Player_ID NUMBER, Residence TEXT);"
      },
      {
        "question": "Which residences have more than 1 player?",
        "query": "SELECT residence FROM player GROUP BY residence HAVING COUNT ( * ) > = 1",
        "schema": "CREATE TABLE player (Player_ID NUMBER, Residence TEXT);"
      }
    ],
    [
      {
        "question": "What are all the residences?",
        "query": "SELECT DISTINCT residence FROM player",
        "schema": "CREATE TABLE player (Residence TEXT);"
      },
      {
        "question": "How many people live at each of them?",
        "query": "SELECT residence, COUNT ( * ) FROM player GROUP BY residence",
        "schema": "CREATE TABLE player (Player_ID NUMBER, Residence TEXT);"
      },
      {
        "question": "Now remove the residences with less than 2 people",
        "query": "SELECT residence, COUNT ( * ) FROM player EXCEPT SELECT residence, COUNT ( * ) FROM player WHERE COUNT ( * ) < 2",
        "schema": "CREATE TABLE player (Residence TEXT, Player_ID NUMBER);"
      },
      {
        "question": "OK, now list all the people who live in Winnipeg and their gender.",
        "query": "SELECT player_name, gender FROM player WHERE residence = \"Winnipeg\"",
        "schema": "CREATE TABLE player (Gender TEXT, Player_ID NUMBER, Residence TEXT, Player_name TEXT);"
      }
    ],
    [
      {
        "question": "Which coach started in 2010?",
        "query": "SELECT coach_id FROM player_coach WHERE starting_year = 2010",
        "schema": "CREATE TABLE coach (Club_ID NUMBER, Coach_name TEXT, Coach_ID NUMBER); CREATE TABLE player (Player_ID NUMBER); CREATE TABLE player_coach (Starting_year NUMBER, Coach_ID NUMBER, Player_ID NUMBER); CREATE TABLE club (Start_year NUMBER, Club_ID NUMBER);"
      },
      {
        "question": "What are the names of the coaches that started in 2010?",
        "query": "SELECT coach_name FROM coach AS t1 JOIN player_coach AS t2 ON t1.coach_id = t2.coach_id WHERE starting_year = 2010",
        "schema": "CREATE TABLE player (Player_ID NUMBER, Player_name TEXT); CREATE TABLE coach (Coach_ID NUMBER, Coach_name TEXT, Club_ID NUMBER); CREATE TABLE player_coach (Player_ID NUMBER, Starting_year NUMBER, Coach_ID NUMBER); CREATE TABLE club (Start_year NUMBER, Club_ID NUMBER);"
      },
      {
        "question": "What are the names of the players who were coached by Jameson Tomas?",
        "query": "SELECT t3.player_name FROM player_coach AS t1 JOIN coach AS t2 ON t1.coach_id = t2.coach_id JOIN player AS t3 ON t1.player_id = t3.player_id WHERE t2.coach_name = \"Jameson Tomas\"",
        "schema": "CREATE TABLE player (Player_name TEXT, Player_ID NUMBER); CREATE TABLE club (Start_year NUMBER, Club_ID NUMBER); CREATE TABLE player_coach (Starting_year NUMBER, Player_ID NUMBER, Coach_ID NUMBER); CREATE TABLE coach (Club_ID NUMBER, Coach_ID NUMBER, Coach_name TEXT);"
      },
      {
        "question": "What are the names of the players who were coached by Smith Brown?",
        "query": "SELECT t3.player_name FROM player_coach AS t1 JOIN coach AS t2 ON t1.coach_id = t2.coach_id JOIN player AS t3 ON t1.player_id = t3.player_id WHERE t2.coach_name = \"Smith Brown\"",
        "schema": "CREATE TABLE coach (Coach_name TEXT, Coach_ID NUMBER, Club_ID NUMBER); CREATE TABLE player_coach (Coach_ID NUMBER, Player_ID NUMBER, Starting_year NUMBER); CREATE TABLE player (Player_name TEXT, Player_ID NUMBER); CREATE TABLE club (Club_ID NUMBER, Start_year NUMBER);"
      },
      {
        "question": "What is the name of the coach who started in 2011?",
        "query": "SELECT t1.coach_name FROM coach AS t1 JOIN player_coach AS t2 ON t1.coach_id = t2.coach_id WHERE t2.starting_year = 2011",
        "schema": "CREATE TABLE player_coach (Player_ID NUMBER, Coach_ID NUMBER, Starting_year NUMBER); CREATE TABLE player (Player_ID NUMBER, Player_name TEXT); CREATE TABLE coach (Coach_name TEXT, Coach_ID NUMBER, Club_ID NUMBER); CREATE TABLE club (Club_ID NUMBER, Start_year NUMBER);"
      },
      {
        "question": "What are the names of the players who were coached by Robert Chen?",
        "query": "SELECT t3.player_name FROM player_coach AS t1 JOIN coach AS t2 ON t1.coach_id = t2.coach_id JOIN player AS t3 ON t1.player_id = t3.player_id WHERE t2.coach_name = \"Robert Chen\"",
        "schema": "CREATE TABLE coach (Club_ID NUMBER, Coach_ID NUMBER, Coach_name TEXT); CREATE TABLE club (Club_ID NUMBER, Start_year NUMBER); CREATE TABLE player (Player_ID NUMBER, Player_name TEXT); CREATE TABLE player_coach (Coach_ID NUMBER, Player_ID NUMBER, Starting_year NUMBER);"
      }
    ],
    [
      {
        "question": "Show the residences that have both a player of gender \"M\" and a player \"F\".",
        "query": "SELECT residence FROM player WHERE gender = \"M\" INTERSECT SELECT residence FROM player WHERE gender = \"F\"",
        "schema": "CREATE TABLE player (Player_name TEXT, Player_ID NUMBER, Residence TEXT, Gender TEXT); CREATE TABLE coach (Gender TEXT);"
      },
      {
        "question": "who is the sponsor of jean luc bouche?",
        "query": "SELECT sponsor_name FROM player WHERE player_name = \"Jean Luc Bouch\u00e9\"",
        "schema": "CREATE TABLE coach (Coach_name TEXT, Gender TEXT); CREATE TABLE player (Residence TEXT, Gender TEXT, Player_name TEXT, Sponsor_name TEXT, Player_ID NUMBER);"
      },
      {
        "question": "Final question is how many votes for Niki Ashton?",
        "query": "SELECT votes FROM player WHERE player_name = \"Niki Ashton\"",
        "schema": "CREATE TABLE player (Sponsor_name TEXT, Residence TEXT, Votes NUMBER, Player_ID NUMBER, Gender TEXT, Player_name TEXT); CREATE TABLE coach (Coach_name TEXT, Gender TEXT);"
      }
    ]
  ],
  "e_government": [
    [
      {
        "question": "What are the names of contact individuals of the \"Labour Party\"? | Do you want to know the first name, middle name, last name? | Just the last names.",
        "query": "SELECT t3.individual_last_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id = t2.organization_id JOIN individuals AS t3 ON t2.individual_id = t3.individual_id WHERE t1.organization_name = \"Labour Party\" ORDER BY t2.date_contact_to DESC LIMIT 1",
        "schema": "CREATE TABLE Organizations (organization_name TEXT, organization_id NUMBER); CREATE TABLE Party_Forms (party_id NUMBER); CREATE TABLE Organization_Contact_Individuals (date_contact_from TIME, date_contact_to TIME, organization_id NUMBER, individual_id NUMBER); CREATE TABLE Parties (party_id NUMBER, party_email TEXT); CREATE TABLE Individuals (individual_middle_name TEXT, individual_email TEXT, individual_first_name TEXT, individual_id NUMBER, individual_last_name TEXT);"
      },
      {
        "question": "Who is the latest contact individual? | the last name of the latest contact individual of the organization \"Labour Party\" is Bradtke | And what is the date of contact?",
        "query": "SELECT t2.date_contact_from, t2.date_contact_to FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id = t2.organization_id JOIN individuals AS t3 ON t2.individual_id = t3.individual_id WHERE t1.organization_name = \"Labour Party\" ORDER BY t2.date_contact_to DESC LIMIT 1",
        "schema": "CREATE TABLE Organization_Contact_Individuals (date_contact_from TIME, date_contact_to TIME, individual_id NUMBER, organization_id NUMBER); CREATE TABLE Organizations (date_formed TIME, organization_id NUMBER, organization_name TEXT); CREATE TABLE Party_Forms (party_id NUMBER); CREATE TABLE Individuals (individual_id NUMBER, individual_middle_name TEXT, individual_email TEXT, individual_last_name TEXT, individual_first_name TEXT); CREATE TABLE Parties (party_email TEXT, party_id NUMBER);"
      }
    ],
    [
      {
        "question": "What booking made date of service id 1?",
        "query": "SELECT booking_made_date FROM services AS t1 JOIN party_services AS t2 ON t1.service_id = t2.service_id WHERE t1.service_id = \"1\"",
        "schema": "CREATE TABLE Services (service_id NUMBER, service_descriptio TEXT); CREATE TABLE Party_Services (booking_id NUMBER, service_datetime TIME, customer_id NUMBER, booking_made_date TIME, service_id NUMBER); CREATE TABLE Forms (service_id NUMBER);"
      },
      {
        "question": "What are the service name of booking id 2?",
        "query": "SELECT service_name FROM services AS t1 JOIN party_services AS t2 ON t1.service_id = t2.service_id WHERE t2.booking_id = \"2\"",
        "schema": "CREATE TABLE Services (service_id NUMBER, service_name TEXT, service_descriptio TEXT); CREATE TABLE Party_Services (booking_made_date TIME, customer_id NUMBER, service_id NUMBER, service_datetime TIME, booking_id NUMBER); CREATE TABLE Forms (service_id NUMBER);"
      },
      {
        "question": "What are the service description of service type code Welfare?",
        "query": "SELECT service_descriptio FROM services WHERE service_type_code = \"Welfare\"",
        "schema": "CREATE TABLE Forms (form_description TEXT, service_id NUMBER); CREATE TABLE Party_Services (service_id NUMBER, booking_id NUMBER, customer_id NUMBER, booking_made_date TIME, service_datetime TIME); CREATE TABLE Services (service_id NUMBER, service_type_code TEXT, service_name TEXT, service_descriptio TEXT);"
      },
      {
        "question": "Find mane of the service that has never been used.",
        "query": "SELECT service_name FROM services EXCEPT SELECT t1.service_name FROM services AS t1 JOIN party_services AS t2 ON t1.service_id = t2.service_id",
        "schema": "CREATE TABLE Forms (form_description TEXT, service_id NUMBER); CREATE TABLE Services (service_id NUMBER, service_name TEXT, service_type_code TEXT, service_descriptio TEXT); CREATE TABLE Party_Services (service_id NUMBER, customer_id NUMBER, booking_made_date TIME, booking_id NUMBER, service_datetime TIME);"
      }
    ],
    [
      {
        "question": "Find the name of all the cities and states. | you want the columns of town_city and state_province_county,right? | Umm. Give me the names and the states please",
        "query": "SELECT town_city FROM addresses UNION SELECT state_province_county FROM addresses",
        "schema": "CREATE TABLE Party_Addresses (address_id NUMBER); CREATE TABLE Forms (form_name TEXT); CREATE TABLE Addresses (state_province_county TEXT, address_id NUMBER, town_city TEXT);"
      },
      {
        "question": "Can you give me the zip_postcode for Colorado",
        "query": "SELECT zip_postcode FROM addresses WHERE state_province_county = 'Colorado'",
        "schema": "CREATE TABLE Party_Addresses (address_id NUMBER); CREATE TABLE Addresses (state_province_county TEXT, town_city TEXT, zip_postcode TEXT, country TEXT, address_id NUMBER); CREATE TABLE Forms (form_name TEXT);"
      },
      {
        "question": "Give me the cities where the state is Colorado",
        "query": "SELECT town_city FROM addresses WHERE state_province_county = 'Colorado'",
        "schema": "CREATE TABLE Addresses (town_city TEXT, state_province_county TEXT, address_id NUMBER, zip_postcode TEXT, country TEXT); CREATE TABLE Forms (form_name TEXT); CREATE TABLE Party_Addresses (address_id NUMBER);"
      },
      {
        "question": "Ok. Can you give me the cities where the state is NorthCarolina",
        "query": "SELECT town_city FROM addresses WHERE state_province_county = 'NorthCarolina'",
        "schema": "CREATE TABLE Forms (form_name TEXT); CREATE TABLE Addresses (country TEXT, town_city TEXT, zip_postcode TEXT, address_id NUMBER, state_province_county TEXT); CREATE TABLE Party_Addresses (address_id NUMBER);"
      },
      {
        "question": "Give me all the zipcodes",
        "query": "SELECT zip_postcode FROM addresses",
        "schema": "CREATE TABLE Forms (form_name TEXT); CREATE TABLE Addresses (state_province_county TEXT, town_city TEXT, country TEXT, address_id NUMBER, zip_postcode TEXT); CREATE TABLE Party_Addresses (address_id NUMBER);"
      }
    ],
    [
      {
        "question": "how many parties are on the table?",
        "query": "SELECT COUNT ( * ) FROM parties",
        "schema": "CREATE TABLE Parties (party_phone TEXT, payment_method_code TEXT, party_email TEXT, party_id NUMBER); CREATE TABLE Party_Services (customer_id NUMBER); CREATE TABLE Addresses (address_id NUMBER); CREATE TABLE Party_Forms (party_id NUMBER, form_id NUMBER, form_status_code TEXT); CREATE TABLE Individuals (individual_id NUMBER); CREATE TABLE Forms (form_id NUMBER); CREATE TABLE Party_Addresses (party_id NUMBER, address_id NUMBER);"
      },
      {
        "question": "how many of the parties are popular? | What do you mean by popular? | how many parties have the most popular party form?",
        "query": "SELECT COUNT ( * ) FROM parties AS t1 JOIN party_forms AS t2 ON t1.party_id = t2.party_id WHERE t2.form_id = ( SELECT form_id FROM party_forms GROUP BY form_id ORDER BY COUNT ( * ) DESC LIMIT 1 )",
        "schema": "CREATE TABLE Party_Forms (form_id NUMBER, party_id NUMBER, form_status_code TEXT); CREATE TABLE Addresses (address_id NUMBER); CREATE TABLE Individuals (individual_id NUMBER); CREATE TABLE Party_Addresses (address_id NUMBER, party_id NUMBER); CREATE TABLE Forms (form_type_code TEXT, form_name TEXT, form_id NUMBER, form_number TEXT); CREATE TABLE Party_Services (customer_id NUMBER); CREATE TABLE Parties (party_id NUMBER, party_phone TEXT, party_email TEXT, payment_method_code TEXT);"
      },
      {
        "question": "can i have their emails?",
        "query": "SELECT t1.party_email FROM parties AS t1 JOIN party_forms AS t2 ON t1.party_id = t2.party_id WHERE t2.form_id = ( SELECT form_id FROM party_forms GROUP BY form_id ORDER BY COUNT ( * ) DESC LIMIT 1 )",
        "schema": "CREATE TABLE Parties (party_email TEXT, party_phone TEXT, payment_method_code TEXT, party_id NUMBER); CREATE TABLE Addresses (address_id NUMBER); CREATE TABLE Party_Services (customer_id NUMBER); CREATE TABLE Party_Addresses (party_id NUMBER, address_id NUMBER); CREATE TABLE Individuals (individual_id NUMBER, individual_email TEXT); CREATE TABLE Forms (form_name TEXT, form_type_code TEXT, form_number TEXT, form_id NUMBER); CREATE TABLE Party_Forms (party_id NUMBER, form_id NUMBER, form_status_code TEXT);"
      }
    ],
    [
      {
        "question": "Tell me the party email of the party with id 1?",
        "query": "SELECT party_email FROM parties WHERE party_id = \"1\"",
        "schema": "CREATE TABLE Individuals (individual_email TEXT, individual_first_name TEXT, individual_last_name TEXT, individual_id NUMBER); CREATE TABLE Organizations (organization_name TEXT, organization_id NUMBER); CREATE TABLE Parties (party_id NUMBER, party_phone TEXT, party_email TEXT); CREATE TABLE Services (service_id NUMBER); CREATE TABLE Party_Addresses (party_id NUMBER, address_id NUMBER); CREATE TABLE Addresses (address_id NUMBER); CREATE TABLE Party_Services (customer_id NUMBER); CREATE TABLE Forms (form_id NUMBER); CREATE TABLE Party_Forms (form_id NUMBER, party_id NUMBER);"
      },
      {
        "question": "Tell me the party phone of the party id 2 ?",
        "query": "SELECT party_phone FROM parties WHERE party_id = \"2\"",
        "schema": "CREATE TABLE Party_Forms (party_id NUMBER, form_id NUMBER); CREATE TABLE Organizations (organization_id NUMBER, organization_name TEXT); CREATE TABLE Individuals (individual_id NUMBER, individual_last_name TEXT, inidividual_phone TEXT, individual_first_name TEXT, individual_email TEXT); CREATE TABLE Parties (party_email TEXT, party_phone TEXT, party_id NUMBER); CREATE TABLE Services (service_id NUMBER); CREATE TABLE Forms (form_id NUMBER); CREATE TABLE Addresses (address_id NUMBER); CREATE TABLE Party_Addresses (party_id NUMBER, address_id NUMBER); CREATE TABLE Party_Services (customer_id NUMBER);"
      },
      {
        "question": "Tell me the service id of the customer id 10 ?",
        "query": "SELECT service_id FROM party_services WHERE customer_id = \"10\"",
        "schema": "CREATE TABLE Party_Forms (form_id NUMBER, party_id NUMBER); CREATE TABLE Forms (service_id NUMBER, form_id NUMBER); CREATE TABLE Individuals (inidividual_phone TEXT, individual_first_name TEXT, individual_last_name TEXT, individual_email TEXT, individual_id NUMBER); CREATE TABLE Organizations (organization_id NUMBER, organization_name TEXT); CREATE TABLE Addresses (address_id NUMBER); CREATE TABLE Parties (party_email TEXT, party_id NUMBER, party_phone TEXT); CREATE TABLE Party_Addresses (address_id NUMBER, party_id NUMBER); CREATE TABLE Services (service_type_code TEXT, service_name TEXT, service_descriptio TEXT, service_id NUMBER); CREATE TABLE Party_Services (booking_id NUMBER, service_id NUMBER, customer_id NUMBER);"
      },
      {
        "question": "Which is the email of the party that has used the services the most number of times ?",
        "query": "SELECT t1.party_email FROM parties AS t1 JOIN party_services AS t2 ON t1.party_id = t2.customer_id GROUP BY t1.party_email ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Party_Forms (form_id NUMBER, party_id NUMBER); CREATE TABLE Party_Services (service_datetime TIME, service_id NUMBER, booking_id NUMBER, customer_id NUMBER); CREATE TABLE Services (service_name TEXT, service_type_code TEXT, service_descriptio TEXT, service_id NUMBER); CREATE TABLE Party_Addresses (address_id NUMBER, party_id NUMBER); CREATE TABLE Individuals (individual_email TEXT, individual_last_name TEXT, individual_id NUMBER, inidividual_phone TEXT, individual_first_name TEXT); CREATE TABLE Parties (party_id NUMBER, party_email TEXT, party_phone TEXT); CREATE TABLE Addresses (address_id NUMBER); CREATE TABLE Organizations (organization_id NUMBER, organization_name TEXT); CREATE TABLE Forms (form_id NUMBER, service_id NUMBER);"
      }
    ]
  ],
  "product_catalog": [
    [
      {
        "question": "LIST THE  NAME OF CATALOGS",
        "query": "SELECT CATALOG_NAME FROM catalogs",
        "schema": "CREATE TABLE Catalogs (catalog_id NUMBER, catalog_name TEXT, catalog_publisher TEXT); CREATE TABLE Catalog_Contents (catalog_entry_name TEXT, catalog_entry_id NUMBER); CREATE TABLE Catalog_Structure (catalog_level_name TEXT, catalog_id NUMBER);"
      },
      {
        "question": "WHICH PUBLISHER HAS PUBLISHED MORE CATALOGS",
        "query": "SELECT catalog_publisher,COUNT ( * ) FROM catalogs GROUP BY catalog_publisher ORDER BY COUNT ( * ) DESC",
        "schema": "CREATE TABLE Catalogs (catalog_publisher TEXT, catalog_name TEXT, catalog_id NUMBER); CREATE TABLE Catalog_Contents (catalog_entry_name TEXT, catalog_entry_id NUMBER); CREATE TABLE Catalog_Structure (catalog_level_name TEXT, catalog_id NUMBER);"
      }
    ],
    [
      {
        "question": "What are the names of catalog with number 8",
        "query": "SELECT t1.catalog_entry_name FROM catalog_contents AS t1 JOIN catalog_contents_additional_attributes AS t2 ON t1.catalog_entry_id = t2.catalog_entry_id WHERE t2.catalog_level_number = \"8\"",
        "schema": "CREATE TABLE Catalog_Contents_Additional_Attributes (catalog_entry_id NUMBER, catalog_level_number NUMBER); CREATE TABLE Catalog_Contents (product_stock_number TEXT, catalog_entry_name TEXT, length TEXT, catalog_level_number NUMBER, previous_entry_id NUMBER, catalog_entry_id NUMBER, next_entry_id NUMBER, parent_entry_id NUMBER); CREATE TABLE Catalogs (catalog_id NUMBER, catalog_name TEXT); CREATE TABLE Catalog_Structure (catalog_level_number NUMBER, catalog_level_name TEXT, catalog_id NUMBER);"
      },
      {
        "question": "Could you please show me their attribute ID",
        "query": "SELECT t2.attribute_id FROM catalog_contents AS t1 JOIN catalog_contents_additional_attributes AS t2 ON t1.catalog_entry_id = t2.catalog_entry_id WHERE t2.catalog_level_number = \"8\"",
        "schema": "CREATE TABLE Catalogs (catalog_name TEXT, catalog_id NUMBER); CREATE TABLE Catalog_Contents (length TEXT, catalog_entry_name TEXT, catalog_level_number NUMBER, product_stock_number TEXT, next_entry_id NUMBER, parent_entry_id NUMBER, previous_entry_id NUMBER, catalog_entry_id NUMBER); CREATE TABLE Attribute_Definitions (attribute_name TEXT, attribute_id NUMBER); CREATE TABLE Catalog_Contents_Additional_Attributes (attribute_id NUMBER, catalog_entry_id NUMBER, attribute_value TEXT, catalog_level_number NUMBER); CREATE TABLE Catalog_Structure (catalog_level_number NUMBER, catalog_level_name TEXT, catalog_id NUMBER);"
      },
      {
        "question": "What about their attribute value",
        "query": "SELECT t2.attribute_value FROM catalog_contents AS t1 JOIN catalog_contents_additional_attributes AS t2 ON t1.catalog_entry_id = t2.catalog_entry_id WHERE t2.catalog_level_number = \"8\"",
        "schema": "CREATE TABLE Catalog_Contents_Additional_Attributes (attribute_value TEXT, catalog_level_number NUMBER, attribute_id NUMBER, catalog_entry_id NUMBER); CREATE TABLE Attribute_Definitions (attribute_name TEXT, attribute_id NUMBER); CREATE TABLE Catalog_Structure (catalog_level_name TEXT, catalog_id NUMBER, catalog_level_number NUMBER); CREATE TABLE Catalogs (catalog_id NUMBER, catalog_name TEXT); CREATE TABLE Catalog_Contents (catalog_entry_name TEXT, product_stock_number TEXT, next_entry_id NUMBER, catalog_entry_id NUMBER, catalog_level_number NUMBER, length TEXT, parent_entry_id NUMBER, previous_entry_id NUMBER);"
      }
    ],
    [
      {
        "question": "Can you tell me highest value of the entry name?",
        "query": "SELECT catalog_entry_name FROM catalog_contents ORDER BY price_in_dollars DESC LIMIT 1",
        "schema": "CREATE TABLE Catalog_Contents_Additional_Attributes (attribute_value TEXT, catalog_entry_id NUMBER); CREATE TABLE Catalog_Contents (catalog_entry_id NUMBER, price_in_dollars NUMBER, catalog_entry_name TEXT, height TEXT, next_entry_id NUMBER, price_in_pounds NUMBER, price_in_euros NUMBER); CREATE TABLE Catalogs (catalog_name TEXT);"
      }
    ],
    [
      {
        "question": "what are the names of all catalogs",
        "query": "SELECT CATALOG_NAME FROM catalogs",
        "schema": "CREATE TABLE Catalog_Structure (catalog_level_name TEXT, catalog_id NUMBER); CREATE TABLE Attribute_Definitions (attribute_name TEXT); CREATE TABLE Catalogs (catalog_id NUMBER, catalog_name TEXT); CREATE TABLE Catalog_Contents (catalog_entry_id NUMBER, catalog_entry_name TEXT);"
      },
      {
        "question": "list the publication dates for all catalogs",
        "query": "SELECT date_of_publication FROM catalogs",
        "schema": "CREATE TABLE Catalog_Contents (catalog_entry_id NUMBER, catalog_entry_name TEXT, previous_entry_id NUMBER); CREATE TABLE Catalog_Structure (catalog_level_name TEXT, catalog_id NUMBER); CREATE TABLE Attribute_Definitions (attribute_name TEXT); CREATE TABLE Catalogs (catalog_name TEXT, date_of_publication TIME, catalog_id NUMBER);"
      },
      {
        "question": "list the catalogs that have level number greater than 5 | Do you want catalog name or id? | id",
        "query": "SELECT t1.catalog_id FROM catalogs AS t1 JOIN catalog_structure AS t2 ON t1.catalog_id = t2.catalog_id WHERE catalog_level_number > 5",
        "schema": "CREATE TABLE Catalog_Contents_Additional_Attributes (catalog_level_number NUMBER, catalog_entry_id NUMBER); CREATE TABLE Catalogs (date_of_publication TIME, catalog_name TEXT, catalog_id NUMBER); CREATE TABLE Catalog_Contents (height TEXT, previous_entry_id NUMBER, catalog_level_number NUMBER, catalog_entry_id NUMBER, catalog_entry_name TEXT); CREATE TABLE Attribute_Definitions (attribute_name TEXT); CREATE TABLE Catalog_Structure (catalog_level_number NUMBER, catalog_id NUMBER, catalog_level_name TEXT);"
      }
    ],
    [
      {
        "question": "Could you please tell me all the catalog publishers whose name contains \"Murray\"?",
        "query": "SELECT DISTINCT ( catalog_publisher ) FROM catalogs WHERE catalog_publisher LIKE \"%Murray%\"",
        "schema": "CREATE TABLE Catalog_Contents (catalog_entry_name TEXT); CREATE TABLE Catalogs (catalog_name TEXT, catalog_publisher TEXT, catalog_id NUMBER);"
      },
      {
        "question": "What is the name of that catalog?",
        "query": "SELECT CATALOG_NAME FROM catalogs WHERE catalog_publisher LIKE \"%Murray%\"",
        "schema": "CREATE TABLE Catalog_Contents (catalog_entry_name TEXT); CREATE TABLE Catalogs (catalog_publisher TEXT, catalog_id NUMBER, catalog_name TEXT);"
      },
      {
        "question": "What are the dates of latest revision for those?",
        "query": "SELECT date_of_latest_revision FROM catalogs WHERE catalog_publisher LIKE \"%Murray%\"",
        "schema": "CREATE TABLE Catalog_Contents (next_entry_id NUMBER, length TEXT, previous_entry_id NUMBER, catalog_entry_name TEXT, catalog_entry_id NUMBER); CREATE TABLE Catalogs (date_of_publication TIME, catalog_id NUMBER, catalog_publisher TEXT, date_of_latest_revision TIME, catalog_name TEXT);"
      },
      {
        "question": "Could you please tell me all the catalog publishers whose name contains \"chocolate\"?",
        "query": "SELECT catalog_publisher FROM catalogs WHERE catalog_publisher LIKE \"%chocolate%\"",
        "schema": "CREATE TABLE Catalogs (catalog_id NUMBER, date_of_publication TIME, date_of_latest_revision TIME, catalog_publisher TEXT, catalog_name TEXT); CREATE TABLE Catalog_Contents (length TEXT, previous_entry_id NUMBER, catalog_entry_id NUMBER, next_entry_id NUMBER, catalog_entry_name TEXT);"
      },
      {
        "question": "How many catalogs do they publish?",
        "query": "SELECT COUNT ( * ) FROM catalogs WHERE catalog_publisher IN ( SELECT DISTINCT ( catalog_publisher ) FROM catalogs WHERE catalog_publisher LIKE \"%chocolate%\" )",
        "schema": "CREATE TABLE Catalogs (catalog_name TEXT, date_of_latest_revision TIME, catalog_id NUMBER, catalog_publisher TEXT, date_of_publication TIME); CREATE TABLE Catalog_Contents (next_entry_id NUMBER, length TEXT, catalog_entry_name TEXT, catalog_entry_id NUMBER, previous_entry_id NUMBER);"
      },
      {
        "question": "What's the name of that catalog and its date of publication?",
        "query": "SELECT CATALOG_NAME,date_of_publication FROM catalogs WHERE catalog_publisher IN ( SELECT DISTINCT ( catalog_publisher ) FROM catalogs WHERE catalog_publisher LIKE \"%chocolate%\" )",
        "schema": "CREATE TABLE Catalogs (catalog_publisher TEXT, date_of_latest_revision TIME, date_of_publication TIME, catalog_name TEXT, catalog_id NUMBER); CREATE TABLE Catalog_Contents (next_entry_id NUMBER, previous_entry_id NUMBER, length TEXT, catalog_entry_name TEXT, catalog_entry_id NUMBER);"
      }
    ],
    [
      {
        "question": "What are the average and minimum prices (in Euros) of all products?",
        "query": "SELECT AVG ( price_in_euros ) , MIN ( price_in_euros ) FROM catalog_contents",
        "schema": "CREATE TABLE Catalog_Contents_Additional_Attributes (catalog_entry_id NUMBER); CREATE TABLE Catalog_Contents (price_in_pounds NUMBER, catalog_entry_name TEXT, price_in_euros NUMBER, price_in_dollars NUMBER, catalog_entry_id NUMBER);"
      },
      {
        "question": "How about just for Cola?",
        "query": "SELECT AVG ( price_in_euros ) , MIN ( price_in_euros ) FROM catalog_contents WHERE catalog_entry_name = 'Cola'",
        "schema": "CREATE TABLE Catalog_Contents (price_in_euros NUMBER, price_in_pounds NUMBER, price_in_dollars NUMBER, catalog_entry_id NUMBER, next_entry_id NUMBER, catalog_entry_name TEXT); CREATE TABLE Catalogs (catalog_id NUMBER, catalog_name TEXT); CREATE TABLE Catalog_Contents_Additional_Attributes (catalog_entry_id NUMBER);"
      },
      {
        "question": "How about the price of Cola in dollars? | do you still want to know the average and minimum? | Yes please!",
        "query": "SELECT AVG ( price_in_dollars ) , MIN ( price_in_dollars ) FROM catalog_contents WHERE catalog_entry_name = 'Cola'",
        "schema": "CREATE TABLE Catalog_Contents (price_in_pounds NUMBER, next_entry_id NUMBER, catalog_entry_name TEXT, catalog_entry_id NUMBER, previous_entry_id NUMBER, price_in_euros NUMBER, price_in_dollars NUMBER); CREATE TABLE Catalogs (catalog_name TEXT, catalog_id NUMBER); CREATE TABLE Catalog_Contents_Additional_Attributes (catalog_entry_id NUMBER);"
      },
      {
        "question": "How about the prices for root beer in dollars? | did you still want to know the average and minimum? | Yes please!",
        "query": "SELECT AVG ( price_in_dollars ) , MIN ( price_in_dollars ) FROM catalog_contents WHERE catalog_entry_name = 'Root beer'",
        "schema": "CREATE TABLE Catalog_Contents (catalog_entry_name TEXT, previous_entry_id NUMBER, price_in_pounds NUMBER, price_in_dollars NUMBER, catalog_entry_id NUMBER, next_entry_id NUMBER, price_in_euros NUMBER); CREATE TABLE Catalog_Contents_Additional_Attributes (catalog_entry_id NUMBER); CREATE TABLE Catalogs (catalog_id NUMBER, catalog_name TEXT);"
      }
    ],
    [
      {
        "question": "Tell the capacity, length, height and width for the catalog entry name cola ?",
        "query": "SELECT capacity, LENGTH, height, width FROM catalog_contents WHERE catalog_entry_name = \"Cola\"",
        "schema": "CREATE TABLE Catalogs (catalog_id NUMBER, catalog_name TEXT); CREATE TABLE Catalog_Structure (catalog_id NUMBER); CREATE TABLE Catalog_Contents (length TEXT, width TEXT, catalog_entry_name TEXT, next_entry_id NUMBER, height TEXT, capacity TEXT, catalog_entry_id NUMBER); CREATE TABLE Catalog_Contents_Additional_Attributes (catalog_entry_id NUMBER);"
      },
      {
        "question": "Tell me the price of Cream Soda in dollars, euros and pounds.",
        "query": "SELECT price_in_dollars, price_in_euros, price_in_pounds FROM catalog_contents WHERE catalog_entry_name = \"Cream Soda\"",
        "schema": "CREATE TABLE Catalog_Contents (length TEXT, catalog_entry_name TEXT, catalog_entry_id NUMBER, price_in_euros NUMBER, capacity TEXT, height TEXT, next_entry_id NUMBER, price_in_dollars NUMBER, width TEXT, price_in_pounds NUMBER); CREATE TABLE Catalog_Contents_Additional_Attributes (catalog_entry_id NUMBER); CREATE TABLE Catalog_Structure (catalog_id NUMBER); CREATE TABLE Catalogs (catalog_id NUMBER, catalog_name TEXT);"
      },
      {
        "question": "What is the product with the highest height ? Give me the catalog entry name.",
        "query": "SELECT catalog_entry_name FROM catalog_contents ORDER BY height DESC LIMIT 1",
        "schema": "CREATE TABLE Catalogs (catalog_name TEXT, catalog_id NUMBER); CREATE TABLE Catalog_Contents (catalog_entry_name TEXT, capacity TEXT, price_in_pounds NUMBER, width TEXT, next_entry_id NUMBER, catalog_entry_id NUMBER, height TEXT, price_in_euros NUMBER, length TEXT, price_in_dollars NUMBER); CREATE TABLE Catalog_Contents_Additional_Attributes (catalog_entry_id NUMBER); CREATE TABLE Catalog_Structure (catalog_id NUMBER);"
      }
    ],
    [
      {
        "question": "What were the dates of the latest revisions?",
        "query": "SELECT date_of_latest_revision FROM catalogs",
        "schema": "CREATE TABLE Catalog_Contents (next_entry_id NUMBER, previous_entry_id NUMBER); CREATE TABLE Catalogs (date_of_publication TIME, date_of_latest_revision TIME);"
      },
      {
        "question": "Which of these appear more than once?",
        "query": "SELECT date_of_latest_revision FROM catalogs GROUP BY date_of_latest_revision HAVING COUNT ( * ) > 1",
        "schema": "CREATE TABLE Catalogs (date_of_latest_revision TIME, date_of_publication TIME, catalog_name TEXT, catalog_id NUMBER); CREATE TABLE Catalog_Contents (length TEXT, catalog_entry_id NUMBER, previous_entry_id NUMBER, catalog_entry_name TEXT, next_entry_id NUMBER);"
      },
      {
        "question": "What catalogs were done on these dates?",
        "query": "SELECT CATALOG_NAME FROM catalogs WHERE date_of_latest_revision IN ( SELECT date_of_latest_revision FROM catalogs GROUP BY date_of_latest_revision HAVING COUNT ( * ) > 1 )",
        "schema": "CREATE TABLE Catalog_Contents (catalog_entry_name TEXT, previous_entry_id NUMBER, catalog_entry_id NUMBER, length TEXT, next_entry_id NUMBER); CREATE TABLE Catalogs (catalog_name TEXT, date_of_latest_revision TIME, catalog_id NUMBER, date_of_publication TIME);"
      },
      {
        "question": "Great, can you show me the dates these catalogs were revised again?",
        "query": "SELECT CATALOG_NAME, date_of_latest_revision FROM catalogs WHERE date_of_latest_revision IN ( SELECT date_of_latest_revision FROM catalogs GROUP BY date_of_latest_revision HAVING COUNT ( * ) > 1 )",
        "schema": "CREATE TABLE Catalogs (catalog_id NUMBER, date_of_latest_revision TIME, catalog_name TEXT, date_of_publication TIME); CREATE TABLE Catalog_Contents (previous_entry_id NUMBER, length TEXT, catalog_entry_id NUMBER, next_entry_id NUMBER, catalog_entry_name TEXT);"
      },
      {
        "question": "Can you show me what dates appear more than once again?",
        "query": "SELECT date_of_latest_revision FROM catalogs GROUP BY date_of_latest_revision HAVING COUNT ( * ) > 1",
        "schema": "CREATE TABLE Catalog_Contents (length TEXT, next_entry_id NUMBER, catalog_entry_name TEXT, catalog_entry_id NUMBER, previous_entry_id NUMBER); CREATE TABLE Catalogs (date_of_latest_revision TIME, date_of_publication TIME, catalog_name TEXT, catalog_id NUMBER);"
      }
    ],
    [
      {
        "question": "Could you list the catalog publishers in descending order? | order by what? | Alphabetical order",
        "query": "SELECT catalog_publisher FROM catalogs GROUP BY catalog_publisher ORDER BY catalog_publisher DESC",
        "schema": "CREATE TABLE Catalogs (catalog_publisher TEXT, catalog_id NUMBER, catalog_name TEXT);"
      },
      {
        "question": "Great! How many catalogs has each publisher published?",
        "query": "SELECT catalog_publisher, COUNT ( * ) FROM catalogs GROUP BY catalog_publisher",
        "schema": "CREATE TABLE Catalogs (catalog_id NUMBER, catalog_name TEXT, catalog_publisher TEXT);"
      },
      {
        "question": "Great! Which publishers have the most published catalogues?",
        "query": "SELECT catalog_publisher FROM catalogs GROUP BY catalog_publisher ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Catalogs (catalog_publisher TEXT, catalog_id NUMBER, catalog_name TEXT);"
      }
    ],
    [
      {
        "question": "What are the attribute data types that possessed more than 3 attribute definitions?",
        "query": "SELECT attribute_data_type FROM attribute_definitions GROUP BY attribute_data_type HAVING COUNT ( * ) > 3",
        "schema": "CREATE TABLE Attribute_Definitions (attribute_data_type TEXT, attribute_id NUMBER, attribute_name TEXT); CREATE TABLE Catalog_Contents_Additional_Attributes (attribute_id NUMBER, attribute_value TEXT, catalog_entry_id NUMBER);"
      },
      {
        "question": "What is bool's attribute name? | Do you mean the attribute names for attributes whose attribute data type is bool? | Yes please",
        "query": "SELECT attribute_name FROM attribute_definitions WHERE attribute_data_type = \"Bool\"",
        "schema": "CREATE TABLE Catalog_Contents_Additional_Attributes (attribute_id NUMBER, catalog_entry_id NUMBER, attribute_value TEXT); CREATE TABLE Attribute_Definitions (attribute_name TEXT, attribute_id NUMBER, attribute_data_type TEXT);"
      },
      {
        "question": "What is the attribute ID for attributes whose data type is bool?",
        "query": "SELECT attribute_id FROM attribute_definitions WHERE attribute_data_type = \"Bool\"",
        "schema": "CREATE TABLE Attribute_Definitions (attribute_data_type TEXT, attribute_name TEXT, attribute_id NUMBER); CREATE TABLE Catalog_Contents_Additional_Attributes (attribute_id NUMBER, attribute_value TEXT, catalog_entry_id NUMBER);"
      }
    ],
    [
      {
        "question": "Can you tell me which product has the greatest height? | Which attribute of product do you want? | Can you please show me the catalog entry name?",
        "query": "SELECT catalog_entry_name FROM catalog_contents ORDER BY height DESC LIMIT 1",
        "schema": "CREATE TABLE Catalog_Contents (previous_entry_id NUMBER, height TEXT, next_entry_id NUMBER, catalog_entry_name TEXT, catalog_entry_id NUMBER); CREATE TABLE Attribute_Definitions (attribute_id NUMBER, attribute_name TEXT); CREATE TABLE Catalog_Contents_Additional_Attributes (catalog_entry_id NUMBER, attribute_id NUMBER); CREATE TABLE Catalogs (catalog_name TEXT, catalog_id NUMBER);"
      },
      {
        "question": "What is the catalog entry id and product stock number for Cola?",
        "query": "SELECT catalog_entry_id,product_stock_number FROM catalog_contents WHERE catalog_entry_name = \"Cola\"",
        "schema": "CREATE TABLE Catalog_Contents (length TEXT, width TEXT, catalog_entry_name TEXT, previous_entry_id NUMBER, height TEXT, next_entry_id NUMBER, catalog_entry_id NUMBER, product_stock_number TEXT); CREATE TABLE Catalogs (catalog_id NUMBER, catalog_name TEXT); CREATE TABLE Attribute_Definitions (attribute_name TEXT, attribute_id NUMBER); CREATE TABLE Catalog_Contents_Additional_Attributes (catalog_entry_id NUMBER, attribute_id NUMBER);"
      }
    ],
    [
      {
        "question": "how many Catalog Contents there",
        "query": "SELECT COUNT ( * ) FROM catalog_contents",
        "schema": "CREATE TABLE Catalog_Contents_Additional_Attributes (catalog_level_number NUMBER, catalog_entry_id NUMBER); CREATE TABLE Catalog_Structure (catalog_level_number NUMBER, catalog_id NUMBER); CREATE TABLE Catalogs (catalog_id NUMBER, catalog_name TEXT); CREATE TABLE Catalog_Contents (product_stock_number TEXT, next_entry_id NUMBER, catalog_entry_name TEXT, catalog_level_number NUMBER, capacity TEXT, width TEXT, parent_entry_id NUMBER, length TEXT, catalog_entry_id NUMBER, previous_entry_id NUMBER, height TEXT);"
      },
      {
        "question": "what is the parent entry id of cola",
        "query": "SELECT parent_entry_id FROM catalog_contents WHERE catalog_entry_name = \"Cola\"",
        "schema": "CREATE TABLE Catalog_Structure (catalog_level_number NUMBER, catalog_id NUMBER); CREATE TABLE Catalogs (catalog_id NUMBER, catalog_name TEXT); CREATE TABLE Catalog_Contents_Additional_Attributes (catalog_entry_id NUMBER, catalog_level_number NUMBER); CREATE TABLE Catalog_Contents (capacity TEXT, width TEXT, parent_entry_id NUMBER, length TEXT, catalog_level_number NUMBER, height TEXT, catalog_entry_id NUMBER, previous_entry_id NUMBER, catalog_entry_name TEXT, next_entry_id NUMBER, product_stock_number TEXT);"
      },
      {
        "question": "what is the product stock number of Cream Soda",
        "query": "SELECT product_stock_number FROM catalog_contents WHERE catalog_entry_name = \"Cream Soda\"",
        "schema": "CREATE TABLE Catalog_Contents (height TEXT, catalog_entry_id NUMBER, catalog_level_number NUMBER, parent_entry_id NUMBER, product_stock_number TEXT, catalog_entry_name TEXT, length TEXT, capacity TEXT, previous_entry_id NUMBER, price_in_pounds NUMBER, next_entry_id NUMBER, width TEXT); CREATE TABLE Catalog_Structure (catalog_id NUMBER, catalog_level_number NUMBER); CREATE TABLE Catalog_Contents_Additional_Attributes (catalog_entry_id NUMBER, catalog_level_number NUMBER); CREATE TABLE Catalogs (catalog_id NUMBER, catalog_name TEXT);"
      }
    ],
    [
      {
        "question": "What are the entry names of catalog with the attribute processed by most entries?",
        "query": "SELECT t1.catalog_entry_name FROM catalog_contents AS t1 JOIN catalog_contents_additional_attributes AS t2 ON t1.catalog_entry_id = t2.catalog_entry_id WHERE t2.attribute_value = ( SELECT attribute_value FROM catalog_contents_additional_attributes GROUP BY attribute_value ORDER BY COUNT ( * ) DESC LIMIT 1 )",
        "schema": "CREATE TABLE Attribute_Definitions (attribute_name TEXT, attribute_id NUMBER); CREATE TABLE Catalogs (catalog_name TEXT, catalog_id NUMBER); CREATE TABLE Catalog_Contents (catalog_entry_name TEXT, parent_entry_id NUMBER, previous_entry_id NUMBER, catalog_entry_id NUMBER, next_entry_id NUMBER); CREATE TABLE Catalog_Contents_Additional_Attributes (attribute_value TEXT, attribute_id NUMBER, catalog_entry_id NUMBER);"
      },
      {
        "question": "What are the product stock numbers with the attribute processed by most entries?",
        "query": "SELECT t1.product_stock_number FROM catalog_contents AS t1 JOIN catalog_contents_additional_attributes AS t2 ON t1.catalog_entry_id = t2.catalog_entry_id WHERE t2.attribute_value = ( SELECT attribute_value FROM catalog_contents_additional_attributes GROUP BY attribute_value ORDER BY COUNT ( * ) DESC LIMIT 1 )",
        "schema": "CREATE TABLE Catalog_Contents_Additional_Attributes (catalog_entry_id NUMBER, attribute_value TEXT, attribute_id NUMBER); CREATE TABLE Attribute_Definitions (attribute_id NUMBER, attribute_name TEXT); CREATE TABLE Catalogs (catalog_name TEXT, catalog_id NUMBER); CREATE TABLE Catalog_Contents (product_stock_number TEXT, catalog_entry_id NUMBER, previous_entry_id NUMBER, next_entry_id NUMBER, parent_entry_id NUMBER, catalog_entry_name TEXT);"
      }
    ],
    [
      {
        "question": "What is the height of Cola?",
        "query": "SELECT height FROM catalog_contents WHERE catalog_entry_name = \"Cola\"",
        "schema": "CREATE TABLE Catalog_Structure (catalog_level_number NUMBER, catalog_level_name TEXT, catalog_id NUMBER); CREATE TABLE Catalogs (catalog_id NUMBER, catalog_name TEXT); CREATE TABLE Catalog_Contents (width TEXT, catalog_entry_id NUMBER, height TEXT, catalog_entry_name TEXT, catalog_level_number NUMBER, length TEXT);"
      },
      {
        "question": "Which product has a height smaller than 5? | Do  you  want  to  know  the names of the products with heights smaller than 5 | Yes",
        "query": "SELECT catalog_entry_name FROM catalog_contents WHERE LENGTH < 5",
        "schema": "CREATE TABLE Catalog_Contents (next_entry_id NUMBER, catalog_level_number NUMBER, catalog_entry_name TEXT, catalog_entry_id NUMBER, length TEXT, height TEXT, width TEXT); CREATE TABLE Catalogs (catalog_id NUMBER, catalog_name TEXT); CREATE TABLE Catalog_Structure (catalog_level_name TEXT, catalog_level_number NUMBER, catalog_id NUMBER);"
      },
      {
        "question": "What about their length?",
        "query": "SELECT catalog_entry_name,LENGTH FROM catalog_contents WHERE LENGTH < 5",
        "schema": "CREATE TABLE Catalog_Contents (next_entry_id NUMBER, catalog_entry_id NUMBER, height TEXT, width TEXT, catalog_level_number NUMBER, length TEXT, catalog_entry_name TEXT); CREATE TABLE Catalogs (catalog_name TEXT, catalog_id NUMBER); CREATE TABLE Catalog_Structure (catalog_level_number NUMBER, catalog_id NUMBER, catalog_level_name TEXT);"
      },
      {
        "question": "What is the height of Fenta orange?",
        "query": "SELECT height FROM catalog_contents WHERE catalog_entry_name = \"Fenta Orange\"",
        "schema": "CREATE TABLE Catalogs (catalog_name TEXT, catalog_id NUMBER); CREATE TABLE Catalog_Contents (next_entry_id NUMBER, height TEXT, width TEXT, catalog_entry_id NUMBER, catalog_level_number NUMBER, catalog_entry_name TEXT, length TEXT); CREATE TABLE Catalog_Structure (catalog_level_name TEXT, catalog_level_number NUMBER, catalog_id NUMBER);"
      }
    ]
  ],
  "candidate_poll": [
    [
      {
        "question": "I want to know the lowest oppose rate among the candidates.",
        "query": "SELECT oppose_rate FROM candidate ORDER BY oppose_rate LIMIT 1",
        "schema": "CREATE TABLE candidate (Oppose_rate NUMBER, Candidate_ID NUMBER, People_ID NUMBER); CREATE TABLE people (People_ID NUMBER);"
      },
      {
        "question": "Which candidate got this lowest oppose rate?",
        "query": "SELECT candidate_id FROM candidate ORDER BY oppose_rate LIMIT 1",
        "schema": "CREATE TABLE candidate (Oppose_rate NUMBER, Candidate_ID NUMBER, People_ID NUMBER); CREATE TABLE people (People_ID NUMBER, Name TEXT);"
      },
      {
        "question": "Hmm, which poll source did this candidate belong to?",
        "query": "SELECT poll_source FROM candidate ORDER BY oppose_rate LIMIT 1",
        "schema": "CREATE TABLE people (People_ID NUMBER, Name TEXT); CREATE TABLE candidate (Poll_Source TEXT, Oppose_rate NUMBER, People_ID NUMBER, Candidate_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Hello, how many candidates total are there?",
        "query": "SELECT COUNT ( * ) FROM candidate",
        "schema": "CREATE TABLE people (People_ID NUMBER); CREATE TABLE candidate (People_ID NUMBER, Poll_Source TEXT, Candidate_ID NUMBER);"
      },
      {
        "question": "Perfect, and who has the highest support percentage? | Do you want the people id? | Actually, just the percentage please.",
        "query": "SELECT MAX ( support_rate ) FROM candidate",
        "schema": "CREATE TABLE people (People_ID NUMBER, Name TEXT); CREATE TABLE candidate (Support_rate NUMBER, Candidate_ID NUMBER, Poll_Source TEXT, People_ID NUMBER);"
      },
      {
        "question": "Perfect, what about the lowest consider rate?",
        "query": "SELECT MIN ( consider_rate ) FROM candidate",
        "schema": "CREATE TABLE candidate (Consider_rate NUMBER, Candidate_ID NUMBER, Poll_Source TEXT, People_ID NUMBER, Support_rate NUMBER); CREATE TABLE people (Name TEXT, People_ID NUMBER);"
      },
      {
        "question": "And what about the lowest oppose rate?",
        "query": "SELECT MIN ( oppose_rate ) FROM candidate",
        "schema": "CREATE TABLE candidate (Consider_rate NUMBER, Poll_Source TEXT, Candidate_ID NUMBER, People_ID NUMBER, Support_rate NUMBER, Oppose_rate NUMBER); CREATE TABLE people (People_ID NUMBER, Name TEXT);"
      },
      {
        "question": "And finally, can you tell me the average unsure rate?",
        "query": "SELECT AVG ( unsure_rate ) FROM candidate",
        "schema": "CREATE TABLE candidate (Oppose_rate NUMBER, Support_rate NUMBER, People_ID NUMBER, Poll_Source TEXT, Unsure_rate NUMBER, Consider_rate NUMBER, Candidate_ID NUMBER); CREATE TABLE people (Name TEXT, People_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Can you show me the top three highest support rates for the candidates?",
        "query": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "schema": "CREATE TABLE people (Name TEXT, People_ID NUMBER); CREATE TABLE candidate (Candidate_ID NUMBER, Oppose_rate NUMBER, People_ID NUMBER, Support_rate NUMBER, Consider_rate NUMBER);"
      },
      {
        "question": "What polls are those from? | Did you want the poll source for these polls? | Yes, please",
        "query": "SELECT poll_source, support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "schema": "CREATE TABLE people (Name TEXT, People_ID NUMBER); CREATE TABLE candidate (Support_rate NUMBER, Oppose_rate NUMBER, Poll_Source TEXT, People_ID NUMBER, Candidate_ID NUMBER, Consider_rate NUMBER);"
      },
      {
        "question": "What is the name of the poll source with the earliest date?",
        "query": "SELECT poll_source FROM candidate ORDER BY Date DESC LIMIT 1",
        "schema": "CREATE TABLE people (People_ID NUMBER, Name TEXT); CREATE TABLE candidate (Support_rate NUMBER, Poll_Source TEXT, People_ID NUMBER, Candidate_ID NUMBER, Consider_rate NUMBER, Date TEXT, Oppose_rate NUMBER);"
      }
    ],
    [
      {
        "question": "How many poll sources are there?",
        "query": "SELECT COUNT ( poll_source ) FROM candidate",
        "schema": "CREATE TABLE candidate (People_ID NUMBER, Poll_Source TEXT); CREATE TABLE people (People_ID NUMBER);"
      },
      {
        "question": "how many people are there?",
        "query": "SELECT COUNT ( people_id ) FROM people",
        "schema": "CREATE TABLE candidate (People_ID NUMBER, Poll_Source TEXT, Candidate_ID NUMBER); CREATE TABLE people (Name TEXT, People_ID NUMBER, Sex TEXT);"
      },
      {
        "question": "And how many are female? | Do you mean the people who are female? | Yes, how many are female, have gender \"F\"",
        "query": "SELECT COUNT ( * ) FROM people WHERE sex = 'F'",
        "schema": "CREATE TABLE people (People_ID NUMBER, Sex TEXT, Name TEXT); CREATE TABLE candidate (Candidate_ID NUMBER, Poll_Source TEXT, People_ID NUMBER);"
      },
      {
        "question": "what is their unsure rate? | Do you mean the unsure rate of the people who are female? | Yes",
        "query": "SELECT t2.unsure_rate FROM people AS t1 JOIN candidate AS t2 ON t1.people_id = t2.people_id WHERE t1.sex = 'F'",
        "schema": "CREATE TABLE people (Name TEXT, Sex TEXT, People_ID NUMBER); CREATE TABLE candidate (Candidate_ID NUMBER, Poll_Source TEXT, People_ID NUMBER, Unsure_rate NUMBER);"
      },
      {
        "question": "and the males? | Do you mean the unsure rate of the people who are male? | yes",
        "query": "SELECT t2.unsure_rate FROM people AS t1 JOIN candidate AS t2 ON t1.people_id = t2.people_id WHERE t1.sex = 'M'",
        "schema": "CREATE TABLE candidate (Poll_Source TEXT, Unsure_rate NUMBER, Candidate_ID NUMBER, People_ID NUMBER); CREATE TABLE people (Name TEXT, Sex TEXT, People_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Find the average height and weight for all males (sex is M).",
        "query": "SELECT AVG ( height ) , AVG ( weight ) FROM people WHERE sex = 'M'",
        "schema": "CREATE TABLE candidate (Candidate_ID NUMBER); CREATE TABLE people (Sex TEXT, Height NUMBER, Weight NUMBER);"
      },
      {
        "question": "How many male people are on the table?",
        "query": "SELECT COUNT ( * ) FROM people WHERE sex = 'M'",
        "schema": "CREATE TABLE candidate (Candidate_ID NUMBER); CREATE TABLE people (Sex TEXT, People_ID NUMBER, Height NUMBER, Weight NUMBER);"
      },
      {
        "question": "Which person has the highest height?",
        "query": "SELECT * FROM people ORDER BY height DESC LIMIT 1",
        "schema": "CREATE TABLE candidate (Candidate_ID NUMBER); CREATE TABLE people (Weight NUMBER, People_ID NUMBER, Sex TEXT, Name TEXT, Height NUMBER);"
      },
      {
        "question": "How many female people are on the list?",
        "query": "SELECT COUNT ( * ) FROM people WHERE sex = 'F'",
        "schema": "CREATE TABLE candidate (Candidate_ID NUMBER); CREATE TABLE people (Weight NUMBER, Sex TEXT, People_ID NUMBER, Height NUMBER, Name TEXT);"
      }
    ],
    [
      {
        "question": "what is the current height of Hubert Henno",
        "query": "SELECT height FROM people WHERE name = 'Hubert Henno'",
        "schema": "CREATE TABLE people (People_ID NUMBER, Height NUMBER, Name TEXT); CREATE TABLE candidate (Candidate_ID NUMBER);"
      },
      {
        "question": "How many male sex are there",
        "query": "SELECT COUNT ( * ) FROM people WHERE sex = 'M'",
        "schema": "CREATE TABLE candidate (Candidate_ID NUMBER); CREATE TABLE people (Sex TEXT, Name TEXT, Height NUMBER, People_ID NUMBER);"
      },
      {
        "question": "which of the male has he highest weight | Would you like to know the name of the person who has the highest weight among sex M? | yes of course",
        "query": "SELECT name FROM people WHERE sex = 'M' ORDER BY height DESC LIMIT 1",
        "schema": "CREATE TABLE candidate (Candidate_ID NUMBER); CREATE TABLE people (Sex TEXT, Height NUMBER, People_ID NUMBER, Name TEXT, Weight NUMBER);"
      }
    ],
    [
      {
        "question": "Which candidate was most supported | You mean the candidate who got the highest support rate? | yes which candidate was most popular",
        "query": "SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id = t2.people_id ORDER BY t2.support_rate DESC LIMIT 1",
        "schema": "CREATE TABLE candidate (Oppose_rate NUMBER, Support_rate NUMBER, Candidate_ID NUMBER, People_ID NUMBER); CREATE TABLE people (People_ID NUMBER, Name TEXT);"
      },
      {
        "question": "what was Vincent Montmeat's support rate",
        "query": "SELECT t2.support_rate FROM people AS t1 JOIN candidate AS t2 ON t1.people_id = t2.people_id WHERE t1.name = \"Vincent Montm\u00e9at\"",
        "schema": "CREATE TABLE candidate (Candidate_ID NUMBER, Support_rate NUMBER, People_ID NUMBER, Oppose_rate NUMBER); CREATE TABLE people (Name TEXT, People_ID NUMBER);"
      },
      {
        "question": "what was his opposition rate",
        "query": "SELECT t2.oppose_rate FROM people AS t1 JOIN candidate AS t2 ON t1.people_id = t2.people_id WHERE t1.name = \"Vincent Montm\u00e9at\"",
        "schema": "CREATE TABLE people (People_ID NUMBER, Name TEXT); CREATE TABLE candidate (People_ID NUMBER, Support_rate NUMBER, Oppose_rate NUMBER, Candidate_ID NUMBER);"
      }
    ],
    [
      {
        "question": "How many females are there?",
        "query": "SELECT COUNT ( * ) FROM people WHERE sex = \"F\"",
        "schema": "CREATE TABLE people (Sex TEXT, People_ID NUMBER); CREATE TABLE candidate (People_ID NUMBER);"
      },
      {
        "question": "How about males?",
        "query": "SELECT COUNT ( * ) FROM people WHERE sex = \"M\"",
        "schema": "CREATE TABLE people (Name TEXT, Sex TEXT, People_ID NUMBER); CREATE TABLE candidate (People_ID NUMBER);"
      },
      {
        "question": "What is the lowest oppose rate that male candidates have?",
        "query": "SELECT MIN ( oppose_rate ) FROM people AS t1 JOIN candidate AS t2 ON t1.people_id = t2.people_id WHERE t1.sex = \"M\"",
        "schema": "CREATE TABLE candidate (Candidate_ID NUMBER, Oppose_rate NUMBER, People_ID NUMBER); CREATE TABLE people (Sex TEXT, People_ID NUMBER, Name TEXT);"
      },
      {
        "question": "What's the name of the male candidate that has an oppose rate of 0.32?",
        "query": "SELECT name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id = t2.people_id WHERE t1.sex = \"M\" AND oppose_rate = 0.32",
        "schema": "CREATE TABLE candidate (Oppose_rate NUMBER, Candidate_ID NUMBER, People_ID NUMBER); CREATE TABLE people (Sex TEXT, People_ID NUMBER, Name TEXT);"
      },
      {
        "question": "Can you also show me the lowest oppose rate that female candidates have?",
        "query": "SELECT MIN ( oppose_rate ) FROM people AS t1 JOIN candidate AS t2 ON t1.people_id = t2.people_id WHERE t1.sex = \"F\"",
        "schema": "CREATE TABLE people (Name TEXT, Sex TEXT, People_ID NUMBER); CREATE TABLE candidate (Oppose_rate NUMBER, People_ID NUMBER, Candidate_ID NUMBER);"
      },
      {
        "question": "Can you show me the name of that female candidate?",
        "query": "SELECT name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id = t2.people_id WHERE t1.sex = \"F\" ORDER BY oppose_rate ASC LIMIT 1",
        "schema": "CREATE TABLE candidate (People_ID NUMBER, Candidate_ID NUMBER, Oppose_rate NUMBER); CREATE TABLE people (Name TEXT, People_ID NUMBER, Sex TEXT);"
      }
    ],
    [
      {
        "question": "What are the top 3 highest support rates?",
        "query": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "schema": "CREATE TABLE candidate (People_ID NUMBER, Support_rate NUMBER); CREATE TABLE people (People_ID NUMBER);"
      },
      {
        "question": "What are the poll sources of those support rates?",
        "query": "SELECT poll_source FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "schema": "CREATE TABLE people (People_ID NUMBER); CREATE TABLE candidate (People_ID NUMBER, Support_rate NUMBER, Poll_Source TEXT);"
      },
      {
        "question": "What are the dates for those support rates?",
        "query": "SELECT Date FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "schema": "CREATE TABLE people (People_ID NUMBER); CREATE TABLE candidate (Date TEXT, Poll_Source TEXT, Support_rate NUMBER, People_ID NUMBER);"
      },
      {
        "question": "What's the unsure rate of those?",
        "query": "SELECT unsure_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "schema": "CREATE TABLE people (People_ID NUMBER); CREATE TABLE candidate (People_ID NUMBER, Consider_rate NUMBER, Support_rate NUMBER, Unsure_rate NUMBER, Poll_Source TEXT, Date TEXT);"
      },
      {
        "question": "What are the consider rates of those?",
        "query": "SELECT consider_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "schema": "CREATE TABLE candidate (People_ID NUMBER, Consider_rate NUMBER, Date TEXT, Support_rate NUMBER, Poll_Source TEXT, Unsure_rate NUMBER); CREATE TABLE people (People_ID NUMBER);"
      },
      {
        "question": "What are the oppose rates of those?",
        "query": "SELECT oppose_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "schema": "CREATE TABLE candidate (Support_rate NUMBER, People_ID NUMBER, Consider_rate NUMBER, Date TEXT, Poll_Source TEXT, Unsure_rate NUMBER, Oppose_rate NUMBER); CREATE TABLE people (People_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Hello. How many people have a weight that is higher than 85?",
        "query": "SELECT COUNT ( * ) FROM people WHERE weight > 85",
        "schema": "CREATE TABLE candidate (Candidate_ID NUMBER, People_ID NUMBER); CREATE TABLE people (Name TEXT, People_ID NUMBER, Weight NUMBER, Height NUMBER);"
      },
      {
        "question": "Out of those 6 people, how many of them are female?",
        "query": "SELECT COUNT ( * ) FROM people WHERE weight > 85 AND sex = \"F\"",
        "schema": "CREATE TABLE people (People_ID NUMBER, Sex TEXT, Name TEXT, Height NUMBER, Weight NUMBER); CREATE TABLE candidate (Candidate_ID NUMBER, People_ID NUMBER);"
      },
      {
        "question": "How many of them are male?",
        "query": "SELECT COUNT ( * ) FROM people WHERE weight > 85 AND sex = \"M\"",
        "schema": "CREATE TABLE people (Sex TEXT, Height NUMBER, Weight NUMBER, People_ID NUMBER, Name TEXT); CREATE TABLE candidate (People_ID NUMBER, Candidate_ID NUMBER);"
      }
    ]
  ],
  "ship_mission": [
    [
      {
        "question": "Show the names  of all ships from United States?",
        "query": "SELECT name FROM ship WHERE nationality = \"United States\"",
        "schema": "CREATE TABLE ship (Name TEXT, Ship_ID NUMBER, Nationality TEXT);"
      },
      {
        "question": "Show the names of all ships from United Kingdom?",
        "query": "SELECT name FROM ship WHERE nationality = \"United Kingdom\"",
        "schema": "CREATE TABLE ship (Ship_ID NUMBER, Nationality TEXT, Name TEXT);"
      },
      {
        "question": "What type of ship is the Corbridge ?",
        "query": "SELECT TYPE FROM ship WHERE name = \"Corbridge\"",
        "schema": "CREATE TABLE ship (Ship_ID NUMBER, Name TEXT, Type TEXT, Nationality TEXT);"
      },
      {
        "question": "What is the tonnage of the Corbridge ?",
        "query": "SELECT tonnage FROM ship WHERE name = \"Corbridge\"",
        "schema": "CREATE TABLE ship (Tonnage NUMBER, Type TEXT, Nationality TEXT, Name TEXT, Ship_ID NUMBER);"
      },
      {
        "question": "What is the name of the ship with 3146 tonnage ?",
        "query": "SELECT name FROM ship WHERE tonnage = \"3146\"",
        "schema": "CREATE TABLE ship (Name TEXT, Tonnage NUMBER, Nationality TEXT, Ship_ID NUMBER, Type TEXT);"
      },
      {
        "question": "What is the name of the ship with the most tonnage ?",
        "query": "SELECT name FROM ship ORDER BY tonnage DESC LIMIT 1",
        "schema": "CREATE TABLE ship (Type TEXT, Ship_ID NUMBER, Tonnage NUMBER, Name TEXT, Nationality TEXT);"
      },
      {
        "question": "How many different types of ships are there ?",
        "query": "SELECT COUNT ( DISTINCT TYPE ) FROM ship",
        "schema": "CREATE TABLE ship (Ship_ID NUMBER, Name TEXT, Type TEXT, Tonnage NUMBER, Nationality TEXT);"
      }
    ],
    [
      {
        "question": "List the name of ships that are not involved in any mission",
        "query": "SELECT name FROM ship WHERE ship_id NOT IN ( SELECT ship_id FROM mission )",
        "schema": "CREATE TABLE ship (Name TEXT, Ship_ID NUMBER, Type TEXT); CREATE TABLE mission (Ship_ID NUMBER, Mission_ID NUMBER);"
      },
      {
        "question": "Which ships have been decommissioned?",
        "query": "SELECT ship_id FROM mission WHERE fate like '%Decommissioned%'",
        "schema": "CREATE TABLE mission (Ship_ID NUMBER, Fate TEXT, Code TEXT, Mission_ID NUMBER); CREATE TABLE ship (Name TEXT, Type TEXT, Ship_ID NUMBER);"
      },
      {
        "question": "Give me the names of ships that have been decommissioned",
        "query": "SELECT name FROM ship WHERE ship_id IN ( SELECT ship_id FROM mission WHERE fate like '%Decommissioned%' )",
        "schema": "CREATE TABLE mission (Mission_ID NUMBER, Fate TEXT, Code TEXT, Ship_ID NUMBER); CREATE TABLE ship (Name TEXT, Ship_ID NUMBER, Type TEXT);"
      }
    ],
    [
      {
        "question": "Show the types of ships that have both ships with tonnage larger than 6000 and ships with tonnage smaller than 4000.",
        "query": "SELECT TYPE FROM ship WHERE tonnage > 6000 INTERSECT SELECT TYPE FROM ship WHERE tonnage < 4000",
        "schema": "CREATE TABLE ship (Tonnage NUMBER, Ship_ID NUMBER, Type TEXT);"
      },
      {
        "question": "Show the types of ships with tonnage between 3000 and 5000.",
        "query": "SELECT DISTINCT TYPE FROM ship WHERE tonnage > 3000 AND tonnage<5000",
        "schema": "CREATE TABLE ship (Tonnage NUMBER, Type TEXT, Ship_ID NUMBER);"
      },
      {
        "question": "What is the nationality of the ship with maximum tonnage?",
        "query": "SELECT nationality FROM ship ORDER BY tonnage DESC LIMIT 1",
        "schema": "CREATE TABLE ship (Type TEXT, Ship_ID NUMBER, Tonnage NUMBER, Nationality TEXT);"
      },
      {
        "question": "Can you give me the nationality of the ship with minimum tonnage.",
        "query": "SELECT nationality FROM ship ORDER BY tonnage LIMIT 1",
        "schema": "CREATE TABLE ship (Type TEXT, Ship_ID NUMBER, Nationality TEXT, Tonnage NUMBER);"
      },
      {
        "question": "What is the maximum and the minimum tonnage for a cargo ship?",
        "query": "SELECT MAX ( tonnage ) ,MIN ( tonnage ) FROM ship WHERE TYPE = 'Cargo ship'",
        "schema": "CREATE TABLE ship (Ship_ID NUMBER, Type TEXT, Nationality TEXT, Tonnage NUMBER);"
      },
      {
        "question": "Hmmm. Can you also give me the maximum and the minimum tonnage for a battle ship?",
        "query": "SELECT MAX ( tonnage ) ,MIN ( tonnage ) FROM ship WHERE TYPE = 'Battle ship'",
        "schema": "CREATE TABLE ship (Tonnage NUMBER, Type TEXT, Name TEXT, Nationality TEXT, Ship_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Hello!  How are you!  Can you tell me how many missions there are in total?",
        "query": "SELECT COUNT ( * ) FROM mission",
        "schema": "CREATE TABLE mission (Mission_ID NUMBER, Fate TEXT, Ship_ID NUMBER, Code TEXT, Location TEXT);"
      },
      {
        "question": "Great! Can you filter this list to show only the mission that involved ships from the United States?",
        "query": "SELECT t1.fate FROM mission AS t1 JOIN ship AS t2 ON t1.ship_id = t2.ship_id WHERE t2.nationality = \"United States\"",
        "schema": "CREATE TABLE mission (Ship_ID NUMBER, Fate TEXT, Mission_ID NUMBER, Code TEXT, Location TEXT); CREATE TABLE ship (Ship_ID NUMBER, Nationality TEXT, Name TEXT);"
      },
      {
        "question": "Great! Could you update this list to show all of the mission IDs?",
        "query": "SELECT t1.fate, t1.mission_id FROM mission AS t1 JOIN ship AS t2 ON t1.ship_id = t2.ship_id WHERE t2.nationality = \"United States\"",
        "schema": "CREATE TABLE mission (Fate TEXT, Code TEXT, Mission_ID NUMBER, Ship_ID NUMBER, Location TEXT); CREATE TABLE ship (Ship_ID NUMBER, Name TEXT, Nationality TEXT);"
      }
    ],
    [
      {
        "question": "How many ships does United Kingdom have?",
        "query": "SELECT nationality,COUNT ( * ) FROM ship WHERE nationality = 'United Kingdom' GROUP BY nationality",
        "schema": "CREATE TABLE ship (Type TEXT, Ship_ID NUMBER, Tonnage NUMBER, Name TEXT, Nationality TEXT); CREATE TABLE mission (Ship_ID NUMBER);"
      },
      {
        "question": "Which other country has more than 2 ships?",
        "query": "SELECT nationality FROM ship WHERE nationality ! = 'United Kingdom' GROUP BY nationality HAVING COUNT ( * ) > 2",
        "schema": "CREATE TABLE mission (Ship_ID NUMBER); CREATE TABLE ship (Type TEXT, Name TEXT, Ship_ID NUMBER, Nationality TEXT, Tonnage NUMBER);"
      },
      {
        "question": "What type of ships does United States have?",
        "query": "SELECT DISTINCT TYPE FROM ship WHERE nationality = 'United States'",
        "schema": "CREATE TABLE mission (Ship_ID NUMBER); CREATE TABLE ship (Name TEXT, Ship_ID NUMBER, Tonnage NUMBER, Nationality TEXT, Type TEXT);"
      },
      {
        "question": "What about United Kingdom's type of ships?",
        "query": "SELECT DISTINCT TYPE FROM ship WHERE nationality = 'United Kingdom'",
        "schema": "CREATE TABLE mission (Ship_ID NUMBER); CREATE TABLE ship (Nationality TEXT, Type TEXT, Ship_ID NUMBER, Tonnage NUMBER, Name TEXT);"
      }
    ],
    [
      {
        "question": "How many ships are there?",
        "query": "SELECT COUNT ( * ) FROM ship",
        "schema": "CREATE TABLE mission (Ship_ID NUMBER); CREATE TABLE ship (Name TEXT, Ship_ID NUMBER, Type TEXT);"
      },
      {
        "question": "What are their nationalities?",
        "query": "SELECT nationality FROM ship",
        "schema": "CREATE TABLE ship (Name TEXT, Type TEXT, Nationality TEXT, Ship_ID NUMBER); CREATE TABLE mission (Ship_ID NUMBER);"
      },
      {
        "question": "What is the name of the ship with the largest tonnage?",
        "query": "SELECT name FROM ship ORDER BY tonnage DESC LIMIT 1",
        "schema": "CREATE TABLE mission (Ship_ID NUMBER); CREATE TABLE ship (Tonnage NUMBER, Type TEXT, Nationality TEXT, Name TEXT, Ship_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show the most common type of ships",
        "query": "SELECT TYPE FROM ship GROUP BY TYPE ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE ship (Ship_ID NUMBER, Type TEXT, Name TEXT);"
      }
    ],
    [
      {
        "question": "show names of ships involved in a mission launched after 1928.",
        "query": "SELECT t2.name FROM mission AS t1 JOIN ship AS t2 ON t1.ship_id = t2.ship_id WHERE t1.launched_year > 1928",
        "schema": "CREATE TABLE ship (Ship_ID NUMBER, Name TEXT); CREATE TABLE mission (Mission_ID NUMBER, Launched_Year NUMBER, Ship_ID NUMBER, Code TEXT);"
      },
      {
        "question": "which ships were lost?",
        "query": "SELECT * FROM mission AS t1 JOIN ship AS t2 ON t1.ship_id = t2.ship_id WHERE t1.fate Like \"%Lost%\"",
        "schema": "CREATE TABLE ship (Ship_ID NUMBER, Name TEXT); CREATE TABLE mission (Code TEXT, Mission_ID NUMBER, Launched_Year NUMBER, Fate TEXT, Ship_ID NUMBER);"
      },
      {
        "question": "which among them was the biggest?",
        "query": "SELECT * FROM mission AS t1 JOIN ship AS t2 ON t1.ship_id = t2.ship_id WHERE t1.fate Like \"%Lost%\" ORDER BY t2.tonnage DESC LIMIT 1",
        "schema": "CREATE TABLE mission (Mission_ID NUMBER, Launched_Year NUMBER, Code TEXT, Fate TEXT, Ship_ID NUMBER); CREATE TABLE ship (Name TEXT, Tonnage NUMBER, Ship_ID NUMBER);"
      }
    ]
  ],
  "school_player": [
    [
      {
        "question": "how many player are presented on the table | Did you mean to ask for the number of entries in the table player? | exactly",
        "query": "SELECT COUNT ( * ) FROM player",
        "schema": "CREATE TABLE player (Player_ID NUMBER, Player TEXT);"
      },
      {
        "question": "list out the player",
        "query": "SELECT player FROM player",
        "schema": "CREATE TABLE player (Player_ID NUMBER, Player TEXT);"
      },
      {
        "question": "what is the age of Timothy Beckham",
        "query": "SELECT age FROM player WHERE player = \"Timothy Beckham\"",
        "schema": "CREATE TABLE player (Player_ID NUMBER, Age NUMBER, Player TEXT);"
      },
      {
        "question": "what is the position of Pedro \u00c1lvarez",
        "query": "SELECT POSITION FROM player WHERE player = \"Pedro \u00c1lvarez\"",
        "schema": "CREATE TABLE player (Player_ID NUMBER, Age NUMBER, Player TEXT, Position TEXT);"
      }
    ],
    [
      {
        "question": "Show the School name with School_ID 1?",
        "query": "SELECT school FROM school WHERE school_id = '1'",
        "schema": "CREATE TABLE player (School_ID NUMBER); CREATE TABLE school (School TEXT, School_ID NUMBER); CREATE TABLE school_performance (School_Id NUMBER); CREATE TABLE school_details (School_ID NUMBER);"
      },
      {
        "question": "Show the denomination shared by more than one school?",
        "query": "SELECT denomination FROM school GROUP BY denomination HAVING COUNT ( * ) > 1",
        "schema": "CREATE TABLE school (School TEXT, School_ID NUMBER, Denomination TEXT); CREATE TABLE school_details (School_ID NUMBER); CREATE TABLE player (School_ID NUMBER); CREATE TABLE school_performance (School_Id NUMBER);"
      },
      {
        "question": "Show the Location of Barker College?",
        "query": "SELECT LOCATION FROM school WHERE school = 'Barker College'",
        "schema": "CREATE TABLE school_details (School_ID NUMBER); CREATE TABLE school (Location TEXT, School TEXT, Denomination TEXT, School_ID NUMBER); CREATE TABLE school_performance (School_Id NUMBER); CREATE TABLE player (School_ID NUMBER);"
      },
      {
        "question": "Show the names of schools with only girls?",
        "query": "SELECT school FROM school WHERE boys_or_girls = 'Girls'",
        "schema": "CREATE TABLE player (School_ID NUMBER); CREATE TABLE school_performance (School_Id NUMBER); CREATE TABLE school (School_ID NUMBER, Boys_or_Girls TEXT, Location TEXT, School TEXT, Denomination TEXT); CREATE TABLE school_details (School_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Which team of players has the smallest age? | Did you mean to ask for the team of the player with the smallest age? | yes",
        "query": "SELECT team FROM player ORDER BY age LIMIT 1",
        "schema": "CREATE TABLE player (Player_ID NUMBER, Team TEXT, Age NUMBER, Player TEXT);"
      },
      {
        "question": "Which team does Timothy Beckham play for?",
        "query": "SELECT team FROM player WHERE player = \"Timothy Beckham\"",
        "schema": "CREATE TABLE player (Player_ID NUMBER, Team TEXT, Player TEXT, Age NUMBER);"
      },
      {
        "question": "How old is he and what position does he play?",
        "query": "SELECT age, POSITION FROM player WHERE player = \"Timothy Beckham\"",
        "schema": "CREATE TABLE player (Team TEXT, Position TEXT, Player TEXT, Age NUMBER, Player_ID NUMBER);"
      },
      {
        "question": "What position does Eric Hosmer play?",
        "query": "SELECT POSITION FROM player WHERE player = \"Eric Hosmer\"",
        "schema": "CREATE TABLE player (Age NUMBER, Team TEXT, Position TEXT, Player_ID NUMBER, Player TEXT);"
      }
    ],
    [
      {
        "question": "What schools were founded before 1890?",
        "query": "SELECT school FROM school WHERE founded < 1890",
        "schema": "CREATE TABLE school_details (School_ID NUMBER); CREATE TABLE school (Year_Entered_Competition NUMBER, School_ID NUMBER, Denomination TEXT, Founded NUMBER, School TEXT); CREATE TABLE player (School_ID NUMBER);"
      },
      {
        "question": "What was its denomination?",
        "query": "SELECT denomination FROM school WHERE founded < 1890",
        "schema": "CREATE TABLE player (School_ID NUMBER); CREATE TABLE school (Denomination TEXT, School_ID NUMBER, Year_Entered_Competition NUMBER, Founded NUMBER, School TEXT); CREATE TABLE school_details (School_ID NUMBER);"
      },
      {
        "question": "What schools were founded after 1900?",
        "query": "SELECT school FROM school WHERE founded > 1900",
        "schema": "CREATE TABLE player (School_ID NUMBER); CREATE TABLE school_details (School_ID NUMBER); CREATE TABLE school (Denomination TEXT, School_ID NUMBER, Founded NUMBER, Year_Entered_Competition NUMBER, School TEXT);"
      },
      {
        "question": "What were their denominations?",
        "query": "SELECT denomination FROM school WHERE founded > 1900",
        "schema": "CREATE TABLE school (Founded NUMBER, Year_Entered_Competition NUMBER, Denomination TEXT, School_ID NUMBER, School TEXT); CREATE TABLE player (School_ID NUMBER); CREATE TABLE school_details (School_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Which schools have more than 1 player?",
        "query": "SELECT t2.school FROM player AS t1 JOIN school AS t2 ON t1.school_id = t2.school_id GROUP BY t1.school_id HAVING COUNT ( * ) > 1",
        "schema": "CREATE TABLE school_details (School_ID NUMBER); CREATE TABLE school_performance (School_Id NUMBER); CREATE TABLE school (School TEXT, Denomination TEXT, Boys_or_Girls TEXT, School_ID NUMBER); CREATE TABLE player (School_ID NUMBER);"
      },
      {
        "question": "Okay, and where are the locations of each school?",
        "query": "SELECT t2.school, t2.location FROM player AS t1 JOIN school AS t2 ON t1.school_id = t2.school_id GROUP BY t1.school_id HAVING COUNT ( * ) > 1",
        "schema": "CREATE TABLE school_performance (School_Id NUMBER); CREATE TABLE school (Denomination TEXT, Location TEXT, School TEXT, School_ID NUMBER, Boys_or_Girls TEXT); CREATE TABLE player (School_ID NUMBER); CREATE TABLE school_details (School_ID NUMBER);"
      }
    ],
    [
      {
        "question": "what is the high enrollment of school | Are you asking the highest enrollment number for all schools? | exactly",
        "query": "SELECT MAX ( enrollment ) FROM school",
        "schema": "CREATE TABLE school (School TEXT, School_ID NUMBER, Enrollment NUMBER); CREATE TABLE school_details (School_ID NUMBER); CREATE TABLE player (School_ID NUMBER);"
      },
      {
        "question": "what is the school color of barker college",
        "query": "SELECT school_colors FROM school WHERE school = \"Barker College\"",
        "schema": "CREATE TABLE school (Enrollment NUMBER, School_ID NUMBER, Location TEXT, School TEXT, School_Colors TEXT); CREATE TABLE school_details (Colors TEXT, School_ID NUMBER); CREATE TABLE player (School_ID NUMBER);"
      },
      {
        "question": "what is the enrollment of cranbrook school",
        "query": "SELECT enrollment FROM school WHERE school = \"Cranbrook School\"",
        "schema": "CREATE TABLE school_details (Colors TEXT, School_ID NUMBER); CREATE TABLE player (School_ID NUMBER); CREATE TABLE school (Location TEXT, Enrollment NUMBER, School_ID NUMBER, School TEXT, School_Colors TEXT);"
      },
      {
        "question": "which school is hightest founded | Do you mean the school that is founded earliest? | exactly",
        "query": "SELECT school FROM school ORDER BY founded LIMIT 1",
        "schema": "CREATE TABLE school_details (School_ID NUMBER, Colors TEXT); CREATE TABLE school (Enrollment NUMBER, School_Colors TEXT, Location TEXT, School TEXT, School_ID NUMBER, Founded NUMBER); CREATE TABLE player (School_ID NUMBER);"
      }
    ]
  ],
  "epinions_1": [
    [
      {
        "question": "What is the name of the good with the highest average rank?",
        "query": "SELECT t1.title FROM item AS t1 JOIN review AS t2 ON t1.i_id = t2.i_id GROUP BY t2.i_id ORDER BY AVG ( t2.rank ) DESC LIMIT 1",
        "schema": "CREATE TABLE item (i_id NUMBER, title TEXT); CREATE TABLE review (a_id NUMBER, rank NUMBER, i_id NUMBER, rating NUMBER);"
      },
      {
        "question": "What is the ID of cup?",
        "query": "SELECT i_id FROM item WHERE title = \"cup\"",
        "schema": "CREATE TABLE item (i_id NUMBER, title TEXT); CREATE TABLE review (rank NUMBER, a_id NUMBER, i_id NUMBER, rating NUMBER);"
      },
      {
        "question": "Now, can you please tell me the name and id of the good with the highest average rank?",
        "query": "SELECT t1.title , t1.i_id FROM item AS t1 JOIN review AS t2 ON t1.i_id = t2.i_id GROUP BY t2.i_id ORDER BY AVG ( t2.rank ) DESC LIMIT 1",
        "schema": "CREATE TABLE item (title TEXT, i_id NUMBER); CREATE TABLE review (rating NUMBER, a_id NUMBER, rank NUMBER, i_id NUMBER);"
      }
    ],
    [
      {
        "question": "for which user id rating is high | did you mean for which user id is the rating highest? | ok, find user id who gives the rating 10",
        "query": "SELECT t1.u_id FROM useracct AS t1 JOIN review AS t2 ON t1.u_id = t2.u_id WHERE t2.rating = 10",
        "schema": "CREATE TABLE useracct (name TEXT, u_id NUMBER); CREATE TABLE review (u_id NUMBER, rating NUMBER, a_id NUMBER);"
      },
      {
        "question": "find the name of the user who gives most reviews",
        "query": "SELECT t1.name FROM useracct AS t1 JOIN review AS t2 ON t1.u_id = t2.u_id GROUP BY t2.u_id ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE useracct (name TEXT, u_id NUMBER); CREATE TABLE review (a_id NUMBER, u_id NUMBER, rating NUMBER);"
      },
      {
        "question": "find the name of the user who gives 1 rank",
        "query": "SELECT t1.name FROM useracct AS t1 JOIN review AS t2 ON t1.u_id = t2.u_id WHERE t2.rank = 1",
        "schema": "CREATE TABLE useracct (u_id NUMBER, name TEXT); CREATE TABLE review (a_id NUMBER, rank NUMBER, u_id NUMBER, rating NUMBER);"
      }
    ],
    [
      {
        "question": "Can you please tell me the names of the items that did not receive any reviews?",
        "query": "SELECT title FROM item WHERE i_id NOT IN ( SELECT i_id FROM review )",
        "schema": "CREATE TABLE review (a_id NUMBER, i_id NUMBER); CREATE TABLE item (title TEXT, i_id NUMBER);"
      },
      {
        "question": "What are their item IDs?",
        "query": "SELECT i_id FROM item WHERE i_id NOT IN ( SELECT i_id FROM review )",
        "schema": "CREATE TABLE review (a_id NUMBER, i_id NUMBER); CREATE TABLE item (i_id NUMBER, title TEXT);"
      },
      {
        "question": "How many items did receive reviews?",
        "query": "SELECT COUNT ( DISTINCT i_id ) FROM review",
        "schema": "CREATE TABLE review (i_id NUMBER, a_id NUMBER); CREATE TABLE item (i_id NUMBER, title TEXT);"
      },
      {
        "question": "What are their item ids?",
        "query": "SELECT DISTINCT ( i_id ) FROM review",
        "schema": "CREATE TABLE review (a_id NUMBER, i_id NUMBER); CREATE TABLE item (i_id NUMBER, title TEXT);"
      },
      {
        "question": "What is the rating of item id 3?",
        "query": "SELECT rating FROM review WHERE i_id = 3",
        "schema": "CREATE TABLE review (i_id NUMBER, rating NUMBER, a_id NUMBER); CREATE TABLE item (i_id NUMBER, title TEXT);"
      }
    ],
    [
      {
        "question": "Hello!  Can you provide me with a list of all product IDs and the associated product titles? | Are you asking for all item IDs and their corresponding item titles? | Yes!  That is correct!",
        "query": "SELECT i_id, title FROM item",
        "schema": "CREATE TABLE item (title TEXT, i_id NUMBER); CREATE TABLE review (i_id NUMBER);"
      },
      {
        "question": "Thank you!  Can you filter that list to show only the entries with a rank that is higher than 3 please? | Are you looking for ranks that are better than 3 or higher in value than 3? | I would like to filter the list to show the entries which have a rank value that is higher than 3 please.",
        "query": "SELECT t1.title, t1.i_id FROM item AS t1 JOIN review AS t2 ON t1.i_id = t2.i_id WHERE t2.rank > 3",
        "schema": "CREATE TABLE item (title TEXT, i_id NUMBER); CREATE TABLE review (i_id NUMBER, rank NUMBER);"
      },
      {
        "question": "Excellent.  Can you  include to this list the review rating for each of these items?",
        "query": "SELECT t1.title, t1.i_id, rating FROM item AS t1 JOIN review AS t2 ON t1.i_id = t2.i_id WHERE t2.rank > 3",
        "schema": "CREATE TABLE item (title TEXT, i_id NUMBER); CREATE TABLE review (rank NUMBER, rating NUMBER, i_id NUMBER);"
      }
    ],
    [
      {
        "question": "What is the used id 1? | Do you mean what is the name of the user with id 1? | yes",
        "query": "SELECT name FROM useracct WHERE u_id = 1",
        "schema": "CREATE TABLE review (u_id NUMBER); CREATE TABLE useracct (u_id NUMBER, name TEXT);"
      },
      {
        "question": "What is the name of user id 3?",
        "query": "SELECT name FROM useracct WHERE u_id = 3",
        "schema": "CREATE TABLE useracct (name TEXT, u_id NUMBER); CREATE TABLE review (u_id NUMBER);"
      },
      {
        "question": "What is the rank of user id 3?",
        "query": "SELECT t2.rank FROM useracct AS t1 JOIN review AS t2 ON t1.u_id = t2.u_id WHERE t2.u_id = 3",
        "schema": "CREATE TABLE useracct (name TEXT, u_id NUMBER); CREATE TABLE review (rank NUMBER, u_id NUMBER, rating NUMBER);"
      },
      {
        "question": "What is the average rating of reviews of user id1?",
        "query": "SELECT AVG ( t2.rating ) FROM useracct WHERE t2.u_id = 1 AS t1 JOIN review AS t2 ON t1.u_id = t2.u_id GROUP BY t2.u_id",
        "schema": "CREATE TABLE review (rank NUMBER, u_id NUMBER, rating NUMBER); CREATE TABLE useracct (u_id NUMBER, name TEXT);"
      },
      {
        "question": "Find out the average rating of every user?",
        "query": "SELECT t1.name , AVG ( t2.rating ) FROM useracct AS t1 JOIN review AS t2 ON t1.u_id = t2.u_id GROUP BY t2.u_id",
        "schema": "CREATE TABLE useracct (name TEXT, u_id NUMBER); CREATE TABLE review (rank NUMBER, a_id NUMBER, u_id NUMBER, rating NUMBER);"
      }
    ],
    [
      {
        "question": "can you show me useracct name? | Would you like a list of the names of the users? | yes",
        "query": "SELECT name FROM useracct",
        "schema": "CREATE TABLE useracct (u_id NUMBER, name TEXT); CREATE TABLE review (u_id NUMBER);"
      },
      {
        "question": "can you show me target user id | Would you like a list of all the target user id? | yes",
        "query": "SELECT target_u_id FROM trust",
        "schema": "CREATE TABLE review (u_id NUMBER); CREATE TABLE trust (source_u_id NUMBER, target_u_id NUMBER); CREATE TABLE useracct (name TEXT, u_id NUMBER);"
      }
    ],
    [
      {
        "question": "What is item number 4?",
        "query": "SELECT * FROM item WHERE i_id = 4",
        "schema": "CREATE TABLE useracct (u_id NUMBER, name TEXT); CREATE TABLE review (a_id NUMBER, i_id NUMBER, u_id NUMBER); CREATE TABLE item (title TEXT, i_id NUMBER);"
      },
      {
        "question": "What is the avocado's rating?",
        "query": "SELECT rating FROM review WHERE i_id = ( SELECT i_id FROM item WHERE title = \"avocado\" )",
        "schema": "CREATE TABLE review (i_id NUMBER, rating NUMBER, u_id NUMBER, a_id NUMBER); CREATE TABLE item (title TEXT, i_id NUMBER); CREATE TABLE useracct (u_id NUMBER, name TEXT);"
      },
      {
        "question": "And what about the avocado's rank?",
        "query": "SELECT rank FROM review WHERE i_id = ( SELECT i_id FROM item WHERE title = \"avocado\" )",
        "schema": "CREATE TABLE useracct (u_id NUMBER, name TEXT); CREATE TABLE item (title TEXT, i_id NUMBER); CREATE TABLE review (u_id NUMBER, rank NUMBER, i_id NUMBER, rating NUMBER, a_id NUMBER);"
      }
    ],
    [
      {
        "question": "How many users did not leave a review?",
        "query": "SELECT name FROM useracct WHERE u_id NOT IN ( SELECT u_id FROM review )",
        "schema": "CREATE TABLE review (u_id NUMBER, a_id NUMBER, i_id NUMBER); CREATE TABLE useracct (u_id NUMBER, name TEXT);"
      },
      {
        "question": "Can you list out their names?",
        "query": "SELECT name FROM useracct WHERE u_id NOT IN ( SELECT u_id FROM review )",
        "schema": "CREATE TABLE review (i_id NUMBER, a_id NUMBER, u_id NUMBER); CREATE TABLE useracct (name TEXT, u_id NUMBER);"
      },
      {
        "question": "And the users who did not?",
        "query": "SELECT name FROM useracct WHERE u_id NOT IN ( SELECT u_id FROM review )",
        "schema": "CREATE TABLE useracct (name TEXT, u_id NUMBER); CREATE TABLE review (u_id NUMBER, i_id NUMBER, a_id NUMBER);"
      },
      {
        "question": "How many reviews did we receive?",
        "query": "SELECT COUNT ( * ) FROM review",
        "schema": "CREATE TABLE useracct (u_id NUMBER, name TEXT); CREATE TABLE review (i_id NUMBER, a_id NUMBER, rating NUMBER, u_id NUMBER);"
      },
      {
        "question": "How many of the reviews have a rating greater than or equal to 5?",
        "query": "SELECT COUNT ( * ) FROM review WHERE rating > = 5",
        "schema": "CREATE TABLE useracct (u_id NUMBER, name TEXT); CREATE TABLE review (i_id NUMBER, a_id NUMBER, u_id NUMBER, rating NUMBER);"
      }
    ],
    [
      {
        "question": "what are the items with highest average rating | Do you mean the the title of the item with the highest average rating? | yes, title of the item with highest average rating",
        "query": "SELECT t1.title FROM item AS t1 JOIN review AS t2 ON t1.i_id = t2.i_id GROUP BY t2.i_id ORDER BY AVG ( t2.rating ) DESC LIMIT 1",
        "schema": "CREATE TABLE item (title TEXT, i_id NUMBER); CREATE TABLE review (rating NUMBER, i_id NUMBER);"
      },
      {
        "question": "what is the id of cup",
        "query": "SELECT i_id FROM item WHERE title = 'cup'",
        "schema": "CREATE TABLE review (rating NUMBER, i_id NUMBER, a_id NUMBER); CREATE TABLE item (i_id NUMBER, title TEXT);"
      }
    ],
    [
      {
        "question": "What is the name of the item with the highest average rating?",
        "query": "SELECT t1.title FROM item AS t1 JOIN review AS t2 ON t1.i_id = t2.i_id GROUP BY t2.i_id ORDER BY AVG ( t2.rating ) DESC LIMIT 1",
        "schema": "CREATE TABLE review (rating NUMBER, i_id NUMBER, a_id NUMBER); CREATE TABLE item (i_id NUMBER, title TEXT);"
      },
      {
        "question": "What is its id?",
        "query": "SELECT t1.i_id FROM item AS t1 JOIN review AS t2 ON t1.i_id = t2.i_id GROUP BY t2.i_id ORDER BY AVG ( t2.rating ) DESC LIMIT 1",
        "schema": "CREATE TABLE item (title TEXT, i_id NUMBER); CREATE TABLE review (rating NUMBER, a_id NUMBER, i_id NUMBER);"
      },
      {
        "question": "What is the name of the item with the lowest average rating?",
        "query": "SELECT t1.title FROM item AS t1 JOIN review AS t2 ON t1.i_id = t2.i_id GROUP BY t2.i_id ORDER BY AVG ( t2.rating ) LIMIT 1",
        "schema": "CREATE TABLE item (i_id NUMBER, title TEXT); CREATE TABLE review (rating NUMBER, a_id NUMBER, i_id NUMBER);"
      },
      {
        "question": "What is its item id?",
        "query": "SELECT t1.i_id FROM item AS t1 JOIN review AS t2 ON t1.i_id = t2.i_id GROUP BY t2.i_id ORDER BY AVG ( t2.rating ) LIMIT 1",
        "schema": "CREATE TABLE item (title TEXT, i_id NUMBER); CREATE TABLE review (rating NUMBER, a_id NUMBER, i_id NUMBER);"
      },
      {
        "question": "What item names have a rating of 5?",
        "query": "SELECT t1.title FROM item AS t1 JOIN review AS t2 ON t1.i_id = t2.i_id WHERE rating = 5",
        "schema": "CREATE TABLE review (i_id NUMBER, a_id NUMBER, rating NUMBER); CREATE TABLE item (i_id NUMBER, title TEXT);"
      }
    ],
    [
      {
        "question": "What is the user id of Helen",
        "query": "SELECT u_id FROM useracct WHERE name = \"Helen\"",
        "schema": "CREATE TABLE useracct (name TEXT, u_id NUMBER); CREATE TABLE review (a_id NUMBER, u_id NUMBER, i_id NUMBER);"
      },
      {
        "question": "What is Helen rating?",
        "query": "SELECT t2.rating FROM useracct AS t1 JOIN review AS t2 ON t1.u_id = t2.u_id WHERE t1.name = 'Helen'",
        "schema": "CREATE TABLE useracct (u_id NUMBER, name TEXT); CREATE TABLE review (u_id NUMBER, a_id NUMBER, rating NUMBER, i_id NUMBER);"
      },
      {
        "question": "And what is helen rank",
        "query": "SELECT t2.rank FROM useracct AS t1 JOIN review AS t2 ON t1.u_id = t2.u_id WHERE t1.name = 'Helen'",
        "schema": "CREATE TABLE review (a_id NUMBER, rating NUMBER, u_id NUMBER, rank NUMBER, i_id NUMBER); CREATE TABLE useracct (name TEXT, u_id NUMBER);"
      },
      {
        "question": "What is helen item id",
        "query": "SELECT t2.i_id FROM useracct AS t1 JOIN review AS t2 ON t1.u_id = t2.u_id WHERE t1.name = 'Helen'",
        "schema": "CREATE TABLE useracct (u_id NUMBER, name TEXT); CREATE TABLE item (title TEXT, i_id NUMBER); CREATE TABLE review (a_id NUMBER, u_id NUMBER, rank NUMBER, i_id NUMBER, rating NUMBER);"
      },
      {
        "question": "How about her a id",
        "query": "SELECT t2.a_id FROM useracct AS t1 JOIN review AS t2 ON t1.u_id = t2.u_id WHERE t1.name = 'Helen'",
        "schema": "CREATE TABLE review (i_id NUMBER, rating NUMBER, u_id NUMBER, a_id NUMBER, rank NUMBER); CREATE TABLE useracct (u_id NUMBER, name TEXT); CREATE TABLE item (title TEXT, i_id NUMBER);"
      },
      {
        "question": "Who gave the most reviews",
        "query": "SELECT t1.name FROM useracct AS t1 JOIN review AS t2 ON t1.u_id = t2.u_id GROUP BY t2.u_id ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE useracct (u_id NUMBER, name TEXT); CREATE TABLE review (rank NUMBER, u_id NUMBER, a_id NUMBER, rating NUMBER, i_id NUMBER); CREATE TABLE item (i_id NUMBER, title TEXT);"
      },
      {
        "question": "How many review did he have",
        "query": "SELECT COUNT ( * ) FROM useracct AS t1 JOIN review AS t2 ON t1.u_id = t2.u_id GROUP BY t2.u_id ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE useracct (u_id NUMBER, name TEXT); CREATE TABLE item (i_id NUMBER, title TEXT); CREATE TABLE review (i_id NUMBER, a_id NUMBER, rank NUMBER, rating NUMBER, u_id NUMBER);"
      },
      {
        "question": "Yes what is mark rank?",
        "query": "SELECT t2.rank FROM useracct AS t1 JOIN review AS t2 ON t1.u_id = t2.u_id WHERE t1.name = 'Mark'",
        "schema": "CREATE TABLE review (rating NUMBER, u_id NUMBER, i_id NUMBER, rank NUMBER, a_id NUMBER); CREATE TABLE item (i_id NUMBER, title TEXT); CREATE TABLE useracct (name TEXT, u_id NUMBER);"
      },
      {
        "question": "What is matk user id",
        "query": "SELECT u_id FROM useracct WHERE name = 'Mark'",
        "schema": "CREATE TABLE review (a_id NUMBER, rank NUMBER, rating NUMBER, i_id NUMBER, u_id NUMBER); CREATE TABLE useracct (name TEXT, u_id NUMBER); CREATE TABLE item (title TEXT, i_id NUMBER);"
      },
      {
        "question": "What is his a id",
        "query": "SELECT t2.a_id FROM useracct AS t1 JOIN review AS t2 ON t1.u_id = t2.u_id WHERE t1.name = 'Mark'",
        "schema": "CREATE TABLE item (i_id NUMBER, title TEXT); CREATE TABLE useracct (name TEXT, u_id NUMBER); CREATE TABLE review (rating NUMBER, i_id NUMBER, u_id NUMBER, a_id NUMBER, rank NUMBER);"
      }
    ],
    [
      {
        "question": "Which id has the least rating on the table? | Which id do you need, a id, u id, or i id? | i id",
        "query": "SELECT i_id FROM review ORDER BY rating LIMIT 1",
        "schema": "CREATE TABLE review (a_id NUMBER, i_id NUMBER, u_id NUMBER, rating NUMBER); CREATE TABLE useracct (u_id NUMBER); CREATE TABLE item (i_id NUMBER);"
      },
      {
        "question": "For each user, find their name and the number of reviews written by them.",
        "query": "SELECT t1.name , COUNT ( * ) FROM useracct AS t1 JOIN review AS t2 ON t1.u_id = t2.u_id GROUP BY t2.u_id",
        "schema": "CREATE TABLE useracct (u_id NUMBER, name TEXT); CREATE TABLE item (i_id NUMBER); CREATE TABLE review (i_id NUMBER, a_id NUMBER, u_id NUMBER, rating NUMBER);"
      },
      {
        "question": "Which u id has the least rank on the list?",
        "query": "SELECT u_id FROM review ORDER BY rank LIMIT 1",
        "schema": "CREATE TABLE item (i_id NUMBER); CREATE TABLE review (rating NUMBER, rank NUMBER, i_id NUMBER, a_id NUMBER, u_id NUMBER); CREATE TABLE useracct (u_id NUMBER, name TEXT);"
      },
      {
        "question": "State the name of u id 2 on the list?",
        "query": "SELECT name FROM useracct WHERE u_id = 2",
        "schema": "CREATE TABLE useracct (u_id NUMBER, name TEXT); CREATE TABLE item (i_id NUMBER); CREATE TABLE review (i_id NUMBER, rank NUMBER, u_id NUMBER, a_id NUMBER, rating NUMBER);"
      }
    ],
    [
      {
        "question": "which item has the highest rating?",
        "query": "SELECT t1.title FROM item AS t1 JOIN review AS t2 ON t1.i_id = t2.i_id ORDER BY rating DESC LIMIT 1",
        "schema": "CREATE TABLE useracct (u_id NUMBER); CREATE TABLE review (u_id NUMBER, i_id NUMBER, a_id NUMBER, rating NUMBER); CREATE TABLE item (i_id NUMBER, title TEXT);"
      },
      {
        "question": "what is the average rating?",
        "query": "SELECT AVG ( rating ) FROM review",
        "schema": "CREATE TABLE useracct (u_id NUMBER); CREATE TABLE review (u_id NUMBER, a_id NUMBER, rating NUMBER, i_id NUMBER); CREATE TABLE item (title TEXT, i_id NUMBER);"
      },
      {
        "question": "what items have higher rating than 7?",
        "query": "SELECT t1.title FROM item AS t1 JOIN review AS t2 ON t1.i_id = t2.i_id WHERE t2.rating > 7",
        "schema": "CREATE TABLE item (i_id NUMBER, title TEXT); CREATE TABLE review (u_id NUMBER, a_id NUMBER, i_id NUMBER, rating NUMBER); CREATE TABLE useracct (u_id NUMBER);"
      },
      {
        "question": "what is item id of cup?",
        "query": "SELECT i_id FROM item WHERE title = 'cup'",
        "schema": "CREATE TABLE useracct (u_id NUMBER); CREATE TABLE item (i_id NUMBER, title TEXT); CREATE TABLE review (u_id NUMBER, a_id NUMBER, rating NUMBER, i_id NUMBER);"
      },
      {
        "question": "what is item id 4?",
        "query": "SELECT title FROM item WHERE i_id = 4",
        "schema": "CREATE TABLE useracct (u_id NUMBER); CREATE TABLE item (title TEXT, i_id NUMBER); CREATE TABLE review (i_id NUMBER, a_id NUMBER, rating NUMBER, u_id NUMBER);"
      },
      {
        "question": "please list all items",
        "query": "SELECT * FROM item",
        "schema": "CREATE TABLE review (i_id NUMBER, u_id NUMBER, a_id NUMBER, rating NUMBER); CREATE TABLE item (title TEXT, i_id NUMBER); CREATE TABLE useracct (u_id NUMBER);"
      },
      {
        "question": "please list each item and rating from highest to lowest rating",
        "query": "SELECT t1.title, t2.rating FROM item AS t1 JOIN review AS t2 ON t1.i_id = t2.i_id ORDER BY t2.rating",
        "schema": "CREATE TABLE review (i_id NUMBER, a_id NUMBER, u_id NUMBER, rating NUMBER); CREATE TABLE useracct (u_id NUMBER); CREATE TABLE item (i_id NUMBER, title TEXT);"
      }
    ]
  ],
  "loan_1": [
    [
      {
        "question": "List names of customers with more than 1 loan",
        "query": "SELECT t1.cust_name FROM customer AS t1 JOIN loan AS t2 ON t1.cust_id = t2.cust_id GROUP BY t1.cust_name HAVING COUNT ( * ) > 1",
        "schema": "CREATE TABLE loan (cust_ID TEXT); CREATE TABLE customer (acc_type TEXT, acc_bal NUMBER, cust_ID TEXT, no_of_loans NUMBER, cust_name TEXT);"
      },
      {
        "question": "How about those with only 1 loan?",
        "query": "SELECT t1.cust_name FROM customer AS t1 JOIN loan AS t2 ON t1.cust_id = t2.cust_id GROUP BY t1.cust_name HAVING COUNT ( * ) = 1",
        "schema": "CREATE TABLE customer (acc_bal NUMBER, cust_name TEXT, cust_ID TEXT, no_of_loans NUMBER, acc_type TEXT); CREATE TABLE loan (loan_ID TEXT, cust_ID TEXT);"
      },
      {
        "question": "How about those with no loans?",
        "query": "SELECT t1.cust_name FROM customer AS t1 JOIN loan AS t2 ON t1.cust_id = t2.cust_id GROUP BY t1.cust_name HAVING COUNT ( * ) = 0",
        "schema": "CREATE TABLE customer (cust_ID TEXT, acc_type TEXT, cust_name TEXT, acc_bal NUMBER, no_of_loans NUMBER); CREATE TABLE loan (cust_ID TEXT, loan_ID TEXT);"
      },
      {
        "question": "List the customers who have mortgages",
        "query": "SELECT loan_id FROM loan WHERE loan_type = 'Mortgages'",
        "schema": "CREATE TABLE customer (cust_ID TEXT, cust_name TEXT, no_of_loans NUMBER, acc_bal NUMBER, acc_type TEXT); CREATE TABLE loan (loan_type TEXT, loan_ID TEXT, cust_ID TEXT);"
      },
      {
        "question": "What is their name?",
        "query": "SELECT t1.cust_name FROM customer AS t1 JOIN loan AS t2 ON t1.cust_id = t2.cust_id WHERE loan_type = 'Mortgages'",
        "schema": "CREATE TABLE customer (no_of_loans NUMBER, acc_type TEXT, cust_ID TEXT, cust_name TEXT, acc_bal NUMBER); CREATE TABLE loan (loan_ID TEXT, cust_ID TEXT, loan_type TEXT);"
      }
    ],
    [
      {
        "question": "Hello!  Can you provide me with a list of all of the customers with a credit score below 100?",
        "query": "SELECT * FROM customer WHERE credit_score < 100",
        "schema": "CREATE TABLE customer (cust_name TEXT, acc_bal NUMBER, acc_type TEXT, cust_ID TEXT, credit_score NUMBER); CREATE TABLE bank (no_of_customers NUMBER);"
      },
      {
        "question": "Can you provide me with a list of all of the loans that both Mary and Jack received?",
        "query": "SELECT t2.loan_type FROM customer AS t1 JOIN loan AS t2 ON t1.cust_id = t2.cust_id WHERE t1.cust_name = \"Mary\" INTERSECT SELECT t4.loan_type FROM customer AS t3 JOIN loan AS t4 ON t3.cust_id = t4.cust_id WHERE t3.cust_name = \"Jack\"",
        "schema": "CREATE TABLE customer (cust_name TEXT, acc_bal NUMBER, credit_score NUMBER, cust_ID TEXT, acc_type TEXT, no_of_loans NUMBER); CREATE TABLE bank (no_of_customers NUMBER); CREATE TABLE loan (loan_type TEXT, amount NUMBER, loan_ID TEXT, cust_ID TEXT);"
      },
      {
        "question": "Can you show me which bank branch provided the highest number of loans to customers with credit scores below 100?",
        "query": "SELECT t2.bname FROM loan AS t1 JOIN bank AS t2 ON t1.branch_id = t2.branch_id JOIN customer AS t3 ON t1.cust_id = t3.cust_id WHERE t3.credit_score < 100 GROUP BY t2.bname ORDER BY SUM ( t1.amount ) DESC LIMIT 1",
        "schema": "CREATE TABLE bank (no_of_customers NUMBER, bname TEXT, branch_ID NUMBER); CREATE TABLE loan (branch_ID TEXT, cust_ID TEXT, loan_ID TEXT, loan_type TEXT, amount NUMBER); CREATE TABLE customer (acc_type TEXT, cust_name TEXT, no_of_loans NUMBER, acc_bal NUMBER, cust_ID TEXT, branch_ID NUMBER, credit_score NUMBER);"
      }
    ],
    [
      {
        "question": "Can you show the average account balance of customers with credit score lower than 50 for each account type and their corresponding account types?",
        "query": "SELECT AVG ( acc_bal ) , acc_type FROM customer WHERE credit_score < 50 GROUP BY acc_type",
        "schema": "CREATE TABLE customer (acc_bal NUMBER, credit_score NUMBER, cust_ID TEXT, acc_type TEXT);"
      }
    ],
    [
      {
        "question": "How many customers have loans that total more than 5000?",
        "query": "SELECT COUNT ( * ) FROM ( SELECT * FROM customer AS t1 JOIN loan AS t2 ON t1.cust_id = t2.cust_id GROUP BY t1.cust_name HAVING SUM ( t2.amount ) > 5000 )",
        "schema": "CREATE TABLE loan (loan_ID TEXT, loan_type TEXT, cust_ID TEXT, amount NUMBER); CREATE TABLE customer (cust_ID TEXT, acc_bal NUMBER, no_of_loans NUMBER, cust_name TEXT, acc_type TEXT); CREATE TABLE bank (branch_ID NUMBER, no_of_customers NUMBER);"
      },
      {
        "question": "What are their names?",
        "query": "SELECT cust_name FROM customer AS t1 JOIN loan AS t2 ON t1.cust_id = t2.cust_id GROUP BY t1.cust_name HAVING SUM ( t2.amount ) > 5000",
        "schema": "CREATE TABLE loan (cust_ID TEXT, loan_ID TEXT, amount NUMBER, loan_type TEXT); CREATE TABLE customer (no_of_loans NUMBER, cust_ID TEXT, acc_bal NUMBER, acc_type TEXT, cust_name TEXT); CREATE TABLE bank (branch_ID NUMBER, no_of_customers NUMBER);"
      },
      {
        "question": "What is her account balance?",
        "query": "SELECT t1.acc_bal FROM customer AS t1 JOIN loan AS t2 ON t1.cust_id = t2.cust_id GROUP BY t1.cust_name HAVING SUM ( t2.amount ) > 5000",
        "schema": "CREATE TABLE bank (branch_ID NUMBER, no_of_customers NUMBER); CREATE TABLE customer (cust_name TEXT, acc_bal NUMBER, acc_type TEXT, cust_ID TEXT, no_of_loans NUMBER); CREATE TABLE loan (cust_ID TEXT, loan_ID TEXT, loan_type TEXT, amount NUMBER);"
      }
    ],
    [
      {
        "question": "Can you list the loan types, branch names and ids, and loan amounts? | Did you mean the Ids of the branches? | Yes, please.",
        "query": "SELECT t2.loan_type, t1.bname, t2.branch_id, t2.amount FROM bank AS t1 JOIN loan AS t2 ON t1.branch_id = t2.branch_id GROUP BY t1.bname",
        "schema": "CREATE TABLE bank (bname TEXT, branch_ID NUMBER); CREATE TABLE loan (amount NUMBER, loan_ID TEXT, branch_ID TEXT, loan_type TEXT, cust_ID TEXT); CREATE TABLE customer (branch_ID NUMBER, acc_type TEXT);"
      },
      {
        "question": "Hmm, I want to know the number of customers each bank branch has. | Would you like both the branch name and the branch ID? | Yes please.",
        "query": "SELECT branch_id, bname, no_of_customers FROM bank",
        "schema": "CREATE TABLE customer (branch_ID NUMBER, cust_name TEXT, cust_ID TEXT, acc_type TEXT, no_of_loans NUMBER, acc_bal NUMBER); CREATE TABLE bank (branch_ID NUMBER, no_of_customers NUMBER, bname TEXT); CREATE TABLE loan (amount NUMBER, loan_type TEXT, branch_ID TEXT, loan_ID TEXT, cust_ID TEXT);"
      },
      {
        "question": "Please find out the total amount of loans offered by each bank branch.",
        "query": "SELECT SUM ( amount ) , t1.bname FROM bank AS t1 JOIN loan AS t2 ON t1.branch_id = t2.branch_id GROUP BY t1.bname",
        "schema": "CREATE TABLE loan (amount NUMBER, loan_ID TEXT, cust_ID TEXT, loan_type TEXT, branch_ID TEXT); CREATE TABLE customer (cust_name TEXT, acc_type TEXT, no_of_loans NUMBER, cust_ID TEXT, branch_ID NUMBER, acc_bal NUMBER); CREATE TABLE bank (bname TEXT, no_of_customers NUMBER, branch_ID NUMBER);"
      }
    ],
    [
      {
        "question": "hello. Can you tell me the number of states in which there are customers?",
        "query": "SELECT COUNT ( state ) FROM bank WHERE no_of_customers>0",
        "schema": "CREATE TABLE bank (no_of_customers NUMBER, state TEXT, branch_ID NUMBER); CREATE TABLE customer (branch_ID NUMBER, acc_type TEXT, cust_name TEXT, state TEXT, acc_bal NUMBER, cust_ID TEXT);"
      },
      {
        "question": "and what states are they, please? | Do you mean the states of all the branches? | what are the four states in which there are customers ?",
        "query": "SELECT state FROM bank WHERE no_of_customers>0",
        "schema": "CREATE TABLE customer (cust_ID TEXT, branch_ID NUMBER, acc_type TEXT, acc_bal NUMBER, cust_name TEXT, state TEXT); CREATE TABLE bank (no_of_customers NUMBER, branch_ID NUMBER, state TEXT);"
      },
      {
        "question": "and which of those states has the most number of customers?",
        "query": "SELECT state FROM bank GROUP BY state ORDER BY SUM ( no_of_customers ) DESC LIMIT 1",
        "schema": "CREATE TABLE bank (branch_ID NUMBER, no_of_customers NUMBER, state TEXT, bname TEXT); CREATE TABLE customer (acc_bal NUMBER, state TEXT, branch_ID NUMBER, cust_ID TEXT, cust_name TEXT, acc_type TEXT);"
      }
    ],
    [
      {
        "question": "What are the names of the bank branches?",
        "query": "SELECT bname FROM bank",
        "schema": "CREATE TABLE customer (branch_ID NUMBER); CREATE TABLE loan (branch_ID TEXT); CREATE TABLE bank (branch_ID NUMBER, bname TEXT);"
      },
      {
        "question": "Which bank branches provide business loans? | do you want the id or the name of the bank branches? | Names of the bank branches please.",
        "query": "SELECT t1.bname FROM bank AS t1 JOIN loan AS t2 ON t1.branch_id = t2.branch_id WHERE t2.loan_type = 'Business'",
        "schema": "CREATE TABLE customer (branch_ID NUMBER); CREATE TABLE loan (loan_type TEXT, loan_ID TEXT, branch_ID TEXT, cust_ID TEXT); CREATE TABLE bank (bname TEXT, branch_ID NUMBER);"
      },
      {
        "question": "What is the city of the bank branch that provides business loans?",
        "query": "SELECT t1.city FROM bank AS t1 JOIN loan AS t2 ON t1.branch_id = t2.branch_id WHERE t2.loan_type = 'Business'",
        "schema": "CREATE TABLE loan (cust_ID TEXT, loan_type TEXT, branch_ID TEXT, loan_ID TEXT); CREATE TABLE bank (branch_ID NUMBER, bname TEXT, city TEXT); CREATE TABLE customer (branch_ID NUMBER);"
      }
    ],
    [
      {
        "question": "How many customers in this table?",
        "query": "SELECT COUNT ( cust_name ) FROM customer",
        "schema": "CREATE TABLE bank (branch_ID NUMBER, no_of_customers NUMBER); CREATE TABLE customer (branch_ID NUMBER, cust_ID TEXT, acc_bal NUMBER, cust_name TEXT, acc_type TEXT);"
      },
      {
        "question": "How many loan types in this table?",
        "query": "SELECT COUNT ( loan_type ) FROM loan",
        "schema": "CREATE TABLE loan (loan_ID TEXT, cust_ID TEXT, loan_type TEXT); CREATE TABLE bank (branch_ID NUMBER, no_of_customers NUMBER); CREATE TABLE customer (acc_type TEXT, acc_bal NUMBER, branch_ID NUMBER, cust_ID TEXT, cust_name TEXT);"
      },
      {
        "question": "How many account types in this table?",
        "query": "SELECT COUNT ( DISTINCT acc_type ) FROM customer",
        "schema": "CREATE TABLE bank (no_of_customers NUMBER, branch_ID NUMBER); CREATE TABLE loan (loan_ID TEXT, loan_type TEXT, cust_ID TEXT); CREATE TABLE customer (cust_ID TEXT, cust_name TEXT, acc_bal NUMBER, branch_ID NUMBER, acc_type TEXT);"
      },
      {
        "question": "Find average account balance?",
        "query": "SELECT AVG ( acc_bal ) FROM customer",
        "schema": "CREATE TABLE loan (cust_ID TEXT, loan_ID TEXT, loan_type TEXT); CREATE TABLE customer (acc_type TEXT, branch_ID NUMBER, cust_ID TEXT, acc_bal NUMBER, cust_name TEXT); CREATE TABLE bank (branch_ID NUMBER, no_of_customers NUMBER);"
      }
    ],
    [
      {
        "question": "Can i get the customer name who has low credit score",
        "query": "SELECT cust_name FROM customer ORDER BY credit_score LIMIT 1",
        "schema": "CREATE TABLE loan (cust_ID TEXT); CREATE TABLE customer (cust_ID TEXT, acc_type TEXT, acc_bal NUMBER, credit_score NUMBER, cust_name TEXT);"
      },
      {
        "question": "From which state he was ?",
        "query": "SELECT state FROM customer ORDER BY credit_score LIMIT 1",
        "schema": "CREATE TABLE customer (acc_type TEXT, credit_score NUMBER, cust_name TEXT, cust_ID TEXT, acc_bal NUMBER, state TEXT); CREATE TABLE loan (cust_ID TEXT);"
      },
      {
        "question": "Wow ! What was his account type?",
        "query": "SELECT acc_type FROM customer ORDER BY credit_score LIMIT 1",
        "schema": "CREATE TABLE customer (credit_score NUMBER, cust_ID TEXT, state TEXT, cust_name TEXT, acc_bal NUMBER, acc_type TEXT); CREATE TABLE loan (cust_ID TEXT);"
      }
    ],
    [
      {
        "question": "Hi there!  How are you?  Can you show a list of all customer IDs for customers who have loans in the amount of 5000 or more?",
        "query": "SELECT t1.cust_id FROM customer AS t1 JOIN loan AS t2 ON t1.cust_id = t2.cust_id GROUP BY t1.cust_name HAVING SUM ( t2.amount ) > = 5000",
        "schema": "CREATE TABLE customer (no_of_loans NUMBER, acc_type TEXT, acc_bal NUMBER, cust_name TEXT, cust_ID TEXT); CREATE TABLE loan (amount NUMBER, loan_ID TEXT, cust_ID TEXT);"
      },
      {
        "question": "Excellent!  Can you update that list to include the customer names and their account balances?",
        "query": "SELECT t1.cust_id,t1.cust_name,t1.acc_bal FROM customer AS t1 JOIN loan AS t2 ON t1.cust_id = t2.cust_id GROUP BY t1.cust_name HAVING SUM ( t2.amount ) > = 5000",
        "schema": "CREATE TABLE customer (acc_bal NUMBER, cust_name TEXT, cust_ID TEXT, no_of_loans NUMBER, acc_type TEXT); CREATE TABLE loan (loan_ID TEXT, cust_ID TEXT, amount NUMBER);"
      },
      {
        "question": "Awesome!  Finally, can you show me the number of loans and credit score for Owen?",
        "query": "SELECT t1.credit_score,COUNT ( * ) FROM customer AS t1 JOIN loan AS t2 ON t1.cust_id = t2.cust_id WHERE t1.cust_name = \"Owen\"",
        "schema": "CREATE TABLE customer (credit_score NUMBER, acc_type TEXT, cust_ID TEXT, acc_bal NUMBER, cust_name TEXT, no_of_loans NUMBER); CREATE TABLE loan (loan_ID TEXT, loan_type TEXT, cust_ID TEXT, amount NUMBER);"
      }
    ],
    [
      {
        "question": "can you show me average of credit scores?",
        "query": "SELECT AVG ( credit_score ) FROM customer",
        "schema": "CREATE TABLE bank (branch_ID NUMBER); CREATE TABLE customer (credit_score NUMBER);"
      },
      {
        "question": "what is the highest credit score?",
        "query": "SELECT MAX ( credit_score ) FROM customer",
        "schema": "CREATE TABLE bank (branch_ID NUMBER); CREATE TABLE customer (acc_bal NUMBER, cust_ID TEXT, credit_score NUMBER);"
      },
      {
        "question": "what is the highest account balance?",
        "query": "SELECT MAX ( acc_bal ) FROM customer",
        "schema": "CREATE TABLE customer (credit_score NUMBER, acc_type TEXT, acc_bal NUMBER, cust_ID TEXT); CREATE TABLE bank (branch_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Who are the customers?",
        "query": "SELECT cust_name FROM customer",
        "schema": "CREATE TABLE customer (cust_ID TEXT, cust_name TEXT, acc_bal NUMBER, acc_type TEXT, state TEXT, branch_ID NUMBER); CREATE TABLE bank (no_of_customers NUMBER, branch_ID NUMBER);"
      },
      {
        "question": "Which of them have mortgage loans?",
        "query": "SELECT t1.cust_name FROM customer AS t1 JOIN loan AS t2 ON t1.cust_id = t2.cust_id WHERE loan_type = 'Mortgages'",
        "schema": "CREATE TABLE customer (state TEXT, acc_bal NUMBER, branch_ID NUMBER, cust_ID TEXT, no_of_loans NUMBER, acc_type TEXT, cust_name TEXT); CREATE TABLE loan (loan_type TEXT, loan_ID TEXT, cust_ID TEXT); CREATE TABLE bank (no_of_customers NUMBER, branch_ID NUMBER);"
      },
      {
        "question": "And which also have auto loans?",
        "query": "SELECT t1.cust_name FROM customer AS t1 JOIN loan AS t2 ON t1.cust_id = t2.cust_id WHERE loan_type = 'Mortgages' INTERSECT SELECT t1.cust_name FROM customer AS t1 JOIN loan AS t2 ON t1.cust_id = t2.cust_id WHERE loan_type = 'Auto'",
        "schema": "CREATE TABLE bank (branch_ID NUMBER, no_of_customers NUMBER); CREATE TABLE customer (cust_ID TEXT, branch_ID NUMBER, no_of_loans NUMBER, acc_bal NUMBER, acc_type TEXT, cust_name TEXT, state TEXT); CREATE TABLE loan (loan_ID TEXT, cust_ID TEXT, loan_type TEXT);"
      }
    ],
    [
      {
        "question": "Find the name of customers who do not have a saving account.",
        "query": "SELECT cust_name FROM customer EXCEPT SELECT cust_name FROM customer WHERE acc_type = 'saving'",
        "schema": "CREATE TABLE loan (cust_ID TEXT); CREATE TABLE customer (cust_ID TEXT, acc_type TEXT, acc_bal NUMBER, cust_name TEXT);"
      },
      {
        "question": "what other types of accounts are available?",
        "query": "SELECT acc_type FROM customer WHERE acc_type ! = \"saving\"",
        "schema": "CREATE TABLE loan (cust_ID TEXT); CREATE TABLE customer (cust_ID TEXT, acc_bal NUMBER, cust_name TEXT, acc_type TEXT);"
      },
      {
        "question": "who has the highest credit score?",
        "query": "SELECT cust_name FROM customer ORDER BY credit_score DESC LIMIT 1",
        "schema": "CREATE TABLE customer (acc_bal NUMBER, cust_ID TEXT, acc_type TEXT, credit_score NUMBER, cust_name TEXT); CREATE TABLE loan (cust_ID TEXT);"
      }
    ],
    [
      {
        "question": "what is the total balance of customers whose credit score is above 100",
        "query": "SELECT SUM ( acc_bal ) FROM customer WHERE credit_score > 100 GROUP BY state",
        "schema": "CREATE TABLE bank (branch_ID NUMBER, no_of_customers NUMBER); CREATE TABLE customer (cust_name TEXT, credit_score NUMBER, acc_bal NUMBER, cust_ID TEXT, state TEXT, acc_type TEXT);"
      },
      {
        "question": "what is the account type? | Would you like a list of all the account types? | yes",
        "query": "SELECT acc_type FROM customer",
        "schema": "CREATE TABLE bank (no_of_customers NUMBER, branch_ID NUMBER); CREATE TABLE customer (cust_name TEXT, acc_bal NUMBER, acc_type TEXT, state TEXT, cust_ID TEXT, credit_score NUMBER);"
      },
      {
        "question": "what is the credit score for Mary?",
        "query": "SELECT credit_score FROM customer WHERE cust_name = \"Mary\"",
        "schema": "CREATE TABLE bank (branch_ID NUMBER, no_of_customers NUMBER); CREATE TABLE customer (acc_bal NUMBER, acc_type TEXT, credit_score NUMBER, state TEXT, cust_name TEXT, cust_ID TEXT);"
      }
    ],
    [
      {
        "question": "I want to know what is the greatest amount of loan to customers that each bank branch has made.",
        "query": "SELECT t2.bname, MAX ( t1.amount ) FROM loan AS t1 JOIN bank AS t2 ON t1.branch_id = t2.branch_id JOIN customer AS t3 ON t1.cust_id = t3.cust_id GROUP BY t2.bname",
        "schema": "CREATE TABLE loan (loan_type TEXT, branch_ID TEXT, cust_ID TEXT, loan_ID TEXT, amount NUMBER); CREATE TABLE bank (bname TEXT, branch_ID NUMBER, no_of_customers NUMBER); CREATE TABLE customer (acc_bal NUMBER, cust_ID TEXT, no_of_loans NUMBER, acc_type TEXT, branch_ID NUMBER);"
      },
      {
        "question": "Can you show me the credit score of the customer receiving the greatest amount of loan?",
        "query": "SELECT t2.credit_score FROM loan AS t1 JOIN customer AS t2 ON t1.cust_id = t2.cust_id ORDER BY t1.amount DESC LIMIT 1",
        "schema": "CREATE TABLE loan (amount NUMBER, loan_ID TEXT, loan_type TEXT, branch_ID TEXT, cust_ID TEXT); CREATE TABLE customer (acc_bal NUMBER, no_of_loans NUMBER, cust_name TEXT, acc_type TEXT, cust_ID TEXT, credit_score NUMBER, branch_ID NUMBER); CREATE TABLE bank (bname TEXT, branch_ID NUMBER, no_of_customers NUMBER);"
      },
      {
        "question": "Can you show me the name of the bank branch providing the greatest total amount of loans to customers?",
        "query": "SELECT t2.bname FROM loan AS t1 JOIN bank AS t2 ON t1.branch_id = t2.branch_id JOIN customer AS t3 ON t1.cust_id = t3.cust_id GROUP BY t2.bname ORDER BY SUM ( t1.amount ) DESC LIMIT 1",
        "schema": "CREATE TABLE loan (amount NUMBER, loan_ID TEXT, branch_ID TEXT, cust_ID TEXT, loan_type TEXT); CREATE TABLE bank (branch_ID NUMBER, no_of_customers NUMBER, bname TEXT); CREATE TABLE customer (credit_score NUMBER, cust_name TEXT, branch_ID NUMBER, acc_type TEXT, acc_bal NUMBER, no_of_loans NUMBER, cust_ID TEXT);"
      }
    ],
    [
      {
        "question": "FIND THE NAME OF CUSTOMER WHO HAS THE LOWEST CREDIT SCORE",
        "query": "SELECT cust_name FROM customer ORDER BY credit_score LIMIT 1",
        "schema": "CREATE TABLE customer (cust_ID TEXT, credit_score NUMBER, cust_name TEXT, acc_bal NUMBER);"
      },
      {
        "question": "FIND THE NAME OF CUSTOMER WHO HAS THE HIGHEST CREDIT SCORE",
        "query": "SELECT cust_name FROM customer ORDER BY credit_score DESC LIMIT 1",
        "schema": "CREATE TABLE customer (cust_name TEXT, credit_score NUMBER, cust_ID TEXT, acc_bal NUMBER);"
      },
      {
        "question": "FIND THE NAME OF CUSTOMER WHO HAS HIGH ACCOUNT BALANCE | Did you mean the highest account balance? | YES",
        "query": "SELECT cust_name FROM customer ORDER BY acc_bal DESC LIMIT 1",
        "schema": "CREATE TABLE customer (credit_score NUMBER, cust_ID TEXT, acc_bal NUMBER, cust_name TEXT);"
      }
    ],
    [
      {
        "question": "Thanks!  I'm a bit short on time, so can you provide me with Owens loan amount?",
        "query": "SELECT t2.amount FROM loan AS t2 JOIN customer AS t1 ON t1.cust_id = t2.cust_id WHERE t1.cust_name = \"Owen\"",
        "schema": "CREATE TABLE loan (cust_ID TEXT, branch_ID TEXT, amount NUMBER, loan_type TEXT, loan_ID TEXT); CREATE TABLE customer (acc_bal NUMBER, cust_name TEXT, cust_ID TEXT, branch_ID NUMBER, no_of_loans NUMBER, acc_type TEXT); CREATE TABLE bank (branch_ID NUMBER);"
      }
    ],
    [
      {
        "question": "what is the average of account balance?",
        "query": "SELECT AVG ( acc_bal ) FROM customer",
        "schema": "CREATE TABLE bank (branch_ID NUMBER); CREATE TABLE loan (amount NUMBER); CREATE TABLE customer (acc_bal NUMBER, acc_type TEXT, credit_score NUMBER);"
      },
      {
        "question": "can you show me a list of account type?",
        "query": "SELECT DISTINCT acc_type FROM customer",
        "schema": "CREATE TABLE customer (cust_ID TEXT, acc_type TEXT, acc_bal NUMBER, credit_score NUMBER); CREATE TABLE bank (branch_ID NUMBER); CREATE TABLE loan (amount NUMBER);"
      },
      {
        "question": "what is the average of credit score?",
        "query": "SELECT AVG ( credit_score ) FROM customer",
        "schema": "CREATE TABLE customer (cust_ID TEXT, acc_type TEXT, acc_bal NUMBER, credit_score NUMBER); CREATE TABLE bank (branch_ID NUMBER); CREATE TABLE loan (amount NUMBER);"
      },
      {
        "question": "find the total account balance of each customer from Utah or Texas",
        "query": "SELECT SUM ( acc_bal ) FROM customer WHERE state = 'Utah' OR state = 'Texas'",
        "schema": "CREATE TABLE customer (credit_score NUMBER, cust_ID TEXT, acc_type TEXT, state TEXT, acc_bal NUMBER); CREATE TABLE loan (amount NUMBER); CREATE TABLE bank (branch_ID NUMBER, state TEXT);"
      }
    ]
  ],
  "perpetrator": [
    [
      {
        "question": "tell me the total number of injured in both china and japan",
        "query": "SELECT SUM ( injured ) FROM perpetrator WHERE country = \"China\" OR country = \"Japan\"",
        "schema": "CREATE TABLE perpetrator (Injured NUMBER, People_ID NUMBER, Killed NUMBER, Country TEXT); CREATE TABLE people (Home Town TEXT, People_ID NUMBER);"
      },
      {
        "question": "what is the rate of kill in south korea",
        "query": "SELECT killed FROM perpetrator WHERE country = \"South Korea\"",
        "schema": "CREATE TABLE perpetrator (Country TEXT, Injured NUMBER, Killed NUMBER, People_ID NUMBER); CREATE TABLE people (People_ID NUMBER, Home Town TEXT);"
      },
      {
        "question": "what is the location of ID 3 | Do you mean the perpetrator ID? | yes the prepetrator ID",
        "query": "SELECT LOCATION FROM perpetrator WHERE perpetrator_id = \"3\"",
        "schema": "CREATE TABLE people (Home Town TEXT, People_ID NUMBER); CREATE TABLE perpetrator (People_ID NUMBER, Country TEXT, Injured NUMBER, Location TEXT, Killed NUMBER, Perpetrator_ID NUMBER);"
      }
    ],
    [
      {
        "question": "How many perpetrators are there?",
        "query": "SELECT COUNT ( * ) FROM perpetrator",
        "schema": "CREATE TABLE people (People_ID NUMBER); CREATE TABLE perpetrator (People_ID NUMBER, Perpetrator_ID NUMBER);"
      },
      {
        "question": "What is the location for each perpetrator?",
        "query": "SELECT LOCATION FROM perpetrator",
        "schema": "CREATE TABLE people (People_ID NUMBER, Home Town TEXT); CREATE TABLE perpetrator (People_ID NUMBER, Location TEXT, Perpetrator_ID NUMBER);"
      },
      {
        "question": "Can you tell me the location of the perpetrator with the largest kills?",
        "query": "SELECT LOCATION FROM perpetrator ORDER BY killed DESC LIMIT 1",
        "schema": "CREATE TABLE people (People_ID NUMBER, Home Town TEXT); CREATE TABLE perpetrator (Injured NUMBER, People_ID NUMBER, Location TEXT, Killed NUMBER, Perpetrator_ID NUMBER);"
      }
    ],
    [
      {
        "question": "what is the name of people that are not perpetrators",
        "query": "SELECT name FROM people WHERE people_id NOT IN ( SELECT people_id FROM perpetrator )",
        "schema": "CREATE TABLE perpetrator (People_ID NUMBER, Perpetrator_ID NUMBER); CREATE TABLE people (Name TEXT, People_ID NUMBER);"
      },
      {
        "question": "what is the weight of John Danks",
        "query": "SELECT weight FROM people WHERE name = \"John Danks\"",
        "schema": "CREATE TABLE people (Name TEXT, Weight NUMBER, People_ID NUMBER); CREATE TABLE perpetrator (People_ID NUMBER, Perpetrator_ID NUMBER);"
      },
      {
        "question": "what is the height of  John Danks",
        "query": "SELECT height FROM people WHERE name = \"John Danks\"",
        "schema": "CREATE TABLE people (Name TEXT, People_ID NUMBER, Weight NUMBER, Height NUMBER); CREATE TABLE perpetrator (Perpetrator_ID NUMBER, People_ID NUMBER);"
      }
    ],
    [
      {
        "question": "I want to know how many perpetrators are taller than 1.84 | So do you mean the kills of perpetrators with height more than 1.84? | Yes, that's exactly what I mean",
        "query": "SELECT SUM ( t2.killed ) FROM people AS t1 JOIN perpetrator AS t2 ON t1.people_id = t2.people_id WHERE t1.height > 1.84",
        "schema": "CREATE TABLE perpetrator (Perpetrator_ID NUMBER, People_ID NUMBER, Killed NUMBER, Injured NUMBER); CREATE TABLE people (Height NUMBER, People_ID NUMBER, Name TEXT);"
      },
      {
        "question": "How many perpetrators does that include?",
        "query": "SELECT COUNT ( t2.perpetrator_id ) FROM people AS t1 JOIN perpetrator AS t2 ON t1.people_id = t2.people_id WHERE t1.height > 1.84",
        "schema": "CREATE TABLE perpetrator (Perpetrator_ID NUMBER, Injured NUMBER, People_ID NUMBER, Killed NUMBER); CREATE TABLE people (Height NUMBER, Name TEXT, People_ID NUMBER);"
      },
      {
        "question": "When did the earliest killing take place?",
        "query": "SELECT date FROM perpetrator ORDER BY date ASC LIMIT 1",
        "schema": "CREATE TABLE people (Height NUMBER, People_ID NUMBER, Name TEXT); CREATE TABLE perpetrator (Killed NUMBER, Perpetrator_ID NUMBER, People_ID NUMBER, Injured NUMBER, Date TEXT, Year NUMBER);"
      },
      {
        "question": "Can you tell me how many people were injured for the most recent date?",
        "query": "SELECT injured FROM perpetrator ORDER BY date DESC LIMIT 1",
        "schema": "CREATE TABLE people (Height NUMBER, Name TEXT, People_ID NUMBER); CREATE TABLE perpetrator (Year NUMBER, People_ID NUMBER, Date TEXT, Killed NUMBER, Perpetrator_ID NUMBER, Injured NUMBER);"
      },
      {
        "question": "Which country had the most killings and injuries? | Do you mean killings plus injuries together? | Yes, that is what I mean.",
        "query": "SELECT country FROM perpetrator GROUP BY country ORDER BY SUM ( killed ) +SUM ( injured ) DESC LIMIT 1",
        "schema": "CREATE TABLE people (Height NUMBER, Name TEXT, People_ID NUMBER); CREATE TABLE perpetrator (Perpetrator_ID NUMBER, Country TEXT, People_ID NUMBER, Injured NUMBER, Year NUMBER, Killed NUMBER, Date TEXT);"
      }
    ],
    [
      {
        "question": "Hi - can you please list the names of perpetrators in all countries except for China?",
        "query": "SELECT t1.name FROM people AS t1 JOIN perpetrator AS t2 ON t1.people_id = t2.people_id WHERE t2.country ! = \"China\"",
        "schema": "CREATE TABLE perpetrator (Country TEXT, Perpetrator_ID NUMBER, People_ID NUMBER, Location TEXT); CREATE TABLE people (Name TEXT, People_ID NUMBER);"
      },
      {
        "question": "Great - I forgot to ask, can you please show which countries each of the listed perpetrators are associated with?",
        "query": "SELECT t1.name, t2.country FROM people AS t1 JOIN perpetrator AS t2 ON t1.people_id = t2.people_id WHERE t2.country ! = \"China\"",
        "schema": "CREATE TABLE perpetrator (People_ID NUMBER, Perpetrator_ID NUMBER, Country TEXT, Location TEXT); CREATE TABLE people (Name TEXT, People_ID NUMBER);"
      },
      {
        "question": "Fantastic - what was the total number of perpetrators in China?",
        "query": "SELECT COUNT ( * ) FROM people AS t1 JOIN perpetrator AS t2 ON t1.people_id = t2.people_id WHERE t2.country = \"China\"",
        "schema": "CREATE TABLE people (People_ID NUMBER, Name TEXT); CREATE TABLE perpetrator (People_ID NUMBER, Location TEXT, Country TEXT, Perpetrator_ID NUMBER);"
      }
    ],
    [
      {
        "question": "How many countries are there on the list?",
        "query": "SELECT COUNT ( country ) FROM perpetrator",
        "schema": "CREATE TABLE perpetrator (Country TEXT, People_ID NUMBER); CREATE TABLE people (People_ID NUMBER);"
      },
      {
        "question": "Can you list the name of the countries that have perpetrators with injures more than 50?",
        "query": "SELECT country FROM perpetrator WHERE injured > 50",
        "schema": "CREATE TABLE perpetrator (People_ID NUMBER, Injured NUMBER, Country TEXT); CREATE TABLE people (People_ID NUMBER);"
      },
      {
        "question": "Can you also include the name of the contries that have perpetrators with injures smaller than 20?",
        "query": "SELECT country FROM perpetrator WHERE injured < 20",
        "schema": "CREATE TABLE people (People_ID NUMBER, Name TEXT); CREATE TABLE perpetrator (Injured NUMBER, Country TEXT, People_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What are the names of the perpetrators in the country China?",
        "query": "SELECT t1.name FROM people AS t1 JOIN perpetrator AS t2 ON t1.people_id = t2.people_id WHERE t2.country = \"China\"",
        "schema": "CREATE TABLE people (Home Town TEXT, People_ID NUMBER, Name TEXT); CREATE TABLE perpetrator (People_ID NUMBER, Country TEXT, Perpetrator_ID NUMBER);"
      },
      {
        "question": "What are the names of the perpetrators in the country Japan?",
        "query": "SELECT t1.name FROM people AS t1 JOIN perpetrator AS t2 ON t1.people_id = t2.people_id WHERE t2.country = \"Japan\"",
        "schema": "CREATE TABLE people (Name TEXT, Home Town TEXT, People_ID NUMBER); CREATE TABLE perpetrator (Country TEXT, People_ID NUMBER, Perpetrator_ID NUMBER);"
      },
      {
        "question": "What are the heights of all the perpetrators in Japan and China?",
        "query": "SELECT t1.height FROM people AS t1 JOIN perpetrator AS t2 ON t1.people_id = t2.people_id WHERE t2.country = \"China\" OR t2.country = \"Japan\"",
        "schema": "CREATE TABLE people (Name TEXT, Home Town TEXT, Height NUMBER, People_ID NUMBER); CREATE TABLE perpetrator (People_ID NUMBER, Perpetrator_ID NUMBER, Country TEXT);"
      },
      {
        "question": "What are the weights of all the perpetrators from South Korea?",
        "query": "SELECT t1.weight FROM people AS t1 JOIN perpetrator AS t2 ON t1.people_id = t2.people_id WHERE t2.country = \"South Korea\"",
        "schema": "CREATE TABLE people (Weight NUMBER, Name TEXT, Height NUMBER, People_ID NUMBER, Home Town TEXT); CREATE TABLE perpetrator (Perpetrator_ID NUMBER, People_ID NUMBER, Country TEXT);"
      }
    ],
    [
      {
        "question": "show the date of the tallest perpetrator.",
        "query": "SELECT t2.date FROM people AS t1 JOIN perpetrator AS t2 ON t1.people_id = t2.people_id ORDER BY t1.height DESC LIMIT 1",
        "schema": "CREATE TABLE perpetrator (Perpetrator_ID NUMBER, Date TEXT, Year NUMBER, People_ID NUMBER); CREATE TABLE people (People_ID NUMBER, Height NUMBER);"
      },
      {
        "question": "show me the location of the tallest perpetrator.",
        "query": "SELECT t2.location FROM people AS t1 JOIN perpetrator AS t2 ON t1.people_id = t2.people_id ORDER BY t1.height DESC LIMIT 1",
        "schema": "CREATE TABLE perpetrator (Location TEXT, Year NUMBER, Date TEXT, People_ID NUMBER, Perpetrator_ID NUMBER); CREATE TABLE people (Height NUMBER, People_ID NUMBER, Name TEXT);"
      },
      {
        "question": "what country is Kaio from?",
        "query": "SELECT country FROM perpetrator WHERE LOCATION = 'Kaio'",
        "schema": "CREATE TABLE people (Home Town TEXT, Height NUMBER, Name TEXT, People_ID NUMBER); CREATE TABLE perpetrator (Perpetrator_ID NUMBER, Date TEXT, Year NUMBER, Location TEXT, Country TEXT, People_ID NUMBER);"
      },
      {
        "question": "how many people were killed in Japan?",
        "query": "SELECT SUM ( killed ) FROM perpetrator WHERE country = 'Japan'",
        "schema": "CREATE TABLE perpetrator (Country TEXT, Date TEXT, Killed NUMBER, Injured NUMBER, Perpetrator_ID NUMBER, People_ID NUMBER, Location TEXT, Year NUMBER); CREATE TABLE people (People_ID NUMBER, Height NUMBER, Home Town TEXT, Name TEXT);"
      },
      {
        "question": "how many got injured in japan?",
        "query": "SELECT SUM ( injured ) FROM perpetrator WHERE country = 'Japan'",
        "schema": "CREATE TABLE people (Home Town TEXT, Name TEXT, People_ID NUMBER, Height NUMBER); CREATE TABLE perpetrator (Perpetrator_ID NUMBER, Killed NUMBER, Year NUMBER, Country TEXT, People_ID NUMBER, Injured NUMBER, Date TEXT, Location TEXT);"
      }
    ],
    [
      {
        "question": "HOW MANY PEOPLE HAS KILLED AT SOUTH KOREA ?",
        "query": "SELECT killed FROM perpetrator WHERE country = \"South Korea\"",
        "schema": "CREATE TABLE people (Name TEXT, Home Town TEXT, People_ID NUMBER); CREATE TABLE perpetrator (Injured NUMBER, Country TEXT, People_ID NUMBER, Killed NUMBER, Location TEXT);"
      },
      {
        "question": "WHAT IS THE NAME OF THE PERPETRATOR WITH THE BIGGEST WEIGHT ?",
        "query": "SELECT t1.name FROM people AS t1 JOIN perpetrator AS t2 ON t1.people_id = t2.people_id ORDER BY t1.weight DESC LIMIT 1",
        "schema": "CREATE TABLE people (Home Town TEXT, Name TEXT, People_ID NUMBER, Weight NUMBER); CREATE TABLE perpetrator (Injured NUMBER, Location TEXT, Country TEXT, Perpetrator_ID NUMBER, People_ID NUMBER, Killed NUMBER);"
      },
      {
        "question": "WHERE IS THE LOCATION OF EVENTS IN JAPAN ?",
        "query": "SELECT LOCATION FROM perpetrator WHERE country = \"Japan\"",
        "schema": "CREATE TABLE perpetrator (Perpetrator_ID NUMBER, People_ID NUMBER, Country TEXT, Killed NUMBER, Location TEXT, Injured NUMBER); CREATE TABLE people (Weight NUMBER, Name TEXT, People_ID NUMBER, Home Town TEXT);"
      }
    ]
  ],
  "customers_and_invoices": [
    [
      {
        "question": "How many orders have more than two invoices?",
        "query": "SELECT COUNT ( * ) FROM ( SELECT * FROM invoices AS t1 JOIN orders AS t2 ON t1.order_id = t2.order_id GROUP BY t2.order_id HAVING COUNT ( * ) > 2 )",
        "schema": "CREATE TABLE Invoices (invoice_number NUMBER, invoice_date TIME, order_id NUMBER); CREATE TABLE Orders (order_id NUMBER, customer_id NUMBER, order_details TEXT); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Accounts (customer_id NUMBER); CREATE TABLE Order_Items (order_item_id NUMBER, order_id NUMBER); CREATE TABLE Invoice_Line_Items (order_item_id NUMBER);"
      },
      {
        "question": "What are the order IDs and details?",
        "query": "SELECT t2.order_id , t2.order_details FROM invoices AS t1 JOIN orders AS t2 ON t1.order_id = t2.order_id GROUP BY t2.order_id HAVING COUNT ( * ) > 2",
        "schema": "CREATE TABLE Accounts (customer_id NUMBER); CREATE TABLE Orders (order_details TEXT, customer_id NUMBER, order_id NUMBER); CREATE TABLE Invoice_Line_Items (order_item_id NUMBER); CREATE TABLE Order_Items (order_item_id NUMBER, order_id NUMBER); CREATE TABLE Invoices (invoice_date TIME, invoice_number NUMBER, order_id NUMBER); CREATE TABLE Customers (customer_id NUMBER);"
      },
      {
        "question": "What are the customer ID's for these orders?",
        "query": "SELECT t2.customer_id FROM invoices AS t1 JOIN orders AS t2 ON t1.order_id = t2.order_id GROUP BY t2.order_id HAVING COUNT ( * ) > 2",
        "schema": "CREATE TABLE Accounts (customer_id NUMBER); CREATE TABLE Orders (order_details TEXT, customer_id NUMBER, order_id NUMBER); CREATE TABLE Invoice_Line_Items (order_item_id NUMBER); CREATE TABLE Invoices (invoice_number NUMBER, order_id NUMBER, invoice_date TIME); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Order_Items (order_item_id NUMBER, order_id NUMBER);"
      }
    ],
    [
      {
        "question": "Please tell me how many accounts payed an amount over $600.",
        "query": "SELECT COUNT ( DISTINCT account_id ) FROM financial_transactions WHERE transaction_amount > 600",
        "schema": "CREATE TABLE Accounts (account_name TEXT, account_id NUMBER, customer_id NUMBER); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Financial_Transactions (account_id NUMBER, transaction_amount NUMBER);"
      }
    ],
    [
      {
        "question": "How many products are there?",
        "query": "SELECT COUNT ( * ) FROM products",
        "schema": "CREATE TABLE Order_Items (product_id NUMBER, order_item_id NUMBER); CREATE TABLE Product_Categories (production_type_code TEXT); CREATE TABLE Accounts (customer_id NUMBER); CREATE TABLE Products (parent_product_id NUMBER, product_size TEXT, product_name TEXT, production_type_code TEXT, product_id NUMBER); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Invoice_Line_Items (order_item_id NUMBER, product_id NUMBER, product_price NUMBER, derived_product_cost NUMBER, product_title TEXT);"
      },
      {
        "question": "How many orders were there?",
        "query": "SELECT COUNT ( DISTINCT order_id ) FROM order_items",
        "schema": "CREATE TABLE Order_Items (order_id NUMBER, product_id NUMBER, order_item_id NUMBER); CREATE TABLE Products (product_size TEXT, product_id NUMBER, production_type_code TEXT, product_name TEXT, parent_product_id NUMBER); CREATE TABLE Orders (order_details TEXT, order_id NUMBER, customer_id NUMBER); CREATE TABLE Invoice_Line_Items (derived_product_cost NUMBER, product_price NUMBER, order_item_id NUMBER, product_title TEXT, product_id NUMBER); CREATE TABLE Accounts (customer_id NUMBER); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Product_Categories (production_type_code TEXT);"
      },
      {
        "question": "What is the total number of products not included in any of the orders?",
        "query": "SELECT COUNT ( * ) FROM products WHERE product_id NOT IN ( SELECT product_id FROM order_items )",
        "schema": "CREATE TABLE Product_Categories (production_type_code TEXT); CREATE TABLE Order_Items (order_id NUMBER, order_item_id NUMBER, product_id NUMBER, product_quantity TEXT); CREATE TABLE Invoice_Line_Items (product_id NUMBER, product_title TEXT, order_item_id NUMBER, product_price NUMBER, derived_product_cost NUMBER); CREATE TABLE Accounts (customer_id NUMBER); CREATE TABLE Orders (order_details TEXT, order_id NUMBER, customer_id NUMBER); CREATE TABLE Invoices (order_id NUMBER); CREATE TABLE Products (production_type_code TEXT, product_size TEXT, product_id NUMBER, product_name TEXT, parent_product_id NUMBER); CREATE TABLE Customers (customer_id NUMBER);"
      }
    ],
    [
      {
        "question": "What is the average amount of transaction?",
        "query": "SELECT AVG ( transaction_amount ) FROM financial_transactions",
        "schema": "CREATE TABLE Financial_Transactions (transaction_amount NUMBER, transaction_id NUMBER, account_id NUMBER, transaction_type TEXT); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Invoice_Line_Items (product_quantity TEXT, derived_total_cost NUMBER); CREATE TABLE Order_Items (product_quantity TEXT); CREATE TABLE Accounts (account_id NUMBER);"
      },
      {
        "question": "What are ids of all transactions with amount greater than the average?",
        "query": "SELECT transaction_id FROM financial_transactions WHERE transaction_amount > ( SELECT AVG ( transaction_amount ) FROM financial_transactions )",
        "schema": "CREATE TABLE Order_Items (product_quantity TEXT); CREATE TABLE Financial_Transactions (transaction_type TEXT, transaction_amount NUMBER, account_id NUMBER, transaction_id NUMBER); CREATE TABLE Accounts (account_id NUMBER); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Invoice_Line_Items (product_quantity TEXT, derived_total_cost NUMBER);"
      },
      {
        "question": "And what are their transaction dates?",
        "query": "SELECT transaction_date FROM financial_transactions WHERE transaction_amount > ( SELECT AVG ( transaction_amount ) FROM financial_transactions )",
        "schema": "CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Accounts (account_id NUMBER); CREATE TABLE Invoice_Line_Items (product_quantity TEXT, derived_total_cost NUMBER); CREATE TABLE Order_Items (product_quantity TEXT); CREATE TABLE Financial_Transactions (account_id NUMBER, transaction_date TIME, transaction_type TEXT, transaction_id NUMBER, transaction_amount NUMBER);"
      }
    ],
    [
      {
        "question": "Show the first name and last name for the customer with account name 900.",
        "query": "SELECT t2.customer_first_name , t2.customer_last_name FROM accounts AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id WHERE t1.account_name = \"900\"",
        "schema": "CREATE TABLE Accounts (account_id NUMBER, customer_id NUMBER, account_name TEXT); CREATE TABLE Customers (customer_id NUMBER, customer_first_name TEXT, customer_last_name TEXT, customer_middle_initial TEXT);"
      },
      {
        "question": "What is a login name of Dee A Larkin?",
        "query": "SELECT login_name FROM customers WHERE customer_first_name = \"Dee\" AND customer_middle_initial = \"A\" AND customer_last_name = \"Larkin\"",
        "schema": "CREATE TABLE Customers (customer_middle_initial TEXT, customer_id NUMBER, customer_first_name TEXT, login_name TEXT, login_password TEXT, customer_last_name TEXT, town_city TEXT); CREATE TABLE Accounts (account_name TEXT, customer_id NUMBER, account_id NUMBER);"
      },
      {
        "question": "Final question is How many customers in the table?",
        "query": "SELECT COUNT ( customer_id ) FROM customers",
        "schema": "CREATE TABLE Accounts (account_name TEXT, account_id NUMBER, customer_id NUMBER); CREATE TABLE Customers (customer_first_name TEXT, town_city TEXT, login_name TEXT, customer_middle_initial TEXT, login_password TEXT, customer_last_name TEXT, customer_id NUMBER);"
      }
    ],
    [
      {
        "question": "how many Invoices there",
        "query": "SELECT COUNT ( * ) FROM invoices",
        "schema": "CREATE TABLE Invoices (order_id NUMBER, invoice_number NUMBER); CREATE TABLE Invoice_Line_Items (product_id NUMBER, invoice_number NUMBER, derived_vat_payable NUMBER, product_price NUMBER, order_item_id NUMBER, product_title TEXT); CREATE TABLE Customers (customer_last_name TEXT, customer_first_name TEXT, customer_id NUMBER); CREATE TABLE Orders (order_id NUMBER, customer_id NUMBER); CREATE TABLE Accounts (customer_id NUMBER); CREATE TABLE Financial_Transactions (invoice_number NUMBER); CREATE TABLE Order_Items (order_item_id NUMBER);"
      },
      {
        "question": "how many orders there",
        "query": "SELECT COUNT ( * ) FROM orders",
        "schema": "CREATE TABLE Invoice_Line_Items (invoice_number NUMBER, product_title TEXT, derived_vat_payable NUMBER, order_item_id NUMBER, product_price NUMBER, product_id NUMBER); CREATE TABLE Customers (customer_first_name TEXT, customer_last_name TEXT, customer_id NUMBER); CREATE TABLE Invoices (invoice_number NUMBER, order_id NUMBER); CREATE TABLE Accounts (customer_id NUMBER); CREATE TABLE Order_Items (order_id NUMBER, order_item_id NUMBER); CREATE TABLE Orders (order_id NUMBER, order_details TEXT, customer_id NUMBER); CREATE TABLE Financial_Transactions (invoice_number NUMBER);"
      },
      {
        "question": "what is the customer id of order id 3",
        "query": "SELECT customer_id FROM orders WHERE order_id = 3",
        "schema": "CREATE TABLE Customers (customer_first_name TEXT, customer_last_name TEXT, customer_id NUMBER); CREATE TABLE Invoices (order_id NUMBER, invoice_number NUMBER); CREATE TABLE Invoice_Line_Items (order_item_id NUMBER, product_price NUMBER, product_id NUMBER, product_title TEXT, invoice_number NUMBER, derived_vat_payable NUMBER); CREATE TABLE Financial_Transactions (invoice_number NUMBER); CREATE TABLE Accounts (customer_id NUMBER); CREATE TABLE Orders (order_id NUMBER, order_details TEXT, customer_id NUMBER); CREATE TABLE Order_Items (order_id NUMBER, order_item_id NUMBER);"
      }
    ],
    [
      {
        "question": "* I have left the chat *",
        "query": "SELECT product_id FROM order_items WHERE order_item_id = 1",
        "schema": "CREATE TABLE Customers (email_address TEXT, customer_id NUMBER, login_name TEXT, customer_first_name TEXT, customer_last_name TEXT); CREATE TABLE Order_Items (order_item_id NUMBER, product_id NUMBER, order_id NUMBER); CREATE TABLE Invoices (invoice_number NUMBER); CREATE TABLE Invoice_Line_Items (order_item_id NUMBER, invoice_number NUMBER); CREATE TABLE Orders (order_id NUMBER, order_details TEXT, customer_id NUMBER); CREATE TABLE Accounts (account_name TEXT, account_id NUMBER, customer_id NUMBER);"
      },
      {
        "question": "How many product quantity does order item 1 have ?",
        "query": "SELECT product_quantity FROM order_items WHERE order_item_id = 1",
        "schema": "CREATE TABLE Invoice_Line_Items (invoice_number NUMBER, product_id NUMBER, order_item_id NUMBER, product_quantity TEXT); CREATE TABLE Customers (customer_id NUMBER, customer_first_name TEXT, login_name TEXT, email_address TEXT, customer_last_name TEXT); CREATE TABLE Accounts (customer_id NUMBER, account_id NUMBER, account_name TEXT); CREATE TABLE Order_Items (product_id NUMBER, order_item_id NUMBER, product_quantity TEXT, order_id NUMBER); CREATE TABLE Orders (order_id NUMBER, order_details TEXT, customer_id NUMBER); CREATE TABLE Products (product_id NUMBER); CREATE TABLE Invoices (invoice_number NUMBER, order_id NUMBER);"
      },
      {
        "question": "What is the product type code of order item 1?",
        "query": "SELECT production_type_code FROM order_items AS t1 JOIN products AS t2 ON t1.product_id = t2.product_id WHERE t1.order_item_id = 1",
        "schema": "CREATE TABLE Invoice_Line_Items (product_title TEXT, invoice_number NUMBER, order_item_id NUMBER, product_id NUMBER, product_quantity TEXT); CREATE TABLE Product_Categories (production_type_code TEXT); CREATE TABLE Invoices (order_id NUMBER, invoice_number NUMBER); CREATE TABLE Accounts (account_id NUMBER, customer_id NUMBER, account_name TEXT); CREATE TABLE Order_Items (product_quantity TEXT, order_item_id NUMBER, order_id NUMBER, product_id NUMBER); CREATE TABLE Products (production_type_code TEXT, product_name TEXT, product_id NUMBER); CREATE TABLE Customers (email_address TEXT, login_name TEXT, customer_id NUMBER, customer_last_name TEXT, customer_first_name TEXT); CREATE TABLE Orders (customer_id NUMBER, order_details TEXT, order_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show all product names and the number of customers having an order on each product.",
        "query": "SELECT t2.product_name , COUNT ( * ) FROM order_items AS t1 JOIN products AS t2 ON t1.product_id = t2.product_id JOIN orders AS t3 ON t3.order_id = t1.order_id GROUP BY t2.product_name",
        "schema": "CREATE TABLE Order_Items (order_item_id NUMBER, product_quantity TEXT, order_id NUMBER, product_id NUMBER); CREATE TABLE Products (product_name TEXT, product_id NUMBER, parent_product_id NUMBER); CREATE TABLE Customers (customer_id NUMBER, customer_first_name TEXT, customer_last_name TEXT); CREATE TABLE Invoice_Line_Items (order_item_id NUMBER, product_title TEXT, product_id NUMBER); CREATE TABLE Orders (customer_id NUMBER, order_id NUMBER); CREATE TABLE Accounts (customer_id NUMBER);"
      },
      {
        "question": "Please show me unit price of books?",
        "query": "SELECT unit_price FROM products WHERE production_type_code = \"Books\"",
        "schema": "CREATE TABLE Customers (customer_first_name TEXT, customer_last_name TEXT, customer_id NUMBER); CREATE TABLE Orders (customer_id NUMBER, order_id NUMBER); CREATE TABLE Accounts (customer_id NUMBER); CREATE TABLE Order_Items (order_id NUMBER, order_item_id NUMBER, product_id NUMBER, product_quantity TEXT); CREATE TABLE Products (parent_product_id NUMBER, unit_price NUMBER, product_id NUMBER, production_type_code TEXT, product_name TEXT); CREATE TABLE Invoice_Line_Items (order_item_id NUMBER, product_title TEXT, product_price NUMBER, derived_product_cost NUMBER, product_quantity TEXT, product_id NUMBER);"
      },
      {
        "question": "Please give me Placed order date of customer id 12?",
        "query": "SELECT date_order_placed FROM orders WHERE customer_id = 12",
        "schema": "CREATE TABLE Accounts (customer_id NUMBER); CREATE TABLE Order_Items (product_quantity TEXT, order_id NUMBER, product_id NUMBER, order_item_id NUMBER); CREATE TABLE Product_Categories (production_type_code TEXT); CREATE TABLE Products (parent_product_id NUMBER, unit_price NUMBER, product_name TEXT, product_id NUMBER, production_type_code TEXT); CREATE TABLE Orders (order_id NUMBER, customer_id NUMBER, date_order_placed TIME); CREATE TABLE Customers (customer_last_name TEXT, customer_id NUMBER, customer_first_name TEXT); CREATE TABLE Invoices (order_id NUMBER); CREATE TABLE Invoice_Line_Items (product_quantity TEXT, product_id NUMBER, derived_product_cost NUMBER, order_item_id NUMBER, product_title TEXT, product_price NUMBER);"
      }
    ],
    [
      {
        "question": "Hello! How many transactions are there total?",
        "query": "SELECT COUNT ( * ) FROM financial_transactions",
        "schema": "CREATE TABLE Financial_Transactions (account_id NUMBER, transaction_id NUMBER, transaction_comment TEXT, transaction_amount NUMBER, transaction_type TEXT); CREATE TABLE Orders (customer_id NUMBER, order_id NUMBER); CREATE TABLE Invoices (invoice_number NUMBER); CREATE TABLE Accounts (account_id NUMBER, customer_id NUMBER); CREATE TABLE Customers (customer_id NUMBER, customer_first_name TEXT, customer_last_name TEXT);"
      },
      {
        "question": "Perfect! And is there an account number of 337? | Do you mean the account name? | Yes the account name being 337.",
        "query": "SELECT * FROM accounts WHERE account_name = \"337\"",
        "schema": "CREATE TABLE Customers (customer_last_name TEXT, customer_id NUMBER, customer_first_name TEXT); CREATE TABLE Orders (order_id NUMBER, customer_id NUMBER); CREATE TABLE Accounts (customer_id NUMBER, account_name TEXT, account_id NUMBER); CREATE TABLE Invoices (invoice_number NUMBER); CREATE TABLE Financial_Transactions (transaction_id NUMBER, transaction_comment TEXT, transaction_type TEXT, account_id NUMBER, transaction_amount NUMBER);"
      },
      {
        "question": "How many total transactions does that account have?",
        "query": "SELECT COUNT ( * ) FROM financial_transactions AS t1 JOIN accounts AS t2 ON t1.account_id = t2.account_id WHERE t2.account_name = \"337\"",
        "schema": "CREATE TABLE Customers (customer_last_name TEXT, customer_first_name TEXT, customer_id NUMBER); CREATE TABLE Invoices (invoice_number NUMBER); CREATE TABLE Accounts (account_name TEXT, customer_id NUMBER, account_id NUMBER); CREATE TABLE Financial_Transactions (transaction_comment TEXT, transaction_type TEXT, transaction_id NUMBER, transaction_amount NUMBER, account_id NUMBER); CREATE TABLE Orders (order_id NUMBER, customer_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show the account name and other account detail for all accounts by the customer with first name Meaghan and last name Keeling?",
        "query": "SELECT t1.account_name , t1.other_account_details FROM accounts AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id WHERE t2.customer_first_name = \"Meaghan\" AND t2.customer_last_name = \"Keeling\"",
        "schema": "CREATE TABLE Accounts (account_name TEXT, other_account_details TEXT, account_id NUMBER, customer_id NUMBER); CREATE TABLE Customers (customer_id NUMBER, customer_first_name TEXT, customer_last_name TEXT);"
      },
      {
        "question": "what is the total number of customers?",
        "query": "SELECT COUNT ( * ) FROM customers",
        "schema": "CREATE TABLE Accounts (account_name TEXT, customer_id NUMBER, account_id NUMBER, other_account_details TEXT); CREATE TABLE Customers (customer_id NUMBER, customer_last_name TEXT, customer_first_name TEXT);"
      },
      {
        "question": "ok .Who is the number one customer? | Do you mean the customer with id 1 | yes",
        "query": "SELECT * FROM customers WHERE customer_id = 1",
        "schema": "CREATE TABLE Accounts (other_account_details TEXT, account_name TEXT, account_id NUMBER, customer_id NUMBER); CREATE TABLE Customers (customer_id NUMBER, customer_first_name TEXT, customer_last_name TEXT);"
      }
    ],
    [
      {
        "question": "Can you show me the first names of customers and the number of  accounts they have?",
        "query": "SELECT t2.customer_first_name, COUNT ( * ) FROM accounts AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id GROUP BY t1.customer_id",
        "schema": "CREATE TABLE Accounts (account_id NUMBER, account_name TEXT, customer_id NUMBER); CREATE TABLE Customers (customer_middle_initial TEXT, customer_id NUMBER, gender TEXT, customer_first_name TEXT, customer_last_name TEXT);"
      },
      {
        "question": "Which customers have at least 2 accounts? List their first names please.",
        "query": "SELECT t2.customer_first_name FROM accounts AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id GROUP BY t1.customer_id HAVING COUNT ( * ) > = 2",
        "schema": "CREATE TABLE Accounts (customer_id NUMBER, account_name TEXT, account_id NUMBER); CREATE TABLE Customers (gender TEXT, customer_middle_initial TEXT, customer_last_name TEXT, customer_first_name TEXT, customer_id NUMBER);"
      }
    ],
    [
      {
        "question": "Hello!  Can you provide me with the first and last name of the customer who has account name 900?",
        "query": "SELECT t2.customer_first_name , t2.customer_last_name FROM accounts AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id WHERE t1.account_name = \"900\"",
        "schema": "CREATE TABLE Customers (customer_middle_initial TEXT, customer_last_name TEXT, customer_id NUMBER, customer_first_name TEXT); CREATE TABLE Accounts (customer_id NUMBER, account_name TEXT, account_id NUMBER); CREATE TABLE Orders (customer_id NUMBER);"
      },
      {
        "question": "Great!  Could you update this list to show me Meaghan's email address and phone number as well?",
        "query": "SELECT t2.customer_first_name , t2.customer_last_name, t2.email_address, t2.phone_number FROM accounts AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id WHERE t1.account_name = \"900\"",
        "schema": "CREATE TABLE Orders (customer_id NUMBER); CREATE TABLE Customers (email_address TEXT, customer_first_name TEXT, customer_last_name TEXT, customer_id NUMBER, phone_number TEXT, customer_middle_initial TEXT); CREATE TABLE Accounts (account_id NUMBER, account_name TEXT, customer_id NUMBER);"
      },
      {
        "question": "Great! Finally, can you show me all other customers names (first and last) who have the same \"other account details\" details as Meaghan?",
        "query": "SELECT DISTINCT t2.customer_first_name , t2.customer_last_name FROM accounts AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id WHERE t1.other_account_details = ( SELECT other_account_details FROM accounts WHERE account_name = 900 )",
        "schema": "CREATE TABLE Orders (customer_id NUMBER); CREATE TABLE Accounts (other_account_details TEXT, account_id NUMBER, customer_id NUMBER, account_name TEXT); CREATE TABLE Customers (email_address TEXT, customer_id NUMBER, customer_first_name TEXT, phone_number TEXT, customer_middle_initial TEXT, customer_last_name TEXT);"
      }
    ],
    [
      {
        "question": "Hello, I was wondering how many accounts are listed under the first name of John?",
        "query": "SELECT COUNT ( DISTINCT account_id ) FROM customers AS t1 JOIN accounts AS t2 ON t2.customer_id = t1.customer_id WHERE customer_first_name = 'John'",
        "schema": "CREATE TABLE Customers (customer_last_name TEXT, customer_id NUMBER, customer_first_name TEXT); CREATE TABLE Accounts (customer_id NUMBER, account_id NUMBER, account_name TEXT);"
      },
      {
        "question": "How about Meaghan or Jessica?",
        "query": "SELECT COUNT ( DISTINCT account_id ) FROM customers AS t1 JOIN accounts AS t2 ON t2.customer_id = t1.customer_id WHERE customer_first_name = 'Meaghan' OR customer_first_name = 'Jessica'",
        "schema": "CREATE TABLE Accounts (customer_id NUMBER, account_name TEXT, account_id NUMBER); CREATE TABLE Customers (customer_first_name TEXT, customer_last_name TEXT, customer_id NUMBER);"
      },
      {
        "question": "Okay, could you just give me the account names listed under Meaghan first?",
        "query": "SELECT account_name FROM customers AS t1 JOIN accounts AS t2 ON t2.customer_id = t1.customer_id WHERE customer_first_name = 'Meaghan'",
        "schema": "CREATE TABLE Customers (customer_id NUMBER, customer_last_name TEXT, customer_first_name TEXT); CREATE TABLE Accounts (account_id NUMBER, account_name TEXT, customer_id NUMBER);"
      },
      {
        "question": "And what are the id's for those accounts?",
        "query": "SELECT account_id FROM customers AS t1 JOIN accounts AS t2 ON t2.customer_id = t1.customer_id WHERE customer_first_name = 'Meaghan'",
        "schema": "CREATE TABLE Customers (customer_last_name TEXT, customer_id NUMBER, customer_first_name TEXT); CREATE TABLE Accounts (account_id NUMBER, customer_id NUMBER, account_name TEXT);"
      },
      {
        "question": "Thank you so much, now back to the accounts listed for Jessica.  What are the account names of those?",
        "query": "SELECT account_name FROM customers AS t1 JOIN accounts AS t2 ON t2.customer_id = t1.customer_id WHERE customer_first_name = 'Jessica'",
        "schema": "CREATE TABLE Accounts (customer_id NUMBER, account_name TEXT, account_id NUMBER); CREATE TABLE Customers (customer_id NUMBER, customer_first_name TEXT, customer_last_name TEXT);"
      }
    ],
    [
      {
        "question": "What are first and last names of all customers?",
        "query": "SELECT customer_first_name , customer_last_name FROM customers",
        "schema": "CREATE TABLE Customers (customer_last_name TEXT, customer_id NUMBER, gender TEXT, customer_first_name TEXT); CREATE TABLE Accounts (account_name TEXT, customer_id NUMBER);"
      },
      {
        "question": "What are their ids?",
        "query": "SELECT customer_id FROM customers",
        "schema": "CREATE TABLE Customers (customer_first_name TEXT, customer_id NUMBER, gender TEXT, customer_last_name TEXT); CREATE TABLE Orders (customer_id NUMBER); CREATE TABLE Accounts (customer_id NUMBER, account_name TEXT);"
      },
      {
        "question": "And what are their number of accounts?",
        "query": "SELECT COUNT ( * ) FROM accounts AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id GROUP BY t1.customer_id",
        "schema": "CREATE TABLE Customers (customer_first_name TEXT, customer_last_name TEXT, customer_id NUMBER, gender TEXT); CREATE TABLE Accounts (account_id NUMBER, account_name TEXT, customer_id NUMBER); CREATE TABLE Orders (customer_id NUMBER);"
      },
      {
        "question": "Yes, what type of accounts are there?",
        "query": "SELECT DISTINCT other_account_details FROM accounts",
        "schema": "CREATE TABLE Customers (customer_last_name TEXT, customer_id NUMBER, gender TEXT, customer_first_name TEXT); CREATE TABLE Orders (customer_id NUMBER); CREATE TABLE Accounts (account_id NUMBER, customer_id NUMBER, other_account_details TEXT, account_name TEXT); CREATE TABLE Financial_Transactions (transaction_type TEXT);"
      }
    ],
    [
      {
        "question": "how many orders did the person with the most orders have?",
        "query": "SELECT COUNT ( * ) FROM orders GROUP BY customer_id ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Customers (customer_last_name TEXT, customer_first_name TEXT, customer_id NUMBER); CREATE TABLE Orders (order_id NUMBER, customer_id NUMBER, order_details TEXT); CREATE TABLE Accounts (customer_id NUMBER); CREATE TABLE Order_Items (order_id NUMBER); CREATE TABLE Invoices (order_id NUMBER);"
      },
      {
        "question": "who was that person? Give me the id.",
        "query": "SELECT customer_id FROM orders GROUP BY customer_id ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Orders (order_id NUMBER, customer_id NUMBER, order_details TEXT); CREATE TABLE Order_Items (order_id NUMBER); CREATE TABLE Customers (customer_id NUMBER, customer_last_name TEXT, customer_first_name TEXT); CREATE TABLE Invoices (order_id NUMBER); CREATE TABLE Accounts (account_name TEXT, customer_id NUMBER);"
      },
      {
        "question": "can you give me the last name, id, and phone number of the person with the most order?",
        "query": "SELECT t1.customer_last_name, t1.customer_id, t1.phone_number FROM customers AS t1 JOIN orders AS t2 ON t1.customer_id = t2.customer_id GROUP BY t2.customer_id ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Customers (customer_id NUMBER, customer_last_name TEXT, customer_first_name TEXT, phone_number TEXT); CREATE TABLE Orders (order_details TEXT, customer_id NUMBER, order_id NUMBER); CREATE TABLE Order_Items (order_id NUMBER); CREATE TABLE Invoices (order_id NUMBER); CREATE TABLE Accounts (account_name TEXT, customer_id NUMBER);"
      }
    ],
    [
      {
        "question": "how many orders does the customer with the most orders have?",
        "query": "SELECT COUNT ( * ) FROM orders AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id GROUP BY t1.customer_id ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Order_Items (order_id NUMBER); CREATE TABLE Customers (customer_last_name TEXT, gender TEXT, customer_middle_initial TEXT, customer_id NUMBER, customer_first_name TEXT); CREATE TABLE Invoices (order_id NUMBER); CREATE TABLE Accounts (customer_id NUMBER); CREATE TABLE Orders (order_id NUMBER, customer_id NUMBER, order_details TEXT);"
      },
      {
        "question": "who has the second most orders? | Do you want the customer first name or something else? | something else, that was a typo. What I meant to say was, how many orders does the person with the second most orders have?",
        "query": "SELECT COUNT ( * ) FROM orders AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id GROUP BY t1.customer_id ORDER BY COUNT ( * ) DESC LIMIT 2",
        "schema": "CREATE TABLE Customers (gender TEXT, customer_first_name TEXT, customer_id NUMBER, customer_last_name TEXT, customer_middle_initial TEXT); CREATE TABLE Invoices (order_id NUMBER); CREATE TABLE Accounts (account_name TEXT, customer_id NUMBER); CREATE TABLE Order_Items (order_id NUMBER); CREATE TABLE Orders (order_details TEXT, order_id NUMBER, customer_id NUMBER);"
      },
      {
        "question": "when was the customer with the most order's last order placed?",
        "query": "SELECT date_order_placed FROM orders WHERE customer_id IN ( SELECT t1.customer_id FROM orders AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id GROUP BY t1.customer_id ORDER BY COUNT ( * ) DESC LIMIT 1 ) ORDER BY date_order_placed DESC LIMIT 1",
        "schema": "CREATE TABLE Accounts (account_name TEXT, customer_id NUMBER); CREATE TABLE Invoices (order_id NUMBER); CREATE TABLE Customers (customer_id NUMBER, customer_first_name TEXT, customer_middle_initial TEXT, gender TEXT, customer_last_name TEXT); CREATE TABLE Order_Items (order_id NUMBER); CREATE TABLE Orders (order_details TEXT, customer_id NUMBER, date_order_placed TIME, order_id NUMBER);"
      },
      {
        "question": "what is that customer's gender?",
        "query": "SELECT t2.gender FROM orders AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id GROUP BY t1.customer_id ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Customers (customer_middle_initial TEXT, customer_first_name TEXT, gender TEXT, customer_id NUMBER, customer_last_name TEXT); CREATE TABLE Accounts (account_name TEXT, customer_id NUMBER); CREATE TABLE Orders (order_details TEXT, order_id NUMBER, customer_id NUMBER, date_order_placed TIME); CREATE TABLE Invoices (order_id NUMBER); CREATE TABLE Order_Items (order_id NUMBER);"
      }
    ],
    [
      {
        "question": "What is the customer ID of the customer with the most number of accounts?",
        "query": "SELECT t1.customer_id FROM accounts AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id GROUP BY t1.customer_id ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Customers (customer_middle_initial TEXT, customer_last_name TEXT, customer_id NUMBER, gender TEXT, customer_first_name TEXT); CREATE TABLE Orders (customer_id NUMBER); CREATE TABLE Accounts (account_name TEXT, account_id NUMBER, customer_id NUMBER);"
      },
      {
        "question": "What is their first name? | Do  you mean  their  ?can  you  give more  info? | What is the customer first name of the customer with the most number of accounts?",
        "query": "SELECT t2.customer_first_name FROM accounts AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id GROUP BY t1.customer_id ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Customers (customer_first_name TEXT, gender TEXT, customer_last_name TEXT, customer_id NUMBER, customer_middle_initial TEXT); CREATE TABLE Accounts (account_name TEXT, account_id NUMBER, customer_id NUMBER); CREATE TABLE Orders (customer_id NUMBER);"
      },
      {
        "question": "What is the customer last name of the customer with the most number of accounts?",
        "query": "SELECT t2.customer_last_name FROM accounts AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id GROUP BY t1.customer_id ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Accounts (account_id NUMBER, account_name TEXT, customer_id NUMBER); CREATE TABLE Customers (customer_middle_initial TEXT, gender TEXT, customer_id NUMBER, customer_first_name TEXT, customer_last_name TEXT); CREATE TABLE Orders (customer_id NUMBER);"
      }
    ]
  ],
  "local_govt_in_alabama": [
    [
      {
        "question": "how many participants on the table",
        "query": "SELECT COUNT ( * ) FROM participants",
        "schema": "CREATE TABLE Participants (Participant_ID NUMBER, Participant_Details TEXT, Participant_Type_Code TEXT); CREATE TABLE Participants_in_Events (Event_ID NUMBER, Participant_ID NUMBER);"
      },
      {
        "question": "what is participant type code of karlee batz",
        "query": "SELECT participant_type_code FROM participants WHERE participant_details = \"Karlee Batz\"",
        "schema": "CREATE TABLE Participants_in_Events (Participant_ID NUMBER, Event_ID NUMBER); CREATE TABLE Participants (Participant_Type_Code TEXT, Participant_ID NUMBER, Participant_Details TEXT);"
      },
      {
        "question": "what is most common participant type",
        "query": "SELECT participant_type_code FROM participants GROUP BY participant_type_code ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Participants (Participant_Details TEXT, Participant_Type_Code TEXT, Participant_ID NUMBER); CREATE TABLE Participants_in_Events (Participant_ID NUMBER, Event_ID NUMBER);"
      },
      {
        "question": "what is the participant id in lupe deckow",
        "query": "SELECT participant_id FROM participants WHERE participant_details = \"Lupe Deckow\"",
        "schema": "CREATE TABLE Participants_in_Events (Event_ID NUMBER, Participant_ID NUMBER); CREATE TABLE Participants (Participant_Details TEXT, Participant_ID NUMBER, Participant_Type_Code TEXT);"
      }
    ],
    [
      {
        "question": "Show me the details of all participants.",
        "query": "SELECT * FROM participants_in_events",
        "schema": "CREATE TABLE Participants_in_Events (Event_ID NUMBER, Participant_ID NUMBER); CREATE TABLE Participants (Participant_ID NUMBER, Participant_Type_Code TEXT, Participant_Details TEXT); CREATE TABLE Events (Event_Details TEXT, Event_ID NUMBER);"
      },
      {
        "question": "show me the details of the events. | here are the details of all events | How many events did not have any participants?",
        "query": "SELECT COUNT ( * ) FROM EVENTS WHERE event_id NOT IN ( SELECT event_id FROM participants_in_events )",
        "schema": "CREATE TABLE Participants (Participant_Type_Code TEXT, Participant_Details TEXT, Participant_ID NUMBER); CREATE TABLE Participants_in_Events (Event_ID NUMBER, Participant_ID NUMBER); CREATE TABLE Events (Event_ID NUMBER, Event_Details TEXT);"
      }
    ],
    [
      {
        "question": "How many events with \"Marriage\" type codes are there? | There are 5 events with the \"Marriage\" service type code. | What are event details associated with the event of this type code?",
        "query": "SELECT t1.event_details FROM EVENTS AS t1 JOIN services AS t2 ON t1.service_id = t2.service_id WHERE t2.service_type_code = 'Marriage'",
        "schema": "CREATE TABLE Events (Event_ID NUMBER, Service_ID NUMBER, Event_Details TEXT); CREATE TABLE Participants (Participant_Type_Code TEXT); CREATE TABLE Services (Service_Type_Code TEXT, Service_ID NUMBER);"
      },
      {
        "question": "How many among them are with \"success\"?",
        "query": "SELECT COUNT ( * ) FROM EVENTS AS t1 JOIN services AS t2 ON t1.service_id = t2.service_id WHERE t2.service_type_code = 'Marriage' AND event_details = 'Success'",
        "schema": "CREATE TABLE Services (Service_Type_Code TEXT, Service_ID NUMBER); CREATE TABLE Events (Event_Details TEXT, Event_ID NUMBER, Service_ID NUMBER); CREATE TABLE Participants (Participant_Type_Code TEXT);"
      }
    ],
    [
      {
        "question": "How many participants are there?",
        "query": "SELECT COUNT ( * ) FROM participants",
        "schema": "CREATE TABLE Participants_in_Events (Event_ID NUMBER, Participant_ID NUMBER); CREATE TABLE Participants (Participant_Type_Code TEXT, Participant_Details TEXT, Participant_ID NUMBER);"
      },
      {
        "question": "How about the total number of events?",
        "query": "SELECT COUNT ( DISTINCT event_id ) FROM participants_in_events",
        "schema": "CREATE TABLE Participants (Participant_Details TEXT, Participant_ID NUMBER, Participant_Type_Code TEXT); CREATE TABLE Events (Event_ID NUMBER); CREATE TABLE Participants_in_Events (Participant_ID NUMBER, Event_ID NUMBER);"
      },
      {
        "question": "Can you list the events that have participents whose details had the substring 'Dr.'?",
        "query": "SELECT t2.event_id FROM participants AS t1 JOIN participants_in_events AS t2 ON t1.participant_id = t2.participant_id WHERE t1.participant_details LIKE '%Dr.%'",
        "schema": "CREATE TABLE Events (Event_ID NUMBER, Event_Details TEXT); CREATE TABLE Participants (Participant_Type_Code TEXT, Participant_Details TEXT, Participant_ID NUMBER); CREATE TABLE Participants_in_Events (Participant_ID NUMBER, Event_ID NUMBER);"
      },
      {
        "question": "Can you please list all those events with their participants' names?",
        "query": "SELECT t2.event_id, t1.participant_details FROM participants AS t1 JOIN participants_in_events AS t2 ON t1.participant_id = t2.participant_id",
        "schema": "CREATE TABLE Events (Event_ID NUMBER, Event_Details TEXT); CREATE TABLE Participants_in_Events (Event_ID NUMBER, Participant_ID NUMBER); CREATE TABLE Participants (Participant_Type_Code TEXT, Participant_Details TEXT, Participant_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Which services type had successful event details?",
        "query": "SELECT t1.service_type_code FROM services AS t1 JOIN EVENTS AS t2 ON t1.service_id = t2.service_id WHERE t2.event_details = 'Success'",
        "schema": "CREATE TABLE Services (Service_ID NUMBER, Service_Type_Code TEXT); CREATE TABLE Participants (Participant_Type_Code TEXT); CREATE TABLE Events (Event_ID NUMBER, Event_Details TEXT, Service_ID NUMBER);"
      },
      {
        "question": "What about events that had failure for their event details?",
        "query": "SELECT t1.service_type_code FROM services AS t1 JOIN EVENTS AS t2 ON t1.service_id = t2.service_id WHERE t2.event_details = 'Fail'",
        "schema": "CREATE TABLE Events (Event_Details TEXT, Service_ID NUMBER, Event_ID NUMBER); CREATE TABLE Services (Service_ID NUMBER, Service_Type_Code TEXT); CREATE TABLE Participants (Participant_Type_Code TEXT);"
      },
      {
        "question": "Which service types had both success and failure for their event details?",
        "query": "SELECT t1.service_type_code FROM services AS t1 JOIN EVENTS AS t2 ON t1.service_id = t2.service_id WHERE t2.event_details = 'Success' INTERSECT SELECT t1.service_type_code FROM services AS t1 JOIN EVENTS AS t2 ON t1.service_id = t2.service_id WHERE t2.event_details = 'Fail'",
        "schema": "CREATE TABLE Participants (Participant_Type_Code TEXT); CREATE TABLE Services (Service_Type_Code TEXT, Service_ID NUMBER); CREATE TABLE Events (Service_ID NUMBER, Event_ID NUMBER, Event_Details TEXT);"
      }
    ],
    [
      {
        "question": "Which event id does not have any participant with the detail Kneyatta Kuhn?",
        "query": "SELECT event_id FROM EVENTS EXCEPT SELECT t1.event_id FROM participants_in_events AS t1 JOIN participants AS t2 ON t1.participant_id = t2.participant_id WHERE participant_details = 'Kenyatta Kuhn'",
        "schema": "CREATE TABLE Events (Event_ID NUMBER, Event_Details TEXT); CREATE TABLE Participants_in_Events (Event_ID NUMBER, Participant_ID NUMBER); CREATE TABLE Participants (Participant_Details TEXT, Participant_ID NUMBER);"
      },
      {
        "question": "And how about the detail \"Karlee Batz\"?",
        "query": "SELECT event_id FROM EVENTS EXCEPT SELECT t1.event_id FROM participants_in_events AS t1 JOIN participants AS t2 ON t1.participant_id = t2.participant_id WHERE participant_details = 'Karlee Batz'",
        "schema": "CREATE TABLE Participants_in_Events (Event_ID NUMBER, Participant_ID NUMBER); CREATE TABLE Participants (Participant_ID NUMBER, Participant_Details TEXT); CREATE TABLE Events (Event_ID NUMBER, Event_Details TEXT);"
      },
      {
        "question": "Which event id does have a participant with the detail Kenyatta Kuhn?",
        "query": "SELECT t1.event_id FROM EVENTS AS t1 JOIN participants_in_events AS t2 JOIN participants AS t3 WHERE participant_details = 'Kenyatta Kuhn'",
        "schema": "CREATE TABLE Events (Event_ID NUMBER, Event_Details TEXT); CREATE TABLE Participants_in_Events (Event_ID NUMBER, Participant_ID NUMBER); CREATE TABLE Participants (Participant_ID NUMBER, Participant_Details TEXT);"
      },
      {
        "question": "How many events have the event detail fail?",
        "query": "SELECT COUNT ( * ) FROM EVENTS WHERE event_details = 'Fail'",
        "schema": "CREATE TABLE Participants_in_Events (Event_ID NUMBER, Participant_ID NUMBER); CREATE TABLE Participants (Participant_Details TEXT, Participant_ID NUMBER); CREATE TABLE Events (Event_Details TEXT, Event_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What ids have more than one participant? | Which kind of ID do you mean? | Event ID and Service ID",
        "query": "SELECT t1.event_id , t1.service_id FROM EVENTS AS t1 JOIN participants_in_events AS t2 ON t1.event_id = t2.event_id GROUP BY t1.event_id HAVING COUNT ( * ) > 1",
        "schema": "CREATE TABLE Events (Service_ID NUMBER, Event_ID NUMBER); CREATE TABLE Services (Service_ID NUMBER, Service_Type_Code TEXT); CREATE TABLE Participants_in_Events (Event_ID NUMBER, Participant_ID NUMBER); CREATE TABLE Participants (Participant_ID NUMBER, Participant_Type_Code TEXT);"
      },
      {
        "question": "And which Event Details have more than one participant? | Do you mean the Event Details of the event? | I mean the details of the events that have more than one participant.",
        "query": "SELECT t1.event_details FROM EVENTS AS t1 JOIN participants_in_events AS t2 ON t1.event_id = t2.event_id GROUP BY t1.event_id HAVING COUNT ( * ) > 1",
        "schema": "CREATE TABLE Participants_in_Events (Participant_ID NUMBER, Event_ID NUMBER); CREATE TABLE Events (Event_ID NUMBER, Service_ID NUMBER, Event_Details TEXT); CREATE TABLE Services (Service_ID NUMBER, Service_Type_Code TEXT); CREATE TABLE Participants (Participant_ID NUMBER, Participant_Details TEXT, Participant_Type_Code TEXT);"
      }
    ],
    [
      {
        "question": "How many events are there?",
        "query": "SELECT COUNT ( DISTINCT event_id ) FROM participants_in_events",
        "schema": "CREATE TABLE Events (Event_ID NUMBER, Event_Details TEXT); CREATE TABLE Participants_in_Events (Participant_ID NUMBER, Event_ID NUMBER); CREATE TABLE Participants (Participant_ID NUMBER);"
      },
      {
        "question": "How many of them had participants whose details had substring \"Dr\"?",
        "query": "SELECT COUNT ( * ) FROM participants AS t1 JOIN participants_in_events AS t2 ON t1.participant_id = t2.participant_id WHERE t1.participant_details LIKE '%Dr.%'",
        "schema": "CREATE TABLE Participants (Participant_Type_Code TEXT, Participant_ID NUMBER, Participant_Details TEXT); CREATE TABLE Participants_in_Events (Participant_ID NUMBER, Event_ID NUMBER); CREATE TABLE Events (Event_Details TEXT, Event_ID NUMBER);"
      },
      {
        "question": "What is his name?",
        "query": "SELECT participant_details FROM participants AS t1 JOIN participants_in_events AS t2 ON t1.participant_id = t2.participant_id WHERE t1.participant_details LIKE '%Dr.%'",
        "schema": "CREATE TABLE Events (Event_Details TEXT, Event_ID NUMBER); CREATE TABLE Participants (Participant_Details TEXT, Participant_ID NUMBER, Participant_Type_Code TEXT); CREATE TABLE Participants_in_Events (Event_ID NUMBER, Participant_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Excellent!  Can you show me a list of the event IDs and event details for each of those five events which have more than one participant?",
        "query": "SELECT t1.event_id , t1.event_details FROM EVENTS AS t1 JOIN participants_in_events AS t2 ON t1.event_id = t2.event_id GROUP BY t1.event_id HAVING COUNT ( * ) > 1",
        "schema": "CREATE TABLE Participants_in_Events (Participant_ID NUMBER, Event_ID NUMBER); CREATE TABLE Participants (Participant_Details TEXT, Participant_ID NUMBER); CREATE TABLE Events (Event_ID NUMBER, Event_Details TEXT);"
      }
    ]
  ],
  "match_season": [
    [
      {
        "question": "Tell me the Draft Class for the season 1996.0 ?",
        "query": "SELECT draft_class FROM match_season WHERE season = 1996.0",
        "schema": "CREATE TABLE match_season (Draft_Class TEXT, Season NUMBER, Draft_Pick_Number NUMBER); CREATE TABLE player (Player_ID NUMBER, Player TEXT);"
      },
      {
        "question": "Tell me the Draft Pick Number for the country 6 ? | For which season do you want? | for 1998.0",
        "query": "SELECT draft_pick_number FROM match_season WHERE season = \"1998.0\" AND country = \"6\"",
        "schema": "CREATE TABLE match_season (Country NUMBER, Draft_Pick_Number NUMBER, Draft_Class TEXT, Season NUMBER); CREATE TABLE country (Country_name TEXT, Country_id NUMBER); CREATE TABLE player (Player_ID NUMBER, Player TEXT);"
      },
      {
        "question": "Tell me the player for team 1 in the season 1996 ?",
        "query": "SELECT player FROM match_season WHERE season = \"1996.0\" AND team = \"1\"",
        "schema": "CREATE TABLE match_season (Season NUMBER, Country NUMBER, Player TEXT, Draft_Class TEXT, Team NUMBER, Draft_Pick_Number NUMBER); CREATE TABLE team (Team_id NUMBER, Name TEXT); CREATE TABLE player (Team NUMBER, Player_ID NUMBER, Player TEXT, Years_Played TEXT); CREATE TABLE country (Country_id NUMBER, Country_name TEXT);"
      },
      {
        "question": "Which college have both players with position midfielder and players with position defender ?",
        "query": "SELECT college FROM match_season WHERE POSITION = \"Midfielder\" INTERSECT SELECT college FROM match_season WHERE POSITION = \"Defender\"",
        "schema": "CREATE TABLE match_season (Country NUMBER, Player TEXT, Season NUMBER, College TEXT, Draft_Class TEXT, Draft_Pick_Number NUMBER, Team NUMBER, Position TEXT); CREATE TABLE country (Country_id NUMBER, Country_name TEXT); CREATE TABLE team (Team_id NUMBER, Name TEXT); CREATE TABLE player (Player TEXT, Team NUMBER, Years_Played TEXT, Player_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Hello \nYes, I'm interested to know which college has two players",
        "query": "SELECT college FROM match_season GROUP BY college HAVING COUNT ( * ) = 2",
        "schema": "CREATE TABLE match_season (College TEXT, Player TEXT); CREATE TABLE team (Team_id NUMBER); CREATE TABLE player (Player TEXT, Player_ID NUMBER);"
      },
      {
        "question": "Oh, I see, and what are the names of the players from UCLA?",
        "query": "SELECT player FROM match_season WHERE college = 'UCLA'",
        "schema": "CREATE TABLE match_season (Season NUMBER, College TEXT, Player TEXT); CREATE TABLE player (Player_ID NUMBER, Player TEXT); CREATE TABLE team (Name TEXT, Team_id NUMBER);"
      },
      {
        "question": "Can you also tell me which position they play?",
        "query": "SELECT player,POSITION FROM match_season WHERE college = 'UCLA'",
        "schema": "CREATE TABLE player (Player TEXT, Player_ID NUMBER); CREATE TABLE team (Team_id NUMBER, Name TEXT); CREATE TABLE match_season (Season NUMBER, College TEXT, Position TEXT, Player TEXT);"
      },
      {
        "question": "Great, I'm a bit curious as to how many players does UNLV have",
        "query": "SELECT COUNT ( * ) FROM match_season WHERE college = 'UNLV'",
        "schema": "CREATE TABLE match_season (Season NUMBER, Position TEXT, Player TEXT, College TEXT); CREATE TABLE player (Player_ID NUMBER, Player TEXT, Total_WL TEXT); CREATE TABLE team (Team_id NUMBER, Name TEXT);"
      },
      {
        "question": "One player, okay was the season 1997?",
        "query": "SELECT season FROM match_season WHERE college = 'UNLV'",
        "schema": "CREATE TABLE player (Player TEXT, Total_WL TEXT, Years_Played TEXT, Player_ID NUMBER); CREATE TABLE team (Team_id NUMBER, Name TEXT); CREATE TABLE match_season (Player TEXT, Season NUMBER, Position TEXT, College TEXT);"
      }
    ],
    [
      {
        "question": "What colleges do the players play for? | * I have left the chat * | Yes, please",
        "query": "SELECT DISTINCT college FROM match_season",
        "schema": "CREATE TABLE match_season (Season NUMBER, College TEXT, Player TEXT); CREATE TABLE player (Player TEXT, Player_ID NUMBER);"
      },
      {
        "question": "Thank you. And what are the names of the players who play for those schools?",
        "query": "SELECT player FROM match_season",
        "schema": "CREATE TABLE team (Team_id NUMBER, Name TEXT); CREATE TABLE player (Team NUMBER, Player_ID NUMBER, Player TEXT); CREATE TABLE match_season (Season NUMBER, College TEXT, Team NUMBER, Player TEXT);"
      },
      {
        "question": "Thank you. Which players play midfielder?",
        "query": "SELECT player FROM match_season WHERE POSITION = 'Midfielder'",
        "schema": "CREATE TABLE match_season (Player TEXT, Season NUMBER, College TEXT, Team NUMBER, Position TEXT); CREATE TABLE team (Team_id NUMBER, Name TEXT); CREATE TABLE player (Player TEXT, Team NUMBER, Player_ID NUMBER);"
      },
      {
        "question": "Which college have both players with position midfielder and players with position defender?",
        "query": "SELECT college FROM match_season WHERE POSITION = \"Midfielder\" INTERSECT SELECT college FROM match_season WHERE POSITION = \"Defender\"",
        "schema": "CREATE TABLE match_season (College TEXT, Season NUMBER, Player TEXT, Position TEXT, Team NUMBER); CREATE TABLE team (Name TEXT, Team_id NUMBER); CREATE TABLE player (Player_ID NUMBER, Team NUMBER, Player TEXT);"
      }
    ],
    [
      {
        "question": "how many different languages do countries speak?",
        "query": "SELECT COUNT ( DISTINCT official_native_language ) FROM country",
        "schema": "CREATE TABLE match_season (Country NUMBER); CREATE TABLE country (Country_id NUMBER, Official_native_language TEXT, Country_name TEXT); CREATE TABLE player (Player TEXT, Player_ID NUMBER);"
      },
      {
        "question": "how  many of them are some form of English?",
        "query": "SELECT COUNT ( DISTINCT official_native_language ) FROM country WHERE official_native_language LIKE \"%English%\"",
        "schema": "CREATE TABLE match_season (Country NUMBER); CREATE TABLE player (Player_ID NUMBER, Player TEXT); CREATE TABLE country (Official_native_language TEXT, Country_id NUMBER, Country_name TEXT);"
      },
      {
        "question": "please list those languages",
        "query": "SELECT official_native_language FROM country WHERE official_native_language LIKE \"%English%\"",
        "schema": "CREATE TABLE player (Player_ID NUMBER, Player TEXT); CREATE TABLE match_season (Country NUMBER); CREATE TABLE country (Official_native_language TEXT, Country_id NUMBER, Country_name TEXT);"
      }
    ],
    [
      {
        "question": "WHAT IS THE Indonesia CAPITAL",
        "query": "SELECT capital FROM country WHERE country_name = \"Indonesia\"",
        "schema": "CREATE TABLE country (Country_id NUMBER, Capital TEXT, Country_name TEXT); CREATE TABLE match_season (Country NUMBER);"
      },
      {
        "question": "WHAT IS THE Iran\tOF CAPITAL | Did you mean the capital of the country named Iran? | YES EXACTLY",
        "query": "SELECT capital FROM country WHERE country_name = \"Iran\"",
        "schema": "CREATE TABLE country (Country_name TEXT, Capital TEXT, Country_id NUMBER); CREATE TABLE match_season (Country NUMBER);"
      },
      {
        "question": "HOW MANY DISTINCT OFFICIAL LANGUAGES ARE THERE AMONG COUNTRIES  OF PLAYERS WHOSE POSITIONS ARE DEFENDERS",
        "query": "SELECT COUNT ( DISTINCT t1.official_native_language ) FROM country AS t1 JOIN match_season AS t2 ON t1.country_id = t2.country WHERE t2.position = \"Defender\"",
        "schema": "CREATE TABLE country (Official_native_language TEXT, Country_name TEXT, Country_id NUMBER, Capital TEXT); CREATE TABLE player (Player_ID NUMBER, Player TEXT); CREATE TABLE match_season (Country NUMBER, Position TEXT);"
      }
    ],
    [
      {
        "question": "Show the players and years played for players from team \"Columbus Crew\".",
        "query": "SELECT t1.player , t1.years_played FROM player AS t1 JOIN team AS t2 ON t1.team = t2.team_id WHERE t2.name = \"Columbus Crew\"",
        "schema": "CREATE TABLE player (Player TEXT, Total_WL TEXT, Years_Played TEXT, Team NUMBER, Player_ID NUMBER); CREATE TABLE team (Team_id NUMBER, Name TEXT); CREATE TABLE match_season (Season NUMBER, Player TEXT, Team NUMBER);"
      },
      {
        "question": "What is Hong's singles record?",
        "query": "SELECT singles_wl FROM player WHERE player like \"%Hong%\"",
        "schema": "CREATE TABLE team (Name TEXT, Team_id NUMBER); CREATE TABLE match_season (Player TEXT, Season NUMBER, Team NUMBER); CREATE TABLE player (Years_Played TEXT, Team NUMBER, Player_ID NUMBER, Doubles_WL TEXT, Player TEXT, Total_WL TEXT, Singles_WL TEXT);"
      }
    ],
    [
      {
        "question": "how many countries are participated?",
        "query": "SELECT COUNT ( DISTINCT country ) FROM match_season",
        "schema": "CREATE TABLE country (Country_name TEXT, Country_id NUMBER); CREATE TABLE match_season (Country NUMBER); CREATE TABLE player (Player TEXT, Player_ID NUMBER);"
      },
      {
        "question": "how many players are participated?",
        "query": "SELECT COUNT ( DISTINCT player ) FROM match_season",
        "schema": "CREATE TABLE match_season (Season NUMBER, Player TEXT, Country NUMBER); CREATE TABLE country (Country_id NUMBER, Country_name TEXT); CREATE TABLE player (Total_WL TEXT, Player TEXT, Player_ID NUMBER);"
      },
      {
        "question": "how many colleges are participated?",
        "query": "SELECT COUNT ( DISTINCT college ) FROM match_season",
        "schema": "CREATE TABLE match_season (Country NUMBER, Season NUMBER, College TEXT, Player TEXT); CREATE TABLE country (Country_name TEXT, Country_id NUMBER); CREATE TABLE player (Player TEXT, Player_ID NUMBER, Total_WL TEXT);"
      }
    ],
    [
      {
        "question": "Yes, sorry that I didn't make it clear. I meant the corresponding name and ID of the country for Dublin as capital, in the \"country\" table.",
        "query": "SELECT country_name, country_id FROM country WHERE capital = \"Dublin\"",
        "schema": "CREATE TABLE match_season (Country NUMBER); CREATE TABLE country (Capital TEXT, Country_name TEXT, Country_id NUMBER);"
      },
      {
        "question": "Thank you. Then could you please show me the positions of players from Ireland? So country ID 4",
        "query": "SELECT POSITION FROM match_season WHERE country = 4",
        "schema": "CREATE TABLE country (Capital TEXT, Country_id NUMBER, Country_name TEXT); CREATE TABLE match_season (Player TEXT, Country NUMBER, Position TEXT); CREATE TABLE player (Player TEXT, Player_ID NUMBER);"
      },
      {
        "question": "Great, thank you. What about their names?",
        "query": "SELECT player FROM match_season WHERE country = 4",
        "schema": "CREATE TABLE country (Country_id NUMBER, Country_name TEXT, Capital TEXT); CREATE TABLE match_season (Country NUMBER, Position TEXT, Season NUMBER, Player TEXT); CREATE TABLE player (Player TEXT, Player_ID NUMBER); CREATE TABLE team (Team_id NUMBER, Name TEXT);"
      },
      {
        "question": "Thank you. Then could you please show me the players from Iraq? | Do you want their names? | yes, the 'player' field, so names.",
        "query": "SELECT t1.player FROM match_season AS t1 JOIN country AS t2 ON t1.country = t2.country_id WHERE t2.country_name = \"Iraq\"",
        "schema": "CREATE TABLE team (Name TEXT, Team_id NUMBER); CREATE TABLE match_season (Player TEXT, Season NUMBER, Position TEXT, Country NUMBER); CREATE TABLE player (Player TEXT, Player_ID NUMBER); CREATE TABLE country (Capital TEXT, Country_id NUMBER, Country_name TEXT);"
      }
    ],
    [
      {
        "question": "What are the different colleges this season?",
        "query": "SELECT DISTINCT college FROM match_season",
        "schema": "CREATE TABLE match_season (College TEXT, Season NUMBER); CREATE TABLE player (Player TEXT, Player_ID NUMBER);"
      },
      {
        "question": "How many players are playing for the listed colleges?",
        "query": "SELECT college, COUNT ( * ) FROM match_season GROUP BY college",
        "schema": "CREATE TABLE match_season (Player TEXT, Season NUMBER, College TEXT); CREATE TABLE player (Player TEXT, Total_WL TEXT, Player_ID NUMBER);"
      },
      {
        "question": "What are the draft classes for the players from UCLA and Duke?",
        "query": "SELECT DISTINCT draft_class FROM match_season WHERE college = \"UCLA\" OR college = \"Duke\"",
        "schema": "CREATE TABLE match_season (College TEXT, Player TEXT, Season NUMBER, Draft_Pick_Number NUMBER, Draft_Class TEXT); CREATE TABLE player (Total_WL TEXT, Player TEXT, Player_ID NUMBER);"
      },
      {
        "question": "Could you tell me the draft pick numbers of the players from those draft classes?",
        "query": "SELECT draft_pick_number FROM match_season WHERE draft_class IN ( SELECT DISTINCT draft_class FROM match_season WHERE college = \"UCLA\" OR college = \"Duke\" )",
        "schema": "CREATE TABLE player (Player TEXT, Total_WL TEXT, Player_ID NUMBER); CREATE TABLE match_season (College TEXT, Draft_Pick_Number NUMBER, Season NUMBER, Draft_Class TEXT, Player TEXT);"
      },
      {
        "question": "What players were those draft pick numbers for? | do you want to see both the players and the draft pick numbers? | Yes please.",
        "query": "SELECT player, draft_pick_number FROM match_season WHERE draft_class IN ( SELECT DISTINCT draft_class FROM match_season WHERE college = \"UCLA\" OR college = \"Duke\" )",
        "schema": "CREATE TABLE player (Total_WL TEXT, Player TEXT, Player_ID NUMBER); CREATE TABLE match_season (Draft_Class TEXT, Season NUMBER, Player TEXT, College TEXT, Draft_Pick_Number NUMBER);"
      },
      {
        "question": "What are the positions of each of those players?",
        "query": "SELECT POSITION, player, draft_pick_number FROM match_season WHERE draft_class IN ( SELECT DISTINCT draft_class FROM match_season WHERE college = \"UCLA\" OR college = \"Duke\" )",
        "schema": "CREATE TABLE match_season (College TEXT, Player TEXT, Draft_Class TEXT, Season NUMBER, Position TEXT, Draft_Pick_Number NUMBER); CREATE TABLE player (Total_WL TEXT, Player TEXT, Player_ID NUMBER);"
      }
    ],
    [
      {
        "question": "WHAT ARE THE DISTINCT POSITIONS OF THE PLAYERS FROM COUNTRY WHOSE CAPITAL IS DUBLIN",
        "query": "SELECT DISTINCT t2.position FROM country AS t1 JOIN match_season AS t2 ON t1.country_id = t2.country WHERE t1.capital = \"Dublin\"",
        "schema": "CREATE TABLE country (Country_name TEXT, Capital TEXT, Country_id NUMBER); CREATE TABLE match_season (Country NUMBER, Position TEXT, Player TEXT); CREATE TABLE player (Player_ID NUMBER, Player TEXT);"
      }
    ]
  ],
  "allergy_1": [
    [
      {
        "question": "Where does the student live? | Which student are you referring to? | Is there any students living in HKG or CHI?",
        "query": "SELECT COUNT ( * ) FROM student WHERE city_code = \"HKG\" OR city_code = \"CHI\"",
        "schema": "CREATE TABLE Student (city_code TEXT, LName TEXT, Fname TEXT, StuID NUMBER);"
      }
    ],
    [
      {
        "question": "can you show me a list of allergies?",
        "query": "SELECT allergy FROM allergy_type",
        "schema": "CREATE TABLE Has_Allergy (Allergy TEXT, StuID NUMBER); CREATE TABLE Student (StuID NUMBER); CREATE TABLE Allergy_Type (AllergyType TEXT, Allergy TEXT);"
      },
      {
        "question": "can you show me a list of allergy name?",
        "query": "SELECT allergy FROM allergy_type",
        "schema": "CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT); CREATE TABLE Allergy_Type (AllergyType TEXT, Allergy TEXT); CREATE TABLE Student (StuID NUMBER);"
      },
      {
        "question": "what is their allergy types?",
        "query": "SELECT DISTINCT allergytype FROM allergy_type",
        "schema": "CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT); CREATE TABLE Allergy_Type (AllergyType TEXT, Allergy TEXT); CREATE TABLE Student (StuID NUMBER);"
      },
      {
        "question": "how many students have a food allergy?",
        "query": "SELECT COUNT ( * ) FROM has_allergy AS t1 JOIN allergy_type AS t2 ON t1.allergy = t2.allergy WHERE t2.allergytype = \"food\"",
        "schema": "CREATE TABLE Student (StuID NUMBER); CREATE TABLE Has_Allergy (Allergy TEXT, StuID NUMBER); CREATE TABLE Allergy_Type (AllergyType TEXT, Allergy TEXT);"
      }
    ],
    [
      {
        "question": "How many students are there?",
        "query": "SELECT COUNT ( DISTINCT stuid ) FROM has_allergy",
        "schema": "CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT); CREATE TABLE Student (LName TEXT, Sex TEXT, Major NUMBER, StuID NUMBER, city_code TEXT, Fname TEXT, Advisor NUMBER, Age NUMBER);"
      },
      {
        "question": "How many allergies are there?",
        "query": "SELECT COUNT ( DISTINCT allergy ) FROM has_allergy",
        "schema": "CREATE TABLE Allergy_Type (Allergy TEXT, AllergyType TEXT); CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT); CREATE TABLE Student (Advisor NUMBER, LName TEXT, city_code TEXT, StuID NUMBER, Sex TEXT, Age NUMBER, Fname TEXT, Major NUMBER);"
      },
      {
        "question": "Can you display all student IDs with at least two allergies?",
        "query": "SELECT stuid FROM has_allergy GROUP BY stuid HAVING COUNT ( * ) > = 2",
        "schema": "CREATE TABLE Has_Allergy (Allergy TEXT, StuID NUMBER); CREATE TABLE Student (Major NUMBER, city_code TEXT, Age NUMBER, StuID NUMBER, Fname TEXT, Sex TEXT, Advisor NUMBER, LName TEXT); CREATE TABLE Allergy_Type (Allergy TEXT, AllergyType TEXT);"
      }
    ],
    [
      {
        "question": "Can you list the student ids and their allergies?",
        "query": "SELECT stuid, allergy FROM has_allergy",
        "schema": "CREATE TABLE Allergy_Type (AllergyType TEXT, Allergy TEXT); CREATE TABLE Student (StuID NUMBER); CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT);"
      },
      {
        "question": "How many students have milk or egg allergies?",
        "query": "SELECT COUNT ( * ) FROM has_allergy AS t1 JOIN student AS t2 ON t1.stuid = t2.stuid WHERE t1.allergy = \"Milk\" OR t1.allergy = \"Eggs\"",
        "schema": "CREATE TABLE Allergy_Type (AllergyType TEXT, Allergy TEXT); CREATE TABLE Student (StuID NUMBER, Fname TEXT); CREATE TABLE Has_Allergy (Allergy TEXT, StuID NUMBER);"
      }
    ],
    [
      {
        "question": "What is the most common major?",
        "query": "SELECT major FROM student GROUP BY major ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Student (Major NUMBER, StuID NUMBER);"
      },
      {
        "question": "What is the name of the oldest student?",
        "query": "SELECT lname,fname FROM student WHERE age = ( SELECT MAX ( age ) FROM student )",
        "schema": "CREATE TABLE Student (Fname TEXT, LName TEXT, Age NUMBER, Major NUMBER, StuID NUMBER);"
      },
      {
        "question": "What is that student's Id?",
        "query": "SELECT stuid FROM student WHERE age = ( SELECT MAX ( age ) FROM student )",
        "schema": "CREATE TABLE Student (LName TEXT, Fname TEXT, Major NUMBER, StuID NUMBER, Age NUMBER);"
      }
    ],
    [
      {
        "question": "Which student have allergy to both milk and cats? | Here are the student ids of the students who have allergies to both milk and cat. | What are their last names?",
        "query": "SELECT lname FROM student WHERE stuid IN ( SELECT stuid FROM has_allergy WHERE allergy = \"Milk\" INTERSECT SELECT stuid FROM has_allergy WHERE allergy = \"Cat\" )",
        "schema": "CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT); CREATE TABLE Student (StuID NUMBER, Fname TEXT, LName TEXT); CREATE TABLE Allergy_Type (Allergy TEXT, AllergyType TEXT);"
      },
      {
        "question": "And what about their age?",
        "query": "SELECT lname , age FROM student WHERE stuid IN ( SELECT stuid FROM has_allergy WHERE allergy = \"Milk\" INTERSECT SELECT stuid FROM has_allergy WHERE allergy = \"Cat\" )",
        "schema": "CREATE TABLE Allergy_Type (AllergyType TEXT, Allergy TEXT); CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT); CREATE TABLE Student (Fname TEXT, Age NUMBER, LName TEXT, StuID NUMBER);"
      }
    ],
    [
      {
        "question": "Most number of students affected by which allergy?",
        "query": "SELECT allergy FROM has_allergy GROUP BY allergy ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Allergy_Type (AllergyType TEXT, Allergy TEXT); CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT); CREATE TABLE Student (StuID NUMBER);"
      },
      {
        "question": "Which allergy affects student ID 1001",
        "query": "SELECT allergy FROM has_allergy WHERE stuid = 1001",
        "schema": "CREATE TABLE Student (StuID NUMBER); CREATE TABLE Allergy_Type (Allergy TEXT, AllergyType TEXT); CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT);"
      },
      {
        "question": "Which allergy affects student ID 1002",
        "query": "SELECT allergy FROM has_allergy WHERE stuid = 1002",
        "schema": "CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT); CREATE TABLE Allergy_Type (Allergy TEXT, AllergyType TEXT); CREATE TABLE Student (StuID NUMBER);"
      }
    ],
    [
      {
        "question": "Can you list all student IDs that have any kind of allergy?",
        "query": "SELECT stuid FROM has_allergy",
        "schema": "CREATE TABLE Allergy_Type (Allergy TEXT, AllergyType TEXT); CREATE TABLE Has_Allergy (Allergy TEXT, StuID NUMBER); CREATE TABLE Student (LName TEXT, StuID NUMBER);"
      },
      {
        "question": "Can you filter the list to only show student IDs that have food and animal type allergies?",
        "query": "SELECT t1.stuid FROM has_allergy AS t1 JOIN allergy_type AS t2 ON t1.allergy = t2.allergy WHERE t2.allergytype = \"food\" INTERSECT SELECT t1.stuid FROM has_allergy AS t1 JOIN allergy_type AS t2 ON t1.allergy = t2.allergy WHERE t2.allergytype = \"animal\"",
        "schema": "CREATE TABLE Allergy_Type (Allergy TEXT, AllergyType TEXT); CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT); CREATE TABLE Student (StuID NUMBER, LName TEXT);"
      },
      {
        "question": "Can you display the ages associated with those student IDs?",
        "query": "SELECT age FROM student WHERE stuid IN ( SELECT t1.stuid FROM has_allergy AS t1 JOIN allergy_type AS t2 ON t1.allergy = t2.allergy WHERE t2.allergytype = \"food\" INTERSECT SELECT t1.stuid FROM has_allergy AS t1 JOIN allergy_type AS t2 ON t1.allergy = t2.allergy WHERE t2.allergytype = \"animal\" )",
        "schema": "CREATE TABLE Allergy_Type (Allergy TEXT, AllergyType TEXT); CREATE TABLE Student (StuID NUMBER, Age NUMBER, LName TEXT); CREATE TABLE Has_Allergy (Allergy TEXT, StuID NUMBER);"
      },
      {
        "question": "What is the average of those 3 ages?",
        "query": "SELECT AVG ( age ) FROM student WHERE stuid IN ( SELECT t1.stuid FROM has_allergy AS t1 JOIN allergy_type AS t2 ON t1.allergy = t2.allergy WHERE t2.allergytype = \"food\" INTERSECT SELECT t1.stuid FROM has_allergy AS t1 JOIN allergy_type AS t2 ON t1.allergy = t2.allergy WHERE t2.allergytype = \"animal\" )",
        "schema": "CREATE TABLE Allergy_Type (AllergyType TEXT, Allergy TEXT); CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT); CREATE TABLE Student (Age NUMBER, StuID NUMBER, LName TEXT);"
      }
    ],
    [
      {
        "question": "Which students have allergies? | Do you want to return their first and last names or other info? | Just names",
        "query": "SELECT t2.fname , t2.lname FROM has_allergy AS t1 JOIN student AS t2 ON t1.stuid = t2.stuid",
        "schema": "CREATE TABLE Student (Fname TEXT, StuID NUMBER, LName TEXT); CREATE TABLE Allergy_Type (Allergy TEXT, AllergyType TEXT); CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT);"
      },
      {
        "question": "How many students don't have any type of allergy?",
        "query": "SELECT COUNT ( * ) FROM student WHERE stuid NOT IN ( SELECT t2.stuid FROM has_allergy AS t1 JOIN student AS t2 ON t1.stuid = t2.stuid )",
        "schema": "CREATE TABLE Student (Fname TEXT, StuID NUMBER, LName TEXT); CREATE TABLE Has_Allergy (Allergy TEXT, StuID NUMBER); CREATE TABLE Allergy_Type (AllergyType TEXT, Allergy TEXT);"
      },
      {
        "question": "What are their full names?",
        "query": "SELECT lname, fname FROM student WHERE stuid NOT IN ( SELECT t2.stuid FROM has_allergy AS t1 JOIN student AS t2 ON t1.stuid = t2.stuid )",
        "schema": "CREATE TABLE Allergy_Type (Allergy TEXT, AllergyType TEXT); CREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT); CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT);"
      }
    ],
    [
      {
        "question": "Which major has the highest number of students?",
        "query": "SELECT major FROM student GROUP BY major ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Student (Major NUMBER, StuID NUMBER);"
      },
      {
        "question": "What is the average age of the students in this major?",
        "query": "SELECT AVG ( age ) FROM student WHERE major = ( SELECT major FROM student GROUP BY major ORDER BY COUNT ( * ) DESC LIMIT 1 )",
        "schema": "CREATE TABLE Student (StuID NUMBER, Major NUMBER, Age NUMBER);"
      },
      {
        "question": "What is the sex of the students in this major?",
        "query": "SELECT sex FROM student WHERE major = ( SELECT major FROM student GROUP BY major ORDER BY COUNT ( * ) DESC LIMIT 1 )",
        "schema": "CREATE TABLE Student (Sex TEXT, Age NUMBER, StuID NUMBER, Major NUMBER);"
      }
    ],
    [
      {
        "question": "How many allergies does the food allergy type have?",
        "query": "SELECT COUNT ( allergy ) FROM allergy_type WHERE allergytype = 'food'",
        "schema": "CREATE TABLE Allergy_Type (AllergyType TEXT, Allergy TEXT); CREATE TABLE Has_Allergy (Allergy TEXT, StuID NUMBER); CREATE TABLE Student (StuID NUMBER);"
      },
      {
        "question": "How many allergies does the animal allergy type have?",
        "query": "SELECT COUNT ( allergy ) FROM allergy_type WHERE allergytype = 'animal'",
        "schema": "CREATE TABLE Allergy_Type (AllergyType TEXT, Allergy TEXT); CREATE TABLE Student (StuID NUMBER); CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT);"
      },
      {
        "question": "How many allergies does the environmental allergy type have?",
        "query": "SELECT COUNT ( allergy ) FROM allergy_type WHERE allergytype = 'environmental'",
        "schema": "CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT); CREATE TABLE Student (StuID NUMBER); CREATE TABLE Allergy_Type (AllergyType TEXT, Allergy TEXT);"
      }
    ],
    [
      {
        "question": "Could you please find the number of male (sex is 'M') students who have some type of food allergy?",
        "query": "SELECT COUNT ( * ) FROM student WHERE sex = \"M\" AND stuid IN ( SELECT stuid FROM has_allergy AS t1 JOIN allergy_type AS t2 ON t1.allergy = t2.allergy WHERE t2.allergytype = \"food\" )",
        "schema": "CREATE TABLE Has_Allergy (Allergy TEXT, StuID NUMBER); CREATE TABLE Allergy_Type (Allergy TEXT, AllergyType TEXT); CREATE TABLE Student (Sex TEXT, StuID NUMBER);"
      },
      {
        "question": "What are their full names and the names of the food allergies they have?",
        "query": "SELECT t3.fname, t3.lname,t2.allergy FROM has_allergy AS t1 JOIN allergy_type AS t2 ON t1.allergy = t2.allergy JOIN student AS t3 ON t3.stuid = t1.stuid WHERE t2.allergytype = \"food\" AND t3.sex = 'M'",
        "schema": "CREATE TABLE Allergy_Type (Allergy TEXT, AllergyType TEXT); CREATE TABLE Student (LName TEXT, Sex TEXT, StuID NUMBER, Fname TEXT); CREATE TABLE Has_Allergy (Allergy TEXT, StuID NUMBER);"
      },
      {
        "question": "How many female students are allergic to cats?",
        "query": "SELECT COUNT ( * ) FROM has_allergy AS t1 JOIN student AS t2 ON t2.stuid = t1.stuid WHERE t1.allergy = \"Cat\" AND t2.sex = 'F'",
        "schema": "CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT); CREATE TABLE Student (LName TEXT, StuID NUMBER, Sex TEXT, Fname TEXT); CREATE TABLE Allergy_Type (AllergyType TEXT, Allergy TEXT);"
      }
    ],
    [
      {
        "question": "how many female students presented on table",
        "query": "SELECT COUNT ( * ) FROM student WHERE sex = \"F\"",
        "schema": "CREATE TABLE Student (Sex TEXT, LName TEXT, StuID NUMBER);"
      },
      {
        "question": "what is the age of smith | Do you mean the age of the student whose last name is Smith? | exactly",
        "query": "SELECT age FROM student WHERE lname = \"Smith\"",
        "schema": "CREATE TABLE Student (StuID NUMBER, Sex TEXT, Fname TEXT, LName TEXT, Age NUMBER);"
      },
      {
        "question": "exactly | I mean which one do you want to know, first name or last name or both? | i want first name",
        "query": "SELECT fname FROM student ORDER BY advisor DESC LIMIT 1",
        "schema": "CREATE TABLE Student (Age NUMBER, LName TEXT, Advisor NUMBER, Sex TEXT, StuID NUMBER, Fname TEXT);"
      }
    ],
    [
      {
        "question": "How many different types of allergies are there?",
        "query": "SELECT COUNT ( DISTINCT allergy ) FROM has_allergy",
        "schema": "CREATE TABLE Allergy_Type (Allergy TEXT, AllergyType TEXT); CREATE TABLE Student (StuID NUMBER); CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT);"
      },
      {
        "question": "What allergy is most prevalent among students?",
        "query": "SELECT allergy FROM student AS t1 JOIN has_allergy AS t2 ON t1.stuid = t2.stuid GROUP BY allergy ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Has_Allergy (Allergy TEXT, StuID NUMBER); CREATE TABLE Student (StuID NUMBER); CREATE TABLE Allergy_Type (AllergyType TEXT, Allergy TEXT);"
      },
      {
        "question": "How many male students have a tree pollen allergy?",
        "query": "SELECT COUNT ( * ) FROM student AS t1 JOIN has_allergy AS t2 ON t1.stuid = t2.stuid WHERE allergy = \"Tree Pollen\" AND t1.sex = \"M\"",
        "schema": "CREATE TABLE Allergy_Type (AllergyType TEXT, Allergy TEXT); CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT); CREATE TABLE Student (StuID NUMBER, Sex TEXT);"
      },
      {
        "question": "How many students have a soy allergy?",
        "query": "SELECT COUNT ( * ) FROM student WHERE stuid IN ( SELECT stuid FROM has_allergy WHERE allergy = \"Soy\" )",
        "schema": "CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT); CREATE TABLE Student (StuID NUMBER, Sex TEXT); CREATE TABLE Allergy_Type (AllergyType TEXT, Allergy TEXT);"
      },
      {
        "question": "How many students don't have a soy allergy?",
        "query": "SELECT COUNT ( * ) FROM student WHERE stuid NOT IN ( SELECT stuid FROM has_allergy WHERE allergy = \"Soy\" )",
        "schema": "CREATE TABLE Student (Sex TEXT, StuID NUMBER); CREATE TABLE Allergy_Type (Allergy TEXT, AllergyType TEXT); CREATE TABLE Has_Allergy (Allergy TEXT, StuID NUMBER);"
      },
      {
        "question": "Can you list them for me with their names and majors? | First name? | Yes please. First name and major.",
        "query": "SELECT fname , major FROM student WHERE stuid NOT IN ( SELECT stuid FROM has_allergy WHERE allergy = \"Soy\" )",
        "schema": "CREATE TABLE Student (Fname TEXT, LName TEXT, Major NUMBER, Sex TEXT, StuID NUMBER); CREATE TABLE Allergy_Type (AllergyType TEXT, Allergy TEXT); CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT);"
      }
    ],
    [
      {
        "question": "Which allergy has the most number of students affected?",
        "query": "SELECT allergy FROM has_allergy GROUP BY allergy ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Allergy_Type (AllergyType TEXT, Allergy TEXT); CREATE TABLE Has_Allergy (Allergy TEXT, StuID NUMBER); CREATE TABLE Student (StuID NUMBER);"
      },
      {
        "question": "How many students has tree pollen affected?",
        "query": "SELECT COUNT ( stuid ) FROM has_allergy WHERE allergy = 'Tree Pollen'",
        "schema": "CREATE TABLE Allergy_Type (AllergyType TEXT, Allergy TEXT); CREATE TABLE Has_Allergy (Allergy TEXT, StuID NUMBER); CREATE TABLE Student (StuID NUMBER);"
      },
      {
        "question": "Which allergy has the least number of students affected?",
        "query": "SELECT allergy FROM has_allergy GROUP BY allergy ORDER BY COUNT ( * ) ASC LIMIT 1",
        "schema": "CREATE TABLE Student (StuID NUMBER); CREATE TABLE Allergy_Type (AllergyType TEXT, Allergy TEXT); CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT);"
      }
    ],
    [
      {
        "question": "I want to know advisor with the most number of students",
        "query": "SELECT advisor FROM student GROUP BY advisor ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Student (StuID NUMBER, Advisor NUMBER);"
      },
      {
        "question": "What about the advisor with the least number of students",
        "query": "SELECT advisor FROM student GROUP BY advisor ORDER BY COUNT ( * ) ASC LIMIT 1",
        "schema": "CREATE TABLE Student (StuID NUMBER, Advisor NUMBER);"
      },
      {
        "question": "Could you tell me the names of both advisors with the most and the least number of students?",
        "query": "SELECT advisor FROM student WHERE advisor = ( SELECT advisor FROM student GROUP BY advisor ORDER BY COUNT ( * ) ASC LIMIT 1 ) OR advisor = ( SELECT advisor FROM student GROUP BY advisor ORDER BY COUNT ( * ) DESC LIMIT 1 ) GROUP BY advisor",
        "schema": "CREATE TABLE Student (Advisor NUMBER, LName TEXT, Fname TEXT, StuID NUMBER);"
      }
    ],
    [
      {
        "question": "Can you give me the allergies that the student with the first name Lisa has",
        "query": "SELECT t1.allergy FROM allergy_type AS t1 JOIN has_allergy AS t2 ON t1.allergy = t2.allergy JOIN student AS t3 ON t3.stuid = t2.stuid WHERE t3.fname = \"Lisa\"",
        "schema": "CREATE TABLE Allergy_Type (AllergyType TEXT, Allergy TEXT); CREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT); CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT);"
      },
      {
        "question": "Are there any other names that have allergies | Do you want the first name or the last name of students other than Lisa who have allergies? | Can i have the list of foods that Lisa is allergic to",
        "query": "SELECT t1.allergy FROM allergy_type AS t1 JOIN has_allergy AS t2 ON t1.allergy = t2.allergy JOIN student AS t3 ON t3.stuid = t2.stuid WHERE t3.fname = \"Lisa\" AND t1.allergytype = \"food\"",
        "schema": "CREATE TABLE Allergy_Type (AllergyType TEXT, Allergy TEXT); CREATE TABLE Student (StuID NUMBER, Fname TEXT, LName TEXT); CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT);"
      }
    ],
    [
      {
        "question": "Can you get me the first names of students that have a milk allergy?",
        "query": "SELECT DISTINCT t1.fname FROM student AS t1 JOIN has_allergy AS t2 ON t1.stuid = t2.stuid WHERE t2.allergy = \"Milk\"",
        "schema": "CREATE TABLE Allergy_Type (AllergyType TEXT, Allergy TEXT); CREATE TABLE Has_Allergy (Allergy TEXT, StuID NUMBER); CREATE TABLE Student (LName TEXT, StuID NUMBER, Fname TEXT);"
      },
      {
        "question": "Can you list the cities of these students? | Do you want both the cities and the first names of the students? | Yes. Can you please provide both simultaneously?",
        "query": "SELECT DISTINCT t1.city_code, t1.fname FROM student AS t1 JOIN has_allergy AS t2 ON t1.stuid = t2.stuid WHERE t2.allergy = \"Milk\"",
        "schema": "CREATE TABLE Allergy_Type (Allergy TEXT, AllergyType TEXT); CREATE TABLE Has_Allergy (Allergy TEXT, StuID NUMBER); CREATE TABLE Student (Fname TEXT, LName TEXT, city_code TEXT, StuID NUMBER);"
      }
    ]
  ],
  "restaurant_1": [
    [
      {
        "question": "What is the student Id of Linda Smith?",
        "query": "SELECT stuid FROM student WHERE fname = \"Linda\" AND lname = \"Smith\"",
        "schema": "CREATE TABLE Student (StuID NUMBER, Fname TEXT, LName TEXT);"
      },
      {
        "question": "What is her age?",
        "query": "SELECT age FROM student WHERE fname = \"Linda\" AND lname = \"Smith\"",
        "schema": "CREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER);"
      },
      {
        "question": "What city is she in?",
        "query": "SELECT city_code FROM student WHERE fname = \"Linda\" AND lname = \"Smith\"",
        "schema": "CREATE TABLE Restaurant (Address TEXT, ResID NUMBER); CREATE TABLE Student (StuID NUMBER, Age NUMBER, city_code TEXT, LName TEXT, Fname TEXT);"
      }
    ],
    [
      {
        "question": "Which city code of Smith? | Is Smith first name or last name? | first name",
        "query": "SELECT city_code FROM student WHERE fname = \"Smith\"",
        "schema": "CREATE TABLE Restaurant (ResName TEXT, Address TEXT); CREATE TABLE Student (StuID NUMBER, Fname TEXT, city_code TEXT, LName TEXT);"
      },
      {
        "question": "What age of last name Kim?",
        "query": "SELECT age FROM student WHERE lname = \"Kim\"",
        "schema": "CREATE TABLE Restaurant (ResName TEXT, Address TEXT); CREATE TABLE Student (city_code TEXT, LName TEXT, Fname TEXT, Age NUMBER, StuID NUMBER);"
      },
      {
        "question": "What are the student id of city code WAS?",
        "query": "SELECT stuid FROM student WHERE city_code = \"WAS\"",
        "schema": "CREATE TABLE Student (Age NUMBER, city_code TEXT, LName TEXT, StuID NUMBER, Fname TEXT); CREATE TABLE Restaurant (ResName TEXT, Address TEXT);"
      },
      {
        "question": "Which major has least number of students? List the major and the number of students.",
        "query": "SELECT major , COUNT ( * ) FROM student GROUP BY major ORDER BY COUNT ( major ) ASC LIMIT 1",
        "schema": "CREATE TABLE Restaurant (Address TEXT, ResName TEXT); CREATE TABLE Student (StuID NUMBER, Fname TEXT, Major NUMBER, Age NUMBER, LName TEXT, city_code TEXT);"
      }
    ],
    [
      {
        "question": "Which major has between 2 and 30 number of students? List major and the number of students.",
        "query": "SELECT major , COUNT ( * ) FROM student GROUP BY major HAVING COUNT ( major ) BETWEEN 2 AND 30",
        "schema": "CREATE TABLE Student (Age NUMBER, StuID NUMBER, Major NUMBER);"
      },
      {
        "question": "Which major has highest number of students?List the students First name?",
        "query": "SELECT major , fname FROM student WHERE major = ( SELECT major FROM student GROUP BY major ORDER BY COUNT ( * ) DESC LIMIT 1 )",
        "schema": "CREATE TABLE Student (StuID NUMBER, Major NUMBER, Age NUMBER, LName TEXT, Fname TEXT);"
      },
      {
        "question": "Which major has least number of students?List the students First name?",
        "query": "SELECT major , fname FROM student WHERE major = ( SELECT major FROM student GROUP BY major ORDER BY COUNT ( * ) ASC LIMIT 1 )",
        "schema": "CREATE TABLE Student (Fname TEXT, StuID NUMBER, Major NUMBER, Age NUMBER, LName TEXT);"
      }
    ],
    [
      {
        "question": "show me the name of the restaurant with  ResID 1?",
        "query": "SELECT resname FROM restaurant WHERE resid = 1",
        "schema": "CREATE TABLE Restaurant_Type (ResTypeID NUMBER, ResTypeName TEXT); CREATE TABLE Visits_Restaurant (StuID NUMBER, ResID NUMBER); CREATE TABLE Type_Of_Restaurant (ResID NUMBER, ResTypeID NUMBER); CREATE TABLE Student (StuID NUMBER); CREATE TABLE Restaurant (Rating NUMBER, ResID NUMBER, ResName TEXT);"
      },
      {
        "question": "can you show me the address of the restaurant with ResID 1?",
        "query": "SELECT address FROM restaurant WHERE resid = 1",
        "schema": "CREATE TABLE Restaurant_Type (ResTypeID NUMBER, ResTypeName TEXT); CREATE TABLE Student (StuID NUMBER); CREATE TABLE Visits_Restaurant (ResID NUMBER, StuID NUMBER); CREATE TABLE Restaurant (ResName TEXT, Address TEXT, Rating NUMBER, ResID NUMBER); CREATE TABLE Type_Of_Restaurant (ResTypeID NUMBER, ResID NUMBER);"
      },
      {
        "question": "Can you show me the rating of the restaurant with ResID 1?",
        "query": "SELECT rating FROM restaurant WHERE resid = 1",
        "schema": "CREATE TABLE Restaurant_Type (ResTypeID NUMBER, ResTypeName TEXT); CREATE TABLE Restaurant (ResID NUMBER, Address TEXT, ResName TEXT, Rating NUMBER); CREATE TABLE Type_Of_Restaurant (ResTypeID NUMBER, ResID NUMBER); CREATE TABLE Visits_Restaurant (StuID NUMBER, ResID NUMBER); CREATE TABLE Student (StuID NUMBER);"
      },
      {
        "question": "Can you show me how many restaurant is the sandwich type restaurant?",
        "query": "SELECT COUNT ( * ) FROM restaurant JOIN type_of_restaurant ON restaurant.resid = type_of_restaurant.resid JOIN restaurant_type ON type_of_restaurant.restypeid = restaurant_type.restypeid GROUP BY type_of_restaurant.restypeid HAVING restaurant_type.restypename = 'Sandwich'",
        "schema": "CREATE TABLE Restaurant_Type (ResTypeID NUMBER, ResTypeName TEXT, ResTypeDescription TEXT); CREATE TABLE Restaurant (Address TEXT, ResID NUMBER, Rating NUMBER, ResName TEXT); CREATE TABLE Type_Of_Restaurant (ResTypeID NUMBER, ResID NUMBER); CREATE TABLE Visits_Restaurant (ResID NUMBER, StuID NUMBER); CREATE TABLE Student (StuID NUMBER);"
      }
    ],
    [
      {
        "question": "Hello, how many students are over 18?",
        "query": "SELECT COUNT ( * ) FROM student WHERE age > 18",
        "schema": "CREATE TABLE Student (LName TEXT, Age NUMBER, StuID NUMBER, Sex TEXT);"
      },
      {
        "question": "Perfect, and how many of those students are majoring in 600?",
        "query": "SELECT COUNT ( * ) FROM student WHERE major = 600",
        "schema": "CREATE TABLE Student (StuID NUMBER, Age NUMBER, LName TEXT, Sex TEXT, Major NUMBER);"
      },
      {
        "question": "Can you list each student's first and last name? | Students majoring in 600? | Yes that are over 18 as well.",
        "query": "SELECT fname , lname FROM student WHERE age > 18 AND major = 600",
        "schema": "CREATE TABLE Student (Sex TEXT, StuID NUMBER, Age NUMBER, Major NUMBER, LName TEXT, Fname TEXT);"
      }
    ],
    [
      {
        "question": "How many Restaurants are there?",
        "query": "SELECT COUNT ( * ) FROM restaurant",
        "schema": "CREATE TABLE Student (StuID NUMBER); CREATE TABLE Restaurant (ResName TEXT, Address TEXT, Rating NUMBER, ResID NUMBER); CREATE TABLE Type_Of_Restaurant (ResID NUMBER, ResTypeID NUMBER); CREATE TABLE Visits_Restaurant (StuID NUMBER, ResID NUMBER); CREATE TABLE Restaurant_Type (ResTypeDescription TEXT, ResTypeName TEXT, ResTypeID NUMBER);"
      },
      {
        "question": "How many of these are sandwich restaurants?",
        "query": "SELECT COUNT ( * ) FROM restaurant JOIN type_of_restaurant ON restaurant.resid = type_of_restaurant.resid JOIN restaurant_type ON type_of_restaurant.restypeid = restaurant_type.restypeid GROUP BY type_of_restaurant.restypeid HAVING restaurant_type.restypename = 'Sandwich'",
        "schema": "CREATE TABLE Student (StuID NUMBER); CREATE TABLE Restaurant (ResID NUMBER, ResName TEXT, Address TEXT, Rating NUMBER); CREATE TABLE Type_Of_Restaurant (ResTypeID NUMBER, ResID NUMBER); CREATE TABLE Visits_Restaurant (ResID NUMBER, StuID NUMBER); CREATE TABLE Restaurant_Type (ResTypeName TEXT, ResTypeID NUMBER, ResTypeDescription TEXT);"
      },
      {
        "question": "What is the name of this restaurant?",
        "query": "SELECT resname FROM restaurant JOIN type_of_restaurant ON restaurant.resid = type_of_restaurant.resid JOIN restaurant_type ON type_of_restaurant.restypeid = restaurant_type.restypeid GROUP BY type_of_restaurant.restypeid HAVING restaurant_type.restypename = 'Sandwich'",
        "schema": "CREATE TABLE Student (StuID NUMBER); CREATE TABLE Restaurant_Type (ResTypeName TEXT, ResTypeID NUMBER, ResTypeDescription TEXT); CREATE TABLE Visits_Restaurant (StuID NUMBER, ResID NUMBER); CREATE TABLE Restaurant (ResName TEXT, Rating NUMBER, ResID NUMBER, Address TEXT); CREATE TABLE Type_Of_Restaurant (ResTypeID NUMBER, ResID NUMBER);"
      },
      {
        "question": "Where is Subway located?",
        "query": "SELECT address FROM restaurant WHERE resname = 'Subway'",
        "schema": "CREATE TABLE Type_Of_Restaurant (ResID NUMBER, ResTypeID NUMBER); CREATE TABLE Restaurant (ResName TEXT, Rating NUMBER, ResID NUMBER, Address TEXT); CREATE TABLE Visits_Restaurant (StuID NUMBER, ResID NUMBER); CREATE TABLE Student (StuID NUMBER); CREATE TABLE Restaurant_Type (ResTypeDescription TEXT, ResTypeName TEXT, ResTypeID NUMBER);"
      },
      {
        "question": "What is Subway's rating?",
        "query": "SELECT rating FROM restaurant WHERE resname = 'Subway'",
        "schema": "CREATE TABLE Restaurant_Type (ResTypeID NUMBER, ResTypeDescription TEXT, ResTypeName TEXT); CREATE TABLE Visits_Restaurant (StuID NUMBER, ResID NUMBER); CREATE TABLE Restaurant (Address TEXT, ResID NUMBER, Rating NUMBER, ResName TEXT); CREATE TABLE Student (StuID NUMBER); CREATE TABLE Type_Of_Restaurant (ResID NUMBER, ResTypeID NUMBER);"
      }
    ],
    [
      {
        "question": "List major and number of students for majors with 2 to 30 number of students",
        "query": "SELECT major , COUNT ( * ) FROM student GROUP BY major HAVING COUNT ( major ) BETWEEN 2 AND 30",
        "schema": "CREATE TABLE Student (Major NUMBER, StuID NUMBER);"
      },
      {
        "question": "Which majors have between 2 and 20 students? Show me major and number of students",
        "query": "SELECT major , COUNT ( * ) FROM student GROUP BY major HAVING COUNT ( major ) BETWEEN 2 AND 20",
        "schema": "CREATE TABLE Student (Age NUMBER, StuID NUMBER, Major NUMBER);"
      }
    ],
    [
      {
        "question": "Hi, could you please let me know the list of all female students who are older than 18 and not majoring in 600? | what  did  you  want  to get  about  female students who are older than 18 and not majoring in 600? | Oh sorry for the confusion, it would be great if I can see their first and last name.",
        "query": "SELECT fname , lname FROM student WHERE age > 18 AND major ! = 600 AND sex = 'F'",
        "schema": "CREATE TABLE Student (Fname TEXT, LName TEXT, Major NUMBER, Sex TEXT, StuID NUMBER, Age NUMBER);"
      },
      {
        "question": "Thank you very much! Then could you please show me the male students' first and last name with the same condition? Meaning older than 18 and not majoring in 600.",
        "query": "SELECT fname , lname FROM student WHERE age > 18 AND major ! = 600 AND sex = 'M'",
        "schema": "CREATE TABLE Student (Fname TEXT, Sex TEXT, StuID NUMBER, Age NUMBER, LName TEXT, Major NUMBER);"
      },
      {
        "question": "Thank you again. Could you please let me know who are the oldest among them with his age? | Did  you mean  base on  the last one question? | yes please, so my question would be about the oldest male student who is not majoring in 600.",
        "query": "SELECT fname , lname FROM student WHERE major ! = 600 AND sex = 'M' ORDER BY age DESC LIMIT 1",
        "schema": "CREATE TABLE Student (LName TEXT, Age NUMBER, Sex TEXT, StuID NUMBER, Major NUMBER, Fname TEXT);"
      },
      {
        "question": "Then could you please let me know what is Ian Thornton's major and advisor code?",
        "query": "SELECT major , advisor FROM student WHERE lname = \"Thornton\" AND fname = \"Ian\"",
        "schema": "CREATE TABLE Student (Sex TEXT, Age NUMBER, Advisor NUMBER, LName TEXT, Major NUMBER, StuID NUMBER, Fname TEXT);"
      },
      {
        "question": "Thank you very much. This will be my last question, could you please show me the name of female students who are majoring in 520, if there are any? | Did  you  mean  the full name about  those ? | yes please, first and last name would be great.",
        "query": "SELECT fname , lname FROM student WHERE sex = 'F' AND major = 520",
        "schema": "CREATE TABLE Student (Fname TEXT, Age NUMBER, city_code TEXT, Advisor NUMBER, Sex TEXT, StuID NUMBER, Major NUMBER, LName TEXT);"
      }
    ],
    [
      {
        "question": "What is the name of the city the student by the name of Linda Smith is from? | Do you mean the code of the city? since we don't have the name of cities. | Yes, please",
        "query": "SELECT city_code FROM student WHERE fname = \"Linda\" AND lname = \"Smith\"",
        "schema": "CREATE TABLE Student (LName TEXT, StuID NUMBER, Fname TEXT, city_code TEXT);"
      },
      {
        "question": "What are the first and last names of all students with the sex \"F\"?",
        "query": "SELECT fname,lname FROM student WHERE sex = \"F\"",
        "schema": "CREATE TABLE Student (StuID NUMBER, Fname TEXT, Sex TEXT, LName TEXT, city_code TEXT);"
      },
      {
        "question": "What are their city codes?",
        "query": "SELECT city_code FROM student WHERE sex = \"F\"",
        "schema": "CREATE TABLE Student (Fname TEXT, StuID NUMBER, city_code TEXT, LName TEXT, Sex TEXT);"
      },
      {
        "question": "What is the name of the oldest student?",
        "query": "SELECT fname,lname FROM student ORDER BY age DESC LIMIT 1",
        "schema": "CREATE TABLE Student (StuID NUMBER, Age NUMBER, city_code TEXT, LName TEXT, Fname TEXT, Sex TEXT);"
      }
    ],
    [
      {
        "question": "What is the age of the student named Linda Smith?",
        "query": "SELECT age FROM student WHERE fname = \"Linda\" AND lname = \"Smith\"",
        "schema": "CREATE TABLE Student (StuID NUMBER, LName TEXT, Age NUMBER, Fname TEXT);"
      },
      {
        "question": "Yes, please. | First OR last OR both? | Both, please. Sorry!",
        "query": "SELECT fname, lname FROM student ORDER BY age DESC LIMIT 1",
        "schema": "CREATE TABLE Student (Age NUMBER, LName TEXT, Fname TEXT, StuID NUMBER);"
      },
      {
        "question": "Who is the advisor of the youngest student?",
        "query": "SELECT advisor FROM student ORDER BY age LIMIT 1",
        "schema": "CREATE TABLE Student (Fname TEXT, StuID NUMBER, Advisor NUMBER, LName TEXT, Age NUMBER);"
      }
    ],
    [
      {
        "question": "How much time was spent at Subway?",
        "query": "SELECT SUM ( visits_restaurant.spent ) FROM visits_restaurant JOIN restaurant ON visits_restaurant.resid = restaurant.resid WHERE restaurant.resname = \"Subway\"",
        "schema": "CREATE TABLE Restaurant (ResName TEXT, Address TEXT, Rating NUMBER, ResID NUMBER); CREATE TABLE Visits_Restaurant (Time TIME, StuID NUMBER, Spent NUMBER, ResID NUMBER); CREATE TABLE Student (city_code TEXT, StuID NUMBER); CREATE TABLE Restaurant_Type (ResTypeDescription TEXT, ResTypeID NUMBER, ResTypeName TEXT); CREATE TABLE Type_Of_Restaurant (ResTypeID NUMBER, ResID NUMBER);"
      },
      {
        "question": "How much time was spent at Honeygrow?",
        "query": "SELECT SUM ( visits_restaurant.spent ) FROM visits_restaurant JOIN restaurant ON visits_restaurant.resid = restaurant.resid WHERE restaurant.resname = \"Honeygrow\"",
        "schema": "CREATE TABLE Restaurant (Address TEXT, Rating NUMBER, ResID NUMBER, ResName TEXT); CREATE TABLE Visits_Restaurant (StuID NUMBER, Spent NUMBER, Time TIME, ResID NUMBER); CREATE TABLE Student (city_code TEXT, StuID NUMBER); CREATE TABLE Type_Of_Restaurant (ResID NUMBER, ResTypeID NUMBER); CREATE TABLE Restaurant_Type (ResTypeID NUMBER, ResTypeName TEXT, ResTypeDescription TEXT);"
      },
      {
        "question": "Show me how much time was spent at each restaurant.",
        "query": "SELECT restaurant.resname, SUM ( visits_restaurant.spent ) FROM visits_restaurant JOIN restaurant ON visits_restaurant.resid = restaurant.resid GROUP BY restaurant.resid",
        "schema": "CREATE TABLE Visits_Restaurant (Spent NUMBER, Time TIME, StuID NUMBER, ResID NUMBER); CREATE TABLE Student (StuID NUMBER, city_code TEXT); CREATE TABLE Type_Of_Restaurant (ResID NUMBER, ResTypeID NUMBER); CREATE TABLE Restaurant (ResID NUMBER, Address TEXT, ResName TEXT, Rating NUMBER); CREATE TABLE Restaurant_Type (ResTypeID NUMBER, ResTypeDescription TEXT, ResTypeName TEXT);"
      },
      {
        "question": "Which restaurant had the least amount of time spent?",
        "query": "SELECT restaurant.resname , SUM ( visits_restaurant.spent ) FROM visits_restaurant JOIN restaurant ON visits_restaurant.resid = restaurant.resid GROUP BY restaurant.resid ORDER BY SUM ( visits_restaurant.spent ) ASC LIMIT 1",
        "schema": "CREATE TABLE Student (city_code TEXT, StuID NUMBER); CREATE TABLE Visits_Restaurant (Spent NUMBER, Time TIME, StuID NUMBER, ResID NUMBER); CREATE TABLE Restaurant_Type (ResTypeDescription TEXT, ResTypeID NUMBER, ResTypeName TEXT); CREATE TABLE Type_Of_Restaurant (ResTypeID NUMBER, ResID NUMBER); CREATE TABLE Restaurant (ResID NUMBER, Rating NUMBER, ResName TEXT, Address TEXT);"
      }
    ],
    [
      {
        "question": "Hello! Can you provide me with the time spent in all restaurants by Linda Smith?",
        "query": "SELECT SUM ( spent ) FROM student JOIN visits_restaurant ON student.stuid = visits_restaurant.stuid WHERE student.fname = \"Linda\" AND student.lname = \"Smith\"",
        "schema": "CREATE TABLE Visits_Restaurant (Spent NUMBER, ResID NUMBER, StuID NUMBER, Time TIME); CREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT); CREATE TABLE Restaurant (ResID NUMBER, ResName TEXT);"
      },
      {
        "question": "Are there any other students with the same city code as Linda Smith?",
        "query": "SELECT * FROM student WHERE city_code = ( SELECT city_code FROM student WHERE fname = \"Linda\" AND lname = \"Smith\" ) AND fname ! = \"Linda\" AND lname ! = \"Smith\"",
        "schema": "CREATE TABLE Student (Fname TEXT, city_code TEXT, StuID NUMBER, LName TEXT); CREATE TABLE Visits_Restaurant (StuID NUMBER, ResID NUMBER, Spent NUMBER, Time TIME); CREATE TABLE Restaurant (ResID NUMBER, Address TEXT, ResName TEXT);"
      },
      {
        "question": "Of those three students, can you tell me which of them have more time spent in restaurants than Linda Smith?",
        "query": "SELECT t1.stuid, SUM ( t2.spent ) FROM student AS t1 JOIN visits_restaurant AS t2 WHERE city_code = ( SELECT city_code FROM student WHERE fname = \"Linda\" AND lname = \"Smith\" ) AND fname ! = \"Linda\" AND lname ! = \"Smith\" GROUP BY t1.stuid HAVING SUM ( t2.spent ) > ( SELECT SUM ( spent ) FROM student AS t1 JOIN visits_restaurant AS t2 ON t1.stuid = t2.stuid WHERE t1.fname = \"Linda\" AND t1.lname = \"Smith\" )",
        "schema": "CREATE TABLE Visits_Restaurant (Spent NUMBER, Time TIME, ResID NUMBER, StuID NUMBER); CREATE TABLE Student (StuID NUMBER, city_code TEXT, LName TEXT, Fname TEXT); CREATE TABLE Restaurant (Address TEXT, ResName TEXT, ResID NUMBER);"
      }
    ]
  ],
  "cre_Docs_and_Epenses": [
    [
      {
        "question": "What is the ID of the project with the least number of documents?",
        "query": "SELECT project_id FROM documents GROUP BY project_id ORDER BY COUNT ( * ) ASC LIMIT 1",
        "schema": "CREATE TABLE Projects (Project_Details TEXT, Project_ID NUMBER); CREATE TABLE Documents (Project_ID NUMBER, Document_Name TEXT, Document_ID NUMBER);"
      },
      {
        "question": "What is the ID of the project with the most number of documents?",
        "query": "SELECT project_id FROM documents GROUP BY project_id ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Documents (Project_ID NUMBER, Document_Name TEXT, Document_ID NUMBER); CREATE TABLE Projects (Project_ID NUMBER, Project_Details TEXT);"
      },
      {
        "question": "What is the document date of project ID 105? | Do  you mean Document ID 105 | yes",
        "query": "SELECT document_date FROM documents WHERE document_id = 105",
        "schema": "CREATE TABLE Projects (Project_ID NUMBER, Project_Details TEXT); CREATE TABLE Documents (Project_ID NUMBER, Document_Name TEXT, Document_Date TIME, Document_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What is the project detail for the project with document \"King Book\"?",
        "query": "SELECT t1.project_details FROM projects AS t1 JOIN documents AS t2 ON t1.project_id = t2.project_id WHERE t2.document_name = \"King Book\"",
        "schema": "CREATE TABLE Documents (Document_ID NUMBER, Project_ID NUMBER, Document_Type_Code TEXT, Document_Name TEXT); CREATE TABLE Ref_Document_Types (Document_Type_Code TEXT); CREATE TABLE Accounts (Account_Details TEXT); CREATE TABLE Projects (Project_Details TEXT, Project_ID NUMBER);"
      },
      {
        "question": "What is the document date for the project with document \"King Book\"?",
        "query": "SELECT t2.document_date FROM projects AS t1 JOIN documents AS t2 ON t1.project_id = t2.project_id WHERE t2.document_name = \"King Book\"",
        "schema": "CREATE TABLE Ref_Document_Types (Document_Type_Code TEXT); CREATE TABLE Documents (Document_ID NUMBER, Document_Date TIME, Project_ID NUMBER, Document_Type_Code TEXT, Document_Name TEXT); CREATE TABLE Accounts (Account_Details TEXT); CREATE TABLE Projects (Project_ID NUMBER, Project_Details TEXT);"
      },
      {
        "question": "How many documents are there with the document type code \"CV\"?",
        "query": "SELECT COUNT ( t2.document_date ) FROM projects AS t1 JOIN documents AS t2 ON t1.project_id = t2.project_id WHERE t2.document_type_code = \"CV\"",
        "schema": "CREATE TABLE Documents (Document_Name TEXT, Document_Date TIME, Document_ID NUMBER, Project_ID NUMBER, Document_Type_Code TEXT); CREATE TABLE Projects (Project_Details TEXT, Project_ID NUMBER); CREATE TABLE Ref_Document_Types (Document_Type_Code TEXT, Document_Type_Name TEXT); CREATE TABLE Accounts (Account_Details TEXT);"
      },
      {
        "question": "How many documents are there with the document type code \"BK\"?",
        "query": "SELECT COUNT ( t2.document_date ) FROM projects AS t1 JOIN documents AS t2 ON t1.project_id = t2.project_id WHERE t2.document_type_code = \"BK\"",
        "schema": "CREATE TABLE Documents (Project_ID NUMBER, Document_ID NUMBER, Document_Type_Code TEXT, Document_Date TIME, Document_Name TEXT); CREATE TABLE Projects (Project_Details TEXT, Project_ID NUMBER); CREATE TABLE Accounts (Account_Details TEXT); CREATE TABLE Ref_Document_Types (Document_Type_Code TEXT, Document_Type_Name TEXT);"
      },
      {
        "question": "What are the document dates of all documents with the document type code \"BK\"?",
        "query": "SELECT t2.document_date FROM projects AS t1 JOIN documents AS t2 ON t1.project_id = t2.project_id WHERE t2.document_type_code = \"BK\"",
        "schema": "CREATE TABLE Ref_Document_Types (Document_Type_Name TEXT, Document_Type_Code TEXT); CREATE TABLE Documents (Document_Type_Code TEXT, Project_ID NUMBER, Document_Date TIME, Document_Name TEXT, Document_ID NUMBER); CREATE TABLE Accounts (Account_Details TEXT); CREATE TABLE Projects (Project_ID NUMBER, Project_Details TEXT);"
      }
    ],
    [
      {
        "question": "Could you please show me the ids of the projects with at least 2 documents?",
        "query": "SELECT project_id FROM documents GROUP BY project_id HAVING COUNT ( * ) > = 2",
        "schema": "CREATE TABLE Documents (Project_ID NUMBER, Document_ID NUMBER, Document_Name TEXT); CREATE TABLE Projects (Project_Details TEXT, Project_ID NUMBER);"
      },
      {
        "question": "What about those with at least 3 documents?",
        "query": "SELECT project_id FROM documents GROUP BY project_id HAVING COUNT ( * ) > = 3",
        "schema": "CREATE TABLE Projects (Project_Details TEXT, Project_ID NUMBER); CREATE TABLE Documents (Document_ID NUMBER, Project_ID NUMBER, Document_Name TEXT);"
      },
      {
        "question": "What are the dates of those, please?",
        "query": "SELECT project_id,document_date FROM documents GROUP BY project_id HAVING COUNT ( * ) > = 3",
        "schema": "CREATE TABLE Projects (Project_ID NUMBER, Project_Details TEXT); CREATE TABLE Documents (Document_ID NUMBER, Project_ID NUMBER, Document_Name TEXT, Document_Date TIME);"
      },
      {
        "question": "What are the dates of the projects with at least 2 documents, please? | Do you mean the projects of documents, not projects, right? | Yes",
        "query": "SELECT document_date FROM documents WHERE project_id IN ( SELECT project_id FROM documents GROUP BY project_id HAVING COUNT ( * ) > = 3 )",
        "schema": "CREATE TABLE Projects (Project_Details TEXT, Project_ID NUMBER); CREATE TABLE Documents (Document_Name TEXT, Project_ID NUMBER, Document_Date TIME, Document_ID NUMBER);"
      },
      {
        "question": "What are the project ids of those?",
        "query": "SELECT project_id FROM documents GROUP BY project_id HAVING COUNT ( * ) > = 3",
        "schema": "CREATE TABLE Documents (Document_Name TEXT, Project_ID NUMBER, Document_ID NUMBER, Document_Date TIME); CREATE TABLE Projects (Project_ID NUMBER, Project_Details TEXT);"
      }
    ],
    [
      {
        "question": "Hello, how many total documents are there?",
        "query": "SELECT COUNT ( * ) FROM documents",
        "schema": "CREATE TABLE Ref_Document_Types (Document_Type_Name TEXT, Document_Type_Code TEXT); CREATE TABLE Statements (Statement_ID NUMBER); CREATE TABLE Documents (Document_Type_Code TEXT, Document_ID NUMBER, Document_Name TEXT, Other_Details TEXT, Project_ID NUMBER, Document_Description TEXT);"
      },
      {
        "question": "Can you tell me the document type code, name, and description of the document with the name 'Noel CV'?",
        "query": "SELECT document_type_code , document_name , document_description FROM documents WHERE document_name = 'Noel CV'",
        "schema": "CREATE TABLE Statements (Statement_ID NUMBER); CREATE TABLE Documents (Document_ID NUMBER, Other_Details TEXT, Document_Name TEXT, Document_Type_Code TEXT, Project_ID NUMBER, Document_Description TEXT); CREATE TABLE Ref_Document_Types (Document_Type_Description TEXT, Document_Type_Name TEXT, Document_Type_Code TEXT);"
      },
      {
        "question": "Perfect, and can you do the same with 'King Book'?",
        "query": "SELECT document_type_code , document_name , document_description FROM documents WHERE document_name = 'King Book'",
        "schema": "CREATE TABLE Statements (Statement_ID NUMBER); CREATE TABLE Documents (Other_Details TEXT, Project_ID NUMBER, Document_Description TEXT, Document_Name TEXT, Document_Type_Code TEXT, Document_ID NUMBER); CREATE TABLE Ref_Document_Types (Document_Type_Description TEXT, Document_Type_Code TEXT, Document_Type_Name TEXT);"
      }
    ],
    [
      {
        "question": "What is the name of the document on project \"Graph Database project\"?",
        "query": "SELECT document_name FROM documents AS t1 JOIN projects AS t2 ON t1.project_id = t2.project_id WHERE t2.project_details = 'Graph Database project'",
        "schema": "CREATE TABLE Projects (Project_Details TEXT, Project_ID NUMBER); CREATE TABLE Documents (Project_ID NUMBER, Document_Name TEXT, Document_ID NUMBER); CREATE TABLE Ref_Document_Types (Document_Type_Code TEXT, Document_Type_Name TEXT);"
      },
      {
        "question": "What are the document dates?",
        "query": "SELECT document_date FROM documents AS t1 JOIN projects AS t2 ON t1.project_id = t2.project_id WHERE t2.project_details = 'Graph Database project'",
        "schema": "CREATE TABLE Ref_Document_Types (Document_Type_Code TEXT, Document_Type_Name TEXT); CREATE TABLE Documents (Document_ID NUMBER, Document_Name TEXT, Project_ID NUMBER, Document_Date TIME); CREATE TABLE Projects (Project_Details TEXT, Project_ID NUMBER);"
      },
      {
        "question": "What is their description?",
        "query": "SELECT document_description FROM documents AS t1 JOIN projects AS t2 ON t1.project_id = t2.project_id WHERE t2.project_details = 'Graph Database project'",
        "schema": "CREATE TABLE Projects (Project_Details TEXT, Project_ID NUMBER); CREATE TABLE Ref_Document_Types (Document_Type_Name TEXT, Document_Type_Code TEXT, Document_Type_Description TEXT); CREATE TABLE Documents (Document_ID NUMBER, Document_Name TEXT, Document_Description TEXT, Project_ID NUMBER, Document_Date TIME);"
      }
    ],
    [
      {
        "question": "How many documents do not have expense reports?",
        "query": "SELECT COUNT ( * ) FROM documents WHERE document_id NOT IN ( SELECT document_id FROM documents_with_expenses )",
        "schema": "CREATE TABLE Ref_Document_Types (Document_Type_Code TEXT); CREATE TABLE Documents_with_Expenses (Document_Details TEXT, Document_ID NUMBER); CREATE TABLE Documents (Document_ID NUMBER, Document_Type_Code TEXT, Document_Name TEXT);"
      },
      {
        "question": "What category would the report fall into?",
        "query": "SELECT budget_type_code FROM documents_with_expenses",
        "schema": "CREATE TABLE Ref_Document_Types (Document_Type_Code TEXT); CREATE TABLE Documents_with_Expenses (Document_ID NUMBER, Budget_Type_Code TEXT, Document_Details TEXT); CREATE TABLE Documents (Document_ID NUMBER, Document_Name TEXT, Document_Type_Code TEXT);"
      }
    ],
    [
      {
        "question": "Could you show me the IDs for all documents with budget types described as 'Government'?",
        "query": "SELECT t1.document_id FROM documents_with_expenses AS t1 JOIN ref_budget_codes AS t2 ON t1.budget_type_code = t2.budget_type_code WHERE t2.budget_type_description = \"Government\"",
        "schema": "CREATE TABLE Ref_Document_Types (Document_Type_Code TEXT); CREATE TABLE Accounts (Account_ID NUMBER); CREATE TABLE Documents_with_Expenses (Document_Details TEXT, Document_ID NUMBER, Budget_Type_Code TEXT); CREATE TABLE Documents (Document_Type_Code TEXT, Document_ID NUMBER, Document_Description TEXT); CREATE TABLE Statements (Statement_ID NUMBER); CREATE TABLE Ref_Budget_Codes (Budget_Type_Description TEXT, Budget_Type_Code TEXT);"
      },
      {
        "question": "What are the document details of each of those?",
        "query": "SELECT t1.document_details FROM documents_with_expenses AS t1 JOIN ref_budget_codes AS t2 ON t1.budget_type_code = t2.budget_type_code WHERE t2.budget_type_description = \"Government\"",
        "schema": "CREATE TABLE Documents_with_Expenses (Document_Details TEXT, Budget_Type_Code TEXT, Document_ID NUMBER); CREATE TABLE Statements (Statement_ID NUMBER); CREATE TABLE Accounts (Account_ID NUMBER); CREATE TABLE Ref_Document_Types (Document_Type_Code TEXT, Document_Type_Description TEXT, Document_Type_Name TEXT); CREATE TABLE Documents (Document_Type_Code TEXT, Other_Details TEXT, Document_Description TEXT, Document_ID NUMBER); CREATE TABLE Ref_Budget_Codes (Budget_Type_Description TEXT, Budget_Type_Code TEXT);"
      },
      {
        "question": "Could you show me the IDs for all documents with budget types described as 'Organisation'?",
        "query": "SELECT t1.document_id FROM documents_with_expenses AS t1 JOIN ref_budget_codes AS t2 ON t1.budget_type_code = t2.budget_type_code WHERE t2.budget_type_description = \"Organisation\"",
        "schema": "CREATE TABLE Documents (Other_Details TEXT, Document_ID NUMBER, Document_Description TEXT, Document_Type_Code TEXT); CREATE TABLE Documents_with_Expenses (Document_Details TEXT, Document_ID NUMBER, Budget_Type_Code TEXT); CREATE TABLE Ref_Budget_Codes (Budget_Type_Code TEXT, Budget_Type_Description TEXT); CREATE TABLE Ref_Document_Types (Document_Type_Name TEXT, Document_Type_Description TEXT, Document_Type_Code TEXT); CREATE TABLE Statements (Statement_ID NUMBER); CREATE TABLE Accounts (Account_ID NUMBER);"
      },
      {
        "question": "What are the budget type codes for those?",
        "query": "SELECT t2.budget_type_code FROM documents_with_expenses AS t1 JOIN ref_budget_codes AS t2 ON t1.budget_type_code = t2.budget_type_code WHERE t2.budget_type_description = \"Organisation\"",
        "schema": "CREATE TABLE Ref_Budget_Codes (Budget_Type_Code TEXT, Budget_Type_Description TEXT); CREATE TABLE Ref_Document_Types (Document_Type_Description TEXT, Document_Type_Code TEXT, Document_Type_Name TEXT); CREATE TABLE Statements (Statement_ID NUMBER); CREATE TABLE Documents_with_Expenses (Budget_Type_Code TEXT, Document_Details TEXT, Document_ID NUMBER); CREATE TABLE Documents (Document_Type_Code TEXT, Document_ID NUMBER, Document_Description TEXT, Other_Details TEXT); CREATE TABLE Accounts (Account_ID NUMBER);"
      },
      {
        "question": "Can you tell me the document details for the highest numbered document id please?",
        "query": "SELECT document_details FROM documents_with_expenses ORDER BY document_id DESC LIMIT 1",
        "schema": "CREATE TABLE Ref_Document_Types (Document_Type_Code TEXT, Document_Type_Name TEXT, Document_Type_Description TEXT); CREATE TABLE Statements (Statement_ID NUMBER); CREATE TABLE Accounts (Account_ID NUMBER); CREATE TABLE Ref_Budget_Codes (Budget_Type_Code TEXT, Budget_Type_Description TEXT); CREATE TABLE Documents (Document_Type_Code TEXT, Document_ID NUMBER, Document_Description TEXT, Other_Details TEXT); CREATE TABLE Documents_with_Expenses (Document_ID NUMBER, Document_Details TEXT, Budget_Type_Code TEXT);"
      }
    ],
    [
      {
        "question": "How many documents are there?",
        "query": "SELECT COUNT ( * ) FROM documents",
        "schema": "CREATE TABLE Statements (Statement_ID NUMBER); CREATE TABLE Documents (Document_Name TEXT, Document_ID NUMBER, Project_ID NUMBER, Other_Details TEXT, Document_Type_Code TEXT, Document_Description TEXT); CREATE TABLE Ref_Document_Types (Document_Type_Code TEXT, Document_Type_Name TEXT);"
      },
      {
        "question": "How many of them have expenses?",
        "query": "SELECT COUNT ( document_id ) FROM documents_with_expenses",
        "schema": "CREATE TABLE Statements (Statement_ID NUMBER); CREATE TABLE Documents_with_Expenses (Document_ID NUMBER, Budget_Type_Code TEXT, Document_Details TEXT); CREATE TABLE Documents (Document_ID NUMBER, Document_Type_Code TEXT, Other_Details TEXT, Project_ID NUMBER, Document_Description TEXT, Document_Name TEXT); CREATE TABLE Ref_Document_Types (Document_Type_Name TEXT, Document_Type_Code TEXT);"
      },
      {
        "question": "What are the different document types?",
        "query": "SELECT DISTINCT document_type_code FROM documents",
        "schema": "CREATE TABLE Ref_Document_Types (Document_Type_Name TEXT, Document_Type_Code TEXT); CREATE TABLE Documents_with_Expenses (Budget_Type_Code TEXT, Document_ID NUMBER, Document_Details TEXT); CREATE TABLE Documents (Document_Description TEXT, Document_Type_Code TEXT, Other_Details TEXT, Document_ID NUMBER, Document_Name TEXT, Project_ID NUMBER); CREATE TABLE Statements (Statement_ID NUMBER);"
      },
      {
        "question": "Is GV the only budget type?",
        "query": "SELECT DISTINCT budget_type_code FROM documents_with_expenses",
        "schema": "CREATE TABLE Ref_Document_Types (Document_Type_Name TEXT, Document_Type_Code TEXT); CREATE TABLE Documents (Document_Name TEXT, Document_Description TEXT, Other_Details TEXT, Document_Type_Code TEXT, Project_ID NUMBER, Document_ID NUMBER); CREATE TABLE Documents_with_Expenses (Document_ID NUMBER, Budget_Type_Code TEXT, Document_Details TEXT); CREATE TABLE Statements (Statement_ID NUMBER); CREATE TABLE Ref_Budget_Codes (Budget_Type_Code TEXT, Budget_Type_Description TEXT);"
      }
    ],
    [
      {
        "question": "What are the account details with the largest value?",
        "query": "SELECT account_details FROM accounts ORDER BY account_details DESC LIMIT 1",
        "schema": "CREATE TABLE Accounts (Account_ID NUMBER, Account_Details TEXT, Statement_ID NUMBER);"
      },
      {
        "question": "What about the account details with the value having the character '5' in it, please?",
        "query": "SELECT account_details FROM accounts WHERE account_details LIKE \"%5%\"",
        "schema": "CREATE TABLE Accounts (Statement_ID NUMBER, Account_ID NUMBER, Account_Details TEXT);"
      },
      {
        "question": "What are the statement ids of those accounts, please?",
        "query": "SELECT STATEMENT_ID FROM accounts WHERE account_details LIKE \"%5%\"",
        "schema": "CREATE TABLE Statements (Statement_Details TEXT, Statement_ID NUMBER); CREATE TABLE Accounts (Statement_ID NUMBER, Account_Details TEXT, Account_ID NUMBER);"
      },
      {
        "question": "What about the account details with the value having the character '9' in it, please?",
        "query": "SELECT account_details FROM accounts WHERE account_details LIKE \"%9%\"",
        "schema": "CREATE TABLE Statements (Statement_Details TEXT, Statement_ID NUMBER); CREATE TABLE Accounts (Account_ID NUMBER, Statement_ID NUMBER, Account_Details TEXT);"
      },
      {
        "question": "Could you tell me the account ids of those accounts too?",
        "query": "SELECT account_id FROM accounts WHERE account_details LIKE \"%9%\"",
        "schema": "CREATE TABLE Accounts (Statement_ID NUMBER, Account_Details TEXT, Account_ID NUMBER); CREATE TABLE Statements (Statement_ID NUMBER, Statement_Details TEXT);"
      }
    ],
    [
      {
        "question": "can you show me the document date?",
        "query": "SELECT document_date FROM documents",
        "schema": "CREATE TABLE Documents (Document_Name TEXT, Document_ID NUMBER, Document_Date TIME);"
      },
      {
        "question": "can you show me the document name?",
        "query": "SELECT document_name FROM documents",
        "schema": "CREATE TABLE Documents (Document_Date TIME, Document_Name TEXT, Document_ID NUMBER);"
      },
      {
        "question": "can you show me document type code?",
        "query": "SELECT document_type_code FROM documents",
        "schema": "CREATE TABLE Ref_Document_Types (Document_Type_Name TEXT, Document_Type_Code TEXT); CREATE TABLE Documents (Document_Date TIME, Document_Name TEXT, Document_ID NUMBER, Document_Type_Code TEXT);"
      }
    ],
    [
      {
        "question": "Tell me the document date of the project id 30?",
        "query": "SELECT document_type_code FROM documents WHERE project_id = 30",
        "schema": "CREATE TABLE Documents (Project_ID NUMBER, Document_Type_Code TEXT, Document_ID NUMBER, Document_Name TEXT, Document_Date TIME); CREATE TABLE Projects (Project_ID NUMBER, Project_Details TEXT);"
      },
      {
        "question": "Tell me the statement details of the statement id 197?",
        "query": "SELECT statement_details FROM statements WHERE STATEMENT_ID = 197",
        "schema": "CREATE TABLE Projects (Project_Details TEXT, Project_ID NUMBER); CREATE TABLE Documents (Document_ID NUMBER, Project_ID NUMBER, Document_Name TEXT, Document_Date TIME, Document_Type_Code TEXT); CREATE TABLE Accounts (Statement_ID NUMBER); CREATE TABLE Statements (Statement_ID NUMBER, Statement_Details TEXT);"
      },
      {
        "question": "Tell me the document name of the document id 42 ?",
        "query": "SELECT document_name FROM documents WHERE document_id = 42",
        "schema": "CREATE TABLE Statements (Statement_Details TEXT, Statement_ID NUMBER); CREATE TABLE Ref_Document_Types (Document_Type_Code TEXT); CREATE TABLE Projects (Project_ID NUMBER, Project_Details TEXT); CREATE TABLE Documents (Project_ID NUMBER, Document_Name TEXT, Document_Date TIME, Document_Type_Code TEXT, Document_ID NUMBER); CREATE TABLE Accounts (Statement_ID NUMBER);"
      },
      {
        "question": "Show the statement detail and the corresponding document name for the statement with detail 'Private Project' ?",
        "query": "SELECT t1.statement_details , t2.document_name FROM statements AS t1 JOIN documents AS t2 ON t1.statement_id = t2.document_id WHERE t1.statement_details = 'Private Project'",
        "schema": "CREATE TABLE Projects (Project_ID NUMBER, Project_Details TEXT); CREATE TABLE Ref_Document_Types (Document_Type_Code TEXT); CREATE TABLE Accounts (Statement_ID NUMBER); CREATE TABLE Statements (Statement_ID NUMBER, Statement_Details TEXT); CREATE TABLE Documents (Document_ID NUMBER, Project_ID NUMBER, Document_Date TIME, Document_Type_Code TEXT, Document_Name TEXT);"
      }
    ],
    [
      {
        "question": "Show me the project id | Do you mean you wanna see the whole project id of the table \"Projects\"? | Yes",
        "query": "SELECT project_id FROM projects",
        "schema": "CREATE TABLE Documents (Project_ID NUMBER); CREATE TABLE Projects (Project_ID NUMBER, Project_Details TEXT);"
      },
      {
        "question": "Show me the details for the whole project id of the table \"projects\"",
        "query": "SELECT project_id,project_details FROM projects",
        "schema": "CREATE TABLE Documents (Project_ID NUMBER); CREATE TABLE Projects (Project_ID NUMBER, Project_Details TEXT);"
      },
      {
        "question": "Show me the project id and details for the project with at least two documents",
        "query": "SELECT t1.project_id , t1.project_details FROM projects AS t1 JOIN documents AS t2 ON t1.project_id = t2.project_id GROUP BY t1.project_id HAVING COUNT ( * ) > 2",
        "schema": "CREATE TABLE Projects (Project_ID NUMBER, Project_Details TEXT); CREATE TABLE Documents (Project_ID NUMBER, Document_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Can you tell me which statement has the most number of accounts? | Do you want to know its statement id? | Yes, what is its statement id?",
        "query": "SELECT t1.statement_id FROM accounts AS t1 JOIN statements AS t2 ON t1.statement_id = t2.statement_id GROUP BY t1.statement_id ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Statements (Statement_ID NUMBER, Statement_Details TEXT); CREATE TABLE Accounts (Statement_ID NUMBER, Account_ID NUMBER);"
      },
      {
        "question": "Thank you. Can you also show me the statement detail for the statement with the most number of accounts?",
        "query": "SELECT t1.statement_id , t2.statement_details FROM accounts AS t1 JOIN statements AS t2 ON t1.statement_id = t2.statement_id GROUP BY t1.statement_id ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Accounts (Statement_ID NUMBER, Account_Details TEXT, Account_ID NUMBER); CREATE TABLE Statements (Statement_Details TEXT, Statement_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What code has the most number of documents? | The type code that has the most number of documents is BK | How many documents are in BK?",
        "query": "SELECT COUNT ( * ) FROM documents WHERE document_type_code = \"BK\"",
        "schema": "CREATE TABLE Ref_Document_Types (Document_Type_Code TEXT); CREATE TABLE Documents (Document_Type_Code TEXT, Document_Name TEXT, Document_ID NUMBER);"
      },
      {
        "question": "How about in CV?",
        "query": "SELECT COUNT ( * ) FROM documents WHERE document_type_code = \"CV\"",
        "schema": "CREATE TABLE Documents (Document_Date TIME, Document_ID NUMBER, Document_Type_Code TEXT, Document_Name TEXT); CREATE TABLE Ref_Document_Types (Document_Type_Code TEXT);"
      }
    ],
    [
      {
        "question": "What are the ids of documents with the letter 's' in the name with any expense budgets?",
        "query": "SELECT t1.document_id FROM documents AS t1 JOIN documents_with_expenses AS t2 ON t1.document_id = t2.document_id WHERE t1.document_name LIKE '%s%'",
        "schema": "CREATE TABLE Ref_Document_Types (Document_Type_Code TEXT); CREATE TABLE Statements (Statement_ID NUMBER); CREATE TABLE Documents_with_Expenses (Document_ID NUMBER, Budget_Type_Code TEXT, Document_Details TEXT); CREATE TABLE Accounts (Account_ID NUMBER); CREATE TABLE Documents (Document_Name TEXT, Document_ID NUMBER);"
      },
      {
        "question": "What are the document type codes of documents with the letter 's' in the name with any expense budgets?",
        "query": "SELECT t1.document_type_code FROM documents AS t1 JOIN documents_with_expenses AS t2 ON t1.document_id = t2.document_id WHERE t1.document_name LIKE '%s%'",
        "schema": "CREATE TABLE Documents_with_Expenses (Budget_Type_Code TEXT, Document_Details TEXT, Document_ID NUMBER); CREATE TABLE Documents (Document_Name TEXT, Project_ID NUMBER, Document_ID NUMBER, Document_Type_Code TEXT); CREATE TABLE Ref_Budget_Codes (Budget_Type_Code TEXT); CREATE TABLE Accounts (Account_ID NUMBER); CREATE TABLE Ref_Document_Types (Document_Type_Code TEXT); CREATE TABLE Statements (Statement_ID NUMBER);"
      },
      {
        "question": "What are the project id of documents with the letter 's' in the name with any expense budgets?",
        "query": "SELECT t1.project_id FROM documents AS t1 JOIN documents_with_expenses AS t2 ON t1.document_id = t2.document_id WHERE t1.document_name LIKE '%s%'",
        "schema": "CREATE TABLE Documents_with_Expenses (Document_Details TEXT, Budget_Type_Code TEXT, Document_ID NUMBER); CREATE TABLE Ref_Budget_Codes (Budget_Type_Code TEXT); CREATE TABLE Statements (Statement_ID NUMBER); CREATE TABLE Projects (Project_Details TEXT, Project_ID NUMBER); CREATE TABLE Accounts (Account_ID NUMBER); CREATE TABLE Documents (Document_Type_Code TEXT, Project_ID NUMBER, Document_ID NUMBER, Document_Name TEXT); CREATE TABLE Ref_Document_Types (Document_Type_Code TEXT, Document_Type_Name TEXT);"
      },
      {
        "question": "What are the ids of documents with the letter 'a' in the name with any expense budgets?",
        "query": "SELECT t1.document_id FROM documents AS t1 JOIN documents_with_expenses AS t2 ON t1.document_id = t2.document_id WHERE t1.document_name LIKE '%a%'",
        "schema": "CREATE TABLE Accounts (Account_ID NUMBER); CREATE TABLE Documents_with_Expenses (Budget_Type_Code TEXT, Document_Details TEXT, Document_ID NUMBER); CREATE TABLE Projects (Project_Details TEXT, Project_ID NUMBER); CREATE TABLE Ref_Document_Types (Document_Type_Code TEXT, Document_Type_Name TEXT); CREATE TABLE Statements (Statement_ID NUMBER); CREATE TABLE Ref_Budget_Codes (Budget_Type_Code TEXT); CREATE TABLE Documents (Document_ID NUMBER, Document_Type_Code TEXT, Project_ID NUMBER, Document_Name TEXT);"
      }
    ],
    [
      {
        "question": "Show the statement id and the statement detail for the statement with most number of accounts?",
        "query": "SELECT t1.statement_id , t2.statement_details FROM accounts AS t1 JOIN statements AS t2 ON t1.statement_id = t2.statement_id GROUP BY t1.statement_id ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Accounts (Account_ID NUMBER, Account_Details TEXT, Statement_ID NUMBER); CREATE TABLE Statements (Statement_Details TEXT, Statement_ID NUMBER);"
      },
      {
        "question": "How many account ids are on the table?",
        "query": "SELECT COUNT ( account_id ) FROM accounts",
        "schema": "CREATE TABLE Accounts (Account_ID NUMBER, Account_Details TEXT, Statement_ID NUMBER); CREATE TABLE Statements (Statement_Details TEXT, Statement_ID NUMBER);"
      },
      {
        "question": "What is the statement detail of statement id 57?",
        "query": "SELECT statement_details FROM statements WHERE STATEMENT_ID = '57'",
        "schema": "CREATE TABLE Accounts (Account_ID NUMBER, Account_Details TEXT, Statement_ID NUMBER); CREATE TABLE Statements (Statement_Details TEXT, Statement_ID NUMBER);"
      },
      {
        "question": "What is the account details of account id 61?",
        "query": "SELECT account_details FROM accounts WHERE account_id = 61",
        "schema": "CREATE TABLE Statements (Statement_Details TEXT, Statement_ID NUMBER); CREATE TABLE Accounts (Account_ID NUMBER, Account_Details TEXT, Statement_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show the document name and the document date for all documents on project with details 'Graph Database project'",
        "query": "SELECT document_name , document_date FROM documents AS t1 JOIN projects AS t2 ON t1.project_id = t2.project_id WHERE t2.project_details = 'Graph Database project'",
        "schema": "CREATE TABLE Projects (Project_Details TEXT, Project_ID NUMBER); CREATE TABLE Documents (Document_Name TEXT, Document_Date TIME, Document_ID NUMBER, Project_ID NUMBER);"
      },
      {
        "question": "Which of those documents is the oldest? | which kind of information the oldest documents do you want me to give you? | Give me the document name from those documents that has the earliest document date.",
        "query": "SELECT document_name FROM documents AS t1 JOIN projects AS t2 ON t1.project_id = t2.project_id WHERE t2.project_details = 'Graph Database project' ORDER BY document_date LIMIT 1",
        "schema": "CREATE TABLE Documents (Document_Date TIME, Project_ID NUMBER, Document_Name TEXT, Document_ID NUMBER); CREATE TABLE Projects (Project_Details TEXT, Project_ID NUMBER);"
      },
      {
        "question": "What is its document date?",
        "query": "SELECT document_date FROM documents AS t1 JOIN projects AS t2 ON t1.project_id = t2.project_id WHERE t2.project_details = 'Graph Database project' ORDER BY document_date LIMIT 1",
        "schema": "CREATE TABLE Documents (Document_ID NUMBER, Document_Date TIME, Project_ID NUMBER, Document_Name TEXT); CREATE TABLE Projects (Project_Details TEXT, Project_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What is the budget type code with the largest number of documents?",
        "query": "SELECT budget_type_code FROM documents_with_expenses GROUP BY budget_type_code ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Documents (Document_ID NUMBER, Document_Type_Code TEXT); CREATE TABLE Ref_Budget_Codes (Budget_Type_Code TEXT, Budget_Type_Description TEXT); CREATE TABLE Documents_with_Expenses (Budget_Type_Code TEXT, Document_Details TEXT, Document_ID NUMBER);"
      },
      {
        "question": "What is the most common document detail?",
        "query": "SELECT document_details FROM documents_with_expenses GROUP BY document_details ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Ref_Budget_Codes (Budget_Type_Code TEXT, Budget_Type_Description TEXT); CREATE TABLE Documents_with_Expenses (Budget_Type_Code TEXT, Document_Details TEXT, Document_ID NUMBER); CREATE TABLE Documents (Document_Type_Code TEXT, Other_Details TEXT, Document_ID NUMBER);"
      },
      {
        "question": "What about the most common budget type code?",
        "query": "SELECT budget_type_code FROM documents_with_expenses GROUP BY budget_type_code ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Documents (Document_ID NUMBER, Document_Type_Code TEXT, Other_Details TEXT); CREATE TABLE Documents_with_Expenses (Document_ID NUMBER, Document_Details TEXT, Budget_Type_Code TEXT); CREATE TABLE Ref_Budget_Codes (Budget_Type_Description TEXT, Budget_Type_Code TEXT);"
      }
    ]
  ],
  "school_bus": [
    [
      {
        "question": "What are the school names of the schools without school buses?",
        "query": "SELECT school FROM school WHERE school_id NOT IN ( SELECT school_id FROM school_bus )",
        "schema": "CREATE TABLE driver (Name TEXT, Driver_ID NUMBER); CREATE TABLE school (School_ID NUMBER, Type TEXT, School TEXT); CREATE TABLE school_bus (School_ID NUMBER, Driver_ID NUMBER);"
      },
      {
        "question": "Can you please get me the types of those schools?",
        "query": "SELECT TYPE FROM school WHERE school_id NOT IN ( SELECT school_id FROM school_bus )",
        "schema": "CREATE TABLE school_bus (Driver_ID NUMBER, School_ID NUMBER); CREATE TABLE driver (Name TEXT, Driver_ID NUMBER); CREATE TABLE school (School_ID NUMBER, School TEXT, Type TEXT);"
      },
      {
        "question": "what are schools in Hawaii have school buses?",
        "query": "SELECT school FROM school WHERE LOCATION like \"%Hawaii%\" AND school_id IN ( SELECT school_id FROM school_bus )",
        "schema": "CREATE TABLE school (Type TEXT, School TEXT, Location TEXT, School_ID NUMBER); CREATE TABLE school_bus (School_ID NUMBER, Driver_ID NUMBER); CREATE TABLE driver (Driver_ID NUMBER, Name TEXT);"
      },
      {
        "question": "What about in Indonesia?",
        "query": "SELECT school FROM school WHERE LOCATION like \"%Indonesia\" AND school_id IN ( SELECT school_id FROM school_bus )",
        "schema": "CREATE TABLE school_bus (School_ID NUMBER, Driver_ID NUMBER); CREATE TABLE school (Type TEXT, Location TEXT, School_ID NUMBER, School TEXT); CREATE TABLE driver (Name TEXT, Driver_ID NUMBER);"
      },
      {
        "question": "How many private schools are in Hawaii?",
        "query": "SELECT COUNT ( * ) FROM school WHERE LOCATION like \"%Hawaii\" AND TYPE = \"Private\"",
        "schema": "CREATE TABLE school_bus (School_ID NUMBER, Driver_ID NUMBER); CREATE TABLE school (Type TEXT, Location TEXT, School_ID NUMBER, School TEXT); CREATE TABLE driver (Driver_ID NUMBER, Name TEXT);"
      }
    ],
    [
      {
        "question": "Can you list the driver ids and whether they drive full time or not?",
        "query": "SELECT driver_id, if_full_time FROM school_bus",
        "schema": "CREATE TABLE driver (Driver_ID NUMBER); CREATE TABLE school_bus (If_full_time OTHERS, Driver_ID NUMBER);"
      },
      {
        "question": "Hmm, I also want to know their years working.",
        "query": "SELECT driver_id, years_working, if_full_time FROM school_bus",
        "schema": "CREATE TABLE school_bus (Driver_ID NUMBER, If_full_time OTHERS, School_ID NUMBER, Years_Working NUMBER); CREATE TABLE driver (Age NUMBER, Driver_ID NUMBER); CREATE TABLE school (School_ID NUMBER);"
      },
      {
        "question": "Can you tell me the name of the driver who is driving the school bus with the longest working history?",
        "query": "SELECT t1.name FROM driver AS t1 JOIN school_bus AS t2 ON t1.driver_id = t2.driver_id ORDER BY years_working DESC LIMIT 1",
        "schema": "CREATE TABLE school (School_ID NUMBER); CREATE TABLE school_bus (Driver_ID NUMBER, Years_Working NUMBER, School_ID NUMBER, If_full_time OTHERS); CREATE TABLE driver (Driver_ID NUMBER, Age NUMBER, Name TEXT);"
      }
    ],
    [
      {
        "question": "Can you show me the number of drivers who are from Hartford City?",
        "query": "SELECT COUNT ( * ) FROM driver WHERE home_city = 'Hartford'",
        "schema": "CREATE TABLE driver (Name TEXT, Home_city TEXT, Driver_ID NUMBER); CREATE TABLE school (Location TEXT, School_ID NUMBER);"
      },
      {
        "question": "Oh, I want the names of the drivers.",
        "query": "SELECT name FROM driver WHERE home_city = 'Hartford'",
        "schema": "CREATE TABLE driver (Home_city TEXT, Driver_ID NUMBER, Name TEXT); CREATE TABLE school (School_ID NUMBER, Location TEXT);"
      },
      {
        "question": "Hmm, please show me names of the drivers who are younger than 40.",
        "query": "SELECT name FROM driver WHERE age < 40",
        "schema": "CREATE TABLE school (Location TEXT, School_ID NUMBER); CREATE TABLE driver (Name TEXT, Home_city TEXT, Driver_ID NUMBER, Age NUMBER);"
      },
      {
        "question": "Can you count the number of drivers who are from Hartford City or younger than 40?",
        "query": "SELECT COUNT ( * ) FROM driver WHERE home_city = 'Hartford' OR age < 40",
        "schema": "CREATE TABLE school (School_ID NUMBER, Location TEXT); CREATE TABLE driver (Age NUMBER, Name TEXT, Home_city TEXT, Driver_ID NUMBER);"
      }
    ],
    [
      {
        "question": "How many drivers are there?",
        "query": "SELECT COUNT ( * ) FROM driver",
        "schema": "CREATE TABLE driver (Name TEXT, Age NUMBER, Party TEXT, Driver_ID NUMBER); CREATE TABLE school_bus (Driver_ID NUMBER);"
      },
      {
        "question": "What is the average age of your drivers?",
        "query": "SELECT AVG ( age ) FROM driver",
        "schema": "CREATE TABLE school_bus (Driver_ID NUMBER); CREATE TABLE driver (Driver_ID NUMBER, Party TEXT, Name TEXT, Age NUMBER);"
      }
    ],
    [
      {
        "question": "how many driver are presented on the table",
        "query": "SELECT COUNT ( * ) FROM driver",
        "schema": "CREATE TABLE driver (Name TEXT, Driver_ID NUMBER, Age NUMBER); CREATE TABLE school_bus (Driver_ID NUMBER);"
      },
      {
        "question": "list out the driver names on the table",
        "query": "SELECT name FROM driver",
        "schema": "CREATE TABLE school_bus (Driver_ID NUMBER); CREATE TABLE driver (Driver_ID NUMBER, Age NUMBER, Name TEXT);"
      },
      {
        "question": "what is the age of Matthew Ritter",
        "query": "SELECT age FROM driver WHERE name = \"Matthew Ritter\"",
        "schema": "CREATE TABLE driver (Driver_ID NUMBER, Age NUMBER, Name TEXT); CREATE TABLE school_bus (Driver_ID NUMBER);"
      },
      {
        "question": "what is the home city of Dan Carter",
        "query": "SELECT home_city FROM driver WHERE name = \"Dan Carter\"",
        "schema": "CREATE TABLE school_bus (Driver_ID NUMBER); CREATE TABLE school (Location TEXT); CREATE TABLE driver (Name TEXT, Driver_ID NUMBER, Age NUMBER, Home_city TEXT);"
      }
    ],
    [
      {
        "question": "what are the names of all drivers?",
        "query": "SELECT name FROM driver",
        "schema": "CREATE TABLE driver (Driver_ID NUMBER, Name TEXT);"
      },
      {
        "question": "also give me their driver ids",
        "query": "SELECT name, driver_id FROM driver",
        "schema": "CREATE TABLE driver (Name TEXT, Driver_ID NUMBER);"
      },
      {
        "question": "what are the number of years for working for each driver and their names?",
        "query": "SELECT t1.name, t2.years_working FROM driver AS t1 JOIN school_bus AS t2 WHERE t1.driver_id = t2.driver_id",
        "schema": "CREATE TABLE driver (Age NUMBER, Name TEXT, Driver_ID NUMBER); CREATE TABLE school_bus (Years_Working NUMBER, Driver_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Hello!  Can you show me all school names and bus driver names for each of the school buses in this database?",
        "query": "SELECT t2.school , t3.name FROM school_bus AS t1 JOIN school AS t2 ON t1.school_id = t2.school_id JOIN driver AS t3 ON t1.driver_id = t3.driver_id",
        "schema": "CREATE TABLE school_bus (School_ID NUMBER, Driver_ID NUMBER); CREATE TABLE driver (Name TEXT, Driver_ID NUMBER); CREATE TABLE school (School TEXT, School_ID NUMBER);"
      }
    ],
    [
      {
        "question": "How many of the drivers are over 40?",
        "query": "SELECT COUNT ( * ) FROM driver WHERE age > 40",
        "schema": "CREATE TABLE driver (Driver_ID NUMBER, Name TEXT, Age NUMBER);"
      },
      {
        "question": "How many of these drivers are also from Hartford?",
        "query": "SELECT COUNT ( * ) FROM driver WHERE home_city = 'Hartford' AND age > 40",
        "schema": "CREATE TABLE driver (Name TEXT, Driver_ID NUMBER, Home_city TEXT, Age NUMBER); CREATE TABLE school (Location TEXT);"
      },
      {
        "question": "What is the party of these 4 drivers?",
        "query": "SELECT party FROM driver WHERE home_city = 'Hartford' AND age > 40",
        "schema": "CREATE TABLE driver (Age NUMBER, Name TEXT, Party TEXT, Driver_ID NUMBER, Home_city TEXT); CREATE TABLE school (Location TEXT);"
      }
    ]
  ],
  "products_for_hire": [
    [
      {
        "question": "What is the customer id that spends the most",
        "query": "SELECT customer_id FROM payments GROUP BY customer_id ORDER BY SUM ( amount_paid ) DESC LIMIT 1",
        "schema": "CREATE TABLE Customers (customer_id NUMBER, coupon_id NUMBER, last_name TEXT, first_name TEXT, good_or_bad_customer TEXT); CREATE TABLE Products_Booked (booked_amount NUMBER); CREATE TABLE Payments (customer_id NUMBER, amount_due NUMBER, amount_paid NUMBER, amount_paid_in_full_yn TEXT); CREATE TABLE Discount_Coupons (coupon_id NUMBER); CREATE TABLE Bookings (amount_of_refund NUMBER, amount_of_discount NUMBER, amount_payable NUMBER, booking_id NUMBER, amount_outstanding NUMBER, customer_id NUMBER);"
      },
      {
        "question": "For that Customer with ID 12, what was the amount they spend?",
        "query": "SELECT SUM ( amount_paid ) FROM payments WHERE customer_id = 12",
        "schema": "CREATE TABLE Payments (amount_due NUMBER, amount_paid_in_full_yn TEXT, amount_paid NUMBER, customer_id NUMBER); CREATE TABLE Customers (customer_id NUMBER, first_name TEXT, good_or_bad_customer TEXT, coupon_id NUMBER, last_name TEXT); CREATE TABLE Discount_Coupons (coupon_id NUMBER); CREATE TABLE Products_Booked (booked_amount NUMBER); CREATE TABLE Bookings (booking_id NUMBER, amount_of_discount NUMBER, amount_of_refund NUMBER, amount_payable NUMBER, customer_id NUMBER, amount_outstanding NUMBER);"
      },
      {
        "question": "What was the payment type of customer with ID 12?",
        "query": "SELECT payment_type_code FROM payments WHERE customer_id = 12",
        "schema": "CREATE TABLE Customers (first_name TEXT, last_name TEXT, customer_id NUMBER, coupon_id NUMBER, good_or_bad_customer TEXT); CREATE TABLE Discount_Coupons (coupon_id NUMBER); CREATE TABLE Bookings (customer_id NUMBER, amount_outstanding NUMBER, amount_of_discount NUMBER, booking_id NUMBER, amount_of_refund NUMBER, amount_payable NUMBER); CREATE TABLE Payments (customer_id NUMBER, amount_due NUMBER, payment_id NUMBER, amount_paid NUMBER, payment_type_code TEXT, amount_paid_in_full_yn TEXT); CREATE TABLE Products_Booked (booked_amount NUMBER);"
      }
    ],
    [
      {
        "question": "How many customers are there",
        "query": "SELECT COUNT ( * ) FROM customers",
        "schema": "CREATE TABLE Bookings (customer_id NUMBER); CREATE TABLE Customers (coupon_id NUMBER, good_or_bad_customer TEXT, first_name TEXT, gender_mf TEXT, last_name TEXT, customer_id NUMBER); CREATE TABLE Payments (customer_id NUMBER);"
      },
      {
        "question": "How many of them have a coupon amount of 500",
        "query": "SELECT COUNT ( * ) FROM customers AS t1 JOIN discount_coupons AS t2 ON t1.coupon_id = t2.coupon_id WHERE t2.coupon_amount = 500",
        "schema": "CREATE TABLE Bookings (customer_id NUMBER); CREATE TABLE Customers (good_or_bad_customer TEXT, customer_id NUMBER, gender_mf TEXT, first_name TEXT, coupon_id NUMBER, last_name TEXT); CREATE TABLE Discount_Coupons (coupon_amount NUMBER, coupon_id NUMBER); CREATE TABLE Payments (customer_id NUMBER);"
      },
      {
        "question": "What is their name | First name or last name? | What is their customer id",
        "query": "SELECT t1.customer_id FROM customers AS t1 JOIN discount_coupons AS t2 ON t1.coupon_id = t2.coupon_id WHERE t2.coupon_amount = 500",
        "schema": "CREATE TABLE Discount_Coupons (coupon_amount NUMBER, coupon_id NUMBER); CREATE TABLE Payments (customer_id NUMBER); CREATE TABLE Bookings (customer_id NUMBER); CREATE TABLE Customers (gender_mf TEXT, first_name TEXT, coupon_id NUMBER, last_name TEXT, customer_id NUMBER, good_or_bad_customer TEXT);"
      },
      {
        "question": "Are they a good or bad customer",
        "query": "SELECT t1.good_or_bad_customer FROM customers AS t1 JOIN discount_coupons AS t2 ON t1.coupon_id = t2.coupon_id WHERE t2.coupon_amount = 500",
        "schema": "CREATE TABLE Bookings (customer_id NUMBER); CREATE TABLE Customers (last_name TEXT, customer_id NUMBER, coupon_id NUMBER, first_name TEXT, good_or_bad_customer TEXT, gender_mf TEXT); CREATE TABLE Payments (customer_id NUMBER); CREATE TABLE Discount_Coupons (coupon_amount NUMBER, coupon_id NUMBER);"
      }
    ],
    [
      {
        "question": "can you show me a list of product description?",
        "query": "SELECT product_description FROM products_for_hire",
        "schema": "CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Products_for_Hire (product_id NUMBER, product_type_code TEXT, product_name TEXT, product_description TEXT); CREATE TABLE Products_Booked (product_id NUMBER);"
      },
      {
        "question": "what are the start date and end of date of the booking that has booked the product named 'book collection A'?",
        "query": "SELECT t3.booking_start_date , t3.booking_end_date FROM products_for_hire AS t1 JOIN products_booked AS t2 ON t1.product_id = t2.product_id JOIN bookings AS t3 ON t2.booking_id = t3.booking_id WHERE t1.product_name = 'Book collection A'",
        "schema": "CREATE TABLE Customers (customer_id NUMBER, date_last_hire TIME); CREATE TABLE Products_Booked (product_id NUMBER, booked_count NUMBER, booking_id NUMBER); CREATE TABLE Bookings (booking_id NUMBER, count_hired TEXT, booking_start_date TIME, booking_end_date TIME); CREATE TABLE Products_for_Hire (product_description TEXT, product_id NUMBER, product_type_code TEXT, product_name TEXT);"
      },
      {
        "question": "what is the average of booked amount?",
        "query": "SELECT AVG ( booked_amount ) FROM products_booked",
        "schema": "CREATE TABLE Products_Booked (booking_id NUMBER, booked_amount NUMBER, booked_count NUMBER, product_id NUMBER); CREATE TABLE Customers (date_last_hire TIME, customer_id NUMBER); CREATE TABLE Bookings (booking_id NUMBER, count_hired TEXT, booking_end_date TIME, booking_start_date TIME, amount_outstanding NUMBER, amount_of_discount NUMBER, amount_payable NUMBER); CREATE TABLE Products_for_Hire (product_description TEXT, product_id NUMBER, product_type_code TEXT, product_name TEXT);"
      }
    ],
    [
      {
        "question": "what is the daily hire cost of the product id 1",
        "query": "SELECT daily_hire_cost FROM products_for_hire WHERE product_id = 1",
        "schema": "CREATE TABLE Products_Booked (product_id NUMBER); CREATE TABLE View_Product_Availability (product_id NUMBER); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Products_for_Hire (product_name TEXT, daily_hire_cost NUMBER, product_type_code TEXT, product_id NUMBER); CREATE TABLE Bookings (count_hired TEXT, booking_id NUMBER, customer_id NUMBER);"
      },
      {
        "question": "what is the status date of the product name Book collection C ?",
        "query": "SELECT status_date FROM view_product_availability AS t1 JOIN products_for_hire AS t2 ON t1.product_id = t2.product_id WHERE product_name = \"Book collection C\"",
        "schema": "CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE View_Product_Availability (booking_id NUMBER, status_date TIME, product_id NUMBER, available_yn TEXT); CREATE TABLE Products_for_Hire (product_type_code TEXT, product_id NUMBER, daily_hire_cost NUMBER, product_name TEXT); CREATE TABLE Bookings (booking_status_code TEXT, booking_start_date TIME, booking_id NUMBER, customer_id NUMBER, count_hired TEXT); CREATE TABLE Products_Booked (product_id NUMBER);"
      },
      {
        "question": "what is the product description of the product id 3 ?",
        "query": "SELECT product_description FROM products_for_hire WHERE product_id = 3",
        "schema": "CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Products_Booked (product_id NUMBER); CREATE TABLE View_Product_Availability (available_yn TEXT, status_date TIME, booking_id NUMBER, product_id NUMBER); CREATE TABLE Bookings (booking_start_date TIME, booking_status_code TEXT, booking_id NUMBER, customer_id NUMBER, count_hired TEXT); CREATE TABLE Products_for_Hire (product_name TEXT, product_description TEXT, daily_hire_cost NUMBER, product_id NUMBER, product_type_code TEXT);"
      },
      {
        "question": "what are the names of products whose availability equals to 1 ?",
        "query": "SELECT t2.product_name FROM view_product_availability AS t1 JOIN products_for_hire AS t2 ON t1.product_id = t2.product_id WHERE t1.available_yn = 1",
        "schema": "CREATE TABLE Products_for_Hire (product_id NUMBER, product_description TEXT, daily_hire_cost NUMBER, product_type_code TEXT, product_name TEXT); CREATE TABLE Bookings (booking_id NUMBER, customer_id NUMBER, booking_status_code TEXT, booking_start_date TIME, count_hired TEXT); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE View_Product_Availability (booking_id NUMBER, available_yn TEXT, status_date TIME, product_id NUMBER); CREATE TABLE Products_Booked (product_id NUMBER);"
      }
    ],
    [
      {
        "question": "what is the highest booked amount",
        "query": "SELECT MAX ( booked_amount ) FROM products_booked",
        "schema": "CREATE TABLE Discount_Coupons (coupon_amount NUMBER); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Bookings (amount_outstanding NUMBER, booking_id NUMBER, amount_payable NUMBER, amount_of_refund NUMBER, booking_status_code TEXT, customer_id NUMBER, amount_of_discount NUMBER); CREATE TABLE Products_Booked (booked_amount NUMBER, booked_count NUMBER, booking_id NUMBER); CREATE TABLE Payments (amount_paid NUMBER, booking_id NUMBER, amount_paid_in_full_yn TEXT);"
      },
      {
        "question": "what is the minimum booked count for products booked",
        "query": "SELECT MIN ( booked_count ) FROM products_booked",
        "schema": "CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Products_Booked (booked_amount NUMBER, product_id NUMBER, booked_count NUMBER, booking_id NUMBER); CREATE TABLE Bookings (amount_of_discount NUMBER, amount_payable NUMBER, booking_status_code TEXT, amount_outstanding NUMBER, booking_id NUMBER, customer_id NUMBER, amount_of_refund NUMBER); CREATE TABLE Products_for_Hire (product_id NUMBER, product_name TEXT); CREATE TABLE Payments (booking_id NUMBER, amount_paid_in_full_yn TEXT, amount_paid NUMBER); CREATE TABLE Discount_Coupons (coupon_amount NUMBER);"
      },
      {
        "question": "what is the maximum booked count",
        "query": "SELECT MAX ( booked_count ) FROM products_booked",
        "schema": "CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Bookings (amount_of_discount NUMBER, amount_of_refund NUMBER, customer_id NUMBER, booking_id NUMBER, booking_status_code TEXT, amount_payable NUMBER, amount_outstanding NUMBER); CREATE TABLE Products_Booked (booked_count NUMBER, booking_id NUMBER, booked_amount NUMBER, product_id NUMBER); CREATE TABLE Products_for_Hire (product_id NUMBER, product_name TEXT); CREATE TABLE Discount_Coupons (coupon_amount NUMBER); CREATE TABLE Payments (booking_id NUMBER, amount_paid NUMBER, amount_paid_in_full_yn TEXT);"
      },
      {
        "question": "what is the least booked amount",
        "query": "SELECT MIN ( booked_amount ) FROM products_booked",
        "schema": "CREATE TABLE Discount_Coupons (coupon_amount NUMBER); CREATE TABLE Bookings (amount_outstanding NUMBER, amount_payable NUMBER, customer_id NUMBER, booking_status_code TEXT, booking_id NUMBER, amount_of_refund NUMBER, amount_of_discount NUMBER); CREATE TABLE Products_for_Hire (product_id NUMBER, product_name TEXT); CREATE TABLE Products_Booked (booking_id NUMBER, booked_amount NUMBER, booked_count NUMBER, product_id NUMBER); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Payments (amount_paid NUMBER, booking_id NUMBER, amount_paid_in_full_yn TEXT);"
      }
    ],
    [
      {
        "question": "How many 'Cutlery' type products are there?",
        "query": "SELECT COUNT ( product_id ) FROM products_for_hire WHERE product_type_code = 'Cutlery'",
        "schema": "CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE View_Product_Availability (product_id NUMBER); CREATE TABLE Products_Booked (product_id NUMBER); CREATE TABLE Products_for_Hire (product_type_code TEXT, product_description TEXT, product_id NUMBER, product_name TEXT);"
      },
      {
        "question": "Okay good to know. How many products have a daily hire cost lower than 20?",
        "query": "SELECT COUNT ( product_id ) FROM products_for_hire WHERE daily_hire_cost < 20",
        "schema": "CREATE TABLE Products_for_Hire (product_id NUMBER, daily_hire_cost NUMBER, product_name TEXT, product_type_code TEXT, product_description TEXT); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Products_Booked (product_id NUMBER); CREATE TABLE View_Product_Availability (product_id NUMBER);"
      },
      {
        "question": "Thank you for that info. Now, how many 'cutlery' products have the daily hire cost lower than 20?",
        "query": "SELECT COUNT ( product_id ) FROM products_for_hire WHERE product_type_code = 'Cutlery' AND daily_hire_cost < 20",
        "schema": "CREATE TABLE Products_for_Hire (product_type_code TEXT, product_name TEXT, daily_hire_cost NUMBER, product_description TEXT, product_id NUMBER); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Products_Booked (product_id NUMBER); CREATE TABLE View_Product_Availability (product_id NUMBER);"
      }
    ],
    [
      {
        "question": "Can you list the product ids and the booked amounts?",
        "query": "SELECT t1.product_id, t2.booked_amount FROM products_for_hire AS t1 JOIN products_booked AS t2 ON t1.product_id = t2.product_id",
        "schema": "CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Products_Booked (booked_count NUMBER, booked_amount NUMBER, booking_id NUMBER, product_id NUMBER); CREATE TABLE Products_for_Hire (product_id NUMBER, product_name TEXT); CREATE TABLE Bookings (customer_id NUMBER, amount_of_refund NUMBER, amount_outstanding NUMBER, booking_id NUMBER, amount_of_discount NUMBER); CREATE TABLE View_Product_Availability (booking_id NUMBER, product_id NUMBER);"
      },
      {
        "question": "What product ids are never booked with amount higher than 200?",
        "query": "SELECT product_id FROM products_for_hire WHERE product_id NOT IN ( SELECT product_id FROM products_booked WHERE booked_amount > 200 )",
        "schema": "CREATE TABLE Bookings (amount_of_refund NUMBER, amount_outstanding NUMBER, booking_id NUMBER, amount_of_discount NUMBER, customer_id NUMBER); CREATE TABLE View_Product_Availability (booking_id NUMBER, product_id NUMBER); CREATE TABLE Products_for_Hire (product_id NUMBER, product_type_code TEXT, product_name TEXT); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Products_Booked (booking_id NUMBER, booked_count NUMBER, product_id NUMBER, booked_amount NUMBER);"
      }
    ],
    [
      {
        "question": "Hello!  Can you show me a list of all of the coupon IDs and coupon amounts?",
        "query": "SELECT coupon_id, coupon_amount FROM discount_coupons",
        "schema": "CREATE TABLE Bookings (booking_id NUMBER, customer_id NUMBER); CREATE TABLE Customers (customer_id NUMBER, coupon_id NUMBER); CREATE TABLE Discount_Coupons (coupon_amount NUMBER, coupon_id NUMBER); CREATE TABLE Products_for_Hire (product_id NUMBER); CREATE TABLE Products_Booked (booked_amount NUMBER);"
      },
      {
        "question": "Great!  Can you filter this list to show just the rows the coupons and coupon amounts that are associated with both values of good and bad in the  \"good or bad customer\" category.",
        "query": "SELECT t1.coupon_id, t1.coupon_amount FROM discount_coupons AS t1 JOIN customers AS t2 ON t1.coupon_id = t2.coupon_id WHERE t2.good_or_bad_customer = 'good' INTERSECT SELECT t1.coupon_id, t1.coupon_amount FROM discount_coupons AS t1 JOIN customers AS t2 ON t1.coupon_id = t2.coupon_id WHERE t2.good_or_bad_customer = 'bad'",
        "schema": "CREATE TABLE Discount_Coupons (coupon_amount NUMBER, coupon_id NUMBER); CREATE TABLE Customers (coupon_id NUMBER, good_or_bad_customer TEXT, customer_id NUMBER); CREATE TABLE Products_for_Hire (product_id NUMBER); CREATE TABLE Bookings (booking_id NUMBER, amount_of_discount NUMBER, customer_id NUMBER); CREATE TABLE Products_Booked (booked_amount NUMBER);"
      },
      {
        "question": "Awesome!  Can you tell me what the date issued is for each of these two coupon_ids?",
        "query": "SELECT date_issued FROM discount_coupons WHERE coupon_id IN ( SELECT t1.coupon_id FROM discount_coupons AS t1 JOIN customers AS t2 ON t1.coupon_id = t2.coupon_id WHERE t2.good_or_bad_customer = 'good' INTERSECT SELECT t1.coupon_id FROM discount_coupons AS t1 JOIN customers AS t2 ON t1.coupon_id = t2.coupon_id WHERE t2.good_or_bad_customer = 'bad' )",
        "schema": "CREATE TABLE Bookings (booking_id NUMBER, customer_id NUMBER, amount_of_discount NUMBER); CREATE TABLE Discount_Coupons (date_issued TIME, coupon_id NUMBER, coupon_amount NUMBER); CREATE TABLE Products_for_Hire (product_id NUMBER); CREATE TABLE Customers (coupon_id NUMBER, customer_id NUMBER, good_or_bad_customer TEXT, date_became_customer TIME); CREATE TABLE Products_Booked (booked_amount NUMBER);"
      }
    ],
    [
      {
        "question": "Hello, what is the total number of bookings?",
        "query": "SELECT COUNT ( * ) FROM bookings",
        "schema": "CREATE TABLE Payments (booking_id NUMBER); CREATE TABLE Products_Booked (booked_count NUMBER, booking_id NUMBER, booked_amount NUMBER); CREATE TABLE Bookings (booking_end_date TIME, booking_id NUMBER, returned_damaged_yn TEXT, customer_id NUMBER, booking_status_code TEXT, amount_of_refund NUMBER, amount_payable NUMBER, booking_start_date TIME, amount_of_discount NUMBER, count_hired TEXT, amount_outstanding NUMBER); CREATE TABLE Customers (customer_id NUMBER);"
      },
      {
        "question": "Perfect, and how many different customers were there?",
        "query": "SELECT COUNT ( DISTINCT customer_id ) FROM bookings",
        "schema": "CREATE TABLE Payments (booking_id NUMBER, customer_id NUMBER); CREATE TABLE Products_Booked (booking_id NUMBER, booked_count NUMBER, booked_amount NUMBER); CREATE TABLE Bookings (customer_id NUMBER, returned_damaged_yn TEXT, booking_start_date TIME, amount_payable NUMBER, amount_of_refund NUMBER, booking_end_date TIME, count_hired TEXT, amount_of_discount NUMBER, booking_status_code TEXT, booking_id NUMBER, amount_outstanding NUMBER); CREATE TABLE Customers (gender_mf TEXT, customer_id NUMBER, last_name TEXT, good_or_bad_customer TEXT, first_name TEXT);"
      },
      {
        "question": "Awesome! And finally, can you list the customer id, first name, and total bookings of each customer?",
        "query": "SELECT t1.customer_id , t1.first_name , COUNT ( * ) FROM customers AS t1 JOIN bookings AS t2 ON t1.customer_id = t2.customer_id GROUP BY t1.customer_id",
        "schema": "CREATE TABLE Customers (last_name TEXT, first_name TEXT, good_or_bad_customer TEXT, customer_id NUMBER, gender_mf TEXT); CREATE TABLE Bookings (amount_outstanding NUMBER, booking_id NUMBER, booking_end_date TIME, amount_of_discount NUMBER, returned_damaged_yn TEXT, customer_id NUMBER, amount_payable NUMBER, count_hired TEXT, booking_start_date TIME, amount_of_refund NUMBER, booking_status_code TEXT); CREATE TABLE Payments (customer_id NUMBER, booking_id NUMBER); CREATE TABLE Products_Booked (booked_count NUMBER, booked_amount NUMBER, booking_id NUMBER);"
      }
    ],
    [
      {
        "question": "Could you show me the maximum booked count for the booked products?",
        "query": "SELECT MAX ( booked_count ) FROM products_booked",
        "schema": "CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Products_Booked (booking_id NUMBER, product_id NUMBER, booked_count NUMBER, booked_amount NUMBER); CREATE TABLE Bookings (customer_id NUMBER, booking_id NUMBER, count_hired TEXT); CREATE TABLE Products_for_Hire (product_name TEXT, product_type_code TEXT, product_description TEXT, product_id NUMBER);"
      },
      {
        "question": "Could you also add the minimum number of booked products?",
        "query": "SELECT MAX ( booked_count ) , MIN ( booked_count ) FROM products_booked",
        "schema": "CREATE TABLE Products_Booked (booking_id NUMBER, booked_amount NUMBER, product_id NUMBER, booked_count NUMBER); CREATE TABLE Bookings (booking_id NUMBER, customer_id NUMBER, count_hired TEXT); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Products_for_Hire (product_name TEXT, product_id NUMBER, product_type_code TEXT, product_description TEXT);"
      },
      {
        "question": "Finally, could you add the average booked count for the products?",
        "query": "SELECT MAX ( booked_count ) , MIN ( booked_count ) , AVG ( booked_count ) FROM products_booked",
        "schema": "CREATE TABLE Products_Booked (booked_count NUMBER, product_id NUMBER, booking_id NUMBER, booked_amount NUMBER); CREATE TABLE Bookings (count_hired TEXT, booking_id NUMBER, customer_id NUMBER); CREATE TABLE Products_for_Hire (product_description TEXT, product_type_code TEXT, product_id NUMBER, product_name TEXT); CREATE TABLE Customers (customer_id NUMBER);"
      }
    ],
    [
      {
        "question": "actually i mean how many product are on the table | Did you mean to ask for the distinct number of product ids in the table Products_Booked? | exactly",
        "query": "SELECT COUNT ( DISTINCT product_id ) FROM products_booked",
        "schema": "CREATE TABLE View_Product_Availability (product_id NUMBER); CREATE TABLE Products_Booked (booking_id NUMBER, product_id NUMBER, booked_count NUMBER); CREATE TABLE Bookings (booking_id NUMBER); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Products_for_Hire (product_name TEXT, product_id NUMBER, product_type_code TEXT);"
      },
      {
        "question": "what is the highest booked amount",
        "query": "SELECT MAX ( booked_amount ) FROM products_booked",
        "schema": "CREATE TABLE Bookings (amount_payable NUMBER, amount_of_refund NUMBER, booking_id NUMBER, amount_of_discount NUMBER, amount_outstanding NUMBER); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Products_Booked (booking_id NUMBER, booked_count NUMBER, product_id NUMBER, booked_amount NUMBER); CREATE TABLE Products_for_Hire (product_type_code TEXT, product_id NUMBER, product_name TEXT); CREATE TABLE View_Product_Availability (product_id NUMBER);"
      },
      {
        "question": "what is the least booked count",
        "query": "SELECT MIN ( booked_count ) FROM products_booked",
        "schema": "CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE View_Product_Availability (product_id NUMBER); CREATE TABLE Bookings (amount_outstanding NUMBER, amount_of_discount NUMBER, amount_of_refund NUMBER, amount_payable NUMBER, booking_id NUMBER); CREATE TABLE Products_Booked (product_id NUMBER, booking_id NUMBER, booked_count NUMBER, booked_amount NUMBER); CREATE TABLE Products_for_Hire (product_type_code TEXT, product_id NUMBER, product_name TEXT);"
      },
      {
        "question": "what is the id of the product that is booked for 5 times?",
        "query": "SELECT product_id FROM products_booked WHERE booked_count = 5",
        "schema": "CREATE TABLE Bookings (amount_of_refund NUMBER, amount_payable NUMBER, amount_outstanding NUMBER, booking_id NUMBER, amount_of_discount NUMBER); CREATE TABLE Products_Booked (booking_id NUMBER, product_id NUMBER, booked_count NUMBER, booked_amount NUMBER); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Products_for_Hire (product_name TEXT, product_id NUMBER, product_type_code TEXT); CREATE TABLE View_Product_Availability (product_id NUMBER);"
      }
    ],
    [
      {
        "question": "What is the product ID for the booked amount 102.76?",
        "query": "SELECT product_id FROM products_booked WHERE booked_amount = 102.76",
        "schema": "CREATE TABLE Products_Booked (booking_id NUMBER, product_id NUMBER, booked_amount NUMBER, booked_count NUMBER); CREATE TABLE Bookings (customer_id NUMBER, amount_outstanding NUMBER, amount_of_discount NUMBER, amount_of_refund NUMBER, amount_payable NUMBER, booking_id NUMBER); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE View_Product_Availability (product_id NUMBER); CREATE TABLE Products_for_Hire (product_name TEXT, product_id NUMBER); CREATE TABLE Discount_Coupons (coupon_id NUMBER, coupon_amount NUMBER);"
      },
      {
        "question": "What is the product description that matches that product ID?",
        "query": "SELECT t2.product_description FROM products_booked AS t1 JOIN products_for_hire AS t2 ON t1.product_id = t2.product_id WHERE t1.booked_amount = 102.76",
        "schema": "CREATE TABLE Discount_Coupons (coupon_amount NUMBER, coupon_id NUMBER); CREATE TABLE Products_for_Hire (product_id NUMBER, product_type_code TEXT, product_name TEXT, product_description TEXT); CREATE TABLE View_Product_Availability (product_id NUMBER); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Products_Booked (booking_id NUMBER, booked_amount NUMBER, product_id NUMBER, booked_count NUMBER); CREATE TABLE Bookings (amount_of_discount NUMBER, amount_payable NUMBER, booking_id NUMBER, amount_outstanding NUMBER, customer_id NUMBER, amount_of_refund NUMBER);"
      }
    ]
  ],
  "theme_gallery": [
    [
      {
        "question": "How many exhibitions have an attendance of more than 100?",
        "query": "SELECT COUNT ( * ) FROM exhibition_record AS t1 JOIN exhibition AS t2 ON t1.exhibition_id = t2.exhibition_id WHERE t1.attendance > 100",
        "schema": "CREATE TABLE exhibition (Exhibition_ID NUMBER); CREATE TABLE exhibition_record (Attendance NUMBER, Exhibition_ID NUMBER);"
      },
      {
        "question": "How many exhibitions have a ticket price below 10?",
        "query": "SELECT COUNT ( * ) FROM exhibition_record AS t1 JOIN exhibition AS t2 ON t1.exhibition_id = t2.exhibition_id WHERE t2.ticket_price < 10",
        "schema": "CREATE TABLE exhibition_record (Exhibition_ID NUMBER, Attendance NUMBER); CREATE TABLE exhibition (Exhibition_ID NUMBER, Ticket_Price NUMBER);"
      },
      {
        "question": "What are the dates of the exhibitions who have an attendance of more than 100?",
        "query": "SELECT t1.date FROM exhibition_record AS t1 JOIN exhibition AS t2 ON t1.exhibition_id = t2.exhibition_id WHERE t1.attendance > 100",
        "schema": "CREATE TABLE exhibition (Year NUMBER, Ticket_Price NUMBER, Exhibition_ID NUMBER); CREATE TABLE exhibition_record (Attendance NUMBER, Date TEXT, Exhibition_ID NUMBER);"
      },
      {
        "question": "What was the theme of the party held in the latest year?",
        "query": "SELECT theme FROM exhibition ORDER BY YEAR DESC LIMIT 1",
        "schema": "CREATE TABLE exhibition (Year NUMBER, Theme TEXT, Exhibition_ID NUMBER, Ticket_Price NUMBER); CREATE TABLE exhibition_record (Date TEXT, Exhibition_ID NUMBER, Attendance NUMBER);"
      },
      {
        "question": "What was the ticket price of that party?",
        "query": "SELECT ticket_price FROM exhibition ORDER BY YEAR DESC LIMIT 1",
        "schema": "CREATE TABLE exhibition (Exhibition_ID NUMBER, Theme TEXT, Ticket_Price NUMBER, Year NUMBER); CREATE TABLE exhibition_record (Date TEXT, Exhibition_ID NUMBER, Attendance NUMBER);"
      }
    ],
    [
      {
        "question": "what country is Vijay Singh from?",
        "query": "SELECT country FROM artist WHERE name = 'Vijay Singh'",
        "schema": "CREATE TABLE exhibition (Artist_ID NUMBER); CREATE TABLE artist (Country TEXT, Artist_ID NUMBER, Name TEXT);"
      },
      {
        "question": "who is the latest artist?",
        "query": "SELECT name FROM artist ORDER BY year_join DESC LIMIT 1",
        "schema": "CREATE TABLE exhibition (Artist_ID NUMBER, Year NUMBER); CREATE TABLE artist (Country TEXT, Age NUMBER, Year_Join NUMBER, Name TEXT, Artist_ID NUMBER);"
      },
      {
        "question": "what year did Vijay Singh joined?",
        "query": "SELECT year_join FROM artist WHERE name = 'Vijay Singh'",
        "schema": "CREATE TABLE artist (Year_Join NUMBER, Age NUMBER, Country TEXT, Artist_ID NUMBER, Name TEXT); CREATE TABLE exhibition (Year NUMBER, Artist_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Can you please tell me the names of the artists who don't have any exhibitions?",
        "query": "SELECT name FROM artist WHERE artist_id NOT IN ( SELECT artist_id FROM exhibition )",
        "schema": "CREATE TABLE exhibition (Exhibition_ID NUMBER, Artist_ID NUMBER); CREATE TABLE artist (Name TEXT, Artist_ID NUMBER);"
      },
      {
        "question": "What are their countries?",
        "query": "SELECT country FROM artist WHERE artist_id NOT IN ( SELECT artist_id FROM exhibition )",
        "schema": "CREATE TABLE artist (Artist_ID NUMBER, Name TEXT, Country TEXT); CREATE TABLE exhibition (Exhibition_ID NUMBER, Artist_ID NUMBER);"
      },
      {
        "question": "What are their ages?",
        "query": "SELECT age FROM artist WHERE artist_id NOT IN ( SELECT artist_id FROM exhibition )",
        "schema": "CREATE TABLE exhibition (Artist_ID NUMBER, Exhibition_ID NUMBER); CREATE TABLE artist (Age NUMBER, Name TEXT, Country TEXT, Artist_ID NUMBER);"
      },
      {
        "question": "What is the name of the oldest artist?",
        "query": "SELECT name FROM artist ORDER BY age DESC LIMIT 1",
        "schema": "CREATE TABLE artist (Name TEXT, Artist_ID NUMBER, Country TEXT, Year_Join NUMBER, Age NUMBER); CREATE TABLE exhibition (Year NUMBER, Exhibition_ID NUMBER, Artist_ID NUMBER);"
      },
      {
        "question": "Did he have any exhibitions?",
        "query": "SELECT name FROM artist WHERE artist_id IN ( SELECT artist_id FROM exhibition ) AND name = \"Jeff Sluman\"",
        "schema": "CREATE TABLE artist (Year_Join NUMBER, Artist_ID NUMBER, Name TEXT, Age NUMBER, Country TEXT); CREATE TABLE exhibition (Exhibition_ID NUMBER, Year NUMBER, Artist_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What is the name for the artist with the most number of exhibitions?",
        "query": "SELECT t2.name FROM exhibition AS t1 JOIN artist AS t2 ON t1.artist_id = t2.artist_id GROUP BY t1.artist_id ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE exhibition (Artist_ID NUMBER, Exhibition_ID NUMBER); CREATE TABLE artist (Name TEXT, Artist_ID NUMBER);"
      },
      {
        "question": "What country is he from?",
        "query": "SELECT t2.country FROM exhibition AS t1 JOIN artist AS t2 ON t1.artist_id = t2.artist_id GROUP BY t1.artist_id ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE artist (Artist_ID NUMBER, Name TEXT, Country TEXT); CREATE TABLE exhibition (Exhibition_ID NUMBER, Artist_ID NUMBER);"
      },
      {
        "question": "Who is the artist with the least number of exhibitions?",
        "query": "SELECT * FROM exhibition AS t1 JOIN artist AS t2 ON t1.artist_id = t2.artist_id GROUP BY t1.artist_id ORDER BY COUNT ( * ) LIMIT 1",
        "schema": "CREATE TABLE exhibition (Exhibition_ID NUMBER, Artist_ID NUMBER); CREATE TABLE artist (Name TEXT, Artist_ID NUMBER, Country TEXT);"
      }
    ],
    [
      {
        "question": "Show the theme for exhibitions with records of an attendance below 100",
        "query": "SELECT t2.theme FROM exhibition_record AS t1 JOIN exhibition AS t2 ON t1.exhibition_id = t2.exhibition_id WHERE t1.attendance < 100",
        "schema": "CREATE TABLE exhibition (Theme TEXT, Exhibition_ID NUMBER); CREATE TABLE exhibition_record (Exhibition_ID NUMBER, Attendance NUMBER);"
      },
      {
        "question": "Show the theme for exhibitions with records of an attendance above 500",
        "query": "SELECT t2.theme FROM exhibition_record AS t1 JOIN exhibition AS t2 ON t1.exhibition_id = t2.exhibition_id WHERE t1.attendance > 500",
        "schema": "CREATE TABLE exhibition_record (Attendance NUMBER, Exhibition_ID NUMBER); CREATE TABLE exhibition (Exhibition_ID NUMBER, Theme TEXT);"
      },
      {
        "question": "Show me the dates of those exhibitions",
        "query": "SELECT t1.date FROM exhibition_record AS t1 JOIN exhibition AS t2 ON t1.exhibition_id = t2.exhibition_id WHERE t1.attendance > 500",
        "schema": "CREATE TABLE exhibition (Year NUMBER, Exhibition_ID NUMBER, Theme TEXT); CREATE TABLE exhibition_record (Attendance NUMBER, Date TEXT, Exhibition_ID NUMBER);"
      }
    ],
    [
      {
        "question": "how many exhibition are presented on the table",
        "query": "SELECT COUNT ( * ) FROM exhibition",
        "schema": "CREATE TABLE exhibition (Exhibition_ID NUMBER); CREATE TABLE exhibition_record (Exhibition_ID NUMBER);"
      },
      {
        "question": "ok fine then list out the artists name",
        "query": "SELECT name FROM artist",
        "schema": "CREATE TABLE artist (Name TEXT, Artist_ID NUMBER); CREATE TABLE exhibition (Exhibition_ID NUMBER, Artist_ID NUMBER); CREATE TABLE exhibition_record (Exhibition_ID NUMBER);"
      },
      {
        "question": "what is the age of Vijay Singh",
        "query": "SELECT age FROM artist WHERE name = \"Vijay Singh\"",
        "schema": "CREATE TABLE exhibition (Exhibition_ID NUMBER, Artist_ID NUMBER); CREATE TABLE artist (Artist_ID NUMBER, Name TEXT, Age NUMBER); CREATE TABLE exhibition_record (Exhibition_ID NUMBER);"
      },
      {
        "question": "what is the highest ticket price on the table",
        "query": "SELECT ticket_price FROM exhibition ORDER BY ticket_price DESC LIMIT 1",
        "schema": "CREATE TABLE artist (Age NUMBER, Name TEXT, Artist_ID NUMBER); CREATE TABLE exhibition_record (Exhibition_ID NUMBER); CREATE TABLE exhibition (Artist_ID NUMBER, Exhibition_ID NUMBER, Ticket_Price NUMBER);"
      },
      {
        "question": "What is the theme and artist name for the exhibition with a ticket price higher than the average?\"",
        "query": "SELECT t1.theme , t2.name FROM exhibition AS t1 JOIN artist AS t2 ON t1.artist_id = t2.artist_id WHERE t1.ticket_price > ( SELECT AVG ( ticket_price ) FROM exhibition )",
        "schema": "CREATE TABLE exhibition (Artist_ID NUMBER, Theme TEXT, Exhibition_ID NUMBER, Ticket_Price NUMBER); CREATE TABLE artist (Age NUMBER, Name TEXT, Artist_ID NUMBER); CREATE TABLE exhibition_record (Exhibition_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Hello! Can you provide me with a list of all of the artist names?",
        "query": "SELECT name FROM artist",
        "schema": "CREATE TABLE artist (Name TEXT, Artist_ID NUMBER); CREATE TABLE exhibition (Artist_ID NUMBER);"
      },
      {
        "question": "Excellent!  Can you filter this list to show only the names of artists above the age of 46?",
        "query": "SELECT name FROM artist WHERE age > 46",
        "schema": "CREATE TABLE artist (Artist_ID NUMBER, Age NUMBER, Name TEXT); CREATE TABLE exhibition (Artist_ID NUMBER);"
      },
      {
        "question": "Great!  Can you tell me how many of these artists above age 46 joined after 1990?",
        "query": "SELECT COUNT ( * ) FROM artist WHERE age > 46 AND year_join > 1990",
        "schema": "CREATE TABLE exhibition (Artist_ID NUMBER); CREATE TABLE artist (Year_Join NUMBER, Age NUMBER, Name TEXT, Artist_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What is the highest age of the the Artists from the United States?",
        "query": "SELECT MAX ( age ) FROM artist WHERE country = 'United States'",
        "schema": "CREATE TABLE exhibition (Artist_ID NUMBER); CREATE TABLE artist (Country TEXT, Name TEXT, Artist_ID NUMBER, Age NUMBER);"
      },
      {
        "question": "How many artists from the USA joined after 1993?",
        "query": "SELECT COUNT ( artist_id ) FROM artist WHERE country = 'United States' AND year_join>1993",
        "schema": "CREATE TABLE exhibition (Artist_ID NUMBER, Year NUMBER); CREATE TABLE artist (Name TEXT, Age NUMBER, Country TEXT, Artist_ID NUMBER, Year_Join NUMBER);"
      },
      {
        "question": "When did Vijay Singh join?",
        "query": "SELECT year_join FROM artist WHERE name = 'Vijay Singh'",
        "schema": "CREATE TABLE artist (Country TEXT, Name TEXT, Artist_ID NUMBER, Year_Join NUMBER, Age NUMBER); CREATE TABLE exhibition (Artist_ID NUMBER, Year NUMBER);"
      }
    ],
    [
      {
        "question": "Show the average ticket prices for exhibitions for all years before 2009?",
        "query": "SELECT AVG ( ticket_price ) FROM exhibition WHERE YEAR < 2009",
        "schema": "CREATE TABLE exhibition_record (Exhibition_ID NUMBER, Date TEXT); CREATE TABLE exhibition (Ticket_Price NUMBER, Exhibition_ID NUMBER, Year NUMBER);"
      },
      {
        "question": "Show minimum ticket prices for exhibitions for all years before 2009?",
        "query": "SELECT MIN ( ticket_price ) FROM exhibition WHERE YEAR < 2009",
        "schema": "CREATE TABLE exhibition_record (Date TEXT, Exhibition_ID NUMBER); CREATE TABLE exhibition (Exhibition_ID NUMBER, Year NUMBER, Ticket_Price NUMBER);"
      },
      {
        "question": "Show maximum ticket prices for exhibitions for all years before 2009?",
        "query": "SELECT MAX ( ticket_price ) FROM exhibition WHERE YEAR < 2009",
        "schema": "CREATE TABLE exhibition_record (Exhibition_ID NUMBER, Date TEXT); CREATE TABLE exhibition (Year NUMBER, Exhibition_ID NUMBER, Ticket_Price NUMBER);"
      },
      {
        "question": "Show average ticket price for exhibitions for year 2005?",
        "query": "SELECT AVG ( ticket_price ) FROM exhibition WHERE YEAR = 2005",
        "schema": "CREATE TABLE exhibition (Exhibition_ID NUMBER, Year NUMBER, Ticket_Price NUMBER); CREATE TABLE exhibition_record (Exhibition_ID NUMBER, Date TEXT);"
      },
      {
        "question": "Show average ticket price for exhibitions for all years before 2006?",
        "query": "SELECT AVG ( ticket_price ) FROM exhibition WHERE YEAR < 2006",
        "schema": "CREATE TABLE exhibition (Exhibition_ID NUMBER, Year NUMBER, Ticket_Price NUMBER); CREATE TABLE exhibition_record (Exhibition_ID NUMBER, Date TEXT);"
      }
    ],
    [
      {
        "question": "what is the average of artist ages?",
        "query": "SELECT AVG ( age ) FROM artist",
        "schema": "CREATE TABLE artist (Age NUMBER, Artist_ID NUMBER, Name TEXT); CREATE TABLE exhibition (Artist_ID NUMBER);"
      },
      {
        "question": "who is the oldest artist? | do you want to show his/her name? | yes",
        "query": "SELECT name FROM artist ORDER BY age DESC LIMIT 1",
        "schema": "CREATE TABLE artist (Artist_ID NUMBER, Name TEXT, Year_Join NUMBER, Age NUMBER); CREATE TABLE exhibition (Artist_ID NUMBER);"
      },
      {
        "question": "can you show me artist's countries? | did you mean the country of the oldest artist or countries of all the artists? | countries of all the artists",
        "query": "SELECT DISTINCT country FROM artist",
        "schema": "CREATE TABLE artist (Name TEXT, Artist_ID NUMBER, Country TEXT, Age NUMBER, Year_Join NUMBER); CREATE TABLE exhibition (Artist_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Can you list the ages of all the artists from United States?",
        "query": "SELECT age FROM artist WHERE country = \"United States\"",
        "schema": "CREATE TABLE exhibition (Artist_ID NUMBER); CREATE TABLE artist (Name TEXT, Age NUMBER, Artist_ID NUMBER, Country TEXT);"
      },
      {
        "question": "What is the average age of all the artists from United States?",
        "query": "SELECT AVG ( age ) FROM artist WHERE country = 'United States'",
        "schema": "CREATE TABLE exhibition (Artist_ID NUMBER); CREATE TABLE artist (Name TEXT, Artist_ID NUMBER, Country TEXT, Age NUMBER);"
      },
      {
        "question": "Hmm, I also want to know the minimum age of all the artists from United States please.",
        "query": "SELECT MIN ( age ) FROM artist WHERE country = 'United States'",
        "schema": "CREATE TABLE artist (Name TEXT, Artist_ID NUMBER, Country TEXT, Age NUMBER); CREATE TABLE exhibition (Artist_ID NUMBER);"
      }
    ]
  ],
  "climbing": [
    [
      {
        "question": "What are the names of mountains in the area?",
        "query": "SELECT name FROM mountain",
        "schema": "CREATE TABLE climber (Mountain_ID NUMBER, Name TEXT); CREATE TABLE mountain (Range TEXT, Height NUMBER, Mountain_ID NUMBER, Country TEXT, Name TEXT);"
      },
      {
        "question": "How many of these have a height above 5000?",
        "query": "SELECT COUNT ( name ) FROM mountain WHERE height > 5000",
        "schema": "CREATE TABLE climber (Mountain_ID NUMBER, Name TEXT); CREATE TABLE mountain (Mountain_ID NUMBER, Country TEXT, Prominence NUMBER, Height NUMBER, Name TEXT, Range TEXT);"
      },
      {
        "question": "What are the names of these mountains?",
        "query": "SELECT name FROM mountain WHERE height > 5000",
        "schema": "CREATE TABLE mountain (Prominence NUMBER, Name TEXT, Country TEXT, Mountain_ID NUMBER, Height NUMBER, Range TEXT); CREATE TABLE climber (Mountain_ID NUMBER, Name TEXT);"
      },
      {
        "question": "Which of these 3 mountains is the tallest?",
        "query": "SELECT name FROM mountain WHERE height > 5000 AND prominence > 1000 ORDER BY height DESC LIMIT 1",
        "schema": "CREATE TABLE climber (Mountain_ID NUMBER, Name TEXT); CREATE TABLE mountain (Mountain_ID NUMBER, Height NUMBER, Range TEXT, Name TEXT, Prominence NUMBER, Country TEXT);"
      }
    ],
    [
      {
        "question": "list the countries with mountains with height less than 5200",
        "query": "SELECT country FROM mountain WHERE height < 5200",
        "schema": "CREATE TABLE climber (Country TEXT); CREATE TABLE mountain (Mountain_ID NUMBER, Country TEXT, Prominence NUMBER, Height NUMBER);"
      },
      {
        "question": "what are countries with mountains with height more than 5600",
        "query": "SELECT country FROM mountain WHERE height > 5600",
        "schema": "CREATE TABLE climber (Country TEXT); CREATE TABLE mountain (Mountain_ID NUMBER, Country TEXT, Height NUMBER, Prominence NUMBER);"
      },
      {
        "question": "list both the countries with mountains height less than 5200 and height more than 5600 in the same table",
        "query": "SELECT country FROM mountain WHERE height > 5600 INTERSECT SELECT country FROM mountain WHERE height < 5200",
        "schema": "CREATE TABLE climber (Country TEXT); CREATE TABLE mountain (Height NUMBER, Mountain_ID NUMBER, Prominence NUMBER, Country TEXT);"
      }
    ],
    [
      {
        "question": "How many mountains in this table?",
        "query": "SELECT COUNT ( * ) FROM mountain",
        "schema": "CREATE TABLE mountain (Mountain_ID NUMBER, Name TEXT); CREATE TABLE climber (Mountain_ID NUMBER);"
      },
      {
        "question": "Show the distinct names of mountains climbed by climbers from country \"West Germany\".",
        "query": "SELECT DISTINCT t2.name FROM climber AS t1 JOIN mountain AS t2 ON t1.mountain_id = t2.mountain_id WHERE t1.country = \"West Germany\"",
        "schema": "CREATE TABLE mountain (Country TEXT, Mountain_ID NUMBER, Name TEXT); CREATE TABLE climber (Country TEXT, Name TEXT, Mountain_ID NUMBER);"
      },
      {
        "question": "Please show me the name of the highest mountain.",
        "query": "SELECT name FROM mountain ORDER BY height DESC LIMIT 1",
        "schema": "CREATE TABLE mountain (Country TEXT, Name TEXT, Height NUMBER, Prominence NUMBER, Mountain_ID NUMBER); CREATE TABLE climber (Mountain_ID NUMBER, Name TEXT, Country TEXT);"
      }
    ],
    [
      {
        "question": "Please list the names of all the climbers.",
        "query": "SELECT name FROM climber",
        "schema": "CREATE TABLE climber (Name TEXT, Climber_ID NUMBER);"
      },
      {
        "question": "Can you show me the climbers who climbed mountains in Country Uganda? | The climbers with IDs of 9 and 10 climbed mountains in the country Uganda | Hmm, I want to know the times used by the climbers to climb mountains in Country Uganda please.",
        "query": "SELECT t1.time FROM climber AS t1 JOIN mountain AS t2 ON t1.mountain_id = t2.mountain_id WHERE t2.country = \"Uganda\"",
        "schema": "CREATE TABLE climber (Climber_ID NUMBER, Name TEXT, Mountain_ID NUMBER, Time TEXT, Country TEXT); CREATE TABLE mountain (Height NUMBER, Country TEXT, Mountain_ID NUMBER, Name TEXT);"
      }
    ],
    [
      {
        "question": "what is height of Kibo (Uhuru Pk)",
        "query": "SELECT height FROM mountain WHERE name = 'Kibo ( Uhuru Pk ) '",
        "schema": "CREATE TABLE mountain (Prominence NUMBER, Height NUMBER, Mountain_ID NUMBER, Name TEXT); CREATE TABLE climber (Climber_ID NUMBER, Name TEXT);"
      },
      {
        "question": "how many mountain does Tanzania have? | Do you mean the number of mountains in the country Tanzania\uff1f | yes",
        "query": "SELECT COUNT ( * ) FROM mountain WHERE country = 'Tanzania'",
        "schema": "CREATE TABLE mountain (Country TEXT, Prominence NUMBER, Name TEXT, Height NUMBER, Mountain_ID NUMBER); CREATE TABLE climber (Climber_ID NUMBER, Name TEXT, Country TEXT);"
      },
      {
        "question": "what is the range of Mount Kenya (Batian) in country kenya",
        "query": "SELECT RANGE FROM mountain WHERE country = 'Kenya' AND name = 'Mount Kenya ( Batian ) '",
        "schema": "CREATE TABLE climber (Country TEXT, Name TEXT, Climber_ID NUMBER); CREATE TABLE mountain (Prominence NUMBER, Range TEXT, Country TEXT, Height NUMBER, Name TEXT, Mountain_ID NUMBER);"
      },
      {
        "question": "highest mountain in Tanzania | Do you mean the name of the highest mountain in country Tanzania? | yes",
        "query": "SELECT name FROM mountain WHERE country = 'Tanzania' ORDER BY height DESC LIMIT 1",
        "schema": "CREATE TABLE climber (Name TEXT, Climber_ID NUMBER, Country TEXT); CREATE TABLE mountain (Mountain_ID NUMBER, Name TEXT, Prominence NUMBER, Country TEXT, Range TEXT, Height NUMBER);"
      },
      {
        "question": "The name of the smallest mountain from all countries | Do you mean the name of the lowest mountain? | YES",
        "query": "SELECT name FROM mountain ORDER BY height LIMIT 1",
        "schema": "CREATE TABLE mountain (Mountain_ID NUMBER, Prominence NUMBER, Country TEXT, Height NUMBER, Name TEXT, Range TEXT); CREATE TABLE climber (Name TEXT, Climber_ID NUMBER, Country TEXT);"
      }
    ],
    [
      {
        "question": "What are the names of the mountains with height more than 5000?",
        "query": "SELECT name FROM mountain WHERE height > 5000",
        "schema": "CREATE TABLE climber (Mountain_ID NUMBER); CREATE TABLE mountain (Name TEXT, Mountain_ID NUMBER, Height NUMBER, Prominence NUMBER);"
      },
      {
        "question": "Which of those has a prominence greater than 1000?",
        "query": "SELECT name FROM mountain WHERE height > 5000 AND prominence > 1000",
        "schema": "CREATE TABLE mountain (Height NUMBER, Prominence NUMBER, Mountain_ID NUMBER, Name TEXT); CREATE TABLE climber (Mountain_ID NUMBER);"
      },
      {
        "question": "And in what range is each of those located?",
        "query": "SELECT RANGE FROM mountain WHERE height > 5000 AND prominence > 1000",
        "schema": "CREATE TABLE climber (Mountain_ID NUMBER); CREATE TABLE mountain (Prominence NUMBER, Name TEXT, Mountain_ID NUMBER, Range TEXT, Height NUMBER);"
      }
    ],
    [
      {
        "question": "How many mountains in this table?",
        "query": "SELECT COUNT ( * ) FROM mountain",
        "schema": "CREATE TABLE climber (Mountain_ID NUMBER); CREATE TABLE mountain (Mountain_ID NUMBER, Name TEXT);"
      },
      {
        "question": "How many countries in this table?",
        "query": "SELECT COUNT ( DISTINCT country ) FROM mountain",
        "schema": "CREATE TABLE climber (Mountain_ID NUMBER, Country TEXT); CREATE TABLE mountain (Mountain_ID NUMBER, Name TEXT, Country TEXT);"
      }
    ]
  ],
  "manufacturer": [
    [
      {
        "question": "What is the market share of Chabudai?",
        "query": "SELECT market_rate FROM furniture WHERE name = \"Chabudai\"",
        "schema": "CREATE TABLE furniture (Market_Rate NUMBER, Furniture_ID NUMBER, Name TEXT); CREATE TABLE manufacturer (Num_of_Factories NUMBER, Manufacturer_ID NUMBER, Name TEXT, Num_of_Shops NUMBER); CREATE TABLE furniture_manufacte (Manufacturer_ID NUMBER, Furniture_ID NUMBER);"
      },
      {
        "question": "What is its price?",
        "query": "SELECT t2.price_in_dollar FROM furniture AS t1 JOIN furniture_manufacte AS t2 ON t1.furniture_id = t2.furniture_id WHERE t1.name = \"Chabudai\"",
        "schema": "CREATE TABLE manufacturer (Num_of_Shops NUMBER, Name TEXT, Manufacturer_ID NUMBER, Num_of_Factories NUMBER); CREATE TABLE furniture (Market_Rate NUMBER, Name TEXT, Furniture_ID NUMBER); CREATE TABLE furniture_manufacte (Manufacturer_ID NUMBER, Price_in_Dollar NUMBER, Furniture_ID NUMBER);"
      },
      {
        "question": "What is its ID?",
        "query": "SELECT t2.manufacturer_id FROM furniture AS t1 JOIN furniture_manufacte AS t2 ON t1.furniture_id = t2.furniture_id WHERE t1.name = \"Chabudai\"",
        "schema": "CREATE TABLE manufacturer (Num_of_Factories NUMBER, Name TEXT, Num_of_Shops NUMBER, Manufacturer_ID NUMBER); CREATE TABLE furniture_manufacte (Manufacturer_ID NUMBER, Price_in_Dollar NUMBER, Furniture_ID NUMBER); CREATE TABLE furniture (Furniture_ID NUMBER, Market_Rate NUMBER, Name TEXT);"
      }
    ],
    [
      {
        "question": "what are the companies that produce the most expensive furniture | Do you mean the names of manufacturers that produce the most expensive furniture? | yes, the names of the company that produces the most expensive furniture",
        "query": "SELECT t1.name FROM manufacturer AS t1 JOIN furniture_manufacte AS t2 ON t1.manufacturer_id = t2.manufacturer_id ORDER BY t2.price_in_dollar DESC LIMIT 1",
        "schema": "CREATE TABLE manufacturer (Name TEXT, Manufacturer_ID NUMBER); CREATE TABLE furniture_manufacte (Manufacturer_ID NUMBER, Price_in_Dollar NUMBER, Furniture_ID NUMBER); CREATE TABLE furniture (Furniture_ID NUMBER, Name TEXT);"
      },
      {
        "question": "what is the id of this name",
        "query": "SELECT t1.manufacturer_id FROM manufacturer AS t1 JOIN furniture_manufacte AS t2 ON t1.manufacturer_id = t2.manufacturer_id ORDER BY t2.price_in_dollar DESC LIMIT 1",
        "schema": "CREATE TABLE manufacturer (Manufacturer_ID NUMBER, Name TEXT); CREATE TABLE furniture_manufacte (Furniture_ID NUMBER, Price_in_Dollar NUMBER, Manufacturer_ID NUMBER); CREATE TABLE furniture (Furniture_ID NUMBER, Name TEXT);"
      },
      {
        "question": "list both the id and number of shops for the company that produces the most expensive furniture in the same table",
        "query": "SELECT t1.manufacturer_id , t1.num_of_shops FROM manufacturer AS t1 JOIN furniture_manufacte AS t2 ON t1.manufacturer_id = t2.manufacturer_id ORDER BY t2.price_in_dollar DESC LIMIT 1",
        "schema": "CREATE TABLE furniture_manufacte (Manufacturer_ID NUMBER, Price_in_Dollar NUMBER, Furniture_ID NUMBER); CREATE TABLE furniture (Name TEXT, Furniture_ID NUMBER); CREATE TABLE manufacturer (Num_of_Factories NUMBER, Name TEXT, Num_of_Shops NUMBER, Manufacturer_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Return the name and ID of the furniture with the highest market rate",
        "query": "SELECT name , furniture_id FROM furniture ORDER BY market_rate DESC LIMIT 1",
        "schema": "CREATE TABLE furniture (Name TEXT, Market_Rate NUMBER, Furniture_ID NUMBER); CREATE TABLE manufacturer (Name TEXT, Manufacturer_ID NUMBER); CREATE TABLE furniture_manufacte (Manufacturer_ID NUMBER, Furniture_ID NUMBER);"
      },
      {
        "question": "rank the furniture according to the number of pieces available | Do you want a list of furniture name sorted by its corresponding number of component? | Yes, Name and corresponding number of components.",
        "query": "SELECT name, num_of_component FROM furniture ORDER BY num_of_component",
        "schema": "CREATE TABLE manufacturer (Manufacturer_ID NUMBER, Name TEXT); CREATE TABLE furniture (Market_Rate NUMBER, Num_of_Component NUMBER, Furniture_ID NUMBER, Name TEXT); CREATE TABLE furniture_manufacte (Manufacturer_ID NUMBER, Furniture_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Which furniture has the highest price? | The id of the furniture with the highest price is 7. | What is the name of the manufacturer that sells that furniture?",
        "query": "SELECT t1.name FROM manufacturer AS t1 JOIN furniture_manufacte AS t2 ON t1.manufacturer_id = t2.manufacturer_id ORDER BY t2.price_in_dollar DESC LIMIT 1",
        "schema": "CREATE TABLE furniture (Name TEXT, Furniture_ID NUMBER); CREATE TABLE furniture_manufacte (Price_in_Dollar NUMBER, Manufacturer_ID NUMBER, Furniture_ID NUMBER); CREATE TABLE manufacturer (Name TEXT, Manufacturer_ID NUMBER);"
      },
      {
        "question": "What is the manufacturer ID for Tomorrow?",
        "query": "SELECT manufacturer_id FROM manufacturer WHERE name = 'Tomorrow'",
        "schema": "CREATE TABLE furniture (Name TEXT, Furniture_ID NUMBER); CREATE TABLE furniture_manufacte (Furniture_ID NUMBER, Manufacturer_ID NUMBER, Price_in_Dollar NUMBER); CREATE TABLE manufacturer (Manufacturer_ID NUMBER, Name TEXT);"
      },
      {
        "question": "How many shops does Tomorrow have?",
        "query": "SELECT num_of_shops FROM manufacturer WHERE name = 'Tomorrow'",
        "schema": "CREATE TABLE furniture_manufacte (Price_in_Dollar NUMBER, Manufacturer_ID NUMBER, Furniture_ID NUMBER); CREATE TABLE furniture (Name TEXT, Furniture_ID NUMBER); CREATE TABLE manufacturer (Name TEXT, Manufacturer_ID NUMBER, Num_of_Shops NUMBER);"
      }
    ],
    [
      {
        "question": "Hello, can you find me the names of the furniture with less then 6 components?",
        "query": "SELECT name FROM furniture WHERE num_of_component < 6",
        "schema": "CREATE TABLE manufacturer (Name TEXT); CREATE TABLE furniture (Name TEXT, Furniture_ID NUMBER, Num_of_Component NUMBER);"
      },
      {
        "question": "Thanks can you find me the names of the furniture with more then 10 components?",
        "query": "SELECT name FROM furniture WHERE num_of_component > 10",
        "schema": "CREATE TABLE furniture (Num_of_Component NUMBER, Furniture_ID NUMBER, Name TEXT); CREATE TABLE manufacturer (Name TEXT);"
      }
    ],
    [
      {
        "question": "how many furnitures on the table",
        "query": "SELECT COUNT ( * ) FROM furniture",
        "schema": "CREATE TABLE furniture_manufacte (Furniture_ID NUMBER, Manufacturer_ID NUMBER); CREATE TABLE manufacturer (Manufacturer_ID NUMBER); CREATE TABLE furniture (Name TEXT, Furniture_ID NUMBER);"
      },
      {
        "question": "which furnitures are highest market rate | The name of the furniture that has the highest market rate is Billiard table | what about the highest price of furniture",
        "query": "SELECT t1.name FROM furniture AS t1 JOIN furniture_manufacte AS t2 ON t1.furniture_id = t2.furniture_id ORDER BY t2.price_in_dollar DESC LIMIT 1",
        "schema": "CREATE TABLE manufacturer (Manufacturer_ID NUMBER); CREATE TABLE furniture (Furniture_ID NUMBER, Market_Rate NUMBER, Name TEXT); CREATE TABLE furniture_manufacte (Furniture_ID NUMBER, Price_in_Dollar NUMBER, Manufacturer_ID NUMBER);"
      },
      {
        "question": "what is highest num of component?",
        "query": "SELECT num_of_component FROM furniture ORDER BY num_of_component DESC LIMIT 1",
        "schema": "CREATE TABLE furniture_manufacte (Price_in_Dollar NUMBER, Furniture_ID NUMBER, Manufacturer_ID NUMBER); CREATE TABLE furniture (Market_Rate NUMBER, Num_of_Component NUMBER, Furniture_ID NUMBER, Name TEXT); CREATE TABLE manufacturer (Name TEXT, Manufacturer_ID NUMBER);"
      }
    ],
    [
      {
        "question": "how can find total market rate of the furniture",
        "query": "SELECT SUM ( market_rate ) FROM furniture",
        "schema": "CREATE TABLE furniture_manufacte (Furniture_ID NUMBER, Manufacturer_ID NUMBER); CREATE TABLE furniture (Name TEXT, Market_Rate NUMBER, Furniture_ID NUMBER); CREATE TABLE manufacturer (Name TEXT, Manufacturer_ID NUMBER);"
      }
    ]
  ],
  "solvency_ii": [
    [
      {
        "question": "Hello!  Can you show me a list of the various product type codes?",
        "query": "SELECT product_type_code FROM products",
        "schema": "CREATE TABLE Events (Event_Type_Code TEXT); CREATE TABLE Products (Product_Name TEXT, Product_ID NUMBER, Product_Type_Code TEXT, Product_Price NUMBER);"
      },
      {
        "question": "Wonderful!  Of these product type codes, can you tell me which code is the most common one?",
        "query": "SELECT product_type_code FROM products GROUP BY product_type_code ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Events (Event_Type_Code TEXT); CREATE TABLE Products (Product_ID NUMBER, Product_Type_Code TEXT, Product_Name TEXT, Product_Price NUMBER);"
      }
    ],
    [
      {
        "question": "Show the names of products that are in at least two events in ascending alphabetical order of product name.",
        "query": "SELECT t1.product_name FROM products AS t1 JOIN products_in_events AS t2 ON t1.product_id = t2.product_id GROUP BY t1.product_name HAVING COUNT ( * ) > = 2 ORDER BY t1.product_name",
        "schema": "CREATE TABLE Events (Event_ID NUMBER, Event_Type_Code TEXT); CREATE TABLE Products (Product_Name TEXT, Product_ID NUMBER); CREATE TABLE Products_in_Events (Product_ID NUMBER, Product_in_Event_ID NUMBER, Event_ID NUMBER);"
      },
      {
        "question": "What is the product price of men suits?",
        "query": "SELECT product_price FROM products WHERE product_name = \"Men suits\"",
        "schema": "CREATE TABLE Products (Product_Name TEXT, Product_ID NUMBER, Product_Price NUMBER); CREATE TABLE Products_in_Events (Product_in_Event_ID NUMBER, Product_ID NUMBER, Event_ID NUMBER); CREATE TABLE Events (Event_Type_Code TEXT, Event_ID NUMBER);"
      },
      {
        "question": "What is the most expensive product price?",
        "query": "SELECT MAX ( product_price ) FROM products",
        "schema": "CREATE TABLE Events (Event_Type_Code TEXT, Event_ID NUMBER); CREATE TABLE Products_in_Events (Event_ID NUMBER, Product_in_Event_ID NUMBER, Product_ID NUMBER); CREATE TABLE Products (Product_Type_Code TEXT, Product_Price NUMBER, Product_Name TEXT, Product_ID NUMBER);"
      },
      {
        "question": "How about the least expensive?",
        "query": "SELECT MIN ( product_price ) FROM products",
        "schema": "CREATE TABLE Events (Event_ID NUMBER, Event_Type_Code TEXT); CREATE TABLE Products_in_Events (Product_in_Event_ID NUMBER, Event_ID NUMBER, Product_ID NUMBER); CREATE TABLE Products (Product_Type_Code TEXT, Product_ID NUMBER, Product_Name TEXT, Product_Price NUMBER);"
      },
      {
        "question": "What product type is the one that has the least expensive product price? | Did  you  want  to get \tProduct Type  Code    that has the least expensive product price ? | Yes",
        "query": "SELECT product_type_code FROM products ORDER BY product_price LIMIT 1",
        "schema": "CREATE TABLE Products (Product_Name TEXT, Product_Type_Code TEXT, Product_ID NUMBER, Product_Price NUMBER); CREATE TABLE Events (Event_ID NUMBER, Event_Type_Code TEXT); CREATE TABLE Products_in_Events (Event_ID NUMBER, Product_ID NUMBER, Product_in_Event_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Can you list all the product type codes that have two or more products?",
        "query": "SELECT product_type_code FROM products GROUP BY product_type_code HAVING COUNT ( * ) > = 2",
        "schema": "CREATE TABLE Products (Product_Type_Code TEXT, Product_Name TEXT, Product_Price NUMBER, Product_ID NUMBER); CREATE TABLE Events (Event_Type_Code TEXT);"
      },
      {
        "question": "What is the name of the product with the greatest price?",
        "query": "SELECT product_name FROM products ORDER BY product_price DESC LIMIT 1",
        "schema": "CREATE TABLE Products (Product_Price NUMBER, Product_Type_Code TEXT, Product_ID NUMBER, Product_Name TEXT); CREATE TABLE Events (Event_Type_Code TEXT);"
      },
      {
        "question": "What are the names of all products with prices over 3000?",
        "query": "SELECT product_name FROM products WHERE product_price > 3000",
        "schema": "CREATE TABLE Events (Event_Type_Code TEXT); CREATE TABLE Products (Product_ID NUMBER, Product_Type_Code TEXT, Product_Price NUMBER, Product_Name TEXT);"
      }
    ],
    [
      {
        "question": "how many products in total are not in any event?",
        "query": "SELECT COUNT ( * ) FROM products WHERE product_id NOT IN ( SELECT product_id FROM products_in_events )",
        "schema": "CREATE TABLE Products_in_Events (Product_ID NUMBER, Product_in_Event_ID NUMBER, Event_ID NUMBER); CREATE TABLE Parties_in_Events (Event_ID NUMBER); CREATE TABLE Products (Product_Name TEXT, Product_ID NUMBER, Product_Type_Code TEXT); CREATE TABLE Assets_in_Events (Event_ID NUMBER); CREATE TABLE Events (Event_Type_Code TEXT, Event_ID NUMBER);"
      },
      {
        "question": "and can you tell me the names of those 5 products?",
        "query": "SELECT product_name FROM products WHERE product_id NOT IN ( SELECT product_id FROM products_in_events )",
        "schema": "CREATE TABLE Products_in_Events (Event_ID NUMBER, Product_in_Event_ID NUMBER, Product_ID NUMBER); CREATE TABLE Assets_in_Events (Event_ID NUMBER); CREATE TABLE Parties_in_Events (Event_ID NUMBER); CREATE TABLE Products (Product_Name TEXT, Product_Type_Code TEXT, Product_ID NUMBER); CREATE TABLE Events (Event_Type_Code TEXT, Event_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Tell me the prices of Dining | Sorry, there is no product named \"Dining\". There is, however, a product named \"Dinning\". This might be a typo. Do you want to know the prices of \"Dinning\"? | Tell me the prices of Dinning",
        "query": "SELECT product_price FROM products WHERE product_name = \"Dinning\"",
        "schema": "CREATE TABLE Products (Product_ID NUMBER, Product_Price NUMBER, Product_Name TEXT);"
      },
      {
        "question": "Show me the prices of Trading Policy",
        "query": "SELECT product_price FROM products WHERE product_name = \"Trading Policy\"",
        "schema": "CREATE TABLE Products (Product_Name TEXT, Product_Price NUMBER, Product_ID NUMBER);"
      },
      {
        "question": "Show me the prices of Business Policy",
        "query": "SELECT product_price FROM products WHERE product_name = \"Business Policy\"",
        "schema": "CREATE TABLE Products (Product_Price NUMBER, Product_Name TEXT, Product_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What is the most common type code of all the products?",
        "query": "SELECT product_type_code FROM products GROUP BY product_type_code ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Events (Event_Type_Code TEXT); CREATE TABLE Products (Product_ID NUMBER, Product_Type_Code TEXT, Product_Name TEXT, Product_Price NUMBER);"
      },
      {
        "question": "What are the product names of all products with the type code \"Food\"?",
        "query": "SELECT product_name FROM products WHERE product_type_code = \"Food\"",
        "schema": "CREATE TABLE Events (Event_Type_Code TEXT); CREATE TABLE Products (Product_Type_Code TEXT, Product_Price NUMBER, Product_ID NUMBER, Product_Name TEXT);"
      },
      {
        "question": "What are the prices of those?",
        "query": "SELECT product_price FROM products WHERE product_type_code = \"Food\"",
        "schema": "CREATE TABLE Events (Event_Type_Code TEXT); CREATE TABLE Products (Product_ID NUMBER, Product_Type_Code TEXT, Product_Price NUMBER, Product_Name TEXT);"
      },
      {
        "question": "What are the names and prices of all products with the type code books?",
        "query": "SELECT product_name, product_price FROM products WHERE product_type_code = \"Books\"",
        "schema": "CREATE TABLE Products (Product_Type_Code TEXT, Product_Price NUMBER, Product_Name TEXT, Product_ID NUMBER); CREATE TABLE Events (Event_Type_Code TEXT);"
      },
      {
        "question": "What are the name and type code of the product with the highest price?",
        "query": "SELECT product_name, product_type_code FROM products ORDER BY product_price DESC LIMIT 1",
        "schema": "CREATE TABLE Products (Product_ID NUMBER, Product_Price NUMBER, Product_Type_Code TEXT, Product_Name TEXT); CREATE TABLE Events (Event_Type_Code TEXT);"
      },
      {
        "question": "Can you list all product names and their corresponding type codes of the products with prices below the average price?",
        "query": "SELECT product_name, product_type_code FROM products WHERE product_price < ( SELECT AVG ( product_price ) FROM products )",
        "schema": "CREATE TABLE Events (Event_Type_Code TEXT); CREATE TABLE Products (Product_ID NUMBER, Product_Price NUMBER, Product_Type_Code TEXT, Product_Name TEXT);"
      }
    ],
    [
      {
        "question": "Show me the prices of the products named \"Dining\"",
        "query": "SELECT product_price FROM products WHERE product_name = 'Dinning'",
        "schema": "CREATE TABLE Products (Product_Name TEXT, Product_Type_Code TEXT, Product_Price NUMBER, Product_ID NUMBER);"
      },
      {
        "question": "Show me the prices of the products named Trading Policy",
        "query": "SELECT product_price FROM products WHERE product_name = 'Trading Policy'",
        "schema": "CREATE TABLE Products (Product_Price NUMBER, Product_ID NUMBER, Product_Type_Code TEXT, Product_Name TEXT);"
      },
      {
        "question": "Show me the product type code of products named \"Dining\"",
        "query": "SELECT DISTINCT product_type_code FROM products WHERE product_name = 'Dinning'",
        "schema": "CREATE TABLE Products (Product_Name TEXT, Product_ID NUMBER, Product_Type_Code TEXT, Product_Price NUMBER);"
      }
    ],
    [
      {
        "question": "How many products in this table?",
        "query": "SELECT COUNT ( * ) FROM products",
        "schema": "CREATE TABLE Events (Event_ID NUMBER); CREATE TABLE Products_in_Events (Product_ID NUMBER); CREATE TABLE Products (Product_Price NUMBER, Product_Type_Code TEXT, Product_Name TEXT, Product_ID NUMBER);"
      },
      {
        "question": "How many Product events in this table?",
        "query": "SELECT COUNT ( * ) FROM products_in_events",
        "schema": "CREATE TABLE Events (Event_ID NUMBER, Event_Type_Code TEXT); CREATE TABLE Assets_in_Events (Event_ID NUMBER); CREATE TABLE Products_in_Events (Event_ID NUMBER, Product_ID NUMBER, Product_in_Event_ID NUMBER); CREATE TABLE Parties_in_Events (Event_ID NUMBER); CREATE TABLE Products (Product_Price NUMBER, Product_Type_Code TEXT, Product_ID NUMBER, Product_Name TEXT);"
      },
      {
        "question": "Show the names of products that are in at least 3 events?",
        "query": "SELECT t1.product_name FROM products AS t1 JOIN products_in_events AS t2 ON t1.product_id = t2.product_id GROUP BY t1.product_name HAVING COUNT ( * ) > = 3",
        "schema": "CREATE TABLE Parties_in_Events (Event_ID NUMBER); CREATE TABLE Products_in_Events (Event_ID NUMBER, Product_in_Event_ID NUMBER, Product_ID NUMBER); CREATE TABLE Assets_in_Events (Event_ID NUMBER); CREATE TABLE Products (Product_Type_Code TEXT, Product_Name TEXT, Product_ID NUMBER, Product_Price NUMBER); CREATE TABLE Events (Event_ID NUMBER, Event_Type_Code TEXT);"
      },
      {
        "question": "Find the top price?",
        "query": "SELECT product_price FROM products ORDER BY product_price DESC LIMIT 1",
        "schema": "CREATE TABLE Products_in_Events (Event_ID NUMBER, Product_in_Event_ID NUMBER, Product_ID NUMBER); CREATE TABLE Products (Product_Name TEXT, Product_Price NUMBER, Product_Type_Code TEXT, Product_ID NUMBER); CREATE TABLE Events (Event_Type_Code TEXT, Event_ID NUMBER); CREATE TABLE Assets_in_Events (Event_ID NUMBER); CREATE TABLE Parties_in_Events (Event_ID NUMBER);"
      },
      {
        "question": "find average of the price?",
        "query": "SELECT AVG ( product_price ) FROM products",
        "schema": "CREATE TABLE Events (Event_Type_Code TEXT, Event_ID NUMBER); CREATE TABLE Products (Product_Name TEXT, Product_Price NUMBER, Product_Type_Code TEXT, Product_ID NUMBER); CREATE TABLE Products_in_Events (Product_ID NUMBER, Event_ID NUMBER, Product_in_Event_ID NUMBER); CREATE TABLE Parties_in_Events (Event_ID NUMBER); CREATE TABLE Assets_in_Events (Event_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Hello there!  Can you show me a list of all of the different product type codes?",
        "query": "SELECT product_type_code FROM products",
        "schema": "CREATE TABLE Events (Event_Type_Code TEXT); CREATE TABLE Products (Product_Name TEXT, Product_ID NUMBER, Product_Type_Code TEXT);"
      },
      {
        "question": "Nice!  Can you filter this list to show the Product Type Codes for the entries which have either a product price higher than 4500 or a product price lower than 3000?",
        "query": "SELECT product_type_code FROM products WHERE product_price > 4500 INTERSECT SELECT product_type_code FROM products WHERE product_price < 3000",
        "schema": "CREATE TABLE Products (Product_Type_Code TEXT, Product_Name TEXT, Product_Price NUMBER, Product_ID NUMBER); CREATE TABLE Events (Event_Type_Code TEXT);"
      },
      {
        "question": "Awesome!  What product price is associated with the Product Type Code of \"food\"?",
        "query": "SELECT product_price FROM products WHERE product_type_code = \"Food\"",
        "schema": "CREATE TABLE Events (Event_Type_Code TEXT); CREATE TABLE Products (Product_Type_Code TEXT, Product_ID NUMBER, Product_Name TEXT, Product_Price NUMBER);"
      }
    ]
  ],
  "tracking_software_problems": [
    [
      {
        "question": "The column \"product_id \" in Table: \"problems\" refers to column \"product_id\" in Table: \" product\" | could  give more info about  this question? | List the ids of the problem from the product ''voluptatem'' that are reported after 1995?",
        "query": "SELECT t1.problem_id FROM problems AS t1 JOIN product AS t2 ON t1.product_id = t2.product_id WHERE t2.product_name = \"voluptatem\" AND t1.date_problem_reported > \"1995\"",
        "schema": "CREATE TABLE Problem_Log (log_entry_date TIME, problem_id NUMBER); CREATE TABLE Problems (date_problem_reported TIME, problem_description TEXT, product_id NUMBER, problem_id NUMBER); CREATE TABLE Product (product_id NUMBER, product_name TEXT);"
      }
    ],
    [
      {
        "question": "What are the number of products that had problems?",
        "query": "SELECT COUNT ( * ) FROM problems AS t1 JOIN product AS t2 ON t1.product_id = t2.product_id",
        "schema": "CREATE TABLE Product (product_details TEXT, product_name TEXT, product_id NUMBER); CREATE TABLE Problems (problem_id NUMBER, product_id NUMBER); CREATE TABLE Problem_Log (problem_id NUMBER);"
      },
      {
        "question": "Could you please list their product ids?",
        "query": "SELECT t2.product_id FROM problems AS t1 JOIN product AS t2 ON t1.product_id = t2.product_id",
        "schema": "CREATE TABLE Problem_Log (problem_id NUMBER); CREATE TABLE Product (product_id NUMBER, product_details TEXT, product_name TEXT); CREATE TABLE Problems (product_id NUMBER, problem_id NUMBER);"
      },
      {
        "question": "What are the number of problems each of these had?",
        "query": "SELECT COUNT ( * ) , t2.product_id FROM problems AS t1 JOIN product AS t2 ON t1.product_id = t2.product_id GROUP BY t2.product_id",
        "schema": "CREATE TABLE Problem_Log (problem_id NUMBER); CREATE TABLE Problems (product_id NUMBER, problem_id NUMBER); CREATE TABLE Product (product_name TEXT, product_id NUMBER, product_details TEXT);"
      }
    ],
    [
      {
        "question": "What is the staff id of Bosco?",
        "query": "SELECT staff_id FROM staff WHERE staff_last_name = \"Bosco\"",
        "schema": "CREATE TABLE Problems (closure_authorised_by_staff_id NUMBER, reported_by_staff_id NUMBER, problem_id NUMBER); CREATE TABLE Staff (staff_last_name TEXT, staff_first_name TEXT, staff_id NUMBER, other_staff_details TEXT); CREATE TABLE Problem_Log (problem_id NUMBER, assigned_to_staff_id NUMBER);"
      },
      {
        "question": "Are there any problems reported by staff id 1?",
        "query": "SELECT problem_id FROM problems WHERE reported_by_staff_id = 1",
        "schema": "CREATE TABLE Problems (problem_id NUMBER, closure_authorised_by_staff_id NUMBER, reported_by_staff_id NUMBER); CREATE TABLE Staff (staff_last_name TEXT, other_staff_details TEXT, staff_first_name TEXT, staff_id NUMBER); CREATE TABLE Problem_Log (assigned_to_staff_id NUMBER, problem_id NUMBER);"
      },
      {
        "question": "How many total problems are there reported by staff ID 1?",
        "query": "SELECT COUNT ( * ) FROM problems WHERE reported_by_staff_id = 1",
        "schema": "CREATE TABLE Problem_Log (problem_id NUMBER, assigned_to_staff_id NUMBER, problem_log_id NUMBER); CREATE TABLE Problems (closure_authorised_by_staff_id NUMBER, problem_id NUMBER, reported_by_staff_id NUMBER); CREATE TABLE Staff (staff_id NUMBER, staff_first_name TEXT, other_staff_details TEXT, staff_last_name TEXT);"
      },
      {
        "question": "What is the full set of information associated with staff with last name Bosco?",
        "query": "SELECT * FROM staff WHERE staff_last_name = 'Bosco'",
        "schema": "CREATE TABLE Staff (staff_first_name TEXT, other_staff_details TEXT, staff_last_name TEXT, staff_id NUMBER); CREATE TABLE Problems (closure_authorised_by_staff_id NUMBER, problem_id NUMBER, reported_by_staff_id NUMBER); CREATE TABLE Problem_Log (problem_log_id NUMBER, assigned_to_staff_id NUMBER, problem_id NUMBER);"
      },
      {
        "question": "What are the ids of the problems reported by staff first name Lacey?",
        "query": "SELECT t1.problem_id FROM problems AS t1 JOIN staff AS t2 ON t1.reported_by_staff_id = t2.staff_id WHERE t2.staff_first_name = \"Lacey\"",
        "schema": "CREATE TABLE Problems (problem_id NUMBER, closure_authorised_by_staff_id NUMBER, reported_by_staff_id NUMBER); CREATE TABLE Staff (other_staff_details TEXT, staff_first_name TEXT, staff_id NUMBER, staff_last_name TEXT); CREATE TABLE Problem_Log (problem_log_id NUMBER, assigned_to_staff_id NUMBER, problem_id NUMBER);"
      },
      {
        "question": "Find the ids of all problems reported by staff with last name Bosco",
        "query": "SELECT t1.problem_id FROM problems AS t1 JOIN staff AS t2 ON t1.reported_by_staff_id = t2.staff_id WHERE t2.staff_last_name = \"Bosco\"",
        "schema": "CREATE TABLE Problems (problem_id NUMBER, reported_by_staff_id NUMBER, closure_authorised_by_staff_id NUMBER); CREATE TABLE Problem_Log (problem_id NUMBER, assigned_to_staff_id NUMBER, problem_log_id NUMBER); CREATE TABLE Staff (other_staff_details TEXT, staff_last_name TEXT, staff_id NUMBER, staff_first_name TEXT);"
      }
    ],
    [
      {
        "question": "Please list staff names of staff assigned to at least 1 problem | First or last name? | both",
        "query": "SELECT staff_first_name , staff_last_name FROM staff AS t1 JOIN problem_log AS t2 ON t1.staff_id = t2.assigned_to_staff_id WHERE t2.problem_id = 1",
        "schema": "CREATE TABLE Problems (closure_authorised_by_staff_id NUMBER, reported_by_staff_id NUMBER, problem_id NUMBER); CREATE TABLE Problem_Log (assigned_to_staff_id NUMBER, problem_id NUMBER); CREATE TABLE Staff (staff_first_name TEXT, staff_id NUMBER, staff_last_name TEXT);"
      },
      {
        "question": "Now just list the staff who are assigned to problem id 1",
        "query": "SELECT staff_first_name , staff_last_name FROM staff AS t1 JOIN problem_log AS t2 ON t1.staff_id = t2.assigned_to_staff_id WHERE t2.problem_id = 1",
        "schema": "CREATE TABLE Problem_Log (assigned_to_staff_id NUMBER, problem_id NUMBER, problem_log_id NUMBER); CREATE TABLE Staff (staff_first_name TEXT, staff_id NUMBER, staff_last_name TEXT); CREATE TABLE Problems (reported_by_staff_id NUMBER, problem_id NUMBER, closure_authorised_by_staff_id NUMBER);"
      }
    ],
    [
      {
        "question": "What is the date problem reported of w?",
        "query": "SELECT t2.date_problem_reported FROM problems AS t1 JOIN problems AS t2 WHERE t2.problem_description = \"w\"",
        "schema": "CREATE TABLE Staff (staff_id NUMBER, staff_last_name TEXT, staff_first_name TEXT); CREATE TABLE Problem_Log (log_entry_date TIME, problem_id NUMBER); CREATE TABLE Problems (problem_id NUMBER, problem_description TEXT, date_problem_reported TIME, reported_by_staff_id NUMBER); CREATE TABLE Product (product_name TEXT, product_id NUMBER);"
      },
      {
        "question": "What is the name of the person who reported a problem on 1976-12-18 23:54:41? | Here are the first and last names of the staff who reported a problem on 1976-12-18 23:54:41. | What are her other staff details?",
        "query": "SELECT t1.other_staff_details FROM problems AS t2 JOIN staff AS t1 WHERE t2.date_problem_reported = '1976-12-18 23:54:41' AND t2.reported_by_staff_id = t1.staff_id",
        "schema": "CREATE TABLE Product (product_name TEXT, product_id NUMBER); CREATE TABLE Problem_Log (problem_id NUMBER, assigned_to_staff_id NUMBER, log_entry_date TIME); CREATE TABLE Staff (staff_last_name TEXT, other_staff_details TEXT, staff_id NUMBER, staff_first_name TEXT); CREATE TABLE Problems (other_problem_details TEXT, problem_id NUMBER, date_problem_reported TIME, problem_description TEXT, closure_authorised_by_staff_id NUMBER, reported_by_staff_id NUMBER);"
      }
    ],
    [
      {
        "question": "can you list the products that have problems | Did you mean to ask for the product names of products that have problems? | yes",
        "query": "SELECT t2.product_name FROM problems AS t1 JOIN product AS t2 ON t1.product_id = t2.product_id",
        "schema": "CREATE TABLE Product (product_id NUMBER, product_name TEXT); CREATE TABLE Problems (problem_id NUMBER, product_id NUMBER);"
      },
      {
        "question": "give me all the problem ids",
        "query": "SELECT t2.product_id FROM problems AS t1 JOIN product AS t2 ON t1.product_id = t2.product_id",
        "schema": "CREATE TABLE Problem_Log (problem_id NUMBER, problem_log_id NUMBER); CREATE TABLE Product (product_name TEXT, product_id NUMBER); CREATE TABLE Problems (problem_id NUMBER, product_id NUMBER);"
      },
      {
        "question": "list all product details",
        "query": "SELECT t2.product_details FROM problems AS t1 JOIN product AS t2 ON t1.product_id = t2.product_id",
        "schema": "CREATE TABLE Product (product_name TEXT, product_details TEXT, product_id NUMBER); CREATE TABLE Problem_Log (problem_id NUMBER, problem_log_id NUMBER); CREATE TABLE Problems (problem_id NUMBER, product_id NUMBER);"
      }
    ],
    [
      {
        "question": "Find the first and last name of the staff members who reported problems from the product \"rem\" but not \"aut\"?",
        "query": "SELECT t3.staff_first_name , t3.staff_last_name FROM problems AS t1 JOIN product AS t2 JOIN staff AS t3 ON t1.product_id = t2.product_id AND t1.reported_by_staff_id = t3.staff_id WHERE t2.product_name = \"rem\" EXCEPT SELECT t3.staff_first_name , t3.staff_last_name FROM problems AS t1 JOIN product AS t2 JOIN staff AS t3 ON t1.product_id = t2.product_id AND t1.reported_by_staff_id = t3.staff_id WHERE t2.product_name = \"aut\"",
        "schema": "CREATE TABLE Product (product_id NUMBER, product_details TEXT, product_name TEXT); CREATE TABLE Staff (staff_last_name TEXT, staff_first_name TEXT, staff_id NUMBER); CREATE TABLE Problem_Log (problem_id NUMBER, assigned_to_staff_id NUMBER); CREATE TABLE Problems (closure_authorised_by_staff_id NUMBER, product_id NUMBER, problem_id NUMBER, reported_by_staff_id NUMBER);"
      },
      {
        "question": "What about staff members who reported problems for the product \"rem\"?",
        "query": "SELECT t3.staff_first_name , t3.staff_last_name FROM problems AS t1 JOIN product AS t2 JOIN staff AS t3 ON t1.product_id = t2.product_id AND t1.reported_by_staff_id = t3.staff_id WHERE t2.product_name = \"rem\"",
        "schema": "CREATE TABLE Product (product_details TEXT, product_id NUMBER, product_name TEXT); CREATE TABLE Problems (closure_authorised_by_staff_id NUMBER, product_id NUMBER, reported_by_staff_id NUMBER, problem_id NUMBER); CREATE TABLE Staff (staff_last_name TEXT, staff_id NUMBER, staff_first_name TEXT); CREATE TABLE Problem_Log (problem_id NUMBER, assigned_to_staff_id NUMBER);"
      },
      {
        "question": "What about staff members who reported problems for the product \"aut\"?",
        "query": "SELECT t3.staff_first_name , t3.staff_last_name FROM problems AS t1 JOIN product AS t2 JOIN staff AS t3 ON t1.product_id = t2.product_id AND t1.reported_by_staff_id = t3.staff_id WHERE t2.product_name = \"aut\"",
        "schema": "CREATE TABLE Problems (closure_authorised_by_staff_id NUMBER, problem_id NUMBER, reported_by_staff_id NUMBER, product_id NUMBER); CREATE TABLE Staff (staff_first_name TEXT, staff_last_name TEXT, staff_id NUMBER); CREATE TABLE Product (product_details TEXT, product_id NUMBER, product_name TEXT); CREATE TABLE Problem_Log (problem_id NUMBER, assigned_to_staff_id NUMBER);"
      },
      {
        "question": "What is the name of the staff member who reported problem id 1?",
        "query": "SELECT t3.staff_first_name , t3.staff_last_name FROM problems AS t1 JOIN product AS t2 JOIN staff AS t3 ON t1.product_id = t2.product_id AND t1.reported_by_staff_id = t3.staff_id WHERE t1.problem_id = 1",
        "schema": "CREATE TABLE Problems (product_id NUMBER, reported_by_staff_id NUMBER, problem_id NUMBER, closure_authorised_by_staff_id NUMBER); CREATE TABLE Problem_Log (problem_id NUMBER, assigned_to_staff_id NUMBER); CREATE TABLE Product (product_details TEXT, product_id NUMBER, product_name TEXT); CREATE TABLE Staff (staff_last_name TEXT, staff_first_name TEXT, staff_id NUMBER);"
      },
      {
        "question": "What is the staff id of that person?",
        "query": "SELECT t3.staff_id FROM problems AS t1 JOIN product AS t2 JOIN staff AS t3 ON t1.product_id = t2.product_id AND t1.reported_by_staff_id = t3.staff_id WHERE t1.problem_id = 1",
        "schema": "CREATE TABLE Staff (staff_last_name TEXT, staff_id NUMBER, staff_first_name TEXT); CREATE TABLE Product (product_id NUMBER, product_name TEXT, product_details TEXT); CREATE TABLE Problems (closure_authorised_by_staff_id NUMBER, problem_id NUMBER, reported_by_staff_id NUMBER, product_id NUMBER); CREATE TABLE Problem_Log (problem_id NUMBER, assigned_to_staff_id NUMBER);"
      }
    ],
    [
      {
        "question": "Can you show me the total number of problem logs?",
        "query": "SELECT COUNT ( * ) FROM problem_log",
        "schema": "CREATE TABLE Staff (staff_id NUMBER); CREATE TABLE Problem_Log (problem_log_id NUMBER, log_entry_description TEXT, assigned_to_staff_id NUMBER, log_entry_fix TEXT, problem_id NUMBER); CREATE TABLE Problems (problem_id NUMBER);"
      },
      {
        "question": "When was the oldest one created?",
        "query": "SELECT log_entry_date FROM problem_log ORDER BY log_entry_date ASC LIMIT 1",
        "schema": "CREATE TABLE Problem_Log (assigned_to_staff_id NUMBER, problem_log_id NUMBER, log_entry_fix TEXT, log_entry_date TIME, log_entry_description TEXT, problem_id NUMBER); CREATE TABLE Staff (staff_id NUMBER); CREATE TABLE Problems (problem_id NUMBER);"
      },
      {
        "question": "How about the most recent one?",
        "query": "SELECT log_entry_date FROM problem_log ORDER BY log_entry_date DESC LIMIT 1",
        "schema": "CREATE TABLE Problem_Log (assigned_to_staff_id NUMBER, log_entry_fix TEXT, log_entry_description TEXT, log_entry_date TIME, problem_log_id NUMBER, problem_id NUMBER); CREATE TABLE Staff (staff_id NUMBER); CREATE TABLE Problems (date_problem_reported TIME, problem_id NUMBER);"
      },
      {
        "question": "What is its id?",
        "query": "SELECT problem_log_id FROM problem_log ORDER BY log_entry_date DESC LIMIT 1",
        "schema": "CREATE TABLE Problem_Log (log_entry_date TIME, log_entry_fix TEXT, assigned_to_staff_id NUMBER, log_entry_description TEXT, problem_log_id NUMBER, problem_id NUMBER); CREATE TABLE Staff (staff_id NUMBER); CREATE TABLE Problems (problem_id NUMBER, date_problem_reported TIME);"
      }
    ],
    [
      {
        "question": "list out the problem logs",
        "query": "SELECT * FROM problem_log",
        "schema": "CREATE TABLE Staff (staff_id NUMBER); CREATE TABLE Problem_Log (log_entry_fix TEXT, assigned_to_staff_id NUMBER, problem_log_id NUMBER, problem_id NUMBER); CREATE TABLE Problems (problem_id NUMBER, reported_by_staff_id NUMBER);"
      },
      {
        "question": "show the problem status code on Middleware",
        "query": "SELECT problem_status_code FROM problem_log WHERE problem_category_code = 'Middleware'",
        "schema": "CREATE TABLE Problem_Log (problem_log_id NUMBER, problem_status_code TEXT, problem_category_code TEXT, problem_id NUMBER, assigned_to_staff_id NUMBER, log_entry_fix TEXT); CREATE TABLE Problems (reported_by_staff_id NUMBER, problem_id NUMBER); CREATE TABLE Problem_Status_Codes (problem_status_code TEXT, problem_status_description TEXT); CREATE TABLE Staff (staff_id NUMBER); CREATE TABLE Problem_Category_Codes (problem_category_code TEXT);"
      },
      {
        "question": "show the other log details",
        "query": "SELECT * FROM problem_log WHERE problem_category_code ! = 'Middleware'",
        "schema": "CREATE TABLE Problems (reported_by_staff_id NUMBER, problem_id NUMBER, other_problem_details TEXT); CREATE TABLE Problem_Status_Codes (problem_status_description TEXT, problem_status_code TEXT); CREATE TABLE Problem_Log (problem_log_id NUMBER, problem_status_code TEXT, log_entry_fix TEXT, other_log_details TEXT, problem_category_code TEXT, problem_id NUMBER, assigned_to_staff_id NUMBER); CREATE TABLE Problem_Category_Codes (problem_category_code TEXT); CREATE TABLE Staff (staff_id NUMBER);"
      }
    ],
    [
      {
        "question": "What is the staff ID of the staff with the first name Christop?",
        "query": "SELECT staff_id FROM staff WHERE staff_first_name = \"Christop\"",
        "schema": "CREATE TABLE Problem_Log (assigned_to_staff_id NUMBER, problem_id NUMBER); CREATE TABLE Problems (reported_by_staff_id NUMBER, problem_id NUMBER, closure_authorised_by_staff_id NUMBER); CREATE TABLE Staff (staff_last_name TEXT, staff_first_name TEXT, staff_id NUMBER);"
      },
      {
        "question": "How many problems have been reported under staff ID 10?",
        "query": "SELECT COUNT ( * ) FROM problems AS t1 JOIN staff AS t2 ON t1.reported_by_staff_id = t2.staff_id WHERE t2.staff_id = \"10\"",
        "schema": "CREATE TABLE Problem_Log (problem_id NUMBER, assigned_to_staff_id NUMBER); CREATE TABLE Staff (staff_first_name TEXT, staff_last_name TEXT, staff_id NUMBER); CREATE TABLE Problems (reported_by_staff_id NUMBER, closure_authorised_by_staff_id NUMBER, problem_id NUMBER);"
      },
      {
        "question": "Can you give me a list of the problem descriptions he reported?",
        "query": "SELECT t1.problem_description FROM problems AS t1 JOIN staff AS t2 ON t1.reported_by_staff_id = t2.staff_id WHERE t2.staff_first_name = \"Christop\"",
        "schema": "CREATE TABLE Staff (staff_first_name TEXT, staff_last_name TEXT, staff_id NUMBER); CREATE TABLE Problems (reported_by_staff_id NUMBER, problem_description TEXT, closure_authorised_by_staff_id NUMBER, problem_id NUMBER); CREATE TABLE Problem_Log (problem_log_id NUMBER, problem_id NUMBER, assigned_to_staff_id NUMBER, log_entry_description TEXT);"
      }
    ],
    [
      {
        "question": "What are the IDs of problems that the staff member Dameon Frami reported?",
        "query": "SELECT product_id FROM problems AS t1 JOIN staff AS t2 ON t1.reported_by_staff_id = t2.staff_id WHERE t2.staff_first_name = \"Dameon\" AND t2.staff_last_name = \"Frami\"",
        "schema": "CREATE TABLE Problems (date_problem_reported TIME, closure_authorised_by_staff_id NUMBER, problem_id NUMBER, product_id NUMBER, reported_by_staff_id NUMBER); CREATE TABLE Problem_Log (assigned_to_staff_id NUMBER, problem_log_id NUMBER, problem_id NUMBER); CREATE TABLE Staff (staff_first_name TEXT, staff_last_name TEXT, staff_id NUMBER, other_staff_details TEXT);"
      },
      {
        "question": "What are the IDs of problems that the staff member Jolie Weber reported?",
        "query": "SELECT product_id FROM problems AS t1 JOIN staff AS t2 ON t1.reported_by_staff_id = t2.staff_id WHERE t2.staff_first_name = \"Jolie\" AND t2.staff_last_name = \"Weber\"",
        "schema": "CREATE TABLE Staff (other_staff_details TEXT, staff_last_name TEXT, staff_id NUMBER, staff_first_name TEXT); CREATE TABLE Problem_Log (assigned_to_staff_id NUMBER, problem_log_id NUMBER, problem_id NUMBER); CREATE TABLE Product (product_name TEXT, product_id NUMBER); CREATE TABLE Problems (product_id NUMBER, closure_authorised_by_staff_id NUMBER, problem_id NUMBER, date_problem_reported TIME, reported_by_staff_id NUMBER);"
      },
      {
        "question": "What is the most common problem ID reported by all staff?",
        "query": "SELECT problem_id FROM problems AS t1 JOIN staff AS t2 ON t1.reported_by_staff_id = t2.staff_id GROUP BY problem_id ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Problems (closure_authorised_by_staff_id NUMBER, date_problem_reported TIME, reported_by_staff_id NUMBER, product_id NUMBER, problem_id NUMBER); CREATE TABLE Staff (other_staff_details TEXT, staff_last_name TEXT, staff_first_name TEXT, staff_id NUMBER); CREATE TABLE Problem_Log (assigned_to_staff_id NUMBER, problem_log_id NUMBER, problem_id NUMBER); CREATE TABLE Product (product_name TEXT, product_id NUMBER);"
      }
    ],
    [
      {
        "question": "What are the product ids for the problems reported by Christop Berge with closure authorised by Ashley Medhurst?",
        "query": "SELECT product_id FROM problems AS t1 JOIN staff AS t2 ON t1.reported_by_staff_id = t2.staff_id WHERE t2.staff_first_name = \"Christop\" AND t2.staff_last_name = \"Berge\" INTERSECT SELECT product_id FROM problems AS t1 JOIN staff AS t2 ON t1.closure_authorised_by_staff_id = t2.staff_id WHERE t2.staff_first_name = \"Ashley\" AND t2.staff_last_name = \"Medhurst\"",
        "schema": "CREATE TABLE Problems (reported_by_staff_id NUMBER, problem_description TEXT, problem_id NUMBER, product_id NUMBER, closure_authorised_by_staff_id NUMBER); CREATE TABLE Staff (staff_last_name TEXT, staff_id NUMBER, other_staff_details TEXT, staff_first_name TEXT); CREATE TABLE Problem_Log (problem_id NUMBER, assigned_to_staff_id NUMBER); CREATE TABLE Product (product_name TEXT, product_id NUMBER);"
      },
      {
        "question": "How many staffs are on the list?",
        "query": "SELECT COUNT ( * ) FROM staff",
        "schema": "CREATE TABLE Staff (staff_id NUMBER, staff_first_name TEXT, other_staff_details TEXT, staff_last_name TEXT); CREATE TABLE Product (product_name TEXT, product_id NUMBER); CREATE TABLE Problems (problem_description TEXT, product_id NUMBER, problem_id NUMBER, closure_authorised_by_staff_id NUMBER, reported_by_staff_id NUMBER); CREATE TABLE Problem_Log (problem_id NUMBER, assigned_to_staff_id NUMBER);"
      }
    ],
    [
      {
        "question": "Hello!  Can you provide me with a list of all of the staff members first and last names?",
        "query": "SELECT staff_first_name , staff_last_name FROM staff",
        "schema": "CREATE TABLE Problems (reported_by_staff_id NUMBER); CREATE TABLE Problem_Log (assigned_to_staff_id NUMBER); CREATE TABLE Staff (staff_last_name TEXT, staff_id NUMBER, staff_first_name TEXT, other_staff_details TEXT);"
      },
      {
        "question": "Can you filter this list to show just the staff members who reported problems with the product named \"rem\"?",
        "query": "SELECT t3.staff_first_name , t3.staff_last_name FROM problems AS t1 JOIN product AS t2 JOIN staff AS t3 ON t1.product_id = t2.product_id AND t1.reported_by_staff_id = t3.staff_id WHERE t2.product_name = \"rem\"",
        "schema": "CREATE TABLE Staff (other_staff_details TEXT, staff_last_name TEXT, staff_first_name TEXT, staff_id NUMBER); CREATE TABLE Problems (problem_id NUMBER, closure_authorised_by_staff_id NUMBER, reported_by_staff_id NUMBER, product_id NUMBER); CREATE TABLE Product (product_details TEXT, product_id NUMBER, product_name TEXT); CREATE TABLE Problem_Log (problem_id NUMBER, assigned_to_staff_id NUMBER);"
      },
      {
        "question": "Interesting...  Okay, I can only see the first three entries on that table, so I assumed \"rem\" and \"auf\" were lower down and I simply couldn't see them.  Can you show me a list of all of the different product names on the \"Product\" table?",
        "query": "SELECT product_name FROM product",
        "schema": "CREATE TABLE Product (product_id NUMBER, product_name TEXT, product_details TEXT); CREATE TABLE Problems (product_id NUMBER, problem_id NUMBER, reported_by_staff_id NUMBER, closure_authorised_by_staff_id NUMBER); CREATE TABLE Problem_Log (problem_id NUMBER, assigned_to_staff_id NUMBER); CREATE TABLE Staff (staff_last_name TEXT, other_staff_details TEXT, staff_first_name TEXT, staff_id NUMBER);"
      },
      {
        "question": "Can you show me which three products received the three highest total number of reported problems?",
        "query": "SELECT t1.product_name FROM product AS t1 JOIN problems AS t2 ON t1.product_id = t2.product_id GROUP BY t2.product_id ORDER BY COUNT ( * ) DESC LIMIT 3",
        "schema": "CREATE TABLE Problems (reported_by_staff_id NUMBER, product_id NUMBER, closure_authorised_by_staff_id NUMBER, problem_id NUMBER); CREATE TABLE Product (product_details TEXT, product_id NUMBER, product_name TEXT); CREATE TABLE Staff (staff_first_name TEXT, staff_id NUMBER, other_staff_details TEXT, staff_last_name TEXT); CREATE TABLE Problem_Log (assigned_to_staff_id NUMBER, problem_id NUMBER);"
      }
    ]
  ],
  "company_employee": [
    [
      {
        "question": "Names of headquarters that have at least two companies?",
        "query": "SELECT headquarters FROM company GROUP BY headquarters HAVING COUNT ( * ) > = 2",
        "schema": "CREATE TABLE company (Headquarters TEXT, Name TEXT);"
      },
      {
        "question": "What is tbe name of the company in china?",
        "query": "SELECT name FROM company WHERE headquarters = \"China\"",
        "schema": "CREATE TABLE company (Company_ID NUMBER, Headquarters TEXT, Name TEXT); CREATE TABLE people (People_ID NUMBER, Name TEXT);"
      },
      {
        "question": "What industry does petrochina belong to?",
        "query": "SELECT industry FROM company WHERE name = \"PetroChina\"",
        "schema": "CREATE TABLE people (Name TEXT, People_ID NUMBER); CREATE TABLE company (Company_ID NUMBER, Industry TEXT, Name TEXT, Headquarters TEXT);"
      }
    ],
    [
      {
        "question": "Hello!  Can you show me a list of all company IDs, with their names and headquarters locations?",
        "query": "SELECT company_id,name,headquarters FROM company",
        "schema": "CREATE TABLE people (People_ID NUMBER, Name TEXT); CREATE TABLE company (Company_ID NUMBER, Name TEXT, Headquarters TEXT);"
      },
      {
        "question": "Could you filter this same list to list only the Headquarter countries that have more than one company in them?",
        "query": "SELECT headquarters FROM company GROUP BY headquarters HAVING COUNT ( * ) > = 2",
        "schema": "CREATE TABLE company (Headquarters TEXT, Company_ID NUMBER, Name TEXT); CREATE TABLE people (Name TEXT, People_ID NUMBER, Nationality TEXT);"
      }
    ],
    [
      {
        "question": "What are some companies with more than 200 sales?",
        "query": "SELECT name FROM company WHERE sales_in_billion > 200",
        "schema": "CREATE TABLE company (Company_ID NUMBER, Sales_in_Billion NUMBER, Name TEXT); CREATE TABLE people (People_ID NUMBER, Name TEXT);"
      },
      {
        "question": "Can you sort the list in descending order of sales and profits",
        "query": "SELECT name FROM company WHERE sales_in_billion > 200 ORDER BY sales_in_billion , profits_in_billion DESC",
        "schema": "CREATE TABLE people (Name TEXT, People_ID NUMBER); CREATE TABLE company (Sales_in_Billion NUMBER, Profits_in_Billion NUMBER, Company_ID NUMBER, Name TEXT);"
      },
      {
        "question": "How many companies are in the list?",
        "query": "SELECT COUNT ( * ) FROM company WHERE sales_in_billion > 200 ORDER BY sales_in_billion , profits_in_billion DESC",
        "schema": "CREATE TABLE people (People_ID NUMBER, Name TEXT); CREATE TABLE company (Profits_in_Billion NUMBER, Company_ID NUMBER, Name TEXT, Sales_in_Billion NUMBER);"
      },
      {
        "question": "Can you show me the list in descending order of sales and profits again?",
        "query": "SELECT name FROM company WHERE sales_in_billion > 200 ORDER BY sales_in_billion , profits_in_billion DESC",
        "schema": "CREATE TABLE company (Profits_in_Billion NUMBER, Sales_in_Billion NUMBER, Name TEXT, Company_ID NUMBER); CREATE TABLE people (People_ID NUMBER, Name TEXT);"
      }
    ],
    [
      {
        "question": "Which company have a higher sales? | do you mean which company have a highest sales? | yes",
        "query": "SELECT name FROM company ORDER BY sales_in_billion DESC LIMIT 1",
        "schema": "CREATE TABLE people (Name TEXT, People_ID NUMBER); CREATE TABLE company (Company_ID NUMBER, Name TEXT, Sales_in_Billion NUMBER);"
      },
      {
        "question": "What are the kinds of industries in the table?",
        "query": "SELECT DISTINCT industry FROM company",
        "schema": "CREATE TABLE people (Name TEXT, People_ID NUMBER); CREATE TABLE company (Company_ID NUMBER, Industry TEXT, Name TEXT, Sales_in_Billion NUMBER);"
      }
    ],
    [
      {
        "question": "Show the name of the company with company_id 1.0?",
        "query": "SELECT name FROM company WHERE company_id = 1.0",
        "schema": "CREATE TABLE employment (Company_ID NUMBER, People_ID NUMBER); CREATE TABLE people (People_ID NUMBER, Name TEXT); CREATE TABLE company (Company_ID NUMBER, Name TEXT, Headquarters TEXT);"
      },
      {
        "question": "Show the names of companies and that of employees in descending order of number of years working for that employee?",
        "query": "SELECT t3.name , t2.name FROM employment AS t1 JOIN people AS t2 ON t1.people_id = t2.people_id JOIN company AS t3 ON t1.company_id = t3.company_id ORDER BY t1.year_working",
        "schema": "CREATE TABLE people (Name TEXT, People_ID NUMBER); CREATE TABLE employment (Year_working NUMBER, Company_ID NUMBER, People_ID NUMBER); CREATE TABLE company (Headquarters TEXT, Name TEXT, Company_ID NUMBER);"
      },
      {
        "question": "Show all companies with Headquarters USA? | Did  you  mean   to show the company IDs? | yes",
        "query": "SELECT company_id FROM company WHERE headquarters = \"USA\"",
        "schema": "CREATE TABLE people (Name TEXT, Nationality TEXT, People_ID NUMBER); CREATE TABLE employment (Company_ID NUMBER, People_ID NUMBER, Year_working NUMBER); CREATE TABLE company (Name TEXT, Headquarters TEXT, Company_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What companies are in the banking or retailing industry? | Do you want their company id or name? | What are the names of the companies in the banking or retail industries?",
        "query": "SELECT name FROM company WHERE industry = \"Banking\" OR industry = \"Retailing\"",
        "schema": "CREATE TABLE people (People_ID NUMBER, Name TEXT); CREATE TABLE company (Company_ID NUMBER, Name TEXT, Industry TEXT);"
      },
      {
        "question": "What are the total sales in billions of all of these companies combined?",
        "query": "SELECT SUM ( sales_in_billion ) FROM company WHERE industry = \"Banking\" OR industry = \"Retailing\"",
        "schema": "CREATE TABLE people (People_ID NUMBER, Name TEXT); CREATE TABLE company (Sales_in_Billion NUMBER, Name TEXT, Company_ID NUMBER, Industry TEXT);"
      },
      {
        "question": "and what is their total market value in billions?",
        "query": "SELECT SUM ( market_value_in_billion ) FROM company WHERE industry = \"Banking\" OR industry = \"Retailing\"",
        "schema": "CREATE TABLE people (People_ID NUMBER, Name TEXT); CREATE TABLE company (Sales_in_Billion NUMBER, Name TEXT, Industry TEXT, Market_Value_in_Billion NUMBER, Company_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Which company has the largest sales? | Did you mean the name of the company with the largest sales? | Yes thr name of the company that has the largest sales",
        "query": "SELECT name FROM company ORDER BY sales_in_billion DESC LIMIT 1",
        "schema": "CREATE TABLE company (Sales_in_Billion NUMBER, Company_ID NUMBER, Name TEXT); CREATE TABLE people (Name TEXT, People_ID NUMBER);"
      },
      {
        "question": "Where is the headquarters of royal dutch shell?",
        "query": "SELECT headquarters FROM company WHERE name = \"Royal Dutch Shell\"",
        "schema": "CREATE TABLE people (Name TEXT, People_ID NUMBER); CREATE TABLE company (Headquarters TEXT, Company_ID NUMBER, Name TEXT, Sales_in_Billion NUMBER);"
      },
      {
        "question": "What kind of industry does royal dutch shell belongs to?",
        "query": "SELECT industry FROM company WHERE name = \"Royal Dutch Shell\"",
        "schema": "CREATE TABLE people (Name TEXT, People_ID NUMBER); CREATE TABLE company (Headquarters TEXT, Company_ID NUMBER, Industry TEXT, Name TEXT, Sales_in_Billion NUMBER);"
      }
    ],
    [
      {
        "question": "Give me the nationality of the unemployed people",
        "query": "SELECT nationality FROM people WHERE people_id NOT IN ( SELECT people_id FROM employment )",
        "schema": "CREATE TABLE people (Name TEXT, People_ID NUMBER, Nationality TEXT); CREATE TABLE employment (People_ID NUMBER);"
      },
      {
        "question": "Which college did Reggie Lewis graduated from",
        "query": "SELECT graduation_college FROM people WHERE name = \"Reggie Lewis\"",
        "schema": "CREATE TABLE employment (Company_ID NUMBER, People_ID NUMBER); CREATE TABLE people (Name TEXT, Graduation_College TEXT, Nationality TEXT, People_ID NUMBER);"
      }
    ],
    [
      {
        "question": "hi, can you show me headquarters that have companies in the banking industry?",
        "query": "SELECT DISTINCT headquarters FROM company WHERE industry = \"Banking\"",
        "schema": "CREATE TABLE people (People_ID NUMBER); CREATE TABLE company (Company_ID NUMBER, Headquarters TEXT, Industry TEXT);"
      },
      {
        "question": "and can you also show me headquarters that have companies in the oil and gas industry?",
        "query": "SELECT DISTINCT headquarters FROM company WHERE industry = \"Oil and gas\"",
        "schema": "CREATE TABLE people (People_ID NUMBER); CREATE TABLE company (Company_ID NUMBER, Industry TEXT, Headquarters TEXT);"
      },
      {
        "question": "and can you show me only those headquarters that have both companies in oil and gas as well as banking industry?",
        "query": "SELECT headquarters FROM company WHERE industry = \"Banking\" INTERSECT SELECT headquarters FROM company WHERE industry = \"Oil and gas\"",
        "schema": "CREATE TABLE people (People_ID NUMBER); CREATE TABLE company (Headquarters TEXT, Company_ID NUMBER, Industry TEXT);"
      }
    ],
    [
      {
        "question": "How many different countries serve as headquarters?",
        "query": "SELECT COUNT ( DISTINCT headquarters ) FROM company",
        "schema": "CREATE TABLE people (Nationality TEXT); CREATE TABLE company (Headquarters TEXT, Company_ID NUMBER);"
      },
      {
        "question": "What is the most popular industry?",
        "query": "SELECT industry FROM company GROUP BY industry ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE company (Company_ID NUMBER, Headquarters TEXT, Industry TEXT); CREATE TABLE people (Nationality TEXT);"
      },
      {
        "question": "What company has the highest market value? | Did  you  mean  the max Profits_in_Billion? | No, I mean Market_Value_in_Billion.",
        "query": "SELECT name FROM company ORDER BY market_value_in_billion DESC LIMIT 1",
        "schema": "CREATE TABLE people (Nationality TEXT, People_ID NUMBER); CREATE TABLE company (Profits_in_Billion NUMBER, Name TEXT, Industry TEXT, Company_ID NUMBER, Market_Value_in_Billion NUMBER, Sales_in_Billion NUMBER, Headquarters TEXT);"
      },
      {
        "question": "What headquarter is the most popular?",
        "query": "SELECT headquarters FROM company GROUP BY headquarters ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE company (Headquarters TEXT, Sales_in_Billion NUMBER, Profits_in_Billion NUMBER, Industry TEXT, Market_Value_in_Billion NUMBER, Company_ID NUMBER, Name TEXT); CREATE TABLE people (People_ID NUMBER, Nationality TEXT);"
      }
    ],
    [
      {
        "question": "Please show me the names of employees that work for companies with sales bigger than 200",
        "query": "SELECT t2.name FROM employment AS t1 JOIN people AS t2 ON t1.people_id = t2.people_id JOIN company AS t3 ON t1.company_id = t3.company_id WHERE t3.sales_in_billion > 200",
        "schema": "CREATE TABLE employment (Company_ID NUMBER, People_ID NUMBER); CREATE TABLE company (Name TEXT, Company_ID NUMBER, Sales_in_Billion NUMBER); CREATE TABLE people (Name TEXT, People_ID NUMBER);"
      },
      {
        "question": "please show me the average age of those employees",
        "query": "SELECT AVG ( t2.age ) FROM employment AS t1 JOIN people AS t2 ON t1.people_id = t2.people_id JOIN company AS t3 ON t1.company_id = t3.company_id WHERE t3.sales_in_billion > 200",
        "schema": "CREATE TABLE people (Age NUMBER, People_ID NUMBER, Name TEXT); CREATE TABLE employment (People_ID NUMBER, Company_ID NUMBER); CREATE TABLE company (Name TEXT, Sales_in_Billion NUMBER, Company_ID NUMBER);"
      }
    ],
    [
      {
        "question": "what is the name of the company with more than 200 sales?",
        "query": "SELECT name FROM company WHERE sales_in_billion > 200",
        "schema": "CREATE TABLE people (Name TEXT, People_ID NUMBER); CREATE TABLE company (Sales_in_Billion NUMBER, Company_ID NUMBER, Name TEXT);"
      },
      {
        "question": "where is the headquarters for  BP",
        "query": "SELECT headquarters FROM company WHERE name = \"BP\"",
        "schema": "CREATE TABLE company (Company_ID NUMBER, Headquarters TEXT, Name TEXT, Sales_in_Billion NUMBER); CREATE TABLE people (People_ID NUMBER, Name TEXT);"
      },
      {
        "question": "in what industry is BP",
        "query": "SELECT industry FROM company WHERE name = \"BP\"",
        "schema": "CREATE TABLE company (Company_ID NUMBER, Headquarters TEXT, Name TEXT, Sales_in_Billion NUMBER, Industry TEXT); CREATE TABLE people (Name TEXT, People_ID NUMBER);"
      }
    ]
  ],
  "customer_complaints": [
    [
      {
        "question": "Which state has the most customers?",
        "query": "SELECT state FROM customers GROUP BY state ORDER BY COUNT ( * ) LIMIT 1",
        "schema": "CREATE TABLE Customers (customer_id NUMBER, state TEXT, customer_type_code TEXT);"
      },
      {
        "question": "How many customers have the customer type code \"Good Credit Rating\"?",
        "query": "SELECT COUNT ( customer_id ) FROM customers WHERE customer_type_code = \"Good Credit Rating\"",
        "schema": "CREATE TABLE Customers (customer_type_code TEXT, state TEXT, customer_id NUMBER);"
      },
      {
        "question": "What are the states of all customers who who have the customer type code Good Credit Rating?",
        "query": "SELECT state FROM customers WHERE customer_type_code = \"Good Credit Rating\"",
        "schema": "CREATE TABLE Customers (customer_type_code TEXT, customer_id NUMBER, state TEXT);"
      },
      {
        "question": "What are the customer ids of all customers who who have the customer type code Good Credit Rating?",
        "query": "SELECT customer_id FROM customers WHERE customer_type_code = \"Good Credit Rating\"",
        "schema": "CREATE TABLE Customers (state TEXT, customer_id NUMBER, customer_type_code TEXT);"
      }
    ],
    [
      {
        "question": "Who has filed the least amounts of complaints?",
        "query": "SELECT DISTINCT t3.customer_id FROM products AS t1 JOIN complaints AS t2 ON t1.product_id = t2.product_id JOIN customers AS t3 GROUP BY t3.customer_id ORDER BY COUNT ( * ) LIMIT 1",
        "schema": "CREATE TABLE Customers (customer_type_code TEXT, customer_id NUMBER); CREATE TABLE Complaints (complaint_type_code TEXT, staff_id NUMBER, product_id NUMBER, customer_id NUMBER, complaint_id NUMBER, complaint_status_code TEXT); CREATE TABLE Products (product_id NUMBER, product_name TEXT); CREATE TABLE Staff (staff_id NUMBER, last_name TEXT, first_name TEXT);"
      },
      {
        "question": "Which product have they complained about? | Who do you mean by \"they\"? | Customer, 113.",
        "query": "SELECT DISTINCT t1.product_name FROM products AS t1 JOIN complaints AS t2 ON t1.product_id = t2.product_id JOIN customers AS t3 GROUP BY t3.customer_id HAVING t3.customer_id = \"113\"",
        "schema": "CREATE TABLE Complaints (complaint_status_code TEXT, staff_id NUMBER, product_id NUMBER, customer_id NUMBER, complaint_id NUMBER, complaint_type_code TEXT); CREATE TABLE Products (product_name TEXT, product_id NUMBER); CREATE TABLE Staff (staff_id NUMBER, first_name TEXT, last_name TEXT); CREATE TABLE Customers (customer_type_code TEXT, customer_id NUMBER);"
      }
    ],
    [
      {
        "question": "How many customers are there?",
        "query": "SELECT COUNT ( * ) FROM customers",
        "schema": "CREATE TABLE Customers (town_city TEXT, state TEXT, customer_type_code TEXT, customer_id NUMBER); CREATE TABLE Complaints (customer_id NUMBER);"
      },
      {
        "question": "How many complaints did each customer file? | Did you want the customer ids and number of complaints fold for each customer? | Yes, please.",
        "query": "SELECT customer_id, COUNT ( * ) FROM complaints GROUP BY customer_id",
        "schema": "CREATE TABLE Customers (town_city TEXT, customer_type_code TEXT, state TEXT, customer_id NUMBER); CREATE TABLE Complaints (customer_id NUMBER, complaint_id NUMBER);"
      },
      {
        "question": "Can you tell me the id of the product with most complaints?",
        "query": "SELECT product_id FROM complaints GROUP BY product_id ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Complaints (product_id NUMBER, customer_id NUMBER, complaint_id NUMBER); CREATE TABLE Customers (state TEXT, town_city TEXT, customer_id NUMBER, customer_type_code TEXT); CREATE TABLE Products (parent_product_id NUMBER, product_name TEXT, product_id NUMBER);"
      },
      {
        "question": "What are the emails of the customers who filed a complaint of this product?",
        "query": "SELECT t1.email_address FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id = t2.customer_id WHERE t2.product_id = 117",
        "schema": "CREATE TABLE Complaints (complaint_id NUMBER, customer_id NUMBER, product_id NUMBER); CREATE TABLE Staff (email_address TEXT); CREATE TABLE Products (product_id NUMBER, product_name TEXT, parent_product_id NUMBER); CREATE TABLE Customers (customer_id NUMBER, town_city TEXT, customer_type_code TEXT, email_address TEXT, state TEXT);"
      }
    ],
    [
      {
        "question": "What date was the most recent complaint raised?",
        "query": "SELECT date_complaint_raised FROM complaints ORDER BY date_complaint_raised DESC LIMIT 1",
        "schema": "CREATE TABLE Complaints (complaint_id NUMBER, date_complaint_raised TIME, complaint_outcome_code TEXT, customer_id NUMBER, staff_id NUMBER, complaint_status_code TEXT, date_complaint_closed TIME); CREATE TABLE Staff (staff_id NUMBER); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Products (date_product_discontinued TIME);"
      },
      {
        "question": "Was this complaint closed? | Do you mean whether the complaint which raised at 2007-10-14 21:50:43 was closed? | Correct. Has the complaint raised at 2007-10-14 21:50:43 been closed?",
        "query": "SELECT date_complaint_closed FROM complaints WHERE date_complaint_raised = '2007-10-14 21:50:43'",
        "schema": "CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Products (date_product_discontinued TIME); CREATE TABLE Complaints (customer_id NUMBER, complaint_status_code TEXT, staff_id NUMBER, complaint_outcome_code TEXT, date_complaint_raised TIME, complaint_id NUMBER, date_complaint_closed TIME); CREATE TABLE Staff (staff_id NUMBER);"
      },
      {
        "question": "What is the customer id for that complaint? | Do you mean the customer id for the complaint which raised at 2007-10-14 21:50:43? | Correct. What is the customer id for the complaint raised at 2007-10-14 21:50:43?",
        "query": "SELECT customer_id FROM complaints WHERE date_complaint_raised = '2007-10-14 21:50:43'",
        "schema": "CREATE TABLE Complaints (date_complaint_raised TIME, staff_id NUMBER, complaint_outcome_code TEXT, customer_id NUMBER, complaint_status_code TEXT, date_complaint_closed TIME, complaint_id NUMBER); CREATE TABLE Products (date_product_discontinued TIME); CREATE TABLE Staff (staff_id NUMBER); CREATE TABLE Customers (customer_id NUMBER);"
      },
      {
        "question": "What is the phone number for customer id 118?",
        "query": "SELECT phone_number FROM customers WHERE customer_id = 118",
        "schema": "CREATE TABLE Staff (staff_id NUMBER); CREATE TABLE Products (date_product_discontinued TIME); CREATE TABLE Complaints (complaint_id NUMBER, complaint_status_code TEXT, staff_id NUMBER, date_complaint_closed TIME, complaint_outcome_code TEXT, date_complaint_raised TIME, customer_id NUMBER); CREATE TABLE Customers (customer_id NUMBER, phone_number TEXT);"
      }
    ],
    [
      {
        "question": "Find the number of complaints with Product Failure type for each complaint status?",
        "query": "SELECT complaint_status_code , COUNT ( * ) FROM complaints WHERE complaint_type_code = \"Product Failure\" GROUP BY complaint_status_code",
        "schema": "CREATE TABLE Products (product_id NUMBER); CREATE TABLE Complaints (customer_id NUMBER, product_id NUMBER, complaint_type_code TEXT, complaint_status_code TEXT, complaint_id NUMBER); CREATE TABLE Customers (customer_id NUMBER, customer_type_code TEXT);"
      },
      {
        "question": "What were the complaint outcome code\tof each of those claims? | Here are the complaint outcome codes of each of Product Failure type claims. | What is the complaint status code of each of those claims?",
        "query": "SELECT complaint_status_code FROM complaints WHERE complaint_type_code = \"Product Failure\"",
        "schema": "CREATE TABLE Complaints (customer_id NUMBER, complaint_id NUMBER, complaint_type_code TEXT, complaint_status_code TEXT, complaint_outcome_code TEXT, product_id NUMBER); CREATE TABLE Products (product_id NUMBER); CREATE TABLE Customers (customer_type_code TEXT, customer_id NUMBER);"
      }
    ],
    [
      {
        "question": "Hello, which complaint id  has more than 3 records present on this list?",
        "query": "SELECT complaint_id FROM complaints GROUP BY complaint_id HAVING COUNT ( * ) > 3",
        "schema": "CREATE TABLE Products (product_id NUMBER); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Staff (staff_id NUMBER); CREATE TABLE Complaints (complaint_outcome_code TEXT, product_id NUMBER, staff_id NUMBER, complaint_status_code TEXT, customer_id NUMBER, complaint_id NUMBER, complaint_type_code TEXT);"
      },
      {
        "question": "Okay, I see.  Which complaint status code has more than 3 records on this list?",
        "query": "SELECT complaint_status_code FROM complaints GROUP BY complaint_status_code HAVING COUNT ( * ) > 3",
        "schema": "CREATE TABLE Products (product_id NUMBER); CREATE TABLE Staff (staff_id NUMBER); CREATE TABLE Complaints (staff_id NUMBER, complaint_outcome_code TEXT, complaint_id NUMBER, customer_id NUMBER, product_id NUMBER, complaint_status_code TEXT, complaint_type_code TEXT); CREATE TABLE Customers (customer_id NUMBER);"
      },
      {
        "question": "Alright!  Now can you update this list to show the associated complain type code for these two status codes?",
        "query": "SELECT complaint_status_code,complaint_type_code FROM complaints GROUP BY complaint_status_code HAVING COUNT ( * ) > 3",
        "schema": "CREATE TABLE Staff (staff_id NUMBER); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Products (product_id NUMBER); CREATE TABLE Complaints (complaint_outcome_code TEXT, complaint_id NUMBER, complaint_status_code TEXT, customer_id NUMBER, product_id NUMBER, complaint_type_code TEXT, staff_id NUMBER);"
      },
      {
        "question": "Finally, can you show me the complaint outcome code for each of these two entries?",
        "query": "SELECT complaint_outcome_code FROM complaints GROUP BY complaint_status_code HAVING COUNT ( * ) > 3",
        "schema": "CREATE TABLE Complaints (complaint_id NUMBER, complaint_type_code TEXT, staff_id NUMBER, product_id NUMBER, customer_id NUMBER, complaint_outcome_code TEXT, complaint_status_code TEXT); CREATE TABLE Staff (staff_id NUMBER); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Products (product_id NUMBER);"
      }
    ],
    [
      {
        "question": "WHAT IS LAST NAME OF THE STAFF WHO HAS HANDLED THE FIRST EVER COMPLAINT?",
        "query": "SELECT t1.last_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id = t2.staff_id ORDER BY t2.date_complaint_raised LIMIT 1",
        "schema": "CREATE TABLE Complaints (date_complaint_raised TIME, date_complaint_closed TIME, complaint_id NUMBER, staff_id NUMBER, complaint_outcome_code TEXT); CREATE TABLE Staff (first_name TEXT, last_name TEXT, staff_id NUMBER); CREATE TABLE Customers (customer_id NUMBER);"
      },
      {
        "question": "THE FIRST NAME OF THE STAFF WHO HAS HANDLED THE LAST COMPLAINT",
        "query": "SELECT t1.first_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id = t2.staff_id ORDER BY t2.date_complaint_raised DESC LIMIT 1",
        "schema": "CREATE TABLE Complaints (date_complaint_raised TIME, staff_id NUMBER, complaint_outcome_code TEXT, complaint_id NUMBER, date_complaint_closed TIME); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Staff (last_name TEXT, first_name TEXT, staff_id NUMBER);"
      }
    ],
    [
      {
        "question": "Hello, how many complaints have we had?",
        "query": "SELECT COUNT ( * ) FROM complaints",
        "schema": "CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Staff (staff_id NUMBER); CREATE TABLE Products (product_id NUMBER); CREATE TABLE Complaints (complaint_status_code TEXT, product_id NUMBER, staff_id NUMBER, complaint_id NUMBER, customer_id NUMBER, complaint_type_code TEXT, complaint_outcome_code TEXT);"
      },
      {
        "question": "How about customers?",
        "query": "SELECT COUNT ( * ) FROM customers",
        "schema": "CREATE TABLE Staff (staff_id NUMBER); CREATE TABLE Products (product_id NUMBER); CREATE TABLE Customers (customer_id NUMBER, customer_type_code TEXT); CREATE TABLE Complaints (staff_id NUMBER, product_id NUMBER, complaint_outcome_code TEXT, complaint_status_code TEXT, complaint_id NUMBER, customer_id NUMBER, complaint_type_code TEXT);"
      },
      {
        "question": "How many customers have filed complaints?",
        "query": "SELECT COUNT ( * ) FROM customers WHERE customer_id IN ( SELECT customer_id FROM complaints )",
        "schema": "CREATE TABLE Products (product_id NUMBER); CREATE TABLE Staff (staff_id NUMBER); CREATE TABLE Complaints (complaint_id NUMBER, complaint_outcome_code TEXT, complaint_status_code TEXT, staff_id NUMBER, customer_id NUMBER, complaint_type_code TEXT, product_id NUMBER); CREATE TABLE Customers (customer_type_code TEXT, customer_id NUMBER);"
      },
      {
        "question": "And how many have not filed complaints?",
        "query": "SELECT COUNT ( * ) FROM customers WHERE customer_id NOT IN ( SELECT customer_id FROM complaints )",
        "schema": "CREATE TABLE Products (product_id NUMBER); CREATE TABLE Complaints (complaint_outcome_code TEXT, complaint_id NUMBER, product_id NUMBER, complaint_type_code TEXT, staff_id NUMBER, customer_id NUMBER, complaint_status_code TEXT); CREATE TABLE Customers (customer_type_code TEXT, customer_id NUMBER); CREATE TABLE Staff (staff_id NUMBER);"
      },
      {
        "question": "What is that customer's phone number?",
        "query": "SELECT phone_number FROM customers WHERE customer_id NOT IN ( SELECT customer_id FROM complaints )",
        "schema": "CREATE TABLE Staff (staff_id NUMBER, phone_number TEXT); CREATE TABLE Complaints (product_id NUMBER, staff_id NUMBER, complaint_outcome_code TEXT, complaint_status_code TEXT, customer_id NUMBER, complaint_id NUMBER, complaint_type_code TEXT); CREATE TABLE Products (product_id NUMBER); CREATE TABLE Customers (customer_type_code TEXT, customer_id NUMBER, phone_number TEXT);"
      },
      {
        "question": "what about that customer's email?",
        "query": "SELECT email_address FROM customers WHERE customer_id NOT IN ( SELECT customer_id FROM complaints )",
        "schema": "CREATE TABLE Complaints (complaint_id NUMBER, complaint_outcome_code TEXT, complaint_status_code TEXT, customer_id NUMBER, staff_id NUMBER, complaint_type_code TEXT, product_id NUMBER); CREATE TABLE Staff (staff_id NUMBER, phone_number TEXT); CREATE TABLE Products (product_id NUMBER); CREATE TABLE Customers (email_address TEXT, phone_number TEXT, customer_id NUMBER, customer_type_code TEXT);"
      }
    ],
    [
      {
        "question": "What is the phone number of the customer who has filed the most recent complaint?",
        "query": "SELECT t1.phone_number FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id = t2.customer_id ORDER BY t2.date_complaint_raised DESC LIMIT 1",
        "schema": "CREATE TABLE Staff (phone_number TEXT); CREATE TABLE Complaints (customer_id NUMBER, date_complaint_raised TIME, complaint_status_code TEXT, date_complaint_closed TIME, complaint_outcome_code TEXT, complaint_id NUMBER); CREATE TABLE Customers (phone_number TEXT, customer_id NUMBER, customer_type_code TEXT);"
      },
      {
        "question": "The customer who filed the latest complaint uses which phone number?",
        "query": "SELECT t1.phone_number FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id = t2.customer_id ORDER BY t2.date_complaint_raised DESC LIMIT 1",
        "schema": "CREATE TABLE Complaints (customer_id NUMBER, complaint_id NUMBER, date_complaint_closed TIME, complaint_outcome_code TEXT, complaint_status_code TEXT, date_complaint_raised TIME); CREATE TABLE Customers (customer_type_code TEXT, customer_id NUMBER, phone_number TEXT); CREATE TABLE Staff (phone_number TEXT);"
      },
      {
        "question": "What is the address of the customer who filed the most recent complaint?",
        "query": "SELECT t1.address_line_1, t1.address_line_2 FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id = t2.customer_id ORDER BY t2.date_complaint_raised DESC LIMIT 1",
        "schema": "CREATE TABLE Customers (customer_id NUMBER, address_line_2 TEXT, address_line_1 TEXT, customer_type_code TEXT, phone_number TEXT); CREATE TABLE Staff (phone_number TEXT); CREATE TABLE Complaints (customer_id NUMBER, date_complaint_closed TIME, complaint_status_code TEXT, date_complaint_raised TIME, complaint_id NUMBER, complaint_outcome_code TEXT);"
      }
    ]
  ],
  "party_people": [
    [
      {
        "question": "What member is in charge of the most events?",
        "query": "SELECT member_in_charge_id, COUNT ( * ) FROM party_events GROUP BY member_in_charge_id ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE party_events (Member_in_charge_ID NUMBER, Event_ID NUMBER); CREATE TABLE member (Member_ID NUMBER, Member_Name TEXT, In_office TEXT);"
      },
      {
        "question": "What is the name of Member ID 4?",
        "query": "SELECT member_name FROM member WHERE member_id = 4",
        "schema": "CREATE TABLE member (Member_Name TEXT, In_office TEXT, Party_ID TEXT, Member_ID NUMBER); CREATE TABLE party (Party_ID NUMBER); CREATE TABLE party_events (Party_ID NUMBER, Event_ID NUMBER, Event_Name TEXT, Member_in_charge_ID NUMBER);"
      }
    ],
    [
      {
        "question": "WHO IS THE HON TONY ABBOTT | did you mean the Member ID of HON TONY ABBOTT | YES EXACTLY",
        "query": "SELECT member_id FROM member WHERE member_name = 'Hon Tony Abbott'",
        "schema": "CREATE TABLE member (Member_Name TEXT, Member_ID NUMBER, Party_ID TEXT); CREATE TABLE party (Minister TEXT, Party_ID NUMBER);"
      },
      {
        "question": "WHAT IS THE NAME OF PARTY WITH MOST NUMBER OF MEMBERS",
        "query": "SELECT t2.party_name FROM member AS t1 JOIN party AS t2 ON t1.party_id = t2.party_id GROUP BY t1.party_id ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE region (Region_name TEXT); CREATE TABLE member (Member_Name TEXT, Party_ID TEXT, Member_ID NUMBER); CREATE TABLE party (Party_ID NUMBER, Minister TEXT, Party_name TEXT);"
      }
    ],
    [
      {
        "question": "How many ministers were there?",
        "query": "SELECT COUNT ( minister ) FROM party",
        "schema": "CREATE TABLE party (Took_office TEXT, Party_ID NUMBER, Left_office TEXT, Minister TEXT); CREATE TABLE member (In_office TEXT);"
      },
      {
        "question": "Show the minister who took office after 1961 or before 1959.",
        "query": "SELECT minister FROM party WHERE took_office > 1961 OR took_office < 1959",
        "schema": "CREATE TABLE party (Minister TEXT, Took_office TEXT, Left_office TEXT, Party_ID NUMBER); CREATE TABLE member (In_office TEXT);"
      },
      {
        "question": "Which minister took office just before 1959?",
        "query": "SELECT minister FROM party WHERE took_office < 1959",
        "schema": "CREATE TABLE party (Party_ID NUMBER, Left_office TEXT, Minister TEXT, Took_office TEXT); CREATE TABLE member (In_office TEXT);"
      }
    ],
    [
      {
        "question": "What are the names of parties with 2 events",
        "query": "SELECT t2.party_name FROM party_events AS t1 JOIN party AS t2 ON t1.party_id = t2.party_id GROUP BY t1.party_id HAVING COUNT ( * ) = 2",
        "schema": "CREATE TABLE member (Party_ID TEXT, Member_ID NUMBER); CREATE TABLE party (Party_ID NUMBER, Party_name TEXT); CREATE TABLE party_events (Event_ID NUMBER, Event_Name TEXT, Party_ID NUMBER);"
      },
      {
        "question": "what is the minister name of the party with 2 events",
        "query": "SELECT t2.minister FROM party_events AS t1 JOIN party AS t2 ON t1.party_id = t2.party_id GROUP BY t1.party_id HAVING COUNT ( * ) = 2",
        "schema": "CREATE TABLE member (Party_ID TEXT, Member_ID NUMBER); CREATE TABLE party_events (Party_ID NUMBER, Event_Name TEXT, Event_ID NUMBER); CREATE TABLE party (Minister TEXT, Took_office TEXT, Party_name TEXT, Party_ID NUMBER);"
      },
      {
        "question": "what are the minister names of the parties with 1 events",
        "query": "SELECT t2.minister FROM party_events AS t1 JOIN party AS t2 ON t1.party_id = t2.party_id GROUP BY t1.party_id HAVING COUNT ( * ) = 1",
        "schema": "CREATE TABLE party (Party_name TEXT, Party_ID NUMBER, Took_office TEXT, Minister TEXT); CREATE TABLE party_events (Party_ID NUMBER, Event_ID NUMBER, Event_Name TEXT); CREATE TABLE member (Party_ID TEXT, Member_ID NUMBER);"
      },
      {
        "question": "what is the name of the party with region ID 3",
        "query": "SELECT party_name FROM party WHERE region_id = 3",
        "schema": "CREATE TABLE member (Member_ID NUMBER, Party_ID TEXT); CREATE TABLE party (Party_name TEXT, Region_ID NUMBER, Took_office TEXT, Minister TEXT, Party_ID NUMBER); CREATE TABLE party_events (Event_ID NUMBER, Event_Name TEXT, Party_ID NUMBER); CREATE TABLE region (Region_ID NUMBER, Region_name TEXT);"
      }
    ],
    [
      {
        "question": "Hello, can you please provide me with a list of all Event IDs and Event names?",
        "query": "SELECT event_id, event_name FROM party_events",
        "schema": "CREATE TABLE party_events (Event_ID NUMBER, Event_Name TEXT); CREATE TABLE member (Member_ID NUMBER);"
      },
      {
        "question": "Can you please filter this list to include only the rows that have 'Annual Meeting' as the Event Name?",
        "query": "SELECT event_id, event_name FROM party_events WHERE event_name = \"Annaual Meeting\"",
        "schema": "CREATE TABLE member (Member_ID NUMBER); CREATE TABLE party (Party_ID NUMBER); CREATE TABLE party_events (Party_ID NUMBER, Event_Name TEXT, Event_ID NUMBER);"
      },
      {
        "question": "Can you show me which of the Events on this list took place in the United Kingdom?",
        "query": "SELECT t3.event_id, t3.event_name FROM region AS t1 JOIN party AS t2 ON t1.region_id = t2.region_id JOIN party_events AS t3 ON t2.party_id = t3.party_id WHERE t1.region_name = \"United Kingdom\" AND t3.event_name = \"Annaual Meeting\"",
        "schema": "CREATE TABLE party_events (Event_ID NUMBER, Event_Name TEXT, Party_ID NUMBER); CREATE TABLE member (Member_ID NUMBER); CREATE TABLE region (Region_ID NUMBER, Region_name TEXT); CREATE TABLE party (Region_ID NUMBER, Party_name TEXT, Party_ID NUMBER);"
      }
    ],
    [
      {
        "question": "show the party names and the number of events for party id 2",
        "query": "SELECT t2.party_name , COUNT ( * ) FROM party_events AS t1 JOIN party AS t2 ON t1.party_id = t2.party_id WHERE t1.party_id = 2 GROUP BY t1.party_id",
        "schema": "CREATE TABLE party_events (Event_Name TEXT, Event_ID NUMBER, Member_in_charge_ID NUMBER, Party_ID NUMBER); CREATE TABLE member (Party_ID TEXT, Member_ID NUMBER); CREATE TABLE party (Party_name TEXT, Party_ID NUMBER);"
      },
      {
        "question": "find the count of the event name took place for the party id 1",
        "query": "SELECT t1.party_id, COUNT ( t2.party_name ) FROM party_events AS t1 JOIN party AS t2 ON t1.party_id = t2.party_id WHERE t1.party_id = 1",
        "schema": "CREATE TABLE party_events (Event_Name TEXT, Event_ID NUMBER, Party_ID NUMBER, Member_in_charge_ID NUMBER); CREATE TABLE party (Party_name TEXT, Party_ID NUMBER); CREATE TABLE member (Member_ID NUMBER, Party_ID TEXT);"
      },
      {
        "question": "find the took office and region id for the event id 1",
        "query": "SELECT t2.took_office,t2.region_id FROM party_events AS t1 JOIN party AS t2 ON t1.party_id = t2.party_id WHERE t1.party_id = 1",
        "schema": "CREATE TABLE member (Member_ID NUMBER, In_office TEXT, Party_ID TEXT); CREATE TABLE region (Region_name TEXT, Region_ID NUMBER); CREATE TABLE party (Region_ID NUMBER, Party_ID NUMBER, Minister TEXT, Party_name TEXT, Left_office TEXT, Took_office TEXT); CREATE TABLE party_events (Member_in_charge_ID NUMBER, Event_Name TEXT, Party_ID NUMBER, Event_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Hi how are you!?  Can you provide me with a list of all of the different member names?",
        "query": "SELECT DISTINCT member_name FROM member",
        "schema": "CREATE TABLE member (Member_Name TEXT, Member_ID NUMBER);"
      },
      {
        "question": "Excellent!  Thanks for that!  Can you add to this list the event name associated with each member name?",
        "query": "SELECT DISTINCT member_name, t2.event_name FROM member AS t1 JOIN party_events AS t2 ON t1.member_id = t2.member_in_charge_id",
        "schema": "CREATE TABLE party_events (Event_ID NUMBER, Event_Name TEXT, Member_in_charge_ID NUMBER); CREATE TABLE member (Member_ID NUMBER, Member_Name TEXT);"
      },
      {
        "question": "Alright!  Can you please show me a list of all member names who are not associated with any event?",
        "query": "SELECT member_name FROM member EXCEPT SELECT t1.member_name FROM member AS t1 JOIN party_events AS t2 ON t1.member_id = t2.member_in_charge_id",
        "schema": "CREATE TABLE party (Party_ID NUMBER); CREATE TABLE member (Member_Name TEXT, Member_ID NUMBER); CREATE TABLE party_events (Party_ID NUMBER, Event_ID NUMBER, Member_in_charge_ID NUMBER, Event_Name TEXT);"
      }
    ],
    [
      {
        "question": "How many parties are there?",
        "query": "SELECT COUNT ( * ) FROM party",
        "schema": "CREATE TABLE party (Party_name TEXT, Party_ID NUMBER); CREATE TABLE region (Region_ID NUMBER); CREATE TABLE member (Party_ID TEXT, Member_ID NUMBER); CREATE TABLE party_events (Party_ID NUMBER, Event_Name TEXT, Member_in_charge_ID NUMBER, Event_ID NUMBER);"
      },
      {
        "question": "Can you show me the names of the five parties?",
        "query": "SELECT party_name FROM party",
        "schema": "CREATE TABLE member (Party_ID TEXT, Member_ID NUMBER); CREATE TABLE region (Region_ID NUMBER); CREATE TABLE party (Party_ID NUMBER, Party_name TEXT); CREATE TABLE party_events (Party_ID NUMBER, Member_in_charge_ID NUMBER, Event_ID NUMBER, Event_Name TEXT);"
      },
      {
        "question": "Can you tell me how many events are at each party?",
        "query": "SELECT COUNT ( * ) FROM party_events AS t1 JOIN party AS t2 ON t1.party_id = t2.party_id GROUP BY t1.party_id",
        "schema": "CREATE TABLE member (Party_ID TEXT, Member_ID NUMBER); CREATE TABLE party_events (Event_ID NUMBER, Event_Name TEXT, Party_ID NUMBER, Member_in_charge_ID NUMBER); CREATE TABLE party (Party_name TEXT, Party_ID NUMBER); CREATE TABLE region (Region_ID NUMBER);"
      },
      {
        "question": "Yes.",
        "query": "SELECT t2.party_name , COUNT ( * ) FROM party_events AS t1 JOIN party AS t2 ON t1.party_id = t2.party_id GROUP BY t1.party_id",
        "schema": "CREATE TABLE member (Member_ID NUMBER, Party_ID TEXT); CREATE TABLE party_events (Member_in_charge_ID NUMBER, Party_ID NUMBER, Event_ID NUMBER, Event_Name TEXT); CREATE TABLE party (Party_name TEXT, Party_ID NUMBER); CREATE TABLE region (Region_ID NUMBER);"
      }
    ]
  ],
  "insurance_fnol": [
    [
      {
        "question": "How many policies does America Jaskolski have listed?",
        "query": "SELECT COUNT ( * ) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id WHERE customer_name = \"America Jaskolski\"",
        "schema": "CREATE TABLE Customers_Policies (Customer_ID NUMBER, Policy_ID NUMBER); CREATE TABLE Available_Policies (Policy_ID NUMBER); CREATE TABLE Customers (Customer_name TEXT, Customer_ID NUMBER); CREATE TABLE First_Notification_of_Loss (Customer_ID NUMBER, Policy_ID NUMBER); CREATE TABLE Claims (FNOL_ID NUMBER);"
      },
      {
        "question": "What about Mrs. Hanna Willms ? | Did  you  mean the number of policies Mrs. Hanna Willms has listed? | Yes",
        "query": "SELECT COUNT ( * ) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id WHERE customer_name = \"Mrs. Hanna Willms\"",
        "schema": "CREATE TABLE Customers (Customer_ID NUMBER, Customer_name TEXT); CREATE TABLE First_Notification_of_Loss (Policy_ID NUMBER, Customer_ID NUMBER); CREATE TABLE Customers_Policies (Policy_ID NUMBER, Customer_ID NUMBER); CREATE TABLE Claims (FNOL_ID NUMBER); CREATE TABLE Available_Policies (Policy_ID NUMBER);"
      },
      {
        "question": "How many policies are listed total?",
        "query": "SELECT COUNT ( policy_id ) FROM customers_policies",
        "schema": "CREATE TABLE Customers (Customer_ID NUMBER, Customer_name TEXT); CREATE TABLE Claims (FNOL_ID NUMBER); CREATE TABLE Customers_Policies (Policy_ID NUMBER, Customer_ID NUMBER); CREATE TABLE Available_Policies (Policy_ID NUMBER); CREATE TABLE First_Notification_of_Loss (Customer_ID NUMBER, Policy_ID NUMBER);"
      },
      {
        "question": "What is the Customer Name who has the most policies listed ?",
        "query": "SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id GROUP BY t1.customer_name ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Claims (FNOL_ID NUMBER); CREATE TABLE Customers (Customer_name TEXT, Customer_ID NUMBER); CREATE TABLE Available_Policies (Policy_ID NUMBER); CREATE TABLE First_Notification_of_Loss (Policy_ID NUMBER, Customer_ID NUMBER); CREATE TABLE Customers_Policies (Policy_ID NUMBER, Customer_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What are all the policy types of the customer that has the most policies listed?",
        "query": "SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id JOIN available_policies AS t3 ON t2.policy_id = t3.policy_id WHERE t1.customer_name = ( SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id GROUP BY t1.customer_name ORDER BY COUNT ( * ) DESC LIMIT 1 )",
        "schema": "CREATE TABLE First_Notification_of_Loss (Policy_ID NUMBER); CREATE TABLE Customers_Policies (Policy_ID NUMBER, Customer_ID NUMBER); CREATE TABLE Customers (Customer_ID NUMBER, Customer_name TEXT); CREATE TABLE Available_Policies (Policy_ID NUMBER, policy_type_code TEXT, Customer_Phone TEXT);"
      },
      {
        "question": "What is the name of the customer?",
        "query": "SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id GROUP BY t1.customer_name ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Customers_Policies (Policy_ID NUMBER, Customer_ID NUMBER); CREATE TABLE Available_Policies (policy_type_code TEXT, Policy_ID NUMBER, Customer_Phone TEXT); CREATE TABLE First_Notification_of_Loss (Policy_ID NUMBER); CREATE TABLE Customers (Customer_ID NUMBER, Customer_name TEXT);"
      },
      {
        "question": "what is the phone number for life insurance?",
        "query": "SELECT customer_phone FROM available_policies WHERE policy_type_code = \"Life Insurance\"",
        "schema": "CREATE TABLE First_Notification_of_Loss (Policy_ID NUMBER); CREATE TABLE Available_Policies (Customer_Phone TEXT, policy_type_code TEXT, Policy_ID NUMBER); CREATE TABLE Customers_Policies (Customer_ID NUMBER, Policy_ID NUMBER); CREATE TABLE Customers (Customer_name TEXT, Customer_ID NUMBER);"
      }
    ],
    [
      {
        "question": "How many service names in this table?",
        "query": "SELECT COUNT ( service_name ) FROM services",
        "schema": "CREATE TABLE Services (Service_name TEXT, Service_ID NUMBER); CREATE TABLE Customers (Customer_name TEXT, Customer_ID NUMBER);"
      },
      {
        "question": "How many customers in this table?",
        "query": "SELECT COUNT ( * ) FROM customers",
        "schema": "CREATE TABLE Customers (Customer_name TEXT, Customer_ID NUMBER); CREATE TABLE Services (Service_ID NUMBER, Service_name TEXT); CREATE TABLE Customers_Policies (Customer_ID NUMBER);"
      },
      {
        "question": "How many customer names in this table?",
        "query": "SELECT COUNT ( DISTINCT customer_name ) FROM customers",
        "schema": "CREATE TABLE Customers_Policies (Customer_ID NUMBER); CREATE TABLE Services (Service_ID NUMBER, Service_name TEXT); CREATE TABLE Customers (Customer_name TEXT, Customer_ID NUMBER);"
      },
      {
        "question": "How many policy ids are in this table?",
        "query": "SELECT COUNT ( policy_id ) FROM first_notification_of_loss",
        "schema": "CREATE TABLE First_Notification_of_Loss (Policy_ID NUMBER, Customer_ID NUMBER); CREATE TABLE Customers (Customer_ID NUMBER, Customer_name TEXT); CREATE TABLE Customers_Policies (Customer_ID NUMBER, Policy_ID NUMBER); CREATE TABLE Services (Service_name TEXT, Service_ID NUMBER); CREATE TABLE Available_Policies (Policy_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What is the customer ID of America Jaskolski",
        "query": "SELECT customer_id FROM customers WHERE customer_name = 'America Jaskolski'",
        "schema": "CREATE TABLE Customers_Policies (Policy_ID NUMBER, Customer_ID NUMBER); CREATE TABLE Customers (Customer_name TEXT, Customer_ID NUMBER);"
      },
      {
        "question": "How many customer listed ?",
        "query": "SELECT COUNT ( * ) FROM customers AS t1",
        "schema": "CREATE TABLE Customers (Customer_name TEXT, Customer_ID NUMBER); CREATE TABLE Customers_Policies (Customer_ID NUMBER, Policy_ID NUMBER);"
      },
      {
        "question": "What is the date opened for customer ID 214 ?",
        "query": "SELECT date_opened FROM customers_policies WHERE customer_id = 214",
        "schema": "CREATE TABLE Customers_Policies (Date_Closed TIME, Customer_ID NUMBER, Policy_ID NUMBER, Date_Opened TIME); CREATE TABLE Customers (Customer_name TEXT, Customer_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Can you tell me which customers do not have a first notification of loss record? | What attributes of the customers that do not have a first notification of loss record would you like to know? | Can you tell me their names?",
        "query": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id = t2.customer_id",
        "schema": "CREATE TABLE Customers_Policies (Policy_ID NUMBER, Customer_ID NUMBER); CREATE TABLE Customers (Customer_name TEXT, Customer_ID NUMBER); CREATE TABLE First_Notification_of_Loss (Policy_ID NUMBER, Customer_ID NUMBER, FNOL_ID NUMBER);"
      },
      {
        "question": "Can you tell me America Jaskolski's policy id?",
        "query": "SELECT t2.policy_id FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id = t2.customer_id WHERE t1.customer_name = \"America Jaskolski\"",
        "schema": "CREATE TABLE Available_Policies (Policy_ID NUMBER); CREATE TABLE Customers_Policies (Customer_ID NUMBER, Policy_ID NUMBER); CREATE TABLE First_Notification_of_Loss (FNOL_ID NUMBER, Customer_ID NUMBER, Policy_ID NUMBER); CREATE TABLE Customers (Customer_name TEXT, Customer_ID NUMBER);"
      }
    ],
    [
      {
        "question": "How many policies are listed for the customer named \"Dayana Robel\"?",
        "query": "SELECT COUNT ( * ) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id WHERE t1.customer_name = \"Dayana Robel\"",
        "schema": "CREATE TABLE Available_Policies (Policy_ID NUMBER); CREATE TABLE Customers (Customer_ID NUMBER, Customer_name TEXT); CREATE TABLE Customers_Policies (Customer_ID NUMBER, Policy_ID NUMBER); CREATE TABLE First_Notification_of_Loss (Customer_ID NUMBER);"
      },
      {
        "question": "And for America Jaskolski?",
        "query": "SELECT COUNT ( * ) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id WHERE t1.customer_name = \"America Jaskolski\"",
        "schema": "CREATE TABLE Available_Policies (Policy_ID NUMBER); CREATE TABLE Customers_Policies (Customer_ID NUMBER, Policy_ID NUMBER); CREATE TABLE Customers (Customer_ID NUMBER, Customer_name TEXT); CREATE TABLE First_Notification_of_Loss (Customer_ID NUMBER);"
      },
      {
        "question": "How many policies does Ellsworth Paucek have listed?",
        "query": "SELECT COUNT ( * ) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id WHERE t1.customer_name = \"Ellsworth Paucek\"",
        "schema": "CREATE TABLE Customers (Customer_ID NUMBER, Customer_name TEXT); CREATE TABLE Customers_Policies (Policy_ID NUMBER, Customer_ID NUMBER); CREATE TABLE Available_Policies (Policy_ID NUMBER); CREATE TABLE First_Notification_of_Loss (Customer_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What policies does Dayana Robel have? | Do you mean the policy types of the customer named \"Dayana Robel\"? | yes",
        "query": "SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id JOIN available_policies AS t3 ON t2.policy_id = t3.policy_id WHERE t1.customer_name = \"Dayana Robel\"",
        "schema": "CREATE TABLE Customers (Customer_name TEXT, Customer_ID NUMBER); CREATE TABLE Available_Policies (policy_type_code TEXT, Customer_Phone TEXT, Policy_ID NUMBER); CREATE TABLE Customers_Policies (Customer_ID NUMBER, Policy_ID NUMBER);"
      },
      {
        "question": "What is it's phone number?",
        "query": "SELECT DISTINCT customer_phone FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id JOIN available_policies AS t3 ON t2.policy_id = t3.policy_id WHERE t1.customer_name = \"Dayana Robel\"",
        "schema": "CREATE TABLE Customers_Policies (Policy_ID NUMBER, Customer_ID NUMBER); CREATE TABLE Customers (Customer_ID NUMBER, Customer_name TEXT); CREATE TABLE Available_Policies (Customer_Phone TEXT, policy_type_code TEXT, Policy_ID NUMBER);"
      },
      {
        "question": "And on which date was this policy opened?",
        "query": "SELECT t2.date_opened FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id JOIN available_policies AS t3 ON t2.policy_id = t3.policy_id WHERE t1.customer_name = \"Dayana Robel\"",
        "schema": "CREATE TABLE Available_Policies (policy_type_code TEXT, Customer_Phone TEXT, Policy_ID NUMBER); CREATE TABLE Customers (Customer_name TEXT, Customer_ID NUMBER); CREATE TABLE Customers_Policies (Policy_ID NUMBER, Date_Closed TIME, Customer_ID NUMBER, Date_Opened TIME);"
      }
    ],
    [
      {
        "question": "Hello there!  Can you provide me with a list of all of the service names?",
        "query": "SELECT service_name FROM services",
        "schema": "CREATE TABLE Customers_Policies (Customer_ID NUMBER); CREATE TABLE Services (Service_name TEXT, Service_ID NUMBER); CREATE TABLE Customers (Customer_name TEXT, Customer_ID NUMBER);"
      },
      {
        "question": "Thank you very much for that!  Could you please filter this list to show only the Service Names which occur more than once on the First Notification of Loss table?",
        "query": "SELECT t2.service_name FROM first_notification_of_loss AS t1 JOIN services AS t2 ON t1.service_id = t2.service_id GROUP BY t1.service_id HAVING COUNT ( * ) > 1",
        "schema": "CREATE TABLE Services (Service_ID NUMBER, Service_name TEXT); CREATE TABLE Customers (Customer_ID NUMBER, Customer_name TEXT); CREATE TABLE First_Notification_of_Loss (Service_ID NUMBER, Policy_ID NUMBER, Customer_ID NUMBER, FNOL_ID NUMBER); CREATE TABLE Customers_Policies (Customer_ID NUMBER);"
      },
      {
        "question": "My apologies!  I meant to ask for the list to be filtered to show only the Service Names which occur more than 2 times on the First_Notification_of_Loss table?",
        "query": "SELECT t2.service_name FROM first_notification_of_loss AS t1 JOIN services AS t2 ON t1.service_id = t2.service_id GROUP BY t1.service_id HAVING COUNT ( * ) > 2",
        "schema": "CREATE TABLE Customers_Policies (Customer_ID NUMBER); CREATE TABLE Customers (Customer_ID NUMBER, Customer_name TEXT); CREATE TABLE First_Notification_of_Loss (Policy_ID NUMBER, Customer_ID NUMBER, FNOL_ID NUMBER, Service_ID NUMBER); CREATE TABLE Services (Service_ID NUMBER, Service_name TEXT);"
      },
      {
        "question": "Awesome!  Can you show me how many times New policy application has been used?",
        "query": "SELECT t2.service_name, COUNT ( * ) FROM first_notification_of_loss AS t1 JOIN services AS t2 ON t1.service_id = t2.service_id GROUP BY t1.service_id HAVING service_name = \"New policy application\"",
        "schema": "CREATE TABLE Available_Policies (Policy_ID NUMBER); CREATE TABLE Services (Service_ID NUMBER, Service_name TEXT); CREATE TABLE Customers_Policies (Customer_ID NUMBER); CREATE TABLE First_Notification_of_Loss (FNOL_ID NUMBER, Policy_ID NUMBER, Service_ID NUMBER, Customer_ID NUMBER); CREATE TABLE Customers (Customer_name TEXT, Customer_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Hello!  Can you provide me with a list of all of the settlement IDs and the corresponding settlement amounts?",
        "query": "SELECT settlement_id, settlement_amount FROM settlements",
        "schema": "CREATE TABLE Settlements (Settlement_Amount NUMBER, Settlement_ID NUMBER);"
      },
      {
        "question": "Great! Can you calculate for me the sum total of all Settlement Amounts and also the average Settlement Amount for all settlements?",
        "query": "SELECT SUM ( settlement_amount ) , AVG ( settlement_amount ) FROM settlements",
        "schema": "CREATE TABLE Settlements (Settlement_ID NUMBER, Settlement_Amount NUMBER);"
      },
      {
        "question": "Wonderful!  Can you show me what the oldest settlement effective date is?",
        "query": "SELECT effective_date FROM settlements ORDER BY effective_date LIMIT 1",
        "schema": "CREATE TABLE Settlements (Settlement_ID NUMBER, Effective_Date TIME, Settlement_Amount NUMBER);"
      }
    ],
    [
      {
        "question": "Show me all the policy types available? | Do  you mean \tpolicy  type  code? | yes",
        "query": "SELECT DISTINCT policy_type_code FROM available_policies",
        "schema": "CREATE TABLE Available_Policies (Policy_ID NUMBER, Customer_Phone TEXT, policy_type_code TEXT); CREATE TABLE Customers_Policies (Policy_ID NUMBER, Customer_ID NUMBER);"
      },
      {
        "question": "Show me the policy type code with policy id 257?",
        "query": "SELECT policy_type_code FROM available_policies WHERE policy_id = 257",
        "schema": "CREATE TABLE Available_Policies (policy_type_code TEXT, Customer_Phone TEXT, Policy_ID NUMBER); CREATE TABLE Customers_Policies (Policy_ID NUMBER, Customer_ID NUMBER);"
      },
      {
        "question": "Show me the policy id of the policy type code Life insurance?",
        "query": "SELECT policy_id FROM available_policies WHERE policy_type_code = \"Life Insurance\"",
        "schema": "CREATE TABLE Available_Policies (Policy_ID NUMBER, policy_type_code TEXT, Customer_Phone TEXT); CREATE TABLE Customers_Policies (Policy_ID NUMBER, Customer_ID NUMBER);"
      },
      {
        "question": "Show which policy type has the most records in the database?",
        "query": "SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Customers_Policies (Customer_ID NUMBER, Policy_ID NUMBER); CREATE TABLE Available_Policies (Customer_Phone TEXT, Policy_ID NUMBER, policy_type_code TEXT);"
      }
    ]
  ],
  "scientist_1": [
    [
      {
        "question": "Find the number of scientists involved for the projects that require more than 300 hours",
        "query": "SELECT COUNT ( DISTINCT scientist ) FROM projects AS t1 JOIN assignedto AS t2 ON t1.code = t2.project WHERE t1.hours > 300",
        "schema": "CREATE TABLE AssignedTo (Project TEXT, Scientist NUMBER); CREATE TABLE Scientists (SSN NUMBER); CREATE TABLE Projects (Hours NUMBER, Code TEXT, Name TEXT);"
      },
      {
        "question": "Find the number of scientists involved for the projects that require less than 300 hours",
        "query": "SELECT COUNT ( DISTINCT scientist ) FROM projects AS t1 JOIN assignedto AS t2 ON t1.code = t2.project WHERE t1.hours < 300",
        "schema": "CREATE TABLE AssignedTo (Project TEXT, Scientist NUMBER); CREATE TABLE Scientists (SSN NUMBER); CREATE TABLE Projects (Hours NUMBER, Code TEXT, Name TEXT);"
      },
      {
        "question": "and what are the names of the projects requiring more than 300 hours",
        "query": "SELECT name FROM projects WHERE hours > 300",
        "schema": "CREATE TABLE AssignedTo (Project TEXT, Scientist NUMBER); CREATE TABLE Scientists (SSN NUMBER); CREATE TABLE Projects (Hours NUMBER, Name TEXT, Code TEXT);"
      },
      {
        "question": "and what is the scientist id for project Aerodynamics and Bridge Design",
        "query": "SELECT t2.scientist FROM projects AS t1 JOIN assignedto AS t2 ON t1.code = t2.project WHERE t1.name = 'Aerodynamics and Bridge Design'",
        "schema": "CREATE TABLE Scientists (Name TEXT, SSN NUMBER); CREATE TABLE AssignedTo (Project TEXT, Scientist NUMBER); CREATE TABLE Projects (Hours NUMBER, Name TEXT, Code TEXT);"
      }
    ],
    [
      {
        "question": "Fine the name of the project for which a scientist whose name contains \"Smith\" is assigned to.",
        "query": "SELECT t2.name FROM assignedto AS t1 JOIN projects AS t2 ON t1.project = t2.code JOIN scientists AS t3 ON t1.scientist = t3.ssn WHERE t3.name LIKE '%Smith%'",
        "schema": "CREATE TABLE Projects (Name TEXT, Code TEXT); CREATE TABLE AssignedTo (Scientist NUMBER, Project TEXT); CREATE TABLE Scientists (Name TEXT, SSN NUMBER);"
      },
      {
        "question": "What is the first name of \"Smith\"",
        "query": "SELECT name FROM scientists WHERE name LIKE '%Smith%'",
        "schema": "CREATE TABLE AssignedTo (Project TEXT, Scientist NUMBER); CREATE TABLE Projects (Name TEXT, Code TEXT); CREATE TABLE Scientists (SSN NUMBER, Name TEXT);"
      }
    ],
    [
      {
        "question": "How many number if scientist belong to project AeH1",
        "query": "SELECT COUNT ( * ) FROM projects AS t1 JOIN assignedto AS t2 ON t1.code = t2.project WHERE t1.code = \"AeH1\"",
        "schema": "CREATE TABLE Projects (Code TEXT, Name TEXT); CREATE TABLE AssignedTo (Project TEXT, Scientist NUMBER); CREATE TABLE Scientists (SSN NUMBER, Name TEXT);"
      },
      {
        "question": "How about project Ast3, how many scientists?",
        "query": "SELECT COUNT ( * ) FROM projects AS t1 JOIN assignedto AS t2 ON t1.code = t2.project WHERE t1.code = \"Ast3\"",
        "schema": "CREATE TABLE Scientists (SSN NUMBER, Name TEXT); CREATE TABLE AssignedTo (Scientist NUMBER, Project TEXT); CREATE TABLE Projects (Name TEXT, Code TEXT);"
      },
      {
        "question": "How about project AeH3",
        "query": "SELECT COUNT ( * ) FROM projects AS t1 JOIN assignedto AS t2 ON t1.code = t2.project WHERE t1.code = \"AeH3\"",
        "schema": "CREATE TABLE AssignedTo (Project TEXT, Scientist NUMBER); CREATE TABLE Projects (Name TEXT, Code TEXT); CREATE TABLE Scientists (SSN NUMBER, Name TEXT);"
      }
    ],
    [
      {
        "question": "how many projects are presented on the table",
        "query": "SELECT COUNT ( * ) FROM projects",
        "schema": "CREATE TABLE Projects (Code TEXT, Hours NUMBER, Name TEXT); CREATE TABLE AssignedTo (Project TEXT);"
      },
      {
        "question": "list out the projects names",
        "query": "SELECT name FROM projects",
        "schema": "CREATE TABLE AssignedTo (Project TEXT); CREATE TABLE Projects (Name TEXT, Hours NUMBER, Code TEXT);"
      },
      {
        "question": "which project are least hours on the table",
        "query": "SELECT name FROM projects WHERE hours = ( SELECT MIN ( hours ) FROM projects )",
        "schema": "CREATE TABLE Projects (Name TEXT, Code TEXT, Hours NUMBER); CREATE TABLE AssignedTo (Project TEXT);"
      }
    ],
    [
      {
        "question": "What are all of the scientists' names please?",
        "query": "SELECT name FROM scientists",
        "schema": "CREATE TABLE AssignedTo (Scientist NUMBER); CREATE TABLE Scientists (Name TEXT, SSN NUMBER);"
      },
      {
        "question": "What are the project names of all of them?",
        "query": "SELECT t1.name , t3.name FROM scientists AS t1 JOIN assignedto AS t2 ON t1.ssn = t2.scientist JOIN projects AS t3 ON t2.project = t3.code",
        "schema": "CREATE TABLE Projects (Name TEXT, Code TEXT); CREATE TABLE AssignedTo (Project TEXT, Scientist NUMBER); CREATE TABLE Scientists (Name TEXT, SSN NUMBER);"
      },
      {
        "question": "Can you show the hours they each worked too, please?",
        "query": "SELECT t1.name , t3.name , t3.hours FROM scientists AS t1 JOIN assignedto AS t2 ON t1.ssn = t2.scientist JOIN projects AS t3 ON t2.project = t3.code ORDER BY t3.name , t1.name",
        "schema": "CREATE TABLE Projects (Code TEXT, Name TEXT, Hours NUMBER); CREATE TABLE AssignedTo (Project TEXT, Scientist NUMBER); CREATE TABLE Scientists (Name TEXT, SSN NUMBER);"
      },
      {
        "question": "Can you please order them in alphabetical order of project, and then of scientist name?",
        "query": "SELECT t1.name , t3.name , t3.hours FROM scientists AS t1 JOIN assignedto AS t2 ON t1.ssn = t2.scientist JOIN projects AS t3 ON t2.project = t3.code ORDER BY t3.name , t1.name",
        "schema": "CREATE TABLE Scientists (Name TEXT, SSN NUMBER); CREATE TABLE Projects (Name TEXT, Hours NUMBER, Code TEXT); CREATE TABLE AssignedTo (Scientist NUMBER, Project TEXT);"
      },
      {
        "question": "What are the average hours worked by all scientists, please? | Do you mean average hours on each project among all scientists? | Yes, please.",
        "query": "SELECT AVG ( hours ) FROM projects",
        "schema": "CREATE TABLE Scientists (SSN NUMBER, Name TEXT); CREATE TABLE AssignedTo (Project TEXT, Scientist NUMBER); CREATE TABLE Projects (Hours NUMBER, Code TEXT, Name TEXT);"
      }
    ],
    [
      {
        "question": "state the projects with least hours? | Do you need the project code or name? | name",
        "query": "SELECT name FROM projects ORDER BY hours LIMIT 1",
        "schema": "CREATE TABLE Projects (Hours NUMBER, Name TEXT, Code TEXT);"
      },
      {
        "question": "List the name of all projects that are operated longer than the average working hours of all projects",
        "query": "SELECT name FROM projects WHERE hours > ( SELECT AVG ( hours ) FROM projects )",
        "schema": "CREATE TABLE Projects (Code TEXT, Hours NUMBER, Name TEXT);"
      },
      {
        "question": "State the total number of projects of the list?",
        "query": "SELECT COUNT ( * ) FROM projects",
        "schema": "CREATE TABLE Projects (Code TEXT, Name TEXT, Hours NUMBER);"
      },
      {
        "question": "Which project has the highest hours on the list?",
        "query": "SELECT name FROM projects ORDER BY hours DESC LIMIT 1",
        "schema": "CREATE TABLE Projects (Name TEXT, Hours NUMBER, Code TEXT);"
      }
    ],
    [
      {
        "question": "What is the name of the project with the highest hours?",
        "query": "SELECT name FROM projects ORDER BY hours DESC LIMIT 1",
        "schema": "CREATE TABLE Projects (Hours NUMBER, Name TEXT, Code TEXT);"
      },
      {
        "question": "What is the code of the project A Magnetic Primer Designer?",
        "query": "SELECT code FROM projects WHERE name = 'A Magnetic Primer Designer'",
        "schema": "CREATE TABLE Projects (Hours NUMBER, Name TEXT, Code TEXT);"
      },
      {
        "question": "Who are the scientists who are not assigned to the project Bte2?",
        "query": "SELECT scientist FROM assignedto WHERE project ! = 'Bte2'",
        "schema": "CREATE TABLE Projects (Code TEXT, Name TEXT, Hours NUMBER); CREATE TABLE AssignedTo (Project TEXT, Scientist NUMBER); CREATE TABLE Scientists (Name TEXT, SSN NUMBER);"
      }
    ],
    [
      {
        "question": "What about the names of scientists that worked on the project named 'A Puzzling Parallax'?",
        "query": "SELECT t3.name FROM assignedto AS t1 JOIN projects AS t2 ON t1.project = t2.code JOIN scientists AS t3 ON t1.scientist = t3.ssn WHERE t2.name = 'A Puzzling Parallax'",
        "schema": "CREATE TABLE Projects (Name TEXT, Code TEXT); CREATE TABLE AssignedTo (Scientist NUMBER, Project TEXT); CREATE TABLE Scientists (Name TEXT, SSN NUMBER);"
      },
      {
        "question": "Could you give the list of all projects along with the names of scientists that worked on them? | Do you mean a list of the names of all the projects and the names of scientists that worked on them? | Yes Please!",
        "query": "SELECT t3.name,t2.name FROM assignedto AS t1 JOIN projects AS t2 ON t1.project = t2.code JOIN scientists AS t3 ON t1.scientist = t3.ssn",
        "schema": "CREATE TABLE Projects (Name TEXT, Code TEXT); CREATE TABLE AssignedTo (Project TEXT, Scientist NUMBER); CREATE TABLE Scientists (Name TEXT, SSN NUMBER);"
      }
    ],
    [
      {
        "question": "List all project code name and hours worked by Scientists ssn | Do you mean list their ssn's? | yes, list the project codes, names, and hours worked by scientists by ssn",
        "query": "SELECT t3.name , t3.code , t3.hours FROM scientists AS t1 JOIN assignedto AS t2 ON t1.ssn = t2.scientist JOIN projects AS t3 ON t2.project = t3.code ORDER BY t1.ssn",
        "schema": "CREATE TABLE AssignedTo (Project TEXT, Scientist NUMBER); CREATE TABLE Scientists (SSN NUMBER, Name TEXT); CREATE TABLE Projects (Name TEXT, Code TEXT, Hours NUMBER);"
      },
      {
        "question": "list scientists names by ssn",
        "query": "SELECT name FROM scientists ORDER BY ssn",
        "schema": "CREATE TABLE Projects (Hours NUMBER, Code TEXT, Name TEXT); CREATE TABLE Scientists (Name TEXT, SSN NUMBER); CREATE TABLE AssignedTo (Project TEXT, Scientist NUMBER);"
      },
      {
        "question": "list Project codes, names, and hours worked by scientist by ssn and name",
        "query": "SELECT t3.code , t3.name , t3.hours FROM scientists AS t1 JOIN assignedto AS t2 ON t1.ssn = t2.scientist JOIN projects AS t3 ON t2.project = t3.code ORDER BY t1.ssn",
        "schema": "CREATE TABLE Projects (Name TEXT, Hours NUMBER, Code TEXT); CREATE TABLE AssignedTo (Scientist NUMBER, Project TEXT); CREATE TABLE Scientists (SSN NUMBER, Name TEXT);"
      },
      {
        "question": "list results by scientists name",
        "query": "SELECT t3.code , t3.name , t3.hours FROM scientists AS t1 JOIN assignedto AS t2 ON t1.ssn = t2.scientist JOIN projects AS t3 ON t2.project = t3.code ORDER BY t1.name",
        "schema": "CREATE TABLE Scientists (SSN NUMBER, Name TEXT); CREATE TABLE Projects (Name TEXT, Code TEXT, Hours NUMBER); CREATE TABLE AssignedTo (Scientist NUMBER, Project TEXT);"
      },
      {
        "question": "list results by project by scientists names | Do you mean list the project names by scientists names? | yes",
        "query": "SELECT t3.name FROM scientists AS t1 JOIN assignedto AS t2 ON t1.ssn = t2.scientist JOIN projects AS t3 ON t2.project = t3.code ORDER BY t1.name",
        "schema": "CREATE TABLE Projects (Hours NUMBER, Code TEXT, Name TEXT); CREATE TABLE AssignedTo (Scientist NUMBER, Project TEXT); CREATE TABLE Scientists (SSN NUMBER, Name TEXT);"
      },
      {
        "question": "list project names in ascending order",
        "query": "SELECT t3.name FROM scientists AS t1 JOIN assignedto AS t2 ON t1.ssn = t2.scientist JOIN projects AS t3 ON t2.project = t3.code ORDER BY t1.name ASC",
        "schema": "CREATE TABLE Projects (Name TEXT, Hours NUMBER, Code TEXT); CREATE TABLE Scientists (SSN NUMBER, Name TEXT); CREATE TABLE AssignedTo (Scientist NUMBER, Project TEXT);"
      }
    ],
    [
      {
        "question": "What are assigned project names?",
        "query": "SELECT t1.name FROM projects AS t1 JOIN assignedto AS t2 ON t1.code = t2.project",
        "schema": "CREATE TABLE Projects (Code TEXT, Name TEXT); CREATE TABLE AssignedTo (Scientist NUMBER, Project TEXT);"
      },
      {
        "question": "How about names of not assigned projects?",
        "query": "SELECT name FROM projects WHERE code NOT IN ( SELECT project FROM assignedto )",
        "schema": "CREATE TABLE Projects (Code TEXT, Name TEXT); CREATE TABLE AssignedTo (Scientist NUMBER, Project TEXT);"
      },
      {
        "question": "what is the name of not assigned project with the least hours?",
        "query": "SELECT name FROM projects WHERE code NOT IN ( SELECT project FROM assignedto ) ORDER BY hours LIMIT 1",
        "schema": "CREATE TABLE Projects (Hours NUMBER, Code TEXT, Name TEXT); CREATE TABLE AssignedTo (Scientist NUMBER, Project TEXT);"
      }
    ],
    [
      {
        "question": "What project has the longest time? List the name.",
        "query": "SELECT name FROM projects ORDER BY hours DESC LIMIT 1",
        "schema": "CREATE TABLE Projects (Hours NUMBER, Name TEXT, Code TEXT);"
      },
      {
        "question": "What are the names of the projects?",
        "query": "SELECT name FROM projects",
        "schema": "CREATE TABLE Projects (Code TEXT, Name TEXT, Hours NUMBER);"
      },
      {
        "question": "How many hours does A Magnetic Primer Designer have?",
        "query": "SELECT hours FROM projects WHERE name = 'A Magnetic Primer Designer'",
        "schema": "CREATE TABLE Projects (Code TEXT, Hours NUMBER, Name TEXT);"
      },
      {
        "question": "What is the code for A Magnetic Primer Designer?",
        "query": "SELECT code FROM projects WHERE name = 'A Magnetic Primer Designer'",
        "schema": "CREATE TABLE Projects (Hours NUMBER, Code TEXT, Name TEXT);"
      },
      {
        "question": "What Project has the Shortest time?",
        "query": "SELECT name FROM projects ORDER BY hours LIMIT 1",
        "schema": "CREATE TABLE Projects (Code TEXT, Hours NUMBER, Name TEXT);"
      }
    ]
  ],
  "storm_record": [
    [
      {
        "question": "What are the names of storms which don't have affected region in record?",
        "query": "SELECT name FROM storm WHERE storm_id NOT IN ( SELECT storm_id FROM affected_region )",
        "schema": "CREATE TABLE storm (Storm_ID NUMBER, Name TEXT); CREATE TABLE affected_region (Storm_ID NUMBER, Region_id NUMBER);"
      },
      {
        "question": "What is the number of city affected for storm with name two?",
        "query": "SELECT number_city_affected FROM affected_region WHERE storm_id = ( SELECT storm_id FROM storm WHERE name = 'Two' )",
        "schema": "CREATE TABLE storm (Storm_ID NUMBER, Name TEXT); CREATE TABLE affected_region (Storm_ID NUMBER, Number_city_affected NUMBER, Region_id NUMBER);"
      },
      {
        "question": "What is storm name two storm ID?",
        "query": "SELECT storm_id FROM storm WHERE name = 'Two'",
        "schema": "CREATE TABLE storm (Name TEXT, Storm_ID NUMBER); CREATE TABLE affected_region (Number_city_affected NUMBER, Storm_ID NUMBER, Region_id NUMBER);"
      }
    ],
    [
      {
        "question": "Can you please show me the average damage for all storms?",
        "query": "SELECT AVG ( damage_millions_usd ) FROM storm",
        "schema": "CREATE TABLE storm (Storm_ID NUMBER, Damage_millions_USD NUMBER, Name TEXT);"
      },
      {
        "question": "Can you please show me the maximum damage for all storms?",
        "query": "SELECT MAX ( damage_millions_usd ) FROM storm",
        "schema": "CREATE TABLE storm (Damage_millions_USD NUMBER, Name TEXT, Storm_ID NUMBER);"
      },
      {
        "question": "Can you please show me the minimum damage for all storms?",
        "query": "SELECT MIN ( damage_millions_usd ) FROM storm",
        "schema": "CREATE TABLE storm (Storm_ID NUMBER, Damage_millions_USD NUMBER, Name TEXT);"
      },
      {
        "question": "Can you please show me the minimum damage for all storms with maximum speed higher than 1000?",
        "query": "SELECT MIN ( damage_millions_usd ) FROM storm WHERE max_speed > 1000",
        "schema": "CREATE TABLE storm (Name TEXT, Max_speed NUMBER, Damage_millions_USD NUMBER, Storm_ID NUMBER);"
      },
      {
        "question": "Can you please show me the maximum damage for all storms with maximum speed higher than 1000?",
        "query": "SELECT MAX ( damage_millions_usd ) FROM storm WHERE max_speed > 1000",
        "schema": "CREATE TABLE storm (Storm_ID NUMBER, Damage_millions_USD NUMBER, Name TEXT, Max_speed NUMBER);"
      }
    ],
    [
      {
        "question": "how many region are presented on the table",
        "query": "SELECT COUNT ( * ) FROM region",
        "schema": "CREATE TABLE region (Region_name TEXT, Region_id NUMBER, Region_code TEXT); CREATE TABLE affected_region (Region_id NUMBER, Number_city_affected NUMBER);"
      },
      {
        "question": "list out the region name",
        "query": "SELECT region_name FROM region",
        "schema": "CREATE TABLE region (Region_name TEXT, Region_id NUMBER, Region_code TEXT); CREATE TABLE affected_region (Region_id NUMBER, Number_city_affected NUMBER);"
      },
      {
        "question": "what is the region code of Afghanistan",
        "query": "SELECT region_code FROM region WHERE region_name = \"Afghanistan\"",
        "schema": "CREATE TABLE affected_region (Number_city_affected NUMBER, Region_id NUMBER); CREATE TABLE region (Region_code TEXT, Region_name TEXT, Region_id NUMBER);"
      },
      {
        "question": "what is the highest number city affected",
        "query": "SELECT t1.region_name FROM region AS t1 JOIN affected_region AS t2 ON t1.region_id = t2.region_id GROUP BY t1.region_id ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE affected_region (Number_city_affected NUMBER, Region_id NUMBER); CREATE TABLE region (Region_name TEXT, Region_code TEXT, Region_id NUMBER);"
      }
    ],
    [
      {
        "question": "What is the region id for region name Denmark?",
        "query": "SELECT region_id FROM region WHERE region_name = 'Denmark'",
        "schema": "CREATE TABLE region (Region_code TEXT, Region_id NUMBER, Region_name TEXT); CREATE TABLE affected_region (Region_id NUMBER);"
      },
      {
        "question": "Show me all storm ids affecting a region id of 12.",
        "query": "SELECT t3.storm_id FROM affected_region AS t1 JOIN region AS t2 ON t1.region_id = t2.region_id JOIN storm AS t3 ON t1.storm_id = t3.storm_id WHERE t2.region_name = 'Denmark'",
        "schema": "CREATE TABLE affected_region (Storm_ID NUMBER, Region_id NUMBER); CREATE TABLE region (Region_id NUMBER, Region_name TEXT, Region_code TEXT); CREATE TABLE storm (Name TEXT, Storm_ID NUMBER);"
      },
      {
        "question": "What is the name of this storm?",
        "query": "SELECT t3.name FROM affected_region AS t1 JOIN region AS t2 ON t1.region_id = t2.region_id JOIN storm AS t3 ON t1.storm_id = t3.storm_id WHERE t2.region_name = 'Denmark'",
        "schema": "CREATE TABLE region (Region_name TEXT, Region_code TEXT, Region_id NUMBER); CREATE TABLE storm (Name TEXT, Storm_ID NUMBER); CREATE TABLE affected_region (Storm_ID NUMBER, Region_id NUMBER);"
      }
    ],
    [
      {
        "question": "What is the storm name of the storm that affected the greatest number of regions?",
        "query": "SELECT t1.name , t1.max_speed FROM storm AS t1 JOIN affected_region AS t2 ON t1.storm_id = t2.storm_id GROUP BY t1.storm_id ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE storm (Storm_ID NUMBER, Max_speed NUMBER, Name TEXT); CREATE TABLE affected_region (Storm_ID NUMBER, Number_city_affected NUMBER, Region_id NUMBER);"
      },
      {
        "question": "What is the name of the storm with the lowest speed?",
        "query": "SELECT t1.name FROM storm AS t1 JOIN affected_region AS t2 ON t1.storm_id = t2.storm_id ORDER BY max_speed LIMIT 1",
        "schema": "CREATE TABLE storm (Max_speed NUMBER, Storm_ID NUMBER, Name TEXT); CREATE TABLE affected_region (Region_id NUMBER, Storm_ID NUMBER, Number_city_affected NUMBER);"
      },
      {
        "question": "What is the average speed of all the storms?",
        "query": "SELECT AVG ( max_speed ) FROM storm",
        "schema": "CREATE TABLE storm (Name TEXT, Max_speed NUMBER, Storm_ID NUMBER, Damage_millions_USD NUMBER); CREATE TABLE affected_region (Region_id NUMBER, Number_city_affected NUMBER, Storm_ID NUMBER);"
      },
      {
        "question": "What's the average damage in millions usd for all storms?",
        "query": "SELECT AVG ( damage_millions_usd ) FROM storm AS t1 JOIN affected_region AS t2 ON t1.storm_id = t2.storm_id",
        "schema": "CREATE TABLE storm (Name TEXT, Storm_ID NUMBER, Max_speed NUMBER, Damage_millions_USD NUMBER); CREATE TABLE affected_region (Region_id NUMBER, Number_city_affected NUMBER, Storm_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Hi can you tell me the name of the regions not affected by storms?",
        "query": "SELECT region_name FROM region WHERE region_id NOT IN ( SELECT region_id FROM affected_region )",
        "schema": "CREATE TABLE region (Region_code TEXT, Region_name TEXT, Region_id NUMBER); CREATE TABLE storm (Storm_ID NUMBER, Name TEXT); CREATE TABLE affected_region (Number_city_affected NUMBER, Region_id NUMBER, Storm_ID NUMBER);"
      },
      {
        "question": "Can you tell me the names of the cities affected by storm?",
        "query": "SELECT region_name FROM region WHERE region_id IN ( SELECT region_id FROM affected_region )",
        "schema": "CREATE TABLE storm (Storm_ID NUMBER, Name TEXT); CREATE TABLE region (Region_code TEXT, Region_name TEXT, Region_id NUMBER); CREATE TABLE affected_region (Number_city_affected NUMBER, Region_id NUMBER, Storm_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What was the name of the storm that affected Afghanistan and Albania between May 19 and May 25?",
        "query": "SELECT t3.name FROM affected_region AS t1 JOIN region AS t2 ON t1.region_id = t2.region_id JOIN storm AS t3 ON t1.storm_id = t3.storm_id WHERE t2.region_name = 'Afghanistan' AND t3.dates_active = \"May19\u2013May25\" INTERSECT SELECT t3.name FROM affected_region AS t1 JOIN region AS t2 ON t1.region_id = t2.region_id JOIN storm AS t3 ON t1.storm_id = t3.storm_id WHERE t2.region_name = 'Albania' AND t3.dates_active = \"May19\u2013May25\"",
        "schema": "CREATE TABLE region (Region_code TEXT, Region_id NUMBER, Region_name TEXT); CREATE TABLE affected_region (Storm_ID NUMBER, Number_city_affected NUMBER, Region_id NUMBER); CREATE TABLE storm (Storm_ID NUMBER, Name TEXT, Dates_active TEXT);"
      },
      {
        "question": "What storm affected city 10.0 and 15.0? | do you mean the name of storm that affected city 10 and 15? | Yes",
        "query": "SELECT t1.name FROM storm AS t1 JOIN affected_region AS t2 ON t1.storm_id = t2.storm_id WHERE t2.number_city_affected = 10.0 OR t2.number_city_affected = 15.0",
        "schema": "CREATE TABLE affected_region (Number_city_affected NUMBER, Storm_ID NUMBER, Region_id NUMBER); CREATE TABLE region (Region_code TEXT, Region_name TEXT, Region_id NUMBER); CREATE TABLE storm (Storm_ID NUMBER, Dates_active TEXT, Name TEXT);"
      }
    ],
    [
      {
        "question": "what is the average of high speed? | Did you mean to ask for the average max speed of the storms? | yes",
        "query": "SELECT AVG ( max_speed ) FROM storm",
        "schema": "CREATE TABLE storm (Max_speed NUMBER, Storm_ID NUMBER, Damage_millions_USD NUMBER, Name TEXT);"
      },
      {
        "question": "what is the highest speed of the storms?",
        "query": "SELECT MAX ( max_speed ) FROM storm",
        "schema": "CREATE TABLE storm (Max_speed NUMBER, Damage_millions_USD NUMBER, Storm_ID NUMBER, Name TEXT);"
      },
      {
        "question": "what is the total number of deaths?",
        "query": "SELECT SUM ( number_deaths ) FROM storm",
        "schema": "CREATE TABLE storm (Storm_ID NUMBER, Number_Deaths NUMBER, Name TEXT, Damage_millions_USD NUMBER, Max_speed NUMBER);"
      }
    ],
    [
      {
        "question": "how many cities were affected?",
        "query": "SELECT SUM ( number_city_affected ) FROM affected_region",
        "schema": "CREATE TABLE storm (Storm_ID NUMBER); CREATE TABLE affected_region (Number_city_affected NUMBER, Storm_ID NUMBER, Region_id NUMBER);"
      },
      {
        "question": "what are the name for the regions?",
        "query": "SELECT region_name FROM region",
        "schema": "CREATE TABLE region (Region_id NUMBER, Region_code TEXT, Region_name TEXT); CREATE TABLE storm (Storm_ID NUMBER); CREATE TABLE affected_region (Storm_ID NUMBER, Number_city_affected NUMBER, Region_id NUMBER);"
      },
      {
        "question": "how many number of storms for each region?",
        "query": "SELECT t1.region_name , COUNT ( * ) FROM region AS t1 JOIN affected_region AS t2 ON t1.region_id = t2.region_id GROUP BY t1.region_id",
        "schema": "CREATE TABLE region (Region_name TEXT, Region_id NUMBER, Region_code TEXT); CREATE TABLE storm (Storm_ID NUMBER); CREATE TABLE affected_region (Storm_ID NUMBER, Number_city_affected NUMBER, Region_id NUMBER);"
      }
    ],
    [
      {
        "question": "What are the names of all the storms that affected at least two regions?",
        "query": "SELECT t1.name FROM storm AS t1 JOIN affected_region AS t2 ON t1.storm_id = t2.storm_id GROUP BY t1.storm_id HAVING COUNT ( * ) > = 2",
        "schema": "CREATE TABLE storm (Storm_ID NUMBER, Name TEXT); CREATE TABLE affected_region (Region_id NUMBER, Storm_ID NUMBER, Number_city_affected NUMBER); CREATE TABLE region (Region_id NUMBER, Region_name TEXT);"
      },
      {
        "question": "What are the names of all the storms that affected at least 10 cities?",
        "query": "SELECT t1.name FROM storm AS t1 JOIN affected_region AS t2 ON t1.storm_id = t2.storm_id GROUP BY t1.storm_id HAVING SUM ( t2.number_city_affected ) > = 10",
        "schema": "CREATE TABLE region (Region_id NUMBER, Region_name TEXT); CREATE TABLE storm (Storm_ID NUMBER, Name TEXT); CREATE TABLE affected_region (Number_city_affected NUMBER, Storm_ID NUMBER, Region_id NUMBER);"
      },
      {
        "question": "What are the names of all the storms that affected at least 10 cities and two regions?",
        "query": "SELECT t1.name FROM storm AS t1 JOIN affected_region AS t2 ON t1.storm_id = t2.storm_id GROUP BY t1.storm_id HAVING COUNT ( * ) > = 2 INTERSECT SELECT t1.name FROM storm AS t1 JOIN affected_region AS t2 ON t1.storm_id = t2.storm_id GROUP BY t1.storm_id HAVING SUM ( t2.number_city_affected ) > = 10",
        "schema": "CREATE TABLE storm (Name TEXT, Storm_ID NUMBER); CREATE TABLE affected_region (Storm_ID NUMBER, Region_id NUMBER, Number_city_affected NUMBER); CREATE TABLE region (Region_name TEXT, Region_id NUMBER);"
      }
    ],
    [
      {
        "question": "how many storms caused damage to any regions?",
        "query": "SELECT COUNT ( * ) FROM storm",
        "schema": "CREATE TABLE region (Region_id NUMBER); CREATE TABLE storm (Storm_ID NUMBER, Name TEXT, Damage_millions_USD NUMBER); CREATE TABLE affected_region (Storm_ID NUMBER, Region_id NUMBER, Number_city_affected NUMBER);"
      },
      {
        "question": "how many of the storms caused damage to at least two regions?",
        "query": "SELECT COUNT ( * ) FROM ( SELECT t1.name FROM storm AS t1 JOIN affected_region AS t2 ON t1.storm_id = t2.storm_id GROUP BY t1.storm_id HAVING COUNT ( * ) > = 2 )",
        "schema": "CREATE TABLE storm (Damage_millions_USD NUMBER, Name TEXT, Storm_ID NUMBER); CREATE TABLE region (Region_id NUMBER); CREATE TABLE affected_region (Number_city_affected NUMBER, Region_id NUMBER, Storm_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What are the names of all storms?",
        "query": "SELECT name FROM storm",
        "schema": "CREATE TABLE storm (Name TEXT, Storm_ID NUMBER);"
      },
      {
        "question": "How many regions were affected by the first storm?",
        "query": "SELECT t1.name,COUNT ( * ) FROM storm AS t1 JOIN affected_region AS t2 ON t1.storm_id = t2.storm_id GROUP BY t1.storm_id LIMIT 1",
        "schema": "CREATE TABLE region (Region_name TEXT, Region_id NUMBER); CREATE TABLE storm (Storm_ID NUMBER, Name TEXT); CREATE TABLE affected_region (Storm_ID NUMBER, Region_id NUMBER, Number_city_affected NUMBER);"
      },
      {
        "question": "What is the number of affected regions for each storm?",
        "query": "SELECT t1.name , COUNT ( * ) FROM storm AS t1 JOIN affected_region AS t2 ON t1.storm_id = t2.storm_id GROUP BY t1.storm_id",
        "schema": "CREATE TABLE affected_region (Number_city_affected NUMBER, Storm_ID NUMBER, Region_id NUMBER); CREATE TABLE region (Region_id NUMBER, Region_name TEXT); CREATE TABLE storm (Name TEXT, Storm_ID NUMBER);"
      }
    ]
  ],
  "farm": [
    [
      {
        "question": "What is the population of city Id 2?",
        "query": "SELECT population FROM city WHERE city_id = 2",
        "schema": "CREATE TABLE city (City_ID NUMBER, Population NUMBER, Area_km_2 NUMBER, Official_Name TEXT); CREATE TABLE farm_competition (Host_city_ID NUMBER);"
      },
      {
        "question": "What is the census ranking of Perth-Andover?",
        "query": "SELECT census_ranking FROM city WHERE official_name = \"Perth-Andover\"",
        "schema": "CREATE TABLE city (Official_Name TEXT, Status TEXT, Census_Ranking TEXT, City_ID NUMBER, Population NUMBER, Area_km_2 NUMBER); CREATE TABLE farm_competition (Host_city_ID NUMBER);"
      },
      {
        "question": "What is the name of hosts of Carnival M is back?",
        "query": "SELECT hosts FROM farm_competition WHERE theme like \"%Carnival M is back%\"",
        "schema": "CREATE TABLE farm_competition (Competition_ID NUMBER, Theme TEXT, Hosts TEXT, Host_city_ID NUMBER); CREATE TABLE city (Status TEXT, Population NUMBER, Area_km_2 NUMBER, Official_Name TEXT, City_ID NUMBER, Census_Ranking TEXT);"
      }
    ],
    [
      {
        "question": "Which cities have populations larger than 1000? List their ids.",
        "query": "SELECT city_id FROM city WHERE population > 1000",
        "schema": "CREATE TABLE city (City_ID NUMBER, Official_Name TEXT, Population NUMBER); CREATE TABLE farm_competition (Host_city_ID NUMBER);"
      },
      {
        "question": "What is the theme for these cities? | The themes of competitions with host cities having populations larger than 1000 are Carnival M is back!, Codehunters, and MTV Asia Aid | Which cities have populations less than 1000? List their ids.",
        "query": "SELECT DISTINCT t1.city_id FROM city AS t1 JOIN farm_competition AS t2 ON t1.city_id = t2.host_city_id WHERE t1.population < 1000",
        "schema": "CREATE TABLE competition_record (Competition_ID NUMBER, Farm_ID NUMBER); CREATE TABLE city (Official_Name TEXT, Population NUMBER, City_ID NUMBER); CREATE TABLE farm_competition (Theme TEXT, Competition_ID NUMBER, Host_city_ID NUMBER);"
      }
    ],
    [
      {
        "question": "what is the status of Perth-Andover | The status of the city with official name Perth-Andover is Village. | what is the name of the city that is top in area km 2.",
        "query": "SELECT official_name FROM city ORDER BY area_km_2 DESC LIMIT 1",
        "schema": "CREATE TABLE city (Area_km_2 NUMBER, City_ID NUMBER, Status TEXT, Official_Name TEXT);"
      }
    ],
    [
      {
        "question": "Out of all the farms, what are the maximum and minimum numbers of cows?",
        "query": "SELECT MAX ( cows ) , MIN ( cows ) FROM farm",
        "schema": "CREATE TABLE farm (Farm_ID NUMBER, Total_Cattle NUMBER, Cows NUMBER, Bulls NUMBER);"
      },
      {
        "question": "And for horses? | Do you mean total horses or working horses? | total horses",
        "query": "SELECT MAX ( total_horses ) , MIN ( total_horses ) FROM farm",
        "schema": "CREATE TABLE farm (Cows NUMBER, Total_Horses NUMBER, Farm_ID NUMBER, Bulls NUMBER, Total_Cattle NUMBER, Working_Horses NUMBER);"
      },
      {
        "question": "How many more oxen are there than cattle on farm id 1",
        "query": "SELECT oxen, total_cattle FROM farm WHERE farm_id = 1",
        "schema": "CREATE TABLE farm (Working_Horses NUMBER, Total_Horses NUMBER, Oxen NUMBER, Farm_ID NUMBER, Cows NUMBER, Total_Cattle NUMBER, Bulls NUMBER);"
      }
    ],
    [
      {
        "question": "Show me the official names of the cities that have hosted more than one competition?",
        "query": "SELECT t1.official_name FROM city AS t1 JOIN farm_competition AS t2 ON t1.city_id = t2.host_city_id GROUP BY t2.host_city_id HAVING COUNT ( * ) > 1",
        "schema": "CREATE TABLE city (City_ID NUMBER, Official_Name TEXT, Status TEXT); CREATE TABLE farm_competition (Host_city_ID NUMBER, Competition_ID NUMBER, Hosts TEXT);"
      },
      {
        "question": "Show me the official names of the cities that have hosted only one competition?",
        "query": "SELECT t1.official_name FROM city AS t1 JOIN farm_competition AS t2 ON t1.city_id = t2.host_city_id GROUP BY t2.host_city_id HAVING COUNT ( * ) = 1",
        "schema": "CREATE TABLE farm_competition (Hosts TEXT, Host_city_ID NUMBER, Competition_ID NUMBER); CREATE TABLE city (Official_Name TEXT, Status TEXT, City_ID NUMBER); CREATE TABLE farm (Farm_ID NUMBER);"
      },
      {
        "question": "What were the themes of each of those competitions?",
        "query": "SELECT t1.official_name, t2.theme FROM city AS t1 JOIN farm_competition AS t2 ON t1.city_id = t2.host_city_id GROUP BY t2.host_city_id HAVING COUNT ( * ) = 1",
        "schema": "CREATE TABLE farm (Farm_ID NUMBER); CREATE TABLE farm_competition (Theme TEXT, Host_city_ID NUMBER, Competition_ID NUMBER, Hosts TEXT); CREATE TABLE city (Status TEXT, Official_Name TEXT, City_ID NUMBER);"
      },
      {
        "question": "What is the census rating of the city with the official name \"Plaster Rock\"?",
        "query": "SELECT t1.census_ranking FROM city AS t1 JOIN farm_competition AS t2 ON t1.city_id = t2.host_city_id WHERE t1.official_name = \"Plaster Rock\"",
        "schema": "CREATE TABLE farm (Farm_ID NUMBER); CREATE TABLE city (City_ID NUMBER, Official_Name TEXT, Status TEXT, Census_Ranking TEXT, Population NUMBER); CREATE TABLE farm_competition (Hosts TEXT, Host_city_ID NUMBER, Theme TEXT, Competition_ID NUMBER);"
      },
      {
        "question": "What is the census rating of the city that hosted the competition with the theme \"Carnival M is back!\"?",
        "query": "SELECT t1.census_ranking FROM city AS t1 JOIN farm_competition AS t2 ON t1.city_id = t2.host_city_id WHERE t2.theme = \"Carnival M is back!\"",
        "schema": "CREATE TABLE city (Status TEXT, Official_Name TEXT, City_ID NUMBER, Population NUMBER, Census_Ranking TEXT); CREATE TABLE farm (Farm_ID NUMBER); CREATE TABLE farm_competition (Competition_ID NUMBER, Host_city_ID NUMBER, Hosts TEXT, Theme TEXT);"
      }
    ],
    [
      {
        "question": "Sure!  On my end I'm seeing that the first table is labeled \"City\", but if these are towns and villages then I'd like to see what you are suggesting!  Thanks!",
        "query": "SELECT official_name FROM city",
        "schema": "CREATE TABLE farm_competition (Host_city_ID NUMBER); CREATE TABLE city (City_ID NUMBER, Population NUMBER, Official_Name TEXT, Status TEXT);"
      }
    ]
  ],
  "program_share": [
    [
      {
        "question": "which program owners have programs in the morning and the night",
        "query": "SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id = t2.program_id WHERE t2.time_of_day = \"Morning\" INTERSECT SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id = t2.program_id WHERE t2.time_of_day = \"Night\"",
        "schema": "CREATE TABLE broadcast_share (Program_ID NUMBER); CREATE TABLE broadcast (Program_ID NUMBER, Time_of_day TEXT, Channel_ID NUMBER); CREATE TABLE program (Name TEXT, Owner TEXT, Program_ID NUMBER); CREATE TABLE channel (Owner TEXT, Channel_ID NUMBER);"
      },
      {
        "question": "what are the programs by Beijing television? | Did you want the program names by the owner Beijing television (BTV) | yes",
        "query": "SELECT name FROM program WHERE OWNER = \"Beijing Television ( BTV ) \"",
        "schema": "CREATE TABLE program (Name TEXT, Owner TEXT, Program_ID NUMBER); CREATE TABLE broadcast_share (Program_ID NUMBER); CREATE TABLE channel (Owner TEXT, Channel_ID NUMBER); CREATE TABLE broadcast (Program_ID NUMBER, Time_of_day TEXT, Channel_ID NUMBER);"
      },
      {
        "question": "when did kaku launch?",
        "query": "SELECT launch FROM program WHERE name = \"Kaku\"",
        "schema": "CREATE TABLE broadcast (Channel_ID NUMBER, Time_of_day TEXT, Program_ID NUMBER); CREATE TABLE broadcast_share (Program_ID NUMBER); CREATE TABLE channel (Channel_ID NUMBER, Owner TEXT); CREATE TABLE program (Launch NUMBER, Name TEXT, Owner TEXT, Program_ID NUMBER);"
      },
      {
        "question": "who is Toonmax owner? | Did you want the owner of the program named Toonmax? | yes",
        "query": "SELECT OWNER FROM program WHERE name = \"Toonmax\"",
        "schema": "CREATE TABLE broadcast (Program_ID NUMBER, Time_of_day TEXT, Channel_ID NUMBER); CREATE TABLE channel (Owner TEXT, Channel_ID NUMBER); CREATE TABLE program (Launch NUMBER, Program_ID NUMBER, Name TEXT, Owner TEXT); CREATE TABLE broadcast_share (Program_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What are names of all programs?",
        "query": "SELECT name FROM program",
        "schema": "CREATE TABLE program (Name TEXT, Program_ID NUMBER);"
      },
      {
        "question": "Of them which was launched most recently?",
        "query": "SELECT name FROM program ORDER BY launch DESC LIMIT 1",
        "schema": "CREATE TABLE program (Name TEXT, Launch NUMBER, Program_ID NUMBER); CREATE TABLE broadcast (Program_ID NUMBER);"
      },
      {
        "question": "Who is the owner?",
        "query": "SELECT OWNER FROM program ORDER BY launch DESC LIMIT 1",
        "schema": "CREATE TABLE channel (Owner TEXT); CREATE TABLE program (Program_ID NUMBER, Name TEXT, Launch NUMBER, Owner TEXT); CREATE TABLE broadcast (Program_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Hello! Could you provide me with a list of all of the channel IDs for which the \"time of day\" is morning?",
        "query": "SELECT channel_id FROM broadcast WHERE time_of_day = 'Morning'",
        "schema": "CREATE TABLE broadcast (Channel_ID NUMBER, Time_of_day TEXT); CREATE TABLE channel (Channel_ID NUMBER, Name TEXT);"
      },
      {
        "question": "Thank you for that!  Could you update this list to include the channel name?",
        "query": "SELECT t1.name,t2.channel_id FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id = t2.channel_id WHERE t2.time_of_day = 'Morning'",
        "schema": "CREATE TABLE broadcast (Time_of_day TEXT, Channel_ID NUMBER); CREATE TABLE broadcast_share (Channel_ID NUMBER); CREATE TABLE channel (Name TEXT, Channel_ID NUMBER);"
      },
      {
        "question": "Excellent!  Finally, can you show me what the ownership is of each of those stations?",
        "query": "SELECT t1.name,t2.channel_id,OWNER FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id = t2.channel_id WHERE t2.time_of_day = 'Morning'",
        "schema": "CREATE TABLE broadcast_share (Channel_ID NUMBER); CREATE TABLE channel (Name TEXT, Channel_ID NUMBER, Owner TEXT); CREATE TABLE broadcast (Channel_ID NUMBER, Time_of_day TEXT);"
      }
    ],
    [
      {
        "question": "how many broadcast are presented on the table",
        "query": "SELECT COUNT ( * ) FROM broadcast",
        "schema": "CREATE TABLE channel (Channel_ID NUMBER); CREATE TABLE program (Program_ID NUMBER); CREATE TABLE broadcast (Time_of_day TEXT, Program_ID NUMBER, Channel_ID NUMBER); CREATE TABLE broadcast_share (Program_ID NUMBER);"
      },
      {
        "question": "what are all the channel are presented on the table",
        "query": "SELECT * FROM channel",
        "schema": "CREATE TABLE broadcast_share (Channel_ID NUMBER, Program_ID NUMBER); CREATE TABLE channel (Name TEXT, Channel_ID NUMBER); CREATE TABLE broadcast (Time_of_day TEXT, Program_ID NUMBER, Channel_ID NUMBER); CREATE TABLE program (Program_ID NUMBER);"
      },
      {
        "question": "what is the owner name of CCTV-1",
        "query": "SELECT OWNER FROM channel WHERE name = \"CCTV-1\"",
        "schema": "CREATE TABLE program (Program_ID NUMBER, Owner TEXT); CREATE TABLE broadcast_share (Channel_ID NUMBER, Program_ID NUMBER); CREATE TABLE broadcast (Channel_ID NUMBER, Time_of_day TEXT, Program_ID NUMBER); CREATE TABLE channel (Name TEXT, Channel_ID NUMBER, Owner TEXT);"
      },
      {
        "question": "which channel are highest rating percent on the table",
        "query": "SELECT name FROM channel WHERE rating_in_percent = ( SELECT MAX ( rating_in_percent ) FROM channel )",
        "schema": "CREATE TABLE program (Program_ID NUMBER, Owner TEXT); CREATE TABLE broadcast_share (Program_ID NUMBER, Channel_ID NUMBER); CREATE TABLE broadcast (Program_ID NUMBER, Channel_ID NUMBER, Time_of_day TEXT); CREATE TABLE channel (Rating_in_percent NUMBER, Share_in_percent NUMBER, Name TEXT, Channel_ID NUMBER, Owner TEXT);"
      }
    ],
    [
      {
        "question": "show me the programmes | Do you mean all the program ids? | yes",
        "query": "SELECT program_id FROM program",
        "schema": "CREATE TABLE broadcast_share (Program_ID NUMBER); CREATE TABLE broadcast (Time_of_day TEXT, Program_ID NUMBER); CREATE TABLE channel (Channel_ID NUMBER); CREATE TABLE program (Program_ID NUMBER, Name TEXT);"
      },
      {
        "question": "list the name of programme  that broadcast frequently | Do you mean the name of the program that is broadcast most frequently? | yes",
        "query": "SELECT t1.name FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id = t2.program_id GROUP BY t2.program_id ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE broadcast_share (Program_ID NUMBER); CREATE TABLE program (Program_ID NUMBER, Name TEXT); CREATE TABLE channel (Channel_ID NUMBER); CREATE TABLE broadcast (Time_of_day TEXT, Program_ID NUMBER);"
      }
    ]
  ],
  "book_2": [
    [
      {
        "question": "What are the publication dates in the list?",
        "query": "SELECT publication_date FROM publication",
        "schema": "CREATE TABLE book (Book_ID NUMBER); CREATE TABLE publication (Publication_Date TEXT, Publication_ID NUMBER);"
      },
      {
        "question": "Can you sort the list by publication date from most common to least common?",
        "query": "SELECT publication_date FROM publication GROUP BY publication_date ORDER BY COUNT ( * ) DESC",
        "schema": "CREATE TABLE book (Book_ID NUMBER); CREATE TABLE publication (Publication_Date TEXT, Publication_ID NUMBER);"
      },
      {
        "question": "What is the most common publication date?",
        "query": "SELECT publication_date FROM publication GROUP BY publication_date ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE publication (Publication_ID NUMBER, Publication_Date TEXT); CREATE TABLE book (Book_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show publishers that have less than one publication?",
        "query": "SELECT publisher FROM publication GROUP BY publisher HAVING COUNT ( * ) > 1",
        "schema": "CREATE TABLE publication (Publisher TEXT, Publication_ID NUMBER);"
      },
      {
        "question": "Show all the publishers?",
        "query": "SELECT publisher FROM publication",
        "schema": "CREATE TABLE publication (Publication_ID NUMBER, Publisher TEXT);"
      },
      {
        "question": "What is the highest price that a publisher earns?",
        "query": "SELECT price FROM publication ORDER BY price DESC LIMIT 1",
        "schema": "CREATE TABLE publication (Publisher TEXT, Price NUMBER, Publication_ID NUMBER);"
      },
      {
        "question": "What is the lowest price that a publisher earns?",
        "query": "SELECT price FROM publication ORDER BY price LIMIT 1",
        "schema": "CREATE TABLE publication (Publisher TEXT, Publication_ID NUMBER, Price NUMBER);"
      }
    ],
    [
      {
        "question": "I need a list of the titles of books.",
        "query": "SELECT title FROM book",
        "schema": "CREATE TABLE publication (Book_ID NUMBER); CREATE TABLE book (Title TEXT, Book_ID NUMBER);"
      },
      {
        "question": "Can you give me the price of those books?",
        "query": "SELECT t2.price FROM book AS t1 JOIN publication AS t2 ON t1.book_id = t2.book_id",
        "schema": "CREATE TABLE publication (Price NUMBER, Book_ID NUMBER); CREATE TABLE book (Title TEXT, Book_ID NUMBER);"
      },
      {
        "question": "can you list those in ascending order?",
        "query": "SELECT t2.price FROM book AS t1 JOIN publication AS t2 ON t1.book_id = t2.book_id ORDER BY t2.price ASC",
        "schema": "CREATE TABLE book (Title TEXT, Book_ID NUMBER); CREATE TABLE publication (Book_ID NUMBER, Price NUMBER);"
      },
      {
        "question": "Can you list the prices along with the books?",
        "query": "SELECT t2.price, t1.title FROM book AS t1 JOIN publication AS t2 ON t1.book_id = t2.book_id ORDER BY t2.price ASC",
        "schema": "CREATE TABLE book (Title TEXT, Book_ID NUMBER); CREATE TABLE publication (Price NUMBER, Book_ID NUMBER);"
      },
      {
        "question": "Now can you list the titles of the books and the prices but in descending order?",
        "query": "SELECT t2.price, t1.title FROM book AS t1 JOIN publication AS t2 ON t1.book_id = t2.book_id ORDER BY t2.price DESC",
        "schema": "CREATE TABLE publication (Price NUMBER, Book_ID NUMBER); CREATE TABLE book (Title TEXT, Book_ID NUMBER);"
      }
    ],
    [
      {
        "question": "what's the highest price of book published on this list?",
        "query": "SELECT MAX ( t2.price ) FROM book AS t1 JOIN publication AS t2 ON t1.book_id = t2.book_id",
        "schema": "CREATE TABLE book (Book_ID NUMBER, Title TEXT); CREATE TABLE publication (Publication_ID NUMBER, Price NUMBER, Book_ID NUMBER);"
      },
      {
        "question": "who's the writer of The Black Lamb?",
        "query": "SELECT t1.writer FROM book AS t1 JOIN publication AS t2 ON t1.book_id = t2.book_id WHERE t1.title = \"The Black Lamb\"",
        "schema": "CREATE TABLE book (Writer TEXT, Title TEXT, Book_ID NUMBER); CREATE TABLE publication (Publication_ID NUMBER, Price NUMBER, Book_ID NUMBER);"
      },
      {
        "question": "what's the price for Wiley's publication? | Which of Wiley's publications do you want to know the price for? | the one of june 2006",
        "query": "SELECT t2.price FROM book AS t1 JOIN publication AS t2 ON t1.book_id = t2.book_id WHERE t2.publisher = \"Wiley\" AND t2.publication_date = \"June 2006\"",
        "schema": "CREATE TABLE publication (Publication_Date TEXT, Book_ID NUMBER, Publication_ID NUMBER, Publisher TEXT, Price NUMBER); CREATE TABLE book (Title TEXT, Book_ID NUMBER, Writer TEXT);"
      },
      {
        "question": "who's the writer of Bloody Mary? | Did you mean Bloody Mary or Bloody Mary : Lady Liberty? | Bloody Mary",
        "query": "SELECT writer FROM book WHERE title = \"Bloody Mary\"",
        "schema": "CREATE TABLE publication (Price NUMBER, Book_ID NUMBER, Publication_Date TEXT, Publication_ID NUMBER, Publisher TEXT); CREATE TABLE book (Book_ID NUMBER, Title TEXT, Writer TEXT);"
      }
    ],
    [
      {
        "question": "What are the prices of the 3 lowest publications?",
        "query": "SELECT price FROM publication ORDER BY price ASC LIMIT 3",
        "schema": "CREATE TABLE publication (Publication_ID NUMBER, Price NUMBER, Book_ID NUMBER); CREATE TABLE book (Title TEXT, Book_ID NUMBER);"
      },
      {
        "question": "And who are the publishers of the 3 lowest priced publications?",
        "query": "SELECT publisher FROM publication ORDER BY price ASC LIMIT 3",
        "schema": "CREATE TABLE publication (Publication_ID NUMBER, Price NUMBER, Publisher TEXT, Book_ID NUMBER); CREATE TABLE book (Title TEXT, Book_ID NUMBER);"
      },
      {
        "question": "What are the publication dates of the 3 lowest priced publications?",
        "query": "SELECT publication_date FROM publication ORDER BY price ASC LIMIT 3",
        "schema": "CREATE TABLE publication (Publication_ID NUMBER, Book_ID NUMBER, Price NUMBER, Publisher TEXT, Publication_Date TEXT); CREATE TABLE book (Title TEXT, Book_ID NUMBER);"
      }
    ],
    [
      {
        "question": "how many publishers are there?",
        "query": "SELECT COUNT ( DISTINCT publisher ) FROM publication",
        "schema": "CREATE TABLE publication (Publisher TEXT, Publication_ID NUMBER); CREATE TABLE book (Book_ID NUMBER);"
      },
      {
        "question": "Yes please | Which one? Do you mean the publishers of the result table that also have publications with prices lower than 5000000 or any publisher that has a publication with a price lower than 5000000? | in  the table that you just created, add the names of the publishers with price lower than 5000000, and include their price  in the table too.",
        "query": "SELECT publisher, price FROM publication WHERE price > 10000000 OR price < 5000000",
        "schema": "CREATE TABLE publication (Price NUMBER, Publisher TEXT, Publication_ID NUMBER); CREATE TABLE book (Book_ID NUMBER);"
      }
    ]
  ],
  "cre_Doc_Control_Systems": [
    [
      {
        "question": "how many documents are there?",
        "query": "SELECT COUNT ( * ) FROM draft_copies",
        "schema": "CREATE TABLE Ref_Document_Types (document_type_description TEXT, document_type_code TEXT); CREATE TABLE Document_Drafts (draft_details TEXT, draft_number NUMBER, document_id NUMBER); CREATE TABLE Documents (other_details TEXT, document_status_code TEXT, document_type_code TEXT, document_id NUMBER); CREATE TABLE Documents_Mailed (document_id NUMBER); CREATE TABLE Employees (employee_id NUMBER); CREATE TABLE Draft_Copies (document_id NUMBER, draft_number NUMBER);"
      },
      {
        "question": "What's the least amount of draft copies that a document has?",
        "query": "SELECT COUNT ( copy_number ) FROM draft_copies GROUP BY document_id ORDER BY COUNT ( copy_number ) LIMIT 1",
        "schema": "CREATE TABLE Employees (employee_id NUMBER); CREATE TABLE Documents_Mailed (document_id NUMBER); CREATE TABLE Documents (document_id NUMBER, document_status_code TEXT, document_type_code TEXT, other_details TEXT); CREATE TABLE Document_Drafts (draft_details TEXT, draft_number NUMBER, document_id NUMBER); CREATE TABLE Draft_Copies (draft_number NUMBER, copy_number NUMBER, document_id NUMBER); CREATE TABLE Ref_Document_Types (document_type_description TEXT, document_type_code TEXT);"
      },
      {
        "question": "What's the most amount of draft copies that a document has?",
        "query": "SELECT COUNT ( copy_number ) FROM draft_copies GROUP BY document_id ORDER BY COUNT ( copy_number ) DESC LIMIT 1",
        "schema": "CREATE TABLE Documents (document_status_code TEXT, other_details TEXT, document_id NUMBER, document_type_code TEXT); CREATE TABLE Ref_Document_Types (document_type_code TEXT, document_type_description TEXT); CREATE TABLE Documents_Mailed (document_id NUMBER); CREATE TABLE Draft_Copies (draft_number NUMBER, document_id NUMBER, copy_number NUMBER); CREATE TABLE Document_Drafts (draft_details TEXT, draft_number NUMBER, document_id NUMBER); CREATE TABLE Employees (employee_id NUMBER);"
      },
      {
        "question": "what's the id of the document that has the most draft copies?",
        "query": "SELECT document_id FROM draft_copies GROUP BY document_id ORDER BY COUNT ( copy_number ) DESC LIMIT 1",
        "schema": "CREATE TABLE Document_Drafts (draft_number NUMBER, draft_details TEXT, document_id NUMBER); CREATE TABLE Documents (document_id NUMBER, document_status_code TEXT, other_details TEXT, document_type_code TEXT); CREATE TABLE Draft_Copies (copy_number NUMBER, draft_number NUMBER, document_id NUMBER); CREATE TABLE Ref_Document_Types (document_type_code TEXT, document_type_description TEXT); CREATE TABLE Documents_Mailed (document_id NUMBER); CREATE TABLE Employees (employee_id NUMBER);"
      },
      {
        "question": "how many draft copies does that document have?",
        "query": "SELECT document_id , COUNT ( copy_number ) FROM draft_copies GROUP BY document_id ORDER BY COUNT ( copy_number ) DESC LIMIT 1",
        "schema": "CREATE TABLE Documents_Mailed (document_id NUMBER); CREATE TABLE Draft_Copies (document_id NUMBER, draft_number NUMBER, copy_number NUMBER); CREATE TABLE Employees (employee_id NUMBER); CREATE TABLE Documents (document_id NUMBER, document_type_code TEXT, document_status_code TEXT, other_details TEXT); CREATE TABLE Ref_Document_Types (document_type_description TEXT, document_type_code TEXT); CREATE TABLE Document_Drafts (draft_number NUMBER, draft_details TEXT, document_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show me a list of all shipping agent codes",
        "query": "SELECT shipping_agent_code FROM ref_shipping_agents",
        "schema": "CREATE TABLE Documents (shipping_agent_code TEXT); CREATE TABLE Ref_Shipping_Agents (shipping_agent_name TEXT, shipping_agent_code TEXT);"
      },
      {
        "question": "add a column showing the total number of documents shipped per code",
        "query": "SELECT shipping_agent_code, COUNT ( * ) FROM documents GROUP BY shipping_agent_code",
        "schema": "CREATE TABLE Documents (shipping_agent_code TEXT, document_id NUMBER); CREATE TABLE Document_Drafts (document_id NUMBER); CREATE TABLE Ref_Shipping_Agents (shipping_agent_name TEXT, shipping_agent_code TEXT);"
      },
      {
        "question": "Add another column showing the shipping agent name",
        "query": "SELECT t1.shipping_agent_code, t1.shipping_agent_name, COUNT ( * ) FROM ref_shipping_agents AS t1 JOIN documents AS t2 ON t2.shipping_agent_code = t1.shipping_agent_code GROUP BY t2.shipping_agent_code",
        "schema": "CREATE TABLE Documents (shipping_agent_code TEXT, document_id NUMBER); CREATE TABLE Ref_Shipping_Agents (shipping_agent_name TEXT, shipping_agent_code TEXT); CREATE TABLE Document_Drafts (document_id NUMBER);"
      }
    ],
    [
      {
        "question": "I was wondering what the maximum number of circulation history documents is for a single employee?",
        "query": "SELECT COUNT ( * ) FROM employees JOIN circulation_history ON circulation_history.employee_id = employees.employee_id GROUP BY employees.employee_id ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Roles (role_code TEXT); CREATE TABLE Circulation_History (document_id NUMBER, copy_number NUMBER, draft_number NUMBER, employee_id NUMBER); CREATE TABLE Documents (document_id NUMBER); CREATE TABLE Employees (role_code TEXT, employee_id NUMBER, employee_name TEXT);"
      },
      {
        "question": "Which employee are those documents associated with?",
        "query": "SELECT employees.employee_name FROM employees JOIN circulation_history ON circulation_history.employee_id = employees.employee_id GROUP BY employees.employee_id ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Circulation_History (copy_number NUMBER, employee_id NUMBER, draft_number NUMBER, document_id NUMBER); CREATE TABLE Employees (employee_id NUMBER, employee_name TEXT, role_code TEXT); CREATE TABLE Documents (document_id NUMBER); CREATE TABLE Roles (role_code TEXT);"
      },
      {
        "question": "Ok, and how many drafts are associated with Kenyon?",
        "query": "SELECT COUNT ( * ) FROM employees JOIN circulation_history ON circulation_history.employee_id = employees.employee_id WHERE employee_name = \"Kenyon\"",
        "schema": "CREATE TABLE Roles (role_code TEXT); CREATE TABLE Employees (employee_name TEXT, employee_id NUMBER, role_code TEXT); CREATE TABLE Addresses (address_details TEXT, address_id NUMBER); CREATE TABLE Documents (document_id NUMBER); CREATE TABLE Circulation_History (document_id NUMBER, draft_number NUMBER, employee_id NUMBER, copy_number NUMBER); CREATE TABLE Draft_Copies (document_id NUMBER, copy_number NUMBER, draft_number NUMBER); CREATE TABLE Document_Drafts (draft_number NUMBER, document_id NUMBER, draft_details TEXT);"
      }
    ],
    [
      {
        "question": "Hello. What is the name of the employee that has showed up the most in circulation history documents?",
        "query": "SELECT t1.employee_name FROM employees AS t1 JOIN circulation_history AS t2 ON t2.employee_id = t1.employee_id GROUP BY t1.employee_name ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Circulation_History (document_id NUMBER, copy_number NUMBER, employee_id NUMBER, draft_number NUMBER); CREATE TABLE Employees (employee_id NUMBER, employee_name TEXT); CREATE TABLE Documents (document_id NUMBER);"
      },
      {
        "question": "How many drafts have they shown up in?",
        "query": "SELECT t1.employee_name, SUM ( t2.draft_number ) FROM employees AS t1 JOIN circulation_history AS t2 ON t2.employee_id = t1.employee_id GROUP BY t2.document_id , t2.draft_number , t2.copy_number ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Employees (employee_id NUMBER, employee_name TEXT); CREATE TABLE Draft_Copies (copy_number NUMBER, draft_number NUMBER, document_id NUMBER); CREATE TABLE Circulation_History (employee_id NUMBER, document_id NUMBER, copy_number NUMBER, draft_number NUMBER); CREATE TABLE Document_Drafts (draft_details TEXT, document_id NUMBER, draft_number NUMBER); CREATE TABLE Documents (document_id NUMBER);"
      },
      {
        "question": "How many copies have they shown up in?",
        "query": "SELECT SUM ( t2.copy_number ) FROM employees AS t1 JOIN circulation_history AS t2 ON t2.employee_id = t1.employee_id GROUP BY t2.document_id , t2.draft_number , t2.copy_number ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Circulation_History (employee_id NUMBER, copy_number NUMBER, draft_number NUMBER, document_id NUMBER); CREATE TABLE Employees (employee_id NUMBER, employee_name TEXT); CREATE TABLE Draft_Copies (draft_number NUMBER, copy_number NUMBER, document_id NUMBER); CREATE TABLE Document_Drafts (draft_number NUMBER, draft_details TEXT, document_id NUMBER); CREATE TABLE Documents (document_id NUMBER);"
      }
    ],
    [
      {
        "question": "What is the name of the shipping agent that shipped the largest number of documents?",
        "query": "SELECT t1.shipping_agent_name FROM ref_shipping_agents AS t1 JOIN documents AS t2 ON t2.shipping_agent_code = t1.shipping_agent_code GROUP BY t1.shipping_agent_code ORDER BY COUNT ( t2.document_id ) DESC LIMIT 1",
        "schema": "CREATE TABLE Documents_Mailed (document_id NUMBER); CREATE TABLE Document_Drafts (document_id NUMBER); CREATE TABLE Employees (employee_name TEXT); CREATE TABLE Documents (document_id NUMBER, receipt_number TEXT, shipping_agent_code TEXT); CREATE TABLE Ref_Shipping_Agents (shipping_agent_description TEXT, shipping_agent_name TEXT, shipping_agent_code TEXT);"
      },
      {
        "question": "What is the name of the shipping agent that shipped the smallest number of documents?",
        "query": "SELECT t1.shipping_agent_name FROM ref_shipping_agents AS t1 JOIN documents AS t2 ON t2.shipping_agent_code = t1.shipping_agent_code GROUP BY t1.shipping_agent_code ORDER BY COUNT ( t2.document_id ) LIMIT 1",
        "schema": "CREATE TABLE Document_Drafts (document_id NUMBER); CREATE TABLE Documents (shipping_agent_code TEXT, document_id NUMBER, receipt_number TEXT); CREATE TABLE Documents_Mailed (document_id NUMBER); CREATE TABLE Ref_Shipping_Agents (shipping_agent_name TEXT, shipping_agent_code TEXT, shipping_agent_description TEXT); CREATE TABLE Employees (employee_name TEXT);"
      },
      {
        "question": "What are the receipt dates of all of the documents Airline shipped?",
        "query": "SELECT t2.receipt_date FROM ref_shipping_agents AS t1 JOIN documents AS t2 ON t2.shipping_agent_code = t1.shipping_agent_code WHERE t1.shipping_agent_name = \"Airline\"",
        "schema": "CREATE TABLE Documents_Mailed (document_id NUMBER); CREATE TABLE Ref_Shipping_Agents (shipping_agent_description TEXT, shipping_agent_name TEXT, shipping_agent_code TEXT); CREATE TABLE Employees (employee_name TEXT); CREATE TABLE Documents (shipping_agent_code TEXT, document_type_code TEXT, document_id NUMBER, receipt_date TIME, receipt_number TEXT); CREATE TABLE Document_Drafts (document_id NUMBER);"
      }
    ],
    [
      {
        "question": "How many employees are there?",
        "query": "SELECT COUNT ( * ) FROM employees",
        "schema": "CREATE TABLE Employees (role_code TEXT, employee_id NUMBER, employee_name TEXT, other_details TEXT); CREATE TABLE Documents (document_id NUMBER); CREATE TABLE Roles (role_code TEXT);"
      },
      {
        "question": "How many employees are in the circulation history with the document id 1?",
        "query": "SELECT COUNT ( employee_id ) FROM circulation_history WHERE document_id = 1",
        "schema": "CREATE TABLE Roles (role_code TEXT); CREATE TABLE Document_Drafts (document_id NUMBER); CREATE TABLE Circulation_History (copy_number NUMBER, employee_id NUMBER, draft_number NUMBER, document_id NUMBER); CREATE TABLE Draft_Copies (document_id NUMBER); CREATE TABLE Documents (document_id NUMBER); CREATE TABLE Employees (employee_name TEXT, other_details TEXT, role_code TEXT, employee_id NUMBER);"
      },
      {
        "question": "Can you tell me the name of the employee that is in the circulation history with document id 1?",
        "query": "SELECT t1.employee_name FROM employees AS t1 JOIN circulation_history AS t2 ON t1.employee_id = t2.employee_id WHERE t2.document_id = 1",
        "schema": "CREATE TABLE Circulation_History (draft_number NUMBER, document_id NUMBER, copy_number NUMBER, employee_id NUMBER); CREATE TABLE Roles (role_code TEXT); CREATE TABLE Employees (other_details TEXT, employee_id NUMBER, employee_name TEXT, role_code TEXT); CREATE TABLE Draft_Copies (document_id NUMBER); CREATE TABLE Document_Drafts (document_id NUMBER); CREATE TABLE Documents (document_id NUMBER);"
      }
    ],
    [
      {
        "question": "what role does Koby play?",
        "query": "SELECT t1.role_description FROM ROLES AS t1 JOIN employees AS t2 ON t1.role_code = t2.role_code WHERE t2.employee_name = \"Koby\"",
        "schema": "CREATE TABLE Employees (employee_name TEXT, role_code TEXT, employee_id NUMBER); CREATE TABLE Roles (role_description TEXT, role_code TEXT);"
      },
      {
        "question": "what is the role code",
        "query": "SELECT t1.role_code FROM ROLES AS t1 JOIN employees AS t2 ON t1.role_code = t2.role_code WHERE t2.employee_name = \"Koby\"",
        "schema": "CREATE TABLE Roles (role_description TEXT, role_code TEXT); CREATE TABLE Employees (employee_name TEXT, role_code TEXT, employee_id NUMBER);"
      }
    ]
  ],
  "pilot_record": [
    [
      {
        "question": "What are the names of the pilots with IDs 1 and 2?",
        "query": "SELECT pilot_name FROM pilot WHERE pilot_id = 1 OR pilot_id = 2",
        "schema": "CREATE TABLE pilot (Pilot_ID NUMBER, Pilot_name TEXT); CREATE TABLE pilot_record (Pilot_ID NUMBER, Record_ID NUMBER);"
      },
      {
        "question": "How many records do they have?",
        "query": "SELECT t2.pilot_id , COUNT ( * ) FROM pilot_record AS t1 JOIN pilot AS t2 ON t1.pilot_id = t2.pilot_id WHERE t2.pilot_id = 1 OR t2.pilot_id = 2 GROUP BY t2.pilot_id",
        "schema": "CREATE TABLE pilot (Pilot_name TEXT, Pilot_ID NUMBER); CREATE TABLE pilot_record (Pilot_ID NUMBER, Record_ID NUMBER);"
      },
      {
        "question": "Which year did they join?",
        "query": "SELECT pilot_id , join_year FROM pilot WHERE pilot_id = 1 OR pilot_id = 2",
        "schema": "CREATE TABLE pilot_record (Date TEXT, Pilot_ID NUMBER, Record_ID NUMBER); CREATE TABLE pilot (Pilot_ID NUMBER, Pilot_name TEXT, Join_Year NUMBER);"
      },
      {
        "question": "Which are their teams?",
        "query": "SELECT pilot_id , team FROM pilot WHERE pilot_id = 1 OR pilot_id = 2",
        "schema": "CREATE TABLE pilot_record (Pilot_ID NUMBER, Date TEXT, Record_ID NUMBER); CREATE TABLE pilot (Pilot_ID NUMBER, Pilot_name TEXT, Team TEXT, Join_Year NUMBER);"
      }
    ],
    [
      {
        "question": "Hello, how many different nationalities of pilots are there?",
        "query": "SELECT COUNT ( DISTINCT nationality ) FROM pilot",
        "schema": "CREATE TABLE pilot (Nationality TEXT, Pilot_ID NUMBER, Rank NUMBER, Pilot_name TEXT); CREATE TABLE pilot_record (Pilot_ID NUMBER);"
      },
      {
        "question": "What are the pilot names of those 3 nationalities?",
        "query": "SELECT nationality,pilot_name FROM pilot",
        "schema": "CREATE TABLE pilot (Nationality TEXT, Pilot_name TEXT, Pilot_ID NUMBER, Rank NUMBER); CREATE TABLE pilot_record (Pilot_ID NUMBER);"
      },
      {
        "question": "What is the most common nationality of the 3 nationalities?",
        "query": "SELECT nationality FROM pilot GROUP BY nationality ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE pilot (Rank NUMBER, Pilot_ID NUMBER, Pilot_name TEXT, Nationality TEXT); CREATE TABLE pilot_record (Pilot_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Can you please show the names of all pilots and fleet series of the aircrafts they have flown in ascending order of the rank of the pilot?",
        "query": "SELECT t3.pilot_name , t2.fleet_series FROM pilot_record AS t1 JOIN aircraft AS t2 ON t1.aircraft_id = t2.aircraft_id JOIN pilot AS t3 ON t1.pilot_id = t3.pilot_id ORDER BY t3.rank",
        "schema": "CREATE TABLE aircraft (Aircraft_ID NUMBER, Model TEXT, Fleet_Series TEXT); CREATE TABLE pilot_record (Aircraft_ID NUMBER, Pilot_ID NUMBER); CREATE TABLE pilot (Pilot_name TEXT, Rank NUMBER, Pilot_ID NUMBER);"
      },
      {
        "question": "What are each of those pilots' nationalities? | Do  you  want  to  konw  Pilot name and related pilots' nationalities? | Yes, please.",
        "query": "SELECT pilot_name,nationality FROM pilot",
        "schema": "CREATE TABLE aircraft (Model TEXT, Fleet_Series TEXT, Aircraft_ID NUMBER); CREATE TABLE pilot_record (Pilot_ID NUMBER, Aircraft_ID NUMBER); CREATE TABLE pilot (Rank NUMBER, Pilot_name TEXT, Pilot_ID NUMBER, Nationality TEXT);"
      },
      {
        "question": "What kind of fuel propulsion do these pilots' aircrafts use?",
        "query": "SELECT DISTINCT ( fuel_propulsion ) FROM aircraft",
        "schema": "CREATE TABLE pilot_record (Pilot_ID NUMBER, Aircraft_ID NUMBER); CREATE TABLE pilot (Rank NUMBER, Pilot_ID NUMBER, Pilot_name TEXT, Nationality TEXT); CREATE TABLE aircraft (Aircraft_ID NUMBER, Model TEXT, Powertrain TEXT, Fleet_Series TEXT, Fuel_Propulsion TEXT);"
      }
    ],
    [
      {
        "question": "show the pilot positions that have both pilots joining after year 2005 and pilots joining before 2000.",
        "query": "SELECT POSITION FROM pilot WHERE join_year < 2000 INTERSECT SELECT POSITION FROM pilot WHERE join_year > 2005",
        "schema": "CREATE TABLE pilot (Position TEXT, Join_Year NUMBER, Pilot_ID NUMBER); CREATE TABLE pilot_record (Date TEXT, Pilot_ID NUMBER);"
      },
      {
        "question": "show me the ages of pilots in the center team position",
        "query": "SELECT age FROM pilot WHERE POSITION = \"Center Team\"",
        "schema": "CREATE TABLE pilot (Join_Year NUMBER, Team TEXT, Position TEXT, Pilot_ID NUMBER, Age NUMBER); CREATE TABLE pilot_record (Pilot_ID NUMBER, Date TEXT);"
      },
      {
        "question": "what is the nationality of the forward-center team? | Do you mean the nationality of the pilot in the forward-center team? | yes",
        "query": "SELECT nationality FROM pilot WHERE POSITION = \"Forward-Center Team\"",
        "schema": "CREATE TABLE pilot (Pilot_ID NUMBER, Age NUMBER, Position TEXT, Join_Year NUMBER, Nationality TEXT, Team TEXT); CREATE TABLE pilot_record (Date TEXT, Pilot_ID NUMBER);"
      }
    ],
    [
      {
        "question": "please tell me the name of pilot | Did  you  mean  all  the  names  in the pilot? | yes",
        "query": "SELECT pilot_name FROM pilot",
        "schema": "CREATE TABLE pilot_record (Pilot_ID NUMBER); CREATE TABLE pilot (Pilot_ID NUMBER, Pilot_name TEXT);"
      },
      {
        "question": "i need the pilot ID | Did  you  mean   to  show  all of the  pilot IDs ? | yes",
        "query": "SELECT pilot_id FROM pilot",
        "schema": "CREATE TABLE pilot (Pilot_ID NUMBER, Pilot_name TEXT); CREATE TABLE pilot_record (Pilot_ID NUMBER);"
      }
    ]
  ],
  "customer_deliveries": [
    [
      {
        "question": "Find the name of route that has the lowest number of deliveries?",
        "query": "SELECT t1.route_name FROM delivery_routes AS t1 JOIN delivery_route_locations AS t2 ON t1.route_id = t2.route_id GROUP BY t1.route_id ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Customers (customer_name TEXT, customer_id NUMBER); CREATE TABLE Delivery_Routes (route_name TEXT, route_id NUMBER, other_route_details TEXT); CREATE TABLE Delivery_Route_Locations (location_code TEXT, route_id NUMBER, location_name TEXT);"
      },
      {
        "question": "How many route names in this table?",
        "query": "SELECT COUNT ( route_name ) FROM delivery_routes",
        "schema": "CREATE TABLE Delivery_Route_Locations (location_address_id NUMBER, route_id NUMBER, location_code TEXT, location_name TEXT); CREATE TABLE Customers (customer_id NUMBER, customer_name TEXT); CREATE TABLE Delivery_Routes (other_route_details TEXT, route_name TEXT, route_id NUMBER); CREATE TABLE Order_Deliveries (actual_order_id NUMBER);"
      },
      {
        "question": "How many delivery route location in this table?",
        "query": "SELECT t2.location_code,COUNT ( * ) FROM delivery_routes AS t1 JOIN delivery_route_locations AS t2 ON t1.route_id = t2.route_id",
        "schema": "CREATE TABLE Delivery_Routes (route_name TEXT, other_route_details TEXT, route_id NUMBER); CREATE TABLE Customers (customer_id NUMBER, customer_name TEXT); CREATE TABLE Delivery_Route_Locations (location_name TEXT, route_id NUMBER, location_code TEXT, location_address_id NUMBER); CREATE TABLE Order_Deliveries (actual_order_id NUMBER, location_code TEXT);"
      }
    ],
    [
      {
        "question": "I want to know what product has been ordered the greatest number of times.",
        "query": "SELECT * FROM products AS t1 JOIN regular_order_products AS t2 ON t1.product_id = t2.product_id GROUP BY t2.product_id ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Regular_Orders (regular_order_id NUMBER); CREATE TABLE Actual_Orders (actual_order_id NUMBER, order_status_code TEXT); CREATE TABLE Order_Deliveries (actual_order_id NUMBER); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Regular_Order_Products (regular_order_id NUMBER, product_id NUMBER); CREATE TABLE Products (product_name TEXT, product_id NUMBER); CREATE TABLE Actual_Order_Products (product_id NUMBER, actual_order_id NUMBER);"
      },
      {
        "question": "What products have less orders than dvds? | Did you want to return all info of the products or just their names? | What is the total cost of the dvd orders?",
        "query": "SELECT SUM ( product_price ) FROM products AS t1 JOIN regular_order_products AS t2 ON t1.product_id = t2.product_id WHERE t1.product_name = 'dvds'",
        "schema": "CREATE TABLE Products (product_id NUMBER, product_name TEXT, product_price NUMBER); CREATE TABLE Order_Deliveries (actual_order_id NUMBER); CREATE TABLE Regular_Order_Products (product_id NUMBER, regular_order_id NUMBER); CREATE TABLE Actual_Orders (order_status_code TEXT, actual_order_id NUMBER); CREATE TABLE Actual_Order_Products (actual_order_id NUMBER, product_id NUMBER); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Regular_Orders (regular_order_id NUMBER);"
      },
      {
        "question": "And what about electronics?",
        "query": "SELECT SUM ( product_price ) FROM products AS t1 JOIN regular_order_products AS t2 ON t1.product_id = t2.product_id WHERE t1.product_name = 'electronics'",
        "schema": "CREATE TABLE Regular_Orders (regular_order_id NUMBER); CREATE TABLE Actual_Order_Products (actual_order_id NUMBER, product_id NUMBER); CREATE TABLE Order_Deliveries (actual_order_id NUMBER); CREATE TABLE Actual_Orders (actual_order_id NUMBER, order_status_code TEXT); CREATE TABLE Regular_Order_Products (product_id NUMBER, regular_order_id NUMBER); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Products (product_name TEXT, product_price NUMBER, product_id NUMBER);"
      }
    ],
    [
      {
        "question": "What is the most frequently used payment method?",
        "query": "SELECT payment_method FROM customers GROUP BY payment_method ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Customers (customer_id NUMBER, payment_method TEXT);"
      },
      {
        "question": "How many customers used Visa to pay?",
        "query": "SELECT COUNT ( * ) FROM customers GROUP BY payment_method HAVING payment_method = \"Visa\"",
        "schema": "CREATE TABLE Customers (payment_method TEXT, customer_name TEXT, customer_id NUMBER);"
      },
      {
        "question": "Can you show me the email addresses of all the customers who paid with Visa?",
        "query": "SELECT customer_email FROM customers WHERE payment_method = \"Visa\"",
        "schema": "CREATE TABLE Customers (customer_name TEXT, customer_id NUMBER, payment_method TEXT, customer_email TEXT); CREATE TABLE Customer_Addresses (address_id NUMBER, customer_id NUMBER); CREATE TABLE Addresses (address_id NUMBER);"
      },
      {
        "question": "How about their phone numbers?",
        "query": "SELECT customer_phone FROM customers WHERE payment_method = \"Visa\"",
        "schema": "CREATE TABLE Addresses (address_id NUMBER); CREATE TABLE Customers (customer_id NUMBER, customer_name TEXT, customer_email TEXT, customer_phone TEXT, payment_method TEXT); CREATE TABLE Customer_Addresses (customer_id NUMBER, address_id NUMBER); CREATE TABLE Employees (employee_phone TEXT);"
      },
      {
        "question": "Who is the newest customer of that group?",
        "query": "SELECT customer_name FROM customers WHERE payment_method = \"Visa\" ORDER BY date_became_customer LIMIT 1",
        "schema": "CREATE TABLE Employees (employee_phone TEXT); CREATE TABLE Customer_Addresses (address_id NUMBER, customer_id NUMBER); CREATE TABLE Customers (customer_name TEXT, date_became_customer TIME, payment_method TEXT, customer_id NUMBER, customer_phone TEXT, customer_email TEXT); CREATE TABLE Addresses (address_id NUMBER);"
      },
      {
        "question": "When did that customer become a customer?",
        "query": "SELECT date_became_customer FROM customers WHERE payment_method = \"Visa\" ORDER BY date_became_customer LIMIT 1",
        "schema": "CREATE TABLE Customer_Addresses (customer_id NUMBER, address_id NUMBER); CREATE TABLE Employees (employee_phone TEXT); CREATE TABLE Addresses (address_id NUMBER); CREATE TABLE Customers (customer_name TEXT, customer_phone TEXT, payment_method TEXT, date_became_customer TIME, customer_email TEXT, customer_id NUMBER); CREATE TABLE Actual_Orders (actual_order_date TIME);"
      }
    ],
    [
      {
        "question": "What is the name of the products?",
        "query": "SELECT product_name FROM products",
        "schema": "CREATE TABLE Products (product_name TEXT, product_price NUMBER, product_id NUMBER, product_description TEXT); CREATE TABLE Customers (customer_id NUMBER);"
      },
      {
        "question": "What is the highest price for the products?",
        "query": "SELECT MAX ( product_price ) FROM products",
        "schema": "CREATE TABLE Products (product_name TEXT, product_id NUMBER, product_description TEXT, product_price NUMBER); CREATE TABLE Customers (customer_id NUMBER);"
      },
      {
        "question": "What product has been ordered the greatest number of times?",
        "query": "SELECT t1.product_name FROM products AS t1 JOIN regular_order_products AS t2 ON t1.product_id = t2.product_id GROUP BY t2.product_id ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Actual_Orders (actual_order_id NUMBER, order_status_code TEXT, actual_order_date TIME); CREATE TABLE Regular_Order_Products (product_id NUMBER, regular_order_id NUMBER); CREATE TABLE Actual_Order_Products (actual_order_id NUMBER, product_id NUMBER); CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Order_Deliveries (actual_order_id NUMBER); CREATE TABLE Products (product_description TEXT, product_price NUMBER, product_name TEXT, product_id NUMBER);"
      },
      {
        "question": "What is the price of the dvds?",
        "query": "SELECT product_price FROM products WHERE product_name = 'dvds'",
        "schema": "CREATE TABLE Customers (customer_id NUMBER); CREATE TABLE Actual_Orders (order_status_code TEXT, actual_order_date TIME, actual_order_id NUMBER, regular_order_id NUMBER); CREATE TABLE Actual_Order_Products (actual_order_id NUMBER, product_id NUMBER); CREATE TABLE Order_Deliveries (actual_order_id NUMBER); CREATE TABLE Products (product_description TEXT, product_name TEXT, product_id NUMBER, product_price NUMBER); CREATE TABLE Regular_Order_Products (product_id NUMBER, regular_order_id NUMBER);"
      }
    ],
    [
      {
        "question": "Which state has the most employees?",
        "query": "SELECT t1.state_province_county FROM addresses AS t1 JOIN employees AS t2 ON t1.address_id = t2.employee_address_id GROUP BY t1.state_province_county ORDER BY COUNT ( * ) DESC LIMIT 1",
        "schema": "CREATE TABLE Addresses (state_province_county TEXT, country TEXT, address_id NUMBER); CREATE TABLE Employees (employee_id NUMBER, employee_address_id NUMBER); CREATE TABLE Customer_Addresses (address_id NUMBER);"
      },
      {
        "question": "Which state has the least?",
        "query": "SELECT t1.state_province_county FROM addresses AS t1 JOIN employees AS t2 ON t1.address_id = t2.employee_address_id GROUP BY t1.state_province_county ORDER BY COUNT ( * ) LIMIT 1",
        "schema": "CREATE TABLE Addresses (state_province_county TEXT, address_id NUMBER, country TEXT); CREATE TABLE Employees (employee_id NUMBER, employee_address_id NUMBER); CREATE TABLE Customer_Addresses (address_id NUMBER);"
      },
      {
        "question": "WHich states have no employees?",
        "query": "SELECT state_province_county FROM addresses WHERE address_id NOT IN ( SELECT employee_address_id FROM employees )",
        "schema": "CREATE TABLE Customer_Addresses (address_id NUMBER); CREATE TABLE Addresses (country TEXT, address_id NUMBER, state_province_county TEXT); CREATE TABLE Employees (employee_address_id NUMBER, employee_id NUMBER);"
      }
    ],
    [
      {
        "question": "How many customers are there?",
        "query": "SELECT COUNT ( customer_id ) FROM customers",
        "schema": "CREATE TABLE Regular_Orders (distributer_id NUMBER); CREATE TABLE Customers (customer_phone TEXT, customer_id NUMBER, customer_name TEXT); CREATE TABLE Customer_Addresses (customer_id NUMBER, address_id NUMBER);"
      },
      {
        "question": "When did the last customer come?",
        "query": "SELECT date_became_customer FROM customers ORDER BY date_became_customer DESC LIMIT 1",
        "schema": "CREATE TABLE Regular_Orders (distributer_id NUMBER); CREATE TABLE Customer_Addresses (address_id NUMBER, date_from TIME, customer_id NUMBER, date_to TIME); CREATE TABLE Customers (customer_name TEXT, customer_id NUMBER, customer_phone TEXT, date_became_customer TIME);"
      },
      {
        "question": "How about the first?",
        "query": "SELECT date_became_customer FROM customers ORDER BY date_became_customer LIMIT 1",
        "schema": "CREATE TABLE Regular_Orders (distributer_id NUMBER); CREATE TABLE Customer_Addresses (address_id NUMBER, date_to TIME, date_from TIME, customer_id NUMBER); CREATE TABLE Customers (date_became_customer TIME, customer_phone TEXT, customer_name TEXT, customer_id NUMBER);"
      },
      {
        "question": "Can you show me the names of the first five customers?",
        "query": "SELECT customer_name FROM customers ORDER BY date_became_customer LIMIT 5",
        "schema": "CREATE TABLE Customer_Addresses (date_to TIME, customer_id NUMBER, date_from TIME, address_id NUMBER); CREATE TABLE Regular_Orders (distributer_id NUMBER); CREATE TABLE Customers (customer_phone TEXT, customer_id NUMBER, date_became_customer TIME, customer_name TEXT);"
      }
    ],
    [
      {
        "question": "Hi there!  Can you show me a list of all customer IDs for customers not located in the state of California?",
        "query": "SELECT customer_id FROM customers EXCEPT SELECT t1.customer_id FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id WHERE t3.state_province_county = 'California'",
        "schema": "CREATE TABLE Addresses (city TEXT, address_details TEXT, state_province_county TEXT, country TEXT, address_id NUMBER); CREATE TABLE Customer_Addresses (address_type TEXT, customer_id NUMBER, address_id NUMBER); CREATE TABLE Customers (customer_name TEXT, customer_id NUMBER);"
      },
      {
        "question": "Thanks!  Can you update this list to show both the city name and state associated with each of these customers?",
        "query": "SELECT t1.customer_id, t3.city, t3.state_province_county FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id WHERE t3.state_province_county ! = 'California'",
        "schema": "CREATE TABLE Customers (customer_name TEXT, customer_id NUMBER); CREATE TABLE Addresses (country TEXT, address_id NUMBER, state_province_county TEXT, address_details TEXT, city TEXT); CREATE TABLE Customer_Addresses (customer_id NUMBER, address_id NUMBER, address_type TEXT);"
      }
    ],
    [
      {
        "question": "How many customers used Visa?",
        "query": "SELECT COUNT ( DISTINCT customer_name ) FROM customers WHERE payment_method = 'Visa'",
        "schema": "CREATE TABLE Products (product_id NUMBER); CREATE TABLE Customers (customer_phone TEXT, customer_name TEXT, payment_method TEXT, customer_id NUMBER); CREATE TABLE Customer_Addresses (customer_id NUMBER); CREATE TABLE Regular_Orders (distributer_id NUMBER);"
      },
      {
        "question": "And what are their names?",
        "query": "SELECT customer_name FROM customers WHERE payment_method = 'Visa'",
        "schema": "CREATE TABLE Products (product_id NUMBER, product_name TEXT); CREATE TABLE Regular_Orders (distributer_id NUMBER); CREATE TABLE Customers (payment_method TEXT, customer_phone TEXT, customer_name TEXT, customer_id NUMBER); CREATE TABLE Customer_Addresses (customer_id NUMBER);"
      },
      {
        "question": "How about names of first five customers who used any type of payment?",
        "query": "SELECT customer_name FROM customers ORDER BY date_became_customer LIMIT 5",
        "schema": "CREATE TABLE Regular_Orders (distributer_id NUMBER); CREATE TABLE Products (product_id NUMBER, product_name TEXT); CREATE TABLE Customers (customer_id NUMBER, customer_name TEXT, payment_method TEXT, customer_phone TEXT, date_became_customer TIME); CREATE TABLE Customer_Addresses (customer_id NUMBER);"
      }
    ]
  ],
  "music_2": [
    [
      {
        "question": "Can you list all the instruments used in the song Le Pop?",
        "query": "SELECT DISTINCT instrument FROM instruments AS t1 JOIN songs AS t2 ON t1.songid = t2.songid WHERE title = \"Le Pop\"",
        "schema": "CREATE TABLE Performance (SongId NUMBER); CREATE TABLE Tracklists (SongId NUMBER); CREATE TABLE Songs (Title TEXT, SongId NUMBER); CREATE TABLE Instruments (SongId NUMBER, Instrument TEXT, BandmateId NUMBER);"
      },
      {
        "question": "Okay, how many instruments are used in the song \"Baby\"?",
        "query": "SELECT COUNT ( DISTINCT instrument ) FROM instruments AS t1 JOIN songs AS t2 ON t1.songid = t2.songid WHERE title = \"Baby\"",
        "schema": "CREATE TABLE Songs (Title TEXT, SongId NUMBER); CREATE TABLE Tracklists (SongId NUMBER); CREATE TABLE Instruments (BandmateId NUMBER, Instrument TEXT, SongId NUMBER); CREATE TABLE Performance (SongId NUMBER);"
      }
    ]
  ]
}