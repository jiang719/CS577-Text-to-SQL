{
  "flight_2": [
    [
      {
        "question": "What are all the airlines?",
        "query": "SELECT * FROM airlines",
        "schema": "CREATE TABLE airlines (uid NUMBER, Airline TEXT); CREATE TABLE flights (Airline NUMBER);"
      },
      {
        "question": "Of these, which is Jetblue Airways?",
        "query": "SELECT * FROM airlines WHERE airline = \"JetBlue Airways\"",
        "schema": "CREATE TABLE airlines (uid NUMBER, Airline TEXT, Abbreviation TEXT); CREATE TABLE flights (Airline NUMBER);"
      },
      {
        "question": "What is the country corresponding it?",
        "query": "SELECT country FROM airlines WHERE airline = \"JetBlue Airways\"",
        "schema": "CREATE TABLE airlines (uid NUMBER, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE airports (Country TEXT, CountryAbbrev TEXT); CREATE TABLE flights (Airline NUMBER);"
      }
    ],
    [
      {
        "question": "What are all the abbreviations?",
        "query": "SELECT abbreviation FROM airlines",
        "schema": "CREATE TABLE airlines (Abbreviation TEXT);"
      },
      {
        "question": "What is the abbreviation for Jetblue Airways?",
        "query": "SELECT abbreviation FROM airlines WHERE airline = \"JetBlue Airways\"",
        "schema": "CREATE TABLE airlines (uid NUMBER, Airline TEXT, Abbreviation TEXT);"
      }
    ],
    [
      {
        "question": "List all airline names and their abbreviations.",
        "query": "SELECT airline , abbreviation FROM airlines",
        "schema": "CREATE TABLE airlines (Airline TEXT, Abbreviation TEXT); CREATE TABLE flights (Airline NUMBER);"
      },
      {
        "question": "Of these, list only those in the USA.",
        "query": "SELECT airline , abbreviation FROM airlines WHERE country = \"USA\"",
        "schema": "CREATE TABLE airlines (Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE airports (Country TEXT, CountryAbbrev TEXT); CREATE TABLE flights (Airline NUMBER);"
      }
    ],
    [
      {
        "question": "Find all information about the airport in the city Anthony.",
        "query": "SELECT * FROM airports WHERE city = \"Anthony\"",
        "schema": "CREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT);"
      },
      {
        "question": "What is the airport code and airport name?",
        "query": "SELECT airportcode , airportname FROM airports WHERE city = \"Anthony\"",
        "schema": "CREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT);"
      }
    ],
    [
      {
        "question": "What are all the airlines?",
        "query": "SELECT * FROM airlines",
        "schema": "CREATE TABLE airlines (uid NUMBER, Airline TEXT); CREATE TABLE flights (Airline NUMBER);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT count(*) FROM airlines",
        "schema": "CREATE TABLE airlines (uid NUMBER, Airline TEXT); CREATE TABLE flights (Airline NUMBER);"
      }
    ],
    [
      {
        "question": "What are all the airports?",
        "query": "SELECT * FROM airports",
        "schema": "CREATE TABLE airports (AirportCode TEXT, AirportName TEXT);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT count(*) FROM airports",
        "schema": "CREATE TABLE airports (AirportCode TEXT, AirportName TEXT);"
      }
    ],
    [
      {
        "question": "What are all the flights?",
        "query": "SELECT * FROM flights",
        "schema": "CREATE TABLE flights (Airline NUMBER, FlightNo NUMBER, DestAirport TEXT);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT count(*) FROM flights",
        "schema": "CREATE TABLE flights (Airline NUMBER, FlightNo NUMBER, DestAirport TEXT);"
      }
    ],
    [
      {
        "question": "What are all the airline names?",
        "query": "SELECT airline FROM airlines",
        "schema": "CREATE TABLE airlines (uid NUMBER, Airline TEXT); CREATE TABLE flights (Airline NUMBER);"
      },
      {
        "question": "Of this, which has the abbreviation 'UAL'?",
        "query": "SELECT airline FROM airlines WHERE abbreviation = \"UAL\"",
        "schema": "CREATE TABLE airlines (uid NUMBER, Airline TEXT, Abbreviation TEXT); CREATE TABLE flights (Airline NUMBER);"
      }
    ],
    [
      {
        "question": "What are the names of the airlines in the USA?",
        "query": "SELECT airline FROM airlines WHERE country = \"USA\"",
        "schema": "CREATE TABLE airlines (Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE airports (Country TEXT, CountryAbbrev TEXT); CREATE TABLE flights (Airline NUMBER);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT count(*) FROM airlines WHERE country = \"USA\"",
        "schema": "CREATE TABLE airlines (uid NUMBER, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE airports (Country TEXT, CountryAbbrev TEXT); CREATE TABLE flights (Airline NUMBER);"
      }
    ],
    [
      {
        "question": "What are the city and country for all airports?",
        "query": "SELECT city , country FROM airports",
        "schema": "CREATE TABLE airports (City TEXT, Country TEXT, CountryAbbrev TEXT);"
      },
      {
        "question": "Of these, what are the city and country for Alton airport?",
        "query": "SELECT city , country FROM airports WHERE airportname = \"Alton\"",
        "schema": "CREATE TABLE airports (City TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT);"
      }
    ],
    [
      {
        "question": "What are all the airport names?",
        "query": "SELECT airportname FROM airports",
        "schema": "CREATE TABLE airports (AirportCode TEXT, AirportName TEXT);"
      },
      {
        "question": "Of these, which has code 'AKO'?",
        "query": "SELECT airportname FROM airports WHERE airportcode = \"AKO\"",
        "schema": "CREATE TABLE airports (AirportCode TEXT, AirportName TEXT);"
      }
    ],
    [
      {
        "question": "What are all the airport names?",
        "query": "SELECT airportname FROM airports",
        "schema": "CREATE TABLE airports (AirportCode TEXT, AirportName TEXT);"
      },
      {
        "question": "Which is in Aberdeen?",
        "query": "SELECT airportname FROM airports WHERE city = \"Aberdeen\"",
        "schema": "CREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT);"
      }
    ],
    [
      {
        "question": "What are all the flights departing from 'APG'?",
        "query": "SELECT * FROM flights WHERE sourceairport = \"APG\"",
        "schema": "CREATE TABLE airports (AirportCode TEXT, AirportName TEXT); CREATE TABLE flights (FlightNo NUMBER, SourceAirport TEXT, DestAirport TEXT);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT count(*) FROM flights WHERE sourceairport = \"APG\"",
        "schema": "CREATE TABLE airports (AirportCode TEXT, AirportName TEXT); CREATE TABLE flights (FlightNo NUMBER, SourceAirport TEXT, DestAirport TEXT);"
      }
    ],
    [
      {
        "question": "What flights land in ATO?",
        "query": "SELECT * FROM flights WHERE destairport = \"ATO\"",
        "schema": "CREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT); CREATE TABLE flights (FlightNo NUMBER, SourceAirport TEXT, DestAirport TEXT);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT count(*) FROM flights WHERE destairport = \"ATO\"",
        "schema": "CREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT); CREATE TABLE flights (FlightNo NUMBER, SourceAirport TEXT, DestAirport TEXT);"
      }
    ],
    [
      {
        "question": "What are all the flights derparting from Aberdeen?",
        "query": "SELECT * FROM flights AS t1 JOIN airports AS t2 ON t1.sourceairport = t2.airportcode WHERE t2.city = \"Aberdeen\"",
        "schema": "CREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT); CREATE TABLE flights (Airline NUMBER, FlightNo NUMBER, SourceAirport TEXT, DestAirport TEXT);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT count(*) FROM flights AS t1 JOIN airports AS t2 ON t1.sourceairport = t2.airportcode WHERE t2.city = \"Aberdeen\"",
        "schema": "CREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT); CREATE TABLE flights (Airline NUMBER, FlightNo NUMBER, SourceAirport TEXT, DestAirport TEXT);"
      }
    ],
    [
      {
        "question": "What are all the flights arriving in Aberdeen.",
        "query": "SELECT * FROM flights AS t1 JOIN airports AS t2 ON t1.destairport = t2.airportcode WHERE t2.city = \"Aberdeen\"",
        "schema": "CREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT); CREATE TABLE flights (FlightNo NUMBER, SourceAirport TEXT, DestAirport TEXT);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT count(*) FROM flights AS t1 JOIN airports AS t2 ON t1.destairport = t2.airportcode WHERE t2.city = \"Aberdeen\"",
        "schema": "CREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT); CREATE TABLE flights (FlightNo NUMBER, SourceAirport TEXT, DestAirport TEXT);"
      }
    ],
    [
      {
        "question": "What are all the flights that leave from Aberdeen?",
        "query": "SELECT * FROM flights AS t1 JOIN airports AS t2 ON t1.sourceairport = t2.airportcode WHERE t2.city = \"Aberdeen\"",
        "schema": "CREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT); CREATE TABLE flights (FlightNo NUMBER, SourceAirport TEXT, DestAirport TEXT);"
      },
      {
        "question": "Of those, which land in Ashley?",
        "query": "SELECT * FROM flights AS t1 JOIN airports AS t2 ON t1.destairport = t2.airportcode JOIN airports AS t3 ON t1.sourceairport = t3.airportcode WHERE t2.city = \"Ashley\" AND t3.city = \"Aberdeen\"",
        "schema": "CREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT); CREATE TABLE flights (FlightNo NUMBER, SourceAirport TEXT, DestAirport TEXT);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT count(*) FROM flights AS t1 JOIN airports AS t2 ON t1.destairport = t2.airportcode JOIN airports AS t3 ON t1.sourceairport = t3.airportcode WHERE t2.city = \"Ashley\" AND t3.city = \"Aberdeen\"",
        "schema": "CREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT); CREATE TABLE flights (FlightNo NUMBER, SourceAirport TEXT, DestAirport TEXT);"
      }
    ],
    [
      {
        "question": "What are all the flights on Jetblue Airways?",
        "query": "SELECT * FROM flights AS t1 JOIN airlines AS t2 ON t1.airline = t2.uid WHERE t2.airline = \"JetBlue Airways\"",
        "schema": "CREATE TABLE airlines (uid NUMBER, Airline TEXT, Abbreviation TEXT); CREATE TABLE airports (AirportCode TEXT, AirportName TEXT); CREATE TABLE flights (Airline NUMBER, FlightNo NUMBER, SourceAirport TEXT, DestAirport TEXT);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT count(*) FROM flights AS t1 JOIN airlines AS t2 ON t1.airline = t2.uid WHERE t2.airline = \"JetBlue Airways\"",
        "schema": "CREATE TABLE airlines (uid NUMBER, Airline TEXT, Abbreviation TEXT); CREATE TABLE airports (AirportCode TEXT, AirportName TEXT); CREATE TABLE flights (Airline NUMBER, FlightNo NUMBER, SourceAirport TEXT, DestAirport TEXT);"
      }
    ],
    [
      {
        "question": "What are the United Airlines flights?",
        "query": "SELECT * FROM airlines WHERE airline = \"United Airlines\"",
        "schema": "CREATE TABLE airlines (uid NUMBER, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE flights (Airline NUMBER, FlightNo NUMBER);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT count(*) FROM airlines WHERE airline = \"United Airlines\"",
        "schema": "CREATE TABLE airlines (uid NUMBER, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE flights (Airline NUMBER, FlightNo NUMBER);"
      },
      {
        "question": "How many land in ASY Airport?",
        "query": "SELECT count(*) FROM airlines AS t1 JOIN flights AS t2 ON t2.airline = t1.uid WHERE t1.airline = \"United Airlines\" AND t2.destairport = \"ASY\"",
        "schema": "CREATE TABLE airlines (uid NUMBER, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE airports (AirportCode TEXT, AirportName TEXT); CREATE TABLE flights (Airline NUMBER, FlightNo NUMBER, SourceAirport TEXT, DestAirport TEXT);"
      }
    ],
    [
      {
        "question": "What are the United Airlines flights?",
        "query": "SELECT * FROM airlines WHERE airline = \"United Airlines\"",
        "schema": "CREATE TABLE airlines (uid NUMBER, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE flights (Airline NUMBER, FlightNo NUMBER);"
      },
      {
        "question": "Which ones leave from AHD?",
        "query": "SELECT * FROM airlines AS t1 JOIN flights AS t2 ON t2.airline = t1.uid WHERE t1.airline = \"United Airlines\" AND t2.sourceairport = \"AHD\"",
        "schema": "CREATE TABLE airlines (uid NUMBER, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE flights (Airline NUMBER, FlightNo NUMBER);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT count(*) FROM airlines AS t1 JOIN flights AS t2 ON t2.airline = t1.uid WHERE t1.airline = \"United Airlines\" AND t2.sourceairport = \"AHD\"",
        "schema": "CREATE TABLE airlines (uid NUMBER, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE flights (Airline NUMBER, FlightNo NUMBER, SourceAirport TEXT);"
      }
    ],
    [
      {
        "question": "Which United Airlines flights fly into Aberdeen?",
        "query": "SELECT * FROM flights AS t1 JOIN airports AS t2 ON t1.destairport = t2.airportcode JOIN airlines AS t3 ON t3.uid = t1.airline WHERE t2.city = \"Aberdeen\" AND t3.airline = \"United Airlines\"",
        "schema": "CREATE TABLE airlines (uid NUMBER, Airline TEXT, Country TEXT); CREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT); CREATE TABLE flights (Airline NUMBER, FlightNo NUMBER, SourceAirport TEXT, DestAirport TEXT);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT count(*) FROM flights AS t1 JOIN airports AS t2 ON t1.destairport = t2.airportcode JOIN airlines AS t3 ON t3.uid = t1.airline WHERE t2.city = \"Aberdeen\" AND t3.airline = \"United Airlines\"",
        "schema": "CREATE TABLE airlines (uid NUMBER, Airline TEXT, Country TEXT); CREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT); CREATE TABLE flights (Airline NUMBER, FlightNo NUMBER, SourceAirport TEXT, DestAirport TEXT);"
      }
    ],
    [
      {
        "question": "Name all cities that have destination airports.",
        "query": "SELECT t1.city FROM airports AS t1 JOIN flights AS t2 ON t1.airportcode = t2.destairport",
        "schema": "CREATE TABLE airports (City TEXT, AirportName TEXT);"
      },
      {
        "question": "Order them by number of arriving flights.",
        "query": "SELECT t1.city FROM airports AS t1 JOIN flights AS t2 ON t1.airportcode = t2.destairport GROUP BY t1.city ORDER BY count(*) DESC",
        "schema": "CREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT); CREATE TABLE flights (FlightNo NUMBER, SourceAirport TEXT, DestAirport TEXT);"
      },
      {
        "question": "Which one has the most?",
        "query": "SELECT t1.city FROM airports AS t1 JOIN flights AS t2 ON t1.airportcode = t2.destairport GROUP BY t1.city ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT); CREATE TABLE flights (FlightNo NUMBER, SourceAirport TEXT, DestAirport TEXT);"
      }
    ],
    [
      {
        "question": "Name all cities that have source airports.",
        "query": "SELECT t1.city FROM airports AS t1 JOIN flights AS t2 ON t1.airportcode = t2.sourceairport",
        "schema": "CREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT);"
      },
      {
        "question": "Order them by number of departing flights.",
        "query": "SELECT t1.city FROM airports AS t1 JOIN flights AS t2 ON t1.airportcode = t2.sourceairport GROUP BY t1.city ORDER BY count(*) DESC",
        "schema": "CREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT); CREATE TABLE flights (SourceAirport TEXT, DestAirport TEXT);"
      },
      {
        "question": "Which one has the most?",
        "query": "SELECT t1.city FROM airports AS t1 JOIN flights AS t2 ON t1.airportcode = t2.sourceairport GROUP BY t1.city ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT); CREATE TABLE flights (SourceAirport TEXT, DestAirport TEXT);"
      }
    ],
    [
      {
        "question": "What are airport codes of any airport with a arriving flight?",
        "query": "SELECT t1.airportcode FROM airports AS t1 JOIN flights AS t2 ON t1.airportcode = t2.destairport",
        "schema": "CREATE TABLE airports (AirportCode TEXT);"
      },
      {
        "question": "Also include codes of airports with departure flights.",
        "query": "SELECT t1.airportcode FROM airports AS t1 JOIN flights AS t2 ON t1.airportcode = t2.destairport OR t1.airportcode = t2.sourceairport",
        "schema": "CREATE TABLE airports (AirportCode TEXT, AirportName TEXT); CREATE TABLE flights (SourceAirport TEXT, DestAirport TEXT);"
      },
      {
        "question": "Which one has the highest number of flights?",
        "query": "SELECT t1.airportcode FROM airports AS t1 JOIN flights AS t2 ON t1.airportcode = t2.destairport OR t1.airportcode = t2.sourceairport GROUP BY t1.airportcode ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE airports (AirportCode TEXT, AirportName TEXT); CREATE TABLE flights (SourceAirport TEXT, DestAirport TEXT);"
      }
    ],
    [
      {
        "question": "What are airport codes of any airport with a arriving flight?",
        "query": "SELECT t1.airportcode FROM airports AS t1 JOIN flights AS t2 ON t1.airportcode = t2.destairport",
        "schema": "CREATE TABLE airports (AirportCode TEXT);"
      },
      {
        "question": "Also include codes of airports with departure flights.",
        "query": "SELECT t1.airportcode FROM airports AS t1 JOIN flights AS t2 ON t1.airportcode = t2.destairport OR t1.airportcode = t2.sourceairport",
        "schema": "CREATE TABLE airports (AirportCode TEXT, AirportName TEXT); CREATE TABLE flights (SourceAirport TEXT, DestAirport TEXT);"
      },
      {
        "question": "Which one has the least number of flights?",
        "query": "SELECT t1.airportcode FROM airports AS t1 JOIN flights AS t2 ON t1.airportcode = t2.destairport OR t1.airportcode = t2.sourceairport GROUP BY t1.airportcode ORDER BY count(*) LIMIT 1",
        "schema": "CREATE TABLE airports (AirportCode TEXT, AirportName TEXT); CREATE TABLE flights (SourceAirport TEXT, DestAirport TEXT);"
      }
    ],
    [
      {
        "question": "Count the number of flights by airline.",
        "query": "SELECT count(*) , t1.airline FROM airlines AS t1 JOIN flights AS t2 ON t1.uid = t2.airline GROUP BY t1.airline",
        "schema": "CREATE TABLE airlines (uid NUMBER, Airline TEXT); CREATE TABLE flights (Airline NUMBER, FlightNo NUMBER);"
      },
      {
        "question": "Which airline has the most?",
        "query": "SELECT t1.airline FROM airlines AS t1 JOIN flights AS t2 ON t1.uid = t2.airline GROUP BY t1.airline ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE airlines (uid NUMBER, Airline TEXT); CREATE TABLE flights (Airline NUMBER, FlightNo NUMBER);"
      }
    ],
    [
      {
        "question": "What are all the airline abbreviations and what countries are they in?",
        "query": "SELECT abbreviation , country FROM airlines",
        "schema": "CREATE TABLE airlines (Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE airports (Country TEXT, CountryAbbrev TEXT);"
      },
      {
        "question": "Order them by the number of flights that they have.",
        "query": "SELECT t1.abbreviation , t1.country FROM airlines AS t1 JOIN flights AS t2 ON t1.uid = t2.airline GROUP BY t1.airline ORDER BY count(*)",
        "schema": "CREATE TABLE airlines (Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE airports (Country TEXT, CountryAbbrev TEXT); CREATE TABLE flights (Airline NUMBER, FlightNo NUMBER);"
      },
      {
        "question": "Which one has the fewest?",
        "query": "SELECT t1.abbreviation , t1.country FROM airlines AS t1 JOIN flights AS t2 ON t1.uid = t2.airline GROUP BY t1.airline ORDER BY count(*) LIMIT 1",
        "schema": "CREATE TABLE airlines (uid NUMBER, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE airports (Country TEXT, CountryAbbrev TEXT); CREATE TABLE flights (Airline NUMBER, FlightNo NUMBER);"
      }
    ],
    [
      {
        "question": "Which flights leave from AHD?",
        "query": "SELECT * FROM flights WHERE sourceairport = \"AHD\"",
        "schema": "CREATE TABLE airlines (uid NUMBER); CREATE TABLE airports (AirportCode TEXT, AirportName TEXT); CREATE TABLE flights (Airline NUMBER, FlightNo NUMBER, SourceAirport TEXT, DestAirport TEXT);"
      },
      {
        "question": "What are their airlines?",
        "query": "SELECT t1.airline FROM airlines AS t1 JOIN flights AS t2 ON t1.uid = t2.airline WHERE t2.sourceairport = \"AHD\"",
        "schema": "CREATE TABLE airlines (uid NUMBER, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE airports (AirportCode TEXT, AirportName TEXT); CREATE TABLE flights (Airline NUMBER, FlightNo NUMBER, SourceAirport TEXT, DestAirport TEXT);"
      }
    ],
    [
      {
        "question": "Which flights arrive in AHD?",
        "query": "SELECT * FROM flights WHERE destairport = \"AHD\"",
        "schema": "CREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT); CREATE TABLE flights (FlightNo NUMBER, SourceAirport TEXT, DestAirport TEXT);"
      },
      {
        "question": "What are their airlines?",
        "query": "SELECT t1.airline FROM airlines AS t1 JOIN flights AS t2 ON t1.uid = t2.airline WHERE t2.destairport = \"AHD\"",
        "schema": "CREATE TABLE airlines (uid NUMBER, Airline TEXT, Abbreviation TEXT); CREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT); CREATE TABLE flights (Airline NUMBER, FlightNo NUMBER, SourceAirport TEXT, DestAirport TEXT);"
      }
    ],
    [
      {
        "question": "Which airlines have flights departing from APG?",
        "query": "SELECT t1.airline FROM airlines AS t1 JOIN flights AS t2 ON t1.uid = t2.airline WHERE t2.sourceairport = \"APG\"",
        "schema": "CREATE TABLE airlines (uid NUMBER, Airline TEXT, Abbreviation TEXT); CREATE TABLE airports (AirportCode TEXT, AirportName TEXT); CREATE TABLE flights (Airline NUMBER, FlightNo NUMBER, SourceAirport TEXT, DestAirport TEXT);"
      },
      {
        "question": "Of those, which also have flights from CVO?",
        "query": "SELECT t1.airline FROM airlines AS t1 JOIN flights AS t2 ON t1.uid = t2.airline WHERE t2.sourceairport = \"APG\" INTERSECT SELECT t1.airline FROM airlines AS t1 JOIN flights AS t2 ON t1.uid = t2.airline WHERE t2.sourceairport = \"CVO\"",
        "schema": "CREATE TABLE airlines (uid NUMBER, Airline TEXT, Abbreviation TEXT); CREATE TABLE airports (AirportCode TEXT, AirportName TEXT); CREATE TABLE flights (Airline NUMBER, FlightNo NUMBER, SourceAirport TEXT, DestAirport TEXT);"
      }
    ],
    [
      {
        "question": "Which airlines have flights from CVO?",
        "query": "SELECT t1.airline FROM airlines AS t1 JOIN flights AS t2 ON t1.uid = t2.airline WHERE t2.sourceairport = \"CVO\"",
        "schema": "CREATE TABLE airlines (uid NUMBER, Airline TEXT, Country TEXT); CREATE TABLE flights (Airline NUMBER, FlightNo NUMBER);"
      },
      {
        "question": "Of these, which do not have flights from APG?",
        "query": "SELECT t1.airline FROM airlines AS t1 JOIN flights AS t2 ON t1.uid = t2.airline WHERE t2.sourceairport = \"CVO\" EXCEPT SELECT t1.airline FROM airlines AS t1 JOIN flights AS t2 ON t1.uid = t2.airline WHERE t2.sourceairport = \"APG\"",
        "schema": "CREATE TABLE airlines (uid NUMBER, Airline TEXT, Country TEXT); CREATE TABLE flights (Airline NUMBER, FlightNo NUMBER, SourceAirport TEXT);"
      }
    ],
    [
      {
        "question": "What are all the airlines?",
        "query": "SELECT DISTINCT airline FROM airlines",
        "schema": "CREATE TABLE airlines (uid NUMBER, Airline TEXT); CREATE TABLE flights (Airline NUMBER);"
      },
      {
        "question": "Which ones have more than 10 flights?",
        "query": "SELECT t1.airline FROM airlines AS t1 JOIN flights AS t2 ON t1.uid = t2.airline GROUP BY t1.airline HAVING count(*) > 10",
        "schema": "CREATE TABLE airlines (uid NUMBER, Airline TEXT); CREATE TABLE flights (Airline NUMBER, FlightNo NUMBER);"
      }
    ],
    [
      {
        "question": "What are all the airlines?",
        "query": "SELECT DISTINCT airline FROM airlines",
        "schema": "CREATE TABLE airlines (uid NUMBER, Airline TEXT); CREATE TABLE flights (Airline NUMBER);"
      },
      {
        "question": "Which ones have less than 200 flights?",
        "query": "SELECT t1.airline FROM airlines AS t1 JOIN flights AS t2 ON t1.uid = t2.airline GROUP BY t1.airline HAVING count(*) < 200",
        "schema": "CREATE TABLE airlines (uid NUMBER, Airline TEXT); CREATE TABLE flights (Airline NUMBER, FlightNo NUMBER);"
      }
    ],
    [
      {
        "question": "What are all the flight numbers?",
        "query": "SELECT flightno FROM flights",
        "schema": "CREATE TABLE flights (FlightNo NUMBER, DestAirport TEXT);"
      },
      {
        "question": "Which belong to United Airlines?",
        "query": "SELECT t1.flightno FROM flights AS t1 JOIN airlines AS t2 ON t2.uid = t1.airline WHERE t2.airline = \"United Airlines\"",
        "schema": "CREATE TABLE airlines (uid NUMBER, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE airports (AirportCode TEXT); CREATE TABLE flights (Airline NUMBER, FlightNo NUMBER, DestAirport TEXT);"
      }
    ],
    [
      {
        "question": "What are all the flight numbers?",
        "query": "SELECT flightno FROM flights",
        "schema": "CREATE TABLE flights (FlightNo NUMBER, DestAirport TEXT);"
      },
      {
        "question": "Of these, which correspond to flights leaving from APG?",
        "query": "SELECT flightno FROM flights WHERE sourceairport = \"APG\"",
        "schema": "CREATE TABLE flights (FlightNo NUMBER, DestAirport TEXT);"
      }
    ],
    [
      {
        "question": "What are all the flight numbers?",
        "query": "SELECT flightno FROM flights",
        "schema": "CREATE TABLE flights (FlightNo NUMBER, DestAirport TEXT);"
      },
      {
        "question": "Also, which numbers are for flights that land in APG?",
        "query": "SELECT flightno FROM flights WHERE destairport = \"APG\"",
        "schema": "CREATE TABLE airports (AirportCode TEXT); CREATE TABLE flights (FlightNo NUMBER, DestAirport TEXT);"
      }
    ],
    [
      {
        "question": "What are all the flight numbers?",
        "query": "SELECT flightno FROM flights",
        "schema": "CREATE TABLE flights (FlightNo NUMBER, DestAirport TEXT);"
      },
      {
        "question": "Of these, which are departure flights?",
        "query": "SELECT t1.flightno FROM flights AS t1 JOIN airports AS t2 ON t1.sourceairport = t2.airportcode",
        "schema": "CREATE TABLE flights (FlightNo NUMBER, DestAirport TEXT);"
      },
      {
        "question": "Which leave from Aberdeen?",
        "query": "SELECT t1.flightno FROM flights AS t1 JOIN airports AS t2 ON t1.sourceairport = t2.airportcode WHERE t2.city = \"Aberdeen\"",
        "schema": "CREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT); CREATE TABLE flights (FlightNo NUMBER, SourceAirport TEXT, DestAirport TEXT);"
      }
    ],
    [
      {
        "question": "What are all the flight numbers?",
        "query": "SELECT flightno FROM flights",
        "schema": "CREATE TABLE flights (FlightNo NUMBER, DestAirport TEXT);"
      },
      {
        "question": "Of these, which are arrival flights?",
        "query": "SELECT t1.flightno FROM flights AS t1 JOIN airports AS t2 ON t1.destairport = t2.airportcode",
        "schema": "CREATE TABLE flights (FlightNo NUMBER, DestAirport TEXT);"
      },
      {
        "question": "Which land in Aberdeen?",
        "query": "SELECT t1.flightno FROM flights AS t1 JOIN airports AS t2 ON t1.destairport = t2.airportcode WHERE t2.city = \"Aberdeen\"",
        "schema": "CREATE TABLE airports (City TEXT, AirportCode TEXT, Country TEXT); CREATE TABLE flights (FlightNo NUMBER, SourceAirport TEXT, DestAirport TEXT);"
      }
    ],
    [
      {
        "question": "What flights land in Aberdeen?",
        "query": "SELECT * FROM flights AS t1 JOIN airports AS t2 ON t1.destairport = t2.airportcode WHERE t2.city = \"Aberdeen\"",
        "schema": "CREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT); CREATE TABLE flights (FlightNo NUMBER, SourceAirport TEXT, DestAirport TEXT);"
      },
      {
        "question": "Also include flights that land in Abilene.",
        "query": "SELECT * FROM flights AS t1 JOIN airports AS t2 ON t1.destairport = t2.airportcode WHERE t2.city = \"Aberdeen\" OR t2.city = \"Abilene\"",
        "schema": "CREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT); CREATE TABLE flights (FlightNo NUMBER, SourceAirport TEXT, DestAirport TEXT);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT count(*) FROM flights AS t1 JOIN airports AS t2 ON t1.destairport = t2.airportcode WHERE t2.city = \"Aberdeen\" OR t2.city = \"Abilene\"",
        "schema": "CREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT); CREATE TABLE flights (FlightNo NUMBER, SourceAirport TEXT, DestAirport TEXT);"
      }
    ],
    [
      {
        "question": "What are the source airports?",
        "query": "SELECT sourceairport FROM flights",
        "schema": "CREATE TABLE airports (AirportCode TEXT, AirportName TEXT); CREATE TABLE flights (SourceAirport TEXT);"
      },
      {
        "question": "Also include the destination airports.",
        "query": "SELECT sourceairport FROM flights UNION SELECT destairport FROM flights",
        "schema": "CREATE TABLE airports (AirportCode TEXT, AirportName TEXT); CREATE TABLE flights (SourceAirport TEXT, DestAirport TEXT);"
      },
      {
        "question": "Which airports are not included?",
        "query": "SELECT airportname FROM airports WHERE airportcode NOT IN (SELECT sourceairport FROM flights UNION SELECT destairport FROM flights)",
        "schema": "CREATE TABLE airports (AirportCode TEXT, AirportName TEXT); CREATE TABLE flights (SourceAirport TEXT, DestAirport TEXT);"
      }
    ]
  ],
  "pets_1": [
    [
      {
        "question": "What information is there on pets?",
        "query": "SELECT * FROM pets",
        "schema": "CREATE TABLE Has_Pet (StuID NUMBER, PetID NUMBER); CREATE TABLE Pets (PetID NUMBER, PetType TEXT);"
      },
      {
        "question": "Which pets weigh more than 10?",
        "query": "SELECT * FROM pets WHERE weight > 10",
        "schema": "CREATE TABLE Has_Pet (StuID NUMBER, PetID NUMBER); CREATE TABLE Pets (PetID NUMBER, PetType TEXT, weight NUMBER);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT count(*) FROM pets WHERE weight > 10",
        "schema": "CREATE TABLE Has_Pet (StuID NUMBER, PetID NUMBER); CREATE TABLE Pets (PetID NUMBER, PetType TEXT, weight NUMBER);"
      }
    ],
    [
      {
        "question": "Order the pets by age",
        "query": "SELECT * FROM pets ORDER BY pet_age",
        "schema": "CREATE TABLE Student (StuID NUMBER, Age NUMBER); CREATE TABLE Has_Pet (StuID NUMBER, PetID NUMBER); CREATE TABLE Pets (PetID NUMBER, PetType TEXT, pet_age NUMBER);"
      },
      {
        "question": "How much does each one weigh?",
        "query": "SELECT weight FROM pets ORDER BY pet_age",
        "schema": "CREATE TABLE Student (StuID NUMBER, Age NUMBER); CREATE TABLE Has_Pet (StuID NUMBER, PetID NUMBER); CREATE TABLE Pets (PetID NUMBER, PetType TEXT, pet_age NUMBER, weight NUMBER);"
      },
      {
        "question": "What about the first one?",
        "query": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1",
        "schema": "CREATE TABLE Student (StuID NUMBER, Age NUMBER); CREATE TABLE Has_Pet (StuID NUMBER, PetID NUMBER); CREATE TABLE Pets (PetID NUMBER, PetType TEXT, pet_age NUMBER, weight NUMBER);"
      }
    ],
    [
      {
        "question": "What are the different types of pets?",
        "query": "SELECT DISTINCT pettype FROM pets",
        "schema": "CREATE TABLE Has_Pet (PetID NUMBER); CREATE TABLE Pets (PetID NUMBER, PetType TEXT);"
      },
      {
        "question": "For each of those types, what is the maximum weight?",
        "query": "SELECT max(weight) , pettype FROM pets GROUP BY pettype",
        "schema": "CREATE TABLE Has_Pet (PetID NUMBER); CREATE TABLE Pets (PetID NUMBER, PetType TEXT, weight NUMBER);"
      }
    ],
    [
      {
        "question": "Which pets are owned by students older than 20?",
        "query": "SELECT * FROM student AS t1 JOIN has_pet AS t2 ON t1.stuid = t2.stuid WHERE t1.age > 20",
        "schema": "CREATE TABLE Student (StuID NUMBER, Age NUMBER); CREATE TABLE Has_Pet (StuID NUMBER, PetID NUMBER); CREATE TABLE Pets (PetID NUMBER, PetType TEXT, pet_age NUMBER);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT count(*) FROM student AS t1 JOIN has_pet AS t2 ON t1.stuid = t2.stuid WHERE t1.age > 20",
        "schema": "CREATE TABLE Student (StuID NUMBER, Age NUMBER); CREATE TABLE Has_Pet (StuID NUMBER, PetID NUMBER); CREATE TABLE Pets (PetID NUMBER, PetType TEXT, pet_age NUMBER);"
      }
    ],
    [
      {
        "question": "Who are the female students?",
        "query": "SELECT * FROM student WHERE sex = 'F'",
        "schema": "CREATE TABLE Student (StuID NUMBER, LName TEXT, Sex TEXT);"
      },
      {
        "question": "Of those, who has a pet?",
        "query": "SELECT * FROM student AS t1 JOIN has_pet AS t2 ON t1.stuid = t2.stuid WHERE t1.sex = 'F'",
        "schema": "CREATE TABLE Student (StuID NUMBER, LName TEXT, Sex TEXT); CREATE TABLE Has_Pet (StuID NUMBER, PetID NUMBER); CREATE TABLE Pets (PetID NUMBER, PetType TEXT);"
      },
      {
        "question": "How many of those have dogs?",
        "query": "SELECT count(*) FROM student AS t1 JOIN has_pet AS t2 ON t1.stuid = t2.stuid JOIN pets AS t3 ON t2.petid = t3.petid WHERE t1.sex = 'F' AND t3.pettype = 'dog'",
        "schema": "CREATE TABLE Student (StuID NUMBER, LName TEXT, Sex TEXT); CREATE TABLE Has_Pet (StuID NUMBER, PetID NUMBER); CREATE TABLE Pets (PetID NUMBER, PetType TEXT);"
      }
    ],
    [
      {
        "question": "What are the different pet types?",
        "query": "SELECT DISTINCT pettype FROM pets",
        "schema": "CREATE TABLE Has_Pet (StuID NUMBER, PetID NUMBER); CREATE TABLE Pets (PetID NUMBER, PetType TEXT);"
      },
      {
        "question": "How many exist?",
        "query": "SELECT count(DISTINCT pettype) FROM pets",
        "schema": "CREATE TABLE Has_Pet (StuID NUMBER, PetID NUMBER); CREATE TABLE Pets (PetID NUMBER, PetType TEXT);"
      }
    ],
    [
      {
        "question": "what is the first name of every student?",
        "query": "SELECT DISTINCT t1.fname FROM student AS t1",
        "schema": "CREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT);"
      },
      {
        "question": "Of those names, which ones correspond to somebody who has a cat?",
        "query": "SELECT DISTINCT t1.fname FROM student AS t1 JOIN has_pet AS t2 ON t1.stuid = t2.stuid JOIN pets AS t3 ON t3.petid = t2.petid WHERE t3.pettype = 'cat'",
        "schema": "CREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT); CREATE TABLE Has_Pet (StuID NUMBER, PetID NUMBER); CREATE TABLE Pets (PetType TEXT);"
      },
      {
        "question": "Also, combine those names with those who have a dog.",
        "query": "SELECT DISTINCT t1.fname FROM student AS t1 JOIN has_pet AS t2 ON t1.stuid = t2.stuid JOIN pets AS t3 ON t3.petid = t2.petid WHERE t3.pettype = 'cat' OR t3.pettype = 'dog'",
        "schema": "CREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT); CREATE TABLE Has_Pet (StuID NUMBER, PetID NUMBER); CREATE TABLE Pets (PetID NUMBER, PetType TEXT);"
      }
    ],
    [
      {
        "question": "Which students have a dog as their type of pet?",
        "query": "SELECT * FROM student AS t1 JOIN has_pet AS t2 ON t1.stuid = t2.stuid JOIN pets AS t3 ON t3.petid = t2.petid WHERE t3.pettype = 'dog'",
        "schema": "CREATE TABLE Student (StuID NUMBER); CREATE TABLE Has_Pet (StuID NUMBER, PetID NUMBER); CREATE TABLE Pets (PetID NUMBER, PetType TEXT);"
      },
      {
        "question": "Who also has a cat?",
        "query": "SELECT * FROM student AS t1 JOIN has_pet AS t2 ON t1.stuid = t2.stuid JOIN pets AS t3 ON t3.petid = t2.petid WHERE t3.pettype = 'cat' INTERSECT SELECT * FROM student AS t1 JOIN has_pet AS t2 ON t1.stuid = t2.stuid JOIN pets AS t3 ON t3.petid = t2.petid WHERE t3.pettype = 'dog'",
        "schema": "CREATE TABLE Student (StuID NUMBER); CREATE TABLE Has_Pet (StuID NUMBER, PetID NUMBER); CREATE TABLE Pets (PetID NUMBER, PetType TEXT);"
      },
      {
        "question": "What are their first names?",
        "query": "SELECT t1.fname FROM student AS t1 JOIN has_pet AS t2 ON t1.stuid = t2.stuid JOIN pets AS t3 ON t3.petid = t2.petid WHERE t3.pettype = 'cat' INTERSECT SELECT t1.fname FROM student AS t1 JOIN has_pet AS t2 ON t1.stuid = t2.stuid JOIN pets AS t3 ON t3.petid = t2.petid WHERE t3.pettype = 'dog'",
        "schema": "CREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT); CREATE TABLE Has_Pet (StuID NUMBER, PetID NUMBER); CREATE TABLE Pets (PetID NUMBER, PetType TEXT);"
      }
    ],
    [
      {
        "question": "Which students have a cat as their pets?",
        "query": "SELECT * FROM student WHERE stuid NOT IN (SELECT t1.stuid FROM student AS t1 JOIN has_pet AS t2 ON t1.stuid = t2.stuid JOIN pets AS t3 ON t3.petid = t2.petid WHERE t3.pettype = 'cat')",
        "schema": "CREATE TABLE Student (StuID NUMBER); CREATE TABLE Has_Pet (StuID NUMBER, PetID NUMBER); CREATE TABLE Pets (PetID NUMBER, PetType TEXT);"
      },
      {
        "question": "What are they majoring in?",
        "query": "SELECT major FROM student WHERE stuid NOT IN (SELECT t1.stuid FROM student AS t1 JOIN has_pet AS t2 ON t1.stuid = t2.stuid JOIN pets AS t3 ON t3.petid = t2.petid WHERE t3.pettype = 'cat')",
        "schema": "CREATE TABLE Student (StuID NUMBER, Major NUMBER); CREATE TABLE Has_Pet (StuID NUMBER, PetID NUMBER); CREATE TABLE Pets (PetID NUMBER, PetType TEXT);"
      },
      {
        "question": "Also, how old are they?",
        "query": "SELECT major , age FROM student WHERE stuid NOT IN (SELECT t1.stuid FROM student AS t1 JOIN has_pet AS t2 ON t1.stuid = t2.stuid JOIN pets AS t3 ON t3.petid = t2.petid WHERE t3.pettype = 'cat')",
        "schema": "CREATE TABLE Student (StuID NUMBER, Age NUMBER, Major NUMBER); CREATE TABLE Has_Pet (StuID NUMBER, PetID NUMBER); CREATE TABLE Pets (PetID NUMBER, PetType TEXT, pet_age NUMBER);"
      }
    ],
    [
      {
        "question": "What is every student's id?",
        "query": "SELECT stuid FROM student",
        "schema": "CREATE TABLE Student (StuID NUMBER);"
      },
      {
        "question": "Of those ids, which correspond to those who own cats as pets?",
        "query": "SELECT t1.stuid FROM student AS t1 JOIN has_pet AS t2 ON t1.stuid = t2.stuid JOIN pets AS t3 ON t3.petid = t2.petid WHERE t3.pettype = 'cat'",
        "schema": "CREATE TABLE Student (StuID NUMBER); CREATE TABLE Has_Pet (StuID NUMBER, PetID NUMBER); CREATE TABLE Pets (PetID NUMBER, PetType TEXT);"
      },
      {
        "question": "List all the other ids.",
        "query": "SELECT stuid FROM student EXCEPT SELECT t1.stuid FROM student AS t1 JOIN has_pet AS t2 ON t1.stuid = t2.stuid JOIN pets AS t3 ON t3.petid = t2.petid WHERE t3.pettype = 'cat'",
        "schema": "CREATE TABLE Student (StuID NUMBER); CREATE TABLE Has_Pet (StuID NUMBER, PetID NUMBER); CREATE TABLE Pets (PetID NUMBER, PetType TEXT);"
      }
    ],
    [
      {
        "question": "Which students have dogs?",
        "query": "SELECT * FROM student AS t1 JOIN has_pet AS t2 ON t1.stuid = t2.stuid JOIN pets AS t3 ON t3.petid = t2.petid WHERE t3.pettype = 'dog'",
        "schema": "CREATE TABLE Student (StuID NUMBER); CREATE TABLE Has_Pet (StuID NUMBER, PetID NUMBER); CREATE TABLE Pets (PetID NUMBER, PetType TEXT);"
      },
      {
        "question": "Of those, who does not own a cat?",
        "query": "SELECT * FROM student AS t1 JOIN has_pet AS t2 ON t1.stuid = t2.stuid JOIN pets AS t3 ON t3.petid = t2.petid WHERE t3.pettype = 'dog' EXCEPT SELECT * FROM student AS t1 JOIN has_pet AS t2 ON t1.stuid = t2.stuid JOIN pets AS t3 ON t3.petid = t2.petid WHERE t3.pettype = 'cat'",
        "schema": "CREATE TABLE Student (StuID NUMBER); CREATE TABLE Has_Pet (StuID NUMBER, PetID NUMBER); CREATE TABLE Pets (PetID NUMBER, PetType TEXT);"
      },
      {
        "question": "What are their first names and ages?",
        "query": "SELECT t1.fname , t1.age FROM student AS t1 JOIN has_pet AS t2 ON t1.stuid = t2.stuid JOIN pets AS t3 ON t3.petid = t2.petid WHERE t3.pettype = 'dog' EXCEPT SELECT t1.fname , t1.age FROM student AS t1 JOIN has_pet AS t2 ON t1.stuid = t2.stuid JOIN pets AS t3 ON t3.petid = t2.petid WHERE t3.pettype = 'cat'",
        "schema": "CREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER); CREATE TABLE Has_Pet (StuID NUMBER, PetID NUMBER); CREATE TABLE Pets (PetID NUMBER, PetType TEXT, pet_age NUMBER);"
      }
    ],
    [
      {
        "question": "Who is the youngest pet?",
        "query": "SELECT * FROM pets ORDER BY pet_age LIMIT 1",
        "schema": "CREATE TABLE Student (StuID NUMBER, Age NUMBER); CREATE TABLE Has_Pet (StuID NUMBER, PetID NUMBER); CREATE TABLE Pets (PetID NUMBER, PetType TEXT, pet_age NUMBER);"
      },
      {
        "question": "What type are they?",
        "query": "SELECT pettype FROM pets ORDER BY pet_age LIMIT 1",
        "schema": "CREATE TABLE Student (StuID NUMBER, Age NUMBER); CREATE TABLE Has_Pet (StuID NUMBER, PetID NUMBER); CREATE TABLE Pets (PetID NUMBER, PetType TEXT, pet_age NUMBER);"
      },
      {
        "question": "Also, how much do they weigh?",
        "query": "SELECT pettype , weight FROM pets ORDER BY pet_age LIMIT 1",
        "schema": "CREATE TABLE Student (StuID NUMBER, Age NUMBER); CREATE TABLE Has_Pet (StuID NUMBER, PetID NUMBER); CREATE TABLE Pets (PetID NUMBER, PetType TEXT, pet_age NUMBER, weight NUMBER);"
      }
    ],
    [
      {
        "question": "What are ids of every pet?",
        "query": "SELECT petid FROM pets",
        "schema": "CREATE TABLE Has_Pet (StuID NUMBER, PetID NUMBER); CREATE TABLE Pets (PetID NUMBER, PetType TEXT);"
      },
      {
        "question": "For those, which refer to pets older than 1?",
        "query": "SELECT petid FROM pets WHERE pet_age > 1",
        "schema": "CREATE TABLE Student (Age NUMBER); CREATE TABLE Has_Pet (StuID NUMBER, PetID NUMBER); CREATE TABLE Pets (PetID NUMBER, PetType TEXT, pet_age NUMBER);"
      },
      {
        "question": "Also, how much do they weigh?",
        "query": "SELECT petid , weight FROM pets WHERE pet_age > 1",
        "schema": "CREATE TABLE Student (Age NUMBER); CREATE TABLE Has_Pet (StuID NUMBER, PetID NUMBER); CREATE TABLE Pets (PetID NUMBER, PetType TEXT, pet_age NUMBER, weight NUMBER);"
      }
    ],
    [
      {
        "question": "What are the different pet types?",
        "query": "SELECT DISTINCT pettype FROM pets",
        "schema": "CREATE TABLE Has_Pet (StuID NUMBER, PetID NUMBER); CREATE TABLE Pets (PetID NUMBER, PetType TEXT);"
      },
      {
        "question": "For each of those, what is the maximum age?",
        "query": "SELECT max(pet_age) , pettype FROM pets GROUP BY pettype",
        "schema": "CREATE TABLE Student (StuID NUMBER, Age NUMBER); CREATE TABLE Has_Pet (StuID NUMBER, PetID NUMBER); CREATE TABLE Pets (PetID NUMBER, PetType TEXT, pet_age NUMBER);"
      },
      {
        "question": "What about the average age?",
        "query": "SELECT avg(pet_age) , pettype FROM pets GROUP BY pettype",
        "schema": "CREATE TABLE Student (StuID NUMBER, Age NUMBER); CREATE TABLE Has_Pet (StuID NUMBER, PetID NUMBER); CREATE TABLE Pets (PetID NUMBER, PetType TEXT, pet_age NUMBER);"
      }
    ],
    [
      {
        "question": "What information is there on pets?",
        "query": "SELECT * FROM pets",
        "schema": "CREATE TABLE Has_Pet (StuID NUMBER, PetID NUMBER); CREATE TABLE Pets (PetID NUMBER, PetType TEXT);"
      },
      {
        "question": "For each pet type, what is the average weight?",
        "query": "SELECT avg(weight) , pettype FROM pets GROUP BY pettype",
        "schema": "CREATE TABLE Has_Pet (StuID NUMBER, PetID NUMBER); CREATE TABLE Pets (PetID NUMBER, PetType TEXT, weight NUMBER);"
      }
    ],
    [
      {
        "question": "Which students have pets?",
        "query": "SELECT * FROM student AS t1 JOIN has_pet AS t2 ON t1.stuid = t2.stuid",
        "schema": "CREATE TABLE Student (StuID NUMBER); CREATE TABLE Has_Pet (StuID NUMBER, PetID NUMBER); CREATE TABLE Pets (PetID NUMBER, PetType TEXT);"
      },
      {
        "question": "What are the different first names?",
        "query": "SELECT DISTINCT t1.fname FROM student AS t1 JOIN has_pet AS t2 ON t1.stuid = t2.stuid",
        "schema": "CREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT); CREATE TABLE Has_Pet (StuID NUMBER, PetID NUMBER); CREATE TABLE Pets (PetID NUMBER, PetType TEXT);"
      },
      {
        "question": "Also, what are their ages?",
        "query": "SELECT DISTINCT t1.fname , t1.age FROM student AS t1 JOIN has_pet AS t2 ON t1.stuid = t2.stuid",
        "schema": "CREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER); CREATE TABLE Has_Pet (StuID NUMBER, PetID NUMBER); CREATE TABLE Pets (PetID NUMBER, PetType TEXT, pet_age NUMBER);"
      }
    ],
    [
      {
        "question": "Which students have pets?",
        "query": "SELECT * FROM student AS t1 JOIN has_pet AS t2 ON t1.stuid = t2.stuid",
        "schema": "CREATE TABLE Student (StuID NUMBER); CREATE TABLE Has_Pet (StuID NUMBER, PetID NUMBER); CREATE TABLE Pets (PetID NUMBER, PetType TEXT);"
      },
      {
        "question": "Of those, whose last name is smith?",
        "query": "SELECT * FROM student AS t1 JOIN has_pet AS t2 ON t1.stuid = t2.stuid WHERE t1.lname = 'Smith'",
        "schema": "CREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT); CREATE TABLE Has_Pet (StuID NUMBER, PetID NUMBER); CREATE TABLE Pets (PetID NUMBER, PetType TEXT);"
      },
      {
        "question": "What is their pet's id?",
        "query": "SELECT t2.petid FROM student AS t1 JOIN has_pet AS t2 ON t1.stuid = t2.stuid WHERE t1.lname = 'Smith'",
        "schema": "CREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT); CREATE TABLE Has_Pet (StuID NUMBER, PetID NUMBER); CREATE TABLE Pets (PetID NUMBER, PetType TEXT);"
      }
    ],
    [
      {
        "question": "Which of the students have pets?",
        "query": "SELECT * FROM student AS t1 JOIN has_pet AS t2 ON t1.stuid = t2.stuid",
        "schema": "CREATE TABLE Student (StuID NUMBER); CREATE TABLE Has_Pet (StuID NUMBER, PetID NUMBER); CREATE TABLE Pets (PetID NUMBER, PetType TEXT);"
      },
      {
        "question": "How many pets does each of them have?",
        "query": "SELECT count(*) , t1.stuid FROM student AS t1 JOIN has_pet AS t2 ON t1.stuid = t2.stuid GROUP BY t1.stuid",
        "schema": "CREATE TABLE Student (StuID NUMBER); CREATE TABLE Has_Pet (StuID NUMBER, PetID NUMBER); CREATE TABLE Pets (PetID NUMBER, PetType TEXT);"
      }
    ],
    [
      {
        "question": "What is the first name and sex of each student?",
        "query": "SELECT t1.fname , t1.sex FROM student AS t1",
        "schema": "CREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Sex TEXT);"
      },
      {
        "question": "Which of those belong to somebody who has more than one pet?",
        "query": "SELECT t1.fname , t1.sex FROM student AS t1 JOIN has_pet AS t2 ON t1.stuid = t2.stuid GROUP BY t1.stuid HAVING count(*) > 1",
        "schema": "CREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Sex TEXT); CREATE TABLE Has_Pet (StuID NUMBER, PetID NUMBER); CREATE TABLE Pets (PetID NUMBER);"
      }
    ],
    [
      {
        "question": "What is the id of the three-year old cat?",
        "query": "SELECT petid FROM pets WHERE pet_age = 3 AND pettype = 'cat'",
        "schema": "CREATE TABLE Student (StuID NUMBER, Age NUMBER); CREATE TABLE Has_Pet (StuID NUMBER, PetID NUMBER); CREATE TABLE Pets (PetID NUMBER, PetType TEXT, pet_age NUMBER);"
      },
      {
        "question": "Who is the owner of that cat?",
        "query": "SELECT * FROM student AS t1 JOIN has_pet AS t2 ON t1.stuid = t2.stuid JOIN pets AS t3 ON t3.petid = t2.petid WHERE t3.pet_age = 3 AND t3.pettype = 'cat'",
        "schema": "CREATE TABLE Student (StuID NUMBER, Age NUMBER); CREATE TABLE Has_Pet (StuID NUMBER, PetID NUMBER); CREATE TABLE Pets (PetID NUMBER, PetType TEXT, pet_age NUMBER);"
      },
      {
        "question": "What is their last name?",
        "query": "SELECT t1.lname FROM student AS t1 JOIN has_pet AS t2 ON t1.stuid = t2.stuid JOIN pets AS t3 ON t3.petid = t2.petid WHERE t3.pet_age = 3 AND t3.pettype = 'cat'",
        "schema": "CREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER); CREATE TABLE Has_Pet (StuID NUMBER, PetID NUMBER); CREATE TABLE Pets (PetID NUMBER, PetType TEXT, pet_age NUMBER);"
      }
    ],
    [
      {
        "question": "Which students do not own any pets?",
        "query": "SELECT * FROM student WHERE stuid NOT IN (SELECT t1.stuid FROM student AS t1 JOIN has_pet AS t2 ON t1.stuid = t2.stuid)",
        "schema": "CREATE TABLE Student (StuID NUMBER); CREATE TABLE Has_Pet (StuID NUMBER, PetID NUMBER); CREATE TABLE Pets (PetID NUMBER, PetType TEXT);"
      },
      {
        "question": "What is their average age?",
        "query": "SELECT avg(age) FROM student WHERE stuid NOT IN (SELECT t1.stuid FROM student AS t1 JOIN has_pet AS t2 ON t1.stuid = t2.stuid)",
        "schema": "CREATE TABLE Student (StuID NUMBER, Age NUMBER); CREATE TABLE Has_Pet (StuID NUMBER, PetID NUMBER); CREATE TABLE Pets (PetID NUMBER, PetType TEXT, pet_age NUMBER);"
      }
    ]
  ],
  "world_1": [
    [
      {
        "question": "What are the names of all the countries?",
        "query": "SELECT name FROM country",
        "schema": "CREATE TABLE city (CountryCode TEXT); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, LocalName TEXT, Code2 TEXT); CREATE TABLE countrylanguage (CountryCode TEXT);"
      },
      {
        "question": "Give the names of the ones that became independent after 1950.",
        "query": "SELECT name FROM country WHERE indepyear > 1950",
        "schema": "CREATE TABLE city (CountryCode TEXT); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, LocalName TEXT, Code2 TEXT); CREATE TABLE countrylanguage (CountryCode TEXT);"
      }
    ],
    [
      {
        "question": "How many countries are there?",
        "query": "SELECT count(*) FROM country",
        "schema": "CREATE TABLE city (CountryCode TEXT); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, LifeExpectancy NUMBER, GNP NUMBER, GNPOld NUMBER, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Code2 TEXT); CREATE TABLE countrylanguage (CountryCode TEXT, IsOfficial TEXT);"
      },
      {
        "question": "Out of those, how many have a republic as their form of government?",
        "query": "SELECT count(*) FROM country WHERE governmentform = \"Republic\"",
        "schema": "CREATE TABLE city (CountryCode TEXT); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, LifeExpectancy NUMBER, GNP NUMBER, GNPOld NUMBER, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Code2 TEXT); CREATE TABLE countrylanguage (CountryCode TEXT, IsOfficial TEXT);"
      }
    ],
    [
      {
        "question": "What are the countries in the Carribean region?",
        "query": "SELECT * FROM country WHERE region = \"Caribbean\"",
        "schema": "CREATE TABLE city (CountryCode TEXT); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, LocalName TEXT, Code2 TEXT); CREATE TABLE countrylanguage (CountryCode TEXT, IsOfficial TEXT);"
      },
      {
        "question": "What is the surface area of each of those countries?",
        "query": "SELECT surfacearea FROM country WHERE region = \"Caribbean\"",
        "schema": "CREATE TABLE city (CountryCode TEXT); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea NUMBER, LocalName TEXT, Code2 TEXT); CREATE TABLE countrylanguage (CountryCode TEXT, IsOfficial TEXT);"
      },
      {
        "question": "Find the total surface area of the above.",
        "query": "SELECT sum(surfacearea) FROM country WHERE region = \"Caribbean\"",
        "schema": "CREATE TABLE city (CountryCode TEXT); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea NUMBER, LocalName TEXT, Code2 TEXT); CREATE TABLE countrylanguage (CountryCode TEXT, IsOfficial TEXT);"
      }
    ],
    [
      {
        "question": "What continent does each country belong to?",
        "query": "SELECT continent FROM country",
        "schema": "CREATE TABLE city (CountryCode TEXT); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, LocalName TEXT, Code2 TEXT); CREATE TABLE countrylanguage (CountryCode TEXT, IsOfficial TEXT);"
      },
      {
        "question": "Which one does Anguila belong to?",
        "query": "SELECT continent FROM country WHERE name = \"Anguilla\"",
        "schema": "CREATE TABLE city (Name TEXT, CountryCode TEXT); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, LocalName TEXT, Code2 TEXT); CREATE TABLE countrylanguage (CountryCode TEXT, IsOfficial TEXT);"
      }
    ],
    [
      {
        "question": "What are the names of all the regions?",
        "query": "SELECT region FROM country",
        "schema": ""
      },
      {
        "question": "Which of those is the city Kabul located in?",
        "query": "SELECT region FROM country AS t1 JOIN city AS t2 ON t1.code = t2.countrycode WHERE t2.name = \"Kabul\"",
        "schema": "CREATE TABLE city (ID NUMBER, Name TEXT, CountryCode TEXT, District TEXT); CREATE TABLE country (Code TEXT, Name TEXT, Region TEXT, LocalName TEXT, Capital NUMBER);"
      }
    ],
    [
      {
        "question": "What are all the languages?",
        "query": "SELECT LANGUAGE FROM countrylanguage",
        "schema": "CREATE TABLE countrylanguage (Language TEXT);"
      },
      {
        "question": "What are the languages spoken in Aruba?",
        "query": "SELECT t2.language FROM country AS t1 JOIN countrylanguage AS t2 ON t1.code = t2.countrycode WHERE t1.name = \"Aruba\"",
        "schema": "CREATE TABLE city (Name TEXT, CountryCode TEXT, District TEXT); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, LocalName TEXT); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT);"
      },
      {
        "question": "Which one is the most popular?",
        "query": "SELECT t2.language FROM country AS t1 JOIN countrylanguage AS t2 ON t1.code = t2.countrycode WHERE t1.name = \"Aruba\" ORDER BY percentage DESC LIMIT 1",
        "schema": "CREATE TABLE city (Name TEXT, CountryCode TEXT, District TEXT); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, LocalName TEXT, Code2 TEXT); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT);"
      }
    ],
    [
      {
        "question": "What are the population and life expectancies for all countries?",
        "query": "SELECT population , lifeexpectancy FROM country",
        "schema": "CREATE TABLE country (Code TEXT, Name TEXT, Population NUMBER, LifeExpectancy NUMBER, GNP NUMBER);"
      },
      {
        "question": "Of those, which ones are for the country Brazil?",
        "query": "SELECT population , lifeexpectancy FROM country WHERE name = \"Brazil\"",
        "schema": "CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, Population NUMBER, LifeExpectancy NUMBER, GNP NUMBER, Code2 TEXT); CREATE TABLE countrylanguage (CountryCode TEXT);"
      }
    ],
    [
      {
        "question": "Which region is Angola in?",
        "query": "SELECT region FROM country WHERE name = \"Angola\"",
        "schema": "CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, LocalName TEXT); CREATE TABLE countrylanguage (CountryCode TEXT);"
      },
      {
        "question": "For that country, what is its population?",
        "query": "SELECT population FROM country WHERE name = \"Angola\"",
        "schema": "CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, Population NUMBER, LocalName TEXT); CREATE TABLE countrylanguage (CountryCode TEXT);"
      }
    ],
    [
      {
        "question": "What are the life expectancies for all the countries?",
        "query": "SELECT lifeexpectancy FROM country",
        "schema": "CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, LifeExpectancy NUMBER, GNP NUMBER, GNPOld NUMBER, Code2 TEXT); CREATE TABLE countrylanguage (CountryCode TEXT);"
      },
      {
        "question": "What are the life expectancies for the countries in the region of Central Africa?",
        "query": "SELECT lifeexpectancy FROM country WHERE region = \"Central Africa\"",
        "schema": "CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, LifeExpectancy NUMBER, GNP NUMBER, GNPOld NUMBER, Code2 TEXT); CREATE TABLE countrylanguage (CountryCode TEXT);"
      },
      {
        "question": "What is the average of those?",
        "query": "SELECT avg(lifeexpectancy) FROM country WHERE region = \"Central Africa\"",
        "schema": "CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, LifeExpectancy NUMBER, GNP NUMBER, GNPOld NUMBER, Code2 TEXT); CREATE TABLE countrylanguage (CountryCode TEXT);"
      }
    ],
    [
      {
        "question": "What are the names of the countries in Asia?",
        "query": "SELECT name FROM country WHERE continent = \"Asia\"",
        "schema": "CREATE TABLE city (CountryCode TEXT); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, LocalName TEXT); CREATE TABLE countrylanguage (CountryCode TEXT);"
      },
      {
        "question": "Which one has the shortest life expectancy?",
        "query": "SELECT name FROM country WHERE continent = \"Asia\" ORDER BY lifeexpectancy LIMIT 1",
        "schema": "CREATE TABLE city (CountryCode TEXT); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, LifeExpectancy NUMBER, LocalName TEXT); CREATE TABLE countrylanguage (CountryCode TEXT);"
      }
    ],
    [
      {
        "question": "How many people live in Asia?",
        "query": "SELECT sum(population) FROM country WHERE continent = \"Asia\"",
        "schema": "CREATE TABLE city (ID NUMBER, CountryCode TEXT, Population NUMBER); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, Population NUMBER, LifeExpectancy NUMBER, LocalName TEXT, Code2 TEXT); CREATE TABLE countrylanguage (CountryCode TEXT);"
      },
      {
        "question": "What about the largest GNP among them?",
        "query": "SELECT max(gnp) FROM country WHERE continent = \"Asia\"",
        "schema": "CREATE TABLE city (ID NUMBER, CountryCode TEXT, Population NUMBER); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, Population NUMBER, LifeExpectancy NUMBER, GNP NUMBER, GNPOld NUMBER, LocalName TEXT, Code2 TEXT); CREATE TABLE countrylanguage (CountryCode TEXT);"
      }
    ],
    [
      {
        "question": "Which countries are in Africa?",
        "query": "SELECT * FROM country WHERE continent = \"Africa\"",
        "schema": "CREATE TABLE city (CountryCode TEXT); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, LocalName TEXT, Code2 TEXT); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT);"
      },
      {
        "question": "Which countries are also republics?",
        "query": "SELECT * FROM country WHERE continent = \"Africa\" AND governmentform = \"Republic\"",
        "schema": "CREATE TABLE city (CountryCode TEXT); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, LocalName TEXT, Code2 TEXT); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT);"
      },
      {
        "question": "What is the average of their life expectancies?",
        "query": "SELECT avg(lifeexpectancy) FROM country WHERE continent = \"Africa\" AND governmentform = \"Republic\"",
        "schema": "CREATE TABLE city (CountryCode TEXT); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, Population NUMBER, LifeExpectancy NUMBER, GNP NUMBER, LocalName TEXT, GovernmentForm TEXT, Code2 TEXT); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT);"
      }
    ],
    [
      {
        "question": "What are the countries in the continents of Asia or Europe?",
        "query": "SELECT * FROM country WHERE continent = \"Asia\" OR continent = \"Europe\"",
        "schema": "CREATE TABLE city (CountryCode TEXT); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, Code2 TEXT); CREATE TABLE countrylanguage (CountryCode TEXT);"
      },
      {
        "question": "What is the surface area of each country?",
        "query": "SELECT surfacearea FROM country WHERE continent = \"Asia\" OR continent = \"Europe\"",
        "schema": "CREATE TABLE city (CountryCode TEXT); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea NUMBER, Code2 TEXT); CREATE TABLE countrylanguage (CountryCode TEXT);"
      },
      {
        "question": "What is the total surface area summed up?",
        "query": "SELECT sum(surfacearea) FROM country WHERE continent = \"Asia\" OR continent = \"Europe\"",
        "schema": "CREATE TABLE city (CountryCode TEXT); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea NUMBER, Code2 TEXT); CREATE TABLE countrylanguage (CountryCode TEXT);"
      }
    ],
    [
      {
        "question": "What are the populations of each city in the district of Gelderland?",
        "query": "SELECT population FROM city WHERE district = \"Gelderland\"",
        "schema": "CREATE TABLE city (Name TEXT, CountryCode TEXT, District TEXT, Population NUMBER); CREATE TABLE country (Region TEXT, Population NUMBER);"
      },
      {
        "question": "What is the total population in that district?",
        "query": "SELECT sum(population) FROM city WHERE district = \"Gelderland\"",
        "schema": "CREATE TABLE city (Name TEXT, CountryCode TEXT, District TEXT, Population NUMBER); CREATE TABLE country (Region TEXT, Population NUMBER);"
      }
    ],
    [
      {
        "question": "What are all the nations?",
        "query": "SELECT * FROM country",
        "schema": "CREATE TABLE city (CountryCode TEXT); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, HeadOfState TEXT, Code2 TEXT); CREATE TABLE countrylanguage (CountryCode TEXT);"
      },
      {
        "question": "Which of those have a government that is a US territory?",
        "query": "SELECT * FROM country WHERE governmentform = \"US Territory\"",
        "schema": "CREATE TABLE city (CountryCode TEXT); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, GovernmentForm TEXT, HeadOfState TEXT, Code2 TEXT); CREATE TABLE countrylanguage (CountryCode TEXT);"
      },
      {
        "question": "For those, what is the average GNP and total population?",
        "query": "SELECT avg(gnp) , sum(population) FROM country WHERE governmentform = \"US Territory\"",
        "schema": "CREATE TABLE city (CountryCode TEXT); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, Population NUMBER, GNP NUMBER, GNPOld NUMBER, GovernmentForm TEXT, HeadOfState TEXT, Code2 TEXT); CREATE TABLE countrylanguage (CountryCode TEXT);"
      }
    ],
    [
      {
        "question": "What are all the distinct languages used around the world?",
        "query": "SELECT DISTINCT LANGUAGE FROM countrylanguage",
        "schema": "CREATE TABLE country (Code TEXT, Continent TEXT); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage",
        "schema": "CREATE TABLE country (Code TEXT, Continent TEXT); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT);"
      }
    ],
    [
      {
        "question": "What are the distinct forms of government in the continent of Africa?",
        "query": "SELECT DISTINCT governmentform FROM country WHERE continent = \"Africa\"",
        "schema": "CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, GovernmentForm TEXT); CREATE TABLE countrylanguage (CountryCode TEXT);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT count(DISTINCT governmentform) FROM country WHERE continent = \"Africa\"",
        "schema": "CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, GovernmentForm TEXT); CREATE TABLE countrylanguage (CountryCode TEXT);"
      }
    ],
    [
      {
        "question": "What is the information about the country Aruba?",
        "query": "SELECT * FROM country WHERE name = \"Aruba\"",
        "schema": "CREATE TABLE city (CountryCode TEXT); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, LocalName TEXT, Code2 TEXT); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT);"
      },
      {
        "question": "What are the languages used in Aruba?",
        "query": "SELECT t2.language FROM country AS t1 JOIN countrylanguage AS t2 ON t1.code = t2.countrycode WHERE t1.name = \"Aruba\"",
        "schema": "CREATE TABLE city (CountryCode TEXT); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, LocalName TEXT, Code2 TEXT); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT count(t2.language) FROM country AS t1 JOIN countrylanguage AS t2 ON t1.code = t2.countrycode WHERE t1.name = \"Aruba\"",
        "schema": "CREATE TABLE city (CountryCode TEXT); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, LocalName TEXT, Code2 TEXT); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT);"
      }
    ],
    [
      {
        "question": "What are the languages used in Afghanistan?",
        "query": "SELECT t2.language FROM country AS t1 JOIN countrylanguage AS t2 ON t1.code = t2.countrycode WHERE t1.name = \"Afghanistan\"",
        "schema": "CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, LocalName TEXT, Code2 TEXT); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT);"
      },
      {
        "question": "Of those, how many are the official languages?",
        "query": "SELECT count(*) FROM country AS t1 JOIN countrylanguage AS t2 ON t1.code = t2.countrycode WHERE t1.name = \"Afghanistan\" AND isofficial = \"T\"",
        "schema": "CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, LocalName TEXT, Code2 TEXT); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT);"
      }
    ],
    [
      {
        "question": "How many languages are spoken in each country?",
        "query": "SELECT count(*) , t1.name FROM country AS t1 JOIN countrylanguage AS t2 ON t1.code = t2.countrycode GROUP BY t1.name",
        "schema": "CREATE TABLE city (CountryCode TEXT); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, LocalName TEXT, Code2 TEXT); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT);"
      },
      {
        "question": "Which country speaks the most?",
        "query": "SELECT t1.name FROM country AS t1 JOIN countrylanguage AS t2 ON t1.code = t2.countrycode GROUP BY t1.name ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE city (CountryCode TEXT); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, LocalName TEXT, Code2 TEXT); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT);"
      }
    ],
    [
      {
        "question": "How many languages are spoken on each continent?",
        "query": "SELECT count(*) , t1.continent FROM country AS t1 JOIN countrylanguage AS t2 ON t1.code = t2.countrycode GROUP BY t1.continent",
        "schema": "CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT);"
      },
      {
        "question": "Which one speaks the most languages?",
        "query": "SELECT t1.continent FROM country AS t1 JOIN countrylanguage AS t2 ON t1.code = t2.countrycode GROUP BY t1.continent ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE city (CountryCode TEXT); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, Code2 TEXT); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT);"
      }
    ],
    [
      {
        "question": "What are the countries that speak English?",
        "query": "SELECT t1.name FROM country AS t1 JOIN countrylanguage AS t2 ON t1.code = t2.countrycode WHERE t2.language = \"English\"",
        "schema": "CREATE TABLE city (CountryCode TEXT); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, LocalName TEXT, Code2 TEXT); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT);"
      },
      {
        "question": "Which of those also speak Dutch?",
        "query": "SELECT t1.name FROM country AS t1 JOIN countrylanguage AS t2 ON t1.code = t2.countrycode WHERE t2.language = \"English\" INTERSECT SELECT t1.name FROM country AS t1 JOIN countrylanguage AS t2 ON t1.code = t2.countrycode WHERE t2.language = \"Dutch\"",
        "schema": "CREATE TABLE city (CountryCode TEXT); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, LocalName TEXT, Code2 TEXT); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT);"
      },
      {
        "question": "How many of them are there?",
        "query": "SELECT count(*) FROM (SELECT t1.name FROM country AS t1 JOIN countrylanguage AS t2 ON t1.code = t2.countrycode WHERE t2.language = \"English\" INTERSECT SELECT t1.name FROM country AS t1 JOIN countrylanguage AS t2 ON t1.code = t2.countrycode WHERE t2.language = \"Dutch\")",
        "schema": "CREATE TABLE city (CountryCode TEXT); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, LocalName TEXT, Code2 TEXT); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT);"
      }
    ],
    [
      {
        "question": "What are the names of countries which speak English?",
        "query": "SELECT t1.name FROM country AS t1 JOIN countrylanguage AS t2 ON t1.code = t2.countrycode WHERE t2.language = \"English\"",
        "schema": "CREATE TABLE city (CountryCode TEXT); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, LocalName TEXT, Code2 TEXT); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT);"
      },
      {
        "question": "Of those countries, what are the names of the nations that speak French as well?",
        "query": "SELECT t1.name FROM country AS t1 JOIN countrylanguage AS t2 ON t1.code = t2.countrycode WHERE t2.language = \"English\" INTERSECT SELECT t1.name FROM country AS t1 JOIN countrylanguage AS t2 ON t1.code = t2.countrycode WHERE t2.language = \"French\"",
        "schema": "CREATE TABLE city (CountryCode TEXT); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, LocalName TEXT, Code2 TEXT); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT);"
      }
    ],
    [
      {
        "question": "What are the official languages of each country?",
        "query": "SELECT t2.language FROM country AS t1 JOIN countrylanguage AS t2 ON t1.code = t2.countrycode WHERE t2.isofficial = \"T\"",
        "schema": "CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Code2 TEXT); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT);"
      },
      {
        "question": "Of those countries, give the names of the ones that have English as one of the official languages.",
        "query": "SELECT t1.name FROM country AS t1 JOIN countrylanguage AS t2 ON t1.code = t2.countrycode WHERE t2.language = \"English\" AND t2.isofficial = \"T\"",
        "schema": "CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, LocalName TEXT, Code2 TEXT); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT);"
      },
      {
        "question": "Of those, which also have French as another official language?",
        "query": "SELECT t1.name FROM country AS t1 JOIN countrylanguage AS t2 ON t1.code = t2.countrycode WHERE t2.language = \"English\" AND t2.isofficial = \"T\" INTERSECT SELECT t1.name FROM country AS t1 JOIN countrylanguage AS t2 ON t1.code = t2.countrycode WHERE t2.language = \"French\" AND t2.isofficial = \"T\"",
        "schema": "CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, LocalName TEXT, Code2 TEXT); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT);"
      }
    ],
    [
      {
        "question": "In which countries is Chinese spoken?",
        "query": "SELECT t1.name FROM country AS t1 JOIN countrylanguage AS t2 ON t1.code = t2.countrycode WHERE t2.language = \"Chinese\"",
        "schema": "CREATE TABLE city (CountryCode TEXT); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, LocalName TEXT, Code2 TEXT); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT);"
      },
      {
        "question": "Which distinct continents are they in?",
        "query": "SELECT DISTINCT t1.continent FROM country AS t1 JOIN countrylanguage AS t2 ON t1.code = t2.countrycode WHERE t2.language = \"Chinese\"",
        "schema": "CREATE TABLE city (CountryCode TEXT); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, LocalName TEXT, Code2 TEXT); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT);"
      },
      {
        "question": "How many of them are there?",
        "query": "SELECT count( DISTINCT continent) FROM country AS t1 JOIN countrylanguage AS t2 ON t1.code = t2.countrycode WHERE t2.language = \"Chinese\"",
        "schema": "CREATE TABLE city (CountryCode TEXT); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, LocalName TEXT, Code2 TEXT); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT);"
      }
    ],
    [
      {
        "question": "What are all the different regions?",
        "query": "SELECT DISTINCT region FROM country",
        "schema": "CREATE TABLE country (Region TEXT);"
      },
      {
        "question": "Which of those speak Dutch or English?",
        "query": "SELECT DISTINCT t1.region FROM country AS t1 JOIN countrylanguage AS t2 ON t1.code = t2.countrycode WHERE t2.language = \"English\" OR t2.language = \"Dutch\"",
        "schema": "CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT);"
      }
    ],
    [
      {
        "question": "What are the official languages for each country?",
        "query": "SELECT t2.language , t1.name FROM country AS t1 JOIN countrylanguage AS t2 ON t1.code = t2.countrycode WHERE isofficial = \"T\"",
        "schema": "CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Code2 TEXT); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT);"
      },
      {
        "question": "Which of these countries have English or Dutch?",
        "query": "SELECT * FROM country AS t1 JOIN countrylanguage AS t2 ON t1.code = t2.countrycode WHERE t2.language = \"English\" AND isofficial = \"T\" UNION SELECT * FROM country AS t1 JOIN countrylanguage AS t2 ON t1.code = t2.countrycode WHERE t2.language = \"Dutch\" AND isofficial = \"T\"",
        "schema": "CREATE TABLE city (CountryCode TEXT); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, LocalName TEXT, Code2 TEXT); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT);"
      }
    ],
    [
      {
        "question": "What are all the different languages used in the continent of Asia?",
        "query": "SELECT DISTINCT t2.language FROM country AS t1 JOIN countrylanguage AS t2 ON t1.code = t2.countrycode WHERE t1.continent = \"Asia\"",
        "schema": "CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT);"
      },
      {
        "question": "Which one is used by the largest number of Asian countries?",
        "query": "SELECT t2.language FROM country AS t1 JOIN countrylanguage AS t2 ON t1.code = t2.countrycode WHERE t1.continent = \"Asia\" GROUP BY t2.language ORDER BY COUNT (*) DESC LIMIT 1",
        "schema": "CREATE TABLE city (CountryCode TEXT); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, Code2 TEXT); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT);"
      }
    ],
    [
      {
        "question": "Which countries have republics as their form of government?",
        "query": "SELECT * FROM country WHERE governmentform = \"Republic\"",
        "schema": "CREATE TABLE city (CountryCode TEXT); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, GNPOld NUMBER, GovernmentForm TEXT, HeadOfState TEXT, Code2 TEXT); CREATE TABLE countrylanguage (CountryCode TEXT);"
      },
      {
        "question": "Which language is spoken by only one of those countries?",
        "query": "SELECT t2.language FROM country AS t1 JOIN countrylanguage AS t2 ON t1.code = t2.countrycode WHERE t1.governmentform = \"Republic\" GROUP BY t2.language HAVING count(*) = 1",
        "schema": "CREATE TABLE city (CountryCode TEXT); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, GNPOld NUMBER, GovernmentForm TEXT, HeadOfState TEXT, Code2 TEXT); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT);"
      }
    ],
    [
      {
        "question": "What are the names of all the cities that use English?",
        "query": "SELECT t1.name FROM city AS t1 JOIN countrylanguage AS t2 ON t1.countrycode = t2.countrycode WHERE t2.language = \"English\"",
        "schema": "CREATE TABLE city (Name TEXT, CountryCode TEXT); CREATE TABLE countrylanguage (Language TEXT);"
      },
      {
        "question": "Which of those has the largest population?",
        "query": "SELECT t1.name , t1.population FROM city AS t1 JOIN countrylanguage AS t2 ON t1.countrycode = t2.countrycode WHERE t2.language = \"English\" ORDER BY t1.population DESC LIMIT 1",
        "schema": "CREATE TABLE city (Name TEXT, CountryCode TEXT, Population NUMBER); CREATE TABLE country (Code TEXT, Name TEXT, Population NUMBER, LocalName TEXT, Code2 TEXT); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT);"
      }
    ],
    [
      {
        "question": "What are the names, population, and life expectancy for all the countries in Asia?",
        "query": "SELECT name , population , lifeexpectancy FROM country WHERE continent = \"Asia\"",
        "schema": "CREATE TABLE city (Name TEXT, CountryCode TEXT, Population NUMBER); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, Population NUMBER, LifeExpectancy NUMBER, LocalName TEXT); CREATE TABLE countrylanguage (CountryCode TEXT);"
      },
      {
        "question": "Of those, which belong to the country with the largest surface area?",
        "query": "SELECT name , population , lifeexpectancy FROM country WHERE continent = \"Asia\" ORDER BY surfacearea DESC LIMIT 1",
        "schema": "CREATE TABLE city (Name TEXT, CountryCode TEXT, Population NUMBER); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea NUMBER, Population NUMBER, LifeExpectancy NUMBER, LocalName TEXT); CREATE TABLE countrylanguage (CountryCode TEXT);"
      }
    ],
    [
      {
        "question": "What are the official languages of each country?",
        "query": "SELECT t2.language , t1.name FROM country AS t1 JOIN countrylanguage AS t2 ON t1.code = t2.countrycode WHERE t2.isofficial = \"T\"",
        "schema": "CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Code2 TEXT); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT);"
      },
      {
        "question": "Which countries do not have English as the official language?",
        "query": "SELECT * FROM country WHERE name NOT IN (SELECT t1.name FROM country AS t1 JOIN countrylanguage AS t2 ON t1.code = t2.countrycode WHERE t2.language = \"English\" AND t2.isofficial = \"T\")",
        "schema": "CREATE TABLE city (CountryCode TEXT); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, LocalName TEXT, Code2 TEXT); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT);"
      },
      {
        "question": "In those countries, what is the average life expectancy?",
        "query": "SELECT avg(lifeexpectancy) FROM country WHERE name NOT IN (SELECT t1.name FROM country AS t1 JOIN countrylanguage AS t2 ON t1.code = t2.countrycode WHERE t2.language = \"English\" AND t2.isofficial = \"T\")",
        "schema": "CREATE TABLE city (CountryCode TEXT); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, LifeExpectancy NUMBER, LocalName TEXT, Code2 TEXT); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT);"
      }
    ],
    [
      {
        "question": "What are the names of each country that does not speak English?",
        "query": "SELECT name FROM country WHERE name NOT IN (SELECT t1.name FROM country AS t1 JOIN countrylanguage AS t2 ON t1.code = t2.countrycode WHERE t2.language = \"English\")",
        "schema": "CREATE TABLE city (CountryCode TEXT); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, LocalName TEXT, Code2 TEXT); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT);"
      },
      {
        "question": "How many people live in those countries?",
        "query": "SELECT sum(population) FROM country WHERE name NOT IN (SELECT t1.name FROM country AS t1 JOIN countrylanguage AS t2 ON t1.code = t2.countrycode WHERE t2.language = \"English\")",
        "schema": "CREATE TABLE city (CountryCode TEXT); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, Population NUMBER, LocalName TEXT, Code2 TEXT); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT);"
      }
    ],
    [
      {
        "question": "Which country has a head of state named Beatrix?",
        "query": "SELECT * FROM country AS t1 JOIN countrylanguage AS t2 ON t1.code = t2.countrycode WHERE t1.headofstate = \"Beatrix\"",
        "schema": "CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, GNPOld NUMBER, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Code2 TEXT); CREATE TABLE countrylanguage (CountryCode TEXT);"
      },
      {
        "question": "What languages are spoken in that country?",
        "query": "SELECT t2.language FROM country AS t1 JOIN countrylanguage AS t2 ON t1.code = t2.countrycode WHERE t1.headofstate = \"Beatrix\"",
        "schema": "CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, GNPOld NUMBER, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Code2 TEXT); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT);"
      },
      {
        "question": "Which of those languages is the official one?",
        "query": "SELECT t2.language FROM country AS t1 JOIN countrylanguage AS t2 ON t1.code = t2.countrycode WHERE t1.headofstate = \"Beatrix\" AND t2.isofficial = \"T\"",
        "schema": "CREATE TABLE city (CountryCode TEXT); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, GNPOld NUMBER, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Code2 TEXT); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT);"
      }
    ],
    [
      {
        "question": "What are the names of all the countries?",
        "query": "SELECT t1.name FROM country AS t1",
        "schema": "CREATE TABLE city (CountryCode TEXT); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, LocalName TEXT, Code2 TEXT); CREATE TABLE countrylanguage (CountryCode TEXT);"
      },
      {
        "question": "What are the names of those countries that were founded after 1930?",
        "query": "SELECT t1.name FROM country AS t1 WHERE indepyear < 1930",
        "schema": "CREATE TABLE city (CountryCode TEXT); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, LocalName TEXT, Code2 TEXT); CREATE TABLE countrylanguage (CountryCode TEXT);"
      },
      {
        "question": "For those countries, how many unique official languages are spoken in total?",
        "query": "SELECT count(DISTINCT t2.language) FROM country AS t1 JOIN countrylanguage AS t2 ON t1.code = t2.countrycode WHERE indepyear < 1930 AND t2.isofficial = \"T\"",
        "schema": "CREATE TABLE city (CountryCode TEXT); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, IndepYear NUMBER, LocalName TEXT, Code2 TEXT); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT);"
      }
    ],
    [
      {
        "question": "What are all the information about European countries?",
        "query": "SELECT * FROM country WHERE continent = \"Europe\"",
        "schema": "CREATE TABLE city (CountryCode TEXT); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, LocalName TEXT, Code2 TEXT); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT);"
      },
      {
        "question": "Of those countries, What is the minimum surface area?",
        "query": "SELECT min(surfacearea) FROM country WHERE continent = \"Europe\"",
        "schema": "CREATE TABLE city (CountryCode TEXT); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea NUMBER, LocalName TEXT, Code2 TEXT); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT);"
      },
      {
        "question": "What are the countries that have a greater surface area than that?",
        "query": "SELECT name FROM country WHERE surfacearea > (SELECT min(surfacearea) FROM country WHERE continent = \"Europe\")",
        "schema": "CREATE TABLE city (CountryCode TEXT); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea NUMBER, LocalName TEXT, Code2 TEXT); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT);"
      }
    ],
    [
      {
        "question": "What is the maximum population of a country in Asia?",
        "query": "SELECT min(population) FROM country WHERE continent = \"Asia\"",
        "schema": "CREATE TABLE city (CountryCode TEXT, Population NUMBER); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, Population NUMBER, GNP NUMBER, GNPOld NUMBER); CREATE TABLE countrylanguage (CountryCode TEXT);"
      },
      {
        "question": "Which countries in Africa have a population smaller than that?",
        "query": "SELECT name FROM country WHERE continent = \"Africa\" AND population < (SELECT max(population) FROM country WHERE continent = \"Asia\")",
        "schema": "CREATE TABLE city (CountryCode TEXT, Population NUMBER); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, Population NUMBER, GNP NUMBER, GNPOld NUMBER, Code2 TEXT); CREATE TABLE countrylanguage (CountryCode TEXT);"
      }
    ],
    [
      {
        "question": "What is the smallest population of a country in Africa?",
        "query": "SELECT min(population) FROM country WHERE continent = \"Africa\"",
        "schema": "CREATE TABLE city (CountryCode TEXT, Population NUMBER); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, Population NUMBER, GNP NUMBER, GNPOld NUMBER); CREATE TABLE countrylanguage (CountryCode TEXT);"
      },
      {
        "question": "Which Asian countries have a greater population than that?",
        "query": "SELECT name FROM country WHERE continent = \"Asia\" AND population > (SELECT min(population) FROM country WHERE continent = \"Africa\")",
        "schema": "CREATE TABLE city (CountryCode TEXT, Population NUMBER); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, Population NUMBER, GNP NUMBER, GNPOld NUMBER, Code2 TEXT); CREATE TABLE countrylanguage (CountryCode TEXT);"
      }
    ],
    [
      {
        "question": "What are the country codes of all the countries?",
        "query": "SELECT countrycode FROM countrylanguage",
        "schema": "CREATE TABLE city (CountryCode TEXT); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Code2 TEXT); CREATE TABLE countrylanguage (CountryCode TEXT);"
      },
      {
        "question": "Of those countries, give the country codes for those which do not speak English.",
        "query": "SELECT countrycode FROM countrylanguage EXCEPT SELECT countrycode FROM countrylanguage WHERE LANGUAGE = \"English\"",
        "schema": "CREATE TABLE city (CountryCode TEXT); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Code2 TEXT); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT);"
      }
    ],
    [
      {
        "question": "What are the country codes of all the countries?",
        "query": "SELECT DISTINCT countrycode FROM countrylanguage",
        "schema": "CREATE TABLE city (CountryCode TEXT); CREATE TABLE country (Code TEXT, Name TEXT, Code2 TEXT); CREATE TABLE countrylanguage (CountryCode TEXT);"
      },
      {
        "question": "Of those, which do not speak English?",
        "query": "SELECT DISTINCT countrycode FROM countrylanguage WHERE LANGUAGE ! = \"English\"",
        "schema": "CREATE TABLE city (CountryCode TEXT); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Code2 TEXT); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT);"
      }
    ],
    [
      {
        "question": "What are the country codes for countries which are not republics?",
        "query": "SELECT code FROM country WHERE governmentform ! = \"Republic\"",
        "schema": "CREATE TABLE city (CountryCode TEXT); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Code2 TEXT); CREATE TABLE countrylanguage (CountryCode TEXT);"
      },
      {
        "question": "Of those, which do not speak English?",
        "query": "SELECT code FROM country WHERE governmentform ! = \"Republic\" EXCEPT SELECT countrycode FROM countrylanguage WHERE LANGUAGE = \"English\"",
        "schema": "CREATE TABLE city (CountryCode TEXT); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, GovernmentForm TEXT, Code2 TEXT); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT);"
      }
    ],
    [
      {
        "question": "What are the names of the countries where English is the official language?",
        "query": "SELECT t1.name FROM country AS t1 JOIN countrylanguage AS t2 ON t1.code = t2.countrycode WHERE t2.isofficial = 'T' AND t2.language = 'English'",
        "schema": "CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, LocalName TEXT, Code2 TEXT); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT);"
      },
      {
        "question": "What are the names of the countries in Europe that are not one of those?",
        "query": "SELECT name FROM country WHERE continent = 'Europe' AND name NOT IN (SELECT t1.name FROM country AS t1 JOIN countrylanguage AS t2 ON t1.code = t2.countrycode WHERE t2.isofficial = 'T' AND t2.language = 'English')",
        "schema": "CREATE TABLE city (CountryCode TEXT); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, LocalName TEXT, Code2 TEXT); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT);"
      },
      {
        "question": "What are the names of the cities in those countries?",
        "query": "SELECT DISTINCT t2.name FROM country AS t1 JOIN city AS t2 ON t2.countrycode = t1.code WHERE t1.continent = 'Europe' AND t1.name NOT IN (SELECT t3.name FROM country AS t3 JOIN countrylanguage AS t4 ON t3.code = t4.countrycode WHERE t4.isofficial = 'T' AND t4.language = 'English')",
        "schema": "CREATE TABLE city (Name TEXT, CountryCode TEXT); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, LocalName TEXT, Code2 TEXT); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT);"
      }
    ],
    [
      {
        "question": "What are the countries in Asia where Chinese is spoken?",
        "query": "SELECT * FROM country AS t1 JOIN countrylanguage AS t2 ON t1.code = t2.countrycode WHERE t2.language = 'Chinese' AND t1.continent = \"Asia\"",
        "schema": "CREATE TABLE city (CountryCode TEXT); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, LocalName TEXT, Code2 TEXT); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT);"
      },
      {
        "question": "Of those, which have Chinese as the official language?",
        "query": "SELECT * FROM country AS t1 JOIN countrylanguage AS t2 ON t1.code = t2.countrycode WHERE t2.isofficial = 'T' AND t2.language = 'Chinese' AND t1.continent = \"Asia\"",
        "schema": "CREATE TABLE city (CountryCode TEXT); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, LocalName TEXT, Code2 TEXT); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT);"
      },
      {
        "question": "What are the different cities in those countries?",
        "query": "SELECT DISTINCT t3.name FROM country AS t1 JOIN countrylanguage AS t2 ON t1.code = t2.countrycode JOIN city AS t3 ON t1.code = t3.countrycode WHERE t2.isofficial = 'T' AND t2.language = 'Chinese' AND t1.continent = \"Asia\"",
        "schema": "CREATE TABLE city (Name TEXT, CountryCode TEXT, District TEXT); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, LocalName TEXT, Code2 TEXT); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT);"
      }
    ],
    [
      {
        "question": "Which country has the smallest population?",
        "query": "SELECT * FROM country ORDER BY population LIMIT 1",
        "schema": "CREATE TABLE city (CountryCode TEXT, Population NUMBER); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, IndepYear NUMBER, Population NUMBER, GNP NUMBER, GNPOld NUMBER, LocalName TEXT, Code2 TEXT); CREATE TABLE countrylanguage (CountryCode TEXT);"
      },
      {
        "question": "What is its name, independence year, and surface area?",
        "query": "SELECT name , surfacearea , indepyear FROM country ORDER BY population LIMIT 1",
        "schema": "CREATE TABLE city (CountryCode TEXT, Population NUMBER); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea NUMBER, IndepYear NUMBER, Population NUMBER, GNP NUMBER, GNPOld NUMBER, LocalName TEXT, Code2 TEXT); CREATE TABLE countrylanguage (CountryCode TEXT);"
      }
    ],
    [
      {
        "question": "What is the country with the largest surface area?",
        "query": "SELECT * FROM country ORDER BY surfacearea DESC LIMIT 1",
        "schema": "CREATE TABLE city (CountryCode TEXT); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea NUMBER, Code2 TEXT); CREATE TABLE countrylanguage (CountryCode TEXT);"
      },
      {
        "question": "What is its population, name and leader?",
        "query": "SELECT name , population , headofstate FROM country ORDER BY surfacearea DESC LIMIT 1",
        "schema": "CREATE TABLE city (Name TEXT, CountryCode TEXT, Population NUMBER); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea NUMBER, Population NUMBER, LocalName TEXT, HeadOfState TEXT, Code2 TEXT); CREATE TABLE countrylanguage (CountryCode TEXT);"
      }
    ],
    [
      {
        "question": "What are the names of the countries?",
        "query": "SELECT name FROM country",
        "schema": "CREATE TABLE city (CountryCode TEXT); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, LocalName TEXT, Code2 TEXT); CREATE TABLE countrylanguage (CountryCode TEXT);"
      },
      {
        "question": "Which of them speak at least three languages?",
        "query": "SELECT t1.name FROM country AS t1 JOIN countrylanguage AS t2 ON t1.code = t2.countrycode GROUP BY t1.name HAVING count(*) > 2",
        "schema": "CREATE TABLE city (CountryCode TEXT); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, LocalName TEXT, Code2 TEXT); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT);"
      },
      {
        "question": "Also, how many languages are spoken in each of those countries?",
        "query": "SELECT count(t2.language) , t1.name FROM country AS t1 JOIN countrylanguage AS t2 ON t1.code = t2.countrycode GROUP BY t1.name HAVING count(*) > 2",
        "schema": "CREATE TABLE city (CountryCode TEXT); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, LocalName TEXT, Code2 TEXT); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT);"
      }
    ],
    [
      {
        "question": "What is the average city population for each city?",
        "query": "SELECT avg(population) FROM city",
        "schema": "CREATE TABLE city (ID NUMBER, Name TEXT, District TEXT, Population NUMBER); CREATE TABLE country (Population NUMBER);"
      },
      {
        "question": "For each district, count how many cities have a population greater than the average.",
        "query": "SELECT count(*) , district FROM city WHERE population > (SELECT avg(population) FROM city) GROUP BY district",
        "schema": "CREATE TABLE city (ID NUMBER, Name TEXT, District TEXT, Population NUMBER); CREATE TABLE country (Population NUMBER);"
      }
    ],
    [
      {
        "question": "The countries with which government form have an average life expectancy greater than age 72?",
        "query": "SELECT * FROM country GROUP BY governmentform HAVING avg(lifeexpectancy) > 72",
        "schema": "CREATE TABLE country (Code TEXT, Name TEXT, LifeExpectancy NUMBER, GNP NUMBER, GovernmentForm TEXT);"
      },
      {
        "question": "For those, list the total population and government form name.",
        "query": "SELECT sum(population) , governmentform FROM country GROUP BY governmentform HAVING avg(lifeexpectancy) > 72",
        "schema": "CREATE TABLE country (Code TEXT, Name TEXT, Population NUMBER, LifeExpectancy NUMBER, GNP NUMBER, GovernmentForm TEXT);"
      }
    ],
    [
      {
        "question": "Which continents have an average life expectancy less than age 72?",
        "query": "SELECT continent FROM country GROUP BY continent HAVING avg(lifeexpectancy) < 72",
        "schema": "CREATE TABLE country (Continent TEXT, LifeExpectancy NUMBER);"
      },
      {
        "question": "Give their average life expectancy and total population.",
        "query": "SELECT sum(population) , avg(lifeexpectancy) , continent FROM country GROUP BY continent HAVING avg(lifeexpectancy) < 72",
        "schema": "CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Population NUMBER, LifeExpectancy NUMBER);"
      }
    ],
    [
      {
        "question": "What are the countries with the top 5 largest surface areas?",
        "query": "SELECT * FROM country ORDER BY surfacearea DESC LIMIT 5",
        "schema": "CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea NUMBER, IndepYear NUMBER, GNP NUMBER, GNPOld NUMBER, Code2 TEXT); CREATE TABLE countrylanguage (CountryCode TEXT);"
      },
      {
        "question": "What are the surface areas and names of those countries?",
        "query": "SELECT name , surfacearea FROM country ORDER BY surfacearea DESC LIMIT 5",
        "schema": "CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea NUMBER, IndepYear NUMBER, GNP NUMBER, GNPOld NUMBER, LocalName TEXT, Code2 TEXT); CREATE TABLE countrylanguage (CountryCode TEXT);"
      }
    ],
    [
      {
        "question": "Order the countries by descending population size.",
        "query": "SELECT * FROM country ORDER BY population DESC",
        "schema": "CREATE TABLE city (CountryCode TEXT); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Population NUMBER, GNP NUMBER, GNPOld NUMBER, Code2 TEXT); CREATE TABLE countrylanguage (CountryCode TEXT);"
      },
      {
        "question": "Give the names of the 3 countries which have the most.",
        "query": "SELECT name FROM country ORDER BY population DESC LIMIT 3",
        "schema": "CREATE TABLE city (CountryCode TEXT); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Population NUMBER, GNP NUMBER, GNPOld NUMBER, LocalName TEXT, Code2 TEXT); CREATE TABLE countrylanguage (CountryCode TEXT);"
      }
    ],
    [
      {
        "question": "Order the countries by increasing population.",
        "query": "SELECT * FROM country ORDER BY population",
        "schema": "CREATE TABLE city (CountryCode TEXT, Population NUMBER); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Population NUMBER, GNP NUMBER, GNPOld NUMBER, Code2 TEXT); CREATE TABLE countrylanguage (CountryCode TEXT);"
      },
      {
        "question": "Give the names of the 3 countries with the lowest.",
        "query": "SELECT name FROM country ORDER BY population ASC LIMIT 3",
        "schema": "CREATE TABLE city (CountryCode TEXT, Population NUMBER); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Population NUMBER, GNP NUMBER, GNPOld NUMBER, LocalName TEXT, Code2 TEXT); CREATE TABLE countrylanguage (CountryCode TEXT);"
      }
    ],
    [
      {
        "question": "What are the countries in the continent of Asia?",
        "query": "SELECT * FROM country WHERE continent = \"Asia\"",
        "schema": "CREATE TABLE city (CountryCode TEXT); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, LocalName TEXT, Code2 TEXT); CREATE TABLE countrylanguage (CountryCode TEXT);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT count(*) FROM country WHERE continent = \"Asia\"",
        "schema": "CREATE TABLE city (CountryCode TEXT); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, LocalName TEXT, Code2 TEXT); CREATE TABLE countrylanguage (CountryCode TEXT);"
      }
    ],
    [
      {
        "question": "Which countries are in the continent of Europe?",
        "query": "SELECT * FROM country WHERE continent = \"Europe\"",
        "schema": "CREATE TABLE city (CountryCode TEXT); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, LocalName TEXT, Code2 TEXT); CREATE TABLE countrylanguage (CountryCode TEXT);"
      },
      {
        "question": "Of those, what are the names of those that have a population of 80000?",
        "query": "SELECT name FROM country WHERE continent = \"Europe\" AND population = \"80000\"",
        "schema": "CREATE TABLE city (CountryCode TEXT, Population NUMBER); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, Population NUMBER, LocalName TEXT, Code2 TEXT); CREATE TABLE countrylanguage (CountryCode TEXT);"
      }
    ],
    [
      {
        "question": "What countries are in North America?",
        "query": "SELECT * FROM country WHERE continent = \"North America\"",
        "schema": "CREATE TABLE city (CountryCode TEXT); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, LocalName TEXT, Code2 TEXT); CREATE TABLE countrylanguage (CountryCode TEXT, IsOfficial TEXT);"
      },
      {
        "question": "Of those, which have surface area greater than 3000?",
        "query": "SELECT * FROM country WHERE continent = \"North America\" AND surfacearea > 3000",
        "schema": "CREATE TABLE city (CountryCode TEXT); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea NUMBER, LocalName TEXT, Code2 TEXT); CREATE TABLE countrylanguage (CountryCode TEXT, IsOfficial TEXT);"
      },
      {
        "question": "What is the total population and average surface area of those countries?",
        "query": "SELECT sum(population) , avg(surfacearea) FROM country WHERE continent = \"North America\" AND surfacearea > 3000",
        "schema": "CREATE TABLE city (CountryCode TEXT); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea NUMBER, Population NUMBER, LocalName TEXT, Code2 TEXT); CREATE TABLE countrylanguage (CountryCode TEXT, IsOfficial TEXT);"
      }
    ],
    [
      {
        "question": "What are the names of all the cities?",
        "query": "SELECT name FROM city",
        "schema": "CREATE TABLE city (Name TEXT, District TEXT);"
      },
      {
        "question": "Which of those have a population between 160000 and 900000?",
        "query": "SELECT name FROM city WHERE population BETWEEN 160000 AND 90000",
        "schema": "CREATE TABLE city (ID NUMBER, Name TEXT, District TEXT, Population NUMBER); CREATE TABLE country (Population NUMBER);"
      }
    ],
    [
      {
        "question": "What are the different languages?",
        "query": "SELECT LANGUAGE FROM countrylanguage",
        "schema": "CREATE TABLE countrylanguage (Language TEXT);"
      },
      {
        "question": "Which one is spoken in the most countries?",
        "query": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE country (Code TEXT, Name TEXT); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT);"
      }
    ]
  ],
  "tvshow": [
    [
      {
        "question": "Tell me\ufeff the director of the cartoon named \"Day of the Dark Knight!\".",
        "query": "SELECT directed_by FROM cartoon WHERE title = \"Day of the Dark Knight!\"",
        "schema": "CREATE TABLE Cartoon (Title TEXT, Directed_by TEXT);"
      },
      {
        "question": "What is the channel of this cartoon?",
        "query": "SELECT channel FROM cartoon WHERE title = \"Day of the Dark Knight!\"",
        "schema": "CREATE TABLE TV_Channel (id TEXT, series_name TEXT, Content TEXT); CREATE TABLE TV_series (Channel TEXT); CREATE TABLE Cartoon (Title TEXT, Directed_by TEXT, Channel TEXT);"
      },
      {
        "question": "Give me the titles of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\"?",
        "query": "SELECT title FROM cartoon WHERE directed_by = \"Ben Jones\" OR directed_by = \"Brandon Vietti\"",
        "schema": "CREATE TABLE TV_Channel (id TEXT, series_name TEXT, Content TEXT); CREATE TABLE TV_series (Channel TEXT); CREATE TABLE Cartoon (Title TEXT, Directed_by TEXT, Channel TEXT);"
      }
    ],
    [
      {
        "question": "Show me all the information about the Italian TV Channels.",
        "query": "SELECT * FROM tv_channel WHERE country = \"Italy\"",
        "schema": "CREATE TABLE TV_Channel (id TEXT, Country TEXT, Language TEXT, Content TEXT); CREATE TABLE TV_series (Channel TEXT); CREATE TABLE Cartoon (Channel TEXT);"
      },
      {
        "question": "How about the Polish TV Channels?",
        "query": "SELECT * FROM tv_channel WHERE country = \"Poland\"",
        "schema": "CREATE TABLE TV_Channel (id TEXT, Country TEXT, Language TEXT, Content TEXT); CREATE TABLE TV_series (Channel TEXT); CREATE TABLE Cartoon (Channel TEXT);"
      },
      {
        "question": "Which country has the most of TV Channels? List the country and number of TV Channels it has.",
        "query": "SELECT country , count(*) FROM tv_channel GROUP BY country ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE TV_Channel (id TEXT, Country TEXT, Language TEXT, Content TEXT); CREATE TABLE TV_series (Channel TEXT); CREATE TABLE Cartoon (Channel TEXT);"
      }
    ],
    [
      {
        "question": "Tell me the TV Channel of the cartoon titled \"The Eyes of Despero!\".",
        "query": "SELECT channel FROM cartoon WHERE title = \"The Eyes of Despero!\"",
        "schema": "CREATE TABLE TV_Channel (id TEXT, series_name TEXT, Content TEXT); CREATE TABLE TV_series (id NUMBER, Channel TEXT); CREATE TABLE Cartoon (id NUMBER, Title TEXT, Channel TEXT);"
      },
      {
        "question": "How about this channel's series name?",
        "query": "SELECT series_name FROM tv_channel WHERE id IN (SELECT channel FROM cartoon WHERE title = \"The Eyes of Despero!\")",
        "schema": "CREATE TABLE TV_Channel (id TEXT, series_name TEXT, Content TEXT); CREATE TABLE TV_series (id NUMBER, Channel TEXT); CREATE TABLE Cartoon (id NUMBER, Title TEXT, Channel TEXT);"
      },
      {
        "question": "Tell me the number of different series names and contents in the TV Channel table.",
        "query": "SELECT count(DISTINCT series_name) , count(DISTINCT content) FROM tv_channel",
        "schema": "CREATE TABLE TV_Channel (id TEXT, series_name TEXT, Content TEXT); CREATE TABLE TV_series (id NUMBER, Channel TEXT); CREATE TABLE Cartoon (id NUMBER, Title TEXT, Channel TEXT);"
      }
    ],
    [
      {
        "question": "Tell me the package option for the series named \"Rock TV\".",
        "query": "SELECT package_option FROM tv_channel WHERE series_name = \"Rock TV\"",
        "schema": "CREATE TABLE TV_Channel (series_name TEXT, Package_Option TEXT); CREATE TABLE TV_series (id NUMBER, Episode TEXT, Channel TEXT); CREATE TABLE Cartoon (Title TEXT);"
      },
      {
        "question": "tell me the language of this series.",
        "query": "SELECT LANGUAGE FROM tv_channel WHERE series_name = \"Rock TV\"",
        "schema": "CREATE TABLE TV_Channel (id TEXT, series_name TEXT, Language TEXT, Package_Option TEXT); CREATE TABLE TV_series (id NUMBER, Episode TEXT, Channel TEXT); CREATE TABLE Cartoon (Title TEXT);"
      },
      {
        "question": "List the language used least number of TV Channel. List language and number of TV Channel.",
        "query": "SELECT LANGUAGE , count(*) FROM tv_channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1",
        "schema": "CREATE TABLE TV_Channel (id TEXT, series_name TEXT, Language TEXT, Package_Option TEXT); CREATE TABLE TV_series (id NUMBER, Episode TEXT, Channel TEXT); CREATE TABLE Cartoon (Title TEXT);"
      }
    ],
    [
      {
        "question": "Tell me the author of the cartoon \"The Rise of the Blue Beetle!\"",
        "query": "SELECT written_by FROM cartoon WHERE title = \"The Rise of the Blue Beetle!\"",
        "schema": "CREATE TABLE Cartoon (id NUMBER, Title TEXT, Directed_by TEXT, Written_by TEXT);"
      },
      {
        "question": "How about its director?",
        "query": "SELECT directed_by FROM cartoon WHERE title = \"The Rise of the Blue Beetle!\"",
        "schema": "CREATE TABLE Cartoon (id NUMBER, Title TEXT, Directed_by TEXT, Written_by TEXT);"
      },
      {
        "question": "What is its TV Channel?",
        "query": "SELECT t1.series_name FROM tv_channel AS t1 JOIN cartoon AS t2 ON t1.id = t2.channel WHERE t2.title = \"The Rise of the Blue Beetle!\"",
        "schema": "CREATE TABLE TV_Channel (id TEXT, series_name TEXT); CREATE TABLE TV_series (Channel TEXT); CREATE TABLE Cartoon (id NUMBER, Title TEXT, Directed_by TEXT, Written_by TEXT, Channel TEXT);"
      }
    ],
    [
      {
        "question": "tell me the country of the TV Channel for the series named \"Sky Radio\".",
        "query": "SELECT country FROM tv_channel WHERE series_name = \"Sky Radio\"",
        "schema": "CREATE TABLE TV_Channel (id TEXT, series_name TEXT, Country TEXT, Language TEXT, Content TEXT); CREATE TABLE TV_series (id NUMBER, Channel TEXT); CREATE TABLE Cartoon (Channel TEXT);"
      },
      {
        "question": "How about its content?",
        "query": "SELECT content FROM tv_channel WHERE series_name = \"Sky Radio\"",
        "schema": "CREATE TABLE TV_Channel (id TEXT, series_name TEXT, Country TEXT, Language TEXT, Content TEXT); CREATE TABLE TV_series (id NUMBER, Channel TEXT); CREATE TABLE Cartoon (Channel TEXT);"
      },
      {
        "question": "I want to know the title of all Cartoons showed on TV Channel with series name \"Sky Radio\".",
        "query": "SELECT t2.title FROM tv_channel AS t1 JOIN cartoon AS t2 ON t1.id = t2.channel WHERE t1.series_name = \"Sky Radio\"",
        "schema": "CREATE TABLE TV_Channel (id TEXT, series_name TEXT, Country TEXT, Language TEXT, Content TEXT); CREATE TABLE TV_series (id NUMBER, Channel TEXT); CREATE TABLE Cartoon (Title TEXT, Channel TEXT);"
      }
    ],
    [
      {
        "question": "Tell me the rating of the episode named \"Double Down\".",
        "query": "SELECT rating FROM tv_series WHERE episode = \"Double Down\"",
        "schema": "CREATE TABLE TV_series (Episode TEXT, Rating TEXT); CREATE TABLE Cartoon (Title TEXT);"
      },
      {
        "question": "How about the rating of the episode named \"Keepers\".",
        "query": "SELECT rating FROM tv_series WHERE episode = \"Keepers\"",
        "schema": "CREATE TABLE TV_series (Episode TEXT, Rating TEXT); CREATE TABLE Cartoon (Title TEXT);"
      },
      {
        "question": "Okay, I want to know the top 3 highest Rating TV series. List the TV series's Episode and Rating.",
        "query": "SELECT episode , rating FROM tv_series ORDER BY rating DESC LIMIT 3",
        "schema": "CREATE TABLE TV_series (id NUMBER, Episode TEXT, Rating TEXT); CREATE TABLE Cartoon (Title TEXT);"
      }
    ],
    [
      {
        "question": "tell me the weekly rank of the episode named \"Emily\".",
        "query": "SELECT weekly_rank FROM tv_series WHERE episode = \"Emily\"",
        "schema": "CREATE TABLE TV_series (Episode TEXT, Weekly_Rank NUMBER); CREATE TABLE Cartoon (Title TEXT);"
      },
      {
        "question": "How about its share?",
        "query": "SELECT SHARE FROM tv_series WHERE episode = \"Emily\"",
        "schema": "CREATE TABLE TV_series (Episode TEXT, Share NUMBER, 18_49_Rating_Share TEXT, Weekly_Rank NUMBER); CREATE TABLE Cartoon (Title TEXT);"
      },
      {
        "question": "tell me the minimum and maximum share of TV series.",
        "query": "SELECT max(SHARE) , min(SHARE) FROM tv_series",
        "schema": "CREATE TABLE TV_series (Episode TEXT, Share NUMBER, 18_49_Rating_Share TEXT, Weekly_Rank NUMBER); CREATE TABLE Cartoon (Title TEXT);"
      }
    ],
    [
      {
        "question": "Tell me the rating of the episode titled \"A Love of a Lifetime\".",
        "query": "SELECT rating FROM tv_series WHERE episode = \"A Love of a Lifetime\"",
        "schema": "CREATE TABLE TV_series (Episode TEXT, Rating TEXT); CREATE TABLE Cartoon (Title TEXT);"
      },
      {
        "question": "How about its weekly rank?",
        "query": "SELECT weekly_rank FROM tv_series WHERE episode = \"A Love of a Lifetime\"",
        "schema": "CREATE TABLE TV_series (Episode TEXT, Rating TEXT, Weekly_Rank NUMBER); CREATE TABLE Cartoon (Title TEXT);"
      },
      {
        "question": "And What is its TV Channel?",
        "query": "SELECT t1.series_name FROM tv_channel AS t1 JOIN tv_series AS t2 ON t1.id = t2.channel WHERE t2.episode = \"A Love of a Lifetime\"",
        "schema": "CREATE TABLE TV_Channel (id TEXT, series_name TEXT); CREATE TABLE TV_series (Episode TEXT, Rating TEXT, Weekly_Rank NUMBER, Channel TEXT); CREATE TABLE Cartoon (Title TEXT, Channel TEXT);"
      }
    ],
    [
      {
        "question": "tell me the content of TV Channel with the series named \"Sky Radio\".",
        "query": "SELECT content FROM tv_channel WHERE series_name = \"Sky Radio\"",
        "schema": "CREATE TABLE TV_Channel (id TEXT, series_name TEXT, Content TEXT); CREATE TABLE TV_series (id NUMBER, Channel TEXT); CREATE TABLE Cartoon (Channel TEXT);"
      },
      {
        "question": "How about its language?",
        "query": "SELECT LANGUAGE FROM tv_channel WHERE series_name = \"Sky Radio\"",
        "schema": "CREATE TABLE TV_Channel (id TEXT, series_name TEXT, Language TEXT, Content TEXT); CREATE TABLE TV_series (id NUMBER, Channel TEXT); CREATE TABLE Cartoon (Channel TEXT);"
      },
      {
        "question": "Okay, now I want to know the Episode of all TV series showed on TV Channel with series name \"Sky Radio\".",
        "query": "SELECT t2.episode FROM tv_channel AS t1 JOIN tv_series AS t2 ON t1.id = t2.channel WHERE t1.series_name = \"Sky Radio\"",
        "schema": "CREATE TABLE TV_Channel (id TEXT, series_name TEXT, Language TEXT, Content TEXT); CREATE TABLE TV_series (id NUMBER, Episode TEXT, Channel TEXT); CREATE TABLE Cartoon (Channel TEXT);"
      }
    ],
    [
      {
        "question": "Tell me the air date of the cartoon titled \"Fall of the Blue Beetle!\".",
        "query": "SELECT original_air_date FROM cartoon WHERE title = \"Fall of the Blue Beetle!\"",
        "schema": "CREATE TABLE TV_series (Episode TEXT, Air_Date TEXT); CREATE TABLE Cartoon (id NUMBER, Title TEXT, Original_air_date TEXT);"
      },
      {
        "question": "What is its production code?",
        "query": "SELECT production_code FROM cartoon WHERE title = \"Fall of the Blue Beetle!\"",
        "schema": "CREATE TABLE TV_series (Episode TEXT, Air_Date TEXT); CREATE TABLE Cartoon (id NUMBER, Title TEXT, Original_air_date TEXT, Production_code NUMBER);"
      },
      {
        "question": "tell me the production code and channel of the most recently aired cartoon.",
        "query": "SELECT production_code , channel FROM cartoon ORDER BY original_air_date LIMIT 1",
        "schema": "CREATE TABLE TV_Channel (id TEXT, series_name TEXT); CREATE TABLE TV_series (Episode TEXT, Air_Date TEXT, Channel TEXT); CREATE TABLE Cartoon (id NUMBER, Title TEXT, Original_air_date TEXT, Production_code NUMBER, Channel TEXT);"
      }
    ],
    [
      {
        "question": "Tell me the cartoons directed by Ben Jone.",
        "query": "SELECT title FROM cartoon WHERE directed_by = \"Ben Jones\"",
        "schema": "CREATE TABLE Cartoon (id NUMBER, Title TEXT, Directed_by TEXT);"
      },
      {
        "question": "Tell me the cartoons written by Todd Casey.",
        "query": "SELECT title FROM cartoon WHERE written_by = \"Todd Casey\"",
        "schema": "CREATE TABLE Cartoon (id NUMBER, Title TEXT, Directed_by TEXT, Written_by TEXT);"
      },
      {
        "question": "Which countries' tv channels are playing some cartoon written by Todd Casey?",
        "query": "SELECT t1.country FROM tv_channel AS t1 JOIN cartoon AS t2 ON t1.id = t2.channel WHERE t2.written_by = 'Todd Casey'",
        "schema": "CREATE TABLE TV_Channel (id TEXT, Country TEXT, Language TEXT, Content TEXT); CREATE TABLE TV_series (Channel TEXT); CREATE TABLE Cartoon (id NUMBER, Title TEXT, Directed_by TEXT, Written_by TEXT, Channel TEXT);"
      }
    ],
    [
      {
        "question": "which countries' tv channels are playing some cartoon written by Steven Melching?",
        "query": "SELECT t1.country FROM tv_channel AS t1 JOIN cartoon AS t2 ON t1.id = t2.channel WHERE t2.written_by = 'Steven Melching'",
        "schema": "CREATE TABLE TV_Channel (id TEXT, Country TEXT, Language TEXT, Content TEXT); CREATE TABLE TV_series (Channel TEXT); CREATE TABLE Cartoon (Directed_by TEXT, Written_by TEXT, Channel TEXT);"
      },
      {
        "question": "which countries' tv channels are not playing any cartoon written by Todd Casey?",
        "query": "SELECT country FROM tv_channel EXCEPT SELECT t1.country FROM tv_channel AS t1 JOIN cartoon AS t2 ON t1.id = t2.channel WHERE t2.written_by = 'Todd Casey'",
        "schema": "CREATE TABLE TV_Channel (id TEXT, Country TEXT, Language TEXT, Content TEXT); CREATE TABLE TV_series (Channel TEXT); CREATE TABLE Cartoon (Directed_by TEXT, Written_by TEXT, Channel TEXT);"
      }
    ],
    [
      {
        "question": "Tell me the director of the cartoon titled \"Deep Cover for Batman!\".",
        "query": "SELECT directed_by FROM cartoon WHERE title = \"Deep Cover for Batman!\"",
        "schema": "CREATE TABLE Cartoon (Title TEXT, Directed_by TEXT);"
      },
      {
        "question": "I want to know this cartoon's production code.",
        "query": "SELECT production_code FROM cartoon WHERE title = \"Deep Cover for Batman!\"",
        "schema": "CREATE TABLE Cartoon (Title TEXT, Directed_by TEXT, Production_code NUMBER);"
      },
      {
        "question": "Tell me the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang.",
        "query": "SELECT t1.series_name , t1.country FROM tv_channel AS t1 JOIN cartoon AS t2 ON t1.id = t2.channel WHERE t2.directed_by = 'Michael Chang' INTERSECT SELECT t1.series_name , t1.country FROM tv_channel AS t1 JOIN cartoon AS t2 ON t1.id = t2.channel WHERE t2.directed_by = 'Ben Jones'",
        "schema": "CREATE TABLE TV_Channel (id TEXT, series_name TEXT, Country TEXT, Language TEXT); CREATE TABLE TV_series (id NUMBER, Channel TEXT); CREATE TABLE Cartoon (Title TEXT, Directed_by TEXT, Production_code NUMBER, Channel TEXT);"
      }
    ],
    [
      {
        "question": "tell me the country of the TV channel with series named \"MTV Music\"",
        "query": "SELECT country FROM tv_channel WHERE series_name = \"MTV Music\"",
        "schema": "CREATE TABLE TV_Channel (id TEXT, series_name TEXT, Country TEXT, Language TEXT, Content TEXT); CREATE TABLE TV_series (id NUMBER, Channel TEXT); CREATE TABLE Cartoon (Channel TEXT);"
      },
      {
        "question": "Tell me the number of Italian channels.",
        "query": "SELECT count(*) FROM tv_channel WHERE country = \"Italy\"",
        "schema": "CREATE TABLE TV_Channel (id TEXT, series_name TEXT, Country TEXT, Language TEXT, Content TEXT); CREATE TABLE TV_series (id NUMBER, Channel TEXT); CREATE TABLE Cartoon (Channel TEXT);"
      },
      {
        "question": "find id of the tv channels that from the countries where have more than two tv channels.",
        "query": "SELECT id FROM tv_channel GROUP BY country HAVING count(*) > 2",
        "schema": "CREATE TABLE TV_Channel (id TEXT, series_name TEXT, Country TEXT, Language TEXT, Content TEXT); CREATE TABLE TV_series (id NUMBER, Channel TEXT); CREATE TABLE Cartoon (Channel TEXT);"
      }
    ],
    [
      {
        "question": "Who is the director of the cartoon titled \"Return of the Fearsome Fangs!\"?",
        "query": "SELECT directed_by FROM cartoon WHERE title = \"Return of the Fearsome Fangs!\"",
        "schema": "CREATE TABLE Cartoon (Title TEXT, Directed_by TEXT);"
      },
      {
        "question": "Tell me the cartoons directed by Ben Jones.",
        "query": "SELECT title FROM cartoon WHERE directed_by = \"Ben Jones\"",
        "schema": "CREATE TABLE Cartoon (Title TEXT, Directed_by TEXT);"
      },
      {
        "question": "Find the id of tv channels that do not play any cartoon directed by Ben Jones.",
        "query": "SELECT id FROM tv_channel EXCEPT SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones'",
        "schema": "CREATE TABLE TV_Channel (id TEXT); CREATE TABLE TV_series (Channel TEXT); CREATE TABLE Cartoon (id NUMBER, Title TEXT, Directed_by TEXT, Channel TEXT);"
      }
    ]
  ],
  "poker_player": [
    [
      {
        "question": "Show all the poker players.",
        "query": "SELECT * FROM poker_player",
        "schema": "CREATE TABLE poker_player (Poker_Player_ID NUMBER, People_ID NUMBER); CREATE TABLE people (People_ID NUMBER);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT count(*) FROM poker_player",
        "schema": "CREATE TABLE poker_player (Poker_Player_ID NUMBER, People_ID NUMBER); CREATE TABLE people (People_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What is the earnings of each poker player?",
        "query": "SELECT earnings FROM poker_player",
        "schema": "CREATE TABLE poker_player (Poker_Player_ID NUMBER, People_ID NUMBER, Earnings NUMBER); CREATE TABLE people (People_ID NUMBER);"
      },
      {
        "question": "Sort them in descending order.",
        "query": "SELECT earnings FROM poker_player ORDER BY earnings DESC",
        "schema": "CREATE TABLE poker_player (Poker_Player_ID NUMBER, People_ID NUMBER, Earnings NUMBER); CREATE TABLE people (People_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show all the information about each poker player.",
        "query": "SELECT * FROM poker_player",
        "schema": "CREATE TABLE poker_player (Poker_Player_ID NUMBER, People_ID NUMBER); CREATE TABLE people (People_ID NUMBER, Name TEXT);"
      },
      {
        "question": "What are their final table mades?",
        "query": "SELECT final_table_made FROM poker_player",
        "schema": "CREATE TABLE poker_player (Poker_Player_ID NUMBER, People_ID NUMBER, Final_Table_Made NUMBER); CREATE TABLE people (People_ID NUMBER, Name TEXT);"
      },
      {
        "question": "What are their final table mades and best finishes?",
        "query": "SELECT final_table_made , best_finish FROM poker_player",
        "schema": "CREATE TABLE poker_player (Poker_Player_ID NUMBER, People_ID NUMBER, Final_Table_Made NUMBER, Best_Finish NUMBER); CREATE TABLE people (People_ID NUMBER, Name TEXT);"
      }
    ],
    [
      {
        "question": "What is the earnings of each poker player?",
        "query": "SELECT earnings FROM poker_player",
        "schema": "CREATE TABLE poker_player (Poker_Player_ID NUMBER, People_ID NUMBER, Earnings NUMBER); CREATE TABLE people (People_ID NUMBER);"
      },
      {
        "question": "Give me the average.",
        "query": "SELECT avg(earnings) FROM poker_player",
        "schema": "CREATE TABLE poker_player (Poker_Player_ID NUMBER, People_ID NUMBER, Earnings NUMBER); CREATE TABLE people (People_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What is the money rank of each poker player?",
        "query": "SELECT money_rank FROM poker_player",
        "schema": "CREATE TABLE poker_player (People_ID NUMBER, Money_Rank NUMBER, Earnings NUMBER); CREATE TABLE people (People_ID NUMBER);"
      },
      {
        "question": "Sort them in the decreasing order.",
        "query": "SELECT money_rank FROM poker_player ORDER BY earnings DESC",
        "schema": "CREATE TABLE poker_player (People_ID NUMBER, Money_Rank NUMBER, Earnings NUMBER); CREATE TABLE people (People_ID NUMBER);"
      },
      {
        "question": "Return the top one.",
        "query": "SELECT money_rank FROM poker_player ORDER BY earnings DESC LIMIT 1",
        "schema": "CREATE TABLE poker_player (People_ID NUMBER, Money_Rank NUMBER, Earnings NUMBER); CREATE TABLE people (People_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Which poker player has earnings less than 200000?",
        "query": "SELECT * FROM poker_player WHERE earnings < 200000",
        "schema": "CREATE TABLE poker_player (Poker_Player_ID NUMBER, People_ID NUMBER, Earnings NUMBER); CREATE TABLE people (People_ID NUMBER, Name TEXT);"
      },
      {
        "question": "Among them, what is the maximum number of final tables made?",
        "query": "SELECT max(final_table_made) FROM poker_player WHERE earnings < 200000",
        "schema": "CREATE TABLE poker_player (Poker_Player_ID NUMBER, People_ID NUMBER, Final_Table_Made NUMBER, Best_Finish NUMBER, Earnings NUMBER); CREATE TABLE people (People_ID NUMBER, Name TEXT);"
      }
    ],
    [
      {
        "question": "Show all the poker players.",
        "query": "SELECT * FROM poker_player",
        "schema": "CREATE TABLE poker_player (Poker_Player_ID NUMBER, People_ID NUMBER); CREATE TABLE people (People_ID NUMBER);"
      },
      {
        "question": "What are their names?",
        "query": "SELECT t1.name FROM people AS t1 JOIN poker_player AS t2 ON t1.people_id = t2.people_id",
        "schema": "CREATE TABLE poker_player (Poker_Player_ID NUMBER, People_ID NUMBER); CREATE TABLE people (People_ID NUMBER, Name TEXT);"
      }
    ],
    [
      {
        "question": "Which poker players have earnings higher than 300000?",
        "query": "SELECT * FROM poker_player WHERE earnings > 300000",
        "schema": "CREATE TABLE poker_player (People_ID NUMBER, Earnings NUMBER); CREATE TABLE people (People_ID NUMBER, Name TEXT);"
      },
      {
        "question": "What are their names?",
        "query": "SELECT t1.name FROM people AS t1 JOIN poker_player AS t2 ON t1.people_id = t2.people_id WHERE t2.earnings > 300000",
        "schema": "CREATE TABLE poker_player (People_ID NUMBER, Earnings NUMBER); CREATE TABLE people (People_ID NUMBER, Name TEXT);"
      }
    ],
    [
      {
        "question": "What are the names of all poker players?",
        "query": "SELECT t1.name FROM people AS t1 JOIN poker_player AS t2 ON t1.people_id = t2.people_id",
        "schema": "CREATE TABLE poker_player (Poker_Player_ID NUMBER, People_ID NUMBER); CREATE TABLE people (People_ID NUMBER, Name TEXT);"
      },
      {
        "question": "Sort them in the ascending order of the final tables made.",
        "query": "SELECT t1.name FROM people AS t1 JOIN poker_player AS t2 ON t1.people_id = t2.people_id ORDER BY t2.final_table_made",
        "schema": "CREATE TABLE poker_player (Poker_Player_ID NUMBER, People_ID NUMBER, Final_Table_Made NUMBER); CREATE TABLE people (People_ID NUMBER, Name TEXT);"
      }
    ],
    [
      {
        "question": "What is the birth date of each poker player?",
        "query": "SELECT t1.birth_date FROM people AS t1 JOIN poker_player AS t2 ON t1.people_id = t2.people_id",
        "schema": "CREATE TABLE poker_player (Poker_Player_ID NUMBER, People_ID NUMBER); CREATE TABLE people (People_ID NUMBER, Name TEXT, Birth_Date TEXT);"
      },
      {
        "question": "Sort the list by the poker player's earnings.",
        "query": "SELECT t1.birth_date FROM people AS t1 JOIN poker_player AS t2 ON t1.people_id = t2.people_id ORDER BY t2.earnings",
        "schema": "CREATE TABLE poker_player (Poker_Player_ID NUMBER, People_ID NUMBER, Earnings NUMBER); CREATE TABLE people (People_ID NUMBER, Name TEXT, Birth_Date TEXT);"
      },
      {
        "question": "Give me the result for the player with the lowest earnings.",
        "query": "SELECT t1.birth_date FROM people AS t1 JOIN poker_player AS t2 ON t1.people_id = t2.people_id ORDER BY t2.earnings ASC LIMIT 1",
        "schema": "CREATE TABLE poker_player (Poker_Player_ID NUMBER, People_ID NUMBER, Earnings NUMBER); CREATE TABLE people (People_ID NUMBER, Name TEXT, Birth_Date TEXT);"
      }
    ],
    [
      {
        "question": "What is the height of each poker player?",
        "query": "SELECT height FROM people AS t1 JOIN poker_player AS t2 ON t1.people_id = t2.people_id",
        "schema": "CREATE TABLE poker_player (Poker_Player_ID NUMBER, People_ID NUMBER); CREATE TABLE people (People_ID NUMBER, Height NUMBER);"
      },
      {
        "question": "Who has the largest height?",
        "query": "SELECT * FROM people AS t1 JOIN poker_player AS t2 ON t1.people_id = t2.people_id ORDER BY t1.height DESC LIMIT 1",
        "schema": "CREATE TABLE poker_player (Poker_Player_ID NUMBER, People_ID NUMBER); CREATE TABLE people (People_ID NUMBER, Height NUMBER);"
      },
      {
        "question": "What is his or her money rank?",
        "query": "SELECT t2.money_rank FROM people AS t1 JOIN poker_player AS t2 ON t1.people_id = t2.people_id ORDER BY t1.height DESC LIMIT 1",
        "schema": "CREATE TABLE poker_player (Poker_Player_ID NUMBER, People_ID NUMBER, Money_Rank NUMBER, Earnings NUMBER); CREATE TABLE people (People_ID NUMBER, Height NUMBER);"
      }
    ],
    [
      {
        "question": "What is the height of each poker player?",
        "query": "SELECT height FROM people AS t1 JOIN poker_player AS t2 ON t1.people_id = t2.people_id",
        "schema": "CREATE TABLE poker_player (Poker_Player_ID NUMBER, People_ID NUMBER); CREATE TABLE people (People_ID NUMBER, Height NUMBER);"
      },
      {
        "question": "Who all have heights greater than 200?",
        "query": "SELECT * FROM people AS t1 JOIN poker_player AS t2 ON t1.people_id = t2.people_id WHERE t1.height > 200",
        "schema": "CREATE TABLE poker_player (Poker_Player_ID NUMBER, People_ID NUMBER); CREATE TABLE people (People_ID NUMBER, Height NUMBER);"
      },
      {
        "question": "What is the average earnings among them?",
        "query": "SELECT avg(t2.earnings) FROM people AS t1 JOIN poker_player AS t2 ON t1.people_id = t2.people_id WHERE t1.height > 200",
        "schema": "CREATE TABLE poker_player (Poker_Player_ID NUMBER, People_ID NUMBER, Earnings NUMBER); CREATE TABLE people (People_ID NUMBER, Height NUMBER);"
      }
    ],
    [
      {
        "question": "Sort all the poker players in descending order of earnings.",
        "query": "SELECT * FROM poker_player ORDER BY earnings DESC",
        "schema": "CREATE TABLE poker_player (Poker_Player_ID NUMBER, People_ID NUMBER, Earnings NUMBER); CREATE TABLE people (People_ID NUMBER);"
      },
      {
        "question": "What are the names of poker players in descending order of earnings?",
        "query": "SELECT t1.name FROM people AS t1 JOIN poker_player AS t2 ON t1.people_id = t2.people_id ORDER BY t2.earnings DESC",
        "schema": "CREATE TABLE poker_player (Poker_Player_ID NUMBER, People_ID NUMBER, Earnings NUMBER); CREATE TABLE people (People_ID NUMBER, Name TEXT);"
      }
    ],
    [
      {
        "question": "Show the nationality of each person.",
        "query": "SELECT nationality FROM people",
        "schema": "CREATE TABLE people (People_ID NUMBER, Nationality TEXT);"
      },
      {
        "question": "Group people by their nationality.",
        "query": "SELECT * FROM people GROUP BY nationality",
        "schema": "CREATE TABLE people (People_ID NUMBER, Nationality TEXT);"
      },
      {
        "question": "For each of the result, show the corresponding number of people of that nationality?",
        "query": "SELECT nationality , count(*) FROM people GROUP BY nationality",
        "schema": "CREATE TABLE people (People_ID NUMBER, Nationality TEXT);"
      }
    ],
    [
      {
        "question": "Show the nationality of each person.",
        "query": "SELECT nationality FROM people",
        "schema": "CREATE TABLE people (People_ID NUMBER, Nationality TEXT);"
      },
      {
        "question": "Count the number of people for each nationality.",
        "query": "SELECT count(*) FROM people GROUP BY nationality",
        "schema": "CREATE TABLE people (People_ID NUMBER, Nationality TEXT);"
      },
      {
        "question": "What is the most common nationality of people?",
        "query": "SELECT nationality FROM people GROUP BY nationality ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE people (People_ID NUMBER, Nationality TEXT);"
      }
    ],
    [
      {
        "question": "Count the number of people for each nationality.",
        "query": "SELECT count(*) FROM people GROUP BY nationality",
        "schema": "CREATE TABLE people (Nationality TEXT);"
      },
      {
        "question": "Which nationalities are held by at least two people?",
        "query": "SELECT nationality FROM people GROUP BY nationality HAVING count(*) >= 2",
        "schema": "CREATE TABLE people (Nationality TEXT);"
      }
    ],
    [
      {
        "question": "What are the names and birth dates of people?",
        "query": "SELECT name , birth_date FROM people",
        "schema": "CREATE TABLE people (Name TEXT, Birth_Date TEXT);"
      },
      {
        "question": "Sort the results in ascending alphabetical order of name.",
        "query": "SELECT name , birth_date FROM people ORDER BY name ASC",
        "schema": "CREATE TABLE people (Name TEXT, Birth_Date TEXT);"
      }
    ],
    [
      {
        "question": "What are the names of all people?",
        "query": "SELECT name FROM people",
        "schema": "CREATE TABLE people (People_ID NUMBER, Name TEXT);"
      },
      {
        "question": "What about people whose nationality is not \"Russia\"?",
        "query": "SELECT name FROM people WHERE nationality != \"Russia\"",
        "schema": "CREATE TABLE people (People_ID NUMBER, Nationality TEXT, Name TEXT);"
      }
    ],
    [
      {
        "question": "Show all the poker players.",
        "query": "SELECT * FROM poker_player",
        "schema": "CREATE TABLE poker_player (Poker_Player_ID NUMBER, People_ID NUMBER); CREATE TABLE people (People_ID NUMBER);"
      },
      {
        "question": "Show all people who are not poker players.",
        "query": "SELECT * FROM people WHERE people_id NOT IN (SELECT people_id FROM poker_player)",
        "schema": "CREATE TABLE poker_player (Poker_Player_ID NUMBER, People_ID NUMBER); CREATE TABLE people (People_ID NUMBER, Name TEXT);"
      },
      {
        "question": "Give me their names.",
        "query": "SELECT name FROM people WHERE people_id NOT IN (SELECT people_id FROM poker_player)",
        "schema": "CREATE TABLE poker_player (Poker_Player_ID NUMBER, People_ID NUMBER); CREATE TABLE people (People_ID NUMBER, Name TEXT);"
      }
    ]
  ],
  "battle_death": [
    [
      {
        "question": "What are the death tolls each time?",
        "query": "SELECT killed FROM death",
        "schema": "CREATE TABLE death (id NUMBER, killed NUMBER);"
      },
      {
        "question": "What is the maximum number of deaths in any one time?",
        "query": "SELECT max(killed) FROM death",
        "schema": "CREATE TABLE death (id NUMBER, killed NUMBER, injured NUMBER);"
      },
      {
        "question": "What about the minimum?",
        "query": "SELECT min(killed) FROM death",
        "schema": "CREATE TABLE death (id NUMBER, killed NUMBER, injured NUMBER);"
      },
      {
        "question": "Give me the maximum and also the minimum.",
        "query": "SELECT max(killed) , min(killed) FROM death",
        "schema": "CREATE TABLE death (id NUMBER, killed NUMBER, injured NUMBER);"
      }
    ],
    [
      {
        "question": "Show me information about deaths caused by ships.",
        "query": "SELECT * FROM death AS t1 JOIN ship AS t2 ON t1.caused_by_ship_id = t2.id",
        "schema": "CREATE TABLE ship (id NUMBER); CREATE TABLE death (caused_by_ship_id NUMBER, id NUMBER, killed NUMBER, injured NUMBER);"
      },
      {
        "question": "Only ships with tonnage 't'.",
        "query": "SELECT * FROM death AS t1 JOIN ship AS t2 ON t1.caused_by_ship_id = t2.id WHERE t2.tonnage = 't'",
        "schema": "CREATE TABLE ship (id NUMBER, tonnage TEXT); CREATE TABLE death (caused_by_ship_id NUMBER, id NUMBER, killed NUMBER, injured NUMBER);"
      },
      {
        "question": "Only return the death and injury information for those ships.",
        "query": "SELECT t1.killed , t1.injured FROM death AS t1 JOIN ship AS t2 ON t1.caused_by_ship_id = t2.id WHERE t2.tonnage = 't'",
        "schema": "CREATE TABLE ship (id NUMBER, tonnage TEXT); CREATE TABLE death (caused_by_ship_id NUMBER, id NUMBER, killed NUMBER, injured NUMBER);"
      }
    ],
    [
      {
        "question": "What are the ids and names of the battles?",
        "query": "SELECT id, name FROM battle",
        "schema": "CREATE TABLE battle (id NUMBER, name TEXT);"
      },
      {
        "question": "Only show those that ships were lost in.",
        "query": "SELECT DISTINCT t1.name FROM battle AS t1 JOIN ship AS t2 ON t1.id = t2.lost_in_battle",
        "schema": "CREATE TABLE battle (id NUMBER, name TEXT); CREATE TABLE ship (lost_in_battle NUMBER, id NUMBER, name TEXT); CREATE TABLE death (caused_by_ship_id NUMBER);"
      },
      {
        "question": "Please, just the ones with 'Brig' ship type.",
        "query": "SELECT DISTINCT t1.id , t1.name FROM battle AS t1 JOIN ship AS t2 ON t1.id = t2.lost_in_battle WHERE t2.ship_type = 'Brig'",
        "schema": "CREATE TABLE battle (id NUMBER, name TEXT); CREATE TABLE ship (lost_in_battle NUMBER, id NUMBER, name TEXT, ship_type TEXT); CREATE TABLE death (caused_by_ship_id NUMBER);"
      }
    ],
    [
      {
        "question": "How many people were killed or injured in each battle?",
        "query": "SELECT t1.id , t1.name, sum(t3.killed), sum(t3.injured) FROM battle AS t1 JOIN ship AS t2 ON t1.id = t2.lost_in_battle JOIN death AS t3 ON t2.id = t3.caused_by_ship_id GROUP BY t1.id",
        "schema": "CREATE TABLE battle (id NUMBER, name TEXT, result TEXT); CREATE TABLE ship (lost_in_battle NUMBER); CREATE TABLE death (id NUMBER, killed NUMBER, injured NUMBER);"
      },
      {
        "question": "Only show the deaths for those battles that produced at least ten deaths.",
        "query": "SELECT t1.id , t1.name FROM battle AS t1 JOIN ship AS t2 ON t1.id = t2.lost_in_battle JOIN death AS t3 ON t2.id = t3.caused_by_ship_id GROUP BY t1.id HAVING sum(t3.killed) > 10",
        "schema": "CREATE TABLE battle (id NUMBER, name TEXT, result TEXT); CREATE TABLE ship (lost_in_battle NUMBER, id NUMBER, name TEXT); CREATE TABLE death (caused_by_ship_id NUMBER, id NUMBER, killed NUMBER, injured NUMBER);"
      }
    ],
    [
      {
        "question": "List the injuries caused by each ship (give ship id and name please).",
        "query": "SELECT t2.id , t2.name, sum(t1.injured) FROM death AS t1 JOIN ship AS t2 ON t1.caused_by_ship_id = t2.id GROUP BY t2.id",
        "schema": "CREATE TABLE ship (id NUMBER, name TEXT); CREATE TABLE death (caused_by_ship_id NUMBER, injured NUMBER);"
      },
      {
        "question": "Sort it by decreasing number of injuries.",
        "query": "SELECT t2.id , t2.name, sum(t1.injured) FROM death AS t1 JOIN ship AS t2 ON t1.caused_by_ship_id = t2.id GROUP BY t2.id ORDER BY sum(t1.injured)",
        "schema": "CREATE TABLE ship (id NUMBER, name TEXT); CREATE TABLE death (caused_by_ship_id NUMBER, injured NUMBER);"
      },
      {
        "question": "Only show the ship id and name that caused the most total injuries.",
        "query": "SELECT t2.id , t2.name FROM death AS t1 JOIN ship AS t2 ON t1.caused_by_ship_id = t2.id GROUP BY t2.id ORDER BY sum(t1.injured) DESC LIMIT 1",
        "schema": "CREATE TABLE ship (id NUMBER, name TEXT); CREATE TABLE death (caused_by_ship_id NUMBER, injured NUMBER);"
      }
    ],
    [
      {
        "question": "Which battles did the bulgarian commander 'Kaloyan' fight in?",
        "query": "SELECT name FROM battle WHERE bulgarian_commander = 'Kaloyan'",
        "schema": "CREATE TABLE battle (id NUMBER, name TEXT, bulgarian_commander TEXT, latin_commander TEXT);"
      },
      {
        "question": "How about the latin commander 'Baldwin I'?",
        "query": "SELECT name FROM battle WHERE latin_commander = 'Baldwin I'",
        "schema": "CREATE TABLE battle (id NUMBER, name TEXT, bulgarian_commander TEXT, latin_commander TEXT);"
      },
      {
        "question": "Just the ones where they were fighting one another, please.",
        "query": "SELECT name FROM battle WHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I'",
        "schema": "CREATE TABLE battle (id NUMBER, name TEXT, bulgarian_commander TEXT, latin_commander TEXT);"
      }
    ],
    [
      {
        "question": "Which battle ids lost ships with tonnage '225'?",
        "query": "SELECT lost_in_battle FROM ship WHERE tonnage = '225'",
        "schema": "CREATE TABLE battle (id NUMBER); CREATE TABLE ship (lost_in_battle NUMBER, id NUMBER, tonnage TEXT); CREATE TABLE death (caused_by_ship_id NUMBER);"
      },
      {
        "question": "Give the names of these battles, too.",
        "query": "SELECT t2.id, t2.name FROM ship AS t1 JOIN battle AS t2 ON t1.lost_in_battle = t2.id WHERE tonnage = '225'",
        "schema": "CREATE TABLE battle (id NUMBER, name TEXT); CREATE TABLE ship (lost_in_battle NUMBER, id NUMBER, name TEXT, tonnage TEXT); CREATE TABLE death (caused_by_ship_id NUMBER);"
      },
      {
        "question": "Which battle ids and names did not lose any ship with tonnage '225'?",
        "query": "SELECT id, name FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage = '225' );",
        "schema": "CREATE TABLE battle (id NUMBER, name TEXT); CREATE TABLE ship (lost_in_battle NUMBER, id NUMBER, name TEXT, tonnage TEXT); CREATE TABLE death (caused_by_ship_id NUMBER);"
      },
      {
        "question": "How many is that?",
        "query": "SELECT count(*) FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage = '225' );",
        "schema": "CREATE TABLE battle (id NUMBER, name TEXT); CREATE TABLE ship (lost_in_battle NUMBER, id NUMBER, name TEXT, tonnage TEXT); CREATE TABLE death (caused_by_ship_id NUMBER);"
      }
    ],
    [
      {
        "question": "List the name and date of the battle that has lost the ship named 'Lettice'",
        "query": "SELECT t1.name , t1.date FROM battle AS t1 JOIN ship AS t2 ON t1.id = t2.lost_in_battle WHERE t2.name = 'Lettice'",
        "schema": "CREATE TABLE battle (id NUMBER, name TEXT, date TEXT, result TEXT); CREATE TABLE ship (lost_in_battle NUMBER, id NUMBER, name TEXT);"
      },
      {
        "question": "Same for 'HMS Atlanta', please.",
        "query": "SELECT t1.name , t1.date FROM battle AS t1 JOIN ship AS t2 ON t1.id = t2.lost_in_battle WHERE t2.name = 'HMS Atlanta'",
        "schema": "CREATE TABLE battle (id NUMBER, name TEXT, date TEXT, result TEXT); CREATE TABLE ship (lost_in_battle NUMBER, id NUMBER, name TEXT, location TEXT);"
      },
      {
        "question": "Can you intersect those?",
        "query": "SELECT t1.name , t1.date FROM battle AS t1 JOIN ship AS t2 ON t1.id = t2.lost_in_battle WHERE t2.name = 'Lettice' INTERSECT SELECT t1.name , t1.date FROM battle AS t1 JOIN ship AS t2 ON t1.id = t2.lost_in_battle WHERE t2.name = 'HMS Atalanta'",
        "schema": "CREATE TABLE battle (id NUMBER, name TEXT, date TEXT, result TEXT); CREATE TABLE ship (lost_in_battle NUMBER, id NUMBER, name TEXT, location TEXT);"
      }
    ],
    [
      {
        "question": "Which battle ids and names lost ships in the 'English Channel'?",
        "query": "SELECT t1.id, t1.name FROM battle AS t1 JOIN ship AS t2 ON t1.id = t2.lost_in_battle WHERE t2.location = 'English Channel'",
        "schema": "CREATE TABLE battle (id NUMBER, name TEXT); CREATE TABLE ship (lost_in_battle NUMBER, id NUMBER, name TEXT); CREATE TABLE death (caused_by_ship_id NUMBER, id NUMBER);"
      },
      {
        "question": "Which did not?",
        "query": "SELECT t1.id, t1.name FROM battle EXCEPT SELECT t1.id, t1.name FROM battle AS t1 JOIN ship AS t2 ON t1.id = t2.lost_in_battle WHERE t2.location = 'English Channel'",
        "schema": "CREATE TABLE battle (id NUMBER, name TEXT); CREATE TABLE ship (lost_in_battle NUMBER, id NUMBER, name TEXT, location TEXT); CREATE TABLE death (caused_by_ship_id NUMBER, id NUMBER);"
      },
      {
        "question": "For these ones, show their names, results, and bulgarian commanders.",
        "query": "SELECT name , RESULT , bulgarian_commander FROM battle EXCEPT SELECT t1.name , t1.result , t1.bulgarian_commander FROM battle AS t1 JOIN ship AS t2 ON t1.id = t2.lost_in_battle WHERE t2.location = 'English Channel'",
        "schema": "CREATE TABLE battle (id NUMBER, name TEXT, bulgarian_commander TEXT, latin_commander TEXT, result TEXT); CREATE TABLE ship (lost_in_battle NUMBER, id NUMBER, name TEXT, location TEXT); CREATE TABLE death (caused_by_ship_id NUMBER, id NUMBER);"
      }
    ]
  ],
  "car_1": [
    [
      {
        "question": "How many continents are there?",
        "query": "SELECT count(*) FROM continents;",
        "schema": "CREATE TABLE continents (ContId NUMBER, Continent TEXT); CREATE TABLE countries (CountryId NUMBER, Continent NUMBER); CREATE TABLE car_makers (Country TEXT);"
      },
      {
        "question": "Show all their ids and names!",
        "query": "SELECT contid , continent FROM continents;",
        "schema": "CREATE TABLE continents (ContId NUMBER, Continent TEXT); CREATE TABLE countries (CountryId NUMBER, Continent NUMBER); CREATE TABLE car_makers (Country TEXT); CREATE TABLE car_names (MakeId NUMBER);"
      },
      {
        "question": "What countries do they each have?",
        "query": "SELECT t1.contid , t1.continent , * FROM continents AS t1 JOIN countries AS t2 ON t1.contid = t2.continent;",
        "schema": "CREATE TABLE continents (ContId NUMBER, Continent TEXT); CREATE TABLE countries (CountryId NUMBER, CountryName TEXT, Continent NUMBER); CREATE TABLE car_makers (Country TEXT); CREATE TABLE car_names (MakeId NUMBER);"
      },
      {
        "question": "Count how many there are for each continent name and id!",
        "query": "SELECT t1.contid , t1.continent , count(*) FROM continents AS t1 JOIN countries AS t2 ON t1.contid = t2.continent GROUP BY t1.contid;",
        "schema": "CREATE TABLE continents (ContId NUMBER, Continent TEXT); CREATE TABLE countries (CountryId NUMBER, CountryName TEXT, Continent NUMBER); CREATE TABLE car_makers (Country TEXT); CREATE TABLE car_names (MakeId NUMBER);"
      }
    ],
    [
      {
        "question": "What are the names and ids of the different car makers?",
        "query": "SELECT fullname, id FROM car_makers;",
        "schema": "CREATE TABLE car_makers (Id NUMBER, Maker TEXT, FullName TEXT); CREATE TABLE model_list (Maker NUMBER, Model TEXT); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT);"
      },
      {
        "question": "What countries are they each from?",
        "query": "SELECT country, fullname, id FROM car_makers;",
        "schema": "CREATE TABLE continents (ContId NUMBER, Continent TEXT); CREATE TABLE countries (CountryId NUMBER, CountryName TEXT, Continent NUMBER); CREATE TABLE car_makers (Id NUMBER, Maker TEXT, FullName TEXT, Country TEXT); CREATE TABLE model_list (Maker NUMBER, Model TEXT); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT);"
      },
      {
        "question": "For each, how many models do they each produce?",
        "query": "SELECT count(*), t1.country, t1.fullname, t1.id FROM car_makers AS t1 JOIN model_list AS t2 ON t1.id = t2.maker GROUP BY t1.id;",
        "schema": "CREATE TABLE continents (ContId NUMBER, Continent TEXT); CREATE TABLE countries (CountryId NUMBER, CountryName TEXT, Continent NUMBER); CREATE TABLE car_makers (Id NUMBER, Maker TEXT, FullName TEXT, Country TEXT); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT);"
      },
      {
        "question": "Can actually just show the name, id and the number of models?",
        "query": "SELECT t1.fullname , t1.id , count(*) FROM car_makers AS t1 JOIN model_list AS t2 ON t1.id = t2.maker GROUP BY t1.id;",
        "schema": "CREATE TABLE continents (ContId NUMBER, Continent TEXT); CREATE TABLE countries (CountryId NUMBER, CountryName TEXT, Continent NUMBER); CREATE TABLE car_makers (Id NUMBER, Maker TEXT, FullName TEXT, Country TEXT); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT);"
      }
    ],
    [
      {
        "question": "What is the average horsepower of all cars?",
        "query": "SELECT avg(horsepower) FROM cars_data;",
        "schema": "CREATE TABLE cars_data (Cylinders NUMBER, Horsepower TEXT);"
      },
      {
        "question": "How about the maximum?",
        "query": "SELECT t2.horsepower FROM car_names AS t1 JOIN cars_data AS t2 ON t1.makeid = t2.id ORDER BY t2.horsepower DESC LIMIT 1;",
        "schema": "CREATE TABLE cars_data (Id NUMBER, MPG TEXT, Cylinders NUMBER, Horsepower TEXT);"
      },
      {
        "question": "What about the minimum?",
        "query": "SELECT t2.horsepower FROM car_names AS t1 JOIN cars_data AS t2 ON t1.makeid = t2.id ORDER BY t2.horsepower ASC LIMIT 1;",
        "schema": "CREATE TABLE car_names (MakeId NUMBER, Make TEXT); CREATE TABLE cars_data (Id NUMBER, MPG TEXT, Cylinders NUMBER, Horsepower TEXT);"
      },
      {
        "question": "What is the model of the car with this horsepower?",
        "query": "SELECT t1.model FROM car_names AS t1 JOIN cars_data AS t2 ON t1.makeid = t2.id ORDER BY t2.horsepower ASC LIMIT 1;",
        "schema": "CREATE TABLE model_list (ModelId NUMBER, Model TEXT); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT); CREATE TABLE cars_data (Id NUMBER, MPG TEXT, Cylinders NUMBER, Horsepower TEXT);"
      }
    ],
    [
      {
        "question": "What is the average weight of all the cars?",
        "query": "SELECT avg(weight) FROM cars_data",
        "schema": "CREATE TABLE cars_data (Weight NUMBER);"
      },
      {
        "question": "List all the car information with weights above this?",
        "query": "SELECT * FROM car_names AS t1 JOIN cars_data AS t2 ON t1.makeid = t2.id WHERE t2.weight > (SELECT avg(weight) FROM cars_data)",
        "schema": "CREATE TABLE cars_data (Id NUMBER, MPG TEXT, Edispl NUMBER, Weight NUMBER);"
      },
      {
        "question": "How about below this?",
        "query": "SELECT * FROM car_names AS t1 JOIN cars_data AS t2 ON t1.makeid = t2.id WHERE t2.weight < (SELECT avg(weight) FROM cars_data)",
        "schema": "CREATE TABLE car_names (MakeId NUMBER, Make TEXT); CREATE TABLE cars_data (Id NUMBER, MPG TEXT, Edispl NUMBER, Weight NUMBER);"
      },
      {
        "question": "Please, show just their model names!",
        "query": "SELECT t1.model FROM car_names AS t1 JOIN cars_data AS t2 ON t1.makeid = t2.id WHERE t2.weight < (SELECT avg(weight) FROM cars_data)",
        "schema": "CREATE TABLE model_list (ModelId NUMBER, Model TEXT); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT); CREATE TABLE cars_data (Id NUMBER, MPG TEXT, Edispl NUMBER, Weight NUMBER);"
      }
    ],
    [
      {
        "question": "What are the ids, and models of the cars were made in 1970?",
        "query": "SELECT t1.id, t2.model FROM cars_data AS t1 JOIN car_names AS t2 ON t1.id = t2.makeid WHERE t1.year = '1970';",
        "schema": "CREATE TABLE model_list (ModelId NUMBER, Model TEXT); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT); CREATE TABLE cars_data (Id NUMBER, Year NUMBER);"
      },
      {
        "question": "Show their horsepower and MPG as well?",
        "query": "SELECT t1.horsepower, t1.mpg, t1.id, t2.model FROM cars_data AS t1 JOIN car_names AS t2 ON t1.id = t2.makeid WHERE t1.year = '1970';",
        "schema": "CREATE TABLE model_list (ModelId NUMBER, Model TEXT); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT); CREATE TABLE cars_data (Id NUMBER, MPG TEXT, Horsepower TEXT, Year NUMBER);"
      },
      {
        "question": "Also provide the names of their makers!",
        "query": "SELECT t1.maker, t4.horsepower, t4.mpg, t4.id, t2.model FROM car_makers AS t1 JOIN model_list AS t2 ON t1.id = t2.maker JOIN car_names AS t3 ON t2.model = t3.model JOIN cars_data AS t4 ON t3.makeid = t4.id WHERE t4.year = '1970';",
        "schema": "CREATE TABLE car_makers (Id NUMBER, Maker TEXT, FullName TEXT); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT); CREATE TABLE cars_data (Id NUMBER, MPG TEXT, Horsepower TEXT, Year NUMBER);"
      },
      {
        "question": "Just show a unique list of all these different makers.",
        "query": "SELECT DISTINCT t1.maker FROM car_makers AS t1 JOIN model_list AS t2 ON t1.id = t2.maker JOIN car_names AS t3 ON t2.model = t3.model JOIN cars_data AS t4 ON t3.makeid = t4.id WHERE t4.year = '1970';",
        "schema": "CREATE TABLE car_makers (Id NUMBER, Maker TEXT, FullName TEXT); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT); CREATE TABLE cars_data (Id NUMBER, MPG TEXT, Horsepower TEXT, Year NUMBER);"
      }
    ],
    [
      {
        "question": "Show me the makes and models of each car!",
        "query": "SELECT make , model FROM car_names;",
        "schema": "CREATE TABLE car_makers (Id NUMBER, Maker TEXT); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT);"
      },
      {
        "question": "Also provide which the year they were produced?",
        "query": "SELECT t2.make , t2.model, t1.year FROM cars_data AS t1 JOIN car_names AS t2 ON t1.id = t2.makeid;",
        "schema": "CREATE TABLE car_makers (Id NUMBER, Maker TEXT); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT); CREATE TABLE cars_data (Id NUMBER, Year NUMBER);"
      },
      {
        "question": "Which ones been produce in the earliest year?",
        "query": "SELECT t2.make , t2.model, t1.year FROM cars_data AS t1 JOIN car_names AS t2 ON t1.id = t2.makeid WHERE t1.year = (SELECT min(YEAR) FROM cars_data);",
        "schema": "CREATE TABLE car_makers (Id NUMBER, Maker TEXT); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT); CREATE TABLE cars_data (Id NUMBER, Year NUMBER);"
      },
      {
        "question": "Show just the make and year!",
        "query": "SELECT t2.make , t1.year FROM cars_data AS t1 JOIN car_names AS t2 ON t1.id = t2.makeid WHERE t1.year = (SELECT min(YEAR) FROM cars_data);",
        "schema": "CREATE TABLE car_makers (Id NUMBER, Maker TEXT); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT); CREATE TABLE cars_data (Id NUMBER, Year NUMBER);"
      }
    ],
    [
      {
        "question": "What are all the different car models?",
        "query": "SELECT DISTINCT model FROM model_list;",
        "schema": "CREATE TABLE model_list (ModelId NUMBER, Model TEXT); CREATE TABLE car_names (Model TEXT);"
      },
      {
        "question": "Show also all the car makes and the years that they were produced!",
        "query": "SELECT t1.model, t2.make, t3.year FROM model_list AS t1 JOIN car_names AS t2 ON t1.model = t2.model JOIN cars_data AS t3 ON t2.makeid = t3.id;",
        "schema": "CREATE TABLE car_makers (Id NUMBER, Maker TEXT); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT); CREATE TABLE cars_data (Id NUMBER, Year NUMBER);"
      },
      {
        "question": "Show only those that were made after 1980!",
        "query": "SELECT t1.model, t2.make, t3.year FROM model_list AS t1 JOIN car_names AS t2 ON t1.model = t2.model JOIN cars_data AS t3 ON t2.makeid = t3.id WHERE t3.year > 1980;",
        "schema": "CREATE TABLE car_makers (Id NUMBER, Maker TEXT); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT); CREATE TABLE cars_data (Id NUMBER, Year NUMBER);"
      },
      {
        "question": "What are the distinct car models for these?",
        "query": "SELECT DISTINCT t1.model FROM model_list AS t1 JOIN car_names AS t2 ON t1.model = t2.model JOIN cars_data AS t3 ON t2.makeid = t3.id WHERE t3.year > 1980;",
        "schema": "CREATE TABLE car_makers (Id NUMBER, Maker TEXT); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT); CREATE TABLE cars_data (Id NUMBER, Year NUMBER);"
      }
    ],
    [
      {
        "question": "What are the names and country name of each car maker?",
        "query": "SELECT t1.maker, t2.countryname FROM car_makers AS t1 JOIN countries AS t2 ON t1.country = t2.countryid;",
        "schema": "CREATE TABLE countries (CountryId NUMBER, CountryName TEXT); CREATE TABLE car_makers (Id NUMBER, Maker TEXT, FullName TEXT, Country TEXT); CREATE TABLE model_list (Maker NUMBER); CREATE TABLE car_names (MakeId NUMBER, Make TEXT);"
      },
      {
        "question": "Also provide the continent name for each!",
        "query": "SELECT t1.continent, t3.maker, t2.countryname FROM continents AS t1 JOIN countries AS t2 ON t1.contid = t2.continent JOIN car_makers AS t3 ON t2.countryid = t3.country;",
        "schema": "CREATE TABLE continents (ContId NUMBER, Continent TEXT); CREATE TABLE countries (CountryId NUMBER, CountryName TEXT, Continent NUMBER); CREATE TABLE car_makers (Id NUMBER, Maker TEXT, FullName TEXT, Country TEXT); CREATE TABLE model_list (Maker NUMBER); CREATE TABLE car_names (MakeId NUMBER, Make TEXT);"
      },
      {
        "question": "How many car makers are there per continent?",
        "query": "SELECT t1.continent , count(*) FROM continents AS t1 JOIN countries AS t2 ON t1.contid = t2.continent JOIN car_makers AS t3 ON t2.countryid = t3.country GROUP BY t1.continent;",
        "schema": "CREATE TABLE continents (ContId NUMBER, Continent TEXT); CREATE TABLE countries (CountryId NUMBER, CountryName TEXT, Continent NUMBER); CREATE TABLE car_makers (Id NUMBER, Maker TEXT, FullName TEXT, Country TEXT); CREATE TABLE model_list (Maker NUMBER); CREATE TABLE car_names (MakeId NUMBER, Make TEXT);"
      }
    ],
    [
      {
        "question": "How many countries are there?",
        "query": "SELECT count(*) FROM countries;",
        "schema": "CREATE TABLE continents (ContId NUMBER, Continent TEXT); CREATE TABLE countries (CountryId NUMBER, CountryName TEXT, Continent NUMBER); CREATE TABLE car_makers (Country TEXT);"
      },
      {
        "question": "How many car makers belong to each one?",
        "query": "SELECT *, count(*) FROM car_makers AS t1 JOIN countries AS t2 ON t1.country = t2.countryid GROUP BY t1.country;",
        "schema": "CREATE TABLE continents (ContId NUMBER, Continent TEXT); CREATE TABLE countries (CountryId NUMBER, CountryName TEXT, Continent NUMBER); CREATE TABLE car_makers (Id NUMBER, Maker TEXT, Country TEXT); CREATE TABLE car_names (MakeId NUMBER);"
      },
      {
        "question": "What is the name of the country that has the least number?",
        "query": "SELECT t2.countryname FROM car_makers AS t1 JOIN countries AS t2 ON t1.country = t2.countryid GROUP BY t1.country ORDER BY count(*) ASC LIMIT 1;",
        "schema": "CREATE TABLE continents (ContId NUMBER, Continent TEXT); CREATE TABLE countries (CountryId NUMBER, CountryName TEXT, Continent NUMBER); CREATE TABLE car_makers (Id NUMBER, Maker TEXT, Country TEXT); CREATE TABLE car_names (MakeId NUMBER);"
      },
      {
        "question": "How about the most?",
        "query": "SELECT t2.countryname FROM car_makers AS t1 JOIN countries AS t2 ON t1.country = t2.countryid GROUP BY t1.country ORDER BY count(*) DESC LIMIT 1;",
        "schema": "CREATE TABLE continents (ContId NUMBER, Continent TEXT); CREATE TABLE countries (CountryId NUMBER, CountryName TEXT, Continent NUMBER); CREATE TABLE car_makers (Id NUMBER, Maker TEXT, Country TEXT); CREATE TABLE car_names (MakeId NUMBER);"
      }
    ],
    [
      {
        "question": "How many makers are there?",
        "query": "SELECT count(*) FROM car_makers;",
        "schema": "CREATE TABLE car_makers (Id NUMBER, Maker TEXT); CREATE TABLE model_list (Maker NUMBER, Model TEXT); CREATE TABLE car_names (MakeId NUMBER, Make TEXT);"
      },
      {
        "question": "What are their full names and ids?",
        "query": "SELECT fullname, id FROM car_makers;",
        "schema": "CREATE TABLE car_makers (Id NUMBER, Maker TEXT, FullName TEXT); CREATE TABLE model_list (Maker NUMBER, Model TEXT); CREATE TABLE car_names (MakeId NUMBER, Make TEXT);"
      },
      {
        "question": "What models have they each produced?",
        "query": "SELECT t1.model , t2.fullname, t2.id FROM model_list AS t1 JOIN car_makers AS t2 ON t1.maker = t2.id;",
        "schema": "CREATE TABLE car_makers (Id NUMBER, Maker TEXT, FullName TEXT); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT);"
      },
      {
        "question": "Count how many modes there are per maker.",
        "query": "SELECT count(*) , t2.fullname , t2.id FROM model_list AS t1 JOIN car_makers AS t2 ON t1.maker = t2.id GROUP BY t2.id;",
        "schema": "CREATE TABLE car_makers (Id NUMBER, Maker TEXT, FullName TEXT); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT);"
      }
    ],
    [
      {
        "question": "Show all the car ids with the make amc hornet sporabout (sw)?",
        "query": "SELECT t1.id FROM cars_data AS t1 JOIN car_names AS t2 ON t1.id = t2.makeid WHERE t2.make = 'amc hornet sportabout (sw)';",
        "schema": "CREATE TABLE car_makers (Id NUMBER, Maker TEXT); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT); CREATE TABLE cars_data (Id NUMBER);"
      },
      {
        "question": "What is its horsepower?",
        "query": "SELECT t1.horsepower FROM cars_data AS t1 JOIN car_names AS t2 ON t1.id = t2.makeid WHERE t2.make = 'amc hornet sportabout (sw)';",
        "schema": "CREATE TABLE car_makers (Id NUMBER, Maker TEXT); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT); CREATE TABLE cars_data (Id NUMBER, Horsepower TEXT);"
      },
      {
        "question": "How about its MPG?",
        "query": "SELECT t1.mpg FROM cars_data AS t1 JOIN car_names AS t2 ON t1.id = t2.makeid WHERE t2.make = 'amc hornet sportabout (sw)';",
        "schema": "CREATE TABLE car_makers (Id NUMBER, Maker TEXT); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT); CREATE TABLE cars_data (Id NUMBER, MPG TEXT, Horsepower TEXT);"
      },
      {
        "question": "How about its accelerate?",
        "query": "SELECT t1.accelerate FROM cars_data AS t1 JOIN car_names AS t2 ON t1.id = t2.makeid WHERE t2.make = 'amc hornet sportabout (sw)';",
        "schema": "CREATE TABLE car_makers (Id NUMBER, Maker TEXT); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT); CREATE TABLE cars_data (Id NUMBER, MPG TEXT, Horsepower TEXT, Accelerate NUMBER);"
      }
    ],
    [
      {
        "question": "Show all the different car makers?",
        "query": "SELECT DISTINCT maker FROM car_makers;",
        "schema": "CREATE TABLE car_makers (Id NUMBER, Maker TEXT); CREATE TABLE model_list (Maker NUMBER, Model TEXT); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT);"
      },
      {
        "question": "What are the names of the countries they belong to?",
        "query": "SELECT t1.maker, t2.countryname FROM car_makers AS t1 JOIN countries AS t2 ON t1.country = t2.countryid;",
        "schema": "CREATE TABLE continents (ContId NUMBER, Continent TEXT); CREATE TABLE countries (CountryId NUMBER, CountryName TEXT, Continent NUMBER); CREATE TABLE car_makers (Id NUMBER, Maker TEXT, Country TEXT); CREATE TABLE model_list (Maker NUMBER, Model TEXT); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT);"
      },
      {
        "question": "Show just the car makers from France!",
        "query": "SELECT t1.maker FROM car_makers AS t1 JOIN countries AS t2 ON t1.country = t2.countryid WHERE t2.countryname = 'france';",
        "schema": "CREATE TABLE continents (ContId NUMBER, Continent TEXT); CREATE TABLE countries (CountryId NUMBER, CountryName TEXT, Continent NUMBER); CREATE TABLE car_makers (Id NUMBER, Maker TEXT, Country TEXT); CREATE TABLE model_list (Maker NUMBER, Model TEXT); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT count(*) FROM car_makers AS t1 JOIN countries AS t2 ON t1.country = t2.countryid WHERE t2.countryname = 'france';",
        "schema": "CREATE TABLE continents (ContId NUMBER, Continent TEXT); CREATE TABLE countries (CountryId NUMBER, CountryName TEXT, Continent NUMBER); CREATE TABLE car_makers (Id NUMBER, Maker TEXT, Country TEXT); CREATE TABLE model_list (Maker NUMBER, Model TEXT); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT);"
      }
    ],
    [
      {
        "question": "How many car models are produced in total?",
        "query": "SELECT count(*) FROM model_list;",
        "schema": "CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT);"
      },
      {
        "question": "How many in Germany?",
        "query": "SELECT count(*) FROM model_list AS t1 JOIN car_makers AS t2 ON t1.maker = t2.id JOIN countries AS t3 ON t2.country = t3.countryid WHERE t3.countryname = 'Germany';",
        "schema": "CREATE TABLE continents (ContId NUMBER, Continent TEXT); CREATE TABLE countries (CountryId NUMBER, CountryName TEXT, Continent NUMBER); CREATE TABLE car_makers (Id NUMBER, Country TEXT); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT);"
      },
      {
        "question": "How about in Japan?",
        "query": "SELECT count(*) FROM model_list AS t1 JOIN car_makers AS t2 ON t1.maker = t2.id JOIN countries AS t3 ON t2.country = t3.countryid WHERE t3.countryname = 'japan';",
        "schema": "CREATE TABLE continents (ContId NUMBER, Continent TEXT); CREATE TABLE countries (CountryId NUMBER, CountryName TEXT, Continent NUMBER); CREATE TABLE car_makers (Id NUMBER, Maker TEXT, Country TEXT); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT);"
      },
      {
        "question": "How about the USA?",
        "query": "SELECT count(*) FROM model_list AS t1 JOIN car_makers AS t2 ON t1.maker = t2.id JOIN countries AS t3 ON t2.country = t3.countryid WHERE t3.countryname = 'usa';",
        "schema": "CREATE TABLE continents (ContId NUMBER, Continent TEXT); CREATE TABLE countries (CountryId NUMBER, CountryName TEXT, Continent NUMBER); CREATE TABLE car_makers (Id NUMBER, Maker TEXT, Country TEXT); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT);"
      }
    ],
    [
      {
        "question": "What is all the car information for cars produced in 1974?",
        "query": "SELECT * FROM cars_data WHERE YEAR = 1974;",
        "schema": "CREATE TABLE car_makers (Id NUMBER); CREATE TABLE model_list (Model TEXT); CREATE TABLE car_names (MakeId NUMBER, Model TEXT); CREATE TABLE cars_data (Id NUMBER, Year NUMBER);"
      },
      {
        "question": "Now, show me just the weight and cylinders of these cars.",
        "query": "SELECT weight, cylinders FROM cars_data WHERE YEAR = 1974;",
        "schema": "CREATE TABLE car_makers (Id NUMBER); CREATE TABLE model_list (Model TEXT); CREATE TABLE car_names (MakeId NUMBER, Model TEXT); CREATE TABLE cars_data (Id NUMBER, Cylinders NUMBER, Horsepower TEXT, Weight NUMBER, Year NUMBER);"
      },
      {
        "question": "List just those with 8 cylinders!",
        "query": "SELECT weight, cylinders FROM cars_data WHERE cylinders = 8 AND YEAR = 1974;",
        "schema": "CREATE TABLE car_makers (Id NUMBER); CREATE TABLE model_list (Model TEXT); CREATE TABLE car_names (MakeId NUMBER, Model TEXT); CREATE TABLE cars_data (Id NUMBER, Cylinders NUMBER, Horsepower TEXT, Weight NUMBER, Year NUMBER);"
      },
      {
        "question": "What is the smallest weight?",
        "query": "SELECT weight FROM cars_data WHERE cylinders = 8 AND YEAR = 1974 ORDER BY weight ASC LIMIT 1;",
        "schema": "CREATE TABLE car_makers (Id NUMBER); CREATE TABLE model_list (Model TEXT); CREATE TABLE car_names (MakeId NUMBER, Model TEXT); CREATE TABLE cars_data (Id NUMBER, Cylinders NUMBER, Horsepower TEXT, Weight NUMBER, Year NUMBER);"
      }
    ],
    [
      {
        "question": "What are all the different country names?",
        "query": "SELECT countryname FROM countries;",
        "schema": "CREATE TABLE continents (ContId NUMBER, Continent TEXT); CREATE TABLE countries (CountryId NUMBER, CountryName TEXT, Continent NUMBER); CREATE TABLE car_makers (Country TEXT);"
      },
      {
        "question": "Which ones have no car makers?",
        "query": "SELECT countryname FROM countries WHERE countryid NOT IN (SELECT country FROM car_makers);",
        "schema": "CREATE TABLE continents (ContId NUMBER, Continent TEXT); CREATE TABLE countries (CountryId NUMBER, CountryName TEXT, Continent NUMBER); CREATE TABLE car_makers (Id NUMBER, Maker TEXT, Country TEXT); CREATE TABLE car_names (MakeId NUMBER, Make TEXT);"
      },
      {
        "question": "Which ones have at least one?",
        "query": "SELECT t1.countryname FROM countries AS t1 JOIN car_makers AS t2 ON t1.countryid = t2.country GROUP BY t1.countryid HAVING count(*) >= 1;",
        "schema": "CREATE TABLE continents (ContId NUMBER, Continent TEXT); CREATE TABLE countries (CountryId NUMBER, CountryName TEXT, Continent NUMBER); CREATE TABLE car_makers (Id NUMBER, Maker TEXT, Country TEXT); CREATE TABLE car_names (MakeId NUMBER, Make TEXT);"
      },
      {
        "question": "Also provide the country id!",
        "query": "SELECT t1.countryname , t1.countryid FROM countries AS t1 JOIN car_makers AS t2 ON t1.countryid = t2.country GROUP BY t1.countryid HAVING count(*) >= 1;",
        "schema": "CREATE TABLE continents (ContId NUMBER, Continent TEXT); CREATE TABLE countries (CountryId NUMBER, CountryName TEXT, Continent NUMBER); CREATE TABLE car_makers (Id NUMBER, Maker TEXT, Country TEXT); CREATE TABLE car_names (MakeId NUMBER, Make TEXT);"
      }
    ],
    [
      {
        "question": "Show all the car makers and their country name?",
        "query": "SELECT t3.maker, t1.countryname FROM countries AS t1 JOIN continents AS t2 ON t1.continent = t2.contid JOIN car_makers AS t3 ON t1.countryid = t3.country;",
        "schema": "CREATE TABLE continents (Continent TEXT); CREATE TABLE countries (CountryId NUMBER, CountryName TEXT, Continent NUMBER); CREATE TABLE car_makers (Id NUMBER, Maker TEXT, Country TEXT); CREATE TABLE model_list (Maker NUMBER); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT);"
      },
      {
        "question": "Count how many there are per country name?",
        "query": "SELECT t1.countryname, count(*) FROM countries AS t1 JOIN continents AS t2 ON t1.continent = t2.contid JOIN car_makers AS t3 ON t1.countryid = t3.country GROUP BY t1.countryname;",
        "schema": "CREATE TABLE continents (ContId NUMBER, Continent TEXT); CREATE TABLE countries (CountryId NUMBER, CountryName TEXT, Continent NUMBER); CREATE TABLE car_makers (Id NUMBER, Maker TEXT, Country TEXT); CREATE TABLE model_list (Maker NUMBER); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT);"
      },
      {
        "question": "Show just those from countries in the continent Europe.",
        "query": "SELECT t1.countryname, count(*) FROM countries AS t1 JOIN continents AS t2 ON t1.continent = t2.contid JOIN car_makers AS t3 ON t1.countryid = t3.country WHERE t2.continent = 'europe' GROUP BY t1.countryname;",
        "schema": "CREATE TABLE continents (ContId NUMBER, Continent TEXT); CREATE TABLE countries (CountryId NUMBER, CountryName TEXT, Continent NUMBER); CREATE TABLE car_makers (Id NUMBER, Maker TEXT, Country TEXT); CREATE TABLE model_list (Maker NUMBER); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT);"
      },
      {
        "question": "List the country names of those with at least 3 manufacturers!",
        "query": "SELECT t1.countryname FROM countries AS t1 JOIN continents AS t2 ON t1.continent = t2.contid JOIN car_makers AS t3 ON t1.countryid = t3.country WHERE t2.continent = 'europe' GROUP BY t1.countryname HAVING count(*) >= 3;",
        "schema": "CREATE TABLE continents (ContId NUMBER, Continent TEXT); CREATE TABLE countries (CountryId NUMBER, CountryName TEXT, Continent NUMBER); CREATE TABLE car_makers (Id NUMBER, Maker TEXT, Country TEXT); CREATE TABLE model_list (Maker NUMBER); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT);"
      }
    ],
    [
      {
        "question": "What is the horsepower, make for each car!",
        "query": "SELECT t2.horsepower , t1.make FROM car_names AS t1 JOIN cars_data AS t2 ON t1.makeid = t2.id;",
        "schema": "CREATE TABLE car_makers (Id NUMBER); CREATE TABLE model_list (Maker NUMBER, Model TEXT); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT); CREATE TABLE cars_data (Id NUMBER, Cylinders NUMBER, Horsepower TEXT);"
      },
      {
        "question": "Show those with 8 cylinders!",
        "query": "SELECT t2.horsepower , t1.make FROM car_names AS t1 JOIN cars_data AS t2 ON t1.makeid = t2.id WHERE t2.cylinders = 8;",
        "schema": "CREATE TABLE car_makers (Id NUMBER); CREATE TABLE model_list (Maker NUMBER, Model TEXT); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT); CREATE TABLE cars_data (Id NUMBER, Cylinders NUMBER, Horsepower TEXT);"
      },
      {
        "question": "How about 3?",
        "query": "SELECT t2.horsepower , t1.make FROM car_names AS t1 JOIN cars_data AS t2 ON t1.makeid = t2.id WHERE t2.cylinders = 3;",
        "schema": "CREATE TABLE car_makers (Id NUMBER); CREATE TABLE model_list (Maker NUMBER, Model TEXT); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT); CREATE TABLE cars_data (Id NUMBER, Cylinders NUMBER, Horsepower TEXT);"
      },
      {
        "question": "Show the one with the maximum horsepower.",
        "query": "SELECT t2.horsepower , t1.make FROM car_names AS t1 JOIN cars_data AS t2 ON t1.makeid = t2.id WHERE t2.cylinders = 3 ORDER BY t2.horsepower DESC LIMIT 1;",
        "schema": "CREATE TABLE car_makers (Id NUMBER); CREATE TABLE model_list (Maker NUMBER, Model TEXT); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT); CREATE TABLE cars_data (Id NUMBER, Cylinders NUMBER, Horsepower TEXT);"
      }
    ],
    [
      {
        "question": "What is id of the car with the max horsepower?",
        "query": "SELECT id FROM cars_data ORDER BY horsepower DESC LIMIT 1;",
        "schema": "CREATE TABLE car_names (MakeId NUMBER, Model TEXT); CREATE TABLE cars_data (Id NUMBER, Horsepower TEXT);"
      },
      {
        "question": "How about with the max MPG?",
        "query": "SELECT id FROM cars_data ORDER BY mpg DESC LIMIT 1;",
        "schema": "CREATE TABLE car_names (MakeId NUMBER, Model TEXT); CREATE TABLE cars_data (Id NUMBER, MPG TEXT, Horsepower TEXT);"
      },
      {
        "question": "Show its make!",
        "query": "SELECT t1.make FROM car_names AS t1 JOIN cars_data AS t2 ON t1.makeid = t2.id ORDER BY t2.mpg DESC LIMIT 1;",
        "schema": "CREATE TABLE car_makers (Id NUMBER, Maker TEXT); CREATE TABLE model_list (Maker NUMBER, Model TEXT); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT); CREATE TABLE cars_data (Id NUMBER, MPG TEXT, Horsepower TEXT);"
      },
      {
        "question": "Now show its model!",
        "query": "SELECT t1.model FROM car_names AS t1 JOIN cars_data AS t2 ON t1.makeid = t2.id ORDER BY t2.mpg DESC LIMIT 1;",
        "schema": "CREATE TABLE car_makers (Id NUMBER, Maker TEXT); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT); CREATE TABLE cars_data (Id NUMBER, MPG TEXT, Horsepower TEXT);"
      }
    ],
    [
      {
        "question": "What is the average edispl of all cars?",
        "query": "SELECT avg(edispl) FROM cars_data;",
        "schema": "CREATE TABLE car_names (MakeId NUMBER, Model TEXT); CREATE TABLE cars_data (Edispl NUMBER);"
      },
      {
        "question": "Can you show the average per car make?",
        "query": "SELECT t1.make, avg(t2.edispl) FROM car_names AS t1 JOIN cars_data AS t2 ON t1.makeid = t2.id GROUP BY t1.make;",
        "schema": "CREATE TABLE car_makers (Id NUMBER, Maker TEXT); CREATE TABLE model_list (Maker NUMBER); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT); CREATE TABLE cars_data (Id NUMBER, MPG TEXT, Edispl NUMBER);"
      },
      {
        "question": "How about per car model?",
        "query": "SELECT t1.model, avg(t2.edispl) FROM car_names AS t1 JOIN cars_data AS t2 ON t1.makeid = t2.id GROUP BY t1.model;",
        "schema": "CREATE TABLE car_makers (Id NUMBER, Maker TEXT); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT); CREATE TABLE cars_data (Id NUMBER, MPG TEXT, Edispl NUMBER);"
      },
      {
        "question": "Show the average for the model volvo!",
        "query": "SELECT avg(t2.edispl) FROM car_names AS t1 JOIN cars_data AS t2 ON t1.makeid = t2.id WHERE t1.model = 'volvo';",
        "schema": "CREATE TABLE car_makers (Id NUMBER, Maker TEXT); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT); CREATE TABLE cars_data (Id NUMBER, MPG TEXT, Edispl NUMBER);"
      }
    ],
    [
      {
        "question": "What are all the different models for each car?",
        "query": "SELECT DISTINCT model FROM car_names;",
        "schema": "CREATE TABLE model_list (ModelId NUMBER, Model TEXT); CREATE TABLE car_names (Model TEXT);"
      },
      {
        "question": "What are the makes for each?",
        "query": "SELECT model, make FROM car_names;",
        "schema": "CREATE TABLE car_makers (Id NUMBER, Maker TEXT); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT);"
      },
      {
        "question": "How many makes are there for each?",
        "query": "SELECT model, count(*) FROM car_names GROUP BY model;",
        "schema": "CREATE TABLE car_makers (Id NUMBER, Maker TEXT); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT);"
      },
      {
        "question": "What is the model name with the most makes?",
        "query": "SELECT model FROM car_names GROUP BY model ORDER BY count(*) DESC LIMIT 1;",
        "schema": "CREATE TABLE car_makers (Id NUMBER, Maker TEXT); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT);"
      }
    ],
    [
      {
        "question": "Show the full names of all the different car makers?",
        "query": "SELECT fullname FROM car_makers;",
        "schema": "CREATE TABLE car_makers (Id NUMBER, Maker TEXT, FullName TEXT); CREATE TABLE model_list (Maker NUMBER, Model TEXT); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT);"
      },
      {
        "question": "Also include the car models produced by each!",
        "query": "SELECT t1.fullname, t2.model FROM car_makers AS t1 JOIN model_list AS t2 ON t1.id = t2.maker;",
        "schema": "CREATE TABLE car_makers (Id NUMBER, Maker TEXT, FullName TEXT); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT);"
      },
      {
        "question": "Show me just those produced by the maker with full name American Motor Company!",
        "query": "SELECT t1.fullname, t2.model FROM car_makers AS t1 JOIN model_list AS t2 ON t1.id = t2.maker WHERE t1.fullname = 'American Motor Company';",
        "schema": "CREATE TABLE car_makers (Id NUMBER, Maker TEXT, FullName TEXT, Country TEXT); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT count(*) FROM car_makers AS t1 JOIN model_list AS t2 ON t1.id = t2.maker WHERE t1.fullname = 'American Motor Company';",
        "schema": "CREATE TABLE car_makers (Id NUMBER, Maker TEXT, FullName TEXT, Country TEXT); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT);"
      }
    ],
    [
      {
        "question": "What is all the information for the makers that have designed at least 1 car model!",
        "query": "SELECT * FROM car_makers AS t1 JOIN model_list AS t2 ON t1.id = t2.maker;",
        "schema": "CREATE TABLE car_makers (Id NUMBER, Maker TEXT); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT); CREATE TABLE car_names (MakeId NUMBER, Model TEXT); CREATE TABLE cars_data (Id NUMBER);"
      },
      {
        "question": "Which ones have designed more than 1?",
        "query": "SELECT * FROM car_makers AS t1 JOIN model_list AS t2 ON t1.id = t2.maker GROUP BY t1.id HAVING count(*) > 1;",
        "schema": "CREATE TABLE car_makers (Id NUMBER, Maker TEXT); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT); CREATE TABLE car_names (MakeId NUMBER, Model TEXT); CREATE TABLE cars_data (Id NUMBER);"
      },
      {
        "question": "How about more than 3?",
        "query": "SELECT * FROM car_makers AS t1 JOIN model_list AS t2 ON t1.id = t2.maker GROUP BY t1.id HAVING count(*) > 3;",
        "schema": "CREATE TABLE car_makers (Id NUMBER, Maker TEXT); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT); CREATE TABLE car_names (MakeId NUMBER, Model TEXT); CREATE TABLE cars_data (Id NUMBER);"
      },
      {
        "question": "List just the full name and id!",
        "query": "SELECT t1.fullname , t1.id FROM car_makers AS t1 JOIN model_list AS t2 ON t1.id = t2.maker GROUP BY t1.id HAVING count(*) > 3;",
        "schema": "CREATE TABLE car_makers (Id NUMBER, Maker TEXT, FullName TEXT); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT); CREATE TABLE cars_data (Id NUMBER);"
      }
    ],
    [
      {
        "question": "How many different models has maker with full name General Motors produced?",
        "query": "SELECT count(DISTINCT t2.model) FROM car_names AS t1 JOIN model_list AS t2 ON t1.model = t2.model JOIN car_makers AS t3 ON t2.maker = t3.id WHERE t3.fullname = 'General Motors';",
        "schema": "CREATE TABLE car_makers (Id NUMBER, Maker TEXT, FullName TEXT); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT);"
      },
      {
        "question": "How many different models weigh over 3500 pounds?",
        "query": "SELECT count(DISTINCT t2.model) FROM car_names AS t1 JOIN model_list AS t2 ON t1.model = t2.model JOIN cars_data AS t3 ON t1.makeid = t3.id WHERE t3.weight > 3500;",
        "schema": "CREATE TABLE car_makers (Id NUMBER, Maker TEXT, FullName TEXT); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT); CREATE TABLE cars_data (Weight NUMBER);"
      },
      {
        "question": "How many models have either of these features?",
        "query": "SELECT count(DISTINCT t2.model) FROM car_names AS t1 JOIN model_list AS t2 ON t1.model = t2.model JOIN car_makers AS t3 ON t2.maker = t3.id JOIN cars_data AS t4 ON t1.makeid = t4.id WHERE t3.fullname = 'General Motors' OR t4.weight > 3500;",
        "schema": "CREATE TABLE car_makers (Id NUMBER, Maker TEXT, FullName TEXT); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT); CREATE TABLE cars_data (Id NUMBER, Weight NUMBER);"
      },
      {
        "question": "Show me the distinct list of their model names!",
        "query": "SELECT DISTINCT t2.model FROM car_names AS t1 JOIN model_list AS t2 ON t1.model = t2.model JOIN car_makers AS t3 ON t2.maker = t3.id JOIN cars_data AS t4 ON t1.makeid = t4.id WHERE t3.fullname = 'General Motors' OR t4.weight > 3500;",
        "schema": "CREATE TABLE car_makers (Id NUMBER, Maker TEXT, FullName TEXT); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT); CREATE TABLE cars_data (Id NUMBER, Weight NUMBER);"
      }
    ],
    [
      {
        "question": "Show the years and weight of all the cars!",
        "query": "SELECT YEAR, weight FROM cars_data;",
        "schema": "CREATE TABLE cars_data (Weight NUMBER, Year NUMBER);"
      },
      {
        "question": "Show distinct years that the cars that weigh more than 3000 were produced!",
        "query": "SELECT DISTINCT YEAR FROM cars_data AS t1 WHERE weight > 3000;",
        "schema": "CREATE TABLE cars_data (Id NUMBER, Weight NUMBER, Year NUMBER);"
      },
      {
        "question": "How about the different years for those that weight less than 4000.",
        "query": "SELECT DISTINCT YEAR FROM cars_data AS t1 WHERE weight < 4000;",
        "schema": "CREATE TABLE cars_data (Id NUMBER, Weight NUMBER, Year NUMBER);"
      },
      {
        "question": "What are the distinct years, for the cars that are both?",
        "query": "SELECT DISTINCT YEAR FROM cars_data WHERE weight > 3000 AND weight < 4000;",
        "schema": "CREATE TABLE cars_data (Id NUMBER, Weight NUMBER, Year NUMBER);"
      }
    ],
    [
      {
        "question": "What is the lowest accelerate for any car?",
        "query": "SELECT accelerate FROM cars_data ORDER BY accelerate ASC LIMIT 1;",
        "schema": "CREATE TABLE cars_data (Horsepower TEXT, Accelerate NUMBER);"
      },
      {
        "question": "How about the highest?",
        "query": "SELECT accelerate FROM cars_data ORDER BY accelerate DESC LIMIT 1;",
        "schema": "CREATE TABLE cars_data (Id NUMBER, MPG TEXT, Horsepower TEXT, Accelerate NUMBER);"
      },
      {
        "question": "What is the ID, Make and Model of this car?",
        "query": "SELECT t1.id, t2.make, t2.model FROM cars_data AS t1 JOIN car_names AS t2 ON t1.id = t2.makeid ORDER BY t1.accelerate DESC LIMIT 1;",
        "schema": "CREATE TABLE car_makers (Id NUMBER); CREATE TABLE model_list (ModelId NUMBER, Model TEXT); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT); CREATE TABLE cars_data (Id NUMBER, MPG TEXT, Edispl NUMBER, Horsepower TEXT, Accelerate NUMBER);"
      },
      {
        "question": "Show just its horsepower.",
        "query": "SELECT horsepower FROM cars_data ORDER BY accelerate DESC LIMIT 1;",
        "schema": "CREATE TABLE car_makers (Id NUMBER); CREATE TABLE model_list (ModelId NUMBER, Model TEXT); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT); CREATE TABLE cars_data (Id NUMBER, MPG TEXT, Edispl NUMBER, Horsepower TEXT, Accelerate NUMBER);"
      }
    ],
    [
      {
        "question": "Show all the car information for any car of the model volvo!",
        "query": "SELECT * FROM cars_data AS t1 JOIN car_names AS t2 ON t1.id = t2.makeid WHERE t2.model = 'volvo';",
        "schema": "CREATE TABLE car_makers (Id NUMBER); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT); CREATE TABLE cars_data (Id NUMBER, Edispl NUMBER);"
      },
      {
        "question": "What is the car with the least accelerate?",
        "query": "SELECT * FROM cars_data AS t1 JOIN car_names AS t2 ON t1.id = t2.makeid WHERE t2.model = 'volvo' ORDER BY t1.accelerate ASC LIMIT 1;",
        "schema": "CREATE TABLE car_makers (Id NUMBER); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT); CREATE TABLE cars_data (Id NUMBER, Edispl NUMBER, Accelerate NUMBER);"
      },
      {
        "question": "What is its horsepower?",
        "query": "SELECT t1.horsepower FROM cars_data AS t1 JOIN car_names AS t2 ON t1.id = t2.makeid WHERE t2.model = 'volvo' ORDER BY t1.accelerate ASC LIMIT 1;",
        "schema": "CREATE TABLE car_makers (Id NUMBER); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT); CREATE TABLE cars_data (Id NUMBER, Edispl NUMBER, Horsepower TEXT, Accelerate NUMBER);"
      },
      {
        "question": "What about its number of cylinders?",
        "query": "SELECT t1.cylinders FROM cars_data AS t1 JOIN car_names AS t2 ON t1.id = t2.makeid WHERE t2.model = 'volvo' ORDER BY t1.accelerate ASC LIMIT 1;",
        "schema": "CREATE TABLE car_makers (Id NUMBER); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT); CREATE TABLE cars_data (Id NUMBER, Cylinders NUMBER, Edispl NUMBER, Horsepower TEXT, Accelerate NUMBER);"
      }
    ],
    [
      {
        "question": "What is largest horsepower of all cars?",
        "query": "SELECT horsepower FROM cars_data ORDER BY horsepower DESC LIMIT 1",
        "schema": "CREATE TABLE cars_data (Cylinders NUMBER, Horsepower TEXT);"
      },
      {
        "question": "What is the accelerate of the car with this horsepower?",
        "query": "SELECT accelerate FROM cars_data ORDER BY horsepower DESC LIMIT 1",
        "schema": "CREATE TABLE cars_data (Cylinders NUMBER, Horsepower TEXT, Accelerate NUMBER);"
      },
      {
        "question": "What are the car ids of the cars with a greater accelerate than this?",
        "query": "SELECT id FROM cars_data WHERE accelerate > ( SELECT accelerate FROM cars_data ORDER BY horsepower DESC LIMIT 1 );",
        "schema": "CREATE TABLE cars_data (Id NUMBER, Cylinders NUMBER, Horsepower TEXT, Accelerate NUMBER);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT count(*) FROM cars_data WHERE accelerate > ( SELECT accelerate FROM cars_data ORDER BY horsepower DESC LIMIT 1 );",
        "schema": "CREATE TABLE cars_data (Id NUMBER, Cylinders NUMBER, Horsepower TEXT, Accelerate NUMBER);"
      }
    ],
    [
      {
        "question": "What are the names of the countries that have no car makers?",
        "query": "SELECT countryname FROM countries WHERE countryid NOT IN (SELECT t1.countryid FROM countries AS t1 JOIN car_makers AS t2 ON t1.countryid = t2.country);",
        "schema": "CREATE TABLE continents (ContId NUMBER, Continent TEXT); CREATE TABLE countries (CountryId NUMBER, CountryName TEXT, Continent NUMBER); CREATE TABLE car_makers (Id NUMBER, Maker TEXT, Country TEXT); CREATE TABLE car_names (MakeId NUMBER, Make TEXT);"
      },
      {
        "question": "Show me all the names of all the different countries outside of those!",
        "query": "SELECT DISTINCT t1.countryname FROM countries AS t1 JOIN car_makers AS t2 ON t1.countryid = t2.country;",
        "schema": "CREATE TABLE continents (ContId NUMBER, Continent TEXT); CREATE TABLE countries (CountryId NUMBER, CountryName TEXT, Continent NUMBER); CREATE TABLE car_makers (Id NUMBER, Maker TEXT, Country TEXT); CREATE TABLE car_names (MakeId NUMBER, Make TEXT);"
      },
      {
        "question": "How many of these have more than 1 car maker?",
        "query": "SELECT count(*) FROM ( SELECT t1.countryid , count(*) FROM countries AS t1 JOIN car_makers AS t2 ON t1.countryid = t2.country GROUP BY t1.countryid HAVING count(*) > 1 );",
        "schema": "CREATE TABLE continents (ContId NUMBER, Continent TEXT); CREATE TABLE countries (CountryId NUMBER, CountryName TEXT, Continent NUMBER); CREATE TABLE car_makers (Id NUMBER, Maker TEXT, Country TEXT); CREATE TABLE car_names (MakeId NUMBER, Make TEXT);"
      },
      {
        "question": "How about more than 2?",
        "query": "SELECT count(*) FROM ( SELECT t1.countryid , count(*) FROM countries AS t1 JOIN car_makers AS t2 ON t1.countryid = t2.country GROUP BY t1.countryid HAVING count(*) > 2 );",
        "schema": "CREATE TABLE continents (ContId NUMBER, Continent TEXT); CREATE TABLE countries (CountryId NUMBER, CountryName TEXT, Continent NUMBER); CREATE TABLE car_makers (Id NUMBER, Maker TEXT, Country TEXT); CREATE TABLE car_names (MakeId NUMBER, Make TEXT);"
      }
    ],
    [
      {
        "question": "Show all models and horsepowers of all cars!",
        "query": "SELECT t1.model, t2.horsepower FROM car_names AS t1 JOIN cars_data AS t2 ON t1.makeid = t2.id;",
        "schema": "CREATE TABLE model_list (ModelId NUMBER, Model TEXT); CREATE TABLE car_names (MakeId NUMBER, Model TEXT); CREATE TABLE cars_data (Id NUMBER, Horsepower TEXT);"
      },
      {
        "question": "Now show just the ones with 4 cylinders.",
        "query": "SELECT t1.model, t2.horsepower FROM car_names AS t1 JOIN cars_data AS t2 ON t1.makeid = t2.id WHERE t2.cylinders = 4;",
        "schema": "CREATE TABLE model_list (ModelId NUMBER, Model TEXT); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT); CREATE TABLE cars_data (Id NUMBER, Cylinders NUMBER, Horsepower TEXT);"
      },
      {
        "question": "What is the model of that with the lowest horsepower?",
        "query": "SELECT t1.model FROM car_names AS t1 JOIN cars_data AS t2 ON t1.makeid = t2.id WHERE t2.cylinders = 4 ORDER BY t2.horsepower ASC LIMIT 1;",
        "schema": "CREATE TABLE model_list (ModelId NUMBER, Model TEXT); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT); CREATE TABLE cars_data (Id NUMBER, Cylinders NUMBER, Horsepower TEXT);"
      },
      {
        "question": "How about the greatest horsepower?",
        "query": "SELECT t1.model FROM car_names AS t1 JOIN cars_data AS t2 ON t1.makeid = t2.id WHERE t2.cylinders = 4 ORDER BY t2.horsepower DESC LIMIT 1;",
        "schema": "CREATE TABLE model_list (ModelId NUMBER, Model TEXT); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT); CREATE TABLE cars_data (Id NUMBER, Cylinders NUMBER, Horsepower TEXT);"
      }
    ],
    [
      {
        "question": "What is the lowest horsepower of all cars?",
        "query": "SELECT min(horsepower) FROM cars_data;",
        "schema": "CREATE TABLE cars_data (Cylinders NUMBER, Horsepower TEXT);"
      },
      {
        "question": "Show all the ids and makes of those with a horsepower greater than this!",
        "query": "SELECT t2.makeid , t2.make FROM cars_data AS t1 JOIN car_names AS t2 ON t1.id = t2.makeid WHERE t1.horsepower > (SELECT min(horsepower) FROM cars_data);",
        "schema": "CREATE TABLE car_makers (Id NUMBER); CREATE TABLE model_list (Maker NUMBER); CREATE TABLE car_names (MakeId NUMBER, Make TEXT); CREATE TABLE cars_data (Id NUMBER, Cylinders NUMBER, Edispl NUMBER, Horsepower TEXT);"
      },
      {
        "question": "Which ones have 5 cylinders or less?",
        "query": "SELECT t2.makeid , t2.make FROM cars_data AS t1 JOIN car_names AS t2 ON t1.id = t2.makeid WHERE t1.horsepower > (SELECT min(horsepower) FROM cars_data) AND t1.cylinders <= 5;",
        "schema": "CREATE TABLE car_makers (Id NUMBER); CREATE TABLE model_list (Maker NUMBER); CREATE TABLE car_names (MakeId NUMBER, Make TEXT); CREATE TABLE cars_data (Id NUMBER, Cylinders NUMBER, Edispl NUMBER, Horsepower TEXT);"
      },
      {
        "question": "How about 3 or less?",
        "query": "SELECT t2.makeid , t2.make FROM cars_data AS t1 JOIN car_names AS t2 ON t1.id = t2.makeid WHERE t1.horsepower > (SELECT min(horsepower) FROM cars_data) AND t1.cylinders <= 3;",
        "schema": "CREATE TABLE car_makers (Id NUMBER); CREATE TABLE model_list (Maker NUMBER); CREATE TABLE car_names (MakeId NUMBER, Make TEXT); CREATE TABLE cars_data (Id NUMBER, Cylinders NUMBER, Edispl NUMBER, Horsepower TEXT);"
      }
    ],
    [
      {
        "question": "Show me the mpg, horsepower and accelerate for all the cars that were produced before 1980!",
        "query": "SELECT mpg, horsepower, accelerate FROM cars_data WHERE YEAR < 1980;",
        "schema": "CREATE TABLE model_list (Model TEXT); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT); CREATE TABLE cars_data (Id NUMBER, MPG TEXT, Cylinders NUMBER, Horsepower TEXT, Accelerate NUMBER, Year NUMBER);"
      },
      {
        "question": "Also include the cars that have 8 cylinders!",
        "query": "SELECT mpg, horsepower, accelerate FROM cars_data WHERE cylinders = 8 OR YEAR < 1980;",
        "schema": "CREATE TABLE model_list (Model TEXT); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT); CREATE TABLE cars_data (Id NUMBER, MPG TEXT, Cylinders NUMBER, Horsepower TEXT, Accelerate NUMBER, Year NUMBER);"
      },
      {
        "question": "What is the max horsepower for this group?",
        "query": "SELECT accelerate FROM cars_data WHERE cylinders = 8 OR YEAR < 1980 ORDER BY accelerate DESC LIMIT 1;",
        "schema": "CREATE TABLE model_list (Model TEXT); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT); CREATE TABLE cars_data (Id NUMBER, MPG TEXT, Cylinders NUMBER, Horsepower TEXT, Accelerate NUMBER, Year NUMBER);"
      },
      {
        "question": "how about the max mpg?",
        "query": "SELECT mpg FROM cars_data WHERE cylinders = 8 OR YEAR < 1980 ORDER BY mpg DESC LIMIT 1;",
        "schema": "CREATE TABLE model_list (Model TEXT); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT); CREATE TABLE cars_data (Id NUMBER, MPG TEXT, Cylinders NUMBER, Horsepower TEXT, Accelerate NUMBER, Year NUMBER);"
      }
    ],
    [
      {
        "question": "Show all the models that were built by the Ford Motor Company.",
        "query": "SELECT DISTINCT t1.model FROM model_list AS t1 JOIN car_makers AS t2 ON t1.maker = t2.id WHERE t2.fullname = 'Ford Motor Company';",
        "schema": "CREATE TABLE car_makers (Id NUMBER, Maker TEXT); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT);"
      },
      {
        "question": "What are all the models except those!",
        "query": "SELECT DISTINCT t1.model FROM model_list AS t1 JOIN car_makers AS t2 ON t1.maker = t2.id WHERE t2.fullname != 'Ford Motor Company';",
        "schema": "CREATE TABLE car_makers (Id NUMBER, Maker TEXT, FullName TEXT); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT);"
      },
      {
        "question": "Also provide the weights for all different makes for each of these models.",
        "query": "SELECT t1.model, t2.make, t3.weight FROM model_list AS t1 JOIN car_names AS t2 ON t1.model = t2.model JOIN cars_data AS t3 ON t2.makeid = t3.id JOIN car_makers AS t4 ON t1.maker = t4.id WHERE t3.weight < 3500 AND t4.fullname != 'Ford Motor Company'",
        "schema": "CREATE TABLE car_makers (Id NUMBER, Maker TEXT, FullName TEXT); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT); CREATE TABLE cars_data (Weight NUMBER);"
      },
      {
        "question": "List all the different models from these that have makes that are lighter than 3500!",
        "query": "SELECT DISTINCT t1.model FROM model_list AS t1 JOIN car_names AS t2 ON t1.model = t2.model JOIN cars_data AS t3 ON t2.makeid = t3.id JOIN car_makers AS t4 ON t1.maker = t4.id WHERE t3.weight < 3500 AND t4.fullname != 'Ford Motor Company';",
        "schema": "CREATE TABLE car_makers (Id NUMBER, Maker TEXT, FullName TEXT); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT); CREATE TABLE cars_data (Id NUMBER, Weight NUMBER);"
      }
    ],
    [
      {
        "question": "What are all the names of countries?",
        "query": "SELECT countryname FROM countries;",
        "schema": "CREATE TABLE continents (ContId NUMBER, Continent TEXT); CREATE TABLE countries (CountryId NUMBER, CountryName TEXT, Continent NUMBER); CREATE TABLE car_makers (Country TEXT);"
      },
      {
        "question": "Which ones have at least one car maker?",
        "query": "SELECT DISTINCT t1.countryname FROM countries AS t1 JOIN car_makers AS t2 ON t1.countryid = t2.country;",
        "schema": "CREATE TABLE continents (ContId NUMBER, Continent TEXT); CREATE TABLE countries (CountryId NUMBER, CountryName TEXT, Continent NUMBER); CREATE TABLE car_makers (Id NUMBER, Maker TEXT, Country TEXT); CREATE TABLE car_names (MakeId NUMBER, Make TEXT);"
      },
      {
        "question": "Show me all of car names other than these!",
        "query": "SELECT countryname FROM countries EXCEPT SELECT t1.countryname FROM countries AS t1 JOIN car_makers AS t2 ON t1.countryid = t2.country;",
        "schema": "CREATE TABLE continents (ContId NUMBER, Continent TEXT); CREATE TABLE countries (CountryId NUMBER, CountryName TEXT, Continent NUMBER); CREATE TABLE car_makers (Id NUMBER, Maker TEXT, Country TEXT); CREATE TABLE car_names (MakeId NUMBER, Make TEXT);"
      }
    ],
    [
      {
        "question": "Show all the car maker id, names, the models and makes they produce!",
        "query": "SELECT t1.id , t1.maker, t2.model FROM car_makers AS t1 JOIN model_list AS t2 ON t1.id = t2.maker;",
        "schema": "CREATE TABLE car_makers (Id NUMBER, Maker TEXT, FullName TEXT); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT);"
      },
      {
        "question": "How many model does each car maker produce? List the id and maker!",
        "query": "SELECT t1.id , t1.maker, count(*) FROM car_makers AS t1 JOIN model_list AS t2 ON t1.id = t2.maker GROUP BY t1.id;",
        "schema": "CREATE TABLE car_makers (Id NUMBER, Maker TEXT, FullName TEXT); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT);"
      },
      {
        "question": "Show me those that produce at least 2!",
        "query": "SELECT t1.id , t1.maker FROM car_makers AS t1 JOIN model_list AS t2 ON t1.id = t2.maker GROUP BY t1.id HAVING count(*) >= 2;",
        "schema": "CREATE TABLE car_makers (Id NUMBER, Maker TEXT, FullName TEXT); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT);"
      },
      {
        "question": "For each of these, only show those that have more than 3 car makes!",
        "query": "SELECT t1.id , t1.maker FROM car_makers AS t1 JOIN model_list AS t2 ON t1.id = t2.maker GROUP BY t1.id HAVING count(*) >= 2 INTERSECT SELECT t1.id , t1.maker FROM car_makers AS t1 JOIN model_list AS t2 ON t1.id = t2.maker JOIN car_names AS t3 ON t2.model = t3.model GROUP BY t1.id HAVING count(*) > 3;",
        "schema": "CREATE TABLE car_makers (Id NUMBER, Maker TEXT, FullName TEXT); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT);"
      }
    ]
  ],
  "wta_1": [
    [
      {
        "question": "How many matches are there?",
        "query": "SELECT count(*) FROM matches",
        "schema": "CREATE TABLE players (player_id NUMBER); CREATE TABLE matches (best_of NUMBER, match_num NUMBER, round TEXT, score TEXT, tourney_id TEXT);"
      },
      {
        "question": "What was the maximum length in minutes for the matches?",
        "query": "SELECT max(minutes) FROM matches",
        "schema": "CREATE TABLE players (player_id NUMBER); CREATE TABLE matches (best_of NUMBER, match_num NUMBER, minutes NUMBER, round TEXT, score TEXT, tourney_id TEXT);"
      },
      {
        "question": "Average?",
        "query": "SELECT avg(minutes) FROM matches",
        "schema": "CREATE TABLE players (player_id NUMBER); CREATE TABLE matches (best_of NUMBER, match_num NUMBER, minutes NUMBER, round TEXT, score TEXT, tourney_id TEXT);"
      },
      {
        "question": "How about for the age of losers and winners?",
        "query": "SELECT avg(loser_age) , avg(winner_age) FROM matches",
        "schema": "CREATE TABLE players (player_id NUMBER); CREATE TABLE matches (best_of NUMBER, loser_age NUMBER, loser_entry TEXT, loser_ht NUMBER, loser_name TEXT, match_num NUMBER, minutes NUMBER, round TEXT, score TEXT, tourney_id TEXT, winner_age NUMBER, winner_entry TEXT, winner_hand TEXT, winner_ht NUMBER, winner_id NUMBER, winner_name TEXT);"
      }
    ],
    [
      {
        "question": "How many distinct tourney names are there?",
        "query": "SELECT count(DISTINCT tourney_name) FROM matches",
        "schema": "CREATE TABLE players (player_id NUMBER, last_name TEXT);"
      },
      {
        "question": "Which ones have more than 20 matches?",
        "query": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*) > 20",
        "schema": "CREATE TABLE players (player_id NUMBER, last_name TEXT); CREATE TABLE matches (tourney_name TEXT);"
      },
      {
        "question": "More than 10?",
        "query": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*) > 10",
        "schema": "CREATE TABLE players (player_id NUMBER, last_name TEXT); CREATE TABLE matches (tourney_name TEXT);"
      }
    ],
    [
      {
        "question": "How many distinct winners played in 2013?",
        "query": "SELECT count(DISTINCT winner_name) FROM matches WHERE YEAR = 2013",
        "schema": "CREATE TABLE players (player_id NUMBER); CREATE TABLE matches (winner_ht NUMBER, winner_id NUMBER, year NUMBER);"
      },
      {
        "question": "Of those, how many also played in 2016.",
        "query": "SELECT count(*) FROM (SELECT winner_name FROM matches WHERE YEAR = 2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR = 2016)",
        "schema": "CREATE TABLE players (player_id NUMBER); CREATE TABLE matches (loser_ht NUMBER, loser_id NUMBER, loser_name TEXT, winner_ht NUMBER, winner_id NUMBER, winner_name TEXT, year NUMBER);"
      },
      {
        "question": "What are their names?",
        "query": "SELECT winner_name FROM matches WHERE YEAR = 2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR = 2016",
        "schema": "CREATE TABLE players (player_id NUMBER, first_name TEXT, last_name TEXT); CREATE TABLE matches (loser_ht NUMBER, loser_id NUMBER, loser_name TEXT, winner_ht NUMBER, winner_id NUMBER, winner_name TEXT, year NUMBER);"
      }
    ],
    [
      {
        "question": "How many matches were played?",
        "query": "SELECT count(*) FROM matches",
        "schema": "CREATE TABLE players (player_id NUMBER); CREATE TABLE matches (match_num NUMBER);"
      },
      {
        "question": "How many where the loser hand is L?",
        "query": "SELECT count(*) FROM matches WHERE loser_hand = \"L\"",
        "schema": "CREATE TABLE players (player_id NUMBER, hand TEXT); CREATE TABLE matches (loser_entry TEXT, loser_hand TEXT, loser_ht NUMBER, loser_id NUMBER, loser_name TEXT, loser_seed NUMBER, match_num NUMBER, winner_entry TEXT, winner_hand TEXT, winner_ht NUMBER, winner_id NUMBER, winner_name TEXT, winner_seed NUMBER);"
      },
      {
        "question": "How many played in year 2013 or 2016?",
        "query": "SELECT count(*) FROM matches WHERE YEAR = 2013 OR YEAR = 2016",
        "schema": "CREATE TABLE players (player_id NUMBER, hand TEXT); CREATE TABLE matches (loser_entry TEXT, loser_hand TEXT, loser_ht NUMBER, loser_id NUMBER, loser_name TEXT, loser_seed NUMBER, match_num NUMBER, winner_entry TEXT, winner_hand TEXT, winner_ht NUMBER, winner_id NUMBER, winner_name TEXT, winner_seed NUMBER, year NUMBER);"
      }
    ],
    [
      {
        "question": "How many players are there?",
        "query": "SELECT count(*) FROM players",
        "schema": "CREATE TABLE players (player_id NUMBER, last_name TEXT); CREATE TABLE rankings (player_id NUMBER);"
      },
      {
        "question": "Which ones won in the tourney WTA Championships? Give their last name and birth date.",
        "query": "SELECT t1.last_name, t1.birth_date FROM players AS t1 JOIN matches AS t2 ON t1.player_id = t2.winner_id WHERE t2.tourney_name = 'WTA Championships'",
        "schema": "CREATE TABLE players (player_id NUMBER, first_name TEXT, last_name TEXT, birth_date TIME); CREATE TABLE matches (loser_id NUMBER, loser_name TEXT, tourney_date TIME, tourney_name TEXT, winner_id NUMBER, winner_name TEXT); CREATE TABLE rankings (player_id NUMBER);"
      },
      {
        "question": "Give first name and country code instead.",
        "query": "SELECT t1.country_code , t1.first_name FROM players AS t1 JOIN matches AS t2 ON t1.player_id = t2.winner_id WHERE t2.tourney_name = 'WTA Championships'",
        "schema": "CREATE TABLE players (player_id NUMBER, first_name TEXT, last_name TEXT, birth_date TIME, country_code TEXT); CREATE TABLE matches (loser_id NUMBER, loser_name TEXT, tourney_date TIME, tourney_id TEXT, tourney_name TEXT, winner_id NUMBER, winner_name TEXT); CREATE TABLE rankings (player_id NUMBER);"
      },
      {
        "question": "Which ones also won in the Australian Open?",
        "query": "SELECT t1.country_code , t1.first_name FROM players AS t1 JOIN matches AS t2 ON t1.player_id = t2.winner_id WHERE t2.tourney_name = 'WTA Championships' INTERSECT SELECT t1.country_code , t1.first_name FROM players AS t1 JOIN matches AS t2 ON t1.player_id = t2.winner_id WHERE t2.tourney_name = 'Australian Open'",
        "schema": "CREATE TABLE players (player_id NUMBER, first_name TEXT, last_name TEXT, birth_date TIME, country_code TEXT); CREATE TABLE matches (loser_id NUMBER, loser_name TEXT, tourney_date TIME, tourney_id TEXT, tourney_name TEXT, winner_entry TEXT, winner_id NUMBER, winner_name TEXT); CREATE TABLE rankings (player_id NUMBER);"
      }
    ],
    [
      {
        "question": "What is the birth date of the oldest player?",
        "query": "SELECT birth_date FROM players ORDER BY birth_date DESC LIMIT 1",
        "schema": "CREATE TABLE players (player_id NUMBER, last_name TEXT, birth_date TIME);"
      },
      {
        "question": "Give the player id and last name instead.",
        "query": "SELECT player_id , last_name FROM players ORDER BY birth_date LIMIT 1",
        "schema": "CREATE TABLE players (player_id NUMBER, first_name TEXT, last_name TEXT, birth_date TIME);"
      },
      {
        "question": "Give the first name and country code instead.",
        "query": "SELECT first_name , country_code FROM players ORDER BY birth_date LIMIT 1",
        "schema": "CREATE TABLE players (player_id NUMBER, first_name TEXT, last_name TEXT, birth_date TIME, country_code TEXT);"
      }
    ],
    [
      {
        "question": "How many players have right / R hand?",
        "query": "SELECT count(*) FROM players WHERE hand = 'R'",
        "schema": "CREATE TABLE players (player_id NUMBER, last_name TEXT, hand TEXT);"
      },
      {
        "question": "Left / L hand?",
        "query": "SELECT count(*) FROM players WHERE hand = 'L'",
        "schema": "CREATE TABLE players (player_id NUMBER, last_name TEXT, hand TEXT);"
      },
      {
        "question": "Give their country code and birth date.",
        "query": "SELECT country_code , birth_date FROM players WHERE hand = 'L'",
        "schema": "CREATE TABLE players (player_id NUMBER, last_name TEXT, hand TEXT, birth_date TIME, country_code TEXT);"
      },
      {
        "question": "Order by their birth date, and give the first and last name instead.",
        "query": "SELECT first_name , last_name FROM players WHERE hand = 'L' ORDER BY birth_date",
        "schema": "CREATE TABLE players (player_id NUMBER, first_name TEXT, last_name TEXT, hand TEXT, birth_date TIME, country_code TEXT);"
      }
    ],
    [
      {
        "question": "How many players are there?",
        "query": "SELECT count(*) FROM players",
        "schema": "CREATE TABLE players (player_id NUMBER, first_name TEXT, last_name TEXT); CREATE TABLE rankings (player_id NUMBER);"
      },
      {
        "question": "How many tours did the player who did the least number of tours do?",
        "query": "SELECT t2.tours FROM players AS t1 JOIN rankings AS t2 ON t1.player_id = t2.player_id ORDER BY t2.tours ASC LIMIT 1",
        "schema": "CREATE TABLE players (player_id NUMBER, first_name TEXT, last_name TEXT); CREATE TABLE rankings (player_id NUMBER, tours NUMBER);"
      },
      {
        "question": "Most number of tours?",
        "query": "SELECT t2.tours FROM players AS t1 JOIN rankings AS t2 ON t1.player_id = t2.player_id ORDER BY t2.tours DESC LIMIT 1",
        "schema": "CREATE TABLE players (player_id NUMBER, first_name TEXT, last_name TEXT); CREATE TABLE rankings (player_id NUMBER, tours NUMBER);"
      },
      {
        "question": "Give the first name and country code instead.",
        "query": "SELECT t1.country_code , t1.first_name FROM players AS t1 JOIN rankings AS t2 ON t1.player_id = t2.player_id ORDER BY t2.tours DESC LIMIT 1",
        "schema": "CREATE TABLE players (player_id NUMBER, first_name TEXT, last_name TEXT, country_code TEXT); CREATE TABLE rankings (player_id NUMBER, tours NUMBER);"
      }
    ],
    [
      {
        "question": "How many matches are there?",
        "query": "SELECT count(*) FROM matches",
        "schema": "CREATE TABLE players (player_id NUMBER); CREATE TABLE matches (best_of NUMBER, loser_hand TEXT, loser_seed NUMBER, match_num NUMBER, round TEXT, tourney_id TEXT, tourney_name TEXT, winner_ht NUMBER);"
      },
      {
        "question": "Find the surface that has the most number.",
        "query": "SELECT surface FROM matches GROUP BY surface ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE players (player_id NUMBER); CREATE TABLE matches (best_of NUMBER, loser_hand TEXT, loser_seed NUMBER, match_num NUMBER, round TEXT, surface TEXT, tourney_id TEXT, tourney_name TEXT, winner_ht NUMBER);"
      },
      {
        "question": "What about the year?",
        "query": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE players (player_id NUMBER); CREATE TABLE matches (best_of NUMBER, loser_hand TEXT, loser_seed NUMBER, match_num NUMBER, round TEXT, surface TEXT, tourney_id TEXT, tourney_name TEXT, winner_ht NUMBER, year NUMBER);"
      }
    ],
    [
      {
        "question": "Find the name of the loser who lost the most times.",
        "query": "SELECT loser_name FROM matches GROUP BY loser_name ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE players (player_id NUMBER, first_name TEXT, last_name TEXT); CREATE TABLE matches (loser_entry TEXT, loser_hand TEXT, loser_ht NUMBER, loser_id NUMBER, loser_name TEXT, winner_entry TEXT, winner_hand TEXT, winner_ht NUMBER, winner_id NUMBER, winner_name TEXT);"
      },
      {
        "question": "Give the rank points as well.",
        "query": "SELECT loser_name, loser_rank_points FROM matches GROUP BY loser_name ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE players (player_id NUMBER, first_name TEXT, last_name TEXT); CREATE TABLE matches (loser_entry TEXT, loser_hand TEXT, loser_ht NUMBER, loser_id NUMBER, loser_name TEXT, loser_rank NUMBER, loser_rank_points NUMBER, winner_entry TEXT, winner_hand TEXT, winner_ht NUMBER, winner_id NUMBER, winner_name TEXT, winner_rank NUMBER, winner_rank_points NUMBER); CREATE TABLE rankings (ranking NUMBER, ranking_points NUMBER);"
      },
      {
        "question": "Give the same, but for the winner who won the most times.",
        "query": "SELECT winner_name , winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE players (player_id NUMBER, first_name TEXT, last_name TEXT); CREATE TABLE matches (loser_entry TEXT, loser_hand TEXT, loser_ht NUMBER, loser_id NUMBER, loser_name TEXT, loser_rank NUMBER, loser_rank_points NUMBER, winner_entry TEXT, winner_hand TEXT, winner_ht NUMBER, winner_id NUMBER, winner_name TEXT, winner_rank NUMBER, winner_rank_points NUMBER); CREATE TABLE rankings (ranking NUMBER, ranking_points NUMBER);"
      }
    ],
    [
      {
        "question": "Give the name of the loser who has the highest rank points.",
        "query": "SELECT loser_name FROM matches ORDER BY loser_rank_points DESC LIMIT 1",
        "schema": "CREATE TABLE players (player_id NUMBER, first_name TEXT, last_name TEXT); CREATE TABLE matches (loser_ht NUMBER, loser_id NUMBER, loser_name TEXT, loser_rank NUMBER, loser_rank_points NUMBER, winner_hand TEXT, winner_ht NUMBER, winner_id NUMBER, winner_name TEXT, winner_rank NUMBER, winner_rank_points NUMBER); CREATE TABLE rankings (ranking NUMBER, player_id NUMBER, ranking_points NUMBER);"
      },
      {
        "question": "Do the same but for the Australian Open tourney.",
        "query": "SELECT loser_name FROM matches WHERE tourney_name = 'Australian Open' ORDER BY loser_rank_points DESC LIMIT 1",
        "schema": "CREATE TABLE players (player_id NUMBER, first_name TEXT, last_name TEXT); CREATE TABLE matches (loser_entry TEXT, loser_hand TEXT, loser_ht NUMBER, loser_id NUMBER, loser_ioc TEXT, loser_name TEXT, loser_rank NUMBER, loser_rank_points NUMBER, loser_seed NUMBER, match_num NUMBER, tourney_id TEXT, tourney_name TEXT, winner_entry TEXT, winner_hand TEXT, winner_ht NUMBER, winner_id NUMBER, winner_name TEXT, winner_rank NUMBER, winner_rank_points NUMBER, winner_seed NUMBER); CREATE TABLE rankings (ranking NUMBER, player_id NUMBER, ranking_points NUMBER, tours NUMBER);"
      },
      {
        "question": "Give the winner name instead.",
        "query": "SELECT winner_name FROM matches WHERE tourney_name = 'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
        "schema": "CREATE TABLE players (player_id NUMBER, first_name TEXT, last_name TEXT); CREATE TABLE matches (best_of NUMBER, loser_entry TEXT, loser_hand TEXT, loser_ht NUMBER, loser_id NUMBER, loser_ioc TEXT, loser_name TEXT, loser_rank NUMBER, loser_rank_points NUMBER, loser_seed NUMBER, match_num NUMBER, tourney_id TEXT, tourney_name TEXT, winner_entry TEXT, winner_hand TEXT, winner_ht NUMBER, winner_id NUMBER, winner_name TEXT, winner_rank NUMBER, winner_rank_points NUMBER, winner_seed NUMBER); CREATE TABLE rankings (ranking NUMBER, player_id NUMBER, ranking_points NUMBER, tours NUMBER);"
      }
    ],
    [
      {
        "question": "Give the length of the match in minutes of the shortest match.",
        "query": "SELECT minutes FROM matches ORDER BY minutes ASC LIMIT 1",
        "schema": "CREATE TABLE matches (minutes NUMBER);"
      },
      {
        "question": "Longest match?",
        "query": "SELECT minutes FROM matches ORDER BY minutes DESC LIMIT 1",
        "schema": "CREATE TABLE matches (minutes NUMBER);"
      },
      {
        "question": "Give the winner and loser name instead.",
        "query": "SELECT winner_name , loser_name FROM matches ORDER BY minutes DESC LIMIT 1",
        "schema": "CREATE TABLE matches (best_of NUMBER, loser_entry TEXT, loser_hand TEXT, loser_ht NUMBER, loser_id NUMBER, loser_ioc TEXT, loser_name TEXT, loser_rank NUMBER, loser_seed NUMBER, match_num NUMBER, minutes NUMBER, winner_entry TEXT, winner_hand TEXT, winner_ht NUMBER, winner_id NUMBER, winner_ioc TEXT, winner_name TEXT, winner_seed NUMBER);"
      }
    ],
    [
      {
        "question": "Find the birth dates of each of the players.",
        "query": "SELECT birth_date FROM players",
        "schema": "CREATE TABLE players (player_id NUMBER, birth_date TIME);"
      },
      {
        "question": "Find tours and first name instead.",
        "query": "SELECT t2.tours, t1.first_name FROM players AS t1 JOIN rankings AS t2 ON t1.player_id = t2.player_id GROUP BY t1.first_name",
        "schema": "CREATE TABLE players (player_id NUMBER, first_name TEXT, last_name TEXT, birth_date TIME);"
      },
      {
        "question": "Give the average ranking instead of the tours.",
        "query": "SELECT avg(ranking) , t1.first_name FROM players AS t1 JOIN rankings AS t2 ON t1.player_id = t2.player_id GROUP BY t1.first_name",
        "schema": "CREATE TABLE players (player_id NUMBER, first_name TEXT, last_name TEXT, birth_date TIME); CREATE TABLE rankings (ranking NUMBER, player_id NUMBER, tours NUMBER);"
      }
    ],
    [
      {
        "question": "Give the number of tours for each player.",
        "query": "SELECT tours FROM players AS t1 JOIN rankings AS t2 ON t1.player_id = t2.player_id GROUP BY t1.first_name",
        "schema": "CREATE TABLE players (player_id NUMBER, first_name TEXT, last_name TEXT); CREATE TABLE rankings (player_id NUMBER, tours NUMBER);"
      },
      {
        "question": "Give the average rank points and first name.",
        "query": "SELECT avg(ranking) , t1.first_name FROM players AS t1 JOIN rankings AS t2 ON t1.player_id = t2.player_id GROUP BY t1.first_name",
        "schema": "CREATE TABLE players (player_id NUMBER, first_name TEXT, last_name TEXT); CREATE TABLE rankings (ranking NUMBER, player_id NUMBER, ranking_points NUMBER, tours NUMBER);"
      },
      {
        "question": "Find the total ranking points instead.",
        "query": "SELECT sum(ranking_points) , t1.first_name FROM players AS t1 JOIN rankings AS t2 ON t1.player_id = t2.player_id GROUP BY t1.first_name",
        "schema": "CREATE TABLE players (player_id NUMBER, first_name TEXT, last_name TEXT); CREATE TABLE rankings (ranking NUMBER, player_id NUMBER, ranking_points NUMBER, tours NUMBER);"
      }
    ],
    [
      {
        "question": "Find the number of players for each country.",
        "query": "SELECT count(*) FROM players GROUP BY country_code",
        "schema": "CREATE TABLE players (player_id NUMBER, country_code TEXT);"
      },
      {
        "question": "Which country has the least number of players? Give the country code.",
        "query": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) ASC LIMIT 1",
        "schema": "CREATE TABLE players (player_id NUMBER, country_code TEXT);"
      },
      {
        "question": "Greatest number?",
        "query": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE players (player_id NUMBER, country_code TEXT);"
      }
    ],
    [
      {
        "question": "What is the number of players for each hand type? Give the hand type as well.",
        "query": "SELECT count(*), hand FROM players GROUP BY hand",
        "schema": "CREATE TABLE players (player_id NUMBER, hand TEXT);"
      },
      {
        "question": "For each country?",
        "query": "SELECT count(*), country_code FROM players GROUP BY country_code",
        "schema": "CREATE TABLE players (player_id NUMBER, hand TEXT, country_code TEXT);"
      },
      {
        "question": "Give the ones that have more than 50 players.",
        "query": "SELECT count(*), country_code FROM players GROUP BY country_code HAVING count(*) > 50",
        "schema": "CREATE TABLE players (player_id NUMBER, hand TEXT, country_code TEXT);"
      },
      {
        "question": "Give the country code only.",
        "query": "SELECT country_code FROM players GROUP BY country_code HAVING count(*) > 50",
        "schema": "CREATE TABLE players (player_id NUMBER, hand TEXT, country_code TEXT);"
      }
    ],
    [
      {
        "question": "Give the name of the 3 oldest losers across all matches.",
        "query": "SELECT DISTINCT loser_name FROM matches ORDER BY loser_age DESC LIMIT 3",
        "schema": "CREATE TABLE players (player_id NUMBER, first_name TEXT, last_name TEXT, birth_date TIME); CREATE TABLE matches (draw_size NUMBER, loser_age NUMBER, loser_entry TEXT, loser_ht NUMBER, loser_id NUMBER, loser_name TEXT, match_num NUMBER, winner_age NUMBER, winner_entry TEXT, winner_id NUMBER, winner_name TEXT, year NUMBER);"
      },
      {
        "question": "How about the 3 oldest winners.",
        "query": "SELECT DISTINCT winner_name FROM matches ORDER BY winner_age DESC LIMIT 3",
        "schema": "CREATE TABLE players (player_id NUMBER, first_name TEXT, last_name TEXT, birth_date TIME); CREATE TABLE matches (draw_size NUMBER, loser_age NUMBER, loser_entry TEXT, loser_ht NUMBER, loser_id NUMBER, loser_name TEXT, match_num NUMBER, winner_age NUMBER, winner_entry TEXT, winner_ht NUMBER, winner_id NUMBER, winner_name TEXT, year NUMBER);"
      },
      {
        "question": "Youngest? Give the rank as well.",
        "query": "SELECT DISTINCT winner_name , winner_rank FROM matches ORDER BY winner_age LIMIT 3",
        "schema": "CREATE TABLE players (player_id NUMBER, first_name TEXT, last_name TEXT, birth_date TIME); CREATE TABLE matches (draw_size NUMBER, loser_age NUMBER, loser_entry TEXT, loser_ht NUMBER, loser_id NUMBER, loser_ioc TEXT, loser_name TEXT, loser_rank NUMBER, loser_rank_points NUMBER, match_num NUMBER, winner_age NUMBER, winner_entry TEXT, winner_ht NUMBER, winner_id NUMBER, winner_name TEXT, winner_rank NUMBER, winner_rank_points NUMBER, year NUMBER); CREATE TABLE rankings (ranking NUMBER);"
      }
    ],
    [
      {
        "question": "How  many different losers participated in the Australian Open?",
        "query": "SELECT count(DISTINCT loser_name) FROM matches WHERE tourney_name = 'Australian Open'",
        "schema": "CREATE TABLE players (player_id NUMBER); CREATE TABLE matches (loser_entry TEXT, loser_hand TEXT, loser_ht NUMBER, loser_id NUMBER, loser_ioc TEXT, loser_name TEXT, loser_seed NUMBER, match_num NUMBER, tourney_id TEXT, tourney_name TEXT, winner_entry TEXT, winner_hand TEXT, winner_ht NUMBER, winner_id NUMBER, winner_name TEXT, winner_seed NUMBER);"
      },
      {
        "question": "Winners?",
        "query": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name = 'Australian Open'",
        "schema": "CREATE TABLE players (player_id NUMBER); CREATE TABLE matches (loser_entry TEXT, loser_hand TEXT, loser_ht NUMBER, loser_id NUMBER, loser_ioc TEXT, loser_name TEXT, loser_seed NUMBER, match_num NUMBER, tourney_id TEXT, tourney_name TEXT, winner_entry TEXT, winner_hand TEXT, winner_ht NUMBER, winner_id NUMBER, winner_ioc TEXT, winner_name TEXT, winner_seed NUMBER);"
      },
      {
        "question": "How about in the WTA Championships, and were also left handed?",
        "query": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name = 'WTA Championships' AND winner_hand = 'L'",
        "schema": "CREATE TABLE players (player_id NUMBER, hand TEXT); CREATE TABLE matches (loser_entry TEXT, loser_hand TEXT, loser_ht NUMBER, loser_id NUMBER, loser_ioc TEXT, loser_name TEXT, loser_seed NUMBER, match_num NUMBER, tourney_id TEXT, tourney_name TEXT, winner_entry TEXT, winner_hand TEXT, winner_ht NUMBER, winner_id NUMBER, winner_ioc TEXT, winner_name TEXT, winner_seed NUMBER);"
      }
    ]
  ],
  "orchestra": [
    [
      {
        "question": "List all conductor information.",
        "query": "SELECT * FROM conductor",
        "schema": "CREATE TABLE conductor (Conductor_ID NUMBER); CREATE TABLE orchestra (Orchestra_ID NUMBER, Orchestra TEXT, Conductor_ID NUMBER);"
      },
      {
        "question": "How many conductors are there?",
        "query": "SELECT count(*) FROM conductor",
        "schema": "CREATE TABLE conductor (Conductor_ID NUMBER, Name TEXT); CREATE TABLE orchestra (Orchestra_ID NUMBER, Orchestra TEXT, Conductor_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What are the names of the conductors?",
        "query": "SELECT name FROM conductor",
        "schema": "CREATE TABLE conductor (Conductor_ID NUMBER, Name TEXT); CREATE TABLE orchestra (Conductor_ID NUMBER);"
      },
      {
        "question": "What are the ages of the conductors?",
        "query": "SELECT age FROM conductor",
        "schema": "CREATE TABLE conductor (Conductor_ID NUMBER, Name TEXT, Age NUMBER); CREATE TABLE orchestra (Conductor_ID NUMBER);"
      },
      {
        "question": "List the names of conductors in ascending order of age.",
        "query": "SELECT name FROM conductor ORDER BY age ASC",
        "schema": "CREATE TABLE conductor (Conductor_ID NUMBER, Name TEXT, Age NUMBER); CREATE TABLE orchestra (Conductor_ID NUMBER);"
      }
    ],
    [
      {
        "question": "List the names of conductors",
        "query": "SELECT name FROM conductor",
        "schema": "CREATE TABLE conductor (Conductor_ID NUMBER, Name TEXT); CREATE TABLE orchestra (Conductor_ID NUMBER);"
      },
      {
        "question": "Among these conductors, which of them are not from the USA?",
        "query": "SELECT name FROM conductor WHERE nationality != 'USA'",
        "schema": "CREATE TABLE conductor (Conductor_ID NUMBER, Name TEXT, Nationality TEXT); CREATE TABLE orchestra (Conductor_ID NUMBER);"
      }
    ],
    [
      {
        "question": "List the information of record companies.",
        "query": "SELECT record_company FROM orchestra",
        "schema": "CREATE TABLE orchestra (Record_Company TEXT);"
      },
      {
        "question": "When were they founded?",
        "query": "SELECT record_company, year_of_founded FROM orchestra",
        "schema": "CREATE TABLE orchestra (Orchestra_ID NUMBER, Orchestra TEXT, Record_Company TEXT, Year_of_Founded NUMBER); CREATE TABLE performance (Orchestra_ID NUMBER, Date TEXT);"
      },
      {
        "question": "Please list the record companies of orchestras in descending order of years in which they were founded.",
        "query": "SELECT record_company FROM orchestra ORDER BY year_of_founded DESC",
        "schema": "CREATE TABLE orchestra (Orchestra_ID NUMBER, Orchestra TEXT, Record_Company TEXT, Year_of_Founded NUMBER); CREATE TABLE performance (Orchestra_ID NUMBER, Date TEXT);"
      }
    ],
    [
      {
        "question": "What is the attendance of each show?",
        "query": "SELECT attendance FROM SHOW",
        "schema": "CREATE TABLE show (Show_ID NUMBER, Performance_ID NUMBER, Attendance NUMBER);"
      },
      {
        "question": "What is the average attendance?",
        "query": "SELECT avg(attendance) FROM SHOW",
        "schema": "CREATE TABLE show (Show_ID NUMBER, Performance_ID NUMBER, Attendance NUMBER);"
      }
    ],
    [
      {
        "question": "What are the shares of performances?",
        "query": "SELECT SHARE FROM performance",
        "schema": "CREATE TABLE performance (Performance_ID NUMBER, Share TEXT); CREATE TABLE show (Performance_ID NUMBER);"
      },
      {
        "question": "What are the shares of performances whose type is not \"Live final\"?",
        "query": "SELECT SHARE FROM performance WHERE TYPE != \"Live final\"",
        "schema": "CREATE TABLE performance (Performance_ID NUMBER, Type TEXT, Share TEXT); CREATE TABLE show (Performance_ID NUMBER);"
      },
      {
        "question": "What are the maximum and the minimum of these values?",
        "query": "SELECT max(SHARE) , min(SHARE) FROM performance WHERE TYPE != \"Live final\"",
        "schema": "CREATE TABLE performance (Performance_ID NUMBER, Type TEXT, Share TEXT); CREATE TABLE show (Performance_ID NUMBER);"
      }
    ],
    [
      {
        "question": "List the nationalities of conductors.",
        "query": "SELECT nationality FROM conductor",
        "schema": "CREATE TABLE conductor (Conductor_ID NUMBER, Nationality TEXT); CREATE TABLE orchestra (Conductor_ID NUMBER);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT count(DISTINCT nationality) FROM conductor",
        "schema": "CREATE TABLE conductor (Conductor_ID NUMBER, Nationality TEXT); CREATE TABLE orchestra (Conductor_ID NUMBER);"
      }
    ],
    [
      {
        "question": "List the names of conductors.",
        "query": "SELECT name FROM conductor",
        "schema": "CREATE TABLE conductor (Conductor_ID NUMBER, Name TEXT); CREATE TABLE orchestra (Conductor_ID NUMBER);"
      },
      {
        "question": "List years of work of conductors.",
        "query": "SELECT year_of_work FROM conductor",
        "schema": "CREATE TABLE conductor (Conductor_ID NUMBER, Name TEXT, Year_of_Work NUMBER); CREATE TABLE orchestra (Conductor_ID NUMBER);"
      },
      {
        "question": "List names of conductors in descending order of years of work.",
        "query": "SELECT name FROM conductor ORDER BY year_of_work DESC",
        "schema": "CREATE TABLE conductor (Conductor_ID NUMBER, Name TEXT, Year_of_Work NUMBER); CREATE TABLE orchestra (Conductor_ID NUMBER);"
      }
    ],
    [
      {
        "question": "List the names of the conductors.",
        "query": "SELECT name FROM conductor",
        "schema": "CREATE TABLE conductor (Conductor_ID NUMBER, Name TEXT); CREATE TABLE orchestra (Orchestra TEXT, Conductor_ID NUMBER);"
      },
      {
        "question": "List years of work of conductors.",
        "query": "SELECT year_of_work FROM conductor",
        "schema": "CREATE TABLE conductor (Conductor_ID NUMBER, Name TEXT, Year_of_Work NUMBER); CREATE TABLE orchestra (Orchestra TEXT, Conductor_ID NUMBER);"
      },
      {
        "question": "List the name of the conductor with the most years of work.",
        "query": "SELECT name FROM conductor ORDER BY year_of_work DESC LIMIT 1",
        "schema": "CREATE TABLE conductor (Conductor_ID NUMBER, Name TEXT, Year_of_Work NUMBER); CREATE TABLE orchestra (Orchestra TEXT, Conductor_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show the names of conductors.",
        "query": "SELECT name FROM conductor",
        "schema": "CREATE TABLE conductor (Conductor_ID NUMBER, Name TEXT); CREATE TABLE orchestra (Conductor_ID NUMBER);"
      },
      {
        "question": "Please list these names with the orchestras they have conducted.",
        "query": "SELECT t1.name , t2.orchestra FROM conductor AS t1 JOIN orchestra AS t2 ON t1.conductor_id = t2.conductor_id",
        "schema": "CREATE TABLE conductor (Conductor_ID NUMBER, Name TEXT); CREATE TABLE orchestra (Orchestra_ID NUMBER, Orchestra TEXT, Conductor_ID NUMBER); CREATE TABLE performance (Orchestra_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Please show the names of the conductors.",
        "query": "SELECT name FROM conductor",
        "schema": "CREATE TABLE conductor (Conductor_ID NUMBER, Name TEXT); CREATE TABLE orchestra (Conductor_ID NUMBER);"
      },
      {
        "question": "Which of them have conducted more than one orchestras?",
        "query": "SELECT t1.name FROM conductor AS t1 JOIN orchestra AS t2 ON t1.conductor_id = t2.conductor_id GROUP BY t2.conductor_id HAVING count(*) > 1",
        "schema": "CREATE TABLE conductor (Conductor_ID NUMBER, Name TEXT); CREATE TABLE orchestra (Orchestra_ID NUMBER, Orchestra TEXT, Conductor_ID NUMBER); CREATE TABLE performance (Performance_ID NUMBER, Orchestra_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Please show the names of the conductors.",
        "query": "SELECT name FROM conductor",
        "schema": "CREATE TABLE conductor (Conductor_ID NUMBER, Name TEXT); CREATE TABLE orchestra (Conductor_ID NUMBER);"
      },
      {
        "question": "Who has conducted the most orchestras?",
        "query": "SELECT t1.name FROM conductor AS t1 JOIN orchestra AS t2 ON t1.conductor_id = t2.conductor_id GROUP BY t2.conductor_id ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE conductor (Conductor_ID NUMBER, Name TEXT); CREATE TABLE orchestra (Orchestra_ID NUMBER, Orchestra TEXT, Conductor_ID NUMBER); CREATE TABLE performance (Orchestra_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Please show the names of the conductors.",
        "query": "SELECT name FROM conductor",
        "schema": "CREATE TABLE conductor (Conductor_ID NUMBER, Name TEXT); CREATE TABLE orchestra (Conductor_ID NUMBER);"
      },
      {
        "question": "Who has conducted orchestras founded after 2008?",
        "query": "SELECT t1.name FROM conductor AS t1 JOIN orchestra AS t2 ON t1.conductor_id = t2.conductor_id WHERE year_of_founded > 2008",
        "schema": "CREATE TABLE conductor (Conductor_ID NUMBER, Name TEXT); CREATE TABLE orchestra (Orchestra_ID NUMBER, Orchestra TEXT, Conductor_ID NUMBER, Year_of_Founded NUMBER); CREATE TABLE performance (Performance_ID NUMBER, Orchestra_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Please show the record companies without duplicates.",
        "query": "SELECT record_company FROM orchestra GROUP BY record_company",
        "schema": "CREATE TABLE orchestra (Record_Company TEXT);"
      },
      {
        "question": "Please also show their corresponding number of orchestras.",
        "query": "SELECT record_company , count(*) FROM orchestra GROUP BY record_company",
        "schema": "CREATE TABLE orchestra (Orchestra_ID NUMBER, Orchestra TEXT, Record_Company TEXT); CREATE TABLE performance (Orchestra_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Please show the record formats of orchestras.",
        "query": "SELECT major_record_format FROM orchestra",
        "schema": "CREATE TABLE orchestra (Orchestra TEXT, Major_Record_Format TEXT);"
      },
      {
        "question": "Please list them in ascending order of count.",
        "query": "SELECT major_record_format FROM orchestra GROUP BY major_record_format ORDER BY count(*) ASC",
        "schema": "CREATE TABLE orchestra (Orchestra TEXT, Major_Record_Format TEXT);"
      }
    ],
    [
      {
        "question": "List the information of all record companies.",
        "query": "SELECT record_company FROM orchestra",
        "schema": "CREATE TABLE orchestra (Record_Company TEXT);"
      },
      {
        "question": "Which one is shared by the most orchestras?",
        "query": "SELECT record_company FROM orchestra GROUP BY record_company ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE orchestra (Orchestra_ID NUMBER, Orchestra TEXT, Record_Company TEXT); CREATE TABLE performance (Orchestra_ID NUMBER, Share TEXT);"
      }
    ],
    [
      {
        "question": "List the names of orchestras.",
        "query": "SELECT orchestra FROM orchestra",
        "schema": "CREATE TABLE conductor (Conductor_ID NUMBER, Name TEXT); CREATE TABLE orchestra (Orchestra_ID NUMBER, Orchestra TEXT, Conductor_ID NUMBER); CREATE TABLE performance (Orchestra_ID NUMBER);"
      },
      {
        "question": "Which of them have had no performances?",
        "query": "SELECT orchestra FROM orchestra WHERE orchestra_id NOT IN (SELECT orchestra_id FROM performance)",
        "schema": "CREATE TABLE conductor (Conductor_ID NUMBER, Name TEXT); CREATE TABLE orchestra (Orchestra_ID NUMBER, Orchestra TEXT, Conductor_ID NUMBER); CREATE TABLE performance (Performance_ID NUMBER, Orchestra_ID NUMBER); CREATE TABLE show (Performance_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Please list the record companies.",
        "query": "SELECT record_company FROM orchestra",
        "schema": "CREATE TABLE orchestra (Record_Company TEXT);"
      },
      {
        "question": "Which of them are shared by orchestras founded before 2003?",
        "query": "SELECT record_company FROM orchestra WHERE year_of_founded < 2003",
        "schema": "CREATE TABLE orchestra (Orchestra_ID NUMBER, Orchestra TEXT, Record_Company TEXT, Year_of_Founded NUMBER); CREATE TABLE performance (Orchestra_ID NUMBER, Share TEXT);"
      },
      {
        "question": "Which of them are shared by orchestras founded after 2003?",
        "query": "SELECT record_company FROM orchestra WHERE year_of_founded > 2003",
        "schema": "CREATE TABLE orchestra (Orchestra_ID NUMBER, Orchestra TEXT, Record_Company TEXT, Year_of_Founded NUMBER); CREATE TABLE performance (Orchestra_ID NUMBER, Share TEXT);"
      },
      {
        "question": "Which of them are shared by orchestras founded before 2003 and after 2003?",
        "query": "SELECT record_company FROM orchestra WHERE year_of_founded < 2003 INTERSECT SELECT record_company FROM orchestra WHERE year_of_founded > 2003",
        "schema": "CREATE TABLE orchestra (Orchestra_ID NUMBER, Orchestra TEXT, Record_Company TEXT, Year_of_Founded NUMBER); CREATE TABLE performance (Orchestra_ID NUMBER, Share TEXT);"
      }
    ],
    [
      {
        "question": "List the orchestras whose record format is \"CD\" or \"DVD\".",
        "query": "SELECT * FROM orchestra WHERE major_record_format = \"CD\" OR major_record_format = \"DVD\"",
        "schema": "CREATE TABLE conductor (Conductor_ID NUMBER); CREATE TABLE orchestra (Orchestra_ID NUMBER, Orchestra TEXT, Major_Record_Format TEXT);"
      },
      {
        "question": "How many of these orchestras are there?",
        "query": "SELECT count(*) FROM orchestra WHERE major_record_format = \"CD\" OR major_record_format = \"DVD\"",
        "schema": "CREATE TABLE conductor (Conductor_ID NUMBER); CREATE TABLE orchestra (Orchestra_ID NUMBER, Orchestra TEXT, Conductor_ID NUMBER, Major_Record_Format TEXT); CREATE TABLE performance (Orchestra_ID NUMBER);"
      }
    ]
  ],
  "cre_Doc_Template_Mgt": [
    [
      {
        "question": "Show information for all documents.",
        "query": "SELECT * FROM documents",
        "schema": "CREATE TABLE Documents (Document_ID NUMBER, Document_Name TEXT); CREATE TABLE Paragraphs (Document_ID NUMBER);"
      },
      {
        "question": "Show their ids.",
        "query": "SELECT document_id FROM documents",
        "schema": "CREATE TABLE Templates (Template_ID NUMBER); CREATE TABLE Documents (Document_ID NUMBER, Template_ID NUMBER, Document_Name TEXT); CREATE TABLE Paragraphs (Document_ID NUMBER);"
      },
      {
        "question": "Also show their document names and document descriptions.",
        "query": "SELECT document_id , document_name , document_description FROM documents",
        "schema": "CREATE TABLE Templates (Template_ID NUMBER); CREATE TABLE Documents (Document_ID NUMBER, Template_ID NUMBER, Document_Name TEXT, Document_Description TEXT); CREATE TABLE Paragraphs (Document_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show the document name for all documents.",
        "query": "SELECT document_name FROM documents",
        "schema": "CREATE TABLE Documents (Document_ID NUMBER, Document_Name TEXT);"
      },
      {
        "question": "Also show their description.",
        "query": "SELECT document_name, document_description FROM documents",
        "schema": "CREATE TABLE Documents (Document_ID NUMBER, Document_Name TEXT, Document_Description TEXT);"
      },
      {
        "question": "Which one has description with the letter 'w' in it?",
        "query": "SELECT document_name FROM documents WHERE document_description LIKE \"%w%\"",
        "schema": "CREATE TABLE Documents (Document_ID NUMBER, Document_Name TEXT, Document_Description TEXT);"
      },
      {
        "question": "Show its name and template id.",
        "query": "SELECT document_name , template_id FROM documents WHERE document_description LIKE \"%w%\"",
        "schema": "CREATE TABLE Templates (Template_ID NUMBER); CREATE TABLE Documents (Document_ID NUMBER, Template_ID NUMBER, Document_Name TEXT, Document_Description TEXT);"
      }
    ],
    [
      {
        "question": "Show the the document name for all documents.",
        "query": "SELECT document_name FROM documents",
        "schema": "CREATE TABLE Documents (Document_ID NUMBER, Document_Name TEXT);"
      },
      {
        "question": "Show the document id for the one named \"Robbin CV\"?",
        "query": "SELECT document_id FROM documents WHERE document_name = \"Robbin CV\"",
        "schema": "CREATE TABLE Documents (Document_ID NUMBER, Document_Name TEXT);"
      },
      {
        "question": "Also show its template id and description.",
        "query": "SELECT document_id , template_id , document_description FROM documents WHERE document_name = \"Robbin CV\"",
        "schema": "CREATE TABLE Templates (Template_ID NUMBER); CREATE TABLE Documents (Document_ID NUMBER, Template_ID NUMBER, Document_Name TEXT, Document_Description TEXT);"
      }
    ],
    [
      {
        "question": "Show the template id for all documents.",
        "query": "SELECT template_id FROM documents",
        "schema": "CREATE TABLE Templates (Template_ID NUMBER); CREATE TABLE Documents (Document_ID NUMBER, Template_ID NUMBER); CREATE TABLE Paragraphs (Document_ID NUMBER);"
      },
      {
        "question": "Show all distinct results.",
        "query": "SELECT DISTINCT template_id FROM documents",
        "schema": "CREATE TABLE Templates (Template_ID NUMBER); CREATE TABLE Documents (Document_ID NUMBER, Template_ID NUMBER); CREATE TABLE Paragraphs (Document_ID NUMBER);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT count(DISTINCT template_id) FROM documents",
        "schema": "CREATE TABLE Templates (Template_ID NUMBER); CREATE TABLE Documents (Document_ID NUMBER, Template_ID NUMBER); CREATE TABLE Paragraphs (Document_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show the document ids.",
        "query": "SELECT document_id FROM documents",
        "schema": "CREATE TABLE Templates (Template_ID NUMBER); CREATE TABLE Documents (Document_ID NUMBER, Template_ID NUMBER); CREATE TABLE Paragraphs (Document_ID NUMBER);"
      },
      {
        "question": "Also show their template id and template type code.",
        "query": "SELECT t1.document_id, t2.template_id, t2.template_type_code FROM documents AS t1 JOIN templates AS t2 ON t1.template_id = t2.template_id",
        "schema": "CREATE TABLE Ref_Template_Types (Template_Type_Code TEXT); CREATE TABLE Templates (Template_ID NUMBER, Template_Type_Code TEXT); CREATE TABLE Documents (Document_ID NUMBER, Template_ID NUMBER); CREATE TABLE Paragraphs (Document_ID NUMBER);"
      },
      {
        "question": "Which documents are using the template with type code 'PPT'?",
        "query": "SELECT t1.document_id FROM documents AS t1 JOIN templates AS t2 ON t1.template_id = t2.template_id WHERE t2.template_type_code = 'PPT'",
        "schema": "CREATE TABLE Ref_Template_Types (Template_Type_Code TEXT); CREATE TABLE Templates (Template_ID NUMBER, Template_Type_Code TEXT); CREATE TABLE Documents (Document_ID NUMBER, Template_ID NUMBER); CREATE TABLE Paragraphs (Document_ID NUMBER);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT count(*) FROM documents AS t1 JOIN templates AS t2 ON t1.template_id = t2.template_id WHERE t2.template_type_code = 'PPT'",
        "schema": "CREATE TABLE Ref_Template_Types (Template_Type_Code TEXT); CREATE TABLE Templates (Template_ID NUMBER, Template_Type_Code TEXT); CREATE TABLE Documents (Document_ID NUMBER, Template_ID NUMBER); CREATE TABLE Paragraphs (Document_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show the template id for all documents.",
        "query": "SELECT template_id FROM documents",
        "schema": "CREATE TABLE Templates (Template_ID NUMBER); CREATE TABLE Documents (Document_ID NUMBER, Template_ID NUMBER); CREATE TABLE Paragraphs (Document_ID NUMBER);"
      },
      {
        "question": "For each of them, show the number of documents using it.",
        "query": "SELECT template_id , count(*) FROM documents GROUP BY template_id",
        "schema": "CREATE TABLE Templates (Template_ID NUMBER); CREATE TABLE Documents (Document_ID NUMBER, Template_ID NUMBER); CREATE TABLE Paragraphs (Document_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show the template id for all Documents.",
        "query": "SELECT template_id FROM documents",
        "schema": "CREATE TABLE Templates (Template_ID NUMBER); CREATE TABLE Documents (Document_ID NUMBER, Template_ID NUMBER); CREATE TABLE Paragraphs (Document_ID NUMBER);"
      },
      {
        "question": "Also show its template type code.",
        "query": "SELECT t1.template_id , t2.template_type_code FROM documents AS t1 JOIN templates AS t2 ON t1.template_id = t2.template_id",
        "schema": "CREATE TABLE Ref_Template_Types (Template_Type_Code TEXT); CREATE TABLE Templates (Template_ID NUMBER, Template_Type_Code TEXT); CREATE TABLE Documents (Document_ID NUMBER, Template_ID NUMBER); CREATE TABLE Paragraphs (Document_ID NUMBER);"
      },
      {
        "question": "For each of them, show the number of documents using it.",
        "query": "SELECT count(*), t1.template_id , t2.template_type_code FROM documents AS t1 JOIN templates AS t2 ON t1.template_id = t2.template_id GROUP BY t1.template_id",
        "schema": "CREATE TABLE Ref_Template_Types (Template_Type_Code TEXT); CREATE TABLE Templates (Template_ID NUMBER, Template_Type_Code TEXT); CREATE TABLE Documents (Document_ID NUMBER, Template_ID NUMBER); CREATE TABLE Paragraphs (Document_ID NUMBER);"
      },
      {
        "question": "Which one has the most?",
        "query": "SELECT t1.template_id , t2.template_type_code FROM documents AS t1 JOIN templates AS t2 ON t1.template_id = t2.template_id GROUP BY t1.template_id ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Ref_Template_Types (Template_Type_Code TEXT); CREATE TABLE Templates (Template_ID NUMBER, Template_Type_Code TEXT); CREATE TABLE Documents (Document_ID NUMBER, Template_ID NUMBER); CREATE TABLE Paragraphs (Document_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show the template id for all documents.",
        "query": "SELECT template_id FROM documents",
        "schema": "CREATE TABLE Templates (Template_ID NUMBER); CREATE TABLE Documents (Document_ID NUMBER, Template_ID NUMBER); CREATE TABLE Paragraphs (Document_ID NUMBER);"
      },
      {
        "question": "For each of them, show the number of documents.",
        "query": "SELECT template_id, count(*) FROM documents GROUP BY template_id",
        "schema": "CREATE TABLE Templates (Template_ID NUMBER); CREATE TABLE Documents (Document_ID NUMBER, Template_ID NUMBER); CREATE TABLE Paragraphs (Document_ID NUMBER);"
      },
      {
        "question": "Which of them are used by more than one document?",
        "query": "SELECT template_id FROM documents GROUP BY template_id HAVING count(*) > 1",
        "schema": "CREATE TABLE Templates (Template_ID NUMBER); CREATE TABLE Documents (Document_ID NUMBER, Template_ID NUMBER); CREATE TABLE Paragraphs (Document_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show template ids used by some document.",
        "query": "SELECT template_id FROM documents",
        "schema": "CREATE TABLE Templates (Template_ID NUMBER); CREATE TABLE Documents (Document_ID NUMBER, Template_ID NUMBER); CREATE TABLE Paragraphs (Document_ID NUMBER);"
      },
      {
        "question": "Show all template ids.",
        "query": "SELECT template_id FROM templates",
        "schema": "CREATE TABLE Templates (Template_ID NUMBER); CREATE TABLE Documents (Document_ID NUMBER, Template_ID NUMBER); CREATE TABLE Paragraphs (Document_ID NUMBER);"
      },
      {
        "question": "Which of them are not used by any document?",
        "query": "SELECT template_id FROM templates EXCEPT SELECT template_id FROM documents",
        "schema": "CREATE TABLE Templates (Template_ID NUMBER); CREATE TABLE Documents (Document_ID NUMBER, Template_ID NUMBER); CREATE TABLE Paragraphs (Document_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show info for all templates.",
        "query": "SELECT * FROM templates",
        "schema": "CREATE TABLE Ref_Template_Types (Template_Type_Code TEXT); CREATE TABLE Templates (Template_ID NUMBER, Version_Number NUMBER, Template_Type_Code TEXT, Template_Details TEXT); CREATE TABLE Documents (Template_ID NUMBER);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT count(*) FROM templates",
        "schema": "CREATE TABLE Ref_Template_Types (Template_Type_Code TEXT); CREATE TABLE Templates (Template_ID NUMBER, Version_Number NUMBER, Template_Type_Code TEXT, Template_Details TEXT); CREATE TABLE Documents (Template_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show template ids for all templates.",
        "query": "SELECT template_id FROM templates",
        "schema": "CREATE TABLE Templates (Template_ID NUMBER); CREATE TABLE Documents (Template_ID NUMBER);"
      },
      {
        "question": "Also show their version numbers and template type codes.",
        "query": "SELECT template_id , version_number , template_type_code FROM templates",
        "schema": "CREATE TABLE Ref_Template_Types (Template_Type_Code TEXT); CREATE TABLE Templates (Template_ID NUMBER, Version_Number NUMBER, Template_Type_Code TEXT); CREATE TABLE Documents (Template_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show all template type codes for all templates.",
        "query": "SELECT template_type_code FROM templates",
        "schema": "CREATE TABLE Ref_Template_Types (Template_Type_Code TEXT); CREATE TABLE Templates (Template_ID NUMBER, Template_Type_Code TEXT);"
      },
      {
        "question": "Filter out duplicates.",
        "query": "SELECT DISTINCT template_type_code FROM templates",
        "schema": "CREATE TABLE Ref_Template_Types (Template_Type_Code TEXT); CREATE TABLE Templates (Template_ID NUMBER, Template_Type_Code TEXT);"
      }
    ],
    [
      {
        "question": "Show the template ids for all templates.",
        "query": "SELECT template_id FROM templates",
        "schema": "CREATE TABLE Templates (Template_ID NUMBER); CREATE TABLE Documents (Template_ID NUMBER);"
      },
      {
        "question": "How about the ids with template type code PP or PPT?",
        "query": "SELECT template_id FROM templates WHERE template_type_code = \"PP\" OR template_type_code = \"PPT\"",
        "schema": "CREATE TABLE Ref_Template_Types (Template_Type_Code TEXT); CREATE TABLE Templates (Template_ID NUMBER, Template_Type_Code TEXT); CREATE TABLE Documents (Template_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show the template type codes for all templates.",
        "query": "SELECT template_type_code FROM templates",
        "schema": "CREATE TABLE Ref_Template_Types (Template_Type_Code TEXT); CREATE TABLE Templates (Template_ID NUMBER, Template_Type_Code TEXT);"
      },
      {
        "question": "How many of them have template type code CV?",
        "query": "SELECT count(*) FROM templates WHERE template_type_code = \"CV\"",
        "schema": "CREATE TABLE Ref_Template_Types (Template_Type_Code TEXT); CREATE TABLE Templates (Template_ID NUMBER, Template_Type_Code TEXT);"
      }
    ],
    [
      {
        "question": "What is the version number for all template?",
        "query": "SELECT version_number FROM templates",
        "schema": "CREATE TABLE Templates (Template_ID NUMBER, Version_Number NUMBER, Template_Type_Code TEXT); CREATE TABLE Documents (Template_ID NUMBER);"
      },
      {
        "question": "Only show those with version number later than 5.",
        "query": "SELECT version_number FROM templates WHERE version_number > 5",
        "schema": "CREATE TABLE Templates (Template_ID NUMBER, Version_Number NUMBER, Template_Type_Code TEXT); CREATE TABLE Documents (Template_ID NUMBER);"
      },
      {
        "question": "Also show their template type code.",
        "query": "SELECT version_number , template_type_code FROM templates WHERE version_number > 5",
        "schema": "CREATE TABLE Ref_Template_Types (Template_Type_Code TEXT); CREATE TABLE Templates (Template_ID NUMBER, Version_Number NUMBER, Template_Type_Code TEXT); CREATE TABLE Documents (Template_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show the template type code for all templates.",
        "query": "SELECT template_type_code FROM templates",
        "schema": "CREATE TABLE Ref_Template_Types (Template_Type_Code TEXT); CREATE TABLE Templates (Template_ID NUMBER, Template_Type_Code TEXT);"
      },
      {
        "question": "For each of them, count the number of templates",
        "query": "SELECT template_type_code , count(*) FROM templates GROUP BY template_type_code",
        "schema": "CREATE TABLE Ref_Template_Types (Template_Type_Code TEXT); CREATE TABLE Templates (Template_ID NUMBER, Version_Number NUMBER, Template_Type_Code TEXT);"
      }
    ],
    [
      {
        "question": "Show all type codes for templates.",
        "query": "SELECT template_type_code FROM templates",
        "schema": "CREATE TABLE Ref_Template_Types (Template_Type_Code TEXT); CREATE TABLE Templates (Template_ID NUMBER, Template_Type_Code TEXT);"
      },
      {
        "question": "For each of them, how many templates do they contain?",
        "query": "SELECT template_type_code, count(*) FROM templates GROUP BY template_type_code",
        "schema": "CREATE TABLE Ref_Template_Types (Template_Type_Code TEXT); CREATE TABLE Templates (Template_ID NUMBER, Template_Type_Code TEXT);"
      },
      {
        "question": "Which of them contains the most templates?",
        "query": "SELECT template_type_code FROM templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Ref_Template_Types (Template_Type_Code TEXT); CREATE TABLE Templates (Template_ID NUMBER, Template_Type_Code TEXT);"
      }
    ],
    [
      {
        "question": "Show all template type codes.",
        "query": "SELECT template_type_code FROM templates",
        "schema": "CREATE TABLE Ref_Template_Types (Template_Type_Code TEXT); CREATE TABLE Templates (Template_ID NUMBER, Template_Type_Code TEXT);"
      },
      {
        "question": "For each of them, show the count of templates.",
        "query": "SELECT template_type_code, count(*) FROM templates GROUP BY template_type_code",
        "schema": "CREATE TABLE Ref_Template_Types (Template_Type_Code TEXT); CREATE TABLE Templates (Template_ID NUMBER, Template_Type_Code TEXT);"
      },
      {
        "question": "Which of them have fewer than three templates?",
        "query": "SELECT template_type_code FROM templates GROUP BY template_type_code HAVING count(*) < 3",
        "schema": "CREATE TABLE Ref_Template_Types (Template_Type_Code TEXT); CREATE TABLE Templates (Template_ID NUMBER, Template_Type_Code TEXT);"
      }
    ],
    [
      {
        "question": "Show the version number for all templates.",
        "query": "SELECT version_number FROM templates",
        "schema": "CREATE TABLE Templates (Template_ID NUMBER, Version_Number NUMBER); CREATE TABLE Documents (Template_ID NUMBER);"
      },
      {
        "question": "What is the smallest value?",
        "query": "SELECT min(version_number) FROM templates",
        "schema": "CREATE TABLE Templates (Template_ID NUMBER, Version_Number NUMBER); CREATE TABLE Documents (Template_ID NUMBER);"
      },
      {
        "question": "Also show its template type code.",
        "query": "SELECT min(version_number) , template_type_code FROM templates",
        "schema": "CREATE TABLE Ref_Template_Types (Template_Type_Code TEXT); CREATE TABLE Templates (Template_ID NUMBER, Version_Number NUMBER, Template_Type_Code TEXT); CREATE TABLE Documents (Template_ID NUMBER);"
      }
    ],
    [
      {
        "question": "What is the template type code of the template.",
        "query": "SELECT template_type_code FROM templates",
        "schema": "CREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT); CREATE TABLE Templates (Template_ID NUMBER, Template_Type_Code TEXT);"
      },
      {
        "question": "Also show the names of all documents using each template.",
        "query": "SELECT t1.template_type_code, t2.document_name FROM templates AS t1 JOIN documents AS t2 ON t1.template_id = t2.template_id",
        "schema": "CREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT); CREATE TABLE Templates (Template_ID NUMBER, Template_Type_Code TEXT); CREATE TABLE Documents (Template_ID NUMBER, Document_Name TEXT);"
      },
      {
        "question": "Which of the template type codes is used by document with the name \"Data base\"?",
        "query": "SELECT t1.template_type_code FROM templates AS t1 JOIN documents AS t2 ON t1.template_id = t2.template_id WHERE t2.document_name = \"Data base\"",
        "schema": "CREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT); CREATE TABLE Templates (Template_ID NUMBER, Template_Type_Code TEXT); CREATE TABLE Documents (Document_ID NUMBER, Template_ID NUMBER, Document_Name TEXT);"
      }
    ],
    [
      {
        "question": "Show all document names.",
        "query": "SELECT document_name FROM documents",
        "schema": "CREATE TABLE Documents (Document_ID NUMBER, Document_Name TEXT);"
      },
      {
        "question": "Also show their template type codes.",
        "query": "SELECT t2.document_name, t1.template_type_code FROM templates AS t1 JOIN documents AS t2 ON t1.template_id = t2.template_id",
        "schema": "CREATE TABLE Ref_Template_Types (Template_Type_Code TEXT); CREATE TABLE Templates (Template_ID NUMBER, Template_Type_Code TEXT); CREATE TABLE Documents (Document_ID NUMBER, Template_ID NUMBER, Document_Name TEXT);"
      },
      {
        "question": "Which of the documents are using templates with template type code BK?",
        "query": "SELECT t2.document_name FROM templates AS t1 JOIN documents AS t2 ON t1.template_id = t2.template_id WHERE t1.template_type_code = \"BK\"",
        "schema": "CREATE TABLE Ref_Template_Types (Template_Type_Code TEXT); CREATE TABLE Templates (Template_ID NUMBER, Template_Type_Code TEXT); CREATE TABLE Documents (Document_ID NUMBER, Template_ID NUMBER, Document_Name TEXT);"
      }
    ],
    [
      {
        "question": "Show all template type codes.",
        "query": "SELECT template_type_code FROM templates",
        "schema": "CREATE TABLE Ref_Template_Types (Template_Type_Code TEXT); CREATE TABLE Templates (Template_ID NUMBER, Template_Type_Code TEXT);"
      },
      {
        "question": "Also show the document ids using each template.",
        "query": "SELECT t1.template_type_code , t2.document_id FROM templates AS t1 JOIN documents AS t2 ON t1.template_id = t2.template_id",
        "schema": "CREATE TABLE Ref_Template_Types (Template_Type_Code TEXT); CREATE TABLE Templates (Template_ID NUMBER, Template_Type_Code TEXT); CREATE TABLE Documents (Document_ID NUMBER, Template_ID NUMBER);"
      },
      {
        "question": "For each type code, how many documents are using that template?",
        "query": "SELECT t1.template_type_code , count(*) FROM templates AS t1 JOIN documents AS t2 ON t1.template_id = t2.template_id GROUP BY t1.template_type_code",
        "schema": "CREATE TABLE Ref_Template_Types (Template_Type_Code TEXT); CREATE TABLE Templates (Template_ID NUMBER, Template_Type_Code TEXT); CREATE TABLE Documents (Document_ID NUMBER, Template_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show the type codes for all templates.",
        "query": "SELECT template_type_code FROM templates",
        "schema": "CREATE TABLE Ref_Template_Types (Template_Type_Code TEXT); CREATE TABLE Templates (Template_ID NUMBER, Template_Type_Code TEXT);"
      },
      {
        "question": "For each, how many documents are using this template?",
        "query": "SELECT t1.template_type_code, count(*) FROM templates AS t1 JOIN documents AS t2 ON t1.template_id = t2.template_id GROUP BY t1.template_type_code",
        "schema": "CREATE TABLE Ref_Template_Types (Template_Type_Code TEXT); CREATE TABLE Templates (Template_ID NUMBER, Template_Type_Code TEXT); CREATE TABLE Documents (Template_ID NUMBER);"
      },
      {
        "question": "Order the template type codes in descending order by this number.",
        "query": "SELECT t1.template_type_code FROM templates AS t1 JOIN documents AS t2 ON t1.template_id = t2.template_id GROUP BY t1.template_type_code ORDER BY count(*) DESC",
        "schema": "CREATE TABLE Ref_Template_Types (Template_Type_Code TEXT); CREATE TABLE Templates (Template_ID NUMBER, Template_Type_Code TEXT); CREATE TABLE Documents (Template_ID NUMBER);"
      },
      {
        "question": "Which of them has the most?",
        "query": "SELECT t1.template_type_code FROM templates AS t1 JOIN documents AS t2 ON t1.template_id = t2.template_id GROUP BY t1.template_type_code ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Ref_Template_Types (Template_Type_Code TEXT); CREATE TABLE Templates (Template_ID NUMBER, Template_Type_Code TEXT); CREATE TABLE Documents (Template_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show all template type codes.",
        "query": "SELECT template_type_code FROM templates",
        "schema": "CREATE TABLE Ref_Template_Types (Template_Type_Code TEXT); CREATE TABLE Templates (Template_ID NUMBER, Template_Type_Code TEXT);"
      },
      {
        "question": "Show all template type codes that are used by some document.",
        "query": "SELECT template_type_code FROM templates AS t1 JOIN documents AS t2 ON t1.template_id = t2.template_id",
        "schema": "CREATE TABLE Ref_Template_Types (Template_Type_Code TEXT); CREATE TABLE Templates (Template_ID NUMBER, Template_Type_Code TEXT); CREATE TABLE Documents (Template_ID NUMBER);"
      },
      {
        "question": "How about those that are not used by any document?",
        "query": "SELECT template_type_code FROM templates EXCEPT SELECT template_type_code FROM templates AS t1 JOIN documents AS t2 ON t1.template_id = t2.template_id",
        "schema": "CREATE TABLE Ref_Template_Types (Template_Type_Code TEXT); CREATE TABLE Templates (Template_ID NUMBER, Template_Type_Code TEXT); CREATE TABLE Documents (Document_ID NUMBER, Template_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show all template type codes.",
        "query": "SELECT template_type_code FROM ref_template_types",
        "schema": "CREATE TABLE Ref_Template_Types (Template_Type_Code TEXT); CREATE TABLE Templates (Template_ID NUMBER, Template_Type_Code TEXT);"
      },
      {
        "question": "Also show their descriptions.",
        "query": "SELECT template_type_code , template_type_description FROM ref_template_types",
        "schema": "CREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT); CREATE TABLE Templates (Template_ID NUMBER, Template_Type_Code TEXT); CREATE TABLE Documents (Document_Description TEXT);"
      }
    ],
    [
      {
        "question": "Show all template type codes and descriptions.",
        "query": "SELECT template_type_code , template_type_description FROM ref_template_types",
        "schema": "CREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT); CREATE TABLE Templates (Template_Type_Code TEXT); CREATE TABLE Documents (Document_Description TEXT);"
      },
      {
        "question": "What is the description for template type code \"AD\"?",
        "query": "SELECT template_type_description FROM ref_template_types WHERE template_type_code = \"AD\"",
        "schema": "CREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT); CREATE TABLE Templates (Template_Type_Code TEXT); CREATE TABLE Documents (Document_Description TEXT);"
      }
    ],
    [
      {
        "question": "Show all template type codes.",
        "query": "SELECT template_type_code FROM ref_template_types",
        "schema": "CREATE TABLE Ref_Template_Types (Template_Type_Code TEXT); CREATE TABLE Templates (Template_ID NUMBER, Template_Type_Code TEXT);"
      },
      {
        "question": "Also show descriptions.",
        "query": "SELECT template_type_code , template_type_description FROM ref_template_types",
        "schema": "CREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT); CREATE TABLE Templates (Template_ID NUMBER, Template_Type_Code TEXT); CREATE TABLE Documents (Document_Description TEXT);"
      },
      {
        "question": "Which code has template type description \"Book\"?",
        "query": "SELECT template_type_code FROM ref_template_types WHERE template_type_description = \"Book\"",
        "schema": "CREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT); CREATE TABLE Templates (Template_ID NUMBER, Template_Type_Code TEXT); CREATE TABLE Documents (Template_ID NUMBER, Document_Description TEXT);"
      }
    ],
    [
      {
        "question": "Show the template ids used by any document.",
        "query": "SELECT template_id FROM documents",
        "schema": "CREATE TABLE Templates (Template_ID NUMBER); CREATE TABLE Documents (Document_ID NUMBER, Template_ID NUMBER); CREATE TABLE Paragraphs (Document_ID NUMBER);"
      },
      {
        "question": "Also show the template type code for those ids.",
        "query": "SELECT t2.template_id, t1.template_type_code FROM templates AS t1 JOIN documents AS t2 ON t1.template_id = t2.template_id",
        "schema": "CREATE TABLE Ref_Template_Types (Template_Type_Code TEXT); CREATE TABLE Templates (Template_ID NUMBER, Template_Type_Code TEXT); CREATE TABLE Documents (Document_ID NUMBER, Template_ID NUMBER); CREATE TABLE Paragraphs (Document_ID NUMBER);"
      },
      {
        "question": "How about their template type descriptions?",
        "query": "SELECT t1.template_type_description FROM ref_template_types AS t1 JOIN templates AS t2 ON t1.template_type_code = t2.template_type_code JOIN documents AS t3 ON t2.template_id = t3.template_id",
        "schema": "CREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT); CREATE TABLE Templates (Template_ID NUMBER, Template_Type_Code TEXT); CREATE TABLE Documents (Document_ID NUMBER, Template_ID NUMBER, Document_Description TEXT); CREATE TABLE Paragraphs (Document_ID NUMBER);"
      },
      {
        "question": "Show the distinct values among them.",
        "query": "SELECT DISTINCT t1.template_type_description FROM ref_template_types AS t1 JOIN templates AS t2 ON t1.template_type_code = t2.template_type_code JOIN documents AS t3 ON t2.template_id = t3.template_id",
        "schema": "CREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT); CREATE TABLE Templates (Template_ID NUMBER, Template_Type_Code TEXT); CREATE TABLE Documents (Document_ID NUMBER, Template_ID NUMBER, Document_Description TEXT); CREATE TABLE Paragraphs (Document_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show the template id for all templates.",
        "query": "SELECT template_id FROM templates",
        "schema": "CREATE TABLE Templates (Template_ID NUMBER); CREATE TABLE Documents (Template_ID NUMBER);"
      },
      {
        "question": "Also show their template type description.",
        "query": "SELECT t2.template_id, t1.template_type_description FROM ref_template_types AS t1 JOIN templates AS t2 ON t1.template_type_code = t2.template_type_code",
        "schema": "CREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT); CREATE TABLE Templates (Template_ID NUMBER, Template_Type_Code TEXT); CREATE TABLE Documents (Template_ID NUMBER);"
      },
      {
        "question": "What are the template ids with description \"Presentation\"?",
        "query": "SELECT t2.template_id FROM ref_template_types AS t1 JOIN templates AS t2 ON t1.template_type_code = t2.template_type_code WHERE t1.template_type_description = \"Presentation\"",
        "schema": "CREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT); CREATE TABLE Templates (Template_ID NUMBER, Template_Type_Code TEXT); CREATE TABLE Documents (Template_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show the info for all paragraphs.",
        "query": "SELECT * FROM paragraphs",
        "schema": "CREATE TABLE Documents (Document_ID NUMBER); CREATE TABLE Paragraphs (Paragraph_ID NUMBER, Document_ID NUMBER, Paragraph_Text TEXT);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT count(*) FROM paragraphs",
        "schema": "CREATE TABLE Templates (Template_ID NUMBER); CREATE TABLE Documents (Document_ID NUMBER); CREATE TABLE Paragraphs (Paragraph_ID NUMBER, Document_ID NUMBER, Paragraph_Text TEXT);"
      }
    ],
    [
      {
        "question": "Show the id for all paragraphs.",
        "query": "SELECT paragraph_id FROM paragraphs",
        "schema": "CREATE TABLE Templates (Template_ID NUMBER); CREATE TABLE Documents (Document_ID NUMBER); CREATE TABLE Paragraphs (Paragraph_ID NUMBER, Document_ID NUMBER, Paragraph_Text TEXT);"
      },
      {
        "question": "Also show their document names.",
        "query": "SELECT t1.paragraph_id, t2.document_name FROM paragraphs AS t1 JOIN documents AS t2 ON t1.document_id = t2.document_id",
        "schema": "CREATE TABLE Templates (Template_ID NUMBER); CREATE TABLE Documents (Document_ID NUMBER, Document_Name TEXT); CREATE TABLE Paragraphs (Paragraph_ID NUMBER, Document_ID NUMBER, Paragraph_Text TEXT);"
      },
      {
        "question": "Only show the id for all paragraphs in the document named 'Summer Show'.",
        "query": "SELECT t1.paragraph_id FROM paragraphs AS t1 JOIN documents AS t2 ON t1.document_id = t2.document_id WHERE t2.document_name = 'Summer Show'",
        "schema": "CREATE TABLE Templates (Template_ID NUMBER); CREATE TABLE Documents (Document_ID NUMBER, Document_Name TEXT); CREATE TABLE Paragraphs (Paragraph_ID NUMBER, Document_ID NUMBER, Paragraph_Text TEXT);"
      },
      {
        "question": "How many such paragraphs are there?",
        "query": "SELECT count(*) FROM paragraphs AS t1 JOIN documents AS t2 ON t1.document_id = t2.document_id WHERE t2.document_name = 'Summer Show'",
        "schema": "CREATE TABLE Templates (Template_ID NUMBER); CREATE TABLE Documents (Document_ID NUMBER, Document_Name TEXT); CREATE TABLE Paragraphs (Paragraph_ID NUMBER, Document_ID NUMBER, Paragraph_Text TEXT);"
      }
    ],
    [
      {
        "question": "Show the parapraph text for all paragraphs.",
        "query": "SELECT paragraph_text FROM paragraphs",
        "schema": "CREATE TABLE Paragraphs (Paragraph_ID NUMBER, Document_ID NUMBER, Paragraph_Text TEXT);"
      },
      {
        "question": "Also show their paragraph details.",
        "query": "SELECT other_details, paragraph_text FROM paragraphs",
        "schema": "CREATE TABLE Paragraphs (Paragraph_ID NUMBER, Document_ID NUMBER, Paragraph_Text TEXT, Other_Details TEXT);"
      },
      {
        "question": "What are the details for the paragraph containing 'Korea'?",
        "query": "SELECT other_details FROM paragraphs WHERE paragraph_text = 'Korea'",
        "schema": "CREATE TABLE Documents (Other_Details TEXT); CREATE TABLE Paragraphs (Paragraph_ID NUMBER, Document_ID NUMBER, Paragraph_Text TEXT, Other_Details TEXT);"
      }
    ],
    [
      {
        "question": "Show all paragraph ids and texts.",
        "query": "SELECT paragraph_id , paragraph_text FROM paragraphs",
        "schema": "CREATE TABLE Documents (Document_ID NUMBER); CREATE TABLE Paragraphs (Paragraph_ID NUMBER, Document_ID NUMBER, Paragraph_Text TEXT);"
      },
      {
        "question": "For each of them, also show their document name.",
        "query": "SELECT t1.paragraph_id , t1.paragraph_text, t2.document_name FROM paragraphs AS t1 JOIN documents AS t2 ON t1.document_id = t2.document_id",
        "schema": "CREATE TABLE Documents (Document_ID NUMBER, Document_Name TEXT); CREATE TABLE Paragraphs (Paragraph_ID NUMBER, Document_ID NUMBER, Paragraph_Text TEXT);"
      },
      {
        "question": "What are the ids and texts for the paragraph in the document with name 'Welcome to NY'?",
        "query": "SELECT t1.paragraph_id , t1.paragraph_text FROM paragraphs AS t1 JOIN documents AS t2 ON t1.document_id = t2.document_id WHERE t2.document_name = 'Welcome to NY'",
        "schema": "CREATE TABLE Documents (Document_ID NUMBER, Document_Name TEXT); CREATE TABLE Paragraphs (Paragraph_ID NUMBER, Document_ID NUMBER, Paragraph_Text TEXT);"
      }
    ],
    [
      {
        "question": "Show all paragraph text.",
        "query": "SELECT paragraph_text FROM paragraphs",
        "schema": "CREATE TABLE Documents (Document_ID NUMBER); CREATE TABLE Paragraphs (Paragraph_ID NUMBER, Document_ID NUMBER, Paragraph_Text TEXT);"
      },
      {
        "question": "For each of them, also show the document name.",
        "query": "SELECT t1.paragraph_text, t2.document_name FROM paragraphs AS t1 JOIN documents AS t2 ON t1.document_id = t2.document_id",
        "schema": "CREATE TABLE Documents (Document_ID NUMBER, Document_Name TEXT); CREATE TABLE Paragraphs (Paragraph_ID NUMBER, Document_ID NUMBER, Paragraph_Text TEXT);"
      },
      {
        "question": "What is the text for the document \"Customer reviews\"?",
        "query": "SELECT t1.paragraph_text FROM paragraphs AS t1 JOIN documents AS t2 ON t1.document_id = t2.document_id WHERE t2.document_name = \"Customer reviews\"",
        "schema": "CREATE TABLE Documents (Document_ID NUMBER, Document_Name TEXT); CREATE TABLE Paragraphs (Paragraph_ID NUMBER, Document_ID NUMBER, Paragraph_Text TEXT);"
      }
    ],
    [
      {
        "question": "Show the document id for all paragraphs.",
        "query": "SELECT document_id FROM paragraphs",
        "schema": "CREATE TABLE Templates (Template_ID NUMBER); CREATE TABLE Documents (Document_ID NUMBER); CREATE TABLE Paragraphs (Paragraph_ID NUMBER, Document_ID NUMBER, Paragraph_Text TEXT);"
      },
      {
        "question": "For each id, show the number of paragraphs.",
        "query": "SELECT document_id , count(*) FROM paragraphs GROUP BY document_id",
        "schema": "CREATE TABLE Templates (Template_ID NUMBER); CREATE TABLE Documents (Document_ID NUMBER); CREATE TABLE Paragraphs (Paragraph_ID NUMBER, Document_ID NUMBER, Paragraph_Text TEXT);"
      },
      {
        "question": "Order by document id.",
        "query": "SELECT document_id , count(*) FROM paragraphs GROUP BY document_id ORDER BY document_id",
        "schema": "CREATE TABLE Templates (Template_ID NUMBER); CREATE TABLE Documents (Document_ID NUMBER); CREATE TABLE Paragraphs (Paragraph_ID NUMBER, Document_ID NUMBER, Paragraph_Text TEXT);"
      }
    ],
    [
      {
        "question": "Show all document ids and names.",
        "query": "SELECT document_id , document_name FROM documents",
        "schema": "CREATE TABLE Templates (Template_ID NUMBER); CREATE TABLE Documents (Document_ID NUMBER, Document_Name TEXT); CREATE TABLE Paragraphs (Document_ID NUMBER);"
      },
      {
        "question": "For each of them, count the number of paragraphs in each document.",
        "query": "SELECT t1.document_id , t2.document_name , count(*) FROM paragraphs AS t1 JOIN documents AS t2 ON t1.document_id = t2.document_id GROUP BY t1.document_id",
        "schema": "CREATE TABLE Templates (Template_ID NUMBER); CREATE TABLE Documents (Document_ID NUMBER, Document_Name TEXT); CREATE TABLE Paragraphs (Paragraph_ID NUMBER, Document_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show the document id for all paragraphs.",
        "query": "SELECT document_id FROM paragraphs",
        "schema": "CREATE TABLE Templates (Template_ID NUMBER); CREATE TABLE Documents (Document_ID NUMBER); CREATE TABLE Paragraphs (Paragraph_ID NUMBER, Document_ID NUMBER, Paragraph_Text TEXT);"
      },
      {
        "question": "For each of these document ids, count the number of paragraphs.",
        "query": "SELECT document_id, count(*) FROM paragraphs GROUP BY document_id",
        "schema": "CREATE TABLE Templates (Template_ID NUMBER); CREATE TABLE Documents (Document_ID NUMBER); CREATE TABLE Paragraphs (Paragraph_ID NUMBER, Document_ID NUMBER, Paragraph_Text TEXT);"
      },
      {
        "question": "Which of them have at least two paragraphs?",
        "query": "SELECT document_id FROM paragraphs GROUP BY document_id HAVING count(*) >= 2",
        "schema": "CREATE TABLE Templates (Template_ID NUMBER); CREATE TABLE Documents (Document_ID NUMBER); CREATE TABLE Paragraphs (Paragraph_ID NUMBER, Document_ID NUMBER, Paragraph_Text TEXT);"
      }
    ],
    [
      {
        "question": "Show the id number and name for all documents.",
        "query": "SELECT document_id , document_name FROM documents",
        "schema": "CREATE TABLE Documents (Document_ID NUMBER, Document_Name TEXT); CREATE TABLE Paragraphs (Document_ID NUMBER);"
      },
      {
        "question": "Also show the paragraph id for those documents.",
        "query": "SELECT t1.document_id , t2.document_name , t1.paragraph_id FROM paragraphs AS t1 JOIN documents AS t2 ON t1.document_id = t2.document_id",
        "schema": "CREATE TABLE Documents (Document_ID NUMBER, Document_Name TEXT); CREATE TABLE Paragraphs (Paragraph_ID NUMBER, Document_ID NUMBER);"
      },
      {
        "question": "For each of these results, count the number of paragraphs.",
        "query": "SELECT t1.document_id , t2.document_name , count(*) FROM paragraphs AS t1 JOIN documents AS t2 ON t1.document_id = t2.document_id GROUP BY t1.document_id",
        "schema": "CREATE TABLE Documents (Document_ID NUMBER, Document_Name TEXT); CREATE TABLE Paragraphs (Paragraph_ID NUMBER, Document_ID NUMBER);"
      },
      {
        "question": "Which of them is the longest?",
        "query": "SELECT t1.document_id , t2.document_name FROM paragraphs AS t1 JOIN documents AS t2 ON t1.document_id = t2.document_id GROUP BY t1.document_id ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Documents (Document_ID NUMBER, Document_Name TEXT); CREATE TABLE Paragraphs (Paragraph_ID NUMBER, Document_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show the document id for all paragraphs.",
        "query": "SELECT document_id FROM paragraphs",
        "schema": "CREATE TABLE Templates (Template_ID NUMBER); CREATE TABLE Documents (Document_ID NUMBER); CREATE TABLE Paragraphs (Paragraph_ID NUMBER, Document_ID NUMBER, Paragraph_Text TEXT);"
      },
      {
        "question": "For each of them, count the number of paragraphs.",
        "query": "SELECT document_id , count(*) FROM paragraphs GROUP BY document_id",
        "schema": "CREATE TABLE Templates (Template_ID NUMBER); CREATE TABLE Documents (Document_ID NUMBER); CREATE TABLE Paragraphs (Paragraph_ID NUMBER, Document_ID NUMBER, Paragraph_Text TEXT);"
      },
      {
        "question": "Sort them by these counts.",
        "query": "SELECT document_id FROM paragraphs GROUP BY document_id ORDER BY count(*)",
        "schema": "CREATE TABLE Templates (Template_ID NUMBER); CREATE TABLE Documents (Document_ID NUMBER); CREATE TABLE Paragraphs (Paragraph_ID NUMBER, Document_ID NUMBER, Paragraph_Text TEXT);"
      },
      {
        "question": "Which has the fewest?",
        "query": "SELECT document_id FROM paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1",
        "schema": "CREATE TABLE Templates (Template_ID NUMBER); CREATE TABLE Documents (Document_ID NUMBER); CREATE TABLE Paragraphs (Paragraph_ID NUMBER, Document_ID NUMBER, Paragraph_Text TEXT);"
      }
    ],
    [
      {
        "question": "Show the document id for all paragraphs.",
        "query": "SELECT document_id FROM paragraphs",
        "schema": "CREATE TABLE Templates (Template_ID NUMBER); CREATE TABLE Documents (Document_ID NUMBER); CREATE TABLE Paragraphs (Paragraph_ID NUMBER, Document_ID NUMBER, Paragraph_Text TEXT);"
      },
      {
        "question": "For each of these ids, show the number of paragraphs.",
        "query": "SELECT document_id, count(*) FROM paragraphs GROUP BY document_id",
        "schema": "CREATE TABLE Templates (Template_ID NUMBER); CREATE TABLE Documents (Document_ID NUMBER); CREATE TABLE Paragraphs (Paragraph_ID NUMBER, Document_ID NUMBER, Paragraph_Text TEXT);"
      },
      {
        "question": "Which of them have between 1 and 2 paragraphs?",
        "query": "SELECT document_id FROM paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2",
        "schema": "CREATE TABLE Templates (Template_ID NUMBER); CREATE TABLE Documents (Document_ID NUMBER); CREATE TABLE Paragraphs (Paragraph_ID NUMBER, Document_ID NUMBER, Paragraph_Text TEXT);"
      }
    ]
  ],
  "concert_singer": [
    [
      {
        "question": "Show information for all singers.",
        "query": "SELECT * FROM singer",
        "schema": "CREATE TABLE singer (Singer_ID NUMBER, Name TEXT); CREATE TABLE singer_in_concert (Singer_ID TEXT);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT count(*) FROM singer",
        "schema": "CREATE TABLE singer (Singer_ID NUMBER, Name TEXT); CREATE TABLE singer_in_concert (Singer_ID TEXT);"
      }
    ],
    [
      {
        "question": "Show names of all singers.",
        "query": "SELECT name FROM singer",
        "schema": "CREATE TABLE singer (Singer_ID NUMBER, Name TEXT, Song_Name TEXT);"
      },
      {
        "question": "For each of them, also show country and age.",
        "query": "SELECT name , country , age FROM singer",
        "schema": "CREATE TABLE singer (Singer_ID NUMBER, Name TEXT, Country TEXT, Song_Name TEXT, Age NUMBER);"
      },
      {
        "question": "List the results in descending order of their age.",
        "query": "SELECT name , country , age FROM singer ORDER BY age DESC",
        "schema": "CREATE TABLE singer (Singer_ID NUMBER, Name TEXT, Country TEXT, Song_Name TEXT, Age NUMBER);"
      }
    ],
    [
      {
        "question": "Show age for all singers.",
        "query": "SELECT age FROM singer",
        "schema": "CREATE TABLE singer (Singer_ID NUMBER, Age NUMBER);"
      },
      {
        "question": "What about age for those from France?",
        "query": "SELECT age FROM singer WHERE country = 'France'",
        "schema": "CREATE TABLE singer (Singer_ID NUMBER, Country TEXT, Age NUMBER);"
      },
      {
        "question": "What is the average, minimum, and maximum age for those?",
        "query": "SELECT avg(age) , min(age) , max(age) FROM singer WHERE country = 'France'",
        "schema": "CREATE TABLE singer (Singer_ID NUMBER, Country TEXT, Age NUMBER);"
      }
    ],
    [
      {
        "question": "Show the names of all songs.",
        "query": "SELECT song_name FROM singer",
        "schema": "CREATE TABLE singer (Song_Name TEXT); CREATE TABLE concert (concert_Name TEXT);"
      },
      {
        "question": "Also show the release year for each of them.",
        "query": "SELECT song_name , song_release_year FROM singer",
        "schema": "CREATE TABLE singer (Name TEXT, Song_Name TEXT, Song_release_year TEXT); CREATE TABLE concert (concert_Name TEXT, Year TEXT);"
      },
      {
        "question": "Order the result by the age of their singers.",
        "query": "SELECT song_name , song_release_year FROM singer ORDER BY age",
        "schema": "CREATE TABLE singer (Name TEXT, Song_Name TEXT, Song_release_year TEXT, Age NUMBER); CREATE TABLE concert (concert_Name TEXT, Year TEXT);"
      },
      {
        "question": "What is the result for the song by the yongest?",
        "query": "SELECT song_name , song_release_year FROM singer ORDER BY age LIMIT 1",
        "schema": "CREATE TABLE singer (Name TEXT, Song_Name TEXT, Song_release_year TEXT, Age NUMBER); CREATE TABLE concert (concert_Name TEXT, Year TEXT);"
      }
    ],
    [
      {
        "question": "Show country for all singers.",
        "query": "SELECT country FROM singer",
        "schema": "CREATE TABLE singer (Singer_ID NUMBER, Country TEXT);"
      },
      {
        "question": "Only show the results for those above 20.",
        "query": "SELECT country FROM singer WHERE age > 20",
        "schema": "CREATE TABLE singer (Singer_ID NUMBER, Country TEXT, Age NUMBER);"
      },
      {
        "question": "What are all distinct countries for them?",
        "query": "SELECT DISTINCT country FROM singer WHERE age > 20",
        "schema": "CREATE TABLE singer (Singer_ID NUMBER, Country TEXT, Age NUMBER);"
      }
    ],
    [
      {
        "question": "Show the country for all singers.",
        "query": "SELECT country FROM singer",
        "schema": "CREATE TABLE singer (Singer_ID NUMBER, Country TEXT);"
      },
      {
        "question": "For each of them, what is the number of singers?",
        "query": "SELECT country , count(*) FROM singer GROUP BY country",
        "schema": "CREATE TABLE singer (Singer_ID NUMBER, Country TEXT);"
      }
    ],
    [
      {
        "question": "What is the average age for all singers?",
        "query": "SELECT avg(age) FROM singer",
        "schema": "CREATE TABLE singer (Age NUMBER, Is_male OTHERS);"
      },
      {
        "question": "Show the name for songs by singers older than that.",
        "query": "SELECT song_name FROM singer WHERE age > (SELECT avg(age) FROM singer)",
        "schema": "CREATE TABLE singer (Name TEXT, Song_Name TEXT, Age NUMBER, Is_male OTHERS);"
      }
    ],
    [
      {
        "question": "Show the name for all stadiums.",
        "query": "SELECT name FROM stadium",
        "schema": "CREATE TABLE stadium (Stadium_ID NUMBER, Name TEXT); CREATE TABLE concert (concert_Name TEXT, Stadium_ID TEXT);"
      },
      {
        "question": "What about those with a capacity between 5000 and 10000?",
        "query": "SELECT name FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
        "schema": "CREATE TABLE stadium (Stadium_ID NUMBER, Name TEXT, Capacity NUMBER); CREATE TABLE concert (concert_Name TEXT, Stadium_ID TEXT);"
      },
      {
        "question": "Also list the location for them.",
        "query": "SELECT LOCATION , name FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
        "schema": "CREATE TABLE stadium (Stadium_ID NUMBER, Location TEXT, Name TEXT, Capacity NUMBER); CREATE TABLE concert (concert_Name TEXT, Stadium_ID TEXT);"
      }
    ],
    [
      {
        "question": "Show the capacity for all stadiums.",
        "query": "SELECT capacity FROM stadium",
        "schema": "CREATE TABLE stadium (Stadium_ID NUMBER, Capacity NUMBER);"
      },
      {
        "question": "What is the average of them?",
        "query": "SELECT avg(capacity) FROM stadium",
        "schema": "CREATE TABLE stadium (Stadium_ID NUMBER, Capacity NUMBER, Average NUMBER);"
      },
      {
        "question": "Also show the maximum.",
        "query": "SELECT avg(capacity) , max(capacity) FROM stadium",
        "schema": "CREATE TABLE stadium (Stadium_ID NUMBER, Capacity NUMBER, Average NUMBER);"
      }
    ],
    [
      {
        "question": "Show the name and capacity for all stadiums.",
        "query": "SELECT name , capacity FROM stadium",
        "schema": "CREATE TABLE stadium (Stadium_ID NUMBER, Name TEXT, Capacity NUMBER); CREATE TABLE concert (Stadium_ID TEXT);"
      },
      {
        "question": "Show the result in descending order of their average attendance.",
        "query": "SELECT name , capacity FROM stadium ORDER BY average DESC",
        "schema": "CREATE TABLE stadium (Stadium_ID NUMBER, Name TEXT, Capacity NUMBER, Average NUMBER); CREATE TABLE concert (Stadium_ID TEXT);"
      },
      {
        "question": "Which one has the highest?",
        "query": "SELECT name , capacity FROM stadium ORDER BY average DESC LIMIT 1",
        "schema": "CREATE TABLE stadium (Stadium_ID NUMBER, Name TEXT, Capacity NUMBER, Highest NUMBER, Lowest NUMBER, Average NUMBER); CREATE TABLE concert (Stadium_ID TEXT);"
      }
    ],
    [
      {
        "question": "Show the concert information in year 2014.",
        "query": "SELECT * FROM concert WHERE YEAR = 2014",
        "schema": "CREATE TABLE singer (Song_release_year TEXT); CREATE TABLE concert (concert_ID NUMBER, concert_Name TEXT, Year TEXT);"
      },
      {
        "question": "Also show those in year 2015.",
        "query": "SELECT * FROM concert WHERE YEAR = 2014 OR YEAR = 2015",
        "schema": "CREATE TABLE singer (Song_release_year TEXT); CREATE TABLE concert (concert_ID NUMBER, concert_Name TEXT, Year TEXT);"
      },
      {
        "question": "How many are there in total?",
        "query": "SELECT count(*) FROM concert WHERE YEAR = 2014 OR YEAR = 2015",
        "schema": "CREATE TABLE singer (Song_release_year TEXT); CREATE TABLE concert (concert_ID NUMBER, concert_Name TEXT, Year TEXT);"
      }
    ],
    [
      {
        "question": "Show the names of stadiums.",
        "query": "SELECT name FROM stadium",
        "schema": "CREATE TABLE stadium (Stadium_ID NUMBER, Name TEXT); CREATE TABLE concert (Stadium_ID TEXT);"
      },
      {
        "question": "For each of them, also show the number of concerts.",
        "query": "SELECT t2.name , count(*) FROM concert AS t1 JOIN stadium AS t2 ON t1.stadium_id = t2.stadium_id GROUP BY t1.stadium_id",
        "schema": "CREATE TABLE stadium (Stadium_ID NUMBER, Name TEXT); CREATE TABLE concert (concert_Name TEXT, Stadium_ID TEXT);"
      }
    ],
    [
      {
        "question": "Show all stadium names and their capacities.",
        "query": "SELECT name , capacity FROM stadium",
        "schema": "CREATE TABLE stadium (Stadium_ID NUMBER, Name TEXT, Capacity NUMBER);"
      },
      {
        "question": "Order the results in descending order of the number of concerts in year 2014 or after.",
        "query": "SELECT t2.name , t2.capacity FROM concert AS t1 JOIN stadium AS t2 ON t1.stadium_id = t2.stadium_id WHERE t1.year >= 2014 GROUP BY t2.stadium_id ORDER BY count(*) DESC",
        "schema": "CREATE TABLE stadium (Stadium_ID NUMBER, Name TEXT, Capacity NUMBER); CREATE TABLE concert (concert_Name TEXT, Stadium_ID TEXT, Year TEXT);"
      },
      {
        "question": "Which one has the most?",
        "query": "SELECT t2.name , t2.capacity FROM concert AS t1 JOIN stadium AS t2 ON t1.stadium_id = t2.stadium_id WHERE t1.year >= 2014 GROUP BY t2.stadium_id ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE stadium (Stadium_ID NUMBER, Name TEXT, Capacity NUMBER); CREATE TABLE concert (concert_Name TEXT, Stadium_ID TEXT, Year TEXT);"
      }
    ],
    [
      {
        "question": "Show the year for all concerts.",
        "query": "SELECT YEAR FROM concert",
        "schema": "CREATE TABLE singer (Song_release_year TEXT); CREATE TABLE concert (concert_ID NUMBER, Year TEXT);"
      },
      {
        "question": "Order them in descending order of the number of concerts",
        "query": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC",
        "schema": "CREATE TABLE singer (Song_release_year TEXT); CREATE TABLE concert (concert_ID NUMBER, Year TEXT);"
      },
      {
        "question": "Which year has the most?",
        "query": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE singer (Song_release_year TEXT); CREATE TABLE concert (concert_ID NUMBER, Year TEXT);"
      }
    ],
    [
      {
        "question": "Show all stadium ids of concerts.",
        "query": "SELECT stadium_id FROM concert",
        "schema": "CREATE TABLE stadium (Stadium_ID NUMBER); CREATE TABLE concert (concert_ID NUMBER, Stadium_ID TEXT);"
      },
      {
        "question": "Show the stadium names without any concert.",
        "query": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)",
        "schema": "CREATE TABLE stadium (Stadium_ID NUMBER, Name TEXT); CREATE TABLE concert (concert_ID NUMBER, concert_Name TEXT, Stadium_ID TEXT);"
      }
    ],
    [
      {
        "question": "Show the country for all singers.",
        "query": "SELECT country FROM singer",
        "schema": "CREATE TABLE singer (Singer_ID NUMBER, Country TEXT);"
      },
      {
        "question": "How about those for singers above age 40?",
        "query": "SELECT country FROM singer WHERE age > 40",
        "schema": "CREATE TABLE singer (Singer_ID NUMBER, Country TEXT, Age NUMBER);"
      },
      {
        "question": "How about those for singers below 30?",
        "query": "SELECT country FROM singer WHERE age < 30",
        "schema": "CREATE TABLE singer (Singer_ID NUMBER, Country TEXT, Age NUMBER);"
      },
      {
        "question": "How about countries with both?",
        "query": "SELECT country FROM singer WHERE age > 40 INTERSECT SELECT country FROM singer WHERE age < 30",
        "schema": "CREATE TABLE singer (Singer_ID NUMBER, Country TEXT, Age NUMBER);"
      }
    ],
    [
      {
        "question": "Show name for stadiums that had a concert in year 2014.",
        "query": "SELECT t2.name FROM concert AS t1 JOIN stadium AS t2 ON t1.stadium_id = t2.stadium_id WHERE t1.year = 2014",
        "schema": "CREATE TABLE stadium (Stadium_ID NUMBER, Name TEXT); CREATE TABLE concert (concert_Name TEXT, Stadium_ID TEXT, Year TEXT);"
      },
      {
        "question": "Show names for all stadiums except for those.",
        "query": "SELECT name FROM stadium EXCEPT SELECT t2.name FROM concert AS t1 JOIN stadium AS t2 ON t1.stadium_id = t2.stadium_id WHERE t1.year = 2014",
        "schema": "CREATE TABLE stadium (Stadium_ID NUMBER, Name TEXT); CREATE TABLE concert (concert_Name TEXT, Stadium_ID TEXT, Year TEXT);"
      }
    ],
    [
      {
        "question": "Show the name and theme for all concerts.",
        "query": "SELECT concert_name , theme FROM concert",
        "schema": "CREATE TABLE concert (concert_Name TEXT, Theme TEXT);"
      },
      {
        "question": "For each of those, also show the number of singers.",
        "query": "SELECT t2.concert_name , t2.theme , count(*) FROM singer_in_concert AS t1 JOIN concert AS t2 ON t1.concert_id = t2.concert_id GROUP BY t2.concert_id",
        "schema": "CREATE TABLE singer (Singer_ID NUMBER); CREATE TABLE concert (concert_ID NUMBER, concert_Name TEXT, Theme TEXT); CREATE TABLE singer_in_concert (concert_ID NUMBER, Singer_ID TEXT);"
      }
    ],
    [
      {
        "question": "Show the name for all singers.",
        "query": "SELECT name FROM singer",
        "schema": "CREATE TABLE singer (Singer_ID NUMBER, Name TEXT, Song_Name TEXT); CREATE TABLE concert (concert_Name TEXT);"
      },
      {
        "question": "For each of them, also show the number of concerts",
        "query": "SELECT t2.name , count(*) FROM singer_in_concert AS t1 JOIN singer AS t2 ON t1.singer_id = t2.singer_id GROUP BY t2.singer_id",
        "schema": "CREATE TABLE singer (Singer_ID NUMBER, Name TEXT, Song_Name TEXT); CREATE TABLE concert (concert_ID NUMBER, concert_Name TEXT); CREATE TABLE singer_in_concert (concert_ID NUMBER, Singer_ID TEXT);"
      }
    ],
    [
      {
        "question": "List all singer names.",
        "query": "SELECT name FROM singer",
        "schema": "CREATE TABLE singer (Singer_ID NUMBER, Name TEXT, Song_Name TEXT);"
      },
      {
        "question": "How about those performing concerts in year 2014?",
        "query": "SELECT t2.name FROM singer_in_concert AS t1 JOIN singer AS t2 ON t1.singer_id = t2.singer_id JOIN concert AS t3 ON t1.concert_id = t3.concert_id WHERE t3.year = 2014",
        "schema": "CREATE TABLE singer (Singer_ID NUMBER, Name TEXT, Song_Name TEXT, Song_release_year TEXT); CREATE TABLE concert (concert_ID NUMBER, concert_Name TEXT, Year TEXT); CREATE TABLE singer_in_concert (concert_ID NUMBER, Singer_ID TEXT);"
      }
    ],
    [
      {
        "question": "What are the names of all singers?",
        "query": "SELECT name FROM singer",
        "schema": "CREATE TABLE singer (Singer_ID NUMBER, Name TEXT);"
      },
      {
        "question": "Show the names for those having a song having 'Hey' in its name.",
        "query": "SELECT name FROM singer WHERE song_name LIKE '%Hey%'",
        "schema": "CREATE TABLE singer (Singer_ID NUMBER, Name TEXT, Song_Name TEXT);"
      },
      {
        "question": "Also show the nation for those singers.",
        "query": "SELECT name , country FROM singer WHERE song_name LIKE '%Hey%'",
        "schema": "CREATE TABLE singer (Singer_ID NUMBER, Name TEXT, Country TEXT, Song_Name TEXT);"
      }
    ],
    [
      {
        "question": "Show the name and location for the stadiums.",
        "query": "SELECT name , LOCATION FROM stadium",
        "schema": "CREATE TABLE stadium (Stadium_ID NUMBER, Location TEXT, Name TEXT); CREATE TABLE concert (Stadium_ID TEXT);"
      },
      {
        "question": "How about those with some concerts happened in the year 2014?",
        "query": "SELECT t2.name , t2.location FROM concert AS t1 JOIN stadium AS t2 ON t1.stadium_id = t2.stadium_id WHERE t1.year = 2014",
        "schema": "CREATE TABLE stadium (Stadium_ID NUMBER, Location TEXT, Name TEXT); CREATE TABLE concert (concert_Name TEXT, Stadium_ID TEXT, Year TEXT);"
      },
      {
        "question": "Among those, what are stadiums also holding some concerts in the year 2015?",
        "query": "SELECT t2.name , t2.location FROM concert AS t1 JOIN stadium AS t2 ON t1.stadium_id = t2.stadium_id WHERE t1.year = 2014 INTERSECT SELECT t2.name , t2.location FROM concert AS t1 JOIN stadium AS t2 ON t1.stadium_id = t2.stadium_id WHERE t1.year = 2015",
        "schema": "CREATE TABLE stadium (Stadium_ID NUMBER, Location TEXT, Name TEXT); CREATE TABLE concert (concert_Name TEXT, Stadium_ID TEXT, Year TEXT);"
      }
    ]
  ],
  "singer": [
    [
      {
        "question": "Show the names and birth years of singers",
        "query": "SELECT name, birth_year FROM singer",
        "schema": "CREATE TABLE singer (Name TEXT, Birth_Year NUMBER);"
      },
      {
        "question": "Only for the ones born in 1948.",
        "query": "SELECT name, birth_year FROM singer WHERE birth_year = 1948",
        "schema": "CREATE TABLE singer (Name TEXT, Birth_Year NUMBER);"
      },
      {
        "question": "Show the name of singers whose birth year is either 1948 or 1949?",
        "query": "SELECT name FROM singer WHERE birth_year = 1948 OR birth_year = 1949",
        "schema": "CREATE TABLE singer (Name TEXT, Birth_Year NUMBER);"
      }
    ],
    [
      {
        "question": "Show the name and net worth of the singers.",
        "query": "SELECT name, net_worth_millions FROM singer",
        "schema": "CREATE TABLE singer (Singer_ID NUMBER, Name TEXT, Net_Worth_Millions NUMBER);"
      },
      {
        "question": "Order by richest first.",
        "query": "SELECT name FROM singer ORDER BY net_worth_millions DESC",
        "schema": "CREATE TABLE singer (Singer_ID NUMBER, Name TEXT, Net_Worth_Millions NUMBER);"
      },
      {
        "question": "What is the name of the singer with the largest net worth?",
        "query": "SELECT name FROM singer ORDER BY net_worth_millions DESC LIMIT 1",
        "schema": "CREATE TABLE singer (Singer_ID NUMBER, Name TEXT, Net_Worth_Millions NUMBER);"
      }
    ],
    [
      {
        "question": "Show the names and citizenships of singers.",
        "query": "SELECT name, citizenship FROM singer",
        "schema": "CREATE TABLE singer (Name TEXT, Citizenship TEXT);"
      },
      {
        "question": "Show citizenship counts.",
        "query": "SELECT citizenship, count(*) FROM singer GROUP BY citizenship",
        "schema": "CREATE TABLE singer (Name TEXT, Citizenship TEXT);"
      },
      {
        "question": "Sort that by most common first.",
        "query": "SELECT citizenship FROM singer GROUP BY citizenship ORDER BY count(*) DESC",
        "schema": "CREATE TABLE singer (Name TEXT, Citizenship TEXT);"
      },
      {
        "question": "Limit it to one.",
        "query": "SELECT citizenship FROM singer GROUP BY citizenship ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE singer (Name TEXT, Citizenship TEXT);"
      }
    ],
    [
      {
        "question": "Join singer names with their song titles.",
        "query": "SELECT t1.name, t2.title FROM singer AS t1 JOIN song AS t2 ON t1.singer_id = t2.singer_id",
        "schema": "CREATE TABLE singer (Singer_ID NUMBER, Name TEXT); CREATE TABLE song (Title TEXT, Singer_ID NUMBER);"
      },
      {
        "question": "Limit the entries to where song sales exceed 300000.",
        "query": "SELECT t1.name, t2.title FROM singer AS t1 JOIN song AS t2 ON t1.singer_id = t2.singer_id WHERE t2.sales > 300000",
        "schema": "CREATE TABLE singer (Singer_ID NUMBER, Name TEXT); CREATE TABLE song (Song_ID NUMBER, Title TEXT, Singer_ID NUMBER, Sales NUMBER);"
      },
      {
        "question": "Which are the distinct names in that list?",
        "query": "SELECT DISTINCT t1.name FROM singer AS t1 JOIN song AS t2 ON t1.singer_id = t2.singer_id WHERE t2.sales > 300000",
        "schema": "CREATE TABLE singer (Singer_ID NUMBER, Name TEXT); CREATE TABLE song (Song_ID NUMBER, Title TEXT, Singer_ID NUMBER, Sales NUMBER);"
      }
    ],
    [
      {
        "question": "Show the names and song counts of singers.",
        "query": "SELECT t1.name, count(*) FROM singer AS t1 JOIN song AS t2 ON t1.singer_id = t2.singer_id GROUP BY t1.name",
        "schema": "CREATE TABLE singer (Singer_ID NUMBER, Name TEXT); CREATE TABLE song (Title TEXT, Singer_ID NUMBER);"
      },
      {
        "question": "Show the names of singers that have more than one song.",
        "query": "SELECT t1.name FROM singer AS t1 JOIN song AS t2 ON t1.singer_id = t2.singer_id GROUP BY t1.name HAVING count(*) > 1",
        "schema": "CREATE TABLE singer (Singer_ID NUMBER, Name TEXT); CREATE TABLE song (Song_ID NUMBER, Title TEXT, Singer_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show the songs and sale amounts.",
        "query": "SELECT title, sales FROM song",
        "schema": "CREATE TABLE song (Song_ID NUMBER, Title TEXT, Sales NUMBER);"
      },
      {
        "question": "Show the names of singers and the total sales of their songs.",
        "query": "SELECT t1.name , sum(t2.sales) FROM singer AS t1 JOIN song AS t2 ON t1.singer_id = t2.singer_id GROUP BY t1.name",
        "schema": "CREATE TABLE singer (Singer_ID NUMBER, Name TEXT); CREATE TABLE song (Song_ID NUMBER, Title TEXT, Singer_ID NUMBER, Sales NUMBER);"
      }
    ],
    [
      {
        "question": "Which singer ids have at least one song?",
        "query": "SELECT DISTINCT singer_id FROM song",
        "schema": "CREATE TABLE singer (Singer_ID NUMBER); CREATE TABLE song (Song_ID NUMBER, Singer_ID NUMBER);"
      },
      {
        "question": "Which singer names do not?",
        "query": "SELECT name FROM singer WHERE singer_id NOT IN (SELECT singer_id FROM song)",
        "schema": "CREATE TABLE singer (Singer_ID NUMBER, Name TEXT); CREATE TABLE song (Song_ID NUMBER, Title TEXT, Singer_ID NUMBER);"
      }
    ]
  ],
  "employee_hire_evaluation": [
    [
      {
        "question": "find all employees who are under age 30.",
        "query": "SELECT * FROM employee WHERE age < 30",
        "schema": "CREATE TABLE employee (Employee_ID NUMBER, Name TEXT, Age NUMBER);"
      },
      {
        "question": "Which cities did they come from?",
        "query": "SELECT city FROM employee WHERE age < 30",
        "schema": "CREATE TABLE employee (Employee_ID NUMBER, Name TEXT, Age NUMBER, City TEXT); CREATE TABLE shop (Location TEXT);"
      },
      {
        "question": "show the cities from which more than one employee originated.",
        "query": "SELECT city FROM employee WHERE age < 30 GROUP BY city HAVING count(*) > 1",
        "schema": "CREATE TABLE employee (Employee_ID NUMBER, Name TEXT, Age NUMBER, City TEXT); CREATE TABLE shop (Location TEXT); CREATE TABLE hiring (Employee_ID NUMBER);"
      }
    ],
    [
      {
        "question": "show all shops.",
        "query": "SELECT * FROM shop",
        "schema": "CREATE TABLE shop (Shop_ID NUMBER, Name TEXT); CREATE TABLE hiring (Shop_ID NUMBER);"
      },
      {
        "question": "what is the total number of products they are selling?",
        "query": "SELECT sum(number_products) FROM shop",
        "schema": "CREATE TABLE shop (Shop_ID NUMBER, Name TEXT, Number_products NUMBER); CREATE TABLE hiring (Shop_ID NUMBER);"
      },
      {
        "question": "find the name of the shop with the greatest number of products.",
        "query": "SELECT name FROM shop ORDER BY number_products DESC LIMIT 1",
        "schema": "CREATE TABLE shop (Shop_ID NUMBER, Name TEXT, Number_products NUMBER); CREATE TABLE hiring (Shop_ID NUMBER);"
      },
      {
        "question": "what are its manager name and district?",
        "query": "SELECT manager_name , district FROM shop ORDER BY number_products DESC LIMIT 1",
        "schema": "CREATE TABLE shop (Shop_ID NUMBER, Name TEXT, District TEXT, Number_products NUMBER, Manager_name TEXT); CREATE TABLE hiring (Shop_ID NUMBER);"
      }
    ],
    [
      {
        "question": "find the average number of products of all stores.",
        "query": "SELECT avg(number_products) FROM shop",
        "schema": "CREATE TABLE shop (Number_products NUMBER);"
      },
      {
        "question": "how about the minimum and maximum?",
        "query": "SELECT min(number_products) , max(number_products) FROM shop",
        "schema": "CREATE TABLE shop (Shop_ID NUMBER, Number_products NUMBER);"
      }
    ],
    [
      {
        "question": "show the name and number of product for all shops.",
        "query": "SELECT name, number_products FROM shop",
        "schema": "CREATE TABLE shop (Shop_ID NUMBER, Name TEXT, Number_products NUMBER);"
      },
      {
        "question": "what is the average number of products?",
        "query": "SELECT avg(number_products) FROM shop",
        "schema": "CREATE TABLE shop (Shop_ID NUMBER, Name TEXT, Number_products NUMBER);"
      },
      {
        "question": "Find the names of stores whose number products is less than the average.",
        "query": "SELECT name FROM shop WHERE number_products < (SELECT avg(number_products) FROM shop)",
        "schema": "CREATE TABLE shop (Shop_ID NUMBER, Name TEXT, Number_products NUMBER);"
      },
      {
        "question": "how about more than?",
        "query": "SELECT name FROM shop WHERE number_products > (SELECT avg(number_products) FROM shop)",
        "schema": "CREATE TABLE shop (Shop_ID NUMBER, Name TEXT, Number_products NUMBER);"
      }
    ],
    [
      {
        "question": "how many evaluations are there?",
        "query": "SELECT count(*) FROM evaluation",
        "schema": "CREATE TABLE evaluation (Employee_ID TEXT);"
      },
      {
        "question": "what years were they given?",
        "query": "SELECT year_awarded FROM evaluation",
        "schema": "CREATE TABLE evaluation (Employee_ID TEXT, Year_awarded TEXT);"
      },
      {
        "question": "find the name of the employee who received the most evaluation awards.",
        "query": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.employee_id = t2.employee_id GROUP BY t2.employee_id ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE employee (Employee_ID NUMBER, Name TEXT); CREATE TABLE evaluation (Employee_ID TEXT, Year_awarded TEXT);"
      }
    ],
    [
      {
        "question": "find the name of the employees who received past evaluation awards.",
        "query": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.employee_id = t2.employee_id",
        "schema": "CREATE TABLE employee (Employee_ID NUMBER, Name TEXT); CREATE TABLE evaluation (Employee_ID TEXT, Year_awarded TEXT);"
      },
      {
        "question": "who won the most times?",
        "query": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.employee_id = t2.employee_id GROUP BY t2.employee_id ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE employee (Employee_ID NUMBER, Name TEXT); CREATE TABLE hiring (Employee_ID NUMBER); CREATE TABLE evaluation (Employee_ID TEXT, Year_awarded TEXT);"
      },
      {
        "question": "ok, which one received the award with the highest bonus?",
        "query": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.employee_id = t2.employee_id ORDER BY t2.bonus DESC LIMIT 1",
        "schema": "CREATE TABLE employee (Employee_ID NUMBER, Name TEXT); CREATE TABLE hiring (Employee_ID NUMBER); CREATE TABLE evaluation (Employee_ID TEXT, Year_awarded TEXT, Bonus NUMBER);"
      }
    ],
    [
      {
        "question": "find the number of different employees who were awarded in the past evaluations.",
        "query": "SELECT count(DISTINCT employee_id) FROM evaluation",
        "schema": "CREATE TABLE employee (Employee_ID NUMBER); CREATE TABLE evaluation (Employee_ID TEXT, Year_awarded TEXT);"
      },
      {
        "question": "what are their names?",
        "query": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.employee_id = t2.employee_id",
        "schema": "CREATE TABLE employee (Employee_ID NUMBER, Name TEXT); CREATE TABLE evaluation (Employee_ID TEXT, Year_awarded TEXT);"
      },
      {
        "question": "show the names of the employees who never won.",
        "query": "SELECT name FROM employee WHERE employee_id NOT IN (SELECT employee_id FROM evaluation)",
        "schema": "CREATE TABLE employee (Employee_ID NUMBER, Name TEXT); CREATE TABLE evaluation (Employee_ID TEXT, Year_awarded TEXT);"
      }
    ],
    [
      {
        "question": "how many shops are hiring?",
        "query": "SELECT count(DISTINCT shop_id) FROM hiring",
        "schema": "CREATE TABLE shop (Shop_ID NUMBER); CREATE TABLE hiring (Shop_ID NUMBER);"
      },
      {
        "question": "what are the shops' names?'",
        "query": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id = t2.shop_id",
        "schema": "CREATE TABLE shop (Shop_ID NUMBER, Name TEXT); CREATE TABLE hiring (Shop_ID NUMBER);"
      },
      {
        "question": "which one is hiring the largest number of employees?",
        "query": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id = t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE employee (Employee_ID NUMBER, Name TEXT); CREATE TABLE shop (Shop_ID NUMBER, Name TEXT); CREATE TABLE hiring (Shop_ID NUMBER, Employee_ID NUMBER);"
      }
    ],
    [
      {
        "question": "show all hiring info.",
        "query": "SELECT * FROM hiring",
        "schema": "CREATE TABLE employee (Employee_ID NUMBER); CREATE TABLE shop (Shop_ID NUMBER); CREATE TABLE hiring (Shop_ID NUMBER, Employee_ID NUMBER);"
      },
      {
        "question": "Find the names of any shops not hiring.",
        "query": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)",
        "schema": "CREATE TABLE employee (Employee_ID NUMBER, Name TEXT); CREATE TABLE shop (Shop_ID NUMBER, Name TEXT, Manager_name TEXT); CREATE TABLE hiring (Shop_ID NUMBER, Employee_ID NUMBER);"
      }
    ],
    [
      {
        "question": "how many employees are being hired in all shops?",
        "query": "SELECT count(*) FROM hiring",
        "schema": "CREATE TABLE employee (Employee_ID NUMBER); CREATE TABLE shop (Shop_ID NUMBER); CREATE TABLE hiring (Shop_ID NUMBER, Employee_ID NUMBER);"
      },
      {
        "question": "show the number for each shop. show the shop name as well.",
        "query": "SELECT count(*) , t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id = t2.shop_id GROUP BY t2.name",
        "schema": "CREATE TABLE employee (Employee_ID NUMBER, Name TEXT); CREATE TABLE shop (Shop_ID NUMBER, Name TEXT); CREATE TABLE hiring (Shop_ID NUMBER, Employee_ID NUMBER);"
      }
    ]
  ],
  "museum_visit": [
    [
      {
        "question": "show all visitors.",
        "query": "SELECT * FROM visitor",
        "schema": "CREATE TABLE visitor (ID NUMBER, Name TEXT); CREATE TABLE visit (visitor_ID TEXT);"
      },
      {
        "question": "order them by their membership level from high to low.",
        "query": "SELECT * FROM visitor ORDER BY level_of_membership DESC",
        "schema": "CREATE TABLE visitor (ID NUMBER, Name TEXT, Level_of_membership NUMBER); CREATE TABLE visit (visitor_ID TEXT);"
      },
      {
        "question": "just show their names.",
        "query": "SELECT name FROM visitor ORDER BY level_of_membership DESC",
        "schema": "CREATE TABLE visitor (ID NUMBER, Name TEXT, Level_of_membership NUMBER); CREATE TABLE visit (visitor_ID TEXT);"
      },
      {
        "question": "do not list those whose membership level is lower than or equal to 4.",
        "query": "SELECT name FROM visitor WHERE level_of_membership > 4 ORDER BY level_of_membership DESC",
        "schema": "CREATE TABLE visitor (ID NUMBER, Name TEXT, Level_of_membership NUMBER); CREATE TABLE visit (visitor_ID TEXT);"
      }
    ],
    [
      {
        "question": "find the number of visitors with a membership level higher than 4.",
        "query": "SELECT count(*) FROM visitor WHERE level_of_membership > 4",
        "schema": "CREATE TABLE visitor (ID NUMBER, Level_of_membership NUMBER); CREATE TABLE visit (visitor_ID TEXT);"
      },
      {
        "question": "what are their names and membership levels?",
        "query": "SELECT name , level_of_membership FROM visitor WHERE level_of_membership > 4",
        "schema": "CREATE TABLE visitor (ID NUMBER, Name TEXT, Level_of_membership NUMBER); CREATE TABLE visit (visitor_ID TEXT);"
      },
      {
        "question": "sort by their age from old to young.",
        "query": "SELECT name , level_of_membership FROM visitor WHERE level_of_membership > 4 ORDER BY age DESC",
        "schema": "CREATE TABLE visitor (ID NUMBER, Name TEXT, Level_of_membership NUMBER, Age NUMBER); CREATE TABLE visit (visitor_ID TEXT);"
      }
    ],
    [
      {
        "question": "how many museums are in the table?",
        "query": "SELECT count(*) FROM museum",
        "schema": "CREATE TABLE museum (Museum_ID NUMBER, Name TEXT);"
      },
      {
        "question": "what is the average number of staff working in these museums?",
        "query": "SELECT avg(num_of_staff) FROM museum",
        "schema": "CREATE TABLE museum (Museum_ID NUMBER, Name TEXT, Num_of_Staff NUMBER);"
      },
      {
        "question": "Find the name of the museum that has the most staff members.",
        "query": "SELECT name FROM museum ORDER BY num_of_staff DESC LIMIT 1",
        "schema": "CREATE TABLE museum (Museum_ID NUMBER, Name TEXT, Num_of_Staff NUMBER);"
      },
      {
        "question": "what is its id?",
        "query": "SELECT museum_id FROM museum ORDER BY num_of_staff DESC LIMIT 1",
        "schema": "CREATE TABLE museum (Museum_ID NUMBER, Name TEXT, Num_of_Staff NUMBER);"
      }
    ],
    [
      {
        "question": "find the names of museums opened before 2010.",
        "query": "SELECT name FROM museum WHERE open_year < 2010",
        "schema": "CREATE TABLE museum (Name TEXT, Open_Year TEXT);"
      },
      {
        "question": "how about after?",
        "query": "SELECT name FROM museum WHERE open_year > 2010",
        "schema": "CREATE TABLE museum (Name TEXT, Open_Year TEXT);"
      },
      {
        "question": "find the minimum number of staff of those museums.",
        "query": "SELECT min(num_of_staff) FROM museum WHERE open_year > 2010",
        "schema": "CREATE TABLE museum (Name TEXT, Num_of_Staff NUMBER, Open_Year TEXT);"
      },
      {
        "question": "find the names of museums which have more staff than that.",
        "query": "SELECT name FROM museum WHERE num_of_staff > (SELECT min(num_of_staff) FROM museum WHERE open_year > 2010)",
        "schema": "CREATE TABLE museum (Name TEXT, Num_of_Staff NUMBER, Open_Year TEXT);"
      }
    ],
    [
      {
        "question": "find the names of visitors who visited and who have some museum visit records.",
        "query": "SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id",
        "schema": "CREATE TABLE museum (Museum_ID NUMBER); CREATE TABLE visitor (ID NUMBER, Name TEXT); CREATE TABLE visit (Museum_ID NUMBER, visitor_ID TEXT);"
      },
      {
        "question": "which of them visited some museums more than once?",
        "query": "SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id GROUP BY t1.id HAVING count(*) > 1",
        "schema": "CREATE TABLE museum (Museum_ID NUMBER, Name TEXT); CREATE TABLE visitor (ID NUMBER, Name TEXT); CREATE TABLE visit (Museum_ID NUMBER, visitor_ID TEXT);"
      },
      {
        "question": "also show their ids and ages.",
        "query": "SELECT t1.id , t1.name , t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id GROUP BY t1.id HAVING count(*) > 1",
        "schema": "CREATE TABLE museum (Museum_ID NUMBER, Name TEXT); CREATE TABLE visitor (ID NUMBER, Name TEXT, Age NUMBER); CREATE TABLE visit (Museum_ID NUMBER, visitor_ID TEXT);"
      }
    ],
    [
      {
        "question": "what is the total spent on all visits?",
        "query": "SELECT sum(total_spent) FROM visit",
        "schema": "CREATE TABLE visitor (ID NUMBER); CREATE TABLE visit (visitor_ID TEXT, Total_spent NUMBER);"
      },
      {
        "question": "find the name of the visitor who has spent the most money for his or her visits.",
        "query": "SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id GROUP BY t2.visitor_id ORDER BY sum(t2.total_spent) DESC LIMIT 1",
        "schema": "CREATE TABLE visitor (ID NUMBER, Name TEXT); CREATE TABLE visit (visitor_ID TEXT, Total_spent NUMBER);"
      },
      {
        "question": "what are his id and membership level?",
        "query": "SELECT t2.visitor_id , t1.name , t1.level_of_membership FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id GROUP BY t2.visitor_id ORDER BY sum(t2.total_spent) DESC LIMIT 1",
        "schema": "CREATE TABLE visitor (ID NUMBER, Name TEXT, Level_of_membership NUMBER); CREATE TABLE visit (visitor_ID TEXT, Total_spent NUMBER);"
      }
    ],
    [
      {
        "question": "show the id and name of all museums.",
        "query": "SELECT museum_id, name FROM museum",
        "schema": "CREATE TABLE museum (Museum_ID NUMBER, Name TEXT);"
      },
      {
        "question": "show the number of tickets sold for each of them.",
        "query": "SELECT t2.museum_id , t1.name, count(*) FROM museum AS t1 JOIN visit AS t2 ON t1.museum_id = t2.museum_id GROUP BY t2.museum_id",
        "schema": "CREATE TABLE museum (Museum_ID NUMBER, Name TEXT);"
      },
      {
        "question": "which one was visited the most times?",
        "query": "SELECT t2.museum_id , t1.name FROM museum AS t1 JOIN visit AS t2 ON t1.museum_id = t2.museum_id GROUP BY t2.museum_id ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE museum (Museum_ID NUMBER, Name TEXT); CREATE TABLE visitor (ID NUMBER, Name TEXT); CREATE TABLE visit (Museum_ID NUMBER, visitor_ID TEXT, Num_of_Ticket NUMBER);"
      }
    ],
    [
      {
        "question": "how many museums are there?",
        "query": "SELECT count(*) FROM museum",
        "schema": "CREATE TABLE museum (Museum_ID NUMBER, Name TEXT);"
      },
      {
        "question": "how many of them have not had any visitors yet?",
        "query": "SELECT count(*) FROM museum WHERE museum_id NOT IN (SELECT museum_id FROM visit)",
        "schema": "CREATE TABLE museum (Museum_ID NUMBER, Name TEXT); CREATE TABLE visit (Museum_ID NUMBER, visitor_ID TEXT);"
      },
      {
        "question": "what are their names?",
        "query": "SELECT name FROM museum WHERE museum_id NOT IN (SELECT museum_id FROM visit)",
        "schema": "CREATE TABLE museum (Museum_ID NUMBER, Name TEXT); CREATE TABLE visitor (ID NUMBER, Name TEXT); CREATE TABLE visit (Museum_ID NUMBER, visitor_ID TEXT);"
      }
    ],
    [
      {
        "question": "how many tickets were sold from all of the museums?",
        "query": "SELECT sum(num_of_ticket) FROM visit",
        "schema": "CREATE TABLE museum (Museum_ID NUMBER); CREATE TABLE visit (Museum_ID NUMBER);"
      },
      {
        "question": "find the id of the visitor who bought the most tickets at once.",
        "query": "SELECT visitor_id FROM visit ORDER BY num_of_ticket DESC LIMIT 1",
        "schema": "CREATE TABLE museum (Museum_ID NUMBER); CREATE TABLE visitor (ID NUMBER); CREATE TABLE visit (Museum_ID NUMBER, visitor_ID TEXT, Num_of_Ticket NUMBER);"
      },
      {
        "question": "Find the name and age of this visitor.",
        "query": "SELECT t1.name, t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1",
        "schema": "CREATE TABLE museum (Museum_ID NUMBER); CREATE TABLE visitor (ID NUMBER, Name TEXT, Age NUMBER); CREATE TABLE visit (Museum_ID NUMBER, visitor_ID TEXT, Num_of_Ticket NUMBER);"
      }
    ],
    [
      {
        "question": "find the total cost of all visits.",
        "query": "SELECT sum(total_spent) FROM visit",
        "schema": "CREATE TABLE visit (Total_spent NUMBER);"
      },
      {
        "question": "what was the amount of the largest one time purchase of tickets out of all visits?",
        "query": "SELECT max(total_spent) FROM visit",
        "schema": "CREATE TABLE visit (Num_of_Ticket NUMBER, Total_spent NUMBER);"
      },
      {
        "question": "how about the average and maximum number of tickets purchased?",
        "query": "SELECT avg(num_of_ticket) , max(num_of_ticket) FROM visit",
        "schema": "CREATE TABLE visit (Num_of_Ticket NUMBER, Total_spent NUMBER);"
      }
    ],
    [
      {
        "question": "what is the lowest level of membership?",
        "query": "SELECT min(level_of_membership) FROM visitor",
        "schema": "CREATE TABLE visitor (Level_of_membership NUMBER);"
      },
      {
        "question": "find the number of visitors whose membership level is 1.",
        "query": "SELECT count(*) FROM visitor WHERE level_of_membership = 1",
        "schema": "CREATE TABLE visitor (ID NUMBER, Level_of_membership NUMBER);"
      },
      {
        "question": "show the ticket expenses of all of their museum visits.",
        "query": "SELECT t2.total_spent FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id WHERE t1.level_of_membership = 1",
        "schema": "CREATE TABLE visitor (ID NUMBER, Level_of_membership NUMBER); CREATE TABLE visit (visitor_ID TEXT, Num_of_Ticket NUMBER);"
      },
      {
        "question": "what is the total amount of money spent?",
        "query": "SELECT sum(t2.total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id WHERE t1.level_of_membership = 1",
        "schema": "CREATE TABLE visitor (ID NUMBER, Level_of_membership NUMBER); CREATE TABLE visit (visitor_ID TEXT, Num_of_Ticket NUMBER, Total_spent NUMBER);"
      }
    ],
    [
      {
        "question": "find the names of museums opened before 2009.",
        "query": "SELECT name FROM museum WHERE open_year < 2009",
        "schema": "CREATE TABLE museum (Name TEXT, Open_Year TEXT);"
      },
      {
        "question": "what about those opened after 2011?",
        "query": "SELECT name FROM museum WHERE open_year > 2011",
        "schema": "CREATE TABLE museum (Name TEXT, Open_Year TEXT);"
      },
      {
        "question": "What is the name of the visitor who visited both groups of museums?",
        "query": "SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id JOIN museum AS t3 ON t3.museum_id = t2.museum_id WHERE t3.open_year < 2009 INTERSECT SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id JOIN museum AS t3 ON t3.museum_id = t2.museum_id WHERE t3.open_year > 2011",
        "schema": "CREATE TABLE museum (Museum_ID NUMBER, Name TEXT, Open_Year TEXT); CREATE TABLE visitor (ID NUMBER, Name TEXT); CREATE TABLE visit (Museum_ID NUMBER, visitor_ID TEXT);"
      }
    ],
    [
      {
        "question": "find the names of museums opened after 2010",
        "query": "SELECT name FROM museum WHERE open_year > 2010",
        "schema": "CREATE TABLE museum (Name TEXT, Open_Year TEXT);"
      },
      {
        "question": "find the number of visits to these museums?",
        "query": "SELECT count(*) FROM museum AS t1 JOIN visit AS t2 ON t1.museum_id = t2.museum_id WHERE t1.open_year > 2010",
        "schema": "CREATE TABLE museum (Museum_ID NUMBER, Name TEXT, Open_Year TEXT); CREATE TABLE visitor (ID NUMBER, Name TEXT); CREATE TABLE visit (Museum_ID NUMBER, visitor_ID TEXT);"
      },
      {
        "question": "Find the number of visitors who did not visit these museums.",
        "query": "SELECT count(*) FROM visitor WHERE id NOT IN (SELECT t2.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.museum_id = t2.museum_id WHERE t1.open_year > 2010)",
        "schema": "CREATE TABLE museum (Museum_ID NUMBER, Name TEXT, Open_Year TEXT); CREATE TABLE visitor (ID NUMBER, Name TEXT); CREATE TABLE visit (Museum_ID NUMBER, visitor_ID TEXT);"
      }
    ]
  ],
  "network_1": [
    [
      {
        "question": "How many high schoolers are there?",
        "query": "SELECT count(*) FROM highschooler",
        "schema": "CREATE TABLE Highschooler (ID NUMBER, name TEXT, grade NUMBER);"
      },
      {
        "question": "How many in each grade 11 or 12?",
        "query": "SELECT count(*) FROM highschooler WHERE grade = 11 OR grade = 12",
        "schema": "CREATE TABLE Highschooler (ID NUMBER, name TEXT, grade NUMBER);"
      },
      {
        "question": "How many in grade 9 or 10?",
        "query": "SELECT count(*) FROM highschooler WHERE grade = 9 OR grade = 10",
        "schema": "CREATE TABLE Highschooler (ID NUMBER, name TEXT, grade NUMBER);"
      }
    ],
    [
      {
        "question": "How many distinct grades are there?",
        "query": "SELECT count(DISTINCT grade) FROM highschooler",
        "schema": "CREATE TABLE Highschooler (ID NUMBER, grade NUMBER);"
      },
      {
        "question": "What are they?",
        "query": "SELECT DISTINCT grade FROM highschooler",
        "schema": "CREATE TABLE Highschooler (ID NUMBER, name TEXT, grade NUMBER);"
      },
      {
        "question": "Which one has the least number of highschoolers?",
        "query": "SELECT grade FROM highschooler GROUP BY grade ORDER BY count(*) ASC LIMIT 1",
        "schema": "CREATE TABLE Highschooler (ID NUMBER, name TEXT, grade NUMBER);"
      },
      {
        "question": "Which one has the most?",
        "query": "SELECT grade FROM highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Highschooler (ID NUMBER, name TEXT, grade NUMBER);"
      }
    ],
    [
      {
        "question": "How many highschoolers are there in total?",
        "query": "SELECT count(*) FROM highschooler",
        "schema": "CREATE TABLE Highschooler (ID NUMBER, name TEXT, grade NUMBER);"
      },
      {
        "question": "How many per grade?",
        "query": "SELECT grade, count(*) FROM highschooler GROUP BY grade",
        "schema": "CREATE TABLE Highschooler (ID NUMBER, name TEXT, grade NUMBER);"
      },
      {
        "question": "What grades have at least 10 students?",
        "query": "SELECT grade FROM highschooler GROUP BY grade HAVING count(*) >= 10",
        "schema": "CREATE TABLE Highschooler (ID NUMBER, name TEXT, grade NUMBER);"
      },
      {
        "question": "How about at least 4?",
        "query": "SELECT grade FROM highschooler GROUP BY grade HAVING count(*) >= 4",
        "schema": "CREATE TABLE Highschooler (ID NUMBER, name TEXT, grade NUMBER);"
      }
    ],
    [
      {
        "question": "What are the names of all the high school students?",
        "query": "SELECT name FROM highschooler",
        "schema": "CREATE TABLE Highschooler (ID NUMBER, name TEXT);"
      },
      {
        "question": "Show the names of the friends for each one.",
        "query": "SELECT t2.name, t3.name FROM friend AS t1 JOIN highschooler AS t2 ON friend_id = t2.id JOIN highschooler AS t3 ON student_id = t3.id",
        "schema": "CREATE TABLE Highschooler (ID NUMBER, name TEXT); CREATE TABLE Friend (student_id NUMBER, friend_id NUMBER); CREATE TABLE Likes (student_id NUMBER, liked_id NUMBER);"
      },
      {
        "question": "How many friends does each student each have?",
        "query": "SELECT t2.name, count(*) FROM friend AS t1 JOIN highschooler AS t2 ON t1.student_id = t2.id GROUP BY t1.student_id",
        "schema": "CREATE TABLE Highschooler (ID NUMBER, name TEXT); CREATE TABLE Friend (student_id NUMBER, friend_id NUMBER); CREATE TABLE Likes (student_id NUMBER, liked_id NUMBER);"
      }
    ],
    [
      {
        "question": "What are the names of all the high schoolers?",
        "query": "SELECT name FROM highschooler",
        "schema": "CREATE TABLE Highschooler (ID NUMBER, name TEXT);"
      },
      {
        "question": "Show me the number of friends for each one.",
        "query": "SELECT t2.name, count(*) FROM friend AS t1 JOIN highschooler AS t2 ON t1.student_id = t2.id GROUP BY t1.student_id",
        "schema": "CREATE TABLE Highschooler (ID NUMBER, name TEXT); CREATE TABLE Friend (student_id NUMBER, friend_id NUMBER); CREATE TABLE Likes (student_id NUMBER, liked_id NUMBER);"
      },
      {
        "question": "Which one has the least number of friends?",
        "query": "SELECT t2.name FROM friend AS t1 JOIN highschooler AS t2 ON t1.student_id = t2.id GROUP BY t1.student_id ORDER BY count(*) ASC LIMIT 1",
        "schema": "CREATE TABLE Highschooler (ID NUMBER, name TEXT); CREATE TABLE Friend (student_id NUMBER, friend_id NUMBER); CREATE TABLE Likes (student_id NUMBER, liked_id NUMBER);"
      },
      {
        "question": "How about the greatest?",
        "query": "SELECT t2.name FROM friend AS t1 JOIN highschooler AS t2 ON t1.student_id = t2.id GROUP BY t1.student_id ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Highschooler (ID NUMBER, name TEXT); CREATE TABLE Friend (student_id NUMBER, friend_id NUMBER); CREATE TABLE Likes (student_id NUMBER, liked_id NUMBER);"
      }
    ],
    [
      {
        "question": "How many highschoolers have more than 5?",
        "query": "SELECT count(*) FROM (SELECT * FROM friend AS t1 JOIN highschooler AS t2 ON t1.student_id = t2.id GROUP BY t1.student_id HAVING count(*) > 5)",
        "schema": "CREATE TABLE Highschooler (ID NUMBER, name TEXT, grade NUMBER);"
      },
      {
        "question": "at least 3?",
        "query": "SELECT count(*) FROM (SELECT * FROM friend AS t1 JOIN highschooler AS t2 ON t1.student_id = t2.id GROUP BY t1.student_id HAVING count(*) >= 3)",
        "schema": "CREATE TABLE Highschooler (ID NUMBER, name TEXT, grade NUMBER); CREATE TABLE Friend (student_id NUMBER, friend_id NUMBER);"
      },
      {
        "question": "What are their names?",
        "query": "SELECT t2.name FROM friend AS t1 JOIN highschooler AS t2 ON t1.student_id = t2.id GROUP BY t1.student_id HAVING count(*) >= 3",
        "schema": "CREATE TABLE Highschooler (ID NUMBER, name TEXT, grade NUMBER); CREATE TABLE Friend (student_id NUMBER, friend_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show me information on the high schooler named \"Kyle.\"",
        "query": "SELECT * FROM highschooler WHERE name = \"Kyle\"",
        "schema": "CREATE TABLE Highschooler (ID NUMBER, name TEXT);"
      },
      {
        "question": "How many friends does he have?",
        "query": "SELECT count(*) FROM friend AS t1 JOIN highschooler AS t2 ON t1.student_id = t2.id JOIN highschooler AS t3 ON t1.friend_id = t3.id WHERE t2.name = \"Kyle\"",
        "schema": "CREATE TABLE Highschooler (ID NUMBER, name TEXT); CREATE TABLE Friend (student_id NUMBER, friend_id NUMBER); CREATE TABLE Likes (student_id NUMBER, liked_id NUMBER);"
      },
      {
        "question": "What are their names?",
        "query": "SELECT t3.name FROM friend AS t1 JOIN highschooler AS t2 ON t1.student_id = t2.id JOIN highschooler AS t3 ON t1.friend_id = t3.id WHERE t2.name = \"Kyle\"",
        "schema": "CREATE TABLE Highschooler (ID NUMBER, name TEXT); CREATE TABLE Friend (student_id NUMBER, friend_id NUMBER); CREATE TABLE Likes (student_id NUMBER, liked_id NUMBER);"
      }
    ],
    [
      {
        "question": "Is there a highschooler named Kyle?",
        "query": "SELECT * FROM highschooler WHERE name = \"Kyle\"",
        "schema": "CREATE TABLE Highschooler (ID NUMBER, name TEXT); CREATE TABLE Friend (friend_id NUMBER);"
      },
      {
        "question": "Who does he like?",
        "query": "SELECT t3.name FROM likes AS t1 JOIN highschooler AS t2 ON t1.student_id = t2.id JOIN highschooler AS t3 ON t1.liked_id = t3.id WHERE t2.name = \"Kyle\"",
        "schema": "CREATE TABLE Highschooler (ID NUMBER, name TEXT); CREATE TABLE Friend (student_id NUMBER, friend_id NUMBER); CREATE TABLE Likes (student_id NUMBER, liked_id NUMBER);"
      },
      {
        "question": "What are the names of his friends?",
        "query": "SELECT t3.name FROM friend AS t1 JOIN highschooler AS t2 ON t1.student_id = t2.id JOIN highschooler AS t3 ON t1.friend_id = t3.id WHERE t2.name = \"Kyle\"",
        "schema": "CREATE TABLE Highschooler (ID NUMBER, name TEXT); CREATE TABLE Friend (student_id NUMBER, friend_id NUMBER); CREATE TABLE Likes (student_id NUMBER, liked_id NUMBER);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT count(*) FROM friend AS t1 JOIN highschooler AS t2 ON t1.student_id = t2.id JOIN highschooler AS t3 ON t1.friend_id = t3.id WHERE t2.name = \"Kyle\"",
        "schema": "CREATE TABLE Highschooler (ID NUMBER, name TEXT); CREATE TABLE Friend (student_id NUMBER, friend_id NUMBER); CREATE TABLE Likes (student_id NUMBER, liked_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show me all the high school student ids.",
        "query": "SELECT id FROM highschooler",
        "schema": "CREATE TABLE Highschooler (ID NUMBER, name TEXT);"
      },
      {
        "question": "How many friends do each of them have?",
        "query": "SELECT student_id, count(*) FROM friend GROUP BY student_id",
        "schema": "CREATE TABLE Highschooler (ID NUMBER, name TEXT); CREATE TABLE Friend (student_id NUMBER, friend_id NUMBER); CREATE TABLE Likes (student_id NUMBER, liked_id NUMBER);"
      },
      {
        "question": "Which ones have at least 1?",
        "query": "SELECT student_id FROM friend",
        "schema": "CREATE TABLE Highschooler (ID NUMBER, name TEXT); CREATE TABLE Friend (student_id NUMBER, friend_id NUMBER); CREATE TABLE Likes (student_id NUMBER, liked_id NUMBER);"
      },
      {
        "question": "Which ones have none?",
        "query": "SELECT id FROM highschooler EXCEPT SELECT student_id FROM friend",
        "schema": "CREATE TABLE Highschooler (ID NUMBER, name TEXT); CREATE TABLE Friend (student_id NUMBER, friend_id NUMBER); CREATE TABLE Likes (student_id NUMBER, liked_id NUMBER);"
      }
    ],
    [
      {
        "question": "What are the names of all the highshcool students?",
        "query": "SELECT name FROM highschooler",
        "schema": "CREATE TABLE Highschooler (ID NUMBER, name TEXT);"
      },
      {
        "question": "Which ones have at least 5 friends?",
        "query": "SELECT count(*) FROM (SELECT * FROM friend AS t1 JOIN highschooler AS t2 ON t1.student_id = t2.id GROUP BY t1.student_id HAVING count(*) >= 5)",
        "schema": "CREATE TABLE Highschooler (ID NUMBER, name TEXT); CREATE TABLE Friend (student_id NUMBER, friend_id NUMBER); CREATE TABLE Likes (student_id NUMBER, liked_id NUMBER);"
      },
      {
        "question": "how about at least 1?",
        "query": "SELECT DISTINCT t2.name FROM friend AS t1 JOIN highschooler AS t2 ON t1.student_id = t2.id",
        "schema": "CREATE TABLE Highschooler (ID NUMBER, name TEXT); CREATE TABLE Friend (student_id NUMBER, friend_id NUMBER); CREATE TABLE Likes (student_id NUMBER, liked_id NUMBER);"
      },
      {
        "question": "how about 0?",
        "query": "SELECT name FROM highschooler EXCEPT SELECT t2.name FROM friend AS t1 JOIN highschooler AS t2 ON t1.student_id = t2.id",
        "schema": "CREATE TABLE Highschooler (ID NUMBER, name TEXT); CREATE TABLE Friend (student_id NUMBER, friend_id NUMBER); CREATE TABLE Likes (student_id NUMBER, liked_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show me the ids of all highschoolers who have friends?",
        "query": "SELECT student_id FROM friend",
        "schema": "CREATE TABLE Highschooler (ID NUMBER, name TEXT); CREATE TABLE Friend (student_id NUMBER, friend_id NUMBER); CREATE TABLE Likes (student_id NUMBER, liked_id NUMBER);"
      },
      {
        "question": "Also show, for each, the ids of the people they like?",
        "query": "SELECT DISTINCT t1.student_id, t2.liked_id FROM friend AS t1 JOIN likes AS t2 ON t1.student_id = t2.student_id",
        "schema": "CREATE TABLE Highschooler (ID NUMBER, name TEXT); CREATE TABLE Friend (student_id NUMBER, friend_id NUMBER); CREATE TABLE Likes (student_id NUMBER, liked_id NUMBER);"
      },
      {
        "question": "Now only show those who are liked by someone else!",
        "query": "SELECT DISTINCT t1.student_id, t2.liked_id FROM friend AS t1 JOIN likes AS t2 ON t1.student_id = t2.student_id WHERE t1.student_id IN (SELECT liked_id FROM likes)",
        "schema": "CREATE TABLE Highschooler (ID NUMBER, name TEXT); CREATE TABLE Friend (student_id NUMBER, friend_id NUMBER); CREATE TABLE Likes (student_id NUMBER, liked_id NUMBER);"
      },
      {
        "question": "Show me just their ids!",
        "query": "SELECT student_id FROM friend INTERSECT SELECT liked_id FROM likes",
        "schema": "CREATE TABLE Highschooler (ID NUMBER, name TEXT); CREATE TABLE Friend (student_id NUMBER, friend_id NUMBER); CREATE TABLE Likes (student_id NUMBER, liked_id NUMBER);"
      }
    ],
    [
      {
        "question": "How many high schoolers are liked by someone else?",
        "query": "SELECT count(*) FROM likes AS t1 JOIN highschooler AS t2 ON t1.liked_id = t2.id",
        "schema": "CREATE TABLE Highschooler (ID NUMBER); CREATE TABLE Friend (student_id NUMBER, friend_id NUMBER); CREATE TABLE Likes (student_id NUMBER, liked_id NUMBER);"
      },
      {
        "question": "What are their names?",
        "query": "SELECT t2.name FROM likes AS t1 JOIN highschooler AS t2 ON t1.liked_id = t2.id",
        "schema": "CREATE TABLE Highschooler (ID NUMBER, name TEXT); CREATE TABLE Friend (student_id NUMBER, friend_id NUMBER); CREATE TABLE Likes (student_id NUMBER, liked_id NUMBER);"
      },
      {
        "question": "How many of them have friends?",
        "query": "SELECT COUNT (*) FROM (SELECT t2.name FROM friend AS t1 JOIN highschooler AS t2 ON t1.student_id = t2.id INTERSECT SELECT t2.name FROM likes AS t1 JOIN highschooler AS t2 ON t1.liked_id = t2.id)",
        "schema": "CREATE TABLE Highschooler (ID NUMBER, name TEXT); CREATE TABLE Friend (student_id NUMBER, friend_id NUMBER); CREATE TABLE Likes (student_id NUMBER, liked_id NUMBER);"
      },
      {
        "question": "Who are they?",
        "query": "SELECT t2.name FROM friend AS t1 JOIN highschooler AS t2 ON t1.student_id = t2.id INTERSECT SELECT t2.name FROM likes AS t1 JOIN highschooler AS t2 ON t1.liked_id = t2.id",
        "schema": "CREATE TABLE Highschooler (ID NUMBER, name TEXT); CREATE TABLE Friend (student_id NUMBER, friend_id NUMBER); CREATE TABLE Likes (student_id NUMBER, liked_id NUMBER);"
      }
    ],
    [
      {
        "question": "What are the names of the highschoolers who don't like anyone?",
        "query": "SELECT name FROM highschooler WHERE id NOT IN (SELECT student_id FROM likes)",
        "schema": "CREATE TABLE Highschooler (ID NUMBER, name TEXT); CREATE TABLE Likes (student_id NUMBER, liked_id NUMBER);"
      },
      {
        "question": "How about those who like others?",
        "query": "SELECT t2.name FROM likes AS t1 JOIN highschooler AS t2 ON t1.student_id = t2.id",
        "schema": "CREATE TABLE Highschooler (ID NUMBER, name TEXT); CREATE TABLE Likes (student_id NUMBER, liked_id NUMBER);"
      },
      {
        "question": "How many people do they each like?",
        "query": "SELECT t2.name , count(*) FROM likes AS t1 JOIN highschooler AS t2 ON t1.student_id = t2.id GROUP BY t1.student_id",
        "schema": "CREATE TABLE Highschooler (ID NUMBER, name TEXT); CREATE TABLE Likes (student_id NUMBER, liked_id NUMBER);"
      }
    ],
    [
      {
        "question": "How many high schoolers like somebody else?",
        "query": "SELECT count(DISTINCT student_id) FROM likes",
        "schema": "CREATE TABLE Highschooler (ID NUMBER); CREATE TABLE Likes (student_id NUMBER, liked_id NUMBER);"
      },
      {
        "question": "What are their names?",
        "query": "SELECT t2.name FROM likes AS t1 JOIN highschooler AS t2 ON t1.student_id = t2.id",
        "schema": "CREATE TABLE Highschooler (ID NUMBER, name TEXT); CREATE TABLE Friend (student_id NUMBER, friend_id NUMBER); CREATE TABLE Likes (student_id NUMBER, liked_id NUMBER);"
      },
      {
        "question": "what is the greatest number of likes anyone has?",
        "query": "SELECT count(*) FROM likes AS t1 JOIN highschooler AS t2 ON t1.student_id = t2.id GROUP BY t1.student_id ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Highschooler (ID NUMBER, name TEXT); CREATE TABLE Friend (student_id NUMBER, friend_id NUMBER); CREATE TABLE Likes (student_id NUMBER, liked_id NUMBER);"
      },
      {
        "question": "who has the greatest number of likes?",
        "query": "SELECT t2.name FROM likes AS t1 JOIN highschooler AS t2 ON t1.student_id = t2.id GROUP BY t1.student_id ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Highschooler (ID NUMBER, name TEXT); CREATE TABLE Friend (student_id NUMBER, friend_id NUMBER); CREATE TABLE Likes (student_id NUMBER, liked_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show me the names of all students?",
        "query": "SELECT name FROM highschooler",
        "schema": "CREATE TABLE Highschooler (name TEXT);"
      },
      {
        "question": "How about those who like at least one other person!",
        "query": "SELECT t2.name FROM likes AS t1 JOIN highschooler AS t2 ON t1.student_id = t2.id GROUP BY t1.student_id HAVING count(*) >= 1",
        "schema": "CREATE TABLE Highschooler (ID NUMBER, name TEXT); CREATE TABLE Friend (friend_id NUMBER); CREATE TABLE Likes (student_id NUMBER, liked_id NUMBER);"
      },
      {
        "question": "How about those who like at least two other students!",
        "query": "SELECT t2.name FROM likes AS t1 JOIN highschooler AS t2 ON t1.student_id = t2.id GROUP BY t1.student_id HAVING count(*) >= 2",
        "schema": "CREATE TABLE Highschooler (ID NUMBER, name TEXT); CREATE TABLE Friend (friend_id NUMBER); CREATE TABLE Likes (student_id NUMBER, liked_id NUMBER);"
      }
    ],
    [
      {
        "question": "What are the names of the students who have some friends?",
        "query": "SELECT t2.name FROM friend AS t1 JOIN highschooler AS t2 ON t1.student_id = t2.id GROUP BY t1.student_id",
        "schema": "CREATE TABLE Highschooler (ID NUMBER, name TEXT); CREATE TABLE Friend (student_id NUMBER, friend_id NUMBER); CREATE TABLE Likes (student_id NUMBER, liked_id NUMBER);"
      },
      {
        "question": "How about those have at least 2 friends?",
        "query": "SELECT t2.name FROM friend AS t1 JOIN highschooler AS t2 ON t1.student_id = t2.id GROUP BY t1.student_id HAVING count(*) >= 2",
        "schema": "CREATE TABLE Highschooler (ID NUMBER, name TEXT); CREATE TABLE Friend (student_id NUMBER, friend_id NUMBER); CREATE TABLE Likes (student_id NUMBER, liked_id NUMBER);"
      },
      {
        "question": "What grades are they each in?",
        "query": "SELECT t2.name, t2.grade FROM friend AS t1 JOIN highschooler AS t2 ON t1.student_id = t2.id GROUP BY t1.student_id HAVING count(*) >= 2",
        "schema": "CREATE TABLE Highschooler (ID NUMBER, name TEXT, grade NUMBER); CREATE TABLE Friend (student_id NUMBER, friend_id NUMBER); CREATE TABLE Likes (student_id NUMBER, liked_id NUMBER);"
      },
      {
        "question": "Show me the names of only those who are in a grade higher than 5!",
        "query": "SELECT t2.name FROM friend AS t1 JOIN highschooler AS t2 ON t1.student_id = t2.id WHERE t2.grade > 5 GROUP BY t1.student_id HAVING count(*) >= 2",
        "schema": "CREATE TABLE Highschooler (ID NUMBER, name TEXT, grade NUMBER); CREATE TABLE Friend (student_id NUMBER, friend_id NUMBER); CREATE TABLE Likes (student_id NUMBER, liked_id NUMBER);"
      }
    ],
    [
      {
        "question": "What grade is the student named Kyle in?",
        "query": "SELECT grade FROM highschooler WHERE name = \"Kyle\"",
        "schema": "CREATE TABLE Highschooler (ID NUMBER, name TEXT, grade NUMBER);"
      },
      {
        "question": "How many other students like him?",
        "query": "SELECT count(*) FROM likes AS t1 JOIN highschooler AS t2 ON t1.liked_id = t2.id WHERE t2.name = \"Kyle\"",
        "schema": "CREATE TABLE Highschooler (ID NUMBER, name TEXT, grade NUMBER); CREATE TABLE Likes (student_id NUMBER, liked_id NUMBER);"
      },
      {
        "question": "What are their names?",
        "query": "SELECT t3.name FROM likes AS t1 JOIN highschooler AS t2 ON t1.liked_id = t2.id JOIN highschooler AS t3 ON t3.id = t1.student_id WHERE t2.name = \"Kyle\"",
        "schema": "CREATE TABLE Highschooler (ID NUMBER, name TEXT, grade NUMBER); CREATE TABLE Likes (student_id NUMBER, liked_id NUMBER);"
      },
      {
        "question": "How many other students does he like?",
        "query": "SELECT count(*) FROM likes AS t1 JOIN highschooler AS t2 ON t1.student_id = t2.id WHERE t2.name = \"Kyle\"",
        "schema": "CREATE TABLE Highschooler (ID NUMBER, name TEXT, grade NUMBER); CREATE TABLE Likes (student_id NUMBER, liked_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show me the student_id and the grade for all students.",
        "query": "SELECT id, grade FROM highschooler",
        "schema": "CREATE TABLE Highschooler (ID NUMBER, grade NUMBER);"
      },
      {
        "question": "What is the average grade?",
        "query": "SELECT avg(grade) FROM highschooler",
        "schema": "CREATE TABLE Highschooler (ID NUMBER, grade NUMBER);"
      },
      {
        "question": "How about for students who have no friends?",
        "query": "SELECT avg(grade) FROM highschooler WHERE id NOT IN (SELECT t1.student_id FROM friend AS t1 JOIN highschooler AS t2 ON t1.student_id = t2.id)",
        "schema": "CREATE TABLE Highschooler (ID NUMBER, name TEXT, grade NUMBER); CREATE TABLE Friend (student_id NUMBER, friend_id NUMBER);"
      },
      {
        "question": "How about for those who have some friends?",
        "query": "SELECT avg(grade) FROM highschooler WHERE id IN (SELECT t1.student_id FROM friend AS t1 JOIN highschooler AS t2 ON t1.student_id = t2.id)",
        "schema": "CREATE TABLE Highschooler (ID NUMBER, name TEXT, grade NUMBER); CREATE TABLE Friend (student_id NUMBER, friend_id NUMBER);"
      }
    ]
  ],
  "course_teach": [
    [
      {
        "question": "Show all the teachers.",
        "query": "SELECT * FROM teacher",
        "schema": "CREATE TABLE teacher (Teacher_ID NUMBER, Name TEXT);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT count(*) FROM teacher",
        "schema": "CREATE TABLE teacher (Teacher_ID NUMBER, Name TEXT);"
      }
    ],
    [
      {
        "question": "What is the name of each teacher?",
        "query": "SELECT name FROM teacher",
        "schema": "CREATE TABLE teacher (Teacher_ID NUMBER, Name TEXT);"
      },
      {
        "question": "Sort them in ascending order of age.",
        "query": "SELECT name FROM teacher ORDER BY age ASC",
        "schema": "CREATE TABLE teacher (Teacher_ID NUMBER, Name TEXT, Age TEXT);"
      }
    ],
    [
      {
        "question": "What is the age of each teacher?",
        "query": "SELECT age FROM teacher",
        "schema": "CREATE TABLE teacher (Teacher_ID NUMBER, Name TEXT, Age TEXT);"
      },
      {
        "question": "Also show the hometown for each.",
        "query": "SELECT age , hometown FROM teacher",
        "schema": "CREATE TABLE teacher (Teacher_ID NUMBER, Name TEXT, Age TEXT, Hometown TEXT);"
      }
    ],
    [
      {
        "question": "What is the hometown of each teacher?",
        "query": "SELECT hometown FROM teacher",
        "schema": "CREATE TABLE teacher (Teacher_ID NUMBER, Name TEXT, Hometown TEXT);"
      },
      {
        "question": "Which teacher's hometown is not \"Little Lever Urban District\"?",
        "query": "SELECT * FROM teacher WHERE hometown != \"Little Lever Urban Distric\"",
        "schema": "CREATE TABLE teacher (Teacher_ID NUMBER, Name TEXT, Hometown TEXT);"
      },
      {
        "question": "Give me their names.",
        "query": "SELECT name FROM teacher WHERE hometown != \"Little Lever Urban Distric\"",
        "schema": "CREATE TABLE teacher (Teacher_ID NUMBER, Name TEXT, Hometown TEXT);"
      }
    ],
    [
      {
        "question": "What are the ages of all the teachers?",
        "query": "SELECT age FROM teacher",
        "schema": "CREATE TABLE teacher (Teacher_ID NUMBER, Name TEXT, Age TEXT);"
      },
      {
        "question": "Which teachers are age 32?",
        "query": "SELECT * FROM teacher WHERE age = 32",
        "schema": "CREATE TABLE teacher (Teacher_ID NUMBER, Name TEXT, Age TEXT);"
      },
      {
        "question": "Which teachers are age 32 or 33?",
        "query": "SELECT * FROM teacher WHERE age = 32 OR age = 33",
        "schema": "CREATE TABLE teacher (Teacher_ID NUMBER, Name TEXT, Age TEXT);"
      },
      {
        "question": "What are their names?",
        "query": "SELECT name FROM teacher WHERE age = 32 OR age = 33",
        "schema": "CREATE TABLE teacher (Teacher_ID NUMBER, Name TEXT, Age TEXT);"
      }
    ],
    [
      {
        "question": "Sort all the teachers by their age.",
        "query": "SELECT * FROM teacher ORDER BY age",
        "schema": "CREATE TABLE teacher (Teacher_ID NUMBER, Name TEXT, Age TEXT);"
      },
      {
        "question": "Which teacher is the youngest?",
        "query": "SELECT * FROM teacher ORDER BY age ASC LIMIT 1",
        "schema": "CREATE TABLE teacher (Teacher_ID NUMBER, Name TEXT, Age TEXT);"
      },
      {
        "question": "What is his or her hometown?",
        "query": "SELECT hometown FROM teacher ORDER BY age ASC LIMIT 1",
        "schema": "CREATE TABLE teacher (Teacher_ID NUMBER, Name TEXT, Age TEXT, Hometown TEXT);"
      }
    ],
    [
      {
        "question": "What is the hometown of each teacher?",
        "query": "SELECT hometown FROM teacher",
        "schema": "CREATE TABLE teacher (Teacher_ID NUMBER, Name TEXT, Hometown TEXT);"
      },
      {
        "question": "Can you order teachers by their hometowns?",
        "query": "SELECT * FROM teacher ORDER BY hometown",
        "schema": "CREATE TABLE teacher (Teacher_ID NUMBER, Name TEXT, Hometown TEXT);"
      },
      {
        "question": "Show the number of teachers from each hometown.",
        "query": "SELECT hometown , count(*) FROM teacher GROUP BY hometown",
        "schema": "CREATE TABLE teacher (Teacher_ID NUMBER, Name TEXT, Hometown TEXT);"
      }
    ],
    [
      {
        "question": "How many teachers are there?",
        "query": "SELECT count(*) FROM teacher",
        "schema": "CREATE TABLE teacher (Teacher_ID NUMBER, Name TEXT); CREATE TABLE course_arrange (Teacher_ID NUMBER);"
      },
      {
        "question": "How many are there for each hometown?",
        "query": "SELECT count(*) FROM teacher GROUP BY hometown",
        "schema": "CREATE TABLE teacher (Teacher_ID NUMBER, Name TEXT, Hometown TEXT); CREATE TABLE course_arrange (Teacher_ID NUMBER);"
      },
      {
        "question": "Find the most common hometown of teachers.",
        "query": "SELECT hometown FROM teacher GROUP BY hometown ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE teacher (Teacher_ID NUMBER, Name TEXT, Hometown TEXT); CREATE TABLE course_arrange (Teacher_ID NUMBER);"
      }
    ],
    [
      {
        "question": "How many teachers are there?",
        "query": "SELECT count(*) FROM teacher",
        "schema": "CREATE TABLE teacher (Teacher_ID NUMBER, Name TEXT); CREATE TABLE course_arrange (Teacher_ID NUMBER);"
      },
      {
        "question": "How many teachers are there for each hometown?",
        "query": "SELECT count(*) FROM teacher GROUP BY hometown",
        "schema": "CREATE TABLE teacher (Teacher_ID NUMBER, Name TEXT, Hometown TEXT); CREATE TABLE course_arrange (Teacher_ID NUMBER);"
      },
      {
        "question": "Which hometowns are shared by at least two teachers?",
        "query": "SELECT hometown FROM teacher GROUP BY hometown HAVING count(*) >= 2",
        "schema": "CREATE TABLE teacher (Teacher_ID NUMBER, Name TEXT, Hometown TEXT); CREATE TABLE course_arrange (Teacher_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Find all the course arrangements.",
        "query": "SELECT * FROM course_arrange",
        "schema": "CREATE TABLE course (Course_ID NUMBER, Course TEXT); CREATE TABLE course_arrange (Course_ID NUMBER);"
      },
      {
        "question": "For each of the courses, show the teacher who teaches it.",
        "query": "SELECT t3.name , t2.course FROM course_arrange AS t1 JOIN course AS t2 ON t1.course_id = t2.course_id JOIN teacher AS t3 ON t1.teacher_id = t3.teacher_id",
        "schema": "CREATE TABLE course (Course_ID NUMBER, Course TEXT); CREATE TABLE teacher (Teacher_ID NUMBER, Name TEXT); CREATE TABLE course_arrange (Course_ID NUMBER, Teacher_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Find all the course arrangements.",
        "query": "SELECT * FROM course_arrange",
        "schema": "CREATE TABLE course (Course_ID NUMBER, Course TEXT); CREATE TABLE course_arrange (Course_ID NUMBER);"
      },
      {
        "question": "Show names of teachers and the courses they are arranged to teach.",
        "query": "SELECT t3.name , t2.course FROM course_arrange AS t1 JOIN course AS t2 ON t1.course_id = t2.course_id JOIN teacher AS t3 ON t1.teacher_id = t3.teacher_id",
        "schema": "CREATE TABLE course (Course_ID NUMBER, Course TEXT); CREATE TABLE teacher (Teacher_ID NUMBER, Name TEXT); CREATE TABLE course_arrange (Course_ID NUMBER, Teacher_ID NUMBER);"
      },
      {
        "question": "Sort the results by teacher's name",
        "query": "SELECT t3.name , t2.course FROM course_arrange AS t1 JOIN course AS t2 ON t1.course_id = t2.course_id JOIN teacher AS t3 ON t1.teacher_id = t3.teacher_id ORDER BY t3.name",
        "schema": "CREATE TABLE course (Course_ID NUMBER, Course TEXT); CREATE TABLE teacher (Teacher_ID NUMBER, Name TEXT); CREATE TABLE course_arrange (Course_ID NUMBER, Teacher_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Find all the course arrangements.",
        "query": "SELECT * FROM course_arrange",
        "schema": "CREATE TABLE course (Course_ID NUMBER, Course TEXT); CREATE TABLE course_arrange (Course_ID NUMBER);"
      },
      {
        "question": "Show names of teachers and the courses they are arranged to teach.",
        "query": "SELECT t3.name , t2.course FROM course_arrange AS t1 JOIN course AS t2 ON t1.course_id = t2.course_id JOIN teacher AS t3 ON t1.teacher_id = t3.teacher_id",
        "schema": "CREATE TABLE course (Course_ID NUMBER, Course TEXT); CREATE TABLE teacher (Teacher_ID NUMBER, Name TEXT); CREATE TABLE course_arrange (Course_ID NUMBER, Teacher_ID NUMBER);"
      },
      {
        "question": "Which teachers teach the math course? Give me their names.",
        "query": "SELECT t3.name FROM course_arrange AS t1 JOIN course AS t2 ON t1.course_id = t2.course_id JOIN teacher AS t3 ON t1.teacher_id = t3.teacher_id WHERE t2.course = \"Math\"",
        "schema": "CREATE TABLE course (Course_ID NUMBER, Course TEXT); CREATE TABLE teacher (Teacher_ID NUMBER, Name TEXT); CREATE TABLE course_arrange (Course_ID NUMBER, Teacher_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show all the teacher names.",
        "query": "SELECT name FROM teacher",
        "schema": "CREATE TABLE teacher (Teacher_ID NUMBER, Name TEXT);"
      },
      {
        "question": "Show names of teachers and the number of courses they teach.",
        "query": "SELECT t2.name , count(*) FROM course_arrange AS t1 JOIN teacher AS t2 ON t1.teacher_id = t2.teacher_id GROUP BY t2.name",
        "schema": "CREATE TABLE course (Course_ID NUMBER); CREATE TABLE teacher (Teacher_ID NUMBER, Name TEXT); CREATE TABLE course_arrange (Teacher_ID NUMBER);"
      }
    ],
    [
      {
        "question": "Show all the teacher names.",
        "query": "SELECT name FROM teacher",
        "schema": "CREATE TABLE teacher (Teacher_ID NUMBER, Name TEXT);"
      },
      {
        "question": "Show names of teachers and the number of courses they teach.",
        "query": "SELECT t2.name , count(*) FROM course_arrange AS t1 JOIN teacher AS t2 ON t1.teacher_id = t2.teacher_id GROUP BY t2.name",
        "schema": "CREATE TABLE course (Course_ID NUMBER); CREATE TABLE teacher (Teacher_ID NUMBER, Name TEXT); CREATE TABLE course_arrange (Teacher_ID NUMBER);"
      },
      {
        "question": "Show the names of teachers who teach at least two courses.",
        "query": "SELECT t2.name FROM course_arrange AS t1 JOIN teacher AS t2 ON t1.teacher_id = t2.teacher_id GROUP BY t2.name HAVING count(*) >= 2",
        "schema": "CREATE TABLE course (Course_ID NUMBER); CREATE TABLE teacher (Teacher_ID NUMBER, Name TEXT); CREATE TABLE course_arrange (Teacher_ID NUMBER);"
      }
    ]
  ],
  "real_estate_properties": [
    [
      {
        "question": "Show all the available features.",
        "query": "SELECT * FROM other_available_features",
        "schema": "CREATE TABLE Ref_Feature_Types (feature_type_code TEXT); CREATE TABLE Other_Available_Features (feature_id NUMBER, feature_type_code TEXT, feature_name TEXT); CREATE TABLE Properties (hse_feature_2 TEXT); CREATE TABLE Other_Property_Features (property_id NUMBER, feature_id NUMBER);"
      },
      {
        "question": "How many available features are there?",
        "query": "SELECT count(*) FROM other_available_features",
        "schema": "CREATE TABLE Ref_Feature_Types (feature_type_code TEXT); CREATE TABLE Other_Available_Features (feature_id NUMBER, feature_type_code TEXT, feature_name TEXT); CREATE TABLE Properties (hse_feature_2 TEXT); CREATE TABLE Other_Property_Features (property_id NUMBER, feature_id NUMBER);"
      }
    ],
    [
      {
        "question": "Find the available features with feature name \"AirCon\".",
        "query": "SELECT * FROM other_available_features WHERE feature_name = \"AirCon\"",
        "schema": "CREATE TABLE Ref_Feature_Types (feature_type_code TEXT, feature_type_name TEXT); CREATE TABLE Other_Available_Features (feature_id NUMBER, feature_type_code TEXT, feature_name TEXT); CREATE TABLE Properties (apt_feature_1 TEXT, apt_feature_2 TEXT, apt_feature_3 TEXT, fld_feature_1 TEXT, fld_feature_2 TEXT, fld_feature_3 TEXT, hse_feature_1 TEXT, hse_feature_2 TEXT, hse_feature_3 TEXT, oth_feature_1 TEXT, oth_feature_2 TEXT, oth_feature_3 TEXT, shp_feature_1 TEXT, shp_feature_2 TEXT, shp_feature_3 TEXT); CREATE TABLE Other_Property_Features (property_id NUMBER, feature_id NUMBER);"
      },
      {
        "question": "What is the feature type name?",
        "query": "SELECT t2.feature_type_name FROM other_available_features AS t1 JOIN ref_feature_types AS t2 ON t1.feature_type_code = t2.feature_type_code WHERE t1.feature_name = \"AirCon\"",
        "schema": "CREATE TABLE Ref_Feature_Types (feature_type_code TEXT, feature_type_name TEXT); CREATE TABLE Other_Available_Features (feature_id NUMBER, feature_type_code TEXT, feature_name TEXT); CREATE TABLE Properties (apt_feature_1 TEXT, apt_feature_2 TEXT, apt_feature_3 TEXT, fld_feature_1 TEXT, fld_feature_2 TEXT, fld_feature_3 TEXT, hse_feature_1 TEXT, hse_feature_2 TEXT, hse_feature_3 TEXT, oth_feature_1 TEXT, oth_feature_2 TEXT, oth_feature_3 TEXT, shp_feature_1 TEXT, shp_feature_2 TEXT, shp_feature_3 TEXT); CREATE TABLE Other_Property_Features (property_id NUMBER, feature_id NUMBER);"
      }
    ],
    [
      {
        "question": "What is the property type description of each property?",
        "query": "SELECT t2.property_type_description FROM properties AS t1 JOIN ref_property_types AS t2 ON t1.property_type_code = t2.property_type_code",
        "schema": "CREATE TABLE Ref_Property_Types (property_type_code TEXT, property_type_description TEXT); CREATE TABLE Properties (property_type_code TEXT);"
      },
      {
        "question": "Show the property type descriptions of properties for each property type code.",
        "query": "SELECT t2.property_type_description FROM properties AS t1 JOIN ref_property_types AS t2 ON t1.property_type_code = t2.property_type_code GROUP BY t1.property_type_code",
        "schema": "CREATE TABLE Ref_Property_Types (property_type_code TEXT, property_type_description TEXT); CREATE TABLE Properties (property_type_code TEXT);"
      }
    ]
  ],
  "voter_1": [
    [
      {
        "question": "Show all area codes and states.",
        "query": "SELECT * FROM area_code_state",
        "schema": "CREATE TABLE AREA_CODE_STATE (area_code NUMBER, state TEXT);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT count(*) FROM area_code_state",
        "schema": "CREATE TABLE AREA_CODE_STATE (area_code NUMBER, state TEXT);"
      }
    ],
    [
      {
        "question": "Show all info about contestants.",
        "query": "SELECT * FROM contestants",
        "schema": "CREATE TABLE CONTESTANTS (contestant_number NUMBER, contestant_name TEXT);"
      },
      {
        "question": "What are their names?",
        "query": "SELECT contestant_name FROM contestants",
        "schema": "CREATE TABLE CONTESTANTS (contestant_number NUMBER, contestant_name TEXT);"
      },
      {
        "question": "Can you also show contestant numbers?",
        "query": "SELECT contestant_number , contestant_name FROM contestants",
        "schema": "CREATE TABLE CONTESTANTS (contestant_number NUMBER, contestant_name TEXT); CREATE TABLE VOTES (contestant_number NUMBER);"
      },
      {
        "question": "Can you sort them ordered in descending order of contestant name?",
        "query": "SELECT contestant_number , contestant_name FROM contestants ORDER BY contestant_name DESC",
        "schema": "CREATE TABLE CONTESTANTS (contestant_number NUMBER, contestant_name TEXT); CREATE TABLE VOTES (contestant_number NUMBER);"
      }
    ],
    [
      {
        "question": "Show all info about votes.",
        "query": "SELECT * FROM votes",
        "schema": "CREATE TABLE VOTES (vote_id NUMBER);"
      },
      {
        "question": "Also provide vote ids.",
        "query": "SELECT * FROM votes",
        "schema": "CREATE TABLE VOTES (vote_id NUMBER, state TEXT);"
      },
      {
        "question": "Also show phone numbers.",
        "query": "SELECT * FROM votes",
        "schema": "CREATE TABLE VOTES (vote_id NUMBER, phone_number NUMBER, state TEXT);"
      }
    ],
    [
      {
        "question": "Show all area codes.",
        "query": "SELECT area_code FROM area_code_state",
        "schema": "CREATE TABLE AREA_CODE_STATE (area_code NUMBER, state TEXT);"
      },
      {
        "question": "What is the largest one?",
        "query": "SELECT max(area_code) FROM area_code_state",
        "schema": "CREATE TABLE AREA_CODE_STATE (area_code NUMBER, state TEXT);"
      },
      {
        "question": "How about smallest one?",
        "query": "SELECT min(area_code) FROM area_code_state",
        "schema": "CREATE TABLE AREA_CODE_STATE (area_code NUMBER, state TEXT);"
      },
      {
        "question": "Give me both.",
        "query": "SELECT max(area_code) , min(area_code) FROM area_code_state",
        "schema": "CREATE TABLE AREA_CODE_STATE (area_code NUMBER, state TEXT);"
      }
    ],
    [
      {
        "question": "Show all votes.",
        "query": "SELECT * FROM votes",
        "schema": "CREATE TABLE VOTES (vote_id NUMBER, contestant_number NUMBER);"
      },
      {
        "question": "Which ones are from the state 'CA'?",
        "query": "SELECT * FROM votes WHERE state = 'CA'",
        "schema": "CREATE TABLE AREA_CODE_STATE (state TEXT); CREATE TABLE VOTES (vote_id NUMBER, state TEXT, contestant_number NUMBER);"
      },
      {
        "question": "Among those, can you give me the last date created?",
        "query": "SELECT max(created) FROM votes WHERE state = 'CA'",
        "schema": "CREATE TABLE AREA_CODE_STATE (state TEXT); CREATE TABLE VOTES (vote_id NUMBER, state TEXT, contestant_number NUMBER, created TIME);"
      }
    ],
    [
      {
        "question": "Show all contestants.",
        "query": "SELECT * FROM contestants",
        "schema": "CREATE TABLE CONTESTANTS (contestant_number NUMBER, contestant_name TEXT);"
      },
      {
        "question": "What are their names?",
        "query": "SELECT contestant_name FROM contestants",
        "schema": "CREATE TABLE CONTESTANTS (contestant_number NUMBER, contestant_name TEXT);"
      },
      {
        "question": "Can you not include the name 'Jessie Alloway'?",
        "query": "SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'",
        "schema": "CREATE TABLE CONTESTANTS (contestant_number NUMBER, contestant_name TEXT);"
      }
    ],
    [
      {
        "question": "Show all votes?",
        "query": "SELECT * FROM votes",
        "schema": "CREATE TABLE VOTES (vote_id NUMBER, contestant_number NUMBER);"
      },
      {
        "question": "Among these, what is the list of states?",
        "query": "SELECT state FROM votes",
        "schema": "CREATE TABLE AREA_CODE_STATE (state TEXT); CREATE TABLE VOTES (vote_id NUMBER, state TEXT, contestant_number NUMBER);"
      },
      {
        "question": "What are the distinct states and create time?",
        "query": "SELECT DISTINCT state , created FROM votes",
        "schema": "CREATE TABLE AREA_CODE_STATE (state TEXT); CREATE TABLE VOTES (vote_id NUMBER, state TEXT, contestant_number NUMBER, created TIME);"
      }
    ],
    [
      {
        "question": "Show all the contestants.",
        "query": "SELECT * FROM contestants",
        "schema": "CREATE TABLE CONTESTANTS (contestant_number NUMBER, contestant_name TEXT); CREATE TABLE VOTES (contestant_number NUMBER);"
      },
      {
        "question": "Show all the votes.",
        "query": "SELECT * FROM votes",
        "schema": "CREATE TABLE CONTESTANTS (contestant_number NUMBER, contestant_name TEXT); CREATE TABLE VOTES (vote_id NUMBER, contestant_number NUMBER);"
      },
      {
        "question": "Can you show contestants with at least two votes?",
        "query": "SELECT * FROM contestants AS t1 JOIN votes AS t2 ON t1.contestant_number = t2.contestant_number GROUP BY t1.contestant_number HAVING count(*) >= 2",
        "schema": "CREATE TABLE CONTESTANTS (contestant_number NUMBER, contestant_name TEXT); CREATE TABLE VOTES (vote_id NUMBER, contestant_number NUMBER);"
      },
      {
        "question": "What are their contestant numbers and names?",
        "query": "SELECT t1.contestant_number , t1.contestant_name FROM contestants AS t1 JOIN votes AS t2 ON t1.contestant_number = t2.contestant_number GROUP BY t1.contestant_number HAVING count(*) >= 2",
        "schema": "CREATE TABLE CONTESTANTS (contestant_number NUMBER, contestant_name TEXT); CREATE TABLE VOTES (vote_id NUMBER, contestant_number NUMBER);"
      }
    ],
    [
      {
        "question": "Show all the contestants.",
        "query": "SELECT * FROM contestants",
        "schema": "CREATE TABLE CONTESTANTS (contestant_number NUMBER, contestant_name TEXT); CREATE TABLE VOTES (contestant_number NUMBER);"
      },
      {
        "question": "Show all the votes.",
        "query": "SELECT * FROM votes",
        "schema": "CREATE TABLE CONTESTANTS (contestant_number NUMBER, contestant_name TEXT); CREATE TABLE VOTES (vote_id NUMBER, contestant_number NUMBER);"
      },
      {
        "question": "Can you show the contestant with the least votes?",
        "query": "SELECT * FROM contestants AS t1 JOIN votes AS t2 ON t1.contestant_number = t2.contestant_number GROUP BY t1.contestant_number ORDER BY count(*) ASC LIMIT 1",
        "schema": "CREATE TABLE CONTESTANTS (contestant_number NUMBER, contestant_name TEXT); CREATE TABLE VOTES (vote_id NUMBER, contestant_number NUMBER);"
      },
      {
        "question": "What is his or her contestant number and contestant name?",
        "query": "SELECT t1.contestant_number , t1.contestant_name FROM contestants AS t1 JOIN votes AS t2 ON t1.contestant_number = t2.contestant_number GROUP BY t1.contestant_number ORDER BY count(*) ASC LIMIT 1",
        "schema": "CREATE TABLE CONTESTANTS (contestant_number NUMBER, contestant_name TEXT); CREATE TABLE VOTES (vote_id NUMBER, contestant_number NUMBER);"
      }
    ],
    [
      {
        "question": "Show all votes.",
        "query": "SELECT * FROM votes",
        "schema": "CREATE TABLE VOTES (vote_id NUMBER, contestant_number NUMBER);"
      },
      {
        "question": "What about those from state 'NY' or 'CA'?",
        "query": "SELECT * FROM votes WHERE state = 'NY' OR state = 'CA'",
        "schema": "CREATE TABLE AREA_CODE_STATE (state TEXT); CREATE TABLE VOTES (vote_id NUMBER, state TEXT, contestant_number NUMBER);"
      },
      {
        "question": "Give me the count of these votes.",
        "query": "SELECT count(*) FROM votes WHERE state = 'NY' OR state = 'CA'",
        "schema": "CREATE TABLE AREA_CODE_STATE (state TEXT); CREATE TABLE VOTES (vote_id NUMBER, state TEXT, contestant_number NUMBER);"
      }
    ],
    [
      {
        "question": "Show all contestants",
        "query": "SELECT * FROM contestants",
        "schema": "CREATE TABLE CONTESTANTS (contestant_number NUMBER, contestant_name TEXT);"
      },
      {
        "question": "Which contestants did not get any votes?",
        "query": "SELECT * FROM contestants WHERE contestant_number NOT IN ( SELECT contestant_number FROM votes )",
        "schema": "CREATE TABLE CONTESTANTS (contestant_number NUMBER, contestant_name TEXT); CREATE TABLE VOTES (vote_id NUMBER, contestant_number NUMBER);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT count(*) FROM contestants WHERE contestant_number NOT IN ( SELECT contestant_number FROM votes )",
        "schema": "CREATE TABLE CONTESTANTS (contestant_number NUMBER, contestant_name TEXT); CREATE TABLE VOTES (vote_id NUMBER, contestant_number NUMBER);"
      }
    ],
    [
      {
        "question": "Show all area codes and states.",
        "query": "SELECT * FROM area_code_state",
        "schema": "CREATE TABLE AREA_CODE_STATE (area_code NUMBER, state TEXT);"
      },
      {
        "question": "Show all votes.",
        "query": "SELECT * FROM votes",
        "schema": "CREATE TABLE AREA_CODE_STATE (area_code NUMBER, state TEXT); CREATE TABLE VOTES (vote_id NUMBER, state TEXT);"
      },
      {
        "question": "Get the count of votes for each area code.",
        "query": "SELECT count(*) FROM area_code_state AS t1 JOIN votes AS t2 ON t1.state = t2.state GROUP BY t1.area_code",
        "schema": "CREATE TABLE AREA_CODE_STATE (area_code NUMBER, state TEXT); CREATE TABLE VOTES (vote_id NUMBER, state TEXT);"
      },
      {
        "question": "What is the area code in which the most voters voted?",
        "query": "SELECT t1.area_code FROM area_code_state AS t1 JOIN votes AS t2 ON t1.state = t2.state GROUP BY t1.area_code ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE AREA_CODE_STATE (area_code NUMBER, state TEXT); CREATE TABLE VOTES (vote_id NUMBER, state TEXT);"
      }
    ],
    [
      {
        "question": "Show all votes.",
        "query": "SELECT * FROM votes",
        "schema": "CREATE TABLE VOTES (vote_id NUMBER, contestant_number NUMBER);"
      },
      {
        "question": "Show those that were for the contestant named 'Tabatha Gehling'.",
        "query": "SELECT * FROM contestants AS t1 JOIN votes AS t2 ON t1.contestant_number = t2.contestant_number WHERE t1.contestant_name = 'Tabatha Gehling'",
        "schema": "CREATE TABLE CONTESTANTS (contestant_number NUMBER, contestant_name TEXT); CREATE TABLE VOTES (vote_id NUMBER, contestant_number NUMBER);"
      },
      {
        "question": "What are the create dates, states, and phone numbers of these votes?",
        "query": "SELECT t2.created , t2.state , t2.phone_number FROM contestants AS t1 JOIN votes AS t2 ON t1.contestant_number = t2.contestant_number WHERE t1.contestant_name = 'Tabatha Gehling'",
        "schema": "CREATE TABLE CONTESTANTS (contestant_number NUMBER, contestant_name TEXT); CREATE TABLE VOTES (vote_id NUMBER, phone_number NUMBER, state TEXT, contestant_number NUMBER, created TIME);"
      }
    ],
    [
      {
        "question": "Show all area codes.",
        "query": "SELECT * FROM area_code_state",
        "schema": "CREATE TABLE AREA_CODE_STATE (area_code NUMBER, state TEXT);"
      },
      {
        "question": "Can you tell me area codes in which voters voted for the contestant 'Tabatha Gehling'?",
        "query": "SELECT t3.area_code FROM contestants AS t1 JOIN votes AS t2 ON t1.contestant_number = t2.contestant_number JOIN area_code_state AS t3 ON t2.state = t3.state WHERE t1.contestant_name = 'Tabatha Gehling'",
        "schema": "CREATE TABLE AREA_CODE_STATE (area_code NUMBER, state TEXT); CREATE TABLE CONTESTANTS (contestant_number NUMBER, contestant_name TEXT); CREATE TABLE VOTES (vote_id NUMBER, state TEXT, contestant_number NUMBER);"
      },
      {
        "question": "How about both the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'?",
        "query": "SELECT t3.area_code FROM contestants AS t1 JOIN votes AS t2 ON t1.contestant_number = t2.contestant_number JOIN area_code_state AS t3 ON t2.state = t3.state WHERE t1.contestant_name = 'Tabatha Gehling' INTERSECT SELECT t3.area_code FROM contestants AS t1 JOIN votes AS t2 ON t1.contestant_number = t2.contestant_number JOIN area_code_state AS t3 ON t2.state = t3.state WHERE t1.contestant_name = 'Kelly Clauss'",
        "schema": "CREATE TABLE AREA_CODE_STATE (area_code NUMBER, state TEXT); CREATE TABLE CONTESTANTS (contestant_number NUMBER, contestant_name TEXT); CREATE TABLE VOTES (vote_id NUMBER, state TEXT, contestant_number NUMBER);"
      }
    ]
  ],
  "student_transcripts_tracking": [
    [
      {
        "question": "Give me the description of the department that offers the most number of degrees.",
        "query": "SELECT t2.department_description , t1.department_id FROM degree_programs AS t1 JOIN departments AS t2 ON t1.department_id = t2.department_id GROUP BY t1.department_id ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Courses (course_description TEXT); CREATE TABLE Departments (department_id NUMBER, department_name TEXT, department_description TEXT); CREATE TABLE Degree_Programs (degree_program_id NUMBER, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT); CREATE TABLE Sections (section_description TEXT);"
      },
      {
        "question": "What's the name and id of that department?",
        "query": "SELECT t2.department_name , t1.department_id FROM degree_programs AS t1 JOIN departments AS t2 ON t1.department_id = t2.department_id GROUP BY t1.department_id ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Courses (course_description TEXT); CREATE TABLE Departments (department_id NUMBER, department_name TEXT, department_description TEXT); CREATE TABLE Degree_Programs (degree_program_id NUMBER, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT); CREATE TABLE Sections (section_description TEXT);"
      }
    ],
    [
      {
        "question": "Show me all the degrees offered by the engineering department.",
        "query": "SELECT * FROM departments AS t1 JOIN degree_programs AS t2 ON t1.department_id = t2.department_id WHERE t1.department_name = 'engineer'",
        "schema": "CREATE TABLE Courses (course_name TEXT); CREATE TABLE Departments (department_id NUMBER, department_name TEXT); CREATE TABLE Degree_Programs (degree_program_id NUMBER, department_id NUMBER, degree_summary_name TEXT);"
      },
      {
        "question": "How many are there?",
        "query": "SELECT count(*) FROM departments AS t1 JOIN degree_programs AS t2 ON t1.department_id = t2.department_id WHERE t1.department_name = 'engineer'",
        "schema": "CREATE TABLE Courses (course_name TEXT); CREATE TABLE Departments (department_id NUMBER, department_name TEXT); CREATE TABLE Degree_Programs (degree_program_id NUMBER, department_id NUMBER, degree_summary_name TEXT);"
      }
    ],
    [
      {
        "question": "Show me courses that have exactly 2 sections.",
        "query": "SELECT * FROM courses AS t1 JOIN sections AS t2 ON t1.course_id = t2.course_id GROUP BY t1.course_id HAVING count(*) = 2",
        "schema": "CREATE TABLE Courses (course_id NUMBER, course_name TEXT); CREATE TABLE Sections (section_id NUMBER, course_id NUMBER, section_name TEXT);"
      },
      {
        "question": "Show me names and ids for courses that have at most 2 sections.",
        "query": "SELECT t1.course_name , t1.course_id FROM courses AS t1 JOIN sections AS t2 ON t1.course_id = t2.course_id GROUP BY t1.course_id HAVING count(*) <= 2",
        "schema": "CREATE TABLE Courses (course_id NUMBER, course_name TEXT); CREATE TABLE Sections (section_id NUMBER, course_id NUMBER, section_name TEXT);"
      }
    ],
    [
      {
        "question": "Which semester did the least number of students register? Give me its name and id.",
        "query": "SELECT t1.semester_name , t1.semester_id FROM semesters AS t1 JOIN student_enrolment AS t2 ON t1.semester_id = t2.semester_id GROUP BY t1.semester_id ORDER BY count(*) ASC LIMIT 1",
        "schema": "CREATE TABLE Courses (course_id NUMBER); CREATE TABLE Departments (department_id NUMBER, department_name TEXT); CREATE TABLE Semesters (semester_id NUMBER, semester_name TEXT); CREATE TABLE Students (student_id NUMBER, first_name TEXT, last_name TEXT); CREATE TABLE Student_Enrolment (semester_id NUMBER, student_id NUMBER);"
      },
      {
        "question": "How about the semester that most number of students registered?",
        "query": "SELECT t1.semester_name , t1.semester_id FROM semesters AS t1 JOIN student_enrolment AS t2 ON t1.semester_id = t2.semester_id GROUP BY t1.semester_id ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Courses (course_id NUMBER); CREATE TABLE Departments (department_id NUMBER, department_name TEXT); CREATE TABLE Semesters (semester_id NUMBER, semester_name TEXT); CREATE TABLE Students (student_id NUMBER, first_name TEXT, last_name TEXT); CREATE TABLE Student_Enrolment (student_enrolment_id NUMBER, semester_id NUMBER, student_id NUMBER); CREATE TABLE Student_Enrolment_Courses (student_enrolment_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show me all department names that contain the word \"computer\"",
        "query": "SELECT * FROM departments WHERE department_name LIKE '%computer%'",
        "schema": "CREATE TABLE Courses (course_name TEXT); CREATE TABLE Departments (department_id NUMBER, department_name TEXT);"
      },
      {
        "question": "Show me their descriptions.",
        "query": "SELECT department_description FROM departments WHERE department_name LIKE '%computer%'",
        "schema": "CREATE TABLE Courses (course_name TEXT, course_description TEXT); CREATE TABLE Departments (department_id NUMBER, department_name TEXT, department_description TEXT);"
      }
    ],
    [
      {
        "question": "How many people are enrolled in 2 degree programs in one semester?",
        "query": "SELECT count(*) FROM students AS t1 JOIN student_enrolment AS t2 ON t1.student_id = t2.student_id GROUP BY t1.student_id HAVING count(*) = 2",
        "schema": "CREATE TABLE Courses (course_id NUMBER); CREATE TABLE Degree_Programs (degree_program_id NUMBER, department_id NUMBER); CREATE TABLE Semesters (semester_id NUMBER, semester_name TEXT); CREATE TABLE Student_Enrolment (student_enrolment_id NUMBER, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER); CREATE TABLE Student_Enrolment_Courses (student_course_id NUMBER, course_id NUMBER, student_enrolment_id NUMBER);"
      },
      {
        "question": "Show me their first, middle, and last names.",
        "query": "SELECT t1.first_name , t1.middle_name , t1.last_name , t1.student_id FROM students AS t1 JOIN student_enrolment AS t2 ON t1.student_id = t2.student_id GROUP BY t1.student_id HAVING count(*) = 2",
        "schema": "CREATE TABLE Courses (course_id NUMBER); CREATE TABLE Degree_Programs (degree_program_id NUMBER, department_id NUMBER); CREATE TABLE Semesters (semester_id NUMBER, semester_name TEXT); CREATE TABLE Students (student_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT); CREATE TABLE Student_Enrolment (student_enrolment_id NUMBER, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER); CREATE TABLE Student_Enrolment_Courses (student_course_id NUMBER, course_id NUMBER, student_enrolment_id NUMBER);"
      }
    ],
    [
      {
        "question": "How many people are enrolled in the Bachelor degree program?",
        "query": "SELECT DISTINCT count(*) FROM students AS t1 JOIN student_enrolment AS t2 ON t1.student_id = t2.student_id JOIN degree_programs AS t3 ON t2.degree_program_id = t3.degree_program_id WHERE t3.degree_summary_name = 'Bachelor'",
        "schema": "CREATE TABLE Courses (course_id NUMBER); CREATE TABLE Degree_Programs (degree_program_id NUMBER, department_id NUMBER, degree_summary_name TEXT); CREATE TABLE Students (student_id NUMBER); CREATE TABLE Student_Enrolment (student_enrolment_id NUMBER, degree_program_id NUMBER, student_id NUMBER); CREATE TABLE Student_Enrolment_Courses (student_course_id NUMBER, course_id NUMBER, student_enrolment_id NUMBER);"
      },
      {
        "question": "What are their first, middle, and last names?",
        "query": "SELECT DISTINCT t1.first_name , t1.middle_name , t1.last_name FROM students AS t1 JOIN student_enrolment AS t2 ON t1.student_id = t2.student_id JOIN degree_programs AS t3 ON t2.degree_program_id = t3.degree_program_id WHERE t3.degree_summary_name = 'Bachelor'",
        "schema": "CREATE TABLE Courses (course_id NUMBER); CREATE TABLE Degree_Programs (degree_program_id NUMBER, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT); CREATE TABLE Students (student_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT); CREATE TABLE Student_Enrolment (student_enrolment_id NUMBER, degree_program_id NUMBER, student_id NUMBER); CREATE TABLE Student_Enrolment_Courses (student_course_id NUMBER, course_id NUMBER, student_enrolment_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show me the descriptions of programs with 3 highest number of enrolled students.",
        "query": "SELECT t1.degree_summary_description FROM degree_programs AS t1 JOIN student_enrolment AS t2 ON t1.degree_program_id = t2.degree_program_id GROUP BY t1.degree_summary_name ORDER BY count(*) DESC LIMIT 3",
        "schema": "CREATE TABLE Courses (course_id NUMBER, course_description TEXT); CREATE TABLE Degree_Programs (degree_summary_description TEXT); CREATE TABLE Student_Enrolment (student_enrolment_id NUMBER, degree_program_id NUMBER); CREATE TABLE Student_Enrolment_Courses (student_course_id NUMBER, course_id NUMBER, student_enrolment_id NUMBER);"
      },
      {
        "question": "Show me the name of program with the most enrolled students.",
        "query": "SELECT t1.degree_summary_name FROM degree_programs AS t1 JOIN student_enrolment AS t2 ON t1.degree_program_id = t2.degree_program_id GROUP BY t1.degree_summary_name ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Courses (course_id NUMBER, course_description TEXT); CREATE TABLE Degree_Programs (degree_program_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT); CREATE TABLE Student_Enrolment (student_enrolment_id NUMBER, degree_program_id NUMBER); CREATE TABLE Student_Enrolment_Courses (student_course_id NUMBER, course_id NUMBER, student_enrolment_id NUMBER);"
      }
    ],
    [
      {
        "question": "What is the description of the program that has the least number of enrolled students?",
        "query": "SELECT t1.degree_summary_description FROM degree_programs AS t1 JOIN student_enrolment AS t2 ON t1.degree_program_id = t2.degree_program_id GROUP BY t1.degree_program_id ORDER BY count(*) ASC LIMIT 1",
        "schema": "CREATE TABLE Courses (course_id NUMBER, course_description TEXT); CREATE TABLE Degree_Programs (degree_program_id NUMBER, degree_summary_description TEXT); CREATE TABLE Sections (course_id NUMBER); CREATE TABLE Student_Enrolment (student_enrolment_id NUMBER, degree_program_id NUMBER); CREATE TABLE Student_Enrolment_Courses (student_course_id NUMBER, course_id NUMBER, student_enrolment_id NUMBER);"
      },
      {
        "question": "How about the program that has the most number of enrolled students?",
        "query": "SELECT t1.degree_summary_description FROM degree_programs AS t1 JOIN student_enrolment AS t2 ON t1.degree_program_id = t2.degree_program_id GROUP BY t1.degree_program_id ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Courses (course_id NUMBER, course_description TEXT); CREATE TABLE Degree_Programs (degree_program_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT); CREATE TABLE Sections (course_id NUMBER); CREATE TABLE Student_Enrolment (student_enrolment_id NUMBER, degree_program_id NUMBER); CREATE TABLE Student_Enrolment_Courses (student_course_id NUMBER, course_id NUMBER, student_enrolment_id NUMBER);"
      },
      {
        "question": "Show me the id and summary.",
        "query": "SELECT t1.degree_program_id , t1.degree_summary_name FROM degree_programs AS t1 JOIN student_enrolment AS t2 ON t1.degree_program_id = t2.degree_program_id GROUP BY t1.degree_program_id ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Courses (course_id NUMBER, course_description TEXT); CREATE TABLE Degree_Programs (degree_program_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT); CREATE TABLE Sections (course_id NUMBER); CREATE TABLE Students (student_id NUMBER); CREATE TABLE Student_Enrolment (student_enrolment_id NUMBER, degree_program_id NUMBER, student_id NUMBER); CREATE TABLE Student_Enrolment_Courses (student_course_id NUMBER, course_id NUMBER, student_enrolment_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show me the id, first and last names of top 3 students who have enrolled for the most times in any program.",
        "query": "SELECT t1.student_id , t1.first_name , t1.middle_name , t1.last_name , count(*) , t1.student_id FROM students AS t1 JOIN student_enrolment AS t2 ON t1.student_id = t2.student_id GROUP BY t1.student_id ORDER BY count(*) DESC LIMIT 3",
        "schema": "CREATE TABLE Students (student_id NUMBER, first_name TEXT, last_name TEXT, ssn TEXT); CREATE TABLE Student_Enrolment (student_enrolment_id NUMBER, student_id NUMBER); CREATE TABLE Student_Enrolment_Courses (student_course_id NUMBER, course_id NUMBER, student_enrolment_id NUMBER);"
      },
      {
        "question": "Show me just the top 1.",
        "query": "SELECT t1.student_id , t1.first_name , t1.middle_name , t1.last_name , count(*) , t1.student_id FROM students AS t1 JOIN student_enrolment AS t2 ON t1.student_id = t2.student_id GROUP BY t1.student_id ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Students (student_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, ssn TEXT); CREATE TABLE Student_Enrolment (student_enrolment_id NUMBER, student_id NUMBER); CREATE TABLE Student_Enrolment_Courses (student_course_id NUMBER, course_id NUMBER, student_enrolment_id NUMBER);"
      }
    ],
    [
      {
        "question": "Give me the description of a semester with no enrolled students.",
        "query": "SELECT semester_description FROM semesters WHERE semester_id NOT IN( SELECT semester_id FROM student_enrolment )",
        "schema": "CREATE TABLE Courses (course_id NUMBER, course_description TEXT); CREATE TABLE Sections (course_id NUMBER, section_description TEXT); CREATE TABLE Semesters (semester_id NUMBER, semester_name TEXT, semester_description TEXT); CREATE TABLE Student_Enrolment (student_enrolment_id NUMBER, semester_id NUMBER); CREATE TABLE Student_Enrolment_Courses (student_course_id NUMBER, course_id NUMBER, student_enrolment_id NUMBER);"
      },
      {
        "question": "What's the name of that semester?",
        "query": "SELECT semester_name FROM semesters WHERE semester_id NOT IN( SELECT semester_id FROM student_enrolment )",
        "schema": "CREATE TABLE Courses (course_id NUMBER, course_description TEXT); CREATE TABLE Sections (course_id NUMBER, section_description TEXT); CREATE TABLE Semesters (semester_id NUMBER, semester_name TEXT, semester_description TEXT); CREATE TABLE Students (student_id NUMBER, first_name TEXT); CREATE TABLE Student_Enrolment (student_enrolment_id NUMBER, semester_id NUMBER, student_id NUMBER); CREATE TABLE Student_Enrolment_Courses (student_course_id NUMBER, course_id NUMBER, student_enrolment_id NUMBER);"
      }
    ],
    [
      {
        "question": "What's the name of the course with the least number of enrollments?",
        "query": "SELECT t1.course_name FROM courses AS t1 JOIN student_enrolment_courses AS t2 ON t1.course_id = t2.course_id GROUP BY t1.course_name ORDER BY count(*) ASC LIMIT 1",
        "schema": "CREATE TABLE Courses (course_id NUMBER, course_name TEXT); CREATE TABLE Sections (course_id NUMBER, section_name TEXT); CREATE TABLE Student_Enrolment_Courses (student_course_id NUMBER, course_id NUMBER);"
      },
      {
        "question": "How many enrollments does the course with most enrollments have?",
        "query": "SELECT count(*) FROM courses AS t1 JOIN student_enrolment_courses AS t2 ON t1.course_id = t2.course_id GROUP BY t1.course_name ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Courses (course_id NUMBER, course_name TEXT); CREATE TABLE Sections (course_id NUMBER, section_name TEXT); CREATE TABLE Student_Enrolment_Courses (student_course_id NUMBER, course_id NUMBER, student_enrolment_id NUMBER);"
      },
      {
        "question": "What's the name of that course?",
        "query": "SELECT t1.course_name FROM courses AS t1 JOIN student_enrolment_courses AS t2 ON t1.course_id = t2.course_id GROUP BY t1.course_name ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Courses (course_id NUMBER, course_name TEXT); CREATE TABLE Sections (course_id NUMBER, section_name TEXT); CREATE TABLE Student_Enrolment_Courses (student_course_id NUMBER, course_id NUMBER, student_enrolment_id NUMBER);"
      }
    ],
    [
      {
        "question": "How many students currently live in North Carolina?",
        "query": "SELECT count(*) FROM students AS t1 JOIN addresses AS t2 ON t1.current_address_id = t2.address_id WHERE t2.state_province_county = 'NorthCarolina'",
        "schema": "CREATE TABLE Addresses (address_id NUMBER, city TEXT, state_province_county TEXT, country TEXT); CREATE TABLE Students (current_address_id NUMBER, permanent_address_id NUMBER);"
      },
      {
        "question": "How many of those students have not registered in any degree program?",
        "query": "SELECT count(*) FROM students AS t1 JOIN addresses AS t2 ON t1.current_address_id = t2.address_id WHERE t2.state_province_county = 'NorthCarolina' EXCEPT SELECT DISTINCT t3.last_name FROM students AS t3 JOIN student_enrolment AS t4 ON t3.student_id = t4.student_id",
        "schema": "CREATE TABLE Addresses (address_id NUMBER, city TEXT, state_province_county TEXT, country TEXT); CREATE TABLE Students (student_id NUMBER, current_address_id NUMBER, permanent_address_id NUMBER); CREATE TABLE Student_Enrolment (degree_program_id NUMBER, student_id NUMBER);"
      },
      {
        "question": "What are their last names?",
        "query": "SELECT t1.last_name FROM students AS t1 JOIN addresses AS t2 ON t1.current_address_id = t2.address_id WHERE t2.state_province_county = 'NorthCarolina' EXCEPT SELECT DISTINCT t3.last_name FROM students AS t3 JOIN student_enrolment AS t4 ON t3.student_id = t4.student_id",
        "schema": "CREATE TABLE Addresses (address_id NUMBER, city TEXT, state_province_county TEXT, country TEXT); CREATE TABLE Students (student_id NUMBER, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, last_name TEXT); CREATE TABLE Student_Enrolment (student_enrolment_id NUMBER, degree_program_id NUMBER, student_id NUMBER); CREATE TABLE Student_Enrolment_Courses (student_enrolment_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show me date and id of transcripts with exactly 2 course results.",
        "query": "SELECT t2.transcript_date , t1.transcript_id FROM transcript_contents AS t1 JOIN transcripts AS t2 ON t1.transcript_id = t2.transcript_id GROUP BY t1.transcript_id HAVING count(*) = 2",
        "schema": "CREATE TABLE Transcripts (transcript_id NUMBER, transcript_date TIME); CREATE TABLE Transcript_Contents (student_course_id NUMBER, transcript_id NUMBER);"
      },
      {
        "question": "How about transcripts with at least 2 course results?",
        "query": "SELECT t2.transcript_date , t1.transcript_id FROM transcript_contents AS t1 JOIN transcripts AS t2 ON t1.transcript_id = t2.transcript_id GROUP BY t1.transcript_id HAVING count(*) >= 2",
        "schema": "CREATE TABLE Transcripts (transcript_id NUMBER, transcript_date TIME); CREATE TABLE Transcript_Contents (student_course_id NUMBER, transcript_id NUMBER);"
      }
    ],
    [
      {
        "question": "What is the address of the student with first name Timothy and last name Ward?",
        "query": "SELECT current_address_id FROM students WHERE first_name = 'Timmothy' AND last_name = 'Ward'",
        "schema": "CREATE TABLE Addresses (address_id NUMBER); CREATE TABLE Students (student_id NUMBER, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, last_name TEXT);"
      },
      {
        "question": "What's his phone number?",
        "query": "SELECT cell_mobile_number FROM students WHERE first_name = 'Timmothy' AND last_name = 'Ward'",
        "schema": "CREATE TABLE Addresses (address_id NUMBER); CREATE TABLE Students (student_id NUMBER, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, last_name TEXT, cell_mobile_number TEXT);"
      }
    ],
    [
      {
        "question": "Who was the last student to register? Show me the first, middle, and last names of that student.",
        "query": "SELECT first_name , middle_name , last_name FROM students ORDER BY date_first_registered DESC LIMIT 1",
        "schema": "CREATE TABLE Students (student_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT);"
      },
      {
        "question": "Who was the first to register?",
        "query": "SELECT first_name , middle_name , last_name FROM students ORDER BY date_first_registered ASC LIMIT 1",
        "schema": "CREATE TABLE Students (student_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, date_first_registered TIME);"
      }
    ],
    [
      {
        "question": "Who is the least recent graduate of the school? List the first, middle, and last names.",
        "query": "SELECT first_name , middle_name , last_name FROM students ORDER BY date_left DESC LIMIT 1",
        "schema": "CREATE TABLE Students (first_name TEXT, middle_name TEXT, last_name TEXT);"
      },
      {
        "question": "Who is the earliest graduate of the school?",
        "query": "SELECT first_name , middle_name , last_name FROM students ORDER BY date_left ASC LIMIT 1",
        "schema": "CREATE TABLE Students (first_name TEXT, middle_name TEXT, last_name TEXT, date_left TIME);"
      }
    ],
    [
      {
        "question": "Give me the id of the address that holds the most number of students?",
        "query": "SELECT t1.address_id FROM addresses AS t1 JOIN students AS t2 ON t1.address_id = t2.current_address_id GROUP BY t1.address_id ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Addresses (address_id NUMBER); CREATE TABLE Students (current_address_id NUMBER, permanent_address_id NUMBER);"
      },
      {
        "question": "How many students live there?",
        "query": "SELECT count(*) FROM addresses AS t1 JOIN students AS t2 ON t1.address_id = t2.current_address_id GROUP BY t1.address_id ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Addresses (address_id NUMBER); CREATE TABLE Students (current_address_id NUMBER, permanent_address_id NUMBER);"
      },
      {
        "question": "Give me all the lines as well as the id of that address.",
        "query": "SELECT t1.address_id , t1.line_1 , t1.line_2 FROM addresses AS t1 JOIN students AS t2 ON t1.address_id = t2.current_address_id GROUP BY t1.address_id ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, line_3 TEXT); CREATE TABLE Students (current_address_id NUMBER, permanent_address_id NUMBER);"
      }
    ],
    [
      {
        "question": "Give me details of the first transcript released.",
        "query": "SELECT other_details FROM transcripts ORDER BY transcript_date ASC LIMIT 1",
        "schema": "CREATE TABLE Transcripts (transcript_id NUMBER, transcript_date TIME, other_details TEXT); CREATE TABLE Transcript_Contents (transcript_id NUMBER);"
      },
      {
        "question": "Tell me when it was released as well, along with its details.",
        "query": "SELECT transcript_date , other_details FROM transcripts ORDER BY transcript_date ASC LIMIT 1",
        "schema": "CREATE TABLE Transcripts (transcript_id NUMBER, transcript_date TIME, other_details TEXT); CREATE TABLE Transcript_Contents (transcript_id NUMBER);"
      }
    ],
    [
      {
        "question": "What is the oldest transcript release date?",
        "query": "SELECT transcript_date FROM transcripts ORDER BY transcript_date ASC LIMIT 1",
        "schema": "CREATE TABLE Transcripts (transcript_id NUMBER, transcript_date TIME); CREATE TABLE Transcript_Contents (transcript_id NUMBER);"
      },
      {
        "question": "How about the latest?",
        "query": "SELECT transcript_date FROM transcripts ORDER BY transcript_date DESC LIMIT 1",
        "schema": "CREATE TABLE Transcripts (transcript_id NUMBER, transcript_date TIME); CREATE TABLE Transcript_Contents (transcript_id NUMBER);"
      }
    ],
    [
      {
        "question": "How many times, at minimum, can a course enrollment result show in different transcript? Show me the course enrollment id.",
        "query": "SELECT count(*) , student_course_id FROM transcript_contents GROUP BY student_course_id ORDER BY count(*) ASC LIMIT 1",
        "schema": "CREATE TABLE Courses (course_id NUMBER); CREATE TABLE Sections (course_id NUMBER); CREATE TABLE Student_Enrolment_Courses (student_course_id NUMBER, course_id NUMBER); CREATE TABLE Transcripts (transcript_id NUMBER); CREATE TABLE Transcript_Contents (student_course_id NUMBER, transcript_id NUMBER);"
      },
      {
        "question": "How many times at most?",
        "query": "SELECT count(*) , student_course_id FROM transcript_contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Courses (course_id NUMBER); CREATE TABLE Sections (course_id NUMBER); CREATE TABLE Students (student_id NUMBER); CREATE TABLE Student_Enrolment_Courses (student_course_id NUMBER, course_id NUMBER); CREATE TABLE Transcripts (transcript_id NUMBER); CREATE TABLE Transcript_Contents (student_course_id NUMBER, transcript_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show other details of the transcript with least number of results.",
        "query": "SELECT t2.other_details FROM transcript_contents AS t1 JOIN transcripts AS t2 ON t1.transcript_id = t2.transcript_id GROUP BY t1.transcript_id ORDER BY count(*) ASC LIMIT 1",
        "schema": "CREATE TABLE Courses (course_id NUMBER, other_details TEXT); CREATE TABLE Sections (other_details TEXT); CREATE TABLE Transcripts (transcript_id NUMBER, other_details TEXT); CREATE TABLE Transcript_Contents (student_course_id NUMBER, transcript_id NUMBER);"
      },
      {
        "question": "Show me the date and id of that transcript.",
        "query": "SELECT t2.transcript_date , t1.transcript_id FROM transcript_contents AS t1 JOIN transcripts AS t2 ON t1.transcript_id = t2.transcript_id GROUP BY t1.transcript_id ORDER BY count(*) ASC LIMIT 1",
        "schema": "CREATE TABLE Courses (course_id NUMBER, other_details TEXT); CREATE TABLE Sections (other_details TEXT); CREATE TABLE Transcripts (transcript_id NUMBER, transcript_date TIME, other_details TEXT); CREATE TABLE Transcript_Contents (student_course_id NUMBER, transcript_id NUMBER);"
      }
    ],
    [
      {
        "question": "Find a semester when there was a Master student enrolled.",
        "query": "SELECT DISTINCT t2.semester_id FROM degree_programs AS t1 JOIN student_enrolment AS t2 ON t1.degree_program_id = t2.degree_program_id WHERE degree_summary_name = 'Master'",
        "schema": "CREATE TABLE Courses (course_id NUMBER); CREATE TABLE Degree_Programs (degree_summary_name TEXT); CREATE TABLE Semesters (semester_id NUMBER, semester_name TEXT); CREATE TABLE Student_Enrolment (student_enrolment_id NUMBER, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER); CREATE TABLE Student_Enrolment_Courses (student_course_id NUMBER, course_id NUMBER, student_enrolment_id NUMBER);"
      },
      {
        "question": "How about a semester when there was a Bachelor student enrolled?",
        "query": "SELECT DISTINCT t2.semester_id FROM degree_programs AS t1 JOIN student_enrolment AS t2 ON t1.degree_program_id = t2.degree_program_id WHERE degree_summary_name = 'Bachelor'",
        "schema": "CREATE TABLE Courses (course_id NUMBER); CREATE TABLE Degree_Programs (degree_program_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT); CREATE TABLE Semesters (semester_id NUMBER, semester_name TEXT); CREATE TABLE Student_Enrolment (student_enrolment_id NUMBER, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER); CREATE TABLE Student_Enrolment_Courses (student_course_id NUMBER, course_id NUMBER, student_enrolment_id NUMBER);"
      },
      {
        "question": "Find a semester that both types of students were enrolled in.",
        "query": "SELECT DISTINCT t2.semester_id FROM degree_programs AS t1 JOIN student_enrolment AS t2 ON t1.degree_program_id = t2.degree_program_id WHERE degree_summary_name = 'Master' INTERSECT SELECT DISTINCT t2.semester_id FROM degree_programs AS t1 JOIN student_enrolment AS t2 ON t1.degree_program_id = t2.degree_program_id WHERE degree_summary_name = 'Bachelor'",
        "schema": "CREATE TABLE Courses (course_id NUMBER); CREATE TABLE Degree_Programs (degree_program_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT); CREATE TABLE Semesters (semester_id NUMBER, semester_name TEXT); CREATE TABLE Student_Enrolment (student_enrolment_id NUMBER, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER); CREATE TABLE Student_Enrolment_Courses (student_course_id NUMBER, course_id NUMBER, student_enrolment_id NUMBER);"
      }
    ]
  ],
  "dog_kennels": [
    [
      {
        "question": "List all the information about the owners.",
        "query": "SELECT * FROM owners",
        "schema": "CREATE TABLE Owners (owner_id NUMBER, first_name TEXT, last_name TEXT); CREATE TABLE Dogs (owner_id NUMBER);"
      },
      {
        "question": "What about the Professionals?",
        "query": "SELECT * FROM professionals",
        "schema": "CREATE TABLE Owners (owner_id NUMBER, first_name TEXT, last_name TEXT); CREATE TABLE Dogs (owner_id NUMBER); CREATE TABLE Professionals (professional_id NUMBER, role_code TEXT, last_name TEXT);"
      },
      {
        "question": "Now show the states of them.",
        "query": "SELECT state FROM professionals",
        "schema": "CREATE TABLE Owners (owner_id NUMBER, first_name TEXT, last_name TEXT, state TEXT); CREATE TABLE Dogs (owner_id NUMBER); CREATE TABLE Professionals (professional_id NUMBER, role_code TEXT, state TEXT, last_name TEXT);"
      },
      {
        "question": "Which of them have both owners and professionals living there?",
        "query": "SELECT state FROM owners INTERSECT SELECT state FROM professionals",
        "schema": "CREATE TABLE Owners (owner_id NUMBER, first_name TEXT, last_name TEXT, state TEXT); CREATE TABLE Dogs (owner_id NUMBER); CREATE TABLE Professionals (professional_id NUMBER, role_code TEXT, state TEXT, last_name TEXT);"
      }
    ],
    [
      {
        "question": "Show all the dog ages.",
        "query": "SELECT age FROM dogs",
        "schema": "CREATE TABLE Dogs (dog_id NUMBER, age TEXT);"
      },
      {
        "question": "What is the maximum and minimum value?",
        "query": "SELECT max(age), min(age) FROM dogs",
        "schema": "CREATE TABLE Dogs (dog_id NUMBER, age TEXT, weight TEXT);"
      },
      {
        "question": "Which of the dogs have gone through treatments?",
        "query": "SELECT * FROM dogs WHERE dog_id IN ( SELECT dog_id FROM treatments )",
        "schema": "CREATE TABLE Breeds (breed_code TEXT); CREATE TABLE Dogs (dog_id NUMBER, breed_code TEXT, age TEXT, weight TEXT); CREATE TABLE Treatments (dog_id NUMBER);"
      },
      {
        "question": "What about the average age of them?",
        "query": "SELECT avg(age) FROM dogs WHERE dog_id IN ( SELECT dog_id FROM treatments )",
        "schema": "CREATE TABLE Breeds (breed_code TEXT); CREATE TABLE Dogs (dog_id NUMBER, breed_code TEXT, age TEXT, weight TEXT); CREATE TABLE Treatments (dog_id NUMBER);"
      }
    ],
    [
      {
        "question": "List all the professionals who are Employees.",
        "query": "SELECT * FROM professionals WHERE role_code = 'Employee'",
        "schema": "CREATE TABLE Professionals (professional_id NUMBER, role_code TEXT, first_name TEXT, last_name TEXT);"
      },
      {
        "question": "How many of them live in Connecticut?",
        "query": "SELECT count(*) FROM professionals WHERE state = 'Connecticut'",
        "schema": "CREATE TABLE Owners (state TEXT); CREATE TABLE Professionals (professional_id NUMBER, role_code TEXT, first_name TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT);"
      },
      {
        "question": "What about in Indiana?",
        "query": "SELECT count(*) FROM professionals WHERE state = 'Indiana'",
        "schema": "CREATE TABLE Owners (state TEXT); CREATE TABLE Professionals (professional_id NUMBER, role_code TEXT, first_name TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT);"
      },
      {
        "question": "Among all the professionals, which have done treatment only 1 treatments?",
        "query": "SELECT * FROM professionals AS t1 JOIN treatments AS t2 ON t1.professional_id = t2.professional_id GROUP BY t1.professional_id HAVING count(*) = 1",
        "schema": "CREATE TABLE Owners (state TEXT); CREATE TABLE Professionals (professional_id NUMBER, role_code TEXT, first_name TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT); CREATE TABLE Treatments (treatment_id NUMBER, professional_id NUMBER);"
      },
      {
        "question": "List the id, last name and cell phone of the professionals who live in the state of Indiana or have done treatment on more than 2 treatments?",
        "query": "SELECT professional_id , last_name , cell_number FROM professionals WHERE state = 'Indiana' UNION SELECT t1.professional_id , t1.last_name , t1.cell_number FROM professionals AS t1 JOIN treatments AS t2 ON t1.professional_id = t2.professional_id GROUP BY t1.professional_id HAVING count(*) > 2",
        "schema": "CREATE TABLE Owners (state TEXT); CREATE TABLE Professionals (professional_id NUMBER, role_code TEXT, first_name TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, home_phone TEXT, cell_number TEXT); CREATE TABLE Treatments (treatment_id NUMBER, professional_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show the dog name and total cost of each dog.",
        "query": "SELECT name, sum(cost_of_treatment) FROM treatments AS t1 JOIN dogs AS t2 ON t1.dog_id = t2.dog_id GROUP BY t1.dog_id",
        "schema": "CREATE TABLE Breeds (breed_code TEXT, breed_name TEXT); CREATE TABLE Dogs (dog_id NUMBER, breed_code TEXT, name TEXT); CREATE TABLE Treatments (dog_id NUMBER, cost_of_treatment NUMBER);"
      },
      {
        "question": "Which of them cost over 500?",
        "query": "SELECT name FROM treatments AS t1 JOIN dogs AS t2 ON t1.dog_id = t2.dog_id GROUP BY t1.dog_id HAVING sum(cost_of_treatment) > 500",
        "schema": "CREATE TABLE Breeds (breed_code TEXT, breed_name TEXT); CREATE TABLE Dogs (dog_id NUMBER, breed_code TEXT, name TEXT); CREATE TABLE Treatments (dog_id NUMBER, cost_of_treatment NUMBER);"
      },
      {
        "question": "What about more than 1000?",
        "query": "SELECT name FROM dogs WHERE dog_id NOT IN( SELECT dog_id FROM treatments GROUP BY dog_id HAVING sum(cost_of_treatment) > 1000 )",
        "schema": "CREATE TABLE Breeds (breed_code TEXT, breed_name TEXT); CREATE TABLE Dogs (dog_id NUMBER, breed_code TEXT, name TEXT); CREATE TABLE Treatments (dog_id NUMBER, cost_of_treatment NUMBER);"
      }
    ],
    [
      {
        "question": "List all the names of both Professionals and Owners.",
        "query": "SELECT first_name FROM professionals UNION SELECT first_name FROM owners",
        "schema": "CREATE TABLE Owners (owner_id NUMBER, first_name TEXT, last_name TEXT); CREATE TABLE Professionals (professional_id NUMBER, first_name TEXT, last_name TEXT);"
      },
      {
        "question": "What about the dog names?",
        "query": "SELECT name FROM dogs",
        "schema": "CREATE TABLE Breeds (breed_code TEXT, breed_name TEXT); CREATE TABLE Owners (owner_id NUMBER, first_name TEXT, last_name TEXT); CREATE TABLE Dogs (dog_id NUMBER, owner_id NUMBER, breed_code TEXT, name TEXT); CREATE TABLE Professionals (professional_id NUMBER, first_name TEXT, last_name TEXT);"
      },
      {
        "question": "Which human names are not used as dog names.",
        "query": "SELECT first_name FROM professionals UNION SELECT first_name FROM owners EXCEPT SELECT name FROM dogs",
        "schema": "CREATE TABLE Breeds (breed_code TEXT, breed_name TEXT); CREATE TABLE Owners (owner_id NUMBER, first_name TEXT, last_name TEXT); CREATE TABLE Dogs (dog_id NUMBER, owner_id NUMBER, breed_code TEXT, name TEXT); CREATE TABLE Professionals (professional_id NUMBER, first_name TEXT, last_name TEXT);"
      }
    ],
    [
      {
        "question": "Show the professional first names and the corresponding treatment type codes for the treatment.",
        "query": "SELECT t1.first_name, t2.treatment_type_code FROM professionals AS t1 JOIN treatments AS t2 ON t1.professional_id = t2.professional_id",
        "schema": "CREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT); CREATE TABLE Owners (first_name TEXT); CREATE TABLE Professionals (professional_id NUMBER, first_name TEXT, last_name TEXT); CREATE TABLE Treatments (professional_id NUMBER, treatment_type_code TEXT);"
      },
      {
        "question": "What about each professional's id, role, email and the treatment type code?",
        "query": "SELECT t1.professional_id , t1.role_code , t1.email_address, t2.treatment_type_code FROM professionals AS t1 JOIN treatments AS t2 ON t1.professional_id = t2.professional_id",
        "schema": "CREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT); CREATE TABLE Owners (first_name TEXT); CREATE TABLE Professionals (professional_id NUMBER, role_code TEXT, first_name TEXT, last_name TEXT, email_address TEXT); CREATE TABLE Treatments (professional_id NUMBER, treatment_type_code TEXT);"
      },
      {
        "question": "Which professional did not provide any treatment? Keep the id, role and email.",
        "query": "SELECT professional_id , role_code , email_address FROM professionals EXCEPT SELECT t1.professional_id , t1.role_code , t1.email_address FROM professionals AS t1 JOIN treatments AS t2 ON t1.professional_id = t2.professional_id",
        "schema": "CREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT); CREATE TABLE Owners (first_name TEXT); CREATE TABLE Professionals (professional_id NUMBER, role_code TEXT, first_name TEXT, last_name TEXT, email_address TEXT); CREATE TABLE Treatments (professional_id NUMBER, treatment_type_code TEXT);"
      }
    ],
    [
      {
        "question": "Show the number of dogs for each owner, keep the owner id.",
        "query": "SELECT t1.owner_id ,count(*) FROM dogs AS t1 JOIN owners AS t2 ON t1.owner_id = t2.owner_id GROUP BY t1.owner_id",
        "schema": "CREATE TABLE Owners (owner_id NUMBER, last_name TEXT); CREATE TABLE Dogs (dog_id NUMBER, owner_id NUMBER);"
      },
      {
        "question": "Which one has 2 dogs?",
        "query": "SELECT t1.owner_id , t2.first_name , t2.last_name, count(*) FROM dogs AS t1 JOIN owners AS t2 ON t1.owner_id = t2.owner_id GROUP BY t1.owner_id HAVING count(*) = 2",
        "schema": "CREATE TABLE Owners (owner_id NUMBER, last_name TEXT); CREATE TABLE Dogs (dog_id NUMBER, owner_id NUMBER);"
      },
      {
        "question": "What about the one with the most dogs?",
        "query": "SELECT t1.owner_id , t2.first_name , t2.last_name FROM dogs AS t1 JOIN owners AS t2 ON t1.owner_id = t2.owner_id GROUP BY t1.owner_id ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Owners (owner_id NUMBER, first_name TEXT, last_name TEXT); CREATE TABLE Dogs (dog_id NUMBER, owner_id NUMBER, name TEXT);"
      }
    ],
    [
      {
        "question": "How many treatment does each professional finished?",
        "query": "SELECT t1.professional_id , count(*) FROM professionals AS t1 JOIN treatments AS t2 ON t1.professional_id = t2.professional_id GROUP BY t1.professional_id",
        "schema": "CREATE TABLE Owners (owner_id NUMBER); CREATE TABLE Professionals (professional_id NUMBER, role_code TEXT, first_name TEXT, last_name TEXT); CREATE TABLE Treatments (professional_id NUMBER);"
      },
      {
        "question": "Show the first name of the professionals who did only 1 treatment.",
        "query": "SELECT t1.first_name FROM professionals AS t1 JOIN treatments AS t2 ON t1.professional_id = t2.professional_id GROUP BY t1.professional_id HAVING count(*) = 1",
        "schema": "CREATE TABLE Owners (owner_id NUMBER); CREATE TABLE Professionals (professional_id NUMBER, role_code TEXT, first_name TEXT, last_name TEXT); CREATE TABLE Treatments (professional_id NUMBER);"
      },
      {
        "question": "What about at least two treatments?",
        "query": "SELECT t1.first_name FROM professionals AS t1 JOIN treatments AS t2 ON t1.professional_id = t2.professional_id GROUP BY t1.professional_id HAVING count(*) >= 2",
        "schema": "CREATE TABLE Owners (owner_id NUMBER); CREATE TABLE Professionals (professional_id NUMBER, role_code TEXT, first_name TEXT, last_name TEXT); CREATE TABLE Treatments (professional_id NUMBER);"
      },
      {
        "question": "Show the id, role, and first name of each from the above.",
        "query": "SELECT t1.professional_id , t1.role_code , t1.first_name FROM professionals AS t1 JOIN treatments AS t2 ON t1.professional_id = t2.professional_id GROUP BY t1.professional_id HAVING count(*) >= 2",
        "schema": "CREATE TABLE Owners (owner_id NUMBER); CREATE TABLE Professionals (professional_id NUMBER, role_code TEXT, first_name TEXT, last_name TEXT); CREATE TABLE Treatments (treatment_id NUMBER, professional_id NUMBER);"
      }
    ],
    [
      {
        "question": "How many dogs for each breed code?",
        "query": "SELECT breed_code, count(*) FROM dogs GROUP BY breed_code",
        "schema": "CREATE TABLE Breeds (breed_code TEXT, breed_name TEXT); CREATE TABLE Dogs (breed_code TEXT);"
      },
      {
        "question": "Which breed codes are the most popular two?",
        "query": "SELECT breed_code, count(*) FROM dogs GROUP BY breed_code LIMIT 2",
        "schema": "CREATE TABLE Breeds (breed_code TEXT, breed_name TEXT); CREATE TABLE Dogs (breed_code TEXT);"
      },
      {
        "question": "What about the most common 1?",
        "query": "SELECT breed_code, count(*) FROM dogs GROUP BY breed_code LIMIT 1",
        "schema": "CREATE TABLE Breeds (breed_code TEXT, breed_name TEXT); CREATE TABLE Dogs (breed_code TEXT);"
      },
      {
        "question": "What name is the breed?",
        "query": "SELECT t1.breed_name FROM breeds AS t1 JOIN dogs AS t2 ON t1.breed_code = t2.breed_code GROUP BY t1.breed_name ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Breeds (breed_code TEXT, breed_name TEXT); CREATE TABLE Dogs (breed_code TEXT, name TEXT);"
      }
    ],
    [
      {
        "question": "Show the dog name and total cost of each dog.",
        "query": "SELECT name, sum(cost_of_treatment) FROM treatments AS t1 JOIN dogs AS t2 ON t1.dog_id = t2.dog_id GROUP BY t1.dog_id",
        "schema": "CREATE TABLE Breeds (breed_code TEXT, breed_name TEXT); CREATE TABLE Dogs (dog_id NUMBER, breed_code TEXT, name TEXT); CREATE TABLE Treatments (dog_id NUMBER, cost_of_treatment NUMBER);"
      },
      {
        "question": "What are the owner names and the cost from their dogs.",
        "query": "SELECT t1.owner_id, t3.cost_of_treatment FROM owners AS t1 JOIN dogs AS t2 ON t1.owner_id = t2.owner_id JOIN treatments AS t3 ON t2.dog_id = t3.dog_id GROUP BY t1.owner_id",
        "schema": "CREATE TABLE Breeds (breed_code TEXT, breed_name TEXT); CREATE TABLE Owners (owner_id NUMBER, first_name TEXT, last_name TEXT); CREATE TABLE Dogs (dog_id NUMBER, owner_id NUMBER, breed_code TEXT, name TEXT); CREATE TABLE Treatments (dog_id NUMBER, cost_of_treatment NUMBER);"
      },
      {
        "question": "Who has paid for the most treatments on the dogs? Keep owner IDs and last names.",
        "query": "SELECT t1.owner_id , t1.last_name FROM owners AS t1 JOIN dogs AS t2 ON t1.owner_id = t2.owner_id JOIN treatments AS t3 ON t2.dog_id = t3.dog_id GROUP BY t1.owner_id ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Breeds (breed_code TEXT, breed_name TEXT); CREATE TABLE Owners (owner_id NUMBER, first_name TEXT, last_name TEXT); CREATE TABLE Dogs (dog_id NUMBER, owner_id NUMBER, breed_code TEXT, name TEXT); CREATE TABLE Treatments (dog_id NUMBER, cost_of_treatment NUMBER);"
      }
    ],
    [
      {
        "question": "List the treatment type code and the description.",
        "query": "select treatment_type_code, treatment_type_description from treatment_types",
        "schema": "CREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT); CREATE TABLE Treatments (treatment_type_code TEXT);"
      },
      {
        "question": "For each treatment type, calculate the sum of costs, and order them in descending order.",
        "query": "SELECT treatment_type_code, sum(cost_of_treatment) FROM treatments GROUP BY treatment_type_code ORDER BY sum(cost_of_treatment) DESC",
        "schema": "CREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT); CREATE TABLE Treatments (treatment_type_code TEXT, cost_of_treatment NUMBER);"
      },
      {
        "question": "Show the treatment type description also.",
        "query": "SELECT t2.treatment_type_code, t1.treatment_type_description, sum(cost_of_treatment) FROM treatment_types AS t1 JOIN treatments AS t2 ON t1.treatment_type_code = t2.treatment_type_code GROUP BY t1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1",
        "schema": "CREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT); CREATE TABLE Treatments (treatment_type_code TEXT, cost_of_treatment NUMBER);"
      },
      {
        "question": "So what is the description of the treatment type that costs the least money in total?",
        "query": "SELECT t1.treatment_type_description FROM treatment_types AS t1 JOIN treatments AS t2 ON t1.treatment_type_code = t2.treatment_type_code GROUP BY t1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1",
        "schema": "CREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT); CREATE TABLE Treatments (treatment_type_code TEXT, cost_of_treatment NUMBER);"
      }
    ],
    [
      {
        "question": "Show the dog name and total cost of each dog.",
        "query": "SELECT name, sum(cost_of_treatment) FROM treatments AS t1 JOIN dogs AS t2 ON t1.dog_id = t2.dog_id GROUP BY t1.dog_id",
        "schema": "CREATE TABLE Breeds (breed_code TEXT, breed_name TEXT); CREATE TABLE Dogs (dog_id NUMBER, breed_code TEXT, name TEXT); CREATE TABLE Treatments (dog_id NUMBER, cost_of_treatment NUMBER);"
      },
      {
        "question": "How many of them cost over 700?",
        "query": "SELECT count(name) FROM treatments AS t1 JOIN dogs AS t2 ON t1.dog_id = t2.dog_id GROUP BY t1.dog_id HAVING sum(cost_of_treatment) > 700",
        "schema": "CREATE TABLE Breeds (breed_code TEXT, breed_name TEXT); CREATE TABLE Dogs (dog_id NUMBER, breed_code TEXT, name TEXT); CREATE TABLE Treatments (dog_id NUMBER, cost_of_treatment NUMBER);"
      },
      {
        "question": "Which owner paid the cost larger than 400, show the owner id and the zip code?",
        "query": "SELECT t1.owner_id ,t1.zip_code FROM owners AS t1 JOIN dogs AS t2 ON t1.owner_id = t2.owner_id JOIN treatments AS t3 ON t2.dog_id = t3.dog_id GROUP BY t1.owner_id HAVING sum(t3.cost_of_treatment) > 400",
        "schema": "CREATE TABLE Breeds (breed_code TEXT, breed_name TEXT); CREATE TABLE Owners (owner_id NUMBER, last_name TEXT, zip_code TEXT); CREATE TABLE Dogs (dog_id NUMBER, owner_id NUMBER, breed_code TEXT, size_code TEXT, name TEXT); CREATE TABLE Professionals (zip_code TEXT); CREATE TABLE Treatments (dog_id NUMBER, cost_of_treatment NUMBER);"
      },
      {
        "question": "What about the owner who spent the largest cost?",
        "query": "SELECT t1.owner_id , t1.zip_code FROM owners AS t1 JOIN dogs AS t2 ON t1.owner_id = t2.owner_id JOIN treatments AS t3 ON t2.dog_id = t3.dog_id GROUP BY t1.owner_id ORDER BY sum(t3.cost_of_treatment) DESC LIMIT 1",
        "schema": "CREATE TABLE Breeds (breed_code TEXT, breed_name TEXT); CREATE TABLE Owners (owner_id NUMBER, last_name TEXT, zip_code TEXT); CREATE TABLE Dogs (dog_id NUMBER, owner_id NUMBER, breed_code TEXT, size_code TEXT, name TEXT); CREATE TABLE Professionals (zip_code TEXT); CREATE TABLE Treatments (dog_id NUMBER, cost_of_treatment NUMBER);"
      }
    ],
    [
      {
        "question": "List the professional first names and their types of treatments.",
        "query": "SELECT t1.first_name, t2.treatment_type_code FROM professionals AS t1 JOIN treatments AS t2 ON t1.professional_id = t2.professional_id GROUP BY t1.professional_id",
        "schema": "CREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT); CREATE TABLE Owners (first_name TEXT); CREATE TABLE Professionals (professional_id NUMBER, first_name TEXT, last_name TEXT); CREATE TABLE Treatments (professional_id NUMBER, treatment_type_code TEXT);"
      },
      {
        "question": "Add the counts of them also.",
        "query": "SELECT t1.first_name, t2.treatment_type_code, count(*) FROM professionals AS t1 JOIN treatments AS t2 ON t1.professional_id = t2.professional_id GROUP BY t1.professional_id",
        "schema": "CREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT); CREATE TABLE Owners (first_name TEXT); CREATE TABLE Professionals (professional_id NUMBER, first_name TEXT, last_name TEXT); CREATE TABLE Treatments (professional_id NUMBER, treatment_type_code TEXT);"
      },
      {
        "question": "Among the results, who did only 1 type of treatment? List the professional ids and cell phone numbers of them.",
        "query": "SELECT t1.professional_id , t1.cell_number FROM professionals AS t1 JOIN treatments AS t2 ON t1.professional_id = t2.professional_id GROUP BY t1.professional_id HAVING count(*) = 1",
        "schema": "CREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT); CREATE TABLE Owners (first_name TEXT, cell_number TEXT); CREATE TABLE Professionals (professional_id NUMBER, first_name TEXT, last_name TEXT, home_phone TEXT, cell_number TEXT); CREATE TABLE Treatments (professional_id NUMBER, treatment_type_code TEXT);"
      },
      {
        "question": "What about at least two types of treatments?",
        "query": "SELECT t1.professional_id , t1.cell_number FROM professionals AS t1 JOIN treatments AS t2 ON t1.professional_id = t2.professional_id GROUP BY t1.professional_id HAVING count(*) >= 2",
        "schema": "CREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT); CREATE TABLE Owners (first_name TEXT, cell_number TEXT); CREATE TABLE Professionals (professional_id NUMBER, first_name TEXT, last_name TEXT, home_phone TEXT, cell_number TEXT); CREATE TABLE Treatments (professional_id NUMBER, treatment_type_code TEXT);"
      }
    ],
    [
      {
        "question": "What is the minimum, maximum and average value of the treatment costs?",
        "query": "SELECT min(cost_of_treatment), max(cost_of_treatment), avg(cost_of_treatment) FROM treatments",
        "schema": "CREATE TABLE Treatments (cost_of_treatment NUMBER);"
      },
      {
        "question": "Which professionals who did the minimum value of the treatment cost? Provide the first name and last name.",
        "query": "SELECT DISTINCT t1.first_name , t1.last_name FROM professionals AS t1 JOIN treatments AS t2 WHERE cost_of_treatment = ( SELECT min(cost_of_treatment) FROM treatments )",
        "schema": "CREATE TABLE Professionals (professional_id NUMBER, first_name TEXT, last_name TEXT); CREATE TABLE Treatments (professional_id NUMBER, cost_of_treatment NUMBER);"
      },
      {
        "question": "What about the maximum cost?",
        "query": "SELECT DISTINCT t1.first_name , t1.last_name FROM professionals AS t1 JOIN treatments AS t2 WHERE cost_of_treatment = ( SELECT max(cost_of_treatment) FROM treatments )",
        "schema": "CREATE TABLE Professionals (professional_id NUMBER, first_name TEXT, last_name TEXT); CREATE TABLE Treatments (professional_id NUMBER, cost_of_treatment NUMBER);"
      },
      {
        "question": "How about below the average of the cost?",
        "query": "SELECT DISTINCT t1.first_name , t1.last_name FROM professionals AS t1 JOIN treatments AS t2 WHERE cost_of_treatment < ( SELECT avg(cost_of_treatment) FROM treatments )",
        "schema": "CREATE TABLE Professionals (professional_id NUMBER, first_name TEXT, last_name TEXT); CREATE TABLE Treatments (professional_id NUMBER, cost_of_treatment NUMBER);"
      }
    ],
    [
      {
        "question": "How many dogs for each breed code?",
        "query": "SELECT breed_code, count(*) FROM dogs GROUP BY breed_code",
        "schema": "CREATE TABLE Breeds (breed_code TEXT, breed_name TEXT); CREATE TABLE Dogs (breed_code TEXT);"
      },
      {
        "question": "Which one is the most popular one?",
        "query": "SELECT breed_code, count(*) FROM dogs GROUP BY breed_code ORDER BY count(*) DESC LIMIT 1",
        "schema": "CREATE TABLE Breeds (breed_code TEXT, breed_name TEXT); CREATE TABLE Dogs (breed_code TEXT);"
      },
      {
        "question": "What about the least popular one?",
        "query": "SELECT breed_code, count(*) FROM dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1",
        "schema": "CREATE TABLE Breeds (breed_code TEXT, breed_name TEXT); CREATE TABLE Dogs (breed_code TEXT);"
      },
      {
        "question": "So which dogs are having the breed code? And the treatment dates?",
        "query": "SELECT t1.name , t2.date_of_treatment FROM dogs AS t1 JOIN treatments AS t2 ON t1.dog_id = t2.dog_id WHERE t1.breed_code = ( SELECT breed_code FROM dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
        "schema": "CREATE TABLE Breeds (breed_code TEXT, breed_name TEXT); CREATE TABLE Dogs (dog_id NUMBER, breed_code TEXT); CREATE TABLE Treatments (dog_id NUMBER, date_of_treatment TIME);"
      }
    ],
    [
      {
        "question": "Show the name of dogs whose owners are from the city 'Lake Tia'.",
        "query": "SELECT t2.name FROM owners AS t1 JOIN dogs AS t2 ON t1.owner_id = t2.owner_id WHERE t1.city = 'Lake Tia'",
        "schema": "CREATE TABLE Breeds (breed_code TEXT, breed_name TEXT); CREATE TABLE Owners (owner_id NUMBER, last_name TEXT, city TEXT); CREATE TABLE Dogs (dog_id NUMBER, owner_id NUMBER, breed_code TEXT, name TEXT);"
      },
      {
        "question": "Add the owner's first names also.",
        "query": "SELECT t1.first_name, t2.name FROM owners AS t1 JOIN dogs AS t2 ON t1.owner_id = t2.owner_id WHERE t1.city = 'Lake Tia'",
        "schema": "CREATE TABLE Breeds (breed_code TEXT, breed_name TEXT); CREATE TABLE Owners (owner_id NUMBER, first_name TEXT, last_name TEXT, city TEXT); CREATE TABLE Dogs (dog_id NUMBER, owner_id NUMBER, breed_code TEXT, name TEXT);"
      },
      {
        "question": "What about when the owner is from the state of 'Virginia'?",
        "query": "SELECT t1.first_name , t2.name FROM owners AS t1 JOIN dogs AS t2 ON t1.owner_id = t2.owner_id WHERE t1.state = 'Virginia'",
        "schema": "CREATE TABLE Breeds (breed_code TEXT, breed_name TEXT); CREATE TABLE Owners (owner_id NUMBER, first_name TEXT, last_name TEXT, city TEXT, state TEXT); CREATE TABLE Dogs (dog_id NUMBER, owner_id NUMBER, breed_code TEXT, name TEXT);"
      }
    ],
    [
      {
        "question": "Which one is the oldest dog? List the information of it.",
        "query": "SELECT * FROM dogs ORDER BY age DESC LIMIT 1",
        "schema": "CREATE TABLE Breeds (breed_code TEXT, breed_name TEXT); CREATE TABLE Dogs (dog_id NUMBER, breed_code TEXT, name TEXT, age TEXT, date_of_birth TIME, date_arrived TIME, date_adopted TIME);"
      },
      {
        "question": "What are the last names of the oldest dogs?",
        "query": "SELECT t1.last_name FROM owners AS t1 JOIN dogs AS t2 ON t1.owner_id = t2.owner_id WHERE t2.age = ( SELECT max(age) FROM dogs )",
        "schema": "CREATE TABLE Breeds (breed_code TEXT, breed_name TEXT); CREATE TABLE Owners (last_name TEXT); CREATE TABLE Dogs (dog_id NUMBER, breed_code TEXT, name TEXT, age TEXT, date_of_birth TIME, date_arrived TIME, date_adopted TIME);"
      },
      {
        "question": "What about the owner last name of the youngest dog?",
        "query": "SELECT t1.last_name FROM owners AS t1 JOIN dogs AS t2 ON t1.owner_id = t2.owner_id WHERE t2.age = ( SELECT min(age) FROM dogs )",
        "schema": "CREATE TABLE Breeds (breed_code TEXT, breed_name TEXT); CREATE TABLE Owners (owner_id NUMBER, last_name TEXT); CREATE TABLE Dogs (dog_id NUMBER, owner_id NUMBER, breed_code TEXT, name TEXT, age TEXT, date_of_birth TIME, date_arrived TIME, date_adopted TIME);"
      }
    ],
    [
      {
        "question": "Show the cities and states of the professionals.",
        "query": "SELECT city, state FROM professionals",
        "schema": "CREATE TABLE Owners (city TEXT, state TEXT); CREATE TABLE Professionals (professional_id NUMBER, city TEXT, state TEXT);"
      },
      {
        "question": "How many of them are from 'Hawaii'?",
        "query": "SELECT count(*) FROM professionals WHERE state = 'Hawaii'",
        "schema": "CREATE TABLE Owners (city TEXT, state TEXT); CREATE TABLE Professionals (professional_id NUMBER, city TEXT, state TEXT);"
      },
      {
        "question": "List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin.",
        "query": "SELECT email_address FROM professionals WHERE state = 'Hawaii' OR state = 'Wisconsin'",
        "schema": "CREATE TABLE Owners (city TEXT, state TEXT, email_address TEXT); CREATE TABLE Professionals (professional_id NUMBER, city TEXT, state TEXT, email_address TEXT);"
      }
    ],
    [
      {
        "question": "Show the states of the professionals.",
        "query": "SELECT state FROM professionals",
        "schema": "CREATE TABLE Owners (state TEXT); CREATE TABLE Professionals (professional_id NUMBER, role_code TEXT, state TEXT, last_name TEXT); CREATE TABLE Treatments (professional_id NUMBER);"
      },
      {
        "question": "How many of them are from 'Wisconsin'?",
        "query": "SELECT count(*) FROM professionals WHERE state = 'Wisconsin'",
        "schema": "CREATE TABLE Owners (state TEXT); CREATE TABLE Professionals (professional_id NUMBER, role_code TEXT, state TEXT, last_name TEXT); CREATE TABLE Treatments (professional_id NUMBER);"
      },
      {
        "question": "List the role code ,  street ,  city ,  state from the above results.",
        "query": "SELECT role_code , street , city , state FROM professionals WHERE state = 'Wisconsin'",
        "schema": "CREATE TABLE Owners (street TEXT, state TEXT); CREATE TABLE Professionals (professional_id NUMBER, role_code TEXT, street TEXT, city TEXT, state TEXT, last_name TEXT); CREATE TABLE Treatments (professional_id NUMBER);"
      },
      {
        "question": "What about those professionals who live in a city containing the substring 'West'?",
        "query": "SELECT role_code , street , city , state FROM professionals WHERE city LIKE '%West%'",
        "schema": "CREATE TABLE Owners (street TEXT, state TEXT); CREATE TABLE Professionals (professional_id NUMBER, role_code TEXT, street TEXT, city TEXT, state TEXT, last_name TEXT); CREATE TABLE Treatments (professional_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show the states of the owners.",
        "query": "SELECT state FROM owners",
        "schema": "CREATE TABLE Owners (owner_id NUMBER, last_name TEXT, state TEXT); CREATE TABLE Professionals (state TEXT);"
      },
      {
        "question": "How many of them are from 'Vermont'?",
        "query": "SELECT count(*) FROM owners WHERE state = 'Vermont'",
        "schema": "CREATE TABLE Owners (owner_id NUMBER, last_name TEXT, state TEXT); CREATE TABLE Professionals (state TEXT);"
      },
      {
        "question": "List the first name, last name and email of the owners who lives in the states that has the substring 'North'.",
        "query": "SELECT first_name , last_name , email_address FROM owners WHERE state LIKE '%North%'",
        "schema": "CREATE TABLE Owners (owner_id NUMBER, first_name TEXT, last_name TEXT, state TEXT, email_address TEXT); CREATE TABLE Professionals (state TEXT, email_address TEXT);"
      }
    ],
    [
      {
        "question": "Order the dog ages in descending order.",
        "query": "SELECT age FROM dogs ORDER BY age desc",
        "schema": "CREATE TABLE Dogs (age TEXT, date_of_birth TIME);"
      },
      {
        "question": "How many of them are below 4?",
        "query": "SELECT count(*) FROM dogs WHERE age < 4",
        "schema": "CREATE TABLE Dogs (age TEXT, date_of_birth TIME);"
      },
      {
        "question": "What about the ones that are below the average?",
        "query": "SELECT count(*) FROM dogs WHERE age < ( SELECT avg(age) FROM dogs )",
        "schema": "CREATE TABLE Dogs (age TEXT, date_of_birth TIME);"
      }
    ],
    [
      {
        "question": "Show the treatment details.",
        "query": "SELECT * FROM treatments",
        "schema": "CREATE TABLE Treatments (treatment_id NUMBER, dog_id NUMBER, treatment_type_code TEXT);"
      },
      {
        "question": "Order the cost in ascending order.",
        "query": "SELECT cost_of_treatment FROM treatments ORDER BY cost_of_treatment ASC",
        "schema": "CREATE TABLE Treatments (treatment_id NUMBER, dog_id NUMBER, treatment_type_code TEXT, cost_of_treatment NUMBER);"
      },
      {
        "question": "What about in descending order?",
        "query": "SELECT cost_of_treatment FROM treatments ORDER BY cost_of_treatment DESC",
        "schema": "CREATE TABLE Treatments (treatment_id NUMBER, dog_id NUMBER, treatment_type_code TEXT, cost_of_treatment NUMBER);"
      },
      {
        "question": "Which one is the most recent cost?",
        "query": "SELECT cost_of_treatment FROM treatments ORDER BY date_of_treatment DESC LIMIT 1",
        "schema": "CREATE TABLE Treatments (treatment_id NUMBER, dog_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER);"
      }
    ],
    [
      {
        "question": "Show all the owner information.",
        "query": "SELECT * FROM owners",
        "schema": "CREATE TABLE Owners (owner_id NUMBER, last_name TEXT); CREATE TABLE Dogs (owner_id NUMBER);"
      },
      {
        "question": "What about the dogs?",
        "query": "SELECT * FROM dogs",
        "schema": "CREATE TABLE Breeds (breed_code TEXT); CREATE TABLE Owners (owner_id NUMBER, last_name TEXT); CREATE TABLE Dogs (dog_id NUMBER, owner_id NUMBER, breed_code TEXT, name TEXT);"
      },
      {
        "question": "Among those, how many of them have been sent to receive treatment?",
        "query": "SELECT count(*) FROM dogs WHERE dog_id IN ( SELECT dog_id FROM treatments )",
        "schema": "CREATE TABLE Breeds (breed_code TEXT); CREATE TABLE Owners (owner_id NUMBER, last_name TEXT); CREATE TABLE Dogs (dog_id NUMBER, owner_id NUMBER, breed_code TEXT, name TEXT); CREATE TABLE Treatments (dog_id NUMBER);"
      },
      {
        "question": "What about those who did not?",
        "query": "SELECT count(*) FROM dogs WHERE dog_id NOT IN ( SELECT dog_id FROM treatments )",
        "schema": "CREATE TABLE Breeds (breed_code TEXT); CREATE TABLE Owners (owner_id NUMBER, last_name TEXT); CREATE TABLE Dogs (dog_id NUMBER, owner_id NUMBER, breed_code TEXT, name TEXT); CREATE TABLE Treatments (dog_id NUMBER);"
      }
    ],
    [
      {
        "question": "Show all the owner information.",
        "query": "SELECT * FROM owners",
        "schema": "CREATE TABLE Owners (owner_id NUMBER, last_name TEXT); CREATE TABLE Dogs (owner_id NUMBER);"
      },
      {
        "question": "How many of them come from the state of 'Arizona'?",
        "query": "SELECT count(*) FROM owners WHERE state = 'Arizona'",
        "schema": "CREATE TABLE Owners (owner_id NUMBER, last_name TEXT, city TEXT, state TEXT); CREATE TABLE Dogs (owner_id NUMBER); CREATE TABLE Professionals (state TEXT);"
      },
      {
        "question": "What about those who do not have any dogs temporarily?",
        "query": "SELECT count(*) FROM owners WHERE owner_id NOT IN ( SELECT owner_id FROM dogs )",
        "schema": "CREATE TABLE Owners (owner_id NUMBER, last_name TEXT, city TEXT, state TEXT); CREATE TABLE Dogs (dog_id NUMBER, owner_id NUMBER); CREATE TABLE Professionals (state TEXT);"
      }
    ],
    [
      {
        "question": "How many professionals are there?",
        "query": "SELECT count(*) FROM professionals",
        "schema": "CREATE TABLE Owners (owner_id NUMBER); CREATE TABLE Dogs (owner_id NUMBER); CREATE TABLE Professionals (professional_id NUMBER, role_code TEXT, first_name TEXT, last_name TEXT); CREATE TABLE Treatments (professional_id NUMBER);"
      },
      {
        "question": "How many of them come from 'West Heidi?'",
        "query": "SELECT count(*) FROM professionals WHERE city = 'West Heidi'",
        "schema": "CREATE TABLE Owners (owner_id NUMBER); CREATE TABLE Dogs (owner_id NUMBER); CREATE TABLE Professionals (professional_id NUMBER, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, last_name TEXT); CREATE TABLE Treatments (professional_id NUMBER);"
      },
      {
        "question": "What about those who did not operate any treatment on dogs?",
        "query": "SELECT count(*) FROM professionals WHERE professional_id NOT IN ( SELECT professional_id FROM treatments )",
        "schema": "CREATE TABLE Owners (owner_id NUMBER, city TEXT); CREATE TABLE Dogs (dog_id NUMBER, owner_id NUMBER); CREATE TABLE Professionals (professional_id NUMBER, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, last_name TEXT); CREATE TABLE Treatments (dog_id NUMBER, professional_id NUMBER);"
      }
    ]
  ]
}